[
  {
    "text": "you know it's after lunch the rooms dark I get it",
    "start": "8430",
    "end": "13850"
  },
  {
    "text": "hello welcome thank you everyone for coming my name is Dave",
    "start": "14099",
    "end": "20449"
  },
  {
    "text": "and I'm talk today about c-sharp and I'm gonna talk to you about lowering because",
    "start": "21140",
    "end": "27960"
  },
  {
    "text": "I like lowering I like c-sharp I like to know what the compiler is doing I find",
    "start": "27960",
    "end": "35940"
  },
  {
    "text": "it interesting I do work for Microsoft but I don't work on the compiler I work pretty closely with the compiler team",
    "start": "35940",
    "end": "42900"
  },
  {
    "text": "and the Roselyn team but this is mainly",
    "start": "42900",
    "end": "48420"
  },
  {
    "text": "just interest and good practices and things that I think can help you be a",
    "start": "48420",
    "end": "53879"
  },
  {
    "text": "better developer so the first question is what is lowering has anyone heard the",
    "start": "53879",
    "end": "60420"
  },
  {
    "text": "term before I can't see any but there is a really big light there so maybe um",
    "start": "60420",
    "end": "66630"
  },
  {
    "text": "okay so that's good because I'm gonna explain what it is so if you'd heard of it you'd be bored let's pretend that",
    "start": "66630",
    "end": "74940"
  },
  {
    "text": "we're all in a language design meeting and we're going to discuss in our",
    "start": "74940",
    "end": "80130"
  },
  {
    "text": "fictional language that looks a lot like c-sharp how we take a for each loop and how we compile it to intermediate",
    "start": "80130",
    "end": "87360"
  },
  {
    "text": "language right il which is what dotnet code combustor and so we're all discussing you know strategies how we're",
    "start": "87360",
    "end": "94530"
  },
  {
    "text": "gonna do this what's your favorite I Alex touch instruction what's mine and in the back corner there's someone who I",
    "start": "94530",
    "end": "102030"
  },
  {
    "text": "once a he's lazy but he likes efficiency and he likes to do the least work",
    "start": "102030",
    "end": "107250"
  },
  {
    "text": "possible his name is lowering and he says you know why are we discussing this we don't",
    "start": "107250",
    "end": "113670"
  },
  {
    "text": "need a for each statement we just tell our users if you want to write a for each well you can just write a for loop",
    "start": "113670",
    "end": "119640"
  },
  {
    "text": "and they do the same thing this code is equivalent so fine he's pretty",
    "start": "119640",
    "end": "125310"
  },
  {
    "text": "belligerent so we we accept his idea and we start discussing how we're gonna",
    "start": "125310",
    "end": "130350"
  },
  {
    "text": "compile a for loop to io instead and of course after a few minutes up ups the",
    "start": "130350",
    "end": "135510"
  },
  {
    "text": "hand well we don't really need a for loop because everyone knows a for loop is just a fancy way of writing a while",
    "start": "135510",
    "end": "141900"
  },
  {
    "text": "loop and this does the same thing so it's less work for us okay fine and of course you can guess what happens",
    "start": "141900",
    "end": "149040"
  },
  {
    "text": "a few minutes later up pops the hands a while loop is really just a convenient",
    "start": "149040",
    "end": "154310"
  },
  {
    "text": "way of using a go-to statement so we don't need any of this right and after a",
    "start": "154310",
    "end": "160460"
  },
  {
    "text": "few more minutes of talking actually we get to I out now this is the only il in",
    "start": "160460",
    "end": "165890"
  },
  {
    "text": "this talk because I'm not talking about il mainly because I have no idea what it does I mean it runs my code somehow but",
    "start": "165890",
    "end": "172840"
  },
  {
    "text": "the only thing that I well not the only thing I understand but I do know what this means",
    "start": "172840",
    "end": "178150"
  },
  {
    "text": "so here we can see a bunch of labels right there line numbers or memory addresses you can think of them as",
    "start": "178150",
    "end": "183860"
  },
  {
    "text": "labels and this line says BLTs - il 24 this is branch if less then and - 24 so",
    "start": "183860",
    "end": "192950"
  },
  {
    "text": "if we think about our code if something is less than something else and there's",
    "start": "192950",
    "end": "198590"
  },
  {
    "text": "stacks involved in this and we have registers and whatever we don't worry that but if that means less than something else go to the start and",
    "start": "198590",
    "end": "205610"
  },
  {
    "text": "that's exactly what I'll say right it's pretty clear thing is this is all il can",
    "start": "205610",
    "end": "212360"
  },
  {
    "text": "do there is no loop construct in il there is no block construct it's just a",
    "start": "212360",
    "end": "220700"
  },
  {
    "text": "bunch of instructions and a bunch of branching which is basically go juice so everything we write in c-sharp has to",
    "start": "220700",
    "end": "228080"
  },
  {
    "text": "eventually get down to this level anyway so the idea behind lowering is that it's",
    "start": "228080",
    "end": "233150"
  },
  {
    "text": "easier to do as much of that work to get to this level in c-sharp which is a nice",
    "start": "233150",
    "end": "238880"
  },
  {
    "text": "language than it is to do it all in il I won't say it's not a nice like which I",
    "start": "238880",
    "end": "244430"
  },
  {
    "text": "don't know so yeah so lowering is we have the compiler take our code and",
    "start": "244430",
    "end": "251560"
  },
  {
    "text": "convert it to a lower form but of the same language and there's plenty of",
    "start": "251560",
    "end": "257090"
  },
  {
    "text": "examples of this in c-sharp so hopefully we all know what link queries are and I",
    "start": "257090",
    "end": "262490"
  },
  {
    "text": "think link queries is one of the most most well known examples of lowering even if you didn't know that it was",
    "start": "262490",
    "end": "268310"
  },
  {
    "text": "called lowering because a link query can be written two ways we can write our query syntax like this but hopefully",
    "start": "268310",
    "end": "275780"
  },
  {
    "text": "most of you know and I think most people do that this is equivalent to writing using the method syntax and in fact in",
    "start": "275780",
    "end": "282169"
  },
  {
    "text": "rosslyn in Visual Studio with refactoring say convert loop to link there's two options you convert it",
    "start": "282169",
    "end": "288580"
  },
  {
    "text": "to query syntax or methods syntax so these are the same things that built the",
    "start": "288580",
    "end": "294340"
  },
  {
    "text": "query syntax gets lowered into this form you might have heard the term syntactic",
    "start": "294340",
    "end": "299920"
  },
  {
    "text": "sugar so lowering is essentially the opposite lowering is taking the sugar",
    "start": "299920",
    "end": "305020"
  },
  {
    "text": "away the thing is you know I said it's everywhere at this code also needs to be",
    "start": "305020",
    "end": "313510"
  },
  {
    "text": "lowered because these are extension methods the way you write an extension method is uses static method you mark",
    "start": "313510",
    "end": "320080"
  },
  {
    "text": "the first parameter special in and the compile lets you kind of pass that first parameter in but as the thing you're",
    "start": "320080",
    "end": "325840"
  },
  {
    "text": "calling it on but they are also just normal static methods so this code is actually equivalent to this right",
    "start": "325840",
    "end": "333340"
  },
  {
    "text": "enumerable dot select is a static method and instead of calling it on a collection we pass our collection in and",
    "start": "333340",
    "end": "340390"
  },
  {
    "text": "our collection is the result of nowhere and then we have lambda expressions",
    "start": "340390",
    "end": "347200"
  },
  {
    "text": "there of course they need to be lowered as well and conceptually they kind of",
    "start": "347200",
    "end": "353170"
  },
  {
    "text": "get lowered to this you can kind of think of them as methods so what started as a query that looked like upside-down",
    "start": "353170",
    "end": "359950"
  },
  {
    "text": "SQL can also be written in this really fairly standard c-sharp and so if you're",
    "start": "359950",
    "end": "365140"
  },
  {
    "text": "writing a compiler you've got to write code that converts this normal c-sharp into IL it's easier for you to convert",
    "start": "365140",
    "end": "373510"
  },
  {
    "text": "the fancy c-sharp into normal see sharp and then into IL it's it's I mean it's basic code reuse that we all do right if",
    "start": "373510",
    "end": "381100"
  },
  {
    "text": "you think about the previous example of for each and for etc if you had a method called for each that compiled a string",
    "start": "381100",
    "end": "387610"
  },
  {
    "text": "of code be much easy to change that code to a4 and then call the for method then",
    "start": "387610",
    "end": "392800"
  },
  {
    "text": "have six methods that alright the way out anyway that's lowering its",
    "start": "392800",
    "end": "398800"
  },
  {
    "text": "absolutely ever actually you're just gonna switch to visual studio for a second so this is this is the Roslin",
    "start": "398800",
    "end": "405700"
  },
  {
    "text": "project solution so Roslin is the c-sharp compiler if you weren't where",
    "start": "405700",
    "end": "410890"
  },
  {
    "text": "and it also includes IDE bits a used to include a project system which I work on but doesn't anymore um in the compilers",
    "start": "410890",
    "end": "418659"
  },
  {
    "text": "folder and under c-sharp and in the actual compiler here there's a folder called lowering and in here there's not",
    "start": "418659",
    "end": "426339"
  },
  {
    "text": "a lot there's you know ten or so files this is where all the code lives that",
    "start": "426339",
    "end": "432969"
  },
  {
    "text": "does the lowering and lowering is about rewriting codes rewriting code so",
    "start": "432969",
    "end": "438939"
  },
  {
    "text": "there's a bunch of folders there you can see called rewriter every writer then if we look in the local rewriter folder",
    "start": "438939",
    "end": "444939"
  },
  {
    "text": "this is all of the code that lowers code it lowers c-sharp in place so these are",
    "start": "444939",
    "end": "450429"
  },
  {
    "text": "the simple ones which and I'll talk about a few in a minute but if we expand this folder you can see there are heaps",
    "start": "450429",
    "end": "456189"
  },
  {
    "text": "of files here and there's all sorts of weird things you wouldn't think about like if statement you zoom back out is",
    "start": "456189",
    "end": "463989"
  },
  {
    "text": "hopefully future shears no open file now yeah so this is how we lower in if",
    "start": "463989",
    "end": "470349"
  },
  {
    "text": "saving you kind of wouldn't think that if statements need to be lowered right that's pretty low level code it's an if statement if we scroll down there's a",
    "start": "470349",
    "end": "477159"
  },
  {
    "text": "comment here that says what it is so an if statement has a condition and a block but remember in il there's no such thing",
    "start": "477159",
    "end": "484599"
  },
  {
    "text": "as a block so the way we run in if is we have to invert it and skip them about",
    "start": "484599",
    "end": "490239"
  },
  {
    "text": "next bunch of code so even an if statement gets lowered essentially into",
    "start": "490239",
    "end": "495819"
  },
  {
    "text": "a go to go to S or everywhere right so there's all these files it's it's very prevalent as a few more examples so",
    "start": "495819",
    "end": "503829"
  },
  {
    "text": "something simple like VAR message equals NDC Oslo var is not a concept that they're not net runtime knows about it's",
    "start": "503829",
    "end": "510309"
  },
  {
    "text": "just the compiler we know that when we type var in this case the compiler will insert a string well that's lowering",
    "start": "510309",
    "end": "516550"
  },
  {
    "text": "right it has to lower it to code that says string message equals embassy else load the compiler also uses lowering to",
    "start": "516550",
    "end": "522698"
  },
  {
    "text": "optimize your code so if you wrote this code the compiler sees that these two strings are literals that can't change",
    "start": "522699",
    "end": "529720"
  },
  {
    "text": "and it sees that you're using the plus operator and it knows how to do that at compile time so these two lines of code",
    "start": "529720",
    "end": "535779"
  },
  {
    "text": "actually lower to the exact same thing they both just say string message equals NDC Osler if we have our bits of our",
    "start": "535779",
    "end": "544540"
  },
  {
    "text": "string coming from somewhere else then things get a bit different so if these were constants the same thing would apply and all three of",
    "start": "544540",
    "end": "550850"
  },
  {
    "text": "these lines of codes could be the same but if their variables it still gets lowered it gets lowered into using the",
    "start": "550850",
    "end": "557029"
  },
  {
    "text": "string concatenated because it's faster than using the plus operator so there's a tiny bit of optimization that happens",
    "start": "557029",
    "end": "564339"
  },
  {
    "text": "during compilation kind of before compilation but by lowering even",
    "start": "564339",
    "end": "569870"
  },
  {
    "text": "something as simple as declaring a decimal a decimal is not an intrinsic type in dotnet so this actually when it",
    "start": "569870",
    "end": "576980"
  },
  {
    "text": "gets compiled would say decimal message and I guess it probably shouldn't say message equals new decimal this is just",
    "start": "576980",
    "end": "584240"
  },
  {
    "text": "a normal constructor there's a convenience way if you express that which is the M but when it gets down to",
    "start": "584240",
    "end": "590629"
  },
  {
    "text": "it to compile your code that convenience was just for you it's not for the compiler so why do we care while you all",
    "start": "590629",
    "end": "598279"
  },
  {
    "text": "here why are you all here they don't think too hard about this nobody leaf it's okay I tell you why I'm",
    "start": "598279",
    "end": "603470"
  },
  {
    "text": "here I like knowing what happens under the covers I like understanding one layer below",
    "start": "603470",
    "end": "612589"
  },
  {
    "text": "where I have to write and I this applies to life as well I like to know when I",
    "start": "612589",
    "end": "619459"
  },
  {
    "text": "like to notice how the things I'm using work and I think it helps you use them better help you utilize them better",
    "start": "619459",
    "end": "625579"
  },
  {
    "text": "my wife had a problem with her onedrive on her macbook recently and of course I work for Microsoft so it's my fault and",
    "start": "625579",
    "end": "632050"
  },
  {
    "text": "message popped up she had no idea what it meant I don't use a Mac I haven't for",
    "start": "632050",
    "end": "637250"
  },
  {
    "text": "a few years I didn't really know what it meant either but it said there was something wrong with keychain and I know enough to know that keychain is where",
    "start": "637250",
    "end": "644089"
  },
  {
    "text": "max keep their passwords so I opened keychain I found onedrive I deleted it and we try it again",
    "start": "644089",
    "end": "649459"
  },
  {
    "text": "and it worked I still don't know anything about max I don't know anything about onedrive from Mac but by knowing",
    "start": "649459",
    "end": "654769"
  },
  {
    "text": "just one little bit lower I was able to solve a problem and so I do the same thing with c-sharp the real concrete",
    "start": "654769",
    "end": "663110"
  },
  {
    "text": "reason to know or one of them is performance take this line of code yeah",
    "start": "663110",
    "end": "671449"
  },
  {
    "text": "fairly simple string concatenation count is a number of some kind",
    "start": "671449",
    "end": "677590"
  },
  {
    "text": "this code is perfectly readable to me but you can see sharp 6 I think we got",
    "start": "677590",
    "end": "684860"
  },
  {
    "text": "interpolated strengths and a lot of people find these easier to read and they have a very good point when this",
    "start": "684860",
    "end": "692650"
  },
  {
    "text": "first came out where I was working it seemed like every pull request that was",
    "start": "692650",
    "end": "698930"
  },
  {
    "text": "open for any reason people would also go and fix up all these concatenations that they shouldn't convert them to the new",
    "start": "698930",
    "end": "704810"
  },
  {
    "text": "syntax and that's cool it's good to clean up code as you go but every time that happened",
    "start": "704810",
    "end": "711500"
  },
  {
    "text": "I saw a potential performance problem because interpolated strings like this",
    "start": "711500",
    "end": "717400"
  },
  {
    "text": "compile or lower to string dot format so string dot format is slower than",
    "start": "717400",
    "end": "724460"
  },
  {
    "text": "concatenation now there's a good reason for it to be slower and in this case arguably the first line of code is wrong",
    "start": "724460",
    "end": "731330"
  },
  {
    "text": "because the first line of code won't do things like thousands separators which in Australia would be a comma but here",
    "start": "731330",
    "end": "738290"
  },
  {
    "text": "it's not a comma right so except the allowing for culture and things in your strings that's a good thing this",
    "start": "738290",
    "end": "743330"
  },
  {
    "text": "probably should have been single format but it is slower so every time someone changed code if it had a number in it",
    "start": "743330",
    "end": "750500"
  },
  {
    "text": "great but if it didn't have a number probably should've stayed within cat nation and most kind of details you only know if you know what the",
    "start": "750500",
    "end": "756950"
  },
  {
    "text": "compiler does with your code now the funny thing with this story is that since that time C sharp 6 excuse me I",
    "start": "756950",
    "end": "766730"
  },
  {
    "text": "think it was about 6 months ago I actually went looking for this again to",
    "start": "766730",
    "end": "773380"
  },
  {
    "text": "suggest a change and it turns out that a community member",
    "start": "773380",
    "end": "778850"
  },
  {
    "text": "because Roslyn is open source actually fix this problem and now an interpolated string if it doesn't need culture it",
    "start": "778850",
    "end": "786590"
  },
  {
    "text": "will just lower to string rock and cat so there's absolutely no reason not to use them now which is great but it's",
    "start": "786590",
    "end": "792920"
  },
  {
    "text": "still good to know those yeah those ins and outs all right let's get to the meat",
    "start": "792920",
    "end": "798920"
  },
  {
    "text": "of this talk what is the for each loop do so we're gonna be looking at a lot of",
    "start": "798920",
    "end": "806240"
  },
  {
    "text": "code and it's all gonna be on screen I'm not typing any of this it's too hard to remember they'll get it wrong and then someone will criticize me so hopefully",
    "start": "806240",
    "end": "813830"
  },
  {
    "text": "we're gonna have a little bit of an easy and easy entrance into it it's a bit like a roller coaster right we're gonna",
    "start": "813830",
    "end": "818900"
  },
  {
    "text": "go start easy have a little bit of a tough time but then once all right we'll get back onto an easy path and then",
    "start": "818900",
    "end": "824630"
  },
  {
    "text": "maybe at the end it maybe goes a little bit too deep we'll deal with that there's an expression in Australia if",
    "start": "824630",
    "end": "831740"
  },
  {
    "text": "you're feeling sick from a roller coaster that you go a bit green around the gills I don't know if that's an",
    "start": "831740",
    "end": "837740"
  },
  {
    "text": "expression in Norway but just in case if you start to feel like you're maybe not following along whatever yell out feel",
    "start": "837740",
    "end": "843320"
  },
  {
    "text": "free I'll stop I'll repeat whatever if you really can't handle what's going on that's okay you can leave the roller",
    "start": "843320",
    "end": "848480"
  },
  {
    "text": "coaster any time if you put a green card in I'll know it's because you're feeling green so you know I'll improve for next",
    "start": "848480",
    "end": "854240"
  },
  {
    "text": "time all right let's talk about a free slip so I've colored in the body of our",
    "start": "854240",
    "end": "860000"
  },
  {
    "text": "loop here Green that's a coincidence I swear that's just to say like it's green",
    "start": "860000",
    "end": "866480"
  },
  {
    "text": "like a comment is right ignore this the compiler you know it does know what's in your loop but it can't really know right",
    "start": "866480",
    "end": "874340"
  },
  {
    "text": "it doesn't know what console dot write line does because it would have to go and decompile console that write line to",
    "start": "874340",
    "end": "879620"
  },
  {
    "text": "find out so the body of the loop is not important to this discussion so I've just flagged there so we can ignore it",
    "start": "879620",
    "end": "885560"
  },
  {
    "text": "and because it kind of moves around a bit so what does the freaks loop look like well you probably know that for",
    "start": "885560",
    "end": "891470"
  },
  {
    "text": "each works ienumerable so ienumerable which is up here in the top left has one method got get a numerator returns in",
    "start": "891470",
    "end": "898760"
  },
  {
    "text": "our numerator ienumerable which is in the bottom left has three two methods",
    "start": "898760",
    "end": "904310"
  },
  {
    "text": "one property it has a current property which is the current thing we're looking at in the way it has a move next method",
    "start": "904310",
    "end": "912280"
  },
  {
    "text": "which goes and gets the next value and whatever that may mean for that in your",
    "start": "912280",
    "end": "918050"
  },
  {
    "text": "manner and returns true for whether it succeeded or failed its whether it",
    "start": "918050",
    "end": "925190"
  },
  {
    "text": "succeeded in getting the next one it's not whether there's another one to get which is a muddle of work but it's worth",
    "start": "925190",
    "end": "930920"
  },
  {
    "text": "though and then there's a reset method which nobody has ever called ever",
    "start": "930920",
    "end": "936060"
  },
  {
    "text": "their lives in fact the generated enumerators that will look at any minute they just throw an exception great and",
    "start": "936060",
    "end": "943080"
  },
  {
    "text": "then we have onion rule of T which you know obviously when generics came in we had generic versions of this so they use",
    "start": "943080",
    "end": "948630"
  },
  {
    "text": "a new operator and they strongly type things probably in hindsight if the designers of c-sharp had had their way",
    "start": "948630",
    "end": "956520"
  },
  {
    "text": "again they probably would have you know generics were didn't break it bake it in at the start and this little bit of mess wouldn't exist but in order to solve",
    "start": "956520",
    "end": "963720"
  },
  {
    "text": "this weirdness where there's true eye enumerators or eye enumerables and you",
    "start": "963720",
    "end": "969600"
  },
  {
    "text": "can implement both forage doesn't actually care about any of these interfaces let me demonstrate",
    "start": "969600",
    "end": "977190"
  },
  {
    "text": "so if I type in a for each loop let's go x equals new my numerator and I go for",
    "start": "977190",
    "end": "988200"
  },
  {
    "text": "VAR y in X so let's make any numerator",
    "start": "988200",
    "end": "994610"
  },
  {
    "text": "so ienumerator that's sorry this is an ienumerable oops paint numeral onion rule has one method",
    "start": "995540",
    "end": "1004450"
  },
  {
    "text": "called getting you right up so get door",
    "start": "1004450",
    "end": "1012380"
  },
  {
    "text": "easy beautiful and I can return well actually like return null if I da",
    "start": "1012380",
    "end": "1021050"
  },
  {
    "text": "stops o like that because I don't need to turn thank you very good",
    "start": "1021050",
    "end": "1026839"
  },
  {
    "text": "so this my numerable is now valid for",
    "start": "1026840",
    "end": "1032750"
  },
  {
    "text": "for each kind of right there's still a red squiggle here because it's not really and what you'll see down the",
    "start": "1032750",
    "end": "1038060"
  },
  {
    "text": "bottom can't really see but anyway it's",
    "start": "1038060",
    "end": "1044329"
  },
  {
    "text": "complaining because we need more right we need not only do we need to get a numerator method we need that to return",
    "start": "1044330",
    "end": "1050720"
  },
  {
    "text": "a thing that has the other three things so this is my numerator and now we will",
    "start": "1050720",
    "end": "1057110"
  },
  {
    "text": "clearly right or a class and so this needs a a",
    "start": "1057110",
    "end": "1064990"
  },
  {
    "text": "current property which covered in one a",
    "start": "1064990",
    "end": "1071650"
  },
  {
    "text": "move next method which can return true",
    "start": "1071650",
    "end": "1077080"
  },
  {
    "text": "make a public yeah sure",
    "start": "1077080",
    "end": "1082419"
  },
  {
    "text": "to 200 that better cool and then we",
    "start": "1082480",
    "end": "1088670"
  },
  {
    "text": "needed a public void reset which does",
    "start": "1088670",
    "end": "1094250"
  },
  {
    "text": "nothing so this compiles right there's no errors",
    "start": "1094250",
    "end": "1101540"
  },
  {
    "text": "in Meyer list this now compiles I've not used any interfaces I don't even do any enumeration and in fact am I still",
    "start": "1101540",
    "end": "1108320"
  },
  {
    "text": "returning now yeah this is just gonna throw a null reference exception right but the compiler doesn't care all for",
    "start": "1108320",
    "end": "1113510"
  },
  {
    "text": "each actually cares about is that you follow this this pattern right you follow this pattern doesn't matter about",
    "start": "1113510",
    "end": "1119720"
  },
  {
    "text": "the name so this is sometimes called duck typing where if it looks like a duck and it sounds like a duck we assume",
    "start": "1119720",
    "end": "1125030"
  },
  {
    "text": "it's a duck I believe the more technically correct or perhaps just not",
    "start": "1125030",
    "end": "1130490"
  },
  {
    "text": "as funny term is pattern based so this is forages pattern based so that's an",
    "start": "1130490",
    "end": "1137180"
  },
  {
    "text": "interesting thing to know it means you don't need to implement ienumerable it can make things easier so knowing all of",
    "start": "1137180",
    "end": "1144470"
  },
  {
    "text": "these things how do we actually write a forage look how do we lower a future so",
    "start": "1144470",
    "end": "1150200"
  },
  {
    "text": "the first thing we do is we create a scope right so there's some braces they're very hard to see by the run and",
    "start": "1150200",
    "end": "1155270"
  },
  {
    "text": "this is just because our loop variable well in t'aime in this example we don't",
    "start": "1155270",
    "end": "1160370"
  },
  {
    "text": "want that to leak out you can't use that after the footage is finished so we have to put in the scope and then we get our",
    "start": "1160370",
    "end": "1166790"
  },
  {
    "text": "enumerator and you notice there's no cast to ienumerable right it doesn't",
    "start": "1166790",
    "end": "1172280"
  },
  {
    "text": "matter what values is as long as it satisfies this contract now there is a",
    "start": "1172280",
    "end": "1177380"
  },
  {
    "text": "asterisk there and it is the compiler doesn't allow extension methods call getting numerator but that's purely an",
    "start": "1177380",
    "end": "1184640"
  },
  {
    "text": "implementation detail that's I mean it's a decision that was made but that's kind",
    "start": "1184640",
    "end": "1190220"
  },
  {
    "text": "of  all right they could easily reverse that decision change a couple lines of code and it would be done so",
    "start": "1190220",
    "end": "1197059"
  },
  {
    "text": "the compiler kind of doesn't care what values is it just is there again a numerator and if there is greater I'm going to call it and so by the same",
    "start": "1197059",
    "end": "1203750"
  },
  {
    "text": "token the type of a doesn't matter because we don't care what type it is as long as it satisfies our contract so",
    "start": "1203750",
    "end": "1210860"
  },
  {
    "text": "I've used var that's like cheating right like the compiler doesn't really use var because that needs to be loved anyway so",
    "start": "1210860",
    "end": "1220460"
  },
  {
    "text": "then we have a try and finally you know era Hamming is good this is user code that we're surrounding so we need to be",
    "start": "1220460",
    "end": "1226610"
  },
  {
    "text": "careful and then we declare a variable which is in M and that is exactly what I",
    "start": "1226610",
    "end": "1234470"
  },
  {
    "text": "typed inside my Forex statement nothing yeah no magic happens to that and then",
    "start": "1234470",
    "end": "1242659"
  },
  {
    "text": "we have a while loop so a for each actually gets lowered to a while loop and then a while it presumably gets",
    "start": "1242659",
    "end": "1249049"
  },
  {
    "text": "lowered to go to s and so while we can move next we do inside our while loop",
    "start": "1249049",
    "end": "1255080"
  },
  {
    "text": "well we get our current value and then we call the body of our loop whatever it is and whatever it does pretty simple",
    "start": "1255080",
    "end": "1264350"
  },
  {
    "text": "and straightforward does anyone think I've made a mistake on my PowerPoint you will notice that it's casting to win",
    "start": "1264350",
    "end": "1270350"
  },
  {
    "text": "twice why is it casting to win twice good question thank you for asking",
    "start": "1270350",
    "end": "1277470"
  },
  {
    "text": "so let's pretend we have a little example off to the side here we have an object array and we're putting objects",
    "start": "1277470",
    "end": "1284159"
  },
  {
    "text": "into it these objects happen to be int and we're calling a method which takes an object array and it helps for this",
    "start": "1284159",
    "end": "1292470"
  },
  {
    "text": "example if you imagine there's two different people right one person is creating the array in calling the method and the other",
    "start": "1292470",
    "end": "1297870"
  },
  {
    "text": "person was writing the method and they don't talk to each other so we have our method which takes an object array and then it has a loop in it that says for",
    "start": "1297870",
    "end": "1304860"
  },
  {
    "text": "image for each int in my array now if you say that in English it sounds like",
    "start": "1304860",
    "end": "1311970"
  },
  {
    "text": "you're saying go through the array and find the ins but we can see from the",
    "start": "1311970",
    "end": "1317669"
  },
  {
    "text": "code on the left that's not what happens there's no checking here because the lowered code is just blindly casting so",
    "start": "1317669",
    "end": "1324659"
  },
  {
    "text": "if you were to run this with something other than it's in your object array it would just throw an invalid cast",
    "start": "1324659",
    "end": "1330539"
  },
  {
    "text": "exception it would blow up and possibly you've had this happen to you in code",
    "start": "1330539",
    "end": "1335580"
  },
  {
    "text": "it's not that uncommon that if something that's not quite of the right type gets",
    "start": "1335580",
    "end": "1341760"
  },
  {
    "text": "in there you get a cast error so that's real cool",
    "start": "1341760",
    "end": "1347340"
  },
  {
    "text": "that kind of makes sense but it kind of explains one cast right I decided that I",
    "start": "1347340",
    "end": "1353850"
  },
  {
    "text": "want hints I didn't I can't dictate what comes out of the current property in",
    "start": "1353850",
    "end": "1359250"
  },
  {
    "text": "this array so there has to be at least one cast to get from the type in my collection to what I've said I'm going",
    "start": "1359250",
    "end": "1366059"
  },
  {
    "text": "to assume is in my collection but so what's with the second cast the second cast is a little harder to explain",
    "start": "1366059",
    "end": "1372150"
  },
  {
    "text": "because it's kind of transparent but strictly speaking to put those into that",
    "start": "1372150",
    "end": "1379740"
  },
  {
    "text": "object array we had to cast them to object first so that's kind of where the second cast comes from there's one for",
    "start": "1379740",
    "end": "1386760"
  },
  {
    "text": "the type of thing in your collection and one for the type of thing you're iterating now these are probably very",
    "start": "1386760",
    "end": "1393090"
  },
  {
    "text": "often the same thing but there are reasons and examples where they're not so let's complicate this example a",
    "start": "1393090",
    "end": "1398700"
  },
  {
    "text": "little bit and this is very terse because I'm shoving it in the corner but let's pretend we have three classes we",
    "start": "1398700",
    "end": "1405390"
  },
  {
    "text": "have a person class and then we have a customer and an employee and there could be relationships here",
    "start": "1405390",
    "end": "1412680"
  },
  {
    "text": "like one could inherit from the other or they all could inherit from each other or two good in here one that's kind of",
    "start": "1412680",
    "end": "1417960"
  },
  {
    "text": "unknown right but for this example let's just pretend so if we construct an array",
    "start": "1417960",
    "end": "1424050"
  },
  {
    "text": "of people and put employees in that make sense employees are people and as long",
    "start": "1424050",
    "end": "1430560"
  },
  {
    "text": "as there's a conversion from employee to people of a person available that'll work",
    "start": "1430560",
    "end": "1435900"
  },
  {
    "text": "and then where where the person writing the method well we're getting an array of people and we want to pull out",
    "start": "1435900",
    "end": "1442050"
  },
  {
    "text": "customers and that makes sense because customers are people too good slogan so",
    "start": "1442050",
    "end": "1448470"
  },
  {
    "text": "as long as there's a conversion available from person to customer our code makes sense and in fact person a",
    "start": "1448470",
    "end": "1454590"
  },
  {
    "text": "who's writing this top three lines of code could supply a custom it was a caste to do this conversion person B",
    "start": "1454590",
    "end": "1462120"
  },
  {
    "text": "could supply their custom explicit casts a one from employee to person and one",
    "start": "1462120",
    "end": "1467640"
  },
  {
    "text": "from person to customer and all of this code will work because the two castes",
    "start": "1467640",
    "end": "1473160"
  },
  {
    "text": "would be employed a person person to customer and each of those hops works",
    "start": "1473160",
    "end": "1478380"
  },
  {
    "text": "and makes sense if we didn't have two castes though we'd be going employee to customer and nobody",
    "start": "1478380",
    "end": "1484950"
  },
  {
    "text": "has provided that relationship right these two people haven't talked so the two castes are four obscure situations",
    "start": "1484950",
    "end": "1491490"
  },
  {
    "text": "like this but that's the type of stuff you're going to do when you're on the language committee which is why I'm not",
    "start": "1491490",
    "end": "1496920"
  },
  {
    "text": "I just read their code and try to explain it afterwards and then he now finally we have disposed we call this",
    "start": "1496920",
    "end": "1503280"
  },
  {
    "text": "Bo's that's fairly easy now this code is not exactly what the compiler does",
    "start": "1503280",
    "end": "1509280"
  },
  {
    "text": "there's some liberties here in order to represent it and the disposed one is a good example we don't know the type of e",
    "start": "1509280",
    "end": "1517800"
  },
  {
    "text": "in this slide because I have only you know certain keywords available to me",
    "start": "1517800",
    "end": "1524130"
  },
  {
    "text": "the compiler does know the type of e so when it compiles this code and it does the lowering it knows if e is disposable",
    "start": "1524130",
    "end": "1531060"
  },
  {
    "text": "and if it's not it just doesn't output this line of code easier for me to representing with your step",
    "start": "1531060",
    "end": "1538289"
  },
  {
    "text": "so that's a forage and if you go and write a Forex loop right now and you look in your dll's and you decompile",
    "start": "1538289",
    "end": "1545770"
  },
  {
    "text": "your il you will see not this because",
    "start": "1545770",
    "end": "1550990"
  },
  {
    "text": "this is a c-sharp for 4h a c-sharp 5 and Beyond for each looks a bit different",
    "start": "1550990",
    "end": "1558210"
  },
  {
    "text": "watch the while so in c-sharp 5 they",
    "start": "1558210",
    "end": "1564370"
  },
  {
    "text": "made a breaking change to how for each loops are compiled and this is like it's pretty rare that they make a breaking",
    "start": "1564370",
    "end": "1570970"
  },
  {
    "text": "change like that and the reason is that in c-sharp for we got link and we got",
    "start": "1570970",
    "end": "1577600"
  },
  {
    "text": "lambdas and everyone started using them a lot it was at 3.5 anyway when link",
    "start": "1577600",
    "end": "1585039"
  },
  {
    "text": "came along everyone started using lambdas a lot and there was a common problem that lots of people kept running",
    "start": "1585039",
    "end": "1590140"
  },
  {
    "text": "into where the loops stopped doing what they thought they should do and to fix",
    "start": "1590140",
    "end": "1596980"
  },
  {
    "text": "this problem this was the fix so to understand why we",
    "start": "1596980",
    "end": "1602679"
  },
  {
    "text": "need to talk about what lambdas do so lambis this is a very simple definition",
    "start": "1602679",
    "end": "1611710"
  },
  {
    "text": "of a lambda we're defining an action takes a string parameter it has a consult the right line as its body and",
    "start": "1611710",
    "end": "1616870"
  },
  {
    "text": "then we call our lambda so this gets lowered of course and like I said",
    "start": "1616870",
    "end": "1622240"
  },
  {
    "text": "earlier you kind of conceptually think it gets lowered like this we write out a method we call that method but this is",
    "start": "1622240",
    "end": "1629169"
  },
  {
    "text": "actually a problem and this is a problem or a potential problem for memory usage",
    "start": "1629169",
    "end": "1635190"
  },
  {
    "text": "because the compiler doesn't know what the body of the lambda does like it didn't know what the body of the loop",
    "start": "1635190",
    "end": "1640570"
  },
  {
    "text": "does this could cause the whole Class C to have to live on in memory forever and",
    "start": "1640570",
    "end": "1647700"
  },
  {
    "text": "this can be a big problem if you're you know if your class in this case is a Windows forms form then it could have a",
    "start": "1647700",
    "end": "1655450"
  },
  {
    "text": "lot of resources that it's holding lovely sound so in order to avoid this",
    "start": "1655450",
    "end": "1662909"
  },
  {
    "text": "the compiler creates a class creates a helper class the helper class gets our",
    "start": "1662909",
    "end": "1669059"
  },
  {
    "text": "method we assign our action to point to that method and then we call it cool",
    "start": "1669059",
    "end": "1675409"
  },
  {
    "text": "except this is a problem every time we crawl our lambda we're now creating a new instance of a class so in order to",
    "start": "1675409",
    "end": "1682200"
  },
  {
    "text": "prevent memory issues we're now creating more stuff in RAM it's kind of silly so what the compiler actually does is this",
    "start": "1682200",
    "end": "1688669"
  },
  {
    "text": "this is where we have our first little dip because this starts to look confusing right bear with me so a helper class gets a static",
    "start": "1688669",
    "end": "1696029"
  },
  {
    "text": "read-only instance so it's a singleton right there's only one of them around",
    "start": "1696029",
    "end": "1701369"
  },
  {
    "text": "all the time and the helper class gets our pointer to our action so again",
    "start": "1701369",
    "end": "1707399"
  },
  {
    "text": "static there's only one of them when we call our lambda or when we define our limiter we check if we've initialized",
    "start": "1707399",
    "end": "1716249"
  },
  {
    "text": "this method of ours and if we haven't we point it to the method and then we call",
    "start": "1716249",
    "end": "1721619"
  },
  {
    "text": "it so this means will now get one helper class and it doesn't matter how much we call this lambda there's no more memory",
    "start": "1721619",
    "end": "1729149"
  },
  {
    "text": "hit right there's an initial overhead but there's no more so whenever people say be careful of lambdas they allocate",
    "start": "1729149",
    "end": "1734909"
  },
  {
    "text": "this is what they mean they create instances of these helper classes and the helper classes you know they can be",
    "start": "1734909",
    "end": "1743279"
  },
  {
    "text": "one per lambda they can be based on the",
    "start": "1743279",
    "end": "1748460"
  },
  {
    "text": "the compiler has some smarts to you know sometimes combine things together but there's a lot of little quirks to this",
    "start": "1748519",
    "end": "1755580"
  },
  {
    "text": "so this is sort of something to watch out for and the problem with foreach loops only occurs when you capture",
    "start": "1755580",
    "end": "1762629"
  },
  {
    "text": "something in a lambda and when you capture something in a lambda it goes back to the previous way of doing it",
    "start": "1762629",
    "end": "1768089"
  },
  {
    "text": "anyway for reasons that hopefully will become clear so we're gonna ignore this for now",
    "start": "1768089",
    "end": "1773759"
  },
  {
    "text": "just to make life simpler we're gonna ignore this singleton pattern and we're",
    "start": "1773759",
    "end": "1779369"
  },
  {
    "text": "going to assume that our lambda defined like this gets lowered to this so we",
    "start": "1779369",
    "end": "1785339"
  },
  {
    "text": "have a helper class a pointer to a method and we call a method cool so the problem comes when we",
    "start": "1785339",
    "end": "1792350"
  },
  {
    "text": "capture variables so if we define a string y equals world and we we use it",
    "start": "1792350",
    "end": "1800090"
  },
  {
    "text": "in our lambda but we're not passing it into our lambda right this is it what we're capturing Y this is where our",
    "start": "1800090",
    "end": "1806120"
  },
  {
    "text": "problem start to manifest that caused them to change from C sharp four to five so what this looks like on the right",
    "start": "1806120",
    "end": "1811669"
  },
  {
    "text": "hand side sorry for my body changing is we get a public property field you know",
    "start": "1811669",
    "end": "1817610"
  },
  {
    "text": "helper class and instead of the local the Y being a local variable we're now",
    "start": "1817610",
    "end": "1824179"
  },
  {
    "text": "modifying that field every reference to Y that would be on this left hand side actually get changed gets changed to be",
    "start": "1824179",
    "end": "1830960"
  },
  {
    "text": "a reference to Y or no helper so that's not a big deal right one you field on a",
    "start": "1830960",
    "end": "1837110"
  },
  {
    "text": "class but what happens when we change Y after we define our lambda does this",
    "start": "1837110",
    "end": "1845510"
  },
  {
    "text": "output hello world a hello fish anyone no one's brave enough hello fish and the",
    "start": "1845510",
    "end": "1853520"
  },
  {
    "text": "reason is that every reference to Y I guess change to a point where field so we're setting our field Y to fish and",
    "start": "1853520",
    "end": "1860659"
  },
  {
    "text": "then when we call this method well it's just using whatever the current value the field is so this is a little you",
    "start": "1860659",
    "end": "1869960"
  },
  {
    "text": "know quirk of lambdas that people sort of get used to very quickly when they start to use them when you capture",
    "start": "1869960",
    "end": "1875059"
  },
  {
    "text": "fields and it's a positive thing right it's what you want to happen you want to capture the parameter of the variable Y",
    "start": "1875059",
    "end": "1882320"
  },
  {
    "text": "not the value of the variable if you want to be value you pass it in but so",
    "start": "1882320",
    "end": "1887419"
  },
  {
    "text": "when you introduce this into loops things get a little bit unexpected so if",
    "start": "1887419",
    "end": "1892850"
  },
  {
    "text": "we change our loop a little bit to get a lambda in there we now have a loop",
    "start": "1892850",
    "end": "1898070"
  },
  {
    "text": "through our values like we did before but instead of just writing out the value we're going to add a lambda to a",
    "start": "1898070",
    "end": "1905720"
  },
  {
    "text": "collection that will write out the value when it's called so this is kind of like poor-man's tasks",
    "start": "1905720",
    "end": "1913870"
  },
  {
    "text": "so M is not passed into a lambda it's captured so what happens when we lower",
    "start": "1914059",
    "end": "1919129"
  },
  {
    "text": "this we create our helper we assign our",
    "start": "1919129",
    "end": "1924799"
  },
  {
    "text": "loop variable and then we add our action so what's going to happen when we run this we're constantly reassigning the",
    "start": "1924799",
    "end": "1932389"
  },
  {
    "text": "same field so if this loop went from 1 through 5 instead of outputting 1 2 3 4",
    "start": "1932389",
    "end": "1938210"
  },
  {
    "text": "5 when we execute these tasks it's gonna wax the output 5 5 5 5 5 and this was",
    "start": "1938210",
    "end": "1943580"
  },
  {
    "text": "what people were seeing they would write lint queries against a database and",
    "start": "1943580",
    "end": "1949479"
  },
  {
    "text": "often what they would do is things like get a list of customers looped through",
    "start": "1949479",
    "end": "1954499"
  },
  {
    "text": "the list of customers and then get a list of products and they would get the",
    "start": "1954499",
    "end": "1959779"
  },
  {
    "text": "products for the last customer associated to every customer and it was really common and you could start to see",
    "start": "1959779",
    "end": "1965779"
  },
  {
    "text": "it like you could start to see from the title of the question on Stack Overflow be like oh I know what this is and fortunately the workaround was pretty",
    "start": "1965779",
    "end": "1971929"
  },
  {
    "text": "simple but it affected enough people that such changes so the c-sharp 5 change simply move that inside so now we",
    "start": "1971929",
    "end": "1978469"
  },
  {
    "text": "get a new helper every time we're setting a different field easy but you",
    "start": "1978469",
    "end": "1984379"
  },
  {
    "text": "can also see now where that link oh the lambda methods and allocations can start",
    "start": "1984379",
    "end": "1990589"
  },
  {
    "text": "to add up too because we're getting a new instance created every time we loop through this collection any questions on",
    "start": "1990589",
    "end": "1999799"
  },
  {
    "text": "any of that before I continue did everyone following if you're falling",
    "start": "1999799",
    "end": "2005049"
  },
  {
    "text": "asleep it's fine I don't want just put a green anymore call it even",
    "start": "2005049",
    "end": "2010269"
  },
  {
    "text": "well before we leave captures is one more quirk to be aware of as a perf trap",
    "start": "2010269",
    "end": "2016919"
  },
  {
    "text": "so I've added to the lambda here is Ed because I'm really inventive with my variable names but this is a field so",
    "start": "2016919",
    "end": "2025570"
  },
  {
    "text": "what happens when we capture a field well we can't just add a new field",
    "start": "2025570",
    "end": "2031419"
  },
  {
    "text": "called Zed onto our helper class because it's not local anymore so what happens",
    "start": "2031419",
    "end": "2039440"
  },
  {
    "text": "is that we actually had a field to store the the reference to the class said",
    "start": "2039440",
    "end": "2045150"
  },
  {
    "text": "comes from this kind of makes sense if you think about this said here if you imagine that as this dot said we're",
    "start": "2045150",
    "end": "2051360"
  },
  {
    "text": "really capturing this that is you know an implementation detail so as far as",
    "start": "2051360",
    "end": "2056879"
  },
  {
    "text": "memory traps go we're now back to the situation where if you have a lambda it",
    "start": "2056880",
    "end": "2062610"
  },
  {
    "text": "can keep the whole class that's coming from in memory forever so again this is",
    "start": "2062610",
    "end": "2069179"
  },
  {
    "text": "easy to work around so for this problem and for the loop problem if anyone's still using the C sharp for compiler the",
    "start": "2069180",
    "end": "2074250"
  },
  {
    "text": "the solution is you just capture the value yourself in a local and then you",
    "start": "2074250",
    "end": "2079290"
  },
  {
    "text": "won't have this problem but this this trap still exists and it actually has to exist because again if you think about",
    "start": "2079290",
    "end": "2085770"
  },
  {
    "text": "it you want your lambda to reference the current value of Zed whenever it's called now being a class level field",
    "start": "2085770",
    "end": "2092490"
  },
  {
    "text": "right this could be changed in another method it could be changed from background thread could be changed by three threads at once you know the",
    "start": "2092490",
    "end": "2098910"
  },
  {
    "text": "compiler can't rewrite all of your code so this is the only way for it to work it's just a potential trap so that's the",
    "start": "2098910",
    "end": "2108420"
  },
  {
    "text": "simple case for four inches I'm glad that you're all come along with me",
    "start": "2108420",
    "end": "2113430"
  },
  {
    "text": "that's good gets a little bit more interesting now because there's also",
    "start": "2113430",
    "end": "2119640"
  },
  {
    "text": "something called iterative methods and so this is the yield return statement",
    "start": "2119640",
    "end": "2125240"
  },
  {
    "text": "hopefully you're familiar with it this is a very simple use case we simply do yield return one two three four five and",
    "start": "2125240",
    "end": "2131850"
  },
  {
    "text": "what happens is when we run this loop",
    "start": "2131850",
    "end": "2137150"
  },
  {
    "text": "the first time through this loop it's gonna return a 1 output a 1 the second",
    "start": "2137150",
    "end": "2143550"
  },
  {
    "text": "time through this loop it skips the first line of code and it comes down to",
    "start": "2143550",
    "end": "2148590"
  },
  {
    "text": "the second line of code conceptually obviously it doesn't actually skip code",
    "start": "2148590",
    "end": "2154020"
  },
  {
    "text": "right because you can't do that can you well let's work out how it does it so",
    "start": "2154020",
    "end": "2160620"
  },
  {
    "text": "our for each loop is unchanged largely I've written it more simply with the using statement but it's the same thing",
    "start": "2160620",
    "end": "2166320"
  },
  {
    "text": "we call get a numerator we have next so already we can see one",
    "start": "2166320",
    "end": "2173660"
  },
  {
    "text": "interesting thing or one positive thing I'll get in Smith is called once that's",
    "start": "2173660",
    "end": "2180060"
  },
  {
    "text": "good to know when we think about performance so we can we call that get a numerator method",
    "start": "2180060",
    "end": "2185340"
  },
  {
    "text": "on on the thing it returns immediately again its method has been rewritten and of course we have another helper class",
    "start": "2185340",
    "end": "2191790"
  },
  {
    "text": "this one's a bit more complicated those us on the next slide and we're passing",
    "start": "2191790",
    "end": "2196920"
  },
  {
    "text": "minus 2 in to the constructor this is kind of important remember it for later",
    "start": "2196920",
    "end": "2203750"
  },
  {
    "text": "so what does our class look like well it implements all of the interfaces just in",
    "start": "2203750",
    "end": "2210570"
  },
  {
    "text": "case I guess I numerator of everything but it does double duty as an I",
    "start": "2210570",
    "end": "2217740"
  },
  {
    "text": "enumerate tour and an ienumerable ok that's interesting we have three fields",
    "start": "2217740",
    "end": "2224640"
  },
  {
    "text": "a state a current and a thread ID now state kind of gives the game away here",
    "start": "2224640",
    "end": "2230070"
  },
  {
    "text": "it's going to be a state machine ok hopefully we know what state machines are it's pretty simple one so we'll be",
    "start": "2230070",
    "end": "2236790"
  },
  {
    "text": "right we have to implement our interfaces so we have current properties that return the current field and we",
    "start": "2236790",
    "end": "2245250"
  },
  {
    "text": "have a constructor and the constructor takes in initial State remember it was minus 2 it stores the initial state it",
    "start": "2245250",
    "end": "2253619"
  },
  {
    "text": "stores the thread that is currently running so it stores the thread ID for",
    "start": "2253619",
    "end": "2260070"
  },
  {
    "text": "the thread that constructed this right the thing that called get it's ok not",
    "start": "2260070",
    "end": "2268800"
  },
  {
    "text": "get a numerator but get ins and we have a disposed method that doesn't do any and I guess there's a reset method that",
    "start": "2268800",
    "end": "2275310"
  },
  {
    "text": "doesn't do anything either because it's by the interface so I get a numerator call looks like this starting to get a",
    "start": "2275310",
    "end": "2282720"
  },
  {
    "text": "bit more complicated I know it's alright we'll go through it line by line so if state is -2 that's our initial",
    "start": "2282720",
    "end": "2289680"
  },
  {
    "text": "state so it is you know a little run through here and we're still on the same thread then we set state to 0",
    "start": "2289680",
    "end": "2297750"
  },
  {
    "text": "everything's fine and our result is this we are our own end Reiter okay if that's not true we",
    "start": "2297750",
    "end": "2306220"
  },
  {
    "text": "construct a new helper but with the initial state of zero so at the end of",
    "start": "2306220",
    "end": "2311290"
  },
  {
    "text": "this method we're going to have an enumerator whose state is zero the thread stuff is because this get int",
    "start": "2311290",
    "end": "2317380"
  },
  {
    "text": "method again it's just sitting there on a class anything could be calling it from any thread you could call it six",
    "start": "2317380",
    "end": "2323290"
  },
  {
    "text": "times in a row before you actually iterate over the results so this enumerator is smart and it will reuse",
    "start": "2323290",
    "end": "2330580"
  },
  {
    "text": "itself when it can but if it can't you get a new one again for performance",
    "start": "2330580",
    "end": "2336340"
  },
  {
    "text": "reasons these are all interesting things yes good question what happens if the",
    "start": "2336340",
    "end": "2351520"
  },
  {
    "text": "current thread changes before the assignment happens that's a very good question",
    "start": "2351520",
    "end": "2357160"
  },
  {
    "text": "I suspect that so this is a",
    "start": "2357160",
    "end": "2363300"
  },
  {
    "text": "representation of the code that is written this is not really the code right so I probably should explain this",
    "start": "2363300",
    "end": "2369220"
  },
  {
    "text": "what I mean this in more detail the c-sharp compiler when it lowers code it",
    "start": "2369220",
    "end": "2374800"
  },
  {
    "text": "doesn't literally output c-sharp back to itself okay the c-sharp compiler goes",
    "start": "2374800",
    "end": "2381010"
  },
  {
    "text": "through various stages and most compilers they parse your code and they posit into something called a tree a",
    "start": "2381010",
    "end": "2387490"
  },
  {
    "text": "syntax tree and when the lowering happens it's actually at the tree level",
    "start": "2387490",
    "end": "2393700"
  },
  {
    "text": "so we've worked out what the code means syntactically and when we output the",
    "start": "2393700",
    "end": "2400900"
  },
  {
    "text": "lowered version it's actually by just modifying the tree so it can do some tricky things like have this comparison",
    "start": "2400900",
    "end": "2407800"
  },
  {
    "text": "be the very first thing that happens or something like that but in this case if",
    "start": "2407800",
    "end": "2414660"
  },
  {
    "text": "state was -2 and thread ID changed in",
    "start": "2414660",
    "end": "2419740"
  },
  {
    "text": "here then potentially this could be a problem but since it's set state to 0",
    "start": "2419740",
    "end": "2429450"
  },
  {
    "text": "the next call through to this would fail this check and you get in you a numerator anyway so I think in practice",
    "start": "2429450",
    "end": "2435640"
  },
  {
    "text": "it okay possibly two at exactly the same time mark was a problem that's something",
    "start": "2435640",
    "end": "2441460"
  },
  {
    "text": "interesting maybe look into that later anyway so at the end of the end result of this method sorry did I see a hand go",
    "start": "2441460",
    "end": "2447900"
  },
  {
    "text": "look at the end result of this method we have an enumerator state is zero we're",
    "start": "2447900",
    "end": "2453730"
  },
  {
    "text": "all happy we're ready to go and so this is what our move next method looks like I mean obviously this would be under",
    "start": "2453730",
    "end": "2460990"
  },
  {
    "text": "there right and so this is our state machine and other than the fact that it",
    "start": "2460990",
    "end": "2468310"
  },
  {
    "text": "uses funny numbers that negative numbers for some reason it's reasonably simple to understand when our state is zero how",
    "start": "2468310",
    "end": "2475750"
  },
  {
    "text": "current is one we said our state to 1 when our case is 1 our courage to reach our state to do so this is a state",
    "start": "2475750",
    "end": "2481750"
  },
  {
    "text": "machine that just jumps through our different yield return statements now it also sets state to minus 1 and what that",
    "start": "2481750",
    "end": "2489100"
  },
  {
    "text": "means is I'm busy getting the next value ok because again the green is user code",
    "start": "2489100",
    "end": "2494770"
  },
  {
    "text": "the fact that I said yield return 1 it doesn't know that I could have said you'll return going call a really slow",
    "start": "2494770",
    "end": "2501280"
  },
  {
    "text": "web service so that this line of code could take ages to run so the state machine just controls that and then we",
    "start": "2501280",
    "end": "2509050"
  },
  {
    "text": "get to the end at Carney's five sets eight to five when state is five we set",
    "start": "2509050",
    "end": "2514750"
  },
  {
    "text": "our set to minus one and we just return false but there's no more values so all this is doing is it's kind of like",
    "start": "2514750",
    "end": "2521980"
  },
  {
    "text": "unrolling the loop and that makes sense because if you look at our original yield return it's an unrolled loop right",
    "start": "2521980",
    "end": "2528040"
  },
  {
    "text": "if you want to return six things in order you can just return six things in order and five minutes per and so we",
    "start": "2528040",
    "end": "2535720"
  },
  {
    "text": "have these states for our state machine and we have - to get enumerate hasn't",
    "start": "2535720",
    "end": "2541630"
  },
  {
    "text": "been called so we haven't started yet - one we're getting the next value 0 were",
    "start": "2541630",
    "end": "2547000"
  },
  {
    "text": "ready to go but no one started and iam writing yet and then 1 / 4 which is really 1 to n because it could be any",
    "start": "2547000",
    "end": "2554140"
  },
  {
    "text": "number where we're just doing nothing current is set we have a value we're",
    "start": "2554140",
    "end": "2561340"
  },
  {
    "text": "waiting for the next move next call it may or may not happen and then 5 or in",
    "start": "2561340",
    "end": "2567390"
  },
  {
    "text": "plus one we're finished there's no more data to get so that's relatively simple",
    "start": "2567390",
    "end": "2573480"
  },
  {
    "text": "but that's for a simple series of your returns you can of course get more complicated so what happens how do you",
    "start": "2573480",
    "end": "2580619"
  },
  {
    "text": "unroll a loop if your loop contains a loop how do you are right and and",
    "start": "2580619",
    "end": "2586260"
  },
  {
    "text": "obviously again I've put in 1 and 10 those could be any numbers how do you unroll a loop if you don't know how big",
    "start": "2586260",
    "end": "2591839"
  },
  {
    "text": "it is so there's some changes to our helper when we do this so the first",
    "start": "2591839",
    "end": "2599130"
  },
  {
    "text": "thing is we get a new field we're now wrapping someone else's enumerator we",
    "start": "2599130",
    "end": "2607559"
  },
  {
    "text": "get a dispose method that actually does something it's got some states again and we now have a minus 3 that's new welcome",
    "start": "2607559",
    "end": "2613410"
  },
  {
    "text": "to the party and it calls finally and finally calls the wrappers dispose I",
    "start": "2613410",
    "end": "2619670"
  },
  {
    "text": "don't know why dispose doesn't call dispose and then finally could call dispose that feels like more saying to",
    "start": "2619670",
    "end": "2625799"
  },
  {
    "text": "me but anyway this is how they do so we're wrapping in a numerator okay I",
    "start": "2625799",
    "end": "2632269"
  },
  {
    "text": "move next method gets a bit more complicated but that's for the next",
    "start": "2632269",
    "end": "2637440"
  },
  {
    "text": "slide oh we're doing that we can see is we're catching errors and just making",
    "start": "2637440",
    "end": "2642690"
  },
  {
    "text": "sure we clean up and then pass the Arizona now this is where our rollercoasters going off a cliff you",
    "start": "2642690",
    "end": "2648509"
  },
  {
    "text": "ready things get kind of there's lots of",
    "start": "2648509",
    "end": "2653940"
  },
  {
    "text": "states here so let's talk to it from the top initially our state is 0 right all of",
    "start": "2653940",
    "end": "2661950"
  },
  {
    "text": "the -2 threading stuff is all the same when we are ready to run state is 0 so",
    "start": "2661950",
    "end": "2668250"
  },
  {
    "text": "we're going to set our state to minus 1 now that minus 1 used to be we're getting the next value that's not what",
    "start": "2668250",
    "end": "2674279"
  },
  {
    "text": "it means anymore now it means we're getting the enumerator that's going to give us an x value because remember we",
    "start": "2674279",
    "end": "2680609"
  },
  {
    "text": "don't know what our value is we get our enumerator which again this is just whatever was typed in compiler does",
    "start": "2680609",
    "end": "2687509"
  },
  {
    "text": "nothing to it doesn't know what it does I thought that has to be an iron your own ienumerable then we set our site to",
    "start": "2687509",
    "end": "2694140"
  },
  {
    "text": "minus 3 okay so minus 3 is now a new",
    "start": "2694140",
    "end": "2699150"
  },
  {
    "text": "intermediate state where we've got something to give us a value we haven't got the value yet and don't forget this is in",
    "start": "2699150",
    "end": "2705930"
  },
  {
    "text": "our move next method so our job is to get the next value so we come down to here and while we're in move next we",
    "start": "2705930",
    "end": "2713580"
  },
  {
    "text": "have we wrapped something so we just passed that move nets go on if we if it can move next we can move next we get",
    "start": "2713580",
    "end": "2720930"
  },
  {
    "text": "the current value a state is one we're all good if he can't move next we're",
    "start": "2720930",
    "end": "2726480"
  },
  {
    "text": "finished so call our finally and a dispose clear the wrapped a numeral and",
    "start": "2726480",
    "end": "2731490"
  },
  {
    "text": "return false there's no more values if anything comes in here so not the",
    "start": "2731490",
    "end": "2737160"
  },
  {
    "text": "initial state well if the state isn't one then something's gone wrong",
    "start": "2737160",
    "end": "2744450"
  },
  {
    "text": "right c11 is set here means we had a value we never know whether there's another value right move next gets the",
    "start": "2744450",
    "end": "2753330"
  },
  {
    "text": "next value it doesn't tell you whether there's anything left to get so we never know that but if we see if we were",
    "start": "2753330",
    "end": "2758490"
  },
  {
    "text": "successful last time then we still remain successful and we try again so we said say 2 minus 3 if we've run out of",
    "start": "2758490",
    "end": "2766200"
  },
  {
    "text": "values yet return false does this make sense does anyone have any questions",
    "start": "2766200",
    "end": "2771590"
  },
  {
    "text": "this kind of gets a bit hairy so we've got a new state now right minus three is",
    "start": "2771590",
    "end": "2778140"
  },
  {
    "text": "running but getting the next value minus one is also running but it's getting the other a numerator minus two is the same",
    "start": "2778140",
    "end": "2784110"
  },
  {
    "text": "we're doing our thread stuff zero is the same we're waiting but now we've only got one state we are suspended current",
    "start": "2784110",
    "end": "2793320"
  },
  {
    "text": "is ready for you to use and we're waiting for a move next call but it's also finished because we don't know when",
    "start": "2793320",
    "end": "2800070"
  },
  {
    "text": "it's finished so that's going we're so",
    "start": "2800070",
    "end": "2806640"
  },
  {
    "text": "let's bring it all together and let's talk about why it's worth maybe in my",
    "start": "2806640",
    "end": "2813030"
  },
  {
    "text": "opinion knowing about this stuff this code snippet is completely arbitrary",
    "start": "2813030",
    "end": "2818910"
  },
  {
    "text": "obviously and quite convoluted but it's also relatively short there's two",
    "start": "2818910",
    "end": "2824970"
  },
  {
    "text": "methods there's you know eight sort of real lines of code and",
    "start": "2824970",
    "end": "2831460"
  },
  {
    "text": "if you were asked about the performance of this method well there's nothing",
    "start": "2831460",
    "end": "2838950"
  },
  {
    "text": "that's obviously happening that's very bad right we're looping over some stuff",
    "start": "2838950",
    "end": "2846160"
  },
  {
    "text": "there's an ordering okay so swatting can take time fine but everything else we're just riding for the console but if you",
    "start": "2846160",
    "end": "2852010"
  },
  {
    "text": "had to think about the performance of this method knowing what the compiler does to it it should have showed you a",
    "start": "2852010",
    "end": "2858309"
  },
  {
    "text": "different picture right you can kind of see behind the curtains so we can see we have a loop okay we know that our loop",
    "start": "2858309",
    "end": "2867250"
  },
  {
    "text": "is going to get rewritten to a while that's not a big deal we've got a",
    "start": "2867250",
    "end": "2872260"
  },
  {
    "text": "parameter being passed in to get int that's okay we're not closing over everything fine against well that's an",
    "start": "2872260",
    "end": "2879490"
  },
  {
    "text": "iterator method so we know we're going to get a helper class and we know that if threading is an issue or if this",
    "start": "2879490",
    "end": "2886000"
  },
  {
    "text": "method is called by lots of things we could end up with lots of instances of this helper class so that's interesting",
    "start": "2886000",
    "end": "2891760"
  },
  {
    "text": "that could be a potential problem we have a simple yield return so we're",
    "start": "2891760",
    "end": "2898750"
  },
  {
    "text": "going to have a at least one case of our state machine is going to be a simple setting current cool that's fine but",
    "start": "2898750",
    "end": "2907240"
  },
  {
    "text": "then we have another yield return which is inside a loop so we're going to wrap an enumerator here so that's interesting",
    "start": "2907240",
    "end": "2913960"
  },
  {
    "text": "because our enumerator uses min which is a field and it uses max which is a",
    "start": "2913960",
    "end": "2921339"
  },
  {
    "text": "parameter so our class that we've created to help this now needs a reference to the class that this whole",
    "start": "2921339",
    "end": "2927819"
  },
  {
    "text": "bunch of code is in so it could hold that reference for a while and again there could be hundreds of instances of",
    "start": "2927819",
    "end": "2932829"
  },
  {
    "text": "this class and we've also going to lambda method in there so that's going to be another helper class that lambda",
    "start": "2932829",
    "end": "2938859"
  },
  {
    "text": "method also uses the field so that's going to have another reference to the same class and the parameter and so this",
    "start": "2938859",
    "end": "2945520"
  },
  {
    "text": "simple bit of code you can kind of sort of see it expand in your mind is actually quite complicated and if the",
    "start": "2945520",
    "end": "2952930"
  },
  {
    "text": "Wi-Fi is behaving I can show you exactly how complicated by clicking this link",
    "start": "2952930",
    "end": "2959338"
  },
  {
    "text": "sure go Chrome so this website that is",
    "start": "2959719",
    "end": "2976499"
  },
  {
    "text": "currently loading is called sharp lab and sharp lab is an awesome website it",
    "start": "2976499",
    "end": "2982199"
  },
  {
    "text": "worked it's used very frequently by the compiler team it's not official",
    "start": "2982199",
    "end": "2988679"
  },
  {
    "text": "Microsoft it's just written by a guy from New Zealand who's a really nice guy any one of the things that can do is",
    "start": "2988679",
    "end": "2995039"
  },
  {
    "text": "show you what your code looks like so here on the left is the code from the sample I had and here on the right is",
    "start": "2995039",
    "end": "3002799"
  },
  {
    "text": "what it looks like when it's decompiled now I've been talking about lowering and",
    "start": "3002799",
    "end": "3008289"
  },
  {
    "text": "what the compiler does before it outputs the c-sharp this is D compilation which",
    "start": "3008289",
    "end": "3013640"
  },
  {
    "text": "is slightly different this is code that has been compiled all the way to Al and",
    "start": "3013640",
    "end": "3019789"
  },
  {
    "text": "then decompile back again to C sharp so there's some minor differences but not",
    "start": "3019789",
    "end": "3025759"
  },
  {
    "text": "many and if we scroll down I mean the first thing you can sort of see is just how much code there is here right",
    "start": "3025759",
    "end": "3032630"
  },
  {
    "text": "there's a lot of stuff going on for a relatively simple example here's our",
    "start": "3032630",
    "end": "3037670"
  },
  {
    "text": "case state machine here with constructing new instances of classes and things he's our actual don't know",
    "start": "3037670",
    "end": "3045229"
  },
  {
    "text": "feeling like helper class hope there's our reset method yes not even Plattsburgh",
    "start": "3045229",
    "end": "3051859"
  },
  {
    "text": "he's our actual code that does the enumeration so here's our while loop and",
    "start": "3051859",
    "end": "3056869"
  },
  {
    "text": "he's out getting its method so all of this code is running for everything",
    "start": "3056869",
    "end": "3063559"
  },
  {
    "text": "every time you run the code of the lift so when you kind of think about performance you think about complexity you can start to see where if you know",
    "start": "3063559",
    "end": "3069650"
  },
  {
    "text": "what the compiler is doing you have a new perspective on the complexity of some bits of your code",
    "start": "3069650",
    "end": "3076630"
  },
  {
    "text": "so if you have enjoyed this stripped down into the depths there's a couple of",
    "start": "3078500",
    "end": "3085160"
  },
  {
    "text": "places you can go to get more things get more info so the Roslyn source code is awesome",
    "start": "3085160",
    "end": "3090970"
  },
  {
    "text": "I'll actually show it in a second give some more examples your favorite",
    "start": "3090970",
    "end": "3096410"
  },
  {
    "text": "decompiler is a really good way to do this again not quite exactly the same but most of them have options to turn",
    "start": "3096410",
    "end": "3104960"
  },
  {
    "text": "off you have to turn off optimization in the D compiler because it will try to so",
    "start": "3104960",
    "end": "3112310"
  },
  {
    "text": "if you open up il spy which is watch up lab users in generally and UD compiled that code it actually would come out",
    "start": "3112310",
    "end": "3118250"
  },
  {
    "text": "looking pretty much the same as what you wrote because it detects all of these patterns that compiler outputs and it",
    "start": "3118250",
    "end": "3124700"
  },
  {
    "text": "reverses them assuming that's what you want to see but you can turn them off and if you turn off all of the",
    "start": "3124700",
    "end": "3129770"
  },
  {
    "text": "optimizations that's what sharp love is doing then you get to see the real code or at least the",
    "start": "3129770",
    "end": "3136760"
  },
  {
    "text": "equivalent of the aisle and then sharp lab I really like sharp lab I've made a",
    "start": "3136760",
    "end": "3142099"
  },
  {
    "text": "couple of contributions to it just to make it a bit nicer to using things like that make it well not nice to use to",
    "start": "3142099",
    "end": "3149060"
  },
  {
    "text": "make it decompile even more because I want to see the guts it's really cool it",
    "start": "3149060",
    "end": "3154339"
  },
  {
    "text": "can also run code there's a mouse cursor somewhere there is so you can also run",
    "start": "3154339",
    "end": "3159500"
  },
  {
    "text": "code you can see the assembler that's outputted you can see the il it's got it's it's fantastic and if you click",
    "start": "3159500",
    "end": "3165560"
  },
  {
    "text": "this drop-down you can pick any of the feature branches of rosin so if you want to see what some of the compiler work",
    "start": "3165560",
    "end": "3172190"
  },
  {
    "text": "that's still going on will do you can switch to a branch so records write",
    "start": "3172190",
    "end": "3178310"
  },
  {
    "text": "records is something they're thinking about for C sharp 9 it's not in the compiler yet but if you switch sharp lab to that branch it will compile your code",
    "start": "3178310",
    "end": "3184760"
  },
  {
    "text": "with that so you could run code using you know a preview essentially we don't",
    "start": "3184760",
    "end": "3190970"
  },
  {
    "text": "even preview just a branch build of awesome you can run code and see what it does the Rozlyn source code though I was",
    "start": "3190970",
    "end": "3197060"
  },
  {
    "text": "going to show off a couple of things the cool thing about the rawson source code is the comments let me find the for each",
    "start": "3197060",
    "end": "3203119"
  },
  {
    "text": "statement so this is for each this is the method that rewrites four inches this is what we've been talking about and there's a",
    "start": "3203119",
    "end": "3211439"
  },
  {
    "text": "couple of couple of things so firstly there's four different rewriters four",
    "start": "3211439",
    "end": "3218279"
  },
  {
    "text": "for each yes oh this one thank you I",
    "start": "3218279",
    "end": "3224489"
  },
  {
    "text": "must have done that on the other instance of vicious tree here so there's four different ways that it will compile a for each so a single",
    "start": "3224489",
    "end": "3231359"
  },
  {
    "text": "dimensional array here has a specific overload to optimize that case a",
    "start": "3231359",
    "end": "3236640"
  },
  {
    "text": "multi-dimensional array has a specific overload to optimize that case so there's all sorts of optimizations in",
    "start": "3236640",
    "end": "3241650"
  },
  {
    "text": "here the cool thing is these comments these comments tell you what they're going to do tell you what the equivalent",
    "start": "3241650",
    "end": "3248669"
  },
  {
    "text": "c-sharp they'll be outputting is right so this is the one we've just been talking about here's our two castes this",
    "start": "3248669",
    "end": "3254669"
  },
  {
    "text": "stuff is for acing premium rule which is new but it's essentially the same concept there's your dating methods so",
    "start": "3254669",
    "end": "3261509"
  },
  {
    "text": "this is the stuff you want to start by looking at looking at the comments because that's written in c-sharp if we scroll down to look at the actual",
    "start": "3261509",
    "end": "3267539"
  },
  {
    "text": "code right here is the line of code that lowers to our get a numerator call and",
    "start": "3267539",
    "end": "3274369"
  },
  {
    "text": "you kind of have to really get used to this before you can read it I mean I can't really read it it's it's not you",
    "start": "3274369",
    "end": "3281999"
  },
  {
    "text": "know it's not set up this is two castes and reading of one property right this is complicated stuff because this is",
    "start": "3281999",
    "end": "3287429"
  },
  {
    "text": "modifying the tree this syntax tree you can kind of see so this is a make conversion so that's a caste then",
    "start": "3287429",
    "end": "3294150"
  },
  {
    "text": "there's another make conversion there's another caste alright we have our where",
    "start": "3294150",
    "end": "3300239"
  },
  {
    "text": "are we we have the element type right so one caste is to the element type in the",
    "start": "3300239",
    "end": "3307019"
  },
  {
    "text": "collection the other type is to the iteration variable type right the one that you typed in so you can slowly get",
    "start": "3307019",
    "end": "3313559"
  },
  {
    "text": "used to this as you explore if you want to but the comments is really where it's at and it's all broken down really",
    "start": "3313559",
    "end": "3318749"
  },
  {
    "text": "nicely if we scroll down we should see",
    "start": "3318749",
    "end": "3324049"
  },
  {
    "text": "yeah that's not it somewhere in here here we go so this is a special overload",
    "start": "3325159",
    "end": "3332819"
  },
  {
    "text": "for collections that you're for reaching through if they have an indexer because it can make things slightly faster",
    "start": "3332819",
    "end": "3338400"
  },
  {
    "text": "doesn't go through ienumerable at all the compiler still requires you to implement ienumerable at Royal compile",
    "start": "3338400",
    "end": "3343470"
  },
  {
    "text": "but when it gets down to the lowering phase it's like well you know what oh and bother with that if it can work",
    "start": "3343470",
    "end": "3349859"
  },
  {
    "text": "out you've got an indexer this will be faster so there's all sorts of these optimizations and things if you want to",
    "start": "3349859",
    "end": "3355859"
  },
  {
    "text": "explore but that's it from me so if there's any questions you may shout out",
    "start": "3355859",
    "end": "3361529"
  },
  {
    "text": "otherwise I'll be heading around otherwise you can go beat everyone else to the fruit by five minutes",
    "start": "3361529",
    "end": "3367580"
  },
  {
    "text": "[Applause]",
    "start": "3367580",
    "end": "3377300"
  }
]