[
  {
    "text": "good morning and welcome to my second talk in this conference about contemporary C++ and",
    "start": "7480",
    "end": "16400"
  },
  {
    "text": "action I will tell you about an experiment that I've been doing in the",
    "start": "16400",
    "end": "23279"
  },
  {
    "text": "last couple of months the motivation about it and I will give you a demo on my conclusion",
    "start": "23279",
    "end": "29679"
  },
  {
    "text": "about the outcome of this experiment as I said yesterday I'm an",
    "start": "29679",
    "end": "35640"
  },
  {
    "text": "electrical engineer and quite long into software development and I'm",
    "start": "35640",
    "end": "43079"
  },
  {
    "text": "also um doing some kind of stuff on the committee even though I'm no longer an",
    "start": "43079",
    "end": "49079"
  },
  {
    "text": "official member of it so the motivation behind this",
    "start": "49079",
    "end": "55760"
  },
  {
    "text": "talk every time I go to social media and on the web there are some people who are really",
    "start": "57359",
    "end": "65680"
  },
  {
    "text": "vocal about what is the current state of C++ and I have pretty strong opinions",
    "start": "65680",
    "end": "73720"
  },
  {
    "text": "about it C++ is dead committee is only about",
    "start": "73720",
    "end": "82200"
  },
  {
    "text": "inerts it's only doing stuff for the library writers it's slow and it does doesn't",
    "start": "83280",
    "end": "90159"
  },
  {
    "text": "deliver anything useful it's too fast I can't keep up with all the come stuff and all what's",
    "start": "90159",
    "end": "97320"
  },
  {
    "text": "coming out is just half done maybe 10 years more and give us the",
    "start": "97320",
    "end": "104399"
  },
  {
    "text": "real stuff then or even more outspoken opinions about what",
    "start": "104399",
    "end": "112920"
  },
  {
    "text": "the committee is doing and some people say oh this new",
    "start": "112920",
    "end": "118119"
  },
  {
    "text": "fancy stuff just syntactic sugar forget about it but is this really",
    "start": "118119",
    "end": "126600"
  },
  {
    "text": "true yeah so I decided let's do a reality",
    "start": "127959",
    "end": "133560"
  },
  {
    "text": "check as I said I'm quite experienced in software development but what can I do to do some",
    "start": "133560",
    "end": "142440"
  },
  {
    "text": "kind of a real life test how would it feel for maybe a newcomer to C++ to",
    "start": "142440",
    "end": "149959"
  },
  {
    "text": "actually deal with C+ what C++ has to offer so I decided C++ 23 is probably a",
    "start": "149959",
    "end": "157959"
  },
  {
    "text": "good time to conduct such a test there's so many new library features that I can",
    "start": "157959",
    "end": "163599"
  },
  {
    "text": "use that I've never been using before and I can try as many of the new",
    "start": "163599",
    "end": "171239"
  },
  {
    "text": "core language features and there are a ton of libraries out there that I've",
    "start": "171239",
    "end": "177599"
  },
  {
    "text": "never been exposed to so let's use all of this kind of stuff and Implement",
    "start": "177599",
    "end": "183519"
  },
  {
    "text": "something non-trivial and do it and show it here",
    "start": "183519",
    "end": "190159"
  },
  {
    "text": "and I had a very short of time because I was committing to giving such kind of a",
    "start": "190159",
    "end": "197159"
  },
  {
    "text": "talk two months before I had to present it at C++ on C so I don't have that much",
    "start": "197159",
    "end": "204799"
  },
  {
    "text": "time to make it happen so if C++ is really that hard to use with something",
    "start": "204799",
    "end": "210560"
  },
  {
    "text": "that you are not experienced with this experiment should",
    "start": "210560",
    "end": "216040"
  },
  {
    "text": "fail so this is the reason why I came up with the title of this talk contemporary",
    "start": "216040",
    "end": "222439"
  },
  {
    "text": "C++ in action so what does contemporary mean in this context is it the old",
    "start": "222439",
    "end": "230920"
  },
  {
    "text": "untrusted C++ 98 and C++ O3 well at least partially because it's",
    "start": "230920",
    "end": "238519"
  },
  {
    "text": "the fabric of our language or is it the Renaissance C++ 11",
    "start": "238519",
    "end": "245799"
  },
  {
    "text": "or C++ 14 yeah probably yes or is it all the new parts and and",
    "start": "245799",
    "end": "256519"
  },
  {
    "text": "additions to C++ that came with C++ 17 we had all the",
    "start": "256519",
    "end": "262000"
  },
  {
    "text": "new uh vo capillary types optional variant and and whatnot that can put",
    "start": "262000",
    "end": "268759"
  },
  {
    "text": "into good use and maybe this is what should be considered contemporary",
    "start": "268759",
    "end": "276039"
  },
  {
    "text": "C++ or is it the new stuff from C++ 20",
    "start": "276039",
    "end": "281520"
  },
  {
    "text": "and C++ 23 I think this",
    "start": "281520",
    "end": "286600"
  },
  {
    "text": "change that has been coming with C++ 20 is so huge it's a completely new",
    "start": "286600",
    "end": "292520"
  },
  {
    "text": "language in my opinion I think it's all of that as long",
    "start": "292520",
    "end": "300720"
  },
  {
    "text": "as it has stood a test of time obviously the newer kind of stuff",
    "start": "300720",
    "end": "306400"
  },
  {
    "text": "is probably more expressive and can be probably easier be used but the old",
    "start": "306400",
    "end": "313919"
  },
  {
    "text": "stuff is still relevant today and the second part of the title",
    "start": "313919",
    "end": "322360"
  },
  {
    "text": "what does in action mean here as I said I'm an engineer and this demo",
    "start": "322360",
    "end": "328319"
  },
  {
    "text": "application should not be trivial but should contain everything that I do",
    "start": "328319",
    "end": "334800"
  },
  {
    "text": "every day in my daily work as an engineer it should do data",
    "start": "334800",
    "end": "340400"
  },
  {
    "text": "collection it should do data processing it should do data",
    "start": "340400",
    "end": "347319"
  },
  {
    "text": "visualization it should do a little bit of near realtime",
    "start": "347560",
    "end": "353039"
  },
  {
    "text": "networking it should do library usage Library creation",
    "start": "353039",
    "end": "361000"
  },
  {
    "text": "it should do a little bit of interface design and it can take anything that's",
    "start": "361000",
    "end": "367800"
  },
  {
    "text": "needed to make all of this happen",
    "start": "367800",
    "end": "374880"
  },
  {
    "text": "so I came up with an idea what I could actually do within this time frame and",
    "start": "374880",
    "end": "381960"
  },
  {
    "text": "this is the specification of the code it will have a server part it will",
    "start": "381960",
    "end": "388960"
  },
  {
    "text": "have a client part and it will be a complete",
    "start": "388960",
    "end": "395080"
  },
  {
    "text": "application the server will wait for a client connection to come in and it will",
    "start": "395080",
    "end": "401880"
  },
  {
    "text": "observe a directory for CH files that",
    "start": "401880",
    "end": "407120"
  },
  {
    "text": "contain videos and it should uh go over all the contents of",
    "start": "407120",
    "end": "414240"
  },
  {
    "text": "the directory over and over again endlessly as long as the",
    "start": "414240",
    "end": "420759"
  },
  {
    "text": "uh spectator is interested in seeing these videos it should decode all these",
    "start": "420759",
    "end": "426840"
  },
  {
    "text": "files into individual frames and send these video frames over the network to the client the client will",
    "start": "426840",
    "end": "434720"
  },
  {
    "text": "then present the decoded video frames in a window on the",
    "start": "434720",
    "end": "441039"
  },
  {
    "text": "screen and as I said I'm in an industrial setting I require clean",
    "start": "441039",
    "end": "447520"
  },
  {
    "text": "shutdowns and hand Ling of errors in the networking connections not",
    "start": "447520",
    "end": "454479"
  },
  {
    "text": "just the application go away without any",
    "start": "454479",
    "end": "460599"
  },
  {
    "text": "cleanup so I decided which libraries can I do to make this",
    "start": "461440",
    "end": "467759"
  },
  {
    "text": "happen as I said it should at best be something that is",
    "start": "467759",
    "end": "473479"
  },
  {
    "text": "coming out of the committee work and as",
    "start": "473479",
    "end": "478680"
  },
  {
    "text": "I told yesterday we have no networking library in the standard itself but we",
    "start": "478680",
    "end": "484720"
  },
  {
    "text": "have the networking TS and there's a reference implementation of it R your",
    "start": "484720",
    "end": "489800"
  },
  {
    "text": "library maybe some of you are familiar with it is anybody of you familiar with",
    "start": "489800",
    "end": "495879"
  },
  {
    "text": "ASU has it used any okay what's your opinion on the usability of this",
    "start": "495879",
    "end": "504360"
  },
  {
    "text": "Library exactly so it does not only do networking in",
    "start": "506479",
    "end": "513640"
  },
  {
    "text": "particular asynchronous networking but it's also asynchronous execution framework and this makes it really",
    "start": "513640",
    "end": "520518"
  },
  {
    "text": "interesting the second library is the lip AV Library better known under the",
    "start": "520519",
    "end": "527680"
  },
  {
    "text": "FFM tools which are using this library and",
    "start": "527680",
    "end": "533080"
  },
  {
    "text": "this is extremely popular with decoding and handling um audio and video",
    "start": "533080",
    "end": "540200"
  },
  {
    "text": "formats and the best part about lip a is I have no clue about",
    "start": "540200",
    "end": "545959"
  },
  {
    "text": "it the same with sdl it's a open source",
    "start": "545959",
    "end": "551079"
  },
  {
    "text": "library for um doing multimedia IO like uh outputting 3D stuff and 2D stuff and",
    "start": "551079",
    "end": "558399"
  },
  {
    "text": "and media stuff to the loudspeakers and to to video and it",
    "start": "558399",
    "end": "565839"
  },
  {
    "text": "does a little bit of window handling and the best part of it it's really simple",
    "start": "565839",
    "end": "572519"
  },
  {
    "text": "so I could think yeah this is maybe something that I can use in this experiment both lip AV and sdl are C",
    "start": "572519",
    "end": "581399"
  },
  {
    "text": "libraries not C++ libraries and I also reached out into",
    "start": "581399",
    "end": "588560"
  },
  {
    "text": "our company code base for very simple basic supportive stuff like uh option",
    "start": "588560",
    "end": "594320"
  },
  {
    "text": "passing from the command line I don't like to invent reinvent the wheels over",
    "start": "594320",
    "end": "600200"
  },
  {
    "text": "and over again so this code will have C++ 23 in it",
    "start": "600200",
    "end": "610519"
  },
  {
    "text": "because I require new stuff that I'm not familiar with and it totally relies on",
    "start": "610519",
    "end": "616880"
  },
  {
    "text": "C++ 20 and yeah maybe some of you are not",
    "start": "616880",
    "end": "624120"
  },
  {
    "text": "too happy about compile time programming a little bit of it is in there",
    "start": "624120",
    "end": "629720"
  },
  {
    "text": "you probably should learn a bit of compile time programming these",
    "start": "629720",
    "end": "634959"
  },
  {
    "text": "days yeah about the the conventions I'm using here I don't have all these uh namespace",
    "start": "634959",
    "end": "643399"
  },
  {
    "text": "kind of things on every slide it's just too much assume all these name spaces",
    "start": "643399",
    "end": "648519"
  },
  {
    "text": "shown here are present and this is a cultural thing",
    "start": "648519",
    "end": "656160"
  },
  {
    "text": "everything that denam denotes a thing starts with a capital letter and uh",
    "start": "656160",
    "end": "662240"
  },
  {
    "text": "things of type kind have a small prefix then yeah you can read it what",
    "start": "662240",
    "end": "670000"
  },
  {
    "text": "these particular kind of things are designated with so let's start with the",
    "start": "670000",
    "end": "676160"
  },
  {
    "text": "first part of the code the video",
    "start": "676160",
    "end": "681120"
  },
  {
    "text": "handling there is a section of code where I wrap these",
    "start": "683440",
    "end": "692000"
  },
  {
    "text": "C types from the lip a library into proper",
    "start": "692000",
    "end": "697519"
  },
  {
    "text": "C++ types which have Constructors and",
    "start": "697519",
    "end": "702800"
  },
  {
    "text": "destructors but besides that it handles all the the value semantics that the",
    "start": "702800",
    "end": "710120"
  },
  {
    "text": "expect a C++ developers from these types like this AV codec context that I have",
    "start": "710120",
    "end": "718680"
  },
  {
    "text": "given the name codec in the end and so you can use all these C types",
    "start": "718680",
    "end": "728600"
  },
  {
    "text": "just like you handle C++ value types and it also handles the uniqueness of all",
    "start": "728600",
    "end": "735720"
  },
  {
    "text": "these objects that are created within the factory functions of the lip a",
    "start": "735720",
    "end": "741560"
  },
  {
    "text": "library this applies to codex this applies to defiles defile notion of lip",
    "start": "741560",
    "end": "747880"
  },
  {
    "text": "a regarding um multimedia files and also in the",
    "start": "747880",
    "end": "754120"
  },
  {
    "text": "decoding process we have packets and",
    "start": "754120",
    "end": "758880"
  },
  {
    "text": "Frames yeah p and Frames um are never empty whereas the other types can be",
    "start": "759240",
    "end": "765000"
  },
  {
    "text": "empty and there are also reference counted so I have some some support",
    "start": "765000",
    "end": "770160"
  },
  {
    "text": "functions in here just to make sure that at the end of a scope the reference",
    "start": "770160",
    "end": "775480"
  },
  {
    "text": "counts will be dropped then I will Define a frame",
    "start": "775480",
    "end": "780720"
  },
  {
    "text": "header that I will going to use it has a couple of",
    "start": "780720",
    "end": "786399"
  },
  {
    "text": "properties pretty much what you would expect from a video frame some predicates that you can apply",
    "start": "786399",
    "end": "794880"
  },
  {
    "text": "them just to classify if it's actually a valid video frame or if it's uh just a filler or whatever it",
    "start": "794880",
    "end": "802199"
  },
  {
    "text": "might be if it's the first frame in a sequence just stuff like that and most importantly the there is",
    "start": "802199",
    "end": "809560"
  },
  {
    "text": "this uh guarantee that this particular structure is Trivial enough",
    "start": "809560",
    "end": "817920"
  },
  {
    "text": "to be bit blasted bit blasted means I can take the bits move it somewhere else",
    "start": "817920",
    "end": "823880"
  },
  {
    "text": "and the value of this uh aggregate still",
    "start": "823880",
    "end": "830399"
  },
  {
    "text": "is the same so I can send it over the network and it's",
    "start": "830399",
    "end": "835720"
  },
  {
    "text": "just uh retains the the complete um semantics that it's um",
    "start": "835720",
    "end": "844000"
  },
  {
    "text": "designating then there's a type that is designates a bunch of",
    "start": "844000",
    "end": "851759"
  },
  {
    "text": "video pixels and it's implemented as a span of",
    "start": "851759",
    "end": "857560"
  },
  {
    "text": "bytes and both the header and the pixels make up a complete video",
    "start": "857560",
    "end": "864040"
  },
  {
    "text": "frame there's a Constructor that",
    "start": "864040",
    "end": "869320"
  },
  {
    "text": "is required to send filler frames because if you don't have anything to show it should still send a little bit",
    "start": "869320",
    "end": "878519"
  },
  {
    "text": "over the network and you can say how much of time filler frame should",
    "start": "878519",
    "end": "885480"
  },
  {
    "text": "designate and there is a full Constructor from a decoded video frame with some metadata and this is where you",
    "start": "885480",
    "end": "895079"
  },
  {
    "text": "we can use these designated initializers of AR Aggregates to make it absolutely",
    "start": "895079",
    "end": "901639"
  },
  {
    "text": "clear what we are going to intend by um filling in all the",
    "start": "901639",
    "end": "911440"
  },
  {
    "text": "header parts of the video frame I think this is even better than the regular",
    "start": "911440",
    "end": "917000"
  },
  {
    "text": "Constructors are the same with the pixels I this is",
    "start": "917000",
    "end": "922480"
  },
  {
    "text": "just a view into the decoded uh pixels from the lip a frame that's return from",
    "start": "922480",
    "end": "929360"
  },
  {
    "text": "the decoder and here is the meat of the",
    "start": "929360",
    "end": "934959"
  },
  {
    "text": "whole video decoding process it's a function called make frames it takes a",
    "start": "934959",
    "end": "941279"
  },
  {
    "text": "directory that is going to be observed and the return type is this new",
    "start": "941279",
    "end": "949680"
  },
  {
    "text": "C++ 23 kind of thing called stood generator which",
    "start": "949680",
    "end": "955839"
  },
  {
    "text": "means with this return type I can EXP press endless",
    "start": "955839",
    "end": "962360"
  },
  {
    "text": "sequences of decoded video frames it's iterable it's a",
    "start": "962360",
    "end": "969240"
  },
  {
    "text": "range and every time you want to get a new video frame decoded from",
    "start": "969240",
    "end": "976480"
  },
  {
    "text": "this function it will um do what ever is required to come up",
    "start": "976480",
    "end": "985199"
  },
  {
    "text": "with a new video frame what's behind this generator kind of thing is a co- routine",
    "start": "985199",
    "end": "992560"
  },
  {
    "text": "that runs until it can produce a new video frame and the whole decoding process",
    "start": "992560",
    "end": "1000120"
  },
  {
    "text": "starts out with something that generates an endless stream of",
    "start": "1000120",
    "end": "1006480"
  },
  {
    "text": "paths and it does that by an infinite directory iterator this is Sim",
    "start": "1006480",
    "end": "1014319"
  },
  {
    "text": "very similar to the file system directory iterator the difference is it does it over and over and over again",
    "start": "1014319",
    "end": "1022720"
  },
  {
    "text": "endlessly so you have an infinite range an infinite sequence of kind of things",
    "start": "1022720",
    "end": "1028120"
  },
  {
    "text": "this is something that you usually cannot handle without any sort of lacy",
    "start": "1028120",
    "end": "1036038"
  },
  {
    "text": "evaluation of things this endless stream of paths is",
    "start": "1036039",
    "end": "1041798"
  },
  {
    "text": "then put into a view pipeline from the C++ 20",
    "start": "1041799",
    "end": "1049240"
  },
  {
    "text": "library and the first step is filtering the paths if they have the required",
    "start": "1049240",
    "end": "1055280"
  },
  {
    "text": "extension do G the second part is transform these paths",
    "start": "1055280",
    "end": "1063160"
  },
  {
    "text": "into these um lip a file objects that have been showing before by trying to",
    "start": "1063200",
    "end": "1070559"
  },
  {
    "text": "open the given path as a CH file and there's another transformation",
    "start": "1070559",
    "end": "1076919"
  },
  {
    "text": "step in here that takes an already opened lip a file and tries to associate",
    "start": "1076919",
    "end": "1084480"
  },
  {
    "text": "it with a video decoder that can handle the contents of this video",
    "start": "1084480",
    "end": "1091400"
  },
  {
    "text": "file at the end of the transformation pipeline we will get pairs of an open",
    "start": "1091400",
    "end": "1099520"
  },
  {
    "text": "file and an open decoder or even if there is nothing in there you",
    "start": "1099520",
    "end": "1107120"
  },
  {
    "text": "can also have uh um just empty files and decoders here at the stage and this is",
    "start": "1107120",
    "end": "1113440"
  },
  {
    "text": "the output from this pre-processed media files if we actually have a decoder that",
    "start": "1113440",
    "end": "1119799"
  },
  {
    "text": "can handle a given file we will put a little bit of logging onto",
    "start": "1119799",
    "end": "1128200"
  },
  {
    "text": "the terminal using this new C++ 23 formatted console output",
    "start": "1128200",
    "end": "1136400"
  },
  {
    "text": "here and then we yield the decoded video frames one after",
    "start": "1136400",
    "end": "1143200"
  },
  {
    "text": "the other from all the video frames that will be generated by the actual",
    "start": "1143200",
    "end": "1151360"
  },
  {
    "text": "decoding done by the lip a",
    "start": "1151360",
    "end": "1157280"
  },
  {
    "text": "library this decode frames is also a co- routine and so I'm",
    "start": "1157679",
    "end": "1165200"
  },
  {
    "text": "actually um nesting one Co routine one gener Ator into another Co routine and",
    "start": "1165200",
    "end": "1172600"
  },
  {
    "text": "Generator here this decode frames takes our open",
    "start": "1172600",
    "end": "1178679"
  },
  {
    "text": "files and our open decoder and if we don't have a valid decoder and we don't",
    "start": "1178679",
    "end": "1184799"
  },
  {
    "text": "have a valid file we just send out filler frames worth of 100 milliseconds",
    "start": "1184799",
    "end": "1191760"
  },
  {
    "text": "of Blackness the first filter that I've",
    "start": "1191760",
    "end": "1196919"
  },
  {
    "text": "been showing was this has extended kind of thing it's just um a wrapper around",
    "start": "1196919",
    "end": "1204720"
  },
  {
    "text": "a um Lambda expression the second part the first um decoding stage is this try",
    "start": "1204720",
    "end": "1213520"
  },
  {
    "text": "opener file as a CH it takes a path and it will return a lip a file and yeah",
    "start": "1213520",
    "end": "1221679"
  },
  {
    "text": "this is more or less uh cookbook implementation of the the lip a",
    "start": "1221679",
    "end": "1227640"
  },
  {
    "text": "stuff but expressed as proper C++ so here in this this case the I",
    "start": "1227640",
    "end": "1237039"
  },
  {
    "text": "cannot use the a regular Constructor because the underlying lip a file uh lip",
    "start": "1237039",
    "end": "1244400"
  },
  {
    "text": "a function returns a value about success or a failure of this opening process so",
    "start": "1244400",
    "end": "1251559"
  },
  {
    "text": "I cannot put it into a um into a Constructor because you can",
    "start": "1251559",
    "end": "1258159"
  },
  {
    "text": "return any return values from a Constructor and throwing exceptions is not an option here because we want to be",
    "start": "1258159",
    "end": "1266120"
  },
  {
    "text": "handling stuff endlessly and if we successfully have",
    "start": "1266120",
    "end": "1271799"
  },
  {
    "text": "opened such a file we will have to check if the contents is actually a CH file",
    "start": "1271799",
    "end": "1276840"
  },
  {
    "text": "and we only accept CH content here and this takes such a file and will also",
    "start": "1276840",
    "end": "1284039"
  },
  {
    "text": "return such a file and it will check if the content has a vide type as Con media",
    "start": "1284039",
    "end": "1291480"
  },
  {
    "text": "content and if the content is actually a chi this is done by another function from the Liberty Library if this is not",
    "start": "1291480",
    "end": "1300799"
  },
  {
    "text": "the case we will just drop the open file on the floor and go along otherwise we",
    "start": "1300799",
    "end": "1307640"
  },
  {
    "text": "can try to open a video decoder this will take a file and will return this pair that I've been talking",
    "start": "1307640",
    "end": "1314520"
  },
  {
    "text": "about before but at this stage we can figure out if the content of this uh",
    "start": "1314520",
    "end": "1320600"
  },
  {
    "text": "file is actually a video stream or if it is just a still video most two files are",
    "start": "1320600",
    "end": "1327679"
  },
  {
    "text": "just still video but I can uh also encode video",
    "start": "1327679",
    "end": "1333640"
  },
  {
    "text": "sequences yeah if we can actually open successfully an an video decoder for the",
    "start": "1333640",
    "end": "1341919"
  },
  {
    "text": "contents we pass out this ready to decode pair of file and and",
    "start": "1341919",
    "end": "1350200"
  },
  {
    "text": "decoder and here's the heart of the decoding process we take the file we take the decoder and as I said before we",
    "start": "1350200",
    "end": "1358760"
  },
  {
    "text": "will return a generator which will produce one video frame after the other",
    "start": "1358760",
    "end": "1365840"
  },
  {
    "text": "on each iterating step yeah this the rest of the stuff is",
    "start": "1365840",
    "end": "1372600"
  },
  {
    "text": "more or less uh textbook video decoding 101",
    "start": "1372600",
    "end": "1378600"
  },
  {
    "text": "as long as we're not at the end of the file and we can sucessfully read data",
    "start": "1379799",
    "end": "1385400"
  },
  {
    "text": "from the from the file and get packets out of the reading process they then can",
    "start": "1385400",
    "end": "1390919"
  },
  {
    "text": "send it to the decoder and try to get a decoded video frame out of the",
    "start": "1390919",
    "end": "1397400"
  },
  {
    "text": "decoder and if this decoding is actually successful we can create a video frame",
    "start": "1397400",
    "end": "1403960"
  },
  {
    "text": "and yield it as the next output of this range",
    "start": "1403960",
    "end": "1410440"
  },
  {
    "text": "this implementation here is more or less what you can find on",
    "start": "1412360",
    "end": "1418480"
  },
  {
    "text": "maybe um the internet and and stack Overflow or such kind of things it will",
    "start": "1418480",
    "end": "1425320"
  },
  {
    "text": "look similar but much more complicated because all this stuff is implemented in C where you have to",
    "start": "1425320",
    "end": "1433440"
  },
  {
    "text": "manually handle all the creation of the necessary assets and the destruction of",
    "start": "1433440",
    "end": "1439159"
  },
  {
    "text": "the necessary assets and the the handling of the reference counts and all",
    "start": "1439159",
    "end": "1444559"
  },
  {
    "text": "this kind of stuff and none of this is seen here because I could rub it into",
    "start": "1444559",
    "end": "1451320"
  },
  {
    "text": "proper C++ objects and even more importantly I",
    "start": "1451320",
    "end": "1457320"
  },
  {
    "text": "don't have to do all the necessary Hoops how to return something from the inner",
    "start": "1457320",
    "end": "1466279"
  },
  {
    "text": "the the the most nested Loop to the outside because this is the the biggest",
    "start": "1466279",
    "end": "1472559"
  },
  {
    "text": "problem in decoding you're at the deepest nesting level of Loops where you",
    "start": "1472559",
    "end": "1478080"
  },
  {
    "text": "actually create the stuff and want to return it to the coder and with these",
    "start": "1478080",
    "end": "1484760"
  },
  {
    "text": "generators this is now extremely simple to do just put a co co yield here and",
    "start": "1484760",
    "end": "1491520"
  },
  {
    "text": "you're done otherwise you would probably have to depend dependency inject like a",
    "start": "1491520",
    "end": "1498640"
  },
  {
    "text": "function object or do it with some kind of template parameter none of this is necessary",
    "start": "1498640",
    "end": "1507799"
  },
  {
    "text": "here this um directory iterator is just a wrapped uh file system director",
    "start": "1507799",
    "end": "1515039"
  },
  {
    "text": "iterator you have all the boiler plate that you need to do with iterators and the interesting part here is the",
    "start": "1515039",
    "end": "1521200"
  },
  {
    "text": "Sentinel kind of type because um together with this equality operator",
    "start": "1521200",
    "end": "1527360"
  },
  {
    "text": "where you can compare the iterator with the sentent type returning fals gives",
    "start": "1527360",
    "end": "1533360"
  },
  {
    "text": "you an iterator that will never stop you can iterate endlessly over the kind of",
    "start": "1533360",
    "end": "1540200"
  },
  {
    "text": "thing and it will in in difference to the to defile system directory iterator",
    "start": "1540200",
    "end": "1547240"
  },
  {
    "text": "return directly a PA and this is the most important kind",
    "start": "1547240",
    "end": "1553080"
  },
  {
    "text": "of thing here if you happen to have a an iterator you can turn e every iterator",
    "start": "1553080",
    "end": "1559840"
  },
  {
    "text": "into a range by applying non-member functions called begin and end which",
    "start": "1559840",
    "end": "1567720"
  },
  {
    "text": "return the correctly initialized iterators or iterator Cal",
    "start": "1567720",
    "end": "1574720"
  },
  {
    "text": "pairs to make range based Force and and ranges work together with your type if",
    "start": "1574720",
    "end": "1580720"
  },
  {
    "text": "you happen to have such a iterator type in your company code base just augment it with these two kind",
    "start": "1580720",
    "end": "1588600"
  },
  {
    "text": "of functions and you have actually something that you can iterate on using",
    "start": "1588600",
    "end": "1594880"
  },
  {
    "text": "the ranges libraries so we can assert that this is",
    "start": "1594880",
    "end": "1600240"
  },
  {
    "text": "a valid range and it's also a valid viewable",
    "start": "1600240",
    "end": "1607480"
  },
  {
    "text": "range let's come to the next",
    "start": "1607520",
    "end": "1611520"
  },
  {
    "text": "part I'm not sure if any everybody of you is aware of the difference is",
    "start": "1612880",
    "end": "1618919"
  },
  {
    "text": "between synchronous networking and asynchronous networking synchronous networking you",
    "start": "1618919",
    "end": "1624960"
  },
  {
    "text": "start the operation maybe a socket read then you block your current threat and",
    "start": "1624960",
    "end": "1631640"
  },
  {
    "text": "wait for the result this is actually the",
    "start": "1631640",
    "end": "1639159"
  },
  {
    "text": "fastest thing you can do with networking because you still hold on to",
    "start": "1639159",
    "end": "1646039"
  },
  {
    "text": "the threet Cates are h this is the fastest kind of",
    "start": "1646039",
    "end": "1651720"
  },
  {
    "text": "thing contrary to many people believe asynchronous networking is faster than synchronous no this is not the",
    "start": "1651720",
    "end": "1660279"
  },
  {
    "text": "case the asynchronous kind of operation is shown on the bottom half of the",
    "start": "1661799",
    "end": "1668080"
  },
  {
    "text": "picture here you initiate the actual operation then the operating system will",
    "start": "1668080",
    "end": "1674080"
  },
  {
    "text": "perform the operation and sometime later it will come up with the outcome of this operation but",
    "start": "1674080",
    "end": "1681640"
  },
  {
    "text": "it has to store it away until something from your execution framework will",
    "start": "1681640",
    "end": "1687720"
  },
  {
    "text": "actually take care of the outcome so there's a little bit kind of latency in there that's absolutely",
    "start": "1687720",
    "end": "1696640"
  },
  {
    "text": "normal in asynchronous operation but the the the whole benefit is in the fact",
    "start": "1696640",
    "end": "1702519"
  },
  {
    "text": "that you don't block the resources you can do something more useful with the",
    "start": "1702519",
    "end": "1708440"
  },
  {
    "text": "the same execution agents you're running",
    "start": "1708440",
    "end": "1713158"
  },
  {
    "text": "on so this is typically kind of a call back it can execute on the same threat",
    "start": "1713720",
    "end": "1720640"
  },
  {
    "text": "that has been initiating the operation or it in most cases on a different kind",
    "start": "1720640",
    "end": "1726559"
  },
  {
    "text": "of threat or execution agent or whatever it might be you need to be aware of this",
    "start": "1726559",
    "end": "1732080"
  },
  {
    "text": "kind of fact so in an industrial setting you",
    "start": "1732080",
    "end": "1738840"
  },
  {
    "text": "don't do just a socket read or something like that you have to handle um",
    "start": "1738840",
    "end": "1744760"
  },
  {
    "text": "something like a timeout for example if your network connection goes down and",
    "start": "1744760",
    "end": "1750039"
  },
  {
    "text": "you don't be notified about it you need to have some something that",
    "start": "1750039",
    "end": "1757720"
  },
  {
    "text": "will end the operation and usually this is done by a timer so what we do in our",
    "start": "1757720",
    "end": "1765480"
  },
  {
    "text": "company is we associate a a socket and a timer as as a kind of thing that you have to use um at the same time the",
    "start": "1765480",
    "end": "1775000"
  },
  {
    "text": "problem is if you initiate these two asynchronous",
    "start": "1775000",
    "end": "1781159"
  },
  {
    "text": "operations at the same time you have to hold on to this kind of object until the",
    "start": "1781159",
    "end": "1789120"
  },
  {
    "text": "last call back is returned from the operating",
    "start": "1789120",
    "end": "1795320"
  },
  {
    "text": "system and as I said the call backs may come on the same threet but they also",
    "start": "1795320",
    "end": "1801200"
  },
  {
    "text": "may come from different threets so now you have the situation that to have kind",
    "start": "1801200",
    "end": "1807320"
  },
  {
    "text": "of a uh shared lifetime of your objects",
    "start": "1807320",
    "end": "1813279"
  },
  {
    "text": "and the updates coming in from the operating system may come concurrently",
    "start": "1813279",
    "end": "1819240"
  },
  {
    "text": "so you have to be sure that you don't have",
    "start": "1819240",
    "end": "1824559"
  },
  {
    "text": "a a race condition in there and us You' um handle this kind of stuff using some",
    "start": "1824559",
    "end": "1831679"
  },
  {
    "text": "kind of state machines and state machines are typically not that easy to",
    "start": "1831679",
    "end": "1837600"
  },
  {
    "text": "do in particular if they are distributed about uh across different threets or",
    "start": "1837600",
    "end": "1844320"
  },
  {
    "text": "different parts of your code and ACU library is quite famous for this kind of",
    "start": "1844320",
    "end": "1852320"
  },
  {
    "text": "code where you have your state machine distributed and Scattered across many",
    "start": "1852320",
    "end": "1857679"
  },
  {
    "text": "many functions and even more",
    "start": "1857679",
    "end": "1864200"
  },
  {
    "text": "complicated there may be situations that you're no longer interested in the outcome of such an",
    "start": "1864200",
    "end": "1871240"
  },
  {
    "text": "operation so you have a third party involved here that can say okay I'm done",
    "start": "1871240",
    "end": "1877440"
  },
  {
    "text": "dropped everything on the floor so this is a really",
    "start": "1877440",
    "end": "1883120"
  },
  {
    "text": "complicated connection of dependencies that are going on here you have this",
    "start": "1883120",
    "end": "1890840"
  },
  {
    "text": "thing with the the first reference coming from the initiator then you have",
    "start": "1890840",
    "end": "1897519"
  },
  {
    "text": "the initiating functions to do the socket read and the timer start and you",
    "start": "1897519",
    "end": "1904480"
  },
  {
    "text": "have then to handle on the all the defer the these three references to the thing",
    "start": "1904480",
    "end": "1912799"
  },
  {
    "text": "to the completion callbacks and",
    "start": "1912799",
    "end": "1918039"
  },
  {
    "text": "depending on which of the first which of the completions come in first you have",
    "start": "1918039",
    "end": "1923720"
  },
  {
    "text": "to make sure that the operations there are executed in a",
    "start": "1923720",
    "end": "1931000"
  },
  {
    "text": "correct order and do stop the other um still running operation by cancelling",
    "start": "1931000",
    "end": "1938600"
  },
  {
    "text": "them in the correct result and you have to determine the composed",
    "start": "1938600",
    "end": "1944360"
  },
  {
    "text": "result this network of dependency and and um shared pointers in most cases",
    "start": "1944360",
    "end": "1953720"
  },
  {
    "text": "is not easy to handle in particular if you're going to use them on different",
    "start": "1953720",
    "end": "1960360"
  },
  {
    "text": "threads and with the later versions of ACU you can",
    "start": "1960919",
    "end": "1968799"
  },
  {
    "text": "now go on and compose Co routines out of all of these",
    "start": "1968799",
    "end": "1975440"
  },
  {
    "text": "uh initiating functions like asynchronous read asynchronous write",
    "start": "1975440",
    "end": "1980799"
  },
  {
    "text": "asynchronous accept and so you no longer get callbacks but you get a aables out of",
    "start": "1980799",
    "end": "1988880"
  },
  {
    "text": "these functions from AO and even better you can compose them using operators",
    "start": "1988880",
    "end": "1997360"
  },
  {
    "text": "provided by the a library so in the middle part you see",
    "start": "1997360",
    "end": "2003919"
  },
  {
    "text": "this operator with this parallel lines this",
    "start": "2003919",
    "end": "2009000"
  },
  {
    "text": "should show that these two operations are running in parallel and the outcome of the this",
    "start": "2009000",
    "end": "2017000"
  },
  {
    "text": "operator is also returning an aaable",
    "start": "2017000",
    "end": "2022559"
  },
  {
    "text": "that you can use to then Coit the composed",
    "start": "2022559",
    "end": "2027960"
  },
  {
    "text": "operation and if you look later on the on the",
    "start": "2027960",
    "end": "2033519"
  },
  {
    "text": "implementation of this kind of thing in your um user side code this is extremely",
    "start": "2033519",
    "end": "2040760"
  },
  {
    "text": "simple to handle all of the difficult kind of things are abstracted away and",
    "start": "2040760",
    "end": "2046919"
  },
  {
    "text": "this is the reason why Chris kof who is the author of the io library",
    "start": "2046919",
    "end": "2052440"
  },
  {
    "text": "is calling C++ 20 as the awesomest language",
    "start": "2052440",
    "end": "2059079"
  },
  {
    "text": "for Network programming because of co- routines and this composition that comes with",
    "start": "2059079",
    "end": "2065839"
  },
  {
    "text": "it so here's the networking",
    "start": "2065839",
    "end": "2071838"
  },
  {
    "text": "part I want to get tbls as the results from these",
    "start": "2072440",
    "end": "2079638"
  },
  {
    "text": "functions not an call back with two different separate types but I want to",
    "start": "2079639",
    "end": "2088040"
  },
  {
    "text": "get a Tule out of it and I want to make sure that these tup are wrapped into an",
    "start": "2088040",
    "end": "2094599"
  },
  {
    "text": "into an available and with that can say okay my sockets should",
    "start": "2094599",
    "end": "2100920"
  },
  {
    "text": "be um modulated in such kind of thing that they all of them return these",
    "start": "2100920",
    "end": "2107520"
  },
  {
    "text": "availables aables of tuples this applies to sockets acceptors and",
    "start": "2107520",
    "end": "2113680"
  },
  {
    "text": "timers I also have a function which takes any kind of object and demotes it",
    "start": "2113680",
    "end": "2120400"
  },
  {
    "text": "into a bunch of bites this is the object representation",
    "start": "2120400",
    "end": "2125640"
  },
  {
    "text": "of these objects to send over the network",
    "start": "2125640",
    "end": "2130720"
  },
  {
    "text": "and what I really want to get out of my functions here in the networking",
    "start": "2130720",
    "end": "2136720"
  },
  {
    "text": "layer is I want expected as a return type",
    "start": "2136720",
    "end": "2143760"
  },
  {
    "text": "the um the error type should be the same as it's what as it's being returned from",
    "start": "2143760",
    "end": "2149520"
  },
  {
    "text": "Asia which is a stood error code and the value type in the success um case is",
    "start": "2149520",
    "end": "2157240"
  },
  {
    "text": "just what it's going to be returned from the ASU this may be the size of the",
    "start": "2157240",
    "end": "2163599"
  },
  {
    "text": "amount of data that has been transferred so far or it may be a socket and as I said we are going to use",
    "start": "2163599",
    "end": "2171040"
  },
  {
    "text": "this composed operator here so that you can see if you want",
    "start": "2171040",
    "end": "2176560"
  },
  {
    "text": "to um have an operation that sends data out to a socket using a um a Time budget",
    "start": "2176560",
    "end": "2185079"
  },
  {
    "text": "and an amount of buffers then it will return this available of",
    "start": "2185079",
    "end": "2191000"
  },
  {
    "text": "this expected kind of return type and the whole operation is just an Co weight",
    "start": "2191000",
    "end": "2198599"
  },
  {
    "text": "of the asynchronous right to the socket in parallel to the timer weight and this",
    "start": "2198599",
    "end": "2207319"
  },
  {
    "text": "is all what's required here if you as I said before this is a huge Improvement",
    "start": "2207319",
    "end": "2216280"
  },
  {
    "text": "in comparison to what you have been doing before with ACU and asynchronous",
    "start": "2216280",
    "end": "2221839"
  },
  {
    "text": "networking because of this composition power of cor routines and",
    "start": "2221839",
    "end": "2227560"
  },
  {
    "text": "aables the same with receiving from a socket and what I'm showing here is also",
    "start": "2227560",
    "end": "2235000"
  },
  {
    "text": "you transform the the the variants that are coming back from the composed",
    "start": "2235000",
    "end": "2240119"
  },
  {
    "text": "operation into a singular expected types here and same with connect to but in",
    "start": "2240119",
    "end": "2246920"
  },
  {
    "text": "this case I'm going to return a fully connected socket to the output after all",
    "start": "2246920",
    "end": "2253119"
  },
  {
    "text": "the connection operation is done I also have to have a composed close operation",
    "start": "2253119",
    "end": "2259560"
  },
  {
    "text": "because um closing sockets is a little bit more involved than just a member function",
    "start": "2259560",
    "end": "2265760"
  },
  {
    "text": "call so this transformation from the variant it's going to be returned from the parallel",
    "start": "2265760",
    "end": "2273960"
  },
  {
    "text": "operation um the variant has either the out come from the first asynchronous",
    "start": "2273960",
    "end": "2279920"
  },
  {
    "text": "initiation or the outcome of the second asynchronous initiation and I have to",
    "start": "2279920",
    "end": "2285040"
  },
  {
    "text": "figure out what the actual return type is it's only one type and",
    "start": "2285040",
    "end": "2290880"
  },
  {
    "text": "so as soon as I know what the actual return type will be probably the size or",
    "start": "2290880",
    "end": "2297240"
  },
  {
    "text": "even the the socket I can visit the variant with an polymorphic Lambda which",
    "start": "2297240",
    "end": "2303720"
  },
  {
    "text": "will return this expected return type",
    "start": "2303720",
    "end": "2308880"
  },
  {
    "text": "by calling a function template called",
    "start": "2308880",
    "end": "2314359"
  },
  {
    "text": "map this will take one of the tup shown",
    "start": "2314359",
    "end": "2319720"
  },
  {
    "text": "before and if there happen to be no other types other than the the um error",
    "start": "2319720",
    "end": "2328560"
  },
  {
    "text": "code maybe in case of timers you don't have an actual value to have only the return type of telling you have a time",
    "start": "2328560",
    "end": "2336000"
  },
  {
    "text": "out or if the if the um timer operation was cancelled",
    "start": "2336000",
    "end": "2341920"
  },
  {
    "text": "you only have to return the unexpected part of the um expected type",
    "start": "2341920",
    "end": "2350280"
  },
  {
    "text": "here or if you happen to get an error code from maybe a socket read you also",
    "start": "2350280",
    "end": "2357680"
  },
  {
    "text": "put it through the eror channel of the expected or in all other cases you can",
    "start": "2357680",
    "end": "2363319"
  },
  {
    "text": "actually return an expected return tpine like size or",
    "start": "2363319",
    "end": "2370280"
  },
  {
    "text": "theet the replacement is similar disappointments are forwarded",
    "start": "2370280",
    "end": "2377400"
  },
  {
    "text": "and um the the um the output of the composed",
    "start": "2377400",
    "end": "2384160"
  },
  {
    "text": "operation is replaced by whatever I want to get out of it there's also another",
    "start": "2384160",
    "end": "2389440"
  },
  {
    "text": "function to resolve server names to endpoints also",
    "start": "2389440",
    "end": "2395599"
  },
  {
    "text": "with a Time budget but this is not so important here which brings me to the",
    "start": "2395599",
    "end": "2403520"
  },
  {
    "text": "asynchronous execution frame workor and with it comes the notion of executed I",
    "start": "2403520",
    "end": "2409599"
  },
  {
    "text": "want to go too much into detail here but what you see long time ago we only were",
    "start": "2409599",
    "end": "2415880"
  },
  {
    "text": "running on on the hardware we had probably just one threet this was inter",
    "start": "2415880",
    "end": "2421359"
  },
  {
    "text": "implemented in Hardware next we had the abstraction of os threets and stood threads where",
    "start": "2421359",
    "end": "2428000"
  },
  {
    "text": "you can have as many as you like to so the actual Hardware is abstracted",
    "start": "2428000",
    "end": "2435440"
  },
  {
    "text": "from and you can also in the next step abstract from",
    "start": "2435440",
    "end": "2441079"
  },
  {
    "text": "the uh actual execution instance you have maybe thread pools maybe have",
    "start": "2441079",
    "end": "2446839"
  },
  {
    "text": "fibers and then another um abstraction",
    "start": "2446839",
    "end": "2453280"
  },
  {
    "text": "layer on top of that is if you add policies to this kind of so you no longer handle individual",
    "start": "2453280",
    "end": "2460200"
  },
  {
    "text": "threats but you say I need a threet or execution agent that has this particular",
    "start": "2460200",
    "end": "2465520"
  },
  {
    "text": "kind of properties that has this particular kind of quality of service",
    "start": "2465520",
    "end": "2470599"
  },
  {
    "text": "for example how long would it take until the um the asynchronous operations will",
    "start": "2470599",
    "end": "2476560"
  },
  {
    "text": "actually be handled and ACO is adding another layer",
    "start": "2476560",
    "end": "2481720"
  },
  {
    "text": "on top of it this is the the uh the services that come with",
    "start": "2481720",
    "end": "2487359"
  },
  {
    "text": "such a executor ACU has socalled IO context and",
    "start": "2487359",
    "end": "2494880"
  },
  {
    "text": "this these context are given us an service like I can actually",
    "start": "2494880",
    "end": "2502400"
  },
  {
    "text": "schedule IO operations on these kind of executors such that the the framework",
    "start": "2502400",
    "end": "2509560"
  },
  {
    "text": "will handle the completion that are coming back from the operating system on Windows these are IO completion ports I",
    "start": "2509560",
    "end": "2517040"
  },
  {
    "text": "don't don't know what the counterpart on Linux might be there have probably more than one but all of this is abstracted",
    "start": "2517040",
    "end": "2523839"
  },
  {
    "text": "away and implemented by the services that the SEO execution context is providing to us and the most interesting",
    "start": "2523839",
    "end": "2531839"
  },
  {
    "text": "thing here is these services are user extensible so you can take advantage of it you can add your own service to these",
    "start": "2531839",
    "end": "2539880"
  },
  {
    "text": "execution contexts so what I did",
    "start": "2539880",
    "end": "2547359"
  },
  {
    "text": "I um wrap the standard stop source and stop",
    "start": "2550400",
    "end": "2559839"
  },
  {
    "text": "tokens into new names one is off switch it has a member",
    "start": "2559839",
    "end": "2566720"
  },
  {
    "text": "function stop that you can actually use to stop execution and it has an Boolean",
    "start": "2566720",
    "end": "2572160"
  },
  {
    "text": "operator and it can return implicitly into a",
    "start": "2572160",
    "end": "2577839"
  },
  {
    "text": "stop indicator which is a stop token I want this implicit conversion here on",
    "start": "2577839",
    "end": "2584680"
  },
  {
    "text": "purpose B is not here so he can't",
    "start": "2584800",
    "end": "2589640"
  },
  {
    "text": "complain so with these two kind of classes here I'm ready to to have",
    "start": "2590160",
    "end": "2601200"
  },
  {
    "text": "this um necessary operation that I've been showing before if you're no longer",
    "start": "2601200",
    "end": "2606319"
  },
  {
    "text": "interested in outcome of an asynchronous operation you can use these kind of things to to indicate that you're no",
    "start": "2606319",
    "end": "2615480"
  },
  {
    "text": "longer interested in the outcome and I wrap it into a stop",
    "start": "2615480",
    "end": "2621800"
  },
  {
    "text": "service and the stop service is just holding on to such kind of an off",
    "start": "2621800",
    "end": "2627680"
  },
  {
    "text": "switch and I can then add this stop service to an iio",
    "start": "2627680",
    "end": "2635720"
  },
  {
    "text": "completion context or any execution context and I can get it out again and I",
    "start": "2635720",
    "end": "2643319"
  },
  {
    "text": "can ask any object that is related to such a execution context give me",
    "start": "2643319",
    "end": "2650760"
  },
  {
    "text": "the the uh off switch that's baked into the execution context",
    "start": "2650760",
    "end": "2659160"
  },
  {
    "text": "by yeah call this function get stop and give me the context to a given object",
    "start": "2659160",
    "end": "2665400"
  },
  {
    "text": "and how do I do that for every object that I can get",
    "start": "2665400",
    "end": "2670920"
  },
  {
    "text": "here I can ask is it an execution context already this is done at compile time then I can just return it if it's",
    "start": "2670920",
    "end": "2678880"
  },
  {
    "text": "an Executor I can ask it for the context and if it's an object that has an",
    "start": "2678880",
    "end": "2685839"
  },
  {
    "text": "Executor I just call it for the executor and get the context out of it and if the",
    "start": "2685839",
    "end": "2692319"
  },
  {
    "text": "object is completely unrelated to this execution framework I throw up my hands into the",
    "start": "2692319",
    "end": "2698880"
  },
  {
    "text": "air and say okay this wouldn't work Please be",
    "start": "2698880",
    "end": "2704839"
  },
  {
    "text": "aware this if lse letter is done at",
    "start": "2704839",
    "end": "2710480"
  },
  {
    "text": "compile time it's only one of the branches that is executed and generating",
    "start": "2710480",
    "end": "2718240"
  },
  {
    "text": "code then I have a function that can invoke as synchronous in uh",
    "start": "2719400",
    "end": "2727960"
  },
  {
    "text": "operations here and it using um a compile time predicate if",
    "start": "2727960",
    "end": "2733839"
  },
  {
    "text": "it's actually as synchronously cable with this piece of work and these",
    "start": "2733839",
    "end": "2739760"
  },
  {
    "text": "particular arguments and if so I can actually commission this kind of work onto the",
    "start": "2739760",
    "end": "2746960"
  },
  {
    "text": "executor given here and",
    "start": "2746960",
    "end": "2753800"
  },
  {
    "text": "then if there happen to be an exception Throne by executing this piece of work I",
    "start": "2753800",
    "end": "2759880"
  },
  {
    "text": "want to stop the the whole operation of the",
    "start": "2759880",
    "end": "2766759"
  },
  {
    "text": "application I will skip this particular part of the talk because this is a",
    "start": "2767559",
    "end": "2773240"
  },
  {
    "text": "little bit too much compile time at or pretty too much lava as Patricia would",
    "start": "2773240",
    "end": "2780960"
  },
  {
    "text": "call it because what I'm doing here is a compile time function that will actually",
    "start": "2780960",
    "end": "2786960"
  },
  {
    "text": "actually tell me if if a callable plus a set of arguments is",
    "start": "2786960",
    "end": "2794119"
  },
  {
    "text": "actually callable synchronously or",
    "start": "2794119",
    "end": "2799558"
  },
  {
    "text": "asynchronously so in the end I can compose a Schuler by taking an execution",
    "start": "2801880",
    "end": "2808800"
  },
  {
    "text": "context and a stop source and the stop source is then imputed into",
    "start": "2808800",
    "end": "2816440"
  },
  {
    "text": "the context and oh I will get",
    "start": "2816440",
    "end": "2825240"
  },
  {
    "text": "a uh a function object that can be used to schedule either synchronously or",
    "start": "2825240",
    "end": "2831559"
  },
  {
    "text": "asynchronously the actually work lastly I have this Guard the guard",
    "start": "2831559",
    "end": "2839680"
  },
  {
    "text": "is used to to listen to all the to this uh stop tokens and St",
    "start": "2839680",
    "end": "2847119"
  },
  {
    "text": "sources and it will handle the closing of all the objects that are",
    "start": "2847119",
    "end": "2854720"
  },
  {
    "text": "related to this operation here in the in the cor routine this is done by a fold over all",
    "start": "2854720",
    "end": "2863079"
  },
  {
    "text": "the close operations that I that are um related to",
    "start": "2863079",
    "end": "2869240"
  },
  {
    "text": "the given objects and here I have an abstraction as",
    "start": "2869240",
    "end": "2878838"
  },
  {
    "text": "um as Kate was telling us yesterday here if I have a piece of a fragment of work",
    "start": "2880680",
    "end": "2888960"
  },
  {
    "text": "called X and I have I ask the compiler if I take give you a kind of any kind of",
    "start": "2888960",
    "end": "2896240"
  },
  {
    "text": "object and this particular code fragment can you actually do something",
    "start": "2896240",
    "end": "2901680"
  },
  {
    "text": "with it and if you do then execute it and so I can ask the object if it can",
    "start": "2901680",
    "end": "2910000"
  },
  {
    "text": "call a close free function close or can a member function close or can I call a",
    "start": "2910000",
    "end": "2915319"
  },
  {
    "text": "cancel operation in it and so I can make sure that uh",
    "start": "2915319",
    "end": "2922319"
  },
  {
    "text": "the um the as synchronous operation is cancelled so the server have to be very",
    "start": "2922319",
    "end": "2928680"
  },
  {
    "text": "quick now it takes a context endpoints and a source and for",
    "start": "2928680",
    "end": "2935079"
  },
  {
    "text": "each endpoint it will start an except an acceptor",
    "start": "2935079",
    "end": "2940920"
  },
  {
    "text": "and then the acceptor will take the source and return on",
    "start": "2940920",
    "end": "2946920"
  },
  {
    "text": "available and here you see the the guard for the first time whenever the stop",
    "start": "2946920",
    "end": "2952559"
  },
  {
    "text": "token is is fired from anywhere else in the application it will close the",
    "start": "2952559",
    "end": "2958760"
  },
  {
    "text": "acceptor here as long as the acceptor is open it will wait for incoming",
    "start": "2958760",
    "end": "2964240"
  },
  {
    "text": "connections and commission and new connection using um the socket and the",
    "start": "2964240",
    "end": "2970880"
  },
  {
    "text": "source and will begin starting streaming videos the streaming videos is another",
    "start": "2970880",
    "end": "2977200"
  },
  {
    "text": "independent Co routine it will take the socket and the timer and",
    "start": "2977200",
    "end": "2983359"
  },
  {
    "text": "the Sentinel once again and it will take the video frames that have",
    "start": "2983359",
    "end": "2990040"
  },
  {
    "text": "been showing at the output from the video command uh video decode Pipeline",
    "start": "2990040",
    "end": "2995119"
  },
  {
    "text": "and each frame will then be waited upon upon on when it's actually the time to",
    "start": "2995119",
    "end": "3000480"
  },
  {
    "text": "send out this particular frame and after the cor weight of this uh this",
    "start": "3000480",
    "end": "3007960"
  },
  {
    "text": "uh timeout it will try to send the video frames to the given",
    "start": "3007960",
    "end": "3015520"
  },
  {
    "text": "socket and if it's actually successful it will proceed otherwise it will break",
    "start": "3015520",
    "end": "3022280"
  },
  {
    "text": "and stop the whole operation here this is uh the Starting Gate this is not that",
    "start": "3022280",
    "end": "3028559"
  },
  {
    "text": "much interesting here what I've set up so far is a stage where I have",
    "start": "3028559",
    "end": "3034960"
  },
  {
    "text": "acceptors connections and these are independently running actors on this",
    "start": "3034960",
    "end": "3040319"
  },
  {
    "text": "particular stage de cine side is pretty much the",
    "start": "3040319",
    "end": "3046319"
  },
  {
    "text": "same I have a function called show me the videos and this is an individual co-routine acting on the same",
    "start": "3046319",
    "end": "3054359"
  },
  {
    "text": "execution framework it will try to connect to our server and",
    "start": "3054359",
    "end": "3060079"
  },
  {
    "text": "then if this connection is successful it will pass on all the asset so far and",
    "start": "3060079",
    "end": "3065760"
  },
  {
    "text": "start playing the video and at the end it will stop the",
    "start": "3065760",
    "end": "3072160"
  },
  {
    "text": "application this playing of videos it takes the socket and all the necessary",
    "start": "3072160",
    "end": "3077319"
  },
  {
    "text": "assets here it also has a memory resource to to receive all the video",
    "start": "3077319",
    "end": "3084880"
  },
  {
    "text": "pixels in here and there's long as the soet is open it will receive video",
    "start": "3084880",
    "end": "3091720"
  },
  {
    "text": "frames from the networking connection if there is a well-formed",
    "start": "3091720",
    "end": "3097200"
  },
  {
    "text": "frame it will try to update the GUI and present the video pixels in here and it",
    "start": "3097200",
    "end": "3104559"
  },
  {
    "text": "will also lock to the console to receive a single video frame",
    "start": "3104559",
    "end": "3111520"
  },
  {
    "text": "it may be either a well formed video frame with visible content",
    "start": "3111520",
    "end": "3117119"
  },
  {
    "text": "or it may be uh may have um no content at all or it may be a malformed video",
    "start": "3117119",
    "end": "3126160"
  },
  {
    "text": "frame to receive is yeah you get get the header into a bunch of bytes that is",
    "start": "3126160",
    "end": "3133160"
  },
  {
    "text": "exactly aligned and has the correct size here receive it try to figure out how",
    "start": "3133160",
    "end": "3139000"
  },
  {
    "text": "many um bites are received if it's actually a correct video header and then you can",
    "start": "3139000",
    "end": "3146920"
  },
  {
    "text": "put the the object representation the bites that have come over the network into an",
    "start": "3146920",
    "end": "3153000"
  },
  {
    "text": "actual um a live object by displacement new then ask for enough memory to",
    "start": "3153000",
    "end": "3158839"
  },
  {
    "text": "receive the pixels and if we get enough",
    "start": "3158839",
    "end": "3164000"
  },
  {
    "text": "pixels and the correct amount of data then we can form a video frame out of it",
    "start": "3164000",
    "end": "3170640"
  },
  {
    "text": "and return it okay the Adaptive memory source is less interesting the GUI is",
    "start": "3170640",
    "end": "3177200"
  },
  {
    "text": "just as the lip AV is it's just a wrapped uh stdl objects a video A",
    "start": "3177200",
    "end": "3182400"
  },
  {
    "text": "renderer and A texture type it has a class called faner window with an",
    "start": "3182400",
    "end": "3189359"
  },
  {
    "text": "Constructor um method to update the dimensions and the properties of the",
    "start": "3189359",
    "end": "3197079"
  },
  {
    "text": "video um window to to match the properties of the frame",
    "start": "3197079",
    "end": "3202720"
  },
  {
    "text": "Handler this is uh probably what you would expect withd side pixel WID Source",
    "start": "3202720",
    "end": "3207760"
  },
  {
    "text": "format all this kind of stuff and in the update yeah you try to figure out what",
    "start": "3207760",
    "end": "3213960"
  },
  {
    "text": "the actual di dimensions are that are coming in from the network create a texture out of it and show the",
    "start": "3213960",
    "end": "3221160"
  },
  {
    "text": "window and to present the pixels is yeah",
    "start": "3221160",
    "end": "3226680"
  },
  {
    "text": "to we lock the texture blast the pixels out to the texture on the video memory",
    "start": "3226680",
    "end": "3232920"
  },
  {
    "text": "and present it in the end yeah you also headle um use interactions like Mouse",
    "start": "3232920",
    "end": "3240480"
  },
  {
    "text": "moves and this kind of stuff we also handle",
    "start": "3240480",
    "end": "3246200"
  },
  {
    "text": "um signals from the terminal like a sck term or a sck interrupt and we can",
    "start": "3246200",
    "end": "3253599"
  },
  {
    "text": "also handle the GUI um signals like um if you close the",
    "start": "3253599",
    "end": "3261520"
  },
  {
    "text": "window the applications would stop this is what's going on here by poing the",
    "start": "3261520",
    "end": "3268880"
  },
  {
    "text": "event Loop of the guy window so in the",
    "start": "3268880",
    "end": "3274880"
  },
  {
    "text": "end I get my command line parameters like the",
    "start": "3274960",
    "end": "3280440"
  },
  {
    "text": "media directory and the server name then try to figure out the end points create",
    "start": "3280440",
    "end": "3286760"
  },
  {
    "text": "my execution context and the stop source and make a schedule out of it and then I",
    "start": "3286760",
    "end": "3293119"
  },
  {
    "text": "start the server on top of this execution context and if this is successful I can actually",
    "start": "3293119",
    "end": "3300680"
  },
  {
    "text": "start trying to connect to my server here and begin showing the videos same I",
    "start": "3300680",
    "end": "3308319"
  },
  {
    "text": "can handle events from the terminal and I can handle events from the",
    "start": "3308319",
    "end": "3314160"
  },
  {
    "text": "GUI so this is then the setup that the application is",
    "start": "3314160",
    "end": "3322240"
  },
  {
    "text": "actually running we have the acceptors we have the connection we have the video player here we have the terminal events",
    "start": "3322240",
    "end": "3328200"
  },
  {
    "text": "and we have the GUI events and we have the stop Source baked into this",
    "start": "3328200",
    "end": "3333760"
  },
  {
    "text": "execution Frameworks and each of these parts is",
    "start": "3333760",
    "end": "3339559"
  },
  {
    "text": "operating independently of all others implemented as a co- routine everything",
    "start": "3339559",
    "end": "3345799"
  },
  {
    "text": "is wrapped within a CO routine so nobody can have access to all the assets that",
    "start": "3345799",
    "end": "3353119"
  },
  {
    "text": "are within each coroutine a coroutine is just the function so nobody can",
    "start": "3353119",
    "end": "3359319"
  },
  {
    "text": "interfere without with all the assets that they holding on",
    "start": "3359319",
    "end": "3365920"
  },
  {
    "text": "here and I won't go into detail here",
    "start": "3365920",
    "end": "3374680"
  },
  {
    "text": "everything I'm showing here is implemented with",
    "start": "3374680",
    "end": "3381119"
  },
  {
    "text": "modules last year I've been giving a talk about how to compose modules if you look at the source code this will be or",
    "start": "3381960",
    "end": "3389640"
  },
  {
    "text": "it already is up on GitHub you can actually study how to compose modules",
    "start": "3389640",
    "end": "3395240"
  },
  {
    "text": "with the current state of implementation in compilers I have six in Project named",
    "start": "3395240",
    "end": "3402720"
  },
  {
    "text": "modules and I have one header unit I have four named modules made out of",
    "start": "3402720",
    "end": "3408359"
  },
  {
    "text": "these libraries I've been talking about and all of these uh third party",
    "start": "3408359",
    "end": "3413760"
  },
  {
    "text": "libraries and these standard libraries are pre-compiled so you compile it only",
    "start": "3413760",
    "end": "3418920"
  },
  {
    "text": "once and reuse it this is just a Showcase of all the",
    "start": "3418920",
    "end": "3425240"
  },
  {
    "text": "module types that you can have in C++ 20 I've shown this same picture last",
    "start": "3425240",
    "end": "3432039"
  },
  {
    "text": "year so I won't go into detail here yeah this is this is too much",
    "start": "3432039",
    "end": "3438920"
  },
  {
    "text": "detail now but I want to to show that actually using the standard Library as a",
    "start": "3438920",
    "end": "3446599"
  },
  {
    "text": "module is really really",
    "start": "3446599",
    "end": "3454039"
  },
  {
    "text": "fast if you want to include all of the standard Library it takes on my machine",
    "start": "3454039",
    "end": "3460000"
  },
  {
    "text": "2 seconds just to provide all the interfaces and if I do it using modules",
    "start": "3460000",
    "end": "3466400"
  },
  {
    "text": "I'm down to 15 milliseconds maybe even",
    "start": "3466400",
    "end": "3472359"
  },
  {
    "text": "less so I think this is a huge Pro ress that they have been getting out of C++",
    "start": "3472359",
    "end": "3481640"
  },
  {
    "text": "23 so let me head",
    "start": "3481640",
    "end": "3486318"
  },
  {
    "text": "over to the demo",
    "start": "3486920",
    "end": "3492200"
  },
  {
    "text": "code let's try to R this",
    "start": "3500760",
    "end": "3508440"
  },
  {
    "text": "hm what's going on",
    "start": "3508440",
    "end": "3512200"
  },
  {
    "text": "here I have one console output says I've connected to",
    "start": "3518400",
    "end": "3525000"
  },
  {
    "text": "IPv6 local loop back and one to ipv fear",
    "start": "3525000",
    "end": "3531240"
  },
  {
    "text": "version fear but nothing happens has anybody an idea",
    "start": "3531240",
    "end": "3537160"
  },
  {
    "text": "what's missing yeah what's missing",
    "start": "3537160",
    "end": "3545039"
  },
  {
    "text": "is I've only set up the scene so far but I didn't have",
    "start": "3545039",
    "end": "3552119"
  },
  {
    "text": "the missing piece from the director for the actors to actually do anything which",
    "start": "3552119",
    "end": "3558680"
  },
  {
    "text": "is",
    "start": "3558680",
    "end": "3561680"
  },
  {
    "text": "let's compile it",
    "start": "3584920",
    "end": "3587798"
  },
  {
    "text": "again started and let's see if",
    "start": "3595039",
    "end": "3601039"
  },
  {
    "text": "anything will happen",
    "start": "3601039",
    "end": "3605440"
  },
  {
    "text": "so how many Frets do we have here",
    "start": "3632119",
    "end": "3638960"
  },
  {
    "text": "one most of the abstractions are done with coroutines and",
    "start": "3639599",
    "end": "3646000"
  },
  {
    "text": "functions how many classes did they Implement except for the facades using",
    "start": "3646000",
    "end": "3652319"
  },
  {
    "text": "the stop source and the and the stop to",
    "start": "3652319",
    "end": "3657920"
  },
  {
    "text": "one it's the window now you see the power of co-",
    "start": "3658599",
    "end": "3665440"
  },
  {
    "text": "routines free functions and asynchronous",
    "start": "3665440",
    "end": "3671720"
  },
  {
    "text": "Computing and I think the code was quite",
    "start": "3671720",
    "end": "3677160"
  },
  {
    "text": "easy to follow through everything composed well and I",
    "start": "3677160",
    "end": "3683160"
  },
  {
    "text": "actually managed it in this short amount of time using all the completely new",
    "start": "3683160",
    "end": "3689079"
  },
  {
    "text": "libraries and language and Library features so I think",
    "start": "3689079",
    "end": "3696039"
  },
  {
    "text": "C++ in its current stage is really",
    "start": "3696039",
    "end": "3701960"
  },
  {
    "text": "powerful safe because everything is contained in",
    "start": "3701960",
    "end": "3708599"
  },
  {
    "text": "functions it's concise",
    "start": "3709280",
    "end": "3714480"
  },
  {
    "text": "and I think it's really joy to use modern contemporary",
    "start": "3714480",
    "end": "3723279"
  },
  {
    "text": "C++ in particular if you compare it to where we have been 20 years",
    "start": "3723279",
    "end": "3729799"
  },
  {
    "text": "ago so I can encourage all of you try to get used to C++ 20 C++",
    "start": "3729799",
    "end": "3739440"
  },
  {
    "text": "23 and try to make everything into the",
    "start": "3739440",
    "end": "3744680"
  },
  {
    "text": "best abstraction you can find so that codee becomes readable and also it",
    "start": "3744680",
    "end": "3750079"
  },
  {
    "text": "becomes safe so this is my conclusion about the",
    "start": "3750079",
    "end": "3755440"
  },
  {
    "text": "experiment and I think it went well what do you think",
    "start": "3755440",
    "end": "3764319"
  }
]