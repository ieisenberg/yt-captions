[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "and I'm going to talk about it a little bit during but Steve Gordon sitting Steve there is going to have a talk",
    "start": "10280",
    "end": "16720"
  },
  {
    "text": "after this about htb client Factory which ties in with me so I've got two slides or two or three slides on HB",
    "start": "16720",
    "end": "22800"
  },
  {
    "text": "client Factory and Steve have you have more on 100 okay let see we have a full",
    "start": "22800",
    "end": "30000"
  },
  {
    "text": "discussion on hiss to be client",
    "start": "30000",
    "end": "33199"
  },
  {
    "text": "Factory you're in room four is that this level yeah down",
    "start": "35040",
    "end": "41640"
  },
  {
    "text": "okay all right I'm going to say it is 4:20 and I will start so thank you very",
    "start": "41640",
    "end": "47280"
  },
  {
    "text": "much for coming everyone my name is Brian Hogan and that's been up for a while so a tiny",
    "start": "47280",
    "end": "54719"
  },
  {
    "text": "little bit about me to start off I've been working in net since about 2004 I",
    "start": "54719",
    "end": "60160"
  },
  {
    "text": "started a Blog a little maybe about 5 years ago I blog about a lot of things like microservices um web API Entity",
    "start": "60160",
    "end": "67960"
  },
  {
    "text": "framework and of course quite a few things on poly I started a podcast I think in",
    "start": "67960",
    "end": "76840"
  },
  {
    "text": "2014 and it's mainly Around the Net world see Shar microservices but I do",
    "start": "76840",
    "end": "83560"
  },
  {
    "text": "reach out to things like repetitive strain injury salary negotiation Quantum Computing as long as it is something to",
    "start": "83560",
    "end": "89640"
  },
  {
    "text": "do with the the tech sector and I have a plural side course",
    "start": "89640",
    "end": "95920"
  },
  {
    "text": "on poly that you can look up I updated it this year with hctp client Factory",
    "start": "95920",
    "end": "102079"
  },
  {
    "text": "because that was quite an important Improvement or quite important uh",
    "start": "102079",
    "end": "107560"
  },
  {
    "text": "change but why we are here is because things go wrong we all suffer failures",
    "start": "107560",
    "end": "113880"
  },
  {
    "text": "in our software or someone else's and most of our applications rely on connectivity at this stage I mean I I",
    "start": "113880",
    "end": "120560"
  },
  {
    "text": "haven't worked on an application that doesn't have some outbound communication for a very long time but we know that",
    "start": "120560",
    "end": "127520"
  },
  {
    "text": "connectivity has never ever been guaranteed we have to deal now of course",
    "start": "127520",
    "end": "133200"
  },
  {
    "text": "with not only the local network but with the broader internet and the vagaries of what happens there and of course we have",
    "start": "133200",
    "end": "140400"
  },
  {
    "text": "software that fails that isn't uh under our control so the question becomes you know",
    "start": "140400",
    "end": "147040"
  },
  {
    "start": "147000",
    "end": "147000"
  },
  {
    "text": "what will your application do will you throw up a yellow screen a des",
    "start": "147040",
    "end": "152560"
  },
  {
    "text": "or something else in some cases you may well be okay with a single fault like",
    "start": "152560",
    "end": "158360"
  },
  {
    "text": "this maybe you can your application can recover maybe you can move on or maybe",
    "start": "158360",
    "end": "163519"
  },
  {
    "text": "faults will bring down your whole application what you can do about it so",
    "start": "163519",
    "end": "169120"
  },
  {
    "text": "this gentleman over here and I were chatting before we started and I've talked with some people about what you could do by",
    "start": "169120",
    "end": "176640"
  },
  {
    "text": "hand you would do some form of retry that's the most logical thing you've got a failure I'm going to retry and uh for",
    "start": "176640",
    "end": "184680"
  },
  {
    "text": "the people who came in a little bit late I asked who's using poly and a few people are and most are doing it for",
    "start": "184680",
    "end": "190000"
  },
  {
    "text": "retries so if you have a local system and a remote system you send your",
    "start": "190000",
    "end": "196280"
  },
  {
    "text": "request you get failure some sort of failure along the way you then do a",
    "start": "196280",
    "end": "201599"
  },
  {
    "text": "retry and retry and retry up to some reasonable number of",
    "start": "201599",
    "end": "208400"
  },
  {
    "text": "times hoping to get a respon now implementing this is not the easiest",
    "start": "208400",
    "end": "216200"
  },
  {
    "text": "thing so I've asked people at conferences or at little uh meetups you know how would you do it by hand and",
    "start": "216200",
    "end": "222400"
  },
  {
    "text": "this is a general approach youd have your htb clients making a request to",
    "start": "222400",
    "end": "227519"
  },
  {
    "text": "some remote endpoint you throw a for loop around it you know because you want to do it at least three or four times great that's",
    "start": "227519",
    "end": "235280"
  },
  {
    "text": "fine you'd have to have a try catch because you might not get you may get exception as much as you'd get a a bad",
    "start": "235280",
    "end": "243640"
  },
  {
    "text": "status and then of course you have to break out of it if it works now that's",
    "start": "243640",
    "end": "249519"
  },
  {
    "text": "the kind of code I have seen once or twice but it's very fragile it's very",
    "start": "249519",
    "end": "254799"
  },
  {
    "text": "hard to reuse it's very hard to change and of course hard to customize and I wouldn't advocate for this I of course",
    "start": "254799",
    "end": "262360"
  },
  {
    "text": "advocate for poly the poly is a resilience framework and if you're using",
    "start": "262360",
    "end": "267560"
  },
  {
    "text": "Microsoft it's pretty much the only game in in town at the moment if you've worked in the Java world you may have",
    "start": "267560",
    "end": "273039"
  },
  {
    "text": "heard of historics poly and historics have overlapping features poly has some",
    "start": "273039",
    "end": "278600"
  },
  {
    "text": "things that historic does not have and historic has a few things that ply doesn't have so poly helps protect your",
    "start": "278600",
    "end": "285759"
  },
  {
    "text": "application from failure but it has a knock on effect on Downstream applications and also on Upstream",
    "start": "285759",
    "end": "293960"
  },
  {
    "text": "applications poly um as we were talking about has a bunch of things that allow for retries circuit breakers uh cashing",
    "start": "294880",
    "end": "302800"
  },
  {
    "text": "fallback and a few more I'm going to go through them all as we move on it was started in 2013 By a gentleman named",
    "start": "302800",
    "end": "310360"
  },
  {
    "text": "Michael wolfen then but more recently it's been taken over by Dylan reisenberger part of the appv group so",
    "start": "310360",
    "end": "317520"
  },
  {
    "text": "Dylan is active on blogs slack uh Twitter and he's been on my podcast and",
    "start": "317520",
    "end": "324080"
  },
  {
    "text": "also the net rocks podcast going to show a little bit of",
    "start": "324080",
    "end": "329720"
  },
  {
    "text": "code so this first piece I'm going to show you is pre.net core 2.1 this is how uh a policy would look",
    "start": "329720",
    "end": "337520"
  },
  {
    "text": "when you're using it to protect a request so I have the hctp retry policy wrapping around a",
    "start": "337520",
    "end": "347199"
  },
  {
    "text": "HTTP get a sync sorry this is a tiny little bit awkward to use and then you",
    "start": "347199",
    "end": "352880"
  },
  {
    "text": "make your request and get back your response that's all you have to do at the point of your request with poly very",
    "start": "352880",
    "end": "359720"
  },
  {
    "text": "very light you do need to Define that policy",
    "start": "359720",
    "end": "365639"
  },
  {
    "text": "ahead of time and what this policy says is that it's a retry policy and it's checking if",
    "start": "365639",
    "end": "372840"
  },
  {
    "text": "you get a su a status code that's not a success or if you get an exception if",
    "start": "372840",
    "end": "377880"
  },
  {
    "text": "you get either of those it will retry up to three times so this is easy to use it's easy",
    "start": "377880",
    "end": "385560"
  },
  {
    "text": "to reuse and it's easy to change",
    "start": "385560",
    "end": "390560"
  },
  {
    "text": "but if you're in the net core 2.1 or later click world you don't even need to",
    "start": "390599",
    "end": "398919"
  },
  {
    "text": "wrap your request that is the code you would have before you use ply where",
    "start": "398919",
    "end": "404680"
  },
  {
    "text": "you're executing your request and that is the code you would have after using ply where you execute your",
    "start": "404680",
    "end": "411120"
  },
  {
    "text": "request that's because of the the magic of HTTP client Factory which I'll come to a little bit",
    "start": "411120",
    "end": "417960"
  },
  {
    "text": "later when I started learning about Po and particularly when I was working on the plural site course I was doing quite",
    "start": "417960",
    "end": "424479"
  },
  {
    "text": "a bit of research on resilience Frameworks what does it mean I couldn't",
    "start": "424479",
    "end": "430400"
  },
  {
    "start": "430000",
    "end": "430000"
  },
  {
    "text": "find any definition out there so this is what I came up with is that sometimes it",
    "start": "430400",
    "end": "436400"
  },
  {
    "text": "is possible to recover so if you can you do that might be a retry or something",
    "start": "436400",
    "end": "441800"
  },
  {
    "text": "else and sometimes it's not possible so you should degrade gracefully that could",
    "start": "441800",
    "end": "447240"
  },
  {
    "text": "mean different things to everyone that that could mean failing fast it could",
    "start": "447240",
    "end": "452319"
  },
  {
    "text": "mean shedding load it could mean throttling it it's very dependent on",
    "start": "452319",
    "end": "457400"
  },
  {
    "text": "you and again those things will help both uh the applications you depend on",
    "start": "457400",
    "end": "462919"
  },
  {
    "text": "and the things that depend on you so I'm going to keep saying that throughout this because with poly it doesn't help",
    "start": "462919",
    "end": "469120"
  },
  {
    "text": "only your own application it helps those around you as well poly is made up of two sets of",
    "start": "469120",
    "end": "476720"
  },
  {
    "text": "strategies the first are reactive these things respond to problems that",
    "start": "476720",
    "end": "482000"
  },
  {
    "text": "are happening and as we talked about most popular one is retry so a retry",
    "start": "482000",
    "end": "488759"
  },
  {
    "text": "retries immediately when there's a failure then you have a wait and retry which puts in a little bit of a",
    "start": "488759",
    "end": "495319"
  },
  {
    "text": "delay the circuit breaker which will cut the connection between your application and an application that's",
    "start": "495319",
    "end": "502520"
  },
  {
    "text": "failing and then finally the fall back which will attempt to return some sort",
    "start": "502520",
    "end": "508280"
  },
  {
    "text": "of meaningful default when possible again that's very context specific it can also perform an action",
    "start": "508280",
    "end": "515800"
  },
  {
    "text": "like maybe paid someone or scale out or anything that you need on the other side so reactive",
    "start": "515800",
    "end": "523200"
  },
  {
    "text": "strategies are those and then you have proactive strategies these attempt to",
    "start": "523200",
    "end": "528360"
  },
  {
    "text": "monitor ongoing offense and events excuse me and stabilize your system the first one is the timeout this allows you",
    "start": "528360",
    "end": "535640"
  },
  {
    "text": "to specify when something should time out rather than the default so HB client is a perfect example I think it's 100",
    "start": "535640",
    "end": "542360"
  },
  {
    "text": "seconds you can say that's too long I'm going to time out much much sooner caching you can store a previous",
    "start": "542360",
    "end": "550880"
  },
  {
    "text": "response with HTTP client you could store the whole HTTP response or you could sore a business data so then you",
    "start": "550880",
    "end": "558000"
  },
  {
    "text": "don't need to reach out to a remote system and then finally bulkhead",
    "start": "558000",
    "end": "563079"
  },
  {
    "text": "isolation this protects the resources within your application by coordinating",
    "start": "563079",
    "end": "568320"
  },
  {
    "text": "off how much any particular part of your application can consume helping stabilize your whole",
    "start": "568320",
    "end": "575800"
  },
  {
    "text": "application at the heart of poly are policies they're made up of two things a",
    "start": "576360",
    "end": "583240"
  },
  {
    "start": "577000",
    "end": "577000"
  },
  {
    "text": "handles clause and a behavior Clause the handles Clause says I'm handling a 400",
    "start": "583240",
    "end": "592200"
  },
  {
    "text": "And1 or a 500 or a something and then the behavior says what I'm going to do",
    "start": "592200",
    "end": "598240"
  },
  {
    "text": "that could be retried it could be uh something else all the policies are written in a",
    "start": "598240",
    "end": "605600"
  },
  {
    "text": "fluent style easy to work with they are thread safe they can be used the same",
    "start": "605600",
    "end": "610640"
  },
  {
    "text": "policy can be used multiple times at the same time reusable across your",
    "start": "610640",
    "end": "617720"
  },
  {
    "text": "application you can choose to execute excuse me a delegate during a respon",
    "start": "617720",
    "end": "623720"
  },
  {
    "text": "during a a poly execution so the likes of retries has an on retry so you could do something as is before excuse me",
    "start": "623720",
    "end": "630760"
  },
  {
    "text": "before the retry is executed and works with both synchronous",
    "start": "630760",
    "end": "635839"
  },
  {
    "text": "and async code and then finally wrapping a policy can be wrapped around another",
    "start": "635839",
    "end": "641959"
  },
  {
    "text": "policy so you could have uh the hdp request being called by being protected",
    "start": "641959",
    "end": "647959"
  },
  {
    "text": "by the retry and around that you could be wrapping a fallback so then you would retry a number of times if they all fail",
    "start": "647959",
    "end": "654920"
  },
  {
    "text": "the fallback will kick in and give you something",
    "start": "654920",
    "end": "659720"
  },
  {
    "text": "for the rest of this talk I'm going to be coming back to this little slide I'm trying to build up a picture",
    "start": "659959",
    "end": "667079"
  },
  {
    "text": "of how I use poly to build fall tolerant applications and this little blob represents my application and what I'm",
    "start": "667079",
    "end": "674519"
  },
  {
    "text": "going to try to do is show you to how to add robust requests to your application so in the event of a problem you'll be",
    "start": "674519",
    "end": "680800"
  },
  {
    "text": "able to perform some sort of retry in the event that there's no communication or something gone wrong with a remote",
    "start": "680800",
    "end": "687120"
  },
  {
    "text": "system that you'll always get some kind of response that you can cut your",
    "start": "687120",
    "end": "692279"
  },
  {
    "text": "connection between your application and a faulting remote application that you can fail much",
    "start": "692279",
    "end": "699360"
  },
  {
    "text": "quicker rather than waiting for a slow failure always better to fail fast than slow how you can reduce load on your own",
    "start": "699360",
    "end": "706959"
  },
  {
    "text": "application and remote applications and then finally how you can protect your own application's",
    "start": "706959",
    "end": "712959"
  },
  {
    "text": "resources from or sorry from one part of your application from bringing down the whole application",
    "start": "712959",
    "end": "720000"
  },
  {
    "start": "720000",
    "end": "720000"
  },
  {
    "text": "tiny little bit about how basic requests work with HB client you make your request you can check if it's a success",
    "start": "720399",
    "end": "726959"
  },
  {
    "text": "and then you'll return your response with the likes of a retry",
    "start": "726959",
    "end": "733560"
  },
  {
    "start": "730000",
    "end": "730000"
  },
  {
    "text": "policy what happens is you make your request you'll check if there's a success if it wasn't the retry policy",
    "start": "733560",
    "end": "741199"
  },
  {
    "text": "would kick in it will check whether or not it should become active in its handles Clause so if you're only",
    "start": "741199",
    "end": "747880"
  },
  {
    "text": "checking for let's say four 1's or something and you get a 500 it won't become active but if you're checking for",
    "start": "747880",
    "end": "754000"
  },
  {
    "text": "both it will become active and then it will kick off another",
    "start": "754000",
    "end": "760680"
  },
  {
    "text": "request it will again check if it was a success if it was you'll get the",
    "start": "760680",
    "end": "765839"
  },
  {
    "text": "response a typical HTP response unaltered nothing changed poly doesn't",
    "start": "765839",
    "end": "772000"
  },
  {
    "text": "pollute it in any way if instead you got a failure then poly lets it flow true and",
    "start": "772000",
    "end": "778480"
  },
  {
    "text": "you get back your 401 or your 500 or whatever but again it still looks exactly like a standard HTTP",
    "start": "778480",
    "end": "787000"
  },
  {
    "text": "response so time out excuse me uh retries are probably the most popular thing you're going to use and get the",
    "start": "787000",
    "end": "793040"
  },
  {
    "text": "most bang for your book but a retry has this",
    "start": "793040",
    "end": "798839"
  },
  {
    "start": "796000",
    "end": "796000"
  },
  {
    "text": "problem you could end up hammering a remote system with retries especially if you're going to",
    "start": "798839",
    "end": "805279"
  },
  {
    "text": "retry 10 times or an infinite number of times if you've if you're community communicating with a struggling system",
    "start": "805279",
    "end": "811800"
  },
  {
    "text": "retrying quickly isn't necessarily the right thing to do you're only going to",
    "start": "811800",
    "end": "816959"
  },
  {
    "text": "overload the remote system and you yourself are going to be holding on to multiple open uh sockets memory uh",
    "start": "816959",
    "end": "825079"
  },
  {
    "text": "threads and the whole lot instead we're going to use maybe the uh",
    "start": "825079",
    "end": "832079"
  },
  {
    "start": "830000",
    "end": "830000"
  },
  {
    "text": "the weight and retry you'd send your request and through a little bit of Lambda you can",
    "start": "832079",
    "end": "838399"
  },
  {
    "text": "specify you want to delay for two seconds the first time and then maybe 4 seconds the second",
    "start": "838399",
    "end": "845880"
  },
  {
    "text": "time uh maybe 8 seconds 16 seconds some sort of exponential back off and or you",
    "start": "845880",
    "end": "852279"
  },
  {
    "text": "can choose any algorithm you want for that back off I think that a lot of",
    "start": "852279",
    "end": "858000"
  },
  {
    "text": "people advocate for are putting in a little Jitter as well so that you would put I don't know 20 some random number",
    "start": "858000",
    "end": "865639"
  },
  {
    "text": "between 10 milliseconds and 100 milliseconds because you don't necessarily want a lot of your processes",
    "start": "865639",
    "end": "871480"
  },
  {
    "text": "retrying at the exact same time ethernet does something like this",
    "start": "871480",
    "end": "877560"
  },
  {
    "text": "when it's doing its back offs when from collisions how a retry policy looks is",
    "start": "877560",
    "end": "884560"
  },
  {
    "text": "like this I'm going to bring my DOT up so I'm saying I'm looking for anything other",
    "start": "884560",
    "end": "890800"
  },
  {
    "text": "than a success code and then I would retry up to three times and I'm",
    "start": "890800",
    "end": "896519"
  },
  {
    "text": "specifying that I'm going to be examining http resp responses and then this is what a a weit",
    "start": "896519",
    "end": "902839"
  },
  {
    "text": "and retry looks like so very very similar the difference is down here I'm",
    "start": "902839",
    "end": "908639"
  },
  {
    "text": "specifying three retries and that's my little bit of code to say how long and",
    "start": "908639",
    "end": "914000"
  },
  {
    "text": "that's obviously customizable to anything you",
    "start": "914000",
    "end": "919279"
  },
  {
    "text": "want let me show you something a little bit different with net core",
    "start": "922160",
    "end": "927959"
  },
  {
    "text": "2.1 you're probably going to want to use the lower syntax here because you're",
    "start": "927959",
    "end": "934720"
  },
  {
    "text": "going to use a registry along with HTTP client Factory and the registry passes",
    "start": "934720",
    "end": "940079"
  },
  {
    "text": "out iing policies depending on the request I'll cover a little bit",
    "start": "940079",
    "end": "945480"
  },
  {
    "text": "later this is only a tiny reminder this is probably what you're going to use but for the rest of the talk I'm going to",
    "start": "945480",
    "end": "950880"
  },
  {
    "text": "show you the more readable one because it's easier to explain that I'm working with a retry policy or a circuit breaker",
    "start": "950880",
    "end": "956319"
  },
  {
    "text": "or whatever rer than using IIA sync but something to to",
    "start": "956319",
    "end": "961720"
  },
  {
    "text": "consider I mentioned earlier that you can execute a delegate when you are",
    "start": "961720",
    "end": "967920"
  },
  {
    "start": "963000",
    "end": "963000"
  },
  {
    "text": "performing a retry so a good example would be if you're getting an unauthorized back there's absolutely no",
    "start": "967920",
    "end": "975040"
  },
  {
    "text": "point in retrying the exact same request because that's what poly will do it'll send the same request with the same",
    "start": "975040",
    "end": "980279"
  },
  {
    "text": "credentials three times four times five times",
    "start": "980279",
    "end": "986240"
  },
  {
    "text": "instead here you you're checking if it's it's a success code if it's not you have",
    "start": "986240",
    "end": "991319"
  },
  {
    "text": "your little delegate here which checks the particular code that you got and if it is an unauthorized you would go and",
    "start": "991319",
    "end": "998959"
  },
  {
    "text": "execute some custom logic maybe you're updating a jot or updating a cookie or",
    "start": "998959",
    "end": "1004040"
  },
  {
    "text": "doing something with OCTA so this allows you the ability to execute some arbitrary code prior to the retry again",
    "start": "1004040",
    "end": "1012880"
  },
  {
    "text": "no point in trying a retry with uh an unauthorized if you're not changing something",
    "start": "1012880",
    "end": "1020639"
  },
  {
    "start": "1020000",
    "end": "1020000"
  },
  {
    "text": "the general structure of policies and how they behave is the request occurs",
    "start": "1020639",
    "end": "1026240"
  },
  {
    "text": "you check the whether it's a success and then poly checks whether or not it's going to trigger Its Behavior clause and",
    "start": "1026240",
    "end": "1034520"
  },
  {
    "text": "if it does it takes some action I wanted to show that as a a more General thing and again it doesn't interfere with the",
    "start": "1034520",
    "end": "1041199"
  },
  {
    "text": "request and um Dylan gentleman who made this has done a lot of work to examine",
    "start": "1041199",
    "end": "1046600"
  },
  {
    "text": "the metrics and he's found that it's a tiny tiny impact on the overall time of requests to use poly even if poly is not",
    "start": "1046600",
    "end": "1054360"
  },
  {
    "text": "becoming active you know 99% of the time it doesn't impact in any significant way",
    "start": "1054360",
    "end": "1060480"
  },
  {
    "text": "the the length of time of your requests prob only gets involved when there's a",
    "start": "1060480",
    "end": "1066279"
  },
  {
    "text": "failure but something that was pointed out to me at previous conference was I didn't mention that poly can also be",
    "start": "1066360",
    "end": "1073760"
  },
  {
    "text": "used for things other than HTTP clients so so in the top example I'm checking",
    "start": "1073760",
    "end": "1081320"
  },
  {
    "text": "the int to see if a number is what I expect and if it's not I perform a retry",
    "start": "1081320",
    "end": "1087039"
  },
  {
    "text": "in the middle one I'm checking an enom and the bottom one I'm simply checking for an ex uh excuse me an exception so",
    "start": "1087039",
    "end": "1095240"
  },
  {
    "text": "if you're not that interested in HTTP client poly is still perfectly usable",
    "start": "1095240",
    "end": "1100640"
  },
  {
    "text": "for you all right so I'm going to come back",
    "start": "1100640",
    "end": "1106159"
  },
  {
    "text": "to my little blob here and now we've added robust requests so we've got retries wait and retries so",
    "start": "1106159",
    "end": "1113080"
  },
  {
    "text": "our application is becoming a little bit more resilient fallback is policy usually",
    "start": "1113080",
    "end": "1122200"
  },
  {
    "text": "that you use at the very end of a wrapping so you may do a retry a circuit breaker and a fallback it's your kind of",
    "start": "1122200",
    "end": "1128760"
  },
  {
    "text": "last line of defense it allows you again as I said a little earlier to return some sort of meaningful",
    "start": "1128760",
    "end": "1136280"
  },
  {
    "text": "default may not be applicable in a lot of scenarios sometimes it will be there's also an on fallback delegate",
    "start": "1136280",
    "end": "1143520"
  },
  {
    "text": "like the on retry I showed you a moment ago and it can perform any action you like you know paging someone restarting",
    "start": "1143520",
    "end": "1150600"
  },
  {
    "text": "a computer scaling out something of that nature how it looks is like this so I'm",
    "start": "1150600",
    "end": "1159480"
  },
  {
    "text": "to make it easy I'm making it clear it's a fallback policy this time I'm using a slightly different way of checking the",
    "start": "1159480",
    "end": "1166000"
  },
  {
    "text": "status code I'm specifying an internal server error and here I am returning a full hctp",
    "start": "1166000",
    "end": "1173640"
  },
  {
    "text": "response where I'm passing in some cached piece of data because I feel that cash piece of data is applicable to",
    "start": "1173640",
    "end": "1179840"
  },
  {
    "text": "return so you can build up full HTTP responses and return",
    "start": "1179840",
    "end": "1184880"
  },
  {
    "text": "them uh instead of the failure you got from a remote",
    "start": "1184880",
    "end": "1190360"
  },
  {
    "text": "system that's all there is to the caching circuit breaker is a very",
    "start": "1191039",
    "end": "1197960"
  },
  {
    "text": "interesting one circuit breakers are like what you'd find in your home in the US I think we call them circuit breakers",
    "start": "1197960",
    "end": "1204000"
  },
  {
    "text": "in Ireland we used to call them trip switches and there are two kinds in poly",
    "start": "1204000",
    "end": "1209280"
  },
  {
    "text": "an original circuit breaker and an advanced circuit breaker I'll cover them in a sec circuit breaker have three",
    "start": "1209280",
    "end": "1215880"
  },
  {
    "text": "states the closed state is the normal operation State like an electrical",
    "start": "1215880",
    "end": "1221440"
  },
  {
    "text": "circuit when it's closed electricity flows everything works the open state like again like",
    "start": "1221440",
    "end": "1229520"
  },
  {
    "text": "electric circuit nothing will flow in the open state so that's the faulting state and then the half open state is a",
    "start": "1229520",
    "end": "1236360"
  },
  {
    "text": "test State when in half open the first request true is viewed as a test request",
    "start": "1236360",
    "end": "1244919"
  },
  {
    "text": "if it succeeds then the circuit becomes uh closed again I'll show you this on a",
    "start": "1244919",
    "end": "1250600"
  },
  {
    "start": "1250000",
    "end": "1250000"
  },
  {
    "text": "state diagram so it starts in the closed normal operation you start your application you've got a closed circuit",
    "start": "1250600",
    "end": "1255679"
  },
  {
    "text": "breaker everything is Flowing nicely you start to get some problems your circuit breaker will open you now will not be",
    "start": "1255679",
    "end": "1262520"
  },
  {
    "text": "able to communicate with the remote system that's covered by the circuit breaker or the remote endpoint or",
    "start": "1262520",
    "end": "1267799"
  },
  {
    "text": "whatever you've decided to cover by it after a specified period let's say 60",
    "start": "1267799",
    "end": "1275000"
  },
  {
    "text": "seconds the next request that comes to you that you're going to forward onto a remote system will be a test request it",
    "start": "1275000",
    "end": "1282640"
  },
  {
    "text": "moves to the half open if it's if it fails the circuit pops back to the open",
    "start": "1282640",
    "end": "1287840"
  },
  {
    "text": "and there'll be another 60 seconds before you'll be able to communicate with that remote system you'll then switch back to half",
    "start": "1287840",
    "end": "1295320"
  },
  {
    "text": "open again if that request succeeds you go back to closed and back to normal",
    "start": "1295320",
    "end": "1301840"
  },
  {
    "text": "operation so closed is where you want to be when in the open state if a request",
    "start": "1301840",
    "end": "1309559"
  },
  {
    "text": "comes in that's going to try to go across that circuit ply will immediately send a failure uh exception so it it",
    "start": "1309559",
    "end": "1318840"
  },
  {
    "text": "times excuse me it it fails immediately again we're back to failing fast rather than failing",
    "start": "1318840",
    "end": "1323960"
  },
  {
    "text": "slow so there's no Wast of time the thing that you Reed the request was",
    "start": "1323960",
    "end": "1329000"
  },
  {
    "text": "informed that the circuit's open try later so you're not holding connections",
    "start": "1329000",
    "end": "1334880"
  },
  {
    "text": "you're not holding memory they're not holding anything either so again it has that Downstream impact and then of",
    "start": "1334880",
    "end": "1340320"
  },
  {
    "text": "course you've taken load off of the Upstream which is hopefully given time to",
    "start": "1340320",
    "end": "1345720"
  },
  {
    "text": "recover this is kind of how you might use it so your application is there on the left and maybe you've got multiple",
    "start": "1345720",
    "end": "1353880"
  },
  {
    "text": "end points on three or four remote applications you can place a circuit",
    "start": "1353880",
    "end": "1359600"
  },
  {
    "text": "breaker across a single endpoint potentially a group of",
    "start": "1359600",
    "end": "1365120"
  },
  {
    "text": "endpoints maybe even all your outbound requests though that would be a little strange you know that would suggest",
    "start": "1365120",
    "end": "1370799"
  },
  {
    "text": "you've got major networking problems that you probably should look",
    "start": "1370799",
    "end": "1376039"
  },
  {
    "text": "at one slightly different thing about a circuit breaker than the others what I",
    "start": "1376039",
    "end": "1381919"
  },
  {
    "text": "said about retries and all those is that they're independent you can run them 100 of them at the same time with a circuit",
    "start": "1381919",
    "end": "1387400"
  },
  {
    "text": "breaker you want the state to be shared across all uses so if in this case you had a failure on",
    "start": "1387400",
    "end": "1395120"
  },
  {
    "text": "the top one and then the bottom one and then the middle one then the top one you'd like that to count as four",
    "start": "1395120",
    "end": "1401039"
  },
  {
    "text": "failures or three failures or five failures rather than as 1111 or something like that you want to keep",
    "start": "1401039",
    "end": "1406679"
  },
  {
    "text": "that aggregate going there is some ongoing work at the moment",
    "start": "1406679",
    "end": "1412080"
  },
  {
    "text": "on distributed circuit breakers but it's not done yet so the idea is that right now that count of the number of failures",
    "start": "1412080",
    "end": "1419400"
  },
  {
    "text": "is kept on your process but if you've got a container and 100 containers it would be useful if that count was kept",
    "start": "1419400",
    "end": "1425640"
  },
  {
    "text": "in some other location so that you would be able to get an an aggregate across all there are I mentioned two kinds of",
    "start": "1425640",
    "end": "1432840"
  },
  {
    "text": "circuit breakers so this is the original circuit breaker it's Oh wrong button so it's",
    "start": "1432840",
    "end": "1440360"
  },
  {
    "text": "saying that if you get two consecutive failures it's going to time out for 60",
    "start": "1440360",
    "end": "1446600"
  },
  {
    "text": "seconds and then you've got these delegates which you can use for logging or for other behaviors but it's two consecutive",
    "start": "1446600",
    "end": "1453279"
  },
  {
    "text": "failures in a window this is good for some scenarios",
    "start": "1453279",
    "end": "1458559"
  },
  {
    "text": "but it's been found that it is a little bit um not not fine-tuned enough so they",
    "start": "1458559",
    "end": "1466919"
  },
  {
    "text": "developed an advanced circuit breaker so this one looks at a rolling average over",
    "start": "1466919",
    "end": "1472080"
  },
  {
    "text": "a period of time as long as you've hit a certain threshold of requests so what",
    "start": "1472080",
    "end": "1477200"
  },
  {
    "text": "this one says is if you get 50% of failures in a 30-second window and you",
    "start": "1477200",
    "end": "1483399"
  },
  {
    "text": "got at least seven requests then break the circuit for 60",
    "start": "1483399",
    "end": "1488600"
  },
  {
    "text": "seconds so it's much more fine grained and tunable now both are good I've had",
    "start": "1488600",
    "end": "1495960"
  },
  {
    "text": "more use from this one because um we tended to have very little traffic so I",
    "start": "1495960",
    "end": "1501480"
  },
  {
    "text": "might get a request at the start of an hour and a request at the end of an hour and I don't really want to cut the circuit because I got two consecutive",
    "start": "1501480",
    "end": "1508159"
  },
  {
    "text": "requests that happen to be 60 minutes apart all right coming back to my little",
    "start": "1508159",
    "end": "1516600"
  },
  {
    "text": "diagram so I've added the ability to cut a circuit so to kind of cover again the",
    "start": "1516600",
    "end": "1522360"
  },
  {
    "text": "circuit breaker allows you to cut your connection to a remote system if it's struggling there's no point",
    "start": "1522360",
    "end": "1527840"
  },
  {
    "text": "communication with it you will also help the downstream that are making request to you by timing out very quickly or by",
    "start": "1527840",
    "end": "1534559"
  },
  {
    "text": "failing quickly so this those were all the reative strategies so we had retry the",
    "start": "1534559",
    "end": "1542080"
  },
  {
    "start": "1538000",
    "end": "1538000"
  },
  {
    "text": "wait and retry the circuit breaker and the fallback I mentioned briefly earlier",
    "start": "1542080",
    "end": "1549600"
  },
  {
    "text": "that you can combine these so at the this is called a policy",
    "start": "1549600",
    "end": "1555640"
  },
  {
    "start": "1552000",
    "end": "1552000"
  },
  {
    "text": "WP at the center you would have your HTTP request around it you might retry up to three",
    "start": "1555640",
    "end": "1562480"
  },
  {
    "text": "times around that you might have a circuit breaker in the event that the retries have failed repeatedly and then",
    "start": "1562480",
    "end": "1569360"
  },
  {
    "text": "finally around that if everything has failed the circuit's open you've had a ton of failures you can return some sort",
    "start": "1569360",
    "end": "1575919"
  },
  {
    "text": "of default you can wrap these in any order you want but the order is very important if you instead had the circuit",
    "start": "1575919",
    "end": "1583440"
  },
  {
    "text": "breaker outside the HTTP request and then the retry it would behave significant differently so bear in mind",
    "start": "1583440",
    "end": "1591320"
  },
  {
    "text": "the order is quite important right this is where we are at",
    "start": "1591320",
    "end": "1597279"
  },
  {
    "text": "the moment reactive covered I'm going to move on to a very quick",
    "start": "1597279",
    "end": "1602600"
  },
  {
    "text": "demo I'm going to use my own computer to simulate a local system and a remote",
    "start": "1602600",
    "end": "1607960"
  },
  {
    "text": "system the local one will receive a request it's going to call the remote one and then we're going to see how",
    "start": "1607960",
    "end": "1615360"
  },
  {
    "text": "policies kick in and perform retries so give me one sec to switch",
    "start": "1615360",
    "end": "1624279"
  },
  {
    "text": "screens uh bu bum I need to do",
    "start": "1625080",
    "end": "1633520"
  },
  {
    "text": "duplicate that looks right so again on the left oh actually I'm sorry let me do",
    "start": "1633520",
    "end": "1639880"
  },
  {
    "text": "this a different way I'm sorry it would be better",
    "start": "1639880",
    "end": "1645919"
  },
  {
    "text": "there we go that looks okay so on the left I have what I'm kind",
    "start": "1654159",
    "end": "1659559"
  },
  {
    "text": "calling my local system which has poly to make to protect my requests and on the right I have a remote system that's",
    "start": "1659559",
    "end": "1666919"
  },
  {
    "text": "going to fail a lot so the first demo I'm going to run is a plain simple retry",
    "start": "1666919",
    "end": "1673440"
  },
  {
    "text": "and what you'll see is",
    "start": "1673440",
    "end": "1677600"
  },
  {
    "text": "that so in that very very short period my local system was hit with a",
    "start": "1679240",
    "end": "1685360"
  },
  {
    "text": "request oh my pointer doesn't work now my local system I'm going to use my mouse my local system hit with a request",
    "start": "1685360",
    "end": "1692640"
  },
  {
    "text": "it sent it to the remote system that returned an internal server error this got it performed a retry very",
    "start": "1692640",
    "end": "1700200"
  },
  {
    "text": "quickly the remote system again failed retried failed and on the fourth attempt",
    "start": "1700200",
    "end": "1706480"
  },
  {
    "text": "the remote system worked and I got my response I'll show I'll run it again to show you the",
    "start": "1706480",
    "end": "1712679"
  },
  {
    "text": "speed so that's how quickly retries work now that's fine in some scenarios but",
    "start": "1712679",
    "end": "1719960"
  },
  {
    "text": "you can see how that's going to hammer a remote system the",
    "start": "1719960",
    "end": "1727080"
  },
  {
    "text": "second demo again I'm sending a request to my local to my to the one on the left is",
    "start": "1727080",
    "end": "1733640"
  },
  {
    "text": "going to execute a wait and retry a little bit more gradual so you",
    "start": "1733640",
    "end": "1739760"
  },
  {
    "text": "can see hopefully you can see the retries one two and three I'm delaying a",
    "start": "1739760",
    "end": "1746320"
  },
  {
    "text": "little bit longer each time giving that remote system a more time to recover so if you're dealing with a transient",
    "start": "1746320",
    "end": "1752440"
  },
  {
    "text": "Network outage this is much more likely to work for you than the first",
    "start": "1752440",
    "end": "1760320"
  },
  {
    "text": "one and then finally I'm going to show a wrapped",
    "start": "1760320",
    "end": "1767679"
  },
  {
    "text": "request where there's a wait and retry wrapped by a fallback the remote system",
    "start": "1768320",
    "end": "1773679"
  },
  {
    "text": "this time is going to fail 100% of the time rather than working at the very last",
    "start": "1773679",
    "end": "1778799"
  },
  {
    "text": "request so in this case where's my mouse it failed oh I'm sorry I hit uh oh",
    "start": "1778799",
    "end": "1787440"
  },
  {
    "text": "H I apologize I sent I did the wrong",
    "start": "1787440",
    "end": "1792158"
  },
  {
    "text": "demo yes that says demo tree I'm sorry so this time all four requests will fail",
    "start": "1794120",
    "end": "1800760"
  },
  {
    "text": "so you'll see the four one failing where's my mouse it's again",
    "start": "1800760",
    "end": "1806320"
  },
  {
    "text": "doing the wait and retry so it takes a little bit longer so this fourth request also failed and my fallback that wrap",
    "start": "1806320",
    "end": "1814600"
  },
  {
    "text": "returned a default of zero which in this case was meaningful and it may not be meaningful in your examples or in your",
    "start": "1814600",
    "end": "1820799"
  },
  {
    "text": "cases so that is the basic usage of retry wait and retry and",
    "start": "1820799",
    "end": "1826320"
  },
  {
    "text": "fallback I am going to to try to switch back to my",
    "start": "1826320",
    "end": "1833840"
  },
  {
    "text": "PowerPoint oh it's on the wrong screen uh give me a sec I'm",
    "start": "1835320",
    "end": "1842518"
  },
  {
    "text": "sorry hey there we",
    "start": "1843000",
    "end": "1846559"
  },
  {
    "text": "go oh so the poly uh so that I'm kind of done",
    "start": "1848159",
    "end": "1853480"
  },
  {
    "text": "with the demos it's it's hard to show you enough code that makes sense it's a little bit easier to give you an example",
    "start": "1853480",
    "end": "1859480"
  },
  {
    "text": "of how quickly it works or how slowly things the how difference between a retry and a wait and retry and then the",
    "start": "1859480",
    "end": "1865279"
  },
  {
    "text": "wraps I'm going to move on a little bit to what's called a poly registry so I'm",
    "start": "1865279",
    "end": "1870760"
  },
  {
    "text": "kind of in between the reactive strategies and the proactive strategies this Falls a little outside of both a",
    "start": "1870760",
    "end": "1878200"
  },
  {
    "text": "poly registry is pretty much a dictionary where you store policies you",
    "start": "1878200",
    "end": "1884960"
  },
  {
    "text": "can access them via a name or an index usually it's better to access them by a",
    "start": "1884960",
    "end": "1890080"
  },
  {
    "text": "name you can use the registry with dependency injection to pass it around",
    "start": "1890080",
    "end": "1895519"
  },
  {
    "text": "your application so if you're building a web API application it would make sense to pass the registry into your",
    "start": "1895519",
    "end": "1902360"
  },
  {
    "text": "controller in preet core 2.1 so this is a grouping of policies of course the",
    "start": "1902360",
    "end": "1910240"
  },
  {
    "text": "registry is as reusable as a policy but with the HCB client Factory",
    "start": "1910240",
    "end": "1916320"
  },
  {
    "text": "it's much more tightly integrated so uh if you can move to net core 2.1",
    "start": "1916320",
    "end": "1922799"
  },
  {
    "text": "some of these things will be a little bit easier so how it looks is like a little box of policies and you can have",
    "start": "1922799",
    "end": "1931159"
  },
  {
    "text": "as many as you want either individual policies or wraps of",
    "start": "1931159",
    "end": "1938240"
  },
  {
    "text": "policies all right HB client Factory Has anyone used hdb climate",
    "start": "1938960",
    "end": "1944200"
  },
  {
    "start": "1940000",
    "end": "1940000"
  },
  {
    "text": "Factory yet wa great Steve has used it",
    "start": "1944200",
    "end": "1949480"
  },
  {
    "text": "the this is something that's come out with net core 2.1 there's been a lot of",
    "start": "1949480",
    "end": "1954639"
  },
  {
    "text": "talk about some of the problems with a traditional HTV client over the years I'm only going to touch on them because",
    "start": "1954639",
    "end": "1960159"
  },
  {
    "text": "Steve Gordon's going to have a a talk after this with much more detail the main problems were around how long a HP",
    "start": "1960159",
    "end": "1968480"
  },
  {
    "text": "client could live you could keep one around for a very long time which meant that it would",
    "start": "1968480",
    "end": "1975559"
  },
  {
    "text": "never update IP addresses of remote hosts or you can keep it around for a very short time which meant you could",
    "start": "1975559",
    "end": "1981200"
  },
  {
    "text": "face socket exhaustion so the so the HB client",
    "start": "1981200",
    "end": "1986240"
  },
  {
    "text": "Factory has solved the Lifetime by I think it's a 2 minutes life",
    "start": "1986240",
    "end": "1993200"
  },
  {
    "text": "Steve about two two minutes thank you so HB client will live two minutes before it's recycled out of the pool if it's",
    "start": "1993200",
    "end": "1999760"
  },
  {
    "text": "not in use and it also will renew your DNS entry and HB client is very tightly",
    "start": "1999760",
    "end": "2006679"
  },
  {
    "text": "integrated with poly so as as. net core 2.1 was coming out there was a lot of work going on between Dylan and the the",
    "start": "2006679",
    "end": "2014320"
  },
  {
    "text": "Microsoft team what it looks like if you were to",
    "start": "2014320",
    "end": "2019799"
  },
  {
    "start": "2017000",
    "end": "2017000"
  },
  {
    "text": "look at the hctp client factory with a single policy is you have your services collection as you usually do your HCB",
    "start": "2019799",
    "end": "2026880"
  },
  {
    "text": "client Factory goes into it like anything else that you would use for dependency injection and then you would",
    "start": "2026880",
    "end": "2032480"
  },
  {
    "text": "have potentially a single policy but",
    "start": "2032480",
    "end": "2038480"
  },
  {
    "start": "2038000",
    "end": "2038000"
  },
  {
    "text": "you can also use it with a poly registry so you could have 20",
    "start": "2038480",
    "end": "2045399"
  },
  {
    "text": "policies and then you choose between those policies with a little piece of",
    "start": "2045399",
    "end": "2050919"
  },
  {
    "text": "code and your you can choose between them based on maybe the verb the URL or",
    "start": "2050919",
    "end": "2056560"
  },
  {
    "text": "some other criteria so if you know that it's a get retry and wait and retry are probably okay but if it's a post it",
    "start": "2056560",
    "end": "2063878"
  },
  {
    "text": "might not be so good to retry it how how the code looks is a little",
    "start": "2063879",
    "end": "2070240"
  },
  {
    "text": "bit involved so this is a traditional services collection where you'd set it up uh you have to have a registry",
    "start": "2070240",
    "end": "2077878"
  },
  {
    "text": "defined then this is the code to set up the HP client Factory and what I'm",
    "start": "2077879",
    "end": "2084118"
  },
  {
    "text": "adding here is I'm telling it what method I'm going to use to perform the",
    "start": "2084119",
    "end": "2089720"
  },
  {
    "text": "selection when a request the cars it hits your client Factory creates",
    "start": "2089720",
    "end": "2095358"
  },
  {
    "text": "a client then looks at this and determines which",
    "start": "2095359",
    "end": "2102359"
  },
  {
    "text": "policy discriminating based on the verb so if it's a get I'm going to use a retry if it's a post I'm going to use a",
    "start": "2103040",
    "end": "2109400"
  },
  {
    "text": "noop I don't want to do a retry I don't want to do anything else and if it's anything else I would use a wait and",
    "start": "2109400",
    "end": "2114760"
  },
  {
    "text": "retry but as I said you could check the HTP request message for the URL or for",
    "start": "2114760",
    "end": "2120560"
  },
  {
    "text": "some other criteria and pick a policy out of your registry based on pretty",
    "start": "2120560",
    "end": "2125839"
  },
  {
    "text": "much any type of criteria you wish and here is a plug for",
    "start": "2125839",
    "end": "2132040"
  },
  {
    "text": "Steve so right after this room for a lot more information on HTTP client",
    "start": "2132040",
    "end": "2138280"
  },
  {
    "text": "Factory another thing I didn't cover at one of the presentations was testing and a lot of people like their testing uh",
    "start": "2138280",
    "end": "2146960"
  },
  {
    "start": "2141000",
    "end": "2141000"
  },
  {
    "text": "two things you generally want to test how your code behaves if po were not in place and you",
    "start": "2146960",
    "end": "2153720"
  },
  {
    "text": "do that with a noop policy so you would inject a noop instead of a retry for example or how your code would",
    "start": "2153720",
    "end": "2160520"
  },
  {
    "text": "behave if Polly were to throw an exception like a broken circuit or a timeout rejected and you would do that",
    "start": "2160520",
    "end": "2166319"
  },
  {
    "text": "with mocking there are some examples in my blog on how to do that all right I'm going to come back to",
    "start": "2166319",
    "end": "2172760"
  },
  {
    "text": "my kind of story so this is where we were we're getting our robust requests",
    "start": "2172760",
    "end": "2177880"
  },
  {
    "text": "our guaranteed responses and we're able to cut our circuits to remote systems so that's all of the reactive",
    "start": "2177880",
    "end": "2185680"
  },
  {
    "text": "policies let's move on on to the proactive so proactive monitor your",
    "start": "2185680",
    "end": "2193599"
  },
  {
    "start": "2186000",
    "end": "2186000"
  },
  {
    "text": "application as it is running they're they're they're looking at um",
    "start": "2193599",
    "end": "2200800"
  },
  {
    "text": "sorry ex me they're looking to stabilize your application or potentially allow it to fail more gracefully and as I said",
    "start": "2200800",
    "end": "2206640"
  },
  {
    "text": "earlier failing gracefully is it's up to you to decide what that means the first of these is the",
    "start": "2206640",
    "end": "2214319"
  },
  {
    "text": "timeout so this lets you choose when a in the case of htdp client when the",
    "start": "2214319",
    "end": "2220520"
  },
  {
    "text": "request should end as opposed to the default that you get out of the box from Microsoft so the default from Microsoft",
    "start": "2220520",
    "end": "2227440"
  },
  {
    "text": "is I believe 100 seconds waiting around that long is going to be bad for you and",
    "start": "2227440",
    "end": "2232680"
  },
  {
    "text": "bad for everyone else caching again I said earlier it allows you to store that response that",
    "start": "2232680",
    "end": "2239280"
  },
  {
    "text": "you've got and it could either be the full request or just the business data",
    "start": "2239280",
    "end": "2244440"
  },
  {
    "text": "um if you're storing the full request that's fine but it might be a little bit too much yes sorry can you use the",
    "start": "2244440",
    "end": "2251880"
  },
  {
    "text": "timeout with non HTTP code yeah but it would you know it has to be something that would make sense yeah yeah all",
    "start": "2251880",
    "end": "2258079"
  },
  {
    "text": "these policies can be used with anything so sorry if someone didn't hear me gentleman was asking if you can use a",
    "start": "2258079",
    "end": "2264280"
  },
  {
    "text": "timeout with non HTTP and yes you can use it with an Entity framework request a DNS an Azure request pretty much",
    "start": "2264280",
    "end": "2271240"
  },
  {
    "text": "anything that it would make sense to use it with and then finally the on the",
    "start": "2271240",
    "end": "2276359"
  },
  {
    "text": "proactive side we have the bulkhead isolation that prevents your application",
    "start": "2276359",
    "end": "2283480"
  },
  {
    "text": "from going completely down if some part of it is",
    "start": "2283480",
    "end": "2289160"
  },
  {
    "text": "struggling all right cover them in a tiny bit of detail so if you make a request and it goes unanswered it will",
    "start": "2289160",
    "end": "2296560"
  },
  {
    "start": "2291000",
    "end": "2291000"
  },
  {
    "text": "eventually time out but Microsoft like I said determined 100 seconds other things",
    "start": "2296560",
    "end": "2302200"
  },
  {
    "text": "maybe uh Entity framework I don't know what the timeout is but it's probably not very fast but you know that if your",
    "start": "2302200",
    "end": "2308240"
  },
  {
    "text": "quest isn't back in half a second 2 seconds it's probably dead so you",
    "start": "2308240",
    "end": "2313880"
  },
  {
    "text": "shouldn't wait around you shouldn't hold on to the thread you shouldn't hold on to the memory you shouldn't hold on to the socket those are all expensive",
    "start": "2313880",
    "end": "2321680"
  },
  {
    "text": "resources that you're going to be holding on to so that I menion so the poly timeout",
    "start": "2321680",
    "end": "2328760"
  },
  {
    "text": "allows you to specify a timeout for any given request it can be used inside a wrap as",
    "start": "2328760",
    "end": "2336000"
  },
  {
    "text": "well if you're if you specify the timeout in",
    "start": "2336000",
    "end": "2341280"
  },
  {
    "text": "this case of oh I'm sorry of 1 second and you don't get a response in that one",
    "start": "2341280",
    "end": "2348079"
  },
  {
    "text": "second the policy will throw a timeout rejected exception which will then pass",
    "start": "2348079",
    "end": "2353640"
  },
  {
    "text": "on to whatever called it in the testing frame sorry for the testing that would be one of the",
    "start": "2353640",
    "end": "2359400"
  },
  {
    "text": "examples where you'd be able to mock out um a time of rejected exception for your",
    "start": "2359400",
    "end": "2364800"
  },
  {
    "text": "unit tests I believe that is about all there is to",
    "start": "2364800",
    "end": "2370040"
  },
  {
    "text": "the timeouts the timeouts are very very simple one parameter but you know you have to think about what makes sense as",
    "start": "2370040",
    "end": "2376680"
  },
  {
    "text": "that parameter how long it should be so there our application is failing excuse me is becoming a little bit more",
    "start": "2376680",
    "end": "2383240"
  },
  {
    "text": "robust so caching is a little bit tricky",
    "start": "2383240",
    "end": "2388839"
  },
  {
    "start": "2384000",
    "end": "2384000"
  },
  {
    "text": "um it was pointed out to me a little while ago about catching a full response you can have problems if you try to",
    "start": "2388839",
    "end": "2394480"
  },
  {
    "text": "reread a stream that's something you need to consider if you are going to reread a stream you will have to reset",
    "start": "2394480",
    "end": "2400760"
  },
  {
    "text": "your pointer but I've found that in most cases you'll get back uh a fresh stream with a starting point you can also as I",
    "start": "2400760",
    "end": "2408440"
  },
  {
    "text": "said cach just the business data so it's very it's hard for me to give advice",
    "start": "2408440",
    "end": "2414200"
  },
  {
    "text": "because it's very specific to your own scenario um you can use a cash policy in",
    "start": "2414200",
    "end": "2420079"
  },
  {
    "text": "multiple places so you could have one part of your code that makes the request and then 10 other parts that potentially",
    "start": "2420079",
    "end": "2426800"
  },
  {
    "text": "you make a similar request and they can fetch it from the cach Instead The cach Works off of a traditional Microsoft",
    "start": "2426800",
    "end": "2433839"
  },
  {
    "text": "cash or a distributed cach you can use either and it has usual uh things like",
    "start": "2433839",
    "end": "2439960"
  },
  {
    "text": "an onc get an onc Miss put error and so",
    "start": "2439960",
    "end": "2445760"
  },
  {
    "text": "on find oh yeah so in your code the cach is a",
    "start": "2448359",
    "end": "2454560"
  },
  {
    "text": "little bit more complicated to set up and I think they change some stuff recently so it still feels a little bit",
    "start": "2454560",
    "end": "2463760"
  },
  {
    "text": "tricky uh inside your configure Services you pass in your service collection you",
    "start": "2463760",
    "end": "2469079"
  },
  {
    "text": "add your memory cache then you add your anying provider with a memory cache",
    "start": "2469079",
    "end": "2476079"
  },
  {
    "text": "provider in this place you could have a distributed memory cache if you're using redis or something of that",
    "start": "2476079",
    "end": "2483359"
  },
  {
    "text": "nature then you're specifying your policy for your cash and how long",
    "start": "2484359",
    "end": "2490119"
  },
  {
    "text": "it should live so I'm saying I'm using the incash memory I Sor in memory cache I",
    "start": "2490119",
    "end": "2497359"
  },
  {
    "text": "apologize you have to have this this context this to me this feels a tiny bit",
    "start": "2497359",
    "end": "2503280"
  },
  {
    "text": "awkward but this is how it works the context is the unique way of",
    "start": "2503280",
    "end": "2508480"
  },
  {
    "text": "identifying the entry that where where the cached value is going to go so if",
    "start": "2508480",
    "end": "2514680"
  },
  {
    "text": "you're making requests to a remote system you need to uniquely identify each of those responses so in this case",
    "start": "2514680",
    "end": "2521400"
  },
  {
    "text": "to get inventory by ID I'll include the ID if I was requesting a catalog I would have to set up another context to do",
    "start": "2521400",
    "end": "2531200"
  },
  {
    "text": "that then you would use so cash policy I think executes only this way I don't",
    "start": "2531200",
    "end": "2538160"
  },
  {
    "text": "think it works as well with the htb client Factory be yeah I'm right it was",
    "start": "2538160",
    "end": "2543400"
  },
  {
    "text": "it it's easier to use it this way than to try and use it transparently so you'll notice there's a difference here I'm doing the",
    "start": "2543400",
    "end": "2548960"
  },
  {
    "text": "cash policy execute async and then the HB client the reason is I need this",
    "start": "2548960",
    "end": "2556599"
  },
  {
    "text": "context here passed in here at the time of execution so to me this one feels",
    "start": "2556599",
    "end": "2562960"
  },
  {
    "text": "like the most difficult or awkward to use um I have a feeling that they're",
    "start": "2562960",
    "end": "2568599"
  },
  {
    "text": "working on it but it's very useful but a tiny little",
    "start": "2568599",
    "end": "2573920"
  },
  {
    "text": "bit more difficult sry one",
    "start": "2573920",
    "end": "2580079"
  },
  {
    "text": "sec all right so that is we've reduced our load so the big thing as well we're reducing the load is you're now not",
    "start": "2580760",
    "end": "2587119"
  },
  {
    "text": "calling that remote system you've stored your value locally you're able to respond far faster and maybe more",
    "start": "2587119",
    "end": "2593680"
  },
  {
    "text": "reliably and the system that's calling you will get a valid response now you have to of course figure out how long",
    "start": "2593680",
    "end": "2600359"
  },
  {
    "text": "you should store that value for them and again that's not something that's necessarily easy to determine and if if",
    "start": "2600359",
    "end": "2607119"
  },
  {
    "text": "you're using a distributed cach you have to deal with the vagaries of",
    "start": "2607119",
    "end": "2612960"
  },
  {
    "text": "that this is what could happen to your application if you can't handle all the",
    "start": "2615920",
    "end": "2621520"
  },
  {
    "text": "incoming requests has anyone you know has anyone ever had an application that",
    "start": "2621520",
    "end": "2626920"
  },
  {
    "text": "its own code was fine but was overloaded maybe due to some Downstream anyone one one two three four",
    "start": "2626920",
    "end": "2633800"
  },
  {
    "text": "okay we've had a few so if you're getting if you're being bombarded with",
    "start": "2633800",
    "end": "2639599"
  },
  {
    "text": "incoming requests your memory will get used up all your threads will potentially get used up all your",
    "start": "2639599",
    "end": "2645280"
  },
  {
    "text": "outgoing sockets will get used up and this could all be caused by maybe",
    "start": "2645280",
    "end": "2651680"
  },
  {
    "text": "one small part of your application so this one part that is being overloaded it's beginning to fail it's taking up",
    "start": "2651680",
    "end": "2658079"
  },
  {
    "text": "all the memory it's taking up all the sockets and your whole application goes down and this is where the bulkhead",
    "start": "2658079",
    "end": "2665319"
  },
  {
    "start": "2662000",
    "end": "2662000"
  },
  {
    "text": "isolation policy comes in so the term comes from the nautical World in larger ships you have bulkheads",
    "start": "2665319",
    "end": "2674319"
  },
  {
    "text": "which section off areas so if one part is breached water will flood in but it",
    "start": "2674319",
    "end": "2679880"
  },
  {
    "text": "hopefully won't be able to get to another part so you could put a hole in the side of a ship uh and hopefully",
    "start": "2679880",
    "end": "2686720"
  },
  {
    "text": "don't sink if you were to kind of consider how",
    "start": "2686720",
    "end": "2692280"
  },
  {
    "text": "this looks um on an example you You' have your local system making requests",
    "start": "2692280",
    "end": "2699599"
  },
  {
    "text": "to some remote system so again think of the upstream and downstream I'd make one",
    "start": "2699599",
    "end": "2705240"
  },
  {
    "text": "request I don't get a response I make another request I get one response but now I",
    "start": "2705240",
    "end": "2712160"
  },
  {
    "text": "still have one outstanding request I might make a third request and a fourth",
    "start": "2712160",
    "end": "2717640"
  },
  {
    "text": "request and I get back now only two so I've got two outstanding",
    "start": "2717640",
    "end": "2724000"
  },
  {
    "text": "requests now I've got three outstanding requests so I'm holding the memory the",
    "start": "2725240",
    "end": "2730520"
  },
  {
    "text": "threads the sockets and so on and eventually that local system will go",
    "start": "2730520",
    "end": "2736079"
  },
  {
    "text": "down there's it's almost let's say",
    "start": "2736079",
    "end": "2741480"
  },
  {
    "text": "unavoidable what how the bulkhead isolation works is your application I'm calling it the",
    "start": "2741480",
    "end": "2748280"
  },
  {
    "start": "2744000",
    "end": "2744000"
  },
  {
    "text": "catalog service the bulkhead isolation has two features an execution slot and a q slot",
    "start": "2748280",
    "end": "2755440"
  },
  {
    "text": "execution slots are they sound where it will execute requests and you would",
    "start": "2755440",
    "end": "2760559"
  },
  {
    "text": "specify some fixed number of execution slots when they're",
    "start": "2760559",
    "end": "2765599"
  },
  {
    "text": "full any other request that you want to make will go into a q slot so let's say",
    "start": "2765599",
    "end": "2771599"
  },
  {
    "text": "you get some incoming requests the first three go into the",
    "start": "2771599",
    "end": "2777119"
  },
  {
    "text": "execution slot so they they're executing right now all is good your application",
    "start": "2777119",
    "end": "2782359"
  },
  {
    "text": "is still fine and stable you get a bunch more requests",
    "start": "2782359",
    "end": "2788920"
  },
  {
    "text": "so let's say you're still executing the first three you've taken six more that are sitting in a queue they're not",
    "start": "2790480",
    "end": "2795960"
  },
  {
    "text": "executing so they're holding on to a little bit of memory you get one more request there's nowhere for it to go",
    "start": "2795960",
    "end": "2802400"
  },
  {
    "text": "execution is full Q is full what'll happen is your your code",
    "start": "2802400",
    "end": "2808760"
  },
  {
    "text": "will return or excuse me it will return a failure immediately to the caller so",
    "start": "2808760",
    "end": "2815040"
  },
  {
    "text": "they're not waiting around they've been told sorry I cannot handle your request you should try",
    "start": "2815040",
    "end": "2822400"
  },
  {
    "text": "later so now what you're doing is you're shedding load you're saying I'm too",
    "start": "2822400",
    "end": "2828160"
  },
  {
    "text": "busy talk to me some other time but you're saying it very very quickly so again from the downstream perspective",
    "start": "2828160",
    "end": "2834359"
  },
  {
    "text": "you fail quickly they're not hoping for a response that they're not going to get and your Upstream is also potentially",
    "start": "2834359",
    "end": "2841240"
  },
  {
    "text": "not being overloaded because you're only executing up to three requests at a time",
    "start": "2841240",
    "end": "2848838"
  },
  {
    "text": "when one of your execution slots completes you got your response back",
    "start": "2850520",
    "end": "2855920"
  },
  {
    "text": "you're happy with it it didn't fail you're not retrying a request will move from your",
    "start": "2855920",
    "end": "2861960"
  },
  {
    "text": "queue into your execution slot I showed this slide to my wife at some point and",
    "start": "2861960",
    "end": "2867040"
  },
  {
    "text": "uh she's somewhat Technical and she said to me cues don't work like that you can't go from some random place to some",
    "start": "2867040",
    "end": "2873000"
  },
  {
    "text": "other random place but fine but I didn't want to change at this slide took",
    "start": "2873000",
    "end": "2879520"
  },
  {
    "text": "hours then you get another incoming request and now you have a key slot",
    "start": "2880920",
    "end": "2886240"
  },
  {
    "text": "available again and you're happy at this point again you're full any further",
    "start": "2886240",
    "end": "2892599"
  },
  {
    "text": "request would cause a fast failure and but you would not become",
    "start": "2892599",
    "end": "2898520"
  },
  {
    "text": "overloaded you're holding on to only three ongoing request you're holding on a little bit of memory three sockets",
    "start": "2898520",
    "end": "2904319"
  },
  {
    "text": "three threads your application will remain stable now that's for you know let's say a",
    "start": "2904319",
    "end": "2910240"
  },
  {
    "text": "single small part of an application I'll show you what it might look like on a bigger application in",
    "start": "2910240",
    "end": "2915640"
  },
  {
    "text": "this SEC but first a quick look at the code and it's very very simple this is",
    "start": "2915640",
    "end": "2922280"
  },
  {
    "text": "my bulkhead isolation policy so here I'm showing the IIA sync policy I could have specified bulk async I'm saying three",
    "start": "2922280",
    "end": "2929400"
  },
  {
    "text": "execution slots and six Q slots and then execute some arbitary code if I want to",
    "start": "2929400",
    "end": "2936799"
  },
  {
    "text": "to when I get a rejected so I mentioned I'm going to show you what it might look like for",
    "start": "2936799",
    "end": "2943720"
  },
  {
    "start": "2942000",
    "end": "2942000"
  },
  {
    "text": "let's say a full much much bigger application so let's pretend you've got",
    "start": "2943720",
    "end": "2950160"
  },
  {
    "text": "100% of resources available you know 100 of whatever is available I'm going to set it at 100 you might have I don't",
    "start": "2950160",
    "end": "2957480"
  },
  {
    "text": "know 10 parts of your what have I got you might have 12 parts of your",
    "start": "2957480",
    "end": "2962520"
  },
  {
    "text": "application that are going to accept requests and try to hold on to Res sources and not let the whole",
    "start": "2962520",
    "end": "2968640"
  },
  {
    "text": "application come down so it may look something like this you've got multiple",
    "start": "2968640",
    "end": "2974400"
  },
  {
    "text": "places that are building up bulkheads taking incoming requests cordoning off",
    "start": "2974400",
    "end": "2980440"
  },
  {
    "text": "memory threads sockets and let's say you won't go any",
    "start": "2980440",
    "end": "2987200"
  },
  {
    "text": "further so at this point your application hopefully will not go down",
    "start": "2987200",
    "end": "2994280"
  },
  {
    "text": "now you can have as many bulkheads as you wanted in application this is a pretty Advanced uh policy I haven't used",
    "start": "2994280",
    "end": "3001599"
  },
  {
    "text": "it and I think has anyone in the room used bulkhead nope so it's it is very",
    "start": "3001599",
    "end": "3008119"
  },
  {
    "text": "powerful but it's I I don't see it in use as much let me see I have anything else on",
    "start": "3008119",
    "end": "3014799"
  },
  {
    "text": "that nope all right so that was the last",
    "start": "3014799",
    "end": "3020480"
  },
  {
    "text": "of the things we needed for our application so it has become a lot more",
    "start": "3020480",
    "end": "3026920"
  },
  {
    "text": "fall tolerance you have your robust oh sorry did ask question oh I'm sorry so",
    "start": "3026920",
    "end": "3033440"
  },
  {
    "text": "you have your robust request with your retries you have your fallbacks for guaranteed responses your circuit",
    "start": "3033440",
    "end": "3039160"
  },
  {
    "text": "breaker if you want to cut your connection time outs to fail more quickly caching to reduce load and then",
    "start": "3039160",
    "end": "3047240"
  },
  {
    "text": "finally bulkhead isolation to protect resources and prevent your whole application from going",
    "start": "3047240",
    "end": "3054200"
  },
  {
    "text": "down what is coming soon for poly are custom policies so you won't be limited",
    "start": "3054440",
    "end": "3063040"
  },
  {
    "start": "3055000",
    "end": "3055000"
  },
  {
    "text": "to the the ones that come out of the box you'll be able to write your own I don't",
    "start": "3063040",
    "end": "3068520"
  },
  {
    "text": "know how they're doing this because the policies that they have at the moment have been heavily heavily overloaded and",
    "start": "3068520",
    "end": "3075520"
  },
  {
    "text": "that's been one of the difficulties they've had with advancing the project so when you can build custom policies",
    "start": "3075520",
    "end": "3081920"
  },
  {
    "text": "they must have come up with something much much uh simpler",
    "start": "3081920",
    "end": "3087920"
  },
  {
    "text": "something else they're going to bring in is something kind of like the chaos monkey so you've probably heard of",
    "start": "3087920",
    "end": "3093280"
  },
  {
    "text": "Netflix killing Services here and there so this was something that for a resilience framework it feels",
    "start": "3093280",
    "end": "3101160"
  },
  {
    "text": "a tiny bit strange to me but they're now going to have policies that allow you to inject failures or problems or delays",
    "start": "3101160",
    "end": "3108960"
  },
  {
    "text": "into requests and you can do this for unit tests or you can do it in",
    "start": "3108960",
    "end": "3114119"
  },
  {
    "text": "production systems if you wanted to and they have a variety of them",
    "start": "3114119",
    "end": "3119240"
  },
  {
    "text": "available another big thing that they have been working on for quite some time",
    "start": "3119240",
    "end": "3124839"
  },
  {
    "text": "uh at least a year is telemetry so it's hard at the moment to figure out how",
    "start": "3124839",
    "end": "3132040"
  },
  {
    "text": "your application is behaving with regard to poly your for example a retry could",
    "start": "3132040",
    "end": "3137480"
  },
  {
    "text": "be so good at hiding a problem that you don't even know that you're making three",
    "start": "3137480",
    "end": "3142640"
  },
  {
    "text": "requests to a remote system to get back a single response you could do it by hand with the delegate the on retry",
    "start": "3142640",
    "end": "3149480"
  },
  {
    "text": "delegate where you could do some manual logging out to to some uh store but I",
    "start": "3149480",
    "end": "3155839"
  },
  {
    "text": "have I I I have a friend who was using poly and they were using it and as I said it was using it was working so well",
    "start": "3155839",
    "end": "3161880"
  },
  {
    "text": "they didn't even know that the remote system was having problems but that's not good because you're now hiding a failure rather than finding out about it",
    "start": "3161880",
    "end": "3168400"
  },
  {
    "text": "so the Telemetry is coming and the idea will be that it's transparent and then it will feed into any of the popular",
    "start": "3168400",
    "end": "3174880"
  },
  {
    "text": "dashboards which I can't can't remember the name of at the moment but it's it's going to be one of those kind of generic",
    "start": "3174880",
    "end": "3180559"
  },
  {
    "text": "ones that will feed anything that's suitable the other big one that people",
    "start": "3180559",
    "end": "3185680"
  },
  {
    "text": "have been asking for is a distributed circuit breaker and I mentioned that a little while ago the idea of you've got",
    "start": "3185680",
    "end": "3192880"
  },
  {
    "text": "100 containers communicating with some dodgy remote system you're getting",
    "start": "3192880",
    "end": "3198920"
  },
  {
    "text": "failures across the 100 containers periodically but not enough to trigger a circuit breaker on any of them but if",
    "start": "3198920",
    "end": "3205720"
  },
  {
    "text": "you were to agregate all of those failures it would but it's not the",
    "start": "3205720",
    "end": "3211119"
  },
  {
    "text": "easiest thing to come up with a distributed count that's synchronized and updatable by a hundred things at the",
    "start": "3211119",
    "end": "3217520"
  },
  {
    "text": "same time that is pretty much what's coming",
    "start": "3217520",
    "end": "3222680"
  },
  {
    "start": "3222000",
    "end": "3222000"
  },
  {
    "text": "if you want some more information uh you can check out my plural site course it's published a year",
    "start": "3222680",
    "end": "3230839"
  },
  {
    "text": "ago it covers primarily do it covers Prim it does cover net core the mo most",
    "start": "3230839",
    "end": "3236000"
  },
  {
    "text": "of it is uh suitable for net core pre 2.1 and then I added a module on hdb",
    "start": "3236000",
    "end": "3241880"
  },
  {
    "text": "client Factory for net core 2.1 I have a lot of",
    "start": "3241880",
    "end": "3248119"
  },
  {
    "text": "examples of uh different features of poly um how to use it and it's all code",
    "start": "3248119",
    "end": "3253960"
  },
  {
    "text": "so one of the things with my blog is there's always a zip file with a full solution you can download it open it run",
    "start": "3253960",
    "end": "3261400"
  },
  {
    "text": "it it will work I'm almost certain so one of the things that",
    "start": "3261400",
    "end": "3266559"
  },
  {
    "text": "annoyed me when I was looking at blogs with Snippets of code without using statements without new get packages so",
    "start": "3266559",
    "end": "3273760"
  },
  {
    "text": "that's why I did it that way there's a very active slack Channel I'm on it Steve's on it Dylan's on it there's a",
    "start": "3273760",
    "end": "3280319"
  },
  {
    "text": "getting help Channel there's a sorry getting started the general Channel there's probably one on distributed",
    "start": "3280319",
    "end": "3285359"
  },
  {
    "text": "circuit breaker and I bet you there's I haven't been on it in a little while but there's probably some ones on the new features particularly the chaos",
    "start": "3285359",
    "end": "3293160"
  },
  {
    "text": "engineering there is the open uh depository and Dylan is always looking",
    "start": "3293160",
    "end": "3298440"
  },
  {
    "text": "for contributions uh he's based here in the UK very approachable very nice guy um I",
    "start": "3298440",
    "end": "3305359"
  },
  {
    "text": "think he's also starting a side uh repository for contributions to",
    "start": "3305359",
    "end": "3311280"
  },
  {
    "text": "poly and they also have their own",
    "start": "3311280",
    "end": "3316760"
  },
  {
    "text": "blog and that folks is my presentation thank you very",
    "start": "3320440",
    "end": "3326160"
  },
  {
    "text": "much",
    "start": "3326160",
    "end": "3328318"
  },
  {
    "text": "much I'm about five minutes early so if anyone wants to ask me anything I'm happy to answer",
    "start": "3331240",
    "end": "3338599"
  }
]