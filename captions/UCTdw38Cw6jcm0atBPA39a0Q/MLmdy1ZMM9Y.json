[
  {
    "text": "good morning everyone I am just ridiculously excited to be here",
    "start": "7340",
    "end": "13139"
  },
  {
    "text": "um and by here I mean sadly here in California uh I I'm coming to you from",
    "start": "13139",
    "end": "18840"
  },
  {
    "text": "the other side of the planet I I think at this point uh uh but for folks who",
    "start": "18840",
    "end": "24900"
  },
  {
    "text": "don't know me I'm Chandler crew that work at Google uh I'm one of our technical leads working on programming languages I spent a lot of time working",
    "start": "24900",
    "end": "31500"
  },
  {
    "text": "on C plus plus and compilers and lvm and optimization uh and and I'm here to talk a little bit",
    "start": "31500",
    "end": "38100"
  },
  {
    "text": "about C plus plus and maybe what comes next uh versus plus but I just have to start off because I I'm actually really",
    "start": "38100",
    "end": "44040"
  },
  {
    "text": "delighted to be able to be here at all I I sadly wasn't able to travel uh uh but",
    "start": "44040",
    "end": "49559"
  },
  {
    "text": "talking to the organizers of NDC Tech Town they're they're just amazing they were able to uh put together a virtual",
    "start": "49559",
    "end": "56640"
  },
  {
    "text": "presentation and so I'm able to come to you from from the other side of the planet as maybe the uh easiest 9 A.M",
    "start": "56640",
    "end": "63660"
  },
  {
    "text": "talk I've ever had to wake up for uh because it's midnight here um but that actually means you get me",
    "start": "63660",
    "end": "69180"
  },
  {
    "text": "kind of in my Prime I'm kind of a night owl and so this this works well for me in the end uh",
    "start": "69180",
    "end": "75960"
  },
  {
    "text": "um I really wish I could be there though uh even if it were in the morning I really missed the energy of an in-person",
    "start": "75960",
    "end": "81119"
  },
  {
    "text": "conference so I'm going to try and I'm going to try and imagine that I'm there that we've got the whole big audience",
    "start": "81119",
    "end": "86159"
  },
  {
    "text": "thing going uh and and I really appreciate you guys being here so that I can talk to you because this is a talk",
    "start": "86159",
    "end": "92400"
  },
  {
    "text": "that I did give at supersports North but that's that's not in Europe and I I was",
    "start": "92400",
    "end": "98100"
  },
  {
    "text": "really sad a lot of people I know couldn't make it and it's something that I really really want to talk with",
    "start": "98100",
    "end": "103920"
  },
  {
    "text": "everyone in the C plus Community about and and I was just so excited to have the opportunity to kind of",
    "start": "103920",
    "end": "109500"
  },
  {
    "text": "come to this particular audience get to share it with this audience and get to kind of get more people to to hear what",
    "start": "109500",
    "end": "115799"
  },
  {
    "text": "we're talking about hear what their feedback is and and start a real discussion with you all and so I you",
    "start": "115799",
    "end": "121560"
  },
  {
    "text": "know thank you to all of the audience and thank you to the organizers for making this happen I'm I wouldn't have imagined this was possible",
    "start": "121560",
    "end": "127619"
  },
  {
    "text": "um I also am going to try and go fairly quickly through the talk uh because I want to give as much time as I can for",
    "start": "127619",
    "end": "134700"
  },
  {
    "text": "for kind of q a uh they have a microphone I can hear you it should be pretty easy to actually have a proper q",
    "start": "134700",
    "end": "141300"
  },
  {
    "text": "a even with the virtual talk um and so but apologies if I'm going a",
    "start": "141300",
    "end": "146940"
  },
  {
    "text": "little bit fast if you do need to like interrupt me you know uh get a question and flag down the person with the",
    "start": "146940",
    "end": "152700"
  },
  {
    "text": "microphone I'm happy to pause and try and clarify anything but unless it's a clarification let's hold the questions",
    "start": "152700",
    "end": "158220"
  },
  {
    "text": "for the end you know write it down you know text it to yourself or something and we'll we'll grab it at the end",
    "start": "158220",
    "end": "165300"
  },
  {
    "text": "and so with that let's let's just dive in uh Plus",
    "start": "165300",
    "end": "171900"
  },
  {
    "text": "what comes next and and the answer to this is a little surprising",
    "start": "171900",
    "end": "177900"
  },
  {
    "text": "I don't know what comes next",
    "start": "177900",
    "end": "182299"
  },
  {
    "text": "uh I really don't this is this is actually the answer uh yeah I hope you weren't expecting a different talk I",
    "start": "183060",
    "end": "188519"
  },
  {
    "text": "don't actually have an answer at the end of The Talk but I think this is a really important question that we need to answer",
    "start": "188519",
    "end": "194459"
  },
  {
    "text": "uh and so I want to start digging into this question a little bit and first we need to understand what it means for a",
    "start": "194459",
    "end": "200819"
  },
  {
    "text": "language to come next let's let's look at C going into C plus right C plus plus",
    "start": "200819",
    "end": "206040"
  },
  {
    "text": "came after C added a tremendous amount of functionality there are other examples we can look at",
    "start": "206040",
    "end": "212459"
  },
  {
    "text": "typescript which came after JavaScript we can look at Swift came after Objective C kotlin came after Java",
    "start": "212459",
    "end": "220739"
  },
  {
    "text": "but when we look at C plus plus there's a real blank here there is a",
    "start": "220739",
    "end": "225840"
  },
  {
    "text": "good there isn't this good language that I feel like comes naturally after C plus plus and I think we need to really",
    "start": "225840",
    "end": "232500"
  },
  {
    "text": "figure out what might fit into this uh I don't think we're at the end of that journey I don't think we've got an",
    "start": "232500",
    "end": "238379"
  },
  {
    "text": "answer that we can plug in here so where do we begin answering this question if I",
    "start": "238379",
    "end": "243599"
  },
  {
    "text": "don't know yet where do we start well I always want to start with the goals right I want to start with what problem",
    "start": "243599",
    "end": "248940"
  },
  {
    "text": "I'm trying to solve so what are our goals for C plus plus so what problem what what programming or software",
    "start": "248940",
    "end": "254640"
  },
  {
    "text": "development problem do we use C plus plus to solve",
    "start": "254640",
    "end": "260220"
  },
  {
    "text": "Titus and myself Paris Winters and I I gave a long talk really digging into",
    "start": "260220",
    "end": "265680"
  },
  {
    "text": "this uh two years ago at cppcon where we really tried to talk about what is C plus plus right what problems do we want",
    "start": "265680",
    "end": "272040"
  },
  {
    "text": "it to solve uh have fun watching the talk if you want it's a super fun talk we had lots of fun uh making it coming",
    "start": "272040",
    "end": "278820"
  },
  {
    "text": "up with different ways to get at get at this idea of what is c plus we also wrote a paper uh as part of the",
    "start": "278820",
    "end": "285540"
  },
  {
    "text": "committee process it really laid out what our goals were for C plus plus right we want performance critical",
    "start": "285540",
    "end": "291660"
  },
  {
    "text": "software we need that software in the language it's written in to be able to evolve we need our code to be easy to",
    "start": "291660",
    "end": "298199"
  },
  {
    "text": "read understand to easy to write we want practical safety and testing we need",
    "start": "298199",
    "end": "304860"
  },
  {
    "text": "fast and scalable development processes and platforms we need we need to be able to support modern operating systems",
    "start": "304860",
    "end": "311460"
  },
  {
    "text": "Hardware architectures environments right this is this is what we want out of C plus",
    "start": "311460",
    "end": "317880"
  },
  {
    "text": "and and that really gets to the the heart of this question because at the moment C plus plus fall short of these",
    "start": "317880",
    "end": "324000"
  },
  {
    "text": "goals it really is a part we want it to be um lots of you in the room can probably",
    "start": "324000",
    "end": "329280"
  },
  {
    "text": "think of something that you would like to improve about C plus plus that if you just had a magic wand you know my",
    "start": "329280",
    "end": "335699"
  },
  {
    "text": "presentation about rewind was like I will make C plus plus better right um and this part is incredibly difficult",
    "start": "335699",
    "end": "343020"
  },
  {
    "text": "right but why is C plus plus falling behind our goals there's a huge amount of effort being invested into it we've",
    "start": "343020",
    "end": "348780"
  },
  {
    "text": "worked on it uh for a long time with lots of people across the industry have so understanding the why I think is",
    "start": "348780",
    "end": "355020"
  },
  {
    "text": "really challenging and and maybe even more important than thinking about specific improvements or specific areas",
    "start": "355020",
    "end": "360720"
  },
  {
    "text": "where C plus plus could be doing better why is it struggling that there are two core reasons here",
    "start": "360720",
    "end": "367259"
  },
  {
    "text": "first C plus plus has accumulated Decades of technical debt and and this",
    "start": "367259",
    "end": "373259"
  },
  {
    "text": "is it for bad reasons it's not like someone made a mistake here that's not what happened at all uh This was done",
    "start": "373259",
    "end": "378720"
  },
  {
    "text": "often for the best possible reasons as an example a huge part of C plus plus is",
    "start": "378720",
    "end": "384180"
  },
  {
    "text": "Success was building directly on top of the existing SP ecosystem right this",
    "start": "384180",
    "end": "390419"
  },
  {
    "text": "gave it access to the dominant software ecosystem at the time it allowed it to",
    "start": "390419",
    "end": "395639"
  },
  {
    "text": "to be incredibly more useful to people but it also meant inheriting the C3",
    "start": "395639",
    "end": "400680"
  },
  {
    "text": "processor textual inclusion C headers strange integer promotion semantics I",
    "start": "400680",
    "end": "406259"
  },
  {
    "text": "mean a whole list of things inheriting a lot of C's technical debt now this this",
    "start": "406259",
    "end": "411960"
  },
  {
    "text": "is a really well motivated decision it was it was an excellent reason to do this but it had a very high cost right",
    "start": "411960",
    "end": "418979"
  },
  {
    "text": "and all of the technical debt C plus plus has has a very high cost",
    "start": "418979",
    "end": "424080"
  },
  {
    "text": "and it's compounded by the second reason which is prioritizing backwards compatibility",
    "start": "424080",
    "end": "430319"
  },
  {
    "text": "and again prioritizing backwards compatibility isn't in and of itself a bad thing it can be really useful and a",
    "start": "430319",
    "end": "436139"
  },
  {
    "text": "huge feature for a lot of people but it does create a problem because it",
    "start": "436139",
    "end": "441840"
  },
  {
    "text": "means that every time we make a mistake in the language we can't fix it we can't even fix easy",
    "start": "441840",
    "end": "447780"
  },
  {
    "text": "mistakes we can't fix them even when they are new and it would be relatively cheap to do so because we want to have",
    "start": "447780",
    "end": "454860"
  },
  {
    "text": "that backwards compatibility we also can't fix it when we have tools that can manage the cost to fixing it for",
    "start": "454860",
    "end": "461280"
  },
  {
    "text": "Developers we distort new features that we're adding to the language to avoid breaking",
    "start": "461280",
    "end": "468539"
  },
  {
    "text": "any Legacy code we have color weight and co-yield and co-return and I don't know what the next code keyword will be but",
    "start": "468539",
    "end": "475199"
  },
  {
    "text": "there will be one and it's all to try and deal with backwards compatibility right every time we do this we basically",
    "start": "475199",
    "end": "482160"
  },
  {
    "text": "take on an ever-growing set of acceptably small increments of technical",
    "start": "482160",
    "end": "487919"
  },
  {
    "text": "debt on top of the inherited pile of technical debt",
    "start": "487919",
    "end": "493919"
  },
  {
    "text": "but backwards compatibility does more than that uh it it also prevents fixing technical debt",
    "start": "493919",
    "end": "500520"
  },
  {
    "text": "because by Nature if you have technical debt uh and you have shy of the law",
    "start": "500520",
    "end": "506220"
  },
  {
    "text": "which says that you know whether you intended it or not code will depend on every single feature of your",
    "start": "506220",
    "end": "512399"
  },
  {
    "text": "implementation that means codes depending on this technical debt someone's holding down their space bar to warm up their",
    "start": "512399",
    "end": "519060"
  },
  {
    "text": "keyboard or something right you you can't just fix technical debt while maintaining backwards compatibility",
    "start": "519060",
    "end": "525060"
  },
  {
    "text": "these are these are fundamental tensions right um in fact some of the time backwards",
    "start": "525060",
    "end": "530519"
  },
  {
    "text": "compatibility is why we took on the technical debt in the first place uh and so this this is a really",
    "start": "530519",
    "end": "535680"
  },
  {
    "text": "self-reinforcing system there is another thing that makes it difficult to improve C plus plus though",
    "start": "535680",
    "end": "542220"
  },
  {
    "text": "uh which is that the the evolution process itself makes improvements extremely difficult",
    "start": "542220",
    "end": "549260"
  },
  {
    "text": "simple plus is evolved as part of the standards committee and this uses a multi-year waterfall committee process",
    "start": "549260",
    "end": "556459"
  },
  {
    "text": "access is is restricted and expensive you you have to attend in person in many",
    "start": "556459",
    "end": "563040"
  },
  {
    "text": "cases in order to have a voice uh decisions are made by a live vote of those who happen to be in the room",
    "start": "563040",
    "end": "569040"
  },
  {
    "text": "um and a lot of the process a lot of the aspects of this they are it's not like",
    "start": "569040",
    "end": "574080"
  },
  {
    "text": "the people running the committee are unaware of the challenges a lot of this process comes from ISO uh and and it's",
    "start": "574080",
    "end": "580800"
  },
  {
    "text": "it's not really in our control right it's not even in the control of all any of the programming languages that are",
    "start": "580800",
    "end": "586200"
  },
  {
    "text": "part of iso and fundamentally iso's process has it has a reason behind it it",
    "start": "586200",
    "end": "591660"
  },
  {
    "text": "is oriented around ensuring that you know Nations and and experts especially those companies have a voice and are",
    "start": "591660",
    "end": "600180"
  },
  {
    "text": "represented in discussions and decisions around standards and I mean I think that's that's actually okay right the",
    "start": "600180",
    "end": "607019"
  },
  {
    "text": "the that's a valid set of priorities but it's a very different set of priorities from the ones that I wouldn't choose in",
    "start": "607019",
    "end": "614279"
  },
  {
    "text": "order to build kind of an effective group for designing an incredibly complex Software System right it doesn't",
    "start": "614279",
    "end": "620820"
  },
  {
    "text": "prioritize things like being inclusive and welcoming or being a very high productive uh very effective team to",
    "start": "620820",
    "end": "628500"
  },
  {
    "text": "tackle these complex design challenges and so I think this this compounds the",
    "start": "628500",
    "end": "636240"
  },
  {
    "text": "other problems right the process itself just compounds all these other problems and I think you see some of this",
    "start": "636240",
    "end": "641700"
  },
  {
    "text": "reflected in the design right we we tend to prioritize safe easy changes to make",
    "start": "641700",
    "end": "647579"
  },
  {
    "text": "rather than difficult maybe expensive changes to make that have higher impact",
    "start": "647579",
    "end": "653279"
  },
  {
    "text": "that might allow us to start paying down this technical debt and that's that's just a function of how the process works",
    "start": "653279",
    "end": "660420"
  },
  {
    "text": "but okay that's enough doom and glue what what options are there like what is next like where do we actually go from",
    "start": "660420",
    "end": "666959"
  },
  {
    "text": "here right uh especially if improving C plus plus directly is is is",
    "start": "666959",
    "end": "672019"
  },
  {
    "text": "difficult enough that it it's not proving a really effective path I think the obvious answer for what",
    "start": "672019",
    "end": "679800"
  },
  {
    "text": "options we have are existing programming languages that would be ideal uh programming languages are are wildly",
    "start": "679800",
    "end": "685680"
  },
  {
    "text": "expensive uh especially factoring in the larger ecosystem around them and so this is where we we absolutely should start",
    "start": "685680",
    "end": "693180"
  },
  {
    "text": "um a bunch of uh existing programming languages are fantastic but are garbage collected and honestly garbage collected",
    "start": "693180",
    "end": "699779"
  },
  {
    "text": "languages are pretty awesome I don't know how many folks have used them they're amazing because they really",
    "start": "699779",
    "end": "704820"
  },
  {
    "text": "simplify the programming model they can be really simple reliable safe easy to",
    "start": "704820",
    "end": "710339"
  },
  {
    "text": "use they're fantastic right um the challenge is that they they have",
    "start": "710339",
    "end": "715740"
  },
  {
    "text": "performance gaps right they still have some performance Gap maybe they have a performance gap on throughput maybe on",
    "start": "715740",
    "end": "722339"
  },
  {
    "text": "latency uh that there's a huge body of research trying to find better ways to",
    "start": "722339",
    "end": "728880"
  },
  {
    "text": "minimize the performance Gap but at the end of the day they do have a cost right they really do",
    "start": "728880",
    "end": "734160"
  },
  {
    "text": "have a Costas they don't often serve in the roles that we're looking to use C",
    "start": "734160",
    "end": "739320"
  },
  {
    "text": "plus right when we look at that priority list right performance was at the very top",
    "start": "739320",
    "end": "744660"
  },
  {
    "text": "foreign candidate that we should be thinking about rust I",
    "start": "744660",
    "end": "750959"
  },
  {
    "text": "now this is an arrest talk I hate to tell anyone who is thinking this is a rust talk that's not anything to do with",
    "start": "750959",
    "end": "756959"
  },
  {
    "text": "Russ though because frankly Russ is amazing if if rust works you should absolutely use it uh it's a fantastic",
    "start": "756959",
    "end": "763380"
  },
  {
    "text": "language I'm super excited to see what they're doing in the community I I am really impressed by both the language",
    "start": "763380",
    "end": "768420"
  },
  {
    "text": "and the community you're doing an amazing amazing job you know so if Russ is working please don't get distracted",
    "start": "768420",
    "end": "774480"
  },
  {
    "text": "by by this talk at all this isn't this isn't for you right but there is a problem for some folks in",
    "start": "774480",
    "end": "781500"
  },
  {
    "text": "using rest and that's that moving a C plus plus ecosystem especially a large one to rest",
    "start": "781500",
    "end": "788459"
  },
  {
    "text": "is very difficult it's very very difficult and it's very very expensive",
    "start": "788459",
    "end": "793680"
  },
  {
    "text": "uh you know some of my colleagues are actually working on figuring out ways to try and make this easier to make it a",
    "start": "793680",
    "end": "800220"
  },
  {
    "text": "little bit more uh possible a little bit more uh feasible but it's it's still",
    "start": "800220",
    "end": "806700"
  },
  {
    "text": "early days and right now the cost is just really difficult uh really difficult for a lot of groups to swallow",
    "start": "806700",
    "end": "814200"
  },
  {
    "text": "okay so I don't know of any other existing languages that are really great options here there are of course many other",
    "start": "814200",
    "end": "820560"
  },
  {
    "text": "languages I could spend a whole talk trying to like go through every single language but none of them seem to really",
    "start": "820560",
    "end": "826980"
  },
  {
    "text": "work and so I think it's useful to kind of look at what approaches have worked in the past so let's go back to my my",
    "start": "826980",
    "end": "832920"
  },
  {
    "text": "little list here we have C to C plus plus you work really great the Java to",
    "start": "832920",
    "end": "837959"
  },
  {
    "text": "typescript like crypto typescript sorry uh it works really great and these These are kind of interestingly similar in one",
    "start": "837959",
    "end": "843959"
  },
  {
    "text": "respect both of these are taking basically a superset approach right uh C plus and typescript are",
    "start": "843959",
    "end": "851160"
  },
  {
    "text": "supersets of c and JavaScript perspective book and this is a really effective way to kind of take an",
    "start": "851160",
    "end": "857339"
  },
  {
    "text": "existing ecosystem and extend it right but we also see some different patterns",
    "start": "857339",
    "end": "862800"
  },
  {
    "text": "emerging here over time so objective to the Swift is different it's a more advanced kind of evolutionary path",
    "start": "862800",
    "end": "869459"
  },
  {
    "text": "because Swift has a totally new syntax it's not it's not a superset of objective-c syntax at all and instead it",
    "start": "869459",
    "end": "876540"
  },
  {
    "text": "uses compiler technology to provide this interoperability to provide the path",
    "start": "876540",
    "end": "882060"
  },
  {
    "text": "from objective-c into Swift and I think we see it even more clearly if we look at at kotlin which is a very",
    "start": "882060",
    "end": "889260"
  },
  {
    "text": "new language but that's uh in a lot of ways trying to build on top of the Java ecosystem",
    "start": "889260",
    "end": "894420"
  },
  {
    "text": "and and I think kotlin is is a fantastic example of this idea that instead of following a superset",
    "start": "894420",
    "end": "901079"
  },
  {
    "text": "um particularly a syntactic superset approach really leveraging uh interoperability",
    "start": "901079",
    "end": "906660"
  },
  {
    "text": "and and bi-directional interoperability where you can Java code can call kotlin",
    "start": "906660",
    "end": "912360"
  },
  {
    "text": "code and column code can call Java code the ergonomics are good they don't feel",
    "start": "912360",
    "end": "917639"
  },
  {
    "text": "like you know completely unrelated programming languages they have you know the same core constructs beneath them",
    "start": "917639",
    "end": "925019"
  },
  {
    "text": "and this makes a very compelling adoption path a very compelling uh tool-assisted migration path",
    "start": "925019",
    "end": "932040"
  },
  {
    "text": "but it does so with the ability to make pretty significant and dramatic improvements to the language which can",
    "start": "932040",
    "end": "938760"
  },
  {
    "text": "be really difficult with a superset when we look at all of these like when we look at all of these we start to see",
    "start": "938760",
    "end": "944760"
  },
  {
    "text": "a pattern emerging each and every one of these was designed for the purpose they're designed",
    "start": "944760",
    "end": "952019"
  },
  {
    "text": "to be a successor language okay and I think this is really exciting so",
    "start": "952019",
    "end": "957899"
  },
  {
    "text": "so a successor language here is one to build on an existing ecosystem without bootstrapping a new one it gives you",
    "start": "957899",
    "end": "965040"
  },
  {
    "text": "bi-directional interoperability you know some optimized learning curve",
    "start": "965040",
    "end": "970320"
  },
  {
    "text": "you can just adopt it pretty easily and ideally you can migrate code with tools",
    "start": "970320",
    "end": "976320"
  },
  {
    "text": "not just manually but actually with tools migrate code from the old language to the new language",
    "start": "976320",
    "end": "981420"
  },
  {
    "text": "we see this uh with with Swift and we see it really compellingly with kotlin",
    "start": "981420",
    "end": "987480"
  },
  {
    "text": "this isn't like a new idea either if you actually watch curbs bridge to new thing",
    "start": "987480",
    "end": "993720"
  },
  {
    "text": "and talk you'll see him talking about exactly these different kinds of successor language approaches both the",
    "start": "993720",
    "end": "1000199"
  },
  {
    "text": "superset and this more interoperability based form but for me I'm really interested in in",
    "start": "1000199",
    "end": "1005779"
  },
  {
    "text": "how we could do something really dramatically improve C plus plus and do",
    "start": "1005779",
    "end": "1011060"
  },
  {
    "text": "it through this interoperability successor language approach and so this is what a group of us have been working",
    "start": "1011060",
    "end": "1016160"
  },
  {
    "text": "on for a couple of years uh we've just made it public uh this year called it's called the carbon language and this is",
    "start": "1016160",
    "end": "1023060"
  },
  {
    "text": "basically an experimental successor to C plus so Carmen where do we start with carbon",
    "start": "1023060",
    "end": "1029959"
  },
  {
    "text": "we start at the same place we start with C plus plus we start with goals right cargo's goals is a successor language",
    "start": "1029959",
    "end": "1035600"
  },
  {
    "text": "start off with the same six goals as C plus plus but we add one more goal here that's",
    "start": "1035600",
    "end": "1041600"
  },
  {
    "text": "really critical to make carbon a successor language interoperability width and migration",
    "start": "1041600",
    "end": "1047058"
  },
  {
    "text": "from existing C plus code and there are three parts of these goals",
    "start": "1047059",
    "end": "1052400"
  },
  {
    "text": "that are going to be key to be a successful successor language here interoperability migration and language",
    "start": "1052400",
    "end": "1059720"
  },
  {
    "text": "evolution the interoperability we don't have to inherit all of the C plus plus technical",
    "start": "1059720",
    "end": "1065780"
  },
  {
    "text": "debt this is this is what separates us from a superset approach and it allows us to really dramatically start pushing",
    "start": "1065780",
    "end": "1073160"
  },
  {
    "text": "down the technical debt migration allows us to provide immediate",
    "start": "1073160",
    "end": "1078559"
  },
  {
    "text": "and dramatic improvements to code right and then language evolution is how we sustain this how we actually keep this",
    "start": "1078559",
    "end": "1086059"
  },
  {
    "text": "kind of improvement going forward so without this we're going to get a single step function Improvement and then we're",
    "start": "1086059",
    "end": "1091580"
  },
  {
    "text": "done and I don't think that that makes any sense we're going to go through the cost of this we have to have some path",
    "start": "1091580",
    "end": "1097340"
  },
  {
    "text": "to continually actually refresh the language keep it keep it really really",
    "start": "1097340",
    "end": "1103160"
  },
  {
    "text": "effective keep it meeting developers needs even as they change even as our technology changes",
    "start": "1103160",
    "end": "1108799"
  },
  {
    "text": "foreign with the three of these I think we have something pretty exciting and this is this is basically our path to",
    "start": "1108799",
    "end": "1114380"
  },
  {
    "text": "avoid to avoiding backwards compatibility the way C plus plus does is to try and use tools to do these",
    "start": "1114380",
    "end": "1121280"
  },
  {
    "text": "upgrades to do this improvement over time all right so let's talk about the",
    "start": "1121280",
    "end": "1126740"
  },
  {
    "text": "language itself I'm just going to try and introduce you to a few pieces of the language uh based on time I may have to",
    "start": "1126740",
    "end": "1133039"
  },
  {
    "text": "uh skim through a little bit but we can go back and dig into this in more detail if it's useful let's go in and just look",
    "start": "1133039",
    "end": "1139640"
  },
  {
    "text": "at a few things one thing just as a reminder right the carbon is is still in its infancy uh we really wanted to make",
    "start": "1139640",
    "end": "1146600"
  },
  {
    "text": "this an open source project uh very very early in the project so we could get broad input and a lot of people involved",
    "start": "1146600",
    "end": "1152960"
  },
  {
    "text": "early on we're incredibly far away from being done none of this is is baked or",
    "start": "1152960",
    "end": "1158059"
  },
  {
    "text": "set in stone we've got we've got a long long road ahead of us uh and so I don't want you to get over indexed on this but",
    "start": "1158059",
    "end": "1163880"
  },
  {
    "text": "I do want to kind of introduce some of the concepts we think we can bring into the language to make something that's going to be more powerful and more and",
    "start": "1163880",
    "end": "1170299"
  },
  {
    "text": "more uh appealing for developers so let's start off with the simple things and start off",
    "start": "1170299",
    "end": "1175760"
  },
  {
    "text": "with syntax and one of the improvements we'd like to bring in are introducer keywords and a very simple parsing",
    "start": "1175760",
    "end": "1181880"
  },
  {
    "text": "grammar something that makes the syntax incredibly obvious incredibly easy to parse easy to build new tools on top of",
    "start": "1181880",
    "end": "1189260"
  },
  {
    "text": "but unfortunately this is kind of the the greatest breaking change of them all doing this you know requires that you're",
    "start": "1189260",
    "end": "1196039"
  },
  {
    "text": "doing something like a tooling based process but it also turns out this is where tools are best right tools are",
    "start": "1196039",
    "end": "1201919"
  },
  {
    "text": "really really good at doing these kinds of upgrades these kinds of migrations",
    "start": "1201919",
    "end": "1207140"
  },
  {
    "text": "and the way this looks uh if we start looking at some code Snippets is when we declare a new function we add a little",
    "start": "1207140",
    "end": "1213380"
  },
  {
    "text": "uh F in keyword at the start of it and that tells us our declarative function",
    "start": "1213380",
    "end": "1218740"
  },
  {
    "text": "right uh when we're declaring a variable if my slide updates",
    "start": "1218740",
    "end": "1224900"
  },
  {
    "text": "eventually there we go uh including a variable we",
    "start": "1224900",
    "end": "1230419"
  },
  {
    "text": "get a VAR keyword in there just to just to try and make sure it's very clear as this variable declaration we even do",
    "start": "1230419",
    "end": "1236660"
  },
  {
    "text": "little things because we also want to use name and then a colon followed by a",
    "start": "1236660",
    "end": "1242059"
  },
  {
    "text": "type because this solves some of the hardest parsing problems one of the things that",
    "start": "1242059",
    "end": "1248660"
  },
  {
    "text": "I find most frustrating is you should go to Wikipedia there's an article the most vexing parse",
    "start": "1248660",
    "end": "1255440"
  },
  {
    "text": "it doesn't mention the sequence plus the most vexing parts and it's a C plus plus example and that just makes me really",
    "start": "1255440",
    "end": "1262100"
  },
  {
    "text": "sad uh and it's actually this thing it's it's variable declarations in C plus I",
    "start": "1262100",
    "end": "1267200"
  },
  {
    "text": "end up hitting the most vexing Parts in that we don't need to have vexing parses we can have easy parses for humans for",
    "start": "1267200",
    "end": "1274340"
  },
  {
    "text": "compilers for Ides for you know Vim for emacs for every code editor in the world",
    "start": "1274340",
    "end": "1279620"
  },
  {
    "text": "right we can make this super super easy let's talk about some other changes here",
    "start": "1279620",
    "end": "1285919"
  },
  {
    "text": "another big change is trying to have a really well designed way to have",
    "start": "1285919",
    "end": "1291679"
  },
  {
    "text": "function input parameters or basically read-only values these are values that you're just reading you're not going to",
    "start": "1291679",
    "end": "1297500"
  },
  {
    "text": "try and modify them they're immutable they don't change anywhere because this turns out to be an overwhelming chunk of",
    "start": "1297500",
    "end": "1304400"
  },
  {
    "text": "the the code you write simple plus tends to use const references for these are kind of good for functional inputs",
    "start": "1304400",
    "end": "1311659"
  },
  {
    "text": "except when that's actually a performance overhead because they would fit and register right using a constant",
    "start": "1311659",
    "end": "1318320"
  },
  {
    "text": "reference for an INT is really unfortunate um and that means you kind of have to know for each and every type well how do",
    "start": "1318320",
    "end": "1325159"
  },
  {
    "text": "I want to pass it as an input it gets worse because when you're writing a template code you don't know what type you had so you just have to take it as a",
    "start": "1325159",
    "end": "1332360"
  },
  {
    "text": "constant reference even when that's a performance overhead but fixing this is an incredibly disruptive breaking change",
    "start": "1332360",
    "end": "1337520"
  },
  {
    "text": "it's also a huge opportunity for us so what does this end up looking like",
    "start": "1337520",
    "end": "1344000"
  },
  {
    "text": "you have in your parameters you say that I want a circle right this is a parameter named Circle it has the circle",
    "start": "1344000",
    "end": "1350299"
  },
  {
    "text": "type and this is an input parameter the default is an input parameter because we think that's that's the default for",
    "start": "1350299",
    "end": "1356240"
  },
  {
    "text": "functions right we have a 32-bit integer input parameter",
    "start": "1356240",
    "end": "1361940"
  },
  {
    "text": "right and it just works works really efficiently and the compiler the implementation is responsible for",
    "start": "1361940",
    "end": "1368720"
  },
  {
    "text": "figuring out what's the most efficient way to pass these parameters right we've got to really optimize that really",
    "start": "1368720",
    "end": "1374419"
  },
  {
    "text": "nicely for you but if we have these input parameters that's nice we have these values and we",
    "start": "1374419",
    "end": "1381140"
  },
  {
    "text": "use those for for these read-only uh things we do need to do mutation",
    "start": "1381140",
    "end": "1386299"
  },
  {
    "text": "it turns out programs aren't as interesting without mutation uh at least for me I I don't think I'm good enough",
    "start": "1386299",
    "end": "1392120"
  },
  {
    "text": "to really do the the pure functional programming it's it's never been something I can I can wrap my head around easily",
    "start": "1392120",
    "end": "1398600"
  },
  {
    "text": "um so we want to have mutation right and the way we do that is through pointers pointers give us both indirect access to",
    "start": "1398600",
    "end": "1404720"
  },
  {
    "text": "objects and mutation um and our whole hope is to try and compress all of that space into a simple",
    "start": "1404720",
    "end": "1411440"
  },
  {
    "text": "construct of pointers when you compare them to references pointers are a lot",
    "start": "1411440",
    "end": "1416480"
  },
  {
    "text": "simpler because with references you can't you can't really talk about the reference separately from the the",
    "start": "1416480",
    "end": "1423140"
  },
  {
    "text": "referenced object right you have two things but you can only talk to one of them and pointers give you a very",
    "start": "1423140",
    "end": "1429260"
  },
  {
    "text": "natural way of of representing that a lot of languages that have references uh",
    "start": "1429260",
    "end": "1434360"
  },
  {
    "text": "modern languages that have references they actually very explicitly model them as pointers um and and use something like automatic",
    "start": "1434360",
    "end": "1440900"
  },
  {
    "text": "dereckencing because it's so important to be able to separate the two pieces of this we want to try and preserve that",
    "start": "1440900",
    "end": "1446720"
  },
  {
    "text": "separation and not have 14 different kinds of references either I'm going to try and have all of them just be",
    "start": "1446720",
    "end": "1452179"
  },
  {
    "text": "pointers let's head pointers come with their own problems which we can fix we can make pointers always not no we can",
    "start": "1452179",
    "end": "1458960"
  },
  {
    "text": "make you know use some other dedicated tool for things like pointer arithmetic and indexing that can be a separate tool",
    "start": "1458960",
    "end": "1465799"
  },
  {
    "text": "that has the guard rails you probably want built into it and that leaves pointers kind of in this very simple",
    "start": "1465799",
    "end": "1472580"
  },
  {
    "text": "very easy to understand space and in code this looks like you know we",
    "start": "1472580",
    "end": "1477740"
  },
  {
    "text": "have an output parameter results here our input output parameter results here and that's just pass by pointer and for",
    "start": "1477740",
    "end": "1484700"
  },
  {
    "text": "me I really like this because when you have an NL parameter like this in some ways it is indirect right you're modifying the caller's vector it's not",
    "start": "1484700",
    "end": "1491720"
  },
  {
    "text": "yours and we make that very explicit we have a pointer to the colors vector and",
    "start": "1491720",
    "end": "1496880"
  },
  {
    "text": "then in the code we actually go and modify it and so it's very clear this is this is actually modifying the colors uh",
    "start": "1496880",
    "end": "1503720"
  },
  {
    "text": "vector another big change is to try and simplify how we name types",
    "start": "1503720",
    "end": "1511700"
  },
  {
    "text": "especially complicated types this is particularly important in generic code and in meta programming where we have",
    "start": "1511700",
    "end": "1518059"
  },
  {
    "text": "parameterized type names in interesting ways in C plus plus they're kind of two",
    "start": "1518059",
    "end": "1523940"
  },
  {
    "text": "separate grammars that kind of overlap somewhat but also conflict in various places results in a",
    "start": "1523940",
    "end": "1531260"
  },
  {
    "text": "bunch of complexity and parsing a bunch of complexity in the language and we try to take a simplifying idea uh",
    "start": "1531260",
    "end": "1538340"
  },
  {
    "text": "what if we just say that no look when you try to name a type that's an expression it uses the same grammar",
    "start": "1538340",
    "end": "1544820"
  },
  {
    "text": "you're just naming a compile you're just writing an expression that expands to a",
    "start": "1544820",
    "end": "1549860"
  },
  {
    "text": "type uh one of the the consequences is that we already have a nice balanced delimiters for passing parameters to",
    "start": "1549860",
    "end": "1557120"
  },
  {
    "text": "types we have parentheses and so here you can see we have a circle",
    "start": "1557120",
    "end": "1562400"
  },
  {
    "text": "this is this is actually an expression right it references an identifier the the Class Type declared earlier",
    "start": "1562400",
    "end": "1569659"
  },
  {
    "text": "um i-32 is also an expression uh similar to well 32 right similar to an integer literal you can have an integer type",
    "start": "1569659",
    "end": "1576799"
  },
  {
    "text": "literal that gives you a 32-bit type and we have you know the more interesting case of vector uh which is a",
    "start": "1576799",
    "end": "1584320"
  },
  {
    "text": "parameterized type and we use normal function style parameters to pass uh 30",
    "start": "1584320",
    "end": "1589460"
  },
  {
    "text": "to the floating Point type as a type parameter here",
    "start": "1589460",
    "end": "1594220"
  },
  {
    "text": "another thing we've tried to simplify is the root namespace uh so we have uh",
    "start": "1595580",
    "end": "1602419"
  },
  {
    "text": "instead of having a single Global namespace for all code everywhere try to have packages which are kind of the the",
    "start": "1602419",
    "end": "1609740"
  },
  {
    "text": "rough unit of code that would typically be versioned together or distributed together",
    "start": "1609740",
    "end": "1615559"
  },
  {
    "text": "um have its own uh route as an in a namespace and all the packages have to",
    "start": "1615559",
    "end": "1620720"
  },
  {
    "text": "be named and this way there isn't a single pump level namespace every top",
    "start": "1620720",
    "end": "1626240"
  },
  {
    "text": "level namespace it's actually local to something something you probably control and it's kind of version together and",
    "start": "1626240",
    "end": "1632480"
  },
  {
    "text": "controlled together and it's given a name for whenever someone else needs to access it",
    "start": "1632480",
    "end": "1637520"
  },
  {
    "text": "the way this works in code is you start off all of your code saying that hey I'm in this geometry package here",
    "start": "1637520",
    "end": "1645520"
  },
  {
    "text": "and then when you want to go and import an API now that you have that name you don't have to textually include the code",
    "start": "1647120",
    "end": "1653659"
  },
  {
    "text": "you can actually just write import and import the Mac package",
    "start": "1653659",
    "end": "1659000"
  },
  {
    "text": "and when you want to use it you say math dot PI right and the fact that math is",
    "start": "1659000",
    "end": "1665120"
  },
  {
    "text": "in the namespace isn't surprising because you wrote that locally right uh and the fact that you get to Pi is",
    "start": "1665120",
    "end": "1671659"
  },
  {
    "text": "unsurprising because you do that inside of math so there's nothing you know from outside of your package that can ever",
    "start": "1671659",
    "end": "1677659"
  },
  {
    "text": "come in and add things to your packages name so it's your package controls its namespace very very directly",
    "start": "1677659",
    "end": "1684700"
  },
  {
    "text": "foreign",
    "start": "1685360",
    "end": "1688360"
  },
  {
    "text": "and so so we also made some changes to how members are declared uh they're",
    "start": "1691000",
    "end": "1696140"
  },
  {
    "text": "public by default so I'm just going to zip through this a little bit uh one thing I do want to try and make",
    "start": "1696140",
    "end": "1701360"
  },
  {
    "text": "clear is we we have just canonicalized on using an explicit object parameter to declare a method",
    "start": "1701360",
    "end": "1707360"
  },
  {
    "text": "and so we have you know non-methods or like a static member function doesn't",
    "start": "1707360",
    "end": "1712400"
  },
  {
    "text": "have an object parameter here at all and when we want a method we add an object parameter uh you use a keyword to",
    "start": "1712400",
    "end": "1719179"
  },
  {
    "text": "identify it I use me here the use of me here is really weird basically every",
    "start": "1719179",
    "end": "1724940"
  },
  {
    "text": "other language even including C plus plus now that it's getting explicit object parameters calls itself uh we're",
    "start": "1724940",
    "end": "1731960"
  },
  {
    "text": "probably going to change this to also call itself but you know when we started off we were trying to save two",
    "start": "1731960",
    "end": "1737419"
  },
  {
    "text": "characters probably not worth it but you have a keyword that says this is the object parameter and you have a special",
    "start": "1737419",
    "end": "1743299"
  },
  {
    "text": "type for it to kind of model how that parameter works and this means that this is a method",
    "start": "1743299",
    "end": "1749240"
  },
  {
    "text": "and because it's an input parameter it's a read-only method it can't modify the object that you're calling it on",
    "start": "1749240",
    "end": "1755659"
  },
  {
    "text": "but you just call it like normally you have an article you say as HTML",
    "start": "1755659",
    "end": "1760820"
  },
  {
    "text": "and then we also have mutating methods but those need to accept pointers right so we have to take the the object by",
    "start": "1760820",
    "end": "1767899"
  },
  {
    "text": "pointer because we're going to mutate it right and we have a special tool called Adder",
    "start": "1767899",
    "end": "1774320"
  },
  {
    "text": "that just says look to this method you need to take the address of the object before you pass it to us because this is",
    "start": "1774320",
    "end": "1781399"
  },
  {
    "text": "one importance that if we if we only use pointers this would be way too inconvenient to to write code and so",
    "start": "1781399",
    "end": "1787580"
  },
  {
    "text": "this is the big escape hatch that we use here to just cause you to take the address automatically so as a",
    "start": "1787580",
    "end": "1793820"
  },
  {
    "text": "consequence you can also just write article.publish looks just like it would in C plus plus but it's very explicit",
    "start": "1793820",
    "end": "1799100"
  },
  {
    "text": "this is a mutation and how that mutation works uh we do have single inheritance",
    "start": "1799100",
    "end": "1806899"
  },
  {
    "text": "um and classes are default we have some nice Syntax for that but it's really unsurprising so I'm just going to zip",
    "start": "1806899",
    "end": "1811940"
  },
  {
    "text": "right through this lots of nice keywords uh we also have keywords for abstract",
    "start": "1811940",
    "end": "1817820"
  },
  {
    "text": "methods and keywords instead of override we've tried to just canonicalize on the same set of keywords and make them very",
    "start": "1817820",
    "end": "1824179"
  },
  {
    "text": "clear and in the same position everywhere sorry to skip forward but I want to make sure that we get to get through",
    "start": "1824179",
    "end": "1829460"
  },
  {
    "text": "everything in time the last real language topic I want to mention is we have powerful definition",
    "start": "1829460",
    "end": "1835399"
  },
  {
    "text": "checked generics and I think this may be the the biggest change that we need to bring into carbon from C plus but I",
    "start": "1835399",
    "end": "1842840"
  },
  {
    "text": "think in some ways that's also one of the most foundational changes we need to make because today C plus plus uses",
    "start": "1842840",
    "end": "1847880"
  },
  {
    "text": "templates to do all generic programming uh let's do static polymorphism very",
    "start": "1847880",
    "end": "1852980"
  },
  {
    "text": "nice low you know low coupling ways of dealing with multiple interfaces it's a great in some ways generic programming",
    "start": "1852980",
    "end": "1859460"
  },
  {
    "text": "is fantastic but using templates has a lot of drawbacks uh they're duct typed",
    "start": "1859460",
    "end": "1865039"
  },
  {
    "text": "uh and they're light bound right it means that you can't really type check the template definitions even with uh C",
    "start": "1865039",
    "end": "1872000"
  },
  {
    "text": "plus plus Concepts that we have that we got in in C plus plus 20 you can constrain the template but you can't",
    "start": "1872000",
    "end": "1878659"
  },
  {
    "text": "fully definition check it it only partially addresses it and I think it doesn't really go to the important last",
    "start": "1878659",
    "end": "1884840"
  },
  {
    "text": "step of fundamentally checking the generics fully uh at their definition time for example we can't build Dynamic",
    "start": "1884840",
    "end": "1892100"
  },
  {
    "text": "type Erasure on top of the the C plus plus uh 20 Concepts we got so we want to",
    "start": "1892100",
    "end": "1897620"
  },
  {
    "text": "add definition generics very similar to to C plus plus Ox Concepts but maybe",
    "start": "1897620",
    "end": "1904039"
  },
  {
    "text": "even more similar to to more modern programming languages like rests traits uh and Swift protocols which are also",
    "start": "1904039",
    "end": "1911240"
  },
  {
    "text": "which are both lots of definition generics and this directly addresses a ton of",
    "start": "1911240",
    "end": "1916520"
  },
  {
    "text": "issues with the template system however it's particularly challenging for carbon because we can't just add definition",
    "start": "1916520",
    "end": "1923240"
  },
  {
    "text": "check to generics we have to interoperate with C plus that means we",
    "start": "1923240",
    "end": "1928340"
  },
  {
    "text": "have definition generics that you can extend to templates",
    "start": "1928340",
    "end": "1933440"
  },
  {
    "text": "and so we fully support C plus plus templates within this framework but with a very smooth Evolution path to",
    "start": "1933440",
    "end": "1940520"
  },
  {
    "text": "adopt definition checking for your generic code where you want to I I could spend like the whole talk",
    "start": "1940520",
    "end": "1946100"
  },
  {
    "text": "talking about this I'm going to give just a very briefest of introduction here uh to start off with we have to define",
    "start": "1946100",
    "end": "1952279"
  },
  {
    "text": "the interface that we want to be generic over right and this is called maybe unsurprisingly interface",
    "start": "1952279",
    "end": "1960380"
  },
  {
    "text": "um this interface is named summary it has a method summarize the summarize returns a string nothing too nothing too",
    "start": "1960380",
    "end": "1966980"
  },
  {
    "text": "surprising and then we can write a generic function right and this generic function print",
    "start": "1966980",
    "end": "1973100"
  },
  {
    "text": "summary uh you know it takes a type parameter and this is a carbon the",
    "start": "1973100",
    "end": "1978559"
  },
  {
    "text": "square brackets here are carbons deduced parameter syntax and so this is a deduced type parameter you cannot pass",
    "start": "1978559",
    "end": "1985100"
  },
  {
    "text": "it explicitly and because of that exclamation point it is a generic parameter it is actually something that",
    "start": "1985100",
    "end": "1990740"
  },
  {
    "text": "has to be done at compile time not at runtime and we say that this is a summary type",
    "start": "1990740",
    "end": "1997519"
  },
  {
    "text": "not just any type but a summary type and that uses the interface above once we do this",
    "start": "1997519",
    "end": "2004840"
  },
  {
    "text": "oh we have you know this nice generic and we could do some some really",
    "start": "2004840",
    "end": "2011679"
  },
  {
    "text": "really cool things here right we have our we have our X we pass it with t this",
    "start": "2011679",
    "end": "2016840"
  },
  {
    "text": "is where we deduce that parameter from and now we can call x dot summarize and",
    "start": "2016840",
    "end": "2022899"
  },
  {
    "text": "we can type check this when we see the definition we never need to see the type that implements summary",
    "start": "2022899",
    "end": "2028419"
  },
  {
    "text": "because the summary interface tells us exactly how to type check this I mean so this gives us a fully type checked",
    "start": "2028419",
    "end": "2034299"
  },
  {
    "text": "definition of a generic function and when you want to implement an interface types do that explicitly it's",
    "start": "2034299",
    "end": "2042159"
  },
  {
    "text": "not automatic the way it is in C plus plus templates you have to actually say I want to implement summary interface",
    "start": "2042159",
    "end": "2048158"
  },
  {
    "text": "okay and so if we have say a news article right we can Implement summary with this",
    "start": "2048159",
    "end": "2054760"
  },
  {
    "text": "declaration but hey look I want to implement my class as a summary type okay and now I have to Define that",
    "start": "2054760",
    "end": "2062500"
  },
  {
    "text": "summarize method and because this is part of of the news article this is also a method on news",
    "start": "2062500",
    "end": "2069280"
  },
  {
    "text": "article right we put it inside of this impul block so that it could be used for the generics mechanism but it's still a",
    "start": "2069280",
    "end": "2075878"
  },
  {
    "text": "method on news article so down here right I have a function that takes a news article uh right and I can both use",
    "start": "2075879",
    "end": "2083800"
  },
  {
    "text": "that with my generic function because it has this impulse summary and also directly call it",
    "start": "2083800",
    "end": "2090220"
  },
  {
    "text": "makes sense hopefully I know I'm going a little bit fast uh the the last thing that interfaces",
    "start": "2090220",
    "end": "2097420"
  },
  {
    "text": "provide us is a single language extension Point mechanism for API design",
    "start": "2097420",
    "end": "2102940"
  },
  {
    "text": "so instead of using ADL uh and and having some real complexities with",
    "start": "2102940",
    "end": "2108640"
  },
  {
    "text": "overload sets and ADL we have a much more clearly designed and clearly",
    "start": "2108640",
    "end": "2114400"
  },
  {
    "text": "defined extension Point mechanism in the language we use it for generics and we",
    "start": "2114400",
    "end": "2119680"
  },
  {
    "text": "use it for everything else that we can so that we just push all of that work right into this piece of the the",
    "start": "2119680",
    "end": "2125260"
  },
  {
    "text": "language so let's imagine we have some other package of code right someone else's",
    "start": "2125260",
    "end": "2130900"
  },
  {
    "text": "codes it's not our code this is another package and we want to implement the summary",
    "start": "2130900",
    "end": "2136359"
  },
  {
    "text": "interface we can actually do that we have to we have to say that this isn't uh an",
    "start": "2136359",
    "end": "2142300"
  },
  {
    "text": "internal impul we can't change the API of the other package this is something that's external to it",
    "start": "2142300",
    "end": "2148180"
  },
  {
    "text": "all right and so we say external input say that that's this other package.tweet",
    "start": "2148180",
    "end": "2153460"
  },
  {
    "text": "because similar to a news article you can summarize a tweet bit redundant but we could do that",
    "start": "2153460",
    "end": "2159180"
  },
  {
    "text": "right and once you implement the summarize summary for this Tweet now I",
    "start": "2159180",
    "end": "2164980"
  },
  {
    "text": "can come down into this function I take a tweet and I can call my generic function on it and the reason that I'm allowed to do",
    "start": "2164980",
    "end": "2172180"
  },
  {
    "text": "this is because this is the code that defines the interface summary",
    "start": "2172180",
    "end": "2177460"
  },
  {
    "text": "so there are two places where you can Define these implementations you can Define them with type and you can Define",
    "start": "2177460",
    "end": "2184180"
  },
  {
    "text": "them with the interface we only Define them in those two places and a nice property is that because",
    "start": "2184180",
    "end": "2190300"
  },
  {
    "text": "those are the only two places you can Define it we can actually check that you have a definition we don't have any no",
    "start": "2190300",
    "end": "2196960"
  },
  {
    "text": "diagnostic required here we have a definitive check that like yes you implemented summary for this time we",
    "start": "2196960",
    "end": "2203680"
  },
  {
    "text": "found it there is exactly one no other would be possible there's no link time problem there's no runtime problem here",
    "start": "2203680",
    "end": "2210220"
  },
  {
    "text": "that's right so we got something that's a lot more principle and a lot easier to work with for programmers",
    "start": "2210220",
    "end": "2216640"
  },
  {
    "text": "okay I can keep going for a long time but I need to spend at least a little bit of time talking about one thing that",
    "start": "2216640",
    "end": "2221859"
  },
  {
    "text": "we can't really skip over here interrupt all this is nice programming",
    "start": "2221859",
    "end": "2226900"
  },
  {
    "text": "language design the key to carbon is C plus plus interop what does this look like well we have to",
    "start": "2226900",
    "end": "2232780"
  },
  {
    "text": "start with some C plus plus code so it's boring right we've got a struct circle in C plus plus the magic happens in carbon because in",
    "start": "2232780",
    "end": "2239920"
  },
  {
    "text": "carbon I can import from C plus plus code okay",
    "start": "2239920",
    "end": "2246339"
  },
  {
    "text": "and what this is going to do is it's going to fire up your C plus compiler clang in this case uh it's going to go",
    "start": "2246339",
    "end": "2252640"
  },
  {
    "text": "and it's gonna parse uh this C plus plus header uh the",
    "start": "2252640",
    "end": "2257859"
  },
  {
    "text": "circle.h and it's going to turn it into a clang header module right implicitly",
    "start": "2257859",
    "end": "2263800"
  },
  {
    "text": "and automatically and it's going to import that as if it were a module as if it were part of carbon itself right",
    "start": "2263800",
    "end": "2271599"
  },
  {
    "text": "and then it's going to give you access to this simple plus code from within carbon so now I can talk about that c",
    "start": "2271599",
    "end": "2278740"
  },
  {
    "text": "plus type Circle all right I can I can pass it to a carbon generic here",
    "start": "2278740",
    "end": "2285040"
  },
  {
    "text": "right and and carbon's generic or template is going to have to work with C plus plus types I can",
    "start": "2285040",
    "end": "2292240"
  },
  {
    "text": "run it through a for loop I can access members and I can do math on them all of",
    "start": "2292240",
    "end": "2298240"
  },
  {
    "text": "the things that you would expect to be able to do with your C plus plus type you can just do directly in carbon when we do this by kind of compiler level",
    "start": "2298240",
    "end": "2305200"
  },
  {
    "text": "interoperability that we build into the language but that's only one direction and we",
    "start": "2305200",
    "end": "2311260"
  },
  {
    "text": "really need bi-directional interoperability so we can go back to C plus plus code and in C plus plus code we can include a",
    "start": "2311260",
    "end": "2317980"
  },
  {
    "text": "header file and this isn't you know this is a header file that you write this is something that's provided by carbon and",
    "start": "2317980",
    "end": "2324339"
  },
  {
    "text": "we can extend clang to under the hood go and take this carbon library that we",
    "start": "2324339",
    "end": "2331300"
  },
  {
    "text": "wrote on the left here and turn it into a C plus plus car playing header module",
    "start": "2331300",
    "end": "2337720"
  },
  {
    "text": "that it can import into your C plus code it's going to transform all the things",
    "start": "2337720",
    "end": "2342820"
  },
  {
    "text": "and give you access to it so now the geometry package and carbon becomes a namespace in C plus and my print area",
    "start": "2342820",
    "end": "2349839"
  },
  {
    "text": "function is just a function and I can call it from carbon I can pass my Vector",
    "start": "2349839",
    "end": "2354940"
  },
  {
    "text": "of circles to it and it'll trigger all the implicit conversions and turn it into a carbon slice and then pass it",
    "start": "2354940",
    "end": "2361720"
  },
  {
    "text": "through right The Whole Bowl is make this just work so that's kind of how we expect to get",
    "start": "2361720",
    "end": "2367480"
  },
  {
    "text": "interrupted let's talk about interoperability migration we also need to cover process",
    "start": "2367480",
    "end": "2374140"
  },
  {
    "text": "so how is carbon the project going to actually evolve over time successfully",
    "start": "2374140",
    "end": "2380020"
  },
  {
    "text": "first and for me foremost is culture right the community and the culture there's a great quote from Peter Drucker",
    "start": "2380020",
    "end": "2386020"
  },
  {
    "text": "culture eats strategy for breakfast technology for lunch and products for dinner and soon thereafter everything",
    "start": "2386020",
    "end": "2392800"
  },
  {
    "text": "else too right uh this is a quote that's going on a whole the rounds of like a",
    "start": "2392800",
    "end": "2398320"
  },
  {
    "text": "business world and all that that's where I encountered it but I think it's actually really true for technology projects and for teams as well I really",
    "start": "2398320",
    "end": "2404500"
  },
  {
    "text": "really love this and so we're prioritizing culture really highly in carbon we want to try and have an",
    "start": "2404500",
    "end": "2409720"
  },
  {
    "text": "inclusive welcoming community we want to have a friendly and approachable Community we have a very",
    "start": "2409720",
    "end": "2415720"
  },
  {
    "text": "strong comprehensive code of conduct we have an open process for governance and for changing",
    "start": "2415720",
    "end": "2422920"
  },
  {
    "text": "carbon we make decisions with a clear rationale especially for their very difficult trade-offs when they're challenging things for us to consider we",
    "start": "2422920",
    "end": "2429520"
  },
  {
    "text": "work super hard on this we also want to make sure that the project can have you know the batteries",
    "start": "2429520",
    "end": "2436359"
  },
  {
    "text": "included tools and ecosystem that programmers expect we don't want to just ship you you know a language design or a",
    "start": "2436359",
    "end": "2442720"
  },
  {
    "text": "language specification we want to ship you a compiler and a standard library and a user guide and some tooling and",
    "start": "2442720",
    "end": "2451960"
  },
  {
    "text": "some migration tools and update tools and you know a linter maybe and yes a",
    "start": "2451960",
    "end": "2458560"
  },
  {
    "text": "package manager but but we're getting ahead of ourselves eventually eventually we want to be able",
    "start": "2458560",
    "end": "2464020"
  },
  {
    "text": "to have this but from the Project's perspective we're setting ourselves up to have a very wide",
    "start": "2464020",
    "end": "2469540"
  },
  {
    "text": "open scope we don't want to narrow ourselves down we want to be able to tackle these things in the in the in the future",
    "start": "2469540",
    "end": "2475000"
  },
  {
    "text": "once we're ready it's going to be a while we're nowhere ready yet we don't we actually don't even have a working",
    "start": "2475000",
    "end": "2480099"
  },
  {
    "text": "compiler yet I'm going to come back to that I also want to try and follow modern",
    "start": "2480099",
    "end": "2485440"
  },
  {
    "text": "open source development model uh this uh we hope looks really familiar to people makes it really easy for them to get",
    "start": "2485440",
    "end": "2491560"
  },
  {
    "text": "involved contribute things to make carbon better you know in little ways and in big ways uh we use lldm's kind of",
    "start": "2491560",
    "end": "2498520"
  },
  {
    "text": "Open Source licensing model we use a contributor license agreement to make sure we can fix bugs in it we'll use GitHub we have a real-time chat on",
    "start": "2498520",
    "end": "2506260"
  },
  {
    "text": "Discord we use Google Docs and Google meetings and sometimes zoom and",
    "start": "2506260",
    "end": "2511300"
  },
  {
    "text": "sometimes other things to try and collaborate one thing you'll notice is we use a lot of technology and a lot of",
    "start": "2511300",
    "end": "2516520"
  },
  {
    "text": "tools to try and collaborate better we don't try and stick to some kind of Common Core set of tools we want to use",
    "start": "2516520",
    "end": "2522640"
  },
  {
    "text": "everything we can to try and make the process better try and make the project more effective",
    "start": "2522640",
    "end": "2527680"
  },
  {
    "text": "um we also need to have like an actual process for evolving right we need some",
    "start": "2527680",
    "end": "2532839"
  },
  {
    "text": "process for improving it but we've distilled this down to pull requests get help pull requests",
    "start": "2532839",
    "end": "2539200"
  },
  {
    "text": "that's it that's the total Improvement model there's nothing more required we'll use",
    "start": "2539200",
    "end": "2544780"
  },
  {
    "text": "pull requests for design improvements for specification for adding documentation for implementing things",
    "start": "2544780",
    "end": "2550660"
  },
  {
    "text": "all of it um even significant language designs are developed in pull requests all we do is",
    "start": "2550660",
    "end": "2556960"
  },
  {
    "text": "we add kind of a proposal document to the pull request that spells out the interesting content the interesting",
    "start": "2556960",
    "end": "2563560"
  },
  {
    "text": "context you know why we're making a change why it's important all the Alternatives that we've considered right",
    "start": "2563560",
    "end": "2570000"
  },
  {
    "text": "and once we have a pull request we can just use code review and code review like processes two actually you know",
    "start": "2570000",
    "end": "2576400"
  },
  {
    "text": "affect this who approves all this poor requests well we have a governance system for that",
    "start": "2576400",
    "end": "2581440"
  },
  {
    "text": "and so the governance system is again really simple uh by and large governance is done through code reviews but if we",
    "start": "2581440",
    "end": "2587260"
  },
  {
    "text": "have if we have a question if there's a critical decision we need to make ultimately we have a three-person group",
    "start": "2587260",
    "end": "2592420"
  },
  {
    "text": "of leads that are responsible for making decisions it's kind of like you know the benevolent dictator for Life model but",
    "start": "2592420",
    "end": "2599260"
  },
  {
    "text": "you know scaled up not a dictator not for life but we're going to keep the benevolent",
    "start": "2599260",
    "end": "2604540"
  },
  {
    "text": "part that part's good uh but we don't want to scale it up too much right if we get back to a committee it's not going to be any more efficient",
    "start": "2604540",
    "end": "2611020"
  },
  {
    "text": "it's going to have all of the problems that that we really have with with C plus Evolution so we keep it super small",
    "start": "2611020",
    "end": "2617140"
  },
  {
    "text": "it's just three people uh myself uh Kate Gregory who's actually I think hiding in the back row of the talk if you want to",
    "start": "2617140",
    "end": "2623500"
  },
  {
    "text": "pester her and and Richard Smith are the three current leads and we're even",
    "start": "2623500",
    "end": "2629140"
  },
  {
    "text": "hoping to over time have this group of leads rotate uh uh this shouldn't be something that only only three people",
    "start": "2629140",
    "end": "2635140"
  },
  {
    "text": "can do we want to have a decent number of people in the project who can take on the the responsibility of being a lead",
    "start": "2635140",
    "end": "2641079"
  },
  {
    "text": "and making decisions but then you know after a year or two you know take that hat off relax a bit you know take take a",
    "start": "2641079",
    "end": "2648220"
  },
  {
    "text": "break from that and do do others part do other things within the project we also want to try and make sure that we keep",
    "start": "2648220",
    "end": "2654040"
  },
  {
    "text": "it as representative as possible we're going to try and make sure we don't have you know more than one person from any one organization long term but we need",
    "start": "2654040",
    "end": "2660339"
  },
  {
    "text": "the project to grow a bit before we can get to that so so all this is kind of you know our",
    "start": "2660339",
    "end": "2666400"
  },
  {
    "text": "core governance uh we have lots of plans going forward um I'll just briefly mention kind of",
    "start": "2666400",
    "end": "2671560"
  },
  {
    "text": "where carbon is at today uh we have we actually have a bunch of contributors to carbon",
    "start": "2671560",
    "end": "2676780"
  },
  {
    "text": "um already and this slide is actually out of date this was from July before we actually made it public uh uh but like",
    "start": "2676780",
    "end": "2683020"
  },
  {
    "text": "if I regenerate it you can't read anything we've we've got like another 10 plus people who who have been helping us",
    "start": "2683020",
    "end": "2689319"
  },
  {
    "text": "out the open source project you know our current uh focus in roadmap was going public trying to complete the",
    "start": "2689319",
    "end": "2696220"
  },
  {
    "text": "the core language design and trying to get a demo implementation of that core language design uh speaking of demo",
    "start": "2696220",
    "end": "2702700"
  },
  {
    "text": "implementations uh what's our demo implementation I said we don't have a real compiler what we have",
    "start": "2702700",
    "end": "2709060"
  },
  {
    "text": "is something else we have is a uh something that's not an implementation",
    "start": "2709060",
    "end": "2714700"
  },
  {
    "text": "but kind of like uh it's a way it's an interpreter that you can kind of put code into and you can see how it would",
    "start": "2714700",
    "end": "2720579"
  },
  {
    "text": "behave if you ran it through if you actually executed that code it's an abstract interpreter that just models",
    "start": "2720579",
    "end": "2727300"
  },
  {
    "text": "the semantics of carbons of the carbon language and and one of the people that's been helping out on carbon is",
    "start": "2727300",
    "end": "2733359"
  },
  {
    "text": "actually Matt godbolt and so when we were looking at the design of this we actually realized that it resembles something that we're probably all",
    "start": "2733359",
    "end": "2739000"
  },
  {
    "text": "familiar with compiler Explorer and we actually call this the carbon Explorer now uh with his with his encouragement",
    "start": "2739000",
    "end": "2745359"
  },
  {
    "text": "um and so so this basically lets us explore what carbon code would look like understand the semantics and and it's",
    "start": "2745359",
    "end": "2752319"
  },
  {
    "text": "also designed to be really easy to prototype things really easy to extend and play with new features uh and so",
    "start": "2752319",
    "end": "2758680"
  },
  {
    "text": "that's kind of our platform that we're exploring the implementation in right now uh and I will briefly see if we can get",
    "start": "2758680",
    "end": "2765220"
  },
  {
    "text": "a live demo to actually work here hopefully you all can see so if you go",
    "start": "2765220",
    "end": "2770500"
  },
  {
    "text": "to you know carbon.compilerexplorer.com it's live you can you can go there you can find this example",
    "start": "2770500",
    "end": "2776619"
  },
  {
    "text": "right if I if I remove my X here right I'm going to get a compilation error because it",
    "start": "2776619",
    "end": "2782680"
  },
  {
    "text": "I don't have good syntax I can add the X back uh I had more time I happen to do lots",
    "start": "2782680",
    "end": "2788440"
  },
  {
    "text": "more kind of demos uh one thing that you'll see here on the right hand side it is an assembly because this is this",
    "start": "2788440",
    "end": "2794319"
  },
  {
    "text": "is this you know interpreter and so what you'll see once you get past all the code Snippets",
    "start": "2794319",
    "end": "2800940"
  },
  {
    "text": "there's a lot of code Snippets here we go what you'll start to see here is uh an actual log of the compiler",
    "start": "2801160",
    "end": "2809619"
  },
  {
    "text": "Explorer implementing carbon And So It Begins type checking everything and it",
    "start": "2809619",
    "end": "2814660"
  },
  {
    "text": "begins you know processing uh declarations and type checking those and you can go through the the different",
    "start": "2814660",
    "end": "2820180"
  },
  {
    "text": "steps as it walks through every single step of evaluating each compile time expression that names each type that's",
    "start": "2820180",
    "end": "2827440"
  },
  {
    "text": "part of the type Checker right you can watch each and every step of the semantics actually get implemented in the Explorer which is super super nice",
    "start": "2827440",
    "end": "2834040"
  },
  {
    "text": "for understanding very subtle details of how the language semantics work it's",
    "start": "2834040",
    "end": "2839260"
  },
  {
    "text": "really cool feel free to check it out and explore it it's it's it's a fun little project uh and it gives us a",
    "start": "2839260",
    "end": "2844540"
  },
  {
    "text": "really great way to understand carbon and understand how it works foreign",
    "start": "2844540",
    "end": "2850480"
  },
  {
    "text": "but we haven't actually answered our question what comes next for C plus plus well I",
    "start": "2850480",
    "end": "2857859"
  },
  {
    "text": "still don't know right C plus plus is probably a big part of what comes next for C plus plus uh a lot of users",
    "start": "2857859",
    "end": "2864040"
  },
  {
    "text": "genuinely need backwards compatibility and there are a lot of good reasons to keep trying to improve C plus plus I don't want anyone to stop doing that",
    "start": "2864040",
    "end": "2871300"
  },
  {
    "text": "we also should probably be using garbage collected languages more often they're great programming environments for people so so if you can you should use",
    "start": "2871300",
    "end": "2877780"
  },
  {
    "text": "them and if you could use restitution to use rust that's fantastic so the real question for me is is you",
    "start": "2877780",
    "end": "2885099"
  },
  {
    "text": "know is carbon a part of what comes next for C plus plus and I don't even know the answer to this",
    "start": "2885099",
    "end": "2891760"
  },
  {
    "text": "I I don't think I can answer this I actually need all of you I need all the sequence plus Community to come and help",
    "start": "2891760",
    "end": "2898240"
  },
  {
    "text": "us answer this right and so so this talk and really the whole carbon project is our whole goal is to together find out",
    "start": "2898240",
    "end": "2907119"
  },
  {
    "text": "whether something like carbon a programming language like carbon is a part of what comes next for C plus plus",
    "start": "2907119",
    "end": "2914619"
  },
  {
    "text": "uh I hope that you're interested I I try to go to go through this as fast as I can uh but if hopefully we can do at",
    "start": "2914619",
    "end": "2922480"
  },
  {
    "text": "least a few questions uh and and I really hope to see you all of you on the Discord and maybe or at least like going",
    "start": "2922480",
    "end": "2928119"
  },
  {
    "text": "through the GitHub trying things out giving us feedback and and keeping an eye on the project because you know we've still got a long road to walk here",
    "start": "2928119",
    "end": "2934359"
  },
  {
    "text": "we're just getting started with the design we're just getting started with this Explorer we're gonna have years of work in front of us just to explore this",
    "start": "2934359",
    "end": "2941140"
  },
  {
    "text": "experiment understand whether this is something that makes sense and thank you again for having me all",
    "start": "2941140",
    "end": "2946180"
  },
  {
    "text": "the way over in Norway [Applause]",
    "start": "2946180",
    "end": "2955359"
  },
  {
    "text": "questions",
    "start": "2955359",
    "end": "2958019"
  },
  {
    "text": "one of the things fantastic uh one lesson picture I think",
    "start": "2960520",
    "end": "2967859"
  },
  {
    "text": "that I'm missing in typical across is destructive moves among us and uh yes",
    "start": "2967859",
    "end": "2973960"
  },
  {
    "text": "I've been told so probably never have but if that's something you could have",
    "start": "2973960",
    "end": "2981579"
  },
  {
    "text": "it's a great question I so the question is can we have destructive move semantics and I think the answer is",
    "start": "2981579",
    "end": "2987960"
  },
  {
    "text": "mostly yes but it is really hard and and the reason it's really hard is because of C plus",
    "start": "2987960",
    "end": "2994240"
  },
  {
    "text": "plus right the the people who are saying we can't get it on the C plus plus I think they have a point it's it's really difficult to graft destructive move",
    "start": "2994240",
    "end": "3001440"
  },
  {
    "text": "semantics onto C plus plus uh there's also some some other subtle details here but we this is actually part of carbon",
    "start": "3001440",
    "end": "3008099"
  },
  {
    "text": "that is designed uh if you go in and search on on car and carbon's design docs for um uh there's a proposal about",
    "start": "3008099",
    "end": "3016520"
  },
  {
    "text": "unformed objects and initialization and it talks about the idea of destructive",
    "start": "3016520",
    "end": "3022200"
  },
  {
    "text": "move and and how we're hoping to kind of get the best balance we can between",
    "start": "3022200",
    "end": "3027359"
  },
  {
    "text": "destructive moves like you have in Rust and and where C plus plus is coming from",
    "start": "3027359",
    "end": "3033079"
  },
  {
    "text": "what about reflection what about reflection great question",
    "start": "3037680",
    "end": "3044220"
  },
  {
    "text": "um I would love for us to do good reflection and and and we're trying to",
    "start": "3044220",
    "end": "3049980"
  },
  {
    "text": "set ourselves up for this uh using Expressions as the core grammar for",
    "start": "3049980",
    "end": "3056760"
  },
  {
    "text": "talking about types kind of kind of sets you up to do things like all methods on type objects and do",
    "start": "3056760",
    "end": "3065339"
  },
  {
    "text": "very reflectiony kinds of things with an incredibly natural syntax uh and so so",
    "start": "3065339",
    "end": "3072000"
  },
  {
    "text": "I'm hoping that we're set up very effectively for this something we're thinking a lot about however we've got",
    "start": "3072000",
    "end": "3077880"
  },
  {
    "text": "to walk before we run we've got it we've got a or I don't know what the right analogy is here we're we're like we've",
    "start": "3077880",
    "end": "3084000"
  },
  {
    "text": "gotta like gotta like have cell division before we can build like an organized life form with like intelligence and",
    "start": "3084000",
    "end": "3090480"
  },
  {
    "text": "start reflecting on it we're way earlier stages and so as we get the core language in place we're hoping we're",
    "start": "3090480",
    "end": "3096480"
  },
  {
    "text": "leaving good kind of Foundations to build reflection on but actually building reflection and building meta",
    "start": "3096480",
    "end": "3102599"
  },
  {
    "text": "programming I think is something that we're going to have to invest in in the future my main interest in reflection is",
    "start": "3102599",
    "end": "3108660"
  },
  {
    "text": "messaging and uh there's a lot of thing about reflection like uh calling",
    "start": "3108660",
    "end": "3115800"
  },
  {
    "text": "internal uh calling internal uh function etc etc which isn't that interesting but",
    "start": "3115800",
    "end": "3123480"
  },
  {
    "text": "when it comes where I really miss uh reflection is messaging being able to",
    "start": "3123480",
    "end": "3129180"
  },
  {
    "text": "send uh struct of some kind to to another place",
    "start": "3129180",
    "end": "3135780"
  },
  {
    "text": "yes I actually think this is not reflection I think that uh having some kind of",
    "start": "3135780",
    "end": "3143240"
  },
  {
    "text": "serializable and deserializable way to work with data structures it's something",
    "start": "3143240",
    "end": "3149099"
  },
  {
    "text": "that should be baked directly into the language you shouldn't need even reflection for that we should have a first class feature in the programming",
    "start": "3149099",
    "end": "3155940"
  },
  {
    "text": "language designed around uh how to kind of move data around when you don't have",
    "start": "3155940",
    "end": "3163319"
  },
  {
    "text": "kind of a you know a single address space with a single ABI and everything in memory and no no threads or anything",
    "start": "3163319",
    "end": "3170160"
  },
  {
    "text": "like that but when you have the more complex cases uh and so actually we're hoping to add that as kind of a core",
    "start": "3170160",
    "end": "3175980"
  },
  {
    "text": "language feature for carbon uh the the kind of directly addresses those use cases",
    "start": "3175980",
    "end": "3181500"
  },
  {
    "text": "but again early stages we this is like an idea in someone's head so I don't think we've",
    "start": "3181500",
    "end": "3188280"
  },
  {
    "text": "we've actually gotten it implemented yet uh hello so I'm curious how how would",
    "start": "3188280",
    "end": "3194520"
  },
  {
    "text": "you maintain interoperability with the C plus plus at assets continues to evolve in SQL space 23 26",
    "start": "3194520",
    "end": "3202859"
  },
  {
    "text": "Etc on and on yes uh so how do we how do we how do we interoperate with an Ever",
    "start": "3202859",
    "end": "3208680"
  },
  {
    "text": "larger and and moving Target of C plus plus um well the first step is is we have to",
    "start": "3208680",
    "end": "3216000"
  },
  {
    "text": "cheat a little bit so we don't need to interoperate with with all possible C plus plus we need to operate with real C",
    "start": "3216000",
    "end": "3222000"
  },
  {
    "text": "plus plus that exists in the world that helps us a little bit though not a lot because there's a lot of SQL Plus in",
    "start": "3222000",
    "end": "3228119"
  },
  {
    "text": "the world so the other big thing that we're relying on is we're going to build our interoperability on top of an existing",
    "start": "3228119",
    "end": "3235440"
  },
  {
    "text": "compiler we're primarily targeting playing although there's nothing there's nothing necessary about playing in that",
    "start": "3235440",
    "end": "3241440"
  },
  {
    "text": "but the idea is that if you take a working C plus plus compiler that has support for these different features",
    "start": "3241440",
    "end": "3247380"
  },
  {
    "text": "then we can build interoperability on top of that compiler and and reuse the",
    "start": "3247380",
    "end": "3252660"
  },
  {
    "text": "amazing amount of work that the client Community does to kind of keep up with the standards for our interoperability",
    "start": "3252660",
    "end": "3258300"
  },
  {
    "text": "story uh if we if we didn't do that I don't think we could we could possibly do this but that's that's the",
    "start": "3258300",
    "end": "3263640"
  },
  {
    "text": "fundamental idea is that we have to keep up we have to keep every time new features come in Decline and people",
    "start": "3263640",
    "end": "3268920"
  },
  {
    "text": "start using them we have to figure out how to interoperate them and map them effectively back into carbon to a",
    "start": "3268920",
    "end": "3275280"
  },
  {
    "text": "certain extent though if if C plus plus is moving faster than we can move in carbon then we've actually answered the",
    "start": "3275280",
    "end": "3281940"
  },
  {
    "text": "experimental question of carbon right because then this isn't a more effective Evolution process an evolution strategy",
    "start": "3281940",
    "end": "3287819"
  },
  {
    "text": "uh and so to a certain extent a core thesis of this experiment is that we",
    "start": "3287819",
    "end": "3292920"
  },
  {
    "text": "think we can keep up with C plus plus uh and and we'll learn we'll learn one way or the other",
    "start": "3292920",
    "end": "3299660"
  },
  {
    "text": "uh one of the things that was mentioned is that uh in C plus plus one of the",
    "start": "3304099",
    "end": "3310920"
  },
  {
    "text": "things that can hold it back is the backwards compatibility and how would that be administered in carbon would you",
    "start": "3310920",
    "end": "3316800"
  },
  {
    "text": "have different carbon aversions that would not interoperate with one another or would you also keep backwards",
    "start": "3316800",
    "end": "3322619"
  },
  {
    "text": "compatibility in a carbon great question uh so the whole idea around kind of language Evolution within",
    "start": "3322619",
    "end": "3329400"
  },
  {
    "text": "carbon is this idea of tool assisted upgrades uh and so we don't want to try and have",
    "start": "3329400",
    "end": "3336599"
  },
  {
    "text": "backwards compatibility in carbon we think we'd end up exactly like facing very similar in analogous technical",
    "start": "3336599",
    "end": "3341760"
  },
  {
    "text": "challenges at C plus spaces instead we'd like to try and have tools",
    "start": "3341760",
    "end": "3346980"
  },
  {
    "text": "and both both in the language itself language constructs and and actual tools",
    "start": "3346980",
    "end": "3352260"
  },
  {
    "text": "that developers can use to to handle the incremental migration",
    "start": "3352260",
    "end": "3357480"
  },
  {
    "text": "uh so at the what we've observed is that whenever you're updating from uh from an old programming language version to a",
    "start": "3357480",
    "end": "3363780"
  },
  {
    "text": "new one uh at a certain scale if you have enough code this is not a no-up there's some breaking change because at",
    "start": "3363780",
    "end": "3370319"
  },
  {
    "text": "the very least you need a new version of your compiler and and in our experience every new version of the compiler some",
    "start": "3370319",
    "end": "3377280"
  },
  {
    "text": "small things have changed enough that there is a cost we have to modify some",
    "start": "3377280",
    "end": "3382740"
  },
  {
    "text": "code in order to make those updates and what we want to do is we want to try and build tools and an Automation and",
    "start": "3382740",
    "end": "3389640"
  },
  {
    "text": "language features that just dramatically scale up the kinds of changes that",
    "start": "3389640",
    "end": "3394980"
  },
  {
    "text": "people can afford to take when they're ready to do an upgrade uh this is fairly similar to Russ epochs if you're",
    "start": "3394980",
    "end": "3401339"
  },
  {
    "text": "familiar with them where they try or not epocs anymore they're uh editions I think okay which name they picked for",
    "start": "3401339",
    "end": "3407760"
  },
  {
    "text": "them but they they have they have Milestones that they try and Target and and you know when they're going to",
    "start": "3407760",
    "end": "3413400"
  },
  {
    "text": "upgrade and see like major and significant changes to the language you can plan for it there's a period of time",
    "start": "3413400",
    "end": "3419940"
  },
  {
    "text": "where you can kind of manage the migration of your source code from the old version to the new we think we can",
    "start": "3419940",
    "end": "3425339"
  },
  {
    "text": "give people these kinds of tools so that they can actually do the upgrade and they have enough interoperability",
    "start": "3425339",
    "end": "3431099"
  },
  {
    "text": "between versions to do the upgrade but they are going to have to keep moving because if we don't do that we don't get",
    "start": "3431099",
    "end": "3437640"
  },
  {
    "text": "to really solve these problems",
    "start": "3437640",
    "end": "3440779"
  },
  {
    "text": "okay I think that's it that's it well thank all of you again so",
    "start": "3445460",
    "end": "3450900"
  },
  {
    "text": "much for having me uh especially from the other side of the planet uh it's been it's been a real pleasure to be able to actually talk to you even a",
    "start": "3450900",
    "end": "3457380"
  },
  {
    "text": "little bit and and if you have more questions or if you're interested in the Projects please get on the GitHub join",
    "start": "3457380",
    "end": "3462420"
  },
  {
    "text": "the the Discord you can join the Discord and ping me directly there or just ask the community I'd love to have you and",
    "start": "3462420",
    "end": "3468059"
  },
  {
    "text": "I'd love to have more questions so thank you again",
    "start": "3468059",
    "end": "3471859"
  }
]