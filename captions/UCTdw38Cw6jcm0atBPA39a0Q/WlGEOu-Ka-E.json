[
  {
    "start": "0",
    "end": "170000"
  },
  {
    "text": "hello everyone I suppose we can start I'm Susanna Sakawa I'm a developer",
    "start": "9910",
    "end": "15500"
  },
  {
    "text": "advocate at jetbrains and today I'm going to talk about Courtland cortines",
    "start": "15500",
    "end": "21350"
  },
  {
    "text": "I can hardly see you but probably it",
    "start": "21350",
    "end": "26810"
  },
  {
    "text": "will work sister people on the first row like and I can see you and I will be",
    "start": "26810",
    "end": "33290"
  },
  {
    "text": "able to see where they are confused or not because this topic is kind of a complicated one but I hope to share the",
    "start": "33290",
    "end": "40580"
  },
  {
    "text": "power that this kind of old new approach",
    "start": "40580",
    "end": "45980"
  },
  {
    "text": "brings calling Hortense is a concept that is available already so no sorry",
    "start": "45980",
    "end": "54260"
  },
  {
    "text": "not column but coroutine as a concept is available for a lot of decades and at",
    "start": "54260",
    "end": "61940"
  },
  {
    "text": "first it was used to model a synchronous programming even before threads were",
    "start": "61940",
    "end": "68420"
  },
  {
    "text": "invented and for instance the sharp I think of it is feature that works that",
    "start": "68420",
    "end": "74090"
  },
  {
    "text": "uses coroutines under the hood in the underlying implementation but you as a developer you only use a sink and a",
    "start": "74090",
    "end": "80450"
  },
  {
    "text": "weight functionality there are proteins and channels in go that are quite popular and in Cortland with some",
    "start": "80450",
    "end": "87880"
  },
  {
    "text": "differences it's basically the same idea the same concept and there are many more languages and approaches that also I",
    "start": "87880",
    "end": "96399"
  },
  {
    "text": "interested in adopting the same pattern so after hearing about Kali gorgeous you",
    "start": "96399",
    "end": "102439"
  },
  {
    "text": "will not only learn about hopefully not only learn about coffee qualities but about coroutines in general and that is",
    "start": "102439",
    "end": "108890"
  },
  {
    "text": "one of my goals who is here c-sharp developers ok so my guess was correct because I",
    "start": "108890",
    "end": "116359"
  },
  {
    "text": "kind of assumed that I will do a talk for people who already know what is a sinker weight because in the Java world",
    "start": "116359",
    "end": "124149"
  },
  {
    "text": "there is no similar concept and we need to start from scratch and explain how it",
    "start": "124149",
    "end": "130009"
  },
  {
    "text": "works I will briefly explain but I want to go deep into detail here in Cortland",
    "start": "130009",
    "end": "137090"
  },
  {
    "text": "you can use the same a sink and a weight as in c-sharp ok it looks a bit",
    "start": "137090",
    "end": "142640"
  },
  {
    "text": "in c-sharp you use a sink and a weight and I think into it our language",
    "start": "142640",
    "end": "148190"
  },
  {
    "text": "keyboards in courtly I think underweight are irregular functions so it looks a bit differently",
    "start": "148190",
    "end": "155300"
  },
  {
    "text": "you can specify ty for purchase image function and it will return you the",
    "start": "155300",
    "end": "160760"
  },
  {
    "text": "deferred object which is similar to tasks so we have another name for tasks in court and deferred but the concept is",
    "start": "160760",
    "end": "168380"
  },
  {
    "text": "is the same it's very similar interesting thing here is that I think in the wait in c-sharp our language",
    "start": "168380",
    "end": "175820"
  },
  {
    "start": "170000",
    "end": "170000"
  },
  {
    "text": "keywords in Kotlin they are just functions defined in the standard library and the ability to define them",
    "start": "175820",
    "end": "183320"
  },
  {
    "text": "as functions as many more functions that library or regular that will behave in",
    "start": "183320",
    "end": "190820"
  },
  {
    "text": "this way is based on the code or the concept of cortines and together today",
    "start": "190820",
    "end": "196940"
  },
  {
    "text": "we are going to discuss how exactly it works and water qualities my agenda for today talk is at first I want to discuss",
    "start": "196940",
    "end": "203870"
  },
  {
    "text": "suspend functions so that is something to you that Kotlin brings to the picture",
    "start": "203870",
    "end": "209510"
  },
  {
    "text": "that is you you will write the code in a bit different manner in cosmo rather",
    "start": "209510",
    "end": "216680"
  },
  {
    "text": "than just using cosmetic in so sharp then i want to cover what i want to",
    "start": "216680",
    "end": "222049"
  },
  {
    "text": "explain what is the crew team then we are going to discuss your actual concurrency that is another important",
    "start": "222049",
    "end": "228799"
  },
  {
    "text": "thing that comes to the world with causing corrosion support and i want to add talking about Charles so let's start",
    "start": "228799",
    "end": "237950"
  },
  {
    "text": "and let's first discuss this but suspend functions how to write code with the",
    "start": "237950",
    "end": "245239"
  },
  {
    "text": "suspect function so encoding again it's a bit differently let's start with example let's imagine we have simple",
    "start": "245239",
    "end": "251600"
  },
  {
    "start": "247000",
    "end": "247000"
  },
  {
    "text": "consecutive logic and let's imagine that our login method needs to do some",
    "start": "251600",
    "end": "258979"
  },
  {
    "text": "errands the authentication does need to go to a service so it might be time consuming and we would like to avoid",
    "start": "258979",
    "end": "267500"
  },
  {
    "text": "here blocking the threat while calling this method let's imagine that load goes",
    "start": "267500",
    "end": "272840"
  },
  {
    "text": "to I don't know remote database that's another probably blocking method that might",
    "start": "272840",
    "end": "278870"
  },
  {
    "text": "block the thread that is time-consuming and both these methods will just await",
    "start": "278870",
    "end": "284960"
  },
  {
    "text": "the result for most of the time and just writing this code straightforwardly in a",
    "start": "284960",
    "end": "292660"
  },
  {
    "text": "consequent fashion is that good because we are blocking the thread we use we",
    "start": "292660",
    "end": "299840"
  },
  {
    "text": "waste resources this thread just ways for most of the time we would like to avoid it and if we its main UI thread",
    "start": "299840",
    "end": "306800"
  },
  {
    "text": "it's even worse because our user is booked this is the general story that you probably listen when you are",
    "start": "306800",
    "end": "313810"
  },
  {
    "text": "listening to talk about a sink of a 10 C sharp and indeed C sharp with a sink of",
    "start": "313810",
    "end": "320180"
  },
  {
    "text": "weight brings the solution to this and say okay now you extract your function",
    "start": "320180",
    "end": "327110"
  },
  {
    "text": "that goes to service into something returning a task in corteguay case it",
    "start": "327110",
    "end": "332540"
  },
  {
    "text": "will be deferred and then you start this function will start our these requests",
    "start": "332540",
    "end": "339620"
  },
  {
    "text": "are synchronously and then here you will need to call a weight to use a way to await for this result this solution",
    "start": "339620",
    "end": "346550"
  },
  {
    "text": "doesn't block underlying thread it is fine ice and everything works great in",
    "start": "346550",
    "end": "352970"
  },
  {
    "text": "Cortland again you can use this similar approach you can write the code in very",
    "start": "352970",
    "end": "359300"
  },
  {
    "text": "similar fashion task is replaced with deferred you call a sync you call I",
    "start": "359300",
    "end": "365990"
  },
  {
    "text": "think as a function and the weight is also as a function available on this deferred object it's not a language",
    "start": "365990",
    "end": "372260"
  },
  {
    "text": "concern however in Cortland you can also do better than this and instead of",
    "start": "372260",
    "end": "379900"
  },
  {
    "text": "defining a function that returns a future a deferred or responding to task",
    "start": "379900",
    "end": "386870"
  },
  {
    "text": "in c-sharp you can mark this function with a suspend modifier say meaning that",
    "start": "386870",
    "end": "395240"
  },
  {
    "start": "388000",
    "end": "388000"
  },
  {
    "text": "this function can somehow suspend under",
    "start": "395240",
    "end": "400670"
  },
  {
    "text": "the hood this this function can probe will most probably wait for something",
    "start": "400670",
    "end": "406400"
  },
  {
    "text": "and it might be suspended while running this code this works very",
    "start": "406400",
    "end": "414400"
  },
  {
    "text": "similar to how I think a wet work because this in a sink weight case a",
    "start": "414400",
    "end": "421190"
  },
  {
    "text": "weight also marks at the point when the",
    "start": "421190",
    "end": "426250"
  },
  {
    "text": "computation might be suspended so suspend function is a function that can",
    "start": "426250",
    "end": "432620"
  },
  {
    "text": "be suspended in the case of c-sharp we have explicitly suspension points marked",
    "start": "432620",
    "end": "439460"
  },
  {
    "text": "with a weight if you think about it that the same idea you use a weight somewhere",
    "start": "439460",
    "end": "446240"
  },
  {
    "text": "when your function in this case show user in for function might be suspended",
    "start": "446240",
    "end": "453950"
  },
  {
    "text": "waiting until the result is ready and in Kotlin it works in the same way with the",
    "start": "453950",
    "end": "461330"
  },
  {
    "text": "only difference that now any function any suspend function call is a marker",
    "start": "461330",
    "end": "468500"
  },
  {
    "text": "off of this function that can be suspended not only a weight I think in",
    "start": "468500",
    "end": "475340"
  },
  {
    "text": "the weight can be used in this way but any fraction can be marked as suspended",
    "start": "475340",
    "end": "480350"
  },
  {
    "text": "and as a result you no longer need to put a way to all the places where you're",
    "start": "480350",
    "end": "486850"
  },
  {
    "text": "where in your code you need to avoid for the result where where there is some",
    "start": "486850",
    "end": "493040"
  },
  {
    "text": "suspension point the code now the resulting code in coding case looks just",
    "start": "493040",
    "end": "498980"
  },
  {
    "text": "the same as the one before the wine and the first slide when we had when we",
    "start": "498980",
    "end": "505640"
  },
  {
    "text": "wrote everything in a blocking manner you're wrong but looking manner IntelliJ",
    "start": "505640",
    "end": "511460"
  },
  {
    "text": "highlights all the points where the fraction might be suspended so here this",
    "start": "511460",
    "end": "516950"
  },
  {
    "text": "side you see this broken errors and this errors are markers in IDE showing that",
    "start": "516950",
    "end": "524660"
  },
  {
    "text": "here you call suspend function here your computation might be suspended my might",
    "start": "524660",
    "end": "531920"
  },
  {
    "text": "be broken there is a question where it's",
    "start": "531920",
    "end": "537440"
  },
  {
    "text": "possible to call as a span factor so in Cortland anyone can't define a suspend function",
    "start": "537440",
    "end": "543540"
  },
  {
    "text": "the question is okay where can we call them and if you try to to call it from a",
    "start": "543540",
    "end": "552900"
  },
  {
    "text": "regular function like Josh right function test and call our suspend",
    "start": "552900",
    "end": "558330"
  },
  {
    "text": "function from this test then you'll see the compiler error that suspend function",
    "start": "558330",
    "end": "564540"
  },
  {
    "text": "show user should be called only from a curtain or another saucepan function and",
    "start": "564540",
    "end": "570560"
  },
  {
    "text": "that brings us to the concepts to the concept of coroutines saying that this",
    "start": "570560",
    "end": "577430"
  },
  {
    "text": "suspend function can be called only inside the core routine or another",
    "start": "577430",
    "end": "582960"
  },
  {
    "text": "suspend function and now I'm going to move to the concept of curtains before",
    "start": "582960",
    "end": "589440"
  },
  {
    "text": "we move on I want to probably highlight",
    "start": "589440",
    "end": "594780"
  },
  {
    "text": "a bit more why we decided why in Kotlin it was decided this way so that use any",
    "start": "594780",
    "end": "604230"
  },
  {
    "text": "suspend function as a marker instead of using classical a sink a weight approach",
    "start": "604230",
    "end": "609420"
  },
  {
    "text": "in at first instance our pew need to put this weight markers all the time but",
    "start": "609420",
    "end": "615060"
  },
  {
    "text": "more importantly in c-sharp when you call when you just call a function that",
    "start": "615060",
    "end": "622610"
  },
  {
    "text": "calls that starts some computation a synchronously without calling a weight",
    "start": "622610",
    "end": "628950"
  },
  {
    "text": "then you will start the computation in erm okay I'm sorry",
    "start": "628950",
    "end": "634320"
  },
  {
    "text": "I will just yes this slide you will just",
    "start": "634320",
    "end": "644940"
  },
  {
    "text": "remember that Slifer this and so why not why not why curtain doesn't use a weight",
    "start": "644940",
    "end": "652380"
  },
  {
    "text": "keyword similar to what we have in c-sharp in c-sharp if you start if you",
    "start": "652380",
    "end": "657870"
  },
  {
    "text": "just write the function that throws that stress I think honors computation",
    "start": "657870",
    "end": "663840"
  },
  {
    "text": "concurrently by default that that will",
    "start": "663840",
    "end": "668850"
  },
  {
    "text": "be like concurrent version and to make it sequential you will need to",
    "start": "668850",
    "end": "675390"
  },
  {
    "text": "explicitly call a wait on this function and cortland kind of changes this default now if you",
    "start": "675390",
    "end": "683550"
  },
  {
    "text": "just call the suspend function that just means okay this function somehow can be suspended under the hood and to make it",
    "start": "683550",
    "end": "693589"
  },
  {
    "text": "concurrent to start your your computation concurrently you will need",
    "start": "693589",
    "end": "699570"
  },
  {
    "text": "to use explicit syntax for this so the idea is to to modify this default choice",
    "start": "699570",
    "end": "707399"
  },
  {
    "text": "of how to write the code and to make all the concurrency explicit while there",
    "start": "707399",
    "end": "713300"
  },
  {
    "text": "while at the same time making this mechanism or suspension in built-in in",
    "start": "713300",
    "end": "719790"
  },
  {
    "text": "the language while using the suspend functions any questions so far you can",
    "start": "719790",
    "end": "729480"
  },
  {
    "text": "ask questions during the talk yes",
    "start": "729480",
    "end": "734029"
  },
  {
    "text": "yeah how do how do how do it it's possible to start tasks concurrently",
    "start": "743840",
    "end": "752870"
  },
  {
    "text": "yes multiple curses day let's let's move on then and I will show this example so",
    "start": "752870",
    "end": "758220"
  },
  {
    "text": "yes that's possible so now we are going to talk about coroutines what is the",
    "start": "758220",
    "end": "764370"
  },
  {
    "text": "concept of quarantine and how and how basically to start several computations",
    "start": "764370",
    "end": "770490"
  },
  {
    "text": "are synchronous second the same way there are short answer is very similar",
    "start": "770490",
    "end": "776250"
  },
  {
    "text": "to to what you used to and that's possible so what is a karate karate is a",
    "start": "776250",
    "end": "782700"
  },
  {
    "text": "computation that can be suspended what does it mean we start a computation in",
    "start": "782700",
    "end": "788370"
  },
  {
    "text": "the threat according and then at some point when it needs to wait for Network",
    "start": "788370",
    "end": "794610"
  },
  {
    "text": "result when it needs to wait for some for for some result of its request it",
    "start": "794610",
    "end": "801180"
  },
  {
    "text": "can be suspended that means that we can put it off the threat storage in memory",
    "start": "801180",
    "end": "806940"
  },
  {
    "text": "and then restored there this I think wait in C sharp works in the same way",
    "start": "806940",
    "end": "814470"
  },
  {
    "text": "under the hood because the it's also implemented by a question so that's very very generic way to explain how all crew",
    "start": "814470",
    "end": "821040"
  },
  {
    "text": "teams work and while our work routine is suspended so this computation that waits",
    "start": "821040",
    "end": "826860"
  },
  {
    "text": "for our network result the thread is free to be occupied with other tasks and",
    "start": "826860",
    "end": "832080"
  },
  {
    "text": "activities so we can start some other computations here while our coding is",
    "start": "832080",
    "end": "837750"
  },
  {
    "text": "waiting for the result and when the result is coming then this crew team can",
    "start": "837750",
    "end": "843420"
  },
  {
    "text": "be restored to the main thread how to create a crew team and how to start",
    "start": "843420",
    "end": "849620"
  },
  {
    "text": "for instance this a synchronous computation well already know that because we see this a sync board I think",
    "start": "849620",
    "end": "857520"
  },
  {
    "text": "is one of so called coding builders they are just library functions again a sink",
    "start": "857520",
    "end": "863100"
  },
  {
    "start": "860000",
    "end": "860000"
  },
  {
    "text": "is one of the library functions but there are more so free so there is another one launch mentions in the",
    "start": "863100",
    "end": "869100"
  },
  {
    "text": "previous talk I will for simplicity I will just use a sink in this talk so",
    "start": "869100",
    "end": "874410"
  },
  {
    "text": "there are different library functions that can charge computations in a different manner I think starts a new computation",
    "start": "874410",
    "end": "880590"
  },
  {
    "text": "synchronously you can use our unblocking which is a common entry point in this",
    "start": "880590",
    "end": "885900"
  },
  {
    "text": "way it starts a new cube relation either in the blocking minor it often is used",
    "start": "885900",
    "end": "891360"
  },
  {
    "text": "in main functions and tests but when you write code you most commonly will use a sink and other library functions",
    "start": "891360",
    "end": "898130"
  },
  {
    "text": "interestingly here is that different libraries can define their own routine",
    "start": "898130",
    "end": "903630"
  },
  {
    "text": "builders so because Croton builders is just a pattern that should be fooled when you write code in Kotlin it's",
    "start": "903630",
    "end": "912150"
  },
  {
    "text": "possible to define Croton builders that are specific to the library to some use",
    "start": "912150",
    "end": "918900"
  },
  {
    "text": "case to some specific case in the library let's look at how very simple or",
    "start": "918900",
    "end": "926730"
  },
  {
    "start": "922000",
    "end": "922000"
  },
  {
    "text": "load classical load image exam example works this one uses a single weight and",
    "start": "926730",
    "end": "933260"
  },
  {
    "text": "again I would say that it's very similar to how it works in c-sharp and then we'll we'll see how it how it works with",
    "start": "933260",
    "end": "941310"
  },
  {
    "text": "general suspend function but it explains this mechanism mechanism of suspension",
    "start": "941310",
    "end": "946589"
  },
  {
    "text": "equality so this example we have load image a sinc function that calls our",
    "start": "946589",
    "end": "953010"
  },
  {
    "start": "949000",
    "end": "949000"
  },
  {
    "text": "sink which starts and you a synchronous computation a sink creates a new crew",
    "start": "953010",
    "end": "958350"
  },
  {
    "text": "teen and because I think I think is defined this way it starts new",
    "start": "958350",
    "end": "963360"
  },
  {
    "text": "computation a synchronously I will mark that okay we probably will start it on a",
    "start": "963360",
    "end": "968910"
  },
  {
    "text": "different thread and I will mark this load image a sink coroutine with this a",
    "start": "968910",
    "end": "979020"
  },
  {
    "text": "green car then we call process image inside process image where first load",
    "start": "979020",
    "end": "989339"
  },
  {
    "text": "images load images sync is called and then a weight is called a weight is a",
    "start": "989339",
    "end": "994920"
  },
  {
    "text": "suspension point and a weight function is just defined as a suspend function in",
    "start": "994920",
    "end": "1001640"
  },
  {
    "text": "kata library so that what I was talking about you that a weight and a sink",
    "start": "1001640",
    "end": "1006890"
  },
  {
    "text": "adjust library functions in contact they are not key and the power is that similar concept",
    "start": "1006890",
    "end": "1014990"
  },
  {
    "text": "similar constructs similar library functions might be defined and added to libraries a way to define as a spent",
    "start": "1014990",
    "end": "1021710"
  },
  {
    "text": "function and that means that a weight is that a weight actually can suspend the",
    "start": "1021710",
    "end": "1028069"
  },
  {
    "text": "Croteam in this case we already started our load image our sync on thread",
    "start": "1028070",
    "end": "1034720"
  },
  {
    "text": "now when the code continues its execution here I just extracted the",
    "start": "1034720",
    "end": "1040670"
  },
  {
    "text": "result of low temperature I think to a variable in order to better understand what's going on we straw the reference",
    "start": "1040670",
    "end": "1046910"
  },
  {
    "text": "to this computation in a deferred variable in case of c-sharp it's stored just in a task variable and",
    "start": "1046910",
    "end": "1052520"
  },
  {
    "text": "then when we call a weight it is the marker that says this at this point the",
    "start": "1052520",
    "end": "1058340"
  },
  {
    "text": "computation should average for something and unless the result is already available the main capitation must be suspended so",
    "start": "1058340",
    "end": "1065900"
  },
  {
    "text": "if our image was cashed and the result was returned immediately then a weight",
    "start": "1065900",
    "end": "1071060"
  },
  {
    "text": "is not doesn't need to suspend the computation it just can continue to execution in our case the image is",
    "start": "1071060",
    "end": "1078260"
  },
  {
    "text": "loading so a weight suspends the process image computation that meanwhile a ways",
    "start": "1078260",
    "end": "1085520"
  },
  {
    "text": "for the result so here now process image computation is suspended and the first",
    "start": "1085520",
    "end": "1092180"
  },
  {
    "text": "thread is free to be occupied with other tasks and activities when load image",
    "start": "1092180",
    "end": "1099500"
  },
  {
    "text": "loads the image and returns the result then this process image coroutine can be",
    "start": "1099500",
    "end": "1107510"
  },
  {
    "text": "returned to the thread can be so called resumed and can continue its execution",
    "start": "1107510",
    "end": "1114710"
  },
  {
    "text": "so that's how general mechanism of suspending the current works again this",
    "start": "1114710",
    "end": "1120770"
  },
  {
    "text": "picture also describes how it works in c-sharp in cotan case because every",
    "start": "1120770",
    "end": "1126230"
  },
  {
    "text": "suspend function might be at the point where the crew teen is suspended the",
    "start": "1126230",
    "end": "1132080"
  },
  {
    "text": "crew team can be suspended for instance several times so in case of show user we have this our show user function and it",
    "start": "1132080",
    "end": "1140120"
  },
  {
    "text": "does two network requests that but surely might be just might await for the",
    "start": "1140120",
    "end": "1148370"
  },
  {
    "text": "result and if they're implemented in the correct fashion if they use the suspension mechanism then that means",
    "start": "1148370",
    "end": "1154460"
  },
  {
    "text": "that this corrosion can be suspended twice the first time when we call login",
    "start": "1154460",
    "end": "1161120"
  },
  {
    "text": "and it waits for some result second time when we call load and again",
    "start": "1161120",
    "end": "1166790"
  },
  {
    "text": "it waits for the result when I talk when I'm talking that here in this example",
    "start": "1166790",
    "end": "1173870"
  },
  {
    "text": "coroutine will be suspended twice you can ask which coating which routine",
    "start": "1173870",
    "end": "1179960"
  },
  {
    "text": "get suspended when as a span function is called as their answer is very similar",
    "start": "1179960",
    "end": "1185380"
  },
  {
    "text": "the one simple the one that just contains this suspend function in our",
    "start": "1185380",
    "end": "1192910"
  },
  {
    "text": "application we need to call show user from I've told you either suspend",
    "start": "1192910",
    "end": "1199220"
  },
  {
    "text": "function or an oil crew team let's say we call this show user from some",
    "start": "1199220",
    "end": "1204890"
  },
  {
    "text": "coroutine started with a sink and when I'm telling you that show user that this",
    "start": "1204890",
    "end": "1211970"
  },
  {
    "text": "cartoon will be suspended when show user ways for for something that means that",
    "start": "1211970",
    "end": "1217910"
  },
  {
    "text": "this routine created by a sink the parent crew team the outer core team will be suspended you can define suspend",
    "start": "1217910",
    "end": "1230900"
  },
  {
    "start": "1226000",
    "end": "1226000"
  },
  {
    "text": "functions that call different suspend function so you just need to mark these",
    "start": "1230900",
    "end": "1236870"
  },
  {
    "text": "all these functions as suspend so in Kotla there are like two worlds regular functions and suspend functions and",
    "start": "1236870",
    "end": "1243170"
  },
  {
    "text": "suspend functions mean that they are special functions that should be called",
    "start": "1243170",
    "end": "1249980"
  },
  {
    "text": "in on the side coroutines and they mark that in this case the crew team can be suspended and their call",
    "start": "1249980",
    "end": "1259340"
  },
  {
    "text": "stack of your suspend functions might be different like as deep as you need so",
    "start": "1259340",
    "end": "1265280"
  },
  {
    "text": "for instance here we first start co-routine with calling a sink then we",
    "start": "1265280",
    "end": "1270950"
  },
  {
    "text": "call show user show user inside this function calls another",
    "start": "1270950",
    "end": "1277250"
  },
  {
    "text": "spen functions like load user then at some point it needs to call either wait",
    "start": "1277250",
    "end": "1283460"
  },
  {
    "text": "or another library function that in its turn uses the language primitive that",
    "start": "1283460",
    "end": "1289640"
  },
  {
    "text": "actually says that okay this is the point when corrosion is suspended so at",
    "start": "1289640",
    "end": "1295220"
  },
  {
    "text": "the language level we have suspend corrosion function which will actually suspend a routine but as an application",
    "start": "1295220",
    "end": "1303020"
  },
  {
    "text": "developer you will you can defer you",
    "start": "1303020",
    "end": "1308270"
  },
  {
    "text": "will probably never use it you use library functions like a weight and",
    "start": "1308270",
    "end": "1313430"
  },
  {
    "text": "other different libraries for instance you can use library that allows you to",
    "start": "1313430",
    "end": "1318770"
  },
  {
    "text": "the from Network requests in the suspend function and so on or to connect to data bases in the suspend function a fashion",
    "start": "1318770",
    "end": "1325490"
  },
  {
    "text": "is own you use suspend routine if you elaborate author or you want to add to",
    "start": "1325490",
    "end": "1331940"
  },
  {
    "text": "write a wrapper to your library in this case you can write this wrapper too because if you have a library that",
    "start": "1331940",
    "end": "1338000"
  },
  {
    "text": "doesn't support suspend this is this approach on the futures or all callbacks",
    "start": "1338000",
    "end": "1345920"
  },
  {
    "text": "in this case you can write wrappers and tries the service you will use a special",
    "start": "1345920",
    "end": "1351260"
  },
  {
    "text": "template and you suspend crotons but in general case you only you're living this",
    "start": "1351260",
    "end": "1356990"
  },
  {
    "text": "application lever as an application developer and you can define your suspend functions which call another",
    "start": "1356990",
    "end": "1363230"
  },
  {
    "text": "suspend fractions which under the hood will call a weight or other library functions and that turns out to be",
    "start": "1363230",
    "end": "1369110"
  },
  {
    "text": "really convenient because now you can you don't need to put all their waists everywhere but you can just keep in mind",
    "start": "1369110",
    "end": "1378170"
  },
  {
    "text": "that okay this is the function that might be suspended this at some point and you can structure your code",
    "start": "1378170",
    "end": "1384230"
  },
  {
    "text": "accordingly which results in a and really a better structure event when the",
    "start": "1384230",
    "end": "1392360"
  },
  {
    "text": "core routine is suspended the whole object of karate is stored on the heap",
    "start": "1392360",
    "end": "1400340"
  },
  {
    "text": "so in this case we have this call stack and it represents the core routine the",
    "start": "1400340",
    "end": "1408980"
  },
  {
    "text": "protein is throat using called object and when the Cortina suspect suspended this object is just short in",
    "start": "1408980",
    "end": "1415820"
  },
  {
    "text": "memory and it saves the call stack together with all the captured variables along the way",
    "start": "1415820",
    "end": "1421309"
  },
  {
    "text": "so the grooty stores all the information to be able to resume it that how it",
    "start": "1421309",
    "end": "1427249"
  },
  {
    "text": "works under the hood and when here is a resume protein the cost records are stored and the coroutine continues its",
    "start": "1427249",
    "end": "1434779"
  },
  {
    "text": "execution you can ask here on which thread does",
    "start": "1434779",
    "end": "1441440"
  },
  {
    "text": "the crew teen start and resume and the answer is that you specify that when you",
    "start": "1441440",
    "end": "1448909"
  },
  {
    "text": "create a code so you can use some default parameters but you can provide explicit parameters for instance you you",
    "start": "1448909",
    "end": "1456590"
  },
  {
    "start": "1452000",
    "end": "1452000"
  },
  {
    "text": "can decide that I won't run this go routine on a thread pool organs and",
    "start": "1456590",
    "end": "1462019"
  },
  {
    "text": "decide I want to run this routine or the men who I thread and you just specified",
    "start": "1462019",
    "end": "1467899"
  },
  {
    "text": "explicitly in your application or you can use some default parameter for vocal routines in a give all of the proteins",
    "start": "1467899",
    "end": "1474529"
  },
  {
    "text": "in the given scope here I say run your origin routine on the thread however",
    "start": "1474529",
    "end": "1480950"
  },
  {
    "text": "more correct would be would be say schedule your resumed protein on a given",
    "start": "1480950",
    "end": "1487309"
  },
  {
    "text": "thread because obviously if you resume your computation and it should run on",
    "start": "1487309",
    "end": "1493220"
  },
  {
    "text": "the main UI thread if this man who I throw it is busy and this this time this routine will be just",
    "start": "1493220",
    "end": "1499850"
  },
  {
    "text": "here dude no Tron immediately and it will be run when the thread gets free the same with the thread pool if all the",
    "start": "1499850",
    "end": "1507590"
  },
  {
    "text": "threads in the thread pool are busy then it should wait a bit more until something is it's free and there are",
    "start": "1507590",
    "end": "1516289"
  },
  {
    "text": "other dispatcher there are other dispatchers that for instance can add motorized dynamically if if everything",
    "start": "1516289",
    "end": "1524269"
  },
  {
    "text": "else if every every one is a good bite but here interesting thing also is that",
    "start": "1524269",
    "end": "1530389"
  },
  {
    "text": "you can define your own dispatchers you can create your own way specify how to",
    "start": "1530389",
    "end": "1538240"
  },
  {
    "text": "how to schedule how to run desk routines but for majority of the cases the",
    "start": "1538240",
    "end": "1543379"
  },
  {
    "text": "default ones are L and work quite well coroutines can't be nested inside one another so it's very",
    "start": "1543379",
    "end": "1550460"
  },
  {
    "text": "easy to start a crew teen inside another Co routine and you can ask here is there",
    "start": "1550460",
    "end": "1558050"
  },
  {
    "text": "any relationship between parent and child crew team as their answer is yes",
    "start": "1558050",
    "end": "1563780"
  },
  {
    "text": "and it turns out us to talk about",
    "start": "1563780",
    "end": "1568910"
  },
  {
    "start": "1566000",
    "end": "1566000"
  },
  {
    "text": "structured concurrency everything that I've told before especially of how the",
    "start": "1568910",
    "end": "1576320"
  },
  {
    "text": "suspension mechanism works this is known for decades right now and this is already implemented in many languages in",
    "start": "1576320",
    "end": "1583070"
  },
  {
    "text": "Kotlin new approach is using the suspend function but some may argue that it",
    "start": "1583070",
    "end": "1588740"
  },
  {
    "text": "mostly syntactic think however really convenient this structure concurrency is something",
    "start": "1588740",
    "end": "1596510"
  },
  {
    "text": "new it's also can be applied note and can be promoted not only in Courtley there are some libraries they try to",
    "start": "1596510",
    "end": "1602120"
  },
  {
    "text": "implement it for instance for Python but in Cortland it R is something that is",
    "start": "1602120",
    "end": "1608330"
  },
  {
    "text": "built-in and interestingly at first Cortland didn't have structural",
    "start": "1608330",
    "end": "1614540"
  },
  {
    "text": "concurrency so we have the routines for some time was a war available in",
    "start": "1614540",
    "end": "1620510"
  },
  {
    "text": "experimental state for quite a long time for several months or even a year and during this time it was found out that",
    "start": "1620510",
    "end": "1628810"
  },
  {
    "text": "just keeping the structure the relationship between different routines",
    "start": "1628810",
    "end": "1634550"
  },
  {
    "text": "by hand is quite complicated and it can be done automatically by the compiler so",
    "start": "1634550",
    "end": "1641300"
  },
  {
    "text": "let's discuss what structured structure concurrency is and how it works let's",
    "start": "1641300",
    "end": "1649070"
  },
  {
    "start": "1648000",
    "end": "1648000"
  },
  {
    "text": "start with an example let's say we have two asynchronous coroutines",
    "start": "1649070",
    "end": "1655330"
  },
  {
    "text": "so you can easily start computations as your own asleep for this you still use a",
    "start": "1655330",
    "end": "1662360"
  },
  {
    "text": "single weight so suspend suspend functions really great when you when you",
    "start": "1662360",
    "end": "1667760"
  },
  {
    "text": "don't have concurrency you just want something to be done a synchronous and wait for the result for concurrent cases",
    "start": "1667760",
    "end": "1674990"
  },
  {
    "text": "I think a wage are all great in this case we have there overlay function that",
    "start": "1674990",
    "end": "1681560"
  },
  {
    "text": "probably superior zooming is just we'll do some algorithmic logic of relating to",
    "start": "1681560",
    "end": "1687620"
  },
  {
    "text": "images and we have this suspend launch and a really function that at further that tries to start to load two images",
    "start": "1687620",
    "end": "1695930"
  },
  {
    "text": "concurrently and at the end it will just parse this loaded images Torvill a",
    "start": "1695930",
    "end": "1701960"
  },
  {
    "text": "function it just works great lot of relay will be suspended until the result",
    "start": "1701960",
    "end": "1707030"
  },
  {
    "text": "is right Israeli so that is okay example",
    "start": "1707030",
    "end": "1712790"
  },
  {
    "text": "especially if everything works well however what happens if the exception is",
    "start": "1712790",
    "end": "1717830"
  },
  {
    "text": "thrown inside one of the child care routines during an image load the",
    "start": "1717830",
    "end": "1723980"
  },
  {
    "text": "problem with this approach unless you do something special is that the second",
    "start": "1723980",
    "end": "1728990"
  },
  {
    "text": "coroutine will leak it will just continue to load the image no one will cancel it again we have the",
    "start": "1728990",
    "end": "1737450"
  },
  {
    "start": "1734000",
    "end": "1734000"
  },
  {
    "text": "green routine that fails then exception let's imagine exception is thrown a",
    "start": "1737450",
    "end": "1743420"
  },
  {
    "text": "weight will just throw this exception further and their load and overlay",
    "start": "1743420",
    "end": "1750430"
  },
  {
    "text": "coroutine will catch this exception it doesn't handle it in any way so it will",
    "start": "1750430",
    "end": "1755570"
  },
  {
    "text": "just sort of throw it and it will fail as well however in this case no one does",
    "start": "1755570",
    "end": "1761630"
  },
  {
    "text": "anything specifically with a second started co-routine and it just continues",
    "start": "1761630",
    "end": "1767420"
  },
  {
    "text": "its execution it and no one is interested in this result but it",
    "start": "1767420",
    "end": "1773180"
  },
  {
    "text": "continues to load the image and this is a problem this problem might be somehow",
    "start": "1773180",
    "end": "1778460"
  },
  {
    "text": "dressed by the framework or the or application developer you can manually",
    "start": "1778460",
    "end": "1784400"
  },
  {
    "text": "straw the references to all their started activities keep these references",
    "start": "1784400",
    "end": "1790670"
  },
  {
    "text": "and do something accordingly when something goes wrong coding now provides",
    "start": "1790670",
    "end": "1797210"
  },
  {
    "text": "the built-in solution to this problem by introducing local scope you just fix",
    "start": "1797210",
    "end": "1803510"
  },
  {
    "text": "this problem well the parent where the child routine leaks or fails sorry then the parent",
    "start": "1803510",
    "end": "1812719"
  },
  {
    "text": "scope catches this exception and automatically cancels all the child",
    "start": "1812719",
    "end": "1819499"
  },
  {
    "text": "routines and then fails itself so we have the same as before with this",
    "start": "1819499",
    "end": "1826579"
  },
  {
    "text": "difference that now we don't have the problem the second routine is canceled coroutine scopes are built-in in this",
    "start": "1826579",
    "end": "1836209"
  },
  {
    "text": "curtain framework curtain library and curtain scope waits for completion of all children",
    "start": "1836209",
    "end": "1843529"
  },
  {
    "text": "routines and also it cancels all child crew teens if something went wrong and",
    "start": "1843529",
    "end": "1851559"
  },
  {
    "text": "that this functionality is built-in in the language support and it's not only",
    "start": "1851559",
    "end": "1857749"
  },
  {
    "text": "built-in it's enforced so in my some of",
    "start": "1857749",
    "end": "1862909"
  },
  {
    "start": "1859000",
    "end": "1859000"
  },
  {
    "text": "my examples I didn't use the syntax to simplify things however in code lane in real code mean",
    "start": "1862909",
    "end": "1869479"
  },
  {
    "text": "you can't start a new computation anywhere you need to always provide a",
    "start": "1869479",
    "end": "1876589"
  },
  {
    "text": "scope in which scope you start new coding a sync function under the hood is",
    "start": "1876589",
    "end": "1883249"
  },
  {
    "text": "defined as an extension function on co-routine scope so just once resolve if you just try to call a sync everywhere",
    "start": "1883249",
    "end": "1890559"
  },
  {
    "text": "you always need to start coroutines inside a new scope you can start it explicitly",
    "start": "1890559",
    "end": "1898699"
  },
  {
    "text": "inside coding scope you can start it in global scope and this a global scope",
    "start": "1898699",
    "end": "1904879"
  },
  {
    "text": "syntax is something that so at first in the first design all the cruelties first",
    "start": "1904879",
    "end": "1910849"
  },
  {
    "text": "started in the global scope and at some point it was clear that it works better",
    "start": "1910849",
    "end": "1916729"
  },
  {
    "text": "with the structural ratio all the coding builders were rewritten and now they",
    "start": "1916729",
    "end": "1922579"
  },
  {
    "text": "require explicit scope good news is that are that you don't need to always say",
    "start": "1922579",
    "end": "1929989"
  },
  {
    "text": "scope dodge a sync in Cortland you can you can start when you start a routine",
    "start": "1929989",
    "end": "1937729"
  },
  {
    "text": "inside another routine so for instance here we have nested routine the first one calls the first one is called",
    "start": "1937729",
    "end": "1946370"
  },
  {
    "text": "the global scope then inside we start a second one and the second child grew",
    "start": "1946370",
    "end": "1952730"
  },
  {
    "text": "teen is started in the scope of the outer core team and this scope of our",
    "start": "1952730",
    "end": "1957980"
  },
  {
    "text": "two core teen is present in the context implicitly by this reference and you can omit this reference and you your started",
    "start": "1957980",
    "end": "1966590"
  },
  {
    "text": "coaching just look like so you you just call a sink so in Cortland isn't it the",
    "start": "1966590",
    "end": "1971840"
  },
  {
    "text": "case that you often call a sink without the scope however this scope is",
    "start": "1971840",
    "end": "1977210"
  },
  {
    "text": "implicitly present in the context anyway so this structure this structural",
    "start": "1977210",
    "end": "1984080"
  },
  {
    "text": "approach in Cortland is enforced and you just can't start curtains every way you",
    "start": "1984080",
    "end": "1990170"
  },
  {
    "text": "can use the global scope to start Cortese but there a commanded way to do it is to always use scope if your",
    "start": "1990170",
    "end": "1997490"
  },
  {
    "text": "application has some objects with a lifecycle then you can create a scope specific",
    "start": "1997490",
    "end": "2004750"
  },
  {
    "text": "attach to this object just inside the subject and start all the proteins inside the scope there all the nested",
    "start": "2004750",
    "end": "2012010"
  },
  {
    "text": "coroutines considered to this object and then when their object else then all the",
    "start": "2012010",
    "end": "2020110"
  },
  {
    "text": "crew teens will be automatically cancelled so that is quite convenient this recommended practice but in general",
    "start": "2020110",
    "end": "2026350"
  },
  {
    "text": "huge' you can decide which scopes you have and at start new crew teens from",
    "start": "2026350",
    "end": "2032770"
  },
  {
    "text": "the scope and everything then will be covered automatically nothing really so",
    "start": "2032770",
    "end": "2037840"
  },
  {
    "text": "this is something new something probably that will be available in some",
    "start": "2037840",
    "end": "2043540"
  },
  {
    "text": "frameworks and libraries and probably ease of already available but in code length there is this built-in support",
    "start": "2043540",
    "end": "2049540"
  },
  {
    "text": "for a structure between different proteins that works via scopes and this",
    "start": "2049540",
    "end": "2055720"
  },
  {
    "text": "is called structured concurrency now we",
    "start": "2055720",
    "end": "2061800"
  },
  {
    "text": "move forward and the next question is",
    "start": "2061800",
    "end": "2067138"
  },
  {
    "text": "how do how to share information between different proteins so we have like we",
    "start": "2067139",
    "end": "2076120"
  },
  {
    "text": "can have many proteins and this I see some I see programming under the hood and we",
    "start": "2076120",
    "end": "2083620"
  },
  {
    "text": "definitely need to somehow communicate between them and their answer is this",
    "start": "2083620",
    "end": "2090070"
  },
  {
    "text": "lousing shareable communicating is kind of I pray in the girl world they always",
    "start": "2090070",
    "end": "2096399"
  },
  {
    "text": "say share by communicating and because we have the same core routines in the",
    "start": "2096400",
    "end": "2102400"
  },
  {
    "text": "language then the answer to this will be very similar use channels and this",
    "start": "2102400",
    "end": "2107980"
  },
  {
    "text": "channel story is again it's not called an invention it's present in many languages now it's available in c-sharp",
    "start": "2107980",
    "end": "2114550"
  },
  {
    "text": "as well it's thrives especially in gold and I",
    "start": "2114550",
    "end": "2121180"
  },
  {
    "text": "want I will just briefly cover how channels work with coatings channels are",
    "start": "2121180",
    "end": "2129220"
  },
  {
    "text": "used for we can think of it as a synchronization but we better say for",
    "start": "2129220",
    "end": "2136720"
  },
  {
    "text": "communication between coatings now the ester instead of sharing mutable state",
    "start": "2136720",
    "end": "2145140"
  },
  {
    "text": "when we're talking about coroutines we prefer to say that we they should share",
    "start": "2145140",
    "end": "2152340"
  },
  {
    "text": "something by communicating with on another with each other not by having access to a mutable state so that is a",
    "start": "2152340",
    "end": "2159670"
  },
  {
    "text": "little bit of my shift you need to get accustomed to this concept but again",
    "start": "2159670",
    "end": "2165220"
  },
  {
    "text": "it's something that just how the mortal world writes this code including go now",
    "start": "2165220",
    "end": "2170920"
  },
  {
    "text": "code lean and probably some others as well so now our synchronization primitives should be replaced with",
    "start": "2170920",
    "end": "2178120"
  },
  {
    "text": "communication primitives and channel is this main communication primitive",
    "start": "2178120",
    "end": "2184350"
  },
  {
    "text": "channel is a very simple thing it is just an interface that provides a way to",
    "start": "2184350",
    "end": "2191260"
  },
  {
    "text": "send to it and to receive to it receive from it and one coroutine can send to it",
    "start": "2191260",
    "end": "2196930"
  },
  {
    "text": "another can receive from it and basically it's a it solves the classical",
    "start": "2196930",
    "end": "2202950"
  },
  {
    "text": "consequence in a problem when you can have several producers several",
    "start": "2202950",
    "end": "2208720"
  },
  {
    "text": "coroutines that can send to the same channel and several consumer",
    "start": "2208720",
    "end": "2214599"
  },
  {
    "text": "several countries that can receive from the from the same channel so there it",
    "start": "2214599",
    "end": "2221319"
  },
  {
    "text": "can be one producer so many consumers it can be many producers while consumers the this that all works via this channel",
    "start": "2221319",
    "end": "2229329"
  },
  {
    "text": "mechanism the channel have two views as",
    "start": "2229329",
    "end": "2235599"
  },
  {
    "text": "a channel interface actually extends to different interface sent channel receive channel and when you pass a reference to",
    "start": "2235599",
    "end": "2245099"
  },
  {
    "text": "consumers you pass the same channel as receive channel and if we when you pass",
    "start": "2245099",
    "end": "2252279"
  },
  {
    "text": "a reference to producers you will give them San channel so it's straightforward",
    "start": "2252279",
    "end": "2258869"
  },
  {
    "text": "all the first-class channels looks very much like general queue with one",
    "start": "2258869",
    "end": "2266680"
  },
  {
    "text": "important difference all both this send and receive channels are defined as",
    "start": "2266680",
    "end": "2272740"
  },
  {
    "text": "suspend so for instance in c-sharp the same channels are available but you will",
    "start": "2272740",
    "end": "2277900"
  },
  {
    "text": "need to work with them via a sync avoid mechanism so you'll wait you can avoid",
    "start": "2277900",
    "end": "2284559"
  },
  {
    "text": "for the result of receive and set encoding because we have suspend",
    "start": "2284559",
    "end": "2289630"
  },
  {
    "text": "functions both this set and receive functions can be defined as suspend",
    "start": "2289630",
    "end": "2295779"
  },
  {
    "text": "functions in the library there are many different types of channels so for",
    "start": "2295779",
    "end": "2302079"
  },
  {
    "start": "2299000",
    "end": "2299000"
  },
  {
    "text": "instance there is an onboard channel you that can store as many elements as you",
    "start": "2302079",
    "end": "2309220"
  },
  {
    "text": "want to send to it however in this case you have a possibility for out of member",
    "start": "2309220",
    "end": "2315430"
  },
  {
    "text": "exception because no one controls how many elements or how many things you want to store in it",
    "start": "2315430",
    "end": "2321599"
  },
  {
    "text": "there are there is also the buffer channel that has limited capacity and",
    "start": "2321599",
    "end": "2329309"
  },
  {
    "text": "when the capacity is achieved all the",
    "start": "2329309",
    "end": "2334440"
  },
  {
    "text": "following sent calls will suspend there is the render Food Channel which",
    "start": "2334440",
    "end": "2341109"
  },
  {
    "text": "have it is a buffer without any capacity so without a buffer this a channel",
    "start": "2341109",
    "end": "2347230"
  },
  {
    "text": "without a capacity like a channel with capacity zero so for NTV",
    "start": "2347230",
    "end": "2352359"
  },
  {
    "text": "channel the sent coal will always suspend unless there is the received",
    "start": "2352359",
    "end": "2359109"
  },
  {
    "text": "call that is already waiting to receive something we're going to discuss how it",
    "start": "2359109",
    "end": "2364359"
  },
  {
    "text": "works in a minute next and there is also this conflated channel we just allows",
    "start": "2364359",
    "end": "2372549"
  },
  {
    "text": "you to override the elements and receive the last element that voice that was",
    "start": "2372549",
    "end": "2381160"
  },
  {
    "text": "added to this channel so it works for situations when you are interested only in the last event but not in the whole",
    "start": "2381160",
    "end": "2388480"
  },
  {
    "text": "history of the res when we are talking about rendezvous channel this is their",
    "start": "2388480",
    "end": "2394839"
  },
  {
    "start": "2390000",
    "end": "2390000"
  },
  {
    "text": "most basic channel without any buffer and both send and receive calls can",
    "start": "2394839",
    "end": "2402670"
  },
  {
    "text": "suspend if there is the there is no and",
    "start": "2402670",
    "end": "2408819"
  },
  {
    "text": "now they called it is already awaiting further is out we say that H the element",
    "start": "2408819",
    "end": "2416079"
  },
  {
    "text": "is transferred only when send and receive notifications meet in time and this meeting in time is gives this name",
    "start": "2416079",
    "end": "2423880"
  },
  {
    "text": "of the channel or end of a channel and now I want to demonstrate to show you how exactly this rentable channel works",
    "start": "2423880",
    "end": "2431559"
  },
  {
    "text": "what does this mean this send and receive calls meet in time in this",
    "start": "2431559",
    "end": "2437589"
  },
  {
    "text": "channel so let's say we have again classical consumer producer consumer problem we have in our case we'll have",
    "start": "2437589",
    "end": "2444999"
  },
  {
    "text": "one producer that says tasks to a channel and a couple of consumers that",
    "start": "2444999",
    "end": "2450279"
  },
  {
    "text": "are ready to receive and process these tasks accordingly each or all producer",
    "start": "2450279",
    "end": "2458529"
  },
  {
    "text": "and couple of consumers are different cortines for simplicity first let's say",
    "start": "2458529",
    "end": "2464980"
  },
  {
    "text": "that the channel will sent only two tasks so here we create a channel of the that stores the element of type tasks",
    "start": "2464980",
    "end": "2473079"
  },
  {
    "text": "and we start a coroutine producer core team that will simply send a couple of",
    "start": "2473079",
    "end": "2479440"
  },
  {
    "text": "tasks to this channel and after that it will the channel then in our simple scenario",
    "start": "2479440",
    "end": "2485859"
  },
  {
    "text": "we'll have two consumers each of them will just receive one receive one",
    "start": "2485859",
    "end": "2492130"
  },
  {
    "text": "element from this channel and later process the elements this process task function it might be suspension or it",
    "start": "2492130",
    "end": "2498430"
  },
  {
    "text": "might be just through consuming function does matter the thing is we need to call",
    "start": "2498430",
    "end": "2504580"
  },
  {
    "text": "this receive receive call from channel from co-routine because it is a suspend function so here we have two consumers",
    "start": "2504580",
    "end": "2511780"
  },
  {
    "text": "they're just each of them just receives one task how it works we create a",
    "start": "2511780",
    "end": "2518440"
  },
  {
    "text": "channel then let's say in our case there say the first consumer starts first so",
    "start": "2518440",
    "end": "2525910"
  },
  {
    "text": "this cartoon that receives one element is started and then it tries to receive",
    "start": "2525910",
    "end": "2531640"
  },
  {
    "text": "an element from the channel however there is no sent the channel is",
    "start": "2531640",
    "end": "2538300"
  },
  {
    "text": "emptiness nothing was sent read and because of that this consumer coroutine gets",
    "start": "2538300",
    "end": "2546040"
  },
  {
    "text": "suspended so this receive call suspends this consumer Croteam this curtain gets",
    "start": "2546040",
    "end": "2552520"
  },
  {
    "text": "suspended and then let's imagine their consumer corrosion starts and it is",
    "start": "2552520",
    "end": "2559630"
  },
  {
    "text": "ready to send something to channel it sends the first task to the channel and",
    "start": "2559630",
    "end": "2565090"
  },
  {
    "text": "now that moment of friend who happens sent call meets receive call and the",
    "start": "2565090",
    "end": "2572290"
  },
  {
    "text": "value is actually passed from consumer from producer to consumer which awakes",
    "start": "2572290",
    "end": "2579190"
  },
  {
    "text": "the producer co-routine that receives the stress and start to process it in",
    "start": "2579190",
    "end": "2588160"
  },
  {
    "text": "the meantime they're producing routine sends the second task to the channel and",
    "start": "2588160",
    "end": "2594240"
  },
  {
    "text": "at first the first consumer is busy",
    "start": "2594240",
    "end": "2599410"
  },
  {
    "text": "processing the first task so there is no other receive call and because of that",
    "start": "2599410",
    "end": "2606460"
  },
  {
    "text": "the producer crew team gets suspended there is no second receive call from",
    "start": "2606460",
    "end": "2612700"
  },
  {
    "text": "this channel sent now sent call suspense the producer crew team now",
    "start": "2612700",
    "end": "2620470"
  },
  {
    "text": "let's imagine the second consumer comes struts and it's ready to receive element",
    "start": "2620470",
    "end": "2627340"
  },
  {
    "text": "from this channel then this moment of friend River happens and the second task",
    "start": "2627340",
    "end": "2633099"
  },
  {
    "text": "is passed to the second Channel send and receive calls meet in time and the",
    "start": "2633099",
    "end": "2641710"
  },
  {
    "text": "second crew teen the second consumer is busy gets busy processing the second task so they just start processing them",
    "start": "2641710",
    "end": "2651540"
  },
  {
    "text": "in our in my simple case I just had two tasks tasks but in general case of",
    "start": "2651540",
    "end": "2657880"
  },
  {
    "text": "course consumer can just sense tasks whenever they appear and their consumers",
    "start": "2657880",
    "end": "2665200"
  },
  {
    "text": "or producers and the consumers are ready to receive tasks and to this case we can",
    "start": "2665200",
    "end": "2670380"
  },
  {
    "text": "in this case we can just send the specific number of tasks or in general",
    "start": "2670380",
    "end": "2675820"
  },
  {
    "text": "case you can just send new tasks to the channel whenever they appear in producer",
    "start": "2675820",
    "end": "2682410"
  },
  {
    "text": "you can you don't even need to close it so you can send whenever something comes",
    "start": "2682410",
    "end": "2688300"
  },
  {
    "text": "and the consumer the code for consumers is a bit different now you can now",
    "start": "2688300",
    "end": "2695440"
  },
  {
    "text": "iterate over all over the channel and this iteration this iterating of the",
    "start": "2695440",
    "end": "2702130"
  },
  {
    "text": "channel and the hoot calls receive method while iterating and what it will",
    "start": "2702130",
    "end": "2708040"
  },
  {
    "text": "do it it will suspend if nothing is yet available in the channel and if",
    "start": "2708040",
    "end": "2713890"
  },
  {
    "text": "something is available it will receive it and process it so that how this",
    "start": "2713890",
    "end": "2720280"
  },
  {
    "text": "producer consumer solution works for many tasks and it is a general primitive",
    "start": "2720280",
    "end": "2727000"
  },
  {
    "text": "how to communicate how to share something tasks data between different",
    "start": "2727000",
    "end": "2733270"
  },
  {
    "text": "coroutines and you see that it automatically balances the load so",
    "start": "2733270",
    "end": "2739630"
  },
  {
    "text": "whenever there is there is no available Purdue consumers the producer will just",
    "start": "2739630",
    "end": "2745660"
  },
  {
    "text": "as bad so if you have fixed number of producers and fixed number consumers this suspension mechanism will",
    "start": "2745660",
    "end": "2752290"
  },
  {
    "text": "automatically balance the load of this channel of your of your system of your application there Bofur channel works",
    "start": "2752290",
    "end": "2762010"
  },
  {
    "text": "very similarly to how rentable channel works with the difference that it also has the buffer so you can store some so",
    "start": "2762010",
    "end": "2771670"
  },
  {
    "text": "this this channel will be able to store some elements inside but the general idea that there the next suspend course",
    "start": "2771670",
    "end": "2780420"
  },
  {
    "text": "will suspend if the boot of the buffer is is full is the same so the send calls will suspend",
    "start": "2780420",
    "end": "2787510"
  },
  {
    "text": "if the buffer is already full and the received call will suspend if the channel is empty so there is no",
    "start": "2787510",
    "end": "2793390"
  },
  {
    "text": "exceptions there is nothing there is no null returned is just in case of there",
    "start": "2793390",
    "end": "2799570"
  },
  {
    "text": "there are no tasks there are no producers there are no consumers their counterpart the second part just",
    "start": "2799570",
    "end": "2805630"
  },
  {
    "text": "suspense so that was all what I wanted to cover today if you want to learn more",
    "start": "2805630",
    "end": "2814900"
  },
  {
    "text": "about cotton curtains you can you can check what what what we have as I've",
    "start": "2814900",
    "end": "2822970"
  },
  {
    "text": "told you there's there is this basic support for coroutines",
    "start": "2822970",
    "end": "2828520"
  },
  {
    "text": "at the language level and everything else is implemented in the library so we have a sink of weight implemented in the",
    "start": "2828520",
    "end": "2835540"
  },
  {
    "text": "library channels implemented the library also actors also yield as in c-sharp",
    "start": "2835540",
    "end": "2841870"
  },
  {
    "text": "works under uses the underlying implementation of qualities it does",
    "start": "2841870",
    "end": "2848440"
  },
  {
    "text": "users in quality isochrones programming it has nothing to do with the synchronous pairing but under the hood it just uses the same mechanism of",
    "start": "2848440",
    "end": "2854770"
  },
  {
    "text": "routines and much more and the loss of staff is and can be implemented in the library we have if you want to play with",
    "start": "2854770",
    "end": "2863170"
  },
  {
    "text": "it we have now hands on lap intro to co-routines the channels that allows you",
    "start": "2863170",
    "end": "2869080"
  },
  {
    "text": "to to just play a bit without it by yourself also there are talks I would recommend",
    "start": "2869080",
    "end": "2875410"
  },
  {
    "text": "the talks by Romina deserve who's the main author is main creator of the library and he has given different talks",
    "start": "2875410",
    "end": "2881290"
  },
  {
    "text": "about co-routines different design and especially interesting that in these calling qualities in practice here it is",
    "start": "2881290",
    "end": "2888309"
  },
  {
    "text": "the moment when he says that again before we did he have structured concurrence and now we have this",
    "start": "2888309",
    "end": "2893920"
  },
  {
    "text": "structured concurrency and he shows what was before and what's what is what what",
    "start": "2893920",
    "end": "2898959"
  },
  {
    "text": "comes afterward if you want to learn more about Cortland I can't make sure the content book which you actually can",
    "start": "2898959",
    "end": "2905410"
  },
  {
    "text": "look through bro through in this conference it's available and we",
    "start": "2905410",
    "end": "2911949"
  },
  {
    "text": "recently recorded their whole course about Scotland at Coursera it doesn't",
    "start": "2911949",
    "end": "2917890"
  },
  {
    "text": "cover Curtis yet but it covers all the others and the book doesn't cover curtains yet as well but it curls all",
    "start": "2917890",
    "end": "2924160"
  },
  {
    "text": "the rest cotton so thank you a lot for bit for being here for listening and",
    "start": "2924160",
    "end": "2930160"
  },
  {
    "text": "have a nice caught me with coroutines",
    "start": "2930160",
    "end": "2933599"
  },
  {
    "text": "and I'm ready to answer questions like",
    "start": "2937229",
    "end": "2952209"
  },
  {
    "text": "can channels of tomato channels automatically supposed a duplication I'm",
    "start": "2952209",
    "end": "2962829"
  },
  {
    "text": "not sure about native support but I",
    "start": "2962829",
    "end": "2968279"
  },
  {
    "text": "don't know I actually don't think I'm not sure but I don't think they support a duplication but it's probably it's",
    "start": "2968279",
    "end": "2974440"
  },
  {
    "text": "already planned I don't I'm not sure I can answer you question sorry yes no no",
    "start": "2974440",
    "end": "2984039"
  },
  {
    "text": "it's unless its main UI thread it's not possible so if you want to thread local",
    "start": "2984039",
    "end": "2989709"
  },
  {
    "text": "variables there is some mechanism to attach it to coroutines but it's like okay there is also a",
    "start": "2989709",
    "end": "2997390"
  },
  {
    "text": "possibility when you have a specific that you create a new thread and you say and you create your custom dispatcher",
    "start": "2997390",
    "end": "3003630"
  },
  {
    "text": "that says all these credentials run on this thread yeah in this case it's",
    "start": "3003630",
    "end": "3008759"
  },
  {
    "text": "possible if it's if you just want to if you just use the thread from the common pool then any search will it's a",
    "start": "3008759",
    "end": "3016289"
  },
  {
    "text": "built-in mechanism and that will be used context of the user",
    "start": "3016289",
    "end": "3030740"
  },
  {
    "text": "what do you mean available there is just the reference that you can pass or what",
    "start": "3032450",
    "end": "3037560"
  },
  {
    "text": "do you mean always throw it in circle",
    "start": "3037560",
    "end": "3041900"
  },
  {
    "text": "but in curtains you can coroutines wrap",
    "start": "3048380",
    "end": "3055040"
  },
  {
    "text": "there like you when you start the coroutine it automatically have access",
    "start": "3055040",
    "end": "3060690"
  },
  {
    "text": "to all the everything you said this code so you can explicitly pass something to it something to it so it's not that it's",
    "start": "3060690",
    "end": "3069270"
  },
  {
    "text": "like because they're like under the hood there lambdas that can capture their the",
    "start": "3069270",
    "end": "3075750"
  },
  {
    "text": "scope then you can automatically captures their capture their origins by the way I think I forgot to mention it",
    "start": "3075750",
    "end": "3081420"
  },
  {
    "text": "different libraries including spring in the view is going to already have or going to publish the native support for",
    "start": "3081420",
    "end": "3088260"
  },
  {
    "text": "this stuff for co-routines and serpent functions so I suppose that they will they'll provide kind of expected way",
    "start": "3088260",
    "end": "3096710"
  },
  {
    "text": "perspective guidelines how to work with all this I start to to to how the court",
    "start": "3096710",
    "end": "3108870"
  },
  {
    "text": "is compared with the deferred with the",
    "start": "3108870",
    "end": "3114150"
  },
  {
    "text": "word with because in encoding as deferred these tasks yeah so no no I",
    "start": "3114150",
    "end": "3120960"
  },
  {
    "text": "I mean the court coroutines also uses the concepts of deferred so deferred",
    "start": "3120960",
    "end": "3127230"
  },
  {
    "text": "object is actually reference kind of a reference to drowning coroutines so we",
    "start": "3127230",
    "end": "3135200"
  },
  {
    "text": "we also I mean what what is the",
    "start": "3135200",
    "end": "3140280"
  },
  {
    "text": "comparison when we compare quotes in subject to how its implemented can't say",
    "start": "3140280",
    "end": "3145320"
  },
  {
    "text": "for sure there is this some small overhead that you will need to or do",
    "start": "3145320",
    "end": "3151109"
  },
  {
    "text": "to stroll all the state of the protein so for instance here when you suspend the protein you you straw all the call",
    "start": "3151109",
    "end": "3157589"
  },
  {
    "start": "3154000",
    "end": "3154000"
  },
  {
    "text": "stack so there is small overhead for this but on the other hand is only one object and there are no like in if we",
    "start": "3157589",
    "end": "3166410"
  },
  {
    "text": "compare for instance with the callbacks and wear with reactive approach then in callbacks Niraj reactive approach will",
    "start": "3166410",
    "end": "3173009"
  },
  {
    "text": "build several lambdas but he only one object I don't I don't give you an ass",
    "start": "3173009",
    "end": "3179249"
  },
  {
    "text": "how its compared to like what is exact overhead in comparison to two to one",
    "start": "3179249",
    "end": "3184440"
  },
  {
    "text": "call like here if we store default there is going to be this the whole call stack like I don't know any benchmarks but as",
    "start": "3184440",
    "end": "3191789"
  },
  {
    "text": "what I've already heard it works quite well in terms of performance so I just can give a very generic answer I'm not",
    "start": "3191789",
    "end": "3222869"
  },
  {
    "text": "sure I think where is it this way would",
    "start": "3222869",
    "end": "3230190"
  },
  {
    "text": "be to just to look at their channel implementation I'm not sure myself",
    "start": "3230190",
    "end": "3235440"
  },
  {
    "text": "whether it's already available or its plan to be edit probably I can check any",
    "start": "3235440",
    "end": "3242819"
  },
  {
    "text": "more questions or so I will answer you just come to me in a minute yes you can",
    "start": "3242819",
    "end": "3250829"
  },
  {
    "text": "use colonies when we are talking about cotton for JVM you can easily use",
    "start": "3250829",
    "end": "3256829"
  },
  {
    "text": "directive streams Riggs Java it just works there it has some a little bit of",
    "start": "3256829",
    "end": "3263459"
  },
  {
    "text": "additional extensions like Eric Scotland but it calls Eric Scotland but in fact",
    "start": "3263459",
    "end": "3268619"
  },
  {
    "text": "it's just a bunch of additional extractions yes no no there's this regs",
    "start": "3268619",
    "end": "3281640"
  },
  {
    "text": "Java just is the library available for Java you can't mix like cuddling co-routines work and",
    "start": "3281640",
    "end": "3289050"
  },
  {
    "text": "cutting the suspension functions works only with courting so it you can't if you try to call you can't call suspend",
    "start": "3289050",
    "end": "3296790"
  },
  {
    "text": "functions from Java and it just works for cotton without coroutines so the",
    "start": "3296790",
    "end": "3302190"
  },
  {
    "text": "Eric's job is like an independent thing and in the future we'll have will soon be relief release some also class that",
    "start": "3302190",
    "end": "3312300"
  },
  {
    "text": "is similar to reactive stream but that allows the conversion so they kind of",
    "start": "3312300",
    "end": "3317640"
  },
  {
    "text": "can be used together but reactive stream is a bandwidth thing that already works",
    "start": "3317640",
    "end": "3323400"
  },
  {
    "text": "with Cortland without any support for coroutines so you can just use both or decide whether you want for some",
    "start": "3323400",
    "end": "3329430"
  },
  {
    "text": "specific use case yes runs out of memory",
    "start": "3329430",
    "end": "3342770"
  },
  {
    "text": "you mean like checking their caching the case I don't know this shouldn't be checked so but but I",
    "start": "3347910",
    "end": "3356160"
  },
  {
    "text": "support my guess is just like crashing out of memory yeah but because there is I don't think",
    "start": "3356160",
    "end": "3365220"
  },
  {
    "text": "there is a mechanism that that calculates but I haven't heard of",
    "start": "3365220",
    "end": "3370890"
  },
  {
    "text": "reports like recruited to many coroutines in comparison to that just like basically the proteins are the",
    "start": "3370890",
    "end": "3376410"
  },
  {
    "text": "cheapest person comparison with threads so there is no problem of creating a lot of them and I think whilst we still are",
    "start": "3376410",
    "end": "3385110"
  },
  {
    "text": "in here like we the whole still are in the face when like mmm now I think it",
    "start": "3385110",
    "end": "3392490"
  },
  {
    "text": "lasts Google i/o Google announced that they weren't first-class support for suspend functions for coroutines and",
    "start": "3392490",
    "end": "3399260"
  },
  {
    "text": "then all these benchmarks of what can go wrong in case of - - deep stack and so",
    "start": "3399260",
    "end": "3406050"
  },
  {
    "text": "on I suppose will follow I haven't read any guidelines in India in the sense that don't don't create too deep curtain",
    "start": "3406050",
    "end": "3413910"
  },
  {
    "text": "so far it seems like every",
    "start": "3413910",
    "end": "3417440"
  },
  {
    "text": "yeah you have you like you mean whether",
    "start": "3419599",
    "end": "3425729"
  },
  {
    "text": "you want to do to to observe it somehow oh no no you you it's I know there's",
    "start": "3425729",
    "end": "3439880"
  },
  {
    "text": "like it just captures their I suppose the reference of to the class itself",
    "start": "3439880",
    "end": "3446989"
  },
  {
    "text": "unless you like and what I measure it if",
    "start": "3446989",
    "end": "3456359"
  },
  {
    "text": "it captures unless you're using it so that's also have to be checked like we can we can check it if you want like I",
    "start": "3456359",
    "end": "3463109"
  },
  {
    "text": "wouldn't saying like whether it captures anything that that it doesn't use so",
    "start": "3463109",
    "end": "3469619"
  },
  {
    "text": "usually how capturing a local variables works if use this local variables is captured if it doesn't use it that's you",
    "start": "3469619",
    "end": "3475380"
  },
  {
    "text": "don't need it yeah so for teens it should work similarly I'm not sure about this reference but I my guess it should",
    "start": "3475380",
    "end": "3482309"
  },
  {
    "text": "be like this so we want to capture unless you use it yeah but there is there is some walking progress in terms",
    "start": "3482309",
    "end": "3490169"
  },
  {
    "text": "of providing the convenient way to debug everything and to observe what happens",
    "start": "3490169",
    "end": "3495900"
  },
  {
    "text": "under the hood so recently they added the support for like indeed elegy when you debug you can see the stack trace of",
    "start": "3495900",
    "end": "3503299"
  },
  {
    "text": "of the protein at the moment of suspension and there are other things",
    "start": "3503299",
    "end": "3511009"
  },
  {
    "text": "probably already edit or like the other way to to see what is the current state",
    "start": "3511009",
    "end": "3519269"
  },
  {
    "text": "like what core scenes we have currently they currently run the currently suspended and so on so it's also possible so I think probably something I",
    "start": "3519269",
    "end": "3527339"
  },
  {
    "text": "was going on here I'm I'm still here so if you want we can and I'll be able at",
    "start": "3527339",
    "end": "3532859"
  },
  {
    "text": "the booth I suppose to earth day and I have huge cotton stickers so if you're",
    "start": "3532859",
    "end": "3540779"
  },
  {
    "text": "interested but they again will be the boots I think",
    "start": "3540779",
    "end": "3545239"
  }
]