[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "okay it's 40 after whatever hour it is",
    "start": "11280",
    "end": "16800"
  },
  {
    "text": "in your time so i'm going to get started and",
    "start": "16800",
    "end": "22790"
  },
  {
    "text": "[Music] restart at the",
    "start": "22790",
    "end": "28080"
  },
  {
    "text": "copy of the opening screen",
    "start": "28080",
    "end": "32640"
  },
  {
    "text": "okay yeah good day sydney and good day is a very appropriate greeting as in sydney it's",
    "start": "38160",
    "end": "45680"
  },
  {
    "text": "time to say good morning but here on the east coast of the usa it's time to say good evening and very",
    "start": "45680",
    "end": "53039"
  },
  {
    "text": "soon good night don't we just love time zones no we don't yet another reason i'd much",
    "start": "53039",
    "end": "60079"
  },
  {
    "text": "rather be there in person but at least up here i'm safe from the drop bears",
    "start": "60079",
    "end": "65198"
  },
  {
    "text": "anyway good day y'all i'm dave erinson the t-rex of codosaurus and i'm here to",
    "start": "65199",
    "end": "71920"
  },
  {
    "text": "teach you to kill mutants but first i think we should level set some",
    "start": "71920",
    "end": "78159"
  },
  {
    "text": "expectations first this isn't exactly an advanced talk within its topic nor",
    "start": "78159",
    "end": "86400"
  },
  {
    "start": "80000",
    "end": "160000"
  },
  {
    "text": "is it a beginner level talk and even averaging them out and calling it an intermediate talk would",
    "start": "86400",
    "end": "92079"
  },
  {
    "text": "not quite do it justice what this is is an introduction to an advanced topic",
    "start": "92079",
    "end": "99520"
  },
  {
    "text": "second a bit of a confession i do not consider myself an expert on mutation testing one of the",
    "start": "99520",
    "end": "107600"
  },
  {
    "text": "dirty little secrets of public speaking is that you don't have to be an expert",
    "start": "107600",
    "end": "113520"
  },
  {
    "text": "you just have to know a little bit more about something than the audience enough to make the talk worth their time",
    "start": "113520",
    "end": "120560"
  },
  {
    "text": "and be able to convey it to them and mutation testing is still rare enough",
    "start": "120560",
    "end": "126079"
  },
  {
    "text": "that most developers have never even heard of it so let's start with the basics",
    "start": "126079",
    "end": "132480"
  },
  {
    "text": "what on infinite earths is mutation testing in our universe that of software",
    "start": "132480",
    "end": "138640"
  },
  {
    "text": "development not comic books it's a software testing technique surprise thank you captain obvious",
    "start": "138640",
    "end": "147440"
  },
  {
    "text": "but why is this one different from all the others one might look at the name and think",
    "start": "147440",
    "end": "153120"
  },
  {
    "text": "well obviously it's about testing the mutations used in genetic algorithms",
    "start": "153120",
    "end": "158959"
  },
  {
    "text": "but no the big difference is that most other testing techniques are about",
    "start": "158959",
    "end": "164480"
  },
  {
    "text": "checking whether or not our code is correct mutation testing however assumes",
    "start": "164480",
    "end": "171360"
  },
  {
    "text": "that our code is correct at least in the sense of passing its unit tests",
    "start": "171360",
    "end": "176480"
  },
  {
    "text": "of course this means it also assumes that we already have unit tests",
    "start": "176480",
    "end": "182319"
  },
  {
    "text": "instead mutation testing is about checking for two different qualities in my opinion the more important helpful",
    "start": "182319",
    "end": "190239"
  },
  {
    "text": "and interesting of these two qualities is not something about our production code at all",
    "start": "190239",
    "end": "195920"
  },
  {
    "text": "but that our unit test is strict to check this a mutation testing tool",
    "start": "195920",
    "end": "202640"
  },
  {
    "start": "200000",
    "end": "260000"
  },
  {
    "text": "will find the gaps in our test suite that let our code get away with unintended behavior",
    "start": "202640",
    "end": "208879"
  },
  {
    "text": "once we find gaps we can close them by either adding tests or improving existing tests",
    "start": "208879",
    "end": "215599"
  },
  {
    "text": "lack of strictness comes mainly from lack of tests or poorly written tests or poorly",
    "start": "215599",
    "end": "222799"
  },
  {
    "text": "maintained tests like oneness ones that didn't keep pace with changes in the code",
    "start": "222799",
    "end": "228879"
  },
  {
    "text": "speaking of which the other thing mutation testing checks is that our code is meaningful by which",
    "start": "228879",
    "end": "235360"
  },
  {
    "text": "i mean that any little change to the code will produce a noticeable change in its behavior",
    "start": "235360",
    "end": "242640"
  },
  {
    "text": "lack of meaning comes mainly from code being unreachable redundant with other code or otherwise",
    "start": "242640",
    "end": "249519"
  },
  {
    "text": "just not having any real effect once we find meaningless code we can make it meaningful if that fits our",
    "start": "249519",
    "end": "256160"
  },
  {
    "text": "intent or just remove it mutation testing puts these two together",
    "start": "256160",
    "end": "262000"
  },
  {
    "start": "260000",
    "end": "290000"
  },
  {
    "text": "by testing that every possible tiny little change to the code within reason does indeed change the",
    "start": "262000",
    "end": "269360"
  },
  {
    "text": "code's behavior and that the unit test suite does indeed notice that change",
    "start": "269360",
    "end": "275199"
  },
  {
    "text": "and fail not all the tests have to fail but each change should make at least one",
    "start": "275199",
    "end": "282240"
  },
  {
    "text": "unit test fail that's the positive side but there are some drawbacks as fred",
    "start": "282240",
    "end": "288880"
  },
  {
    "text": "brooks told us back in the 1980s there's no silver bullet besides those",
    "start": "288880",
    "end": "294400"
  },
  {
    "start": "290000",
    "end": "465000"
  },
  {
    "text": "are for killing werewolves not mutants the first drawback is that it's rather",
    "start": "294400",
    "end": "299840"
  },
  {
    "text": "hard labor on the cpu and therefore usually rather",
    "start": "299840",
    "end": "305039"
  },
  {
    "text": "slow we certainly won't want to mutation test our whole code base on",
    "start": "305039",
    "end": "310720"
  },
  {
    "text": "every save maybe over a lunch break for a smallish system or overnight for a larger one maybe even a",
    "start": "310720",
    "end": "317280"
  },
  {
    "text": "weekend fortunately most tools let us just check specific files classes modules functions and so",
    "start": "317280",
    "end": "324720"
  },
  {
    "text": "forth plus they usually include an incremental mode so that we can test only whatever",
    "start": "324720",
    "end": "330160"
  },
  {
    "text": "has changed since the last mutation testing run or the last commit or some other such milestone that",
    "start": "330160",
    "end": "338560"
  },
  {
    "text": "maybe we can do on every save for a very small system or at least over a shorter break for the",
    "start": "338560",
    "end": "344560"
  },
  {
    "text": "rest its cpu intensive nature can also really run up our bills on cloud platforms such as",
    "start": "344560",
    "end": "351919"
  },
  {
    "text": "aws or azure or azure however you pronounce it",
    "start": "351919",
    "end": "357840"
  },
  {
    "text": "another drawback is that mutation testing is not at all a beginner-friendly",
    "start": "357840",
    "end": "363440"
  },
  {
    "text": "technique it tells us that some particular change to the code",
    "start": "363440",
    "end": "368560"
  },
  {
    "text": "made no difference to the test results but what does that even mean it takes a lot",
    "start": "368560",
    "end": "375360"
  },
  {
    "text": "of interpretation to figure out what a mutant is trying to tell us their accent is very strange and they're",
    "start": "375360",
    "end": "383360"
  },
  {
    "text": "almost as incoherent as zombies but with a much bigger vocabulary so they're not",
    "start": "383360",
    "end": "388639"
  },
  {
    "text": "always on about burns they're usually trying to tell us that",
    "start": "388639",
    "end": "394800"
  },
  {
    "text": "our code is meaningless or our tests are lacks or both",
    "start": "394800",
    "end": "400000"
  },
  {
    "text": "but it can be very hard to figure out how even worse sometimes it's a false alarm",
    "start": "400000",
    "end": "406560"
  },
  {
    "text": "because the mutation didn't make a test fail but it didn't make any real difference",
    "start": "406560",
    "end": "411759"
  },
  {
    "text": "in the first place it can still take quite a lot of time and effort to figure that out",
    "start": "411759",
    "end": "418400"
  },
  {
    "text": "even if a mutation does make a difference there is normally quite a lot of code",
    "start": "418400",
    "end": "423840"
  },
  {
    "text": "that we shouldn't bother to test for instance if we have a debugging log message that",
    "start": "423840",
    "end": "430160"
  },
  {
    "text": "says the value of x is and then the value of x that constant part will get mutated",
    "start": "430160",
    "end": "436960"
  },
  {
    "text": "even though we don't really care fortunately most of the tools have ways",
    "start": "436960",
    "end": "442639"
  },
  {
    "text": "to say don't bother mutating this line or even this whole function maybe this file but that's usually with",
    "start": "442639",
    "end": "450800"
  },
  {
    "text": "comments which can clutter up the code and make it less readable",
    "start": "450800",
    "end": "455919"
  },
  {
    "text": "now that we've seen the pros and cons how does mutation testing work unlike the guy in this silhouette",
    "start": "455919",
    "end": "463440"
  },
  {
    "text": "it mutates copies of our code hence the name it does this to create test failures",
    "start": "463440",
    "end": "470560"
  },
  {
    "start": "465000",
    "end": "510000"
  },
  {
    "text": "also known as faults so mutation testing can be categorized as a fault-based testing technique",
    "start": "470560",
    "end": "478960"
  },
  {
    "text": "this means it is related to something you might already be familiar with chaos monkey from netflix just like",
    "start": "478960",
    "end": "486479"
  },
  {
    "text": "chaos monkey helps netflix discover flaws in their error recovery mutation testing helps us discover flaws",
    "start": "486479",
    "end": "493840"
  },
  {
    "text": "in our tests and our code but the way mutation testing does this is sort of",
    "start": "493840",
    "end": "500720"
  },
  {
    "text": "upside down from what chaos monkey does chaos monkey is best known for injecting",
    "start": "500720",
    "end": "507599"
  },
  {
    "text": "faults such as dropped connections into netflix's production network",
    "start": "507599",
    "end": "514000"
  },
  {
    "text": "if all goes well in the sense that netflix's customers don't notice and their metrics are still good then",
    "start": "514000",
    "end": "521440"
  },
  {
    "text": "netflix knows that they're ever fine mutation testing however",
    "start": "521440",
    "end": "528160"
  },
  {
    "text": "injects semantic changes not necessarily problems it doesn't usually know whether",
    "start": "528160",
    "end": "534560"
  },
  {
    "text": "these semantic changes will create faults or not we certainly hope they all will",
    "start": "534560",
    "end": "540480"
  },
  {
    "start": "540000",
    "end": "570000"
  },
  {
    "text": "but that depends on the test suite it injects them into copies of our code not our actual",
    "start": "540480",
    "end": "546880"
  },
  {
    "text": "network and it does its work in our test environment not production",
    "start": "546880",
    "end": "554560"
  },
  {
    "text": "and if everything still goes well in the sense that our unit tests all still pass that does not",
    "start": "555120",
    "end": "562080"
  },
  {
    "text": "mean that all is well that means that there is a problem remember each change to our code should",
    "start": "562080",
    "end": "568800"
  },
  {
    "text": "make at least one unit test fail",
    "start": "568800",
    "end": "573440"
  },
  {
    "text": "mutation testing has also been compared to fuzzing or fuzz testing a security penetration",
    "start": "573920",
    "end": "580240"
  },
  {
    "text": "technique involving throwing random data at an application mutation testing is somewhat like",
    "start": "580240",
    "end": "587200"
  },
  {
    "text": "fuzzing our code rather than fuzzing the data but it's generally not random",
    "start": "587200",
    "end": "593200"
  },
  {
    "text": "most mutation testing engines apply all the mutations that they know how to do the smarter ones can use the results",
    "start": "593200",
    "end": "600720"
  },
  {
    "text": "from some simpler mutations so that they know they don't need to bother with some",
    "start": "600720",
    "end": "606079"
  },
  {
    "text": "more complex mutations but even then it's not random but enough about",
    "start": "606079",
    "end": "612480"
  },
  {
    "text": "differences what exactly does mutation testing do and how let's start with a high level",
    "start": "612480",
    "end": "618800"
  },
  {
    "text": "view first our chosen tool breaks our code apart into pieces to test",
    "start": "618800",
    "end": "626160"
  },
  {
    "text": "these are our functions or methods if we're using an object oriented language but i'm just going to say",
    "start": "626160",
    "end": "632160"
  },
  {
    "text": "functions then for each function it tries to find the function's tests",
    "start": "632160",
    "end": "638880"
  },
  {
    "text": "if the tool can't find any tests most will simply skip this function better yet most of",
    "start": "638880",
    "end": "644959"
  },
  {
    "text": "those will warn us so we know we should go add or annotate some tests more on that later some though we use",
    "start": "644959",
    "end": "653040"
  },
  {
    "text": "the whole unit test suite which is horribly inefficient and leads to even more false alarms",
    "start": "653040",
    "end": "661120"
  },
  {
    "text": "anyway assuming we aren't skipping this function next the tool makes the mutants to do",
    "start": "661120",
    "end": "667200"
  },
  {
    "text": "that it looks closely at the function to see how it can be changed for each tiny little way this function",
    "start": "667200",
    "end": "673680"
  },
  {
    "text": "can be changed the tool makes one mutant with that one tiny little change",
    "start": "673680",
    "end": "680079"
  },
  {
    "text": "once our tool is done creating all the mutants it can for a given function it iterates over that list and now we",
    "start": "680079",
    "end": "687680"
  },
  {
    "text": "get to the heart of the concept this chart represents the progress of",
    "start": "687680",
    "end": "693279"
  },
  {
    "text": "our tool the tools generally don't give us any such sort of thing but",
    "start": "693279",
    "end": "698399"
  },
  {
    "text": "it's a conceptual model i'm using to help illustrate the point for each mutant derived from",
    "start": "698399",
    "end": "707120"
  },
  {
    "text": "a given function the tool runs the function the unit tests but it runs them using",
    "start": "707120",
    "end": "714320"
  },
  {
    "text": "the current mutant in place of the original function if any test fails this is called",
    "start": "714320",
    "end": "722880"
  },
  {
    "text": "in the standard industry terminology by the unfortunate name of killing the mutant however some people",
    "start": "722880",
    "end": "730880"
  },
  {
    "text": "object to this violent communication especially since in the comic books mutants are often",
    "start": "730880",
    "end": "736800"
  },
  {
    "text": "metaphors for marginalized groups and the tech industry is starting to become more sensitive to such",
    "start": "736800",
    "end": "742480"
  },
  {
    "text": "issues so let's take a brief detour into some nicer terminology i'm trying",
    "start": "742480",
    "end": "747839"
  },
  {
    "text": "to come up with so far i'm leaning towards terms like rescuing or better yet",
    "start": "747839",
    "end": "753200"
  },
  {
    "text": "covering the mutant this makes sense if you think about it in terms of what really happens",
    "start": "753200",
    "end": "758959"
  },
  {
    "text": "in mutation testing and in normal testing in normal use of test coverage",
    "start": "758959",
    "end": "765920"
  },
  {
    "text": "normal code should be covered by at least one test and let all tests pass by way of analogy",
    "start": "765920",
    "end": "773200"
  },
  {
    "text": "in mutation testing mutants should be covered by at least one failing test",
    "start": "773200",
    "end": "779760"
  },
  {
    "text": "remember each change should make it at least one unit test fail unfortunately the term",
    "start": "779760",
    "end": "787920"
  },
  {
    "text": "covered is already used to mean that the mutated code is run by at least one test whether failing",
    "start": "787920",
    "end": "794160"
  },
  {
    "text": "or not much like the normal concept of test coverage so i'd like to replace that with saying",
    "start": "794160",
    "end": "801040"
  },
  {
    "text": "that the mutant is exercised or maybe run but it's a long hard uphill battle trying to",
    "start": "801040",
    "end": "807519"
  },
  {
    "text": "change terminology that people are already using oh well",
    "start": "807519",
    "end": "813120"
  },
  {
    "text": "anyway whatever we call it when a mutant makes a unit test fail and i'm going to stick to the standard",
    "start": "813120",
    "end": "819279"
  },
  {
    "text": "terminology of killing it in this presentation each mutant should make at least one unit test fail",
    "start": "819279",
    "end": "826639"
  },
  {
    "text": "so when it does that's a good thing it means that our code is meaningful enough that the tiny change",
    "start": "826639",
    "end": "833680"
  },
  {
    "text": "the tool made to greet this mutant actually made a noticeable difference in the function's behavior it also means",
    "start": "833680",
    "end": "841040"
  },
  {
    "text": "that our test suite is strict enough that at least one test actually noticed",
    "start": "841040",
    "end": "846240"
  },
  {
    "text": "that difference and failed then the tool will mark that mutant killed",
    "start": "846240",
    "end": "853360"
  },
  {
    "text": "stop running any more tests against it and move on to the next one once a mutant has made one test fail we",
    "start": "853360",
    "end": "860240"
  },
  {
    "text": "don't care how many more could make fail like perhaps some of tests six through ten for mutant number one on",
    "start": "860240",
    "end": "867279"
  },
  {
    "text": "this chart like so much on in computers we only",
    "start": "867279",
    "end": "872320"
  },
  {
    "text": "care about ones and zeros on the other claw if a mutant lets all the unit tests pass",
    "start": "872320",
    "end": "881199"
  },
  {
    "text": "then the mutant is said to have survived that means that the mutant has the",
    "start": "881199",
    "end": "886959"
  },
  {
    "text": "superpower of mimicry skilled enough to fool our tests",
    "start": "886959",
    "end": "892560"
  },
  {
    "text": "this usually means that our code is meaningless or our tests are lacks or both",
    "start": "892560",
    "end": "899040"
  },
  {
    "text": "and now it's up to us to figure out how",
    "start": "899040",
    "end": "905040"
  },
  {
    "text": "now let's peel back one layer of the onion and look at some of the technical",
    "start": "905279",
    "end": "910720"
  },
  {
    "text": "details of how this works first our tool parses our code",
    "start": "910720",
    "end": "916480"
  },
  {
    "text": "usually into an abstract syntax tree there are some tools that work",
    "start": "916480",
    "end": "921760"
  },
  {
    "text": "differently like working on byte code and some even work on the actual text of the source code but most use an",
    "start": "921760",
    "end": "929279"
  },
  {
    "text": "ast so let's roll with that and i know those boxes are too small to read well but",
    "start": "929279",
    "end": "936480"
  },
  {
    "text": "we don't need to understand this one in detail after our mutation testing tool creates",
    "start": "936480",
    "end": "943040"
  },
  {
    "text": "an ast out of our code then it traverses the tree looking for subtrees",
    "start": "943040",
    "end": "948880"
  },
  {
    "text": "or branches if you will that represent our functions after finding them it handles them as i",
    "start": "948880",
    "end": "955279"
  },
  {
    "text": "described it before starting with looking for each one's tests but how does it do that",
    "start": "955279",
    "end": "961600"
  },
  {
    "text": "that usually relies mainly on us developers either annotating our tests as i",
    "start": "961600",
    "end": "967120"
  },
  {
    "text": "mentioned earlier or following some kind of naming convention",
    "start": "967120",
    "end": "972880"
  },
  {
    "text": "this is often supplemented and sometimes even replaced by having the tool look at what unit",
    "start": "972880",
    "end": "979920"
  },
  {
    "text": "tests call what functions however that can get tricky if the function isn't called directly",
    "start": "979920",
    "end": "986720"
  },
  {
    "text": "from the test in that case it usually involves looking at test coverage data or some other such",
    "start": "986720",
    "end": "992720"
  },
  {
    "text": "gathered information after the tool has found the functions tests",
    "start": "992720",
    "end": "998880"
  },
  {
    "text": "then assuming it won't skip this function because it didn't find any tests or whatever other reason",
    "start": "998880",
    "end": "1005199"
  },
  {
    "text": "it makes the mutants to make mutants from an ast sub tree",
    "start": "1005199",
    "end": "1010880"
  },
  {
    "text": "it traverses that subtree just like it did to the whole thing however now instead of looking for even",
    "start": "1010880",
    "end": "1017040"
  },
  {
    "text": "smaller sub trees it can extract like twigs or something it looks for",
    "start": "1017040",
    "end": "1022079"
  },
  {
    "text": "nodes where it can change something each time it finds one then for each way",
    "start": "1022079",
    "end": "1027438"
  },
  {
    "text": "it can change that node it makes one copy of the functions ast",
    "start": "1027439",
    "end": "1032798"
  },
  {
    "text": "subtree with that one node changed in that one way",
    "start": "1032799",
    "end": "1038240"
  },
  {
    "text": "for instance suppose our tool has started traversing the asd i showed earlier and has only gotten down to this while",
    "start": "1038240",
    "end": "1045520"
  },
  {
    "text": "loop following that arrow for each way it could change that node it would make a fresh copy of",
    "start": "1045520",
    "end": "1052720"
  },
  {
    "text": "this whole subtree with only that node changed in that one way after it's done making",
    "start": "1052720",
    "end": "1060080"
  },
  {
    "text": "as many mutants as it can from that node it would continue traversing the subtree",
    "start": "1060080",
    "end": "1066720"
  },
  {
    "text": "down to that node's first child node the conditional that controls it a not",
    "start": "1066720",
    "end": "1072720"
  },
  {
    "text": "equal comparison again for each way you could change that node it would make a copy of",
    "start": "1072720",
    "end": "1078880"
  },
  {
    "text": "this whole subtree with only that mutation and so on until it has traversed the",
    "start": "1078880",
    "end": "1084480"
  },
  {
    "text": "entire subtree now i've been talking a lot about",
    "start": "1084480",
    "end": "1089600"
  },
  {
    "text": "mutating things and changing them so what kind of changes are we talking",
    "start": "1089600",
    "end": "1094799"
  },
  {
    "text": "about there are quite a lot you could change a mathematical logical or bitwise operator",
    "start": "1094799",
    "end": "1102080"
  },
  {
    "text": "from one to another in languages and situations where we can do so it could even substitute an operator",
    "start": "1102080",
    "end": "1109360"
  },
  {
    "text": "from a different category for instance in many languages we can treat anything as booleans so x",
    "start": "1109360",
    "end": "1117200"
  },
  {
    "text": "times y could become for instance x and y or x exclusive or",
    "start": "1117200",
    "end": "1123360"
  },
  {
    "text": "y of operands matters such as in",
    "start": "1123360",
    "end": "1129120"
  },
  {
    "text": "subtraction division or exponentiation it could swap them it could change",
    "start": "1129120",
    "end": "1135360"
  },
  {
    "text": "a comparison from one to another it could insert or remove a mathematical logical or",
    "start": "1135360",
    "end": "1142400"
  },
  {
    "text": "bitwise negation it could remove entire lines of code",
    "start": "1142400",
    "end": "1147440"
  },
  {
    "text": "though usually because it's a statement rather than looking at the physical written lines of the source code it can remove a",
    "start": "1147440",
    "end": "1155360"
  },
  {
    "text": "condition so that something that might be skipped or done is always done",
    "start": "1155360",
    "end": "1160960"
  },
  {
    "text": "it can remove a loop control so something that might be skipped done once or done multiple times",
    "start": "1160960",
    "end": "1167200"
  },
  {
    "text": "is always done exactly once it could scramble or truncate argument",
    "start": "1167200",
    "end": "1173600"
  },
  {
    "text": "lists of function calls truncation will often result in a syntax error from having the wrong number of",
    "start": "1173600",
    "end": "1179520"
  },
  {
    "text": "arguments however if our language allows default or variatic arguments",
    "start": "1179520",
    "end": "1184960"
  },
  {
    "text": "this could be perfectly fine it could also scramble or truncate argument lists of",
    "start": "1184960",
    "end": "1191200"
  },
  {
    "text": "function declarations this will usually result in a syntax ever where it's called from",
    "start": "1191200",
    "end": "1196480"
  },
  {
    "text": "because of the call having too many arguments or inside the function from having an",
    "start": "1196480",
    "end": "1202320"
  },
  {
    "text": "unknown variable but sometimes not when the call still works",
    "start": "1202320",
    "end": "1207440"
  },
  {
    "text": "that can help reveal times when we've got a parameter shadowing a variable in an outer scope",
    "start": "1207440",
    "end": "1213039"
  },
  {
    "text": "in other words using the same name that isn't necessarily wrong but it can be dangerous",
    "start": "1213039",
    "end": "1218799"
  },
  {
    "text": "or at least confusing making for bad maintainability it could replace a function's entire",
    "start": "1218799",
    "end": "1225840"
  },
  {
    "text": "contents with a constant or any of the arguments or raising and ever",
    "start": "1225840",
    "end": "1231280"
  },
  {
    "text": "or nothing at all if the language permits as many do you could change a",
    "start": "1231280",
    "end": "1237520"
  },
  {
    "text": "constant or variable or expression or function call to some other value you could even",
    "start": "1237520",
    "end": "1243200"
  },
  {
    "text": "change it to something of an entirely different and incompatible type such as",
    "start": "1243200",
    "end": "1248480"
  },
  {
    "text": "changing a number into a if i may quote smeagle string or nothing",
    "start": "1248480",
    "end": "1256320"
  },
  {
    "text": "there are many many more but i trust you get the idea",
    "start": "1256320",
    "end": "1262080"
  },
  {
    "start": "1260000",
    "end": "1320000"
  },
  {
    "text": "here on there are no more low-level details i want to add so let's finally walk through some",
    "start": "1262080",
    "end": "1268159"
  },
  {
    "text": "examples we'll start with an easy one suppose we have a function like so",
    "start": "1268159",
    "end": "1274880"
  },
  {
    "text": "think about what a mutant made from this might return since that's what our unit test would",
    "start": "1274880",
    "end": "1280400"
  },
  {
    "text": "probably be looking at mainly such a mutant could return results such as",
    "start": "1280400",
    "end": "1286559"
  },
  {
    "text": "any of these expressions or constants and many more but i had to stop somewhere",
    "start": "1286559",
    "end": "1294480"
  },
  {
    "text": "now suppose we had only one test like this this is a rather poor test but even so",
    "start": "1294480",
    "end": "1302159"
  },
  {
    "text": "most of those since on the previous slide would get killed by this test the ones shown here in crossed out green",
    "start": "1302159",
    "end": "1310480"
  },
  {
    "text": "the ones returning constants are very unlikely to match there's no particular reason a tool",
    "start": "1310480",
    "end": "1316240"
  },
  {
    "text": "would put a 4 there as opposed to zero one or other significant numbers",
    "start": "1316240",
    "end": "1322799"
  },
  {
    "text": "subtracting gets us zero dividing gets us one returning either argument gets us two",
    "start": "1322799",
    "end": "1329760"
  },
  {
    "text": "and the error conditions will at least make the test not pass but",
    "start": "1329760",
    "end": "1336159"
  },
  {
    "text": "addition multiplication and exponentiation in the reverse order",
    "start": "1336159",
    "end": "1341280"
  },
  {
    "text": "all get us the correct answer therefore these mutations or rather any mutant",
    "start": "1341280",
    "end": "1347600"
  },
  {
    "text": "based on these mutations would survive our test [Music]",
    "start": "1347600",
    "end": "1353600"
  },
  {
    "text": "we know this because when we run our tool it gives us a report that looks roughly like this",
    "start": "1353600",
    "end": "1360240"
  },
  {
    "text": "the exact words format amount of context and so forth will depend on exactly which tool we use",
    "start": "1360240",
    "end": "1367120"
  },
  {
    "text": "but the information should be pretty much the same and that is",
    "start": "1367120",
    "end": "1372720"
  },
  {
    "text": "that if we changed the function called power which is in file demo.rb",
    "start": "1372720",
    "end": "1379360"
  },
  {
    "text": "and starts at line 42 in any of four different ways then all its unit tests would still pass",
    "start": "1379360",
    "end": "1389840"
  },
  {
    "text": "and those four ways are to change line 42 to swap the arguments",
    "start": "1390400",
    "end": "1397280"
  },
  {
    "text": "or change line 43 to change the exponentiation to",
    "start": "1397280",
    "end": "1402400"
  },
  {
    "text": "additional multiplication or to chain platinum 43 to swap the",
    "start": "1402400",
    "end": "1408159"
  },
  {
    "text": "operands so what is this set of surviving mutants trying to tell us",
    "start": "1408159",
    "end": "1414960"
  },
  {
    "start": "1410000",
    "end": "1470000"
  },
  {
    "text": "the very high level message is of course that our test suite is not sufficient",
    "start": "1414960",
    "end": "1420159"
  },
  {
    "text": "either because there aren't enough tests or the ones we have just aren't very good or both",
    "start": "1420159",
    "end": "1430000"
  },
  {
    "text": "we should ask ourselves how are these mutants surviving are they pulling heists are they living",
    "start": "1430000",
    "end": "1438000"
  },
  {
    "text": "at the xavier institute or what the usual answer is that they give the",
    "start": "1438000",
    "end": "1444559"
  },
  {
    "text": "same side effect excuse me the same result as the original function or if we're not doing pure functional",
    "start": "1444559",
    "end": "1451600"
  },
  {
    "text": "programming maybe they have the same side effect whatever it is that our tests are looking at",
    "start": "1451600",
    "end": "1457600"
  },
  {
    "text": "to determine how that happens we can take a closer look at one mutant and a tested passes",
    "start": "1457600",
    "end": "1465279"
  },
  {
    "text": "let's start with the plus mutant looking at the change together with our",
    "start": "1465279",
    "end": "1470559"
  },
  {
    "start": "1470000",
    "end": "1590000"
  },
  {
    "text": "test makes it much clearer that this one survives because two plus two equals two to the second",
    "start": "1470559",
    "end": "1478159"
  },
  {
    "text": "power so how can we kill this mutant",
    "start": "1478159",
    "end": "1483520"
  },
  {
    "text": "in other words make it return a different answer than the original code given some set of",
    "start": "1483520",
    "end": "1490240"
  },
  {
    "text": "inputs it's quite simple in this case we just need to make at least one test using arguments such",
    "start": "1490240",
    "end": "1497360"
  },
  {
    "text": "that x to the y is different from x plus y",
    "start": "1497360",
    "end": "1502720"
  },
  {
    "text": "for instance we could add a test or change our existing test to something",
    "start": "1502720",
    "end": "1508320"
  },
  {
    "text": "like this to assert that two to the fourth power is 16.",
    "start": "1508320",
    "end": "1514159"
  },
  {
    "text": "all the mutants that our original test killed this would still kill two plus four is",
    "start": "1514159",
    "end": "1519919"
  },
  {
    "text": "six not sixteen so this should kill the plus mutant just fine",
    "start": "1519919",
    "end": "1525120"
  },
  {
    "text": "for that matter two times four is eight which is also not sixteen so this should",
    "start": "1525120",
    "end": "1531520"
  },
  {
    "text": "kill the times mutant as well however the argument swapping mutants",
    "start": "1531520",
    "end": "1537039"
  },
  {
    "text": "still survive how can that be it's because two to the fourth power and four to the",
    "start": "1537039",
    "end": "1544000"
  },
  {
    "text": "second are both sixteen seeing as this function deals with powers it might have been",
    "start": "1544000",
    "end": "1550320"
  },
  {
    "text": "smarter to use arguments either one is a power of the other",
    "start": "1550320",
    "end": "1557279"
  },
  {
    "text": "but anyway we can attack those argument swapping mutants separately no need to kill them all in one fell",
    "start": "1557279",
    "end": "1563600"
  },
  {
    "text": "swoop and be some kind of superhero about it to do that",
    "start": "1563600",
    "end": "1568640"
  },
  {
    "text": "again we can either add a test or adjust an existing test to something like this",
    "start": "1568640",
    "end": "1575279"
  },
  {
    "text": "to assert that two to the third power is eight three squared is nine not eight so this",
    "start": "1575279",
    "end": "1582159"
  },
  {
    "text": "kills the argument swap in mutants two plus three is five two times three is six and both of those are",
    "start": "1582159",
    "end": "1588640"
  },
  {
    "text": "not eight so the plus and times mutants stay dead and we don't get any zombie",
    "start": "1588640",
    "end": "1594799"
  },
  {
    "text": "mutants wandering around with these inputs the correct operation",
    "start": "1594799",
    "end": "1601679"
  },
  {
    "text": "is the only simple common one that yields the correct answer",
    "start": "1601679",
    "end": "1606720"
  },
  {
    "text": "this isn't the only solution though we could have used 2 to the fifth 3 squared three to the fifth vice versa",
    "start": "1606720",
    "end": "1613679"
  },
  {
    "text": "and many many more there are lots of ways to skin that flurkin",
    "start": "1613679",
    "end": "1619760"
  },
  {
    "text": "this may make mutation testing sound simple but this was a downright trivial example",
    "start": "1619760",
    "end": "1625919"
  },
  {
    "start": "1620000",
    "end": "1680000"
  },
  {
    "text": "so we could easily think up arguments to make all mutants within reason",
    "start": "1625919",
    "end": "1631279"
  },
  {
    "text": "behave differently from the original code so let's look at a more complex example",
    "start": "1631279",
    "end": "1638159"
  },
  {
    "text": "suppose we have a function to send a message like so this function send message uses a loop",
    "start": "1638159",
    "end": "1645840"
  },
  {
    "text": "that sends as much data as send bytes can handle in one chunk over and over picking up where it left off",
    "start": "1645840",
    "end": "1652480"
  },
  {
    "text": "until the message is all sent this is a very common pattern in communication software",
    "start": "1652480",
    "end": "1658960"
  },
  {
    "text": "a mutation testing tool could make lots and lots of mutants from this but one of them of particular interest",
    "start": "1658960",
    "end": "1665440"
  },
  {
    "text": "would be this removing those lines with the minus signs an example of removing a loop control that would make it",
    "start": "1665440",
    "end": "1672960"
  },
  {
    "text": "effectively read like this now suppose that this mutant",
    "start": "1672960",
    "end": "1678559"
  },
  {
    "text": "does indeed survive our test suite which consists mainly of this",
    "start": "1678559",
    "end": "1684720"
  },
  {
    "text": "there's a bit more that i'm not going to show you quite yet dealing with setting the size and",
    "start": "1684720",
    "end": "1690399"
  },
  {
    "text": "creating the message but even without seeing that code what does the survival",
    "start": "1690399",
    "end": "1696559"
  },
  {
    "text": "of that non-looping mutant tell us if a mutant that only goes through that",
    "start": "1696559",
    "end": "1703360"
  },
  {
    "text": "while loop once acts the same as our normal code as far as our tests can tell that means",
    "start": "1703360",
    "end": "1711360"
  },
  {
    "start": "1710000",
    "end": "1740000"
  },
  {
    "text": "that our tests are only making our code go through that while loop once",
    "start": "1711360",
    "end": "1716399"
  },
  {
    "text": "so what does that mean by the way you'll find that interpreting mutants involves a lot of asking",
    "start": "1716399",
    "end": "1722880"
  },
  {
    "text": "so what does that mean recursively",
    "start": "1722880",
    "end": "1728480"
  },
  {
    "text": "but in this case it means that we're not testing sending a message larger and send bytes",
    "start": "1728640",
    "end": "1734960"
  },
  {
    "text": "can handle in one chunk the most likely cause of that is that we",
    "start": "1734960",
    "end": "1740080"
  },
  {
    "start": "1740000",
    "end": "1890000"
  },
  {
    "text": "simply didn't test with a big enough message for instance suppose our maximum chunk size what's",
    "start": "1740080",
    "end": "1746399"
  },
  {
    "text": "and bytes can handle in one chunk is 10 000 bytes",
    "start": "1746399",
    "end": "1751440"
  },
  {
    "text": "however for whatever reason we're only testing with a tiny little three byte",
    "start": "1751440",
    "end": "1756960"
  },
  {
    "text": "message or maybe four if we include a null terminator whatever",
    "start": "1756960",
    "end": "1762799"
  },
  {
    "text": "the obvious fix is to use a message larger than our maximum chunk size we can easily construct one as shown",
    "start": "1762799",
    "end": "1770640"
  },
  {
    "text": "here we just take the size add one and construct that bigger message",
    "start": "1770640",
    "end": "1776320"
  },
  {
    "text": "but perhaps to paraphrase shakespeare the fault dear sydney is not in our tests but in our code that",
    "start": "1776320",
    "end": "1783520"
  },
  {
    "text": "these mutants are survivors perhaps we did test with the largest permissible message",
    "start": "1783520",
    "end": "1790240"
  },
  {
    "text": "out of a set of predefined messages or at least message sizes for instance here we have small and",
    "start": "1790240",
    "end": "1797600"
  },
  {
    "text": "large message sizes we tested with a large and yet this",
    "start": "1797600",
    "end": "1802880"
  },
  {
    "text": "mutant survives in other words we're still sending the whole message in one chunk",
    "start": "1802880",
    "end": "1808480"
  },
  {
    "text": "what could possibly be wrong with that what is this mutant trying to tell us now it's trying to tell us that",
    "start": "1808480",
    "end": "1816799"
  },
  {
    "text": "a version of send message with the looping removed will do the job just fine",
    "start": "1816799",
    "end": "1823120"
  },
  {
    "text": "if we remove the loop control we wind up with this code i showed you earlier and if we",
    "start": "1823120",
    "end": "1829039"
  },
  {
    "text": "rerun our mutation testing tool on that it will show a lot of other stuff as now",
    "start": "1829039",
    "end": "1834559"
  },
  {
    "text": "being redundant because we only needed it to support the looping if we also remove all of that",
    "start": "1834559",
    "end": "1842480"
  },
  {
    "text": "then eventually send message boils down to this and now it's pretty clear the entire",
    "start": "1842480",
    "end": "1848960"
  },
  {
    "text": "send message function may well be redundant so we can just use send bytes directly",
    "start": "1848960",
    "end": "1855200"
  },
  {
    "text": "now mind you it might not be because in real world code there may be some logging error handling",
    "start": "1855200",
    "end": "1861279"
  },
  {
    "text": "and so forth needed in send message but at least the looping was redundant",
    "start": "1861279",
    "end": "1867039"
  },
  {
    "text": "fortunately when it's this kind of problem with unreachable or redundant code the solution is clear and easy just",
    "start": "1867039",
    "end": "1873600"
  },
  {
    "text": "chop out the extra junk that the mutant doesn't have this will also make our code more",
    "start": "1873600",
    "end": "1879519"
  },
  {
    "text": "maintainable by getting rid of useless craft",
    "start": "1879519",
    "end": "1884320"
  },
  {
    "text": "now that we've seen a few different examples of spotting bad tests and redundant code some of you",
    "start": "1884559",
    "end": "1891200"
  },
  {
    "start": "1890000",
    "end": "1920000"
  },
  {
    "text": "might do better staring at code than hearing me talk about it so here's some pseudo code",
    "start": "1891200",
    "end": "1896880"
  },
  {
    "text": "showing how mutation testing works from a very high level view i'll pause a moment for",
    "start": "1896880",
    "end": "1902640"
  },
  {
    "text": "you to read it or take screenshots [Music]",
    "start": "1902640",
    "end": "1910609"
  },
  {
    "text": "all right moving on i assume you know how to take a screenshot pretty fast",
    "start": "1910960",
    "end": "1916159"
  },
  {
    "text": "i'd like to address some occasionally asked questions mutation testing is still rare enough",
    "start": "1916159",
    "end": "1921919"
  },
  {
    "start": "1920000",
    "end": "1950000"
  },
  {
    "text": "that i don't think there are any frequently asked questions first",
    "start": "1921919",
    "end": "1927120"
  },
  {
    "text": "this all sounds pretty crazy deliberately making tests fail to prove that the code succeeds where did this",
    "start": "1927120",
    "end": "1934559"
  },
  {
    "text": "whole bizarro idea come from anyway mutation testing has a surprisingly long",
    "start": "1934559",
    "end": "1941120"
  },
  {
    "text": "history at least in the context of computers it was first proposed in 1971 in richard lipton's term paper",
    "start": "1941120",
    "end": "1949760"
  },
  {
    "text": "titled false diagnosis of computer programs at carnegie mellon university the first",
    "start": "1949760",
    "end": "1957120"
  },
  {
    "text": "tool didn't appear until nine years later in 1980 as part of timothy budd's phd",
    "start": "1957120",
    "end": "1963200"
  },
  {
    "text": "work at yale even so it was still not practical for most people",
    "start": "1963200",
    "end": "1968640"
  },
  {
    "text": "until recently maybe the past couple decades or so with advances in cpu speed multi-core",
    "start": "1968640",
    "end": "1975120"
  },
  {
    "text": "cpus larger and cheaper memory and so on that leads us to the next question why",
    "start": "1975120",
    "end": "1982480"
  },
  {
    "start": "1980000",
    "end": "2010000"
  },
  {
    "text": "is it so cpu intensive to answer that we have to do some math but don't worry it's very basic",
    "start": "1982480",
    "end": "1990080"
  },
  {
    "text": "suppose our functions have on average about 10 lines each and each line has",
    "start": "1990080",
    "end": "1997200"
  },
  {
    "text": "about five places where it can be changed to any of about 20 alternatives",
    "start": "1997200",
    "end": "2004159"
  },
  {
    "text": "that works out to a thousand mutants per function and for each one we'll have to run",
    "start": "2004159",
    "end": "2010880"
  },
  {
    "start": "2010000",
    "end": "2040000"
  },
  {
    "text": "somewhere between one unit test if we're lucky and kill it on the first try",
    "start": "2010880",
    "end": "2015919"
  },
  {
    "text": "and all of that functions unit tests if we kill it on the last try or worse yet it survives",
    "start": "2015919",
    "end": "2023840"
  },
  {
    "text": "suppose we wind up running just one tenth of the tests for each mutant since we",
    "start": "2023840",
    "end": "2030000"
  },
  {
    "text": "start with a thousand mutants that's still a hundred times the test runs for that function",
    "start": "2030000",
    "end": "2036399"
  },
  {
    "text": "compared to just running the tests if our unit test suite normally takes a",
    "start": "2036399",
    "end": "2042480"
  },
  {
    "start": "2040000",
    "end": "2070000"
  },
  {
    "text": "zippy 10 seconds mutation testing will take about a thousand seconds",
    "start": "2042480",
    "end": "2047600"
  },
  {
    "text": "which might not sound like much because i'm saying seconds but do the math and it's almost 17",
    "start": "2047600",
    "end": "2054240"
  },
  {
    "text": "minutes but there is some good news over the past decade or so",
    "start": "2054240",
    "end": "2060079"
  },
  {
    "text": "there's been a lot of research on trimming down a number of mutants mainly by weeding out those that are",
    "start": "2060079",
    "end": "2065679"
  },
  {
    "text": "semantically equivalent to the original code redundant with other mutants or trivial in various ways such as",
    "start": "2065679",
    "end": "2072720"
  },
  {
    "start": "2070000",
    "end": "2100000"
  },
  {
    "text": "creating an obvious error condition such things have reduced the mutant toward by up to about two-thirds but even with",
    "start": "2072720",
    "end": "2080560"
  },
  {
    "text": "that rare level of success it's still no silver bullet as this takes a lot of cpu time itself",
    "start": "2080560",
    "end": "2088158"
  },
  {
    "text": "and the remaining mutants are still quite a lot the next question is when making each mutant",
    "start": "2088159",
    "end": "2095040"
  },
  {
    "text": "why change it in only one way there are multiple reasons for one it",
    "start": "2095040",
    "end": "2101119"
  },
  {
    "start": "2100000",
    "end": "2130000"
  },
  {
    "text": "helps us poor humans focus it's much easier to tell what a surviving mutant is trying",
    "start": "2101119",
    "end": "2106800"
  },
  {
    "text": "to say if we're only talking about one thing at a time you can think of it like using the",
    "start": "2106800",
    "end": "2112240"
  },
  {
    "text": "single responsibility principle another reason is that multiple changes may balance each other out",
    "start": "2112240",
    "end": "2119040"
  },
  {
    "text": "leading to more false alarms for instance remember that first simple example and",
    "start": "2119040",
    "end": "2125200"
  },
  {
    "text": "its argument swapping mutants if one mutant had both of these mutations",
    "start": "2125200",
    "end": "2132160"
  },
  {
    "start": "2130000",
    "end": "2160000"
  },
  {
    "text": "then first would swap the arguments and the other would swap them right back for no net effect so it would survive",
    "start": "2132160",
    "end": "2140320"
  },
  {
    "text": "pretty much any unit test you could possibly throw at it",
    "start": "2140320",
    "end": "2145680"
  },
  {
    "text": "lastly allowing multiple mutations would create a combinatorial explosion of",
    "start": "2145680",
    "end": "2151040"
  },
  {
    "text": "mutants with the tool making many many times more mutants per function which would make it even more cpu",
    "start": "2151040",
    "end": "2157520"
  },
  {
    "text": "intensive i'll spare you the math but with our earlier code size assumptions even if we managed",
    "start": "2157520",
    "end": "2164480"
  },
  {
    "start": "2160000",
    "end": "2220000"
  },
  {
    "text": "to weed the mutants down by two thirds at each step with one mutation per mutant we'd have",
    "start": "2164480",
    "end": "2172280"
  },
  {
    "text": "333 mutants per function and a third but i'm rounding",
    "start": "2172280",
    "end": "2178079"
  },
  {
    "text": "with two we'd already have almost a hundred and ten thousand and with three we'd still have",
    "start": "2178079",
    "end": "2185599"
  },
  {
    "text": "over 35 million never mind actually running the tests",
    "start": "2185599",
    "end": "2190960"
  },
  {
    "text": "just creating the mutants would get to be quite a heavy workload",
    "start": "2190960",
    "end": "2196400"
  },
  {
    "text": "but we can avoid this huge workload and the increased false alarms and the lack of",
    "start": "2196400",
    "end": "2201839"
  },
  {
    "text": "focus if we just limit it to one mutation per mutant",
    "start": "2201839",
    "end": "2207520"
  },
  {
    "text": "the last question is this sounds like it only makes sure that our unit tests",
    "start": "2207520",
    "end": "2212560"
  },
  {
    "text": "sweet as a whole is strict is there any way can help us assess the quality",
    "start": "2212560",
    "end": "2218560"
  },
  {
    "text": "of individual tests yes there is but it would take a lot",
    "start": "2218560",
    "end": "2224720"
  },
  {
    "start": "2220000",
    "end": "2280000"
  },
  {
    "text": "longer you may remember how i said early on that when a mutant makes a unit test fail the",
    "start": "2224720",
    "end": "2232000"
  },
  {
    "text": "tool will stop running any more tests against it mark it killed and move on to the next",
    "start": "2232000",
    "end": "2238240"
  },
  {
    "text": "one so when we're done with a given function we wind up with a chart like this",
    "start": "2238240",
    "end": "2244720"
  },
  {
    "text": "again remember the tools don't actually give us a chart it's just a conceptual model i'm using to illustrate",
    "start": "2244720",
    "end": "2250800"
  },
  {
    "text": "the situation if we were to run the rest of the tests",
    "start": "2250800",
    "end": "2256400"
  },
  {
    "text": "that would take a lot longer but it would give us some useful information that we can use to assess",
    "start": "2256400",
    "end": "2262160"
  },
  {
    "text": "the quality of some individual tests look at tests for none of the mutants",
    "start": "2262160",
    "end": "2270480"
  },
  {
    "text": "make either of those fail now this isn't an absolute indication that they're no good",
    "start": "2270480",
    "end": "2276720"
  },
  {
    "text": "but it does mean that they might merit a closer look somewhat like a code smell",
    "start": "2276720",
    "end": "2283040"
  },
  {
    "start": "2280000",
    "end": "2310000"
  },
  {
    "text": "however i have not seen this feature actually implemented in any mutation testing tool",
    "start": "2283040",
    "end": "2290160"
  },
  {
    "text": "if you do find one that will let you run all tests against all mutants and gives",
    "start": "2290160",
    "end": "2295680"
  },
  {
    "text": "you this full of a report i suppose you could take this concept a step further and look now next at",
    "start": "2295680",
    "end": "2303599"
  },
  {
    "text": "those that only stop one mutant and then two and so on but i think it would rapidly reach a",
    "start": "2303599",
    "end": "2310079"
  },
  {
    "start": "2310000",
    "end": "2340000"
  },
  {
    "text": "point of diminishing returns i'd probably stop at zero to summarize at last mutation testing",
    "start": "2310079",
    "end": "2318240"
  },
  {
    "text": "is a powerful technique to ensure that our code is meaningful",
    "start": "2318240",
    "end": "2323440"
  },
  {
    "text": "and our tests are strict it's easy to get started with in terms of setting up most of the tools",
    "start": "2323440",
    "end": "2330400"
  },
  {
    "text": "and annotating our tests if needed which may be tedious but at least it's easy but it's",
    "start": "2330400",
    "end": "2337920"
  },
  {
    "text": "not so easy to interpret the results nor is it easy on the cpu",
    "start": "2337920",
    "end": "2343520"
  },
  {
    "start": "2340000",
    "end": "2400000"
  },
  {
    "text": "even if these drawbacks mean it's not a good fit for our particular current projects though",
    "start": "2343520",
    "end": "2348880"
  },
  {
    "text": "i still think it's just a really cool idea in a geeky kind of way",
    "start": "2348880",
    "end": "2355440"
  },
  {
    "text": "if you'd like to try mutation testing for yourself here's a list of some popular tools for some popular languages",
    "start": "2355440",
    "end": "2362320"
  },
  {
    "text": "and platforms and some others i doubt many of you are doing fortran 77 these days",
    "start": "2362320",
    "end": "2368320"
  },
  {
    "text": "i'll talk a bit so you have time to take screenshots just be aware that many of these are",
    "start": "2368320",
    "end": "2375040"
  },
  {
    "text": "outdated i don't know or follow quite all of these languages and platforms",
    "start": "2375040",
    "end": "2380400"
  },
  {
    "text": "the ones i know are outdated are crossed out there's also a promising tool called",
    "start": "2380400",
    "end": "2386320"
  },
  {
    "text": "modal test a language independent mutation engine with which you can make language",
    "start": "2386320",
    "end": "2392720"
  },
  {
    "text": "specific mutation testing tools sorry i haven't looked into it much myself",
    "start": "2392720",
    "end": "2398560"
  },
  {
    "text": "before we get to q a i'd like to give a shout out to toptal",
    "start": "2398560",
    "end": "2404480"
  },
  {
    "text": "a consulting network i'm in whose speakers network helped me prepare and practice this presentation",
    "start": "2405280",
    "end": "2412240"
  },
  {
    "text": "please use that referral link if you want to hire us or join us and that's also the destination of that qr code",
    "start": "2412240",
    "end": "2419440"
  },
  {
    "text": "also many thanks to marcus sherp who created mutant the main tool i've",
    "start": "2419440",
    "end": "2424800"
  },
  {
    "text": "actually used for ruby and he's been very willing to answer my ignored questions",
    "start": "2424800",
    "end": "2431520"
  },
  {
    "start": "2430000",
    "end": "2490000"
  },
  {
    "text": "and critique this presentation and now it's your turn if you have any questions i'll take them",
    "start": "2431520",
    "end": "2437839"
  },
  {
    "text": "now if you think of anything later i'll be around for the rest of the conference",
    "start": "2437839",
    "end": "2442960"
  },
  {
    "text": "uh including some of the after party but that'll be starting at about 1am my time",
    "start": "2442960",
    "end": "2450480"
  },
  {
    "text": "or if you think of anything after the conference there's my contact information up there so",
    "start": "2450480",
    "end": "2456800"
  },
  {
    "text": "any questions",
    "start": "2456800",
    "end": "2467839"
  },
  {
    "text": "i'm not seeing anything in the chat so if a pass is a fail and a fail is a",
    "start": "2469280",
    "end": "2476960"
  },
  {
    "text": "pass i don't know this is starting to sound something",
    "start": "2476960",
    "end": "2483359"
  },
  {
    "text": "amusing",
    "start": "2483359",
    "end": "2485920"
  },
  {
    "text": "what do we really call the fails well it depends at what level you mean fail if you mean that",
    "start": "2489920",
    "end": "2499119"
  },
  {
    "start": "2490000",
    "end": "2580000"
  },
  {
    "text": "okay says sorry no joke um if you mean what do we call it when",
    "start": "2499680",
    "end": "2506319"
  },
  {
    "text": "the mutant makes the unit test fail uh that's what we call killing the",
    "start": "2506319",
    "end": "2513280"
  },
  {
    "text": "mutant and that's actually the objective we want all the mutants",
    "start": "2513280",
    "end": "2518880"
  },
  {
    "text": "to get killed by at least one test um with most tools each one will only",
    "start": "2518880",
    "end": "2525359"
  },
  {
    "text": "get killed by one test because then it will stop running",
    "start": "2525359",
    "end": "2530400"
  },
  {
    "text": "any more tests against that mutant there's something else you meant by the fails",
    "start": "2530400",
    "end": "2536880"
  },
  {
    "text": "you were wondering what it meant and what we would call them then please clarify in the",
    "start": "2536880",
    "end": "2543440"
  },
  {
    "text": "chat meanwhile i'll just guess that maybe if you mean we have failed to achieve the objective",
    "start": "2543440",
    "end": "2550960"
  },
  {
    "text": "of making a unit test fail that's uh that the mutant has survived",
    "start": "2550960",
    "end": "2560000"
  },
  {
    "text": "the tools give us a report of the surviving mutants that did not get",
    "start": "2560000",
    "end": "2566480"
  },
  {
    "text": "killed in others did not make a unit test now in other words let all the unit",
    "start": "2566480",
    "end": "2572079"
  },
  {
    "text": "tests pass those are the ones that we need to figure out okay",
    "start": "2572079",
    "end": "2577200"
  },
  {
    "text": "what are they trying to tell us mainly what sort of test are we lacking",
    "start": "2577200",
    "end": "2584160"
  },
  {
    "start": "2580000",
    "end": "2700000"
  },
  {
    "text": "or where do we have code that may be redundant or unreachable or otherwise without any effect",
    "start": "2584160",
    "end": "2593838"
  },
  {
    "text": "all right next in your experience when would you run these it seems like it",
    "start": "2594160",
    "end": "2599520"
  },
  {
    "text": "would blow up a gated check-in when do you think it would be best used",
    "start": "2599520",
    "end": "2604720"
  },
  {
    "text": "i have seen this used in a gated check-in such as a step in a",
    "start": "2604720",
    "end": "2612160"
  },
  {
    "text": "ci or cd pipeline however the trick",
    "start": "2612160",
    "end": "2618560"
  },
  {
    "text": "is how you set the requirements ideally",
    "start": "2618560",
    "end": "2625680"
  },
  {
    "text": "we should have zero surviving mutants but it's going to take a long time to",
    "start": "2625680",
    "end": "2631440"
  },
  {
    "text": "get there on any already established code base so",
    "start": "2631440",
    "end": "2639200"
  },
  {
    "text": "just like some tools will analyze that the percent",
    "start": "2639200",
    "end": "2646560"
  },
  {
    "text": "test coverage has at least not decreased you could set up something to say your",
    "start": "2646560",
    "end": "2653040"
  },
  {
    "text": "number of surviving mutants has not increased or just like",
    "start": "2653040",
    "end": "2658480"
  },
  {
    "text": "you can only mutation test what has changed since the previous commit",
    "start": "2658480",
    "end": "2664240"
  },
  {
    "text": "you could have something demand that there be zero surviving",
    "start": "2664240",
    "end": "2669920"
  },
  {
    "text": "mutants in the code of this commit or of this pull request that may have",
    "start": "2669920",
    "end": "2676720"
  },
  {
    "text": "multiple commits see report of surviving mutants that's",
    "start": "2676720",
    "end": "2682480"
  },
  {
    "text": "the answer okay as a separate work item to evaluate the tests",
    "start": "2682480",
    "end": "2688839"
  },
  {
    "text": "um not sure what you mean bill but yes you",
    "start": "2688839",
    "end": "2693920"
  },
  {
    "text": "could use the results of a mutation testing report",
    "start": "2693920",
    "end": "2698960"
  },
  {
    "text": "to create a ticket or whatever some sort of work item to say",
    "start": "2698960",
    "end": "2704480"
  },
  {
    "start": "2700000",
    "end": "2760000"
  },
  {
    "text": "hey go look at these mutants figure out what they're trying to tell us and perhaps either fix",
    "start": "2704480",
    "end": "2711440"
  },
  {
    "text": "the issues or make further tickets perhaps they're trying to tell us okay",
    "start": "2711440",
    "end": "2718880"
  },
  {
    "text": "we've got these 50 bazillion files that have absolutely",
    "start": "2718880",
    "end": "2724240"
  },
  {
    "text": "meaningless tests they may have 100 coverage but the coverage doesn't really mean",
    "start": "2724240",
    "end": "2729520"
  },
  {
    "text": "much they're bad tests so you could make additional tickets to say okay",
    "start": "2729520",
    "end": "2737200"
  },
  {
    "text": "slap some meaningful tests around this file and another one for that bunch of files or whatever",
    "start": "2737200",
    "end": "2746400"
  },
  {
    "text": "okay i'm not seeing anything further unfortunately i cannot actually see the slack room right now",
    "start": "2746400",
    "end": "2754720"
  },
  {
    "text": "come to think of it yes maybe i can on my secondary device my tablet",
    "start": "2754720",
    "end": "2761838"
  },
  {
    "start": "2760000",
    "end": "2790000"
  },
  {
    "text": "is everybody putting anything in",
    "start": "2762560",
    "end": "2767280"
  },
  {
    "text": "there that's pretty straight oh we somehow managed to switch rooms",
    "start": "2772839",
    "end": "2779440"
  },
  {
    "text": "okay let me get to the right room it can switch operators so it's a junior",
    "start": "2779440",
    "end": "2786880"
  },
  {
    "text": "developer but i'm bum okay okay in a green field development do you",
    "start": "2786880",
    "end": "2794000"
  },
  {
    "start": "2790000",
    "end": "2820000"
  },
  {
    "text": "include this from the very beginning sorry first time i ever heard of this concept uh well it's",
    "start": "2794000",
    "end": "2800000"
  },
  {
    "text": "probably the first time a lot of the people at this uh conference have heard of it like i",
    "start": "2800000",
    "end": "2806560"
  },
  {
    "text": "said hardly anybody has really heard of it despite the fact that it's been around for well longer than most of",
    "start": "2806560",
    "end": "2814839"
  },
  {
    "text": "us and yes i would recommend including it from the beginning in a greenfield",
    "start": "2814839",
    "end": "2821839"
  },
  {
    "start": "2820000",
    "end": "2850000"
  },
  {
    "text": "project because number one it'll help you create more",
    "start": "2821839",
    "end": "2827040"
  },
  {
    "text": "meaningful tests i've been in fact toying with the idea of starting a little toy project with",
    "start": "2827040",
    "end": "2834240"
  },
  {
    "text": "just one test that just does like assert true",
    "start": "2834240",
    "end": "2839599"
  },
  {
    "text": "and then like pick a random mutant kill it lather rinse repeat and see if that",
    "start": "2839599",
    "end": "2845920"
  },
  {
    "text": "helps me generate a good test suite with the guidance",
    "start": "2845920",
    "end": "2851040"
  },
  {
    "start": "2850000",
    "end": "2880000"
  },
  {
    "text": "of mutation testing i'm not advocating that yet but it's an idea that i'm toying with",
    "start": "2851040",
    "end": "2859839"
  },
  {
    "text": "the other benefit of course it will help keep your new code base",
    "start": "2859839",
    "end": "2867520"
  },
  {
    "text": "shiny and clean and lean and devoid",
    "start": "2867520",
    "end": "2872559"
  },
  {
    "text": "of unreachable code and other meaningless croft [Music]",
    "start": "2872559",
    "end": "2879040"
  },
  {
    "text": "okay following from your previous response what did you mean by having 100 test coverage but the tests being",
    "start": "2879040",
    "end": "2884880"
  },
  {
    "start": "2880000",
    "end": "3030000"
  },
  {
    "text": "meaningless okay of course we all try to get really high",
    "start": "2884880",
    "end": "2892160"
  },
  {
    "text": "test coverage maybe we don't aim for 100 but a nice goal but you can get there by",
    "start": "2892160",
    "end": "2899680"
  },
  {
    "text": "cheating you can have code that you can have tests i mean that runs your",
    "start": "2899680",
    "end": "2906559"
  },
  {
    "text": "code but doesn't do anything meaningful with it and then does assert true that'll get you 100",
    "start": "2906559",
    "end": "2915200"
  },
  {
    "text": "code coverage you could possibly even have a very small number of tests that",
    "start": "2915200",
    "end": "2921119"
  },
  {
    "text": "call some of your high level functions that call a bunch of other stuff down below so as to run",
    "start": "2921119",
    "end": "2928400"
  },
  {
    "text": "huge swaths of code for each test but not really look at it not look at",
    "start": "2928400",
    "end": "2935359"
  },
  {
    "text": "the results or side effects or whatever so while a properly written test",
    "start": "2935359",
    "end": "2942400"
  },
  {
    "text": "would be you know meaningful it would actually test something significant",
    "start": "2942400",
    "end": "2948160"
  },
  {
    "text": "i'm not going to trust that everybody's tests are really good",
    "start": "2948160",
    "end": "2955359"
  },
  {
    "text": "does that do you understand what i mean",
    "start": "2955359",
    "end": "2959200"
  },
  {
    "text": "not seeing any response so i will assume that does",
    "start": "2964000",
    "end": "2971920"
  },
  {
    "text": "answer the question okay i'm not seeing anything more in the slack room",
    "start": "2971920",
    "end": "2981920"
  },
  {
    "text": "thanks but most people wouldn't be doing assert true well that depends how closely they think their tests",
    "start": "2982880",
    "end": "2990640"
  },
  {
    "text": "actually get looked at how honest they are",
    "start": "2990640",
    "end": "2998160"
  },
  {
    "text": "how skilled they are and so forth i think we can all think of at least a few",
    "start": "2998160",
    "end": "3004400"
  },
  {
    "text": "developers who certainly would if they number one were",
    "start": "3004400",
    "end": "3012079"
  },
  {
    "text": "being pressured to get 100 test coverage or any high number",
    "start": "3012079",
    "end": "3018160"
  },
  {
    "text": "and secondly thought they could get away with it of course you and i wouldn't do that",
    "start": "3018160",
    "end": "3025359"
  },
  {
    "text": "but i think we know some who would [Music]",
    "start": "3025359",
    "end": "3030900"
  },
  {
    "start": "3030000",
    "end": "3090000"
  },
  {
    "text": "yeah okay",
    "start": "3032800",
    "end": "3036160"
  },
  {
    "text": "any more questions or should i just give you do i have a",
    "start": "3039440",
    "end": "3045599"
  },
  {
    "text": "link to those awesome slides",
    "start": "3045599",
    "end": "3049839"
  },
  {
    "text": "[Music] most times i actually do put them up in",
    "start": "3050640",
    "end": "3055680"
  },
  {
    "text": "advance as a way to sort of prevent myself from continuing to mess with them at the last",
    "start": "3055680",
    "end": "3062000"
  },
  {
    "text": "minute which we all know is a bad idea but we often still do it but i was out of",
    "start": "3062000",
    "end": "3069920"
  },
  {
    "text": "town for a while couldn't work on them had some additional ideas i wanted to get in there so no i do not have them available",
    "start": "3069920",
    "end": "3078079"
  },
  {
    "text": "yet but i can export them to pdf and put them up",
    "start": "3078079",
    "end": "3083839"
  },
  {
    "text": "somewhere and i'll maybe drop a link in the",
    "start": "3083839",
    "end": "3089119"
  },
  {
    "text": "hallway or this room if i can do it very",
    "start": "3089119",
    "end": "3094839"
  },
  {
    "start": "3090000",
    "end": "3135000"
  },
  {
    "text": "quickly see",
    "start": "3094839",
    "end": "3098800"
  },
  {
    "text": "anything else or you want nine minutes of your night back",
    "start": "3100480",
    "end": "3110800"
  },
  {
    "text": "i'm not seeing further questions so i guess i'll give you nine minutes of your night back",
    "start": "3110800",
    "end": "3117280"
  },
  {
    "text": "night everybody",
    "start": "3117599",
    "end": "3120400"
  },
  {
    "text": "thanks",
    "start": "3122839",
    "end": "3125839"
  },
  {
    "text": "you",
    "start": "3134880",
    "end": "3136960"
  }
]