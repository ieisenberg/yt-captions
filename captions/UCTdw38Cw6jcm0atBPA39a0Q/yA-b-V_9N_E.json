[
  {
    "text": "is it on yeah perfect ah thank you so much for coming to these back to back sessions and and um",
    "start": "2399",
    "end": "10400"
  },
  {
    "text": "i'm hoping that you can you can still stay awake and and kind of take in this content even",
    "start": "10400",
    "end": "16240"
  },
  {
    "text": "though you didn't have a break in between but um we're going to talk about advanced.net debugging my name is tess i",
    "start": "16240",
    "end": "23600"
  },
  {
    "text": "work as a developer at microsoft i used to work um as a support engineer in the asp.net",
    "start": "23600",
    "end": "29840"
  },
  {
    "text": "team a long long time ago where i would debug all sorts of issues for",
    "start": "29840",
    "end": "35760"
  },
  {
    "text": "developers like us right now i'm more debugging for myself and debugging for",
    "start": "35760",
    "end": "41600"
  },
  {
    "text": "some of the product teams at microsoft but um i'm still using the same techniques that",
    "start": "41600",
    "end": "47760"
  },
  {
    "text": "i used to use back then part of what i've done also in my role was",
    "start": "47760",
    "end": "52960"
  },
  {
    "text": "to improve the the work or the debuggers that are included in visual studio etc but",
    "start": "52960",
    "end": "60320"
  },
  {
    "text": "we're going to talk about not some well some parts of it is going to be visual studio but most of it is not going to be",
    "start": "60320",
    "end": "65760"
  },
  {
    "text": "visual studio in fact when i was talking to dan north earlier yesterday i was he was asking me",
    "start": "65760",
    "end": "72479"
  },
  {
    "text": "what what is it about this that makes it advanced.net debugging compared to just you know normal.net",
    "start": "72479",
    "end": "79280"
  },
  {
    "text": "debugging well in my book it's because we're working on things that are very difficult to",
    "start": "79280",
    "end": "87280"
  },
  {
    "text": "troubleshoot with the tools that we normally use to troubleshoot net issues so things like memory leaks",
    "start": "87280",
    "end": "94000"
  },
  {
    "text": "performance problems crashes all of these things so",
    "start": "94000",
    "end": "99200"
  },
  {
    "text": "things that you can't have 5d by you can't step by step go through and figure out why you have a",
    "start": "99200",
    "end": "105200"
  },
  {
    "text": "memory leak things that happen randomly so maybe they'll happen today but then",
    "start": "105200",
    "end": "111040"
  },
  {
    "text": "it will take five days for it to happen again or things that happen on",
    "start": "111040",
    "end": "116079"
  },
  {
    "text": "linux or mac and you're developing on windows so you don't have the same tool set available on on the other machine where",
    "start": "116079",
    "end": "123439"
  },
  {
    "text": "it's actually happening where on the user's machine and or maybe it happens in the cloud so",
    "start": "123439",
    "end": "130080"
  },
  {
    "text": "um also there you might you may not have visual studio or these tools available",
    "start": "130080",
    "end": "136560"
  },
  {
    "text": "so we'll talk about all of that and we'll also sprinkle in some dot net internals into the mix",
    "start": "136560",
    "end": "142319"
  },
  {
    "text": "we're going to start this is going to be a very demo heavy session um but don't feel like you have to write",
    "start": "142319",
    "end": "148720"
  },
  {
    "text": "down any of the commands or anything i'll give you links in the end to kind of go through and",
    "start": "148720",
    "end": "155120"
  },
  {
    "text": "and see all the commands and figure things out um [Music] what i what i do want to convey is more",
    "start": "155120",
    "end": "162400"
  },
  {
    "text": "sort of like how the tools that we can use to troubleshoot these things and generally how to think about",
    "start": "162400",
    "end": "168319"
  },
  {
    "text": "troubleshooting these things so with high memory usage you only kind of have to ask yourself",
    "start": "168319",
    "end": "174400"
  },
  {
    "text": "two questions what's using up the memory so what are we using the memory for and why the heck",
    "start": "174400",
    "end": "180560"
  },
  {
    "text": "is it not going away and that's what we're going to look at right now so",
    "start": "180560",
    "end": "186640"
  },
  {
    "text": "for this first example i'm going to use um a very simple.net",
    "start": "186640",
    "end": "192080"
  },
  {
    "text": "application and i'm going to run it on on linux just to show that the tools i'm using are",
    "start": "192080",
    "end": "198080"
  },
  {
    "text": "also very much working on linux but you can use the same tools on a windows machine as well",
    "start": "198080",
    "end": "204159"
  },
  {
    "text": "so this application is this a single loop that goes through and",
    "start": "204159",
    "end": "210159"
  },
  {
    "text": "creates 10 000 product items sorry this",
    "start": "210159",
    "end": "215200"
  },
  {
    "text": "um puts them in a list so it's not necessarily leaking memory",
    "start": "215200",
    "end": "220239"
  },
  {
    "text": "because you can't really leak net memory in the same sense that you can do in a non-managed",
    "start": "220239",
    "end": "226640"
  },
  {
    "text": "language you can't sort of like new something and then forget about the pointer to that the garbage",
    "start": "226640",
    "end": "232640"
  },
  {
    "text": "collector will always keep attract and keep track of everything so but in this case we're we're used to using it up and",
    "start": "232640",
    "end": "239519"
  },
  {
    "text": "maybe we don't realize that we're using all that much so let's have a look at how this looks",
    "start": "239519",
    "end": "247840"
  },
  {
    "text": "so i'm going to run.net run and let's see if i can increase the size",
    "start": "247840",
    "end": "254239"
  },
  {
    "text": "a little bit here maybe like that um and this is just like i said gonna sit in a loop and and use up some memory",
    "start": "254239",
    "end": "262240"
  },
  {
    "text": "the first tool i'm gonna use is a tool that you can install with net installs",
    "start": "262240",
    "end": "268000"
  },
  {
    "text": "that's called net counters",
    "start": "268000",
    "end": "272400"
  },
  {
    "text": "and the first thing we're going to do is we're going to run a command on.net counters called ps",
    "start": "273919",
    "end": "279280"
  },
  {
    "text": "so ps lists all the processes and we see that our memory leak",
    "start": "279280",
    "end": "286720"
  },
  {
    "text": "item here is 1729 so we can then go ahead and run.net counter to monitor this",
    "start": "286720",
    "end": "294880"
  },
  {
    "text": "say monitor.p 1729 and what this will do is it will do the",
    "start": "294880",
    "end": "301520"
  },
  {
    "text": "equivalent of if you've ever worked with performance counters or anything like that it really sit and",
    "start": "301520",
    "end": "307120"
  },
  {
    "text": "listen and spit out a few performance counters and if you can't really see in the back",
    "start": "307120",
    "end": "313039"
  },
  {
    "text": "um some of the things that it spits out is um you know how much garbage collector heap we have so how much.net",
    "start": "313039",
    "end": "319680"
  },
  {
    "text": "memory we use how many garbage collections how many assemblies a couple of these",
    "start": "319680",
    "end": "326000"
  },
  {
    "text": "things so that when we watch these and and i go in here on the other side",
    "start": "326000",
    "end": "331120"
  },
  {
    "text": "and i say leak some more we can notice that for example this value",
    "start": "331120",
    "end": "337520"
  },
  {
    "text": "which is like the gc committed bytes um up here went from 201 to 402 so that",
    "start": "337520",
    "end": "344720"
  },
  {
    "text": "went from 200 megs to 400 megs and if i were to do this one more time",
    "start": "344720",
    "end": "350960"
  },
  {
    "text": "it would increase by approximately the same size so these are all these product items that i",
    "start": "350960",
    "end": "357520"
  },
  {
    "text": "created that's now leaking in here this is a tool that we can use is to",
    "start": "357520",
    "end": "362960"
  },
  {
    "text": "kind of like check check out what the what the situation is are we leaking.net",
    "start": "362960",
    "end": "369120"
  },
  {
    "text": "memory if we weren't seeing these kind of increases in in the net memory we would be looking",
    "start": "369120",
    "end": "375360"
  },
  {
    "text": "at so what else could we be leaking and something else we could be leaking for example is if we use a com component or",
    "start": "375360",
    "end": "381039"
  },
  {
    "text": "something like a c plus component that allocates its own memory or we could be leaking",
    "start": "381039",
    "end": "386800"
  },
  {
    "text": "assemblies we could have some kind of construct that would continuously load up dynamic assemblies for example like a",
    "start": "386800",
    "end": "393120"
  },
  {
    "text": "regular expression or an xml serializer or something but we have this",
    "start": "393120",
    "end": "399680"
  },
  {
    "text": "um and oh sorry i was gonna exit out of this one",
    "start": "399680",
    "end": "405360"
  },
  {
    "text": "but let's go ahead and run that one more time",
    "start": "405360",
    "end": "409840"
  },
  {
    "text": "and we'll do it three times he has to have the same kind of situation so the next",
    "start": "410800",
    "end": "416160"
  },
  {
    "text": "tool i'm going to use is a tool called.net gc dump so dotnet gc done is also a tool",
    "start": "416160",
    "end": "424240"
  },
  {
    "text": "that you can install with net install and it runs on windows it runs on linux",
    "start": "424240",
    "end": "429599"
  },
  {
    "text": "and what it will do is it will take a snapshot of your.net memory so we can equally here do.net gc dump",
    "start": "429599",
    "end": "437360"
  },
  {
    "text": "collect and let's see if i remember what what it was 1729",
    "start": "437360",
    "end": "445400"
  },
  {
    "text": "uh well i'll better do like ps and to see uh oh no so we changed the",
    "start": "446240",
    "end": "452000"
  },
  {
    "text": "way you started a new process so 1949 and so dotnet gc dump collect dash p",
    "start": "452000",
    "end": "460240"
  },
  {
    "text": "1949 so this will then generate a snapshot",
    "start": "460240",
    "end": "465440"
  },
  {
    "text": "with the extension gc dump so literally this is just enumerating in the heap figuring out",
    "start": "465440",
    "end": "470960"
  },
  {
    "text": "like how many of each object you have and and creating like a statistic list of",
    "start": "470960",
    "end": "476639"
  },
  {
    "text": "them and the roots so with this what we can do now is we can open up",
    "start": "476639",
    "end": "482479"
  },
  {
    "text": "visual studio and we can load this up so now i'm running visual studio on my windows machine but it doesn't matter",
    "start": "482479",
    "end": "489199"
  },
  {
    "text": "even though i got the gc done from from a linux machine",
    "start": "489199",
    "end": "494639"
  },
  {
    "text": "so at least open this up and i apologize i can't zoom in on this",
    "start": "494720",
    "end": "501680"
  },
  {
    "text": "um but what we have in here is we have a list of all the types of.net objects we",
    "start": "501680",
    "end": "506800"
  },
  {
    "text": "have and we can sort them by count or by size or by inclusive size",
    "start": "506800",
    "end": "513919"
  },
  {
    "text": "so if we sort them by size that means that we're going to look at what is using up the most amount of the",
    "start": "513919",
    "end": "520240"
  },
  {
    "text": "memory and one thing you need to know about net",
    "start": "520240",
    "end": "525839"
  },
  {
    "text": "for to understand sort of like the difference between size and inclusive size is that",
    "start": "525839",
    "end": "531040"
  },
  {
    "text": "the size would only include the actual data that's in the product but a product",
    "start": "531040",
    "end": "536720"
  },
  {
    "text": "in this case is essentially just a list of pointers to",
    "start": "536720",
    "end": "544080"
  },
  {
    "text": "two different objects so inclusive size is the size including",
    "start": "544080",
    "end": "549120"
  },
  {
    "text": "any real data in there so we look at inclusive size so that",
    "start": "549120",
    "end": "555440"
  },
  {
    "text": "makes sense that makes a difference for example here for the list of products where the list of products only displays",
    "start": "555440",
    "end": "562480"
  },
  {
    "text": "um in a list of products it's only 525 bytes total but",
    "start": "562480",
    "end": "568240"
  },
  {
    "text": "it contains a lot of product so inclusive size would be like that but it doesn't really matter we look at",
    "start": "568240",
    "end": "574480"
  },
  {
    "text": "either one of them and we might even look at the count we might say okay so couldn't really find anything with the",
    "start": "574480",
    "end": "579920"
  },
  {
    "text": "size what not the size will usually show a lot of strings and other like character arrays and things",
    "start": "579920",
    "end": "586640"
  },
  {
    "text": "like that that are a little bit nondescript but we can also look at the count because maybe we'll realize that",
    "start": "586640",
    "end": "592640"
  },
  {
    "text": "forty thousand um forty thousand products seems like a little bit excess excessive for this",
    "start": "592640",
    "end": "600080"
  },
  {
    "text": "process i wasn't expecting to do to use that much so then i would go in and i would click on this product and and what this does",
    "start": "600080",
    "end": "607600"
  },
  {
    "text": "it will go through and say who is holding on to this memory and in this case we can see that",
    "start": "607600",
    "end": "613680"
  },
  {
    "text": "down here it says that 39 999 of them",
    "start": "613680",
    "end": "619600"
  },
  {
    "text": "are held on to by this array so the reason why they stick around is because they are",
    "start": "619600",
    "end": "624640"
  },
  {
    "text": "rooted in this array um this array of products and then from",
    "start": "624640",
    "end": "629839"
  },
  {
    "text": "there i can troubleshoot a little bit i can't troubleshoot much more here i can't see for example",
    "start": "629839",
    "end": "635839"
  },
  {
    "text": "any properties of the products or anything because i only have the statistics and the roots of them",
    "start": "635839",
    "end": "642399"
  },
  {
    "text": "but this a lot of times get us as far as we need",
    "start": "642399",
    "end": "647440"
  },
  {
    "text": "also one thing i want to mention about this is i used the tool gc dump now but",
    "start": "647440",
    "end": "652640"
  },
  {
    "text": "if you are in fact f5 debugging and you want to do this thing where you want to look at what what type of objects you",
    "start": "652640",
    "end": "658480"
  },
  {
    "text": "have in your in your process you can also go in and create a snapshot in diagnostic tools in",
    "start": "658480",
    "end": "664959"
  },
  {
    "text": "in visual studio and that will generate the exact same thing you can also create multiple snapshots",
    "start": "664959",
    "end": "670800"
  },
  {
    "text": "compare them to see if a certain item has has gotten like if you've leaked or if",
    "start": "670800",
    "end": "677200"
  },
  {
    "text": "you've used more of a certain type of item or not but this is the first",
    "start": "677200",
    "end": "682560"
  },
  {
    "text": "the first tool that that could be useful um",
    "start": "682560",
    "end": "688399"
  },
  {
    "text": "next i'm gonna use another tool um that's called gc dump so what dc dump",
    "start": "688399",
    "end": "694880"
  },
  {
    "text": "does is it creates a memory dump of the process so this doesn't only create the",
    "start": "694880",
    "end": "700399"
  },
  {
    "text": "statistics but it creates a memory dump of all the memory that the process uses including",
    "start": "700399",
    "end": "706240"
  },
  {
    "text": "uh in this case g and netdump only takes the managed memory it doesn't",
    "start": "706240",
    "end": "711760"
  },
  {
    "text": "understand much about native memory but we we will have things like",
    "start": "711760",
    "end": "717680"
  },
  {
    "text": "we can actually go in and look at the details about what some of these things are so",
    "start": "717680",
    "end": "725279"
  },
  {
    "text": "i'm going to exit out of this one i think [Music]",
    "start": "725279",
    "end": "732560"
  },
  {
    "text": "for some reason i've had an issue lately with um windows terminal where it's not really",
    "start": "732560",
    "end": "739600"
  },
  {
    "text": "cooperating on after i clicked control c so we'll go",
    "start": "739600",
    "end": "746959"
  },
  {
    "text": "so we can now we created the the memory dump um which is like this",
    "start": "750800",
    "end": "756639"
  },
  {
    "text": "core dump on linux we can now go in and run dotnet dump",
    "start": "756639",
    "end": "763920"
  },
  {
    "text": "again um see.netdump",
    "start": "763920",
    "end": "768959"
  },
  {
    "text": "but in this case we're gonna do analyze so it's both a collector",
    "start": "768959",
    "end": "774480"
  },
  {
    "text": "and a tool to actually debug memory dumps with so analyze and we're going to analyze",
    "start": "774480",
    "end": "780560"
  },
  {
    "text": "this memory dump and this puts us in a place where we can run a number of commands and then commands we can run",
    "start": "780560",
    "end": "788480"
  },
  {
    "text": "you can see by help so a couple of the commands that we can run are for example",
    "start": "788480",
    "end": "794800"
  },
  {
    "text": "um [Music] looking at the clr stack so looking at the net stacks of the threads or",
    "start": "794800",
    "end": "801200"
  },
  {
    "text": "looking at the memory used and things like that so",
    "start": "801200",
    "end": "806720"
  },
  {
    "text": "if i go in and run one of the commands which is e version i will see that this is a process that",
    "start": "806720",
    "end": "813680"
  },
  {
    "text": "was running dot net 6.0 it was running in workstation mode so",
    "start": "813680",
    "end": "819040"
  },
  {
    "text": "workstation mode is one of the modes that you run the garbage collector in and we have",
    "start": "819040",
    "end": "824320"
  },
  {
    "text": "workstation and server where workstation mode is meant for",
    "start": "824320",
    "end": "829360"
  },
  {
    "text": "things like console apps and things like that that don't don't have a lot of concurrent requests coming in where",
    "start": "829360",
    "end": "835600"
  },
  {
    "text": "server mode is something you would run in on a web server where you have a lot of concurrent requests",
    "start": "835600",
    "end": "841440"
  },
  {
    "text": "and you have one garbage collector thread per heap or per per processor",
    "start": "841440",
    "end": "846800"
  },
  {
    "text": "per processor or per um [Music] per core if you will",
    "start": "846800",
    "end": "854160"
  },
  {
    "text": "and they behave a little bit differently so the workstation is a bit more blocking but it doesn't block the ui",
    "start": "854160",
    "end": "859360"
  },
  {
    "text": "thread the the server mode tries to coordinate",
    "start": "859360",
    "end": "864639"
  },
  {
    "text": "then in my case eight different gc threads we'll see that in a bit uh i can",
    "start": "864639",
    "end": "870639"
  },
  {
    "text": "run e heap gc all of these commands come from a tool",
    "start": "870639",
    "end": "876399"
  },
  {
    "text": "called sos which is short for son of strike where this was",
    "start": "876399",
    "end": "881920"
  },
  {
    "text": "something that me and my team worked on a long long time ago on making.net more debuggable",
    "start": "881920",
    "end": "889519"
  },
  {
    "text": "and son of strike is an extension of another tool that is",
    "start": "889519",
    "end": "894880"
  },
  {
    "text": "called strike for strike the lightning in the very old days and when i worked",
    "start": "894880",
    "end": "900959"
  },
  {
    "text": "when i worked in support i dot net was called dna and lightning",
    "start": "900959",
    "end": "906399"
  },
  {
    "text": "like the bcl like the base class libraries versus the the runtime were called dna and lightning and strike was",
    "start": "906399",
    "end": "913680"
  },
  {
    "text": "was just so we could sort of like run this rudimentary debugging on on.net so it's a little history lesson",
    "start": "913680",
    "end": "921360"
  },
  {
    "text": "that ages me a lot i think but what this does this e-heap dash gc",
    "start": "921360",
    "end": "927519"
  },
  {
    "text": "that i ran um it lists out all of the heaps in in.net so",
    "start": "927519",
    "end": "935360"
  },
  {
    "text": "all the different segments that the garbage collector allocates i'll talk a little bit about how that works later but for now",
    "start": "935360",
    "end": "941680"
  },
  {
    "text": "um we want to look at this so this is the 808 megabytes that we've committed",
    "start": "941680",
    "end": "947199"
  },
  {
    "text": "for net so we can clearly see that it is a net problem even if we didn't have gc dump and all that",
    "start": "947199",
    "end": "953440"
  },
  {
    "text": "or counters and we can run dumpheep",
    "start": "953440",
    "end": "958320"
  },
  {
    "text": "um stat and this will give the statistics that is very very similar to what we saw in",
    "start": "958480",
    "end": "965360"
  },
  {
    "text": "visual studio and lowest here is is the one that's using up the most memory we can see that",
    "start": "965360",
    "end": "972880"
  },
  {
    "text": "um we in fact have um 40 000 uh products",
    "start": "972880",
    "end": "979680"
  },
  {
    "text": "and in this case only the link size sizes are shown um",
    "start": "979680",
    "end": "985519"
  },
  {
    "text": "and the way i would look at something like this is i would go from the bottom and i would go like okay so characters or",
    "start": "985519",
    "end": "991600"
  },
  {
    "text": "character arrays are very nondescript i don't know what they belong to strings okay but i",
    "start": "991600",
    "end": "997360"
  },
  {
    "text": "see this product that's something i can work with and something i can kind of like reason about whether or not that's",
    "start": "997360",
    "end": "1003839"
  },
  {
    "text": "a reasonable number of these and then i would go in and i would",
    "start": "1003839",
    "end": "1009680"
  },
  {
    "text": "take this first column and i would run dumpheep mt so the first column is called a",
    "start": "1009680",
    "end": "1015920"
  },
  {
    "text": "method table that's a descriptor for how this object looks what methods you can call on it what the class is and so on",
    "start": "1015920",
    "end": "1023360"
  },
  {
    "text": "and this dumps out all the objects of that type so these are the addresses of all the",
    "start": "1023360",
    "end": "1029600"
  },
  {
    "text": "objects i can go in then and pick out one of the addresses i don't know why",
    "start": "1029600",
    "end": "1036000"
  },
  {
    "text": "let's see if that worked yeah",
    "start": "1036000",
    "end": "1041038"
  },
  {
    "text": "okay this is not it's very hard if i'm gonna have to um",
    "start": "1044240",
    "end": "1052320"
  },
  {
    "text": "i'm going to have to actually write the the address of that so let's see if we can",
    "start": "1052320",
    "end": "1057520"
  },
  {
    "text": "get this working one more time",
    "start": "1057520",
    "end": "1061679"
  },
  {
    "text": "don't keep start we're getting the objects",
    "start": "1065679",
    "end": "1069919"
  },
  {
    "text": "and then copying out the product",
    "start": "1071120",
    "end": "1076360"
  },
  {
    "text": "okay good now i can run another command that's called dump obj or",
    "start": "1083200",
    "end": "1089600"
  },
  {
    "text": "if you want you can just run do for for short and what this will do is it will dump out the actual product object so as",
    "start": "1089600",
    "end": "1097200"
  },
  {
    "text": "you would see it in visual studio if you were stopped so we can see things like if we continue to",
    "start": "1097200",
    "end": "1102960"
  },
  {
    "text": "dump out like the name for example we can see the name is product 9992",
    "start": "1102960",
    "end": "1109120"
  },
  {
    "text": "so this was some string that i had filled in and like when i created them in the loop i named them product in in",
    "start": "1109120",
    "end": "1115360"
  },
  {
    "text": "the index so here we can do a little bit more reasoning about like okay so i can if i",
    "start": "1115360",
    "end": "1122480"
  },
  {
    "text": "dump out a few of these and i see that they all of the ones that i have have these properties maybe that will give me",
    "start": "1122480",
    "end": "1127919"
  },
  {
    "text": "some clues on why i'm holding on to them and then i can also do",
    "start": "1127919",
    "end": "1134840"
  },
  {
    "text": "um gc root on this sorry",
    "start": "1134840",
    "end": "1140799"
  },
  {
    "text": "and gc root will then do exactly what um the gc dump thing did",
    "start": "1143120",
    "end": "1148799"
  },
  {
    "text": "where it will show me the roots of what's going on so in this case it tells me that that string i was doing gc root on is a",
    "start": "1148799",
    "end": "1155520"
  },
  {
    "text": "member variable of product this part of a list in fact array is the",
    "start": "1155520",
    "end": "1161600"
  },
  {
    "text": "internal implementation of a list and that is held onto by thread 790.",
    "start": "1161600",
    "end": "1167919"
  },
  {
    "text": "so if i move to threads and i see 79d happens to be the one",
    "start": "1167919",
    "end": "1173280"
  },
  {
    "text": "we're on marked by a star and if i do clr stacks i see the stack",
    "start": "1173280",
    "end": "1178799"
  },
  {
    "text": "here i can see that this is the main um the main function of the class it's",
    "start": "1178799",
    "end": "1186160"
  },
  {
    "text": "sitting in a read line and this is sort of like the thread that's still holding on to the list so basically this is just",
    "start": "1186160",
    "end": "1194000"
  },
  {
    "text": "um a quick how you would go through these kind of",
    "start": "1194000",
    "end": "1199280"
  },
  {
    "text": "memory issues so um we looked at",
    "start": "1199280",
    "end": "1207240"
  },
  {
    "text": "dotnetcounters.netdump.net gc dump and if you want to go through this and try it out for yourself i do have them",
    "start": "1207240",
    "end": "1214880"
  },
  {
    "text": "this and everything else i'm going to go through on my blog and",
    "start": "1214880",
    "end": "1220799"
  },
  {
    "text": "specifically this walkthrough is available like that's the last um one i",
    "start": "1220799",
    "end": "1226799"
  },
  {
    "text": "last post i i have in there with all the different commands and",
    "start": "1226799",
    "end": "1232320"
  },
  {
    "text": "the video and all of these things so don't worry about having to to actually remember all of these things",
    "start": "1232320",
    "end": "1238799"
  },
  {
    "text": "but i also have a set of labs on there so the set of labs um is something like",
    "start": "1238799",
    "end": "1243840"
  },
  {
    "text": "you can download a very bad application and you can try to troubleshoot these things by yourself",
    "start": "1243840",
    "end": "1249760"
  },
  {
    "text": "with different prompts okay so why would we keep memory hanging",
    "start": "1249760",
    "end": "1255840"
  },
  {
    "text": "around well [Music] the only thing that keeps memory hanging around as if if the object is not",
    "start": "1255840",
    "end": "1263039"
  },
  {
    "text": "getting ready to where it's not being ready to be garbage collected yet and the things that could keep memory",
    "start": "1263039",
    "end": "1269600"
  },
  {
    "text": "around are threads so it's still being used on the thread on the stack what not",
    "start": "1269600",
    "end": "1275200"
  },
  {
    "text": "if you have a static object if you have cache which is like a",
    "start": "1275200",
    "end": "1280559"
  },
  {
    "text": "subset of static objects if you pin it or span it um or if it's",
    "start": "1280559",
    "end": "1287280"
  },
  {
    "text": "locked by the finalizer queue so we're going to look at a situation where the finalizer cube",
    "start": "1287280",
    "end": "1294320"
  },
  {
    "text": "blocks it oh thank you um",
    "start": "1294320",
    "end": "1299440"
  },
  {
    "text": "in a second but before we go into that let's talk a little bit about memory management in",
    "start": "1299440",
    "end": "1306080"
  },
  {
    "text": "in.net so i mentioned and we saw in the heap gc",
    "start": "1306080",
    "end": "1312000"
  },
  {
    "text": "that we have something called segment so as opposed to for example c plus plus",
    "start": "1312000",
    "end": "1317600"
  },
  {
    "text": "we don't allocate the memory ourself we use a garbage collector and a garbage collector whether it's",
    "start": "1317600",
    "end": "1323440"
  },
  {
    "text": "c-sharp or whether it's python or java or javascript they all essentially work",
    "start": "1323440",
    "end": "1328559"
  },
  {
    "text": "a little bit the same way so what i'm showing here is going to be roughly equal on all of them",
    "start": "1328559",
    "end": "1334480"
  },
  {
    "text": "with a few implementation details um but you can think of it as",
    "start": "1334480",
    "end": "1341360"
  },
  {
    "text": "instead of you allocating them if you go to a restaurant if they allocate like a super big table and you just get seated",
    "start": "1341360",
    "end": "1348320"
  },
  {
    "text": "at the table so you come into the restaurant and you get seated the more you allocate objects the",
    "start": "1348320",
    "end": "1354960"
  },
  {
    "text": "more the more you start filling up the table and then you get to a point",
    "start": "1354960",
    "end": "1360400"
  },
  {
    "text": "where you reach a limit um and the limit is i'll talk a little bit about",
    "start": "1360400",
    "end": "1365440"
  },
  {
    "text": "generations and things like that but one limit for example is when you reach the end of a segment",
    "start": "1365440",
    "end": "1371280"
  },
  {
    "text": "and at that point you need to garbage collect so what you do is you go through and you ask",
    "start": "1371280",
    "end": "1376320"
  },
  {
    "text": "anyone ready um okay so these guys are done eating we can then mark them as done",
    "start": "1376320",
    "end": "1383760"
  },
  {
    "text": "sweep things and compact um the memory so",
    "start": "1383760",
    "end": "1389520"
  },
  {
    "text": "we then have more space on this segment we continue allocating more memory",
    "start": "1389520",
    "end": "1395120"
  },
  {
    "text": "eventually we'll get to a point where we can't actually allocate any more memory on this segment so we'll start creating",
    "start": "1395120",
    "end": "1400640"
  },
  {
    "text": "more and more segments like this and that's simply how memory management works in",
    "start": "1400640",
    "end": "1407039"
  },
  {
    "text": "in a garbage collected world so marx sweep and compactor are these phases we do have those something called",
    "start": "1407039",
    "end": "1413760"
  },
  {
    "text": "generations and the generations are what we what we use sort of to optimize",
    "start": "1413760",
    "end": "1419919"
  },
  {
    "text": "how the garbage collector works so generation zero are things that are",
    "start": "1419919",
    "end": "1425039"
  },
  {
    "text": "very current so these might be things that you're using in your current",
    "start": "1425039",
    "end": "1431120"
  },
  {
    "text": "function or things that you just recently used",
    "start": "1431120",
    "end": "1436159"
  },
  {
    "text": "anything that fits um into l2 cache so as soon as you reach",
    "start": "1436159",
    "end": "1442159"
  },
  {
    "text": "the limit which is your cpu cache we start collecting",
    "start": "1442159",
    "end": "1447679"
  },
  {
    "text": "the first generation um so the reason why",
    "start": "1447679",
    "end": "1454240"
  },
  {
    "text": "why this is an optimization is because anything that you allocated recently is probably something that you will use",
    "start": "1454240",
    "end": "1461200"
  },
  {
    "text": "very close to now where something that you've used or that you allocated a long time ago something",
    "start": "1461200",
    "end": "1466880"
  },
  {
    "text": "that's in cash or something and that's a little bit more long-term storage you probably don't use as often so it",
    "start": "1466880",
    "end": "1473039"
  },
  {
    "text": "doesn't matter if you have to sort of like swap things in and out of the cpu",
    "start": "1473039",
    "end": "1478080"
  },
  {
    "text": "but if for some reason it survives this so if if you go through and you're not",
    "start": "1478080",
    "end": "1483840"
  },
  {
    "text": "done when it's doing collection you turn it into generation one so you put it in",
    "start": "1483840",
    "end": "1489039"
  },
  {
    "text": "a little bit more in long term storage than your your current work and then eventually",
    "start": "1489039",
    "end": "1495279"
  },
  {
    "text": "when you allocate enough for the generation one uh to be",
    "start": "1495279",
    "end": "1500480"
  },
  {
    "text": "filled then it will move into generation two which is your um like that's the last generation that",
    "start": "1500480",
    "end": "1507120"
  },
  {
    "text": "exists so generation two collections are very expensive",
    "start": "1507120",
    "end": "1512320"
  },
  {
    "text": "compared to generation zero collections generation zero collections happen like this they happen very often",
    "start": "1512320",
    "end": "1518320"
  },
  {
    "text": "and generation two collections happen very more so much more seldom but when they do happen",
    "start": "1518320",
    "end": "1523600"
  },
  {
    "text": "they cost more um so",
    "start": "1523600",
    "end": "1529520"
  },
  {
    "text": "let's have a look at how how this looks inside um the memory dump",
    "start": "1529520",
    "end": "1536880"
  },
  {
    "text": "so let's go ahead and open this up again and we'll look at e heap dash gc",
    "start": "1536880",
    "end": "1543360"
  },
  {
    "text": "and we'll see these are the segments that we have uh right here so we have",
    "start": "1543360",
    "end": "1549039"
  },
  {
    "text": "a set of segments uh if we look at one of them for example like this one",
    "start": "1549039",
    "end": "1554400"
  },
  {
    "text": "so we'll do dumpheep",
    "start": "1554400",
    "end": "1558799"
  },
  {
    "text": "from here to wherever it was",
    "start": "1559840",
    "end": "1564880"
  },
  {
    "text": "what did i do here to where it was allocated we'll see that",
    "start": "1564880",
    "end": "1570080"
  },
  {
    "text": "this is in fact how this looks as in it they're allocated like one after another",
    "start": "1570080",
    "end": "1577679"
  },
  {
    "text": "all of these objects and if we were to dump them out we could but",
    "start": "1577679",
    "end": "1583760"
  },
  {
    "text": "um what we what we can see from this is that objects on on the.net heap are immutable",
    "start": "1583760",
    "end": "1592000"
  },
  {
    "text": "in the state you cannot grow an object you cannot grow a string for example you",
    "start": "1592000",
    "end": "1597600"
  },
  {
    "text": "would have to create a new string because if you did grow a string there wouldn't be space for it",
    "start": "1597600",
    "end": "1603360"
  },
  {
    "text": "because there's something tacked on right after it right so that means that",
    "start": "1603360",
    "end": "1609200"
  },
  {
    "text": "as we'll see in a bit if you do happen to do something where you think you're gonna",
    "start": "1609200",
    "end": "1614799"
  },
  {
    "text": "just expand something but you don't that's gonna lead to trouble but let's go ahead and",
    "start": "1614799",
    "end": "1620940"
  },
  {
    "text": "[Music] and have a look at another memory leak by",
    "start": "1620940",
    "end": "1626400"
  },
  {
    "text": "the way if you're interested in the details of how memory management works and everything",
    "start": "1626400",
    "end": "1631600"
  },
  {
    "text": "maoni who's the architect of the gc she's got this and a number of other",
    "start": "1631600",
    "end": "1637520"
  },
  {
    "text": "documents that's very good explanations both of how memory management work and what you can",
    "start": "1637520",
    "end": "1643039"
  },
  {
    "text": "do to to make sure that your applications are more performant",
    "start": "1643039",
    "end": "1649919"
  },
  {
    "text": "so let's go and have a look at another um",
    "start": "1650080",
    "end": "1655600"
  },
  {
    "text": "issue with high memory usage in this case i'm i'm not going to capture the dump like i could capture",
    "start": "1655600",
    "end": "1661679"
  },
  {
    "text": "the dump either through through using gc dump or i could go in",
    "start": "1661679",
    "end": "1667039"
  },
  {
    "text": "on any process and say create a dump file this is also a valid way to create a memory dump of",
    "start": "1667039",
    "end": "1674320"
  },
  {
    "text": "like any it doesn't have to be your process as long as you're",
    "start": "1674320",
    "end": "1679919"
  },
  {
    "text": "either running it or you have privileges higher than the person who's running it on your system",
    "start": "1679919",
    "end": "1686399"
  },
  {
    "text": "um and there's also a number of different tools that you can use to create these memory dumps",
    "start": "1686399",
    "end": "1691600"
  },
  {
    "text": "but i've already created one and i'm going to load it up here so this is a tool called windybg",
    "start": "1691600",
    "end": "1698480"
  },
  {
    "text": "and wendyg is is a native debugger so",
    "start": "1698480",
    "end": "1704880"
  },
  {
    "text": "that means that um it doesn't only understand uh it doesn't only understand.net memory",
    "start": "1704880",
    "end": "1711919"
  },
  {
    "text": "but it also understands other things like windows calls and the",
    "start": "1711919",
    "end": "1717039"
  },
  {
    "text": "drivers and everything that's underneath it it's not kernel so it doesn't actually go in the drivers is still a",
    "start": "1717039",
    "end": "1722399"
  },
  {
    "text": "user mode dump which means it's only the process itself but it understands like the underlying",
    "start": "1722399",
    "end": "1727760"
  },
  {
    "text": "thing is like if we if we look at the thread you'll see that it's like empty dll",
    "start": "1727760",
    "end": "1733279"
  },
  {
    "text": "and the starts of or things like that so we're going to run through",
    "start": "1733279",
    "end": "1739279"
  },
  {
    "text": "the exact same scenario here though we're going to do an e-version",
    "start": "1739279",
    "end": "1745840"
  },
  {
    "text": "and in this case we're going to see that we're actually running in server mode this is from a website",
    "start": "1745840",
    "end": "1751120"
  },
  {
    "text": "so server mode with ateps will run e-heap",
    "start": "1751120",
    "end": "1758000"
  },
  {
    "text": "and gc find out that we're using 200 megs of of memory so that's what",
    "start": "1758159",
    "end": "1764960"
  },
  {
    "text": "we're kind of dealing with and what we want to dissect and then we'll do dump stat to",
    "start": "1764960",
    "end": "1770880"
  },
  {
    "text": "understand what the objects are that we're loading up if you're a little bit attached even if",
    "start": "1770880",
    "end": "1777520"
  },
  {
    "text": "you can see what i'm writing on the screen like you'll see that there's an exclamation mark in here that wasn't",
    "start": "1777520",
    "end": "1784399"
  },
  {
    "text": "there in the dot net dump case this is because in this case i'm running sos as",
    "start": "1784399",
    "end": "1790480"
  },
  {
    "text": "a a dollar module that windows windowpg uses",
    "start": "1790480",
    "end": "1796640"
  },
  {
    "text": "so whereas the commands are built in to gcdump",
    "start": "1796640",
    "end": "1803039"
  },
  {
    "text": "but in here we can see if we look from the bottom um a similar",
    "start": "1803919",
    "end": "1808960"
  },
  {
    "text": "scenario where we have you know some characters array strings string builders what not and then",
    "start": "1808960",
    "end": "1815760"
  },
  {
    "text": "eventually we run up here and we see um some of my own things",
    "start": "1815760",
    "end": "1821360"
  },
  {
    "text": "um a link and we have 8 000 of them and i then go in and say okay so that",
    "start": "1821360",
    "end": "1826960"
  },
  {
    "text": "seems a little bit fishy i go in in this case i can run all the same commands like",
    "start": "1826960",
    "end": "1832000"
  },
  {
    "text": "dump empty and everything or i can also click on the links here it's using something called the bugger markup",
    "start": "1832000",
    "end": "1837679"
  },
  {
    "text": "language that is when you click it's actually running a dump object or a dump in this case",
    "start": "1837679",
    "end": "1845440"
  },
  {
    "text": "so i'm listing out all the all these links and i go through the exact same scenario",
    "start": "1845440",
    "end": "1851679"
  },
  {
    "text": "i go open one up for example which is dump obj",
    "start": "1851679",
    "end": "1857120"
  },
  {
    "text": "and i click on this which does another dump obj and we can see that in this case it's",
    "start": "1857120",
    "end": "1862320"
  },
  {
    "text": "called like nico's weblog with some text that was in this link but i want to know",
    "start": "1862320",
    "end": "1868080"
  },
  {
    "text": "why this is being kept alive so i do gc root",
    "start": "1868080",
    "end": "1874720"
  },
  {
    "text": "and when i go through and do gc root",
    "start": "1874720",
    "end": "1879320"
  },
  {
    "text": "there's a long list of likes i'll pick another one",
    "start": "1880159",
    "end": "1885279"
  },
  {
    "text": "maybe that's an easier one",
    "start": "1885279",
    "end": "1891159"
  },
  {
    "text": "i'll see that it's locked by or is used by something called a finalizer queue",
    "start": "1894159",
    "end": "1899440"
  },
  {
    "text": "so the finalizer queue is one of the garbage collector threads",
    "start": "1899440",
    "end": "1904880"
  },
  {
    "text": "we looked here that is specifically dedicated to only",
    "start": "1904880",
    "end": "1910799"
  },
  {
    "text": "calling your destructor so if you have a destructor on your object if you're trying to release some kind of native",
    "start": "1910799",
    "end": "1917440"
  },
  {
    "text": "memory or handles or whatever you might have you might have a destructor and this thread is the only one who's",
    "start": "1917440",
    "end": "1924240"
  },
  {
    "text": "allowed to run the structures what that means is that if you have an object",
    "start": "1924240",
    "end": "1929600"
  },
  {
    "text": "that uses a destructor whether or not it's empty it will in fact cause your your object",
    "start": "1929600",
    "end": "1935919"
  },
  {
    "text": "to at least survive generation zero because it has to do survive it mark it for a deletion",
    "start": "1935919",
    "end": "1942399"
  },
  {
    "text": "finalize it and then garbage collect it and in this case",
    "start": "1942399",
    "end": "1947760"
  },
  {
    "text": "the reason why it's sticking around or why um why we're seeing this memory leak is",
    "start": "1947760",
    "end": "1954480"
  },
  {
    "text": "because if we were to if we look at the finalizer and this is something like whenever you see something that's",
    "start": "1954480",
    "end": "1961039"
  },
  {
    "text": "rooted in the finalize queue you would go in and look at the thread",
    "start": "1961039",
    "end": "1966159"
  },
  {
    "text": "and run clr stack",
    "start": "1966159",
    "end": "1969760"
  },
  {
    "text": "and in this case it's sitting in a sleep now obviously this is a",
    "start": "1972080",
    "end": "1977840"
  },
  {
    "text": "is something that i'm doing kind of like to to cause the problem but you can imagine it would be stuck for example",
    "start": "1977840",
    "end": "1984720"
  },
  {
    "text": "and do like trying to release a handle something that's taking a lot of time even if it just takes a little bit of",
    "start": "1984720",
    "end": "1991679"
  },
  {
    "text": "time if you release a lot of them then it would take a lot of time to to release all of them",
    "start": "1991679",
    "end": "1998480"
  },
  {
    "text": "okay so um that is an example of a memory leak",
    "start": "1999039",
    "end": "2004720"
  },
  {
    "text": "um on the finalizer eq so this is",
    "start": "2004720",
    "end": "2010320"
  },
  {
    "text": "a and this is just if you have one of these um empty destructors you will run into",
    "start": "2010320",
    "end": "2016159"
  },
  {
    "text": "two situations and when you survive too many times so we used a windowpg internally this",
    "start": "2016159",
    "end": "2023919"
  },
  {
    "text": "uses.net sos and.net symbols and you can also install these with",
    "start": "2023919",
    "end": "2029360"
  },
  {
    "text": "with.net tools so one thing we haven't talked about yet when it",
    "start": "2029360",
    "end": "2035360"
  },
  {
    "text": "comes to the garbage collector is is the elephant in the room which is a large objective",
    "start": "2035360",
    "end": "2040720"
  },
  {
    "text": "so the large objective is a special heap um sort of like a special",
    "start": "2040720",
    "end": "2046640"
  },
  {
    "text": "set of segments that are meant for very large objects so any objects that are",
    "start": "2046640",
    "end": "2051679"
  },
  {
    "text": "over 85 000 bytes for example um",
    "start": "2051679",
    "end": "2057358"
  },
  {
    "text": "lists that are very large or or strings that are very large etc and this is",
    "start": "2057359",
    "end": "2063040"
  },
  {
    "text": "another optimization of the garbage collector where because we don't want to constantly move",
    "start": "2063040",
    "end": "2068960"
  },
  {
    "text": "a list of of 85 85 000 objects because that would mean that we would have to move a lot of",
    "start": "2068960",
    "end": "2075599"
  },
  {
    "text": "things we're putting them on a separate table and um we're garbage collecting them as",
    "start": "2075599",
    "end": "2082320"
  },
  {
    "text": "normal but when we do garbage collect the larger tip we don't only garbage collect a",
    "start": "2082320",
    "end": "2087679"
  },
  {
    "text": "large objective we do a full generation two collection so that means that if you're doing a lot",
    "start": "2087679",
    "end": "2095599"
  },
  {
    "text": "of allocations on the large object heap you will eventually end up exhausting",
    "start": "2095599",
    "end": "2100800"
  },
  {
    "text": "the segment making them a large or a garbage collection of the large habitable which then induces a",
    "start": "2100800",
    "end": "2107839"
  },
  {
    "text": "generation two collection which is fairly expensive so if you keep doing this you'll end up in",
    "start": "2107839",
    "end": "2114000"
  },
  {
    "text": "a very bad pattern that's causing a lot of bad cpu usage",
    "start": "2114000",
    "end": "2119040"
  },
  {
    "text": "which takes us to bad performance so bad performance um",
    "start": "2119040",
    "end": "2124880"
  },
  {
    "text": "when we troubleshoot the problem with bad performance we're looking at why is it taking so long and what are we",
    "start": "2124880",
    "end": "2131440"
  },
  {
    "text": "doing these are really the only two questions we we should concern ourselves with when it comes to",
    "start": "2131440",
    "end": "2137839"
  },
  {
    "text": "to bad performance problems so let's go ahead and",
    "start": "2137839",
    "end": "2142880"
  },
  {
    "text": "and have a look at how we can troubleshoot something like this so in this case i have a website running",
    "start": "2142880",
    "end": "2148880"
  },
  {
    "text": "in azure um and",
    "start": "2148880",
    "end": "2153920"
  },
  {
    "text": "it's showing like high cpu usage from time to time very bad response times",
    "start": "2153920",
    "end": "2159359"
  },
  {
    "text": "what not and what i can do in here i can go in and click on this",
    "start": "2159359",
    "end": "2165680"
  },
  {
    "text": "which is available on all most services in in.net actually or sorry in usher",
    "start": "2165680",
    "end": "2171920"
  },
  {
    "text": "and which is diagnose and solve the problem and this has a number of different things it allows you to do",
    "start": "2171920",
    "end": "2177839"
  },
  {
    "text": "tracing or or logging or a lot of things including",
    "start": "2177839",
    "end": "2184320"
  },
  {
    "text": "these diagnostic tools that allow you to pick",
    "start": "2184320",
    "end": "2190720"
  },
  {
    "text": "memory dumps so this is a way that you can create or",
    "start": "2190720",
    "end": "2196240"
  },
  {
    "text": "collect memory dumps in in azure the back end of this tool or",
    "start": "2196240",
    "end": "2201680"
  },
  {
    "text": "what's what's behind this tool is something called debug diag so debug diag is a tool that you can also",
    "start": "2201680",
    "end": "2207520"
  },
  {
    "text": "run locally on your machine and you can equally use that to to collect for",
    "start": "2207520",
    "end": "2212560"
  },
  {
    "text": "example memory dumps when one cpu is very high or when something is crashing or under",
    "start": "2212560",
    "end": "2218960"
  },
  {
    "text": "various different conditions and then it's also an analysis tool so this is something we created in in support",
    "start": "2218960",
    "end": "2226160"
  },
  {
    "text": "where we got very tired of troubleshooting the same kind of problems over and over and over and over",
    "start": "2226160",
    "end": "2231359"
  },
  {
    "text": "again so we created these scripts that would sort of like check through the most common things",
    "start": "2231359",
    "end": "2237040"
  },
  {
    "text": "and then generate a report for you telling you what um what the problem",
    "start": "2237040",
    "end": "2243920"
  },
  {
    "text": "probably was so if you go in to collect and analyze data this is what's running in the",
    "start": "2243920",
    "end": "2249359"
  },
  {
    "text": "background so i have a memory dump from this",
    "start": "2249359",
    "end": "2255040"
  },
  {
    "text": "that i took before and i'll open it up and start the analysis",
    "start": "2255040",
    "end": "2261440"
  },
  {
    "text": "so now it's going through if i were to run for example the memory analysis it would then go through and",
    "start": "2261440",
    "end": "2266560"
  },
  {
    "text": "run dumpheep stat gc root like all of these things and it will tell me",
    "start": "2266560",
    "end": "2272320"
  },
  {
    "text": "you know you're like categorize the objects by color by type a little bit and",
    "start": "2272320",
    "end": "2278800"
  },
  {
    "text": "give you some heuristics about what it what it thinks and then it would uh",
    "start": "2278800",
    "end": "2285200"
  },
  {
    "text": "show you one of these reports and the analysis summary now",
    "start": "2285200",
    "end": "2290480"
  },
  {
    "text": "the the fact that this is running like mhtml and it's like more ie like kind of tells you",
    "start": "2290480",
    "end": "2296240"
  },
  {
    "text": "how old this is but it's still something that's very functional like even",
    "start": "2296240",
    "end": "2301839"
  },
  {
    "text": "last month i could run this and actually come up with what what what was what the problem was in in",
    "start": "2301839",
    "end": "2308480"
  },
  {
    "text": "one of the trouble one of the things we were troubleshooting so this here tells us for example that",
    "start": "2308480",
    "end": "2316079"
  },
  {
    "text": "we we are running the garbage collector when the when the memory dump is taken",
    "start": "2316079",
    "end": "2321839"
  },
  {
    "text": "it also gives you some links and these are links to my blog for the different labs and different",
    "start": "2321839",
    "end": "2328480"
  },
  {
    "text": "troubleshooting examples and um it also tells us in here that",
    "start": "2328480",
    "end": "2336400"
  },
  {
    "text": "um it's working on um it's working on",
    "start": "2336400",
    "end": "2342720"
  },
  {
    "text": "concatenating strings but let's go ahead and",
    "start": "2342720",
    "end": "2348400"
  },
  {
    "text": "let's just click on the link and see the stack so this would be the equivalent of running clr stack",
    "start": "2348560",
    "end": "2355839"
  },
  {
    "text": "so we can see here that our products controller is calling concat",
    "start": "2355839",
    "end": "2362000"
  },
  {
    "text": "and this is a very well known very bad pattern in.net so what this is doing is",
    "start": "2362000",
    "end": "2370560"
  },
  {
    "text": "for bring up let's bring up notepad",
    "start": "2370560",
    "end": "2375520"
  },
  {
    "text": "so if you imagine you have a string hello and then you wanted to run you wanted to",
    "start": "2379599",
    "end": "2384880"
  },
  {
    "text": "only add you wanted to add world but you added one character at a time",
    "start": "2384880",
    "end": "2390320"
  },
  {
    "text": "then the first string that you would create would look like this and then when you added on the o you would have",
    "start": "2390320",
    "end": "2397440"
  },
  {
    "text": "to create a new string because of how the objects are sort of like stacked one after another",
    "start": "2397440",
    "end": "2403920"
  },
  {
    "text": "strings are immutable so they can't grow and this this causes you to then allocate a lot more now what's happening",
    "start": "2403920",
    "end": "2411520"
  },
  {
    "text": "here is that we see a lot of cpu and garbage collection because",
    "start": "2411520",
    "end": "2417680"
  },
  {
    "text": "if we go to the products controller in here and we look at the index",
    "start": "2417680",
    "end": "2424480"
  },
  {
    "text": "we'll see that what it's actually doing is it's bringing down all the products",
    "start": "2424480",
    "end": "2429760"
  },
  {
    "text": "and then it creates like this html table of all the products and this gets",
    "start": "2429760",
    "end": "2435520"
  },
  {
    "text": "very big like so where are you tacking on one row at a time but we're now creating",
    "start": "2435520",
    "end": "2441280"
  },
  {
    "text": "something like you know a thousand strings that end up being over 85 000 bytes so",
    "start": "2441280",
    "end": "2449200"
  },
  {
    "text": "what are we doing we're exhausting the large object heap and we're starting to generate a lot a",
    "start": "2449200",
    "end": "2455599"
  },
  {
    "text": "lot a lot of generation two collections and this will cause very high cpu usage",
    "start": "2455599",
    "end": "2462319"
  },
  {
    "text": "so this is um a pattern that you should avoid if",
    "start": "2462319",
    "end": "2467359"
  },
  {
    "text": "you're creating very large strings it doesn't really matter if you're just doing sort of like",
    "start": "2467359",
    "end": "2472400"
  },
  {
    "text": "small strings and you're concatenating three three strings then by all means use use like the plus signs and",
    "start": "2472400",
    "end": "2479040"
  },
  {
    "text": "concatenate them together but if you're doing something like this where you're maybe generating a json or you're",
    "start": "2479040",
    "end": "2484720"
  },
  {
    "text": "generating some kind of output then use a string builder instead because the string builder",
    "start": "2484720",
    "end": "2490880"
  },
  {
    "text": "can will allocate an array pre-allocate an array and then once that array is full it will create",
    "start": "2490880",
    "end": "2498480"
  },
  {
    "text": "an array of double the size so while in",
    "start": "2498480",
    "end": "2503680"
  },
  {
    "text": "in some cases it will create a lot bigger array than it needs it will definitely not create a lot of",
    "start": "2503680",
    "end": "2510000"
  },
  {
    "text": "different arrays because it will grow sort of by double all the time and it will maybe something like this would be",
    "start": "2510000",
    "end": "2516720"
  },
  {
    "text": "generating i don't know maybe five allocations versus the 10 000 allocations that the",
    "start": "2516720",
    "end": "2524000"
  },
  {
    "text": "concatenation generates",
    "start": "2524000",
    "end": "2527599"
  },
  {
    "text": "okay so that is troubleshooting um a high cpu usage",
    "start": "2529760",
    "end": "2537200"
  },
  {
    "text": "problem um let's go ahead and look at another problem which is",
    "start": "2537200",
    "end": "2544079"
  },
  {
    "text": "a low cpu usage problem so in high cpu usage problem the process is actually doing something and",
    "start": "2544079",
    "end": "2550800"
  },
  {
    "text": "it's constantly showing so when you have a high cpus problem it's normally the gc",
    "start": "2550800",
    "end": "2557520"
  },
  {
    "text": "a runaway loop or regular expressions like those are usually the",
    "start": "2557520",
    "end": "2563520"
  },
  {
    "text": "things that will generate like you know these hundred percent cpu type situations with low cpu problems",
    "start": "2563520",
    "end": "2570240"
  },
  {
    "text": "instead what you have is a process that's actually waiting for something else",
    "start": "2570240",
    "end": "2575680"
  },
  {
    "text": "maybe it's waiting for a database maybe it's waiting for an api just some other process but",
    "start": "2575680",
    "end": "2582400"
  },
  {
    "text": "this process is actually not working much it's just you know using up threads",
    "start": "2582400",
    "end": "2588640"
  },
  {
    "text": "so again i captured a memory dump from from process and in this case i'm going",
    "start": "2588640",
    "end": "2594960"
  },
  {
    "text": "to use another tool that most of you know visual studio to debug this memory dump",
    "start": "2594960",
    "end": "2601760"
  },
  {
    "text": "so i'm going to open up the memory dump um in here so",
    "start": "2601760",
    "end": "2608400"
  },
  {
    "text": "let's see",
    "start": "2608400",
    "end": "2610880"
  },
  {
    "text": "and what we have here is we have an a little bit of information about the memory dump like again it's using.net",
    "start": "2617520",
    "end": "2624560"
  },
  {
    "text": "six it's running on windows 11 this is windows 10 but it's actually windows 11.",
    "start": "2624560",
    "end": "2629920"
  },
  {
    "text": "um and you can choose to either debug with managed native or mixed",
    "start": "2629920",
    "end": "2636240"
  },
  {
    "text": "in this case we're going to use debug with managed which is only the net part we don't care",
    "start": "2636240",
    "end": "2643040"
  },
  {
    "text": "about like the the native parts on the stacks and you end up in in this situation",
    "start": "2643040",
    "end": "2648319"
  },
  {
    "text": "because we don't this is a server so this will show the active thread which",
    "start": "2648319",
    "end": "2653520"
  },
  {
    "text": "is usually um thread zero when you when you capture a dump unless you're in a crash",
    "start": "2653520",
    "end": "2659839"
  },
  {
    "text": "or something in which case it will show you the active thread but we have a lot of other",
    "start": "2659839",
    "end": "2665440"
  },
  {
    "text": "threads that are executing requests because this is a web server so what we're going to do is we can go in and",
    "start": "2665440",
    "end": "2670560"
  },
  {
    "text": "use parallel stacks and parallel stacks is not something that's only used with memory dumps it's",
    "start": "2670560",
    "end": "2677760"
  },
  {
    "text": "something that you can very much also use in visual studio when you debug things to see what the other threads are",
    "start": "2677760",
    "end": "2683920"
  },
  {
    "text": "working on the ones that that you're not necessarily debugging right now and it has this neat feature",
    "start": "2683920",
    "end": "2691520"
  },
  {
    "text": "of taking all the threads and kind of like extracting the common parts of what the",
    "start": "2691520",
    "end": "2697280"
  },
  {
    "text": "threads are working on so what we're seeing here is that we have our main which was on on the first",
    "start": "2697280",
    "end": "2704560"
  },
  {
    "text": "thread but we then have a number of of threads 11 of them",
    "start": "2704560",
    "end": "2710240"
  },
  {
    "text": "all sitting in this products controller feature function and going into some",
    "start": "2710240",
    "end": "2716800"
  },
  {
    "text": "data layer um and calling some function there and then out of these ten",
    "start": "2716800",
    "end": "2724000"
  },
  {
    "text": "nine actually one of them is waiting for a thread to to be free so we have 11",
    "start": "2724000",
    "end": "2729760"
  },
  {
    "text": "requests but one of them need like we only have to we can only have 10 concurrent with the settings so it's waiting for",
    "start": "2729760",
    "end": "2736880"
  },
  {
    "text": "for the others to be released but out of these threads that we're actually working uh one of nine of them are",
    "start": "2736880",
    "end": "2743200"
  },
  {
    "text": "waiting on a lock and one of them are in is in a lock and because i've grabbed this on the",
    "start": "2743200",
    "end": "2750079"
  },
  {
    "text": "same machine where i was or where i have the code or you also this also works if you have",
    "start": "2750079",
    "end": "2755839"
  },
  {
    "text": "symbols and you have the code lined up exactly is the code that's running on the on the",
    "start": "2755839",
    "end": "2761200"
  },
  {
    "text": "server you can go in and click and it will take you i'm sorry",
    "start": "2761200",
    "end": "2767520"
  },
  {
    "text": "it then activates what thread you're on and",
    "start": "2767520",
    "end": "2772720"
  },
  {
    "text": "let's see i'll do this one more time",
    "start": "2772720",
    "end": "2777040"
  },
  {
    "text": "here and it pulls you exactly where where this particular thread is sitting",
    "start": "2778400",
    "end": "2785920"
  },
  {
    "text": "so in this case we we can go in and we can see that the actual issue and what these threats are working on is actually",
    "start": "2785920",
    "end": "2793040"
  },
  {
    "text": "you know sitting in in this case in a sleep simulating a long-running request",
    "start": "2793040",
    "end": "2798160"
  },
  {
    "text": "while holding a lock and that's why the other the other threats are",
    "start": "2798160",
    "end": "2803200"
  },
  {
    "text": "are waiting so i find this very useful if you have the",
    "start": "2803200",
    "end": "2808400"
  },
  {
    "text": "code and everything and even if you don't have the code just looking at the parallel stacks is quite nice view",
    "start": "2808400",
    "end": "2813520"
  },
  {
    "text": "especially if you're not super into debugging with windows g this is at",
    "start": "2813520",
    "end": "2818800"
  },
  {
    "text": "least you know looking at it from a familiar place where you're normally at",
    "start": "2818800",
    "end": "2824720"
  },
  {
    "text": "okay so that was reviewing a low cpu issue and all of the dumps that",
    "start": "2824720",
    "end": "2830880"
  },
  {
    "text": "we've taken so far you could have also done this same thing with",
    "start": "2830880",
    "end": "2836799"
  },
  {
    "text": "so we used debug diag in the background which is azure diagnostics but you can download and use the debug diag",
    "start": "2838480",
    "end": "2845920"
  },
  {
    "text": "um locally and visual studio from memory dump debugging so the last thing we're",
    "start": "2845920",
    "end": "2851760"
  },
  {
    "text": "going to have a look at super super quick is crashes and exceptions",
    "start": "2851760",
    "end": "2857119"
  },
  {
    "text": "so if we have a process that crashed the only thing we're really concerned with is what the",
    "start": "2857119",
    "end": "2863040"
  },
  {
    "text": "heck just happened like so what would cause the crash and i'm going to use",
    "start": "2863040",
    "end": "2868880"
  },
  {
    "text": "the same use visual studio in this case also to debug it now one thing i do want to",
    "start": "2868880",
    "end": "2874480"
  },
  {
    "text": "mention when you capture a dump of a memory leak or if a process or of a performance issue you can just go in and",
    "start": "2874480",
    "end": "2881119"
  },
  {
    "text": "the task manager you can run gc dump and all of these things because you take a snapshot of the process right now when",
    "start": "2881119",
    "end": "2887599"
  },
  {
    "text": "it's happening for something like a crash it's not possible to catch it in the act",
    "start": "2887599",
    "end": "2894800"
  },
  {
    "text": "like you would have to be super super fast and very very accurate with your timing to catch it in the act so instead",
    "start": "2894800",
    "end": "2901599"
  },
  {
    "text": "we have to run something like debug diag and set it up so that it will catch a memory dump when it crashes",
    "start": "2901599",
    "end": "2908640"
  },
  {
    "text": "or proc dump from system internal instances internals is also or windows error reporting so",
    "start": "2908640",
    "end": "2914960"
  },
  {
    "text": "windows error reporting you can set up also to to capture dumps of any process that crashes and it will it will then",
    "start": "2914960",
    "end": "2922480"
  },
  {
    "text": "collect the dumps from you for you that you can troubleshoot like this so let's have a look at",
    "start": "2922480",
    "end": "2929280"
  },
  {
    "text": "how that looks and i'm going to stop this",
    "start": "2929280",
    "end": "2935920"
  },
  {
    "text": "and",
    "start": "2938720",
    "end": "2941720"
  },
  {
    "text": "and i'm going to do the same thing debug with managed i'll go ahead and kill these parallel",
    "start": "2946960",
    "end": "2952240"
  },
  {
    "text": "stacks because now because it was a crash dump it took me to the very place where it was crashing so this was a null",
    "start": "2952240",
    "end": "2959359"
  },
  {
    "text": "reference exception um because this is a native dump it shows it as an access violation but you",
    "start": "2959359",
    "end": "2965760"
  },
  {
    "text": "can see here that just like as if you were debugging something live you can see the code you can see things like",
    "start": "2965760",
    "end": "2974800"
  },
  {
    "text": "the objects and their values so you can hover over them the only thing you can't do is you",
    "start": "2974880",
    "end": "2981200"
  },
  {
    "text": "can't move forward because this is still a snapshot so you can't like it's not a live debugging session you can't uh",
    "start": "2981200",
    "end": "2988640"
  },
  {
    "text": "you can't kind of carry on from here but but at least it gives you a very good tool and a very",
    "start": "2988640",
    "end": "2993920"
  },
  {
    "text": "in my book at least a comfortable tool to work with for troubleshooting these things",
    "start": "2993920",
    "end": "2999839"
  },
  {
    "text": "and again the reason why you would use a dump here is because maybe it doesn't happen when you try to",
    "start": "3000000",
    "end": "3006160"
  },
  {
    "text": "step by step debug or maybe it happens on someone else's machine",
    "start": "3006160",
    "end": "3011720"
  },
  {
    "text": "and that kind of concludes um this but",
    "start": "3012400",
    "end": "3017440"
  },
  {
    "text": "i hope you got enough out of this um in terms of tools and techniques to go and",
    "start": "3017440",
    "end": "3022559"
  },
  {
    "text": "troubleshoot them on your own but less i said if you're looking to try them out before you have your own problem or if you're",
    "start": "3022559",
    "end": "3028880"
  },
  {
    "text": "looking to sort of get references on on how to do these these labs are",
    "start": "3028880",
    "end": "3034960"
  },
  {
    "text": "are pretty okay for that i think so thank you so much and i hope you have a great",
    "start": "3034960",
    "end": "3041280"
  },
  {
    "text": "day moving on",
    "start": "3041280",
    "end": "3044760"
  }
]