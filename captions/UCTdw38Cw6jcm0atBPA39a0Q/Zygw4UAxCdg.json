[
  {
    "start": "0",
    "end": "377000"
  },
  {
    "text": "hi and welcome to clean architecture with ASP net core 22 my name is Jason",
    "start": "10360",
    "end": "15519"
  },
  {
    "text": "Taylor I'm a solution architect for ssw you can find me on Twitter at Json",
    "start": "15519",
    "end": "22000"
  },
  {
    "text": "GTA or on my blog codin flow. net I try to blog once a week that's my goal I",
    "start": "22000",
    "end": "28439"
  },
  {
    "text": "last blogged in September of 18 but I'm trying I've been developing now for 18",
    "start": "28439",
    "end": "34879"
  },
  {
    "text": "years and I've learned the most important principle is kiss or keep it simple stupid and this principle states",
    "start": "34879",
    "end": "41800"
  },
  {
    "text": "that system should be made simple rather than more complex today I'd like to show you the",
    "start": "41800",
    "end": "47760"
  },
  {
    "text": "simplest approach to developing Enterprise architecture with clean architecture let's get",
    "start": "47760",
    "end": "54680"
  },
  {
    "text": "started so with clean architecture the domain and the application layer are at",
    "start": "54680",
    "end": "60280"
  },
  {
    "text": "the center of the design the domain contains uh Enterprise logic and types",
    "start": "60280",
    "end": "66040"
  },
  {
    "text": "and the application layer contains business logic and types what's the difference well Enterprise logic would",
    "start": "66040",
    "end": "71960"
  },
  {
    "text": "be used throughout multiple systems whereas the business logic would typically just be used by this system",
    "start": "71960",
    "end": "78400"
  },
  {
    "text": "together the domain and the application layers make up the core now rather than have core depend on",
    "start": "78400",
    "end": "86079"
  },
  {
    "text": "concerns such as data access and persistence we invert those concerns concs so infrastructure persistence and",
    "start": "86079",
    "end": "93119"
  },
  {
    "text": "presentation all depend on core now we achiev this by adding",
    "start": "93119",
    "end": "99040"
  },
  {
    "text": "interfaces or abstractions to core which are implemented in layers outside of",
    "start": "99040",
    "end": "104119"
  },
  {
    "text": "core so for example if we wanted to implement the repository pattern we would add an i repository interface",
    "start": "104119",
    "end": "110360"
  },
  {
    "text": "inside core in the application layer and that would be implemented within persistence now with with clean",
    "start": "110360",
    "end": "118039"
  },
  {
    "text": "architecture all dependencies point inwards presentation infrastructure and persistence all depend on core but not",
    "start": "118039",
    "end": "125320"
  },
  {
    "text": "on one another that's very important this results in an architecture and design that is",
    "start": "125320",
    "end": "132080"
  },
  {
    "text": "independent of Frameworks it doesn't require the existence of some Library it's highly testable we can test all of",
    "start": "132080",
    "end": "139360"
  },
  {
    "text": "core without the need for a database a web server or a UI we can unit test it",
    "start": "139360",
    "end": "144599"
  },
  {
    "text": "all it's independent of the UI that's a great place to be right now we're building a lot of web applications maybe",
    "start": "144599",
    "end": "151319"
  },
  {
    "text": "with angular react and View and they change very frequently so we want that Independence pretty soon we're all going",
    "start": "151319",
    "end": "157360"
  },
  {
    "text": "to be writing Blazer apps anyway because we don't like JavaScript you like JavaScript not me I don't like",
    "start": "157360",
    "end": "162640"
  },
  {
    "text": "JavaScript I know this guy and this guy doesn't like JavaScript it's also independent of the",
    "start": "162640",
    "end": "168000"
  },
  {
    "text": "database so we use SQL Server we use postest we use Oracle but eventually",
    "start": "168000",
    "end": "173480"
  },
  {
    "text": "we're going to be switching to Cosmos DB because it does everything and it's independent of anything else external in",
    "start": "173480",
    "end": "179560"
  },
  {
    "text": "fact core doesn't know anything about the outside world that's what makes clean architecture great it's the design",
    "start": "179560",
    "end": "186400"
  },
  {
    "text": "that will be there in 15 to 20 years time even though everything in the outside world has",
    "start": "186400",
    "end": "192400"
  },
  {
    "text": "changed now you can see that in this particular design there's only three layers but you can change that you might",
    "start": "192400",
    "end": "198680"
  },
  {
    "text": "have a simpler requirement and you could use two layers or you can use more you just need to remember that those",
    "start": "198680",
    "end": "204920"
  },
  {
    "text": "dependencies always Point inwards let's have a look at an example so my example",
    "start": "204920",
    "end": "210400"
  },
  {
    "text": "is Northwind Traders so show of hands who's heard of Northwind Traders okay 50 no 75% of the room and I",
    "start": "210400",
    "end": "218439"
  },
  {
    "text": "know what you're thinking Northwind Traders is not cool but you're wrong I've upgraded it it's now crossplatform",
    "start": "218439",
    "end": "224400"
  },
  {
    "text": "so it doesn't matter if you're running Windows Mac or Linux you can run Northwind Traders it's running on",
    "start": "224400",
    "end": "231120"
  },
  {
    "text": "netcore 22 it's running with enti framework 22 it's code first and it's",
    "start": "231120",
    "end": "236599"
  },
  {
    "text": "fully seated sound cool yeah Northwind Traders is cool again",
    "start": "236599",
    "end": "242400"
  },
  {
    "text": "let's have a look at a demo so this solutions on G um on GitHub",
    "start": "242400",
    "end": "249400"
  },
  {
    "text": "and I have a link to the code and slides at the end but let's have a look at the",
    "start": "249400",
    "end": "255879"
  },
  {
    "text": "makeup slide deck oh thank",
    "start": "256600",
    "end": "262040"
  },
  {
    "text": "you there we go",
    "start": "266000",
    "end": "270360"
  },
  {
    "text": "okay so you can see the solutions built uh split up into a number of folders uh but here in the source folder we have",
    "start": "272400",
    "end": "280199"
  },
  {
    "text": "our core which contains the domain and application layer we'll shrink that we",
    "start": "280199",
    "end": "286560"
  },
  {
    "text": "have infrastructure which contains a standard infrastructure project and a persistence project and we have a",
    "start": "286560",
    "end": "293800"
  },
  {
    "text": "presentation project which is a web UI that's currently a single page application built on angular with net",
    "start": "293800",
    "end": "300199"
  },
  {
    "text": "core in common we just Implement our cross cutting concerns you'll also note",
    "start": "300199",
    "end": "305240"
  },
  {
    "text": "in the solution that I've added readmes in different projects so you can learn",
    "start": "305240",
    "end": "310320"
  },
  {
    "text": "uh exactly what goes into each layer and the slide decks right",
    "start": "310320",
    "end": "315960"
  },
  {
    "text": "there",
    "start": "320360",
    "end": "323360"
  },
  {
    "text": "okay oh skip through that so key points domain contains the",
    "start": "326400",
    "end": "332680"
  },
  {
    "text": "enterprise-wide logic and types that's the logic that can be used across multiple applications it's not typically",
    "start": "332680",
    "end": "338360"
  },
  {
    "text": "shared the application contains business logic and types that's the logic that's specific to the application that we're",
    "start": "338360",
    "end": "344680"
  },
  {
    "text": "building infrastructure including persistence contains all external concerns and presentation and",
    "start": "344680",
    "end": "351039"
  },
  {
    "text": "infrastructure layers depend only on application and not on each other that's a really important point if we did have",
    "start": "351039",
    "end": "357639"
  },
  {
    "text": "presentation dependent on infrastructure say to send some notifications or something like that that forces us to",
    "start": "357639",
    "end": "364160"
  },
  {
    "text": "add logic to presentation we really want that logic to be in core where we can test it independent of anything",
    "start": "364160",
    "end": "371520"
  },
  {
    "text": "external finally infrastructure and presentation components can be replaced with minimal effort so now we're going",
    "start": "371520",
    "end": "378199"
  },
  {
    "start": "377000",
    "end": "702000"
  },
  {
    "text": "to look at each layer in turn starting with the domain layer in the domain what would we expect to see so we'll see",
    "start": "378199",
    "end": "385080"
  },
  {
    "text": "entities value objects enumerations logic and exceptions custom",
    "start": "385080",
    "end": "391919"
  },
  {
    "text": "exceptions let's have a look in the domain oh I have to there we",
    "start": "391919",
    "end": "401160"
  },
  {
    "text": "go okay so I want to look at a few different things in turn we'll start with this customer entity that I have if",
    "start": "402280",
    "end": "411280"
  },
  {
    "text": "we look at this customer entity you can see that we're using data annotations throughout and my recommendation is to",
    "start": "411280",
    "end": "418319"
  },
  {
    "text": "use data annotations sparingly you don't really want to include these in your domain model because it's not part of",
    "start": "418319",
    "end": "423919"
  },
  {
    "text": "the domain it's really a persistence concern it's telling the OM how to map these entities to the relational model",
    "start": "423919",
    "end": "430879"
  },
  {
    "text": "so we try to keep those out next I want to talk about value",
    "start": "430879",
    "end": "436479"
  },
  {
    "text": "objects so with value objects we basically create a simple entity that",
    "start": "436479",
    "end": "442199"
  },
  {
    "text": "doesn't have an identity a value object is equal to another value object if it has the same",
    "start": "442199",
    "end": "447680"
  },
  {
    "text": "value so with something like an ad account we could easily encapsulate that as a primitive type as a string but an",
    "start": "447680",
    "end": "454960"
  },
  {
    "text": "ad account is not a string it's a complex object with specialized rules in",
    "start": "454960",
    "end": "460280"
  },
  {
    "text": "the way that it's used and when we use it we typically need different information from it sometimes we'd like to see the domain sometimes we'd like to",
    "start": "460280",
    "end": "467159"
  },
  {
    "text": "see the username sometimes we'd like to format it for display so by including it as a string we don't have a good place",
    "start": "467159",
    "end": "474240"
  },
  {
    "text": "at least to encapsulate that logic if we create a value object we can encapsulate that logic and that makes it easy for",
    "start": "474240",
    "end": "481039"
  },
  {
    "text": "developers to see how to use that so let's have a look in the value object",
    "start": "481039",
    "end": "486759"
  },
  {
    "text": "I'm able to construct an ad account by passing in an account string I can split",
    "start": "486759",
    "end": "491879"
  },
  {
    "text": "it up into the domain and the name and if something goes wrong I can immediately throw an ad account in valid",
    "start": "491879",
    "end": "498639"
  },
  {
    "text": "exception I can access the domain and name quite easily and I have a number of",
    "start": "498639",
    "end": "503919"
  },
  {
    "text": "operators for working with the ad account object which makes it quite simple I have some tests a really good",
    "start": "503919",
    "end": "510520"
  },
  {
    "text": "demonstration of how to work with it so you can see this test is quite simple it just says it should have a valid domain",
    "start": "510520",
    "end": "517039"
  },
  {
    "text": "and name given a valid account string this one two string Returns the correct format so we're expecting it to be SS",
    "start": "517039",
    "end": "524000"
  },
  {
    "text": "sw/ Json simple the implicit conversion to string results in correct string so",
    "start": "524000",
    "end": "531160"
  },
  {
    "text": "we can take a string and we can say an ad account for that value returns an ad",
    "start": "531160",
    "end": "536959"
  },
  {
    "text": "account which is fine but then we can implicitly convert this ad account value object",
    "start": "536959",
    "end": "542920"
  },
  {
    "text": "back to a string just using the equals operator so that just makes it easy to work with ad account if we do want to",
    "start": "542920",
    "end": "548040"
  },
  {
    "text": "display it then we can explicitly convert from a string to the domain and",
    "start": "548040",
    "end": "553279"
  },
  {
    "text": "name so you can see we take a string and just cast it directly to the ad object very simple ad account and we have our",
    "start": "553279",
    "end": "561120"
  },
  {
    "text": "custom exception there so when you're using primitive types think about the type of",
    "start": "561120",
    "end": "567560"
  },
  {
    "text": "information you're storing is it really A Primitive type is it really a string is it really an integer or is it a",
    "start": "567560",
    "end": "573519"
  },
  {
    "text": "little bit more complex than that are there some rules that you need to associate with that information that",
    "start": "573519",
    "end": "578680"
  },
  {
    "text": "will make it easier for developers to work with your system because by doing that you force them into the pit pit of",
    "start": "578680",
    "end": "585519"
  },
  {
    "text": "success you make it easier for them to do the right thing and hard to do the wrong",
    "start": "585519",
    "end": "590800"
  },
  {
    "text": "thing another recommendation I have for the domain is to initialize all collections so if we have a look at this",
    "start": "590800",
    "end": "598120"
  },
  {
    "text": "order class here you can see that right at the start I'm initializing the order",
    "start": "598120",
    "end": "603279"
  },
  {
    "text": "details with a default value and down the bottom I've actually got a private Setter on that so you're not going to be",
    "start": "603279",
    "end": "609480"
  },
  {
    "text": "able to reinitialize it later so what does that mean it means it's always ready to use we're not going to have",
    "start": "609480",
    "end": "614800"
  },
  {
    "text": "code in the system that says if order. order details equals null then",
    "start": "614800",
    "end": "620240"
  },
  {
    "text": "initialize that's that's really common we see it all the time especially from new developers now what's going to",
    "start": "620240",
    "end": "625920"
  },
  {
    "text": "happen is it's always going to be ready it doesn't matter if you've nuded up yourself or if it's come back from Entity framework it'll be ready to go",
    "start": "625920",
    "end": "632240"
  },
  {
    "text": "and if a new developer joins the team and they try to initialize it they're just going to get an error um and",
    "start": "632240",
    "end": "637760"
  },
  {
    "text": "they're going to see that oh this is the way that we're doing things and that's pretty cool that's that's helping them",
    "start": "637760",
    "end": "643399"
  },
  {
    "text": "into the pit of success so finally and we looked at this briefly within ad account I have a",
    "start": "643399",
    "end": "650160"
  },
  {
    "text": "custom exception and it's good to use custom exceptions um in the domain when",
    "start": "650160",
    "end": "655720"
  },
  {
    "text": "necessary because just think about it if we have a problem constructing an ad account we're going",
    "start": "655720",
    "end": "661839"
  },
  {
    "text": "to throw an ad account invalid exception that's easy to debug that's easy to handle it's easy to understand what's",
    "start": "661839",
    "end": "668200"
  },
  {
    "text": "not easy to understand is an index out of range exception that's not as clear to us as what's actually",
    "start": "668200",
    "end": "674560"
  },
  {
    "text": "happened all right back to the",
    "start": "674560",
    "end": "681279"
  },
  {
    "text": "slides okay so key points avoid using data annotations use value object where",
    "start": "683600",
    "end": "689680"
  },
  {
    "text": "appropriate just think is it really A Primitive type or is it a more specialized object initialize all",
    "start": "689680",
    "end": "695000"
  },
  {
    "text": "collections and use private Setters create custom domain exceptions because they're going to be a lot easier to",
    "start": "695000",
    "end": "701720"
  },
  {
    "text": "debug now we're going to have a look at the application layer this is my favorite section of the talk in the",
    "start": "701720",
    "end": "707880"
  },
  {
    "start": "702000",
    "end": "733000"
  },
  {
    "text": "application layer we're going to see interfaces those interfaces and abstractions for what we will Implement",
    "start": "707880",
    "end": "714279"
  },
  {
    "text": "in the external layers we'll see models view models and dto we'll see logic this",
    "start": "714279",
    "end": "719399"
  },
  {
    "text": "will be our business Logic the special cases that we're handling in this application we'll see commands and",
    "start": "719399",
    "end": "724440"
  },
  {
    "text": "queries we'll talk about that soon and we'll see valid datas and of course application exceptions custom exceptions",
    "start": "724440",
    "end": "731160"
  },
  {
    "text": "that we create for this application layer so cqrs so everyone knows that",
    "start": "731160",
    "end": "736320"
  },
  {
    "start": "733000",
    "end": "773000"
  },
  {
    "text": "cqrs stands for command query responsibility segregation and with cqrs we separate",
    "start": "736320",
    "end": "743279"
  },
  {
    "text": "our reads from our right and the benefits include maximizing performance and scalability however that's not the",
    "start": "743279",
    "end": "749920"
  },
  {
    "text": "most important thing to me for me cqrs is about Simplicity when I use it my",
    "start": "749920",
    "end": "755240"
  },
  {
    "text": "system becomes easier to understand and it's easy to add new features because we can just create a command or query and",
    "start": "755240",
    "end": "762040"
  },
  {
    "text": "it's easy to maintain our changes are only typically going to affect a single command or query and hopefully we're not",
    "start": "762040",
    "end": "768560"
  },
  {
    "text": "going to introduce side effects or bugs as a result of changing a single command or query if you like cqrs you will love",
    "start": "768560",
    "end": "776519"
  },
  {
    "start": "773000",
    "end": "844000"
  },
  {
    "text": "mediator they're like the perfect couple actually I first heard about mediator in",
    "start": "776519",
    "end": "782079"
  },
  {
    "text": "2017 a good friend of mine BR Brendan Richards who's here today actually said to me I found mediator and it's awesome",
    "start": "782079",
    "end": "790040"
  },
  {
    "text": "and we were in at that time we were injecting all of these commands and queries into controllers and uh we were",
    "start": "790040",
    "end": "796160"
  },
  {
    "text": "fine with that but then he said mediator is awesome we can actually replace all of that injection and just inject the IM",
    "start": "796160",
    "end": "802959"
  },
  {
    "text": "mediat interface and I looked at it and I said to him I don't like that that violates the explicit depend depencies",
    "start": "802959",
    "end": "809839"
  },
  {
    "text": "principle but then Steve Smith who was a really cool developer told me about it and I thought well he created the",
    "start": "809839",
    "end": "816160"
  },
  {
    "text": "explicit dependencies principle so I went with it so sorry Brandon I had my blinkers on that day so with mediator we",
    "start": "816160",
    "end": "824720"
  },
  {
    "text": "Define our commands and queries as requests the application layer then just",
    "start": "824720",
    "end": "830079"
  },
  {
    "text": "becomes a series of requests and response objects and with that we gain the ability to attach additional",
    "start": "830079",
    "end": "836600"
  },
  {
    "text": "Behavior especially around cross cutting con conerns so we can add logging",
    "start": "836600",
    "end": "841680"
  },
  {
    "text": "validation and cing with mediator let's have a look at the application",
    "start": "841680",
    "end": "848839"
  },
  {
    "start": "844000",
    "end": "1185000"
  },
  {
    "text": "layer all right so we'll start by looking at the customers folder just so we can see a",
    "start": "852120",
    "end": "858800"
  },
  {
    "text": "number of commands and queries I will zoom in let me get to the",
    "start": "858800",
    "end": "867720"
  },
  {
    "text": "place okay so you can see here we have a number of commands and a number of queries and it's really easy with this",
    "start": "867720",
    "end": "874600"
  },
  {
    "text": "structure to see what is inside each folder and and without diving in any",
    "start": "874600",
    "end": "880000"
  },
  {
    "text": "deeper you already know that's that's one of the great things about it how it's simplifying the overall design",
    "start": "880000",
    "end": "885759"
  },
  {
    "text": "let's take a look at the create customer command first so the create customer command",
    "start": "885759",
    "end": "892120"
  },
  {
    "text": "zoom out",
    "start": "892120",
    "end": "897320"
  },
  {
    "text": "is oops is a dto and it's a oftype mediator I",
    "start": "897320",
    "end": "903800"
  },
  {
    "text": "request and basically it contains everything that we need to create a",
    "start": "903800",
    "end": "909920"
  },
  {
    "text": "customer using the create customer command we also have a",
    "start": "909920",
    "end": "916079"
  },
  {
    "text": "Handler and this is of type mediator I request Handler so it's a request Handler for a create customer command",
    "start": "916079",
    "end": "923360"
  },
  {
    "text": "and returns a unit which is saying this command doesn't return anything if we look down we're just injecting the",
    "start": "923360",
    "end": "930000"
  },
  {
    "text": "things that we need so in this case it's the context the notification service and mediator and we use all of those things",
    "start": "930000",
    "end": "937120"
  },
  {
    "text": "to create the customer this is actually where we orchestrate the business case",
    "start": "937120",
    "end": "943040"
  },
  {
    "text": "what the business has defined needs to happen when we create a customer so you can see we're adding it to persistence",
    "start": "943040",
    "end": "949360"
  },
  {
    "text": "we're changing the saving the changes and we're publishing a new customer created event and later on or we can we",
    "start": "949360",
    "end": "955600"
  },
  {
    "text": "can actually have a look at that now so if we have a quick peek at this event we can see the customer created event just",
    "start": "955600",
    "end": "961680"
  },
  {
    "text": "sends a notification that the customer has been created so just to just to be clear each",
    "start": "961680",
    "end": "968519"
  },
  {
    "text": "command and query encapsulates a specific business case contains all of the logic that we need to orchestrate",
    "start": "968519",
    "end": "974160"
  },
  {
    "text": "that business case okay now I want to talk about data",
    "start": "974160",
    "end": "979279"
  },
  {
    "text": "annotations at the application layer so you saw them here in the create customer",
    "start": "979279",
    "end": "984319"
  },
  {
    "text": "command and why would we have them there we might use it for validation",
    "start": "984319",
    "end": "989480"
  },
  {
    "text": "um but I found that while data annotations is fine for validation we can do our model State checks um and",
    "start": "989480",
    "end": "995480"
  },
  {
    "text": "that's great it's a pretty nice experience it's not very good for complex validation what is good at",
    "start": "995480",
    "end": "1001040"
  },
  {
    "text": "complex validation is fluent validation so we can take out all of these data",
    "start": "1001040",
    "end": "1006839"
  },
  {
    "text": "annotations and just use fluent validation to achieve the same result and fluent validation why straight into",
    "start": "1006839",
    "end": "1013600"
  },
  {
    "text": "the asp.net core validation pipeline so we're still going to be check be able to check model state or if we're using",
    "start": "1013600",
    "end": "1019880"
  },
  {
    "text": "newer versions um such as aspet core 22 it can do it automatically for us so we",
    "start": "1019880",
    "end": "1026000"
  },
  {
    "text": "can remove those out that makes our dto nice and clean and then I'll show you the fluent validation",
    "start": "1026000",
    "end": "1032798"
  },
  {
    "text": "validator so we have a customer uh no it's a create",
    "start": "1032799",
    "end": "1039360"
  },
  {
    "text": "customer create customer validator there we go and so that's it so you can see",
    "start": "1039360",
    "end": "1045798"
  },
  {
    "text": "for the create customer command validator it's still a simple case but",
    "start": "1045799",
    "end": "1050840"
  },
  {
    "text": "let's have a look at one that's not a simple case so I have an update customer command",
    "start": "1050840",
    "end": "1058400"
  },
  {
    "text": "validator and this is where we actually have validation which is dependent on other fields so you can see here this is",
    "start": "1058480",
    "end": "1065880"
  },
  {
    "text": "a rule for the post code it must match four digits that's the format of post codes uh for Australia so basically if",
    "start": "1065880",
    "end": "1072880"
  },
  {
    "text": "it doesn't match four digits it'll return the message Australian postcodes have four digits then we have another",
    "start": "1072880",
    "end": "1078400"
  },
  {
    "text": "rule for the phone must have a Queensland landline when the country is Australia and the postcode starts with",
    "start": "1078400",
    "end": "1084679"
  },
  {
    "text": "four and you can see there we're calling a uh a little helper function there so that's what must have a Queensland",
    "start": "1084679",
    "end": "1090960"
  },
  {
    "text": "landline is so that's the good thing about fluent validation uh and why we don't need data annotations we can use",
    "start": "1090960",
    "end": "1097320"
  },
  {
    "text": "fluent validations for our simple validation scenarios we can use it for our complex validation scenarios and IT",
    "start": "1097320",
    "end": "1103280"
  },
  {
    "text": "wires right into the ASP net core pipeline",
    "start": "1103280",
    "end": "1108320"
  },
  {
    "text": "okay and we talked about uh the architecture being independent of infrastructure and data access concerns",
    "start": "1109679",
    "end": "1116360"
  },
  {
    "text": "and I just want to have a look here so if we were to add interfaces and",
    "start": "1116360",
    "end": "1121679"
  },
  {
    "text": "abstractions it goes right into the application layer and I've got a little interfaces folder",
    "start": "1121679",
    "end": "1127440"
  },
  {
    "text": "here so you can see here I just have one single notification service at the moment and this notification",
    "start": "1127440",
    "end": "1135000"
  },
  {
    "text": "service just has a single method and it also has a dto and you'll note that the",
    "start": "1135000",
    "end": "1140520"
  },
  {
    "text": "dto is also coming from the application layer so yes we have these external concerns and they come with their own",
    "start": "1140520",
    "end": "1146919"
  },
  {
    "text": "dto so a messaging service that we're using probably already has a messaging class that we can use but if we bring",
    "start": "1146919",
    "end": "1153039"
  },
  {
    "text": "that into the application layer then we're creating a dependency on that external concern so we actually have to",
    "start": "1153039",
    "end": "1158799"
  },
  {
    "text": "create the interfaces and any dto that we'll need to communicate with that service and later on if we need to",
    "start": "1158799",
    "end": "1164360"
  },
  {
    "text": "switch out that messaging service for something else if we're going from send grid to something else that's not going to be a problem we'll keep our interface",
    "start": "1164360",
    "end": "1171159"
  },
  {
    "text": "we'll keep our dto our unit tests won't change it'll just be that service that changes just the",
    "start": "1171159",
    "end": "1178320"
  },
  {
    "text": "implementation all right so key points using cqrs and mediator simplifies your",
    "start": "1183480",
    "end": "1189520"
  },
  {
    "start": "1185000",
    "end": "1487000"
  },
  {
    "text": "overall design I'm a big fan of cqrs and I really love using mediator fluent validation is useful for all validation",
    "start": "1189520",
    "end": "1196360"
  },
  {
    "text": "scenarios we don't need data annotation in our domain model we don't need it in the application layer mediator",
    "start": "1196360",
    "end": "1202440"
  },
  {
    "text": "simplifies cross cutting concerns I didn't show you that that is one of my favorite parts let's go",
    "start": "1202440",
    "end": "1209760"
  },
  {
    "text": "back one sec okay so we talk about cross cutting concerns so remember that in the",
    "start": "1211320",
    "end": "1218159"
  },
  {
    "text": "application layer because we're using mediator all requ all commands and queries are just requests with responses",
    "start": "1218159",
    "end": "1224799"
  },
  {
    "text": "so we essentially have a pipeline there similar to asp netcore mware and if you look at how we can use",
    "start": "1224799",
    "end": "1231880"
  },
  {
    "text": "that in infrastructure I have these three request",
    "start": "1231880",
    "end": "1237880"
  },
  {
    "text": "behaviors zoom in a little bit so I've got a request logger a",
    "start": "1237880",
    "end": "1244039"
  },
  {
    "text": "request performance behavior and request validation Behavior so one of the things that um we normally do in ASP net core",
    "start": "1244039",
    "end": "1252200"
  },
  {
    "text": "is to validate our models but the thing with clean architecture is we're not necessarily always going to have a web",
    "start": "1252200",
    "end": "1258640"
  },
  {
    "text": "front end maybe we have a console UI and we want to apply that same validation so while we could write it again it's",
    "start": "1258640",
    "end": "1264400"
  },
  {
    "text": "actually better just to use a mediator request validation behavior um because then we get it at the core level and for",
    "start": "1264400",
    "end": "1272240"
  },
  {
    "text": "any application that executes that command or query so let's have a look at how simple it",
    "start": "1272240",
    "end": "1278320"
  },
  {
    "text": "is so you can see here that I've got a request validation behavior and it uh is",
    "start": "1278320",
    "end": "1284200"
  },
  {
    "text": "a generic type with a t request and a t response and it comes from mediators I pipeline Behavior the same",
    "start": "1284200",
    "end": "1291559"
  },
  {
    "text": "types and you can see here uh the",
    "start": "1291559",
    "end": "1296679"
  },
  {
    "text": "implementation so how does this work so the T request would be something like a",
    "start": "1296679",
    "end": "1302200"
  },
  {
    "text": "create customer command or a get customer detail query and what we do is",
    "start": "1302200",
    "end": "1307440"
  },
  {
    "text": "we search the assembly to see if there are any validators associated with that",
    "start": "1307440",
    "end": "1312799"
  },
  {
    "text": "dto the command or query and we run them if there are any errors we throw a custom application exception which",
    "start": "1312799",
    "end": "1319880"
  },
  {
    "text": "contains the errors and we'll go a little bit deeper and all the custom application",
    "start": "1319880",
    "end": "1326120"
  },
  {
    "text": "exception does is put all of the failures into a dictionary um a a string",
    "start": "1326120",
    "end": "1331760"
  },
  {
    "text": "representing the field that has failed and a string array representing the messages because there might be multiple",
    "start": "1331760",
    "end": "1338320"
  },
  {
    "text": "failures so there could be one or more messages for that particular failure and with that whoops with that",
    "start": "1338320",
    "end": "1344919"
  },
  {
    "text": "if we have a look at uh the presentation layer just quickly I'll show you how",
    "start": "1344919",
    "end": "1351240"
  },
  {
    "text": "it's used because it really puts together the whole experience so I have this custom",
    "start": "1351240",
    "end": "1357279"
  },
  {
    "text": "exception filter and essentially if there's an exception which could happen in",
    "start": "1357279",
    "end": "1364039"
  },
  {
    "text": "application layer and it's a validation exception then it it catches that",
    "start": "1364039",
    "end": "1369799"
  },
  {
    "text": "exception and automatically returns a bad request with all of those failures",
    "start": "1369799",
    "end": "1374960"
  },
  {
    "text": "in exactly the same shape as it would be if it had been returned from model state so we get the same",
    "start": "1374960",
    "end": "1382919"
  },
  {
    "text": "experience all right back to the slide deck can I show the controller how it's actually used yes yes I can the the the",
    "start": "1382919",
    "end": "1391240"
  },
  {
    "text": "wonderful thing is we'll go to the customers controller because that's the",
    "start": "1391240",
    "end": "1396840"
  },
  {
    "text": "example we don't do anything and we're going to look at this in more detail we don't have to have any",
    "start": "1396840",
    "end": "1403880"
  },
  {
    "text": "validation handling in the controller because we've implemented it in core",
    "start": "1403880",
    "end": "1409400"
  },
  {
    "text": "and what happens is this filter this custom exception",
    "start": "1409400",
    "end": "1416679"
  },
  {
    "text": "filter actually fires if there's an exception within the action and takes",
    "start": "1416679",
    "end": "1423919"
  },
  {
    "text": "over the response type so it actually says oh there's an exception I'll catch that it's a validation exception as you",
    "start": "1423919",
    "end": "1430799"
  },
  {
    "text": "can see here and I will I will set the response to bad request and I will return you adjacent result which is the",
    "start": "1430799",
    "end": "1438039"
  },
  {
    "text": "valid failures so you see we don't have to handle it in the controller and we also",
    "start": "1438039",
    "end": "1445159"
  },
  {
    "text": "well we would if we wrote a console application we'd want to catch that exception in some way but this is how",
    "start": "1445159",
    "end": "1450520"
  },
  {
    "text": "we're catching it in the case of ASP net core good",
    "start": "1450520",
    "end": "1456158"
  },
  {
    "text": "question all right key points using well we covered those two so mediator",
    "start": "1460000",
    "end": "1466880"
  },
  {
    "text": "simplifies cross cutting concern and the design is independent of",
    "start": "1466880",
    "end": "1471960"
  },
  {
    "text": "infrastructure and data access concerns uh so you notice me uh using a DB",
    "start": "1471960",
    "end": "1479520"
  },
  {
    "text": "context in my commands and Crews you might be thinking well it's it's not independent of data access because we're using EF core let's talk about that",
    "start": "1479520",
    "end": "1487279"
  },
  {
    "start": "1487000",
    "end": "1505000"
  },
  {
    "text": "now so in the persistence layer we're going especially if we're using EF core",
    "start": "1487279",
    "end": "1492840"
  },
  {
    "text": "we're going to be using a DB context we'll have migrations configurations",
    "start": "1492840",
    "end": "1498440"
  },
  {
    "text": "seeding and abstractions so if we're implementing maybe the repository in the unit of the work that would be an",
    "start": "1498440",
    "end": "1504919"
  },
  {
    "text": "example so the big question should we implement the unit of work and repository patterns so show of hands",
    "start": "1504919",
    "end": "1512159"
  },
  {
    "start": "1505000",
    "end": "1597000"
  },
  {
    "text": "when we're using the Earth core who thinks we",
    "start": "1512159",
    "end": "1516559"
  },
  {
    "text": "should okay there's maybe like seven people show of hands who thinks we",
    "start": "1518120",
    "end": "1523520"
  },
  {
    "text": "shouldn't okay maybe about 20 people that's not everyone but that's okay that's it that's it indic indication so",
    "start": "1523520",
    "end": "1530520"
  },
  {
    "text": "I think it's not always the best choice because EF core insulates your code from database changes how does it do that",
    "start": "1530520",
    "end": "1537679"
  },
  {
    "text": "well EF core is one big abstraction with ef core we choose a provider SQL Server",
    "start": "1537679",
    "end": "1542840"
  },
  {
    "text": "Oracle postest and by changing out the provider we change the database that we're dependent on so we're not actually",
    "start": "1542840",
    "end": "1549159"
  },
  {
    "text": "dependent on a specific database provider we can switch that out sure we might need to delete our migrations and",
    "start": "1549159",
    "end": "1555640"
  },
  {
    "text": "re re receed an a sorry recreate an initial migration specific for the",
    "start": "1555640",
    "end": "1561640"
  },
  {
    "text": "provider that we chosen but hopefully not much more than that also if you like",
    "start": "1561640",
    "end": "1567159"
  },
  {
    "text": "the unit of work well that's good DB context is a unit of work and if you like the repository that's good too DB",
    "start": "1567159",
    "end": "1573399"
  },
  {
    "text": "set is a repository um one of the one of the things that was common to use a repository and a unit work for in",
    "start": "1573399",
    "end": "1580000"
  },
  {
    "text": "previous versions of n framework was for unit testing and that was a really good use case for repositories at that point",
    "start": "1580000",
    "end": "1586480"
  },
  {
    "text": "um but now we have great testing tools so we've got the EF core in memory provider yet another EF core provider we",
    "start": "1586480",
    "end": "1592480"
  },
  {
    "text": "can switch that in for our unit testing all our unit tests will run in memory but what do the experts think so",
    "start": "1592480",
    "end": "1599760"
  },
  {
    "start": "1597000",
    "end": "1678000"
  },
  {
    "text": "first we have Jimmy Bogard he's the creator of automapper mediator at the conference uh this this week uh and he",
    "start": "1599760",
    "end": "1606720"
  },
  {
    "text": "thinks I'm over repositories and definitely over abstracting your data layer so he's he's against",
    "start": "1606720",
    "end": "1613240"
  },
  {
    "text": "repositories we have Steve Smith Microsoft MVP and longtime Regional director and and he thinks you don't",
    "start": "1613240",
    "end": "1619039"
  },
  {
    "text": "need a repository but there are many benefits and you should consider it now Steve has talked and blogged full length",
    "start": "1619039",
    "end": "1625880"
  },
  {
    "text": "about repositories and I think when he says that he's been diplomatic I think he's against repositories um but if you",
    "start": "1625880",
    "end": "1633559"
  },
  {
    "text": "like repositories the good news is he has a lot of great information on how to build really good repositories using the",
    "start": "1633559",
    "end": "1640240"
  },
  {
    "text": "specification pattern so check that stuff out finally we have John Smith so he's the author of the new book EF core",
    "start": "1640240",
    "end": "1646679"
  },
  {
    "text": "and action and he thinks know the repository unit of work pattern isn't useful with ef core so he's against",
    "start": "1646679",
    "end": "1654039"
  },
  {
    "text": "repositories too so what should we do when all of the experts don't agree we",
    "start": "1654039",
    "end": "1659240"
  },
  {
    "text": "take it back to basics we realize that repositories and unit of work are design patterns they're designed to solve a",
    "start": "1659240",
    "end": "1666080"
  },
  {
    "text": "problem if that particular pattern solves a problem you have then you should use it if it does not solve that",
    "start": "1666080",
    "end": "1671919"
  },
  {
    "text": "problem then you'll just be introducing unnecessary complexity so that's the only thing you need to remember",
    "start": "1671919",
    "end": "1678880"
  },
  {
    "start": "1678000",
    "end": "1847000"
  },
  {
    "text": "let's have a look at the persistence",
    "start": "1678880",
    "end": "1682120"
  },
  {
    "text": "layer all right so the first thing that I want to show you if I can scroll let's",
    "start": "1685000",
    "end": "1691840"
  },
  {
    "text": "contract if we look at the Cs prod we can see that we're independent",
    "start": "1693960",
    "end": "1700000"
  },
  {
    "text": "of the database I can switch that out that provider out for postgress and we'll still be able to use it with this",
    "start": "1700000",
    "end": "1706159"
  },
  {
    "text": "particular solution we have switched it up for with postgress and it didn't impact anything it's not always going to",
    "start": "1706159",
    "end": "1711840"
  },
  {
    "text": "be the case but at least we're off to a good",
    "start": "1711840",
    "end": "1716240"
  },
  {
    "text": "start now the next thing that I'd like to say is to prefer fluent API",
    "start": "1719240",
    "end": "1725159"
  },
  {
    "text": "configuration over data annotations so we mentioned before that we could use data annotations to help with the",
    "start": "1725159",
    "end": "1731360"
  },
  {
    "text": "mapping from our object model to our relational model but we can also use fluent API configuration and that's just",
    "start": "1731360",
    "end": "1737440"
  },
  {
    "text": "a better choice because then we're not cluttering our entities with those data annotations and in actual fact you can",
    "start": "1737440",
    "end": "1743640"
  },
  {
    "text": "do more with uh with fluent um than you can with data",
    "start": "1743640",
    "end": "1748960"
  },
  {
    "text": "annotations let me load up one CU I want to make another point on that so in the customer configuration you can see that",
    "start": "1748960",
    "end": "1756279"
  },
  {
    "text": "we can describe all of those properties that we would have used for data annotations um but it's really important",
    "start": "1756279",
    "end": "1761720"
  },
  {
    "text": "to know the conventions uh when you're working with any conventions based framework because in this case we're",
    "start": "1761720",
    "end": "1767840"
  },
  {
    "text": "actually specifying that you know um well actually not not in that one I got a better",
    "start": "1767840",
    "end": "1773200"
  },
  {
    "text": "example order um configuration so in the in this in this",
    "start": "1773200",
    "end": "1778600"
  },
  {
    "text": "particular case we're defining that order ID is a primary key but if we know Entity framework well we know that if",
    "start": "1778600",
    "end": "1785039"
  },
  {
    "text": "there's an entity named order and there's a property named ID or order ID with a varying case it already knows",
    "start": "1785039",
    "end": "1791679"
  },
  {
    "text": "it's a primary key so yes use use um entity type configurations um but no",
    "start": "1791679",
    "end": "1798039"
  },
  {
    "text": "know your conventions and make your life a little bit easier but that that's true of any conventions based framework if",
    "start": "1798039",
    "end": "1803440"
  },
  {
    "text": "you know the conventions it'll be easier to work with it um one other thing with all of these",
    "start": "1803440",
    "end": "1811480"
  },
  {
    "text": "um configurations there are a few different ways to apply it but fortunately in EF core 22 we now have a",
    "start": "1811480",
    "end": "1819279"
  },
  {
    "text": "new method and it can apply all of those configurations automatically for us so",
    "start": "1819279",
    "end": "1825159"
  },
  {
    "text": "we used to have to say model builder. apply configuration and new OP the configuration always forget and that",
    "start": "1825159",
    "end": "1831080"
  },
  {
    "text": "would you know catch us um but now we can just run that so that's quite quite good that came in uh 2",
    "start": "1831080",
    "end": "1838640"
  },
  {
    "text": "two all right so key points it's independent of the database we're using the EF core providers and so we're kind",
    "start": "1847559",
    "end": "1854240"
  },
  {
    "text": "of safe we use fluent API configuration over data and ations they're more powerful we prefer conventions over",
    "start": "1854240",
    "end": "1861440"
  },
  {
    "text": "configuration we know our conventions and therefore we're more effective when we design our systems and we",
    "start": "1861440",
    "end": "1867000"
  },
  {
    "text": "automatically apply all entity type configurations using the EF core 22 uh apply or configurations",
    "start": "1867000",
    "end": "1874200"
  },
  {
    "start": "1874000",
    "end": "1932000"
  },
  {
    "text": "method all right now let's have a look at the infrastructure layer so in our infrastructure layer we have",
    "start": "1874200",
    "end": "1880960"
  },
  {
    "text": "implementations it contains classes for accessing external resources so for",
    "start": "1880960",
    "end": "1886240"
  },
  {
    "text": "example it could be API clients if we're communicating with some other web API file system if we need to access the",
    "start": "1886240",
    "end": "1891960"
  },
  {
    "text": "file system email notifications the system clock is a good one you might think you know um daytime. now is pretty",
    "start": "1891960",
    "end": "1899000"
  },
  {
    "text": "safe in your code but if you've got any kind of logic that's based on the current date and time you need to",
    "start": "1899000",
    "end": "1904200"
  },
  {
    "text": "abstract that otherwise it's going to be hard to unit test really the infrastructure layer",
    "start": "1904200",
    "end": "1909919"
  },
  {
    "text": "contains anything external when we talk about infrastructure we really are talking about persistence as well uh but",
    "start": "1909919",
    "end": "1915880"
  },
  {
    "text": "it makes sense to split them up and how many in this solution you know there's one infrastructure project but it really",
    "start": "1915880",
    "end": "1921960"
  },
  {
    "text": "depends on the complexity of um what's going in there um if you're if you're implementing security that's probably",
    "start": "1921960",
    "end": "1928360"
  },
  {
    "text": "going to be an entirely separate project but it'll go into the infrastructure layer so let's have a look at the",
    "start": "1928360",
    "end": "1933880"
  },
  {
    "start": "1932000",
    "end": "2064000"
  },
  {
    "text": "infrastructure layer so I don't have too much in the",
    "start": "1933880",
    "end": "1939320"
  },
  {
    "text": "infrastructure layer for this particular example I do have an implementation for machine date",
    "start": "1939320",
    "end": "1945559"
  },
  {
    "text": "time so you can see that's quite simple but when we go to unit tests we can substitute I date time with something",
    "start": "1945559",
    "end": "1952480"
  },
  {
    "text": "else um so say if we had some logic that was dependent on a Tuesday you know this particular logic only fired on a Tuesday",
    "start": "1952480",
    "end": "1959399"
  },
  {
    "text": "where we can substitute in an I date time that tells the test that it's a Tuesday so it's a simple as that",
    "start": "1959399",
    "end": "1964679"
  },
  {
    "text": "actually we had another nice benefit in a project that I was involved in um because we had that IE date time",
    "start": "1964679",
    "end": "1970799"
  },
  {
    "text": "implemented really well throughout the system we're actually able to provide the front end testers with a new tool",
    "start": "1970799",
    "end": "1977039"
  },
  {
    "text": "they could adjust the the system date time using uh a menu item in configuration so that their testing was",
    "start": "1977039",
    "end": "1982720"
  },
  {
    "text": "more effective they could actually move it forward and move it back and set it back to actual system time so that was",
    "start": "1982720",
    "end": "1987840"
  },
  {
    "text": "good for them for the exploratory testing we also have the implementation",
    "start": "1987840",
    "end": "1993399"
  },
  {
    "text": "for the notification service it's a bit lightweight but it's really quick so",
    "start": "1993399",
    "end": "2001039"
  },
  {
    "text": "this is the notification service that we saw earlier in the application layer so it's using the interface from the",
    "start": "2001039",
    "end": "2006720"
  },
  {
    "text": "application layer and it's using the type from the application layer so whatever we put in here is going to be",
    "start": "2006720",
    "end": "2012760"
  },
  {
    "text": "external of core so the other important thing and we",
    "start": "2012760",
    "end": "2020279"
  },
  {
    "text": "mentioned this at the beginning but it's important to mention again is that no layers should depend on infrastructure",
    "start": "2020279",
    "end": "2025600"
  },
  {
    "text": "layer um it doesn't have any dependencies um sorry it depends on core",
    "start": "2025600",
    "end": "2030880"
  },
  {
    "text": "but nothing depends on it because as soon as and I've seen this before and that's why I'm saying it again if you",
    "start": "2030880",
    "end": "2035960"
  },
  {
    "text": "have a dependency going from present ation to infrastructure then things start to break down because you have to",
    "start": "2035960",
    "end": "2041480"
  },
  {
    "text": "create that logic inside of presentation and that logic can't be shared by other applications that are connecting to it",
    "start": "2041480",
    "end": "2048398"
  },
  {
    "text": "all the dependencies point inwards that means all the logic will be orchestrated within core that means any uis that you",
    "start": "2048399",
    "end": "2054720"
  },
  {
    "text": "add to it later will benefit from that",
    "start": "2054720",
    "end": "2058480"
  },
  {
    "start": "2064000",
    "end": "2105000"
  },
  {
    "text": "logic all right so key points so the infrastructure layer contains classes for accessing external resources so such",
    "start": "2064359",
    "end": "2071079"
  },
  {
    "text": "as file systems web services SMTP and so on anything external it Implement abstractions SL interfaces defined",
    "start": "2071079",
    "end": "2078280"
  },
  {
    "text": "within the application layer and no layers depend on the infrastructure layer EG presentation layer so finally",
    "start": "2078280",
    "end": "2085560"
  },
  {
    "text": "we're going to look at the presentation layer so as I mentioned this is a uh ASP netcore 22 web app running angular uh so",
    "start": "2085560",
    "end": "2093280"
  },
  {
    "text": "in the presentation layer it can be whatever we want it could be Spa angular react View web API razor Pages Blazer",
    "start": "2093280",
    "end": "2100359"
  },
  {
    "text": "MVC web forms even it it really doesn't matter everything's in core let's have a",
    "start": "2100359",
    "end": "2108480"
  },
  {
    "start": "2105000",
    "end": "2414000"
  },
  {
    "text": "look so the first thing I want to do is take a little bit of a tour of a",
    "start": "2109000",
    "end": "2114680"
  },
  {
    "text": "particular controller in this solution it's got quite a lot of history behind it and it's good to see kind of the",
    "start": "2114680",
    "end": "2120960"
  },
  {
    "text": "evolution as we implemented these various features in the system and what what kind of impact it had",
    "start": "2120960",
    "end": "2129480"
  },
  {
    "text": "okay I really want that come",
    "start": "2135320",
    "end": "2142560"
  },
  {
    "text": "back okay scroll",
    "start": "2142560",
    "end": "2147280"
  },
  {
    "text": "down oh no this is the wrong one sorry we're going to look at the products controller",
    "start": "2149560",
    "end": "2157319"
  },
  {
    "text": "okay first we'll look at this one so you can see here this is a really typical controller um and something that you've",
    "start": "2158319",
    "end": "2164839"
  },
  {
    "text": "seen many times before we have a products controller and into this controller we inject the DB",
    "start": "2164839",
    "end": "2170480"
  },
  {
    "text": "context we're returning entities directly from the controller and it's",
    "start": "2170480",
    "end": "2176640"
  },
  {
    "text": "it's not it's a trivial controller but even so it's quite veros it's quite a",
    "start": "2176640",
    "end": "2181720"
  },
  {
    "text": "lot happening there's a few things wrong with this the first thing is that we've",
    "start": "2181720",
    "end": "2187319"
  },
  {
    "text": "brought brought in something like the DB context which is a really lowlevel concept but something that's really on the edge of our architecture and design",
    "start": "2187319",
    "end": "2194240"
  },
  {
    "text": "so we only have one place left to put the logic and that's in the actions of the controller now we can't really share",
    "start": "2194240",
    "end": "2200119"
  },
  {
    "text": "that we could get crazy and maybe start referencing controllers and console apps and stuff and share it that way but",
    "start": "2200119",
    "end": "2206240"
  },
  {
    "text": "that's that's not going to work nobody's going to do that the other problem we have is um we're returning entities and",
    "start": "2206240",
    "end": "2211640"
  },
  {
    "text": "entities are another really lowlevel concept you know we need to return view models because when we return a product",
    "start": "2211640",
    "end": "2218640"
  },
  {
    "text": "um maybe we're going to edit that product there's not enough information uh in a product entity to",
    "start": "2218640",
    "end": "2225079"
  },
  {
    "text": "actually edit a product we need a list of suppliers we need a list of categories we need all sorts of",
    "start": "2225079",
    "end": "2230400"
  },
  {
    "text": "information that's why we typically return view models uh not too much else happening",
    "start": "2230400",
    "end": "2237000"
  },
  {
    "text": "here we've got some checks and bits and pieces of logic let's move",
    "start": "2237000",
    "end": "2243079"
  },
  {
    "text": "on History customers controller there it",
    "start": "2243079",
    "end": "2249200"
  },
  {
    "text": "is okay I think this",
    "start": "2249200",
    "end": "2254680"
  },
  {
    "text": "one so this is where this is where we were using commands and queries um",
    "start": "2254680",
    "end": "2260800"
  },
  {
    "text": "before I started listening to Steve Smith uh so we're injecting all of these commands and queries everything that the",
    "start": "2260800",
    "end": "2267000"
  },
  {
    "text": "controller needs and the good thing about that is we're no longer returning entities and we no longer have a",
    "start": "2267000",
    "end": "2274280"
  },
  {
    "text": "dependency on the DB contacts at this level so we are our ble to encapsulate our logic within a specific query or",
    "start": "2274280",
    "end": "2280359"
  },
  {
    "text": "command um and we can encapsulate whatever we need in the dto view model that we",
    "start": "2280359",
    "end": "2287240"
  },
  {
    "text": "return then we found out about from services from Services is really cool so it's just a feature with the dependency",
    "start": "2290480",
    "end": "2297119"
  },
  {
    "text": "injection built into net core where we can actually inject at a method level the thing that we need so you can see",
    "start": "2297119",
    "end": "2303720"
  },
  {
    "text": "here for this post product action we're injecting a I create product command and",
    "start": "2303720",
    "end": "2310160"
  },
  {
    "text": "we can use that to execute the command and you can see even at this stage this control is starting to get",
    "start": "2310160",
    "end": "2317520"
  },
  {
    "text": "quite concise there's only one or two lines of code and there's certainly no logic within there so it's a big",
    "start": "2317520",
    "end": "2325520"
  },
  {
    "text": "Improvement and then we started using mediator so with mediator we're",
    "start": "2327319",
    "end": "2334240"
  },
  {
    "text": "injecting IM mediator and we don't need to actually um inject the commands and queries",
    "start": "2334240",
    "end": "2339839"
  },
  {
    "text": "anymore that it's all wired up we we saw the commands and queries were implementing I request um mediator",
    "start": "2339839",
    "end": "2347280"
  },
  {
    "text": "requests and the handlers were implementing I request Handler so you can see things are really simple we're",
    "start": "2347280",
    "end": "2352839"
  },
  {
    "text": "just we're just executing queries and executing",
    "start": "2352839",
    "end": "2358640"
  },
  {
    "text": "commands",
    "start": "2360560",
    "end": "2363560"
  },
  {
    "text": "oops let's see lots of changes let's just go to the latest",
    "start": "2365599",
    "end": "2374440"
  },
  {
    "text": "one so this is what it looks like today we're not even injecting mediator we have a base control to take care of that",
    "start": "2379400",
    "end": "2385800"
  },
  {
    "text": "for us um you can see here that it's quite simple we don't really need to do too",
    "start": "2385800",
    "end": "2392880"
  },
  {
    "text": "much and that's wonderful our controllers have become a piece of infrastructure their responsibility now",
    "start": "2392880",
    "end": "2399319"
  },
  {
    "text": "is to take a request and to turn it into a response and nothing else all of the logic behind that request all of the",
    "start": "2399319",
    "end": "2405760"
  },
  {
    "text": "processing the orchestration that we need to do is handled elsewhere question yeah where does the tto object lives in",
    "start": "2405760",
    "end": "2413000"
  },
  {
    "text": "this in the application layer yeah that's a that's a good point um and a point that I didn't make um you have",
    "start": "2413000",
    "end": "2419280"
  },
  {
    "start": "2414000",
    "end": "2658000"
  },
  {
    "text": "only good questions thank you um let's find that",
    "start": "2419280",
    "end": "2425079"
  },
  {
    "text": "so actually there's two points so when we looked at create",
    "start": "2425079",
    "end": "2431200"
  },
  {
    "text": "customer what you may have noticed soorry I'm just zooming",
    "start": "2431200",
    "end": "2439040"
  },
  {
    "text": "in ah is everything that's associated with creating a customer is in the same",
    "start": "2439040",
    "end": "2446240"
  },
  {
    "text": "folder so if we do need to change the create customer command we're not going to be jumping around to different",
    "start": "2446240",
    "end": "2451560"
  },
  {
    "text": "folders to do that everything is there we have the command itself the dto with",
    "start": "2451560",
    "end": "2457599"
  },
  {
    "text": "which we make the request we have the Handler the the class that's responsible for handling the request and we have the",
    "start": "2457599",
    "end": "2464200"
  },
  {
    "text": "validator the class that's responsible for validating the dto and then we have our customer created event so it's all",
    "start": "2464200",
    "end": "2471680"
  },
  {
    "text": "there that's a that's a really good way to organize your files so the dto is there if we have a look at",
    "start": "2471680",
    "end": "2478920"
  },
  {
    "text": "products uh actually the queries ah",
    "start": "2481280",
    "end": "2488280"
  },
  {
    "text": "there we go so there there's our dto all located together with the queries or",
    "start": "2488280",
    "end": "2494319"
  },
  {
    "text": "commands and you might think well I want to put them in a central location and I want to share them because I use",
    "start": "2494319",
    "end": "2500640"
  },
  {
    "text": "products in more than one place and that that's that can be the case the problem with that however is usually there is",
    "start": "2500640",
    "end": "2508480"
  },
  {
    "text": "some difference in the way you're using product so for example you might want a list of products and you might just want",
    "start": "2508480",
    "end": "2514119"
  },
  {
    "text": "the ID and the name but of course when you're editing a product you you want kind of the full dto now if you start",
    "start": "2514119",
    "end": "2520359"
  },
  {
    "text": "reusing those models what can happen is you can introduce side effects so you go to change one query or command and you",
    "start": "2520359",
    "end": "2527319"
  },
  {
    "text": "break another query or command so I think it's better to not reuse the dto",
    "start": "2527319",
    "end": "2533040"
  },
  {
    "text": "unless they're absolutely trivial and to keep them separate so that way when you change one thing you don't have to worry",
    "start": "2533040",
    "end": "2539000"
  },
  {
    "text": "about side effects uh let's see there was one other point I wanted to make oh yes one of the",
    "start": "2539000",
    "end": "2546520"
  },
  {
    "text": "things that new developers will often complain about when they first start working with cqrs is discoverability if",
    "start": "2546520",
    "end": "2553920"
  },
  {
    "text": "we go to let me zoom out that's not zooming out if we go to",
    "start": "2553920",
    "end": "2560920"
  },
  {
    "text": "the customers controller and we have a look at the",
    "start": "2560920",
    "end": "2567160"
  },
  {
    "text": "commands or the queries it's easy for us to jump directly to the query we can just press",
    "start": "2567160",
    "end": "2573640"
  },
  {
    "text": "F12 and we're there but it's not easy for us to jump to the Handler and that's",
    "start": "2573640",
    "end": "2578960"
  },
  {
    "text": "really where we want to go most of the time so there's actually an alternative approach that you can use so instead of",
    "start": "2578960",
    "end": "2585640"
  },
  {
    "text": "creating separate commands and command handlers you can take the Handler the",
    "start": "2585640",
    "end": "2591599"
  },
  {
    "text": "class and Nest it directly into the command that's actually my preferred approach in",
    "start": "2591599",
    "end": "2598520"
  },
  {
    "text": "fact if I undo the changes where is that I will go team",
    "start": "2598520",
    "end": "2606119"
  },
  {
    "text": "EXP changes",
    "start": "2606119",
    "end": "2611400"
  },
  {
    "text": "ah there so now we have the create customer command including the Handler",
    "start": "2625079",
    "end": "2631480"
  },
  {
    "text": "at the top we have all of the properties that are associated with this dto then we have the Handler",
    "start": "2631480",
    "end": "2637880"
  },
  {
    "text": "and the implementation for that Handler so maybe you like that maybe you don't but it's it's one way to do it um and it",
    "start": "2637880",
    "end": "2644839"
  },
  {
    "text": "does improve discoverability so now when we go from the controller to the create customer command everything that the",
    "start": "2644839",
    "end": "2650400"
  },
  {
    "text": "developers expecting to see is there so I think that's kind of",
    "start": "2650400",
    "end": "2655400"
  },
  {
    "text": "nice okay next thing that I want to show is open API so I think everyone has",
    "start": "2657200",
    "end": "2663680"
  },
  {
    "start": "2658000",
    "end": "3026000"
  },
  {
    "text": "heard of open API if they haven't then they've heard of swagger so so we won't go into that but I want to show you the",
    "start": "2663680",
    "end": "2669559"
  },
  {
    "text": "particular implementation that I'm using and I find it really useful I've gone through through a number of different",
    "start": "2669559",
    "end": "2676160"
  },
  {
    "text": "variations so I'm using n swag and you can see here I have an nwag",
    "start": "2676160",
    "end": "2681559"
  },
  {
    "text": "configuration file and this particular configuration file without going into",
    "start": "2681559",
    "end": "2686960"
  },
  {
    "text": "the boring details will do two things for me first it will create the open API specification document so that other",
    "start": "2686960",
    "end": "2694040"
  },
  {
    "text": "systems can interact with my system and the second thing it would do is to create an angular client so that I can",
    "start": "2694040",
    "end": "2701160"
  },
  {
    "text": "um automatically uh interact with my backend API from angular and what it",
    "start": "2701160",
    "end": "2707760"
  },
  {
    "text": "creates for me is something quite wonderful it creates all of the services and all of those dto or view models in",
    "start": "2707760",
    "end": "2714880"
  },
  {
    "text": "typescript I don't have to create those myself it saves me a lot of time and I found that the code it produces is",
    "start": "2714880",
    "end": "2721280"
  },
  {
    "text": "exceptional um and that's what you want the source of Truth is in that",
    "start": "2721280",
    "end": "2726480"
  },
  {
    "text": "application layer in core we don't want to recreate them from scratch which is what we used to do in the past we want",
    "start": "2726480",
    "end": "2733240"
  },
  {
    "text": "them to be generated based on the source of Truth and this is so effective in you",
    "start": "2733240",
    "end": "2738640"
  },
  {
    "text": "can see in my web UI if I edit the Cs project I have an MS build task which",
    "start": "2738640",
    "end": "2746160"
  },
  {
    "text": "will actually run nwag from the command line and generate the specification and",
    "start": "2746160",
    "end": "2751280"
  },
  {
    "text": "generate that angular typescript client whenever a controller changes so whenever anything changes it's",
    "start": "2751280",
    "end": "2757640"
  },
  {
    "text": "automatically rebuilt now if you've been developing with angular you know that angular will automatically pick up those",
    "start": "2757640",
    "end": "2764200"
  },
  {
    "text": "changes as well so if something changes in your web API that causes a braking change angular is going to pick it up",
    "start": "2764200",
    "end": "2771040"
  },
  {
    "text": "straight away and it's going to tell you so it's a really nice experience",
    "start": "2771040",
    "end": "2776880"
  },
  {
    "text": "uh and with nwag of course we have um good tooling so we have the nwag",
    "start": "2776880",
    "end": "2783160"
  },
  {
    "text": "studio and we can use it to generate a number of things so so this is the I'll zoom out and we'll have a look at",
    "start": "2783160",
    "end": "2790000"
  },
  {
    "text": "exactly what we're generating for this",
    "start": "2790000",
    "end": "2793920"
  },
  {
    "text": "project I think app is running too well we can have a look here okay so",
    "start": "2795920",
    "end": "2804160"
  },
  {
    "text": "this is the specification that gets generated on build and it gets actually put onto the file system you can do the",
    "start": "2804160",
    "end": "2811559"
  },
  {
    "text": "generation of the specification at runtime but I find that problematic because at runtime we have to deal with",
    "start": "2811559",
    "end": "2816960"
  },
  {
    "text": "things like permissions and um authentication so you can see the specifications just plain Jason it's not",
    "start": "2816960",
    "end": "2823079"
  },
  {
    "text": "really for us to read there's the typescript client and you can see typescript client's really great it's",
    "start": "2823079",
    "end": "2829440"
  },
  {
    "text": "really long um it contains all of the services so you know we have a products controller so there's going to be a",
    "start": "2829440",
    "end": "2834680"
  },
  {
    "text": "products client so we can access all of those methods but I want to show you a dto he's an employee manager model so",
    "start": "2834680",
    "end": "2840960"
  },
  {
    "text": "that's the type that exists in core and it's being recreated for us in typescript ready to go",
    "start": "2840960",
    "end": "2847640"
  },
  {
    "text": "and of course we've got Swagger UI in the background um so that makes it easy for developers to work with our system",
    "start": "2847640",
    "end": "2853559"
  },
  {
    "text": "they can see and explore our API um they can try out methods if they want",
    "start": "2853559",
    "end": "2858839"
  },
  {
    "text": "to which is",
    "start": "2858839",
    "end": "2862240"
  },
  {
    "text": "great there we go nice and easy so it just gives us a number of advantages",
    "start": "2864640",
    "end": "2870240"
  },
  {
    "text": "really what I like to say is that open API no matter which tool you're using Bridges the gap between the front end",
    "start": "2870240",
    "end": "2876680"
  },
  {
    "text": "and and the back",
    "start": "2876680",
    "end": "2879240"
  },
  {
    "text": "end oh one are my",
    "start": "2884440",
    "end": "2888480"
  },
  {
    "text": "slides all right so key points controllers should not contain any application logic we've worked really",
    "start": "2890319",
    "end": "2896280"
  },
  {
    "text": "hard now and all of that logic is moved into core where it belongs we should create and consume well- defined view",
    "start": "2896280",
    "end": "2902520"
  },
  {
    "text": "models entities are not sufficient to return to the client we need something more specific based on whatever whatever",
    "start": "2902520",
    "end": "2909440"
  },
  {
    "text": "command or query is uh related to open API Bridges the gap between the front",
    "start": "2909440",
    "end": "2915200"
  },
  {
    "text": "end and the back end so I have some recommended resources the first one this is a book by Steve Smith architect in",
    "start": "2915200",
    "end": "2922000"
  },
  {
    "text": "modern web applications with ASP netore and Azure um this is a great book it's a",
    "start": "2922000",
    "end": "2927200"
  },
  {
    "text": "quick read this is where I first learn about clean architecture uh one thing I will say if you're not into Azure don't",
    "start": "2927200",
    "end": "2933079"
  },
  {
    "text": "worry um that really doesn't impact the content of the book um it's it's",
    "start": "2933079",
    "end": "2938280"
  },
  {
    "text": "excellent and I'll share a link to the slides and code as well next one is building microservices this is really a",
    "start": "2938280",
    "end": "2944000"
  },
  {
    "text": "companion book to the first book and keep in mind if you're not into containers and you're not into Azure",
    "start": "2944000",
    "end": "2950960"
  },
  {
    "text": "that's okay all of the content in this book is still really relevant i' highly recommend you know if you like what you",
    "start": "2950960",
    "end": "2956880"
  },
  {
    "text": "saw today those are two really good books to get started with and of course we have clean architecture by Uncle Bob",
    "start": "2956880",
    "end": "2963319"
  },
  {
    "text": "it would be a Miss of me not to not to mention the actual the book that was published on",
    "start": "2963319",
    "end": "2969920"
  },
  {
    "text": "this so thanks for coming to my talk today if you're Keen to learn more",
    "start": "2970640",
    "end": "2975680"
  },
  {
    "text": "please download the code and slides and try it out for yourself I think you're going to find that clean architecture is",
    "start": "2975680",
    "end": "2983200"
  },
  {
    "text": "simple to implement all the way from development to production thank",
    "start": "2983200",
    "end": "2989200"
  },
  {
    "text": "you happy to take any questions",
    "start": "2994839",
    "end": "3000440"
  },
  {
    "text": "yes yes say depends on the cont we were",
    "start": "3000680",
    "end": "3007000"
  },
  {
    "text": "assuming that data from from database but say you had",
    "start": "3007000",
    "end": "3015000"
  }
]