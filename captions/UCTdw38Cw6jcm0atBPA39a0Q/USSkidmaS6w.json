[
  {
    "start": "0",
    "end": "92000"
  },
  {
    "text": "hello everyone can you hear me very good right there welcome to reinventing the",
    "start": "5160",
    "end": "13589"
  },
  {
    "text": "transaction script probably the most boring title I've ever done as a tour",
    "start": "13589",
    "end": "18660"
  },
  {
    "text": "title it's after lunch and you know it sounds like a really boring talk I hope",
    "start": "18660",
    "end": "24510"
  },
  {
    "text": "the talk is not as boring as their title sounds mmm so I'm Scott volution I have a web shop",
    "start": "24510",
    "end": "31679"
  },
  {
    "text": "website f-sharp 400 prophets which is um about F sharp and about fun and profit",
    "start": "31679",
    "end": "37670"
  },
  {
    "text": "so I do a lot of functional programming and that's part of the theme of this talk and just gonna what triggered me to",
    "start": "37670",
    "end": "46440"
  },
  {
    "text": "do this talk in the first place is when I started people seeing people say that transaction scripts are a bad thing",
    "start": "46440",
    "end": "52620"
  },
  {
    "text": "now if you don't know what a transaction script is I'm gonna explain in a minute but for people who were like who came of",
    "start": "52620",
    "end": "58590"
  },
  {
    "text": "age you know 10-15 years ago this is one of those standard things one of the",
    "start": "58590",
    "end": "63600"
  },
  {
    "text": "standard patents we had and I see people say you know it's not good enough for this is anemic",
    "start": "63600",
    "end": "68640"
  },
  {
    "text": "it's an anti-pattern it's more of an anti-pattern with no sequel that citrus there's all these things that people say about them I think people have a",
    "start": "68640",
    "end": "74569"
  },
  {
    "text": "misunderstanding of what they're good for so I think they are not a bad thing",
    "start": "74569",
    "end": "80009"
  },
  {
    "text": "in fact they are an excellent thing and I hope to persuade you that they really",
    "start": "80009",
    "end": "85229"
  },
  {
    "text": "are a very good way of thinking about solving problems so what is a",
    "start": "85229",
    "end": "90360"
  },
  {
    "text": "transaction script this term was created",
    "start": "90360",
    "end": "95550"
  },
  {
    "start": "92000",
    "end": "92000"
  },
  {
    "text": "or popularized by Martin Fowler in his book patterns of enterprise application",
    "start": "95550",
    "end": "101190"
  },
  {
    "text": "architecture pe√±a a it's normally called and it came out in 2002 and this was",
    "start": "101190",
    "end": "107459"
  },
  {
    "text": "people who were programming back then like old people like me this is one of our Bibles and we you know we",
    "start": "107459",
    "end": "112890"
  },
  {
    "text": "religiously followed all the patterns in this book and one of the questions he",
    "start": "112890",
    "end": "119069"
  },
  {
    "text": "asked in that book is how do you organize your domain logic where you know should you put it here should you spit it around should how should you do",
    "start": "119069",
    "end": "124800"
  },
  {
    "text": "it and so one of the patterns for this was a transaction script and the idea is that most business applications you can",
    "start": "124800",
    "end": "131039"
  },
  {
    "text": "think of as a series of transactions and so a transaction script is basically all",
    "start": "131039",
    "end": "137640"
  },
  {
    "text": "that all the logic you need duis transaction is in one single procedure and he uses the word procedures of this Holdings and then if",
    "start": "137640",
    "end": "145410"
  },
  {
    "text": "you need to do database stuff you know you just like literally put the sequel statements in line or you have a very thin wrapper or something but basically",
    "start": "145410",
    "end": "152400"
  },
  {
    "text": "everything you need in one place and each transaction each business transaction has its own transaction",
    "start": "152400",
    "end": "158490"
  },
  {
    "text": "script so that's pretty straightforward that's pretty easy and he had some other patterns in there too I mean here the",
    "start": "158490",
    "end": "165270"
  },
  {
    "text": "transaction script and he had the table module pan which is really not so",
    "start": "165270",
    "end": "170640"
  },
  {
    "text": "trending right now the domain model which is now very popular obviously domain driven design and so on and the",
    "start": "170640",
    "end": "177390"
  },
  {
    "text": "idea of that is you have an object model and for all the different bits of domain logic you have a class that specializes",
    "start": "177390",
    "end": "183420"
  },
  {
    "text": "in that particular piece of domain large you have a customer class and a product class and a whatever class you know and",
    "start": "183420",
    "end": "189030"
  },
  {
    "text": "the behavior and data are kept together of your origin and then you also have services he also mentioned service",
    "start": "189030",
    "end": "196440"
  },
  {
    "text": "layered architecture in this book with services and application services and domain services and all that other stuff so these are the patterns though in the",
    "start": "196440",
    "end": "203610"
  },
  {
    "text": "book and since the main logic is a really important part of your code you know people paid a lot of attention to",
    "start": "203610",
    "end": "209010"
  },
  {
    "text": "these pens and of course people have very strong opinions about these patterns and the transaction script was",
    "start": "209010",
    "end": "215370"
  },
  {
    "text": "considered like two simples to anemic table modules to database centric but",
    "start": "215370",
    "end": "220650"
  },
  {
    "text": "you know domain model and services and layers are good because they're complex nice and complex complex is good right",
    "start": "220650",
    "end": "226890"
  },
  {
    "text": "and it's just interesting to me that simplicity is considered sort of a bad thing and I just want to have a little",
    "start": "226890",
    "end": "233690"
  },
  {
    "text": "side now here about developers and the way they think about things I mean if",
    "start": "233690",
    "end": "238710"
  },
  {
    "text": "you have a scale from simple to complex we really do think of simple things as",
    "start": "238710",
    "end": "244140"
  },
  {
    "text": "boring and and complex things as awesome and interesting and all I have to say no it's microservices and manetti's and",
    "start": "244140",
    "end": "251910"
  },
  {
    "text": "event sourcing and you can think of all the things which are complex now it doesn't mean they're a bad thing sometimes you need the complexity but we",
    "start": "251910",
    "end": "258840"
  },
  {
    "text": "jump on to the complexity we think complexity equals good and simple and boring equals bad and you know Visual",
    "start": "258840",
    "end": "265710"
  },
  {
    "text": "Basic and PHP and stuff are bad because they're too simple it's like it's too easy to get stuff done you need to have",
    "start": "265710",
    "end": "271800"
  },
  {
    "text": "a framework you know so transnational scripts have a bad reputation you know if you if you",
    "start": "271800",
    "end": "278790"
  },
  {
    "start": "273000",
    "end": "273000"
  },
  {
    "text": "were around in those days and or if you read the book people think it's translational scripts are like for people who are stuck in the 90s and",
    "start": "278790",
    "end": "284340"
  },
  {
    "text": "you're doing a lot of Java or maybe an evening using COBOL because basically all COBOL stuff is transaction scripts",
    "start": "284340",
    "end": "290220"
  },
  {
    "text": "right it's just like mainframe stuff so it's very uncool if you use transcription a transaction scripts you",
    "start": "290220",
    "end": "295470"
  },
  {
    "text": "an uncool person so I'm going to try and tell you the revelation that",
    "start": "295470",
    "end": "302539"
  },
  {
    "text": "transactions are actually very cool because you can use functional programming if you reinvent them with",
    "start": "302539",
    "end": "307680"
  },
  {
    "text": "functional programming is very cool because functional program is cool so function the program based translation",
    "start": "307680",
    "end": "313590"
  },
  {
    "text": "scripts are super hipster and super cool and then there okay so alright so let's",
    "start": "313590",
    "end": "319229"
  },
  {
    "text": "look at the pros and cons of transaction scripts a typical transaction",
    "start": "319229",
    "end": "324270"
  },
  {
    "text": "transaction scripts you know get some data from database doesn't business logic write some data get some more",
    "start": "324270",
    "end": "329699"
  },
  {
    "text": "business logic maybe there's a little branch on some condition does some more database some more business logic etc",
    "start": "329699",
    "end": "334979"
  },
  {
    "text": "etc etc and again this is how most code used to be written before",
    "start": "334979",
    "end": "340380"
  },
  {
    "text": "object-oriented philosophy came along but what's interesting about this it's",
    "start": "340380",
    "end": "345720"
  },
  {
    "text": "actually really easy to understand it's like one thing after another it's one directional dataflow it's really",
    "start": "345720",
    "end": "352800"
  },
  {
    "text": "easy to understand what's going on so that's good I mean you know it's all in one place it's all focused on what's",
    "start": "352800",
    "end": "360330"
  },
  {
    "text": "important right you don't need have a yangmi reminder because it's nothing",
    "start": "360330",
    "end": "366240"
  },
  {
    "text": "you're not building a framework you're building something that delivers some particular piece of value so everything",
    "start": "366240",
    "end": "372630"
  },
  {
    "text": "in this script is relevant to the script there is no interface that has methods that you're not using in the scrip",
    "start": "372630",
    "end": "378180"
  },
  {
    "text": "because there were no interfaces right so it's very very specific is very relevant that makes it also easy to",
    "start": "378180",
    "end": "383310"
  },
  {
    "text": "understand now on down on the flip side it's hard to modify if you add new",
    "start": "383310",
    "end": "389760"
  },
  {
    "text": "conditions and you want to try to evolve this thing you add more conditions and more conditions and you end up with a",
    "start": "389760",
    "end": "395099"
  },
  {
    "text": "tangled mess of logic sometimes that's not good and I think it's Martin Fowler",
    "start": "395099",
    "end": "400380"
  },
  {
    "text": "said there's no graceful path to richer behavior like at some point",
    "start": "400380",
    "end": "406169"
  },
  {
    "text": "throw these away and Creator to me I know which domain model or often you",
    "start": "406169",
    "end": "412379"
  },
  {
    "text": "just copy and paste the whole scripts and make your changes and then leave the original script alone so you don't break it you know that kind of thing so that's",
    "start": "412379",
    "end": "418080"
  },
  {
    "text": "why they have a bad reputation and there's no rich domain model we're literally reading things from a database",
    "start": "418080",
    "end": "424020"
  },
  {
    "text": "doing some logic right in stare at the database so all the stuff about domain driven design and having objects with",
    "start": "424020",
    "end": "430499"
  },
  {
    "text": "behavior and stuff that all goes out the window this is like I say it's very fifties mainframe style so if I want to",
    "start": "430499",
    "end": "437310"
  },
  {
    "text": "take this piece of code and we use it for some other script it's really hard to do because it's not designed to be",
    "start": "437310",
    "end": "444330"
  },
  {
    "text": "modular and it's also really hard to test because the business logic and the",
    "start": "444330",
    "end": "449729"
  },
  {
    "text": "database logic and we know what makes it up here's the business logic here's the database logic they're all tangled together that makes it really hard to",
    "start": "449729",
    "end": "455789"
  },
  {
    "text": "test trying to write a unit test for this bit or a unit test for that bit it's gonna be really hard so you can't",
    "start": "455789",
    "end": "462330"
  },
  {
    "text": "just test individual bits on their own so those are the problems can we fix these problems yes we can and that's",
    "start": "462330",
    "end": "469469"
  },
  {
    "text": "what this talk is all about and the answer of course is to use functional programming which is cool and domain",
    "start": "469469",
    "end": "474509"
  },
  {
    "text": "during designers call and so we get very high coolness score by doing this new reinvented translation script and it's",
    "start": "474509",
    "end": "480930"
  },
  {
    "text": "all about being cool right so let's talk about functional programming I'm sure",
    "start": "480930",
    "end": "488909"
  },
  {
    "text": "most of you are familiar with functional programming now but I'm just going to give you a little intro kind of my way of thinking about it without the jargon",
    "start": "488909",
    "end": "495839"
  },
  {
    "text": "so here's a function and I like to use the railway track analogy a lot you'll",
    "start": "495839",
    "end": "500909"
  },
  {
    "text": "see it in all my talks a function is something or this little bit where we had a little tunnel a tunnel of",
    "start": "500909",
    "end": "506789"
  },
  {
    "text": "transformation I call it and so something goes into this tunnel and it comes out different so an apple goes",
    "start": "506789",
    "end": "512430"
  },
  {
    "text": "into this tunnel and it turns into banana right so it's an apple to burn on a function so that's it that's all our",
    "start": "512430",
    "end": "519089"
  },
  {
    "text": "function is it's really simple if you've played with a like a toy like a Brio wouldn't where I set this you know you",
    "start": "519089",
    "end": "524490"
  },
  {
    "text": "know how this works but here's a fee thing about functions is they are standalone things they are not attached",
    "start": "524490",
    "end": "531630"
  },
  {
    "text": "to a class they're not touch to anything they are you know all they don't use global variables if you need extra",
    "start": "531630",
    "end": "537360"
  },
  {
    "text": "parameters you pass in extra parameters they are completely independent so stand alone is another word for reusable so",
    "start": "537360",
    "end": "544680"
  },
  {
    "text": "because they're standalone they are much much more reasonable than things that aren't standalone and also because",
    "start": "544680",
    "end": "550589"
  },
  {
    "text": "they're standalone you can use them just like you use a string or an int or a date or anything they're just values",
    "start": "550589",
    "end": "556620"
  },
  {
    "text": "that you can pass around so if you sample here is a function which has a normal input but has another function as",
    "start": "556620",
    "end": "563430"
  },
  {
    "text": "an output or here is a function which has a function as an input and a normal",
    "start": "563430",
    "end": "568800"
  },
  {
    "text": "thing as nowbut and here is a function which has a normal thing input and a normal thing output but you can have",
    "start": "568800",
    "end": "575310"
  },
  {
    "text": "another parameter which is another function that you pass in which controls how the main function works and that",
    "start": "575310",
    "end": "580560"
  },
  {
    "text": "controlling another function that's the strategy pan right there so in functional programming the strategy",
    "start": "580560",
    "end": "585720"
  },
  {
    "text": "pattern is literally just passing in a function there's another parameter so that's it that really is in my in my",
    "start": "585720",
    "end": "593430"
  },
  {
    "text": "world that's everything you need to know about functional programming seriously if that's the that's the foundation now you can get really really complicated",
    "start": "593430",
    "end": "599879"
  },
  {
    "text": "you can have a function that returns another function there's a factory for other functions that have parameters you",
    "start": "599879",
    "end": "604949"
  },
  {
    "text": "know I mean it can get really really complicated but the core principles is that that is really it and everything that comes out of that things like",
    "start": "604949",
    "end": "610379"
  },
  {
    "text": "monads and all that stuff it's just the kind of follow on to this right so the",
    "start": "610379",
    "end": "616170"
  },
  {
    "text": "core functional programming principle its composition everywhere functional",
    "start": "616170",
    "end": "621300"
  },
  {
    "text": "programmers love to do composition as their main thing so what is composition everyone knows what composition is",
    "start": "621300",
    "end": "627269"
  },
  {
    "text": "because hopefully you've all played with Lego right now Lego has a philosophy behind it there is actually a lego",
    "start": "627269",
    "end": "633870"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "philosophy first of all that all the pieces are designed to be connected and the pieces are reusable pieces and if",
    "start": "633870",
    "end": "642059"
  },
  {
    "text": "you connect any two LEGO pieces together you get another kind of piece that you can keep connecting to like this you",
    "start": "642059",
    "end": "648149"
  },
  {
    "text": "don't have to stop at some point because you run out of it's to add things on every Lego bit can be added one too so",
    "start": "648149",
    "end": "655259"
  },
  {
    "text": "here's some Lego and if you notice that every single Lego piece there's little bumps on it they're all designed to be connected that's a key part of Lego if",
    "start": "655259",
    "end": "662370"
  },
  {
    "text": "it didn't have that it wouldn't be Lego and you know here it's really obvious you can like build something and you can take it apart and build something else",
    "start": "662370",
    "end": "669450"
  },
  {
    "text": "so that only works because there are no strings attached literally there are no strings attached to LEGO pieces if they",
    "start": "669450",
    "end": "675510"
  },
  {
    "text": "had little wires or something coming out of them you'll be really much harder to build things out them and here's the",
    "start": "675510",
    "end": "681480"
  },
  {
    "text": "composition you can connect two pieces Lego to make a bigger thing connect that to make a bigger thing to make that to",
    "start": "681480",
    "end": "687150"
  },
  {
    "text": "make a bigger thing and so on and so forth you do not need a special adapter you know no point you have to stop and",
    "start": "687150",
    "end": "693720"
  },
  {
    "text": "say I can't continue because I need a special adapter that I'm you know like you can always keep going right in just",
    "start": "693720",
    "end": "699690"
  },
  {
    "text": "adding and adding and adding which means you can start from really small things and make really big things like that so",
    "start": "699690",
    "end": "706470"
  },
  {
    "text": "this is a very cool piece of Lego this is a piece of Lego and because of that you could take two of these and connect",
    "start": "706470",
    "end": "711840"
  },
  {
    "text": "them together to make an even bigger one right because they still have little bumps on it that's what I call the power",
    "start": "711840",
    "end": "716850"
  },
  {
    "text": "of composition competition is a great way to build big things some smaller things right so the functional",
    "start": "716850",
    "end": "723330"
  },
  {
    "text": "programming idea of composition is the very same thing so you have two",
    "start": "723330",
    "end": "730050"
  },
  {
    "text": "different functions and you want to connect them together to make a bigger function and this is where the railway analogy is really nice because it's",
    "start": "730050",
    "end": "736260"
  },
  {
    "text": "really obvious if it's bits of railway how do I connect these two function together well I literally take the output of one and plug it into the input",
    "start": "736260",
    "end": "742080"
  },
  {
    "text": "the other and now I have a new function so that's before and that's after now what's cool is this new function you",
    "start": "742080",
    "end": "751350"
  },
  {
    "text": "can't tell that was built from smaller functions I mean from your point of view this is just a function that turns apples into cherries and you know where",
    "start": "751350",
    "end": "759150"
  },
  {
    "text": "do the banana go right there the other function had bananas there are no more modern honours and this one so the fact you've got some sort of data hiding",
    "start": "759150",
    "end": "765270"
  },
  {
    "text": "abstraction going on that the Indus mauler pieces have to worry about the stuff but the bigger pieces don't but",
    "start": "765270",
    "end": "771390"
  },
  {
    "text": "then this is just another function and I could connect this to an if there's another function that consumed cherries as inputs and spat out pineapples or",
    "start": "771390",
    "end": "777120"
  },
  {
    "text": "something I could take this cherry emitting function and connect to that and make an even bigger function right",
    "start": "777120",
    "end": "782670"
  },
  {
    "text": "so the fact that you're using the same techniques at different scales is really nice so this composition is you can",
    "start": "782670",
    "end": "790470"
  },
  {
    "text": "build big things from small things composition all the way up so here's a little example let's say you",
    "start": "790470",
    "end": "796529"
  },
  {
    "text": "have a low-level operation like application in a string classic function you have a string as input the other",
    "start": "796529",
    "end": "802440"
  },
  {
    "text": "strings output you take a bunch of these low-level operations and you make like a service like an address validation",
    "start": "802440",
    "end": "807990"
  },
  {
    "text": "service that takes and dresses input and a validation results as output and",
    "start": "807990",
    "end": "813779"
  },
  {
    "text": "because I'm over 40 I'm going to use the word service if you're under 40 you can use the word micro service so you take",
    "start": "813779",
    "end": "821490"
  },
  {
    "text": "all these services or micro services and you combine them in to make two you know completely this support a use case or a",
    "start": "821490",
    "end": "827490"
  },
  {
    "text": "story what if you want to call it by updating your profile data in the database so you pass in some data and some stuff comes",
    "start": "827490",
    "end": "834600"
  },
  {
    "text": "out then you take all these use cases and let's say you're making a web application a web application is in fact",
    "start": "834600",
    "end": "841620"
  },
  {
    "text": "a function it has an input which is HTTP request and it has an output which is an",
    "start": "841620",
    "end": "847649"
  },
  {
    "text": "HTTP response so web applications are functions and so typically inside this",
    "start": "847649",
    "end": "853260"
  },
  {
    "text": "big function there's a some sort of branch a controller or a dispatcher or router where you look on it basically",
    "start": "853260",
    "end": "859589"
  },
  {
    "text": "based on what the input is you call one of the other functions inside and that's it so that's functional composition from",
    "start": "859589",
    "end": "866850"
  },
  {
    "text": "the ground up all the way to a big way about so it's kind of fractal sort of similar it's a bits it's not quite",
    "start": "866850",
    "end": "872070"
  },
  {
    "text": "fractal it sounds cool to call it fractals so I'll call it that so here is like here's like the internals of a web",
    "start": "872070",
    "end": "877290"
  },
  {
    "text": "app now obviously there's branching going on there is you know lots of little functions going on but the big",
    "start": "877290",
    "end": "883110"
  },
  {
    "text": "picture is still an input and an output and you know you literally can't build",
    "start": "883110",
    "end": "888720"
  },
  {
    "text": "bigger things or small things and if you ask of you know if you look at the functional programming web libraries",
    "start": "888720",
    "end": "894149"
  },
  {
    "text": "this is exactly how they do it so I have a whole talk about the power of composition also from LDC one other",
    "start": "894149",
    "end": "902040"
  },
  {
    "text": "thing I just want to point out which I'll be mentioning later on is that the arrows are all in the same direction the hours go from left to right there are no",
    "start": "902040",
    "end": "908940"
  },
  {
    "text": "loops there are no cycles that makes it easy to understand right now in",
    "start": "908940",
    "end": "916079"
  },
  {
    "text": "statically type functional programming we have things called types and types are just data and they can be",
    "start": "916079",
    "end": "923740"
  },
  {
    "text": "composed too so let me explain how that works in in a language like f-sharp or",
    "start": "923740",
    "end": "931089"
  },
  {
    "text": "high school or a Carol we have what's called algebraic type systems that's a",
    "start": "931089",
    "end": "936160"
  },
  {
    "text": "bit of jargon but if you replace the word algebraic with composable that",
    "start": "936160",
    "end": "941199"
  },
  {
    "text": "makes a lot more sense and it's actually exactly what it is so a composable type system what does that mean it makes you",
    "start": "941199",
    "end": "946629"
  },
  {
    "text": "it means you can build bigger types some smaller types that's what composition is just like Lego so in a composable type system",
    "start": "946629",
    "end": "954129"
  },
  {
    "text": "there are actually typically two ways to build a new type one is to end them together whatever that means and the",
    "start": "954129",
    "end": "960999"
  },
  {
    "text": "other way is to all of them together now I'm going to explain what that means in a second but something to point out is",
    "start": "960999",
    "end": "968019"
  },
  {
    "text": "the composition of types is only possible because in functional programming data and behavior are kept",
    "start": "968019",
    "end": "973990"
  },
  {
    "text": "separate if you have the data and the behavior in the same thing in an object in object when to programming it's",
    "start": "973990",
    "end": "980589"
  },
  {
    "text": "really hard to do certain kinds of composition because when you combine two objects you know which method should",
    "start": "980589",
    "end": "986050"
  },
  {
    "text": "belong to which objects and so on so it just becomes tricky but if it's just data it's quite easy to do so what do I",
    "start": "986050",
    "end": "993850"
  },
  {
    "text": "mean by composing with and well just like when we use English and we talked",
    "start": "993850",
    "end": "999009"
  },
  {
    "text": "about doing n when I say I want a fruit salad and it's an apple and a banana and",
    "start": "999009",
    "end": "1004559"
  },
  {
    "text": "a cherry there's the ingredients I'm using the word and right and this is you",
    "start": "1004559",
    "end": "1011220"
  },
  {
    "text": "might call a record type or a tuple or a pair or struts you know this is a really really common thing in in any kind of",
    "start": "1011220",
    "end": "1018899"
  },
  {
    "text": "programming language so here is the Neph sharp version of this we're saying a fruit salad is an apple and a banana and",
    "start": "1018899",
    "end": "1025110"
  },
  {
    "text": "a cherry because they're all the fields have acquired right it's got three fields every single field has to be filled in okay so that's easy enough now",
    "start": "1025110",
    "end": "1034380"
  },
  {
    "text": "the other way of composing is with or and again just like in English we would say if I want to snack I have an apple",
    "start": "1034380",
    "end": "1040649"
  },
  {
    "text": "or a banana or a cherry so one of the three choices not all at the same time",
    "start": "1040649",
    "end": "1045659"
  },
  {
    "text": "just one of three and an f-sharp we use the vertical bar like this so we say a",
    "start": "1045659",
    "end": "1051030"
  },
  {
    "text": "snack is an apple or a banana or a cherry you can think of this as like a glorified enum you can think of it as",
    "start": "1051030",
    "end": "1058270"
  },
  {
    "text": "like a snack fast with three subclasses not quite like any of those but that's the kind of idea behind it it's it's a",
    "start": "1058270",
    "end": "1065080"
  },
  {
    "text": "quick way of making a choice between different things so I call these choice types inertia actually call",
    "start": "1065080",
    "end": "1071500"
  },
  {
    "text": "discriminated unions you can also call them some types co-products if you fancy right so let's look at how you actually",
    "start": "1071500",
    "end": "1077740"
  },
  {
    "text": "build real stuff with I mean it sounds very nice in theory but how do you actually use it in practice so here is a",
    "start": "1077740",
    "end": "1083770"
  },
  {
    "text": "real-world example of building a payment system let's say that you take three",
    "start": "1083770",
    "end": "1088960"
  },
  {
    "text": "forms of payment and let's say cash and PayPal and credit cards now for cash you",
    "start": "1088960",
    "end": "1095650"
  },
  {
    "text": "don't need any extra information for PayPal you need an email address and for credit cards you need card type and a",
    "start": "1095650",
    "end": "1101470"
  },
  {
    "text": "card number or an expiration date and all the other stuff so how would you",
    "start": "1101470",
    "end": "1106720"
  },
  {
    "text": "implement this so how would you model this if you're going to write code to implement this requirement so I think it",
    "start": "1106720",
    "end": "1114520"
  },
  {
    "text": "depends on whether you're an i/o person or a functional programmer now if you're an hour person you would probably",
    "start": "1114520",
    "end": "1120400"
  },
  {
    "text": "implement it as some sort of abstract base class or an interface called a",
    "start": "1120400",
    "end": "1125470"
  },
  {
    "text": "payment method and you'd have all the other things kind of inherit from that interface or implement that interface on",
    "start": "1125470",
    "end": "1131710"
  },
  {
    "text": "here from that base class so have a cash class I'd have a PayPal class would have a car class and I think most people",
    "start": "1131710",
    "end": "1138130"
  },
  {
    "text": "would probably do it this way if you and a person so let me show you a different way if you're not on our person let me",
    "start": "1138130",
    "end": "1144220"
  },
  {
    "text": "show you a completely different way of doing this so in functional programming",
    "start": "1144220",
    "end": "1149290"
  },
  {
    "text": "I would probably build it up like this building up a big thing from a bunch of small things the composition way so we",
    "start": "1149290",
    "end": "1156100"
  },
  {
    "text": "start off by defining some primitives because in domain modeling people really",
    "start": "1156100",
    "end": "1161440"
  },
  {
    "text": "real people do not use words like strings and floats they use you know email dresses and card numbers now they",
    "start": "1161440",
    "end": "1167440"
  },
  {
    "text": "might be represented by string but that's not in the domain model you know those kinds of words should never exist",
    "start": "1167440",
    "end": "1174010"
  },
  {
    "text": "so he have a thing called an email address we have a thing called a card number which are our primitives and then",
    "start": "1174010",
    "end": "1179830"
  },
  {
    "text": "we say well a card type that's a choice between a Visa and MasterCard so it's a vertical bar or",
    "start": "1179830",
    "end": "1185670"
  },
  {
    "text": "and a credit card information is a car type and a card number so that's an an",
    "start": "1185670",
    "end": "1191070"
  },
  {
    "text": "type or a record type so we've got a choice using or and an a record using and okay",
    "start": "1191070",
    "end": "1197430"
  },
  {
    "text": "so let's keep going let's build up something on top that this build our payment method um so we said a payment",
    "start": "1197430",
    "end": "1203070"
  },
  {
    "text": "method is cash or PayPal or credit card so we say Cash or PayPal or credit card",
    "start": "1203070",
    "end": "1211200"
  },
  {
    "text": "so it's a choice type and for the different cases there's different information to go along with each case",
    "start": "1211200",
    "end": "1216990"
  },
  {
    "text": "so in the cash case there's no information needed for the PayPal case we need an email address and for the credit card case we need the credit card",
    "start": "1216990",
    "end": "1223530"
  },
  {
    "text": "information so that's a choice type but we don't have to stop because we can keep building and building just note",
    "start": "1223530",
    "end": "1228720"
  },
  {
    "text": "with a Lego you can keep adding and adding and adding alright the composition you can just keep going so let's keep going let's do",
    "start": "1228720",
    "end": "1234330"
  },
  {
    "text": "some more stuff let's define a payment amount and again I'm not going to use the word decimal or float I'm going to",
    "start": "1234330",
    "end": "1239700"
  },
  {
    "text": "use payment around that's the word they use currency is say euros or dollars so it's a choice and then we can keep going",
    "start": "1239700",
    "end": "1247080"
  },
  {
    "text": "say a payment is an amount and a currency and a method so and and and",
    "start": "1247080",
    "end": "1253230"
  },
  {
    "text": "that's a record type so that's how you build a big domain for a bunch of small things so we can keep going and going",
    "start": "1253230",
    "end": "1260310"
  },
  {
    "text": "but that's basically our you know a way that you can build a big domain for a bunch of smaller types so that's the",
    "start": "1260310",
    "end": "1265770"
  },
  {
    "text": "composition in the time system yeah I think it's very very cool right so let's",
    "start": "1265770",
    "end": "1271890"
  },
  {
    "text": "apply some of these functional programming principles to transaction scripts so transaction script is a bit",
    "start": "1271890",
    "end": "1278820"
  },
  {
    "start": "1276000",
    "end": "1276000"
  },
  {
    "text": "of a mouthful so I'm gonna call them workflows and said so a workflow is some business operation that adds value to",
    "start": "1278820",
    "end": "1284550"
  },
  {
    "text": "the business okay now you can call it a transaction you can call it a story a use case lots of different words for",
    "start": "1284550",
    "end": "1291660"
  },
  {
    "text": "these things but I just going to use the word workflow because it's kind of a neutral word so workflows are triggered something happens in the outside world",
    "start": "1291660",
    "end": "1297330"
  },
  {
    "text": "that triggers your workflow to happen and typically the workflow if it needs to tell somebody else that I did",
    "start": "1297330",
    "end": "1303660"
  },
  {
    "text": "something it emits some events at the other end saying hey everybody I just you know took payment for this order now",
    "start": "1303660",
    "end": "1309060"
  },
  {
    "text": "you can ship it or whatever so that's how it communicates with the outside world and if you these events what",
    "start": "1309060",
    "end": "1316350"
  },
  {
    "text": "triggers things and what comes out the other side these events are actually the glue in a",
    "start": "1316350",
    "end": "1321480"
  },
  {
    "text": "business like something happens that triggers some workflow the workflow says I just finished something will that",
    "start": "1321480",
    "end": "1327360"
  },
  {
    "text": "trigger something else and then they say I just finished something that triggered something else how how are the different business processes are connect my events",
    "start": "1327360",
    "end": "1333269"
  },
  {
    "text": "is really really important and if you're not familiar with it I would check out event storming there's a process for",
    "start": "1333269",
    "end": "1338490"
  },
  {
    "text": "determining what the business events are it's a it's a really excellent kind of like a hyped up agile way of get",
    "start": "1338490",
    "end": "1344789"
  },
  {
    "text": "everyone in the same room and discovering what these things are so how do we implement these workflows well",
    "start": "1344789",
    "end": "1352500"
  },
  {
    "start": "1348000",
    "end": "1348000"
  },
  {
    "text": "we're going to implement as a function a little bit of railway track right so as an input and output it Maps really well to functions and the inputs and the",
    "start": "1352500",
    "end": "1360510"
  },
  {
    "text": "outputs are going to be modeled by these composable types so when I say it takes",
    "start": "1360510",
    "end": "1366659"
  },
  {
    "text": "in a payment method and it spits out a completed order or something those things will be modeled by payment types",
    "start": "1366659",
    "end": "1372299"
  },
  {
    "text": "they're not going to be modeled by intz and strings we're going to be model modeling them with these nice composable types okay so I using our everything",
    "start": "1372299",
    "end": "1380429"
  },
  {
    "text": "we've learned about functional programming so far that's good and the other nice thing about functions is because they're composable it's really",
    "start": "1380429",
    "end": "1387809"
  },
  {
    "text": "easy to build a bigger workflow from a bunch of smaller ones and so you know in",
    "start": "1387809",
    "end": "1394260"
  },
  {
    "text": "a transaction screen a classic transaction script it's not at all modular it's just one thing after another but when you're doing functional",
    "start": "1394260",
    "end": "1400500"
  },
  {
    "text": "programming modularity is like built-in and as I say that functions are standalone you can't almost can't help",
    "start": "1400500",
    "end": "1405570"
  },
  {
    "text": "but have a modularity so it's really easy to build a workflow from a bunch of smaller pieces and so you have these",
    "start": "1405570",
    "end": "1411630"
  },
  {
    "text": "individual pieces you glue them together to make a bigger piece and that's all your workflow because each of these",
    "start": "1411630",
    "end": "1418260"
  },
  {
    "text": "components are standalone like I said they're not attached it's not methods in a class because they're standalone you",
    "start": "1418260",
    "end": "1423929"
  },
  {
    "text": "can use them anywhere so you could use them in different workflows different anything like but they're very completely standalone right so let's",
    "start": "1423929",
    "end": "1430769"
  },
  {
    "text": "talk about the maned of a design for people who are not familiar with",
    "start": "1430769",
    "end": "1435960"
  },
  {
    "text": "remainders in design it comes from this book by Eric Evans that was published just after PAA 2003 and his key insight",
    "start": "1435960",
    "end": "1445769"
  },
  {
    "text": "is to focus on the domain and the domain logic rather the technology developers love to talk about",
    "start": "1445769",
    "end": "1451840"
  },
  {
    "text": "technology the business does not care about technology they just want to deliver value so focus on that forget",
    "start": "1451840",
    "end": "1458259"
  },
  {
    "text": "about the technology it's not the most important thing now a July had a good start with this because in",
    "start": "1458259",
    "end": "1463450"
  },
  {
    "text": "agile rather than having the whole waterful thing you have the domain experts or the on-site customer or",
    "start": "1463450",
    "end": "1469059"
  },
  {
    "text": "whatever you want to call them and the development team talk to each other it'd be in the same room as much as possible",
    "start": "1469059",
    "end": "1474190"
  },
  {
    "text": "really interact rather than being detached you know and then the developer write some code and the code turns in",
    "start": "1474190",
    "end": "1480460"
  },
  {
    "text": "deliverable and you get feedback from the domain expert as frequently as possible so agile is very good it's all about fast feedback but there is one",
    "start": "1480460",
    "end": "1487989"
  },
  {
    "text": "little problem with agile which is that the code is often still a translation",
    "start": "1487989",
    "end": "1493979"
  },
  {
    "text": "from the developer's head so the code tends to be very developer centric now in domain driven design we",
    "start": "1493979",
    "end": "1502119"
  },
  {
    "text": "solve this problem by trying to create a shared mental model that everyone",
    "start": "1502119",
    "end": "1507489"
  },
  {
    "text": "involved in the product share Smith said everyone uses a Prada owner's subject matter experts domain experts on-site",
    "start": "1507489",
    "end": "1513970"
  },
  {
    "text": "customer whatever want to call them and in particular this shared language is used in the code as well okay so here we",
    "start": "1513970",
    "end": "1520960"
  },
  {
    "text": "have our code it is not a translation from the developers mental model into no",
    "start": "1520960",
    "end": "1526479"
  },
  {
    "text": "code it is the same code it's the same mental model as the domain experts are using so ideally the domain experts can",
    "start": "1526479",
    "end": "1535149"
  },
  {
    "text": "look at your code and give you feedback on it because it's the same you're using the same words in your code they're used to using and it becomes sort of",
    "start": "1535149",
    "end": "1542590"
  },
  {
    "text": "documentation as well so there you go your shared languages in the code so this is approach that I think is really",
    "start": "1542590",
    "end": "1549429"
  },
  {
    "text": "good for doing design we have the contribution from agile which is you rapid feedback the domain driven design",
    "start": "1549429",
    "end": "1555309"
  },
  {
    "text": "site is you have this shared mental model and you have the code also represent the shared mental model so if",
    "start": "1555309",
    "end": "1561460"
  },
  {
    "text": "you do that and when I've done this kind of thing projects tend to be quite successful so communicate the design in",
    "start": "1561460",
    "end": "1566710"
  },
  {
    "text": "the code is a key domain driven principle now at this point a lot of you are Polish saying yeah that's nice and",
    "start": "1566710",
    "end": "1574509"
  },
  {
    "text": "theory but can you actually make the code and the domain is that even possible because this is what source code looks",
    "start": "1574509",
    "end": "1581020"
  },
  {
    "text": "like we all know this is what's also I mean even the right even doesn't evoke this couldn't understand this way so",
    "start": "1581020",
    "end": "1586450"
  },
  {
    "text": "this is what people think source code looks like so let me show you what I think source code should look like now what you have to do is you have to guess",
    "start": "1586450",
    "end": "1592300"
  },
  {
    "text": "what domain this is this is f sharp code by the way you have to guess what domain",
    "start": "1592300",
    "end": "1599500"
  },
  {
    "text": "it is and what the various concepts are on what the key well the key concepts",
    "start": "1599500",
    "end": "1604630"
  },
  {
    "text": "what the shared language is okay well I think it's pretty obvious it's something do with cards because it says card game",
    "start": "1604630",
    "end": "1610720"
  },
  {
    "text": "right at the top these words down the side the suit and the rank and I think this is the shared language of the domain and they're right in front of you",
    "start": "1610720",
    "end": "1619170"
  },
  {
    "text": "so if I'm a new developer and coming on to this project and I don't know anything about cards you know let's say",
    "start": "1619170",
    "end": "1625140"
  },
  {
    "text": "if I just look at this code I can already have a good idea of what's important in the domain I don't have to go to 20 different files it's like",
    "start": "1625140",
    "end": "1632050"
  },
  {
    "text": "staring me in the face that's very nice so what they I mean and I you can actually get feedback from non",
    "start": "1632050",
    "end": "1637150"
  },
  {
    "text": "developers I mean I say to the devote to non develop as I say you know a vertical bar means a choice and that little star",
    "start": "1637150",
    "end": "1642190"
  },
  {
    "text": "means a pair and that's means a list and every time you see the arrow I call",
    "start": "1642190",
    "end": "1647230"
  },
  {
    "text": "these actions or workflows right so I'm gonna just go into that a bit so I'm gonna get on modeling workflows with a",
    "start": "1647230",
    "end": "1652750"
  },
  {
    "text": "function so to deal to deal some cards you start off with a deck you have a",
    "start": "1652750",
    "end": "1659440"
  },
  {
    "text": "deck in your hand and after you've dealt a card on the table you now have a card on the table",
    "start": "1659440",
    "end": "1665620"
  },
  {
    "text": "and you have it that in functional programming things immutable so you can't change deck you can't mutate the",
    "start": "1665620",
    "end": "1670810"
  },
  {
    "text": "deck all you have to do is make a clone of that deck with that card missing so you have a new copy of the deck or a",
    "start": "1670810",
    "end": "1676660"
  },
  {
    "text": "mute a version of their deck without that card anymore so that's the output is a new deck and a card on the table so",
    "start": "1676660",
    "end": "1684070"
  },
  {
    "text": "we can model this in an in a functional way saying all the input is a deck and the output is a pair you know you have",
    "start": "1684070",
    "end": "1690490"
  },
  {
    "text": "your deck and you have the card on the table and again if you want to pick up a card from the table the input is the",
    "start": "1690490",
    "end": "1697450"
  },
  {
    "text": "hand that I have and there's a card on the table that's everything I need to do this function and if I need something else",
    "start": "1697450",
    "end": "1702910"
  },
  {
    "text": "that would be another parameter and then after I've picked up the card the card on the table is missing and it's no",
    "start": "1702910",
    "end": "1708880"
  },
  {
    "text": "longer there and I have a new version of my and again I have to I thought when you take my hand I have to make a copy of",
    "start": "1708880",
    "end": "1714280"
  },
  {
    "text": "the hand with this new card added so that's how you would model picking up a cardi at the input there's two",
    "start": "1714280",
    "end": "1719440"
  },
  {
    "text": "parameters in the input and there's one parameter on the output or one thing on the output okay so here's our domain do",
    "start": "1719440",
    "end": "1726940"
  },
  {
    "text": "you think this is a reason about of code to write to capture domain I think yes",
    "start": "1726940",
    "end": "1732220"
  },
  {
    "text": "is fits on one page which is really nice in practice you think well this is a",
    "start": "1732220",
    "end": "1737650"
  },
  {
    "text": "simple domain but I've worked on really complicated it means like tax and you know four or five pages maybe and this",
    "start": "1737650",
    "end": "1743800"
  },
  {
    "text": "is just like one slight it's amazing the process of doing this is actually a great way to get everyone on the same page in a business even though people",
    "start": "1743800",
    "end": "1750820"
  },
  {
    "text": "often you have people who are different teams and they actually don't even communicate and doing this actually forces them to get everything on there",
    "start": "1750820",
    "end": "1756310"
  },
  {
    "text": "getting them on the same page do you think a non programmer could understand this so when I was doing the workshop",
    "start": "1756310",
    "end": "1762520"
  },
  {
    "text": "and I was like typing this up somebody said some of the product manager not not a developer said well",
    "start": "1762520",
    "end": "1769120"
  },
  {
    "text": "this is great this is a really nice documentation but where's the code and you know it's not really obviously this",
    "start": "1769120",
    "end": "1774820"
  },
  {
    "text": "is actually compatible code which is kind of cool do you think non-programmers could provide useful",
    "start": "1774820",
    "end": "1779950"
  },
  {
    "text": "feedback to this so there is actually a deliberate mistake and you want to see what the mistake is ace is missing there",
    "start": "1779950",
    "end": "1787030"
  },
  {
    "text": "you go very good now if you're a non programmer I think you could still give that feedback I mean again in my",
    "start": "1787030",
    "end": "1794050"
  },
  {
    "text": "experience like in is there some kind of complicated cases they can provide information you forgot to handle this particular case because there's no code",
    "start": "1794050",
    "end": "1800230"
  },
  {
    "text": "there's no implementation here this is kind of we want to think of it as designing the interface for the domain",
    "start": "1800230",
    "end": "1805830"
  },
  {
    "text": "so there's a reason why it's called domain driven because it's not database driven right there's no foreign keys",
    "start": "1805830",
    "end": "1811960"
  },
  {
    "text": "there's no joins there's no you know tables anything it's all about the",
    "start": "1811960",
    "end": "1817030"
  },
  {
    "text": "terrain everything here is about the domain and the domain driven design people call this persistence ignorant",
    "start": "1817030",
    "end": "1823510"
  },
  {
    "text": "meaning you you don't know anything about how this gets stored now obviously in a real app you do have to store this",
    "start": "1823510",
    "end": "1829690"
  },
  {
    "text": "somewhere in a database or file or whatever but that's not part of the main that logic of how you store something",
    "start": "1829690",
    "end": "1836020"
  },
  {
    "text": "you know it's important it's part of the implementation but it's not part of the domain logic right so it's we're",
    "start": "1836020",
    "end": "1842560"
  },
  {
    "text": "important to keep them separate also it's not our driven there no base",
    "start": "1842560",
    "end": "1848619"
  },
  {
    "text": "classes there are management classes no factories if you have two different concepts like a hand and a deck they",
    "start": "1848619",
    "end": "1855039"
  },
  {
    "text": "might have the same representation as a list of cards you model them as something completely different you don't have a base class",
    "start": "1855039",
    "end": "1860320"
  },
  {
    "text": "they both inherit from right that's not the way how the real world works so in",
    "start": "1860320",
    "end": "1865869"
  },
  {
    "text": "the real world you have these words these concepts and in the code you have the same concepts that's the main during",
    "start": "1865869",
    "end": "1871749"
  },
  {
    "text": "design so the domain has to be in sync with the real world all right there's no",
    "start": "1871749",
    "end": "1876970"
  },
  {
    "text": "translation you're not translating what the what the experts think into your code you try and use exactly the same",
    "start": "1876970",
    "end": "1882820"
  },
  {
    "text": "words so that's the right way of doing and now what you shouldn't do is not use any kind of programmer jargon let's see",
    "start": "1882820",
    "end": "1888940"
  },
  {
    "text": "you need something to manage all these different players so you have a player controller or player manager and then you say well the deck and the hand as",
    "start": "1888940",
    "end": "1895479"
  },
  {
    "text": "soon as let's create a base class and let's create an abstract card proxy factory mean or something play these",
    "start": "1895479",
    "end": "1900940"
  },
  {
    "text": "these words do not belong in the domain right now they may in the implementation obviously the implementation can get",
    "start": "1900940",
    "end": "1907749"
  },
  {
    "text": "tricky but in the domain side of things the interface side of things they should not exist okay so if you're doing if you",
    "start": "1907749",
    "end": "1913330"
  },
  {
    "text": "see those kinds of words in your domain you're doing it wrong so what I like",
    "start": "1913330",
    "end": "1918729"
  },
  {
    "text": "about this is the design and the code or the same thing typically this is the first file you know like an f-sharp",
    "start": "1918729",
    "end": "1923919"
  },
  {
    "text": "project and the rest the code has to conform to this so this is the design it's sort of the interface for the rest",
    "start": "1923919",
    "end": "1930489"
  },
  {
    "text": "of the code that has to implement it but it always stays stays and sync you never have this problem where a UML diagram is",
    "start": "1930489",
    "end": "1936009"
  },
  {
    "text": "out of sync or a word document is out of sync you know the code and the design and same thing so this is X is",
    "start": "1936009",
    "end": "1942129"
  },
  {
    "text": "executable code this is not pseudocode right so communicating the design and the code is one of the key principles",
    "start": "1942129",
    "end": "1947470"
  },
  {
    "text": "and I think we did that quite nicely right so there's one other thing I want",
    "start": "1947470",
    "end": "1953229"
  },
  {
    "text": "to talk about in domain design there's lots and lots of jargon unfortunately in the main design if you read the blue",
    "start": "1953229",
    "end": "1959289"
  },
  {
    "text": "book sadly there's a lot of jargon and they really shouldn't be talking because it's meant to be user friendly but there",
    "start": "1959289",
    "end": "1965799"
  },
  {
    "text": "is a useful concept called bounded contexts and I think it's extremely useful",
    "start": "1965799",
    "end": "1970960"
  },
  {
    "text": "concept for us to think about when you when you're implementing something in your domain model or your code you know",
    "start": "1970960",
    "end": "1977740"
  },
  {
    "text": "there's naturally kind of areas of things where the similar functionality like if you've got an e-commerce site",
    "start": "1977740",
    "end": "1983890"
  },
  {
    "text": "there's an order taking part there's a shipping part as a billing part River so the DVD people call these components a",
    "start": "1983890",
    "end": "1991060"
  },
  {
    "text": "bounded context and it's really really important to think about what these",
    "start": "1991060",
    "end": "1997060"
  },
  {
    "text": "things are and how they are defined the boundaries are very important that's why",
    "start": "1997060",
    "end": "2002880"
  },
  {
    "text": "they called bounded context so a context right means a specialized piece of",
    "start": "2002880",
    "end": "2009480"
  },
  {
    "start": "2005000",
    "end": "2005000"
  },
  {
    "text": "knowledge common language within that area and if you take it out of context it means something different or it's",
    "start": "2009480",
    "end": "2015600"
  },
  {
    "text": "unusable and I've seen situations where often you try and have maybe a company-wide project to define what a",
    "start": "2015600",
    "end": "2022530"
  },
  {
    "text": "customer is and the marketing people have a definition of a customer and the billing people the finance people have a",
    "start": "2022530",
    "end": "2029130"
  },
  {
    "text": "definition of customer and they're incompatible definitions because you know they may use the same word but they're different you know marketing",
    "start": "2029130",
    "end": "2035220"
  },
  {
    "text": "people it's all about sparing you and billing finance be was all about you know our new money and stuff features",
    "start": "2035220",
    "end": "2040500"
  },
  {
    "text": "very different so just because they use the same word doesn't mean it's the same thing so the context is really important and it's where it's just you know be",
    "start": "2040500",
    "end": "2048120"
  },
  {
    "text": "very aware to try and have a global context that everything fits into normally in a business there's specialized knowledge specialized",
    "start": "2048120",
    "end": "2054450"
  },
  {
    "text": "context and if you take it out of that context you end up trouble and the boundary boundaries are very important just like with human relations relations",
    "start": "2054450",
    "end": "2061138"
  },
  {
    "text": "between software components need to have boundaries otherwise you're in trouble",
    "start": "2061139",
    "end": "2066240"
  },
  {
    "text": "and one of the reasons for having boundaries is to make them autonomous because if you don't have a boundary and",
    "start": "2066240",
    "end": "2072898"
  },
  {
    "text": "everything's gonna mush together you always find that if you change something over here it's gonna break something",
    "start": "2072899",
    "end": "2078510"
  },
  {
    "text": "over here and if you have a boundary a wall between them you know you can",
    "start": "2078510",
    "end": "2083638"
  },
  {
    "text": "freely change this bit and not have to worry about the other bit changes it's a bit like if you're running a three-legged race you know if you're",
    "start": "2083639",
    "end": "2088950"
  },
  {
    "text": "tied to somebody at the ankle something it's really hard to run even if you're the world's best athlete you're still",
    "start": "2088950",
    "end": "2094378"
  },
  {
    "text": "not going to run very fast if you separate people something run independently they do much better so boundaries keep you focused and they",
    "start": "2094379",
    "end": "2101170"
  },
  {
    "text": "stop doing stuff you're doing scope creep really really important so here's about a context and we're gonna middle",
    "start": "2101170",
    "end": "2107680"
  },
  {
    "text": "our workflows as little things in our bounded context so banner context is",
    "start": "2107680",
    "end": "2113140"
  },
  {
    "text": "really from our modeling point of view just a set of related workflows things which belong together",
    "start": "2113140",
    "end": "2119760"
  },
  {
    "text": "because they have something in common they use the same vocabulary they use the same terminology now if you have a",
    "start": "2119760",
    "end": "2124840"
  },
  {
    "text": "workflow that doesn't belong in the span of context well and you stick in another one and it's really easy to do because there's no dependencies they're",
    "start": "2124840",
    "end": "2130930"
  },
  {
    "text": "standalone things right because we're implementing workflows as functions so",
    "start": "2130930",
    "end": "2137110"
  },
  {
    "text": "they're really easy to move around is really easy to refactor if you make a mistake right so we're finally ready to",
    "start": "2137110",
    "end": "2144810"
  },
  {
    "text": "reinvent the transaction script so we're going to take two parts the functional",
    "start": "2144810",
    "end": "2150940"
  },
  {
    "start": "2148000",
    "end": "2148000"
  },
  {
    "text": "programming part is to implement transactions as functions and then we're",
    "start": "2150940",
    "end": "2158860"
  },
  {
    "text": "going to build them from components using composition so rather than just having a big mass of stuff in a big file",
    "start": "2158860",
    "end": "2164860"
  },
  {
    "text": "we can break it down into little pieces and build a logical composition now",
    "start": "2164860",
    "end": "2170380"
  },
  {
    "text": "what's interesting about it is if you break it into let's say you have a little component in your in your thing",
    "start": "2170380",
    "end": "2176320"
  },
  {
    "text": "and you only use it in this one translation script that's fine it's not a problem but if you ever do want to use",
    "start": "2176320",
    "end": "2182080"
  },
  {
    "text": "it in another translation script because the function is a standalone because all the parameters are passed in because they have no dependencies on global",
    "start": "2182080",
    "end": "2188170"
  },
  {
    "text": "State it's really easy to reuse functions in different contexts now the",
    "start": "2188170",
    "end": "2194410"
  },
  {
    "text": "functional domain modeling contribution which I just showed you is using composable types to create a rich domain",
    "start": "2194410",
    "end": "2200860"
  },
  {
    "text": "model now we said the beginning that one of the problems with transaction scripts is they don't have a rich domain model",
    "start": "2200860",
    "end": "2206350"
  },
  {
    "text": "it's just a bunch of strings and intz and database calls so if you do this nice domain what anything you can actually get these really nice puzzle",
    "start": "2206350",
    "end": "2213370"
  },
  {
    "text": "types yet the individual actions are still standalone if you have an",
    "start": "2213370",
    "end": "2219430"
  },
  {
    "text": "object-oriented domain idle where you have a lot of objects and they all talk to each other it's really hard to pull",
    "start": "2219430",
    "end": "2225490"
  },
  {
    "text": "out the individual methods because everything's sort of tangled up but in this kind of fashion or domain model you",
    "start": "2225490",
    "end": "2230830"
  },
  {
    "text": "can still have the rich the main model but the individual actions because their model has functions again they are standalone",
    "start": "2230830",
    "end": "2236660"
  },
  {
    "text": "things and you can refactor them pull them out put them somewhere else much more easily and again we're going to",
    "start": "2236660",
    "end": "2244519"
  },
  {
    "text": "steal this idea of bounded context as a way of grouping and managing workflows so everything in a particular plan of",
    "start": "2244519",
    "end": "2249920"
  },
  {
    "text": "contexts has the has the same kind of context the same vocabulary right so",
    "start": "2249920",
    "end": "2256880"
  },
  {
    "start": "2256000",
    "end": "2256000"
  },
  {
    "text": "let's go and look at the pros and cons that I talked to her at the very beginning I said one of the pros about",
    "start": "2256880",
    "end": "2262309"
  },
  {
    "text": "transaction scripts they're really easy to understand and they're super focused because everything in them is relevant",
    "start": "2262309",
    "end": "2267380"
  },
  {
    "text": "that's good and then I said some of the cons where they are hard to modify hard to evolve hard to reuse there wasn't a",
    "start": "2267380",
    "end": "2275779"
  },
  {
    "text": "rich domain model and they were hard to test so all these downside so I think this is one of the reasons why I translation scripts have become out of fashion but",
    "start": "2275779",
    "end": "2283670"
  },
  {
    "text": "let's see if we can solve these problems so I'm gonna make a number of claims this is what I personally think of",
    "start": "2283670",
    "end": "2289519"
  },
  {
    "text": "course just like in unfortunately given that software is like a trillion dollar business we have so little hard evidence",
    "start": "2289519",
    "end": "2295970"
  },
  {
    "text": "for anything is really shocking actually I'd be quite happy to have like you know double-blind tests all this stuff but",
    "start": "2295970",
    "end": "2302240"
  },
  {
    "text": "literally people just make stuff up and this is a conference that kind of conference where people do make stuff up and say that's my way is the best way of",
    "start": "2302240",
    "end": "2308690"
  },
  {
    "text": "doing something so that's exactly what I'm going to say I'm gonna say my way is the best way of doing something so I'm going to claim that doing this approach",
    "start": "2308690",
    "end": "2314599"
  },
  {
    "text": "is really good so I'm going to say first of all that there's a functional style translation scripts are actually easier",
    "start": "2314599",
    "end": "2320359"
  },
  {
    "text": "to comprehend than an object model okay so here's a functional functional",
    "start": "2320359",
    "end": "2326450"
  },
  {
    "text": "pipeline or transaction script all the arrows go left to right there are no backward arrows makes it much I think",
    "start": "2326450",
    "end": "2334009"
  },
  {
    "text": "that's really really I mean people really underestimate how important this is I think makes it really easy to understand and again if you have it like",
    "start": "2334009",
    "end": "2339559"
  },
  {
    "text": "a whole web framework or something I have a whole web app implemented as a function you can always follow the data",
    "start": "2339559",
    "end": "2346220"
  },
  {
    "text": "through left to right and I can't and I can't stress how easy that it makes",
    "start": "2346220",
    "end": "2353509"
  },
  {
    "text": "debugging so even with the branches sis yeah there's branches but the branch is all going the same direction",
    "start": "2353509",
    "end": "2359980"
  },
  {
    "text": "so that's awesome now in an object-oriented workflow you have this kind of request response model not input",
    "start": "2359980",
    "end": "2366680"
  },
  {
    "start": "2362000",
    "end": "2362000"
  },
  {
    "text": "output but request response so I took there's a particular object I send a request to and I get a response from them that object will then talk to",
    "start": "2366680",
    "end": "2372680"
  },
  {
    "text": "somebody else that object will then talk to somebody else who'll talk to somebody else or something else and there may be a little bit of back and forth and",
    "start": "2372680",
    "end": "2378559"
  },
  {
    "text": "eventually if they go back to the main object and the main object gives me back the response that I asked for and it's",
    "start": "2378559",
    "end": "2384200"
  },
  {
    "text": "easy to accidentally make this very complex now if you do it right just to",
    "start": "2384200",
    "end": "2389660"
  },
  {
    "text": "just a you know I mean I'm not hating on oh well because I actually used to do a lot of small talk and small talk is",
    "start": "2389660",
    "end": "2395690"
  },
  {
    "text": "awesome and if you do it right it's very nice but it's very very easy to make the overly complex because the arrows go in",
    "start": "2395690",
    "end": "2402589"
  },
  {
    "text": "all directions trying to chase down where you're going can be really hard now what's interesting when we did",
    "start": "2402589",
    "end": "2408140"
  },
  {
    "text": "micro-services we do not design microsomes this way if you saw a microservice that taught another michael",
    "start": "2408140",
    "end": "2414049"
  },
  {
    "text": "service which then taught to the original michael service which talked to third microservice that one could be sidon bad design all right that would be",
    "start": "2414049",
    "end": "2420680"
  },
  {
    "text": "really bad and even for Microsoft design and yet we design our stuff that way so",
    "start": "2420680",
    "end": "2426680"
  },
  {
    "text": "I would take the same principles and apply them to our design to try and have a linear one-directional model now this",
    "start": "2426680",
    "end": "2433250"
  },
  {
    "text": "is a graph that I built myself by analyzing the dependencies in a c-sharp",
    "start": "2433250",
    "end": "2438980"
  },
  {
    "text": "project and there are easily a couple hundred classes every little line is a",
    "start": "2438980",
    "end": "2445789"
  },
  {
    "text": "dependency from one class to another class meaning that class reference that hull-loss and what you can't see first",
    "start": "2445789",
    "end": "2452359"
  },
  {
    "text": "of all you can see it's really complicated and what you can't see is that the arrows go in all directions and",
    "start": "2452359",
    "end": "2458150"
  },
  {
    "text": "you actually get slightly dependencies now cyclic dependencies are evil I have",
    "start": "2458150",
    "end": "2463279"
  },
  {
    "text": "a whole talk about that they're really really evil because you they all tie together you can't pull a piece out because it depends another piece which",
    "start": "2463279",
    "end": "2469220"
  },
  {
    "text": "depend on peas literally when you do that you have no more layering you know you have no more top to bottom they're all in one layer everything that depends",
    "start": "2469220",
    "end": "2476029"
  },
  {
    "text": "another circle you might as well make it one object because you're not getting any benefit",
    "start": "2476029",
    "end": "2481619"
  },
  {
    "text": "so now this is interesting this is this f-sharp project so this is C sharp and F",
    "start": "2481619",
    "end": "2488130"
  },
  {
    "text": "sharp so the same dotnet underneath the F sharp project basically exactly the same functionality but as you can see",
    "start": "2488130",
    "end": "2495779"
  },
  {
    "text": "there are a lot less components in it and what you can't also see is that all",
    "start": "2495779",
    "end": "2500970"
  },
  {
    "text": "hours are going left to right so even if you you know if you look the zoom in you",
    "start": "2500970",
    "end": "2506190"
  },
  {
    "text": "can actually follow the code all the way through so yes this you know that some some pieces have big dependencies but there's a lot fewer than there were",
    "start": "2506190",
    "end": "2512369"
  },
  {
    "text": "stuff so I'm another claimant when I make is that F P style transactions is",
    "start": "2512369",
    "end": "2520559"
  },
  {
    "text": "are much more resistant to bloat so here is an our interface that I sort of seen",
    "start": "2520559",
    "end": "2528480"
  },
  {
    "text": "what I call I repository and it's got an insert methods and then later on they've",
    "start": "2528480",
    "end": "2534809"
  },
  {
    "text": "added an insert async methods as you know and then later on the editor no one a delete method and a delete async and",
    "start": "2534809",
    "end": "2540660"
  },
  {
    "text": "an update and update a sync and then maybe I commit changes so they can support something else and then commit",
    "start": "2540660",
    "end": "2545819"
  },
  {
    "text": "changes async because that's a new thing they need support and then there's some way of querying but then maybe you want to clear by key and you query by filter",
    "start": "2545819",
    "end": "2552480"
  },
  {
    "text": "and then you query by some sort of specification object and then you want to Mai's it because the sequel is too",
    "start": "2552480",
    "end": "2558119"
  },
  {
    "text": "slow so you might have contains method and then you want to optimize that too so you have a count method and then you",
    "start": "2558119",
    "end": "2564539"
  },
  {
    "text": "want to realize that you're pulling too much back from the data so you have a summary record that you pull back instead of all of it and then you need a",
    "start": "2564539",
    "end": "2570509"
  },
  {
    "text": "version two that's on record because you need to be back compatible with the previous one oh and by the way let's change the customer password while we're",
    "start": "2570509",
    "end": "2576359"
  },
  {
    "text": "at it oh and let's have a backward version of that to version two of the passwords and that's accidentally for admin purposes",
    "start": "2576359",
    "end": "2582839"
  },
  {
    "text": "for testing purposes let's have a function called a method called delete all those and the day baseball that's",
    "start": "2582839",
    "end": "2589140"
  },
  {
    "text": "great because that could never possibly go wrong that would never be missed accidentally you know only you only",
    "start": "2589140",
    "end": "2594329"
  },
  {
    "text": "supposed to use it in the test environment just promise promise me you'll never accidentally call it in the",
    "start": "2594329",
    "end": "2599759"
  },
  {
    "text": "production environment and then here's a launch missiles because we really want to cover every possible thing and of course you need to backward-compatible",
    "start": "2599759",
    "end": "2606079"
  },
  {
    "text": "launch missiles version two so this is the kind of thing obviously this is kind of silly but I have seen interfaces with",
    "start": "2606079",
    "end": "2613079"
  },
  {
    "text": "like thirty forty methods on it right so what the problem is here is that you have",
    "start": "2613079",
    "end": "2618260"
  },
  {
    "text": "this interface that's trying to support every possible workflow right it's",
    "start": "2618260",
    "end": "2623810"
  },
  {
    "text": "trying to support all the possible things you could do with them with a customer or whatever it is here you're trying to yeah maybe want to insert it",
    "start": "2623810",
    "end": "2629600"
  },
  {
    "text": "maybe one delete it maybe want to change the password maybe you want to launch the missiles I don't know but you're trying to support it all in one",
    "start": "2629600",
    "end": "2634640"
  },
  {
    "text": "interface and you know we have a hook the whole principle in our design",
    "start": "2634640",
    "end": "2639680"
  },
  {
    "text": "interface segregation principle don't do that you know don't make people depend on things they don't use but it's even",
    "start": "2639680",
    "end": "2646490"
  },
  {
    "text": "even though we have this principle it still happens anyway because it kind of there's a kind of natural entropy where",
    "start": "2646490",
    "end": "2652640"
  },
  {
    "text": "we just things kind of get bigger and bigger it's just easy to stick it in another class trying to another interface rather than making whole new thing so you know I think Jeff Goldblum",
    "start": "2652640",
    "end": "2662270"
  },
  {
    "text": "had it here you know don't just do it just because you can do it think about whether you should do now",
    "start": "2662270",
    "end": "2668270"
  },
  {
    "text": "one of the nice things about the functional thing is that you don't have",
    "start": "2668270",
    "end": "2673510"
  },
  {
    "text": "loads because a transaction square only has what it needs to do its job it's",
    "start": "2673510",
    "end": "2678920"
  },
  {
    "text": "really hard to have plugs because why would you even bother to write a method that's not needed for this transaction script you wouldn't your mother now if",
    "start": "2678920",
    "end": "2685940"
  },
  {
    "text": "another translation script needs another method alright in that one but don't write it in this one this one they tend",
    "start": "2685940",
    "end": "2691700"
  },
  {
    "text": "to be very very focused very very isolated on these things they only need what they need so you don't need to have",
    "start": "2691700",
    "end": "2697760"
  },
  {
    "text": "things like innovation interface segregation principle and the agony and all that stuff because it's kind of there's a natural tendency you kind of",
    "start": "2697760",
    "end": "2704660"
  },
  {
    "text": "the pit of success you fall down into not doing something well then having to have in your mind it's to do it so that's kind of nice so every part in a",
    "start": "2704660",
    "end": "2711200"
  },
  {
    "text": "transaction script tends to be relevant you get that interface segregation principle sort for free and if you do",
    "start": "2711200",
    "end": "2717020"
  },
  {
    "text": "want to remove something let's say you see something is no longer relevant you can remove it because it's these are autonomous you if I remove from this",
    "start": "2717020",
    "end": "2723020"
  },
  {
    "text": "transaction script I guarantee I haven't broken anything else all right we could unlike if I remove a method from a class",
    "start": "2723020",
    "end": "2730700"
  },
  {
    "text": "who knows what people you're depending on that method you know so you have to do you have to follow all the users of the method and it you know et cetera",
    "start": "2730700",
    "end": "2737000"
  },
  {
    "text": "cetera so right another claim we're going to have which is that you can modify these things with confidence now",
    "start": "2737000",
    "end": "2744080"
  },
  {
    "text": "again if you look at the COBOL code or the Java code kind of transaction scripts you often",
    "start": "2744080",
    "end": "2750400"
  },
  {
    "text": "have very worried about modifying things but here is a version one of the",
    "start": "2750400",
    "end": "2755890"
  },
  {
    "text": "workflow and then I'm going to replace that component with version 2 now I feel",
    "start": "2755890",
    "end": "2762130"
  },
  {
    "text": "confident about that for a couple of reasons first of all when I place a piece of the pipeline I haven't touched",
    "start": "2762130",
    "end": "2768849"
  },
  {
    "text": "the rest of the code I'm just replacing that one piece so I'm a lot more confident than trying to mess with a lot",
    "start": "2768849",
    "end": "2774400"
  },
  {
    "text": "of code I'm just missing one little piece that's good and the other thing is the inputs and outputs that I'm using a",
    "start": "2774400",
    "end": "2779470"
  },
  {
    "text": "statically typed language the compiler will make sure that the inputs and outputs still match so the example from",
    "start": "2779470",
    "end": "2786190"
  },
  {
    "text": "you know dealing with a deck or something and I have a new version it still needs to take a deck as input they",
    "start": "2786190",
    "end": "2791560"
  },
  {
    "text": "has to have the same inputs and the same output so it's going to have very very similar functionalities much less likely to gonna get it wrong now if I want to",
    "start": "2791560",
    "end": "2798820"
  },
  {
    "text": "add features to workflow it's really easy I just stick a new thing in the pipeline and again I'm minimizing the",
    "start": "2798820",
    "end": "2805480"
  },
  {
    "text": "route code I have to write a I haven't I don't have to touch any existing code I just a new thing in the pipeline as long",
    "start": "2805480",
    "end": "2810640"
  },
  {
    "text": "as the inputs and outputs match up with the types I have very high confidence it's going to work if you need to do",
    "start": "2810640",
    "end": "2817270"
  },
  {
    "text": "branching again I can just do some sort of conditional and branch on these two things and if the branching gets really",
    "start": "2817270",
    "end": "2823690"
  },
  {
    "text": "really complicated I just have a component again just like a dispatcher",
    "start": "2823690",
    "end": "2829329"
  },
  {
    "text": "or route or whatever that figures out what's the input and immediately calls one of these 20 other functions but the",
    "start": "2829329",
    "end": "2835420"
  },
  {
    "text": "individual functions stay very small and isolated so the actual choice the decision making is get separate from the",
    "start": "2835420",
    "end": "2841420"
  },
  {
    "text": "logic so it tends to be simpler to work with and of course another come from is",
    "start": "2841420",
    "end": "2847329"
  },
  {
    "text": "you have two workflows and they're almost exactly the same as if the one tiny lil thing which is different so",
    "start": "2847329",
    "end": "2852460"
  },
  {
    "text": "rather than copying and pasting the whole thing you just want to parameterize it with that one little you",
    "start": "2852460",
    "end": "2857619"
  },
  {
    "text": "know parameter whatever it is and here is an example you'd ever you have a a workflow it's got a slot in it and its",
    "start": "2857619",
    "end": "2863680"
  },
  {
    "text": "parameterize and you pass in the thing you need now that thing you pass in it",
    "start": "2863680",
    "end": "2868810"
  },
  {
    "text": "could be you know a constant the number but it could also be a function it could be the strategy pattern you fast an a",
    "start": "2868810",
    "end": "2874150"
  },
  {
    "text": "function to decide exactly how it behaves so again you have a very high confidence",
    "start": "2874150",
    "end": "2880180"
  },
  {
    "text": "that this is gonna work because the types measure alright now what about this which domain model that transaction",
    "start": "2880180",
    "end": "2886660"
  },
  {
    "text": "scripts don't have so here is our two functions from our card game model and",
    "start": "2886660",
    "end": "2893049"
  },
  {
    "text": "if you see these things we're using a word like deck and hand and player and stuff we're not using instance strings",
    "start": "2893049",
    "end": "2898690"
  },
  {
    "text": "this is a rich domain model right now the fact we've ever made them is",
    "start": "2898690",
    "end": "2904299"
  },
  {
    "text": "functions its it means that we get the benefits of both the domain model is",
    "start": "2904299",
    "end": "2909579"
  },
  {
    "text": "used in these functions or these transactions but the functions are independent so I can swap things out and",
    "start": "2909579",
    "end": "2914980"
  },
  {
    "text": "swap things in without breaking something else so all the nice things about which domain model without having",
    "start": "2914980",
    "end": "2921099"
  },
  {
    "text": "things become tangled up where you can't change stuff without worrying about them and if you want to share a component",
    "start": "2921099",
    "end": "2928150"
  },
  {
    "text": "let's say I have you know I've built this function that does a deal and it has a deck as input over and I want to",
    "start": "2928150",
    "end": "2933400"
  },
  {
    "text": "reuse this component in multiple places it's a very useful component well I can",
    "start": "2933400",
    "end": "2938710"
  },
  {
    "text": "just use it in all these places I don't have to create an interface so I don't have to retro engineer something every",
    "start": "2938710",
    "end": "2944769"
  },
  {
    "text": "function is automatically an interface any function that takes in at X and spits out a new deck or whatever will",
    "start": "2944769",
    "end": "2950500"
  },
  {
    "text": "fit in this slot so it's much it's actually very easy to reuse things without having to do like retro actively",
    "start": "2950500",
    "end": "2957369"
  },
  {
    "text": "refactor things and again I have a high confidence that it all fit nicely so",
    "start": "2957369",
    "end": "2962559"
  },
  {
    "text": "shared components with which domain logic is actually quite easy to do in this approach so it is compatible people",
    "start": "2962559",
    "end": "2968230"
  },
  {
    "text": "say either you have a choose between transaction scripts which is kind of boring and a rich domain model which is",
    "start": "2968230",
    "end": "2974319"
  },
  {
    "text": "sophisticated and I'm saying that you can actually get the best of both worlds you can have a nice which domain model",
    "start": "2974319",
    "end": "2980140"
  },
  {
    "text": "which is super complicated with super complicated business rules and still assemble transactions in a linear way",
    "start": "2980140",
    "end": "2987660"
  },
  {
    "text": "which easy to understand which don't have any extra craft in them still using",
    "start": "2987660",
    "end": "2992950"
  },
  {
    "text": "this nice switch to main one so the best of both worlds people who are you know when when the",
    "start": "2992950",
    "end": "3001400"
  },
  {
    "text": "whole layered architecture first came around people realized pretty quickly that there were some issues and the",
    "start": "3001400",
    "end": "3008330"
  },
  {
    "text": "onion architecture and they're clean architecture and the hexagonal artists reports and apps it's all these variants",
    "start": "3008330",
    "end": "3013700"
  },
  {
    "text": "of that started evolving and I'm going to show you how this evolves naturally",
    "start": "3013700",
    "end": "3018920"
  },
  {
    "text": "from functions so here is a classic",
    "start": "3018920",
    "end": "3023980"
  },
  {
    "text": "layered model layered architecture with an API layer and a services layer data",
    "start": "3023980",
    "end": "3029360"
  },
  {
    "text": "mainly on a database layer and some workflow comes in to the API and it comes all the way back out the API and",
    "start": "3029360",
    "end": "3034370"
  },
  {
    "text": "so on now we know one of the reasons this is a bad approach is because if you",
    "start": "3034370",
    "end": "3039680"
  },
  {
    "text": "need to touch one of those workflows if you need to add a field to the customer you have to touch every single layer and",
    "start": "3039680",
    "end": "3046300"
  },
  {
    "text": "that really goes against the principle you know code that changes together should live together if you have to",
    "start": "3046300",
    "end": "3051920"
  },
  {
    "text": "change four different things in four different places that's actually a really bad way of organizing code so",
    "start": "3051920",
    "end": "3057290"
  },
  {
    "text": "much better way of organizing code is in vertical slices rather than horizontal slices and I think you see quite a few",
    "start": "3057290",
    "end": "3063740"
  },
  {
    "text": "people talking about this approach and if you want to change one particular workflow all you have to do is change",
    "start": "3063740",
    "end": "3069080"
  },
  {
    "text": "the bits that are relevant for that workflow and you're not touching anybody else's workflow so this is a much better way of doing it",
    "start": "3069080",
    "end": "3075590"
  },
  {
    "text": "now if you take these things and you kind of pull them out stretch them out sideways you end up with something like",
    "start": "3075590",
    "end": "3080930"
  },
  {
    "text": "this so something comes in the API and then it goes services domain hits the database in the middle now just the",
    "start": "3080930",
    "end": "3087170"
  },
  {
    "text": "databases the center of the universe here more domain stuff more services and stuff so this is how you do it if you",
    "start": "3087170",
    "end": "3094010"
  },
  {
    "text": "stretch out on these workflows into that on a pipeline and you can see it's kind of ugly it's really confusing you're",
    "start": "3094010",
    "end": "3099020"
  },
  {
    "text": "doing things multiple times this is bad so the answer this is onion architecture",
    "start": "3099020",
    "end": "3105170"
  },
  {
    "text": "or clean architecture or thoughts adaptors whatever the idea is you have pure code in the middle and you have all",
    "start": "3105170",
    "end": "3112160"
  },
  {
    "text": "the infrastructure or the API or the database or whatever around the core and",
    "start": "3112160",
    "end": "3118600"
  },
  {
    "text": "that's it now what's interesting is this is exactly what functional programming is all about in frontal programming you",
    "start": "3118600",
    "end": "3124880"
  },
  {
    "text": "separate the pure code pure meaning deterministic the deterministic codes which is all the",
    "start": "3124880",
    "end": "3131480"
  },
  {
    "text": "business logic but no IO and anything to do with interacting with the outside",
    "start": "3131480",
    "end": "3136670"
  },
  {
    "text": "world anything which is non-deterministic is that the edges so the functional programming and and the",
    "start": "3136670",
    "end": "3143690"
  },
  {
    "text": "kind of these kinds of architectures really a match made in heaven I think it's just a natural natural way of doing",
    "start": "3143690",
    "end": "3149750"
  },
  {
    "text": "things so there's a talk functional core",
    "start": "3149750",
    "end": "3155530"
  },
  {
    "text": "imperative shell which I'm sure some of you've seen if you haven't checked it out it's exactly the same things about",
    "start": "3155530",
    "end": "3160580"
  },
  {
    "text": "having a pure or core deterministic core which is easier to test an iOS or the edges all right what about testing these",
    "start": "3160580",
    "end": "3167900"
  },
  {
    "text": "things so I'm just going to review some",
    "start": "3167900",
    "end": "3173420"
  },
  {
    "text": "of the key testing concepts and I think I stole this from Ian here because I think this thing about the system under",
    "start": "3173420",
    "end": "3179900"
  },
  {
    "text": "- and you can probably correct me if I'm wrong here so the system under the test should be a unit of business value okay",
    "start": "3179900",
    "end": "3186140"
  },
  {
    "text": "so you should be testing business value not just classes on their own so what is",
    "start": "3186140",
    "end": "3191600"
  },
  {
    "text": "the unit of business value in this idea it's a transaction right that those are things you should be testing don't test",
    "start": "3191600",
    "end": "3198260"
  },
  {
    "text": "the individual classes and you should apply it you should test the boundaries you should test you shouldn't be testing in terms of things as those things",
    "start": "3198260",
    "end": "3204050"
  },
  {
    "text": "change and you're gonna have very brittle tests so what is the thing that goes to one boundary to another boundary that transaction and then people think",
    "start": "3204050",
    "end": "3212240"
  },
  {
    "text": "unit tests mean units equal classes unit is just a unit of functionality right",
    "start": "3212240",
    "end": "3218630"
  },
  {
    "text": "and it's a unit that a function and it can be isolated and tested on its own without breaking nothing else which",
    "start": "3218630",
    "end": "3224690"
  },
  {
    "text": "doesn't depend on anything else so that's a unit of functionality not a class equal unit so I think that's right",
    "start": "3224690",
    "end": "3231440"
  },
  {
    "text": "is that good yes Ian agrees so that is the thing about testing so notice that",
    "start": "3231440",
    "end": "3237740"
  },
  {
    "text": "the transaction model of doing stuff really matches this really nicely you test transactions you don't trust classes so here is what a FP style",
    "start": "3237740",
    "end": "3246200"
  },
  {
    "text": "transaction script looks like so you have this big function but inside the",
    "start": "3246200",
    "end": "3251210"
  },
  {
    "text": "big function there's a couple of pieces there's a bit of Io there's your business logic and then you",
    "start": "3251210",
    "end": "3256280"
  },
  {
    "text": "have a row at the end so all the i/o is at the edges you know in a fox model so typical things you load some",
    "start": "3256280",
    "end": "3264080"
  },
  {
    "text": "data from a database you do some business logic and you save it back to database in 99 percent of transactions",
    "start": "3264080",
    "end": "3269810"
  },
  {
    "text": "are like this and if it's more complicated you can make it more complicated that's basically it really I would say everything almost everything",
    "start": "3269810",
    "end": "3275840"
  },
  {
    "text": "is like this now what's interesting is the business logic where you're making decisions is deterministic",
    "start": "3275840",
    "end": "3283310"
  },
  {
    "text": "it's normally I have this piece of data what should I do with it you know should I accept the payment should a knife set",
    "start": "3283310",
    "end": "3288710"
  },
  {
    "text": "payment although all that all these branches and the conditionals and all that stuff that is deterministic code",
    "start": "3288710",
    "end": "3294110"
  },
  {
    "text": "and that is where the complexity is in in typical most business logic it's like it's complex but it is deterministic if",
    "start": "3294110",
    "end": "3301220"
  },
  {
    "text": "I have this input I guaranteed to have this album now anything to do with databases or files or the outside world",
    "start": "3301220",
    "end": "3308060"
  },
  {
    "text": "is not a terminus stick so it's really hard to test that kind of stuff but if you write your code in this way",
    "start": "3308060",
    "end": "3314390"
  },
  {
    "text": "with the i/o at the edges and the pure deterministic business logic in the middle it's super easy to test the",
    "start": "3314390",
    "end": "3322010"
  },
  {
    "text": "testing falls out without even thinking about it because the pure determination of business logic is a unit test is pure",
    "start": "3322010",
    "end": "3329390"
  },
  {
    "text": "you can just like parse all the inputs in do your test and check the outputs all right it's always going to be the same output for the same input",
    "start": "3329390",
    "end": "3335630"
  },
  {
    "text": "completely deterministic now if you want to test the whole thing from end to end that's an integration test and that's",
    "start": "3335630",
    "end": "3341630"
  },
  {
    "text": "where you have to hit the database or the file system or the network or whatever that's fine but this comes from",
    "start": "3341630",
    "end": "3347240"
  },
  {
    "text": "this architecture the difference between a unit test integration test light falls out naturally and what you should be",
    "start": "3347240",
    "end": "3353270"
  },
  {
    "text": "testing you know falls out naturally he only have to test the business not it you don't have to test a bunch of little",
    "start": "3353270",
    "end": "3358460"
  },
  {
    "text": "classes and stuff if you do need to do more complex IO you can do it in the",
    "start": "3358460",
    "end": "3365570"
  },
  {
    "text": "middle of the workflow but just keep your eye out from your business logic keep the deterministic stuff separate from the non determinacy stuff right and",
    "start": "3365570",
    "end": "3373330"
  },
  {
    "text": "even do front-end stuff like you can do front-end style like this too if you're used to the Elm architecture or redux",
    "start": "3373330",
    "end": "3379580"
  },
  {
    "text": "the Model View update architecture where you have this message pump and you have an update thing and a render thing and",
    "start": "3379580",
    "end": "3386150"
  },
  {
    "text": "you have a browser thing these are all functions the little update thing and the render thing these are pure deterministic functions which make them",
    "start": "3386150",
    "end": "3392240"
  },
  {
    "text": "really easy to test and all that IO non-atomic stuff is in the browser or in them in their library that does sister",
    "start": "3392240",
    "end": "3397850"
  },
  {
    "text": "so this is a reason why people like doing this on the front end as well alright let's just finish up with some",
    "start": "3397850",
    "end": "3403700"
  },
  {
    "text": "deployment options because what's nice about this is you can actually get a bunch of if you follow this approach",
    "start": "3403700",
    "end": "3409790"
  },
  {
    "text": "you're not tied down to running things on a mainframe using COBOL you can actually do some cool things so there's",
    "start": "3409790",
    "end": "3417950"
  },
  {
    "start": "3417000",
    "end": "3417000"
  },
  {
    "text": "three different architectures which are sort of common use now so monoliths right standard architecture so in a",
    "start": "3417950",
    "end": "3425210"
  },
  {
    "text": "monolith approach each of our bounded context is going to become a module in our module you know modular monolith and",
    "start": "3425210",
    "end": "3432170"
  },
  {
    "text": "because these bounded contexts are autonomous and they have well-defined boundaries and well-defined interfaces we can still put them in a month but",
    "start": "3432170",
    "end": "3439130"
  },
  {
    "text": "they are modular so that's good now if you have a service-oriented architecture",
    "start": "3439130",
    "end": "3444230"
  },
  {
    "text": "each of these banner contexts would typically be in a container so a bunch of Micra services or whatever in a",
    "start": "3444230",
    "end": "3450770"
  },
  {
    "text": "single container and if you're doing service then each of these interval work flows become deployment units right you",
    "start": "3450770",
    "end": "3456860"
  },
  {
    "text": "just deploy these individual workflows because they're stateless remember they have the i/o and the at the front and",
    "start": "3456860",
    "end": "3461990"
  },
  {
    "text": "the IP they're really easy to make into lambdas whatever so server this works",
    "start": "3461990",
    "end": "3467150"
  },
  {
    "text": "really well for this approach so here's the modular monolith so here's our here are a couple of banded concepts three",
    "start": "3467150",
    "end": "3474140"
  },
  {
    "text": "pound of context and they have these workflows but they're modular like people say well I want to have you know how do I get modularity I need to go to",
    "start": "3474140",
    "end": "3480080"
  },
  {
    "text": "Microsoft it's no you don't if you can't build a modular monolith what makes you think you can build modular microservices but it's the same",
    "start": "3480080",
    "end": "3486220"
  },
  {
    "text": "principles is this a deployment thing it's not about the design thing you should always design things to be",
    "start": "3486220",
    "end": "3491240"
  },
  {
    "text": "modular no matter how didhow you're deploying them so modular monoliths there's the kind of boundary that little",
    "start": "3491240",
    "end": "3497030"
  },
  {
    "text": "red thing that's the boundary of the deployment and you can also have a split deployment where you have a front-end",
    "start": "3497030",
    "end": "3502910"
  },
  {
    "text": "part on a back-end part and they're really part the same amount of context but there's too little workflows and they communicate with like an API so",
    "start": "3502910",
    "end": "3508580"
  },
  {
    "text": "that's what I'm doing it now if you're doing micro services or container based stuff you can each little contexts can",
    "start": "3508580",
    "end": "3515150"
  },
  {
    "text": "be its own unit of deployment I can have docker container or whatever I know kubernetes weather for service each of",
    "start": "3515150",
    "end": "3523760"
  },
  {
    "text": "each of these individual workflows become something you deploy and what's nice is that you can if you if you architected your stuff",
    "start": "3523760",
    "end": "3530180"
  },
  {
    "text": "right if you design your stuff right you can switch between these different deployment approaches with minimal pain",
    "start": "3530180",
    "end": "3536540"
  },
  {
    "text": "I mean there's always gonna be pain but you know as long as you design your stuff to be modular notice that everything here is completely modular",
    "start": "3536540",
    "end": "3542500"
  },
  {
    "text": "right so let's finish up we have the reinvented transaction scripts so going",
    "start": "3542500",
    "end": "3548240"
  },
  {
    "text": "back to martin fowler's definition business applications can be thought of as a series of transactions we are going",
    "start": "3548240",
    "end": "3553790"
  },
  {
    "text": "to organize it as a single function with a deterministic core and i/o at the edges that's no longer a procedure which",
    "start": "3553790",
    "end": "3560270"
  },
  {
    "text": "mixes up database stuff and each transaction will have its own autonomous evolvable transaction script I think",
    "start": "3560270",
    "end": "3569480"
  },
  {
    "text": "transaction scripts should be more popular so this is what the whole point this talk is because there what's cool about them is they are very business focused when you do something it's just",
    "start": "3569480",
    "end": "3575870"
  },
  {
    "text": "about getting stuff done you're not worried about which framework you should use there are no frameworks in transaction script stuff by the way it's",
    "start": "3575870",
    "end": "3581870"
  },
  {
    "text": "the whole libraries but not frameworks it's very business focused actually really good for agile if you're doing",
    "start": "3581870",
    "end": "3587150"
  },
  {
    "text": "agile properly because the transaction becomes the unit of developments like this like a story transaction the",
    "start": "3587150",
    "end": "3592340"
  },
  {
    "text": "stories like this is what I'm going to do this week I'm gonna build this thing and you focused on delivering business value all the time and it's really easy",
    "start": "3592340",
    "end": "3599870"
  },
  {
    "text": "to understand because the data flow is one directional right so no bloat or less bloat of course you're always going",
    "start": "3599870",
    "end": "3605450"
  },
  {
    "text": "to have bloat because we're developers but you hopefully have the force is working towards bloat are countered by",
    "start": "3605450",
    "end": "3611210"
  },
  {
    "text": "the fact that these things are kind of small and then all the problems that we had we solve them with composability and",
    "start": "3611210",
    "end": "3619250"
  },
  {
    "text": "put in io separately so for example the new improved transaction scripts they have a rich domain unlike the original",
    "start": "3619250",
    "end": "3625610"
  },
  {
    "text": "ones they're easy to modify unlike there is no ones they easy - super easy to test unlike the original",
    "start": "3625610",
    "end": "3631730"
  },
  {
    "text": "ones and they're hipster friendly they work with micro services and server lists and all the latest cool kids stuff",
    "start": "3631730",
    "end": "3638120"
  },
  {
    "text": "so they're very cool the new improved translation scripts definitely what the cool kids should be using today so",
    "start": "3638120",
    "end": "3644680"
  },
  {
    "text": "thanks very much I'm going to post the slides and videos my website there if you like this kind of thing I have my",
    "start": "3644680",
    "end": "3651260"
  },
  {
    "text": "power of composition talk and my domain modeling made functional talk I have a whole book about domain modeling please",
    "start": "3651260",
    "end": "3656870"
  },
  {
    "text": "contact me on Twitter if you have any questions and thank you very much [Applause]",
    "start": "3656870",
    "end": "3665539"
  }
]