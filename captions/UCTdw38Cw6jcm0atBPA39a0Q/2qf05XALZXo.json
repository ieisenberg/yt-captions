[
  {
    "text": "good morning so I'm Bill Wagner we're going to be looking at",
    "start": "8519",
    "end": "14080"
  },
  {
    "text": "pattern matching in c 7 this morning so most important things in this slide is",
    "start": "14080",
    "end": "19800"
  },
  {
    "text": "how to reach me via email or Twitter if you have any questions after this talk go ahead and reach out there I",
    "start": "19800",
    "end": "27199"
  },
  {
    "text": "we'll post both the slides and the demos um on my GitHub repository later I will",
    "start": "27199",
    "end": "33120"
  },
  {
    "text": "announce it on the Twitter handle okay so we're going to talk a little bit about the languages and where",
    "start": "33120",
    "end": "39320"
  },
  {
    "text": "C is going and c 7 primarily the Investments",
    "start": "39320",
    "end": "44719"
  },
  {
    "text": "are evolving for modern patterns distributed applications so you think of",
    "start": "44719",
    "end": "50079"
  },
  {
    "text": "when C first came out as a language roughly 2000 we wrote desktop",
    "start": "50079",
    "end": "55399"
  },
  {
    "text": "applications maybe client server maybe web sites mostly static Pages going down",
    "start": "55399",
    "end": "60760"
  },
  {
    "text": "in forms that's very different than the programs we're writing today we're writing small services that run on",
    "start": "60760",
    "end": "67159"
  },
  {
    "text": "distributed machines that leads to a different decomposition of problems objects aren't",
    "start": "67159",
    "end": "73759"
  },
  {
    "text": "necessarily the right way to solve every problem we're more often separating data",
    "start": "73759",
    "end": "78880"
  },
  {
    "text": "for Transit from the algorithms that operate on that data that's probably the big theme of c",
    "start": "78880",
    "end": "85600"
  },
  {
    "text": "7 is things like tupal pattern matching and others for anyone who was in Kathleen's talk talk you have a good",
    "start": "85600",
    "end": "91119"
  },
  {
    "text": "overview of all of those now one of the things that we really like as working with the C team",
    "start": "91119",
    "end": "100040"
  },
  {
    "text": "is C is one of the most popular Technologies out there according to the stack Overflow survey toward the end of",
    "start": "100040",
    "end": "107880"
  },
  {
    "text": "2016 and the set gets a little smaller if we look at the most Lov Technologies C is one of a very small set of",
    "start": "107880",
    "end": "114799"
  },
  {
    "text": "languages on both of those lists so it's used by a really really large number of",
    "start": "114799",
    "end": "120840"
  },
  {
    "text": "developers and by and large the developers that use C like it so it's an",
    "start": "120840",
    "end": "126360"
  },
  {
    "text": "important goal for us is to keep that and hopefully move up on both of",
    "start": "126360",
    "end": "131560"
  },
  {
    "text": "those FP of course has a little more love which is nice they're good",
    "start": "131560",
    "end": "139599"
  },
  {
    "text": "people okay so let's look at some of the big big things that been going on in C",
    "start": "139599",
    "end": "145720"
  },
  {
    "text": "instead of running on Windows we now run everywhere just to show that we do still have support for Windows today's demos",
    "start": "145720",
    "end": "151480"
  },
  {
    "text": "are on Windows my talk Wednesday was all on Mac so we do still support Windows just you",
    "start": "151480",
    "end": "156720"
  },
  {
    "text": "know that net is a system component more and more with net core you can deploy net with your",
    "start": "156720",
    "end": "163560"
  },
  {
    "text": "application that's going to make side by side a little bit easier as we get a little bit more Investments there it's",
    "start": "163560",
    "end": "168599"
  },
  {
    "text": "going to make it easier for things like running and Docker containers and so on you can deploy something that's totally",
    "start": "168599",
    "end": "176440"
  },
  {
    "text": "self-contained running on a VM and a CLR we're now also making investments into",
    "start": "176680",
    "end": "181720"
  },
  {
    "text": "compiling C through net native into native code on various",
    "start": "181720",
    "end": "187680"
  },
  {
    "text": "platforms so you'll be actually running native code that started as C compilers have open apis the rosin",
    "start": "187680",
    "end": "195799"
  },
  {
    "text": "apis if you were here last year I gave a talk on building Ros rosin analyzers",
    "start": "195799",
    "end": "200959"
  },
  {
    "text": "there's been further investments in that so you can continue to do open compiler apis and add your own",
    "start": "200959",
    "end": "208760"
  },
  {
    "text": "hooks Ed in your favorite editor or Visual Studio once again some of the demos I did Wednesday were in vs code",
    "start": "208760",
    "end": "215080"
  },
  {
    "text": "today I'm going to use Visual Studio proprietary everything is open",
    "start": "215080",
    "end": "220159"
  },
  {
    "text": "source so as I discuss pattern matching toward the end of the talk I'll show you how to find this spec for patterns and",
    "start": "220159",
    "end": "227519"
  },
  {
    "text": "Investments that will go on Beyond c 7 as we do more things with patterns and",
    "start": "227519",
    "end": "232840"
  },
  {
    "text": "you can engage in the discussion there directly on GitHub on the rosin",
    "start": "232840",
    "end": "238720"
  },
  {
    "text": "repo okay so let's look at pattern matching as a definition and what it means for C",
    "start": "238720",
    "end": "245439"
  },
  {
    "text": "developers in terms of what you've already done with code and the kinds of things that we're going to do the",
    "start": "245439",
    "end": "251120"
  },
  {
    "text": "definition I want to use for pattern matching is that we are going to test that a value or variable has a certain",
    "start": "251120",
    "end": "257880"
  },
  {
    "text": "shape and extract information when it does so there's three keys to that",
    "start": "257880",
    "end": "263919"
  },
  {
    "text": "definition in terms of what we're going to learn about pattern matching first we test something about a a",
    "start": "263919",
    "end": "270759"
  },
  {
    "text": "variable not necessarily its type not necessarily its structure in terms of a",
    "start": "270759",
    "end": "276759"
  },
  {
    "text": "normative way C types classes have names and so on but we're going to test",
    "start": "276759",
    "end": "282440"
  },
  {
    "text": "something about a variable has a certain shape certain properties certain values in those",
    "start": "282440",
    "end": "289520"
  },
  {
    "text": "properties and then we are going to extract information when it does so once we found what we're looking for we're",
    "start": "289520",
    "end": "295479"
  },
  {
    "text": "going to do something with that variable now we already do that but the syntax is a little bit clumsy for",
    "start": "295479",
    "end": "303639"
  },
  {
    "text": "instance this is one of the some of the code that we're going to start with if you look this is the kind of code that",
    "start": "303639",
    "end": "309720"
  },
  {
    "text": "we would have to write today to test what type of an object comes in there's a lot of if this is some type and so on",
    "start": "309720",
    "end": "318400"
  },
  {
    "text": "and then we move down and then we'll do a cast because we figured out what type it is so those are separate operations",
    "start": "318400",
    "end": "324520"
  },
  {
    "text": "we're going to perform some tests and then we're going to if that test succeeds then we've got a block of code",
    "start": "324520",
    "end": "330960"
  },
  {
    "text": "that does some work on that variable that's a little clumsy this is structured to be somewhat",
    "start": "330960",
    "end": "336479"
  },
  {
    "text": "clean my last two demos I'm going to try to do pull requests for a couple live projects to change from code that's",
    "start": "336479",
    "end": "342680"
  },
  {
    "text": "noticeably uglier than this into using C 7 pattern",
    "start": "342680",
    "end": "348160"
  },
  {
    "text": "matching so that's going to be our key here what we're going to do is we're going to take this test wow that really",
    "start": "348160",
    "end": "354199"
  },
  {
    "text": "is in the wrong spot there wow and test the value and then bring it back and",
    "start": "354199",
    "end": "360080"
  },
  {
    "text": "extract at the same time in c 7 we're taking some small steps toward pattern",
    "start": "360080",
    "end": "365240"
  },
  {
    "text": "matching there is a rich vocabulary for patterns if we look at the spec you'll see a lot of them laid out C has three",
    "start": "365240",
    "end": "372919"
  },
  {
    "text": "particular ones that are supported that are new first of all there's the constant pattern which to some degree is",
    "start": "372919",
    "end": "378880"
  },
  {
    "text": "already supported you can test if a value has a c variable has a certain value we're comparing against the",
    "start": "378880",
    "end": "385240"
  },
  {
    "text": "constant well now we can compare and extract at the same time we have a type pattern we are going to test that a",
    "start": "385240",
    "end": "391960"
  },
  {
    "text": "variable is a certain type and we'll extract into a new variable that type",
    "start": "391960",
    "end": "397120"
  },
  {
    "text": "immediately in one expression and then there is the null pattern which is kind of a special case",
    "start": "397120",
    "end": "403720"
  },
  {
    "text": "of the constant pattern but is interesting because null doesn't necessarily have a",
    "start": "403720",
    "end": "409479"
  },
  {
    "text": "type so we're going to support look and look at those three supported patterns and there are two statements that work",
    "start": "409479",
    "end": "415560"
  },
  {
    "text": "with that there's been enhancements to the is statement and there have been enhancements to the switch statement",
    "start": "415560",
    "end": "421360"
  },
  {
    "text": "that support these patterns okay so what we're going to get",
    "start": "421360",
    "end": "427800"
  },
  {
    "text": "is we're going to get is Expressions to test if a variable is a certain type and",
    "start": "427800",
    "end": "433199"
  },
  {
    "text": "if so we'll extract information from it switch in case Expressions that can",
    "start": "433199",
    "end": "438280"
  },
  {
    "text": "test a type and extract information from it and the switch is further enhanced",
    "start": "438280",
    "end": "443440"
  },
  {
    "text": "with a win conditional so we can test the type and if the type matches we can apply further tests",
    "start": "443440",
    "end": "451000"
  },
  {
    "text": "that look at information and properties on that particular type so let's start exploring a little",
    "start": "451000",
    "end": "457960"
  },
  {
    "text": "bit so here's our first our main demo I've built a console application that",
    "start": "457960",
    "end": "463440"
  },
  {
    "text": "declares several different variables with some interesting or non-interesting values so I've got a couple integers so",
    "start": "463440",
    "end": "469440"
  },
  {
    "text": "we know that's a struct actually has values has numbers I've got a nullable",
    "start": "469440",
    "end": "474639"
  },
  {
    "text": "in it first one is the null value or the default value for a nullable L I have a",
    "start": "474639",
    "end": "481159"
  },
  {
    "text": "couple different numbers there and then we have strings and put a few interesting cases there I've",
    "start": "481159",
    "end": "487599"
  },
  {
    "text": "got null as a string I have the empty string I have just a wh space string and",
    "start": "487599",
    "end": "494960"
  },
  {
    "text": "then just a phrase and then I've built a structure that's a point structure up here simple",
    "start": "494960",
    "end": "501000"
  },
  {
    "text": "cartisian points X and Y over right of two strings so we can print some things",
    "start": "501000",
    "end": "506960"
  },
  {
    "text": "out and then I've built a few ing points one that has at the origin 0 0 34 nice",
    "start": "507199",
    "end": "514680"
  },
  {
    "text": "little Pythagorean triangle and 23 and 19 which are two prime",
    "start": "514680",
    "end": "520800"
  },
  {
    "text": "numbers that add up to 42 because that's how we roll okay and then I've just built an",
    "start": "520800",
    "end": "526360"
  },
  {
    "text": "array of objects that has each one of those in and we're going to walk through",
    "start": "526360",
    "end": "531600"
  },
  {
    "text": "and convert both this ugly code for is patterns into using pattern matching and",
    "start": "531600",
    "end": "539000"
  },
  {
    "text": "then we'll do the the same thing with the switch expressions and if I run it right now I'm going to pass in turn each one of",
    "start": "539000",
    "end": "545000"
  },
  {
    "text": "these different variables into these tests below that say all right is this an integer is this a nullable",
    "start": "545000",
    "end": "553279"
  },
  {
    "text": "int is it a string and is it a point and if so then",
    "start": "553279",
    "end": "558600"
  },
  {
    "text": "I'm going to cast it and then print out a little information about it so if we run it we'll find Okay so",
    "start": "558600",
    "end": "566760"
  },
  {
    "text": "we've started our is Expressions I found two integers 0 and 42 interestingly I",
    "start": "566760",
    "end": "573399"
  },
  {
    "text": "found two more integers 0 and 42 found strings notice that there are",
    "start": "573399",
    "end": "579440"
  },
  {
    "text": "three and I found three points okay that's all good so a few interesting things we",
    "start": "579440",
    "end": "586120"
  },
  {
    "text": "learned right away from this code is that it never finds the null values okay if we look through this it",
    "start": "586120",
    "end": "594360"
  },
  {
    "text": "never finds the null string or the nullable null int",
    "start": "594360",
    "end": "600360"
  },
  {
    "text": "because null will fall through both of those is tests notice it doesn't find the null string either because an is on",
    "start": "600360",
    "end": "607720"
  },
  {
    "text": "a null string well it's null it's not really a string is it so those tests are",
    "start": "607720",
    "end": "613000"
  },
  {
    "text": "already failing and the final interesting one is notice that even though I'm testing for",
    "start": "613000",
    "end": "618480"
  },
  {
    "text": "a nullable int I never wrote out that we found a nullable int everything we found",
    "start": "618480",
    "end": "624200"
  },
  {
    "text": "actually already did the cast and cast it to an integer so we never actually found that type",
    "start": "624200",
    "end": "630079"
  },
  {
    "text": "so because of the rules of how conversions happen this code is a little bit interesting and already has some subtle subtle issues with it depending",
    "start": "630079",
    "end": "637279"
  },
  {
    "text": "on what we were trying to do and finally if we look at the code itself we can see a couple interesting",
    "start": "637279",
    "end": "644000"
  },
  {
    "text": "little bits of ugliness here if you look at where I'm testing for an integer or a",
    "start": "644000",
    "end": "649519"
  },
  {
    "text": "nullable int where I'm converting it to an INT and where I'm testing for those that point which is a structure I have",
    "start": "649519",
    "end": "655560"
  },
  {
    "text": "to use a cast rather than the as operator right because we can't do is",
    "start": "655560",
    "end": "661480"
  },
  {
    "text": "with value types until now okay so let's start to",
    "start": "661480",
    "end": "668480"
  },
  {
    "text": "rewrite some of this and use pattern expressions and what we're going to find is codee's going to get a little shorter it's going",
    "start": "668480",
    "end": "675000"
  },
  {
    "text": "to get a little cleaner and it's not going to make as many mistakes so first we want to test and see if it's an INT",
    "start": "675000",
    "end": "680839"
  },
  {
    "text": "so what I'm going to do is I'm just going to say if my object to",
    "start": "680839",
    "end": "687480"
  },
  {
    "text": "test is an in I so I'll do the assignment right there on the is",
    "start": "688000",
    "end": "693959"
  },
  {
    "text": "statement I notice now with the is okay I can check to see if it's an INT I'm going to do a assignment life is",
    "start": "693959",
    "end": "701440"
  },
  {
    "text": "good and I'm going to do the just copy that right line right up",
    "start": "701440",
    "end": "707000"
  },
  {
    "text": "here all good so that one so far is pretty",
    "start": "708720",
    "end": "714360"
  },
  {
    "text": "go great Okay so we've gotten rid of about two or three lines",
    "start": "714360",
    "end": "720240"
  },
  {
    "text": "there let's now we're going to do the same thing here with my nullable",
    "start": "720240",
    "end": "727040"
  },
  {
    "text": "int that should work we'll leave this that's not make",
    "start": "735600",
    "end": "743720"
  },
  {
    "text": "that one so now what's interesting with nullable ins is that first one that object to",
    "start": "743720",
    "end": "749600"
  },
  {
    "text": "test if I check to see if it is an integer and assign it that will work with nullable int that has a value",
    "start": "749600",
    "end": "756000"
  },
  {
    "text": "because I can convert that integer",
    "start": "756000",
    "end": "759800"
  },
  {
    "text": "to can convert the nullable in to an INT directly so let's just go ahead and run right now and now what we'll see is we",
    "start": "761480",
    "end": "767560"
  },
  {
    "text": "get pretty much the same result as we had before except that I'm getting build",
    "start": "767560",
    "end": "773079"
  },
  {
    "text": "errors I missed my ski oh",
    "start": "773680",
    "end": "780800"
  },
  {
    "text": "yes ah right so let's change that one to J down there there we go",
    "start": "780800",
    "end": "790440"
  },
  {
    "text": "okay cool all right so we still find convert aable ins to ins cool now what",
    "start": "795360",
    "end": "801959"
  },
  {
    "text": "was interesting is that the only thing that's really getting checked here that we find is if that nullable in actually",
    "start": "801959",
    "end": "807440"
  },
  {
    "text": "is null okay okay so let's check that null pattern so if object to test is",
    "start": "807440",
    "end": "815279"
  },
  {
    "text": "null and then of course we're not going to try to do this cast because that would clearly",
    "start": "821279",
    "end": "827440"
  },
  {
    "text": "fail okay and now you see that we find the",
    "start": "827639",
    "end": "834279"
  },
  {
    "text": "nulls both for the nullable int when it has its default value and we find the nulls for the string is the first one of",
    "start": "834279",
    "end": "840759"
  },
  {
    "text": "the strings now points out that we found a null all right so far so good now let's",
    "start": "840759",
    "end": "847480"
  },
  {
    "text": "start to expand and really look at the string and say that you know there's a few different things that we can do here that's really",
    "start": "847480",
    "end": "853040"
  },
  {
    "text": "fun so we found a string we found a point well now let's really start to play and add new other interesting",
    "start": "853040",
    "end": "860000"
  },
  {
    "text": "things that we want to test for let's say I want to test for an actual value so up here I'm going to say if object to",
    "start": "860000",
    "end": "868040"
  },
  {
    "text": "test is int we had a five up there if I remember right oh no we had a",
    "start": "868040",
    "end": "876800"
  },
  {
    "text": "42 which we can't do with",
    "start": "878920",
    "end": "882800"
  },
  {
    "text": "those we're going to start adding those in the switch so now let's to expand this let's",
    "start": "884560",
    "end": "891199"
  },
  {
    "text": "look at our switch pattern which gives us quite a bit more interesting things that we can do so we're used to a switch",
    "start": "891199",
    "end": "897880"
  },
  {
    "text": "in general and that we can put a few things under the constant",
    "start": "897880",
    "end": "905040"
  },
  {
    "text": "pattern well now what we can do is we're going to be able to switch",
    "start": "905040",
    "end": "911720"
  },
  {
    "text": "on any type so I'm switching on object so I'm going to build case labels based",
    "start": "911720",
    "end": "917680"
  },
  {
    "text": "on what we find in that object and here similar to the is",
    "start": "917680",
    "end": "923120"
  },
  {
    "text": "statement that we had up above I'm going to say if or case",
    "start": "923120",
    "end": "929959"
  },
  {
    "text": "in I and we'll just do the right",
    "start": "929959",
    "end": "936160"
  },
  {
    "text": "line there okay so so far we've just added that one particular",
    "start": "945920",
    "end": "952000"
  },
  {
    "text": "case I can run through and now you can see as we start on the switch Expressions we're starting to find some",
    "start": "952000",
    "end": "957639"
  },
  {
    "text": "things with different integers okay well values are still",
    "start": "957639",
    "end": "963279"
  },
  {
    "text": "important so let's now say I have case int",
    "start": "963279",
    "end": "968600"
  },
  {
    "text": "I when I is",
    "start": "969920",
    "end": "974759"
  },
  {
    "text": "42",
    "start": "987920",
    "end": "990920"
  },
  {
    "text": "and I deleted my opening brace there accidentally all right cool so let's just run this make",
    "start": "993199",
    "end": "999759"
  },
  {
    "text": "sure I type the code correctly yes found the secret got your zeros and found the secret so now what's cool here in the",
    "start": "999759",
    "end": "1005680"
  },
  {
    "text": "new syntax note that first of all inside the switch statement each",
    "start": "1005680",
    "end": "1013160"
  },
  {
    "text": "case block now introduces its own scope for variables I've got two variables ey there and they are two different",
    "start": "1013160",
    "end": "1019199"
  },
  {
    "text": "variables for the first switch and for the second okay so we have that",
    "start": "1019199",
    "end": "1024400"
  },
  {
    "text": "particular feature where now each one of those blocks in the newer switch",
    "start": "1024400",
    "end": "1030480"
  },
  {
    "text": "statement is its own scope even though we don't have braces they're kind of implied it's kind of",
    "start": "1030480",
    "end": "1036120"
  },
  {
    "text": "cool this also starts to show one of the interesting things that now happens with case and switch is that now order",
    "start": "1036120",
    "end": "1043600"
  },
  {
    "text": "matters you can see I'm not getting red squiggles here because it's telling me you know what you're never going to get to that code",
    "start": "1043600",
    "end": "1049440"
  },
  {
    "text": "because every integer was found in the case above so we now have unreachable code",
    "start": "1049440",
    "end": "1056000"
  },
  {
    "text": "detected because case labels will be evaluated in the order that they were",
    "start": "1057120",
    "end": "1063160"
  },
  {
    "text": "they are they appear in the switch statement with one exception I can write my default",
    "start": "1063160",
    "end": "1072039"
  },
  {
    "text": "here",
    "start": "1077840",
    "end": "1080840"
  },
  {
    "text": "and of course I still need a break by convention we'll probably write that",
    "start": "1084919",
    "end": "1090080"
  },
  {
    "text": "particular case statement at the bottom but the compiler plays a little",
    "start": "1090080",
    "end": "1096240"
  },
  {
    "text": "bit of magic and I can put it in whatever order I want it to be and it will still get",
    "start": "1096240",
    "end": "1102640"
  },
  {
    "text": "evaluated last okay don't do that though it's",
    "start": "1102640",
    "end": "1108080"
  },
  {
    "text": "really ugly code all",
    "start": "1108080",
    "end": "1113320"
  },
  {
    "text": "right so we've got that pattern set up so far awesome all right so now so far we've",
    "start": "1113320",
    "end": "1119280"
  },
  {
    "text": "checked for integers okay well we could do a",
    "start": "1119280",
    "end": "1127240"
  },
  {
    "text": "case um do our null",
    "start": "1127240",
    "end": "1131799"
  },
  {
    "text": "case",
    "start": "1137720",
    "end": "1140720"
  },
  {
    "text": "and now suddenly we're going to pick up the nullable int that has no value",
    "start": "1143559",
    "end": "1148760"
  },
  {
    "text": "the string that has nothing in it and then we're still not parsing our strings and our points",
    "start": "1148760",
    "end": "1153919"
  },
  {
    "text": "yet okay let's start looking at strings so we'll start with just a case string s",
    "start": "1153919",
    "end": "1161080"
  },
  {
    "text": "and we're going to right line that we found the",
    "start": "1161080",
    "end": "1167720"
  },
  {
    "text": "string",
    "start": "1167720",
    "end": "1170720"
  },
  {
    "text": "okay again only a few things that can help us out we've now found three different strings that are",
    "start": "1174000",
    "end": "1180000"
  },
  {
    "text": "nonnull first one is the empty string second one is a bunch of white space all",
    "start": "1180000",
    "end": "1186240"
  },
  {
    "text": "right well let's add a string s",
    "start": "1186240",
    "end": "1193679"
  },
  {
    "text": "when string that is null or empty",
    "start": "1193679",
    "end": "1200640"
  },
  {
    "text": "as see we found the empty string we still have our white space string in there okay well that's easy enough to",
    "start": "1220200",
    "end": "1225679"
  },
  {
    "text": "cope with we'll add another one immediately following and say you know instead of nler empty let's just do nler",
    "start": "1225679",
    "end": "1233840"
  },
  {
    "text": "whitespace which I think is is Nar whites",
    "start": "1233840",
    "end": "1239760"
  },
  {
    "text": "space and again now we get to pull those in and we get things that have different statements in it all right so now we're",
    "start": "1244960",
    "end": "1251480"
  },
  {
    "text": "finding whether or not we have an empty string we're finding just blanks we're doing those tests and we're putting that",
    "start": "1251480",
    "end": "1256520"
  },
  {
    "text": "code together and it's noticeably cleaner than it was before both up",
    "start": "1256520",
    "end": "1262400"
  },
  {
    "text": "here and down here and then we can add our case for the",
    "start": "1262400",
    "end": "1268960"
  },
  {
    "text": "points and we'll find the",
    "start": "1274440",
    "end": "1278158"
  },
  {
    "text": "origin",
    "start": "1287520",
    "end": "1290520"
  },
  {
    "text": "okay so we can do any kinds of tests on the object that we find we can call any expression in",
    "start": "1294039",
    "end": "1299200"
  },
  {
    "text": "there test any value test any properties do whatever we want in a when Clause",
    "start": "1299200",
    "end": "1305080"
  },
  {
    "text": "okay all good stuff so effectively what we've done",
    "start": "1305080",
    "end": "1310840"
  },
  {
    "text": "here again as we look at how this code looks let's just evaluate a little bit about the structure of the code and the",
    "start": "1310840",
    "end": "1316520"
  },
  {
    "text": "kinds of things that we're doing we taken this test to see if a value has",
    "start": "1316520",
    "end": "1321799"
  },
  {
    "text": "something extract information from it and then do something with it we've combined the first two test to see if a",
    "start": "1321799",
    "end": "1329320"
  },
  {
    "text": "value has certain properties extract it into a new value and then do whatever we",
    "start": "1329320",
    "end": "1334720"
  },
  {
    "text": "want with that particular value",
    "start": "1334720",
    "end": "1339278"
  },
  {
    "text": "okay we've expanded the case statement so that now case can do can work on any",
    "start": "1344760",
    "end": "1350559"
  },
  {
    "text": "different kinds of variable not simply numerics or the string it cannot work on",
    "start": "1350559",
    "end": "1356000"
  },
  {
    "text": "any type and in addition to just checking the type we can check particular values of a type I",
    "start": "1356000",
    "end": "1367640"
  },
  {
    "text": "think I can also simplify this and just",
    "start": "1367960",
    "end": "1373240"
  },
  {
    "text": "say there not in this build thought that was",
    "start": "1374200",
    "end": "1381520"
  },
  {
    "text": "there okay so we have a simpler syntax to do the test and to put the our different",
    "start": "1382279",
    "end": "1388679"
  },
  {
    "text": "work together all right so far so good so now let's walk through in a larger",
    "start": "1388679",
    "end": "1394360"
  },
  {
    "text": "project where we see some real life code as to what kind of ugliness happens in current more imperative tests and let's",
    "start": "1394360",
    "end": "1401960"
  },
  {
    "text": "apply C pattern matching to those so I'm going to open up not of",
    "start": "1401960",
    "end": "1407320"
  },
  {
    "text": "time and I wish John we're here in this talk this would be",
    "start": "1407320",
    "end": "1414080"
  },
  {
    "text": "fun and to give a little bit bit of context to this particular",
    "start": "1416400",
    "end": "1422520"
  },
  {
    "text": "code what this method does no of times a big project so this",
    "start": "1422720",
    "end": "1429520"
  },
  {
    "text": "is why we don't use big projects for demos I get to wait okay what this particular method does is it's going to",
    "start": "1429520",
    "end": "1435200"
  },
  {
    "text": "try to get a note of information for a particular culture to figure out what time zone you're in what culture you're",
    "start": "1435200",
    "end": "1441200"
  },
  {
    "text": "working with and so on and if we walk through it we can see",
    "start": "1441200",
    "end": "1448120"
  },
  {
    "text": "that it does is okay so if the provider that came in was null well we're going to use the current culture okay so far",
    "start": "1448120",
    "end": "1454400"
  },
  {
    "text": "so good if the provider is not null well let's see if it is a culture info object",
    "start": "1454400",
    "end": "1461600"
  },
  {
    "text": "if so I'm going to call get format info on a culture info object get the right information for the culture that we're",
    "start": "1461600",
    "end": "1467679"
  },
  {
    "text": "working in at this point in time which is cached in noted time because you're probably using the same time zones for",
    "start": "1467679",
    "end": "1473840"
  },
  {
    "text": "different um different tests and then if it is not a current culture info or a",
    "start": "1473840",
    "end": "1479799"
  },
  {
    "text": "culture info object it's probably a datetime format info in which case we're going to create a not a time format info",
    "start": "1479799",
    "end": "1488320"
  },
  {
    "text": "with the invariant culture pass that back on and that's what we use for our time info and if none of those work well",
    "start": "1488320",
    "end": "1496200"
  },
  {
    "text": "we want to throw a new argument exception because we really don't know what's going on and you probably are using no to time wrong because it can't",
    "start": "1496200",
    "end": "1503399"
  },
  {
    "text": "be John sk's Bug we know that okay so let's change this to c 7 well I've got",
    "start": "1503399",
    "end": "1509919"
  },
  {
    "text": "about three or four different tests here that I'm going to check for so let's just do a a",
    "start": "1509919",
    "end": "1516760"
  },
  {
    "text": "switch on provider and the first one he has is that",
    "start": "1518200",
    "end": "1524840"
  },
  {
    "text": "null and if we get the case null I'm just going to",
    "start": "1525480",
    "end": "1531320"
  },
  {
    "text": "return get format info",
    "start": "1534440",
    "end": "1541159"
  },
  {
    "text": "from culture info. current culture okay so I'm combining a little",
    "start": "1542159",
    "end": "1549080"
  },
  {
    "text": "bit of stuff just to make this a bit cleaner and that if you look what will happen in the original code down below if provider is null I'm going to assign",
    "start": "1549080",
    "end": "1555559"
  },
  {
    "text": "it to current culture current culture is a culture info object so the next test",
    "start": "1555559",
    "end": "1561000"
  },
  {
    "text": "is going to succeed and then I'm going to drop down into that return get current info okay so my first",
    "start": "1561000",
    "end": "1569159"
  },
  {
    "text": "practice this you know now I've got to read about six or seven lines of code to make that conversion as to what actually",
    "start": "1569159",
    "end": "1574520"
  },
  {
    "text": "happens in the case when you pass a null provider it's nice clean code but I still have to do a little bit of",
    "start": "1574520",
    "end": "1580000"
  },
  {
    "text": "analysis to figure out exactly what's right that new line I just wrote is",
    "start": "1580000",
    "end": "1585919"
  },
  {
    "text": "really really clear you pass it null you get the time info for the current culture",
    "start": "1585919",
    "end": "1593200"
  },
  {
    "text": "groovy next one let's now just say is culture",
    "start": "1593200",
    "end": "1600279"
  },
  {
    "text": "info and we'll assign it to the same variable name because that's a nice way to do it and we're still going to",
    "start": "1600279",
    "end": "1608480"
  },
  {
    "text": "return get format info and now we're going to call that",
    "start": "1608480",
    "end": "1614039"
  },
  {
    "text": "culture info. current the variable that we just",
    "start": "1614039",
    "end": "1620640"
  },
  {
    "text": "assigned hate to make a bug on CH on stage because I want to submit this",
    "start": "1620640",
    "end": "1626840"
  },
  {
    "text": "PR and then the last one I'm going to grab these two comments because I think that's probably",
    "start": "1628320",
    "end": "1634799"
  },
  {
    "text": "important and then we're going to have a date time format",
    "start": "1639960",
    "end": "1645320"
  },
  {
    "text": "info",
    "start": "1647159",
    "end": "1650159"
  },
  {
    "text": "and here I'm going to grab that return",
    "start": "1655520",
    "end": "1660159"
  },
  {
    "text": "statement and I thought I grabbed the extra no yeah I did grab the extra one there there we",
    "start": "1666159",
    "end": "1673518"
  },
  {
    "text": "go I'm getting the red squiggly because I've left the code below that's red declares those same variables and now I",
    "start": "1674159",
    "end": "1681200"
  },
  {
    "text": "can delete this",
    "start": "1681200",
    "end": "1684039"
  },
  {
    "text": "code and if I didn't match any of the cases then we're just going to throw that argument exception so I've taken that 15 20 lines",
    "start": "1688120",
    "end": "1696320"
  },
  {
    "text": "of code that we had to snake through just a little bit and clean that up just a just a",
    "start": "1696320",
    "end": "1702519"
  },
  {
    "text": "touch nice cool so that's a one real World",
    "start": "1702519",
    "end": "1708480"
  },
  {
    "text": "example of working with pattern matching to do a few different type tests and",
    "start": "1708480",
    "end": "1714840"
  },
  {
    "text": "extract that information in a more clean fashion so let's look at the second",
    "start": "1714840",
    "end": "1723039"
  },
  {
    "text": "one if anyone was in Damian and uh David's talk on",
    "start": "1727360",
    "end": "1733640"
  },
  {
    "text": "Monday they talked about building tag helpers",
    "start": "1733640",
    "end": "1740039"
  },
  {
    "text": "and they talked about building tag",
    "start": "1740519",
    "end": "1743880"
  },
  {
    "text": "helpers yeah don't tell me you're going to fail on me on this one all right",
    "start": "1752600",
    "end": "1760320"
  },
  {
    "text": "fine I had this happen a few times because I've got a build that's slightly newer than they",
    "start": "1761120",
    "end": "1767039"
  },
  {
    "text": "have back over give me",
    "start": "1767039",
    "end": "1773960"
  },
  {
    "text": "this to switch to their branch and let's close that and reopen",
    "start": "1776399",
    "end": "1784360"
  },
  {
    "text": "it and now we'll migrate that again",
    "start": "1787480",
    "end": "1794320"
  },
  {
    "text": "yes cool",
    "start": "1794679",
    "end": "1800039"
  },
  {
    "text": "and as this loads what happens with the tag helper is you get this tag and the",
    "start": "1806679",
    "end": "1811880"
  },
  {
    "text": "information that you need may be stored in a few different ways and a few different places inside the tag",
    "start": "1811880",
    "end": "1818640"
  },
  {
    "text": "Helper and Damian talked about the particular code",
    "start": "1818640",
    "end": "1823679"
  },
  {
    "text": "there starts right here at line 45 where we're going to look at this",
    "start": "1826960",
    "end": "1833480"
  },
  {
    "text": "source which is the the particular attribute for the",
    "start": "1833480",
    "end": "1840360"
  },
  {
    "text": "source we're going to try to look at it as a string if that's null then we're going to walk through and look at this",
    "start": "1840360",
    "end": "1847440"
  },
  {
    "text": "as an HTML string that may maybe and if so we're going to grab its value and if",
    "start": "1847440",
    "end": "1853559"
  },
  {
    "text": "that path is null still then we're going to do some other code yeah this looks kind of ugly and you",
    "start": "1853559",
    "end": "1860840"
  },
  {
    "text": "know it's snaking through a few different cases there to unwind if the path is null we're going to start doing some stuff we're going to try to see if",
    "start": "1860840",
    "end": "1867240"
  },
  {
    "text": "it's an HTML context if that HTML context or content has a value if it",
    "start": "1867240",
    "end": "1874720"
  },
  {
    "text": "finally if it isn't an HTML string and it's some different content we're going to have to create a string writer and",
    "start": "1874720",
    "end": "1880039"
  },
  {
    "text": "write the path into another variable do some other bits and then we're going to snake through and make this other",
    "start": "1880039",
    "end": "1886279"
  },
  {
    "text": "source. value. two string and then eventually we're going to use it down",
    "start": "1886279",
    "end": "1891919"
  },
  {
    "text": "here this just feels buggy all right so",
    "start": "1891919",
    "end": "1898279"
  },
  {
    "text": "let's let's work on this all right we're going to do some",
    "start": "1898279",
    "end": "1903399"
  },
  {
    "text": "massive pair programming here because I'm probably going to need some help who's written tag helpers",
    "start": "1903399",
    "end": "1909519"
  },
  {
    "text": "anybody I'm on my own awesome all right so let's first let's start and say",
    "start": "1909519",
    "end": "1918039"
  },
  {
    "text": "okay so it looks like I actually want to switch not on path but on source.",
    "start": "1918039",
    "end": "1925360"
  },
  {
    "text": "value all right and if source. value is an HTML string right that's that first",
    "start": "1925880",
    "end": "1933240"
  },
  {
    "text": "kind of test that's up there so we're going to do a case HTML string and let's give it a",
    "start": "1933240",
    "end": "1943919"
  },
  {
    "text": "name and it looks like we really care whether or not that value is null or not so let's just let's just be careful here",
    "start": "1943960",
    "end": "1950559"
  },
  {
    "text": "because it there's there's this little bit here where I talked with Daman and David yesterday as I was working up this",
    "start": "1950559",
    "end": "1957960"
  },
  {
    "text": "demo where if you look very carefully this is where like pattern matching as a as a syntax if you look carefully path.",
    "start": "1957960",
    "end": "1964600"
  },
  {
    "text": "source is HTML string okay and then I'm using the Elvis operator so if it's null this thing is going to return null but",
    "start": "1964600",
    "end": "1971279"
  },
  {
    "text": "there's another path where it is an HTML string and the value for it is null",
    "start": "1971279",
    "end": "1976960"
  },
  {
    "text": "which Damen said that's evil it should never happen but I don't like to introduce bugs so let's just make sure that doesn't happen so it could be",
    "start": "1976960",
    "end": "1983559"
  },
  {
    "text": "possible so I'm just going to say it's HTML string and I'm going to say when HTML",
    "start": "1983559",
    "end": "1989519"
  },
  {
    "text": "string. value does not equal null because then I just feel a little",
    "start": "1989519",
    "end": "1995039"
  },
  {
    "text": "bit better about this case and if that happens well then I'm just going to",
    "start": "1995039",
    "end": "2001000"
  },
  {
    "text": "say that path equals HTML string. value",
    "start": "2001000",
    "end": "2007240"
  },
  {
    "text": "and that's that's good that takes care of that part cool well now otherwise it looks like",
    "start": "2007240",
    "end": "2013159"
  },
  {
    "text": "what I need to check and see is if I have an IH HTML",
    "start": "2013159",
    "end": "2020440"
  },
  {
    "text": "content and it looks like that's path HTML content was the bit they",
    "start": "2022240",
    "end": "2028720"
  },
  {
    "text": "used and now I need to do this bit of code where I'm going to say and it looks like I'm testing null there too so let's",
    "start": "2028720",
    "end": "2034919"
  },
  {
    "text": "actually and I don't need to add that test okay okay because that source. value as ihtml",
    "start": "2034919",
    "end": "2042080"
  },
  {
    "text": "content that will return n if it's not an HTML content right and we already saw",
    "start": "2042080",
    "end": "2047240"
  },
  {
    "text": "that with a pattern match it's not going to match if it's null so I'm not going to get a null case in here so okay I'm",
    "start": "2047240",
    "end": "2054358"
  },
  {
    "text": "in good shape there so now I can just copy this code because I don't really want to change it and that now goes up under here we've",
    "start": "2054359",
    "end": "2062679"
  },
  {
    "text": "Now set path that's all good okay what else could it be so we've",
    "start": "2062679",
    "end": "2068800"
  },
  {
    "text": "got an HTML string we've got a path that HTML",
    "start": "2068800",
    "end": "2074398"
  },
  {
    "text": "content well looks like the other path that we might have is we're going to say source.",
    "start": "2074399",
    "end": "2079960"
  },
  {
    "text": "value. two string okay sounds good well I already kind of",
    "start": "2079960",
    "end": "2087358"
  },
  {
    "text": "did that up there unless it is a string so if path is null so if value is",
    "start": "2087359",
    "end": "2094240"
  },
  {
    "text": "a string looks like we had that up here before so we should say k case string s and we're just going to",
    "start": "2094240",
    "end": "2101960"
  },
  {
    "text": "say path equals s and then we need our",
    "start": "2101960",
    "end": "2110200"
  },
  {
    "text": "break and now here we're just going to say this is default string because I feel a little",
    "start": "2110200",
    "end": "2116720"
  },
  {
    "text": "bit better about the structure of that code so it could be a string it could be an HTML string it could be an HTML",
    "start": "2116720",
    "end": "2125040"
  },
  {
    "text": "content could be some other thing so then let's go our",
    "start": "2125040",
    "end": "2132400"
  },
  {
    "text": "default and here I'm going to say path",
    "start": "2132400",
    "end": "2137599"
  },
  {
    "text": "equals C.V value question mark. twring so it's could still be null if",
    "start": "2137599",
    "end": "2145680"
  },
  {
    "text": "you know really truly evil evil things happen and that's the case that kind of",
    "start": "2145680",
    "end": "2150839"
  },
  {
    "text": "falls through here at the bottom Al I'm going to add the question mark that just in case",
    "start": "2150839",
    "end": "2159400"
  },
  {
    "text": "okay so now I remove close to 20 lines of code",
    "start": "2159400",
    "end": "2165280"
  },
  {
    "text": "there and I replace it with oh close to 20 lines of",
    "start": "2165400",
    "end": "2171720"
  },
  {
    "text": "code but it's so much cooler now uh in in",
    "start": "2171720",
    "end": "2177400"
  },
  {
    "text": "seriousness when I look at this code once I get used to the fact that there's some new syntax here I find that this",
    "start": "2177400",
    "end": "2184520"
  },
  {
    "text": "the structure of it is relatively easy simple okay and as I was walking through",
    "start": "2184520",
    "end": "2191240"
  },
  {
    "text": "doing this demo and this is you know after practicing and analyzing the code and doing it and thinking about",
    "start": "2191240",
    "end": "2198599"
  },
  {
    "text": "it I feel in converting it I had to understand exactly all the paths through",
    "start": "2198599",
    "end": "2204119"
  },
  {
    "text": "those multiple if else what could be what value statements here there are",
    "start": "2204119",
    "end": "2210960"
  },
  {
    "text": "four distinct cases all of which are clear all of which are easier to read so",
    "start": "2210960",
    "end": "2218040"
  },
  {
    "text": "that's one of the things that we want to do when we're adding new syntax into the C language is the developer that comes",
    "start": "2218040",
    "end": "2224000"
  },
  {
    "text": "after this or Damian when he reviews My poll request should be able to look at",
    "start": "2224000",
    "end": "2229079"
  },
  {
    "text": "and analyze this code and say yeah this looks pretty good I think I like the way this is set up I understand what it does",
    "start": "2229079",
    "end": "2236920"
  },
  {
    "text": "you may say nasty things we'll see but it it looks looks noticeably cleaner we",
    "start": "2236920",
    "end": "2242640"
  },
  {
    "text": "have some really good stuff that comes into there okay so",
    "start": "2242640",
    "end": "2248280"
  },
  {
    "text": "do I make those poll requests I'm actually not going to make them on stage but I will do them later this afternoon",
    "start": "2248280",
    "end": "2253400"
  },
  {
    "text": "and the reason is I'm working on a build on this machine right now that has slightly newer stuff that kind of breaks",
    "start": "2253400",
    "end": "2259520"
  },
  {
    "text": "the project system a little bit um so I can't build either one of these projects",
    "start": "2259520",
    "end": "2264839"
  },
  {
    "text": "completely on this machine and I'd like to actually build them and and in the case of not to time run all the tests",
    "start": "2264839",
    "end": "2270720"
  },
  {
    "text": "before I submit that PR um but it should be done later today so two new bits of",
    "start": "2270720",
    "end": "2277800"
  },
  {
    "text": "real world examples of how in both cases what we think is if I look at the change",
    "start": "2277800",
    "end": "2284400"
  },
  {
    "text": "no no I'm not going to look there that's way too small but if I look at the changes I made both here and in Nota",
    "start": "2284400",
    "end": "2291680"
  },
  {
    "text": "time we took code that required a fair amount of analysis and made it",
    "start": "2292680",
    "end": "2299079"
  },
  {
    "text": "noticeably simpler it's easier to analyze and",
    "start": "2299079",
    "end": "2305119"
  },
  {
    "text": "understand all right so let's finish up with a few more ideas of where some things might go and some of the",
    "start": "2305119",
    "end": "2311040"
  },
  {
    "text": "conclusions that we have so what we really want to do here what really is going on with pattern matching and c 7",
    "start": "2311040",
    "end": "2316560"
  },
  {
    "text": "right now is taking a very tentative steps into this world pattern matching",
    "start": "2316560",
    "end": "2321800"
  },
  {
    "text": "Expressions enable a concise test and extract syntax so in all cases we're",
    "start": "2321800",
    "end": "2327280"
  },
  {
    "text": "testing something and extracting information from it and then we can with confidence we can work with that",
    "start": "2327280",
    "end": "2332920"
  },
  {
    "text": "information knowing that things are set and it's based in an object's shape",
    "start": "2332920",
    "end": "2339319"
  },
  {
    "text": "as you read some of the specs one of the the terms that you'll hear C has a normative type system it's based on",
    "start": "2339319",
    "end": "2347160"
  },
  {
    "text": "names typically all of our classes have names our strs have names and for two",
    "start": "2347160",
    "end": "2352359"
  },
  {
    "text": "objects to be the same type they have to have the same class name or struct name",
    "start": "2352359",
    "end": "2359119"
  },
  {
    "text": "as we get into this idea of patterns and tupal and stuff we're doing what's called structural typing two objects have the same type if",
    "start": "2359119",
    "end": "2366800"
  },
  {
    "text": "they're shaped is the same and we'll Define shape to say they have the same properties",
    "start": "2366800",
    "end": "2372720"
  },
  {
    "text": "and same property types same property names okay so that's really what we're",
    "start": "2372720",
    "end": "2378480"
  },
  {
    "text": "doing we're moving a little bit more away from objects a little bit little bit could think it's Dynamic but it",
    "start": "2378480",
    "end": "2384319"
  },
  {
    "text": "really isn't it's all it's all static typing and then let's look back at this",
    "start": "2384319",
    "end": "2389480"
  },
  {
    "text": "code just a bit and discuss a bit about some of the syntax rules so I'm going to go back to the",
    "start": "2389480",
    "end": "2395560"
  },
  {
    "text": "small demo and some of the last rules that are that",
    "start": "2395560",
    "end": "2401720"
  },
  {
    "text": "play into pattern matching",
    "start": "2401720",
    "end": "2407680"
  },
  {
    "text": "syntax once again C trying to be a pit of success language it's hard to write code that doesn't work the scope of",
    "start": "2408240",
    "end": "2415440"
  },
  {
    "text": "these variables when you extract when you test and extract should be the scope",
    "start": "2415440",
    "end": "2422160"
  },
  {
    "text": "inside that block underneath it the one exception to that is an if statement because of how a couple things",
    "start": "2422160",
    "end": "2431480"
  },
  {
    "text": "work which is that if I were just make this modification",
    "start": "2431480",
    "end": "2437400"
  },
  {
    "text": "here the scope of s right here is valid anywhere in this else",
    "start": "2437400",
    "end": "2446520"
  },
  {
    "text": "Clause so that means it is in scope from here through here",
    "start": "2446520",
    "end": "2453480"
  },
  {
    "text": "okay now the scope of I is anywhere in the",
    "start": "2453480",
    "end": "2461599"
  },
  {
    "text": "method okay and that's kind of because to be an if statement it has to be in the",
    "start": "2461599",
    "end": "2467200"
  },
  {
    "text": "enclosing block so for any any um pattern match variable its scope",
    "start": "2467200",
    "end": "2473119"
  },
  {
    "text": "is the block that's enclosing the is however we also have definite assignment",
    "start": "2473119",
    "end": "2479760"
  },
  {
    "text": "rules so if I try to use let's say this variable I if I come down here and I try to do a",
    "start": "2479760",
    "end": "2486839"
  },
  {
    "text": "right line of I okay it's in scope but I will get a compiler error",
    "start": "2486839",
    "end": "2492839"
  },
  {
    "text": "that says it's a use of an unassigned local variable so it hasn't been assigned the only time that I is",
    "start": "2492839",
    "end": "2499240"
  },
  {
    "text": "assigned it is definitely assigned underneath this if so by combining this test and the",
    "start": "2499240",
    "end": "2507680"
  },
  {
    "text": "extraction one of the rules that is very important is you can't misuse those variables in a place where they didn't",
    "start": "2507680",
    "end": "2513319"
  },
  {
    "text": "get assigned when the test didn't actually pass okay",
    "start": "2513319",
    "end": "2519040"
  },
  {
    "text": "other one's just for convenience because it's just plain time if you heard John on",
    "start": "2519040",
    "end": "2525040"
  },
  {
    "text": "Wednesday is the case blocks introduced new Scopes in c 7 in terms",
    "start": "2525040",
    "end": "2531640"
  },
  {
    "text": "of um uh scoping variables so there is you can squint kind of and see curly braces",
    "start": "2531640",
    "end": "2540160"
  },
  {
    "text": "around those case blocks so that that is a distinct different eye in those first",
    "start": "2540160",
    "end": "2545760"
  },
  {
    "text": "two cases okay so what's going to happen in the future with different pattern matching",
    "start": "2545760",
    "end": "2553280"
  },
  {
    "text": "well the best place to find out is if you go to your favorite",
    "start": "2553280",
    "end": "2559160"
  },
  {
    "text": "searching engine and if you search for Roslin pattern matching and GitHub on",
    "start": "2559160",
    "end": "2567480"
  },
  {
    "text": "any reasonable search engine this page will be the first page you find it's on the rosin repo blob features",
    "start": "2567480",
    "end": "2575119"
  },
  {
    "text": "patterns SL do/ features FL patterns which is why I said search for GitHub",
    "start": "2575119",
    "end": "2580240"
  },
  {
    "text": "Roslin patterns we've talked about the is expression talked about our type",
    "start": "2580240",
    "end": "2587079"
  },
  {
    "text": "pattern constant pattern we already know about we're testing against the value some of these are the ones that",
    "start": "2587079",
    "end": "2593240"
  },
  {
    "text": "aren't in the build right now they're still being talked at and worked on the VAR pattern more or less implicitly is",
    "start": "2593240",
    "end": "2600359"
  },
  {
    "text": "there V will match anything it Returns the same type of what was there so in my",
    "start": "2600359",
    "end": "2605839"
  },
  {
    "text": "Expressions here if I were to do case",
    "start": "2605839",
    "end": "2613280"
  },
  {
    "text": "VAR o which I don't think and then down here oh is an object",
    "start": "2613280",
    "end": "2620480"
  },
  {
    "text": "so you can see if I press the dot it's kind of small I get equals get hash code get type in two string so this",
    "start": "2620480",
    "end": "2626760"
  },
  {
    "text": "particular case matches anything the VAR pattern it'll match",
    "start": "2626760",
    "end": "2631960"
  },
  {
    "text": "whatever's on the right hand side and it will return the same thing",
    "start": "2631960",
    "end": "2637680"
  },
  {
    "text": "typed the same way wild card and positional patterns",
    "start": "2637680",
    "end": "2643160"
  },
  {
    "text": "are under discussion under work and then we will have the ability",
    "start": "2643160",
    "end": "2650240"
  },
  {
    "text": "to override operator is is also in",
    "start": "2650240",
    "end": "2655559"
  },
  {
    "text": "here where you will be able to Define an operator is that can take an object and",
    "start": "2655559",
    "end": "2660880"
  },
  {
    "text": "return a different type of object so you can write your own patterns if you",
    "start": "2660880",
    "end": "2666040"
  },
  {
    "text": "will",
    "start": "2666040",
    "end": "2669040"
  },
  {
    "text": "the rest of these are pretty similar and finally we will have I think kathen went through this somewhat is destructuring",
    "start": "2671400",
    "end": "2676839"
  },
  {
    "text": "assignment which I think is more covered under tupal but if you want to get involved in these",
    "start": "2676839",
    "end": "2683800"
  },
  {
    "text": "discussions we can you can participate here for any of the things that are still",
    "start": "2683920",
    "end": "2690440"
  },
  {
    "text": "working uh finally as we finish up and as I take questions um effective C the",
    "start": "2692119",
    "end": "2697319"
  },
  {
    "text": "Third Edition is available now because it's available now at cover C 6 I'm",
    "start": "2697319",
    "end": "2702480"
  },
  {
    "text": "working on a second edition of more effective C which will cover the features in c",
    "start": "2702480",
    "end": "2708640"
  },
  {
    "text": "7 I'm going to close with a bit of work on what's going on in the net Foundation",
    "start": "2708640",
    "end": "2714319"
  },
  {
    "text": "where the managed language compilers are part of that Foundation there are a few bits of net",
    "start": "2714319",
    "end": "2722240"
  },
  {
    "text": "that are now open source and public I like the fact that it keeps taking me longer and longer to work work on this",
    "start": "2722240",
    "end": "2727680"
  },
  {
    "text": "particular slide as I walk through and watch what happens more and more things are coming",
    "start": "2727680",
    "end": "2732760"
  },
  {
    "text": "out VST test came out and was open sourced I think yesterday was when that announcement was so there are more",
    "start": "2732760",
    "end": "2738480"
  },
  {
    "text": "different areas that you are open sourced so in general what do we think",
    "start": "2738480",
    "end": "2743599"
  },
  {
    "text": "about in terms of Open Source Investments if you look at theet framework everything in involving",
    "start": "2743599",
    "end": "2749760"
  },
  {
    "text": "asp.net is if you look at net core well all of it if you look at zamarin all of",
    "start": "2749760",
    "end": "2755319"
  },
  {
    "text": "it if you look at the infrastructure underneath each one of those compilers language runtime",
    "start": "2755319",
    "end": "2762599"
  },
  {
    "text": "components net standard in many ways will be open- sourced fully supported",
    "start": "2762599",
    "end": "2767760"
  },
  {
    "text": "crossplatform Windows Linux OSX visual student support and so",
    "start": "2767760",
    "end": "2775318"
  },
  {
    "text": "on these are out of date I think we've had even more now which is really",
    "start": "2776040",
    "end": "2781319"
  },
  {
    "text": "awesome um and finally couple a few links on",
    "start": "2781319",
    "end": "2788839"
  },
  {
    "text": "areas that you can work through in terms of getting more information about net and so on",
    "start": "2788839",
    "end": "2795200"
  },
  {
    "text": "and take the survey get swag and finally just how",
    "start": "2795200",
    "end": "2801559"
  },
  {
    "text": "serious we are about open source even our swag repo is open source if you have ideas go ahead and submit a",
    "start": "2801559",
    "end": "2808160"
  },
  {
    "text": "PR so we have a bit of time left I think the demos went just a little quicker than I was guessing are there questions",
    "start": "2808160",
    "end": "2813920"
  },
  {
    "text": "on anything related to pattern matching and C",
    "start": "2813920",
    "end": "2818839"
  },
  {
    "text": "yeah you show the example with the VAR in the case mhm how is",
    "start": "2821760",
    "end": "2828040"
  },
  {
    "text": "this compiled because disappears comp how is it compiled how is the VAR case",
    "start": "2828040",
    "end": "2834800"
  },
  {
    "text": "at compile time okay let's just put it right",
    "start": "2834800",
    "end": "2839920"
  },
  {
    "text": "here",
    "start": "2845839",
    "end": "2848839"
  },
  {
    "text": "okay so how it is it is it compiled at compile time what normally happens with VAR if I assign VAR to some object it's",
    "start": "2859400",
    "end": "2867760"
  },
  {
    "text": "just reped by by the type that's on the right hand side of that assignment it doesn't exist right so if I look at the",
    "start": "2867760",
    "end": "2875319"
  },
  {
    "text": "right hand side of this assignment what that that particular pattern is saying is I want to take that object to test",
    "start": "2875319",
    "end": "2881480"
  },
  {
    "text": "and I want to assign it to a new variable obj what is the type of object to test",
    "start": "2881480",
    "end": "2887680"
  },
  {
    "text": "the static type object it's object so what would be",
    "start": "2887680",
    "end": "2892800"
  },
  {
    "text": "the type of obj okay object right so the VAR pattern",
    "start": "2892800",
    "end": "2899880"
  },
  {
    "text": "is in part there for um syntactic neness and in part there because there",
    "start": "2899880",
    "end": "2907240"
  },
  {
    "text": "there are patterns where it is reasonably useful if I want to do something in the default case I can assign a variable and do some work with",
    "start": "2907240",
    "end": "2913559"
  },
  {
    "text": "it okay so VAR does return the VAR pattern",
    "start": "2913559",
    "end": "2919520"
  },
  {
    "text": "will return a new label to the same object if it is a value type it will",
    "start": "2919520",
    "end": "2926599"
  },
  {
    "text": "return a new value type with the same value right but based on the static type of",
    "start": "2926599",
    "end": "2933480"
  },
  {
    "text": "that object make sense",
    "start": "2933480",
    "end": "2938599"
  },
  {
    "text": "okay should get rid of one more there other questions",
    "start": "2938599",
    "end": "2945798"
  },
  {
    "text": "yes",
    "start": "2946599",
    "end": "2949599"
  },
  {
    "text": "I I missed the last part of",
    "start": "2952520",
    "end": "2956760"
  },
  {
    "text": "that if and then if you use default I think you would get that let",
    "start": "2958400",
    "end": "2964480"
  },
  {
    "text": "me just put that code back right so I have VAR if I remove all these which is",
    "start": "2964480",
    "end": "2970920"
  },
  {
    "text": "unreachable",
    "start": "2970920",
    "end": "2973558"
  },
  {
    "text": "code looks like that works I'm surprised that may be a bug I may have to I'm G to",
    "start": "2976520",
    "end": "2984119"
  },
  {
    "text": "ask about that one because that if it's null yeah it would pass it",
    "start": "2984119",
    "end": "2989599"
  },
  {
    "text": "would work with null I'm going to ask Neil because I'm not sure how that's the spec deals with",
    "start": "2989599",
    "end": "2996440"
  },
  {
    "text": "that one that is a really interesting case it should do one of the two you're right but I think it would I'll have to",
    "start": "2996440",
    "end": "3003160"
  },
  {
    "text": "ask I saw another hand go up that's a good one good",
    "start": "3003160",
    "end": "3009240"
  },
  {
    "text": "question yes will it work with two questions with",
    "start": "3010280",
    "end": "3015480"
  },
  {
    "text": "tles and generics as well can you do a generic case T where you",
    "start": "3015480",
    "end": "3022400"
  },
  {
    "text": "pass okay at the moment I haven't gotten working with tuples right and I don't know if that's just not in this build or",
    "start": "3023000",
    "end": "3030000"
  },
  {
    "text": "not specified yet okay what about generics what about generics",
    "start": "3030000",
    "end": "3037200"
  },
  {
    "text": "um let's let's think of what you mean here so let's let me remove the V case up",
    "start": "3039599",
    "end": "3047839"
  },
  {
    "text": "here okay and let's say I were to write",
    "start": "3048839",
    "end": "3053839"
  },
  {
    "text": "a yeah so we want a pattern of",
    "start": "3055119",
    "end": "3061319"
  },
  {
    "text": "T we're going to take in a t thing",
    "start": "3061319",
    "end": "3066599"
  },
  {
    "text": "right and now we want to switch on",
    "start": "3066599",
    "end": "3071240"
  },
  {
    "text": "thing right so you would want to do something",
    "start": "3073440",
    "end": "3079119"
  },
  {
    "text": "like is if",
    "start": "3079119",
    "end": "3082240"
  },
  {
    "text": "thing like that I mean that would always pass right because it's generic",
    "start": "3085559",
    "end": "3093720"
  },
  {
    "text": "um and if I did a case of T if we did it with so I'm going to switch on",
    "start": "3093720",
    "end": "3104079"
  },
  {
    "text": "thing and here if I did a case T okay that would once again always",
    "start": "3104359",
    "end": "3110760"
  },
  {
    "text": "pass right okay let's just let's just have some fun",
    "start": "3114240",
    "end": "3120640"
  },
  {
    "text": "let's just make this crazy let's see if this will",
    "start": "3120640",
    "end": "3125599"
  },
  {
    "text": "compile",
    "start": "3125960",
    "end": "3128960"
  },
  {
    "text": "okay",
    "start": "3131520",
    "end": "3134520"
  },
  {
    "text": "right H",
    "start": "3145520",
    "end": "3153119"
  },
  {
    "text": "why that's what dve from tea that could",
    "start": "3154559",
    "end": "3160000"
  },
  {
    "text": "be I'm not sure that that's correct either because not all",
    "start": "3160000",
    "end": "3166160"
  },
  {
    "text": "T's are T",
    "start": "3166160",
    "end": "3169640"
  },
  {
    "text": "derived what's that",
    "start": "3172760",
    "end": "3178440"
  },
  {
    "text": "yeah now it's telling me that this case is handled by a previous case which I don't think is correct this is you guys",
    "start": "3179000",
    "end": "3185440"
  },
  {
    "text": "are smart this is good is that an actual compile or is that just Visual Studio oh that's an",
    "start": "3185440",
    "end": "3192000"
  },
  {
    "text": "actual compiler error it's using the same analyzer so yeah if I compile this right now I'm going to get",
    "start": "3192000",
    "end": "3198960"
  },
  {
    "text": "yeah switch case has already been handled by a previous case so we can do things maybe",
    "start": "3198960",
    "end": "3207200"
  },
  {
    "text": "that's another good one I'm going to have to ask about that one too so we have two good ones to ask the one there",
    "start": "3207200",
    "end": "3212599"
  },
  {
    "text": "and the one about both the VAR case and the default case",
    "start": "3212599",
    "end": "3218640"
  },
  {
    "text": "cool what happens if I change the argu oh so if I were to change",
    "start": "3221760",
    "end": "3229960"
  },
  {
    "text": "this to object",
    "start": "3229960",
    "end": "3235440"
  },
  {
    "text": "oo I want to go back I want to see what happens if we reverse",
    "start": "3235440",
    "end": "3241640"
  },
  {
    "text": "them okay that makes",
    "start": "3247359",
    "end": "3250960"
  },
  {
    "text": "sense just adding that note so I remember that later awesome any other",
    "start": "3260760",
    "end": "3268838"
  },
  {
    "text": "questions okay we're getting close on time and I will be happy to answer any questions up here toward the end and",
    "start": "3273200",
    "end": "3279720"
  },
  {
    "text": "again I will post the slides and the demos um sometime later today also make",
    "start": "3279720",
    "end": "3285720"
  },
  {
    "text": "those two poll requests with the code we changed later today and watch on uh the GitHub repo",
    "start": "3285720",
    "end": "3294079"
  },
  {
    "text": "for comments and changes on any of the new pattern syntax that could be coming soon to a c near you thank you very much",
    "start": "3294079",
    "end": "3304480"
  }
]