[
  {
    "start": "0",
    "end": "122000"
  },
  {
    "text": "um everybody Welcome uh my name is Spencer schneidenbach and I'm here to tell you uh about a maintainable",
    "start": "3719",
    "end": "9679"
  },
  {
    "text": "opinionated emphasis on opinionated right uh way to build applications um",
    "start": "9679",
    "end": "15200"
  },
  {
    "text": "using aspet core specifically rest apis or apis in general um can I get a quick show of hands how many people are using",
    "start": "15200",
    "end": "22160"
  },
  {
    "text": "ASP net core today okay few of you good good how many are using I'm going to use this a lot",
    "start": "22160",
    "end": "28880"
  },
  {
    "text": "old asp web API like I don't think it's old I think it's awesome um cool a lot of you",
    "start": "28880",
    "end": "35120"
  },
  {
    "text": "okay so what I'm telling you today I mean it has core in the title but everything I'm telling you today um applies just as well to aspet web API",
    "start": "35120",
    "end": "42760"
  },
  {
    "text": "there's a couple of things you need to change um other than that it's pretty much mostly the same so if you have any",
    "start": "42760",
    "end": "47960"
  },
  {
    "text": "questions about anything please reach reach out to me I'll have my contact information on on the slides so oh and",
    "start": "47960",
    "end": "54680"
  },
  {
    "text": "neidenbach on Twitter so it's good way to get a hold of me um first thing that I have to say is that uh my co-host",
    "start": "54680",
    "end": "62280"
  },
  {
    "text": "Heather and I are doing a interview show with uh some of the top speakers here at",
    "start": "62280",
    "end": "67880"
  },
  {
    "text": "NDC um and it's coming July 15th so keep an eye out for it we've got some really cool things they teach you something in",
    "start": "67880",
    "end": "74159"
  },
  {
    "text": "five minutes it's awesome okay um housekeeping thing number two because I",
    "start": "74159",
    "end": "79479"
  },
  {
    "text": "already talked about pubcon right awesome um everything that you you see everything that I'm telling you you can",
    "start": "79479",
    "end": "86320"
  },
  {
    "text": "you can me on Twitter schneidenbach you know I wouldn't you know try to spell it if you just take a picture right um or",
    "start": "86320",
    "end": "92520"
  },
  {
    "text": "you can go to rest. sides.now",
    "start": "92520",
    "end": "96520"
  },
  {
    "text": "awesome so uh let's set the stage a little bit right so you uh your boss comes to you you're a web developer a",
    "start": "121439",
    "end": "127000"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "lot of ASP net developers in here which is awesome I love aspnet and he says uh he or she says we need a new single page",
    "start": "127000",
    "end": "133360"
  },
  {
    "text": "application right or we need a new rest API we need it's something that our customers want to be able to consume",
    "start": "133360",
    "end": "138599"
  },
  {
    "text": "they want to get data out of our API they want to create data inside of our application we want to create a system",
    "start": "138599",
    "end": "144360"
  },
  {
    "text": "where they can integrate really well I'm an integration specialist so that's like really important to me uh so you say",
    "start": "144360",
    "end": "150680"
  },
  {
    "text": "awesome okay I can do that I'm a Discerning developer I know exactly what I need to do I'm going to fire up aspnet",
    "start": "150680",
    "end": "156000"
  },
  {
    "text": "core right or old aspnet web API right old because I still use aspnet web API",
    "start": "156000",
    "end": "161920"
  },
  {
    "text": "out of curiosity how many web forms people here this is my favorite question to ask because inevitably there's like a",
    "start": "161920",
    "end": "167640"
  },
  {
    "text": "couple of hands that like creep up silently but they don't want to admit it but look I'm I'm a web forms developer too okay a awesome right and I saw",
    "start": "167640",
    "end": "174519"
  },
  {
    "text": "another guy over here right so web forms you probably can't do this stuff but still cool to use right maybe not but",
    "start": "174519",
    "end": "181080"
  },
  {
    "text": "anyways I just like to ask that question so old old is relative again all of this applicable to ASP net web API right so",
    "start": "181080",
    "end": "188080"
  },
  {
    "text": "you're going to choose one of those two things and you want to go from zero to make magic happen as quickly as possible",
    "start": "188080",
    "end": "195159"
  },
  {
    "start": "190000",
    "end": "190000"
  },
  {
    "text": "Right like you want to see something on the page you're an angular developer you're a react developer or you want to see a record go to the database so you",
    "start": "195159",
    "end": "201720"
  },
  {
    "text": "want to make something that gets you from zero to make magic happen as quickly as possible Right you want to do something right and the first thing you",
    "start": "201720",
    "end": "208080"
  },
  {
    "text": "think of is scaffolding scaffolding scaffolding is great right it's the promises that it's amazing and that it's",
    "start": "208080",
    "end": "215239"
  },
  {
    "text": "productivity and awesomeness and in a lot of ways it is scaffolding is cool scaffolding is Magic right it's kind of",
    "start": "215239",
    "end": "222640"
  },
  {
    "text": "the promise right uh and it's very easy to do right let's take a tour let's take a tour of a scaffolded application a",
    "start": "222640",
    "end": "228799"
  },
  {
    "text": "scaffolded aspet web API uh application in this case it's core all in visual studio right because Microsoft provides",
    "start": "228799",
    "end": "235239"
  },
  {
    "text": "all this great tooling to you you might as well use it right so at first uh let's introduce our friend the employee",
    "start": "235239",
    "end": "242079"
  },
  {
    "text": "object uh let's say You're A system that has a representation for employees right uh you have an ID you have a first and",
    "start": "242079",
    "end": "248120"
  },
  {
    "text": "last name that you notice are decorated with the required attributes because they're required data and you've got a",
    "start": "248120",
    "end": "253879"
  },
  {
    "text": "date of birth and a date of hire and a social security number wait where am I",
    "start": "253879",
    "end": "259639"
  },
  {
    "text": "what what the heck is a social security number I made this mistake in London I had this slide up and I was like oh I",
    "start": "259639",
    "end": "265800"
  },
  {
    "text": "don't know that they know what a social security number is I didn't make that mistake again so I I'm in Norway so I'm",
    "start": "265800",
    "end": "271039"
  },
  {
    "text": "going to talk about the birth number or the national ID number right or that",
    "start": "271039",
    "end": "276880"
  },
  {
    "text": "word right so you the bottom line is that it's the employee object is an object that is part of a payroll system",
    "start": "276880",
    "end": "284199"
  },
  {
    "start": "281000",
    "end": "281000"
  },
  {
    "text": "right something like that a lot of people deal with payroll a lot of people deal with employee records in some way",
    "start": "284199",
    "end": "289400"
  },
  {
    "text": "and it contains sensitive data in this case I'll just say SSN but national ID number birth number whatever you want to",
    "start": "289400",
    "end": "295080"
  },
  {
    "text": "call it it's sensitive data so you need to treat it you need to treat it differently right you need to treat in a",
    "start": "295080",
    "end": "300120"
  },
  {
    "text": "way that um you need to encrypt it right all that kind of stuff so that's setting the stage a little bit right and you're",
    "start": "300120",
    "end": "305520"
  },
  {
    "text": "the developer you love visual studio and you love visual Studios tooling and you love to get stuff done so what do you do",
    "start": "305520",
    "end": "311600"
  },
  {
    "text": "you go to file new project and you choose aspet core and then maybe you add",
    "start": "311600",
    "end": "316840"
  },
  {
    "text": "any framework right this is opinionated talk I like nity framework you may use something different and that's okay you",
    "start": "316840",
    "end": "322000"
  },
  {
    "text": "may use web API plus something completely you may use n hibernate and that's okay right all of these things so",
    "start": "322000",
    "end": "328120"
  },
  {
    "text": "these are the this is the core of your application right you've got a something that processes requests something that talks to a database you go to file new",
    "start": "328120",
    "end": "335319"
  },
  {
    "text": "project and this is kind of what you're looking at now for those of you uh there was about I think about half of people",
    "start": "335319",
    "end": "340360"
  },
  {
    "text": "have looked at at core uh there's a few things that are different so first thing and probably the best change I can think",
    "start": "340360",
    "end": "346240"
  },
  {
    "text": "of is now none of the static files and the code files and the views and the controllers the Cs files right they're",
    "start": "346240",
    "end": "352360"
  },
  {
    "text": "they used to be in web API they're all intermingled they're all together and then ASP IIs just serves them up",
    "start": "352360",
    "end": "358280"
  },
  {
    "text": "differently based on the file type right but in this case now core probably the number one Improvement maybe not the",
    "start": "358280",
    "end": "365199"
  },
  {
    "text": "number one Improvement one of the one of the number one improvements was moving that all to a www route so all of your",
    "start": "365199",
    "end": "371080"
  },
  {
    "text": "static data now goes and is served out of that folder right so if you've got scripts do script um folder inside of",
    "start": "371080",
    "end": "378919"
  },
  {
    "text": "the path of your directory you have to do some kind of process to move those files over to the WW root directory uh",
    "start": "378919",
    "end": "384680"
  },
  {
    "text": "before they're served so that's awesome other than that there's really not much changed you've still got um you've still",
    "start": "384680",
    "end": "390720"
  },
  {
    "text": "got controllers models views those folders stay the same and",
    "start": "390720",
    "end": "397440"
  },
  {
    "text": "oops and you have um this is a little different so web config is a little bit",
    "start": "397440",
    "end": "402560"
  },
  {
    "text": "some of its functionality has been replaced with uh the app settings. Json file right there's a couple other things",
    "start": "402560",
    "end": "408800"
  },
  {
    "text": "uh including the startup.cs the startup.cs is a lot different now um",
    "start": "408800",
    "end": "414440"
  },
  {
    "text": "used to how many people are familiar with global. asax and you know have to play in that phone okay know most most",
    "start": "414440",
    "end": "420400"
  },
  {
    "text": "ASB net developers are anybody intermingle it with uh startup.cs they have both existing in their web API or",
    "start": "420400",
    "end": "426639"
  },
  {
    "text": "MVC project okay a few of you so startup CS has really taken the place of what global. asax really did which is just",
    "start": "426639",
    "end": "434000"
  },
  {
    "text": "like handle uh the startup of the application right you're handling the startup of the application and you're",
    "start": "434000",
    "end": "439800"
  },
  {
    "text": "defining in this file this is a little different from startup.cs that you use in web API you're defining all the",
    "start": "439800",
    "end": "445879"
  },
  {
    "text": "services that are used inside of your application right so this is all the stuff that core needs to run and nothing",
    "start": "445879",
    "end": "452840"
  },
  {
    "text": "is put there by default when you new up a web API or an MVC project uh the the",
    "start": "452840",
    "end": "459560"
  },
  {
    "text": "handlers for uh ASP net web API and MVC they run through when you make a request",
    "start": "459560",
    "end": "464639"
  },
  {
    "text": "they run through well maybe this needs to handle it no need to pass it on to this need to pass it on to this right it",
    "start": "464639",
    "end": "469720"
  },
  {
    "text": "goes through a chain of processes and it'll always run every time and in a and",
    "start": "469720",
    "end": "474960"
  },
  {
    "text": "ASP net core you don't have that you don't need that so you actually opt into everything you don't even serve static",
    "start": "474960",
    "end": "481159"
  },
  {
    "text": "files by default you have to add in you have to opt the you have to opt those things in right so you get to pick and",
    "start": "481159",
    "end": "487560"
  },
  {
    "text": "choose what you want but most people will start with just ad MVC right and that'll give them all of their this",
    "start": "487560",
    "end": "494080"
  },
  {
    "text": "particular line will give them all of the services that their MVC application needs to run it'll make their controllers work it'll put in routing",
    "start": "494080",
    "end": "500680"
  },
  {
    "text": "all of that good stuff it makes those things available to the ASP net core pipeline right okay and then you notice",
    "start": "500680",
    "end": "507639"
  },
  {
    "text": "a little bit different there is an ad context which uh is an extension method on your app builder okay and that is",
    "start": "507639",
    "end": "514880"
  },
  {
    "text": "simply says I want to make an application DB context available to my uh request pipeline as well so that way",
    "start": "514880",
    "end": "521560"
  },
  {
    "text": "if a certain controller or service is requesting that it will get in it will get instantiated with this connection",
    "start": "521560",
    "end": "527440"
  },
  {
    "text": "string and injected right into that controller and we'll see an example of that in just a second but first you notice of course we've got our employee",
    "start": "527440",
    "end": "534240"
  },
  {
    "text": "object our employee object is now inside of our project folder so we've added our employee model with all that code",
    "start": "534240",
    "end": "539959"
  },
  {
    "text": "and the birth number right and then you're like okay well now I've connected Entity framework so just",
    "start": "539959",
    "end": "546519"
  },
  {
    "text": "as an example right because the tooling likes Entity framework so now we've got our model now we're going to add our",
    "start": "546519",
    "end": "552040"
  },
  {
    "text": "controller and we're going to scaffold and it's going to be awesome right so you're going to right click on your controller you're going to go to add",
    "start": "552040",
    "end": "557720"
  },
  {
    "text": "your controllers folder you're going to right click on it you're going to say add controller and there it is right at the top ready and then you're going to",
    "start": "557720",
    "end": "564079"
  },
  {
    "text": "have a list of choices and your list of choices is going to include we're going to select the bottom one right so you can do empty read write actions you can",
    "start": "564079",
    "end": "570920"
  },
  {
    "text": "just do an empty controller uh you can do one that serves up views an MVC controller in this case we're going to",
    "start": "570920",
    "end": "576959"
  },
  {
    "text": "do an API so we're going to select the bottom one and we're going to say hey we're going to use Entity framework with it and we want you to we want to",
    "start": "576959",
    "end": "582640"
  },
  {
    "text": "scaffold up all the read write actions for this controller so then you get a nice handy little dialogue box that says",
    "start": "582640",
    "end": "590720"
  },
  {
    "text": "I pick your employee pick your pick your application DB context you're using and then say the name of the controller",
    "start": "590720",
    "end": "596519"
  },
  {
    "text": "right it's that simple and then you'll set will'll hit okay and and and ASP net",
    "start": "596519",
    "end": "602399"
  },
  {
    "text": "and visual studio actually will go through and scaffold up those controllers it'll make one for you and then you've got yourself a wild",
    "start": "602399",
    "end": "609040"
  },
  {
    "start": "607000",
    "end": "607000"
  },
  {
    "text": "employees controller and it's appeared in your solution and it's awesome right because it's got a bunch of stuff so",
    "start": "609040",
    "end": "615079"
  },
  {
    "text": "let's look at the first thing the first thing that's a little different about it uh from when you did this in web API how",
    "start": "615079",
    "end": "620320"
  },
  {
    "text": "many people use Scaffolding in the past a fair number of you I'd say Okay less of you than I thought but still a good",
    "start": "620320",
    "end": "627160"
  },
  {
    "text": "number um so generating it's just code gen right it's generating all this awesome code for you right to get you",
    "start": "627160",
    "end": "632800"
  },
  {
    "text": "started quickly so it's got an employees controller um right off the top they're decorated with something like that says",
    "start": "632800",
    "end": "640079"
  },
  {
    "text": "produces right and it says that by default request to this produce application Json which is different how",
    "start": "640079",
    "end": "646279"
  },
  {
    "text": "many people when they're using web API had to go through and the default serializer was XML and they had to",
    "start": "646279",
    "end": "652480"
  },
  {
    "text": "remove it or make sure that when Jason they wanted to serve Jason right as default by a default request I see a few",
    "start": "652480",
    "end": "658560"
  },
  {
    "text": "hands go up you don't have to do that now you can just decorate the controller and say a request to this will Pro produce",
    "start": "658560",
    "end": "664600"
  },
  {
    "text": "application Json then you say I've got a default route uh this is a little bit different if you use route attribute um",
    "start": "664600",
    "end": "671720"
  },
  {
    "text": "if you use routing attributes in web API this is a little different now it's just called route and you say API employees",
    "start": "671720",
    "end": "678639"
  },
  {
    "text": "okay and so all the requests from there on will look at if you go to API employees then it'll route that request",
    "start": "678639",
    "end": "684639"
  },
  {
    "text": "naturally if it's a git request it'll route it to the git it's a post request it'll route it to the Post and so on and",
    "start": "684639",
    "end": "691000"
  },
  {
    "text": "then this is the biggest change uh which is now the um the application DB context",
    "start": "691000",
    "end": "697480"
  },
  {
    "text": "is now injected into your controller by the ASP net pipeline remember that",
    "start": "697480",
    "end": "702639"
  },
  {
    "text": "inside of our startup CS we injected that we said we want to make this service available when you're running",
    "start": "702639",
    "end": "708600"
  },
  {
    "text": "MVC Services we want to make this service available to all the other services that need it so that's great so",
    "start": "708600",
    "end": "714440"
  },
  {
    "text": "essentially when you make this request you'll automatically get a new employees controller and it will Instant iate it",
    "start": "714440",
    "end": "720680"
  },
  {
    "text": "with this application DB context already ready to go cool and that's different from web API scaffolding where you would",
    "start": "720680",
    "end": "727480"
  },
  {
    "text": "it would just new up its own application DB context which is not as good which is bad right because then it's creating its",
    "start": "727480",
    "end": "736560"
  },
  {
    "text": "own things we want to tell it what we want we'll get to that in a minute then we do get requests right we get",
    "start": "736560",
    "end": "742199"
  },
  {
    "text": "something where we just Define something where we say I want to get all employees for this controller for all the employees for this particular",
    "start": "742199",
    "end": "749360"
  },
  {
    "text": "organization okay that's a good start for like maybe you know couple hundred employees that'd be good maybe there's",
    "start": "749360",
    "end": "755880"
  },
  {
    "text": "page there maybe there's a paging option that you want to add in uh we're not going to talk about that but you look at that and you're like okay that's a good",
    "start": "755880",
    "end": "761600"
  },
  {
    "text": "start that's a good way to that's a good way to begin and then of course just the single G where you make a request by ID",
    "start": "761600",
    "end": "768440"
  },
  {
    "text": "you say maybe you say does this person have access to this yes or no okay then I'm going to go ahead and send that back",
    "start": "768440",
    "end": "774680"
  },
  {
    "text": "um if it's an invalid request for whatever reason if it's a get request then I'll return bad request and give them a nice little message okay so",
    "start": "774680",
    "end": "782920"
  },
  {
    "text": "that's the get request so then we get to the put request which actually changes employees now I'm going to talk through",
    "start": "782920",
    "end": "788800"
  },
  {
    "text": "this a little bit because this one's a little bit weird to me this doesn't make a lot of sense so what you end up with",
    "start": "788800",
    "end": "794440"
  },
  {
    "text": "is of course um if model state is invalid return bad request that's a good start okay but um notice that what we're",
    "start": "794440",
    "end": "802000"
  },
  {
    "text": "putting into this uh request right if you make a put request to this specific ID and then you say I'm going to give it",
    "start": "802000",
    "end": "807720"
  },
  {
    "text": "this employee data you notice that you're using the same entity as you are you're using the same model your entity",
    "start": "807720",
    "end": "814160"
  },
  {
    "text": "model as the one for the request well that could be good or bad depending on your requirements right and we'll get to",
    "start": "814160",
    "end": "820320"
  },
  {
    "text": "that in a little bit but then you say I'm going to try to and then it's and then it be then it becomes you get this little check online 10ish where you say",
    "start": "820320",
    "end": "827279"
  },
  {
    "text": "if the ID that I've passed in is different from the employee ID that I've given in my request then return bad",
    "start": "827279",
    "end": "833000"
  },
  {
    "text": "request and you're like okay why do I have to give that twice okay whatever you know I'll just do that that's fine",
    "start": "833000",
    "end": "838399"
  },
  {
    "text": "and then it says I'm going to modify it set it's modified so Entity framework knows to update it and then it saves it",
    "start": "838399",
    "end": "844320"
  },
  {
    "text": "to the database and it updates it okay all right that's not so bad um otherwise we'll return we'll if if there's a",
    "start": "844320",
    "end": "851519"
  },
  {
    "text": "problem doing that we will uh return a different error message depending on the problem right and then of course we get",
    "start": "851519",
    "end": "857040"
  },
  {
    "text": "to the post request which is a little bit simpler because it's just creating an employee right and you're just adding it to the context and you're validating",
    "start": "857040",
    "end": "863560"
  },
  {
    "text": "it adding it to the context and then you're saving it to the database cool right",
    "start": "863560",
    "end": "869839"
  },
  {
    "text": "and then of course the delete uh you may do something where you're deleting it straight from the database you may have a soft deleted kind of situation where",
    "start": "869839",
    "end": "876279"
  },
  {
    "text": "you just want to mark it as deleted inside the database but you don't actually want to get rid of it by default web API gives it you know just",
    "start": "876279",
    "end": "882759"
  },
  {
    "text": "straight removes it from the database and that's okay right that could be okay depending on your needs so that's a",
    "start": "882759",
    "end": "888959"
  },
  {
    "text": "scaffolded controller so just with a few clicks you've gotten something that's great right it's awesome it's",
    "start": "888959",
    "end": "894639"
  },
  {
    "text": "productivity it's amazing but I'm here to tell you that in many cases as your",
    "start": "894639",
    "end": "899839"
  },
  {
    "text": "application grows scaffolding is a lie scaffolding is a lie perpetrated On You by Microsoft and yes I'm a Microsoft MVP",
    "start": "899839",
    "end": "906720"
  },
  {
    "start": "901000",
    "end": "901000"
  },
  {
    "text": "and yes I can say that but scaffolding is a lie scaffolding is something that is great to get started right but in the",
    "start": "906720",
    "end": "913600"
  },
  {
    "text": "long term it has some problems because your controller first of all is a oneman army your controller is now responsible",
    "start": "913600",
    "end": "919800"
  },
  {
    "start": "915000",
    "end": "915000"
  },
  {
    "text": "for um getting the routing request kind of the aspnet router system handles that",
    "start": "919800",
    "end": "925199"
  },
  {
    "text": "but then once it gets to the controller the controller's like oh this is the this is the method I should use right um",
    "start": "925199",
    "end": "930959"
  },
  {
    "text": "so it's responsible for doing that which is good controller should do that it should Define where the request should go but then it's also validating it and",
    "start": "930959",
    "end": "938440"
  },
  {
    "text": "then it's also running the service right it's updating the database it's deleting from the database or it's adding to the",
    "start": "938440",
    "end": "944600"
  },
  {
    "text": "database or it's even getting right it's doing everything and then it Returns the request which is okay because that's what a controller is really good at but",
    "start": "944600",
    "end": "951120"
  },
  {
    "text": "your controller in this case is doing everything and that's a problem because there's no separation of concerns inside",
    "start": "951120",
    "end": "957040"
  },
  {
    "start": "954000",
    "end": "954000"
  },
  {
    "text": "of your application inside of your control specifically your controller is literally responsible now maybe that's",
    "start": "957040",
    "end": "963199"
  },
  {
    "text": "okay for five controllers but 500 we run into some problems but we're going to I'm going to describe to you ways around",
    "start": "963199",
    "end": "969399"
  },
  {
    "text": "that and it's going to be a refactoring exercise right we're just going to take you through how I would make it how I would change this controller to make it",
    "start": "969399",
    "end": "975720"
  },
  {
    "text": "better okay because in the end the controller should only route the request and return data that's what it's good at",
    "start": "975720",
    "end": "982199"
  },
  {
    "start": "977000",
    "end": "977000"
  },
  {
    "text": "the controller is good at saying hey this thing knows how to do this thing so I'm going to send this request to this",
    "start": "982199",
    "end": "987800"
  },
  {
    "text": "thing so it can do what it does best which is whatever thing it's requesting okay and then I'll return the data I'll",
    "start": "987800",
    "end": "993639"
  },
  {
    "text": "return whatever data that it asked me",
    "start": "993639",
    "end": "996920"
  },
  {
    "text": "for another big problem and this is probably maybe I don't know this is a big problem to me your entity also is",
    "start": "999160",
    "end": "1005519"
  },
  {
    "text": "your request right let's think about that let's think about that birth number right you may you may not want that to",
    "start": "1005519",
    "end": "1011959"
  },
  {
    "text": "be something that you want to be updatable maybe that's a business rule in a little bit it will be a business",
    "start": "1011959",
    "end": "1017079"
  },
  {
    "text": "rule but in this case you just don't need it you don't want it them have have the ability to update it so you just",
    "start": "1017079",
    "end": "1024000"
  },
  {
    "text": "toss it you you want to toss it away right you don't want that to be something that you wanted them to update your your consumers are then able to I",
    "start": "1024000",
    "end": "1031640"
  },
  {
    "text": "don't know overpost right they can add they can change properties that they're not supposed to change if they're aware of them things like that right problems",
    "start": "1031640",
    "end": "1039360"
  },
  {
    "text": "so let's break it up let's break it apart into all the little pieces and parts that NE is necessary right so",
    "start": "1039360",
    "end": "1045438"
  },
  {
    "start": "1045000",
    "end": "1045000"
  },
  {
    "text": "we're going to talk about something called command query responsibility segregation okay and this is a great pattern for",
    "start": "1045439",
    "end": "1052000"
  },
  {
    "text": "basically separating the requests from the um from the services that run those requests and I'm going to take you",
    "start": "1052000",
    "end": "1057880"
  },
  {
    "text": "through how you might break that thing down the bottom line is that we're going to move the validation the running of",
    "start": "1057880",
    "end": "1062960"
  },
  {
    "text": "our service and the requests we're going to remove those all somewhere else right so we're going to move those out of the",
    "start": "1062960",
    "end": "1068600"
  },
  {
    "text": "controller The Entity is no longer going to be responsible for being the request object",
    "start": "1068600",
    "end": "1073720"
  },
  {
    "text": "okay and the and there's a few reasons why why is that good um reliability",
    "start": "1073720",
    "end": "1079200"
  },
  {
    "text": "right so or reusability it maybe let's say that you have uh services that you define in",
    "start": "1079200",
    "end": "1085159"
  },
  {
    "text": "another assembly uh and then cont and web API is just aware of them right and then it uses those services to Route",
    "start": "1085159",
    "end": "1091640"
  },
  {
    "text": "requests and do stuff uh but you may not be able to predict where you know HTTP",
    "start": "1091640",
    "end": "1096840"
  },
  {
    "text": "is you know where we do the majority of our work for our if we're a web developer but you don't know maybe somebody else wants to use that service",
    "start": "1096840",
    "end": "1103720"
  },
  {
    "text": "somewhere down the r r line you may not be able to predict that so then you get to be able to reuse your code right next",
    "start": "1103720",
    "end": "1110280"
  },
  {
    "text": "thing separation of concerns okay so now everything is really good at doing the",
    "start": "1110280",
    "end": "1115480"
  },
  {
    "text": "one thing that it's asked to do the controller right now is kind of good at doing the few things that it's been",
    "start": "1115480",
    "end": "1121640"
  },
  {
    "text": "asked to do but by and large uh it's really really only good for one or two things and that's really where it should",
    "start": "1121640",
    "end": "1127840"
  },
  {
    "text": "where all of its functionality should stay and then easier testing right so it becomes much easier to test these once",
    "start": "1127840",
    "end": "1133880"
  },
  {
    "text": "you have these individual components right you can write unit tests for each of those different things and end up",
    "start": "1133880",
    "end": "1139520"
  },
  {
    "text": "being able to control and predict where things are going to fail or if things if CH code changes somewhere down the line",
    "start": "1139520",
    "end": "1146520"
  },
  {
    "text": "then it will fail you know it will fail faster that way right unit test so let's start with the request let's break this",
    "start": "1146520",
    "end": "1152480"
  },
  {
    "text": "baby apart right so um same thing same employee object that we have and you",
    "start": "1152480",
    "end": "1157880"
  },
  {
    "text": "notice that we have our validation inside of our employee object more on that a little later",
    "start": "1157880",
    "end": "1163320"
  },
  {
    "start": "1162000",
    "end": "1162000"
  },
  {
    "text": "so again the uh entity is being used for requests that's a bad thing right",
    "start": "1163320",
    "end": "1168760"
  },
  {
    "text": "because again for lots of reasons overp posting reasons you may not want them you may they may not be aware of",
    "start": "1168760",
    "end": "1174280"
  },
  {
    "text": "properties on there you may not make them aware of properties on that object that you don't want to send back and then when they do a put request they're",
    "start": "1174280",
    "end": "1180360"
  },
  {
    "text": "not aware of them either so they may void out those requests uh in my other rest talk I talk about where I do exactly that I under poost dat or I",
    "start": "1180360",
    "end": "1187679"
  },
  {
    "text": "underp put data to a certain endpoint and I didn't know that doing so would break their application but it literally",
    "start": "1187679",
    "end": "1194080"
  },
  {
    "text": "broke and they didn't have any validation which is a terrible rule anyways but because didn't send all the",
    "start": "1194080",
    "end": "1199520"
  },
  {
    "text": "requisite properties that I was supposed to do what I that I was supposed to send in this request it ended up making the",
    "start": "1199520",
    "end": "1204640"
  },
  {
    "text": "applica putting the application in an legal State like a state where it just wouldn't run right there's a lot of",
    "start": "1204640",
    "end": "1210200"
  },
  {
    "text": "reasons so we want to break that apart and then we want to we want to separate the responsibility for model validation",
    "start": "1210200",
    "end": "1216679"
  },
  {
    "text": "from the model right something else is probably best suited to validate and make sure that that model is good okay",
    "start": "1216679",
    "end": "1223280"
  },
  {
    "start": "1223000",
    "end": "1223000"
  },
  {
    "text": "so let's refactor let's start by separating the model from The Entity right so we've got our employee object",
    "start": "1223280",
    "end": "1229919"
  },
  {
    "text": "but we've got our business rule that says that when we make a put request we don't want to be able we want to be able",
    "start": "1229919",
    "end": "1235720"
  },
  {
    "text": "to have that employee be able to made with a put request or and with a birth number with a post request right when",
    "start": "1235720",
    "end": "1241159"
  },
  {
    "text": "it's on creation but we don't want that to happen when they update it now this is a really simple rule and you can",
    "start": "1241159",
    "end": "1247080"
  },
  {
    "text": "write around this a little bit right but as we know when we make requests like these these rules can get infinitely",
    "start": "1247080",
    "end": "1252799"
  },
  {
    "text": "complicated right these rules can be the complexity of these can go Far",
    "start": "1252799",
    "end": "1258280"
  },
  {
    "text": "and Beyond beond just this one little example and it's hard to code for that so let's not let's just make it very simple so let's create something where",
    "start": "1258280",
    "end": "1264880"
  },
  {
    "text": "we actually have something that actually creates the object for us so we create an employee create request right so this",
    "start": "1264880",
    "end": "1271080"
  },
  {
    "text": "is what what we're doing here is we're breaking things down into one requ one",
    "start": "1271080",
    "end": "1276360"
  },
  {
    "text": "request class or definition one request definition per um per request that we're",
    "start": "1276360",
    "end": "1281760"
  },
  {
    "text": "making so we're going to end up making a update request as well and you notice that I'm just missing that property",
    "start": "1281760",
    "end": "1287559"
  },
  {
    "text": "straight up I'm not actually setting that property at all it's not something that aspn net becomes aware of even if",
    "start": "1287559",
    "end": "1293440"
  },
  {
    "text": "they post a uh birth number it doesn't matter because it's because it's not it's deserialized it's just an object",
    "start": "1293440",
    "end": "1299840"
  },
  {
    "text": "that c is aware of but birth number gets thrown away right and then we can do a delete request where we simply just say",
    "start": "1299840",
    "end": "1306640"
  },
  {
    "text": "hey we just want the ID of the request and then something on the other end can handle that okay so another thing is those required",
    "start": "1306640",
    "end": "1314600"
  },
  {
    "text": "attributes are a little clunky to validate especially if you're not using ASP net right at some point you may end up using",
    "start": "1314600",
    "end": "1320960"
  },
  {
    "text": "something other than ASP net and that becomes very clunky to validate it's uh",
    "start": "1320960",
    "end": "1326679"
  },
  {
    "text": "this is an example of the clunkiness right so this is uh an example I pulled off a stack Overflow the Link's at the",
    "start": "1326679",
    "end": "1332240"
  },
  {
    "text": "bottom of this slide um somewhere and uh essentially they've just done some attribute routing but they needed some",
    "start": "1332240",
    "end": "1338159"
  },
  {
    "text": "special behaviors right they needed some special things that they needed to do they needed additional validation but",
    "start": "1338159",
    "end": "1343960"
  },
  {
    "text": "you notice that um well okay first you got a new up a validation result and you oh you implement this cool I validatable",
    "start": "1343960",
    "end": "1351000"
  },
  {
    "text": "object and that's a that's an interface that defines a validate method and you essentially return them validation",
    "start": "1351000",
    "end": "1357480"
  },
  {
    "text": "results and if they're invalid and you know one or more inval validation result",
    "start": "1357480",
    "end": "1362840"
  },
  {
    "text": "inside of that set denotes an invalid object so they try to validate that property and you're like okay I'm going",
    "start": "1362840",
    "end": "1368640"
  },
  {
    "text": "to validate this property and then I'm going to new up a validation context whatever that is right I thought I was already getting one but apparently I'm",
    "start": "1368640",
    "end": "1374679"
  },
  {
    "text": "going to knew one up and then I'm going to pass in null and you're like you look at this and you're like is that good is",
    "start": "1374679",
    "end": "1381840"
  },
  {
    "text": "that bad like what am I passing in maybe I maybe maybe it needs that thing I'm supposed to avoid null reference",
    "start": "1381840",
    "end": "1387600"
  },
  {
    "text": "exception and you're telling me I need to put null into this it's very confusing the API is extremely",
    "start": "1387600",
    "end": "1393039"
  },
  {
    "text": "confusing and it's just not nice so opinion here's the opinion warning I",
    "start": "1393039",
    "end": "1399080"
  },
  {
    "start": "1397000",
    "end": "1397000"
  },
  {
    "text": "have a library that I use called uh fluent validation and fluid validation is gamechanging well it's life-changing",
    "start": "1399080",
    "end": "1405360"
  },
  {
    "text": "it's maybe not as life-changing as like having a kid but uh it's certainly more life-changing than this right it's more",
    "start": "1405360",
    "end": "1412279"
  },
  {
    "text": "life-changing than this this to just make you want it to not be a developer so fluent validation is a really awesome",
    "start": "1412279",
    "end": "1417840"
  },
  {
    "text": "library and essentially what you do is you define a single class so let let's say let's take our employee request",
    "start": "1417840",
    "end": "1424240"
  },
  {
    "text": "first we'll just boil it down to just the first and last name to keep it simple so what you do is you just it's a",
    "start": "1424240",
    "end": "1430000"
  },
  {
    "text": "a separate class becomes responsible for validating that this class is valid so",
    "start": "1430000",
    "end": "1435760"
  },
  {
    "start": "1435000",
    "end": "1435000"
  },
  {
    "text": "we want to isolate that validation functionality so what we do is we create what's called an abstract validator",
    "start": "1435760",
    "end": "1441640"
  },
  {
    "text": "right or we've create a class that's an employee create validator and inherit from abstract validator that's a class",
    "start": "1441640",
    "end": "1447320"
  },
  {
    "text": "inside of fluent validation and then we give it the type of the thing that we're validating so that way we get strongly",
    "start": "1447320",
    "end": "1452840"
  },
  {
    "text": "typed this as opposed to that um new prop one stuff I don't even know right",
    "start": "1452840",
    "end": "1458520"
  },
  {
    "text": "we don't have to worry about all that because now we just construct our object and then we say here's a rule and here's",
    "start": "1458520",
    "end": "1464640"
  },
  {
    "text": "the rule for first name I don't want it to be empty and empty is great because the required attributes are kind of kind",
    "start": "1464640",
    "end": "1471520"
  },
  {
    "text": "of funny in that you there's actually if if you pass it an empty string that's a",
    "start": "1471520",
    "end": "1477640"
  },
  {
    "text": "Val that's technically valid right unless you set there's a on the required attribute there's a property you set",
    "start": "1477640",
    "end": "1482880"
  },
  {
    "text": "allow empty strings you can set false and you can cover that but you don't want to do that that's a lot of typing",
    "start": "1482880",
    "end": "1489240"
  },
  {
    "text": "right forget about it you want to just say I want to make sure that this thing is not empty and not empty means not",
    "start": "1489240",
    "end": "1494720"
  },
  {
    "text": "default value not null uh and and in this case not an empty string so it gives you it it it it better defines the",
    "start": "1494720",
    "end": "1501840"
  },
  {
    "text": "purpose right you want a first or last name attached to that employee it better defines the purpose of that employee",
    "start": "1501840",
    "end": "1508520"
  },
  {
    "text": "because the first and last name should never be empty strings either so that's awesome and they have a ton of methods",
    "start": "1508520",
    "end": "1514559"
  },
  {
    "text": "that allow you to build different validation functionality you could say it has to be equal to this you could say it has to be a range of numbers right",
    "start": "1514559",
    "end": "1521120"
  },
  {
    "text": "there's a lot of stuff built in personally I discovered it by simply Dot and looking at intellisense and seeing",
    "start": "1521120",
    "end": "1526840"
  },
  {
    "text": "all the different rules that are available and you can do some pretty complex behaviors right some pretty complex validation and it's better way",
    "start": "1526840",
    "end": "1533640"
  },
  {
    "text": "better than that mess that we saw so then you say I want to say that first and last name are required and I want to",
    "start": "1533640",
    "end": "1539279"
  },
  {
    "text": "give a special error message uh and this is a part where resource strings really come in handy because if you have to do",
    "start": "1539279",
    "end": "1545080"
  },
  {
    "text": "English or Norwegian because I'm in Norway right if you have to do English or Norwegian you can use resource",
    "start": "1545080",
    "end": "1550520"
  },
  {
    "text": "strings and you can reuse those strings and it becomes very nice cool uh so now we've separated our",
    "start": "1550520",
    "end": "1557520"
  },
  {
    "text": "validation behavor avior from our request our request is no longer responsible for also defining its own",
    "start": "1557520",
    "end": "1563720"
  },
  {
    "text": "validation and for a simple thing like first and last name where you just need",
    "start": "1563720",
    "end": "1568840"
  },
  {
    "text": "to say I just want it required and I don't want empty strings that's fine but validation Behavior can get pretty",
    "start": "1568840",
    "end": "1574320"
  },
  {
    "text": "extensive right and we'll talk about that in a second but first we got to we",
    "start": "1574320",
    "end": "1579760"
  },
  {
    "text": "got to mention that testability right so now we can test our validator separately",
    "start": "1579760",
    "end": "1584799"
  },
  {
    "text": "from our request right we don't have to create a separate request knew it up with ACH stuff have create some validation context where you're passing",
    "start": "1584799",
    "end": "1590960"
  },
  {
    "text": "in 40,000 nulls and you don't know what that does if that's good or bad you can just say I'm going to new up the validation request I'm going to validate",
    "start": "1590960",
    "end": "1597120"
  },
  {
    "text": "this object and then I'm going to make sure that the validation error Rec that the validation errors have something",
    "start": "1597120",
    "end": "1603279"
  },
  {
    "text": "that has a first name and a last name right and so that way when um Johnny Junior developer or Jane Junior",
    "start": "1603279",
    "end": "1610080"
  },
  {
    "text": "developer comes in and deletes that line of code now you have a test to back that up right because tests aren't really",
    "start": "1610080",
    "end": "1616640"
  },
  {
    "text": "written for just today to validate that things work today they're also things that workor for things that work",
    "start": "1616640",
    "end": "1622640"
  },
  {
    "text": "tomorrow right you want to guarantee that behavior works tomorrow as well so also your validators can have",
    "start": "1622640",
    "end": "1630320"
  },
  {
    "text": "some complex behaviors you may need to talk to a database to make sure that for your delete request that something exists so you may need to add that to",
    "start": "1630320",
    "end": "1638240"
  },
  {
    "text": "your may add that to your Constructor and then you say I'm going to pass in an application DB context and I just want",
    "start": "1638240",
    "end": "1643960"
  },
  {
    "text": "to make sure that it exists first and then you get a cool API where you can kind of write it in English or you know",
    "start": "1643960",
    "end": "1650080"
  },
  {
    "text": "whatever language you're writing it in right you could say like I'm going to define a method called exist in database and then I call a method fluent",
    "start": "1650080",
    "end": "1656480"
  },
  {
    "text": "validator has a method called must must exist in database it becomes very readable becomes fluid it's a fluid API",
    "start": "1656480",
    "end": "1662799"
  },
  {
    "text": "that's kind of it's one of its design goals so we've separated our request",
    "start": "1662799",
    "end": "1668760"
  },
  {
    "text": "model from our entity and we've separated our validation from our request model so awesome we've created",
    "start": "1668760",
    "end": "1674320"
  },
  {
    "text": "two totally different things so we've done some good work already refactoring good but next let's get to the meat of it",
    "start": "1674320",
    "end": "1680320"
  },
  {
    "text": "right so we've done very important steps but now we need to extract those services and uh for this thing we're",
    "start": "1680320",
    "end": "1688760"
  },
  {
    "text": "going to talk about the post request for this particular example we're going to talk about the post request right so it's creating it's doing all this work",
    "start": "1688760",
    "end": "1695159"
  },
  {
    "text": "it's creating this object um and of course it's getting the entity straight from the request which is just crazy you",
    "start": "1695159",
    "end": "1702200"
  },
  {
    "text": "don't want that right so now we're going to make it so that we can do some we can save it to the database but the",
    "start": "1702200",
    "end": "1707519"
  },
  {
    "text": "controller doesn't doesn't know how the controller doesn't really care right so next opinion ding ding ding",
    "start": "1707519",
    "end": "1714000"
  },
  {
    "start": "1711000",
    "end": "1711000"
  },
  {
    "text": "warning sign you know something it's like a big flashing red sign opinion opinion alert right so I use a library",
    "start": "1714000",
    "end": "1720000"
  },
  {
    "text": "called mediator how many people use automapper lots of people use automapper",
    "start": "1720000",
    "end": "1725399"
  },
  {
    "text": "automapper is automagical okay um look it up if you haven't but automapper is written by a guy named Jimmy Bogart he's",
    "start": "1725399",
    "end": "1731159"
  },
  {
    "text": "speaking at this conference and Jimmy also wrote a library that's way lesser known but in many ways just as use ful",
    "start": "1731159",
    "end": "1739320"
  },
  {
    "text": "in uh for different things though it's called mediator and it essentially is kind of like a message processing in",
    "start": "1739320",
    "end": "1745120"
  },
  {
    "text": "request inside of a process right so mediator is really good at separating requests from handlers request handlers",
    "start": "1745120",
    "end": "1752840"
  },
  {
    "text": "right so request comes in the request Handler handles it okay and mediator is really good at that so let's look at",
    "start": "1752840",
    "end": "1758840"
  },
  {
    "text": "that let's take a look at what that looks like let's keep refactoring our application so first things first we",
    "start": "1758840",
    "end": "1765279"
  },
  {
    "text": "have our employee create requests just as we did before but the validation separated out which is awesome so that's",
    "start": "1765279",
    "end": "1771720"
  },
  {
    "text": "good so we do our employee create request and then you notice that this little line right here we've changed it we've added we've implemented an",
    "start": "1771720",
    "end": "1778080"
  },
  {
    "text": "interface called I request and I request is a special interface it doesn't really",
    "start": "1778080",
    "end": "1783159"
  },
  {
    "text": "do anything it doesn't Define behavior or properties it's really a marker that's what it is and it says hey this",
    "start": "1783159",
    "end": "1788760"
  },
  {
    "text": "object represents a request I request is part of the mediator Library so this object represents a request and then you",
    "start": "1788760",
    "end": "1795279"
  },
  {
    "text": "give it the return type when you create the employee so one thing you need to know probably that you might want to",
    "start": "1795279",
    "end": "1800840"
  },
  {
    "text": "return to the client the ID of the thing that you've created right because it doesn't get to choose its ID it's an",
    "start": "1800840",
    "end": "1806279"
  },
  {
    "text": "auto incrementing database so you just give it the ID back so that's all we're asking we're saying hey this request is",
    "start": "1806279",
    "end": "1812320"
  },
  {
    "text": "this is a request and it's going to return an ID in the response right so that's thing one we've changed our",
    "start": "1812320",
    "end": "1818679"
  },
  {
    "text": "request so now we've defined we're going to do step two and we're going to basically do the same thing that we did",
    "start": "1818679",
    "end": "1826240"
  },
  {
    "text": "um pulling out the validation pulling out the request but we're going to do it with the service now we're going to handle the post request we're going to",
    "start": "1826240",
    "end": "1832640"
  },
  {
    "text": "save that thing to the database we're going to create that new thing and we're going to add that to the service so we're going to define a service um with",
    "start": "1832640",
    "end": "1839159"
  },
  {
    "text": "that implements this I request Handler okay and you give it the request and then the the type of the request and",
    "start": "1839159",
    "end": "1846039"
  },
  {
    "text": "then the type of the response okay what you're going to end up with is this little method here called handle because",
    "start": "1846039",
    "end": "1852399"
  },
  {
    "text": "it actually does implement some Behavior Uh and handle takes in the request and you notice that its return type is int",
    "start": "1852399",
    "end": "1858639"
  },
  {
    "text": "just like this right just like the thing that we want to return we want to return the idea of the object um common",
    "start": "1858639",
    "end": "1865440"
  },
  {
    "text": "question is well what about async a wait there's actually an I async request and I async request Handler and then handle",
    "start": "1865440",
    "end": "1873360"
  },
  {
    "text": "becomes uh a task event is that what it ends up returning okay so async away",
    "start": "1873360",
    "end": "1879080"
  },
  {
    "text": "totally totally available to mediator as well so then we end up with our request that creates our employee we set the",
    "start": "1879080",
    "end": "1885519"
  },
  {
    "text": "properties from that request and then we save save it to the dat we add it to our context if you're using Entity framework",
    "start": "1885519",
    "end": "1890799"
  },
  {
    "text": "which we are and then we save it to the database and then we return the new employee ID and everybody's happy right",
    "start": "1890799",
    "end": "1896200"
  },
  {
    "text": "well I mean you happy if you're writing plumbing code right um nobody write",
    "start": "1896200",
    "end": "1901559"
  },
  {
    "text": "likes to write properties like this objects as we know can get huge I mean",
    "start": "1901559",
    "end": "1906720"
  },
  {
    "text": "that's just especially if we're using Legacy applications we got a god object and it has 100 properties nobody wants",
    "start": "1906720",
    "end": "1911760"
  },
  {
    "text": "to type then you go to Nimble text or some kind of text editor that allows you to like copy paste and it's just a mess",
    "start": "1911760",
    "end": "1918000"
  },
  {
    "text": "right and we don't have time for that there's no time for that we don't have time for that we don't want to write plumbing code that's not what we're here for we're here to think so we're going",
    "start": "1918000",
    "end": "1925440"
  },
  {
    "text": "to do we're going to use uh automapper right so inside of this service we're going to inject automapper and",
    "start": "1925440",
    "end": "1931080"
  },
  {
    "text": "automapper is a way to map uh objects from one map objects together so our",
    "start": "1931080",
    "end": "1937200"
  },
  {
    "text": "employee create request in this case can be mapped such that all of its data can be transferred to a new copy of an",
    "start": "1937200",
    "end": "1944799"
  },
  {
    "text": "employee entity right we just want to do this just to keep things easy and automapper does all the wiring for you",
    "start": "1944799",
    "end": "1950760"
  },
  {
    "text": "is the properties names are the same then automapper knows what to do and it sets all those properties for you and",
    "start": "1950760",
    "end": "1956080"
  },
  {
    "text": "it's great so you inject in your mapper you can add it as part of your as in your services in your in your service.",
    "start": "1956080",
    "end": "1962039"
  },
  {
    "text": "CS sorry your startup.cs you can add it in there and add it as a service that's available inside of your um ASP net",
    "start": "1962039",
    "end": "1969080"
  },
  {
    "text": "application right and then you can do something like this which is a lot nicer you can create an employee and you've",
    "start": "1969080",
    "end": "1975039"
  },
  {
    "text": "just mapped it straight from that right so save time so that way we're not doing the whole property set thing which you",
    "start": "1975039",
    "end": "1980320"
  },
  {
    "text": "don't want to do and I don't want to do um and scaffold apparently scaffolding didn't want to do either so that's",
    "start": "1980320",
    "end": "1988200"
  },
  {
    "text": "awesome so now we've ended up with a service but where does it get",
    "start": "1988200",
    "end": "1994320"
  },
  {
    "text": "validated um the service so I like to implement a pattern where I create a common service based class and I say all",
    "start": "1994320",
    "end": "2002200"
  },
  {
    "text": "of the requests all of the validators that go in for this request inject those straight in right so we inject those",
    "start": "2002200",
    "end": "2008399"
  },
  {
    "text": "straight into the Constructor and we say I'm going to go ahead and validate all these I'm going to run through each of those and I'm going to check that if",
    "start": "2008399",
    "end": "2014559"
  },
  {
    "text": "it's valid and if it's not I'm going to return some validation results or throw a in this usually I throw a validation",
    "start": "2014559",
    "end": "2019840"
  },
  {
    "text": "exception right um I don't have the code for this because it couldn't all fit on the slide um if you go to rest.",
    "start": "2019840",
    "end": "2026320"
  },
  {
    "text": "sides.now article that shows you exactly how to do it takes it step by step okay",
    "start": "2026320",
    "end": "2031960"
  },
  {
    "text": "so we're going to do all of our validation and then and we're going to register those validation in validators inside of startup. CS right so it's",
    "start": "2031960",
    "end": "2039120"
  },
  {
    "text": "going to be made available to that service to use which is awesome cool so now it's validating itself so I create",
    "start": "2039120",
    "end": "2044960"
  },
  {
    "text": "one Base Class that that validates the request and then I inherit from that um",
    "start": "2044960",
    "end": "2050638"
  },
  {
    "text": "with all of my services right and so I've created something that reusable and repeatable in a very lightweight way I",
    "start": "2050639",
    "end": "2056720"
  },
  {
    "text": "just want to make sure that my services are valid my my requests are validated and before you and another common",
    "start": "2056720",
    "end": "2062679"
  },
  {
    "text": "question that I get is um you know multiple validators why would you just not have one you you may have a",
    "start": "2062679",
    "end": "2068358"
  },
  {
    "text": "validator that's really good about validating some very complex things about your object that boil down to",
    "start": "2068359",
    "end": "2073760"
  },
  {
    "text": "maybe touching one or two properties I don't know I can't predict that you may want to break up your validators as the bottom line so you don't want to assume",
    "start": "2073760",
    "end": "2080679"
  },
  {
    "text": "that there's just one so we add multiples because if you do assume there's just one uh then a lot of dependency injection libraries will just",
    "start": "2080679",
    "end": "2087398"
  },
  {
    "text": "return the first that it has and you may not want that so we do multiples awesome",
    "start": "2087399",
    "end": "2092480"
  },
  {
    "text": "so it becomes independently testable so now this service is really good it's doing its one thing so we're going to test and assert that this be that this",
    "start": "2092480",
    "end": "2099040"
  },
  {
    "text": "service is really doing this really good one thing and of course it's reusable which we described earlier we may want",
    "start": "2099040",
    "end": "2104839"
  },
  {
    "text": "to use it outside of an aspet core application right we may want to do that we don't know why but we may want to",
    "start": "2104839",
    "end": "2112000"
  },
  {
    "text": "it's more important that it be separate though that's the most important takeaway so let's put it all together",
    "start": "2112000",
    "end": "2117400"
  },
  {
    "start": "2115000",
    "end": "2115000"
  },
  {
    "text": "dependency injection handles dependencies right so the thing that where we configured all of our services",
    "start": "2117400",
    "end": "2123160"
  },
  {
    "text": "we added MVC to the pipeline we added the application DB context and now we've added in um automapper and a bunch of",
    "start": "2123160",
    "end": "2130880"
  },
  {
    "text": "other services and a bunch of other validators to our pipeline right we made those things all available so that's",
    "start": "2130880",
    "end": "2136240"
  },
  {
    "text": "what it does best it says this thing is dependent on this thing so we're going to create that thing with all the things that it needs was that like enough",
    "start": "2136240",
    "end": "2143480"
  },
  {
    "text": "things in that sentence then we're going to have mediator do the requests we're going to Define requests through",
    "start": "2143480",
    "end": "2149000"
  },
  {
    "text": "mediator and then we're going to Define responses through mediator right or uh in this case handlers the mediator is",
    "start": "2149000",
    "end": "2155280"
  },
  {
    "text": "doing that it's really good at defining requests and handlers and then controller will do what it does best",
    "start": "2155280",
    "end": "2161440"
  },
  {
    "text": "which is take an HTTP request do something with it send it off to somebody who knows what to do with it",
    "start": "2161440",
    "end": "2167160"
  },
  {
    "text": "and then return the data that's what the controller is good at that's what the controller is for it's like a traffic I like to think of a controller as a",
    "start": "2167160",
    "end": "2172720"
  },
  {
    "text": "traffic cop it just says okay you need to go here you need to go here you need to go here",
    "start": "2172720",
    "end": "2178000"
  },
  {
    "start": "2178000",
    "end": "2178000"
  },
  {
    "text": "okay um the bottom line is uh the next thing is the that dependency injection",
    "start": "2178000",
    "end": "2183880"
  },
  {
    "text": "was never baked into aspnet web API if you're using web API oh sorry if you're",
    "start": "2183880",
    "end": "2189880"
  },
  {
    "text": "using web API uh you can add it in of course you know you can add dependency injection in very well but it wasn't",
    "start": "2189880",
    "end": "2195040"
  },
  {
    "text": "made a first class citizen until core so uh but I would recom highly recommend using a better dependency injection",
    "start": "2195040",
    "end": "2202800"
  },
  {
    "text": "container I personally like autofac I see lots of people use nject I see some use structure map it doesn't really",
    "start": "2202800",
    "end": "2208920"
  },
  {
    "text": "matter do something that just makes your life easier it's in this way I kind of use it like automapper and I'll show you",
    "start": "2208920",
    "end": "2214400"
  },
  {
    "start": "2214000",
    "end": "2214000"
  },
  {
    "text": "how Auto mapper or autofac will allow will automatically scan your assemblies",
    "start": "2214400",
    "end": "2219480"
  },
  {
    "text": "you can say hey scan this assembly for all of these interfaces and just automatically add them to the dependency injection pipeline because you could",
    "start": "2219480",
    "end": "2226160"
  },
  {
    "text": "Define you can Define them one at a time say I'm going to add this service then this service uh but when you get to 100",
    "start": "2226160",
    "end": "2231880"
  },
  {
    "text": "services and 100 validators that becomes pretty heavy so you probably you may not want to do that you may might be like me",
    "start": "2231880",
    "end": "2237960"
  },
  {
    "text": "and just want to get stuff done so what I love to do is get stuff done so we're going to do something like this we're going to change our um startup.cs file a",
    "start": "2237960",
    "end": "2246359"
  },
  {
    "text": "little bit we're going to say Say Hey I want you to create this cont I want to",
    "start": "2246359",
    "end": "2251760"
  },
  {
    "text": "create this container Builder which is an autofac thing that is built into autofac I'm going to new that up and",
    "start": "2251760",
    "end": "2258160"
  },
  {
    "text": "then I'm going to say hey I want to scan every service assembly because you may have your services in a separate assembly you may not depends on you what",
    "start": "2258160",
    "end": "2265000"
  },
  {
    "text": "you want to do right uh you may have you want to scan that assembly and you just say I want to register all the types is implemented",
    "start": "2265000",
    "end": "2271480"
  },
  {
    "text": "interfaces right and this just goes through every single type and every time it has an interface it says okay this is",
    "start": "2271480",
    "end": "2276880"
  },
  {
    "text": "an i valid validator so an I validator that validates employee create request so when it's create so when it's",
    "start": "2276880",
    "end": "2282800"
  },
  {
    "text": "something is asking for it gets injected in right um You can also filter this down",
    "start": "2282800",
    "end": "2288520"
  },
  {
    "text": "because you may not want that behavior you may want to filter only the things that Implement um I request or I or I",
    "start": "2288520",
    "end": "2296440"
  },
  {
    "text": "abstract Val or abstract validator or um or I async request Handler something",
    "start": "2296440",
    "end": "2302720"
  },
  {
    "text": "like that okay so do something save yourself some time don't do them one at a time use autoa use something use",
    "start": "2302720",
    "end": "2309040"
  },
  {
    "text": "something awesome right um so then the thing that you need to do is make sure that mediator so you'll need to register",
    "start": "2309040",
    "end": "2314599"
  },
  {
    "text": "mediator as part of this part of this whole process mediator is a thing that is is actually an object that is created",
    "start": "2314599",
    "end": "2322640"
  },
  {
    "text": "that actually handles that request so we're going to add it to the service Pipeline and then we're going to add it to the controller so that the controller",
    "start": "2322640",
    "end": "2328960"
  },
  {
    "text": "knows who to ask for things right and knows that oh the mediator is the the God of all requests it knows I I don't",
    "start": "2328960",
    "end": "2335079"
  },
  {
    "text": "know I just present the request at the alter of the mediator and then the mediator blesses me with the response to",
    "start": "2335079",
    "end": "2341319"
  },
  {
    "text": "that request it takes that it takes that create post request or create employee request and routes it to wherever it",
    "start": "2341319",
    "end": "2346760"
  },
  {
    "text": "needs to go and out comes an ID and who knows if it actually created something I don't care because I'm the controller I",
    "start": "2346760",
    "end": "2352359"
  },
  {
    "text": "don't really want to know right so we add that in of course we",
    "start": "2352359",
    "end": "2359319"
  },
  {
    "text": "would add in our application DB context here as well still um I just left it out for",
    "start": "2359319",
    "end": "2364839"
  },
  {
    "text": "brevity and then finally our controller we've refactored so let's let's break",
    "start": "2364839",
    "end": "2370040"
  },
  {
    "text": "this down we've refactored the request we've taken the request separated it we've taken the validator separated it",
    "start": "2370040",
    "end": "2376040"
  },
  {
    "text": "we've taken our service and separated it from the controller so now the controller is not left doing much which is great this is the thing the",
    "start": "2376040",
    "end": "2381400"
  },
  {
    "text": "controller should do right so we say hey mediator handle this request I I again I",
    "start": "2381400",
    "end": "2387319"
  },
  {
    "text": "don't know what it's doing I just know that you're going to return an ID and that's awesome because I'm going to assume that it went to a database and",
    "start": "2387319",
    "end": "2393400"
  },
  {
    "text": "happy flowers are growing and everything is good everything is good and great right we handle that request and then we say",
    "start": "2393400",
    "end": "2399920"
  },
  {
    "text": "hey created at action right we want to return the controller is good at saying hey HTTP request here's a response right",
    "start": "2399920",
    "end": "2407200"
  },
  {
    "text": "here's how you get that new employee that you just created right and that's good and then if we have any validation",
    "start": "2407200",
    "end": "2414319"
  },
  {
    "text": "you can say hey um I'm going to throw an exception I'm going to catch this validation exception and say if there's",
    "start": "2414319",
    "end": "2419520"
  },
  {
    "text": "any validation errors thrown I'm going to go ahead and return bad request and then I'm going to give it something with",
    "start": "2419520",
    "end": "2424839"
  },
  {
    "text": "model state which this is just an extension method that I Define myself um if you want it you can ask me for it I",
    "start": "2424839",
    "end": "2430839"
  },
  {
    "text": "don't have a post anywhere I will do that though in the next couple of days at rest.",
    "start": "2430839",
    "end": "2436520"
  },
  {
    "start": "2448000",
    "end": "2448000"
  },
  {
    "text": "sides.now a consultancy and I have a junior developer and um giving her",
    "start": "2453480",
    "end": "2458760"
  },
  {
    "text": "patterns to to repeat right to something because she's definitely new at development so I give her patterns I say",
    "start": "2458760",
    "end": "2465160"
  },
  {
    "text": "hey do this formula and follow this through and this becomes really powerful when you're training Junior developers",
    "start": "2465160",
    "end": "2470920"
  },
  {
    "text": "because now you don't have to say you know scaffold up 400 applic 400 controllers for these different objects",
    "start": "2470920",
    "end": "2475960"
  },
  {
    "text": "right you can just say hey I want you to do this methodically and we want to build software right especially if it's an API that somebody else is consuming",
    "start": "2475960",
    "end": "2483599"
  },
  {
    "text": "I've consumed tons of bad apis uh which in my other talk you can hear me tell all the horror",
    "start": "2483599",
    "end": "2489520"
  },
  {
    "text": "stories but um imagine how powerful that becomes right you say hey let's do this one step at a time let's break this down",
    "start": "2489520",
    "end": "2496040"
  },
  {
    "text": "we're going to Define our request what is our thing going to do right what is what is the data that our thing needs to",
    "start": "2496040",
    "end": "2501440"
  },
  {
    "text": "do what data does it need then I'm going to say hey let's validate that request I'm going to give you a list of business rules and based on that ask fluent",
    "start": "2501440",
    "end": "2508119"
  },
  {
    "text": "validation to say hey ensure that this string is empty ensure that this number is between zero and 100 right and",
    "start": "2508119",
    "end": "2514040"
  },
  {
    "text": "possibilities are endless there then you say Define a service and then you say hey now we have our request we've",
    "start": "2514040",
    "end": "2520359"
  },
  {
    "text": "validated it let's define let's inherit from this Base Service that we've created that automatically hooks all the validation up and then you just",
    "start": "2520359",
    "end": "2526960"
  },
  {
    "text": "implement the handle interface and then um save it to the database delete it from the database you know whatever",
    "start": "2526960",
    "end": "2532960"
  },
  {
    "text": "right becomes very powerful because you've broken it up into finite steps and you're unit testing all along the way to make sure that your validator",
    "start": "2532960",
    "end": "2539480"
  },
  {
    "text": "works properly that your service is going to work properly right because we all do unit testing right right",
    "start": "2539480",
    "end": "2547800"
  },
  {
    "text": "right um the better more complete example Jimmy bogard's blog right here on this link go ahead I'll wait you",
    "start": "2547800",
    "end": "2555200"
  },
  {
    "text": "click on it okay well when you get to the slides you can click on that link and it's",
    "start": "2555200",
    "end": "2560800"
  },
  {
    "text": "right there in the in the links that I provide as well okay uh write tests for everything I can't emphasize this enough",
    "start": "2560800",
    "end": "2568200"
  },
  {
    "start": "2564000",
    "end": "2564000"
  },
  {
    "text": "um now yeah I have no exceptions to that rule I just think you should write tests",
    "start": "2568200",
    "end": "2573920"
  },
  {
    "text": "for everything um and a lot of people think this just slows them down but it does do and there's plenty of people who give good talks on why testing is",
    "start": "2573920",
    "end": "2580359"
  },
  {
    "text": "important so I'm not going to beat it into your head I will just say that it becomes I I the thing that is powerful",
    "start": "2580359",
    "end": "2586119"
  },
  {
    "text": "for testing for me is that it becomes a spec it becomes the way your software should behave it becomes and not only",
    "start": "2586119",
    "end": "2591520"
  },
  {
    "text": "does it become the spec it guarantees that spec stays the same so that when Jimmy junr developer comes in and",
    "start": "2591520",
    "end": "2596760"
  },
  {
    "text": "deletes that line of code the whole build comes crashing down because you failed that one unit test and by the way",
    "start": "2596760",
    "end": "2602440"
  },
  {
    "text": "that functionality was really critical and you have some consumers of your API that really suck like me sending under",
    "start": "2602440",
    "end": "2608400"
  },
  {
    "text": "not sending enough you know data to that put request right they didn't validate it I didn't send enough data everybody",
    "start": "2608400",
    "end": "2615160"
  },
  {
    "text": "screwed up so avoid that I and I can tell you by the way that the uh particular API that I used that had this",
    "start": "2615160",
    "end": "2622000"
  },
  {
    "text": "problem I talked to them it was ASP net web API and know it wasn't backed by a single unit test so they had a lot of",
    "start": "2622000",
    "end": "2627559"
  },
  {
    "text": "breaking changes between their behavior I think that the my favorite example of that was uh um in my other talk they I",
    "start": "2627559",
    "end": "2634160"
  },
  {
    "text": "said uh they said oh yeah uh we changed some stuff happens under these couple of end points uh nothing really changed",
    "start": "2634160",
    "end": "2640599"
  },
  {
    "text": "from a request standpoint you know just see let us know if you have any problems we just Chang them underpinnings and we said oh okay let's you know I want to",
    "start": "2640599",
    "end": "2646760"
  },
  {
    "text": "run our suite of un integration test to guarantee that that stuff still works as an advertise and they said actually",
    "start": "2646760",
    "end": "2652800"
  },
  {
    "text": "we're deploying in one hour because we need it right away and they're like well and then you're stuck saying well I",
    "start": "2652800",
    "end": "2658240"
  },
  {
    "text": "don't know we have about 500 customers that depend on this API working properly what are you going to tell do I want to",
    "start": "2658240",
    "end": "2664440"
  },
  {
    "text": "tell them why don't you have the conversation with them in case API gets screwed up right and by the way nothing",
    "start": "2664440",
    "end": "2670599"
  },
  {
    "text": "broke that time but they had other times where things broke so right test for everything um I like to keep versions",
    "start": "2670599",
    "end": "2677559"
  },
  {
    "start": "2676000",
    "end": "2676000"
  },
  {
    "text": "separate this is another kind of opinionated thing uh but if you're creating a rest API you're probably",
    "start": "2677559",
    "end": "2683079"
  },
  {
    "text": "going to version it right and I talk about all the strategies behind that in my other talk uh but the bottom line is",
    "start": "2683079",
    "end": "2688599"
  },
  {
    "text": "is that you may have services that U where the employee only takes a certain number of properties or maybe rename",
    "start": "2688599",
    "end": "2695160"
  },
  {
    "text": "properties from the next version of that or you add in some Behavior right um so I like to separate those into separate",
    "start": "2695160",
    "end": "2700720"
  },
  {
    "text": "versions so I I have a separate assembly right where I keep all those things I say here's my separate",
    "start": "2700720",
    "end": "2706119"
  },
  {
    "text": "version um I'm going to say version one version one Services scan that assembly put in all those services and then the",
    "start": "2706119",
    "end": "2712040"
  },
  {
    "text": "version two of my API because lots of apis are versioned you're doing a rest API or any kind of API at some point",
    "start": "2712040",
    "end": "2717520"
  },
  {
    "text": "you'll probably version it as well and you can keep it in a separate assembly and then you can just add those to the",
    "start": "2717520",
    "end": "2722559"
  },
  {
    "text": "pipeline and that way everything's kept nice and separate and then you have another separate test project as well well right keeps everything nice and",
    "start": "2722559",
    "end": "2729319"
  },
  {
    "text": "neatly organized which is great um so are bad sides to this",
    "start": "2729319",
    "end": "2735599"
  },
  {
    "start": "2732000",
    "end": "2732000"
  },
  {
    "text": "approach um I think there are right so it may be unnecessary complexity if you're spinning up a website they say",
    "start": "2735599",
    "end": "2741599"
  },
  {
    "text": "actually we just want um a newsletter we just want to be able to send a newsletter right and you're trying to",
    "start": "2741599",
    "end": "2746920"
  },
  {
    "text": "get something done quickly you really just want you don't care about that it's not business critical data say we just",
    "start": "2746920",
    "end": "2752119"
  },
  {
    "text": "want a place where the text box and a button right that may be unnecessary to do something like this to implement this huge amount of patterns right I mean",
    "start": "2752119",
    "end": "2759760"
  },
  {
    "text": "because the bottom line is we don't want to spend a lot of time doing that newsletter where there's two controllers and all they're serving a static static",
    "start": "2759760",
    "end": "2766319"
  },
  {
    "text": "data except in this one instance where it does a post request and you're like I don't know I don't care because like I",
    "start": "2766319",
    "end": "2772359"
  },
  {
    "text": "mean you can do all that stuff right apply all those patterns but you may be just spinning your wheels you may be doing something that doesn't have a lot",
    "start": "2772359",
    "end": "2778319"
  },
  {
    "text": "of value and your boss probably will forget about it next week anyways and then of course there's a",
    "start": "2778319",
    "end": "2783680"
  },
  {
    "text": "there's a bigger learning curve and I'd say this this one is argu arguable a because uh there's kind of a little bit",
    "start": "2783680",
    "end": "2788960"
  },
  {
    "text": "of a learning curve in breaking down how the controller handles things at the surface it seems pretty straightforward",
    "start": "2788960",
    "end": "2794160"
  },
  {
    "text": "right it's talking to a database it's you know deserializing a request it's routing that request uh saving it doing",
    "start": "2794160",
    "end": "2800119"
  },
  {
    "text": "some stuff right so the cognitive load um as your controllers get more complicated the cognitive load can",
    "start": "2800119",
    "end": "2806359"
  },
  {
    "text": "increase right so this I mean you have to learn some more libraries that's the bottom line you do uh but once you get",
    "start": "2806359",
    "end": "2812200"
  },
  {
    "text": "to that point Things become simpler your code becomes simpler uh everything kind of simpli I because everything is doing",
    "start": "2812200",
    "end": "2819520"
  },
  {
    "text": "the one thing that it's really good at doing it's really good at being a request it's really good at being a validator right that kind of",
    "start": "2819520",
    "end": "2825559"
  },
  {
    "text": "stuff um I find that this is best for uh medium to large- size applications so if you know your application's going to",
    "start": "2825559",
    "end": "2831599"
  },
  {
    "text": "grow you said well the the newsletter endpoint isn't enough we need 14 more endpoints to handle some very specific",
    "start": "2831599",
    "end": "2837920"
  },
  {
    "text": "customer Behavior you may go back and say well I may refactor or I might may apply this pattern right because I want",
    "start": "2837920",
    "end": "2844200"
  },
  {
    "text": "to I want to have some strong guarantees about about this is a customer facing thing um",
    "start": "2844200",
    "end": "2850559"
  },
  {
    "text": "or it's an internal facing thing that's business critical and I want to have some strong guarantees that it's going to function the way that I've said it's",
    "start": "2850559",
    "end": "2856720"
  },
  {
    "text": "going to function so I'm going to go through and apply this pattern and you'll and you'll be rewarded for that right be rewarded intrinsically because",
    "start": "2856720",
    "end": "2863400"
  },
  {
    "text": "you'll know it'll work for the most part and then reliability right you don't have to worry about uh controller being",
    "start": "2863400",
    "end": "2869839"
  },
  {
    "text": "the single source of failure now it's the of course Entity framework or not talking to the database maybe the",
    "start": "2869839",
    "end": "2875000"
  },
  {
    "text": "database server is down it's the true source of failure but it's kind of masked right because the controller is",
    "start": "2875000",
    "end": "2880160"
  },
  {
    "text": "the one responsible for knowing all that information right you throw an exception and then you have to go in say Well it",
    "start": "2880160",
    "end": "2885520"
  },
  {
    "text": "threw an exception at employee controller line 23 so then you dig into the code and maybe your logging isn't",
    "start": "2885520",
    "end": "2891280"
  },
  {
    "text": "good you dig into the code you look at line 23 and you're like oh that's the part where it saves it to the database I should maybe start there right whereas",
    "start": "2891280",
    "end": "2898119"
  },
  {
    "text": "you might be able to start a lot simpler you're like oh it hand it it failed at the validator for X Y and Z right makes",
    "start": "2898119",
    "end": "2904240"
  },
  {
    "text": "things a little less obscure and it makes your code makes your code cleaner and that's a",
    "start": "2904240",
    "end": "2909280"
  },
  {
    "text": "good thing um this is uh really I don't have anything else to say except all these",
    "start": "2909280",
    "end": "2915040"
  },
  {
    "text": "resources everything that I the links to all this stuff rest.",
    "start": "2915040",
    "end": "2919640"
  },
  {
    "text": "[Music]",
    "start": "2928520",
    "end": "2931599"
  },
  {
    "text": "sides.now party that's about to occur so so any questions you just come up to me on the stage and I'll be happy to talk",
    "start": "2933880",
    "end": "2940200"
  },
  {
    "text": "you through your particular problem but the bottom line is is thank you so much for being here again please reach out to",
    "start": "2940200",
    "end": "2945799"
  },
  {
    "text": "me go to my website reach out to me again I don't make any money on this no ads I just want to help you if you have",
    "start": "2945799",
    "end": "2951359"
  },
  {
    "text": "any questions please feel free to reach out I'm at schneidenbach um SAS me.com",
    "start": "2951359",
    "end": "2957839"
  },
  {
    "text": "as my email address just go to my website you find all that uh so thank you so much again my name is Spencer schach it's been a pleasure talking to",
    "start": "2957839",
    "end": "2963359"
  },
  {
    "text": "you thank you [Applause]",
    "start": "2963359",
    "end": "2969409"
  }
]