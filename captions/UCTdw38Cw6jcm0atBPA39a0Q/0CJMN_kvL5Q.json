[
  {
    "text": "good morning um i hope the weather is nice where you are i'm currently admiring the um",
    "start": "11040",
    "end": "16800"
  },
  {
    "text": "gently wet british weather out of my window it's a good reminder to remain indoors",
    "start": "16800",
    "end": "23279"
  },
  {
    "text": "the image that you are seeing um somehow vaguely fits with this idea of paradigms lost this is a picture i took last year in",
    "start": "23279",
    "end": "30400"
  },
  {
    "text": "pripyat in the chernobyl uh exclusion zone in ukraine and yes you can visit a radioactive uh world",
    "start": "30400",
    "end": "38239"
  },
  {
    "text": "disaster site and buy mugs so this is a genuine genuine sample there the coffee however is not",
    "start": "38239",
    "end": "44000"
  },
  {
    "text": "radioactive that's my responsibility so what are we going to talk about we're going to talk about a bunch of",
    "start": "44000",
    "end": "49440"
  },
  {
    "text": "stuff here um we're going to talk about paradigms lost paradigms regained",
    "start": "49440",
    "end": "55039"
  },
  {
    "text": "um programming with objects and functions and more i want to focus on a number of different",
    "start": "55039",
    "end": "60079"
  },
  {
    "text": "aspects here um the challenge for me is that i actually run this as a one day kind of seminar",
    "start": "60079",
    "end": "68159"
  },
  {
    "text": "um and so i did the major mistake of trying to condense that",
    "start": "68159",
    "end": "73200"
  },
  {
    "text": "that was my first draft i threw that one away because it was you can't take one day and turn it into one hour with any success so i inverted",
    "start": "73200",
    "end": "80320"
  },
  {
    "text": "the whole thing i've turned the whole thing inside out and basically said right let's start from scratch we'll take a different line through this",
    "start": "80320",
    "end": "86640"
  },
  {
    "text": "so a little bit about me um my name's kevin henny i i don't actually have an app in front",
    "start": "86640",
    "end": "92799"
  },
  {
    "text": "of my name but my name is sufficiently unique that i can get away with it i've written",
    "start": "92799",
    "end": "98720"
  },
  {
    "text": "stuff on patterns and i've um have an interest in uh architecture um",
    "start": "98720",
    "end": "105200"
  },
  {
    "text": "in the software world very much really my interest in patterns is how do people think",
    "start": "105200",
    "end": "110320"
  },
  {
    "text": "how do people organize things um a lot of people think of patterns as just a catalog of interesting ideas and it's",
    "start": "110320",
    "end": "116079"
  },
  {
    "text": "like that's not really it there's something much deeper there is a thinking model um that is uh profound and we will actually",
    "start": "116079",
    "end": "122880"
  },
  {
    "text": "see relates to paradigms very strongly um i'm also interested very much in the",
    "start": "122880",
    "end": "127920"
  },
  {
    "text": "detail of code and practices so 10 years ago um i published this book uh edited this book kind of a crowdsourced",
    "start": "127920",
    "end": "134959"
  },
  {
    "text": "open source book 97 things every programmer should know uh most recently um myself and trisha g",
    "start": "134959",
    "end": "141280"
  },
  {
    "text": "um published 97 things every java programmer should know a very different focus in that sense",
    "start": "141280",
    "end": "147520"
  },
  {
    "text": "kind of like 10 years on a specific language takes everything in a very different direction",
    "start": "147520",
    "end": "153120"
  },
  {
    "text": "and that was fun it's nice to do something during lockdown um but that's not why we're here let's talk",
    "start": "153120",
    "end": "159920"
  },
  {
    "text": "about this paradigms the p word in fact it did actually get",
    "start": "159920",
    "end": "165360"
  },
  {
    "text": "known uh uh one place i worked in the early 90s as the p word because paradigm was being mentioned so often because",
    "start": "165360",
    "end": "170959"
  },
  {
    "text": "people were starting to talk about let's move to objects and up to that point we've been doing a lot of procedural programming",
    "start": "170959",
    "end": "176640"
  },
  {
    "text": "and people talk to occasionally about modularity proceduralism functional programming was an academic",
    "start": "176640",
    "end": "182560"
  },
  {
    "text": "dream occasionally logic programming whenever you brought that up somebody would say oh yeah i did prologue at",
    "start": "182560",
    "end": "188400"
  },
  {
    "text": "university and that would be it that would be the end of the pro that would be the end of the logic programming conversation",
    "start": "188400",
    "end": "194239"
  },
  {
    "text": "um but most code was being written at that point in c variants of pascal",
    "start": "194239",
    "end": "200640"
  },
  {
    "text": "fortran cover all this kind of stuff you know variations of basic they were never actually a procedural paradigm but they",
    "start": "200640",
    "end": "207200"
  },
  {
    "text": "were variations of it but at this time people talking objects late 80s early 90s this",
    "start": "207200",
    "end": "212720"
  },
  {
    "text": "was when it was coming in and the word paradigm started raising its head now what is interesting is we",
    "start": "212720",
    "end": "218319"
  },
  {
    "text": "actually have we can actually get a point of origin for the use of the word paradigm um in in programming uh it's this guy",
    "start": "218319",
    "end": "226000"
  },
  {
    "text": "robert floyd um uh he was involved in a lot of um thinking in the 60s in particular on uh",
    "start": "226000",
    "end": "232400"
  },
  {
    "text": "formalisms if you're familiar with tony hawe's ideas in fact formal methods owes this",
    "start": "232400",
    "end": "237599"
  },
  {
    "text": "man of great debt um tony hall's ideas of like a precondition",
    "start": "237599",
    "end": "242799"
  },
  {
    "text": "an action and a post condition for reasoning about code which we these these days we see reflected in uh",
    "start": "242799",
    "end": "248400"
  },
  {
    "text": "behavior driven development given when then it's exactly the same three aspects",
    "start": "248400",
    "end": "254000"
  },
  {
    "text": "uh that and tony hawk is quite acknowledges this very very clearly and explicitly and openly that's",
    "start": "254000",
    "end": "259519"
  },
  {
    "text": "actually based on robert floyd's work um so he received the turing award in 1979 um",
    "start": "259519",
    "end": "266800"
  },
  {
    "text": "and he talked about the paradigms of programming and he adopted the term paradigms based on um",
    "start": "266800",
    "end": "273680"
  },
  {
    "text": "the popularity in the 60s of uh thomas coon's um structure actually structured scientific",
    "start": "273680",
    "end": "279280"
  },
  {
    "text": "revolutions if i had thought about this i would go and grab my copy because one of the great things about being at home let's look at the positive side is",
    "start": "279280",
    "end": "285120"
  },
  {
    "text": "that i can grab books that i have and show them to you um but yeah that one's kind of in the other room",
    "start": "285120",
    "end": "290960"
  },
  {
    "text": "what is interesting is before 1979 people didn't talk about paradigms 1979 they started using the p",
    "start": "290960",
    "end": "296479"
  },
  {
    "text": "word um you can see this in the 1978 um turing award winner john backus who",
    "start": "296479",
    "end": "301680"
  },
  {
    "text": "spoke about functional programming his turing award paper and speech he only talks about the functional style",
    "start": "301680",
    "end": "308080"
  },
  {
    "text": "one year later everybody's using the paradigm word so paradigm let's talk about the word paradigm oh good grief i mean",
    "start": "308080",
    "end": "314240"
  },
  {
    "text": "you know as if you didn't already have enough trouble with english spelling here is a word that has a silent g but",
    "start": "314240",
    "end": "321440"
  },
  {
    "text": "only sometimes because it's paradigm but when we are talking about paradigms or relating",
    "start": "321440",
    "end": "327840"
  },
  {
    "text": "something we may say that something is paradigmatic suddenly the g rears its ugly head um for that we totally blame english",
    "start": "327840",
    "end": "336560"
  },
  {
    "text": "but if we look at the origin of the word we see down left-hand side we can see oh okay it's",
    "start": "336560",
    "end": "342240"
  },
  {
    "text": "greek uh paradigma is ultimately where it comes from um it means a pattern it means an",
    "start": "342240",
    "end": "347759"
  },
  {
    "text": "example pattern that word um an example something to follow an archetype it's very interesting but",
    "start": "347759",
    "end": "354320"
  },
  {
    "text": "we think we understand what we're talking about when we say paradigms when you drop that into a conversation with developers",
    "start": "354320",
    "end": "361520"
  },
  {
    "text": "often people talk as if they are pursuing a single paradigm which one is better the one",
    "start": "362400",
    "end": "370319"
  },
  {
    "text": "you know it's neo it's the matrix we are after the one",
    "start": "370319",
    "end": "375440"
  },
  {
    "text": "actually robert floyd's thesis the whole point of what he was trying to talk about this is i believe that the current state",
    "start": "375919",
    "end": "382400"
  },
  {
    "text": "of the art of computer programming reflects inadequacies in our stocker paradigms",
    "start": "382400",
    "end": "387759"
  },
  {
    "text": "in our knowledge of existing paradigms in the way we teach programming paradigms and in the way our programming languages",
    "start": "387759",
    "end": "393520"
  },
  {
    "text": "support fail to support the paradigms of their user communities he's talking about this as a plural he",
    "start": "393520",
    "end": "399440"
  },
  {
    "text": "doesn't want the one true paradigm he says you have different problems you need",
    "start": "399440",
    "end": "405120"
  },
  {
    "text": "different shapes of solution and these will all be the same shape there is no the",
    "start": "405120",
    "end": "410240"
  },
  {
    "text": "one and so what is interesting there is exactly what he said 40 years ago i",
    "start": "410240",
    "end": "415360"
  },
  {
    "text": "would like to repeat here uh the moment we we find people pursuing or",
    "start": "415360",
    "end": "420400"
  },
  {
    "text": "obsessed by the one paradigm yet when we look more closely at our languages we find that most of the languages that",
    "start": "420400",
    "end": "426160"
  },
  {
    "text": "are in current use do not support a paradigm there are blender paradigms paradigms",
    "start": "426160",
    "end": "431759"
  },
  {
    "text": "do not have these norms they don't have boundaries you know you are suddenly leaving the procedural quadrant and now",
    "start": "431759",
    "end": "437360"
  },
  {
    "text": "entering the functional sector it's not like that you know you you're checking your state mutability at the boundary",
    "start": "437360",
    "end": "442639"
  },
  {
    "text": "and that's it there's a hard distinction and you move from object into functional as if there was no distinction and",
    "start": "442639",
    "end": "449360"
  },
  {
    "text": "in fact i've heard some people say oh there are only two or three paradigms it's like i've got really bad news for",
    "start": "449360",
    "end": "454720"
  },
  {
    "text": "you here's the paradigm map as of 2005 according to peter van roy",
    "start": "454720",
    "end": "460400"
  },
  {
    "text": "and i would actually highlight that he's missed out a whole bunch i can think of straight there but this",
    "start": "460400",
    "end": "466080"
  },
  {
    "text": "is a good analysis and he's broken it down along a number of axes uh with separations cheering completeness uh not um how we relate to",
    "start": "466080",
    "end": "473440"
  },
  {
    "text": "state and he's banded things and showed relationships this so this is a so what we're saying here is this is a",
    "start": "473440",
    "end": "479840"
  },
  {
    "text": "good first stretch at a paradigm map but actually we can see there are things missing we have more examples and",
    "start": "479840",
    "end": "486000"
  },
  {
    "text": "uh that we can throw in more things that are in between in spaces as it were",
    "start": "486000",
    "end": "491039"
  },
  {
    "text": "rather than sitting comfortably inside boxes so one of my favorite quotes emil",
    "start": "491039",
    "end": "497280"
  },
  {
    "text": "augusta nothing is more dangerous than an idea",
    "start": "497280",
    "end": "504000"
  },
  {
    "text": "when you have only one idea i i love using this quote because it's always a reminder when we come to design thinking",
    "start": "504000",
    "end": "509759"
  },
  {
    "text": "um programming style or even life that we tend to get fixated we get",
    "start": "509759",
    "end": "515440"
  },
  {
    "text": "locked into one thing the whole idea is challenge yourself and we can actually generalize this in",
    "start": "515440",
    "end": "520640"
  },
  {
    "text": "software nothing is more dangerous than an ide when you have only one ide um and we also see this in particular",
    "start": "520640",
    "end": "526880"
  },
  {
    "text": "nothing is more dangerous than our when you have only one object and for many people it's just like oh",
    "start": "526880",
    "end": "532399"
  },
  {
    "text": "object orientation you mean the singleton pattern it's just like no no we absolutely do not mean the signal to",
    "start": "532399",
    "end": "537440"
  },
  {
    "text": "pattern um you know that's a failure mode that's that's not the bit we're putting forward and saying please follow this this is",
    "start": "537440",
    "end": "544000"
  },
  {
    "text": "good um we're saying this is the bit you don't want to do but there is an important point here",
    "start": "544000",
    "end": "550240"
  },
  {
    "text": "that we often pursue paradigms not because of the problems which are solved not always because of the nature of our",
    "start": "550240",
    "end": "555519"
  },
  {
    "text": "languages but sometimes we want something better we become uncomfortable a paradigm has become let me put it this way a lot of",
    "start": "555519",
    "end": "562080"
  },
  {
    "text": "what people are doing and calling object orientation it's not what i was taught",
    "start": "562080",
    "end": "567519"
  },
  {
    "text": "it's not it was not the promise um but that happens for every paradigm um i see a number of well-meaning but",
    "start": "567519",
    "end": "574720"
  },
  {
    "text": "very naive people jumping onto you know having dealt with functional programming for quite a long time",
    "start": "574720",
    "end": "580880"
  },
  {
    "text": "i i love the way people go like oh yeah functional program is the answer because oh is all singletons and managers and",
    "start": "580880",
    "end": "586240"
  },
  {
    "text": "it's like no really that wasn't the idea um what does the enterprisation of functional programming look like",
    "start": "586240",
    "end": "592160"
  },
  {
    "text": "the enterprisation of functional programming is already happening we see functions called function we see people",
    "start": "592160",
    "end": "597200"
  },
  {
    "text": "using hybrid languages and saying i've got this really big big super long function or method",
    "start": "597200",
    "end": "603279"
  },
  {
    "text": "or whatever and it's just like it because i'm doing functional it's like honestly some data abstraction would really help you at this point",
    "start": "603279",
    "end": "609600"
  },
  {
    "text": "and we know what the failure mode of functional programming is what that looks like the failure mode of object orientation",
    "start": "609600",
    "end": "616560"
  },
  {
    "text": "is managerialism the failure mode of functional programming is called procedural programming in other words oh we have pragmatic side",
    "start": "616560",
    "end": "623200"
  },
  {
    "text": "effects you know some when people use the word pragmatic it normally means not so when people do pragmatic agile it's",
    "start": "623200",
    "end": "628640"
  },
  {
    "text": "not agile you know when people do pragmatic tdd it's not tdd when people are doing",
    "start": "628640",
    "end": "633680"
  },
  {
    "text": "pragmatic functional programming it's not functional programming they have pragmatic side effects and",
    "start": "633680",
    "end": "638720"
  },
  {
    "text": "pragmatic others so we're already seeing this in some effect that's not to dis fp at all fp is really",
    "start": "638720",
    "end": "644480"
  },
  {
    "text": "quite uh significant in the landscape but it's our hopes that are being surprised by uh we're being surprised so",
    "start": "644480",
    "end": "652800"
  },
  {
    "text": "what i need is one idea that i'm going to run through all of this so we're going to talk about stacks so this is the seven magic mountains",
    "start": "652800",
    "end": "659120"
  },
  {
    "text": "outside las vegas um back in a world where we used to be able to travel um yeah i was in las",
    "start": "659120",
    "end": "664800"
  },
  {
    "text": "vegas last year with the family and this was much more interesting than the fake",
    "start": "664800",
    "end": "670720"
  },
  {
    "text": "eiffel tower there stacks are very common ideas we find them there's a stack of books that's all about objects",
    "start": "670720",
    "end": "676800"
  },
  {
    "text": "psychotherapists are utterly obsessed with the concepts of objects um we also find the term uh we talk",
    "start": "676800",
    "end": "683279"
  },
  {
    "text": "about full stack developer stacks are obsessed people are obsessed in fact if you want the best kind of full stack developer you need them to be",
    "start": "683279",
    "end": "690000"
  },
  {
    "text": "passionate as well um although i find that uh when i look at",
    "start": "690000",
    "end": "695200"
  },
  {
    "text": "um what people mean by actually full stack development it's it's kind of small their universe",
    "start": "695200",
    "end": "701519"
  },
  {
    "text": "is apparently the full stack is front end and back end um my background is that i used to work",
    "start": "701519",
    "end": "707200"
  },
  {
    "text": "in infrastructure systems programming and middleware and for me what most people call full stack",
    "start": "707200",
    "end": "713360"
  },
  {
    "text": "development is somewhere out there my bit of the stack is completely neglected and the other area i guess i'm",
    "start": "713360",
    "end": "718959"
  },
  {
    "text": "interested in is the um the other aspect how do we do products what is the effect on society it turns",
    "start": "718959",
    "end": "725519"
  },
  {
    "text": "out the stack is surprisingly deep and what we call full stack is a tiny squinchy bit in the middle",
    "start": "725519",
    "end": "730880"
  },
  {
    "text": "but that's not the stack we're going to talk about i'm going to talk about data abstraction this is my perfect excuse to use upside",
    "start": "730880",
    "end": "737200"
  },
  {
    "text": "down a's and back to front e's in a talk to commercial programmers there exists a",
    "start": "737200",
    "end": "743440"
  },
  {
    "text": "type t this is generic such that for all stacks and then i offer you a cartesian product",
    "start": "743440",
    "end": "750399"
  },
  {
    "text": "with a series of um functional mappings um",
    "start": "750399",
    "end": "755680"
  },
  {
    "text": "uh some of which are partial um so popping a stack does not always yield a stack it's sometimes",
    "start": "755680",
    "end": "760800"
  },
  {
    "text": "it's not an allowed operation popping an empty stack so that's that's getting the top of the stack is not always legal because it doesn't have a",
    "start": "760800",
    "end": "766959"
  },
  {
    "text": "top the way that we frame the types here we're going to say that's not always true so what we're talking about here is",
    "start": "766959",
    "end": "773040"
  },
  {
    "text": "abstract data types adt's so let's start there adts abstract datasets we have um",
    "start": "773040",
    "end": "780160"
  },
  {
    "text": "there this is an idea from the early 70s specifically this is barbara liskoff while we're talking about cheering award",
    "start": "780160",
    "end": "785440"
  },
  {
    "text": "winners she was the winner i think in 2008 2009 i could be off by one um her work in programming language",
    "start": "785440",
    "end": "792880"
  },
  {
    "text": "design was really quite significant quite important if you are using a language that has an",
    "start": "792880",
    "end": "800399"
  },
  {
    "text": "exception handling mechanism that looks roughly like try catch try except or whatever that comes down",
    "start": "800399",
    "end": "805920"
  },
  {
    "text": "to the language work that she did in the 1970s the clu clue language",
    "start": "805920",
    "end": "810959"
  },
  {
    "text": "but she is one of the key people involved in this whole idea of adt's this is from her 1974",
    "start": "810959",
    "end": "816399"
  },
  {
    "text": "paper programming with abstract data types now what's interesting here she says",
    "start": "816399",
    "end": "821600"
  },
  {
    "text": "an abstract data type defines a class of abstract objects which is completely characterized by the",
    "start": "821600",
    "end": "827360"
  },
  {
    "text": "operations available on those objects a program is concerned only with the behavior of which that object exhibits",
    "start": "827360",
    "end": "834560"
  },
  {
    "text": "but not any details of how that behavior is achieved by means of an implementation a lot of people going like oh okay yeah",
    "start": "834560",
    "end": "841199"
  },
  {
    "text": "cool right yeah we do this all the time you know this is this is classes okay so if i throw this one at you in c",
    "start": "841199",
    "end": "847120"
  },
  {
    "text": "sharp then i've got some private implementation which as uh uh liskoff says we're not interested in",
    "start": "847120",
    "end": "854160"
  },
  {
    "text": "characterized completely by its public operations its public aspect is push pop depth and top let's keep it really",
    "start": "854160",
    "end": "859760"
  },
  {
    "text": "simple and i'm going to make pop a pure pop actually there are reasons i might come to you later why",
    "start": "859760",
    "end": "865279"
  },
  {
    "text": "why i've done it this way um but i'm going to keep it really really simple you want to find out",
    "start": "865279",
    "end": "870320"
  },
  {
    "text": "the value that you're about to pop ask for the top that's it and i can implement it i can implement it in c",
    "start": "870320",
    "end": "875600"
  },
  {
    "text": "sharp using the standard.net generic collection list which is basically a resizable array vector in",
    "start": "875600",
    "end": "881760"
  },
  {
    "text": "other languages arraylist and others it's uh so it's based on contiguous",
    "start": "881760",
    "end": "889680"
  },
  {
    "text": "memory and i can push and pop freely i've got my exception behavior nicely",
    "start": "889680",
    "end": "895360"
  },
  {
    "text": "characterized there a number of forwarding operations so this is stack implemented as a wrapper",
    "start": "895360",
    "end": "900959"
  },
  {
    "text": "and i've chosen a particular sensibility here i have decided that the head of the stack will be",
    "start": "900959",
    "end": "907519"
  },
  {
    "text": "the zeroth element of the list and if you look through there you will see that there there it is at zero",
    "start": "907519",
    "end": "913120"
  },
  {
    "text": "insert zero that's my push so we've got a really simple uh there and pop remove at zero",
    "start": "913120",
    "end": "919279"
  },
  {
    "text": "but i could equally well do it the other way around and actually it's marginally more efficient um to do it",
    "start": "919279",
    "end": "926000"
  },
  {
    "text": "the other way around that push appends at the back that's what ad does by default but it means",
    "start": "926000",
    "end": "931519"
  },
  {
    "text": "that i remove from there so i count backwards effectively",
    "start": "931519",
    "end": "936560"
  },
  {
    "text": "or i could use a linked list and i could take things from the la i could treat the top as the last",
    "start": "936560",
    "end": "941759"
  },
  {
    "text": "element or i could treat it as the first element now notice all of these variations have been done",
    "start": "941759",
    "end": "948079"
  },
  {
    "text": "without any um without any appeal to a difference in terms of this",
    "start": "948079",
    "end": "953680"
  },
  {
    "text": "perceived semantics but this is not what barbara liskoff was talking about",
    "start": "953680",
    "end": "959759"
  },
  {
    "text": "in many of our minds when we read a lot of stuff on adts particularly if you come through the object route and that's been your main exposure",
    "start": "959759",
    "end": "966480"
  },
  {
    "text": "you will think oh yeah yeah that's what i'm doing and it kind of is but it's not the whole story",
    "start": "966480",
    "end": "972079"
  },
  {
    "text": "so um this book uh theory of objects um i'm gonna i'd love to say i've read",
    "start": "972079",
    "end": "978240"
  },
  {
    "text": "it i read the first section i think there are five or six sections i've read the first section the first",
    "start": "978240",
    "end": "983839"
  },
  {
    "text": "section is in english the remaining five sections are in sigma calculus and if you are struggling at any point",
    "start": "983839",
    "end": "990720"
  },
  {
    "text": "to sleep at night i strongly recommend some of those sections um i yeah yeah not for me there are",
    "start": "990720",
    "end": "998480"
  },
  {
    "text": "people out there who have far better appreciation uh of reading formalisms but the first section is goal",
    "start": "998480",
    "end": "1005759"
  },
  {
    "text": "absolutely really good clarifications this book is published in 95. and the point that a body and cardelli",
    "start": "1005759",
    "end": "1012720"
  },
  {
    "text": "make they say object to origin programming does not have an exclusive claim to all these",
    "start": "1012720",
    "end": "1018320"
  },
  {
    "text": "good properties those properties of data abstraction and so on systems may be modeled by other paradigms the resilience that we've just",
    "start": "1018320",
    "end": "1025199"
  },
  {
    "text": "been describing can be achieved just as well by organizing programs around abstract data types treat it as a separate concept the",
    "start": "1025199",
    "end": "1030959"
  },
  {
    "text": "whole private public keep your data private type thing is not unique to object orientation but for many people particularly when they",
    "start": "1030959",
    "end": "1037280"
  },
  {
    "text": "come from a regular procedural background whether it's from scripting or from c",
    "start": "1037280",
    "end": "1042640"
  },
  {
    "text": "when they see objects that's their big that's their big enlightenment it's the",
    "start": "1042640",
    "end": "1048079"
  },
  {
    "text": "encapsulation that's that's the thing they associate primarily in their mind they say that paradigm is about",
    "start": "1048079",
    "end": "1053919"
  },
  {
    "text": "that actually it's not there's actually a bunch of paradigms that all share this um so as uh uh cardelli say",
    "start": "1053919",
    "end": "1062080"
  },
  {
    "text": "organizing around abstract data types independently of taxonomies what they're referring to here is class hierarchies",
    "start": "1062080",
    "end": "1067679"
  },
  {
    "text": "and type hierarchies in fact data abstraction alone is sometimes taken as the essence of object orientation so this is",
    "start": "1067679",
    "end": "1073679"
  },
  {
    "text": "like category substitution that we do but i've been mentioning c um so let's",
    "start": "1073679",
    "end": "1080160"
  },
  {
    "text": "talk c um you can do adt programming in c in fact that's where i started doing adt",
    "start": "1080160",
    "end": "1085200"
  },
  {
    "text": "programming although when i did it i thought i was doing a kind of like bankrupt version of objects actually i was doing adt",
    "start": "1085200",
    "end": "1091760"
  },
  {
    "text": "programming i feel much better about it historically um i can forward declare um i can fully",
    "start": "1091760",
    "end": "1097679"
  },
  {
    "text": "declare a structure i can uh i don't have to use it i'm going to use a name convenience uh typedef and put stack and it's just",
    "start": "1097679",
    "end": "1104400"
  },
  {
    "text": "gonna be a stack so i've now forward declared it it's incomplete um and but i can still define operations",
    "start": "1104400",
    "end": "1112320"
  },
  {
    "text": "on it i can still declare go ahead and say i can have a new thing i can get rid of it i can do push pop i can find the depth",
    "start": "1112320",
    "end": "1118320"
  },
  {
    "text": "and i can ask for the top so i'm going to bind the type much more specifically here rather there's no concept of genericity",
    "start": "1118320",
    "end": "1123919"
  },
  {
    "text": "and i really wasn't in the mood to use void pointers this morning um you know honestly it's towards the end of the week why would i give myself",
    "start": "1123919",
    "end": "1130160"
  },
  {
    "text": "that pain so i'm going to just make it very specific um and make it about strings",
    "start": "1130160",
    "end": "1136000"
  },
  {
    "text": "so we can i can do this um in c it's not necessarily a common style in c",
    "start": "1136000",
    "end": "1141520"
  },
  {
    "text": "um but i know that whenever i've encouraged people to do this there have been benefits and when i did it i found huge benefits in separation in",
    "start": "1141520",
    "end": "1148400"
  },
  {
    "text": "terms of reasoning but also build times and other aspects but it is a capability c supports even though it doesn't present itself as",
    "start": "1148400",
    "end": "1155760"
  },
  {
    "text": "a an adt language it is a capability of support but it's not its principal home territory if you like there are",
    "start": "1155760",
    "end": "1163039"
  },
  {
    "text": "languages for which this is a a a prime um uh uh aspect so this is modular two",
    "start": "1163039",
    "end": "1170320"
  },
  {
    "text": "um again if i thought about this my modular two book i can actually see off to one side um uh what i've done there is i've",
    "start": "1170320",
    "end": "1178160"
  },
  {
    "text": "i've created an opaque type type stack is offered there but it's not defined um",
    "start": "1178160",
    "end": "1184480"
  },
  {
    "text": "it's kept set that definition is kept separate i can create it delete it push pot depth top all of these usual things",
    "start": "1184480",
    "end": "1192080"
  },
  {
    "text": "but modular two has something else this is the idea that we don't generally end up with languages that are unique um uh have",
    "start": "1192080",
    "end": "1200160"
  },
  {
    "text": "support only a single paradigm they normally bring in something else as the name modular two suggests it's",
    "start": "1200160",
    "end": "1206559"
  },
  {
    "text": "all about the modules modular programming if you like modularity is partly orthogonal to how",
    "start": "1206559",
    "end": "1212880"
  },
  {
    "text": "we organize our data types and uh our procedural aspects of code it's it's an organizing principle we",
    "start": "1212880",
    "end": "1219200"
  },
  {
    "text": "find in languages as different as python and haskell and",
    "start": "1219200",
    "end": "1224720"
  },
  {
    "text": "haskell we regard very much as the epitome of functional programming thinking and python",
    "start": "1224720",
    "end": "1230240"
  },
  {
    "text": "although it is an object-oriented language its default mode of usage is a kind of a light procedure with",
    "start": "1230240",
    "end": "1235679"
  },
  {
    "text": "hints and a light sprinkling of functional and it supports a modular concept now i",
    "start": "1235679",
    "end": "1240960"
  },
  {
    "text": "can't actually strictly speaking do full modular programming in something like c or c plus plus c plus plus 20 has",
    "start": "1240960",
    "end": "1248000"
  },
  {
    "text": "modules but they're kind of different and i'm not going to get into that um the modular programming idea that i",
    "start": "1248000",
    "end": "1254880"
  },
  {
    "text": "deal with headers and so on in languages like c the module does not have identity the key",
    "start": "1254880",
    "end": "1260000"
  },
  {
    "text": "idea that we get with python and with modular 2 and languages like that going",
    "start": "1260000",
    "end": "1266080"
  },
  {
    "text": "back to ada and so on is that these languages the module has identity you can name it you import things from it you have you",
    "start": "1266080",
    "end": "1274240"
  },
  {
    "text": "don't just have concepts of public and private but you have a namespace concept built into the structural unit it's part of",
    "start": "1274240",
    "end": "1280320"
  },
  {
    "text": "the language now that of course itself is not a new idea many people will date modular thinking to the 1970s and i know we take",
    "start": "1280320",
    "end": "1288799"
  },
  {
    "text": "a way wayback machine all the way to the 1960s we go back to the nato software engineering conference",
    "start": "1288799",
    "end": "1296240"
  },
  {
    "text": "in garmish in 1968. actually there was an awful lot said about this um to find a subset of the system which",
    "start": "1296240",
    "end": "1303120"
  },
  {
    "text": "is small enough to bring to an operational state this strategy requires the system be designed in modules which can be",
    "start": "1303120",
    "end": "1308880"
  },
  {
    "text": "realized tested and modified independently what is important here is that modularity was being proposed",
    "start": "1308880",
    "end": "1314960"
  },
  {
    "text": "and discussed and reasoned about as you can tell from the phrasing it was being offered as a um",
    "start": "1314960",
    "end": "1322320"
  },
  {
    "text": "a way of thinking about uh a methodological approach as you can see he offers a recipe to",
    "start": "1322320",
    "end": "1328799"
  },
  {
    "text": "find a subset of the system this strategy he's talking about a way of development with respect to a team and so on so in",
    "start": "1328799",
    "end": "1335840"
  },
  {
    "text": "other words modularity fulfills a human need in that sense the reason many",
    "start": "1335840",
    "end": "1340960"
  },
  {
    "text": "people associate modularity with the 1970s is because of david parnass",
    "start": "1340960",
    "end": "1346559"
  },
  {
    "text": "who basically came up with a much clearer view of and how should we do our modules if",
    "start": "1346559",
    "end": "1352000"
  },
  {
    "text": "you like modularity was an idea from the late 60s people started reasoning about breaking their code into chunks and",
    "start": "1352000",
    "end": "1358080"
  },
  {
    "text": "chunks that were not simply subroutines and functions but chunks that cohered together but",
    "start": "1358080",
    "end": "1363440"
  },
  {
    "text": "there was discussion about and why do we make them modules and so parnis's 1972 paper",
    "start": "1363440",
    "end": "1370640"
  },
  {
    "text": "on criteria to be used in decomposing systems into modules we propose that one begins with a list of difficult",
    "start": "1370640",
    "end": "1375679"
  },
  {
    "text": "design decisions or design decisions which are likely to change each module is then",
    "start": "1375679",
    "end": "1380799"
  },
  {
    "text": "designed to hide such a decision from the others wait a minute ah i see like changing the implementation",
    "start": "1380799",
    "end": "1386320"
  },
  {
    "text": "like i just did with the stack i've got it so notice here that we've already noticed that",
    "start": "1386320",
    "end": "1392080"
  },
  {
    "text": "that we're able to blend there's a little soft boundary between some of these um some of these paradigms and some of",
    "start": "1392080",
    "end": "1398640"
  },
  {
    "text": "these live together but the ideas are mature but these days we often look at something and go",
    "start": "1398640",
    "end": "1404240"
  },
  {
    "text": "got it you mean objects it's like well not just objects there are other aspects data abstraction is",
    "start": "1404240",
    "end": "1410080"
  },
  {
    "text": "something you can do in multiple languages um modularity without data abstraction is something we can do in multiple",
    "start": "1410080",
    "end": "1416080"
  },
  {
    "text": "languages without needing to tie ourselves to a specific paradigm but back to this idea of hiding",
    "start": "1416080",
    "end": "1422799"
  },
  {
    "text": "decisions from other people well i did it with c sharp i want to show you if i take this as",
    "start": "1422799",
    "end": "1428000"
  },
  {
    "text": "c i can go and add a little bit of extra dressing around it so that it will also compile i've been",
    "start": "1428000",
    "end": "1433039"
  },
  {
    "text": "very careful that this is actually um c and c plus plus yeah",
    "start": "1433039",
    "end": "1438320"
  },
  {
    "text": "c plus plus c was originally kind of like a nc c89 or iso c90",
    "start": "1438320",
    "end": "1445360"
  },
  {
    "text": "was there was a strict subset relationship and that was bianna strausstrap's intention",
    "start": "1445360",
    "end": "1450720"
  },
  {
    "text": "but with a few of the options taken out but the subset relationship was really strong as each of those languages has evolved",
    "start": "1450720",
    "end": "1458880"
  },
  {
    "text": "c99 c11 c17 c plus 98 11 14 17 20 keep counting",
    "start": "1458880",
    "end": "1467679"
  },
  {
    "text": "they've diverged there are the common subset is proportionately smaller but what i've",
    "start": "1467679",
    "end": "1472799"
  },
  {
    "text": "offered you on screen here is is uh in that subset and i can elaborate this in a dot c file i can",
    "start": "1472799",
    "end": "1480159"
  },
  {
    "text": "offer you a full definition of what do i mean by stract by stack i've got a struct here and i've",
    "start": "1480159",
    "end": "1486159"
  },
  {
    "text": "got the the joy of pointers to pointers and i've got information there and everything's doing what it should do",
    "start": "1486159",
    "end": "1491919"
  },
  {
    "text": "um but i can also implement it in c plus plus and link that in and the point there is",
    "start": "1491919",
    "end": "1497520"
  },
  {
    "text": "that this is a link time concept and that was actually something that you found in a lot of the",
    "start": "1497520",
    "end": "1503520"
  },
  {
    "text": "early modular thinking and early adt thinking the idea was not to deal with um substitutable types with respect to",
    "start": "1503520",
    "end": "1511600"
  },
  {
    "text": "an interface at runtime the idea was very much a compile time or link time change whereas in many of the",
    "start": "1511600",
    "end": "1518080"
  },
  {
    "text": "languages we deal with with objects if you change the private section both that sets off a ripple in your",
    "start": "1518080",
    "end": "1523120"
  },
  {
    "text": "build the idea is that if you are working in a language that truly supports modules and abstract data types",
    "start": "1523120",
    "end": "1528799"
  },
  {
    "text": "then if you change the implementation it does not trigger a huge build it is",
    "start": "1528799",
    "end": "1534880"
  },
  {
    "text": "merely it's a recombination of that module and everything else just links in and if you're working in a dynamic",
    "start": "1534880",
    "end": "1540960"
  },
  {
    "text": "environment with dlls or shared objects that just comes in so in other words there's no difference it's a minimal",
    "start": "1540960",
    "end": "1546720"
  },
  {
    "text": "change paradigm that is not true of many object systems that we have now so there is",
    "start": "1546720",
    "end": "1552159"
  },
  {
    "text": "again there are other aspects that come out of that but since we're time travelling um let's",
    "start": "1552159",
    "end": "1557600"
  },
  {
    "text": "go back to the early 70s um uh structured programming um this was the kind of prevailing uh as",
    "start": "1557600",
    "end": "1564880"
  },
  {
    "text": "it were organizational model or good practice procedural programming uh the people",
    "start": "1564880",
    "end": "1569919"
  },
  {
    "text": "were talking about um and this book i said early 70s but strictly speaking it",
    "start": "1569919",
    "end": "1575440"
  },
  {
    "text": "it involves a collection of essays from uli johann dar etzke dijkstra and tony hall from kind",
    "start": "1575440",
    "end": "1581760"
  },
  {
    "text": "of late 60s onwards it's not really written as a single book it's really actually a set of essays authored or co-authored by",
    "start": "1581760",
    "end": "1588240"
  },
  {
    "text": "each of these individuals but they make a really important point about",
    "start": "1588240",
    "end": "1594240"
  },
  {
    "text": "one of the most key ideas we can actually say within procedural programming there is a sub paradigm that we can call",
    "start": "1594240",
    "end": "1599440"
  },
  {
    "text": "block structured programming not every um language that is procedural has block",
    "start": "1599440",
    "end": "1605520"
  },
  {
    "text": "structure c and c plus plus are of that heritage basically anything with curly brackets is of that heritage anything with begin",
    "start": "1605520",
    "end": "1611840"
  },
  {
    "text": "and end is of their heritage not everything is though um you know the languages of that time things like",
    "start": "1611840",
    "end": "1617120"
  },
  {
    "text": "fortran don't follow that uh we also see that in mod that's not just but that's not just an old thing language is like python",
    "start": "1617120",
    "end": "1622799"
  },
  {
    "text": "they're not actually strictly streaking block structure they don't have the concept of block scope",
    "start": "1622799",
    "end": "1627840"
  },
  {
    "text": "although they allow nested procedures and there is clearly a strong strong sense of indentation um the",
    "start": "1627840",
    "end": "1634640"
  },
  {
    "text": "concept of the block does not strictly exist and so yeah that's not necessarily a",
    "start": "1634640",
    "end": "1640080"
  },
  {
    "text": "disadvantage uh you have languages that pretend to be block structured um a classic javascript as an example it",
    "start": "1640080",
    "end": "1645760"
  },
  {
    "text": "has blocks but it totally disrespects what they mean modern javascript is a little a little",
    "start": "1645760",
    "end": "1651120"
  },
  {
    "text": "tighter on this but still allows you that old-school fluidity but the observation",
    "start": "1651120",
    "end": "1656399"
  },
  {
    "text": "in hierarchical programmed uh program structures at the darling hall row they made this observation one of those",
    "start": "1656399",
    "end": "1662559"
  },
  {
    "text": "powerful mechanisms for program structuring is the block and procedure concept that idea of being able to and this is",
    "start": "1662559",
    "end": "1669120"
  },
  {
    "text": "something that many languages lost so c lost the block and procedure concept it kept the block but it did not allow you",
    "start": "1669120",
    "end": "1676080"
  },
  {
    "text": "to embed procedures within the block that was something that was lost um pascal",
    "start": "1676080",
    "end": "1682720"
  },
  {
    "text": "kept the nested procedures but did not allow you to nest uh data within blocks so they each kind",
    "start": "1682720",
    "end": "1688960"
  },
  {
    "text": "of took a different path but let's go all the way back i'm basically going to look here old school begin end",
    "start": "1688960",
    "end": "1694480"
  },
  {
    "text": "this is um an algol 60 derivative um so algorithmic language 60 algal 60.",
    "start": "1694480",
    "end": "1702080"
  },
  {
    "text": "really this is the language that gave us bnf um and it is the language that really",
    "start": "1702080",
    "end": "1707840"
  },
  {
    "text": "launched block structure obviously many languages later decided that begin and end that's way too much typing we're",
    "start": "1707840",
    "end": "1712880"
  },
  {
    "text": "going to put curly brackets or round brackets or some variation of brackets in that place",
    "start": "1712880",
    "end": "1718000"
  },
  {
    "text": "um this is a slight extension to it i'm going to take the concept of a book we'll discover what a book is in a",
    "start": "1718000",
    "end": "1724320"
  },
  {
    "text": "moment uh or rather what it could be um i'm going to make it uh i have an array of reference to books",
    "start": "1724320",
    "end": "1730559"
  },
  {
    "text": "and the number of books is one to some kind of capacity and um we're going to have an integer count",
    "start": "1730559",
    "end": "1737919"
  },
  {
    "text": "that we've got there so just as a point of history algol is the language that put",
    "start": "1737919",
    "end": "1743279"
  },
  {
    "text": "the type name at the front and then the variable name and this is what c picked up on",
    "start": "1743279",
    "end": "1750240"
  },
  {
    "text": "so this is the language to blame for that practice um uh and uh i can go ahead i can",
    "start": "1750480",
    "end": "1756559"
  },
  {
    "text": "initialize count to zero um but i can also nest procedures within this",
    "start": "1756559",
    "end": "1761760"
  },
  {
    "text": "so the point is that blocks are recursive within a block you can contain all of the ingredients of a program",
    "start": "1761760",
    "end": "1767279"
  },
  {
    "text": "including more procedures a procedure for push and pop and is empty as full",
    "start": "1767279",
    "end": "1773120"
  },
  {
    "text": "depth and so on i have to put in these full because it's a bounded we are limited we can't we don't have resizable",
    "start": "1773120",
    "end": "1778720"
  },
  {
    "text": "arrays in this era it's limited to whatever capacity it's but what is interesting about this is",
    "start": "1778720",
    "end": "1784640"
  },
  {
    "text": "that i've just kind of told you something that you probably already know but you're perhaps translating it into curly brackets or going oh i can't do",
    "start": "1784640",
    "end": "1790880"
  },
  {
    "text": "that in in the language that i'm using because i'm not allowed to nest procedures but you know maybe i could do",
    "start": "1790880",
    "end": "1796880"
  },
  {
    "text": "something like it we have seen some languages reclaim the idea of nested procedures",
    "start": "1796880",
    "end": "1802000"
  },
  {
    "text": "i've noticed c sharp did that while back um and you kind of fake it in c plus plus",
    "start": "1802000",
    "end": "1807279"
  },
  {
    "text": "with kind of like you know local classes and lambdas and stuff but it's still not first class in that sense",
    "start": "1807279",
    "end": "1813200"
  },
  {
    "text": "but languages like python never gave it up but there's some really interesting ideas what if we go the next step because",
    "start": "1813200",
    "end": "1820880"
  },
  {
    "text": "the observation was made in this section called the hierarchical program structures",
    "start": "1820880",
    "end": "1826480"
  },
  {
    "text": "so what we've discovered is that a process a block can hold behavior and it can hold data",
    "start": "1826480",
    "end": "1833919"
  },
  {
    "text": "and it can hold code that runs that's a really interesting idea andrew we can do anything with that",
    "start": "1833919",
    "end": "1839840"
  },
  {
    "text": "a procedure which is capable of giving rise to block into instances which survive its call will be known as a",
    "start": "1839840",
    "end": "1845039"
  },
  {
    "text": "class and the instances will be known as objects of that class it turns out that object orientation",
    "start": "1845039",
    "end": "1850399"
  },
  {
    "text": "grew out of block structure what they are describing johann dahl is",
    "start": "1850399",
    "end": "1855520"
  },
  {
    "text": "one of the co-inventors with kristen negard of um and for all the norwegians out",
    "start": "1855520",
    "end": "1861039"
  },
  {
    "text": "there i'm really sorry i'm not pronouncing it right but you know um uh it's the best i can",
    "start": "1861039",
    "end": "1866559"
  },
  {
    "text": "do today um uh similar 67 the language that we're dealing with",
    "start": "1866559",
    "end": "1872240"
  },
  {
    "text": "here is actually similar 67 their ideas come from a previous language similar one which was 1965",
    "start": "1872240",
    "end": "1878159"
  },
  {
    "text": "they took algol 60 and extended it they wanted to deal with simulations and they found",
    "start": "1878159",
    "end": "1883840"
  },
  {
    "text": "that procedures were the wrong ingredient the algorithmic stuff they didn't want to think about simulations in terms of algorithms they",
    "start": "1883840",
    "end": "1890159"
  },
  {
    "text": "wanted to think about simulations in terms of things and classes of things well let's change",
    "start": "1890159",
    "end": "1895200"
  },
  {
    "text": "the word thing to object that sounds a little more technical um and they they didn't add they didn't",
    "start": "1895200",
    "end": "1900799"
  },
  {
    "text": "bolt something onto the language they took a thing that was already there if i've got a block normally what happens in a block structured piece of",
    "start": "1900799",
    "end": "1907279"
  },
  {
    "text": "code the way you have instinctively thought about it is i enter at the beginning of the block",
    "start": "1907279",
    "end": "1912960"
  },
  {
    "text": "variables happen if i've got procedures procedures get defined and then the code happens yeah we can",
    "start": "1912960",
    "end": "1918799"
  },
  {
    "text": "mix the order of these up depending on the language but we're allowed to there and then when we leave the block",
    "start": "1918799",
    "end": "1924799"
  },
  {
    "text": "that is a stack frame it pops it disappears we're done but what if it didn't what if the block",
    "start": "1924799",
    "end": "1931600"
  },
  {
    "text": "instance this unity of data and action survived and you could give",
    "start": "1931600",
    "end": "1939440"
  },
  {
    "text": "it identity and point to it and pass it around hey here's the thing it's got stuff in it and it can do stuff",
    "start": "1939440",
    "end": "1945039"
  },
  {
    "text": "could that give rise to a new paradigm well yeah actually it turns out it does so we take the code that i had before",
    "start": "1945039",
    "end": "1950320"
  },
  {
    "text": "and i just add the class keyword in front and there's no concept of constructor here",
    "start": "1950320",
    "end": "1955600"
  },
  {
    "text": "um the original idea which is actually somewhat simpler i have to admit that many of the things that we find in in",
    "start": "1955600",
    "end": "1962159"
  },
  {
    "text": "our current languages um is this idea of i initialize a class as if a function i",
    "start": "1962159",
    "end": "1968880"
  },
  {
    "text": "pass something in that data is always available it's immediately part of the state and here is what would historically be",
    "start": "1968880",
    "end": "1974960"
  },
  {
    "text": "called constructor code that runs at the end once we've reached the end of this block we now have a",
    "start": "1974960",
    "end": "1980399"
  },
  {
    "text": "surviving block instance that we can now refer to and we can pass it around so it's a",
    "start": "1980399",
    "end": "1985519"
  },
  {
    "text": "persistent block not a block that evaporates when you leave this is a really profound idea and",
    "start": "1985519",
    "end": "1991120"
  },
  {
    "text": "then we get this idea a call of a class generates a new object to that class boom object orientation is a version",
    "start": "1991120",
    "end": "1998399"
  },
  {
    "text": "is object rotation and proceduralism have a really close relationship but there's something else going on here",
    "start": "1998399",
    "end": "2003919"
  },
  {
    "text": "so you might think well hang on that that's interesting because what you're describing there",
    "start": "2003919",
    "end": "2010159"
  },
  {
    "text": "kathleen is um a closure you have got something that captures its",
    "start": "2010159",
    "end": "2016399"
  },
  {
    "text": "surrounding context you know that's interesting because i'm going to use i'm going to use",
    "start": "2016399",
    "end": "2022399"
  },
  {
    "text": "um javascript because hey why the hell not um because javascript actually has inside",
    "start": "2022399",
    "end": "2029039"
  },
  {
    "text": "it it actually has a really elegant object model i mean it has half a dozen object models just in case you don't like the really",
    "start": "2029039",
    "end": "2034559"
  },
  {
    "text": "elegant one um but the really elegant one doesn't use the word class and it's not based on function prototypes",
    "start": "2034559",
    "end": "2041039"
  },
  {
    "text": "a function prototype model really simple idea i'm going to use lambdas and this idea of lambdas and closures is a really",
    "start": "2041039",
    "end": "2047519"
  },
  {
    "text": "intimate one but many people think oh lambdas you must be doing functional programming uh lambdas aren't unique to",
    "start": "2047519",
    "end": "2052960"
  },
  {
    "text": "functional programming lambdas are unique to programming you'll actually find lambdas and the concept specifically",
    "start": "2052960",
    "end": "2059280"
  },
  {
    "text": "applied of closures is fundamental to many paradigms it's not uh it's not distinct to functional",
    "start": "2059280",
    "end": "2065919"
  },
  {
    "text": "programming indeed there are many functional programs programmers that don't actually do lambdas very",
    "start": "2065919",
    "end": "2071599"
  },
  {
    "text": "either at all or very well because the principle unit of composition is the function it's not necessarily the",
    "start": "2071599",
    "end": "2077040"
  },
  {
    "text": "freestanding function it is the function clearly for many people they think again",
    "start": "2077040",
    "end": "2082878"
  },
  {
    "text": "this is one of those ones that just like i mistakenly and many others have mistaken the concept of data",
    "start": "2082879",
    "end": "2087919"
  },
  {
    "text": "abstraction has been unique to objects for the first time you encounter you go hey this is object orientation it might",
    "start": "2087919",
    "end": "2093520"
  },
  {
    "text": "well be abstract data types it might be one of the other modular approaches the same thing i noticed a",
    "start": "2093520",
    "end": "2099359"
  },
  {
    "text": "lot among a lot of programmers because many of the programming languages these days have been saying hey guess what we've added",
    "start": "2099359",
    "end": "2105599"
  },
  {
    "text": "lambdas so c plus plus added lambda is in 2011 java added it in 2014",
    "start": "2105599",
    "end": "2111520"
  },
  {
    "text": "and everyone's been adding them javascript's and they're going like please i've been doing this since the 20th century it's the mid-1990s",
    "start": "2111520",
    "end": "2118800"
  },
  {
    "text": "it had lambdas in there it might not have had the arrow notation but it had um landers that was part of the",
    "start": "2118800",
    "end": "2123839"
  },
  {
    "text": "inspiration uh for it but that idea is for many people to go oh i'm now doing fictional program",
    "start": "2123839",
    "end": "2129920"
  },
  {
    "text": "no you're not you're just programming with lenders and functional programming is a lot more than lambdas um some of these",
    "start": "2129920",
    "end": "2135760"
  },
  {
    "text": "languages that are acquiring landers that you can be a little more functional in them but you're not doing necessarily",
    "start": "2135760",
    "end": "2141359"
  },
  {
    "text": "doing functional programming if you're a java programmer that is a language that will never be functional",
    "start": "2141359",
    "end": "2146640"
  },
  {
    "text": "um because you can't define a function a freestanding function in it until you can we can't consider it functional um but",
    "start": "2146640",
    "end": "2154000"
  },
  {
    "text": "you can do lambda-y things and more functional things that's certainly true but there's a purity here that allows us to get",
    "start": "2154000",
    "end": "2160079"
  },
  {
    "text": "inside the essence of the object model so we've understood the object model from proceduralism let's understand where it comes from",
    "start": "2160079",
    "end": "2166079"
  },
  {
    "text": "here what i've got is i've got so i'm going to do everything with lambdas i'm going to have a function",
    "start": "2166079",
    "end": "2171440"
  },
  {
    "text": "called new stack or rather i'm going to have a name that i'm going to bind to a lambda but when executed this is a block",
    "start": "2171440",
    "end": "2180480"
  },
  {
    "text": "there is state in this block it's a list called items that and then i'm going to return a",
    "start": "2180480",
    "end": "2185839"
  },
  {
    "text": "cartesian product or object or dictionary however you want to look at it um and each this contains",
    "start": "2185839",
    "end": "2191520"
  },
  {
    "text": "lambdas that refer to this private state this is the ultimate in private it's not a keyword that says private",
    "start": "2191520",
    "end": "2197040"
  },
  {
    "text": "that i can inspect or hack using reflection it is the ultimate primary this is a local",
    "start": "2197040",
    "end": "2202240"
  },
  {
    "text": "variable there is no way from the outside to get into it what i get what i'm offering the outside",
    "start": "2202240",
    "end": "2207520"
  },
  {
    "text": "world and this actually starts taking us into territory that um for those of you who are old enough",
    "start": "2207520",
    "end": "2213760"
  },
  {
    "text": "to show the scars uh looks more like microsoft con than anything which is actually bizarre enough a pure object model",
    "start": "2213760",
    "end": "2219760"
  },
  {
    "text": "um i'm going to offer you an interface here's a set of here's a set of functions well here's a set of names",
    "start": "2219760",
    "end": "2225920"
  },
  {
    "text": "that bind to lambdas that then further refer to private state you don't get to look at that state there's no types here",
    "start": "2225920",
    "end": "2232560"
  },
  {
    "text": "i'll come back to types later but it is a very pure object model it's purely it's purely based on name that the data",
    "start": "2232560",
    "end": "2239599"
  },
  {
    "text": "is fully abstracted i can switch my implementation round here i'm taking the",
    "start": "2239599",
    "end": "2244880"
  },
  {
    "text": "the the head of the stack is at zero and here it's back to front so there's this really interesting idea",
    "start": "2244880",
    "end": "2251440"
  },
  {
    "text": "about this unity of ideas which is observed by um william cook",
    "start": "2251440",
    "end": "2258000"
  },
  {
    "text": "um uh in a paper in 2009 where he revisited a paper uh from 1984 by",
    "start": "2258000",
    "end": "2264160"
  },
  {
    "text": "cardellian wagner and that's the same cardelli um as a bardi and cardelli who wrote a theory of objects",
    "start": "2264160",
    "end": "2270240"
  },
  {
    "text": "um and uh william cook wrote this paper on understanding data abstraction revisited there's a bunch of",
    "start": "2270240",
    "end": "2276320"
  },
  {
    "text": "interesting stuff there he gave a talk on it as well but he makes this uh wonderful observation lambda calculus was the first object-oriented language",
    "start": "2276320",
    "end": "2282960"
  },
  {
    "text": "um so it's kind of like whoa okay so um a lot of people think oh yeah my",
    "start": "2282960",
    "end": "2288160"
  },
  {
    "text": "language has just got lambdas 21st century javascript is feeling a little bit smug because it got it got its lambdas",
    "start": "2288160",
    "end": "2294800"
  },
  {
    "text": "um in 1995 lisp is feeling even even more smug because in 1960 the first",
    "start": "2294800",
    "end": "2300160"
  },
  {
    "text": "implementation of this that had lambdas but actually landers that's the work of alonzo church that dates back to 1932",
    "start": "2300160",
    "end": "2309520"
  },
  {
    "text": "and so basically if you've been getting excited about lambdas welcome to the 1930s programming like",
    "start": "2309680",
    "end": "2315520"
  },
  {
    "text": "it's um the first half of the last century um this is the the original paper uh the",
    "start": "2315520",
    "end": "2320960"
  },
  {
    "text": "explored this idea he did not create lambdas because he cared about programming programming was not a thing he cared about it because he was trying",
    "start": "2320960",
    "end": "2326880"
  },
  {
    "text": "to explore certain concepts in mathematics the 1930s were a very challenging time well",
    "start": "2326880",
    "end": "2332240"
  },
  {
    "text": "for the world but also for mathematics um kurt gerdel in 1930 had just published his incompleteness",
    "start": "2332240",
    "end": "2338240"
  },
  {
    "text": "theorems which kind of messed up everybody's idea that math is complete and elegant consistent",
    "start": "2338240",
    "end": "2344000"
  },
  {
    "text": "um and so there were a whole lot of things that came out of that including one that's probably more applicable to",
    "start": "2344000",
    "end": "2349440"
  },
  {
    "text": "us the halting problem as well as some other ideas that came out of that types type theory um but",
    "start": "2349440",
    "end": "2356240"
  },
  {
    "text": "he was exploring this so he created a simple formalism um and uh the better known paper is the 1936 paper",
    "start": "2356240",
    "end": "2363280"
  },
  {
    "text": "um and so i i will claim to have read the words on these but not necessarily",
    "start": "2363280",
    "end": "2368800"
  },
  {
    "text": "fully understand uh fully understanding all of the consequences i'm not a mathematician by training",
    "start": "2368800",
    "end": "2373839"
  },
  {
    "text": "um i used to deal with the real world physics um and then i decided to escape the real world and go into software",
    "start": "2373839",
    "end": "2379680"
  },
  {
    "text": "um so i've carefully avoided uh having to know this stuff mostly but we can create an abbreviation",
    "start": "2379680",
    "end": "2387520"
  },
  {
    "text": "i'm going to create a stack using pure land capitalist i'm going to equate the name new with",
    "start": "2387520",
    "end": "2394000"
  },
  {
    "text": "a a lambda taking two parameters that yields a second one that's an arbitrary decision i could do it any way i wanted",
    "start": "2394000",
    "end": "2400320"
  },
  {
    "text": "but that is my decision to create a new stack push is a little more fun we're going to",
    "start": "2400320",
    "end": "2406319"
  },
  {
    "text": "take three elements one which is going to be stack one which is going to be the new element and we're going to bind them",
    "start": "2406319",
    "end": "2411599"
  },
  {
    "text": "together this is actually a form of data abstraction we're going to um it turns out that lambdas are all",
    "start": "2411599",
    "end": "2417280"
  },
  {
    "text": "about doing stuff there's no such thing as typed lambda in the original model",
    "start": "2417280",
    "end": "2422480"
  },
  {
    "text": "there's only lambdas so we can do this and i can create a formalism for pop and i can create a formalism for top",
    "start": "2422480",
    "end": "2428640"
  },
  {
    "text": "this is all good fun i'm not going to linger on this i have a different talk where i talk about actually lambda calculus and how it",
    "start": "2428640",
    "end": "2435920"
  },
  {
    "text": "surprises us um that uh where i explore this in more detail but there you go that's that's a lambda version of stack if you",
    "start": "2435920",
    "end": "2441760"
  },
  {
    "text": "want the purest version uh that you could possibly get let's pick up another aspect of",
    "start": "2441760",
    "end": "2448079"
  },
  {
    "text": "um this stuff object orientation concatenation now you might not be",
    "start": "2448079",
    "end": "2454640"
  },
  {
    "text": "familiar with the term but that's what we call inheritance or derivation concatenation is an operation",
    "start": "2454640",
    "end": "2460560"
  },
  {
    "text": "defined between two classes a and b or a class a and a block c what's really interesting is the purity of similar",
    "start": "2460560",
    "end": "2467920"
  },
  {
    "text": "is it allows you to basically say well it's all blocked i can now actually have a block inherit",
    "start": "2467920",
    "end": "2474480"
  },
  {
    "text": "from a class or as it were extend or concatenate a class",
    "start": "2474480",
    "end": "2479599"
  },
  {
    "text": "and i can have blocks it's a very cool kind of relationship so what is a concatenation um it",
    "start": "2479599",
    "end": "2485280"
  },
  {
    "text": "consists in merging of the attributes of both components the base and the derived and the composition of their actions",
    "start": "2485280",
    "end": "2492000"
  },
  {
    "text": "okay that's kind of extending and overriding we can actually do that with our nice little faked object model again",
    "start": "2492000",
    "end": "2498079"
  },
  {
    "text": "we don't actually need classes this is a purely object-based model i can define the concept of stackable",
    "start": "2498079",
    "end": "2505839"
  },
  {
    "text": "okay i'm going to define it by capability and mix it i'm going to say a stackable is an opera is basically i take a base",
    "start": "2505839",
    "end": "2513839"
  },
  {
    "text": "and um i take whatever base class we want and what i'm going to do is i am going to add some operations to that",
    "start": "2513839",
    "end": "2521359"
  },
  {
    "text": "and some state and that's what the assign operation here does and so to get the stack that i had",
    "start": "2521359",
    "end": "2526800"
  },
  {
    "text": "before i can simply say a new stack is now equivalent to a stackable against an empty set of",
    "start": "2526800",
    "end": "2531839"
  },
  {
    "text": "operations an empty object okay take an empty take an empty object",
    "start": "2531839",
    "end": "2537280"
  },
  {
    "text": "and now add stackability capability to it i'm also going to add another capability clearable the thing that is clearable",
    "start": "2537280",
    "end": "2544880"
  },
  {
    "text": "when you call clear on it empties out so now i've decided my new stack is a clearable",
    "start": "2544880",
    "end": "2550240"
  },
  {
    "text": "stackable concept so i'm doing composition here in fact yeah function composition so",
    "start": "2550240",
    "end": "2558240"
  },
  {
    "text": "here we have some functional looking code so i've just defined inheritance in terms of what many people think of as being",
    "start": "2558240",
    "end": "2563599"
  },
  {
    "text": "a functional programming concept reduction or folding we've got that i'm using function",
    "start": "2563599",
    "end": "2569520"
  },
  {
    "text": "composition to define data abstraction and composition there's a kind of unity here that's",
    "start": "2569520",
    "end": "2575839"
  },
  {
    "text": "quite intriguing it also makes us think how do we use this mechanism because this is the people think people got it",
    "start": "2575839",
    "end": "2582640"
  },
  {
    "text": "very excited incorrectly reuse i can reuse everything",
    "start": "2582640",
    "end": "2588000"
  },
  {
    "text": "by inheriting um there are whole books dedicated to this um virtual miners object oriented software",
    "start": "2588000",
    "end": "2593520"
  },
  {
    "text": "construction a book of 30 years ago people keep referring to this book but very few people have actually read it and because i was",
    "start": "2593520",
    "end": "2599119"
  },
  {
    "text": "running a workshop just beforehand where i corrected somebody on their incorrect use of",
    "start": "2599119",
    "end": "2604480"
  },
  {
    "text": "the open closed principle um so if you are familiar with the open close principle um that is popularized by robert martin",
    "start": "2604480",
    "end": "2612000"
  },
  {
    "text": "wrote that's wrong robert martin did not correctly read the book he borrowed it from this is the original source",
    "start": "2612000",
    "end": "2618319"
  },
  {
    "text": "object-oriented software construction by bertrand in that you discover what it really is",
    "start": "2618319",
    "end": "2623680"
  },
  {
    "text": "um it's not at all what robert martin thinks so if you think you're using the open close principle in your code",
    "start": "2623680",
    "end": "2629440"
  },
  {
    "text": "have a chat with me afterwards it's all based on a big misunderstanding but he seems to have made a",
    "start": "2629440",
    "end": "2635200"
  },
  {
    "text": "certain profit out of it so he's not going to change his understand but open close principle is not what people think it is",
    "start": "2635200",
    "end": "2640400"
  },
  {
    "text": "um also virtual meyer's advice was pretty much inherit from everything multiple inheritance is good",
    "start": "2640400",
    "end": "2646000"
  },
  {
    "text": "let us inherit from everything we want to reuse this is terrible and we already knew this was a bad idea",
    "start": "2646000",
    "end": "2651520"
  },
  {
    "text": "um back in 1972 because we see here that um darl and hall were very clear concept",
    "start": "2651520",
    "end": "2658560"
  },
  {
    "text": "hierarchies the construction principle involved for using concatenation",
    "start": "2658560",
    "end": "2663599"
  },
  {
    "text": "is best called abstraction we concentrate on features common to many phenomena we abstract away features too",
    "start": "2663599",
    "end": "2669119"
  },
  {
    "text": "far removed from the conceptual level at which we are working this is 72 we also have a much better",
    "start": "2669119",
    "end": "2675520"
  },
  {
    "text": "formalism this one um is more it's not always what correctly understood but it is",
    "start": "2675520",
    "end": "2680560"
  },
  {
    "text": "better understood um same barbara liskoff this golf substitution principle this is her 1987 paper",
    "start": "2680560",
    "end": "2686640"
  },
  {
    "text": "a type hierarchy is composed of subtypes and super types",
    "start": "2686640",
    "end": "2691680"
  },
  {
    "text": "many people have taken this to be the organizing discipline for a good class hierarchy in object orientation",
    "start": "2691680",
    "end": "2697839"
  },
  {
    "text": "but she's actually not really talking about objects in that sense or classes she is talking about types",
    "start": "2697839",
    "end": "2703359"
  },
  {
    "text": "the intuitive idea of a subtype is one of whose uh one whose objects provide all the behavior of objects of another",
    "start": "2703359",
    "end": "2708880"
  },
  {
    "text": "type super type plus something extra what is wanted here is something like the following substitution property",
    "start": "2708880",
    "end": "2715599"
  },
  {
    "text": "and honestly if you've just been eating carbs for lunch you're going to fall asleep in the next sentence if for each object one of type s there",
    "start": "2715599",
    "end": "2722480"
  },
  {
    "text": "is an object o2 of type t such that four programs p defined in terms of t the behavior of p is unchanged when o one is substitute for o",
    "start": "2722480",
    "end": "2728640"
  },
  {
    "text": "two then s is a subset of t it's like oh man okay i can actually the great thing about",
    "start": "2728640",
    "end": "2734400"
  },
  {
    "text": "the list of substitution principle the term lsp was coined by jim caplin in his advanced class plus programming",
    "start": "2734400",
    "end": "2741200"
  },
  {
    "text": "styles of idioms book in 1992 based on this ghost paper she did not",
    "start": "2741200",
    "end": "2746480"
  },
  {
    "text": "vainly name it after herself but um cope extracted that observation",
    "start": "2746480",
    "end": "2751680"
  },
  {
    "text": "which is why it gets associated in part with objects but we can actually do that here so i'm",
    "start": "2751680",
    "end": "2757680"
  },
  {
    "text": "going to add a new mixer a non-duplicate top if you mix this in with a stack what it means is that when you",
    "start": "2757680",
    "end": "2764640"
  },
  {
    "text": "try and push onto the top something that is already there then it's going to ignore it so now i've already got that at the top",
    "start": "2764640",
    "end": "2770960"
  },
  {
    "text": "okay so this is an interesting idea now what i'm going to do is i'm going to write a test",
    "start": "2770960",
    "end": "2777440"
  },
  {
    "text": "okay i've got a set of tests here an ad hoc testing framework i've got a test here that says a",
    "start": "2777440",
    "end": "2783760"
  },
  {
    "text": "non-empty stack becomes deeper by retaining a pushed item as its top and then i've got the test body i've got",
    "start": "2783760",
    "end": "2790720"
  },
  {
    "text": "a new stack i push ndc i push tech 10 i push tech down the stack depth is three and the top is tactile now just as a",
    "start": "2790720",
    "end": "2797200"
  },
  {
    "text": "clarification if you're not used to javascript in javascript if you want something to be really equal to",
    "start": "2797200",
    "end": "2802480"
  },
  {
    "text": "something you just hold down your finger down on the equals key key the more equal you want it to be the more",
    "start": "2802480",
    "end": "2807680"
  },
  {
    "text": "equals equals equals you need but this is like really equal three because it's like yeah i mean",
    "start": "2807680",
    "end": "2813359"
  },
  {
    "text": "um so that seems to be the invariant okay when i do this i compose i have my",
    "start": "2813359",
    "end": "2820079"
  },
  {
    "text": "conventional stack that has clearing operations and things like that then the test passes when i also mix in",
    "start": "2820079",
    "end": "2827119"
  },
  {
    "text": "a non-duplicate top the test fails because we tried to push tech town onto it twice",
    "start": "2827119",
    "end": "2832880"
  },
  {
    "text": "and it ignored the second one because it's a non-duplicate top therefore depth is two rather than three and the",
    "start": "2832880",
    "end": "2838960"
  },
  {
    "text": "test fails that's the key idea lsp is actually a testable proposition we are saying",
    "start": "2838960",
    "end": "2844160"
  },
  {
    "text": "that if i have something that says it's the same type then it should pass the same tests if it conforms to that",
    "start": "2844160",
    "end": "2850079"
  },
  {
    "text": "if it does not then it's not the same type or our tests have made too much of an implementation assumption so this is actually a testable concept",
    "start": "2850079",
    "end": "2857920"
  },
  {
    "text": "but there's another idea here um barbara liskoff wasn't really talking about objects and classes the way we",
    "start": "2857920",
    "end": "2863520"
  },
  {
    "text": "understand them she was actually talking about abstract data types she was talking about the substitutability she wasn't",
    "start": "2863520",
    "end": "2869520"
  },
  {
    "text": "talking about plug-in frameworks she was talking about the idea that if i have a program that is linked",
    "start": "2869520",
    "end": "2874800"
  },
  {
    "text": "with respect to one implementation of type if i substitute an alternative implementation then that",
    "start": "2874800",
    "end": "2882400"
  },
  {
    "text": "program should have the same behavior identically and she says the behavior of p the program is unchanged when i want",
    "start": "2882400",
    "end": "2888880"
  },
  {
    "text": "to substitute for r2 that basically means if you say i'm going to have the same behavior but add logging then you broke an lsp",
    "start": "2888880",
    "end": "2894720"
  },
  {
    "text": "because the program no longer has the same behavior it now does logging as well so it's a this is so the strict",
    "start": "2894720",
    "end": "2902559"
  },
  {
    "text": "list of substitution really is quite strict it really is about the data types um and the uh privacy of that but we do",
    "start": "2902559",
    "end": "2910720"
  },
  {
    "text": "nonetheless have a a general principle we can learn from it even if we're not going to be so strict",
    "start": "2910720",
    "end": "2915760"
  },
  {
    "text": "and it was captured back in the early 90s in the gang of four books programmed to an interface not an implementation",
    "start": "2915760",
    "end": "2922160"
  },
  {
    "text": "now that doesn't mean use the interface construct um in the programming language that you're working in",
    "start": "2922160",
    "end": "2928720"
  },
  {
    "text": "well that's good um what it means is if there's something that has a public aspect and a non-public aspect",
    "start": "2928720",
    "end": "2934960"
  },
  {
    "text": "you depend on that and you organize your code accordingly um it's really about the shape of the",
    "start": "2934960",
    "end": "2940559"
  },
  {
    "text": "thing and that if we look at this from a typescript point of view i can characterize um i can say",
    "start": "2940559",
    "end": "2947680"
  },
  {
    "text": "this is what you can depend on interface stack if you have a thing and it claims to be a stack then it should support depth",
    "start": "2947680",
    "end": "2954319"
  },
  {
    "text": "that returns a number top can return anything pop doesn't return anything and a push takes anything and returns",
    "start": "2954319",
    "end": "2961359"
  },
  {
    "text": "void and i can take that previous javascript and actually make that claim that's why",
    "start": "2961359",
    "end": "2966800"
  },
  {
    "text": "this is interesting is because this doesn't use the conventional class construct of javascript but it",
    "start": "2966800",
    "end": "2972880"
  },
  {
    "text": "still satisfies the types and that causes us to revisit the kind",
    "start": "2972880",
    "end": "2978240"
  },
  {
    "text": "of the big three of object orientation the way that many people have been taught them",
    "start": "2978240",
    "end": "2983280"
  },
  {
    "text": "particularly if they come through the kind of c-plus plus java c-sharp root is the big three encapsulation",
    "start": "2983280",
    "end": "2989599"
  },
  {
    "text": "inheritance and polymorphism what we actually learn and particularly if you work with dynamic languages is",
    "start": "2989599",
    "end": "2994960"
  },
  {
    "text": "actually inheritance really isn't that interesting the big deal is polymorphism in",
    "start": "2994960",
    "end": "3000240"
  },
  {
    "text": "languages that have a static type system inheritance is its main use of",
    "start": "3000240",
    "end": "3005520"
  },
  {
    "text": "inheritance it's for type conformance it's not at all it's not that important you use inheritance to get polymorphism if i can get polymorphism",
    "start": "3005520",
    "end": "3012720"
  },
  {
    "text": "another way i will get it another way as well so in other words poly inheritance in a statically typed language is an",
    "start": "3012720",
    "end": "3018559"
  },
  {
    "text": "enabler for polymorphism therefore it's subordinate to it the real criteria here is the polymorphism idea",
    "start": "3018559",
    "end": "3025440"
  },
  {
    "text": "and that's important when we look back at this i can equally well have a piece of code that expects stack",
    "start": "3025440",
    "end": "3031280"
  },
  {
    "text": "and have a completely different implementation written using the conventional class construct that we find in typescript",
    "start": "3031280",
    "end": "3038240"
  },
  {
    "text": "and it will still satisfy it it is to do with conformance to an interface whether we have a derivation from it or not",
    "start": "3038240",
    "end": "3044000"
  },
  {
    "text": "is is a question of type system but it is not fundamental to the paradigm people have been mistaking their type",
    "start": "3044000",
    "end": "3049040"
  },
  {
    "text": "system for the paradigm i get this a lot with um when people sort of say they say functional programming what a lot of",
    "start": "3049040",
    "end": "3055200"
  },
  {
    "text": "people who talk about functional programming you actually mean is henley mill the type system um which excludes a number of functional",
    "start": "3055200",
    "end": "3062880"
  },
  {
    "text": "languages such as clojure which doesn't have such a type system often people are focusing on that one",
    "start": "3062880",
    "end": "3068559"
  },
  {
    "text": "thing and they take it to be the whole and we see that this has been happening all through history this is often how we approach",
    "start": "3068559",
    "end": "3073760"
  },
  {
    "text": "paradise when we're new to them um so and if we actually think about it",
    "start": "3073760",
    "end": "3079760"
  },
  {
    "text": "well clearly what we've really got there is encapsulation is the strongest point um",
    "start": "3079760",
    "end": "3086079"
  },
  {
    "text": "when we the encapsulation is is the dominant aspect followed by polymorphism",
    "start": "3086079",
    "end": "3091440"
  },
  {
    "text": "inheritance is less interesting or important because when we think about it the idea of programming to an interface",
    "start": "3091440",
    "end": "3097680"
  },
  {
    "text": "why am i programmed to interface because i'm hiding the implementation so in other words it turns out class hierarchies when constructed in a",
    "start": "3097680",
    "end": "3104480"
  },
  {
    "text": "list of style class hierarchies are an example of encapsulation because you no longer depend on",
    "start": "3104480",
    "end": "3110800"
  },
  {
    "text": "the implementation detail the concrete class that's irrelevant well isn't that encapsulation well yes",
    "start": "3110800",
    "end": "3116160"
  },
  {
    "text": "if you like it's a it's a it's a dynamic extension of the concept of encapsulation and good class hierarchy using encapsulation",
    "start": "3116160",
    "end": "3124800"
  },
  {
    "text": "my favorite observation",
    "start": "3124800",
    "end": "3127599"
  }
]