[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "all right then we are going to demonstrate some binary exploitation",
    "start": "5440",
    "end": "12000"
  },
  {
    "text": "we are trying this new thing uh this google thingy so if you have any",
    "start": "12000",
    "end": "17680"
  },
  {
    "text": "questions you can go here and ask a question and if we have time we can",
    "start": "17680",
    "end": "23439"
  },
  {
    "text": "put it on the presentation and then go through it afterwards",
    "start": "23439",
    "end": "28880"
  },
  {
    "text": "but let's start by saying a few words about ourselves all right so uh i'm christian and i",
    "start": "28880",
    "end": "36880"
  },
  {
    "start": "30000",
    "end": "147000"
  },
  {
    "text": "currently work as a security engineer at google uh where i work on protecting our",
    "start": "36880",
    "end": "42559"
  },
  {
    "text": "some of our products from state-sponsored attackers and i previously have",
    "start": "42559",
    "end": "48480"
  },
  {
    "text": "experiences doing malware analysis and vulnerability research so i have a very like security",
    "start": "48480",
    "end": "55039"
  },
  {
    "text": "heavy background and just as a kind of this disclaimer the views presented here are",
    "start": "55039",
    "end": "61680"
  },
  {
    "text": "my own and does not necessarily reflect the views of my employer and yeah so also very important for this",
    "start": "61680",
    "end": "69280"
  },
  {
    "text": "presentation is that i'm a huge hummus enthusiast so if anyone has any good recipes please hit me up after the talk",
    "start": "69280",
    "end": "78000"
  },
  {
    "text": "i also do a lot of like hacking competitions that's how i got into this field also known as capture the flags",
    "start": "78000",
    "end": "86320"
  },
  {
    "text": "and there i have a team called boot plug the norwegian team yeah all right my name is marit",
    "start": "86320",
    "end": "93360"
  },
  {
    "text": "and i have two roles in my company subrastera i work as a business developer which is",
    "start": "93360",
    "end": "100000"
  },
  {
    "text": "more or less like a subject matter expert and my speciality is secure development",
    "start": "100000",
    "end": "108159"
  },
  {
    "text": "and i also do software engineering with clients",
    "start": "108159",
    "end": "113280"
  },
  {
    "text": "i'm a board member of a security group for beginners uh called ushlo setaf",
    "start": "113280",
    "end": "120159"
  },
  {
    "text": "and then also team member of boot plug and then this society for",
    "start": "120159",
    "end": "125200"
  },
  {
    "text": "women and non-binaries and non-binary people called pound-up of girls in norway",
    "start": "125200",
    "end": "133360"
  },
  {
    "text": "and yeah also the pictures this is a picture of christian when he's really tired after a",
    "start": "134080",
    "end": "140080"
  },
  {
    "text": "hacking competition and here's me just giving up and doing some gaming instead",
    "start": "140080",
    "end": "146400"
  },
  {
    "start": "147000",
    "end": "208000"
  },
  {
    "text": "so today our main goal is to demonstrate a vulnerability in sudo",
    "start": "148000",
    "end": "155440"
  },
  {
    "text": "and yeah when i say sudo i mean sudo asin sudo apt install or like i like to",
    "start": "155440",
    "end": "162480"
  },
  {
    "text": "say to christian sudo get me a sandwich",
    "start": "162480",
    "end": "167599"
  },
  {
    "text": "but in order for us to make sure that everyone can follow this vulnerability and the exploit that we're going to go",
    "start": "168640",
    "end": "175280"
  },
  {
    "text": "through uh we want to start by introducing binary exploitation and just briefly",
    "start": "175280",
    "end": "181440"
  },
  {
    "text": "talk about what it is then we're going to move on to explaining the stack and stack overflow",
    "start": "181440",
    "end": "188959"
  },
  {
    "text": "which we think is a very good [Music] segue into",
    "start": "188959",
    "end": "194080"
  },
  {
    "text": "the heap and hippo flows the end we will briefly mention some",
    "start": "194080",
    "end": "200560"
  },
  {
    "text": "protections and preventions that you can take to your development projects",
    "start": "200560",
    "end": "208040"
  },
  {
    "start": "208000",
    "end": "292000"
  },
  {
    "text": "so how many here knows uh a thing or two about binary",
    "start": "212640",
    "end": "217840"
  },
  {
    "text": "expectation ah a couple of hands okay",
    "start": "217840",
    "end": "222959"
  },
  {
    "text": "then um my next the question is who have written an exploit before",
    "start": "222959",
    "end": "229599"
  },
  {
    "text": "oh only christian no i think it's on another hand there's one here as well oh really cool",
    "start": "229599",
    "end": "236159"
  },
  {
    "text": "um so obviously christian has because he did exploit the vulnerability in pseudo",
    "start": "236159",
    "end": "241360"
  },
  {
    "text": "as well um but when i'm going to introduce binary exploitation i want to do it by",
    "start": "241360",
    "end": "248480"
  },
  {
    "text": "using the word pon like pwn and pawn is what we call binary",
    "start": "248480",
    "end": "254319"
  },
  {
    "text": "exploitation in ctfs or hacking competitions",
    "start": "254319",
    "end": "259919"
  },
  {
    "text": "and if we look at the definition from oxford dictionary it looks like this",
    "start": "259919",
    "end": "265280"
  },
  {
    "text": "pawn means to utterly defeat or completely get the better of something",
    "start": "265280",
    "end": "272720"
  },
  {
    "text": "in binary exploitation this something is binaries right",
    "start": "272720",
    "end": "278479"
  },
  {
    "text": "and that often means that a program running on a server when we phone that program we often get",
    "start": "278479",
    "end": "287040"
  },
  {
    "text": "remote code execution on that server",
    "start": "287040",
    "end": "291360"
  },
  {
    "start": "292000",
    "end": "459000"
  },
  {
    "text": "and it is unavoidable to mention memory safety when we talk about",
    "start": "292479",
    "end": "298320"
  },
  {
    "text": "binary exploitation we do have a couple of memory safe",
    "start": "298320",
    "end": "303840"
  },
  {
    "text": "programming languages such as java c-sharp python",
    "start": "303840",
    "end": "308880"
  },
  {
    "text": "rest and we do have a couple of memory unsafe languages such as c and c plus plus",
    "start": "308880",
    "end": "318160"
  },
  {
    "text": "so we're going to look at a couple of mem some a couple of code snippets to",
    "start": "318160",
    "end": "323360"
  },
  {
    "text": "demonstrate the difference between these so we start with the python very simple python script",
    "start": "323360",
    "end": "329840"
  },
  {
    "text": "oh i forgot to start my timer so i'll start now",
    "start": "329840",
    "end": "335919"
  },
  {
    "text": "and this simple python script just outputs give username to standard out",
    "start": "335919",
    "end": "341600"
  },
  {
    "text": "then whatever is written into standard in is stored into the variable called username and then we print hello and the",
    "start": "341600",
    "end": "348400"
  },
  {
    "text": "username in which if i run it i write mauricio and it says hello maricho",
    "start": "348400",
    "end": "356080"
  },
  {
    "text": "but how does this look in for instance c",
    "start": "356080",
    "end": "360638"
  },
  {
    "text": "we immediately see that we require a few more lines of code",
    "start": "361520",
    "end": "367120"
  },
  {
    "text": "so what is happening here is that we allocate 24 bytes worth of space on the heap for",
    "start": "367120",
    "end": "374000"
  },
  {
    "text": "the username and when we read the name from standard in we allow 24 bytes",
    "start": "374000",
    "end": "381039"
  },
  {
    "text": "to be read into the username and then we free the variable afterwards",
    "start": "381039",
    "end": "387520"
  },
  {
    "text": "and the point is that we need to handle memory in the other one we didn't have to do",
    "start": "387520",
    "end": "392800"
  },
  {
    "text": "that and then it's really important to make sure we know how to do it properly",
    "start": "392800",
    "end": "399280"
  },
  {
    "text": "because we can introduce vulnerabilities if we write it poorly",
    "start": "399280",
    "end": "404720"
  },
  {
    "text": "which is when binary expectation comes into the picture",
    "start": "404720",
    "end": "409840"
  },
  {
    "text": "a couple of common vulnerability types are stack overflow also called buffer overflow",
    "start": "410880",
    "end": "418080"
  },
  {
    "text": "we have the heap overflow and then use after three is also a common one",
    "start": "418080",
    "end": "424000"
  },
  {
    "text": "we really wanted to go through all of them but we don't have time but we are going to go into details uh",
    "start": "424000",
    "end": "430080"
  },
  {
    "text": "with the stack and heap overflow oh yeah and christian like i do a lot of",
    "start": "430080",
    "end": "437039"
  },
  {
    "text": "development projects right and sometimes when we talk about binary",
    "start": "437039",
    "end": "442160"
  },
  {
    "text": "exploitation we usually talk about buffer flows and then usually some in the team says",
    "start": "442160",
    "end": "451199"
  },
  {
    "text": "but buffer flow is so old it's probably not relevant anymore do you have any comments on that",
    "start": "451199",
    "end": "458639"
  },
  {
    "text": "yeah so this is something i hear a lot as well i mean the first stack overflow was i don't know documented in like the",
    "start": "458639",
    "end": "465280"
  },
  {
    "start": "459000",
    "end": "553000"
  },
  {
    "text": "80s or something so it's been a few years so we would kind of think that the situation had improved",
    "start": "465280",
    "end": "471120"
  },
  {
    "text": "um just to kind of show you some statistics here i think this was microsoft in 2020 they said something",
    "start": "471120",
    "end": "478000"
  },
  {
    "text": "like 70 percent of their critical vulnerabilities that they patch each year are related to memory safety issues",
    "start": "478000",
    "end": "485360"
  },
  {
    "text": "so like use after freeze heap overflows and so on uh and",
    "start": "485360",
    "end": "490560"
  },
  {
    "text": "the google chrome team had similar statistics where they said something like yes 70 of the vulnerabilities that",
    "start": "490560",
    "end": "497280"
  },
  {
    "text": "they patch in chrome each year are also memory safety issues so",
    "start": "497280",
    "end": "502479"
  },
  {
    "text": "uh these types of uh issues account for a very high number of vulnerabilities that's being patched",
    "start": "502479",
    "end": "508560"
  },
  {
    "text": "every year and this is even though like we have a lot of",
    "start": "508560",
    "end": "513919"
  },
  {
    "text": "shiny and cool defense mechanisms today both built into the compiler and the software itself",
    "start": "513919",
    "end": "520719"
  },
  {
    "text": "like for example with chrome they have a lot of really crazy security features but then on the other hand you also have",
    "start": "520719",
    "end": "527760"
  },
  {
    "text": "programs especially maybe in the embedded world that just disable all these defenses that we have developed",
    "start": "527760",
    "end": "534320"
  },
  {
    "text": "over the years so yeah it's still highly relevant today but that's really interesting like you say that both",
    "start": "534320",
    "end": "541200"
  },
  {
    "text": "google and microsoft they have most of their vulnerabilities are",
    "start": "541200",
    "end": "546959"
  },
  {
    "text": "buying expectation vulnerabilities yep so it's highly relevant",
    "start": "546959",
    "end": "553440"
  },
  {
    "start": "553000",
    "end": "571000"
  },
  {
    "text": "and so for now that was the introduction about the of binary expectation uh if",
    "start": "553760",
    "end": "560480"
  },
  {
    "text": "you have any questions just raise your hand anytime and we're going to",
    "start": "560480",
    "end": "566160"
  },
  {
    "text": "move over and talk about the stack",
    "start": "566160",
    "end": "570079"
  },
  {
    "start": "571000",
    "end": "1022000"
  },
  {
    "text": "so the stack is um memory region for temporary storage",
    "start": "571519",
    "end": "578720"
  },
  {
    "text": "of data and that's basically all i'm going to say about the introduction and we're",
    "start": "578720",
    "end": "584560"
  },
  {
    "text": "just going to skip straight into this code snippet and then we're going to see how the stack looks for this code snippet",
    "start": "584560",
    "end": "593680"
  },
  {
    "text": "it's quite similar to one we saw in the beginning but we've added a user struct",
    "start": "593839",
    "end": "600800"
  },
  {
    "text": "it has three members and when we run the program we initialize uh the struct by nulling",
    "start": "600800",
    "end": "609920"
  },
  {
    "text": "out the name member and then set the east hacker and the age members",
    "start": "609920",
    "end": "617279"
  },
  {
    "text": "when we read the name from standard in we allow reading 50 bytes",
    "start": "617360",
    "end": "624079"
  },
  {
    "text": "of characters and",
    "start": "624079",
    "end": "629680"
  },
  {
    "text": "for those of you who see the vulnerability um i hope you're eager to let us know",
    "start": "629680",
    "end": "635920"
  },
  {
    "text": "but don't do it just yet but i heard some rumors that we just moved to switzerland right",
    "start": "635920",
    "end": "642800"
  },
  {
    "text": "yeah and they have really good chocolate right yeah",
    "start": "642800",
    "end": "648399"
  },
  {
    "text": "and we do have a two goody bags here and we are we have two questions today",
    "start": "648399",
    "end": "655279"
  },
  {
    "text": "and uh in just a time in just a bit uh you'll be able to answer",
    "start": "655279",
    "end": "662000"
  },
  {
    "text": "what the vulnerability here is but let's take a look at stack first",
    "start": "662000",
    "end": "669120"
  },
  {
    "text": "every function in the program has a stack frame so",
    "start": "669760",
    "end": "677200"
  },
  {
    "text": "the stack frame belongs to the functions and when we first run the function the",
    "start": "677200",
    "end": "683680"
  },
  {
    "text": "very first thing that happens is that the function prolog sets up",
    "start": "683680",
    "end": "689120"
  },
  {
    "text": "the stack frame by setting the return address the save base pointer and then space for the",
    "start": "689120",
    "end": "695200"
  },
  {
    "text": "local variables the return address is the memory address",
    "start": "695200",
    "end": "701200"
  },
  {
    "text": "in which the program knows where to go after the function finishes",
    "start": "701200",
    "end": "707120"
  },
  {
    "text": "save basepointer is represents the beginning of the stack frame and",
    "start": "707920",
    "end": "714560"
  },
  {
    "text": "also the way to access the local variables",
    "start": "714560",
    "end": "719279"
  },
  {
    "text": "in our program the local variables are the struct so we",
    "start": "719600",
    "end": "724720"
  },
  {
    "text": "have the is hacker the age and the name but when i learn new things",
    "start": "724720",
    "end": "732000"
  },
  {
    "text": "i often think to myself like okay i learned this thing i understand how the stack frame works and i'm able to",
    "start": "732000",
    "end": "738800"
  },
  {
    "text": "exploit programs but how does it really work in a bigger picture so i asked christian which is kind of",
    "start": "738800",
    "end": "745760"
  },
  {
    "text": "like my opponent uh like how does it really work in the bigger picture and i decided to draw to",
    "start": "745760",
    "end": "752720"
  },
  {
    "text": "draw this illustration in which every process has their own",
    "start": "752720",
    "end": "758639"
  },
  {
    "text": "stack and in the processes stack",
    "start": "758639",
    "end": "764160"
  },
  {
    "text": "if one process accesses a memory",
    "start": "764160",
    "end": "769440"
  },
  {
    "text": "address and another process accesses the same memory address they would probably get",
    "start": "769440",
    "end": "775760"
  },
  {
    "text": "some different data because the processes stacks are separated",
    "start": "775760",
    "end": "782079"
  },
  {
    "text": "in our case we have the main stack frame which in the process stack would be this",
    "start": "782079",
    "end": "788639"
  },
  {
    "text": "and i just for to be able to explain added some more",
    "start": "788639",
    "end": "795120"
  },
  {
    "text": "stack frames which means that if the main function would call another function we would have another stack",
    "start": "795120",
    "end": "800800"
  },
  {
    "text": "frame and if that function again calls another stack function no calls another function",
    "start": "800800",
    "end": "806880"
  },
  {
    "text": "that would happen to be after that one on the stack again and this is a lethal structure so",
    "start": "806880",
    "end": "813519"
  },
  {
    "text": "when the function finishes it's just popped out of the stack",
    "start": "813519",
    "end": "818480"
  },
  {
    "text": "and now it's time for some swiss chocolate are anyone who wants to point out the",
    "start": "819199",
    "end": "826480"
  },
  {
    "text": "vulnerability here yeah you were really quick",
    "start": "826480",
    "end": "831680"
  },
  {
    "text": "yeah it's the f gets hacker name and why is that",
    "start": "833600",
    "end": "838079"
  },
  {
    "text": "and then you can also modify the same base pointer all right i'm going to stop you there",
    "start": "851519",
    "end": "858320"
  },
  {
    "text": "you're you're just you understand the whole thing here so what he said is that we allow 50 bytes to be read from",
    "start": "858320",
    "end": "864959"
  },
  {
    "text": "standard in but we only have uh allocated 16 bytes",
    "start": "864959",
    "end": "870079"
  },
  {
    "text": "on the stack for the name so i have an illustration here of exactly what you said",
    "start": "870079",
    "end": "876639"
  },
  {
    "text": "which is that we can and just ignore this for a little bit uh we can overwrite",
    "start": "876639",
    "end": "883199"
  },
  {
    "text": "the name uh and then into the age and it doesn't really matter what we overwrite with it",
    "start": "883199",
    "end": "890160"
  },
  {
    "text": "can be anything and we just use a a's and b's and c's and so on to show you that it's for all of the",
    "start": "890160",
    "end": "897120"
  },
  {
    "text": "variables um and we the h",
    "start": "897120",
    "end": "903360"
  },
  {
    "text": "is an int which is four bytes right so we add four uh b's",
    "start": "903360",
    "end": "908959"
  },
  {
    "text": "is hacker is a boolean but which is one byte but it's padded to four which is why we have four c's",
    "start": "908959",
    "end": "916639"
  },
  {
    "text": "and then there's a blank one here and that's because the struct is padded to 16 bytes in which we need to add",
    "start": "916639",
    "end": "924160"
  },
  {
    "text": "eight more bytes to fill the struct or",
    "start": "924160",
    "end": "929440"
  },
  {
    "text": "to for the padding the save base pointer we don't care what is there but then exactly like you said",
    "start": "929440",
    "end": "936320"
  },
  {
    "text": "the return address is the special place that we want to overwrite",
    "start": "936320",
    "end": "941680"
  },
  {
    "text": "and the thing we want to put into the return address is a memory",
    "start": "941680",
    "end": "946959"
  },
  {
    "text": "address for another place on the stack where we control the contents so we can run our code",
    "start": "946959",
    "end": "954160"
  },
  {
    "text": "so what i did is first of all when i compiled it i compiled just for simplicity for the presentation with the",
    "start": "954160",
    "end": "961600"
  },
  {
    "text": "flag ethnostack protector and the thing this does is to remove a security mechanism where you put",
    "start": "961600",
    "end": "968560"
  },
  {
    "text": "something on the stack to make sure you cannot just overflow it but this can also be if there are enough",
    "start": "968560",
    "end": "974720"
  },
  {
    "text": "vulnerabilities in the code it can be bypassed quite easily",
    "start": "974720",
    "end": "979759"
  },
  {
    "text": "so what we did when we compiled this is to make python",
    "start": "980800",
    "end": "986639"
  },
  {
    "text": "print all of these bytes and then the",
    "start": "986639",
    "end": "992480"
  },
  {
    "text": "the code we control and when we run it it's sake false but this is a good thing",
    "start": "992480",
    "end": "999279"
  },
  {
    "text": "because it's take false and it says like code babe in what question mark question mark and the",
    "start": "999279",
    "end": "1005680"
  },
  {
    "text": "thing it's trying to do is to run the",
    "start": "1005680",
    "end": "1010959"
  },
  {
    "text": "run the code that is on that invalid memory address so it's just not a valid",
    "start": "1010959",
    "end": "1016560"
  },
  {
    "text": "address and then i know it's a successful exploit",
    "start": "1016560",
    "end": "1021759"
  },
  {
    "text": "oh and uh the chocolate you can get it now",
    "start": "1022320",
    "end": "1027760"
  },
  {
    "text": "so are there any questions about this stack and stack overflow we're going through it quite quickly",
    "start": "1030319",
    "end": "1036640"
  },
  {
    "text": "i mean it can be really hard to yeah",
    "start": "1036640",
    "end": "1041839"
  },
  {
    "text": "all right so for heap overflow um i just wanted to mention that the",
    "start": "1041839",
    "end": "1050080"
  },
  {
    "text": "hebrew flow is the vulnerability that is in the pseudo uh is what the suitable vulnerability is",
    "start": "1050080",
    "end": "1057760"
  },
  {
    "text": "but the heap overflow can be a little harder to understand than the stack overflow so we decided to",
    "start": "1057760",
    "end": "1063280"
  },
  {
    "text": "use the stack overflow as a segway into the hippo flow",
    "start": "1063280",
    "end": "1068960"
  },
  {
    "start": "1069000",
    "end": "1142000"
  },
  {
    "text": "and the heap uses dynamic memory allocation",
    "start": "1069600",
    "end": "1075520"
  },
  {
    "text": "while the stack uses a static memory allocation",
    "start": "1075520",
    "end": "1080720"
  },
  {
    "text": "so when we compile a program the sizes that are determined for the stack",
    "start": "1080720",
    "end": "1086400"
  },
  {
    "text": "they never change during runtime but the what we allocate on the heap can change",
    "start": "1086400",
    "end": "1092960"
  },
  {
    "text": "during runtime to mention a couple of apis",
    "start": "1092960",
    "end": "1098799"
  },
  {
    "text": "we already saw malloc and free in the first illustration",
    "start": "1098799",
    "end": "1105440"
  },
  {
    "text": "and then for c plus plus we have new and delete as examples",
    "start": "1105440",
    "end": "1111120"
  },
  {
    "text": "and there are also tons and tons of memory allocators some examples are the glib c malloc",
    "start": "1111120",
    "end": "1119360"
  },
  {
    "text": "then the jmolog practitioner lock and scuto but the thing with all of these",
    "start": "1119360",
    "end": "1124720"
  },
  {
    "text": "is that they have a trade-off between performance and security right so some of them uses some security",
    "start": "1124720",
    "end": "1131600"
  },
  {
    "text": "mechanisms other don't uh and yeah others uses other security",
    "start": "1131600",
    "end": "1137760"
  },
  {
    "text": "mechanisms to explain the heap we do the same thing",
    "start": "1137760",
    "end": "1146080"
  },
  {
    "start": "1142000",
    "end": "1197000"
  },
  {
    "text": "let's see how this program's heap looks like",
    "start": "1146080",
    "end": "1151840"
  },
  {
    "text": "the first thing that is happening here is that we allocate 32 bytes on the heap for the username we allocate",
    "start": "1152240",
    "end": "1159120"
  },
  {
    "text": "64 bytes on the heap for a command then we copy the string command into the",
    "start": "1159120",
    "end": "1166160"
  },
  {
    "text": "command variable uh we do the same thing as usual but then",
    "start": "1166160",
    "end": "1171600"
  },
  {
    "text": "when we print hello and the username we also print the time is and run the",
    "start": "1171600",
    "end": "1177840"
  },
  {
    "text": "system function with the command which in our case is a date",
    "start": "1177840",
    "end": "1183679"
  },
  {
    "text": "this is uh there's a variability here as well and there will be a chocolate you will not get another one",
    "start": "1186799",
    "end": "1193600"
  },
  {
    "text": "so just be prepared this process is heap",
    "start": "1193600",
    "end": "1200559"
  },
  {
    "start": "1197000",
    "end": "1249000"
  },
  {
    "text": "and it's very similar to the stack because every process has its same its own heap as well",
    "start": "1200559",
    "end": "1207039"
  },
  {
    "text": "for this processes heap we have something called chunks because",
    "start": "1207039",
    "end": "1213120"
  },
  {
    "text": "every allocation on the heap is called a chunk and we have a chunk for the username and",
    "start": "1213120",
    "end": "1220240"
  },
  {
    "text": "then we have a chunk for the command if we would allocate some more on the",
    "start": "1220240",
    "end": "1226400"
  },
  {
    "text": "heap we would just allocate more uh use the next free memory",
    "start": "1226400",
    "end": "1232240"
  },
  {
    "text": "for the allocation just a quick comment here uh this is based on the memory allocator in glibc which is what",
    "start": "1232240",
    "end": "1239679"
  },
  {
    "text": "we're using for our uh yeah our presentation they all act a little different",
    "start": "1239679",
    "end": "1246000"
  },
  {
    "text": "uh yeah let's not go into so the happy",
    "start": "1246000",
    "end": "1252080"
  },
  {
    "start": "1249000",
    "end": "1330000"
  },
  {
    "text": "pass or the intended uh use of this function or this program looks like this",
    "start": "1252080",
    "end": "1258240"
  },
  {
    "text": "when we run it and we insert fubar the username chunk will contain fubar",
    "start": "1258240",
    "end": "1264240"
  },
  {
    "text": "and then the date was pro programmability set right so it will",
    "start": "1264240",
    "end": "1269919"
  },
  {
    "text": "always be date right and when we run it it says hello fubar",
    "start": "1269919",
    "end": "1276799"
  },
  {
    "text": "and the time is and the date and now i want to ask",
    "start": "1276799",
    "end": "1283280"
  },
  {
    "text": "are there anyone who knows understood what vulnerabilities",
    "start": "1283280",
    "end": "1289440"
  },
  {
    "text": "okay do you want to choose this time oh i think you were the fastest oh yeah you",
    "start": "1289440",
    "end": "1294480"
  },
  {
    "text": "can overwrite the username and then write your own command all right do you have any um",
    "start": "1294480",
    "end": "1300720"
  },
  {
    "text": "yeah no i was going to ask if you had any comments in mind",
    "start": "1300720",
    "end": "1305840"
  },
  {
    "text": "or something yeah that's a good point he said you can print it to say shadow or something",
    "start": "1309280",
    "end": "1314400"
  },
  {
    "text": "um for our presentation christian came up with a",
    "start": "1314400",
    "end": "1319840"
  },
  {
    "text": "cute idea and we decided to oh a chocolate for you as well there you go",
    "start": "1319840",
    "end": "1327440"
  },
  {
    "text": "yeah we decided to do like this we overflowed the username uh and then",
    "start": "1330320",
    "end": "1335440"
  },
  {
    "text": "in the beginning of the command chunk we use the command of our choice which is calce hello ndc",
    "start": "1335440",
    "end": "1344400"
  },
  {
    "text": "and when we run this using the glibc uh yeah malloc allocator",
    "start": "1344400",
    "end": "1350720"
  },
  {
    "text": "this will be printed this cute cow this is a tiny comment",
    "start": "1350720",
    "end": "1357280"
  },
  {
    "text": "here as well you can see that on the stack overflow example we were explicitly saying please don't use this",
    "start": "1357280",
    "end": "1363360"
  },
  {
    "text": "security feature well this one there's there's no flag like that so this is just straight up",
    "start": "1363360",
    "end": "1369440"
  },
  {
    "text": "normal malloc that's used on i don't know most linux distributions like",
    "start": "1369440",
    "end": "1374720"
  },
  {
    "text": "ubuntu and so on yeah so poorly handled memory right",
    "start": "1374720",
    "end": "1380640"
  },
  {
    "text": "and this um i'm actually not sure how we are on time",
    "start": "1382799",
    "end": "1388720"
  },
  {
    "text": "uh we started 20 oh i was a little fast then it's time for the real world",
    "start": "1388720",
    "end": "1395120"
  },
  {
    "text": "example and this is really the time to ask about the heap if there's anything missing",
    "start": "1395120",
    "end": "1400240"
  },
  {
    "text": "because the heap is the vulnerability in the pseudo uh vulnerability but there",
    "start": "1400240",
    "end": "1406799"
  },
  {
    "text": "are a lot of other things that also needs to be in place so there is a lot of things to think about",
    "start": "1406799",
    "end": "1412799"
  },
  {
    "text": "uh so if you have any questions now is really in the time",
    "start": "1412799",
    "end": "1419440"
  },
  {
    "text": "okay i think we just move on which places which bring my coffee",
    "start": "1420320",
    "end": "1427440"
  },
  {
    "text": "all right so let's head into this uh real world example uh this is based uh like we said",
    "start": "1428400",
    "end": "1434799"
  },
  {
    "text": "on uh recent vulnerability from this year in sudo",
    "start": "1434799",
    "end": "1440080"
  },
  {
    "start": "1438000",
    "end": "1549000"
  },
  {
    "text": "um yeah just a note this bug wasn't found by me or anything this was found by qualis and if you like this type of",
    "start": "1440080",
    "end": "1447760"
  },
  {
    "text": "research you should really check them out they publish a lot of really cool uh vulnerability research and so on and",
    "start": "1447760",
    "end": "1454080"
  },
  {
    "text": "they've found like numerous run abilities in very like high profile targets",
    "start": "1454080",
    "end": "1460720"
  },
  {
    "text": "um yeah so this is a heap overflow in sudo or pseudo edit",
    "start": "1460720",
    "end": "1466080"
  },
  {
    "text": "and sudo edit isn't like some special thing you have to install on the side pseudo edit is just a sim link to sudo",
    "start": "1466080",
    "end": "1473679"
  },
  {
    "text": "that's supposed to be used for only you know editing files and not running commands",
    "start": "1473679",
    "end": "1480000"
  },
  {
    "text": "uh and yeah this vulnerability allows an unprivileged user who isn't in the sudoers file or anything like that",
    "start": "1480000",
    "end": "1487760"
  },
  {
    "text": "to abuse pseudo to get root privileges on the system",
    "start": "1487760",
    "end": "1492960"
  },
  {
    "text": "um yeah i can't remember like how long this bug was present in sudo but it was for a really long while and this is a",
    "start": "1492960",
    "end": "1500559"
  },
  {
    "text": "fun fact here you can see on the side me and another ctf player we were you",
    "start": "1500559",
    "end": "1506080"
  },
  {
    "text": "know right after qualis published their research i think it was january 26th",
    "start": "1506080",
    "end": "1512000"
  },
  {
    "text": "we you know started hacking on this and trying to recreate uh their exploit because they only detail the",
    "start": "1512000",
    "end": "1517200"
  },
  {
    "text": "vulnerability and not like this is how you attack it or you know uh create a full exploit",
    "start": "1517200",
    "end": "1523760"
  },
  {
    "text": "and in a couple of days we were able to create like a stable exploit for this one version of sudo there's like slight differences",
    "start": "1523760",
    "end": "1531360"
  },
  {
    "text": "between versions then it just goes to show that like if details like this are published you",
    "start": "1531360",
    "end": "1538240"
  },
  {
    "text": "should patch quickly because like real attackers will be able to turn this into an exploit very quickly and",
    "start": "1538240",
    "end": "1543760"
  },
  {
    "text": "could abuse that to attack unpatched linux systems",
    "start": "1543760",
    "end": "1549840"
  },
  {
    "start": "1549000",
    "end": "1752000"
  },
  {
    "text": "yeah so let's dive straight into the code there are some prerequisites of getting",
    "start": "1550480",
    "end": "1555600"
  },
  {
    "text": "to this vulnerable piece of code but i'm not going to go into it now if you want to look it up you can look at quality's",
    "start": "1555600",
    "end": "1562080"
  },
  {
    "text": "report later on let's start at the top in the for loop",
    "start": "1562080",
    "end": "1567520"
  },
  {
    "text": "here the two interesting parts here are to and from and this is where we are copying data to and where we're copying",
    "start": "1567520",
    "end": "1574559"
  },
  {
    "text": "it from which makes sense i guess and two hair comes from a variable",
    "start": "1574559",
    "end": "1580159"
  },
  {
    "text": "called user args and this is allocated on the heap by pseudo before we get to this piece of",
    "start": "1580159",
    "end": "1587279"
  },
  {
    "text": "code and user args here is um is supposed to be able to hold every single",
    "start": "1587279",
    "end": "1594000"
  },
  {
    "text": "character that's passed as a command line argument to sudo so this has been like the length has been calculated",
    "start": "1594000",
    "end": "1600159"
  },
  {
    "text": "beforehand so this should you know should be safe",
    "start": "1600159",
    "end": "1605679"
  },
  {
    "text": "and then we have this from variable which comes from av and av here",
    "start": "1605679",
    "end": "1611039"
  },
  {
    "text": "comes from you arguing which is just the argument vector or you know the command line arguments passed",
    "start": "1611039",
    "end": "1617520"
  },
  {
    "text": "to 0. so let's look at the vulnerable part here it's inside the while loop",
    "start": "1617520",
    "end": "1624480"
  },
  {
    "text": "so the while loop will run as long as we're pointing to valid characters and not a null terminator",
    "start": "1624480",
    "end": "1631120"
  },
  {
    "text": "so if we just skip the if test and look at the assignment here we have basically you know assignment",
    "start": "1631120",
    "end": "1637360"
  },
  {
    "text": "and post increment or whatever it's called um so it's just copying one character",
    "start": "1637360",
    "end": "1642960"
  },
  {
    "text": "from from placing it into two and incrementing the pointers",
    "start": "1642960",
    "end": "1648240"
  },
  {
    "text": "so if we remove the if test in the middle here this would just be a string copy right we're just copying characters",
    "start": "1648240",
    "end": "1653360"
  },
  {
    "text": "as long as we don't hit the no byte but then comes the interesting part here this sketchy looking iftest",
    "start": "1653360",
    "end": "1660480"
  },
  {
    "text": "so what it's doing is it's checking is the current character a backslash and if it is it checks if the next",
    "start": "1660480",
    "end": "1666399"
  },
  {
    "text": "character is not a space character and if it's not a space character like a",
    "start": "1666399",
    "end": "1672720"
  },
  {
    "text": "tab or you know new line or whatever it will go into the if block and increment past the",
    "start": "1672720",
    "end": "1679279"
  },
  {
    "text": "backslash so basically it will basically just skip the backslash so what happens though if we",
    "start": "1679279",
    "end": "1686960"
  },
  {
    "text": "if the last character of this string is a backslash",
    "start": "1686960",
    "end": "1692559"
  },
  {
    "text": "then we'll get into the first part of the check and it will check oh this is a backslash perfect and then it",
    "start": "1692559",
    "end": "1699039"
  },
  {
    "text": "will check the next one is the next character not a space character and a null byte doesn't",
    "start": "1699039",
    "end": "1704640"
  },
  {
    "text": "count as a uh wait how is it yeah so the null byte will actually it's not a space character",
    "start": "1704640",
    "end": "1712240"
  },
  {
    "text": "so it will increment past the backslash and we we are now pointing to the",
    "start": "1712240",
    "end": "1718080"
  },
  {
    "text": "null byte at the end of the string and the problem is though that right after this we're actually copying",
    "start": "1718080",
    "end": "1724399"
  },
  {
    "text": "the null byte and then we keep incrementing past the ends of the buffer",
    "start": "1724399",
    "end": "1729600"
  },
  {
    "text": "and this will also result in uh the user argus buffer can't doesn't account for any more characters",
    "start": "1729600",
    "end": "1735840"
  },
  {
    "text": "that's you know that might be placed behind this buffer so um yeah this is the vulnerability",
    "start": "1735840",
    "end": "1744399"
  },
  {
    "text": "any questions or else i'm gonna maybe this is the park view where we would give some chocolate",
    "start": "1744399",
    "end": "1752840"
  },
  {
    "start": "1752000",
    "end": "1810000"
  },
  {
    "text": "yeah so let's just kind of look at how it uh what would happen so in this case let's say we have the string hey",
    "start": "1753200",
    "end": "1759679"
  },
  {
    "text": "backslash and then buy and these are stored for some reason they're stored adjacent to each other in memory",
    "start": "1759679",
    "end": "1766480"
  },
  {
    "text": "so in this case the code you know would basically do a string copy here and copy hey",
    "start": "1766480",
    "end": "1771919"
  },
  {
    "text": "and then when it gets to the backslash it will check is the next character not",
    "start": "1771919",
    "end": "1777039"
  },
  {
    "text": "a space character and it's not so it skips the backslash copies the null terminator",
    "start": "1777039",
    "end": "1782960"
  },
  {
    "text": "and then keeps copying the next string in memory so it will then copy by and when it gets to the end of the string it will stop",
    "start": "1782960",
    "end": "1790000"
  },
  {
    "text": "copying so we could imagine like for example uh the destination buffer here might have i",
    "start": "1790000",
    "end": "1796480"
  },
  {
    "text": "don't know four or five characters uh or space for four or five characters",
    "start": "1796480",
    "end": "1802159"
  },
  {
    "text": "but in this case we're copying eight instead so here we have ourselves a",
    "start": "1802159",
    "end": "1807279"
  },
  {
    "text": "buffer overflow",
    "start": "1807279",
    "end": "1810159"
  },
  {
    "start": "1810000",
    "end": "1844000"
  },
  {
    "text": "yeah just to kind of summarize the bug here so we're copying this data",
    "start": "1812320",
    "end": "1818559"
  },
  {
    "text": "from av and we're overflowing this user our expression and the user is stored on the",
    "start": "1818559",
    "end": "1824559"
  },
  {
    "text": "heap and this is why this is a heap overflow because we're writing more data",
    "start": "1824559",
    "end": "1829600"
  },
  {
    "text": "into this buffer than it can hold or there's a potential of writing more data",
    "start": "1829600",
    "end": "1834720"
  },
  {
    "text": "and this av variable is stored on the stack so we're actually copying data from the",
    "start": "1834720",
    "end": "1840720"
  },
  {
    "text": "stack into the heap",
    "start": "1840720",
    "end": "1844000"
  },
  {
    "start": "1844000",
    "end": "2007000"
  },
  {
    "text": "yeah so like like i said previously like this av variable where we're copying data from",
    "start": "1845919",
    "end": "1852880"
  },
  {
    "text": "this is stored on the stack and it corresponds to this argument vector yeah if you've written c programs you might",
    "start": "1852880",
    "end": "1858320"
  },
  {
    "text": "have seen you know for the signature of main you have int rc and char rgb and these are all stored",
    "start": "1858320",
    "end": "1864720"
  },
  {
    "text": "on the stack and corresponds to the arguments um",
    "start": "1864720",
    "end": "1869760"
  },
  {
    "text": "so if we're if you keep reading data from this stack buffer from an exploitation point of view we",
    "start": "1869760",
    "end": "1876080"
  },
  {
    "text": "want to know what's stored after it like do can we control this data somehow",
    "start": "1876080",
    "end": "1881919"
  },
  {
    "text": "or will the program just crash you know when we're copying random junk but it turns out so great for us as",
    "start": "1881919",
    "end": "1888159"
  },
  {
    "text": "exploit developers the environment variables are stored right after the arguments on the stack",
    "start": "1888159",
    "end": "1894799"
  },
  {
    "text": "and this is done by the linux kernel so when you do you know execv syscall",
    "start": "1894799",
    "end": "1900159"
  },
  {
    "text": "the kernel will just grab all the arguments and the environment variables and just show them into the stack and",
    "start": "1900159",
    "end": "1907039"
  },
  {
    "text": "just right after each other in in memory but dude now you're talking about the stack",
    "start": "1907039",
    "end": "1912240"
  },
  {
    "text": "right but we we just told everyone that this is a heap overflow",
    "start": "1912240",
    "end": "1917840"
  },
  {
    "text": "so why are we talking about the stack yeah so um",
    "start": "1917840",
    "end": "1923039"
  },
  {
    "text": "yeah this is a heap overflow but it's also a stack overread so we're actually",
    "start": "1923039",
    "end": "1928480"
  },
  {
    "text": "reading more data than we should from the stack like we're reading outside of the bounds of our",
    "start": "1928480",
    "end": "1934240"
  },
  {
    "text": "buffer but stack overreap we just explained stack overflows right yeah so aztec overflow",
    "start": "1934240",
    "end": "1941440"
  },
  {
    "text": "is when we write too much data to the stack while stack overrate is just we're reading outside of the buffer and both",
    "start": "1941440",
    "end": "1948320"
  },
  {
    "text": "of these vulnerabilities can be serious and yeah they can lead to some weird issues",
    "start": "1948320",
    "end": "1955518"
  },
  {
    "text": "yeah um yeah and another so just an example here i can see at the diagram at the bottom",
    "start": "1955600",
    "end": "1961840"
  },
  {
    "text": "here if we assume we have a program called test with two environment variables this is",
    "start": "1961840",
    "end": "1967760"
  },
  {
    "text": "uh how it could look like in memory rgb0 is the name of the program which is",
    "start": "1967760",
    "end": "1973360"
  },
  {
    "text": "stored on the stack and then right after the first environment two pointer would be or the string",
    "start": "1973360",
    "end": "1979360"
  },
  {
    "text": "and then the next one and so on so yeah so another question we want to ask",
    "start": "1979360",
    "end": "1985440"
  },
  {
    "text": "ourselves when we're developing exploits is are there any limitations on what we can do",
    "start": "1985440",
    "end": "1991360"
  },
  {
    "text": "and it turns out that basically there's none like we can put anything we want into the environment variable",
    "start": "1991360",
    "end": "1997840"
  },
  {
    "text": "or environment variables i guess there is some size limit set by the by the linux kernel but uh",
    "start": "1997840",
    "end": "2004480"
  },
  {
    "text": "but yeah we can basically put whatever we want there",
    "start": "2004480",
    "end": "2008559"
  },
  {
    "start": "2007000",
    "end": "2293000"
  },
  {
    "text": "yeah so just to kind of yep okay so yeah we control the size because we",
    "start": "2009519",
    "end": "2014880"
  },
  {
    "text": "can control like how many environment variables there are and how large they are and we also control their contents",
    "start": "2014880",
    "end": "2022399"
  },
  {
    "text": "and one thing that you'll see later on is that we can write null bytes by just having a single backslash in the",
    "start": "2022399",
    "end": "2029440"
  },
  {
    "text": "environment variables because that's basically the the bug right when it gets to a",
    "start": "2029440",
    "end": "2035120"
  },
  {
    "text": "backslash it will just skip it and then copy the null byte after and this is important for the exploit later on we'll show that",
    "start": "2035120",
    "end": "2043039"
  },
  {
    "text": "but yeah the question is what do we target like if you do this like if you send just a random bunch of",
    "start": "2043039",
    "end": "2050079"
  },
  {
    "text": "junk to pseudo and you trigger the heap overflow either nothing happens or pseudo will crash right",
    "start": "2050079",
    "end": "2056878"
  },
  {
    "text": "but we want to take this you know useless crash and turn it into something i don't know beautiful if you",
    "start": "2056879",
    "end": "2064560"
  },
  {
    "text": "yeah and the way that qualis did it was which was really nice and when me and my",
    "start": "2064560",
    "end": "2069679"
  },
  {
    "text": "friend were writing an exploit we did the same thing to try and recreate their technique",
    "start": "2069679",
    "end": "2074878"
  },
  {
    "text": "and what they were doing is they were basically fussing pseudo so you know throwing semi-random stuff at it",
    "start": "2074879",
    "end": "2081200"
  },
  {
    "text": "and what they were trying to do is they would you know change the sizes of the environment variables and the arguments",
    "start": "2081200",
    "end": "2087440"
  },
  {
    "text": "to sudo to try and influence how the heap looks like and",
    "start": "2087440",
    "end": "2092720"
  },
  {
    "text": "if you influence the way the heap looks like this could turn you know into different types of crashes or maybe and",
    "start": "2092720",
    "end": "2098800"
  },
  {
    "text": "maybe some of them are interesting and what they ended up finding uh was",
    "start": "2098800",
    "end": "2104160"
  },
  {
    "text": "like they were you know just crashing pseudo over and over again with different types of arguments and then",
    "start": "2104160",
    "end": "2109839"
  },
  {
    "text": "they would pick up those stack traces or and see like where do we crash are any",
    "start": "2109839",
    "end": "2114880"
  },
  {
    "text": "of these interesting and most of them are garbage of course um but they found this one called nss load",
    "start": "2114880",
    "end": "2121760"
  },
  {
    "text": "library and i think this is a standard c library function i'm not",
    "start": "2121760",
    "end": "2126960"
  },
  {
    "text": "actually sure where it lives but um yeah uh yeah this program this function",
    "start": "2126960",
    "end": "2134160"
  },
  {
    "text": "was crashing and the reason why it was crashing was that this argument to the functions this",
    "start": "2134160",
    "end": "2140079"
  },
  {
    "text": "service user struct which was actually corrupted so when they tried to you know dereference this",
    "start": "2140079",
    "end": "2147200"
  },
  {
    "text": "library pointer uh it would crash because it contains garbage and",
    "start": "2147200",
    "end": "2152800"
  },
  {
    "text": "it will just crash um yeah so what we want to do uh in this",
    "start": "2152800",
    "end": "2158720"
  },
  {
    "text": "case like the reason why this function is so interesting is the last line here",
    "start": "2158720",
    "end": "2165119"
  },
  {
    "text": "it calls dl open on a shared library and if you've been doing exploitation",
    "start": "2165119",
    "end": "2170240"
  },
  {
    "text": "you might know that when you dl open a library that contains constructors and this is not your you know c plus plus",
    "start": "2170240",
    "end": "2177359"
  },
  {
    "text": "constructor that you might be familiar with uh but rather yeah i don't know i'm not sure what",
    "start": "2177359",
    "end": "2183119"
  },
  {
    "text": "they're called but like uh c constructors this is code that runs at",
    "start": "2183119",
    "end": "2188240"
  },
  {
    "text": "load time before main for example and if a deal opens such a library that",
    "start": "2188240",
    "end": "2193920"
  },
  {
    "text": "contains some malicious code in one of these constructors this will run at load time so at this point if we open a",
    "start": "2193920",
    "end": "2200640"
  },
  {
    "text": "library that we control as an attacker we have full control over sudo",
    "start": "2200640",
    "end": "2206000"
  },
  {
    "text": "so what we want is we want to get down here now kind of removed all the stuff that's not important for this function",
    "start": "2206000",
    "end": "2213119"
  },
  {
    "text": "but if we start at the top like the first thing we want to do is we want this if test to succeed",
    "start": "2213119",
    "end": "2220480"
  },
  {
    "text": "so we want this library pointer inside of the user service user struct to be null",
    "start": "2220480",
    "end": "2226560"
  },
  {
    "text": "and in that case it will it's very nice this function and will initialize it for us and then when it gets to the next one",
    "start": "2226560",
    "end": "2233760"
  },
  {
    "text": "um it checks if this lib handle is null and this is the handle to our shared library",
    "start": "2233760",
    "end": "2240240"
  },
  {
    "text": "and it will be after first first initialization and then it gets to this wonderful chain",
    "start": "2240240",
    "end": "2246960"
  },
  {
    "text": "of stp copy calls uh to create the shared library name",
    "start": "2246960",
    "end": "2252800"
  },
  {
    "text": "and then the name of the library will be lib nss underscore and then whatever is inside of this",
    "start": "2252800",
    "end": "2258320"
  },
  {
    "text": "structure dot so and then we have a revision which is dot two so yeah we'll see how it looks like",
    "start": "2258320",
    "end": "2264480"
  },
  {
    "text": "later on and this is how the service user structure looks like it's not really",
    "start": "2264480",
    "end": "2270160"
  },
  {
    "text": "that important but just to note the things we care about is this library",
    "start": "2270160",
    "end": "2275280"
  },
  {
    "text": "pointer at the bottom here this we want this to be null and we probably maybe want the other",
    "start": "2275280",
    "end": "2280720"
  },
  {
    "text": "stuff to be null as well depends on what the code is doing and then at the end we have the name",
    "start": "2280720",
    "end": "2286880"
  },
  {
    "text": "which is where we put our malicious library name so these two are important",
    "start": "2286880",
    "end": "2294000"
  },
  {
    "text": "yeah so this is how an overflow could look like kind of like the example that might showed earlier",
    "start": "2295839",
    "end": "2303359"
  },
  {
    "text": "except that there might be you know a lot of stuff between the user args and the service user which is our",
    "start": "2303359",
    "end": "2310160"
  },
  {
    "text": "target in this case but yeah this is how it could look like we will just fill the user arcs with a",
    "start": "2310160",
    "end": "2316960"
  },
  {
    "text": "bunch of junk a's in this example and when we reach this service user",
    "start": "2316960",
    "end": "2322079"
  },
  {
    "text": "struct we just fill it with zeros using the trick i talked about earlier we just send a bunch of backslashes and pseudo",
    "start": "2322079",
    "end": "2328800"
  },
  {
    "text": "will just copy a bunch of null bytes and then at the end of the structure we",
    "start": "2328800",
    "end": "2333839"
  },
  {
    "text": "want to have in this case we have x slash x and then we null terminate the string",
    "start": "2333839",
    "end": "2341359"
  },
  {
    "text": "so this will craft the library name that's listed here libna says underscore x",
    "start": "2341359",
    "end": "2346880"
  },
  {
    "text": "slash x.s.o.2 so we need to place our malicious",
    "start": "2346880",
    "end": "2352320"
  },
  {
    "text": "library in a folder called libenass underscore x so the whole exploit is to",
    "start": "2352320",
    "end": "2359119"
  },
  {
    "text": "run code from that file right yeah so far yeah so we're just instead of like overwriting our",
    "start": "2359119",
    "end": "2365760"
  },
  {
    "text": "return address or whatever we're just tricking pseudo into opening a library that we control",
    "start": "2365760",
    "end": "2372800"
  },
  {
    "start": "2372000",
    "end": "2421000"
  },
  {
    "text": "yeah so this is how the the library can could look like it's very short very sweet we don't really",
    "start": "2374480",
    "end": "2380640"
  },
  {
    "text": "have to you know have that much code we just mark the function with an attribute constructor this is supported",
    "start": "2380640",
    "end": "2387520"
  },
  {
    "text": "by i think at least gcc and clang and this will put the function into a",
    "start": "2387520",
    "end": "2392560"
  },
  {
    "text": "special section in the resulting elf binary which when you load it like the dynamic loader will look",
    "start": "2392560",
    "end": "2399359"
  },
  {
    "text": "through this section and run every single function that's located there",
    "start": "2399359",
    "end": "2404400"
  },
  {
    "text": "and inside of the function we just do set uid 0 set gi d0 which which sets the",
    "start": "2404400",
    "end": "2410000"
  },
  {
    "text": "group and user id to zero which is root and then we start a shell so hopefully if this works right",
    "start": "2410000",
    "end": "2417599"
  },
  {
    "text": "this will pop a root shell for us",
    "start": "2417599",
    "end": "2421440"
  },
  {
    "start": "2421000",
    "end": "2852000"
  },
  {
    "text": "all right so demo time i'm going to show you how it looks letting you know that we have a lot of time you have a lot of",
    "start": "2422800",
    "end": "2429040"
  },
  {
    "text": "time okay that's perfect yeah then i can just waste a bunch of time",
    "start": "2429040",
    "end": "2435720"
  },
  {
    "text": "[Music] it's a bit weird because i i don't have like a mirrored screen so",
    "start": "2438440",
    "end": "2443839"
  },
  {
    "text": "i'm have to stand like this very awkwardly yeah so this is our",
    "start": "2443839",
    "end": "2449920"
  },
  {
    "text": "uh basically i don't know exploit our vulnerability now sorry our library",
    "start": "2449920",
    "end": "2456400"
  },
  {
    "text": "it's just doing whatever i just showed you and this is by the way if you're looking",
    "start": "2456400",
    "end": "2462160"
  },
  {
    "text": "at your linux system and you see like file names like this like lol dot c or something like that",
    "start": "2462160",
    "end": "2468240"
  },
  {
    "text": "just wipe your server because all like hackers use terrible naming conventions so uh",
    "start": "2468240",
    "end": "2474160"
  },
  {
    "text": "yeah that's a telltale sign okay so uh yeah",
    "start": "2474160",
    "end": "2480800"
  },
  {
    "text": "exploit.c yeah okay i'm gonna zoom in and just as a",
    "start": "2480800",
    "end": "2487119"
  },
  {
    "text": "quick note like this version of the exploit is not written by me it's written by this person so all credit to",
    "start": "2487119",
    "end": "2493440"
  },
  {
    "text": "them and the reason why we didn't choose our own exploit is because i was lazy and",
    "start": "2493440",
    "end": "2501280"
  },
  {
    "text": "we wanted it to work in a docker container because we're you know we're i don't know we're devops",
    "start": "2501280",
    "end": "2507359"
  },
  {
    "text": "and we wanted it to work between presentations and so on so when we wrote this like several months ago we wanted",
    "start": "2507359",
    "end": "2513839"
  },
  {
    "text": "it to work uh you know when we got here and not have some weird issues so this",
    "start": "2513839",
    "end": "2518960"
  },
  {
    "text": "exploit works perfectly for ubuntu 2004 with this specific version of sudo",
    "start": "2518960",
    "end": "2526079"
  },
  {
    "text": "yep so let's just look into yep",
    "start": "2526079",
    "end": "2531280"
  },
  {
    "text": "so this is i guess the interesting part or i know this is at least the final part",
    "start": "2531280",
    "end": "2536560"
  },
  {
    "text": "right we're executing pseudoedit uh with",
    "start": "2536560",
    "end": "2541680"
  },
  {
    "text": "our attacker controlled rv and nfp which is the arguments and i can scroll",
    "start": "2541680",
    "end": "2549880"
  },
  {
    "text": "yeah um yeah so let's see how they look like",
    "start": "2550480",
    "end": "2556720"
  },
  {
    "text": "this is the environment players so what it's doing here is that you can",
    "start": "2556720",
    "end": "2563760"
  },
  {
    "text": "see all of these backslashes right these are the zeros that we're writing so we're now tricking sudo into writing a",
    "start": "2563760",
    "end": "2569839"
  },
  {
    "text": "bunch of zeros on the heap and then at the bottom here we have the library name the malicious library",
    "start": "2569839",
    "end": "2577040"
  },
  {
    "text": "name and then we have these weird thingies here",
    "start": "2577040",
    "end": "2583119"
  },
  {
    "text": "and we also have the overflow here oops copy paste",
    "start": "2583119",
    "end": "2588640"
  },
  {
    "text": "so the overflow here is there because like i said earlier like there might be some distance between",
    "start": "2588640",
    "end": "2594960"
  },
  {
    "text": "where we overflow and this target that we have and this uh basically blob of memory",
    "start": "2594960",
    "end": "2601200"
  },
  {
    "text": "here is just there to kind of bridge this gap so uh when developing this exploit the",
    "start": "2601200",
    "end": "2607119"
  },
  {
    "text": "person knew that okay so the our overflow heap chunk is here in memory and our target is over here so we",
    "start": "2607119",
    "end": "2614480"
  },
  {
    "text": "kind of have to fill this space in between with some garbage doesn't matter what it is",
    "start": "2614480",
    "end": "2619680"
  },
  {
    "text": "and you can also see that there's a backslash at the end of that buffer",
    "start": "2619680",
    "end": "2625119"
  },
  {
    "text": "uh which makes sure the exploit you know keeps copying or makes sure that pseudo keeps copying",
    "start": "2625119",
    "end": "2631040"
  },
  {
    "text": "characters out of bounds and then we have these weird lc messages",
    "start": "2631040",
    "end": "2638720"
  },
  {
    "text": "um so this these are here because we want to influence how the heap looks like",
    "start": "2638720",
    "end": "2645119"
  },
  {
    "text": "so this is something we call heap feng shui where we kind of try to you know craft the heap so it looks a very",
    "start": "2645119",
    "end": "2651920"
  },
  {
    "text": "certain way and these lc environment variables they are picked up",
    "start": "2651920",
    "end": "2656960"
  },
  {
    "text": "by very early on in glib c they're picked up and they're actually placed on the",
    "start": "2656960",
    "end": "2662800"
  },
  {
    "text": "heap so by just you know sending a bunch of these weird uh environment variables we actually",
    "start": "2662800",
    "end": "2668880"
  },
  {
    "text": "control the heap and then we have the arguments the",
    "start": "2668880",
    "end": "2675520"
  },
  {
    "text": "pseudo-edit s and the reason why this s flag is here",
    "start": "2675520",
    "end": "2680640"
  },
  {
    "text": "is because that's a prerequisite of getting to the vulnerable code so you can read a report if you want to",
    "start": "2680640",
    "end": "2686240"
  },
  {
    "text": "know like exactly how they were able to figure that out and then we have this buffer",
    "start": "2686240",
    "end": "2693680"
  },
  {
    "text": "here it contains a bunch of garbage and then a backslash at the end so this will kind",
    "start": "2695119",
    "end": "2700240"
  },
  {
    "text": "of uh when sudo is allocating the vulnerable buffer it will account for all of these characters",
    "start": "2700240",
    "end": "2706240"
  },
  {
    "text": "but not for all the other stuff that we have lying around just waiting on the stack",
    "start": "2706240",
    "end": "2712400"
  },
  {
    "text": "so let's look at okay",
    "start": "2713440",
    "end": "2719520"
  },
  {
    "text": "so i have a docker container running here um",
    "start": "2719520",
    "end": "2724880"
  },
  {
    "text": "okay so this is my user id and gid it's just an unprivileged user",
    "start": "2724880",
    "end": "2732160"
  },
  {
    "text": "and this is the pseudo version it's quite old now like this has been patched but yeah",
    "start": "2732160",
    "end": "2739119"
  },
  {
    "text": "and then we have this exploit binary i hope",
    "start": "2740400",
    "end": "2746800"
  },
  {
    "text": "oh okay sorry oh that's a long path",
    "start": "2746800",
    "end": "2752720"
  },
  {
    "text": "okay yep so we have this exploit binary this is just a compiled version that we saw before",
    "start": "2752720",
    "end": "2759280"
  },
  {
    "text": "for some reason it's owned by root but it's not a set uid binary so this cannot give us root privileges by running it",
    "start": "2759280",
    "end": "2766800"
  },
  {
    "text": "like usually it wouldn't so then when we run it",
    "start": "2766800",
    "end": "2771839"
  },
  {
    "text": "nothing special happens but we're suddenly rude so it doesn't look that interesting but like behind the scenes",
    "start": "2771839",
    "end": "2778640"
  },
  {
    "text": "there's all this black magic  going on and suddenly you have a",
    "start": "2778640",
    "end": "2784480"
  },
  {
    "text": "root shelf [Applause]",
    "start": "2784480",
    "end": "2793010"
  },
  {
    "text": "so finally how much time do you have oh we have um yeah 14 minutes so",
    "start": "2795440",
    "end": "2801520"
  },
  {
    "text": "uh i hope you have a lot of questions [Laughter]",
    "start": "2801520",
    "end": "2807119"
  },
  {
    "text": "yep all right so um we're gonna talk briefly about some like protection and prevention stuff uh but unfortunately",
    "start": "2807119",
    "end": "2814480"
  },
  {
    "text": "like we saw earlier this is not really a solved problem so uh",
    "start": "2814480",
    "end": "2820000"
  },
  {
    "text": "yeah you can make it harder for attackers to kind of attack your if you're writing a system that's you know",
    "start": "2820000",
    "end": "2826400"
  },
  {
    "text": "uh valuable to attackers might be a good idea to you know invest some time in this um",
    "start": "2826400",
    "end": "2832319"
  },
  {
    "text": "if you if you're able and if you are interested uh but it is difficult and",
    "start": "2832319",
    "end": "2838640"
  },
  {
    "text": "like what what most i guess people are trying to do is make it hard or make it",
    "start": "2838640",
    "end": "2844960"
  },
  {
    "text": "expensive for attackers to attack their systems and not impossible because that's",
    "start": "2844960",
    "end": "2850319"
  },
  {
    "text": "impossible so yeah you might be wondering why",
    "start": "2850319",
    "end": "2856079"
  },
  {
    "start": "2852000",
    "end": "3343000"
  },
  {
    "text": "there's this lovely picture of me here and it's because i had this analogy that i wanted to",
    "start": "2856079",
    "end": "2862480"
  },
  {
    "text": "force into the slime and this is me after a tiny skateboarding accident",
    "start": "2862480",
    "end": "2869280"
  },
  {
    "text": "so this is outside of the er in oslo maybe some of you have been there um",
    "start": "2869280",
    "end": "2874559"
  },
  {
    "text": "and the thing was i was riding my skateboard down a hill and i fell uh so i had to get like stitches and",
    "start": "2874559",
    "end": "2880559"
  },
  {
    "text": "stuff like that but the thing was i was wearing a helmet you know so i didn't hit my head and die",
    "start": "2880559",
    "end": "2886000"
  },
  {
    "text": "or something but you can see i have a bunch of like banded bandages everywhere and that's",
    "start": "2886000",
    "end": "2891599"
  },
  {
    "text": "because i wasn't wearing any other protective gear just my helmet which you can see there on the on the side",
    "start": "2891599",
    "end": "2898480"
  },
  {
    "text": "and the funny thing is that he did bring his protective gear he had it on his",
    "start": "2898480",
    "end": "2904880"
  },
  {
    "text": "in his backpack on his back but he just didn't use them which is",
    "start": "2904880",
    "end": "2909920"
  },
  {
    "text": "perfect for an analogy right yeah because kind of have all of these uh",
    "start": "2909920",
    "end": "2916000"
  },
  {
    "text": "mitigations uh especially we have a lot of them built into compilers these days which is really nice",
    "start": "2916000",
    "end": "2922319"
  },
  {
    "text": "uh but you still some of them you have to opt in you have to choose to use these",
    "start": "2922319",
    "end": "2929359"
  },
  {
    "text": "mitigations and defenses and some of them like we saw earlier you have to you know force them off because",
    "start": "2929359",
    "end": "2935920"
  },
  {
    "text": "they're on by default so there's a lot of stuff that you can just enable and you get some extra",
    "start": "2935920",
    "end": "2941599"
  },
  {
    "text": "security just by you know changing a few flags or whatever um",
    "start": "2941599",
    "end": "2947040"
  },
  {
    "text": "yeah and also one thing you can do which is probably not the most easy you know uh",
    "start": "2947040",
    "end": "2954480"
  },
  {
    "text": "favorable uh option uh it's just changing you know rewriting",
    "start": "2954480",
    "end": "2960319"
  },
  {
    "text": "everything in a memory safe language if you have the opportunity or if your",
    "start": "2960319",
    "end": "2966160"
  },
  {
    "text": "you know platform or system allows it uh there's also the or one thing that many people are doing",
    "start": "2966160",
    "end": "2972800"
  },
  {
    "text": "these days for example i think the android team is doing it and firefox as well is rewriting parts of",
    "start": "2972800",
    "end": "2979040"
  },
  {
    "text": "their code in rust where security really matters so if your code you know",
    "start": "2979040",
    "end": "2984559"
  },
  {
    "text": "parses untrusted the crap from you know uh malicious sources you might want that",
    "start": "2984559",
    "end": "2990559"
  },
  {
    "text": "code to be more hardened uh against attacks so one thing that was really cool was",
    "start": "2990559",
    "end": "2995920"
  },
  {
    "text": "that recently basic wrist support in the linux kernel was emerged upstream i guess it's a",
    "start": "2995920",
    "end": "3002960"
  },
  {
    "text": "while ago now but this make means that you can now write kernel modules in rust",
    "start": "3002960",
    "end": "3010640"
  },
  {
    "text": "which makes them more safe yeah uh in addition to like using what",
    "start": "3010640",
    "end": "3016880"
  },
  {
    "text": "the compiler has to offer you could also you know implement your own security like for example sandboxing which is",
    "start": "3016880",
    "end": "3023920"
  },
  {
    "text": "done by i guess all browsers today are using sandboxes to",
    "start": "3023920",
    "end": "3030079"
  },
  {
    "text": "parse and run for example javascript so in the the event that for example in",
    "start": "3030079",
    "end": "3035520"
  },
  {
    "text": "chrome if you reserve the malicious page basically you know exploiting a",
    "start": "3035520",
    "end": "3041280"
  },
  {
    "text": "vulnerability in chrome the attacker would end up in this restricted environment this sandbox and this means",
    "start": "3041280",
    "end": "3047440"
  },
  {
    "text": "that now the attacker requires another vulnerability to escape out of the sandbox and this raises the bar and",
    "start": "3047440",
    "end": "3054000"
  },
  {
    "text": "makes it more expensive for attackers to attack your system",
    "start": "3054000",
    "end": "3059760"
  },
  {
    "text": "one thing you can also do which you kind of get for free is to change your heap allocator like mentioned",
    "start": "3059760",
    "end": "3066640"
  },
  {
    "text": "previously there are many many that exist and some of them are designed for",
    "start": "3066640",
    "end": "3073359"
  },
  {
    "text": "for security or with security in mind so if your system you know can take the",
    "start": "3073359",
    "end": "3080400"
  },
  {
    "text": "performance it might be worth it to check out some other memory allocators",
    "start": "3080400",
    "end": "3086640"
  },
  {
    "text": "yeah and you know avoiding unsafe functions like string copy and friends might be a good idea they're very hard",
    "start": "3086640",
    "end": "3093040"
  },
  {
    "text": "to use correctly so um uh yeah i would try and use you know",
    "start": "3093040",
    "end": "3099280"
  },
  {
    "text": "um safer alternatives like the way i found my first uh stackoverflow bug in like a",
    "start": "3099280",
    "end": "3105119"
  },
  {
    "text": "real project was i i did git clone grab string copy and there was the book so",
    "start": "3105119",
    "end": "3110319"
  },
  {
    "text": "it's like uh yeah if you have long low hanging fruits like this lying",
    "start": "3110319",
    "end": "3115680"
  },
  {
    "text": "around like the chances are high that attackers will find them quickly and also just to comment what i usually tell",
    "start": "3115680",
    "end": "3122160"
  },
  {
    "text": "my colleagues and developers is that you can usually just",
    "start": "3122160",
    "end": "3127760"
  },
  {
    "text": "search in the documentation for security or unsafe or something like that to find the unsafe functions",
    "start": "3127760",
    "end": "3134800"
  },
  {
    "text": "yeah so one thing that i really like to use when i develop the cnc plus plus",
    "start": "3134800",
    "end": "3141520"
  },
  {
    "text": "stuff is using an address sanitizer or another type of sanitizer so we have one",
    "start": "3141520",
    "end": "3147119"
  },
  {
    "text": "called asam uh i think it's supported in gcc as well i'm not sure i always use",
    "start": "3147119",
    "end": "3152720"
  },
  {
    "text": "clang did someone say anything oh okay sorry i thought you had a comment um",
    "start": "3152720",
    "end": "3158559"
  },
  {
    "text": "yeah so um the address sanitizer works by instrumenting your code at the compile",
    "start": "3158559",
    "end": "3164079"
  },
  {
    "text": "time and there's like a library bundled with it that basically instruments all loads and",
    "start": "3164079",
    "end": "3171839"
  },
  {
    "text": "stores and so on so when you're allocating memory for example it will keep track of it so if you free it twice",
    "start": "3171839",
    "end": "3178000"
  },
  {
    "text": "like a double free it will detect it if you do a heap overflow it will be detected",
    "start": "3178000",
    "end": "3183040"
  },
  {
    "text": "so uh the address sanitizer is really nice during development uh just to catch these bugs quickly",
    "start": "3183040",
    "end": "3190319"
  },
  {
    "text": "it's more cheap right to catch them early on in the development process than trying to fix something yeah",
    "start": "3190319",
    "end": "3195920"
  },
  {
    "text": "question",
    "start": "3195920",
    "end": "3198240"
  },
  {
    "text": "yeah i think that's the most common that's the question the question the question was if we use",
    "start": "3202559",
    "end": "3207680"
  },
  {
    "text": "it the runtime or only a testing right yeah so this is uh i think the way most",
    "start": "3207680",
    "end": "3214000"
  },
  {
    "text": "people are using it is uh just when they're testing because it incurs like quite a large",
    "start": "3214000",
    "end": "3220880"
  },
  {
    "text": "overhead i'm not sure how how much it is but it's it's pretty significant um",
    "start": "3220880",
    "end": "3226160"
  },
  {
    "text": "but it's very simple to enable it's just dash f sanitize equals address with",
    "start": "3226160",
    "end": "3231440"
  },
  {
    "text": "clang and then you have address and parser enabled so we didn't discuss this uh and we wanted to have time to add it",
    "start": "3231440",
    "end": "3238319"
  },
  {
    "text": "in our presentation but we didn't uh since i'm focused on secure development we wanted",
    "start": "3238319",
    "end": "3244079"
  },
  {
    "text": "to find some nice tools to add your like ci cd pipelines or",
    "start": "3244079",
    "end": "3251760"
  },
  {
    "text": "just in your ides or something like that but for now we we don't have any answer for them",
    "start": "3251760",
    "end": "3258960"
  },
  {
    "text": "also one thing that i really like using is fuzzing so if you're not familiar",
    "start": "3259119",
    "end": "3264319"
  },
  {
    "text": "it's basically yeah throwing stuff at your program and trying to catch different corner cases",
    "start": "3264319",
    "end": "3270960"
  },
  {
    "text": "so especially if you have code that's parsing data for example if you for some reason decided to you know implement",
    "start": "3270960",
    "end": "3277680"
  },
  {
    "text": "your own http parser in the kernel or something you should probably fuss it to see that it can you know handle all of",
    "start": "3277680",
    "end": "3284319"
  },
  {
    "text": "these weird edge cases and so on and fussing can help you do this especially if you combine it with an address",
    "start": "3284319",
    "end": "3290079"
  },
  {
    "text": "sanitizer you know the fusser will throw random stuff at your program and then it",
    "start": "3290079",
    "end": "3295359"
  },
  {
    "text": "will crash if it you know just reads a tiny bite outside of the buffer it will instantly crash and tell you",
    "start": "3295359",
    "end": "3302720"
  },
  {
    "text": "this is uh where it crashed yeah uh yeah so liberafusser is",
    "start": "3302720",
    "end": "3309599"
  },
  {
    "text": "is a project by llvm that you can use uh it's relatively simple to get started with",
    "start": "3309599",
    "end": "3316480"
  },
  {
    "text": "and it's built into the compiler so it's easy to build faster with it also you have if you're doing linux",
    "start": "3316480",
    "end": "3322640"
  },
  {
    "text": "kernel development and for some reason adding your own syscalls uh or subsystems you can use uh scissors",
    "start": "3322640",
    "end": "3328480"
  },
  {
    "text": "caller which is a project by google that makes it possible to fuss system calls",
    "start": "3328480",
    "end": "3334000"
  },
  {
    "text": "basically and i think it's found like hundreds of bugs or something and it's continuously running uh",
    "start": "3334000",
    "end": "3340000"
  },
  {
    "text": "yeah i guess to the next ground yep thanks for watching",
    "start": "3340000",
    "end": "3346960"
  },
  {
    "start": "3343000",
    "end": "3483000"
  },
  {
    "text": "any questions [Applause]",
    "start": "3346960",
    "end": "3354079"
  },
  {
    "text": "yeah question is worth mentioning why do you want to create pseudo into doing",
    "start": "3354079",
    "end": "3360480"
  },
  {
    "text": "just having um yeah so the question was why we",
    "start": "3360480",
    "end": "3366160"
  },
  {
    "text": "wanted to trick sudo into um using",
    "start": "3366160",
    "end": "3371839"
  },
  {
    "text": "saturating the",
    "start": "3373799",
    "end": "3376960"
  },
  {
    "text": "yeah yeah yeah so one thing that's really cool about sudo like the question was uh with set uid uh like why we want",
    "start": "3381200",
    "end": "3387680"
  },
  {
    "text": "to trick sudo especially is that the whole concept of pseudoright",
    "start": "3387680",
    "end": "3393119"
  },
  {
    "text": "is do something as root basically so if we are able to compromise this",
    "start": "3393119",
    "end": "3398559"
  },
  {
    "text": "process we instantly have root privileges while if you target some",
    "start": "3398559",
    "end": "3405280"
  },
  {
    "text": "other i don't know binary on the system that might be owned by root but doesn't have set uid which",
    "start": "3405280",
    "end": "3411040"
  },
  {
    "text": "means that it can kind of elevate privileges to root even though you're running the binary as you know an",
    "start": "3411040",
    "end": "3417839"
  },
  {
    "text": "unprivileged user um i forgot where i was going with this",
    "start": "3417839",
    "end": "3425040"
  },
  {
    "text": "yeah but i hope that answers your questions",
    "start": "3425040",
    "end": "3430760"
  },
  {
    "text": "yeah basically yeah so if you compromise a program that's uh you know uh kind of owned by roots but it does not",
    "start": "3432640",
    "end": "3439280"
  },
  {
    "text": "set you id there's no way for the program to give you higher privileges so even though it's like",
    "start": "3439280",
    "end": "3445200"
  },
  {
    "text": "lying around somewhere privileged it doesn't mean that it has privileges",
    "start": "3445200",
    "end": "3450880"
  },
  {
    "text": "i was just going to drive okay",
    "start": "3452319",
    "end": "3457960"
  },
  {
    "text": "yeah any other questions",
    "start": "3463520",
    "end": "3468480"
  },
  {
    "text": "nope all right yes we're done yep thank you thanks",
    "start": "3469520",
    "end": "3475839"
  },
  {
    "text": "[Applause]",
    "start": "3476460",
    "end": "3479949"
  }
]