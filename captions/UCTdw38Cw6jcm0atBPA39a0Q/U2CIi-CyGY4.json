[
  {
    "text": "okay sorry welcome everyone um my name is Helena uh I work for a company called",
    "start": "11799",
    "end": "18640"
  },
  {
    "text": "Talis uh where I do software architecture and development uh and I'm going to talk to",
    "start": "18640",
    "end": "24760"
  },
  {
    "text": "you today about some things we have learned while trying to make secure software with C++",
    "start": "24760",
    "end": "31960"
  },
  {
    "text": "um so who is TS no way we're part of the tals group which is a big French company we do uh more or less anything related",
    "start": "32200",
    "end": "39879"
  },
  {
    "text": "to security or safety so that includes Aerospace defense",
    "start": "39879",
    "end": "46600"
  },
  {
    "text": "Communications uh you name it um tles Norway is a bit more focused we're about",
    "start": "46600",
    "end": "52680"
  },
  {
    "text": "200 employees in Oslo and tonim and we specialize in Secure Communications um",
    "start": "52680",
    "end": "60719"
  },
  {
    "text": "and we do some serious work um our user",
    "start": "60719",
    "end": "66280"
  },
  {
    "text": "data sorry our system assets uh for some products is user data",
    "start": "66280",
    "end": "72080"
  },
  {
    "text": "which may be classified and encryption keys and the would be attackers for what we make is actually nation states which",
    "start": "72080",
    "end": "80320"
  },
  {
    "text": "soes you right up um and in C++ well H it",
    "start": "80320",
    "end": "87840"
  },
  {
    "text": "sounds barely doable uh what what saves us is that we do not",
    "start": "87840",
    "end": "93680"
  },
  {
    "text": "actually fully trust the software we can't do that uh but still we want to prevent the",
    "start": "93680",
    "end": "99880"
  },
  {
    "text": "attacker from getting a a foothold a foot in the door uh prevent the attacker from from",
    "start": "99880",
    "end": "106640"
  },
  {
    "text": "getting in and moving further into the system um and the threat model is also a",
    "start": "106640",
    "end": "113479"
  },
  {
    "text": "bit difficult the products will need to communicate externally which means that we will have",
    "start": "113479",
    "end": "119039"
  },
  {
    "text": "software that has attack surfaces um and what we really need is",
    "start": "119039",
    "end": "125159"
  },
  {
    "text": "zero exploitable defects uh which is in principle",
    "start": "125159",
    "end": "131200"
  },
  {
    "text": "impossible um the bug count of software I I did some searching for that and it",
    "start": "131200",
    "end": "136560"
  },
  {
    "text": "varies but it's fairly High uh we need to reduce that uh and",
    "start": "136560",
    "end": "144239"
  },
  {
    "text": "even more important we need the remaining bugs not to be exploitable",
    "start": "144239",
    "end": "151360"
  },
  {
    "text": "so how do we achieve that well what do other businesses do an aircraft for example is an incredibly complex machine",
    "start": "151360",
    "end": "158120"
  },
  {
    "text": "it has millions of ways to fail so so how can we even dare to fly these things",
    "start": "158120",
    "end": "165080"
  },
  {
    "text": "well they build in redundancy uh they realize that bugs will",
    "start": "165080",
    "end": "170800"
  },
  {
    "text": "happen but you need to design it to engineer it in such a way that no single",
    "start": "170800",
    "end": "175920"
  },
  {
    "text": "failure will ever cause a disaster so so you bu you build it with",
    "start": "175920",
    "end": "182200"
  },
  {
    "text": "two engines you have two pilots and so on uh and we should strive to do the",
    "start": "182200",
    "end": "187480"
  },
  {
    "text": "same for software no single program mistake should create an",
    "start": "187480",
    "end": "192799"
  },
  {
    "text": "exploit so how can we do that can we device some redundancy for software that will help us get",
    "start": "192799",
    "end": "199080"
  },
  {
    "text": "there U and I structured this by following uh the path that a bug takes",
    "start": "199080",
    "end": "205680"
  },
  {
    "text": "from making it authoring the bug through the review process and release and deployment and so on so if we can put in",
    "start": "205680",
    "end": "213680"
  },
  {
    "text": "some mitigations along this path several mitigations to try and stop the bug from",
    "start": "213680",
    "end": "219879"
  },
  {
    "text": "becoming exploitable then maybe we can device something similar um the authoring phas is is",
    "start": "219879",
    "end": "226959"
  },
  {
    "text": "possibly the biggest one uh there are a lot of things we can look at and I will skim over some of these and for some I",
    "start": "226959",
    "end": "233040"
  },
  {
    "text": "will go in a bit more detail um and it starts out a little bit",
    "start": "233040",
    "end": "239680"
  },
  {
    "text": "boring but we have to go through this as well compiler warnings basic stuff",
    "start": "239680",
    "end": "244840"
  },
  {
    "text": "enable everything you can uh this will find some security",
    "start": "244840",
    "end": "250560"
  },
  {
    "text": "related bugs uh initializations that you have missed things like that basic stuff",
    "start": "250560",
    "end": "256000"
  },
  {
    "text": "but you need to do the basics as well and of course the warnings must",
    "start": "256000",
    "end": "261720"
  },
  {
    "text": "break the build I assume that you all run with W error and if you don't just",
    "start": "261720",
    "end": "267360"
  },
  {
    "text": "sneak back home and fix it um static analysis as",
    "start": "267360",
    "end": "273520"
  },
  {
    "text": "well uh Clank tidy is free you should use it uh there are commercial tools",
    "start": "273520",
    "end": "279840"
  },
  {
    "text": "that you can buy that will find possibly more stuff uh we do find that this has some",
    "start": "279840",
    "end": "286400"
  },
  {
    "text": "benefits but in reality uh most of the security issues that we find we find in",
    "start": "286400",
    "end": "293120"
  },
  {
    "text": "other ways um memory bugs also a bit boring to begin with um",
    "start": "293120",
    "end": "301680"
  },
  {
    "text": "you should of course avoid the old C apis for memory and strings um there are",
    "start": "301680",
    "end": "306919"
  },
  {
    "text": "other talks about this I won't go into details um you should use modern C++ you",
    "start": "306919",
    "end": "312120"
  },
  {
    "text": "want to use modern C++ so you know avoiding the old C stuff is not that difficult um and you need to do tests",
    "start": "312120",
    "end": "321039"
  },
  {
    "text": "and use good tooling to detect these problems uh there are good tools the",
    "start": "321039",
    "end": "326680"
  },
  {
    "text": "sanitizers are great uh also free use them uh you need to run this on unit",
    "start": "326680",
    "end": "332720"
  },
  {
    "text": "tests but you also need to test the whole system integrated which is a bit more",
    "start": "332720",
    "end": "337880"
  },
  {
    "text": "difficult and you need to automate this put it in your continuous integration Pipeline and do this all the time and",
    "start": "337880",
    "end": "346000"
  },
  {
    "text": "this will catch a lot of stuff this is really good so go use those how many use the",
    "start": "346000",
    "end": "351840"
  },
  {
    "text": "sanitizers okay not bad could be more but please try them they are",
    "start": "351840",
    "end": "358000"
  },
  {
    "text": "great um and for modern C++ small pointers of course uh there are different schools of",
    "start": "358000",
    "end": "364520"
  },
  {
    "text": "thought here uh some people love share pointer and use that for everything and some people frown upon that uh it has",
    "start": "364520",
    "end": "371560"
  },
  {
    "text": "extra overhead uh and the frowning comes from",
    "start": "371560",
    "end": "376840"
  },
  {
    "text": "the second Point here the ownership and lifetimes can get difficult to reason about if you have an object and you have",
    "start": "376840",
    "end": "382240"
  },
  {
    "text": "10 shared pointers to that how long does it live who actually owns it code doesn't show it but it does prevent use",
    "start": "382240",
    "end": "389199"
  },
  {
    "text": "of free which is good especially for security uh the other alternative is",
    "start": "389199",
    "end": "395960"
  },
  {
    "text": "unique pointer um the owner holds it fine the semantics are great you can see",
    "start": "395960",
    "end": "401440"
  },
  {
    "text": "who owns it and who doesn't um problem with that is that if you want to have",
    "start": "401440",
    "end": "407520"
  },
  {
    "text": "class B having a dependency on C over there you can't use unique pointer so you have to use some other way and we",
    "start": "407520",
    "end": "414800"
  },
  {
    "text": "tend to resort to normal pointers of references which makes it possible for use after free bugs to creep in so it's",
    "start": "414800",
    "end": "422160"
  },
  {
    "text": "not ideal I sometimes wish there was a third way where you could solve this as",
    "start": "422160",
    "end": "427599"
  },
  {
    "text": "well in a secure way uh but it doesn't exist you could try to mimic this with sharp pointer and weak pointer but that",
    "start": "427599",
    "end": "434599"
  },
  {
    "text": "kind of mixes this up mixes this up semantically uh with this normal user",
    "start": "434599",
    "end": "439639"
  },
  {
    "text": "share pointers which are which will confuse things so I'm not sure if we have a great solution for that at the",
    "start": "439639",
    "end": "446319"
  },
  {
    "text": "moment you could make your own classes for this it's not a bad idea um there's a good talk by Sean",
    "start": "446319",
    "end": "454120"
  },
  {
    "text": "parent at C++ now this spring which talks about memory safety among other",
    "start": "454120",
    "end": "459360"
  },
  {
    "text": "things and uh it's really worth a look it's good um his conclusion is that",
    "start": "459360",
    "end": "464520"
  },
  {
    "text": "value semantics is the only safe alternative um and U incidentally this",
    "start": "464520",
    "end": "472680"
  },
  {
    "text": "is also the direction that the rust borrow Checker will push you in if you try that way um it",
    "start": "472680",
    "end": "480919"
  },
  {
    "text": "also sort of rhymes with what Robert Secord said this morning um C plus will",
    "start": "480919",
    "end": "487759"
  },
  {
    "text": "never be Memory safe unfortunately so you just have to do the best you",
    "start": "487759",
    "end": "493638"
  },
  {
    "text": "can taking a step back um we do protocols a lot where do the",
    "start": "498759",
    "end": "505319"
  },
  {
    "text": "vulnerabilities and protocols come from well probably you're reading or writing",
    "start": "505319",
    "end": "510479"
  },
  {
    "text": "outside your buffer so maybe your arguments to the subscript operator is out of range um or",
    "start": "510479",
    "end": "518518"
  },
  {
    "text": "similarly for pointer arithmetic I do not recommend pointer arithmetic by the way please don't uh why does this happen",
    "start": "518519",
    "end": "526160"
  },
  {
    "text": "well maybe you have an attacker that sends you an input that causes integer overflow and then you use the bad",
    "start": "526160",
    "end": "532040"
  },
  {
    "text": "results as an index so overflow is a really important",
    "start": "532040",
    "end": "538200"
  },
  {
    "text": "issue and in my opinion C++ and C integers are",
    "start": "538200",
    "end": "544600"
  },
  {
    "text": "fundamentally broken uh Expressions promote to int or",
    "start": "544600",
    "end": "549680"
  },
  {
    "text": "unsigned even though you don't ask for it um and when you use the result it",
    "start": "549680",
    "end": "554800"
  },
  {
    "text": "gets converted back to smaller types silently and it gets truncated if it",
    "start": "554800",
    "end": "560440"
  },
  {
    "text": "needs to changes the value and also overflow is silent and",
    "start": "560440",
    "end": "567760"
  },
  {
    "text": "nothing about this is secure it was a reasonable design choice at the",
    "start": "567760",
    "end": "573240"
  },
  {
    "text": "time in the 70s but that's a long time ago there were no attackers there were no hackers at that time it doesn't fit",
    "start": "573240",
    "end": "579720"
  },
  {
    "text": "well nowadays so what do we do well we can",
    "start": "579720",
    "end": "586519"
  },
  {
    "text": "try and fix some of the conversion problems um yeah let's see if the code examples",
    "start": "586519",
    "end": "593480"
  },
  {
    "text": "work this is just a primitive simple program",
    "start": "593480",
    "end": "600160"
  },
  {
    "text": "uh here we go oh that was a bit",
    "start": "600160",
    "end": "604879"
  },
  {
    "text": "small anyway can you read that good uh it creates an 8bit integer",
    "start": "605279",
    "end": "612600"
  },
  {
    "text": "and then it inverts the bits simple",
    "start": "612600",
    "end": "617880"
  },
  {
    "text": "enough uh let's see now if we run that",
    "start": "617880",
    "end": "622920"
  },
  {
    "text": "you would think that this would output 33 he but it doesn't it inverts also",
    "start": "622920",
    "end": "629560"
  },
  {
    "text": "the extra bits that you get because it's promoted to in so a bit",
    "start": "629560",
    "end": "635360"
  },
  {
    "text": "confusing uh and then it get when you come up back to small types truncates uh there are some good",
    "start": "636760",
    "end": "643079"
  },
  {
    "text": "warnings you can enable for that um which means that every time this happens",
    "start": "643079",
    "end": "648360"
  },
  {
    "text": "you get a warning and because the warnings break you build then you need to do something you need an explicit",
    "start": "648360",
    "end": "654240"
  },
  {
    "text": "cost uh for explicit costs we use static cost but that just suppresses the problem again",
    "start": "654240",
    "end": "659600"
  },
  {
    "text": "so what you actually need to do is to implement your own cost which will trap",
    "start": "659600",
    "end": "665240"
  },
  {
    "text": "any conversions that course um bits to be thrown",
    "start": "665240",
    "end": "670360"
  },
  {
    "text": "away uh that makes it a lot safer there is nothing like that in the standard library but it's easy to",
    "start": "670360",
    "end": "677959"
  },
  {
    "text": "build and also even worse this is a bit subtle you don't see this every day but make shed",
    "start": "677959",
    "end": "686040"
  },
  {
    "text": "is broken in this way because your Constructor will be called inside",
    "start": "686040",
    "end": "691639"
  },
  {
    "text": "the implementation of these functions and all warnings are disabled in the standard libraries no warnings at all",
    "start": "691639",
    "end": "699279"
  },
  {
    "text": "they can do anything they want it just compiles um which is a bit",
    "start": "699279",
    "end": "706040"
  },
  {
    "text": "concerning let me show you",
    "start": "706040",
    "end": "709639"
  },
  {
    "text": "that so simple oh sorry wrong window again I'm not sure how to fix that uh",
    "start": "711639",
    "end": "719760"
  },
  {
    "text": "anyway um simple class takes an 8bit INT in the Constructor and then puts that in",
    "start": "719760",
    "end": "726680"
  },
  {
    "text": "a variable and I initialize that using unique pointer I have the warnings",
    "start": "726680",
    "end": "731720"
  },
  {
    "text": "enabled and the compiler gives me a nice uh error",
    "start": "731720",
    "end": "738079"
  },
  {
    "text": "output but if I use the second line",
    "start": "738079",
    "end": "746079"
  },
  {
    "text": "instead and use make unique then h no Compass just fine and the output is",
    "start": "746480",
    "end": "754440"
  },
  {
    "text": "wrong no warnings which doesn't go well with",
    "start": "754440",
    "end": "760600"
  },
  {
    "text": "security so you actually need to write your own replacement functions if you want to fix",
    "start": "760600",
    "end": "766839"
  },
  {
    "text": "this um it's the only way it's simple but it's a bit",
    "start": "766839",
    "end": "772199"
  },
  {
    "text": "annoying um same goes for in place back it's also broken you can't fix that",
    "start": "772199",
    "end": "777639"
  },
  {
    "text": "because that's a member function but you don't really need them Place back very often it's the optimizer will",
    "start": "777639",
    "end": "783399"
  },
  {
    "text": "make push back just as efficient in many cases um and then there's a bigger",
    "start": "783399",
    "end": "789079"
  },
  {
    "text": "problem the Overflow unsigned integer overflow is allowed just silently wraps which is not",
    "start": "789079",
    "end": "796040"
  },
  {
    "text": "very secure signed integer overflow is UN is undefined Behavior which is worse",
    "start": "796040",
    "end": "801920"
  },
  {
    "text": "if you have a program that needs to be secure then you cannot have any undefined Behavior",
    "start": "801920",
    "end": "807519"
  },
  {
    "text": "anywhere so do pull requests help this nah not",
    "start": "807760",
    "end": "814839"
  },
  {
    "text": "much the errors are subtle they're hard to spot we've had several bugs that we",
    "start": "814839",
    "end": "820440"
  },
  {
    "text": "have found through other means that pass review that was a critical security",
    "start": "820440",
    "end": "825560"
  },
  {
    "text": "critical uh problem is that the abstractions get in the way the way you reason about",
    "start": "825560",
    "end": "831440"
  },
  {
    "text": "Expressions uh well when you do that mentally you think in perfect numbers it's very hard to to think in terms of",
    "start": "831440",
    "end": "837920"
  },
  {
    "text": "what the uh compiler will do you're not trying to do that and also overflow issues are",
    "start": "837920",
    "end": "844720"
  },
  {
    "text": "incredibly complex um Robert Seal's book which you should read it's very good he",
    "start": "844720",
    "end": "850279"
  },
  {
    "text": "spends 84 pages on inter security um reasoning about this if it's a simple",
    "start": "850279",
    "end": "856240"
  },
  {
    "text": "addition is doable but once you get into more complex uh expressions with multiplications and such it's incredibly",
    "start": "856240",
    "end": "865680"
  },
  {
    "text": "complex um hypothetical example this is just a function that tries to receive a",
    "start": "865680",
    "end": "872079"
  },
  {
    "text": "packet of data and decode the payload so there's a header and a payload so the header has a length field",
    "start": "872079",
    "end": "880959"
  },
  {
    "text": "um and the code tries to see if the packet is big enough is their payload",
    "start": "880959",
    "end": "886079"
  },
  {
    "text": "after the header so it just takes the length field subtracts the header size and checks if that is bigger than the",
    "start": "886079",
    "end": "891199"
  },
  {
    "text": "required size for the payload and if it is then it returns a deserialized deserialized payload uh problem with",
    "start": "891199",
    "end": "898079"
  },
  {
    "text": "this is that the length field is probably unsigned and if the attacker sends you a header with a length that is",
    "start": "898079",
    "end": "905519"
  },
  {
    "text": "smaller than the header size then this underflows and it becomes very large so",
    "start": "905519",
    "end": "911240"
  },
  {
    "text": "it's always true and you try to deserialize data that isn't there and you get a buffer uh well you read outside your",
    "start": "911240",
    "end": "918399"
  },
  {
    "text": "buffer and you have a security vulnerability um but the equation looks just fine the way you're trained to",
    "start": "918399",
    "end": "924880"
  },
  {
    "text": "think about this because you think in perfect numbers you could fix this by just moving the",
    "start": "924880",
    "end": "931319"
  },
  {
    "text": "header size to the other side of the equation and you don't have a subtraction anymore but these things are hard to",
    "start": "931319",
    "end": "937839"
  },
  {
    "text": "spot so in a way the language is the problem and the inability to detect",
    "start": "937839",
    "end": "944720"
  },
  {
    "text": "overflow is is terrible for security and also the implicit conversion and truncation and this is",
    "start": "944720",
    "end": "952199"
  },
  {
    "text": "from a time before hackers I'm not accusing anyone of doing a bad job here it's just that the time has passed and",
    "start": "952199",
    "end": "957440"
  },
  {
    "text": "the situation is different so what do you do",
    "start": "957440",
    "end": "962560"
  },
  {
    "text": "well you have to first test everything all your attx services uh how many",
    "start": "962560",
    "end": "967639"
  },
  {
    "text": "people use fusses oh that's not many uh good for",
    "start": "967639",
    "end": "973839"
  },
  {
    "text": "those who do if you have software that needs to be secure you need to fuss",
    "start": "973839",
    "end": "979319"
  },
  {
    "text": "things uh the tests will find some bugs but the fers will find much",
    "start": "979319",
    "end": "986839"
  },
  {
    "text": "more uh I can't go into detail on this but there are great talks about fuzzing",
    "start": "986839",
    "end": "991959"
  },
  {
    "text": "and and if you write software that could be attacked then you absolutely need to do this and you also need to test the",
    "start": "991959",
    "end": "998560"
  },
  {
    "text": "coverage does the fesser actually exercise all the code uh it's an incredibly powerful tool I strongly",
    "start": "998560",
    "end": "1005000"
  },
  {
    "text": "recommend that you do this um but it would be better if we could actually find some of these bugs",
    "start": "1005000",
    "end": "1012440"
  },
  {
    "text": "um chander Cruz had a talk uh a while ago where he recommended",
    "start": "1012440",
    "end": "1018880"
  },
  {
    "text": "using signed integers for everything um it's on YouTube you can have a look",
    "start": "1018880",
    "end": "1024959"
  },
  {
    "text": "at it uh his argument was that the edge cases are further away uh you typically",
    "start": "1024959",
    "end": "1030120"
  },
  {
    "text": "use numbers that are small and around zero and uh the feeling was that was",
    "start": "1030120",
    "end": "1035438"
  },
  {
    "text": "dangerous because zero was the edge case uh this puts the edge cases as far away from zero as possible and then the the",
    "start": "1035439",
    "end": "1043319"
  },
  {
    "text": "uh the undefined Behavior sentier could detect any overflows this is what uh Robert SE was ranting about in his",
    "start": "1043319",
    "end": "1050600"
  },
  {
    "text": "talk uh last year uh there are some problems with this uh you introduce undefined behavior in a code which is",
    "start": "1050600",
    "end": "1057320"
  },
  {
    "text": "bad uh you don't want that if it's supposed to be secure you don't want that in any case uh and also",
    "start": "1057320",
    "end": "1063960"
  },
  {
    "text": "semantically signed ins are often a poor representation of the domain as the length of a vector will",
    "start": "1063960",
    "end": "1069960"
  },
  {
    "text": "never be negative uh the big problems is that the edge Cas is up other way uh because you",
    "start": "1069960",
    "end": "1077360"
  },
  {
    "text": "are more more likely to forget to test them but the attacker will test them because he knows what to look for and",
    "start": "1077360",
    "end": "1084080"
  },
  {
    "text": "also it muddies the waters because many of your Expressions will be signed oh sorry unsigned",
    "start": "1084080",
    "end": "1090200"
  },
  {
    "text": "anyway uh you start with a length of a vector and you do some arithmetic on it that's still unsigned so this is not",
    "start": "1090200",
    "end": "1098080"
  },
  {
    "text": "pure and then Robert secot had this talk last year where he says you should prefer unsign",
    "start": "1098080",
    "end": "1104159"
  },
  {
    "text": "inages uh especially when it fits the problem at hand and then you test with the sanitizer because the undefined",
    "start": "1104159",
    "end": "1111080"
  },
  {
    "text": "Behavior sanitizer has also tests for unsigned IND overflow even though that's",
    "start": "1111080",
    "end": "1116159"
  },
  {
    "text": "not undefined Behavior this is not welln um challenges with this this will",
    "start": "1116159",
    "end": "1122840"
  },
  {
    "text": "detect intended overflow as well and even some of the standard libraries do this so you will need some suppressions",
    "start": "1122840",
    "end": "1130280"
  },
  {
    "text": "uh surprisingly few so this is perfectly doable um and of course the normal",
    "start": "1130280",
    "end": "1136440"
  },
  {
    "text": "caveat testing is never perfect but this is an interesting technique I I really like this",
    "start": "1136440",
    "end": "1143280"
  },
  {
    "text": "one uh so how well does this",
    "start": "1143559",
    "end": "1147679"
  },
  {
    "text": "work but J say he well un Su to jflow checking is not",
    "start": "1150039",
    "end": "1156600"
  },
  {
    "text": "implemented and there are some problems with detecting signed integer overflow as",
    "start": "1156600",
    "end": "1162799"
  },
  {
    "text": "well let's see ah now it almost in the right place good so this is a simple program that creates",
    "start": "1164120",
    "end": "1171799"
  },
  {
    "text": "a variable B which is the has the maximum size for assigned int and then we add one to it so it overflows which",
    "start": "1171799",
    "end": "1178159"
  },
  {
    "text": "is UB and then we test it and it returns one or zero one or two uh this one",
    "start": "1178159",
    "end": "1184400"
  },
  {
    "text": "return to it's compiled with the sanitizer on to detect this but it",
    "start": "1184400",
    "end": "1189440"
  },
  {
    "text": "didn't it ran anyway which is bad",
    "start": "1189440",
    "end": "1195159"
  },
  {
    "text": "um let's see but this is comp with",
    "start": "1195159",
    "end": "1200320"
  },
  {
    "text": "optimizations and if I turn those off see it detects the error correctly",
    "start": "1200320",
    "end": "1208480"
  },
  {
    "text": "so GCC um concludes that there is undefined",
    "start": "1208480",
    "end": "1213600"
  },
  {
    "text": "Behavior it runs it through the optimizer and it exploits the undefined Behavior to do whatever it wants and",
    "start": "1213600",
    "end": "1219840"
  },
  {
    "text": "then it instruments it with the sanitizer which is too late because it's",
    "start": "1219840",
    "end": "1226320"
  },
  {
    "text": "not detected so this doesn't work at all uh for cling well that works as",
    "start": "1226320",
    "end": "1234679"
  },
  {
    "text": "expected um and it gets",
    "start": "1234679",
    "end": "1240919"
  },
  {
    "text": "trapped even with optimizations on so this is great this works really well uh and",
    "start": "1240919",
    "end": "1247400"
  },
  {
    "text": "there's a special uh sanitizer mode that's just called integer that catches everything",
    "start": "1247400",
    "end": "1253280"
  },
  {
    "text": "signed unsigned uh truncation all of it",
    "start": "1253280",
    "end": "1258799"
  },
  {
    "text": "so you need to use kind if you want to do this you can't use",
    "start": "1258799",
    "end": "1264200"
  },
  {
    "text": "GCC um other Solutions um there's a library called boost safe numerics which",
    "start": "1265200",
    "end": "1271320"
  },
  {
    "text": "is really interesting um he defines integer classes and all the operations on them and it will trap at runtime any",
    "start": "1271320",
    "end": "1279240"
  },
  {
    "text": "of these problems so it fixes the root cause uh of course increases compile and runtime a bit and your code will look",
    "start": "1279240",
    "end": "1287000"
  },
  {
    "text": "slightly different I haven't by this but it looks really interesting if you want or you could use rust fixes all that",
    "start": "1287000",
    "end": "1294840"
  },
  {
    "text": "rust has this under control but sometimes you have to stay in C++ for various",
    "start": "1294840",
    "end": "1300120"
  },
  {
    "text": "reasons um another security isue uh which is really important data races I",
    "start": "1300120",
    "end": "1306559"
  },
  {
    "text": "kind of like this one uh this is a picture from milla's offices and someone put a poster up and says you have to be",
    "start": "1306559",
    "end": "1313559"
  },
  {
    "text": "this tall to write multi-threaded code and as you can see he he doesn't he doesn't qualify is too shorts we all",
    "start": "1313559",
    "end": "1320480"
  },
  {
    "text": "are um there is a sanitizer for this as well the thread sanitizer really really",
    "start": "1320480",
    "end": "1326240"
  },
  {
    "text": "good it's excellent um it's always right uh when",
    "start": "1326240",
    "end": "1332480"
  },
  {
    "text": "you run it you sometimes think well this is a this is a false positive my code is correct and then you stare at your code",
    "start": "1332480",
    "end": "1338600"
  },
  {
    "text": "for 15 20 minutes and you realize that no the code is broken um we all suck at writing withit",
    "start": "1338600",
    "end": "1346840"
  },
  {
    "text": "code I do the thread sanitizer has proven that I do and I think you all probably do as",
    "start": "1346840",
    "end": "1353320"
  },
  {
    "text": "well U how many use the thread sanitizer",
    "start": "1353320",
    "end": "1358840"
  },
  {
    "text": "okay uh then you probably know what I'm talking about um the task is simply too",
    "start": "1358840",
    "end": "1366360"
  },
  {
    "text": "difficult but run the thread s run the the thread sanitizer it's it's great on",
    "start": "1366360",
    "end": "1371520"
  },
  {
    "text": "the complete application good test scenarios again you need to have good",
    "start": "1371520",
    "end": "1376799"
  },
  {
    "text": "coverage um it only detects data races that actually occur so there are bugs that will",
    "start": "1376799",
    "end": "1384559"
  },
  {
    "text": "manifest themselves with a low probability so you have to run it for a long time you have to run it on all your",
    "start": "1384559",
    "end": "1391440"
  },
  {
    "text": "your pushes uh and on all your long-term tests run it every night run it on all",
    "start": "1391440",
    "end": "1398000"
  },
  {
    "text": "changes put it in your CI pipeline uh what we've learned is that",
    "start": "1398000",
    "end": "1403120"
  },
  {
    "text": "the note on the wall should be higher up uh and you you need to fix this in",
    "start": "1403120",
    "end": "1408799"
  },
  {
    "text": "your architecture you need to device an architecture that avoids using basic",
    "start": "1408799",
    "end": "1413919"
  },
  {
    "text": "Primitives like threads and mutexes in in code that you write on a daily basis uh actors are good active objects",
    "start": "1413919",
    "end": "1421720"
  },
  {
    "text": "are similar um that makes the problem a little bit",
    "start": "1421720",
    "end": "1427120"
  },
  {
    "text": "easier so no no basic Primitives this is hard sometimes but the basics are not",
    "start": "1427120",
    "end": "1434840"
  },
  {
    "text": "good enough extractions abstractions um so to summarize the",
    "start": "1434840",
    "end": "1440520"
  },
  {
    "text": "authoring part uh what you end up with is a monster pipeline in your uh",
    "start": "1440520",
    "end": "1445960"
  },
  {
    "text": "continuous interogation system uh you need to run with a large number of sanitises on your unit tests",
    "start": "1445960",
    "end": "1452559"
  },
  {
    "text": "on an automated F System test and on first test and also the optimization level",
    "start": "1452559",
    "end": "1462039"
  },
  {
    "text": "matters uh due to UB and as we saw with GCC 02 made a differ",
    "start": "1462039",
    "end": "1469039"
  },
  {
    "text": "so you need to run this also both on debug and release um and you need passes for all",
    "start": "1469039",
    "end": "1475880"
  },
  {
    "text": "your attack services so this is a big investment but it really pays",
    "start": "1475880",
    "end": "1483320"
  },
  {
    "text": "off um so if we write a bug what happens in the review",
    "start": "1483320",
    "end": "1488480"
  },
  {
    "text": "process um I strongly recommend you use B request most of you probably do uh you",
    "start": "1488480",
    "end": "1494360"
  },
  {
    "text": "need to promote a good review culture where you don't argue about formatting leave that to Fang format or other tools",
    "start": "1494360",
    "end": "1501080"
  },
  {
    "text": "and you need to focus on on the the important stuff the design and the logic uh I also recommend that you use",
    "start": "1501080",
    "end": "1508440"
  },
  {
    "text": "your CI system to generate coverage reports so that you can check has this code that I'm reviewing actually been",
    "start": "1508440",
    "end": "1516159"
  },
  {
    "text": "tested uh but what we find is that the pull requests do not actually find many",
    "start": "1516360",
    "end": "1522200"
  },
  {
    "text": "security bugs unfortunately but you should still do that for other reasons",
    "start": "1522200",
    "end": "1529600"
  },
  {
    "text": "um if a bug passes review and makes it into uh the main",
    "start": "1529600",
    "end": "1536320"
  },
  {
    "text": "branch in your git system what what can we do to stop it there well the fussing is important here",
    "start": "1536320",
    "end": "1544360"
  },
  {
    "text": "uh you should do cumulative fussing what you can do with a FES is that you can you can start them out with",
    "start": "1544360",
    "end": "1551080"
  },
  {
    "text": "some good seeds then you have the CI system pass for hours every night when",
    "start": "1551080",
    "end": "1556120"
  },
  {
    "text": "nothing else happens and then when that's done you can keep the state and use that when you continue again",
    "start": "1556120",
    "end": "1562559"
  },
  {
    "text": "tomorrow and that will accumulate years of runtime for the FES which they",
    "start": "1562559",
    "end": "1569000"
  },
  {
    "text": "sometimes need in order to dig down into your code in a good way and again coverage data is important",
    "start": "1569000",
    "end": "1577279"
  },
  {
    "text": "you need to be able to verify that your fusser has actually tested all the important code and all the important",
    "start": "1577279",
    "end": "1583159"
  },
  {
    "text": "balls and some of them will be hard to reach uh if you do this on a prot",
    "start": "1583159",
    "end": "1588720"
  },
  {
    "text": "and the protocol has check sums well the fer can't guess the correct check sum so you need to help it",
    "start": "1588720",
    "end": "1595240"
  },
  {
    "text": "a bit and if the protocol has States uh you will also need to create fusses for",
    "start": "1595240",
    "end": "1603000"
  },
  {
    "text": "each and every state in order to to be able to test the logic in each state so it's a bit of",
    "start": "1603000",
    "end": "1608720"
  },
  {
    "text": "work but it really pays off and do not forget forget your third",
    "start": "1608720",
    "end": "1614120"
  },
  {
    "text": "party code um procces can actually be a problem here because if the attacker can",
    "start": "1614120",
    "end": "1620600"
  },
  {
    "text": "guess what third party code you're using then the attacker can p that code find",
    "start": "1620600",
    "end": "1625960"
  },
  {
    "text": "the vulnerabilities and use those to attack you so if you have third party code someone needs to fuss that either",
    "start": "1625960",
    "end": "1633559"
  },
  {
    "text": "the the person who wrote it or you now what if the bug is",
    "start": "1633559",
    "end": "1643480"
  },
  {
    "text": "activated can we do something at that stage well because some bugs will will s through and be",
    "start": "1643480",
    "end": "1649600"
  },
  {
    "text": "released um the systems that we make are usually",
    "start": "1649600",
    "end": "1655480"
  },
  {
    "text": "simple in the sense that bugs that terminate are not exploitable so a good a safe program is a dead program if it",
    "start": "1655480",
    "end": "1662039"
  },
  {
    "text": "doesn't run it can't have any security issues but not everybody has that",
    "start": "1662039",
    "end": "1667320"
  },
  {
    "text": "luxury uh so what we can do is to try to trap these at run time and for that we",
    "start": "1667320",
    "end": "1672919"
  },
  {
    "text": "need to talk need to talk about assert um",
    "start": "1672919",
    "end": "1679120"
  },
  {
    "text": "okay assert is great you should definitely use this use it to check function parameters use it",
    "start": "1679120",
    "end": "1685279"
  },
  {
    "text": "to check other invariants um but it only affects steber builds I guess most of you have used or",
    "start": "1685279",
    "end": "1691960"
  },
  {
    "text": "do use a certain some way um so what about release builds",
    "start": "1691960",
    "end": "1699159"
  },
  {
    "text": "well your program is in a sense a massive finite State",
    "start": "1699159",
    "end": "1705039"
  },
  {
    "text": "machine and the code that you write you write your code based on the assumption that your invariance hold that your",
    "start": "1705039",
    "end": "1712200"
  },
  {
    "text": "asserts pass your asserts just State the assumptions you have made when you write",
    "start": "1712200",
    "end": "1717360"
  },
  {
    "text": "the logic if the asserts do not hold then you are in a state that you haven't",
    "start": "1717360",
    "end": "1723640"
  },
  {
    "text": "modeled you're in a rogue State Anything Can Happen your whole program is UB uh there is some good literature",
    "start": "1723640",
    "end": "1730519"
  },
  {
    "text": "literature on this they call it the Weir machine uh you could check that out it's it's",
    "start": "1730519",
    "end": "1736000"
  },
  {
    "text": "interesting and and the end conclusion is that if your assumptions do not hold then your program cannot be allowed to",
    "start": "1736000",
    "end": "1744200"
  },
  {
    "text": "continue because it can't be trusted anymore so you cannot disable asserts in",
    "start": "1744200",
    "end": "1752159"
  },
  {
    "text": "your release builds it's not safe and for that you just need to",
    "start": "1752159",
    "end": "1757240"
  },
  {
    "text": "Define your own macro macro that that also affects re release builds you",
    "start": "1757240",
    "end": "1763519"
  },
  {
    "text": "terminate in debug as normal and then releasee you take the action appropriate for your application",
    "start": "1763519",
    "end": "1770760"
  },
  {
    "text": "terminate or go to some safe state it depends um I would not recommend just",
    "start": "1770760",
    "end": "1778240"
  },
  {
    "text": "undefining NDB you could do that but there may be other code that depend on this being used in the normal way so so",
    "start": "1778240",
    "end": "1786159"
  },
  {
    "text": "don't change its semantics um the other thing we can look",
    "start": "1786159",
    "end": "1792080"
  },
  {
    "text": "at is the subscript operator uh and this is where I will go",
    "start": "1792080",
    "end": "1797640"
  },
  {
    "text": "into a little bit of a rant mode maybe uh in under overflow bugs will happen",
    "start": "1797640",
    "end": "1804559"
  },
  {
    "text": "unless you run the sanitizer and release as well I'll get back to that and we need some redundancy some",
    "start": "1804559",
    "end": "1811559"
  },
  {
    "text": "defense and depth um basically you have two Alternatives you can use the",
    "start": "1811559",
    "end": "1816960"
  },
  {
    "text": "subscript subscript operator um but that is undefined Behavior if you go out of",
    "start": "1816960",
    "end": "1823919"
  },
  {
    "text": "bounds and then there is the ad function which hardly anybody uses uh this will",
    "start": "1823919",
    "end": "1829519"
  },
  {
    "text": "throw if you go out of bounds but we all tend to use the subscript operator now",
    "start": "1829519",
    "end": "1835799"
  },
  {
    "text": "why do we do that well is it because of the Need for",
    "start": "1835799",
    "end": "1843240"
  },
  {
    "text": "Speed well no actually I don't think so it's a premature optimization and if we look at",
    "start": "1843240",
    "end": "1851720"
  },
  {
    "text": "that let's see this is this is a simple program",
    "start": "1852200",
    "end": "1858080"
  },
  {
    "text": "that just sums up uh the values of some",
    "start": "1858080",
    "end": "1863519"
  },
  {
    "text": "integers um uh let's see if we go over here",
    "start": "1863519",
    "end": "1869159"
  },
  {
    "text": "you'll see that it generates a little bit of code it stops at 3E and this uses",
    "start": "1869159",
    "end": "1874279"
  },
  {
    "text": "the subscript operator as we usually do now if I change that to use the at",
    "start": "1874279",
    "end": "1881039"
  },
  {
    "text": "function what happens nothing",
    "start": "1881039",
    "end": "1888600"
  },
  {
    "text": "it's the same where did the bounce checking go it's",
    "start": "1888600",
    "end": "1894279"
  },
  {
    "text": "gone this is compiled O2 no 01 sorry so what happens here is that the optimizer",
    "start": "1894279",
    "end": "1900559"
  },
  {
    "text": "looks at this and thinks well you cannot go out of bounds here so it can all be",
    "start": "1900559",
    "end": "1906279"
  },
  {
    "text": "optimized away it's the same code which is a bit surprising so using",
    "start": "1906279",
    "end": "1914159"
  },
  {
    "text": "the subscript operator is a premature optimization in this case um the optimizer will figure out that",
    "start": "1914159",
    "end": "1920919"
  },
  {
    "text": "this is safe and just remove that so you only pay for the bounce checking if your",
    "start": "1920919",
    "end": "1926760"
  },
  {
    "text": "code is insecure in a sense it's simplifying it but it happens a",
    "start": "1926760",
    "end": "1932840"
  },
  {
    "text": "lot so that's probably not a valid reason and then some people say well",
    "start": "1932840",
    "end": "1938679"
  },
  {
    "text": "user error you should ensure that the index is correct nah that's a no that's",
    "start": "1938679",
    "end": "1943919"
  },
  {
    "text": "naive that's error prone because you will write bugs doesn't matter how clever you are bugs will",
    "start": "1943919",
    "end": "1950559"
  },
  {
    "text": "happen I think we use it because it's pretty and it's Compact and the code looks",
    "start": "1950559",
    "end": "1956799"
  },
  {
    "text": "nice and we need to stop doing",
    "start": "1957480",
    "end": "1961559"
  },
  {
    "text": "that and all this happens because the priorities of the language are outdated",
    "start": "1963679",
    "end": "1968919"
  },
  {
    "text": "in terms of security at least speed is always the default and security is opt",
    "start": "1968919",
    "end": "1975000"
  },
  {
    "text": "in and the nice API is unsafe and the safe API is unattractive",
    "start": "1975000",
    "end": "1982159"
  },
  {
    "text": "or even missing for Vector the subs operator is unsafe and at throws but it looks kind",
    "start": "1982159",
    "end": "1989320"
  },
  {
    "text": "of ugly so we don't use it optional is the same and then the really ugly stuff",
    "start": "1989320",
    "end": "1996399"
  },
  {
    "text": "span has a subscrip operator and at does not even exist there is no safe way to",
    "start": "1996399",
    "end": "2003039"
  },
  {
    "text": "use Spam nothing if it was proposed in",
    "start": "2003039",
    "end": "2009519"
  },
  {
    "text": "2018 and it got voted out the committee said",
    "start": "2009519",
    "end": "2015200"
  },
  {
    "text": "no didn't like it so security was not a priority in",
    "start": "2015200",
    "end": "2021440"
  },
  {
    "text": "2018 uh there is some new hope it's proposed again I hope it goes",
    "start": "2021919",
    "end": "2028760"
  },
  {
    "text": "through but it shows that the priorities are wrong and in my opinion um security",
    "start": "2028760",
    "end": "2036919"
  },
  {
    "text": "security should be the default and speed should be oped in",
    "start": "2036919",
    "end": "2042000"
  },
  {
    "text": "nowadays we need to change this and the optimizer can still get you",
    "start": "2042000",
    "end": "2048638"
  },
  {
    "text": "the speed um look at rust it has balance",
    "start": "2048639",
    "end": "2053878"
  },
  {
    "text": "checking and it's still fast and C++ has got this wrong and",
    "start": "2053879",
    "end": "2060200"
  },
  {
    "text": "things are not changing fast enough in my opinion now we can actually fix this uh",
    "start": "2060200",
    "end": "2066599"
  },
  {
    "text": "all these unsafe operators could Trap by default because out of bounds access is UB and UB allows",
    "start": "2066599",
    "end": "2074520"
  },
  {
    "text": "anything also bounce checking so it would be back backwards compatible it",
    "start": "2074520",
    "end": "2079560"
  },
  {
    "text": "would not break anything that isn't already broken and the optimizer will will",
    "start": "2079560",
    "end": "2085040"
  },
  {
    "text": "remove the overhead most of the time and we could make some functions",
    "start": "2085040",
    "end": "2091118"
  },
  {
    "text": "for those who still want to be unsafe clearly marked as such this will not be popular",
    "start": "2091119",
    "end": "2098879"
  },
  {
    "text": "yeah yeah you l i I can understand that uh it will be very unpopular it will be thrown out at the first vote but it",
    "start": "2099160",
    "end": "2106280"
  },
  {
    "text": "would make C++ a lot",
    "start": "2106280",
    "end": "2109880"
  },
  {
    "text": "safer so while we wait you could use a coding standard I assume many of you",
    "start": "2111400",
    "end": "2116680"
  },
  {
    "text": "have one uh and discourage these unsafe operators you could prohibit",
    "start": "2116680",
    "end": "2123520"
  },
  {
    "text": "span um I would recommend that you do that won't be popular I think because",
    "start": "2123520",
    "end": "2131160"
  },
  {
    "text": "your code will look uglier but it will be safer um there are there are also some",
    "start": "2131160",
    "end": "2137119"
  },
  {
    "text": "other interesting ways to fix this uh you could use the debug version of the standard Library how many people know about",
    "start": "2137119",
    "end": "2143520"
  },
  {
    "text": "that yeah not many um this has bound checking you can",
    "start": "2143520",
    "end": "2149440"
  },
  {
    "text": "use that but it changes the object layout so you need to compile everything",
    "start": "2149440",
    "end": "2154680"
  },
  {
    "text": "including the standard Library itself with this flag which is a bit of work so",
    "start": "2154680",
    "end": "2160480"
  },
  {
    "text": "I don't think many people do that but there is some other stuff you can do there is a",
    "start": "2160480",
    "end": "2166359"
  },
  {
    "text": "switch that you can turn on that gives you bounce checking it does not change the object object layout and you can",
    "start": "2166359",
    "end": "2172680"
  },
  {
    "text": "also use it in release builds and this works and when I found that I thought",
    "start": "2172680",
    "end": "2179319"
  },
  {
    "text": "well great and then I also got deeply frustrated why is this not on in debug",
    "start": "2179319",
    "end": "2185720"
  },
  {
    "text": "mode this could be turned on by default but it's not because speed is a priority",
    "start": "2185720",
    "end": "2193400"
  },
  {
    "text": "also in debug mode go figure I can't understand",
    "start": "2193400",
    "end": "2199079"
  },
  {
    "text": "that so this is an easy win if you want to remember one thing from this talk I think it should be this go home and turn",
    "start": "2199079",
    "end": "2205520"
  },
  {
    "text": "it on uh that's for GCC if you use clang it has a different name but it does the",
    "start": "2205520",
    "end": "2211599"
  },
  {
    "text": "same thing this fixes this gives you balce checking",
    "start": "2211599",
    "end": "2217240"
  },
  {
    "text": "at a low cost and you just have to turn it on your in your make",
    "start": "2217240",
    "end": "2222200"
  },
  {
    "text": "files so what about the overflows well you could actually deploy the sanitizer",
    "start": "2223720",
    "end": "2230480"
  },
  {
    "text": "in your release build and fix it um you will need some",
    "start": "2230480",
    "end": "2239160"
  },
  {
    "text": "suppressions um some of the standard libraries will cause overflows um by by",
    "start": "2239520",
    "end": "2245680"
  },
  {
    "text": "Design a crypto Library will do this all the time um basic string does this so some",
    "start": "2245680",
    "end": "2252720"
  },
  {
    "text": "suppressions are required the random libraries do this but surprisingly few",
    "start": "2252720",
    "end": "2260240"
  },
  {
    "text": "suppressions are required so this is easy to set up this will give you interet Security on par with rust or Ada",
    "start": "2260240",
    "end": "2266960"
  },
  {
    "text": "or whatever um there are also some compiler options you should look",
    "start": "2266960",
    "end": "2272880"
  },
  {
    "text": "into uh aslr stack protector so on um I will not go into detail about that",
    "start": "2272880",
    "end": "2280000"
  },
  {
    "text": "here uh but there's a lot of good literature out there that you could look",
    "start": "2280000",
    "end": "2285599"
  },
  {
    "text": "at um this also changes from time to time and do not forget architecture",
    "start": "2285880",
    "end": "2293160"
  },
  {
    "text": "specific protections um if you control the platform if you have a Linux distribution of some sort that you have",
    "start": "2293160",
    "end": "2299079"
  },
  {
    "text": "configured make sure that the stack is non-executable uh if you are on very new",
    "start": "2299079",
    "end": "2305000"
  },
  {
    "text": "arm platforms that's a really cool uh switch that you can use which is called",
    "start": "2305000",
    "end": "2310280"
  },
  {
    "text": "Branch protection uh the new Max support this um this",
    "start": "2310280",
    "end": "2316560"
  },
  {
    "text": "actually adds some extra instructions to the functions in your program that sign",
    "start": "2316560",
    "end": "2322119"
  },
  {
    "text": "the return value cryptographically and then check the signature on return so if someone tries",
    "start": "2322119",
    "end": "2328520"
  },
  {
    "text": "to do return oriented programming and jump into your functions towards the end",
    "start": "2328520",
    "end": "2334000"
  },
  {
    "text": "to use it as a gadget uh the prog will trap so this protects against uh return",
    "start": "2334000",
    "end": "2341240"
  },
  {
    "text": "oriented programming which is really cool uh I think Patricia Al is holding a talk later about that technique return",
    "start": "2341240",
    "end": "2347640"
  },
  {
    "text": "on it to programming uh I'll go see it I think maybe you should too um of course someone has already",
    "start": "2347640",
    "end": "2354560"
  },
  {
    "text": "demonstrated a successful attack against this but I'm not sure how practical it",
    "start": "2354560",
    "end": "2360960"
  },
  {
    "text": "is um finally if an attacker is able to trigger a bug and get in is there",
    "start": "2362880",
    "end": "2371440"
  },
  {
    "text": "something more you can do um yes uh this is not a topic of this talk",
    "start": "2371440",
    "end": "2378079"
  },
  {
    "text": "really it's uh something somebody could talk for hours about I think but it's outside the scope but try to ensure that",
    "start": "2378079",
    "end": "2385640"
  },
  {
    "text": "there is nothing of value to find sounds strange but um do not put your high",
    "start": "2385640",
    "end": "2391560"
  },
  {
    "text": "value Asset in the first process that attacker breaks into so so if you have",
    "start": "2391560",
    "end": "2398280"
  },
  {
    "text": "say a a password file that you don't want to to leak to the internet put that somewhere else",
    "start": "2398280",
    "end": "2406240"
  },
  {
    "text": "somewhere deeper inside your system um if you look at what banks do uh they tend to put the highest value",
    "start": "2406240",
    "end": "2415480"
  },
  {
    "text": "targets inside dedicated Hardware uh you could go read about that Hardware",
    "start": "2415480",
    "end": "2420800"
  },
  {
    "text": "security modules um if you can't use or afford one of those you can build some something",
    "start": "2420800",
    "end": "2427560"
  },
  {
    "text": "almost as good in software if you put your mind to it which is an interesting",
    "start": "2427560",
    "end": "2434200"
  },
  {
    "text": "technique all right so where does all this leave us well the good",
    "start": "2434200",
    "end": "2441520"
  },
  {
    "text": "part you can detect integer overflow at runtime even in",
    "start": "2441520",
    "end": "2446599"
  },
  {
    "text": "releases you can get bounce checking if you want to and you should so you can have reasonable",
    "start": "2446599",
    "end": "2454040"
  },
  {
    "text": "redundant protection against buffer overruns and there is lots of good tooling that you should invest",
    "start": "2454040",
    "end": "2460400"
  },
  {
    "text": "in uh the bad memory errors still possible and will always be",
    "start": "2460400",
    "end": "2468160"
  },
  {
    "text": "possible and the Ugly Part uh data rases complex problematic I don't think",
    "start": "2468160",
    "end": "2475960"
  },
  {
    "text": "they can ever fix that and the the sad part I think",
    "start": "2475960",
    "end": "2481760"
  },
  {
    "text": "security needs to become more of a priority in the language",
    "start": "2481760",
    "end": "2488240"
  },
  {
    "text": "okay um I spoke a little faster than I planned so I'm ahead of time",
    "start": "2489880",
    "end": "2496680"
  },
  {
    "text": "questions yes okay I can just there is one here",
    "start": "2496880",
    "end": "2503319"
  },
  {
    "text": "does it work",
    "start": "2503319",
    "end": "2509040"
  },
  {
    "text": "oh okay thank you okay it works so thank",
    "start": "2509079",
    "end": "2515119"
  },
  {
    "text": "you for the talk and I have a question about square brackets and add operator",
    "start": "2515119",
    "end": "2520240"
  },
  {
    "text": "for Vector do you think if we use a high level obstructions say ranes library",
    "start": "2520240",
    "end": "2525839"
  },
  {
    "text": "would it improve the situation in general so the point is in modern C++",
    "start": "2525839",
    "end": "2531440"
  },
  {
    "text": "you probably don't really need to use both of them like neither square",
    "start": "2531440",
    "end": "2536920"
  },
  {
    "text": "brackets operator nor at operator it's either what you use it's either rench",
    "start": "2536920",
    "end": "2542160"
  },
  {
    "text": "based for or ranches Library which pretty much the same as do eer in Rust",
    "start": "2542160",
    "end": "2549079"
  },
  {
    "text": "yeah that the question yes um yeah you're right um You should avoid it if",
    "start": "2549079",
    "end": "2554520"
  },
  {
    "text": "you can um but I still see new code written with this so it's hard to avoid",
    "start": "2554520",
    "end": "2560040"
  },
  {
    "text": "at all times but yes if you can avoid using the square brackets operator or the at function then that is even better",
    "start": "2560040",
    "end": "2565920"
  },
  {
    "text": "absolutely thank you yes at the",
    "start": "2565920",
    "end": "2571640"
  },
  {
    "text": "back thank you for a good talk and uh you were wondering about fussing how to",
    "start": "2572680",
    "end": "2578200"
  },
  {
    "text": "get started uh uh what have you experienced that we can avoid",
    "start": "2578200",
    "end": "2585160"
  },
  {
    "text": "experiencing um getting started is not that difficult",
    "start": "2586839",
    "end": "2592680"
  },
  {
    "text": "um you need to set up the infrastructure um you start out by doing it locally uh",
    "start": "2592680",
    "end": "2599480"
  },
  {
    "text": "and and making fessor is not that difficult you uh have to write a small function that takes some uh simly random",
    "start": "2599480",
    "end": "2606839"
  },
  {
    "text": "input and just puts puts that into your API and then you build the fer and you",
    "start": "2606839",
    "end": "2613119"
  },
  {
    "text": "run it um but we have had uh we have seen that",
    "start": "2613119",
    "end": "2620000"
  },
  {
    "text": "you you absolutely need to use uh coverage data in order to see what the fer",
    "start": "2620000",
    "end": "2626480"
  },
  {
    "text": "does um and to give it a good start you also need to provide some seats so you",
    "start": "2626480",
    "end": "2634559"
  },
  {
    "text": "uh it will eventually generate good test vectors on his own but if you can if you",
    "start": "2634559",
    "end": "2640000"
  },
  {
    "text": "can give it a good starting point if you can give it a dozen uh inputs that are actually valid and good and a bit",
    "start": "2640000",
    "end": "2646119"
  },
  {
    "text": "different then it will it will cover a lot more of your code very much",
    "start": "2646119",
    "end": "2651520"
  },
  {
    "text": "quicker so uh some good seeds and coverage it's a good place to start",
    "start": "2651520",
    "end": "2657480"
  },
  {
    "text": "thank you and you made it internally the fer no no uh this is a part of of at",
    "start": "2657480",
    "end": "2663319"
  },
  {
    "text": "least of clang I I don't remember if it's part of GCC okay well I have a colleague here who",
    "start": "2663319",
    "end": "2668520"
  },
  {
    "text": "better at much of this than than me and he also provided uh some of the examples",
    "start": "2668520",
    "end": "2674800"
  },
  {
    "text": "Theon so thank you for that um so it's free and it's it's easy",
    "start": "2674800",
    "end": "2681599"
  },
  {
    "text": "to start using there was one talk I saw about",
    "start": "2681599",
    "end": "2688319"
  },
  {
    "text": "fing where they joked that you find 20% of your bugs with tests and 80% with",
    "start": "2688319",
    "end": "2694960"
  },
  {
    "text": "fussing so there is some truth to that the really really ugly bugs uh are found",
    "start": "2694960",
    "end": "2700800"
  },
  {
    "text": "found by fussing uh we have had bugs where we we look at it and and we think well how on Earth did the fusser get",
    "start": "2700800",
    "end": "2707559"
  },
  {
    "text": "there how did it even find that code it shouldn't be able to reach that but it still did yes thank you for the talk I have a",
    "start": "2707559",
    "end": "2715559"
  },
  {
    "text": "question regarding estd span uh I understand like s span was originally with like you is a new save to use it",
    "start": "2715559",
    "end": "2723720"
  },
  {
    "text": "and then it's it's didn't become it yes uh I'm sorry I didn't catch all that",
    "start": "2723720",
    "end": "2729119"
  },
  {
    "text": "yeah you said the ban is to dispan yes don't use this to dispan yes yes and but",
    "start": "2729119",
    "end": "2735800"
  },
  {
    "text": "is thepan supposed to be that safe tool that people should use yes but my my",
    "start": "2735800",
    "end": "2742319"
  },
  {
    "text": "question is maybe there is a guidelines support library and which has actually",
    "start": "2742319",
    "end": "2748160"
  },
  {
    "text": "bounce check uh span yes so you would prefer to use that one I I would say yes",
    "start": "2748160",
    "end": "2754040"
  },
  {
    "text": "uh to moderate that a bit if you if you don't use the square braet operator or at then fine go ahead and use",
    "start": "2754040",
    "end": "2760760"
  },
  {
    "text": "Spam but if you find that you have to use the the uh the square brackets the",
    "start": "2760760",
    "end": "2766839"
  },
  {
    "text": "subscript operator then that's dangerous if you use ranges or or range based for",
    "start": "2766839",
    "end": "2772760"
  },
  {
    "text": "Loops then then then it works great maybe just to follow up a question would you encourage people to write the Kang",
    "start": "2772760",
    "end": "2780119"
  },
  {
    "text": "tidy checks to actually verify that you don't use something H because one thing",
    "start": "2780119",
    "end": "2785359"
  },
  {
    "text": "is to yes you say it but then it's it's human control then I mean man all it's",
    "start": "2785359",
    "end": "2790720"
  },
  {
    "text": "it's not cool right uh you talking about writing your own plank tidy checks yes that's a cool",
    "start": "2790720",
    "end": "2797240"
  },
  {
    "text": "technique I haven't done that myself but it looks really cool uh is it difficult not that much okay yes yeah",
    "start": "2797240",
    "end": "2804760"
  },
  {
    "text": "that would be a really good idea and probably a bit of fun as well okay other things yes uh are there",
    "start": "2804760",
    "end": "2814000"
  },
  {
    "text": "any good libraries uh security libraries so for instance you have let's say you",
    "start": "2814000",
    "end": "2819760"
  },
  {
    "text": "have a vector uh your own sorry you have a vector class which is safe which he",
    "start": "2819760",
    "end": "2826240"
  },
  {
    "text": "has uh built in bond checking on the Square operator",
    "start": "2826240",
    "end": "2833400"
  },
  {
    "text": "M yeah you could use that um but you can get bounce checking with the standard one as well",
    "start": "2833720",
    "end": "2841240"
  },
  {
    "text": "so I would probably just use that just turn it on with the compile",
    "start": "2841240",
    "end": "2847960"
  },
  {
    "text": "switch um yeah but if you have one and like it then sure go",
    "start": "2847960",
    "end": "2853558"
  },
  {
    "text": "ahead",
    "start": "2854000",
    "end": "2857000"
  },
  {
    "text": "yes uh the performance compared to to to standard processor on servers or",
    "start": "2870800",
    "end": "2876800"
  },
  {
    "text": "something so is there what are the performance penalties actually okay so",
    "start": "2876800",
    "end": "2882079"
  },
  {
    "text": "the question is what's the performance of an HSM compared to to running this in a process on a",
    "start": "2882079",
    "end": "2887839"
  },
  {
    "text": "server I don't know I I would expect that um because the HSM is is something",
    "start": "2887839",
    "end": "2893599"
  },
  {
    "text": "that you have to communicate with externally maybe it's a bit slower uh it will be get you much better security um",
    "start": "2893599",
    "end": "2901119"
  },
  {
    "text": "but you can emulate some of that security in a process if you isolate it well if it has a very narrow API you",
    "start": "2901119",
    "end": "2906440"
  },
  {
    "text": "check it extremely well uh there are also some interesting techniques on servers like Intel",
    "start": "2906440",
    "end": "2914400"
  },
  {
    "text": "sgx which provides some extra protection extra isolation that you could look into",
    "start": "2914400",
    "end": "2922000"
  },
  {
    "text": "um also hsms are expensive yeah um so",
    "start": "2922000",
    "end": "2927040"
  },
  {
    "text": "that was an extreme example yeah thanks",
    "start": "2927040",
    "end": "2932040"
  },
  {
    "text": "yeah it was more to illustrate the importance of hiding your",
    "start": "2932280",
    "end": "2938240"
  },
  {
    "text": "assets okay yes anything",
    "start": "2946280",
    "end": "2951079"
  },
  {
    "text": "else all right thanks a",
    "start": "2953280",
    "end": "2957799"
  },
  {
    "text": "lot",
    "start": "2964520",
    "end": "2967520"
  }
]