[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "I hope you had a good day of workshops yesterday and if not I hope you're gonna",
    "start": "20",
    "end": "5339"
  },
  {
    "text": "have a good day today with the conference but let's just right jump",
    "start": "5339",
    "end": "11429"
  },
  {
    "text": "into it shall we this talk is about how to use git",
    "start": "11429",
    "end": "17789"
  },
  {
    "text": "effectively or rather how effective teams use git my name is Enrico",
    "start": "17789",
    "end": "24090"
  },
  {
    "text": "Campidoglio I'm a freelance programmer this is me freelancing from home these",
    "start": "24090",
    "end": "30359"
  },
  {
    "text": "days I also do a fair bit of training and workshops and stuff like that and",
    "start": "30359",
    "end": "35399"
  },
  {
    "text": "these days I also do that from home who would have thought anyway we're not here",
    "start": "35399",
    "end": "40890"
  },
  {
    "start": "40000",
    "end": "290000"
  },
  {
    "text": "to talk about that we are here to talk about git now they it's never been a",
    "start": "40890",
    "end": "47520"
  },
  {
    "text": "better time to learn it these days there are plenty of resources out there you",
    "start": "47520",
    "end": "55110"
  },
  {
    "text": "have books videos you have online tutorials you have even podcasts about",
    "start": "55110",
    "end": "62280"
  },
  {
    "text": "git so with all these resources I mean getting off the ground is not a problem",
    "start": "62280",
    "end": "68210"
  },
  {
    "text": "but while everyone including me is busy telling is busy telling you how it works",
    "start": "68210",
    "end": "75890"
  },
  {
    "text": "nobody is giving you any advice on what to do with it so that's the problem you",
    "start": "75890",
    "end": "86790"
  },
  {
    "text": "might wonder ok what do you mean by that what I mean that if you know how",
    "start": "86790",
    "end": "93689"
  },
  {
    "text": "something works it doesn't really doesn't mean that you necessarily know how to use it in practice for example",
    "start": "93689",
    "end": "98970"
  },
  {
    "text": "it's like learning how to play the notes on a piano but then you cannot play a",
    "start": "98970",
    "end": "104579"
  },
  {
    "text": "song so what you need is guidance but",
    "start": "104579",
    "end": "110040"
  },
  {
    "text": "wait a minute you say who will need guidance using a source control system I",
    "start": "110040",
    "end": "116070"
  },
  {
    "text": "mean it's pretty self-explanatory right and you would be right it has been that",
    "start": "116070",
    "end": "122640"
  },
  {
    "text": "way with traditional source control systems like for example CBS perforce you know subversion even TFS those",
    "start": "122640",
    "end": "131430"
  },
  {
    "text": "source control systems by virtue of how they were designed they were pretty much telling you how they",
    "start": "131430",
    "end": "138620"
  },
  {
    "text": "wanted to be used and there was no other way get however is different because git",
    "start": "138620",
    "end": "147080"
  },
  {
    "text": "doesn't really have an opinion about what you do with it I mean it is just a",
    "start": "147080",
    "end": "152989"
  },
  {
    "text": "content rocker it says it to writing the manual write a stupid content tracker it tracks the content of your files and",
    "start": "152989",
    "end": "160130"
  },
  {
    "text": "that's it what you how you use it in a country in the context of software development that's completely up to you",
    "start": "160130",
    "end": "168190"
  },
  {
    "text": "so instead of gift telling you how he wants to be used it's more like you know",
    "start": "168190",
    "end": "174799"
  },
  {
    "text": "whatever whatever works for you I'm just a Content trucker so yeah we need some",
    "start": "174799",
    "end": "181670"
  },
  {
    "text": "guidance but where do you find this guidance well the hell we have the",
    "start": "181670",
    "end": "187730"
  },
  {
    "text": "second problem that I mean everybody use git in a different way depending on your",
    "start": "187730",
    "end": "194269"
  },
  {
    "text": "project depending on the size of your team what kind of software you're building those are all things that",
    "start": "194269",
    "end": "201170"
  },
  {
    "text": "affect the way you use your big it and you know how you do version control so",
    "start": "201170",
    "end": "207799"
  },
  {
    "text": "in order to learn how to use git effectively what you can do is observe",
    "start": "207799",
    "end": "213739"
  },
  {
    "text": "how others use it and you know learn from their experience see what works see",
    "start": "213739",
    "end": "221690"
  },
  {
    "text": "what doesn't work and you know write things down and apply to your own so",
    "start": "221690",
    "end": "226730"
  },
  {
    "text": "that's what I have done so what is this talk about this talk is about it's a",
    "start": "226730",
    "end": "233600"
  },
  {
    "text": "collection of you could call them habits ideas things to think about that are",
    "start": "233600",
    "end": "242540"
  },
  {
    "text": "coming from people who use get in to improve their workflow people who are",
    "start": "242540",
    "end": "247760"
  },
  {
    "text": "really good at being productive using it and they do it both individually as well",
    "start": "247760",
    "end": "255200"
  },
  {
    "text": "as a team so you can see that you can",
    "start": "255200",
    "end": "260570"
  },
  {
    "text": "think of this talk as a collection of things that you can now bring in into your own experience and see how they",
    "start": "260570",
    "end": "266659"
  },
  {
    "text": "apply to your workflow and to your project so let's get started I had said that this",
    "start": "266659",
    "end": "276950"
  },
  {
    "text": "dis advices and this ideas that I'm gonna share with you today they apply both individually as well as in a group",
    "start": "276950",
    "end": "283940"
  },
  {
    "text": "because git being a distributed source control system every repository is equal",
    "start": "283940",
    "end": "289780"
  },
  {
    "text": "so there are things you can do on your own machine these I call personal",
    "start": "289780",
    "end": "294950"
  },
  {
    "start": "290000",
    "end": "365000"
  },
  {
    "text": "workflows and then there are the things that you do with the rest of your team and those I call teamwork flows so the",
    "start": "294950",
    "end": "304070"
  },
  {
    "text": "content all today I divide it into these two categories just you know to keep",
    "start": "304070",
    "end": "309200"
  },
  {
    "text": "them clear and to be more specific I give you three pieces of advice for",
    "start": "309200",
    "end": "315280"
  },
  {
    "text": "personal workflows and then three more for teamwork flows all right sounds good",
    "start": "315280",
    "end": "322280"
  },
  {
    "text": "I hope it sounds good because I can see none of you so I'm just gonna take that as a yes",
    "start": "322280",
    "end": "329000"
  },
  {
    "text": "so let's start with the personal workflows let me just jump right over to",
    "start": "329000",
    "end": "336470"
  },
  {
    "text": "the demo so what you're seeing here is a command line oh by the way I forgot to",
    "start": "336470",
    "end": "343460"
  },
  {
    "text": "mention that this the things I'll show you today I'm gonna use get from the command line to demonstrate these things",
    "start": "343460",
    "end": "350150"
  },
  {
    "text": "however most of what I'm going to show you applies just as well if you're using it from a through a GUI to a graphical",
    "start": "350150",
    "end": "358880"
  },
  {
    "text": "user interface and if it's something that just applies to the cursor to the command line I'm gonna tell you alright",
    "start": "358880",
    "end": "366650"
  },
  {
    "start": "365000",
    "end": "402000"
  },
  {
    "text": "first thing first advice that comes from teams that use git effectively on",
    "start": "366650",
    "end": "373000"
  },
  {
    "text": "personal workflows is to get comfortable now did actually means configure",
    "start": "373000",
    "end": "381050"
  },
  {
    "text": "environment you know git is a rather complex tool to say the least so there",
    "start": "381050",
    "end": "388070"
  },
  {
    "text": "is no need to make it any more uncomfortable to use than it already is and there are many options and",
    "start": "388070",
    "end": "395960"
  },
  {
    "text": "configuration settings you can apply to your environment to make it a more place tool to use the first I want to share to",
    "start": "395960",
    "end": "405150"
  },
  {
    "start": "402000",
    "end": "489000"
  },
  {
    "text": "share with you is and this applies to the command line is to install a get",
    "start": "405150",
    "end": "410190"
  },
  {
    "text": "aware prompt so what is that it's what you're seeing right here if you're",
    "start": "410190",
    "end": "415530"
  },
  {
    "text": "sitting in a command line there are utilities you can install that will enrich your prompt with information",
    "start": "415530",
    "end": "422910"
  },
  {
    "text": "that comes from a git repository for example you will see the branch alone",
    "start": "422910",
    "end": "428970"
  },
  {
    "text": "and as we're gonna work with our files this plant will show us the number of",
    "start": "428970",
    "end": "435510"
  },
  {
    "text": "modified files you know stuff like that so what kind of prompt are there out",
    "start": "435510",
    "end": "441510"
  },
  {
    "text": "there so if you are using Windows and PowerShell I recommend you install",
    "start": "441510",
    "end": "447420"
  },
  {
    "text": "Porsche get and if you are Linux or if you are using the windows subsystem for",
    "start": "447420",
    "end": "454500"
  },
  {
    "text": "Linux and you prefer or you are using for example cygwin windows if you're",
    "start": "454500",
    "end": "460500"
  },
  {
    "text": "using bash I recommend the bash get prompt if instead you are looking for something",
    "start": "460500",
    "end": "466440"
  },
  {
    "text": "cross-platform I highly recommend and this is my favorite something called starship and",
    "start": "466440",
    "end": "472680"
  },
  {
    "text": "that it's it's the one you're seeing right here starship is a cross-platform",
    "start": "472680",
    "end": "479150"
  },
  {
    "text": "con console prompt get aware which is also written in rust so extra bonus for",
    "start": "479150",
    "end": "487260"
  },
  {
    "text": "coolness factor the other thing I want to share with you is how to get pretty",
    "start": "487260",
    "end": "494340"
  },
  {
    "start": "489000",
    "end": "620000"
  },
  {
    "text": "deep in your plant so you're gonna be looking at a lot and this also applies",
    "start": "494340",
    "end": "500760"
  },
  {
    "text": "just to come to the command line you're gonna be looking at a lot of disk if you're working with git and you know the",
    "start": "500760",
    "end": "507780"
  },
  {
    "text": "diff format everybody knows how it looks like can sometimes be hard to read",
    "start": "507780",
    "end": "514050"
  },
  {
    "text": "so there are you there is a utility you can install that prettify z-- your diffs",
    "start": "514050",
    "end": "520380"
  },
  {
    "text": "in the console and that is called diff so fancy this comes on an MP on ma NPM",
    "start": "520380",
    "end": "526800"
  },
  {
    "text": "module so you say NPM install diff so fancy which already deal",
    "start": "526800",
    "end": "532970"
  },
  {
    "text": "and once you have it installed you need to tell get to pipe all the diff",
    "start": "532970",
    "end": "538640"
  },
  {
    "text": "information through deep so fancy before it gets printed on to the console and you do that through a configuration",
    "start": "538640",
    "end": "546770"
  },
  {
    "text": "setting called pager so you say git config core dot pager and you basically",
    "start": "546770",
    "end": "553820"
  },
  {
    "text": "set it to diff so fancy and then you pipe it to less to print it onto the",
    "start": "553820",
    "end": "561170"
  },
  {
    "text": "screen and once you've done that you can",
    "start": "561170",
    "end": "567350"
  },
  {
    "text": "basically say for example you can say diff the committee that's in head that's",
    "start": "567350",
    "end": "573710"
  },
  {
    "text": "referenced by head compared it with the one before head and you get something like this so you see first let me show",
    "start": "573710",
    "end": "581960"
  },
  {
    "text": "you how it looks like if you skip the pager you tailgate you know don't pipe",
    "start": "581960",
    "end": "587900"
  },
  {
    "text": "the deep information to the pager this is how a normal regular diff looks like",
    "start": "587900",
    "end": "594020"
  },
  {
    "text": "and once you have this so fancy it looks",
    "start": "594020",
    "end": "599030"
  },
  {
    "text": "like this so you see all the plus and minuses are removed and it even highlights exactly what in the file in",
    "start": "599030",
    "end": "609050"
  },
  {
    "text": "the string has changed plus it gives you this really nice header up here so div",
    "start": "609050",
    "end": "618050"
  },
  {
    "text": "so fancy good stuff the next one has to",
    "start": "618050",
    "end": "623210"
  },
  {
    "start": "620000",
    "end": "884000"
  },
  {
    "text": "do with whitespace handling now as programmers you know that whitespace matters and it matters a lot and",
    "start": "623210",
    "end": "629200"
  },
  {
    "text": "especially you need to be consistent with your words white space usage well",
    "start": "629200",
    "end": "634550"
  },
  {
    "text": "it turns out that git has built-in features to help you keep your whitespace consistent throughout your",
    "start": "634550",
    "end": "641510"
  },
  {
    "text": "files what you need to do is tell git what invalid whitespace and you do that",
    "start": "641510",
    "end": "649640"
  },
  {
    "text": "through an option called called white space so in",
    "start": "649640",
    "end": "654910"
  },
  {
    "text": "in this case I said that I don't want any blank I don't want any like white",
    "start": "654910",
    "end": "664510"
  },
  {
    "text": "space at the end of a line I don't want any white space at the end of a file and",
    "start": "664510",
    "end": "670980"
  },
  {
    "text": "the regarding indentation I don't want to see any tabs in annotation instead I",
    "start": "670980",
    "end": "678190"
  },
  {
    "text": "want to see spaces like it should be right so you are telling you to wall what you should consider",
    "start": "678190",
    "end": "683980"
  },
  {
    "text": "invalid white space and after you have done that you can use git diff with the",
    "start": "683980",
    "end": "692350"
  },
  {
    "text": "check option to check for invalid white space so let me give you an example",
    "start": "692350",
    "end": "697360"
  },
  {
    "text": "let's open up so this is just a consultant core console application let",
    "start": "697360",
    "end": "703390"
  },
  {
    "text": "me show you real quick how it looks like I have a CS prod file and a command line",
    "start": "703390",
    "end": "712420"
  },
  {
    "text": "program written in C sharp pretty simple stuff so let's open up the source code",
    "start": "712420",
    "end": "721270"
  },
  {
    "text": "and let's make a change right here let's",
    "start": "721270",
    "end": "726570"
  },
  {
    "text": "for example do like this and then on",
    "start": "726570",
    "end": "731610"
  },
  {
    "text": "this line right here let's add a bunch of in Y space at the end of a line so",
    "start": "731610",
    "end": "740560"
  },
  {
    "text": "you see by the way that starship has updated my view I have a modified file",
    "start": "740560",
    "end": "750720"
  },
  {
    "text": "there you go and so let's go let's do git diff check and you see that git is",
    "start": "753150",
    "end": "762040"
  },
  {
    "text": "showing me I have invalid white space exactly here at the end of the line so",
    "start": "762040",
    "end": "769900"
  },
  {
    "text": "that's pretty cool however you know you",
    "start": "769900",
    "end": "775240"
  },
  {
    "text": "need to remember to invoke it which you know that doesn't always have to be the case so if you're gonna be effective",
    "start": "775240",
    "end": "781300"
  },
  {
    "text": "with kit you need to I was gonna see later automate as much as possible so let's say that I want to go ahead and",
    "start": "781300",
    "end": "788699"
  },
  {
    "text": "I forgot to check for the whitespace and I'm just gonna commit the file and add",
    "start": "788699",
    "end": "794290"
  },
  {
    "text": "some invalid whitespace what happens if I happen to commit some value by space",
    "start": "794290",
    "end": "802800"
  },
  {
    "text": "well no worries because you can use the",
    "start": "802800",
    "end": "808029"
  },
  {
    "text": "rebase command with the whitespace option equals to fix and get will go",
    "start": "808029",
    "end": "815110"
  },
  {
    "text": "through the commit included in the rebase and automatically fix any",
    "start": "815110",
    "end": "820870"
  },
  {
    "text": "whitespace errors for you according to these rules so let's let's let's take a",
    "start": "820870",
    "end": "831610"
  },
  {
    "text": "look at our latest commit you see that I have the invalid whitespace here and now",
    "start": "831610",
    "end": "839259"
  },
  {
    "text": "let's do a rebase let's start it from the root of the repository just to be",
    "start": "839259",
    "end": "845440"
  },
  {
    "text": "sure and I'm gonna say whitespace equal fix oh sorry",
    "start": "845440",
    "end": "853170"
  },
  {
    "text": "git rebase let's start to commit ago and",
    "start": "853170",
    "end": "858819"
  },
  {
    "text": "then say white space equal fix so you",
    "start": "858819",
    "end": "863889"
  },
  {
    "text": "see that I've the last two comets have been re-evaluated and let's take a look",
    "start": "863889",
    "end": "870730"
  },
  {
    "text": "at our and the white space is gone so",
    "start": "870730",
    "end": "878010"
  },
  {
    "text": "pretty cool stuff to be effective to use the git features to be effective the",
    "start": "878010",
    "end": "885370"
  },
  {
    "start": "884000",
    "end": "1370000"
  },
  {
    "text": "next one is conflict handling no it's a fact of life that we're gonna have merge",
    "start": "885370",
    "end": "891610"
  },
  {
    "text": "conflicts especially we get to being a distributed source control systems where everybody is working as synchronously",
    "start": "891610",
    "end": "898029"
  },
  {
    "text": "from each other so git has some no",
    "start": "898029",
    "end": "904209"
  },
  {
    "text": "topknots features to handle conflicts one of them is something called",
    "start": "904209",
    "end": "909670"
  },
  {
    "text": "three-way merge now let's let me get rid",
    "start": "909670",
    "end": "917439"
  },
  {
    "text": "of the artifacts over here so I have a bronze",
    "start": "917439",
    "end": "924100"
  },
  {
    "text": "cold feature let let me just highlight it for you have a branch cool feature that I want to merge into master and",
    "start": "924100",
    "end": "932100"
  },
  {
    "text": "there is a conflict in the commit refers by feature so let's see how a normal a",
    "start": "932100",
    "end": "939250"
  },
  {
    "text": "conflict resolution looks like you say git merge feature and you see here that",
    "start": "939250",
    "end": "945490"
  },
  {
    "text": "I have a conflict in the program dot C S now if you take a look at what I have in",
    "start": "945490",
    "end": "955300"
  },
  {
    "text": "my working directory you see that you know get is gonna enter the so called",
    "start": "955300",
    "end": "961830"
  },
  {
    "text": "merge conflict headers what is telling me okay this is where this is how the la",
    "start": "961830",
    "end": "968290"
  },
  {
    "text": "the conflicting lines look like in the Committee that you are merging into and this is how they look like in the",
    "start": "968290",
    "end": "975490"
  },
  {
    "text": "community that you're merging and you see that one commit let me see if I can",
    "start": "975490",
    "end": "983529"
  },
  {
    "text": "highlight it here one commit is adding a comma but keeping the exclamation mark",
    "start": "983529",
    "end": "992950"
  },
  {
    "text": "and the other one doesn't have the comma and doesn't even have the exclamation mark so what is it gonna be now if",
    "start": "992950",
    "end": "1001140"
  },
  {
    "text": "you're gonna reserve a conflict it's useful to see here but how did it look like before either of those commits in",
    "start": "1001140",
    "end": "1010230"
  },
  {
    "text": "other words how did these lines look like in the commit that's the common",
    "start": "1010230",
    "end": "1015720"
  },
  {
    "text": "parent of the conflicting quits and that's where the three-way merge comes",
    "start": "1015720",
    "end": "1022649"
  },
  {
    "text": "in because three-way merge means you're not only comparing two sides of a merge",
    "start": "1022649",
    "end": "1029490"
  },
  {
    "text": "conflict you're comparing two sides against each other and against their common parent three-way merge now you",
    "start": "1029490",
    "end": "1037949"
  },
  {
    "text": "can tell git that you are you want to do a three-way merge by setting the conflict style option to diff three",
    "start": "1037949",
    "end": "1046079"
  },
  {
    "text": "words three stands for three-way merge so let's do that",
    "start": "1046079",
    "end": "1051630"
  },
  {
    "text": "let's first abort this this merge and now we are gonna say git config conflict",
    "start": "1051630",
    "end": "1059720"
  },
  {
    "text": "merge conflict style d3 and now let's do",
    "start": "1059720",
    "end": "1067890"
  },
  {
    "text": "the merge again still getting the conflict of course let's see how this",
    "start": "1067890",
    "end": "1073440"
  },
  {
    "text": "looks like now and you see that now I have an extra set of lines right over",
    "start": "1073440",
    "end": "1082290"
  },
  {
    "text": "here and this is how the lines look like in the common parent so now I have a",
    "start": "1082290",
    "end": "1089550"
  },
  {
    "text": "better you see before it had the exclamation mark this line removes the",
    "start": "1089550",
    "end": "1096020"
  },
  {
    "text": "exclamation mark and this line this line here at the comma so now I have a much",
    "start": "1096020",
    "end": "1101670"
  },
  {
    "text": "better context to resolve the conflict",
    "start": "1101670",
    "end": "1106580"
  },
  {
    "text": "which makes me more effective so that's it for merge conflicts let's move on to",
    "start": "1106970",
    "end": "1115040"
  },
  {
    "text": "global ignores now you might have noticed before that if I open up the",
    "start": "1115040",
    "end": "1121440"
  },
  {
    "text": "file now this is vim but I have installed only sharp which is basically",
    "start": "1121440",
    "end": "1128220"
  },
  {
    "text": "giving you intelligence inside of him and all the redditors and after a while",
    "start": "1128220",
    "end": "1138110"
  },
  {
    "text": "if you see if I and edit this file after",
    "start": "1138110",
    "end": "1144000"
  },
  {
    "text": "a while I'm gonna get like see ended here we go you see that I'm getting",
    "start": "1144000",
    "end": "1149780"
  },
  {
    "text": "warnings and I'm getting compiler errors",
    "start": "1149780",
    "end": "1154950"
  },
  {
    "text": "I bet nobody spotted that one before so this means that my code has been",
    "start": "1154950",
    "end": "1160470"
  },
  {
    "text": "compiled in the background so if I exit this file now",
    "start": "1160470",
    "end": "1170440"
  },
  {
    "text": "I have you see over here i have an untracked file and what file is that you",
    "start": "1170440",
    "end": "1179529"
  },
  {
    "text": "might wonder well it's D object the directory the object and beam have",
    "start": "1179529",
    "end": "1187629"
  },
  {
    "text": "appeared because the Omni sharp has compiled my code in the background and I",
    "start": "1187629",
    "end": "1193899"
  },
  {
    "text": "have no get ignore so that's why those appear are as untracked now if you're",
    "start": "1193899",
    "end": "1203409"
  },
  {
    "text": "gonna work with the same kind of language and the same kind of technology stack that means that you're gonna have",
    "start": "1203409",
    "end": "1211600"
  },
  {
    "text": "the same kind of files and directories that you want to ignore in all of your projects for example if you're working",
    "start": "1211600",
    "end": "1217299"
  },
  {
    "text": "with that you're always gonna want to ignore the object and the bin directories because in those directories",
    "start": "1217299",
    "end": "1223059"
  },
  {
    "text": "you have the binaries now rather than having the same content everywhere in",
    "start": "1223059",
    "end": "1230320"
  },
  {
    "text": "all of your get ignores you can have a global get ignore that applies to all",
    "start": "1230320",
    "end": "1236049"
  },
  {
    "text": "the repositories on your local machine and so you what what it what it is it's",
    "start": "1236049",
    "end": "1242830"
  },
  {
    "text": "basically a git ignore that you put in your home directory and then you tell",
    "start": "1242830",
    "end": "1248559"
  },
  {
    "text": "get to use that as the global ignore file by setting the core exclude file",
    "start": "1248559",
    "end": "1254620"
  },
  {
    "text": "option which have here excludes file so",
    "start": "1254620",
    "end": "1262629"
  },
  {
    "text": "you see that's my home directory so what we can do in this case is that we can",
    "start": "1262629",
    "end": "1269590"
  },
  {
    "text": "open up the global get ignore and right",
    "start": "1269590",
    "end": "1276490"
  },
  {
    "text": "now it just contains everything that starts with tilde and this directory and we're just gonna add bin and herbs to",
    "start": "1276490",
    "end": "1282129"
  },
  {
    "text": "the list of the global ignores and you see that immediately without doing",
    "start": "1282129",
    "end": "1288129"
  },
  {
    "text": "anything before it used to be untracked and now it's",
    "start": "1288129",
    "end": "1295139"
  },
  {
    "text": "gone and as you can see I still don't have",
    "start": "1295139",
    "end": "1300450"
  },
  {
    "text": "any get ignore in my directory so it's already ignoring being a knobbed so very",
    "start": "1300450",
    "end": "1306690"
  },
  {
    "text": "useful if you're using if you're working which is not likely they're gonna did you work with the same kind of language",
    "start": "1306690",
    "end": "1312659"
  },
  {
    "text": "and the same kind of frameworks to have a global ignore on your machine the last",
    "start": "1312659",
    "end": "1318690"
  },
  {
    "text": "one of the get comfortable set of options",
    "start": "1318690",
    "end": "1323820"
  },
  {
    "text": "is always push new tags now you might be surprised to know that when you create a",
    "start": "1323820",
    "end": "1329639"
  },
  {
    "text": "tag which you probably do when you want to release a version of your software is",
    "start": "1329639",
    "end": "1335940"
  },
  {
    "text": "that new tags don't automatically get pushed where regular get push operation",
    "start": "1335940",
    "end": "1340970"
  },
  {
    "text": "if you want your tags to come along with the push you need to pass the follow",
    "start": "1340970",
    "end": "1346799"
  },
  {
    "text": "tags option now a chance that you're going to forget to do that are very high so by setting the push dot follow tags",
    "start": "1346799",
    "end": "1355080"
  },
  {
    "text": "option to true new tags are always going to automatically be pushed for you",
    "start": "1355080",
    "end": "1363799"
  },
  {
    "text": "switching gears there you go the second",
    "start": "1364129",
    "end": "1372840"
  },
  {
    "start": "1370000",
    "end": "1430000"
  },
  {
    "text": "group of advice that I want to give you when it comes to personal workflows in",
    "start": "1372840",
    "end": "1378090"
  },
  {
    "text": "order to be more efficient is to craft your history and what do I mean by that",
    "start": "1378090",
    "end": "1384330"
  },
  {
    "text": "I mean that you need to create committees that are readable and that",
    "start": "1384330",
    "end": "1392399"
  },
  {
    "text": "make your history easy to follow for the future generations and for a future",
    "start": "1392399",
    "end": "1398009"
  },
  {
    "text": "future of course now how do you create good commits you might wonder well good",
    "start": "1398009",
    "end": "1404909"
  },
  {
    "text": "commits have a set of properties that I call acid so I'm gonna go through this",
    "start": "1404909",
    "end": "1413659"
  },
  {
    "text": "what what acid commits are and by the end of it you're gonna have a pretty",
    "start": "1413659",
    "end": "1418950"
  },
  {
    "text": "good idea of how to craft your commits so that they make your history easy to",
    "start": "1418950",
    "end": "1425519"
  },
  {
    "text": "read and easy to follow so the a in acid stands for autonomous good commits",
    "start": "1425519",
    "end": "1433110"
  },
  {
    "text": "should make one logical change that is independent from other commits that",
    "start": "1433110",
    "end": "1439280"
  },
  {
    "text": "means that commits should be cohesive not only should he make one change but",
    "start": "1439280",
    "end": "1445650"
  },
  {
    "text": "all the changes inside a commit should be related to each other now how do you use git to make autonomous commit to my",
    "start": "1445650",
    "end": "1452400"
  },
  {
    "text": "wonder you use something called a paths commit now let me show you what I mean",
    "start": "1452400",
    "end": "1460220"
  },
  {
    "text": "let's open up our file again and you see",
    "start": "1460220",
    "end": "1467730"
  },
  {
    "text": "that right now let's say that I want to make two changes I want to for example",
    "start": "1467730",
    "end": "1478520"
  },
  {
    "text": "fix this bug that we saw before and also",
    "start": "1478520",
    "end": "1485400"
  },
  {
    "text": "I want to you see over here this is",
    "start": "1485400",
    "end": "1490980"
  },
  {
    "text": "telling me that this using statement is unused so you do a clean up I remove",
    "start": "1490980",
    "end": "1498150"
  },
  {
    "text": "this line and I then also want to fix the bug so now if I do a git if now I",
    "start": "1498150",
    "end": "1508710"
  },
  {
    "text": "made two changes I made one change that affects the functionality on your",
    "start": "1508710",
    "end": "1515100"
  },
  {
    "text": "software that you know didn't compile before but after this committee is going to compile and then I also made a clean",
    "start": "1515100",
    "end": "1521940"
  },
  {
    "text": "up that doesn't really affect the functionality of the code now these are two different changes two different",
    "start": "1521940",
    "end": "1528240"
  },
  {
    "text": "kinds of changes and they should be into two different commits but however I made",
    "start": "1528240",
    "end": "1536430"
  },
  {
    "text": "them into the same file so how can i split my changes into different commits",
    "start": "1536430",
    "end": "1543710"
  },
  {
    "text": "that's where the paths commit option comes in so what you do instead of",
    "start": "1543710",
    "end": "1549750"
  },
  {
    "text": "saying git add and then your file like you will normally do you add the - -",
    "start": "1549750",
    "end": "1557550"
  },
  {
    "text": "patch or - B option and what happens is that get is gonna see what changes you made and ask you",
    "start": "1557550",
    "end": "1565460"
  },
  {
    "text": "for each of them do you what well it's not it's not really asking you anything right because git is cryptic but what",
    "start": "1565460",
    "end": "1572510"
  },
  {
    "text": "this means is do you want to stage the sank that means do you want to add this",
    "start": "1572510",
    "end": "1579800"
  },
  {
    "text": "change to your next commit and then you have these options over here so you",
    "start": "1579800",
    "end": "1585560"
  },
  {
    "text": "might guess that Y means yes so do you want to add this yes what about the",
    "start": "1585560",
    "end": "1591980"
  },
  {
    "text": "other one by the way I also have white spacer so yeah let's keep it for the time being",
    "start": "1591980",
    "end": "1600590"
  },
  {
    "text": "so do you want to add this one I say no and what I have now is that I have a",
    "start": "1600590",
    "end": "1607010"
  },
  {
    "text": "split I have a split situation the same",
    "start": "1607010",
    "end": "1615950"
  },
  {
    "text": "file is partially committed and partially still Solly is partially added",
    "start": "1615950",
    "end": "1624020"
  },
  {
    "text": "to the stage area and partially still in my working directory how do you find out",
    "start": "1624020",
    "end": "1631400"
  },
  {
    "text": "what's in the staging area you say DIF cache you see what I'm about to commit",
    "start": "1631400",
    "end": "1637460"
  },
  {
    "text": "is just the cleanup and what I have in my working directory is the change that",
    "start": "1637460",
    "end": "1643250"
  },
  {
    "text": "I made the functionality so now I can just say git commit and I say removes",
    "start": "1643250",
    "end": "1648440"
  },
  {
    "text": "unused using and then I can just say",
    "start": "1648440",
    "end": "1654170"
  },
  {
    "text": "commit all fixes the compiler error so",
    "start": "1654170",
    "end": "1664310"
  },
  {
    "text": "now I split the two changes into two different commits using the patch patch patch commit the C stands for correct",
    "start": "1664310",
    "end": "1673340"
  },
  {
    "start": "1670000",
    "end": "1760000"
  },
  {
    "text": "good commit should not break the state of your project they're kind of",
    "start": "1673340",
    "end": "1680530"
  },
  {
    "text": "intuitive but by having committed that you know are correct allows you you know",
    "start": "1680530",
    "end": "1686870"
  },
  {
    "text": "to pick and choose commit from different branches and apply them to your own branch without being worried that you're",
    "start": "1686870",
    "end": "1692750"
  },
  {
    "text": "gonna break after now how do you how do you do how do you ensure that the water about to",
    "start": "1692750",
    "end": "1699420"
  },
  {
    "text": "change that what about to come it doesn't break the software well you have",
    "start": "1699420",
    "end": "1705510"
  },
  {
    "text": "two options the first one is to use safe keep index so let me just undo what I",
    "start": "1705510",
    "end": "1714540"
  },
  {
    "text": "just did now the last two commits and let's try it again so let's open up this",
    "start": "1714540",
    "end": "1723470"
  },
  {
    "text": "file now I'm and just me just gonna do",
    "start": "1723470",
    "end": "1730140"
  },
  {
    "text": "remove this and then I'm gonna make the same change over here now I have these",
    "start": "1730140",
    "end": "1739530"
  },
  {
    "text": "two two changes again and the let's again add the let's just add the first",
    "start": "1739530",
    "end": "1748770"
  },
  {
    "text": "one so we say add P program do you want",
    "start": "1748770",
    "end": "1754950"
  },
  {
    "text": "to commit this yes don't commit this no now what you want to do is that you want",
    "start": "1754950",
    "end": "1762330"
  },
  {
    "start": "1760000",
    "end": "2075000"
  },
  {
    "text": "to compile run your tests do everything that's necessary to ensure that the",
    "start": "1762330",
    "end": "1767970"
  },
  {
    "text": "change you made doesn't break your software however you just want to include what's in the index in the",
    "start": "1767970",
    "end": "1775020"
  },
  {
    "text": "staging area you don't want to include any other changes that are not about to",
    "start": "1775020",
    "end": "1780120"
  },
  {
    "text": "be committed so how do you do that you basically stash away everything that's",
    "start": "1780120",
    "end": "1788280"
  },
  {
    "text": "not in the index and keep what's in the index in the index so you say geese -",
    "start": "1788280",
    "end": "1795780"
  },
  {
    "text": "save keep index then I say fixes the",
    "start": "1795780",
    "end": "1800790"
  },
  {
    "text": "compiler error and what",
    "start": "1800790",
    "end": "1807560"
  },
  {
    "text": "right now is that you see this change is no longer in my working directory it's",
    "start": "1807560",
    "end": "1816140"
  },
  {
    "text": "gone what I have is I just have what I'm about to commit so now I can say dotnet",
    "start": "1816140",
    "end": "1826040"
  },
  {
    "text": "build for example order not run the tests and everything to make sure that",
    "start": "1826040",
    "end": "1831530"
  },
  {
    "text": "what I did doesn't break the software oh there it is of course is there error",
    "start": "1831530",
    "end": "1842210"
  },
  {
    "text": "from before so yeah actually let's do",
    "start": "1842210",
    "end": "1849950"
  },
  {
    "text": "the other one but you get the point let's do the no let's do the other",
    "start": "1849950",
    "end": "1858830"
  },
  {
    "text": "change let's do this",
    "start": "1858830",
    "end": "1864620"
  },
  {
    "text": "and that do this so I should have",
    "start": "1864620",
    "end": "1871250"
  },
  {
    "text": "committed to the other one so let's make these two changes we go line so let me",
    "start": "1871250",
    "end": "1886040"
  },
  {
    "text": "just do deep patch commit again well you say do you want to commit this no this",
    "start": "1886040",
    "end": "1891530"
  },
  {
    "text": "time yes this time now I have this split situation and I just want to check that",
    "start": "1891530",
    "end": "1900290"
  },
  {
    "text": "the error that I corrected works so let's toss stash save the message",
    "start": "1900290",
    "end": "1907340"
  },
  {
    "text": "now I'm gonna stash away the removes the unused using and keep the index perfect",
    "start": "1907340",
    "end": "1920980"
  },
  {
    "text": "now let me see what I have staged I have just the fixed",
    "start": "1920980",
    "end": "1926710"
  },
  {
    "text": "arrow over here and now I can verify",
    "start": "1926710",
    "end": "1931960"
  },
  {
    "text": "that what I have about to commit indeed fixes the problem and it does so I can",
    "start": "1931960",
    "end": "1939519"
  },
  {
    "text": "safely commit it fixes the compiler error and then I want to get back what I",
    "start": "1939519",
    "end": "1947169"
  },
  {
    "text": "stashed away so I say get stash pop and",
    "start": "1947169",
    "end": "1952929"
  },
  {
    "text": "now I get back the file that I had before and I can continue working moving",
    "start": "1952929",
    "end": "1963879"
  },
  {
    "text": "on how if you have a list of commits like this how do you make sure that what",
    "start": "1963879",
    "end": "1972879"
  },
  {
    "text": "you have every commit by itself doesn't break the software well what you can do",
    "start": "1972879",
    "end": "1978909"
  },
  {
    "text": "in that case is that you can again use the V base with the - - exact option and",
    "start": "1978909",
    "end": "1984879"
  },
  {
    "text": "what I will do is that that way let me just show you let's start a rebase from",
    "start": "1984879",
    "end": "1992200"
  },
  {
    "text": "the beginning of the the history in this case and you say that for each of those",
    "start": "1992200",
    "end": "1999279"
  },
  {
    "text": "commits you want to run a command what command you want to run you want to run the dotnet build for example and let's",
    "start": "1999279",
    "end": "2007679"
  },
  {
    "text": "just make it interactive so I can show you what it does you see that for each of the commits get is going to add the",
    "start": "2007679",
    "end": "2016590"
  },
  {
    "text": "command you've specified after each one so what what happens is that for each",
    "start": "2016590",
    "end": "2022830"
  },
  {
    "text": "individual commit it is going to try in this case to compile and see that the does this come in to break anything and",
    "start": "2022830",
    "end": "2028590"
  },
  {
    "text": "if it does is gonna stop and give you the chance to fix it so let's just save",
    "start": "2028590",
    "end": "2036240"
  },
  {
    "text": "this file and you see it goes back to the his in the history runs the command for the first one then runs the command",
    "start": "2036240",
    "end": "2043169"
  },
  {
    "text": "for the second one and here it breaks because this is is the commit that introduced the error so this at least",
    "start": "2043169",
    "end": "2051118"
  },
  {
    "text": "this point you see that indeed this is where the",
    "start": "2051119",
    "end": "2056450"
  },
  {
    "text": "the problem started so you can fix it",
    "start": "2056450",
    "end": "2062029"
  },
  {
    "text": "and then continue the rebase so this is a really good way to make sure that each",
    "start": "2062029",
    "end": "2069618"
  },
  {
    "text": "individual commit doesn't break the history of your sword or doesn't break",
    "start": "2069619",
    "end": "2074750"
  },
  {
    "text": "the state of your software the I in acid what does it mean means incremental now",
    "start": "2074750",
    "end": "2082760"
  },
  {
    "start": "2075000",
    "end": "2260000"
  },
  {
    "text": "if you have if working on a branch with a bunch of commits you want to make sure",
    "start": "2082760",
    "end": "2089929"
  },
  {
    "text": "that the order of those commits is a logical progression of your work in that",
    "start": "2089929",
    "end": "2095868"
  },
  {
    "text": "branch so that it makes sense what kind of changes you made and your",
    "start": "2095869",
    "end": "2103609"
  },
  {
    "text": "thought process during those changes now what how do you do that well you already",
    "start": "2103609",
    "end": "2109279"
  },
  {
    "text": "saw it right now you make an interactive rebase so for example let's say that I",
    "start": "2109279",
    "end": "2115579"
  },
  {
    "text": "am I want to make sure that the order of the commits that I have in my branch",
    "start": "2115579",
    "end": "2122410"
  },
  {
    "text": "reflects my my design process my thought process I say interactive in this case",
    "start": "2122410",
    "end": "2129890"
  },
  {
    "text": "I'm going to start from the beginning and once I have this list of commits that are in my brain in my branch I can",
    "start": "2129890",
    "end": "2138049"
  },
  {
    "text": "for example you know reorder them I can squash commit in to each other so",
    "start": "2138049",
    "end": "2145369"
  },
  {
    "text": "that they become one if I have a bunch of temporary commits in this case I have",
    "start": "2145369",
    "end": "2153109"
  },
  {
    "text": "this committee over here that fix is a compiler error that was actually",
    "start": "2153109",
    "end": "2159319"
  },
  {
    "text": "introduced over here so I don't know if",
    "start": "2159319",
    "end": "2165109"
  },
  {
    "text": "I haven't shared those commits yet I haven't pushed them I have a I have the",
    "start": "2165109",
    "end": "2170390"
  },
  {
    "text": "chance to fix this history so that this one appears in the right order or rather",
    "start": "2170390",
    "end": "2176569"
  },
  {
    "text": "it's included into that one so what you",
    "start": "2176569",
    "end": "2181640"
  },
  {
    "text": "can do is that you take this one and you move it right below the committee want",
    "start": "2181640",
    "end": "2187970"
  },
  {
    "text": "to squash it into then you change the option to from pick to fix up and what this will do is that",
    "start": "2187970",
    "end": "2194779"
  },
  {
    "text": "the gate will basically take this commit and include it into that one then you",
    "start": "2194779",
    "end": "2200809"
  },
  {
    "text": "save and hopefully you don't get a merge conflict during the process that's",
    "start": "2200809",
    "end": "2211249"
  },
  {
    "text": "because I've changed the other one the deadline before anyway one should well",
    "start": "2211249",
    "end": "2218150"
  },
  {
    "text": "let no I don't have time to fix this merge conflict once you reorder your",
    "start": "2218150",
    "end": "2224630"
  },
  {
    "text": "commit they will make more sense for",
    "start": "2224630",
    "end": "2230029"
  },
  {
    "text": "everybody as to to look at D D the last one stands for documented and what this",
    "start": "2230029",
    "end": "2237499"
  },
  {
    "text": "means is that a commit should clearly state the state serving school should",
    "start": "2237499",
    "end": "2244339"
  },
  {
    "text": "clearly state the change that it made and provide as much information as possible about the context in which the",
    "start": "2244339",
    "end": "2251660"
  },
  {
    "text": "change was made and of course that's the commit message that you that you specify",
    "start": "2251660",
    "end": "2259209"
  },
  {
    "text": "now the third category of tips that I",
    "start": "2259209",
    "end": "2265819"
  },
  {
    "start": "2260000",
    "end": "2437000"
  },
  {
    "text": "want to share with you about personal workflows is to automate and you have already seen a bit of it and automate",
    "start": "2265819",
    "end": "2274339"
  },
  {
    "text": "means let it do the work for you basically now you know about aliases in",
    "start": "2274339",
    "end": "2282339"
  },
  {
    "text": "Inc it you can associate a in alias to a command and over a command and a",
    "start": "2282339",
    "end": "2289459"
  },
  {
    "text": "combination of options for example I have an alias that I use all the time",
    "start": "2289459",
    "end": "2294999"
  },
  {
    "text": "called LG and what this does is that it runs git log and then it basically",
    "start": "2294999",
    "end": "2302989"
  },
  {
    "text": "beautifies my history by including only certain information about a commit and",
    "start": "2302989",
    "end": "2310309"
  },
  {
    "text": "then coloring it with different colors so when I say get algae I get a nice and",
    "start": "2310309",
    "end": "2317059"
  },
  {
    "text": "tidy history now you might be surprised",
    "start": "2317059",
    "end": "2322099"
  },
  {
    "text": "to know that you can also associate shell functions to aliases for example one that I picked up",
    "start": "2322099",
    "end": "2328730"
  },
  {
    "text": "years ago is one called undo so let me show you how it looks like you say alias",
    "start": "2328730",
    "end": "2334460"
  },
  {
    "text": "dot undo in this case and you see I'm basically defining a a function you can",
    "start": "2334460",
    "end": "2344960"
  },
  {
    "text": "call it anything well first you say that is you start your alias with a let me see there you",
    "start": "2344960",
    "end": "2354620"
  },
  {
    "text": "go Oh wrong one you start your alias with an exclamation mark which means that",
    "start": "2354620",
    "end": "2360470"
  },
  {
    "text": "whatever comes afterwards should be evaluated as a shell function then I'm",
    "start": "2360470",
    "end": "2365870"
  },
  {
    "text": "defining a shell function called F could be called anything and the body of the function is a git command which is",
    "start": "2365870",
    "end": "2375430"
  },
  {
    "text": "accepting a parameter that I pass from the command line and at the end of the",
    "start": "2375430",
    "end": "2382100"
  },
  {
    "text": "alias I just invoked a function so what aliased functions allow me to do is they",
    "start": "2382100",
    "end": "2389330"
  },
  {
    "text": "allow me to the function function that can take parameters and associate them to get aliases so in this case the undo",
    "start": "2389330",
    "end": "2397880"
  },
  {
    "text": "it's gonna reset my the head reference",
    "start": "2397880",
    "end": "2403520"
  },
  {
    "text": "to a certain number of commits backwards into in history so for example if I have",
    "start": "2403520",
    "end": "2411050"
  },
  {
    "text": "this and I want to undo the last one I can say git undo 1 and now you see that",
    "start": "2411050",
    "end": "2421160"
  },
  {
    "text": "I have effectively removed remove this",
    "start": "2421160",
    "end": "2426530"
  },
  {
    "text": "commit and went back into the other one so alias function are a quick way to be",
    "start": "2426530",
    "end": "2433340"
  },
  {
    "text": "really effective we get from the command line get",
    "start": "2433340",
    "end": "2439460"
  },
  {
    "start": "2437000",
    "end": "2787000"
  },
  {
    "text": "also a lot of automatic features you have seen that we can automatically push",
    "start": "2439460",
    "end": "2445160"
  },
  {
    "text": "new tags for example so I call this out of this and out of that how to stash",
    "start": "2445160",
    "end": "2451550"
  },
  {
    "text": "what does it do if you have the files that are modified in a word key directory and you start a rebase it is",
    "start": "2451550",
    "end": "2459140"
  },
  {
    "text": "gonna stop you and say ah I can't rebase because you have uncommitted changes well what outer stars does is that",
    "start": "2459140",
    "end": "2466940"
  },
  {
    "text": "whatever you have in your working directory it is going to automatically stash away do the rebase and then",
    "start": "2466940",
    "end": "2474109"
  },
  {
    "text": "unstitch it afterwards for you and then",
    "start": "2474109",
    "end": "2479930"
  },
  {
    "text": "you have something called Auto squash where this one I really want to show you",
    "start": "2479930",
    "end": "2485109"
  },
  {
    "text": "you saw before the squash operation that we did where we move the one commit",
    "start": "2485109",
    "end": "2494599"
  },
  {
    "text": "underneath another one so you can also",
    "start": "2494599",
    "end": "2501170"
  },
  {
    "text": "do that quickly instead of doing afterwards instead of doing the work yourself let me show you how it works so",
    "start": "2501170",
    "end": "2507829"
  },
  {
    "text": "here actually let's get rid of this so",
    "start": "2507829",
    "end": "2514040"
  },
  {
    "text": "that hopefully we don't get a merge conflict and then we also fix the",
    "start": "2514040",
    "end": "2519829"
  },
  {
    "text": "problem over here so now I'm gonna stage",
    "start": "2519829",
    "end": "2526790"
  },
  {
    "text": "the entire file now if I look at the history I know that this what I'm about",
    "start": "2526790",
    "end": "2533270"
  },
  {
    "text": "to commit now I want to later squash it into this one because that's the commit",
    "start": "2533270",
    "end": "2541309"
  },
  {
    "text": "that introduced the error so what I can do is that instead of just making a",
    "start": "2541309",
    "end": "2546470"
  },
  {
    "text": "regular commit I'm gonna say commit fix up and then I have to tell git okay",
    "start": "2546470",
    "end": "2552049"
  },
  {
    "text": "which commit are you going to squash this into later well I want to squash it",
    "start": "2552049",
    "end": "2558109"
  },
  {
    "text": "into the commit whose message contains the word executable and I'm using this",
    "start": "2558109",
    "end": "2565940"
  },
  {
    "text": "special syntax over here",
    "start": "2565940",
    "end": "2569500"
  },
  {
    "text": "to say squash it into a commit that contains whatever whose message contains",
    "start": "2572120",
    "end": "2578220"
  },
  {
    "text": "the word that I'm specifying afterwards so when I do that it is gonna commit my",
    "start": "2578220",
    "end": "2584640"
  },
  {
    "text": "changes and add the fix up exclamation mark at the beginning of the commit",
    "start": "2584640",
    "end": "2590460"
  },
  {
    "text": "message and then the commit message of the committed that's gonna be squashed",
    "start": "2590460",
    "end": "2595560"
  },
  {
    "text": "into later so what this means is that when I do a rebase let me say git rebase",
    "start": "2595560",
    "end": "2604350"
  },
  {
    "text": "interactive you see that git has",
    "start": "2604350",
    "end": "2609600"
  },
  {
    "text": "automatically moved it to under the right commit because it has matched the",
    "start": "2609600",
    "end": "2615990"
  },
  {
    "text": "commit message and it is really useful if you want to fix a bunch of commits that happened before you can just you",
    "start": "2615990",
    "end": "2623400"
  },
  {
    "text": "know commit away and use the option that I showed you and then when you do a",
    "start": "2623400",
    "end": "2628740"
  },
  {
    "text": "rebase it is going to automatically move the commits in the right spot all right",
    "start": "2628740",
    "end": "2639860"
  },
  {
    "text": "the last one of this is use client client side hooks to automate a part of",
    "start": "2641270",
    "end": "2648120"
  },
  {
    "text": "your workflow so in every git repository there is a directory called git and",
    "start": "2648120",
    "end": "2655260"
  },
  {
    "text": "underneath there is a technical hooks and these are all shell scripts that are",
    "start": "2655260",
    "end": "2661680"
  },
  {
    "text": "gonna fire at certain points in the history sorry that they're gonna fight when certain",
    "start": "2661680",
    "end": "2667590"
  },
  {
    "text": "things happen in a repository for example one commits one event that is",
    "start": "2667590",
    "end": "2672630"
  },
  {
    "text": "very interesting is the commit message event this is gonna fire whenever you",
    "start": "2672630",
    "end": "2680730"
  },
  {
    "text": "are about to create a commit and at this point you can have scripts that run at",
    "start": "2680730",
    "end": "2686880"
  },
  {
    "text": "certain point during the when you're using it and for example the commit",
    "start": "2686880",
    "end": "2691950"
  },
  {
    "text": "message is interesting because you can use it to evaluate the commit message",
    "start": "2691950",
    "end": "2697260"
  },
  {
    "text": "that you are about to to specify and to make sure that it follows the convention",
    "start": "2697260",
    "end": "2702750"
  },
  {
    "text": "now in this case I have a script defined there in commit",
    "start": "2702750",
    "end": "2709469"
  },
  {
    "text": "message that basically what it does is that it evaluates the commit message and",
    "start": "2709469",
    "end": "2716249"
  },
  {
    "text": "makes sure that the first line is not longer than 51 characters or 50",
    "start": "2716249",
    "end": "2723869"
  },
  {
    "text": "characters because that's how a well-formed commit message should look like and if it doesn't it's gonna give",
    "start": "2723869",
    "end": "2730619"
  },
  {
    "text": "me a warning and a chance to modify it",
    "start": "2730619",
    "end": "2735528"
  },
  {
    "text": "so let's try it out let's do let's just",
    "start": "2735859",
    "end": "2742859"
  },
  {
    "text": "do a an empty commit just to demonstrate and I'm gonna say this commit message is",
    "start": "2742859",
    "end": "2752670"
  },
  {
    "text": "too long definitely longer than 50",
    "start": "2752670",
    "end": "2759239"
  },
  {
    "text": "characters and here I'm getting the the event the commit message script as fired",
    "start": "2759239",
    "end": "2765269"
  },
  {
    "text": "and I'm getting the warning that says no the first commit the first line in your",
    "start": "2765269",
    "end": "2771089"
  },
  {
    "text": "commit message should be 50 but it's 63 do you want to modify it or do you just want to continue and this is a excellent",
    "start": "2771089",
    "end": "2780779"
  },
  {
    "text": "way to automate portions of your workflow through scripting and that's",
    "start": "2780779",
    "end": "2788630"
  },
  {
    "start": "2787000",
    "end": "2830000"
  },
  {
    "text": "that's it for the personal workflows let's move on to team workflows and I",
    "start": "2788630",
    "end": "2798329"
  },
  {
    "text": "have three tips for you here as well so the first one is branching now I'm not",
    "start": "2798329",
    "end": "2806789"
  },
  {
    "text": "gonna give you advice on which of the many kind of workflows you should use in",
    "start": "2806789",
    "end": "2813449"
  },
  {
    "text": "your project git flow github flow you name it flow what instead I'm gonna",
    "start": "2813449",
    "end": "2820289"
  },
  {
    "text": "tell you is things you can think about in your team when you are deciding and",
    "start": "2820289",
    "end": "2826079"
  },
  {
    "text": "when you are evaluating which kind of flow you want to use and the rules for",
    "start": "2826079",
    "end": "2831569"
  },
  {
    "start": "2830000",
    "end": "2875000"
  },
  {
    "text": "evaluating workflows are very simple be aware of the different kinds of",
    "start": "2831569",
    "end": "2838090"
  },
  {
    "text": "branches that exist now what do I mean by that in guitar essentially two kinds",
    "start": "2838090",
    "end": "2844210"
  },
  {
    "text": "of branches you can create you can create the long-running branches or you",
    "start": "2844210",
    "end": "2849790"
  },
  {
    "text": "can create topic branches now let's take a let's take a look at an example a",
    "start": "2849790",
    "end": "2854970"
  },
  {
    "text": "long-running branch every repository has at least one long-running branch and",
    "start": "2854970",
    "end": "2860860"
  },
  {
    "text": "that's of course master that's the branch that exists for as long as the",
    "start": "2860860",
    "end": "2866860"
  },
  {
    "text": "project itself exists that's why it's called long run and usually it contains",
    "start": "2866860",
    "end": "2872500"
  },
  {
    "text": "the work from multiple contributors if instead you want to do some specialized",
    "start": "2872500",
    "end": "2878590"
  },
  {
    "start": "2875000",
    "end": "2909000"
  },
  {
    "text": "work for example let's say that you're working on a feature that is a branch",
    "start": "2878590",
    "end": "2885970"
  },
  {
    "text": "that's gonna exist for a short period of time and that usually contains the work",
    "start": "2885970",
    "end": "2891790"
  },
  {
    "text": "of one contributor and it's focused on a species specific task that's why it's",
    "start": "2891790",
    "end": "2897940"
  },
  {
    "text": "called a topic branch topic branches usually eventually get merged into the",
    "start": "2897940",
    "end": "2903910"
  },
  {
    "text": "long-running branch and then they disappear so they are short-lived when I",
    "start": "2903910",
    "end": "2910510"
  },
  {
    "start": "2909000",
    "end": "2982000"
  },
  {
    "text": "told you that there are two categories of branches it was not completely true",
    "start": "2910510",
    "end": "2916869"
  },
  {
    "text": "there are actually two more kinds of branches you can create you can create",
    "start": "2916869",
    "end": "2922480"
  },
  {
    "text": "public branches and you can create private branches now git is a",
    "start": "2922480",
    "end": "2927820"
  },
  {
    "text": "distributed source control system which means that every repository is equal but",
    "start": "2927820",
    "end": "2933250"
  },
  {
    "text": "we all agree to have one copy one of these repositories is deemed the the",
    "start": "2933250",
    "end": "2940480"
  },
  {
    "text": "canonical one and that's usually gonna be hosted on a central server for example github or Azure DevOps now a",
    "start": "2940480",
    "end": "2949210"
  },
  {
    "text": "branch that exists in a shared repo is technically accessible by anyone but on",
    "start": "2949210",
    "end": "2958119"
  },
  {
    "text": "and instead the branches that exists on your local repo that is on your local",
    "start": "2958119",
    "end": "2964270"
  },
  {
    "text": "machine they are all accessible by you so a branch that's on a shared repo",
    "start": "2964270",
    "end": "2970150"
  },
  {
    "text": "after a sample master it's a public branch and a branch that exists only on",
    "start": "2970150",
    "end": "2976029"
  },
  {
    "text": "your local machine for example you are working on a feature just by yourself that's a private branch so to put it all",
    "start": "2976029",
    "end": "2984369"
  },
  {
    "start": "2982000",
    "end": "3020000"
  },
  {
    "text": "together you have long-running branches and long-running branches are usually",
    "start": "2984369",
    "end": "2990339"
  },
  {
    "text": "public by the same token topic branches are usually private however this is what",
    "start": "2990339",
    "end": "2998559"
  },
  {
    "text": "usually happens but it's not the only option you can have long-running rabid",
    "start": "2998559",
    "end": "3004890"
  },
  {
    "text": "branches for example you have an idea you have an experiment you want to try out however you don't want to share that",
    "start": "3004890",
    "end": "3011729"
  },
  {
    "text": "branch with anyone but you'll keep it you keep it around for a long time that is technically a private long-running",
    "start": "3011729",
    "end": "3018900"
  },
  {
    "text": "branch by the same token if you have multiple people in your team working on",
    "start": "3018900",
    "end": "3024599"
  },
  {
    "start": "3020000",
    "end": "3095000"
  },
  {
    "text": "for example on a user story and that user story is being worked on in a topic",
    "start": "3024599",
    "end": "3031410"
  },
  {
    "text": "branch a focused branch only on that feature then you're gonna have any public topic branch however not all",
    "start": "3031410",
    "end": "3039660"
  },
  {
    "text": "combinations are equally good long running public branches those are okay",
    "start": "3039660",
    "end": "3045900"
  },
  {
    "text": "actually those are necessary in the case of master topic branches that are private are also okay however keeping a",
    "start": "3045900",
    "end": "3054529"
  },
  {
    "text": "long-running branch that although only you have access to keeping it around for",
    "start": "3054529",
    "end": "3061319"
  },
  {
    "text": "a long time is a problem because the longer you keep the branch around the harder is gonna be to keep it in sync",
    "start": "3061319",
    "end": "3067949"
  },
  {
    "text": "with the main branch that's being shared by the same token having topic branches",
    "start": "3067949",
    "end": "3075509"
  },
  {
    "text": "that are focused on solving a particular problem and keeping them public that is",
    "start": "3075509",
    "end": "3080759"
  },
  {
    "text": "multiple people are gonna contribute to that it's very easy to have people step",
    "start": "3080759",
    "end": "3086999"
  },
  {
    "text": "on each other's toes and you end up with merge conflicts and stuff like that so that's not a combination that you want",
    "start": "3086999",
    "end": "3093420"
  },
  {
    "text": "to have so that means that long-running public branches",
    "start": "3093420",
    "end": "3100000"
  },
  {
    "start": "3095000",
    "end": "3126000"
  },
  {
    "text": "you should try to be conservative with them don't have too many long-running",
    "start": "3100000",
    "end": "3105190"
  },
  {
    "text": "branches and don't have too many public branches keep that number of branches low on the other hand topic branches and",
    "start": "3105190",
    "end": "3113680"
  },
  {
    "text": "primes is that only you have use them as much as possible because",
    "start": "3113680",
    "end": "3118870"
  },
  {
    "text": "that's what gift is about branching is cheap and so you should use it to your",
    "start": "3118870",
    "end": "3124300"
  },
  {
    "text": "own advantage now the other tip is about merging now",
    "start": "3124300",
    "end": "3132700"
  },
  {
    "start": "3126000",
    "end": "3231000"
  },
  {
    "text": "that you know that there are different kinds of branches you should let the kind of branches you want to merge you",
    "start": "3132700",
    "end": "3138820"
  },
  {
    "text": "should let them decide how they want to be merged so you have to kind of merges",
    "start": "3138820",
    "end": "3146470"
  },
  {
    "text": "you have the exo called through merge and you have the rebase through merge of course is when an actual merge",
    "start": "3146470",
    "end": "3153520"
  },
  {
    "text": "committees being created to tie two different lines of history and a rebase",
    "start": "3153520",
    "end": "3158800"
  },
  {
    "text": "is when you are changing the base of a branch and then merging it to a phosphor",
    "start": "3158800",
    "end": "3165280"
  },
  {
    "text": "let me show you what I mean a public branch that's gonna be merged into",
    "start": "3165280",
    "end": "3172060"
  },
  {
    "text": "another public branch in that case you want to have a merge commit between them",
    "start": "3172060",
    "end": "3177430"
  },
  {
    "text": "because you want to make it really visible when to public branches have merged together if on one doll head you",
    "start": "3177430",
    "end": "3185020"
  },
  {
    "text": "have a public branch that you want to merge into a private branch for example you are working on a feature and you",
    "start": "3185020",
    "end": "3191620"
  },
  {
    "text": "want to bring in the latest commits from master into your own feature branch in",
    "start": "3191620",
    "end": "3198040"
  },
  {
    "text": "that case you don't want to have a merge commit because that merge commit is only interesting to you nobody else is",
    "start": "3198040",
    "end": "3205270"
  },
  {
    "text": "interested in that since you are merging into a private branch in that case you want to do a rebase for example a public",
    "start": "3205270",
    "end": "3214840"
  },
  {
    "text": "app an example of this with a pull request the get merged into master you",
    "start": "3214840",
    "end": "3220060"
  },
  {
    "text": "want that to appear as a merge commit or if you are a merging master into your",
    "start": "3220060",
    "end": "3225640"
  },
  {
    "text": "own work-in-progress branch you want to have that as a rebase why is that let's",
    "start": "3225640",
    "end": "3231670"
  },
  {
    "text": "say that you have a master branch like this that is public of course and then you have a pull request that is also public",
    "start": "3231670",
    "end": "3239789"
  },
  {
    "text": "because it has to be cool reviewed and you want to then merge the pull request",
    "start": "3239789",
    "end": "3246630"
  },
  {
    "text": "into master now the fact that you made it as a merge commit one you later",
    "start": "3246630",
    "end": "3254670"
  },
  {
    "text": "delete the pull request branch because that's been merged if it turns out that there is a problem with that pull",
    "start": "3254670",
    "end": "3261750"
  },
  {
    "text": "request then it's easy because you can just revert the merge commit and you",
    "start": "3261750",
    "end": "3267720"
  },
  {
    "text": "have automatically undo whatever came in through that merge commit so in this",
    "start": "3267720",
    "end": "3275280"
  },
  {
    "text": "case having a visible merge commit makes it easy to undo whatever was done in",
    "start": "3275280",
    "end": "3280530"
  },
  {
    "text": "that pull request branch with a single in reverts reverted merge commit which",
    "start": "3280530",
    "end": "3286740"
  },
  {
    "text": "in this case is set as represented with the W because W is the opposite of an M",
    "start": "3286740",
    "end": "3294170"
  },
  {
    "start": "3294000",
    "end": "3329000"
  },
  {
    "text": "if instead you had rebased that is you have rebase your pull request branch into master and that you",
    "start": "3294170",
    "end": "3300960"
  },
  {
    "text": "move master forward if you had done that and then it turns out that there is a",
    "start": "3300960",
    "end": "3306480"
  },
  {
    "text": "problem you have to evaluate each commit individually to find out which of them",
    "start": "3306480",
    "end": "3313319"
  },
  {
    "text": "introduced the problem and if there are a bunch of them that's gonna be a problematic to to find",
    "start": "3313319",
    "end": "3321869"
  },
  {
    "text": "and if must the master branch has moved forward is going to be even trickier to",
    "start": "3321869",
    "end": "3327059"
  },
  {
    "text": "undo them by the same token when you",
    "start": "3327059",
    "end": "3332460"
  },
  {
    "start": "3329000",
    "end": "3349000"
  },
  {
    "text": "have a private branch that is a work in progress and you want to keep it updated with whatever happens in master if you",
    "start": "3332460",
    "end": "3340470"
  },
  {
    "text": "had done if you had done it through a regular merge commit you have a public",
    "start": "3340470",
    "end": "3345960"
  },
  {
    "text": "and a private branch then let's say that you have immersed",
    "start": "3345960",
    "end": "3352350"
  },
  {
    "start": "3349000",
    "end": "3397000"
  },
  {
    "text": "whatever came into master into your own private topic branch to immerse commit",
    "start": "3352350",
    "end": "3357650"
  },
  {
    "text": "what happens then later when you want to merge your topic branch into master",
    "start": "3357650",
    "end": "3363480"
  },
  {
    "text": "again and what happens is that you have emerged commit then again because you're",
    "start": "3363480",
    "end": "3369360"
  },
  {
    "text": "merging private into public and you see at this point you have a double merge",
    "start": "3369360",
    "end": "3375090"
  },
  {
    "text": "and if you do this enough your history is gonna look like this and there is",
    "start": "3375090",
    "end": "3381240"
  },
  {
    "text": "actually a name for this kind of history this is called the Guitar Hero history",
    "start": "3381240",
    "end": "3386430"
  },
  {
    "text": "why because if you look at it it reminds a lot of how how the strings look like",
    "start": "3386430",
    "end": "3393810"
  },
  {
    "text": "in Guitar Hero or get hero so you don't want to do that the third and final",
    "start": "3393810",
    "end": "3400770"
  },
  {
    "text": "thing to think about in your team in your team workflows has to do with",
    "start": "3400770",
    "end": "3407580"
  },
  {
    "text": "releasing software so now that you know that there are different kinds of branches and now that you know the rules",
    "start": "3407580",
    "end": "3413760"
  },
  {
    "text": "for merging these kinds of branches now the third thing to think about is map",
    "start": "3413760",
    "end": "3421110"
  },
  {
    "text": "these branches to your release environments in other words know where your branches are going what do I mean",
    "start": "3421110",
    "end": "3428850"
  },
  {
    "text": "by that so let's say again that I have this master branch and then I have another long-running branch which is",
    "start": "3428850",
    "end": "3435540"
  },
  {
    "text": "called develop now you want to map these two branches to different environments",
    "start": "3435540",
    "end": "3440850"
  },
  {
    "text": "so for example the develop we're gonna deploy whatever is in developed to a",
    "start": "3440850",
    "end": "3446760"
  },
  {
    "text": "test or a QA environment where it's going to be verified whatever it is he",
    "start": "3446760",
    "end": "3452520"
  },
  {
    "text": "mastered however once we merge that work into master we are going to put we're",
    "start": "3452520",
    "end": "3459270"
  },
  {
    "text": "gonna push that into production so that it can be used by the customers so these keeps you have nice way to map",
    "start": "3459270",
    "end": "3467580"
  },
  {
    "text": "to know what the changes that you are making in a certain branch in what",
    "start": "3467580",
    "end": "3472650"
  },
  {
    "text": "environment are they going to be deployed into and you can also do different the promised strategies for",
    "start": "3472650",
    "end": "3479670"
  },
  {
    "text": "example in a develop branch where you're deploying to a test or QA you can do that on every commit",
    "start": "3479670",
    "end": "3485630"
  },
  {
    "text": "automatically and that will be like that's called continuous deployment will",
    "start": "3485630",
    "end": "3490980"
  },
  {
    "text": "automatically continuous in deploying your software to attest QA environment for production you can do that for",
    "start": "3490980",
    "end": "3498000"
  },
  {
    "text": "production as well however since it's riskier you maybe want to have that as a",
    "start": "3498000",
    "end": "3505080"
  },
  {
    "text": "an automatic process but that is manually triggered in that case you want",
    "start": "3505080",
    "end": "3510480"
  },
  {
    "text": "to do continuous delivery that is whatever is the master is always deployable at any time however the",
    "start": "3510480",
    "end": "3517109"
  },
  {
    "text": "actual deployment process is triggered through an explicit and intentional",
    "start": "3517109",
    "end": "3522590"
  },
  {
    "text": "action instead of having it automatically so let's wrap this up with",
    "start": "3522590",
    "end": "3529940"
  },
  {
    "start": "3526000",
    "end": "3600000"
  },
  {
    "text": "the one minute to spare we talked about how effective teams use git and how they",
    "start": "3529940",
    "end": "3538410"
  },
  {
    "text": "use them in two categories first when it comes to personal workflows get",
    "start": "3538410",
    "end": "3543900"
  },
  {
    "text": "comfortable and configure get so that it's a more pleasant tool to use may",
    "start": "3543900",
    "end": "3549330"
  },
  {
    "text": "take care of crafting your history by following the rules of acid autonomous",
    "start": "3549330",
    "end": "3554910"
  },
  {
    "text": "correct incremental and documented so that your history is readable and the",
    "start": "3554910",
    "end": "3561119"
  },
  {
    "text": "third one is use git feature to automate as much as possible of your workflow so",
    "start": "3561119",
    "end": "3567089"
  },
  {
    "text": "that you have less work to do and it can catch any errors that you that might happen the second category of things to",
    "start": "3567089",
    "end": "3575910"
  },
  {
    "text": "think about has to do with teams team workflows stuff that you do in",
    "start": "3575910",
    "end": "3581160"
  },
  {
    "text": "collaboration with others and this has to do the first category of tips was be",
    "start": "3581160",
    "end": "3587640"
  },
  {
    "text": "aware of the kinds of branches that there are and be aware of how they",
    "start": "3587640",
    "end": "3593760"
  },
  {
    "text": "should be merged together and those two rules to those those two things if you",
    "start": "3593760",
    "end": "3600839"
  },
  {
    "text": "think about them they're gonna guide you when you're evaluating different kinds of workflows to use in your team the",
    "start": "3600839",
    "end": "3609420"
  },
  {
    "text": "third one is be aware of where the code that's in every branch is going to end",
    "start": "3609420",
    "end": "3615359"
  },
  {
    "text": "up in and have a clear map in between branches and your deployment",
    "start": "3615359",
    "end": "3620430"
  },
  {
    "text": "environments and with that I want to just let you know that what I surely",
    "start": "3620430",
    "end": "3626099"
  },
  {
    "text": "today there is much more than than that that you can do with git and I have a",
    "start": "3626099",
    "end": "3631500"
  },
  {
    "text": "precise course out that's called advanced key tips and tricks where I cover these things and much more so",
    "start": "3631500",
    "end": "3638910"
  },
  {
    "text": "there is the link over there and also I want to remind you that in for the month of April you can watch as much",
    "start": "3638910",
    "end": "3645720"
  },
  {
    "text": "Pluralsight as want as you want for free so there is that and with that I want to",
    "start": "3645720",
    "end": "3651990"
  },
  {
    "text": "say thank you for watching and enjoy the rest of the conference",
    "start": "3651990",
    "end": "3657950"
  },
  {
    "text": "you",
    "start": "3658150",
    "end": "3660210"
  },
  {
    "text": "you",
    "start": "3663880",
    "end": "3665940"
  },
  {
    "text": "hate me again I notice that there are a couple of questions in a slider so if",
    "start": "3688170",
    "end": "3695980"
  },
  {
    "text": "you want to skip the break and just hang hang around for the for the answer so",
    "start": "3695980",
    "end": "3702490"
  },
  {
    "text": "let me see so anonymous says without squash and using the fix-up when",
    "start": "3702490",
    "end": "3709240"
  },
  {
    "text": "committing what if multiple commits match the word you specify well in that",
    "start": "3709240",
    "end": "3715900"
  },
  {
    "text": "case what get will do is that it will automatically move them underneath the",
    "start": "3715900",
    "end": "3721690"
  },
  {
    "text": "right commit but it's gonna wait wait I misinterpreted what if multiple commits",
    "start": "3721690",
    "end": "3728320"
  },
  {
    "text": "match the words specified yeah in that case it was gonna move it to the first one it matches going backwards from from",
    "start": "3728320",
    "end": "3737770"
  },
  {
    "text": "the latest commit that you made that in contains the fix up exclamation mark in the in the message it is gonna match",
    "start": "3737770",
    "end": "3744820"
  },
  {
    "text": "backwards the first one it matches is gonna move it underneath that one so the",
    "start": "3744820",
    "end": "3754570"
  },
  {
    "text": "next one is also anonymous any recommendation on how to automatically",
    "start": "3754570",
    "end": "3761320"
  },
  {
    "text": "update the build version numbers in projects before doing a commit yes I",
    "start": "3761320",
    "end": "3767650"
  },
  {
    "text": "have a recommendation there is a tool that's up on github called git version",
    "start": "3767650",
    "end": "3773320"
  },
  {
    "text": "and what is get version does it ties very well into the discussions I had",
    "start": "3773320",
    "end": "3780400"
  },
  {
    "text": "about different kinds of branches and what what environment they're deployed",
    "start": "3780400",
    "end": "3785620"
  },
  {
    "text": "in to what get version does is that it allows you to define rules that based on",
    "start": "3785620",
    "end": "3792190"
  },
  {
    "text": "the name of the branch are on and by looking at how many commits have",
    "start": "3792190",
    "end": "3797500"
  },
  {
    "text": "happened in that branch since the last tag for example it get version is gonna",
    "start": "3797500",
    "end": "3803140"
  },
  {
    "text": "automatically generate a version number for you so for example let's say that you are in the develop branch and you",
    "start": "3803140",
    "end": "3809620"
  },
  {
    "text": "run git version on the latest commit get version is gonna generate a pre-release",
    "start": "3809620",
    "end": "3815350"
  },
  {
    "text": "version number following the rules of cember because you are in the develop branch and whatever",
    "start": "3815350",
    "end": "3821300"
  },
  {
    "text": "having developed is going to end up in the QA so it's a preview by the same token if you run git version on the",
    "start": "3821300",
    "end": "3828020"
  },
  {
    "text": "master branch that's a production branch and then get version is gonna generate another",
    "start": "3828020",
    "end": "3834470"
  },
  {
    "text": "preview but a stable version number so git version is the one I recommend to",
    "start": "3834470",
    "end": "3841330"
  },
  {
    "text": "automatically generate semver version numbers based on the kind of branch that",
    "start": "3841330",
    "end": "3847070"
  },
  {
    "text": "you are on yeah that's it thank you",
    "start": "3847070",
    "end": "3853490"
  },
  {
    "text": "thank you again for watching and I hope you enjoy the rest of the day",
    "start": "3853490",
    "end": "3858700"
  }
]