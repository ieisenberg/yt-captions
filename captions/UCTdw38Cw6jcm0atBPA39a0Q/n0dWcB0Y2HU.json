[
  {
    "text": "good afternoon last session for today so",
    "start": "10320",
    "end": "18009"
  },
  {
    "text": "I'm Michele the Rue Bustamante and I'm about to talk really fast for one hour cuz we're gonna cover six platforms and",
    "start": "18009",
    "end": "24099"
  },
  {
    "text": "talk about orchestration and scheduling and whether or what the features are that you might care about so I called",
    "start": "24099",
    "end": "30880"
  },
  {
    "text": "this embracing docker simplicity and harnessing platform flour mostly because there are ways that you can leverage",
    "start": "30880",
    "end": "37570"
  },
  {
    "text": "docker in deployment scenarios that don't involve our castration and then there are things that are castration",
    "start": "37570",
    "end": "42970"
  },
  {
    "text": "gives you platforms give you that you might find advantageous in certain solutions that's usually in larger scale",
    "start": "42970",
    "end": "50890"
  },
  {
    "text": "solutions in particular and in those cases you need to invest in more so we want to get a taste of what are those",
    "start": "50890",
    "end": "57070"
  },
  {
    "text": "orchestration platforms do and at the same time maybe see a few different platforms along the way so I will",
    "start": "57070",
    "end": "64989"
  },
  {
    "text": "proceed to frequently asked questions that I get all the time one of them is",
    "start": "64989",
    "end": "72210"
  },
  {
    "text": "how do I know if I need an orchestration platform it's a very good question so",
    "start": "72210",
    "end": "77230"
  },
  {
    "text": "that is a question that I will not be answering simply put because you cannot answer it globally but what I can do is",
    "start": "77230",
    "end": "85060"
  },
  {
    "text": "show you the things we might care about that help you decide so we're going to do that the other question is how do I",
    "start": "85060",
    "end": "91240"
  },
  {
    "text": "choose the right approach or platform so you know once I know that I need a",
    "start": "91240",
    "end": "97000"
  },
  {
    "text": "platform you know which one do I choose and that's another question that I will not be answering so I'm starting really firmly at the beginning of the talk with",
    "start": "97000",
    "end": "103930"
  },
  {
    "text": "two things I will not do for you but the reasoning behind that is that it's very difficult it's a finessing process you",
    "start": "103930",
    "end": "110409"
  },
  {
    "text": "have to understand the customer and the culture they have and if they have affinity to a certain platform already and so forth so what we want to do is",
    "start": "110409",
    "end": "118120"
  },
  {
    "text": "just learn what are some of the things those platforms do uniquely partially I'll be showing that but since we only",
    "start": "118120",
    "end": "124420"
  },
  {
    "text": "have an hour I'll be showing that very quickly and speaking to it along the way I need you to pay really full attention",
    "start": "124420",
    "end": "130539"
  },
  {
    "text": "if that's ok all right lots to say considerations that we'll talk about things like deployments lit scenarios so",
    "start": "130539",
    "end": "137620"
  },
  {
    "text": "a single container you know instance versus load balancing and then orchestration platforms at",
    "start": "137620",
    "end": "144260"
  },
  {
    "text": "scale so that's sort of the progression that we might think about with docker solutions and then we're gonna talk",
    "start": "144260",
    "end": "149900"
  },
  {
    "text": "about the features that would be related to the orchestration platform that you might care about which would help you to",
    "start": "149900",
    "end": "155360"
  },
  {
    "text": "decide do I need these types of things and is there another workaround to those",
    "start": "155360",
    "end": "160430"
  },
  {
    "text": "things until I'm ready to go a full-blown orchestration and invest in in the effort that it takes to get there",
    "start": "160430",
    "end": "165950"
  },
  {
    "text": "okay so in approximately six minutes we'll do a docker container lifecycle",
    "start": "165950",
    "end": "171110"
  },
  {
    "text": "will do docker compose networking we'll talk about deploying containers and use a simple example and then we will get",
    "start": "171110",
    "end": "177050"
  },
  {
    "text": "into scheduling and constraints an important feature of orchestration platforms and will be use Stucker swarm",
    "start": "177050",
    "end": "183019"
  },
  {
    "text": "to look at that and we will look at orchestration management UI just sort of",
    "start": "183019",
    "end": "188269"
  },
  {
    "text": "from a high level in order to explain hey these clusters actually usually need",
    "start": "188269",
    "end": "193370"
  },
  {
    "text": "UI to show you what's going on inside them and then of course all of those platforms give you visibility into that",
    "start": "193370",
    "end": "199010"
  },
  {
    "text": "in different ways they each have different tools different UIs so we'll talk about low bounding blow balancing",
    "start": "199010",
    "end": "205220"
  },
  {
    "text": "and discovery and see that UI with DCOs we'll talk about recovery and self-healing and Auto scale and we'll",
    "start": "205220",
    "end": "210799"
  },
  {
    "text": "see the UI therefore with Amazon and Google container engine but also think about that as kubernetes which doesn't",
    "start": "210799",
    "end": "217280"
  },
  {
    "text": "have to be deployed with Google container engine it can also be deployed on Amazon or Azure or on-premise okay",
    "start": "217280",
    "end": "223519"
  },
  {
    "text": "alright that's a mouthful let's continue so the first demo we're gonna talk about just docker 101 and you know some of the",
    "start": "223519",
    "end": "232070"
  },
  {
    "text": "basic things we might think about there so I'm gonna come in here and just what I've got installed on my machine",
    "start": "232070",
    "end": "237650"
  },
  {
    "text": "this is my Mac earlier I did a talk on Windows so I was on my surface book so I",
    "start": "237650",
    "end": "242870"
  },
  {
    "text": "have a docker for Mac installed here instead of a docker for Windows obviously and so I have access to docker",
    "start": "242870",
    "end": "250130"
  },
  {
    "text": "from my terminal at this point right so what I'm gonna do is I have no containers running showing you that and",
    "start": "250130",
    "end": "256039"
  },
  {
    "text": "docker images we're gonna see I have just a node base image that I can use",
    "start": "256039",
    "end": "261470"
  },
  {
    "text": "okay and so I'll give a list here and we're going to go into my docker and",
    "start": "261470",
    "end": "266830"
  },
  {
    "text": "what I have here are an API and a website I've shown the same demo in different ways I'm",
    "start": "266830",
    "end": "272129"
  },
  {
    "text": "kind of repurposing that and just showing that you're gonna have two containers talking to each other and what I'm gonna do first is go in here",
    "start": "272129",
    "end": "278369"
  },
  {
    "text": "and look at the API if we take a look you can see that I have a docker file and let's take a look at that and that",
    "start": "278369",
    "end": "286469"
  },
  {
    "text": "docker file is essentially saying I want to use the base image for argon which is",
    "start": "286469",
    "end": "291779"
  },
  {
    "text": "a lightweight nodejs image on top of Linux and then we're gonna you know copy",
    "start": "291779",
    "end": "296999"
  },
  {
    "text": "over my source and then we're gonna do an NPM start at some point here there you go and that's about it so that's my",
    "start": "296999",
    "end": "305189"
  },
  {
    "text": "docker file what the app does is really it's an API right so it exposes some endpoints so what I got to do first is",
    "start": "305189",
    "end": "311429"
  },
  {
    "text": "just go ahead and let's build that and if we take a look you know docker build is just going to go and build it for my",
    "start": "311429",
    "end": "319110"
  },
  {
    "text": "daus blonde docker hub registry so I'm using the convention of targeting with",
    "start": "319110",
    "end": "324360"
  },
  {
    "text": "my tag the registry that I'm planning to push to right so that's typically what you would do obviously there's different",
    "start": "324360",
    "end": "330449"
  },
  {
    "text": "types of registries that are gonna be touched on as we talk and when I go and build this it will just go ahead and try",
    "start": "330449",
    "end": "336719"
  },
  {
    "text": "and you know rebuild the image it will be an immutable image with my source",
    "start": "336719",
    "end": "341729"
  },
  {
    "text": "running on our gun as a base image and once this is built I can go ahead and",
    "start": "341729",
    "end": "348419"
  },
  {
    "text": "run it so let's go ahead and take a look at a run and what we'll do first is just",
    "start": "348419",
    "end": "353519"
  },
  {
    "text": "run it so I'm gonna expose port 3001 and let's go back one more and we're gonna",
    "start": "353519",
    "end": "361529"
  },
  {
    "text": "call it API so my dns for this one will be just API okay so now my docker PS or",
    "start": "361529",
    "end": "367439"
  },
  {
    "text": "doaker and we'll show that I have API up and running and you can see that it's",
    "start": "367439",
    "end": "374369"
  },
  {
    "text": "running at four at three thousand one I should be able to now browse so let's go",
    "start": "374369",
    "end": "379529"
  },
  {
    "text": "into one of these guys and we'll go localhost 3001 I don't really have",
    "start": "379529",
    "end": "385229"
  },
  {
    "text": "anything exposed at the root so I'm gonna type speakers and there we go",
    "start": "385229",
    "end": "390629"
  },
  {
    "text": "bunch of stuff so we know it worked that's good enough for me so now we've",
    "start": "390629",
    "end": "396300"
  },
  {
    "text": "got an API running what about my web app right so I'm gonna go back the track here and I'm gonna go into web and let's",
    "start": "396300",
    "end": "404039"
  },
  {
    "text": "go ahead and do the same thing so time I'm gonna do a build and we're gonna call this my web build we're gonna",
    "start": "404039",
    "end": "410070"
  },
  {
    "text": "tag it with das blonde content - web that would be where I push it in a repository I'm gonna hit enter and that",
    "start": "410070",
    "end": "416100"
  },
  {
    "text": "will build the image for web so once I built that image of course I'm gonna run it and then that image is gonna try and",
    "start": "416100",
    "end": "422370"
  },
  {
    "text": "call the API image will it work is the question anybody no it's not gonna work",
    "start": "422370",
    "end": "427860"
  },
  {
    "text": "because I haven't set up a network and I haven't done a compose up and so it won't know how to reach the API right so",
    "start": "427860",
    "end": "435150"
  },
  {
    "text": "what I've really just done is run two separate containers but because when the web runs in its context it won't be able",
    "start": "435150",
    "end": "441810"
  },
  {
    "text": "to reach out to localhost from basically the you know the docker environment the",
    "start": "441810",
    "end": "448110"
  },
  {
    "text": "machine environment so I need to have DNS I need to have them join a network I need to have them to be able to",
    "start": "448110",
    "end": "453780"
  },
  {
    "text": "communicate and that would be something that also matters in an orchestration platform they just handle it in different ways some of them provide you",
    "start": "453780",
    "end": "460500"
  },
  {
    "text": "with DNS through load balancers that are part of the platform you'll see that when I do DCOs for example and some of them require you",
    "start": "460500",
    "end": "468000"
  },
  {
    "text": "to do some complex setup to achieve the same goal like Amazon for example because they don't have that need of",
    "start": "468000",
    "end": "474600"
  },
  {
    "text": "concept it's actually all infrastructure so you have to set up more things so this just building the web app and once",
    "start": "474600",
    "end": "485790"
  },
  {
    "text": "it's up and running we'll go ahead and give it a run it's nice seeing red text",
    "start": "485790",
    "end": "495180"
  },
  {
    "text": "flyby because you know something's happening plus it's really super exciting",
    "start": "495180",
    "end": "501800"
  },
  {
    "text": "I'm very easily amused obviously and a",
    "start": "501800",
    "end": "508590"
  },
  {
    "text": "one two three it's taking a little",
    "start": "508590",
    "end": "514500"
  },
  {
    "text": "longer so this guy walks into a bar and he says I'm not going to do that it",
    "start": "514500",
    "end": "523320"
  },
  {
    "text": "wouldn't be appropriate alright so whenever this is done we won't build that image again cuz you know that's",
    "start": "523320",
    "end": "529410"
  },
  {
    "text": "enough of that but basically I'll go ahead and run it I'm going hit the API it's not gonna work and then I'm gonna drop back remove the",
    "start": "529410",
    "end": "536410"
  },
  {
    "text": "containers that I started and then I'm gonna do compose up on a network I could also manually start each of them",
    "start": "536410",
    "end": "542740"
  },
  {
    "text": "I'm not going to go through that process but I could just start the API create a network start the API and join that",
    "start": "542740",
    "end": "550030"
  },
  {
    "text": "network and then I could you know join the web app to the network as well when I run the container and I provide",
    "start": "550030",
    "end": "556720"
  },
  {
    "text": "environment variables on the command line as well but instead I'm gonna put it all in a compose llamó file and then",
    "start": "556720",
    "end": "562690"
  },
  {
    "text": "they'll do a compose up and it'll do it all for me so and we're about there good",
    "start": "562690",
    "end": "570190"
  },
  {
    "text": "looks like it's closed",
    "start": "570190",
    "end": "573660"
  },
  {
    "text": "that is some serious damage building okay let me do this tell you what while",
    "start": "580829",
    "end": "587939"
  },
  {
    "text": "we're there I'm gonna go to a different terminal window cuz this guy can stay",
    "start": "587939",
    "end": "593040"
  },
  {
    "text": "busy all he likes but I still have other options so let's go in here and we'll go",
    "start": "593040",
    "end": "600059"
  },
  {
    "text": "to talker and what I'm gonna do is I'm gonna cat this docker compose file and",
    "start": "600059",
    "end": "606420"
  },
  {
    "text": "let's take a look at what I've got in here so what I'm gonna do when I do a compose up is I have a version three compose I don't know build the image but",
    "start": "606420",
    "end": "613139"
  },
  {
    "text": "it's already going to be built I'm going to expose the same port so I would have",
    "start": "613139",
    "end": "618480"
  },
  {
    "text": "I'm gonna have a environment variable override that tells it where the API is traditional and then I'm going to",
    "start": "618480",
    "end": "624749"
  },
  {
    "text": "specify a network called fat medical it's the fictitious site that this is and so while this is going let's go see",
    "start": "624749",
    "end": "632790"
  },
  {
    "text": "where this other guy went or landed and [Music]",
    "start": "632790",
    "end": "638809"
  },
  {
    "text": "looks like we're done yeah okay so if I run this this will run the API",
    "start": "638809",
    "end": "646529"
  },
  {
    "text": "which we already did now I'm going to run the web app without a network and",
    "start": "646529",
    "end": "653899"
  },
  {
    "text": "this will expose the port 3000 so let's give that a good go and come over here",
    "start": "653899",
    "end": "658980"
  },
  {
    "text": "and we'll go to port 3000 so I still have three thousand one four speakers for the speaker endpoint on the API this",
    "start": "658980",
    "end": "666420"
  },
  {
    "text": "is the speaker endpoint we're trying to hit it won't be able to get there so I have no content right so that's that",
    "start": "666420",
    "end": "672179"
  },
  {
    "text": "okay now let's go back to docker PS and",
    "start": "672179",
    "end": "677339"
  },
  {
    "text": "what we'll see is I've got these two containers running I'm gonna do my magical blow it all away force quit of",
    "start": "677339",
    "end": "683730"
  },
  {
    "text": "those so that they go okay and then I'm going to back drop until I get to the",
    "start": "683730",
    "end": "689009"
  },
  {
    "text": "composed level and I'll do a compose up",
    "start": "689009",
    "end": "694220"
  },
  {
    "text": "hope excuse me",
    "start": "694220",
    "end": "698269"
  },
  {
    "text": "and we'll do that okay so that's gonna",
    "start": "700300",
    "end": "705920"
  },
  {
    "text": "basically run and do the networking bit that I suggested I guess because it's probably renaming the image that might",
    "start": "705920",
    "end": "712879"
  },
  {
    "text": "actually go do a rebuild so we're gonna let that do its thinking in the meantime",
    "start": "712879",
    "end": "718509"
  },
  {
    "text": "one of the things that I guess I'm taking you through here is the fact that you can individually run your images and",
    "start": "718509",
    "end": "725540"
  },
  {
    "text": "that would be fine I could go to a VM in the cloud and therefore you know have docker running on the VM put one image",
    "start": "725540",
    "end": "731180"
  },
  {
    "text": "up there expose an endpoint port 80 and that would be the only thing on the VM it would be as if I had a web app you",
    "start": "731180",
    "end": "736189"
  },
  {
    "text": "know running in a web server only it would be maybe if it's node it's gonna have Express as the you know reverse",
    "start": "736189",
    "end": "742759"
  },
  {
    "text": "proxy and web server if it were Java it might be you know Apache if it were dotnet on Linux it would probably be",
    "start": "742759",
    "end": "750379"
  },
  {
    "text": "Kestrel for example in da net core so that would be the idea in this case you",
    "start": "750379",
    "end": "756230"
  },
  {
    "text": "know when we do a compose we're getting you know more than one composition application and so when we run we're",
    "start": "756230",
    "end": "761930"
  },
  {
    "text": "getting multiple containers and then we have to figure out well what are those ports going to be so they can't use the same port we would have to have port",
    "start": "761930",
    "end": "768620"
  },
  {
    "text": "3000 3001 unless we have a web server on the VM that's knowing how to route in",
    "start": "768620",
    "end": "774139"
  },
  {
    "text": "which case we would set up more interesting routing rules at the webserver level so that we could have",
    "start": "774139",
    "end": "779420"
  },
  {
    "text": "wacky API and whack web for example so all these manual things you'd have to do are completely automated well if you",
    "start": "779420",
    "end": "786649"
  },
  {
    "text": "use you know some sort of scripting for your cloud platform it's just that it's not baked into anything like an",
    "start": "786649",
    "end": "792259"
  },
  {
    "text": "orchestration platform might give you a little bit more out-of-the-box if that",
    "start": "792259",
    "end": "797300"
  },
  {
    "text": "makes sense and so we're thinking more about hey what is my endpoint kind of be I have to structure my task definitions",
    "start": "797300",
    "end": "803509"
  },
  {
    "text": "or my compose files to know this is going to be my port for that thing unless I get something called dynamic",
    "start": "803509",
    "end": "809269"
  },
  {
    "text": "discovery which we're gonna see what DCOs and so forth okay all right so I'm gonna let that do its thing and then",
    "start": "809269",
    "end": "815449"
  },
  {
    "text": "we'll come back to it but that was my quick sort of super intro tour to get us",
    "start": "815449",
    "end": "820699"
  },
  {
    "text": "some foundation and once that's running we'll show that it's working and we'll all be happy",
    "start": "820699",
    "end": "825889"
  },
  {
    "text": "so docker compose will let me run multi container app occations but what we really think about",
    "start": "825889",
    "end": "832440"
  },
  {
    "text": "when we think about docker compose files is task definitions every single orchestration platform has the concept",
    "start": "832440",
    "end": "838200"
  },
  {
    "text": "of a task definition so you know with Amazon with Google with DCOs",
    "start": "838200",
    "end": "843830"
  },
  {
    "text": "kubernetes there's always a service definition a task definition an",
    "start": "843830",
    "end": "848850"
  },
  {
    "text": "application definition that essentially defines the things that compose does so a lot of times there's transformations",
    "start": "848850",
    "end": "855120"
  },
  {
    "text": "between docker compose which is native to docker and swarm into these other",
    "start": "855120",
    "end": "860610"
  },
  {
    "text": "task definition formats what they're trying to do is describe what is the application how many services obviously",
    "start": "860610",
    "end": "866910"
  },
  {
    "text": "any constraints and ports and things so you can see that you know part of that could be the network's any volumes that",
    "start": "866910",
    "end": "872730"
  },
  {
    "text": "you're mapping if you need to have an external volume from the VM it could be environment variables which we've seen and then there's a whole lot of other",
    "start": "872730",
    "end": "879720"
  },
  {
    "text": "configurations that might be platform specific like when we get into DCOs there could be configurations for the",
    "start": "879720",
    "end": "885930"
  },
  {
    "text": "load balancer on top of this so you can extend compose to do more things compose",
    "start": "885930",
    "end": "892110"
  },
  {
    "text": "is native to swarm swarm is negative to docker right so when we think about you",
    "start": "892110",
    "end": "900990"
  },
  {
    "text": "know composition we're thinking about again tasks definitions now before I can deploy a task definition to an",
    "start": "900990",
    "end": "907050"
  },
  {
    "text": "orchestration platform let's just drop back again and talk about the images I'm still at the end of the day building",
    "start": "907050",
    "end": "912600"
  },
  {
    "text": "these immutable images that need to deploy somewhere and when running locally I have an image registry locally",
    "start": "912600",
    "end": "918630"
  },
  {
    "text": "as part of my docker you know form a core docker for Windows environments so that I can run you know from my local",
    "start": "918630",
    "end": "926520"
  },
  {
    "text": "repository if you will if I want to deploy these to the cloud I have to push them to some accessible registry so",
    "start": "926520",
    "end": "933660"
  },
  {
    "text": "maybe docker hub or docker store maybe it could be you know as your container registry things like docker data center",
    "start": "933660",
    "end": "941760"
  },
  {
    "text": "now called docker Enterprise Edition actually have their own registry built into the platform things like DCOs provide the ability to",
    "start": "941760",
    "end": "949950"
  },
  {
    "text": "run a registry as part of the platform if you like so that it's all contained as part of the same cluster of VMs so",
    "start": "949950",
    "end": "956550"
  },
  {
    "text": "the idea is based on the place you're going to deploy based on the tool you're using there might be a natural choice",
    "start": "956550",
    "end": "963209"
  },
  {
    "text": "for which distri we're actually gonna work with right I'll use docker hub for demos because then it's just open and I have",
    "start": "963209",
    "end": "969390"
  },
  {
    "text": "an open account I use for that but in production you know with with your you",
    "start": "969390",
    "end": "975060"
  },
  {
    "text": "know actual enterprise assets you're likely to use Azure if you're an azure the azure container registry amazon has",
    "start": "975060",
    "end": "981899"
  },
  {
    "text": "its container registry for when you're in amazon google has it's and then if",
    "start": "981899",
    "end": "987209"
  },
  {
    "text": "you're going sort of native platform like kubernetes TCOs you may still",
    "start": "987209",
    "end": "992370"
  },
  {
    "text": "decide to use the cloud platform choice okay so these are just things to",
    "start": "992370",
    "end": "997440"
  },
  {
    "text": "consider so ultimately what I'm looking for is a way to take these local machine builds from code to docker image and",
    "start": "997440",
    "end": "1004550"
  },
  {
    "text": "that immutable image now be something I can push up to a registry and tag the",
    "start": "1004550",
    "end": "1009560"
  },
  {
    "text": "tags are really important because not only do they indicate where they're going to deploy probably compatible with",
    "start": "1009560",
    "end": "1014660"
  },
  {
    "text": "the registry but also they indicate things like is it the latest version what's the version number what was the",
    "start": "1014660",
    "end": "1021140"
  },
  {
    "text": "bill that came out of if it's CI what is this tart is this our latest prod",
    "start": "1021140",
    "end": "1027079"
  },
  {
    "text": "release do we have a naming convention for what means it's ready to go to prod",
    "start": "1027079",
    "end": "1032360"
  },
  {
    "text": "and then that would be now a promotion of this image to we're ready to release you so instead of version one being the",
    "start": "1032360",
    "end": "1040459"
  },
  {
    "text": "prod tag it will now be version 2 has the protagonist that help me promote",
    "start": "1040459",
    "end": "1046730"
  },
  {
    "text": "okay and so pushing to the registry is really as simple as doing a docker push",
    "start": "1046730",
    "end": "1053300"
  },
  {
    "text": "for example right and I might have to set up the registry locally so I have",
    "start": "1053300",
    "end": "1058670"
  },
  {
    "text": "the credentials to push to asher or Amazon or otherwise but for docker hub I've already logged in so that will",
    "start": "1058670",
    "end": "1065090"
  },
  {
    "text": "already be accessible to me in addition I might just automate those bills I",
    "start": "1065090",
    "end": "1070760"
  },
  {
    "text": "might just go ahead and do a check in or a commit and that would automatically generate the images and deploy to my",
    "start": "1070760",
    "end": "1077240"
  },
  {
    "text": "registry of choice which I would have set up then as part of the pipeline for 4ci okay so that's the idea there so",
    "start": "1077240",
    "end": "1085820"
  },
  {
    "text": "let's go ahead and take a look back at where we were which looks like it's done",
    "start": "1085820",
    "end": "1093399"
  },
  {
    "text": "so let's do a docker PS it looks like I do have my web in my API running at this",
    "start": "1093399",
    "end": "1098630"
  },
  {
    "text": "point let's do a docker Network inspect fab medical and it looks like I have a",
    "start": "1098630",
    "end": "1107149"
  },
  {
    "text": "fab medical with a docker API one deployed in there and a joker web one so",
    "start": "1107149",
    "end": "1113210"
  },
  {
    "text": "there's two containers deployed as part of this network okay",
    "start": "1113210",
    "end": "1118570"
  },
  {
    "text": "because they're deployed as part of the network I should now be able to browse and it should now show me some content",
    "start": "1119120",
    "end": "1127039"
  },
  {
    "text": "right so now we're hitting the API because I had configured the environment variable to look at DNS to find the API",
    "start": "1127039",
    "end": "1134120"
  },
  {
    "text": "under the name API directly right as opposed to localhost 3001 okay okay so",
    "start": "1134120",
    "end": "1141590"
  },
  {
    "text": "that's all working now let's talk about the CI part so what I have here is let's",
    "start": "1141590",
    "end": "1148730"
  },
  {
    "text": "see if we can list I'm going to go into the API here and let's do a look at one",
    "start": "1148730",
    "end": "1155899"
  },
  {
    "text": "of the file so let me go into sublime and oops let's do that again don't mean",
    "start": "1155899",
    "end": "1165980"
  },
  {
    "text": "to make you dizzy okay let's do this",
    "start": "1165980",
    "end": "1172179"
  },
  {
    "text": "there we go okay so over here somewhere I have my",
    "start": "1172179",
    "end": "1178140"
  },
  {
    "text": "daugher and API so let's go into one of the files server not found go away",
    "start": "1178140",
    "end": "1185190"
  },
  {
    "text": "please I'm just going to change a file just to make it so that there's something different okay so nothing that",
    "start": "1185190",
    "end": "1191309"
  },
  {
    "text": "we're going to be able to see because I'm just going to go through this quickly but let's go into here and now I",
    "start": "1191309",
    "end": "1196799"
  },
  {
    "text": "got this get status okay so we're going",
    "start": "1196799",
    "end": "1203790"
  },
  {
    "text": "to do an ad and we're going to do a git commit changed a message and now we've",
    "start": "1203790",
    "end": "1212669"
  },
  {
    "text": "got something to push but before I push let me just go ahead and go to our",
    "start": "1212669",
    "end": "1219200"
  },
  {
    "text": "content API CI this is my docker hub and then here is my just belong directory so",
    "start": "1224750",
    "end": "1231240"
  },
  {
    "text": "in my desk long directory I have this content API I'm gonna check into there or commit this change when I commit this",
    "start": "1231240",
    "end": "1237450"
  },
  {
    "text": "change again this can be done different ways with different registries right or different CI tools but when I commit to",
    "start": "1237450",
    "end": "1245669"
  },
  {
    "text": "get I've actually connected this docker hub content API CI and it's got some",
    "start": "1245669",
    "end": "1255480"
  },
  {
    "text": "settings that it will you know monitor with a hook the the commits over on my",
    "start": "1255480",
    "end": "1262020"
  },
  {
    "text": "repository and it will go ahead and pull and build the image so we're gonna see a new image getting built and it's going",
    "start": "1262020",
    "end": "1268049"
  },
  {
    "text": "to label it with the latest so again these are just standard things you're gonna do not that you're gonna memorize",
    "start": "1268049",
    "end": "1273419"
  },
  {
    "text": "this process obviously that's pretty straightforward and then over here we",
    "start": "1273419",
    "end": "1278669"
  },
  {
    "text": "can see the history of the builds right so somewhere over here we'll get to you know a day ago I have run this so now",
    "start": "1278669",
    "end": "1285540"
  },
  {
    "text": "you know I practiced this at some point right so the bid doesn't work you know it's not because like I'm lazy so I'm gonna",
    "start": "1285540",
    "end": "1294179"
  },
  {
    "text": "go back over here and let's do a git status and do a git push hopefully still",
    "start": "1294179",
    "end": "1302309"
  },
  {
    "text": "remembers my credentials takes care of business okay",
    "start": "1302309",
    "end": "1310660"
  },
  {
    "text": "now let's come back to this and at some point here we're gonna see this refresh",
    "start": "1310660",
    "end": "1316180"
  },
  {
    "text": "and start building the next image which",
    "start": "1316180",
    "end": "1323200"
  },
  {
    "text": "it will tag is latest so there you go so now that I've got an image getting built obviously that's not handling the",
    "start": "1323200",
    "end": "1329800"
  },
  {
    "text": "deployment side of it there's a lot to talk about on the CD side because there are tools that I find really really",
    "start": "1329800",
    "end": "1338050"
  },
  {
    "text": "useful for managing container deployments once we get to the orchestration discussion in short what I",
    "start": "1338050",
    "end": "1344260"
  },
  {
    "text": "would say is this what you want to use is a tool that allows you to have sort of a holistic picture of all the things",
    "start": "1344260",
    "end": "1350440"
  },
  {
    "text": "you're deploying to your container platform so run deck is an example of a tool that I I like introduced to me by",
    "start": "1350440",
    "end": "1357220"
  },
  {
    "text": "other folks that do that kind of thing day-to-day so I'm not an expert audit or anything but I've enjoyed that because",
    "start": "1357220",
    "end": "1363460"
  },
  {
    "text": "it gives me a way to go back in history and see the container builds or you know",
    "start": "1363460",
    "end": "1368890"
  },
  {
    "text": "it can be multiple tasks definitions that we push to Amazon or to the container platform and you can see that",
    "start": "1368890",
    "end": "1374950"
  },
  {
    "text": "we went and pulled you know version 1.2 of all the images that kind of go in a",
    "start": "1374950",
    "end": "1380110"
  },
  {
    "text": "bundle and done that push and then if something goes wrong we can roll back that whole task and go back to a",
    "start": "1380110",
    "end": "1386200"
  },
  {
    "text": "previous run deck job and rerun the previous job and it will go get those immutable images and replay so rather",
    "start": "1386200",
    "end": "1392710"
  },
  {
    "text": "than automatically just getting these you know commits creating new images if",
    "start": "1392710",
    "end": "1397900"
  },
  {
    "text": "that feels chaotic you can actually do it in a more controlled manner also from the outside in these are just things to",
    "start": "1397900",
    "end": "1403660"
  },
  {
    "text": "think about right so there's tools for both sides at the end of the day this is just showing that of course I can build",
    "start": "1403660",
    "end": "1410080"
  },
  {
    "text": "images automatically they are immutable and I can start working with those okay so let's talk about how we might deploy",
    "start": "1410080",
    "end": "1419440"
  },
  {
    "text": "that service so I did a commit right and I did build an image and it's in it's it's in progress and right now I'm gonna",
    "start": "1419440",
    "end": "1426100"
  },
  {
    "text": "have a new latest image of this API CI and you know one of the things I might",
    "start": "1426100",
    "end": "1432250"
  },
  {
    "text": "consider doing is just going to a VM and doing a pull right so if I don't have a tool that automate",
    "start": "1432250",
    "end": "1437549"
  },
  {
    "text": "telling it to do so then I would have to go onto the VM and do a get a you know a",
    "start": "1437549",
    "end": "1443629"
  },
  {
    "text": "a pull from the repository and then run the container myself if I don't have an",
    "start": "1443629",
    "end": "1449220"
  },
  {
    "text": "orchestration platform that knows how to run tasks then something has to do that job the simplest possible thing I can",
    "start": "1449220",
    "end": "1457169"
  },
  {
    "text": "think of is a headless container platform and although it's really early days for this it's an opportunity maybe",
    "start": "1457169",
    "end": "1463980"
  },
  {
    "text": "to talk about Azure container instances so that lets me go right into the azure",
    "start": "1463980",
    "end": "1469350"
  },
  {
    "text": "portal and tell it a container to run and then it will provision the VM it's a small VM just for that one container and",
    "start": "1469350",
    "end": "1476100"
  },
  {
    "text": "it will run that as it will pull that from the repository that I tell it to so",
    "start": "1476100",
    "end": "1481649"
  },
  {
    "text": "let me head over to that screen here and we'll go in - sure so what I have over",
    "start": "1481649",
    "end": "1492210"
  },
  {
    "text": "here is let's just let the screen refresh a bit I have a Asscher container",
    "start": "1492210",
    "end": "1500879"
  },
  {
    "text": "instance namespace if you will or resource group ACI demos and in here",
    "start": "1500879",
    "end": "1508230"
  },
  {
    "text": "I've already deployed a couple of different images one was a Linux one and one was a window so you can actually",
    "start": "1508230",
    "end": "1514289"
  },
  {
    "text": "have these loose containers that just have a space to run almost like a lambda in Amazon or a function in Azure",
    "start": "1514289",
    "end": "1521279"
  },
  {
    "text": "except for that it's a container instead so it can be any code base you like so it's pretty powerful concept that down",
    "start": "1521279",
    "end": "1527700"
  },
  {
    "text": "the road you can imagine somebody putting management around stuff like that and then you don't need a container platform but we're not there yet but if",
    "start": "1527700",
    "end": "1534119"
  },
  {
    "text": "you just need to run some loose containers and have them scale this is an example so I'll use that as a pre",
    "start": "1534119",
    "end": "1540840"
  },
  {
    "text": "container platform idea I'm going to go into the bash command prompt here and",
    "start": "1540840",
    "end": "1548509"
  },
  {
    "text": "we'll take a look so that'll create a connection to the shell so that I can",
    "start": "1548509",
    "end": "1554970"
  },
  {
    "text": "deploy and this is just a quick way instead of",
    "start": "1554970",
    "end": "1561760"
  },
  {
    "text": "using arm from outside and automating from you know either",
    "start": "1561760",
    "end": "1566830"
  },
  {
    "text": "chair form or arm or something like that so I'm just coming in here just to issue a simple command the same thing that I",
    "start": "1566830",
    "end": "1572679"
  },
  {
    "text": "could do from a powershell script or something like that and this is probably",
    "start": "1572679",
    "end": "1581070"
  },
  {
    "text": "and so while that's kind of thinking let's talk a little bit about pre container platform deployments so this",
    "start": "1585270",
    "end": "1592390"
  },
  {
    "text": "is an example of just go ahead and create me a container so I'm saying AZ",
    "start": "1592390",
    "end": "1598600"
  },
  {
    "text": "container create use public port three thousand one make it a public IP so I",
    "start": "1598600",
    "end": "1603669"
  },
  {
    "text": "can reach it put it in my resource group for a CI demos and somewhere over here",
    "start": "1603669",
    "end": "1611440"
  },
  {
    "text": "we're calling it content API two I don't have to do that I can call it whatever I like and then it's coming from the image",
    "start": "1611440",
    "end": "1619540"
  },
  {
    "text": "das blonde content API probably need to do that faster apparently so",
    "start": "1619540",
    "end": "1627549"
  },
  {
    "text": "this will just show how quick it can",
    "start": "1627549",
    "end": "1633460"
  },
  {
    "text": "spin up just like a function or a lambda would so we'll get that done another",
    "start": "1633460",
    "end": "1638500"
  },
  {
    "text": "option that I might have in Azure particularly is this sort of paas idea around app services so app services are",
    "start": "1638500",
    "end": "1645030"
  },
  {
    "text": "managed you know VMs so you don't actually think about you know managing the VM you just",
    "start": "1645030",
    "end": "1650350"
  },
  {
    "text": "have these tools for scaling out and in but it's actually provisioned for you",
    "start": "1650350",
    "end": "1655840"
  },
  {
    "text": "and you can define the size and so forth so it's a pass offering that gives you out-of-the-box platform as a service",
    "start": "1655840",
    "end": "1664360"
  },
  {
    "text": "basically right and now they support Linux containers on those so that's a preview item and eventually they'll have",
    "start": "1664360",
    "end": "1670510"
  },
  {
    "text": "obviously the same for Windows so the point is it's not a class it's not a container orchestration platform it's",
    "start": "1670510",
    "end": "1676059"
  },
  {
    "text": "just a VM that's ready for a container to get deployed and that way instead of you managing getting docker set up I'm",
    "start": "1676059",
    "end": "1684429"
  },
  {
    "text": "just going to hit go before this gets out of hand you would just be able to deploy and and",
    "start": "1684429",
    "end": "1691270"
  },
  {
    "text": "you know not have to manage the VM it's not have to manage orchestration but you won't have orchestration you'll still",
    "start": "1691270",
    "end": "1697240"
  },
  {
    "text": "have to think about ports I have a container on a VM I can only use port 3000 once or port 80 once unless I have",
    "start": "1697240",
    "end": "1704470"
  },
  {
    "text": "a web server to do routing right you still have to think about the topology of what gets placed in the VM now this",
    "start": "1704470",
    "end": "1711370"
  },
  {
    "text": "has done its job so I'm going to school scale out here so we can see what happened and if i",
    "start": "1711370",
    "end": "1716890"
  },
  {
    "text": "refresh here I should see that it's already there and if I click on content API - that was it's super fast right so",
    "start": "1716890",
    "end": "1724630"
  },
  {
    "text": "it just provisioned me with this IP address so let me go ahead and copy that",
    "start": "1724630",
    "end": "1729820"
  },
  {
    "text": "IP and let's go browse to that IP and I",
    "start": "1729820",
    "end": "1738490"
  },
  {
    "text": "think I gave it port 3001 just like before and at some point this should",
    "start": "1738490",
    "end": "1745030"
  },
  {
    "text": "then just return for me the same content that we saw before because it's the same",
    "start": "1745030",
    "end": "1752050"
  },
  {
    "text": "container",
    "start": "1752050",
    "end": "1754410"
  },
  {
    "text": "something like that",
    "start": "1770660",
    "end": "1773440"
  },
  {
    "text": "oh you know what sorry let me just put the IP first did I tell it top public",
    "start": "1776750",
    "end": "1785200"
  },
  {
    "text": "public IP yes yeah possibly possibly",
    "start": "1785200",
    "end": "1795700"
  },
  {
    "text": "yeah cuz it's I told it to use that port so okay well there we go alright so so",
    "start": "1798280",
    "end": "1805970"
  },
  {
    "text": "again for me to not care about orchestration that means I'm either doing this which would be the ideal",
    "start": "1805970",
    "end": "1811669"
  },
  {
    "text": "consideration so that I don't have to worry about you know anything but what",
    "start": "1811669",
    "end": "1816799"
  },
  {
    "text": "port do I want and let's just let you scale out but then I don't have a management story so now I have thousands",
    "start": "1816799",
    "end": "1822020"
  },
  {
    "text": "of containers and I'm missing something right that visibility that holistic view of all the things so that's where it",
    "start": "1822020",
    "end": "1827990"
  },
  {
    "text": "starts to get complicated if I was using app services I'm saving myself the",
    "start": "1827990",
    "end": "1833059"
  },
  {
    "text": "trouble of managing the VM keeping it up-to-date security patches even updating and patching docker if they",
    "start": "1833059",
    "end": "1839960"
  },
  {
    "text": "give me a provisioned docker ready app service then a lot of that's done for me that's great",
    "start": "1839960",
    "end": "1846260"
  },
  {
    "text": "and so it's saving me part of the trouble but I still have to think about ports and what goes on the VM itself ok",
    "start": "1846260",
    "end": "1852770"
  },
  {
    "text": "so just kind of get painting you the picture you know if you have a simple enough environment and you're like a",
    "start": "1852770",
    "end": "1859070"
  },
  {
    "text": "startup trying to save costs for example you might just want one VM and not even load-balanced but obviously there's",
    "start": "1859070",
    "end": "1866240"
  },
  {
    "text": "there's risks that come with all these decisions right so let's talk a little bit about that so deployment looks like potentially you",
    "start": "1866240",
    "end": "1873770"
  },
  {
    "text": "know just a simple you know as your container instance like like this new",
    "start": "1873770",
    "end": "1879140"
  },
  {
    "text": "feature that we have available in Azure or it could be an app service which is really just a VM that's managed for you",
    "start": "1879140",
    "end": "1884179"
  },
  {
    "text": "you still have the considerations if you go to amazon asher or google all of them",
    "start": "1884179",
    "end": "1889909"
  },
  {
    "text": "provide ways for you to provision VMs without an orchestration platform and just put stuff on it and they'll give",
    "start": "1889909",
    "end": "1895340"
  },
  {
    "text": "you docker ready VMs or you can build your own and have those be scale sets or auto scale groups or depending on the",
    "start": "1895340",
    "end": "1902659"
  },
  {
    "text": "platform however they do they like to call it i still and then i have to just think about how I'm doing the topology",
    "start": "1902659",
    "end": "1909110"
  },
  {
    "text": "so if it's a single I am topology it's probably gonna be you know I'm trying to save money and I'm",
    "start": "1909110",
    "end": "1914990"
  },
  {
    "text": "thinking hey if the container goes down I can restart it quick enough I'm not gonna worry about it I'm not gonna have",
    "start": "1914990",
    "end": "1921350"
  },
  {
    "text": "anything monitoring its health and telling it to restart I'd like that but maybe I'm trying to save costs so I'm",
    "start": "1921350",
    "end": "1927679"
  },
  {
    "text": "just gonna manage it myself but there's a single VM really okay and the answer is no right even if container starts",
    "start": "1927679",
    "end": "1932899"
  },
  {
    "text": "really fast you're still gonna be in trouble if you know you have customers that care and that might not pay you for",
    "start": "1932899",
    "end": "1939080"
  },
  {
    "text": "your services your whatever it is you're hosting or it has a bad image on the company and so on so ultimately what you",
    "start": "1939080",
    "end": "1945320"
  },
  {
    "text": "really want is at least load balanced VMs so then we get into a situation where I might have two VMs and each of",
    "start": "1945320",
    "end": "1951559"
  },
  {
    "text": "them has one container at port 80 now I can't use port 80 again so I would have",
    "start": "1951559",
    "end": "1957200"
  },
  {
    "text": "to host other containers on different ports maybe have them called by the port 80 container so I could have multiple",
    "start": "1957200",
    "end": "1963379"
  },
  {
    "text": "containers on a machine that's no problem they just can't use the same port because it's a resource that can't be shared right unless I put an index or",
    "start": "1963379",
    "end": "1971690"
  },
  {
    "text": "you know a proxy to do routing and then I have a port 80 receiving everything",
    "start": "1971690",
    "end": "1976940"
  },
  {
    "text": "and that is what's load balanced at the top level and then inside we do the",
    "start": "1976940",
    "end": "1982279"
  },
  {
    "text": "routing right so I still have to sculpt a lot I have to design what am i deploying one of the ports I'm using but",
    "start": "1982279",
    "end": "1988850"
  },
  {
    "text": "it gives me a model that's manageable and even automatable at some point no",
    "start": "1988850",
    "end": "1994129"
  },
  {
    "text": "orchestration involved right so nothing wrong with doing that it still gives you all the benefits of docker for",
    "start": "1994129",
    "end": "1999950"
  },
  {
    "text": "development and the immutable image and the idea of I know that this works here and in every environment the same way",
    "start": "1999950",
    "end": "2005889"
  },
  {
    "text": "but we really need to talk about you know even though it can work without orchestration maybe we want to think",
    "start": "2005889",
    "end": "2012460"
  },
  {
    "text": "about what can orchestration give me on top so that's where the fun starts because we have all these things to",
    "start": "2012460",
    "end": "2018549"
  },
  {
    "text": "think about platforms of course we've I've mentioned already right Amazon Google as your container service",
    "start": "2018549",
    "end": "2024960"
  },
  {
    "text": "mesosphere as a platform that can be deployed to Amazon or Asscher kubernetes",
    "start": "2024960",
    "end": "2032649"
  },
  {
    "text": "which is part of the Google container engine but actually can also be deploy to on Prem Amazon or Azure and docker",
    "start": "2032649",
    "end": "2040419"
  },
  {
    "text": "Enterprise Edition which is actually the swarm native right docker native platform that is now it's been around",
    "start": "2040419",
    "end": "2048010"
  },
  {
    "text": "for a while actually we did a deployment a year ago for customer prototyping but it's come a long way so that's gonna",
    "start": "2048010",
    "end": "2054819"
  },
  {
    "text": "start being a contender in the same space right if it's not already so all of these are options and they're not the",
    "start": "2054819",
    "end": "2060490"
  },
  {
    "text": "only ones I'm listing the ones that are the most you know commonly that I run into but there's actually other options",
    "start": "2060490",
    "end": "2066460"
  },
  {
    "text": "and then you got the infrastructure managing the cluster the management cluster the agent nodes proxy routing",
    "start": "2066460",
    "end": "2072608"
  },
  {
    "text": "discovery you know what kind of load balancing setup do I need in the host environment which docker registry will I",
    "start": "2072609",
    "end": "2078790"
  },
  {
    "text": "use not necessarily hard decision on the registry but just a thing to think about and then we've got the core features",
    "start": "2078790",
    "end": "2085358"
  },
  {
    "text": "right so this is where we get into the meat of why do I need orchestration I need you know something that will allow",
    "start": "2085359",
    "end": "2091658"
  },
  {
    "text": "me to deploy more services when I need to scale them but not have to care about ports right so load balancing discovery",
    "start": "2091659",
    "end": "2097800"
  },
  {
    "text": "and routing all of that kind of goes hand in hand I need auto scaling so that I can have",
    "start": "2097800",
    "end": "2104050"
  },
  {
    "text": "server density so we'll talk about that I need self-healing so that if a container goes down and stops working it will try to heal itself and start again",
    "start": "2104050",
    "end": "2110680"
  },
  {
    "text": "so that I don't have to be watching and and give me tooling that does that automatically out of the box I need you",
    "start": "2110680",
    "end": "2118119"
  },
  {
    "text": "know to be able to perform upgrades in a reliable way right that doesn't actually bring the",
    "start": "2118119",
    "end": "2124119"
  },
  {
    "text": "service down so if I can't deploy the new version then let's not tear down the old one right let's keep the system",
    "start": "2124119",
    "end": "2130210"
  },
  {
    "text": "alive and healthy until we're sure that we've lit up the new version and then we've got you know in general versioning",
    "start": "2130210",
    "end": "2136720"
  },
  {
    "text": "which I won't get into much here in this talk but it's just the concept that I should be able to have side-by-side deployments as well if I need to to have",
    "start": "2136720",
    "end": "2143619"
  },
  {
    "text": "versions that support previous and new features scheduling gives you the idea",
    "start": "2143619",
    "end": "2149170"
  },
  {
    "text": "of okay so every organization platform has master nodes or a master that is",
    "start": "2149170",
    "end": "2155140"
  },
  {
    "text": "basically in charge of quorum and knowing the state and health of all the workers so this master node or that",
    "start": "2155140",
    "end": "2163599"
  },
  {
    "text": "cluster is you know using whatever its consensus algorithm is it's different in the different platforms in order to",
    "start": "2163599",
    "end": "2171089"
  },
  {
    "text": "determine one leader and then obviously ensure that if one of the you know nodes",
    "start": "2171089",
    "end": "2176489"
  },
  {
    "text": "goes down it can failover and elect a new leader and all that's managed as part of that you know topology part of",
    "start": "2176489",
    "end": "2183450"
  },
  {
    "text": "that platform implementation so it's different for DCOs than kubernetes than",
    "start": "2183450",
    "end": "2189599"
  },
  {
    "text": "it is for swarm for example and then things like Amazon they actually don't let you see the master so they provide",
    "start": "2189599",
    "end": "2195749"
  },
  {
    "text": "it for you they implement that as a feature of the cloud and so does Google so you don't see it you don't have to",
    "start": "2195749",
    "end": "2203130"
  },
  {
    "text": "manage it you don't have to allocate it it's just there and so you just worry about your workers and the workers is",
    "start": "2203130",
    "end": "2208979"
  },
  {
    "text": "where you put the containers you always schedule deployments to the master the master decides where can I put those",
    "start": "2208979",
    "end": "2214410"
  },
  {
    "text": "things and it deploys so the easiest way to look at scheduling and constraints is just to look at how we would do that",
    "start": "2214410",
    "end": "2220859"
  },
  {
    "text": "with swarm so I'm gonna take a look at that and again this is just a quick visual just to say hey this is a swarm",
    "start": "2220859",
    "end": "2226920"
  },
  {
    "text": "picture it's one of the topologies that could be deployed to you and you can see it's got the managers which is you know",
    "start": "2226920",
    "end": "2233130"
  },
  {
    "text": "who's managing the health and state of the rest of the cluster usually three to five to seven nodes and then we've got",
    "start": "2233130",
    "end": "2239670"
  },
  {
    "text": "you know the actual agents doing work so all of them look kind of similar and",
    "start": "2239670",
    "end": "2245849"
  },
  {
    "text": "what we're going to do is I'm gonna use commands that make it look like I'm coming in from outside to hit the Mount",
    "start": "2245849",
    "end": "2251009"
  },
  {
    "text": "Master endpoint the master in order to issue commands to schedule services so",
    "start": "2251009",
    "end": "2257969"
  },
  {
    "text": "we'll do that and I'll use constraints like memory constraints - em to tell the",
    "start": "2257969",
    "end": "2266029"
  },
  {
    "text": "cluster I need to reserve you know three gig of ram for this container so that's",
    "start": "2266029",
    "end": "2272039"
  },
  {
    "text": "another concept that starts to matter when we think about orchestration is we don't let loose containers run around",
    "start": "2272039",
    "end": "2277589"
  },
  {
    "text": "using whatever resources they want we learn to estimate what they need when",
    "start": "2277589",
    "end": "2283259"
  },
  {
    "text": "they're deployed now that's a hard job because if you want to estimate that",
    "start": "2283259",
    "end": "2288690"
  },
  {
    "text": "means you have to do drills and you have to learn the topology and how your services behave and learn enough about",
    "start": "2288690",
    "end": "2294569"
  },
  {
    "text": "their behavior and their requirements so that you can give good estimates but what you're trying to do is constrain so",
    "start": "2294569",
    "end": "2300239"
  },
  {
    "text": "noisy neighbors don't bring the server down you're trying to constrain so that you can do some predictions on",
    "start": "2300239",
    "end": "2305510"
  },
  {
    "text": "usage of all the things on the cluster and predictability of available space to",
    "start": "2305510",
    "end": "2310550"
  },
  {
    "text": "do say job execution of things that are queued up and waiting for resources so",
    "start": "2310550",
    "end": "2316330"
  },
  {
    "text": "that's sort of how that works and you know it works that way across all of the platforms but let's go ahead and take a",
    "start": "2316330",
    "end": "2322250"
  },
  {
    "text": "look so I'm going to go into my swarm",
    "start": "2322250",
    "end": "2326050"
  },
  {
    "text": "and we'll go into swarm here and what I'll do is connect to I have a Azure",
    "start": "2327550",
    "end": "2336710"
  },
  {
    "text": "container service has three templates one for swarm one for kubernetes one for DCOs so I deployed the swarm template and I",
    "start": "2336710",
    "end": "2345200"
  },
  {
    "text": "have a cluster up there with one master in three nodes right now okay so it's not actually a high availability cluster",
    "start": "2345200",
    "end": "2351410"
  },
  {
    "text": "because that's a lot of nodes so okay so what I'm gonna do is I'm gonna run a",
    "start": "2351410",
    "end": "2358460"
  },
  {
    "text": "container yeah so I'm gonna run the",
    "start": "2358460",
    "end": "2367460"
  },
  {
    "text": "content API and you're gonna see that I'm looking for a five gig of memory okay so what we need to do is take a",
    "start": "2367460",
    "end": "2374839"
  },
  {
    "text": "look and see if we can do that now how I'm gonna look and see what I've got on",
    "start": "2374839",
    "end": "2379970"
  },
  {
    "text": "the cluster is I'm gonna run info against the cluster and what we're gonna do is scroll up a little bit here and",
    "start": "2379970",
    "end": "2387560"
  },
  {
    "text": "you'll see that I have five images deploy to the whole cluster as it says",
    "start": "2387560",
    "end": "2393140"
  },
  {
    "text": "there's one container and there's one running I've got three nodes so there's",
    "start": "2393140",
    "end": "2399980"
  },
  {
    "text": "three agents one that's got one container running with five gig used and only seven in total and then if I scroll",
    "start": "2399980",
    "end": "2406880"
  },
  {
    "text": "down you can see this guy's got nothing used yet nothing used yet and then the",
    "start": "2406880",
    "end": "2412310"
  },
  {
    "text": "third likewise right so the idea is this is what the manager node is is managing",
    "start": "2412310",
    "end": "2417680"
  },
  {
    "text": "is available resources so when I run that same command again to deploy it's got to find a new node the reason that",
    "start": "2417680",
    "end": "2424580"
  },
  {
    "text": "deployed so fast is cuz I've already downloaded the image because if we had to wait for that that would not be good so and if I run it one more time it",
    "start": "2424580",
    "end": "2432710"
  },
  {
    "text": "should work because I have three nodes but on the last one it's not work so I'm going to start to get failure because it can't find resources",
    "start": "2432710",
    "end": "2439910"
  },
  {
    "text": "available to deploy memory is just one example of such a resource so obviously",
    "start": "2439910",
    "end": "2445130"
  },
  {
    "text": "the ports is another constraint that's a hard constraint right on deployment and",
    "start": "2445130",
    "end": "2450430"
  },
  {
    "text": "other types of constraints we can kind of quickly go through so scheduling",
    "start": "2450430",
    "end": "2461420"
  },
  {
    "text": "means that you take you know a description of what the service requires to run which could be a compose file or",
    "start": "2461420",
    "end": "2467539"
  },
  {
    "text": "a task definition or in this case command line arcs same idea right the run command is taking these args and",
    "start": "2467539",
    "end": "2473180"
  },
  {
    "text": "doing something with it and it's going to schedule the services against the master the nodes that have availability",
    "start": "2473180",
    "end": "2478759"
  },
  {
    "text": "will then pull the image and do their job to run the container master monitors the health and if something stops if the",
    "start": "2478759",
    "end": "2486019"
  },
  {
    "text": "container stops it will help it will restart it if it requires at least a minimum of 1 or 2 running it will try to",
    "start": "2486019",
    "end": "2492140"
  },
  {
    "text": "maintain that at all times so that's the job of the orchestration platform each",
    "start": "2492140",
    "end": "2497900"
  },
  {
    "text": "of them has a way a mechanism for doing so the constraints that you can use for",
    "start": "2497900",
    "end": "2503809"
  },
  {
    "text": "deploying those services can be implicit which is the physical like port or it can be explicit like the CPU and memory",
    "start": "2503809",
    "end": "2510019"
  },
  {
    "text": "and i/o requirements so you're trying to contain the container so that it can you",
    "start": "2510019",
    "end": "2516079"
  },
  {
    "text": "know not again consume resources excessively but again it this is",
    "start": "2516079",
    "end": "2521239"
  },
  {
    "text": "probably the hardest part of working with orchestration platforms is that you now have to understand a little bit",
    "start": "2521239",
    "end": "2526880"
  },
  {
    "text": "about how much should I give this container and how do I know it's enough now you'll find out pretty fast if you",
    "start": "2526880",
    "end": "2533509"
  },
  {
    "text": "didn't give it enough and you run in dev and test and UAT and stuff just not working you'll get",
    "start": "2533509",
    "end": "2538910"
  },
  {
    "text": "the proper error right like out of resources etc but you have to do drills",
    "start": "2538910",
    "end": "2544420"
  },
  {
    "text": "this is what sort of means we have to do some really good practices as part of our plan in an orchestration adoption of",
    "start": "2544420",
    "end": "2552890"
  },
  {
    "text": "an orchestration platform it's not just about that it's about the whole DevOps story around it it's about understanding",
    "start": "2552890",
    "end": "2559089"
  },
  {
    "text": "how to recover from failure and really testing it out it's about understanding",
    "start": "2559089",
    "end": "2564259"
  },
  {
    "text": "what can push that container to the limit like had examples in Amazon where you know we",
    "start": "2564259",
    "end": "2569480"
  },
  {
    "text": "we have let's say a search container that uses a lot of memory because it loads a bunch of information in memory",
    "start": "2569480",
    "end": "2576230"
  },
  {
    "text": "so that it can give you like a leucine result like a shopping cart or something and you know we had to hit that one hard",
    "start": "2576230",
    "end": "2583220"
  },
  {
    "text": "to see how much do we really think we need to give it because it's one of the heaviest containers in our solution for",
    "start": "2583220",
    "end": "2588500"
  },
  {
    "text": "example so doing those drills is is is key standard operating procedures around",
    "start": "2588500",
    "end": "2593720"
  },
  {
    "text": "recovering from those and tuning the system for that go live and then that",
    "start": "2593720",
    "end": "2598820"
  },
  {
    "text": "helps you understand how to continue tuning as things evolve right so it's",
    "start": "2598820",
    "end": "2604220"
  },
  {
    "text": "it's it's not as bad as it sounds it's just that it's not the same as hey why don't I just deploy that and you know",
    "start": "2604220",
    "end": "2609800"
  },
  {
    "text": "let's see how it's going yeah so all of these resource constraints are parts of",
    "start": "2609800",
    "end": "2616190"
  },
  {
    "text": "you know co-locating potentially containers they should always go together or these should never be together and and other types of",
    "start": "2616190",
    "end": "2622880"
  },
  {
    "text": "heuristics so it's it's it's useful for helping understand the distribution of",
    "start": "2622880",
    "end": "2627920"
  },
  {
    "text": "the containers across the whole solution and the whole platform now another thing we're looking for here is server density",
    "start": "2627920",
    "end": "2633820"
  },
  {
    "text": "we're looking for the idea that I can have multiple instances of containers and you know whatever space is available",
    "start": "2633820",
    "end": "2640460"
  },
  {
    "text": "fill it up but if we don't leave room for upgrades and all of a sudden when I'm ready to do an update swap out you",
    "start": "2640460",
    "end": "2647090"
  },
  {
    "text": "know the red one for a new version I can't do it because I have no space now so you have to have some space available",
    "start": "2647090",
    "end": "2653750"
  },
  {
    "text": "in CPU memory and so on disk space so that you can actually do upgrades roll",
    "start": "2653750",
    "end": "2660410"
  },
  {
    "text": "out updates and roll back if something goes wrong because otherwise you get",
    "start": "2660410",
    "end": "2665510"
  },
  {
    "text": "stuck so again having space is important but then you can use that space to run jobs so I can execute a job that just",
    "start": "2665510",
    "end": "2672470"
  },
  {
    "text": "you know spins up a whole bunch of services using whatever space is free finishes off and is",
    "start": "2672470",
    "end": "2679370"
  },
  {
    "text": "and then if my other containers get deployed and start using more space we start looking at scale out for instances",
    "start": "2679370",
    "end": "2685220"
  },
  {
    "text": "of the nodes or scale up by putting you know more density on each node to keep",
    "start": "2685220",
    "end": "2690830"
  },
  {
    "text": "them busy so orchestration UI there is a native UI",
    "start": "2690830",
    "end": "2697310"
  },
  {
    "text": "for swarm it's called docker Enterprise Edition and it's it comes with a fee and there's",
    "start": "2697310",
    "end": "2703730"
  },
  {
    "text": "actually a new thing that just came out this week which you can set up a trial for a one day demo and you can keep",
    "start": "2703730",
    "end": "2711020"
  },
  {
    "text": "renewing it so it just gives you a cluster waiting and ready to go it provides you with a UI on top of swarm",
    "start": "2711020",
    "end": "2716840"
  },
  {
    "text": "so that you can see what are the services what are the nodes how much resources are used things that you're",
    "start": "2716840",
    "end": "2722330"
  },
  {
    "text": "gonna see when I go into DCOs so I'm going to spend more time on the other platforms right now but just wanted to",
    "start": "2722330",
    "end": "2727640"
  },
  {
    "text": "point out that that also is another example it's just it's more of the same right so let's talk about load balancing",
    "start": "2727640",
    "end": "2734300"
  },
  {
    "text": "discovery with DCOs and as your container service so I mentioned Azure container service can have DCOs",
    "start": "2734300",
    "end": "2740660"
  },
  {
    "text": "can be swarm or can be kubernetes and right now what that means is provision me a bunch of nodes here's my",
    "start": "2740660",
    "end": "2748310"
  },
  {
    "text": "master I want three or five master nodes here are my workers or agents and those",
    "start": "2748310",
    "end": "2754880"
  },
  {
    "text": "are maybe starting out at three or five could be seven could be nine it's a lot of notes right but you're not doing this",
    "start": "2754880",
    "end": "2762320"
  },
  {
    "text": "for like two containers you're doing this because you need a solution okay so load balancing discovery would be",
    "start": "2762320",
    "end": "2768470"
  },
  {
    "text": "something that all of the platform's cover I just figured it would be worth showing with DCOs and again it's gonna",
    "start": "2768470",
    "end": "2773870"
  },
  {
    "text": "be much of the same masters workers all of that this is what the resource",
    "start": "2773870",
    "end": "2779200"
  },
  {
    "text": "deploys for you on at on em on the on the azure container service template so",
    "start": "2779200",
    "end": "2786590"
  },
  {
    "text": "without a load balancer what I might end up doing is I'd have a private agent with an API on it exposing at port 3001",
    "start": "2786590",
    "end": "2793820"
  },
  {
    "text": "and my web app would have to know what port that's at and it would have to you know maybe expose itself through to the",
    "start": "2793820",
    "end": "2801080"
  },
  {
    "text": "azure load balancer at port 80 so there's no internal load balancer setup this would be like a simple example of",
    "start": "2801080",
    "end": "2806810"
  },
  {
    "text": "hey I'm not really taking advantage of you know service discovery and load balancing and",
    "start": "2806810",
    "end": "2812210"
  },
  {
    "text": "networking what I really want to get to is this where the question marks are I don't care what port you are I'm gonna",
    "start": "2812210",
    "end": "2818510"
  },
  {
    "text": "add three four five seven instances of the API to handle load right now and as",
    "start": "2818510",
    "end": "2823610"
  },
  {
    "text": "that load is required it doesn't really matter because the front-end just needs",
    "start": "2823610",
    "end": "2828650"
  },
  {
    "text": "to know what is the port that the load balancer looks to for you know accessing",
    "start": "2828650",
    "end": "2833930"
  },
  {
    "text": "all those instances of web or API containers so it should be fairly",
    "start": "2833930",
    "end": "2840290"
  },
  {
    "text": "automatic and that's kind of what I figured I'd show quickly with DCOs which",
    "start": "2840290",
    "end": "2846800"
  },
  {
    "text": "ignore the slide so let's go to DCOs and",
    "start": "2846800",
    "end": "2853340"
  },
  {
    "text": "we'll go here too yeah okay so I have a tunnel instruction",
    "start": "2853340",
    "end": "2861170"
  },
  {
    "text": "so I've already got cluster up there I've already deployed a couple things the web app and API that we already know and love is up there ready to go and the",
    "start": "2861170",
    "end": "2869420"
  },
  {
    "text": "way that I did that I'll just quickly show you so the DCOs is what I'm going to do is",
    "start": "2869420",
    "end": "2875390"
  },
  {
    "text": "run this tunnel and that will allow me to go through localhost port four five five five so that I can hit it from",
    "start": "2875390",
    "end": "2882080"
  },
  {
    "text": "outside and see the management UI that's presented so I've opened that up to my machine so let's do this oops",
    "start": "2882080",
    "end": "2890260"
  },
  {
    "text": "so we'll do tunnel",
    "start": "2890260",
    "end": "2894490"
  },
  {
    "text": "and there you go so let's go to D cos",
    "start": "2898350",
    "end": "2904530"
  },
  {
    "text": "and D cos is gonna show me things like how many nodes do I have how much memory",
    "start": "2904530",
    "end": "2911380"
  },
  {
    "text": "and CPU and disk am I using notice it's a flat line that's because I'm telling",
    "start": "2911380",
    "end": "2916390"
  },
  {
    "text": "it how much each container needs it doesn't vary it's saying I need this it's a reservation right so we reserved",
    "start": "2916390",
    "end": "2923260"
  },
  {
    "text": "what we need kind of go down here you can see how many tasks are running on each how much CPU is less on each node",
    "start": "2923260",
    "end": "2929350"
  },
  {
    "text": "and so on and what I had done is I deployed a service so I went into the",
    "start": "2929350",
    "end": "2935230"
  },
  {
    "text": "universe and I deployed a package for marathon load balancer so I installed the load balancer that's part and",
    "start": "2935230",
    "end": "2941610"
  },
  {
    "text": "available to DCOs so there's other packages as well right so marathon",
    "start": "2941610",
    "end": "2949680"
  },
  {
    "text": "marathon load bouncer right so I already installed that in fact I installed two",
    "start": "2949800",
    "end": "2954970"
  },
  {
    "text": "one for external and one for internal use and then for services you can see",
    "start": "2954970",
    "end": "2961420"
  },
  {
    "text": "I've got all the services running but if I wanted to deploy a new service right I could go here to single container and",
    "start": "2961420",
    "end": "2967360"
  },
  {
    "text": "what this should look like to you is a compose equivalent right it's essentially a task definition the",
    "start": "2967360",
    "end": "2973750"
  },
  {
    "text": "service definition and it's going to ask me things like what do you want to call it API to what's the container image das blonde",
    "start": "2973750",
    "end": "2980310"
  },
  {
    "text": "WAC you know content API for example how much CPU T think you need again these",
    "start": "2980310",
    "end": "2987220"
  },
  {
    "text": "are the kind of best guess that you start with and then you start thinking okay how do I drill it how do I see if",
    "start": "2987220",
    "end": "2993490"
  },
  {
    "text": "I'm going over and then I'm gonna go in here and set up things like networking like am I gonna be part of the bridge",
    "start": "2993490",
    "end": "2999580"
  },
  {
    "text": "network probably what are my endpoints container port 3000 one set Iraq cetera",
    "start": "2999580",
    "end": "3004590"
  },
  {
    "text": "or I can go to the JSON editor and I can put paste that or I can post that you",
    "start": "3004590",
    "end": "3009870"
  },
  {
    "text": "know through obviously the the marathon API so it's still just this it's a task",
    "start": "3009870",
    "end": "3015480"
  },
  {
    "text": "definition it's saying where to get the image how many minimum instances I want",
    "start": "3015480",
    "end": "3020550"
  },
  {
    "text": "to have running all the time if I want to plot a supply that and what are my constraints you know I'm",
    "start": "3020550",
    "end": "3026619"
  },
  {
    "text": "going to CPU I need etc and that will start to sort of populate the nodes and leave less resources available so I've",
    "start": "3026619",
    "end": "3034179"
  },
  {
    "text": "already gone through that process but you know let's go see an actual service running so I'll go over here and we'll",
    "start": "3034179",
    "end": "3040569"
  },
  {
    "text": "cancel or just guard and let's hit up the actual service so here's my API and",
    "start": "3040569",
    "end": "3048099"
  },
  {
    "text": "if I go into configuration and I come in",
    "start": "3048099",
    "end": "3053380"
  },
  {
    "text": "here and look at edit this would have been what I deployed right so again we",
    "start": "3053380",
    "end": "3059140"
  },
  {
    "text": "don't have to inspect it in great depth but just to give you sort of a taste of all the features you know this is you",
    "start": "3059140",
    "end": "3065890"
  },
  {
    "text": "know the the docker image this is my container port and this is my service port so this is where the load balancer",
    "start": "3065890",
    "end": "3072219"
  },
  {
    "text": "comes in I can now add as many instances I want of the API and then the web app",
    "start": "3072219",
    "end": "3078099"
  },
  {
    "text": "is only pointing at port 10,000 one at the internal load balancer so that load",
    "start": "3078099",
    "end": "3083140"
  },
  {
    "text": "balancer will handle for me that automatic sort of scale out and",
    "start": "3083140",
    "end": "3088179"
  },
  {
    "text": "networking and discovery capability that load balancing across the container instances which I'm looking for and so",
    "start": "3088179",
    "end": "3094689"
  },
  {
    "text": "to to take a look at that what I would do is go to my service and right now",
    "start": "3094689",
    "end": "3104729"
  },
  {
    "text": "let's go to instances and this is",
    "start": "3104729",
    "end": "3110109"
  },
  {
    "text": "actually showing the tasks that's running so I'm going to go back one ok and what I can do is scale it so I can",
    "start": "3110109",
    "end": "3118150"
  },
  {
    "text": "add like say for instances and scale the service and what that will do is",
    "start": "3118150",
    "end": "3123989"
  },
  {
    "text": "schedule to scale the the four and as long as I have enough space enough",
    "start": "3123989",
    "end": "3129369"
  },
  {
    "text": "resources available to do so it will schedule and deploy those if it didn't have enough it would continue to try to",
    "start": "3129369",
    "end": "3135069"
  },
  {
    "text": "deploy it until resources are available and I would get notifications that things can't schedule the same way as",
    "start": "3135069",
    "end": "3141249"
  },
  {
    "text": "swarm did and rather it being an error that surfaces and blows everything up not that swarm does that it also has",
    "start": "3141249",
    "end": "3147489"
  },
  {
    "text": "recovery mechanisms but it will just surface as keep retrying like pretty much forever right it's gonna go into",
    "start": "3147489",
    "end": "3153759"
  },
  {
    "text": "waiting state until resources are finally available so this will try to deploy and if I look",
    "start": "3153759",
    "end": "3160270"
  },
  {
    "text": "at deployments it should show my instances is it not doing that",
    "start": "3160270",
    "end": "3166450"
  },
  {
    "text": "interesting scale interesting",
    "start": "3166450",
    "end": "3173550"
  },
  {
    "text": "okay so it is I'm probably just having refresh issues here which could be",
    "start": "3180710",
    "end": "3186650"
  },
  {
    "text": "happening or the pipe broke no",
    "start": "3186650",
    "end": "3192818"
  },
  {
    "text": "Internet could be faster okay so there",
    "start": "3193580",
    "end": "3200480"
  },
  {
    "text": "it is four instances so I'm just I'm not getting the refresh fast enough to show you but that now has four task instances",
    "start": "3200480",
    "end": "3206630"
  },
  {
    "text": "running now what's interesting about that is the app if I actually go and run the app endpoint so I think it's this",
    "start": "3206630",
    "end": "3214970"
  },
  {
    "text": "guy this is DCOs and what I need to do is go",
    "start": "3214970",
    "end": "3221900"
  },
  {
    "text": "over to my DCOs so this is my cluster in Azure when I",
    "start": "3221900",
    "end": "3227510"
  },
  {
    "text": "provisioned it it actually did all this stuff for me it deployed you know public IPs and an agent pool and a master pool",
    "start": "3227510",
    "end": "3234620"
  },
  {
    "text": "and so on and if I look for my agent load balancer probably up here a little",
    "start": "3234620",
    "end": "3241100"
  },
  {
    "text": "bit agent IP this will give me my DNS name",
    "start": "3241100",
    "end": "3247220"
  },
  {
    "text": "that I need to hit so this is the DNS that I should hit to get to the Web App",
    "start": "3247220",
    "end": "3256090"
  },
  {
    "text": "and it should hit speakers and be able",
    "start": "3264250",
    "end": "3269349"
  },
  {
    "text": "to show me the speakers because it's already set up to hit port 10,000 1 to find any of the available for AP is",
    "start": "3269349",
    "end": "3276570"
  },
  {
    "text": "somewhere in there loading slowly perhaps was working still loading and I",
    "start": "3276570",
    "end": "3287830"
  },
  {
    "text": "also have a stats page that might be a better one to hit so my stats page will show round-robin a through that's plural",
    "start": "3287830",
    "end": "3297660"
  },
  {
    "text": "there so in my stats you can see the task ID that would tell me if that",
    "start": "3297660",
    "end": "3304900"
  },
  {
    "text": "changes which instance it's hitting so if I were to refresh task ID should",
    "start": "3304900",
    "end": "3312250"
  },
  {
    "text": "change so this is now ending in 7a and eventually it should round-robin between",
    "start": "3312250",
    "end": "3318490"
  },
  {
    "text": "the different instances",
    "start": "3318490",
    "end": "3322320"
  },
  {
    "text": "one of these moments",
    "start": "3325690",
    "end": "3329529"
  },
  {
    "text": "so or could be changing at the front and",
    "start": "3335109",
    "end": "3340479"
  },
  {
    "text": "I'm not noticing but the point is that I did this just so that we could track the",
    "start": "3340479",
    "end": "3345759"
  },
  {
    "text": "round-robin between each of the instances so I think this did change because it was a date before so now it's",
    "start": "3345759",
    "end": "3352239"
  },
  {
    "text": "d8 it's just ending the same 7a so you can see a bunch of different task definitions and here is what it was",
    "start": "3352239",
    "end": "3360729"
  },
  {
    "text": "bouncing between so the point is when we think about the orchestration platform scheduling is one thing the other thing",
    "start": "3360729",
    "end": "3367059"
  },
  {
    "text": "is low balancing discovery and the ability to employ more instances and not care about stitching container",
    "start": "3367059",
    "end": "3373089"
  },
  {
    "text": "you know ports and things like that just have it be accessible through some load balancing capability you can do the same",
    "start": "3373089",
    "end": "3378940"
  },
  {
    "text": "in Amazon it requires setting up the alb to do so so it's a bit more",
    "start": "3378940",
    "end": "3383979"
  },
  {
    "text": "infrastructure as opposed to internal to you know the orchestration aspects because that's hidden from you in Amazon",
    "start": "3383979",
    "end": "3390069"
  },
  {
    "text": "and in Google interestingly you don't even think about it you just say deploy service here's how many I want you don't",
    "start": "3390069",
    "end": "3396339"
  },
  {
    "text": "even see the in in kubernetes so you don't even see the the networking aspect you just say I want it to be a service",
    "start": "3396339",
    "end": "3402609"
  },
  {
    "text": "and then as you scale it it automatically knows how to stitch up to the DNS so it's kind of invisible it",
    "start": "3402609",
    "end": "3409059"
  },
  {
    "text": "doesn't make one better than the other really I mean it's just each of them has these little things they do in an interesting way that might be pleasant",
    "start": "3409059",
    "end": "3415329"
  },
  {
    "text": "and then there's other things the others do better right or have a better UI or a better experience or better monitoring",
    "start": "3415329",
    "end": "3420969"
  },
  {
    "text": "visuals and things like that out of the box so you can ultimately achieve the same thing with all of them ok ok now on",
    "start": "3420969",
    "end": "3429699"
  },
  {
    "text": "that note we were talking about scale and we're talking about you know load",
    "start": "3429699",
    "end": "3437410"
  },
  {
    "text": "balancing discovery heeling is another one so in DCOs if I were to have a health endpoint on the API that failed",
    "start": "3437410",
    "end": "3443410"
  },
  {
    "text": "then it would restart that task and if it keeps failing then it would keep",
    "start": "3443410",
    "end": "3450130"
  },
  {
    "text": "trying to restart it to infinity and I'd start seeing a lot of failed tasks and that can be something I alerted on the",
    "start": "3450130",
    "end": "3456099"
  },
  {
    "text": "idea around the platform is if a container fails and you're indicating I",
    "start": "3456099",
    "end": "3461170"
  },
  {
    "text": "need at least one or two instances then the law of the land is you have to restart it right so if I say I need to",
    "start": "3461170",
    "end": "3468400"
  },
  {
    "text": "instances and both go down it's going to try and start two more and it will continually try to do that but if I have",
    "start": "3468400",
    "end": "3474010"
  },
  {
    "text": "a fatal failure like I can't reach the database the API needs to run healthy and my health endpoints checking that",
    "start": "3474010",
    "end": "3480370"
  },
  {
    "text": "then it may not come back up until I fix the problem down below and so that's the idea right so we're gonna have this",
    "start": "3480370",
    "end": "3486700"
  },
  {
    "text": "concept of self healing and recovery from things and then the autoscale part",
    "start": "3486700",
    "end": "3491770"
  },
  {
    "text": "is really more about I you know have load maybe I'm hitting some sort of CPU",
    "start": "3491770",
    "end": "3497560"
  },
  {
    "text": "or memory threshold and as such what's happening is I need to scale out either the physical nodes or before that maybe",
    "start": "3497560",
    "end": "3504850"
  },
  {
    "text": "fill with more density the actual nodes with the container instances so that we're making the most use out of the VMs",
    "start": "3504850",
    "end": "3512080"
  },
  {
    "text": "that we have available right now likewise things like I want to run a job and I need to read some queue and",
    "start": "3512080",
    "end": "3519430"
  },
  {
    "text": "process if there's available survey labrie sources it can run and do that that work so let's take a look at Amazon",
    "start": "3519430",
    "end": "3526840"
  },
  {
    "text": "and Google container engine for that and again this is just a picture coming out of Amazon that shows you with ECS you",
    "start": "3526840",
    "end": "3533830"
  },
  {
    "text": "don't see the management cluster it's just part of the you know the Amazon hosting you know environment so that is",
    "start": "3533830",
    "end": "3542290"
  },
  {
    "text": "there there is always a management cluster that's monitoring the health and state of the ECS nodes but you're now",
    "start": "3542290",
    "end": "3548020"
  },
  {
    "text": "just dealing with the actual VMS themselves for the agents the same thing",
    "start": "3548020",
    "end": "3553870"
  },
  {
    "text": "goes for Google container engine but kubernetes as a platform just like DCOs",
    "start": "3553870",
    "end": "3559660"
  },
  {
    "text": "and swarm when you deploy those you get the masters and the agents and notes so it's important to understand that once",
    "start": "3559660",
    "end": "3566530"
  },
  {
    "text": "you start doing that you're gonna pay for both sides you're indirectly paying for both sides",
    "start": "3566530",
    "end": "3571900"
  },
  {
    "text": "in Amazon and Google just that they're hiding the complexity of adoption having to manage them here so you're not",
    "start": "3571900",
    "end": "3577720"
  },
  {
    "text": "managing a zookeeper or entity it's it's under the covers instead of you having the the cluster and having to care for",
    "start": "3577720",
    "end": "3584590"
  },
  {
    "text": "that health so obviously there's some desirability in that no no question",
    "start": "3584590",
    "end": "3591010"
  },
  {
    "text": "write something nice about that when we look at things like Amazon we're gonna have thing possibly an alb that does the",
    "start": "3591010",
    "end": "3598150"
  },
  {
    "text": "load balancing so this is just a picture to give you that I of the load balancing and discovery how would I set that up I can do that with a",
    "start": "3598150",
    "end": "3604960"
  },
  {
    "text": "lbs so I can start deploying additional containers and they'll stitch up to the alb and there's a really long-winded way",
    "start": "3604960",
    "end": "3611470"
  },
  {
    "text": "to do that if anybody is interested in the tutorials across all four of these platforms that I do in workshops um",
    "start": "3611470",
    "end": "3617170"
  },
  {
    "text": "you're welcome to email me for that because I don't make it public that I'm happy to share it with people here because we're kind of covering all of",
    "start": "3617170",
    "end": "3623140"
  },
  {
    "text": "them it's actually kind of fun you go through the same process with every platform so it's kind of hopefully it",
    "start": "3623140",
    "end": "3629230"
  },
  {
    "text": "still works across all of them because of course they change right so what I'm gonna do is I'm gonna go into Amazon and",
    "start": "3629230",
    "end": "3636630"
  },
  {
    "text": "let's say a couple things so let's go to",
    "start": "3636630",
    "end": "3644788"
  },
  {
    "text": "over here okay so I'm gonna go to ec2 and I'm gonna take a quick look at health and recovery so right now what I",
    "start": "3646980",
    "end": "3654279"
  },
  {
    "text": "have is this Web task here and you can see our desired task - and running tasks - if I go to the tasks and I take a look",
    "start": "3654279",
    "end": "3662680"
  },
  {
    "text": "at one of these web tasks and I select it and I stop it then what that's gonna",
    "start": "3662680",
    "end": "3668920"
  },
  {
    "text": "do is take away one of my healthy tasks and it's going to show me that I have one running task and desire tasks - the",
    "start": "3668920",
    "end": "3676150"
  },
  {
    "text": "whole idea of self-healing is that my task definition is saying I want desired - and I will allow scale-up of double",
    "start": "3676150",
    "end": "3683049"
  },
  {
    "text": "that for example and so again these are things that you might configure in any of these platforms all of them support",
    "start": "3683049",
    "end": "3689079"
  },
  {
    "text": "some variation of this and so what'll happen is as i refresh it will go ahead",
    "start": "3689079",
    "end": "3694150"
  },
  {
    "text": "and replenish that and eventually what we'll see is that there's two again not it won't take very long to get there in",
    "start": "3694150",
    "end": "3701049"
  },
  {
    "text": "fact the Refresh might take longer than the actual act so so that's one thing to",
    "start": "3701049",
    "end": "3706720"
  },
  {
    "text": "consider so we'll see that is is going to recover on its own the other thing I wanted to show you is I can actually go",
    "start": "3706720",
    "end": "3714880"
  },
  {
    "text": "to this web app and right now I'm running health web seven so I'm running",
    "start": "3714880",
    "end": "3719950"
  },
  {
    "text": "version seven of my task definition which does not require a health check on the API and so what I'm gonna do is I'm",
    "start": "3719950",
    "end": "3726910"
  },
  {
    "text": "going to break it I'm gonna go in and do an update and right now health web seven",
    "start": "3726910",
    "end": "3733870"
  },
  {
    "text": "if I go to health web 8 it's now going to expect the API to return healthy but",
    "start": "3733870",
    "end": "3740480"
  },
  {
    "text": "I'm gonna have the incorrect URL because I'm going to forget to put the environment variable that tells it where",
    "start": "3740480",
    "end": "3746090"
  },
  {
    "text": "the health check is just as a way to illustrate the kinds of failure that could happen so instead of failing on",
    "start": "3746090",
    "end": "3751970"
  },
  {
    "text": "the other side I'm failing on the client-side so I'm not gonna be able to validate health and so therefore this is is going",
    "start": "3751970",
    "end": "3758990"
  },
  {
    "text": "to be failing so right now I have task 7 deployed with two instances probably",
    "start": "3758990",
    "end": "3765050"
  },
  {
    "text": "again we'll go check and then I'm going to try to deploy version 8 so it's going to try and if we go to view the service",
    "start": "3765050",
    "end": "3772630"
  },
  {
    "text": "it's going to try to deploy the next version so you see it's over here health",
    "start": "3772630",
    "end": "3780440"
  },
  {
    "text": "web 7 is running and somewhere let's go back up",
    "start": "3780440",
    "end": "3787690"
  },
  {
    "text": "there we go yeah so you see it had two again and you can see pending so it's pending on eight it's never going to get",
    "start": "3790970",
    "end": "3797630"
  },
  {
    "text": "successful so it's just gonna keep retrying until I do something to say let's stop this nonsense so it will pend",
    "start": "3797630",
    "end": "3805850"
  },
  {
    "text": "it will try to run it will fail immediately and then therefore seven is the one stitch to the load balancer",
    "start": "3805850",
    "end": "3811300"
  },
  {
    "text": "until eight comes online since eight won't come online we won't get there so",
    "start": "3811300",
    "end": "3816350"
  },
  {
    "text": "what I'm gonna do is update again and this time I'm going to update to the version that fixes the problem so I'm",
    "start": "3816350",
    "end": "3822200"
  },
  {
    "text": "sort of simulating that immutable you know task definition also and I'm",
    "start": "3822200",
    "end": "3828260"
  },
  {
    "text": "progressing through what could have happened in a real scenario right so let me go ahead and update that service and",
    "start": "3828260",
    "end": "3833450"
  },
  {
    "text": "then go view again and this time it will show that it's trying to launch the tasks it's got eight running that's",
    "start": "3833450",
    "end": "3841550"
  },
  {
    "text": "gonna fail right it'll show running for a second just won't stitch to the load balancer until it's verified as healthy",
    "start": "3841550",
    "end": "3847250"
  },
  {
    "text": "which it won't get to be healthy so this is just showing that process and if you look in the logs you can see the history",
    "start": "3847250",
    "end": "3853010"
  },
  {
    "text": "of that like you'll see that it stops and tries again it stops and tries again so it's all visible to you so this is",
    "start": "3853010",
    "end": "3858620"
  },
  {
    "text": "gonna now come back and try to do nine and then nine will become healthy and it",
    "start": "3858620",
    "end": "3864470"
  },
  {
    "text": "will come online okay so what I'm illustrating here is just again the concept of I can define how many I need",
    "start": "3864470",
    "end": "3870710"
  },
  {
    "text": "to be healthy and my cluster I need to minimum instances and it will try to bring the two of the new version and do",
    "start": "3870710",
    "end": "3876560"
  },
  {
    "text": "a safe rollout of that without tearing down what maybe the front-end is looking for right so if this was an API",
    "start": "3876560",
    "end": "3882830"
  },
  {
    "text": "everything would stay up and running waiting for the new one to come online and so this is now pending nine this",
    "start": "3882830",
    "end": "3889460"
  },
  {
    "text": "will become successful and once it comes online and is verified as healthy it will go ahead and do retire seven take",
    "start": "3889460",
    "end": "3897320"
  },
  {
    "text": "it out of the load balancer and take it away all the platforms support this kind of concept as well so this is what",
    "start": "3897320",
    "end": "3903140"
  },
  {
    "text": "you're getting out of orchestration you know there's a lot of power right behind that beyond what you would have had to",
    "start": "3903140",
    "end": "3908420"
  },
  {
    "text": "do if you're just looking at VMs and manually stitching these things together now the other thing that's really powerful is the auto scale stories right",
    "start": "3908420",
    "end": "3916550"
  },
  {
    "text": "so Auto scale in a cloud provider is is going to be something that's usually provided on two levels one is scale",
    "start": "3916550",
    "end": "3923900"
  },
  {
    "text": "the containers on the nose to fill density like we talked about and the other is to scale the actual physical",
    "start": "3923900",
    "end": "3929720"
  },
  {
    "text": "agents on demand I'm not a fan of you know you have to limit your auto scale",
    "start": "3929720",
    "end": "3936260"
  },
  {
    "text": "because I think when you have a peak or a burst that's unexpected you can end up with 3,000 machines and pay a lot of",
    "start": "3936260",
    "end": "3942829"
  },
  {
    "text": "money and you weren't really expecting that and and it might be for the wrong reason right it could be sort of a red",
    "start": "3942829",
    "end": "3949010"
  },
  {
    "text": "herring something else that triggered it in the system so in fact you like to look at patterns and be monitoring that",
    "start": "3949010",
    "end": "3955069"
  },
  {
    "text": "and have a sense of the peaks that come and go on a weekly basis on a daily basis on a yearly basis and be prepared",
    "start": "3955069",
    "end": "3963079"
  },
  {
    "text": "for those things but waiting for auto-scale to address it it's often too late because it might take 15 minutes",
    "start": "3963079",
    "end": "3968690"
  },
  {
    "text": "for the scale out to even happen and by then you've already got angry customers so you know relying on that alone I'm",
    "start": "3968690",
    "end": "3976190"
  },
  {
    "text": "just saying I wouldn't necessarily do but filling the density of the containers yes and then potentially",
    "start": "3976190",
    "end": "3982010"
  },
  {
    "text": "doing you know some Auto scale with an upper limit for this unexpected situation and that's how we define it",
    "start": "3982010",
    "end": "3989029"
  },
  {
    "text": "for example in Amazon we would say only scaled by 200 percent of what we have now or 100 percent of what we have now",
    "start": "3989029",
    "end": "3995569"
  },
  {
    "text": "so if I were to refresh this it would probably show me that nine is online and",
    "start": "3995569",
    "end": "4002910"
  },
  {
    "text": "seven is gone but I don't think we're having a lot of luck with UI refresh so",
    "start": "4002910",
    "end": "4009160"
  },
  {
    "text": "ooh that was unexpected",
    "start": "4009160",
    "end": "4015630"
  },
  {
    "text": "here we go so okay so what I was going to do is actually take you to Google and",
    "start": "4019630",
    "end": "4026240"
  },
  {
    "text": "let's go and take a look at the Google container engine dashboard because what",
    "start": "4026240",
    "end": "4031640"
  },
  {
    "text": "I'm gonna do is gonna run a load test against Amazon and that will take it through a scale out and a scale up so",
    "start": "4031640",
    "end": "4038359"
  },
  {
    "text": "it's going to actually density of containers and then it's also going to do a scale out now we're not going to",
    "start": "4038359",
    "end": "4046069"
  },
  {
    "text": "wait for it I've got screenshots that show that it happened but I just wanted to get you an idea of how that starts",
    "start": "4046069",
    "end": "4051619"
  },
  {
    "text": "with monitoring and watch so if I were to come into Google you can see that I",
    "start": "4051619",
    "end": "4057230"
  },
  {
    "text": "have a you know in my Google platform I can see my Google container engine I can",
    "start": "4057230",
    "end": "4063050"
  },
  {
    "text": "come in here and look at the workloads or the clusters that I have I have a cluster for dab and test and you ATM",
    "start": "4063050",
    "end": "4068690"
  },
  {
    "text": "prod for example or other heuristics I've got Web API and content API",
    "start": "4068690",
    "end": "4073760"
  },
  {
    "text": "deployed when I deployed these services their discovery and load balancing was",
    "start": "4073760",
    "end": "4080119"
  },
  {
    "text": "taken care of for me so I didn't have to think about it again it's a serviced description but I didn't have to say",
    "start": "4080119",
    "end": "4085220"
  },
  {
    "text": "anything about load balancing and stitching it just by default gave me a public IP and stitched you know DNS in",
    "start": "4085220",
    "end": "4092839"
  },
  {
    "text": "for me so that the web app could call it so each of these is basically just a service with a service description as",
    "start": "4092839",
    "end": "4099230"
  },
  {
    "text": "you would expect that gets deployed I might not come in here to do that description and in fact normally I'm not",
    "start": "4099230",
    "end": "4105080"
  },
  {
    "text": "going to come to this UI at all this is my holistic picture of Google Cloud just like Amazon has it's for Amazon and",
    "start": "4105080",
    "end": "4111410"
  },
  {
    "text": "Azure Fraser but what I do want to do is go to the kubernetes dashboard to see things I don't think that's running",
    "start": "4111410",
    "end": "4119210"
  },
  {
    "text": "right now so what I'm going to do is we'll go into cute control this will",
    "start": "4119210",
    "end": "4129350"
  },
  {
    "text": "show the pods that are running right now so I've got actually you know the API and web both running so I've got two",
    "start": "4129350",
    "end": "4135199"
  },
  {
    "text": "instances of each and if I do a cute control proxy then what that will do is",
    "start": "4135199",
    "end": "4140810"
  },
  {
    "text": "serve up on one 27001 so that I can refresh over here and now I have my UI",
    "start": "4140810",
    "end": "4146420"
  },
  {
    "text": "for kubernetes what I would get in Amazon in Asia and everywhere else and clearly",
    "start": "4146420",
    "end": "4151480"
  },
  {
    "text": "I'm gonna go a few more minutes over time because there's six platforms in an hour but maybe you can actually forgive me that because you know that's almost",
    "start": "4151480",
    "end": "4158589"
  },
  {
    "text": "done so what's going to happen here is I've I've got kubernetes up and running",
    "start": "4158590",
    "end": "4165460"
  },
  {
    "text": "and now I can come in here and I can take a look at deployments that have happened I've got my API and my web I can scroll down a little bit and look at",
    "start": "4165460",
    "end": "4172120"
  },
  {
    "text": "the services from that perspective and it will talk about load balancing endpoints and things like that I can",
    "start": "4172120",
    "end": "4178089"
  },
  {
    "text": "come in here and look at pods which is really how do you a couple multiple containers and it gives me overall usage",
    "start": "4178090",
    "end": "4184410"
  },
  {
    "text": "statistics and and other details and what I'm gonna do is I'm just going to",
    "start": "4184410",
    "end": "4190569"
  },
  {
    "text": "go ahead and run the load test here so",
    "start": "4190570",
    "end": "4195880"
  },
  {
    "text": "let's go to here and",
    "start": "4195880",
    "end": "4202739"
  },
  {
    "text": "that's my swarm that's my G cloud there we go okay so um",
    "start": "4205400",
    "end": "4210920"
  },
  {
    "text": "apply oops there we go so it's my load",
    "start": "4210920",
    "end": "4219200"
  },
  {
    "text": "tester in that directory yes I think so so what I'm gonna do is I can apply this load tester what it's going to do is",
    "start": "4219200",
    "end": "4224960"
  },
  {
    "text": "deploy multiple containers that's gonna hit Amazon with a million requests and so that's gonna start this scale out",
    "start": "4224960",
    "end": "4231590"
  },
  {
    "text": "story over in my Amazon app from Google so I just figured I'd use both this is deploying what's called a job in Google",
    "start": "4231590",
    "end": "4237800"
  },
  {
    "text": "so it's gonna finish and be done as opposed to a container that you deploy that has an endpoint and stays alive and",
    "start": "4237800",
    "end": "4243680"
  },
  {
    "text": "must always be present and again all the platforms have their sense of how do you",
    "start": "4243680",
    "end": "4248780"
  },
  {
    "text": "configure jobs as well another type of orchestration workload right so now that that's running I'm gonna",
    "start": "4248780",
    "end": "4256580"
  },
  {
    "text": "head over to Amazon and I'm gonna take a look at my cloud watch so let's go to",
    "start": "4256580",
    "end": "4263240"
  },
  {
    "text": "services and cloud watch and what we'll see is that I've got these alerts set up",
    "start": "4263240",
    "end": "4271490"
  },
  {
    "text": "for when we hit a certain amount of memory so because the containers are getting hit by Google and there's two",
    "start": "4271490",
    "end": "4277130"
  },
  {
    "text": "jobs running at frequency then these",
    "start": "4277130",
    "end": "4282230"
  },
  {
    "text": "alerts are going to start going off and again I'm not going to wait to show you those but I'll give you the screenshots",
    "start": "4282230",
    "end": "4287270"
  },
  {
    "text": "after that what it's going to do is lead to my container services so if I go to",
    "start": "4287270",
    "end": "4293210"
  },
  {
    "text": "my clusters actually go here oh there we",
    "start": "4293210",
    "end": "4301190"
  },
  {
    "text": "go and if I come in here you'll see fab medical two services three container instances what will happen is there will",
    "start": "4301190",
    "end": "4307700"
  },
  {
    "text": "be the running tasks will increase to eight ten fifteen and start to put load",
    "start": "4307700",
    "end": "4313940"
  },
  {
    "text": "on the nodes and then the nodes will have to scale out so then I'll start getting more container instances all because of those alerts and how they're",
    "start": "4313940",
    "end": "4320660"
  },
  {
    "text": "configured to respond to the health of the nodes okay so that's just an example again of a thing that you could simulate",
    "start": "4320660",
    "end": "4326060"
  },
  {
    "text": "to do drills on your services to see can I make them fail or will my system",
    "start": "4326060",
    "end": "4331190"
  },
  {
    "text": "actually healthily recover from all of these situations okay so again stuff that you'll do no",
    "start": "4331190",
    "end": "4336860"
  },
  {
    "text": "matter what platform you use learn about the behavior of the system and tweak your service configurations",
    "start": "4336860",
    "end": "4341960"
  },
  {
    "text": "coming back to Google then the last thing I wanted to show you is we talked",
    "start": "4341960",
    "end": "4347179"
  },
  {
    "text": "about health checks I showed you a bad health an endpoint that couldn't become",
    "start": "4347179",
    "end": "4353690"
  },
  {
    "text": "healthy that didn't deploy to Amazon kept retrying and then when I put the",
    "start": "4353690",
    "end": "4358969"
  },
  {
    "text": "correct version that's the one that was able to be deployed and retire the previous version to back when we think",
    "start": "4358969",
    "end": "4366320"
  },
  {
    "text": "about health checks it's usually one endpoint each of those container platforms will give you a way to you",
    "start": "4366320",
    "end": "4371630"
  },
  {
    "text": "know configure like whatever a whack health and in there you do what you think is best things like you know is",
    "start": "4371630",
    "end": "4380119"
  },
  {
    "text": "the database that I need to function there you know maybe some other socket checks or things like that",
    "start": "4380119",
    "end": "4386360"
  },
  {
    "text": "now with that said one thing that Google does that's kind of interesting is they give you the concept of a live versus",
    "start": "4386360",
    "end": "4392659"
  },
  {
    "text": "ready and so the way that works is instead so alive is you know have I got",
    "start": "4392659",
    "end": "4399139"
  },
  {
    "text": "a real problem you know meaning I'm unhealthy and ready is more like hey the Container started but we",
    "start": "4399139",
    "end": "4405829"
  },
  {
    "text": "need to load some cash we need to do some things we're not ready yet and so it's not unhealthy you don't need to",
    "start": "4405829",
    "end": "4411980"
  },
  {
    "text": "restart me you don't need to recover that instance but you do need to wait and so I think that that's a feature",
    "start": "4411980",
    "end": "4418249"
  },
  {
    "text": "that's kind of you know desirable and so I think it was just thought of give you a quick demo of that so what this is is",
    "start": "4418249",
    "end": "4426340"
  },
  {
    "text": "my kubernetes dashboard I have these api's right so if I go into the services",
    "start": "4426340",
    "end": "4432309"
  },
  {
    "text": "I have you know this API endpoint and",
    "start": "4432309",
    "end": "4437420"
  },
  {
    "text": "then it gives me an external endpoint to hit it so I'm able to hit that API there and if I type something like you know",
    "start": "4437420",
    "end": "4445329"
  },
  {
    "text": "work it's going to stay busy for a certain number of seconds and if I go",
    "start": "4445329",
    "end": "4450650"
  },
  {
    "text": "here and say cube control oops let's",
    "start": "4450650",
    "end": "4456650"
  },
  {
    "text": "just do get pods it's going to show me zero out of one so one of these guys is",
    "start": "4456650",
    "end": "4462559"
  },
  {
    "text": "not ready right now and it's going to end and then it's going to come back to life",
    "start": "4462559",
    "end": "4468260"
  },
  {
    "text": "and you see it's already done it right so that was an example of I'm not ready right now because I triggered something",
    "start": "4468260",
    "end": "4473389"
  },
  {
    "text": "that that showed that it needed to do some loading and that would be an example of I'm busy I'm fully under load",
    "start": "4473389",
    "end": "4479329"
  },
  {
    "text": "but I'm gonna be back later so now let's distribute to the other nodes and if I had all of them busy I",
    "start": "4479329",
    "end": "4484880"
  },
  {
    "text": "have to scale out that would be another scale out trigger but the other thing you can do is you can trigger failure",
    "start": "4484880",
    "end": "4491630"
  },
  {
    "text": "hard work and so this is going to actually just fail like 500s coming back",
    "start": "4491630",
    "end": "4498679"
  },
  {
    "text": "or in this case it's going to hang and so what would happen here is I can come in two pods and I can see that that's",
    "start": "4498679",
    "end": "4506449"
  },
  {
    "text": "readiness robe is failing so I'm actually you know not going to recover from this one and it's",
    "start": "4506449",
    "end": "4512150"
  },
  {
    "text": "eventually going to spin up another API because I have a minimum two required so again just showing you that all these",
    "start": "4512150",
    "end": "4518420"
  },
  {
    "text": "things that we've just talked about are the things that we care about when we think about orchestration and and and",
    "start": "4518420",
    "end": "4523550"
  },
  {
    "text": "platforms so you know let's kind of just wrap this up and I'll try to I guess tie",
    "start": "4523550",
    "end": "4529820"
  },
  {
    "text": "it together to decision-making so again these are just the alarms and the slides to show that when the alarms go off for",
    "start": "4529820",
    "end": "4536000"
  },
  {
    "text": "memory usage I'm going to start adding more running tasks and I'm going to fill the density of the three container",
    "start": "4536000",
    "end": "4541730"
  },
  {
    "text": "instances eventually I'm gonna eleven container instances because CPU utilization went up and we said when",
    "start": "4541730",
    "end": "4547880"
  },
  {
    "text": "that happens we need more nodes so then we added lots of running tasks but across way more nodes okay simple",
    "start": "4547880",
    "end": "4555130"
  },
  {
    "text": "example this is a picture of the kubernetes view point where we have a",
    "start": "4555130",
    "end": "4560179"
  },
  {
    "text": "master again master cluster you don't see that in Google but if you deploy kubernetes to your Aya's environment you",
    "start": "4560179",
    "end": "4566269"
  },
  {
    "text": "will see that of course because you have to manage the masters and the agents and then we already went through this so",
    "start": "4566269",
    "end": "4573500"
  },
  {
    "text": "just as a point of review then I've talked about a lot of stuff and gone over but you're gonna forgive me that",
    "start": "4573500",
    "end": "4579829"
  },
  {
    "text": "because there's a lot of stuff right right docker without an orchestration platform completely doable if you are if",
    "start": "4579829",
    "end": "4587900"
  },
  {
    "text": "it's manageable for you it kind of comes down to that something will tip the balance where you'll start thinking",
    "start": "4587900",
    "end": "4593179"
  },
  {
    "text": "about these features I showed you load balancing networking you know scheduling self-healing auto scaling and",
    "start": "4593179",
    "end": "4600780"
  },
  {
    "text": "filling with density running jobs and being able to see the visibility of all that in one sort of pane of glass so",
    "start": "4600780",
    "end": "4609300"
  },
  {
    "text": "those are the features that drive you to think about orchestration and of course there's got to be business value which I",
    "start": "4609300",
    "end": "4615630"
  },
  {
    "text": "talked about in my earlier talk today you have to have a business driver to bother with this or else it's going to",
    "start": "4615630",
    "end": "4621150"
  },
  {
    "text": "be a failed effort because it's too costly and time-consuming to get all",
    "start": "4621150",
    "end": "4626159"
  },
  {
    "text": "this up and running do the drills understand your environment know how to recover disaster recovery etc and you",
    "start": "4626159",
    "end": "4633570"
  },
  {
    "text": "know get that visibility into logs too you need your software to also be instrumented the right way for micro",
    "start": "4633570",
    "end": "4639690"
  },
  {
    "text": "services in the process of going through all of those things what I've tried to do is give you a taste of you know",
    "start": "4639690",
    "end": "4645780"
  },
  {
    "text": "single deployments like as your container instance and then docker swarm for scheduling mesosphere DCOs for load",
    "start": "4645780",
    "end": "4653760"
  },
  {
    "text": "balancing AWS so you can get a sense of what the dashboard looks like and things you can do right managing tasks and then",
    "start": "4653760",
    "end": "4661079"
  },
  {
    "text": "kubernetes and Google container engine which are one in the same so we covered quite a bit I'm gonna just say I'm gonna",
    "start": "4661079",
    "end": "4666480"
  },
  {
    "text": "leave it there but hopefully you enjoyed that and you know thanks for hanging out a little longer so I could get through",
    "start": "4666480",
    "end": "4672059"
  },
  {
    "text": "it all okay [Applause]",
    "start": "4672059",
    "end": "4679859"
  }
]