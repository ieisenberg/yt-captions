[
  {
    "text": "hi everyone sorry i'm late i have the directional capabilities of a one piece character so i got lost many times on my",
    "start": "8160",
    "end": "14799"
  },
  {
    "text": "way here well that's okay we're going to get right into it my name is jeremiah mabu and i'm here to talk to you about",
    "start": "14799",
    "end": "21680"
  },
  {
    "text": "functional programming yes once my slides click brilliant it worked so i'm a front-end developer",
    "start": "21680",
    "end": "28880"
  },
  {
    "text": "self-taught and a school taught systems engineer from lagos nigeria so i'm a long way from home but i'm actually",
    "start": "28880",
    "end": "34239"
  },
  {
    "text": "working in lithuania so it was like a shorter flight and um yeah you can find me online",
    "start": "34239",
    "end": "39840"
  },
  {
    "text": "anywhere at jemima boom so that's twitter linkedin medium github it's fun so let's",
    "start": "39840",
    "end": "46480"
  },
  {
    "text": "get into it what is functional programming basically in the world of programming we",
    "start": "46480",
    "end": "51840"
  },
  {
    "text": "have things called paradigms paradigms are the way code is written pretty much so",
    "start": "51840",
    "end": "57520"
  },
  {
    "text": "functional programming is a concept that was invented in like 1954 and in this concept they basically",
    "start": "57520",
    "end": "64000"
  },
  {
    "text": "say you write code using pure functions and i'll elaborate on what pure functions",
    "start": "64000",
    "end": "69760"
  },
  {
    "text": "mean but first we have to look into what the basics of functional programming are so basic functional programming you have",
    "start": "69760",
    "end": "75680"
  },
  {
    "text": "pr functions how care functions work think of it as like a mathematical equation in math two plus two is always four",
    "start": "75680",
    "end": "81920"
  },
  {
    "text": "right it doesn't matter if it's on the mountain or in the middle of the marianas trench two plus two is always four and that's",
    "start": "81920",
    "end": "88080"
  },
  {
    "text": "pretty much the concept of a pure function with a pr function whatever input you give in should always return",
    "start": "88080",
    "end": "93759"
  },
  {
    "text": "the same output so if you have a function and you return one input it should always give you the same output no matter how many times that function",
    "start": "93759",
    "end": "99759"
  },
  {
    "text": "is called or you know like a predictable output so you can take it as functional programming is predictable programming i",
    "start": "99759",
    "end": "106960"
  },
  {
    "text": "would say that's the basis it also works with the values of um with immutable values what that means is that",
    "start": "106960",
    "end": "114960"
  },
  {
    "text": "don't change your values pretty much immutable values are values that aren't modified in ways that you don't expect",
    "start": "114960",
    "end": "121439"
  },
  {
    "text": "so how that works is that every time you let's say modify a value it doesn't",
    "start": "121439",
    "end": "126560"
  },
  {
    "text": "exactly change that value it just creates a new instance of a changed value",
    "start": "126560",
    "end": "132640"
  },
  {
    "text": "and then you have higher order functions higher order functions are basically functions that take in other functions as arguments this is very common with",
    "start": "132640",
    "end": "138879"
  },
  {
    "text": "javascript and like well in other languages too like python and stuff when you have like your map functions or your reduce functions it's",
    "start": "138879",
    "end": "145280"
  },
  {
    "text": "passing a function to a function as a parameter because that function so many times doesn't sound like a real word",
    "start": "145280",
    "end": "150480"
  },
  {
    "text": "anymore that's okay and then finally we have minimal side effects the principle of functional",
    "start": "150480",
    "end": "156080"
  },
  {
    "text": "programming like we said it's predictable programming so that means you want to minimize",
    "start": "156080",
    "end": "161400"
  },
  {
    "text": "unpredictability pretty much and then functional languages i'm going to skip",
    "start": "161400",
    "end": "167840"
  },
  {
    "text": "through this part because like i have the javascript part and that's where my main focus is but functional languages",
    "start": "167840",
    "end": "173040"
  },
  {
    "text": "these are languages that were created to be functional by default so that means you write them using all the principles",
    "start": "173040",
    "end": "178480"
  },
  {
    "text": "of functional languages you have languages like haskell haska was created to be purely functional you have clojure",
    "start": "178480",
    "end": "183680"
  },
  {
    "text": "and erlang and lis bliss was actually the first functional language that was invented so that's fun for it and then you have",
    "start": "183680",
    "end": "189760"
  },
  {
    "text": "scala and then we have javascript i like think of javascript as like this giant monster because it just kind of does",
    "start": "189760",
    "end": "196560"
  },
  {
    "text": "anything and everything you can write javascript functionally you can write it with object-oriented programming or you",
    "start": "196560",
    "end": "202000"
  },
  {
    "text": "can write it as procedural so javascript is not intended to be written any one way but it can be written in basically",
    "start": "202000",
    "end": "209200"
  },
  {
    "text": "javascript is more of like it's prototype based you know so you can write it however you want but in this",
    "start": "209200",
    "end": "215120"
  },
  {
    "text": "talk we're going to be looking at how to write javascript in the functional way well no we have to look at the benefits",
    "start": "215120",
    "end": "221440"
  },
  {
    "text": "first i forgot i had these slides so why functional programming number one like",
    "start": "221440",
    "end": "227040"
  },
  {
    "text": "we said it's a predictable language so it's less prone to error you know when you have a database or you have like a website or whatever and it's collecting",
    "start": "227040",
    "end": "233360"
  },
  {
    "text": "data you want to minimize how often you get results you're not expecting you know like",
    "start": "233360",
    "end": "238720"
  },
  {
    "text": "500 errors and stuff like that and your code is more readable functional languages are written in a way that has predictable code so if you",
    "start": "238720",
    "end": "245599"
  },
  {
    "text": "have a function that says get user name you expect that function to return the username really we are different on the",
    "start": "245599",
    "end": "250879"
  },
  {
    "text": "password because now it's like you call it username and then it's easier to test and debug",
    "start": "250879",
    "end": "256639"
  },
  {
    "text": "because all your functions are predictable it's easier to know where an error is coming from so if i'm trying to",
    "start": "256639",
    "end": "261680"
  },
  {
    "text": "call data from a database and i'm getting the wrong value for let's say somebody's age i'm probably",
    "start": "261680",
    "end": "267840"
  },
  {
    "text": "just going to go to my function that's called like get user age and i know where my error is coming from",
    "start": "267840",
    "end": "272960"
  },
  {
    "text": "and finally it allows for easy reusability of functions and variables we see this a lot when you're writing like react code when you have all your",
    "start": "272960",
    "end": "279440"
  },
  {
    "text": "components already predefined it's easier to just like impute them into other components instead of like having to write new",
    "start": "279440",
    "end": "285600"
  },
  {
    "text": "things all over again and finally no more this when i first started learning javascript when i first",
    "start": "285600",
    "end": "291919"
  },
  {
    "text": "started learning react this was the bane of my existence because you'd have to write class components and i didn't get",
    "start": "291919",
    "end": "298400"
  },
  {
    "text": "why we had this but then if you want to use this in a different class this then becomes that because this would not work",
    "start": "298400",
    "end": "303919"
  },
  {
    "text": "if it's in another function like it it baffled me to no end so yes that is my",
    "start": "303919",
    "end": "309199"
  },
  {
    "text": "favorite benefit of functional programming we don't have to deal with this anymore and we also have arrow functions for the win this is no longer",
    "start": "309199",
    "end": "315680"
  },
  {
    "text": "a problem in our functions because this in an arrow function always refers to the function you're calling it in so",
    "start": "315680",
    "end": "321520"
  },
  {
    "text": "what that means is if i have nested functions if i call this in function a it's referring to function a but if i",
    "start": "321520",
    "end": "326720"
  },
  {
    "text": "call this in function b this refers to function b so easy simple and great",
    "start": "326720",
    "end": "333039"
  },
  {
    "text": "let's get to the fun part functional programming in javascript so we're going to look at each of the basic concepts of",
    "start": "333039",
    "end": "338560"
  },
  {
    "text": "functional programming and see how we can apply them to the javascript code that we are writing",
    "start": "338560",
    "end": "343680"
  },
  {
    "text": "so javascript in itself like i said earlier it does have its functional parts so if we look at",
    "start": "343680",
    "end": "349440"
  },
  {
    "text": "react originally when react was written using class components we would have to define it using the concept of object oriented",
    "start": "349440",
    "end": "355440"
  },
  {
    "text": "programming so we had to use this a lot you know you had your this dot state and you had this dot set state and if you wanted to refer to a variable you'd also",
    "start": "355440",
    "end": "362240"
  },
  {
    "text": "have to use this and they would all have to be destroyed in their constructors with their supers and stuff but then",
    "start": "362240",
    "end": "367600"
  },
  {
    "text": "react hooks came out and react hooks are based on the principle of functional programming meaning we no longer have to",
    "start": "367600",
    "end": "373440"
  },
  {
    "text": "use this to refer to any variable we can just use our hook and we can define our real components as a function so that's",
    "start": "373440",
    "end": "380400"
  },
  {
    "text": "why you end up having things like const my components extends react components and then you can also define your state",
    "start": "380400",
    "end": "387120"
  },
  {
    "text": "variables just using constant you don't have to refer to them using this because everything is already inside",
    "start": "387120",
    "end": "393280"
  },
  {
    "text": "that functional component yes that makes sense i'm moving on",
    "start": "393280",
    "end": "398800"
  },
  {
    "text": "so basically the concept of functional programming in javascript is that a web app is just a bunch of functions stacked",
    "start": "398800",
    "end": "404720"
  },
  {
    "text": "on top of each other wearing a trench coat so this is what i like to imagine it looks like you just have your",
    "start": "404720",
    "end": "410240"
  },
  {
    "text": "components and your components and you combine all of those to build your main web application",
    "start": "410240",
    "end": "415919"
  },
  {
    "text": "so yes this is the basic structure of most react web applications you have your main application and then you just",
    "start": "415919",
    "end": "421360"
  },
  {
    "text": "call all your child components into it this is the function this is the concept of functional programming you want to",
    "start": "421360",
    "end": "426960"
  },
  {
    "text": "create tiny reusable functions that you can then combine to build it's like",
    "start": "426960",
    "end": "432800"
  },
  {
    "text": "a design system basically you create tiny reasonable functions that are easily defined and then you combine them to build more complex functions and so",
    "start": "432800",
    "end": "439840"
  },
  {
    "text": "on and so forth until you have your whole large application and it's great",
    "start": "439840",
    "end": "445039"
  },
  {
    "text": "so yes let's look at writing pure functions in javascript so before we look at pair functions we have to understand what impure functions are so",
    "start": "445039",
    "end": "452080"
  },
  {
    "text": "let's take a look at this function it's a simple piece of code we have our variable a and we're setting it five we",
    "start": "452080",
    "end": "458160"
  },
  {
    "text": "define our function add and basically what add does is that it adds b to a",
    "start": "458160",
    "end": "463360"
  },
  {
    "text": "so if i call add 6 it returns 11. this is an npr function the reason this",
    "start": "463360",
    "end": "468800"
  },
  {
    "text": "is impure is because number one it depends on a global variable you do not want your functions to depend on",
    "start": "468800",
    "end": "474400"
  },
  {
    "text": "anything outside of the scope in which you are calling that function because what happens is",
    "start": "474400",
    "end": "479840"
  },
  {
    "text": "if that variable is changed it affects your function in a way you didn't intend for it so here you can see we have we've",
    "start": "479840",
    "end": "486400"
  },
  {
    "text": "defined variable as5 and we've defined our function add but now let's say let's say this was a database actually let's",
    "start": "486400",
    "end": "492560"
  },
  {
    "text": "not even think of it as this simple function let's say somewhere else you were doing something with variable a",
    "start": "492560",
    "end": "497759"
  },
  {
    "text": "that happened to change it but now in this it's some it's suddenly affecting your add function in a way that you did",
    "start": "497759",
    "end": "503280"
  },
  {
    "text": "not intend this is one of those unintended side effects we're talking about so what happens here is that a is",
    "start": "503280",
    "end": "508560"
  },
  {
    "text": "modified and that affects your function add and then it's returning a different",
    "start": "508560",
    "end": "513839"
  },
  {
    "text": "value for the same imputes which is not the predictable output we're looking for",
    "start": "513839",
    "end": "518880"
  },
  {
    "text": "so yeah you know avoid doing that a pr function would be ensuring that",
    "start": "518880",
    "end": "524640"
  },
  {
    "text": "your function is only determined by the parameters that you define in it what this means is that we're defining all",
    "start": "524640",
    "end": "530480"
  },
  {
    "text": "our functions in the scope of the function we're using we have our add function and we have our parameters a",
    "start": "530480",
    "end": "535760"
  },
  {
    "text": "and b and we're returning a plus b this function will always give you the same values as long as you're passing the same variables all the time so this is",
    "start": "535760",
    "end": "542560"
  },
  {
    "text": "how pure functions work you want to make sure that it's only dependent on the input you're passing in and it always",
    "start": "542560",
    "end": "547600"
  },
  {
    "text": "returns the output you're expecting yeah that's like the easiest way to define it really",
    "start": "547600",
    "end": "553040"
  },
  {
    "text": "so yeah it works on input only and it returns same value for same impute",
    "start": "553040",
    "end": "559440"
  },
  {
    "text": "so this is a fun little one so this based on the previous definition we have a random number function it's depending",
    "start": "560000",
    "end": "566720"
  },
  {
    "text": "only on the number parameter and it's only returning a value we're expecting",
    "start": "566720",
    "end": "571839"
  },
  {
    "text": "would you say this function is a pure function or not let me just say like show of hand it's a pure function",
    "start": "571839",
    "end": "578320"
  },
  {
    "text": "ah thank you show of hand it's an impure function damn okay you're smart love that for you",
    "start": "578560",
    "end": "586000"
  },
  {
    "text": "basically the reason this function is an impure function is because in itself it does not return the same",
    "start": "586000",
    "end": "592880"
  },
  {
    "text": "value for the same input if i pass in the same value four times it gives me a",
    "start": "592880",
    "end": "598320"
  },
  {
    "text": "different input four times that in itself is not a pure function so it catches like this because i mean it's",
    "start": "598320",
    "end": "604480"
  },
  {
    "text": "defined as a pure function but then it doesn't fulfill all the requirements of a pr function so",
    "start": "604480",
    "end": "609519"
  },
  {
    "text": "i mean to be fair you're hardly ever going to call random numbers in your database all you do actually when you have stories that impute",
    "start": "609519",
    "end": "616079"
  },
  {
    "text": "that's beside the point the point is you know it's not a pure function in itself but then would you say this function is",
    "start": "616079",
    "end": "623440"
  },
  {
    "text": "a pure function we have our maximum array function and we're passing an array and it returns",
    "start": "623440",
    "end": "628959"
  },
  {
    "text": "the value that it applies to that array would you say this is a pure function",
    "start": "628959",
    "end": "633839"
  },
  {
    "text": "damn y'all are nervous now is it an impure function i see we're very on defense yeah no this",
    "start": "634640",
    "end": "640320"
  },
  {
    "text": "one is a pure function because by definition it does return the same value",
    "start": "640320",
    "end": "645440"
  },
  {
    "text": "for the same impute that's passed into it so this is also an example of using higher order",
    "start": "645440",
    "end": "651920"
  },
  {
    "text": "functions but we'll get to that later i will not spoil the surprise for now and then we have immutable values",
    "start": "651920",
    "end": "658160"
  },
  {
    "text": "immutable values are i feel like people get really angry with javascript just",
    "start": "658160",
    "end": "663279"
  },
  {
    "text": "because javascript allows you change values all the time it's like you define a valuable as a variable as const when",
    "start": "663279",
    "end": "669120"
  },
  {
    "text": "they're later in the code you change it and they're like if it's constantly changing it but that's just javascript and javascript is a beautiful language",
    "start": "669120",
    "end": "674959"
  },
  {
    "text": "that lets you do whatever you want which is why i like it so we have our um function here we've",
    "start": "674959",
    "end": "682640"
  },
  {
    "text": "defined wait i have a pointer that i want to use",
    "start": "682640",
    "end": "688079"
  },
  {
    "text": "i love that so we've defined our array here and we have a function reverse array basically",
    "start": "688079",
    "end": "693600"
  },
  {
    "text": "what this function does is that it reverses an array see that's the form with functional programming very easy to",
    "start": "693600",
    "end": "699519"
  },
  {
    "text": "define component names and then we have our new array function here so what we're trying to do is that we're trying",
    "start": "699519",
    "end": "704560"
  },
  {
    "text": "to set new array as the reversed array but then what ends up happening is that",
    "start": "704560",
    "end": "709839"
  },
  {
    "text": "this function here reverses both arrays that we've just defined which is weird right",
    "start": "709839",
    "end": "715760"
  },
  {
    "text": "because here it has nothing to do with the global variable arr because what we're passing is the parameter array",
    "start": "715760",
    "end": "721519"
  },
  {
    "text": "which is completely different but the catch is because javascript is a beautiful language it works the way it",
    "start": "721519",
    "end": "727920"
  },
  {
    "text": "works so if you pass in a variable like an array or an object to a function",
    "start": "727920",
    "end": "733519"
  },
  {
    "text": "that carries out let's say mutation on that value it's going to affect the original array",
    "start": "733519",
    "end": "739600"
  },
  {
    "text": "regardless of whether you refer to the global array or not so that's why in javascript we end up using",
    "start": "739600",
    "end": "745680"
  },
  {
    "text": "i keep on forgetting how these things yeah original array is mutated great we have a helpful little arrow there",
    "start": "745680",
    "end": "751839"
  },
  {
    "text": "that's why in javascript we have things called spread operators what happens to spread operator is that it creates a new",
    "start": "751839",
    "end": "757600"
  },
  {
    "text": "instance of that variable that we've defined in javascript when you're working with arrays or objects you want",
    "start": "757600",
    "end": "763839"
  },
  {
    "text": "to always work with new instances and you do not want to modify the",
    "start": "763839",
    "end": "769120"
  },
  {
    "text": "what's called the ordinary and i'm going to use database example again and the reason i keep using this is because we were just working on a um",
    "start": "769120",
    "end": "775600"
  },
  {
    "text": "like this login screen that has to be taken out of user data for like this dashboard and you would not believe the",
    "start": "775600",
    "end": "780800"
  },
  {
    "text": "hell that it is when you start mutating user values because you're trying to let's say you're trying to get um",
    "start": "780800",
    "end": "787120"
  },
  {
    "text": "you're trying to get the first letter of everyone's name because you want to sort the arrays of basically well now because somebody forgot to create a new instance",
    "start": "787120",
    "end": "793600"
  },
  {
    "text": "you end up having an array that's just the first letter you end up having a database that is just the first letter of people's names it's not pretty so we",
    "start": "793600",
    "end": "801120"
  },
  {
    "text": "try to avoid doing that so that's why in javascript we always create new instances of things so with this one we",
    "start": "801120",
    "end": "806399"
  },
  {
    "text": "use a spread operator to create a new instance and it's that spread operator that we then reverse and what happens is",
    "start": "806399",
    "end": "812560"
  },
  {
    "text": "that our original array maintains its original values and the new array has",
    "start": "812560",
    "end": "817760"
  },
  {
    "text": "the intended effects so that's kind of how the principle of immutable values works you want to always avoid mutating",
    "start": "817760",
    "end": "823600"
  },
  {
    "text": "the original values and only create new instances which you then pass to the variable that you want",
    "start": "823600",
    "end": "829519"
  },
  {
    "text": "yeah that's an easy definition array is not mutated great",
    "start": "829519",
    "end": "835360"
  },
  {
    "text": "and then we come to the principle of higher order functions so higher order functions are basically passing functions into other functions",
    "start": "835360",
    "end": "843600"
  },
  {
    "text": "let's take a look at how that one works so here we have another fun little function it's called the um you know we",
    "start": "843600",
    "end": "850160"
  },
  {
    "text": "have our defined variable and we have a function double what we want to do with this function is that we want to",
    "start": "850160",
    "end": "856639"
  },
  {
    "text": "multiply every item in that array so you could create your for loop and then for each item in the array just set",
    "start": "856639",
    "end": "864000"
  },
  {
    "text": "the array value times two this is bad because what you're doing here is that you're",
    "start": "864000",
    "end": "870399"
  },
  {
    "text": "literally reassigning every value in that array so what you're going to end up with is once again mutated values",
    "start": "870399",
    "end": "877920"
  },
  {
    "text": "and that brings us the concept of higher order functions when you're passing a function to another function",
    "start": "877920",
    "end": "883839"
  },
  {
    "text": "it creates its own new instance by default how that works is here instead of using",
    "start": "883839",
    "end": "889360"
  },
  {
    "text": "that for loop that we had previously we replace our for loop with a map and then we pass in this function x x is just the",
    "start": "889360",
    "end": "895920"
  },
  {
    "text": "item in the array which then returns x times two the way the map works is that it only affects the new instance of the",
    "start": "895920",
    "end": "902320"
  },
  {
    "text": "array that you're creating it does not mutate your original value so the same thing with maps with four h's with",
    "start": "902320",
    "end": "909199"
  },
  {
    "text": "reduces you always want to avoid mutating original values and only",
    "start": "909199",
    "end": "914320"
  },
  {
    "text": "create new instances so yeah things like maps high order functions basically use a lot",
    "start": "914320",
    "end": "919920"
  },
  {
    "text": "of functional programming to avoid having what's the word i'm looking for to avoid having mutated values",
    "start": "919920",
    "end": "926880"
  },
  {
    "text": "and that's it it's beautiful function that takes a function as a parameter does not change original",
    "start": "926880",
    "end": "932800"
  },
  {
    "text": "everything and then minimizing side effects like we mentioned earlier for the third time functional programming is a predictable",
    "start": "932800",
    "end": "939440"
  },
  {
    "text": "language so when you're writing it you want to avoid having side effects that you were not expecting so let's take a look at what a",
    "start": "939440",
    "end": "945839"
  },
  {
    "text": "side effect would be here we have our function add and then we're returning a plus b but then we're also",
    "start": "945839",
    "end": "951440"
  },
  {
    "text": "console.logging high and the c oslo a console.log is a side effect because",
    "start": "951440",
    "end": "956480"
  },
  {
    "text": "what it's doing is that it's returning something other than a value which are functional um",
    "start": "956480",
    "end": "961920"
  },
  {
    "text": "no with your functions you only want to return values you don't want to carry out any other any other feature",
    "start": "961920",
    "end": "968480"
  },
  {
    "text": "that your function is not intended to do because that's how you end up having like spaghetti code and things changing things are not meant to be changing",
    "start": "968480",
    "end": "975600"
  },
  {
    "text": "we also have here we also have our array which says high end dc oslo and then we return a",
    "start": "975600",
    "end": "980959"
  },
  {
    "text": "printed array problem with this one once again is that it's mutating a global variable join does mutate global",
    "start": "980959",
    "end": "987120"
  },
  {
    "text": "variables and this is something you're trying to avoid you want to avoid mutating global variables just because",
    "start": "987120",
    "end": "992240"
  },
  {
    "text": "you know it's bad was that where i was going with this",
    "start": "992240",
    "end": "998800"
  },
  {
    "text": "yeah okay cool applications of functional programming in javascript that went so fast",
    "start": "1000079",
    "end": "1007519"
  },
  {
    "text": "we have react functional components which we spoke about earlier in react when you use end up using hooks and",
    "start": "1007519",
    "end": "1012880"
  },
  {
    "text": "stuff you do not have to define your function your components as classes you no longer have to have constructors or",
    "start": "1012880",
    "end": "1018079"
  },
  {
    "text": "supers you can just export a default function and then you can call all your variables the same way you'd expect",
    "start": "1018079",
    "end": "1023839"
  },
  {
    "text": "react hooks still work with the basis of functional programming in that you have a main function and it returns",
    "start": "1023839",
    "end": "1030640"
  },
  {
    "text": "what you expect it to return the catches a lot of times in components we end up defining a lot of other stuff inside",
    "start": "1030640",
    "end": "1037038"
  },
  {
    "text": "here that's all the handler methods for our components but we'll talk about about that later in what we call",
    "start": "1037039",
    "end": "1042319"
  },
  {
    "text": "necessary side effects and then we also have react reducers if you've worked with um",
    "start": "1042319",
    "end": "1047380"
  },
  {
    "text": "[Music] state management properties in react you end up using reducers a lot to um",
    "start": "1047380",
    "end": "1053600"
  },
  {
    "text": "just handle global states you know reacts reducers also work with the function of",
    "start": "1053600",
    "end": "1059280"
  },
  {
    "text": "with the principle of functional programming in that for every case you define you expect it to return a new",
    "start": "1059280",
    "end": "1064400"
  },
  {
    "text": "value another thing that's very important with reacts reducers is that you do not ever modify global states and",
    "start": "1064400",
    "end": "1072000"
  },
  {
    "text": "you realize how important the principle of functional programming is when you start working with global states because",
    "start": "1072000",
    "end": "1077440"
  },
  {
    "text": "if one functioning functional components if one component is modifying states in",
    "start": "1077440",
    "end": "1084960"
  },
  {
    "text": "a way that it's not supposed to do it's affecting the rest of your code meaning that",
    "start": "1084960",
    "end": "1090000"
  },
  {
    "text": "well you can imagine the catastrophe that that would be if one thing was changing state and that thing was calling it something you just had like",
    "start": "1090000",
    "end": "1096720"
  },
  {
    "text": "it be chaos so yes reacts reducers work with the principle of functional programming in that they always create",
    "start": "1096720",
    "end": "1102720"
  },
  {
    "text": "new instances of states and whatever value they modify is just returned as a new",
    "start": "1102720",
    "end": "1108400"
  },
  {
    "text": "state instance and not modifying the original one and then we also have functional",
    "start": "1108400",
    "end": "1114160"
  },
  {
    "text": "libraries for javascript so these are libraries that allow you um [Music] write functional code in javascript it",
    "start": "1114160",
    "end": "1120880"
  },
  {
    "text": "kind of holds you to a higher standard because there are people that prefer javascript to be harder than it is i'm",
    "start": "1120880",
    "end": "1126000"
  },
  {
    "text": "not one of them but you know if that's what you're into we do have functional libraries that ensure that you write",
    "start": "1126000",
    "end": "1131520"
  },
  {
    "text": "javascript in a way that is stricter i would say so",
    "start": "1131520",
    "end": "1137200"
  },
  {
    "text": "all of these ones i will be giving out the slides later so if you're interested in them you could always click the links",
    "start": "1137200",
    "end": "1142960"
  },
  {
    "text": "and then handling necessary side effects like we said with most things in life it",
    "start": "1142960",
    "end": "1148559"
  },
  {
    "text": "never goes the ideal way in javascript when you're working with web applications or whatever side effects",
    "start": "1148559",
    "end": "1153760"
  },
  {
    "text": "are necessary it's impossible to avoid console.logging things it's possible for your functions to only return the things",
    "start": "1153760",
    "end": "1160160"
  },
  {
    "text": "that you intend so we're going to take a look at how we can handle a few of these necessary side effects using javascript",
    "start": "1160160",
    "end": "1168160"
  },
  {
    "text": "the necessary side effect would be an asynchronous request technically an asynchronous request is not",
    "start": "1168400",
    "end": "1174320"
  },
  {
    "text": "pure it's not a pure function because it's a function that it carries out a value and then you have to wait for that",
    "start": "1174320",
    "end": "1180480"
  },
  {
    "text": "thing to be returned meaning other things are happening while that thing is happening it's not predictable because you might",
    "start": "1180480",
    "end": "1187039"
  },
  {
    "text": "end up getting an error you did not intend to get or it might end up just doing things that asynchronous",
    "start": "1187039",
    "end": "1193200"
  },
  {
    "text": "functions do where they just return unfulfilled promises and stuff like that",
    "start": "1193200",
    "end": "1198559"
  },
  {
    "text": "we also have logging that's handling things like logging errors or logging data",
    "start": "1198559",
    "end": "1204159"
  },
  {
    "text": "console.log is a necessary side effect a lot of times in javascript if you want to catch errors in a certain",
    "start": "1204159",
    "end": "1210880"
  },
  {
    "text": "part of the code basically or if you want to test and routing if you use react router and",
    "start": "1210880",
    "end": "1217280"
  },
  {
    "text": "you um [Music] you have to call the link in a separate",
    "start": "1217280",
    "end": "1222320"
  },
  {
    "text": "way than the intended way i'm trying to think of a i had like a use case for it from work but",
    "start": "1222320",
    "end": "1229440"
  },
  {
    "text": "it went away but routing is also an accessory side effects and then periodic updates this",
    "start": "1229440",
    "end": "1234799"
  },
  {
    "text": "is just things like like recently we had to build this countdown timer for black friday because",
    "start": "1234799",
    "end": "1240880"
  },
  {
    "text": "they wanted to count down to black friday doing things like set timer where you're constantly running a function",
    "start": "1240880",
    "end": "1246320"
  },
  {
    "text": "where it's not returning the same value all the time or technically not defined as a pr function but it's also an accessory side effect because sometimes",
    "start": "1246320",
    "end": "1252480"
  },
  {
    "text": "you just need to constantly um update your page periodically it is that",
    "start": "1252480",
    "end": "1260399"
  },
  {
    "text": "so one way of handling um necessary side effects is to extract them if you have",
    "start": "1260480",
    "end": "1266640"
  },
  {
    "text": "like a api folder where you kind of store all your calls that you need to make to the",
    "start": "1266640",
    "end": "1272720"
  },
  {
    "text": "different apis and stuff you can put them in a separate folder",
    "start": "1272720",
    "end": "1279200"
  },
  {
    "text": "and define them as their own function so technically what that function would do would be to return its own response and",
    "start": "1279200",
    "end": "1285120"
  },
  {
    "text": "then you could import that into somewhere else and then return that function into somewhere else so it's",
    "start": "1285120",
    "end": "1290880"
  },
  {
    "text": "kind of like extracting non-functional code to make it work as functional",
    "start": "1290880",
    "end": "1297120"
  },
  {
    "text": "if that makes sense anyway basically you end up using this a lot of times in real life scenarios just because the",
    "start": "1297120",
    "end": "1302240"
  },
  {
    "text": "more code you write for a application the more bulky your system gets and why you",
    "start": "1302240",
    "end": "1308400"
  },
  {
    "text": "need to extract things more into folders and stuff and then function",
    "start": "1308400",
    "end": "1316240"
  },
  {
    "text": "using middleware functions if you end up working with um react reducers like we said reducers do not take any",
    "start": "1316480",
    "end": "1323600"
  },
  {
    "text": "side effects so you can't do anything else to reduce or apart from modifying the state you're passing into it but then what happens if you need to",
    "start": "1323600",
    "end": "1331360"
  },
  {
    "text": "validate a user entry from state so let's say you have your user logging",
    "start": "1331360",
    "end": "1336400"
  },
  {
    "text": "details and that's the state value so you have user name and you have password as your state values but now before you",
    "start": "1336400",
    "end": "1343120"
  },
  {
    "text": "store those values you need to validate them for example you need to make sure user name only contains string i need to",
    "start": "1343120",
    "end": "1348720"
  },
  {
    "text": "make sure password fulfills the password requirements where it has a capital letter and it has a symbol in it",
    "start": "1348720",
    "end": "1354640"
  },
  {
    "text": "react reducers would not allow you do any of that because all of those things count as side effects all reactor",
    "start": "1354640",
    "end": "1360000"
  },
  {
    "text": "reducer cares about is updating states that's where we include the principle of middleware functions",
    "start": "1360000",
    "end": "1366720"
  },
  {
    "text": "and there are libraries that allow you to do this by yourself so how middleware functions work basically is that they",
    "start": "1366720",
    "end": "1371840"
  },
  {
    "text": "take the store the store is where your global state value is stored and then",
    "start": "1371840",
    "end": "1376960"
  },
  {
    "text": "they call in next function that next function is where your side effects would be stored so in my next function i",
    "start": "1376960",
    "end": "1383360"
  },
  {
    "text": "would decide what what um side effect i want to carry out on the states basically before it's passed and",
    "start": "1383360",
    "end": "1389919"
  },
  {
    "text": "then they pass that value to the action so middlewares are basically just like um",
    "start": "1389919",
    "end": "1395520"
  },
  {
    "text": "you know like a small little box where all the magic happens before the actual action is passed to the reducer that's",
    "start": "1395520",
    "end": "1402000"
  },
  {
    "text": "kind of how i like to think about it um side effects dispatch modified action",
    "start": "1402000",
    "end": "1408480"
  },
  {
    "text": "yeah and um that was a very quick but yeah that is",
    "start": "1408480",
    "end": "1414400"
  },
  {
    "text": "all i have for you guys today if you i feel in my head this thing took so much longer because it's like 70",
    "start": "1414400",
    "end": "1421120"
  },
  {
    "text": "slides and i was like yeah that'll be well over one hour i was wrong so here we are if you want the links to the",
    "start": "1421120",
    "end": "1427440"
  },
  {
    "text": "slides you can find them on my website gmailmap.com slash talk slash functional",
    "start": "1427440",
    "end": "1432799"
  },
  {
    "text": "hyphen programming and also if you want a list of further resources you can read up on um i",
    "start": "1432799",
    "end": "1438320"
  },
  {
    "text": "found a few online i really like this talk by anjana vakil she's actually the reason i wanted to learn functional programming in javascript so if you come",
    "start": "1438320",
    "end": "1445200"
  },
  {
    "text": "across that i would definitely recommend checking it out there's also released some really great articles by ali spittle and max million on functional",
    "start": "1445200",
    "end": "1451440"
  },
  {
    "text": "programming and exploring the different types of programming paradigms and then some with just related to javascript and",
    "start": "1451440",
    "end": "1458320"
  },
  {
    "text": "functional programming that's all quick talk love that for me",
    "start": "1458320",
    "end": "1465120"
  },
  {
    "text": "thank you very much i will be taking um [Music] i'll be taking some questions now if",
    "start": "1465120",
    "end": "1471440"
  },
  {
    "text": "anyone has any questions if there are no questions i will be referring some of my previous questions",
    "start": "1471440",
    "end": "1477440"
  },
  {
    "text": "from the last time i did this talk because i always come prepared so i think last time i did this talk",
    "start": "1477440",
    "end": "1482960"
  },
  {
    "text": "someone did ask how practical is it to use functional programming in like the real life",
    "start": "1482960",
    "end": "1489039"
  },
  {
    "text": "because the reason a lot of developers a lot of javascript developers in particular do not like using functional programming is because",
    "start": "1489039",
    "end": "1495120"
  },
  {
    "text": "it's a good way of writing code but it's also a longer way of writing code sometimes you don't want to have to define three different functions when",
    "start": "1495120",
    "end": "1501600"
  },
  {
    "text": "you can just cram everything into one function you know you're on a deadline now things are taking a while just come everything one function if it has a side",
    "start": "1501600",
    "end": "1507760"
  },
  {
    "text": "effect so be it and what i'd like to say with that is that it is practical in a real life situation",
    "start": "1507760",
    "end": "1514159"
  },
  {
    "text": "in the same way how important your code base looks to you is practical because while it may be faster to just write",
    "start": "1514159",
    "end": "1521200"
  },
  {
    "text": "javascript in the javascript way it gets unreadable at a point if you are",
    "start": "1521200",
    "end": "1526799"
  },
  {
    "text": "calling multiple instances of something or if if you just have like one giant file",
    "start": "1526799",
    "end": "1532159"
  },
  {
    "text": "where all your code is just compiled and then you have an error and then you have stack console every single time i have to console.log",
    "start": "1532159",
    "end": "1539120"
  },
  {
    "text": "four different values in one function because i'm not quite sure where my error is where my error is coming from i'm like curse you object-oriented",
    "start": "1539120",
    "end": "1545520"
  },
  {
    "text": "programming with functional programming you kind of avoid doing that so that's what i would say i would say",
    "start": "1545520",
    "end": "1551600"
  },
  {
    "text": "it's like it takes more time and it is kind of annoying but it's also kind of good because it",
    "start": "1551600",
    "end": "1558559"
  },
  {
    "text": "has its benefits so that would be the answer to that question i asked myself any other questions from somebody that's",
    "start": "1558559",
    "end": "1564880"
  },
  {
    "text": "not me this time yes thank you very much i was just wondering uh uh you mentioned uh like",
    "start": "1564880",
    "end": "1573120"
  },
  {
    "text": "functional libraries like yeah around and stuff do you tend to do",
    "start": "1573120",
    "end": "1578240"
  },
  {
    "text": "you tend to use that in like front end with typescript because i've noticed it's uh",
    "start": "1578240",
    "end": "1584240"
  },
  {
    "text": "like it's a it's uh the support for typescript it's gonna be not so great",
    "start": "1584240",
    "end": "1589440"
  },
  {
    "text": "and and like in my company they tend to want us to kind of just do",
    "start": "1589440",
    "end": "1595279"
  },
  {
    "text": "you know script or type without oh",
    "start": "1595279",
    "end": "1600880"
  },
  {
    "text": "good question let me think about that i do know that when we used we do use typescript but we only use it on one",
    "start": "1600880",
    "end": "1606480"
  },
  {
    "text": "project just because typescript is freaking annoying it's it's good it's great you should always",
    "start": "1606480",
    "end": "1613039"
  },
  {
    "text": "define your type strongly you know you want to ensure that you're getting data in the way you intend to get it",
    "start": "1613039",
    "end": "1618080"
  },
  {
    "text": "but yeah no with minimizing it using other libraries",
    "start": "1618080",
    "end": "1625039"
  },
  {
    "text": "i don't know actually just because like i don't use like yeah i don't use functional libraries myself yeah like i said they're",
    "start": "1625039",
    "end": "1632559"
  },
  {
    "text": "i like javascript you know in the messy way it is so but if you all are interested that's why",
    "start": "1632559",
    "end": "1637679"
  },
  {
    "text": "i have them for you guys not for me all right any other questions",
    "start": "1637679",
    "end": "1645840"
  },
  {
    "text": "thank you",
    "start": "1647919",
    "end": "1651158"
  },
  {
    "text": "in the project i'm at now there's these async functions and the way it's set up now it's not",
    "start": "1654080",
    "end": "1660000"
  },
  {
    "text": "returning a partner so i sort of have to list into a mistake okay do you have a good actor can you do",
    "start": "1660000",
    "end": "1666799"
  },
  {
    "text": "that yeah so actually what we you know what i have a freak me why did",
    "start": "1666799",
    "end": "1672080"
  },
  {
    "text": "i do that i have a talk on middleware stuff and i did include a function there just on using so what we use is we use",
    "start": "1672080",
    "end": "1679039"
  },
  {
    "text": "epics in combat in combination with redux and we've worked with saga as well so",
    "start": "1679039",
    "end": "1684080"
  },
  {
    "text": "basically how it works is that epics uses observables so it kind of detects itself when the",
    "start": "1684080",
    "end": "1690720"
  },
  {
    "text": "promise is returned and then it carries out the updating states so let me see if i can find that real quick for you",
    "start": "1690720",
    "end": "1698720"
  },
  {
    "text": "how do i escape look at that two talks for the price of one aren't you lucky",
    "start": "1698880",
    "end": "1704320"
  },
  {
    "text": "uh yeah my screen does not want me to leave",
    "start": "1704320",
    "end": "1710720"
  },
  {
    "text": "how do i wait who knows the key for like exiting full screen with max is it f11",
    "start": "1710720",
    "end": "1718799"
  },
  {
    "text": "is it no i'm pressing exit yes",
    "start": "1718799",
    "end": "1724320"
  },
  {
    "text": "i am calm shift command up yeah that didn't work",
    "start": "1724320",
    "end": "1731279"
  },
  {
    "text": "i'm stuck on my screen i will define it with my head so yeah we use ethics observables and how",
    "start": "1731279",
    "end": "1738240"
  },
  {
    "text": "the observables work basically is that you pass enough it's kind of like with promise.all",
    "start": "1738240",
    "end": "1743760"
  },
  {
    "text": "you're kind of just passing a function to the observable and it waits until all the promises have been resolved and then",
    "start": "1743760",
    "end": "1748880"
  },
  {
    "text": "it will return the value so that's kind of for me that's the easiest way for detecting",
    "start": "1748880",
    "end": "1754320"
  },
  {
    "text": "um for handling asynchronous premises so case in point i was i'm working on this",
    "start": "1754320",
    "end": "1760159"
  },
  {
    "text": "this project we're working on at work we need to call a we need to use the google timezone api to return the time zone for",
    "start": "1760159",
    "end": "1767279"
  },
  {
    "text": "a particular location that a user is passing so what we do is that we get the location and then we have to map that location",
    "start": "1767279",
    "end": "1774960"
  },
  {
    "text": "with the time zone api so mapping mapping itself cannot be asynchronous function because it defeats like i said",
    "start": "1774960",
    "end": "1780799"
  },
  {
    "text": "mapping is kind of intended to be um functional because it's a high order function so we cannot use an",
    "start": "1780799",
    "end": "1787279"
  },
  {
    "text": "asynchronous function with maps so what we end up doing is that we end up using a promise.o and then passing that value into the map",
    "start": "1787279",
    "end": "1794320"
  },
  {
    "text": "so what we do is like you await your promise.o and then you call the you call your map function and then you call your",
    "start": "1794320",
    "end": "1801039"
  },
  {
    "text": "async function which is the defined asynchronous function it's you end up using like four awaits keywords and the",
    "start": "1801039",
    "end": "1807360"
  },
  {
    "text": "one thing but yeah that is the catch with handling necessary side effects you know so i would recommend observables or",
    "start": "1807360",
    "end": "1814799"
  },
  {
    "text": "just trying to cut your promises you know catch those little promises all right i've gotten two questions",
    "start": "1814799",
    "end": "1821279"
  },
  {
    "text": "which is very good but i'm willing to take more because i'm generous anybody else",
    "start": "1821279",
    "end": "1826640"
  },
  {
    "text": "i'm here for a while so you guys come on it's just gonna be awkward if i'm standing on stage actually let me see how many",
    "start": "1826640",
    "end": "1833200"
  },
  {
    "text": "yeah like a lot of minutes",
    "start": "1833200",
    "end": "1838240"
  },
  {
    "text": "any other questions i am willing to take questions outside of functional programming as well you can ask me stuff",
    "start": "1838720",
    "end": "1844240"
  },
  {
    "text": "about javascript and i will do my best no no",
    "start": "1844240",
    "end": "1851200"
  },
  {
    "text": "going once going twice i have a question",
    "start": "1851200",
    "end": "1857920"
  },
  {
    "text": "[Music] when i use javascript it's there's often been a lot of weird things that surprise",
    "start": "1857920",
    "end": "1865200"
  },
  {
    "text": "me do you have any good resources for learning those weird things",
    "start": "1865200",
    "end": "1870880"
  },
  {
    "text": "ah javascript yes javascript is unpredictable in the",
    "start": "1870880",
    "end": "1876000"
  },
  {
    "text": "best of ways you know kind of how sometimes things are false but then sometimes they're true but not all false things are equal to other false things",
    "start": "1876000",
    "end": "1882559"
  },
  {
    "text": "you know like an empty array is not technically no but it could be undefined and then you're like like null is not undefined",
    "start": "1882559",
    "end": "1889120"
  },
  {
    "text": "what does that even anyway i too have a lot of problems with javascript um",
    "start": "1889120",
    "end": "1894640"
  },
  {
    "text": "what would i recommend for understanding the weirdness that is javascript huh",
    "start": "1894640",
    "end": "1900720"
  },
  {
    "text": "i think honestly i just kind of accepted it you know i was just like sometimes things are just things like that but",
    "start": "1900799",
    "end": "1906320"
  },
  {
    "text": "that's a bad answer let me look something up for you uh huh have i come across any phone articles on",
    "start": "1906320",
    "end": "1912720"
  },
  {
    "text": "understanding honestly most of it's just a lot of twitter threads of people complaining about how i'm doing javascript is i can",
    "start": "1912720",
    "end": "1918960"
  },
  {
    "text": "i literally cannot think of anything that's actually helpful but if i do i will include it in these",
    "start": "1918960",
    "end": "1925600"
  },
  {
    "text": "slides and you will have access to it how does that sound or you can find me after and i'll look something up on my",
    "start": "1925600",
    "end": "1930640"
  },
  {
    "text": "phone right now i'll let you know",
    "start": "1930640",
    "end": "1935000"
  },
  {
    "text": "you don't know javascript that is a fun one yeah i went like four pages into that one and i was like you're right i",
    "start": "1943279",
    "end": "1949360"
  },
  {
    "text": "don't know js so i closed it but if you want to read it you should i also write javascript for dummies",
    "start": "1949360",
    "end": "1955519"
  },
  {
    "text": "because i have a thing for books that insult me apparently so maybe you could check that out",
    "start": "1955519",
    "end": "1960720"
  },
  {
    "text": "as well all right i've gotten three questions if there are no more i will pack up that's",
    "start": "1960720",
    "end": "1966080"
  },
  {
    "text": "a lie i'm staying here so i get more yeah",
    "start": "1966080",
    "end": "1970000"
  },
  {
    "text": "functional factors a lot and what are the benefits of the ones you use like which ones do you use and what are the",
    "start": "1971279",
    "end": "1976720"
  },
  {
    "text": "benefits yeah so with functional patterns with at work we work with um atomic design and",
    "start": "1976720",
    "end": "1982960"
  },
  {
    "text": "we try to always stick with like at least using pure functions so how that works is that we break our components",
    "start": "1982960",
    "end": "1988399"
  },
  {
    "text": "into atoms so what we would have is that we would have a button component button components always return just the button",
    "start": "1988399",
    "end": "1994399"
  },
  {
    "text": "so in that button component you can define all the variants of a button that you would like",
    "start": "1994399",
    "end": "1999440"
  },
  {
    "text": "you know so you could have primary button secondary button you could pass in any parameter and then it would always return what you expect and then",
    "start": "1999440",
    "end": "2005360"
  },
  {
    "text": "from atoms we go to organisms organisms combine atoms so let's say i have a",
    "start": "2005360",
    "end": "2010559"
  },
  {
    "text": "butting atom and i have a label atom and i have an impute atom in an organism",
    "start": "2010559",
    "end": "2015600"
  },
  {
    "text": "i could have an impute field organism which would then take an impute on the label and then from an organism you go",
    "start": "2015600",
    "end": "2022159"
  },
  {
    "text": "into a molecule where you end up combining organisms i hate when i say too many words but you",
    "start": "2022159",
    "end": "2027600"
  },
  {
    "text": "understand what i mean i hope you go from molecules finally to templates i want to say so basically how",
    "start": "2027600",
    "end": "2034880"
  },
  {
    "text": "we work is that we build on tiny functions and we use those tiny functions to build larger functions",
    "start": "2034880",
    "end": "2039919"
  },
  {
    "text": "because you're working with tiny functions you always want to make sure that all your tiny functions are predictable so that when you use them in",
    "start": "2039919",
    "end": "2045120"
  },
  {
    "text": "your larger functions it avoids having side effects you don't intend so yeah that kind of pattern we tend to use pure",
    "start": "2045120",
    "end": "2050800"
  },
  {
    "text": "functions more the things like minimizing side effects like we've said side effects are necessary in javascript",
    "start": "2050800",
    "end": "2055919"
  },
  {
    "text": "so we just try to handle them as best but yeah we're not purely functional in that aspect",
    "start": "2055919",
    "end": "2061839"
  },
  {
    "text": "so that is that i got four questions i'm on a roll let's",
    "start": "2061839",
    "end": "2066878"
  },
  {
    "text": "make it an even five huh i'm greedy yes i know i said i'd stop at two but i'm hoping for five now",
    "start": "2066879",
    "end": "2072158"
  },
  {
    "text": "i have i have time we have lots of time yeah",
    "start": "2072159",
    "end": "2078960"
  },
  {
    "text": "i'm not used to javascript sorry",
    "start": "2079040",
    "end": "2083280"
  },
  {
    "text": "is there a way to do that oh yeah in javascript we just use catches so how that works is if you have",
    "start": "2085520",
    "end": "2090560"
  },
  {
    "text": "your um let's say you're fetching a value from a database you can you have your",
    "start": "2090560",
    "end": "2096960"
  },
  {
    "text": "try and your catch functions so with try you just if the function is okay",
    "start": "2096960",
    "end": "2102560"
  },
  {
    "text": "then pass the response if it's wrong catch that error and then return that error to something else so with our",
    "start": "2102560",
    "end": "2108800"
  },
  {
    "text": "projects we use like toasts like those tiny little notifications that pop up so if we catch any errors then we just pass",
    "start": "2108800",
    "end": "2114720"
  },
  {
    "text": "them to the toast value and then the",
    "start": "2114720",
    "end": "2120160"
  },
  {
    "text": "computer restarted weird so we passed the error to the toast value and then it's",
    "start": "2121520",
    "end": "2128160"
  },
  {
    "text": "that's kind of how we catch it is that similar to what you're doing haskell how do you do it in oscar",
    "start": "2128160",
    "end": "2135280"
  },
  {
    "text": "i don't know what that is what's a monastery",
    "start": "2135280",
    "end": "2139640"
  },
  {
    "text": "is that monarchs like m-o-n-a-d you learn something new every day all",
    "start": "2146880",
    "end": "2152720"
  },
  {
    "text": "right great i've not used haskell i feel like clearly i don't look like the camera pressing that right house girl my",
    "start": "2152720",
    "end": "2158480"
  },
  {
    "text": "brain does not work that way so but thank you that was a good question",
    "start": "2158480",
    "end": "2164880"
  },
  {
    "text": "all right i got five questions and my laptop shuts itself down so even it is tired of me so i'm just gonna close this",
    "start": "2164880",
    "end": "2171040"
  },
  {
    "text": "now if you guys do have any other questions like i said you could ask me on my website jumaimbo.com or on twitter",
    "start": "2171040",
    "end": "2177760"
  },
  {
    "text": "at jamaimabu and you know i'd love to chat so thank you so much for listening even though i went off topic so many",
    "start": "2177760",
    "end": "2184640"
  },
  {
    "text": "times just so many times but thank you guys very much and enjoy the rest of the conference",
    "start": "2184640",
    "end": "2191420"
  },
  {
    "text": "[Applause]",
    "start": "2191420",
    "end": "2195359"
  },
  {
    "text": "you",
    "start": "2200400",
    "end": "2202480"
  }
]