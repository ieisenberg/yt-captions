[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "all right I think we'll start hi I am Alan I'm from Norway and I'm here to",
    "start": "30",
    "end": "5520"
  },
  {
    "text": "talk to you today about modern web application security bugs so a few words",
    "start": "5520",
    "end": "10530"
  },
  {
    "text": "about me first I work for a small consulting company in Oslo and I usually work as a developer but I also do",
    "start": "10530",
    "end": "16490"
  },
  {
    "text": "security stuff so I do security testing I do security architecture and I've also started doing quite a lot of bug bounty",
    "start": "16490",
    "end": "23340"
  },
  {
    "text": "hunting as you can see I also build some open-source security tools and I'm also head of the OS Norway chapter out of",
    "start": "23340",
    "end": "30420"
  },
  {
    "text": "Norway and you have my Twitter handle there as well if you want to ask me questions later or during your talk or",
    "start": "30420",
    "end": "36059"
  },
  {
    "text": "whatever just raise your hand if you if you have any questions during your talk",
    "start": "36059",
    "end": "41360"
  },
  {
    "text": "the OS top-10 has been out for quite a few years and one of the the sad things",
    "start": "42170",
    "end": "47640"
  },
  {
    "text": "about the OS top-10 is that we've seen the same bugs appear over and over and over again since this is one of the",
    "start": "47640",
    "end": "53039"
  },
  {
    "text": "first ones came came out but as I started to look into all of these bug bounty programs and looking through what",
    "start": "53039",
    "end": "59670"
  },
  {
    "text": "was happening in these bug bounty programs I could see a lot of new types of bugs that were appearing that I that",
    "start": "59670",
    "end": "65580"
  },
  {
    "text": "didn't really get any focus because a lot of people are just focusing on the top ten so we had a new version of the",
    "start": "65580",
    "end": "71790"
  },
  {
    "text": "top ten come out in 2017 and on this list were two new bugs or two three",
    "start": "71790",
    "end": "79320"
  },
  {
    "text": "actually but two of them were kind of bugs in the second the last one is more of a process thing but we had XML",
    "start": "79320",
    "end": "85830"
  },
  {
    "text": "external entities and in security sterilization come in and these are things that we've seen in these bug bounty programs for a long time so what",
    "start": "85830",
    "end": "93299"
  },
  {
    "text": "I'm going to do in this talk is I'm gonna go through I'm gonna start at some of the new stuff in your sub ten and",
    "start": "93299",
    "end": "99329"
  },
  {
    "text": "then I'm gonna move outside at your top ten and explain some of these bugs and I'm either really brave or really stupid",
    "start": "99329",
    "end": "106350"
  },
  {
    "text": "because all the things I'm going to show you is mostly demo based and I don't have video backup because I don't",
    "start": "106350",
    "end": "112680"
  },
  {
    "text": "believe in that i I'm demo or die so that they better work so if we go to the",
    "start": "112680",
    "end": "118350"
  },
  {
    "text": "bug bounty programs we'll see we see a lot of the same things this is statistic from bugcrowd",
    "start": "118350",
    "end": "123719"
  },
  {
    "text": "and we see a lot of the same things like we see in the OS top-10 like cross-site scripting is fairly dominant we have",
    "start": "123719",
    "end": "129140"
  },
  {
    "text": "stored cross-site scripting and reflected cross-site scripting here and we have some other things like server-side",
    "start": "129140",
    "end": "135420"
  },
  {
    "text": "injection and and then a big pile of father over there if we go to to hacker",
    "start": "135420",
    "end": "141510"
  },
  {
    "text": "one instead and their report will we'll see that at the top here it's a bit hard to read but it's also cross site",
    "start": "141510",
    "end": "146910"
  },
  {
    "text": "scripting that's the top one and then we have information disclosure as the second one and we can see they've also",
    "start": "146910",
    "end": "152760"
  },
  {
    "text": "divided this into industries so we can see the transportation for instance over",
    "start": "152760",
    "end": "158239"
  },
  {
    "text": "here they have a big problem with cross-site scripting one of the things",
    "start": "158239",
    "end": "164910"
  },
  {
    "text": "that I've really had a lot of help from when we're learning about these bugs is",
    "start": "164910",
    "end": "170580"
  },
  {
    "text": "is to read reports coming out of these bug bounty programs so this is a twitter",
    "start": "170580",
    "end": "175799"
  },
  {
    "text": "account called disclosed edge one which will tweet out any new report that comes out from from from hacker one and in",
    "start": "175799",
    "end": "184170"
  },
  {
    "text": "these reports you can actually also search them or look them up on hacker one they have this list as well but on",
    "start": "184170",
    "end": "190620"
  },
  {
    "text": "each of these reports you can go in and you can find what was the bug about and often they still share a lot of details",
    "start": "190620",
    "end": "197280"
  },
  {
    "text": "about how the bag was found etc this is one of my bugs that I found in in the library called Sam Levi which had an XML",
    "start": "197280",
    "end": "204269"
  },
  {
    "text": "signature wrapping Bone ability in it I'll show you some of these reports",
    "start": "204269",
    "end": "209310"
  },
  {
    "text": "throughout this session so you can see some examples of the things I'm talking about so the first thing we'll start",
    "start": "209310",
    "end": "215730"
  },
  {
    "text": "talking about is XML and I mentioned XML external entities and so let's go jump",
    "start": "215730",
    "end": "221400"
  },
  {
    "text": "straight into the demo so I have this really simple API the top box here is",
    "start": "221400",
    "end": "227310"
  },
  {
    "text": "the request that I'm sending and the bottom box down here is the response I'm getting back from the server and this is",
    "start": "227310",
    "end": "233400"
  },
  {
    "text": "actually happening so I'm not just I'm not faking it it's actually being sent to the server and I get something back so you can see if I click this multiple",
    "start": "233400",
    "end": "239640"
  },
  {
    "text": "times the only thing that's changing is basically this ID field in the center here I can also get the data back not",
    "start": "239640",
    "end": "250049"
  },
  {
    "text": "that interesting but now we're moving into the XML external entity attack so",
    "start": "250049",
    "end": "255840"
  },
  {
    "text": "what I'm doing in this case is I'm defining a new entity called content and the content of this entity is going to",
    "start": "255840",
    "end": "262979"
  },
  {
    "text": "be the contents of this file called EDC password and then I'm gonna use this new entity",
    "start": "262979",
    "end": "269310"
  },
  {
    "text": "down here so let's see what happens it grabs the contents of the file and it",
    "start": "269310",
    "end": "274320"
  },
  {
    "text": "pushes it into the XML and that's stored in the database so now instead of a simple name or something like that it",
    "start": "274320",
    "end": "280770"
  },
  {
    "text": "grabs the content of the file pushes it in and because this is a this back-end is a Java I can do more than that I",
    "start": "280770",
    "end": "286440"
  },
  {
    "text": "don't actually have to have the file prefix there I can just remove that it still works but I could also just do a dot if I just",
    "start": "286440",
    "end": "295290"
  },
  {
    "text": "do a dot is gonna list all the files in the current directory that the application is running and I see there's",
    "start": "295290",
    "end": "300840"
  },
  {
    "text": "a file here that looks interesting called passwords txt let's grab that and",
    "start": "300840",
    "end": "308130"
  },
  {
    "text": "it was the password was then Summer 2018 these kinds of passwords have been",
    "start": "308130",
    "end": "315000"
  },
  {
    "text": "mentioned many times in security gate talks lately because people tend to switch passwords in this pattern where",
    "start": "315000",
    "end": "321240"
  },
  {
    "text": "they add the year as a prefix so this",
    "start": "321240",
    "end": "326310"
  },
  {
    "text": "was the the base version of this we can list file so we can grab files we can steal stuff off the server now the next",
    "start": "326310",
    "end": "335610"
  },
  {
    "text": "part we have what's called Nexus LT and then XSLT it lets us take an XML and then transform that XML into something",
    "start": "335610",
    "end": "342390"
  },
  {
    "text": "else in this case I'm transforming an XML into HTML so you can see down here",
    "start": "342390",
    "end": "348000"
  },
  {
    "text": "now I have an HTML I have body and I have a table and I just took the values from one of the previous messages that I",
    "start": "348000",
    "end": "354390"
  },
  {
    "text": "sent in and just converted it to it to HTML using this XSLT but that's not all",
    "start": "354390",
    "end": "361770"
  },
  {
    "text": "that interesting but of course I can I can use this because XSLT provides a lot of features so if I can provide my own",
    "start": "361770",
    "end": "368360"
  },
  {
    "text": "XSLT then I can actually start to query the system about things so in this case",
    "start": "368360",
    "end": "373890"
  },
  {
    "text": "I'm going to ask it what version of XSLT is here so you can see here it says this",
    "start": "373890",
    "end": "379560"
  },
  {
    "text": "was version 2.0 this is the vendor of this XSLT transformer so you get a lot",
    "start": "379560",
    "end": "385350"
  },
  {
    "text": "of information that's just leaked back because I can I can do this there's also",
    "start": "385350",
    "end": "391440"
  },
  {
    "text": "an interesting property call or a function actually called document so with document I can take an file an XML",
    "start": "391440",
    "end": "398910"
  },
  {
    "text": "file that sits on the server and include that in the XML so much like the xxe that I just showed you but in this",
    "start": "398910",
    "end": "407249"
  },
  {
    "text": "case it has to be an XML file because if not it wouldn't be able to parse it so",
    "start": "407249",
    "end": "412619"
  },
  {
    "text": "in this case I'm stealing a file called pom.xml which is basically the deployment descriptor for a Java app it",
    "start": "412619",
    "end": "418110"
  },
  {
    "text": "will contain all the dependencies so if we if we scroll down here we can see that it lists out all the dependencies",
    "start": "418110",
    "end": "425939"
  },
  {
    "text": "that this application is using of course I could also do xxe in the XSLT because",
    "start": "425939",
    "end": "432689"
  },
  {
    "text": "the XSLT is also an XML so in this case I'm just doing the exact same thing as I did in the first example just dealing",
    "start": "432689",
    "end": "438179"
  },
  {
    "text": "the contents of this file it doesn't have it there in in XSLT version 2 it",
    "start": "438179",
    "end": "446669"
  },
  {
    "text": "also provides a new function called own parsed text and in this case it doesn't have to be in XML anymore it doesn't",
    "start": "446669",
    "end": "452849"
  },
  {
    "text": "have to be valid XML anymore so I can steal any file off the server I can just do like this and again I'm stealing the same file",
    "start": "452849",
    "end": "459179"
  },
  {
    "text": "just as an example I could also do lookups across the network so now I have",
    "start": "459179",
    "end": "466439"
  },
  {
    "text": "I I can I can start to do HTTP queries for instance from the XML parser so the",
    "start": "466439",
    "end": "471809"
  },
  {
    "text": "XML parser will go and look up this URL that's here and this if I just open it",
    "start": "471809",
    "end": "477689"
  },
  {
    "text": "will see that what's behind this internal you your I that I can't reach from the outside is actually an elastic",
    "start": "477689",
    "end": "483839"
  },
  {
    "text": "search instance that's supposed to be hidden but I can reach it because I'm using this function abusing this functionality basically to get stuff",
    "start": "483839",
    "end": "490739"
  },
  {
    "text": "that's that I'm not supposed to be able to get sometimes when we're abusing and",
    "start": "490739",
    "end": "498539"
  },
  {
    "text": "xxe vulnerability we can't see the end result coming back to us because maybe",
    "start": "498539",
    "end": "503610"
  },
  {
    "text": "it fails like it fails to parse it or it doesn't really show a show was the XML that did it it got from from the parsing",
    "start": "503610",
    "end": "510749"
  },
  {
    "text": "but in this case we can use something called blind xxe so this is a bit a bit",
    "start": "510749",
    "end": "516839"
  },
  {
    "text": "more difficult to explain I'm just going to show you first and I'm going to Spain what happens afterwards so first I'm going to set up a server that basically",
    "start": "516839",
    "end": "525410"
  },
  {
    "text": "gives back a file if if the parser tries to go to my server it's going to get",
    "start": "525410",
    "end": "531120"
  },
  {
    "text": "this file that contains the data that you see there and what it's going to do it's going to",
    "start": "531120",
    "end": "536519"
  },
  {
    "text": "grab the contents of this passwords txt file it's gonna send that back to me on",
    "start": "536519",
    "end": "542459"
  },
  {
    "text": "an HTTP request so if you see what's happened when I click the send button it first there's first a get request that",
    "start": "542459",
    "end": "548519"
  },
  {
    "text": "comes and gets this this file this yet ext DTD file that's on top and then",
    "start": "548519",
    "end": "554160"
  },
  {
    "text": "there's a new request coming in and says steal and then we see the password once again yeah we see the password Summer",
    "start": "554160",
    "end": "561779"
  },
  {
    "text": "2018 here so to briefly explain what's",
    "start": "561779",
    "end": "567300"
  },
  {
    "start": "565000",
    "end": "565000"
  },
  {
    "text": "going on so just gonna close this one what we're doing here is first we're",
    "start": "567300",
    "end": "574440"
  },
  {
    "text": "we're defining a parameter called data and the contents of data is going to be",
    "start": "574440",
    "end": "579839"
  },
  {
    "text": "the contents of a file in this case it is a shadow in in the next line here",
    "start": "579839",
    "end": "585540"
  },
  {
    "text": "we're defining a new parameter which we're going to grab from my attacker server so we're going to grab this DTD",
    "start": "585540",
    "end": "592050"
  },
  {
    "text": "that we see at the bottom here this DTD it it contains a new entity called",
    "start": "592050",
    "end": "598170"
  },
  {
    "text": "external entity which contains this stuff which basically at some point will try to get something from my server so",
    "start": "598170",
    "end": "604380"
  },
  {
    "text": "this is where the data is leaked so it loads the the DTD it adds all these",
    "start": "604380",
    "end": "610529"
  },
  {
    "text": "things down here and it ends up sending the data back as a new get request towards the end it's a bit more",
    "start": "610529",
    "end": "618120"
  },
  {
    "text": "difficult than the other ones where we could just see the data coming back immediately but it's also super scary because this parser might be way down in",
    "start": "618120",
    "end": "624930"
  },
  {
    "text": "the stack somewhere where we can't even reach it but suddenly it starts to ping us back so this is an example from",
    "start": "624930",
    "end": "632459"
  },
  {
    "text": "hacker 1 in this case the the program is run by Twitter the severity of this xxe",
    "start": "632459",
    "end": "640230"
  },
  {
    "text": "report was scored as a medium 5.3 but the bounty the guy who found this got",
    "start": "640230",
    "end": "646079"
  },
  {
    "text": "was $10,000 for it so it's quite quite a big sum of money because of course this",
    "start": "646079",
    "end": "652079"
  },
  {
    "text": "is a really serious issue if you can steal any file off the server you could steal things like SSH keys or other",
    "start": "652079",
    "end": "657660"
  },
  {
    "text": "passwords or things like that so it might end up giving you access to the server",
    "start": "657660",
    "end": "663980"
  },
  {
    "start": "664000",
    "end": "664000"
  },
  {
    "text": "so how do we stop it well there are a few alternatives we could disable DTD support so you can't define these",
    "start": "664510",
    "end": "670600"
  },
  {
    "text": "entities at the top of the xml so that's the first thing we want to do some",
    "start": "670600",
    "end": "675699"
  },
  {
    "text": "frameworks have this feature called secure XML parsing which will basically do the same thing and then we can also",
    "start": "675699",
    "end": "681910"
  },
  {
    "text": "disable external entities there are a lot of different ways if we go to the OS XML external entity prevention cheat",
    "start": "681910",
    "end": "687940"
  },
  {
    "text": "sheet we'll see a lot of examples on how to do this luckily for dotnet developers xxe has",
    "start": "687940",
    "end": "693820"
  },
  {
    "text": "been disabled since version 4.5.2 so this is quite a long time ago but yet we still see developers re-enabling it",
    "start": "693820",
    "end": "700810"
  },
  {
    "text": "because they need some feature for some reason in Java it's just disappointing there are so many parsers that are still",
    "start": "700810",
    "end": "707350"
  },
  {
    "text": "vulnerable to this so you have to make sure that you secure it I would actually recommend that if you if you have an XML",
    "start": "707350",
    "end": "714790"
  },
  {
    "text": "parser try it out at a unit test so you're sure that it's never reintroduce later at some point so that was xxe",
    "start": "714790",
    "end": "723850"
  },
  {
    "text": "we're moving on to the next bit so we're moving on to the insecurities serialization bit there was also an EOS",
    "start": "723850",
    "end": "730180"
  },
  {
    "text": "top 10 and serialization is something we're doing a lot",
    "start": "730180",
    "end": "735639"
  },
  {
    "text": "we are serializing objects into json or xml or some kind of binary format to pass it across the wire just storing in",
    "start": "735639",
    "end": "742329"
  },
  {
    "text": "database and things like that these serialization is of course the opposite we take the serialized object",
    "start": "742329",
    "end": "747490"
  },
  {
    "text": "and then we get it converted back into a format or or an object that we we have on the server this is used in all kinds",
    "start": "747490",
    "end": "754630"
  },
  {
    "text": "of places it's used in in IPC stuff it's used in in all kinds of api's it's used",
    "start": "754630",
    "end": "759670"
  },
  {
    "text": "for caching it's used for shared caches it's used for databases and all kinds of things where we're passing objects back",
    "start": "759670",
    "end": "765310"
  },
  {
    "text": "and forth over the wire so we can imagine it looked some looks something like this so we have some kind of",
    "start": "765310",
    "end": "771760"
  },
  {
    "start": "768000",
    "end": "768000"
  },
  {
    "text": "adjacent writer class that's gonna there's gonna take an object and then it's going to serialize it for us into",
    "start": "771760",
    "end": "777399"
  },
  {
    "text": "JSON and then at some point later we're gonna read it back in and we're gonna specify the class that it's supposed to",
    "start": "777399",
    "end": "782790"
  },
  {
    "text": "create and we're gonna read stuff in and just create a new object and this is fine if we have the top object here this",
    "start": "782790",
    "end": "790060"
  },
  {
    "start": "789000",
    "end": "789000"
  },
  {
    "text": "is fine like we have a class of person this class has a name and it has a",
    "start": "790060",
    "end": "795250"
  },
  {
    "text": "constructor that takes a name and just basically creates an object that doesn't do anything other than hold a tiny piece of data if we",
    "start": "795250",
    "end": "803740"
  },
  {
    "text": "look up the second class here though if we were ever able to instantiate that class from an API call this would",
    "start": "803740",
    "end": "811090"
  },
  {
    "text": "actually run a file because it does work in the constructor and this might be a utility that we have somewhere something",
    "start": "811090",
    "end": "818320"
  },
  {
    "text": "that we're not supposed to use from the API but sometimes we're able to instantiate those objects from the API",
    "start": "818320",
    "end": "824260"
  },
  {
    "text": "regardless so some of these frameworks",
    "start": "824260",
    "end": "829720"
  },
  {
    "text": "JSON frameworks or XML frameworks they allow us to specify the type that we want to get back so maybe the API is",
    "start": "829720",
    "end": "837190"
  },
  {
    "text": "supposed to take in a person but in this case we have this dollar type thing where we can specify well I actually",
    "start": "837190",
    "end": "843160"
  },
  {
    "text": "want this runner class instead of so I want this class up here I don't want the person object I wanted to instantiate",
    "start": "843160",
    "end": "848320"
  },
  {
    "text": "this type of object instead and if if this feature is enabled in the framework",
    "start": "848320",
    "end": "854110"
  },
  {
    "text": "is it's going to start this class and it's going to run the code same thing here for XML we have this type parameter",
    "start": "854110",
    "end": "860500"
  },
  {
    "text": "it might be called something else but you'll see it because you'll see like package names and things and maybe even like which DLL it's supposed to be in",
    "start": "860500",
    "end": "866830"
  },
  {
    "text": "and this would again allow us to instantiate an object that we're not supposed to be able to create from the",
    "start": "866830",
    "end": "873130"
  },
  {
    "text": "API usually these things are a bit more complicated than this so this is one",
    "start": "873130",
    "end": "879460"
  },
  {
    "text": "example from from dotnet from the presentation framework so in this case you can see the dollar type and we're",
    "start": "879460",
    "end": "885970"
  },
  {
    "text": "creating an object data provider and within this object data provider we're creating a process and we're taking this",
    "start": "885970",
    "end": "892780"
  },
  {
    "text": "process and we're adding some some parameters to a method and then we're invoking that method so usually we have",
    "start": "892780",
    "end": "899200"
  },
  {
    "text": "to chain a few objects to get where we want to be so we because of course as an",
    "start": "899200",
    "end": "904270"
  },
  {
    "text": "attacker we want to be able to run code on the server so here is an example from",
    "start": "904270",
    "end": "910740"
  },
  {
    "text": "spring and in this case instead of specifying the type like a parameter",
    "start": "910740",
    "end": "916900"
  },
  {
    "text": "we're instead and since you instead using something called the dynamic proxy and we're saying this is the interface",
    "start": "916900",
    "end": "922540"
  },
  {
    "text": "of the class that you're going to create but the class itself is going to be completely different so this case is",
    "start": "922540",
    "end": "927640"
  },
  {
    "text": "just going to do a ping so if I send this it seems to fail I'm getting like a 500 server error back",
    "start": "927640",
    "end": "935070"
  },
  {
    "text": "man it didn't work right but if we if we look a bit further at this message we can see all the way over here it says",
    "start": "935070",
    "end": "941650"
  },
  {
    "text": "class cast exception and then there's a UNIX process at the end so it actually did create a process it did actually run",
    "start": "941650",
    "end": "950140"
  },
  {
    "text": "ping but it wasn't able to convert that into a contract so that's why it fell but it actually did run what we're",
    "start": "950140",
    "end": "956410"
  },
  {
    "text": "supposed to run so but I mean ping that's not all that interesting what if we could get access to the server",
    "start": "956410",
    "end": "962380"
  },
  {
    "text": "instead so let's try that so what I'm going to do in this case is I'm going to",
    "start": "962380",
    "end": "967600"
  },
  {
    "text": "run bash and I'm gonna give it a command that is going to run so it's going I'm",
    "start": "967600",
    "end": "973420"
  },
  {
    "text": "gonna create an interactive bash shell it I'm gonna send that to dev TCP a",
    "start": "973420",
    "end": "979380"
  },
  {
    "text": "hostname and a port so it's actually gonna open a connection outwards toward my attacker server and it's gonna create",
    "start": "979380",
    "end": "986050"
  },
  {
    "text": "a remote pass shell towards my server but for that to work I would first have to set up something",
    "start": "986050",
    "end": "992320"
  },
  {
    "text": "that listens on that port so I'm just going to do that really easy using",
    "start": "992320",
    "end": "998110"
  },
  {
    "text": "netcat I'm gonna listen on for it 1 3 3 7 and then when I hit the send button",
    "start": "998110",
    "end": "1005570"
  },
  {
    "text": "you see there's a new prompt that occurs appeared here it says root on contacts",
    "start": "1005570",
    "end": "1011670"
  },
  {
    "text": "hackable victim so now I can actually run commands here I can do LS I can browse around the filesystem I have full",
    "start": "1011670",
    "end": "1018300"
  },
  {
    "text": "control over this server so I've just hacked into it by using this realization attack and then gotten a shell back to",
    "start": "1018300",
    "end": "1025110"
  },
  {
    "text": "me this is pretty scary here is an",
    "start": "1025110",
    "end": "1032280"
  },
  {
    "text": "example from hacker 1 this was in Starbucks Starbucks program and someone",
    "start": "1032280",
    "end": "1038880"
  },
  {
    "text": "found a remote this realization vulnerability in one of their systems they had something called a JBoss mq",
    "start": "1038880",
    "end": "1044280"
  },
  {
    "text": "this is a message queue and this this one was vulnerable to 2d civilization",
    "start": "1044280",
    "end": "1049710"
  },
  {
    "text": "attacks things that can happen with",
    "start": "1049710",
    "end": "1055170"
  },
  {
    "start": "1052000",
    "end": "1052000"
  },
  {
    "text": "these types of attacks like a lot of the the the documentation and and blog posts",
    "start": "1055170",
    "end": "1060840"
  },
  {
    "text": "around the digitalization attacks have been focused around things that are are across of a specific specific",
    "start": "1060840",
    "end": "1069030"
  },
  {
    "text": "framework for instance like the presentation framework that I just showed you but what if someone could",
    "start": "1069030",
    "end": "1075240"
  },
  {
    "text": "instantiate bad utilities that we have what if they could instantiate more than one singleton of a class we expect to be",
    "start": "1075240",
    "end": "1081510"
  },
  {
    "text": "a singleton what if they could instantly eight this util method the runner man or",
    "start": "1081510",
    "end": "1086670"
  },
  {
    "text": "the runner from class that we had what if they could do things that were not they're not supposed to be able to do so",
    "start": "1086670",
    "end": "1092460"
  },
  {
    "text": "we might have even though our frameworks might not be vulnerable we might have classes that are dangerous in our code",
    "start": "1092460",
    "end": "1099540"
  },
  {
    "text": "base and an attacker might be able to instantiate those those object if he",
    "start": "1099540",
    "end": "1104580"
  },
  {
    "text": "knows what he's doing and of course this can lead to all kinds of stuff this can lead to denial of service because we",
    "start": "1104580",
    "end": "1110250"
  },
  {
    "text": "might be able to shut down the server we could manipulate the state in the session and things like that we could compromise the integrity of the system",
    "start": "1110250",
    "end": "1116940"
  },
  {
    "text": "or we could even as I shown you get remote code execution so the underlying",
    "start": "1116940",
    "end": "1122520"
  },
  {
    "start": "1121000",
    "end": "1121000"
  },
  {
    "text": "cause is usually that the attacker is somehow able to specify the type so the class that's supposed to be instantiated",
    "start": "1122520",
    "end": "1129150"
  },
  {
    "text": "it's is in the attackers the attacker is able to to specify that somehow and then",
    "start": "1129150",
    "end": "1136470"
  },
  {
    "text": "get that object instantiated and the way that we can stop this is first of all we",
    "start": "1136470",
    "end": "1142860"
  },
  {
    "start": "1140000",
    "end": "1140000"
  },
  {
    "text": "should keep our frameworks up-to-date I've put that at the lower one because it's but but it's it's kind of the most",
    "start": "1142860",
    "end": "1149490"
  },
  {
    "text": "important one because we a lot of these things are being patched in frameworks but we also want to limit this",
    "start": "1149490",
    "end": "1155790"
  },
  {
    "text": "realization to specific packages or specific namespaces where we have our API contracts we we want them to have",
    "start": "1155790",
    "end": "1164400"
  },
  {
    "text": "certain annotations for them to be able to be instantiated by the the D civilization framework things like that",
    "start": "1164400",
    "end": "1169799"
  },
  {
    "text": "and if we can we should really disable specification of types like in in Jason",
    "start": "1169799",
    "end": "1176040"
  },
  {
    "text": "net it's disabled by default but you might be able to turn it back on if you need it but it might be dangerous so the",
    "start": "1176040",
    "end": "1184290"
  },
  {
    "text": "next one is something called template injection this wasn't in the ORS top ten",
    "start": "1184290",
    "end": "1189929"
  },
  {
    "text": "and it's not listed as a specific thing but then the top thing in our scope ten is injection which covers a lot of stuff",
    "start": "1189929",
    "end": "1195750"
  },
  {
    "text": "when people think about injection they usually think about Sigma injection this is something quite different so we",
    "start": "1195750",
    "end": "1202620"
  },
  {
    "start": "1202000",
    "end": "1202000"
  },
  {
    "text": "have these templating frameworks where we're using these fragments and we're creating HTML in some way this these",
    "start": "1202620",
    "end": "1208800"
  },
  {
    "text": "this might be something we do on the server side with something like racer but it might also be something that we're doing on the client-side using",
    "start": "1208800",
    "end": "1214830"
  },
  {
    "text": "components from react or angular or view or something like that so we we have these templates these templates are used",
    "start": "1214830",
    "end": "1220440"
  },
  {
    "text": "to create HTML and we kind of combine these things and and and this simplifies",
    "start": "1220440",
    "end": "1226800"
  },
  {
    "text": "our architecture of course but it might also be a bit dangerous so at least some",
    "start": "1226800",
    "end": "1233580"
  },
  {
    "text": "of the the first types of templating frameworks they were quite the",
    "start": "1233580",
    "end": "1240540"
  },
  {
    "text": "implementation was really basic like so if you had a template looking something like this what would actually happen is",
    "start": "1240540",
    "end": "1247080"
  },
  {
    "text": "the it would parse this and it would run something like this so it sees okay",
    "start": "1247080",
    "end": "1253170"
  },
  {
    "text": "there's an h1 and then and then there's like these curly braces that's signifies that here I'm going to run some code so",
    "start": "1253170",
    "end": "1258930"
  },
  {
    "text": "it splits it out into two strings and then it runs eval on the thing in the center with mark which might be okay I",
    "start": "1258930",
    "end": "1265080"
  },
  {
    "text": "mean this is a template provided by us as a developer but it might also be dangerous if we combine these things in",
    "start": "1265080",
    "end": "1271230"
  },
  {
    "text": "the wrong order so here's an example we have a variable called title which contains hello we have a simple template",
    "start": "1271230",
    "end": "1277950"
  },
  {
    "text": "the same template that I just showed you where we have title as a variable and then of course when we invoke the render",
    "start": "1277950",
    "end": "1284460"
  },
  {
    "text": "function of the template templating framework it's gonna render h1 hello perfect",
    "start": "1284460",
    "end": "1290840"
  },
  {
    "text": "but sometimes we we want to take a few templates and kind of combine them into",
    "start": "1290840",
    "end": "1296550"
  },
  {
    "text": "a larger page because we want me well might want to reuse some component of",
    "start": "1296550",
    "end": "1301650"
  },
  {
    "text": "the page in many different places so we might render one thing in one part of the code and we take the output of that",
    "start": "1301650",
    "end": "1306960"
  },
  {
    "text": "and we shove it in to another template further down the line and we end up with something like this and the thing is as",
    "start": "1306960",
    "end": "1313050"
  },
  {
    "text": "a developer this works perfectly so we have title is slow and bodies world and after rendering the first bit it's gonna",
    "start": "1313050",
    "end": "1320010"
  },
  {
    "text": "be h1 hello h1 and then we put it in the second one and we render that and it's gonna be hello world just like we expect",
    "start": "1320010",
    "end": "1326610"
  },
  {
    "text": "it but there's an issue here what if the variable in the",
    "start": "1326610",
    "end": "1332820"
  },
  {
    "text": "first template contained a new template so what if it contained instead of hello",
    "start": "1332820",
    "end": "1338549"
  },
  {
    "text": "it contained two times two inside curly braces in this case it would render the",
    "start": "1338549",
    "end": "1344429"
  },
  {
    "text": "first template it will come back out as a new template so you can see and in in this line here we actually have a new",
    "start": "1344429",
    "end": "1351330"
  },
  {
    "text": "template which is the contents of the variable coming from the end user and",
    "start": "1351330",
    "end": "1356659"
  },
  {
    "text": "then the end result is we're gonna actually eval the stuff that's inside here coming from the end user and we get",
    "start": "1356659",
    "end": "1363509"
  },
  {
    "text": "four here instead but seeing code like this is boring so let's do a demo I have this simple",
    "start": "1363509",
    "end": "1370799"
  },
  {
    "text": "application I can send in a I have a URL parameter called name and I'm gonna send",
    "start": "1370799",
    "end": "1375809"
  },
  {
    "text": "in my name and what you see here at the top is the rendered HTML and at the",
    "start": "1375809",
    "end": "1380909"
  },
  {
    "text": "bottom you see the source code of this rendered HTML so in this case it just says hello Alain and then you can see",
    "start": "1380909",
    "end": "1386669"
  },
  {
    "text": "the same thing down here it says hello Ellen now what happens if I instead of",
    "start": "1386669",
    "end": "1392610"
  },
  {
    "text": "typing my name I typed two times 3 that",
    "start": "1392610",
    "end": "1397889"
  },
  {
    "text": "says hello six instead and it says hello six down here as well so in this case we",
    "start": "1397889",
    "end": "1403710"
  },
  {
    "text": "have a template injection so I can provide a template either or as a part of the URL or as a post parameter that's",
    "start": "1403710",
    "end": "1410730"
  },
  {
    "text": "stored in in database or whatever and it's going to be rendered on the server side so I basically can run code on the",
    "start": "1410730",
    "end": "1417389"
  },
  {
    "text": "server so this is in this system that's",
    "start": "1417389",
    "end": "1422820"
  },
  {
    "text": "running this is using a templating framework called twig so if I do underscore self it's going to fail and",
    "start": "1422820",
    "end": "1429149"
  },
  {
    "text": "it's gonna actually reveal what type it is because we're gonna say twig environment here and it's a twig",
    "start": "1429149",
    "end": "1435809"
  },
  {
    "text": "template of hair and it fails but now I",
    "start": "1435809",
    "end": "1441090"
  },
  {
    "text": "know it's twig so now I can start to mess around with it and I'm gonna do the exact same thing as I did with the",
    "start": "1441090",
    "end": "1446610"
  },
  {
    "text": "insecurity sterilization I'm gonna use a vulnerability that exists in twig which is I can define a filter called x'q and",
    "start": "1446610",
    "end": "1454970"
  },
  {
    "text": "this filter is going to call the function called ID or a a system utility",
    "start": "1454970",
    "end": "1461399"
  },
  {
    "text": "called ID so it's going to xx ID which basically means it's going to run",
    "start": "1461399",
    "end": "1466559"
  },
  {
    "text": "the ID command on the server and is gonna print out whatever was there so in this case it says well this application",
    "start": "1466559",
    "end": "1472679"
  },
  {
    "text": "is obviously running as dub dub dub data but instead of running ID I'm gonna run",
    "start": "1472679",
    "end": "1479220"
  },
  {
    "text": "this bin bash see blah blah blah and and just do the exact same thing as I did with the insecurity sterilization so I'm",
    "start": "1479220",
    "end": "1485549"
  },
  {
    "text": "gonna set up a new listener like this and I'm gonna send it in and as you can",
    "start": "1485549",
    "end": "1492059"
  },
  {
    "text": "see I now have a shell here on this server and I'm not logged in as dub dub dub - data and I can run commands just",
    "start": "1492059",
    "end": "1499919"
  },
  {
    "text": "as I did in the previous one now this",
    "start": "1499919",
    "end": "1507480"
  },
  {
    "text": "was server-side templating section so you could see when when I just had two",
    "start": "1507480",
    "end": "1513210"
  },
  {
    "text": "times three it would come back as six down here but what what about client",
    "start": "1513210",
    "end": "1518639"
  },
  {
    "text": "side so we have templating frameworks on the client side as well things like angular for instance so in this case I'm",
    "start": "1518639",
    "end": "1524940"
  },
  {
    "text": "going to send send this but I'm not going to render it wrong on the on the server side I'm gonna render it just as",
    "start": "1524940",
    "end": "1530759"
  },
  {
    "text": "a normal template so if you look down here you see it still says two times three down there but as the rendered",
    "start": "1530759",
    "end": "1537600"
  },
  {
    "text": "HTML it says six so obviously something's now broken between the lower",
    "start": "1537600",
    "end": "1543119"
  },
  {
    "text": "one and the upper one so the rendered HTML show is something different than what's what's down there and the reason",
    "start": "1543119",
    "end": "1549419"
  },
  {
    "text": "is of course that there is angular is being invoked there an angular sees this two times three template down there and",
    "start": "1549419",
    "end": "1556409"
  },
  {
    "text": "it takes a I know I know this this is an angular template I'm going to execute it and we get hence we get the six of",
    "start": "1556409",
    "end": "1562700"
  },
  {
    "text": "course if we're thinking now we could do cross-site scripting so instead of instead of doing two times three we",
    "start": "1562700",
    "end": "1570720"
  },
  {
    "text": "could do alert one instead just like a normal cross site scripting example unfortunately in this case that wouldn't",
    "start": "1570720",
    "end": "1577080"
  },
  {
    "text": "work because in the this version of angular 1.0.8 it had a sandbox so it",
    "start": "1577080",
    "end": "1585059"
  },
  {
    "text": "said you're not supposed to be able to invoke a specific set of API from templates but it also had a",
    "start": "1585059",
    "end": "1591840"
  },
  {
    "text": "vulnerability that allows you to get around this restriction and this is a",
    "start": "1591840",
    "end": "1597029"
  },
  {
    "text": "bit of an odd one so instead of just a normal sort of just like out trying to invoke the alert function directly what we can",
    "start": "1597029",
    "end": "1604230"
  },
  {
    "text": "do is we can take a string and we can take the constructor of the string which is the string constructor and we can",
    "start": "1604230",
    "end": "1610740"
  },
  {
    "text": "take the constructor of the string constructor which is the function constructor and we take the function",
    "start": "1610740",
    "end": "1615930"
  },
  {
    "text": "constructor and we can provide it with a new function as text and then we can",
    "start": "1615930",
    "end": "1621680"
  },
  {
    "text": "invoke that function this is this was a bypass of the sandbox that was in",
    "start": "1621680",
    "end": "1627360"
  },
  {
    "text": "angular so if I send this in I'm gonna get this annoying pop-up and it's gonna pop up twice for some reason this was a",
    "start": "1627360",
    "end": "1636060"
  },
  {
    "text": "way to get around this restriction and the interesting bit that you can see here is if we look all the way down here",
    "start": "1636060",
    "end": "1641910"
  },
  {
    "text": "we can actually see that this is HTML escaped so the server-side framework try",
    "start": "1641910",
    "end": "1648930"
  },
  {
    "text": "to do the right thing and and kind of escape things or you're not supposed to be able to go in and out of JavaScript",
    "start": "1648930",
    "end": "1655800"
  },
  {
    "text": "and things like that but before angular sees this code it's going to be D",
    "start": "1655800",
    "end": "1661410"
  },
  {
    "text": "escaped by the HTML parser because it's gonna say okay there's this this text inside this this element and I'm just",
    "start": "1661410",
    "end": "1668730"
  },
  {
    "text": "gonna take that out I'm gonna I'm gonna give it to angular and angular sees a there's a template cool I'm gonna I'm",
    "start": "1668730",
    "end": "1674670"
  },
  {
    "text": "gonna execute it so here's an example of",
    "start": "1674670",
    "end": "1680040"
  },
  {
    "text": "angular injection from Rockstar Games it's got a bounty of thousand dollars in",
    "start": "1680040",
    "end": "1685950"
  },
  {
    "text": "this case and it was rated as high so example of the same thing that I just",
    "start": "1685950",
    "end": "1692400"
  },
  {
    "text": "showed you so if we want to test for template injection you can try all kinds",
    "start": "1692400",
    "end": "1697560"
  },
  {
    "start": "1694000",
    "end": "1694000"
  },
  {
    "text": "of templates so if you know what kind of framework you're using you can try to inject templates that work for that",
    "start": "1697560",
    "end": "1702870"
  },
  {
    "text": "specific framework so either a double or a triple curly braces it could be like a dollar and then curly braces it could be",
    "start": "1702870",
    "end": "1710250"
  },
  {
    "text": "all kinds of things thatthat specific and I usually test with things like two times two or four minus one and things",
    "start": "1710250",
    "end": "1716310"
  },
  {
    "text": "like that because that will easily show if something is working or not I will see what I get back and if it's the same",
    "start": "1716310",
    "end": "1722580"
  },
  {
    "text": "thing then it's probably safe but sometimes it doesn't render the template exactly where you are but when you're",
    "start": "1722580",
    "end": "1728880"
  },
  {
    "text": "clicking around you might find that at some point later it does actually render it because they're like being outside of the component or",
    "start": "1728880",
    "end": "1735070"
  },
  {
    "text": "something like that so we can use this for for a cross-site scripting like I just showed you but and we can also use",
    "start": "1735070",
    "end": "1741190"
  },
  {
    "text": "it to get remote code execution and and run stuff on the server if we're gonna",
    "start": "1741190",
    "end": "1747010"
  },
  {
    "start": "1746000",
    "end": "1746000"
  },
  {
    "text": "stop template injection we have to make sure that we don't double evaluate in place so we don't check the contents of",
    "start": "1747010",
    "end": "1752710"
  },
  {
    "text": "one template render that and then we put that into a second template and then like string concatenation thing and then",
    "start": "1752710",
    "end": "1758290"
  },
  {
    "text": "create another template from that and then run that all over again and then when we have these because we're using",
    "start": "1758290",
    "end": "1764290"
  },
  {
    "text": "client-side templates we have to make sure that the server doesn't give the browser a template that is not intended",
    "start": "1764290",
    "end": "1771550"
  },
  {
    "text": "to do and this was actually in the angular documentation for a long time do not mix client and server templates it",
    "start": "1771550",
    "end": "1779110"
  },
  {
    "text": "says at the top point here in in the last versions of angular they actually",
    "start": "1779110",
    "end": "1784180"
  },
  {
    "text": "removed this sound box altogether because there was a group of researchers that we're trying all the time to break",
    "start": "1784180",
    "end": "1790210"
  },
  {
    "text": "out of the sandbox so whenever angular patched the sound box they would go back in and find a new way to bypass the",
    "start": "1790210",
    "end": "1795700"
  },
  {
    "text": "sound box so at some point they just said we're not gonna have this sound box anymore because it doesn't make sense you shouldn't mix client and server",
    "start": "1795700",
    "end": "1801850"
  },
  {
    "text": "templates anyway so we're we're gonna just remove the the sound box altogether so then you could actually have done",
    "start": "1801850",
    "end": "1807490"
  },
  {
    "text": "alert one if that was the thing that you want to do the next thing is insecure",
    "start": "1807490",
    "end": "1813970"
  },
  {
    "text": "course or a cross origin resource sharing this is also something that we've seen a lot during the last years a",
    "start": "1813970",
    "end": "1822450"
  },
  {
    "text": "lot of developers seem to kind of miss understand what this header is doing or",
    "start": "1822450",
    "end": "1827530"
  },
  {
    "text": "they kind of forget that they deployed something that was really permissive and it ends up in production even though it",
    "start": "1827530",
    "end": "1833650"
  },
  {
    "text": "was just meant for test but so we have these headers that will allow the browser to read stuff if if it's just",
    "start": "1833650",
    "end": "1841150"
  },
  {
    "text": "correctly so I asked my friend Google Translate to help me understand what",
    "start": "1841150",
    "end": "1846670"
  },
  {
    "text": "this header is doing so we have as the first example here access control allow origin example comm access control allow",
    "start": "1846670",
    "end": "1853630"
  },
  {
    "text": "credentials true I'm gonna translate that from HTTP to English and it's gonna say ok so if the user is logged in and",
    "start": "1853630",
    "end": "1860680"
  },
  {
    "text": "this it's example.com please allow that site to access to users data okay so we",
    "start": "1860680",
    "end": "1866680"
  },
  {
    "text": "really have to try example to come in this case if we want that to work what happens then if I do",
    "start": "1866680",
    "end": "1873490"
  },
  {
    "text": "access control allow origin star and then access control allow region and translate that and it's gonna say well",
    "start": "1873490",
    "end": "1879880"
  },
  {
    "text": "if the user is logged in please allow any site that the user visits to access the users data huh that doesn't",
    "start": "1879880",
    "end": "1885880"
  },
  {
    "text": "sound good luckily the browser vendors knew we were going to mess up this one so you're not",
    "start": "1885880",
    "end": "1891700"
  },
  {
    "text": "actually allowed to have the policy that says access control allow region star and then allow credentials true so this",
    "start": "1891700",
    "end": "1897970"
  },
  {
    "text": "is this is what you'd see in the in the browser console in chrome for instance it's gonna say well this this is not",
    "start": "1897970",
    "end": "1903940"
  },
  {
    "text": "allowed sorry you can't do that but as developers we are creative so we've found ways to mess this off anyway so",
    "start": "1903940",
    "end": "1911590"
  },
  {
    "start": "1911000",
    "end": "1911000"
  },
  {
    "text": "the common mistakes the echo that's the first one so you can't have star so",
    "start": "1911590",
    "end": "1917020"
  },
  {
    "text": "people figure that well I can just take the originator coming into the server and I can add that I as the access",
    "start": "1917020",
    "end": "1922900"
  },
  {
    "text": "control allow Origin header going back as the response header and it will work yeah you now re-enabled access",
    "start": "1922900",
    "end": "1930850"
  },
  {
    "text": "controller our edge in star you really shouldn't have done that and this is something we've seen a lot the next one",
    "start": "1930850",
    "end": "1939750"
  },
  {
    "text": "insufficient validation so origin requests get origin header and if origin",
    "start": "1939750",
    "end": "1946510"
  },
  {
    "text": "ends with example.com then we're going to add this so we're not going to add just any header but if it if it ends",
    "start": "1946510",
    "end": "1953080"
  },
  {
    "text": "with example to come that's fine except not example.com also ends with example.com but it's not example.com",
    "start": "1953080",
    "end": "1962730"
  },
  {
    "text": "third one is no what is no well access",
    "start": "1963600",
    "end": "1969400"
  },
  {
    "text": "control allow origin no access control allow credentials true no we have to ask",
    "start": "1969400",
    "end": "1975970"
  },
  {
    "text": "Google Translate again about this one so access control allow regional a translate that and Google Translate says",
    "start": "1975970",
    "end": "1982150"
  },
  {
    "text": "well if the user is logged in please allow any site the user visits to access the users data as long as the sites",
    "start": "1982150",
    "end": "1988090"
  },
  {
    "text": "knows how to use iframe with the sandbox attribute okay here's an example so we",
    "start": "1988090",
    "end": "1997030"
  },
  {
    "text": "have an iframe with the sandbox we say allow scripts allow forms and then in this iframe we do this",
    "start": "1997030",
    "end": "2005570"
  },
  {
    "text": "request to the server this xhr request in this case it's going to get the null",
    "start": "2005570",
    "end": "2011880"
  },
  {
    "text": "origin as its origin and so we've kind of once again we added this allow origin",
    "start": "2011880",
    "end": "2018270"
  },
  {
    "text": "star allow credentials true a lot of this stuff was found by a guy called",
    "start": "2018270",
    "end": "2025559"
  },
  {
    "text": "James Kelly and James kettle works for ports wigger which creates the burps burps wit which is one of the the best",
    "start": "2025559",
    "end": "2032370"
  },
  {
    "text": "pen testing tools that for for web applications and and this is one of the bugs that he reported and as you can see",
    "start": "2032370",
    "end": "2039929"
  },
  {
    "text": "this was reported to tomato and down here we see the exact pattern that I",
    "start": "2039929",
    "end": "2045540"
  },
  {
    "text": "just showed you for one of them it will allow anything ending in some tomato comm including not tomato comm so this",
    "start": "2045540",
    "end": "2052770"
  },
  {
    "text": "was the exact same example next one",
    "start": "2052770",
    "end": "2058679"
  },
  {
    "text": "server site request forgery what is server so we you might have",
    "start": "2058679",
    "end": "2063840"
  },
  {
    "text": "heard of client-side request forgery what is server-side request forgery well a server-side request might be a reverse",
    "start": "2063840",
    "end": "2071220"
  },
  {
    "start": "2068000",
    "end": "2068000"
  },
  {
    "text": "proxy it might be something in our system that once we send in a request to do something that system is going to do",
    "start": "2071220",
    "end": "2078270"
  },
  {
    "text": "another request to get something else so we might do an HTTP request to some kind of system which might be a server",
    "start": "2078270",
    "end": "2084720"
  },
  {
    "text": "application might be a nginx it might be some other type of reverse proxy it might be whatever and then based on that",
    "start": "2084720",
    "end": "2092100"
  },
  {
    "text": "request the server application will lend us a second HTTP request to get some data somewhere else so this might be",
    "start": "2092100",
    "end": "2098040"
  },
  {
    "text": "from a micro service it might be from some service out on the Internet it might be something completely different well anyway the thing the thing that",
    "start": "2098040",
    "end": "2105510"
  },
  {
    "text": "where this can be a problem is if in the first request we can modify the location",
    "start": "2105510",
    "end": "2111480"
  },
  {
    "text": "of the second request so here's a simple example so we have a request from the browser that comes in and it's",
    "start": "2111480",
    "end": "2117450"
  },
  {
    "start": "2114000",
    "end": "2114000"
  },
  {
    "text": "example.org slash images slash 200 by 200 slash product dot JPEG and in our",
    "start": "2117450",
    "end": "2123690"
  },
  {
    "text": "server application what we're doing is we're taking the original URL and with extracting the we're removing the first",
    "start": "2123690",
    "end": "2129360"
  },
  {
    "text": "part and we're putting in a new server which is HTTP images stuff example.org",
    "start": "2129360",
    "end": "2134430"
  },
  {
    "text": "instead and then we're going to get that I'm going to strain that back to the end-user so we're deleting the first part adding",
    "start": "2134430",
    "end": "2141660"
  },
  {
    "text": "something new and then we're going to grab that data and string it back to user the problem in this case is what if",
    "start": "2141660",
    "end": "2148800"
  },
  {
    "text": "we do something like this well it's going to delete the first part and it's",
    "start": "2148800",
    "end": "2154380"
  },
  {
    "text": "eventually then going to go to images of example.org adat evil comm so by modifying the first request we can now",
    "start": "2154380",
    "end": "2161100"
  },
  {
    "text": "specify a new location for the back-channel request so this is server",
    "start": "2161100",
    "end": "2166590"
  },
  {
    "text": "side request forgery we can now make the server do a request that it didn't intend to do so there are",
    "start": "2166590",
    "end": "2174330"
  },
  {
    "text": "many ways of doing this and this is another example instead of instead of just specifying a domain name we could",
    "start": "2174330",
    "end": "2181080"
  },
  {
    "text": "specify an IP in this case we do this will become basically basic off so it",
    "start": "2181080",
    "end": "2187740"
  },
  {
    "text": "becomes the the first part images dot example.org becomes the username dummy becomes the password and an act and then",
    "start": "2187740",
    "end": "2193440"
  },
  {
    "text": "the IP that we actually want to go to that's another trick that some people do",
    "start": "2193440",
    "end": "2199250"
  },
  {
    "text": "some some systems they have this thing where they want to import data for us so",
    "start": "2199250",
    "end": "2204480"
  },
  {
    "text": "this might be like an RSS feed but it could also be like financial data or something so we can have an XML file",
    "start": "2204480",
    "end": "2209550"
  },
  {
    "text": "someone somewhere on our site and we can make that their system go and read that data for us so this would be a typical",
    "start": "2209550",
    "end": "2216360"
  },
  {
    "text": "example where we could see and something that would load something that wasn't supposed to load so it could do",
    "start": "2216360",
    "end": "2222870"
  },
  {
    "text": "something like this instead so instead of going out and grabbing the data that it was intended we're gonna go to localhost and we're",
    "start": "2222870",
    "end": "2228690"
  },
  {
    "text": "going to go to the MongoDB database that sits on local host on port 220 7017",
    "start": "2228690",
    "end": "2233880"
  },
  {
    "text": "I'm gonna read data off of that is that because we can now make requests wherever we want or in some cases we",
    "start": "2233880",
    "end": "2241650"
  },
  {
    "text": "could even use abuse this to read files like we did with xxe so we could use a",
    "start": "2241650",
    "end": "2247740"
  },
  {
    "text": "file URL it would go read the file instead of going to an external URL but",
    "start": "2247740",
    "end": "2252990"
  },
  {
    "start": "2252000",
    "end": "2252000"
  },
  {
    "text": "where this has become very interesting is in cloud providers because a lot of",
    "start": "2252990",
    "end": "2259080"
  },
  {
    "text": "cloud providers they have this host at 160 9.25 469 dot to 54 which is called a",
    "start": "2259080",
    "end": "2265410"
  },
  {
    "text": "method of the host and this is a place where you can go to get information about the current cloud server but you",
    "start": "2265410",
    "end": "2271710"
  },
  {
    "text": "can also get in in ABS you can also get security credentials so we could use",
    "start": "2271710",
    "end": "2277860"
  },
  {
    "text": "this to get security credentials back to us then we might be able to SSH into the server and of course we could access all",
    "start": "2277860",
    "end": "2285570"
  },
  {
    "text": "kinds of other systems there as well and this is hard like protecting against",
    "start": "2285570",
    "end": "2290940"
  },
  {
    "start": "2288000",
    "end": "2288000"
  },
  {
    "text": "this is really hard like let's look at IP addresses for instance this is from from the slides of guy called Nicaragua",
    "start": "2290940",
    "end": "2297360"
  },
  {
    "text": "a French man who's been doing a lot of research into this so let's let's okay so we have 169.254 hundred sixty 9.25",
    "start": "2297360",
    "end": "2305040"
  },
  {
    "text": "for this is the same IP four to five hey",
    "start": "2305040",
    "end": "2310650"
  },
  {
    "text": "that that's that's above 256 what's going on well a lot of frameworks they were just like you mod 256 if the number",
    "start": "2310650",
    "end": "2317370"
  },
  {
    "text": "is too high so this is the same IP with overflow this is the same IP just",
    "start": "2317370",
    "end": "2322890"
  },
  {
    "text": "numeric this is the same IP with or numeric forum with overflow this is the",
    "start": "2322890",
    "end": "2329460"
  },
  {
    "text": "same IP in hex format this is the same IP in hex format without the dots",
    "start": "2329460",
    "end": "2335840"
  },
  {
    "text": "this is overflow in hex format without dots this is octal IP so in instead of",
    "start": "2335840",
    "end": "2344910"
  },
  {
    "text": "this in the 10 number 10 system or 16 system we are in hex we're now using 8",
    "start": "2344910",
    "end": "2351150"
  },
  {
    "text": "based on it so there are all kinds of formats this is the same thing it's octal mode but in this case we have",
    "start": "2351150",
    "end": "2357450"
  },
  {
    "text": "overflow or a lot of zeros so this can be quite confusing if we're trying to parse this correctly we could also use",
    "start": "2357450",
    "end": "2366450"
  },
  {
    "text": "the main name so we could create our own domain name custom evil.com and we could point that at 127 0 0 1 so it looks ok",
    "start": "2366450",
    "end": "2375300"
  },
  {
    "text": "well even calm doesn't look ok but if it looked like a bit lip a little bit more benign than that so the server would try",
    "start": "2375300",
    "end": "2382590"
  },
  {
    "text": "and will resolve that and we get oh I'm going to go localhost thing and I grabbed some stuff out of there so someone actually set up a service for",
    "start": "2382590",
    "end": "2389430"
  },
  {
    "text": "this so if you do 127.0.0.1 that's sip dot IO that's going to resolve to the IP",
    "start": "2389430",
    "end": "2395550"
  },
  {
    "text": "in front and you can base 36 encoded as well so in this case it still resolves",
    "start": "2395550",
    "end": "2402150"
  },
  {
    "text": "to 100 and seven zero zero one and we can add stuff in front of that as well to make it even",
    "start": "2402150",
    "end": "2408480"
  },
  {
    "text": "more convoluted so 0.0.0.0 that's like",
    "start": "2408480",
    "end": "2415890"
  },
  {
    "text": "all interfaces it doesn't have to be a hundred and twenty seven series or one either it can be one hundred twenty",
    "start": "2415890",
    "end": "2421920"
  },
  {
    "text": "seven four times it will be the same thing and of course in in ipv6 we get all these kinds of new things like a",
    "start": "2421920",
    "end": "2428430"
  },
  {
    "text": "different format for localhost to get yeah you can see them here so there are",
    "start": "2428430",
    "end": "2433620"
  },
  {
    "text": "all kinds of ways of specifying the same IP and blacklisting this can be quite hard and then there's a guy called",
    "start": "2433620",
    "end": "2440850"
  },
  {
    "start": "2439000",
    "end": "2439000"
  },
  {
    "text": "orange psy who's been doing a lot of research lately into like URL parsers",
    "start": "2440850",
    "end": "2445980"
  },
  {
    "text": "and he found that like this URL here it would be parsed differently depending on if it was parsed on Windows or Linux so",
    "start": "2445980",
    "end": "2453390"
  },
  {
    "text": "on Windows it would see the whole thing as one path but in Linux did we see the first part as the file and then what",
    "start": "2453390",
    "end": "2459660"
  },
  {
    "text": "comes after the question mark would just be disregarded and of course there's",
    "start": "2459660",
    "end": "2466260"
  },
  {
    "text": "apache tomcat which is quite common in the java world which for some reason lets you specify dot dot semicolon and",
    "start": "2466260",
    "end": "2473310"
  },
  {
    "text": "it would treat that as what slash dot dot slash because why not so you could",
    "start": "2473310",
    "end": "2478590"
  },
  {
    "text": "use this to do path reversal and get access to things that you're not supposed to be able to access so here's",
    "start": "2478590",
    "end": "2485700"
  },
  {
    "text": "an example of a s srf server-side request 43 once again from hacker 1 in",
    "start": "2485700",
    "end": "2491730"
  },
  {
    "text": "this case if we see all the way down here that's the exact same IP that I",
    "start": "2491730",
    "end": "2497460"
  },
  {
    "text": "just showed you like 169.254 169.254 it's a perfect example of of that a AWS",
    "start": "2497460",
    "end": "2505830"
  },
  {
    "text": "IP some of the cloud vendors they they now require that in order to be able to",
    "start": "2505830",
    "end": "2511650"
  },
  {
    "text": "reach that host you have to specify a custom header and that's supposed to protect against this thing because then",
    "start": "2511650",
    "end": "2517290"
  },
  {
    "text": "you wouldn't necessarily be able to add a custom header when you're doing a necessary effort ACK how can we detect",
    "start": "2517290",
    "end": "2526200"
  },
  {
    "start": "2524000",
    "end": "2524000"
  },
  {
    "text": "that this thing is going on well we could do something as ever as building a  log so we know whenever we have",
    "start": "2526200",
    "end": "2532260"
  },
  {
    "text": "a a web client or some kind of outbound requests we could log all of those so",
    "start": "2532260",
    "end": "2538039"
  },
  {
    "text": "just like we have an access log for inbound requests we could also have an egress log for outbound requests so we",
    "start": "2538039",
    "end": "2545420"
  },
  {
    "text": "and we could search that from time to time and see if if something bad shows up or we could have like a whitelist or",
    "start": "2545420",
    "end": "2551869"
  },
  {
    "text": "something in there so another way of protecting us this is we could use an",
    "start": "2551869",
    "end": "2557240"
  },
  {
    "text": "outgoing proxies instead of doing all the requests from our server which sits in a maybe in a network zone with access",
    "start": "2557240",
    "end": "2564109"
  },
  {
    "text": "to a lot of things we could say well if you're ever going to do an outbound requests well gonna do this in a different network zone where there's",
    "start": "2564109",
    "end": "2570589"
  },
  {
    "text": "only this proxy server and it can only go outside we should of course normalize",
    "start": "2570589",
    "end": "2576470"
  },
  {
    "text": "the hostname so we could resolve it to an IP and then we could either use firewall rules or some other way of",
    "start": "2576470",
    "end": "2582289"
  },
  {
    "text": "doing a whitelist or blacklist based approach there so IP tables or something",
    "start": "2582289",
    "end": "2588049"
  },
  {
    "text": "like that next one is something called subdomain takeover this is a guy called",
    "start": "2588049",
    "end": "2594829"
  },
  {
    "start": "2593000",
    "end": "2593000"
  },
  {
    "text": "fronts percent of detective I he did a big write-up of this but this is there's been a lot of these lately I'm gonna",
    "start": "2594829",
    "end": "2600589"
  },
  {
    "text": "show you a quite recent example of this so what this does it exploits that we sometimes configure DNS to point to",
    "start": "2600589",
    "end": "2607670"
  },
  {
    "text": "places and we forget that we did that at some point and then someone else can take over one of our subdomains so for",
    "start": "2607670",
    "end": "2615200"
  },
  {
    "start": "2614000",
    "end": "2614000"
  },
  {
    "text": "instance in in Heroku we can specify our name as a part of the URL for the",
    "start": "2615200",
    "end": "2620270"
  },
  {
    "text": "program in in AWS we can also have our",
    "start": "2620270",
    "end": "2625700"
  },
  {
    "text": "name as a part of the URL but it's still like an Amazon domain like that this is the top-level domain and may so maybe",
    "start": "2625700",
    "end": "2632750"
  },
  {
    "text": "we've set up a DNS entry to point to one of these and then at some point we just remove them and we forget all about it",
    "start": "2632750",
    "end": "2639309"
  },
  {
    "text": "so detective ID they found that there were over a hundred different cloud services that have these kinds of",
    "start": "2639309",
    "end": "2645950"
  },
  {
    "text": "options where you could specify your own domain as a part of this so let's see an example here so let's say OS dot and",
    "start": "2645950",
    "end": "2652730"
  },
  {
    "start": "2650000",
    "end": "2650000"
  },
  {
    "text": "Heroku app calm so the company that owns this thing they're gonna go in and say",
    "start": "2652730",
    "end": "2658309"
  },
  {
    "text": "well this Heroku app is going to have a custom domain name which is going to be always thought example to come because",
    "start": "2658309",
    "end": "2663710"
  },
  {
    "text": "that's our company domain top-level domain example to come and then we go into your DNS and we say",
    "start": "2663710",
    "end": "2669470"
  },
  {
    "text": "that if you get the IP of or you get a lookup for OS dot example to come then you're gonna go to this roki DNS thing",
    "start": "2669470",
    "end": "2676340"
  },
  {
    "text": "instead so to show it as an animation instead so we're gonna go out and you",
    "start": "2676340",
    "end": "2683030"
  },
  {
    "text": "say hey I want to I want to know the IP of example.com and it's going to go to",
    "start": "2683030",
    "end": "2688220"
  },
  {
    "text": "the DNS of example.com which is gonna say hey you should you should go over at Heroku Danis and ask them instead so you",
    "start": "2688220",
    "end": "2695480"
  },
  {
    "text": "go over there and you get an IP back and then you can go and reach the actual",
    "start": "2695480",
    "end": "2702230"
  },
  {
    "text": "service running on Heroku and everything works fine but then at some point we",
    "start": "2702230",
    "end": "2708800"
  },
  {
    "text": "remove this rope application but we forget to fix the DNS so the attacker",
    "start": "2708800",
    "end": "2714410"
  },
  {
    "text": "can now go in and recreate an application with the exact same name and they can now own our subdomain because",
    "start": "2714410",
    "end": "2720890"
  },
  {
    "text": "in our DNS we still point to this thing even though we removed it so this can",
    "start": "2720890",
    "end": "2727550"
  },
  {
    "start": "2726000",
    "end": "2726000"
  },
  {
    "text": "have quite a big impact like if an attacker can control one over subdomains this is perfect for fishing now you actually have a domain that's belongs to",
    "start": "2727550",
    "end": "2734660"
  },
  {
    "text": "the company that you're trying to fish you could use this to inject cookies to my domain white cookies you could do",
    "start": "2734660",
    "end": "2740690"
  },
  {
    "text": "defacements and all kinds of things like that and you could even create HTTPS certificates for this subdomain so",
    "start": "2740690",
    "end": "2747530"
  },
  {
    "text": "here's one example a subdomain takeover on s3 at Shopify com",
    "start": "2747530",
    "end": "2753080"
  },
  {
    "text": "here's the very recent example Microsoft had this domain that they were using for",
    "start": "2753080",
    "end": "2759290"
  },
  {
    "text": "Windows tiles so this is from this is this is a it's quite recent April 17 and",
    "start": "2759290",
    "end": "2766000"
  },
  {
    "text": "they they forgot about this domain are they they forgot that they had DNS entry",
    "start": "2766000",
    "end": "2771020"
  },
  {
    "text": "pointing to a natural service so the host that should deliver the XML files notification dot build my pinned site",
    "start": "2771020",
    "end": "2777200"
  },
  {
    "text": "come only showed an error message from Microsoft cloud service assure the host was redirected to a subdomain of a",
    "start": "2777200",
    "end": "2783770"
  },
  {
    "text": "Shusher however this subdomain wasn't registered with a sure so a guy called Hanna Burke",
    "start": "2783770",
    "end": "2788810"
  },
  {
    "text": "he went in and he registered that domain and now he kind of controlled this thing that was used to display data on tiles",
    "start": "2788810",
    "end": "2794030"
  },
  {
    "text": "in Windows which is kind of serious but he did it to block it and then reported",
    "start": "2794030",
    "end": "2799160"
  },
  {
    "text": "it to Microsoft here's another example it's a bit that the the text is a bit small but what it",
    "start": "2799160",
    "end": "2806150"
  },
  {
    "text": "says here is this is from cert SH where you can look up in the certificate",
    "start": "2806150",
    "end": "2812000"
  },
  {
    "text": "transparency logs like certificates that have been issued by the CAS and in this",
    "start": "2812000",
    "end": "2818059"
  },
  {
    "text": "case a certificate was issued with the domain name Simon gris-gris has hacked",
    "start": "2818059",
    "end": "2823250"
  },
  {
    "text": "prod to do bird calm because he was able to do to domain subdomain takeover for",
    "start": "2823250",
    "end": "2829910"
  },
  {
    "text": "one for prod to over comm and then he used some custom domain service here and",
    "start": "2829910",
    "end": "2836960"
  },
  {
    "text": "created a certificate for the thing that he hacked but he added like this I have hacked it calm to the beginning",
    "start": "2836960",
    "end": "2845480"
  },
  {
    "text": "and this is gonna stay there forever because the transparency log is gonna Sh it has to show all the certificates",
    "start": "2845480",
    "end": "2850609"
  },
  {
    "text": "that's ever been issued so if you go and search it will find it",
    "start": "2850609",
    "end": "2856480"
  },
  {
    "text": "the next thing I'm gonna show you is something called web cache poisoning and this was also something that James",
    "start": "2857000",
    "end": "2862160"
  },
  {
    "text": "kettle which I mentioned earlier found when he was doing some research he was looking into bugs that were hard to",
    "start": "2862160",
    "end": "2868220"
  },
  {
    "text": "exploit so maybe you could as a user you could send something in and you would",
    "start": "2868220",
    "end": "2873950"
  },
  {
    "text": "get it back but you couldn't get any other users to see it so if you maybe you could like to our self XSS self",
    "start": "2873950",
    "end": "2880190"
  },
  {
    "text": "across at scripting attack but you couldn't get any other users to see the",
    "start": "2880190",
    "end": "2885319"
  },
  {
    "text": "the stuff that was injected so you could basically only attack yourself which is which is kind of annoying if you're trying to do cross-site scripting attack",
    "start": "2885319",
    "end": "2892369"
  },
  {
    "text": "so he was looking at this and he was trying to exploit these unexploited bugs",
    "start": "2892369",
    "end": "2897559"
  },
  {
    "text": "and he has written a blog post about this and presented at a black after a few years ago so let's look at how this",
    "start": "2897559",
    "end": "2905329"
  },
  {
    "text": "works so we have our server we have a proxy that sits in front of it this might be our own proxied might",
    "start": "2905329",
    "end": "2911089"
  },
  {
    "text": "could have been something like CloudFlare or some other type of proxy that sits in between and then we have",
    "start": "2911089",
    "end": "2916369"
  },
  {
    "text": "our clients so the first client comes in he asked for some website it's not in",
    "start": "2916369",
    "end": "2921380"
  },
  {
    "text": "the cache so the cache goes back in it goes to the server and looks up the data store sit in the cache and returns it to",
    "start": "2921380",
    "end": "2928519"
  },
  {
    "text": "the client so when the next client comes along and asks there's going to be hid in the cache",
    "start": "2928519",
    "end": "2933820"
  },
  {
    "text": "the data is gonna go back so everything works as this is how a cache is supposed to work but then what if the attacker is",
    "start": "2933820",
    "end": "2941080"
  },
  {
    "text": "able to call this URL with this attack then have this go to the server and the",
    "start": "2941080",
    "end": "2948070"
  },
  {
    "text": "server has some vulnerability in this case so the attacker sends some malicious data into the server the",
    "start": "2948070",
    "end": "2953320"
  },
  {
    "text": "server does something stupid with it a render systems in a way that maybe becomes a cross-site scripting attack",
    "start": "2953320",
    "end": "2958570"
  },
  {
    "text": "and then that's stored in the cache so when a benign client comes along later",
    "start": "2958570",
    "end": "2966270"
  },
  {
    "text": "this client is going to get the poisoned version the one with the attack in isn't the this is what what James kettle was",
    "start": "2966270",
    "end": "2972790"
  },
  {
    "text": "researching and he found a lot of ways to do this because of frameworks because",
    "start": "2972790",
    "end": "2978010"
  },
  {
    "text": "of car caches works and things like that so in this case I have at the top here I have a simple request that I can do it",
    "start": "2978010",
    "end": "2985540"
  },
  {
    "text": "only has two headers in this case it has the get slash HTTP 1 1 and specify the",
    "start": "2985540",
    "end": "2990880"
  },
  {
    "text": "host header as well so if I send this in I get back 200 ok and I get this URL",
    "start": "2990880",
    "end": "2998260"
  },
  {
    "text": "here this is the important part in this case so you can see it says dub dub dub hackable dot Network here and that's the",
    "start": "2998260",
    "end": "3004800"
  },
  {
    "text": "same thing as or that's that the host of the actual server in this case so if we",
    "start": "3004800",
    "end": "3010320"
  },
  {
    "text": "go over here instead it says attacker comm and it says X forwarded host so",
    "start": "3010320",
    "end": "3017970"
  },
  {
    "text": "this is a new header and if I now I'm the attacker I'm gonna try to poison the cache so if I send this in we now see",
    "start": "3017970",
    "end": "3024120"
  },
  {
    "text": "that this thing was changed so it now it doesn't say dub dub dub dot detectable",
    "start": "3024120",
    "end": "3030720"
  },
  {
    "text": "Network anymore it says attacker.com there instead but our benign client still sees the the benign version but we",
    "start": "3030720",
    "end": "3039900"
  },
  {
    "text": "poison something with the URL parameter so we poisoned a cache that wasn't the",
    "start": "3039900",
    "end": "3045090"
  },
  {
    "text": "same that the benign client was asking for so we remove this and we try to send it in and now you can see down here it",
    "start": "3045090",
    "end": "3053130"
  },
  {
    "text": "says it still says dub dub dub dub hackable Network so I'm going to send this in a few times because we have to",
    "start": "3053130",
    "end": "3058380"
  },
  {
    "text": "wait until the cache expires and at some point if you look down there you're gonna see at some point is going to",
    "start": "3058380",
    "end": "3064620"
  },
  {
    "text": "change this is when the cache expired you that it expired so now if I go back here",
    "start": "3064620",
    "end": "3070860"
  },
  {
    "text": "and I send this request you can now see that the benign client also got this poisoned version how brave are you guys",
    "start": "3070860",
    "end": "3081140"
  },
  {
    "text": "are you brave enough to participate if you are you can go through this URL I'm",
    "start": "3081140",
    "end": "3086550"
  },
  {
    "start": "3084000",
    "end": "3084000"
  },
  {
    "text": "not going to do anything harmful so if you have a phone or a laptop you can go to this URL here if you open it you can",
    "start": "3086550",
    "end": "3094560"
  },
  {
    "text": "open it in a new tab here it will see",
    "start": "3094560",
    "end": "3101030"
  },
  {
    "text": "yeah it will look something like this right so it's dub dub dub hackable dot",
    "start": "3101930",
    "end": "3107610"
  },
  {
    "text": "network it should look something like this you should say welcome and then it should be a big NDC Minnesota link or a",
    "start": "3107610",
    "end": "3116040"
  },
  {
    "text": "picture there you see it yeah now I'm gonna try it to poison it so all I'm",
    "start": "3116040",
    "end": "3122760"
  },
  {
    "text": "doing now is the web server or not the web server the browser is now",
    "start": "3122760",
    "end": "3128220"
  },
  {
    "text": "hammering this thing it's hammering this thing with requests I'm not changing anything on the server if you try to",
    "start": "3128220",
    "end": "3133620"
  },
  {
    "text": "reload the page in your brain in your browser now you should see something different so I didn't change the server",
    "start": "3133620",
    "end": "3138720"
  },
  {
    "text": "at all I only poisoned the cache so it should now look something like this instead so that's cache poisoning and",
    "start": "3138720",
    "end": "3148850"
  },
  {
    "text": "it's quite a it can be quite a bad problem if we have this so these are",
    "start": "3148850",
    "end": "3156300"
  },
  {
    "start": "3155000",
    "end": "3155000"
  },
  {
    "text": "some of the headers that James Kelly James kettle identified by X host x4 with the toast X original URL and X",
    "start": "3156300",
    "end": "3162270"
  },
  {
    "text": "rewrite URL so these would be used by frameworks in ways that they were they shouldn't and we could use this to",
    "start": "3162270",
    "end": "3167520"
  },
  {
    "text": "poison different URLs and he has some some really cool example applications that you can try if you go to his blog and read on his write-up on this it can",
    "start": "3167520",
    "end": "3178110"
  },
  {
    "start": "3176000",
    "end": "3176000"
  },
  {
    "text": "be hard to do this attack correctly because we have to figure out which URL parameters are part of the cache keys and things like that and which headers",
    "start": "3178110",
    "end": "3185400"
  },
  {
    "text": "are part of the cache keys but James Kelly working for burps whit he added a",
    "start": "3185400",
    "end": "3190650"
  },
  {
    "text": "new extension the burp suite called para minor which can kind of automate this stuff so if we want to stop it ourselves",
    "start": "3190650",
    "end": "3196830"
  },
  {
    "start": "3196000",
    "end": "3196000"
  },
  {
    "text": "we should probably block these headers if we're coming in from the outside like X host exhausts alright for using them",
    "start": "3196830",
    "end": "3203280"
  },
  {
    "text": "that is we should stop them from coming in because they're not supposed to come from the outside they're supposed to be added by this proxy one of the things",
    "start": "3203280",
    "end": "3211080"
  },
  {
    "text": "that that James kettle suggests were also to add these headers as a part of the cache key because if we add them to",
    "start": "3211080",
    "end": "3217560"
  },
  {
    "text": "the part of the cache key then the benign clein is never going to send those headers and so the client is never going to get the poison version we",
    "start": "3217560",
    "end": "3225420"
  },
  {
    "text": "should of course also fixed the server side application which in this case allowed us to inject a bad code on the",
    "start": "3225420",
    "end": "3231030"
  },
  {
    "text": "server based on a host header yeah I",
    "start": "3231030",
    "end": "3237360"
  },
  {
    "text": "have a couple of more minutes I'm going to show you one last thing that I discovered recently it's something",
    "start": "3237360",
    "end": "3244020"
  },
  {
    "text": "called where we're going to look at data API so how many of you are familiar with",
    "start": "3244020",
    "end": "3251970"
  },
  {
    "text": "graph QL but a few of you yeah so graph QL it says graph queue is a query",
    "start": "3251970",
    "end": "3258060"
  },
  {
    "text": "language for API is and a runtime for filling those queries with your existing data so we can now create like these",
    "start": "3258060",
    "end": "3263730"
  },
  {
    "text": "magic rest endpoints with where we can query and get all kinds of data instead of having to specify every message and",
    "start": "3263730",
    "end": "3269850"
  },
  {
    "text": "this is really cool as a developer because we can now we don't have to specify all the endpoints and we can we",
    "start": "3269850",
    "end": "3275580"
  },
  {
    "text": "can get the data at the exact data we need etc etc but if we're not doing this correctly we might also end up with data",
    "start": "3275580",
    "end": "3283350"
  },
  {
    "text": "leakage authorization issues things like that so this is actually real stuff and",
    "start": "3283350",
    "end": "3289740"
  },
  {
    "start": "3287000",
    "end": "3287000"
  },
  {
    "text": "this is not a graph zero but the first one here is I saw this once when I do it",
    "start": "3289740",
    "end": "3296610"
  },
  {
    "text": "what we're doing is a security test script ASP query and then the SQL query so this is SQL injection by design and",
    "start": "3296610",
    "end": "3304650"
  },
  {
    "text": "same thing this was a web service where they would take an SQL query as a part",
    "start": "3304650",
    "end": "3309840"
  },
  {
    "text": "of the soap message and then execute that and return the result back this is the kind of stuff that we can end up",
    "start": "3309840",
    "end": "3315120"
  },
  {
    "text": "with if we're doing graphic UL the wrong way because we can we can be able to",
    "start": "3315120",
    "end": "3320760"
  },
  {
    "start": "3318000",
    "end": "3318000"
  },
  {
    "text": "access things that we're not supposed to be at to access we can get access to data that's belongs to other users and all kinds of stuff like that a couple of",
    "start": "3320760",
    "end": "3328950"
  },
  {
    "text": "example this was from from hacker 1 and if this was actually on hacker 1 so it wasn't just a program",
    "start": "3328950",
    "end": "3334980"
  },
  {
    "text": "hacker one but it was hacker hacker one that was hacked in this in this and this finding here and so they have this issue",
    "start": "3334980",
    "end": "3341880"
  },
  {
    "text": "where by using graph QL you could go you could traverse some links between objects and then you were able to grab",
    "start": "3341880",
    "end": "3347820"
  },
  {
    "text": "data but a better one that I found the other day was this one verified on Shopify cloud comm graph QL discloses",
    "start": "3347820",
    "end": "3355380"
  },
  {
    "text": "internal bear consumption and one of the comments said if you can escalate this",
    "start": "3355380",
    "end": "3360869"
  },
  {
    "text": "to bear denial of service that would be devastating yeah so this is a bunch of",
    "start": "3360869",
    "end": "3367890"
  },
  {
    "start": "3367000",
    "end": "3367000"
  },
  {
    "text": "links I'll tweet these out later so you don't have to photograph them you can get them in a format where you can actually click them but a lot of people",
    "start": "3367890",
    "end": "3374880"
  },
  {
    "text": "have been doing a lot of research into this I'm I'm merely the conveyor of this information like there's a couple of",
    "start": "3374880",
    "end": "3382470"
  },
  {
    "text": "guys who made something called Y so serials which is a lot of listings of fun abilities in terms of these",
    "start": "3382470",
    "end": "3388530"
  },
  {
    "text": "realization attacks you have XSLT stuff like in here you have the template",
    "start": "3388530",
    "end": "3394859"
  },
  {
    "text": "injection once again that's James James Carroll behind that you have the links to the subdomain takeover stuff you have",
    "start": "3394859",
    "end": "3402030"
  },
  {
    "text": "the links to this to Nicaragua grass presentation our own on SSR F and some",
    "start": "3402030",
    "end": "3409380"
  },
  {
    "text": "YouTube videos that Sarah and things like that so that's it there is a URL at",
    "start": "3409380",
    "end": "3416010"
  },
  {
    "text": "the bottom here if you want to play with some of the demo stuff that I just showed you like X sexy and insecure",
    "start": "3416010",
    "end": "3422400"
  },
  {
    "text": "digitalisation there is a github repo there it's github.com slash of the doll slash",
    "start": "3422400",
    "end": "3428369"
  },
  {
    "text": "deserialize and you can get that app running as a docker container and you and and nero in the github repo you can",
    "start": "3428369",
    "end": "3434609"
  },
  {
    "text": "also see like the the payloads that you can send it to attack so that's pretty",
    "start": "3434609",
    "end": "3441840"
  },
  {
    "text": "well on time so thanks a lot for coming [Applause]",
    "start": "3441840",
    "end": "3453260"
  }
]