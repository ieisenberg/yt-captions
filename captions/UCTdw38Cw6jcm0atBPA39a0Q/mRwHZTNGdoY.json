[
  {
    "text": "all right thanks everyone for coming I'm sure you're ready to call it a day but",
    "start": "4600",
    "end": "11800"
  },
  {
    "text": "hopefully we'll have a little bit of fun today this is more of a fun talk is just",
    "start": "11800",
    "end": "18369"
  },
  {
    "text": "stuff that you don't normally talk about which is old old stuff which i think is actually still quite new I don't think",
    "start": "18369",
    "end": "25779"
  },
  {
    "text": "it's necessary just for old people so I'm Scott this AUSA talk is really",
    "start": "25779",
    "end": "32380"
  },
  {
    "text": "what can we learn from the 1970s turns",
    "start": "32380",
    "end": "37870"
  },
  {
    "text": "out there's a lot we can learn and there's a lot of stuff we haven't even learned even though it's 40 years ago",
    "start": "37870",
    "end": "43120"
  },
  {
    "text": "and there's some stuff and 40 years ago that we're still not doing so and there's a shop fund a profit but I'm not",
    "start": "43120",
    "end": "48820"
  },
  {
    "text": "gonna be talking about their show very much in store it's about other things so this is the 1970s a photo taken in the",
    "start": "48820",
    "end": "55899"
  },
  {
    "text": "1970s until a very long time ago and if I am quite old I am so old that I was",
    "start": "55899",
    "end": "62410"
  },
  {
    "text": "actually alive in the 1970s and this is a photo of me down there so alright so",
    "start": "62410",
    "end": "69700"
  },
  {
    "text": "40 years ago a long time then talk about four languages on maybe five languages actually definitely five languages I'm",
    "start": "69700",
    "end": "76930"
  },
  {
    "text": "first going to have a very quick history of programming languages because that's always fun I'm going to talk about",
    "start": "76930",
    "end": "82329"
  },
  {
    "text": "hammers and tool kits and we need to stop using so many hammers and then I'll talk about the languages which are",
    "start": "82329",
    "end": "88689"
  },
  {
    "text": "sequel Prolog ml and small talk and language X so let's start with a brief",
    "start": "88689",
    "end": "96460"
  },
  {
    "text": "history of small talk 350 of programming languages write a language that does not",
    "start": "96460",
    "end": "101470"
  },
  {
    "text": "affect the way you think about program is not worth knowing this is one of my favorite quotes and there's so many",
    "start": "101470",
    "end": "106810"
  },
  {
    "text": "languages we learn you know they're useful like Java or something but it's not going to explode your brain so I'm",
    "start": "106810",
    "end": "112360"
  },
  {
    "text": "going to give a galaxy brain seal of approval to languages that's literally alter your brain chemistry so okay in",
    "start": "112360",
    "end": "122560"
  },
  {
    "text": "the 1950s it was a basically a dead time I call it the Precambrian area there was",
    "start": "122560",
    "end": "128350"
  },
  {
    "text": "no many not many life forms around pretty much everything was an assembly language for and each mission each",
    "start": "128350",
    "end": "133690"
  },
  {
    "text": "mainframe had its own assembly language Fortran came along and what a concept we could actually have a portable language that would run",
    "start": "133690",
    "end": "140130"
  },
  {
    "text": "on more than one mainframe Wow he didn't have to memorize the assembly code so that's a galaxy brain the first",
    "start": "140130",
    "end": "145860"
  },
  {
    "text": "high-level language definitely changed the way people thought about programming languages cobol came along shortly",
    "start": "145860",
    "end": "152460"
  },
  {
    "text": "afterwards and COBOL is the first enterprise language and we've been saddled with enterprise languages ever",
    "start": "152460",
    "end": "159390"
  },
  {
    "text": "since this came along 959 and Lisp of course gets a galaxy brain because it's",
    "start": "159390",
    "end": "166170"
  },
  {
    "text": "the perfect language just because it's Lisp Elizabeth's always been the perfect language always will be the perfect",
    "start": "166170",
    "end": "171300"
  },
  {
    "text": "language here's the problem that listen never really took off and there's a very",
    "start": "171300",
    "end": "177090"
  },
  {
    "text": "interesting essay called worse is better by which a capable which are how you recommend if you want to know why this",
    "start": "177090",
    "end": "182430"
  },
  {
    "text": "present taken over the world and see has taken over the world so in the 1960s stuff started happening",
    "start": "182430",
    "end": "190080"
  },
  {
    "text": "a bit more there are a lot more computers around IBM and the Seven Dwarfs they call them cuz there's IBM",
    "start": "190080",
    "end": "195630"
  },
  {
    "text": "and all the other ones were kind of smaller companies Alvar 60 the clues in the name",
    "start": "195630",
    "end": "203060"
  },
  {
    "text": "this is really the foundation of all of our modern imperative program marriages",
    "start": "203060",
    "end": "209850"
  },
  {
    "text": "incredibly influential language basically all modern languages especially the derivatives of this or",
    "start": "209850",
    "end": "215040"
  },
  {
    "text": "more most imperative languages are derivative this this is great quote this is 13 years after Algol 60 it was so far",
    "start": "215040",
    "end": "222600"
  },
  {
    "text": "ahead of its time that it's also an improvement on the successes let alone an improvement on its previous I think",
    "start": "222600",
    "end": "227610"
  },
  {
    "text": "it's a good quote that's by Tony Hoare so even in the 70s people still weren't doing out all very well so basic is",
    "start": "227610",
    "end": "236280"
  },
  {
    "text": "another one nineteen sixty-four that's a long time ago and what a concept their language that beginners cues I mean",
    "start": "236280",
    "end": "242670"
  },
  {
    "text": "actually they designed it for liberal arts students at Dartmouth College obviously people who aren't even gonna",
    "start": "242670",
    "end": "248100"
  },
  {
    "text": "be programmers could even use it that was how simple that's going to be PL 1 1964 it was touted as the only language",
    "start": "248100",
    "end": "256709"
  },
  {
    "text": "you'll ever need right we know how all that that turned out how many people still use Pier one",
    "start": "256709",
    "end": "261750"
  },
  {
    "text": "right but yet it's one of those things it's going to be the perfect language that solves all of our problems I swim 1966 this is the most influential",
    "start": "261750",
    "end": "270599"
  },
  {
    "text": "language that was never actually implemented I like to think of it as like a Velvet",
    "start": "270599",
    "end": "275610"
  },
  {
    "text": "Underground you know nobody ever read this paper but the people who did with",
    "start": "275610",
    "end": "281250"
  },
  {
    "text": "this paper went on to write other programming languages so it's the parent of functional languages it was their",
    "start": "281250",
    "end": "287190"
  },
  {
    "text": "personal anguish used indentation for a scope so if you used to Python or Haskell or F sharp that white space indentation that offside rule comes from",
    "start": "287190",
    "end": "293880"
  },
  {
    "text": "I swim so super super important APL this",
    "start": "293880",
    "end": "300120"
  },
  {
    "text": "is the first right only language as famous for that but actually it's not people make jokes about APL but in fact",
    "start": "300120",
    "end": "307230"
  },
  {
    "text": "that the point was that mathematicians think in symbols they don't think in",
    "start": "307230",
    "end": "312300"
  },
  {
    "text": "terms of words so why not have a language that is the same kind of symbols that mathematicians would use so",
    "start": "312300",
    "end": "318860"
  },
  {
    "text": "notation as an aid to thought the idea is the new notation reflects the way you",
    "start": "318860",
    "end": "323910"
  },
  {
    "text": "think so that's actually a very important concept and the Ken Iverson who wrote APL actually got a Turing",
    "start": "323910",
    "end": "330690"
  },
  {
    "text": "Award for it so a PL gets a galaxy ring because if you learn APL or a modern version like engineering or something it",
    "start": "330690",
    "end": "336720"
  },
  {
    "text": "will definitely change the way you think about programming similar 67 which came out in 1967 first language with classes",
    "start": "336720",
    "end": "345510"
  },
  {
    "text": "and heritance and all the stuff that we used to nowadays we would think this is very kind of run-of-the-mill but at the",
    "start": "345510",
    "end": "351510"
  },
  {
    "text": "time there's a quite a radical concept all other stuff so similar gets a galaxy",
    "start": "351510",
    "end": "357300"
  },
  {
    "text": "brain but AG actually brain stuff going on because this is a very first time that these things that happened BCPL",
    "start": "357300",
    "end": "365150"
  },
  {
    "text": "infamous is the first language is curly braces so I hate curly braces and so I'm",
    "start": "365150",
    "end": "371160"
  },
  {
    "text": "gonna blame BCL Musa po4 that it is the grandparent of C and so C took a lot of",
    "start": "371160",
    "end": "377460"
  },
  {
    "text": "bad habits from that poor people right logo now if you think having you know",
    "start": "377460",
    "end": "383060"
  },
  {
    "text": "English students learn programming is pretty advanced how about having",
    "start": "383060",
    "end": "388110"
  },
  {
    "text": "children learn programming so logo was a language design for children this is that in those days they still using",
    "start": "388110",
    "end": "394080"
  },
  {
    "text": "mainframes right so they're using mainframes and they're expecting children to program so",
    "start": "394080",
    "end": "400080"
  },
  {
    "text": "it's the idea is that programming actually changes the way you think it helps interact with the world and if the",
    "start": "400080",
    "end": "406980"
  },
  {
    "text": "children learn to program it would help them to be better human beings that's not something true anymore Algol",
    "start": "406980",
    "end": "413580"
  },
  {
    "text": "68 so another version of alcohol very influential as well very very complex",
    "start": "413580",
    "end": "419510"
  },
  {
    "text": "wasn't really didn't really take off like alcohol 60 did so we come to",
    "start": "419510",
    "end": "424680"
  },
  {
    "text": "nineteen seventies now this is a decade where I think computers are becoming cheaper in a lot more programming",
    "start": "424680",
    "end": "431130"
  },
  {
    "text": "languages invented and more importantly a lot of programming paradigms were invented this is where we see all the",
    "start": "431130",
    "end": "437610"
  },
  {
    "text": "modern programming paradigms kind of come into fruition so the first one is",
    "start": "437610",
    "end": "443040"
  },
  {
    "text": "fourth a first concatenative language very interesting you get a galaxy brain",
    "start": "443040",
    "end": "448320"
  },
  {
    "text": "if you use fourth again it will change the way you think about programming there's an interesting book called",
    "start": "448320",
    "end": "453450"
  },
  {
    "text": "thinking forth which I highly recommend about how to write program it's actually",
    "start": "453450",
    "end": "459090"
  },
  {
    "text": "available for free as a PDF download but it was the first book as far as I know",
    "start": "459090",
    "end": "464610"
  },
  {
    "text": "that used the word factoring as in refactoring it's a way of thinking about breaking things into small pieces Pascal",
    "start": "464610",
    "end": "473610"
  },
  {
    "text": "which is like Algol for the rest of us really it was kind of simpler and faster",
    "start": "473610",
    "end": "478700"
  },
  {
    "text": "still popular see of course you've probably heard of that one which is still going strong prologue so Prolog is",
    "start": "478700",
    "end": "486860"
  },
  {
    "text": "the first language of the first major language that introduced another new paradigm which is logic programming",
    "start": "486860",
    "end": "493310"
  },
  {
    "text": "again if you learn how to use Prolog it will really do some mind-expanding",
    "start": "493310",
    "end": "500340"
  },
  {
    "text": "things your skills I'm actually going to talk about that later on ml which also",
    "start": "500340",
    "end": "507150"
  },
  {
    "text": "introduced a new paradigm which is functional programming a lot of groundbreaking stuff going on and we'll",
    "start": "507150",
    "end": "513030"
  },
  {
    "text": "talk about that in a minute sequel is another one so sequel introduced a whole new paradigm of",
    "start": "513030",
    "end": "518640"
  },
  {
    "text": "relational programming and it came along with the first relational database but the concept of actually programming",
    "start": "518640",
    "end": "524840"
  },
  {
    "text": "interactive queries using a standard query language is very radical so you",
    "start": "524840",
    "end": "530640"
  },
  {
    "text": "can actually praying for that CLU another important language with absolutely",
    "start": "530640",
    "end": "536100"
  },
  {
    "text": "types iterators exceptions again most modern languages our debt to seal you the person who who worked on that with",
    "start": "536100",
    "end": "543389"
  },
  {
    "text": "her team as Barbara Liskov and you've probably heard of the Liskov substitution principle so that's where that comes from another one which a",
    "start": "543389",
    "end": "550290"
  },
  {
    "text": "scheme which is another version of Lisp for the rest of us who didn't like Common Lisp actually communists in this",
    "start": "550290",
    "end": "555720"
  },
  {
    "text": "respect then but you know Microsoft basic so what a concept you can actually",
    "start": "555720",
    "end": "560759"
  },
  {
    "text": "program your 16k microprocessor using basic pretty radical that you have a",
    "start": "560759",
    "end": "566639"
  },
  {
    "text": "personal computer actually sat on your desk quite incredible really and you can program it amazing so small talk which",
    "start": "566639",
    "end": "575160"
  },
  {
    "text": "went through various variants 1972 but 1976 was a big one in 1980 was a really",
    "start": "575160",
    "end": "580769"
  },
  {
    "text": "big one amazingly important language the first",
    "start": "580769",
    "end": "586199"
  },
  {
    "text": "language of the interactive IDE it had a virtual machine in herre garbage collection we'll talk a little bit",
    "start": "586199",
    "end": "593759"
  },
  {
    "text": "definitely many many many galaxies brains to small talk and I recommend anyone learning should learn small talk",
    "start": "593759",
    "end": "599910"
  },
  {
    "text": "even today because again it will change the way you think about programming smarter people like to call this real",
    "start": "599910",
    "end": "606420"
  },
  {
    "text": "real as opposed to the soft simular know that we used to with Java and c-sharp as",
    "start": "606420",
    "end": "612569"
  },
  {
    "text": "on what's also interesting about small talk is the X practitioners are very",
    "start": "612569",
    "end": "618509"
  },
  {
    "text": "very influential if you look at the Gang of Four patterns that has small talk",
    "start": "618509",
    "end": "624149"
  },
  {
    "text": "this is example the XP community the agile people the reflection people these",
    "start": "624149",
    "end": "630569"
  },
  {
    "text": "are all people who came from small talk so a small talk was very very",
    "start": "630569",
    "end": "635579"
  },
  {
    "text": "influential in the way of thinking about programming modular - I like to call",
    "start": "635579",
    "end": "642120"
  },
  {
    "text": "this the golang of the 1970s it was meant to be small and very fast and it",
    "start": "642120",
    "end": "648060"
  },
  {
    "text": "had concurrency built in and all the kinds of things that people say about dough today you could probably say that",
    "start": "648060",
    "end": "654209"
  },
  {
    "text": "about which of the two so they're a very nice language and finally what language",
    "start": "654209",
    "end": "660180"
  },
  {
    "text": "X a mysterious language they're not going to do what it is it scrapes into the decades it came out in November 79",
    "start": "660180",
    "end": "667910"
  },
  {
    "text": "and it's the grandparent of the most popular programming language ever so",
    "start": "667910",
    "end": "673760"
  },
  {
    "text": "that's a clue and I think it deserves the galaxy brain because it changed the",
    "start": "673760",
    "end": "678980"
  },
  {
    "text": "way people think about programming as well so if we look at the important programming paradigms we've got the",
    "start": "678980",
    "end": "685100"
  },
  {
    "text": "imperative procedural which came from our Algol we've got object-oriented which came from similar and small talk",
    "start": "685100",
    "end": "690830"
  },
  {
    "text": "we have functional programming it's comes from our ml we have symbolic programming from the various lisps we",
    "start": "690830",
    "end": "697490"
  },
  {
    "text": "have logic program from small talk we have the Katniss program from fourth these concepts all originated in the",
    "start": "697490",
    "end": "704660"
  },
  {
    "text": "1970s 40 years ago every single major programming paradigm that we're familiar",
    "start": "704660",
    "end": "710000"
  },
  {
    "text": "with is 40 years old at least so there you go it's kind of shocking",
    "start": "710000",
    "end": "715910"
  },
  {
    "text": "really and of course when I say the 1970s a lot of these things they did take a while to",
    "start": "715910",
    "end": "721670"
  },
  {
    "text": "settle down I mean ml is dated to 1972 but it didn't really send us stabilize until the early 80s small talk didn't",
    "start": "721670",
    "end": "728690"
  },
  {
    "text": "really stabilize into the early 80s you know the Lisp and so on in the early 80s so it's not quite true to say they were",
    "start": "728690",
    "end": "734870"
  },
  {
    "text": "you know they were stable by the end of the nineties services but they were definitely stable by the mid-1980s so",
    "start": "734870",
    "end": "741500"
  },
  {
    "text": "let's make you know 1989 there's a lot of date right so here's the question are",
    "start": "741500",
    "end": "747200"
  },
  {
    "text": "you caught up with a state that art from 30 years ago you know how familiar with you all these",
    "start": "747200",
    "end": "754160"
  },
  {
    "text": "paradigms and I would say most developers have really not much you know we're not even caught up with the state",
    "start": "754160",
    "end": "760370"
  },
  {
    "text": "of the art thirty years ago most people that I'm familiar with which is kind of sad now I'm gonna switch topics now",
    "start": "760370",
    "end": "768770"
  },
  {
    "text": "let's talk about DOI so if you're a dealer I do why person and you like to",
    "start": "768770",
    "end": "775220"
  },
  {
    "text": "do stuff around the house you probably have a tool kit and probably for hammering nails you have a hammer but",
    "start": "775220",
    "end": "781790"
  },
  {
    "text": "when you want to screw this in you use a hammer right and when you want to cut wood I use a hammer and when you want to",
    "start": "781790",
    "end": "789860"
  },
  {
    "text": "tighten bolts or something of course you would use a hammer for that now of course this is not true you wouldn't",
    "start": "789860",
    "end": "796220"
  },
  {
    "text": "you'd have different tools for different situations no person but there hammers for everything so let's look at",
    "start": "796220",
    "end": "803310"
  },
  {
    "text": "your programming toolkit for domain modeling use a hammer for business we'll",
    "start": "803310",
    "end": "808529"
  },
  {
    "text": "use a hammer for querying data use a hammer for live coding use a hammer and fortunately most of us use the same",
    "start": "808529",
    "end": "816860"
  },
  {
    "text": "programming language for many many different things and I think a lot of",
    "start": "816860",
    "end": "822600"
  },
  {
    "text": "that is because we're not even aware of other programming languages that didn't have a different way of doing things it",
    "start": "822600",
    "end": "828029"
  },
  {
    "text": "might be that another programming another programming language is much much better for doing certain things but",
    "start": "828029",
    "end": "834570"
  },
  {
    "text": "you don't even know it exists so that's part of the point of this talk is to improve or at least get you aware of",
    "start": "834570",
    "end": "841440"
  },
  {
    "text": "some other paradigms and you know maybe change you know add some extra tools to",
    "start": "841440",
    "end": "847769"
  },
  {
    "text": "your toolkit so if you think about the property of a popular programming",
    "start": "847769",
    "end": "852810"
  },
  {
    "text": "languages right now we have Java and JavaScript and then I know that all these things right they're all the same",
    "start": "852810",
    "end": "859589"
  },
  {
    "text": "language you might think that Python and Ruby and Visual Basic are different no",
    "start": "859589",
    "end": "865079"
  },
  {
    "text": "they're different dialects but the fundamental concepts that they are based on which is imperative stuff with loops",
    "start": "865079",
    "end": "873269"
  },
  {
    "text": "and mutable variables and stuff they're all exactly the same so we really do",
    "start": "873269",
    "end": "879329"
  },
  {
    "text": "ourselves a disservice when you say we know quite a few languages and we actually don't we really only know one language with different dialects so",
    "start": "879329",
    "end": "886470"
  },
  {
    "text": "learning a new language from this pile you don't get a galaxy brain if you learn c-sharp and you already know Java",
    "start": "886470",
    "end": "893010"
  },
  {
    "text": "I'm sorry they're basically the same language I mean if I was saying oh I",
    "start": "893010",
    "end": "898320"
  },
  {
    "text": "speak three languages I'm a polyglot you know I speak British English and I speak American English and I speak Australian",
    "start": "898320",
    "end": "903690"
  },
  {
    "text": "English it's like oh no I don't know three languages I know these dialects but I don't really know three languages",
    "start": "903690",
    "end": "909329"
  },
  {
    "text": "I can't speak you know Chinese or a Native American language or an African language those are really different",
    "start": "909329",
    "end": "914640"
  },
  {
    "text": "languages you know and those are the kinds of things we should be learning as",
    "start": "914640",
    "end": "919740"
  },
  {
    "text": "developers so you know it's a big world out there there are lots and lots of different languages are there lots of different",
    "start": "919740",
    "end": "925920"
  },
  {
    "text": "paradigms out there and we really should get away from the boring CNC sharpen job",
    "start": "925920",
    "end": "931500"
  },
  {
    "text": "with the world and explore go out and try and some different things so let's",
    "start": "931500",
    "end": "937230"
  },
  {
    "text": "go exploring let's start with sequel so sequel was pronounced sequel originally",
    "start": "937230",
    "end": "944010"
  },
  {
    "text": "not SQL and it was designed as part of a relational database the world's first",
    "start": "944010",
    "end": "950190"
  },
  {
    "text": "relational database now before sequel it was really terrible every database had",
    "start": "950190",
    "end": "957180"
  },
  {
    "text": "his own proprietary API so if you wanted to use a different database you had to learn a whole new different API I mean",
    "start": "957180",
    "end": "964140"
  },
  {
    "text": "can you imagine if you had to learn different API for every single database it used in luckily nowadays when we",
    "start": "964140",
    "end": "970620"
  },
  {
    "text": "learn and Redis and Cassandra stuff we don't have that problem isn't that nice so yes sequel is a great step forward",
    "start": "970620",
    "end": "978090"
  },
  {
    "text": "and I think it's very underappreciated so there's a couple of things we can learn from sequel as a programming",
    "start": "978090",
    "end": "983940"
  },
  {
    "text": "language we think of sequel as a lot of stuff it is a programming language first and the first thing is that the model of",
    "start": "983940",
    "end": "989790"
  },
  {
    "text": "the program language is consistent it's a very consistent model everything is relations so a relation is just a set of",
    "start": "989790",
    "end": "997080"
  },
  {
    "text": "tuples you've got rows and columns so for example if you say select the name from",
    "start": "997080",
    "end": "1002750"
  },
  {
    "text": "a table that gives you a kind of sub table or a subset of the data if you do",
    "start": "1002750",
    "end": "1007820"
  },
  {
    "text": "a filter sideways where you you know you filter where the age is this that gives you another subset of data and the thing",
    "start": "1007820",
    "end": "1014240"
  },
  {
    "text": "about these rows and columns is that no matter what it is it's always a table it's always a set of relations which",
    "start": "1014240",
    "end": "1021200"
  },
  {
    "text": "means that you can you know take a thing and filter it this way and then you can",
    "start": "1021200",
    "end": "1026209"
  },
  {
    "text": "filter it this way and they you can join them together and you know you always get the table back and because it's consistent you can make predictions nice",
    "start": "1026209",
    "end": "1034760"
  },
  {
    "text": "thing about consistency is I can say well if it does this I bet it does this too because it's consistent so if I say",
    "start": "1034760",
    "end": "1040069"
  },
  {
    "text": "well if it's set based thing I bet there's a way of doing Cartesian products and you say yes of course there",
    "start": "1040069",
    "end": "1045380"
  },
  {
    "text": "is its join so you do a join here's a Cartesian product and if you want to do",
    "start": "1045380",
    "end": "1050390"
  },
  {
    "text": "an inner join its a Cartesian put it with a filter so that's the first thing",
    "start": "1050390",
    "end": "1056150"
  },
  {
    "text": "the second thing is the sequel is an expression based language and when a",
    "start": "1056150",
    "end": "1061400"
  },
  {
    "text": "harp on about expression based languages all through this so what I mean by that is everything",
    "start": "1061400",
    "end": "1066560"
  },
  {
    "text": "every thing in sequel spits out another thing so if you take a query the output",
    "start": "1066560",
    "end": "1073790"
  },
  {
    "text": "of that query is you know a table but you can use that table inside another query and you can take this query and",
    "start": "1073790",
    "end": "1080630"
  },
  {
    "text": "use that inside another query so you can embed sub queries into the bigger queries",
    "start": "1080630",
    "end": "1086000"
  },
  {
    "text": "which means you can do this composition thing that was going on the balance morning you can compose bigger and",
    "start": "1086000",
    "end": "1091490"
  },
  {
    "text": "bigger queries from a bunch of small queries very powerful technique so expressions are composable that's one of",
    "start": "1091490",
    "end": "1098420"
  },
  {
    "text": "the great things about the expression based languages just like there go you could build big things and small things",
    "start": "1098420",
    "end": "1104020"
  },
  {
    "text": "so that's great and I have a whole talk about that but there's another reason why expressions",
    "start": "1104020",
    "end": "1109160"
  },
  {
    "text": "are great too which has got nothing to do with composability and that's to do with avoiding errors in your code and",
    "start": "1109160",
    "end": "1118040"
  },
  {
    "text": "making your code a little modular and making real code easier to understand so if I switch to a kind of a C like",
    "start": "1118040",
    "end": "1124460"
  },
  {
    "text": "language like this very simple thing I you know I have a result if the boolean is true then I set the results and I",
    "start": "1124460",
    "end": "1131390"
  },
  {
    "text": "create the result so how many things can go wrong with this very simple code well",
    "start": "1131390",
    "end": "1138680"
  },
  {
    "text": "it turns out there's a lot of things this result variable has to be initialized before being used",
    "start": "1138680",
    "end": "1143800"
  },
  {
    "text": "so what initial values should be set to well we assume the compiler is going to",
    "start": "1143800",
    "end": "1150650"
  },
  {
    "text": "set it something well we have no control over that what happens if I forget to assign the",
    "start": "1150650",
    "end": "1156710"
  },
  {
    "text": "result variable inside the if statement do we get a compiler warning no the",
    "start": "1156710",
    "end": "1161930"
  },
  {
    "text": "compiler will say oh you've got this result things fine no problem because I don't have an else so if it's true I do",
    "start": "1161930",
    "end": "1168050"
  },
  {
    "text": "this but what happens if it isn't true well I don't care the compiler is not going to give you a warning shouldn't it give you a warning see you",
    "start": "1168050",
    "end": "1174740"
  },
  {
    "text": "for what it you forgot to handle this case and then the final thing is that the the side-effects if you think about",
    "start": "1174740",
    "end": "1181010"
  },
  {
    "text": "assigning the value of result that's basically there's a kind of not exactly a global variable there's a variable",
    "start": "1181010",
    "end": "1186620"
  },
  {
    "text": "outside of the scope which are depending on so it's kind of a side effect which means we can't take this little",
    "start": "1186620",
    "end": "1191810"
  },
  {
    "text": "statement and extract it out into its own method ozone function because it depends",
    "start": "1191810",
    "end": "1196880"
  },
  {
    "text": "on the result thing which is outside of the scope now if you have an expression based version which you can also do is",
    "start": "1196880",
    "end": "1203840"
  },
  {
    "text": "see if you say if it's a boolean you see there 42 and if it's false is there now",
    "start": "1203840",
    "end": "1210860"
  },
  {
    "text": "what's interesting is the expression based thing solves all the problems you can't the result thing is assigned at",
    "start": "1210860",
    "end": "1216049"
  },
  {
    "text": "the end of the expression not at the beginning so you can't ever you know how to say what's the default value is to",
    "start": "1216049",
    "end": "1222049"
  },
  {
    "text": "sign exactly always at when it's used you can't you know you can't forget to",
    "start": "1222049",
    "end": "1227360"
  },
  {
    "text": "sign it there's always an elf case you know they can't forget about the else case and so on and because it's no side",
    "start": "1227360",
    "end": "1232549"
  },
  {
    "text": "effects you can pull that little obviously it's a little trivial expression but you can pull this into a standalone sub expression very easily",
    "start": "1232549",
    "end": "1239750"
  },
  {
    "text": "you can literally refractor it by pulling out and just pasting it in so expressions are great for reducing bugs",
    "start": "1239750",
    "end": "1246260"
  },
  {
    "text": "and for making the factoring easier so expression based languages are definitely the way in the future in the",
    "start": "1246260",
    "end": "1253669"
  },
  {
    "text": "1970s that was the way of the future all right what about sequel another thing we",
    "start": "1253669",
    "end": "1260150"
  },
  {
    "text": "can learn from sequel is it's the Terra t'v which means you say what you want to have happen you don't say how to make it",
    "start": "1260150",
    "end": "1265909"
  },
  {
    "text": "happen so here is some C code that's I'm",
    "start": "1265909",
    "end": "1271549"
  },
  {
    "text": "saying exactly what to do I'm saying you need to do this this and this and this it's all very explicit it's not at all",
    "start": "1271549",
    "end": "1276980"
  },
  {
    "text": "obvious what this code does because it's buried in all the things about opening",
    "start": "1276980",
    "end": "1282049"
  },
  {
    "text": "files and reading from the streams like there's some logic in there somewhere but it's not I have to spend some time",
    "start": "1282049",
    "end": "1287210"
  },
  {
    "text": "trying to figure it out now if you look at the what version the declarative things they select every one where the",
    "start": "1287210",
    "end": "1294080"
  },
  {
    "text": "age is greater than 50 and I'm saying what I want to have happen I'm not saying how to do it I'm not saying that",
    "start": "1294080",
    "end": "1299090"
  },
  {
    "text": "you have to open the file and you have to read these things and you have to make that the sequel engine will do that",
    "start": "1299090",
    "end": "1304640"
  },
  {
    "text": "for you it'll take care of it you can focus on what's important opening how to",
    "start": "1304640",
    "end": "1310400"
  },
  {
    "text": "open a file and how to relate through it that is not important that's not important for this particular piece of you know trying to understand what the",
    "start": "1310400",
    "end": "1316850"
  },
  {
    "text": "goal is and because the query is",
    "start": "1316850",
    "end": "1322700"
  },
  {
    "text": "independent of the actual implementation it means you can you can optimize the performance in",
    "start": "1322700",
    "end": "1328130"
  },
  {
    "text": "apparently of the code so for example if I go to the sea ship code and I want to it's just too slow and I need to like",
    "start": "1328130",
    "end": "1334880"
  },
  {
    "text": "put an index on the file this code is going to change it's really going to change a lot if I have to have indexes",
    "start": "1334880",
    "end": "1340580"
  },
  {
    "text": "and stuff but this code doesn't change at all I just add an index to the table but my actual business logic doesn't",
    "start": "1340580",
    "end": "1347480"
  },
  {
    "text": "change so you get decoupling you get a separation of concerns and talking of",
    "start": "1347480",
    "end": "1352940"
  },
  {
    "text": "separation of concerns here's another thing a sequel is a query language that's why it's called query language",
    "start": "1352940",
    "end": "1361730"
  },
  {
    "text": "it's a data pretty nowadays we'd call it the data query language and there's a separate language for doing updates and",
    "start": "1361730",
    "end": "1366920"
  },
  {
    "text": "inserts and there's a separate language for doing two defining tables and stuff now nowadays all these emerge together",
    "start": "1366920",
    "end": "1374600"
  },
  {
    "text": "into something we call sequel but they were separate I mean they still are technically separate languages the query",
    "start": "1374600",
    "end": "1380210"
  },
  {
    "text": "language does not depend on the data manipulation language there's no these languages they're separate things they",
    "start": "1380210",
    "end": "1385700"
  },
  {
    "text": "don't they're not they're not tightly coupled with each other so what can we",
    "start": "1385700",
    "end": "1391490"
  },
  {
    "text": "learn about sequel like learn about design from sequel learn to be predictable expression based is great",
    "start": "1391490",
    "end": "1398230"
  },
  {
    "text": "declarative interface it's great and separation of current concerns and also it's interactive you can play with it",
    "start": "1398230",
    "end": "1405170"
  },
  {
    "text": "you know you can type in a query and see what happens and if you don't like it you can change the query and run again you don't have to wait you know half now",
    "start": "1405170",
    "end": "1411980"
  },
  {
    "text": "while the code compiles I mean it sounds obvious but you know if you were trying to do this in CEO end of this in Fortran",
    "start": "1411980",
    "end": "1418820"
  },
  {
    "text": "or something you're tested like you know compile the code and it would it would take at least a couple of minutes I mean maybe it takes 30 seconds but it's not",
    "start": "1418820",
    "end": "1425120"
  },
  {
    "text": "going to be you know literally interactive the same way so what's interesting is even though sequel is",
    "start": "1425120",
    "end": "1432590"
  },
  {
    "text": "over 40 years old and it had this expression based most modern languages are not an expression based sad right",
    "start": "1432590",
    "end": "1442970"
  },
  {
    "text": "Prolog next up so Prolog it was the first mainstream logic programming",
    "start": "1442970",
    "end": "1448400"
  },
  {
    "text": "language is French and it sounds for programmation or logic or something",
    "start": "1448400",
    "end": "1453530"
  },
  {
    "text": "apologize my French accent okay the Americans are all into the Lisp and the",
    "start": "1453530",
    "end": "1458590"
  },
  {
    "text": "things were into Prolog for doing AI and it was very being in Japan big in Japan it was so Prolog just like",
    "start": "1458590",
    "end": "1466900"
  },
  {
    "text": "sequel was also very consistent everything is either a fact or a rule so",
    "start": "1466900",
    "end": "1472390"
  },
  {
    "text": "facts are kind of like rows in a sequel table so here's a bunch of facts there's",
    "start": "1472390",
    "end": "1479230"
  },
  {
    "text": "this 92 Charles a 69 Charles is the parent of wills and Charles's or the",
    "start": "1479230",
    "end": "1484240"
  },
  {
    "text": "parent of Harry and so on and so forth so there's a bunch of facts this is just that what the same kind of stuff you have in sequel but in addition to that",
    "start": "1484240",
    "end": "1489789"
  },
  {
    "text": "you have rules so rule is a little thing that says you know so-and-so is a grand",
    "start": "1489789",
    "end": "1495309"
  },
  {
    "text": "parent of a child if there's a if if the grandparent is the parent of a parent and that is also the parent of a child",
    "start": "1495309",
    "end": "1502000"
  },
  {
    "text": "so there's a you know hopefully hopefully the code is clearer than my explanation or so and so it's older than",
    "start": "1502000",
    "end": "1509289"
  },
  {
    "text": "someone else p1 is older than p2 if p1 has a certain age and p2 has a certain",
    "start": "1509289",
    "end": "1514570"
  },
  {
    "text": "age and age 1 is bigger than H 2 so these rules now in sequel you'd have to",
    "start": "1514570",
    "end": "1520809"
  },
  {
    "text": "do these with you know store procedures or something but in Prolog they actually built into the language and again it's",
    "start": "1520809",
    "end": "1527799"
  },
  {
    "text": "declarative you don't tell Prolog what you want done you say sorry you don't",
    "start": "1527799",
    "end": "1533559"
  },
  {
    "text": "say how you want to don't see what you want them so for example I say you know is Lee as 92 and the answers yes now if",
    "start": "1533559",
    "end": "1542559"
  },
  {
    "text": "I have an unbound variable like who which people are 92 it prints out all",
    "start": "1542559",
    "end": "1547659"
  },
  {
    "text": "the answers and it works the other way I say how old is this so the a variable is",
    "start": "1547659",
    "end": "1552970"
  },
  {
    "text": "unbound Anya says loses 92 and so it's bi-directional I don't have to have two different kinds of facts I don't have to",
    "start": "1552970",
    "end": "1558820"
  },
  {
    "text": "query one way and then query another way it's exactly the same code so that's kind of nice and if I say you know is",
    "start": "1558820",
    "end": "1567640"
  },
  {
    "text": "Liz the grandparent Harry the answers yes is with the wheels older than theirs yes of false rather who are they who is",
    "start": "1567640",
    "end": "1574570"
  },
  {
    "text": "Liz the grandparent of and again it's an unbound variable and if I keep doing it over and over it returns me all the",
    "start": "1574570",
    "end": "1580120"
  },
  {
    "text": "different answers so you can see it's",
    "start": "1580120",
    "end": "1585940"
  },
  {
    "text": "almost like sequel and in fact a lot of people say well Prolog would make a really good equivalent which is a soft alternative to sequel",
    "start": "1585940",
    "end": "1592109"
  },
  {
    "text": "and in fact there is exactly such a thing it's called data log so data log is to Prolog you know what kind of a",
    "start": "1592109",
    "end": "1600119"
  },
  {
    "text": "sequel version of Prolog so let's say I'll give you a little example let's say we have a kind of complex query get me",
    "start": "1600119",
    "end": "1606749"
  },
  {
    "text": "the names and addresses of all the employees that work for at least one project located in Houston but whose department it's not basically Houston so",
    "start": "1606749",
    "end": "1612539"
  },
  {
    "text": "it's a really complicated thing and even in sequel you'd have to you know it be some sort of complex Joran of different",
    "start": "1612539",
    "end": "1617789"
  },
  {
    "text": "tables and one on so in data log this is how you'd write it you'd say we want",
    "start": "1617789",
    "end": "1623789"
  },
  {
    "text": "someone it would a nice thing about data you make little kind of sub queries quite nice so someone who works on the Houston project is somebody who works on",
    "start": "1623789",
    "end": "1631469"
  },
  {
    "text": "a project and that project is based in Houston someone who doesn't live in Houston is an employee for the",
    "start": "1631469",
    "end": "1638729"
  },
  {
    "text": "department and that department is not based in Houston and then we say the",
    "start": "1638729",
    "end": "1643739"
  },
  {
    "text": "answer is we want the first in the middle of the last name and the address of an employee who has a manager and the",
    "start": "1643739",
    "end": "1650999"
  },
  {
    "text": "manager works in Houston but doesn't even do something so you know it's quite a complicated query but you can actually",
    "start": "1650999",
    "end": "1656279"
  },
  {
    "text": "break it down into little pieces and you know this is it's quite a nice quick and",
    "start": "1656279",
    "end": "1662249"
  },
  {
    "text": "a query by example model this bi-directional unification kind of",
    "start": "1662249",
    "end": "1668700"
  },
  {
    "text": "things the prologue has is pretty awesome I mean if I if I there's a thing in",
    "start": "1668700",
    "end": "1673919"
  },
  {
    "text": "Prolog called pens which concatenates to lists so you have an another you have oh",
    "start": "1673919",
    "end": "1681239"
  },
  {
    "text": "sorry it's a yeah I think it doesn't connect to this yeah so if you can",
    "start": "1681239",
    "end": "1686729"
  },
  {
    "text": "catenate 1 + 2 + + 2 + 3 you get the list 1 2 3 so if you say what is the",
    "start": "1686729",
    "end": "1692039"
  },
  {
    "text": "list that you get when you add 1 at 1 & 2 & 3 it gives you the answer there's only one",
    "start": "1692039",
    "end": "1697289"
  },
  {
    "text": "answer but you can put the kind of missing variable anywhere because it works in all directions so if you say",
    "start": "1697289",
    "end": "1703469"
  },
  {
    "text": "what do I have to add to 2 & 3 to make 1 2 3 and it's a we need the add 1 ok and then",
    "start": "1703469",
    "end": "1710369"
  },
  {
    "text": "what happens if you put multiple kind of unbound variables okay well there's multiple answers now we'll X could be",
    "start": "1710369",
    "end": "1716849"
  },
  {
    "text": "empty and Y could be 1 2 3 or X could be one and why it'll be 2 or 3",
    "start": "1716849",
    "end": "1723010"
  },
  {
    "text": "or excellent me one two and why it can be three OS will be one to three in my could be empty so there's four different",
    "start": "1723010",
    "end": "1728080"
  },
  {
    "text": "possible answers and you'll find all four different answers for you because it yes this is a very cool thing I think",
    "start": "1728080",
    "end": "1734910"
  },
  {
    "text": "so let's do a prologue demo and where is",
    "start": "1734910",
    "end": "1741910"
  },
  {
    "text": "it here we go right so here's some demo code and I'll just make it so here's the",
    "start": "1741910",
    "end": "1754240"
  },
  {
    "text": "thing I was talking about if I see",
    "start": "1754240",
    "end": "1759490"
  },
  {
    "text": "here's the parent of Harry it's Diana and Charles you see it'll give me all the different answers and if",
    "start": "1759490",
    "end": "1765370"
  },
  {
    "text": "I say is Liz the parent of Harry I see no it's died another pair of the Harry",
    "start": "1765370",
    "end": "1773850"
  },
  {
    "text": "it's a true so you know that's all it is is pretty simple but it's interactive we",
    "start": "1773850",
    "end": "1780790"
  },
  {
    "text": "can do chemical stuff with it let me show you a more cooler thing which is Sudoku and I'll just make that one so",
    "start": "1780790",
    "end": "1790950"
  },
  {
    "text": "hopefully we all know how to play Sudoku now if you're trying to write a Sudoku solver in c-sharp or Java you'd probably",
    "start": "1790950",
    "end": "1798130"
  },
  {
    "text": "work that spend a lot of time on the algorithm of how to actually solve the problem in Prolog you don't in Prolog you set up",
    "start": "1798130",
    "end": "1805630"
  },
  {
    "text": "the rules you set up the constraints and it figures it out this is the thing have you seen you don't see how to sort you",
    "start": "1805630",
    "end": "1811870"
  },
  {
    "text": "don't see what you want to do to solve the problem just see this is what the problem actually is here the constraints can you find something that matches",
    "start": "1811870",
    "end": "1817690"
  },
  {
    "text": "these constraints so I don't know hopefully you can read theirs okay so we",
    "start": "1817690",
    "end": "1822880"
  },
  {
    "text": "say just Sudoku means there's a there's nine rows and the second one says each",
    "start": "1822880",
    "end": "1829150"
  },
  {
    "text": "row has the same length and that each row has a values in each row must come",
    "start": "1829150",
    "end": "1834820"
  },
  {
    "text": "from the set of numbers from one to nine and all the rows are distinct and if you",
    "start": "1834820",
    "end": "1841780"
  },
  {
    "text": "transpose the rows you get something called columns and all the values in the columns must be distinct as well and if",
    "start": "1841780",
    "end": "1849190"
  },
  {
    "text": "you break the rows up into blocks which is you know the nine different blocks we have we also say that each block must be",
    "start": "1849190",
    "end": "1855640"
  },
  {
    "text": "distinct so that's it that's the entire Prolog program for solving Sudoku now we",
    "start": "1855640",
    "end": "1862640"
  },
  {
    "text": "actually haven't written any kind of code all we've said is these all the constraints for me now says the rules of",
    "start": "1862640",
    "end": "1867980"
  },
  {
    "text": "Sudoku it's not actually the algorithm but then if we go and we say you know",
    "start": "1867980",
    "end": "1873380"
  },
  {
    "text": "here's a here's a problem and what we're",
    "start": "1873380",
    "end": "1878929"
  },
  {
    "text": "saying is all the all the underscores are things we don't know the answer to and we've got a couple of numbers in here we know this is a three we know",
    "start": "1878929",
    "end": "1884450"
  },
  {
    "text": "this is eight and if I go over here and I say please solve this problem and it",
    "start": "1884450",
    "end": "1892940"
  },
  {
    "text": "says oops but not there you go",
    "start": "1892940",
    "end": "1904220"
  },
  {
    "text": "so it's actually managed to fill in all the gaps for that game because they're",
    "start": "1904220",
    "end": "1910790"
  },
  {
    "text": "the constraints uniquely define hazard if they're worse now if I go to another",
    "start": "1910790",
    "end": "1916790"
  },
  {
    "text": "version this one here I've actually cheat I've made it bad when I put two eighths in the same well okay so this is",
    "start": "1916790",
    "end": "1923960"
  },
  {
    "text": "an unsolvable Sudoku so if I go to prologue and I see trees try and solve all the constraints for",
    "start": "1923960",
    "end": "1930650"
  },
  {
    "text": "this one then the problem of two you'll say false it cannot find any things that",
    "start": "1930650",
    "end": "1937220"
  },
  {
    "text": "match it's just pretty cool so obviously Sudoku sort of a a toy",
    "start": "1937220",
    "end": "1943160"
  },
  {
    "text": "problem but there many situations in business where you know you have rules",
    "start": "1943160",
    "end": "1949460"
  },
  {
    "text": "like you find the lowest price of this thing implies you know you have to deliver this thing on this day in this thing on this day what's the best way to",
    "start": "1949460",
    "end": "1954890"
  },
  {
    "text": "have the trucks drive around to do you know constraint solving problems it's a really really common thing in a business",
    "start": "1954890",
    "end": "1960620"
  },
  {
    "text": "and Prolog is really perfect for doing that it's the whole way the Prolog works so what can we learn from Prolog it's",
    "start": "1960620",
    "end": "1968270"
  },
  {
    "text": "consistent it's predictable it's declarative again this unification is awesome it's just a little it seems",
    "start": "1968270",
    "end": "1975650"
  },
  {
    "text": "like magic when you see how it works really very cool ok and it's bi-directional which is cool and it's",
    "start": "1975650",
    "end": "1982070"
  },
  {
    "text": "interactive again I didn't have to compile stuff I could literally run it on my own computer so you know people",
    "start": "1982070",
    "end": "1989480"
  },
  {
    "text": "businesses spend a lot of time working on rules engines and special kind of algorithms to solve these constant problems like no just use prologue",
    "start": "1989480",
    "end": "1995630"
  },
  {
    "text": "prologue that's all what does it for you and you can probably know the most the prologue have an API you can call it",
    "start": "1995630",
    "end": "2001419"
  },
  {
    "text": "from Java or whatever it's like you don't need you shouldn't basically reinvent the wheel if you have this kind of phone users at all that does it",
    "start": "2001419",
    "end": "2009370"
  },
  {
    "text": "natively alright next is ml so ml stands",
    "start": "2009370",
    "end": "2016600"
  },
  {
    "text": "for metal language not to be confused with machine learning and it was designed as that a theory improving",
    "start": "2016600",
    "end": "2023650"
  },
  {
    "text": "system so as an academic and a language is an impure function language it's the parent language full standard ml and",
    "start": "2023650",
    "end": "2030429"
  },
  {
    "text": "O'Carroll and they're sharp a whole generation of languages are very ml influenced there's another branch kind",
    "start": "2030429",
    "end": "2037000"
  },
  {
    "text": "of haskell branch which is pure function languages they came from a language",
    "start": "2037000",
    "end": "2042040"
  },
  {
    "text": "called moran during the early 80s so i'm not going to talk about functional programming you've probably heard enough",
    "start": "2042040",
    "end": "2047380"
  },
  {
    "text": "about functional programming but I am going to talk about things we can learn from the ml family of languages which",
    "start": "2047380",
    "end": "2052510"
  },
  {
    "text": "are still useful today which has got without talking about functional programming so the first thing that ml",
    "start": "2052510",
    "end": "2057520"
  },
  {
    "text": "languages have is type inference and this is the same kind of algorithm that",
    "start": "2057520",
    "end": "2063040"
  },
  {
    "text": "Prolog has when it does unification and let me show you what I mean here is a function and by the way I'm going to be",
    "start": "2063040",
    "end": "2069368"
  },
  {
    "text": "using f-sharp because the ml from 1972 is kind of hard to get hold of and it's",
    "start": "2069369",
    "end": "2075550"
  },
  {
    "text": "really not that particular thing is the the ML influence languages that I'm going to be talking about an f-sharp as one of those so this is how you define a",
    "start": "2075550",
    "end": "2082480"
  },
  {
    "text": "function there shot it's got two parameters F and X and we say Y is f of",
    "start": "2082480",
    "end": "2087580"
  },
  {
    "text": "X plus 1 and then hello plus y now we haven't said anything about what F and X",
    "start": "2087580",
    "end": "2093700"
  },
  {
    "text": "actually are so can the compiler figure out what's going on can it figure what these types are and the answer is yes it",
    "start": "2093700",
    "end": "2101050"
  },
  {
    "text": "can because what it does is it says well you're adding 1 to something so X must",
    "start": "2101050",
    "end": "2107260"
  },
  {
    "text": "be an int right if we've because you've met anyone to it so X must be an int similarly if you're adding Y to hello y",
    "start": "2107260",
    "end": "2114160"
  },
  {
    "text": "must be a string so Y is a string and X is an int now F is a function because",
    "start": "2114160",
    "end": "2121630"
  },
  {
    "text": "you know passing in a parameter and the input of this function is an integer and the output of this function is a string so f",
    "start": "2121630",
    "end": "2128049"
  },
  {
    "text": "it must be an integer and into string function so there we go we've solved we've sold this particular piece of type",
    "start": "2128049",
    "end": "2135519"
  },
  {
    "text": "inference here area into string X as an int and the overall return value which is hello' plus y must also be a string",
    "start": "2135519",
    "end": "2141150"
  },
  {
    "text": "so this is the kind of thing you've got the nice thing about this is you get codes that looks like a scripting",
    "start": "2141150",
    "end": "2147039"
  },
  {
    "text": "language it looks like Python or something but it's actually stereotypes and if you make a mistake the compiler",
    "start": "2147039",
    "end": "2152109"
  },
  {
    "text": "will tell you so to me this is the best of both worlds I think type inference is awesome right that's thing one here's a",
    "start": "2152109",
    "end": "2160569"
  },
  {
    "text": "more complex example this is c-sharp code this is a method in the link",
    "start": "2160569",
    "end": "2166420"
  },
  {
    "text": "library group by which the return value is an ienumerable of an i grouping of a",
    "start": "2166420",
    "end": "2172630"
  },
  {
    "text": "tiki energy source and it takes a T it takes an ienumerable as input and takes the func of a t source and T key but you",
    "start": "2172630",
    "end": "2179349"
  },
  {
    "text": "know I challenge you to try and figure out what it is you know how what are all these things what are all these types",
    "start": "2179349",
    "end": "2185349"
  },
  {
    "text": "for you know could put this way if I told you this could you figure out what the type signature was yourself if I",
    "start": "2185349",
    "end": "2191049"
  },
  {
    "text": "hadn't told you probably not now the F sharp code the equivalent F",
    "start": "2191049",
    "end": "2196269"
  },
  {
    "text": "shop code looks like this there are no type no types in the signature so nice",
    "start": "2196269",
    "end": "2204130"
  },
  {
    "text": "thing about - fizzes yeah it's less typing you don't have to type the type you know I don't have to type everything over and over so it's less time but the",
    "start": "2204130",
    "end": "2210489"
  },
  {
    "text": "other things is this noise when I look at the F sharp code I can focus on the logic the fact that there's all these",
    "start": "2210489",
    "end": "2217420"
  },
  {
    "text": "types the C shop code has so much stuff floating around it's kind of it's a lot of noise in my brain that stops me",
    "start": "2217420",
    "end": "2223299"
  },
  {
    "text": "actually trying to look at what then what's really trying to go on here so I think that's a really important thing no noise less noise is good and this is a",
    "start": "2223299",
    "end": "2230920"
  },
  {
    "text": "quick quote I found on Hacker News you know type systems and Prolog have a lot",
    "start": "2230920",
    "end": "2237309"
  },
  {
    "text": "in common and people who write their own type systems are basically implementing a lot so they go use Prolog if you're",
    "start": "2237309",
    "end": "2242410"
  },
  {
    "text": "implementing a type system all right number two different defaults ml languages have in ml languages things",
    "start": "2242410",
    "end": "2249940"
  },
  {
    "text": "are immutable by default if you want mutability you have to ask for it the things are non null by defaults if you",
    "start": "2249940",
    "end": "2255549"
  },
  {
    "text": "want ability you have to ask for it yeah you get structurally quality better faucet two things have the same data to stretch",
    "start": "2255549",
    "end": "2262390"
  },
  {
    "text": "them the same data there the safety of their equal you don't have to override equals and get hashcode and all the",
    "start": "2262390",
    "end": "2269230"
  },
  {
    "text": "stuff you get that for free now if you want reference equality you can get it but you have to ask for it it's not the default and everything has to be",
    "start": "2269230",
    "end": "2276520"
  },
  {
    "text": "initialized right you don't have you can't have classes where some of the",
    "start": "2276520",
    "end": "2281710"
  },
  {
    "text": "data is there and some is not so those are really interesting defaults just some a kind of sanity point of view I",
    "start": "2281710",
    "end": "2287380"
  },
  {
    "text": "mean they may not be that big in the scheme of things but in order to reduce bugs I think it's actually really really",
    "start": "2287380",
    "end": "2292870"
  },
  {
    "text": "useful these are very very sensible to false okay algebraic type system it's one of",
    "start": "2292870",
    "end": "2298330"
  },
  {
    "text": "my favorite topics and I like to call it a composable type system rather than algebraic type system and that's only",
    "start": "2298330",
    "end": "2304390"
  },
  {
    "text": "possible because the types in a functional programming language don't have behavior in our language behavior",
    "start": "2304390",
    "end": "2310090"
  },
  {
    "text": "and time so mixed up in function language they aren't so by the way this",
    "start": "2310090",
    "end": "2316870"
  },
  {
    "text": "is technically the original ml technically didn't have this but standard ml has it and most ml languages",
    "start": "2316870",
    "end": "2322360"
  },
  {
    "text": "have this now so I'm going to call this an ml feature so in a composable type",
    "start": "2322360",
    "end": "2327700"
  },
  {
    "text": "system you build bigger types and smaller types in two different ways you've either and them together or you",
    "start": "2327700",
    "end": "2333190"
  },
  {
    "text": "or them together so when you add things together like fruit salad is an apple",
    "start": "2333190",
    "end": "2338860"
  },
  {
    "text": "and a banana and a cherry so this is something you're familiar with this is what we call a record type or a struct",
    "start": "2338860",
    "end": "2344680"
  },
  {
    "text": "or a tuple or something very very common nothing surprising there but when you",
    "start": "2344680",
    "end": "2350860"
  },
  {
    "text": "all things together this is something which is kind of unique to algebraic type systems you can choose you can say",
    "start": "2350860",
    "end": "2357550"
  },
  {
    "text": "it's an apple or it's a banana or it's a cherry this is a choice type I like to",
    "start": "2357550",
    "end": "2362800"
  },
  {
    "text": "call these a choice type and you write this with a vertical bar in a shot so these are really really useful types",
    "start": "2362800",
    "end": "2368460"
  },
  {
    "text": "because it's useful concepts because you can you can build really big complex types from these building blocks so",
    "start": "2368460",
    "end": "2375910"
  },
  {
    "text": "here's here's an example of how you might do this for a payment system let's say you accept cash",
    "start": "2375910",
    "end": "2381980"
  },
  {
    "text": "check your card as your payments and for cash we don't need any extra information for checks we need a check number for",
    "start": "2381980",
    "end": "2389480"
  },
  {
    "text": "credit cards we need a card type or something so if how would you implement this so in",
    "start": "2389480",
    "end": "2394880"
  },
  {
    "text": "a narrow language you might start off with some base interface and you might never met various subclasses with the",
    "start": "2394880",
    "end": "2400580"
  },
  {
    "text": "algebraic tightest thing you build it up from small pieces with composition so you start off with some small pieces",
    "start": "2400580",
    "end": "2406550"
  },
  {
    "text": "like this which are primitive types and then you might say well the car types of choice between aviso in the master cars",
    "start": "2406550",
    "end": "2413330"
  },
  {
    "text": "and then credit card information you and it's a credit time it's a car type and it's a card number so that's a record",
    "start": "2413330",
    "end": "2420470"
  },
  {
    "text": "type so a choice and the records and then we build on top of those and we say",
    "start": "2420470",
    "end": "2425510"
  },
  {
    "text": "a payment method is a choice between cash and check and if it's a check",
    "start": "2425510",
    "end": "2430910"
  },
  {
    "text": "you've got a check number and the other choice is a credit card and if it's a credit card you it's and credit card information so there's a choice type and",
    "start": "2430910",
    "end": "2437510"
  },
  {
    "text": "then you can keep going keep building and building building you can say well payment amounts that's a primitive currencies a choice between euros and",
    "start": "2437510",
    "end": "2444830"
  },
  {
    "text": "dollars and keep going and going say payment is all these things it's a",
    "start": "2444830",
    "end": "2450170"
  },
  {
    "text": "amount and it's a currency and it has a method of sale so you can you know like",
    "start": "2450170",
    "end": "2456859"
  },
  {
    "text": "a one page of code you can actually build up really quite a complex domain model so I think this is great and",
    "start": "2456859",
    "end": "2462740"
  },
  {
    "text": "what's cool about this is this is executable documentation one of the goals of the agile movement so if I show",
    "start": "2462740",
    "end": "2471410"
  },
  {
    "text": "you all these types I think you can guess what's going on here even if you",
    "start": "2471410",
    "end": "2477350"
  },
  {
    "text": "don't even know we're short I mean this is very you know pretty self-documenting code it's pretty clear what's going on",
    "start": "2477350",
    "end": "2483500"
  },
  {
    "text": "even if you're non program I either pulley figure out most of this stuff so these are the nouns and you can also",
    "start": "2483500",
    "end": "2490310"
  },
  {
    "text": "have verbs by making functions have types as well so this says to pick up a",
    "start": "2490310",
    "end": "2496310"
  },
  {
    "text": "card you have a hand you have your own hand you have a card on the table that's the that's the input then the output is",
    "start": "2496310",
    "end": "2502520"
  },
  {
    "text": "a new hand so you can you can do very expressive stuff all the entire domain",
    "start": "2502520",
    "end": "2507650"
  },
  {
    "text": "fits on one screen and and again if you go if you show this to someone who's not an expert and you say",
    "start": "2507650",
    "end": "2515250"
  },
  {
    "text": "can you guess what payment methods are accepted I think people could you know",
    "start": "2515250",
    "end": "2520380"
  },
  {
    "text": "you don't have to look in four different files and look in the subclasses and find out which subclasses have been implemented there literally is some four",
    "start": "2520380",
    "end": "2527460"
  },
  {
    "text": "lines of code right in front of your face so this is a great idea I think it's a massive topic I have a whole talk",
    "start": "2527460",
    "end": "2534750"
  },
  {
    "text": "about de D I have a book about it so if you're interested in learning you can watch my talk right I'm not going to do",
    "start": "2534750",
    "end": "2542340"
  },
  {
    "text": "a demo of ML because you've seen enough they're sharp and stuff this conference so I don't think it needs to you what what can we learn from ml hey it's an",
    "start": "2542340",
    "end": "2549900"
  },
  {
    "text": "expression based language what a coincidence so we've seen three expression based languages already type inference is",
    "start": "2549900",
    "end": "2557490"
  },
  {
    "text": "awesome what it does is especially allows you to work very quickly you can add and remove parameters very quickly",
    "start": "2557490",
    "end": "2564150"
  },
  {
    "text": "that kind of figure what's going on and it makes bad things harder to do by having these things like things being",
    "start": "2564150",
    "end": "2570840"
  },
  {
    "text": "immutable by default it just prevents you from doing stupid stuff you know I think having the defaults are really",
    "start": "2570840",
    "end": "2576570"
  },
  {
    "text": "important if you have the defaults that make it easy for you to do stupid stuff you know you're gonna do stupid stuff",
    "start": "2576570",
    "end": "2581580"
  },
  {
    "text": "because you're lazy or you forget or whatever if you can't do stupid stuff by accidents you know then you're just less",
    "start": "2581580",
    "end": "2589080"
  },
  {
    "text": "like to have mistakes so I think having proper defaults important if you if you guys ever design an API or something",
    "start": "2589080",
    "end": "2595710"
  },
  {
    "text": "make sure your defaults are good ml was the first language is risin though that had parametric polymorphism the we call",
    "start": "2595710",
    "end": "2602460"
  },
  {
    "text": "generics and it of course it had a lot of great types which are awesome right so the type inference stuff by the way",
    "start": "2602460",
    "end": "2609300"
  },
  {
    "text": "you know the Java Java has just got var so they've just got a feature that was around 40 years ago and they're still kind of worried about",
    "start": "2609300",
    "end": "2616290"
  },
  {
    "text": "it and certain languages don't even have generics so quite certain brand new",
    "start": "2616290",
    "end": "2621660"
  },
  {
    "text": "languages that do not have generics mentioning no names and once you get used to algebraic types they are so",
    "start": "2621660",
    "end": "2628320"
  },
  {
    "text": "amazing for domain modeling you can't live in a language that doesn't happen so it's really hard to express hope that",
    "start": "2628320",
    "end": "2635190"
  },
  {
    "text": "they are all right now turn time for small talk so which went through various",
    "start": "2635190",
    "end": "2641490"
  },
  {
    "text": "variants 1980 was the major one but I don't even include the 1976 one because",
    "start": "2641490",
    "end": "2646619"
  },
  {
    "text": "I want to include it in the seventies so I heart small talk very much it was my first love as a",
    "start": "2646619",
    "end": "2653400"
  },
  {
    "text": "programming language I spent a big chunk of my life working on small talk and I still know that very much and I highly recommend that you",
    "start": "2653400",
    "end": "2659550"
  },
  {
    "text": "love it too when small talk came around a lot of people thought this is a great",
    "start": "2659550",
    "end": "2666960"
  },
  {
    "text": "way to interact with a computer this is a teletype and you know it's a teletype",
    "start": "2666960",
    "end": "2673910"
  },
  {
    "text": "luckily no one thinks the teletypes are the best way to interact with computers now do they know do you think that TTY",
    "start": "2673910",
    "end": "2681210"
  },
  {
    "text": "interface is really for some reason a lot of people think that TT wires are still the best way we don't call we",
    "start": "2681210",
    "end": "2687660"
  },
  {
    "text": "don't have a physical thing like this we have a console but even so we're typing stuff in right and it's 40 years later",
    "start": "2687660",
    "end": "2694320"
  },
  {
    "text": "and we're still typing stuff in so small talk was the idea that you use computer",
    "start": "2694320",
    "end": "2700260"
  },
  {
    "text": "should be interactive and they shouldn't be ugly no text it should be a whole",
    "start": "2700260",
    "end": "2705330"
  },
  {
    "text": "interactive experience it was developed at Xerox and Zurich SPARC did amazing",
    "start": "2705330",
    "end": "2711390"
  },
  {
    "text": "things they did the first PC the first GUI the first laser printers and they're all sorts of stuff was still up there",
    "start": "2711390",
    "end": "2717410"
  },
  {
    "text": "just incredible small talk introduced a lot of features that we take for granted",
    "start": "2717410",
    "end": "2722430"
  },
  {
    "text": "now message-based Aero model-view-controller a windowing IDE a virtual machine generational",
    "start": "2722430",
    "end": "2729840"
  },
  {
    "text": "garbage collector cetera cetera magazine many many galaxy brains this is the",
    "start": "2729840",
    "end": "2735930"
  },
  {
    "text": "small talk user interface from 30 years ago on the Mac hasn't really changed",
    "start": "2735930",
    "end": "2742500"
  },
  {
    "text": "that much you can see it's really interactive obviously the bitmap was pretty low res",
    "start": "2742500",
    "end": "2748710"
  },
  {
    "text": "but we still use this kind of interactive IDE today so first thing to",
    "start": "2748710",
    "end": "2756210"
  },
  {
    "text": "learn about small talk is it's got a consistent model which that everything is an object and when it says everything",
    "start": "2756210",
    "end": "2762750"
  },
  {
    "text": "object it really means everything is an object everything everything is an object can't stress this highly enough",
    "start": "2762750",
    "end": "2769580"
  },
  {
    "text": "the compiler is an object the stacks frames the objects the Depot here is an",
    "start": "2769580",
    "end": "2775020"
  },
  {
    "text": "object the windows objects integers objects bits of everything things love doing the other thing about",
    "start": "2775020",
    "end": "2781840"
  },
  {
    "text": "s'more - which is very interesting it has a very minimal syntax it has three keywords and it has only three ways of",
    "start": "2781840",
    "end": "2790180"
  },
  {
    "text": "doing I mean they say it fits on those postcards that's how small it is and",
    "start": "2790180",
    "end": "2796120"
  },
  {
    "text": "what's interesting about that is if we have a minimal syntax you're forced to put power into the language when you",
    "start": "2796120",
    "end": "2801520"
  },
  {
    "text": "want to do new stuff you want to make the language powerful enough that you can do new stuff in the language without",
    "start": "2801520",
    "end": "2806770"
  },
  {
    "text": "having to change the compiler and this is also part the list philosophy - if",
    "start": "2806770",
    "end": "2812410"
  },
  {
    "text": "you want to do something a list but you want to implement objects in this you implode it right in the Lisp system you don't need to change the letter language",
    "start": "2812410",
    "end": "2817930"
  },
  {
    "text": "I mean interesting example of this happened just recently with the F sharp was a c-sharp they both introduced a",
    "start": "2817930",
    "end": "2824710"
  },
  {
    "text": "sync in F sharp they didn't have to change the compiler because acing is the library in c-sharp they had to change",
    "start": "2824710",
    "end": "2832240"
  },
  {
    "text": "the compiler because a sync is a compiler keyword so and they also did it",
    "start": "2832240",
    "end": "2838060"
  },
  {
    "text": "for performance reasons no I mean I understand but there's there's a difference in the in the expects",
    "start": "2838060",
    "end": "2843160"
  },
  {
    "text": "passivity of you know the language all the philosophy behind the language of how do you add new features do you change the compiler do you rent new",
    "start": "2843160",
    "end": "2849430"
  },
  {
    "text": "keywords or do you make the language so powerful that it can basically do anything without ever changing it",
    "start": "2849430",
    "end": "2856320"
  },
  {
    "text": "snorter also has late binding so late binding means that nothing really happens until the very last second so if",
    "start": "2856320",
    "end": "2862570"
  },
  {
    "text": "I send a message to an object to do something I can enter in I can intercept that message at any point and play with",
    "start": "2862570",
    "end": "2869080"
  },
  {
    "text": "it and tweak it and do stuff and we'll see an example of that so you're going to be a dynamic language be really",
    "start": "2869080",
    "end": "2874330"
  },
  {
    "text": "really dynamic I mean literally so dynamic that you can change anything at one time and finally it's more that",
    "start": "2874330",
    "end": "2879880"
  },
  {
    "text": "doesn't have text files who needs text files everything in small talk is in memory or the entire class is",
    "start": "2879880",
    "end": "2885910"
  },
  {
    "text": "all the engines all the compiler everything's in memory all the time and that means everything's accessible and",
    "start": "2885910",
    "end": "2891460"
  },
  {
    "text": "you have a lot of power and it means you don't have to worry about where your text files are stored you might think",
    "start": "2891460",
    "end": "2897700"
  },
  {
    "text": "well that's a lot of that takes up a lot of memory well when I was using small talk in the 90s it used about two megabytes two megabytes of memory is",
    "start": "2897700",
    "end": "2904120"
  },
  {
    "text": "pretty shocking I think at Google I wish it's a google chrome tab nowadays",
    "start": "2904120",
    "end": "2909760"
  },
  {
    "text": "like 50 gigabytes or something yeah and I'm just saying we're worried your son take up too much room you know compared",
    "start": "2909760",
    "end": "2915670"
  },
  {
    "text": "with other stuff we do is its trivial now let's do the wonderful small talk tomorrow",
    "start": "2915670",
    "end": "2922770"
  },
  {
    "text": "so I can get this oops here we go so",
    "start": "2922770",
    "end": "2932890"
  },
  {
    "text": "here's number 42 and there's different messages you can do with 42 you can do",
    "start": "2932890",
    "end": "2939130"
  },
  {
    "text": "what you call the binary message and you can do a unary message which doesn't",
    "start": "2939130",
    "end": "2944380"
  },
  {
    "text": "have any parameters and you can do a",
    "start": "2944380",
    "end": "2950460"
  },
  {
    "text": "keyword message where you have to pass in the parameters so every time you see a colon like this and small talk about",
    "start": "2951270",
    "end": "2957490"
  },
  {
    "text": "some thing with a parameter now what's interesting is when you run this code it",
    "start": "2957490",
    "end": "2963819"
  },
  {
    "text": "puts the answer right in the thing if the idea it's meant to be interactive so I could then immediately start working",
    "start": "2963819",
    "end": "2969310"
  },
  {
    "text": "with it what how many was the length",
    "start": "2969310",
    "end": "2976900"
  },
  {
    "text": "will have length anyway you can start playing with all the different things",
    "start": "2976900",
    "end": "2981960"
  },
  {
    "text": "you know on the come-on line right",
    "start": "2981960",
    "end": "2986849"
  },
  {
    "text": "obviously you have to be very careful when you put in very large numbers because if you do something like this",
    "start": "2987839",
    "end": "2993450"
  },
  {
    "text": "what happens is nothing happens get the very eyes and I'll be back small talk is",
    "start": "2993450",
    "end": "2999220"
  },
  {
    "text": "designed not to break it's designed to hide the implementation from you as a as",
    "start": "2999220",
    "end": "3007170"
  },
  {
    "text": "a user why do I care about overflow do I care about 32-bit into us as if 64-bit",
    "start": "3007170",
    "end": "3013319"
  },
  {
    "text": "no why do I care about that so why force me to care I should be able to do you",
    "start": "3013319",
    "end": "3018660"
  },
  {
    "text": "know very large numbers 100 factorial should be fine all right try doing that you know and it",
    "start": "3018660",
    "end": "3027720"
  },
  {
    "text": "takes it you know it goes all the way down to something like what is one half plus one third what's the answer",
    "start": "3027720",
    "end": "3036479"
  },
  {
    "text": "five six obviously so things like fractions large numbers all this stuff",
    "start": "3036479",
    "end": "3042609"
  },
  {
    "text": "is built-in because you shouldn't have to think you shouldn't have to say I wonder why it's doing that one of his",
    "start": "3042609",
    "end": "3048130"
  },
  {
    "text": "overload it's like no that's never going to happen it hides all that stuff for me the whole point is it's meant to the mint your",
    "start": "3048130",
    "end": "3053349"
  },
  {
    "text": "mental model is meant to be more important than the computer model okay",
    "start": "3053349",
    "end": "3059019"
  },
  {
    "text": "now let's look at the slate binding thing if I say 42 hello whoops it says",
    "start": "3059019",
    "end": "3069630"
  },
  {
    "text": "small integer does not understand hello now what am I supposed to do here how am",
    "start": "3069630",
    "end": "3075729"
  },
  {
    "text": "I supposed to stop and fix the boat no I'm actually going to go right into the debugger and I'm gonna go to the error",
    "start": "3075729",
    "end": "3081519"
  },
  {
    "text": "message and I'm going to implement the method right here and I'm gonna say",
    "start": "3081519",
    "end": "3090059"
  },
  {
    "text": "hello farm in DC so I'm in the debugger",
    "start": "3090059",
    "end": "3097959"
  },
  {
    "text": "I've changed some codes now if I keep going there you go it works",
    "start": "3097959",
    "end": "3103599"
  },
  {
    "text": "so I basically intercepted a message well wrote some code and carried on",
    "start": "3103599",
    "end": "3108880"
  },
  {
    "text": "programming and this is actually really common in small till you actually write a lot of code in the debugger you basically write the code it's comes like",
    "start": "3108880",
    "end": "3116559"
  },
  {
    "text": "kind of TDD you write some code none of it works but in the debugger you write all the methods until it does work and",
    "start": "3116559",
    "end": "3122920"
  },
  {
    "text": "by the way which file I just wrote a new method which file did I put the method",
    "start": "3122920",
    "end": "3128799"
  },
  {
    "text": "in did I have to sit you know I didn't have to think about where went all right",
    "start": "3128799",
    "end": "3134079"
  },
  {
    "text": "one of the nice things about not being at x-ray system is that it's just the whole load of your mind you know if I",
    "start": "3134079",
    "end": "3140499"
  },
  {
    "text": "was going to do this in c-sharp yeah I could probably fix things in the dryer but I have to decide where am I going to put the method which files are going to",
    "start": "3140499",
    "end": "3147249"
  },
  {
    "text": "live in there's a lot of stuff I have a thing it interferes with the programming this is just overhead is accounting I",
    "start": "3147249",
    "end": "3153009"
  },
  {
    "text": "don't want to think about that when I program I just want to be able to type stuff and have it work so small talk is perfect for that now I said that",
    "start": "3153009",
    "end": "3160690"
  },
  {
    "text": "everything is an object so 42 of course is an object and because it's an object",
    "start": "3160690",
    "end": "3166569"
  },
  {
    "text": "it has a class which is small integer now small integer it's",
    "start": "3166569",
    "end": "3171950"
  },
  {
    "text": "also an object so I can say what class are you small integer and this is I'm",
    "start": "3171950",
    "end": "3178819"
  },
  {
    "text": "small integer class thank you very much now there's no in smaller there's no such thing as instance methods in the",
    "start": "3178819",
    "end": "3184279"
  },
  {
    "text": "class method I mean you know static methods and instance methods everything",
    "start": "3184279",
    "end": "3190339"
  },
  {
    "text": "is an instance method for somebody so the class methods are actually there's a",
    "start": "3190339",
    "end": "3195470"
  },
  {
    "text": "there's a you know there's a pair of classes that kind of main class accessor methods but the the class methods or the",
    "start": "3195470",
    "end": "3201349"
  },
  {
    "text": "state methods actually instant methods on another class and the class measures that thing are actually instance methods",
    "start": "3201349",
    "end": "3207109"
  },
  {
    "text": "of another class so even go all the way up the class hierarchy small integer",
    "start": "3207109",
    "end": "3213920"
  },
  {
    "text": "classes of type metaclasses what class are you metaclass met a class class what class",
    "start": "3213920",
    "end": "3220700"
  },
  {
    "text": "is met a class class class now actually at this point you get a loop it goes back to being ready fast but the point",
    "start": "3220700",
    "end": "3226819"
  },
  {
    "text": "is that everything is an object and I can do stuff I say you know open up a",
    "start": "3226819",
    "end": "3234260"
  },
  {
    "text": "browser on 42 when it takes me straight to the place in the hutton in the class hierarchy 42 is a small integer which is",
    "start": "3234260",
    "end": "3241910"
  },
  {
    "text": "a subclass of integer which is a subclass of number and so on and so far all the way up and I can see all the",
    "start": "3241910",
    "end": "3249020"
  },
  {
    "text": "different methods that are available to me for integers just an interactive IDE",
    "start": "3249020",
    "end": "3255500"
  },
  {
    "text": "just like you're used to this has been like I said this has been around for over but you know at least 40 years and",
    "start": "3255500",
    "end": "3264700"
  },
  {
    "text": "it's still probably one of the best ideas out there let's talk about",
    "start": "3264700",
    "end": "3271309"
  },
  {
    "text": "creating classes so if I was a whole person you think I'd be no you know most",
    "start": "3271309",
    "end": "3277250"
  },
  {
    "text": "other languages they have a special new keyword so if I want to create a new animal I reduce them like this Smalltalk",
    "start": "3277250",
    "end": "3285529"
  },
  {
    "text": "doesn't have a new keyword doesn't have any keywords hardly the way you create a new animal is you sent a message so you",
    "start": "3285529",
    "end": "3292609"
  },
  {
    "text": "go to the animal class and you say I want to create a new animal",
    "start": "3292609",
    "end": "3297980"
  },
  {
    "text": "and I'm going to call it say a cat and there it is it's a cat and if I browse",
    "start": "3297980",
    "end": "3306589"
  },
  {
    "text": "it there is this you can see it's in the animal class and so on so everything is a message you've created by sending",
    "start": "3306589",
    "end": "3312140"
  },
  {
    "text": "messages you know you put instances by sending messages you do everything by sending messages like I say everything's",
    "start": "3312140",
    "end": "3317960"
  },
  {
    "text": "object now if I want to create a new class that was creating a new instance",
    "start": "3317960",
    "end": "3323869"
  },
  {
    "text": "how do I create a new class well the answer is I sent something a message so this is a message it's actually a",
    "start": "3323869",
    "end": "3331339"
  },
  {
    "text": "message with five parameters so if I want to create an animal to class I do",
    "start": "3331339",
    "end": "3337160"
  },
  {
    "text": "it by sending a message to something I send a message to the object class and I say I want a sub class called animal too",
    "start": "3337160",
    "end": "3342490"
  },
  {
    "text": "and I don't need this and it's going to have maybe a name and an age inside",
    "start": "3342490",
    "end": "3348099"
  },
  {
    "text": "there is and their mutually shows up in their class browser so everything is",
    "start": "3348099",
    "end": "3355310"
  },
  {
    "text": "sending messages right oh yeah",
    "start": "3355310",
    "end": "3361940"
  },
  {
    "text": "and of course which file did I put this new class in okay not just it's just",
    "start": "3361940",
    "end": "3370460"
  },
  {
    "text": "stuff that gets in the way now I talked about not having keywords I mean not you",
    "start": "3370460",
    "end": "3379849"
  },
  {
    "text": "know not having a very simple syntax so something like if true if false in",
    "start": "3379849",
    "end": "3386180"
  },
  {
    "text": "Smalltalk there's no if statement how do I do if in small talk I use messages so",
    "start": "3386180",
    "end": "3395930"
  },
  {
    "text": "I say one if I say one equals one if",
    "start": "3395930",
    "end": "3401569"
  },
  {
    "text": "true what am I going to do I want to say",
    "start": "3401569",
    "end": "3406640"
  },
  {
    "text": "yes and if it's false I'm gonna say no",
    "start": "3406640",
    "end": "3412660"
  },
  {
    "text": "and that's yes and if it's like if it really isn't true for some reason when the same driver so this if true if false",
    "start": "3413220",
    "end": "3421650"
  },
  {
    "text": "is a message that I'm sending to a boolean alright there's like less a so",
    "start": "3421650",
    "end": "3426930"
  },
  {
    "text": "there's no special syntax for if true or false is no special syntax for looping there's no special syntax for switch",
    "start": "3426930",
    "end": "3434400"
  },
  {
    "text": "statements or for I don't know think of all the syntax you have in your favorite language how many keywords there are in",
    "start": "3434400",
    "end": "3441180"
  },
  {
    "text": "C or C sharp as me though none of those keywords exist in in small talk let's",
    "start": "3441180",
    "end": "3447750"
  },
  {
    "text": "look at the implementation since it's a method we can look at it and we can also change it if we want to if you want to be stupid enough to change if true that",
    "start": "3447750",
    "end": "3453450"
  },
  {
    "text": "would not be very sensible there's three different implementations of if true or false one is at the billion which is the",
    "start": "3453450",
    "end": "3459720"
  },
  {
    "text": "parent and there's two subclasses one called true one called force these are very small subclasses because they have slightly different behavior",
    "start": "3459720",
    "end": "3465500"
  },
  {
    "text": "now the boolean definition of the method says not my problem",
    "start": "3465500",
    "end": "3471599"
  },
  {
    "text": "it says subclass responsibility right which is so if I try and call it I'm going to get an error message now if I",
    "start": "3471599",
    "end": "3477930"
  },
  {
    "text": "look at the definition for the true subclass it's going to say true it's going to take the true block which is",
    "start": "3477930",
    "end": "3483839"
  },
  {
    "text": "you think of it's like a lambda you send to take this block and it will just run",
    "start": "3483839",
    "end": "3489480"
  },
  {
    "text": "this block now the false implementation is exactly the opposite whoops the false",
    "start": "3489480",
    "end": "3494880"
  },
  {
    "text": "implementation takes the false block and runs it so if you know anything about",
    "start": "3494880",
    "end": "3500579"
  },
  {
    "text": "lambda calculus this is how language is true and their forces implemented in the calculus so it's quite influential and",
    "start": "3500579",
    "end": "3507210"
  },
  {
    "text": "Smalltalk anyway that's enough about small talk because we're running out of time so I just wanted to you know show",
    "start": "3507210",
    "end": "3513119"
  },
  {
    "text": "you that small talk is really cool what can we learn it's got a consistent model",
    "start": "3513119",
    "end": "3518180"
  },
  {
    "text": "minimize the syntax we'll make the language more powerful be awesome and",
    "start": "3518180",
    "end": "3523200"
  },
  {
    "text": "make people fall in love with you and that's not a joke a lot of the first",
    "start": "3523200",
    "end": "3528270"
  },
  {
    "text": "stuff in the 80s you know the Apple Mac they really wanted people to love it it wasn't just a piece of hardware the",
    "start": "3528270",
    "end": "3534329"
  },
  {
    "text": "smaller people who designed small talk really wanted you to fall in love with it they put a lot of effort into you",
    "start": "3534329",
    "end": "3539339"
  },
  {
    "text": "know the icons and the language and they interact the interactivity of it so if you're designing a program you",
    "start": "3539339",
    "end": "3545740"
  },
  {
    "text": "know I think about making people fall in love with you it's a really good thing it will really make your program much better okay so I'm just gonna be about",
    "start": "3545740",
    "end": "3552430"
  },
  {
    "text": "five minutes over I hope that's okay just finish up with my mysterious language X so a lot of people say well",
    "start": "3552430",
    "end": "3560710"
  },
  {
    "text": "you know it's small talk self-contained it doesn't use a file system it's interactive it's got a you know surely",
    "start": "3560710",
    "end": "3566620"
  },
  {
    "text": "it's a dead end people don't do that kind of stuff anymore so languages look let's look at language",
    "start": "3566620",
    "end": "3571780"
  },
  {
    "text": "X in the 1980s people pay thousands of dollars just to use this language that's",
    "start": "3571780",
    "end": "3577930"
  },
  {
    "text": "how important it was it's descendants have been at the heart of software products which dominate their field and",
    "start": "3577930",
    "end": "3585180"
  },
  {
    "text": "its grandchild is probably the most popular program language in the world who knows what I'm talking about I bet",
    "start": "3585180",
    "end": "3594190"
  },
  {
    "text": "some people do so yeah the answer is VisiCalc so VisiCalc came out in 1979",
    "start": "3594190",
    "end": "3602260"
  },
  {
    "text": "and immediately became incredibly important and of course VisiCalc began",
    "start": "3602260",
    "end": "3607270"
  },
  {
    "text": "Lotus 1-2-3 which is the most important language of the 80s and that began Excel",
    "start": "3607270",
    "end": "3613270"
  },
  {
    "text": "which is still one of the most important programming environments now what's interesting about Excel and visicalc and",
    "start": "3613270",
    "end": "3618970"
  },
  {
    "text": "so on it's a programming environment right it's something where you type in",
    "start": "3618970",
    "end": "3623980"
  },
  {
    "text": "equations and you know you get the results interactively if you couldn't type in formulas in Excel it wouldn't be",
    "start": "3623980",
    "end": "3630760"
  },
  {
    "text": "popular so anyone who uses Excel is programming and that's why it's the most",
    "start": "3630760",
    "end": "3636040"
  },
  {
    "text": "popular program in there it's actually a functional programming language so why",
    "start": "3636040",
    "end": "3642280"
  },
  {
    "text": "was physic help so important and so successful well it's got a consistent model everything is a cell and a formula",
    "start": "3642280",
    "end": "3648640"
  },
  {
    "text": "that acts on the cell okay it's super super interactive the whole point if you had to compile your formulas in Excel",
    "start": "3648640",
    "end": "3654940"
  },
  {
    "text": "and wait 30 minutes before you could see the answer it would be a complete flop the fact that's super interactive you",
    "start": "3654940",
    "end": "3660400"
  },
  {
    "text": "type something and it shows up over here that's one of the reasons why it's so great so it's an it's an interactive format",
    "start": "3660400",
    "end": "3666520"
  },
  {
    "text": "and a program it's hard to say is it a program or it wouldn't exist without the interactive",
    "start": "3666520",
    "end": "3671650"
  },
  {
    "text": "but the interactive environment will be useless without the programming language they fit together kind of you know that this one integrated system is you can't",
    "start": "3671650",
    "end": "3679510"
  },
  {
    "text": "separate them out now just like sequel it's the domain-specific language it's an expression based language it's a",
    "start": "3679510",
    "end": "3685630"
  },
  {
    "text": "language that non-programmers can use by a a 1 + B 1/2 that's the kind of thing",
    "start": "3685630",
    "end": "3691330"
  },
  {
    "text": "you could within that formula and its functions it uses functions everywhere so when you do some in Excel you're",
    "start": "3691330",
    "end": "3698200"
  },
  {
    "text": "doing functional programming and like pro like Prolog you program that sort by filling in slots you fill in all the",
    "start": "3698200",
    "end": "3704380"
  },
  {
    "text": "cells and it figures out what's going on and of course like small talk there's no separate text files when you save a",
    "start": "3704380",
    "end": "3711010"
  },
  {
    "text": "formula in Excel you don't say I want to save this formula in this file no you save it in the entire environment you",
    "start": "3711010",
    "end": "3717010"
  },
  {
    "text": "saved the entire Excel environment don't save a particular formula to a particular file so what can we learn",
    "start": "3717010",
    "end": "3723370"
  },
  {
    "text": "from this account well programming it you know peers and many guises we think of programming is",
    "start": "3723370",
    "end": "3729970"
  },
  {
    "text": "running things through C compiler whatever you know typing in vim it's like there's a lot more to programming",
    "start": "3729970",
    "end": "3735160"
  },
  {
    "text": "that it's making a computer do what you want so program is not just for programmers I mean it's a shame that it",
    "start": "3735160",
    "end": "3741220"
  },
  {
    "text": "should just be for professional programs it really people love to interact with the environment want to explore stuff",
    "start": "3741220",
    "end": "3746920"
  },
  {
    "text": "and programming for the particular domain is actually a lot easier in general than general-purpose programming",
    "start": "3746920",
    "end": "3752080"
  },
  {
    "text": "if you had if you had if Excel used to like the C language instead of the Excel macros whatever again it would be a",
    "start": "3752080",
    "end": "3758890"
  },
  {
    "text": "complete flop yeah so we always think of we you tend to be think about that",
    "start": "3758890",
    "end": "3764110"
  },
  {
    "text": "everyone's just like us and we're all into like hardcore programming you know there's a lot of Excel programs over",
    "start": "3764110",
    "end": "3769450"
  },
  {
    "text": "there there's a lot of people who program in other you know other systems",
    "start": "3769450",
    "end": "3774550"
  },
  {
    "text": "people just do a lot of flash programming people do CSS CSS is a program language all sorts of stuff you",
    "start": "3774550",
    "end": "3781000"
  },
  {
    "text": "know and use the right to of the job don't use Fortran in an Excel program",
    "start": "3781000",
    "end": "3786490"
  },
  {
    "text": "it's not the right tool for programming a spreadsheet you know for trainers great for some things but it's not play for other things Prolog is great for",
    "start": "3786490",
    "end": "3793510"
  },
  {
    "text": "something but it's not great for this you use the right tool for the job okay don't always use a hammer so there",
    "start": "3793510",
    "end": "3800470"
  },
  {
    "text": "are lots of different approaches out there get yourself a bigger toolbox and Cecil",
    "start": "3800470",
    "end": "3806710"
  },
  {
    "text": "since Isis not the only sin to all these languages I've been talking about none of them had a C so C style syntax even",
    "start": "3806710",
    "end": "3812710"
  },
  {
    "text": "small talk didn't have dots there's no dotting into something in small talk right it uses spaces and when",
    "start": "3812710",
    "end": "3819400"
  },
  {
    "text": "you end a sentence use a period or full stop you don't use a semicolon it's not",
    "start": "3819400",
    "end": "3825790"
  },
  {
    "text": "proper English to end sentences with semicolons okay so you notice that prologue and small talk use full stops",
    "start": "3825790",
    "end": "3833410"
  },
  {
    "text": "to end their statements or the expressions no curly braces anyway you haven't seen a single curly brace today",
    "start": "3833410",
    "end": "3839849"
  },
  {
    "text": "no dots okay so a language that doesn't affect the way you think about program is not worth knowing",
    "start": "3839849",
    "end": "3844930"
  },
  {
    "text": "so please please go and expand your galaxy brain there are loads of new languages go and change the way you",
    "start": "3844930",
    "end": "3851290"
  },
  {
    "text": "think about stuff and it'd be great for you so off you go thanks very much this slides video will",
    "start": "3851290",
    "end": "3857500"
  },
  {
    "text": "be on my websites and if you like my book you can read all about it there so thank you very much",
    "start": "3857500",
    "end": "3863970"
  },
  {
    "text": "[Applause]",
    "start": "3866190",
    "end": "3869359"
  }
]