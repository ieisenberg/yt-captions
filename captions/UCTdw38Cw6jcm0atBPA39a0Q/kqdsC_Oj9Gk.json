[
  {
    "start": "0",
    "end": "259000"
  },
  {
    "text": "all right good afternoon thanks for coming out to learn a little bit about typescript I think this will be a fun",
    "start": "9660",
    "end": "17950"
  },
  {
    "text": "topic it's something I certainly have found fascinating as I have had a chance to use it and explore it and preparing",
    "start": "17950",
    "end": "25810"
  },
  {
    "text": "to teach it so hopefully you'll learn something here a little bit or learn a",
    "start": "25810",
    "end": "33220"
  },
  {
    "text": "few additional techniques that you can use in your typescript to communicate your intent more clearly one of the",
    "start": "33220",
    "end": "41890"
  },
  {
    "text": "interesting things about all programming languages is that they are all just",
    "start": "41890",
    "end": "47219"
  },
  {
    "text": "communication tools typically the communication is between the developer",
    "start": "47219",
    "end": "53230"
  },
  {
    "text": "and the compiler but there's also a very important part of the communication that",
    "start": "53230",
    "end": "59620"
  },
  {
    "text": "is between one developer and the rest of the developers or between part of the",
    "start": "59620",
    "end": "66610"
  },
  {
    "text": "team and other part of the team or the ever-popular myself as I'm writing the code today and",
    "start": "66610",
    "end": "73110"
  },
  {
    "text": "myself as I'm trying to maintain this code six months from now",
    "start": "73110",
    "end": "78540"
  },
  {
    "text": "because future-self is pretty angry at my current self on a pretty regular basis my wife and I have been here all",
    "start": "78540",
    "end": "88960"
  },
  {
    "text": "week we are from Indiana and it's been a lot of fun getting to spend some time in",
    "start": "88960",
    "end": "94630"
  },
  {
    "text": "Australia one of the things that we've enjoyed are those subtle language differences between the American English",
    "start": "94630",
    "end": "102430"
  },
  {
    "text": "dialect in the Australian English dialect one of them that caught my eye the other day and we actually got a",
    "start": "102430",
    "end": "109930"
  },
  {
    "text": "picture of it is these signs on the escalators that say way up and that's",
    "start": "109930",
    "end": "118900"
  },
  {
    "text": "interesting to us because in the United States if you would have a similar marking it would probably simply say up",
    "start": "118900",
    "end": "127319"
  },
  {
    "text": "you know I don't know where that why that's funny or different to me the same",
    "start": "127319",
    "end": "133269"
  },
  {
    "text": "thing with way out or way down those are not ever things you would see on signs",
    "start": "133269",
    "end": "139470"
  },
  {
    "text": "in the United States but honestly this is more descriptive",
    "start": "139470",
    "end": "145709"
  },
  {
    "text": "and more accurate if we were in the States you would probably just say which",
    "start": "145709",
    "end": "150810"
  },
  {
    "text": "is true but that doesn't really tell you too much about it the fact that we can here just say way up actually tells you",
    "start": "150810",
    "end": "158400"
  },
  {
    "text": "little bit more and that's very similar to the relationship between JavaScript",
    "start": "158400",
    "end": "164610"
  },
  {
    "text": "and typescript both languages have the same capabilities is just that",
    "start": "164610",
    "end": "171629"
  },
  {
    "text": "typescript can be more descriptive of what's going on and the fact that typescript actually compiles down to",
    "start": "171629",
    "end": "177989"
  },
  {
    "text": "JavaScript should be a pretty good indication that there's not a lot of additional functionality you get it's",
    "start": "177989",
    "end": "184079"
  },
  {
    "text": "just it's really about how much information are you communicating in your code so just to level set before we",
    "start": "184079",
    "end": "192540"
  },
  {
    "text": "get into the presentation this is not going to be an intro to typescript talk",
    "start": "192540",
    "end": "198060"
  },
  {
    "text": "I'm going to assume that you guys have some experience with typescript because I want to move on to some of the things",
    "start": "198060",
    "end": "204150"
  },
  {
    "text": "that I find a little more entertaining and so I'm not going to go into some of",
    "start": "204150",
    "end": "209609"
  },
  {
    "text": "the fundamentals of typescript like how you add types to variables or parameters or how you create classes how you type",
    "start": "209609",
    "end": "217290"
  },
  {
    "text": "definition files or configuring the build and all those things so if you",
    "start": "217290",
    "end": "222930"
  },
  {
    "text": "want more information on that I'm sure you can find it but you won't find it in here this hour so I'm curious this show",
    "start": "222930",
    "end": "229829"
  },
  {
    "text": "of hands how many of you are currently using typescript for some of your work okay that's",
    "start": "229829",
    "end": "236910"
  },
  {
    "text": "fantastic so I think it's safe to say that you guys don't need this information I'm not",
    "start": "236910",
    "end": "243299"
  },
  {
    "text": "going to try and cover it you will obviously see some examples of this a lot of these things are the things that",
    "start": "243299",
    "end": "249720"
  },
  {
    "text": "make typescript so incredibly powerful and so incredibly useful on larger projects but different topic for a",
    "start": "249720",
    "end": "256889"
  },
  {
    "text": "different day so one of the key features of typescript is the type system and",
    "start": "256889",
    "end": "264240"
  },
  {
    "start": "259000",
    "end": "383000"
  },
  {
    "text": "they're tricky they'd hit it right in the first four characters of the language name and so we're gonna do a",
    "start": "264240",
    "end": "271530"
  },
  {
    "text": "real quick review on datatypes which I know is kind of like a intro to computer science type of topic",
    "start": "271530",
    "end": "277530"
  },
  {
    "text": "but we're gonna buzz through it real quick just so that we have that all the same terminology so just as a refresher",
    "start": "277530",
    "end": "284970"
  },
  {
    "text": "a data type defines the collection of data values in a predefined set of",
    "start": "284970",
    "end": "291960"
  },
  {
    "text": "operations on those values so we're talking about some kind of object and",
    "start": "291960",
    "end": "299099"
  },
  {
    "text": "what it can know and what I can do if we were going to draw this up on a",
    "start": "299099",
    "end": "304530"
  },
  {
    "text": "whiteboard if we're just gonna diagram out what it would be we would usually some use some kind of pseudo UML that",
    "start": "304530",
    "end": "311069"
  },
  {
    "text": "looks kind of like this where we'd have some kind of type name we would have the",
    "start": "311069",
    "end": "316740"
  },
  {
    "text": "data and the operations or as we sometimes will say the type and its",
    "start": "316740",
    "end": "322620"
  },
  {
    "text": "state and its behavior and we have a type then the sub or the members of the",
    "start": "322620",
    "end": "330330"
  },
  {
    "text": "type can also have types on them so we can have a type and then the members also have you know you know get of type",
    "start": "330330",
    "end": "336780"
  },
  {
    "text": "A and type B there could be numbers and strings and whatever else so to have a",
    "start": "336780",
    "end": "344880"
  },
  {
    "text": "slightly more concrete example of a data type we could have a type that represents a person and it might have",
    "start": "344880",
    "end": "351659"
  },
  {
    "text": "state to represent the first name and the last name those would probably represent it as strings and there might",
    "start": "351659",
    "end": "359250"
  },
  {
    "text": "be some kind of behavior here to get the greeting for that person that is a function that also returns a string so",
    "start": "359250",
    "end": "366050"
  },
  {
    "text": "that being said I mean this is kind of like the classic definition of data",
    "start": "366050",
    "end": "372330"
  },
  {
    "text": "types that's fairly universal across all programming languages and so now we'll",
    "start": "372330",
    "end": "378659"
  },
  {
    "text": "dive into a little bit more about specifically what typescript can do one",
    "start": "378659",
    "end": "385289"
  },
  {
    "start": "383000",
    "end": "651000"
  },
  {
    "text": "of the really useful things that typescript adds / JavaScript is the use of generics now if you're familiar with",
    "start": "385289",
    "end": "392759"
  },
  {
    "text": "c-sharp this implementation will probably look fairly familiar to you how",
    "start": "392759",
    "end": "398009"
  },
  {
    "text": "many of you guys have some background as a c-sharp developer okay it's pretty",
    "start": "398009",
    "end": "404490"
  },
  {
    "text": "common for typescript developers and as you probably know type script was developed by Andrews House",
    "start": "404490",
    "end": "410920"
  },
  {
    "text": "Berg who is also the chief architect on c-sharp and so a lot of the decisions he made with C Sharpie repeated with",
    "start": "410920",
    "end": "417370"
  },
  {
    "text": "typescript so it looks very similar again as a quick refresher generics just",
    "start": "417370",
    "end": "425770"
  },
  {
    "text": "mean that we can have a parameter a type parameter that we pass to another type",
    "start": "425770",
    "end": "431550"
  },
  {
    "text": "so now I can have a data type that's going to accept a type parameter so now",
    "start": "431550",
    "end": "439090"
  },
  {
    "text": "I can determine the data type of one of the members or one of the functions at a",
    "start": "439090",
    "end": "444580"
  },
  {
    "text": "later time where we see this most commonly is with collections",
    "start": "444580",
    "end": "451770"
  },
  {
    "text": "so while JavaScript only has an array type typescript can have an array of T",
    "start": "451770",
    "end": "458790"
  },
  {
    "text": "if we were going to have a typescript",
    "start": "458790",
    "end": "464590"
  },
  {
    "text": "implementation of the eight Queens problem we would need a collection of Queens have you guys are familiar with",
    "start": "464590",
    "end": "471670"
  },
  {
    "text": "eight Queens problem okay eight Queens problem and it's at least",
    "start": "471670",
    "end": "479170"
  },
  {
    "text": "where I come from it's a very common programming language kata or you know",
    "start": "479170",
    "end": "485140"
  },
  {
    "text": "something a real simple problem that you solve over and over again but the idea is that on a chess board you could in",
    "start": "485140",
    "end": "491590"
  },
  {
    "text": "theory take eight Queens and place them all on the chess board so that none of",
    "start": "491590",
    "end": "496990"
  },
  {
    "text": "them can attack one another and so if we're going to do that we could have a",
    "start": "496990",
    "end": "503800"
  },
  {
    "text": "collection of Queens or in this case an array of queen and then we could have",
    "start": "503800",
    "end": "510820"
  },
  {
    "text": "logic that loops over each one of those Queens now in JavaScript we could have",
    "start": "510820",
    "end": "517060"
  },
  {
    "text": "this same functionality and we could put eight of these objects into a collection",
    "start": "517060",
    "end": "524620"
  },
  {
    "text": "it just wouldn't be type safe so what",
    "start": "524620",
    "end": "530170"
  },
  {
    "text": "does that mean for us it means that in theory we could have a teammate or a",
    "start": "530170",
    "end": "535390"
  },
  {
    "text": "future version of ourselves that is working on the code and we put something into that collection that is not",
    "start": "535390",
    "end": "543040"
  },
  {
    "text": "the type who were expecting so this is seems like it should be obvious but a",
    "start": "543040",
    "end": "551110"
  },
  {
    "text": "lot of times this can really save us a lot of hassle one of the places where my",
    "start": "551110",
    "end": "556870"
  },
  {
    "text": "team in particular has seen the benefits of generics is actually using some of",
    "start": "556870",
    "end": "562780"
  },
  {
    "text": "the spa frameworks where there's some objects that might be queen or in some",
    "start": "562780",
    "end": "568660"
  },
  {
    "text": "that might be an observable of queen or you knockout has like its own data",
    "start": "568660",
    "end": "575740"
  },
  {
    "text": "binding wrapper around some of the data types and so there can be these subtle programming errors where I think I'm",
    "start": "575740",
    "end": "582610"
  },
  {
    "text": "working with a queen but I actually have an observable queen if I'm using typescript and typescript is going to",
    "start": "582610",
    "end": "589000"
  },
  {
    "text": "force me to put the right type of objects into the collection I have some",
    "start": "589000",
    "end": "596920"
  },
  {
    "text": "additional assurance that I'm not going to pull something out of the array and",
    "start": "596920",
    "end": "602260"
  },
  {
    "text": "get the wrong thing now one of the things that's important to remember about typescript is that all of our good",
    "start": "602260",
    "end": "608320"
  },
  {
    "text": "type safety actually goes away when we compile down to JavaScript so here's",
    "start": "608320",
    "end": "613810"
  },
  {
    "text": "that same code rendered in JavaScript as a part of our build system whatever",
    "start": "613810",
    "end": "621190"
  },
  {
    "text": "we're doing we're gonna transpiler type scripts it becomes JavaScript you can see that same collection exists here on",
    "start": "621190",
    "end": "631450"
  },
  {
    "text": "this array and it's just now it's just an array it's not an array of Queen just",
    "start": "631450",
    "end": "636460"
  },
  {
    "text": "an array and so all that type safety that we get from typescript exists when we're writing the code not",
    "start": "636460",
    "end": "644200"
  },
  {
    "text": "necessarily not necessarily when we're running the code so that's generics",
    "start": "644200",
    "end": "652080"
  },
  {
    "start": "651000",
    "end": "759000"
  },
  {
    "text": "another fairly quick refresher on how inheritance works when we have one data",
    "start": "652830",
    "end": "659920"
  },
  {
    "text": "type we can have another type that inherits from it so I can have a parent",
    "start": "659920",
    "end": "665770"
  },
  {
    "text": "type that defines its behavior in state and I can have a child type that adds or",
    "start": "665770",
    "end": "673450"
  },
  {
    "text": "modifies the behavior and and we would say that these types have",
    "start": "673450",
    "end": "679000"
  },
  {
    "text": "an is a relationship so if the concrete example here is the child type is a",
    "start": "679000",
    "end": "686470"
  },
  {
    "text": "person in the they're the yeah the base type is person in the child type is programmer we could say that a",
    "start": "686470",
    "end": "692529"
  },
  {
    "text": "programmer is a person and in typescript",
    "start": "692529",
    "end": "698980"
  },
  {
    "text": "we can implement this fairly simply when",
    "start": "698980",
    "end": "705339"
  },
  {
    "text": "I define a class I can just say that my child class extends person this is one",
    "start": "705339",
    "end": "712360"
  },
  {
    "text": "of the places where typescript is slightly different than c-sharp where now I'm going to use an extends",
    "start": "712360",
    "end": "719560"
  },
  {
    "text": "keyword instead of the colon that we would use in c-sharp and when we build",
    "start": "719560",
    "end": "728500"
  },
  {
    "text": "out these relationships a lot of times the simple versions of these relationships make a lot of sense but",
    "start": "728500",
    "end": "734920"
  },
  {
    "text": "they can start to get messy especially when you start to have three or four or seventy classes inherited from one",
    "start": "734920",
    "end": "741010"
  },
  {
    "text": "another and it is a relationship start to get muddy and that means that our",
    "start": "741010",
    "end": "746649"
  },
  {
    "text": "types aren't exactly what we want so in general why did that circle stay",
    "start": "746649",
    "end": "754990"
  },
  {
    "text": "there no strain there good what we prefer to",
    "start": "754990",
    "end": "764710"
  },
  {
    "start": "759000",
    "end": "801000"
  },
  {
    "text": "do is have composition over inheritance so we can build our data types up",
    "start": "764710",
    "end": "770140"
  },
  {
    "text": "through multiple classes not necessarily inheriting from one another that tends to work out better in fact you could",
    "start": "770140",
    "end": "776980"
  },
  {
    "text": "argue that the classic design patterns book often known as the Gang of Four",
    "start": "776980",
    "end": "782890"
  },
  {
    "text": "book is just a long explanation of how we can leverage composition over",
    "start": "782890",
    "end": "788950"
  },
  {
    "text": "inheritance and typescript has some",
    "start": "788950",
    "end": "794320"
  },
  {
    "text": "really interesting ways to use composition that a lot of the other languages don't have so the first one",
    "start": "794320",
    "end": "802900"
  },
  {
    "start": "801000",
    "end": "1208000"
  },
  {
    "text": "that I want to talk about is intersection types and this is the first",
    "start": "802900",
    "end": "809800"
  },
  {
    "text": "feature that we're going to talk about today that is much more specific to typescript and not so much a feature of",
    "start": "809800",
    "end": "816400"
  },
  {
    "text": "other languages with intersection types we can basically take two types and add",
    "start": "816400",
    "end": "823510"
  },
  {
    "text": "them together so let's say we're working on a piece of software that manages our",
    "start": "823510",
    "end": "830460"
  },
  {
    "text": "software team and handle some invoicing we could very conceivably have one class",
    "start": "830460",
    "end": "837160"
  },
  {
    "text": "for programmer and another class for billable resource and we could have a",
    "start": "837160",
    "end": "846540"
  },
  {
    "text": "need to have an object that is both a programmer and a billable resource but",
    "start": "846540",
    "end": "853000"
  },
  {
    "text": "we don't necessarily want to say that all programmers are billable resources and we don't necessarily want to say",
    "start": "853000",
    "end": "858760"
  },
  {
    "text": "that all billable resources are programmers because we can think of exceptions to both of those so what I",
    "start": "858760",
    "end": "865390"
  },
  {
    "text": "can do in typescript is I can create a new type that is like these two things mashed together and as long as we're",
    "start": "865390",
    "end": "875320"
  },
  {
    "text": "just dealing with the data that's actually pretty simple to do so in this case I'm going to have an interface that",
    "start": "875320",
    "end": "882550"
  },
  {
    "text": "defines a programmer employee and it's got fields for first name last name in",
    "start": "882550",
    "end": "887920"
  },
  {
    "text": "favorite language and I've got another interface for",
    "start": "887920",
    "end": "893529"
  },
  {
    "text": "or billable resource that just defines its hourly rate but where the real magic",
    "start": "893529",
    "end": "900129"
  },
  {
    "text": "happens is here what I'm going to define",
    "start": "900129",
    "end": "905920"
  },
  {
    "text": "a billable programmer and I'm just going to say that the billable programmer is of type programmer employee and billable",
    "start": "905920",
    "end": "913779"
  },
  {
    "text": "resource and all I had to do is take the two type names and use the ampersand",
    "start": "913779",
    "end": "923819"
  },
  {
    "text": "right there to kind of join them together and on the fly I have created a",
    "start": "923819",
    "end": "931029"
  },
  {
    "text": "new type that it represents both of those together and so you can see that",
    "start": "931029",
    "end": "937779"
  },
  {
    "text": "now in this new object I can assign a first name a last name a favorite",
    "start": "937779",
    "end": "942850"
  },
  {
    "text": "language in an hourly rate and then I can also take my billable programmer",
    "start": "942850",
    "end": "948430"
  },
  {
    "text": "language or billable programmer object and call into its first name and it's",
    "start": "948430",
    "end": "954490"
  },
  {
    "text": "hourly rate so that works out pretty",
    "start": "954490",
    "end": "961300"
  },
  {
    "text": "well now I have an object that represents the the intersection of those two things I can use it however I need",
    "start": "961300",
    "end": "970170"
  },
  {
    "text": "it gets a little more interesting if I have classes where there's some",
    "start": "970170",
    "end": "978339"
  },
  {
    "text": "additional functionality so in in this version of the example I now have a",
    "start": "978339",
    "end": "984850"
  },
  {
    "text": "class programmer and it's got a method get greeting and the billable resource",
    "start": "984850",
    "end": "994269"
  },
  {
    "text": "class has a method get invoice amount and it's not as easy as simply assigning",
    "start": "994269",
    "end": "1002100"
  },
  {
    "text": "those two things together now I actually need a way to combine those methods well",
    "start": "1002100",
    "end": "1009540"
  },
  {
    "text": "what I can do is I can write a custom",
    "start": "1009540",
    "end": "1015120"
  },
  {
    "text": "function to take all of the functions from one object and put them into another this is a technique that is very",
    "start": "1015120",
    "end": "1026850"
  },
  {
    "text": "common in the Ruby community it's called mix-ins this is not something that's",
    "start": "1026850",
    "end": "1033579"
  },
  {
    "text": "nearly as common to see sharp developers but typescript supports mix-ins and so",
    "start": "1033579",
    "end": "1041110"
  },
  {
    "text": "what I've got here is a function that's going to take two types and like we talked about earlier it's got these",
    "start": "1041110",
    "end": "1047110"
  },
  {
    "text": "generic type parameters first and second and it is going to return an object that",
    "start": "1047110",
    "end": "1054520"
  },
  {
    "text": "is a first and second or the intersection of first and second and it",
    "start": "1054520",
    "end": "1061870"
  },
  {
    "text": "will basically loop through all the properties on the first one and add them",
    "start": "1061870",
    "end": "1070030"
  },
  {
    "text": "to the new object and it'll loop through all of the properties of the second",
    "start": "1070030",
    "end": "1075820"
  },
  {
    "text": "object and add them to the new object and then it's just going to return the result which takes in all the properties",
    "start": "1075820",
    "end": "1084310"
  },
  {
    "text": "and methods from either object now this implementation is slightly naive if both",
    "start": "1084310",
    "end": "1093780"
  },
  {
    "text": "classes that got passed in and let's say they both had a method with the same",
    "start": "1093780",
    "end": "1099370"
  },
  {
    "text": "name in this case that would just get stepped on and whichever one was came in last would win but this this certainly",
    "start": "1099370",
    "end": "1112180"
  },
  {
    "text": "would work so if we were going to use",
    "start": "1112180",
    "end": "1120370"
  },
  {
    "text": "this I could define a programmer object",
    "start": "1120370",
    "end": "1125460"
  },
  {
    "text": "in this case Don the one the programmers",
    "start": "1125460",
    "end": "1131440"
  },
  {
    "text": "named Don Syme which for the record I put this code example before I knew he was gonna be here this week so I know",
    "start": "1131440",
    "end": "1139270"
  },
  {
    "text": "it's pretty easy it's pretty fun for me to get to walk around and have one of my programmer",
    "start": "1139270",
    "end": "1144310"
  },
  {
    "text": "heroes here so that's cool I unfortunately won't get to see a session",
    "start": "1144310",
    "end": "1150700"
  },
  {
    "text": "tomorrow because we have to travel back that makes me sad but anyway back to",
    "start": "1150700",
    "end": "1156430"
  },
  {
    "text": "this we've got this object programmer I've got I could also just",
    "start": "1156430",
    "end": "1162750"
  },
  {
    "text": "define my billable resource they're on line five I could call get greeting on",
    "start": "1162750",
    "end": "1167820"
  },
  {
    "text": "my program where object on line ten I could call get invoice amount on my",
    "start": "1167820",
    "end": "1174450"
  },
  {
    "text": "billable resource but down here on line fourteen what I'm calling extend I'm",
    "start": "1174450",
    "end": "1181230"
  },
  {
    "text": "going to pass in my new programmer object with the billable resource prototype those mix-ins will get added",
    "start": "1181230",
    "end": "1189570"
  },
  {
    "text": "to the new object and now I could call get greeting or get invoice amount on",
    "start": "1189570",
    "end": "1196830"
  },
  {
    "text": "that object one of the things that's kind of cool about this is the",
    "start": "1196830",
    "end": "1202410"
  },
  {
    "text": "intellisense on this is really good let's pop over to the code so you can",
    "start": "1202410",
    "end": "1209760"
  },
  {
    "start": "1208000",
    "end": "1359000"
  },
  {
    "text": "see it",
    "start": "1209760",
    "end": "1212150"
  },
  {
    "text": "let's see",
    "start": "1220760",
    "end": "1223929"
  },
  {
    "text": "which by the way if you're keeping score at home I'm using TS jest for all these",
    "start": "1230390",
    "end": "1237000"
  },
  {
    "text": "code samples it's just a really convenient way for me to write some some typescript and execute it without having",
    "start": "1237000",
    "end": "1245910"
  },
  {
    "text": "to be concerned with building out a whole website so here's my object dawn",
    "start": "1245910",
    "end": "1256490"
  },
  {
    "text": "which I don't know if you can how what you can see that but you can see my",
    "start": "1256490",
    "end": "1265320"
  },
  {
    "text": "intellisense in Visual Studio code is representing this type as the",
    "start": "1265320",
    "end": "1272400"
  },
  {
    "text": "intersection type you know it's putting that ampersand right on there and you",
    "start": "1272400",
    "end": "1282330"
  },
  {
    "text": "know the intellisense is well aware that if I just have one of these dawn objects",
    "start": "1282330",
    "end": "1289320"
  },
  {
    "text": "I should be able to call into any of the",
    "start": "1289320",
    "end": "1296180"
  },
  {
    "text": "methods on either of the objects so the tooling around the intersection types",
    "start": "1296180",
    "end": "1302190"
  },
  {
    "text": "works really well and that really is one of the reasons why typescript does some",
    "start": "1302190",
    "end": "1307380"
  },
  {
    "text": "of the things that does is to enable tools like Visual Studio code to help",
    "start": "1307380",
    "end": "1315090"
  },
  {
    "text": "you out one of the things that a lot of people don't know is that the way Visual",
    "start": "1315090",
    "end": "1320700"
  },
  {
    "text": "Studio code gives JavaScript developers such good",
    "start": "1320700",
    "end": "1326150"
  },
  {
    "text": "intellisense help and other tooling help is that Visual Studio code treats all",
    "start": "1326150",
    "end": "1332570"
  },
  {
    "text": "JavaScript as typescript so the way Visual Studio code does the",
    "start": "1332570",
    "end": "1338340"
  },
  {
    "text": "intellisense for javascript is it just takes the JavaScript and runs it to the typescript compiler and so it should not",
    "start": "1338340",
    "end": "1346230"
  },
  {
    "text": "be surprising when we look at the tooling for a typescript and it's",
    "start": "1346230",
    "end": "1351390"
  },
  {
    "text": "phenomenal",
    "start": "1351390",
    "end": "1353540"
  },
  {
    "start": "1359000",
    "end": "1433000"
  },
  {
    "text": "alright so that was intersection types the next thing that I want to introduce",
    "start": "1359090",
    "end": "1366870"
  },
  {
    "text": "you to is Union types Union type a Union",
    "start": "1366870",
    "end": "1374310"
  },
  {
    "text": "type is a type where we're going to say that we have an object and it is going",
    "start": "1374310",
    "end": "1380880"
  },
  {
    "text": "to be either type A or type B or type C",
    "start": "1380880",
    "end": "1386250"
  },
  {
    "text": "or type D depending on your doing and so where intersection types is kind of like",
    "start": "1386250",
    "end": "1393330"
  },
  {
    "text": "the logical and of two types the Union type is the logical or of two type",
    "start": "1393330",
    "end": "1400980"
  },
  {
    "text": "definitions and when we have a Union",
    "start": "1400980",
    "end": "1410970"
  },
  {
    "text": "type objects that are defined as these",
    "start": "1410970",
    "end": "1416100"
  },
  {
    "text": "Union types can specifically only call the functionality that is common to both",
    "start": "1416100",
    "end": "1423560"
  },
  {
    "text": "but we have a way to kind of tease out the other functionality so let's look at",
    "start": "1423560",
    "end": "1431010"
  },
  {
    "text": "how we might use this a little bit in this example we still have a class",
    "start": "1431010",
    "end": "1437100"
  },
  {
    "start": "1433000",
    "end": "1896000"
  },
  {
    "text": "called programmer we have another class called tester and we have a third class called product owner and let's imagine",
    "start": "1437100",
    "end": "1443940"
  },
  {
    "text": "that we have a scenario where we are assigning tasks in our sprint to one of",
    "start": "1443940",
    "end": "1450390"
  },
  {
    "text": "these individuals but because the product owner doesn't really get tasks",
    "start": "1450390",
    "end": "1456840"
  },
  {
    "text": "assigned to him or her we are going to just limit the assignment to programmers",
    "start": "1456840",
    "end": "1462780"
  },
  {
    "text": "or testers so what I could do is I could have code that looks like this where the",
    "start": "1462780",
    "end": "1470580"
  },
  {
    "text": "assignment takes a programmer or a tester and then I can assign the task to",
    "start": "1470580",
    "end": "1478920"
  },
  {
    "text": "that person the nice thing here is that I would actually get a compiler error if",
    "start": "1478920",
    "end": "1485610"
  },
  {
    "text": "I try to pass in a product owner but as I mentioned before",
    "start": "1485610",
    "end": "1494100"
  },
  {
    "text": "when you're dealing with an object that is assigned the Union type you can't",
    "start": "1494100",
    "end": "1499950"
  },
  {
    "text": "necessarily call the methods on one of the specific types in this case get name is a method on both programmer and",
    "start": "1499950",
    "end": "1508170"
  },
  {
    "text": "tester so I can call that but get favorite language is only a method on the programmer and so I can't call that",
    "start": "1508170",
    "end": "1515190"
  },
  {
    "text": "that would actually be a compiler error",
    "start": "1515190",
    "end": "1518330"
  },
  {
    "text": "so when I've got one of these Union types",
    "start": "1521360",
    "end": "1527190"
  },
  {
    "text": "I could I could substitute a programmer",
    "start": "1527190",
    "end": "1532860"
  },
  {
    "text": "or a tester for that so I declare a programmer on line 16 and I can on line",
    "start": "1532860",
    "end": "1540540"
  },
  {
    "text": "20 assign the task to the programmer or really assign the programmer to the task",
    "start": "1540540",
    "end": "1546900"
  },
  {
    "text": "on line 23 I could assign the tester to the task and I don't have it here but on",
    "start": "1546900",
    "end": "1557070"
  },
  {
    "text": "line 23 if I create a new product owner and try and pass him in to the task it",
    "start": "1557070",
    "end": "1563550"
  },
  {
    "text": "will not work let's pop over and look at that real quick",
    "start": "1563550",
    "end": "1569600"
  },
  {
    "text": "so here's the code I'm trying to assign a new product owner but I'm getting a",
    "start": "1580990",
    "end": "1586690"
  },
  {
    "text": "compiler error and again the tooltip is pretty useful",
    "start": "1586690",
    "end": "1592270"
  },
  {
    "text": "it says argument of type product owner is not assignable to parameter of type programmer or tester and so we can know",
    "start": "1592270",
    "end": "1604750"
  },
  {
    "text": "right away that that we've done something wrong here now just like we",
    "start": "1604750",
    "end": "1613630"
  },
  {
    "text": "saw with generics the type safety that we get here does go away at compile time",
    "start": "1613630",
    "end": "1621070"
  },
  {
    "text": "and so if we found some really horrendous JavaScript workaround we",
    "start": "1621070",
    "end": "1628840"
  },
  {
    "text": "could in if we could get it into the JavaScript assign our product owner into the task but at least at compile time we",
    "start": "1628840",
    "end": "1638289"
  },
  {
    "text": "have that type safety and again this is kind of the big theme of this whole talk",
    "start": "1638289",
    "end": "1645309"
  },
  {
    "text": "is that typescript gives you ways to help you communicate what you're trying",
    "start": "1645309",
    "end": "1651760"
  },
  {
    "text": "to do to your teammates not necessarily get additional functionality at runtime the fact that I have specifically made",
    "start": "1651760",
    "end": "1658659"
  },
  {
    "text": "the parameter to the assign method the union of programmer or tester is really",
    "start": "1658659",
    "end": "1664750"
  },
  {
    "text": "for future developers not so much for runtime safety",
    "start": "1664750",
    "end": "1672450"
  },
  {
    "text": "now we're union types our most commonly used is to represent potential heir",
    "start": "1677840",
    "end": "1685590"
  },
  {
    "text": "cases and this is a pattern that is very common if you come from a functional",
    "start": "1685590",
    "end": "1692129"
  },
  {
    "text": "programming background developers that work a lot in elixir or Scala or F sharp",
    "start": "1692129",
    "end": "1698490"
  },
  {
    "text": "are very familiar to this pattern but developers that have come from more of a c-sharp or Java background often are",
    "start": "1698490",
    "end": "1705779"
  },
  {
    "text": "unfamiliar with this pattern so let's",
    "start": "1705779",
    "end": "1712110"
  },
  {
    "text": "imagine a new scenario where we have some code that is working with these programmer objects and in fact it's",
    "start": "1712110",
    "end": "1718440"
  },
  {
    "text": "storing them in the database and we need to be able to retrieve some data from",
    "start": "1718440",
    "end": "1724619"
  },
  {
    "text": "the database we want to look up a programmer by name return the result and",
    "start": "1724619",
    "end": "1731639"
  },
  {
    "text": "as you all know looking things up in the database never goes wrong there's no way",
    "start": "1731639",
    "end": "1737309"
  },
  {
    "text": "I can ever have any exceptions so we don't have to worry about it right cuz that is me okay you guys are probably",
    "start": "1737309",
    "end": "1744690"
  },
  {
    "text": "the really good programmers I have found a lot of ways to make this go wrong in my career so for bad programmers like me",
    "start": "1744690",
    "end": "1752759"
  },
  {
    "text": "we need this kind of stuff so what I want to be able to do is I want to define a class programmer that has the",
    "start": "1752759",
    "end": "1760710"
  },
  {
    "text": "actual information that I I want and I want to have another class called lookup",
    "start": "1760710",
    "end": "1766019"
  },
  {
    "text": "failed and in my code that looks up the",
    "start": "1766019",
    "end": "1773309"
  },
  {
    "text": "data in the database I am going to return a programmer lookup result which",
    "start": "1773309",
    "end": "1782730"
  },
  {
    "text": "a programmer lookup result is basically just a type alias for the Union type of",
    "start": "1782730",
    "end": "1788580"
  },
  {
    "text": "programmer or look I've failed so this is something else that I'm just gonna talk about real quick",
    "start": "1788580",
    "end": "1795749"
  },
  {
    "text": "oops that was not what I wanted Oh jumping ahead",
    "start": "1795749",
    "end": "1801378"
  },
  {
    "text": "so this code here on line 16 where we're going to just define a type and set it",
    "start": "1803819",
    "end": "1810489"
  },
  {
    "text": "equal to two other types that's called a type alias this is not something that's specific to union types you could do the",
    "start": "1810489",
    "end": "1817299"
  },
  {
    "text": "same thing with intersection types it's just a convenient way to represent what",
    "start": "1817299",
    "end": "1823419"
  },
  {
    "text": "the Union type is here in my opinion having an alias on the Union type makes",
    "start": "1823419",
    "end": "1828969"
  },
  {
    "text": "it even more explicit in the code what you're trying to do it's just one more",
    "start": "1828969",
    "end": "1835299"
  },
  {
    "text": "communication mechanism you have to the other teammates so in a real version of",
    "start": "1835299",
    "end": "1844059"
  },
  {
    "text": "this code our programmer repository would have a named method called get by name they would actually connect to a",
    "start": "1844059",
    "end": "1850149"
  },
  {
    "text": "database and do the sequel thing that it was gonna do in this very simple version",
    "start": "1850149",
    "end": "1857279"
  },
  {
    "text": "it is going to look up a or it's going to return a new error message every time",
    "start": "1857279",
    "end": "1863019"
  },
  {
    "text": "so it's just going to return a new lookup failed but what we can do because",
    "start": "1863019",
    "end": "1868389"
  },
  {
    "text": "it's the Union type we can either return the programmer if everything went well or we can return the error message this",
    "start": "1868389",
    "end": "1879129"
  },
  {
    "text": "is a contrast to how these type of scenarios are normally handled where the",
    "start": "1879129",
    "end": "1885879"
  },
  {
    "text": "return type would always be programmer and if something goes wrong we'd throw an exception but when we return the",
    "start": "1885879",
    "end": "1893379"
  },
  {
    "text": "Union of the object in the failure the code that calls that like it would here",
    "start": "1893379",
    "end": "1903429"
  },
  {
    "start": "1896000",
    "end": "2064000"
  },
  {
    "text": "on line 22 is going to get back the result the result is going to be that Union type and instead of having to",
    "start": "1903429",
    "end": "1912999"
  },
  {
    "text": "catch an exception what I do is inspect",
    "start": "1912999",
    "end": "1918189"
  },
  {
    "text": "the result and so I can say if result is",
    "start": "1918189",
    "end": "1923859"
  },
  {
    "text": "an instance of programmer than I do you know whatever the programmer thing is",
    "start": "1923859",
    "end": "1929489"
  },
  {
    "text": "you know if the result is a lookup failed that I'm going to have my failure case",
    "start": "1929489",
    "end": "1935399"
  },
  {
    "text": "by the way this is called a type guard what you're seeing here on lines 24 and 26 the type guard is the code that looks",
    "start": "1935399",
    "end": "1945309"
  },
  {
    "text": "at the actual type inside of the Union type and you could actually have",
    "start": "1945309",
    "end": "1952589"
  },
  {
    "text": "additional cases if the Union type supported that but this allows us to",
    "start": "1952589",
    "end": "1959279"
  },
  {
    "text": "figure out which one of the Union type we actually have one of the things that",
    "start": "1959279",
    "end": "1965379"
  },
  {
    "text": "is worth noting again is that the intellisense on this is really good it's",
    "start": "1965379",
    "end": "1972489"
  },
  {
    "text": "actually kind of fun let's look at the example of that yeah this is the one",
    "start": "1972489",
    "end": "1987639"
  },
  {
    "text": "that I want nope that was not the one that I wanted",
    "start": "1987639",
    "end": "1994739"
  },
  {
    "text": "so if I look at the type of result here we know it's a programmer lookup result",
    "start": "2000690",
    "end": "2008170"
  },
  {
    "text": "and if I try to say result dot get",
    "start": "2008170",
    "end": "2015040"
  },
  {
    "text": "favorite language I should get a",
    "start": "2015040",
    "end": "2021870"
  },
  {
    "text": "compiler error that says get favorite favorite language does not exist on type",
    "start": "2022800",
    "end": "2030130"
  },
  {
    "text": "programmer look-up result it actually gives me an alternative solution which says get favorite language does not",
    "start": "2030130",
    "end": "2035980"
  },
  {
    "text": "exist on lookup failed because remember when you have Union types if there are",
    "start": "2035980",
    "end": "2041880"
  },
  {
    "text": "functions that are common to all of the types I could call those and so I can either resolve this issue by actually",
    "start": "2041880",
    "end": "2050470"
  },
  {
    "text": "only doing something that exists on program or lookup result or I could change lookup failed to support get",
    "start": "2050470",
    "end": "2055929"
  },
  {
    "text": "favorite language which is obviously not what I want to do but it is worth noting",
    "start": "2055929",
    "end": "2063250"
  },
  {
    "text": "that I don't have to cast the result I",
    "start": "2063250",
    "end": "2068350"
  },
  {
    "start": "2064000",
    "end": "2138000"
  },
  {
    "text": "just have to have this type guard so the exact same code that is a compiler error",
    "start": "2068350",
    "end": "2074429"
  },
  {
    "text": "here is absolutely fine inside of that type guard so once I've gone through",
    "start": "2074429",
    "end": "2081970"
  },
  {
    "text": "that type guard the compiler is smart enough to know that result actually is an instance of programmer and those",
    "start": "2081970",
    "end": "2088120"
  },
  {
    "text": "methods are fair game so",
    "start": "2088120",
    "end": "2096190"
  },
  {
    "text": "any questions so far yes the the union",
    "start": "2096190",
    "end": "2111160"
  },
  {
    "text": "types so my experience has been that",
    "start": "2111160",
    "end": "2124510"
  },
  {
    "text": "developers that start handling errors with the union types really start to",
    "start": "2124510",
    "end": "2129580"
  },
  {
    "text": "enjoy that one of the things that's nice about this is that once I've got this",
    "start": "2129580",
    "end": "2136390"
  },
  {
    "text": "code because of the way that",
    "start": "2136390",
    "end": "2141490"
  },
  {
    "text": "intellisense works in the compiler error you are forced to handle that error so I",
    "start": "2141490",
    "end": "2148510"
  },
  {
    "text": "couldn't call get favorite language until I have the type guard once I have the type guard then like oh yeah I need",
    "start": "2148510",
    "end": "2154990"
  },
  {
    "text": "to handle the air as well whereas within if an exception is thrown there's an",
    "start": "2154990",
    "end": "2161650"
  },
  {
    "text": "always a chance that you just have an unhandled exception error I'm sure you",
    "start": "2161650",
    "end": "2167440"
  },
  {
    "text": "guys are all really good developers and you'd never have unhandled exceptions in your code me I need the the warm hug of",
    "start": "2167440",
    "end": "2176140"
  },
  {
    "text": "a compiler that you know forces me to deal with these things so there is some there's some niceties about kind of",
    "start": "2176140",
    "end": "2183880"
  },
  {
    "text": "being forced into the pit of success and having to deal with those air cases now the downside of that is that with",
    "start": "2183880",
    "end": "2193600"
  },
  {
    "text": "exceptions I could in theory allow the air to bubble up a couple levels and",
    "start": "2193600",
    "end": "2198720"
  },
  {
    "text": "catch it at a higher level and so there is some additional flexibility you get",
    "start": "2198720",
    "end": "2204010"
  },
  {
    "text": "by using you know throwing an error instead of returning a union type so you",
    "start": "2204010",
    "end": "2212590"
  },
  {
    "text": "know it's not that one is right and one is wrong it's there's trade-offs my",
    "start": "2212590",
    "end": "2217840"
  },
  {
    "text": "experience has been that Union types tend to lead towards cleaner solutions but feel free to decide for yourself I",
    "start": "2217840",
    "end": "2226180"
  },
  {
    "text": "actually have a whole blog post exactly on that topic because this is not the first time this question has come up my blog will be linked at",
    "start": "2226180",
    "end": "2233650"
  },
  {
    "text": "the end but if you go to Humble tool Smith comm I have a whole blog post that actually builds out that this example",
    "start": "2233650",
    "end": "2239200"
  },
  {
    "text": "with both returning Union type in thrown exception actually I've got that code on",
    "start": "2239200",
    "end": "2244300"
  },
  {
    "text": "my machine if you want to look at it later too yeah question back here what do you mean",
    "start": "2244300",
    "end": "2260020"
  },
  {
    "text": "can it be used in a ternary operator I",
    "start": "2260020",
    "end": "2271510"
  },
  {
    "text": "don't know should we try it you guys are like is and try it and",
    "start": "2271510",
    "end": "2277589"
  },
  {
    "text": "what's the worst could happen Erica look like a that's that's fine",
    "start": "2277589",
    "end": "2283830"
  },
  {
    "text": "so what you you want to say fav Lang",
    "start": "2283830",
    "end": "2295320"
  },
  {
    "text": "equals result instance of",
    "start": "2295320",
    "end": "2303480"
  },
  {
    "text": "what is the that's right",
    "start": "2309490",
    "end": "2315869"
  },
  {
    "text": "let's get rid of that yeah that seems to be working it knows that favorite",
    "start": "2328590",
    "end": "2337650"
  },
  {
    "text": "language is a string",
    "start": "2337650",
    "end": "2340910"
  },
  {
    "text": "yeah it's picking it up yeah it knows that result is a programmer by the time we get past that ternary",
    "start": "2348060",
    "end": "2355200"
  },
  {
    "text": "I knows it's a look I've failed so that's actually pretty cool just knows",
    "start": "2364220",
    "end": "2374569"
  },
  {
    "text": "exactly how I scripted that out thanks",
    "start": "2374569",
    "end": "2379789"
  },
  {
    "text": "man I tell you what you find me afterwards",
    "start": "2379789",
    "end": "2390440"
  },
  {
    "text": "and we'll try it because now I'm really",
    "start": "2390440",
    "end": "2396109"
  },
  {
    "text": "curious to see what",
    "start": "2396109",
    "end": "2404230"
  },
  {
    "text": "alright that'll be an exercise for later",
    "start": "2411030",
    "end": "2415880"
  },
  {
    "text": "any other questions before I move on yeah so I know I I should probably",
    "start": "2417260",
    "end": "2434460"
  },
  {
    "text": "change that slide because I make it look like a Venn diagram it's not really a Venn diagram and I apologize the visual",
    "start": "2434460",
    "end": "2445710"
  },
  {
    "text": "is correct the terminology is the it's different than the Venn diagram terminology so I don't know does that",
    "start": "2445710",
    "end": "2455820"
  },
  {
    "text": "answer your question it's the terminology makes sense other",
    "start": "2455820",
    "end": "2462030"
  },
  {
    "text": "than the fact that it's different than what a Venn diagram does yeah question the back",
    "start": "2462030",
    "end": "2468380"
  },
  {
    "text": "so if you throw out are you saying if what happens if we have a function that",
    "start": "2479030",
    "end": "2484670"
  },
  {
    "text": "returns a union type that could be the air or throw an exception that could be",
    "start": "2484670",
    "end": "2491190"
  },
  {
    "text": "an error I mean that at that point the exception if you throw the throw the exception it's gonna bubble out over the",
    "start": "2491190",
    "end": "2498780"
  },
  {
    "text": "type guard so you could certainly have an unhandled exception that way that feels like a code smell if you were both",
    "start": "2498780",
    "end": "2505589"
  },
  {
    "text": "throwing exceptions and returning errors",
    "start": "2505589",
    "end": "2511290"
  },
  {
    "text": "in the Union type and I'm sure there are reasons why you might do that but if you",
    "start": "2511290",
    "end": "2517710"
  },
  {
    "text": "were trying to mix those two paradigms I think you would have to step back and",
    "start": "2517710",
    "end": "2523410"
  },
  {
    "text": "and take a little bit more about your design good question though",
    "start": "2523410",
    "end": "2529980"
  },
  {
    "text": "other questions",
    "start": "2529980",
    "end": "2532849"
  },
  {
    "text": "all right",
    "start": "2537319",
    "end": "2540219"
  },
  {
    "text": "so one of the other really fun features in typescript is something called string literals and at first glance they're not",
    "start": "2544460",
    "end": "2554930"
  },
  {
    "start": "2553000",
    "end": "2612000"
  },
  {
    "text": "as thrilling is I am describing them as but what I can do is I can create a type",
    "start": "2554930",
    "end": "2561020"
  },
  {
    "text": "alias and create what kind of looks like",
    "start": "2561020",
    "end": "2566180"
  },
  {
    "text": "a union of a bunch of strings but what I can do is I can constrain objects of",
    "start": "2566180",
    "end": "2574040"
  },
  {
    "text": "type grade to be one of these five strings so when I do this I can now have",
    "start": "2574040",
    "end": "2585340"
  },
  {
    "text": "a method enter grade and takes my name and when I pass in a B that is",
    "start": "2585340",
    "end": "2593390"
  },
  {
    "text": "completely legit but if I try and pass in an e which is also a string I get a",
    "start": "2593390",
    "end": "2600980"
  },
  {
    "text": "compiler error because E is not in the",
    "start": "2600980",
    "end": "2606200"
  },
  {
    "text": "the string literal defined of just ABCD and F so one of the things that often",
    "start": "2606200",
    "end": "2614830"
  },
  {
    "start": "2612000",
    "end": "2892000"
  },
  {
    "text": "comes up when I'm explaining this feature to people is that it looks an awful lot like enumerations which it",
    "start": "2614830",
    "end": "2623120"
  },
  {
    "text": "does but one of the things about enumerations is that under the hood all",
    "start": "2623120",
    "end": "2628520"
  },
  {
    "text": "enumerations are stored as numbers and so while I would then have some kind of",
    "start": "2628520",
    "end": "2635660"
  },
  {
    "text": "numeric representation of ABCD and F that would be different than actually",
    "start": "2635660",
    "end": "2642770"
  },
  {
    "text": "working with the string so in this case I could have a string coming in from",
    "start": "2642770",
    "end": "2648850"
  },
  {
    "text": "various sources and I can verify the actual string also I can I can call",
    "start": "2648850",
    "end": "2656360"
  },
  {
    "text": "these string methods on on the type and",
    "start": "2656360",
    "end": "2662690"
  },
  {
    "text": "so actually having a string that's combined down to a finite set of strings",
    "start": "2662690",
    "end": "2670210"
  },
  {
    "text": "can be very useful one of the reasons this becomes a really big deal in",
    "start": "2670210",
    "end": "2675650"
  },
  {
    "text": "typescript is that a lot of typescript is doing some kind of Dom manipulation meaning that we have a lot of strings that mean very",
    "start": "2675650",
    "end": "2681829"
  },
  {
    "text": "specific things we might want to have a method that is adding elements to the",
    "start": "2681829",
    "end": "2687559"
  },
  {
    "text": "Dom but we only want it to work with divs and a tags and P tags and so we",
    "start": "2687559",
    "end": "2694369"
  },
  {
    "text": "could define a string literal that you know is just the the union of those",
    "start": "2694369",
    "end": "2700609"
  },
  {
    "text": "three elements now we actually would get good compiler time checking that the",
    "start": "2700609",
    "end": "2707390"
  },
  {
    "text": "string that passed in was one of the elements that we expected so string",
    "start": "2707390",
    "end": "2712789"
  },
  {
    "text": "literals one of those features is kind of it's kind of sneaky and how useful it",
    "start": "2712789",
    "end": "2718579"
  },
  {
    "text": "is usually once people start using them like is there's actually a lot of applications for that any questions on",
    "start": "2718579",
    "end": "2727400"
  },
  {
    "text": "string literals before we move on yeah",
    "start": "2727400",
    "end": "2733900"
  },
  {
    "text": "so",
    "start": "2740740",
    "end": "2743740"
  },
  {
    "text": "are you saying like you want to be able to define like a string literal that",
    "start": "2749539",
    "end": "2756439"
  },
  {
    "text": "works with uppercase a and lowercase a I mean you could manually do it but I",
    "start": "2756439",
    "end": "2765829"
  },
  {
    "text": "don't think there's a way to I don't think you can like define a type that is",
    "start": "2765829",
    "end": "2771859"
  },
  {
    "text": "a case-insensitive string literal so and",
    "start": "2771859",
    "end": "2777529"
  },
  {
    "text": "also to answer your other question I don't know of a way to you know enumerate the list there might be not",
    "start": "2777529",
    "end": "2785989"
  },
  {
    "text": "sure it's also worth noting that we have",
    "start": "2785989",
    "end": "2792489"
  },
  {
    "text": "numeric literals as well these start to get really close to enumerations you",
    "start": "2792639",
    "end": "2798739"
  },
  {
    "text": "know I could have a dice roll that is just one two three four or five or six but again not this one isn't as",
    "start": "2798739",
    "end": "2807049"
  },
  {
    "text": "interesting because enumerations do a lot of the same thing although one of",
    "start": "2807049",
    "end": "2813739"
  },
  {
    "text": "the nice things about numeric literals is that I could use floating-point numbers so if I just wanted to have a",
    "start": "2813739",
    "end": "2821359"
  },
  {
    "text": "numeric literal that could only be three point one four two point seven one I could define that oh and it won't show",
    "start": "2821359",
    "end": "2832009"
  },
  {
    "text": "me the type here because I'm never actually doing anything with it",
    "start": "2832009",
    "end": "2836649"
  },
  {
    "text": "I still still mad at me",
    "start": "2848920",
    "end": "2853470"
  },
  {
    "text": "yeah so you can see here that type 0 is not assignable to type special numbers",
    "start": "2859820",
    "end": "2867430"
  },
  {
    "text": "so having I in my use cases the numeric",
    "start": "2868420",
    "end": "2875210"
  },
  {
    "text": "literals aren't something I don't think I've ever used in production code string literals tend to be something that you",
    "start": "2875210",
    "end": "2882890"
  },
  {
    "text": "get to use quite a bit good question though",
    "start": "2882890",
    "end": "2889720"
  },
  {
    "start": "2892000",
    "end": "2980000"
  },
  {
    "text": "all right so kind of to wrap up to kind of put a bow in this whole thing",
    "start": "2893510",
    "end": "2898930"
  },
  {
    "text": "programming languages like spoken languages our communication mechanisms one of the things I hope you have",
    "start": "2899800",
    "end": "2906880"
  },
  {
    "text": "learned today is there are some new vocabulary that you've picked up that",
    "start": "2906880",
    "end": "2913130"
  },
  {
    "text": "you can use that will help you express what it is that your code is trying to do one of the things that I do want to",
    "start": "2913130",
    "end": "2922609"
  },
  {
    "text": "offer as a caveat is that in the same way that if you put all these features",
    "start": "2922609",
    "end": "2931550"
  },
  {
    "text": "into like one function it would be obnoxious it would be very similar to meeting something with a really large vocabulary that's really hard to",
    "start": "2931550",
    "end": "2937400"
  },
  {
    "text": "understand right don't go back to the office on Monday and be like I'm gonna use intersection types and union types",
    "start": "2937400",
    "end": "2943760"
  },
  {
    "text": "and string literals for everything because that's not what you want but now",
    "start": "2943760",
    "end": "2950300"
  },
  {
    "text": "that you know that these things exist you know I hope that you'll see",
    "start": "2950300",
    "end": "2955660"
  },
  {
    "text": "situations in the near future like oh you know what I really want to be able to do here is I want to be able to",
    "start": "2955660",
    "end": "2960980"
  },
  {
    "text": "communicate that this is going to be Type A or type B and I can just using",
    "start": "2960980",
    "end": "2966290"
  },
  {
    "text": "you know type for that so hopefully there's you picked up some new vocabulary today and it'll help you",
    "start": "2966290",
    "end": "2974470"
  },
  {
    "text": "build better more reliable software in the future so thanks for coming out",
    "start": "2974470",
    "end": "2983630"
  },
  {
    "start": "2980000",
    "end": "3048000"
  },
  {
    "text": "today like it said I've got a blog post up on my blog humble tool Smith comm",
    "start": "2983630",
    "end": "2990310"
  },
  {
    "text": "that I there's a little bit deeper dive into error handling",
    "start": "2990310",
    "end": "2995380"
  },
  {
    "text": "all the code we looked at today other than the code that I literally typed in",
    "start": "2995380",
    "end": "3000430"
  },
  {
    "text": "the last ten minutes is up on github at typescript beyond the basics all of",
    "start": "3000430",
    "end": "3005859"
  },
  {
    "text": "these slides again except for the ones that a the one I added this morning are",
    "start": "3005859",
    "end": "3012960"
  },
  {
    "text": "up on SlideShare so if you wanted any of",
    "start": "3012960",
    "end": "3018400"
  },
  {
    "text": "this information down the road you can get it there if you want to talk about this more",
    "start": "3018400",
    "end": "3025440"
  },
  {
    "text": "feel free to ask I'll be hanging around for a little bit afterwards the easiest way to find me online is on twitter at",
    "start": "3026250",
    "end": "3032670"
  },
  {
    "text": "powder Eric I love to talk to you more about this stuff or answer any questions you might have so thanks for coming out",
    "start": "3032670",
    "end": "3039840"
  },
  {
    "text": "this has been fun and have a great rest of the conference [Applause]",
    "start": "3039840",
    "end": "3050109"
  }
]