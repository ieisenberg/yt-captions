[
  {
    "text": "all right well it's 10 20 by my watch so let's get started thanks for hanging out",
    "start": "13759",
    "end": "21039"
  },
  {
    "text": "uh welcome to i guess session one of ndc sydney in room one thank you for",
    "start": "21039",
    "end": "26080"
  },
  {
    "text": "joining me um for joining from wherever you are which is easier uh if you want to turn on your",
    "start": "26080",
    "end": "32719"
  },
  {
    "text": "cameras that's great i can see you over there and you can smile or not and if you don't that's cool too uh if you have any",
    "start": "32719",
    "end": "38719"
  },
  {
    "text": "questions feel fr ask in the slack channel i've got that open as well",
    "start": "38719",
    "end": "44000"
  },
  {
    "text": "and that's a bit easier to track than the webex chat but let's get started let's talk",
    "start": "44000",
    "end": "50239"
  },
  {
    "text": "about source generators let's talk about writing code to write some code",
    "start": "50239",
    "end": "56320"
  },
  {
    "text": "so source generation in general is a concept that is very um",
    "start": "56320",
    "end": "64000"
  },
  {
    "text": "i say it might not be familiar to every developer but every developer pretty much uses it even if they don't know",
    "start": "64000",
    "end": "69520"
  },
  {
    "text": "and i think it's an idea that will appeal to every developer because it's all about automation it's",
    "start": "69520",
    "end": "75439"
  },
  {
    "text": "all about taking something you don't want to do in this case writing some code and making a computer do it which is",
    "start": "75439",
    "end": "82240"
  },
  {
    "text": "maybe kind of what we're all sort of in this job for anyway and as i sort of said we all probably",
    "start": "82240",
    "end": "89920"
  },
  {
    "text": "use source generation in general terms every day if you've got",
    "start": "89920",
    "end": "94960"
  },
  {
    "text": "a dot-net project that sdk-style.net project that doesn't have an assembly info for",
    "start": "94960",
    "end": "101200"
  },
  {
    "text": "example that is general at build time by a source generator it's",
    "start": "101200",
    "end": "106479"
  },
  {
    "text": "not a c sharp 9 source generator that i'm going to be talking about mainly but it's still source generation if you've got a resex",
    "start": "106479",
    "end": "111600"
  },
  {
    "text": "file or a razor file or even an aspx web forms file all of those things have source",
    "start": "111600",
    "end": "117600"
  },
  {
    "text": "generation as part of how they work it's all about automating some stuff in the case of resexes and razor files",
    "start": "117600",
    "end": "123920"
  },
  {
    "text": "and things it's you know to save you from having to write this class that represents what you want your",
    "start": "123920",
    "end": "130399"
  },
  {
    "text": "output to be it's generated so that's the general concept and there's a few different ways that",
    "start": "130399",
    "end": "137120"
  },
  {
    "text": "that works currently so let's quickly do a bit of background on what these things look like so",
    "start": "137120",
    "end": "143760"
  },
  {
    "text": "at a very high level this is very high level as you can see this is what happens when",
    "start": "143760",
    "end": "149520"
  },
  {
    "text": "you build your project you have your c-sharp files which are hand-written by you presumably",
    "start": "149520",
    "end": "157760"
  },
  {
    "text": "they go into the compiler and that produces a dll cool makes sense so the two ways that",
    "start": "157760",
    "end": "165040"
  },
  {
    "text": "source generation can work now and by now being before c-sharp nine",
    "start": "165040",
    "end": "171200"
  },
  {
    "text": "uh so there's two ways the first way is before the compilation and so you might",
    "start": "171200",
    "end": "177760"
  },
  {
    "text": "see things like ms build tasks being used for this uh there's tools like codesmith which is one i used to use",
    "start": "177760",
    "end": "184159"
  },
  {
    "text": "15 years ago um and then there's all sorts of other options as well there's",
    "start": "184159",
    "end": "189360"
  },
  {
    "text": "there's single file generators built into visual studio lots of different options here but",
    "start": "189360",
    "end": "194560"
  },
  {
    "text": "basically what they do is they will look at the files on your disk and",
    "start": "194560",
    "end": "199599"
  },
  {
    "text": "generate some code based off them so this is where the resex or the asp razor file generation comes in now look",
    "start": "199599",
    "end": "206480"
  },
  {
    "text": "at those files and just generate some code c sharp code and that all goes to the compiler together",
    "start": "206480",
    "end": "212720"
  },
  {
    "text": "the compiler essentially doesn't know which code you wrote versus which code",
    "start": "212720",
    "end": "218959"
  },
  {
    "text": "was written by someone else which is doesn't matter but that's essentially to the compiler this",
    "start": "218959",
    "end": "225599"
  },
  {
    "text": "isn't all just code one big lump code and it all comes into your deal alien",
    "start": "225599",
    "end": "231840"
  },
  {
    "text": "the other way you can do source generation now is after the compilation this is where there's tools like post",
    "start": "231840",
    "end": "236879"
  },
  {
    "text": "sharp you might have heard of or foddy and these work at a very different level these work at the il level",
    "start": "236879",
    "end": "243040"
  },
  {
    "text": "so your c-sharp code is converted to il that's what puts in the dll these tools work by changing the il",
    "start": "243040",
    "end": "249200"
  },
  {
    "text": "directly they're called il weavers usually and the way these work",
    "start": "249200",
    "end": "255599"
  },
  {
    "text": "is very different and foddy and post sharp sort of work as tools that allow you to uh to make that",
    "start": "255599",
    "end": "262639"
  },
  {
    "text": "job easier right so you don't have to actually use il you can write c sharp code that",
    "start": "262639",
    "end": "267759"
  },
  {
    "text": "uses their libraries but essentially the way these work is i would say this is the most powerful",
    "start": "267759",
    "end": "274240"
  },
  {
    "text": "option right these can change the il of any dll you produce or even any dll we reference",
    "start": "274240",
    "end": "281040"
  },
  {
    "text": "if we forget for a second about things like code signing and strong naming and certificates and whatever",
    "start": "281040",
    "end": "286720"
  },
  {
    "text": "we assume there's no security in the world because it's easier these tools could change any dll in your",
    "start": "286720",
    "end": "292240"
  },
  {
    "text": "whole project so we kind of have these two extremes at the moment where we have this extreme",
    "start": "292240",
    "end": "297919"
  },
  {
    "text": "power on the right hand side for post compilation generation and then we have generally speaking the",
    "start": "297919",
    "end": "304320"
  },
  {
    "text": "easier to use options before the compiler gets to it so what's new and what i'm going to be",
    "start": "304320",
    "end": "310880"
  },
  {
    "text": "focusing on from now on is g sharp 9 brings its own source generation uh feature into it",
    "start": "310880",
    "end": "319680"
  },
  {
    "text": "and this is the first sort of inbuilt what's the first generation option built",
    "start": "319680",
    "end": "325520"
  },
  {
    "text": "into the compiler there's various options built into visual studio and other microsoft products things like t4 templates etc",
    "start": "325520",
    "end": "330880"
  },
  {
    "text": "but this one's built into the compiler so before we talk about that though let's just talk quickly about what the",
    "start": "330880",
    "end": "336800"
  },
  {
    "text": "compiler does so digging into this black box of a compiler or a pink box of a compiler",
    "start": "336800",
    "end": "343840"
  },
  {
    "text": "what happens when your c sharp files are compiled so the compiler is made up of",
    "start": "343840",
    "end": "349520"
  },
  {
    "text": "phases there's about five of them but there's three that are sort of relevant here the first thing that",
    "start": "349520",
    "end": "354880"
  },
  {
    "text": "happens to your c sharp files is they go through the paths phase and this is where the text of your files the c sharp code itself",
    "start": "354880",
    "end": "361759"
  },
  {
    "text": "gets parsed and converted into a syntax tree now this is a concrete syntax tree for",
    "start": "361759",
    "end": "367840"
  },
  {
    "text": "the currency sharp compiler but don't worry about what whether that's what that means it's just a syntax tree",
    "start": "367840",
    "end": "373280"
  },
  {
    "text": "it is a tree representation of all of the bits of your code that syntax tree is then sent into the",
    "start": "373280",
    "end": "380160"
  },
  {
    "text": "compile phase and from that it becomes we get a compilation the compilation is adding in all of the",
    "start": "380160",
    "end": "388160"
  },
  {
    "text": "rich information about the type system so for example if you had a variable that was",
    "start": "388160",
    "end": "393520"
  },
  {
    "text": "declared as a string with a lowercase s well the person knows that that's the string keyword in c sharp so that's going to be",
    "start": "393520",
    "end": "400400"
  },
  {
    "text": "a keyword node but if you use a capital s the parser doesn't know what that means",
    "start": "400400",
    "end": "405440"
  },
  {
    "text": "it's just a type called string it has no idea where it comes from the compilation is what adds in that",
    "start": "405440",
    "end": "411599"
  },
  {
    "text": "type information say ah this is a system.string from mscorellib.dll or whatever it is",
    "start": "411599",
    "end": "419039"
  },
  {
    "text": "and so then that compilation goes to the emit phase and it becomes il and that's what gets",
    "start": "419039",
    "end": "424800"
  },
  {
    "text": "sent to our dll so that's our high level view of the compiler let's add source generators",
    "start": "424800",
    "end": "430000"
  },
  {
    "text": "into the mix so a source generator is something you tell the compiler about you provide essentially you say hello",
    "start": "430000",
    "end": "436720"
  },
  {
    "text": "please use this source generator for me what happens now is your code goes into the parse phase",
    "start": "436720",
    "end": "442720"
  },
  {
    "text": "produces a syntax tree goes into compile syntax true becomes a compilation",
    "start": "442720",
    "end": "447919"
  },
  {
    "text": "and what happens now is different now what happens is the compilation and those syntax trees",
    "start": "447919",
    "end": "453759"
  },
  {
    "text": "get sent across to the source generator so in the middle of the compiler we are now able to provide this library",
    "start": "453759",
    "end": "460880"
  },
  {
    "text": "that says hey while you're compiling my other code over here also run this code that i'm giving you",
    "start": "460880",
    "end": "466800"
  },
  {
    "text": "or this library the source generator then generates source obviously",
    "start": "466800",
    "end": "472800"
  },
  {
    "text": "which is a string it's just a string of c sharp code so of course the string has to go through the path phase becomes",
    "start": "472800",
    "end": "479599"
  },
  {
    "text": "the syntax tree that syntax tree becomes a compilation we combine",
    "start": "479599",
    "end": "484879"
  },
  {
    "text": "that compilation with the one from our project and we mush them together and then that final result of all of",
    "start": "484879",
    "end": "490879"
  },
  {
    "text": "this gets sent through the emit phase becomes il and gets sent out to your",
    "start": "490879",
    "end": "495919"
  },
  {
    "text": "project so the source generator allows you to hook into the compiler pipeline",
    "start": "495919",
    "end": "501120"
  },
  {
    "text": "and allows you to add in more code that will be sort of become part of the dll the source generator",
    "start": "501120",
    "end": "507680"
  },
  {
    "text": "itself doesn't move it doesn't ever become part of the dll you don't have to distribute it",
    "start": "507680",
    "end": "512959"
  },
  {
    "text": "it's only at compile time so some potentially frequently asked",
    "start": "512959",
    "end": "519200"
  },
  {
    "text": "questions things that seem to come up a lot just to preempt maybe some questions so does the source",
    "start": "519200",
    "end": "526240"
  },
  {
    "text": "you generate exist on disk this is sort of the first seems to be the first reaction everyone has to these things is okay how do i see",
    "start": "526240",
    "end": "532720"
  },
  {
    "text": "these files and it's a bit weird because by default you can't they don't exist this is all happening",
    "start": "532720",
    "end": "538720"
  },
  {
    "text": "in memory in the compiler you're writing strings and they're getting converted to memory streams and",
    "start": "538720",
    "end": "543839"
  },
  {
    "text": "that's it there is an option to emit them and it's good for debugging",
    "start": "543839",
    "end": "549680"
  },
  {
    "text": "but it's not something that you know you you use it's it's it's an anti-pattern",
    "start": "549680",
    "end": "556720"
  },
  {
    "text": "if you want to try and read those generated files and decide if you should run etc whatever whatever",
    "start": "556720",
    "end": "562320"
  },
  {
    "text": "you're supposed to let the compiler work out that you should run can you have multiple source generators",
    "start": "562320",
    "end": "568160"
  },
  {
    "text": "absolutely but they each have to be independent you cannot have source generators that",
    "start": "568160",
    "end": "574399"
  },
  {
    "text": "rely on other source generators so you can't build up this layered approach and this is a challenge for some",
    "start": "574399",
    "end": "581839"
  },
  {
    "text": "sort of raising out their designs and it'll be interesting to see this is a space that i think might",
    "start": "581839",
    "end": "588560"
  },
  {
    "text": "change there's some proposals around at the moment for having uh two levels of source generators so you",
    "start": "588560",
    "end": "593839"
  },
  {
    "text": "could opt into being the first level and then the second level could depend on the first one",
    "start": "593839",
    "end": "599120"
  },
  {
    "text": "um but we'll see but yeah this this does mean that if you want to if you want to have you know a half a",
    "start": "599120",
    "end": "605600"
  },
  {
    "text": "dozen different source generators for your project because you've got all these crazy ideas that's great but you can't you know build upon them",
    "start": "605600",
    "end": "612959"
  },
  {
    "text": "at the moment the next question that everyone asks",
    "start": "612959",
    "end": "618000"
  },
  {
    "text": "when they start to write a source generator especially is how come i have to make strings of c sharp code this seems crazy",
    "start": "618000",
    "end": "624560"
  },
  {
    "text": "and it kind of is crazy but it also kind of makes sense uh so there are",
    "start": "624560",
    "end": "631120"
  },
  {
    "text": "higher level concepts for code right there's syntax treats we just talked about them that's what you get to",
    "start": "631120",
    "end": "636320"
  },
  {
    "text": "use when you're writing a source trigger but allowing you to produce a syntax tree",
    "start": "636320",
    "end": "642800"
  },
  {
    "text": "directly is a a very big well it's not a problem but it's a big challenge the c-sharp",
    "start": "642800",
    "end": "648959"
  },
  {
    "text": "compiler it turns out is really good at compiling c-sharp code from a blob of c-sharp but compiling",
    "start": "648959",
    "end": "655839"
  },
  {
    "text": "arbitrary syntax trees is just not it's not as well tested",
    "start": "655839",
    "end": "661600"
  },
  {
    "text": "and it's pretty easy to break the compiler or just have the compiler produce code that is not what you expect because",
    "start": "661600",
    "end": "669279"
  },
  {
    "text": "and i'll show you this in a minute but the syntax trees in c sharp the reason they're called concrete syntax trees is because they're super detailed",
    "start": "669279",
    "end": "676720"
  },
  {
    "text": "they contain every single character of your c sharp file including all the white space and all the comments and everything",
    "start": "676720",
    "end": "682880"
  },
  {
    "text": "and in fact they go two ways if you like from a syntax tree you can produce the code that produced it and it is",
    "start": "682880",
    "end": "690480"
  },
  {
    "text": "identical and so because of that the syntax trees needed to be valid c sharp are really detailed and",
    "start": "690480",
    "end": "697920"
  },
  {
    "text": "they're actually a little bit of a pain to produce and then can they change vote so this is",
    "start": "697920",
    "end": "703120"
  },
  {
    "text": "the the really big uh kind of a gotcha about c sharps or",
    "start": "703120",
    "end": "709440"
  },
  {
    "text": "stereos or at least a a major difference between the existing options",
    "start": "709440",
    "end": "714720"
  },
  {
    "text": "and this new option they cannot change existing code you cannot modify anything",
    "start": "714720",
    "end": "720399"
  },
  {
    "text": "you can only add new code so if you remember that little diagram your c files produce a syntax tree they",
    "start": "720399",
    "end": "727440"
  },
  {
    "text": "produce a compilation and then the source generator produces more code that gets added to that",
    "start": "727440",
    "end": "732959"
  },
  {
    "text": "compilation there's no changing now this is another one of those things",
    "start": "732959",
    "end": "738079"
  },
  {
    "text": "where i think there's a bunch of ideas people might have for source generators and",
    "start": "738079",
    "end": "743200"
  },
  {
    "text": "you get to this point where oh i can't change code and all your ideas some of your ideas just fall on the",
    "start": "743200",
    "end": "748480"
  },
  {
    "text": "floor um so this is a bit of a challenge but this is also kind of why we have them",
    "start": "748480",
    "end": "753760"
  },
  {
    "text": "these things have been talked about and discussed in in the compiler planning for years",
    "start": "753760",
    "end": "759360"
  },
  {
    "text": "and it is just a huge hurdle to get over if they have to change code so they can",
    "start": "759360",
    "end": "765680"
  },
  {
    "text": "only act but there's a few ways you can sort of work with that so we'll cover that",
    "start": "765680",
    "end": "771120"
  },
  {
    "text": "and then the ide experience um the visual studio in the latest preview so uh 16.8 to preview three and above",
    "start": "771120",
    "end": "778880"
  },
  {
    "text": "it's a pretty good experience if you're using source generators it's not as good for writing source",
    "start": "778880",
    "end": "784480"
  },
  {
    "text": "generators there will be more work coming in that area but for now there's a few rough edges and that's",
    "start": "784480",
    "end": "791519"
  },
  {
    "text": "basically just because visual studio being.net framework once it loads your",
    "start": "791519",
    "end": "796639"
  },
  {
    "text": "source generator it can't unload it and therefore it can't load the next version with your you know",
    "start": "796639",
    "end": "802880"
  },
  {
    "text": "changes so there's a few little things there but i can show you that too",
    "start": "802880",
    "end": "809440"
  },
  {
    "text": "all right so what can you do with them so this is definitely just my opinion but i sort of see source",
    "start": "809440",
    "end": "816160"
  },
  {
    "text": "journalism falling into three main buckets so the first one",
    "start": "816160",
    "end": "821440"
  },
  {
    "text": "is performance essentially in a lot of cases where you've got code",
    "start": "821440",
    "end": "826800"
  },
  {
    "text": "that uses reflection you can change them to be source generators and you can inspect that code",
    "start": "826800",
    "end": "832560"
  },
  {
    "text": "at compile time instead of runtime and you get a huge performance boost",
    "start": "832560",
    "end": "837920"
  },
  {
    "text": "a couple of examples there in case anyone wants to refer back for any questions later that's fine um i'll i'll talk through the winforms",
    "start": "837920",
    "end": "846240"
  },
  {
    "text": "enum validator that i wrote um as the second half of this talk is just going to be talking through it too um but yeah",
    "start": "846240",
    "end": "856079"
  },
  {
    "text": "getting rid of reflection is a huge boost to performance and if it's possible uh moving all of that",
    "start": "856079",
    "end": "861920"
  },
  {
    "text": "work onto the compiler or at compile time um is a huge win",
    "start": "861920",
    "end": "867920"
  },
  {
    "text": "the other one is the automatic to automate processing of external files so this could be things like serializers xml",
    "start": "867920",
    "end": "874959"
  },
  {
    "text": "serializer json serialize or deserializers um there's a source generator in",
    "start": "874959",
    "end": "880399"
  },
  {
    "text": "rosalind that generates the so from the c sharp grammar file the the file that",
    "start": "880399",
    "end": "887600"
  },
  {
    "text": "describes the language we generate a bunch of code for accessing that right basically all those syntax",
    "start": "887600",
    "end": "894240"
  },
  {
    "text": "tree node classes are all generated um that's a good example um anything you provide with additional files in your",
    "start": "894240",
    "end": "900560"
  },
  {
    "text": "project file can be seen by source generators so you can automate the processing of those things",
    "start": "900560",
    "end": "905600"
  },
  {
    "text": "and again sometimes that's just a matter of moving work from runtime to compile time but sometimes it's",
    "start": "905600",
    "end": "910720"
  },
  {
    "text": "a bit more than that too and then finally there's just the sort of the obvious one of i don't want",
    "start": "910720",
    "end": "915920"
  },
  {
    "text": "to type this code all the time so make someone else do it for me things where i've used source generation",
    "start": "915920",
    "end": "922639"
  },
  {
    "text": "in the past for this is things like custom orms or this is sort of what if you use the",
    "start": "922639",
    "end": "928480"
  },
  {
    "text": "entity framework or linkedis sql designers in visual studio where you draw the tables out and link them up etc",
    "start": "928480",
    "end": "934720"
  },
  {
    "text": "all of that generation that generates classes and properties and things whatever that's pretty boring stuff uh so",
    "start": "934720",
    "end": "940959"
  },
  {
    "text": "generating that is potentially a good win things like uh you know mapping and whatever else",
    "start": "940959",
    "end": "948240"
  },
  {
    "text": "so there's a few other little things that we can do with source genres i'm gonna run through quickly um source generators",
    "start": "948480",
    "end": "955199"
  },
  {
    "text": "can report diagnostics which is a fancy way of saying build errors so as part of the running of the source",
    "start": "955199",
    "end": "962399"
  },
  {
    "text": "generator you can essentially stop the build of the project that's consuming it",
    "start": "962399",
    "end": "967600"
  },
  {
    "text": "so this is a good way to add in validation around what you're generating it's tempting to also add in validation",
    "start": "967600",
    "end": "975120"
  },
  {
    "text": "of the project you're compiling but try not to do that because that's what roles and analyzers are for",
    "start": "975120",
    "end": "981040"
  },
  {
    "text": "but they do perform the same job so your generator can report a diagnostic it'll appear in the",
    "start": "981040",
    "end": "986720"
  },
  {
    "text": "build log it'll appear in visual studio you know everything that uses compiler",
    "start": "986720",
    "end": "992959"
  },
  {
    "text": "diagnostics just sees this as another compiler it doesn't know that it came from your code instead of the compiler",
    "start": "992959",
    "end": "1000000"
  },
  {
    "text": "as i briefly mentioned they can access additional files so any file in your project that you put in the",
    "start": "1000000",
    "end": "1005600"
  },
  {
    "text": "additional files group in your source journal you can just iterate through them and go nuts there's a a link at the bottom",
    "start": "1005600",
    "end": "1013279"
  },
  {
    "text": "there which i'm not going to talk through but it's an interesting idea",
    "start": "1013279",
    "end": "1019360"
  },
  {
    "text": "not for production use probably but it's essentially a c-sharp project you you",
    "start": "1019360",
    "end": "1026400"
  },
  {
    "text": "using the source editor to create a c-sharp project that has no c-sharp in it but just has additional files then those",
    "start": "1026400",
    "end": "1033678"
  },
  {
    "text": "additional files are processed by a source area and so my friend scott wrote uh a source",
    "start": "1033679",
    "end": "1039438"
  },
  {
    "text": "generally that transpiled a language essentially a non-dominant language",
    "start": "1039439",
    "end": "1044959"
  },
  {
    "text": "write the parser as a source generator and then output c sharp um anyway",
    "start": "1044959",
    "end": "1051520"
  },
  {
    "text": "a bit crazy but it works usage notes yes that's right that's what's next um",
    "start": "1051520",
    "end": "1056799"
  },
  {
    "text": "so some other things around source generators that are uh good to mention um so i said they",
    "start": "1056799",
    "end": "1063679"
  },
  {
    "text": "can't change code and that's really important so one of the mechanisms you can use in c sharp",
    "start": "1063679",
    "end": "1069679"
  },
  {
    "text": "to allow your source generator to sort of access the you know in into the middle of where",
    "start": "1069679",
    "end": "1075600"
  },
  {
    "text": "your real code is because it can't change it is to use partial methods",
    "start": "1075600",
    "end": "1080799"
  },
  {
    "text": "and so because of this and because of source changes partial methods got a bit of a boost in c sharp nine so before c sharp nine",
    "start": "1080799",
    "end": "1088480"
  },
  {
    "text": "this is what partial methods look like you would have partial void method you would call that",
    "start": "1088480",
    "end": "1094000"
  },
  {
    "text": "method from some other bit of code and then somewhere",
    "start": "1094000",
    "end": "1099600"
  },
  {
    "text": "be it handwritten or not you would define the implementation of that method and the way this worked before c sharp 9",
    "start": "1099600",
    "end": "1106640"
  },
  {
    "text": "was if you didn't provide that implementation ever then that method call just went away",
    "start": "1106640",
    "end": "1112320"
  },
  {
    "text": "it was it was though it never existed so if you if you assume that i you know don't have this",
    "start": "1112320",
    "end": "1117679"
  },
  {
    "text": "bottom half of this slide this line of code here would just not be compiled into the dll",
    "start": "1117679",
    "end": "1123760"
  },
  {
    "text": "and so because that can happen and because that that line can be removed by the compiler",
    "start": "1123760",
    "end": "1129280"
  },
  {
    "text": "there was a lot of restrictions on partial methods so you couldn't return anything from them you could leave out parameters right",
    "start": "1129280",
    "end": "1134960"
  },
  {
    "text": "because if you're removing that line of code well what would the return type be what would the value be all those sort",
    "start": "1134960",
    "end": "1140160"
  },
  {
    "text": "of things um and you couldn't have access modifiers so they couldn't be public because",
    "start": "1140160",
    "end": "1145200"
  },
  {
    "text": "it might not exist they actually couldn't be private either they couldn't be anything you literally weren't allowed to type in an access modifier",
    "start": "1145200",
    "end": "1152400"
  },
  {
    "text": "but so to make these more useful for source generators in c sharp nine basically all of those rules have been",
    "start": "1152400",
    "end": "1158720"
  },
  {
    "text": "flipped on the head so they can have return types now they can have our parameters",
    "start": "1158720",
    "end": "1164000"
  },
  {
    "text": "they can have access modifiers but if you have any one of those things then",
    "start": "1164000",
    "end": "1169440"
  },
  {
    "text": "you have to provide an implementation so basically you can now make them real methods but",
    "start": "1169440",
    "end": "1175840"
  },
  {
    "text": "if you want them to be real they have to exist essentially they're not optional and so this means that you can define",
    "start": "1175840",
    "end": "1184400"
  },
  {
    "text": "your method signature for a method that will exist in future you can call it although i should have",
    "start": "1184400",
    "end": "1190720"
  },
  {
    "text": "updated this slide because clearly that's not the right number of parameters anymore uh but you can call",
    "start": "1190720",
    "end": "1196000"
  },
  {
    "text": "it and know it will be there and then your source generator can fill in the body essentially so this is a way to sort of not really",
    "start": "1196000",
    "end": "1203600"
  },
  {
    "text": "edit code but put a spot to say hey source generator here's where i want you to fill in the",
    "start": "1203600",
    "end": "1209200"
  },
  {
    "text": "gaps so you provide these little holes in your code knowing that something will come and fill them in later",
    "start": "1209200",
    "end": "1216559"
  },
  {
    "text": "all right so quickly how do we actually reference them uh and how do we create them they're",
    "start": "1217760",
    "end": "1223440"
  },
  {
    "text": "pretty simple so up the top uh left those two little snippets of",
    "start": "1223440",
    "end": "1228720"
  },
  {
    "text": "project file is the two ways that you can reference them essentially they reference the exact same way that you reference an",
    "start": "1228720",
    "end": "1234559"
  },
  {
    "text": "analyzer if you're doing any custom roster analyzer work at the moment so one is just with a direct dll",
    "start": "1234559",
    "end": "1241039"
  },
  {
    "text": "reference and this normally you know would be hidden away by a nuget package obviously",
    "start": "1241039",
    "end": "1246480"
  },
  {
    "text": "you can reference them as a project so if you've got a source generator in your solution along with your actual project",
    "start": "1246480",
    "end": "1252240"
  },
  {
    "text": "you can just reference it that way there's a little bit of extra little guff here so reference output assembly",
    "start": "1252240",
    "end": "1257600"
  },
  {
    "text": "was false which basically says this isn't a dependency that you want to reference it's not a library of code i'm",
    "start": "1257600",
    "end": "1262960"
  },
  {
    "text": "going to be using it's just something i want to build first and then the output item type is saying well instead of being a normal",
    "start": "1262960",
    "end": "1269440"
  },
  {
    "text": "reference this is an analyzer reference and then to actually create a source generator is really straightforward",
    "start": "1269440",
    "end": "1276640"
  },
  {
    "text": "um which is the bottom two pictures if you like so the the biggest thing to remember they",
    "start": "1276640",
    "end": "1283039"
  },
  {
    "text": "have to be done at standard 2.0 they cannot be any other target framework and that's just because the compiler is",
    "start": "1283039",
    "end": "1289840"
  },
  {
    "text": "cross-platform so net standard 2 will work anywhere it's safe",
    "start": "1289840",
    "end": "1295760"
  },
  {
    "text": "and then you reference the those two packages the code analysis.analyzers and the c-sharp workspaces",
    "start": "1295760",
    "end": "1301960"
  },
  {
    "text": "[Music] i actually think only one of them is needed to actually create a source generator but",
    "start": "1301960",
    "end": "1308080"
  },
  {
    "text": "you kind of can't do much with it if you don't have the other one but so you reference those packages and to actually create a source chain on",
    "start": "1308080",
    "end": "1314640"
  },
  {
    "text": "it it's pretty simple you create a class you put the generator attribute on it you implement i source generator and",
    "start": "1314640",
    "end": "1320720"
  },
  {
    "text": "then there are two methods there's an initialize method and an execute method and that's it and if you look at that",
    "start": "1320720",
    "end": "1326320"
  },
  {
    "text": "picture this is like the world's simplest source generator you create some code in a string as mentioned so this is",
    "start": "1326320",
    "end": "1333280"
  },
  {
    "text": "a class called foo and then i don't even i've got a null check there um",
    "start": "1333280",
    "end": "1338480"
  },
  {
    "text": "and then you just call the ad source method you say hey pretend this file exists and here's the source for it the file as",
    "start": "1338480",
    "end": "1344720"
  },
  {
    "text": "i say doesn't really exist the name see how that says hint name the name of the actual file that's produced",
    "start": "1344720",
    "end": "1350640"
  },
  {
    "text": "has a couple of goods in it so it's not going to clash with anything you can you know well you can't create the same",
    "start": "1350640",
    "end": "1357280"
  },
  {
    "text": "file name in the same generator by calling ad source but you don't have to worry about conflicts",
    "start": "1357280",
    "end": "1362480"
  },
  {
    "text": "like it's not real but essentially that's it that's all you do to generate code and if you use that as a source generator",
    "start": "1362480",
    "end": "1369919"
  },
  {
    "text": "then your real project will be able to access a class called foo do nothing with it",
    "start": "1369919",
    "end": "1376240"
  },
  {
    "text": "um all right so some of the things you want to do with your source areas and this i'm just going to whip through these slides really quickly because",
    "start": "1376240",
    "end": "1382640"
  },
  {
    "text": "i'll show you in a more realistic scenario so reading syntax the",
    "start": "1382640",
    "end": "1390240"
  },
  {
    "text": "if you're doing uh anything about say removing runtime reflection or generating you know automating code",
    "start": "1390240",
    "end": "1396240"
  },
  {
    "text": "you probably want to read the source code of the project that is using your source journal um and so",
    "start": "1396240",
    "end": "1404000"
  },
  {
    "text": "the way you do that is with the roslin api there's lots of great talks and blog posts and all sorts of things on how to do",
    "start": "1404000",
    "end": "1410559"
  },
  {
    "text": "that with the relevant api i'm not going to go into it but just as a quick tips there's a couple of cool tools",
    "start": "1410559",
    "end": "1416960"
  },
  {
    "text": "that i recommend so the syntax visualizer is that picture on the right hand side",
    "start": "1416960",
    "end": "1422880"
  },
  {
    "text": "it's built into visual studio if you tick on the optional compiler sdk component in the installer",
    "start": "1422880",
    "end": "1430320"
  },
  {
    "text": "and as you're clicking around your c sharp code in vs that's going to show you what the syntax",
    "start": "1430320",
    "end": "1436799"
  },
  {
    "text": "tree looks like for that spot in the code and this is really useful because",
    "start": "1436799",
    "end": "1441919"
  },
  {
    "text": "as your you start to inspect the code you have to know how to how to do that",
    "start": "1441919",
    "end": "1447360"
  },
  {
    "text": "essentially right you have to know which bits to pull out um so this this syntax tree here",
    "start": "1447360",
    "end": "1453840"
  },
  {
    "text": "excuse me um this is for a simple this bit of code here this main",
    "start": "1453840",
    "end": "1460640"
  },
  {
    "text": "and so you can see we have a namespace we have a class declaration uh we have an attribute list which may",
    "start": "1460640",
    "end": "1466159"
  },
  {
    "text": "or may not be empty there's keywords there's all sorts of but the the syntax tree in general as i said",
    "start": "1466159",
    "end": "1473840"
  },
  {
    "text": "before is really detailed so having a tool to let you inspect what is in the syntax tree is",
    "start": "1473840",
    "end": "1479039"
  },
  {
    "text": "super useful um if you don't have vs so you don't want to use it for this",
    "start": "1479039",
    "end": "1484159"
  },
  {
    "text": "sharp lab is a website that has the exact same feature basically shows you the syntax tree of",
    "start": "1484159",
    "end": "1489760"
  },
  {
    "text": "any code you write um job lab in general is awesome and does some other things that are great too um but that's another quick way to see",
    "start": "1489760",
    "end": "1497279"
  },
  {
    "text": "the uh the syntax tree so that you kind of you need to know what you're looking for",
    "start": "1497279",
    "end": "1502960"
  },
  {
    "text": "essentially so uh let's say you were looking for",
    "start": "1502960",
    "end": "1508159"
  },
  {
    "text": "every method defined and you wanted to do something with it well you're going to be looking for these",
    "start": "1508159",
    "end": "1514000"
  },
  {
    "text": "method declarations but of course they're inside class declarations and they're inside namespace declarations",
    "start": "1514000",
    "end": "1519360"
  },
  {
    "text": "and it gets kind of complex as you sort of drill in and there's lots of options around",
    "start": "1519360",
    "end": "1526240"
  },
  {
    "text": "things you could drill into and there's lots of casting you often need to do so a method declaration might have a",
    "start": "1526240",
    "end": "1532320"
  },
  {
    "text": "body but it also might have an expression body and those are two different things so uh",
    "start": "1532320",
    "end": "1537360"
  },
  {
    "text": "being able to just sort of poke around the syntax trees is really useful and that's actually what i've got as the",
    "start": "1537360",
    "end": "1542960"
  },
  {
    "text": "third point there trial and error um by far and away the biggest uh or the most useful tool that i",
    "start": "1542960",
    "end": "1548480"
  },
  {
    "text": "use for this sort of thing is the debugger inside vs because if i get any kind of syntax node",
    "start": "1548480",
    "end": "1554240"
  },
  {
    "text": "i can just look at it in the watch window and i can start to drill into it super useful and then reading",
    "start": "1554240",
    "end": "1561120"
  },
  {
    "text": "symbols is the other side of looking at code so syntax is what the code looks like in the c",
    "start": "1561120",
    "end": "1567840"
  },
  {
    "text": "sharp and then symbols is that meaning that the compiler adds the compilation adds",
    "start": "1567840",
    "end": "1573360"
  },
  {
    "text": "so this is where you find out what types things are etcetera and there's a couple of sort of hints",
    "start": "1573360",
    "end": "1578720"
  },
  {
    "text": "here um just very quickly so there's something called the global namespace",
    "start": "1578720",
    "end": "1584080"
  },
  {
    "text": "this has everything that the compiler or everything the compilation needs to",
    "start": "1584080",
    "end": "1590400"
  },
  {
    "text": "compile your code so that includes every reference dependency everything in the world this",
    "start": "1590400",
    "end": "1595520"
  },
  {
    "text": "is the entire world as far as the compiler is concerned so if you want to pull any information about the code you're looking at",
    "start": "1595520",
    "end": "1602159"
  },
  {
    "text": "it will be in the global namespace guaranteed because if it's not there then the code doesn't compile get typed",
    "start": "1602159",
    "end": "1608799"
  },
  {
    "text": "by metadata name is the sort of shortcut for reading that info this is where you pass into that",
    "start": "1608799",
    "end": "1614159"
  },
  {
    "text": "method system.string and it gives you back the type for system.string this is useful if you want to find",
    "start": "1614159",
    "end": "1619919"
  },
  {
    "text": "things tagged with an attribute you need a reference to the type of the attribute so you just put in that namespace and",
    "start": "1619919",
    "end": "1625440"
  },
  {
    "text": "away you go get semantic model is how you get the",
    "start": "1625440",
    "end": "1631520"
  },
  {
    "text": "uh essentially the symbol information for this block of syntax that you have so there's always these two worlds of",
    "start": "1631520",
    "end": "1637919"
  },
  {
    "text": "syntax and symbols and getsematic model is how you sort of leap from one to the other",
    "start": "1637919",
    "end": "1643679"
  },
  {
    "text": "this is where you say hey i found this method declaration great give me the semantic model for that so i",
    "start": "1643679",
    "end": "1649279"
  },
  {
    "text": "can start to see what types it returns what types of parameters does it have etc",
    "start": "1649279",
    "end": "1654480"
  },
  {
    "text": "you then call get symbol info on the semantic model to find out the type information and then the syntax visualizer does have",
    "start": "1654480",
    "end": "1661200"
  },
  {
    "text": "some symbol stuff built in it doesn't work very well although there was a pr",
    "start": "1661200",
    "end": "1666480"
  },
  {
    "text": "a couple of weeks ago to hopefully fix some of the issues but again trial and error works really",
    "start": "1666480",
    "end": "1671679"
  },
  {
    "text": "well here if you've got some bit of syntax call get symbol info on it you'll get an i",
    "start": "1671679",
    "end": "1677120"
  },
  {
    "text": "symbol and then just look at that in the watch window because it could be an eye type symbol or a namespace symbol or an i method symbol",
    "start": "1677120",
    "end": "1684000"
  },
  {
    "text": "whatever it is but the debugger you know the watch window will show you that info you can drill into the properties you",
    "start": "1684000",
    "end": "1689520"
  },
  {
    "text": "can just start to get a feel and it is it's relatively straightforward once you",
    "start": "1689520",
    "end": "1694559"
  },
  {
    "text": "start to do this because you're familiar presumably with the code that is being analyzed so",
    "start": "1694559",
    "end": "1702399"
  },
  {
    "text": "yeah and then generating syntax this is where",
    "start": "1702399",
    "end": "1709279"
  },
  {
    "text": "things get interesting because this is where it can be frustrating that you have to use strings",
    "start": "1709279",
    "end": "1714960"
  },
  {
    "text": "but the flip side of that is using uh any kind of higher level thing well",
    "start": "1714960",
    "end": "1721520"
  },
  {
    "text": "the higher level classes that the compiler gives you are syntax notes and so on the left there",
    "start": "1721520",
    "end": "1727440"
  },
  {
    "text": "excuse me which maybe you can't even see because it's so tiny because there's so much to it those that is the code necessary to",
    "start": "1727440",
    "end": "1734399"
  },
  {
    "text": "produce that code on the right hand side this all comes from a website called ross and",
    "start": "1734399",
    "end": "1739440"
  },
  {
    "text": "quota link there down the bottom so with roslyn quota you put in that block of code on the right",
    "start": "1739440",
    "end": "1744720"
  },
  {
    "text": "you click generate and it creates you this code that's on the left so that's easy enough to do and if you",
    "start": "1744720",
    "end": "1750320"
  },
  {
    "text": "want to use a higher level concept you can do that but as you can see it's very detailed",
    "start": "1750320",
    "end": "1756880"
  },
  {
    "text": "that actually on the left it even leaves out some stuff that is not necessary so it actually can get even longer if",
    "start": "1756880",
    "end": "1762720"
  },
  {
    "text": "you include everything but the trap here so the very last line of this",
    "start": "1762720",
    "end": "1767919"
  },
  {
    "text": "little snippet which maybe you can't see but maybe you can it says normalize white space um and that's calling a method in the in",
    "start": "1767919",
    "end": "1774720"
  },
  {
    "text": "roslyn that basically says hey here's some code here's some syntax nodes i've generated",
    "start": "1774720",
    "end": "1779919"
  },
  {
    "text": "now make them you know human readable the trap is if you don't do that normalized white space",
    "start": "1779919",
    "end": "1786799"
  },
  {
    "text": "this is what that exact same code produces without the normalized white space code and as you can see this is not valency",
    "start": "1786799",
    "end": "1792799"
  },
  {
    "text": "sharp so this is where if you were providing a syntax tree to the compiler directly you could run",
    "start": "1792799",
    "end": "1799360"
  },
  {
    "text": "into all sorts of problems because you could give it invalid code",
    "start": "1799360",
    "end": "1804960"
  },
  {
    "text": "so anyway that's just something to keep in mind you can use this if you want um it really just depends how",
    "start": "1804960",
    "end": "1810320"
  },
  {
    "text": "complicated your generator gets and there is a question in the slack what",
    "start": "1810320",
    "end": "1815760"
  },
  {
    "text": "are the real use case scenarios i will run through a few of those in just a second a good question",
    "start": "1815760",
    "end": "1823520"
  },
  {
    "text": "and then debugging a source generally i think this is maybe the last slide before we just chat a bit um",
    "start": "1823520",
    "end": "1830320"
  },
  {
    "text": "debugging the source genre is a little bit of a challenge so um if you want to debug your source",
    "start": "1830320",
    "end": "1837039"
  },
  {
    "text": "generator in a real project that you're really using then you can put in a call to debugger.launch in the source generator",
    "start": "1837039",
    "end": "1844559"
  },
  {
    "text": "that will pop up a window and say hey which visual studio do you want to use and it'll and it does all work and you can put",
    "start": "1844559",
    "end": "1850559"
  },
  {
    "text": "breakpoints in and everything worked great the issue is that that happens every time there's a compile",
    "start": "1850559",
    "end": "1856799"
  },
  {
    "text": "and with visual studio every time you type on the keyboard it's going to be compiling your code so",
    "start": "1856799",
    "end": "1862399"
  },
  {
    "text": "if it gets far enough to run your generator you might end up getting flooded with these dialogues so there's some edges there there is a",
    "start": "1862399",
    "end": "1869919"
  },
  {
    "text": "class in rollson called generator driver which is designed for running source generators and so you can use that to create a test",
    "start": "1869919",
    "end": "1876559"
  },
  {
    "text": "app or unit tests personally i find that to be the way to go so there's a couple of links there so",
    "start": "1876559",
    "end": "1883519"
  },
  {
    "text": "sourcegen.dev i will show you in a minute but that's essentially a tool i wrote just to try",
    "start": "1883519",
    "end": "1889440"
  },
  {
    "text": "to make this stuff a bit easier to reason about really quickly when you're just starting out",
    "start": "1889440",
    "end": "1895919"
  },
  {
    "text": "or when you're making minor changes there's also a link there to a source generator template",
    "start": "1895919",
    "end": "1901120"
  },
  {
    "text": "repo that i made and it's essentially a very simple source generator a very",
    "start": "1901120",
    "end": "1906159"
  },
  {
    "text": "simple unit test project for the source generator a simple console app that when you run it it just",
    "start": "1906159",
    "end": "1911679"
  },
  {
    "text": "spits out the code the source generator generated and a simple app that uses the source generator as a",
    "start": "1911679",
    "end": "1917440"
  },
  {
    "text": "generator so it's basically all four types of projects you could want um and so that's sort of what i do",
    "start": "1917440",
    "end": "1922720"
  },
  {
    "text": "as my starting point i will grab that repo copy it you know duplicate it rename it to whatever it is",
    "start": "1922720",
    "end": "1928640"
  },
  {
    "text": "and that's where i start working on things and that way you can press f5 and debug as normal",
    "start": "1928640",
    "end": "1934640"
  },
  {
    "text": "and then uh to task by chris is the final link there so chris is the the compilative who actually wrote",
    "start": "1934640",
    "end": "1941360"
  },
  {
    "text": "pretty much all of the source generated infrastructure in the compiler kititas is his project for essentially",
    "start": "1941360",
    "end": "1948240"
  },
  {
    "text": "allowing f5 debugging of source generators really easily it's a it's a net sdk and global tool",
    "start": "1948240",
    "end": "1954880"
  },
  {
    "text": "it's very tricky but really really clever solution to the problem",
    "start": "1954880",
    "end": "1960640"
  },
  {
    "text": "i think that's it so let's whip across to sourcegen.dev",
    "start": "1960640",
    "end": "1967279"
  },
  {
    "text": "so the question was is it more is it more productivity enhancements rather than performance improvements so",
    "start": "1967279",
    "end": "1973519"
  },
  {
    "text": "that's a really good question and i can hopefully answer all of these things because it can be both or it can be",
    "start": "1973519",
    "end": "1979120"
  },
  {
    "text": "everything so let me jump into one example here so this is sourcegen.dev",
    "start": "1979120",
    "end": "1985440"
  },
  {
    "text": "i built this because i was getting frustrated at using the trying to write source",
    "start": "1985440",
    "end": "1990799"
  },
  {
    "text": "trainers in front of reasoning about them and i built this i'm very glad to say that it's",
    "start": "1990799",
    "end": "1996159"
  },
  {
    "text": "almost completely unnecessary now because visual studio has caught up which is great because i don't want to",
    "start": "1996159",
    "end": "2001679"
  },
  {
    "text": "pay to renew the domain name but it is just sourcegen.dev if you want to muck around",
    "start": "2001679",
    "end": "2007039"
  },
  {
    "text": "if you want to go there now and play along that's fine so what this is as you can see is four",
    "start": "2007039",
    "end": "2013120"
  },
  {
    "text": "text boxes i am not the greatest web designer in the world i freely offend it the theory",
    "start": "2013120",
    "end": "2018559"
  },
  {
    "text": "is in this box on the top left is my program code this is the code of my application",
    "start": "2018559",
    "end": "2023919"
  },
  {
    "text": "or you know whatever it is this is the thing that's going to use the generator this is the thing",
    "start": "2023919",
    "end": "2029679"
  },
  {
    "text": "that's going to receive the generated code if you like on the top right we have the text of the",
    "start": "2029679",
    "end": "2034880"
  },
  {
    "text": "generator itself so this is what does the work this is going to look through my code and",
    "start": "2034880",
    "end": "2040000"
  },
  {
    "text": "analyze it etc this then generates the output that is in the bottom right this is",
    "start": "2040000",
    "end": "2046080"
  },
  {
    "text": "what this is the code that was generated so you can see that here there's an attribute and if we scroll up here you",
    "start": "2046080",
    "end": "2051520"
  },
  {
    "text": "can see this is not an attribute the generated output and the program code are then the two",
    "start": "2051520",
    "end": "2058320"
  },
  {
    "text": "things that are combined together and then this is the output of running the program so that's basically how this works so",
    "start": "2058320",
    "end": "2065679"
  },
  {
    "text": "back to the question thank you muhammad this would be an example of a productivity enhancement so this is an",
    "start": "2065679",
    "end": "2072320"
  },
  {
    "text": "auto notify sample this is not written by me this was written by chris on the compiler team the theory",
    "start": "2072320",
    "end": "2078960"
  },
  {
    "text": "here is so in very often in winforms or in wpf",
    "start": "2078960",
    "end": "2084000"
  },
  {
    "text": "a lot of desktop apps you want to implement i notify property changed i notify property changed",
    "start": "2084000",
    "end": "2089520"
  },
  {
    "text": "is a very simple interface that has a property changed event so every time a property is changed you",
    "start": "2089520",
    "end": "2094638"
  },
  {
    "text": "want to fire an event so someone listening to that event can know when things about your class change",
    "start": "2094639",
    "end": "2100320"
  },
  {
    "text": "and it gets kind of tedious because you can't use so for example uh let me just turn off auto refresh so",
    "start": "2100320",
    "end": "2106640"
  },
  {
    "text": "it doesn't compile as i type but so if i type in here and i say public screen",
    "start": "2106640",
    "end": "2112079"
  },
  {
    "text": "name i'm using an auto property here so i can't easily implement i notify",
    "start": "2112079",
    "end": "2118320"
  },
  {
    "text": "property change because i need to basically put some code in the setup if i expand this setter out and i can",
    "start": "2118320",
    "end": "2124800"
  },
  {
    "text": "now you know fire my own property change event well that's great but now i need a field to store my property in and i have to",
    "start": "2124800",
    "end": "2131119"
  },
  {
    "text": "convert this from a auto property to a full property and so it it sort of adds this cost of um you know having to write a bunch",
    "start": "2131119",
    "end": "2139200"
  },
  {
    "text": "more code which is not very exciting code it's probably not going to be buggy code but you never know",
    "start": "2139200",
    "end": "2144240"
  },
  {
    "text": "right so this is where as a productivity enhancement what you can do with this generator is you define a field",
    "start": "2144240",
    "end": "2151280"
  },
  {
    "text": "and you just put this attribute on you say hello i'd like to be notified when this field change and what happens is down here if we look",
    "start": "2151280",
    "end": "2158560"
  },
  {
    "text": "the source runner is generating the full property for this field returning the value and",
    "start": "2158560",
    "end": "2164640"
  },
  {
    "text": "obviously this we've already defined the field so this one doesn't have to and then when the field is set we can",
    "start": "2164640",
    "end": "2170240"
  },
  {
    "text": "see it just fires this property changed event so this is a really simple example where",
    "start": "2170240",
    "end": "2176079"
  },
  {
    "text": "without any risk of you know typos or anything else we can implement i notify property",
    "start": "2176079",
    "end": "2182000"
  },
  {
    "text": "changed at almost no effort and if we scroll down in this program a bit here you can see here",
    "start": "2182000",
    "end": "2187520"
  },
  {
    "text": "we're accessing that text property from that view model the text property doesn't exist right it",
    "start": "2187520",
    "end": "2194240"
  },
  {
    "text": "is being generated so that's where this is a partial class we are generating the other half of this class so this is a huge property boost",
    "start": "2194240",
    "end": "2201760"
  },
  {
    "text": "you can also do cool things like here we're specifying the property name of this property should be count so even",
    "start": "2201760",
    "end": "2207280"
  },
  {
    "text": "though the field is amount if we scroll down in our generated output we can see the count property",
    "start": "2207280",
    "end": "2212800"
  },
  {
    "text": "returns the amount uh field so you can you know tweak and adjust the",
    "start": "2212800",
    "end": "2218960"
  },
  {
    "text": "generator now obviously that's a feature of this generator not of source generators in general but these are the types of things you",
    "start": "2218960",
    "end": "2224560"
  },
  {
    "text": "can do and then this runs and so if we comment",
    "start": "2224560",
    "end": "2229920"
  },
  {
    "text": "out this order notified property uh oops i turned off auto refresh so now",
    "start": "2229920",
    "end": "2235119"
  },
  {
    "text": "what's going to happen is our program's not going to build so this is",
    "start": "2235119",
    "end": "2240240"
  },
  {
    "text": "i would still class this as a productivity enhancement what's happened here is you know as a developer i've left off this",
    "start": "2240240",
    "end": "2245599"
  },
  {
    "text": "attribute you can see the generator has still worked it's still run my generation it's still generated my",
    "start": "2245599",
    "end": "2252160"
  },
  {
    "text": "account property but it hasn't generated any other property so here this line of code here this",
    "start": "2252160",
    "end": "2257920"
  },
  {
    "text": "vm.text is line 24 right this is where the error is because there is no text property",
    "start": "2257920",
    "end": "2263839"
  },
  {
    "text": "i didn't define it and i didn't define the attribute that tells the source generator to find it so i still can't i mean this one's a",
    "start": "2263839",
    "end": "2270240"
  },
  {
    "text": "little bit complicated convoluted i should say but i still count this as a uh productivity enhancement because this",
    "start": "2270240",
    "end": "2276160"
  },
  {
    "text": "is ensuring you don't forget essentially right you can imagine a system that worked at runtime looking for these attributes",
    "start": "2276160",
    "end": "2283119"
  },
  {
    "text": "if you forget an attribute off one property and then someone tries to use that mechanism in some way that would have to",
    "start": "2283119",
    "end": "2288960"
  },
  {
    "text": "be an exception at runtime so at runtime your app's going to blow up and say hey someone some developer",
    "start": "2288960",
    "end": "2294240"
  },
  {
    "text": "forgot to add this line of code source generators i get to do that validation at compile time so i",
    "start": "2294240",
    "end": "2301359"
  },
  {
    "text": "get to break the build which means you can't forget um",
    "start": "2301359",
    "end": "2307119"
  },
  {
    "text": "before we switch over to visual studio one last thing is or another example is this uh this is a",
    "start": "2307280",
    "end": "2313040"
  },
  {
    "text": "di generator that i wrote just for a side project uh so it's only for my needs",
    "start": "2313040",
    "end": "2318480"
  },
  {
    "text": "it's not very full-featured but i think it's an interesting it's an interesting concept and it's an interesting way to",
    "start": "2318480",
    "end": "2325040"
  },
  {
    "text": "look at how you have to think to write a source journal or oh i need to turn off my refresh not how",
    "start": "2325040",
    "end": "2332079"
  },
  {
    "text": "you have to think but you know what you can do so what this is is a service locator right",
    "start": "2332079",
    "end": "2339440"
  },
  {
    "text": "normally with di you would build up a container a di container you would say hey when someone asks for ifu right down",
    "start": "2339440",
    "end": "2347599"
  },
  {
    "text": "here we have our interfaces when someone asks for an aifu use a foo right you would add a scope to around transient right singleton whatever you",
    "start": "2347599",
    "end": "2354079"
  },
  {
    "text": "do the way this works is this source generator sees that you want to call getservice",
    "start": "2354079",
    "end": "2361920"
  },
  {
    "text": "and pass in an ifoo and as you can see down here in the generated code whenever you call get service this",
    "start": "2361920",
    "end": "2368160"
  },
  {
    "text": "returns my through class right i think this is a really cool example of",
    "start": "2368160",
    "end": "2375119"
  },
  {
    "text": "how source your owners can well this is performance",
    "start": "2375119",
    "end": "2380880"
  },
  {
    "text": "more on the performance side for me but source runners can produce the most minimal code possible",
    "start": "2380880",
    "end": "2387760"
  },
  {
    "text": "so if you were writing a service locator you would presumably want to check and say right well what type do we want",
    "start": "2387760",
    "end": "2393680"
  },
  {
    "text": "to construct okay that one and i through right well then i will construct a form but you notice there's no if statements",
    "start": "2393680",
    "end": "2399040"
  },
  {
    "text": "here that's because this source trainer knows what my code looks like and it knows that i'm only",
    "start": "2399040",
    "end": "2404960"
  },
  {
    "text": "ever calling get service asking for an ifoo so there's no need for any right if i ask for something else so",
    "start": "2404960",
    "end": "2412079"
  },
  {
    "text": "here i'm going to ask for an ibar and i refresh my source channel will now",
    "start": "2412079",
    "end": "2417520"
  },
  {
    "text": "see two calls and so now it knows to put in an if statement so this is this is definitely performance but i",
    "start": "2417520",
    "end": "2423760"
  },
  {
    "text": "think this is also productivity because in essence i'm not having to",
    "start": "2423760",
    "end": "2428880"
  },
  {
    "text": "write this library code that that sort of has to cater for all possible cases i can write",
    "start": "2428880",
    "end": "2435839"
  },
  {
    "text": "or i can generate the simplest code possible so obviously there's going to be some performance",
    "start": "2435839",
    "end": "2441280"
  },
  {
    "text": "wins there but i think it's i think it's also a little bit of both um and so this one",
    "start": "2441280",
    "end": "2446480"
  },
  {
    "text": "now we're asking for two different types so now it does have to do an if so it checks if you want an i4 it's going to give you the foo",
    "start": "2446480",
    "end": "2452079"
  },
  {
    "text": "but again there's no other if here we know that there's only two types being asked for so we can just go ahead and",
    "start": "2452079",
    "end": "2457280"
  },
  {
    "text": "give you the bar this time it also generated lazies because otherwise it would be slightly inefficient if when you ask for a foo",
    "start": "2457280",
    "end": "2463599"
  },
  {
    "text": "you'd initialize both fields right and you can get down into the weeds and control that stuff as much or as little",
    "start": "2463599",
    "end": "2469200"
  },
  {
    "text": "as you like in fact i think i yeah i put in i put in a couple of little uh little",
    "start": "2469200",
    "end": "2476560"
  },
  {
    "text": "billions here to control this so i can turn off this and then now it just constructs objects",
    "start": "2476560",
    "end": "2481760"
  },
  {
    "text": "and if that's better for your needs then great do that you can control exactly what this does because of course you're",
    "start": "2481760",
    "end": "2486880"
  },
  {
    "text": "authoring this generator um if i what else can i do i can make",
    "start": "2486880",
    "end": "2492720"
  },
  {
    "text": "this say that it's transient so every time someone asks for a few a foo i want a new one every time and so",
    "start": "2492720",
    "end": "2498960"
  },
  {
    "text": "this now generates just a constructor call right so it's the minimal code necessary",
    "start": "2498960",
    "end": "2504079"
  },
  {
    "text": "to do exactly the job that my consuming code needs um",
    "start": "2504079",
    "end": "2509760"
  },
  {
    "text": "we can also get again we can get build errors right so now i'm asking for an i ibaz and there is nothing that",
    "start": "2509760",
    "end": "2515200"
  },
  {
    "text": "implements this so again instead of a runtime exception because",
    "start": "2515200",
    "end": "2520800"
  },
  {
    "text": "hey you haven't filled in the container properly or you forgot to wire this up or you forgot to reference this dll",
    "start": "2520800",
    "end": "2526240"
  },
  {
    "text": "i get a build time failure that says this was not going to work i don't know when it was going to fail but it was definitely going to fail at",
    "start": "2526240",
    "end": "2532000"
  },
  {
    "text": "runtime so it doesn't even let you get that far which i think is a super powerful thing um so that's the di example",
    "start": "2532000",
    "end": "2541760"
  },
  {
    "text": "let's go over to visual studio for a minute so yeah if there's any questions on that",
    "start": "2541760",
    "end": "2549119"
  },
  {
    "text": "or anything else please feel free to ask what i thought i'd do now is just sort of run through a little",
    "start": "2549119",
    "end": "2555920"
  },
  {
    "text": "bit end to end of a source generator that i wrote kind of",
    "start": "2555920",
    "end": "2560960"
  },
  {
    "text": "still working but the pr still open to improve i guess in this case this is",
    "start": "2560960",
    "end": "2567920"
  },
  {
    "text": "this is definitely performance gain although realistically it's probably about the same",
    "start": "2567920",
    "end": "2573599"
  },
  {
    "text": "performance wise as the existing solution most cases this is one that i would definitely",
    "start": "2573599",
    "end": "2578640"
  },
  {
    "text": "class as a productivity gain but this one's a good one i think for um",
    "start": "2578640",
    "end": "2584880"
  },
  {
    "text": "this is essentially removing technical debt in a way um so the background here is the",
    "start": "2584880",
    "end": "2591920"
  },
  {
    "text": "winforms project has or winforms in general has lots of public api",
    "start": "2591920",
    "end": "2598079"
  },
  {
    "text": "that takes in enums right enums work really well in the property grid in the designer and so just historically they",
    "start": "2598079",
    "end": "2603280"
  },
  {
    "text": "were built up i guess and so there's a lot of public api that take enums which is great in theory",
    "start": "2603280",
    "end": "2609440"
  },
  {
    "text": "but as i suspect you know in c sharp you can pass any old integer",
    "start": "2609440",
    "end": "2615920"
  },
  {
    "text": "to any enum and the compiler will let you you just cast the hint and away you go",
    "start": "2615920",
    "end": "2621200"
  },
  {
    "text": "and enum is not a strict set of values at the moment um and so there was a",
    "start": "2621200",
    "end": "2626720"
  },
  {
    "text": "bunch of validation code in winforms to ensure that all of the values passed to all this public api were correct",
    "start": "2626720",
    "end": "2633280"
  },
  {
    "text": "so this is uh this is the actual validation code from the winforms repo",
    "start": "2633280",
    "end": "2638800"
  },
  {
    "text": "and so you can see this is an unvalid takes an enum takes in a value the current value being set",
    "start": "2638800",
    "end": "2644640"
  },
  {
    "text": "takes in a minimum maximum value this is the the bounds of that enum if you like",
    "start": "2644640",
    "end": "2649920"
  },
  {
    "text": "the check itself for validity is very straightforward it's just less than or equal to or you know",
    "start": "2649920",
    "end": "2655680"
  },
  {
    "text": "greater than or equal to and then in debug there's some code here i'll talk about that in a second",
    "start": "2655680",
    "end": "2662560"
  },
  {
    "text": "there was a bunch of other overloads for this so they have a bunch of enums where it's not a flag xenon but the values are",
    "start": "2662560",
    "end": "2670480"
  },
  {
    "text": "powers of two so there's this max number of bits on to validate that at the end of casting you should only have one bit",
    "start": "2670480",
    "end": "2676480"
  },
  {
    "text": "on so this does a bit more code here this bit operations.pop count still probably fast but that's okay",
    "start": "2676480",
    "end": "2683839"
  },
  {
    "text": "when it's a flags enum just use the mask that's okay we just have to pass this in",
    "start": "2683839",
    "end": "2689200"
  },
  {
    "text": "when it's a non-sequentially number things get a bit worse so enum.getvalues is using reflection",
    "start": "2689200",
    "end": "2694800"
  },
  {
    "text": "that's not ideal um it does only happen in debug mode though so maybe it's okay",
    "start": "2694800",
    "end": "2700480"
  },
  {
    "text": "but now we've got to loop through and check all these things this is starting to get a bit worse right and then if you look at all these",
    "start": "2700480",
    "end": "2706400"
  },
  {
    "text": "hash if debug things what these do if we go to them",
    "start": "2706400",
    "end": "2711440"
  },
  {
    "text": "is these do heaps more validation again only in debug mode",
    "start": "2711440",
    "end": "2716480"
  },
  {
    "text": "but all of these things do a bunch of validation because the way you have to call these enum valid methods is you pass in",
    "start": "2716480",
    "end": "2724319"
  },
  {
    "text": "the current value you're validating but then you have to pass in all of the possible values for this e number you",
    "start": "2724319",
    "end": "2729680"
  },
  {
    "text": "have to pass in all of the possible values for this masked up or you have to pass in",
    "start": "2729680",
    "end": "2735280"
  },
  {
    "text": "what is the minimum and maximum value for this enum so this is this huge technical bet where every time you add a",
    "start": "2735280",
    "end": "2740960"
  },
  {
    "text": "value to an enum you have to remember to update all these validation calls if you don't there's now this debug code that's going to add",
    "start": "2740960",
    "end": "2748000"
  },
  {
    "text": "validation that's going to throw an exception at debug time if you're running in debug of course and",
    "start": "2748000",
    "end": "2753839"
  },
  {
    "text": "then it's actually funny because the complexity of the debug validation there's also this maximum case size here",
    "start": "2753839",
    "end": "2760160"
  },
  {
    "text": "where it caches some of the debug information but eventually that cache gets too big and so there's all these layers and layers of",
    "start": "2760160",
    "end": "2765280"
  },
  {
    "text": "debt so what we can do though is we can completely replace that",
    "start": "2765280",
    "end": "2770880"
  },
  {
    "text": "so what i did after talking to a friend of mine on the winforms team because they got essentially they got a pr to simplify all their enum validation",
    "start": "2770880",
    "end": "2778480"
  },
  {
    "text": "code and it simplified it by not calling those helper methods and just doing that little simple math",
    "start": "2778480",
    "end": "2785119"
  },
  {
    "text": "in line which was great in theory but of course lost all of the validation to ensure that it was kept up to date",
    "start": "2785119",
    "end": "2791599"
  },
  {
    "text": "so i was talking a friend of mine on the team and i said well you know we can do a source journal for this so",
    "start": "2791599",
    "end": "2797200"
  },
  {
    "text": "this this is the new call to validate all you do is pass in this inner this",
    "start": "2797200",
    "end": "2802880"
  },
  {
    "text": "will do all of the validation that you used to do so the reason i'm in visual studio for",
    "start": "2802880",
    "end": "2808800"
  },
  {
    "text": "this is to show off some of the features of visual studio i can actually press f12 and i can go to definition",
    "start": "2808800",
    "end": "2814560"
  },
  {
    "text": "on this validate method and let me just put it side by side with my code",
    "start": "2814560",
    "end": "2820000"
  },
  {
    "text": "i missed oh no oh no i think webex is not",
    "start": "2820000",
    "end": "2827200"
  },
  {
    "text": "liking that okay we're going to leave it side by side with the code there um and actually can you see that",
    "start": "2827200",
    "end": "2834319"
  },
  {
    "text": "that's oddly enormous there we go okay so so this is the validate method",
    "start": "2834319",
    "end": "2840640"
  },
  {
    "text": "that is generated for this simple enum case which is this one over here and as you can see the actual validation",
    "start": "2840640",
    "end": "2847520"
  },
  {
    "text": "is just as simple as it was before it's just a minimum maximum the difference is we're not passing in",
    "start": "2847520",
    "end": "2853599"
  },
  {
    "text": "the minimum maximum anymore this just knows uh let me see if i can get this to work",
    "start": "2853599",
    "end": "2859520"
  },
  {
    "text": "okay cool so watch what happens when i add another value to this this enum",
    "start": "2859520",
    "end": "2866640"
  },
  {
    "text": "i type a comma nothing happens i'm going to type in the word third but look at this one and watch",
    "start": "2866640",
    "end": "2872480"
  },
  {
    "text": "what happens as soon as i type t the compiler is now generating my source",
    "start": "2872480",
    "end": "2877839"
  },
  {
    "text": "again because of course it produced a new compilation so even though i haven't finished typing the name of this enum",
    "start": "2877839",
    "end": "2883440"
  },
  {
    "text": "which i will it's already updated this to say two so gone is me having to pass in what is",
    "start": "2883440",
    "end": "2889920"
  },
  {
    "text": "the maximum value for this enum my source generator knows because it's looking at my code and it's getting the",
    "start": "2889920",
    "end": "2895839"
  },
  {
    "text": "symbol information and it's able to just output the right values",
    "start": "2895839",
    "end": "2901838"
  },
  {
    "text": "this example here with this complex enum type you can see these ones aren't all you know neatly lined up so",
    "start": "2902079",
    "end": "2908000"
  },
  {
    "text": "this is doing uh you know between three and four inclusive and then between seven and nine inclusive",
    "start": "2908000",
    "end": "2913119"
  },
  {
    "text": "if i change this to a 14 this generation now we're never going to validate against 3",
    "start": "2913119",
    "end": "2918160"
  },
  {
    "text": "then we're going to go between 7 and 9 and then we'll go to 14. i can even change another one to 14 and",
    "start": "2918160",
    "end": "2924800"
  },
  {
    "text": "it's going to know not to duplicate those values it's changed this seven to an eight right it can be super responsive so we get this",
    "start": "2924800",
    "end": "2931280"
  },
  {
    "text": "best of both worlds where our enum validation is now super fast this is you know",
    "start": "2931280",
    "end": "2936559"
  },
  {
    "text": "basically as fast as it can be is simple integer comparisons i guess although feel free to optimize this code",
    "start": "2936559",
    "end": "2942720"
  },
  {
    "text": "if you want um but we also have these really simple call sites",
    "start": "2942720",
    "end": "2948480"
  },
  {
    "text": "we don't have to do any uh you know we don't have to help this by passing in any extra information there's no",
    "start": "2948480",
    "end": "2953760"
  },
  {
    "text": "technical debt being added because every time this changes we know our generator is going to run",
    "start": "2953760",
    "end": "2959200"
  },
  {
    "text": "you cannot change right i cannot change this enum without the generator running because",
    "start": "2959200",
    "end": "2964480"
  },
  {
    "text": "the generator is run by the compiler which is super powerful",
    "start": "2964480",
    "end": "2970640"
  },
  {
    "text": "so let me close this down and let's just quickly have a look at the",
    "start": "2970640",
    "end": "2976079"
  },
  {
    "text": "search engines so as i said we implement our source",
    "start": "2976079",
    "end": "2981119"
  },
  {
    "text": "generator that's fine the way we find the code we want to",
    "start": "2981119",
    "end": "2986640"
  },
  {
    "text": "sort of trigger off in this case calls to that validate method is we use a syntax receiver now this",
    "start": "2986640",
    "end": "2991920"
  },
  {
    "text": "isn't the only way to do it but this is the best because what this means is so we say register for syntax notifications",
    "start": "2991920",
    "end": "2999280"
  },
  {
    "text": "what this means is the compiler we tell the compiler hey i'm interested in knowing about the",
    "start": "2999280",
    "end": "3004880"
  },
  {
    "text": "syntax of this project and every time the compiler sees an item of syntax any item in syntax it will call this",
    "start": "3004880",
    "end": "3011599"
  },
  {
    "text": "method so this is the best way because this means the compiler gets to be efficient",
    "start": "3011599",
    "end": "3017440"
  },
  {
    "text": "right rather than me digging through every single piece of code in the whole project i just say let me know when you see a",
    "start": "3017440",
    "end": "3023520"
  },
  {
    "text": "node and if that node doesn't change then it doesn't need to call me again it knows all these things and so basically what we do is",
    "start": "3023520",
    "end": "3029920"
  },
  {
    "text": "we get every single syntax node comes to us and we just check is this something i'm",
    "start": "3029920",
    "end": "3035599"
  },
  {
    "text": "interested in in this case well i'm interested in method indications that's an invocation",
    "start": "3035599",
    "end": "3040960"
  },
  {
    "text": "expression i want it to be only an invocation of a method called validate",
    "start": "3040960",
    "end": "3047760"
  },
  {
    "text": "only if it's on a class called enum validator or in a validator this is a little bit of",
    "start": "3047760",
    "end": "3054720"
  },
  {
    "text": "the uh sometimes uh annoyance of using the rosin sdk or or rather of using c syntax trees",
    "start": "3054720",
    "end": "3062079"
  },
  {
    "text": "because they're so detailed if you have enum validator.validate or enum validation which is the namespace that",
    "start": "3062079",
    "end": "3068880"
  },
  {
    "text": "individual those are completely different syntax trees and so sometimes this does get annoying you have to allow for",
    "start": "3068880",
    "end": "3074960"
  },
  {
    "text": "for both um there is a higher level of syntax which is called eye operation which sort of takes away some of this",
    "start": "3074960",
    "end": "3080880"
  },
  {
    "text": "pain so there are alternatives but for this simple case i'm just checking both cases",
    "start": "3080880",
    "end": "3086480"
  },
  {
    "text": "both forms and then so basically if i find a method to a call to a method",
    "start": "3086480",
    "end": "3091920"
  },
  {
    "text": "called validate on a class called enum validator that has two arguments and this is",
    "start": "3091920",
    "end": "3097520"
  },
  {
    "text": "really just belt and braces uh i just add this to my list i say hey i think i found a call i think i found",
    "start": "3097520",
    "end": "3103520"
  },
  {
    "text": "an argument to this validate method that i should validate add it to my list",
    "start": "3103520",
    "end": "3108559"
  },
  {
    "text": "so that's that's my finding of syntax essentially the compiler is going to call me it's going to say hey here's a",
    "start": "3108559",
    "end": "3114240"
  },
  {
    "text": "node doughnuts and then when we actually execute the generator in this generator method",
    "start": "3114240",
    "end": "3123040"
  },
  {
    "text": "all i'm going to do is i'm going to go through my arguments that i found so i pull them out of my syntax",
    "start": "3123040",
    "end": "3128480"
  },
  {
    "text": "receivers hey go through my arguments that i found and i just process them and then here",
    "start": "3128480",
    "end": "3133839"
  },
  {
    "text": "i'm basically i'm getting the enum type doing a little bit some validation um",
    "start": "3133839",
    "end": "3139680"
  },
  {
    "text": "i check if it's a flag flag's enum and that's it the way that source generators work best",
    "start": "3139680",
    "end": "3146559"
  },
  {
    "text": "is if you think like you're writing a compiler so the compiler has has phases right we have a pars phase where we build a tree",
    "start": "3146559",
    "end": "3152800"
  },
  {
    "text": "and then we have a compile phase where we process that tree your source generator is best if it can do the same thing so",
    "start": "3152800",
    "end": "3158559"
  },
  {
    "text": "in this case i am building up these enum validation info objects",
    "start": "3158559",
    "end": "3164240"
  },
  {
    "text": "and these validation info objects are the thing that goes through and this method here finds all of the",
    "start": "3164240",
    "end": "3169839"
  },
  {
    "text": "members of my enum so i'm building up all this information but you notice i'm not generating any",
    "start": "3169839",
    "end": "3174880"
  },
  {
    "text": "code yet so after i get if we go oops",
    "start": "3174880",
    "end": "3179920"
  },
  {
    "text": "back up here where are we so this line of code here is basically saying go and build up",
    "start": "3179920",
    "end": "3186480"
  },
  {
    "text": "this this information this library of information about what you're going to need to do and then we process it so firstly if we",
    "start": "3186480",
    "end": "3194000"
  },
  {
    "text": "didn't find any then i'm just outputting a empty stub of a method just so that something is there",
    "start": "3194000",
    "end": "3200319"
  },
  {
    "text": "for intellisense to to key off right so that users have an easier time this is",
    "start": "3200319",
    "end": "3205520"
  },
  {
    "text": "actually optional you don't need this but if we do find something then i call",
    "start": "3205520",
    "end": "3210640"
  },
  {
    "text": "the generate method so i build up all my information then i generate it and then this is",
    "start": "3210640",
    "end": "3215680"
  },
  {
    "text": "where i'm generating and as you can see these are just strings and it's not the nicest looking thing in",
    "start": "3215680",
    "end": "3220960"
  },
  {
    "text": "the world but it's not that hard i don't know maybe it's just me i don't find this that horrible that i want to",
    "start": "3220960",
    "end": "3227280"
  },
  {
    "text": "use some kind of higher level object um object mapping maybe some people do",
    "start": "3227280",
    "end": "3232319"
  },
  {
    "text": "that's fine but all this does we output an xml comment we output our method signature",
    "start": "3232319",
    "end": "3237599"
  },
  {
    "text": "right which has the enum type in it and then we generate our method body and the method body is simply there's",
    "start": "3237599",
    "end": "3243920"
  },
  {
    "text": "two different forms one is for flags one is for non-flags and all these things are outputting is the series of checks",
    "start": "3243920",
    "end": "3250720"
  },
  {
    "text": "so for flags xenons it's just one we we get the total uh you know the total sum of all of the",
    "start": "3250720",
    "end": "3257440"
  },
  {
    "text": "flags and we just validate easy if there's ever a new member added to this enum it's going to appear",
    "start": "3257440",
    "end": "3263119"
  },
  {
    "text": "because it'll be part of this loop which means our total get updated which means our generation gets updated",
    "start": "3263119",
    "end": "3268559"
  },
  {
    "text": "and then for non-flags we just output all those lift statements you saw so each little chunk of this is",
    "start": "3268559",
    "end": "3275520"
  },
  {
    "text": "relatively straightforward this method here is probably the most complicated which is",
    "start": "3275520",
    "end": "3281200"
  },
  {
    "text": "trying to work out the bands so we've got you know one two three seven nine that's trying",
    "start": "3281200",
    "end": "3287760"
  },
  {
    "text": "to work out the bands in the enums this was the most complicated code i wrote and this one was the bit that took the most trial and error",
    "start": "3287760",
    "end": "3294000"
  },
  {
    "text": "the rest of this is pretty straightforward and the power that you end up getting in terms",
    "start": "3294000",
    "end": "3299920"
  },
  {
    "text": "of how simple this is but how safe it is and how you know no technical deci it is um",
    "start": "3299920",
    "end": "3308319"
  },
  {
    "text": "i think is really you know really good win and a really big argument for this sort of thing",
    "start": "3308319",
    "end": "3315520"
  },
  {
    "text": "and that's basically me uh if there's no other questions i'm going to show this slide for no",
    "start": "3316160",
    "end": "3321520"
  },
  {
    "text": "reason um i'm happy to run through anything else we've got about five minutes left so if anyone has any questions feel free to chuck them in",
    "start": "3321520",
    "end": "3326799"
  },
  {
    "text": "slack um",
    "start": "3326799",
    "end": "3330640"
  },
  {
    "text": "yeah hopefully you may be uh interested in source jers let's say i",
    "start": "3331920",
    "end": "3337200"
  },
  {
    "text": "don't expect anyone to remember any of the things that i actually said there because using the rosin api",
    "start": "3337200",
    "end": "3343119"
  },
  {
    "text": "can be sometimes painful it's good to refer to other blog posts and things at the top",
    "start": "3343119",
    "end": "3348400"
  },
  {
    "text": "as you go but yeah there's certainly lots of possibilities",
    "start": "3348400",
    "end": "3353680"
  },
  {
    "text": "do you have that particular example that you gave us there david as a repository",
    "start": "3353680",
    "end": "3358960"
  },
  {
    "text": "or something available i don't that's not about i can put that i could put it up um",
    "start": "3358960",
    "end": "3364400"
  },
  {
    "text": "it is uh it's it's an open pr on the winforms repo if you want to have a look um but yeah no i",
    "start": "3364400",
    "end": "3369520"
  },
  {
    "text": "actually i can i can just push this as it is um i will uh i will do that and i'll put a link in the slack",
    "start": "3369520",
    "end": "3376079"
  },
  {
    "text": "it's an excellent example of the power that you can do and how to set it up i would really appreciate that yeah i",
    "start": "3376079",
    "end": "3382079"
  },
  {
    "text": "really like this one because so in the in the pr",
    "start": "3382079",
    "end": "3387440"
  },
  {
    "text": "hello in the pr for this uh one of the first comments was like on this line of like hey this",
    "start": "3387440",
    "end": "3394000"
  },
  {
    "text": "this approach is too simplistic what if we add a new enum value and you really i always think of that back to the future quote",
    "start": "3394000",
    "end": "3400000"
  },
  {
    "text": "of um you're not thinking fourth dimensionally when uh they're talking about driving off the bridge and marty's like but the bridge isn't there it's",
    "start": "3400000",
    "end": "3406000"
  },
  {
    "text": "like it will be um it's it's kind of a little bit mind-bending sometimes to think about this of like",
    "start": "3406000",
    "end": "3412000"
  },
  {
    "text": "you have to call so actually the other thing i can do which is interesting so uh if i comment out this method here",
    "start": "3412000",
    "end": "3421760"
  },
  {
    "text": "there's no validation method or this enum type so i have to call this method blindly",
    "start": "3421760",
    "end": "3427920"
  },
  {
    "text": "knowing that you know my safety net will catch me and then i have to not worry about the fact that this method only validates two things again it's",
    "start": "3427920",
    "end": "3434559"
  },
  {
    "text": "that safety net of they will be there if they need to be um which is kind of",
    "start": "3434559",
    "end": "3440160"
  },
  {
    "text": "it takes a bit of getting used to think that way um so yeah i'll put up this example that's that's totally cool that'll be awesome",
    "start": "3440160",
    "end": "3447760"
  },
  {
    "text": "cheers that works how does this align with the linker",
    "start": "3447760",
    "end": "3453920"
  },
  {
    "text": "the linker so the the interesting thing is this should in theory work really well",
    "start": "3453920",
    "end": "3460240"
  },
  {
    "text": "with the linker because anytime you remove reflection and write a world can generate the code that",
    "start": "3460240",
    "end": "3467920"
  },
  {
    "text": "generated code is using you know whatever methods and properties you are getting from reflection",
    "start": "3467920",
    "end": "3473280"
  },
  {
    "text": "it's using them for real so you don't need to tell the link that they're being used because they actually are so this should work really well with the",
    "start": "3473280",
    "end": "3479760"
  },
  {
    "text": "linker um it'll be very interesting to see what happens in terms of",
    "start": "3479760",
    "end": "3484799"
  },
  {
    "text": "what internal microsoft things will be rewritten to use source generators so things like asp.net endpoint routing",
    "start": "3484799",
    "end": "3492880"
  },
  {
    "text": "even razer blazer file generation could be rewritten with source generators and there's pros and cons to all of that",
    "start": "3492880",
    "end": "3500559"
  },
  {
    "text": "in particular that's where some of the concerns about you can't have multiple come up",
    "start": "3500559",
    "end": "3505680"
  },
  {
    "text": "so for example if asp.net routing uses a source generator then you can't",
    "start": "3505680",
    "end": "3511440"
  },
  {
    "text": "use the source generator to generate routes because those two things won't",
    "start": "3511440",
    "end": "3516480"
  },
  {
    "text": "see each other right the asp.net one won't be able to see your generated code so it'll be interesting how that sort of",
    "start": "3516480",
    "end": "3521680"
  },
  {
    "text": "falls out but yeah in terms of the linker that all happens on the il after the compilation so this",
    "start": "3521680",
    "end": "3527040"
  },
  {
    "text": "stuff plays really well with it and can actually i think be a big help cheers no worries",
    "start": "3527040",
    "end": "3535680"
  },
  {
    "text": "if there's no other questions i guess uh you can go get another coffee or whatever it is we do in these virtual",
    "start": "3535680",
    "end": "3542839"
  },
  {
    "text": "conferences",
    "start": "3542839",
    "end": "3545839"
  }
]