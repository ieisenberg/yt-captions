[
  {
    "text": "okay make that time so let's make a start actually broke my glasses",
    "start": "4009",
    "end": "12620"
  },
  {
    "text": "about an hour ago I'm on my backup pair which I haven't needed for at least 18",
    "start": "12620",
    "end": "18449"
  },
  {
    "text": "months and they they're the wrong prescription for what I am now need",
    "start": "18449",
    "end": "24090"
  },
  {
    "text": "obviously but if I really my eyes really start to struggle I might ask for someone if they've got a prescription -",
    "start": "24090",
    "end": "30150"
  },
  {
    "text": "if not we'll have to carry home with this one alright okay so before I start just a quick word about the title this",
    "start": "30150",
    "end": "37530"
  },
  {
    "text": "is obviously a 45-minute talk so you have to take the word everything with a pinch of salt right there's no possible",
    "start": "37530",
    "end": "43680"
  },
  {
    "text": "way we're going to cover everything it's just a few things which you may or may not find interesting or surprising or",
    "start": "43680",
    "end": "51149"
  },
  {
    "text": "some combination of the two so start",
    "start": "51149",
    "end": "56250"
  },
  {
    "text": "with something simple and then we'll go on to a swap macro which we'll introduce",
    "start": "56250",
    "end": "62370"
  },
  {
    "text": "for a particular reason which we'll see then we'll have something I hope I don't",
    "start": "62370",
    "end": "68159"
  },
  {
    "text": "think you will have seen a macro for doing ra íí- if you know that from C++",
    "start": "68159",
    "end": "73880"
  },
  {
    "text": "yeah because the interesting thing about that if you think about it this Rai means you require a resource you do",
    "start": "73880",
    "end": "79290"
  },
  {
    "text": "something and then you release a resource so how can you make a macro for the bits either side that's kind of an",
    "start": "79290",
    "end": "85229"
  },
  {
    "text": "interesting challenge and the last one unless you are a coup at a CCU",
    "start": "85229",
    "end": "90930"
  },
  {
    "text": "conference this year I don't think you'll have seen that one where we are we do fizzbuzz with testing entirely in",
    "start": "90930",
    "end": "97049"
  },
  {
    "text": "the preprocessor okay which is for fun just for fun to be clear so I guess",
    "start": "97049",
    "end": "103619"
  },
  {
    "text": "that's worth also saying like with any",
    "start": "103619",
    "end": "110159"
  },
  {
    "text": "tool when you're using the tool the more you know about the tool the more professional you can be when you're using it if it's a sharper knife you",
    "start": "110159",
    "end": "115409"
  },
  {
    "text": "want to be more careful using it etc but the preprocessor is a really blunt tool",
    "start": "115409",
    "end": "121380"
  },
  {
    "text": "it doesn't respect scope it's nothing actually to do with C it's pretty much just a pre-filter program and be honest",
    "start": "121380",
    "end": "128879"
  },
  {
    "text": "true strip famously said in his little book the design and evolution of C++ you a quote I would like to see the",
    "start": "128879",
    "end": "135330"
  },
  {
    "text": "preprocessor abolished and that was written 20 probably 20 years ago now and",
    "start": "135330",
    "end": "141000"
  },
  {
    "text": "they still let this try it again but still trying to get module system in there right the hash includes oh it's a",
    "start": "141000",
    "end": "147630"
  },
  {
    "text": "tricky bugger to get rid of right but think very carefully about using any",
    "start": "147630",
    "end": "155160"
  },
  {
    "text": "technique involving the preprocessor before you actually decide to use it okay right so we're gonna do slides for",
    "start": "155160",
    "end": "163650"
  },
  {
    "text": "the last bit but pretty much mostly what I'm going to do is demo this stuff because that's the way all the Android",
    "start": "163650",
    "end": "169470"
  },
  {
    "text": "did it yesterday and his talk I thought about it that's the way to do it yeah so we'll start with like as I say something very simple the preprocessor is",
    "start": "169470",
    "end": "176720"
  },
  {
    "text": "amazingly complicated in terms of its internal complexity if you read the spec for it it's actually described in terms",
    "start": "176720",
    "end": "182430"
  },
  {
    "text": "of seven phases and different things happen at different phases and when the particular thing in question happens",
    "start": "182430",
    "end": "188459"
  },
  {
    "text": "makes actually quite a difference so one of the things that happens in the preprocessor in one of those phases is",
    "start": "188459",
    "end": "194780"
  },
  {
    "text": "as the test name suggests string literal concatenation so this may well be a bug",
    "start": "194780",
    "end": "203730"
  },
  {
    "text": "that you've been bitten by in the past and if you have you may have be able to",
    "start": "203730",
    "end": "208739"
  },
  {
    "text": "fix it and if you did fix that you may or may not have known whether you fixed it in C or C++ or in C or in the",
    "start": "208739",
    "end": "213959"
  },
  {
    "text": "preprocessor okay so we'll start off with just a simple array of string literals there comma-separated so",
    "start": "213959",
    "end": "220410"
  },
  {
    "text": "there's four of them so if we run this very simple assert on line 13 then it",
    "start": "220410",
    "end": "227100"
  },
  {
    "text": "passes when we get a green as you can see up there but if we remove the cert the commas like that curative you might",
    "start": "227100",
    "end": "237900"
  },
  {
    "text": "expect that's an error and in terms of C it is an error yeah if that was the code",
    "start": "237900",
    "end": "244200"
  },
  {
    "text": "that actually got presented to the C compiler that would be an error but it's not because the preprocessor arranges",
    "start": "244200",
    "end": "250019"
  },
  {
    "text": "for adjacent string literals at the pre-processing level to be concatenated into a single string literal so the C",
    "start": "250019",
    "end": "257340"
  },
  {
    "text": "compiler is not seeing what you're seeing and in truth really that's the reason that beyond didn't doesn't like",
    "start": "257340",
    "end": "263580"
  },
  {
    "text": "the preprocessor if you think about modern languages sharp etc the language that you see on",
    "start": "263580",
    "end": "270120"
  },
  {
    "text": "the screen in front of you is the same as the language that the compiler sees when it's compiling and you shouldn't",
    "start": "270120",
    "end": "275130"
  },
  {
    "text": "underestimate the value of that the quality think about building refactoring",
    "start": "275130",
    "end": "280230"
  },
  {
    "text": "tools and things like that yeah it's not perhaps no surprise that the refactoring tools support for languages like C and",
    "start": "280230",
    "end": "286470"
  },
  {
    "text": "C++ takes it much longer to build it's much more complicated and sometimes you",
    "start": "286470",
    "end": "293130"
  },
  {
    "text": "don't even get it to the same degree because it's not the same there's a transformation okay so if we do this",
    "start": "293130",
    "end": "300360"
  },
  {
    "text": "when it's going to fail because the assertions still for let's see that fail",
    "start": "300360",
    "end": "306770"
  },
  {
    "text": "yeah so it's just a very trivial assert and if we change it to one then it",
    "start": "307220",
    "end": "316890"
  },
  {
    "text": "passes because it's just one string literal okay so it can catch you out but equally it can be using it can be useful",
    "start": "316890",
    "end": "322200"
  },
  {
    "text": "if you you know building some output for a use message or something like that and",
    "start": "322200",
    "end": "328200"
  },
  {
    "text": "you just have a whole bunch of things that you want to print out maybe it's long lines and it and you don't want to",
    "start": "328200",
    "end": "334440"
  },
  {
    "text": "worry about the nut and newline terminators and stuff you don't have to have the string just carrying on and on",
    "start": "334440",
    "end": "339690"
  },
  {
    "text": "and on you can split the string up like this and it will just get lunged back together automatically okay so that's as",
    "start": "339690",
    "end": "345450"
  },
  {
    "text": "I say a very simple one anyone being who's been caught by that before anyone yeah a few people okay so the next one",
    "start": "345450",
    "end": "355350"
  },
  {
    "text": "as I said is a little swap macro so",
    "start": "355350",
    "end": "360510"
  },
  {
    "text": "again we drive it with some tests line seven we've got an integer X line 8 and",
    "start": "360510",
    "end": "365880"
  },
  {
    "text": "then why you initialize them to two values and then we write our swap micro and how can we do that but look at the",
    "start": "365880",
    "end": "373290"
  },
  {
    "text": "implementation in a minute but generally when you write a macro more or less you",
    "start": "373290",
    "end": "378419"
  },
  {
    "text": "have two ways you can do it you can write it as an expression macro or as a statement macro depending sometimes you",
    "start": "378419",
    "end": "385440"
  },
  {
    "text": "don't have a choice but a lot of time you do because it's no accident that the statement syntax of C has a mirrored",
    "start": "385440",
    "end": "393570"
  },
  {
    "text": "syntax in terms of expressions for example yes if you think about an if statement that's a statement yeah that's",
    "start": "393570",
    "end": "400050"
  },
  {
    "text": "fine and is there an equivalent for that in terms of an expression we could use the ternary yeah so sometimes when you're in",
    "start": "400050",
    "end": "407050"
  },
  {
    "text": "a macro or rather when you're not in the macro you'd use it naturally use an if statement whereas when you're in a macro",
    "start": "407050",
    "end": "412720"
  },
  {
    "text": "there are potentially good reasons to avoid if statements such as dangling else that might get introduced that kind",
    "start": "412720",
    "end": "418210"
  },
  {
    "text": "of thing so you might want to shift towards an expression based approach you have a choice okay so it turns out with",
    "start": "418210",
    "end": "423490"
  },
  {
    "text": "swap there is a way to do it with an expression based approach there's a funky trick where you can use an exclusive or it's excessively and you",
    "start": "423490",
    "end": "430270"
  },
  {
    "text": "know you only actually need the two variables you start with you don't need to introduce a third variable okay but",
    "start": "430270",
    "end": "436060"
  },
  {
    "text": "we're not using that one we're just going to try it like this yeah swapping two arguments again we're",
    "start": "436060",
    "end": "446140"
  },
  {
    "text": "not worrying about the type we're just if you wanted to do it with different types you could make the end part of the the macro as well just to keep it simple",
    "start": "446140",
    "end": "452500"
  },
  {
    "text": "we're not doing that and and we very deliberately not just writing this macro",
    "start": "452500",
    "end": "458590"
  },
  {
    "text": "as line seven line eight and line nine yes and the reason for that is that a",
    "start": "458590",
    "end": "464050"
  },
  {
    "text": "macro is literally just a text substitution mechanism and so the point where that macro is called that calling",
    "start": "464050",
    "end": "471160"
  },
  {
    "text": "context has typically a you have extra things around it yeah and so we have",
    "start": "471160",
    "end": "477330"
  },
  {
    "text": "non-obvious interactions between the surrounding code when we're using a",
    "start": "477330",
    "end": "483070"
  },
  {
    "text": "macro and the macro itself and it can very easily get interactions where you didn't mean them because of for example",
    "start": "483070",
    "end": "489280"
  },
  {
    "text": "precedents of the operators and that kind of stuff yes so there's a number of ways of solving this problem if you're",
    "start": "489280",
    "end": "495730"
  },
  {
    "text": "using a statement based approach rather than an expression based approach the standard technique is to use to do while",
    "start": "495730",
    "end": "501370"
  },
  {
    "text": "loop where the while is a zero at the end and this guarantees that you're executing it only only the one time yeah",
    "start": "501370",
    "end": "507820"
  },
  {
    "text": "and that idea of executing something only once is something we're going to come back to now that idea of the",
    "start": "507820",
    "end": "516340"
  },
  {
    "text": "context being contaminated is true at the call site but it's also true inside the macro itself very often because",
    "start": "516340",
    "end": "523539"
  },
  {
    "text": "again it's it's not like normal programming it isn't programming at all it's just textual substitution yes so we",
    "start": "523540",
    "end": "529750"
  },
  {
    "text": "write x and y there and we can easily think of that we fooled into thinking of that as",
    "start": "529750",
    "end": "534940"
  },
  {
    "text": "just very simply X&Y as an expression in its own right but it's not it's just",
    "start": "534940",
    "end": "540040"
  },
  {
    "text": "something that represents the full expression in all its complexity at the",
    "start": "540040",
    "end": "545140"
  },
  {
    "text": "call site before you get to the comma which starts the next full expression in all its complexity for y yes so in the",
    "start": "545140",
    "end": "552460"
  },
  {
    "text": "same way that we have to worry about that contamination from the call site we also have to worry about that typically",
    "start": "552460",
    "end": "557590"
  },
  {
    "text": "in the macro itself and a standard technique that is that you parenthesize each individual use of the the macro",
    "start": "557590",
    "end": "564880"
  },
  {
    "text": "argument in this case x and y so we're doing that facts in each case and we're doing that for y in each case okay okay",
    "start": "564880",
    "end": "573430"
  },
  {
    "text": "so there it is let's run the tests and",
    "start": "573430",
    "end": "578560"
  },
  {
    "text": "we're fine yeah now I've arranged just for a little helper file here just with",
    "start": "578560",
    "end": "584350"
  },
  {
    "text": "the swap by itself because I'd like to just for a moment look at what that",
    "start": "584350",
    "end": "590080"
  },
  {
    "text": "comes out as when it's expanded so I'll just go to my mate file sorry my script",
    "start": "590080",
    "end": "595990"
  },
  {
    "text": "file here and switch to that one rather than actually running the code and we can use minus e which is a standard",
    "start": "595990",
    "end": "603760"
  },
  {
    "text": "option to not compile just show the output of the preprocessor and - P is also one that gets rid of the hash line",
    "start": "603760",
    "end": "610560"
  },
  {
    "text": "stuff that gets added as well just to make less output so if we run that and",
    "start": "610560",
    "end": "616840"
  },
  {
    "text": "we still get some stuff from the declarations that we're inheriting from the hash includes okay and in this case it's it's not a lot and you can get huge",
    "start": "616840",
    "end": "624450"
  },
  {
    "text": "amounts of stuff if you do this yourself okay but we're interested in this bit at the bottom in particular line 15 so",
    "start": "624450",
    "end": "632700"
  },
  {
    "text": "let's say let's use this just to explore for a moment if I for example come back to here and I and I look at the output",
    "start": "632700",
    "end": "640450"
  },
  {
    "text": "and I think what I'd like to see line 15 by itself because that's what's actually the swap macro is being expanded to I",
    "start": "640450",
    "end": "645970"
  },
  {
    "text": "think I'd like to look at line 15 just by itself please so I come back up to here and they put a new line either side",
    "start": "645970",
    "end": "653080"
  },
  {
    "text": "of that one with the idea that I'm going to get a new line when I do the output with the preprocessor and I try it again it doesn't work okay yeah because again",
    "start": "653080",
    "end": "663160"
  },
  {
    "text": "it's the same basic problem you're facing it you were thinking in C but no you know I didn't see forget see you",
    "start": "663160",
    "end": "668920"
  },
  {
    "text": "not doing see you're just doing the preprocessor okay now you can't do that but you have to sneak up on it you have",
    "start": "668920",
    "end": "675579"
  },
  {
    "text": "to do something crazy like put a zero here or something like that okay just to actually make something that's the hair okay and now we can",
    "start": "675579",
    "end": "684970"
  },
  {
    "text": "actually see the bit in question which is this bit here okay okay whoops so let's switch back to",
    "start": "684970",
    "end": "696720"
  },
  {
    "text": "running it for a moment and we'll look at this next one here because hopefully",
    "start": "696720",
    "end": "702370"
  },
  {
    "text": "you can see the problem potential problem with this macro which is okay so",
    "start": "702370",
    "end": "718300"
  },
  {
    "text": "among the several problems right yeah if you always say that for the preprocessor",
    "start": "718300",
    "end": "723639"
  },
  {
    "text": "among the problems yes that's a very important point we've got x and y being evaluated twice side-effects massive",
    "start": "723639",
    "end": "731829"
  },
  {
    "text": "potential complication sequence points complexity being introduced yes definitely okay be nice if we could talk",
    "start": "731829",
    "end": "738970"
  },
  {
    "text": "about that but we're talking about something more basic than that so let's come back to the test what's the second test called yeah we've picked",
    "start": "738970",
    "end": "749130"
  },
  {
    "text": "we've picked temp as our variable name on line seven that we're swapping into because we're not using the expression",
    "start": "749130",
    "end": "754420"
  },
  {
    "text": "based approach using the statement based approach so we introduced a statement a declaration statement okay and we picked",
    "start": "754420",
    "end": "760060"
  },
  {
    "text": "temp and it seems reasonable but actually it's not reasonable because it's an entirely common actual variable name that might be what X or Y actually",
    "start": "760060",
    "end": "767860"
  },
  {
    "text": "expand to yes okay so you have to be real careful about this stuff so if we",
    "start": "767860",
    "end": "773170"
  },
  {
    "text": "imagine if if we try that and see what happens yeah what's going to happen for this one",
    "start": "773170",
    "end": "779190"
  },
  {
    "text": "well the answer is it depends",
    "start": "779190",
    "end": "783060"
  },
  {
    "text": "we've still got our zeroes so let's get rid of those the assertion failed okay",
    "start": "786779",
    "end": "801600"
  },
  {
    "text": "so the this test ran that the assertion failed because obviously hopefully is",
    "start": "801600",
    "end": "806949"
  },
  {
    "text": "fairly clear that something's going wrong yes yeah now it's actually and",
    "start": "806949",
    "end": "812170"
  },
  {
    "text": "it's actually quite unfortunate that that failed and the reason it failed is because I deliberately turned off the",
    "start": "812170",
    "end": "817329"
  },
  {
    "text": "shadow flag there's a warning you can use called the shadow warning which isn't one of the ones you get with wall",
    "start": "817329",
    "end": "822699"
  },
  {
    "text": "because wall isn't wall wall is most okay right yeah",
    "start": "822699",
    "end": "827949"
  },
  {
    "text": "and if you put shadow in then actually better things happen you get a",
    "start": "827949",
    "end": "833980"
  },
  {
    "text": "compile-time error warning becomes an error okay because thinking about it you",
    "start": "833980",
    "end": "839889"
  },
  {
    "text": "can realize that the X in this case is being expanded to temp and we've got in temp equals temp which technically is",
    "start": "839889",
    "end": "846250"
  },
  {
    "text": "legal code because even at the moment you finished the P of temp you've introduced temp in a declaration you",
    "start": "846250",
    "end": "852519"
  },
  {
    "text": "could therefore use it in an expression except it won't have a value yet because you haven't actually initialized it okay",
    "start": "852519",
    "end": "857860"
  },
  {
    "text": "and this is the simplest way you can get a warning of basically things that probably probably are different or in",
    "start": "857860",
    "end": "864069"
  },
  {
    "text": "different scopes okay so that's the problem we're going to try and fix now",
    "start": "864069",
    "end": "870130"
  },
  {
    "text": "one of the ways we can do that and the kind of the obvious way we can fix that is by changing the name of temp yeah and",
    "start": "870130",
    "end": "879459"
  },
  {
    "text": "one of the ways we could try and do it is with something which will start off like that because there's a macro called",
    "start": "879459",
    "end": "884589"
  },
  {
    "text": "underscore untick align yes which evaluates to the line in question yeah and you could you can do various",
    "start": "884589",
    "end": "892420"
  },
  {
    "text": "other things but this is we're going to explore this one just for a moment because it turns out this is quite interesting so let's try that and see it",
    "start": "892420",
    "end": "899430"
  },
  {
    "text": "being fixed except it's not fixed of course because I'm being an idiot",
    "start": "899430",
    "end": "904560"
  },
  {
    "text": "because we need to change it down here as well like that",
    "start": "904560",
    "end": "911009"
  },
  {
    "text": "and we're good but of course that's just the expression of the idea at the beginning we actually want the value of",
    "start": "911529",
    "end": "916759"
  },
  {
    "text": "line to change because otherwise we potentially could have the exactly the same problem again so let's try the idea",
    "start": "916759",
    "end": "924949"
  },
  {
    "text": "of creating a macro variable based on",
    "start": "924949",
    "end": "930860"
  },
  {
    "text": "the prefix of temp and we'll attempt to",
    "start": "930860",
    "end": "940309"
  },
  {
    "text": "make macro variable become a variable name which is tempers our prefix and then the line is and afterwards okay so",
    "start": "940309",
    "end": "947509"
  },
  {
    "text": "mbar our name and we'll try V and then",
    "start": "947509",
    "end": "953509"
  },
  {
    "text": "we can use the splicing operator okay with underscore underscore line yep and",
    "start": "953509",
    "end": "961850"
  },
  {
    "text": "let's see if it works whoops and we could be fooled into",
    "start": "961850",
    "end": "968540"
  },
  {
    "text": "thinking it works so let's come back to here again and look at the output that's",
    "start": "968540",
    "end": "975499"
  },
  {
    "text": "coming from the preprocessor so when we use this SWAT macro here and let's see what we get didn't work okay because I'm",
    "start": "975499",
    "end": "988490"
  },
  {
    "text": "just go underscore line is still just underscore underscore line yeah there's",
    "start": "988490",
    "end": "995920"
  },
  {
    "text": "you might say oh it shouldn't be well it is okay so it's crazy there is a way to",
    "start": "995920",
    "end": "1003939"
  },
  {
    "text": "fix this but it's crazy you have to explicitly concatenate the two arguments in question with another level",
    "start": "1003939",
    "end": "1013769"
  },
  {
    "text": "all right so if we try that one don't",
    "start": "1019650",
    "end": "1025060"
  },
  {
    "text": "still doesn't work right because believe it or not you have to force it through a",
    "start": "1025060",
    "end": "1033010"
  },
  {
    "text": "second time a lot of sweat and effort",
    "start": "1033010",
    "end": "1055330"
  },
  {
    "text": "and reading of the standard yeah because it is standardized it is specified this stuff okay and there is kind of a logic",
    "start": "1055330",
    "end": "1062710"
  },
  {
    "text": "behind it but you you have to sort of bend your brain slightly to see that logic sometimes okay so I hope if",
    "start": "1062710",
    "end": "1073090"
  },
  {
    "text": "nothing else again I hope you've convinced about the the non-intuitive nature of the tool that we're talking",
    "start": "1073090",
    "end": "1079270"
  },
  {
    "text": "about here the processor and the bluntness of it as well okay and we'll",
    "start": "1079270",
    "end": "1086230"
  },
  {
    "text": "come back to our little friend mbar at the end of the talk okay so the next",
    "start": "1086230",
    "end": "1095530"
  },
  {
    "text": "thing which as I said this is the idea",
    "start": "1095530",
    "end": "1100780"
  },
  {
    "text": "that a very common pattern is you require a resource like a file handle or a var arglist",
    "start": "1100780",
    "end": "1105850"
  },
  {
    "text": "and then you use it and then you have to give it back as pretty much the definition of a resource something you've got to give back okay because",
    "start": "1105850",
    "end": "1111460"
  },
  {
    "text": "it's a scarce resource yeah so that's the challenge write a macro for that and",
    "start": "1111460",
    "end": "1121540"
  },
  {
    "text": "and pretty much I don't think it's possible if you if you do it with regular approach you need some kind of",
    "start": "1121540",
    "end": "1127510"
  },
  {
    "text": "insight some trick basically and there's a guy called Serge I forget his surname",
    "start": "1127510",
    "end": "1134230"
  },
  {
    "text": "I've got it listed in one of the comments somewhere who came up with this idea so this particular ado isn't isn't my idea I've modified it slightly but",
    "start": "1134230",
    "end": "1141310"
  },
  {
    "text": "the basic idea that we're going to see is his idea so full credit to Serge so here's the idea",
    "start": "1141310",
    "end": "1146950"
  },
  {
    "text": "that's the core of the idea if we look at the for loop on line 18 yep nothing new there it's just a for",
    "start": "1146950",
    "end": "1153679"
  },
  {
    "text": "loop but you we're particularly looking at that I plus plus at the end of the for loop because lexically that I plus",
    "start": "1153679",
    "end": "1161090"
  },
  {
    "text": "plus is where it is okay but it's not",
    "start": "1161090",
    "end": "1166360"
  },
  {
    "text": "lexically the same as where it when it gets run at runtime the actual runtime",
    "start": "1166360",
    "end": "1173000"
  },
  {
    "text": "behavior is the same as in the while loop if we look at the top right so there's the equivalent while loop of the for loop and the I plus plus is at the",
    "start": "1173000",
    "end": "1179150"
  },
  {
    "text": "bottom of the loop yes so the idea with",
    "start": "1179150",
    "end": "1184730"
  },
  {
    "text": "if you hopefully you can start to see it already is that we could make that I plus plus any general expression and it",
    "start": "1184730",
    "end": "1189919"
  },
  {
    "text": "would be the expression that releases the resource yeah it would happen at the end of the scope but lexically we could",
    "start": "1189919",
    "end": "1197450"
  },
  {
    "text": "make a macro that just corresponds to the for loop top part yeah and the middle part would just drop out because",
    "start": "1197450",
    "end": "1204409"
  },
  {
    "text": "that's what's coming afterwards right yeah that's the idea",
    "start": "1204409",
    "end": "1211150"
  },
  {
    "text": "yeah and you can do it it is possible so",
    "start": "1211150",
    "end": "1216280"
  },
  {
    "text": "sure that's just the introduction of the",
    "start": "1216280",
    "end": "1222770"
  },
  {
    "text": "idea that's not the actual code I've got the exact Chua lis do that for the actual code you're going to see that in",
    "start": "1222770",
    "end": "1228470"
  },
  {
    "text": "a moment okay so let's have a look so I've made a",
    "start": "1228470",
    "end": "1235850"
  },
  {
    "text": "hypothetical class called a wibble and the wibble basically just follows the same idea as a file yeah we will open do",
    "start": "1235850",
    "end": "1245150"
  },
  {
    "text": "something we'll release so it's the same as open read close kind of thing okay",
    "start": "1245150",
    "end": "1251799"
  },
  {
    "text": "so line 13 is the core of the idea that we're starting to explore there's no",
    "start": "1257219",
    "end": "1262269"
  },
  {
    "text": "macros yet we'll get to that okay so we acquire the resource now in this case we",
    "start": "1262269",
    "end": "1267909"
  },
  {
    "text": "can do that as part of the Declaration of the for loop itself on line 13 which is nice because it controls scope yep",
    "start": "1267909",
    "end": "1273940"
  },
  {
    "text": "the end part over here the will release obviously is as we described the trick",
    "start": "1273940",
    "end": "1279849"
  },
  {
    "text": "we have to now do is make sure that we only run the for loop once yeah now",
    "start": "1279849",
    "end": "1284889"
  },
  {
    "text": "there's various ways of doing this you could for example do it without introducing an extra variable because",
    "start": "1284889",
    "end": "1291999"
  },
  {
    "text": "you could use double the fact that W is a pointer in this case and just zero it for example that kind of idea but in",
    "start": "1291999",
    "end": "1298059"
  },
  {
    "text": "general it's not possible to do that for",
    "start": "1298059",
    "end": "1303129"
  },
  {
    "text": "example with there's a V a list example we'll see shortly and the standard says very clearly that it's not telling you",
    "start": "1303129",
    "end": "1308289"
  },
  {
    "text": "what the type of V a list is under the hood because it's a macro yeah and it may not be possible lexically to create",
    "start": "1308289",
    "end": "1314679"
  },
  {
    "text": "a pointer to Avila's V a list just by prefixing it with a star okay so in",
    "start": "1314679",
    "end": "1320589"
  },
  {
    "text": "general the way the only general way I know of doing this is with an extra for loop on the outside to introduce the",
    "start": "1320589",
    "end": "1326529"
  },
  {
    "text": "variable that you're going to use to actually make sure that the inner for loop only runs once okay yeah so that's",
    "start": "1326529",
    "end": "1334569"
  },
  {
    "text": "what it looks like when it's expanded and then the example of the use first example of the use here is on line 21",
    "start": "1334569",
    "end": "1341639"
  },
  {
    "text": "yep we named the variable itself which is the wibble variable if there's any",
    "start": "1341639",
    "end": "1347109"
  },
  {
    "text": "arguments that we need for its initialization yeah they have to come afterwards so that matches up under the",
    "start": "1347109",
    "end": "1353469"
  },
  {
    "text": "hood with the header from wibble because if you look at line 8 you can see the the acquisition of this will thing takes",
    "start": "1353469",
    "end": "1360459"
  },
  {
    "text": "an integer whatever it is for your particular type that's what you would use okay so we just need to make line 21",
    "start": "1360459",
    "end": "1367559"
  },
  {
    "text": "basically do lines 12 and 13 and for that we just make a macro which goes",
    "start": "1367559",
    "end": "1374409"
  },
  {
    "text": "with the API and we can't quite see the end of the macro over there",
    "start": "1374409",
    "end": "1380409"
  },
  {
    "text": "so there it is just to help me out again yeah we've got the once variable and we",
    "start": "1380409",
    "end": "1387609"
  },
  {
    "text": "use all from the comma operator on the right hand side to do the release and then make sure that we also decrement once so that we",
    "start": "1387609",
    "end": "1393550"
  },
  {
    "text": "only do it once okay vom is just mbar using the same trick",
    "start": "1393550",
    "end": "1399100"
  },
  {
    "text": "that we saw just a moment ago to create a variable which hopefully won't clash with another variable given we're",
    "start": "1399100",
    "end": "1404320"
  },
  {
    "text": "introducing it okay and it turns out this basically just works yeah because",
    "start": "1404320",
    "end": "1412780"
  },
  {
    "text": "there it is as a single using and this is with an explicit block lines 22 and 24 for my block okay but if you think",
    "start": "1412780",
    "end": "1420280"
  },
  {
    "text": "about the for loop that we're getting on line 21 you don't have to use a block for a for loop so if you want to do without the for loop and it's sort of",
    "start": "1420280",
    "end": "1426700"
  },
  {
    "text": "more terse syntax like this on line 29 that's fine okay yeah and if you want to",
    "start": "1426700",
    "end": "1432490"
  },
  {
    "text": "use a using using which you can see at the bottom yeah again you can choose to",
    "start": "1432490",
    "end": "1438370"
  },
  {
    "text": "have the blocks on line 35 or 40 one that's up to you but you can nest these as far as you like yeah and everything",
    "start": "1438370",
    "end": "1445990"
  },
  {
    "text": "just works yeah I'm not saying you do this okay but if you had to write code",
    "start": "1445990",
    "end": "1454060"
  },
  {
    "text": "in C we've got you know you're opening one file a second file a third file a fourth file and then you're doing something with all four of them yeah and",
    "start": "1454060",
    "end": "1461110"
  },
  {
    "text": "then you have to write manually the code to say okay we release the file in all cases depending on whether you did or didn't get the previous one et cetera et",
    "start": "1461110",
    "end": "1466960"
  },
  {
    "text": "cetera is you know it's not that easy okay well maybe this is a little bit",
    "start": "1466960",
    "end": "1472720"
  },
  {
    "text": "better so as promised we can do that for any resource in the sense of something",
    "start": "1472720",
    "end": "1477970"
  },
  {
    "text": "we have to give back okay so here's the VA list one it's just an example of",
    "start": "1477970",
    "end": "1487000"
  },
  {
    "text": "using it first of all if you're not familiar with it a VA list is how you actually access the arguments when",
    "start": "1487000",
    "end": "1492340"
  },
  {
    "text": "you've got a very addict function okay there's a there's a type in the standard",
    "start": "1492340",
    "end": "1498190"
  },
  {
    "text": "called V a underscore list which is what we're seeing here on line 9 and as I",
    "start": "1498190",
    "end": "1503980"
  },
  {
    "text": "said the a list as a type is very picky you don't want to mess with it you just",
    "start": "1503980",
    "end": "1509620"
  },
  {
    "text": "wanna leave it as its own type okay you can't collapse these both of these",
    "start": "1509620",
    "end": "1514870"
  },
  {
    "text": "declarations of the variable to do it once and they're variable for the VA list into 1 for loop because the fully",
    "start": "1514870",
    "end": "1521070"
  },
  {
    "text": "initialization part they have the type has to be the same even if you more than one they're separated by commas okay so we do both of them like",
    "start": "1521070",
    "end": "1528650"
  },
  {
    "text": "that and again both of them have to make sure they only execute once we don't",
    "start": "1528650",
    "end": "1534620"
  },
  {
    "text": "need the anything to happen on the ends of these four loops we only need the once - - to happen once at the very last",
    "start": "1534620",
    "end": "1540020"
  },
  {
    "text": "time okay and that allows you to just just use it and the other one I've got",
    "start": "1540020",
    "end": "1546320"
  },
  {
    "text": "here is a file so here's F open F close - - and here's the use",
    "start": "1546320",
    "end": "1558100"
  },
  {
    "text": "it's not bad is it yeah not bad okay so the last thing I had prepared as",
    "start": "1561240",
    "end": "1570600"
  },
  {
    "text": "I said was fizzbuzz in the preprocessor",
    "start": "1570600",
    "end": "1575660"
  },
  {
    "text": "and this was inspired by my friend all they all they inspired this although he",
    "start": "1577400",
    "end": "1585120"
  },
  {
    "text": "didn't mean to and again kudos to",
    "start": "1585120",
    "end": "1590970"
  },
  {
    "text": "resting on the shoulders of giants etc some of their bit of this stuff rests on",
    "start": "1590970",
    "end": "1598310"
  },
  {
    "text": "not just this gentleman but another gentleman as well two people who who were frankly more know more about the",
    "start": "1599690",
    "end": "1608490"
  },
  {
    "text": "preprocessor than is healthy shall we say okay here's the idea that we're",
    "start": "1608490",
    "end": "1615000"
  },
  {
    "text": "going to base on to try and make fizzbuzz in the preprocessor just a quick quick show of hands or let's",
    "start": "1615000",
    "end": "1621840"
  },
  {
    "text": "forget the hands if you're not familiar with fizzbuzz it very simple idea I give",
    "start": "1621840",
    "end": "1627330"
  },
  {
    "text": "you a number and you have to give me back a string and if the numbers divisible by three you give me back fizz if it's divisible by five you give me",
    "start": "1627330",
    "end": "1633690"
  },
  {
    "text": "back buzz if it's divisible by three and five you give me fizzbuzz and if it's not divisible by three or five you give",
    "start": "1633690",
    "end": "1639150"
  },
  {
    "text": "me the number okay it's a drinking game that's really what it is it's a drinking game and obviously as you drink a few",
    "start": "1639150",
    "end": "1645600"
  },
  {
    "text": "more you make more mistakes and then you need to drink a few more and then you make more mistakes and it becomes a self-fulfilling prophecy a few people",
    "start": "1645600",
    "end": "1651780"
  },
  {
    "text": "get very drunk and it's all we have great fun okay yeah so we're going to",
    "start": "1651780",
    "end": "1659160"
  },
  {
    "text": "try and do an eval of a repeat and we're trying to repeat 100 times a macro",
    "start": "1659160",
    "end": "1664740"
  },
  {
    "text": "called Inc that increments from a starting variable zero so we can't see it going off to the right-hand side",
    "start": "1664740",
    "end": "1670250"
  },
  {
    "text": "which will come is a common theme that we'll return to okay but this is what we",
    "start": "1670250",
    "end": "1675480"
  },
  {
    "text": "want that to do it starts at zero and it's just gonna increment a hundred times that's the idea can we do that",
    "start": "1675480",
    "end": "1682050"
  },
  {
    "text": "this we can okay it takes a while let's unpick it bit by bit let's start",
    "start": "1682050",
    "end": "1687090"
  },
  {
    "text": "with repeat so here's our repeat macro yeah",
    "start": "1687090",
    "end": "1693590"
  },
  {
    "text": "so when n is not zero do the macro and then the recursive call back to repeat",
    "start": "1693730",
    "end": "1699860"
  },
  {
    "text": "we have to carry the state with us so the the last argument is macro applied",
    "start": "1699860",
    "end": "1704960"
  },
  {
    "text": "to the parameters that you need for the macro in question this is just I okay so this obviously is very specific just for",
    "start": "1704960",
    "end": "1712039"
  },
  {
    "text": "macros that only have one argument but that's all we need okay we also have to decrement n as we",
    "start": "1712039",
    "end": "1719390"
  },
  {
    "text": "go around because otherwise we're not going to finish the loop yep okay so",
    "start": "1719390",
    "end": "1724880"
  },
  {
    "text": "let's let's look at Dec we'll do this again bit by bit by bit how do we decrement a variable forget very well",
    "start": "1724880",
    "end": "1730850"
  },
  {
    "text": "forget I said variable there's no variables okay it's not C okay it's literally just text yeah you cannot do",
    "start": "1730850",
    "end": "1739340"
  },
  {
    "text": "addition or subtraction in the preprocessor it's not possible so the only way you can even get close to doing",
    "start": "1739340",
    "end": "1745159"
  },
  {
    "text": "Dec or Inc okay is with something like this yeah so it's possible but again it",
    "start": "1745159",
    "end": "1765710"
  },
  {
    "text": "reveals the bluntness of the tool that we're working with okay this is mostly just a challenge to me I thought just do",
    "start": "1765710",
    "end": "1771919"
  },
  {
    "text": "I really know that preprocessor kind of thing yeah okay yep okay so now let's",
    "start": "1771919",
    "end": "1778820"
  },
  {
    "text": "look at the when now if you look at the when carefully you can see it's got a first set of parentheses for the integer",
    "start": "1778820",
    "end": "1785150"
  },
  {
    "text": "value that we're that we're looping around okay it's got a second set of parentheses afterwards for the second thing yeah because the the slash at the",
    "start": "1785150",
    "end": "1793730"
  },
  {
    "text": "end is just a common notation for a logical line okay yeah and from the top",
    "start": "1793730",
    "end": "1799429"
  },
  {
    "text": "the idea we're aiming for is that we're using 0 & 1 in their boolean sense yet",
    "start": "1799429",
    "end": "1805400"
  },
  {
    "text": "and so 1 is false and so a true sorry sort of in this weird notation and so we",
    "start": "1805400",
    "end": "1812870"
  },
  {
    "text": "retain the 42 on the bottom line retains through to 42 but when we have a 0 in",
    "start": "1812870",
    "end": "1819470"
  },
  {
    "text": "the first argument between the parentheses then everything just collapses to nothing yep that's that's",
    "start": "1819470",
    "end": "1825559"
  },
  {
    "text": "essentially what we're trying to for here okay how can we do that here it is start of it yeah so we have the we're",
    "start": "1825559",
    "end": "1834379"
  },
  {
    "text": "expressing the idea when see which is just the first part okay",
    "start": "1834379",
    "end": "1839749"
  },
  {
    "text": "and then we do if see which we'll look at and then expand eat and expand and",
    "start": "1839749",
    "end": "1846379"
  },
  {
    "text": "eat our macros here which then rely on the trailing context being the second",
    "start": "1846379",
    "end": "1851779"
  },
  {
    "text": "part with the parentheses and then we either have to eat that or expand it so",
    "start": "1851779",
    "end": "1857119"
  },
  {
    "text": "we can expand it now with modern C preprocessor by using variable arguments",
    "start": "1857119",
    "end": "1863179"
  },
  {
    "text": "in the macro couldn't do this before but you can do this now okay whereas if we have the eat expansion then again we",
    "start": "1863179",
    "end": "1870139"
  },
  {
    "text": "just drop away to nothing yeah how do we do the if yep well there's a kind of",
    "start": "1870139",
    "end": "1876559"
  },
  {
    "text": "another level of indirection as we saw in the previous slide you have to somehow get a kind of a cast to a",
    "start": "1876559",
    "end": "1882169"
  },
  {
    "text": "boolean it looks like a cast to a billion that's the idea we're expressing is it naught or 1 okay and that and we",
    "start": "1882169",
    "end": "1891200"
  },
  {
    "text": "do that like this okay again cat means concatenate so if the",
    "start": "1891200",
    "end": "1898249"
  },
  {
    "text": "boolean this can cast has worked correctly the argument if seat which is",
    "start": "1898249",
    "end": "1903289"
  },
  {
    "text": "C will be 0 or 1 so if we Lex those two together we get F 0 or if 1 yeah and if",
    "start": "1903289",
    "end": "1910279"
  },
  {
    "text": "it's 0 we take the trailing arguments but if it's 1 we take the initial argument yes because that gives us the",
    "start": "1910279",
    "end": "1916820"
  },
  {
    "text": "expand all the eat and the second part follows through okay yeah okay so here",
    "start": "1916820",
    "end": "1923720"
  },
  {
    "text": "it is just for a couple of examples because it's there's a lot of stuff happening here okay of course no we",
    "start": "1923720",
    "end": "1931700"
  },
  {
    "text": "haven't got to that yet yeah good question I have got to that yet okay",
    "start": "1931700",
    "end": "1939549"
  },
  {
    "text": "yeah it all works on the boolean seven becoming a one or the boolean not becoming a naught naught or one okay",
    "start": "1942230",
    "end": "1948950"
  },
  {
    "text": "that's what Bou the boolean bits are such a hat a mobi hack from someone",
    "start": "1948950",
    "end": "1955130"
  },
  {
    "text": "again I didn't invent that we'll see that in a minute okay okay so as Mike",
    "start": "1955130",
    "end": "1960320"
  },
  {
    "text": "said this all rests on this little boolean cast but again let's not be",
    "start": "1960320",
    "end": "1965690"
  },
  {
    "text": "fooled there's no casts going on here right we're not talking see right it's just lexing okay so again more turtles",
    "start": "1965690",
    "end": "1975680"
  },
  {
    "text": "as we go down first of all we have to imagine we have a knot right not of X",
    "start": "1975680",
    "end": "1981290"
  },
  {
    "text": "and as long as we've got a knot of X we can do the complement yeah so 0 stays at",
    "start": "1981290",
    "end": "1989060"
  },
  {
    "text": "0 but anything that's not 0 becomes 1 this is what we need to do yeah so how can we do not here's not",
    "start": "1989060",
    "end": "1998679"
  },
  {
    "text": "and it's probably best to to do this one",
    "start": "2002290",
    "end": "2007930"
  },
  {
    "text": "I think possibly with a bit at the bottom here okay expansion at the bottom so not 42 comes",
    "start": "2007930",
    "end": "2015490"
  },
  {
    "text": "through to not underscore 42 yep we concatenate those together not",
    "start": "2015490",
    "end": "2020920"
  },
  {
    "text": "and not underscore I should say and 42 which gives us not underscore 42 yeah and then that comes through to check n",
    "start": "2020920",
    "end": "2028710"
  },
  {
    "text": "yeah not 42 of 0 which is coming in through the VA args above okay but the",
    "start": "2028710",
    "end": "2037420"
  },
  {
    "text": "crucial thing is it's different when it's 0 when it's a 0 we get not 0 here ok",
    "start": "2037420",
    "end": "2043030"
  },
  {
    "text": "I'm not 0 is on line 2 and that's that's different simply because there's a different number of arguments it's a",
    "start": "2043030",
    "end": "2050470"
  },
  {
    "text": "tilde and then a 1 yeah and the children the 1 come through to here and therefore the extraction of the second argument is",
    "start": "2050470",
    "end": "2057638"
  },
  {
    "text": "always 1 ok so you can pick different",
    "start": "2057639",
    "end": "2063158"
  },
  {
    "text": "positions in this case the second argument is 0 yeah because we didn't have a different",
    "start": "2063159",
    "end": "2068408"
  },
  {
    "text": "expansion but in this case the second argument is 1 ok this is pretty horrible",
    "start": "2068409",
    "end": "2073450"
  },
  {
    "text": "but you know whatever you do it's gonna be pretty horrible frankly ok yeah ok we",
    "start": "2073450",
    "end": "2081850"
  },
  {
    "text": "still haven't done repeat because apparently this is a recursive macro and",
    "start": "2081850",
    "end": "2088000"
  },
  {
    "text": "the standard says you can't have recursive macros yeah well it turns out you can",
    "start": "2088000",
    "end": "2095100"
  },
  {
    "text": "there's actually a couple of ways to trick recursive macros to carrying on going but by default they won't carry on",
    "start": "2096110",
    "end": "2103320"
  },
  {
    "text": "going some of the wording for this is about whether it's they paint the symbols red or green that kind of thing",
    "start": "2103320",
    "end": "2109890"
  },
  {
    "text": "okay but it is possible yeah you have to",
    "start": "2109890",
    "end": "2114930"
  },
  {
    "text": "kind of as the words of the identifies try and give an impression of you have",
    "start": "2114930",
    "end": "2120240"
  },
  {
    "text": "to try and trick it to defer the expansion of certain things at certain times okay which is what's going on",
    "start": "2120240",
    "end": "2129330"
  },
  {
    "text": "there okay so repeat indirect is quite a crucial part of this little trick okay",
    "start": "2129330",
    "end": "2135360"
  },
  {
    "text": "with the obstruction and the deferring okay and so with all that we can repeat",
    "start": "2135360",
    "end": "2143370"
  },
  {
    "text": "100 times Inc zero and it works as long as we do ink like we did Dec okay now we",
    "start": "2143370",
    "end": "2149610"
  },
  {
    "text": "can start to do fizzbuzz so fizzbuzz we introduce the idea of repeating 100",
    "start": "2149610",
    "end": "2156330"
  },
  {
    "text": "times a macro called cycle three and cycle three cycles through the three values okay not becomes one one becomes",
    "start": "2156330",
    "end": "2164550"
  },
  {
    "text": "two two becomes three three comes back to one and as long as this is recursive the output is going to be exactly as you",
    "start": "2164550",
    "end": "2170970"
  },
  {
    "text": "see on the middle line one two three one two three one two three one two three one two three we're cycling one two three one two three one two three one",
    "start": "2170970",
    "end": "2176310"
  },
  {
    "text": "two three okay yeah we do the same thing for cycle five that's just going through",
    "start": "2176310",
    "end": "2181320"
  },
  {
    "text": "from one to five yeah okay then we need",
    "start": "2181320",
    "end": "2187680"
  },
  {
    "text": "a new macro ents argh which is pretty straightforward and pretty dumb it just",
    "start": "2187680",
    "end": "2194430"
  },
  {
    "text": "picks the end argh I specified by the first argument okay there it is",
    "start": "2194430",
    "end": "2203710"
  },
  {
    "text": "yeah we need this for 1 to 100 there is from a mile away I didn't write this I",
    "start": "2203710",
    "end": "2212630"
  },
  {
    "text": "wrote a program to write this yeah and now we can do start to do fizzbuzz so",
    "start": "2212630",
    "end": "2219380"
  },
  {
    "text": "there's fizzbuzz of n yeah and what we have to do is n plus the nth argh of the",
    "start": "2219380",
    "end": "2225890"
  },
  {
    "text": "site that the repeats of 1 2 3 and the nth are give the repeats of 1 2 5 that gives us 3 arguments which come",
    "start": "2225890",
    "end": "2232760"
  },
  {
    "text": "through to this fizzbuzz ok what does it do with the three arguments ok it",
    "start": "2232760",
    "end": "2238880"
  },
  {
    "text": "changed them on to this fizzbuzz primitive which simply concatenates most of them together except the first",
    "start": "2238880",
    "end": "2246170"
  },
  {
    "text": "argument which is n right remembering in this case the F and the B are always",
    "start": "2246170",
    "end": "2252530"
  },
  {
    "text": "going to be 1 2 & 3 for F and 1 2 3 4 5 for B yeah so this will expand to 15",
    "start": "2252530",
    "end": "2261860"
  },
  {
    "text": "possibilities yeah because it's 3 times 5 okay and then the last step is this",
    "start": "2261860",
    "end": "2270789"
  },
  {
    "text": "yeah if it's divisible by 5 buzz yeah",
    "start": "2271780",
    "end": "2279970"
  },
  {
    "text": "it's divisible by 3 all right fears and",
    "start": "2279970",
    "end": "2286850"
  },
  {
    "text": "if you super by 3 & 5 it's fizzbuzz and the other cases it's just n which is the parameter when it's not 3 or 5 this we",
    "start": "2286850",
    "end": "2296150"
  },
  {
    "text": "just enumerated all the possibilities and collapsed it down to this yeah",
    "start": "2296150",
    "end": "2302170"
  },
  {
    "text": "testing need to test this but again to",
    "start": "2303220",
    "end": "2308810"
  },
  {
    "text": "keep to the spirit of the challenge it has to be tested in the preprocessor obviously right yeah so how do we test",
    "start": "2308810",
    "end": "2316190"
  },
  {
    "text": "it with an include yeah right so we",
    "start": "2316190",
    "end": "2323570"
  },
  {
    "text": "include there's a this is a little-known bit of C actually because they store the string almost in to see the include has",
    "start": "2323570",
    "end": "2329380"
  },
  {
    "text": "three forms there's the form that takes the double quotes name of the file",
    "start": "2329380",
    "end": "2335210"
  },
  {
    "text": "there's the form that takes the angle bracket name the file okay but there's a third form which is a macro that expands ultimately",
    "start": "2335210",
    "end": "2341370"
  },
  {
    "text": "to one of the other two okay and that's what we're using the third form here so we're saying fizzbuzz underscore one",
    "start": "2341370",
    "end": "2348930"
  },
  {
    "text": "equals and we give us a second argument what fizzbuzz one actually corresponds",
    "start": "2348930",
    "end": "2354780"
  },
  {
    "text": "to yep so if fizzbuzz one should be 1 and so fizzbuzz 1 equals 1 is what we",
    "start": "2354780",
    "end": "2361230"
  },
  {
    "text": "pasted together yep convert it to a",
    "start": "2361230",
    "end": "2367440"
  },
  {
    "text": "string there's a macro to convert a token to a string once you've got one token okay and so we're including a file",
    "start": "2367440",
    "end": "2375000"
  },
  {
    "text": "called fizzbuzz 1 equals 1 and if that",
    "start": "2375000",
    "end": "2380280"
  },
  {
    "text": "file exists the test will pass because you've included a father exists right but if you've got it wrong and fizzbuzz",
    "start": "2380280",
    "end": "2386190"
  },
  {
    "text": "1 returns fuzz fizz let's say okay then you'll be trying to include a file called fizzbuzz 1 equals fears yeah that",
    "start": "2386190",
    "end": "2395040"
  },
  {
    "text": "won't exist and you'll get an error message saying can't find this file and it'll tell you it was right yeah yeah",
    "start": "2395040",
    "end": "2405300"
  },
  {
    "text": "and so here it is yep there's the end of",
    "start": "2405300",
    "end": "2416670"
  },
  {
    "text": "it with the fizzbuzz 1 2 3 5 a multiplication thing okay here's the",
    "start": "2416670",
    "end": "2422550"
  },
  {
    "text": "tests I've done two for each case and here's the empty files all right yeah",
    "start": "2422550",
    "end": "2430830"
  },
  {
    "text": "and they're all fine they pass let's see it running yeah but if I change the name",
    "start": "2430830",
    "end": "2436710"
  },
  {
    "text": "of one of these I rename this particular file to I don't know fizzbuzz 10 equals",
    "start": "2436710",
    "end": "2441720"
  },
  {
    "text": "buzzy or something like that I'll try and run the test again yeah he says",
    "start": "2441720",
    "end": "2448710"
  },
  {
    "text": "always expect there's no such file or directory because fizzbuzz of 10 is buzz yeah",
    "start": "2448710",
    "end": "2454920"
  },
  {
    "text": "so let's immediately go back to green by renaming this file back to the correct",
    "start": "2454920",
    "end": "2461309"
  },
  {
    "text": "answer cuz fizzbuzz of 10 it is obviously buzz because it's divisible by",
    "start": "2461309",
    "end": "2468029"
  },
  {
    "text": "5 and back to green and I've got two minutes left because that's all I had",
    "start": "2468029",
    "end": "2473190"
  },
  {
    "text": "prepared thanks a lot [Applause]",
    "start": "2473190",
    "end": "2482750"
  },
  {
    "text": "any questions from anyone",
    "start": "2482750",
    "end": "2486589"
  }
]