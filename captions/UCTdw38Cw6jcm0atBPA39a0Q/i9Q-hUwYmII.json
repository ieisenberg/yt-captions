[
  {
    "text": "hi oh brilliant that means it's time to start my favorite bit um so hi everyone",
    "start": "0",
    "end": "5100"
  },
  {
    "text": "thank you very much for coming uh welcome to my talk on property-based testing first of all like thank you all",
    "start": "5100",
    "end": "11340"
  },
  {
    "text": "for coming and thank you to NDC Oslo for having me um all pictures images are either mine",
    "start": "11340",
    "end": "16800"
  },
  {
    "text": "or from the PowerPoint stock Library which by the way if you haven't explored is fantastic",
    "start": "16800",
    "end": "22800"
  },
  {
    "text": "um so in case we haven't met which I'm assuming is everyone here um my name is Lucy that is a picture of",
    "start": "22800",
    "end": "28800"
  },
  {
    "text": "me on a good day this is me on a Thursday um so my preferred pronouns are she",
    "start": "28800",
    "end": "35040"
  },
  {
    "text": "slash they um I'm a senior software developer at a company called codart so we build",
    "start": "35040",
    "end": "40980"
  },
  {
    "text": "Financial Integrations Financial software Integrations if you're in the market for financial software",
    "start": "40980",
    "end": "46620"
  },
  {
    "text": "Integrations like come hit me up um I currently work in front end land so",
    "start": "46620",
    "end": "51899"
  },
  {
    "text": "typescript reacts foul um but I have a background as a.net developer I used to",
    "start": "51899",
    "end": "57180"
  },
  {
    "text": "do angular unfortunately but fortunately I don't anymore um I love functional programming I love",
    "start": "57180",
    "end": "63000"
  },
  {
    "text": "F sharp I run the F sharp group at Coda we won't talk about how active it is as",
    "start": "63000",
    "end": "68040"
  },
  {
    "text": "everyone else's fault not mine um also in case you can't tell from my accent I am from London in the UK",
    "start": "68040",
    "end": "75920"
  },
  {
    "text": "um so if you want to talk to me about non-technical things so I like making things um mostly knitting myself hats and",
    "start": "76020",
    "end": "82439"
  },
  {
    "text": "scarves they're ridiculous and huge because why not I like sewing things I recently made",
    "start": "82439",
    "end": "88080"
  },
  {
    "text": "this jacket and skirt which I'm particularly proud of um I love making PowerPoints um I think",
    "start": "88080",
    "end": "93420"
  },
  {
    "text": "I might have actually discovered all the features of PowerPoint and might have",
    "start": "93420",
    "end": "98460"
  },
  {
    "text": "actually reached the performance limitations of it so we'll see how this goes",
    "start": "98460",
    "end": "103860"
  },
  {
    "text": "um I went to RuPaul's drag on UK earlier this year and I met Lawrence Cheney if anyone likes drag queens and I went to",
    "start": "103860",
    "end": "110159"
  },
  {
    "text": "spell bad last year and I saw a polar bear and I definitely took that photo it definitely didn't steal it from the stock image Library",
    "start": "110159",
    "end": "117600"
  },
  {
    "text": "um so somebody who is cleverer than me was like you should put the conclusion at your start of your PowerPoint so",
    "start": "117600",
    "end": "123360"
  },
  {
    "text": "everyone knows what you're going to talk about so property-based testing is a technique for testing statements of the type for",
    "start": "123360",
    "end": "130440"
  },
  {
    "text": "all X that satisfy some precondition then some predicate holds um it can give you the confidence that",
    "start": "130440",
    "end": "136379"
  },
  {
    "text": "your code behaves correctly across a wide range of inputs it can help you find bugs in your code",
    "start": "136379",
    "end": "142080"
  },
  {
    "text": "from inputs that you may have never even thought to test and this technique can be used alongside",
    "start": "142080",
    "end": "147480"
  },
  {
    "text": "existing unit tests so um thank you very much for coming to my talk",
    "start": "147480",
    "end": "152540"
  },
  {
    "text": "thank you unfortunately um that is not the end of the presentation uh let's actually get into",
    "start": "154080",
    "end": "160980"
  },
  {
    "text": "it so question uh show of hands I promise I will not pick on you I just want a show of hands",
    "start": "160980",
    "end": "166200"
  },
  {
    "text": "who here knows what property-based testing is oh dear a few of you actually know that",
    "start": "166200",
    "end": "171959"
  },
  {
    "text": "means I can't just lie for an hour oh well um let's get into it let's talk about reversing a list",
    "start": "171959",
    "end": "180060"
  },
  {
    "text": "um let's pretend you're a junior this is you you're a cat for some reason don't ask me",
    "start": "180060",
    "end": "185099"
  },
  {
    "text": "um we're going to use F sharp functional programming test driven development all good stuff so I'm gonna be like",
    "start": "185099",
    "end": "192540"
  },
  {
    "text": "here is your function signature who he actually knows F sharp",
    "start": "192540",
    "end": "197819"
  },
  {
    "text": "a couple of hands fantastic well uh just so you're not this cat in the corner going ah let's just quickly go through",
    "start": "197819",
    "end": "204300"
  },
  {
    "text": "the syntax so first of all we are going to define a function called list reverse",
    "start": "204300",
    "end": "209940"
  },
  {
    "text": "um I apologize for my due to you it's really struggling with these animations but bear with me so yes defining a",
    "start": "209940",
    "end": "216180"
  },
  {
    "text": "function we're calling less reverse this takes a single argument which is a list of",
    "start": "216180",
    "end": "221459"
  },
  {
    "text": "integers it returns a list of integers preferably reversed but we'll get on to that and",
    "start": "221459",
    "end": "229260"
  },
  {
    "text": "the implementation will go here so it's not that scary",
    "start": "229260",
    "end": "235519"
  },
  {
    "text": "so how should we approach implementing this function you might be like let's just jump in and write a list reverse function I remember how to write one of",
    "start": "236340",
    "end": "242819"
  },
  {
    "text": "those when I went to University all those years ago but no we like test driven development so we",
    "start": "242819",
    "end": "249659"
  },
  {
    "text": "are going to write the unit tests first",
    "start": "249659",
    "end": "254060"
  },
  {
    "text": "here's what a unit test looks like an F sharp so here's a bit of time to read the slide",
    "start": "255780",
    "end": "261600"
  },
  {
    "text": "and I can have a drink",
    "start": "261600",
    "end": "264979"
  },
  {
    "text": "right I hope you read the slide and didn't just watch the um line going across the screen because I definitely did",
    "start": "269880",
    "end": "276360"
  },
  {
    "text": "um again let's just walk through the bits so we're not a scared little kitty in the corner",
    "start": "276360",
    "end": "282900"
  },
  {
    "text": "come on there we go",
    "start": "282900",
    "end": "288060"
  },
  {
    "text": "so using a new enough unit FS unit pretty standard like testing Library stuff you can use any",
    "start": "288060",
    "end": "295680"
  },
  {
    "text": "unit test framework of choice um I'll test this called camera reverse list um for anyone who cares technically this",
    "start": "295680",
    "end": "302100"
  },
  {
    "text": "is a variable name in F sharp that has spaces in which is kind of cool",
    "start": "302100",
    "end": "307860"
  },
  {
    "text": "um then we write our test setup code which is let's take a list let's pass it into our list reverse function",
    "start": "307860",
    "end": "314580"
  },
  {
    "text": "and then let's assert that the reverse list should equal three two one and yes",
    "start": "314580",
    "end": "320639"
  },
  {
    "text": "F sharp does use semicolon as a list delimiter don't ask me why",
    "start": "320639",
    "end": "328139"
  },
  {
    "text": "also don't worry about that funny pointy symbol we're not going to worry about that so not so scary",
    "start": "328139",
    "end": "335840"
  },
  {
    "text": "let's run our test fails as we expect you know it goes oh no there's no implementation um let's also Chuck in an edge case test",
    "start": "336000",
    "end": "343500"
  },
  {
    "text": "the empty list returns an empty list fantastic so next let's implement",
    "start": "343500",
    "end": "351979"
  },
  {
    "text": "how do we implement this function I will give you a bit of time to think",
    "start": "352259",
    "end": "359360"
  },
  {
    "text": "so the answer is of course this",
    "start": "369360",
    "end": "376940"
  },
  {
    "text": "I'm hearing a few giggles I'm assuming those are the f sharpers um if we just go translate this so the",
    "start": "378000",
    "end": "384960"
  },
  {
    "text": "answer is if the list we're given is one two three then return three two one otherwise",
    "start": "384960",
    "end": "390840"
  },
  {
    "text": "return an empty list it's perfect right yeah it is perfect pass is our our um",
    "start": "390840",
    "end": "398100"
  },
  {
    "text": "unit test everything's green so you know now it's time to take a nap and prepare our letter asking for a promotion to",
    "start": "398100",
    "end": "405900"
  },
  {
    "text": "senior level because we're really good um a few minutes later",
    "start": "405900",
    "end": "412560"
  },
  {
    "text": "um I come along and I try and use this function and I say oh okay let's try and reverse list six seven eight and it",
    "start": "412560",
    "end": "418979"
  },
  {
    "text": "tells me oh the reverse of six seven eight is of course an empty list and I'm just like oh my God why is this function not",
    "start": "418979",
    "end": "426479"
  },
  {
    "text": "working as I expect so I do the natural thing I say okay it's not working as I",
    "start": "426479",
    "end": "432000"
  },
  {
    "text": "expect let's add a new test case test case fails I give it back to you to fix and what do",
    "start": "432000",
    "end": "439199"
  },
  {
    "text": "you do well you just do that you just add a new case to say oh",
    "start": "439199",
    "end": "446340"
  },
  {
    "text": "if you're given 608 then return 876 passes the unit test everything's green everything's good right test driven",
    "start": "446340",
    "end": "452039"
  },
  {
    "text": "development and you're probably going oh my God come on Lucy like this is this is ridiculous",
    "start": "452039",
    "end": "458039"
  },
  {
    "text": "no one would do this um and then I'm like aha I'm a software",
    "start": "458039",
    "end": "465180"
  },
  {
    "text": "developer so I'm going to it's very jankly convince you this is in fact a",
    "start": "465180",
    "end": "471360"
  },
  {
    "text": "very logical thing to do so let's hop on over to our best friend",
    "start": "471360",
    "end": "477660"
  },
  {
    "text": "Wikipedia this is the page for test driven development um let's just zoom in on step number",
    "start": "477660",
    "end": "484080"
  },
  {
    "text": "three which is right the simplest code that passes a new test so you're given a load of tests",
    "start": "484080",
    "end": "490380"
  },
  {
    "text": "you have to write simplest code that passes the new tests let's say for example you didn't know it",
    "start": "490380",
    "end": "496979"
  },
  {
    "text": "was a list reversal function you were just given this set of test cases for a mystery function",
    "start": "496979",
    "end": "502379"
  },
  {
    "text": "and you had to write something that passes the test cases and it's like",
    "start": "502379",
    "end": "508379"
  },
  {
    "text": "what what would be your implementation what is the most logical implementation in",
    "start": "508379",
    "end": "513899"
  },
  {
    "text": "this case unfortunately the simplest code that passes this is a match statement so",
    "start": "513899",
    "end": "522380"
  },
  {
    "text": "I'm doing test driven development that's my implementation it works",
    "start": "524339",
    "end": "532380"
  },
  {
    "text": "so in order to fully specify the reversal function we could add more test cases",
    "start": "532380",
    "end": "540120"
  },
  {
    "text": "I don't know how many possible integer lists there are representable on a 64-bit machine I'm assuming it's a very",
    "start": "540120",
    "end": "546839"
  },
  {
    "text": "large number no one has actually told me what the number is so if you know then let me know",
    "start": "546839",
    "end": "553260"
  },
  {
    "text": "um so yeah I could add a huge number of test cases you can just go ahead and add more cases",
    "start": "553260",
    "end": "560760"
  },
  {
    "text": "to the match statement and um I'll just put this here",
    "start": "560760",
    "end": "567019"
  },
  {
    "text": "clearly it's not the right approach",
    "start": "571200",
    "end": "576380"
  },
  {
    "text": "and let's just take a step back let's think how do we actually Define what a",
    "start": "577019",
    "end": "582060"
  },
  {
    "text": "function is like if you had to describe what little reversal was like how do you describe that you could kind of say",
    "start": "582060",
    "end": "590459"
  },
  {
    "text": "let's define Its Behavior let's say oh okay well I take a list and I'll",
    "start": "590459",
    "end": "595620"
  },
  {
    "text": "rearrange it to be backwards right that's less reversal but then the kind of issue is",
    "start": "595620",
    "end": "603720"
  },
  {
    "text": "all I've done here is I've described reversal with a synonym of reverse like reverse means backwards backwards means",
    "start": "603720",
    "end": "609779"
  },
  {
    "text": "reverse I'm not actually describing what is reversal I'll give you a few seconds just to",
    "start": "609779",
    "end": "615600"
  },
  {
    "text": "think like if you were describing to an alien for some reason understood your",
    "start": "615600",
    "end": "621240"
  },
  {
    "text": "native language perfectly but didn't understand the concept of reversing a list like how would you describe it to",
    "start": "621240",
    "end": "627180"
  },
  {
    "text": "them",
    "start": "627180",
    "end": "629360"
  },
  {
    "text": "so one way we can describe a function is we can identify some properties of the",
    "start": "639920",
    "end": "645720"
  },
  {
    "text": "function so property is something that is for all X satisfy some precondition some",
    "start": "645720",
    "end": "652079"
  },
  {
    "text": "predicate holds what properties can we Define for list reverse or well one thing we can say is",
    "start": "652079",
    "end": "659459"
  },
  {
    "text": "if you take any list reverse it twice you get the same thing back now you can say that for any function if",
    "start": "659459",
    "end": "666000"
  },
  {
    "text": "you just take a list and just return the list then that's going to hold so what else can we say oh we can say",
    "start": "666000",
    "end": "672600"
  },
  {
    "text": "if it's a non-empty list the first item in the reverse list will be the last item in the resulting list",
    "start": "672600",
    "end": "679980"
  },
  {
    "text": "we can also say the opposite the last item in the original list becomes the first item in your output list",
    "start": "679980",
    "end": "687480"
  },
  {
    "text": "you can say oh if I have a list that's a palindrome reversing does nothing so palindrome is a list that's the same",
    "start": "687480",
    "end": "693720"
  },
  {
    "text": "backwards as in forwards so reversing that gives you the same thing I'm sure there's a few more things um",
    "start": "693720",
    "end": "700320"
  },
  {
    "text": "you know exercise for the reader AKA I was too lazy to write more in this slide but you get the point you know",
    "start": "700320",
    "end": "707300"
  },
  {
    "text": "so how does this help us we can't exhaustively test every single",
    "start": "707640",
    "end": "713579"
  },
  {
    "text": "input to our function what we could do is we could actually write oh my God that's terrible we could",
    "start": "713579",
    "end": "720720"
  },
  {
    "text": "write a mathematical proof um question has anyone ever done a",
    "start": "720720",
    "end": "727560"
  },
  {
    "text": "mathematical proof their code is correct couple of hands I'm not entirely sure",
    "start": "727560",
    "end": "733680"
  },
  {
    "text": "why you would do that I personally I'm not an academic there's a reason why I'm a software developer not a you know",
    "start": "733680",
    "end": "739920"
  },
  {
    "text": "researcher I kind of don't care um I also like writing code rather than",
    "start": "739920",
    "end": "745140"
  },
  {
    "text": "writing proof so to me like writing a mathematical proof is like not the one",
    "start": "745140",
    "end": "751320"
  },
  {
    "text": "so this is where surprise of the century we're going to talk about property-based",
    "start": "751320",
    "end": "757980"
  },
  {
    "text": "testing so what is property-based testing well",
    "start": "757980",
    "end": "766160"
  },
  {
    "text": "surprisingly it's when you use properties to test your functions",
    "start": "766160",
    "end": "771440"
  },
  {
    "text": "properties once again for all acts that satisfy some preconditioned some predicate holds so for example an a",
    "start": "771440",
    "end": "778860"
  },
  {
    "text": "property of a integer list reversal function is given a list of integers if",
    "start": "778860",
    "end": "784740"
  },
  {
    "text": "I reverse it twice I get the original list this will hold for a generic list just",
    "start": "784740",
    "end": "790560"
  },
  {
    "text": "for the sake of Simplicity in this talk I'm going to talk about integer lists at just because",
    "start": "790560",
    "end": "798500"
  },
  {
    "text": "let's have a look at a library called FS check so FS check is a.net Library the fs in FS",
    "start": "800160",
    "end": "808860"
  },
  {
    "text": "check stands for F sharp but it's a DOT net Library you can use it for c-sharp you can use it for any.net language so I",
    "start": "808860",
    "end": "815279"
  },
  {
    "text": "think in visual Basics still around you can use this in Visual Basic but I think you've got bigger problems",
    "start": "815279",
    "end": "823220"
  },
  {
    "text": "um I will go on to this later but there are language there are libraries for every single language you would want",
    "start": "823320",
    "end": "829320"
  },
  {
    "text": "anyway let's have a look at FS check what does a test in FS check look like look something like this",
    "start": "829320",
    "end": "835620"
  },
  {
    "text": "neat huh I think so but let's just go through it first of all",
    "start": "835620",
    "end": "841740"
  },
  {
    "text": "I write a function that specify the property so I always call this check function because I'm an incredibly",
    "start": "841740",
    "end": "846839"
  },
  {
    "text": "creative individual there we go",
    "start": "846839",
    "end": "852440"
  },
  {
    "text": "next I specify what to do to actually like",
    "start": "852600",
    "end": "858480"
  },
  {
    "text": "no I specify what we're given as an argument to check function so you know I'm given a list of integers so the",
    "start": "858480",
    "end": "866160"
  },
  {
    "text": "arguments my check function is a list of integers I then specify",
    "start": "866160",
    "end": "872399"
  },
  {
    "text": "how to manipulate the inputs in this case I am reversing it twice so I pass",
    "start": "872399",
    "end": "877560"
  },
  {
    "text": "it into the F sharp list reversal function twice I'm using the F sharp",
    "start": "877560",
    "end": "883079"
  },
  {
    "text": "standard Library rather than our list reverse function because reasons and then I assert using standard Library",
    "start": "883079",
    "end": "890699"
  },
  {
    "text": "function so this case I'm checking I get the original list this is using um and",
    "start": "890699",
    "end": "897240"
  },
  {
    "text": "Fs unit equality deeper quality check it's red as it's written this is the reason why I",
    "start": "897240",
    "end": "903480"
  },
  {
    "text": "used F-sharp and then I just tell FS check to run the",
    "start": "903480",
    "end": "908820"
  },
  {
    "text": "property using check.quick and",
    "start": "908820",
    "end": "914220"
  },
  {
    "text": "I run it",
    "start": "914220",
    "end": "916939"
  },
  {
    "text": "there we go I've run it I get a green tick and I'm like cool I can move on with my life",
    "start": "921240",
    "end": "927480"
  },
  {
    "text": "um let's just have a quick look at what it's actually doing under the hood because I mean I haven't actually",
    "start": "927480",
    "end": "933720"
  },
  {
    "text": "explained anything yet you might have noticed here it says okay past 100 tests so what it's actually doing under the",
    "start": "933720",
    "end": "941040"
  },
  {
    "text": "hood let's just say oh let's log out whatever inputs we get to that function so you can see the inputs it's",
    "start": "941040",
    "end": "947820"
  },
  {
    "text": "generating here so basically it runs your function multiple times randomly generated inputs",
    "start": "947820",
    "end": "955440"
  },
  {
    "text": "the input start small and they get bigger as the test runs",
    "start": "955440",
    "end": "960660"
  },
  {
    "text": "progress so when I say small there is a definition for what small means but you know intuitively start small gets big",
    "start": "960660",
    "end": "969120"
  },
  {
    "text": "um it will try to generate inputs that try to find edge cases as quickly as",
    "start": "969120",
    "end": "974459"
  },
  {
    "text": "possible so in this case starts with an empty list then I'll start with a list with",
    "start": "974459",
    "end": "979920"
  },
  {
    "text": "zero then it will start with you know it will start generating really really big lists if you're starting with numbers it",
    "start": "979920",
    "end": "986880"
  },
  {
    "text": "would start with like zero infinity negative Infinity the smallest possible",
    "start": "986880",
    "end": "992760"
  },
  {
    "text": "number representable in your number system of choice you know those kind of obscure things maybe you wouldn't have",
    "start": "992760",
    "end": "998759"
  },
  {
    "text": "thought to test so one thing might be helpful is to say",
    "start": "998759",
    "end": "1004160"
  },
  {
    "text": "oh well what happens if it fails so let's write a test that says oh reversing list gives the original list",
    "start": "1004160",
    "end": "1010399"
  },
  {
    "text": "as I said before this will only work for palindromic lists less than the same",
    "start": "1010399",
    "end": "1016279"
  },
  {
    "text": "factors they are forwards uh you know I'm there being like Oh won't work for non-palindromic lists so",
    "start": "1016279",
    "end": "1022579"
  },
  {
    "text": "let's run it get a Red Cross fantastic let's inspect the output what it tells",
    "start": "1022579",
    "end": "1029298"
  },
  {
    "text": "us is the first input it generated that caused",
    "start": "1029299",
    "end": "1035480"
  },
  {
    "text": "the failure in this case it's a list zero two so you know tried an empty list empty list work tried List full element that worked tried list of two elements",
    "start": "1035480",
    "end": "1042980"
  },
  {
    "text": "that didn't work it then does something kind of cool called shrinking which attempts to give",
    "start": "1042980",
    "end": "1048199"
  },
  {
    "text": "you like a minimal input that causes a failure in this case you know a list of zero and one",
    "start": "1048199",
    "end": "1054200"
  },
  {
    "text": "um shrinking is an actual thing I won't go into it but yeah neat basically oh no I wanted to go back that",
    "start": "1054200",
    "end": "1062000"
  },
  {
    "text": "way thank you um what you can do at this point when you see this failure is you can go into your unit into your code you can say",
    "start": "1062000",
    "end": "1068419"
  },
  {
    "text": "okay I'm going to run it with this example zero and one I'm going to debug my code to figure out why is this not",
    "start": "1068419",
    "end": "1074000"
  },
  {
    "text": "working as I expected and then you can go me I found my Edge",
    "start": "1074000",
    "end": "1079100"
  },
  {
    "text": "case well the thing where it's wrong so I'm sure you think that this is the most wonderful technique and you can't",
    "start": "1079100",
    "end": "1085340"
  },
  {
    "text": "wait to use it so I appreciate that writing a list reversal function and",
    "start": "1085340",
    "end": "1091400"
  },
  {
    "text": "showing that it's possibly correct maybe isn't the most useful thing so",
    "start": "1091400",
    "end": "1097400"
  },
  {
    "text": "let's just have a look at a few cases you might want to use it where I personally have used property-based",
    "start": "1097400",
    "end": "1103220"
  },
  {
    "text": "testing in the past so scenario number one if there's some Randomness inherent in your code",
    "start": "1103220",
    "end": "1110120"
  },
  {
    "text": "um an example where I use this I had a list",
    "start": "1110120",
    "end": "1115580"
  },
  {
    "text": "of integers it wasn't introduced but I had a list of integers I had a function where I wanted to take a single element",
    "start": "1115580",
    "end": "1123140"
  },
  {
    "text": "randomly from that list and return the original list",
    "start": "1123140",
    "end": "1128780"
  },
  {
    "text": "so the question is how would you unit test this it's random",
    "start": "1128780",
    "end": "1136760"
  },
  {
    "text": "you expect to get a different answer back every single time",
    "start": "1136760",
    "end": "1142280"
  },
  {
    "text": "and what you could do is you could say oh okay well we're going to pass in a seed number to seed out random and then",
    "start": "1142280",
    "end": "1148400"
  },
  {
    "text": "if you have the same seed you always get the same random output so you're kind of fixing the randomness that way but then",
    "start": "1148400",
    "end": "1155360"
  },
  {
    "text": "it's like yeah but how many seed values are you going to test",
    "start": "1155360",
    "end": "1160880"
  },
  {
    "text": "how do you know you haven't just happened to pick the correct seed value that has the right Behavior",
    "start": "1160880",
    "end": "1167120"
  },
  {
    "text": "how do you test this and actually property-based testing like",
    "start": "1167120",
    "end": "1173840"
  },
  {
    "text": "comes in really great here so say I've got this implementation remove random it",
    "start": "1173840",
    "end": "1180140"
  },
  {
    "text": "takes a list of integers and it returns two values a single integer which is our remove",
    "start": "1180140",
    "end": "1186559"
  },
  {
    "text": "value and the list the remaining items and",
    "start": "1186559",
    "end": "1192860"
  },
  {
    "text": "we can write a property-based test for this based on the property of if I take",
    "start": "1192860",
    "end": "1198440"
  },
  {
    "text": "that single removed element and the rest of that list the remaining element if I smash them together I get",
    "start": "1198440",
    "end": "1205280"
  },
  {
    "text": "the original list this should work regardless of which random element which element is randomly",
    "start": "1205280",
    "end": "1211820"
  },
  {
    "text": "chosen so this is what the tests look like let's just go through it quickly so",
    "start": "1211820",
    "end": "1219500"
  },
  {
    "text": "um yeah remove random concatenating the results gives the original list we take in a list we're going to just ignore",
    "start": "1219500",
    "end": "1226520"
  },
  {
    "text": "empty lists this function fails for empty lists because reasons um simplicity",
    "start": "1226520",
    "end": "1233179"
  },
  {
    "text": "so we take the two of n return values the item removed and the remaining items in the list",
    "start": "1233179",
    "end": "1238460"
  },
  {
    "text": "we concatenate them using this fancy F-sharp cons operator to combine it into",
    "start": "1238460",
    "end": "1244520"
  },
  {
    "text": "a list and then we just say yeah take that reconstructed list assert that it is equivalent to so same items possibly",
    "start": "1244520",
    "end": "1252620"
  },
  {
    "text": "different order assert it's equivalent to the original list and there we go we've written a unit",
    "start": "1252620",
    "end": "1259700"
  },
  {
    "text": "test in however many lines that is I didn't add in the line numbers because I'm very",
    "start": "1259700",
    "end": "1265280"
  },
  {
    "text": "helpful we've written a unit test that reliably tests our function that is",
    "start": "1265280",
    "end": "1270500"
  },
  {
    "text": "random without having to take the randomness out of it",
    "start": "1270500",
    "end": "1275500"
  },
  {
    "text": "another place you might want to use it is when the solution is easy to verify but hard to prove so let's say for",
    "start": "1277100",
    "end": "1285020"
  },
  {
    "text": "example you are writing your own sorting function for reasons unknown to me it's",
    "start": "1285020",
    "end": "1291380"
  },
  {
    "text": "a nice example in this case that's why we're doing it how do you prove a sorting algorithm",
    "start": "1291380",
    "end": "1297020"
  },
  {
    "text": "works like proving sorting algorithms work is like really hard and I don't",
    "start": "1297020",
    "end": "1303020"
  },
  {
    "text": "like doing that kind of hard proofs I don't even know if that's possible I'm kind of making this up again I'm a",
    "start": "1303020",
    "end": "1309140"
  },
  {
    "text": "programmer not an academic but also I realize I'm a programmer not an academic and as long as it like works",
    "start": "1309140",
    "end": "1315620"
  },
  {
    "text": "well enough for me that's good enough for me so one thing we can change Tech we can say",
    "start": "1315620",
    "end": "1322400"
  },
  {
    "text": "oh well it's easy to verify a list is sorted we can just go through pairwise",
    "start": "1322400",
    "end": "1328419"
  },
  {
    "text": "compare each element and check oh is that sorted so",
    "start": "1328419",
    "end": "1335080"
  },
  {
    "text": "a property-based test will look something like this we can say oh given a random list",
    "start": "1335480",
    "end": "1342679"
  },
  {
    "text": "sort it with my special sort function generate all the pairs with this list.pairwise function so as an example",
    "start": "1342679",
    "end": "1350000"
  },
  {
    "text": "given the list 0 1 2 3 it generates zero one one two two three possibly as you'd",
    "start": "1350000",
    "end": "1355940"
  },
  {
    "text": "expect I hope so anyway and then go through each pair check it's in order",
    "start": "1355940",
    "end": "1362000"
  },
  {
    "text": "and now I haven't proved my list is sorting correctly but if I run it with",
    "start": "1362000",
    "end": "1367400"
  },
  {
    "text": "100 lists and I find those lists are all sorted I can be like that's good enough for me",
    "start": "1367400",
    "end": "1373658"
  },
  {
    "text": "I mean that chicken's meant to be shaking going wow look how cool I am but um apparently not today",
    "start": "1376580",
    "end": "1383480"
  },
  {
    "text": "I do apologize scenario number three",
    "start": "1383480",
    "end": "1389659"
  },
  {
    "text": "um this one might be possibly the best case to use it um if you have an existing implementation to compare",
    "start": "1389659",
    "end": "1395059"
  },
  {
    "text": "against property based testing is just fantastic let's say you're in the case where",
    "start": "1395059",
    "end": "1400280"
  },
  {
    "text": "you've got a legacy function and you need to refactor it to a nice new version and",
    "start": "1400280",
    "end": "1407000"
  },
  {
    "text": "you're like well do I really have to go through and like find all the edge cases and make sure",
    "start": "1407000",
    "end": "1413960"
  },
  {
    "text": "I've captured all the edge case behavior and it's like no you don't actually you can just say property-based testing you",
    "start": "1413960",
    "end": "1420260"
  },
  {
    "text": "can say oh just Generate random inputs for me pass it into both functions check is the same and it's like",
    "start": "1420260",
    "end": "1428480"
  },
  {
    "text": "I have written a property-based test in five lines that",
    "start": "1428480",
    "end": "1435320"
  },
  {
    "text": "should capture every single edge case and I don't have to go through and I",
    "start": "1435320",
    "end": "1441320"
  },
  {
    "text": "have done this before and it found like three edge cases I'd miss I'm like oh good good now I won't have those bug tickets",
    "start": "1441320",
    "end": "1448039"
  },
  {
    "text": "folded online um I think this is the reason why my laptop is struggling so much I found out",
    "start": "1448039",
    "end": "1455059"
  },
  {
    "text": "sorry a bit of an aside I found out PowerPoint has a fantastic library of 3D models including an animated juggling",
    "start": "1455059",
    "end": "1460880"
  },
  {
    "text": "octopus because reasons",
    "start": "1460880",
    "end": "1465879"
  },
  {
    "text": "um so scenario number four um you've got Ford and reverse functions",
    "start": "1467240",
    "end": "1472760"
  },
  {
    "text": "um so if you're me and you're really bored one day you might go ah I know what's fun to do I'm gonna write some",
    "start": "1472760",
    "end": "1478100"
  },
  {
    "text": "custom serializers and deserializers for my objects because reasons",
    "start": "1478100",
    "end": "1484159"
  },
  {
    "text": "um covid was a really boring time for all of us um again property-based testing you can",
    "start": "1484159",
    "end": "1490159"
  },
  {
    "text": "say oh okay just generate some random input for my serializer function",
    "start": "1490159",
    "end": "1495380"
  },
  {
    "text": "serialize it deserialize it check I've got the same object it's brilliant",
    "start": "1495380",
    "end": "1501980"
  },
  {
    "text": "I've done this before I was writing custom serializers don't ask me why um",
    "start": "1501980",
    "end": "1507260"
  },
  {
    "text": "I ran into an issue where if I added an optional field to my object",
    "start": "1507260",
    "end": "1513740"
  },
  {
    "text": "that wouldn't be a compiler error because it's an optional field I forgot to add it to the serializer so",
    "start": "1513740",
    "end": "1521059"
  },
  {
    "text": "if I'd had standard unit tests that said oh here's an object serialize it deserialize it check it's the same that",
    "start": "1521059",
    "end": "1527120"
  },
  {
    "text": "would have been like oh yeah this is fine because it wouldn't have had the optional field but property-based testing generates those optional fields",
    "start": "1527120",
    "end": "1533120"
  },
  {
    "text": "for me and then it breaks and it goes like Oh save me hours",
    "start": "1533120",
    "end": "1539139"
  },
  {
    "text": "scenario number five which is um so I showed this talk to my company and this is the one they latched onto the best",
    "start": "1540500",
    "end": "1547520"
  },
  {
    "text": "um so this one oh there we go it's on the screen now under the nuclear finding",
    "start": "1547520",
    "end": "1552620"
  },
  {
    "text": "option nuclear exception finding option literally run your code and make sure there's no exceptions uh",
    "start": "1552620",
    "end": "1559400"
  },
  {
    "text": "generate inputs run it there's no exceptions it's so simple",
    "start": "1559400",
    "end": "1565340"
  },
  {
    "text": "but adding this you might find places where there's exceptions you might uh maybe I should make it handle null",
    "start": "1565340",
    "end": "1572900"
  },
  {
    "text": "things because I'm not choosing a strict null checking language that kind of thing you know",
    "start": "1572900",
    "end": "1579580"
  },
  {
    "text": "um oh no sorry last scenario I have lost count",
    "start": "1579620",
    "end": "1585880"
  },
  {
    "text": "one place you might want to find might find using it is when only part of the range of possible outputs is valid",
    "start": "1585919",
    "end": "1593240"
  },
  {
    "text": "um so sometimes this might sound weird sometimes it's very useful to verify",
    "start": "1593240",
    "end": "1599840"
  },
  {
    "text": "your solution is not wrong rather than it's right",
    "start": "1599840",
    "end": "1605059"
  },
  {
    "text": "an example for this is like just check that the value should be always positive",
    "start": "1605059",
    "end": "1610100"
  },
  {
    "text": "check it shouldn't be null check that it's like it might not be the right number",
    "start": "1610100",
    "end": "1615200"
  },
  {
    "text": "but I know it's at least not the wrong number let's say you're writing an absolute",
    "start": "1615200",
    "end": "1622279"
  },
  {
    "text": "function so given any number find the absolute value so the absolute value of seven is seven absolute value of minus",
    "start": "1622279",
    "end": "1628580"
  },
  {
    "text": "five is five so you know for an absolute function the output should always be positive and if you're relying on that",
    "start": "1628580",
    "end": "1635419"
  },
  {
    "text": "behavior put it in a test if it forms part of your specification put it in a test",
    "start": "1635419",
    "end": "1643299"
  },
  {
    "text": "so this is all cool but has anyone actually used this in real life the answer is yes",
    "start": "1644659",
    "end": "1650720"
  },
  {
    "text": "they have um so I did this talk at my company I had a",
    "start": "1650720",
    "end": "1656299"
  },
  {
    "text": "quick look in my company's code base for references to FS check about a year ago",
    "start": "1656299",
    "end": "1661580"
  },
  {
    "text": "and I found 74 code references which is somebody else in the company called Richard Sanderson Pope uh was like yeah",
    "start": "1661580",
    "end": "1669200"
  },
  {
    "text": "this tool is really useful this is before I even yelled about it in front of my company",
    "start": "1669200",
    "end": "1674419"
  },
  {
    "text": "and then after I gave this talk 129",
    "start": "1674419",
    "end": "1681740"
  },
  {
    "text": "since I have single-handedly increased the number of property-based tests my company by 50 and I'm a bit scared if",
    "start": "1681740",
    "end": "1688760"
  },
  {
    "text": "I'm honest oh um",
    "start": "1688760",
    "end": "1694760"
  },
  {
    "text": "so here JavaScript devs you are not safe either I know I've been talking about FS Check and C sharp and Dot net and stuff",
    "start": "1694760",
    "end": "1700880"
  },
  {
    "text": "but actually as I will touch on later you can do this in any language you choose JavaScript",
    "start": "1700880",
    "end": "1706940"
  },
  {
    "text": "typescript have this lovely Library called Fast check they have got a really cool page called",
    "start": "1706940",
    "end": "1712880"
  },
  {
    "text": "issues found where they document issues they have found surprisingly",
    "start": "1712880",
    "end": "1718640"
  },
  {
    "text": "enough in quite big Library so who here has used jest to unit test on the front",
    "start": "1718640",
    "end": "1724460"
  },
  {
    "text": "end not many hands I'm assuming you're mostly backhand then basically just is",
    "start": "1724460",
    "end": "1729559"
  },
  {
    "text": "used for every single react app for testing",
    "start": "1729559",
    "end": "1735020"
  },
  {
    "text": "and fast check found this issue where to strict equals fails to distinguish Zero",
    "start": "1735020",
    "end": "1740120"
  },
  {
    "text": "from five times ten to the minus 324. an obvious test case right",
    "start": "1740120",
    "end": "1749360"
  },
  {
    "text": "for those curious five times ten to the minus 324 is number dot minimum",
    "start": "1749360",
    "end": "1756320"
  },
  {
    "text": "it's like the minimum smallest possible positive number that you can represent it's not a nice number",
    "start": "1756320",
    "end": "1763880"
  },
  {
    "text": "like 2 times 10 to the minus 64 or something it's like some weird number I don't know why but yeah obvious thing to",
    "start": "1763880",
    "end": "1770659"
  },
  {
    "text": "test for right another thing is to equal is not symmetric for set um I haven't exactly",
    "start": "1770659",
    "end": "1778580"
  },
  {
    "text": "I've seen this a couple of times I don't exactly know what's happening but it's not the kind of thing I'd sit there and go oh this is a really obvious test case",
    "start": "1778580",
    "end": "1785240"
  },
  {
    "text": "if I must test for that a true is not equal to like a new Boolean of true or",
    "start": "1785240",
    "end": "1791480"
  },
  {
    "text": "obviously and um as I said",
    "start": "1791480",
    "end": "1797659"
  },
  {
    "text": "you can do it in any language you want if you just Google property-based testing my favorite language",
    "start": "1797659",
    "end": "1803059"
  },
  {
    "text": "um so there's hypothesis for python quick track for Haskell which I believe was the OG property-based testing",
    "start": "1803059",
    "end": "1810020"
  },
  {
    "text": "library jquip for Java quick check for rust prop check for Ruby theft for C if",
    "start": "1810020",
    "end": "1818179"
  },
  {
    "text": "for some reason you're still using C and you're like I must do property-based testing um there's Eris for PHP",
    "start": "1818179",
    "end": "1825740"
  },
  {
    "text": "rapid for go um I think you get the idea the one language I have checked for that doesn't",
    "start": "1825740",
    "end": "1832159"
  },
  {
    "text": "have property-based testing is brain  I think if you're using brain you've got other problems",
    "start": "1832159",
    "end": "1838820"
  },
  {
    "text": "but so let's just go over like I've given this talk a couple of times here's some",
    "start": "1838820",
    "end": "1845179"
  },
  {
    "text": "questions I've been asked before um so can I use this for complex types like",
    "start": "1845179",
    "end": "1851840"
  },
  {
    "text": "cool testing on Integer lists is really fun and all but we don't use energy lists IRL and the answer is yes with a",
    "start": "1851840",
    "end": "1859159"
  },
  {
    "text": "big asterisk which stands for um yes you can be your ease of doing it depends on your language and framework of choice",
    "start": "1859159",
    "end": "1866539"
  },
  {
    "text": "so fscheck.net land um it's great for this",
    "start": "1866539",
    "end": "1872600"
  },
  {
    "text": "um because you've got oh let's say as an example I'm writing this physics simulation I've got some",
    "start": "1872600",
    "end": "1879740"
  },
  {
    "text": "nested objects um two pools that kind of thing",
    "start": "1879740",
    "end": "1885740"
  },
  {
    "text": "um basically if I put this as an argument into a property-based test",
    "start": "1885740",
    "end": "1892039"
  },
  {
    "text": "FS check because it's dot net because you've got runtime types it can inspect this type in it can figure out with some",
    "start": "1892039",
    "end": "1897260"
  },
  {
    "text": "magical reflection stuff how do I actually make a whatever that type is called a moving item and it kind of",
    "start": "1897260",
    "end": "1905240"
  },
  {
    "text": "reverse engineers and generates things for you and you if we just inspect what it's actually generating for us you",
    "start": "1905240",
    "end": "1910460"
  },
  {
    "text": "might look at that and think huh some of those numbers are a bit funny",
    "start": "1910460",
    "end": "1917480"
  },
  {
    "text": "I don't think an object can have a weight of negative Infinity",
    "start": "1917480",
    "end": "1922760"
  },
  {
    "text": "though I'm not sure so what is actually quite interesting about this",
    "start": "1922760",
    "end": "1929360"
  },
  {
    "text": "if you think about your semantics of what you're saying in your type definition you're saying this can be any",
    "start": "1929360",
    "end": "1934940"
  },
  {
    "text": "double which means technically if you're saying oh my weight is negative Infinity that's",
    "start": "1934940",
    "end": "1942679"
  },
  {
    "text": "fine that's valid according to your model like it's not but it is",
    "start": "1942679",
    "end": "1948679"
  },
  {
    "text": "um so this is kind of where maybe your type should actually be",
    "start": "1948679",
    "end": "1954260"
  },
  {
    "text": "reflecting your real world a bit more so maybe you should say ah well the weight isn't a double the weight has to be say",
    "start": "1954260",
    "end": "1960559"
  },
  {
    "text": "a positive number at least like between one and a hundred say",
    "start": "1960559",
    "end": "1966820"
  },
  {
    "text": "but property based testing we'll generate whatever you can tell it to not",
    "start": "1967039",
    "end": "1972260"
  },
  {
    "text": "generate whatever but then you can have you have to be mindful that actually your test isn't covering that entire",
    "start": "1972260",
    "end": "1977539"
  },
  {
    "text": "range of inputs you're actually only testing a specific range of inputs you have to be mindful if you're trying to",
    "start": "1977539",
    "end": "1983600"
  },
  {
    "text": "use this code outside of that range of inputs um it kind of looks a bit silly but",
    "start": "1983600",
    "end": "1990559"
  },
  {
    "text": "if you're using doubles it should work for negative Infinity",
    "start": "1990559",
    "end": "1995019"
  },
  {
    "text": "um let's look at the same in JavaScript typescript so well typescript",
    "start": "1995899",
    "end": "2001419"
  },
  {
    "text": "um this is not so good so one of the um let's say I'm using typescript I've got",
    "start": "2001419",
    "end": "2007059"
  },
  {
    "text": "my interface one big issue with typescript interfaces is uh they're compile time only",
    "start": "2007059",
    "end": "2013539"
  },
  {
    "text": "so at runtime this is just an object you know there's nothing to inspect to figure out that oh I need to have a",
    "start": "2013539",
    "end": "2020140"
  },
  {
    "text": "position with two numbers and it's just an object so what you have to do in Fast",
    "start": "2020140",
    "end": "2026500"
  },
  {
    "text": "Track is you have to kind of re essentially rewrite your interface using",
    "start": "2026500",
    "end": "2031779"
  },
  {
    "text": "these like FC things to basically say ah this is how you would generate this object at runtime",
    "start": "2031779",
    "end": "2039539"
  },
  {
    "text": "um here's a bit of time to read the slide",
    "start": "2040000",
    "end": "2043500"
  },
  {
    "text": "so doing this for every single object that you want to add in can be a bit onerous um I have had",
    "start": "2050200",
    "end": "2056260"
  },
  {
    "text": "a bit of like experimenting with like schema validation libraries and reverse engineering those to generate like a",
    "start": "2056260",
    "end": "2061898"
  },
  {
    "text": "runtime generator I guess but I haven't used that in production yet so",
    "start": "2061899",
    "end": "2067000"
  },
  {
    "text": "interesting idea but I haven't done it yet so yes can I use this for complex types yes but no it depends",
    "start": "2067000",
    "end": "2076500"
  },
  {
    "text": "um question I I got asked loads of time I'm using F sharp is can I use this from C sharp yes F sharp C sharp you can use",
    "start": "2077440",
    "end": "2084339"
  },
  {
    "text": "them interchangeably they're both.net but I've compiled down to missile this is what it looks like",
    "start": "2084339",
    "end": "2091658"
  },
  {
    "text": "it doesn't look as nice it's kind of a bit janky you're kind of you're not reading from top to bottom as much",
    "start": "2091659",
    "end": "2097060"
  },
  {
    "text": "anymore you kind of having to do something I don't know maybe I'm incredibly biased because I don't like C sharp and I love F sharp but um",
    "start": "2097060",
    "end": "2105060"
  },
  {
    "text": "um next question is are there any performance implications",
    "start": "2106839",
    "end": "2112780"
  },
  {
    "text": "to which the answer is yes no sort of it depends on what you mean by performance",
    "start": "2112780",
    "end": "2119460"
  },
  {
    "text": "um so one really unfortunate uh thing of the rule about rule of the universe is like",
    "start": "2119920",
    "end": "2126520"
  },
  {
    "text": "do more stuff means it takes more time so FS checks running your tests 100 times",
    "start": "2126520",
    "end": "2133060"
  },
  {
    "text": "so it's going to take a bit longer um there we go should it take a hundred",
    "start": "2133060",
    "end": "2139060"
  },
  {
    "text": "times as long um this is where I'm probably gonna sound like a complete idiot in front of you",
    "start": "2139060",
    "end": "2144640"
  },
  {
    "text": "um I don't actually know how test Runners work under the hood mostly because I don't really care how test",
    "start": "2144640",
    "end": "2149800"
  },
  {
    "text": "Runners work under third as long as they work that's fine by me so if we have our",
    "start": "2149800",
    "end": "2155920"
  },
  {
    "text": "traditional unit test you know tester is equal to True um let's have an equivalent",
    "start": "2155920",
    "end": "2161079"
  },
  {
    "text": "property-based test which is generate a number and check that number is equal to itself let's put them against each other see",
    "start": "2161079",
    "end": "2168760"
  },
  {
    "text": "what happens um so I've run it in vs code and this is the output so traditional",
    "start": "2168760",
    "end": "2175359"
  },
  {
    "text": "unit test takes nine seconds property based test 242 milliseconds sorry and it's like that's not a factor of 100",
    "start": "2175359",
    "end": "2181780"
  },
  {
    "text": "even though it's running 100 times even weirder here it says it ran 20 tests and 813",
    "start": "2181780",
    "end": "2189460"
  },
  {
    "text": "milliseconds and if you expand it",
    "start": "2189460",
    "end": "2194500"
  },
  {
    "text": "um it shows that only the first one actually took any time at all to run so I have a feeling something funny is happening on in visual Studios test",
    "start": "2194500",
    "end": "2200680"
  },
  {
    "text": "Runner but the point I'm trying to make is I don't really care it's a difference in milliseconds um I spend way more time",
    "start": "2200680",
    "end": "2207220"
  },
  {
    "text": "getting coffee than 200 milliseconds so that's fine by me",
    "start": "2207220",
    "end": "2212700"
  },
  {
    "text": "um this is a bit of an aside on the topic of performance",
    "start": "2212920",
    "end": "2217960"
  },
  {
    "text": "just the time it takes to run your code isn't the only Factor so you've broadly",
    "start": "2217960",
    "end": "2223180"
  },
  {
    "text": "got three categories of Errors you've got compiler errors so that's when your types are wrong for example your syntax",
    "start": "2223180",
    "end": "2229359"
  },
  {
    "text": "is wrong runtime errors where you've got some something happening at runtime say",
    "start": "2229359",
    "end": "2235359"
  },
  {
    "text": "your value is null and you're trying to de-reference it you get a no reference exception and logic errors where the code runs",
    "start": "2235359",
    "end": "2242079"
  },
  {
    "text": "fine but it gives the wrong answers so compiler errors are the easiest thing",
    "start": "2242079",
    "end": "2247359"
  },
  {
    "text": "to identify and fix and logic errors are the hardest to identify and fix logic errors normally someone looking at the",
    "start": "2247359",
    "end": "2253000"
  },
  {
    "text": "output going something seems a bit wrong so",
    "start": "2253000",
    "end": "2259720"
  },
  {
    "text": "I'll admit I'm a front-end developer I work in typescript I absolutely love the typescript compiler I think the typing",
    "start": "2259720",
    "end": "2266320"
  },
  {
    "text": "system is fantastic and the best thing that ever happened um I would like people to come up and tell",
    "start": "2266320",
    "end": "2273099"
  },
  {
    "text": "me I'm wrong so I can show them that they are wrong anyway",
    "start": "2273099",
    "end": "2278380"
  },
  {
    "text": "um so let's say I've got a function takes two inputs and my specification for my input is oh well",
    "start": "2278380",
    "end": "2285040"
  },
  {
    "text": "you can give either neither of the arguments or both of the arguments",
    "start": "2285040",
    "end": "2290980"
  },
  {
    "text": "so I write my function I say oh if if I'm only given one then throw okay that's fine have a bit of time to read",
    "start": "2290980",
    "end": "2297940"
  },
  {
    "text": "the slide",
    "start": "2297940",
    "end": "2300420"
  },
  {
    "text": "so I can call my function like this I can call it with nothing one argument or two arguments",
    "start": "2308920",
    "end": "2315579"
  },
  {
    "text": "um typescript's like yeah this is this is fine this is fine this is great um of course",
    "start": "2315579",
    "end": "2321400"
  },
  {
    "text": "I would have to write uh unit tests that say",
    "start": "2321400",
    "end": "2326740"
  },
  {
    "text": "oh if you're given in this in the second case when you're given one thing just",
    "start": "2326740",
    "end": "2331780"
  },
  {
    "text": "check that it throws I have to write a unit test for that I don't like writing writing unit tests",
    "start": "2331780",
    "end": "2337660"
  },
  {
    "text": "what I can do instead is I can say oh how can I shove this from a runtime error into a compiler error and I can",
    "start": "2337660",
    "end": "2344800"
  },
  {
    "text": "actually do something quite fancy I can group up my arguments and say oh if you give me nothing",
    "start": "2344800",
    "end": "2351820"
  },
  {
    "text": "or you give me an object containing both the arguments",
    "start": "2351820",
    "end": "2356980"
  },
  {
    "text": "so now I have to call it like this so I can say my funk but better with no arguments or my funk but better with an",
    "start": "2356980",
    "end": "2362440"
  },
  {
    "text": "object containing two arguments and what happens if I try to call it with one argument well typescript kind",
    "start": "2362440",
    "end": "2369400"
  },
  {
    "text": "of turns around and goes no no no no no Lucy no you can't do that that's naughty you need to have both of them",
    "start": "2369400",
    "end": "2375760"
  },
  {
    "text": "and why am I covering this well I don't need to write a unit test for",
    "start": "2375760",
    "end": "2381339"
  },
  {
    "text": "this case compiler catches it so I like my compiler rely on my compiler a",
    "start": "2381339",
    "end": "2386859"
  },
  {
    "text": "lot I don't have to write a unit test for this the best code is no code so the fastest test is no test at all",
    "start": "2386859",
    "end": "2393640"
  },
  {
    "text": "so actually taking the time to like shove your errors from runtime into compiler errors is so helpful and can",
    "start": "2393640",
    "end": "2400240"
  },
  {
    "text": "really help you with performance",
    "start": "2400240",
    "end": "2403920"
  },
  {
    "text": "so it's kind of neat that the compiler can do this um",
    "start": "2406119",
    "end": "2411940"
  },
  {
    "text": "is it more or less performant I kind of don't care I'm working in JavaScript I've got bigger issues",
    "start": "2411940",
    "end": "2418960"
  },
  {
    "text": "um I care more about the readability and the intent that I'm carrying like that I'm like saying oh you have to have both",
    "start": "2418960",
    "end": "2425320"
  },
  {
    "text": "or neither that's it nothing else shorting that feedback loop so someone else using my code is aware that they",
    "start": "2425320",
    "end": "2432040"
  },
  {
    "text": "have to have both of them is more important to me than wasting potentially milliseconds",
    "start": "2432040",
    "end": "2437800"
  },
  {
    "text": "um unfortunately one of the terrible truths about life is that not everything can be",
    "start": "2437800",
    "end": "2443980"
  },
  {
    "text": "caught by a compiler error sometimes you have to deal with runtime errors and that's kind of what testing is for",
    "start": "2443980",
    "end": "2450940"
  },
  {
    "text": "really it's for those for testing catching those runtime errors sorry testing pyramid I'm sure you will",
    "start": "2450940",
    "end": "2457480"
  },
  {
    "text": "aware every single person draws it differently every single person has a different number of steps and a",
    "start": "2457480",
    "end": "2463480"
  },
  {
    "text": "different number of things but this is my one so you've got",
    "start": "2463480",
    "end": "2469240"
  },
  {
    "text": "the lowly unit test at the bottom so testing a function a single function on",
    "start": "2469240",
    "end": "2474280"
  },
  {
    "text": "its own then you've got integration tests so this might be testing an entire for",
    "start": "2474280",
    "end": "2480520"
  },
  {
    "text": "example UI um checking it renders correctly checking that the buttons work correctly checking the API calls being made",
    "start": "2480520",
    "end": "2486760"
  },
  {
    "text": "correctly but mocking out all of those API calls so it's the entire UI but by itself",
    "start": "2486760",
    "end": "2492579"
  },
  {
    "text": "and then end-to-end tests which are you know testing your service in a live",
    "start": "2492579",
    "end": "2498339"
  },
  {
    "text": "environment with like other services and databases and all that kind of nastiness that happens and yeah",
    "start": "2498339",
    "end": "2506260"
  },
  {
    "text": "um my testing pyramid though has got the compiler at the bottom because I believe the",
    "start": "2506260",
    "end": "2512320"
  },
  {
    "text": "actually the compiler like using that effectively is the most important thing",
    "start": "2512320",
    "end": "2517359"
  },
  {
    "text": "about a testing pyramid but maybe that's just me um point I want to make is",
    "start": "2517359",
    "end": "2522820"
  },
  {
    "text": "property-based testing lives here lives in the unit test area it's for you could do it higher up",
    "start": "2522820",
    "end": "2528520"
  },
  {
    "text": "one of the nice things about unit tests is they're small and quick to run therefore running them 100 times is okay",
    "start": "2528520",
    "end": "2534700"
  },
  {
    "text": "end-to-end tests might take in the order of minutes to run so running them 100 times is um",
    "start": "2534700",
    "end": "2540220"
  },
  {
    "text": "that is problematic to me",
    "start": "2540220",
    "end": "2544078"
  },
  {
    "text": "so let's just talk about deployment writing code",
    "start": "2545560",
    "end": "2551680"
  },
  {
    "text": "first of all I write my code with my best buddy which is of course the compiler next I raise a PR get it merged main",
    "start": "2551680",
    "end": "2559839"
  },
  {
    "text": "send it off to a build server then I deploy it out to test check everything's running there nothing's on fire then I",
    "start": "2559839",
    "end": "2566440"
  },
  {
    "text": "just check it out to production and you know hope that nothing is on fire and they",
    "start": "2566440",
    "end": "2571540"
  },
  {
    "text": "haven't caused a prod outage again um so property-based testing can help",
    "start": "2571540",
    "end": "2577180"
  },
  {
    "text": "you catch errors on this slide uh you know when I'm working with my",
    "start": "2577180",
    "end": "2582400"
  },
  {
    "text": "compiler or I'm building my code before they can cause issues on the prod side",
    "start": "2582400",
    "end": "2589020"
  },
  {
    "text": "so to me the performance of my test I'm not too concerned about I'd rather my test took a few extra seconds to run",
    "start": "2589119",
    "end": "2595560"
  },
  {
    "text": "than having a P1 bug or an outage or something like that because that takes a",
    "start": "2595560",
    "end": "2600819"
  },
  {
    "text": "few more seconds to um to resolve and isn't good for my stress levels",
    "start": "2600819",
    "end": "2608619"
  },
  {
    "text": "so the headline figure of like property-based testing being 30 times slower can be really scary but in the",
    "start": "2608619",
    "end": "2614500"
  },
  {
    "text": "long run doesn't matter um so it does test Suite performance really matter just to contradict myself",
    "start": "2614500",
    "end": "2620920"
  },
  {
    "text": "maybe um if you go wow I love property-based testing so much I'm going to go out and",
    "start": "2620920",
    "end": "2626560"
  },
  {
    "text": "change everything tomorrow to be probably racist and you're like hey Lucy why is weight test suddenly taking like",
    "start": "2626560",
    "end": "2632200"
  },
  {
    "text": "30 minutes to run and said one minute and I'm like oh dear I'm so sorry so this gets on to the next question",
    "start": "2632200",
    "end": "2639640"
  },
  {
    "text": "which is when shouldn't I use property-based testing um and I know you're probably sat there",
    "start": "2639640",
    "end": "2645579"
  },
  {
    "text": "going oh my baby my lovely baby I don't kind of want you to look back a few years time be like oh I remember when I",
    "start": "2645579",
    "end": "2651880"
  },
  {
    "text": "thought you were cool and I was like I hate you um no one's ever done that right",
    "start": "2651880",
    "end": "2658000"
  },
  {
    "text": "um so yeah when shouldn't you use it you shouldn't use it if you don't have standard unit tests",
    "start": "2658000",
    "end": "2665260"
  },
  {
    "text": "like a unit test like take the list one two three reverse it and you get three two one that is so easy to understand",
    "start": "2665260",
    "end": "2671680"
  },
  {
    "text": "it's easy to debug it's so useful just to have that single example to say oh that's what that does",
    "start": "2671680",
    "end": "2678700"
  },
  {
    "text": "don't use it if standard unit tests are sufficient so one example you might have",
    "start": "2678700",
    "end": "2684099"
  },
  {
    "text": "within with an integer list there's a very very large number of lists possible",
    "start": "2684099",
    "end": "2691180"
  },
  {
    "text": "let's say you're using an enum well you know that there's going to be like only a handful of cases like four or five so",
    "start": "2691180",
    "end": "2697480"
  },
  {
    "text": "just exhaustively test every case uh don't use it if you want to test the",
    "start": "2697480",
    "end": "2702700"
  },
  {
    "text": "specific case this might seem a bit obvious but if you have a specific Edge case to test that specific Edge case",
    "start": "2702700",
    "end": "2710220"
  },
  {
    "text": "um shouldn't use it if you can't identify suitable properties so one of the hardest things about property-based",
    "start": "2711700",
    "end": "2717700"
  },
  {
    "text": "testing is actually figuring out what are my properties properties can be hard",
    "start": "2717700",
    "end": "2722859"
  },
  {
    "text": "to identify but it is a very useful exercise to go through and try and",
    "start": "2722859",
    "end": "2728319"
  },
  {
    "text": "identify them and you should not use property-based",
    "start": "2728319",
    "end": "2733359"
  },
  {
    "text": "testing if your models are not suitable so let's say in that example with the",
    "start": "2733359",
    "end": "2739420"
  },
  {
    "text": "moving item object where it was generating things of like negative Infinity weight if I'm trying to add property-based",
    "start": "2739420",
    "end": "2746319"
  },
  {
    "text": "testing into that code base and I'd look at that and I go oh well these models are not technically correct",
    "start": "2746319",
    "end": "2753280"
  },
  {
    "text": "like it's generating junk data and you have to go through and filter out that junk beta",
    "start": "2753280",
    "end": "2758740"
  },
  {
    "text": "and then you spend so long basically reverse engineering your code generation",
    "start": "2758740",
    "end": "2765838"
  },
  {
    "text": "to kind of write unit tests that work properly and then you have tests that are more complex than the code you're",
    "start": "2766060",
    "end": "2773140"
  },
  {
    "text": "testing then it's like who tests the unit tests so if you don't have suitable models actually generating your things",
    "start": "2773140",
    "end": "2781060"
  },
  {
    "text": "can be very uh coming up with suitable properties can be very difficult",
    "start": "2781060",
    "end": "2787359"
  },
  {
    "text": "um but yes you'll be glad to know that I'm pretty",
    "start": "2787359",
    "end": "2792940"
  },
  {
    "text": "much done talking now so in conclusion hopefully you remember this an hour ago",
    "start": "2792940",
    "end": "2800319"
  },
  {
    "text": "property-based testing is a technique for testing statements of the type for all X that satisfy some precondition",
    "start": "2800319",
    "end": "2806319"
  },
  {
    "text": "some predicate will hold it can give you confidence that your query behaves correctly across a wide",
    "start": "2806319",
    "end": "2811839"
  },
  {
    "text": "range of inputs it can help you find bugs in your code resulting from inputs you never would",
    "start": "2811839",
    "end": "2817000"
  },
  {
    "text": "have thought to test and finally this technique can and should be used alongside existing unit",
    "start": "2817000",
    "end": "2823480"
  },
  {
    "text": "tests um you can start using this tomorrow but I'm sure you'll probably be busy at the",
    "start": "2823480",
    "end": "2828819"
  },
  {
    "text": "conference so maybe next week um and with that I will say thank you very",
    "start": "2828819",
    "end": "2835599"
  },
  {
    "text": "much for listening [Applause]",
    "start": "2835599",
    "end": "2845630"
  }
]