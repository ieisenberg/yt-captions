[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "good morning this is a letdown after the great keynote we talked about elections",
    "start": "5580",
    "end": "10840"
  },
  {
    "text": "and saving a democracy and I was like oh yeah how about a little algorithm I'll",
    "start": "10840",
    "end": "18130"
  },
  {
    "text": "try to not disappoint too much this talk is about is it's not about any language",
    "start": "18130",
    "end": "25720"
  },
  {
    "text": "in particular it's about an algorithm few algorithms in fact and the tentative",
    "start": "25720",
    "end": "33340"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "subtitle number one is that computers love boredom in many ways they are",
    "start": "33340",
    "end": "39670"
  },
  {
    "text": "increasingly and like people they like code that's not surprising the best code",
    "start": "39670",
    "end": "47260"
  },
  {
    "text": "from a computers perspective is a main function that is 600,000 lines and it does no loops no nothing it just goes",
    "start": "47260",
    "end": "54129"
  },
  {
    "text": "straight line that would be the ideal program which actually some of us might",
    "start": "54129",
    "end": "59680"
  },
  {
    "text": "may have written or seen in our maintenance days subtitle number two is",
    "start": "59680",
    "end": "67060"
  },
  {
    "text": "what does code that wants to be first looked like this is a question that's been tormenting me because we do have",
    "start": "67060",
    "end": "72910"
  },
  {
    "text": "good intuition about you look at code and you don't have a good intuition on things that want to be fast versus",
    "start": "72910",
    "end": "81160"
  },
  {
    "text": "things that are not that fast at all we do have intuition for other things for example this is Norway who drives a",
    "start": "81160",
    "end": "88990"
  },
  {
    "text": "Tesla like zero people okay oh one thank you so I bought a Tesla",
    "start": "88990",
    "end": "98710"
  },
  {
    "text": "which is completely kind of a completely non economical idea in the in the United",
    "start": "98710",
    "end": "104200"
  },
  {
    "text": "States because like everybody in the United States wants to destroy your Tesla like people from all walks of life",
    "start": "104200",
    "end": "112560"
  },
  {
    "text": "I'm not kidding like a nursing mother would come and scratch your Tesla with",
    "start": "112560",
    "end": "118120"
  },
  {
    "text": "the king like rich people poor people the pizza guy anybody everybody wants to",
    "start": "118120",
    "end": "124570"
  },
  {
    "text": "scratch your Tesla they want to vandalize it I have no idea why and I think that the day I think they think",
    "start": "124570",
    "end": "130479"
  },
  {
    "text": "they're doing good things because the nursing mother there put her the baby in the car seat and they come they've",
    "start": "130479",
    "end": "136120"
  },
  {
    "text": "analyzed your car and then they go to the video we did a good deed today you know it helps society I don't know so I got a",
    "start": "136120",
    "end": "144319"
  },
  {
    "text": "Tesla you know even though it's kind of a crazy idea in the States because on geometric reasons you see",
    "start": "144319",
    "end": "154129"
  },
  {
    "text": "when I was in high school I was very passionate about physics and I was very passionate about cars and I was very",
    "start": "154129",
    "end": "159500"
  },
  {
    "text": "excited to learn about the auto engine how does it work right so first I goes through the",
    "start": "159500",
    "end": "165349"
  },
  {
    "text": "physics class like the Carnot cycle okay fine and then you get like you see the auto engine like the internal combustion",
    "start": "165349",
    "end": "171980"
  },
  {
    "text": "engine the schematics and everything and it was a bit of a letdown I'm not sure",
    "start": "171980",
    "end": "177530"
  },
  {
    "text": "if you even remember those like schematics with the cylinder and the piston right and it's just kind of weird",
    "start": "177530",
    "end": "184129"
  },
  {
    "text": "they look like a like an odd adult toy or something they look good at all it didn't look",
    "start": "184129",
    "end": "189379"
  },
  {
    "text": "like you wanted to move it looked like want to produce a lot of vibration and out of heat and kind of incidentally as",
    "start": "189379",
    "end": "195889"
  },
  {
    "text": "a perk you could get some mechanical work out of it and that is I okay fine so there's a cylinder with a piston",
    "start": "195889",
    "end": "201829"
  },
  {
    "text": "looks like a pump or something but you kind of transform that very awkwardly that motion into rotation and okay so",
    "start": "201829",
    "end": "209120"
  },
  {
    "text": "that moves fine so then you look at an actual motor an engine right a gas",
    "start": "209120",
    "end": "215389"
  },
  {
    "text": "engine and it looks like a hunk of iron it looks nothing like anything that",
    "start": "215389",
    "end": "220459"
  },
  {
    "text": "wants to move or rotate or do anything interesting in contrast you have arc electric mode motor it's like it wants",
    "start": "220459",
    "end": "227389"
  },
  {
    "text": "to rotate just by looking at it once this thing wants to turn it's entirely symmetrical it makes a lot of sense",
    "start": "227389",
    "end": "233989"
  },
  {
    "text": "you have the study have the rotor you look at it this thing is gonna turn so",
    "start": "233989",
    "end": "239629"
  },
  {
    "text": "on on geometrical considerations alone I'm thinking you know I want an electric motor I don't want on a motor that",
    "start": "239629",
    "end": "244790"
  },
  {
    "text": "doesn't want to run instead it wants to produce vibration and heat similarly I",
    "start": "244790",
    "end": "250159"
  },
  {
    "text": "want to figure out an answer to this question what does go that wants to be fast look like anyone has ideas about",
    "start": "250159",
    "end": "258469"
  },
  {
    "text": "what it's got to be short okay not too long",
    "start": "258469",
    "end": "265880"
  },
  {
    "text": "other ideas yes it's got to be simple thank you other ideas not very indented",
    "start": "265880",
    "end": "276920"
  },
  {
    "text": "kind of left-aligned I'm not kidding",
    "start": "276920",
    "end": "283700"
  },
  {
    "text": "that's a great idea because not so in the in the UNIX kernel in the Linux",
    "start": "283700",
    "end": "289220"
  },
  {
    "text": "kernel the coding standard is yeah I see it some laughing already",
    "start": "289220",
    "end": "294860"
  },
  {
    "text": "so indent is 8 spaces and maximum size it 8080 columns that's your really state",
    "start": "294860",
    "end": "303220"
  },
  {
    "text": "and you know I I can only assume it has to do something with the efficiency because by the time that indentation",
    "start": "303220",
    "end": "310280"
  },
  {
    "text": "level is like you know what I don't have room anymore to do things so you tend to avoid that it wants to be aligned to the",
    "start": "310280",
    "end": "320000"
  },
  {
    "text": "left and we're gonna see all of all of that in the code that follows other",
    "start": "320000",
    "end": "325940"
  },
  {
    "text": "ideas about code that wants to be fast few branches that would go together with",
    "start": "325940",
    "end": "332950"
  },
  {
    "text": "huh fewer log few locations reuse memory yes other thoughts sorry nor all loops",
    "start": "332950",
    "end": "343220"
  },
  {
    "text": "well that's more for structuring actually I'm against that like as of 2019 all of my looks are infinite",
    "start": "343220",
    "end": "349660"
  },
  {
    "text": "because that's the fastest code infinite",
    "start": "349660",
    "end": "355160"
  },
  {
    "text": "loops are the fastest I realized the paradox here there's a bit of an irony",
    "start": "355160",
    "end": "361150"
  },
  {
    "text": "right yes poor not I'm not touching too much data at a time and I think there's",
    "start": "361150",
    "end": "368240"
  },
  {
    "text": "one more one one component that's interesting which is you don't want to mix code of different heat together you",
    "start": "368240",
    "end": "376430"
  },
  {
    "text": "don't do inter Spears hot lines with cold lines you under code to have like",
    "start": "376430",
    "end": "382180"
  },
  {
    "text": "precise great alike you want your hard code to stay together cold cold stays together the wrong thing",
    "start": "382180",
    "end": "389180"
  },
  {
    "text": "is if I test and unlikely if some are in the middle of a hot loop okay so let's",
    "start": "389180",
    "end": "395419"
  },
  {
    "text": "take a look at this kind of stuff and I'm going to sort him both as an example motivating example and as a good testbed for",
    "start": "395419",
    "end": "402639"
  },
  {
    "text": "optimizing software going to do a lot of macro optimization and quite a bit of",
    "start": "402639",
    "end": "408050"
  },
  {
    "text": "micro optimization today so I wasn't able sorting is only the most researched",
    "start": "408050",
    "end": "413840"
  },
  {
    "start": "411000",
    "end": "411000"
  },
  {
    "text": "CEA's problem many algorithms assume you know let's sort that data now and see",
    "start": "413840",
    "end": "419810"
  },
  {
    "text": "the 100 million paper on the topic reading so far so it's it's a very",
    "start": "419810",
    "end": "425120"
  },
  {
    "text": "popular algorithm and amazingly there's still like work on sorting people still",
    "start": "425120",
    "end": "430789"
  },
  {
    "text": "are like you know drawing blood from that stone it's amazing right in my opinion every program must",
    "start": "430789",
    "end": "438529"
  },
  {
    "text": "implement sort at some point in their career you must have done an implement sort all right anybody playing out the",
    "start": "438529",
    "end": "444590"
  },
  {
    "text": "instrument and all right what do you play trump trombone",
    "start": "444590",
    "end": "450680"
  },
  {
    "text": "what is the classic piece that every trombone is must know okay well what is",
    "start": "450680",
    "end": "459830"
  },
  {
    "text": "the classic piece at any pianist must know la campanella' oh that's hard as",
    "start": "459830",
    "end": "466039"
  },
  {
    "text": "Brahms Paganini that's hard few real easy yeah awesome for cellist Bach and er nah marry among",
    "start": "466039",
    "end": "475460"
  },
  {
    "text": "their number one I'm not going to sing for you right now because that's gonna",
    "start": "475460",
    "end": "481129"
  },
  {
    "text": "be inappropriate so there's a classic piece in every for every music ever instrument of Rosanna",
    "start": "481129",
    "end": "487129"
  },
  {
    "text": "and for you sort is it you must sit down",
    "start": "487129",
    "end": "493009"
  },
  {
    "text": "and implement sort at least once in your career and you know what there is a likelihood you can implement it and make",
    "start": "493009",
    "end": "499039"
  },
  {
    "text": "it quadratic because I did it like several times like that and you know it",
    "start": "499039",
    "end": "505610"
  },
  {
    "text": "happens it's not it's solo at any rate quicksort would be the algorithm of",
    "start": "505610",
    "end": "511069"
  },
  {
    "start": "508000",
    "end": "508000"
  },
  {
    "text": "choice today in the industry and it's the implementation standard sort in a steep losses library in it the",
    "start": "511069",
    "end": "517279"
  },
  {
    "text": "implementation of even like in the system level whatever so it's fundamentally easy to code and analyze",
    "start": "517279",
    "end": "523490"
  },
  {
    "text": "can spend time energy talent on corner cases optimization just because it's simple",
    "start": "523490",
    "end": "529400"
  },
  {
    "text": "it's fast on average just like computers it does little work on almost sorted data if you code it carefully and this",
    "start": "529400",
    "end": "536570"
  },
  {
    "text": "is a principle in efficient programming whenever you want to shuffle they are heed importance should be cheap there is",
    "start": "536570",
    "end": "544430"
  },
  {
    "text": "a there's another algorithm called heap sort right and idempotence first",
    "start": "544430",
    "end": "550760"
  },
  {
    "text": "heapsort is not cheap because we all start an array what does the he was a heap sort do as the first order of",
    "start": "550760",
    "end": "557390"
  },
  {
    "text": "business he's going to bring the smallest element to the end the greatest",
    "start": "557390",
    "end": "564800"
  },
  {
    "text": "element to the beginning the largest comes to the beginning because motives",
    "start": "564800",
    "end": "572110"
  },
  {
    "text": "right so that's exactly it's gonna is gonna shuffle the array so bad that actually the average case and the worst",
    "start": "572110",
    "end": "579470"
  },
  {
    "text": "case are indistinguishable and that's I mean you know people don't use heaps or",
    "start": "579470",
    "end": "584930"
  },
  {
    "text": "for that reason and there's a lot of improvements to heaps or people have worked on it exactly to eliminate this",
    "start": "584930",
    "end": "590780"
  },
  {
    "text": "major disadvantage which is I the importance for heapsort is not cheap it turns out in life very often an array",
    "start": "590780",
    "end": "597260"
  },
  {
    "text": "want to sort has already quite a bit of water such as like in Python the steam sort right and team sort looks and takes",
    "start": "597260",
    "end": "605120"
  },
  {
    "text": "advantage of pre-sorted patterns in your data and it's successful on a bunch of",
    "start": "605120",
    "end": "610750"
  },
  {
    "text": "real-world cases now unemployed as your",
    "start": "610750",
    "end": "617600"
  },
  {
    "text": "quicksort would be quite simple actually people implement it either with the with",
    "start": "617600",
    "end": "623180"
  },
  {
    "text": "the loop and one recursion or with two recursion and what recursions i want to implant with a loop just because there",
    "start": "623180",
    "end": "631460"
  },
  {
    "text": "is a tail recursion which is the loop and there's an actual recursion which is visible here right so that would be my",
    "start": "631460",
    "end": "638000"
  },
  {
    "text": "quicksort so we are partition we create a pivot which you select a pivot with partitioner on the pivot and then we",
    "start": "638000",
    "end": "644180"
  },
  {
    "text": "quicksort the left and the right sub ranges nothing sensation here of course",
    "start": "644180",
    "end": "651830"
  },
  {
    "text": "there's refinements like you detect you use introspection you introspective sort",
    "start": "651830",
    "end": "656960"
  },
  {
    "text": "you kind of see if you're doing well if you're running quadratic then is going to switch to a different algorithm such",
    "start": "656960",
    "end": "662060"
  },
  {
    "text": "as heap sort etc etc but those are rare I don't think that germane to the essence of quick",
    "start": "662060",
    "end": "668810"
  },
  {
    "text": "sorting now what you can see if you inspect any standard library",
    "start": "668810",
    "end": "675139"
  },
  {
    "text": "implementation and any serious sort implementation in general you're going",
    "start": "675139",
    "end": "680899"
  },
  {
    "text": "to see that it's quicksort is poor for small data for small ranges right small",
    "start": "680899",
    "end": "688940"
  },
  {
    "text": "amount of elements small number of elements is not going to do that well so what most implementations do in the real",
    "start": "688940",
    "end": "696290"
  },
  {
    "text": "world is going they're going to choose a threshold and as long as the array to be",
    "start": "696290",
    "end": "702589"
  },
  {
    "text": "sorted is large and at a threshold they're going to do the quick sorting but at the end they're going to fall",
    "start": "702589",
    "end": "709040"
  },
  {
    "text": "through and use a separate routine for sorting the smaller portions of the array what happens in practice is that",
    "start": "709040",
    "end": "716829"
  },
  {
    "text": "quicksort is going to divide the array into unsorted small but properly ordered",
    "start": "716829",
    "end": "722209"
  },
  {
    "text": "sub arrays and then there's gonna be some algorithm that's going to take care of the little arrays and this is what",
    "start": "722209",
    "end": "730010"
  },
  {
    "text": "we're gonna talk about this today so this is the yes fast code has a lot of",
    "start": "730010",
    "end": "742279"
  },
  {
    "text": "special cases because somebody thought about it well it I think it depends here because",
    "start": "742279",
    "end": "750800"
  },
  {
    "text": "I noticed that a lot of code with special cases is better it's better rewritten as integrated with in the",
    "start": "750800",
    "end": "757940"
  },
  {
    "text": "general case as actually there's going to be an example here yes",
    "start": "757940",
    "end": "764260"
  },
  {
    "text": "doesn't your implementation call small sort far too many times it does yeah but",
    "start": "765160",
    "end": "770540"
  },
  {
    "text": "it's going to be a carefully tuned algorithm for small arrays sorry I think",
    "start": "770540",
    "end": "781790"
  },
  {
    "text": "I think there's no unnecessary work if that okay and the threshold is 16 32 16",
    "start": "781790",
    "end": "790339"
  },
  {
    "text": "GCC stereotone visual studio and that's kind of a longer discussion you know maybe you should select threshold append",
    "start": "790339",
    "end": "797060"
  },
  {
    "text": "the data you get here right because for example you sort float and bubble there",
    "start": "797060",
    "end": "803870"
  },
  {
    "text": "you know there are different sizes so if you sort float maybe you want a larger threshold than if you sort double etc",
    "start": "803870",
    "end": "810220"
  },
  {
    "text": "because the cost of swapping those is different but you know I think they want",
    "start": "810220",
    "end": "816500"
  },
  {
    "text": "to keep it simple so they they have a set amount fine so the usual",
    "start": "816500",
    "end": "824210"
  },
  {
    "start": "820000",
    "end": "820000"
  },
  {
    "text": "implementation small sort that you're gonna find is optimistic linear",
    "start": "824210",
    "end": "829700"
  },
  {
    "text": "insertion sort so it starts from the left left-hand side of the small array and it's going to increasingly keep the",
    "start": "829700",
    "end": "837350"
  },
  {
    "text": "portion to the left sort that then is going to insert into the sorted portion the element appropriately moving stuff",
    "start": "837350",
    "end": "843590"
  },
  {
    "text": "around as needed so that it's optimistic because it starts searching for the spot",
    "start": "843590",
    "end": "849440"
  },
  {
    "text": "from the from the right edge not from the left edge optima seeds is likely to find it toward the end right so it works",
    "start": "849440",
    "end": "856460"
  },
  {
    "text": "best for a little array that's already sorted it just works perfectly it's gonna do very little work so that would",
    "start": "856460",
    "end": "863450"
  },
  {
    "text": "be the typical implementation so to summarise sorting is solved for large",
    "start": "863450",
    "end": "872030"
  },
  {
    "text": "inputs because we just use quicksort of course there's along this longer discussions about the you know corner",
    "start": "872030",
    "end": "877880"
  },
  {
    "text": "case is quadratic whatever weird there are attacks you name it so you know it's",
    "start": "877880",
    "end": "884180"
  },
  {
    "text": "solved with qualifications and error codes and footnote right that kind of",
    "start": "884180",
    "end": "893690"
  },
  {
    "text": "stuff small input C's are also so from essentially optimal solutions are known",
    "start": "893690",
    "end": "899570"
  },
  {
    "text": "for up to 15 elements optimal means minimum amount of comparisons mean",
    "start": "899570",
    "end": "904930"
  },
  {
    "text": "swapping and essentially there's Bruce brute-force solutions that are known to",
    "start": "904930",
    "end": "910550"
  },
  {
    "text": "sort up to 15 elements there is a different algorithm for each number and the this beauty has evolved over years",
    "start": "910550",
    "end": "918700"
  },
  {
    "text": "like you know when close wrote his magnum opus it was like I forgot maybe nine ten twelve and then people",
    "start": "918700",
    "end": "926030"
  },
  {
    "text": "discovering like the latest and greatest is fifteen awesome",
    "start": "926030",
    "end": "931070"
  },
  {
    "text": "the problem being here code size is going to work against that because that",
    "start": "931070",
    "end": "936620"
  },
  {
    "text": "15 elements sort that there's going to be a hunk of code that's actually going to work against the performance-wise",
    "start": "936620",
    "end": "942250"
  },
  {
    "text": "because you know the instruction cache is going to get saturated and it's not going to become pleasant at all to use",
    "start": "942250",
    "end": "949730"
  },
  {
    "text": "that code so let's say again solve with qualifications footnote and whatnot and",
    "start": "949730",
    "end": "956709"
  },
  {
    "text": "the most difficult problem which I don't think is it's considered at all solved",
    "start": "956709",
    "end": "962000"
  },
  {
    "text": "is medium sized inputs how do you sort 1,000 numbers real fast and this is the",
    "start": "962000",
    "end": "970579"
  },
  {
    "text": "question we're looking at how do you sort not even wathah how do you sort 100 numbers real good and I don't think",
    "start": "970579",
    "end": "979610"
  },
  {
    "text": "there is a canned solution to this problem so this is what we're going to focus on and the challenge is",
    "start": "979610",
    "end": "985790"
  },
  {
    "text": "essentially you want to increase threshold in this equation here in this implementation want to increase this as",
    "start": "985790",
    "end": "991490"
  },
  {
    "text": "much so more responsibility is taken by by fast routine that is specialized for",
    "start": "991490",
    "end": "996980"
  },
  {
    "text": "small arrays small and medium arrays and we leave we take off the the load of",
    "start": "996980",
    "end": "1002470"
  },
  {
    "text": "quick quick sort great so that's what we're gonna work on now looking at stood",
    "start": "1002470",
    "end": "1013029"
  },
  {
    "text": "sort the first start so essentially I literally took the GCC implementation of",
    "start": "1013029",
    "end": "1018670"
  },
  {
    "text": "stood sort I looked at it and I said I'm gonna implement something better believe me it's not difficult so it's not",
    "start": "1018670",
    "end": "1025150"
  },
  {
    "text": "difficult for a specific you know specific distribution specific data specific tests or whatever you change a",
    "start": "1025150",
    "end": "1030520"
  },
  {
    "text": "comma you're bound to can just almost by happenstance to be improved by a bit it's not difficult the did marker has",
    "start": "1030520",
    "end": "1038579"
  },
  {
    "text": "has a talk that I think is uh is available on YouTube I think he called",
    "start": "1038579",
    "end": "1045760"
  },
  {
    "text": "it quicker sort or some like that and he mentions the number of improvements here",
    "start": "1045760",
    "end": "1050890"
  },
  {
    "text": "he made that actually beats this or by a small margin and you know it's not very difficult and again you should sit down",
    "start": "1050890",
    "end": "1057610"
  },
  {
    "text": "and we'd be tested sort one day please ok homework",
    "start": "1057610",
    "end": "1063380"
  },
  {
    "text": "yeah I'm gonna only get any Reds after this right it's like this guy give us",
    "start": "1063380",
    "end": "1068690"
  },
  {
    "text": "homework what's wrong with him so if you look at the insertion sort",
    "start": "1068690",
    "end": "1074600"
  },
  {
    "text": "routine you're gonna figure out that well here's the thing because I do linear search and linear insertion I'm",
    "start": "1074600",
    "end": "1081049"
  },
  {
    "text": "going to take this many comparisons quadratic and whatever ends are going to",
    "start": "1081049",
    "end": "1086330"
  },
  {
    "text": "do half of those which is also quadratic so for example for 32 inputs I'm going",
    "start": "1086330",
    "end": "1091789"
  },
  {
    "text": "to do 248 comparisons on average quite a",
    "start": "1091789",
    "end": "1097250"
  },
  {
    "text": "few right because I'm looking like 32 piece of data that's quite a few comparisons whoa binary search and sort",
    "start": "1097250",
    "end": "1104539"
  },
  {
    "start": "1102000",
    "end": "1102000"
  },
  {
    "text": "crack up of Knuth binary search ten means I'm going to do binary search instead of linear search so oh my",
    "start": "1104539",
    "end": "1112280"
  },
  {
    "text": "goodness I'm having a much faster you know much faster sort because I do much fewer comparisons which reduce to 155",
    "start": "1112280",
    "end": "1121789"
  },
  {
    "text": "comparisons for 432 elements on average which is a very is a very significant",
    "start": "1121789",
    "end": "1129950"
  },
  {
    "text": "decrease from down from 248 those folks are not that smart",
    "start": "1129950",
    "end": "1135429"
  },
  {
    "text": "not that smart so you happily sit down and code that thing binary search yes I know how to do that",
    "start": "1135429",
    "end": "1142809"
  },
  {
    "text": "it's gonna take me just like three days right because you always get it wrong",
    "start": "1142809",
    "end": "1148700"
  },
  {
    "text": "right few times so you sit down you write that you test it oh my goodness",
    "start": "1148700",
    "end": "1154549"
  },
  {
    "text": "this is awesome look at this test on 1 million random doubles fresh fresh of 32",
    "start": "1154549",
    "end": "1160669"
  },
  {
    "text": "and then you instrument your code and you get 25 million plus comparisons and",
    "start": "1160669",
    "end": "1166820"
  },
  {
    "text": "with binary searches you shave off three million comparisons swap stays the same",
    "start": "1166820",
    "end": "1173240"
  },
  {
    "text": "right because it's just comparisons that we are improved this is a 15 percent reduction and the same our wall move",
    "start": "1173240",
    "end": "1180590"
  },
  {
    "text": "swaps right so very happy I saw we instrumental code you look at a code you test the code it all works you asserted",
    "start": "1180590",
    "end": "1186890"
  },
  {
    "text": "you don't you have your rig and then you time it",
    "start": "1186890",
    "end": "1191650"
  },
  {
    "text": "and it's 30% pessimism so the amount of",
    "start": "1192530",
    "end": "1197610"
  },
  {
    "text": "time you put in all that work is actually of negative literal value so",
    "start": "1197610",
    "end": "1203820"
  },
  {
    "text": "okay so then you're like maybe I play with threshold a bit and fudge my way in whatever you choose for threshold you're",
    "start": "1203820",
    "end": "1210990"
  },
  {
    "text": "not gonna do better than then stir the sword so and my question to you is why",
    "start": "1210990",
    "end": "1216630"
  },
  {
    "text": "did that happen I know Paul knows cash yeah but okay no",
    "start": "1216630",
    "end": "1229010"
  },
  {
    "text": "it's small data right so I still know you know you know yes there's some",
    "start": "1229010",
    "end": "1237000"
  },
  {
    "text": "prediction involved here indeed what happens here is that linear searches are",
    "start": "1237000",
    "end": "1242340"
  },
  {
    "text": "very predictable with linear search you literally fail once per search the",
    "start": "1242340",
    "end": "1250560"
  },
  {
    "text": "success rate is whatever is search -1 so",
    "start": "1250560",
    "end": "1255630"
  },
  {
    "text": "for an you have an average success rate of n minus 4 by n so for 32 you're going",
    "start": "1255630",
    "end": "1262440"
  },
  {
    "text": "to have an almost 90% success rate in your comparisons remember computers like",
    "start": "1262440",
    "end": "1269070"
  },
  {
    "text": "boring while computers don't like is",
    "start": "1269070",
    "end": "1274190"
  },
  {
    "text": "entropy M informational entropy because",
    "start": "1274190",
    "end": "1280410"
  },
  {
    "text": "in binary search by definition every comparison extracts one bit of",
    "start": "1280410",
    "end": "1285420"
  },
  {
    "text": "information literally extracts one digit from the position it gets from the most",
    "start": "1285420",
    "end": "1290850"
  },
  {
    "text": "significant to the least significant it extracts one literal bit of information is the most amount of information you",
    "start": "1290850",
    "end": "1297150"
  },
  {
    "text": "get from a comparison and that's precisely what the computer hates you",
    "start": "1297150",
    "end": "1304440"
  },
  {
    "text": "know what I have no idea what to do here so there's zero prediction they can do",
    "start": "1304440",
    "end": "1309840"
  },
  {
    "text": "they're going to have an average success rate of 50% so branch prediction is powerless",
    "start": "1309840",
    "end": "1316550"
  },
  {
    "text": "very unpleasant and this hints tub yes",
    "start": "1319690",
    "end": "1325748"
  },
  {
    "text": "since it's not very predictable if you're paralyzed I think yeah I'm sure",
    "start": "1328779",
    "end": "1343309"
  },
  {
    "text": "we can code it that way actually I did Cody that way need there's no improvement I couldn't find an improvement okay moving forward it's kind of",
    "start": "1343309",
    "end": "1351860"
  },
  {
    "text": "pleasant to realize that all textbooks teach you kind of the wrong thing because they teach you that if you count",
    "start": "1351860",
    "end": "1357080"
  },
  {
    "text": "comparisons and you reduce them you're good with sorting it's not the case so reality is information entropy of",
    "start": "1357080",
    "end": "1363350"
  },
  {
    "text": "comparison affects performance quite radically so what do we do so and - at",
    "start": "1363350",
    "end": "1371720"
  },
  {
    "text": "this point it was a few months ago and I said you know here's the thing I'm trying all the right things and then",
    "start": "1371720",
    "end": "1376789"
  },
  {
    "text": "getting the wrong results how about I trade the wrong things I this is not a",
    "start": "1376789",
    "end": "1382639"
  },
  {
    "text": "joke in this like the god-honest truth and you know I'm basing myself on a vast",
    "start": "1382639",
    "end": "1387879"
  },
  {
    "text": "experience of deluding myself thinking that I can predict what a piece of code",
    "start": "1387879",
    "end": "1393740"
  },
  {
    "text": "is gonna do and how fast is gonna run so I'm saying you know what optimization is surprising complicates doing something",
    "start": "1393740",
    "end": "1401090"
  },
  {
    "text": "sensible didn't work so about we try something completely stupid so here's",
    "start": "1401090",
    "end": "1408740"
  },
  {
    "start": "1406000",
    "end": "1406000"
  },
  {
    "text": "the silly idea sure thought worst case for insertion Intel's moving elements",
    "start": "1408740",
    "end": "1414619"
  },
  {
    "text": "over large distances so about the silly idea let's make a heap in the little array min-heap and then we just go with",
    "start": "1414619",
    "end": "1423619"
  },
  {
    "text": "a regular insertion sort so actually we do literally more work because this is the this is the previous",
    "start": "1423619",
    "end": "1431960"
  },
  {
    "text": "code I just do insertion sort and I do more I just no more of it I add work",
    "start": "1431960",
    "end": "1440710"
  },
  {
    "text": "right okay so you know there's an algorithm",
    "start": "1440710",
    "end": "1446350"
  },
  {
    "text": "called smooth sort which is quite complicated so that's not maybe that's not very popular but it's it's a bit",
    "start": "1446350",
    "end": "1452739"
  },
  {
    "text": "like smooth sort just completely stupid and you know the what I'm what I'm",
    "start": "1452739",
    "end": "1460210"
  },
  {
    "text": "hoping is that many comparisons are still predictors I'm not kind of ruining my predictability here but I'm hoping",
    "start": "1460210",
    "end": "1466299"
  },
  {
    "text": "that I'm gonna save on swaps because my hip is going to economically bring statistically smaller elements toward",
    "start": "1466299",
    "end": "1473409"
  },
  {
    "text": "the front right hip hip is like the minimize the first element and then you",
    "start": "1473409",
    "end": "1479590"
  },
  {
    "text": "know progressively the hip gets less organized and you have like large elements and stuff like that so fine hmm",
    "start": "1479590",
    "end": "1486789"
  },
  {
    "text": "I wrote about this to an acquaintance who's a very accomplished mathematician and very good coder like amazing hacker",
    "start": "1486789",
    "end": "1494379"
  },
  {
    "text": "and he wrote me a one-liner this and",
    "start": "1494379",
    "end": "1499480"
  },
  {
    "text": "then I bannered the idea for a couple of months I didn't even look at it I said well if he said so it's impossible is",
    "start": "1499480",
    "end": "1506049"
  },
  {
    "text": "gonna ever do anything right so he hated that idea and so I hated it too and then",
    "start": "1506049",
    "end": "1514659"
  },
  {
    "text": "I had to talk to given Ilya that I had committed to so I had no material I had",
    "start": "1514659",
    "end": "1519909"
  },
  {
    "text": "absolutely no material to talk to talk about so then with a gun to my head I said you know let's revisit that stupid",
    "start": "1519909",
    "end": "1525700"
  },
  {
    "text": "thing so I tested it with my keep and everything and stead sort does 25 plus",
    "start": "1525700",
    "end": "1535059"
  },
  {
    "text": "million comparisons almost 14 million swaps and ha look at this I reduced our",
    "start": "1535059",
    "end": "1540580"
  },
  {
    "text": "most swaps very interesting I also reduce the number of comparisons which",
    "start": "1540580",
    "end": "1546369"
  },
  {
    "text": "is remarkable so I had reasons again to get my hopes up ah didn't work",
    "start": "1546369",
    "end": "1555090"
  },
  {
    "start": "1551000",
    "end": "1551000"
  },
  {
    "text": "so I thought you know what we do too many things and it's time to micro",
    "start": "1559049",
    "end": "1564070"
  },
  {
    "text": "optimize and this is here's the part of social engineering that I've done make",
    "start": "1564070",
    "end": "1569860"
  },
  {
    "text": "Heep is a good is a well optimized routine by the authors of the standard",
    "start": "1569860",
    "end": "1575950"
  },
  {
    "text": "library it has defined characteristics it's known it uses the fluid algorithm a",
    "start": "1575950",
    "end": "1582309"
  },
  {
    "text": "classic and it's kind of a you know it's it's an optimal routine but I thought people who implement the standard",
    "start": "1582309",
    "end": "1589240"
  },
  {
    "text": "library that would be STL and that would be the new folks and that would be the client folks and etc people like that",
    "start": "1589240",
    "end": "1595720"
  },
  {
    "text": "you know they have a workload which is like well I call may keep once per application per run right call it once",
    "start": "1595720",
    "end": "1604360"
  },
  {
    "text": "and then I kind of manipulative insert/remove insert remove that kind of",
    "start": "1604360",
    "end": "1609460"
  },
  {
    "text": "stuff right priority queue but I call make him like very few times I wanted to",
    "start": "1609460",
    "end": "1614559"
  },
  {
    "text": "call it like 100,000 times so for that kind of workload I assumed people would",
    "start": "1614559",
    "end": "1622330"
  },
  {
    "text": "not be prepared the implementers so I set out to implement my own make people",
    "start": "1622330",
    "end": "1627510"
  },
  {
    "text": "that's that is my speculation so if you go to things like rosetta code you're",
    "start": "1627510",
    "end": "1633910"
  },
  {
    "text": "going to see that heapify to keep takes a vector and it's going to sift you know",
    "start": "1633910",
    "end": "1640780"
  },
  {
    "text": "it's gonna move down elements from half of the vector and that kind of stuff and",
    "start": "1640780",
    "end": "1650490"
  },
  {
    "text": "the shift down routine is kind of its deafening doesn't want to go very fast because it does a lot of it does a loop",
    "start": "1650490",
    "end": "1657700"
  },
  {
    "text": "and does a lot of testing one two three four checks of five six so it's going to",
    "start": "1657700",
    "end": "1665590"
  },
  {
    "text": "do six tests per iteration which is quite a few so I sit down and do the",
    "start": "1665590",
    "end": "1675730"
  },
  {
    "text": "counting here five compare jump decisions three add shift 6 assign ones etc so we must improve on that and well",
    "start": "1675730",
    "end": "1684640"
  },
  {
    "start": "1683000",
    "end": "1683000"
  },
  {
    "text": "of course let's take a look at new heapify because rosetta is like for weenies the noise where the act",
    "start": "1684640",
    "end": "1690290"
  },
  {
    "text": "and goes and let's improve this so you",
    "start": "1690290",
    "end": "1698180"
  },
  {
    "text": "know you gotta get you gotta give them a lot of respect like you know first like they need to type all of those",
    "start": "1698180",
    "end": "1703520"
  },
  {
    "text": "underscores like if a lot of second I",
    "start": "1703520",
    "end": "1709220"
  },
  {
    "text": "gotta say this is very good engineering so there's a lot of smart solutions in this summer I don't have time to go over",
    "start": "1709220",
    "end": "1714350"
  },
  {
    "text": "them all but I think it's a it's really a good piece of engineering so what's",
    "start": "1714350",
    "end": "1723470"
  },
  {
    "text": "going to happen here we don't have a whiteboard so what's going to happen",
    "start": "1723470",
    "end": "1728570"
  },
  {
    "text": "here is um a heap it's kind of one of those implicit trees number zero element",
    "start": "1728570",
    "end": "1734150"
  },
  {
    "text": "is the root numbers one and two are the children of the root the next layer is gonna be a third fourth fifth and so on",
    "start": "1734150",
    "end": "1740420"
  },
  {
    "text": "so the child of any node is 2 n plus 1 and 2 n plus 2 if the node is that index",
    "start": "1740420",
    "end": "1745670"
  },
  {
    "text": "and right so this heap the array",
    "start": "1745670",
    "end": "1751610"
  },
  {
    "text": "depending on whether it's odd number of elements oh can you roll it now thank",
    "start": "1751610",
    "end": "1758090"
  },
  {
    "text": "you all right you have a good engineer found the solution thank you very much so as",
    "start": "1758090",
    "end": "1765980"
  },
  {
    "text": "we go thank you",
    "start": "1765980",
    "end": "1770919"
  },
  {
    "text": "as I mentioned this yesterday so we have the white board which is erasable reusable and we have paper to waste on",
    "start": "1771010",
    "end": "1778160"
  },
  {
    "text": "top of it all right so here's my heap so",
    "start": "1778160",
    "end": "1787970"
  },
  {
    "text": "this is array item number 0 1 2 3 4 5 and so on and depending on the the",
    "start": "1787970",
    "end": "1798740"
  },
  {
    "text": "number of elements in the array the heap man may end up with an orphan not an",
    "start": "1798740",
    "end": "1803810"
  },
  {
    "text": "orphan a kind of a sibling less node or man with a complete right okay the",
    "start": "1803810",
    "end": "1812840"
  },
  {
    "text": "problem with the glue implementation is that it must test test for this you know whether I'm I have a sibling or not at",
    "start": "1812840",
    "end": "1819380"
  },
  {
    "text": "the last element it tests for every iteration of the loop and that's exactly",
    "start": "1819380",
    "end": "1826370"
  },
  {
    "text": "the thing you're mixing holding a hot and cold code together this is exactly",
    "start": "1826370",
    "end": "1831620"
  },
  {
    "text": "what you don't want to do you want to minimize that loop you mark it as make it as tight as possible so that you",
    "start": "1831620",
    "end": "1837410"
  },
  {
    "text": "don't need to test every pass through the goddamn loop that you have a sibling or not in the last node ideas sorry yeah",
    "start": "1837410",
    "end": "1851510"
  },
  {
    "text": "so we know a priori the problem is if you want you want to write two algorithms that are very very different",
    "start": "1851510",
    "end": "1857960"
  },
  {
    "text": "yes please",
    "start": "1857960",
    "end": "1860559"
  },
  {
    "text": "so you write two implementations but that's bigger code right all right",
    "start": "1866700",
    "end": "1873910"
  },
  {
    "text": "you're not I didn't try that I didn't try that but I think it's a it's a viable thing to try the only issue here",
    "start": "1873910",
    "end": "1880960"
  },
  {
    "text": "is that the code size is that is doubled right but I think it's something worth trying thank you huh",
    "start": "1880960",
    "end": "1887980"
  },
  {
    "text": "what macros yeah no it's like the generated code yeah macros I'm not gonna",
    "start": "1887980",
    "end": "1894010"
  },
  {
    "text": "save that other thoughts how to eliminate a cold test in a hot loop huh",
    "start": "1894010",
    "end": "1904350"
  },
  {
    "text": "put a dummy node that would work except for the last sub array",
    "start": "1904350",
    "end": "1910660"
  },
  {
    "text": "I actually thought of that you know it's just like it becomes really awkward to",
    "start": "1910660",
    "end": "1916060"
  },
  {
    "text": "code at the top level except if it's the last sub or a little there otherwise we",
    "start": "1916060",
    "end": "1921160"
  },
  {
    "text": "can expand on that extra node other thoughts ideas all right here's what I",
    "start": "1921160",
    "end": "1928450"
  },
  {
    "text": "did I mean I wouldn't expect in 30 seconds anybody to find the surgeon",
    "start": "1928450",
    "end": "1934480"
  },
  {
    "text": "because it took me like a week said you know it's just it's just you know I",
    "start": "1934480",
    "end": "1940900"
  },
  {
    "text": "gotta kind of sleep on it so the simple solution that I I implemented was I",
    "start": "1940900",
    "end": "1949150"
  },
  {
    "text": "never look at this guy whether it exists or not I assume there's gonna be an",
    "start": "1949150",
    "end": "1955630"
  },
  {
    "text": "orphan out here there are not orphan a sibling less how do you call a sibling less only child yes put a brat okay",
    "start": "1955630",
    "end": "1966540"
  },
  {
    "text": "apologies to those of you okay so we",
    "start": "1966540",
    "end": "1972310"
  },
  {
    "text": "have we have here dunno that's that's alone and we ignored this node and we",
    "start": "1972310",
    "end": "1977950"
  },
  {
    "text": "build a heap we go the heap and everything as you under this assumption you can always assume there's fewer",
    "start": "1977950",
    "end": "1983080"
  },
  {
    "text": "right but this guy remains on he p5 but then you know how to insert in a heap it",
    "start": "1983080",
    "end": "1989950"
  },
  {
    "text": "just propagate this guy up and you're done so first the hippie hi if he provide",
    "start": "1989950",
    "end": "1994990"
  },
  {
    "text": "everything except possibly for the last node and as a coda speak",
    "start": "1994990",
    "end": "2000240"
  },
  {
    "text": "music you're going to say oh let me set the last guy into the hip so you know",
    "start": "2000240",
    "end": "2005790"
  },
  {
    "text": "doesn't do that Microsoft does n't do that but again they didn't have a use case of all I need to call this one",
    "start": "2005790",
    "end": "2012270"
  },
  {
    "text": "hundred thousand times another idea that I wanted to implement here is that I",
    "start": "2012270",
    "end": "2018570"
  },
  {
    "text": "want to use fewer I wanted to have fewer",
    "start": "2018570",
    "end": "2026520"
  },
  {
    "text": "jumps so I talked about this move fix up",
    "start": "2026520",
    "end": "2034290"
  },
  {
    "start": "2030000",
    "end": "2030000"
  },
  {
    "text": "code outside that outer loop and I didn't talk about this we want to integrate most conditionals as",
    "start": "2034290",
    "end": "2040920"
  },
  {
    "text": "arithmetic one thing that is quite",
    "start": "2040920",
    "end": "2046170"
  },
  {
    "text": "unpleasant is that comparisons are very cheap they set a flag in the CPU and it's like in in statistically less than a cycle",
    "start": "2046170",
    "end": "2053368"
  },
  {
    "text": "you're done the problem is if compression is followed by a jump because the jump is messing with the",
    "start": "2053369",
    "end": "2059638"
  },
  {
    "text": "pipeline and prediction and everything right so the jump is not the right thing what you can do however and what is very",
    "start": "2059639",
    "end": "2066720"
  },
  {
    "text": "commendable in all situations is to consider the return of the comparison an",
    "start": "2066720",
    "end": "2072450"
  },
  {
    "text": "integer that could be 0 or 1 and if you get to integrate that integer either 0 1",
    "start": "2072450",
    "end": "2080158"
  },
  {
    "text": "within your arithmetic your normal computation you have the condition",
    "start": "2080159",
    "end": "2085858"
  },
  {
    "text": "without the jump it's just going to be straight line con there's gonna be no if and you're going to reduce a normal jump",
    "start": "2085859",
    "end": "2094888"
  },
  {
    "text": "so no comparisons are not expensive jumps are right so we're trying to",
    "start": "2094889",
    "end": "2101040"
  },
  {
    "text": "integrate conditionals as normal arithmetic ok and another advantage we",
    "start": "2101040",
    "end": "2110400"
  },
  {
    "text": "have here is that we take advantage of advantage of the Mickey property the mean heap is going to be an array that",
    "start": "2110400",
    "end": "2117920"
  },
  {
    "text": "has the minimum element in position 0 because by definition does the heap so",
    "start": "2117920",
    "end": "2125910"
  },
  {
    "text": "when insert from the right of the heap you don't need to test for the boundary",
    "start": "2125910",
    "end": "2131630"
  },
  {
    "text": "why because know there's no chance to go past it because that's the smallest you",
    "start": "2131630",
    "end": "2138300"
  },
  {
    "text": "just compare so you don't need to guard your insertion right you just say off as",
    "start": "2138300",
    "end": "2143790"
  },
  {
    "text": "long as this guy is greater than the current element just go left and I'm not gonna stop either here before here",
    "start": "2143790",
    "end": "2150660"
  },
  {
    "text": "because it's impossible that I go that anything is smaller than this guy right",
    "start": "2150660",
    "end": "2156620"
  },
  {
    "text": "so I have three I have three prongs attack here my first prong is I want to",
    "start": "2156620",
    "end": "2163620"
  },
  {
    "text": "move The Fixer code outside the the hot loop number two I want to integrate conditions - as arithmetic as much as I",
    "start": "2163620",
    "end": "2170370"
  },
  {
    "text": "can number three I want to do an unguarded insertion and forth and this is sort of",
    "start": "2170370",
    "end": "2178440"
  },
  {
    "text": "the most important aspect of micro optimizations you must fight for every",
    "start": "2178440",
    "end": "2183930"
  },
  {
    "text": "cycle like like your vengeful ex okay",
    "start": "2183930",
    "end": "2189600"
  },
  {
    "text": "you must fight for everything like your vengeful ex don't you know just think of",
    "start": "2189600",
    "end": "2194850"
  },
  {
    "text": "like the worst the worst date in your life the worst fight in your life you",
    "start": "2194850",
    "end": "2199980"
  },
  {
    "text": "gotta fight for every single cycle with a gun to your head you can tell when",
    "start": "2199980",
    "end": "2206880"
  },
  {
    "text": "code has been written by desperate people with their backs to the wall versus people who wanted to go home and",
    "start": "2206880",
    "end": "2211920"
  },
  {
    "text": "play with the kids okay you can distill you can read it you can see that the",
    "start": "2211920",
    "end": "2219180"
  },
  {
    "text": "tears and the blood and okay so fight for everything in the inner loop every",
    "start": "2219180",
    "end": "2225210"
  },
  {
    "text": "you must actually explain everything in a court of law okay you must be able to defend anything",
    "start": "2225210",
    "end": "2230820"
  },
  {
    "text": "to the you know the lawyer of an insurance firm all right okay so",
    "start": "2230820",
    "end": "2238260"
  },
  {
    "text": "starting with this I'm going to say well first of all I'm not gonna handle even",
    "start": "2238260",
    "end": "2244440"
  },
  {
    "text": "zero size because it just so happens it's handled outside that's by the way",
    "start": "2244440",
    "end": "2250590"
  },
  {
    "text": "your quicksort works so quicksort is never gonna pass me a zero sighs all right so ever first and last first it's going to be",
    "start": "2250590",
    "end": "2257190"
  },
  {
    "text": "less than lost I'm going to compute size and if size is less than three I'm going",
    "start": "2257190",
    "end": "2263430"
  },
  {
    "text": "to do a routine that sort to is the condition we swap the two elements but sort to already integrates this as",
    "start": "2263430",
    "end": "2270299"
  },
  {
    "text": "instead of an if it integrates this guy how does this work what values can size",
    "start": "2270299",
    "end": "2278849"
  },
  {
    "text": "have inside the safe can be 0 1 or 2 if",
    "start": "2278849",
    "end": "2284910"
  },
  {
    "text": "size is 2 this is 1 I'm sorting to 1st",
    "start": "2284910",
    "end": "2290339"
  },
  {
    "text": "of 0 and first of 1 so I sort two elements good if size is 1 I'm sorting",
    "start": "2290339",
    "end": "2296640"
  },
  {
    "text": "first of 0 and first of 0 no op it turns out this is faster than ifs and else's",
    "start": "2296640",
    "end": "2303079"
  },
  {
    "text": "ok so again you know you actually try this you try all this crap you",
    "start": "2303079",
    "end": "2308789"
  },
  {
    "text": "everything every silly idea that comes to mind you try and whatever stay or whatever works fastest stays fine so",
    "start": "2308789",
    "end": "2316920"
  },
  {
    "text": "otherwise we have a size that's greater than or equal to 3 so we heapify and then we do the unguarded insertion sort",
    "start": "2316920",
    "end": "2323009"
  },
  {
    "text": "as promised why does first plus 2 here not first or first plus 1 yes",
    "start": "2323009",
    "end": "2330588"
  },
  {
    "text": "the first one is already the minimum so why y plus 2 so the first is a minimum",
    "start": "2332779",
    "end": "2342210"
  },
  {
    "text": "side should be first plus 1 first plus 2 well right so this is the minimum and",
    "start": "2342210",
    "end": "2352890"
  },
  {
    "text": "this is whatever but you can consider this as a sorted array that also I need",
    "start": "2352890",
    "end": "2358979"
  },
  {
    "text": "to start inserting this guy into these two guys because this is less than or equal to this and already the first two",
    "start": "2358979",
    "end": "2365910"
  },
  {
    "text": "elements are sorted is what I'm saying right so it I didn't realize this at",
    "start": "2365910",
    "end": "2371880"
  },
  {
    "text": "first point seven percent because instead of one I replaced with gym",
    "start": "2371880",
    "end": "2378779"
  },
  {
    "text": "okay so this is already kind of I'm told unitary it's a penny okay I got a penny",
    "start": "2378779",
    "end": "2384450"
  },
  {
    "text": "here I found it I put in my pocket all right so this is the strategy let's",
    "start": "2384450",
    "end": "2391769"
  },
  {
    "text": "implement heapify heapify or sir size greater than to remember three or more",
    "start": "2391769",
    "end": "2397880"
  },
  {
    "text": "yes other sizes are hand outside and then I'm going to position",
    "start": "2397880",
    "end": "2403590"
  },
  {
    "text": "myself in the middle of the array I want",
    "start": "2403590",
    "end": "2408690"
  },
  {
    "text": "to position myself some somewhere half and actually again I had a bug here I wrote size minus 2 and again that was a",
    "start": "2408690",
    "end": "2416730"
  },
  {
    "text": "fraction of a percent and you want to position yourself so that in this case",
    "start": "2416730",
    "end": "2422310"
  },
  {
    "text": "size is 8 8 minus 3 5 by 2 5 divided by",
    "start": "2422310",
    "end": "2429690"
  },
  {
    "text": "2 - so I'm positioning myself here and this is my sort of unmanaged portion of",
    "start": "2429690",
    "end": "2439680"
  },
  {
    "text": "the heap and our starting here and I'm descending nodes and I'm creating this sub heap and then I'm going down here",
    "start": "2439680",
    "end": "2446280"
  },
  {
    "text": "and creating this sub heap and I'm going here and I'm finishing the heap if I start at anywhere like here I would do",
    "start": "2446280",
    "end": "2452970"
  },
  {
    "text": "work for no good reason so very careful with the limits do in a loop on the next",
    "start": "2452970",
    "end": "2460320"
  },
  {
    "text": "slide so this this is what the hot code goes this is the hot code and then this",
    "start": "2460320",
    "end": "2467100"
  },
  {
    "text": "is my fix-up code remember the fix-up for the last node the possible sibling so if size is is odd then there's",
    "start": "2467100",
    "end": "2476550"
  },
  {
    "text": "nothing to do because it's there's no need for that and otherwise thing that I have the fix-up code by the way there is",
    "start": "2476550",
    "end": "2483750"
  },
  {
    "text": "a clear demarcation here of hot and hot code and cold code and early returns are",
    "start": "2483750",
    "end": "2491130"
  },
  {
    "text": "your friend just you know whenever whenever you have an opportunity to get",
    "start": "2491130",
    "end": "2496530"
  },
  {
    "text": "out of there just get out of Dodge ok just don't hang around I've seen people",
    "start": "2496530",
    "end": "2501660"
  },
  {
    "text": "actually put these in functions so that there's no cache occupied unnecessarily",
    "start": "2501660",
    "end": "2507000"
  },
  {
    "text": "by so people pull like a function and they say don't align this function compiler please ok that kind of stuff I",
    "start": "2507000",
    "end": "2513210"
  },
  {
    "text": "didn't find that necessary in this case so fine the fix-up code is a classic",
    "start": "2513210",
    "end": "2519230"
  },
  {
    "text": "percolate up subroutine in in heap you can find it in any book not really",
    "start": "2519230",
    "end": "2525540"
  },
  {
    "text": "nothing interesting here it's just that I'm walking back up the up the heap",
    "start": "2525540",
    "end": "2531860"
  },
  {
    "text": "all right so let's take a look at the hot Lube and as I told you I'm a fan of",
    "start": "2531860",
    "end": "2537920"
  },
  {
    "start": "2533000",
    "end": "2533000"
  },
  {
    "text": "infinite loops I noticed that whenever so you know I",
    "start": "2537920",
    "end": "2545420"
  },
  {
    "text": "interview people I give them I give them problems and I say you know implement this but don't do don't do any extra",
    "start": "2545420",
    "end": "2551090"
  },
  {
    "text": "work any unneeded work and what they what students start with are you know fresh graduates and stuff they start",
    "start": "2551090",
    "end": "2558500"
  },
  {
    "text": "always with structure loops and they try to kind of work their way out from there",
    "start": "2558500",
    "end": "2564200"
  },
  {
    "text": "right and if you want to write code that doesn't do unnecessary work very often a",
    "start": "2564200",
    "end": "2569720"
  },
  {
    "text": "non structure loop is not gonna do well structure look like I equals zero I less",
    "start": "2569720",
    "end": "2575930"
  },
  {
    "text": "than n I plus plus that structure loop right so you always should start when",
    "start": "2575930",
    "end": "2581780"
  },
  {
    "text": "optimizing with a structure loops and then if it just turns out that it's",
    "start": "2581780",
    "end": "2588320"
  },
  {
    "text": "better to structure if you just put a structure in in but don't start with a structure because it works your mind",
    "start": "2588320",
    "end": "2594640"
  },
  {
    "text": "okay so we have the right kid is going to be dad times two plus two so starting",
    "start": "2594640",
    "end": "2602540"
  },
  {
    "text": "from here I'm going to have 2 times 2 4",
    "start": "2602540",
    "end": "2608060"
  },
  {
    "text": "plus 2 6 so I'm going to get here right kid nice if racket is greater than equal",
    "start": "2608060",
    "end": "2617720"
  },
  {
    "text": "to size we're done and we go to the fix-up code and everything right then we",
    "start": "2617720",
    "end": "2623690"
  },
  {
    "text": "have the best kid would be one of these two kids which is the smallest and",
    "start": "2623690",
    "end": "2629900"
  },
  {
    "text": "here's how we integrate math with conditions usually people say if the right kid is less than the left kids he",
    "start": "2629900",
    "end": "2636740"
  },
  {
    "text": "like the right kid otherwise says he like the left kid what I did here however is I'm taking right kid - the",
    "start": "2636740",
    "end": "2644660"
  },
  {
    "text": "comparison result - 0 or minus 1 a lot",
    "start": "2644660",
    "end": "2650450"
  },
  {
    "text": "faster and colleague Victor said",
    "start": "2650450",
    "end": "2655700"
  },
  {
    "text": "yesterday this code looks so obvious but it's not it's not something that you can",
    "start": "2655700",
    "end": "2661190"
  },
  {
    "text": "easily initiate right the inception is difficult once this is like yeah whatever so Reich in minus zero one",
    "start": "2661190",
    "end": "2671150"
  },
  {
    "text": "so that's no they don't",
    "start": "2671150",
    "end": "2679510"
  },
  {
    "text": "you know I've discovered many instances in which compiler writers again they",
    "start": "2679690",
    "end": "2685880"
  },
  {
    "text": "have many things on their hands to optimize so they're not gonna be able to optimize every single pattern sorry oh",
    "start": "2685880",
    "end": "2697030"
  },
  {
    "text": "yeah a lot faster oh yeah there's no branch definitely now",
    "start": "2697030",
    "end": "2708110"
  },
  {
    "text": "the compiler actually can eliminate a few branches but not most all right um and I I so it I'd appreciate if you",
    "start": "2708110",
    "end": "2717770"
  },
  {
    "text": "reach out to me in private and afters with via email and show me code that produces branches because I I didn't see",
    "start": "2717770",
    "end": "2723500"
  },
  {
    "text": "that not be interesting thank you alright so I got the best kid which is the smallest kid and then I'm going to",
    "start": "2723500",
    "end": "2729830"
  },
  {
    "text": "compare first dad compared to the first best kid to see if I want to descend",
    "start": "2729830",
    "end": "2735080"
  },
  {
    "text": "this guy down the left or right side and if that is smaller than the best kid",
    "start": "2735080",
    "end": "2741890"
  },
  {
    "text": "then there's nothing else to do in this iteration so I'm done otherwise I'm going to swap and then continuation",
    "start": "2741890",
    "end": "2750160"
  },
  {
    "text": "alright so um I thought for a long time how to really meet this branch as well",
    "start": "2751210",
    "end": "2758330"
  },
  {
    "text": "and actually I found a way but it turns out this slower so I you know I just gave it up ok so right now we have three",
    "start": "2758330",
    "end": "2766310"
  },
  {
    "text": "comparisons instead of five but only two comparing jumps and the glue",
    "start": "2766310",
    "end": "2773600"
  },
  {
    "text": "implementation ends up doing a lot more work and in addition we have Taurus Matic operation to a science and let's",
    "start": "2773600",
    "end": "2780170"
  },
  {
    "text": "put this to test see how it does 1 million doubles threshold 32 we still 2%",
    "start": "2780170",
    "end": "2788750"
  },
  {
    "text": "behind but at this point friends I had the secret ace in my short sleeve I had",
    "start": "2788750",
    "end": "2798170"
  },
  {
    "text": "a secret AC my sleeve which is I can now increase threshold I can afford a larger",
    "start": "2798170",
    "end": "2806480"
  },
  {
    "text": "sub-array I can say you know what I'm gonna take more responsibility for a small array because right now have this",
    "start": "2806480",
    "end": "2812480"
  },
  {
    "text": "keep thing and it's gonna transfer fewer elements I have fewer swaps so I can actually do this so I said a threshold",
    "start": "2812480",
    "end": "2819410"
  },
  {
    "text": "to double 64th I am going to reduce comparisons by 2% was by 1.5% and",
    "start": "2819410",
    "end": "2826390"
  },
  {
    "text": "reduces finding the run time by 3% which is a win it's a measurable significant win great",
    "start": "2826390",
    "end": "2833740"
  },
  {
    "text": "so that's what double other ties can can get a lot better actually but wait we're",
    "start": "2833740",
    "end": "2841520"
  },
  {
    "text": "not done yet yes you just ruined my moment here you got it",
    "start": "2841520",
    "end": "2846819"
  },
  {
    "text": "yes different compilers know I just",
    "start": "2846819",
    "end": "2854660"
  },
  {
    "text": "tried the GCC but it's it's a valid thing to worry about up 9 like the",
    "start": "2854660",
    "end": "2862400"
  },
  {
    "text": "latest and greatest it was a here comes my moment so it gets",
    "start": "2862400",
    "end": "2868400"
  },
  {
    "text": "only weirder from here friends so we have a couple more minutes so it this is gonna become like completely like like",
    "start": "2868400",
    "end": "2875690"
  },
  {
    "text": "right at the lights are gonna go off and the universe is gonna become red and that kind of stuff right so it's",
    "start": "2875690",
    "end": "2882349"
  },
  {
    "text": "becoming weird right now because here's a graph comparisons the baseline is red",
    "start": "2882349",
    "end": "2889039"
  },
  {
    "start": "2884000",
    "end": "2884000"
  },
  {
    "text": "this is my classic STD sort and I counted a comparison see millions depending on the threshold chosen and as",
    "start": "2889039",
    "end": "2895970"
  },
  {
    "text": "expected the more increased the threshold the more comparisons we end up doing so it's not a smart proposition to",
    "start": "2895970",
    "end": "2901309"
  },
  {
    "text": "increase on too much and very happy that the blue curve is below it means we're",
    "start": "2901309",
    "end": "2907130"
  },
  {
    "text": "doing fewer comparisons with the heapify approach so this is kind of good and",
    "start": "2907130",
    "end": "2912650"
  },
  {
    "text": "expected and not weird the same about swaps again we count the swap see",
    "start": "2912650",
    "end": "2919789"
  },
  {
    "text": "millions depending on the threshold and against swaps grow and I'm very happy again to see that these swaps grow a lot",
    "start": "2919789",
    "end": "2925700"
  },
  {
    "text": "faster this was for our implementation with heap will grow but not as bad so",
    "start": "2925700",
    "end": "2932210"
  },
  {
    "text": "you know not a surprising result what comes however is surprising because if you",
    "start": "2932210",
    "end": "2938930"
  },
  {
    "text": "time the thing you're going to notice that as you grow the threshold and the",
    "start": "2938930",
    "end": "2944120"
  },
  {
    "text": "comparisons grow and the swaps grow ie you do more work the time is going to",
    "start": "2944120",
    "end": "2950420"
  },
  {
    "text": "get shorter I swear to God my heart is",
    "start": "2950420",
    "end": "2960710"
  },
  {
    "text": "racing right at 115 it's like I'm I'm more exciting than you guys I mean it",
    "start": "2960710",
    "end": "2969470"
  },
  {
    "text": "should go the same direction I mean really this is stupid what the hell so okay so at some point to kind of very",
    "start": "2969470",
    "end": "2976130"
  },
  {
    "text": "nicely beat the damn thing you know so very pleased with with this part here",
    "start": "2976130",
    "end": "2981470"
  },
  {
    "text": "but the problem is they both go down and then this goes down some more and what's",
    "start": "2981470",
    "end": "2987710"
  },
  {
    "text": "going on here I viewed it you know what",
    "start": "2987710",
    "end": "2992930"
  },
  {
    "text": "I measured I measured and went to sleep and measure it the next day I'm not",
    "start": "2992930",
    "end": "2998030"
  },
  {
    "text": "kidding so I rewrote the measuring code so it was so weird that I had to make sure I'm doing the",
    "start": "2998030",
    "end": "3004450"
  },
  {
    "text": "right thing I believe I am doing the right thing so what explanations what hypothesis do",
    "start": "3004450",
    "end": "3011800"
  },
  {
    "text": "we have here yes prediction predictability I'm not",
    "start": "3011800",
    "end": "3024460"
  },
  {
    "text": "sure but I'm not sure it's it's a factor the problem is even for for a given",
    "start": "3024460",
    "end": "3029950"
  },
  {
    "text": "algorithm for example for this heapify based approach the time goes down even",
    "start": "3029950",
    "end": "3036220"
  },
  {
    "text": "though swaps go up comparisons go up so quite literally do more work by all",
    "start": "3036220",
    "end": "3043810"
  },
  {
    "text": "metrics all metrics swap there's more moving memory there's more comparisons and yet the time goes down and it goes",
    "start": "3043810",
    "end": "3050110"
  },
  {
    "text": "down like up to here it's there's a lot of data points here other thoughts",
    "start": "3050110",
    "end": "3058050"
  },
  {
    "text": "yes there's no dispute petitions right",
    "start": "3060930",
    "end": "3071059"
  },
  {
    "text": "okay I do count I do come the compressions and the SWAT team partition as well so I count everything so there's",
    "start": "3073490",
    "end": "3083040"
  },
  {
    "text": "nothing I'm not counting is what I'm saying right so what you know I think what I'm saying is the counts are useless yes thank you so me yeah maybe",
    "start": "3083040",
    "end": "3101220"
  },
  {
    "text": "there's some some better locality because hippy find the thing is going to bring is going to avoid moving elements",
    "start": "3101220",
    "end": "3107850"
  },
  {
    "text": "over large distances it's gonna kind of move them carefully to the to the front so that's my hypothesis as well thank",
    "start": "3107850",
    "end": "3113250"
  },
  {
    "start": "3113000",
    "end": "3113000"
  },
  {
    "text": "you very much so Sweetwater to just to summarize for double is trying to 56 so",
    "start": "3113250",
    "end": "3121950"
  },
  {
    "text": "we improve on STDs or by six percent which is significant and very pleasing by the way so audience should know it's",
    "start": "3121950",
    "end": "3128160"
  },
  {
    "text": "not a it's not a high margin business you can't like do like the three times the speed of stood sort like there's a",
    "start": "3128160",
    "end": "3135230"
  },
  {
    "text": "limit like news proved a limit physical limited which is n log n times a",
    "start": "3135230",
    "end": "3142200"
  },
  {
    "text": "constant minus n times another constant and you can't get a lot better right so",
    "start": "3142200",
    "end": "3147660"
  },
  {
    "text": "six percent very happy with consistently right so that's great and here's the",
    "start": "3147660",
    "end": "3154350"
  },
  {
    "start": "3153000",
    "end": "3153000"
  },
  {
    "text": "metric I'm working on right now I'm collecting the average distance between",
    "start": "3154350",
    "end": "3161280"
  },
  {
    "text": "two subsequent array axises right so if",
    "start": "3161280",
    "end": "3166890"
  },
  {
    "text": "I read or write another element and I read or write another element I take the distance between them and I postulate",
    "start": "3166890",
    "end": "3173510"
  },
  {
    "text": "just because I can just because nothing else is useful i postulate that the",
    "start": "3173510",
    "end": "3178890"
  },
  {
    "text": "smaller the distance the better the algorithm if I mess with elements that are very far apart than not a good",
    "start": "3178890",
    "end": "3185550"
  },
  {
    "text": "algorithm if I mess with things that are close together better algorithm so I",
    "start": "3185550",
    "end": "3191220"
  },
  {
    "text": "hope that this is gonna be a good proxy for luck oh very accesses with quicksort d of n",
    "start": "3191220",
    "end": "3197310"
  },
  {
    "text": "is large for insertion hippie insertion d of any smaller which explains our results and the event decreases with",
    "start": "3197310",
    "end": "3205950"
  },
  {
    "text": "threshold again explains our results and my contention here is that comparisons",
    "start": "3205950",
    "end": "3211320"
  },
  {
    "text": "and swap don't tell the whole story and indeed average axis distance does go",
    "start": "3211320",
    "end": "3218430"
  },
  {
    "start": "3213000",
    "end": "3213000"
  },
  {
    "text": "down with threshold and even more so with classic insertion sort it goes down",
    "start": "3218430",
    "end": "3224010"
  },
  {
    "text": "faster why because the insertion sort just looks at the next element is just",
    "start": "3224010",
    "end": "3230700"
  },
  {
    "text": "the most economical in that but he does a lot of comparisons of swaps Segarra get all of all of the above",
    "start": "3230700",
    "end": "3235910"
  },
  {
    "text": "comparisons swaps and distance okay you can look just one metric and conclude",
    "start": "3235910",
    "end": "3242670"
  },
  {
    "text": "right Wow okay interesting",
    "start": "3242670",
    "end": "3247850"
  },
  {
    "text": "to summarize I'm noticing with",
    "start": "3247850",
    "end": "3254010"
  },
  {
    "start": "3248000",
    "end": "3248000"
  },
  {
    "text": "increasing frequency and and worry that",
    "start": "3254010",
    "end": "3263690"
  },
  {
    "text": "books that are consider like sacred cows are not no longer that sacred because",
    "start": "3263750",
    "end": "3272100"
  },
  {
    "text": "every book a crack on algorithm is going to tell if you improve on comparisons and swaps you improving on the",
    "start": "3272100",
    "end": "3277460"
  },
  {
    "text": "performance of sorting which is simply not the case so there's a divergence",
    "start": "3277460",
    "end": "3283440"
  },
  {
    "text": "between established theory and practice so I would suggest you try silly things and measure because silly things Perl",
    "start": "3283440",
    "end": "3289590"
  },
  {
    "text": "plus good measurement equals surprising results so to improve your intuition",
    "start": "3289590",
    "end": "3297810"
  },
  {
    "text": "device and track meaningful metrics such as this proposed distance you've been",
    "start": "3297810",
    "end": "3304830"
  },
  {
    "text": "great thank you very much thank you",
    "start": "3304830",
    "end": "3309470"
  }
]