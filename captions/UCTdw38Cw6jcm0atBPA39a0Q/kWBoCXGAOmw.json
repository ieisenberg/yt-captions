[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "hi-yah as you might have know this is the session about working with legacy code in C++ which some of you probably",
    "start": "5060",
    "end": "13889"
  },
  {
    "text": "do going judging from the size of the home and the amount of people let's start quick",
    "start": "13889",
    "end": "21240"
  },
  {
    "text": "introduction my name is draw helper I am a consultant finance consultant and the",
    "start": "21240",
    "end": "26970"
  },
  {
    "text": "software architect I walk mainly in the free object-oriented well known",
    "start": "26970",
    "end": "32129"
  },
  {
    "text": "object-oriented languages C++ Java C shop that's what I mostly do write a lot",
    "start": "32129",
    "end": "38969"
  },
  {
    "text": "of code been doing that for more than a decade judging from the white hairs in the home probably most of you are as well and",
    "start": "38969",
    "end": "47129"
  },
  {
    "text": "I've been doing that for some time been very frustrated in the beginning because",
    "start": "47129",
    "end": "53730"
  },
  {
    "text": "I tended to break a lot of the code as I was writing it and somewhere along around 2005 I walked with the company",
    "start": "53730",
    "end": "62010"
  },
  {
    "text": "which were a very agile shop with TDD and unit testing and I've become very in",
    "start": "62010",
    "end": "68490"
  },
  {
    "text": "love with the topic in a way and ever since I've been advocating how to write",
    "start": "68490",
    "end": "74280"
  },
  {
    "text": "better code helping developers make some some try to write better code so they",
    "start": "74280",
    "end": "84299"
  },
  {
    "text": "can maintain it I mean talking at conferences as well and I'd like to",
    "start": "84299",
    "end": "89970"
  },
  {
    "text": "think of myself as a test driven developer as well I'm also a blow site author I have a couple of courses on",
    "start": "89970",
    "end": "96090"
  },
  {
    "text": "Pluralsight two of which about C++ unit testing C++ fundamentals unit testing",
    "start": "96090",
    "end": "103439"
  },
  {
    "text": "with catch a framework I've very I like in love and I'll talk about that",
    "start": "103439",
    "end": "108750"
  },
  {
    "text": "tomorrow and another one about mocking with Google mock and that one has a",
    "start": "108750",
    "end": "115140"
  },
  {
    "text": "module about legacy code as well you might want to check it out because I won't be able to talk about everything I",
    "start": "115140",
    "end": "121380"
  },
  {
    "text": "like to in 45 minutes and if you liked even more then that's a place to be also",
    "start": "121380",
    "end": "127020"
  },
  {
    "text": "have a blog at helper code calm and Twitter and I'll be helper easy to remember yes this is my name",
    "start": "127020",
    "end": "135540"
  },
  {
    "text": "and all of you probably all helpful functions in the past and so it's easy",
    "start": "135540",
    "end": "142799"
  },
  {
    "text": "to remember and we need to talk about legacy code right anyone knows that",
    "start": "142799",
    "end": "148469"
  },
  {
    "text": "exact definition of legacy code yeah",
    "start": "148469",
    "end": "153720"
  },
  {
    "text": "it's tough you just solved is as accurate as it can be basically yeah",
    "start": "153720",
    "end": "160909"
  },
  {
    "text": "yeah I remember back in University we had a very hard difficult exercise took",
    "start": "160909",
    "end": "166920"
  },
  {
    "text": "us about a week to write and I was very fascinated ask someone who was with me",
    "start": "166920",
    "end": "172560"
  },
  {
    "text": "in that class whether or not he managed to finish the exercise in time he says yeah it's got it compiled so yeah it",
    "start": "172560",
    "end": "180000"
  },
  {
    "text": "doesn't have to run and unfortunately there's no clear definition of legacy code never was there is one there is a",
    "start": "180000",
    "end": "188430"
  },
  {
    "start": "184000",
    "end": "249000"
  },
  {
    "text": "definition in a book called walking effectively with legacy code anyone ever read that book okay it's a very good",
    "start": "188430",
    "end": "195239"
  },
  {
    "text": "book it's about 50 or 20 years old book and still everything there is still",
    "start": "195239",
    "end": "200280"
  },
  {
    "text": "current and still good especially if you're in C++ because that's what he used for most of the book actually",
    "start": "200280",
    "end": "206190"
  },
  {
    "text": "created the unit testing framework for that book written by Michael feathers by the way and his definition is code",
    "start": "206190",
    "end": "213239"
  },
  {
    "text": "without unit s but even he knows that it's not an exact definition but you",
    "start": "213239",
    "end": "219930"
  },
  {
    "text": "know what anyone here in the room can probably recognize legacy code right when you see it you know it yeah it's a",
    "start": "219930",
    "end": "227400"
  },
  {
    "text": "feeling more than actual facts it's a feeling I get in the pit of my stomach",
    "start": "227400",
    "end": "233159"
  },
  {
    "text": "when I look at that code and I think oh hell now I need to do something with it",
    "start": "233159",
    "end": "239609"
  },
  {
    "text": "and that code was probably written in the past could be a week ago usually",
    "start": "239609",
    "end": "245220"
  },
  {
    "text": "more than a few years by someone who had no clue what he's doing",
    "start": "245220",
    "end": "250370"
  },
  {
    "start": "249000",
    "end": "279000"
  },
  {
    "text": "using obsolete method and absolute tools we want to work with modern C++ most of",
    "start": "250370",
    "end": "256709"
  },
  {
    "text": "the time it's not exactly modern C++ sometimes it's not even C++ at all and",
    "start": "256709",
    "end": "261750"
  },
  {
    "text": "we need to somehow traverse that code and we know it when we see it",
    "start": "261750",
    "end": "266880"
  },
  {
    "text": "right and there is no clear definition but there are some properties of legacy code",
    "start": "266880",
    "end": "273080"
  },
  {
    "text": "which I found to recur whenever I need to walk with that code the first of",
    "start": "273080",
    "end": "278850"
  },
  {
    "text": "which is that it is no longer designed or engineered just continuously patched",
    "start": "278850",
    "end": "284280"
  },
  {
    "start": "279000",
    "end": "383000"
  },
  {
    "text": "and hacked you know what I mean you know you in the beginning of every project",
    "start": "284280",
    "end": "291090"
  },
  {
    "text": "the best time to be in a project in the beginning of the project there's architects and design meetings and we come up with this beautiful elegant",
    "start": "291090",
    "end": "297510"
  },
  {
    "text": "design which fell to meet all the needs but at least some of them and we start",
    "start": "297510",
    "end": "303540"
  },
  {
    "text": "writing the code within the lease first a second version and then we go away someone else is left with that code to",
    "start": "303540",
    "end": "310290"
  },
  {
    "text": "maintain it and that guy doesn't know this beautiful elegant design never heard about it might not read the",
    "start": "310290",
    "end": "316980"
  },
  {
    "text": "documents if there are any design documents and if there are design documents and architectural diagrams",
    "start": "316980",
    "end": "323310"
  },
  {
    "text": "there are probably long because they became obsolete the code has changed and the design in the world document",
    "start": "323310",
    "end": "328830"
  },
  {
    "text": "PowerPoint slides whatever was left behind and so the maintainer is left",
    "start": "328830",
    "end": "334590"
  },
  {
    "text": "with patching up things and making the situation even worse and you tend to",
    "start": "334590",
    "end": "341310"
  },
  {
    "text": "find very big losses with long long methods I've seen matters 10,000 lines",
    "start": "341310",
    "end": "347729"
  },
  {
    "text": "long and the only way to fix a bug in a 10,000 long method is to put a",
    "start": "347729",
    "end": "354000"
  },
  {
    "text": "breakpoint in the beginning of that method run with your debugger if you have a debugger being a C++ one but",
    "start": "354000",
    "end": "360419"
  },
  {
    "text": "let's say you have it and you get a point that looks ok ish to you you write",
    "start": "360419",
    "end": "366030"
  },
  {
    "text": "your code maybe you learn it a couple of times if you can because not all application can be run on my machine and",
    "start": "366030",
    "end": "372979"
  },
  {
    "text": "commit and run away and the reason we're",
    "start": "372979",
    "end": "378300"
  },
  {
    "text": "doing that is not because we're bad developers or bad persons is because legacy code is easily broken you can",
    "start": "378300",
    "end": "387330"
  },
  {
    "start": "383000",
    "end": "477000"
  },
  {
    "text": "easily without intending to break features that have absolutely nothing to",
    "start": "387330",
    "end": "393479"
  },
  {
    "text": "do with the fix or the new feature you are trying to implement a client of mine",
    "start": "393479",
    "end": "399270"
  },
  {
    "text": "had a problem in the middle of the night one of the customers big customer called",
    "start": "399270",
    "end": "406229"
  },
  {
    "text": "because some coal functionality stopped working and it was a very stressful",
    "start": "406229",
    "end": "412110"
  },
  {
    "text": "period which took a few days in which we read a bunch of logs and debug this system until we found the problem",
    "start": "412110",
    "end": "418800"
  },
  {
    "text": "and once we found the problem wanted to know how the hell it happened so we opened the history in the source control",
    "start": "418800",
    "end": "425550"
  },
  {
    "text": "in front of something very interesting first the fix was had nothing to do with",
    "start": "425550",
    "end": "432389"
  },
  {
    "text": "the problem basically someone to change the future and somehow that caused the issue in another part of the system but",
    "start": "432389",
    "end": "439409"
  },
  {
    "text": "the mode is concerned in fact was that that specific bug was introduced a month",
    "start": "439409",
    "end": "445289"
  },
  {
    "text": "before the client noticed and that's what we are afraid of because if I'll",
    "start": "445289",
    "end": "450810"
  },
  {
    "text": "find the bug immediately no problem at all I'll fix that I remember exactly what I did but after a month trying to",
    "start": "450810",
    "end": "457650"
  },
  {
    "text": "understand all the changes all the things that happened and we might have walk-ins a few other things along the way which",
    "start": "457650",
    "end": "464190"
  },
  {
    "text": "we didn't even know about up to this time right now and this is not a very",
    "start": "464190",
    "end": "470520"
  },
  {
    "text": "fun place to be and one of the reason it's easy to break legacy code is",
    "start": "470520",
    "end": "475710"
  },
  {
    "text": "because it was written by someone else by that guy which we that we tend to ate",
    "start": "475710",
    "end": "482099"
  },
  {
    "start": "477000",
    "end": "544000"
  },
  {
    "text": "that guy we don't like that guy and he wrote the code as best as I knew but at",
    "start": "482099",
    "end": "488909"
  },
  {
    "text": "the time he wasn't aware of all the features and complexity and is not around anymore and we are stuck with",
    "start": "488909",
    "end": "495090"
  },
  {
    "text": "this mess the reason is not around is that once a project ends he moved on he",
    "start": "495090",
    "end": "500580"
  },
  {
    "text": "moved to another project in the company he might have moved to a different company right now I'm working with their",
    "start": "500580",
    "end": "507030"
  },
  {
    "text": "team outsourced team we'll fix in a light in a new feature and there's no",
    "start": "507030",
    "end": "513120"
  },
  {
    "text": "one not a single person in the company who knows how the system work because all of the teams that work on that",
    "start": "513120",
    "end": "519149"
  },
  {
    "text": "specific product left went to work for",
    "start": "519149",
    "end": "524430"
  },
  {
    "text": "the companies and we trying to understand what the hell happens there and that tends to happen quite a lot",
    "start": "524430",
    "end": "531959"
  },
  {
    "text": "because every two or three years people tend to change jobs but there is one one thing about legacy",
    "start": "531959",
    "end": "542009"
  },
  {
    "text": "code all of us need to remember it has users that is the sole purpose of this",
    "start": "542009",
    "end": "548490"
  },
  {
    "start": "544000",
    "end": "602000"
  },
  {
    "text": "lecture that is the only reason we are actually working with legacy code someone likes that code wanted to",
    "start": "548490",
    "end": "554639"
  },
  {
    "text": "continue on walking very passionate about that code as well and we can't let",
    "start": "554639",
    "end": "559920"
  },
  {
    "text": "them down because they'll get angry and we want them to continue on using the same",
    "start": "559920",
    "end": "565199"
  },
  {
    "text": "features they've been using til now give them new features perhaps in some projects you need to continue development we want to fix bugs there's",
    "start": "565199",
    "end": "572730"
  },
  {
    "text": "a funny thing that happens from time to time you fix a bug and you notice that the users actually want the bug to happen because they found a workaround",
    "start": "572730",
    "end": "579180"
  },
  {
    "text": "that's the way they walk and happens with legacy code more times than you expect it to be and those users we need",
    "start": "579180",
    "end": "587250"
  },
  {
    "text": "to keep them happy and so we are faced",
    "start": "587250",
    "end": "592680"
  },
  {
    "text": "with a problem very hard not fun to maintain code with people that actually want us to do that and there's a simple",
    "start": "592680",
    "end": "599819"
  },
  {
    "text": "solution to the to this combined form free oh so if we for the solution the",
    "start": "599819",
    "end": "604980"
  },
  {
    "text": "good news and bad news the bad news first of all you're there's a lot of",
    "start": "604980",
    "end": "610470"
  },
  {
    "text": "legacy code in C++ it's been around forever in computer science terms being",
    "start": "610470",
    "end": "615930"
  },
  {
    "text": "around before I've started working will be around probably for long many many years a lot of the C++ code out there in",
    "start": "615930",
    "end": "623910"
  },
  {
    "text": "organizations that want that code to continue on walking on top of that you are probably walking with legacy code at",
    "start": "623910",
    "end": "629759"
  },
  {
    "text": "the moment who will I started a new C++ project in the last year exactly zero",
    "start": "629759",
    "end": "635850"
  },
  {
    "text": "one two first of all a key second of overall",
    "start": "635850",
    "end": "642470"
  },
  {
    "text": "your code unfortunately will become legacy code at some point maybe in about",
    "start": "642470",
    "end": "647639"
  },
  {
    "text": "a matter of months or years someone else will end up maintaining it so most of us",
    "start": "647639",
    "end": "654089"
  },
  {
    "text": "if not all of us work with legacy code right now and we always need to read more code anyway actually right and",
    "start": "654089",
    "end": "661160"
  },
  {
    "text": "lastly tsipras's make it very easy to make very big mistakes memory allocation",
    "start": "661160",
    "end": "666540"
  },
  {
    "text": "problems and buffer overflows easily created if you don't really understand the system you",
    "start": "666540",
    "end": "671990"
  },
  {
    "text": "walk in on and in C++ you don't even get that good error message you get a core",
    "start": "671990",
    "end": "677120"
  },
  {
    "text": "dump if you're lucky or in impossible to understand crash in most of cases again",
    "start": "677120",
    "end": "683630"
  },
  {
    "text": "depending on the job that was done but someone else the good news though is",
    "start": "683630",
    "end": "689029"
  },
  {
    "text": "that C++ is a powerful language C++ has many features which I can harness to",
    "start": "689029",
    "end": "695120"
  },
  {
    "text": "work with the legacy code which would make my life easier which I wish I had in other languages those nice",
    "start": "695120",
    "end": "701889"
  },
  {
    "text": "garbage-collected languages like Java and c-sharp won't enable me to do most of the tricks I'll show you today",
    "start": "701889",
    "end": "708009"
  },
  {
    "text": "because there are safe languages and C++ I can use those powers in order to work",
    "start": "708009",
    "end": "714889"
  },
  {
    "text": "with legacy code in order to change existing code without causing harm sometime without actually changing the",
    "start": "714889",
    "end": "721310"
  },
  {
    "text": "production code which I can do in any other language so the simple algorithm",
    "start": "721310",
    "end": "727550"
  },
  {
    "start": "726000",
    "end": "957000"
  },
  {
    "text": "for handling legacy code first learn what the code does seems trivial right I",
    "start": "727550",
    "end": "733420"
  },
  {
    "text": "can tell you how many times I've seen people I develop a faced with the problem first of all will write more",
    "start": "733420",
    "end": "739819"
  },
  {
    "text": "code without understanding what the code does I've actually worked with companies in which I needed to implement a new",
    "start": "739819",
    "end": "747980"
  },
  {
    "text": "feature but no one knew what the old system that did at all in one company",
    "start": "747980",
    "end": "754220"
  },
  {
    "text": "they gave me a very long method that did was something very important C++ and the",
    "start": "754220",
    "end": "760100"
  },
  {
    "text": "first thing I did is the bug that method try to understand how that method behaves second thing I did I broke it",
    "start": "760100",
    "end": "766850"
  },
  {
    "text": "into smaller methods and then I took a pen and paper and draw a bunch of",
    "start": "766850",
    "end": "772220"
  },
  {
    "text": "rectangles connected them wood arrows to show how each method called each method",
    "start": "772220",
    "end": "777649"
  },
  {
    "text": "what happens in each and every one of them it took me about three or four pages to write that specific method one",
    "start": "777649",
    "end": "783649"
  },
  {
    "text": "method a flow then I went to the client showed him that flow and together we",
    "start": "783649",
    "end": "789829"
  },
  {
    "text": "found out a bunch of calls that were not needed at all never called just left",
    "start": "789829",
    "end": "795680"
  },
  {
    "text": "behind because people patch that code over and over and over again and they",
    "start": "795680",
    "end": "801199"
  },
  {
    "text": "were so happy the wanted me to copy that peso they can handle it in the development home to",
    "start": "801199",
    "end": "806519"
  },
  {
    "text": "understand what this code does so first of all you need to understand what the code does once you do understand what",
    "start": "806519",
    "end": "812399"
  },
  {
    "text": "the code does you need to make sure it keeps on doing that this is the harder",
    "start": "812399",
    "end": "818429"
  },
  {
    "text": "part you need to make sure that no matter what you do at least the features that the client wants continue to behave",
    "start": "818429",
    "end": "826110"
  },
  {
    "text": "the same way exactly the same way and when you have those two you can start on",
    "start": "826110",
    "end": "832290"
  },
  {
    "text": "doing the fun stuff you can refactor change the implementation optimize the",
    "start": "832290",
    "end": "838589"
  },
  {
    "text": "code maybe sorry cut a bunch of things out of it and that is usually what",
    "start": "838589",
    "end": "846839"
  },
  {
    "text": "people start with but you don't want to start with it with that prayer with the further point because you'll probably",
    "start": "846839",
    "end": "852839"
  },
  {
    "text": "break something and you can make bigger and bigger changes and riskier and riskier changes as you go along and you",
    "start": "852839",
    "end": "859019"
  },
  {
    "text": "gain some understanding of what the code does now those for easier said and done you",
    "start": "859019",
    "end": "866910"
  },
  {
    "text": "know otherwise the session would have ended at this point and they are quite trivial to think about it and a bunch of",
    "start": "866910",
    "end": "874889"
  },
  {
    "text": "tools that help me both analyzing the code and working with the code static analysis debugger login but there is one",
    "start": "874889",
    "end": "883230"
  },
  {
    "text": "tool I found out to be very useful I'm biased I know and that is unit s or specifically automated tests that I can",
    "start": "883230",
    "end": "890699"
  },
  {
    "text": "write and once I do write those tests I can first understand what the code does",
    "start": "890699",
    "end": "895740"
  },
  {
    "text": "because in order to write a good test I need to understand how the system behaves how to initialize it you know",
    "start": "895740",
    "end": "903720"
  },
  {
    "text": "new seems like a trivial thing to do in the class unless it calls the database a serval and crashes five times along the",
    "start": "903720",
    "end": "909869"
  },
  {
    "text": "way maybe it has dependencies who knows I know what the inputs I'm supposed to",
    "start": "909869",
    "end": "916410"
  },
  {
    "text": "gain and what the expected result and when I have enough of the tests I took",
    "start": "916410",
    "end": "921989"
  },
  {
    "text": "care of the second point as well because I have the safety net that will protect me when the code misbehave when I",
    "start": "921989",
    "end": "928559"
  },
  {
    "text": "accidentally introduced a new bug and then I can do the third one really fast once I have the test done it's in place",
    "start": "928559",
    "end": "935910"
  },
  {
    "text": "and have the safety net in place I can start really cutting things out and changing stuff and optimizing the system",
    "start": "935910",
    "end": "942300"
  },
  {
    "text": "or whatever else you need to do and all",
    "start": "942300",
    "end": "947340"
  },
  {
    "text": "of dollars done with unit tests but what is a unit is another term that no one ever defined properly the way I think",
    "start": "947340",
    "end": "954930"
  },
  {
    "text": "about it it is a simple method this is it hey whoa who walked you with the",
    "start": "954930",
    "end": "961140"
  },
  {
    "start": "957000",
    "end": "1055000"
  },
  {
    "text": "Google test before okay more than the average usually I get three people raise",
    "start": "961140",
    "end": "967080"
  },
  {
    "text": "their hands and so no need to go over it too deeply",
    "start": "967080",
    "end": "972240"
  },
  {
    "text": "but every single what we tend to think of as a xunit frameworks have the same",
    "start": "972240",
    "end": "978740"
  },
  {
    "text": "structure doesn't matter if it's C++ or Java I have some way to tell whoever is",
    "start": "978740",
    "end": "987150"
  },
  {
    "text": "going to run the test that this is a test in Google tests it's a macro called test and class behind it which we tend",
    "start": "987150",
    "end": "994500"
  },
  {
    "text": "to call test feature and the test name this is a test and then I have the body of the test which is essentially just a",
    "start": "994500",
    "end": "1000710"
  },
  {
    "text": "method I can write whatever I want the there are rules to writing it properly what you won't be able to cover all of",
    "start": "1000710",
    "end": "1007100"
  },
  {
    "text": "them and in the bottom usually have an assert that checks whether or not I got",
    "start": "1007100",
    "end": "1012110"
  },
  {
    "text": "the desired result and when running that test I can make sure that if someone",
    "start": "1012110",
    "end": "1017300"
  },
  {
    "text": "accidentally changed the code in some way due to a new requirement change or a",
    "start": "1017300",
    "end": "1022700"
  },
  {
    "text": "bug then when run in the test I will get a failure whoever understand this reference is a",
    "start": "1022700",
    "end": "1029990"
  },
  {
    "text": "lucky person whoever doesn't understand that specific reference please go to youtube right Monty Python and the Holy",
    "start": "1029990",
    "end": "1035900"
  },
  {
    "text": "Grail and enjoy yourself so I'll get a failure enough test",
    "start": "1035900",
    "end": "1041630"
  },
  {
    "text": "I'll get failure whenever I break something and then I can go faster because I have this safety net in place",
    "start": "1041630",
    "end": "1047709"
  },
  {
    "text": "but it's not the whole story unit tests are not enough because I have something nasty called dependencies",
    "start": "1047710",
    "end": "1054980"
  },
  {
    "text": "write my code doesn't work on its own taking a single class creating it on the",
    "start": "1054980",
    "end": "1060530"
  },
  {
    "start": "1055000",
    "end": "1166000"
  },
  {
    "text": "stack or whatever and running that is almost impossible in every single system I ever saw we have dependencies those",
    "start": "1060530",
    "end": "1068450"
  },
  {
    "text": "dependencies are a pain they'll call the database or use some environment I don't have on my computer",
    "start": "1068450",
    "end": "1073669"
  },
  {
    "text": "or perhaps call someone else code which I don't want to run right now and those",
    "start": "1073669",
    "end": "1080179"
  },
  {
    "text": "dependencies need to go away at least for the purpose of testing something specific and we use something we call",
    "start": "1080179",
    "end": "1087620"
  },
  {
    "text": "fake object to do that anyone ever the term fake omok okay one",
    "start": "1087620",
    "end": "1092960"
  },
  {
    "text": "two three four quarter of the room the rest of you know how to write those fake",
    "start": "1092960",
    "end": "1098029"
  },
  {
    "text": "objects don't worry there isn't a cold in fact objects not mocks because I think that the term mock",
    "start": "1098029",
    "end": "1104210"
  },
  {
    "text": "is a bit misleading also make you feel frightened because it's a new term",
    "start": "1104210",
    "end": "1110230"
  },
  {
    "text": "basically what I need to do is something you always did inheritance are using",
    "start": "1110230",
    "end": "1115669"
  },
  {
    "text": "Harrington seal in most of cases because I'm not really calling a service or file",
    "start": "1115669",
    "end": "1122179"
  },
  {
    "text": "or the database whoa this is a simpler specimen some of you might have written",
    "start": "1122179",
    "end": "1127220"
  },
  {
    "text": "the actual layer that calls the database but other than that I'm calling a class",
    "start": "1127220",
    "end": "1132549"
  },
  {
    "text": "right I have this class which if I'll call some method on it it will call the",
    "start": "1132549",
    "end": "1139909"
  },
  {
    "text": "database or go outside using an HTTP call or save a file and that class can",
    "start": "1139909",
    "end": "1145880"
  },
  {
    "text": "be replaced with a class that look exactly the same but that's absolutely nothing this is the fake object or the",
    "start": "1145880",
    "end": "1152179"
  },
  {
    "text": "mock object and we do that with inheritance if an inherit the same class override all it's a method I'll end up",
    "start": "1152179",
    "end": "1159230"
  },
  {
    "text": "with a class that does absolutely nothing this is mocking thermic one on one by the way",
    "start": "1159230",
    "end": "1164480"
  },
  {
    "text": "and in Google terry mock i can do that by inheriting that class just like here",
    "start": "1164480",
    "end": "1171700"
  },
  {
    "start": "1166000",
    "end": "1595000"
  },
  {
    "text": "okay this is inheritance basic inheritance unfortunate in C++ although",
    "start": "1171700",
    "end": "1176779"
  },
  {
    "text": "I need to write that class I don't like to write classes for testing purposes because I need to maintain them but this",
    "start": "1176779",
    "end": "1183679"
  },
  {
    "text": "is as almost as good as good as it gets if you want to see more options come tomorrow to my session and in Google in",
    "start": "1183679",
    "end": "1192409"
  },
  {
    "text": "Google mock I'll inherit a class in the test project and then use those MCOs",
    "start": "1192409",
    "end": "1198230"
  },
  {
    "text": "over here to override the methods that muck does MCOs Mach underscore",
    "start": "1198230",
    "end": "1204440"
  },
  {
    "text": "method and the number basically what they do is on the when they didn't",
    "start": "1204440",
    "end": "1210320"
  },
  {
    "text": "compilation they will overwrite that method over here and then it'll replace",
    "start": "1210320",
    "end": "1217280"
  },
  {
    "text": "it with absolutely nothing they turn what this is a void method with two",
    "start": "1217280",
    "end": "1223250"
  },
  {
    "text": "strings and this one will return a null pointer absolutely nothing",
    "start": "1223250",
    "end": "1229160"
  },
  {
    "text": "the reason I'm using Google Mach is to say myself some walk that walk been in",
    "start": "1229160",
    "end": "1234890"
  },
  {
    "text": "every single test I will want a different behavior maybe I want that method to for an exception to show that",
    "start": "1234890",
    "end": "1242540"
  },
  {
    "text": "the server wasn't available maybe I wanted this method over here to return a",
    "start": "1242540",
    "end": "1248900"
  },
  {
    "text": "specific value oh I just want to make sure that that value was called doesn't",
    "start": "1248900",
    "end": "1254179"
  },
  {
    "text": "matter and it looks something like this in code here's I have a test written",
    "start": "1254179",
    "end": "1263870"
  },
  {
    "text": "with Google test with Google Mach if you never seen that before we'll go slowly",
    "start": "1263870",
    "end": "1269210"
  },
  {
    "text": "don't worry basically I will just want to check this method calculate next data",
    "start": "1269210",
    "end": "1275020"
  },
  {
    "text": "that method does almost nothing it's a distributed calculator it goes to the",
    "start": "1275020",
    "end": "1281450"
  },
  {
    "text": "database get the next two numbers as a tuple back and then it create an HTTP",
    "start": "1281450",
    "end": "1288860"
  },
  {
    "text": "GET call with the client calls the server in order to add those two numbers and then return the number as integer",
    "start": "1288860",
    "end": "1296140"
  },
  {
    "text": "that God has many bugs by the way I know you can see some of them at least you",
    "start": "1296140",
    "end": "1301400"
  },
  {
    "text": "can get an exception that's exceptionally as well but it also has two dependencies virtually first of",
    "start": "1301400",
    "end": "1308240"
  },
  {
    "text": "which is the data access I don't really have a database in my test and second of which is the client I don't want to make",
    "start": "1308240",
    "end": "1314900"
  },
  {
    "text": "sure that the server is out there expecting my call and what I'll do is fake those here is the first fake rest",
    "start": "1314900",
    "end": "1323510"
  },
  {
    "text": "HTTP client I'll inherit the real client and then mock the method HTTP GET now it",
    "start": "1323510",
    "end": "1333380"
  },
  {
    "text": "does absolutely nothing and that's it if you want a good exercise in reading C++ code go with to this macro and see",
    "start": "1333380",
    "end": "1340980"
  },
  {
    "text": "what real what happens it's very tricky yet very interesting code to lead if",
    "start": "1340980",
    "end": "1346650"
  },
  {
    "text": "that's what you enjoy but for now let's just assume it's or it overrides the",
    "start": "1346650",
    "end": "1351780"
  },
  {
    "text": "method and that's it and same for the data access here I have a cons method so I use more cons method",
    "start": "1351780",
    "end": "1358020"
  },
  {
    "text": "with no arguments that will return a pair of two integers integers and that's",
    "start": "1358020",
    "end": "1363300"
  },
  {
    "text": "it so now I have those two mocks another important thing to say is that those two",
    "start": "1363300",
    "end": "1368460"
  },
  {
    "text": "mock mocks only exist within my test",
    "start": "1368460",
    "end": "1373970"
  },
  {
    "text": "tests they do not belong in my production code okay and going here this",
    "start": "1373970",
    "end": "1382350"
  },
  {
    "text": "is the test I'll create a fact that access nothing much here and then I'll",
    "start": "1382350",
    "end": "1387930"
  },
  {
    "text": "use Google mock to say I'm expecting a call from that fact that access with the",
    "start": "1387930",
    "end": "1393030"
  },
  {
    "text": "method get data and I want you to always return this specific object okay so",
    "start": "1393030",
    "end": "1401580"
  },
  {
    "text": "instead of doing nothing now whenever I'll call that method I'll get that specific value back a pair of one and",
    "start": "1401580",
    "end": "1409050"
  },
  {
    "text": "two and I'll do the same with the client I'll expect you to call HTTP GET with",
    "start": "1409050",
    "end": "1417060"
  },
  {
    "text": "that specific string at least once and return three the reason I'm using at",
    "start": "1417060",
    "end": "1424530"
  },
  {
    "text": "least once this is basically well there are different Mach enfermo can see plus plus in case of Google Mach and at least",
    "start": "1424530",
    "end": "1431550"
  },
  {
    "text": "one other one here I tell it not only what to return but the fact I actually",
    "start": "1431550",
    "end": "1437820"
  },
  {
    "text": "expect that method to be called the reason I wanted to be called is because this method the one I'm testing with the",
    "start": "1437820",
    "end": "1445080"
  },
  {
    "text": "real object does not return anything I can check at least I don't care about whatever it turns so the result of that",
    "start": "1445080",
    "end": "1453330"
  },
  {
    "text": "specific test is that this method was called instead of checking for value and",
    "start": "1453330",
    "end": "1458640"
  },
  {
    "text": "checking for interaction I am checking that this method was called with a specific value because once I go to the",
    "start": "1458640",
    "end": "1464550"
  },
  {
    "text": "client that call it with the right arguments I'm done in this specific test tricky but mocking basics so once I get",
    "start": "1464550",
    "end": "1476039"
  },
  {
    "text": "this method called I decided what comes back right so I don't really care about the result because I told him exactly",
    "start": "1476039",
    "end": "1482580"
  },
  {
    "text": "what to do and Google Mach walks so I don't need to test that one and if we go",
    "start": "1482580",
    "end": "1489450"
  },
  {
    "text": "and try to run that method I'm using by the way that would work on Linux or whatever wherever you run zipless person",
    "start": "1489450",
    "end": "1497190"
  },
  {
    "text": "I'm running on Windows using a resharper for c++ xn2 by jet planes and I'll go",
    "start": "1497190",
    "end": "1504510"
  },
  {
    "text": "into that method calculate next data after I've set it up with everything I",
    "start": "1504510",
    "end": "1510450"
  },
  {
    "text": "need and will notice that data is returned exactly as I expected to be one",
    "start": "1510450",
    "end": "1518159"
  },
  {
    "text": "and two because I told him to and that access is a type of Google mark jamoke",
    "start": "1518159",
    "end": "1523440"
  },
  {
    "text": "Tata a bunch of things here don't really care about them and if I go over he'll",
    "start": "1523440",
    "end": "1531690"
  },
  {
    "text": "create some string and I'll send that thing with client actually beget and run",
    "start": "1531690",
    "end": "1536730"
  },
  {
    "text": "in I'll get a test passing if I'll mess",
    "start": "1536730",
    "end": "1543059"
  },
  {
    "text": "up this test and cause it to expect something completely different",
    "start": "1543059",
    "end": "1548940"
  },
  {
    "text": "let's say this for example and run it again then I'll get a failure which is a",
    "start": "1548940",
    "end": "1555990"
  },
  {
    "text": "good thing because if someone will change the actual query I'm sending to back then I need to know about that and",
    "start": "1555990",
    "end": "1562669"
  },
  {
    "text": "the good thing about using mocking framework is that they will also give me a good error message because the only",
    "start": "1562669",
    "end": "1568380"
  },
  {
    "text": "thing I care about unit s is when they fail that's the reason about it and it says Google mode try the following one",
    "start": "1568380",
    "end": "1574350"
  },
  {
    "text": "expectation didn't match blah blah blah you're expected to get this did it",
    "start": "1574350",
    "end": "1579960"
  },
  {
    "text": "happen and so and so on but you got this instead and now I can fix the bug",
    "start": "1579960",
    "end": "1587840"
  },
  {
    "text": "so this was mocking in five minutes or less ambu does too I can test legacy",
    "start": "1590080",
    "end": "1600460"
  },
  {
    "text": "code but it's not always that simple because I used injection here I passed",
    "start": "1600460",
    "end": "1606640"
  },
  {
    "text": "all the object depends is from outside inside my class not always possible second of which I assumed that I can",
    "start": "1606640",
    "end": "1615130"
  },
  {
    "text": "actually override those methods also not true for most system I walked on and",
    "start": "1615130",
    "end": "1620260"
  },
  {
    "text": "there are different dependencies out they're not all created equal some of them are harder to mock sometime",
    "start": "1620260",
    "end": "1626260"
  },
  {
    "text": "impossible to mock for example if I don't have virtual methods in my class because this code was written many many",
    "start": "1626260",
    "end": "1633640"
  },
  {
    "start": "1627000",
    "end": "1716000"
  },
  {
    "text": "years ago without test and it doesn't have any virtual methods sometimes it's as easy as making that class virtual if",
    "start": "1633640",
    "end": "1640900"
  },
  {
    "text": "you allow two because there are performance implications but if not you have a problem you can't use inheritance",
    "start": "1640900",
    "end": "1647910"
  },
  {
    "text": "second some classes cannot or be inherit or very hard to inherit as well well in",
    "start": "1647910",
    "end": "1654280"
  },
  {
    "text": "C++ 11 we are final which means the class cannot be inherit at all and someone might have used that",
    "start": "1654280",
    "end": "1660930"
  },
  {
    "text": "and static methods again you can fake static methods because you can't and",
    "start": "1660930",
    "end": "1668470"
  },
  {
    "text": "Singleton's a lot of code I see has singleton pattern implemented some form or the other and some of which called",
    "start": "1668470",
    "end": "1676900"
  },
  {
    "text": "the single turn many many times inside the code not pass it from outside using",
    "start": "1676900",
    "end": "1682240"
  },
  {
    "text": "dependency injection that is a problem some classes are instantiated inside your code you have new in the",
    "start": "1682240",
    "end": "1688570"
  },
  {
    "text": "constructor you can't push it from outside the easy solution in this case create another constructor for tests and",
    "start": "1688570",
    "end": "1695560"
  },
  {
    "text": "push it from outside but it's not always possible and heavy classes classes that do a lot of things my class does the",
    "start": "1695560",
    "end": "1703120"
  },
  {
    "text": "calculation cause the database calls the service everything includes together in a huge class and I can break it not",
    "start": "1703120",
    "end": "1710260"
  },
  {
    "text": "right now because I will break my code without noticing and I need a way let's",
    "start": "1710260",
    "end": "1716080"
  },
  {
    "start": "1716000",
    "end": "2021000"
  },
  {
    "text": "start with Singleton's this is a poorly implemented signal tone evolved and in",
    "start": "1716080",
    "end": "1721630"
  },
  {
    "text": "single tone pattern wherever you look at it has an instance that will get initialized in some way or another and",
    "start": "1721630",
    "end": "1728130"
  },
  {
    "text": "when someone calls that class it will call that getinstance or whatever you",
    "start": "1728130",
    "end": "1733360"
  },
  {
    "text": "called your method and try to do things on top of it and it's not always easy to",
    "start": "1733360",
    "end": "1738610"
  },
  {
    "text": "fake although it's easy to use dependency injection so here I have a",
    "start": "1738610",
    "end": "1746260"
  },
  {
    "text": "this is the trip service kata which I converted to C++ the code is on github",
    "start": "1746260",
    "end": "1751870"
  },
  {
    "text": "I'll give you the link and here I have a single method get' rips by user get",
    "start": "1751870",
    "end": "1758260"
  },
  {
    "text": "trips by user will have a user path to it someone I want to see these trips and",
    "start": "1758260",
    "end": "1764280"
  },
  {
    "text": "then it will use the user session which is a single turn to get logged user",
    "start": "1764280",
    "end": "1770440"
  },
  {
    "text": "essentially me and if it doesn't get it which means you get null pointer back I",
    "start": "1770440",
    "end": "1777850"
  },
  {
    "text": "will get an exception now I can test for that actually behavior want to test for",
    "start": "1777850",
    "end": "1783340"
  },
  {
    "text": "but it's not that interesting so I wanted to return an actual user but I can't because there's no session there's",
    "start": "1783340",
    "end": "1790900"
  },
  {
    "text": "another problem in this test we'll get to that later this is a static method code which I also have a problem to fake",
    "start": "1790900",
    "end": "1797130"
  },
  {
    "text": "but let's start with the singleton here we have user session it does get user",
    "start": "1797130",
    "end": "1802510"
  },
  {
    "text": "instance it called the method that method in order to show you that I have nothing up my sleeve wolf or an",
    "start": "1802510",
    "end": "1809170"
  },
  {
    "text": "exception to signify the fact that there's no session actually I hope the code doesn't look like that but for our",
    "start": "1809170",
    "end": "1816430"
  },
  {
    "text": "purposes that's good enough and the single turn probably implemented single turn because you can publish think of at",
    "start": "1816430",
    "end": "1824110"
  },
  {
    "text": "least two problems here if you think about it will check whether or not the instance is null and if it's null it",
    "start": "1824110",
    "end": "1829420"
  },
  {
    "text": "will instantiate in your instance now I want to get to that instance here and I",
    "start": "1829420",
    "end": "1834820"
  },
  {
    "text": "can't because it's a single term that's all purpose of writing a singleton when to the place it would my own fake object",
    "start": "1834820",
    "end": "1840940"
  },
  {
    "text": "which I can't again because it probably has a private constructor as well and",
    "start": "1840940",
    "end": "1846760"
  },
  {
    "text": "that's a problem so what I'll do is use the friend keyword ever he'll heard",
    "start": "1846760",
    "end": "1853360"
  },
  {
    "text": "about the friend keyboard enable me to touch this class private parts form outside",
    "start": "1853360",
    "end": "1859630"
  },
  {
    "text": "from specified class and I use it in order to enable two classes to change",
    "start": "1859630",
    "end": "1865930"
  },
  {
    "text": "things inside this class fix user session that I will use in order to mimic this is a session behavior and",
    "start": "1865930",
    "end": "1873010"
  },
  {
    "text": "something I called user session accessor because I'm bad with naming stuff and",
    "start": "1873010",
    "end": "1878980"
  },
  {
    "text": "those two do not belong in my production code but I do need this code to compile",
    "start": "1878980",
    "end": "1885070"
  },
  {
    "text": "so I'll use for declaration Jes in order for the code to compile but they don't",
    "start": "1885070",
    "end": "1890350"
  },
  {
    "text": "exist in my production code because if I'll write them in my production code someone accidentally use them in my",
    "start": "1890350",
    "end": "1896050"
  },
  {
    "text": "production code I have very funny bugs to handle so I'll create those two and",
    "start": "1896050",
    "end": "1902050"
  },
  {
    "text": "those two implement a deal it is a fake user session it has to matter this is a",
    "start": "1902050",
    "end": "1907180"
  },
  {
    "text": "logged in and get the logged user this method will get to user back and return",
    "start": "1907180",
    "end": "1913090"
  },
  {
    "text": "a boolean value and this one will return a pointer to my user and all that better",
    "start": "1913090",
    "end": "1918190"
  },
  {
    "text": "ways to do that and I have they use accessor and the use excess of only does",
    "start": "1918190",
    "end": "1923460"
  },
  {
    "text": "it has a set method that will receive a user session which hopefully will be",
    "start": "1923460",
    "end": "1928690"
  },
  {
    "text": "effect one I did those two line just to make sure I'm deleting the int the instance I didn't want to check whether",
    "start": "1928690",
    "end": "1936040"
  },
  {
    "text": "or not there's the instance and then deleted so I'll cause it to create an instance then immediately delete it and",
    "start": "1936040",
    "end": "1941860"
  },
  {
    "text": "setter and said that in science with my own instance which means I can write",
    "start": "1941860",
    "end": "1947920"
  },
  {
    "text": "this code see I have a fake user session and expected when someone called get",
    "start": "1947920",
    "end": "1955570"
  },
  {
    "text": "logged Israel to it on a user done care which and then I'll use the accessor to",
    "start": "1955570",
    "end": "1964090"
  },
  {
    "text": "change the singleton now the good thing about singleton is that inherently I can",
    "start": "1964090",
    "end": "1970510"
  },
  {
    "text": "touch it wherever I want in my production code in from on in my tests as well so I don't need the Pens",
    "start": "1970510",
    "end": "1976150"
  },
  {
    "text": "injection it is the dependency injection and I'll create a real trip service add",
    "start": "1976150",
    "end": "1983260"
  },
  {
    "text": "a new friend call it with two trips get the trees back and check them this test and for cheaters in pass yet because I",
    "start": "1983260",
    "end": "1989380"
  },
  {
    "text": "have the static method but this test here that just want to check whether or not a user will return",
    "start": "1989380",
    "end": "1996750"
  },
  {
    "text": "no trips at all because I don't have any friends which is a shame but this is how",
    "start": "1996750",
    "end": "2002040"
  },
  {
    "text": "it goes will pass because of what I did okay if you have any question at this",
    "start": "2002040",
    "end": "2008760"
  },
  {
    "text": "point feel free to raise your hand I'll answer them if not I'll continue so we can easily change Singleton's by hacking",
    "start": "2008760",
    "end": "2019830"
  },
  {
    "text": "them using friend but not all methods are fake able right not all methods are",
    "start": "2019830",
    "end": "2025470"
  },
  {
    "start": "2021000",
    "end": "2355000"
  },
  {
    "text": "virtual there are static methods out there and final classes which I can",
    "start": "2025470",
    "end": "2031530"
  },
  {
    "text": "inherit and so on and so on and now I have a problem if I can't inherit the class it means I can't fake it right",
    "start": "2031530",
    "end": "2039140"
  },
  {
    "text": "right well you know it's a trick question because the answer is no I can",
    "start": "2039140",
    "end": "2044340"
  },
  {
    "text": "actually fake it and the reason I can fake it is because I can use something",
    "start": "2044340",
    "end": "2049800"
  },
  {
    "text": "another trick from C++ using template templated methods essentially templates",
    "start": "2049800",
    "end": "2057540"
  },
  {
    "text": "are immensely powerful construct which you can you should use with care and",
    "start": "2057540",
    "end": "2063389"
  },
  {
    "text": "using templates I can create a form of compile time dynamic sort of thing that",
    "start": "2063390",
    "end": "2071190"
  },
  {
    "text": "known as duck typing and we place one class with another class myclass that",
    "start": "2071190",
    "end": "2077159"
  },
  {
    "text": "look exactly the same doesn't need to inherit from that class which means I can create any class it will work for",
    "start": "2077160",
    "end": "2083070"
  },
  {
    "text": "static methods as well which is a nice nice trick I wish I had it in c-sharp and I can fake unfavorable classes as",
    "start": "2083070",
    "end": "2090510"
  },
  {
    "text": "well and I can also fake classes that are created inside my method as well but",
    "start": "2090510",
    "end": "2096570"
  },
  {
    "text": "I need to change my method in my class not always for the better but it depends",
    "start": "2096570",
    "end": "2104040"
  },
  {
    "text": "on what I'm trying to achieve and here I told you that I have a problem in my",
    "start": "2104040",
    "end": "2109950"
  },
  {
    "text": "trip service I have a static method called Hill that supposedly calls the database but you might know by now that",
    "start": "2109950",
    "end": "2116100"
  },
  {
    "text": "it falls an exception in this specific piece of code and I need to replace that",
    "start": "2116100",
    "end": "2122100"
  },
  {
    "text": "and I can easily place that by changing my old service a",
    "start": "2122100",
    "end": "2128230"
  },
  {
    "text": "bit I can change it to this you see what I did there",
    "start": "2128230",
    "end": "2133619"
  },
  {
    "text": "I've added a small character here at E",
    "start": "2133619",
    "end": "2139510"
  },
  {
    "text": "and that's it well it's not that's it anyone who ever worked with templates in C and C++ know that it's not as simple",
    "start": "2139510",
    "end": "2146619"
  },
  {
    "text": "as that I also needed to change my class to be a templated class as well and this",
    "start": "2146619",
    "end": "2153369"
  },
  {
    "text": "T is being used here instead of my actual data access layer I'll go back",
    "start": "2153369",
    "end": "2161980"
  },
  {
    "text": "one step you see how this became something a bit different now I can",
    "start": "2161980",
    "end": "2172300"
  },
  {
    "text": "replace this call with any class that has a static method that look the same way I have one user in return a list",
    "start": "2172300",
    "end": "2180640"
  },
  {
    "text": "back a vector and that's it and going back to my test it has changed a bit as",
    "start": "2180640",
    "end": "2188560"
  },
  {
    "text": "well the old test still used that access because they don't kill and usually what I would have done in this point is not",
    "start": "2188560",
    "end": "2195220"
  },
  {
    "text": "changed my original class I will create a base class with the T because I don't",
    "start": "2195220",
    "end": "2200680"
  },
  {
    "text": "want anyone using production code to bother himself would pass in this argument along all the way buttons licit",
    "start": "2200680",
    "end": "2208570"
  },
  {
    "text": "my tests I can use a fake trip service now and that factory service doesn't use",
    "start": "2208570",
    "end": "2214420"
  },
  {
    "text": "any mocking thermic it's a static method but it will always return user dot trips",
    "start": "2214420",
    "end": "2219490"
  },
  {
    "text": "or whatever I turned to this is this code essentially resided in my tests and does whatever I need in order for my",
    "start": "2219490",
    "end": "2227470"
  },
  {
    "text": "tests to pass because all I care about is if the database returns this specific",
    "start": "2227470",
    "end": "2232900"
  },
  {
    "text": "list then everything else walk according to what I expected it to do so going",
    "start": "2232900",
    "end": "2239500"
  },
  {
    "text": "back to my tests I didn't pass before I can add two trips to my friend I have",
    "start": "2239500",
    "end": "2248950"
  },
  {
    "text": "already created a fake user session and set it up so that he'll return my user",
    "start": "2248950",
    "end": "2255220"
  },
  {
    "text": "have created also as a friend I see is my friend now and when I call",
    "start": "2255220",
    "end": "2262240"
  },
  {
    "text": "gets rips by user let's see that in debugging then everything should work",
    "start": "2262240",
    "end": "2269190"
  },
  {
    "text": "this been a session demo over say should because you can't know what a missed but",
    "start": "2269190",
    "end": "2278110"
  },
  {
    "text": "here we go going inside here I'll get a",
    "start": "2278110",
    "end": "2283360"
  },
  {
    "text": "user session and magically got a logged user by using the powers of mock object",
    "start": "2283360",
    "end": "2291010"
  },
  {
    "text": "because looking at this method it should have one an exception but I've faked it out and if we go in a bit",
    "start": "2291010",
    "end": "2298600"
  },
  {
    "text": "it's a logged user and I'll get my friend and it is in fact my friend so I",
    "start": "2298600",
    "end": "2305290"
  },
  {
    "text": "want his trip list and going inside here you see how jumped into the fake object",
    "start": "2305290",
    "end": "2313270"
  },
  {
    "text": "or hand mocked object I've just created it and returned exactly what I told him",
    "start": "2313270",
    "end": "2319510"
  },
  {
    "text": "to return for the purpose of my tests and that's it and now the test return",
    "start": "2319510",
    "end": "2328780"
  },
  {
    "text": "exactly what I expected to do and having done those two things written two more tests I can now really change this code I can",
    "start": "2328780",
    "end": "2336250"
  },
  {
    "text": "go because this code should be split into different different classes and now",
    "start": "2336250",
    "end": "2341470"
  },
  {
    "text": "I can do whatever I want because I know I have foe tests that protect me and usually it's not it doesn't become 100",
    "start": "2341470",
    "end": "2349030"
  },
  {
    "text": "tests for every piece of code you probably have a few tests that will protect whatever you are trying to do right now there's another thing I want",
    "start": "2349030",
    "end": "2357910"
  },
  {
    "start": "2355000",
    "end": "2441000"
  },
  {
    "text": "to fake from time to time or at least test depending on the purpose and that's a private method now I get this question",
    "start": "2357910",
    "end": "2365230"
  },
  {
    "text": "quite a lot the Casa some developer will come to me and ask how do I test by the",
    "start": "2365230",
    "end": "2370900"
  },
  {
    "text": "method or how do i mock private methods and usually my answer is another question why because when you think",
    "start": "2370900",
    "end": "2378250"
  },
  {
    "text": "about it you shouldn't do that you shouldn't test private method you should test your API your contract which is",
    "start": "2378250",
    "end": "2386080"
  },
  {
    "text": "which is usually a public method but unfortunately with big legacy",
    "start": "2386080",
    "end": "2391119"
  },
  {
    "text": "classes you have a lot of dependency a lot of things happen inside and you might need to fake the private method or",
    "start": "2391119",
    "end": "2399009"
  },
  {
    "text": "the protected method which you can do or need to do because you can fake the",
    "start": "2399009",
    "end": "2404740"
  },
  {
    "text": "public method for some reason or other another cool feature in C++ is that when",
    "start": "2404740",
    "end": "2410140"
  },
  {
    "text": "using inheritance I can change the accessibility as well I can make a private method a public method did you",
    "start": "2410140",
    "end": "2418599"
  },
  {
    "text": "know about this feature this is a very cool feature can be caused a lot of",
    "start": "2418599",
    "end": "2424150"
  },
  {
    "text": "grief and harm but in our case it means we can fake all call any method we want to just inherit your class and there we",
    "start": "2424150",
    "end": "2432130"
  },
  {
    "text": "go if it's virtual you can fake it as well if not you can call the method and",
    "start": "2432130",
    "end": "2442140"
  },
  {
    "start": "2441000",
    "end": "2705000"
  },
  {
    "text": "that's about all the time I have because there are many other tricks to help to",
    "start": "2442289",
    "end": "2448359"
  },
  {
    "text": "end the legacy code most of them written in the book getting a handle in legacy code honestly by",
    "start": "2448359",
    "end": "2457150"
  },
  {
    "text": "macrophages which you might want to read and most of them you already know it's",
    "start": "2457150",
    "end": "2464079"
  },
  {
    "text": "you can for example one client came up with the idea that didn't compile time",
    "start": "2464079",
    "end": "2469119"
  },
  {
    "text": "the other this usually when you need at least in know C++ to walk in a",
    "start": "2469119",
    "end": "2475200"
  },
  {
    "text": "multi-platform environment you have a problem when you need to read the file or create a new thread this is plus",
    "start": "2475200",
    "end": "2482140"
  },
  {
    "text": "verse 11 at least so everybody has their own implementation for Linux and Mac and",
    "start": "2482140",
    "end": "2487630"
  },
  {
    "text": "Windows or whatever if you've been in that project you know what I mean right anyone here ever written a specific",
    "start": "2487630",
    "end": "2494410"
  },
  {
    "text": "platform code if they use if deaths or use compilation or whatever so that",
    "start": "2494410",
    "end": "2499930"
  },
  {
    "text": "client thought of the bright idea and it is a bright idea I'm not cynical here of using the same the same device the same",
    "start": "2499930",
    "end": "2507009"
  },
  {
    "text": "method they had to replace those implementation would fake objects instead of creating file just right",
    "start": "2507009",
    "end": "2513249"
  },
  {
    "text": "outside someplace I can read later I've just created a new file there is a flag",
    "start": "2513249",
    "end": "2518710"
  },
  {
    "text": "or something and during compilation for those tests replaced all the all they",
    "start": "2518710",
    "end": "2524230"
  },
  {
    "text": "implement to effect implementation for those specific methods this is another thing",
    "start": "2524230",
    "end": "2529989"
  },
  {
    "text": "you can do and there are many other tricks you can do usually I can get away with create another constructor and",
    "start": "2529989",
    "end": "2536859"
  },
  {
    "text": "replace the functionality because in C++ when I create a new constructor I don't need to call the base class constructor",
    "start": "2536859",
    "end": "2544019"
  },
  {
    "text": "like any other like and languages such as Java or C shop so I can fake away bad",
    "start": "2544019",
    "end": "2552549"
  },
  {
    "text": "things that happen the constructor that I don't want inside my tests and I can push dependencies in instead of the",
    "start": "2552549",
    "end": "2557890"
  },
  {
    "text": "dependencies that while initialized in the constructor this is actually a good design decision to do and some of you",
    "start": "2557890",
    "end": "2565900"
  },
  {
    "text": "might think and you rightly saw that I've just messed up the code in order to",
    "start": "2565900",
    "end": "2571509"
  },
  {
    "text": "test it right I've just took readable code and open up a bunch of holes inside",
    "start": "2571509",
    "end": "2579009"
  },
  {
    "text": "of it replace it would fake object created templates right and it's not always that clean but you have to",
    "start": "2579009",
    "end": "2586959"
  },
  {
    "text": "remember something this is a process it's like renovating your house or last",
    "start": "2586959",
    "end": "2594609"
  },
  {
    "text": "year when city all decided to replace a Rando bottle I had in front of in the end of my street with a big bin junction",
    "start": "2594609",
    "end": "2603579"
  },
  {
    "text": "with three lanes in each direction in the beginning it's very painful I had a problem to get to walk but once they've",
    "start": "2603579",
    "end": "2609969"
  },
  {
    "text": "done everything is beautiful and walking because legacy code forgetting handle on",
    "start": "2609969",
    "end": "2617079"
  },
  {
    "text": "legacy code fixing legacy code is a process and after a few days weeks maybe",
    "start": "2617079",
    "end": "2622150"
  },
  {
    "text": "months you'll end up with a better design probably flexible design easily",
    "start": "2622150",
    "end": "2627609"
  },
  {
    "text": "maintained not on your first test and you have to remember that so how do you",
    "start": "2627609",
    "end": "2634029"
  },
  {
    "text": "have take control of existing legacy code I'll start with the legacy code usually you need something before that",
    "start": "2634029",
    "end": "2641009"
  },
  {
    "text": "something to calm it down a cup of coffee and then I'll understand what the code does and start writing tests once I",
    "start": "2641009",
    "end": "2648819"
  },
  {
    "text": "write tests I and use fake objects to break away the dependencies I'll end up",
    "start": "2648819",
    "end": "2654489"
  },
  {
    "text": "with a loosely coupled code which I can test improve and I can swap the dependencies",
    "start": "2654489",
    "end": "2660820"
  },
  {
    "text": "out bringing new stuff usually my feature will get sorted on the way as well then you feature the bug fix and I",
    "start": "2660820",
    "end": "2668380"
  },
  {
    "text": "can refactor and clean up and after a few iteration of this specific flow I'll",
    "start": "2668380",
    "end": "2674350"
  },
  {
    "text": "end up with more maintainable code and you know what the next person in line will appreciate it it might be you so",
    "start": "2674350",
    "end": "2680920"
  },
  {
    "text": "you want to do that it looks like a lot of work in the beginning but it's usually less work then fixing something",
    "start": "2680920",
    "end": "2687550"
  },
  {
    "text": "then fixing the mess you made then fixing the first thing again and so on",
    "start": "2687550",
    "end": "2692590"
  },
  {
    "text": "and so on this is essentially what I do when I come to organization usually the",
    "start": "2692590",
    "end": "2699400"
  },
  {
    "text": "only call me when things really messed up you start by breaking things up thank",
    "start": "2699400",
    "end": "2706690"
  },
  {
    "start": "2705000",
    "end": "2725000"
  },
  {
    "text": "you very much that's all the time I have unfortunately if you have any question please come to me afterwards I'll be",
    "start": "2706690",
    "end": "2712090"
  },
  {
    "text": "happy to answer them and have another session tomorrow and mocking fire marks and unit tests in C++ thank you",
    "start": "2712090",
    "end": "2718570"
  },
  {
    "text": "[Applause]",
    "start": "2718570",
    "end": "2727020"
  }
]