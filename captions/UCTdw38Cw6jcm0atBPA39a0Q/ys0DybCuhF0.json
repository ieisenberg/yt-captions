[
  {
    "text": "all right I think it's ready to get started welcome to this talk we're going to be",
    "start": "480",
    "end": "7440"
  },
  {
    "text": "discovering some really exciting features that have been added to c-sharp over the past few years",
    "start": "7440",
    "end": "13799"
  },
  {
    "text": "c-sharp is one of those programming languages that keeps evolving and it's taking inspiration from other",
    "start": "13799",
    "end": "20100"
  },
  {
    "text": "languages such as if sharp kotlin Swift Java CC plus plus and a lot of other",
    "start": "20100",
    "end": "25439"
  },
  {
    "text": "good programming languages as well so it's exciting to look at what's been added to the language because quite",
    "start": "25439",
    "end": "32340"
  },
  {
    "text": "frankly the past 20 years has been quite some ride for a c sharpen.net developer",
    "start": "32340",
    "end": "38940"
  },
  {
    "text": "so we're going to be talking about everything from C sharp 8 to 10. there's a talk on Friday that goes into details",
    "start": "38940",
    "end": "44879"
  },
  {
    "text": "on all the c-sharp 11 features that were just released but if you haven't been",
    "start": "44879",
    "end": "49920"
  },
  {
    "text": "working in c-sharp for these past few versions there's quite a lot that we need to discuss first",
    "start": "49920",
    "end": "56579"
  },
  {
    "text": "my name is Philip Ekberg I'm happy to take questions afterwards if you don't agree with any of the language features",
    "start": "56579",
    "end": "62820"
  },
  {
    "text": "it's not my fault so don't throw anything in my face but I'm happily here to discuss all language features.net",
    "start": "62820",
    "end": "69659"
  },
  {
    "text": "c-sharp and whatnot and you can always pay me on Twitter or send me an email as well",
    "start": "69659",
    "end": "75180"
  },
  {
    "text": "so this here is a tag Cloud that I usually show around what's been added in c-sharp these are a lot of the important",
    "start": "75180",
    "end": "82500"
  },
  {
    "text": "language features some of them change how we architecturally have to think",
    "start": "82500",
    "end": "87600"
  },
  {
    "text": "different when building our applications when using async in a weight for example",
    "start": "87600",
    "end": "92880"
  },
  {
    "text": "doing that prior to adding the task parallel library or even adding these",
    "start": "92880",
    "end": "98460"
  },
  {
    "text": "keywords in the language was not a trivial task most of these things added to c-sharp",
    "start": "98460",
    "end": "104280"
  },
  {
    "text": "except some things like generics have always been able to you've always been able to do that with c-sharp but with a",
    "start": "104280",
    "end": "111840"
  },
  {
    "text": "little bit more code so the idea with adding new language features is to avoid more keystrokes make it easier for us to",
    "start": "111840",
    "end": "118979"
  },
  {
    "text": "express ourselves in ways that were previously a little bit more difficult",
    "start": "118979",
    "end": "124020"
  },
  {
    "text": "so a lot of what we're going to discover here today is just compiler magic the compiler is going to do a lot of heavy",
    "start": "124020",
    "end": "129599"
  },
  {
    "text": "work for us some of the features we're going to discuss are as important as generics and",
    "start": "129599",
    "end": "135239"
  },
  {
    "text": "async and the weight and I have quite a few examples of how we can use this and how they will change the way that we",
    "start": "135239",
    "end": "142260"
  },
  {
    "text": "look at our applications now if you're like me and you love programming languages there's a GitHub page they",
    "start": "142260",
    "end": "148200"
  },
  {
    "text": "open source the compilers some years ago and you can participate in discussions",
    "start": "148200",
    "end": "153840"
  },
  {
    "text": "around what's going to come in c-sharp some features that have been withdrawn from the language and what's interesting",
    "start": "153840",
    "end": "160560"
  },
  {
    "text": "in that is that Microsoft has recently invested a lot of time in some language features that got a lot of backlash from",
    "start": "160560",
    "end": "167819"
  },
  {
    "text": "the community so they listened and they removed that and the rest of the community didn't like that so no matter",
    "start": "167819",
    "end": "174180"
  },
  {
    "text": "what they do people are going to get upset but GitHub is here so we can discuss around these language features",
    "start": "174180",
    "end": "181560"
  },
  {
    "text": "so you can always go in here if there's something that you want to learn about because the comments here contain a lot",
    "start": "181560",
    "end": "187860"
  },
  {
    "text": "of details on how you can incorporate this a lot of the documentations for Microsoft usually have the normal this",
    "start": "187860",
    "end": "194340"
  },
  {
    "text": "is a dog and this is a cat but I have no idea to use how to use this in my Enterprise application but the comments",
    "start": "194340",
    "end": "200220"
  },
  {
    "text": "are filled with great additions to that so with that out of the way",
    "start": "200220",
    "end": "205680"
  },
  {
    "text": "I just want to start off with some highlights from c-sharp 7. now C sharp 7",
    "start": "205680",
    "end": "210780"
  },
  {
    "text": "was one of the first versions of c-sharp where they did a point release so they released c-sharp 7.1 7.2 7.3 and",
    "start": "210780",
    "end": "220560"
  },
  {
    "text": "that's the only time they've done that so far I believe this was a proof of concept that they could release the",
    "start": "220560",
    "end": "226560"
  },
  {
    "text": "compiler separately from the whole.net ecosystem and from Visual Studio",
    "start": "226560",
    "end": "231680"
  },
  {
    "text": "effectively it's just a nuget package you could update that and get the latest compiler and you get access to the",
    "start": "231680",
    "end": "237720"
  },
  {
    "text": "latest features of c-sharp one of those features or quite a lot of the features added to c-sharp 7 set the",
    "start": "237720",
    "end": "245400"
  },
  {
    "text": "base for what's going to come in C sharp 8 9 and 10. but it's a long Horizon so",
    "start": "245400",
    "end": "251280"
  },
  {
    "text": "they add a little bit of a language feature a small portion that will eventually end up being something quite",
    "start": "251280",
    "end": "256680"
  },
  {
    "text": "big and pattern matching is one of those things they first introduced in C sharp seven",
    "start": "256680",
    "end": "261900"
  },
  {
    "text": "but as you'll notice later pattern matching in c-sharp 7 wasn't really ready for anyone to use because it",
    "start": "261900",
    "end": "268620"
  },
  {
    "text": "required a lot more keystrokes than what the equivalent would have been in the past but it still set the base for what's",
    "start": "268620",
    "end": "275340"
  },
  {
    "text": "going to come next before we get to that let's just talk about one feature that changed c-sharp",
    "start": "275340",
    "end": "282120"
  },
  {
    "text": "now other programming languages have had tuples forever but c-sharp did not until c-sharp 7. this here is how you'd use",
    "start": "282120",
    "end": "289560"
  },
  {
    "text": "topples in.net and c-sharp prior to c-sharp 7. there's a type called Tuple",
    "start": "289560",
    "end": "295320"
  },
  {
    "text": "and you that's a generic type and you use it like any other generic type but then it's really difficult when you want",
    "start": "295320",
    "end": "300360"
  },
  {
    "text": "to access the items on this thing you have no idea what they are so with some compiler magic and some",
    "start": "300360",
    "end": "306300"
  },
  {
    "text": "really smart people at Microsoft they added this as a first class citizen in the language it's a little bit different",
    "start": "306300",
    "end": "312060"
  },
  {
    "text": "syntax but this here creates the same thing behind the scenes this uses that",
    "start": "312060",
    "end": "317759"
  },
  {
    "text": "same generic type and with some magic compiler annotations we can get some",
    "start": "317759",
    "end": "323280"
  },
  {
    "text": "information about the variable names and the field names here using this on its own allows you to",
    "start": "323280",
    "end": "329699"
  },
  {
    "text": "return multiple return types from a method or accept types that has multiple fields on them if you don't want to",
    "start": "329699",
    "end": "336419"
  },
  {
    "text": "create a class for Library struct which is quite handy but where it becomes even more powerful again is with pattern",
    "start": "336419",
    "end": "342780"
  },
  {
    "text": "matching you'll hear me say that quite a lot at a lot of these features set the base for pattern matching",
    "start": "342780",
    "end": "349380"
  },
  {
    "text": "something that came along with this which is quite confusing is this magic method if you add this to a class it",
    "start": "349380",
    "end": "356940"
  },
  {
    "text": "will allow you to do certain things with that class or an instance of that class the method is called deconstruct it's",
    "start": "356940",
    "end": "364440"
  },
  {
    "text": "not to be confused with a finalizer or a deconstructor but it is a way for you to",
    "start": "364440",
    "end": "369660"
  },
  {
    "text": "take an instance and pull different parts out of that instance for example in this case here",
    "start": "369660",
    "end": "375539"
  },
  {
    "text": "I did say that using persons and cats and dogs is a really great example I should really follow my own advice but",
    "start": "375539",
    "end": "381539"
  },
  {
    "text": "then again this here allows me to grab the first name and the age out of this person it's a normal out",
    "start": "381539",
    "end": "387780"
  },
  {
    "text": "parameter which you might have used in very early versions of c-sharp but where",
    "start": "387780",
    "end": "392819"
  },
  {
    "text": "this is different from what you've done in the past is that I can now take an instance and I can do I can I can assign",
    "start": "392819",
    "end": "399479"
  },
  {
    "text": "this thing here this instance to um to what what looks like a tuple here on",
    "start": "399479",
    "end": "405180"
  },
  {
    "text": "the left hand side this is also just compiler magic it insta it creates two",
    "start": "405180",
    "end": "410759"
  },
  {
    "text": "local variables it sets that into the out parameter allows you to set the values into those fields",
    "start": "410759",
    "end": "416520"
  },
  {
    "text": "so while it looks like a tuple it's not really the same thing but they're very often confused together or used",
    "start": "416520",
    "end": "422940"
  },
  {
    "text": "interchangeably but this is nice we can use this again with pattern matching and I'll have a",
    "start": "422940",
    "end": "428039"
  },
  {
    "text": "good example of that as well later on but first we need to understand everything else so tuples or tuples depending on where",
    "start": "428039",
    "end": "435360"
  },
  {
    "text": "you're from or how you'd like to pronounce that you say other tuples or tuples but we really talk about the same thing",
    "start": "435360",
    "end": "441720"
  },
  {
    "text": "a tuple can be a sign like this here this is a tuple assignment assigned to a local variable called coordinates I can",
    "start": "441720",
    "end": "447240"
  },
  {
    "text": "access those fields very nicely very convenient I could even return that as a named Tuple from a method which is also",
    "start": "447240",
    "end": "454319"
  },
  {
    "text": "very convenient again multiple return types is sometimes a good idea but when",
    "start": "454319",
    "end": "459419"
  },
  {
    "text": "you end up having 20 multiple return types it's not it's it should use a class",
    "start": "459419",
    "end": "465539"
  },
  {
    "text": "that's where we can use that class right so I can take this instance and I can assign that into two local variables",
    "start": "465539",
    "end": "470580"
  },
  {
    "text": "which looks like what we have on the top here but the bottom one creates two local variables the top one is a tuple",
    "start": "470580",
    "end": "477539"
  },
  {
    "text": "and this here is all done or the last portion is done by introducing this magic method",
    "start": "477539",
    "end": "483060"
  },
  {
    "text": "so the compiler will know that you have this available and therefore the syntax also works",
    "start": "483060",
    "end": "489479"
  },
  {
    "text": "so far we haven't really looked at anything that requires a change to the runtime right this here would be easily",
    "start": "489479",
    "end": "496800"
  },
  {
    "text": "translated into C sharp one two three four or five right that's the fact with most of the",
    "start": "496800",
    "end": "503400"
  },
  {
    "text": "language features that you can use in c-sharp it's not supported but you can use newer",
    "start": "503400",
    "end": "509759"
  },
  {
    "text": "language features no matter which.net version you're using or dotnet framework version you're using",
    "start": "509759",
    "end": "515820"
  },
  {
    "text": "some features as you'll notice require runtime changes as well and visual",
    "start": "515820",
    "end": "521640"
  },
  {
    "text": "studio or whatever compiler or environment you use will tell you that you need that in case you hit a wall",
    "start": "521640",
    "end": "528660"
  },
  {
    "text": "but since most of this is compiler magic and compiles down to the same IL that we've had in the past many features work",
    "start": "528660",
    "end": "534959"
  },
  {
    "text": "with older versionsoft.net as well with that being said we've just covered some of the basic",
    "start": "534959",
    "end": "541380"
  },
  {
    "text": "features in C sharp seven that we need to understand to go forward now C sharp",
    "start": "541380",
    "end": "546779"
  },
  {
    "text": "eight I just showed two features of C sharp seven so at this point does it feel like",
    "start": "546779",
    "end": "552000"
  },
  {
    "text": "C sharp eight and Beyond can add much more to the language obviously if if it wasn't much more to",
    "start": "552000",
    "end": "558600"
  },
  {
    "text": "add to the language I wouldn't be here so of course there's quite a lot to add to the language",
    "start": "558600",
    "end": "563940"
  },
  {
    "text": "but you'd imagine that the eighth iteration of the language couldn't add a lot of features but take a look at this",
    "start": "563940",
    "end": "570300"
  },
  {
    "text": "feature set here we got something called read-only members default interface methods or default interface",
    "start": "570300",
    "end": "576360"
  },
  {
    "text": "implementations depending on when you're reading their documentation pattern matching enhancements really",
    "start": "576360",
    "end": "583140"
  },
  {
    "text": "pattern matching enhancements is not really appropriate to call this because it's totally revamping how we use",
    "start": "583140",
    "end": "589500"
  },
  {
    "text": "pattern matching we're getting using declarations static local functions nullabable reference types asynchronous streams a synchronous",
    "start": "589500",
    "end": "596399"
  },
  {
    "text": "disposables ranges and indices null equalizing assignment and there's a few more features as well",
    "start": "596399",
    "end": "603660"
  },
  {
    "text": "now if you look at other programming languages I don't think I've seen many that introduce groundbreaking features so",
    "start": "603660",
    "end": "611339"
  },
  {
    "text": "often as c-sharp do but c-sharp do it because they look at other new programming languages that have these",
    "start": "611339",
    "end": "617760"
  },
  {
    "text": "very important and smart features they take inspiration from kotlin Swift",
    "start": "617760",
    "end": "622920"
  },
  {
    "text": "and Java and other programming languages as well the same thing here so C sharp can still be improved and a few of these I've",
    "start": "622920",
    "end": "629279"
  },
  {
    "text": "highlighted or bolded the pattern matching enhancements and all the reference types and asynchronous streams",
    "start": "629279",
    "end": "634320"
  },
  {
    "text": "we're going to be taking a deeper look at that and understand this but again at the eighth iteration of C",
    "start": "634320",
    "end": "640500"
  },
  {
    "text": "sharp they still quite a lot to learn if we want to use this now it I said earlier that you can use",
    "start": "640500",
    "end": "647820"
  },
  {
    "text": "the new language versions with with whichever framework or net version that",
    "start": "647820",
    "end": "653160"
  },
  {
    "text": "you want that's partially true some of them do depend on runtime changes",
    "start": "653160",
    "end": "659100"
  },
  {
    "text": "so you have to be on vs 2019 or later to use C sharp eight and Doctrine core 3.0 or later you",
    "start": "659100",
    "end": "666360"
  },
  {
    "text": "should really be on.net6 if you're doing any new applications today or if you're looking at upgrading it's easy for me to",
    "start": "666360",
    "end": "673140"
  },
  {
    "text": "say that you should go with.net6 but upgrading to that might take a little bit of time",
    "start": "673140",
    "end": "678660"
  },
  {
    "text": "and especially some of you use anyone here doing WPF or win forms on.net framework",
    "start": "678660",
    "end": "684600"
  },
  {
    "text": "there's quite a few so you're probably wondering or thinking like well hey all of this is useless",
    "start": "684600",
    "end": "690540"
  },
  {
    "text": "because I can't do.net core well you can actually do that now you can",
    "start": "690540",
    "end": "695579"
  },
  {
    "text": "use.net or the new.net thing it's really confusing what you should call this new thing because it's a framework but it's",
    "start": "695579",
    "end": "701519"
  },
  {
    "text": "not.net framework it's an incorporation of.netstandard.net core and Dot and frameworking one thing",
    "start": "701519",
    "end": "707820"
  },
  {
    "text": "and it's just called.net but we can use this to create WPF winforms and uh and other types of",
    "start": "707820",
    "end": "715980"
  },
  {
    "text": "applications as well now you'd probably imagine that it's just as a little flag that you change it",
    "start": "715980",
    "end": "721740"
  },
  {
    "text": "it's not that would have been too easy so you have to actually create a new",
    "start": "721740",
    "end": "726899"
  },
  {
    "text": "project that's targeting the new.net version move all your winforms or WPF",
    "start": "726899",
    "end": "732060"
  },
  {
    "text": "stuff over but that will then give you all the performance improvements made in.net it will give you access to all",
    "start": "732060",
    "end": "738660"
  },
  {
    "text": "the language features that do require runtime changes but if you don't want to do that you can",
    "start": "738660",
    "end": "743700"
  },
  {
    "text": "always try and toggle a new language version as well you can override the version of the",
    "start": "743700",
    "end": "749220"
  },
  {
    "text": "language in the Cs prod file to tell it to you c-sharp 10 or 11 even if you're running on.net framework 2. you can try",
    "start": "749220",
    "end": "757380"
  },
  {
    "text": "that and see what happens what happens is that Visual Studio will tell you that hey you should probably not do this",
    "start": "757380",
    "end": "763740"
  },
  {
    "text": "this is a shared Library that's shared between two different types of projects I compiled this for an older version and",
    "start": "763740",
    "end": "770820"
  },
  {
    "text": "it's now telling me that the Target that you're trying to build this for doesn't support this language feature",
    "start": "770820",
    "end": "777779"
  },
  {
    "text": "if I simply remove the usage of the language feature in this file the error",
    "start": "777779",
    "end": "783300"
  },
  {
    "text": "goes away so the compiler is smart enough to be able to compile that using the latest compiler as well",
    "start": "783300",
    "end": "790279"
  },
  {
    "text": "this error here brings us into an interesting language feature called the default interface methods or default",
    "start": "790279",
    "end": "796560"
  },
  {
    "text": "interface implementations this is one of those features",
    "start": "796560",
    "end": "801720"
  },
  {
    "text": "that really divide people into two different groups",
    "start": "801720",
    "end": "806880"
  },
  {
    "text": "either you really hate it or you just don't like it that very much",
    "start": "806880",
    "end": "813260"
  },
  {
    "text": "I'm kidding there's probably a use case for this I shouldn't be too hard on them so this here is an interface now we've",
    "start": "814680",
    "end": "819959"
  },
  {
    "text": "all used interfaces probably and now this is an old one that doesn't have",
    "start": "819959",
    "end": "825600"
  },
  {
    "text": "it returns an object and I'd really like to improve this to return a generic type instead",
    "start": "825600",
    "end": "831540"
  },
  {
    "text": "but if I do that and let's say that this is a shared package or a shared interface in my entire company if I",
    "start": "831540",
    "end": "838200"
  },
  {
    "text": "deploy that to nuget people are going to get really upset if they have to you know upgrade their applications to",
    "start": "838200",
    "end": "844860"
  },
  {
    "text": "implement my new method there's ways around this people have subclass people have introduced abstract",
    "start": "844860",
    "end": "851579"
  },
  {
    "text": "classes instead to try to work around this problem but what Microsoft decided was a great idea is that why not allow",
    "start": "851579",
    "end": "859440"
  },
  {
    "text": "method implementations in interfaces that provides a default way of how this",
    "start": "859440",
    "end": "865920"
  },
  {
    "text": "method is going to work so now I'm not going to break anyone what happens now is that no one has to implement this",
    "start": "865920",
    "end": "873300"
  },
  {
    "text": "method here at the bottom if I upgrade my nuget package or if I",
    "start": "873300",
    "end": "878399"
  },
  {
    "text": "add this to an interface in my application Visual Studio won't tell me that I have to implement this it won't",
    "start": "878399",
    "end": "884639"
  },
  {
    "text": "even tell me that I haven't implemented it and that it's available so I have to go into the actual",
    "start": "884639",
    "end": "891199"
  },
  {
    "text": "repository or have to know exactly what's in this interface to know that this needs to be implemented",
    "start": "891199",
    "end": "898800"
  },
  {
    "text": "which is a little bit annoying but it's great for Library developers and that's one of the use cases that I see this",
    "start": "898800",
    "end": "904260"
  },
  {
    "text": "being useful for if you have a library that's used by a lot of people and you want to break",
    "start": "904260",
    "end": "909779"
  },
  {
    "text": "changes but you don't want to upset people you could always say hey throw new exception or whatever and if they happen",
    "start": "909779",
    "end": "915779"
  },
  {
    "text": "to use this someone will find out eventually",
    "start": "915779",
    "end": "921240"
  },
  {
    "text": "all right so has anyone used this feature no one that's what I expected all right",
    "start": "921240",
    "end": "929100"
  },
  {
    "text": "and you probably won't but you will see that if someone else do this and you bring in a new good package or something",
    "start": "929100",
    "end": "934860"
  },
  {
    "text": "from GitHub don't get confused why Visual Studio isn't telling you that you're not",
    "start": "934860",
    "end": "940139"
  },
  {
    "text": "implementing one of the methods that are available because there might be a default implementation available",
    "start": "940139",
    "end": "946260"
  },
  {
    "text": "this is one of those features that require the runtime to understand the language change because previously the",
    "start": "946260",
    "end": "953459"
  },
  {
    "text": "interface was a contract between the consumer and the class right so how would you run a method on something",
    "start": "953459",
    "end": "960060"
  },
  {
    "text": "that's not available on what implemented the interface",
    "start": "960060",
    "end": "965519"
  },
  {
    "text": "all right so the actual useful feature of c-sharp 8 that I very much like",
    "start": "965519",
    "end": "971160"
  },
  {
    "text": "is something called nullable reference types which again is a confusing name but",
    "start": "971160",
    "end": "976620"
  },
  {
    "text": "naming things is really hard we've always had reference types that are nullable in C sharp",
    "start": "976620",
    "end": "983220"
  },
  {
    "text": "so why give it this particular name what this feature is doing is that it's",
    "start": "983220",
    "end": "989220"
  },
  {
    "text": "changing the way that reference types are looked at by the compiler the",
    "start": "989220",
    "end": "994440"
  },
  {
    "text": "compiler will now think that every reference type has to be set to an instance you're not allowed to have",
    "start": "994440",
    "end": "1000620"
  },
  {
    "text": "nulls anywhere so much like nullable value types where",
    "start": "1000620",
    "end": "1005839"
  },
  {
    "text": "you explicitly have to say hey I want an integer that's nullable by adding the question mark you now have to add a",
    "start": "1005839",
    "end": "1012320"
  },
  {
    "text": "question mark to indicate that you want a nullable reference type which is very handy",
    "start": "1012320",
    "end": "1020180"
  },
  {
    "text": "because we've all probably had this happen right has anyone never seen this screen before",
    "start": "1020180",
    "end": "1028040"
  },
  {
    "text": "you are lying I don't believe you or you're new sorry but",
    "start": "1028040",
    "end": "1034100"
  },
  {
    "text": "we all eventually end up having this so why not get the compiler to help us",
    "start": "1034100",
    "end": "1041120"
  },
  {
    "text": "with this because there is one big problem where there's multiple problems with null ability first it encourages that we add null",
    "start": "1041120",
    "end": "1048860"
  },
  {
    "text": "checks all over our code base even if it's not really necessary that makes the",
    "start": "1048860",
    "end": "1054260"
  },
  {
    "text": "code harder to read doesn't necessarily make it hard to understand but more noise means that there's",
    "start": "1054260",
    "end": "1061280"
  },
  {
    "text": "it's easier for us to misunderstand something it's also ambiguous but does it actually",
    "start": "1061280",
    "end": "1068299"
  },
  {
    "text": "mean when a method returns null let's say that I'm trying to fetch a record from a repository",
    "start": "1068299",
    "end": "1074360"
  },
  {
    "text": "personally I always try catch everything and return all but if there was a problem connecting to",
    "start": "1074360",
    "end": "1080480"
  },
  {
    "text": "my database should I get null which is the same result that I might have gotten if there's no record in the database",
    "start": "1080480",
    "end": "1087559"
  },
  {
    "text": "I should probably handle those scenarios differently so we don't know if it is actually",
    "start": "1087559",
    "end": "1094120"
  },
  {
    "text": "unavailable or if it's not found or if it's an error instead we could work with subtypes user not found the user",
    "start": "1094120",
    "end": "1101240"
  },
  {
    "text": "unavailable or through an exception with the database operation fails a bigger problem is that it encourages",
    "start": "1101240",
    "end": "1108320"
  },
  {
    "text": "mutability that means that we can change objects if something is set to null someone expects this to be not null at",
    "start": "1108320",
    "end": "1116000"
  },
  {
    "text": "one point or another because otherwise why would we even have the property or class to begin with",
    "start": "1116000",
    "end": "1121760"
  },
  {
    "text": "so why is that a problem well nowadays everyone's using tasks and task",
    "start": "1121760",
    "end": "1127520"
  },
  {
    "text": "parallel library and doing mobile applications and doing async in a weight and all of that threading is a lot",
    "start": "1127520",
    "end": "1133039"
  },
  {
    "text": "easier but handling multi-threaded applications has not become easier so it",
    "start": "1133039",
    "end": "1139880"
  },
  {
    "text": "can become an issue when it comes to multi-threaded Applications because you will eventually end up having race conditions and trying to update things",
    "start": "1139880",
    "end": "1146600"
  },
  {
    "text": "from different places where you shouldn't so how can we get some help with this we",
    "start": "1146600",
    "end": "1152240"
  },
  {
    "text": "can ask the compiler to solve something for us because I really don't want to",
    "start": "1152240",
    "end": "1157580"
  },
  {
    "text": "end up having to write this all over the place someone in here is going to tell you hey that that code doesn't look very nice we",
    "start": "1157580",
    "end": "1164360"
  },
  {
    "text": "can simplify that a little bit but I still would prefer the compiler to tell",
    "start": "1164360",
    "end": "1169760"
  },
  {
    "text": "me that this could potentially be a problem if the compiler could determine that",
    "start": "1169760",
    "end": "1175220"
  },
  {
    "text": "person address or Street will never be null this null check would be unnecessary",
    "start": "1175220",
    "end": "1181580"
  },
  {
    "text": "and in some cases it can do that we can help the compiler as well to indicate how how we've handled certain fields and",
    "start": "1181580",
    "end": "1188600"
  },
  {
    "text": "objects and how do we do this we enable this by either using a compiler directive",
    "start": "1188600",
    "end": "1195200"
  },
  {
    "text": "we can say that nullable is now enabled for this method for this class for this namespace for this file we have a",
    "start": "1195200",
    "end": "1202100"
  },
  {
    "text": "setting in our application or the Cs project file that allows us to enable this for the entire project",
    "start": "1202100",
    "end": "1208400"
  },
  {
    "text": "and since.net6 this is enabled by default",
    "start": "1208400",
    "end": "1213440"
  },
  {
    "text": "what's the first thing that I enable in Old projects as well but we'll get to that soon so what",
    "start": "1213440",
    "end": "1220340"
  },
  {
    "text": "happens is that when we enable this we can obviously see that string name is",
    "start": "1220340",
    "end": "1225620"
  },
  {
    "text": "equal to null here we say problem because I'm explicitly saying that it's null",
    "start": "1225620",
    "end": "1230660"
  },
  {
    "text": "but the compiler is now it's not telling me that hey there's an issue here or it's just giving me a little bit of a warning imagine if this was all of a",
    "start": "1230660",
    "end": "1238039"
  },
  {
    "text": "sudden giving me compiler errors that would be a little bit annoying and the feature that no one would turn on",
    "start": "1238039",
    "end": "1243919"
  },
  {
    "text": "so instead it's just giving me a warning for now most of us look at our warnings tab all",
    "start": "1243919",
    "end": "1249320"
  },
  {
    "text": "the time and fix author warnings in our projects right you're lying again",
    "start": "1249320",
    "end": "1255500"
  },
  {
    "text": "all right so to to make it actually work with knowledge we'd have to say string question mark and then all of these",
    "start": "1255500",
    "end": "1261919"
  },
  {
    "text": "errors would go away but we can see here that it's telling me that name maybe null here and it's in fact very much",
    "start": "1261919",
    "end": "1267440"
  },
  {
    "text": "correct because I'm setting it in all on the line before it's much smarter than this I have an",
    "start": "1267440",
    "end": "1274280"
  },
  {
    "text": "example we'll jump into Visual Studio in just a moment but what I do I'm a contractor so I go",
    "start": "1274280",
    "end": "1280100"
  },
  {
    "text": "to clients and I enable this and I also set trade warnings as error to true I check in my code and go home",
    "start": "1280100",
    "end": "1287860"
  },
  {
    "text": "and then all of a sudden stuff breaks and they call me back no I'm kidding",
    "start": "1287960",
    "end": "1294320"
  },
  {
    "text": "let's have a look at how this actually works but this is a great setting and it is something that I encourage you to enable in a new project",
    "start": "1294320",
    "end": "1300620"
  },
  {
    "text": "because it will then encourage you to fix the problems because no one reads the warnings",
    "start": "1300620",
    "end": "1306320"
  },
  {
    "text": "so I'm in Visual Studio it doesn't matter which version we can enable this for",
    "start": "1306320",
    "end": "1311780"
  },
  {
    "text": "anything that's c-sharp 8 and newer there's no warnings everything's green",
    "start": "1311780",
    "end": "1316880"
  },
  {
    "text": "here there's no issues found I have opinions on my own code but that's another another talk",
    "start": "1316880",
    "end": "1323419"
  },
  {
    "text": "so now what I can do is that I can enable this by either using this compiler directive to say that this is",
    "start": "1323419",
    "end": "1329600"
  },
  {
    "text": "enabled and all of a sudden I get two warnings here at the bottom it's warning me about this particular",
    "start": "1329600",
    "end": "1336559"
  },
  {
    "text": "class that this class has two properties that are public there are they are never",
    "start": "1336559",
    "end": "1343460"
  },
  {
    "text": "set so what I can do is to fix this I should obviously set them to a value and it",
    "start": "1343460",
    "end": "1348860"
  },
  {
    "text": "would be appropriate for a Constructor to set this value if I just introduce an empty Constructor the warning goes to",
    "start": "1348860",
    "end": "1355760"
  },
  {
    "text": "the Constructor and set instead because the compiler now deems that this should be set by The Constructor you have two",
    "start": "1355760",
    "end": "1362059"
  },
  {
    "text": "fields or properties that are not set so first string last",
    "start": "1362059",
    "end": "1367580"
  },
  {
    "text": "let's initialize this uh nope first",
    "start": "1367580",
    "end": "1374000"
  },
  {
    "text": "right and hopefully after this if I can manage to type on this keyboard",
    "start": "1374000",
    "end": "1379520"
  },
  {
    "text": "last name oh come on here we go",
    "start": "1379520",
    "end": "1385340"
  },
  {
    "text": "and the warning is now disappeared so that's great but now I've broken the",
    "start": "1385340",
    "end": "1390380"
  },
  {
    "text": "contract with everyone that's using this class which is not very good so I don't want to actually add this I",
    "start": "1390380",
    "end": "1398240"
  },
  {
    "text": "want to get rid of the Constructor because I want to know honestly the",
    "start": "1398240",
    "end": "1404000"
  },
  {
    "text": "problem with null reference exceptions was never in this class the problem is where someone uses this first name",
    "start": "1404000",
    "end": "1410179"
  },
  {
    "text": "incorrectly or uses this instance incorrectly so to move the arrow to that",
    "start": "1410179",
    "end": "1415340"
  },
  {
    "text": "place we can add a question mark to say like hey the string here can be null",
    "start": "1415340",
    "end": "1421520"
  },
  {
    "text": "and this string here can also be null and before I go anywhere else",
    "start": "1421520",
    "end": "1427280"
  },
  {
    "text": "I want to tell you about this keyword as well this keyword is instead of set you can set it to init which means that you",
    "start": "1427280",
    "end": "1433820"
  },
  {
    "text": "can only set this once you can only set it once you initialize the instance using an object initializer after you've",
    "start": "1433820",
    "end": "1440960"
  },
  {
    "text": "initialized the object it's immutable and with c-sharp 11",
    "start": "1440960",
    "end": "1446900"
  },
  {
    "text": "you can also say that this is required to be set",
    "start": "1446900",
    "end": "1453340"
  },
  {
    "text": "if I can spell required there we go",
    "start": "1453440",
    "end": "1459679"
  },
  {
    "text": "you can say that you have to set this otherwise there's going to be a compiler error there's a lot more characters here than",
    "start": "1459679",
    "end": "1466400"
  },
  {
    "text": "adding a Constructor but then again this is a way to work around that we might have nullable types that are set by",
    "start": "1466400",
    "end": "1473000"
  },
  {
    "text": "object initializers it's a transition Phase 10 years from now probably or hopefully no one will have to use the",
    "start": "1473000",
    "end": "1479480"
  },
  {
    "text": "question marks all over the place now I fixed this class but there's no",
    "start": "1479480",
    "end": "1484580"
  },
  {
    "text": "warnings anymore in my my application I now have to go go ahead and move this compiler directive to all other methods",
    "start": "1484580",
    "end": "1491000"
  },
  {
    "text": "in my class I don't want to do that so instead let's get rid of that",
    "start": "1491000",
    "end": "1496280"
  },
  {
    "text": "and this can be done from the property page it can be done from the Cs proj file",
    "start": "1496280",
    "end": "1502100"
  },
  {
    "text": "it's easier to find in the Cs project file because I've already added it so I'm setting nullable enabled and I'm",
    "start": "1502100",
    "end": "1509299"
  },
  {
    "text": "also going to treat all warnings as errors inside this project I'm going to save that and go back to my program and",
    "start": "1509299",
    "end": "1515720"
  },
  {
    "text": "hopefully now we have a few errors instead now it's telling me that we have this",
    "start": "1515720",
    "end": "1522980"
  },
  {
    "text": "details which is an instance or a property that represents the details of a person this",
    "start": "1522980",
    "end": "1529340"
  },
  {
    "text": "is not a problem either I don't add a Constructor this is going to be allowed to be null right but I still have a few errors and",
    "start": "1529340",
    "end": "1536299"
  },
  {
    "text": "let's go ahead and fix them this we can just look at the code here I'm getting an attendance I'm calling",
    "start": "1536299",
    "end": "1541400"
  },
  {
    "text": "this who is here method and if we look inside this method call here we have a",
    "start": "1541400",
    "end": "1546919"
  },
  {
    "text": "place where this would blow up one way to fix this is to use a very",
    "start": "1546919",
    "end": "1553220"
  },
  {
    "text": "handy feature called argument null exception",
    "start": "1553220",
    "end": "1558679"
  },
  {
    "text": "and I want to throw an exception if if this thing here if details",
    "start": "1558679",
    "end": "1566539"
  },
  {
    "text": "is null here we go notice how the warning disappeared when",
    "start": "1566539",
    "end": "1573860"
  },
  {
    "text": "I performed a null check in the line above there's something called null State static analysis",
    "start": "1573860",
    "end": "1580640"
  },
  {
    "text": "if I say that 10 times first what's what that's doing is that it's",
    "start": "1580640",
    "end": "1586820"
  },
  {
    "text": "trying to analyze exactly how your code is using an object or using that reference it's trying to determine if",
    "start": "1586820",
    "end": "1593539"
  },
  {
    "text": "it's been null check or not and the fact is that this method here has an attribute on its in parameter",
    "start": "1593539",
    "end": "1599299"
  },
  {
    "text": "that says if this method does not throw an exception I promise that I've performed a null check",
    "start": "1599299",
    "end": "1606340"
  },
  {
    "text": "it doesn't have to perform the null check so if the method is lying you still have a problem",
    "start": "1606500",
    "end": "1612260"
  },
  {
    "text": "we can check this in multiple different ways I could also say well if if the person",
    "start": "1612260",
    "end": "1619340"
  },
  {
    "text": "dot details is not null go ahead and do that",
    "start": "1619340",
    "end": "1625400"
  },
  {
    "text": "so it's very smart it can it can even figure out the inverse of that as well right we can invert that and it would",
    "start": "1625400",
    "end": "1632360"
  },
  {
    "text": "understand that as well super smart and if I want to allow the person in the",
    "start": "1632360",
    "end": "1638120"
  },
  {
    "text": "list to be null I could say that this method here accepts a um a nullable a list of people that could be null and",
    "start": "1638120",
    "end": "1644840"
  },
  {
    "text": "then I would get another warning again so we can keep on adding this to places in the application and we'll eventually",
    "start": "1644840",
    "end": "1650659"
  },
  {
    "text": "find where null reference exceptions would be appearing there's multiple different ways to",
    "start": "1650659",
    "end": "1656720"
  },
  {
    "text": "handle this and solve this and work around this as with anything there's one more warning in the class",
    "start": "1656720",
    "end": "1661760"
  },
  {
    "text": "here and that's this method here is telling me that I'm doing something that I shouldn't here I'm saying that well this method is",
    "start": "1661760",
    "end": "1669200"
  },
  {
    "text": "telling me that it returns an instance I could say that I allow this to return null but then again I would have a",
    "start": "1669200",
    "end": "1675020"
  },
  {
    "text": "problem somewhere else instead I want to fix this I want to promise that I performed either a null",
    "start": "1675020",
    "end": "1681020"
  },
  {
    "text": "check and what's returned here is not null Microsoft introduced the damage operator",
    "start": "1681020",
    "end": "1686539"
  },
  {
    "text": "to say that I promise that this is not null",
    "start": "1686539",
    "end": "1691778"
  },
  {
    "text": "this here is going to blow up you're not smarter than the compiler",
    "start": "1691940",
    "end": "1698000"
  },
  {
    "text": "so very rarely do you have to use this so instead we can solve this by saying I",
    "start": "1698000",
    "end": "1704240"
  },
  {
    "text": "want to return a new person and I want to set this with a new",
    "start": "1704240",
    "end": "1710240"
  },
  {
    "text": "details where the first name is or the first name",
    "start": "1710240",
    "end": "1716600"
  },
  {
    "text": "actually I forgot yield I have to do yield return",
    "start": "1716600",
    "end": "1723639"
  },
  {
    "text": "and I can set the first name to something why is it complaining oh well",
    "start": "1724279",
    "end": "1733059"
  },
  {
    "text": "let's get rid of the required C sharp I said that I shouldn't show any C sharp 11 stuff and I do that and I break my",
    "start": "1733100",
    "end": "1738380"
  },
  {
    "text": "own demo here we go this here might be confusing what is this thing",
    "start": "1738380",
    "end": "1746120"
  },
  {
    "text": "well we've all seen when we can do for instance me person right but why having to add these extra characters that's a",
    "start": "1746120",
    "end": "1752840"
  },
  {
    "text": "little bit unnecessary the compiler can use this thing called the target type new expression which is a new feature in",
    "start": "1752840",
    "end": "1759020"
  },
  {
    "text": "c-sharp as well so what you can do is that you can figure out that you want to return a person",
    "start": "1759020",
    "end": "1764659"
  },
  {
    "text": "so why not just create an instance of that it's not always going to work most of the time it will",
    "start": "1764659",
    "end": "1771200"
  },
  {
    "text": "so with that being said we've now fixed the problems of finding all the null reference exceptions in this application",
    "start": "1771200",
    "end": "1776919"
  },
  {
    "text": "and I do encourage people to go ahead and enable this in your applications and",
    "start": "1776919",
    "end": "1782659"
  },
  {
    "text": "try and figure out where you get these exceptions the first thing you'll notice is that you'll get them on your dtos and",
    "start": "1782659",
    "end": "1789679"
  },
  {
    "text": "your domain objects but once you start adding the question marks and allowing things to be null you might see it that",
    "start": "1789679",
    "end": "1795200"
  },
  {
    "text": "pops up everywhere else all right now with that being said",
    "start": "1795200",
    "end": "1801799"
  },
  {
    "text": "I also do encourage people to turn on treat warnings as errors not just to uh be annoying but because it actually",
    "start": "1801799",
    "end": "1808340"
  },
  {
    "text": "helps people will fix problems if it turns up and if the build server blows up people",
    "start": "1808340",
    "end": "1814580"
  },
  {
    "text": "will eventually go ahead and fix that so with c-sharp 8 we also got what's known as asynchronous streams",
    "start": "1814580",
    "end": "1821539"
  },
  {
    "text": "this is another way of looking at data that's coming into an application",
    "start": "1821539",
    "end": "1826820"
  },
  {
    "text": "so let's say that I want to consume messages on a service bus previously you",
    "start": "1826820",
    "end": "1832880"
  },
  {
    "text": "had to do all your own custom connections to that use some third-party",
    "start": "1832880",
    "end": "1838039"
  },
  {
    "text": "libraries it wasn't really all that trivial with asynchronous streams you could use for each Loop to very easily",
    "start": "1838039",
    "end": "1845840"
  },
  {
    "text": "say give me all the messages on this as they come in use a normal for each Loop",
    "start": "1845840",
    "end": "1851240"
  },
  {
    "text": "you handle it I can normally do and it's very easy to consume streams of data compared to to previously",
    "start": "1851240",
    "end": "1859100"
  },
  {
    "text": "let's um let's jump into Visual Studio actually let's let's do Vega's code instead to",
    "start": "1859100",
    "end": "1865820"
  },
  {
    "text": "spice it up I'm going to go into vs code",
    "start": "1865820",
    "end": "1872840"
  },
  {
    "text": "and this method here is going to produce a stream of data you see the async keyword that I have here normally you",
    "start": "1872840",
    "end": "1879799"
  },
  {
    "text": "use that together with a task to return something that's running asynchronously but in this case here I'm using it with",
    "start": "1879799",
    "end": "1886520"
  },
  {
    "text": "something that's task like I'm saying that this method here will produce an i",
    "start": "1886520",
    "end": "1891559"
  },
  {
    "text": "innumerable where each element that I retrieve asynchronously will contain a string",
    "start": "1891559",
    "end": "1897500"
  },
  {
    "text": "if you've never seen async no8 this is very confusing and I understand that but hopefully it's",
    "start": "1897500",
    "end": "1904220"
  },
  {
    "text": "easier to understand that what you had to do in the past so then the first thing that I do here",
    "start": "1904220",
    "end": "1909740"
  },
  {
    "text": "is that I open up a stream to a file that I have on my disk I'm using another new language feature",
    "start": "1909740",
    "end": "1916340"
  },
  {
    "text": "called using declaration look at I have this using VAR stream and then I just have the semicolon at the",
    "start": "1916340",
    "end": "1922880"
  },
  {
    "text": "end it's not wrapped in a using statement that like you normally see because what happens with a using",
    "start": "1922880",
    "end": "1928100"
  },
  {
    "text": "declaration is that it promises that it will clean up after itself when the",
    "start": "1928100",
    "end": "1933440"
  },
  {
    "text": "method completes and that's quite complex in a synchronous context like this here so",
    "start": "1933440",
    "end": "1940159"
  },
  {
    "text": "then what we do is that we have a while loop that's going to read through all the files that I have on my in my file",
    "start": "1940159",
    "end": "1945799"
  },
  {
    "text": "read through each line it's going to say I want to get the next line available in this file",
    "start": "1945799",
    "end": "1952220"
  },
  {
    "text": "if this is a line or if this is actually a string that I got returned this is pattern matching",
    "start": "1952220",
    "end": "1958100"
  },
  {
    "text": "we're going to go into that soon I'm going to capture that as a local variable called string",
    "start": "1958100",
    "end": "1963679"
  },
  {
    "text": "and then I can use this inside this this while loop now this is interesting",
    "start": "1963679",
    "end": "1969020"
  },
  {
    "text": "because I previously had to declare this on the line above use out parameters and it wasn't very beautiful",
    "start": "1969020",
    "end": "1975799"
  },
  {
    "text": "this is much more nice I have the await task that delay to simulate a little bit of work let's say",
    "start": "1975799",
    "end": "1981500"
  },
  {
    "text": "that we're grabbing something off a message box we're doing some processing of the data that we're loading and then",
    "start": "1981500",
    "end": "1986840"
  },
  {
    "text": "I'm using the yield keyword again to return this to the iterator or I'm telling whoever is iterating through",
    "start": "1986840",
    "end": "1992240"
  },
  {
    "text": "this this stream of data that there's something available looks complex but this is the producing",
    "start": "1992240",
    "end": "1999380"
  },
  {
    "text": "side of that stream which is also important to understand but often if you use for instance Azure and I used Azure",
    "start": "1999380",
    "end": "2006220"
  },
  {
    "text": "messaging as an example their apis will already do all of this part inside of them so what you need to focus on is how",
    "start": "2006220",
    "end": "2013539"
  },
  {
    "text": "we how we how we consume this and that's very simple as well",
    "start": "2013539",
    "end": "2020320"
  },
  {
    "text": "so I have this await keyword in front of my for each Loop normally you see see",
    "start": "2020320",
    "end": "2025779"
  },
  {
    "text": "something like this here for each line that I get of my chunk of data I want to",
    "start": "2025779",
    "end": "2031779"
  },
  {
    "text": "process each of that that this here would indicate that you're getting an innumerable as a result out of some",
    "start": "2031779",
    "end": "2038500"
  },
  {
    "text": "asynchronous operation if we put the away keyword in front of the for each Loop it means that I have",
    "start": "2038500",
    "end": "2044799"
  },
  {
    "text": "an i enumerable that will produce elements asynchronously",
    "start": "2044799",
    "end": "2051099"
  },
  {
    "text": "from this method called here and then we can use them inside this method or inside this for each body",
    "start": "2051099",
    "end": "2060280"
  },
  {
    "text": "what's interesting is that it goes ahead and calls that method gets the first line you then get returned into this",
    "start": "2060280",
    "end": "2066760"
  },
  {
    "text": "portion here you can process that if you want to continue it then goes ahead and loads the next",
    "start": "2066760",
    "end": "2072638"
  },
  {
    "text": "one normally when you load a chunk of data it loads all of it but this here loads one at a time",
    "start": "2072639",
    "end": "2079179"
  },
  {
    "text": "right let me just show you exactly how this works",
    "start": "2079179",
    "end": "2084540"
  },
  {
    "text": "this error is going to print my favorite song If you don't know the song or if you do you can sing",
    "start": "2085540",
    "end": "2093099"
  },
  {
    "text": "you don't have to all right so that's pretty cool now with a console",
    "start": "2093099",
    "end": "2099760"
  },
  {
    "text": "application that's very simple with a text file that's very simple but it becomes quite powerful when you use this",
    "start": "2099760",
    "end": "2106180"
  },
  {
    "text": "with things like a message bus or queues or anything like that",
    "start": "2106180",
    "end": "2111520"
  },
  {
    "text": "so the synchronous streams are composed of two different parts",
    "start": "2111520",
    "end": "2117160"
  },
  {
    "text": "it's first it's the way that we produce the stream of data",
    "start": "2117160",
    "end": "2122200"
  },
  {
    "text": "this here indicates that we are going to stream something it's a string that will be streamed back to us we're reading one",
    "start": "2122200",
    "end": "2128440"
  },
  {
    "text": "line at a time and then I'm using yields to return that which is a very handy keyword that's",
    "start": "2128440",
    "end": "2134200"
  },
  {
    "text": "very rarely used it should really be used more often instead of having to create your own",
    "start": "2134200",
    "end": "2140020"
  },
  {
    "text": "temporary lists and so forth in this case there's no other option you have to use yield and then we are then telling the",
    "start": "2140020",
    "end": "2146920"
  },
  {
    "text": "iterator that we want this and we are opening the file this is a little bit of",
    "start": "2146920",
    "end": "2152800"
  },
  {
    "text": "a different um way of saying or stating the same thing that I had earlier each item here is",
    "start": "2152800",
    "end": "2159640"
  },
  {
    "text": "retrieved asynchronously I'm setting that to my local variable and I'm doing",
    "start": "2159640",
    "end": "2164740"
  },
  {
    "text": "some processing and then I return that so this is the producing side of that asynchronously numerable",
    "start": "2164740",
    "end": "2170800"
  },
  {
    "text": "and then consuming this is very simple I really like this and this is this",
    "start": "2170800",
    "end": "2176200"
  },
  {
    "text": "together with nullable reference types and together with the pattern matching enhancements that we're going to look at soon in C sharp eight we're really",
    "start": "2176200",
    "end": "2183339"
  },
  {
    "text": "awesome but before we look at pattern matching they've done some more changes in",
    "start": "2183339",
    "end": "2188859"
  },
  {
    "text": "c-sharp nine that I also want to bring into that sample as well or that that that demonstration C sharp 9 again",
    "start": "2188859",
    "end": "2196000"
  },
  {
    "text": "introduced a whole lot of features that help us build more cleaner software use",
    "start": "2196000",
    "end": "2201040"
  },
  {
    "text": "less keystrokes because someone else did it for us we can do something called records and we",
    "start": "2201040",
    "end": "2206440"
  },
  {
    "text": "can use this very very good type that was I believe one of the primer reasons",
    "start": "2206440",
    "end": "2212200"
  },
  {
    "text": "that they started doing the rework on the compilers in the first place when the compiler is Ford for the open source",
    "start": "2212200",
    "end": "2219460"
  },
  {
    "text": "compilers when they started doing that one of the Champions was primary Constructors which is really what record",
    "start": "2219460",
    "end": "2226420"
  },
  {
    "text": "types eventually ended up being so it took them four or so versions to get",
    "start": "2226420",
    "end": "2231880"
  },
  {
    "text": "this into the language which shows that this time this thing or this language feature is no easy task to solve",
    "start": "2231880",
    "end": "2239859"
  },
  {
    "text": "that was released together with the init-only Setters that I demonstrated earlier and the top level statements",
    "start": "2239859",
    "end": "2245619"
  },
  {
    "text": "that you might not have noticed but the application that I had in both vs code as well as in Visual Studio none of them",
    "start": "2245619",
    "end": "2252760"
  },
  {
    "text": "had this public static void main stuff the method in the program class and all of that that's all behind the scenes it",
    "start": "2252760",
    "end": "2260200"
  },
  {
    "text": "generates that for you you can just go ahead and add c-sharp code to the program.cs file and you don't have to",
    "start": "2260200",
    "end": "2266500"
  },
  {
    "text": "have all that boilerplate code anymore this is very useful when you're doing something called minimal apis which is a",
    "start": "2266500",
    "end": "2273880"
  },
  {
    "text": "very handy thing that you can that's becoming more and more popular for for Nano services or microservices or",
    "start": "2273880",
    "end": "2280119"
  },
  {
    "text": "whatever you want to call them now C sharp 9 introduced a whole lot more patterns which is why pattern",
    "start": "2280119",
    "end": "2285400"
  },
  {
    "text": "matching is going to be the next thing that we're going to look at it also introduced a Target type new expression that I also demonstrated and",
    "start": "2285400",
    "end": "2292119"
  },
  {
    "text": "a whole lot more features that I personally haven't used and probably",
    "start": "2292119",
    "end": "2297579"
  },
  {
    "text": "won't because they're targeting more lower level stuff in in c-sharp if you",
    "start": "2297579",
    "end": "2302619"
  },
  {
    "text": "do that native sized integers and and function pointers and all of that very important things if you're working with I don't",
    "start": "2302619",
    "end": "2309880"
  },
  {
    "text": "know unity game programming but personally I'm very fond of the other ones here so how about we we take",
    "start": "2309880",
    "end": "2316599"
  },
  {
    "text": "some time to talk about pattern matching which is one of those important features that they've worked on from c-sharp 7 to",
    "start": "2316599",
    "end": "2323320"
  },
  {
    "text": "8 to 9 to 10 and 11. you'll you'll see that with all the newer versions of",
    "start": "2323320",
    "end": "2329079"
  },
  {
    "text": "c-sharp there's going to be more patterns added and that's because they find new ways of being smarter about how",
    "start": "2329079",
    "end": "2336339"
  },
  {
    "text": "to express ourselves pattern matching is all about being able to identify what something is does this puzzle piece have",
    "start": "2336339",
    "end": "2343359"
  },
  {
    "text": "rounded Corners is it transparent what color is that thing how how many puzzle",
    "start": "2343359",
    "end": "2348940"
  },
  {
    "text": "pieces are are there in this set can you give me the middle part can you give me the first and last piece there's so many",
    "start": "2348940",
    "end": "2355359"
  },
  {
    "text": "things that we can express with pattern matching that sure we've been able to do it before with normal code or with link",
    "start": "2355359",
    "end": "2362460"
  },
  {
    "text": "but being a first class citizen in the language means that it's a little bit nicer",
    "start": "2362460",
    "end": "2368560"
  },
  {
    "text": "so I mentioned that we can use color matching in a whole variety of different ways it's mostly about matching on what",
    "start": "2368560",
    "end": "2376060"
  },
  {
    "text": "type of object we're looking at and what kind of attributes that object has in terms of properties and values not the",
    "start": "2376060",
    "end": "2382420"
  },
  {
    "text": "attributes that you smack on top of them using the square brackets but the attributes as in color name and so forth",
    "start": "2382420",
    "end": "2390820"
  },
  {
    "text": "in c-sharp one through six you'd have to say something like this here so like if the type of this thing is my type of",
    "start": "2390820",
    "end": "2396460"
  },
  {
    "text": "what I'm looking for and then I'd have to check a property if I'm looking for a specific color now this here is not",
    "start": "2396460",
    "end": "2403000"
  },
  {
    "text": "really there's nothing wrong with this there's just a whole lot more characters to say something that I could probably",
    "start": "2403000",
    "end": "2409240"
  },
  {
    "text": "Express a little bit easier especially if you've done kotlin or Swift this here is like 50 more characters than you have",
    "start": "2409240",
    "end": "2415780"
  },
  {
    "text": "to to use so in C sharp seven they instead decided that why not require even more",
    "start": "2415780",
    "end": "2422079"
  },
  {
    "text": "characters to express the same thing that's why I said that in C sharp 7",
    "start": "2422079",
    "end": "2428020"
  },
  {
    "text": "pattern matching wasn't really ready for anyone to use because even though they",
    "start": "2428020",
    "end": "2433119"
  },
  {
    "text": "said the fundamental pieces in the compiler to make this work look at this part here case apple and then I captured",
    "start": "2433119",
    "end": "2439720"
  },
  {
    "text": "this as a local variable app of Apple that I can use inside inside this case block here right so I",
    "start": "2439720",
    "end": "2447460"
  },
  {
    "text": "can use that as the concrete type I don't have to type cast or anything like that which is quite smart",
    "start": "2447460",
    "end": "2455440"
  },
  {
    "text": "but with c-sharp 8 and with C sharp 9 there was a couple of improvements that",
    "start": "2455440",
    "end": "2461380"
  },
  {
    "text": "made this a lot more useful instead of having to say well I want to",
    "start": "2461380",
    "end": "2466780"
  },
  {
    "text": "create a switch for this thing and then I have a lot of cases why not translate that or inverse that expression and use",
    "start": "2466780",
    "end": "2473680"
  },
  {
    "text": "it more like how I would express myself when talking to a customer for example I want a result based on this input and",
    "start": "2473680",
    "end": "2480760"
  },
  {
    "text": "inside this switch expression what which this thing is called this is the object we want to create patterns for so I",
    "start": "2480760",
    "end": "2487839"
  },
  {
    "text": "wanted to produce a result which is normally from a method call you something that you concatenate something",
    "start": "2487839",
    "end": "2493060"
  },
  {
    "text": "that you compute right so we want to get the result based on what kind of input we have",
    "start": "2493060",
    "end": "2498579"
  },
  {
    "text": "we fill this with expression with Expressions much like expression body members",
    "start": "2498579",
    "end": "2504280"
  },
  {
    "text": "the left hand side is the pattern in this case a very simple type pattern",
    "start": "2504280",
    "end": "2511060"
  },
  {
    "text": "right with the expression and then I say this here produces a string doesn't have to be producing a string the only",
    "start": "2511060",
    "end": "2517540"
  },
  {
    "text": "criteria here is that all of them produce the same type or at least the same base type",
    "start": "2517540",
    "end": "2523240"
  },
  {
    "text": "so this here produces a string and the the final one here the underscore that's a discard it's saying that for",
    "start": "2523240",
    "end": "2528280"
  },
  {
    "text": "everything that I haven't created a pattern for that's what you're going to do here",
    "start": "2528280",
    "end": "2534040"
  },
  {
    "text": "right so that's when it's going to be returned from this pattern this looks simple and it really is",
    "start": "2534040",
    "end": "2540700"
  },
  {
    "text": "but C sharp introduces a whole lot of patterns to make this even more powerful",
    "start": "2540700",
    "end": "2547000"
  },
  {
    "text": "we just saw the type pattern on its own that's very simple I can say if this is on Apple if this is not null if this is",
    "start": "2547000",
    "end": "2552760"
  },
  {
    "text": "null or whatever but we can also use it together with a deconstruct method",
    "start": "2552760",
    "end": "2558460"
  },
  {
    "text": "to say whatever you deconstructed this to I want to match on the different values that you returned",
    "start": "2558460",
    "end": "2565359"
  },
  {
    "text": "we can use it together with properties to match values on properties that we have we can match tuples or tuples or",
    "start": "2565359",
    "end": "2572920"
  },
  {
    "text": "whatever your preference is we can have relational patterns to say hey I want to find all the people that",
    "start": "2572920",
    "end": "2579760"
  },
  {
    "text": "are 35 years older or younger right so you can write",
    "start": "2579760",
    "end": "2584859"
  },
  {
    "text": "patterns for that you can even build ranges to say hey I want to find everyone that's between these two age",
    "start": "2584859",
    "end": "2592540"
  },
  {
    "text": "spans or I want to find the ones that have had a birthday yesterday or today",
    "start": "2592540",
    "end": "2599920"
  },
  {
    "text": "right and you can group these different patterns together with parenthesized patterns you can negate them with a knot",
    "start": "2599920",
    "end": "2606160"
  },
  {
    "text": "pattern all of these can be used together to create both very powerful",
    "start": "2606160",
    "end": "2611560"
  },
  {
    "text": "expressions or powerful patterns that can also produce very unreadable code so you have to be very careful",
    "start": "2611560",
    "end": "2618280"
  },
  {
    "text": "what all of these when used together they produce something called a recursive pattern",
    "start": "2618280",
    "end": "2623619"
  },
  {
    "text": "right and what that means is that it looks first on exam for example a type",
    "start": "2623619",
    "end": "2629079"
  },
  {
    "text": "and then we might want to look at a property so it starts looking at the type then it drills down and looks looks",
    "start": "2629079",
    "end": "2634900"
  },
  {
    "text": "at more things on that before we jump back into Visual Studio let's just quickly list the important",
    "start": "2634900",
    "end": "2641440"
  },
  {
    "text": "language features in in C sharp 10 because we're going to be looking at quite a few of these as well",
    "start": "2641440",
    "end": "2646780"
  },
  {
    "text": "we have record structs Global using directives there's file scope namespace",
    "start": "2646780",
    "end": "2653260"
  },
  {
    "text": "declarations there is extended property patterns so again there's improvements to pattern matching C sharp 10 was",
    "start": "2653260",
    "end": "2659440"
  },
  {
    "text": "really mostly about improving what was already there it's not introducing anything groundbreaking like all the",
    "start": "2659440",
    "end": "2665800"
  },
  {
    "text": "patterns in C sharp nine it's not introducing anything like asynchronous streams or the switch expression like",
    "start": "2665800",
    "end": "2671140"
  },
  {
    "text": "c-sharp H does but it does introduce a couple of different language features that are",
    "start": "2671140",
    "end": "2677500"
  },
  {
    "text": "interesting so how about we jump into Visual Studio and spend",
    "start": "2677500",
    "end": "2683380"
  },
  {
    "text": "a bit of time looking at C sharp 9 and C sharp 10. let's start off by going to a",
    "start": "2683380",
    "end": "2689619"
  },
  {
    "text": "different project and I'll show you I have this project here called pattern matching it has a",
    "start": "2689619",
    "end": "2696339"
  },
  {
    "text": "class called test result or a file called test result it's using this record thing",
    "start": "2696339",
    "end": "2703240"
  },
  {
    "text": "record is a way to create a reference type it's a another word of saying that",
    "start": "2703240",
    "end": "2708280"
  },
  {
    "text": "this is a class it can actually be used together with the class keyword as well but by default",
    "start": "2708280",
    "end": "2715300"
  },
  {
    "text": "a record is a class behind the scenes you could also have a record struct which was introduced in C sharp 10.",
    "start": "2715300",
    "end": "2724480"
  },
  {
    "text": "depends on where you want this to be stored but a big difference between a record",
    "start": "2724480",
    "end": "2730060"
  },
  {
    "text": "class and a record struct is that record structs or not read only you'd have to manually say that this is",
    "start": "2730060",
    "end": "2736599"
  },
  {
    "text": "a read-only record struct and it becomes a little bit hard to understand and read so let's go",
    "start": "2736599",
    "end": "2742240"
  },
  {
    "text": "back to the normal record and talk about what this actually is so this is a class why would I do this",
    "start": "2742240",
    "end": "2747520"
  },
  {
    "text": "instead of just producing a class if we expand this a little bit here without looking at the body just imagine",
    "start": "2747520",
    "end": "2754839"
  },
  {
    "text": "that you can't see that part this here is a primary Constructor it's defined together with what your class name is",
    "start": "2754839",
    "end": "2761800"
  },
  {
    "text": "normally defined with so I say that the test result is built up of a number of attempts and",
    "start": "2761800",
    "end": "2768880"
  },
  {
    "text": "which date you tested this on then we can have fields and properties and methods and all of that inside my record",
    "start": "2768880",
    "end": "2775119"
  },
  {
    "text": "why would I do this if I can just use a normal class this using it for this sole purpose is",
    "start": "2775119",
    "end": "2781420"
  },
  {
    "text": "not really it's it's intended purpose so I've created another record here",
    "start": "2781420",
    "end": "2787119"
  },
  {
    "text": "actually I took the same one I pasted that into sharflab.io it's the exact same struct or record that we just",
    "start": "2787119",
    "end": "2794680"
  },
  {
    "text": "looked at on the right hand side we can see all the decompiled code",
    "start": "2794680",
    "end": "2800319"
  },
  {
    "text": "so what we get out of this here is that we get a class that implements I equatable it has read-only backing",
    "start": "2800319",
    "end": "2807339"
  },
  {
    "text": "fields this here means that we have an init only property it's immutable record",
    "start": "2807339",
    "end": "2815079"
  },
  {
    "text": "records are immutable by default which is what we want in a multi-threaded environment",
    "start": "2815079",
    "end": "2821680"
  },
  {
    "text": "it has the Constructor it also has a generated method to get a string representation of this which is good for",
    "start": "2821680",
    "end": "2827740"
  },
  {
    "text": "debugging or if you're logging so you can get this into logs very handy",
    "start": "2827740",
    "end": "2833140"
  },
  {
    "text": "and then if we go down here we can see that it implements equality checks as well or records come with value-based",
    "start": "2833140",
    "end": "2840099"
  },
  {
    "text": "equality so if you have two instances of a test result it doesn't care if it's the same",
    "start": "2840099",
    "end": "2846460"
  },
  {
    "text": "instance if you compare two classes it will only do a reference comparison but",
    "start": "2846460",
    "end": "2852099"
  },
  {
    "text": "with records it will compare each member it will compare the number of attempts",
    "start": "2852099",
    "end": "2857980"
  },
  {
    "text": "with the test date right that's a very big difference",
    "start": "2857980",
    "end": "2863859"
  },
  {
    "text": "but they also support adding methods and they also support inheritance as well I have a past test and I failed test that",
    "start": "2863859",
    "end": "2870700"
  },
  {
    "text": "inherits from That Base Class very handy and here I've added a",
    "start": "2870700",
    "end": "2876640"
  },
  {
    "text": "deconstruct method now records do come with a default deconstruct method that takes all the all the",
    "start": "2876640",
    "end": "2884079"
  },
  {
    "text": "properties that you define in your primary Constructor and also creates a deconstruct method for that",
    "start": "2884079",
    "end": "2890619"
  },
  {
    "text": "but here I've created my own one because I want to do some computation I'd like to be able to deconstruct a test result",
    "start": "2890619",
    "end": "2897400"
  },
  {
    "text": "into saying give me the test date and give me how many days ago that was",
    "start": "2897400",
    "end": "2902680"
  },
  {
    "text": "and I want to also indicate if it should be archived for example this could be whatever just to give you an example",
    "start": "2902680",
    "end": "2910119"
  },
  {
    "text": "now to use it like that to to be able to then deconstruct this I've created a new",
    "start": "2910119",
    "end": "2916000"
  },
  {
    "text": "instance of a test result I could then say well if my test result",
    "start": "2916000",
    "end": "2923619"
  },
  {
    "text": "is able to be deconstructed into what I",
    "start": "2923619",
    "end": "2928839"
  },
  {
    "text": "Define in this pattern here now notice here that this is where it does become a",
    "start": "2928839",
    "end": "2934240"
  },
  {
    "text": "little bit confusing because there's no intellisense I I think I have to know exactly just tells me that there's no",
    "start": "2934240",
    "end": "2940119"
  },
  {
    "text": "deconstruct that takes here or arguments so we have to know that the first one is test to date I don't care about the test",
    "start": "2940119",
    "end": "2945760"
  },
  {
    "text": "date maybe I want to find tests that are 10 days older or older and I don't care",
    "start": "2945760",
    "end": "2950980"
  },
  {
    "text": "about the last one this is extremely unreadable",
    "start": "2950980",
    "end": "2956200"
  },
  {
    "text": "no one will understand this like if I go back to this code tomorrow I will have no idea what I wrote",
    "start": "2956200",
    "end": "2962079"
  },
  {
    "text": "you can't use named arguments as well but since there's no help with intellisense it does become a little bit uh difficult",
    "start": "2962079",
    "end": "2969579"
  },
  {
    "text": "to understand understand a better approach actually before I show you the better",
    "start": "2969579",
    "end": "2975160"
  },
  {
    "text": "approach is that this here don't care if it's a test that's passed or failed it",
    "start": "2975160",
    "end": "2981579"
  },
  {
    "text": "doesn't care about the subclass if I want to say that this can be a past test",
    "start": "2981579",
    "end": "2988180"
  },
  {
    "text": "I have to specify that first right so now it has to be the exact type",
    "start": "2988180",
    "end": "2993400"
  },
  {
    "text": "as well as being deconstructed into this thing I could also say I want this to be passed or I want this to be",
    "start": "2993400",
    "end": "2999460"
  },
  {
    "text": "deconstructed into something like this here right",
    "start": "2999460",
    "end": "3004740"
  },
  {
    "text": "so you can compose very very confusing patterns but it's also very powerful",
    "start": "3004740",
    "end": "3010079"
  },
  {
    "text": "um as you'll as you'll soon see so we can change this up a little bit here instead of having to use the",
    "start": "3010079",
    "end": "3015780"
  },
  {
    "text": "deconstruct method which is handy in some cases um especially if you match on all the",
    "start": "3015780",
    "end": "3022079"
  },
  {
    "text": "different things that you get from your out method or your deconstruct method let's say that I instead want to say",
    "start": "3022079",
    "end": "3028680"
  },
  {
    "text": "that I'd like to find where all the number of attempts or maybe I I don't have the the days here so I have to",
    "start": "3028680",
    "end": "3035160"
  },
  {
    "text": "compute that myself but this here is using a property pattern",
    "start": "3035160",
    "end": "3040380"
  },
  {
    "text": "it requires me to find a past test that also has this property set to a certain value",
    "start": "3040380",
    "end": "3047660"
  },
  {
    "text": "so we can use this with normal if statements but we can also use this together with that switch expression",
    "start": "3047819",
    "end": "3053700"
  },
  {
    "text": "let's say that I want to find the outcome based on my test result",
    "start": "3053700",
    "end": "3059700"
  },
  {
    "text": "I want to produce a switch and",
    "start": "3059700",
    "end": "3064800"
  },
  {
    "text": "in here I have to produce my or add my patterns now the final pattern is the",
    "start": "3064800",
    "end": "3070440"
  },
  {
    "text": "the Discord that's the default thing that catches everything I could also say that I want to capture everything into a",
    "start": "3070440",
    "end": "3077280"
  },
  {
    "text": "specific variable if I don't have that available or X for example and now X",
    "start": "3077280",
    "end": "3082380"
  },
  {
    "text": "here would be available as a test result or a nullable test result because this may be null it catches both the object",
    "start": "3082380",
    "end": "3088559"
  },
  {
    "text": "as well as if it's not and then we can add more patterns on top",
    "start": "3088559",
    "end": "3094440"
  },
  {
    "text": "here so why don't I add the discard at the at the top same reason you don't do that for normal switches",
    "start": "3094440",
    "end": "3101579"
  },
  {
    "text": "more granular on the top and the catch all at the bottom so we could say that I want to find all",
    "start": "3101579",
    "end": "3108720"
  },
  {
    "text": "the past tests or I want to find I can't even spell",
    "start": "3108720",
    "end": "3114440"
  },
  {
    "text": "or we want to find for example failed tests",
    "start": "3114440",
    "end": "3119520"
  },
  {
    "text": "where the number of attempts is between let's say 10 and less than",
    "start": "3119520",
    "end": "3126839"
  },
  {
    "text": "20. I can then capture this as a if I can just do failed test",
    "start": "3126839",
    "end": "3135300"
  },
  {
    "text": "right so why would I capture this as a local variable because now I could either pass it into",
    "start": "3135300",
    "end": "3142020"
  },
  {
    "text": "a method call or I could use it inside here to produce a string so this here will in fact be a failed test it will be",
    "start": "3142020",
    "end": "3149040"
  },
  {
    "text": "the actual instance that I can use in this case here right so this here shows the the type",
    "start": "3149040",
    "end": "3154920"
  },
  {
    "text": "pattern it shows the the conjunctive and patterns I saw the show the or pattern",
    "start": "3154920",
    "end": "3160500"
  },
  {
    "text": "at the top you can also have you know the parenthesis here and that would create one of these parenthesized",
    "start": "3160500",
    "end": "3166079"
  },
  {
    "text": "patterns just to group it a little bit more nicely these are very powerful",
    "start": "3166079",
    "end": "3171839"
  },
  {
    "text": "and you could of course also as I mentioned earlier you can use the not pattern to to negate an entire pattern",
    "start": "3171839",
    "end": "3178140"
  },
  {
    "text": "that means that you cannot capture it because it has no clue what you're looking for even though the pattern",
    "start": "3178140",
    "end": "3184260"
  },
  {
    "text": "works without a test case for this I have no idea what this code will actually find",
    "start": "3184260",
    "end": "3191640"
  },
  {
    "text": "if we'll find all past tests that are not between 10 and 20.",
    "start": "3191640",
    "end": "3197940"
  },
  {
    "text": "right it becomes a little bit confusing so be careful when you add this to your projects then not",
    "start": "3197940",
    "end": "3204359"
  },
  {
    "text": "pattern is great in one particular case",
    "start": "3204359",
    "end": "3209579"
  },
  {
    "text": "if test result is not no",
    "start": "3209579",
    "end": "3215660"
  },
  {
    "text": "that is perfect that's a perfect opportunity to use that all right so that showed the the record",
    "start": "3215940",
    "end": "3223680"
  },
  {
    "text": "types and the fact that they do have value-based equality so now if I do have if I created two instances test result",
    "start": "3223680",
    "end": "3230520"
  },
  {
    "text": "one and two and we were to compare these two we know that test result",
    "start": "3230520",
    "end": "3238520"
  },
  {
    "text": "is equal to if that is equal to test result two this would in fact go ahead and compare each",
    "start": "3238520",
    "end": "3245160"
  },
  {
    "text": "property with each other now you would probably imagine that these would be equal but since I use",
    "start": "3245160",
    "end": "3251640"
  },
  {
    "text": "daytime offset.now it includes the ticks so they will not be equal very confusing",
    "start": "3251640",
    "end": "3258680"
  },
  {
    "text": "but just a little bit of a hint that I have a chorus on dates and times on pluralsights",
    "start": "3258960",
    "end": "3264839"
  },
  {
    "text": "all right joking aside c-sharp 10 then introduced quite a whole bunch of features as well not as",
    "start": "3264839",
    "end": "3271980"
  },
  {
    "text": "important as the ones we've looked at in c-sharp 8 and 9.",
    "start": "3271980",
    "end": "3277559"
  },
  {
    "text": "record sucks is good record strikes is good if you want to store the struct on the Heap instead of the stack and the",
    "start": "3277559",
    "end": "3284160"
  },
  {
    "text": "global using directives actually I didn't show you that the file scope namespaces default",
    "start": "3284160",
    "end": "3289920"
  },
  {
    "text": "nowadays is that notice that I don't have to add any usings at the top except",
    "start": "3289920",
    "end": "3295200"
  },
  {
    "text": "for my own namespaces here I don't have to do using system using system.link or anything like that it's because",
    "start": "3295200",
    "end": "3301800"
  },
  {
    "text": "if you're going to the project file it has this thing called implicit usings enabled so it will bring in all of that",
    "start": "3301800",
    "end": "3307980"
  },
  {
    "text": "for you it will just implicitly include things study things that you need",
    "start": "3307980",
    "end": "3313680"
  },
  {
    "text": "and instead of having to wrap my entire file inside a namespace declaration we",
    "start": "3313680",
    "end": "3318960"
  },
  {
    "text": "can say namespace at the top and this entire file now falls into that namespace",
    "start": "3318960",
    "end": "3325700"
  },
  {
    "text": "which is also default when you create a new class in some cases and in some",
    "start": "3326160",
    "end": "3331859"
  },
  {
    "text": "cases it's not Visual Studio tends to not be very um",
    "start": "3331859",
    "end": "3337980"
  },
  {
    "text": "not do it similar for all cases but it's nice that's one of the things I go ahead and change as well just get rid of that",
    "start": "3337980",
    "end": "3344220"
  },
  {
    "text": "indentation makes it easier when you code review so C sharp 10 as I mentioned in",
    "start": "3344220",
    "end": "3349980"
  },
  {
    "text": "introduced quite a few things as well but not as groundbreaking as what we saw in c-sharp a tonight it",
    "start": "3349980",
    "end": "3356940"
  },
  {
    "text": "did add something called constant interpolated strings which is what some people have been asking for as well so",
    "start": "3356940",
    "end": "3362640"
  },
  {
    "text": "if you have a constant ring previously you couldn't use that with a big string interpolation",
    "start": "3362640",
    "end": "3368339"
  },
  {
    "text": "one thing that was really good though is that in previous versions of c-sharp",
    "start": "3368339",
    "end": "3373859"
  },
  {
    "text": "this here is C Sharp 9 you have to explicitly Define which delegate that you wanted if",
    "start": "3373859",
    "end": "3380700"
  },
  {
    "text": "you did a Lambda like this here why would you have to do that when the",
    "start": "3380700",
    "end": "3386280"
  },
  {
    "text": "compiler can just figure it out for you so in in C sharp 10 it can infer that for you so if it",
    "start": "3386280",
    "end": "3393300"
  },
  {
    "text": "understands what you're trying to do we can infer the Lambda so you don't have to explicitly say the",
    "start": "3393300",
    "end": "3399059"
  },
  {
    "text": "type here now I didn't mention earlier that this thing called top both top level",
    "start": "3399059",
    "end": "3404819"
  },
  {
    "text": "statements as well as minimal apis this here is an example of a minimal API I",
    "start": "3404819",
    "end": "3410220"
  },
  {
    "text": "have a and a app.map get so I can map a a specific path on a website to this",
    "start": "3410220",
    "end": "3416099"
  },
  {
    "text": "thing here there's just like two or three more lines above this to create an actual web application",
    "start": "3416099",
    "end": "3422400"
  },
  {
    "text": "and this is just a program.cs now in c-sharp 10 they added",
    "start": "3422400",
    "end": "3427920"
  },
  {
    "text": "the the portion of your from header so you can have attributes in lambdas previously you couldn't do attributes in",
    "start": "3427920",
    "end": "3433380"
  },
  {
    "text": "lambdas which made minimal apis like this here sometimes hard to work with",
    "start": "3433380",
    "end": "3438540"
  },
  {
    "text": "because a lot of things in asp.net requires attributes",
    "start": "3438540",
    "end": "3443579"
  },
  {
    "text": "so with about two minutes left let's go through c-sharp 11. there's quite a few",
    "start": "3443579",
    "end": "3448920"
  },
  {
    "text": "things in C sharp 11 and I did mention that there's a talk tomorrow by David from Microsoft who's going to jump deep",
    "start": "3448920",
    "end": "3455700"
  },
  {
    "text": "into C sharp 11. there's a few features added to c-sharp 11 that's that's great",
    "start": "3455700",
    "end": "3461339"
  },
  {
    "text": "and some were removed due to com due to community backlash but to give you a",
    "start": "3461339",
    "end": "3466440"
  },
  {
    "text": "little bit of a hint there's more patterns for example you can now look at a list to say I want to",
    "start": "3466440",
    "end": "3472559"
  },
  {
    "text": "get the first part or last part you can slice off a little bit of a portion",
    "start": "3472559",
    "end": "3478140"
  },
  {
    "text": "there's some changes to name off it's finally caching delegates for aesthetic method groups it's a little bit of a",
    "start": "3478140",
    "end": "3484500"
  },
  {
    "text": "performance Improvement the required properties I showed you that",
    "start": "3484500",
    "end": "3489599"
  },
  {
    "text": "it allows you to then say that a property is required when you create an instance of that",
    "start": "3489599",
    "end": "3495540"
  },
  {
    "text": "we can have raw string literals which if you've ever done VB and you've done XML code inside VB it's pretty much the same",
    "start": "3495540",
    "end": "3501839"
  },
  {
    "text": "thing it's amazing I I don't understand why it took so long um together with that static members and",
    "start": "3501839",
    "end": "3508079"
  },
  {
    "text": "interfaces utf-8 string literals so you can say that hey I have this this string",
    "start": "3508079",
    "end": "3513180"
  },
  {
    "text": "here it should actually end with u8 and that would be a utf-8 string and you would",
    "start": "3513180",
    "end": "3520619"
  },
  {
    "text": "assign that to a span of byte why would you want to do that because all communication over the wire is mostly",
    "start": "3520619",
    "end": "3526980"
  },
  {
    "text": "done in utf-8 so that would require less computation",
    "start": "3526980",
    "end": "3532440"
  },
  {
    "text": "converting back and forth very good for performance and generic attributes this is one of the features",
    "start": "3532440",
    "end": "3538680"
  },
  {
    "text": "that I've been wondering why they haven't added for a very long time as well the one feature that I did say that they",
    "start": "3538680",
    "end": "3544319"
  },
  {
    "text": "removed due to company Community backlash is the null checking or the parameter and all checking if you added",
    "start": "3544319",
    "end": "3551160"
  },
  {
    "text": "the double bangs on an input parameter on a method it would automatically do a",
    "start": "3551160",
    "end": "3556619"
  },
  {
    "text": "null check and throw an exception if it was no which uh your code ended up having",
    "start": "3556619",
    "end": "3563339"
  },
  {
    "text": "question marks all over the place because you had no reference exceptions or nullable reference types and then you",
    "start": "3563339",
    "end": "3568799"
  },
  {
    "text": "had exclamation marks everywhere it just got really hard to read the code",
    "start": "3568799",
    "end": "3575280"
  },
  {
    "text": "so with that being said there's quite a lot happening in c-sharp and I have a",
    "start": "3575280",
    "end": "3580500"
  },
  {
    "text": "few courses on pluralsight on new things in C sharp 10 C sharp 11 12 coming next",
    "start": "3580500",
    "end": "3586680"
  },
  {
    "text": "year or later this year so there's quite a lot of things to learn about the language I hope if you enjoyed this and",
    "start": "3586680",
    "end": "3592740"
  },
  {
    "text": "learned a little bit about c-sharp and that you're excited to try some of these new features and as I mentioned earlier",
    "start": "3592740",
    "end": "3598079"
  },
  {
    "text": "if you have any questions I'm here for the rest of the conference I'm available on Twitter and don't forget to vote on",
    "start": "3598079",
    "end": "3605280"
  },
  {
    "text": "your way out and thank you so much for coming and listening to me",
    "start": "3605280",
    "end": "3609859"
  }
]