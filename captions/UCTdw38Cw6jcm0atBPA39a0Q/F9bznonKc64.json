[
  {
    "text": "good afternoon thank you for coming so my name is Marc seaman and if you want",
    "start": "5720",
    "end": "12840"
  },
  {
    "text": "to know more about me you can go to blogger play daddy I'm not gonna tie you with that right now so there's information there I'm on",
    "start": "12840",
    "end": "19570"
  },
  {
    "text": "Twitter at pleure if that fancy that catches your fancy what I'm going to try",
    "start": "19570",
    "end": "24790"
  },
  {
    "text": "to do today is to try to answer a couple of frequently asked questions and it's going to be two of them and at first",
    "start": "24790",
    "end": "32320"
  },
  {
    "text": "glance if you just list them side by side you'd probably think that they don't really seem to be much related to",
    "start": "32320",
    "end": "37360"
  },
  {
    "text": "each other but it turns out that the answer to one of them will actually also inform the answer to the other one so",
    "start": "37360",
    "end": "43390"
  },
  {
    "text": "even though there's seemingly unrelated they actually turn out to be quite related so I'm gonna do this in over",
    "start": "43390",
    "end": "50830"
  },
  {
    "text": "three acts in the sense that first I'm going to start with the first frequently asked question and I'm gonna spend some",
    "start": "50830",
    "end": "57190"
  },
  {
    "text": "time just talking about the context of it and what would make people ask that question and I'm not gonna answer the",
    "start": "57190",
    "end": "65260"
  },
  {
    "text": "questions straight away then because after you know that's the first act that I'm gonna put it away I'm going to look",
    "start": "65260",
    "end": "70420"
  },
  {
    "text": "at this second frequently asked question and we'll talk about that and you know what would make people ask that question",
    "start": "70420",
    "end": "77500"
  },
  {
    "text": "and we'll answer that question and then it turns out that we in the third act when we return to the first question we",
    "start": "77500",
    "end": "84219"
  },
  {
    "text": "now have you know an idea about how to answer that as well because it's basically informed by the answer for the",
    "start": "84219",
    "end": "89710"
  },
  {
    "text": "for the middle one so the first frequently asked question that I'm going to try to answer is how do I combine",
    "start": "89710",
    "end": "97030"
  },
  {
    "text": "dependency injection with a sink and a weight without leaky abstractions that",
    "start": "97030",
    "end": "102549"
  },
  {
    "text": "is so in order to demonstrate what what",
    "start": "102549",
    "end": "108310"
  },
  {
    "text": "I mean by this you know what what sort of question this is we need some code to look at so as always I my favorite",
    "start": "108310",
    "end": "115240"
  },
  {
    "text": "scenario is that of a restaurant reservation system so I always you know if I can get away with it try to use",
    "start": "115240",
    "end": "122229"
  },
  {
    "text": "that scenario so you may have seen this slide before but basically the idea is",
    "start": "122229",
    "end": "127570"
  },
  {
    "text": "that you have you know a online restaurant in a website and app or something like that you find your",
    "start": "127570",
    "end": "133120"
  },
  {
    "text": "restaurant you say I would like to make a reservation for this particular date you can tell the slide is a couple of years old now and when you press the",
    "start": "133120",
    "end": "141010"
  },
  {
    "text": "submit button it creates a little JSON document with that you know data and",
    "start": "141010",
    "end": "146680"
  },
  {
    "text": "then it you know it sit to a web server somewhere and the code that we gotta look at is the",
    "start": "146680",
    "end": "152150"
  },
  {
    "text": "server-side part that handles this incoming request for a reservation and you know decides what to do with it so",
    "start": "152150",
    "end": "159329"
  },
  {
    "text": "we'll start with the business logic that domain logic if we will and the and the",
    "start": "159329",
    "end": "164849"
  },
  {
    "text": "first iteration of this code there will be no async and a wait it's just going to be straight-up dependency",
    "start": "164849",
    "end": "169980"
  },
  {
    "text": "injection this is just to establish the baseline sort of you know describe what's the problem that we're trying to",
    "start": "169980",
    "end": "176159"
  },
  {
    "text": "solve so the core logic is we be modeled by this method here called try accept",
    "start": "176159",
    "end": "182879"
  },
  {
    "text": "and the idea is that it takes a reservation is input that's the json data or the the data for mediation",
    "start": "182879",
    "end": "188609"
  },
  {
    "text": "document that's embedded in this little object here and then it returns a",
    "start": "188609",
    "end": "194189"
  },
  {
    "text": "notable end so what's what does that imply well the int is a reservation ID so if you get an",
    "start": "194189",
    "end": "201719"
  },
  {
    "text": "integer that means you have a reservation ID that means you have a reservation you can probably use that",
    "start": "201719",
    "end": "206939"
  },
  {
    "text": "you know integer to go and this you know use it in other parts of a website or whatever to modify your reservation or",
    "start": "206939",
    "end": "213959"
  },
  {
    "text": "cancel it stuff like that it's probably gonna be embedded in a URL somewhere but if you don't have an integer you don't",
    "start": "213959",
    "end": "220349"
  },
  {
    "text": "have a reservation that means we had to reject your reservation because we probably didn't have enough remaining",
    "start": "220349",
    "end": "225780"
  },
  {
    "text": "capacity so that's this is basically how we communicate back to the corner of this method you know how you know",
    "start": "225780",
    "end": "232560"
  },
  {
    "text": "whether or not we accepted the reservation this is the protocol of the method if we will so this is an instance",
    "start": "232560",
    "end": "238470"
  },
  {
    "text": "method on an object and this could be part of our domain model and since we're talking about dependency injection one",
    "start": "238470",
    "end": "244379"
  },
  {
    "text": "thing we can do with this thing is we can inject an i reservations repository so so this would be injected via the",
    "start": "244379",
    "end": "251970"
  },
  {
    "text": "constructor and I'm not showing the constructor here but it just comes with you the constructor gets saved to read-only property like this one and",
    "start": "251970",
    "end": "258599"
  },
  {
    "text": "that means we can access it now we can start to query the repository and say well give me all the reservations for",
    "start": "258599",
    "end": "263789"
  },
  {
    "text": "this particular date please and now we have a in a collection of reservations",
    "start": "263789",
    "end": "268889"
  },
  {
    "text": "and now we can do a sum of all the quantities and say here's a single number that's the number of reserved",
    "start": "268889",
    "end": "273900"
  },
  {
    "text": "seats we already have for that particular date and with that number then we can make a business decision",
    "start": "273900",
    "end": "279300"
  },
  {
    "text": "because if you also the capacity of the restaurant we can say well if the capacity is too little",
    "start": "279300",
    "end": "285130"
  },
  {
    "text": "compared to what is being rejected requested we'll have to reject the request by",
    "start": "285130",
    "end": "290860"
  },
  {
    "text": "returning null otherwise we can move on we'll just set and a flag is accepted to",
    "start": "290860",
    "end": "296710"
  },
  {
    "text": "true and then we can call repository but create with the reservation that creates",
    "start": "296710",
    "end": "302080"
  },
  {
    "text": "a row in the database it returns an integer that integer gets converted into an honorable image because that's just",
    "start": "302080",
    "end": "308289"
  },
  {
    "text": "something this sheesh our compiler does so that's fine that works so that's pretty straightforward now the call",
    "start": "308289",
    "end": "314789"
  },
  {
    "text": "abstraction right now in the domain model is the try accept method and we try to in you know model that explicitly",
    "start": "314789",
    "end": "321880"
  },
  {
    "text": "as an abstraction by having an interface called Maitre D' a Maitre D' is if you go into a real restaurant and ask them",
    "start": "321880",
    "end": "328060"
  },
  {
    "text": "whether they have a table you'll be interacting with someone called the maitre d or the role called the maitre d",
    "start": "328060",
    "end": "333460"
  },
  {
    "text": "at least in some restaurants so this is just a little attempt at doing some domain driven design and using the",
    "start": "333460",
    "end": "338680"
  },
  {
    "text": "ubiquitous language of the organization stuff like that right so at the boundary",
    "start": "338680",
    "end": "344319"
  },
  {
    "text": "of the system we need to figure out how do we compose these things so we could",
    "start": "344319",
    "end": "349690"
  },
  {
    "text": "have a post method sitting on a controller somewhere so you can have some sort of reservations controller you",
    "start": "349690",
    "end": "355210"
  },
  {
    "text": "can imagine something like that and we have a post method that receives a",
    "start": "355210",
    "end": "361539"
  },
  {
    "text": "reservation still that JSON object and it needs to return some sort of action we solved that's basically just an HTTP",
    "start": "361539",
    "end": "367539"
  },
  {
    "text": "response and again we can use dependency injection so we could say let's inject the and I'm a 2d object into this",
    "start": "367539",
    "end": "374169"
  },
  {
    "text": "controller class via the constructor again I'm not showing the constructor but the maitre d is available there as a",
    "start": "374169",
    "end": "381099"
  },
  {
    "text": "read-only property so it's pretty simple we can just call Maitre D' to try except that returns a novel int we know that",
    "start": "381099",
    "end": "387460"
  },
  {
    "text": "already we can test for null and we can say well let's return internal server error if if it's null and otherwise",
    "start": "387460",
    "end": "395320"
  },
  {
    "text": "we'll get the value out of the novel int and use that to call our little helper",
    "start": "395320",
    "end": "402460"
  },
  {
    "text": "method call okay so internal server error is a little helper method that we have that just returns an I action",
    "start": "402460",
    "end": "408340"
  },
  {
    "text": "result and you know don't worry if you don't know what that interface means but it's just like this is an implementation",
    "start": "408340",
    "end": "413910"
  },
  {
    "text": "that represents you know 500 internal server error that HTTP status code and",
    "start": "413910",
    "end": "418970"
  },
  {
    "text": "likewise the ok method is just a little helper method that returns an implementation of that interface that",
    "start": "418970",
    "end": "424590"
  },
  {
    "text": "represents 200 ok but you'll notice that we part of the API is you know contract",
    "start": "424590",
    "end": "430650"
  },
  {
    "text": "is that we return the reservation ID in this the body of the response in case",
    "start": "430650",
    "end": "436530"
  },
  {
    "text": "where things went well right so this is just a baseline just to you know get it",
    "start": "436530",
    "end": "442290"
  },
  {
    "text": "up and running the reservations repository here looks like this so you might say well ok so we all know that in",
    "start": "442290",
    "end": "449190"
  },
  {
    "text": "reality you know repositories that just we're just pretending that they're not databases but really they're just our",
    "start": "449190",
    "end": "454560"
  },
  {
    "text": "basis so we might as well just a call to the database but if it's a database we",
    "start": "454560",
    "end": "460890"
  },
  {
    "text": "say well but that's you know I oh so that might be nice to do this with you",
    "start": "460890",
    "end": "466140"
  },
  {
    "text": "know asynchronous because that might be better it might be more performant may be more efficient so how do you turn",
    "start": "466140",
    "end": "472980"
  },
  {
    "text": "this into an asynchronous API well you change the return types into tasks okay",
    "start": "472980",
    "end": "479670"
  },
  {
    "text": "I think this is a leaky abstraction because you know according to the",
    "start": "479670",
    "end": "485580"
  },
  {
    "text": "dependency inversion principle it's the client who gets to decide what the interface looks like and the client is",
    "start": "485580",
    "end": "491220"
  },
  {
    "text": "their Maitre D' class that has this try/except method it gets to decide what",
    "start": "491220",
    "end": "496230"
  },
  {
    "text": "the what the interface looks like based on what it needs it doesn't need these things to be tasks",
    "start": "496230",
    "end": "502380"
  },
  {
    "text": "it went you know it did quite well just with the non tasks you know that it",
    "start": "502380",
    "end": "509850"
  },
  {
    "text": "had before so we're letting an implementation detail leak through into our abstractions which is where we're",
    "start": "509850",
    "end": "517830"
  },
  {
    "text": "not supposed to do that is it a big deal nah maybe not we can just add you know",
    "start": "517830",
    "end": "526560"
  },
  {
    "text": "async and await various places that basically solves most of the problems but we have to change the return type to",
    "start": "526560",
    "end": "533130"
  },
  {
    "text": "tasks of null Burland as well and this breaks something else because by changing the return type it no longer",
    "start": "533130",
    "end": "539640"
  },
  {
    "text": "occupy us because the interface didn't you know define try except like that so",
    "start": "539640",
    "end": "544980"
  },
  {
    "text": "we also have to go and to the I'm a to the interface and change the return type here as well",
    "start": "544980",
    "end": "550100"
  },
  {
    "text": "so I think this is even more leaky because you know sort of I thought I can",
    "start": "550100",
    "end": "556320"
  },
  {
    "text": "sort of accept that a repository interface everyone knows any repository so I really just started basis so that's",
    "start": "556320",
    "end": "561540"
  },
  {
    "text": "you know that there a sink okay fair enough yeah it's not really much of an",
    "start": "561540",
    "end": "566790"
  },
  {
    "text": "abstraction anyway but this is supposed to be an abstraction it was some domain",
    "start": "566790",
    "end": "572130"
  },
  {
    "text": "model and why does it have to be asynchronous why why is a business rule",
    "start": "572130",
    "end": "577520"
  },
  {
    "text": "asynchronous that's weird but we have to you know just accept that that's the",
    "start": "577520",
    "end": "582600"
  },
  {
    "text": "fact and move on so we'll change the return type here as well and we can go to the post method now and say well okay",
    "start": "582600",
    "end": "587970"
  },
  {
    "text": "let's fix whatever compiler errors we have here as well it's just at the awake keyword change the return type now and",
    "start": "587970",
    "end": "594540"
  },
  {
    "text": "one of the modern web frameworks from you know that's on net they natively",
    "start": "594540",
    "end": "600089"
  },
  {
    "text": "understand tasks so at this point we're probably good so this would work and this this may be better perhaps we don't",
    "start": "600089",
    "end": "607830"
  },
  {
    "text": "know which you should measure but it might be better it's worth a try right",
    "start": "607830",
    "end": "613100"
  },
  {
    "text": "but I think it's a there are some leaky abstractions going on here and and again you say well do we care or is it just a",
    "start": "613100",
    "end": "621540"
  },
  {
    "text": "small price to pay for a lot of you know better functionality and maybe it's okay",
    "start": "621540",
    "end": "627529"
  },
  {
    "text": "it seems like we have to be a sink all the way that's nothing new in this you know you've probably heard this a",
    "start": "627529",
    "end": "633779"
  },
  {
    "text": "thousand times already this is a you know known best practice about you know tasks you know based programming that you have",
    "start": "633779",
    "end": "640260"
  },
  {
    "text": "to be a single the way it's like dependency injection you have to do di all the way it seems like there's no",
    "start": "640260",
    "end": "647370"
  },
  {
    "text": "other way you have to do it like that and whenever people tell me something",
    "start": "647370",
    "end": "652860"
  },
  {
    "text": "like that I'm sort of like oh really because I like assertions like those",
    "start": "652860",
    "end": "658829"
  },
  {
    "text": "because it just says one counterexample to prove it wrong and I can come up with",
    "start": "658829",
    "end": "664320"
  },
  {
    "text": "such a counter example and it's not like you know what I'm just gonna show you next is necessarily better I think it",
    "start": "664320",
    "end": "671130"
  },
  {
    "text": "would be fairly pragmatic to just use async and wait like I just showed you and I might choose that myself",
    "start": "671130",
    "end": "677640"
  },
  {
    "text": "you know from time to time for pragmatic reasons everyone understands how that works but it's",
    "start": "677640",
    "end": "683500"
  },
  {
    "text": "always interesting to know that there's another option because if you know about options you have you can make better",
    "start": "683500",
    "end": "689440"
  },
  {
    "text": "decisions so I'm not here to sell you on some sort of exotic way to do things instead of the way that everyone",
    "start": "689440",
    "end": "696430"
  },
  {
    "text": "understands I'm just here to give you another option and then you can choose whether or not you think it's interesting so I'm not I'm not here to",
    "start": "696430",
    "end": "702520"
  },
  {
    "text": "push anything down your throat all right so let's pack that aside for a while and then go to a completely different or",
    "start": "702520",
    "end": "708610"
  },
  {
    "text": "maybe frequently asked question and that is how do I get the value out of my monad now I'm not assuming you know what",
    "start": "708610",
    "end": "715000"
  },
  {
    "text": "a mole that is we'll cover that as we go along but this is a question that seems",
    "start": "715000",
    "end": "720010"
  },
  {
    "text": "to often come up and the short answer is mu a mu something like that spelled like",
    "start": "720010",
    "end": "727660"
  },
  {
    "text": "this this is a concept in Zen Buddhist philosophy where it sometimes comes up",
    "start": "727660",
    "end": "733780"
  },
  {
    "text": "and basically means something like null on you know nothing or you know it's often interpreted as unasked the",
    "start": "733780",
    "end": "740860"
  },
  {
    "text": "question for a Western perspective of this you could do worse with your time and then reading zen and the art of",
    "start": "740860",
    "end": "746740"
  },
  {
    "text": "motorcycle maintenance or gödel Escher Bach is also a good book there's a - western books that both talk about this",
    "start": "746740",
    "end": "752980"
  },
  {
    "text": "you know the concepts of MU from the Zen Buddhist philosophy but basically it",
    "start": "752980",
    "end": "758920"
  },
  {
    "text": "means the question implies some things are there some implicit assumptions",
    "start": "758920",
    "end": "764560"
  },
  {
    "text": "being made in that question that makes it actually nonsensical so you can't really answer the question because it's",
    "start": "764560",
    "end": "770890"
  },
  {
    "text": "you know it's based on some assumptions fundamental assumptions that are wrong so this often happens when you you know",
    "start": "770890",
    "end": "777850"
  },
  {
    "text": "when you're beginner with a new piece of technology it happens to me all the time so at least to this this situation",
    "start": "777850",
    "end": "783040"
  },
  {
    "text": "called the X Y problem or sort of questions that are you know based on",
    "start": "783040",
    "end": "788830"
  },
  {
    "text": "this sort of phenomenon this is a phenomenon that's so common on Stack Overflow that that's actually a fact for",
    "start": "788830",
    "end": "794560"
  },
  {
    "text": "it so basically what it means is that often people would ask you know how you know they would ask sorry it would ask how do",
    "start": "794560",
    "end": "800920"
  },
  {
    "text": "I do X but really you know if you try to try to you know dive into you know what is that you try to do it turns out that",
    "start": "800920",
    "end": "807490"
  },
  {
    "text": "people are trying to do Y and they have a plan for how they want to achieve that",
    "start": "807490",
    "end": "812680"
  },
  {
    "text": "and that plan involves a series of steps and they think they know most of the steps but they stuck on X they can't",
    "start": "812680",
    "end": "819550"
  },
  {
    "text": "figure out how to do X and when you can unravel all of this stuff and you can",
    "start": "819550",
    "end": "825009"
  },
  {
    "text": "finally you know figure out oh you're trying to do Y then you shouldn't be doing X at all you should be doing set",
    "start": "825009",
    "end": "831610"
  },
  {
    "text": "and that will lead you to why there's a completely different way to think about some things and that often happens with",
    "start": "831610",
    "end": "837249"
  },
  {
    "text": "monads right so how do I get the value out of my monad well you don't but",
    "start": "837249",
    "end": "844389"
  },
  {
    "text": "that's not very useful so let's see what do you do instead let's try to look at that but first what's a monad I'm not",
    "start": "844389",
    "end": "850899"
  },
  {
    "text": "assuming you know what that is well a monad is a function you can flatten okay very helpful what's a functor so we'll have to start",
    "start": "850899",
    "end": "858129"
  },
  {
    "text": "there the function is a data container it's not a java container it's not a",
    "start": "858129",
    "end": "864579"
  },
  {
    "text": "dependency injection container you know it's not a shipping container it's just a data structure you know that can",
    "start": "864579",
    "end": "870790"
  },
  {
    "text": "contain some sort of value you know simple values objects whatever so we can",
    "start": "870790",
    "end": "877360"
  },
  {
    "text": "just represent that by a rectangle and more specifically about a function is",
    "start": "877360",
    "end": "883089"
  },
  {
    "text": "it's a tart a container that supports what we call a structure preserving map or a structure preserving projection and",
    "start": "883089",
    "end": "889959"
  },
  {
    "text": "what that means is that we can project or somehow transform the contents of the",
    "start": "889959",
    "end": "895389"
  },
  {
    "text": "input container into some other type of contents in a similar-looking container so this the most easy to understand",
    "start": "895389",
    "end": "902740"
  },
  {
    "text": "example of this is with if you know the container just contains some values and that that would be a collection so it",
    "start": "902740",
    "end": "908829"
  },
  {
    "text": "doesn't have to be numbers but a collection is a container of values not",
    "start": "908829",
    "end": "914920"
  },
  {
    "text": "only collections you know lists ienumerable of T are a whatever is sort of collection like so what you can do",
    "start": "914920",
    "end": "921759"
  },
  {
    "text": "with this is you can apply a function to each element in a collection like adding one to it and then you get a new",
    "start": "921759",
    "end": "926980"
  },
  {
    "text": "collection you can also transform them into strings and you get a collection of strings or you could try to decide",
    "start": "926980",
    "end": "933490"
  },
  {
    "text": "whether they're even or odd and then you get a collection of boolean values so notice particularly with the last",
    "start": "933490",
    "end": "940089"
  },
  {
    "text": "example here is that it it's very specifically ghost false false false true true false why does it have that",
    "start": "940089",
    "end": "945920"
  },
  {
    "text": "order to it well it's because it's determined by the order of the input collection so what we mean by having a",
    "start": "945920",
    "end": "951829"
  },
  {
    "text": "structure preserving projection or a structure structure preserving map is exactly that there's a structure to a",
    "start": "951829",
    "end": "957380"
  },
  {
    "text": "collection it has a specific size and it has to specifically order to the elements and that structure must be",
    "start": "957380",
    "end": "963680"
  },
  {
    "text": "preserved when we do the projections which is the case here so that's all good either other functors so",
    "start": "963680",
    "end": "970639"
  },
  {
    "text": "collections are functors is a very specific example of a function a function is a much more broader abstract",
    "start": "970639",
    "end": "977540"
  },
  {
    "text": "term we'll see some other examples later on and what is what the structure you know implies for a particular tart a",
    "start": "977540",
    "end": "984019"
  },
  {
    "text": "container depends on that container but for you know collections it's that it has it you know that we preserve the",
    "start": "984019",
    "end": "990260"
  },
  {
    "text": "length and the order of things right so another thing we might notice is that",
    "start": "990260",
    "end": "995899"
  },
  {
    "text": "the output of doing such a projection is itself a collection it's itself a Tartar",
    "start": "995899",
    "end": "1000910"
  },
  {
    "text": "container and that means we can use it as a second you know as an input for a",
    "start": "1000910",
    "end": "1006220"
  },
  {
    "text": "new step so we could do something like this this can often be quite useful",
    "start": "1006220",
    "end": "1013000"
  },
  {
    "text": "because this enables us to do decoupling of various different steps so we can define a step over here and a step over",
    "start": "1013000",
    "end": "1019779"
  },
  {
    "text": "here and then finally we can sort of chain them all together some people call that sort of you know pipeline style of",
    "start": "1019779",
    "end": "1025209"
  },
  {
    "text": "programming so that's good so often when we talk about structure preserving maps",
    "start": "1025209",
    "end": "1031240"
  },
  {
    "text": "you know in in many languages that operation is actually called map you know it's it's a function called map or",
    "start": "1031240",
    "end": "1037178"
  },
  {
    "text": "it's a method called Maps something like that but it's not in c-sharp you know in c-sharp you could start with an array like this one and if you want to do a",
    "start": "1037179",
    "end": "1043780"
  },
  {
    "text": "projection you use the Select method and so this adds once to the number you can",
    "start": "1043780",
    "end": "1049419"
  },
  {
    "text": "call select again to turn things into strings and you get this array out of it you probably know this already so I'm",
    "start": "1049419",
    "end": "1054970"
  },
  {
    "text": "just trying to you know turn you know a foreign look a foreign sounding word",
    "start": "1054970",
    "end": "1061450"
  },
  {
    "text": "like functor into something you already know so this is an example of a functor it's just like you know you don't see",
    "start": "1061450",
    "end": "1067510"
  },
  {
    "text": "much microsoft documentation actually explicitly telling you that collections and all the link methods like select",
    "start": "1067510",
    "end": "1074080"
  },
  {
    "text": "that they're based on this concept of a functor but they are okay so that's one example",
    "start": "1074080",
    "end": "1079800"
  },
  {
    "text": "so you'd say it's funny you know no one's you know seems to be asking the",
    "start": "1079800",
    "end": "1084910"
  },
  {
    "text": "question how do I get the value out of my collection everyone understands that's a nonsensical question so if you",
    "start": "1084910",
    "end": "1091450"
  },
  {
    "text": "knew that you know the collections if you knew that that is a functor and it's also a monad by the way if you knew that",
    "start": "1091450",
    "end": "1097750"
  },
  {
    "text": "you'd say why would anyone ever ask the question how do I get the value out of my monad and it's because you know often",
    "start": "1097750",
    "end": "1104890"
  },
  {
    "text": "people don't people aren't being told that you know collections are functions that collections are monad you know for",
    "start": "1104890",
    "end": "1111670"
  },
  {
    "text": "example this you sharp documentation doesn't talk about that so often the first time you run into the concept of a",
    "start": "1111670",
    "end": "1117310"
  },
  {
    "text": "monad is in a different context so maybe you run into the concept of a monad when",
    "start": "1117310",
    "end": "1123280"
  },
  {
    "text": "you start looking at other types of containers and here's a you know a collection of containers that you could",
    "start": "1123280",
    "end": "1129490"
  },
  {
    "text": "call scaler containers because all of these contain exactly one value they're",
    "start": "1129490",
    "end": "1135850"
  },
  {
    "text": "guaranteed to contain a value the value if you will so we start with an example",
    "start": "1135850",
    "end": "1141880"
  },
  {
    "text": "like Lacey of T so this is another generic type is it a functor well we can",
    "start": "1141880",
    "end": "1146890"
  },
  {
    "text": "make it a function it's not in the base class library but we could define a select method for it so we can make it",
    "start": "1146890",
    "end": "1153040"
  },
  {
    "text": "an extension method that takes a lacy of TS input and returns a lacy of T we solve this output and we need a function",
    "start": "1153040",
    "end": "1159490"
  },
  {
    "text": "you know from t2 to be solved in order to do that and it's just a one-liner to implement it you just return a newly a",
    "start": "1159490",
    "end": "1164980"
  },
  {
    "text": "sea of TV salt and you have a deferred lambda expressions sitting in there that just costs the selector on salted value",
    "start": "1164980",
    "end": "1171870"
  },
  {
    "text": "so it's pretty straightforward and this preserves the the invariance or this",
    "start": "1171870",
    "end": "1177490"
  },
  {
    "text": "structure of lacy because if you even if you do something like this that would be blocked for blocking for ten seconds you",
    "start": "1177490",
    "end": "1184210"
  },
  {
    "text": "know this returns immediately it gives you a lazy of Ind and and it's you immediately get that lace event and you",
    "start": "1184210",
    "end": "1191710"
  },
  {
    "text": "can project it you know you can call select on it to turn it into a lacy of string and that completes immediately as well so this preserves the structure of",
    "start": "1191710",
    "end": "1199840"
  },
  {
    "text": "lacy of end it preserves the invariance the invariant is that a lacy is lacy",
    "start": "1199840",
    "end": "1205270"
  },
  {
    "text": "that nothing happens until you force evaluation by calling value in which case it blocks for ten seconds so that's",
    "start": "1205270",
    "end": "1212880"
  },
  {
    "text": "the that's the protocol that's what you expect lacy of teen to do and select respects",
    "start": "1212880",
    "end": "1219360"
  },
  {
    "text": "that you know that behavior it preserves that behavior and when you call it again",
    "start": "1219360",
    "end": "1224760"
  },
  {
    "text": "you know you get answered back immediately so that select implementation is a",
    "start": "1224760",
    "end": "1230490"
  },
  {
    "text": "structure preserving map it's just mapping Lacy's instead of collections so lazy of T is a functor as well and you",
    "start": "1230490",
    "end": "1237570"
  },
  {
    "text": "can do the same thing with tasks of T it's just a little bit of a different implementation but the idea is the same",
    "start": "1237570",
    "end": "1242580"
  },
  {
    "text": "you know you can start a task like this was a minor task of Ind and it completes immediately and you can project it into",
    "start": "1242580",
    "end": "1249930"
  },
  {
    "text": "a task of string and it completes immediately but then if you are weighted it will probably block you know in this",
    "start": "1249930",
    "end": "1256770"
  },
  {
    "text": "example it probably will block because it's you know it's not going to take ten seconds to reach the third line of code",
    "start": "1256770",
    "end": "1262140"
  },
  {
    "text": "but if lots of other state things were happening in between it might actually return immediately because it's running",
    "start": "1262140",
    "end": "1267300"
  },
  {
    "text": "in the background thread and if you are weighted again it returns immediately so",
    "start": "1267300",
    "end": "1272340"
  },
  {
    "text": "again the Select transformation there preserves the invariance it it doesn't",
    "start": "1272340",
    "end": "1278430"
  },
  {
    "text": "change the way that you know a task is supposed to behave so it's all good now there could be some discussion of",
    "start": "1278430",
    "end": "1284670"
  },
  {
    "text": "whether tasks of T really is a functor monad but it's close enough that we'll just pretend that it is and move on I",
    "start": "1284670",
    "end": "1291060"
  },
  {
    "text": "can do all the things we can do with monads with tasks so well basically so that's that's pretty good all right so",
    "start": "1291060",
    "end": "1299190"
  },
  {
    "text": "you'll notice that you could consistently write X dot select like this and you know if X is an ienumerable",
    "start": "1299190",
    "end": "1306180"
  },
  {
    "text": "of T this would work then Y would be you know if X is either mobile of int that",
    "start": "1306180",
    "end": "1311250"
  },
  {
    "text": "this would be you know why would be ienumerable of string but if X is ienumerable of sorry if X is lazy of int",
    "start": "1311250",
    "end": "1318480"
  },
  {
    "text": "then Y would be lazy of string and so on so this works for all the different data",
    "start": "1318480",
    "end": "1324780"
  },
  {
    "text": "containers we've looked at so far so there's a common abstraction going on here and it's actually so well known",
    "start": "1324780",
    "end": "1329850"
  },
  {
    "text": "that these sheesh our compiler understands it so we could rewrite the code like this this is called query syntax and is it might be a little bit",
    "start": "1329850",
    "end": "1337110"
  },
  {
    "text": "surprising that we can come up with you know and say let's make lazy of Tia functor and now all of a sudden query",
    "start": "1337110",
    "end": "1342810"
  },
  {
    "text": "syntax is tax is possible even though you may not think that was actually built into the language and",
    "start": "1342810",
    "end": "1348660"
  },
  {
    "text": "the reason for that is because that query syntax is not built on any abstraction like ienumerable of T it is",
    "start": "1348660",
    "end": "1355679"
  },
  {
    "text": "built on the abstraction of a functor so if you have the right select method this",
    "start": "1355679",
    "end": "1361140"
  },
  {
    "text": "works all right so so that should cover",
    "start": "1361140",
    "end": "1366780"
  },
  {
    "text": "what a functor is now we need to figure out what a monad is so what's a monad it's a function you can flatten okay",
    "start": "1366780",
    "end": "1372900"
  },
  {
    "text": "what does that mean why are functors not flat already what does a V no means for a function not to",
    "start": "1372900",
    "end": "1378960"
  },
  {
    "text": "be flat so let's have a look at a couple of examples so I will start with a string and you know you can split",
    "start": "1378960",
    "end": "1385710"
  },
  {
    "text": "strings on certain characters so you could face I will spit on the comma like this and you can you know get the array",
    "start": "1385710",
    "end": "1392010"
  },
  {
    "text": "of strings foo and bar what if you have an array of strings like that and you",
    "start": "1392010",
    "end": "1398280"
  },
  {
    "text": "want to project them and you say for each of those strings I want to split them into other strings you can do that",
    "start": "1398280",
    "end": "1405120"
  },
  {
    "text": "but if you do it you get a nested array so this is an array of a race and maybe",
    "start": "1405120",
    "end": "1411179"
  },
  {
    "text": "sometimes you need this but often you'd want a flat one you don't want a nested array you want a flat array so what can",
    "start": "1411179",
    "end": "1417420"
  },
  {
    "text": "you do instead well you can call this method call select many and the reason why it's called select many is because",
    "start": "1417420",
    "end": "1422970"
  },
  {
    "text": "it's doing a select but the method that is doing you know actually producing the value split produces many values so you",
    "start": "1422970",
    "end": "1431730"
  },
  {
    "text": "have something that produces many value and you want to select over that while flatten as you go so that works and you",
    "start": "1431730",
    "end": "1438150"
  },
  {
    "text": "get a flat list out of it so select many if you can if you have a functor and you",
    "start": "1438150",
    "end": "1444870"
  },
  {
    "text": "can implement flatly select many so that you have a nested start of container and you can flatten it with select many if",
    "start": "1444870",
    "end": "1451440"
  },
  {
    "text": "that's possible then it's a monad this is what makes you know collections in in",
    "start": "1451440",
    "end": "1456690"
  },
  {
    "text": "in c-sharp Mona's so select many is basically the thing that makes the thing",
    "start": "1456690",
    "end": "1462570"
  },
  {
    "text": "a monad there's nothing not much more to it than that that's a little bit more but not much that's the basic concept",
    "start": "1462570",
    "end": "1468200"
  },
  {
    "text": "all right so let's let's look at another example then let's look at ask can tasks",
    "start": "1468200",
    "end": "1473370"
  },
  {
    "text": "being nested so let's see let's say we have a task of int X and we have another task of into Y and we want to add them",
    "start": "1473370",
    "end": "1480480"
  },
  {
    "text": "to and obviously we can use the async and await syntax in c-sharp but what if we",
    "start": "1480480",
    "end": "1486760"
  },
  {
    "text": "wanted to do you know to project them and use the in this new select method that we've written so we could do",
    "start": "1486760",
    "end": "1492670"
  },
  {
    "text": "something like this where we could say X dot select and that gives us the number inside of X so we can project over that",
    "start": "1492670",
    "end": "1499270"
  },
  {
    "text": "but then if we also want to get the number of you know inside of why we have to await that so we have to write it and",
    "start": "1499270",
    "end": "1505570"
  },
  {
    "text": "then you know an asynchronous lambda expression here and notice the return type it's a task of tasks of int it is a",
    "start": "1505570",
    "end": "1513280"
  },
  {
    "text": "nested task how do you get the value out of that well you can actually go a wait await Zed I was really surprised when I",
    "start": "1513280",
    "end": "1521020"
  },
  {
    "text": "saw you know I thought can I do this yes I can it's all Elaine it looks funny",
    "start": "1521020",
    "end": "1526330"
  },
  {
    "text": "doesn't it but it's possible it compiles it works but it's not what you want to",
    "start": "1526330",
    "end": "1531760"
  },
  {
    "text": "do that's that's odd isn't it so instead you know you could try to select many methods you know an extension method for",
    "start": "1531760",
    "end": "1538000"
  },
  {
    "text": "tasks of T as well I'm not going to show you how that is implemented it's fairly straightforward and you could google it",
    "start": "1538000",
    "end": "1543460"
  },
  {
    "text": "if you want to see how that looks like but if you do that you can now flatten as you go and now you have the Z just",
    "start": "1543460",
    "end": "1549730"
  },
  {
    "text": "being a normal task of end and you could even do query syntax so you could write it like this and now there's no more",
    "start": "1549730",
    "end": "1555850"
  },
  {
    "text": "easing and a wait apart from the await set towards the end there and this does",
    "start": "1555850",
    "end": "1560890"
  },
  {
    "text": "what you expect it to do so that's pretty neat so to summarize so far if",
    "start": "1560890",
    "end": "1569410"
  },
  {
    "text": "you have a Lacey of string you can get the value out of that you can access it by going dot value if you have a task of",
    "start": "1569410",
    "end": "1576910"
  },
  {
    "text": "string you can get the value out of it because you can await it and this is not even limited to C sharp if you in F",
    "start": "1576910",
    "end": "1583810"
  },
  {
    "text": "sharp you have something called async which is basically the same as as task and you can get the string out of an",
    "start": "1583810",
    "end": "1589330"
  },
  {
    "text": "async of string by calling async dot run synchronously on on it and even in",
    "start": "1589330",
    "end": "1594760"
  },
  {
    "text": "Haskell you have those scalar containers containers that contain just one thing and you can get the value out of those",
    "start": "1594760",
    "end": "1601360"
  },
  {
    "text": "containers in most cases so this is a common thing that you actually see there",
    "start": "1601360",
    "end": "1606610"
  },
  {
    "text": "is a subset of functors and there's a subset of monads that guarantee that",
    "start": "1606610",
    "end": "1612550"
  },
  {
    "text": "there's going to be one value inside of it and you can get to that value so if this is your introduction to",
    "start": "1612550",
    "end": "1618769"
  },
  {
    "text": "monads I can understand why someone would ask you know how do I get the value out of",
    "start": "1618769",
    "end": "1625100"
  },
  {
    "text": "my monad because there are monads where that question makes sense it makes sense for all of these but then there are",
    "start": "1625100",
    "end": "1630830"
  },
  {
    "text": "other monads where that question starts to you know",
    "start": "1630830",
    "end": "1635889"
  },
  {
    "text": "be not quite as reasonable so we could call those semis Gayla containers those",
    "start": "1635889",
    "end": "1641360"
  },
  {
    "text": "are containers that maybe they contain a value but they might also not contain a",
    "start": "1641360",
    "end": "1646580"
  },
  {
    "text": "value there's various ways to go about that we start with nullable of T because I think most c-sharp developers probably",
    "start": "1646580",
    "end": "1652159"
  },
  {
    "text": "know that already so it's also just called T question mark so is this a",
    "start": "1652159",
    "end": "1659090"
  },
  {
    "text": "functor well you can create a select method for it you can write one but before we do that let's just look at a",
    "start": "1659090",
    "end": "1665299"
  },
  {
    "text": "little bit of an example here so if we have you know an ID and honorable ID like this one just like we had before",
    "start": "1665299",
    "end": "1672350"
  },
  {
    "text": "with the reservations we we might say well okay well let's test for null and",
    "start": "1672350",
    "end": "1677480"
  },
  {
    "text": "if it's not null I know we can I can pull I can get the value out of out of",
    "start": "1677480",
    "end": "1682700"
  },
  {
    "text": "the variable there I can go I get our value and I can pass it in for example to a customer object that requires you",
    "start": "1682700",
    "end": "1689120"
  },
  {
    "text": "know customer ID as as input into its constructor so that's all fine but then you have this problem you know what do",
    "start": "1689120",
    "end": "1695090"
  },
  {
    "text": "you you need to also have an else branch what do you do in the else branch and this is where people often say well you",
    "start": "1695090",
    "end": "1701600"
  },
  {
    "text": "know I'm I don't really know exactly what's the right thing to return so I don't know what to do I'm throwing exception this and you know it's just",
    "start": "1701600",
    "end": "1710120"
  },
  {
    "text": "like it doesn't compose very well because now if you hide this deep inside some sort of helper method it's not",
    "start": "1710120",
    "end": "1715970"
  },
  {
    "text": "really visible to you well you know when you get to three layers away from it and you can't remember that that's what you",
    "start": "1715970",
    "end": "1721700"
  },
  {
    "text": "did and then you get surprised when all those exceptions get thrown and so on so it's not really a good way to design",
    "start": "1721700",
    "end": "1727700"
  },
  {
    "text": "code it'd be much nicer if we could just sort of you know keep on projecting or",
    "start": "1727700",
    "end": "1732710"
  },
  {
    "text": "doing structure preserving map inside of novel of T so it's not awful of T a functor well it is because we can",
    "start": "1732710",
    "end": "1740360"
  },
  {
    "text": "implement this neck method on it but you'll notice one thing though we have to add those",
    "start": "1740360",
    "end": "1746809"
  },
  {
    "text": "generic type constraints T must be a struct t resolve must be a struct and that is because normal of T itself is",
    "start": "1746809",
    "end": "1753869"
  },
  {
    "text": "defined in such a way that that only T must be you know a struct you know a value typed very type so yes",
    "start": "1753869",
    "end": "1762709"
  },
  {
    "text": "norm of T is a functor it is a function on a subset of alternate types that the",
    "start": "1762709",
    "end": "1769169"
  },
  {
    "text": "subset of value types so we can't do stuff like this where we say we haven't you know an honorable end and we can",
    "start": "1769169",
    "end": "1774779"
  },
  {
    "text": "project that into inaudible boo by occurring you know I select is even for example that actually works let's",
    "start": "1774779",
    "end": "1780059"
  },
  {
    "text": "compile so that's okay but you say well okay that would be really nice then what could we do the same thing with our you",
    "start": "1780059",
    "end": "1786809"
  },
  {
    "text": "know ID what if I have an ala Belen that's an ID could I just do ID dot select and then take my integer and",
    "start": "1786809",
    "end": "1793289"
  },
  {
    "text": "project that into a customer no this doesn't compile and doesn't compile",
    "start": "1793289",
    "end": "1798479"
  },
  {
    "text": "because customer is a reference type it's a class and it doesn't it doesn't satisfy that type constraint it must be",
    "start": "1798479",
    "end": "1804959"
  },
  {
    "text": "you know a value type so you sort of like ah and then you could argue maybe",
    "start": "1804959",
    "end": "1810509"
  },
  {
    "text": "we could say well but there's always null but now it has you know a whole pack of worms that we don't want to get",
    "start": "1810509",
    "end": "1817589"
  },
  {
    "text": "into right now but their knowledge really an evil evil language feature that should never have existed but we",
    "start": "1817589",
    "end": "1823559"
  },
  {
    "text": "really want to have a better way to communicate something that composers that maybe some things are there or",
    "start": "1823559",
    "end": "1829529"
  },
  {
    "text": "maybe they're not there we'd like something that like nullable of tea but just with the type constraint lifted",
    "start": "1829529",
    "end": "1835139"
  },
  {
    "text": "okay that exists but we have to you know as an F you know as a as an idea but we",
    "start": "1835139",
    "end": "1841049"
  },
  {
    "text": "have to implement it ourselves it's not part of the base class library now it's called maybe so we could create a class",
    "start": "1841049",
    "end": "1846749"
  },
  {
    "text": "called maybe of tea some languages also call it option so if you run into something called option of tea same",
    "start": "1846749",
    "end": "1853289"
  },
  {
    "text": "thing this plenty of different ways to implement a may be cathartic container",
    "start": "1853289",
    "end": "1859829"
  },
  {
    "text": "I'm just for this purpose I've chosen the one that's the easiest to explain this is not necessarily the best",
    "start": "1859829",
    "end": "1865769"
  },
  {
    "text": "implementation but this is the one that's the easiest to understand so we have two class views here we have a flag",
    "start": "1865769",
    "end": "1872219"
  },
  {
    "text": "called has item and we have you know a class field called item that is of the generic type T and then we have two",
    "start": "1872219",
    "end": "1878999"
  },
  {
    "text": "constructors we have a constructor takes no arguments and the only thing it does is that it sets the flag to false",
    "start": "1878999",
    "end": "1884730"
  },
  {
    "text": "and we have another constructor overloading item of the type t makes sure that it's",
    "start": "1884730",
    "end": "1890760"
  },
  {
    "text": "not null saves the item in the field and sets the flag to true so that's how we",
    "start": "1890760",
    "end": "1896880"
  },
  {
    "text": "initialize a maybe of T data container now this is a functor because we can",
    "start": "1896880",
    "end": "1903059"
  },
  {
    "text": "write a select method on it so you don't have to write select methods always as extension methods this is actually an",
    "start": "1903059",
    "end": "1908549"
  },
  {
    "text": "instance method on maybe of T so it just takes an argument that you know function",
    "start": "1908549",
    "end": "1914700"
  },
  {
    "text": "that we usually call the selector so how do we implement that well it's pretty straightforward you know if has item is true we know",
    "start": "1914700",
    "end": "1922770"
  },
  {
    "text": "that item is a proper value of the type T and type T that something of type T is",
    "start": "1922770",
    "end": "1929130"
  },
  {
    "text": "what we have to use as input for that selector function that returns a value of type T result and then we can use",
    "start": "1929130",
    "end": "1935760"
  },
  {
    "text": "that value of type T result as input into the maybe of T result constructor so that's a populated maybe and if we",
    "start": "1935760",
    "end": "1942929"
  },
  {
    "text": "don't have an item we just return and mate and you know an empty may be of T result so this is another structure preserving map because populated maybes",
    "start": "1942929",
    "end": "1950789"
  },
  {
    "text": "are always projected into populated populated maybes empty babies are always",
    "start": "1950789",
    "end": "1955950"
  },
  {
    "text": "projected into mt emei peas so this preserves the structure of there may be no matter whether it's populated or not",
    "start": "1955950",
    "end": "1962669"
  },
  {
    "text": "so it's a functor yay we can also creep me on a ride a select",
    "start": "1962669",
    "end": "1968549"
  },
  {
    "text": "many method that you know behaves correctly it's basically the same idea it's just well it's a little different",
    "start": "1968549",
    "end": "1975260"
  },
  {
    "text": "but it's pretty straightforward so maybe of T is also a monad yay so",
    "start": "1975260",
    "end": "1983100"
  },
  {
    "text": "let's just look at a simple example before we return back to the the async dependency injection takes an example so",
    "start": "1983100",
    "end": "1990049"
  },
  {
    "text": "often if you have a string and you want to pass it into something like an integer for example you'd have to call",
    "start": "1990049",
    "end": "1996510"
  },
  {
    "text": "you know into a try pass which is a horrible you know non composable api",
    "start": "1996510",
    "end": "2001700"
  },
  {
    "text": "whenever you need to use it you sort of like aah because you have some code that",
    "start": "2001700",
    "end": "2007400"
  },
  {
    "text": "flows nicely and all of a sudden you need to go oh I have to declare you know an out parameter even though you can now",
    "start": "2007400",
    "end": "2012980"
  },
  {
    "text": "with news language features sort of do it in line but still and then I have to test what the return value is and if it's true",
    "start": "2012980",
    "end": "2019130"
  },
  {
    "text": "what do I do and what do I do if it's false and I know everything is just all",
    "start": "2019130",
    "end": "2024230"
  },
  {
    "text": "of a sudden very ugly but it turns out that if you if you wrap that in a little",
    "start": "2024230",
    "end": "2029360"
  },
  {
    "text": "helper method that returns maybe event then all will be good because maybes are composable so you can do this you can",
    "start": "2029360",
    "end": "2037730"
  },
  {
    "text": "say well if inter try pass returns true then we will turn a new maybe of int that contains the integer so that's a",
    "start": "2037730",
    "end": "2043400"
  },
  {
    "text": "populated maybe and otherwise we'll just return an empty one and we can do the same thing for you know all sorts of",
    "start": "2043400",
    "end": "2049129"
  },
  {
    "text": "other things we want to pass like you know daytime for example so what you could do with stuff like this is you",
    "start": "2049130",
    "end": "2054139"
  },
  {
    "text": "imagine you have you know implementing a little car rental service and you want",
    "start": "2054140",
    "end": "2060980"
  },
  {
    "text": "to ask in your you want to ask the potential customer that you have you",
    "start": "2060980",
    "end": "2066139"
  },
  {
    "text": "know so from which state do you want to rent the car so that's what that collect",
    "start": "2066140",
    "end": "2072110"
  },
  {
    "text": "date method does it asks that question of the user and then user types in the answer I want to rent it from you know",
    "start": "2072110",
    "end": "2077840"
  },
  {
    "text": "the fourth of October and then you get a string and then you pass that string you call try pass try pass state with that",
    "start": "2077840",
    "end": "2084590"
  },
  {
    "text": "string and you're gonna maybe update time and then you ask the next question so far how many days three would you",
    "start": "2084590",
    "end": "2091370"
  },
  {
    "text": "like to rent the car and the user types in an answer and you get a string back and you pass that to try pass int and",
    "start": "2091370",
    "end": "2097370"
  },
  {
    "text": "you get you know a maybe of interact and then you probably ask some other questions as well but what you really",
    "start": "2097370",
    "end": "2103460"
  },
  {
    "text": "want would like to do is once you've collected all of those answers you'd like it you like to create a contract so",
    "start": "2103460",
    "end": "2109910"
  },
  {
    "text": "you say let's project this into a maybe of contracts and we can use query syntax",
    "start": "2109910",
    "end": "2115040"
  },
  {
    "text": "to do this so we'll say from D and MD so D is a date time a date time yeah just a",
    "start": "2115040",
    "end": "2123110"
  },
  {
    "text": "day time object there or value actually and then you can go from I in MI and I",
    "start": "2123110",
    "end": "2128750"
  },
  {
    "text": "is an integer and you can do it you know if you've collected other things you can compose those in as well and then",
    "start": "2128750",
    "end": "2134180"
  },
  {
    "text": "finally you can say select new contract and then you can just pass the all you know the value city that you've",
    "start": "2134180",
    "end": "2139280"
  },
  {
    "text": "collected so far and that produces a maybe of contract now the way this works",
    "start": "2139280",
    "end": "2144920"
  },
  {
    "text": "is that if if all of these maybes are populated then you'll get a populated maybe of contract",
    "start": "2144920",
    "end": "2151340"
  },
  {
    "text": "if one of these turn out to be empty the maybe of contract will be empty as well so it's sort of like a fast in a fairly",
    "start": "2151340",
    "end": "2158300"
  },
  {
    "text": "easy way to do some input validation and projections over those things there are more sophisticated ways you could do",
    "start": "2158300",
    "end": "2163850"
  },
  {
    "text": "this but it's actually often gets the work done pretty done pretty well so",
    "start": "2163850",
    "end": "2169130"
  },
  {
    "text": "what do we want to do though is you want to give the put you know your prospective customer a quote so you say",
    "start": "2169130",
    "end": "2177470"
  },
  {
    "text": "all right in order to give my customer quote I need to you know get the contract out of the maybe because the",
    "start": "2177470",
    "end": "2184190"
  },
  {
    "text": "contract has a method I can call to calculate the price so how do I get the contract out of the maybe and you might",
    "start": "2184190",
    "end": "2191330"
  },
  {
    "text": "try something like this let's say well if MC has item I can go MC dot item that",
    "start": "2191330",
    "end": "2197150"
  },
  {
    "text": "calculate price and now I have my quote except that this doesn't compile it",
    "start": "2197150",
    "end": "2202370"
  },
  {
    "text": "doesn't compile because has item and item are not publicly available well they are there but they're private and",
    "start": "2202370",
    "end": "2208070"
  },
  {
    "text": "this is a very deliberate design decision this is by design you are not supposed to be doing this you're not",
    "start": "2208070",
    "end": "2213890"
  },
  {
    "text": "supposed to pull the value out of the maybe and people try to do this all the",
    "start": "2213890",
    "end": "2219200"
  },
  {
    "text": "time because unfortunately most you know maybe implementations that I've seen do provide a way to do this and it they",
    "start": "2219200",
    "end": "2225710"
  },
  {
    "text": "ought not to I think it's about design if you do this so one of the problems",
    "start": "2225710",
    "end": "2230930"
  },
  {
    "text": "with this if this was possible was what if MC is empty what's what's going to be",
    "start": "2230930",
    "end": "2237110"
  },
  {
    "text": "the value of Q then it might be zero now you have a zero quote in your codebase",
    "start": "2237110",
    "end": "2244700"
  },
  {
    "text": "now what if someone you know can't really what if you have a lot of code and you don't see that and then later on",
    "start": "2244700",
    "end": "2251120"
  },
  {
    "text": "you just return Q and then you know sometimes you just return a zero price so you know you have someone say say",
    "start": "2251120",
    "end": "2257870"
  },
  {
    "text": "well I would like to rent a Ferrari for three months what's the price of that zero rendered cooking you know you don't",
    "start": "2257870",
    "end": "2267470"
  },
  {
    "text": "want that so um that's not the way to do it so let's let's try to start over what",
    "start": "2267470",
    "end": "2274640"
  },
  {
    "text": "what should we do instead well we can just do projections so what we can do is we can say let's do it",
    "start": "2274640",
    "end": "2280349"
  },
  {
    "text": "see that select and then inside of the select we can just called calculate price on the contract and that gives us",
    "start": "2280349",
    "end": "2285690"
  },
  {
    "text": "a maybe of decimal so this is safe this always works it works if FC is empty because then",
    "start": "2285690",
    "end": "2291779"
  },
  {
    "text": "nothing happens and it works if is if FC is populated because then you know we actually get a populated maybe of",
    "start": "2291779",
    "end": "2298229"
  },
  {
    "text": "decimal so basically the answer yeah how",
    "start": "2298229",
    "end": "2303960"
  },
  {
    "text": "do I get the value out of my monad in general you don't you inject the desired",
    "start": "2303960",
    "end": "2309180"
  },
  {
    "text": "behavior into the monad via the projections that's what's happening here we're sort of injecting that behavior or",
    "start": "2309180",
    "end": "2315150"
  },
  {
    "text": "that thing we're interested in we're just translating maybes will be staying within the maybe monad so so",
    "start": "2315150",
    "end": "2323640"
  },
  {
    "text": "that's the partial answer and then you probably go yeah but you know summary I",
    "start": "2323640",
    "end": "2329160"
  },
  {
    "text": "need to produce a result because I can't I can't put a maybe of something on my use of screen I need to put a quote on",
    "start": "2329160",
    "end": "2335309"
  },
  {
    "text": "the screen so how do I do that okay fair enough let's go back to collections for a moment you know sometimes you also",
    "start": "2335309",
    "end": "2341819"
  },
  {
    "text": "want to reduce a collection like this to a single number and maybe if you just want to add them together there's a",
    "start": "2341819",
    "end": "2347519"
  },
  {
    "text": "special purpose method for that that will just return a number so that's fine but what if you want to do something",
    "start": "2347519",
    "end": "2352950"
  },
  {
    "text": "else whatever you want to multiply all the numbers together well there's not a specialized you know method for that but",
    "start": "2352950",
    "end": "2358529"
  },
  {
    "text": "you can use a general-purpose one called aggregate so aggregate enables you to pass it a lambda expression that will",
    "start": "2358529",
    "end": "2364529"
  },
  {
    "text": "give you a pair of values and then you can say for each pair of values x and y are multiply x with y but you'll notice",
    "start": "2364529",
    "end": "2372719"
  },
  {
    "text": "that I've I've used an overload here that takes a seed and I've supplied the seed of one there's also an over note",
    "start": "2372719",
    "end": "2378749"
  },
  {
    "text": "that doesn't take a seed and the difference is that the other overload that doesn't take a seed doesn't handle",
    "start": "2378749",
    "end": "2384569"
  },
  {
    "text": "empty collections so if the collection was empty which this one is not I realize but if the collection was empty",
    "start": "2384569",
    "end": "2390690"
  },
  {
    "text": "you know it doesn't know what to do because it says well I know what to do if I have two values because I need to",
    "start": "2390690",
    "end": "2395969"
  },
  {
    "text": "multiply them and if I have one value I could just return it but if I have zero values I don't know what to do so bang",
    "start": "2395969",
    "end": "2401670"
  },
  {
    "text": "you throw some exception but by giving you a seed to handle the edge case this",
    "start": "2401670",
    "end": "2406739"
  },
  {
    "text": "is safer this by the way returns zero because there's a server in that list of numbers now we can do something similar",
    "start": "2406739",
    "end": "2414180"
  },
  {
    "text": "with our maybe of T data structure of data container so I'm not going to call",
    "start": "2414180",
    "end": "2420059"
  },
  {
    "text": "it accurate I've got a call it match for various other reasons but the idea is sort of the same we wanted to return a",
    "start": "2420059",
    "end": "2426569"
  },
  {
    "text": "value of the type T result even though this is actually maybe of T and the idea",
    "start": "2426569",
    "end": "2431819"
  },
  {
    "text": "is in you know similar to this seed value there's a Nothing value there which we will use if if the data",
    "start": "2431819",
    "end": "2439230"
  },
  {
    "text": "container is empty and then there's a function called just that is a little",
    "start": "2439230",
    "end": "2444930"
  },
  {
    "text": "projection function and the way we implement this is just with the ternary operator we say if we have an item we can call just on that item and you know",
    "start": "2444930",
    "end": "2453180"
  },
  {
    "text": "this is a maybe of T so item is of the type T calling Justin it returns a value",
    "start": "2453180",
    "end": "2458309"
  },
  {
    "text": "of T for souls so that matches that compiles and nothing is also of the type T results so that matches as well so",
    "start": "2458309",
    "end": "2465119"
  },
  {
    "text": "this is how you can sort of not pull the value out of them it may be but this is how you can aggregate the maybe so you",
    "start": "2465119",
    "end": "2470970"
  },
  {
    "text": "handle all H cases so again this is a much safer way to go about those things",
    "start": "2470970",
    "end": "2476240"
  },
  {
    "text": "so so let's go back to how do I combine the dependency injection with async and",
    "start": "2476240",
    "end": "2481650"
  },
  {
    "text": "a weight without leaky abstractions so we remember that we learned this thing",
    "start": "2481650",
    "end": "2486989"
  },
  {
    "text": "that it needs to be a sink all the way and the question is okay so is there",
    "start": "2486989",
    "end": "2492089"
  },
  {
    "text": "another way and there is a classic maneuver you can do if you're doing you know functional design you know",
    "start": "2492089",
    "end": "2498599"
  },
  {
    "text": "functional programming and that is to move the impure operations to the boundary of the system you will hear functional programmers say this all the",
    "start": "2498599",
    "end": "2504180"
  },
  {
    "text": "time and basically what it means it's just saying all the all the ugly things",
    "start": "2504180",
    "end": "2509460"
  },
  {
    "text": "that you know where you communicate with database oh you paint the UI something like that needs to sit in the shell of the",
    "start": "2509460",
    "end": "2515549"
  },
  {
    "text": "application if you will and then you have this nice domain logic core in the middle that doesn't know anything about",
    "start": "2515549",
    "end": "2521339"
  },
  {
    "text": "this nasty interactions with the outside world now this architecture is called port and adapters or hexagonal architecture or",
    "start": "2521339",
    "end": "2528029"
  },
  {
    "text": "onion architecture or something like that it has many names so well known",
    "start": "2528029",
    "end": "2533930"
  },
  {
    "text": "design principle even in object-oriented programming so so how do we do that how",
    "start": "2533930",
    "end": "2540269"
  },
  {
    "text": "do we move the impure operations to the boundary of the of the system well we",
    "start": "2540269",
    "end": "2545819"
  },
  {
    "text": "should probably think about what's an impure operation let's investigate that through a couple of",
    "start": "2545819",
    "end": "2551710"
  },
  {
    "text": "examples so in the try/except method here on the maitre d object there's two impure operations the first one is read",
    "start": "2551710",
    "end": "2558520"
  },
  {
    "text": "reservations now there's two ways an operation can be impure and the first",
    "start": "2558520",
    "end": "2564700"
  },
  {
    "text": "one is that if it's non-deterministic so we define determinism in such a way that",
    "start": "2564700",
    "end": "2570069"
  },
  {
    "text": "if we call the same method with the same argument it should return the same value",
    "start": "2570069",
    "end": "2575910"
  },
  {
    "text": "now querying a database doesn't do that you know you could call read reservations with the same date multiple",
    "start": "2575910",
    "end": "2582520"
  },
  {
    "text": "times and each time you do that it would return a new value it would return a new collection of reservations and we",
    "start": "2582520",
    "end": "2588700"
  },
  {
    "text": "understand why that happens that is because you know the state of the database changes okay fair enough so you",
    "start": "2588700",
    "end": "2594700"
  },
  {
    "text": "say but that's still deterministic yeah but it's just that we don't consider the state of the database to be part of the",
    "start": "2594700",
    "end": "2602500"
  },
  {
    "text": "method so therefore we could see that that to be done non-deterministic and the other impure operation is repository",
    "start": "2602500",
    "end": "2610240"
  },
  {
    "text": "create and it does another it performs another violation of purity and that is",
    "start": "2610240",
    "end": "2615250"
  },
  {
    "text": "it creates a row in the database so it produces a side-effect so in order for in operation to be pure it must you know",
    "start": "2615250",
    "end": "2623049"
  },
  {
    "text": "have no side-effects and must be deterministic and that's what we call referential transparency so we want to get rid of anything that is not",
    "start": "2623049",
    "end": "2629440"
  },
  {
    "text": "referring to the transparent that is not pure and these two things are not pure so we want to push them away we we don't",
    "start": "2629440",
    "end": "2635470"
  },
  {
    "text": "want to just not have them we still need these things to happen but we just want them to happen in another place which so",
    "start": "2635470",
    "end": "2643990"
  },
  {
    "text": "we'll try to figure out if we could just put push them one level out and that's just to demonstrate that it's possible",
    "start": "2643990",
    "end": "2649299"
  },
  {
    "text": "to do that right so let's start with the first one the top one here that's the",
    "start": "2649299",
    "end": "2655180"
  },
  {
    "text": "easiest one to do so in this case you will notice we unconditionally call rips up repository to read reservations so we",
    "start": "2655180",
    "end": "2661240"
  },
  {
    "text": "might just say I don't want to do that anymore you know if if anyone wants to call me then just give me that",
    "start": "2661240",
    "end": "2667960"
  },
  {
    "text": "information as a method argument problem solved that was pretty easy well one problem is",
    "start": "2667960",
    "end": "2674710"
  },
  {
    "text": "remaining though and that is you know even though that is see it causes some other more ugly",
    "start": "2674710",
    "end": "2679819"
  },
  {
    "text": "things to happen but sometimes things have to get worse before they can get better now the problem here is that we",
    "start": "2679819",
    "end": "2685520"
  },
  {
    "text": "have to change the IMA to the interface because otherwise it doesn't compile and you know I talked about before how",
    "start": "2685520",
    "end": "2692950"
  },
  {
    "text": "implementation details should not have any influence on how an interface is defined which is exactly what's",
    "start": "2692950",
    "end": "2699799"
  },
  {
    "text": "happening now so you definitely say this is a leaky abstraction this is not good",
    "start": "2699799",
    "end": "2705309"
  },
  {
    "text": "but just stay with me here because it turns out in the end it doesn't matter",
    "start": "2705309",
    "end": "2711799"
  },
  {
    "text": "so just trust me and say well we'll be editing this abstraction multiple times",
    "start": "2711799",
    "end": "2717319"
  },
  {
    "text": "but in the end yeah it'll all be irrelevant so let's see how that that",
    "start": "2717319",
    "end": "2723619"
  },
  {
    "text": "plays out so if we go back to the post method on our controller class we'll",
    "start": "2723619",
    "end": "2728630"
  },
  {
    "text": "need to figure out okay so how do we now interact with the maitre d object we have this injected I Maitre D' object",
    "start": "2728630",
    "end": "2735140"
  },
  {
    "text": "there now first of all we also need to have a second dependency we need to also inject the repository into the",
    "start": "2735140",
    "end": "2740960"
  },
  {
    "text": "controller because what we need to do is we need to call read reservations and now we have the reservation so that we",
    "start": "2740960",
    "end": "2746690"
  },
  {
    "text": "can call try accept and now we can just proceed as we did before the rest this is the same as before okay so that works",
    "start": "2746690",
    "end": "2751970"
  },
  {
    "text": "out pretty well so it's not that wasn't a difficult change we just move things around a little bit okay the other one",
    "start": "2751970",
    "end": "2758930"
  },
  {
    "text": "is a little bit harder how do we get rid of repositories or create how do we move that to the outer layer on how to how do",
    "start": "2758930",
    "end": "2765349"
  },
  {
    "text": "we move that to the caller now this is more difficult because this is a",
    "start": "2765349",
    "end": "2770839"
  },
  {
    "text": "conditional thing that happens it only happens in certain conditions because",
    "start": "2770839",
    "end": "2776059"
  },
  {
    "text": "there's also this early exit up there where it returns null where it says well we can't save anything into the database",
    "start": "2776059",
    "end": "2783020"
  },
  {
    "text": "because we are already sold out so this is actually one of the main reasons why",
    "start": "2783020",
    "end": "2789079"
  },
  {
    "text": "people often use object-oriented object-oriented often use you know",
    "start": "2789079",
    "end": "2794270"
  },
  {
    "text": "dependency injection in the first place because it sort of enables you",
    "start": "2794270",
    "end": "2799849"
  },
  {
    "text": "dependency injection enables you to separate your logic your decisions from",
    "start": "2799849",
    "end": "2805670"
  },
  {
    "text": "the side effects that they will have because if you had you know instead of having dependency inject you could have written directly into the",
    "start": "2805670",
    "end": "2811910"
  },
  {
    "text": "database here but then you wouldn't have separated your decision from the scientific that that decision courses so",
    "start": "2811910",
    "end": "2818240"
  },
  {
    "text": "by doing the benasi injection you could say well I'll make a decision and it looks like it has a side effect but it's",
    "start": "2818240",
    "end": "2824660"
  },
  {
    "text": "polymorphic so I could actually decide to not really touch the database but just have you know but mark or stop or",
    "start": "2824660",
    "end": "2831140"
  },
  {
    "text": "something like that for test purposes so this is how often how we would do it an object-oriented programming but in you",
    "start": "2831140",
    "end": "2838520"
  },
  {
    "text": "know functional programming for example this is not good because it's impure and it destroys the whole you know",
    "start": "2838520",
    "end": "2844220"
  },
  {
    "text": "referential transparency that functional programmers really like so we wouldn't like to do something like that what a",
    "start": "2844220",
    "end": "2850640"
  },
  {
    "text": "functional programmer would like to do is to say I will make the decision but then I will communicate my decision to",
    "start": "2850640",
    "end": "2856310"
  },
  {
    "text": "the caller and then it's up to the caller to course the side effect to happen so how do we communicate the",
    "start": "2856310",
    "end": "2864670"
  },
  {
    "text": "decision well we sort of know that already because we have this you know nullable of int and the protocol was if",
    "start": "2864670",
    "end": "2870980"
  },
  {
    "text": "you get an integer that means we have a reservation if you gotten all it means you had nothing so so we could do",
    "start": "2870980",
    "end": "2878420"
  },
  {
    "text": "something like that it'd be nice to say well you know ultimately if we don't call repository create we don't have any",
    "start": "2878420",
    "end": "2885110"
  },
  {
    "text": "integer to return though so maybe we should just return some sort of nullable of reservation but that's impossible",
    "start": "2885110",
    "end": "2892220"
  },
  {
    "text": "because you know we can return nullable of int we could write it like this as well but in general for novel of T we",
    "start": "2892220",
    "end": "2899960"
  },
  {
    "text": "have this type constraint that it can only be a struct so it works for int but",
    "start": "2899960",
    "end": "2905570"
  },
  {
    "text": "it doesn't work for reservation say so it'd be much better if we could use a",
    "start": "2905570",
    "end": "2910970"
  },
  {
    "text": "maybe of T because there's no constraint on maybe of T right so let's try to do",
    "start": "2910970",
    "end": "2916850"
  },
  {
    "text": "that as a first step let's just you know take the novel of int and you know refactor into a maybe of int and then we",
    "start": "2916850",
    "end": "2923570"
  },
  {
    "text": "can do an other refactoring after that so we'll go back to try accept and we'll change it to return a maybe event and",
    "start": "2923570",
    "end": "2929990"
  },
  {
    "text": "it's pretty straightforward because it's self returning no but just return an empty maybe event here and it down there",
    "start": "2929990",
    "end": "2935390"
  },
  {
    "text": "towards the bottom instead of returning you know just in an integer would return a maybe of Ind",
    "start": "2935390",
    "end": "2941110"
  },
  {
    "text": "with the idea inside of it so again that would cause us to change the I'm A to D",
    "start": "2941110",
    "end": "2946390"
  },
  {
    "text": "into interface definition but again let's not let's just pretend that that's not going to matter because it doesn't",
    "start": "2946390",
    "end": "2952300"
  },
  {
    "text": "if we go back to the post method we now have the return value is a maybe of Ind",
    "start": "2952300",
    "end": "2958050"
  },
  {
    "text": "so before we had this little null check and if we decided that the you know the",
    "start": "2958050",
    "end": "2964600"
  },
  {
    "text": "ID was not no we could take the value out of the ID by going ID value and but",
    "start": "2964600",
    "end": "2972880"
  },
  {
    "text": "this would amount to try to take the value out of the maybe which we can't by",
    "start": "2972880",
    "end": "2978130"
  },
  {
    "text": "design we're not supposed to do that so what do we do instead well we can call",
    "start": "2978130",
    "end": "2983740"
  },
  {
    "text": "match so I'm just going to call match here and you can you'll notice it says return match so the map remember match",
    "start": "2983740",
    "end": "2993130"
  },
  {
    "text": "is actually a generic narrative type method so the inferred generic type here",
    "start": "2993130",
    "end": "2998740"
  },
  {
    "text": "is I actually result so that means I'm just going to match on whatever is",
    "start": "2998740",
    "end": "3004200"
  },
  {
    "text": "inside of that maybe and then I'll need to return you know in all different",
    "start": "3004200",
    "end": "3010920"
  },
  {
    "text": "cases that I need to cover I need to return an action result so I'll just say in the nothing case I'm using named",
    "start": "3010920",
    "end": "3017250"
  },
  {
    "text": "arguments here in a nothing case I'm just going to return internal server error because that's an I action result",
    "start": "3017250",
    "end": "3022590"
  },
  {
    "text": "that Reese it represents 500 internal server error and in the just case I'm",
    "start": "3022590",
    "end": "3027690"
  },
  {
    "text": "just kind of writing a lambda expression that receives the integer that was inside the maybe and I'll call okay with",
    "start": "3027690",
    "end": "3034740"
  },
  {
    "text": "that integer so that looks pretty neat so this is also why the match method looks the way that it does instead of",
    "start": "3034740",
    "end": "3041160"
  },
  {
    "text": "just saying couldn't adjust you know if I have a maybe event could add couldn't just you know give you a default value",
    "start": "3041160",
    "end": "3046290"
  },
  {
    "text": "and then you would give me whatever is inside and you could give me the default value if you were empty but the reason",
    "start": "3046290",
    "end": "3052410"
  },
  {
    "text": "that knot doesn't always work is that you know for int for example what's the",
    "start": "3052410",
    "end": "3057720"
  },
  {
    "text": "good default value you know you could say what's zero but what if zero is actually a proper ID we don't know so",
    "start": "3057720",
    "end": "3064140"
  },
  {
    "text": "this is much safer to say well we'll just you know at the end we know how to deal with the empty value because that",
    "start": "3064140",
    "end": "3070440"
  },
  {
    "text": "will be you know an HTTP response that indicates an error",
    "start": "3070440",
    "end": "3075320"
  },
  {
    "text": "all right so we're now ready to get rid",
    "start": "3075500",
    "end": "3081000"
  },
  {
    "text": "of calling repository create when when if I delete this line of code I no longer have an ID you know I no longer",
    "start": "3081000",
    "end": "3087930"
  },
  {
    "text": "have an end so instead of returning a may be of interest be returning a may be a reservation but from that it's pretty",
    "start": "3087930",
    "end": "3095430"
  },
  {
    "text": "much pretty much the same so I'm communicating my decision the decision is the same it's a if the maybe is empty",
    "start": "3095430",
    "end": "3101849"
  },
  {
    "text": "it means I rejected the reservation if the maybe is populated it means I accepted the reservation it is now up to",
    "start": "3101849",
    "end": "3108210"
  },
  {
    "text": "the caller to deal with this this still means we have to change the I Maitre D'",
    "start": "3108210",
    "end": "3114030"
  },
  {
    "text": "but never mind that we now have a mate maybe a reservation but remember maybe",
    "start": "3114030",
    "end": "3119430"
  },
  {
    "text": "is a functor so what you can do is you could say let's go MDOT select and then",
    "start": "3119430",
    "end": "3125490"
  },
  {
    "text": "you know if there's something inside of that maybe we can go repository create and again this is safe this is kind of",
    "start": "3125490",
    "end": "3133050"
  },
  {
    "text": "run if it's populated and if it's not populated it's just kind of translate an empty maybe of reservation to an empty",
    "start": "3133050",
    "end": "3139619"
  },
  {
    "text": "maybe of int well you'd think this is a maybe event that it translates into but",
    "start": "3139619",
    "end": "3144809"
  },
  {
    "text": "actually it's a maybe of a task of an int and that's because of the asynchrony there it makes things a little bit more",
    "start": "3144809",
    "end": "3152059"
  },
  {
    "text": "clunky but we can deal with that it's not a big problem now we sort of have two monads stacked here because task is",
    "start": "3152059",
    "end": "3160079"
  },
  {
    "text": "a monad maybe it's a monad we have a stack of monads but it turns out that that's a moet as well so all this good",
    "start": "3160079",
    "end": "3166920"
  },
  {
    "text": "no problem right so we can match on that you know maybe of task of indus well",
    "start": "3166920",
    "end": "3173760"
  },
  {
    "text": "it's a it looks a little bit uglier now but we'll deal with that later on we'll make it pretty and i'm in five minutes",
    "start": "3173760",
    "end": "3180859"
  },
  {
    "text": "going back to try except though if an interesting thing has happened there's a",
    "start": "3181130",
    "end": "3187260"
  },
  {
    "text": "compiler warning that warning says this async method lacks await operators oh yeah it's no longer as asynchronous this",
    "start": "3187260",
    "end": "3195540"
  },
  {
    "text": "is a completely synchronous thing so let's get rid of all that asynchronous crap there you know I really didn't like",
    "start": "3195540",
    "end": "3202290"
  },
  {
    "text": "that my domain logic had to be asynchronous because why should it be but now it's no longer a synchronous all",
    "start": "3202290",
    "end": "3210689"
  },
  {
    "text": "the rest of the staff can still be asynchronous will change I am hid what",
    "start": "3210689",
    "end": "3215999"
  },
  {
    "text": "what does this change entail well we just have to remove that awake keyword and that's that all the things that have",
    "start": "3215999",
    "end": "3223529"
  },
  {
    "text": "to be asynchronous are still the synchronous the read reservation is reading from the database still is synchronous",
    "start": "3223529",
    "end": "3228900"
  },
  {
    "text": "you're writing to the database with create still asynchronous business logic not asynchronous doesn't have to be all",
    "start": "3228900",
    "end": "3236969"
  },
  {
    "text": "right come on other things that is that are interesting yeah you know try accept this Maitre D' object here no longer use",
    "start": "3236969",
    "end": "3245400"
  },
  {
    "text": "is the repository so we don't have need to have that dependency we can just you know remove it we're pretty close to",
    "start": "3245400",
    "end": "3252419"
  },
  {
    "text": "having what we would call a pure function now there's one thing missing that I'm just gonna skip over but it",
    "start": "3252419",
    "end": "3258479"
  },
  {
    "text": "actually mutates state it it sets that is accepted flag so it mutates the state of reservation this is something that is",
    "start": "3258479",
    "end": "3265709"
  },
  {
    "text": "fairly easy to refactor into something that is entirely referentially transparent but I'm not going to do that",
    "start": "3265709",
    "end": "3272699"
  },
  {
    "text": "right now because it's not really important so we just pretend that this is a pure function because it's good",
    "start": "3272699",
    "end": "3277979"
  },
  {
    "text": "enough it's close enough to being it's at least deterministic so going back to",
    "start": "3277979",
    "end": "3283650"
  },
  {
    "text": "the post method we might actually observe something interesting you say why do we have the I Maitre D' interface",
    "start": "3283650",
    "end": "3290849"
  },
  {
    "text": "why is that an interface Maitre D' is a pure function out the try/except is a",
    "start": "3290849",
    "end": "3296309"
  },
  {
    "text": "pure function or pretty close to anyway why do we have an interface to hide that away and and you would say maybe you say",
    "start": "3296309",
    "end": "3304140"
  },
  {
    "text": "well but you know with this because you know unit testing we need to control how it behaves yes but now it is entirely",
    "start": "3304140",
    "end": "3311640"
  },
  {
    "text": "deterministic you can control how it behaves just by passing the right arguments to it so there's no reason to",
    "start": "3311640",
    "end": "3317640"
  },
  {
    "text": "hide it behind an interface so let's throw away the the dependency and just create the object we need to know what",
    "start": "3317640",
    "end": "3323999"
  },
  {
    "text": "the capacity is but apart from that all is good so coming back to this thing and the reason why I told you that it's in",
    "start": "3323999",
    "end": "3330299"
  },
  {
    "text": "the end it doesn't matter is because we don't need that interface we can delete it so that's why I wasn't really very",
    "start": "3330299",
    "end": "3337619"
  },
  {
    "text": "concerned about what happened to that interface because it's gone so the only thing I want to do here is",
    "start": "3337619",
    "end": "3345660"
  },
  {
    "text": "just to clean up that coat a little bit because it looks it's not that pretty so through a series of steps that I",
    "start": "3345660",
    "end": "3353730"
  },
  {
    "text": "don't want to show you you can make it look much prettier so you might make it look like this so what we notice here is",
    "start": "3353730",
    "end": "3361050"
  },
  {
    "text": "that now we basically just have this you know sort of pipeline way of you know writing code where we start with one",
    "start": "3361050",
    "end": "3367560"
  },
  {
    "text": "method call and we just you know project via select into something else and then we select many into something else and",
    "start": "3367560",
    "end": "3374100"
  },
  {
    "text": "then we you know ultimately call match and that's what we return and so you'll notice it said select select going on",
    "start": "3374100",
    "end": "3381030"
  },
  {
    "text": "the select many going on so there's definitely a monad in action here and the Mon edits that is the task monad and",
    "start": "3381030",
    "end": "3387870"
  },
  {
    "text": "inside that task moment is a maybe monad by the way so it still it you know stack of monads but but that's okay but I",
    "start": "3387870",
    "end": "3394230"
  },
  {
    "text": "think the most important thing to realize here is that what we've done is exactly what we learned about monads how",
    "start": "3394230",
    "end": "3400380"
  },
  {
    "text": "do I get the value out of my monad well you don't you inject the behavior into the monad so what we've done here is",
    "start": "3400380",
    "end": "3405990"
  },
  {
    "text": "we're taking our domain logic which is not aware of any asynchrony at all",
    "start": "3405990",
    "end": "3412410"
  },
  {
    "text": "because it doesn't need asynchrony and we've just injected it into an asynchronous context and it's not aware",
    "start": "3412410",
    "end": "3418620"
  },
  {
    "text": "that it's running in an asynchronous context it doesn't need to be aware of it but all the rest of the things like",
    "start": "3418620",
    "end": "3424500"
  },
  {
    "text": "reading and writing to databases is done in a nice asynchronous way so we haven't",
    "start": "3424500",
    "end": "3431660"
  },
  {
    "text": "compromised any design ideals by doing it like this so that's basically the",
    "start": "3431660",
    "end": "3437310"
  },
  {
    "text": "answer to the question how do I combine dependency injection with a sink and a weight without leaky abstractions well",
    "start": "3437310",
    "end": "3443550"
  },
  {
    "text": "you inject the desired behavior into the async monad or the task monad or whatever you want to call it because we",
    "start": "3443550",
    "end": "3450000"
  },
  {
    "text": "know from the general our your question we had before you know how do I get the value out of my monad you don't you",
    "start": "3450000",
    "end": "3455730"
  },
  {
    "text": "inject the desired behavior into the monad so you could say this is behavior injection not dependency injection so so",
    "start": "3455730",
    "end": "3463410"
  },
  {
    "text": "that's what I have for you if you're interested in learning more block toploader DK has a lot of content that",
    "start": "3463410",
    "end": "3469620"
  },
  {
    "text": "relates to this already I have two articles that I wrote typically about the code that you have",
    "start": "3469620",
    "end": "3475359"
  },
  {
    "text": "shown you here today and it's those articles are written there in my publication queue they may take a month",
    "start": "3475359",
    "end": "3482980"
  },
  {
    "text": "or two before they actually get out but you could subscribe or you could follow me on twitter and then you'll know what when they're gonna be out but apart from",
    "start": "3482980",
    "end": "3490720"
  },
  {
    "text": "that you know that's that's basically what I'd like to say one thing though is",
    "start": "3490720",
    "end": "3496869"
  },
  {
    "text": "normally when I give talks like this I'll have I'd be happy to talk to all you know people who come up and want to",
    "start": "3496869",
    "end": "3503260"
  },
  {
    "text": "talk to me afterwards but I actually have another session at that's for 4/20",
    "start": "3503260",
    "end": "3508839"
  },
  {
    "text": "so I have to you know package down my stuff and run to that one but it's an open panel so you can come and ask me",
    "start": "3508839",
    "end": "3514869"
  },
  {
    "text": "questions there if you want to so really I would be delighted to see you but otherwise you know if you see me in the",
    "start": "3514869",
    "end": "3521289"
  },
  {
    "text": "floor you know today tomorrow or Friday you know just come and talk to me and I'll be happy to talk to you and hear",
    "start": "3521289",
    "end": "3526930"
  },
  {
    "text": "but if you have questions so you just want to chat that would be wonderful but for now I'll let you go and maybe",
    "start": "3526930",
    "end": "3532930"
  },
  {
    "text": "see some of you in the roommate on level 4 thank you all for coming [Applause]",
    "start": "3532930",
    "end": "3540330"
  }
]