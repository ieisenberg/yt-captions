[
  {
    "text": "hello I think we can start welcome everybody to my talk the today topic is",
    "start": "4040",
    "end": "9120"
  },
  {
    "text": "demystifying process add space hip stack and Beyond so uh some agenda first there",
    "start": "9120",
    "end": "17279"
  },
  {
    "text": "will be some short introduction then I will talk about the theory of process memory layout and operating systems and",
    "start": "17279",
    "end": "24359"
  },
  {
    "text": "at the end uh we will just analyze some process on Linux some practical example",
    "start": "24359",
    "end": "29720"
  },
  {
    "text": "there be time for questions at the end of the talk but if I'm if I say something incorrect or something wrong",
    "start": "29720",
    "end": "34960"
  },
  {
    "text": "feel free to interrupt me I'm sure there are a lot of people here who may know more about this topic than",
    "start": "34960",
    "end": "40920"
  },
  {
    "text": "me my name is P vinski I work at the QT company in Norway here in Oso I work for",
    "start": "40920",
    "end": "46719"
  },
  {
    "text": "the web assembly platform team which is the newest platform with support in the QT and in my free time I'm just trying",
    "start": "46719",
    "end": "52840"
  },
  {
    "text": "to understand how computer and live works and I think that's 99% of who I",
    "start": "52840",
    "end": "58480"
  },
  {
    "text": "am here my soci I don't really post much if anything but in this presentation I",
    "start": "58480",
    "end": "63879"
  },
  {
    "text": "will have a lot of links and references to external resources so if you want to click those links and follow them you",
    "start": "63879",
    "end": "70720"
  },
  {
    "text": "may need uh slides and the QR code will just take you to the P PDF with slides",
    "start": "70720",
    "end": "76520"
  },
  {
    "text": "okay so let's just Define what this stock is about given a very simple scenario we have a program a binary",
    "start": "76520",
    "end": "84040"
  },
  {
    "text": "let's assume in EF format and we have operating system and when the operating",
    "start": "84040",
    "end": "89079"
  },
  {
    "text": "system starts a program it creates a process in the memory and a process is",
    "start": "89079",
    "end": "94240"
  },
  {
    "text": "just an instance of a running program and this process has a very specific",
    "start": "94240",
    "end": "99640"
  },
  {
    "text": "structure and very specific layout in the memory and this is the topic of",
    "start": "99640",
    "end": "104680"
  },
  {
    "text": "entire talk so before I started diving into this topic I had a very simple mental",
    "start": "104680",
    "end": "110600"
  },
  {
    "text": "model which was mainly enough but I feel like it's lacking a little bit so if",
    "start": "110600",
    "end": "115719"
  },
  {
    "text": "this is a process layout space I was thinking okay we have a program which comes which has instructions that we",
    "start": "115719",
    "end": "122640"
  },
  {
    "text": "execute on CPU so we must have a code section somewhere probably at the bottom",
    "start": "122640",
    "end": "128239"
  },
  {
    "text": "then we have the data sections for example we have the Hep we have the stack and I've been always told that the",
    "start": "128239",
    "end": "134360"
  },
  {
    "text": "stack is at the top and it grown downwards for some reason so I guess stack is at the top then if we have the",
    "start": "134360",
    "end": "140720"
  },
  {
    "text": "stack we must have the hip and there's no much space left for the hip so I guess it's somewhere in the middle and",
    "start": "140720",
    "end": "146920"
  },
  {
    "text": "if we think more about it then we also have some third party light liaries like we have STD Library we have some other",
    "start": "146920",
    "end": "153280"
  },
  {
    "text": "Frameworks that we use so I guess they must occupy some free space because we need to have them in our add space in",
    "start": "153280",
    "end": "160519"
  },
  {
    "text": "order to call their functions if we refer to the function by pointer or something we need to have this pointer",
    "start": "160519",
    "end": "165879"
  },
  {
    "text": "accessible in our in our memory process space and a short disclaimer do I need",
    "start": "165879",
    "end": "172800"
  },
  {
    "text": "to know all this as a software engineer I think the answer is very simple I think if you are not working on Linux",
    "start": "172800",
    "end": "178800"
  },
  {
    "text": "carel on operating system and even then you probably don't need to know this so",
    "start": "178800",
    "end": "184519"
  },
  {
    "text": "if you don't know this or are not interested in this please don't feel guilty it's not going to change your job",
    "start": "184519",
    "end": "189840"
  },
  {
    "text": "it's it's just interesting to know that's what I believe but if you just want to rely on simple",
    "start": "189840",
    "end": "195720"
  },
  {
    "text": "models it's not an obligation to know all these details this talk will be mainly about the implementation details",
    "start": "195720",
    "end": "201920"
  },
  {
    "text": "of operating systems pretty much so we talk about the memory and when we think",
    "start": "201920",
    "end": "207360"
  },
  {
    "text": "about the memory in terms of the computer there are basically two ways we can think about memory we can take the",
    "start": "207360",
    "end": "213879"
  },
  {
    "text": "blue pill and get the very comforting illusion of virtual memory which is just",
    "start": "213879",
    "end": "219319"
  },
  {
    "text": "abstraction created for us programmers or we can take the red pill and we can",
    "start": "219319",
    "end": "224360"
  },
  {
    "text": "see the memory the physical memory where the pointer actually the address design",
    "start": "224360",
    "end": "230200"
  },
  {
    "text": "design designates the physical location somewhere on the hardware if we take the blue pill and we",
    "start": "230200",
    "end": "236239"
  },
  {
    "text": "look into the virtual memory illusion we have a very nice and comforting illusion of having having continuous block of",
    "start": "236239",
    "end": "243480"
  },
  {
    "text": "memory without any gaps the entire process space is available for our",
    "start": "243480",
    "end": "248560"
  },
  {
    "text": "process is a virtual memory so it can it's just a model it can be actually",
    "start": "248560",
    "end": "253599"
  },
  {
    "text": "bigger this space can be bigger than the physical memory that is available to the device and we're isolated from other",
    "start": "253599",
    "end": "260040"
  },
  {
    "text": "processes we cannot see the memory of other processes unless we use some interprocess",
    "start": "260040",
    "end": "265919"
  },
  {
    "text": "communication explicitly if we take the red pill it looks more like this this is the",
    "start": "265919",
    "end": "271880"
  },
  {
    "text": "physical memory reality and each color represents single process so this memory",
    "start": "271880",
    "end": "278520"
  },
  {
    "text": "has a very strict hierarchy and each leveling hierarchy differs from the next one by orders of",
    "start": "278520",
    "end": "284720"
  },
  {
    "text": "magnitude in terms of like memory access this memory is also fragmented",
    "start": "284720",
    "end": "290160"
  },
  {
    "text": "our program doesn't occupy the continuous space there's no isolation between the processes sometimes you can",
    "start": "290160",
    "end": "296360"
  },
  {
    "text": "move physically one bite higher or lower and you will meet the memory of other",
    "start": "296360",
    "end": "302000"
  },
  {
    "text": "process and part of this memory is specialized example the L1 cach the CPU",
    "start": "302000",
    "end": "307320"
  },
  {
    "text": "has a couple of caches usually three L1 L2 L3 and the L1 cach is splitted into",
    "start": "307320",
    "end": "314639"
  },
  {
    "text": "instruction part and data data part normally in Ram or hard drive we just",
    "start": "314639",
    "end": "320400"
  },
  {
    "text": "throw the program and the data together but on the L1 cach size on the L1 cach",
    "start": "320400",
    "end": "325759"
  },
  {
    "text": "level we have one part of cach strictly designed for the stock ing the data and one part strictly designed for storing",
    "start": "325759",
    "end": "333000"
  },
  {
    "text": "instruction and this has a fancy name of modified Hardware architecture which has",
    "start": "333000",
    "end": "339000"
  },
  {
    "text": "nothing to do with hardw by the way but that's how it's called I can actually check on my system",
    "start": "339000",
    "end": "345280"
  },
  {
    "text": "by using the command LS CPU which will show me information about",
    "start": "345280",
    "end": "350360"
  },
  {
    "text": "my CPU and if I look at the caches I can see that the cache L1 is splitted into",
    "start": "350360",
    "end": "358360"
  },
  {
    "text": "the D part and the High part data and",
    "start": "358360",
    "end": "362960"
  },
  {
    "text": "instruction okay going back we have this mapping between virtual and physical memory so virtual memory is continuous",
    "start": "363840",
    "end": "371800"
  },
  {
    "text": "but those parts of virtual memory those chunks which usually have a fixed size because those are called Pages virtual",
    "start": "371800",
    "end": "378160"
  },
  {
    "text": "Pages they are mapped to physical memory and they can be mapped to the physical memory the ram they can be m to the hard",
    "start": "378160",
    "end": "385319"
  },
  {
    "text": "drive so it's important to understand that if we move one page one kilobyte or",
    "start": "385319",
    "end": "390560"
  },
  {
    "text": "one byte higher or lower and we go through the page boundary this new page can be mapped",
    "start": "390560",
    "end": "397120"
  },
  {
    "text": "into totally different physical location and if it's not available in the primary memory then we cat the page fold then we",
    "start": "397120",
    "end": "403680"
  },
  {
    "text": "need to load the page from the hard drive okay so some disclaimers uh a lot of things I'll be",
    "start": "403680",
    "end": "410720"
  },
  {
    "text": "talking is very dependent on architecture and in this talk I will focus on x86",
    "start": "410720",
    "end": "417199"
  },
  {
    "text": "architecture I will be talking about virtual memory perspective but I think it's important to remember that there's a physical layer beneath it I will focus",
    "start": "417199",
    "end": "426360"
  },
  {
    "text": "on Linux and I will maybe I will use GDB with some plugin so if I run GDB and it",
    "start": "426360",
    "end": "433000"
  },
  {
    "text": "looks unfamiliar don't get confused it's just like a plugin that you could download to GDB because GDB is exposing",
    "start": "433000",
    "end": "438360"
  },
  {
    "text": "a python API so there are a lot of plugins to make the GDB more convenient to work with Okay so how big is this",
    "start": "438360",
    "end": "445960"
  },
  {
    "text": "process address space and we are focusing on the virtual add space on",
    "start": "445960",
    "end": "451800"
  },
  {
    "text": "x86 so in case for 32 bits we have naturally 2 to the power 32 bytes which",
    "start": "451800",
    "end": "458120"
  },
  {
    "text": "is 4 gabes and in case of 64 bits we have naturally not to the power of 64 we have",
    "start": "458120",
    "end": "465319"
  },
  {
    "text": "iday 2 to the^ 48 or 2 to the^ of 57 bytes which gives us respectively",
    "start": "465319",
    "end": "473000"
  },
  {
    "text": "256 terabytes or four petabytes so when I Sol this I think the natural question",
    "start": "473000",
    "end": "478960"
  },
  {
    "text": "is why are we not using two to the power of 64 on 64bit that seems like a natural choice right and this limit two to the",
    "start": "478960",
    "end": "487240"
  },
  {
    "text": "power of 64 is still a theoretical limit of architecture so the registers are not 48 long they're are 64 bit long but the",
    "start": "487240",
    "end": "496720"
  },
  {
    "text": "48 and 57 bits is just what current implementations are supporting for",
    "start": "496720",
    "end": "502599"
  },
  {
    "text": "practical reasons and by implementation I mean combination of both the hardware",
    "start": "502599",
    "end": "507800"
  },
  {
    "text": "and the software which is operating system so 48 bit addressing is pretty much a",
    "start": "507800",
    "end": "512919"
  },
  {
    "text": "default in mod Computing it has been introduced by MD in 2003 so more than 20",
    "start": "512919",
    "end": "519120"
  },
  {
    "text": "years ago it was the first 64bit CPU in x86 family and it 156 terabyt is quite a",
    "start": "519120",
    "end": "527080"
  },
  {
    "text": "lot of memory it's it was enough back then and still is so on most most computers you have 256 terabyt using 48",
    "start": "527080",
    "end": "535240"
  },
  {
    "text": "bits adding and then 57 bits of addressing is just introduced by Intel",
    "start": "535240",
    "end": "540720"
  },
  {
    "text": "for some specialized servers which require more than 256 terab of memory",
    "start": "540720",
    "end": "546600"
  },
  {
    "text": "and it actually is supported by current operating system like Linux Linux merch",
    "start": "546600",
    "end": "551720"
  },
  {
    "text": "dep patch in 2017 and Windows Server editions also support uh 40 57 bit",
    "start": "551720",
    "end": "558279"
  },
  {
    "text": "addressing but the key take AWS are in 42-bit architecture we use 42 bits for addressing in 64-bit architecture we use",
    "start": "558279",
    "end": "566399"
  },
  {
    "text": "48 bits for addressing if I go back to this",
    "start": "566399",
    "end": "571519"
  },
  {
    "text": "listing of lscpu and scroll up I can see the address size on my machine which is",
    "start": "571519",
    "end": "578000"
  },
  {
    "text": "48 bit virtual so yeah this is the default",
    "start": "578000",
    "end": "583079"
  },
  {
    "text": "pretty much here's some further reading if you are interested and we can",
    "start": "583079",
    "end": "590760"
  },
  {
    "text": "move to this so This proess add space we know how big it is so how it is organized at the top level so at the top",
    "start": "590760",
    "end": "597600"
  },
  {
    "text": "level it's divided into two parts the kernel space and the user space the user",
    "start": "597600",
    "end": "603240"
  },
  {
    "text": "space just contains the program that we are running so our program and the kernel space just",
    "start": "603240",
    "end": "608920"
  },
  {
    "text": "contains the operating system kernel and the switch between this happens whenever",
    "start": "608920",
    "end": "614240"
  },
  {
    "text": "we are cing the system call so our program run in user mode but then when we are calling some system call for",
    "start": "614240",
    "end": "620440"
  },
  {
    "text": "input output operation or for some other stuff then we switch to the kernel mode which switches the hardware mode of the",
    "start": "620440",
    "end": "626880"
  },
  {
    "text": "CPU and it also loads the parel space and I think people always maybe",
    "start": "626880",
    "end": "633240"
  },
  {
    "text": "not always but often underestimate how many system calls programs are doing",
    "start": "633240",
    "end": "638560"
  },
  {
    "text": "let's maybe do a little bit of",
    "start": "638560",
    "end": "642279"
  },
  {
    "text": "demo I have very simple program",
    "start": "644000",
    "end": "648480"
  },
  {
    "text": "here let's guess how many system calls this program will do it's just printing",
    "start": "649639",
    "end": "654959"
  },
  {
    "text": "hello n DC Tech down who thinks it will do between zero and 10 system calls raise your",
    "start": "654959",
    "end": "661040"
  },
  {
    "text": "hand okay we have one hand two hands",
    "start": "661040",
    "end": "667480"
  },
  {
    "text": "huh yes H I would just do the EST TR and",
    "start": "667480",
    "end": "673880"
  },
  {
    "text": "this this will be my command because EST is this command in Linux which can measure the system calls which will show",
    "start": "673880",
    "end": "680200"
  },
  {
    "text": "you the system call done by the process I will do the S then this program and we'll see how many system calls it does okay who thinks it's between 10 and",
    "start": "680200",
    "end": "688240"
  },
  {
    "text": "50 okay a little bit more and who thinks is more than 50 okay I think okay let's let's try it",
    "start": "688240",
    "end": "696680"
  },
  {
    "text": "so I compile it and then I use the",
    "start": "696680",
    "end": "703680"
  },
  {
    "text": "EST like this and it will show me all the system Cod that my program is doing",
    "start": "703680",
    "end": "709160"
  },
  {
    "text": "which is quite a lot I can count it by",
    "start": "709160",
    "end": "715160"
  },
  {
    "text": "a w c-l so with it's 37 calls and if we look at this a lot of those calls are",
    "start": "717120",
    "end": "723880"
  },
  {
    "text": "that's about setting the process it's about setting the memory for example xcv is how we start executing then we have",
    "start": "723880",
    "end": "732360"
  },
  {
    "text": "map then we have a lot of maps m maps are setting the memory for the process and just at the very end uh we have a",
    "start": "732360",
    "end": "739920"
  },
  {
    "text": "right command which is our print F which prints to the console so yeah 37 so",
    "start": "739920",
    "end": "746760"
  },
  {
    "text": "switching so a simple program can make a lot of system calls and switching between user mode and kernel mode is not",
    "start": "746760",
    "end": "753199"
  },
  {
    "text": "cheap because you need to you need to reload a new memory and switch the mode",
    "start": "753199",
    "end": "758800"
  },
  {
    "text": "of the CPU so usually you try to minimize the number of system cods you",
    "start": "758800",
    "end": "764680"
  },
  {
    "text": "do so on 32bit system when we have 4 gabt this split looks like this so on",
    "start": "765040",
    "end": "771199"
  },
  {
    "text": "Linux we have 3 gabt for user space and 1 gab for kernel space on Windows is usually half so 2 GB for the kernel and",
    "start": "771199",
    "end": "778519"
  },
  {
    "text": "2 GB for user mode and those are just the default so they can be configured on Windows you can configure by some Flack",
    "start": "778519",
    "end": "785399"
  },
  {
    "text": "when booting the windows I believe so you can always also achieve this 3 by one split on 30 64bit systems we have",
    "start": "785399",
    "end": "793959"
  },
  {
    "text": "split in just a half so 120 128 terabyt for kernel and 128",
    "start": "793959",
    "end": "801040"
  },
  {
    "text": "terabytes for user space both for wi Windows Linux and windows okay so",
    "start": "801040",
    "end": "806360"
  },
  {
    "text": "important question is why are we mapping the kernel and user into the same other space cannot we just split them like",
    "start": "806360",
    "end": "812560"
  },
  {
    "text": "what is the benefit and the benefit are performance reasons it's cheaper and mode switch and by mode switch it means",
    "start": "812560",
    "end": "819120"
  },
  {
    "text": "Kel and user mode switch it's cheaper the contact switch because the Kel can stay mapped so if we are switching",
    "start": "819120",
    "end": "825560"
  },
  {
    "text": "between the processes and each process holds the kernel in the same space which is not entirely true on mod operating",
    "start": "825560",
    "end": "831639"
  },
  {
    "text": "system but it's just idea then the kernel can stay mapped so it's cheaper",
    "start": "831639",
    "end": "836720"
  },
  {
    "text": "and it's less trashing tlb tlb is part of your Hardware that translates the virtual memory addresses into the",
    "start": "836720",
    "end": "842279"
  },
  {
    "text": "physical memory addresses this just a cache but important point for me was that it's not set in stone you don't",
    "start": "842279",
    "end": "848680"
  },
  {
    "text": "need to have kernel and user mode in the same space and actually there was a user and kernel separation in Linux there was",
    "start": "848680",
    "end": "855880"
  },
  {
    "text": "a patch in 2003 which was never merged but there were a couple of drro using it",
    "start": "855880",
    "end": "861480"
  },
  {
    "text": "and it was totally separating kernel and user space into two distinct user name",
    "start": "861480",
    "end": "867079"
  },
  {
    "text": "spaces add spaces so then the kernel had 4 gigabytes for itself and then user B",
    "start": "867079",
    "end": "872720"
  },
  {
    "text": "user space had 4 gigabytes as well how does it work on model Linux so",
    "start": "872720",
    "end": "878880"
  },
  {
    "text": "we still have everything in one user space but for security reason it's not entire kernel that is always mapped it",
    "start": "878880",
    "end": "887040"
  },
  {
    "text": "actually looks more like this this is solution called Linux KP",
    "start": "887040",
    "end": "892759"
  },
  {
    "text": "kpti which stands for Kel page table isolation and in kernel mode we have",
    "start": "892759",
    "end": "898839"
  },
  {
    "text": "what we had before we had entire kernel mapped and entire user space but when we switch to the user mode which is when",
    "start": "898839",
    "end": "905639"
  },
  {
    "text": "the program is executing then we only have a very minimum subset of Kernel being mapped into the M this done for",
    "start": "905639",
    "end": "912040"
  },
  {
    "text": "the security reasons and this kernel space is also randomized so it's not always into the same location and it",
    "start": "912040",
    "end": "919120"
  },
  {
    "text": "contains minimum amount of functions which are required for full switch to Kel mode so like entry exit",
    "start": "919120",
    "end": "927279"
  },
  {
    "text": "functions it does it by by having a separate page table so it's still one",
    "start": "927279",
    "end": "932680"
  },
  {
    "text": "address space but there are two separate page table describing those address space one page table is complete it has",
    "start": "932680",
    "end": "939560"
  },
  {
    "text": "full information for kernel mode and one page table has only this minimum subset of Kernel it provides some",
    "start": "939560",
    "end": "947040"
  },
  {
    "text": "isolation between user space and Kel space and it turns out it's a very good",
    "start": "947040",
    "end": "952399"
  },
  {
    "text": "measure against the Meltdown vulnerability it was introduced before the Meltdown but back then I think it",
    "start": "952399",
    "end": "958000"
  },
  {
    "text": "was optional now after meltdown it's turn on on Linux by default there's cost",
    "start": "958000",
    "end": "963959"
  },
  {
    "text": "to it because it degrades the performance you have two page tables so every time you switch between user mode and kernel mode you need to switch the",
    "start": "963959",
    "end": "970560"
  },
  {
    "text": "page tables which has a cost so if you are running Linux in some isolated",
    "start": "970560",
    "end": "976440"
  },
  {
    "text": "environment and you are not afraid of attacks you're just using some you're using it for scientific Computing I",
    "start": "976440",
    "end": "982560"
  },
  {
    "text": "guess you can turn off the flag and maybe get 10 20% depending on how many",
    "start": "982560",
    "end": "988360"
  },
  {
    "text": "and how fre quent your application is making the system calls it was previously known as a",
    "start": "988360",
    "end": "994720"
  },
  {
    "text": "Kaiser and yeah here are some articles if you want to read about it more okay enough Theory let's do some",
    "start": "994720",
    "end": "1002079"
  },
  {
    "text": "programming so this is my setup I'm using x86 architecture and 6.8 kernel",
    "start": "1002079",
    "end": "1009160"
  },
  {
    "text": "and how can we inspect the memory layout of processing Linux well on Linux there's a great tool called pup and if I",
    "start": "1009160",
    "end": "1016560"
  },
  {
    "text": "do man pup it will show me p map report memory map of a process so it sounds",
    "start": "1016560",
    "end": "1022319"
  },
  {
    "text": "like exactly something we need description says the P map command reports the memory map of processor",
    "start": "1022319",
    "end": "1029839"
  },
  {
    "text": "processes let's go back to our simple example we just have hello NDC Tech down",
    "start": "1029839",
    "end": "1035079"
  },
  {
    "text": "and I only put get chair so my process doesn't exit immediately so I can actually attach to",
    "start": "1035079",
    "end": "1040319"
  },
  {
    "text": "it then if I run it I pass the MP ID of",
    "start": "1040319",
    "end": "1045400"
  },
  {
    "text": "this process to pup I will get output like this",
    "start": "1045400",
    "end": "1050520"
  },
  {
    "text": "and there's a lot of output basically what happens here that each row is a single",
    "start": "1050520",
    "end": "1056679"
  },
  {
    "text": "segment in the memory which has it address on the left side this is where it starts and then if we want to know",
    "start": "1056679",
    "end": "1065120"
  },
  {
    "text": "where it ends we need to look at the size the size isend in the kilobytes so then we can calculate where the segment",
    "start": "1065120",
    "end": "1071559"
  },
  {
    "text": "start and where it ends for now let's not look into this let's focus on the addresses here here are addresses of the",
    "start": "1071559",
    "end": "1078480"
  },
  {
    "text": "sections what will happen if I run this program again will I get the same addresses or",
    "start": "1078480",
    "end": "1084280"
  },
  {
    "text": "different who thinks I will get the same addresses raise your",
    "start": "1084280",
    "end": "1089720"
  },
  {
    "text": "hand no one okay who thinks I will get different addresses if I run this program again okay okay I guess that's",
    "start": "1089720",
    "end": "1096679"
  },
  {
    "text": "what's easy so yeah let's try first time I get that addresses second time and",
    "start": "1096679",
    "end": "1103120"
  },
  {
    "text": "third time so those addresses are different apart from the first one but all of them are Riz each time why this",
    "start": "1103120",
    "end": "1110919"
  },
  {
    "text": "this happening and there's a mechanic called address space layout randomization",
    "start": "1110919",
    "end": "1116720"
  },
  {
    "text": "aslr and in increases security of binaries and process by randomizing position of some regions and it also",
    "start": "1116720",
    "end": "1124039"
  },
  {
    "text": "some in some places randomize is offset between the start of some segments on Linux is controlled by the",
    "start": "1124039",
    "end": "1131600"
  },
  {
    "text": "randomized V Space file which has three settings it can be disabled there can be",
    "start": "1131600",
    "end": "1137360"
  },
  {
    "text": "conservative randomization that's how it's officially called and there can be full randomization which is the default",
    "start": "1137360",
    "end": "1144200"
  },
  {
    "text": "and I can actually h test on my machine if I do",
    "start": "1144200",
    "end": "1151039"
  },
  {
    "text": "randomize let's let's display it okay so the value",
    "start": "1151039",
    "end": "1157640"
  },
  {
    "text": "now is two so it's default it's turn on by default but what I can do if I set it",
    "start": "1157640",
    "end": "1164559"
  },
  {
    "text": "to zero",
    "start": "1164559",
    "end": "1167799"
  },
  {
    "text": "and then I try to run the B",
    "start": "1169640",
    "end": "1174720"
  },
  {
    "text": "map okay okay I think I have removed the get tar so now it exceeds",
    "start": "1174720",
    "end": "1182000"
  },
  {
    "text": "immediately let me recompile yeah so now if I keep running",
    "start": "1183000",
    "end": "1189919"
  },
  {
    "text": "I will get the same addresses because I disabled the feature but if I enable it",
    "start": "1189919",
    "end": "1197640"
  },
  {
    "text": "by setting it to one or two yeah then the add will be different",
    "start": "1197640",
    "end": "1203840"
  },
  {
    "text": "each time the important point is that my",
    "start": "1203840",
    "end": "1210000"
  },
  {
    "text": "binary must be compil this position independent executable which means that it can be put anywhere in the memory",
    "start": "1210000",
    "end": "1216640"
  },
  {
    "text": "because if I compile my binary with no Pi then it cannot be randomized because",
    "start": "1216640",
    "end": "1221679"
  },
  {
    "text": "then it expects to be loaded in very specific address so if I would just compile it with no P then it would be",
    "start": "1221679",
    "end": "1227320"
  },
  {
    "text": "randomized even if I had the randomize enabled it would randomize all the other section but not my",
    "start": "1227320",
    "end": "1233360"
  },
  {
    "text": "binary okay let's go back to this listing and if we look at those first",
    "start": "1233360",
    "end": "1238919"
  },
  {
    "text": "two lines we can see that those addresses here have different",
    "start": "1238919",
    "end": "1245799"
  },
  {
    "text": "length and before I said that the address is always 48 bits right so what is happening here so the address at the",
    "start": "1245799",
    "end": "1253640"
  },
  {
    "text": "bottom has 1 2 3 4 5 8 12 and each",
    "start": "1253640",
    "end": "1259039"
  },
  {
    "text": "character en codes four bits so it's 12 * 4 which is 48 bits but the others at",
    "start": "1259039",
    "end": "1265039"
  },
  {
    "text": "the top is actually 16 so 16 * 4 is 64 bits so what is happening here okay",
    "start": "1265039",
    "end": "1271600"
  },
  {
    "text": "let's decode this address in the binary form and now if you look at to the right",
    "start": "1271600",
    "end": "1278520"
  },
  {
    "text": "48 bits those are the bits that are actually addressing those bits on the",
    "start": "1278520",
    "end": "1283559"
  },
  {
    "text": "left part those white bits are not used for the addressing they are just there",
    "start": "1283559",
    "end": "1288600"
  },
  {
    "text": "and the convention is that they must match the leading bit of the addressing part so the register is still 64bit but",
    "start": "1288600",
    "end": "1296679"
  },
  {
    "text": "only those bit participate in the other thing so if I take this uh leading bit",
    "start": "1296679",
    "end": "1302440"
  },
  {
    "text": "and I switch it to zero then all the bits on the left side we also need to switch to zero this is called canonical",
    "start": "1302440",
    "end": "1309159"
  },
  {
    "text": "form of address so why the address technically 64 bits only 48 bits participate in addressing and this most",
    "start": "1309159",
    "end": "1317200"
  },
  {
    "text": "uh significant bit is used for on Linux for distinguish between the Kinder space",
    "start": "1317200",
    "end": "1322360"
  },
  {
    "text": "and user space so in the user space all the addresses start with this leading",
    "start": "1322360",
    "end": "1327919"
  },
  {
    "text": "Bit Zero so as a consequence all the bits before must be zero and in the",
    "start": "1327919",
    "end": "1332960"
  },
  {
    "text": "kernel kernel space all the addresses must have leading bit one and if I look",
    "start": "1332960",
    "end": "1338600"
  },
  {
    "text": "at the hex it looks more like this so the high addresses are belong to the Kel",
    "start": "1338600",
    "end": "1345720"
  },
  {
    "text": "and they do seem like they are 64bit but only for 48 bit are for the other",
    "start": "1345720",
    "end": "1350840"
  },
  {
    "text": "thing if you want to Le more about it yeah there's something L okay let's look into this",
    "start": "1350840",
    "end": "1357840"
  },
  {
    "text": "listing there's a lot of sections here and First Column is the address so this",
    "start": "1357840",
    "end": "1362960"
  },
  {
    "text": "is where the segment start the second is the permissions it's read write and",
    "start": "1362960",
    "end": "1368799"
  },
  {
    "text": "sometimes is X for executable the piece for private mapping it means we are not sharing this memory with other processes",
    "start": "1368799",
    "end": "1376400"
  },
  {
    "text": "then we have the offset which is only relevant if this section is mapping some file because then it",
    "start": "1376400",
    "end": "1382880"
  },
  {
    "text": "means which part of the file is mapped starting from which offset the iode is",
    "start": "1382880",
    "end": "1388520"
  },
  {
    "text": "on L just the file ID so by looking into the iode we can know that those sections",
    "start": "1388520",
    "end": "1393880"
  },
  {
    "text": "are mapped to the same file then we have size and RSS size is the size of the",
    "start": "1393880",
    "end": "1400279"
  },
  {
    "text": "segment in bites and RSS is which part of those bytes are actually in the physical memory because sometimes",
    "start": "1400279",
    "end": "1406799"
  },
  {
    "text": "segments are created with bigger size but they are not they're not using entire memory from the start only",
    "start": "1406799",
    "end": "1414679"
  },
  {
    "text": "partially the anonymous means that this segment is not mapped to any file so or",
    "start": "1414679",
    "end": "1421880"
  },
  {
    "text": "it's no longer mapped to any file for example here we have lip C",
    "start": "1421880",
    "end": "1427360"
  },
  {
    "text": "which is our standard Library we can see that the F the I note with this file ID is the same so we're mapping the same",
    "start": "1427360",
    "end": "1432760"
  },
  {
    "text": "file and here we have some Anonymous by set this just means that initially it",
    "start": "1432760",
    "end": "1438080"
  },
  {
    "text": "was re read from the file but then it's no longer bound to the file it's Anonymous mapping so whenever we modify",
    "start": "1438080",
    "end": "1445120"
  },
  {
    "text": "the memory it's no longer saved into the file back okay so this is how the process look like it's it's not really clear",
    "start": "1445120",
    "end": "1452440"
  },
  {
    "text": "what happening so let's start to unplug it piece by piece let's focus on our program this is the program that I",
    "start": "1452440",
    "end": "1459080"
  },
  {
    "text": "compile I call that user program and our program is mapped into the five",
    "start": "1459080",
    "end": "1465279"
  },
  {
    "text": "parts how can we understand which part of our program are there we can use the read elf command",
    "start": "1465279",
    "end": "1472840"
  },
  {
    "text": "which will which will display the sections of program so if I do read l-s on my program I get something like this",
    "start": "1472840",
    "end": "1481200"
  },
  {
    "text": "so those are all the sh sections that are in my binary and some of them must be mapped I",
    "start": "1481200",
    "end": "1487799"
  },
  {
    "text": "guess to the memory how can we check which parts of them are mapped where for that we can use R",
    "start": "1487799",
    "end": "1496200"
  },
  {
    "text": "e-l to display the program head and it will give us information which",
    "start": "1496200",
    "end": "1501520"
  },
  {
    "text": "sections are yeah mapped where and this is how the operating system also knows because operating system looks into the binary it reads those headers and then",
    "start": "1501520",
    "end": "1509159"
  },
  {
    "text": "it lows our executable so if I execute this command I see something like this there's a lot",
    "start": "1509159",
    "end": "1516440"
  },
  {
    "text": "of program headers but the only important are those the load program headers just",
    "start": "1516440",
    "end": "1523640"
  },
  {
    "text": "tells the operating system to load the file starting from some offset",
    "start": "1523640",
    "end": "1529919"
  },
  {
    "text": "and then there's a permission so read read write and then there's e for executable before that was X now it's e",
    "start": "1529919",
    "end": "1537039"
  },
  {
    "text": "for some reason whatever it's just Linux and then we have alignment this alignment is means that the section must",
    "start": "1537039",
    "end": "1543399"
  },
  {
    "text": "be aligned to to 0.10 which is",
    "start": "1543399",
    "end": "1548720"
  },
  {
    "text": "4,096 in the decimal which is the size of the page so it basically means please",
    "start": "1548720",
    "end": "1554240"
  },
  {
    "text": "load those sections aligned to the page addresses",
    "start": "1554240",
    "end": "1559720"
  },
  {
    "text": "so we have four load instructions and one G ra RW instruction the rail R",
    "start": "1559720",
    "end": "1566039"
  },
  {
    "text": "header is means relocation readon and what it does it takes part of the",
    "start": "1566039",
    "end": "1571159"
  },
  {
    "text": "segment and it switches the permission to read only this is a safety feature because this is for making relocation",
    "start": "1571159",
    "end": "1577480"
  },
  {
    "text": "read only so no one is overwriting relocations relocations are used for dynamic linking when you are using some",
    "start": "1577480",
    "end": "1583480"
  },
  {
    "text": "functions from other binaries you need to identify the addresses of those functions so after after the dynamic",
    "start": "1583480",
    "end": "1589320"
  },
  {
    "text": "Linker and loader loads those libraries it marks the Rel location segment is read only so now one can modify them so",
    "start": "1589320",
    "end": "1596399"
  },
  {
    "text": "now I can say oh this is the address of print F so then when you are using print F you are calling someone else code okay",
    "start": "1596399",
    "end": "1603159"
  },
  {
    "text": "and how can we know which sections of the binary are used we can either track it manually by looking the offset and",
    "start": "1603159",
    "end": "1610039"
  },
  {
    "text": "then if we go to previous slide I can say okay so offset is here so is this",
    "start": "1610039",
    "end": "1615120"
  },
  {
    "text": "section etc etc which is quite tiresome but I can also look here because those",
    "start": "1615120",
    "end": "1621360"
  },
  {
    "text": "are the segments of our file sections actually because segments are where it's in memories section is when in file",
    "start": "1621360",
    "end": "1628360"
  },
  {
    "text": "those are the sections of our file which are loaded so the first load instruction which load those section the second load",
    "start": "1628360",
    "end": "1634480"
  },
  {
    "text": "instruction will load this section the third this and the third Etc and then",
    "start": "1634480",
    "end": "1639600"
  },
  {
    "text": "the ra will make this part it only and this part will be loaded here so this",
    "start": "1639600",
    "end": "1645799"
  },
  {
    "text": "part will be loaded here and then those sections will be made read only and if we look at this header load",
    "start": "1645799",
    "end": "1655279"
  },
  {
    "text": "the last one we are creating it with read and write which means that if we",
    "start": "1655279",
    "end": "1661279"
  },
  {
    "text": "will when we will make those as read only we will split this segment so we'll",
    "start": "1661279",
    "end": "1667120"
  },
  {
    "text": "initially load one segment with read and right and then we will Mark some sections and read only so we will split",
    "start": "1667120",
    "end": "1673480"
  },
  {
    "text": "the segment so we have four instruction of loading but then we have five uh five",
    "start": "1673480",
    "end": "1680679"
  },
  {
    "text": "segments here because one one is splitted by this ra only there's a flag",
    "start": "1680679",
    "end": "1685880"
  },
  {
    "text": "to disable it so if you disable relocation read only you only get four segments so if I match those offset here",
    "start": "1685880",
    "end": "1693760"
  },
  {
    "text": "and those permissions because here I also have offset then I know which segments are mapped where and this looks",
    "start": "1693760",
    "end": "1699960"
  },
  {
    "text": "more like this now I edited this file so those are my notes so in the first",
    "start": "1699960",
    "end": "1705600"
  },
  {
    "text": "section we have interp uh yeah which which segments are",
    "start": "1705600",
    "end": "1712279"
  },
  {
    "text": "important in the first segment I think the important is inter which is The",
    "start": "1712279",
    "end": "1717519"
  },
  {
    "text": "Interpreter puth which stands for dynamic Linker and loader puth this is the application that is loading your",
    "start": "1717519",
    "end": "1724159"
  },
  {
    "text": "program so when you have Dam Dynamic linking when use Dynamic linking then",
    "start": "1724159",
    "end": "1729360"
  },
  {
    "text": "it's first The Interpreter that starts with Dynamic loader then it loads your entire file and it resolves the",
    "start": "1729360",
    "end": "1736039"
  },
  {
    "text": "dependencies and then it gives you control back to your program actually I",
    "start": "1736039",
    "end": "1742840"
  },
  {
    "text": "think if I have the binary",
    "start": "1742840",
    "end": "1748440"
  },
  {
    "text": "here I can read the section of read elf for example in",
    "start": "1748440",
    "end": "1756080"
  },
  {
    "text": "TP okay something okay",
    "start": "1758039",
    "end": "1763559"
  },
  {
    "text": "inp let's try it again read l-x inter user",
    "start": "1764399",
    "end": "1773080"
  },
  {
    "text": "program and it will dump this inter the section of with interp here are the",
    "start": "1774559",
    "end": "1779919"
  },
  {
    "text": "bytes and here's the decoded version of LD Linux as so so this is just the PA to",
    "start": "1779919",
    "end": "1785600"
  },
  {
    "text": "Dynamic link here in the next section we have our",
    "start": "1785600",
    "end": "1793120"
  },
  {
    "text": "code which is in the text section and we can see it by the permission the permission is X for",
    "start": "1793120",
    "end": "1800720"
  },
  {
    "text": "executable and if I go back here I can display this text section by",
    "start": "1800720",
    "end": "1807919"
  },
  {
    "text": "using object dump which will display all the",
    "start": "1807919",
    "end": "1813320"
  },
  {
    "text": "executable section and I just want to see okay here's this assembly of section text this is our code this is what we",
    "start": "1813320",
    "end": "1819720"
  },
  {
    "text": "have compiled to so if I scroll down there should be our main function",
    "start": "1819720",
    "end": "1824799"
  },
  {
    "text": "somewhere yeah it starts here here the operations and I can see the call to the",
    "start": "1824799",
    "end": "1830000"
  },
  {
    "text": "print Dev and get Char which was in our main",
    "start": "1830000",
    "end": "1834440"
  },
  {
    "text": "function if we look at the segment higher this is the row data which contains cre only",
    "start": "1836080",
    "end": "1843760"
  },
  {
    "text": "data so if I look in my program uh I have literal Char the",
    "start": "1844080",
    "end": "1851200"
  },
  {
    "text": "string so this string is also this liter characters is also read only data so if",
    "start": "1851200",
    "end": "1857080"
  },
  {
    "text": "I do read l",
    "start": "1857080",
    "end": "1859919"
  },
  {
    "text": "R data like this then I can see that I have Hello NC teag down in this binary",
    "start": "1862159",
    "end": "1867799"
  },
  {
    "text": "dis position and I can play it little bit because this is read only data it's for",
    "start": "1867799",
    "end": "1873960"
  },
  {
    "text": "or the read only data which are like con variables so I can make const a con",
    "start": "1873960",
    "end": "1880559"
  },
  {
    "text": "in int a equal to 08 99 88 88 88 88 let's say",
    "start": "1880559",
    "end": "1888679"
  },
  {
    "text": "like this and then if I compile it and I display the row data again yeah",
    "start": "1888679",
    "end": "1896279"
  },
  {
    "text": "I should have it somewhere here yeah so we can modify the binary and we can see how it's reflected in",
    "start": "1896279",
    "end": "1903120"
  },
  {
    "text": "the in the in the memory the next segment is dynamic and",
    "start": "1903120",
    "end": "1910399"
  },
  {
    "text": "gold this is used for the dynamic location Dynamic relocation and dynamic linking it's out of this Cod",
    "start": "1910399",
    "end": "1918000"
  },
  {
    "text": "for this talk but there are another good talks which explain this topic I will link them at the end and the last sector",
    "start": "1918000",
    "end": "1924440"
  },
  {
    "text": "is in data and BSS BSS contains uninitialized data and data contains",
    "start": "1924440",
    "end": "1931240"
  },
  {
    "text": "just Global variables so if I go back to my program and I declare some",
    "start": "1931240",
    "end": "1938080"
  },
  {
    "text": "variable let's say in a and I don't make it const let's say 0x 7777777",
    "start": "1938080",
    "end": "1946840"
  },
  {
    "text": "and then if I compile it definition of",
    "start": "1948760",
    "end": "1955120"
  },
  {
    "text": "course okay so now I don't have const so it should be in the data section read -",
    "start": "1956519",
    "end": "1962399"
  },
  {
    "text": "x data so I have",
    "start": "1962399",
    "end": "1967440"
  },
  {
    "text": "7777 so it's here okay if we try to visualize it",
    "start": "1967440",
    "end": "1975279"
  },
  {
    "text": "those section first we have the this is the process layout first we have a random offset using aslr equal to one",
    "start": "1975279",
    "end": "1983440"
  },
  {
    "text": "and then we have those section from the bottom of other space so we will build it Build It Up",
    "start": "1983440",
    "end": "1989120"
  },
  {
    "text": "gradually over this talk and then we will compare it to my initial mental model and see how it",
    "start": "1989120",
    "end": "1994320"
  },
  {
    "text": "differs okay next section is hip we know what is hip from C or C++",
    "start": "1994320",
    "end": "2001000"
  },
  {
    "text": "this is just some part of memory that we are getting the data when we are using Dynamic allocation like maloc or new",
    "start": "2001000",
    "end": "2007000"
  },
  {
    "text": "right so let's try to do Malo and now I'm allocating one kilobyte",
    "start": "2007000",
    "end": "2013559"
  },
  {
    "text": "of memory using Malo and then I'm setting it to zero because if you don't",
    "start": "2013559",
    "end": "2019240"
  },
  {
    "text": "uh the operating system is quite lazy it will not commit the memory until it needs to so I need to physically touch",
    "start": "2019240",
    "end": "2025799"
  },
  {
    "text": "the memory to make the system do allocation for me and let's observe this",
    "start": "2025799",
    "end": "2031360"
  },
  {
    "text": "size of the hip I will keep increasing the size of allocation so I go to 10 and then increases to 16 I go to 100 it",
    "start": "2031360",
    "end": "2039080"
  },
  {
    "text": "increases to 100 I go 120 it increases to 124 and then I go further and it",
    "start": "2039080",
    "end": "2046360"
  },
  {
    "text": "suddenly shrinks and somehow the other segment grows okay what is happening",
    "start": "2046360",
    "end": "2052638"
  },
  {
    "text": "here so to understand this Behavior we need to realize that maloc has basically",
    "start": "2052639",
    "end": "2058000"
  },
  {
    "text": "two ways to allocate memory on Linux it obviously depends on the implementation of standard library but it can either",
    "start": "2058000",
    "end": "2063919"
  },
  {
    "text": "use the data segment hip which it was using early or it can make Anonymous map",
    "start": "2063919",
    "end": "2070720"
  },
  {
    "text": "and map is just a Linux system call for mapping some file to memory or just",
    "start": "2070720",
    "end": "2076200"
  },
  {
    "text": "getting some piece of memory when you're using Anonymous map and the choice between those two methods depends on the",
    "start": "2076200",
    "end": "2082158"
  },
  {
    "text": "map threshold parameter is documented here in the Linux map so if I have this",
    "start": "2082159",
    "end": "2089878"
  },
  {
    "text": "program and I modify it by adding this line malop opt by erasing the threshold",
    "start": "2089879",
    "end": "2098520"
  },
  {
    "text": "to 200,000 and then I'm still doing 140 kiloby allocation I didn't change the",
    "start": "2098520",
    "end": "2105160"
  },
  {
    "text": "rest of the program then I can see that the output will also change so now I raise the threshold so it's still using",
    "start": "2105160",
    "end": "2111920"
  },
  {
    "text": "the hip so it's no longer uses the memory using the M map and I think the most",
    "start": "2111920",
    "end": "2118359"
  },
  {
    "text": "important takeway for me is that what we call a hip is not really a single region of memory hip is just something that",
    "start": "2118359",
    "end": "2126280"
  },
  {
    "text": "standard Library promises as to have or use the maloc use the new and then you",
    "start": "2126280",
    "end": "2131440"
  },
  {
    "text": "will get some memory from the hip but then it's up to the standard Library implementation to actually get this",
    "start": "2131440",
    "end": "2136920"
  },
  {
    "text": "memory from operating system and give it to us so the standard Library can use",
    "start": "2136920",
    "end": "2142200"
  },
  {
    "text": "either the data segment or Anonymous mapping and there are trade-offs to both because the hip segment can only grow in",
    "start": "2142200",
    "end": "2149400"
  },
  {
    "text": "One Direction and then it can only shrink so if you grow it a lot and then you release memory at the bottom you",
    "start": "2149400",
    "end": "2155760"
  },
  {
    "text": "cannot shrink it because you have still some data at the top but when you are using the anonymous",
    "start": "2155760",
    "end": "2161400"
  },
  {
    "text": "mapping you can release them independently if you have like 10 Anonymous mapping you release some memory you can give it back to the",
    "start": "2161400",
    "end": "2167480"
  },
  {
    "text": "operating system so this this is just optimization you can look to the STD uh",
    "start": "2167480",
    "end": "2173599"
  },
  {
    "text": "standard Library source code if you are more interested for it okay so this hip is not really a hip",
    "start": "2173599",
    "end": "2179680"
  },
  {
    "text": "so I will call it not really a hip and also in the computer science meaning the Hep is a three like data structure",
    "start": "2179680",
    "end": "2188119"
  },
  {
    "text": "and it's also not dead so I don't know why it's called hip I guess naming is hard so if we put this on our graph",
    "start": "2188119",
    "end": "2195200"
  },
  {
    "text": "first we have some random offset but only for aslr set to two if we have aslr",
    "start": "2195200",
    "end": "2200800"
  },
  {
    "text": "set to one then we have no offset at all yeah and then we have this hip which is not really a hip it's more like data",
    "start": "2200800",
    "end": "2208160"
  },
  {
    "text": "segment okay let's move further now I will jump to the top of",
    "start": "2208160",
    "end": "2213520"
  },
  {
    "text": "the other space and we have three segments VC call VD o and",
    "start": "2213520",
    "end": "2219200"
  },
  {
    "text": "vvr so there was a problem that switching between kernel and user mode was quite slow and people who write",
    "start": "2219200",
    "end": "2226400"
  },
  {
    "text": "Linux are very smart people so they came up with solution do don't require switch to Kernel mode when you're using some",
    "start": "2226400",
    "end": "2232200"
  },
  {
    "text": "system CES and this is what those three sections are achieving the VC scull is",
    "start": "2232200",
    "end": "2238640"
  },
  {
    "text": "just mapping it's just a segment from the kernel with those functions that you want to call quite often for example get",
    "start": "2238640",
    "end": "2245880"
  },
  {
    "text": "time of the day this this is not a dangerous function to call to just get the time so why require a switch to the",
    "start": "2245880",
    "end": "2251720"
  },
  {
    "text": "kernel mode for getting time of the day so this part of the kernel which",
    "start": "2251720",
    "end": "2257280"
  },
  {
    "text": "contains some frequently used function which don't need to be prot protected by the kernel mode has been mapped to the",
    "start": "2257280",
    "end": "2263839"
  },
  {
    "text": "user user space that's why we can see it in the listing so the user application",
    "start": "2263839",
    "end": "2268880"
  },
  {
    "text": "can directly call this function without switching to the Kel mode it has a couple of problems because it's always",
    "start": "2268880",
    "end": "2275839"
  },
  {
    "text": "mapped into the same location that was the idea so the program knows where to find those function but then the aslr",
    "start": "2275839",
    "end": "2282960"
  },
  {
    "text": "was introduced and now this cannot be randomized because all the program are expecting those functions to be exactly",
    "start": "2282960",
    "end": "2288480"
  },
  {
    "text": "there it's also a fixed size of the memory which is mapped so it's supports",
    "start": "2288480",
    "end": "2294240"
  },
  {
    "text": "a limited number of Cs and it's actually been deprecated in favor of vdso but",
    "start": "2294240",
    "end": "2300640"
  },
  {
    "text": "it's still mapped for the compatibility reasons if you have some old program which relies on this it needs to be",
    "start": "2300640",
    "end": "2306760"
  },
  {
    "text": "mapped into the oper space so vdso is the new solution it's called virtu",
    "start": "2306760",
    "end": "2312319"
  },
  {
    "text": "Dynamic cleaning shared object it's no longer a primitive mapping on some part of the Kel is it's shared Library so it",
    "start": "2312319",
    "end": "2319599"
  },
  {
    "text": "can be SLR it can be move randomly into the space it's not frozen in API you can",
    "start": "2319599",
    "end": "2325280"
  },
  {
    "text": "add new functions to this so it can accommodate more system calls than than VC call and the last object V is just",
    "start": "2325280",
    "end": "2333480"
  },
  {
    "text": "the memory part used by the vdso it's just like his own hip",
    "start": "2333480",
    "end": "2339440"
  },
  {
    "text": "here's some more info so all those sections just serve to",
    "start": "2339480",
    "end": "2345079"
  },
  {
    "text": "accelerate some system cost that's that's all they do by not requiring switch to the Kel mode and if we put",
    "start": "2345079",
    "end": "2351400"
  },
  {
    "text": "them the graphic then we have V system call which is at fixed location it needs to be there then we have some random",
    "start": "2351400",
    "end": "2358880"
  },
  {
    "text": "offset and then we have vdsr and VR so this is how it looks in the",
    "start": "2358880",
    "end": "2364400"
  },
  {
    "text": "memory okay let's move into this stack so first question how big is the stack I",
    "start": "2364400",
    "end": "2371560"
  },
  {
    "text": "can check it by using UL li- s so the default size on my machine is 8 kilobytes it can it can be changed but",
    "start": "2371560",
    "end": "2379440"
  },
  {
    "text": "within some limits so you cannot set it to like one petabyte there are limits in the Linux which can set it to and the",
    "start": "2379440",
    "end": "2385839"
  },
  {
    "text": "very important question which I was always wondering why does the stack all way ground downwards like cannot grow",
    "start": "2385839",
    "end": "2392680"
  },
  {
    "text": "upwards and the answer is on x86",
    "start": "2392680",
    "end": "2398079"
  },
  {
    "text": "it always grown downwards and what I needed to realize is that while Hep is just a software feature like your CPU",
    "start": "2398079",
    "end": "2405680"
  },
  {
    "text": "doesn't know about the hip your CPU doesn't know about the maloc then the stack is both a hardware and a software",
    "start": "2405680",
    "end": "2412280"
  },
  {
    "text": "feature if we look into the Intel documentation and we look into some instruction like the push it says it",
    "start": "2412280",
    "end": "2419400"
  },
  {
    "text": "decrements the stack pointer like your CPU does know about the stock we have the hardware support for the stock in",
    "start": "2419400",
    "end": "2425720"
  },
  {
    "text": "CPU we have the stock register we have the dedicated instruction for manipulating the stack and this",
    "start": "2425720",
    "end": "2431400"
  },
  {
    "text": "documentation doesn't say decrement or increment the stack pointer it tells about the direction pushing into the",
    "start": "2431400",
    "end": "2437800"
  },
  {
    "text": "stock is always decrementing popping is always incrementing the stack pointer because I",
    "start": "2437800",
    "end": "2443280"
  },
  {
    "text": "showed before that for example you can switch off aslr you can also disable Kel",
    "start": "2443280",
    "end": "2448640"
  },
  {
    "text": "page type isolation but you cannot there's no magic flag and Linux that you can turn on to make the stack ground on",
    "start": "2448640",
    "end": "2455480"
  },
  {
    "text": "upwards it has architect defined so my next question was okay so",
    "start": "2455480",
    "end": "2460520"
  },
  {
    "text": "if always grow downwards on x86 are there application are there",
    "start": "2460520",
    "end": "2465720"
  },
  {
    "text": "architectures when you grow upwards and yeah there are some that's what Google told me there's some H Packard PA risk",
    "start": "2465720",
    "end": "2474119"
  },
  {
    "text": "there 8051 and in some mode on spark it can also ground upward so the takeaway for",
    "start": "2474119",
    "end": "2481040"
  },
  {
    "text": "me is that stack is both a software and Hardware feature your CPU knows about the stack but it doesn't know about the",
    "start": "2481040",
    "end": "2486720"
  },
  {
    "text": "hip so how can we inspect this what is already in this stack if we look at the",
    "start": "2486720",
    "end": "2493200"
  },
  {
    "text": "size we are just starting our application our application is very simple and the tack is already being",
    "start": "2493200",
    "end": "2499599"
  },
  {
    "text": "allocated 132 kilobytes and it actually actively uses 16 kilobytes so what is",
    "start": "2499599",
    "end": "2505040"
  },
  {
    "text": "there what are we using stack for so when we have simple application the stack is used for storing the local",
    "start": "2505040",
    "end": "2511680"
  },
  {
    "text": "variables and also for storing the call stock so if we call some function",
    "start": "2511680",
    "end": "2518520"
  },
  {
    "text": "we need to know where are we where are we going to where are we coming from so I will debug this program I will what",
    "start": "2518520",
    "end": "2525319"
  },
  {
    "text": "I'm doing is I'm allocating one local variable which should be stored on stack somewhere then I'm calling the bar and",
    "start": "2525319",
    "end": "2532040"
  },
  {
    "text": "bar calls the F and then I will put a breakpoint here so how can I inspect this stack I",
    "start": "2532040",
    "end": "2538119"
  },
  {
    "text": "can use the GDB so I just run this program in GDB then I just use the command stack and this is more or less",
    "start": "2538119",
    "end": "2545800"
  },
  {
    "text": "the output I will get on the left SI I left side I will have addresses so I",
    "start": "2545800",
    "end": "2550839"
  },
  {
    "text": "have airb and RSP which is the base pointer and the stack pointer and then I",
    "start": "2550839",
    "end": "2555880"
  },
  {
    "text": "can see what is ear earlier on this tag so the top of this tag is here and it grow",
    "start": "2555880",
    "end": "2561960"
  },
  {
    "text": "downwards so here I can see that I'm in the full function so I have return address to go to Bar then I will be in",
    "start": "2561960",
    "end": "2568440"
  },
  {
    "text": "the bar function here and then I have return function to main this is what we have suspected and then I have my local",
    "start": "2568440",
    "end": "2575079"
  },
  {
    "text": "variable 9999999 summary also on the stack and before that I have my arc C and arc V",
    "start": "2575079",
    "end": "2582319"
  },
  {
    "text": "arguments arc V is a pointer to a pointer to the literal string and then I",
    "start": "2582319",
    "end": "2589359"
  },
  {
    "text": "have rxc which is just one so I can I can access those from the",
    "start": "2589359",
    "end": "2596400"
  },
  {
    "text": "stack by just using RC and RV right this is what this is all what we do this quite simple program so if I print all",
    "start": "2596400",
    "end": "2603760"
  },
  {
    "text": "the data from the stack I will get something like this if I use a program one 2 three I will get argument zero my",
    "start": "2603760",
    "end": "2609680"
  },
  {
    "text": "name of my program then one two and three and if I look into the stock then",
    "start": "2609680",
    "end": "2616359"
  },
  {
    "text": "I will see that my now Arc C is four because I have more arguments and I still have pointer to pointer which",
    "start": "2616359",
    "end": "2622760"
  },
  {
    "text": "points to the beginning of the arv uh arv array so if I visualize this and",
    "start": "2622760",
    "end": "2630920"
  },
  {
    "text": "this is the stack I have my arc I have my arv arv is a pointer which points",
    "start": "2630920",
    "end": "2636280"
  },
  {
    "text": "somewhere higher then I have area of pointers which is AR V 0 1 2",
    "start": "2636280",
    "end": "2641599"
  },
  {
    "text": "3 and then higher I have my",
    "start": "2641599",
    "end": "2647280"
  },
  {
    "text": "literal so I can transform it like this and as you can see I have a lot of free",
    "start": "2647280",
    "end": "2652839"
  },
  {
    "text": "space here so what is in this free space what is already there on the stack like for example what is behind the",
    "start": "2652839",
    "end": "2659040"
  },
  {
    "text": "arv so let's modify our program so I take the address of arc V and then I",
    "start": "2659040",
    "end": "2665280"
  },
  {
    "text": "just I don't care about Arc C I just iterate and I will print first 20 things",
    "start": "2665280",
    "end": "2671040"
  },
  {
    "text": "that I 20 strings that I can find and if I do it I get something like this I",
    "start": "2671040",
    "end": "2677359"
  },
  {
    "text": "launch my program I get one two three so I got one my program one two three and",
    "start": "2677359",
    "end": "2682760"
  },
  {
    "text": "then I got some different things what are those well if they look familiar",
    "start": "2682760",
    "end": "2688160"
  },
  {
    "text": "those are environment variables so behind my argv strings I somehow get the",
    "start": "2688160",
    "end": "2694040"
  },
  {
    "text": "NFP strings and in fact on Linux or on unique specific",
    "start": "2694040",
    "end": "2699680"
  },
  {
    "text": "systems you can get you can write a function like this so it takes a pointer",
    "start": "2699680",
    "end": "2705079"
  },
  {
    "text": "to NP array so then you have you can directly print",
    "start": "2705079",
    "end": "2710240"
  },
  {
    "text": "them so I can on uni system I can also take another argument which will point something here which will then point to",
    "start": "2710240",
    "end": "2717680"
  },
  {
    "text": "the NFP strings okay I have some free space here what's there there is the there's array of some",
    "start": "2717680",
    "end": "2725960"
  },
  {
    "text": "object which has type and value and the type and value are 64 bits so if I want",
    "start": "2725960",
    "end": "2732079"
  },
  {
    "text": "to print them because I check documentation I already know their size so I will call it a think and then I",
    "start": "2732079",
    "end": "2737280"
  },
  {
    "text": "will this think has 64 bit of type and 604 bits for",
    "start": "2737280",
    "end": "2742400"
  },
  {
    "text": "Value then I use the NFP pointer to iterate past over it so I'm iterating",
    "start": "2742400",
    "end": "2747720"
  },
  {
    "text": "while it's not null and then I'm casting this pointer to think and I'm just printing this thing printing the key and",
    "start": "2747720",
    "end": "2753960"
  },
  {
    "text": "value the type and value and if I do it if I iterate past the NFP I will get",
    "start": "2753960",
    "end": "2759160"
  },
  {
    "text": "output like this I can see that some of the values look like a pointers some of the values",
    "start": "2759160",
    "end": "2765920"
  },
  {
    "text": "don't and keys are just a numbers they don't tell me anything how can I make any sense of it well this things is",
    "start": "2765920",
    "end": "2772720"
  },
  {
    "text": "called auxiliary vector and I can actually set a environment variable so",
    "start": "2772720",
    "end": "2778240"
  },
  {
    "text": "the operating system will in it for me so if I set environment variable L show",
    "start": "2778240",
    "end": "2783559"
  },
  {
    "text": "axillary Vector equal one then the operating system will put it for me and I can see that the value are the same I",
    "start": "2783559",
    "end": "2790240"
  },
  {
    "text": "was able to read it just by reaching over the NP and then those numbers are",
    "start": "2790240",
    "end": "2796520"
  },
  {
    "text": "in are and decoded as some more meaningful names but what are those values like it",
    "start": "2796520",
    "end": "2803440"
  },
  {
    "text": "still doesn't tell me a lot right I can run my program in GDB and I can use the",
    "start": "2803440",
    "end": "2809960"
  },
  {
    "text": "function in for axv which will decode it and will tell me what it means so for",
    "start": "2809960",
    "end": "2815960"
  },
  {
    "text": "example some are user IDs there's also number of program headers there's system page size which",
    "start": "2815960",
    "end": "2823240"
  },
  {
    "text": "is 496 bytes which is one yeah which is one z0 in HEX so why why is it loaded",
    "start": "2823240",
    "end": "2829760"
  },
  {
    "text": "into my program when I start it so aary Vector is just meant to pass the",
    "start": "2829760",
    "end": "2835200"
  },
  {
    "text": "information from the Kel space to user space initially it was introduced to pass the information to the dynamic",
    "start": "2835200",
    "end": "2841079"
  },
  {
    "text": "Linker The Interpreter but now it's more used just to pass any information from the K to application",
    "start": "2841079",
    "end": "2848160"
  },
  {
    "text": "so it's like preparing the space for the application and if the application needs to know about the page size or something",
    "start": "2848160",
    "end": "2856280"
  },
  {
    "text": "it can get this information from aary vector and here we can do more about it",
    "start": "2856280",
    "end": "2862240"
  },
  {
    "text": "so yeah so auxilary Vector is just behind the NP so I can put it on my chart that n",
    "start": "2862240",
    "end": "2870359"
  },
  {
    "text": "varus and aary Vector is also on the stack when I start my application and if I go to my chart",
    "start": "2870359",
    "end": "2876880"
  },
  {
    "text": "first I will have random offset if ASR is set to one and then I will have my",
    "start": "2876880",
    "end": "2882280"
  },
  {
    "text": "stack okay the last section looks like this and what it is",
    "start": "2882280",
    "end": "2888000"
  },
  {
    "text": "it's so-called memory mapping segment so before that I said that there's a m map",
    "start": "2888000",
    "end": "2894040"
  },
  {
    "text": "function M map system call on Linux and you use this to map some file to the",
    "start": "2894040",
    "end": "2899200"
  },
  {
    "text": "memory part or you can use it just to make Anonymous mapping like",
    "start": "2899200",
    "end": "2905000"
  },
  {
    "text": "this like those three so you just get a piece of memory and",
    "start": "2905000",
    "end": "2910480"
  },
  {
    "text": "this was also used by the lipy to get memory for hip and this segment is just",
    "start": "2910480",
    "end": "2916040"
  },
  {
    "text": "the pool of addresses that the map can use that's why it's called memory mapping segment so whenever using map",
    "start": "2916040",
    "end": "2921880"
  },
  {
    "text": "you will get some part of memory from this segment it's also moved a little",
    "start": "2921880",
    "end": "2927640"
  },
  {
    "text": "bit randomized by SLR and then there's the segment so this is pretty much how",
    "start": "2927640",
    "end": "2933040"
  },
  {
    "text": "my how layout of my program looked like after we encoded everything and if I",
    "start": "2933040",
    "end": "2938400"
  },
  {
    "text": "compare it to my initial mental model which was this and now I have something like this",
    "start": "2938400",
    "end": "2945079"
  },
  {
    "text": "so I was close enough I guess but not really reality is a little bit more",
    "start": "2945079",
    "end": "2952440"
  },
  {
    "text": "complex but there's yeah it's nothing it's nothing super secret you can easily",
    "start": "2952440",
    "end": "2957559"
  },
  {
    "text": "in Linux just investigate it a little bit if you have a lot of time and understand what is happening so",
    "start": "2957559",
    "end": "2965799"
  },
  {
    "text": "this lay layout is quite big for a simple H world can we minimize this layout further so if we have a simple",
    "start": "2965799",
    "end": "2972920"
  },
  {
    "text": "application this was just a hell world and it produce quite substantial layout in the memory",
    "start": "2972920",
    "end": "2980440"
  },
  {
    "text": "how can we minimize it how can I simplify it so one of the biggest parts that was taking this space was the",
    "start": "2980440",
    "end": "2985760"
  },
  {
    "text": "memory mapping segment how can I minimize the me memory mapping segment I",
    "start": "2985760",
    "end": "2990839"
  },
  {
    "text": "can see I have the Linker and I have the standard Library so let's start by getting rid of standard Library so to do",
    "start": "2990839",
    "end": "2998599"
  },
  {
    "text": "that I will compile with no STD Li and then I need to change my program a little bit I need to change my main",
    "start": "2998599",
    "end": "3004799"
  },
  {
    "text": "function to be called Dash start because this is the entry point on Linux I could also pass another flag to the Linker to",
    "start": "3004799",
    "end": "3012079"
  },
  {
    "text": "say hello my entry point is the main function so I don't need to rename it but I can do this just this and if I do",
    "start": "3012079",
    "end": "3018559"
  },
  {
    "text": "this nodp then my memory layout will sub will",
    "start": "3018559",
    "end": "3024200"
  },
  {
    "text": "simplify a lot I no longer have STD lip I no longer have some to Anonymous",
    "start": "3024200",
    "end": "3029760"
  },
  {
    "text": "mapping now I have only LD Linux okay and the question to the audience is this",
    "start": "3029760",
    "end": "3035680"
  },
  {
    "text": "application statically linked or dynamically linked because I",
    "start": "3035680",
    "end": "3041160"
  },
  {
    "text": "yes Dynamic link okay so who thinks is still dynamically linked raise your",
    "start": "3041160",
    "end": "3046680"
  },
  {
    "text": "hands who thinks is statically linked no one okay so let's and try I think it",
    "start": "3046680",
    "end": "3055240"
  },
  {
    "text": "was exam",
    "start": "3055240",
    "end": "3058640"
  },
  {
    "text": "three yes so I will no STD",
    "start": "3060839",
    "end": "3066960"
  },
  {
    "text": "Li I will just compile with no STD lip",
    "start": "3066960",
    "end": "3073119"
  },
  {
    "text": "them like this okay then P up yes I have",
    "start": "3073119",
    "end": "3079480"
  },
  {
    "text": "this output and then I ask ldd ldd user program and it will tell me statically",
    "start": "3079480",
    "end": "3085760"
  },
  {
    "text": "linked but if I ask file user program it will",
    "start": "3085760",
    "end": "3091599"
  },
  {
    "text": "tell me Dynamic link so I don't think there's a consensus in Linux actually this is",
    "start": "3091599",
    "end": "3099680"
  },
  {
    "text": "dynamically linked because I still have interpreter section and I'm still requiring interpreter to launch my",
    "start": "3099680",
    "end": "3104960"
  },
  {
    "text": "application it's just that ldd is using very unfortunate naming because this is",
    "start": "3104960",
    "end": "3110880"
  },
  {
    "text": "not static leaning what ldd means is you loaded me I'm looking into your dependencies and you have nothing to",
    "start": "3110880",
    "end": "3116920"
  },
  {
    "text": "load I have no job to do so I guess you must have linked everything statically that's what ldd is saying but",
    "start": "3116920",
    "end": "3123200"
  },
  {
    "text": "technically this binary is not uh binary is not static okay but it gave me some",
    "start": "3123200",
    "end": "3130920"
  },
  {
    "text": "idea now I can get rid of this guy by adding static now I can make my binary",
    "start": "3130920",
    "end": "3137880"
  },
  {
    "text": "fully static and if I do it then my layout simplifies even further so not",
    "start": "3137880",
    "end": "3143480"
  },
  {
    "text": "only I don't have the interpreter and the STD Li but Al a lot of sections from my program has simplified because those",
    "start": "3143480",
    "end": "3150480"
  },
  {
    "text": "sections were serving for dynamic linking or for some relocations and now I don't need them so my program is much",
    "start": "3150480",
    "end": "3156559"
  },
  {
    "text": "simpler and if I compile with this program with",
    "start": "3156559",
    "end": "3162799"
  },
  {
    "text": "static and I ask ldd again what it is now it would say not a",
    "start": "3162799",
    "end": "3167880"
  },
  {
    "text": "dynamic so I think so when it was Dynamic it was saying static when it's",
    "start": "3167880",
    "end": "3173079"
  },
  {
    "text": "static it's saying not the dynamic so it's very weird wording the file will say me will tell",
    "start": "3173079",
    "end": "3180520"
  },
  {
    "text": "me that it's statically linked now yes cuz I no longer has interpreter section",
    "start": "3180520",
    "end": "3185640"
  },
  {
    "text": "and I no longer require interpreter okay can I minimize it even",
    "start": "3185640",
    "end": "3191960"
  },
  {
    "text": "further well we have the text section which is our code I guess we need to have it but we have something like here",
    "start": "3191960",
    "end": "3198640"
  },
  {
    "text": "E frame and eh frame those sections are used for stack unwinding unwinding and",
    "start": "3198640",
    "end": "3204559"
  },
  {
    "text": "some information for GDB and there's one argument I can pass no asynchronous unwi",
    "start": "3204559",
    "end": "3210720"
  },
  {
    "text": "table and then if I pass this argument yeah I will get rid of the section and I have very minimum",
    "start": "3210720",
    "end": "3216760"
  },
  {
    "text": "subset okay there's one stack per program but what about the multi",
    "start": "3216760",
    "end": "3223000"
  },
  {
    "text": "programs because we know when we start the Frets we have stack per each fret",
    "start": "3223000",
    "end": "3228119"
  },
  {
    "text": "right so I will have a program like this just in C and I have a thre function we",
    "start": "3228119",
    "end": "3234920"
  },
  {
    "text": "just print something and I create fret like this P fret create and then I just join the Fret and if I do the P map I",
    "start": "3234920",
    "end": "3243839"
  },
  {
    "text": "will have a little bit longer output and those are new section that have",
    "start": "3243839",
    "end": "3248880"
  },
  {
    "text": "appeared and special care to those two sections because this looks this takes 8",
    "start": "3248880",
    "end": "3254400"
  },
  {
    "text": "kilobytes and I know that the stock is usually 8 kilobytes at least on my machine and it turns out this is",
    "start": "3254400",
    "end": "3260559"
  },
  {
    "text": "actually the stack so it doesn't create another stack section here it uses the",
    "start": "3260559",
    "end": "3266400"
  },
  {
    "text": "memory mapping segment so it use this m map to create a block for the stack and",
    "start": "3266400",
    "end": "3271480"
  },
  {
    "text": "then just below this I have a guard page which is M which is marked as read only",
    "start": "3271480",
    "end": "3277640"
  },
  {
    "text": "this is to prevent the stack overflowing so if my stack is growing downwards and",
    "start": "3277640",
    "end": "3283240"
  },
  {
    "text": "then if I touch the memory and I try to read something it will SE F this is just for safety feature but if you are really",
    "start": "3283240",
    "end": "3289520"
  },
  {
    "text": "smart you can try to read past the guard page you can like jump further and then",
    "start": "3289520",
    "end": "3295240"
  },
  {
    "text": "if you hit here you can actually do it so I guess it depends on your luck and",
    "start": "3295240",
    "end": "3300400"
  },
  {
    "text": "we also have some new segments here those are the segments used for the pr fret uh P fret support Library we",
    "start": "3300400",
    "end": "3309839"
  },
  {
    "text": "reduces what about more Frets if I create like four Frets what will happen",
    "start": "3309839",
    "end": "3315720"
  },
  {
    "text": "then then I will have still only one segment for p fret library but then I",
    "start": "3315720",
    "end": "3321520"
  },
  {
    "text": "will have four segments here for the stacks so I have f one for f two FR four",
    "start": "3321520",
    "end": "3327640"
  },
  {
    "text": "for three and between them there there's this gu guard page to to make sure I don't",
    "start": "3327640",
    "end": "3333559"
  },
  {
    "text": "overflow so the takeaway the stacks for FR are just created by map there's no",
    "start": "3333559",
    "end": "3338720"
  },
  {
    "text": "extra stack segment map is used pretty much for everything okay and the last but not least how the just in time compilers can",
    "start": "3338720",
    "end": "3346039"
  },
  {
    "text": "put the code into memory and execute it when we think about Java",
    "start": "3346039",
    "end": "3351280"
  },
  {
    "text": "JavaScript every Dynamic language is interpreted but it also doesn't compiler",
    "start": "3351280",
    "end": "3356880"
  },
  {
    "text": "so it compiles it into the machine code and put it into somewhere in the memory and execute it so let's try to do",
    "start": "3356880",
    "end": "3363119"
  },
  {
    "text": "something like this I will have a very simple function which adds two numbers",
    "start": "3363119",
    "end": "3368640"
  },
  {
    "text": "and I want to get a machine code for this function so I just compile it and then I use the object dump object dump",
    "start": "3368640",
    "end": "3376480"
  },
  {
    "text": "will give me the assembler this is the assembler for this function and the Machine code is here on",
    "start": "3376480",
    "end": "3383480"
  },
  {
    "text": "the left side so if I extract all the B 5 55 48 895 89 70 then this is my",
    "start": "3383480",
    "end": "3391400"
  },
  {
    "text": "machine code so in the theory if I put this code somewhere into the memory then if I'm able to jump to it it will it",
    "start": "3391400",
    "end": "3398400"
  },
  {
    "text": "should execute an add two numbers right let's try to do it so this is my program",
    "start": "3398400",
    "end": "3404359"
  },
  {
    "text": "and first I'm allocating memory with using map and the important part I'm using protection exit to make that part",
    "start": "3404359",
    "end": "3411799"
  },
  {
    "text": "of memory executable then um this is my code those are just the bites I have copied from",
    "start": "3411799",
    "end": "3418720"
  },
  {
    "text": "the previous slide 55 48 89 so those are the bites is the machine code for the Ed",
    "start": "3418720",
    "end": "3424160"
  },
  {
    "text": "function then I copy those bites to this memory that I have allocated before and",
    "start": "3424160",
    "end": "3430000"
  },
  {
    "text": "here I do the trick I cast this memory into the pointer of function which takes two ins and it Returns the int and I",
    "start": "3430000",
    "end": "3437000"
  },
  {
    "text": "need to be very precise with the function signature because there's when",
    "start": "3437000",
    "end": "3442200"
  },
  {
    "text": "we are calling the function we need to put the arguments into the right place into the registers so but as long as this signature of",
    "start": "3442200",
    "end": "3448559"
  },
  {
    "text": "function agrees then my C will think okay there must be a function somewhere I guess then I just call the function",
    "start": "3448559",
    "end": "3456079"
  },
  {
    "text": "like this and print the result and it works so this is how you can take the",
    "start": "3456079",
    "end": "3462359"
  },
  {
    "text": "take the executable code the machine code put into the memory and execute it yeah I think when I when I saw it when I",
    "start": "3462359",
    "end": "3468880"
  },
  {
    "text": "tried it the first time I thought like it should work but maybe it won't and then actually did and I was surprised",
    "start": "3468880",
    "end": "3474039"
  },
  {
    "text": "myself but I guess this is how it's done and I'm not saying that this is exactly how the just time compilers do it but",
    "start": "3474039",
    "end": "3479440"
  },
  {
    "text": "this is the idea you need to obtain some memory you need to mark it as executable and then you can just jump in and",
    "start": "3479440",
    "end": "3485599"
  },
  {
    "text": "execute it there's a lot of stuff around it like you need to align the stack so you can just do a simple jump but I use",
    "start": "3485599",
    "end": "3493440"
  },
  {
    "text": "the C so when I cast it to the in pointer to the function it did all the",
    "start": "3493440",
    "end": "3498480"
  },
  {
    "text": "alignment from me okay some more articles to read some more talks to watch I recommend and and",
    "start": "3498480",
    "end": "3506319"
  },
  {
    "text": "that was it thank you very much for your attention we are in in the time and any",
    "start": "3506319",
    "end": "3511400"
  },
  {
    "text": "questions [Applause]",
    "start": "3511400",
    "end": "3521349"
  }
]