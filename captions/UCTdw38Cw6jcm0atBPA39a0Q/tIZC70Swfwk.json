[
  {
    "text": "good morning uh Oslo my name's uh Ian Cooper uh and I'm here today to talk to you about CFA uh and how you use it as a",
    "start": "3000",
    "end": "11480"
  },
  {
    "text": "net developer we'll have both introductory talks about what CFA is and why kafer is the where it is and we'll",
    "start": "11480",
    "end": "18680"
  },
  {
    "text": "look at how you'd use it as a net developer we have an hour so obviously it's not training I will signpost most",
    "start": "18680",
    "end": "25039"
  },
  {
    "text": "of what you need to know but you'd have to go and dig a bit more to be actually effective",
    "start": "25039",
    "end": "30400"
  },
  {
    "text": "we won't dwell too much on this I've got a lot of material to get through for only an hour I'm",
    "start": "30400",
    "end": "35559"
  },
  {
    "text": "old uh and I encourage you to speak all of you have content you just don't know",
    "start": "35559",
    "end": "42079"
  },
  {
    "text": "it right anything you tell somebody else is content you could share on a stage uh",
    "start": "42079",
    "end": "48120"
  },
  {
    "text": "I work on an open- source project for net developers called brighter we are a messaging framework we compete with",
    "start": "48120",
    "end": "53800"
  },
  {
    "text": "things like mass transit Wolverine uh and service bus we are particularly good",
    "start": "53800",
    "end": "60120"
  },
  {
    "text": "for CFA because we have what's called a reactor pattern that is a single-threaded message pump which means",
    "start": "60120",
    "end": "65760"
  },
  {
    "text": "we guarantee and preserve ordering and we scale in a similar way towards CF which Kafka does so of all the messaging",
    "start": "65760",
    "end": "72280"
  },
  {
    "text": "Frameworks out there we are the one that addresses Kafka most directly okay let's agenda today is",
    "start": "72280",
    "end": "79560"
  },
  {
    "text": "we're going to talk about CFA I'll give you a feel for what it is I'll talk about cfar and C so a broad introduction",
    "start": "79560",
    "end": "87439"
  },
  {
    "text": "to working with uh CFR and.net we'll dig a little under the hood so we'll fig",
    "start": "87439",
    "end": "92680"
  },
  {
    "text": "learn some things about how CFA works and knowing that we'll then talk about how to make our CFA code reliable both",
    "start": "92680",
    "end": "99520"
  },
  {
    "text": "as producer who sends messages and a consumer that reads them hopefully we'll",
    "start": "99520",
    "end": "104600"
  },
  {
    "text": "have time to cover the last point which is uh serialization and schema",
    "start": "104600",
    "end": "109880"
  },
  {
    "text": "management around how you're serializing your messages uh we'll see how we do for time okay let's talk about CFA so CFA",
    "start": "109880",
    "end": "119360"
  },
  {
    "text": "comes out of LinkedIn there are many surprising things about LinkedIn including the way that it seems to have",
    "start": "119360",
    "end": "125000"
  },
  {
    "text": "become the replacement the kind of X for detailed social media Post in the tech",
    "start": "125000",
    "end": "130119"
  },
  {
    "text": "sector but perhaps more surprising was it produced a significant piece of our infrastructure so it's created by J",
    "start": "130119",
    "end": "137080"
  },
  {
    "text": "creps nahan Nardi and June Rayo in 2011 it became an Apache OSS project in 2012",
    "start": "137080",
    "end": "144640"
  },
  {
    "text": "most of those people now work at confluent um although other providers of man Kafka such as Avan are also",
    "start": "144640",
    "end": "152160"
  },
  {
    "text": "available um the original use case they were trying to solve was that LinkedIn",
    "start": "152160",
    "end": "157440"
  },
  {
    "text": "wanted to fill it data lake with data they were in data engineering and they",
    "start": "157440",
    "end": "163360"
  },
  {
    "text": "noticed that throughout the organization they had many bespoke ways of taking",
    "start": "163360",
    "end": "168720"
  },
  {
    "text": "data from a source and getting into their Lake and they asked the question couldn't we have just one way of doing",
    "start": "168720",
    "end": "175879"
  },
  {
    "text": "this and a way that would support near real time data being pushed into our",
    "start": "175879",
    "end": "181640"
  },
  {
    "text": "data Lake and the solution they came up with was based around the idea of an appendonly log which is an extremely",
    "start": "181640",
    "end": "189200"
  },
  {
    "text": "efficient way of writing data if you can write data and then that data is immutable nobody will ever try and",
    "start": "189200",
    "end": "195920"
  },
  {
    "text": "change that record that you've written to the file then it's really efficient to just write by adding new items at the",
    "start": "195920",
    "end": "202159"
  },
  {
    "text": "end of the log and all the readers read all these immutable records so that's what Kafka does we have a producer and",
    "start": "202159",
    "end": "209319"
  },
  {
    "text": "the producer appends to a log and we have a consumer and the consumer reads",
    "start": "209319",
    "end": "214560"
  },
  {
    "text": "from that log because we write to a persistent storage format these two",
    "start": "214560",
    "end": "222560"
  },
  {
    "text": "operations can be separated in time in other words the producer and the",
    "start": "222560",
    "end": "227680"
  },
  {
    "text": "consumer don't have to be available at the same time to succeed that is what we",
    "start": "227680",
    "end": "232920"
  },
  {
    "text": "think of as an asynchronous conversation right so WhatsApp on your phone is an",
    "start": "232920",
    "end": "238360"
  },
  {
    "text": "asynchronous conversation you and the other person don't need to be there at the same time for it to succeed you and",
    "start": "238360",
    "end": "244200"
  },
  {
    "text": "I think of asynchronous conversations mediated by some kind of storage as messaging right that's the term we just",
    "start": "244200",
    "end": "250760"
  },
  {
    "text": "use for that okay so cfra is effectively a messaging solution but it's very different to something like rabbit mq",
    "start": "250760",
    "end": "257160"
  },
  {
    "text": "which is Q This is a string",
    "start": "257160",
    "end": "263000"
  },
  {
    "text": "so when you and I want to basically use calf to communicate we do so VI a topic",
    "start": "263000",
    "end": "268960"
  },
  {
    "text": "a topic just means a topic of conversation what we want to agree that we're going to talk talk about something",
    "start": "268960",
    "end": "274720"
  },
  {
    "text": "that you might be interested in right so what do we do for a topic so a producer",
    "start": "274720",
    "end": "280479"
  },
  {
    "text": "writes a record to a topic a record consists of two",
    "start": "280479",
    "end": "286160"
  },
  {
    "text": "things a key and a value we'll come back to key a bit later but the value is",
    "start": "286160",
    "end": "292360"
  },
  {
    "text": "essentially the data you want to exchange it can be in Json it could be in protobuf which is Google",
    "start": "292360",
    "end": "298880"
  },
  {
    "text": "serialization format and it can also be an Avro which is a native CFA format you",
    "start": "298880",
    "end": "304720"
  },
  {
    "text": "don't have to use any one of those you can use any one in particular that you like so the producer makes a TCP IP",
    "start": "304720",
    "end": "313120"
  },
  {
    "text": "connection to your broker we'll talk more about Brokers and clusters a bit later and it writes to that topic and",
    "start": "313120",
    "end": "319520"
  },
  {
    "text": "effectively it depends to that topic right you don't delete records it's aend",
    "start": "319520",
    "end": "325160"
  },
  {
    "text": "only they will basically have a time to live and effectively end up being deleted from the top Toc but your codee",
    "start": "325160",
    "end": "330759"
  },
  {
    "text": "does not delete them okay your consumer then reads from that topic so",
    "start": "330759",
    "end": "338560"
  },
  {
    "text": "it read his immutable records effect reads them off you get the value out and you do something with the value so you",
    "start": "338560",
    "end": "345080"
  },
  {
    "text": "agree that you want to basically be part of this conversation about a topic a consumer is a single threaded",
    "start": "345080",
    "end": "353160"
  },
  {
    "text": "operation you want to be able to read sequentially so CFA will preserve",
    "start": "353160",
    "end": "359000"
  },
  {
    "text": "ordering for you and ordering may be important because you may want to",
    "start": "359000",
    "end": "364039"
  },
  {
    "text": "exchange information about a say a restaurant or um a menu in my current",
    "start": "364039",
    "end": "369319"
  },
  {
    "text": "field and you may want to make sure that effectively that is versioned and when you read them you read them in order so",
    "start": "369319",
    "end": "376120"
  },
  {
    "text": "that you don't uh get inconsistencies all right you can't",
    "start": "376120",
    "end": "381720"
  },
  {
    "text": "do sequential unless it's just a single thread you have multiple threads things will be out of order so you can only",
    "start": "381720",
    "end": "388840"
  },
  {
    "text": "have one one thread reading from a topic in cafka okay when you've read something",
    "start": "388840",
    "end": "397120"
  },
  {
    "text": "you don't delete it it's not like a Q and rabbit mq you don't it's a depend Only log you have no right access you",
    "start": "397120",
    "end": "403599"
  },
  {
    "text": "don't delete it so how do you know what you've read how do you avoid reading the same thing again well you record an",
    "start": "403599",
    "end": "410479"
  },
  {
    "text": "offset so the offset simply says what records have I read and you do that by",
    "start": "410479",
    "end": "417240"
  },
  {
    "text": "writing to Kafka there's a topic called consumer offsets where you write what you've read those of you that have done",
    "start": "417240",
    "end": "423400"
  },
  {
    "text": "you know basic work with a say a CSV file or similar structured file format where effectively you read it right",
    "start": "423400",
    "end": "430039"
  },
  {
    "text": "you're doing the same thing you're reading a certain amount of data and then you're recording hey I've read that",
    "start": "430039",
    "end": "436080"
  },
  {
    "text": "amount of data and you can actually read a certain distance in by figuring out I want to start at this offset and then",
    "start": "436080",
    "end": "441840"
  },
  {
    "text": "start reading CF GL do the same thing all right so you may be asking hang on a",
    "start": "441840",
    "end": "447000"
  },
  {
    "text": "minute here and this is not going to work I have far far more data than a single thread could read especially if",
    "start": "447000",
    "end": "453800"
  },
  {
    "text": "you're talking about CFA supporting a near real time requirement how can one",
    "start": "453800",
    "end": "458840"
  },
  {
    "text": "thread be fast enough to coope with my workload so what happens is when your",
    "start": "458840",
    "end": "466360"
  },
  {
    "text": "producer is writing a record there are two things the value and the key and we",
    "start": "466360",
    "end": "473000"
  },
  {
    "text": "use the key to write that record to a bucket called a partition",
    "start": "473000",
    "end": "479840"
  },
  {
    "text": "we can have as many buckets as we like they cost money and resources and time so you don't want more than you need",
    "start": "479840",
    "end": "486199"
  },
  {
    "text": "right and what you do is you say Okay key1 123 goes to the first bucket key1 124 goes to the second bucket key1 125",
    "start": "486199",
    "end": "494240"
  },
  {
    "text": "actually goes to the first bucket right so there's an algorithm we use to turn that key into a bucket",
    "start": "494240",
    "end": "501199"
  },
  {
    "text": "number we could be random if we don't care about ordering at all we can just randomly assign to a",
    "start": "501199",
    "end": "507680"
  },
  {
    "text": "bucket more usually usually we use a thing called consistent hashing so",
    "start": "507680",
    "end": "512880"
  },
  {
    "text": "consistent hashing just says turn that key into a bucket number and always turn",
    "start": "512880",
    "end": "518800"
  },
  {
    "text": "that same key into that same bucket number and that means because all of the",
    "start": "518800",
    "end": "524800"
  },
  {
    "text": "rights for that particular key always go to the same partition you preserve",
    "start": "524800",
    "end": "531320"
  },
  {
    "text": "ordering so for a given Upstream like a restaurant you might have effectively",
    "start": "531320",
    "end": "536399"
  },
  {
    "text": "all of the rights for that restaurant about Chang it to it details go to partition one for the same restaurant",
    "start": "536399",
    "end": "542480"
  },
  {
    "text": "right and that makes it easy for you to continue to be sequential so the producer wres to a given",
    "start": "542480",
    "end": "551560"
  },
  {
    "text": "partition a consumer reads there not from a topic but a partition on the",
    "start": "552399",
    "end": "559600"
  },
  {
    "text": "topic so your single-threaded consumer reads from a given partition so it",
    "start": "559600",
    "end": "566240"
  },
  {
    "text": "continues to preserve what is sequential and what it's actually right to Consumer",
    "start": "566240",
    "end": "571920"
  },
  {
    "text": "offsets is it's progress reading a given partition on a topic by having multiple",
    "start": "571920",
    "end": "579200"
  },
  {
    "text": "consumers you can read all the partitions on your topic now actually an",
    "start": "579200",
    "end": "584680"
  },
  {
    "text": "individual consumer can read more than one partition right but at most one",
    "start": "584680",
    "end": "590839"
  },
  {
    "text": "thread reads any partition so you could have six partitions and three consumers each one of those consumers would would",
    "start": "590839",
    "end": "596839"
  },
  {
    "text": "own two partitions to read from right your maximum scale is a number of",
    "start": "596839",
    "end": "601880"
  },
  {
    "text": "partitions I don't got time to go into it today but there's a way to figure out the number of partitions that's called",
    "start": "601880",
    "end": "607240"
  },
  {
    "text": "Qing Theory so queing Theory roughly kind of says you need to figure out the rate which work arrives the speed at",
    "start": "607240",
    "end": "615200"
  },
  {
    "text": "which you can consume it and you have to consume faster than things arrive it's a",
    "start": "615200",
    "end": "620600"
  },
  {
    "text": "bit more complicated than that involves what's called A Plus on distribution because we assume work doesn't arrive",
    "start": "620600",
    "end": "626720"
  },
  {
    "text": "evenly and that lets you predict the number of partition itions and usually you'd add a healthy amount of Headroom",
    "start": "626720",
    "end": "631880"
  },
  {
    "text": "on top you can scale partitions but it's not what you want to do all the",
    "start": "631880",
    "end": "636959"
  },
  {
    "text": "time okay for your application you want to",
    "start": "636959",
    "end": "642560"
  },
  {
    "text": "consume all of the messages on a given topic but you might have a situation",
    "start": "642560",
    "end": "648440"
  },
  {
    "text": "where multiple you have multiple applications that want to read from the same source so multiple things might want to",
    "start": "648440",
    "end": "656040"
  },
  {
    "text": "know about your restaurant information so in the field I work in we have things like search wants to know about all the",
    "start": "656040",
    "end": "661639"
  },
  {
    "text": "restaurant data we have things like um uh things that tell you the availability of restaurant when it's open that",
    "start": "661639",
    "end": "667800"
  },
  {
    "text": "essentially want to know about all the restaurant data so each one of those consuming applications wants to consume",
    "start": "667800",
    "end": "674760"
  },
  {
    "text": "all the data so this creates the nidea of a consumer group a consumer group",
    "start": "674760",
    "end": "680600"
  },
  {
    "text": "says in this group all of the consumers work together to consume that",
    "start": "680600",
    "end": "688000"
  },
  {
    "text": "topic I would distribute the partitions across those consumers and those",
    "start": "688000",
    "end": "693760"
  },
  {
    "text": "consumers which reach a single thread will collaborate to effectively eat their way through the topic if I have",
    "start": "693760",
    "end": "699480"
  },
  {
    "text": "another app it gets its own consumer",
    "start": "699480",
    "end": "703959"
  },
  {
    "text": "group so that's what this overall looks like a producer writes a record to an",
    "start": "704839",
    "end": "710600"
  },
  {
    "text": "appendonly log called a topic which is partitioned it writes to a partition",
    "start": "710600",
    "end": "716160"
  },
  {
    "text": "based upon the key of the record typically we use an algorithm called consistent hashing to make sure the same",
    "start": "716160",
    "end": "723360"
  },
  {
    "text": "key is always written to the same partition your application creates a consumer group and in it it puts one or",
    "start": "723360",
    "end": "730399"
  },
  {
    "text": "more consumers usually up to the number of partitions that you have the partitions",
    "start": "730399",
    "end": "736480"
  },
  {
    "text": "are assigned to your consumers which then can read sequentially through the",
    "start": "736480",
    "end": "741839"
  },
  {
    "text": "topic the number of partitions you need is based upon the rate of arrival of",
    "start": "741839",
    "end": "747320"
  },
  {
    "text": "work and how fast you need to consume it consumers write their progress to a to a",
    "start": "747320",
    "end": "754360"
  },
  {
    "text": "to a topic which records the cons the offset they have in a given partition",
    "start": "754360",
    "end": "759639"
  },
  {
    "text": "all right I'll give you a moment to breathe while I drink some water that is CFA and that is how Kafka works all",
    "start": "759639",
    "end": "768480"
  },
  {
    "text": "right those you familiar with things like rabbit mq sqs uh a zero service bus those are cu's",
    "start": "770000",
    "end": "778399"
  },
  {
    "text": "this is a string uh it's not something I go into in depth today but it's a different technology cues you delete work when you've read it",
    "start": "778399",
    "end": "785040"
  },
  {
    "text": "and they have different use cases all right let's talk about cfar and",
    "start": "785040",
    "end": "790920"
  },
  {
    "text": "C okay so in order to avoid just doing hello world I am going to do a little",
    "start": "790920",
    "end": "797199"
  },
  {
    "text": "example where the trans where we use the trans mography from Calvin and Hobs I learned uh s of one people in the front",
    "start": "797199",
    "end": "804519"
  },
  {
    "text": "row that apparently you don't know who Calvin and OBS is in Norway so apparent ly it's Tommy and the tiger so uh that",
    "start": "804519",
    "end": "812320"
  },
  {
    "text": "is the Norwegian version um so they have a box a car by box Calvin can change the",
    "start": "812320",
    "end": "819000"
  },
  {
    "text": "dial and decide what he wants to change into like a worm a frog a tiger a baboon",
    "start": "819000",
    "end": "824240"
  },
  {
    "text": "he changes the dial he goes into the box and he is transformed into that creature okay so what we're going to do is create",
    "start": "824240",
    "end": "830639"
  },
  {
    "text": "something that lets us say in a CLI hey what do we want to be transformed into",
    "start": "830639",
    "end": "835839"
  },
  {
    "text": "we'll set up basically what the details of that are we'll set we'll produce a message via CFA and our consumer will",
    "start": "835839",
    "end": "842000"
  },
  {
    "text": "read that message and we'll do the transformation and we'll spit out the result it's just more exciting than",
    "start": "842000",
    "end": "847279"
  },
  {
    "text": "hello world if you do these kind of talks and you written hello world enough times",
    "start": "847279",
    "end": "852720"
  },
  {
    "text": "trust me it gets boring all right so how does it work in cop so here what we have is the producer so the producer",
    "start": "852720",
    "end": "859720"
  },
  {
    "text": "effectively in this we put inside this dispatcher class and you can see there there's a line basically seven which",
    "start": "859720",
    "end": "865360"
  },
  {
    "text": "says there's a producer Builder that's provided to you by the Kafka client library and what you want to do is use",
    "start": "865360",
    "end": "872240"
  },
  {
    "text": "it to create a producer and it needs a couple of things the first thing is that string string what that refers to",
    "start": "872240",
    "end": "878920"
  },
  {
    "text": "essentially is the key type and the value type you can use other net types",
    "start": "878920",
    "end": "884600"
  },
  {
    "text": "here this just basically is very generic and works brighter under the hood uses string and a bite array in order to",
    "start": "884600",
    "end": "891000"
  },
  {
    "text": "allow you to use binary data but you can use specific net type and we'll see that towards the end and you need to provide",
    "start": "891000",
    "end": "897399"
  },
  {
    "text": "it a config and the config just tells us where to find CFA all right uh so there's nothing",
    "start": "897399",
    "end": "905320"
  },
  {
    "text": "too interesting there and then what happens is you can see on line 11 we will use that producer to send a message",
    "start": "905320",
    "end": "913079"
  },
  {
    "text": "and that message is essentially going to consist of our settings name is the key and the",
    "start": "913079",
    "end": "919880"
  },
  {
    "text": "value is the transformation that we want to write and we will send it to the topic are the topic of conversation",
    "start": "919880",
    "end": "926079"
  },
  {
    "text": "that's just a string it's identifier we need to exchange a band between both",
    "start": "926079",
    "end": "932079"
  },
  {
    "text": "halves okay at the end of that we will flush why do we need to flush and why do",
    "start": "932079",
    "end": "938560"
  },
  {
    "text": "we need to wait for it when I call Produce CFA does not the Kafka client",
    "start": "938560",
    "end": "944120"
  },
  {
    "text": "does not immediately call the broker it places it on an internal buffer and a",
    "start": "944120",
    "end": "951199"
  },
  {
    "text": "thread reads that buffer to actually post to the broker and it will retry for",
    "start": "951199",
    "end": "957600"
  },
  {
    "text": "you in an to basically make sure that that data reaches the buffer so if we",
    "start": "957600",
    "end": "962959"
  },
  {
    "text": "exit without flush there is a danger there is still work on the buffer to be processed you could do get a return",
    "start": "962959",
    "end": "970160"
  },
  {
    "text": "value from flush so if I wanted to do this a bit more reliably I could check to see how many messages were still in",
    "start": "970160",
    "end": "975560"
  },
  {
    "text": "the buffer and just do a while loop until I'd cleared that to zero and essentially there was no work left to be",
    "start": "975560",
    "end": "981240"
  },
  {
    "text": "flushed in the buffer that means that the producer always works in parallel",
    "start": "981240",
    "end": "987720"
  },
  {
    "text": "you don't have to worry about being being async there is an async version it's actually",
    "start": "987720",
    "end": "993319"
  },
  {
    "text": "slower how do I consume that message so similarly you can see on line eight here",
    "start": "993920",
    "end": "999880"
  },
  {
    "text": "I have a consumer Builder the consumer Builder is what the client offers you when I want to build a consumer with it",
    "start": "999880",
    "end": "1006480"
  },
  {
    "text": "again what I have is some uh config and similarly as well the consumer is a",
    "start": "1006480",
    "end": "1011920"
  },
  {
    "text": "string string so the key value type that I'm using and you can see it's very similar I'm telling it where cfer is I'm",
    "start": "1011920",
    "end": "1018199"
  },
  {
    "text": "also telling at what the idea of my consumer group is remember we said our consumers live inside a consumer group",
    "start": "1018199",
    "end": "1023920"
  },
  {
    "text": "so I'm just saying hey that's my ID we won't have multiple consumers in our demos right so don't worry about that",
    "start": "1023920",
    "end": "1030600"
  },
  {
    "text": "when we're doing messaging in a consumer the key idea is called a message pump message pump is eventally a while loop",
    "start": "1030600",
    "end": "1036839"
  },
  {
    "text": "what we do is we read work out of basically our messaging system in this case Kafka and we say well it's got some",
    "start": "1036839",
    "end": "1043720"
  },
  {
    "text": "body which is you know Jason or Avro or protuff in our case actually it's just",
    "start": "1043720",
    "end": "1049039"
  },
  {
    "text": "Bas a plain text string here that we're using and what we need to do is effectively convert that into a type so",
    "start": "1049039",
    "end": "1055919"
  },
  {
    "text": "we pass in a function to our message pump here called a translator which is simply going to say take that body and",
    "start": "1055919",
    "end": "1061559"
  },
  {
    "text": "turn it into a type the next thing we need to do is say well I want to action that in some way so we're going to pass",
    "start": "1061559",
    "end": "1067480"
  },
  {
    "text": "in our Handler which says hey when I get one of these messages what do I do we know in our case we want to trans",
    "start": "1067480",
    "end": "1072799"
  },
  {
    "text": "mography you into your favorite creature of some sort okay and a cancellation",
    "start": "1072799",
    "end": "1078240"
  },
  {
    "text": "token that's let's just cancel the message pump right so what does that look like so this is a typical message",
    "start": "1078240",
    "end": "1084240"
  },
  {
    "text": "pump we are going to subscribe to the topic so we're saying to Kafka hey",
    "start": "1084240",
    "end": "1089360"
  },
  {
    "text": "that's the topic we want to we want to basically work with and then you are essentially going to consume from that",
    "start": "1089360",
    "end": "1095720"
  },
  {
    "text": "topic so you're going to say give me the next record on that topic if it's out of",
    "start": "1095720",
    "end": "1101000"
  },
  {
    "text": "Records if you've read all the records your offsets have reached the end there's there's no new rights you to catch up in you're reading an append",
    "start": "1101000",
    "end": "1107919"
  },
  {
    "text": "Only log so you get an end of file so if you get an end of file usually you just wait because you're",
    "start": "1107919",
    "end": "1114840"
  },
  {
    "text": "going to sit here assuming more data is going to be written in the future then we're going to call that function to translate our data right and then we're",
    "start": "1114840",
    "end": "1121760"
  },
  {
    "text": "effectively going to handle it",
    "start": "1121760",
    "end": "1127559"
  },
  {
    "text": "that so if I look at the uh oh we tied up just to delete at the end we hold",
    "start": "1127559",
    "end": "1133159"
  },
  {
    "text": "resources that is the overall flow for you just as one file so you you can see",
    "start": "1133159",
    "end": "1139240"
  },
  {
    "text": "essentially in our message pump we are effectively taking some values and then we're calling them as part of the pump's",
    "start": "1139240",
    "end": "1144760"
  },
  {
    "text": "progress so to use that what we're actually going to be doing is passing in a set of values so our group ID Auto",
    "start": "1144760",
    "end": "1152320"
  },
  {
    "text": "offset reset earliest here just means if we haven't got a consumer offset stored",
    "start": "1152320",
    "end": "1158559"
  },
  {
    "text": "already where should we start and this just says start at the beginning okay uh and then what we're",
    "start": "1158559",
    "end": "1165880"
  },
  {
    "text": "going to do is basically set up cancellation token so I can canc it with the key press and here is the message pump so what we're doing here is",
    "start": "1165880",
    "end": "1172840"
  },
  {
    "text": "effectively going to be saying translate the message so we just create one of our own type of transmogrification and it's",
    "start": "1172840",
    "end": "1178760"
  },
  {
    "text": "a very simple we're not doing much sterilization here we're just taking the key and the value off the message and passing them back in so the things we",
    "start": "1178760",
    "end": "1185000"
  },
  {
    "text": "wrote this table and the Box are just Spectre do console I'm not going to get into that in this talk I'm just making",
    "start": "1185000",
    "end": "1191760"
  },
  {
    "text": "pretty output rather than using console. right line right so it's making the whole thing a bit prettier all right and",
    "start": "1191760",
    "end": "1197799"
  },
  {
    "text": "that is the Handler function where we will handle the message that we receive okay and that is what that",
    "start": "1197799",
    "end": "1203960"
  },
  {
    "text": "overall looks like in a kind of single file all right so let's actually see that in",
    "start": "1203960",
    "end": "1211280"
  },
  {
    "text": "action oops Need to Escape that otherwise it doesn't work",
    "start": "1212039",
    "end": "1217280"
  },
  {
    "text": "hello okay just for context here is the code that I'm about to run just I I",
    "start": "1217280",
    "end": "1222679"
  },
  {
    "text": "won't show you the context every single time this is the producer uh producer function and there this spater code we",
    "start": "1222679",
    "end": "1229559"
  },
  {
    "text": "talked about where we're going to produce to that topic this message and then we're going to flush at the end",
    "start": "1229559",
    "end": "1235520"
  },
  {
    "text": "that is the program it runs in most of this is just prompting code from Spectre doc console we're going to basically ask",
    "start": "1235520",
    "end": "1241280"
  },
  {
    "text": "your name ask for the transformation we're going to display what it work it is you want to do and",
    "start": "1241280",
    "end": "1246960"
  },
  {
    "text": "then we we do then we're going to say basically do you want to enter the transmogrifier and if you do we're going to send a",
    "start": "1246960",
    "end": "1253159"
  },
  {
    "text": "message over on the consuming side there is our message pump",
    "start": "1253159",
    "end": "1259200"
  },
  {
    "text": "right where we are essentially saying subscribe to the topic find a message when we get a message call your",
    "start": "1259200",
    "end": "1266000"
  },
  {
    "text": "translator function when we have a type call you a Handler function and here effectively you can see we're saying run",
    "start": "1266000",
    "end": "1272400"
  },
  {
    "text": "the message pump do that simple transformation and effectively then run",
    "start": "1272400",
    "end": "1277640"
  },
  {
    "text": "our output so let's see that working am I demo too yeah look",
    "start": "1277640",
    "end": "1284879"
  },
  {
    "text": "spoilers I hope that hasn't rued it for you the spoilers right okay so let's run the",
    "start": "1285400",
    "end": "1291660"
  },
  {
    "text": "[Music] program okay so my name is",
    "start": "1291660",
    "end": "1297720"
  },
  {
    "text": "Ian I would like to be a tiger right and it's saying basically",
    "start": "1297720",
    "end": "1304720"
  },
  {
    "text": "hey Ian you can enter the trans mography and be a tiger that only seems so exciting this is CFA UI many many uis",
    "start": "1304720",
    "end": "1312679"
  },
  {
    "text": "are available for Kafka uh commercial and non-commercial I like this one other",
    "start": "1312679",
    "end": "1318679"
  },
  {
    "text": "like others right but it's useful cuz what it's going to show us is effectively that we have a topic now I",
    "start": "1318679",
    "end": "1324400"
  },
  {
    "text": "have to occasionally refresh here because Docker is occasionally slow on my machine that's where I'm running",
    "start": "1324400",
    "end": "1329480"
  },
  {
    "text": "cafka but here you can see I've now created a transmogrification topic what I've done for Simplicity if I set this",
    "start": "1329480",
    "end": "1336080"
  },
  {
    "text": "up so effectively we autocreate the topic with a single partition if I haven't got one you don't do that in",
    "start": "1336080",
    "end": "1341919"
  },
  {
    "text": "production in production you use a CLR and you create a topic with a number of partitions that you need so you can also",
    "start": "1341919",
    "end": "1347799"
  },
  {
    "text": "recreate in the event of Dr it's handy for me though to do this cuz I don't have to faf around with the command line",
    "start": "1347799",
    "end": "1353200"
  },
  {
    "text": "for you if I go and look at that transmogrification topic I can see a number of things about it right main",
    "start": "1353200",
    "end": "1358679"
  },
  {
    "text": "thing I can see is messages so here is the message that I just sent it's sitting here and it's basically saying",
    "start": "1358679",
    "end": "1365600"
  },
  {
    "text": "Ian wants to become a tiger its key basically is a string effectively and",
    "start": "1365600",
    "end": "1371080"
  },
  {
    "text": "its value so it's key you can see his ear and that's the name of the person doing we're doing the transformation form and it value is Tiger all right you",
    "start": "1371080",
    "end": "1378559"
  },
  {
    "text": "would obviously have more meaningful keys and more meaningful data in a real application one of the things you are",
    "start": "1378559",
    "end": "1384400"
  },
  {
    "text": "seeing here is this conversation is asynchronous I have not consumed it yet time is passing it doesn't matter my",
    "start": "1384400",
    "end": "1392000"
  },
  {
    "text": "consumer does not need to be online at this point to do the do any work that's what we mean by an asynchronous",
    "start": "1392000",
    "end": "1397440"
  },
  {
    "text": "conversation so I'm going to run my consumer and I'll read basically any",
    "start": "1397440",
    "end": "1402919"
  },
  {
    "text": "work that is accumulated over there I want to begin the transformation of course I do",
    "start": "1402919",
    "end": "1409039"
  },
  {
    "text": "and effectively I have been transformed into a tiger can you not",
    "start": "1409039",
    "end": "1416120"
  },
  {
    "text": "tell all",
    "start": "1416120",
    "end": "1419279"
  },
  {
    "text": "right okay what is Kafka like underneath the",
    "start": "1424520",
    "end": "1429679"
  },
  {
    "text": "hood okay so Kafka effectively is a cluster um we do that for resilience and",
    "start": "1429679",
    "end": "1435279"
  },
  {
    "text": "we basically tend to have multiple brokers in the cluster usually you want an odd number like three or five cuz it",
    "start": "1435279",
    "end": "1441760"
  },
  {
    "text": "will have to do some voting your partition is essentially consists of a",
    "start": "1441760",
    "end": "1447600"
  },
  {
    "text": "leader and a number of followers the followers effectively are a copy of the data in the leader you write to the",
    "start": "1447600",
    "end": "1453480"
  },
  {
    "text": "leader your data is copied to the followers your followers mainly exist for redundancy if you lose the node that",
    "start": "1453480",
    "end": "1460120"
  },
  {
    "text": "contains your leader then essentially one of your followers becomes a leader from about",
    "start": "1460120",
    "end": "1465440"
  },
  {
    "text": "2.4 it's possible for you to read from a leader as well to distri for a follower as well to distribute the",
    "start": "1465440",
    "end": "1472520"
  },
  {
    "text": "load okay uh cfar essentially needs who you have to decide well who is going to",
    "start": "1472520",
    "end": "1479640"
  },
  {
    "text": "make decisions about who does leaders and followers and that is called the controller to get a controller we",
    "start": "1479640",
    "end": "1485760"
  },
  {
    "text": "obviously need to decide well who elects the controller it's like you know how deep does this go so cfar up until about",
    "start": "1485760",
    "end": "1491279"
  },
  {
    "text": "3.4 had a dependency on something called zookeeper zookeeper essentially is a set",
    "start": "1491279",
    "end": "1496559"
  },
  {
    "text": "of Primitives that let you do distributed systems and what it let you do was basically try and set a given",
    "start": "1496559",
    "end": "1503120"
  },
  {
    "text": "node and that node with the root value and by writing that node it's called an",
    "start": "1503120",
    "end": "1508960"
  },
  {
    "text": "Emeral node you would say let's all compete to write that node and if we can if we succeed you're the leader if you",
    "start": "1508960",
    "end": "1515240"
  },
  {
    "text": "fail you're a follower and if you basically disappear because it's a FAL node then that node vanishes and",
    "start": "1515240",
    "end": "1521200"
  },
  {
    "text": "somebody else will try and grab it and be the leader so Zeke keeper was just used for leader election since about 3.4",
    "start": "1521200",
    "end": "1528360"
  },
  {
    "text": "or uh it's been possible to use something called craft which is kafka's raft which effectively raft is a",
    "start": "1528360",
    "end": "1535159"
  },
  {
    "text": "distributed systems protocol for doing leader election so CFA can do its own election which removes the zuker",
    "start": "1535159",
    "end": "1540840"
  },
  {
    "text": "protocol it's a little bit iffy you have to do some stuff to alter CFA it's a bit more difficult to set up actually at the",
    "start": "1540840",
    "end": "1547720"
  },
  {
    "text": "minute that will probably improve over time okay key thing you need to understand from this though is when I",
    "start": "1547720",
    "end": "1554000"
  },
  {
    "text": "write to kafar I have to make a decision about what information I want to get yet",
    "start": "1554000",
    "end": "1559279"
  },
  {
    "text": "before I consider that done so if I set x equals z I'm saying yeah look I just",
    "start": "1559279",
    "end": "1564799"
  },
  {
    "text": "talked to the broker and as long as that communication to the broker the socket's open I just assume it succeeded the",
    "start": "1564799",
    "end": "1571600"
  },
  {
    "text": "problem here is it might fail in which case you have data loss it's fast but",
    "start": "1571600",
    "end": "1577080"
  },
  {
    "text": "you risk data loss you only can do that if you are willing to essentially lose",
    "start": "1577080",
    "end": "1582880"
  },
  {
    "text": "your data right and that may be true right so one of the things we have so I work just yet takeaway one of the things",
    "start": "1582880",
    "end": "1588360"
  },
  {
    "text": "we have is information about say the the the career and their Journey towards you with your food it may be okay for us to",
    "start": "1588360",
    "end": "1595679"
  },
  {
    "text": "lose individual messages and for the thing to jump right we may not actually care about",
    "start": "1595679",
    "end": "1601880"
  },
  {
    "text": "accuracy ax equals 1 says I know it was written to the",
    "start": "1601880",
    "end": "1607279"
  },
  {
    "text": "leader and then it comes back I don't know that was propagated to the followers that's a reasonable tradeoff",
    "start": "1607279",
    "end": "1615279"
  },
  {
    "text": "of speed and security because what it's saying is Well I know kafka's got it it's probably",
    "start": "1615279",
    "end": "1621919"
  },
  {
    "text": "propagating it I don't know if exactly if everyone has it in the event my",
    "start": "1621919",
    "end": "1627080"
  },
  {
    "text": "leader crashes before that data propagates the other nodes I will experience data",
    "start": "1627080",
    "end": "1633080"
  },
  {
    "text": "loss if I'm reading from followers if I'm using that option they may also get",
    "start": "1633080",
    "end": "1639360"
  },
  {
    "text": "an inconsistent read in other words they may not get the latest values because",
    "start": "1639360",
    "end": "1644799"
  },
  {
    "text": "essentially they may still be on the leader if you you want safety you have",
    "start": "1644799",
    "end": "1650120"
  },
  {
    "text": "to use ax equals all takes the longest amount of time because you write to the",
    "start": "1650120",
    "end": "1655919"
  },
  {
    "text": "leader and it propagates to all the followers and only then do you get a response back saying you are done",
    "start": "1655919",
    "end": "1663679"
  },
  {
    "text": "remember though in most cases your code has moved on because when you do that producer produce you're actually writing",
    "start": "1663679",
    "end": "1669600"
  },
  {
    "text": "to a buffer and a separate thread is sending from from that buffer it's a single thread so it preserves ordering",
    "start": "1669600",
    "end": "1676279"
  },
  {
    "text": "right so in most cases you can probably risk all because you're not slowing your program if what you actually need is",
    "start": "1676279",
    "end": "1685080"
  },
  {
    "text": "safety CFA has a notion of an instinct replica so it may be that a given node",
    "start": "1685720",
    "end": "1690799"
  },
  {
    "text": "in the cluster ends up struggling for whatever reason it's behind a bad Network",
    "start": "1690799",
    "end": "1696960"
  },
  {
    "text": "partition um it is essentially dyed CFA uses the idea of latency how long how",
    "start": "1696960",
    "end": "1703600"
  },
  {
    "text": "far behind is it when I look at essentially uh its ability to receive",
    "start": "1703600",
    "end": "1708919"
  },
  {
    "text": "messages from the leader and at a certain point it declares it's an out sync replica and takes it out of the",
    "start": "1708919",
    "end": "1715960"
  },
  {
    "text": "cluster now when you write to all you won't include that node and you won't be allowed to read from that node until",
    "start": "1715960",
    "end": "1722679"
  },
  {
    "text": "somebody fixes it and gets it back into line right and that stops you from all",
    "start": "1722679",
    "end": "1729320"
  },
  {
    "text": "taking forever because you have a bad node in your cluster okay all right how do we use",
    "start": "1729320",
    "end": "1736880"
  },
  {
    "text": "this information so we can create a reliable producer by controlling some of these",
    "start": "1736880",
    "end": "1744440"
  },
  {
    "text": "variables so in that box on the left hand side you can see what we're doing here is setting a to all we're saying",
    "start": "1744440",
    "end": "1752279"
  },
  {
    "text": "hey Kafka wait until you've written to everything we're setting retries to",
    "start": "1752279",
    "end": "1757399"
  },
  {
    "text": "three so that means the thread in the client that is consuming that buffer of",
    "start": "1757399",
    "end": "1763120"
  },
  {
    "text": "messages you want to write if it fails to write it once it will will reite it",
    "start": "1763120",
    "end": "1769200"
  },
  {
    "text": "will try retry three times before it gives up and the retry uh back off says how",
    "start": "1769200",
    "end": "1778360"
  },
  {
    "text": "long do I wait between each re try maximum inlight request per",
    "start": "1778360",
    "end": "1784679"
  },
  {
    "text": "connection says how many threads do I want to use on that",
    "start": "1784679",
    "end": "1791360"
  },
  {
    "text": "buffer if you require your rights to be sequential then you can only ever use",
    "start": "1791360",
    "end": "1799039"
  },
  {
    "text": "one you have multiple threads you will de order your rights so generally those are a",
    "start": "1799039",
    "end": "1806760"
  },
  {
    "text": "reasonably sensible set of default settings unless you have better information and you know more all right",
    "start": "1806760",
    "end": "1814960"
  },
  {
    "text": "so that's where I would start okay",
    "start": "1814960",
    "end": "1820840"
  },
  {
    "text": "so uh here what we're saying is basically the same producer actually this code is a little bit about saying",
    "start": "1820840",
    "end": "1826640"
  },
  {
    "text": "look CF let you set up some things that may be handy for you we can PR it from the client tell it to log errors we can",
    "start": "1826640",
    "end": "1833159"
  },
  {
    "text": "tell it basically we can log we can have an error Handler okay on the producer",
    "start": "1833159",
    "end": "1839880"
  },
  {
    "text": "config then is where I set these values so here you can see basically I'm saying",
    "start": "1839880",
    "end": "1845159"
  },
  {
    "text": "maximum send message retries to three maximum flight to One enable item potent",
    "start": "1845159",
    "end": "1851240"
  },
  {
    "text": "is useful if you are worried you may write duplicates to that que enable item",
    "start": "1851240",
    "end": "1856720"
  },
  {
    "text": "poent will say in a given time window don't let you send something that has",
    "start": "1856720",
    "end": "1861840"
  },
  {
    "text": "the same message ID twice so it will basically duplicate for you if you need",
    "start": "1861840",
    "end": "1867080"
  },
  {
    "text": "it ax here I'm showing as axe leader axe leader is actually ax one um ax all is",
    "start": "1867080",
    "end": "1872840"
  },
  {
    "text": "probably the one you actually want in most of these cases I think we do that in the code enable delivery reports",
    "start": "1872840",
    "end": "1878279"
  },
  {
    "text": "we'll talk about in a second just note that it's there okay so one of the other things is",
    "start": "1878279",
    "end": "1885320"
  },
  {
    "text": "because this producing of a record to the broker is asynchronous how do I know it happened I",
    "start": "1885320",
    "end": "1893480"
  },
  {
    "text": "do producer. produce my code keeps moving on it's a background thread that",
    "start": "1893480",
    "end": "1899519"
  },
  {
    "text": "is doing the work of sending from this internal buffer to",
    "start": "1899519",
    "end": "1905159"
  },
  {
    "text": "CFA a delivery report says okay I want you to call me back and tell me whether",
    "start": "1905159",
    "end": "1912159"
  },
  {
    "text": "their operation succeeded or failed so I will know so what we're seeing here is a very",
    "start": "1912159",
    "end": "1919679"
  },
  {
    "text": "lightweight version of What's called the outbox pattern so the outbox pattern says I want to store information that",
    "start": "1919679",
    "end": "1926279"
  },
  {
    "text": "tells me about successes of rights to the broker a real outbox would be",
    "start": "1926279",
    "end": "1931440"
  },
  {
    "text": "persisted and it would effectively engage in a transaction with whatever you're writing to your data store that",
    "start": "1931440",
    "end": "1937720"
  },
  {
    "text": "has an entity so brighter or something will do that for you the code gets pretty",
    "start": "1937720",
    "end": "1943600"
  },
  {
    "text": "complicated excuse me for this demo all I want to do is just have an in-memory",
    "start": "1944480",
    "end": "1949639"
  },
  {
    "text": "outbox so you can see effectively how you would take a delivery report and update the outbox to show that something",
    "start": "1949639",
    "end": "1956600"
  },
  {
    "text": "had been sent and something like brightle what happens you get a sweeper process that says hey is there anything",
    "start": "1956600",
    "end": "1961880"
  },
  {
    "text": "unsent I should send it you do risk deing with an",
    "start": "1961880",
    "end": "1967240"
  },
  {
    "text": "outbox",
    "start": "1971120",
    "end": "1974120"
  },
  {
    "text": "okay uh we've just discussed all that okay um this is basically just out of",
    "start": "1976159",
    "end": "1982279"
  },
  {
    "text": "interest um the whole code uh there is an async version as we",
    "start": "1982279",
    "end": "1988320"
  },
  {
    "text": "discussed this is just using async to get the delivery report back instead of using that oh I didn't really call that",
    "start": "1988320",
    "end": "1994600"
  },
  {
    "text": "necessarily uh online 19 is will we add to the outbox the message we're going to",
    "start": "1994600",
    "end": "2000399"
  },
  {
    "text": "send and online uh 22 you can see we're registering a callback Handler which is",
    "start": "2000399",
    "end": "2006480"
  },
  {
    "text": "essentially what we have at line five line five is eventally the Callback we will run and all that does is update the",
    "start": "2006480",
    "end": "2012880"
  },
  {
    "text": "value in the outbox okay this is the asnc version you can see on the asnc version what happens",
    "start": "2012880",
    "end": "2018720"
  },
  {
    "text": "is we get the return value from the await and that is the report we would have simply Mark status basically at",
    "start": "2018720",
    "end": "2025360"
  },
  {
    "text": "that point as I say the async version is actually less performant right it's mainly exists",
    "start": "2025360",
    "end": "2032279"
  },
  {
    "text": "because async propagates and effectively some people like to do that okay",
    "start": "2032279",
    "end": "2039720"
  },
  {
    "text": "okay let's demo that all right so just quickly I don't",
    "start": "2040960",
    "end": "2048320"
  },
  {
    "text": "want to frame it all uh because of time this code is available online there'll be Links at the end uh here is the",
    "start": "2048320",
    "end": "2055919"
  },
  {
    "text": "dispatcher and the dispatcher effectively is essentially saying add to the outbox produce call the Handler the",
    "start": "2055919",
    "end": "2063040"
  },
  {
    "text": "outbox you can go and look at later it's just an in-memory thing there's nothing sophisticated going on there right the",
    "start": "2063040",
    "end": "2068158"
  },
  {
    "text": "consumer is the same as before so if I do demo",
    "start": "2068159",
    "end": "2073919"
  },
  {
    "text": "three gosh my IDE CU I've changed the font size wants to give you all the spoilers doesn't it",
    "start": "2073919",
    "end": "2082919"
  },
  {
    "text": "wow okay my name is I could be Tommy because it's Tommy and the tiger so why",
    "start": "2084440",
    "end": "2090079"
  },
  {
    "text": "not and I'm going to become an eel Just for kicks tell me wants to",
    "start": "2090079",
    "end": "2096919"
  },
  {
    "text": "become an eel all right so you can see what we're putting we're outputting here is the",
    "start": "2096919",
    "end": "2102240"
  },
  {
    "text": "information contained in the outbox so what we're saying is we sent a",
    "start": "2102240",
    "end": "2107599"
  },
  {
    "text": "transmogrification the status is persisted as what came back from that delivery report that means effectively",
    "start": "2107599",
    "end": "2113119"
  },
  {
    "text": "Kafka has the information on the axle setting that we gave it all right and",
    "start": "2113119",
    "end": "2118400"
  },
  {
    "text": "there's nothing really to see here but we'll run it just so you can see it works",
    "start": "2118400",
    "end": "2123720"
  },
  {
    "text": "um and you can see essentially that we have now become and",
    "start": "2123720",
    "end": "2129359"
  },
  {
    "text": "E all",
    "start": "2129359",
    "end": "2132519"
  },
  {
    "text": "right all right tiny bit behind but we'll keep moving all right so what about",
    "start": "2136359",
    "end": "2143320"
  },
  {
    "text": "consumers so one of the things to note about this consumer let's look at the bottom uh",
    "start": "2143320",
    "end": "2149440"
  },
  {
    "text": "comment that other ones come out of time a bit is that essentially if what I so",
    "start": "2149440",
    "end": "2155200"
  },
  {
    "text": "so the question is when do I commit an offset so if you look in the top box actually where it says enable auto",
    "start": "2155200",
    "end": "2160720"
  },
  {
    "text": "commit equals true and enable auto offset stor is true which is kind of the default so what we're saying is",
    "start": "2160720",
    "end": "2166920"
  },
  {
    "text": "this I want to write to CFA the records that I have read I'm going to let the",
    "start": "2166920",
    "end": "2173319"
  },
  {
    "text": "client do that for me the offset store is where effectively the CL the CFA",
    "start": "2173319",
    "end": "2180280"
  },
  {
    "text": "client that I'm using will hold the offsets that I've read autoc commit says",
    "start": "2180280",
    "end": "2187800"
  },
  {
    "text": "I want you to run a thread that every so often flushes those to the to CFA to the",
    "start": "2187800",
    "end": "2194599"
  },
  {
    "text": "offset topic the default I think is basically every 5 Seconds that will run",
    "start": "2194599",
    "end": "2200319"
  },
  {
    "text": "and flush your offsets there is a risk of course that you crash your offsets aren't flushed and you will see work",
    "start": "2200319",
    "end": "2206680"
  },
  {
    "text": "again generally in all messaging scenarios you should be prepared to see work twice",
    "start": "2206680",
    "end": "2213240"
  },
  {
    "text": "okay the trouble with that here is that effectively if I fail in the translator",
    "start": "2213240",
    "end": "2219440"
  },
  {
    "text": "or handle steps I probably don't want to mark that work as",
    "start": "2219440",
    "end": "2225200"
  },
  {
    "text": "done but if I'm doing this Auto offset uh store equals true what I'm actually",
    "start": "2225200",
    "end": "2231640"
  },
  {
    "text": "doing is saying as soon as you read put it in the offset store and commit it",
    "start": "2231640",
    "end": "2237760"
  },
  {
    "text": "what I want to do with messaging generally is say don't actually write that offset until I have",
    "start": "2237760",
    "end": "2246040"
  },
  {
    "text": "done the work then if I crash somebody else will pick up that work we won't",
    "start": "2246040",
    "end": "2252160"
  },
  {
    "text": "have marked that as being done so generally the best technique to",
    "start": "2252160",
    "end": "2257599"
  },
  {
    "text": "do that is to autoc commit and manually store the offset and this is probably",
    "start": "2257599",
    "end": "2263000"
  },
  {
    "text": "your default it gets the most help from you for the client and is the yet the most reliable",
    "start": "2263000",
    "end": "2269640"
  },
  {
    "text": "so what we say here you can see on line 20 is if with that Handler returns a",
    "start": "2269640",
    "end": "2276599"
  },
  {
    "text": "success result to us we will store the offset and that comes we pass it the",
    "start": "2276599",
    "end": "2281920"
  },
  {
    "text": "consumer result which is what we get back from CF when we read a message and that contains the offset in it so we're",
    "start": "2281920",
    "end": "2288599"
  },
  {
    "text": "saying store the offset for us if we succeed if we fail we won't store the",
    "start": "2288599",
    "end": "2295160"
  },
  {
    "text": "offset someone else will be given the work to do instead of us all right so we reset that flag basically to",
    "start": "2295160",
    "end": "2301960"
  },
  {
    "text": "fce and do the work we can choose to also manually",
    "start": "2301960",
    "end": "2308560"
  },
  {
    "text": "commit we might say hey we don't want this default 5c thing we'd rather batch up work and send work when we have 10",
    "start": "2308560",
    "end": "2315720"
  },
  {
    "text": "items or the like Etc so you can choose to basically say autoc commit false and auto offset store false in which case",
    "start": "2315720",
    "end": "2323599"
  },
  {
    "text": "what you need to do is call commit to say I want to commit the offset to cafka at this point now",
    "start": "2323599",
    "end": "2330079"
  },
  {
    "text": "typically you would actually batch this up not do it one by one because that's very chatty so brighter the USS project",
    "start": "2330079",
    "end": "2336720"
  },
  {
    "text": "I work on we will actually do this strategy but what you do is you tell us what is the batch size we also ask for",
    "start": "2336720",
    "end": "2344200"
  },
  {
    "text": "what's the maximum age so we will sweep results that basically have been waiting",
    "start": "2344200",
    "end": "2349440"
  },
  {
    "text": "too long to be committed to uh CFA okay so manual commit and manual offset",
    "start": "2349440",
    "end": "2355000"
  },
  {
    "text": "storage is okay if you want to take a bit more control of what you're",
    "start": "2355000",
    "end": "2360200"
  },
  {
    "text": "doing you are assigned partitions it may be that we decide we have 10 partitions",
    "start": "2360200",
    "end": "2367440"
  },
  {
    "text": "but in non-peak trading periods we're only going to run four consumers and well let's call it five make my math",
    "start": "2367440",
    "end": "2373680"
  },
  {
    "text": "easy five consumers so each one of those has two partitions what may happen to us is we",
    "start": "2373680",
    "end": "2380760"
  },
  {
    "text": "say okay now we're going to scale up because we're at Peak trading and we're going to go to 10 partition uh 10",
    "start": "2380760",
    "end": "2386800"
  },
  {
    "text": "consumers so each one will have one partition what happens then is you lose",
    "start": "2386800",
    "end": "2392720"
  },
  {
    "text": "the partition that you own and you are reassigned a new Partition there's a",
    "start": "2392720",
    "end": "2397800"
  },
  {
    "text": "thing called sticky uh let's look into sticky it doesn't really work very well um which tries to avoid this everybody",
    "start": "2397800",
    "end": "2403400"
  },
  {
    "text": "loses everybody gets reassigned when you lose the partition right you get a revoked message you need to make sure",
    "start": "2403400",
    "end": "2410480"
  },
  {
    "text": "that You' have committed any outstanding offsets this c a bit naive by the way it's quite noisy if you do that because",
    "start": "2410480",
    "end": "2416079"
  },
  {
    "text": "it will say to you a lot I've already got those offsets why are you trying to commit them again so generally you can",
    "start": "2416079",
    "end": "2421240"
  },
  {
    "text": "do a thing where you check and make sure that the offsets basically haven't already been committed for example and bright will do that for you to try and",
    "start": "2421240",
    "end": "2427359"
  },
  {
    "text": "cut down the noise that it's giving you so you need to use whatever strategy",
    "start": "2427359",
    "end": "2432640"
  },
  {
    "text": "you had so here one is doing store and the other is doing basically um uh commit okay so all right let's look at",
    "start": "2432640",
    "end": "2440920"
  },
  {
    "text": "uh reliably consumption consuming a message we looked at reliably uh that word is seeming surprisingly difficult",
    "start": "2440920",
    "end": "2448200"
  },
  {
    "text": "uh reliably uh sending a message what about reliably consuming a message so here you can see in our",
    "start": "2448200",
    "end": "2456240"
  },
  {
    "text": "transmogrifier we are going to effectively say um I am going to we're",
    "start": "2456240",
    "end": "2461400"
  },
  {
    "text": "going to do manual commit yay we're going to basically commit our result and what we're actually going to do is just",
    "start": "2461400",
    "end": "2467000"
  },
  {
    "text": "write out so we can see it on the screen what effectively we committed so that",
    "start": "2467000",
    "end": "2472200"
  },
  {
    "text": "will tell us basically we're going to commit this particular offset to this partition on this",
    "start": "2472200",
    "end": "2478319"
  },
  {
    "text": "topic so uh demo number five is this one so",
    "start": "2478319",
    "end": "2485280"
  },
  {
    "text": "let me just do clear and",
    "start": "2485280",
    "end": "2490319"
  },
  {
    "text": "clear",
    "start": "2491000",
    "end": "2494000"
  },
  {
    "text": "uh let's have Calvin any preferences for what we",
    "start": "2496079",
    "end": "2502560"
  },
  {
    "text": "transform into we don't have Goose not an",
    "start": "2502560",
    "end": "2508119"
  },
  {
    "text": "option dinosaur okay dinosaur fans have spoken dinosaur is complicated to spell",
    "start": "2508119",
    "end": "2515800"
  },
  {
    "text": "all right so Calvin is going to turn into a dinosaur you can see effectively as before we've got the persisted",
    "start": "2515800",
    "end": "2523960"
  },
  {
    "text": "transmogrification we'll run that we begin the transmogrification you can see",
    "start": "2525880",
    "end": "2531079"
  },
  {
    "text": "coward become a dinosaur but more importantly um don't know why they committed off the topic is missing um",
    "start": "2531079",
    "end": "2537359"
  },
  {
    "text": "but we have effectively committed offset to to that partition there's a problem with my code there somewhere right",
    "start": "2537359",
    "end": "2546319"
  },
  {
    "text": "let us move on 17 minutes I think we're okay for",
    "start": "2547559",
    "end": "2554319"
  },
  {
    "text": "time all right serializers deserializers and the schema",
    "start": "2554319",
    "end": "2561160"
  },
  {
    "text": "registry okay",
    "start": "2561160",
    "end": "2566240"
  },
  {
    "text": "so when I write a CFA record as You' seen we effectively can use the kind of",
    "start": "2566240",
    "end": "2571599"
  },
  {
    "text": "plain text value for our value but more typically we'll pick one of three types",
    "start": "2571599",
    "end": "2576640"
  },
  {
    "text": "of body Jason which we all know and love well protobuf those of you that basically",
    "start": "2576640",
    "end": "2583400"
  },
  {
    "text": "work with Google Technologies like GPC we'll know about protobuf right where effec we Define a kind of IDL which",
    "start": "2583400",
    "end": "2590200"
  },
  {
    "text": "describes what the message syntax will look like and Avro which is kind of uh",
    "start": "2590200",
    "end": "2596920"
  },
  {
    "text": "kafka's uh Native uh binary type um which",
    "start": "2596920",
    "end": "2601960"
  },
  {
    "text": "essentially lets you describe records and Fields on those records I won't do a full description of Avro in this talk it",
    "start": "2601960",
    "end": "2607880"
  },
  {
    "text": "would take too long um the main reason why you end up potentially using Avo is",
    "start": "2607880",
    "end": "2614359"
  },
  {
    "text": "one of the strength of Kafka is its ecosystem so Kafka has a lot of",
    "start": "2614359",
    "end": "2620680"
  },
  {
    "text": "integrates for a lot of things Kafka connect kql Flink uh those tools tend to be used",
    "start": "2620680",
    "end": "2628119"
  },
  {
    "text": "quite a lot in data Engineering in order to shift data around and do Transformations on it many of those",
    "start": "2628119",
    "end": "2635359"
  },
  {
    "text": "tools depend on a couple of things one is that you're sending them data in N AO",
    "start": "2635359",
    "end": "2641559"
  },
  {
    "text": "format and two is that you tell them what the schema of your data",
    "start": "2641559",
    "end": "2647280"
  },
  {
    "text": "is so to do that we basically create a schema that describes what to expect in",
    "start": "2647280",
    "end": "2653599"
  },
  {
    "text": "the message body and we registered that with a schema registry we'll talk about those in a second uh confluent uh is",
    "start": "2653599",
    "end": "2661440"
  },
  {
    "text": "basically the major provider of a Kind scheme registry that you can you can get uh AP I think is the other one that also",
    "start": "2661440",
    "end": "2668559"
  },
  {
    "text": "conforms to the scheme registry API the schem registry is generally useful and you can use it in messaging scenarios",
    "start": "2668559",
    "end": "2674839"
  },
  {
    "text": "that aren't rated to CFA for storing schemas and that describe your messages",
    "start": "2674839",
    "end": "2681440"
  },
  {
    "text": "okay this is a thing about schema compatibility so CFA wants you to set in",
    "start": "2681440",
    "end": "2689680"
  },
  {
    "text": "order to check a message that you're going to send is compatible with your client",
    "start": "2689680",
    "end": "2698280"
  },
  {
    "text": "your schem of compatibility and this table I'm sure some of you are reading it uh I got a",
    "start": "2698280",
    "end": "2704720"
  },
  {
    "text": "simple vers in a second for you tries to describe that relationship right with",
    "start": "2704720",
    "end": "2710280"
  },
  {
    "text": "lots of forwards backwards transitives and words that basically are kind of word salad all right what does it",
    "start": "2710280",
    "end": "2716520"
  },
  {
    "text": "actually mean okay backwards means customers who are essentially using a",
    "start": "2716520",
    "end": "2723200"
  },
  {
    "text": "new schema can read messages sent to them on an old",
    "start": "2723200",
    "end": "2728880"
  },
  {
    "text": "schema uh backwards just means last one transitive means all of",
    "start": "2728880",
    "end": "2736480"
  },
  {
    "text": "them forward means consumers who have the older version can read messages sent",
    "start": "2736640",
    "end": "2744319"
  },
  {
    "text": "by producers who who use a newer version generally that's one of the ones",
    "start": "2744319",
    "end": "2749760"
  },
  {
    "text": "we want most of the time we're upgrading our producer we're adding some additional data we make we want to make",
    "start": "2749760",
    "end": "2755160"
  },
  {
    "text": "sure we don't break any of our existing consumers who are not using that data again it's transitive just means all",
    "start": "2755160",
    "end": "2762720"
  },
  {
    "text": "forwards on its own just means the last one and full Bas both means producers",
    "start": "2762720",
    "end": "2769400"
  },
  {
    "text": "and consumers can either one of them could be on the last version we can communicate successfully and transitive",
    "start": "2769400",
    "end": "2775640"
  },
  {
    "text": "just means hey we can talk to each other all the time there are no breaking changes in this",
    "start": "2775640",
    "end": "2783240"
  },
  {
    "text": "model so what happens is is if you want to use this look at the top part of the",
    "start": "2784599",
    "end": "2790319"
  },
  {
    "text": "diagram your producer needs to essentially talk to a schema",
    "start": "2790319",
    "end": "2796240"
  },
  {
    "text": "registry if your topic doesn't have a registered",
    "start": "2796240",
    "end": "2801280"
  },
  {
    "text": "schema you probably want to create one at that point and then essentially the schema",
    "start": "2801280",
    "end": "2807280"
  },
  {
    "text": "registry you can use to enforce that relationship and say hey you can't send",
    "start": "2807280",
    "end": "2812920"
  },
  {
    "text": "messages here unless",
    "start": "2812920",
    "end": "2818040"
  },
  {
    "text": "you effectively conform to the rules that I have set typically when your client talks the",
    "start": "2818040",
    "end": "2825760"
  },
  {
    "text": "schema registry it locally caches the schemas you're using so that if the",
    "start": "2825760",
    "end": "2831559"
  },
  {
    "text": "schema registry disappears for some reason like maintenance your producers don't all stop",
    "start": "2831559",
    "end": "2838240"
  },
  {
    "text": "working now I'm a big believer called postal law which basically says be um",
    "start": "2838240",
    "end": "2843920"
  },
  {
    "text": "constrained in what you send be liberal in what you accept so I don't tend to basically try and",
    "start": "2843920",
    "end": "2850720"
  },
  {
    "text": "check the message as the consumer but you can from a consumer point of view",
    "start": "2850720",
    "end": "2856359"
  },
  {
    "text": "look in the schema registry ask for the schema or the message you're receiving and choose to reject it it's more",
    "start": "2856359",
    "end": "2862160"
  },
  {
    "text": "usually used from a consumer because they are Dynamic and they want to understand what is the shape of the",
    "start": "2862160",
    "end": "2868400"
  },
  {
    "text": "message I'm receiving that I'm going to go and write to a data table for",
    "start": "2868400",
    "end": "2873760"
  },
  {
    "text": "example when CFA was first made CFA only had records it had no headers",
    "start": "2873760",
    "end": "2883240"
  },
  {
    "text": "so when we think about messaging quite think about the body and we think about the header headers contain metadata body",
    "start": "2883240",
    "end": "2890880"
  },
  {
    "text": "contains actual data Kafka had no headers until about version",
    "start": "2890880",
    "end": "2896880"
  },
  {
    "text": "0.11 CFA wanted to work with schema Registries way before it had headers so",
    "start": "2896880",
    "end": "2902960"
  },
  {
    "text": "where do I put the schema ID in the message so kafka's fantastic solution was to",
    "start": "2902960",
    "end": "2911200"
  },
  {
    "text": "mangle the body so effectively the first five bytes of what you send in the case",
    "start": "2911200",
    "end": "2917559"
  },
  {
    "text": "that you're using a schema registry are a first bite a magic bite which",
    "start": "2917559",
    "end": "2923559"
  },
  {
    "text": "basically says what version of serialization we are using it's never been anything other than zero right and",
    "start": "2923559",
    "end": "2930640"
  },
  {
    "text": "the next four bytes are the schema ID which essentially is the ID of the SCH",
    "start": "2930640",
    "end": "2937680"
  },
  {
    "text": "schemer uh that effectively that represents the record type that you're sending and then it is your",
    "start": "2937680",
    "end": "2944040"
  },
  {
    "text": "data okay so if you want to use the schema",
    "start": "2944040",
    "end": "2949960"
  },
  {
    "text": "registry when you do serialization you have to be aware of the magic 5",
    "start": "2949960",
    "end": "2955839"
  },
  {
    "text": "bytes typically CFA Pro confluent provides what it call series which is serializer",
    "start": "2955839",
    "end": "2962599"
  },
  {
    "text": "Der serializers for you for a given language so for net for example we can",
    "start": "2962599",
    "end": "2967760"
  },
  {
    "text": "get some sery sterilizers that will serialize our body and insert the magical five bytes for us right the",
    "start": "2967760",
    "end": "2974520"
  },
  {
    "text": "problem with that a little bit is that these are built on Newton soft Json not on system text Json uh so you get your",
    "start": "2974520",
    "end": "2981720"
  },
  {
    "text": "back at having a dependency on Newton soft Jason uh and N Json schema and the",
    "start": "2981720",
    "end": "2987440"
  },
  {
    "text": "latest version of n Json schema will break your CFA uh on brighter we're going to try and fix it and we'll take",
    "start": "2987440",
    "end": "2993839"
  },
  {
    "text": "control of uh those first five bytes for you in a few future release so you can do six from text just Json directly",
    "start": "2993839",
    "end": "3000240"
  },
  {
    "text": "instead CU it's a pain however in here you can see what we're doing is we're",
    "start": "3000240",
    "end": "3005440"
  },
  {
    "text": "saying where is the schema registry it's a service that lives somewhere we're going need some confli to identify it",
    "start": "3005440",
    "end": "3010760"
  },
  {
    "text": "we're going to use the uh a confluent version of the Jason serializer you can see the message we're using here is a",
    "start": "3010760",
    "end": "3018040"
  },
  {
    "text": "string but our body is now a net type transmogrification settings and we are",
    "start": "3018040",
    "end": "3023400"
  },
  {
    "text": "going to serialize in the set value serializer we're going to tell it how to take the",
    "start": "3023400",
    "end": "3029799"
  },
  {
    "text": "value you have which would be a one of transmogrification settings and turn it",
    "start": "3029799",
    "end": "3034960"
  },
  {
    "text": "into a body notice also that it says async over async we are using a",
    "start": "3034960",
    "end": "3040160"
  },
  {
    "text": "non-async producer because it's more efficient but Jason serialization is",
    "start": "3040160",
    "end": "3046000"
  },
  {
    "text": "async so we have to do as async over async which of course is the problem of I'm doing blocking while over Ayn it is",
    "start": "3046000",
    "end": "3053119"
  },
  {
    "text": "painful again that's why we're going to try and fix it for you in brighter um all right uh but you have to live",
    "start": "3053119",
    "end": "3060680"
  },
  {
    "text": "with the world right so let's show you the schema registry",
    "start": "3060680",
    "end": "3068200"
  },
  {
    "text": "demo okay so this is only really so that you can",
    "start": "3068440",
    "end": "3074000"
  },
  {
    "text": "tell that there's no nothing up my sleeve where is demo 6 hiding what have I done there that's weird demo five demo",
    "start": "3074000",
    "end": "3081960"
  },
  {
    "text": "six there we go all right so the producer what we care about",
    "start": "3081960",
    "end": "3087200"
  },
  {
    "text": "the producer in its dispatcher you can see now we have effectively changed to be a string of",
    "start": "3087200",
    "end": "3094640"
  },
  {
    "text": "transmogrification settings we're using the value serializer so we're saying how",
    "start": "3094640",
    "end": "3099799"
  },
  {
    "text": "are you going to serialize Value types before we're just doing it manually and we're saying here okay we're going to",
    "start": "3099799",
    "end": "3106119"
  },
  {
    "text": "take that and serialize it to Jason on The Wire uh the same code as you saw before",
    "start": "3106119",
    "end": "3111559"
  },
  {
    "text": "but you can see when we produce down here the message now's value is the trans modification settings rather than",
    "start": "3111559",
    "end": "3118319"
  },
  {
    "text": "a string so that's what we're going to send over the wire uh and we're going to tell it to",
    "start": "3118319",
    "end": "3124920"
  },
  {
    "text": "use the schema registry config here the cach schema registry just means it's a",
    "start": "3124920",
    "end": "3132000"
  },
  {
    "text": "schema registry that once you've read the schema will store it in my program so that I don't have to keep calling if",
    "start": "3132000",
    "end": "3137760"
  },
  {
    "text": "it doesn't exist all right so demo six wow the spoilers are rich",
    "start": "3137760",
    "end": "3145040"
  },
  {
    "text": "today",
    "start": "3145040",
    "end": "3148040"
  },
  {
    "text": "okay all right you mainly care about this side",
    "start": "3150240",
    "end": "3155280"
  },
  {
    "text": "the other side is what you've seen before my name is uh",
    "start": "3155280",
    "end": "3162559"
  },
  {
    "text": "Tommy and Tommy wants to become a frog okay so what I'm spitting out there",
    "start": "3162559",
    "end": "3170240"
  },
  {
    "text": "is the schema for you just so you can see it in line so you can see effectively what",
    "start": "3170240",
    "end": "3176119"
  },
  {
    "text": "I've done done is created a Json schema and it's telling you effectively that it",
    "start": "3176119",
    "end": "3181599"
  },
  {
    "text": "is an object it's Json right with properties basically of name and transformation okay and you can see the",
    "start": "3181599",
    "end": "3187960"
  },
  {
    "text": "set M STS before you can see your schemas in the schema registry in the",
    "start": "3187960",
    "end": "3194400"
  },
  {
    "text": "confluent UI so you can effectively go there and that basically is a slightly clearer view of the scheme we' just",
    "start": "3194400",
    "end": "3199960"
  },
  {
    "text": "created didn't exist before and we have a compatibility of backward probably forward would be better but that's just",
    "start": "3199960",
    "end": "3205799"
  },
  {
    "text": "the default that it's going to give me and it's telling me that is basically the message that I'm sending if I come",
    "start": "3205799",
    "end": "3211240"
  },
  {
    "text": "over to topics in my transmogrification then effectively in",
    "start": "3211240",
    "end": "3216480"
  },
  {
    "text": "my messages uh you can see now this one has",
    "start": "3216480",
    "end": "3222000"
  },
  {
    "text": "effectively Tommy being transformed into a frog in Json rather than the plain",
    "start": "3222000",
    "end": "3227319"
  },
  {
    "text": "text values we were using earlier you can send whatever you want",
    "start": "3227319",
    "end": "3233559"
  },
  {
    "text": "plain text right so if you don't want to use the scheme registry you can just send your own Json in right don't have to worry about that",
    "start": "3233559",
    "end": "3240720"
  },
  {
    "text": "okay so uh I can then consume that just so you can see the loop uh there's",
    "start": "3240720",
    "end": "3246119"
  },
  {
    "text": "nothing uh to see here we haven't seen before should begin the",
    "start": "3246119",
    "end": "3251720"
  },
  {
    "text": "transformation and effectively Tommy has become a frog uh obviously the code in demo 6 for",
    "start": "3251720",
    "end": "3261359"
  },
  {
    "text": "the consumer will recognize",
    "start": "3261359",
    "end": "3267960"
  },
  {
    "text": "uh that it's doing this transmogrification here you see there's no Handler being passed in for basically",
    "start": "3268640",
    "end": "3274119"
  },
  {
    "text": "the transformation and that is because we have a deserializer on this",
    "start": "3274119",
    "end": "3279599"
  },
  {
    "text": "side so we set a deserializer to say I expect that what to becomes in to be a",
    "start": "3279599",
    "end": "3285079"
  },
  {
    "text": "type and I expect you to deserialize it for me we also have a key deserializer",
    "start": "3285079",
    "end": "3290559"
  },
  {
    "text": "just saying hey the format the key is utf8 in the string right that's to complete that work all right",
    "start": "3290559",
    "end": "3298319"
  },
  {
    "text": "okay 53 seconds all right so that is",
    "start": "3301200",
    "end": "3306520"
  },
  {
    "text": "Kafka we talked about Kafka itself this thing that comes out of LinkedIn is originally comes out of data engineering",
    "start": "3306520",
    "end": "3313280"
  },
  {
    "text": "Let's us write to an appendonly log let's just have producers and write to that log and consumers that read from",
    "start": "3313280",
    "end": "3319240"
  },
  {
    "text": "the log consumers are single threaded uh so in order to preserve ordering so we",
    "start": "3319240",
    "end": "3324480"
  },
  {
    "text": "need to have multiple partitions in order to scale so that we can have multiple consumers all reading their own",
    "start": "3324480",
    "end": "3332039"
  },
  {
    "text": "partition talked about how we did that from C there's a C client generally you get the one from confluent we can use a",
    "start": "3332039",
    "end": "3338559"
  },
  {
    "text": "producer Builder to create a producer has a produce method which writes to a buffer and then it has a thread that",
    "start": "3338559",
    "end": "3344000"
  },
  {
    "text": "reads from that buffer and pushes your work to CFA you need to remember to flush we have a consumer we tend to run",
    "start": "3344000",
    "end": "3349960"
  },
  {
    "text": "those in a message pump that's basically an ongoing while loop we take the body we do a translation and say what is that",
    "start": "3349960",
    "end": "3356760"
  },
  {
    "text": "right c will do that for us if we if we wanted to and then we handle that message talked about under the hood we",
    "start": "3356760",
    "end": "3363280"
  },
  {
    "text": "said typically cfra is a cluster right a number of nodes we have a leader",
    "start": "3363280",
    "end": "3369400"
  },
  {
    "text": "essentially and some followers we write to the leader we can read from the leader or the followers the followers",
    "start": "3369400",
    "end": "3375160"
  },
  {
    "text": "are mainly there for resilience we talked about reliable producers if we want to essentially make sure that we've",
    "start": "3375160",
    "end": "3381599"
  },
  {
    "text": "written to all of the nodes in the cluster which is typically what we want to do we say all",
    "start": "3381599",
    "end": "3386839"
  },
  {
    "text": "we can use that fact we got this thread reading from a buffer to do retries at a certain interval to make sure we've",
    "start": "3386839",
    "end": "3392280"
  },
  {
    "text": "written stuff we can also ask it to D duplicate if we're worried about duplication when we write and we tend to",
    "start": "3392280",
    "end": "3398960"
  },
  {
    "text": "really only want one thread writing from that buffer unless we know that we don't require ordering the messages that we're",
    "start": "3398960",
    "end": "3405400"
  },
  {
    "text": "sending on a consumer the key thing we have to do on a consumer is tell cafer",
    "start": "3405400",
    "end": "3410680"
  },
  {
    "text": "about what we've read the default will simply tell it that anything we have read without processing it it will",
    "start": "3410680",
    "end": "3417119"
  },
  {
    "text": "commit those offsets generally we don't want to do that generally what we want actually want to do is wait until we've",
    "start": "3417119",
    "end": "3422280"
  },
  {
    "text": "done our work and then commit the offset so that if we crash something else else we'll pick it up and essentially to do",
    "start": "3422280",
    "end": "3428720"
  },
  {
    "text": "that we have to take control of how we commit right you may want to say enable",
    "start": "3428720",
    "end": "3433960"
  },
  {
    "text": "offset store true use typically and say enable auto um uh enable offset store",
    "start": "3433960",
    "end": "3440240"
  },
  {
    "text": "store false enable an auto commit true to say you take care of flushing those commits but I want to tell you when to",
    "start": "3440240",
    "end": "3446319"
  },
  {
    "text": "write them you can go more manual in which case you take you take control of the commit process itself and you get",
    "start": "3446319",
    "end": "3452240"
  },
  {
    "text": "into more advanced stuff you have to be aware they need to revoke partitions okay talked about serializers",
    "start": "3452240",
    "end": "3459480"
  },
  {
    "text": "and we said hey Kafka basically can serialize for you into Avro Json uh and",
    "start": "3459480",
    "end": "3465960"
  },
  {
    "text": "uh protobuf and you can effectively check against the schema registry that the work you're sending is not going to",
    "start": "3465960",
    "end": "3471640"
  },
  {
    "text": "break Downstream consumers and you can check as a consumer that you would be able to understand the work coming in",
    "start": "3471640",
    "end": "3476839"
  },
  {
    "text": "but more typically that's used for dynamic purposes use a schema registry you register B the schema registry you",
    "start": "3476839",
    "end": "3482960"
  },
  {
    "text": "get auto registration if you want it for something that's not been seen often you don't use that in production often in",
    "start": "3482960",
    "end": "3489280"
  },
  {
    "text": "production you say you need to manually register the schemer always um you can then use backwards forwards uh rules to",
    "start": "3489280",
    "end": "3496799"
  },
  {
    "text": "determine what your compatibility is but be aware if you do that one of the quirks of CFA is the magic five bytes",
    "start": "3496799",
    "end": "3504640"
  },
  {
    "text": "that you'll need to insert because the the schema reg the schema ID lives in the body because it was the standard was",
    "start": "3504640",
    "end": "3511039"
  },
  {
    "text": "created at a time when Kafka didn't have headers okay some links uh the sample",
    "start": "3511039",
    "end": "3518799"
  },
  {
    "text": "code is on my GitHub so you can go and grab it from there this presentation is",
    "start": "3518799",
    "end": "3524799"
  },
  {
    "text": "also in uh GitHub so you can go and grab it from there there is a longer version of this",
    "start": "3524799",
    "end": "3530760"
  },
  {
    "text": "presentation uh one that's not so one uh c of.net d one c.net NDC Oslo the longer",
    "start": "3530760",
    "end": "3537839"
  },
  {
    "text": "presentation has some material on brighter and how brighter basically helps you with cafka other topics we",
    "start": "3537839",
    "end": "3544559"
  },
  {
    "text": "didn't really get into CFA connect so it's tooling that lets you essentially",
    "start": "3544559",
    "end": "3549640"
  },
  {
    "text": "read from things like data stores or other cues convert it into a CFA topic",
    "start": "3549640",
    "end": "3554920"
  },
  {
    "text": "or write from a CFA topic to to those kind of tools I prefer what was benthos",
    "start": "3554920",
    "end": "3560119"
  },
  {
    "text": "and has recently been acquired and become red panda connect I think it's a better tool K SQL the promise was",
    "start": "3560119",
    "end": "3566319"
  },
  {
    "text": "streams are an infers database so effectively I can re I can listen to them and in over a window build a table",
    "start": "3566319",
    "end": "3573839"
  },
  {
    "text": "which you could then query ksql has turned out not to be the success I think confluent hoped it was because that",
    "start": "3573839",
    "end": "3580599"
  },
  {
    "text": "isn't actually as useful as scenarios you think streams applications so streams applications when you want to",
    "start": "3580599",
    "end": "3586200"
  },
  {
    "text": "process a lot of data uh you read some you listen to data on a topic and you write to another topic so you read from",
    "start": "3586200",
    "end": "3592000"
  },
  {
    "text": "one right to another transactionally mostly support for that only exists in Java there is a c p i",
    "start": "3592000",
    "end": "3599760"
  },
  {
    "text": "can't vouch for how good it is um and that is it thank you very very much",
    "start": "3599760",
    "end": "3607920"
  }
]