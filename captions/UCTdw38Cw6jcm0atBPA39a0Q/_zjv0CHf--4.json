[
  {
    "text": "okay hi and welcome to my session on exploring Source generators so my name",
    "start": "2820",
    "end": "8880"
  },
  {
    "text": "is Martin I'm from Vienna in Austria I work for a key to Emory you can also",
    "start": "8880",
    "end": "14219"
  },
  {
    "text": "find all the source code I'm showing on GitHub um also I'm very active on stack",
    "start": "14219",
    "end": "19440"
  },
  {
    "text": "Overflow usually in the MS build area and a work for a company called Tito Every Which also has some offices in",
    "start": "19440",
    "end": "25920"
  },
  {
    "text": "Norway so what I want to do with you today is I want to talk a bit about the motivation",
    "start": "25920",
    "end": "31800"
  },
  {
    "text": "behind Source generators the house and wise but I also want to show you some features in.net 6 and.net7 that you can",
    "start": "31800",
    "end": "39000"
  },
  {
    "text": "actually use to improve your applications a bit and there are some Source generators that",
    "start": "39000",
    "end": "44879"
  },
  {
    "text": "help you with that and you may already be using some of them possibly without knowing that",
    "start": "44879",
    "end": "50219"
  },
  {
    "text": "also I want to show you how to write a custom source generators so we'll be doing an N plus one version of the",
    "start": "50219",
    "end": "57539"
  },
  {
    "text": "property change generator and I'll also show you a bit about the new features that are in Visual Studio",
    "start": "57539",
    "end": "64080"
  },
  {
    "text": "2022 called incremental generators and give a few tips and tricks and pointers",
    "start": "64080",
    "end": "69119"
  },
  {
    "text": "what you should do if you really want to write your own generator and want to ship it to production",
    "start": "69119",
    "end": "74700"
  },
  {
    "text": "so um on meta programming like it's a very helpful tool you do want to avoid",
    "start": "74700",
    "end": "80460"
  },
  {
    "text": "writing boilerplate code so when you find yourself writing the same stuff over and over again you usually want to",
    "start": "80460",
    "end": "86640"
  },
  {
    "text": "automate that a bit so things like that have been around for quite some time but",
    "start": "86640",
    "end": "91799"
  },
  {
    "text": "there are different like things you can do with it so you can try to rewrite",
    "start": "91799",
    "end": "97320"
  },
  {
    "text": "your code for example aspect oriented programming does that if you want to do some fancy data log detection or a",
    "start": "97320",
    "end": "104280"
  },
  {
    "text": "thread synchronization if you want to do debugging or logging every method call that exists there are tools that can do",
    "start": "104280",
    "end": "110040"
  },
  {
    "text": "that um but I think the most common ones are usually serialization when you have like",
    "start": "110040",
    "end": "115380"
  },
  {
    "text": "Json serialization logic XML serialization logic you want it to be fast and that means it should be near",
    "start": "115380",
    "end": "122579"
  },
  {
    "text": "native code so not a lot of reflection method invoking going on but rather",
    "start": "122579",
    "end": "127920"
  },
  {
    "text": "coded was actually generated either at runtime or at compile time and also what you would like to have",
    "start": "127920",
    "end": "134340"
  },
  {
    "text": "done is use some open API specification or wsdl schema to do some API calls so",
    "start": "134340",
    "end": "143400"
  },
  {
    "text": "usually you have some known schema or some data and you just want to have like",
    "start": "143400",
    "end": "148620"
  },
  {
    "text": "the code generated to for either the data models or the data access logic",
    "start": "148620",
    "end": "154099"
  },
  {
    "text": "in.net there are a few ways to accomplish that first of all there is reflection it's a",
    "start": "154099",
    "end": "160860"
  },
  {
    "text": "very powerful tool it's very mature in.net but it's also not the fastest thing you",
    "start": "160860",
    "end": "167640"
  },
  {
    "text": "can do especially reflection is usually done when you try to do something the first time",
    "start": "167640",
    "end": "172739"
  },
  {
    "text": "so it's one of the things that adds time to any startup time you have just",
    "start": "172739",
    "end": "179160"
  },
  {
    "text": "scanning all your classes scanning attributes generating some metadata that you would",
    "start": "179160",
    "end": "184800"
  },
  {
    "text": "need to know for example for Json serialization and something you could probably also do ahead of time",
    "start": "184800",
    "end": "191459"
  },
  {
    "text": "then there is il generator so you can dynamically emit the Intermediate",
    "start": "191459",
    "end": "196680"
  },
  {
    "text": "Language code at runtime this is usually done in in combination with reflection",
    "start": "196680",
    "end": "202080"
  },
  {
    "text": "so you would for example generate a method that does all these set calls based on some data that is coming in so",
    "start": "202080",
    "end": "208800"
  },
  {
    "text": "you don't have to call do the reflection dot uh or the method info dot invoke",
    "start": "208800",
    "end": "213840"
  },
  {
    "text": "calls all the time that is this is quite hard to do it's a pain to debug if there's anything",
    "start": "213840",
    "end": "220500"
  },
  {
    "text": "wrong with that and again it is treated so if you want to run in ahead of time",
    "start": "220500",
    "end": "225840"
  },
  {
    "text": "compiled runtimes it might be a bit problematic there are also custom build steps so for",
    "start": "225840",
    "end": "234420"
  },
  {
    "text": "example for nearly two decades we have XML serializer which has a build flag",
    "start": "234420",
    "end": "240840"
  },
  {
    "text": "that you can cited the project properties we say yeah I want to have all the serialization assemblies",
    "start": "240840",
    "end": "246060"
  },
  {
    "text": "generated ahead of time so you get the dot XML serializer.dll which already contains the XML",
    "start": "246060",
    "end": "252060"
  },
  {
    "text": "serialization logic so that reduces the startup time that is needed for doing",
    "start": "252060",
    "end": "257880"
  },
  {
    "text": "the first XML serializations and also thinking.net framework the first time",
    "start": "257880",
    "end": "263160"
  },
  {
    "text": "you use x minus 0 lens is actually not thread safe if you don't do that so at",
    "start": "263160",
    "end": "268199"
  },
  {
    "text": "least it used to be also is Peanut core used to generate its own views dll that",
    "start": "268199",
    "end": "274080"
  },
  {
    "text": "changed in.netics and of course if you have some tools that for example protobuf you have some",
    "start": "274080",
    "end": "279180"
  },
  {
    "text": "Proto files you would have some tool that runs during the build process that takes these Proto files and generates",
    "start": "279180",
    "end": "284759"
  },
  {
    "text": "some c-sharp code out of that what you can also do in custom build steps is to the reverse so you could",
    "start": "284759",
    "end": "290580"
  },
  {
    "text": "have code or compile code and then generate some definitions or schema files from that so that's also something",
    "start": "290580",
    "end": "297300"
  },
  {
    "text": "you would usually do in a custom build step and of course there is there are IL",
    "start": "297300",
    "end": "303419"
  },
  {
    "text": "briefing tools so these are tools that technically it's also build step but it",
    "start": "303419",
    "end": "309479"
  },
  {
    "text": "looks at your compiled PLL file and modifies it in some way so it doesn't",
    "start": "309479",
    "end": "314699"
  },
  {
    "text": "really touch the source code so for example no C sharp no Visual Basic it would just operate on the Intermediate",
    "start": "314699",
    "end": "320340"
  },
  {
    "text": "Language level on the dll file that's also very very hard to do and",
    "start": "320340",
    "end": "327180"
  },
  {
    "text": "very easy to to mess up so there is a lot of time involved in doing that so",
    "start": "327180",
    "end": "333660"
  },
  {
    "text": "that's also by the photo project switch the license to yeah you should contribute financially to a project if",
    "start": "333660",
    "end": "340500"
  },
  {
    "text": "you want any changes to be made and also post job is a tool that I highly recommend for some Advanced scenarios",
    "start": "340500",
    "end": "347100"
  },
  {
    "text": "especially at aspect oriented programming but in C sharp 9 so that's now nearly",
    "start": "347100",
    "end": "355560"
  },
  {
    "text": "two years ago we get a new feature in.net or actually a new compiler called Source generators",
    "start": "355560",
    "end": "361800"
  },
  {
    "text": "um those the scenarios that are supported by this feature is actually limited to adding c-sharp code to your",
    "start": "361800",
    "end": "367500"
  },
  {
    "text": "project so you cannot really rewrite anything so if you have an existing method",
    "start": "367500",
    "end": "373320"
  },
  {
    "text": "implementation you can't really change that so if you need to do that IL weaving is probably still the best",
    "start": "373320",
    "end": "379620"
  },
  {
    "text": "option out there um otherwise you would have to do some fancy magic with interfaces and so on",
    "start": "379620",
    "end": "389000"
  },
  {
    "text": "um but the advantages it runs directly in the compiler so you don't have to use",
    "start": "389039",
    "end": "394860"
  },
  {
    "text": "any Ms builds build build glue logic and also it can be done in a single compiler",
    "start": "394860",
    "end": "400199"
  },
  {
    "text": "run so for example there is one generator that I wrote some time ago",
    "start": "400199",
    "end": "405780"
  },
  {
    "text": "that used a different framework but the downside was that it had to load all the",
    "start": "405780",
    "end": "411000"
  },
  {
    "text": "c-sharp code piracy generate a semantic model generate the actual code and then throw",
    "start": "411000",
    "end": "418440"
  },
  {
    "text": "it all away so you basically had a whole compiler run before the actual compiler run and that is quite expensive if you",
    "start": "418440",
    "end": "427199"
  },
  {
    "text": "can do it directly in the compiler it's a bit easier so the compiler at some",
    "start": "427199",
    "end": "432360"
  },
  {
    "text": "point just stops asks your generator yeah is there anything you want to contribute here's the current state of",
    "start": "432360",
    "end": "438120"
  },
  {
    "text": "the compilation here's everything I've already parsed and analyzed and then you can just add more source code to it and",
    "start": "438120",
    "end": "445380"
  },
  {
    "text": "it would continue you can also have multiple generators they would all see the same Source state",
    "start": "445380",
    "end": "453240"
  },
  {
    "text": "so if you have one generator that generates some code it can currently not",
    "start": "453240",
    "end": "458819"
  },
  {
    "text": "chain uh the generators one after each other",
    "start": "458819",
    "end": "463860"
  },
  {
    "text": "just the most discussed topic is just how would they do the ordering and um",
    "start": "463860",
    "end": "470280"
  },
  {
    "text": "to not mess up anything basically there's also some links I want to point to so just the source generator cookbook",
    "start": "470280",
    "end": "477560"
  },
  {
    "text": "that basically tells you how to use most of the features that are available and",
    "start": "477560",
    "end": "484080"
  },
  {
    "text": "there are some SDK samples as well but and I think that's the most helpful there are lists of source generators",
    "start": "484080",
    "end": "490860"
  },
  {
    "text": "that you can just get from nougat and using your project so if you find anything that's useful to you have a",
    "start": "490860",
    "end": "497940"
  },
  {
    "text": "look or if you find yourself writing something that you should I think yeah someone probably has already",
    "start": "497940",
    "end": "504060"
  },
  {
    "text": "implemented that go check here so with that I actually want to have a",
    "start": "504060",
    "end": "510720"
  },
  {
    "text": "look at the salt generators that are now in.net six and seven so we consult generators then a year later the",
    "start": "510720",
    "end": "516719"
  },
  {
    "text": "first.net features started using them and now even more so",
    "start": "516719",
    "end": "521820"
  },
  {
    "text": "let's have a look",
    "start": "521820",
    "end": "524899"
  },
  {
    "text": "so the first thing I want to show is actually Json serialization so in.net we had this kind of new system",
    "start": "529740",
    "end": "538800"
  },
  {
    "text": "text Json namespace that allows us to basically serialize and deserialize Json files so I have a",
    "start": "538800",
    "end": "546959"
  },
  {
    "text": "sample Json file in here I have a class that is supposed to hold the data",
    "start": "546959",
    "end": "553920"
  },
  {
    "text": "and now let's try to run this",
    "start": "553920",
    "end": "560480"
  },
  {
    "text": "okay it worked it read both entries and then serialized them again to a Json",
    "start": "561240",
    "end": "566519"
  },
  {
    "text": "file or Json text the downside with that approach is that",
    "start": "566519",
    "end": "571980"
  },
  {
    "text": "system taxation Json on the first call to the Json serializer would have a look at the class uh do some reflection to",
    "start": "571980",
    "end": "579180"
  },
  {
    "text": "find out which properties are used which types are used how to do any type conversions and for serialization it",
    "start": "579180",
    "end": "585779"
  },
  {
    "text": "would also use reflection or generation to write out those those Json",
    "start": "585779",
    "end": "592680"
  },
  {
    "text": "texts but if I want to pre-compile that logic because the class is known at compile",
    "start": "592680",
    "end": "599100"
  },
  {
    "text": "time I can also generate that information at compile time and the way to do this",
    "start": "599100",
    "end": "605640"
  },
  {
    "text": "is to create in a class that derives from Json serializer context so on that",
    "start": "605640",
    "end": "611580"
  },
  {
    "text": "context I can put attributes that tell the system yeah I want to be",
    "start": "611580",
    "end": "618959"
  },
  {
    "text": "able to serialize and deserialize lists of person and it would do everything that would be",
    "start": "618959",
    "end": "624660"
  },
  {
    "text": "necessary to pre-generate that code so that should already work",
    "start": "624660",
    "end": "631380"
  },
  {
    "text": "let's have a look at the dependencies so the way these generators work is they're",
    "start": "631380",
    "end": "637800"
  },
  {
    "text": "actually compiler plugins and they make use of an existing compiler plugin functionality which is analyzes those",
    "start": "637800",
    "end": "644940"
  },
  {
    "text": "are the things that give you the squiggly lines and the completion options or the replacement options and",
    "start": "644940",
    "end": "651480"
  },
  {
    "text": "Coatings and so on and generate this use basically the same interface so a",
    "start": "651480",
    "end": "656579"
  },
  {
    "text": "generator can also emit the agnostics so if I make some mistake or something can't be generated a generator could",
    "start": "656579",
    "end": "663240"
  },
  {
    "text": "also emit some Diagnostics so and in .net6 and above we should have the",
    "start": "663240",
    "end": "671459"
  },
  {
    "text": "Json Source generator analyzer and that generated a lot of code for us",
    "start": "671459",
    "end": "677339"
  },
  {
    "text": "already so since the thing is partial let's go to",
    "start": "677339",
    "end": "683459"
  },
  {
    "text": "some interesting thing in here so it had a look at all the types that were necessary so we have an integer we",
    "start": "683459",
    "end": "690060"
  },
  {
    "text": "have strings we have I list but we also have person and what it does it generated a lot of",
    "start": "690060",
    "end": "695399"
  },
  {
    "text": "code that contains all the information it would normally try to to derive from a class at the",
    "start": "695399",
    "end": "702240"
  },
  {
    "text": "first time startup so for example it has a list of all the properties in here so it knows there is",
    "start": "702240",
    "end": "708660"
  },
  {
    "text": "a first name property it generates a static getter and Setter function",
    "start": "708660",
    "end": "715860"
  },
  {
    "text": "has all the metadata and so on for all the properties that are involved in my object or the object",
    "start": "715860",
    "end": "723000"
  },
  {
    "text": "contains also that's something should not be serialized like in this case or does not",
    "start": "723000",
    "end": "729180"
  },
  {
    "text": "have a center if you have some converters or something more advanced",
    "start": "729180",
    "end": "734459"
  },
  {
    "text": "um that might actually not be possible so if you do some modifications at runtime you can't use it but everything that is",
    "start": "734459",
    "end": "741360"
  },
  {
    "text": "known at compile time and doesn't change go ahead and use data but also in addition to this reflection",
    "start": "741360",
    "end": "747720"
  },
  {
    "text": "functionality um it also has a serialized handle so it really generates the code right start",
    "start": "747720",
    "end": "754860"
  },
  {
    "text": "object right string right string right property name Right End object so it really has the",
    "start": "754860",
    "end": "761459"
  },
  {
    "text": "code to just generate all the tokens that are necessary uh directly into an utf-8 Json writer so that is already",
    "start": "761459",
    "end": "769200"
  },
  {
    "text": "pre-compiled it's also possible to customize that",
    "start": "769200",
    "end": "775680"
  },
  {
    "text": "so",
    "start": "775680",
    "end": "778399"
  },
  {
    "text": "so you can specify yeah please emit everything you can which is the default but it can also tell you just emit this",
    "start": "787139",
    "end": "794339"
  },
  {
    "text": "metadata that you that you collected for reflection or just generate the serialization logic so if there are some",
    "start": "794339",
    "end": "800700"
  },
  {
    "text": "more advanced features of system text Json that you would use that are incompatible with that feature or that",
    "start": "800700",
    "end": "806579"
  },
  {
    "text": "code generation you can pick and choose what you need in here",
    "start": "806579",
    "end": "811800"
  },
  {
    "text": "um I've had no problems using the default and the way he would use that",
    "start": "811800",
    "end": "818660"
  },
  {
    "text": "isn't a deserialized method I can use my personal Json context",
    "start": "818700",
    "end": "826019"
  },
  {
    "text": "the default instance and I list person now I no longer need that generic annotations",
    "start": "826019",
    "end": "833700"
  },
  {
    "text": "and it will use the pre-generated methods already same goes for the serialization so I",
    "start": "833700",
    "end": "840180"
  },
  {
    "text": "have the serialized call I can call the person Json context",
    "start": "840180",
    "end": "846439"
  },
  {
    "text": "default ilist person and that should then use the serialization handled it was",
    "start": "847320",
    "end": "853200"
  },
  {
    "text": "pre-generated let's have a quick test perfect and it",
    "start": "853200",
    "end": "858300"
  },
  {
    "text": "works so something you can probably already make use of in any web apis in any API",
    "start": "858300",
    "end": "866639"
  },
  {
    "text": "calls such as Json serialization logic it will make the star first time startups a bit faster especially if we",
    "start": "866639",
    "end": "873120"
  },
  {
    "text": "have very large data models and need jobs that complete quick with low CPU",
    "start": "873120",
    "end": "879060"
  },
  {
    "text": "like I am currently doing in kubernetes so that helps a lot",
    "start": "879060",
    "end": "885060"
  },
  {
    "text": "okay so the next thing I want to show you",
    "start": "885060",
    "end": "890720"
  },
  {
    "text": "is actually logging so um we have this Microsoft extensions",
    "start": "895680",
    "end": "901740"
  },
  {
    "text": "logging functionality that provides all the eye logger and logging abstractions so you no longer need to be specific to",
    "start": "901740",
    "end": "909120"
  },
  {
    "text": "for example lock for net or Siri lock you can have this abstraction layer uh and then you would usually call this",
    "start": "909120",
    "end": "915899"
  },
  {
    "text": "DOT log information uh and so on and there are now there's now a",
    "start": "915899",
    "end": "921600"
  },
  {
    "text": "generator that helps you do that um and be a little bit more performant and also if you have any",
    "start": "921600",
    "end": "929220"
  },
  {
    "text": "um things that have context so for example if you have um if those",
    "start": "929220",
    "end": "935100"
  },
  {
    "text": "the order of these parameters don't match the call or the the call State or",
    "start": "935100",
    "end": "941279"
  },
  {
    "text": "the um order of did you want to put the order that you want to pass the parameters it",
    "start": "941279",
    "end": "948060"
  },
  {
    "text": "can also generate some structures just let me show you so",
    "start": "948060",
    "end": "953240"
  },
  {
    "text": "the way we do this is we Mark classes partial",
    "start": "953779",
    "end": "958760"
  },
  {
    "text": "and then we can create a partial function and with the parameters that we need",
    "start": "959399",
    "end": "964500"
  },
  {
    "text": "and tell the generator Gap please generate a login call for me with our message template and the log level",
    "start": "964500",
    "end": "973100"
  },
  {
    "text": "and I should be able",
    "start": "974639",
    "end": "978259"
  },
  {
    "text": "to use that in here and what this generates",
    "start": "979800",
    "end": "986000"
  },
  {
    "text": "so this is now locking generators",
    "start": "986880",
    "end": "992959"
  },
  {
    "text": "is first of all it already generates some callback",
    "start": "994500",
    "end": "1000980"
  },
  {
    "text": "functions so we have things um already defined globally but it also emits the is enabled call so we don't do",
    "start": "1000980",
    "end": "1008240"
  },
  {
    "text": "any serialization or string formatting if it's not naturally needed so if you're not logging",
    "start": "1008240",
    "end": "1014120"
  },
  {
    "text": "information level it would just skip it and then do the actual logging call if I switch things around and",
    "start": "1014120",
    "end": "1024040"
  },
  {
    "text": "change the order it should also generate a struct that holds the information and",
    "start": "1032059",
    "end": "1037579"
  },
  {
    "text": "has the appropriate tostring method so",
    "start": "1037579",
    "end": "1042640"
  },
  {
    "text": "just things to help out here what it does it just tries to find okay I'm on a class is there any eye logger or I",
    "start": "1042980",
    "end": "1049460"
  },
  {
    "text": "logger of T um member defined and it will just use that",
    "start": "1049460",
    "end": "1054500"
  },
  {
    "text": "one of course what I like to do is have some extensions so if you have some",
    "start": "1054500",
    "end": "1061820"
  },
  {
    "text": "extensions that also works if you have this eye logger and I want to look method enters and exits I can also do",
    "start": "1061820",
    "end": "1068840"
  },
  {
    "text": "that um with the generator also note I can also set the event that is event name",
    "start": "1068840",
    "end": "1074179"
  },
  {
    "text": "and so on so that should compile cleanly",
    "start": "1074179",
    "end": "1081519"
  },
  {
    "text": "so also now that we're talking about web applications so this is now a Razer Pages application so I have the",
    "start": "1083720",
    "end": "1092059"
  },
  {
    "text": "um",
    "start": "1092059",
    "end": "1094059"
  },
  {
    "text": "layout for example that is a razor page and the way Razer works is it actually generates c-sharp code for that page",
    "start": "1097640",
    "end": "1106039"
  },
  {
    "text": "and then treats it or use subject it at runtime",
    "start": "1106039",
    "end": "1111080"
  },
  {
    "text": "but um they introduced pre-compiled views so that would be done at compile",
    "start": "1111080",
    "end": "1116780"
  },
  {
    "text": "time and now this is actually moved to a source generator so I also did something else in here I",
    "start": "1116780",
    "end": "1123919"
  },
  {
    "text": "also set a magic property in the project file a mid compiler generated files so for example",
    "start": "1123919",
    "end": "1130940"
  },
  {
    "text": "if you did not have an using an IDE that actually shows you the analyzer output I",
    "start": "1130940",
    "end": "1137059"
  },
  {
    "text": "can also have a look at that code um in any other editor",
    "start": "1137059",
    "end": "1143780"
  },
  {
    "text": "so for example here it generates it in the object folder generated and then",
    "start": "1143780",
    "end": "1149299"
  },
  {
    "text": "every generate output would go in here so for example if you have a CI system and you",
    "start": "1149299",
    "end": "1155179"
  },
  {
    "text": "want to do some standard code analysis on even the generated code you can also do that to be able to do that",
    "start": "1155179",
    "end": "1162559"
  },
  {
    "text": "and what it then generates is a class for all the Razer files and then",
    "start": "1162559",
    "end": "1170480"
  },
  {
    "text": "have the right literals do some tag helper execution mixed with regulars and",
    "start": "1170480",
    "end": "1177380"
  },
  {
    "text": "so on so all the codes that developed in Razer is just compiled",
    "start": "1177380",
    "end": "1182660"
  },
  {
    "text": "put into a c-sharp version and then compiled alongside the other application code",
    "start": "1182660",
    "end": "1189400"
  },
  {
    "text": "and that is already in.net6 and.net7 so",
    "start": "1190580",
    "end": "1196460"
  },
  {
    "text": "let's switch back",
    "start": "1196460",
    "end": "1199600"
  },
  {
    "text": "one of the things that is actually new to.net7",
    "start": "1203360",
    "end": "1208000"
  },
  {
    "text": "is there is now a regular expression generator so if you're using.net7 and you find",
    "start": "1208640",
    "end": "1214220"
  },
  {
    "text": "yourself using regular Expressions quite often also Regional expressions are runtime compiled because they need to be",
    "start": "1214220",
    "end": "1221360"
  },
  {
    "text": "fast on execution so there is a state machine that builds up for a regular",
    "start": "1221360",
    "end": "1227720"
  },
  {
    "text": "expression and now in.net7 you can annotate a static partial method",
    "start": "1227720",
    "end": "1233780"
  },
  {
    "text": "with a generated regex annotation so for example this is an IP recorder",
    "start": "1233780",
    "end": "1239780"
  },
  {
    "text": "expression I can also have some additional parameters so if you want to",
    "start": "1239780",
    "end": "1244840"
  },
  {
    "text": "set some regex options you can do that as well",
    "start": "1244840",
    "end": "1250720"
  },
  {
    "text": "yeah GitHub copilot is is already suggesting me something that is not does",
    "start": "1251299",
    "end": "1256640"
  },
  {
    "text": "not make sense in here anymore and what it will generate",
    "start": "1256640",
    "end": "1263140"
  },
  {
    "text": "is code that I definitely do not want to write myself so first of all it gives you an",
    "start": "1263840",
    "end": "1269419"
  },
  {
    "text": "explanation of what this thing actually does so that is actually also visible in the",
    "start": "1269419",
    "end": "1274460"
  },
  {
    "text": "tooltip so if you want to see how your regular expression works that is the explanation",
    "start": "1274460",
    "end": "1281200"
  },
  {
    "text": "and then there is also the implementation so I'll just scroll over it so there are Loops",
    "start": "1282440",
    "end": "1289340"
  },
  {
    "text": "capture groups go to's with some branches so that's the",
    "start": "1289340",
    "end": "1294440"
  },
  {
    "text": "actual State implementation State machine implementation that you will get for your regular expression and that's actually quite a lot",
    "start": "1294440",
    "end": "1303279"
  },
  {
    "text": "and it has coaches but never mind and again that should be",
    "start": "1305000",
    "end": "1311960"
  },
  {
    "text": "faster than doing it doing it at runtime also internet 7",
    "start": "1311960",
    "end": "1318460"
  },
  {
    "text": ". so and I'll try to actually run that",
    "start": "1319940",
    "end": "1324460"
  },
  {
    "text": "if you have ever called into any native methods of things that are like a Windows API iOS Mac apis or just any C",
    "start": "1328460",
    "end": "1337940"
  },
  {
    "text": "library you would have these things that you marked with dll import",
    "start": "1337940",
    "end": "1343159"
  },
  {
    "text": "and a feature in.net7 is you can switch out dll import for Library import",
    "start": "1343159",
    "end": "1349159"
  },
  {
    "text": "um the thing um that would pre-generate all the marshalling logic",
    "start": "1349159",
    "end": "1354500"
  },
  {
    "text": "and also is has some different options to be able to configure it than the",
    "start": "1354500",
    "end": "1360440"
  },
  {
    "text": "traditional dll import also um so it gives a bit more control",
    "start": "1360440",
    "end": "1365620"
  },
  {
    "text": "but also does a lot of the code generation at compile time so for example there is a function in kernel 32",
    "start": "1365620",
    "end": "1372320"
  },
  {
    "text": "a dllcott glow Global memory status X that I can use to get the current memory",
    "start": "1372320",
    "end": "1379640"
  },
  {
    "text": "status so I have a struct in here that I pass back and forth between the the native code",
    "start": "1379640",
    "end": "1386360"
  },
  {
    "text": "let's just run that so it says my memory layout is 34",
    "start": "1386360",
    "end": "1393140"
  },
  {
    "text": "percent and I already have quite a large page",
    "start": "1393140",
    "end": "1398419"
  },
  {
    "text": "file and what this generates",
    "start": "1398419",
    "end": "1404139"
  },
  {
    "text": "first of all it generates unsafe code so it uses pointers so you",
    "start": "1413240",
    "end": "1418760"
  },
  {
    "text": "will need to enable antif code for the project that you're using it in but it will do all the marshalling",
    "start": "1418760",
    "end": "1425419"
  },
  {
    "text": "that's necessary in this case it's just getting a pointer for a struct to be able to pin it in memory and then",
    "start": "1425419",
    "end": "1432799"
  },
  {
    "text": "do the actual pin Vault call which is still done using dll import but any code",
    "start": "1432799",
    "end": "1437960"
  },
  {
    "text": "that the runtime would need to generate is already pre-generated there are",
    "start": "1437960",
    "end": "1443360"
  },
  {
    "text": "other examples I can show for example there is a Library I've written some",
    "start": "1443360",
    "end": "1449179"
  },
  {
    "text": "time ago to deal with Windows services",
    "start": "1449179",
    "end": "1453399"
  },
  {
    "text": "because uh in dotnet core one we did not have service base or any",
    "start": "1455120",
    "end": "1461360"
  },
  {
    "text": "um service based code that was in the license that allowed us to copy that so I had to kind of write my own so that",
    "start": "1461360",
    "end": "1467419"
  },
  {
    "text": "means interfacing with Windows apis to manage services and also manage be able",
    "start": "1467419",
    "end": "1472940"
  },
  {
    "text": "to run as a service and so there are a lot of interop calls I had to do and just to show things that",
    "start": "1472940",
    "end": "1480200"
  },
  {
    "text": "are possible for example I can set string martial Behavior so are these",
    "start": "1480200",
    "end": "1485480"
  },
  {
    "text": "you'd have 16 characters RPS and these strings in that case it's a Windows function that ends in a w so white",
    "start": "1485480",
    "end": "1492740"
  },
  {
    "text": "characters which means 16 bit strings also what you can do is you can use",
    "start": "1492740",
    "end": "1499090"
  },
  {
    "text": "[Music] um classes that derive from safe handle which help you with memory managing any",
    "start": "1499090",
    "end": "1506679"
  },
  {
    "text": "native resources that these native functions allocate so for example if I create a",
    "start": "1506679",
    "end": "1513860"
  },
  {
    "text": "create a service then it gives me back a service handle which I derived from Save handle that",
    "start": "1513860",
    "end": "1521059"
  },
  {
    "text": "basically holds the pointer and if I forget to close the thing the garbage collector would automatically do the",
    "start": "1521059",
    "end": "1528080"
  },
  {
    "text": "correct cleanup call and I would close the service handle",
    "start": "1528080",
    "end": "1533240"
  },
  {
    "text": "and if I want to have a look at the code that this now generates",
    "start": "1533240",
    "end": "1538340"
  },
  {
    "text": "it's a bit more so it knows how to do the uter 16 string",
    "start": "1538340",
    "end": "1545360"
  },
  {
    "text": "marshalling it knows how to do the call all the dangerous functions on service handle",
    "start": "1545360",
    "end": "1553120"
  },
  {
    "text": "also it skips locals in it to be just a little bit faster",
    "start": "1553120",
    "end": "1558740"
  },
  {
    "text": "takes care of the last error handling more dangerous functions",
    "start": "1558740",
    "end": "1565760"
  },
  {
    "text": "and also does the handle initialization of these safe handles so that's all code",
    "start": "1565760",
    "end": "1572000"
  },
  {
    "text": "that the runtime would normally generate or do dynamically but I can now",
    "start": "1572000",
    "end": "1577039"
  },
  {
    "text": "pre-generate it it's especially useful on platforms like iOS where you have ahead of time compilation and maybe need",
    "start": "1577039",
    "end": "1583940"
  },
  {
    "text": "to do some more specific marshalling of of things so",
    "start": "1583940",
    "end": "1591580"
  },
  {
    "text": "okay there is one more I will just quickly show that so for webassembly",
    "start": "1600380",
    "end": "1606559"
  },
  {
    "text": "there's not there also Now new interoperability functions basically JavaScript import JavaScript export so",
    "start": "1606559",
    "end": "1613340"
  },
  {
    "text": "if you're working directly with webassembly runtime um you can use those as well to basically call",
    "start": "1613340",
    "end": "1620360"
  },
  {
    "text": "um any JavaScript function of an imported module or make some functions available to JavaScript code so oops",
    "start": "1620360",
    "end": "1629679"
  },
  {
    "text": "for example I could call the myclass.reading it would call my class.greeting and I also this also",
    "start": "1631039",
    "end": "1640039"
  },
  {
    "text": "creates a fake or a model import and the things that will be available to the",
    "start": "1640039",
    "end": "1646279"
  },
  {
    "text": "runtime if you're using Razer or Blazer webassembly there's still the IHS",
    "start": "1646279",
    "end": "1652340"
  },
  {
    "text": "runtime which is still a preferred way to do interrupt especially because you can pass element reference for this back",
    "start": "1652340",
    "end": "1658279"
  },
  {
    "text": "and forth but if you want to do that manually that can be done as well",
    "start": "1658279",
    "end": "1665260"
  },
  {
    "text": "so since Visual Studio is currently not able to run that",
    "start": "1665260",
    "end": "1671860"
  },
  {
    "text": "um",
    "start": "1673400",
    "end": "1675400"
  },
  {
    "text": "nope kind",
    "start": "1681140",
    "end": "1684980"
  },
  {
    "text": "so greetings from localhost and that Port so we can actually see that this",
    "start": "1702860",
    "end": "1708380"
  },
  {
    "text": "works now",
    "start": "1708380",
    "end": "1712600"
  },
  {
    "text": "just a short recap again you have the Json serializer which with different options on what you might want to choose",
    "start": "1714380",
    "end": "1720860"
  },
  {
    "text": "for the different civilization objects it is actually a lot faster for the",
    "start": "1720860",
    "end": "1726260"
  },
  {
    "text": "attacking power Benchmark that does caching so the things where we have to do a lot of in-memory caching of Json",
    "start": "1726260",
    "end": "1731600"
  },
  {
    "text": "objects it showed a 40 increase just going from dot in five to six should already be a bit faster.net 7 as well",
    "start": "1731600",
    "end": "1739820"
  },
  {
    "text": "um if you want to use that in your web apis you can do that by configuring the Json objects of your apis where you can",
    "start": "1739820",
    "end": "1747020"
  },
  {
    "text": "add the context that you can have all your model classes in as well and if you're using HTTP client for any apis",
    "start": "1747020",
    "end": "1752960"
  },
  {
    "text": "you can also pass it to the um the context property or the property",
    "start": "1752960",
    "end": "1759860"
  },
  {
    "text": "that contains all the information directly to the HTTP client function so there are new overloads as well",
    "start": "1759860",
    "end": "1767179"
  },
  {
    "text": "if you run into troubles with the Razer Source generator you can still turn it off",
    "start": "1767179",
    "end": "1772460"
  },
  {
    "text": "um I did not have to do that except for one instance and that was fixed in a recent.net upgrade you have the login",
    "start": "1772460",
    "end": "1778399"
  },
  {
    "text": "generator you have DirectX generating.net7 Library",
    "start": "1778399",
    "end": "1783980"
  },
  {
    "text": "import and JS import but the fun part is when you write your own",
    "start": "1783980",
    "end": "1790539"
  },
  {
    "text": "so let's do that so um",
    "start": "1791779",
    "end": "1798320"
  },
  {
    "text": "again who has already implemented I notify property changed before",
    "start": "1798320",
    "end": "1804140"
  },
  {
    "text": "yeah so that's an interface that has one event that is supposed to fire whenever you",
    "start": "1804140",
    "end": "1809899"
  },
  {
    "text": "change a property so I have a view model here I want to have registered to a property",
    "start": "1809899",
    "end": "1816799"
  },
  {
    "text": "changed event log something and then change some properties",
    "start": "1816799",
    "end": "1822080"
  },
  {
    "text": "but I don't really have an implementation yet so there are already hundreds of ways to implement this I'm",
    "start": "1822080",
    "end": "1828679"
  },
  {
    "text": "going to add one more and that will use an interface to Define how the shape of the object should look",
    "start": "1828679",
    "end": "1835820"
  },
  {
    "text": "like and then an auto notify attribute that should Implement these properties and also the property changed event",
    "start": "1835820",
    "end": "1843919"
  },
  {
    "text": "the way I'm going to do this is I'm going to create a generator",
    "start": "1843919",
    "end": "1848960"
  },
  {
    "text": "so what I've done here is I referenced two nougat packages",
    "start": "1848960",
    "end": "1856419"
  },
  {
    "text": "that give me the Roslyn apis to implement both analyzers and Source generators and the magic interface is",
    "start": "1857659",
    "end": "1865100"
  },
  {
    "text": "isos generator I can also tell it if it should be available for c-sharp or Visual Basic or",
    "start": "1865100",
    "end": "1871520"
  },
  {
    "text": "both and it basically gives me two entry points to set something up that I need",
    "start": "1871520",
    "end": "1877159"
  },
  {
    "text": "to do anyhow and then the execution snap that is called during the compilation",
    "start": "1877159",
    "end": "1884179"
  },
  {
    "text": "so what I would do in here first of all how do you actually test this because if I load these things",
    "start": "1884179",
    "end": "1891080"
  },
  {
    "text": "while it I develop into Visual Studio um it will actually lock the assembly or",
    "start": "1891080",
    "end": "1896419"
  },
  {
    "text": "it cannot read the update so I really recommend developing this from unit tests",
    "start": "1896419",
    "end": "1901700"
  },
  {
    "text": "and the way you can do this is you can use a a framework called verify",
    "start": "1901700",
    "end": "1908240"
  },
  {
    "text": "which basically is like a half manual half automated tests so basically tell",
    "start": "1908240",
    "end": "1914240"
  },
  {
    "text": "it okay the state I'm in in now is what I want if anything changes ask me if",
    "start": "1914240",
    "end": "1919460"
  },
  {
    "text": "that's the correct change so something you can set up it's called verify Source generators uh I suggest",
    "start": "1919460",
    "end": "1927020"
  },
  {
    "text": "you look it up on GitHub if you actually need to do this but yeah I can set up a compilation with some source",
    "start": "1927020",
    "end": "1934159"
  },
  {
    "text": "code and run the test let's just see if that",
    "start": "1934159",
    "end": "1940520"
  },
  {
    "text": "fails",
    "start": "1940520",
    "end": "1943480"
  },
  {
    "text": "yeah it fails so let's Implement that first I want to make sure that I actually have that attribute available",
    "start": "1950120",
    "end": "1957620"
  },
  {
    "text": "so the way there are two ways I could do that I could add a reference to dll that",
    "start": "1957620",
    "end": "1963260"
  },
  {
    "text": "contains the attribute but I'm already generating source code so I'll just add a file that contains the attribute",
    "start": "1963260",
    "end": "1969500"
  },
  {
    "text": "so this Auto notify attribute will be part of the of the target project so I'm calling Regis of post initialization and",
    "start": "1969500",
    "end": "1976820"
  },
  {
    "text": "I will just add a source with the attribute containing this attribute code in this case there's also",
    "start": "1976820",
    "end": "1984200"
  },
  {
    "text": "the conditional attribute on here so if if I",
    "start": "1984200",
    "end": "1989260"
  },
  {
    "text": "compile for a configuration that is called just like the string the",
    "start": "1989260",
    "end": "1994519"
  },
  {
    "text": "attribute would actually end up in the resulting dll for anything else like debug release whatever it would just not",
    "start": "1994519",
    "end": "2001360"
  },
  {
    "text": "end up in the dll file then I actually want to",
    "start": "2001360",
    "end": "2006880"
  },
  {
    "text": "have some data structures that I want to use so I want to be looking at the",
    "start": "2006880",
    "end": "2013539"
  },
  {
    "text": "source code find all the things I need to generate and to hold that information I have this class",
    "start": "2013539",
    "end": "2019779"
  },
  {
    "text": "so I wanted to keep track of which type I need to generate and which interfaces",
    "start": "2019779",
    "end": "2025960"
  },
  {
    "text": "um those those need to implement a bit about the types later",
    "start": "2025960",
    "end": "2032320"
  },
  {
    "text": "and the way I look at the code is I can use a feature of Roslyn called syntax",
    "start": "2032320",
    "end": "2037659"
  },
  {
    "text": "receivers so this is basically a visitor pattern where a tablet compiler yeah",
    "start": "2037659",
    "end": "2043600"
  },
  {
    "text": "um I'm interested in any syntax please give me your syntax notes and it will tell me hey",
    "start": "2043600",
    "end": "2049839"
  },
  {
    "text": "um here is in syntax mode are you interested in that and that can do things with it so that's actually the",
    "start": "2049839",
    "end": "2056378"
  },
  {
    "text": "fastest way to iterate through the syntax tree because if I wanted to do it myself with",
    "start": "2056379",
    "end": "2062080"
  },
  {
    "text": "some for Loops or enumerators or even link that might be a bit slower",
    "start": "2062080",
    "end": "2068520"
  },
  {
    "text": "so I also need to tell it that I want to do that so I can register for the syntax",
    "start": "2070179",
    "end": "2076898"
  },
  {
    "text": "certification with my syntax receiver now speaking of syntax",
    "start": "2076899",
    "end": "2083638"
  },
  {
    "text": "um how do syntax trees actually look like so Rosalind has two kind of data",
    "start": "2084040",
    "end": "2089679"
  },
  {
    "text": "models for code one is the syntactic model which is basically just",
    "start": "2089679",
    "end": "2095919"
  },
  {
    "text": "the code and tokens that you wrote um lexically analyzed so it would know",
    "start": "2095919",
    "end": "2102339"
  },
  {
    "text": "okay class maybe this class keyword and so on and that is the semantic model",
    "start": "2102339",
    "end": "2107980"
  },
  {
    "text": "which actually tries to understand the code and map all the types so for",
    "start": "2107980",
    "end": "2113920"
  },
  {
    "text": "example I should know that um in that case this is a",
    "start": "2113920",
    "end": "2119700"
  },
  {
    "text": "syntactic model and it just says okay there's an identifier but no semantic information",
    "start": "2119700",
    "end": "2125859"
  },
  {
    "text": "about what that reference type actually is and also that is a tool that I highly",
    "start": "2125859",
    "end": "2132220"
  },
  {
    "text": "recommend sharplab.io it can show you syntax trees it can show you decompiled",
    "start": "2132220",
    "end": "2138040"
  },
  {
    "text": "versions so if you want to have a look at how some compiler features work behind the scenes you can have a look at that and you can also",
    "start": "2138040",
    "end": "2146079"
  },
  {
    "text": "use compilers generated from or build from some branches of the Roslin",
    "start": "2146079",
    "end": "2151119"
  },
  {
    "text": "Repository okay so let's see what we're interested in",
    "start": "2151119",
    "end": "2156339"
  },
  {
    "text": "we're interested in classic declarations that have an attribute list",
    "start": "2156339",
    "end": "2162700"
  },
  {
    "text": "with some attributes so I want to have a look at that",
    "start": "2162700",
    "end": "2171359"
  },
  {
    "text": "and the way to do this is first you open up the right one",
    "start": "2171760",
    "end": "2177240"
  },
  {
    "text": "so I get a any type of node in here and then okay",
    "start": "2183940",
    "end": "2189880"
  },
  {
    "text": "if it's not a class declaration or it doesn't have attributes I'm not interested and then I need to make a",
    "start": "2189880",
    "end": "2195339"
  },
  {
    "text": "switch from the syntactic model to the semantic model because yeah I now have a",
    "start": "2195339",
    "end": "2201160"
  },
  {
    "text": "class definition with some attribute but I need to know if that attribute actually refers to the one that I",
    "start": "2201160",
    "end": "2207040"
  },
  {
    "text": "generated so if you have something else that is called Auto notify that might be",
    "start": "2207040",
    "end": "2212140"
  },
  {
    "text": "a problem but I can then check is this really oops",
    "start": "2212140",
    "end": "2218140"
  },
  {
    "text": "is this really the class that I'm interested in if so",
    "start": "2218140",
    "end": "2223300"
  },
  {
    "text": "I can pull out um",
    "start": "2223300",
    "end": "2227280"
  },
  {
    "text": "so if so I can pull out all the interfaces that it specified this",
    "start": "2228520",
    "end": "2234160"
  },
  {
    "text": "already is the semantic model so it could later on asked it for all the property names so I can keep track of",
    "start": "2234160",
    "end": "2239680"
  },
  {
    "text": "what I need to implement also what I should also note is",
    "start": "2239680",
    "end": "2246880"
  },
  {
    "text": "um do not rely on everything to be set up correctly so if I have that attribute and the",
    "start": "2246880",
    "end": "2253900"
  },
  {
    "text": "Constructor call is broken I might still get that result but with the things either null or not set or not existing",
    "start": "2253900",
    "end": "2260380"
  },
  {
    "text": "at all so always remember it could be in any in between state of the person writing the code",
    "start": "2260380",
    "end": "2268260"
  },
  {
    "text": "then I want to have a function that actually knows how to generate the c-sharp code",
    "start": "2268540",
    "end": "2275220"
  },
  {
    "text": "so custom function that from this object that holds the data generates the C",
    "start": "2275560",
    "end": "2281260"
  },
  {
    "text": "sharp code so that this looks like a bit of a text editor um which impends like the auto generated",
    "start": "2281260",
    "end": "2287380"
  },
  {
    "text": "line and of course I don't know or I actually have to find out if the target project is using",
    "start": "2287380",
    "end": "2293800"
  },
  {
    "text": "another reference type or not so if I want to do some special generation for these cases I should also check that",
    "start": "2293800",
    "end": "2300520"
  },
  {
    "text": "myself in the code and generate different code based on that so it generates this event",
    "start": "2300520",
    "end": "2308578"
  },
  {
    "text": "property changed and then for each interface which",
    "start": "2309339",
    "end": "2314680"
  },
  {
    "text": "property emits the both a banking property",
    "start": "2314680",
    "end": "2321339"
  },
  {
    "text": "backing field and so on and the actual property with a getter and a Setter that",
    "start": "2321339",
    "end": "2327460"
  },
  {
    "text": "says the value of the backing field and raises that event",
    "start": "2327460",
    "end": "2332099"
  },
  {
    "text": "so now I need to wire this up",
    "start": "2333040",
    "end": "2339220"
  },
  {
    "text": "so I'm using the execute method so before the execute method my syntax receiver should already have received",
    "start": "2339220",
    "end": "2345520"
  },
  {
    "text": "all the notifications so I can pull up everything else that I",
    "start": "2345520",
    "end": "2350619"
  },
  {
    "text": "need so for example I need to know is that project using another reference types and then go over my",
    "start": "2350619",
    "end": "2356520"
  },
  {
    "text": "data objects generate the c-sharp code for that and then use the context that I get",
    "start": "2356520",
    "end": "2363940"
  },
  {
    "text": "passed in here to add these source files now let's have a look if that is",
    "start": "2363940",
    "end": "2371200"
  },
  {
    "text": "complete",
    "start": "2371200",
    "end": "2374160"
  },
  {
    "text": "because I updated the project to a new verify version but there's another way to test this I",
    "start": "2387579",
    "end": "2394900"
  },
  {
    "text": "can actually reference this in my target project",
    "start": "2394900",
    "end": "2399359"
  },
  {
    "text": "um usually I would do that via nougat if not I can directly reference the project tell it yeah that's not an actual",
    "start": "2401200",
    "end": "2408700"
  },
  {
    "text": "dependency as in like a classical.net dependency and please add that as an analyzer",
    "start": "2408700",
    "end": "2415060"
  },
  {
    "text": "so let's see yep that seems to work",
    "start": "2415060",
    "end": "2422619"
  },
  {
    "text": "can't guarantee it actually works when running but let's see so this generator shows up here it",
    "start": "2422619",
    "end": "2430060"
  },
  {
    "text": "generated the attribute and it generated the implementation",
    "start": "2430060",
    "end": "2437440"
  },
  {
    "text": "so that now actually has a chance of running",
    "start": "2437440",
    "end": "2442500"
  },
  {
    "text": "yep it seems to work knows which property changed",
    "start": "2446859",
    "end": "2453240"
  },
  {
    "text": "that also means I can't show you what I like to use this verify framework for but",
    "start": "2453579",
    "end": "2459460"
  },
  {
    "text": "for example if I wanted to change this getter",
    "start": "2459460",
    "end": "2466300"
  },
  {
    "text": "to an expression bodied member what should happen",
    "start": "2466300",
    "end": "2473140"
  },
  {
    "text": "is the test should fail and say hey this changed is that okay or not",
    "start": "2473140",
    "end": "2479520"
  },
  {
    "text": "so it opens up a diff yeah that's what I was looking for it opens up a diff and says hey",
    "start": "2479980",
    "end": "2486040"
  },
  {
    "text": "um something changed is this okay or not and then I can actually accept that",
    "start": "2486040",
    "end": "2492700"
  },
  {
    "text": "saving and then the test should run again so this is just a half automated way of testing things that's also very",
    "start": "2492700",
    "end": "2498520"
  },
  {
    "text": "useful if you're dealing with lots of data objects and want to not uh code a",
    "start": "2498520",
    "end": "2503980"
  },
  {
    "text": "lot of um if this object that that object equals something that's a very powerful framework to use for that",
    "start": "2503980",
    "end": "2511420"
  },
  {
    "text": "so then I also hinted that there are new",
    "start": "2511420",
    "end": "2517000"
  },
  {
    "text": "features in Visual Studio 2022 so if you're first starting out to write a",
    "start": "2517000",
    "end": "2522520"
  },
  {
    "text": "a generator I really recommend using that interface but in Visual Studio 2022 or actually",
    "start": "2522520",
    "end": "2530160"
  },
  {
    "text": "rosalind4 there are new apis that you can use the idea is that in the IDE",
    "start": "2530160",
    "end": "2537940"
  },
  {
    "text": "um running a generator means at some point pausing any compilation running",
    "start": "2537940",
    "end": "2543760"
  },
  {
    "text": "all the generators parsing all the files if you have any syntax receiver or",
    "start": "2543760",
    "end": "2549400"
  },
  {
    "text": "anything else that needs to be done doing all of that for all the code and then adding the source files and then",
    "start": "2549400",
    "end": "2555640"
  },
  {
    "text": "parsing them and continuing but if I want to have code generation on",
    "start": "2555640",
    "end": "2562300"
  },
  {
    "text": "after every couple of keystrokes um that's not that performant it would",
    "start": "2562300",
    "end": "2568180"
  },
  {
    "text": "probably not matter for to generate it I just wrote but again there is a new API called incremental",
    "start": "2568180",
    "end": "2575260"
  },
  {
    "text": "generator the difference is this only has one method called initialize",
    "start": "2575260",
    "end": "2582819"
  },
  {
    "text": "and the way it works is it has similar methods or similar Concepts",
    "start": "2582819",
    "end": "2588700"
  },
  {
    "text": "but it looks a bit more like a link query so you're basically setting up a",
    "start": "2588700",
    "end": "2594819"
  },
  {
    "text": "graph of things that run together into outputs just let me show you that so we",
    "start": "2594819",
    "end": "2600819"
  },
  {
    "text": "have a similar thing register post initialization output but then I have providers A compilation",
    "start": "2600819",
    "end": "2608140"
  },
  {
    "text": "provider and then select statements which is basically transform",
    "start": "2608140",
    "end": "2613599"
  },
  {
    "text": "so I can tell it yeah um I want to have a feed that tells me",
    "start": "2613599",
    "end": "2620200"
  },
  {
    "text": "if these options are set or not and then that has a type okay it can't",
    "start": "2620200",
    "end": "2625660"
  },
  {
    "text": "be read called incremental value provider and you can think of that sort of like",
    "start": "2625660",
    "end": "2631359"
  },
  {
    "text": "um a stream sort of like an innumerable and this is the same for all the other",
    "start": "2631359",
    "end": "2637180"
  },
  {
    "text": "things so for example there's a syntax provider that I can ask to have some predicate",
    "start": "2637180",
    "end": "2643540"
  },
  {
    "text": "that it should apply to all the syntax and just pass me the things that I need to have a look at",
    "start": "2643540",
    "end": "2650079"
  },
  {
    "text": "um I can then create my own implementation generate and then have these where functions select combine and",
    "start": "2650079",
    "end": "2656380"
  },
  {
    "text": "so on those really look just like any link operator",
    "start": "2656380",
    "end": "2663940"
  },
  {
    "text": "and then I would register the output which basically would like be a tool",
    "start": "2663940",
    "end": "2670000"
  },
  {
    "text": "list on an innumerable and the way this works is um this sets up a graph and the IDE",
    "start": "2670000",
    "end": "2677280"
  },
  {
    "text": "tries to only re-execute parts that are changed so for example if I have",
    "start": "2677280",
    "end": "2683920"
  },
  {
    "text": "two classes that come in here and if just one of them changes",
    "start": "2683920",
    "end": "2688960"
  },
  {
    "text": "I would only regenerate this data object for one of them",
    "start": "2688960",
    "end": "2694300"
  },
  {
    "text": "um it would still know that there are two it would have that cached in memory so every step in here is actually cached",
    "start": "2694300",
    "end": "2700540"
  },
  {
    "text": "and then only the things that changed are updated so",
    "start": "2700540",
    "end": "2705940"
  },
  {
    "text": "it would just start running here if something if just one of them changed so that is meant to save some some",
    "start": "2705940",
    "end": "2713700"
  },
  {
    "text": "compilation time if you're working in ide scenarios",
    "start": "2713700",
    "end": "2719339"
  },
  {
    "text": "so",
    "start": "2720460",
    "end": "2723180"
  },
  {
    "text": "yeah we had that just some couple of more things you could do one very",
    "start": "2726339",
    "end": "2733300"
  },
  {
    "text": "probably important thing is you can use additional files so if you have like a schema file any",
    "start": "2733300",
    "end": "2740680"
  },
  {
    "text": "data file Excel files whatsoever you can mark them with a build action as c-sharp",
    "start": "2740680",
    "end": "2747040"
  },
  {
    "text": "analyzer additional file in Ms build it would just be called additional file",
    "start": "2747040",
    "end": "2753940"
  },
  {
    "text": "and these would be available in the generator as well so you could read that file for example it could be a product",
    "start": "2753940",
    "end": "2760720"
  },
  {
    "text": "file could be a schema Json file and generate classes from that so that's",
    "start": "2760720",
    "end": "2766720"
  },
  {
    "text": "quite useful you can also put some metadata on that",
    "start": "2766720",
    "end": "2772599"
  },
  {
    "text": "so if you're more deeper in the build layer you can do some customization so I can",
    "start": "2772599",
    "end": "2779140"
  },
  {
    "text": "tell the build system hey on the additional files objects there should be this",
    "start": "2779140",
    "end": "2786280"
  },
  {
    "text": "metadata name in this case generated model namespace that I want to set on these",
    "start": "2786280",
    "end": "2792640"
  },
  {
    "text": "items please make them available to the compiler and then on the files that actually references an additional file",
    "start": "2792640",
    "end": "2799660"
  },
  {
    "text": "I can just set that metadata or property yeah let's not use property that has a",
    "start": "2799660",
    "end": "2805900"
  },
  {
    "text": "different meaning names build I can set that metadata to some value and it would make it available in the in the analyzer",
    "start": "2805900",
    "end": "2812800"
  },
  {
    "text": "there's also ways you can if you do that in nougat packages there are also ways",
    "start": "2812800",
    "end": "2818680"
  },
  {
    "text": "to make those metadatas and values also show up in the property Explorer but you",
    "start": "2818680",
    "end": "2824260"
  },
  {
    "text": "need to write an example files for that of course there are also project file",
    "start": "2824260",
    "end": "2829960"
  },
  {
    "text": "properties so if you want to have something that is on the level of a project file or you want to configure in",
    "start": "2829960",
    "end": "2835420"
  },
  {
    "text": "there you can also tell the system please make some property compiler visibles or compiler visible property",
    "start": "2835420",
    "end": "2841720"
  },
  {
    "text": "and you can set that so this will be your custom property it's also one of the benefits of Ms build is you can",
    "start": "2841720",
    "end": "2848920"
  },
  {
    "text": "basically Define any property any item that you want and wire it up with existing logic",
    "start": "2848920",
    "end": "2855940"
  },
  {
    "text": "so this is no idea analyzer contract options where you can get all of these informations back out",
    "start": "2855940",
    "end": "2863520"
  },
  {
    "text": "also um if you actually want to ship an analyzer there are some questions that",
    "start": "2863800",
    "end": "2869380"
  },
  {
    "text": "just a short check at least you should you should think about uh first of all I mentioned",
    "start": "2869380",
    "end": "2874720"
  },
  {
    "text": "um C sharp you can generate the code which version of c-sharp are you",
    "start": "2874720",
    "end": "2880900"
  },
  {
    "text": "actually generating for so if I write now my perfect.net 7",
    "start": "2880900",
    "end": "2886079"
  },
  {
    "text": "generator and someone tries to use it on a c-sharp 9 application",
    "start": "2886079",
    "end": "2891579"
  },
  {
    "text": "maybe that doesn't work maybe that works we don't know same for nullable reference types if you expect it to be",
    "start": "2891579",
    "end": "2899020"
  },
  {
    "text": "set or unset on Project level make sure that your the code files that you generate fit into the rest of the",
    "start": "2899020",
    "end": "2905020"
  },
  {
    "text": "project also since we're already in basically an analyzer since it uses the same plugin",
    "start": "2905020",
    "end": "2910780"
  },
  {
    "text": "architecture we can also emit Diagnostics so if for example if we expect some",
    "start": "2910780",
    "end": "2917859"
  },
  {
    "text": "values for example in the c-sharp login generator we expect all the",
    "start": "2917859",
    "end": "2924540"
  },
  {
    "text": "parameters of the method to be used in the message template and if not you can actually generate a diagnostic so you",
    "start": "2924540",
    "end": "2930579"
  },
  {
    "text": "would have a discrete line that says yeah that one is actually not used in the template um please change something these are",
    "start": "2930579",
    "end": "2937420"
  },
  {
    "text": "also things you can do from an an generator also in the front into that if you don't",
    "start": "2937420",
    "end": "2944619"
  },
  {
    "text": "generate your code with an order generated annotation some static analysis tool might complain because",
    "start": "2944619",
    "end": "2950200"
  },
  {
    "text": "they would load it the project run their own checking logic and then say yeah you",
    "start": "2950200",
    "end": "2955960"
  },
  {
    "text": "did something wrong for example you use go to's in irregular expression so just something to to think about also",
    "start": "2955960",
    "end": "2964119"
  },
  {
    "text": "again you may want to support different versions of the compiler so you could",
    "start": "2964119",
    "end": "2970780"
  },
  {
    "text": "want to have maybe your incremental generator for your projects but maybe you still want to use the",
    "start": "2970780",
    "end": "2976839"
  },
  {
    "text": "um Visions Studio 2019 with maybe.net framework projects like asp.net projects",
    "start": "2976839",
    "end": "2983380"
  },
  {
    "text": "so that would not be able to run incremental generators just think about that also there is the cookbook",
    "start": "2983380",
    "end": "2990520"
  },
  {
    "text": "which will show you how to set up the nougat package and use",
    "start": "2990520",
    "end": "2997660"
  },
  {
    "text": "those features so",
    "start": "2997660",
    "end": "3001940"
  },
  {
    "text": "just just some magic things you need to do to be able to pack that as a nougat package it's undocumented",
    "start": "3004800",
    "end": "3012859"
  },
  {
    "text": "and again if you want to write one yourself or use one",
    "start": "3013140",
    "end": "3018359"
  },
  {
    "text": "there is a great list on GitHub I linked it in the presentation",
    "start": "3018359",
    "end": "3023700"
  },
  {
    "text": "uh which shows you some of the available generators that people wrote so you can have a look if there's",
    "start": "3023700",
    "end": "3030240"
  },
  {
    "text": "anything you might want to reuse so the list is already quite large",
    "start": "3030240",
    "end": "3037099"
  },
  {
    "text": "right the reason that got me into this was actually uh data Builder patterns",
    "start": "3037619",
    "end": "3043020"
  },
  {
    "text": "because I used to write applications uh that dealt with a lot of data so",
    "start": "3043020",
    "end": "3048900"
  },
  {
    "text": "interfacing with Erp systems or also for insurances where you have like insurance",
    "start": "3048900",
    "end": "3054000"
  },
  {
    "text": "applications so highly data Centric applications where a lot of",
    "start": "3054000",
    "end": "3059460"
  },
  {
    "text": "the unit tests would be like hey that standard thing that should work with some change does it have that effect and",
    "start": "3059460",
    "end": "3067200"
  },
  {
    "text": "so that's something I like to do with Builders so I had this Builder generator which for any data class would generate",
    "start": "3067200",
    "end": "3074640"
  },
  {
    "text": "a builder so it could for example have a default contract Builder with all the default values set up and",
    "start": "3074640",
    "end": "3082020"
  },
  {
    "text": "then I could call something like in this case without something or with something so for example Insurance",
    "start": "3082020",
    "end": "3089720"
  },
  {
    "text": "application.contact details dot without postal code dot build",
    "start": "3089720",
    "end": "3095579"
  },
  {
    "text": "and then use that object for tests so this is just something that saved me a",
    "start": "3095579",
    "end": "3101400"
  },
  {
    "text": "lot of code while writing applications",
    "start": "3101400",
    "end": "3104960"
  },
  {
    "text": "so um are there any questions",
    "start": "3106619",
    "end": "3111740"
  },
  {
    "text": "okay if not um I'm still available",
    "start": "3116640",
    "end": "3120920"
  },
  {
    "text": "okay so the question was since I mentioned.net framework can I write a generator that works",
    "start": "3128520",
    "end": "3135119"
  },
  {
    "text": "in.net framework the answer to this is yes but so you need to make sure that you're",
    "start": "3135119",
    "end": "3140700"
  },
  {
    "text": "using the up-to-date wrestling three or four compilers so in Visual Studio 2019 or",
    "start": "3140700",
    "end": "3147599"
  },
  {
    "text": "2022 or the appropriate sdks you should also make sure that you set the c-sharp",
    "start": "3147599",
    "end": "3154920"
  },
  {
    "text": "language version to at least nine so for example you could also do this on",
    "start": "3154920",
    "end": "3161119"
  },
  {
    "text": "older.net core versions or dot N5 dot in core31 ETC but we would need to set the",
    "start": "3161119",
    "end": "3168920"
  },
  {
    "text": "c-sharp version to a higher level to be able to use that feature but yes",
    "start": "3168920",
    "end": "3174059"
  },
  {
    "text": "it should be usable and also some of these generators for example the Microsoft extensions logging generator",
    "start": "3174059",
    "end": "3180500"
  },
  {
    "text": "that it is also available everywhere you can use the the nuget package so if you",
    "start": "3180500",
    "end": "3186599"
  },
  {
    "text": "have a open framework application I think Microsoft extensions logging is",
    "start": "3186599",
    "end": "3191760"
  },
  {
    "text": "still a.net standard 2 package at least the six version was one so you could",
    "start": "3191760",
    "end": "3196800"
  },
  {
    "text": "also have to generate the feature in.net framework",
    "start": "3196800",
    "end": "3201079"
  },
  {
    "text": "okay then thank you and see you around [Applause]",
    "start": "3202260",
    "end": "3213219"
  }
]