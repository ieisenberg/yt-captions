[
  {
    "text": "all right good morning thanks for coming welcome to the session on refactoring to functional style my name is Venkat",
    "start": "4030",
    "end": "10420"
  },
  {
    "text": "Subramanyam we're going to talk about taking a few examples and then looking at the examples in imperative style of",
    "start": "10420",
    "end": "17530"
  },
  {
    "text": "programming and then we'll refactor it to functional style I'll probably spend about 5 minutes or so just talking about",
    "start": "17530",
    "end": "23350"
  },
  {
    "text": "functional style of programming then we will step into maybe about five or six different examples and take a look at",
    "start": "23350",
    "end": "29380"
  },
  {
    "text": "the code and then refactor it we have to use some language for the exercise I'll be using Java here but pretty much you",
    "start": "29380",
    "end": "36190"
  },
  {
    "text": "can use any language you want to as long as you can find a VI or a function that can get the work done but more important",
    "start": "36190",
    "end": "42879"
  },
  {
    "text": "it's really thinking about the approach how do we really approach a functional style of programming best time to ask",
    "start": "42879",
    "end": "47980"
  },
  {
    "text": "questions or make comments is when you have it if you do have a question or comment please draw my attention and then start speaking up I'll be more than",
    "start": "47980",
    "end": "54129"
  },
  {
    "text": "happy to listen to you so let's get started well first of all I want to talk a little about functional style of programming but unfortunately though",
    "start": "54129",
    "end": "61499"
  },
  {
    "text": "predominantly in over industry we have spent a several decades programming in the imperative style of programming so",
    "start": "61499",
    "end": "68799"
  },
  {
    "text": "let's talk a little bit about imperative style so what in the world is really imperative style of programming well it",
    "start": "68799",
    "end": "75070"
  },
  {
    "text": "really comes down to you tell what to do and also you spend the time telling also",
    "start": "75070",
    "end": "80920"
  },
  {
    "text": "how to do it so this is one of the biggest challenges with imperative style of programming is you have to spend a",
    "start": "80920",
    "end": "86799"
  },
  {
    "text": "lot of time telling not only what you want to do but you also have to spend time telling how to do it let's talk",
    "start": "86799",
    "end": "92229"
  },
  {
    "text": "about this with a little example real quick let's say we are interested in finding the name R in upper case of a",
    "start": "92229",
    "end": "98710"
  },
  {
    "text": "first person older than 30 in the given list of names right here how would we do",
    "start": "98710",
    "end": "104079"
  },
  {
    "text": "this well remember the result we want is the name of somebody so as a result we",
    "start": "104079",
    "end": "109090"
  },
  {
    "text": "will start with string name but what do we do initially we will have to set it to null that's a very first smell isn't",
    "start": "109090",
    "end": "115750"
  },
  {
    "text": "it I see a few people laughing already null is a smell it doesn't really get as excited then what do we do then we say",
    "start": "115750",
    "end": "122229"
  },
  {
    "text": "purse and of course in this case we're gonna get a particular person from this function called create people and then",
    "start": "122229",
    "end": "128500"
  },
  {
    "text": "what we do after that we say if person dot get age is greater than 30 because",
    "start": "128500",
    "end": "133540"
  },
  {
    "text": "that's what we really want then what do we do we say name equal to and then person dot get named R",
    "start": "133540",
    "end": "139879"
  },
  {
    "text": "to uppercase and then we convert it to an uppercase and then of course I would say if name is not equal to null this is",
    "start": "139879",
    "end": "147469"
  },
  {
    "text": "adding insult to injury isn't it and then you have to come here and say the name and of course if the value was not",
    "start": "147469",
    "end": "153799"
  },
  {
    "text": "present you're going to say in this case no one found well unfortunately though",
    "start": "153799",
    "end": "160060"
  },
  {
    "text": "you will quickly observe this and say I'm wrong in this code because I forgot",
    "start": "160060",
    "end": "165169"
  },
  {
    "text": "to put a break right here that is our responsibility isn't it if you don't put a break in the best case you will get a",
    "start": "165169",
    "end": "171620"
  },
  {
    "text": "slower performance in the worst case we'll get a wrong result so as a result it's it's up to you to really do this of",
    "start": "171620",
    "end": "178159"
  },
  {
    "text": "course when I run this code it gives you the result of Paulo I'm not gonna ask you if anyone here has written the code",
    "start": "178159",
    "end": "185000"
  },
  {
    "text": "like this because everyone has but I'm gonna ask you more important question how do you feel when you write code like",
    "start": "185000",
    "end": "192230"
  },
  {
    "text": "this I'll tell you how you feel you feel really dirty because when you go home",
    "start": "192230",
    "end": "197569"
  },
  {
    "text": "when children come running towards you said don't touch me I gotta go shower first right that's what we feel when we",
    "start": "197569",
    "end": "203090"
  },
  {
    "text": "write code like this every day this is imperative style of programming you tell what to do and you also tell",
    "start": "203090",
    "end": "208639"
  },
  {
    "text": "how to do it that's a lot of work as you can see in this particular example but we're gonna trade that to water called",
    "start": "208639",
    "end": "214759"
  },
  {
    "text": "higher-order functions so what in the world is a higher-order function well normally I'll say a normal function I",
    "start": "214759",
    "end": "221239"
  },
  {
    "text": "don't even know if that's the right word is where we are going to be may pass object to a function so we do this all",
    "start": "221239",
    "end": "228259"
  },
  {
    "text": "the time we may create object in a function so we do that also and then",
    "start": "228259",
    "end": "234500"
  },
  {
    "text": "finally we may return object from a function so this is basically what we do",
    "start": "234500",
    "end": "240469"
  },
  {
    "text": "normally with functions is we pass objects we create objects we return objects but on the other hand we can",
    "start": "240469",
    "end": "247219"
  },
  {
    "text": "trade that to water called higher-order functions and in the higher-order functions what we really do is we pass",
    "start": "247219",
    "end": "255109"
  },
  {
    "text": "functions two functions we may create function within a function and we may return a function from a function so",
    "start": "255109",
    "end": "262070"
  },
  {
    "text": "this gives a nice way for us do not just work with objects but also use functional decomposition as well in",
    "start": "262070",
    "end": "268490"
  },
  {
    "text": "addition to object decomposition so becomes a really nice way to pass functions around let's see how that's",
    "start": "268490",
    "end": "274340"
  },
  {
    "text": "gonna feel in just a minute but one of the other things about function seller programming is we favor immutability if",
    "start": "274340",
    "end": "281090"
  },
  {
    "text": "you notice over here we create a variable called name and we are mutating that variable and then we keep mutating",
    "start": "281090",
    "end": "288170"
  },
  {
    "text": "variables over and over and over well what happens when you mutate variables a it becomes really hard to reason the",
    "start": "288170",
    "end": "294860"
  },
  {
    "text": "code when you mutate variables it becomes incredibly hard to parallelize the code as well errors creep in when we",
    "start": "294860",
    "end": "301700"
  },
  {
    "text": "start doing very many mutations on the other hand we could write this in a functional style but it really comes",
    "start": "301700",
    "end": "308330"
  },
  {
    "text": "down to what's called the Declaration style of programming now I'll talk about what's the relationship in just a minute",
    "start": "308330",
    "end": "313790"
  },
  {
    "text": "but declaration style is essentially where you tell what and not how so this",
    "start": "313790",
    "end": "320630"
  },
  {
    "text": "is one of the beautiful things about declaration style is you tell what to do and not how to do it but of course we",
    "start": "320630",
    "end": "327950"
  },
  {
    "text": "are talking about functional style here so what in the world then is functional style and to me this is what exciting",
    "start": "327950",
    "end": "335060"
  },
  {
    "text": "about functional style is functional style is actually declarative plus the use of higher-order functions so this is",
    "start": "335060",
    "end": "342740"
  },
  {
    "text": "the relationship between the two styles of programming is there a functional style of programming ease declarative",
    "start": "342740",
    "end": "348500"
  },
  {
    "text": "and plus we use higher-order functions this is one of the reasons why functional style really shines is",
    "start": "348500",
    "end": "354170"
  },
  {
    "text": "because it's actually declarative that's where the expressive nature of the code really comes in so in this case we're",
    "start": "354170",
    "end": "360710"
  },
  {
    "text": "gonna use lambda expressions obviously for higher-order functions but this leads to a beautiful thing called a",
    "start": "360710",
    "end": "366260"
  },
  {
    "text": "collection pipeline or a functional composition let's take a look at what that really means in this example so I'm",
    "start": "366260",
    "end": "373040"
  },
  {
    "text": "gonna get back to this little example that we have with us and what I'm going to do here is our output let's start",
    "start": "373040",
    "end": "379820"
  },
  {
    "text": "with the create people and then we'll call a stream this is purely a Java issue but in the case of other languages",
    "start": "379820",
    "end": "385970"
  },
  {
    "text": "like C sharp you can directly do this on a list if you will because of extension methods and then of course you can take",
    "start": "385970",
    "end": "391760"
  },
  {
    "text": "the stream and I'm gonna say filter and I'll say that given a person I want to",
    "start": "391760",
    "end": "397430"
  },
  {
    "text": "get a person dot get age over here is greater than 30 then I perform a map",
    "start": "397430",
    "end": "402500"
  },
  {
    "text": "operation to get the name of the person I perform a map again to get the string upper to upper case and",
    "start": "402500",
    "end": "408919"
  },
  {
    "text": "then finally I'll say fine first and if the person doesn't exist I would say",
    "start": "408919",
    "end": "413990"
  },
  {
    "text": "well I'll simply say no one found and this gives us an ability to get the real",
    "start": "413990",
    "end": "419030"
  },
  {
    "text": "value our substitute value if the value were not really found well notice the",
    "start": "419030",
    "end": "424699"
  },
  {
    "text": "flow of the code how expressive the code really is now here's a challenge I would",
    "start": "424699",
    "end": "429800"
  },
  {
    "text": "pose to you take an imperative code and show it to a programmer but sit in front",
    "start": "429800",
    "end": "434990"
  },
  {
    "text": "of them and watch their eyeball movement and when they look at the imperative code that eyeball movement is going to",
    "start": "434990",
    "end": "441229"
  },
  {
    "text": "be like this isn't it and then it's gonna do this that's called the point of confusion right on the other hand if you",
    "start": "441229",
    "end": "447229"
  },
  {
    "text": "look at this one notice how beautifully it flows through a single pass through",
    "start": "447229",
    "end": "452389"
  },
  {
    "text": "and you're able to get it and that's one of the beautiful things about functional style is you're able to read the code in",
    "start": "452389",
    "end": "457759"
  },
  {
    "text": "one pass the code begins to read like the problem statement that becomes a lot more easier to follow as well but of",
    "start": "457759",
    "end": "463820"
  },
  {
    "text": "course the question is okay this is awesome this code is cute I love it but",
    "start": "463820",
    "end": "469280"
  },
  {
    "text": "I have this theory and the theory I have is cuteness cuteness",
    "start": "469280",
    "end": "474500"
  },
  {
    "text": "well cuteness is not sustainable so this is the truth of human beings as ended",
    "start": "474500",
    "end": "480820"
  },
  {
    "text": "you know when you a baby is born we say how cute when the baby is two years old",
    "start": "480820",
    "end": "486650"
  },
  {
    "text": "we don't like the baby anymore right talking too much so cuteness is not sustainable this code is really cute but",
    "start": "486650",
    "end": "492289"
  },
  {
    "text": "at the end of the day we want performance and so what about efficiency well if you look at languages like Ruby",
    "start": "492289",
    "end": "498949"
  },
  {
    "text": "or Python or JavaScript unfortunately those languages will perform all the",
    "start": "498949",
    "end": "504979"
  },
  {
    "text": "computations do all the work and discard most of the work and take the very first",
    "start": "504979",
    "end": "510590"
  },
  {
    "text": "result what a waste in performance well thankfully that's not the way functional",
    "start": "510590",
    "end": "516050"
  },
  {
    "text": "programming should work and in this case just to prove the point I go to the person class and in the person class I",
    "start": "516050",
    "end": "522740"
  },
  {
    "text": "put a print statement in the get age method now if I go back to the imperative style code for a second we",
    "start": "522740",
    "end": "530060"
  },
  {
    "text": "know imperative code is usually really performant when I run the code you will notice it evaluated Sarah Sarah Bob",
    "start": "530060",
    "end": "538369"
  },
  {
    "text": "but it never touched anybody after Paulo because we use the break statement on",
    "start": "538369",
    "end": "543379"
  },
  {
    "text": "line 25 and the break saves the day for us it doesn't waste performance because once it finds the result it builds out",
    "start": "543379",
    "end": "550579"
  },
  {
    "text": "well that is the imperative style code but the question is what about the functional style code what is it going",
    "start": "550579",
    "end": "556730"
  },
  {
    "text": "to do well thankfully that's where the laziness of evaluation really comes in",
    "start": "556730",
    "end": "561799"
  },
  {
    "text": "and laziness is fundamentally very important for functional programming because without laziness we're gonna",
    "start": "561799",
    "end": "568040"
  },
  {
    "text": "create cute code which is not going to really perform very well so when I run this code the functional code notice it",
    "start": "568040",
    "end": "574519"
  },
  {
    "text": "did not behave any different internally it did not touch anyone after Paulo because of lazy evaluation",
    "start": "574519",
    "end": "581389"
  },
  {
    "text": "it knows to bail out at the right point and not do any extra work than is",
    "start": "581389",
    "end": "586699"
  },
  {
    "text": "necessary so that gives us an idea about how efficiency is important and at the",
    "start": "586699",
    "end": "591739"
  },
  {
    "text": "same time we get efficiency with functional style as well what's really cool about these ideas is that we don't",
    "start": "591739",
    "end": "598249"
  },
  {
    "text": "have to be programming in an esoteric language to be able to do this mainstream languages like Java and",
    "start": "598249",
    "end": "605059"
  },
  {
    "text": "c-sharp supported today and as a result we can benefit from these ideas in almost any language we program every",
    "start": "605059",
    "end": "611269"
  },
  {
    "text": "single day clearly we can use those other beautiful languages as well but we have the freedom to choose if you will",
    "start": "611269",
    "end": "617629"
  },
  {
    "text": "so to understand this further let's take some exercises and play with it real quick so the first exercise I want to",
    "start": "617629",
    "end": "624410"
  },
  {
    "text": "start with here is going to take us from imperative style to decorative and a functional style of code",
    "start": "624410",
    "end": "630679"
  },
  {
    "text": "well this code be going to look at is fairly noisy as you can see right here I got a function called East Prime when I",
    "start": "630679",
    "end": "637610"
  },
  {
    "text": "run the code notice it tells us one is not prime but two and three are but four is not but five years and six is not but",
    "start": "637610",
    "end": "644600"
  },
  {
    "text": "seven is okay so it works but look at the code real quick what are we doing in",
    "start": "644600",
    "end": "650209"
  },
  {
    "text": "this code notice first of all we create a variable called divisible now honestly",
    "start": "650209",
    "end": "656480"
  },
  {
    "text": "when you're writing code you're not gonna call it divisible you're gonna call it temp or T because that's how you",
    "start": "656480",
    "end": "662899"
  },
  {
    "text": "tell the code you don't deserve to live that's how we communicate our you know dislike of the code we are writing these",
    "start": "662899",
    "end": "669230"
  },
  {
    "text": "car these are called garbage variables garbage variables are variables that are",
    "start": "669230",
    "end": "674360"
  },
  {
    "text": "introduced as part of the solution they're not required as part of the problem really then we say once we set",
    "start": "674360",
    "end": "681440"
  },
  {
    "text": "the divisible equal to false we loop through one value at a time and then we are checking if a value divides the",
    "start": "681440",
    "end": "688160"
  },
  {
    "text": "given number if it does we say divisible is true and we break out of the loop and then at this point of course we check if",
    "start": "688160",
    "end": "694580"
  },
  {
    "text": "it's not divisible and perform the action while this code is working let's think about how we can implement this in",
    "start": "694580",
    "end": "701450"
  },
  {
    "text": "a better way if you will so I'm going to bring in the necessary package right here but let's put this in English what",
    "start": "701450",
    "end": "708560"
  },
  {
    "text": "are we really trying to do so given a range of numbers let's say to do number",
    "start": "708560",
    "end": "714440"
  },
  {
    "text": "minus 1 well then no number in the range divides the given number the number",
    "start": "714440",
    "end": "724070"
  },
  {
    "text": "that's been given isn't it well that's a very first thing I tend to do is I try to put the words in in English or",
    "start": "724070",
    "end": "731360"
  },
  {
    "text": "whatever language you're comfortable natural language once you write that as a phrase it's a question of converting",
    "start": "731360",
    "end": "738140"
  },
  {
    "text": "that to code that's a really nice transition a lot of times when people struggle to write functional code one",
    "start": "738140",
    "end": "744770"
  },
  {
    "text": "thing I realize is I know it's a little hard for us but remember the days when we started programming today you're not",
    "start": "744770",
    "end": "751010"
  },
  {
    "text": "probably using flowchart but you probably did write flowcharts in the beginning and honestly even today if I'm",
    "start": "751010",
    "end": "758060"
  },
  {
    "text": "doing something extremely complex and I'm not able to hold it in my head I'll take a napkin and scribble a few things",
    "start": "758060",
    "end": "763400"
  },
  {
    "text": "on it and then I would sneeze on it and throw it away but the point really is we try to really write things down when",
    "start": "763400",
    "end": "769430"
  },
  {
    "text": "things are really hard or complex well thinking functionally is hard and complex for a lot of us be included so I",
    "start": "769430",
    "end": "775700"
  },
  {
    "text": "try to not normally put it in phrases like this given a range of numbers then from 2 to number minus 1 no number in",
    "start": "775700",
    "end": "783050"
  },
  {
    "text": "the range divides the given number well then once I do that it becomes really easy what I'm gonna do then is to simply",
    "start": "783050",
    "end": "790550"
  },
  {
    "text": "say return number is greater than 1 and in the stream dart range notice the word",
    "start": "790550",
    "end": "797540"
  },
  {
    "text": "range right there becomes range over here and I said no number in the range so that becomes an unmatched function",
    "start": "797540",
    "end": "805190"
  },
  {
    "text": "index number Mart I is equal to zero so as a result right now we are taking that",
    "start": "805190",
    "end": "812630"
  },
  {
    "text": "a phrase in English and we are simply converting it to code pretty much a",
    "start": "812630",
    "end": "818090"
  },
  {
    "text": "declarative style of code right there so when we run this code of course it produces the same result but we simply",
    "start": "818090",
    "end": "824890"
  },
  {
    "text": "formulated the problem in a series of steps to follow in terms of the actions",
    "start": "824890",
    "end": "830420"
  },
  {
    "text": "to perform that trends transformations to do and then we are translating that to code as you can see right here so",
    "start": "830420",
    "end": "836570"
  },
  {
    "text": "what does a benefit this code really offers well first of all notice that code is really concise the code is very",
    "start": "836570",
    "end": "842960"
  },
  {
    "text": "highly expressive you're not trying to get into the nuts and bolts and looking at how things actually work the instead",
    "start": "842960",
    "end": "849530"
  },
  {
    "text": "you are simply focusing on the fact that given a range of numbers tell me none matches this rule of divisibility so",
    "start": "849530",
    "end": "855950"
  },
  {
    "text": "that the code becomes a lot more easier to express easier to read as well that is one of the biggest benefits you get",
    "start": "855950",
    "end": "861860"
  },
  {
    "text": "out of this is a code that is easier to understand easier to work with easier to read as well from that point of view",
    "start": "861860",
    "end": "868670"
  },
  {
    "text": "I'll make one observation that I'm beginning to realize more and more when it comes to imperative style of",
    "start": "868670",
    "end": "874370"
  },
  {
    "text": "programming we have decades of experience writing this code so I'm gonna say easier to write really hard to",
    "start": "874370",
    "end": "883160"
  },
  {
    "text": "read so when you write an imperative code you're able to write it the programmer always writes it but everyone",
    "start": "883160",
    "end": "890090"
  },
  {
    "text": "who comes after that to read it were those people they're not called programmers they're called victims",
    "start": "890090",
    "end": "895340"
  },
  {
    "text": "because you're trying to really understand this code so it's really hard to read and also hard to maintain on the",
    "start": "895340",
    "end": "903260"
  },
  {
    "text": "other hand if you really think about it when it comes to the function of style of programming because of our lack of",
    "start": "903260",
    "end": "911000"
  },
  {
    "text": "experience more than anything else we don't really have an ability to write",
    "start": "911000",
    "end": "916190"
  },
  {
    "text": "this code really easily so I'm gonna say hard to write really in this case easy",
    "start": "916190",
    "end": "923200"
  },
  {
    "text": "to read and also easy to maintain and",
    "start": "923200",
    "end": "928810"
  },
  {
    "text": "also of course moving forward you could say easy to parallel eyes as well so",
    "start": "928810",
    "end": "935810"
  },
  {
    "text": "this is one of the things as I'm gonna say it is hard to write in the context of saying we just don't have experience doing it",
    "start": "935810",
    "end": "943850"
  },
  {
    "text": "and that's what makes it really hard to write not because it's fundamentally hard it's because of lack of her",
    "start": "943850",
    "end": "949610"
  },
  {
    "text": "experience we're not as familiar with it and and on the other hand this is easier",
    "start": "949610",
    "end": "954740"
  },
  {
    "text": "to write because we spent decades doing it so it's natural for us to write it but it's really hard for us to read it",
    "start": "954740",
    "end": "960589"
  },
  {
    "text": "later on and that's a balance we have to strike but remember the code is written once but it is read thousands of times",
    "start": "960589",
    "end": "967850"
  },
  {
    "text": "so we need to optimize for reading not optimized for writing that's one of the key things to really keep in mind is",
    "start": "967850",
    "end": "974120"
  },
  {
    "text": "where we are really heading with this so having talked about this let's move a little forward so in this case of course",
    "start": "974120",
    "end": "979819"
  },
  {
    "text": "the code is less noisy no garbage variables of course we are using higher-order functions to the none match",
    "start": "979819",
    "end": "985550"
  },
  {
    "text": "function we passed another function which is a lambda expression let's take the next example right here again we'll",
    "start": "985550",
    "end": "992689"
  },
  {
    "text": "go from imperative functional style of coding in this example I have a search word called localhost and looking for",
    "start": "992689",
    "end": "999529"
  },
  {
    "text": "the word in the EDC host file and if you are used to Java you know how terrible",
    "start": "999529",
    "end": "1005410"
  },
  {
    "text": "this code really is because if you notice over here I had to read the line put into a variable and check if it is",
    "start": "1005410",
    "end": "1012519"
  },
  {
    "text": "not equal to null I always tell people never show code like this to children",
    "start": "1012519",
    "end": "1017740"
  },
  {
    "text": "because they will never then want to become programmers right my children that's what they did I used to put them",
    "start": "1017740",
    "end": "1023199"
  },
  {
    "text": "on my lap when I coded them terrible idea I tell parents these days never do this with children and and they were",
    "start": "1023199",
    "end": "1028808"
  },
  {
    "text": "fine they were playing with the keyboard until they got a little bit bigger and one day they looked at my code and said",
    "start": "1028809",
    "end": "1034240"
  },
  {
    "text": "dad this is what you do for a living and that's what's not really fun at all so the point really is you don't want to be",
    "start": "1034240",
    "end": "1040750"
  },
  {
    "text": "really be tortured by code like this it's very inhumane well the good news is we don't have to struggle this hard we",
    "start": "1040750",
    "end": "1047319"
  },
  {
    "text": "can use library of functions again so in this case I'm gonna say Java dart n io dart file well how am I gonna in a",
    "start": "1047319",
    "end": "1054669"
  },
  {
    "text": "recover from this code well the beauty of this is this is working way too hard I'm gonna comment out all of that code",
    "start": "1054669",
    "end": "1061750"
  },
  {
    "text": "and all I'm gonna do is simply say a longer count is equal to because after",
    "start": "1061750",
    "end": "1066880"
  },
  {
    "text": "all I'm looking for the count and in this case I'll say file start",
    "start": "1066880",
    "end": "1072280"
  },
  {
    "text": "in this case aligns and Pat's dog yet and the file if I am interested in the",
    "start": "1072280",
    "end": "1077740"
  },
  {
    "text": "horse file then I say filter right here and I'm given a line I want the line",
    "start": "1077740",
    "end": "1083410"
  },
  {
    "text": "that contains which is exactly what we did right here so grab that essential",
    "start": "1083410",
    "end": "1088930"
  },
  {
    "text": "part right here contains that and then dot count and it gives us the same result as the other one and the point",
    "start": "1088930",
    "end": "1095980"
  },
  {
    "text": "really is we can eliminate all that extra word and we can simply create a stream of data in this case the stream",
    "start": "1095980",
    "end": "1103810"
  },
  {
    "text": "of data coming from a file rather than coming from a collection and then we are",
    "start": "1103810",
    "end": "1109600"
  },
  {
    "text": "iterating through it much like in the functional style and then we are filtering out what we really are",
    "start": "1109600",
    "end": "1115510"
  },
  {
    "text": "interested in and then we got the count out of that and that becomes a lot more easier to work with so talking about",
    "start": "1115510",
    "end": "1122530"
  },
  {
    "text": "this we don't have any explicit mutability in this code that is one of the beautiful things about functional",
    "start": "1122530",
    "end": "1128650"
  },
  {
    "text": "style of code as functional style code is very humane no variable is tortured",
    "start": "1128650",
    "end": "1134170"
  },
  {
    "text": "in the making of the results we're not going to mutate variables over and over and of course in this case we use a",
    "start": "1134170",
    "end": "1139690"
  },
  {
    "text": "stream of data and applied the operation like filtering to achieve that well",
    "start": "1139690",
    "end": "1145270"
  },
  {
    "text": "where we can really benefit from this is again I would emphasize the real benefit comes from the declarative style not",
    "start": "1145270",
    "end": "1153280"
  },
  {
    "text": "just from the higher-order functions so always I keep thinking of declarative style when it comes to programming",
    "start": "1153280",
    "end": "1159370"
  },
  {
    "text": "because thinking about what to do and avoiding the how to do it so this next",
    "start": "1159370",
    "end": "1165100"
  },
  {
    "text": "example will illustrate this really well because you can look at how hard this code is to write so let's see what this",
    "start": "1165100",
    "end": "1172180"
  },
  {
    "text": "code is doing I got a collection of values called scores a dictionary and c-sharp very",
    "start": "1172180",
    "end": "1178480"
  },
  {
    "text": "similar idea so here is a map in Java which is like a dictionary in c-sharp and all I'm doing here is collecting",
    "start": "1178480",
    "end": "1184480"
  },
  {
    "text": "creating a map over here of scores and have Jack Jill tom Darla's Nick and",
    "start": "1184480",
    "end": "1189700"
  },
  {
    "text": "Nancy with different score values some names have same score some names have",
    "start": "1189700",
    "end": "1195070"
  },
  {
    "text": "different score but what i'm doing here is group by score so when i run the code",
    "start": "1195070",
    "end": "1200230"
  },
  {
    "text": "notice it gives me levin as the score and Tom and then have leaven as the score 12 is under the",
    "start": "1200230",
    "end": "1207640"
  },
  {
    "text": "score only jak has it 15 is another score but Darla Nick and Jill have it so",
    "start": "1207640",
    "end": "1213310"
  },
  {
    "text": "I'm kind of inverting this map in other words I want to group them based on the score values and the names of the people",
    "start": "1213310",
    "end": "1220960"
  },
  {
    "text": "who have that score but how am I doing this this can be a really nice exercise",
    "start": "1220960",
    "end": "1226020"
  },
  {
    "text": "when you want to really you know see how people code look at the the pathetic",
    "start": "1226020",
    "end": "1232450"
  },
  {
    "text": "code here we are first creating a map of integer as the key and a list of strings",
    "start": "1232450",
    "end": "1239950"
  },
  {
    "text": "as the value type and then of course we look through the key set in the",
    "start": "1239950",
    "end": "1246910"
  },
  {
    "text": "collection we take one name at a time then what do we do we first ask if that",
    "start": "1246910",
    "end": "1253030"
  },
  {
    "text": "name exists as a key if that absorb we get the score for that name from the",
    "start": "1253030",
    "end": "1258430"
  },
  {
    "text": "original collection then we go ask whether that score appears as a key",
    "start": "1258430",
    "end": "1263980"
  },
  {
    "text": "within the collection if it does that's great if it doesn't we create a new",
    "start": "1263980",
    "end": "1270730"
  },
  {
    "text": "collection and then once we create a new collection or get the collection we add the element to the collection and then",
    "start": "1270730",
    "end": "1277060"
  },
  {
    "text": "we put it back so this is an extremely low level code as you can see you control every single step of your way",
    "start": "1277060",
    "end": "1283990"
  },
  {
    "text": "through this that's a lot of burden we carry as programmers in this case so",
    "start": "1283990",
    "end": "1289120"
  },
  {
    "text": "this is like you know telling a programmer tie a Phi kilo weight on your wrist and start coding how would you",
    "start": "1289120",
    "end": "1296050"
  },
  {
    "text": "feel if you code for entire day with a 5 kilo weight on your wrist well we've",
    "start": "1296050",
    "end": "1301420"
  },
  {
    "text": "been carrying that 5 kilo weight that's called imperative style of programming and that's what we've been doing all",
    "start": "1301420",
    "end": "1307450"
  },
  {
    "text": "this time when you run this code it produces the result but let's see how we can do this a lot better so what I'm",
    "start": "1307450",
    "end": "1313720"
  },
  {
    "text": "gonna do here again is look for things that can make our life a lot easier well",
    "start": "1313720",
    "end": "1319780"
  },
  {
    "text": "the first thing I'm gonna bring in is a little bit of a helper here and one of",
    "start": "1319780",
    "end": "1325360"
  },
  {
    "text": "the challenges when it comes to programming in these languages is not learning a syntax but learning a",
    "start": "1325360",
    "end": "1331150"
  },
  {
    "text": "thinking process but also start looking for methods that you can use in the",
    "start": "1331150",
    "end": "1336850"
  },
  {
    "text": "library and that has been one of the challenges is to keep the eyes open and say look",
    "start": "1336850",
    "end": "1342080"
  },
  {
    "text": "this method is really powerful I can benefit from this rather than doing all the work at the lower level by myself so",
    "start": "1342080",
    "end": "1349490"
  },
  {
    "text": "in this case return and I'm gonna start with the given collection which is the scores collection so I'm gonna see a",
    "start": "1349490",
    "end": "1356030"
  },
  {
    "text": "score start and we ask for the key set because that's what this Court did get",
    "start": "1356030",
    "end": "1361190"
  },
  {
    "text": "the key set then I'm asking for a stream on it and once I do I'm gonna start",
    "start": "1361190",
    "end": "1367610"
  },
  {
    "text": "collecting but in this case I'm gonna say grouping by and what am I really",
    "start": "1367610",
    "end": "1373490"
  },
  {
    "text": "grouping by well given a score I want to get the score well in this case of",
    "start": "1373490",
    "end": "1379610"
  },
  {
    "text": "course I'm getting the name isn't it so given the name I'm gonna get the score start get for the name and I'm",
    "start": "1379610",
    "end": "1387380"
  },
  {
    "text": "asking you to get me thus the perform the grouping but perform the grouping",
    "start": "1387380",
    "end": "1393140"
  },
  {
    "text": "based on the name but get the score from the name so in other words group based",
    "start": "1393140",
    "end": "1398600"
  },
  {
    "text": "on the score let's think about what this one powerful line really means this is",
    "start": "1398600",
    "end": "1403940"
  },
  {
    "text": "extremely concise code there's a lot of stuff going on in it so it's a bigger",
    "start": "1403940",
    "end": "1409490"
  },
  {
    "text": "learning curve it's kind of like operating a crane versus digging the",
    "start": "1409490",
    "end": "1414590"
  },
  {
    "text": "ground using you know tools by hand well obviously to dig with the hand doesn't",
    "start": "1414590",
    "end": "1421190"
  },
  {
    "text": "require a whole lot of skill but it's a lot of labour and sweating but you won't let anybody to get down that crane some",
    "start": "1421190",
    "end": "1427970"
  },
  {
    "text": "kind of education and learning is needed but the person sitting on the crane can press the button and let the machine do",
    "start": "1427970",
    "end": "1433580"
  },
  {
    "text": "the work the get the grouping by method is like the crane but you got to know what button to press really but what is",
    "start": "1433580",
    "end": "1440180"
  },
  {
    "text": "grouping by really doing well essentially what this code is doing is it literally creates a bucket and once",
    "start": "1440180",
    "end": "1446270"
  },
  {
    "text": "it creates a bucket it says if a bucket doesn't exist for a particular score I'm",
    "start": "1446270",
    "end": "1451460"
  },
  {
    "text": "gonna create a new bucket if the bucket exists I'm gonna fetch the element that is there already and then add the",
    "start": "1451460",
    "end": "1458720"
  },
  {
    "text": "element back to it after appending so it takes care of all the work that we have to do by using this declaration style of",
    "start": "1458720",
    "end": "1466460"
  },
  {
    "text": "approach so more than functional style here it is the decorative within the functional style that's",
    "start": "1466460",
    "end": "1472450"
  },
  {
    "text": "really shining at this point now this is more about job and more than anything else in the next one but I know that",
    "start": "1472450",
    "end": "1478720"
  },
  {
    "text": "c-sharp also has very much facilities like that where you can simply go back to this and say I want to simply call",
    "start": "1478720",
    "end": "1485950"
  },
  {
    "text": "the get method and you can make the code a little bit more concise and expressive as well so that is an example of how you",
    "start": "1485950",
    "end": "1492190"
  },
  {
    "text": "can rewrite the code to avoid a lot of work that you otherwise have to do so that gives you an idea about how you can",
    "start": "1492190",
    "end": "1498880"
  },
  {
    "text": "minimize all that extra effort in writing this code in the in this particular case so what did we achieve",
    "start": "1498880",
    "end": "1505030"
  },
  {
    "text": "by doing this well it's very highly expressive but like I said what really",
    "start": "1505030",
    "end": "1511000"
  },
  {
    "text": "shines here is the declarative nature of functional style but we have to really",
    "start": "1511000",
    "end": "1516250"
  },
  {
    "text": "know what kind of functions we have to use and this is one of the challenges of",
    "start": "1516250",
    "end": "1521440"
  },
  {
    "text": "functional style of programming is not everything is going to fit into a filter map and reduce we have to look for other",
    "start": "1521440",
    "end": "1528910"
  },
  {
    "text": "methods in the gender available in the libraries and the packages we are using and and always keep an eye for this",
    "start": "1528910",
    "end": "1535840"
  },
  {
    "text": "declaration of nature where you can tell what to do rather than having to get immersed into how to do these things",
    "start": "1535840",
    "end": "1542970"
  },
  {
    "text": "well the next example I'm going to show you here is something I got as a email",
    "start": "1542970",
    "end": "1548200"
  },
  {
    "text": "from somebody asking hey I've seen your talks before but here's a problem and I",
    "start": "1548200",
    "end": "1553900"
  },
  {
    "text": "can't quite figure out how to implement it so I thought I will use this from somebody who actually sent a problem",
    "start": "1553900",
    "end": "1559060"
  },
  {
    "text": "very similar to this one and it really illustrates the point but before I talk about it I want to go back and talk",
    "start": "1559060",
    "end": "1564880"
  },
  {
    "text": "about something a little bit else because it really helps to hone in on the idea of some of the functional you",
    "start": "1564880",
    "end": "1572260"
  },
  {
    "text": "know programming methods we normally use so to understand this let's talk about a few methods we normally use we normally",
    "start": "1572260",
    "end": "1578860"
  },
  {
    "text": "use a filter well in the case of C sharp things like select and wear are very",
    "start": "1578860",
    "end": "1584410"
  },
  {
    "text": "much equivalent to this in F sharp you use the word filter in C sharp you quite don't but the concepts are really the",
    "start": "1584410",
    "end": "1590740"
  },
  {
    "text": "same across the languages so we typically use a filter and we use a map things like for example select and we're",
    "start": "1590740",
    "end": "1597280"
  },
  {
    "text": "in C sharp or filter and map in in F sharp and in Java and other languages as",
    "start": "1597280",
    "end": "1602740"
  },
  {
    "text": "well but one confusion about times developers have is you know when when do I use filter versus maybe when",
    "start": "1602740",
    "end": "1610240"
  },
  {
    "text": "do I use a flat map so I want to spend a few minutes really identifying when I",
    "start": "1610240",
    "end": "1616570"
  },
  {
    "text": "would probably use a flat map because looking at it this way has truly helped me in my understanding so to understand",
    "start": "1616570",
    "end": "1623530"
  },
  {
    "text": "this I'm gonna take a silly example and work with it let's take a list of numbers in this case just let's let's say these numbers",
    "start": "1623530",
    "end": "1629830"
  },
  {
    "text": "1 2 3 4 a minute I'm gonna write a silly method right here in double it and the",
    "start": "1629830",
    "end": "1635770"
  },
  {
    "text": "double it method takes a number and all it's going to do is return number times 2 so that's pretty you know it's easy to",
    "start": "1635770",
    "end": "1642850"
  },
  {
    "text": "see what it's doing but I'm gonna write one more method as well and in this case I will write it as let's call this as",
    "start": "1642850",
    "end": "1651390"
  },
  {
    "text": "before-and-after pictures which is pretty silly but the straights the point I'm gonna return in this case a new",
    "start": "1651390",
    "end": "1658030"
  },
  {
    "text": "collection an array in this case I'll say number plus 1 and number minus 1 has",
    "start": "1658030",
    "end": "1664810"
  },
  {
    "text": "two different values so given this collection of values what do they want to do well if I wanted to",
    "start": "1664810",
    "end": "1671950"
  },
  {
    "text": "really double each of the values in the collection what would I do I would say number start and then I",
    "start": "1671950",
    "end": "1678730"
  },
  {
    "text": "would say map right here and given an element in the collection I would say",
    "start": "1678730",
    "end": "1684370"
  },
  {
    "text": "double it of the element and then of course I'd say for each and I will print",
    "start": "1684370",
    "end": "1690220"
  },
  {
    "text": "it out system.out.println and I will just print it out so when it run this code notice it reduced the values 2 4 &",
    "start": "1690220",
    "end": "1697480"
  },
  {
    "text": "6 well that's a clearly a nice little example of using map function",
    "start": "1697480",
    "end": "1703570"
  },
  {
    "text": "nothing really confusing over there but on the other hand let's go ahead and say",
    "start": "1703570",
    "end": "1708730"
  },
  {
    "text": "numbers start stream but in this case I'm gonna perform a map operation but",
    "start": "1708730",
    "end": "1714610"
  },
  {
    "text": "I'm gonna say before and after E and then I'm gonna say for each system dot",
    "start": "1714610",
    "end": "1721120"
  },
  {
    "text": "out print line well there's a bit of a problem right now with this code the",
    "start": "1721120",
    "end": "1726130"
  },
  {
    "text": "reason why this is a problem is we're using the map function here as much as",
    "start": "1726130",
    "end": "1731470"
  },
  {
    "text": "in the previous case but when you look at the output unfortunately look at how",
    "start": "1731470",
    "end": "1736840"
  },
  {
    "text": "nasty that 1s it gives you an array or yeah it gives you a collection of arrays or array for",
    "start": "1736840",
    "end": "1743740"
  },
  {
    "text": "each element most likely not what you really wanted let's step back and look",
    "start": "1743740",
    "end": "1749020"
  },
  {
    "text": "at this a little bit different before we go any further look at the function double it for one second what can we say",
    "start": "1749020",
    "end": "1756490"
  },
  {
    "text": "about double it double it is a one to one one to one function so what does",
    "start": "1756490",
    "end": "1763840"
  },
  {
    "text": "that really mean a one to one function means given one object it returns back",
    "start": "1763840",
    "end": "1769090"
  },
  {
    "text": "one object to you on the other hand look at the before and after a function is a",
    "start": "1769090",
    "end": "1775770"
  },
  {
    "text": "one-to-many function so in this case what the before-and-after does is given",
    "start": "1775770",
    "end": "1782230"
  },
  {
    "text": "one value it returns multiple values so one of the things I normally do is I",
    "start": "1782230",
    "end": "1788500"
  },
  {
    "text": "look at the function I'm using and ask the question is it a one-to-one function R is it a one-to-many function well",
    "start": "1788500",
    "end": "1796090"
  },
  {
    "text": "typically speaking here's a way to think about it so if the function is",
    "start": "1796090",
    "end": "1801580"
  },
  {
    "text": "one-to-one well then use map if the",
    "start": "1801580",
    "end": "1808240"
  },
  {
    "text": "function is one too many well if it's one too many then what",
    "start": "1808240",
    "end": "1815740"
  },
  {
    "text": "should we use then use we'll come back to that in just a minute well we'll take a detour and come back",
    "start": "1815740",
    "end": "1821740"
  },
  {
    "text": "to this in just a minute let's switch really quickly to Ruby here",
    "start": "1821740",
    "end": "1827020"
  },
  {
    "text": "only because it's a little bit easier for me to show this in Ruby so let's take a look at a list is equal to and",
    "start": "1827020",
    "end": "1834460"
  },
  {
    "text": "I'm gonna say 1 2 3 4 5 & 6 well I'm asking for list start count and",
    "start": "1834460",
    "end": "1840870"
  },
  {
    "text": "clearly you can see the list has six elements no confusion about it on the",
    "start": "1840870",
    "end": "1846580"
  },
  {
    "text": "other hand if I go back to this code and I put a little square bracket right",
    "start": "1846580",
    "end": "1851740"
  },
  {
    "text": "there now what does the list really contain it contains a single element 1 a",
    "start": "1851740",
    "end": "1857800"
  },
  {
    "text": "single element 2 but it contains a collection which which internally contains 3 4 & 5 and then a single",
    "start": "1857800",
    "end": "1865210"
  },
  {
    "text": "element when I ask for the count nor the value right now is a 4 because the list",
    "start": "1865210",
    "end": "1871210"
  },
  {
    "text": "is contains four elements not six elements but what I can do though is I can ask",
    "start": "1871210",
    "end": "1877880"
  },
  {
    "text": "for list art flatten and then I can ask for account notice when I flatten it it becomes a",
    "start": "1877880",
    "end": "1885650"
  },
  {
    "text": "value of six so what is flat and really do the flatten actually so if I say",
    "start": "1885650",
    "end": "1891530"
  },
  {
    "text": "something like Lister 2 equal to list one dot flatten listed to really is",
    "start": "1891530",
    "end": "1897680"
  },
  {
    "text": "going to be the following is equal to one two three four five and six so in",
    "start": "1897680",
    "end": "1903020"
  },
  {
    "text": "other words it flattens the list so when a list contains a collection of collections the flagon will just flatten",
    "start": "1903020",
    "end": "1911150"
  },
  {
    "text": "it out and give you one collection with only those elements directly not a",
    "start": "1911150",
    "end": "1916160"
  },
  {
    "text": "collection of collection well so what are we really after here well remember",
    "start": "1916160",
    "end": "1921290"
  },
  {
    "text": "if we use a map with a one-to-many",
    "start": "1921290",
    "end": "1926440"
  },
  {
    "text": "function or what are we really getting well here's the beauty if you take a",
    "start": "1926440",
    "end": "1932000"
  },
  {
    "text": "collection I'm using a word very loosely here instead of using the word stream if it's a collection of tea dot map let's",
    "start": "1932000",
    "end": "1939860"
  },
  {
    "text": "call it as f1 where function f1 one function one to one then the result of",
    "start": "1939860",
    "end": "1946340"
  },
  {
    "text": "this is a collection of are where the return type of the function is a Type R",
    "start": "1946340",
    "end": "1952540"
  },
  {
    "text": "unfortunately if you say collection of tea dot map function want to end on it",
    "start": "1952540",
    "end": "1959060"
  },
  {
    "text": "the result of this unfortunately is a collection of collection of are maybe",
    "start": "1959060",
    "end": "1965600"
  },
  {
    "text": "not what you really wanted so what if you really want to get a collection right so in other words you're saying",
    "start": "1965600",
    "end": "1971960"
  },
  {
    "text": "give it a collection of tea I want as pass a one to n function but",
    "start": "1971960",
    "end": "1977960"
  },
  {
    "text": "what I want as a result is a collection of are not a collection of collection of",
    "start": "1977960",
    "end": "1984020"
  },
  {
    "text": "our hello how would you do that well here's a very easy way to do it you can",
    "start": "1984020",
    "end": "1989030"
  },
  {
    "text": "perform a collection of tea dot map f1 n dot flatten and then you can perform",
    "start": "1989030",
    "end": "1997160"
  },
  {
    "text": "that to get a collection of our isn't it so in other words what you want to do",
    "start": "1997160",
    "end": "2003640"
  },
  {
    "text": "you want to perform the map operation and then you want to perform a flattening operation on it well instead",
    "start": "2003640",
    "end": "2011230"
  },
  {
    "text": "of doing as a two-step process why not combine them so what you really want it",
    "start": "2011230",
    "end": "2017320"
  },
  {
    "text": "is a function called map flat now I want to pose a challenge on you don't do this",
    "start": "2017320",
    "end": "2024340"
  },
  {
    "text": "too much but try this maybe when you're alone at home and try saying this try saying the word mat flat this hurts the",
    "start": "2024340",
    "end": "2032830"
  },
  {
    "text": "jaw really bad you couldn't try it this is so awkward mat flat the the mouth",
    "start": "2032830",
    "end": "2039820"
  },
  {
    "text": "doesn't move properly humans were not created to say words like that and imagine if they had created a map flat",
    "start": "2039820",
    "end": "2047470"
  },
  {
    "text": "function 300 years later humans will be structurally different the descendants",
    "start": "2047470",
    "end": "2053679"
  },
  {
    "text": "of programmers is in there so this is so they will know these people were born to programmers because they said Matt flat",
    "start": "2053679",
    "end": "2060310"
  },
  {
    "text": "and that did not go well at all I'm so thankful to them forever they called it",
    "start": "2060310",
    "end": "2065590"
  },
  {
    "text": "flat math how easy that is to say so this was purely called as a flat map",
    "start": "2065590",
    "end": "2071169"
  },
  {
    "text": "because mat flat doesn't try this at home you will know the pain I'm talking about right that is so awkward to say it",
    "start": "2071169",
    "end": "2078250"
  },
  {
    "text": "so thank goodness they call it flat map so a combination of flat map performs a",
    "start": "2078250",
    "end": "2083908"
  },
  {
    "text": "masters and then performs a flattening after that it's a reverse order to save",
    "start": "2083909",
    "end": "2090190"
  },
  {
    "text": "the human jaw so the point really is that you're gonna take the map operation and then you're gonna flatten it after",
    "start": "2090190",
    "end": "2097270"
  },
  {
    "text": "that well now that we talked about how this works let's go ahead and give it a try so I'm gonna take this code right",
    "start": "2097270",
    "end": "2103330"
  },
  {
    "text": "here and what I'm gonna do is to scale it's called flat map and of course in",
    "start": "2103330",
    "end": "2108610"
  },
  {
    "text": "this case I'm going to simply say stream dart off this is again more specific to Java but the idea remains the same and",
    "start": "2108610",
    "end": "2115210"
  },
  {
    "text": "I'm going to bring this in into a stream and as a result notice when I run this",
    "start": "2115210",
    "end": "2121780"
  },
  {
    "text": "code this is applying the flat map operation where it performs that transformation or mapping first and then",
    "start": "2121780",
    "end": "2128830"
  },
  {
    "text": "it flattens it out to get the results after that and so we can see the result over here is 0 2 1 3 & 2 for which",
    "start": "2128830",
    "end": "2136730"
  },
  {
    "text": "the values we are expecting not that silly array that it was returning inside",
    "start": "2136730",
    "end": "2141829"
  },
  {
    "text": "of that so that gives us an idea about how this actually works so this becomes a really nice way to implement it well",
    "start": "2141829",
    "end": "2148849"
  },
  {
    "text": "having done this now let's go back to the problem I really wanted to work with which is the problem that this gentleman",
    "start": "2148849",
    "end": "2155510"
  },
  {
    "text": "sent me to say how do you really solve this problem so when he sent me the question he had been exposed to filter",
    "start": "2155510",
    "end": "2162140"
  },
  {
    "text": "and map and reduce and he had really trouble connecting to the idea because this problem was a little bit more",
    "start": "2162140",
    "end": "2168530"
  },
  {
    "text": "intense and when I looked at the problem I said I see the problem here the issue is not with mapping it's a one-to-many",
    "start": "2168530",
    "end": "2176030"
  },
  {
    "text": "function and so that's why we need to really use a flat map operation so we're gonna use functional composition clearly",
    "start": "2176030",
    "end": "2183740"
  },
  {
    "text": "but we're gonna engage into a few other computations as well let's take a look",
    "start": "2183740",
    "end": "2189440"
  },
  {
    "text": "at the code before we talk about the solution well this is going to use the",
    "start": "2189440",
    "end": "2194530"
  },
  {
    "text": "solution of the Euclid's algorithm to provide four values of a B and C which",
    "start": "2194530",
    "end": "2202849"
  },
  {
    "text": "satisfy this particular equation the values of a B and C where a square plus",
    "start": "2202849",
    "end": "2210050"
  },
  {
    "text": "B square is equal to C square so when you run this code I'm asking for 10",
    "start": "2210050",
    "end": "2215180"
  },
  {
    "text": "different values in here notice three four five and six eight ten and so on so",
    "start": "2215180",
    "end": "2220819"
  },
  {
    "text": "these are the ten values for combination of a B and C but of course you could",
    "start": "2220819",
    "end": "2226099"
  },
  {
    "text": "also ask for 15 values if you really want to do and that's going to be 15",
    "start": "2226099",
    "end": "2231170"
  },
  {
    "text": "different values but the point really in this case is how do we find it well you puts algorithm says given a value of m",
    "start": "2231170",
    "end": "2239270"
  },
  {
    "text": "and n we can find out the a B and C for those values by using these this formula",
    "start": "2239270",
    "end": "2246680"
  },
  {
    "text": "so it's it says you know given this M and n here you go here's a value of a B",
    "start": "2246680",
    "end": "2251930"
  },
  {
    "text": "and C well that's great but how do we use this to find ten values or fifteen",
    "start": "2251930",
    "end": "2257660"
  },
  {
    "text": "values and so on so if you look at the code notice what it does it first creates an array list or a list of",
    "start": "2257660",
    "end": "2264609"
  },
  {
    "text": "Triple A triples once it creates a list of triples it says count is equal to one",
    "start": "2264609",
    "end": "2270200"
  },
  {
    "text": "I want that many number of values so we start with M going from 2 to infinity",
    "start": "2270200",
    "end": "2275530"
  },
  {
    "text": "literally and then n goes from 1 but 1 less than M and then of course we go",
    "start": "2275530",
    "end": "2283849"
  },
  {
    "text": "ahead and call the get triple for that value of M and N in the loop and we add",
    "start": "2283849",
    "end": "2289220"
  },
  {
    "text": "it to the triples collection then we increment the count then we say if the",
    "start": "2289220",
    "end": "2294290"
  },
  {
    "text": "count is greater than number of values perform a break but unfortunately look",
    "start": "2294290",
    "end": "2300260"
  },
  {
    "text": "at this beautiful code we have to do this one more time this Court deserves",
    "start": "2300260",
    "end": "2305270"
  },
  {
    "text": "framing on the wall isn't that to say this is of the life of a programmer is where we have to break out of the loop",
    "start": "2305270",
    "end": "2311180"
  },
  {
    "text": "once and again twice right so this is really not very pleasant code again but",
    "start": "2311180",
    "end": "2317119"
  },
  {
    "text": "that's because we have to break out of the inner loop but we also have to break out of the outer loop as well it's not",
    "start": "2317119",
    "end": "2322730"
  },
  {
    "text": "that much code but it's not that intuitive as well so let's go ahead and run this again that's the output we got",
    "start": "2322730",
    "end": "2329000"
  },
  {
    "text": "from this code but what am I going to do to replace this code with a functional style well first of all couple of things",
    "start": "2329000",
    "end": "2336349"
  },
  {
    "text": "to really think about notice the for loop that is here well the for loop what is the for loop do again put it into",
    "start": "2336349",
    "end": "2343400"
  },
  {
    "text": "words so iterate over the range from 2 to",
    "start": "2343400",
    "end": "2349810"
  },
  {
    "text": "infinity right so it is unbounded iteration that's what it is on the other",
    "start": "2349810",
    "end": "2355760"
  },
  {
    "text": "hand what does this do iterate in this case over the range 1 to",
    "start": "2355760",
    "end": "2361880"
  },
  {
    "text": "M minus 1 so this is again an iteration that you are dealing with",
    "start": "2361880",
    "end": "2367160"
  },
  {
    "text": "but there's another observation you need to make in this code only look at the",
    "start": "2367160",
    "end": "2372230"
  },
  {
    "text": "inner loop for a minute what does the inner loop really do the inner loop goes",
    "start": "2372230",
    "end": "2377480"
  },
  {
    "text": "from n equal to 1 to M minus 1 but the result of the inner loop is it generates",
    "start": "2377480",
    "end": "2384859"
  },
  {
    "text": "a collection of these values that are returned by get triple so in other words",
    "start": "2384859",
    "end": "2391579"
  },
  {
    "text": "we are going to get M minus 1 get triple values triple values at this point so as",
    "start": "2391579",
    "end": "2398720"
  },
  {
    "text": "a result if you want to consider this as a function what does that function do the function",
    "start": "2398720",
    "end": "2405170"
  },
  {
    "text": "is a one-to-many function because given one value of n it gives you many values",
    "start": "2405170",
    "end": "2412099"
  },
  {
    "text": "of triples because you know as you iterate through you go from n as 1 to M",
    "start": "2412099",
    "end": "2417559"
  },
  {
    "text": "minus 1 so given one value of M you get M minus 1 value of the triple hey that's",
    "start": "2417559",
    "end": "2423650"
  },
  {
    "text": "great that function I've highlighted right now internally is a one-to-many function but what I really want in the",
    "start": "2423650",
    "end": "2430519"
  },
  {
    "text": "outer loop is one list of all the triples aha that's a one-to-many",
    "start": "2430519",
    "end": "2435950"
  },
  {
    "text": "function but I need to use the one-to-many function to get a list of values not on the stuff list of values",
    "start": "2435950",
    "end": "2442849"
  },
  {
    "text": "so that is kind of the thought process I went through this to say first to realize that these two are iterations",
    "start": "2442849",
    "end": "2449839"
  },
  {
    "text": "and second to realize that this one is a one-to-many function and that just",
    "start": "2449839",
    "end": "2455450"
  },
  {
    "text": "clicked in my mind to say AHA that's a one-to-many function which means that the flatmap problem not a map problem as",
    "start": "2455450",
    "end": "2462710"
  },
  {
    "text": "long as you struggle with the map you're gonna get stuck with it but realizing it's a one-to-many function gives you",
    "start": "2462710",
    "end": "2468200"
  },
  {
    "text": "the relief so let's see how we're gonna implement this using a flat map so what I'm gonna do now is to go back to this",
    "start": "2468200",
    "end": "2475190"
  },
  {
    "text": "code and I'm going to bring in a few different functions to work with the first thing I'm gonna do here is I'm",
    "start": "2475190",
    "end": "2481789"
  },
  {
    "text": "gonna say stream dart let's say stream dart eater rate and what am I going to",
    "start": "2481789",
    "end": "2487219"
  },
  {
    "text": "do with the iterate I'm gonna start with the value of 2 because the collection is",
    "start": "2487219",
    "end": "2492920"
  },
  {
    "text": "starting with the value of 2 as you can see so 2 comma given a value give me a",
    "start": "2492920",
    "end": "2498440"
  },
  {
    "text": "value plus 1 so this becomes an iteration to go on and compute the",
    "start": "2498440",
    "end": "2503779"
  },
  {
    "text": "values just stare at this for a minute what kind of iteration is it it's an",
    "start": "2503779",
    "end": "2509710"
  },
  {
    "text": "infinite stream it's an unbounded collection of data it starts with 2 & 2 & 3 & 4 & 5 & 6 7 8",
    "start": "2509710",
    "end": "2519259"
  },
  {
    "text": "and keeps on going there is absolutely no limit to it I know what you're",
    "start": "2519259",
    "end": "2524809"
  },
  {
    "text": "thinking over there you're thinking my goodness if it's really infinite where",
    "start": "2524809",
    "end": "2530539"
  },
  {
    "text": "would I store this on the cloud of course but the point really is you take the Infinite's dream and now what are you",
    "start": "2530539",
    "end": "2537240"
  },
  {
    "text": "gonna do with it you're gonna then say a flat map operation on it and that gives",
    "start": "2537240",
    "end": "2542760"
  },
  {
    "text": "you a value of M because you're iterating over the outer collection so this becomes an iteration right here a",
    "start": "2542760",
    "end": "2550200"
  },
  {
    "text": "flat map operation then what do we do for every given value of n remember the",
    "start": "2550200",
    "end": "2556080"
  },
  {
    "text": "second iteration we go from n is 1 but to 1 less than M well that's very easy",
    "start": "2556080",
    "end": "2563460"
  },
  {
    "text": "you simply say in here this becomes an industry may range from the value to",
    "start": "2563460",
    "end": "2570900"
  },
  {
    "text": "pardon me 1 because we're starting with the value of 1 but to value M minus 1 so",
    "start": "2570900",
    "end": "2577800"
  },
  {
    "text": "that basically becomes the M value right here the range will go from 1 2 all the",
    "start": "2577800",
    "end": "2582930"
  },
  {
    "text": "way 1 less than the value you provide right there then you perform a map operation why do we perform a map",
    "start": "2582930",
    "end": "2589830"
  },
  {
    "text": "because notice this one for every value of n you get a transformation of the get",
    "start": "2589830",
    "end": "2597150"
  },
  {
    "text": "triple so that becomes a map operation we're given an n I call the get triple",
    "start": "2597150",
    "end": "2603630"
  },
  {
    "text": "of M comma N and that gives you the value this itself is a collection but",
    "start": "2603630",
    "end": "2610470"
  },
  {
    "text": "then you take this collection a one-to-many transformation and then you flat map on it well once we do this a",
    "start": "2610470",
    "end": "2617640"
  },
  {
    "text": "little bit of a Java ism here so once we do this the next step after this here",
    "start": "2617640",
    "end": "2623490"
  },
  {
    "text": "used to say dart limit and this is going to be the number of values that I want",
    "start": "2623490",
    "end": "2629460"
  },
  {
    "text": "to limit notice how beautifully you just have to say it once to say give me that many",
    "start": "2629460",
    "end": "2634980"
  },
  {
    "text": "values no more than that you don't have to say it twice and then of course once you do this then you're going to simply",
    "start": "2634980",
    "end": "2641940"
  },
  {
    "text": "collect it to a list because all I want to do here is return a list of values",
    "start": "2641940",
    "end": "2648270"
  },
  {
    "text": "and that comes from the collectors again so that's basically the transformation",
    "start": "2648270",
    "end": "2653640"
  },
  {
    "text": "of the code so you start with the ETA rate from 2 to M 2 to infinity and then",
    "start": "2653640",
    "end": "2659580"
  },
  {
    "text": "you say a flat map given all these transformations for get tripled for M and n I want to limit that to that many",
    "start": "2659580",
    "end": "2667320"
  },
  {
    "text": "values and return the result out of it so when I run this code you can see it produced the same result but",
    "start": "2667320",
    "end": "2673830"
  },
  {
    "text": "this was a little bit more intense because we had to really figure out that it's a one-to-many transformation and we",
    "start": "2673830",
    "end": "2680700"
  },
  {
    "text": "had to use a flat map in this case for this kind of transformation so here the flat map is a very powerful operation",
    "start": "2680700",
    "end": "2687150"
  },
  {
    "text": "one thing I want to leave you with this key is to remember the one to one versus",
    "start": "2687150",
    "end": "2692880"
  },
  {
    "text": "the one to many and and that realization has been fairly helpful for me in",
    "start": "2692880",
    "end": "2699720"
  },
  {
    "text": "figuring out when to use a map versus when to use a flat map and that becomes really helpful to use as well well so we",
    "start": "2699720",
    "end": "2708180"
  },
  {
    "text": "looked at this but we also used an infinite stream to further that point let's look one final example here to",
    "start": "2708180",
    "end": "2715320"
  },
  {
    "text": "wrap this up we're gonna start with the code that's a little bit cryptic what does this code really do let's take a",
    "start": "2715320",
    "end": "2721680"
  },
  {
    "text": "look at the code real quick notice it says compute sum of square root of",
    "start": "2721680",
    "end": "2726900"
  },
  {
    "text": "primes we have YZ Prime that's telling us if a number is prime but notice I have a start and I have a count now what does",
    "start": "2726900",
    "end": "2734370"
  },
  {
    "text": "this code really do it first of all sets an index to start it sets a computer to",
    "start": "2734370",
    "end": "2741090"
  },
  {
    "text": "count to zero and a sum to be zero as well then it says wild computer count is",
    "start": "2741090",
    "end": "2747420"
  },
  {
    "text": "less than count which is the value given here then we check if the number is prime if it is a prime number we find",
    "start": "2747420",
    "end": "2754350"
  },
  {
    "text": "the square root of it add to the sum and then we increment the count right here and then we also are incrementing the",
    "start": "2754350",
    "end": "2761670"
  },
  {
    "text": "index after that look at this code for a minute and see this is an example of",
    "start": "2761670",
    "end": "2766880"
  },
  {
    "text": "accidental complexity the reason it's accidental complexity is first of all",
    "start": "2766880",
    "end": "2771960"
  },
  {
    "text": "you have to initialize all these variables then you had to check the bounds over here now think about this",
    "start": "2771960",
    "end": "2778860"
  },
  {
    "text": "for a minute computer count less than count what do we do as programmers the minute you put",
    "start": "2778860",
    "end": "2785520"
  },
  {
    "text": "the less than symbol immediately you come to a grinding halt and you ask the",
    "start": "2785520",
    "end": "2791010"
  },
  {
    "text": "question is it less than or less than or equal to do you ever ask this question",
    "start": "2791010",
    "end": "2796770"
  },
  {
    "text": "every single time the new programmer asked me once what is that",
    "start": "2796770",
    "end": "2802960"
  },
  {
    "text": "I said that's a international symbol for confusion because every time you type it",
    "start": "2802960",
    "end": "2808480"
  },
  {
    "text": "you we look stupid isn't it you're like huh you said less than or less than or equal to we're never sure about it and",
    "start": "2808480",
    "end": "2814390"
  },
  {
    "text": "then of course you find the prime number if it is a prime number you perform the",
    "start": "2814390",
    "end": "2819460"
  },
  {
    "text": "math then you have to increment it look at the complexity this cannot be outside",
    "start": "2819460",
    "end": "2824500"
  },
  {
    "text": "these two cannot be inside this has to be inside that has to be how cruel this",
    "start": "2824500",
    "end": "2830710"
  },
  {
    "text": "code is and the beauty is when you look at this code it produces a result but",
    "start": "2830710",
    "end": "2836230"
  },
  {
    "text": "that's a lot of complexity built into it like I mentioned earlier imperative code",
    "start": "2836230",
    "end": "2841360"
  },
  {
    "text": "is easier to write but really hard to read you have to sit there and you reason through the code that's a lot of",
    "start": "2841360",
    "end": "2847720"
  },
  {
    "text": "effort to do but how can we really make this a lot simpler and much less effort",
    "start": "2847720",
    "end": "2853000"
  },
  {
    "text": "for us to work with so notice what I'm gonna do now I'm gonna go back to this code and say",
    "start": "2853000",
    "end": "2858310"
  },
  {
    "text": "why torture ourselves with all this detail what I'm gonna do is return and",
    "start": "2858310",
    "end": "2864220"
  },
  {
    "text": "in this case I'm gonna say stream dot eater rate we're gonna start with the",
    "start": "2864220",
    "end": "2869350"
  },
  {
    "text": "start value right here which is the given value so we start comma given an",
    "start": "2869350",
    "end": "2875230"
  },
  {
    "text": "element element plus one so this says I want to start iterating from the start",
    "start": "2875230",
    "end": "2880660"
  },
  {
    "text": "star plus want to start plus two and so on then we say dot filter and in this",
    "start": "2880660",
    "end": "2886150"
  },
  {
    "text": "case all I'm gonna ask for is east prime so start with an infinite series of",
    "start": "2886150",
    "end": "2892390"
  },
  {
    "text": "numbers starting with start but only give me the prime numbers after that and once you give me the prime number map",
    "start": "2892390",
    "end": "2899260"
  },
  {
    "text": "this over to in this case of course math square root because all I care about the",
    "start": "2899260",
    "end": "2906220"
  },
  {
    "text": "square root of the values then you say limit and I'm going to limit it to count did you notice how that worked you pass",
    "start": "2906220",
    "end": "2914440"
  },
  {
    "text": "and ask the question is it count or does it count minus one you don't have to",
    "start": "2914440",
    "end": "2919930"
  },
  {
    "text": "worry about it it's count that's all you have to part there's no confusion about it and then you perform the sum operation again that",
    "start": "2919930",
    "end": "2927400"
  },
  {
    "text": "declarative style shines over there you're not telling how to perform the totaling you simply say called sum and",
    "start": "2927400",
    "end": "2933790"
  },
  {
    "text": "be done with it so you start with a collection of all the values starting with a with start but you get all the prime numbers",
    "start": "2933790",
    "end": "2940360"
  },
  {
    "text": "starting with start but you get the square root of prime numbers but you only get the count of them and you",
    "start": "2940360",
    "end": "2946690"
  },
  {
    "text": "totally do get the results out of it and then when you run the code of course it produces the same result not only is the",
    "start": "2946690",
    "end": "2953230"
  },
  {
    "text": "code more concise it's a lot more easier to understand it's a lot more fluent as well as we can see here and that reduces",
    "start": "2953230",
    "end": "2960610"
  },
  {
    "text": "a burden on us quite a bit as you can see right here so what does this code really provide for us first of all the",
    "start": "2960610",
    "end": "2966970"
  },
  {
    "text": "code is very concise but I don't want the code to be so concise it becomes terse where it's really hard to",
    "start": "2966970",
    "end": "2973480"
  },
  {
    "text": "understand it's really important to make the code easier to understand that's where the conciseness matters the court",
    "start": "2973480",
    "end": "2979390"
  },
  {
    "text": "follows an infinite series and the benefit of this is you can have any",
    "start": "2979390",
    "end": "2984700"
  },
  {
    "text": "number of elements I can create but infinite series will not work without lazy evaluations so laziness is one of",
    "start": "2984700",
    "end": "2992140"
  },
  {
    "text": "the most important virtues our functional programming in fact if somebody comes to you and says",
    "start": "2992140",
    "end": "2997620"
  },
  {
    "text": "object-oriented programming right what would you say is really the core of",
    "start": "2997620",
    "end": "3002640"
  },
  {
    "text": "objective programming I would say polymorphism right polymorphism is -",
    "start": "3002640",
    "end": "3009770"
  },
  {
    "text": "object-oriented programming because what is the real benefit of optional",
    "start": "3009770",
    "end": "3015180"
  },
  {
    "text": "programming it is extensibility we get from polymorphism so polymorphism is - object of programming as I'm gonna say",
    "start": "3015180",
    "end": "3022620"
  },
  {
    "text": "lazy evaluation is - functional programming because to me that is what",
    "start": "3022620",
    "end": "3028740"
  },
  {
    "text": "we really are after we want efficiency through lazy evaluation so if you give",
    "start": "3028740",
    "end": "3034770"
  },
  {
    "text": "me a functional style but you don't give me laziness it doesn't simply cut it",
    "start": "3034770",
    "end": "3040800"
  },
  {
    "text": "this is what I really enjoyed with c-sharp for example when I looked at the code I was first of all said oh my",
    "start": "3040800",
    "end": "3047520"
  },
  {
    "text": "goodness is this beautiful but the performance is gonna suck isn't it and then I discovered c-sharp can do",
    "start": "3047520",
    "end": "3054510"
  },
  {
    "text": "laziness automatically for you behind the scenes and it doesn't do any extra work this is what makes function",
    "start": "3054510",
    "end": "3061290"
  },
  {
    "text": "programming very approachable otherwise languages like no for example",
    "start": "3061290",
    "end": "3066890"
  },
  {
    "text": "Ruby and JavaScript the Hat functional style for a very long time but we cannot",
    "start": "3066890",
    "end": "3072619"
  },
  {
    "text": "use the functional style with big data projects if we don't have the efficiency in the code and and to really make this",
    "start": "3072619",
    "end": "3079819"
  },
  {
    "text": "affordable for intense computations in Big Data we want efficiency and",
    "start": "3079819",
    "end": "3084980"
  },
  {
    "text": "performance so to me that laziness is absolutely critical if you remove the",
    "start": "3084980",
    "end": "3090200"
  },
  {
    "text": "laziness of evaluation it is really what you're getting is a cuteness of code not",
    "start": "3090200",
    "end": "3095690"
  },
  {
    "text": "the performance and efficiency so to me the most important thing about a functional style of programming really",
    "start": "3095690",
    "end": "3102109"
  },
  {
    "text": "is that laziness and and without laziness there is really no point in doing any of this because all you're",
    "start": "3102109",
    "end": "3108589"
  },
  {
    "text": "left with at the point is just cuteness of code and you're not going to get performance then there today and without",
    "start": "3108589",
    "end": "3113599"
  },
  {
    "text": "getting performance we're not going to get go anywhere so to me that laziness is extremely important that's what we",
    "start": "3113599",
    "end": "3119420"
  },
  {
    "text": "are seeing in this code is notice that this is absolutely lazy it doesn't",
    "start": "3119420",
    "end": "3124819"
  },
  {
    "text": "evaluate this function until it really requires that data so all these",
    "start": "3124819",
    "end": "3131210"
  },
  {
    "text": "functions are absolutely lazy they don't perform any computations just to illustrate the point right here let's go",
    "start": "3131210",
    "end": "3138079"
  },
  {
    "text": "back to this example real quick if I go back over here and say output let's say",
    "start": "3138079",
    "end": "3143630"
  },
  {
    "text": "called right here and notice in this example I'm gonna remove the return just",
    "start": "3143630",
    "end": "3149809"
  },
  {
    "text": "for a minute just return 0 for now but let's go back to this code and run it",
    "start": "3149809",
    "end": "3156140"
  },
  {
    "text": "and notice it says called so many times absolutely the code was actually called",
    "start": "3156140",
    "end": "3161299"
  },
  {
    "text": "just to make a little easier to see let's change the value of 5 so we can actually see that it called it that many",
    "start": "3161299",
    "end": "3167569"
  },
  {
    "text": "times on the other hand the whole thing here I say that this is an example of",
    "start": "3167569",
    "end": "3173240"
  },
  {
    "text": "the fact that tail wags the dog right so it's the tail that wags the dog this is",
    "start": "3173240",
    "end": "3179960"
  },
  {
    "text": "very useful because if you notice in this example when I run this code it",
    "start": "3179960",
    "end": "3185059"
  },
  {
    "text": "performs all this work right here but imagine for a minute think about the scenario if you are at work on January",
    "start": "3185059",
    "end": "3193250"
  },
  {
    "text": "the second the balls boss calls you into the office and says I've got a new project for you you",
    "start": "3193250",
    "end": "3199490"
  },
  {
    "text": "work on it and the report is due on April the 15th so what do you do on January the second you come out from the",
    "start": "3199490",
    "end": "3206540"
  },
  {
    "text": "boss's office go to your desk and you immediately start working on the new project right no from the smile and some",
    "start": "3206540",
    "end": "3213410"
  },
  {
    "text": "of the people here I know that's not true right in fact why would you you will start on",
    "start": "3213410",
    "end": "3218540"
  },
  {
    "text": "it very promptly on April the 14th because it's you on the 15th right what is that call that's called being",
    "start": "3218540",
    "end": "3225440"
  },
  {
    "text": "smart isn't it in fact you know something the boss doesn't know you know you're gonna quit on March 1st why would",
    "start": "3225440",
    "end": "3232220"
  },
  {
    "text": "you bother starting this well that's that's called efficiency so in this code notice how it did the work right here",
    "start": "3232220",
    "end": "3239060"
  },
  {
    "text": "but I'm gonna simply comment out just that call to sum that's all I did now",
    "start": "3239060",
    "end": "3244790"
  },
  {
    "text": "notice when I run this code it simply gave the result but it never called that",
    "start": "3244790",
    "end": "3250430"
  },
  {
    "text": "method on line number 30 and all the line number 31 for that matter and the reason it never called the method on",
    "start": "3250430",
    "end": "3257390"
  },
  {
    "text": "line 30 and 31 is because it's fundamentally lazy it is these operations that trigger",
    "start": "3257390",
    "end": "3263869"
  },
  {
    "text": "these computations and if you don't have the terminal operation you're not gonna waste your time doing stuff that nobody",
    "start": "3263869",
    "end": "3270680"
  },
  {
    "text": "cares about so without laziness there is no point in really being functional and that's one",
    "start": "3270680",
    "end": "3276080"
  },
  {
    "text": "of the moments for me is that mainstream languages not only just provided the lambda expressions or the ability to use",
    "start": "3276080",
    "end": "3284570"
  },
  {
    "text": "higher-order functions because if that's all they did I don't think we'll be here talking about this today the fact that",
    "start": "3284570",
    "end": "3291440"
  },
  {
    "text": "the mainstream language has not only provided higher-order functions but they also went all the way to provide lazy",
    "start": "3291440",
    "end": "3297560"
  },
  {
    "text": "evaluations really embraces the full power of functional programming and I think that is the most charming part",
    "start": "3297560",
    "end": "3303470"
  },
  {
    "text": "with it hope that was useful thank you [Applause]",
    "start": "3303470",
    "end": "3310419"
  }
]