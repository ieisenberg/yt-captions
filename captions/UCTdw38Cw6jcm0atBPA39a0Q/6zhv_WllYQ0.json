[
  {
    "text": "can you all hear me yeah you can hear me now cool welcome um we're going to talk",
    "start": "2960",
    "end": "8599"
  },
  {
    "text": "about some um lower level C than uh we might be used to but we're going to try",
    "start": "8599",
    "end": "15360"
  },
  {
    "text": "to avoid using the unsafe keyword so what happened is um I was porting a",
    "start": "15360",
    "end": "22519"
  },
  {
    "text": "project that was originally written in C to C and if you want to Port such a project",
    "start": "22519",
    "end": "29759"
  },
  {
    "text": "it really helps to understand um what it is that you're reporting if you were actively involved in writing that",
    "start": "29759",
    "end": "36840"
  },
  {
    "text": "original project it should have been probably a lot easier um so let's",
    "start": "36840",
    "end": "42960"
  },
  {
    "text": "briefly show um some more information out about the original project that we were",
    "start": "42960",
    "end": "49520"
  },
  {
    "text": "porting so I ported Doom from 1992 from C to C um but unfortunately",
    "start": "49520",
    "end": "58079"
  },
  {
    "text": "when it software started creating Doom uh I was only 10 years old so I was not",
    "start": "58079",
    "end": "63359"
  },
  {
    "text": "actively involved in the project however I do have some hands-on experience with what the project is",
    "start": "63359",
    "end": "69400"
  },
  {
    "text": "supposed to be doing uh namely shooting demons um I'm pretty good at that and um",
    "start": "69400",
    "end": "75680"
  },
  {
    "text": "there's also a lot of information available out there um there's a bunch of wikis um there are even Books",
    "start": "75680",
    "end": "82479"
  },
  {
    "text": "available about the entire game engine so there's a lot of information that we can",
    "start": "82479",
    "end": "88159"
  },
  {
    "text": "use and of course Doom source code is freely available which is a ton of",
    "start": "88159",
    "end": "94040"
  },
  {
    "text": "information right there it's also pretty well structured so I was able to Port",
    "start": "94040",
    "end": "99880"
  },
  {
    "text": "this Cod base very modularly as well now before I show the the port in",
    "start": "99880",
    "end": "107880"
  },
  {
    "text": "in brief history uh let me quickly introduce myself hi I am Wesley um I'm a",
    "start": "107880",
    "end": "115560"
  },
  {
    "text": "consultant at CIA in Belgium I call myself a coding architect because I don't like to live in an ivory Tower um",
    "start": "115560",
    "end": "122799"
  },
  {
    "text": "also a coffee Enthusiast a beer afficionado and I have some crazy side",
    "start": "122799",
    "end": "128000"
  },
  {
    "text": "projects like this one and you yeah you can find my socials",
    "start": "128000",
    "end": "133360"
  },
  {
    "text": "using that QR code but you'll get the slides uh at the end as",
    "start": "133360",
    "end": "138480"
  },
  {
    "text": "well so back in the summer of 2022 which",
    "start": "138480",
    "end": "143560"
  },
  {
    "text": "is when we typically get summer vacation um in August for us that is um",
    "start": "143560",
    "end": "150000"
  },
  {
    "text": "I started working on this port and about a week later after starting I got my",
    "start": "150000",
    "end": "156400"
  },
  {
    "text": "first output so I got the title screen up and running from Doom and then I",
    "start": "156400",
    "end": "162440"
  },
  {
    "text": "started adding more and more functionality I started first implementing the menu logic and adding",
    "start": "162440",
    "end": "167599"
  },
  {
    "text": "more functionality to the port of course I needed to render some levels",
    "start": "167599",
    "end": "173800"
  },
  {
    "text": "so a few days later I got the rendering mostly working um as you can see here",
    "start": "173800",
    "end": "181760"
  },
  {
    "text": "this is level this is map five of the first episode in the shareware version this is actually the demo that's about",
    "start": "181760",
    "end": "187920"
  },
  {
    "text": "to play so whenever you start Doom if you don't know Doom it starts playing the demos until you start playing the",
    "start": "187920",
    "end": "194599"
  },
  {
    "text": "game but as you can see we were still missing some parts we're missing the status bar below so a day later I added",
    "start": "194599",
    "end": "203319"
  },
  {
    "text": "the status bar which shows the amount of ammo you have left the health the armor and so on",
    "start": "203319",
    "end": "210319"
  },
  {
    "text": "for now nothing really happened any any beyond the point that it shows you the",
    "start": "210319",
    "end": "215840"
  },
  {
    "text": "demo because there was no input handling yet so it did read the demo contents and",
    "start": "215840",
    "end": "221080"
  },
  {
    "text": "it tried to play the demo contents but there was nothing handling the demo contents yet so again a few days later I",
    "start": "221080",
    "end": "228439"
  },
  {
    "text": "did I added the input handling and um",
    "start": "228439",
    "end": "233760"
  },
  {
    "text": "could translate whatever the demo was doing into actually playing those actions again on the screen",
    "start": "233760",
    "end": "241040"
  },
  {
    "text": "um I also had a little problem that I like to call the pogo stick incident so if you were just looking around that",
    "start": "241040",
    "end": "248400"
  },
  {
    "text": "worked just fine but the moment that you start running forward well something interesting",
    "start": "248400",
    "end": "254159"
  },
  {
    "text": "happened you started bouncing around like crazy um turns out Geometry is",
    "start": "254159",
    "end": "260320"
  },
  {
    "text": "pretty hard to implement even if you were doing a port a few days later I got those bugs",
    "start": "260320",
    "end": "267120"
  },
  {
    "text": "fixed including the rendering bugs that were parents so it started to looking already a little bit more like a game",
    "start": "267120",
    "end": "274080"
  },
  {
    "text": "you could actually also pick up some of the items uh you could interact with some of the elements in the game but I",
    "start": "274080",
    "end": "280400"
  },
  {
    "text": "did not Implement everything yet um and then I had to start working",
    "start": "280400",
    "end": "286800"
  },
  {
    "text": "again because it was already September um by the end of September I got like let's say 80% of the game and the port",
    "start": "286800",
    "end": "294240"
  },
  {
    "text": "finished um I could start playing this but um it if you would hear this it will",
    "start": "294240",
    "end": "300240"
  },
  {
    "text": "also play Sound and Music but the sound and music support was only added way",
    "start": "300240",
    "end": "306320"
  },
  {
    "text": "later now talking about the port there are a few things that came",
    "start": "306759",
    "end": "313720"
  },
  {
    "text": "that I came across while porting the original C scirt and of course C contains a lot of pointers and if you",
    "start": "313720",
    "end": "321560"
  },
  {
    "text": "say pointers in C you say the unsafe keyword but I didn't want to use the",
    "start": "321560",
    "end": "326880"
  },
  {
    "text": "unsafe keyword so this is why I'm going to talk about how I did the port without using",
    "start": "326880",
    "end": "333319"
  },
  {
    "text": "it but I also have to talk about what the unsafe keyword is I also have to talk about memory",
    "start": "333319",
    "end": "338960"
  },
  {
    "text": "management because the way that Doom works it has to deal with a lot of memory management it has to deal with",
    "start": "338960",
    "end": "345720"
  },
  {
    "text": "loading data from a binary file because that's where it stores all the game data and then it does some really crazy stuff",
    "start": "345720",
    "end": "352039"
  },
  {
    "text": "with functions and reference pointers so let's start with the unsa",
    "start": "352039",
    "end": "358919"
  },
  {
    "text": "keywords when we write C code most of our code is",
    "start": "358919",
    "end": "365400"
  },
  {
    "text": "going to be verifiably safe which means that the compiler and the Jitter can",
    "start": "365400",
    "end": "370520"
  },
  {
    "text": "verify that the code that we're writing is doing safe thing things we're we're not going to directly access memory in",
    "start": "370520",
    "end": "378000"
  },
  {
    "text": "some weird addresses using pointers or we're going to allocate memory uh by",
    "start": "378000",
    "end": "383960"
  },
  {
    "text": "itself we're just very nicely creating arrays objects structs in managed memory",
    "start": "383960",
    "end": "389919"
  },
  {
    "text": "so the garbage collector will be able to do its job and clean everything up for",
    "start": "389919",
    "end": "396400"
  },
  {
    "text": "us however we can use that unsafe keyword to add contexts to say this",
    "start": "396960",
    "end": "404800"
  },
  {
    "text": "block of code is going to be potentially unsafe or this method this function to",
    "start": "404800",
    "end": "410960"
  },
  {
    "text": "even full types being unsafe and within those unsafe contexts",
    "start": "410960",
    "end": "417560"
  },
  {
    "text": "we can memor uh provide memory access directly by using pointers we can",
    "start": "417560",
    "end": "423400"
  },
  {
    "text": "allocate in free memory as free as we want and then live outside the garbage collector and be smarter than the",
    "start": "423400",
    "end": "428800"
  },
  {
    "text": "garbage collector now on the right side um you",
    "start": "428800",
    "end": "434000"
  },
  {
    "text": "can see some sample code this is um borrowed from the documentation side",
    "start": "434000",
    "end": "439840"
  },
  {
    "text": "from C and this code does nothing more than Traverse an array and manipulate it",
    "start": "439840",
    "end": "446000"
  },
  {
    "text": "in a more direct way using pointers um let me zoom in a little bit on the",
    "start": "446000",
    "end": "452400"
  },
  {
    "text": "code I removed all of the comments because we don't need comments and um let's see what it does so first of all",
    "start": "452400",
    "end": "460560"
  },
  {
    "text": "we have to mark the part where we're going to introduce pointers as being unsafe because we're using pointers and",
    "start": "460560",
    "end": "468000"
  },
  {
    "text": "then we're going to create a pointer called P which references the first",
    "start": "468000",
    "end": "473680"
  },
  {
    "text": "element in the array a so it's pointing to 10 that's all it's doing",
    "start": "473680",
    "end": "481360"
  },
  {
    "text": "now we want to fix that pointer to the Heap so that we are not moving that pointer around it's going to stay",
    "start": "481360",
    "end": "487720"
  },
  {
    "text": "pointing to that first element in the array which is why we do the fixed thing",
    "start": "487720",
    "end": "493479"
  },
  {
    "text": "and then inside that fixed block we can start creating another pointer called P2",
    "start": "493479",
    "end": "498800"
  },
  {
    "text": "and it gets the same address as the pointer P so it's we have two pointers now pointing to the first",
    "start": "498800",
    "end": "506360"
  },
  {
    "text": "element and then we can do a right line and here we're are not writing the",
    "start": "506360",
    "end": "512680"
  },
  {
    "text": "address of P2 but we're D referencing the pointer and getting the value that it's pointing to and then writing that",
    "start": "512680",
    "end": "519279"
  },
  {
    "text": "to the console so here we're outputting the number 10 then we can increase our pointer by",
    "start": "519279",
    "end": "527200"
  },
  {
    "text": "one and C is smart enough to say this is not one byte further in address space",
    "start": "527200",
    "end": "533640"
  },
  {
    "text": "but it's actually Four bytes further in address space because we're dealing with ins and ins in C are four bytes so we're",
    "start": "533640",
    "end": "540480"
  },
  {
    "text": "moving our pointer basically to the second index in our array and we're pointing now to the number",
    "start": "540480",
    "end": "548480"
  },
  {
    "text": "20 below we're doing something different we're using that original pointer that",
    "start": "549160",
    "end": "554360"
  },
  {
    "text": "points to the first array item and instead of changing the address we're now changing the value that the address",
    "start": "554360",
    "end": "563399"
  },
  {
    "text": "is pointing to so we're referencing P adding one and our consulted right line",
    "start": "563399",
    "end": "569160"
  },
  {
    "text": "will now print 11 instead of",
    "start": "569160",
    "end": "573519"
  },
  {
    "text": "10 Now using unsafe that doesn't necessarily mean that the code that",
    "start": "574240",
    "end": "580560"
  },
  {
    "text": "you're going to write in an unsafe context is not safe it just means that",
    "start": "580560",
    "end": "586240"
  },
  {
    "text": "there's no way for the compiler or the Jitter to automatically verify that you're writing safe or unsafe code it",
    "start": "586240",
    "end": "592880"
  },
  {
    "text": "just means here be dragons",
    "start": "592880",
    "end": "598079"
  },
  {
    "text": "so why it's uh why should you use",
    "start": "598079",
    "end": "604920"
  },
  {
    "text": "unsafe just to use the pointers but to make my point more clear but intended um",
    "start": "604920",
    "end": "612120"
  },
  {
    "text": "let's verify that same unsafe code as before with the safe version next to",
    "start": "612120",
    "end": "619519"
  },
  {
    "text": "it this is what we would write every day we just create an index which is an INT",
    "start": "619519",
    "end": "626040"
  },
  {
    "text": "in this case automatically invert and we can create an index two which is a copy",
    "start": "626040",
    "end": "632160"
  },
  {
    "text": "of the index directly go into the array using that index increasing the index and so",
    "start": "632160",
    "end": "638440"
  },
  {
    "text": "on it's exactly the same thing why make it hard on ourselves",
    "start": "638440",
    "end": "643959"
  },
  {
    "text": "so typically the answer would be",
    "start": "643959",
    "end": "649120"
  },
  {
    "text": "performance okay let's Benchmark but before I Benchmark let me",
    "start": "649120",
    "end": "655320"
  },
  {
    "text": "quickly show what is being generated be behind the scenes so if I jump over to uh the",
    "start": "655320",
    "end": "665240"
  },
  {
    "text": "Intermediate Language is this readable for everyone all right",
    "start": "665240",
    "end": "670760"
  },
  {
    "text": "cool um this is the unsa version and as you can see uh let's go to this line it",
    "start": "670760",
    "end": "679360"
  },
  {
    "text": "will put something on the stack which is the pointer and then indirectly load an",
    "start": "679360",
    "end": "685440"
  },
  {
    "text": "in32 from the specifi specified address on the stack so basically saying I have",
    "start": "685440",
    "end": "691320"
  },
  {
    "text": "a pointer it points to something that should be an INT I'm loading that int so that I can call system console with that",
    "start": "691320",
    "end": "699720"
  },
  {
    "text": "int it uses a pointer so when you go to the save",
    "start": "699720",
    "end": "706160"
  },
  {
    "text": "version and you start looking at when you uh go to an",
    "start": "706160",
    "end": "713279"
  },
  {
    "text": "array here it just loads elements from an array so this is not using pointers",
    "start": "713279",
    "end": "718880"
  },
  {
    "text": "in IL however when you start changing elements inside of an",
    "start": "718880",
    "end": "726720"
  },
  {
    "text": "array you're loading the address of the aray element and also indirecting",
    "start": "726720",
    "end": "733240"
  },
  {
    "text": "indirectly loading from that address so you're still using pointers here it's",
    "start": "733240",
    "end": "738320"
  },
  {
    "text": "just hidden away from you so whenever you're doing save C code there might",
    "start": "738320",
    "end": "745120"
  },
  {
    "text": "still be pointers generated for you behind the scenes so that might already",
    "start": "745120",
    "end": "751199"
  },
  {
    "text": "give you an indication of the performance [Music]",
    "start": "751199",
    "end": "757360"
  },
  {
    "text": "issues so let's see if I run both the unsave and the",
    "start": "757360",
    "end": "764399"
  },
  {
    "text": "save uh versions against I I ran them against net 6 seven and eight I also",
    "start": "764399",
    "end": "770279"
  },
  {
    "text": "used ahead of time compilation in both cases and you see the performance here is almost on par it's you could you",
    "start": "770279",
    "end": "777519"
  },
  {
    "text": "could say this is margin of error uh in in between and why is it the case",
    "start": "777519",
    "end": "784360"
  },
  {
    "text": "because as I said the for the safe versions also uses pointers in some",
    "start": "784360",
    "end": "790120"
  },
  {
    "text": "places it just means that it it's abstracted away from you I'm not saying here that unsafe C",
    "start": "790120",
    "end": "798639"
  },
  {
    "text": "code is never going to be more performant because it can disable like",
    "start": "798639",
    "end": "805360"
  },
  {
    "text": "area out of bound checks for you but in most cases for us mere mortals it will",
    "start": "805360",
    "end": "812120"
  },
  {
    "text": "not necessarily mean that it's going to be more performance um if you're going to use unsafe all the time you might get",
    "start": "812120",
    "end": "818959"
  },
  {
    "text": "more headaches though so your mileage may vary now when moving on in the the the",
    "start": "818959",
    "end": "827440"
  },
  {
    "text": "porting of Doom I also have to talk about how Doom manages its",
    "start": "827440",
    "end": "833800"
  },
  {
    "text": "memory because of course it's a c program and if you open a c program",
    "start": "833800",
    "end": "839120"
  },
  {
    "text": "program um you're going to encounter those uh pointers those asterisks those",
    "start": "839120",
    "end": "845720"
  },
  {
    "text": "M perents all over the place and you're also going to come across um memory allocation functions",
    "start": "845720",
    "end": "852759"
  },
  {
    "text": "like the amalog first uh method C alloc realloc the free one to release memory",
    "start": "852759",
    "end": "858920"
  },
  {
    "text": "again or if you're inside a C++ project you can also encounter the new and the delete",
    "start": "858920",
    "end": "865880"
  },
  {
    "text": "keywords and unlike in a managed environment like net C and C++ they don't use a garbage",
    "start": "865880",
    "end": "872800"
  },
  {
    "text": "collector so whenever you allocate memory you also have the responsibility to free it again if you allocate a",
    "start": "872800",
    "end": "879040"
  },
  {
    "text": "handle to a file or a network uh Port you have to free that again as well just",
    "start": "879040",
    "end": "884320"
  },
  {
    "text": "like we should dispose everything and sometimes forget or dispose it too quickly or to a um like HTTP clients",
    "start": "884320",
    "end": "892920"
  },
  {
    "text": "there's like some caveats um but you need to be aware of what you're doing",
    "start": "892920",
    "end": "898600"
  },
  {
    "text": "more in C and C++ and C is a little bit more forgiving um now there are some cases",
    "start": "898600",
    "end": "905759"
  },
  {
    "text": "where you can also opt in to use a garbage collector in C++ you can do C++",
    "start": "905759",
    "end": "911880"
  },
  {
    "text": "in visual studio with net and manage memory as well but let's assume",
    "start": "911880",
    "end": "917199"
  },
  {
    "text": "especially in the case of Doom that there was no garbage collector available and let's give an example as",
    "start": "917199",
    "end": "925040"
  },
  {
    "text": "well um how classic C may do things and just as in",
    "start": "925040",
    "end": "932639"
  },
  {
    "text": "C you can still create an array you can say hey I want a name that can be 100",
    "start": "932639",
    "end": "939440"
  },
  {
    "text": "characters in in size and yeah that works if you know during your during",
    "start": "939440",
    "end": "945120"
  },
  {
    "text": "writing of the code that you're only going to need 100 characters works just",
    "start": "945120",
    "end": "950480"
  },
  {
    "text": "fine but let's say that you were passed on a name length and then you say hm I",
    "start": "950480",
    "end": "958399"
  },
  {
    "text": "can create pointer to a name name two and then allocates using the MOG method",
    "start": "958399",
    "end": "965639"
  },
  {
    "text": "name length times the size of one character and then you have space enough to allocate exactly that name and then",
    "start": "965639",
    "end": "972759"
  },
  {
    "text": "you can try to string copy and this is already a bad example because string",
    "start": "972759",
    "end": "977920"
  },
  {
    "text": "copy in this case does not verify that you're going to go out of bounds of your memory there is another method for that",
    "start": "977920",
    "end": "984319"
  },
  {
    "text": "um but this is the older C variance they didn't have Str strn copy uh in that",
    "start": "984319",
    "end": "991720"
  },
  {
    "text": "day now m aloc is also going to return you a void",
    "start": "991720",
    "end": "997440"
  },
  {
    "text": "star um which is a special kind of pointer it's a pointer to anything you want which also means that you can do",
    "start": "997440",
    "end": "1004319"
  },
  {
    "text": "some weird stuff you can say hey I have this name",
    "start": "1004319",
    "end": "1009759"
  },
  {
    "text": "two pointer thingy and even though I typed it as a character pointer here I",
    "start": "1009759",
    "end": "1015160"
  },
  {
    "text": "can just change it address I'm going to add three to that that pointer D reference It cast it to an INT",
    "start": "1015160",
    "end": "1023519"
  },
  {
    "text": "or I could even cast it to an in pointer if I wanted to and then change how it's addressing and then try to read it and",
    "start": "1023519",
    "end": "1030520"
  },
  {
    "text": "it will work as long as I don't go out of bounds because then I get an exess violation exception but I can do this",
    "start": "1030520",
    "end": "1037640"
  },
  {
    "text": "and it might be something weird but this is actually being used a lot in C code to immediately jump inside of complex",
    "start": "1037640",
    "end": "1045678"
  },
  {
    "text": "structures to correct Fields inside of them to speed up the",
    "start": "1045679",
    "end": "1051240"
  },
  {
    "text": "process and of course um don't forget to free the memory if you're done using",
    "start": "1051240",
    "end": "1057600"
  },
  {
    "text": "it moving on to C++ um there you can create new persons and",
    "start": "1057600",
    "end": "1066039"
  },
  {
    "text": "delete persons and then you can this is because they introduce classes Concepts",
    "start": "1066039",
    "end": "1071640"
  },
  {
    "text": "in C++ and then you can very easily just allocate the memory get the type pointer",
    "start": "1071640",
    "end": "1078320"
  },
  {
    "text": "back for purpose person and it you don't need to size of the person anymore it will know how how big a person",
    "start": "1078320",
    "end": "1085600"
  },
  {
    "text": "is that's a lot easier talking about",
    "start": "1085600",
    "end": "1092200"
  },
  {
    "text": "Doom whenever Doom starts it needs to allocate a bunch of",
    "start": "1092200",
    "end": "1099080"
  },
  {
    "text": "memory for the game to work and in this case that works by",
    "start": "1099080",
    "end": "1104440"
  },
  {
    "text": "allocating a main zone of memory on the Heap calling the Zone base method and",
    "start": "1104440",
    "end": "1110240"
  },
  {
    "text": "the isone base method is just using Moc to allocate um 6 megabytes of memory",
    "start": "1110240",
    "end": "1118559"
  },
  {
    "text": "space um this is by the way the it used to be four but this code version also",
    "start": "1118559",
    "end": "1126880"
  },
  {
    "text": "supports Doom 2 which increased memory uh usage by 2 megabytes so now we have a",
    "start": "1126880",
    "end": "1135159"
  },
  {
    "text": "huge chunk of memory that we can use to load all of our data in and to do this",
    "start": "1135159",
    "end": "1141799"
  },
  {
    "text": "it software created a another method called Zone memory allocation",
    "start": "1141799",
    "end": "1148240"
  },
  {
    "text": "zmo to say hey um I'm loading a level and part of my level is the vertices",
    "start": "1148240",
    "end": "1154880"
  },
  {
    "text": "where all the lines will go and I need now enough memory in that zone for",
    "start": "1154880",
    "end": "1161679"
  },
  {
    "text": "number of vertices times the size of one vertex and then it will look in that big",
    "start": "1161679",
    "end": "1168280"
  },
  {
    "text": "chunk of memory if there's enough space available then it will allocate that space for you it will tag it in this",
    "start": "1168280",
    "end": "1174559"
  },
  {
    "text": "case with the Pu level tag which means whenever it's going to do a zone free",
    "start": "1174559",
    "end": "1181840"
  },
  {
    "text": "call it can immediately free up all of the level data when you're switching between levels it's actually a very",
    "start": "1181840",
    "end": "1188000"
  },
  {
    "text": "smart garbage collector for Doom you might say and when this code was written back",
    "start": "1188000",
    "end": "1195520"
  },
  {
    "text": "in 1992 um this level of me memory management really was necessary for Doom",
    "start": "1195520",
    "end": "1201320"
  },
  {
    "text": "to perform well on the hardware that was available um it's also more performant",
    "start": "1201320",
    "end": "1206919"
  },
  {
    "text": "than doing this rather than doing mloc and free all the time um because now",
    "start": "1206919",
    "end": "1212480"
  },
  {
    "text": "they just had a big chunk they could free up chunks of memory they could um",
    "start": "1212480",
    "end": "1217880"
  },
  {
    "text": "just like you could defrag your old hard drive they could fragment all of the memory that was allocated back together",
    "start": "1217880",
    "end": "1225080"
  },
  {
    "text": "and then they didn't have to bother releasing memory and allocating memory all the time also because what if some",
    "start": "1225080",
    "end": "1232520"
  },
  {
    "text": "other process on the PC was going to run away with that memory your game would crash that's not what you",
    "start": "1232520",
    "end": "1239159"
  },
  {
    "text": "want um now moving to C um I was not going to bother",
    "start": "1239159",
    "end": "1247480"
  },
  {
    "text": "implementing all of that zone memory allocation thing we have a garbage collector I've got for 64 gigs of memory",
    "start": "1247480",
    "end": "1255000"
  },
  {
    "text": "in my machine um and even though even if I had only eight gigs of memory Doom is",
    "start": "1255000",
    "end": "1260280"
  },
  {
    "text": "only going to use six so why bother I mean it's already hard enough to Port C",
    "start": "1260280",
    "end": "1266679"
  },
  {
    "text": "to C I'm not going to bother porting a memory allocation thing um so I just",
    "start": "1266679",
    "end": "1273320"
  },
  {
    "text": "made the decision to lose classes wherever I thought it",
    "start": "1273320",
    "end": "1278480"
  },
  {
    "text": "was appropriate to use classes use strs where I think maybe this is more suitable for a struct and",
    "start": "1278480",
    "end": "1286039"
  },
  {
    "text": "then use arrays rather than using lists because I don't need all of the uh",
    "start": "1286039",
    "end": "1293240"
  },
  {
    "text": "special functions that a list offers me I just need an array and then most cases it's pre-allocated so I know I'm I'm",
    "start": "1293240",
    "end": "1301320"
  },
  {
    "text": "always going to have for example that many bytes in my screen buffer is going",
    "start": "1301320",
    "end": "1306679"
  },
  {
    "text": "to be immediately that size all the time in this case um my vertices will be",
    "start": "1306679",
    "end": "1314200"
  },
  {
    "text": "different per level so I pre-allocate my vertices with an empty area and then whenever I load my actual",
    "start": "1314200",
    "end": "1322360"
  },
  {
    "text": "vertices I will just say hey I need a new array of that times",
    "start": "1322360",
    "end": "1328760"
  },
  {
    "text": "vertices now I did mention lists of T and T arrays",
    "start": "1329279",
    "end": "1334480"
  },
  {
    "text": "um let's do another Benchmark because I was going in and",
    "start": "1334480",
    "end": "1342640"
  },
  {
    "text": "this port and I just immediately decided I'm going to go for arrays because arrays are fast there's no denying",
    "start": "1342640",
    "end": "1350320"
  },
  {
    "text": "this but then someone called out called me out and said you could just have pre-allocated your list of te you could",
    "start": "1350320",
    "end": "1357679"
  },
  {
    "text": "have a list of bytes and if you know num vertices you can say new list of te num",
    "start": "1357679",
    "end": "1362760"
  },
  {
    "text": "vertices you're done I said you're not wrong so let's find out what's the",
    "start": "1362760",
    "end": "1370240"
  },
  {
    "text": "fastest way but then I was like it's going to be easy to just say pre-allocated array versus pre",
    "start": "1370240",
    "end": "1376679"
  },
  {
    "text": "pre-allocated list what if I am stupid and just say I'm G to do new list and",
    "start": "1376679",
    "end": "1383720"
  },
  {
    "text": "see what happens um or I can also say",
    "start": "1383720",
    "end": "1389679"
  },
  {
    "text": "what if I come up with my own ways to resize my AR arrays and and use array",
    "start": "1389679",
    "end": "1395360"
  },
  {
    "text": "copy or array. resize so that's what I did I compared the pre pre-allocated array",
    "start": "1395360",
    "end": "1403760"
  },
  {
    "text": "with preallocated list to dynamically resized list",
    "start": "1403760",
    "end": "1409120"
  },
  {
    "text": "and then I implemented three versions of dynamically resized arrays um the first",
    "start": "1409120",
    "end": "1414760"
  },
  {
    "text": "one mimics what the list is doing so it starts with four items and then it doubles in size every",
    "start": "1414760",
    "end": "1420400"
  },
  {
    "text": "time the chunk resized is going to just start with 10 and then increases by 10",
    "start": "1420400",
    "end": "1425799"
  },
  {
    "text": "so it's the stupid resize version and aggressively resizing just means",
    "start": "1425799",
    "end": "1431919"
  },
  {
    "text": "increase by one every time I random Benchmark again against",
    "start": "1431919",
    "end": "1439760"
  },
  {
    "text": "net 6 7 and 8 um I'm only showing the results for net 8 because again the",
    "start": "1439760",
    "end": "1446240"
  },
  {
    "text": "differences were not that great uh between the different versions but also",
    "start": "1446240",
    "end": "1451720"
  },
  {
    "text": "um I would have need a screen that goes a little bit further than this the all",
    "start": "1451720",
    "end": "1457120"
  },
  {
    "text": "of the results are in the slide deck and you can get the slide deck afterwards and it should not be a",
    "start": "1457120",
    "end": "1463279"
  },
  {
    "text": "surprise to see uh that a pre-allocated array is going to be the fastest of all of them",
    "start": "1463279",
    "end": "1469440"
  },
  {
    "text": "so it only takes for this Ben Benchmark uh 6.7 micros to run that",
    "start": "1469440",
    "end": "1478360"
  },
  {
    "text": "workload but list of T pre-allocated I mean that difference to",
    "start": "1478360",
    "end": "1485000"
  },
  {
    "text": "me is small enough to say it's a good viable solution and if you want to use",
    "start": "1485000",
    "end": "1490600"
  },
  {
    "text": "lists go ahead um in this case it's an old game it doesn't need that many",
    "start": "1490600",
    "end": "1496360"
  },
  {
    "text": "performance it's it's it's not that it's going to be uh hurting your Gamers experience in this",
    "start": "1496360",
    "end": "1503960"
  },
  {
    "text": "case um moving to the dynamically algorithms I was actually",
    "start": "1504039",
    "end": "1512120"
  },
  {
    "text": "not that surprised to see that the list version was also very performant it's a",
    "start": "1512120",
    "end": "1518080"
  },
  {
    "text": "bit slower let's say one microc slower and micros seconds in this case again",
    "start": "1518080",
    "end": "1525559"
  },
  {
    "text": "it's not that much but it clearly shows that the algorithm that",
    "start": "1525559",
    "end": "1530600"
  },
  {
    "text": "was chosen here is a good alternative of course it can be a little bit more alloc because you see it's immediately doubled",
    "start": "1530600",
    "end": "1536760"
  },
  {
    "text": "in in size from four to 8 kilobytes but still good solution and of",
    "start": "1536760",
    "end": "1544679"
  },
  {
    "text": "course because it's the same algorithm you see that the uh resize doubling sequence array version is within the",
    "start": "1544679",
    "end": "1553240"
  },
  {
    "text": "same ballpark as the list version although because it's an array it has list overhead it's still faster and a",
    "start": "1553240",
    "end": "1561240"
  },
  {
    "text": "little less allocating and then you can also see that my other two attempts just",
    "start": "1561240",
    "end": "1567760"
  },
  {
    "text": "immediately go out through the roof uh adding 10 micros seconds for the chunk",
    "start": "1567760",
    "end": "1573240"
  },
  {
    "text": "one and almost going up to 100 microseconds for the aggressively resized one and yeah let's not let's not",
    "start": "1573240",
    "end": "1579919"
  },
  {
    "text": "talk about how many bytes it's being allocated uh because it's it's even using array. resize it's not I'm not",
    "start": "1579919",
    "end": "1586440"
  },
  {
    "text": "doing this myself so it's using in the Smart Way um but in a very inefficient",
    "start": "1586440",
    "end": "1593679"
  },
  {
    "text": "way all right so we have um memory",
    "start": "1593919",
    "end": "1600080"
  },
  {
    "text": "management done let's load data from Doom so whenever we read binary data in Doom",
    "start": "1600080",
    "end": "1609159"
  },
  {
    "text": "there's this big file that we have to open called the wad file wad stands for",
    "start": "1609159",
    "end": "1616360"
  },
  {
    "text": "where is all the data and it contains a well like any old",
    "start": "1616360",
    "end": "1622440"
  },
  {
    "text": "typical um file format it contains a file header indicating what the file is",
    "start": "1622440",
    "end": "1628120"
  },
  {
    "text": "for and then it contains a table of contents to say if you want to all if",
    "start": "1628120",
    "end": "1633640"
  },
  {
    "text": "you want to locate a certain chunk of data that you need this is where you're going to find that and then it also of",
    "start": "1633640",
    "end": "1641360"
  },
  {
    "text": "course contains all of the file lumps containing the game data and whenever it's starts the game",
    "start": "1641360",
    "end": "1649600"
  },
  {
    "text": "it calls a function W for all of the wad functions do add",
    "start": "1649600",
    "end": "1655480"
  },
  {
    "text": "file and it's going to um well if you open and read a file",
    "start": "1655480",
    "end": "1661320"
  },
  {
    "text": "in C it's pretty similar as that what we're doing in C so you're opening a",
    "start": "1661320",
    "end": "1667640"
  },
  {
    "text": "file handle you're giving it the file name that you want to open you're going to specify your intentions in this case",
    "start": "1667640",
    "end": "1676279"
  },
  {
    "text": "we only need read only access to that file and we're going to read it in binary mode and then if that file can be opened",
    "start": "1676279",
    "end": "1684360"
  },
  {
    "text": "you get a valid handle back you can start reading from that handle and in",
    "start": "1684360",
    "end": "1689919"
  },
  {
    "text": "this case we are reading the size of the header structure inside the header",
    "start": "1689919",
    "end": "1695240"
  },
  {
    "text": "variable so that we can read our wad header contents this is the C version if we",
    "start": "1695240",
    "end": "1703320"
  },
  {
    "text": "Port that to C you get it's a bit different but you know",
    "start": "1703320",
    "end": "1709320"
  },
  {
    "text": "we're still opening a file handle in this case it's called a file stream we're still saying hey I need read",
    "start": "1709320",
    "end": "1715320"
  },
  {
    "text": "access to that file um I'm a bit egocentric I'm not going to share that file handle I I want this file to be for",
    "start": "1715320",
    "end": "1723080"
  },
  {
    "text": "myself I don't want anyone else to access the game file that I'm loading and then the binary mode here is by call",
    "start": "1723080",
    "end": "1731039"
  },
  {
    "text": "interpreted by calling a binary reader to that file stream and because I al already knew",
    "start": "1731039",
    "end": "1737799"
  },
  {
    "text": "that inside the W file if we encounter character data it's going to be in s encoding I'm giving it the SK encoding",
    "start": "1737799",
    "end": "1745320"
  },
  {
    "text": "immediately and I'm also saying Hey whenever I close that binary reader you can also go ahead and close that file",
    "start": "1745320",
    "end": "1751399"
  },
  {
    "text": "stream for me so that's the uh equivalent of freeing my file file",
    "start": "1751399",
    "end": "1756640"
  },
  {
    "text": "handle as well and then when we are reading that header I",
    "start": "1756640",
    "end": "1764880"
  },
  {
    "text": "could have used like these Marshall uh methods to say hey I have this struct",
    "start": "1764880",
    "end": "1770240"
  },
  {
    "text": "called a a w info go ahead and read from that that file and Marshall it into that",
    "start": "1770240",
    "end": "1776760"
  },
  {
    "text": "struct um or I can just go ahead and say hey um I'm going to read four bytes from",
    "start": "1776760",
    "end": "1784519"
  },
  {
    "text": "you at the first position and then use the asky encoding to interpret those four bytes into aski characters and then",
    "start": "1784519",
    "end": "1791519"
  },
  {
    "text": "I know that this first four bytes they need to be either I or PW so I means",
    "start": "1791519",
    "end": "1798600"
  },
  {
    "text": "it's an internal SLC core W file which is the Doom game itself and a PW is a",
    "start": "1798600",
    "end": "1805200"
  },
  {
    "text": "patch wad so Doom already supported modding so you could mod the game if you wanted",
    "start": "1805200",
    "end": "1812080"
  },
  {
    "text": "to and then the next two bytes from the wet info file in this case I'm just",
    "start": "1812480",
    "end": "1817840"
  },
  {
    "text": "using the read in32 method from the binary reader to say hey I'm going to",
    "start": "1817840",
    "end": "1823960"
  },
  {
    "text": "read an integer which is the first one is how many data Lums are there in the",
    "start": "1823960",
    "end": "1830120"
  },
  {
    "text": "wet file and the second one is where are the where is the directory of all the",
    "start": "1830120",
    "end": "1835640"
  },
  {
    "text": "wets being stored in the file so it I can immediately jump to the table of contents and then see where all of the W",
    "start": "1835640",
    "end": "1843120"
  },
  {
    "text": "files all the lumps are speaking about a lump a lump has a",
    "start": "1843120",
    "end": "1853480"
  },
  {
    "text": "um integer integer value which is very in this web file is the data being",
    "start": "1853480",
    "end": "1860279"
  },
  {
    "text": "stored for that lump so this is just your file entry in the file system of",
    "start": "1860279",
    "end": "1866320"
  },
  {
    "text": "Doom so this is saying hey um I have a file called Doom guy. texture I'm making",
    "start": "1866320",
    "end": "1874000"
  },
  {
    "text": "this up right now but that could be one of them and then the file is located",
    "start": "1874000",
    "end": "1879200"
  },
  {
    "text": "here in the we file and then it's going to be that many bytes long and then you get a picture maybe you get the Doom",
    "start": "1879200",
    "end": "1885840"
  },
  {
    "text": "logo picture now now if we want to read these data",
    "start": "1885840",
    "end": "1893480"
  },
  {
    "text": "structures from Doom we must ask ourselves two questions um well it's a bunch of more",
    "start": "1893480",
    "end": "1900440"
  },
  {
    "text": "questions but if we want to read something um the first question is going to be what's the actual size of this",
    "start": "1900440",
    "end": "1907120"
  },
  {
    "text": "thing um how many bytes is a character you could say it's going to be",
    "start": "1907120",
    "end": "1914559"
  },
  {
    "text": "one but even in C++ at some point you had like I don't know five or six",
    "start": "1914559",
    "end": "1921360"
  },
  {
    "text": "different types of characters yeah like lb strings and uh W Char and uni code",
    "start": "1921360",
    "end": "1930120"
  },
  {
    "text": "and I don't know what a Char is and an INT how many bytes is an",
    "start": "1930120",
    "end": "1936159"
  },
  {
    "text": "INT we're thinking it's four it has been two as well so it all",
    "start": "1936159",
    "end": "1942320"
  },
  {
    "text": "depends on on both the system that you're working in but also how it's being stored in that file because they",
    "start": "1942320",
    "end": "1950200"
  },
  {
    "text": "might say an in is four bytes on this on the compiler level but in the binary",
    "start": "1950200",
    "end": "1955720"
  },
  {
    "text": "file it might have been stored as two bytes just to conserve the data because they knew they were never going to go",
    "start": "1955720",
    "end": "1961039"
  },
  {
    "text": "across the boundary of 32 uh",
    "start": "1961039",
    "end": "1965480"
  },
  {
    "text": "768 in this case the fump is going to be 16 bytes long so our ins are four bytes",
    "start": "1967240",
    "end": "1974240"
  },
  {
    "text": "times two and then eight characters being one by all of them so that's our first set of questions",
    "start": "1974240",
    "end": "1981080"
  },
  {
    "text": "data sizing the next question that we need to answer is how are these multi-te values",
    "start": "1981080",
    "end": "1988519"
  },
  {
    "text": "being stored what's the endianness um if we look at the value 4",
    "start": "1988519",
    "end": "1995639"
  },
  {
    "text": "a 3B 2 c1d in hex it can be stored in multiple different ways you could have",
    "start": "1995639",
    "end": "2002480"
  },
  {
    "text": "it stored in big Indian mode where the most significant bite goes first and then if you have a hex dump of that",
    "start": "2002480",
    "end": "2009880"
  },
  {
    "text": "value you would see the same order as it appears",
    "start": "2009880",
    "end": "2015120"
  },
  {
    "text": "here and you could have little Indian mode so then the least significant bite",
    "start": "2015120",
    "end": "2020559"
  },
  {
    "text": "goes first and then you see it being turned around and then your 4 a 3B 2 C 1D becomes 1D 2 C 3B 4",
    "start": "2020559",
    "end": "2028440"
  },
  {
    "text": "a and then there is also another system I didn't know this before I",
    "start": "2028440",
    "end": "2034679"
  },
  {
    "text": "started creating my slides even there's a middle Indian as well which treats if",
    "start": "2034679",
    "end": "2041799"
  },
  {
    "text": "you have like uh data that's more than 8 bytes so you have words of 16 uh",
    "start": "2041799",
    "end": "2048520"
  },
  {
    "text": "bits it swaps it could swap those around and then keeping the order of the 8 Bits",
    "start": "2048520",
    "end": "2055679"
  },
  {
    "text": "or it could keep the order and SW swap those around I don't know how they created",
    "start": "2055679",
    "end": "2061358"
  },
  {
    "text": "programs for this system but apparently the pdp11 used this um now",
    "start": "2061359",
    "end": "2068480"
  },
  {
    "text": "luckily sometimes a monopoly is a good thing and most of our systems these days",
    "start": "2068480",
    "end": "2073560"
  },
  {
    "text": "are based on the Intel 8 x x86 which means that most of our system is going",
    "start": "2073560",
    "end": "2078599"
  },
  {
    "text": "to be little end and if you use binary reader and you say read in32 it's going",
    "start": "2078599",
    "end": "2083800"
  },
  {
    "text": "to read in little endian however if you're going to Port C",
    "start": "2083800",
    "end": "2090440"
  },
  {
    "text": "to C still look at the documentation still look at the raw data that you're going to read in binary form because",
    "start": "2090440",
    "end": "2098680"
  },
  {
    "text": "even though Doom uses little Indian one of the ports for the Atari Jaguar used",
    "start": "2098680",
    "end": "2105560"
  },
  {
    "text": "big Indian instead because the system was big Indian so just still keep that",
    "start": "2105560",
    "end": "2111400"
  },
  {
    "text": "in mind right so memory management done",
    "start": "2111400",
    "end": "2117000"
  },
  {
    "text": "we're reading our binary data let's Implement our Doom code and for that um",
    "start": "2117000",
    "end": "2125359"
  },
  {
    "text": "we're going to start messing about with function pointers if I look back at uh my status",
    "start": "2125359",
    "end": "2133960"
  },
  {
    "text": "bar here that code was actually a piece of beauty they already used",
    "start": "2133960",
    "end": "2142400"
  },
  {
    "text": "um widgets for this so the status bar contains different widgets and then you",
    "start": "2142400",
    "end": "2148480"
  },
  {
    "text": "have the ammo widget which is a number widget you have the health widget which is a percentage widget that inherits",
    "start": "2148480",
    "end": "2155160"
  },
  {
    "text": "from number widget because it already knows how to represent present numbers and then just adds a percentage after",
    "start": "2155160",
    "end": "2161119"
  },
  {
    "text": "that so this was already objectoriented codes way ahead of its",
    "start": "2161119",
    "end": "2167800"
  },
  {
    "text": "time and um looking at the original C code for creating that Health",
    "start": "2167800",
    "end": "2175280"
  },
  {
    "text": "percentage you call a method called St licore init percent you're going to",
    "start": "2175280",
    "end": "2181319"
  },
  {
    "text": "store that in the health uh variable you give it the X and the Y positions where",
    "start": "2181319",
    "end": "2187200"
  },
  {
    "text": "it should be shown in the status bar you give it a list of the digits you give it",
    "start": "2187200",
    "end": "2193040"
  },
  {
    "text": "the player's Health you give it the fact if it needs to be showed or not and then you give it that percentage",
    "start": "2193040",
    "end": "2199319"
  },
  {
    "text": "sign but the special thing here is you're not giving it the player he",
    "start": "2199319",
    "end": "2204880"
  },
  {
    "text": "because then it would be 100% all the time you're giving it a reference to the",
    "start": "2204880",
    "end": "2210560"
  },
  {
    "text": "player he so whenever you're reading and updating the status bar it could reflect",
    "start": "2210560",
    "end": "2215839"
  },
  {
    "text": "the actual value at that time so whenever you get hit you would see that immediately whenever the status bar",
    "start": "2215839",
    "end": "2222480"
  },
  {
    "text": "tick hits for the update and if you pick up a heal file you'll see increase",
    "start": "2222480",
    "end": "2229440"
  },
  {
    "text": "again how am I going to Port this because I don't want to use",
    "start": "2229440",
    "end": "2234599"
  },
  {
    "text": "pointers well um Junior me would say hey",
    "start": "2234599",
    "end": "2240000"
  },
  {
    "text": "I'm smart I know this thing called by reference so I'll just do this and and",
    "start": "2240000",
    "end": "2247640"
  },
  {
    "text": "say hey in my percentage widget when I construct it I'm going to give a reference to the int number and then",
    "start": "2247640",
    "end": "2255000"
  },
  {
    "text": "boom I'm done well not exactly right because what",
    "start": "2255000",
    "end": "2261800"
  },
  {
    "text": "happens here is you're indeed passing the reference to the number and then inside of that Constructor you get",
    "start": "2261800",
    "end": "2268240"
  },
  {
    "text": "access to the number argument you can store the value from number in the property",
    "start": "2268240",
    "end": "2273720"
  },
  {
    "text": "number and you could have changed that number and then the caller of this Constructor would have received the",
    "start": "2273720",
    "end": "2280040"
  },
  {
    "text": "updated value but you're not storing the reference to that number here you're just getting access to that reference",
    "start": "2280040",
    "end": "2287160"
  },
  {
    "text": "just for a little while and whenever you're going out of the scope of the Constructor the reference is gone again",
    "start": "2287160",
    "end": "2292599"
  },
  {
    "text": "this is the safe version of a pointer",
    "start": "2292599",
    "end": "2297920"
  },
  {
    "text": "so few years later I might have start thinking hm right that doesn't work this",
    "start": "2297920",
    "end": "2305680"
  },
  {
    "text": "works I'm going to box it inside of a class I'm going to create a reference",
    "start": "2305680",
    "end": "2311599"
  },
  {
    "text": "thing and I can even do smart stuff I can use generics and say hey I I'm going",
    "start": "2311599",
    "end": "2316680"
  },
  {
    "text": "to create a reference to T and then I can s the value in there and then I have",
    "start": "2316680",
    "end": "2322079"
  },
  {
    "text": "whatever I use the same reference of the object is going to reference all of the same values and I can read the value at",
    "start": "2322079",
    "end": "2330200"
  },
  {
    "text": "run time and done yeah that works but is it elegant",
    "start": "2330200",
    "end": "2339359"
  },
  {
    "text": "some might say yes well in this case um there's there's a smarter way to",
    "start": "2339359",
    "end": "2345000"
  },
  {
    "text": "approach this as well now I must be honest this is very close to what the",
    "start": "2345000",
    "end": "2352000"
  },
  {
    "text": "intentional code would have been because in the intent in the original code the C",
    "start": "2352000",
    "end": "2357680"
  },
  {
    "text": "code you're giving the reference so nothing would hold you back to also",
    "start": "2357680",
    "end": "2362880"
  },
  {
    "text": "increase the value or change the value whenever you're doing the status bar dates because you have access full",
    "start": "2362880",
    "end": "2368440"
  },
  {
    "text": "access to that memory space here as well and this is the one of the few",
    "start": "2368440",
    "end": "2374319"
  },
  {
    "text": "places where I actually diverge from the port because I want to keep the port as close to the original uh C code as",
    "start": "2374319",
    "end": "2381200"
  },
  {
    "text": "possible I even kept some of the bugs inside and I'll I can tell you later why",
    "start": "2381200",
    "end": "2388800"
  },
  {
    "text": "um so another way to do this just just give give it a",
    "start": "2388800",
    "end": "2395280"
  },
  {
    "text": "funk give it a funk of in instead and then we can use a Lambda function to say",
    "start": "2395280",
    "end": "2401359"
  },
  {
    "text": "Hey whenever you need to have that updated value here's how you can get it",
    "start": "2401359",
    "end": "2406400"
  },
  {
    "text": "and that looks like this so when you create your percentage Widget the rest is all the same code but",
    "start": "2406400",
    "end": "2413520"
  },
  {
    "text": "instead of referencing that player's Health you're just saying Hey whenever you need player's Health go to the",
    "start": "2413520",
    "end": "2420280"
  },
  {
    "text": "underc player player. health and then boom you got your health and if you look",
    "start": "2420280",
    "end": "2425480"
  },
  {
    "text": "at this code it's not actually that different from the original SE so I was very happy with this",
    "start": "2425480",
    "end": "2434000"
  },
  {
    "text": "solution all right now of course there's still not very there's still not a lot happening",
    "start": "2434000",
    "end": "2440680"
  },
  {
    "text": "in our game we have a status bar but there's nothing reacting yet so Doom has",
    "start": "2440680",
    "end": "2448880"
  },
  {
    "text": "a thing called thinkers and map objects and thinkers",
    "start": "2448880",
    "end": "2454240"
  },
  {
    "text": "are things that react in a level so if you approach a door you can open a door",
    "start": "2454240",
    "end": "2459640"
  },
  {
    "text": "and some doors can even be opened by enemies if they hear you they can open the door and start chasing you um there",
    "start": "2459640",
    "end": "2466680"
  },
  {
    "text": "are special ceilings that start going down whenever you enter a room so that you are forced to escape the room and",
    "start": "2466680",
    "end": "2474040"
  },
  {
    "text": "there are floors that suddenly become staircases and map objects are special",
    "start": "2474040",
    "end": "2480680"
  },
  {
    "text": "thinkers these are most of the times the enemies that start chasing you but you",
    "start": "2480680",
    "end": "2486200"
  },
  {
    "text": "the player yourself are also a map object and these things get a whenever",
    "start": "2486200",
    "end": "2493720"
  },
  {
    "text": "they're they're supposed to act in the game they're going to be assigned the",
    "start": "2493720",
    "end": "2498880"
  },
  {
    "text": "map object thinker method in the original source code so that they can start reacting to the",
    "start": "2498880",
    "end": "2504920"
  },
  {
    "text": "level now how does this work in the original source code you have a doubly linked list of",
    "start": "2504920",
    "end": "2513880"
  },
  {
    "text": "actors and every actor has a function of type",
    "start": "2513880",
    "end": "2519920"
  },
  {
    "text": "action fcor T and that's a",
    "start": "2519920",
    "end": "2525960"
  },
  {
    "text": "union and a union means it can be anything within that Union so that",
    "start": "2525960",
    "end": "2534040"
  },
  {
    "text": "action could be a simple method with no",
    "start": "2534040",
    "end": "2539200"
  },
  {
    "text": "parameters it could be a method with one void star parameter and void star means anything you want or it could be a",
    "start": "2539200",
    "end": "2546559"
  },
  {
    "text": "method with two void star parameters even worse two things that can be anything they",
    "start": "2546559",
    "end": "2551640"
  },
  {
    "text": "want um how am I going to to Port this to c because I don't want to use objects",
    "start": "2551640",
    "end": "2560119"
  },
  {
    "text": "I want to be a little bit more type safe because this is basically object right",
    "start": "2560119",
    "end": "2565440"
  },
  {
    "text": "point star for us is an object so what I did is I kept the",
    "start": "2565440",
    "end": "2570960"
  },
  {
    "text": "concept of The Thinker and I could have gone the same way I could have said look",
    "start": "2570960",
    "end": "2577960"
  },
  {
    "text": "I can have an action with nothing I could have an action with one something",
    "start": "2577960",
    "end": "2583359"
  },
  {
    "text": "and I couldn't have an action with two something and then find all the places",
    "start": "2583359",
    "end": "2589280"
  },
  {
    "text": "in the code base where uh it could be that kind of a thinker or that kind of a",
    "start": "2589280",
    "end": "2595559"
  },
  {
    "text": "map object um but that would have meant that I had a thinker with maybe 30 40",
    "start": "2595559",
    "end": "2603240"
  },
  {
    "text": "action types and I was not uh willing to Implement that much different types I",
    "start": "2603240",
    "end": "2610040"
  },
  {
    "text": "wanted to be a little bit smarter than that also because a thinker gets assigned a method a thinker also gets",
    "start": "2610040",
    "end": "2617839"
  },
  {
    "text": "unassigned that method it gets set to to nothing to say this thinker is no longer",
    "start": "2617839",
    "end": "2624480"
  },
  {
    "text": "doing anything it should get uh disposed it should maybe become idle and wait",
    "start": "2624480",
    "end": "2629920"
  },
  {
    "text": "until something happens and then it gets assign a function again if I have 40",
    "start": "2629920",
    "end": "2635480"
  },
  {
    "text": "action types I need to do that 40 times and keep track of which ones I need to",
    "start": "2635480",
    "end": "2640599"
  },
  {
    "text": "set so instead I just used a single action",
    "start": "2640599",
    "end": "2646400"
  },
  {
    "text": "delegate with an action perams and action perams can be any kind of thing",
    "start": "2646400",
    "end": "2653680"
  },
  {
    "text": "that I want it to be like for example it could be a map",
    "start": "2653680",
    "end": "2660440"
  },
  {
    "text": "object I'm I'm running ahead of myself here um action params I actually looked",
    "start": "2660440",
    "end": "2665760"
  },
  {
    "text": "at the source code and and and looked at all of the places where these actions were being used and then identified the",
    "start": "2665760",
    "end": "2671920"
  },
  {
    "text": "four different types that it can be so one of them would be the map object um",
    "start": "2671920",
    "end": "2677880"
  },
  {
    "text": "one of them would be the player itself another one was special was the player Sprite and that's basically uh when",
    "start": "2677880",
    "end": "2685520"
  },
  {
    "text": "you're playing the game you see the status bar and then just above it you see the weapon that you're holding",
    "start": "2685520",
    "end": "2691359"
  },
  {
    "text": "that's the player Sprite and it some if you have for example uh the shotgun and",
    "start": "2691359",
    "end": "2696640"
  },
  {
    "text": "you need to reloads you'll see that reload movement and then that's the action that's",
    "start": "2696640",
    "end": "2702000"
  },
  {
    "text": "happening or it could be any kind of thinker the door the ceiling the floor",
    "start": "2702000",
    "end": "2708920"
  },
  {
    "text": "whatever and then um whenever you call one of those methods that you assign to",
    "start": "2708920",
    "end": "2715359"
  },
  {
    "text": "the action within that method it's very easy to see well I'm expecting a thinker here",
    "start": "2715359",
    "end": "2724040"
  },
  {
    "text": "not a map object nor a player and if that thinker is not a door then I don't",
    "start": "2724040",
    "end": "2729720"
  },
  {
    "text": "do anything and in case I'm I'm never actually going to hit that uh Point",
    "start": "2729720",
    "end": "2736280"
  },
  {
    "text": "anyway but this is just me being type safe um because this method is only going to be called in cases where the",
    "start": "2736280",
    "end": "2743200"
  },
  {
    "text": "action pars contains a thinker and The Thinker is a door but just to be type safe and then whenever you enter this",
    "start": "2743200",
    "end": "2750800"
  },
  {
    "text": "method you can then open or close the door as you need to",
    "start": "2750800",
    "end": "2757480"
  },
  {
    "text": "all right so now we have all of our things",
    "start": "2757480",
    "end": "2763200"
  },
  {
    "text": "implemented that's cool I do have one more thing",
    "start": "2763200",
    "end": "2769079"
  },
  {
    "text": "however I don't know who was here during uh Scott hanselman's talk",
    "start": "2769079",
    "end": "2775160"
  },
  {
    "text": "yesterday a few people um he told us that open source projects if I recall",
    "start": "2775160",
    "end": "2783040"
  },
  {
    "text": "correctly are not cool if they don't have aski art um so let's see if I go to my visual",
    "start": "2783040",
    "end": "2794520"
  },
  {
    "text": "studio um I must warn you if you're prone if you're triggered by flashing uh",
    "start": "2794520",
    "end": "2801440"
  },
  {
    "text": "screens if you have epilepsy look away I will tell you when you can look again",
    "start": "2801440",
    "end": "2807119"
  },
  {
    "text": "but um I can run Doom using S key in a",
    "start": "2807119",
    "end": "2815839"
  },
  {
    "text": "console it's not that performant as the normal version but it works and the way",
    "start": "2815839",
    "end": "2821440"
  },
  {
    "text": "that this works is by the lovely nougat package Spectre console so if you want to do special asky art or",
    "start": "2821440",
    "end": "2830800"
  },
  {
    "text": "special stuff in in in consoles do look at Spectre console it's an amazing n",
    "start": "2830800",
    "end": "2836359"
  },
  {
    "text": "package I recommend it to everyone if they do CLI but that",
    "start": "2836359",
    "end": "2842640"
  },
  {
    "text": "works of course um you also have the more normal Windows version of the game",
    "start": "2842640",
    "end": "2850960"
  },
  {
    "text": "um if you can start looking again it's it's less flashy now um but yeah that",
    "start": "2850960",
    "end": "2856480"
  },
  {
    "text": "works too and I did also render the console output that you get initially",
    "start": "2856480",
    "end": "2862359"
  },
  {
    "text": "when you start the game so that works as well and I can start playing Doom for",
    "start": "2862359",
    "end": "2868200"
  },
  {
    "text": "can start running around and of course this being c um it",
    "start": "2868200",
    "end": "2874400"
  },
  {
    "text": "also supports Maui uh we have we have it running on",
    "start": "2874400",
    "end": "2880720"
  },
  {
    "text": "Android as well and avalonia is also in the works so we can run this on a Mac",
    "start": "2880720",
    "end": "2886119"
  },
  {
    "text": "now without u a lot of effort so that's",
    "start": "2886119",
    "end": "2891318"
  },
  {
    "text": "cool now to summarize what I try to convey",
    "start": "2898559",
    "end": "2904280"
  },
  {
    "text": "today first and foremost unsafe code",
    "start": "2904280",
    "end": "2909480"
  },
  {
    "text": "isn't unne isn't necessarily unsafe per se but also isn't necessarily more",
    "start": "2909480",
    "end": "2914839"
  },
  {
    "text": "performance um it just gives you a lot of extras if you want to have like",
    "start": "2914839",
    "end": "2920119"
  },
  {
    "text": "direct memory access but with great power comes great responsibility of",
    "start": "2920119",
    "end": "2925440"
  },
  {
    "text": "course um it's actually quite easy to translate",
    "start": "2925440",
    "end": "2930559"
  },
  {
    "text": "C code into modern C however uh C++ that's a whole",
    "start": "2930559",
    "end": "2936200"
  },
  {
    "text": "different story especially I mean you can write C++ and just have a c program of course but",
    "start": "2936200",
    "end": "2943119"
  },
  {
    "text": "whenever you go and have like C++ with all the defines and the macros that's going to be already uh interesting in",
    "start": "2943119",
    "end": "2950319"
  },
  {
    "text": "some places and if you use um if you have classes that use multiple",
    "start": "2950319",
    "end": "2956559"
  },
  {
    "text": "inheritance that's also a bit of a problem um but also see C++ is generic",
    "start": "2956559",
    "end": "2962359"
  },
  {
    "text": "type because um if I recall correctly in C++ plus you can for example say hey I",
    "start": "2962359",
    "end": "2968960"
  },
  {
    "text": "have this list of int just like you would in CP but you",
    "start": "2968960",
    "end": "2975720"
  },
  {
    "text": "could also say I have this list of int which is going to be five inch long and then it will optimize for five",
    "start": "2975720",
    "end": "2983160"
  },
  {
    "text": "ins in some way that that's really magic for me but I think behind the scenes",
    "start": "2983160",
    "end": "2989760"
  },
  {
    "text": "there's like a version that says hey if you're going to create an a a vector of",
    "start": "2989760",
    "end": "2995520"
  },
  {
    "text": "ins that's going to be only this size then just immediately create five ins as fields and use those",
    "start": "2995520",
    "end": "3002920"
  },
  {
    "text": "instead of creating an array of of ins instead so there's like trickery going on and if you want to translate that",
    "start": "3002920",
    "end": "3010319"
  },
  {
    "text": "it's going to be a lot more work um yeah and then of course if you",
    "start": "3010319",
    "end": "3016240"
  },
  {
    "text": "are going to if you encounter void star that should be a uh oh moment and then",
    "start": "3016240",
    "end": "3022400"
  },
  {
    "text": "you need to inspect what's really going on here is this is this just a way to to",
    "start": "3022400",
    "end": "3028440"
  },
  {
    "text": "directly go into a specific area of my structures or is this actually a method pointer what do I need to do um and",
    "start": "3028440",
    "end": "3035799"
  },
  {
    "text": "whenever you come across a method pointer try to fix things with actions and Fs because that's the easy way to",
    "start": "3035799",
    "end": "3042520"
  },
  {
    "text": "deal with them um you could also use delegate stars in unsafe code but uh",
    "start": "3042520",
    "end": "3048799"
  },
  {
    "text": "yeah that's a whole different level uh and that's basically it um so",
    "start": "3048799",
    "end": "3055440"
  },
  {
    "text": "if you have any questions I will take them now you can also already access the slide deck if you want to using that QR",
    "start": "3055440",
    "end": "3062799"
  },
  {
    "text": "code um and if there are no questions then I have one more thing to",
    "start": "3062799",
    "end": "3069079"
  },
  {
    "text": "say uh I have stickers with the Doom sharp logo um I have a crazy artist who",
    "start": "3069079",
    "end": "3077880"
  },
  {
    "text": "created them for me so if you want a sticker you can uh find me here or find",
    "start": "3077880",
    "end": "3082960"
  },
  {
    "text": "me outside later and then uh in a few moments there Alo will be a certain person",
    "start": "3082960",
    "end": "3089839"
  },
  {
    "text": "called Lars who will be doing uh the party introduction and I suppose there",
    "start": "3089839",
    "end": "3096040"
  },
  {
    "text": "will be beers as well so um I'm not sure if there are already are beers outside",
    "start": "3096040",
    "end": "3101839"
  },
  {
    "text": "but I might give you early access to beers which is always nice so okay any",
    "start": "3101839",
    "end": "3110040"
  },
  {
    "text": "questions no questions everything was clear start porting Doom then right now or just take my source code",
    "start": "3112240",
    "end": "3119799"
  },
  {
    "text": "that works too right cool thanks for listening",
    "start": "3119799",
    "end": "3125460"
  },
  {
    "text": "[Applause]",
    "start": "3125460",
    "end": "3131929"
  }
]