[
  {
    "start": "0",
    "end": "417000"
  },
  {
    "text": "hi everyone you're doing it wrong if you're not considering",
    "start": "1710",
    "end": "8840"
  },
  {
    "text": "platform-as-a-service on premise or in the cloud and if you're building applications today I think the",
    "start": "8840",
    "end": "15900"
  },
  {
    "text": "days of shipping data through to to tear through countless instances to the",
    "start": "15900",
    "end": "22380"
  },
  {
    "text": "client and back and forth or over in modern computation models such as actors",
    "start": "22380",
    "end": "28820"
  },
  {
    "text": "we bring data closer to the compute layer and thus significantly reduce the",
    "start": "28820",
    "end": "34440"
  },
  {
    "text": "latency today I'm going to take you on a journey and I will show you how you can",
    "start": "34440",
    "end": "42780"
  },
  {
    "text": "free yourself from this data shaping paradigm and no longer ship data through",
    "start": "42780",
    "end": "48030"
  },
  {
    "text": "all the tiers towards a new stateful middle tier architecture by leveraging",
    "start": "48030",
    "end": "54089"
  },
  {
    "text": "smart routing we can route requests that are coming from platform as a service",
    "start": "54089",
    "end": "60269"
  },
  {
    "text": "offerings like as a service bus or as a storage use into stateful service",
    "start": "60269",
    "end": "65970"
  },
  {
    "text": "components that are running inside service fabrics that are that are responsible of handling business",
    "start": "65970",
    "end": "72540"
  },
  {
    "text": "requests at the end of this talk you know the benefits of stateful services",
    "start": "72540",
    "end": "79049"
  },
  {
    "text": "and service fabric and how you can leverage them for data intensive workloads and how message patterns relay to data",
    "start": "79049",
    "end": "87180"
  },
  {
    "text": "partitioning and how you can ensure proper routing into the cluster in this",
    "start": "87180",
    "end": "94110"
  },
  {
    "text": "talk I'll assume some basic knowledge around service fabric I will cover some of the concepts on the fly but basic",
    "start": "94110",
    "end": "101759"
  },
  {
    "text": "knowledge is required and also assume some basic knowledge around standard messaging patterns such as a command",
    "start": "101759",
    "end": "108359"
  },
  {
    "text": "requests reply and events of course if you have any questions feel free to ask these questions either during the talk",
    "start": "108359",
    "end": "114659"
  },
  {
    "text": "or preferably at the end of the talk so sometimes when I'm sitting in my office",
    "start": "114659",
    "end": "121710"
  },
  {
    "text": "or I'm sitting at home and I'm working on something especially when the weather is bad again in Switzerland I get",
    "start": "121710",
    "end": "129390"
  },
  {
    "text": "slightly depressed and I think how could I cheer me cheer myself up",
    "start": "129390",
    "end": "135660"
  },
  {
    "text": "and what I usually do then is I take a piece of Swiss chocolate I love Swiss",
    "start": "135660",
    "end": "140940"
  },
  {
    "text": "chocolates you might wonder what has chocolate to do with this talk with micro-services and service fabric well",
    "start": "140940",
    "end": "147390"
  },
  {
    "text": "I'm going to give to you in this talk a sweet but totally fictional story about",
    "start": "147390",
    "end": "152870"
  },
  {
    "text": "Swiss chocolate manufacturing everything I'm going to show here is totally",
    "start": "152870",
    "end": "158520"
  },
  {
    "text": "invented by by myself so Switzerland is well known for its extremely excellent",
    "start": "158520",
    "end": "164910"
  },
  {
    "text": "chocolate bars it's even better than the Belgian chocolate believe me and I have",
    "start": "164910",
    "end": "170250"
  },
  {
    "text": "a few samples here so if you give me feedback at the end of the talk or if you ask a good question I'll give",
    "start": "170250",
    "end": "177000"
  },
  {
    "text": "you a give away a little bit of Swiss chocolate so that you can try it out yourself we have a problem our chocolate",
    "start": "177000",
    "end": "184380"
  },
  {
    "text": "is so good that the international demand on these chocolate bars is raising chocolate",
    "start": "184380",
    "end": "190170"
  },
  {
    "text": "manufacturers in Switzerland they realize tanida they have a need for a highly reliable chocolate order",
    "start": "190170",
    "end": "196320"
  },
  {
    "text": "management system the team responsible for that new order management system",
    "start": "196320",
    "end": "201630"
  },
  {
    "text": "wanted to go to platform as a service and the cloud because that's what everybody does these days right that's",
    "start": "201630",
    "end": "207600"
  },
  {
    "text": "why we're here we learn about new things and they wanted to do it as well but they realized unfortunately they have a",
    "start": "207600",
    "end": "213690"
  },
  {
    "text": "few things running on premise that they can't really migrate to the clouds we",
    "start": "213690",
    "end": "219450"
  },
  {
    "text": "also have legacy in Switzerland especially when we have to integrate with God government services so in the",
    "start": "219450",
    "end": "226650"
  },
  {
    "text": "architecture meeting of the team Carl the team architect starts the discussion",
    "start": "226650",
    "end": "232260"
  },
  {
    "text": "with a horror story attention the next slide is not for the faint of heart he",
    "start": "232260",
    "end": "237840"
  },
  {
    "text": "says many Easter bunnies have died last Easter our chocolate is so good that",
    "start": "237840",
    "end": "244700"
  },
  {
    "text": "everyone people around the globe are ordering our extremely delicious chocolates last Easter the demand was so",
    "start": "244700",
    "end": "252630"
  },
  {
    "text": "high that our internal legacy application started joking around it became slower and slower and slower and",
    "start": "252630",
    "end": "259489"
  },
  {
    "text": "eventually it started to fail the ripple effects were so severe that some of the",
    "start": "259489",
    "end": "266430"
  },
  {
    "text": "orders never came through and he also said well losing orders is a",
    "start": "266430",
    "end": "271629"
  },
  {
    "text": "no-go because one of our missions as a company as a chocolate manufacturing company is",
    "start": "271629",
    "end": "276669"
  },
  {
    "text": "to make people happy by shipping our products to the people around the globe",
    "start": "276669",
    "end": "281860"
  },
  {
    "text": "and and because we are not able to ship even on the spikey demands our delicious",
    "start": "281860",
    "end": "287620"
  },
  {
    "text": "chocolate we are failing in that mission if we continue to do so",
    "start": "287620",
    "end": "293139"
  },
  {
    "text": "we be wiped up wiped out by all our competitors and potentially Belgian",
    "start": "293139",
    "end": "298389"
  },
  {
    "text": "chocolates that would be a disaster so but he says but recently I was",
    "start": "298389",
    "end": "304870"
  },
  {
    "text": "stumbling over this awesome technology called service fabric I was watching some Channel 9 videos and I was I'm",
    "start": "304870",
    "end": "311770"
  },
  {
    "text": "really hooked on to on service fabric let me explain you in this architecture meeting what service fabric actually is",
    "start": "311770",
    "end": "318909"
  },
  {
    "text": "and he starts with empathy and enthusiasm assess Asha service fabric is",
    "start": "318909",
    "end": "325599"
  },
  {
    "text": "a distributed system platform that makes easy makes it really easy to package and",
    "start": "325599",
    "end": "330759"
  },
  {
    "text": "deploy applications that are reliable and scalable both on-premises and in the",
    "start": "330759",
    "end": "336069"
  },
  {
    "text": "clouds and he says service fabric also addresses all our needs of developing of",
    "start": "336069",
    "end": "343020"
  },
  {
    "text": "developing highly robust applications and we can avoid managing complex",
    "start": "343020",
    "end": "348960"
  },
  {
    "text": "infrastructure on premises and we can focus on implementing our mission-critical chocolate ordering",
    "start": "348960",
    "end": "356439"
  },
  {
    "text": "system without to worry about all the mythic retails of managing the infrastructure and he continued to say",
    "start": "356439",
    "end": "363430"
  },
  {
    "text": "well it's hyper scale it supports different programming models we can apply replication and failover it has",
    "start": "363430",
    "end": "371110"
  },
  {
    "text": "upgrade domains fault domains and we can do rolling upgrades and the most",
    "start": "371110",
    "end": "376120"
  },
  {
    "text": "important aspect and our managers love that it has a built in load balancer yes",
    "start": "376120",
    "end": "381689"
  },
  {
    "text": "check and of course car went on and on and on and on in this",
    "start": "381689",
    "end": "386889"
  },
  {
    "text": "meeting with his sales pitch after all that's all the torque it takes through the whole day right they talk talk talk",
    "start": "386889",
    "end": "392649"
  },
  {
    "text": "and get nothing done and if you want to know more what karl explained to the",
    "start": "392649",
    "end": "398199"
  },
  {
    "text": "team about service fabric I suggest you just read this blog this post I posted here because after",
    "start": "398199",
    "end": "405250"
  },
  {
    "text": "all all the information that Carl gave the team was anyway copy pasted from Microsoft material so this is what call",
    "start": "405250",
    "end": "413830"
  },
  {
    "text": "showed to the team he started he started",
    "start": "413830",
    "end": "425260"
  },
  {
    "start": "417000",
    "end": "511000"
  },
  {
    "text": "wishes to do and of course every time you switch to business to do everyone has to wait in this architecture",
    "start": "425260",
    "end": "431230"
  },
  {
    "text": "meetings you have to wait as well and he said look I have here service fabric",
    "start": "431230",
    "end": "436240"
  },
  {
    "text": "running on my local machine I have a 5 node cluster don't believe me look at",
    "start": "436240",
    "end": "441400"
  },
  {
    "text": "this here here this service fabric running on my machine five nodes it",
    "start": "441400",
    "end": "446590"
  },
  {
    "text": "already has two applications deployed this is the service Explorer it's awesome I can view the different nodes I",
    "start": "446590",
    "end": "453610"
  },
  {
    "text": "can dive into the application here are the few see notes if already applications deployed and so on and so",
    "start": "453610",
    "end": "460150"
  },
  {
    "text": "on and he said look how easy it is to create an application so he went to service fabric application and then he",
    "start": "460150",
    "end": "469680"
  },
  {
    "text": "let me he said ok I have to remember where I have to put this well let's put",
    "start": "469680",
    "end": "476020"
  },
  {
    "text": "it to projects micro micro service chocolate micro services so he did that",
    "start": "476020",
    "end": "483490"
  },
  {
    "text": "and put it in here created the application and said ok how about we do",
    "start": "483490",
    "end": "491020"
  },
  {
    "text": "a chalk order or the chocolate State stateless service so he created that",
    "start": "491020",
    "end": "499020"
  },
  {
    "text": "stateless service and of course it took some time until everything is created",
    "start": "499020",
    "end": "504580"
  },
  {
    "text": "the Microsoft machinery is going on and and like like I he also mistyped the",
    "start": "504580",
    "end": "512650"
  },
  {
    "start": "511000",
    "end": "531000"
  },
  {
    "text": "service name so and he said well I",
    "start": "512650",
    "end": "517750"
  },
  {
    "text": "already have something prepared I want to show you how robust it actually is I have it already on my hard disk so I",
    "start": "517750",
    "end": "524740"
  },
  {
    "text": "just need to include it into the project it's here",
    "start": "524740",
    "end": "530560"
  },
  {
    "text": "it's here I have an application that will connect to the cluster and I have",
    "start": "530560",
    "end": "537160"
  },
  {
    "text": "it included here and what else well let's let's add something else we need some contracts because I want to show",
    "start": "537160",
    "end": "544569"
  },
  {
    "text": "you show readout and well because he mistyped he mistyped the name of the",
    "start": "544569",
    "end": "550209"
  },
  {
    "text": "service he of course he had to change something is in his application so",
    "start": "550209",
    "end": "556089"
  },
  {
    "text": "that's fixed right now and he said well I would I want to show you in this",
    "start": "556089",
    "end": "562029"
  },
  {
    "text": "architecture meetings I want to show you how service fabric can automatically failover and in order to do that I need an",
    "start": "562029",
    "end": "568839"
  },
  {
    "text": "application which connects to the cluster to a service running in the cluster and I need to expose this",
    "start": "568839",
    "end": "574089"
  },
  {
    "text": "service that is running in the in the cluster and he created already state the stateless service that is here your de",
    "start": "574089",
    "end": "581350"
  },
  {
    "text": "Chocolat so what I what he started doing is well I already have an interface",
    "start": "581350",
    "end": "586509"
  },
  {
    "text": "called a chocolate service he needed to include this and now he said well I'm",
    "start": "586509",
    "end": "594220"
  },
  {
    "text": "using now service fabric remoting to implement it and service fabric emoting",
    "start": "594220",
    "end": "600399"
  },
  {
    "text": "automatically exposes a service inside the cluster over remote procedure calls",
    "start": "600399",
    "end": "606069"
  },
  {
    "text": "so he did this he did he implemented this method as a demo he said oh let's",
    "start": "606069",
    "end": "611199"
  },
  {
    "text": "do result the rest returned result and in order to show that the service is",
    "start": "611199",
    "end": "617110"
  },
  {
    "text": "failing over we need to we need to return I'm going to return the instance",
    "start": "617110",
    "end": "623410"
  },
  {
    "text": "ID of the service that is running it that is available on this thing called context and I'm because it's a",
    "start": "623410",
    "end": "629829"
  },
  {
    "text": "HelloWorld application I will also return here hello world and that will",
    "start": "629829",
    "end": "634929"
  },
  {
    "text": "then be displayed by the by the console application that is running outside of",
    "start": "634929",
    "end": "640629"
  },
  {
    "text": "the cluster but as always with stuff we need some new code packages in order to",
    "start": "640629",
    "end": "647319"
  },
  {
    "text": "make this work in order to expose the service we over remoting we actually",
    "start": "647319",
    "end": "653319"
  },
  {
    "text": "need to to add in this service package reference and hopefully the demo gods",
    "start": "653319",
    "end": "660850"
  },
  {
    "text": "are with him so he goes into my he says okay let's let's pull in this",
    "start": "660850",
    "end": "666429"
  },
  {
    "text": "service fabric remoting package that's that one and it also pulls in this",
    "start": "666429",
    "end": "673839"
  },
  {
    "start": "673000",
    "end": "804000"
  },
  {
    "text": "internal transport which exposes over a thing called communication listener",
    "start": "673839",
    "end": "679079"
  },
  {
    "text": "remoting service to the clients and of course because because we are doing",
    "start": "679079",
    "end": "687339"
  },
  {
    "text": "Microsoft demos it's important that we do right click deploy on the solution as",
    "start": "687339",
    "end": "692980"
  },
  {
    "text": "all the Microsoft demos are working so we go here I built it already and let's publish the",
    "start": "692980",
    "end": "700839"
  },
  {
    "text": "application to the local 5 node cluster and see what's going to happen the",
    "start": "700839",
    "end": "707860"
  },
  {
    "text": "machinery is kicking off it creates a new application it gets deployed as you",
    "start": "707860",
    "end": "716170"
  },
  {
    "text": "can see three applications running and this is the chocolate my chocolate",
    "start": "716170",
    "end": "721959"
  },
  {
    "text": "micro service application and it contains an ordered chocolates misspelt as you can see here and version one and",
    "start": "721959",
    "end": "731970"
  },
  {
    "text": "now we need to connect to this thing and let's let's start let's start the",
    "start": "731970",
    "end": "739569"
  },
  {
    "text": "connector in debug mode and let's see what's going to happen hmmm",
    "start": "739569",
    "end": "749730"
  },
  {
    "text": "what ah good good catch",
    "start": "751950",
    "end": "759130"
  },
  {
    "text": "which one here yeah exactly so here actually this is the correct",
    "start": "759130",
    "end": "765880"
  },
  {
    "text": "service name here cool it's always good when when attendees of",
    "start": "765880",
    "end": "771430"
  },
  {
    "text": "the talk actually pay attention to what what the architect is doing right sir",
    "start": "771430",
    "end": "778170"
  },
  {
    "text": "chocolate bar right chocolate bar milk chocolate I cannot throw it up you just",
    "start": "778170",
    "end": "783220"
  },
  {
    "text": "get one",
    "start": "783220",
    "end": "785550"
  },
  {
    "text": "yeah I've talked couples as well of course yeah haha and of course he also",
    "start": "791850",
    "end": "804670"
  },
  {
    "start": "804000",
    "end": "955000"
  },
  {
    "text": "forgets something else because it's not enough to just implement an interface and actually nobody noticed that I",
    "start": "804670",
    "end": "811900"
  },
  {
    "text": "thought you people already know how service fabric works but they actually what actually was forgotten is that here",
    "start": "811900",
    "end": "819100"
  },
  {
    "text": "when when you expose a remoting service you also have to create a communication",
    "start": "819100",
    "end": "824710"
  },
  {
    "text": "listener and this is the remoting communication Lister that needs to be added and this needs to be wrapped in a",
    "start": "824710",
    "end": "832630"
  },
  {
    "text": "new service instance listener and then this remoting thing needs to be added",
    "start": "832630",
    "end": "838450"
  },
  {
    "text": "because without that nothing will actually work and of course because because we change the service definition",
    "start": "838450",
    "end": "845650"
  },
  {
    "text": "we could now increase increase the version arm redeploy it and then it would automatically do rolling upgrades",
    "start": "845650",
    "end": "851740"
  },
  {
    "text": "but I just override it right now so publish it again it will now tear",
    "start": "851740",
    "end": "858940"
  },
  {
    "text": "down the existing application redeploy it we could also do that on the fly in the rolling upgrade upgrade fashion in",
    "start": "858940",
    "end": "865650"
  },
  {
    "text": "production and now let's start the connector again and now we see hello",
    "start": "865650",
    "end": "873430"
  },
  {
    "text": "world nice finally it's working but that's not all now we can essentially go",
    "start": "873430",
    "end": "878800"
  },
  {
    "text": "back I'll move it a little bit to decide and hopefully it will work with with with this",
    "start": "878800",
    "end": "884910"
  },
  {
    "text": "screen size here but we can we can essentially see check whether where it's",
    "start": "884910",
    "end": "893520"
  },
  {
    "text": "running all right we have here the chocolate micro service and the ordered chocolate we have to quickly see on",
    "start": "893520",
    "end": "901440"
  },
  {
    "text": "which note is running it's on note four okay so let's let's deactivate and",
    "start": "901440",
    "end": "910040"
  },
  {
    "text": "basically just remove the whole data package and of course it tells me you",
    "start": "910040",
    "end": "915240"
  },
  {
    "text": "sure you want to do this yes I'm really sure I want to destroy my cluster and",
    "start": "915240",
    "end": "925220"
  },
  {
    "text": "now it's removing it and we should see that the service chokes a little bit and",
    "start": "925220",
    "end": "932580"
  },
  {
    "text": "it automatically fails over redeployed internally and it heals itself okay cool",
    "start": "932580",
    "end": "939690"
  },
  {
    "text": "so far so good that was the demo that Carl the team",
    "start": "939690",
    "end": "945000"
  },
  {
    "text": "architect gave gave to the to the team and of course the team was absolutely",
    "start": "945000",
    "end": "951870"
  },
  {
    "text": "hooked after this demo although he made a few mistakes during the demo and they decided they want to benefit from the",
    "start": "951870",
    "end": "958260"
  },
  {
    "text": "scalability and robustness of service fabric and the team wanted to immediately jump in front of their",
    "start": "958260",
    "end": "964470"
  },
  {
    "text": "computers and start hacking and coding with service fabric and to build the new ideas but Carl stopped them and said",
    "start": "964470",
    "end": "970950"
  },
  {
    "text": "hold on people before we proceed we first need to understand the",
    "start": "970950",
    "end": "976770"
  },
  {
    "text": "fundamentals of scaling there is a thing called the skill cube it comes from the",
    "start": "976770",
    "end": "982410"
  },
  {
    "start": "981000",
    "end": "1056000"
  },
  {
    "text": "micro services design principles and the scale of cube has a few axis and the y",
    "start": "982410",
    "end": "988950"
  },
  {
    "text": "axis talks about functional decomposition or it's also known known as y-axis scaling and in y-axis scaling",
    "start": "988950",
    "end": "998550"
  },
  {
    "text": "what we apply is we we do scale by splitting into different things and he said we already do that we do micro",
    "start": "998550",
    "end": "1004760"
  },
  {
    "text": "service design principles so we decompose into multiple bounded contexts",
    "start": "1004760",
    "end": "1010250"
  },
  {
    "text": "or micro services so we have order management service shipping service and manufacturing service and whatever",
    "start": "1010250",
    "end": "1018410"
  },
  {
    "text": "and yell said well we also have the x-axis scaling and what we do there is basically when we have these",
    "start": "1018410",
    "end": "1023959"
  },
  {
    "text": "micro-services we deploy them multiple times into the cluster and so we have",
    "start": "1023959",
    "end": "1030140"
  },
  {
    "text": "multiple instances running of the same service in the cluster it's also known",
    "start": "1030140",
    "end": "1035178"
  },
  {
    "text": "as horizontal deduplication so the TLDR version of what he gave to",
    "start": "1035179",
    "end": "1040668"
  },
  {
    "text": "the team is he said well we make things smaller and then we spread them out right that's what we do and then I then",
    "start": "1040669",
    "end": "1048199"
  },
  {
    "text": "he said thereby I the Karl the Great Architect of the universe came up with",
    "start": "1048199",
    "end": "1054020"
  },
  {
    "text": "the falling architecture blueprints so first let's start with the low pole",
    "start": "1054020",
    "end": "1059539"
  },
  {
    "start": "1056000",
    "end": "1145000"
  },
  {
    "text": "answer every good architecture has to have one right so requests are routed",
    "start": "1059539",
    "end": "1065690"
  },
  {
    "text": "randomly by this local answer to the stateless weft here the stateless weft here will contain our latest angular",
    "start": "1065690",
    "end": "1073190"
  },
  {
    "text": "react J's knockout kill myself' UI framework from there every request will",
    "start": "1073190",
    "end": "1079429"
  },
  {
    "text": "be routed to the stateless middle tier in the middle that is responsible to do",
    "start": "1079429",
    "end": "1085490"
  },
  {
    "text": "the necessary compute while service fabric has this concept of reliable services namely stateless services which",
    "start": "1085490",
    "end": "1092690"
  },
  {
    "text": "I saw one in the demo and the orders will be managed by the storage tier and",
    "start": "1092690",
    "end": "1099280"
  },
  {
    "text": "whenever request comes in the request is routed through through all this gear to",
    "start": "1099280",
    "end": "1104900"
  },
  {
    "text": "the storage layer and the data namely the orders will be shaped back to the client and so so forth and he said well",
    "start": "1104900",
    "end": "1112610"
  },
  {
    "text": "and if hell breaks loose if we have a lot of customers ordering chocolate then",
    "start": "1112610",
    "end": "1118130"
  },
  {
    "text": "and our storage layer cannot keep up with the demand that we have on our cluster while we just throw in some",
    "start": "1118130",
    "end": "1124610"
  },
  {
    "text": "hipster caching technology like Redis for example and everything will be good right and it any offset and by the way",
    "start": "1124610",
    "end": "1131809"
  },
  {
    "text": "if you want to impress your your bodies in the local deep bar or whatever you can tell them this is called deep data",
    "start": "1131809",
    "end": "1138860"
  },
  {
    "text": "shaping paradigm because we're shaping data through all the tiers",
    "start": "1138860",
    "end": "1145870"
  },
  {
    "start": "1145000",
    "end": "1301000"
  },
  {
    "text": "but then Mandy from the team she spoke up and said but I'm sorry Karl well",
    "start": "1146140",
    "end": "1152110"
  },
  {
    "text": "nobody is nobody builds architecture like this anymore she said well we've tried that in-house",
    "start": "1152110",
    "end": "1158230"
  },
  {
    "text": "before you join the company and we realized that building interactive",
    "start": "1158230",
    "end": "1163800"
  },
  {
    "text": "services that are scalable and reliable is really hard because interactivity on",
    "start": "1163800",
    "end": "1170440"
  },
  {
    "text": "the front ends has strict constraints on the availability and latency on our",
    "start": "1170440",
    "end": "1178120"
  },
  {
    "text": "services because when the latency is too high it directly affects the end-user experience because everything ripples",
    "start": "1178120",
    "end": "1184480"
  },
  {
    "text": "through all the layers and we realize that to support a large number of concurrent user sessions we have to have",
    "start": "1184480",
    "end": "1192520"
  },
  {
    "text": "a fry a high throughput that's essential and she also said well with your traditional three-tier architecture that",
    "start": "1192520",
    "end": "1199030"
  },
  {
    "text": "you just showed us we are going to ship data through stateless font and",
    "start": "1199030",
    "end": "1205300"
  },
  {
    "text": "stateless middle tier to the storage layer and back and forth and therefore the storage layer essentially limits our",
    "start": "1205300",
    "end": "1212770"
  },
  {
    "text": "scalability because the latency of the storage layer directly impacts our end",
    "start": "1212770",
    "end": "1218230"
  },
  {
    "text": "users because it has to be consulted for every request and she said well we also",
    "start": "1218230",
    "end": "1225730"
  },
  {
    "text": "try to add a caching layer and what we realized is well it did improve a little",
    "start": "1225730",
    "end": "1232570"
  },
  {
    "text": "bit the performance of the caching layer but we lost basically the concurrency in",
    "start": "1232570",
    "end": "1237970"
  },
  {
    "text": "transactional semantics of our storage layer and furthermore we realized that",
    "start": "1237970",
    "end": "1243280"
  },
  {
    "text": "at some point in time we have to invalidate the caches and cache invalidation is a really complex problem",
    "start": "1243280",
    "end": "1249990"
  },
  {
    "text": "so they started to think about implementing a concurrency control protocol something like something like a",
    "start": "1249990",
    "end": "1257530"
  },
  {
    "text": "raster consensus-based and then she said well but at some point we gave it up and",
    "start": "1257530",
    "end": "1262690"
  },
  {
    "text": "we realized that with or without cache caching the stateless middle tier",
    "start": "1262690",
    "end": "1269260"
  },
  {
    "text": "approach does not provide data locality the data is never there where you need it because for every request like I",
    "start": "1269260",
    "end": "1277480"
  },
  {
    "text": "already said we have to go through all the all these tears and then she said in the",
    "start": "1277480",
    "end": "1282580"
  },
  {
    "text": "world of IOT cloud service and acting models the approach for distributed",
    "start": "1282580",
    "end": "1288400"
  },
  {
    "text": "computing is that we basically take the state and move it closer to the compute layer so then she said well this is my",
    "start": "1288400",
    "end": "1296590"
  },
  {
    "text": "successor architecture to cause approach and that's my proposal well service fabric has the concept of",
    "start": "1296590",
    "end": "1303640"
  },
  {
    "start": "1301000",
    "end": "1382000"
  },
  {
    "text": "stateful services stateful services allow to consistently and reliably store",
    "start": "1303640",
    "end": "1310750"
  },
  {
    "text": "the states like the orders right where the service lists inside the cluster by",
    "start": "1310750",
    "end": "1317260"
  },
  {
    "text": "leveraging the power of so-called reliable collections and you explain well reliable collections they have a",
    "start": "1317260",
    "end": "1323950"
  },
  {
    "text": "similar C sharp API like top net collection but they are replicated",
    "start": "1323950",
    "end": "1329910"
  },
  {
    "text": "transactional and highly available inside the cluster and said well with",
    "start": "1329910",
    "end": "1335230"
  },
  {
    "text": "that we can achieve that the application hot state lives in the computer so all the orders are always highly available",
    "start": "1335230",
    "end": "1342580"
  },
  {
    "text": "with low latency reads and writes namely in the middle and the external store has",
    "start": "1342580",
    "end": "1349120"
  },
  {
    "text": "to be only consulted for exhaust or offline analytics purposes and of course",
    "start": "1349120",
    "end": "1356200"
  },
  {
    "text": "we can keep the basically the orders transactionally in memory and she all",
    "start": "1356200",
    "end": "1361300"
  },
  {
    "text": "said well like every approach it also has some drawbacks because well with storage here can have a larger capacity",
    "start": "1361300",
    "end": "1369630"
  },
  {
    "text": "potentially than then the capacity of our cluster because we can only save as",
    "start": "1369630",
    "end": "1375970"
  },
  {
    "text": "much sate inside the cluster as the cluster has capacity and furthermore she",
    "start": "1375970",
    "end": "1384160"
  },
  {
    "start": "1382000",
    "end": "1477000"
  },
  {
    "text": "continued potentially Carl has been watching too many channel 9 videos late",
    "start": "1384160",
    "end": "1389350"
  },
  {
    "text": "nights and he actually forgot that it's a scale cube right a cube has three axis",
    "start": "1389350",
    "end": "1395620"
  },
  {
    "text": "and there is also a thing called the set axis scaling and then she walks back to",
    "start": "1395620",
    "end": "1402910"
  },
  {
    "text": "the architecture diagram where a call draw this this cube when she says well there is this set axis and in order to",
    "start": "1402910",
    "end": "1409870"
  },
  {
    "text": "achieve hyper scale it's not enough to think about basically splitting into",
    "start": "1409870",
    "end": "1417309"
  },
  {
    "text": "multiple microservices and then cloning them and having multiple instances we",
    "start": "1417309",
    "end": "1422440"
  },
  {
    "text": "also need to think about can we split these micro-services as well into",
    "start": "1422440",
    "end": "1427929"
  },
  {
    "text": "multiple partitions so is it for example possible to take order management and",
    "start": "1427929",
    "end": "1433179"
  },
  {
    "text": "partition order management into multiple partitions and that's called the data",
    "start": "1433179",
    "end": "1438940"
  },
  {
    "text": "partitioning and then gee hold on a second and then she says well",
    "start": "1438940",
    "end": "1450419"
  },
  {
    "text": "let me go back to the other architecture diagram and she also said now let me",
    "start": "1450419",
    "end": "1457539"
  },
  {
    "text": "give you an example but I'm totally pulling this out of thin air right now so let's let's imagine for the sake of",
    "start": "1457539",
    "end": "1464500"
  },
  {
    "text": "this architectural discussion that our order management system was only allowed",
    "start": "1464500",
    "end": "1470320"
  },
  {
    "text": "to have one chocolate type per order and our our customers would be only ordering",
    "start": "1470320",
    "end": "1477940"
  },
  {
    "start": "1477000",
    "end": "1706000"
  },
  {
    "text": "one order let's say for example we have customers ordering dark chocolates brown",
    "start": "1477940",
    "end": "1483760"
  },
  {
    "text": "chocolate and white chocolate and she says I know it's a bit silly but please bear with me well so this fabric makes",
    "start": "1483760",
    "end": "1490990"
  },
  {
    "text": "it super easy to develop to develop scalable services by offering a",
    "start": "1490990",
    "end": "1496360"
  },
  {
    "text": "first-class data partitioning concepts so conceptually you have to think about",
    "start": "1496360",
    "end": "1502120"
  },
  {
    "text": "data partitioning of stateful services it's a partition is a scale unit that",
    "start": "1502120",
    "end": "1508570"
  },
  {
    "text": "makes a service highly reliable through multiple replicas inside the cluster and",
    "start": "1508570",
    "end": "1514870"
  },
  {
    "text": "the state is balanced across all the nodes in the cluster and a great thing",
    "start": "1514870",
    "end": "1522730"
  },
  {
    "text": "about service fabric is that whether depending on the demand that the",
    "start": "1522730",
    "end": "1528309"
  },
  {
    "text": "partition has the internal resource manager of the service fabric cluster will ought to automatically make sure",
    "start": "1528309",
    "end": "1535210"
  },
  {
    "text": "that state the nodes get moved so the services can move the route around inside the clusters so that allows",
    "start": "1535210",
    "end": "1542440"
  },
  {
    "text": "basically the application in this example partitioned by chocolate",
    "start": "1542440",
    "end": "1547810"
  },
  {
    "text": "to grow to the notes resource limit and use all the memory and all the compute",
    "start": "1547810",
    "end": "1553960"
  },
  {
    "text": "that is available on a node and if there the resource need grows which are flowing more nodes and the service",
    "start": "1553960",
    "end": "1561160"
  },
  {
    "text": "fabric Lhasa which automatically rebalance it and she also said well service fabric has the concept of range",
    "start": "1561160",
    "end": "1567940"
  },
  {
    "text": "partition for example or otherwise also known as uniform in sixty-four partitions where you can basically say",
    "start": "1567940",
    "end": "1574660"
  },
  {
    "text": "you can divide the data into ranges for example from zero to a thousand four from zero to 300 or four from - in 64 -",
    "start": "1574660",
    "end": "1583030"
  },
  {
    "text": "plus in 64 and there is also the thing called a named partition a named",
    "start": "1583030",
    "end": "1588280"
  },
  {
    "text": "partition works when you can basically pocket your data into multiple buckets",
    "start": "1588280",
    "end": "1594460"
  },
  {
    "text": "and in this example we could for example bucket our data in dark chocolate brown",
    "start": "1594460",
    "end": "1602020"
  },
  {
    "text": "chocolate and white chocolate right other examples would be you could for",
    "start": "1602020",
    "end": "1607150"
  },
  {
    "text": "example have pockets like regions postal codes customer groups or other self-invented",
    "start": "1607150",
    "end": "1613750"
  },
  {
    "text": "business boundaries that you have in your bounded context and of course there's a third partitioning type in",
    "start": "1613750",
    "end": "1619810"
  },
  {
    "text": "service fabric called the singleton partition we're not going to talk about single singleton partitions the",
    "start": "1619810",
    "end": "1625930"
  },
  {
    "text": "partitioning type that is primarily used for stateless services by default and",
    "start": "1625930",
    "end": "1632350"
  },
  {
    "text": "she says well I'm presenting this year a little bit simplified because of course",
    "start": "1632350",
    "end": "1637830"
  },
  {
    "text": "you wouldn't you would not use chocolate type as a data partitioning schema because if we have customers like me",
    "start": "1637830",
    "end": "1645400"
  },
  {
    "text": "that all love dark chocolates basically most of the customers have basically ordered a lot of dark",
    "start": "1645400",
    "end": "1651910"
  },
  {
    "text": "chocolate and our customer our class would be totally no longer balanced out",
    "start": "1651910",
    "end": "1657250"
  },
  {
    "text": "right we would potentially is another data partitioning schema but that's just for the sake of the example that men men",
    "start": "1657250",
    "end": "1665890"
  },
  {
    "text": "gave and she said as well and on the other hand choosing the number of partitions is quite complex because we",
    "start": "1665890",
    "end": "1672880"
  },
  {
    "text": "have to think about upfront how much scaling needs we have in the cluster because it's service fabric makes it",
    "start": "1672880",
    "end": "1680830"
  },
  {
    "text": "really hard to repartition once you already have stored data right now there",
    "start": "1680830",
    "end": "1686679"
  },
  {
    "text": "is no built-in functionality in service fabric you basically has to shuffle your data out of the cluster and then",
    "start": "1686679",
    "end": "1693159"
  },
  {
    "text": "redeploy the service with the new partitioning schema and then shuffle the data in with the new partitioning schema",
    "start": "1693159",
    "end": "1701080"
  },
  {
    "text": "so you have to think about that up front but then to the youngest member of the",
    "start": "1701080",
    "end": "1709029"
  },
  {
    "start": "1706000",
    "end": "1721000"
  },
  {
    "text": "team in this architecture the discussion said well I can't really understand this technical gibberish that mandy was",
    "start": "1709029",
    "end": "1715960"
  },
  {
    "text": "talking about and he asked for a concrete example and she said well look",
    "start": "1715960",
    "end": "1722620"
  },
  {
    "start": "1721000",
    "end": "1843000"
  },
  {
    "text": "Joe imagine a customer comes in and gets randomly assigned a stateless web node",
    "start": "1722620",
    "end": "1728860"
  },
  {
    "text": "on the stateless front-end let's say he orders white-chocolate the stateless",
    "start": "1728860",
    "end": "1735269"
  },
  {
    "text": "front-end will use the chocolate type to determine the partition key and the name",
    "start": "1735269",
    "end": "1741909"
  },
  {
    "text": "partition and then we will use the service fabric building service partition resolver resolve that the",
    "start": "1741909",
    "end": "1748870"
  },
  {
    "text": "partition that is responsible to host that data and imagine service fabric as",
    "start": "1748870",
    "end": "1756850"
  },
  {
    "text": "internally something like a naming service or a DNS that is exposed over this service partition resolver that",
    "start": "1756850",
    "end": "1764019"
  },
  {
    "text": "allows to basically take a service name take a partition key and transparently",
    "start": "1764019",
    "end": "1769929"
  },
  {
    "text": "locate the service inside the cluster that is responsible for that specific",
    "start": "1769929",
    "end": "1775779"
  },
  {
    "text": "partition and as soon as it's as soon as it retrieved the right service instance",
    "start": "1775779",
    "end": "1781779"
  },
  {
    "text": "for a given partition then by an RPC call it will call into basically that",
    "start": "1781779",
    "end": "1788320"
  },
  {
    "text": "service and handover the data to that service and we service fabric the only",
    "start": "1788320",
    "end": "1794440"
  },
  {
    "text": "way to do inter-service communication is by exposing basically either an HTTP",
    "start": "1794440",
    "end": "1799990"
  },
  {
    "text": "call an RPC service like we did in the demo or a top CF service or any other",
    "start": "1799990",
    "end": "1805659"
  },
  {
    "text": "kind of what they call communication listener only then you can actually talk to a service so we can say in this",
    "start": "1805659",
    "end": "1813130"
  },
  {
    "text": "example two to that routing inside the cluster is done by the chocolate type and she said",
    "start": "1813130",
    "end": "1821320"
  },
  {
    "text": "well of course you all know that I like especially dark chocolate so in my",
    "start": "1821320",
    "end": "1826840"
  },
  {
    "text": "example I would enter basically on the front and to my order and then it would",
    "start": "1826840",
    "end": "1833080"
  },
  {
    "text": "determine that I ordered dark chocolate and would automatically route it to the",
    "start": "1833080",
    "end": "1838240"
  },
  {
    "text": "partition that on to the dark chocolate partition but then Sofia threw in the",
    "start": "1838240",
    "end": "1846760"
  },
  {
    "start": "1843000",
    "end": "1868000"
  },
  {
    "text": "grenades and she said well Mandy thanks for explaining this so carefully to Joe",
    "start": "1846760",
    "end": "1852970"
  },
  {
    "text": "but I'm getting shivers when I hear you talk about all this RPC style",
    "start": "1852970",
    "end": "1859470"
  },
  {
    "text": "communication between services this reminds me of a project that I've been",
    "start": "1859470",
    "end": "1865210"
  },
  {
    "text": "doing in my previous employer so we build this huge intertangled",
    "start": "1865210",
    "end": "1870930"
  },
  {
    "start": "1868000",
    "end": "1945000"
  },
  {
    "text": "interconnected RPC legacy mess at the time the term microservices wasn't kind",
    "start": "1870930",
    "end": "1877630"
  },
  {
    "text": "yet but I believe we did something similar but potentially horribly wrong so we had this dog WF order services",
    "start": "1877630",
    "end": "1885760"
  },
  {
    "text": "that had to connect to a slow third-party component and had to transactionally integrate with that",
    "start": "1885760",
    "end": "1893500"
  },
  {
    "text": "database the temporal and spatial coupling that we introduced was horrible",
    "start": "1893500",
    "end": "1899350"
  },
  {
    "text": "because every time the third-party service was no longer really responsive",
    "start": "1899350",
    "end": "1904660"
  },
  {
    "text": "or took a long time basically the customer facing latency on the front end",
    "start": "1904660",
    "end": "1910360"
  },
  {
    "text": "went through the roof top and started failing and she said well we couldn't",
    "start": "1910360",
    "end": "1916480"
  },
  {
    "text": "fulfill our Ashley's we actually lost orders we couldn't froth all the orders",
    "start": "1916480",
    "end": "1923200"
  },
  {
    "text": "and rode the also size we cap transaction is open for too long and the",
    "start": "1923200",
    "end": "1929020"
  },
  {
    "text": "database started timing out rolling back the data inserts people got fired and",
    "start": "1929020",
    "end": "1936220"
  },
  {
    "text": "then she said well in case you wonder it wasn't me who got fired actually I had the great idea which",
    "start": "1936220",
    "end": "1942640"
  },
  {
    "text": "saved the project well what we started to do we first introduced a",
    "start": "1942640",
    "end": "1948340"
  },
  {
    "start": "1945000",
    "end": "1971000"
  },
  {
    "text": "Curren programming into the game and this drastically reduced the memory footprint at our services hat and",
    "start": "1948340",
    "end": "1954909"
  },
  {
    "text": "allowed us to better satisfy the resources on our compute nodes but of",
    "start": "1954909",
    "end": "1961510"
  },
  {
    "text": "course asynchronous programming did not really solve the problem we had in this",
    "start": "1961510",
    "end": "1966640"
  },
  {
    "text": "project so we decided to decouple the third party behind the message queue at",
    "start": "1966640",
    "end": "1974049"
  },
  {
    "start": "1971000",
    "end": "2021000"
  },
  {
    "text": "the time used the ross pms mq service that was available on windows servers because but of course nowadays you will",
    "start": "1974049",
    "end": "1980799"
  },
  {
    "text": "be using something more hipster like rabid mq or ash storage use of Eris's",
    "start": "1980799",
    "end": "1985990"
  },
  {
    "text": "service bus and she said well this allowed us to throttle the request to",
    "start": "1985990",
    "end": "1991090"
  },
  {
    "text": "the third party services and allowed us to basically get a predictable load on",
    "start": "1991090",
    "end": "1996520"
  },
  {
    "text": "the service we apply this pattern",
    "start": "1996520",
    "end": "2001700"
  },
  {
    "text": "successfully in various areas of the system and he said well the fire and forgot nature of messaging actually made",
    "start": "2001700",
    "end": "2009120"
  },
  {
    "text": "our system scale much more she said and here is my proposal and a slice only a",
    "start": "2009120",
    "end": "2015960"
  },
  {
    "text": "slight modification of the architecture that mandy proposed we introduced",
    "start": "2015960",
    "end": "2023490"
  },
  {
    "start": "2021000",
    "end": "2103000"
  },
  {
    "text": "between the stateless front ends and the stateful middles here we introduced some",
    "start": "2023490",
    "end": "2029669"
  },
  {
    "text": "kind of a broker middleware like azor azor service bus and what will what will",
    "start": "2029669",
    "end": "2037230"
  },
  {
    "text": "happen is basically every time an order is created on the stateless front end we",
    "start": "2037230",
    "end": "2043169"
  },
  {
    "text": "will shuffle that order as a message into a queue on ash the response",
    "start": "2043169",
    "end": "2048570"
  },
  {
    "text": "rabbitmq if you're running on premises and then the broker middleware will make",
    "start": "2048570",
    "end": "2055500"
  },
  {
    "text": "sure that the the listeners the queue listeners that are running on the stateful instances will basically fetch",
    "start": "2055500",
    "end": "2062849"
  },
  {
    "text": "this order and process these orders in the right order with that we will no",
    "start": "2062849",
    "end": "2069300"
  },
  {
    "text": "longer lose orders it allows us the possibility to basically automatically scale up and down whatever we need we",
    "start": "2069300",
    "end": "2077040"
  },
  {
    "text": "can apply the competing consumer patterns on these queues we can throttling we can do retries and",
    "start": "2077040",
    "end": "2085169"
  },
  {
    "text": "it allows us the possibility to for example only open a transaction when we",
    "start": "2085170",
    "end": "2090510"
  },
  {
    "text": "take out a message out of the queue so we are building a much more reactive",
    "start": "2090510",
    "end": "2096830"
  },
  {
    "text": "architecture by introducing a queue into the game but then Peter snatches the",
    "start": "2096830",
    "end": "2106230"
  },
  {
    "start": "2103000",
    "end": "2151000"
  },
  {
    "text": "whiteboard markers and furiously furiously screams but that doesn't solve anything after taking some moments of",
    "start": "2106230",
    "end": "2114720"
  },
  {
    "text": "breath and the team colleagues reminding him that this is only an architectural",
    "start": "2114720",
    "end": "2119910"
  },
  {
    "text": "discussion and nothing has been set in stone he says I'm really sorry about my",
    "start": "2119910",
    "end": "2126570"
  },
  {
    "text": "outbursts but I recently my son is not sleeping really well and him in our bed",
    "start": "2126570",
    "end": "2132420"
  },
  {
    "text": "and putting his knees and elbows the whole time into my face and back really",
    "start": "2132420",
    "end": "2137820"
  },
  {
    "text": "didn't help with my sleep aberration but what I wanted to say is I completely or",
    "start": "2137820",
    "end": "2143610"
  },
  {
    "text": "we completely forgot the data partitioning part that we talked about so well where Spada partitioning we",
    "start": "2143610",
    "end": "2154230"
  },
  {
    "start": "2151000",
    "end": "2213000"
  },
  {
    "text": "essentially have multiple cue consumers running in all these partitions in the",
    "start": "2154230",
    "end": "2160260"
  },
  {
    "text": "cluster and with just a single cue what could happen is a dark-chocolate order",
    "start": "2160260",
    "end": "2166830"
  },
  {
    "text": "is in that queue but it gets picked up by the partition that is responsible for",
    "start": "2166830",
    "end": "2172470"
  },
  {
    "text": "storing the white choc chocolate types and you can imagine that this would lead",
    "start": "2172470",
    "end": "2179160"
  },
  {
    "text": "to inconsistencies in our business data and therefore would again lose",
    "start": "2179160",
    "end": "2185150"
  },
  {
    "text": "potentially orders and this would not make our business happy it will not make our customers happy and I think we would",
    "start": "2185150",
    "end": "2193440"
  },
  {
    "text": "we would start to see hats rolling in our engineering department so basically",
    "start": "2193440",
    "end": "2199950"
  },
  {
    "text": "we are back on square one right with queuing and we need some kind of smart",
    "start": "2199950",
    "end": "2205380"
  },
  {
    "text": "routing and/or cue partitioning to achieve hyper scale with data",
    "start": "2205380",
    "end": "2210810"
  },
  {
    "text": "partitioning so he said well what I would like to recommend is to have a dedicated queue per",
    "start": "2210810",
    "end": "2217800"
  },
  {
    "start": "2213000",
    "end": "2277000"
  },
  {
    "text": "chocolate type simple right so when an order is created on a stateless front-end the chocolate type is",
    "start": "2217800",
    "end": "2225210"
  },
  {
    "text": "basically used and used as an input into a partitioning function and that",
    "start": "2225210",
    "end": "2231839"
  },
  {
    "text": "partitioning function returns again the chocolate type and based on that by",
    "start": "2231839",
    "end": "2237270"
  },
  {
    "text": "using either a queue naming convention or something there is a routing layer",
    "start": "2237270",
    "end": "2242460"
  },
  {
    "text": "automatically knows that a dark-chocolate order needs to go to the queue that is responsible for dark",
    "start": "2242460",
    "end": "2249599"
  },
  {
    "text": "chocolate so we essentially have a uniquely addressable queue in this",
    "start": "2249599",
    "end": "2256200"
  },
  {
    "text": "example per chocolate type and only on the specific partition we have one",
    "start": "2256200",
    "end": "2263490"
  },
  {
    "text": "consumer that is responsible for that queue so we have a clear separation of",
    "start": "2263490",
    "end": "2269310"
  },
  {
    "text": "concerns from from a partitioning perspective also on the queues and well",
    "start": "2269310",
    "end": "2277950"
  },
  {
    "start": "2277000",
    "end": "2291000"
  },
  {
    "text": "he said and we what we did here we talked only about commands the command",
    "start": "2277950",
    "end": "2283290"
  },
  {
    "text": "pattern with messaging right we are basically entering orders and we sent them to an order receiver so we are also",
    "start": "2283290",
    "end": "2291210"
  },
  {
    "start": "2291000",
    "end": "2389000"
  },
  {
    "text": "because we're doing micro services and we like to be fancy we also do UI",
    "start": "2291210",
    "end": "2297030"
  },
  {
    "text": "composition that's what we need to do with microservices so the UI composites",
    "start": "2297030",
    "end": "2303119"
  },
  {
    "text": "in our order management micro service that is living on the stateless stateless front end will basically issue",
    "start": "2303119",
    "end": "2309990"
  },
  {
    "text": "a command or the chocolates to the order back in part which is receiving",
    "start": "2309990",
    "end": "2315420"
  },
  {
    "text": "disorders it's okay that the sender of a commands knows the destination of the",
    "start": "2315420",
    "end": "2322890"
  },
  {
    "text": "receiver because with command pattern we essentially have logical coupling but",
    "start": "2322890",
    "end": "2328260"
  },
  {
    "text": "that's okay because we belong to the same bounded context right we only introduce here a message queue for the",
    "start": "2328260",
    "end": "2333990"
  },
  {
    "text": "scaling aspects and throttling aspects and retry ability aspects so with that",
    "start": "2333990",
    "end": "2340619"
  },
  {
    "text": "we can basically temporarily decouple the sender from the receiver",
    "start": "2340619",
    "end": "2347069"
  },
  {
    "text": "in integration scenarios where for example ascender a message gender is not living inside the cluster it's still",
    "start": "2347069",
    "end": "2354539"
  },
  {
    "text": "okay that the sender knows the partitioning function of the receiver it",
    "start": "2354539",
    "end": "2360180"
  },
  {
    "text": "can just basically use the dark chocolate eye brown chocolate type or white choco type to to know to which Q",
    "start": "2360180",
    "end": "2367349"
  },
  {
    "text": "it needs to route to and then the right partition message receiver will pick it",
    "start": "2367349",
    "end": "2373289"
  },
  {
    "text": "up and he said well for simplicity reasons I would call this sender side",
    "start": "2373289",
    "end": "2378869"
  },
  {
    "text": "distribution because the sender determines by the partitioning function",
    "start": "2378869",
    "end": "2384229"
  },
  {
    "text": "where the message has to be routed to but then the PhD dudes from the team was",
    "start": "2384229",
    "end": "2393839"
  },
  {
    "start": "2389000",
    "end": "2413000"
  },
  {
    "text": "triggered by this all this talk about command patterns and he's here I started",
    "start": "2393839",
    "end": "2399420"
  },
  {
    "text": "acting like a smartass but while the team already was quite accustomed to him acting like a smartass so they let him",
    "start": "2399420",
    "end": "2406289"
  },
  {
    "text": "go and he said but with messaging we do not only have command patterns we have",
    "start": "2406289",
    "end": "2412170"
  },
  {
    "text": "much more for example we have events right and with events it's not possible",
    "start": "2412170",
    "end": "2419640"
  },
  {
    "start": "2413000",
    "end": "2423000"
  },
  {
    "text": "to apply sender side distribution let me explain why for example we have a",
    "start": "2419640",
    "end": "2425459"
  },
  {
    "start": "2423000",
    "end": "2600000"
  },
  {
    "text": "chocolate ordered event the publisher of the chocolate ordered events cannot",
    "start": "2425459",
    "end": "2432619"
  },
  {
    "text": "enforce a partitioning schema to its subscribers because well that would mean",
    "start": "2432619",
    "end": "2441569"
  },
  {
    "text": "in the end with publish/subscribe patents all subscribers were basically to have the same partitioning schema",
    "start": "2441569",
    "end": "2448410"
  },
  {
    "text": "like the publisher but with pops up basically the subscriber that receives",
    "start": "2448410",
    "end": "2454019"
  },
  {
    "text": "the event defines its own business processes that it triggered by this",
    "start": "2454019",
    "end": "2459239"
  },
  {
    "text": "event and therefore it also defines its own partitioning requirements or needs",
    "start": "2459239",
    "end": "2465449"
  },
  {
    "text": "on the data so it's always the subscriber of an event that defines how",
    "start": "2465449",
    "end": "2472829"
  },
  {
    "text": "data needs to be partitioned because only the subscriber knows basically the partitioning function of its own data",
    "start": "2472829",
    "end": "2481650"
  },
  {
    "text": "for pops-up semantics usually what we see is that the subscriber is basically",
    "start": "2481650",
    "end": "2487780"
  },
  {
    "text": "abstracted behind a logical thing or a logical cue or topic or exchange",
    "start": "2487780",
    "end": "2492970"
  },
  {
    "text": "depending on the cueing technology you are using the fact that the subscriber",
    "start": "2492970",
    "end": "2499570"
  },
  {
    "text": "like in this example is scaled out is not visible to the publisher so for",
    "start": "2499570",
    "end": "2505930"
  },
  {
    "text": "non-beta application scenarios usually only a single subscriber of that logical",
    "start": "2505930",
    "end": "2512260"
  },
  {
    "text": "subscription group will get the events so they basically act as competing",
    "start": "2512260",
    "end": "2517560"
  },
  {
    "text": "consumers from a subscription perspective so what can happen is when",
    "start": "2517560",
    "end": "2524010"
  },
  {
    "text": "for example when we publish in a chocolate ordered event and the shipping",
    "start": "2524010",
    "end": "2530260"
  },
  {
    "text": "service for example applies partitioning by zip codes it will basically end up on",
    "start": "2530260",
    "end": "2536290"
  },
  {
    "text": "any of these shipping queues right so",
    "start": "2536290",
    "end": "2541330"
  },
  {
    "text": "what what the the shipping service needs to do is when it takes out the message it basically needs to compute the",
    "start": "2541330",
    "end": "2547990"
  },
  {
    "text": "partition it needs to apply the partitioning function to the payloads determine the partition key and then",
    "start": "2547990",
    "end": "2553900"
  },
  {
    "text": "basically check whether it's already on the write partition if it's not on the write partition the subscriber itself",
    "start": "2553900",
    "end": "2560680"
  },
  {
    "text": "needs to internally reroute the message with one single hop to the right",
    "start": "2560680",
    "end": "2565990"
  },
  {
    "text": "destination queue because only the subscriber knows is internal routing",
    "start": "2565990",
    "end": "2572070"
  },
  {
    "text": "strategies so Peter said the PhD dude said well in order to to stay true with",
    "start": "2572070",
    "end": "2580000"
  },
  {
    "text": "the lingo that was introduced by Peter let's call this receiver side distribution because the receiver",
    "start": "2580000",
    "end": "2586750"
  },
  {
    "text": "distributes when necessary and he said well I know it's not an official term but anyway let's stick with this and",
    "start": "2586750",
    "end": "2595710"
  },
  {
    "text": "then he said well but it's not at all well we also have requests reply for",
    "start": "2595710",
    "end": "2601750"
  },
  {
    "start": "2600000",
    "end": "2671000"
  },
  {
    "text": "example sometimes we want to asynchronously confirm back to the user that an order was processed",
    "start": "2601750",
    "end": "2609999"
  },
  {
    "text": "it could be that we have a callback function on the stateless on the stateless front-end or we could it could",
    "start": "2609999",
    "end": "2616149"
  },
  {
    "text": "be that we have some kind of data that is created on the order sender on this",
    "start": "2616149",
    "end": "2621399"
  },
  {
    "text": "specific partition and what we want to do is you want to be able to reply back",
    "start": "2621399",
    "end": "2626649"
  },
  {
    "text": "to the sender that is living on a specific petition and in messaging there",
    "start": "2626649",
    "end": "2632409"
  },
  {
    "text": "is a pattern called the return address pattern so what we need to do here is essentially when the sender sends a",
    "start": "2632409",
    "end": "2638619"
  },
  {
    "text": "command to the receiver the sender needs to create the Heather called for example",
    "start": "2638619",
    "end": "2645909"
  },
  {
    "text": "reply address that contains the it's specific partition cue and then when",
    "start": "2645909",
    "end": "2653289"
  },
  {
    "text": "when the receiver processor takes out the message out of the queue it can",
    "start": "2653289",
    "end": "2658299"
  },
  {
    "text": "directly reply without needing to compute anything in that in that case",
    "start": "2658299",
    "end": "2664139"
  },
  {
    "text": "but then in complex business applications like we are going to build",
    "start": "2664139",
    "end": "2669309"
  },
  {
    "text": "we also have to think of process when access or sagas right so we might have",
    "start": "2669309",
    "end": "2675759"
  },
  {
    "start": "2671000",
    "end": "2734000"
  },
  {
    "text": "multiple aggregates and bounded contexts that need to be integrated together and",
    "start": "2675759",
    "end": "2680999"
  },
  {
    "text": "communicate it together sometimes we do that in the service itself or sometimes",
    "start": "2680999",
    "end": "2686739"
  },
  {
    "text": "we do that cross service by applying orchestration process managers for",
    "start": "2686739",
    "end": "2692469"
  },
  {
    "text": "complex business processes and well what what what I realized is basically a",
    "start": "2692469",
    "end": "2700169"
  },
  {
    "text": "process manager is nothing more than just an application of all these message",
    "start": "2700169",
    "end": "2706149"
  },
  {
    "text": "patterns that we already saw a process man actually has a state and that state lives potentially inside a",
    "start": "2706149",
    "end": "2713949"
  },
  {
    "text": "micro service that has a certain partitioning schema but it uses pops-up pattern request reply pattern and",
    "start": "2713949",
    "end": "2721059"
  },
  {
    "text": "potentially the command pattern to basically correlate multiple messages together into one business process so",
    "start": "2721059",
    "end": "2729219"
  },
  {
    "text": "that's not really much more complex and then the team decided to do a little POC",
    "start": "2729219",
    "end": "2737109"
  },
  {
    "start": "2734000",
    "end": "2825000"
  },
  {
    "text": "and if they decided to do it with an service bus and public service fabric they've chosen answer responds to",
    "start": "2737109",
    "end": "2743810"
  },
  {
    "text": "they didn't want to basically build infrastructure bits and pieces to connect to the queues and everything",
    "start": "2743810",
    "end": "2749120"
  },
  {
    "text": "like that so they thought it's good a nice queuing obstruction and that's what they came up with so basically they had",
    "start": "2749120",
    "end": "2755180"
  },
  {
    "text": "a stateless front-end called chocolate order which applies sender side distribution by using the chocolate type",
    "start": "2755180",
    "end": "2762590"
  },
  {
    "text": "and basically sending to dark brown or white chocolate queue and then they have",
    "start": "2762590",
    "end": "2767810"
  },
  {
    "text": "a stateless pack stateful back-end called chocolate order which has a chocolate order process manager or Saada",
    "start": "2767810",
    "end": "2775310"
  },
  {
    "text": "that applies sender and receiver side distribution and what it's doing it's",
    "start": "2775310",
    "end": "2782390"
  },
  {
    "text": "basically a chocolate order process manager is sending for example a chip",
    "start": "2782390",
    "end": "2787730"
  },
  {
    "text": "order command to the shipping service when it knows that for example the buyer's remorse period is over and then",
    "start": "2787730",
    "end": "2794750"
  },
  {
    "text": "the shipping servicing itself in this example to apply multiple partition",
    "start": "2794750",
    "end": "2800270"
  },
  {
    "text": "schemas is partitioned by using the zip code so they use they're saying well if",
    "start": "2800270",
    "end": "2805400"
  },
  {
    "text": "you have a shipping order zip code between zero and solution 3 0 0 0 then",
    "start": "2805400",
    "end": "2812420"
  },
  {
    "text": "we send it to the 33,000 queue and if it's something between 35,000 and 66,000",
    "start": "2812420",
    "end": "2820520"
  },
  {
    "text": "then we send it basically to the 66,000 queue and this is what the team came up",
    "start": "2820520",
    "end": "2827630"
  },
  {
    "start": "2825000",
    "end": "2840000"
  },
  {
    "text": "with let me show you a brief demo",
    "start": "2827630",
    "end": "2834400"
  },
  {
    "start": "2840000",
    "end": "2933000"
  },
  {
    "text": "so this is the the solution they came up with what we see here is we are now in",
    "start": "2843250",
    "end": "2849770"
  },
  {
    "text": "the home controller which is the controller that will issue orders let me briefly show you that that visually how",
    "start": "2849770",
    "end": "2857690"
  },
  {
    "text": "this looks like this is the awesome UI they came up with in their POC so it basically has three buttons and no an",
    "start": "2857690",
    "end": "2864920"
  },
  {
    "text": "order button button for charter dark-chocolate an order button for brown chocolate and an order bar button for",
    "start": "2864920",
    "end": "2871369"
  },
  {
    "text": "white chocolates whenever you click one of these buttons it will automatically issue an order of that specific type and",
    "start": "2871369",
    "end": "2878630"
  },
  {
    "text": "send it to the chocolate order back ends and this is how it looks like so they",
    "start": "2878630",
    "end": "2885319"
  },
  {
    "text": "have here an object called message session and they issue an order chocolate commands with a send",
    "start": "2885319",
    "end": "2891400"
  },
  {
    "text": "instruction what they what they did in this POC is they they realized since",
    "start": "2891400",
    "end": "2897589"
  },
  {
    "text": "they cannot inflate the partitioning schemas on the shipping service when they get back a reply or an event from",
    "start": "2897589",
    "end": "2904819"
  },
  {
    "text": "the shipping service the only thing that they can share is basically the order ID",
    "start": "2904819",
    "end": "2909980"
  },
  {
    "text": "nothing else so they decided to basically encode the chocolate type in",
    "start": "2909980",
    "end": "2916609"
  },
  {
    "text": "the order ID and they used a really silly but simple approach so basically the order ID becomes chocolate type",
    "start": "2916609",
    "end": "2923589"
  },
  {
    "text": "semicolon and then some kind of grids okay and on the receiving side on the",
    "start": "2923589",
    "end": "2936680"
  },
  {
    "start": "2933000",
    "end": "2995000"
  },
  {
    "text": "receiving side we have here a so called or the process manager or Saga so what",
    "start": "2936680",
    "end": "2944510"
  },
  {
    "text": "they need to declare is I am started by message or Dakota which is the command that will trigger in this case enter",
    "start": "2944510",
    "end": "2952160"
  },
  {
    "text": "response to create per order ID a new saga it will automatically do all the",
    "start": "2952160",
    "end": "2957589"
  },
  {
    "text": "concurrency control and multi-version concurrency the when multiple messages are concurrently handled it will",
    "start": "2957589",
    "end": "2963740"
  },
  {
    "text": "automatically roll back the state if necessary and retry the message and they",
    "start": "2963740",
    "end": "2969890"
  },
  {
    "text": "they were using the answer response service fabric persistence package which allows to either by using",
    "start": "2969890",
    "end": "2977029"
  },
  {
    "text": "mentions or by using explicit attributes to basically add an attribute to this process manager and say we want that the",
    "start": "2977029",
    "end": "2983630"
  },
  {
    "text": "state is reliably stored inside the service fabric collection that is called",
    "start": "2983630",
    "end": "2989029"
  },
  {
    "text": "orders and reliably and transactionally stored there that's it and then from the",
    "start": "2989029",
    "end": "2996799"
  },
  {
    "text": "perspective of actually handling that message it's a pretty simple so they",
    "start": "2996799",
    "end": "3002709"
  },
  {
    "text": "just basically implement this handle method where they get the commands and then they save the chocolate type and",
    "start": "3002709",
    "end": "3008259"
  },
  {
    "text": "they apply a timeout to itself which is the buyer's remorse period here in this",
    "start": "3008259",
    "end": "3013509"
  },
  {
    "text": "example of one second so after one second if the custom doesn't cancel the",
    "start": "3013509",
    "end": "3019059"
  },
  {
    "text": "order it basically come back comes back into this method and now you see here we",
    "start": "3019059",
    "end": "3024549"
  },
  {
    "text": "do not apply any partitioning logic to this to this code it's all just business",
    "start": "3024549",
    "end": "3029559"
  },
  {
    "text": "logic the partitioning is transparently done behind the scenes I will show you",
    "start": "3029559",
    "end": "3034599"
  },
  {
    "text": "you that later so here when the time is comes back when the buyers remorse period is over we just publish a",
    "start": "3034599",
    "end": "3041919"
  },
  {
    "text": "chocolate ordered and we do send locally and make payment commands and make",
    "start": "3041919",
    "end": "3049119"
  },
  {
    "text": "payment we again add the chocolate type here and now let me show you how you",
    "start": "3049119",
    "end": "3054819"
  },
  {
    "text": "handle this make payment commands so this is basically the message handler",
    "start": "3054819",
    "end": "3061719"
  },
  {
    "text": "that is responsible to make a payment and because the message handler itself",
    "start": "3061719",
    "end": "3066849"
  },
  {
    "text": "basically will be horizontal horizontal e-skills we will have multiple instances",
    "start": "3066849",
    "end": "3073599"
  },
  {
    "text": "per partition type of this message handler running but transparently behind the scenes to send local call we just",
    "start": "3073599",
    "end": "3080409"
  },
  {
    "text": "saw will automatically make sure that only the handler that is living in a",
    "start": "3080409",
    "end": "3086189"
  },
  {
    "text": "partition type for example dark chocolate when it's a dark chocolate order will receive that message and as",
    "start": "3086189",
    "end": "3096759"
  },
  {
    "text": "you can see here when we get a payment response we then do a send to the",
    "start": "3096759",
    "end": "3103150"
  },
  {
    "start": "3097000",
    "end": "3125000"
  },
  {
    "text": "shipping service off the ship order and what we do now here since this order ID",
    "start": "3103150",
    "end": "3108849"
  },
  {
    "text": "also has encoded in it the chocolate type we can just send the",
    "start": "3108849",
    "end": "3114180"
  },
  {
    "text": "sheep order with the order ID in here a zip code it's a random number between 0",
    "start": "3114180",
    "end": "3119250"
  },
  {
    "text": "and 99 thousand we send it over and then on the shipping order handler which",
    "start": "3119250",
    "end": "3127049"
  },
  {
    "start": "3125000",
    "end": "3160000"
  },
  {
    "text": "lives in another service which has its own data partitioning schema which just handled that message and it will then",
    "start": "3127049",
    "end": "3134250"
  },
  {
    "text": "publish in order shipped and as you can see because it's still related to the ordered vocabulary it will just reuse",
    "start": "3134250",
    "end": "3141510"
  },
  {
    "text": "the order ID and now we have just seen the whole process of chocolate ordering",
    "start": "3141510",
    "end": "3147420"
  },
  {
    "text": "and now let's dive into how we actually apply apply the partitioning partitioning is not contained in the",
    "start": "3147420",
    "end": "3155789"
  },
  {
    "text": "business logic it is basically part of the routing infrastructure and let me",
    "start": "3155789",
    "end": "3161819"
  },
  {
    "start": "3160000",
    "end": "3313000"
  },
  {
    "text": "show you an example of the front ins where we apply the the pattern of sender",
    "start": "3161819",
    "end": "3168450"
  },
  {
    "text": "side distribution so what we use here is basically because we belong to the same bounded context we use the service",
    "start": "3168450",
    "end": "3175770"
  },
  {
    "text": "partition resolver to essentially resolve the address of the top of the back end processing service and we tell",
    "start": "3175770",
    "end": "3183150"
  },
  {
    "text": "the service partition resolver please give me all the partitions that that this service has and then we tell it",
    "start": "3183150",
    "end": "3189809"
  },
  {
    "text": "well let's do some routing internally and first of all we we tell this",
    "start": "3189809",
    "end": "3195470"
  },
  {
    "text": "endpoints that we'll be leaving in a stateless instance we tell it whenever",
    "start": "3195470",
    "end": "3201170"
  },
  {
    "text": "for this destination endpoint chocolate order which is a logical queue we will",
    "start": "3201170",
    "end": "3206460"
  },
  {
    "text": "have multiple partitions and what enter response in this example will do it will automatically create basically a routing",
    "start": "3206460",
    "end": "3213660"
  },
  {
    "text": "table internally and whenever we send the commands it will automatically then",
    "start": "3213660",
    "end": "3219059"
  },
  {
    "text": "click the write partition not not fully automatic we actually have to tell its",
    "start": "3219059",
    "end": "3225270"
  },
  {
    "text": "how we derive the partitioning function that's what we do here we basically say ok whenever this type whenever you sign",
    "start": "3225270",
    "end": "3233279"
  },
  {
    "text": "sent this type please use on this message type the chocolate ID property to determine the",
    "start": "3233279",
    "end": "3240420"
  },
  {
    "text": "partition key so when we set the chocolates type property to dark chocolate it will then take this",
    "start": "3240420",
    "end": "3247180"
  },
  {
    "text": "and then basically use this internal routing table that we created here to basically take dark chocolates to the",
    "start": "3247180",
    "end": "3254530"
  },
  {
    "text": "destination and automatically route it to the right thing and we apply this",
    "start": "3254530",
    "end": "3260010"
  },
  {
    "text": "MobileMe for center side distribution but also for receiver side distribution",
    "start": "3260010",
    "end": "3265450"
  },
  {
    "text": "for example internally in the chocolate order back ends where we say okay whenever we have an order shipped and",
    "start": "3265450",
    "end": "3272460"
  },
  {
    "text": "now we no order ship is not published by us but we are a subscriber but we know",
    "start": "3272460",
    "end": "3277930"
  },
  {
    "text": "that we actually sent in the order ID which contains the information that allows us met back to our partition so",
    "start": "3277930",
    "end": "3284380"
  },
  {
    "text": "we basically tell it it's a bit brute force because it's a POC so basically they say okay we split by the semi",
    "start": "3284380",
    "end": "3291610"
  },
  {
    "text": "column we take out the order ID the grid and we take the partition pipe that is",
    "start": "3291610",
    "end": "3297040"
  },
  {
    "text": "encoded in this ID and then we just use this chocolate type to again basically",
    "start": "3297040",
    "end": "3302680"
  },
  {
    "text": "internally reroute whenever it is necessary and and last but not least we",
    "start": "3302680",
    "end": "3313360"
  },
  {
    "start": "3313000",
    "end": "3340000"
  },
  {
    "text": "do the same for the shipping and this is just an example to show how complex this",
    "start": "3313360",
    "end": "3318550"
  },
  {
    "text": "partitioning logic can be if necessary again it's all infrastructure concern we basically turn the ship order string",
    "start": "3318550",
    "end": "3325780"
  },
  {
    "text": "into an int and then we automatically picked the right partition Heike based",
    "start": "3325780",
    "end": "3333130"
  },
  {
    "text": "on the zip code and return it to the partitioning function and that's it and",
    "start": "3333130",
    "end": "3339060"
  },
  {
    "text": "when we run this let let it's already deployed deployed in the cluster we then",
    "start": "3339060",
    "end": "3347230"
  },
  {
    "text": "actually see this life happening this is the Diagnostics window I might need to",
    "start": "3347230",
    "end": "3354040"
  },
  {
    "text": "zoom in a little bit let's let's order dark chocolates and at some point in",
    "start": "3354040",
    "end": "3359470"
  },
  {
    "text": "time we can essentially see zoom in a little bit that's probably not can you",
    "start": "3359470",
    "end": "3366790"
  },
  {
    "text": "see that in behind okay or we see we got the ordered chocolates and the partition",
    "start": "3366790",
    "end": "3372130"
  },
  {
    "text": "key was most dark chocolates and then the order process then actually picked",
    "start": "3372130",
    "end": "3377290"
  },
  {
    "text": "it up on the dark chocolate partition it sends our buyer's remorse period command to",
    "start": "3377290",
    "end": "3383830"
  },
  {
    "text": "itself a timeout it received it or STS receiver side distribution it received",
    "start": "3383830",
    "end": "3389560"
  },
  {
    "text": "it on the wrong partition and it applied receiver side distribution and send it",
    "start": "3389560",
    "end": "3396310"
  },
  {
    "text": "to the right dark chocolate partition it sends out the make payment on the dark chocolate",
    "start": "3396310",
    "end": "3401650"
  },
  {
    "text": "to the dark chocolate order receives to make payments on the right partition the",
    "start": "3401650",
    "end": "3406930"
  },
  {
    "text": "partitioned dark and then the payment process goes on and then the ship order",
    "start": "3406930",
    "end": "3412780"
  },
  {
    "text": "handle basically receives it on the wrong partition and automatically as you",
    "start": "3412780",
    "end": "3418510"
  },
  {
    "text": "can see here forwards it to the right partition so that it's it's handled on",
    "start": "3418510",
    "end": "3424390"
  },
  {
    "text": "the partition which is responsible to manage that zip code I know this was",
    "start": "3424390",
    "end": "3432340"
  },
  {
    "text": "potentially a bit fast but I will give you the links to to the demo so that you",
    "start": "3432340",
    "end": "3438400"
  },
  {
    "start": "3438000",
    "end": "3503000"
  },
  {
    "text": "can try it out yourself so brief recap well it's always a bit more complex than",
    "start": "3438400",
    "end": "3446350"
  },
  {
    "text": "Microsoft tells you like the team architects did show that it's so easy to just do right right click publish and",
    "start": "3446350",
    "end": "3453970"
  },
  {
    "text": "everything works fine even with the state stateless services as soon as you start doing stateful services you",
    "start": "3453970",
    "end": "3460240"
  },
  {
    "text": "basically need to make smart routing decisions based on on the partitioning you are going to use stateful",
    "start": "3460240",
    "end": "3468130"
  },
  {
    "text": "computation with low latency like I said requires smart routing and smart routing decisions but I think that with service",
    "start": "3468130",
    "end": "3475990"
  },
  {
    "text": "fabric stateless and also stateful services combined with messaging you",
    "start": "3475990",
    "end": "3481390"
  },
  {
    "text": "basically get the best out of two worlds you can decide wherever it fits to just apply the RPC communication style that",
    "start": "3481390",
    "end": "3488560"
  },
  {
    "text": "is available inside service fabric and use the service partition resolver or where you need basically ordering of",
    "start": "3488560",
    "end": "3495400"
  },
  {
    "text": "commands offloading throttling for example you can apply message patterns",
    "start": "3495400",
    "end": "3501040"
  },
  {
    "text": "and well if it was a bit too fast and you're curious and if you want to know a",
    "start": "3501040",
    "end": "3507550"
  },
  {
    "text": "little bit more about how answer response works you can go to this URL there is a tutorial which explain how",
    "start": "3507550",
    "end": "3514280"
  },
  {
    "text": "which explains how an service bus works you can download it and try it out it has multiple lessons and if you want to",
    "start": "3514280",
    "end": "3522830"
  },
  {
    "text": "know more about how this how this example I just briefly showed works you",
    "start": "3522830",
    "end": "3528530"
  },
  {
    "text": "can go either to to this URI which gives a lot of diagrams and text and explains",
    "start": "3528530",
    "end": "3534440"
  },
  {
    "text": "how the azure service fabric routing works with with engine response of course the same patterns that I showed",
    "start": "3534440",
    "end": "3541100"
  },
  {
    "text": "here they they are universally applicable also to to Azure service bus",
    "start": "3541100",
    "end": "3547160"
  },
  {
    "text": "itself if you're just doing SDK native SDK if you're using mass transit or any other service bus you can apply the same",
    "start": "3547160",
    "end": "3553580"
  },
  {
    "text": "patterns as well but we provide a sample out-of-the-box and if you want to try it",
    "start": "3553580",
    "end": "3559040"
  },
  {
    "start": "3558000",
    "end": "3600000"
  },
  {
    "text": "out yourself you can download the slides the links and all the codes here on my",
    "start": "3559040",
    "end": "3565310"
  },
  {
    "text": "repository key TOCOM slash on a marble microservices service fabric feel free",
    "start": "3565310",
    "end": "3572000"
  },
  {
    "text": "to start a repo that always helps to promote the stuff we are doing and if",
    "start": "3572000",
    "end": "3577220"
  },
  {
    "text": "you have questions feel free to shoot them now any questions yeah yep",
    "start": "3577220",
    "end": "3585880"
  },
  {
    "text": "am I using some kind of consistency patterns too okay",
    "start": "3592030",
    "end": "3602180"
  },
  {
    "text": "so service fabric reliable collections and that was using the our offering that",
    "start": "3602180",
    "end": "3607370"
  },
  {
    "text": "allows to store the stating reliable collections is a transactional system that has concurrency control built in so",
    "start": "3607370",
    "end": "3616250"
  },
  {
    "text": "basically when we have multiple concurrent operations that try to store the same saga what service fabric will",
    "start": "3616250",
    "end": "3623150"
  },
  {
    "text": "tell us that someone else changed the states so basically one loads the state at point one another one loads it at",
    "start": "3623150",
    "end": "3632120"
  },
  {
    "text": "point three right and then the the one at point one will basically try to save",
    "start": "3632120",
    "end": "3639260"
  },
  {
    "text": "it will try to save it and will give a basically in concurrency exception that bubbles up and what we do is we roll",
    "start": "3639260",
    "end": "3645890"
  },
  {
    "text": "the transaction and then it will be retried and the next one will be successful but it's it relies on a",
    "start": "3645890",
    "end": "3654380"
  },
  {
    "text": "retries to do the concurrency control",
    "start": "3654380",
    "end": "3659049"
  },
  {
    "text": "yes yes well there are different and Jimmy Bogle wrote an excellent blog post",
    "start": "3659740",
    "end": "3665150"
  },
  {
    "text": "about different types of process managers and of course if you have a process manager that needs to integrate",
    "start": "3665150",
    "end": "3670960"
  },
  {
    "text": "potentially thousands of messages that will be concurrently fired off and then correlated back to the same process",
    "start": "3670960",
    "end": "3677480"
  },
  {
    "text": "manager if you apply this pattern and you have a lot of concurrency you will a little basically going to a lot of",
    "start": "3677480",
    "end": "3683500"
  },
  {
    "text": "exceptions and retries so in that case you need to apply other patterns then",
    "start": "3683500",
    "end": "3688700"
  },
  {
    "text": "it's not the right thing to do but of course the solution works for most",
    "start": "3688700",
    "end": "3693890"
  },
  {
    "text": "business cases but not for highly concurrent updates any other question",
    "start": "3693890",
    "end": "3701230"
  },
  {
    "text": "yeah you get the chocolate by the way yeah",
    "start": "3701230",
    "end": "3706870"
  },
  {
    "text": "okay so you said wouldn't it be more efficient to have actors listening on",
    "start": "3728220",
    "end": "3734440"
  },
  {
    "text": "those cues okay okay well well for",
    "start": "3734440",
    "end": "3745420"
  },
  {
    "text": "example if using a service fabric actor model they are also partitioned right",
    "start": "3745420",
    "end": "3751180"
  },
  {
    "text": "and an actor has a certain life time and the nectar is activated based on an RPC",
    "start": "3751180",
    "end": "3757269"
  },
  {
    "text": "color message and then live for that brief moment of time and then basically gets decommissioned by the actor runtime",
    "start": "3757269",
    "end": "3765009"
  },
  {
    "text": "with queuing systems you need a stateful or sorry a persistent connection to the cue so that you can basically pick up",
    "start": "3765009",
    "end": "3772900"
  },
  {
    "text": "messages so you need some kind of infrastructure service that knows about the partitioning schema of the micro",
    "start": "3772900",
    "end": "3780880"
  },
  {
    "text": "service that is listening on one or multiple queues and then basically shuffles off messages so I'm not sure if",
    "start": "3780880",
    "end": "3787720"
  },
  {
    "text": "I understand your question okay I have",
    "start": "3787720",
    "end": "3795279"
  },
  {
    "text": "an idea let's let's talk together after my talk okay and because we also have other people have a question then we can",
    "start": "3795279",
    "end": "3800799"
  },
  {
    "text": "have a deeper conversation about this topic cool any other questions",
    "start": "3800799",
    "end": "3806339"
  },
  {
    "text": "you're asking can you scale partitions",
    "start": "3816320",
    "end": "3823940"
  },
  {
    "text": "okay so what what you define basically you your picking in service fabric",
    "start": "3831890",
    "end": "3837060"
  },
  {
    "text": "you're picking a partitioning schema let's say you're using the range partition or the name partition with dark white notice let's say the the",
    "start": "3837060",
    "end": "3845520"
  },
  {
    "text": "range partition from 0 to 300 and then you're saying I want a hundred partitions for example so what it means",
    "start": "3845520",
    "end": "3852780"
  },
  {
    "text": "basically then zero to three is in one partition 4 to 4 to 6 is another",
    "start": "3852780",
    "end": "3857880"
  },
  {
    "text": "partition and so on and so forth but this defines how many instances of that",
    "start": "3857880",
    "end": "3863280"
  },
  {
    "text": "of that service of that partition service you will be having in your cluster that's your scale unit that's",
    "start": "3863280",
    "end": "3870240"
  },
  {
    "text": "why I said you have to think about the number of partitions upfront right because what happens is when you start",
    "start": "3870240",
    "end": "3877170"
  },
  {
    "text": "with a 5 node cluster you will have a hundred instances in that cluster so",
    "start": "3877170",
    "end": "3883080"
  },
  {
    "text": "that means you only have a process per node right so we will basically have 20",
    "start": "3883080",
    "end": "3889290"
  },
  {
    "text": "instances per node all right and then when you scale out you're saying oh we",
    "start": "3889290",
    "end": "3894510"
  },
  {
    "text": "have more demand you basically add more machines let's say you add five more machines then you have ten and what then",
    "start": "3894510",
    "end": "3899910"
  },
  {
    "text": "service fabric does it automatically balances these 100 instances so basically it takes ten instances from",
    "start": "3899910",
    "end": "3906450"
  },
  {
    "text": "each node and spreads them out to the other nodes that you just joined into the cluster I hope that answers your",
    "start": "3906450",
    "end": "3912930"
  },
  {
    "text": "question okay but what you I mean you cannot like I said you cannot change the",
    "start": "3912930",
    "end": "3920100"
  },
  {
    "text": "partitioning scheme on the fly yet right",
    "start": "3920100",
    "end": "3924830"
  },
  {
    "text": "any other questions yep [Music]",
    "start": "3926060",
    "end": "3933170"
  },
  {
    "text": "upgrading the reliable collections okay so the question was do I have any",
    "start": "3933490",
    "end": "3938750"
  },
  {
    "text": "experience with upgrades and reliable collections yes I have experience well",
    "start": "3938750",
    "end": "3943760"
  },
  {
    "text": "what well we have to do this because we provide this saga persistence that stores state into reliable collection so",
    "start": "3943760",
    "end": "3951320"
  },
  {
    "text": "the reliable collections right now but this reduce the data contracts your lives right exactly and of course there",
    "start": "3951320",
    "end": "3960260"
  },
  {
    "text": "is I think there are even books written to that topic from the top CF world the data contract serializer has its own",
    "start": "3960260",
    "end": "3966860"
  },
  {
    "text": "benefits and drawbacks and there is a whole set of articles on MSN which talks",
    "start": "3966860",
    "end": "3972620"
  },
  {
    "text": "about data contract versioning so you have to apply the whole ordering of data",
    "start": "3972620",
    "end": "3977690"
  },
  {
    "text": "members you have to apply a namespace to the data contract you have to implement",
    "start": "3977690",
    "end": "3982910"
  },
  {
    "text": "this I extensible interface thing all that stuff you have to do it but you can",
    "start": "3982910",
    "end": "3988850"
  },
  {
    "text": "use a different serialize if you want to",
    "start": "3988850",
    "end": "3993340"
  },
  {
    "text": "okay and then three tries yeah yeah one",
    "start": "4001950",
    "end": "4015160"
  },
  {
    "text": "what what you can do is based on the application the script description you can for example deploy a pre hookup",
    "start": "4015160",
    "end": "4021910"
  },
  {
    "text": "process that does a partial migration on that partition and then only then the actual service kicks in for example and",
    "start": "4021910",
    "end": "4029050"
  },
  {
    "text": "that will be applied on while doing the rolling upgrade as well",
    "start": "4029050",
    "end": "4035069"
  },
  {
    "text": "okay yeah take your chocolates yeah",
    "start": "4040200",
    "end": "4045340"
  },
  {
    "text": "thanks [Applause]",
    "start": "4045340",
    "end": "4052939"
  }
]