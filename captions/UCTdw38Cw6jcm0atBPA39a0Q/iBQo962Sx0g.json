[
  {
    "text": "how symbols work and why we need them my name is anes I work uh at asium",
    "start": "3120",
    "end": "9880"
  },
  {
    "text": "down in Oslo here in Norway we are a startup designing a new and more efficient U general purpose CPU which I",
    "start": "9880",
    "end": "16960"
  },
  {
    "text": "think is pretty cool I started there a few months ago um I mainly work on our",
    "start": "16960",
    "end": "22240"
  },
  {
    "text": "simulator so we're simulating this CPU and doing performance modeling and stuff so uh I mainly write C++ all day uh",
    "start": "22240",
    "end": "30000"
  },
  {
    "text": "these days which is uh cool I also run this website called cppp quiz.org uh it's a C+ quiz and uh if",
    "start": "30000",
    "end": "37800"
  },
  {
    "text": "you're into that kind of thing there will be a C++ quiz um at the party tonight so please join if you if you",
    "start": "37800",
    "end": "43520"
  },
  {
    "text": "like that kind of stuff just having some fun with the language uh if you're not into that kind of stuff then you can",
    "start": "43520",
    "end": "49280"
  },
  {
    "text": "still please come to the party just Jo don't join the quiz uh of course when you have a talk",
    "start": "49280",
    "end": "55760"
  },
  {
    "text": "you have to plug your book so I have this book coming out uh on pragmatic programmers uh in not too long the cover",
    "start": "55760",
    "end": "61399"
  },
  {
    "text": "was already last night so if you're into like figuring out how stuff works under the hood I think there's a lot of cool",
    "start": "61399",
    "end": "67439"
  },
  {
    "text": "details in this one right we are going to talk about how",
    "start": "67439",
    "end": "73200"
  },
  {
    "text": "symbols work and why we need them and um we're going to talk about static",
    "start": "73200",
    "end": "80600"
  },
  {
    "text": "versus Dynamic symbols binding versus visibility and how that relates to the concept of linkage that we have in CN",
    "start": "80600",
    "end": "87600"
  },
  {
    "text": "C++ linking a bit about that weak symbols what are those why do we",
    "start": "87600",
    "end": "92799"
  },
  {
    "text": "have them how symbols work with templates inline variables where do these symbols exist",
    "start": "92799",
    "end": "100520"
  },
  {
    "text": "and how do you view them why do I have three symbol tables can I strip some of these symbols",
    "start": "100520",
    "end": "107920"
  },
  {
    "text": "like what happens if I do that and who gets a symbol like which things do you",
    "start": "107920",
    "end": "113159"
  },
  {
    "text": "really need symbols for and why do we want to learn about",
    "start": "113159",
    "end": "118439"
  },
  {
    "text": "these things the most obvious thing is if you're investigating some Linker errors so that can be simple stuff like",
    "start": "118439",
    "end": "125320"
  },
  {
    "text": "undefined reference to some symbol or like you have a duplicate of some symbol",
    "start": "125320",
    "end": "130520"
  },
  {
    "text": "or it can be a lot more intricate where you actually manage to introduce a duplicate of a symbol than sometimes",
    "start": "130520",
    "end": "135920"
  },
  {
    "text": "this code path reaches that one and the other code path reaches that one and like you have to debug this and maybe actually rearchitecturing",
    "start": "135920",
    "end": "144200"
  },
  {
    "text": "all sorts of interesting stuff that's a lot easier to debug uh once you know these things so it's interesting if you're",
    "start": "149840",
    "end": "156800"
  },
  {
    "text": "consuming libraries and it's more interesting if you're shipping binaries so especially",
    "start": "156800",
    "end": "161840"
  },
  {
    "text": "if you're shipping libraries this is use useful to know but also actually if you're shipping",
    "start": "161840",
    "end": "167000"
  },
  {
    "text": "executables personally my favorite thing about this is just understanding how my binaries work that's why I made this",
    "start": "167000",
    "end": "174040"
  },
  {
    "text": "talk as well because I didn't know a lot of this stuff and it's just super interesting to figure out how stuff works I think",
    "start": "174040",
    "end": "181760"
  },
  {
    "text": "um so um yeah first a couple of uh",
    "start": "184760",
    "end": "191200"
  },
  {
    "text": "things yeah so everything I say here is going to be about elf symbol so that's",
    "start": "191200",
    "end": "196599"
  },
  {
    "text": "the executable and linkable format that we use on Linux and then Windows has a bunch of similar things but don't think",
    "start": "196599",
    "end": "205040"
  },
  {
    "text": "that stuff from this talk directly applies on Windows even though it's probably a useful background if you want to look into Windows later but it's a",
    "start": "205040",
    "end": "211920"
  },
  {
    "text": "different thing everything does apply both to C and C++ though so I think it's cool this",
    "start": "211920",
    "end": "217560"
  },
  {
    "text": "year that we have a strong C track I'm mostly a C++ guy but most of this stuff applies to to both C and C++ except for",
    "start": "217560",
    "end": "225120"
  },
  {
    "text": "some C specifics like I'm going to mention templates for instance and yeah one final note if you",
    "start": "225120",
    "end": "231599"
  },
  {
    "text": "have any questions about anything that's up on the slides uh please ask right away so we can discuss it while we're on",
    "start": "231599",
    "end": "237319"
  },
  {
    "text": "the topic um if you have more like I would like to know more about this these thing kind of questions and please P",
    "start": "237319",
    "end": "243239"
  },
  {
    "text": "those to the end so we are sure to get through everything and to figure out all of this",
    "start": "243239",
    "end": "248879"
  },
  {
    "text": "stuff uh before I start to like talk about in detail what a symbol is and how it works uh I have a motiv I want to",
    "start": "248879",
    "end": "255959"
  },
  {
    "text": "have a motivating example to motivate these questions like what are symbols",
    "start": "255959",
    "end": "261040"
  },
  {
    "text": "and what are symbols for and my motivating example is uh this",
    "start": "261040",
    "end": "266440"
  },
  {
    "text": "one I have this values. C has a global variable called value with the value 42",
    "start": "266440",
    "end": "272759"
  },
  {
    "text": "it's constant initialized to 42 and then I have um a get value function which just returns this value so very simple",
    "start": "272759",
    "end": "281160"
  },
  {
    "text": "stuff I also have main. C which just includes values. H to get to the",
    "start": "281160",
    "end": "286320"
  },
  {
    "text": "Declaration of of get value that we just assume exists somewhere and Main just calls get value and returns so this",
    "start": "286320",
    "end": "293000"
  },
  {
    "text": "program should then just exit with 42 and in C and C++ you have this",
    "start": "293000",
    "end": "299639"
  },
  {
    "text": "separate compilation model right so we can take all of your C files or CPP files and compile them completely",
    "start": "299639",
    "end": "304759"
  },
  {
    "text": "independently of the others so main. C when I compile that I can't see what's inside of values. C everything if you",
    "start": "304759",
    "end": "311800"
  },
  {
    "text": "have enough course you could in theory compile your entire project in parallel right so the compiler is going to take",
    "start": "311800",
    "end": "318039"
  },
  {
    "text": "main. C and then it's going to just copy paste values. H in here and compile that",
    "start": "318039",
    "end": "323680"
  },
  {
    "text": "and that's what we call a translation unit so the C file with all the includes included and stuff then that's a translation unit and it's entirely",
    "start": "323680",
    "end": "330360"
  },
  {
    "text": "independent of all of your other translation units when they're compiled so these are going to get",
    "start": "330360",
    "end": "336479"
  },
  {
    "text": "compiled into some object files has some arbitrary bites in them so values. C",
    "start": "336479",
    "end": "341960"
  },
  {
    "text": "turns into values. o and there's a really big lag on the projector that's very challenging okay I have to deal",
    "start": "341960",
    "end": "349800"
  },
  {
    "text": "with that main do values. c turns into values. o main. c turns into main. o and",
    "start": "349800",
    "end": "355440"
  },
  {
    "text": "then I've colorcoded it a bit here just trying to illustrate that there's some data that's like the purple purple part and some code that's a green part and",
    "start": "355440",
    "end": "362120"
  },
  {
    "text": "this these are not necessarily real bites this just for illustration showing that there's some data in here and",
    "start": "362120",
    "end": "367720"
  },
  {
    "text": "there's some code in here and then probably I have some",
    "start": "367720",
    "end": "372960"
  },
  {
    "text": "library that I use as well maybe it's my library maybe it's a third party thing but at least I have all these object",
    "start": "372960",
    "end": "378240"
  },
  {
    "text": "files that have been compiled I have this library and then I want to make an executable out of this so we're still",
    "start": "378240",
    "end": "384840"
  },
  {
    "text": "talking only about static linking here now so I want to link an executable called the program from all of this",
    "start": "384840",
    "end": "391240"
  },
  {
    "text": "stuff um so what the Linker does then it's going to take all of these purple",
    "start": "391240",
    "end": "396319"
  },
  {
    "text": "data sections and just squash them together into one big data section in your executable and it's going to take",
    "start": "396319",
    "end": "401759"
  },
  {
    "text": "all of your machine code which is lives in What's called the text section that's where the code goes take all of these",
    "start": "401759",
    "end": "407240"
  },
  {
    "text": "and just squash them into one big text section in your program and then you're done you can run your",
    "start": "407240",
    "end": "413680"
  },
  {
    "text": "program but the thing here with a separate compilation model is that when I compile main. C into Main o I don't",
    "start": "413680",
    "end": "421120"
  },
  {
    "text": "actually know where get value is right I have to this the compiler have to generate some code to jump over to",
    "start": "421120",
    "end": "428120"
  },
  {
    "text": "wherever the get value function is but I don't know that because I just I've only see in the Declaration I don't know",
    "start": "428120",
    "end": "433240"
  },
  {
    "text": "where it is so I can't know when I compile this where get value",
    "start": "433240",
    "end": "440240"
  },
  {
    "text": "is so if I have a look at values. o um this is still the same values. C here I",
    "start": "443479",
    "end": "449639"
  },
  {
    "text": "can dump it with a tool called OB jump so OB jump is a useful tool to look at all sorts of stuff about your binaries",
    "start": "449639",
    "end": "456440"
  },
  {
    "text": "so I can one of the things I can do to look inside of uh values. o the the object file from values. C is just let's",
    "start": "456440",
    "end": "463720"
  },
  {
    "text": "just jump dump the bytes in there let's see what's in there like this isn't a very useful tool when you're actually",
    "start": "463720",
    "end": "469240"
  },
  {
    "text": "investigating stuff but just just for illustration let's do OB j-s to just list the contents of the the",
    "start": "469240",
    "end": "475280"
  },
  {
    "text": "sections it starts by saying the file format is ef64 x86 64 so that's just the",
    "start": "475280",
    "end": "481800"
  },
  {
    "text": "elf that's a binary format we use on Linux and it's on a 64-bit system here then it says the contents of the",
    "start": "481800",
    "end": "489599"
  },
  {
    "text": "text section so I mentioned the text section is where of all your where all your machine code goes so these are the",
    "start": "489599",
    "end": "494680"
  },
  {
    "text": "bites that are going to be put on your CPU eventually and I happen to know well it say the address here and then I",
    "start": "494680",
    "end": "501840"
  },
  {
    "text": "happen to know 55 is push RBP and C3 is red and that's the first and the last instruction in my function so in the",
    "start": "501840",
    "end": "508680"
  },
  {
    "text": "text section you only have these bytes just the bytes that go in the CPU and no metadata or",
    "start": "508680",
    "end": "514159"
  },
  {
    "text": "anything like that in the data section we have this uh",
    "start": "514159",
    "end": "520880"
  },
  {
    "text": "this 32-bit value 2 a so 2 a is hex for 42 so we have just these four bytes for",
    "start": "520880",
    "end": "527440"
  },
  {
    "text": "uh this data that's all that is in the data section and just dumping the bites",
    "start": "527440",
    "end": "534360"
  },
  {
    "text": "that's not the most uh useful way to look at an object file so another tool I can use to look into my my object file",
    "start": "534360",
    "end": "541079"
  },
  {
    "text": "here um or another way to use up jump is to pass it-d to get the",
    "start": "541079",
    "end": "546959"
  },
  {
    "text": "disassembly um there's going to be a little bit of assembly in this talk uh but you don't need to know any of that",
    "start": "546959",
    "end": "554000"
  },
  {
    "text": "um I have a link at the end to talk about like more an introduction to assembly for for these kinds of purposes",
    "start": "554000",
    "end": "559240"
  },
  {
    "text": "for like calling functions and stuff like that so again it has this header saying",
    "start": "559240",
    "end": "564760"
  },
  {
    "text": "it's an l64 thing and this is the text section and then it goes here are uh the",
    "start": "564760",
    "end": "570600"
  },
  {
    "text": "instructions in val Soo so we have the same bytes that we saw like from 55 to C3 these are all the bytes and it's",
    "start": "570600",
    "end": "577360"
  },
  {
    "text": "grouped it by instruction and then it's disassembled it so 55 is push RBP and",
    "start": "577360",
    "end": "582880"
  },
  {
    "text": "then like we have these instructions here so here are the actual byes inside of values of O and here is like what",
    "start": "582880",
    "end": "589079"
  },
  {
    "text": "that would be in assembly there's no assembly in the object file it's just object translating it so I can read what's going on in",
    "start": "589079",
    "end": "595519"
  },
  {
    "text": "here and object is also nice enough to show me that well this is the get value",
    "start": "595519",
    "end": "600920"
  },
  {
    "text": "function and but that's not in here this is just a machine code but still obj is able to show me that well these bites",
    "start": "600920",
    "end": "606920"
  },
  {
    "text": "came from the get value function so then it's probably obvious by now that we need some sort of table",
    "start": "606920",
    "end": "613600"
  },
  {
    "text": "of symbols somewhere to for for OB jump to be able to show me this and for the Linker to figure stuff out there's uh we",
    "start": "613600",
    "end": "619560"
  },
  {
    "text": "need to have some symbols to find things and indeed there is there's a",
    "start": "619560",
    "end": "625680"
  },
  {
    "text": "symbol table and if I say to OB jump DT that means please show me the symbol table what are the symbols that are in",
    "start": "625680",
    "end": "631839"
  },
  {
    "text": "this object file again it has this header saying here's the symbol",
    "start": "631839",
    "end": "637079"
  },
  {
    "text": "table and this is easier to read from the right to the left so it starts saying I have a object called uh a",
    "start": "637079",
    "end": "644160"
  },
  {
    "text": "symbol called value and then it says it's four bytes big it lives in the data",
    "start": "644160",
    "end": "650760"
  },
  {
    "text": "section um it's an o that means it's an object as opposed to a function uh it's",
    "start": "650760",
    "end": "656480"
  },
  {
    "text": "Global I'll get back to what that means and it's at off set zero and it also says well there's this",
    "start": "656480",
    "end": "662839"
  },
  {
    "text": "get value function that we saw it's C in HEX byes big it's in the text section",
    "start": "662839",
    "end": "668399"
  },
  {
    "text": "where where all the machine code goes it's an F for function and it's also Global and it's also at offset zero so",
    "start": "668399",
    "end": "675360"
  },
  {
    "text": "these offsets are uh relative to the section so value is the first and actually only symbol in the data section",
    "start": "675360",
    "end": "681839"
  },
  {
    "text": "and get value is the first and only um symbol in in the text",
    "start": "681839",
    "end": "687959"
  },
  {
    "text": "section um but who uses OB jump to look at",
    "start": "687959",
    "end": "693120"
  },
  {
    "text": "symbols a couple actually yeah that's uh like 10% of the room that's more than I",
    "start": "693120",
    "end": "698240"
  },
  {
    "text": "expected what do the rest of us use we use NM so I can list the symbols with NM as",
    "start": "698240",
    "end": "704160"
  },
  {
    "text": "well and then it shows me get value has a capital t meaning it's in the text section and value has a capital D",
    "start": "704160",
    "end": "710959"
  },
  {
    "text": "meaning it's in the data section so NM is also a handy tool to just list the symbols that are in an object file and",
    "start": "710959",
    "end": "717160"
  },
  {
    "text": "then you can see a bit of information about them I can also run OB jump to list of",
    "start": "717160",
    "end": "722600"
  },
  {
    "text": "symbols in main. O which is the thing that calls this get it function or the get value",
    "start": "722600",
    "end": "728079"
  },
  {
    "text": "function and it says well here's main it's in the text section um it's f for",
    "start": "728079",
    "end": "734399"
  },
  {
    "text": "function and then it says I also have a symbol called get value but it's undefined right so when I compiled main",
    "start": "734399",
    "end": "741360"
  },
  {
    "text": "the compiler figured out there's a call to a get value here but I don't Define that symbol I only require that symbol",
    "start": "741360",
    "end": "746399"
  },
  {
    "text": "to be defined so I get an the find symbol for this in main. O that the Linker can then resolve",
    "start": "746399",
    "end": "753000"
  },
  {
    "text": "later and yeah if I run NM on values of O I see I have this U undefined symbol",
    "start": "753000",
    "end": "759639"
  },
  {
    "text": "get value and T for main it's in the text",
    "start": "759639",
    "end": "764480"
  },
  {
    "text": "section so then we've seen we have the data section for the data the text section for the text and then we have",
    "start": "768839",
    "end": "775160"
  },
  {
    "text": "talked about there's a symbol table somewhere uh so how many sections are are there in this object",
    "start": "775160",
    "end": "780560"
  },
  {
    "text": "file I have another tool called readelf which can list a bunch of metadata as well and uh yeah I give it- s to show me",
    "start": "780560",
    "end": "789199"
  },
  {
    "text": "all the section headers and W just like always use W when you use relf because then you'll have the wide output and it",
    "start": "789199",
    "end": "794560"
  },
  {
    "text": "doesn't get mangled which is annoying and relf tells me there are actually 20",
    "start": "794560",
    "end": "799959"
  },
  {
    "text": "section headers so in my values. o uh with just this single Global variable in the function I have 20 different",
    "start": "799959",
    "end": "806480"
  },
  {
    "text": "sections and then it lists all of them and we can see down here that we have our text section with the code the data",
    "start": "806480",
    "end": "811800"
  },
  {
    "text": "section with our globals and Sim tab so that's a separate section that has these symbols and these",
    "start": "811800",
    "end": "819399"
  },
  {
    "text": "are just like pointers into the other section so it's saying that you have value and get value and they are over",
    "start": "819399",
    "end": "826800"
  },
  {
    "text": "here so that's the metadata that's off in a separate",
    "start": "826800",
    "end": "831600"
  },
  {
    "text": "section yeah so we mentioned earlier looking at this figure that when when the compiler is compiling main. C in",
    "start": "836199",
    "end": "842480"
  },
  {
    "text": "isolation it doesn't know where get value is like how can I generate a call to this function that I don't know where",
    "start": "842480",
    "end": "850360"
  },
  {
    "text": "is but the Linker has the full picture the Linker is writing all of this stuff right so the Linker knows well this",
    "start": "850360",
    "end": "856839"
  },
  {
    "text": "section here I'm going to write it over here and this section here I'm going to write over here so the Linker has the",
    "start": "856839",
    "end": "862320"
  },
  {
    "text": "the full picture when it's making the program uh and then the Linker can use",
    "start": "862320",
    "end": "868199"
  },
  {
    "text": "the symbol table to to find the offset like I put values at o in here and",
    "start": "868199",
    "end": "874079"
  },
  {
    "text": "what's the offset of get value it's zero so then it knows actually where it",
    "start": "874079",
    "end": "879519"
  },
  {
    "text": "is and um yeah so let's briefly then look at how how does that work how how",
    "start": "880079",
    "end": "887519"
  },
  {
    "text": "can the compiler not know and then the Linker can know and then the Linker can fix it how how does that work that works with relocations um I'm",
    "start": "887519",
    "end": "896160"
  },
  {
    "text": "going to mention relocations briefly here I had a talk two years ago about static linking and dynamic linking also",
    "start": "896160",
    "end": "902199"
  },
  {
    "text": "but going into a lot of details about relocations so I'll have a link to that talk as well at the",
    "start": "902199",
    "end": "908079"
  },
  {
    "text": "end uh I again used OB j-d to disassemble my uh main. o now because I",
    "start": "908079",
    "end": "914120"
  },
  {
    "text": "want to look at I'm going to look at the call to get value and figure out how it works so I'm dumping main. o this time-",
    "start": "914120",
    "end": "920839"
  },
  {
    "text": "R is to show the relocations which is the thing that the compiler and the Linker uses to use to communicate this",
    "start": "920839",
    "end": "927240"
  },
  {
    "text": "these things and Fin I'm just saying- m Intel because I want the Intel assembly syntax because that's what most people",
    "start": "927240",
    "end": "933720"
  },
  {
    "text": "use these days I think okay so here's the disassembly of the text section and then it goes a lot",
    "start": "933720",
    "end": "941759"
  },
  {
    "text": "of stuff that we're not going to talk about now and here's the call so E8",
    "start": "941759",
    "end": "946959"
  },
  {
    "text": "that's the call up code so then when the CPU sees E8 it's going to like jump over",
    "start": "946959",
    "end": "952240"
  },
  {
    "text": "here and call this function and then what's the address we're going to call zero like the comp",
    "start": "952240",
    "end": "958560"
  },
  {
    "text": "compiler just went I have no idea where this function is going to be so I'll just put some zeros and I give up and",
    "start": "958560",
    "end": "963680"
  },
  {
    "text": "then the compiler also generates a note to the Linker to say like hey can you please fix this up later I just put",
    "start": "963680",
    "end": "969600"
  },
  {
    "text": "zeros here for now and then the compiler has added a relocation uh and again the relocations",
    "start": "969600",
    "end": "975839"
  },
  {
    "text": "are off in yet another section this like machine code is still just machine code there's nothing nothing magic in here",
    "start": "975839",
    "end": "982160"
  },
  {
    "text": "but off somewhere else is this relocation information and OB jump is just inlining that information here because it's easier for me to see",
    "start": "982160",
    "end": "989079"
  },
  {
    "text": "so it has said that at address a please put in the value of get value so this is",
    "start": "989079",
    "end": "995519"
  },
  {
    "text": "bite number n this is bite number a so the Linker can then just just figure out where it put get value and then just",
    "start": "995519",
    "end": "1001800"
  },
  {
    "text": "fill it in here so the Linker doesn't need to understand machine code or assembly code or like anything like that",
    "start": "1001800",
    "end": "1008519"
  },
  {
    "text": "the link just knows well at some at this address I need to put the address or get",
    "start": "1008519",
    "end": "1013959"
  },
  {
    "text": "value eventually ended up so during linking the Linker just just Loops over the relocation table in",
    "start": "1013959",
    "end": "1020040"
  },
  {
    "text": "main. O finds all the missing symbols and then it looks in the symbol table for values. o and finds okay",
    "start": "1020040",
    "end": "1026760"
  },
  {
    "text": "what's the offset of get it and I I know where I'm going to write this section that I got from Val ofo where in the",
    "start": "1026760",
    "end": "1032319"
  },
  {
    "text": "executable does the stuff from Val ofo end up so then I can add that the offset to that comput the final address of get",
    "start": "1032319",
    "end": "1039480"
  },
  {
    "text": "value and just fill it in at this address and it's going to be a relative",
    "start": "1039480",
    "end": "1044558"
  },
  {
    "text": "address but uh that's not very important right now um yeah and again OB jump is inlining",
    "start": "1044559",
    "end": "1051280"
  },
  {
    "text": "this information even though it's actually off in some other section it's not here in the text",
    "start": "1051280",
    "end": "1056960"
  },
  {
    "text": "section I can then disassemble my final executable so after linking the program",
    "start": "1058720",
    "end": "1063960"
  },
  {
    "text": "now it's just executable everything has been linked in everything is is done I can up jump that again to show the",
    "start": "1063960",
    "end": "1070520"
  },
  {
    "text": "disassembly and here's the main function and here we can see this call instruction the E8 for the call and now",
    "start": "1070520",
    "end": "1078400"
  },
  {
    "text": "the Linker has put in the final address so the actual uh distance it has to jump to get the to get value has now been",
    "start": "1078400",
    "end": "1085200"
  },
  {
    "text": "filled in and the relocation is also gone we can also note that the main",
    "start": "1085200",
    "end": "1091520"
  },
  {
    "text": "function no longer is at offset zero so when you linked the final executable lots of other stuff has been added here",
    "start": "1091520",
    "end": "1097720"
  },
  {
    "text": "so main now starts at offset 606 in the text section so other things have has",
    "start": "1097720",
    "end": "1102799"
  },
  {
    "text": "been added here as well",
    "start": "1102799",
    "end": "1110320"
  },
  {
    "text": "so what if there were no symbols like trying to figure out why we need these symbols what happens if you don't have",
    "start": "1110960",
    "end": "1116840"
  },
  {
    "text": "any symbols so I'm I'm linking this program I don't remember how to call the Linker",
    "start": "1116840",
    "end": "1122840"
  },
  {
    "text": "so I just use GCC gc-o the program values. o and main. O just to link this into an",
    "start": "1122840",
    "end": "1129480"
  },
  {
    "text": "executable um and you remember main calls get value and get value returns This Global which has the value 42 so",
    "start": "1129480",
    "end": "1135799"
  },
  {
    "text": "when I run my program there's like no tricks here it just exits with 42 as we",
    "start": "1135799",
    "end": "1141520"
  },
  {
    "text": "expected so that worked fine and as we saw this worked fine",
    "start": "1141520",
    "end": "1147039"
  },
  {
    "text": "because when I list the symbols in values. O we have the symbol for get value so that the Linker knows where get",
    "start": "1147039",
    "end": "1152480"
  },
  {
    "text": "value is when it's linking the executable but I can use this tool called strip and strip will just remove",
    "start": "1152480",
    "end": "1159600"
  },
  {
    "text": "all the symbols to just that the code is exactly the same it doesn't change anything like the the symbol is",
    "start": "1159600",
    "end": "1166280"
  },
  {
    "text": "different from the actual thing the code right theun fun is a thing in the machine code a symbol is just a pointer",
    "start": "1166280",
    "end": "1171559"
  },
  {
    "text": "somewhere in some other section and strip is just going to throw away that entire symbol table so there there are no symbols",
    "start": "1171559",
    "end": "1178039"
  },
  {
    "text": "anymore so if I do that and then I run NM again on values at o to list the symbols and NM tells me there are no",
    "start": "1178039",
    "end": "1184360"
  },
  {
    "text": "symbols in here if I try to link again just to make",
    "start": "1184360",
    "end": "1189520"
  },
  {
    "text": "this executable out of my two object files I'm going to get this like you maybe seen sometimes before uh the",
    "start": "1189520",
    "end": "1195880"
  },
  {
    "text": "Linker complains that there's an undefined reference to get value because the symbol table isn't",
    "start": "1195880",
    "end": "1200919"
  },
  {
    "text": "there so then you can't link to it and now now you kind of understand a bit more how is a Linker able to like find",
    "start": "1200919",
    "end": "1207679"
  },
  {
    "text": "these things and and complain uh if they're not there so the story so far from the",
    "start": "1207679",
    "end": "1214880"
  },
  {
    "text": "introduction is that we have a separate compilation model so all of your CN CPP files are compiled in isolation they",
    "start": "1214880",
    "end": "1220640"
  },
  {
    "text": "can't look into the other ones we've seen that we have sections like data for the global text for the",
    "start": "1220640",
    "end": "1227080"
  },
  {
    "text": "code same time for the symbols and so on and there are at least 20 of them text only has machine code it's",
    "start": "1227080",
    "end": "1234360"
  },
  {
    "text": "like no metadata just the code that goes on your CPU data only has the global data and then symbol uh Sim tab has",
    "start": "1234360",
    "end": "1242039"
  },
  {
    "text": "symbols pointing to each of these functions and objects in the other sections we also saw that the compiler",
    "start": "1242039",
    "end": "1248720"
  },
  {
    "text": "creates relocations for the Linker just these little notes for the Linker to fix up the right addresses uh when linking",
    "start": "1248720",
    "end": "1254520"
  },
  {
    "text": "and that these live off in yet a different section uh yeah the Linker fills those in and if you don't have symbols well",
    "start": "1254520",
    "end": "1262720"
  },
  {
    "text": "then you can't link that's it for the",
    "start": "1262720",
    "end": "1268760"
  },
  {
    "text": "intro next topic is linkage uh in C and C++ we have this",
    "start": "1271760",
    "end": "1278640"
  },
  {
    "text": "concept of linkage uh and I have done something here I have this get value",
    "start": "1278640",
    "end": "1283760"
  },
  {
    "text": "that we've seen uh like in our example so far but I've introduced this helper function",
    "start": "1283760",
    "end": "1289000"
  },
  {
    "text": "so get value calls Helper and helper then Returns the value and then this gets returned from get value eventually",
    "start": "1289000",
    "end": "1295559"
  },
  {
    "text": "and I've made helper static so what does it mean if I put static in front of my",
    "start": "1295559",
    "end": "1301039"
  },
  {
    "text": "function here it's local to this file that's",
    "start": "1301039",
    "end": "1306919"
  },
  {
    "text": "correct uh so static here gives this internal linkage that means only this translation unit only this C file can",
    "start": "1306919",
    "end": "1314159"
  },
  {
    "text": "call this function it's invisible outside um so helper um has internal linkage and",
    "start": "1314159",
    "end": "1321919"
  },
  {
    "text": "value and get value have external linkage meaning you can link to this from the outside no one else is allowed",
    "start": "1321919",
    "end": "1327480"
  },
  {
    "text": "to use this helper function and if you're more used to C++ maybe you have Anonymous name spaces that you tend to",
    "start": "1327480",
    "end": "1333120"
  },
  {
    "text": "use instead that's the same thing then you get internal linkage so no one else can see this after it's been compiled",
    "start": "1333120",
    "end": "1338360"
  },
  {
    "text": "it's invisible so if I list this we can see that we saw like we saw before get value",
    "start": "1338360",
    "end": "1345039"
  },
  {
    "text": "and value they have capital T capital D for text section and data section and helper has lowercase T and this",
    "start": "1345039",
    "end": "1352279"
  },
  {
    "text": "lowercase means internal linkage so get value and helper have external linkage they get capital letters and helper has",
    "start": "1352279",
    "end": "1359799"
  },
  {
    "text": "internal linkage so it gets the lowercase T and linkage that's just a language",
    "start": "1359799",
    "end": "1367400"
  },
  {
    "text": "thing like C and C++ in their standards just say here's how a linkage works and",
    "start": "1367400",
    "end": "1373559"
  },
  {
    "text": "then just Linux and elf have to support that in some way like we have to have some feature that provides that",
    "start": "1373559",
    "end": "1379360"
  },
  {
    "text": "functionality of the languages um but elf doesn't have like a linkage concept really elf has another thing called",
    "start": "1379360",
    "end": "1386799"
  },
  {
    "text": "binding so binding is the mechanism in elf that you use to implement this language feature of linkage so The",
    "start": "1386799",
    "end": "1393240"
  },
  {
    "text": "Binding is kind of very related here and that value and get value have external linkage so they",
    "start": "1393240",
    "end": "1400000"
  },
  {
    "text": "get Global binding so like globally available uh whereas helper has internal",
    "start": "1400000",
    "end": "1405640"
  },
  {
    "text": "linkage and then has local binding so it's only it's local to this file it's not available outside of it when you link",
    "start": "1405640",
    "end": "1412799"
  },
  {
    "text": "later um yes and then in in main. C I",
    "start": "1415279",
    "end": "1420799"
  },
  {
    "text": "also needed a Helper because if someone forgets to pass the right colum command line arguments I want to print this",
    "start": "1420799",
    "end": "1426200"
  },
  {
    "text": "usage string so I made a helper function to print the usage string and then I",
    "start": "1426200",
    "end": "1431600"
  },
  {
    "text": "have two helper functions and like normally that doesn't work when you link but since both of these have internal",
    "start": "1431600",
    "end": "1436919"
  },
  {
    "text": "linkage they have local binding in elf so when the Linker links these it goes well there are two helper functions but",
    "start": "1436919",
    "end": "1443039"
  },
  {
    "text": "that's fine because those are just in turn to those things I can't link to them between files anyway so just name",
    "start": "1443039",
    "end": "1449679"
  },
  {
    "text": "them whatever you want I don't mind if you have a collision and the same is with an anonymous name space you can",
    "start": "1449679",
    "end": "1454799"
  },
  {
    "text": "have like a function f in in all of your translation units and that's going to be",
    "start": "1454799",
    "end": "1460880"
  },
  {
    "text": "fine and this separate compilation and linking model is why you can't have your",
    "start": "1463520",
    "end": "1469000"
  },
  {
    "text": "definitions in your headers so if I were in to like to move up to values. h i put",
    "start": "1469000",
    "end": "1476000"
  },
  {
    "text": "now the definition of value here in values. h i put the body here so we have the definition of get value up in the",
    "start": "1476000",
    "end": "1481960"
  },
  {
    "text": "header file and then I include this header in two c files now both values. o",
    "start": "1481960",
    "end": "1488559"
  },
  {
    "text": "and main. O are going to have the definitions of uh value and of get value",
    "start": "1488559",
    "end": "1493840"
  },
  {
    "text": "so if I try to link those object files later it's going to say well there's multiple definitions of both value and",
    "start": "1493840",
    "end": "1499799"
  },
  {
    "text": "get value here so I can't link this like which one am I going to use I have two you're only allowed to have",
    "start": "1499799",
    "end": "1505520"
  },
  {
    "text": "one so yeah then we kind of see how the Linker is able to figure out this",
    "start": "1505520",
    "end": "1510640"
  },
  {
    "text": "problem and how it's able to give you this um error message so what we do the classical",
    "start": "1510640",
    "end": "1518200"
  },
  {
    "text": "solution here in C is that you have to just declare them in the header file and Define them in some C file you put",
    "start": "1518200",
    "end": "1523520"
  },
  {
    "text": "extern on this one and then you remove the body from get value now these are only declarations and then only values. C actually Define",
    "start": "1523520",
    "end": "1530880"
  },
  {
    "text": "this so then only values. o are going to have the definitions and linking is going to work fine and in main. O then",
    "start": "1530880",
    "end": "1538320"
  },
  {
    "text": "you're going to have like an undefined symbol for get value and the Linker will be able to figure that",
    "start": "1538320",
    "end": "1545320"
  },
  {
    "text": "out C++ has some additional challenges with header files it see in see it's",
    "start": "1550039",
    "end": "1555200"
  },
  {
    "text": "pretty simple you just move these things down but uh in simp Plus+ you have a couple of extra",
    "start": "1555200",
    "end": "1560799"
  },
  {
    "text": "challenges um I just like a quick question Who uses C++ most of the people I've tried to",
    "start": "1560799",
    "end": "1567880"
  },
  {
    "text": "keep this a bit language agnostic since we have this really cool crack this year but here's some C plus stuff so one",
    "start": "1567880",
    "end": "1574279"
  },
  {
    "text": "thing you can do in C++ is that your structs they are now called classes and they can have functions in them and I",
    "start": "1574279",
    "end": "1580520"
  },
  {
    "text": "can put the definition of get value inside of this definition of some class or I can like put it down in some header",
    "start": "1580520",
    "end": "1585799"
  },
  {
    "text": "file going some class colon colon get value and just have the Declaration but I'm allowed to put the member function",
    "start": "1585799",
    "end": "1592279"
  },
  {
    "text": "inside of the class definition so when I include this header file in many of my CPP files I'm now",
    "start": "1592279",
    "end": "1598559"
  },
  {
    "text": "going to have the definition of uh G value in all of my uh my uh my object",
    "start": "1598559",
    "end": "1603760"
  },
  {
    "text": "files so that shouldn't work right when you link this stuff another thing I have in C++ is",
    "start": "1603760",
    "end": "1610399"
  },
  {
    "text": "templates so if I have this function template called get value I can instantiate get value for INT in many of",
    "start": "1610399",
    "end": "1617240"
  },
  {
    "text": "my files and then I'll have duplicates but I need to put the definition here in",
    "start": "1617240",
    "end": "1622360"
  },
  {
    "text": "the header file because otherwise how can my uh CPP files instantiate this template if it doesn't if it can't see",
    "start": "1622360",
    "end": "1628480"
  },
  {
    "text": "the entire definition of the template so I have to put it up here and then I have to get multiple definitions of get value",
    "start": "1628480",
    "end": "1634399"
  },
  {
    "text": "of int if I use that in many CPP files so if I uh in some some CP file I",
    "start": "1634399",
    "end": "1642320"
  },
  {
    "text": "use this so I use get value of int here and then I just create an object of some class and call this member function now",
    "start": "1642320",
    "end": "1649840"
  },
  {
    "text": "I get code for these generated and symbols for this generated in this",
    "start": "1649840",
    "end": "1655960"
  },
  {
    "text": "file um so how how does that work let's uh",
    "start": "1656600",
    "end": "1662320"
  },
  {
    "text": "run NM again and now we're in C++ so I pass d c to the mangle the names so we get the the proper C++ names and not",
    "start": "1662320",
    "end": "1668440"
  },
  {
    "text": "like the weird like um mangled names and then we can see that use it which just a",
    "start": "1668440",
    "end": "1675200"
  },
  {
    "text": "normal function it's still capital t is in the text section Global binding but",
    "start": "1675200",
    "end": "1680600"
  },
  {
    "text": "get value these two get value functions now have a w and the W is a new thing like we seen Global binding it's",
    "start": "1680600",
    "end": "1687399"
  },
  {
    "text": "available everywhere local binding it's inter to this file weak binding means",
    "start": "1687399",
    "end": "1692919"
  },
  {
    "text": "it's kind of like Global but you can have many of them so if I instantiate this temp function template in 11 object",
    "start": "1692919",
    "end": "1699640"
  },
  {
    "text": "files the Linker is going to discard 10 of them and just make sure there's just one left and everyone uses that single",
    "start": "1699640",
    "end": "1705480"
  },
  {
    "text": "one so that's how that's how that's supported on elf because again this is just a rule in simp plus right we have a",
    "start": "1705480",
    "end": "1711880"
  },
  {
    "text": "thing called the one definition rule um and the one definition rule says you're only allowed to have one of each thing",
    "start": "1711880",
    "end": "1717919"
  },
  {
    "text": "in your program each function it's each Global and so on you can only have one definition except for templates and a",
    "start": "1717919",
    "end": "1724880"
  },
  {
    "text": "few things where you need to allow to have many because otherwise things wouldn't work so then it says you can have many of these and it's not uh",
    "start": "1724880",
    "end": "1731640"
  },
  {
    "text": "violation of the odr one definition rule it's not an odr violation it's you're allowed to have this",
    "start": "1731640",
    "end": "1738559"
  },
  {
    "text": "but they have better be the same imagine uh that I use this get",
    "start": "1738559",
    "end": "1744880"
  },
  {
    "text": "value of int in several of my files and there's an if def in here so it goes if def something something return one else",
    "start": "1744880",
    "end": "1752000"
  },
  {
    "text": "return two and then I instantiate this in many CPP files but only in a few of them do I",
    "start": "1752000",
    "end": "1758200"
  },
  {
    "text": "Define this the set this defined so for some of them the if def is true and for some of them the if def is false so some",
    "start": "1758200",
    "end": "1764279"
  },
  {
    "text": "of these in instantiations return one and the other return two that's an audr violation you're not",
    "start": "1764279",
    "end": "1770480"
  },
  {
    "text": "allowed to have that if you have many copies of the same thing they must be exactly the same otherwise you have an",
    "start": "1770480",
    "end": "1776039"
  },
  {
    "text": "odr violation and that's undefined Behavior so you can't have that um yeah and also one more thing",
    "start": "1776039",
    "end": "1783679"
  },
  {
    "text": "about weak symbols like if I don't use this template or if I don't use this member function I don't actually get",
    "start": "1783679",
    "end": "1789240"
  },
  {
    "text": "them instantiated then the compiler would just go well if you're not using them I I won't bother emitting code and",
    "start": "1789240",
    "end": "1794799"
  },
  {
    "text": "symbols for these because anyone else who is using them will also have uh have",
    "start": "1794799",
    "end": "1799840"
  },
  {
    "text": "emitted code for them so I don't need to have these symbols so if you ever like look at our symbols and like why why why",
    "start": "1799840",
    "end": "1807000"
  },
  {
    "text": "is there no symbol here for something in appear it's like okay if you don't use it the compiler just didn't",
    "start": "1807000",
    "end": "1813399"
  },
  {
    "text": "bother we we didn't say anything about weak symbols to C++ right we just used",
    "start": "1815399",
    "end": "1821480"
  },
  {
    "text": "the language like you're supposed to use it and we didn't say anything like this is weak so we can have man Vis like that's the compiler just handled it and",
    "start": "1821480",
    "end": "1828519"
  },
  {
    "text": "the implementation just goes well um we can use weak binding for this in elf to support this language",
    "start": "1828519",
    "end": "1835120"
  },
  {
    "text": "concept but I can also use weak symbols manually if I want and this is not standard this is just like a Linux only",
    "start": "1835120",
    "end": "1841679"
  },
  {
    "text": "thing uh but I can use weak symbols myself if I want one way I could choose to use weak",
    "start": "1841679",
    "end": "1848960"
  },
  {
    "text": "symbols is if I I complicate my library a bit this library to get the value 42 I",
    "start": "1848960",
    "end": "1854480"
  },
  {
    "text": "know I'm going to complicate it a bit so the way you get the the value now is that you load a resource and then you",
    "start": "1854480",
    "end": "1860200"
  },
  {
    "text": "get the value from that resource so in my header file I declare load resource and in my C file here I give you a",
    "start": "1860200",
    "end": "1866960"
  },
  {
    "text": "definition for load resource and this resource loader is just doing something to get the resource like it's read reads",
    "start": "1866960",
    "end": "1873639"
  },
  {
    "text": "a file connects to a database or I don't know like something something to get this value and then my user will just get the",
    "start": "1873639",
    "end": "1882760"
  },
  {
    "text": "resource just calls the get resource function now I have a resource pointer that's comes from",
    "start": "1882760",
    "end": "1888840"
  },
  {
    "text": "somewhere and I can return the value from this resource so my resource here is just like abstract thing that gives",
    "start": "1888840",
    "end": "1895480"
  },
  {
    "text": "you the value 42 and I have an implementation here of",
    "start": "1895480",
    "end": "1900960"
  },
  {
    "text": "this resource loader in my C file so if I call that I get the resource somehow but what if I want the user to",
    "start": "1900960",
    "end": "1908039"
  },
  {
    "text": "be able to override this okay so my default implementation uses a database and the user should be allowed to use a",
    "start": "1908039",
    "end": "1913880"
  },
  {
    "text": "file or the default implementation computes this on Q but the the other the",
    "start": "1913880",
    "end": "1919159"
  },
  {
    "text": "user should be allowed to do this on opencl or I don't know uh how do I do",
    "start": "1919159",
    "end": "1925919"
  },
  {
    "text": "that well then I can actually manually mark this symbol AS weak so I can put",
    "start": "1925919",
    "end": "1931360"
  },
  {
    "text": "attribute weak in front of my Declaration of this function and now this is a weak",
    "start": "1931360",
    "end": "1937320"
  },
  {
    "text": "symbol and then um my user can also provide a definition",
    "start": "1937320",
    "end": "1944919"
  },
  {
    "text": "for load resource so now I have a weak one and they have a normal Global symbol so they don't put attribute weaker and",
    "start": "1944919",
    "end": "1951880"
  },
  {
    "text": "then the rule is that if the Linker ises multiple like one or many weak definitions and one Global definition is",
    "start": "1951880",
    "end": "1958039"
  },
  {
    "text": "going to pick the global definition and discard all the weak ones so now when the user links their application mine",
    "start": "1958039",
    "end": "1965159"
  },
  {
    "text": "just gets thrown away by the Linker and instead it's getting overridden by This Global symbol from from the user um but",
    "start": "1965159",
    "end": "1973279"
  },
  {
    "text": "you're still allowed to only have one of the global ones so if I I have many of the these ones then that's going to be a multiple simple definition and an error",
    "start": "1973279",
    "end": "1980679"
  },
  {
    "text": "again but yeah so this is how you can um allows the users to override some",
    "start": "1980679",
    "end": "1987000"
  },
  {
    "text": "functions and have a little kind of plugin system like this but again this is vendor specific stuff",
    "start": "1987000",
    "end": "1994158"
  },
  {
    "text": "right and now if I look at values. o and and main. O look at the symbols in those",
    "start": "1995200",
    "end": "2000919"
  },
  {
    "text": "I have then in values. O I have a weak symbol for load resource and in main. O",
    "start": "2000919",
    "end": "2006200"
  },
  {
    "text": "I have a glob symbol um for load resource so now this one is going to take precedence during",
    "start": "2006200",
    "end": "2014158"
  },
  {
    "text": "linking one final thing uh in C++ that um is a bit like complicates things a",
    "start": "2015840",
    "end": "2022679"
  },
  {
    "text": "little bit is inline variables so we mentioned that you can't put your definitions in your header",
    "start": "2022679",
    "end": "2028480"
  },
  {
    "text": "files well as of C+ 17 you can put your definitions in your header files if I just type inline in front here I'm",
    "start": "2028480",
    "end": "2035799"
  },
  {
    "text": "actually allowed to have this glob Global value in the header file I can include it in many object files I get",
    "start": "2035799",
    "end": "2040880"
  },
  {
    "text": "the definition of global value in all my object files and then the Linker is just going to disambiguate and just pick one",
    "start": "2040880",
    "end": "2045960"
  },
  {
    "text": "of them I can do the same with the static members as well so I can have an inline",
    "start": "2045960",
    "end": "2052320"
  },
  {
    "text": "thing here like previously you always had to go in your CPP file and type some class colon colon local value equals 2",
    "start": "2052320",
    "end": "2060000"
  },
  {
    "text": "but now you can put it in the header file which is just convenient yeah and then I just have a",
    "start": "2060000",
    "end": "2065839"
  },
  {
    "text": "static member function as well just uh to to get this",
    "start": "2065839",
    "end": "2070398"
  },
  {
    "text": "value now as a user I'm going to just in my main function I'll return the global",
    "start": "2071079",
    "end": "2077560"
  },
  {
    "text": "and I'll call the static member function which eventually uses this inline variable so how does that look if I look",
    "start": "2077560",
    "end": "2083919"
  },
  {
    "text": "at my um my object file again I do NM on main. o again- c to demangle the",
    "start": "2083919",
    "end": "2090638"
  },
  {
    "text": "names then we have main regular capital t uh Global linkage um uh global binding",
    "start": "2090639",
    "end": "2097480"
  },
  {
    "text": "in the text section and this member function the W thing that we saw before it's a weak symbol because I have a definition of a",
    "start": "2097480",
    "end": "2104280"
  },
  {
    "text": "function in a in a class it's going to end up in many of my my object",
    "start": "2104280",
    "end": "2109359"
  },
  {
    "text": "files and then for these uh inline variables we have a u that's a new new",
    "start": "2109359",
    "end": "2114560"
  },
  {
    "text": "thing this is a unique symbol and that's a new extension to elf that's just how",
    "start": "2114560",
    "end": "2119680"
  },
  {
    "text": "GCC decides to do this stuff um and a unique symbol is the same for most",
    "start": "2119680",
    "end": "2125760"
  },
  {
    "text": "practical purposes as a we symbol it just means you can have many but Linker is going to pick one just pick a unique",
    "start": "2125760",
    "end": "2132000"
  },
  {
    "text": "one the only little difference is that you're not allowed to override uh this one so you can't have a strong one that",
    "start": "2132000",
    "end": "2138359"
  },
  {
    "text": "overrides all the unique ones it has to be they have to be all unique and then",
    "start": "2138359",
    "end": "2143480"
  },
  {
    "text": "um yeah the Linker is just going to pick one and then uh one little unfortunate thing here is that we saw earlier that",
    "start": "2143480",
    "end": "2151480"
  },
  {
    "text": "we have the capital t meaning Global binding text section lowercase T local binding and with so for data you have",
    "start": "2151480",
    "end": "2157800"
  },
  {
    "text": "the capital D for Global and lowercase D for local binding so you have the",
    "start": "2157800",
    "end": "2163079"
  },
  {
    "text": "lowercase U for Unique symbol and then uppercase you for undefined symbol like these are just completely",
    "start": "2163079",
    "end": "2169440"
  },
  {
    "text": "unrelated so yeah that's like when you start learning capital is global and not capital is local then that only works",
    "start": "2169440",
    "end": "2176800"
  },
  {
    "text": "for a while uh yeah so just watch out for",
    "start": "2176800",
    "end": "2182760"
  },
  {
    "text": "that and then when when I learned this stuff I had some questions and maybe you",
    "start": "2184200",
    "end": "2189280"
  },
  {
    "text": "have some questions as well because I thought the Linker just copies sections",
    "start": "2189280",
    "end": "2194640"
  },
  {
    "text": "like we saw that the first illustration it takes like this entire section puts it over here takes this entire section",
    "start": "2194640",
    "end": "2200119"
  },
  {
    "text": "puts it over here and it can't really doesn't understand machine code I also said that so we can't really change the",
    "start": "2200119",
    "end": "2206839"
  },
  {
    "text": "sections it just like copies them verim over to the executable but I also told you that the",
    "start": "2206839",
    "end": "2212359"
  },
  {
    "text": "Linker is going to remove these things right it's going to pick out the get values from all your objects files except one so how how can you do that",
    "start": "2212359",
    "end": "2219839"
  },
  {
    "text": "when when you can't modify the sections and that's not possible it",
    "start": "2219839",
    "end": "2225040"
  },
  {
    "text": "can't pick those things out of the sections but it's still managing to to do this somehow so how is it doing",
    "start": "2225040",
    "end": "2231200"
  },
  {
    "text": "this so I'm up jumping main. o again uh and I'm grapping for the text section",
    "start": "2231200",
    "end": "2236760"
  },
  {
    "text": "I'm listing listing all my sections here just grapping for my text section and here it is here's my text section with",
    "start": "2236760",
    "end": "2242720"
  },
  {
    "text": "all my code and here here are also my text sections a couple of new ones so I have",
    "start": "2242720",
    "end": "2248560"
  },
  {
    "text": "the text this is not possible to demangle unfortunately but you have the text some class colon colon get value",
    "start": "2248560",
    "end": "2255440"
  },
  {
    "text": "section and you have the text. get value of int section so what the compiler",
    "start": "2255440",
    "end": "2261480"
  },
  {
    "text": "actually does for all your week symbols all your function templates and stuff it makes an entirely new text section just",
    "start": "2261480",
    "end": "2266960"
  },
  {
    "text": "for that single function template to allow for the Linker to throw it away later because it you can't chop out",
    "start": "2266960",
    "end": "2273040"
  },
  {
    "text": "parts of the official text section c or the like the large one with all the normal stuff so it has to generate all",
    "start": "2273040",
    "end": "2278680"
  },
  {
    "text": "of these extra text sections for all these things that can be removed",
    "start": "2278680",
    "end": "2284160"
  },
  {
    "text": "later um yeah so this happens then for inline variables for templates and and stuff like this they all go in separate",
    "start": "2284160",
    "end": "2292560"
  },
  {
    "text": "sections so in summary for binding in C and C++ we have this language concept of",
    "start": "2293359",
    "end": "2298880"
  },
  {
    "text": "external and internal linkage and that's implemented on elf with global and local",
    "start": "2298880",
    "end": "2304720"
  },
  {
    "text": "binding then we have ye weak and unique binding as well to support things like anything that's defined in a header has",
    "start": "2304720",
    "end": "2311760"
  },
  {
    "text": "like a weak or unique symbol that's the intuition to take away so that like member functions that are defined inside",
    "start": "2311760",
    "end": "2317520"
  },
  {
    "text": "of the class function templates in line variables all of these things that you're allowed to Define in your headers",
    "start": "2317520",
    "end": "2323079"
  },
  {
    "text": "are implemented in this way I can actually uh use attribute weak",
    "start": "2323079",
    "end": "2328839"
  },
  {
    "text": "manually if I want to allow people to override my stuff and we saw how the Linker uses one",
    "start": "2328839",
    "end": "2335560"
  },
  {
    "text": "section actually per per weak and unique symbol uh in your files to be able to disambiguate",
    "start": "2335560",
    "end": "2343359"
  },
  {
    "text": "later right that was static linking um next thing is a bit haer and that's",
    "start": "2349000",
    "end": "2354880"
  },
  {
    "text": "Dynamic linking um the C+ plus 20 standard is 1,826",
    "start": "2354880",
    "end": "2362720"
  },
  {
    "text": "pages long uh oops I don't have a copy of the 31 is probably even longer but",
    "start": "2362720",
    "end": "2368280"
  },
  {
    "text": "it's it's a pretty long document and I don't know C very well but that's probably also a quite long document so how many pages do we have to",
    "start": "2368280",
    "end": "2375640"
  },
  {
    "text": "cover this complicated topic of dynamic linking yeah zero there are there",
    "start": "2375640",
    "end": "2383920"
  },
  {
    "text": "nothing there's nothing in these standards about Dynamic linking C and C++ do not know anything about Dynamic",
    "start": "2383920",
    "end": "2389720"
  },
  {
    "text": "linking if you heard ever about like Dynamic linking it's all made up it doesn't exist for for real it's not a",
    "start": "2389720",
    "end": "2395720"
  },
  {
    "text": "thing everything is vendor specific uh that leads to all sorts of interesting",
    "start": "2395720",
    "end": "2401119"
  },
  {
    "text": "questions uh especially around like odr things and yeah a different discussion",
    "start": "2401119",
    "end": "2407520"
  },
  {
    "text": "um so everything is vendor specific and in this talk I'll uh only talk about how this is implemented on elf I'll have a",
    "start": "2407520",
    "end": "2414520"
  },
  {
    "text": "short mention of Windows as well just for some crossplatform niceness that you can use but this is uh Linux L specific",
    "start": "2414520",
    "end": "2422440"
  },
  {
    "text": "stuff so we're going to use this example again where we have values. C . C so",
    "start": "2422440",
    "end": "2427640"
  },
  {
    "text": "this used to be main. C now it's just order. C because these are now going to be part of my library so I'm making a",
    "start": "2427640",
    "end": "2434280"
  },
  {
    "text": "dynamic Library here so now these are two of the things that go into making my Dynamic library and there are many many",
    "start": "2434280",
    "end": "2440680"
  },
  {
    "text": "names for D so now I said Dynamic Library the official term on Linux is dynamic shared object uh or DSO and some",
    "start": "2440680",
    "end": "2448800"
  },
  {
    "text": "people just say so some people say shared libraries Dynamic libraries a lot of people I hear say dll actually even",
    "start": "2448800",
    "end": "2455160"
  },
  {
    "text": "on Linux even though that's like a Windows thing but like it's kind of the same thing but a shared object is what",
    "start": "2455160",
    "end": "2460440"
  },
  {
    "text": "I'm going to stick with for this talk so everything we learned so far is exactly",
    "start": "2460440",
    "end": "2466760"
  },
  {
    "text": "the same when you're linking you're making the so right then everything like all of the relocations The Binding all",
    "start": "2466760",
    "end": "2474119"
  },
  {
    "text": "of the stuff we looked at is still the same when I'm making this shared object so everything still applies um but it",
    "start": "2474119",
    "end": "2481240"
  },
  {
    "text": "does not apply to when I'm actually going to consume the shared object then that's when things start to get",
    "start": "2481240",
    "end": "2488200"
  },
  {
    "text": "different because there's probably a lot of stuff that goes into my so and then I have a little bit of an API surface that",
    "start": "2488200",
    "end": "2494839"
  },
  {
    "text": "I want to to allow my users to use and most of it most of my stuff is probably",
    "start": "2494839",
    "end": "2499880"
  },
  {
    "text": "internal stuff that I don't want them to like accidentally start using if it's possible even though it's not a header",
    "start": "2499880",
    "end": "2505520"
  },
  {
    "text": "file someone is going to find out oh there's this function it's very useful I can use it even though it's not an a header uh and they're going to do it and",
    "start": "2505520",
    "end": "2512760"
  },
  {
    "text": "also um a bunch of this stuff might be secret right so I don't want to expose",
    "start": "2512760",
    "end": "2517960"
  },
  {
    "text": "all my secrets out of Theos so I want to try to contain it a bit and also um when",
    "start": "2517960",
    "end": "2524599"
  },
  {
    "text": "I load an executable that that will then load all my dependencies of all my my other shared objects that depend on",
    "start": "2524599",
    "end": "2530319"
  },
  {
    "text": "other shared objects and as I load this then the dynamic Linker and loader will have to patch up like where are all the",
    "start": "2530319",
    "end": "2536960"
  },
  {
    "text": "addresses in this so and where are all the addresses in this so so there's that's some work that has to be done so actually um you might even slow down",
    "start": "2536960",
    "end": "2544440"
  },
  {
    "text": "Dynamic linking and loading a little bit if you have too much stuff on your",
    "start": "2544440",
    "end": "2549599"
  },
  {
    "text": "surface so let's look at an example of internal and versus API things in in an",
    "start": "2549599",
    "end": "2557119"
  },
  {
    "text": "so yeah um so here's one of the files that go into making my so I have an",
    "start": "2558760",
    "end": "2564160"
  },
  {
    "text": "internal function that I don't want my users to use and I have an API function that I do want my users to use and then",
    "start": "2564160",
    "end": "2570480"
  },
  {
    "text": "in a C file I have the definitions internal function returns one and then uh the API function calls",
    "start": "2570480",
    "end": "2577680"
  },
  {
    "text": "the internal function and just multiplies the value by two and if I then run NM on this we've",
    "start": "2577680",
    "end": "2585119"
  },
  {
    "text": "seen this many times you get the capital T it's Global binding it's in the text section both of these",
    "start": "2585119",
    "end": "2590880"
  },
  {
    "text": "functions I can also run NM on the shared Library itself so after I made uh",
    "start": "2590880",
    "end": "2596520"
  },
  {
    "text": "my lib D.O I can run NM on the final thing the",
    "start": "2596520",
    "end": "2601599"
  },
  {
    "text": "completed link product and I will see I also have Global binding for API and internal functions but I want to control",
    "start": "2601599",
    "end": "2609720"
  },
  {
    "text": "who like I want to control so that my users can only call the API function not the internal function um but I can't use",
    "start": "2609720",
    "end": "2616920"
  },
  {
    "text": "binding for this because like this is just one C file I probably have like 40",
    "start": "2616920",
    "end": "2622440"
  },
  {
    "text": "or 500 or whatever other C files and some of them might need to use internal",
    "start": "2622440",
    "end": "2627920"
  },
  {
    "text": "function right so inside of my so all of my CPP or C files are allowed to call",
    "start": "2627920",
    "end": "2633040"
  },
  {
    "text": "this internal stuff it's just on the surface they should not be allowed to do that so I can't change the binding The",
    "start": "2633040",
    "end": "2639160"
  },
  {
    "text": "Binding has to be Global so that all of my piles inside of the so can uh can",
    "start": "2639160",
    "end": "2644680"
  },
  {
    "text": "talk to each other and use functions from each other and and be linked into this so so I only need to control I need",
    "start": "2644680",
    "end": "2650880"
  },
  {
    "text": "to control only what's available on the outside and to do that I use visibility",
    "start": "2650880",
    "end": "2657839"
  },
  {
    "text": "so visibility is a different thing from binding um yeah visibility is different thing",
    "start": "2657839",
    "end": "2664520"
  },
  {
    "text": "from binding and binding is what we've seen a lot so far it controls can this symbol be used outside of the of the",
    "start": "2664520",
    "end": "2670680"
  },
  {
    "text": "translation unit when I statically link stuff can they link to each other so binding matters when I create my my",
    "start": "2670680",
    "end": "2677359"
  },
  {
    "text": "shared object visibility controls whether the symbol can eventually be used outside of",
    "start": "2677359",
    "end": "2683480"
  },
  {
    "text": "the shared object can my users link to this and that matters when you're linking to the library not when you're",
    "start": "2683480",
    "end": "2689839"
  },
  {
    "text": "making it but CN us do not know anything about",
    "start": "2689839",
    "end": "2696480"
  },
  {
    "text": "Dynamic linking or visibility and we saw previously that the the linkage Concept in CNC that directly translates to",
    "start": "2696480",
    "end": "2702559"
  },
  {
    "text": "binding so that's nice you have this language thing but for dynamic linking visibility there is no such Concept in",
    "start": "2702559",
    "end": "2708960"
  },
  {
    "text": "the language so everything is vendor specific and on Linux the way you solve",
    "start": "2708960",
    "end": "2715000"
  },
  {
    "text": "this is that you um put an attribute on your stuff saying this one has default",
    "start": "2715000",
    "end": "2720480"
  },
  {
    "text": "or this one has hidden visibility and default visibility means it's visible and hidden visibility means it's hidden",
    "start": "2720480",
    "end": "2727240"
  },
  {
    "text": "you can't use it and you can control that per thing per like per symbol you",
    "start": "2727240",
    "end": "2732599"
  },
  {
    "text": "can put this attribute visibility default or hidden and uh if you put attribute visibility default then it's",
    "start": "2732599",
    "end": "2739280"
  },
  {
    "text": "visible if you put attribute default visibility hidden it's going to be hidden you can also uh just give a",
    "start": "2739280",
    "end": "2746359"
  },
  {
    "text": "compiler option and then it will apply to everything when you compile this file so if I pass F visibility hidden all the",
    "start": "2746359",
    "end": "2752480"
  },
  {
    "text": "symbols in my file are going to get hidden visibility nothing can be used on the outside and if I don't pass anything for",
    "start": "2752480",
    "end": "2759400"
  },
  {
    "text": "f visibility the default is to use default visibility and it's a bit unfortunate",
    "start": "2759400",
    "end": "2764520"
  },
  {
    "text": "that we have like default means two things here right default visibility is it's visible and the default option for",
    "start": "2764520",
    "end": "2771559"
  },
  {
    "text": "this one is like this default and not like it's a bit so the default is like the the normal thing is that we get the",
    "start": "2771559",
    "end": "2777920"
  },
  {
    "text": "default visibility it's visible outside and then I can override it and um then if I",
    "start": "2777920",
    "end": "2784240"
  },
  {
    "text": "want um on Windows the it's a bit weird because",
    "start": "2784240",
    "end": "2789880"
  },
  {
    "text": "like on Linux you just say here's the thing this is you can link to it from the outside or not on Windows it's a bit",
    "start": "2789880",
    "end": "2795480"
  },
  {
    "text": "strange because when you declare your function on windows for a dll you have to say dll export meaning it's going to",
    "start": "2795480",
    "end": "2802240"
  },
  {
    "text": "be exported that's the same as in Linux that's fine but then when you use the DL you have to put D de spec DL import so",
    "start": "2802240",
    "end": "2809079"
  },
  {
    "text": "when I call a normal function I I will put DL import here and it will make it a",
    "start": "2809079",
    "end": "2815119"
  },
  {
    "text": "slight bit faster apparently to to call stuff in DL if you put DEC D import so um I'm not too sure about the",
    "start": "2815119",
    "end": "2822720"
  },
  {
    "text": "details but that's what you should do on Windows apparently but yeah back to uh",
    "start": "2822720",
    "end": "2829280"
  },
  {
    "text": "back to Linux um how do you control visibility you use your build system I happen to be using cake here so what I",
    "start": "2829280",
    "end": "2835640"
  },
  {
    "text": "typically do is I have like ad Library I'm making a dam making like this dlib",
    "start": "2835640",
    "end": "2842200"
  },
  {
    "text": "my my shared object and then I set the compile options for dlib F visibility hidden and now all of the",
    "start": "2842200",
    "end": "2849280"
  },
  {
    "text": "source file that go into making D lib will have F visibility hidden so all my symbols are hidden no one can use",
    "start": "2849280",
    "end": "2855559"
  },
  {
    "text": "anything in my library then in my header files I can",
    "start": "2855559",
    "end": "2861119"
  },
  {
    "text": "choose like the stuff that actually goes into the API I'll put attribute visibility default and then uh those",
    "start": "2861119",
    "end": "2868359"
  },
  {
    "text": "only those things will be visible so now my users can use API function but not internal",
    "start": "2868359",
    "end": "2874079"
  },
  {
    "text": "function I could do it the other way around as well I could like have the default visibility be default visibility",
    "start": "2874079",
    "end": "2880359"
  },
  {
    "text": "and then put attributes uh visibility hidden on the stuff I want to hide but I think it's better to do it this way",
    "start": "2880359",
    "end": "2886280"
  },
  {
    "text": "because it's very easy to forget to hide stuff right you won't notice that you forgot to put this on half of your stuff",
    "start": "2886280",
    "end": "2892000"
  },
  {
    "text": "if you forget to expose some things then well your tests are going to tell you that I can't link to the things in the",
    "start": "2892000",
    "end": "2897720"
  },
  {
    "text": "API so and also I would assume that like most of",
    "start": "2897720",
    "end": "2903040"
  },
  {
    "text": "the symbols in youro are internal stuff you you just have like a tiny subset that you Expose and it's just less",
    "start": "2903040",
    "end": "2908520"
  },
  {
    "text": "typing if you don't need to decorate everything and you don't want to type this stuff everywhere so you make a",
    "start": "2908520",
    "end": "2915160"
  },
  {
    "text": "macro like Theo export just come up with a name uh which means attribute visibility default and then you just put",
    "start": "2915160",
    "end": "2922720"
  },
  {
    "text": "this in front of your stuff and only those things get",
    "start": "2922720",
    "end": "2927680"
  },
  {
    "text": "exported so um yeah question",
    "start": "2930520",
    "end": "2937599"
  },
  {
    "text": "yes you can uh I'll have an example for that a bit later",
    "start": "2942040",
    "end": "2947720"
  },
  {
    "text": "um yeah so I have a quick mention of crossplatform here again I don't know Windows very well but I'm told you have",
    "start": "2947720",
    "end": "2953680"
  },
  {
    "text": "to put dll import when you use the thing and DL export when you make the thing and then the header file is often the",
    "start": "2953680",
    "end": "2960160"
  },
  {
    "text": "same you often you use the same header file when you build your dll as when you consume your DL so",
    "start": "2960160",
    "end": "2966079"
  },
  {
    "text": "the function declaration has to say DL export when you make the D and DL import when you use the DL so like how do you",
    "start": "2966079",
    "end": "2971880"
  },
  {
    "text": "make the header file say two different things um in two different different scenarios and uh you use uh and like if",
    "start": "2971880",
    "end": "2980920"
  },
  {
    "text": "defs for this so I have this is a crossplatform Theo export definition that works both on Linux and windows I",
    "start": "2980920",
    "end": "2986720"
  },
  {
    "text": "say if I'm on Windows 30 _ win32 if I'm on Windows I have another thing so I have",
    "start": "2986720",
    "end": "2992839"
  },
  {
    "text": "this building DL so whenever I compile something that goes into the DL I pass",
    "start": "2992839",
    "end": "2998280"
  },
  {
    "text": "this compiler option that's setting the building DL uh thing again then using my build system so whenever I build stuff",
    "start": "2998280",
    "end": "3004040"
  },
  {
    "text": "that goes into the D Building D is set so now DSO export means D export and if",
    "start": "3004040",
    "end": "3010119"
  },
  {
    "text": "I'm not if I'm just using this header file because I'm using the dll I have not set this one and then it says then",
    "start": "3010119",
    "end": "3016079"
  },
  {
    "text": "it means DL import and that's how we can can make that work and if you're not on",
    "start": "3016079",
    "end": "3021920"
  },
  {
    "text": "Windows um you just uh use this like more sensible thing like at least",
    "start": "3021920",
    "end": "3027720"
  },
  {
    "text": "to me you just Define it only when you build your you just said well this one is",
    "start": "3027720",
    "end": "3033760"
  },
  {
    "text": "visible uh to everyone right so that's a crossplatform kind of trick you can do",
    "start": "3033760",
    "end": "3038839"
  },
  {
    "text": "for this if you're if you're into shipping crossplatform Dynamic libraries uh which has a whole list of interesting",
    "start": "3038839",
    "end": "3046599"
  },
  {
    "text": "U problems um yeah so excellent question like can you",
    "start": "3046599",
    "end": "3053839"
  },
  {
    "text": "can you see these things and if you use n m on Library o I can only see that well these have Global binding in the",
    "start": "3053839",
    "end": "3059760"
  },
  {
    "text": "text section there's nothing about visibility here and that confused me initially when I was trying to figure this stuff out like like where what's",
    "start": "3059760",
    "end": "3066839"
  },
  {
    "text": "the difference and like how to view it uh readelf if you p- s to relf you can",
    "start": "3066839",
    "end": "3072599"
  },
  {
    "text": "see the symbol table and relf has a lot more details here so it's a bit nicer because you have here's the binding the",
    "start": "3072599",
    "end": "3078640"
  },
  {
    "text": "thing that matters when you make the library and here's the visibility so they both have Global binding so they can call each other when you inside of",
    "start": "3078640",
    "end": "3084760"
  },
  {
    "text": "the so but on the outside internal function is hidden API function is",
    "start": "3084760",
    "end": "3091960"
  },
  {
    "text": "default I can also list the symbol table on my myo so after linking library. o on",
    "start": "3092680",
    "end": "3099559"
  },
  {
    "text": "all of my thousands of other files into my shared object I can list the symbols here and now we see oh there's a new",
    "start": "3099559",
    "end": "3105960"
  },
  {
    "text": "symbol table so far we only seen Sim tab but here's a new one called Dum and dum",
    "start": "3105960",
    "end": "3111680"
  },
  {
    "text": "only has API function there global binding default visibility and the internal function is not even in that uh",
    "start": "3111680",
    "end": "3118319"
  },
  {
    "text": "symbol table but why why do I have two symbol",
    "start": "3118319",
    "end": "3123440"
  },
  {
    "text": "tables because like all the info is in here right everything is in the normal symbol table so why do I like duplicate",
    "start": "3123440",
    "end": "3129960"
  },
  {
    "text": "half of that information in in a another symbol table um and the reason for that",
    "start": "3129960",
    "end": "3136200"
  },
  {
    "text": "is that um Sy tab is used for static linking the Dum is used for um Dynamic",
    "start": "3136200",
    "end": "3142559"
  },
  {
    "text": "linking and um let's I think I actually have uh yes I",
    "start": "3142559",
    "end": "3148440"
  },
  {
    "text": "have a slide for this yeah yeah why not just put binding and visibility in one table it's already actually in one table",
    "start": "3148440",
    "end": "3154599"
  },
  {
    "text": "it's it's in S tab so why I also have a dsim the thing is that the dynamic symbol table is needed at runtime so",
    "start": "3154599",
    "end": "3162359"
  },
  {
    "text": "when I load my executable and all of my SOS the dynamic Linker and loader has to patch up some of these addresses to call",
    "start": "3162359",
    "end": "3168119"
  },
  {
    "text": "between the SOS um yep and then it's nice if that table",
    "start": "3168119",
    "end": "3174960"
  },
  {
    "text": "is kind of small doesn't take a lot of space in memory uh and it's quick to look up in if it's a bit",
    "start": "3174960",
    "end": "3181920"
  },
  {
    "text": "small and if you care about size there's also the strip tool that we saw briefly",
    "start": "3181920",
    "end": "3187520"
  },
  {
    "text": "before that can strip away the symbol table so after making my so I can run strip on Theo and strip away the the",
    "start": "3187520",
    "end": "3194440"
  },
  {
    "text": "static symbol table which is the big one which has everything and then it can leave only dsum which only has this",
    "start": "3194440",
    "end": "3200240"
  },
  {
    "text": "little subset of your symbols that go go into your API so now you have a smaller",
    "start": "3200240",
    "end": "3205480"
  },
  {
    "text": "as well which uh some people care about",
    "start": "3205480",
    "end": "3210640"
  },
  {
    "text": "um and another reason to use strip is that it can add a bit of security by obscurity right so if if I'm like a",
    "start": "3210640",
    "end": "3218680"
  },
  {
    "text": "mediocre guy somewhere who wants to try to reverse my competitor if the static symbol table is there I can just put",
    "start": "3218680",
    "end": "3225200"
  },
  {
    "text": "break points on like all the like interesting looking stuff I'll list all the symbols of this shared object and",
    "start": "3225200",
    "end": "3230920"
  },
  {
    "text": "I'll just put break points on the encrypt stuff on the super secret function and stuff like that so if if",
    "start": "3230920",
    "end": "3235960"
  },
  {
    "text": "that's dripped away it's it raises the threshold a little bit so like normal guys like me will give up but like when",
    "start": "3235960",
    "end": "3243119"
  },
  {
    "text": "Chinese government is trying they will probably be able to do it still right but a little bit of security by",
    "start": "3243119",
    "end": "3248799"
  },
  {
    "text": "obscurity can be fine sometimes right but there are more symbol tables",
    "start": "3248799",
    "end": "3254960"
  },
  {
    "text": "there are at least three that I I know about like there's also the debug s table right you have this the static",
    "start": "3254960",
    "end": "3262960"
  },
  {
    "text": "symbol table and the dynamic one they just have here's the name it's there that's all they have so they're not too",
    "start": "3262960",
    "end": "3268280"
  },
  {
    "text": "large but the debug thing has all sorts of stuff like which file did this come from and this instruction here come came",
    "start": "3268280",
    "end": "3274720"
  },
  {
    "text": "from that line in this source file and like lots of info and again if you care about size you will and also if you care",
    "start": "3274720",
    "end": "3281319"
  },
  {
    "text": "about like a little bit of security by obscurity you will strip away both the static symbol table and the debug info",
    "start": "3281319",
    "end": "3287160"
  },
  {
    "text": "so it's only the D Sim left and you'll have a smaller",
    "start": "3287160",
    "end": "3292000"
  },
  {
    "text": "binary yes um now we talked about like what",
    "start": "3294079",
    "end": "3300000"
  },
  {
    "text": "symbols are why we need them how they work and stuff but last thing I I want to mention here is like who gets a",
    "start": "3300000",
    "end": "3306000"
  },
  {
    "text": "symbol like which things in your program need symbols right so let's play a",
    "start": "3306000",
    "end": "3312079"
  },
  {
    "text": "little game of who gets a symbol the first one is similar to what",
    "start": "3312079",
    "end": "3317440"
  },
  {
    "text": "we've seen you have a global variable and you have a function that's defined here so which of these get a",
    "start": "3317440",
    "end": "3324000"
  },
  {
    "text": "symbol both yeah object capital D Global",
    "start": "3324000",
    "end": "3330280"
  },
  {
    "text": "binding in the data section and the function capital T the global binding in the text section so you get symbols for",
    "start": "3330280",
    "end": "3335599"
  },
  {
    "text": "both of these what if I make them",
    "start": "3335599",
    "end": "3341720"
  },
  {
    "text": "static so now they have internal linkage what changes then now I get this lower case ones",
    "start": "3342039",
    "end": "3350000"
  },
  {
    "text": "because now they have internal linkage they have local binding so they can't be seen from the outside after you compile this stuff St so now they get the",
    "start": "3350000",
    "end": "3356599"
  },
  {
    "text": "lowercase ones and I put a question mark here because if I actually use them I",
    "start": "3356599",
    "end": "3363880"
  },
  {
    "text": "get them if I don't use them the compiler will just not emit this code because no one else will be able to link",
    "start": "3363880",
    "end": "3369200"
  },
  {
    "text": "to it you're not using it so I'll just I would just won't emit code for",
    "start": "3369200",
    "end": "3374520"
  },
  {
    "text": "this um and also this is a debug build and if I built this in release I would",
    "start": "3374520",
    "end": "3381039"
  },
  {
    "text": "probably get like constant folding and all this stuff everything would be inline and then again this wouldn't be",
    "start": "3381039",
    "end": "3387079"
  },
  {
    "text": "needed anymore in the binary then I have a function again and",
    "start": "3387079",
    "end": "3395599"
  },
  {
    "text": "this time the function takes a parameter called param and it has a local variable called value so which things which of",
    "start": "3395599",
    "end": "3402319"
  },
  {
    "text": "these get symbols uh function param and",
    "start": "3402319",
    "end": "3407119"
  },
  {
    "text": "value yeah function because the function is a thing in your program it's like",
    "start": "3411480",
    "end": "3416920"
  },
  {
    "text": "here is the function everyone who calls this function needs to call that function so they have to be able to link to it they have to be able to find it so",
    "start": "3416920",
    "end": "3423160"
  },
  {
    "text": "we need a symbol param and value like every time you call this function you",
    "start": "3423160",
    "end": "3428480"
  },
  {
    "text": "have a different instantiation of this function and you get a stack frame somewhere so like where is param value well that changes that depends on where",
    "start": "3428480",
    "end": "3435160"
  },
  {
    "text": "you are in the stack so it's not and it's not one thing right it's not the param for the entire program there are",
    "start": "3435160",
    "end": "3440760"
  },
  {
    "text": "many of these every time you call the function and if it's a recursive function you can have many of this function on the stack at one time so",
    "start": "3440760",
    "end": "3447240"
  },
  {
    "text": "these are not like a thing so you can't link to them they're not a singular thing they don't need symbols and you",
    "start": "3447240",
    "end": "3453599"
  },
  {
    "text": "you couldn't if you tried make symbols for",
    "start": "3453599",
    "end": "3457760"
  },
  {
    "text": "these what if I put static here this is a different static than the one I had earlier like what does this",
    "start": "3458920",
    "end": "3465640"
  },
  {
    "text": "static mean yeah it means that this is uh this",
    "start": "3465640",
    "end": "3472720"
  },
  {
    "text": "is basically like a local Global kind of thing it's it's has static storage duration so there's only one value in",
    "start": "3472720",
    "end": "3478960"
  },
  {
    "text": "the entire execution of the program so every time I call this function it's the same value so if I increment this by one",
    "start": "3478960",
    "end": "3485880"
  },
  {
    "text": "every time I call the function then each invocation is going to see an incremented value it's kind of like a",
    "start": "3485880",
    "end": "3491559"
  },
  {
    "text": "global but you just scoped inside of this function um so now who gets the symbol",
    "start": "3491559",
    "end": "3498079"
  },
  {
    "text": "function Pam value function and value yep that's",
    "start": "3498079",
    "end": "3506160"
  },
  {
    "text": "correct because now when I use value here I need to be able to refer to the same value every time it's just not",
    "start": "3506160",
    "end": "3512400"
  },
  {
    "text": "something on the stack or in the register or whatever I need to always get the same one so it's like a singular thing in my program that I need to be",
    "start": "3512400",
    "end": "3518680"
  },
  {
    "text": "able to access so this value goes off in some of the data segments somewhere and",
    "start": "3518680",
    "end": "3524240"
  },
  {
    "text": "I need to find the right one every time so then that's why I get um a symbol for this one but again since I'm not",
    "start": "3524240",
    "end": "3530960"
  },
  {
    "text": "modifying it is in this example like there's no modifications here uh it could be in line as well and then you",
    "start": "3530960",
    "end": "3536880"
  },
  {
    "text": "don't get the symbol and yeah it's also lowercase D here it has internal linkage",
    "start": "3536880",
    "end": "3542160"
  },
  {
    "text": "because like no one can access that from the",
    "start": "3542160",
    "end": "3546520"
  },
  {
    "text": "outside yeah I'll quickly mention this and then I think we no actually we are near in the end so I'll have some time",
    "start": "3550160",
    "end": "3555960"
  },
  {
    "text": "for questions so just to summarize who gets a symbol only things that there are one of like the global or the function",
    "start": "3555960",
    "end": "3562920"
  },
  {
    "text": "they have to be one thing that you can link to if a symbol has internal linkage and",
    "start": "3562920",
    "end": "3568680"
  },
  {
    "text": "it's inlined it's not emitted it's because then you no one else will be able to use it and the same if you don't",
    "start": "3568680",
    "end": "3575280"
  },
  {
    "text": "use a weak or unique symbol you don't get the code for",
    "start": "3575280",
    "end": "3579720"
  },
  {
    "text": "it right so in summary uh for the entire thing we saw in the beginning that we have this separate compilation model",
    "start": "3581400",
    "end": "3588280"
  },
  {
    "text": "which uh and then you have relocations because the compiler doesn't know where things are the link will fill it in um",
    "start": "3588280",
    "end": "3593920"
  },
  {
    "text": "that's why we have symbol so the Linker can fill in these things external internal linkage maps to",
    "start": "3593920",
    "end": "3599200"
  },
  {
    "text": "Global and local binding on elf weak and unique binding is used for symbols defined in headers to allow for the",
    "start": "3599200",
    "end": "3606960"
  },
  {
    "text": "duplicates for shared objects you use visibility instead of binding and you can control this with f visibility or",
    "start": "3606960",
    "end": "3612880"
  },
  {
    "text": "the attribute visibility we saw we have this various section data section text section Sim",
    "start": "3612880",
    "end": "3619039"
  },
  {
    "text": "Tab dsim and then Raa is for locations we can use NM OB jump and relf",
    "start": "3619039",
    "end": "3625160"
  },
  {
    "text": "to look at our binaries and we can use strip to remove",
    "start": "3625160",
    "end": "3630319"
  },
  {
    "text": "symbols and finally we saw that like only these singular things that there are one of actually get symbols you",
    "start": "3630319",
    "end": "3636079"
  },
  {
    "text": "don't need symbols for locals and stuff uh yeah here are links to this",
    "start": "3636079",
    "end": "3642760"
  },
  {
    "text": "talk talks about like the assembly that of the kind that we're using here are like related to calling functions and stuff uh and this one um goes more into",
    "start": "3642760",
    "end": "3650880"
  },
  {
    "text": "detail about uh linking so that's it thank thanks for",
    "start": "3650880",
    "end": "3656880"
  },
  {
    "text": "coming I think we're exactly on time but uh did it take one or two questions",
    "start": "3662200",
    "end": "3670000"
  },
  {
    "text": "or is there a lower case weak I don't think so I can't imagine a use case for",
    "start": "3671000",
    "end": "3676960"
  },
  {
    "text": "it because if it's weak it's because you have to like disambiguate these things but uh I'm not sure I don't think so",
    "start": "3676960",
    "end": "3685400"
  },
  {
    "text": "one more question no I'll hang around here so you can come up and ask if you want as well",
    "start": "3685400",
    "end": "3691880"
  },
  {
    "text": "thank you",
    "start": "3691880",
    "end": "3695359"
  }
]