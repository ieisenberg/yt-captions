[
  {
    "text": "oh wait it's on woohoo welcome everybody",
    "start": "2340",
    "end": "8580"
  },
  {
    "text": "so uh This Is How does hot reload even work um",
    "start": "8580",
    "end": "14219"
  },
  {
    "text": "I am kind of going to tell you a little bit of it I can't tell you everything because it takes too long",
    "start": "14219",
    "end": "20460"
  },
  {
    "text": "um I'm going to tell you the bit that I found really interesting when I learned",
    "start": "20460",
    "end": "26039"
  },
  {
    "text": "this as part of having to work on hot reload so I hope you find it interesting too but",
    "start": "26039",
    "end": "33600"
  },
  {
    "text": "hot reload is a little bit of a funny term because it is partly a feature and",
    "start": "33600",
    "end": "40140"
  },
  {
    "text": "it is partly a little bit marketing so just to be very clear the bit of hot reload I'm talking about",
    "start": "40140",
    "end": "47040"
  },
  {
    "text": "is applying changes that we make to code into a.net assembly",
    "start": "47040",
    "end": "52140"
  },
  {
    "text": "while it's running I'm not going to talk about all of these things but later when I ask for questions if",
    "start": "52140",
    "end": "58800"
  },
  {
    "text": "any of them are interesting there's some hints feel free there is way more to",
    "start": "58800",
    "end": "63960"
  },
  {
    "text": "this there's lots of messy details and I'm just got a completely gloss over them for the purposes of time",
    "start": "63960",
    "end": "70619"
  },
  {
    "text": "so the key thing here is a.net assembly",
    "start": "70619",
    "end": "75659"
  },
  {
    "text": "and so before I can tell you how hot reload works I have to tell you what a.net assembly is",
    "start": "75659",
    "end": "81900"
  },
  {
    "text": "maybe you know maybe you don't if you're going to find out so what's in a.net assembly so this is a screenshot",
    "start": "81900",
    "end": "88140"
  },
  {
    "text": "of ilspy uh maybe some of you have used it it's an awesome open source project you should",
    "start": "88140",
    "end": "93720"
  },
  {
    "text": "a.net assembly consists of two main parts there is metadata the",
    "start": "93720",
    "end": "101040"
  },
  {
    "text": "right metadata meaning data describing the thing so this describes your dll",
    "start": "101040",
    "end": "106400"
  },
  {
    "text": "specifically in the metadata there is metadata tables that's what we'll be",
    "start": "106400",
    "end": "111479"
  },
  {
    "text": "looking at and then of course there's your code they're the two things in an assembly",
    "start": "111479",
    "end": "116659"
  },
  {
    "text": "and of course hopefully we all know your c-sharp code is not really in the",
    "start": "116659",
    "end": "121799"
  },
  {
    "text": "assembly it's actually IL and sadly we have to talk a little bit about IL which",
    "start": "121799",
    "end": "127860"
  },
  {
    "text": "is sad because I try to avoid it in life but sometimes you can't",
    "start": "127860",
    "end": "134060"
  },
  {
    "text": "so let's talk about metadata tables this is ilspy's view of the metadata",
    "start": "134160",
    "end": "139739"
  },
  {
    "text": "tables and I look at this and I see that they're called tables and",
    "start": "139739",
    "end": "145319"
  },
  {
    "text": "I look at these grids with columns and rows and I think this looks like a relational database",
    "start": "145319",
    "end": "153620"
  },
  {
    "text": "and if this was a database conference I might be kicked out for saying that there's a relational database inside",
    "start": "153620",
    "end": "158640"
  },
  {
    "text": "your.net assembly if this was a.net conference I might get kicked out for that too but I think there's a little relational database at",
    "start": "158640",
    "end": "165239"
  },
  {
    "text": "the start of your dotted assembly there are primary keys this is a metadata token",
    "start": "165239",
    "end": "172440"
  },
  {
    "text": "uh o20001 I think that was the right number Rose this is the primary key of this Row in",
    "start": "172440",
    "end": "181440"
  },
  {
    "text": "the type def table type def meeting type definition if you look across to the",
    "start": "181440",
    "end": "186660"
  },
  {
    "text": "name column there's module we'll ignore that don't know what that is but the next row says program that's the program",
    "start": "186660",
    "end": "193319"
  },
  {
    "text": "class so there's a row in a database that describes the program class and it has a",
    "start": "193319",
    "end": "199140"
  },
  {
    "text": "primary key of o20001",
    "start": "199140",
    "end": "204060"
  },
  {
    "text": "yeah two good sorry I don't have my glasses on um there's also foreign keys so",
    "start": "204239",
    "end": "211560"
  },
  {
    "text": "part of types is methods and so we have a method list column in our database and if we look at",
    "start": "211560",
    "end": "219599"
  },
  {
    "text": "row two we can see method list is 06001 and if we look across at the method",
    "start": "219599",
    "end": "225360"
  },
  {
    "text": "table there's a primary key 060001 so that's a",
    "start": "225360",
    "end": "230640"
  },
  {
    "text": "foreign key now it's kind of a weird foreign key because it's kind of backwards right normally you would say well if you were designing a database",
    "start": "230640",
    "end": "236459"
  },
  {
    "text": "the method uh table should have a field that maps to the type def table so I get",
    "start": "236459",
    "end": "243180"
  },
  {
    "text": "that it's a bit funny but there's lots of compromises made in this mini relational database",
    "start": "243180",
    "end": "249840"
  },
  {
    "text": "for two main reasons number one is efficiency we want to store essentially store as little data as",
    "start": "249840",
    "end": "256320"
  },
  {
    "text": "possible because we produce a lot of dll files and they can get very big because you all of you write lots of code so we",
    "start": "256320",
    "end": "263639"
  },
  {
    "text": "want the metadata to be as small as it can be and then the other reason is efficiency we have to read this in",
    "start": "263639",
    "end": "269699"
  },
  {
    "text": "for every dll as part of running the code and so we want to be able to read it efficiently",
    "start": "269699",
    "end": "275280"
  },
  {
    "text": "and the way this is achieved is there's two well there's one trick and one",
    "start": "275280",
    "end": "281820"
  },
  {
    "text": "assumption so the trick is in the metadata token so what I",
    "start": "281820",
    "end": "287280"
  },
  {
    "text": "described as a primary key it's an integer right four byte number",
    "start": "287280",
    "end": "292979"
  },
  {
    "text": "and if you're one of these annoying developers who likes to be really",
    "start": "292979",
    "end": "298080"
  },
  {
    "text": "performant which of course people who design things like the ecma 335 spec tend to be",
    "start": "298080",
    "end": "304259"
  },
  {
    "text": "you see an integer and you think how much stuff can I cram in there so there's four bytes the first byte tells",
    "start": "304259",
    "end": "312000"
  },
  {
    "text": "you the table that this primary key comes from that's really weird for databases I get",
    "start": "312000",
    "end": "318240"
  },
  {
    "text": "it go with me and then the next three bytes tell you the row number",
    "start": "318240",
    "end": "323580"
  },
  {
    "text": "so this does mean that there's a limit to how many methods you can put in your.net assembly because once you've got more than three bytes worth",
    "start": "323580",
    "end": "329520"
  },
  {
    "text": "bad luck compiler there's a limit to how many strings you can put in same reason I actually we actually hit this limit in",
    "start": "329520",
    "end": "335880"
  },
  {
    "text": "rosin in our test classes it's actually quite funny we have to split them up into multiple projects but so these",
    "start": "335880",
    "end": "341759"
  },
  {
    "text": "these primary keys the trick to them is that they encode in",
    "start": "341759",
    "end": "347699"
  },
  {
    "text": "the ID what table they come from so if we look at this method",
    "start": "347699",
    "end": "355880"
  },
  {
    "text": "this methodless method list column which is actually a terrible example for what I'm saying because the column is called",
    "start": "355880",
    "end": "362160"
  },
  {
    "text": "method list like where else is it going to point but you know you could imagine maybe it said member",
    "start": "362160",
    "end": "368100"
  },
  {
    "text": "list and it was just a list of members that could be any type we couldn't know the type from the ID",
    "start": "368100",
    "end": "373199"
  },
  {
    "text": "right 06 that points to the method table uh say this field list that's o4 zero",
    "start": "373199",
    "end": "379860"
  },
  {
    "text": "zero zero zero there's no fields in this type so there's no row zero zero means nothing",
    "start": "379860",
    "end": "386100"
  },
  {
    "text": "but o4 I don't know because I haven't read the spec but I suspect the field table is",
    "start": "386100",
    "end": "392280"
  },
  {
    "text": "table four if we look at base type O one o o d",
    "start": "392280",
    "end": "398759"
  },
  {
    "text": "so you start to look at these these database tables of lots and lots of funny numbers and bytes and you think",
    "start": "398759",
    "end": "404699"
  },
  {
    "text": "who could understand this and actually they kind of start to make sense scarily enough and if we go look up o1 the 01",
    "start": "404699",
    "end": "411300"
  },
  {
    "text": "table which is the type reference so there's types defined in your assembly and there's types of reference buyer assembly and they're stored separately",
    "start": "411300",
    "end": "417240"
  },
  {
    "text": "so we go look up the type reference table we find a record that says 01 OD and its name is object and that makes",
    "start": "417240",
    "end": "424800"
  },
  {
    "text": "sense because program class inherits from object now in C sharp we don't need to specify",
    "start": "424800",
    "end": "432479"
  },
  {
    "text": "that right it's assumed in.net in metadata describing your dll",
    "start": "432479",
    "end": "439500"
  },
  {
    "text": "it's not C sharp so that assumption maybe doesn't exist so this dll clearly",
    "start": "439500",
    "end": "445199"
  },
  {
    "text": "says there's a typical program it inherits from object and in fact we can go further with that and I'll show you",
    "start": "445199",
    "end": "450539"
  },
  {
    "text": "in a minute but like that 23001 actually points to the dll but object was found",
    "start": "450539",
    "end": "455580"
  },
  {
    "text": "in there's no assumptions in here at all which is something to remember because it's a bit",
    "start": "455580",
    "end": "460800"
  },
  {
    "text": "weird C sharp is high level language this is you know it's not a language but",
    "start": "460800",
    "end": "466560"
  },
  {
    "text": "like it's much more low level but so using this trick we get really",
    "start": "466560",
    "end": "472680"
  },
  {
    "text": "expressive uh data which lets us have less data",
    "start": "472680",
    "end": "478319"
  },
  {
    "text": "which is good for our efficiency thing so for example there's a table that stores uh",
    "start": "478319",
    "end": "483720"
  },
  {
    "text": "attributes you know you put attribute of a method a property you type Etc there's a table that stores them it has a more",
    "start": "483720",
    "end": "490440"
  },
  {
    "text": "normal foreign key it has a parent column the parent for any attribute tells you which thing the attribute is",
    "start": "490440",
    "end": "496440"
  },
  {
    "text": "applied to and that's all it needs all it needs is a parent",
    "start": "496440",
    "end": "501780"
  },
  {
    "text": "column that is a token and those tokens they already tell you what type of object it is and so you know the little",
    "start": "501780",
    "end": "508680"
  },
  {
    "text": "wires go off and whatever so it's a very efficient way of storing we get in four bytes of information we can know exactly",
    "start": "508680",
    "end": "514560"
  },
  {
    "text": "what an attribute is applied to so it's quite efficient so efficiency is goal number one",
    "start": "514560",
    "end": "519959"
  },
  {
    "text": "the other thing that's weird about these tokens is",
    "start": "519959",
    "end": "525959"
  },
  {
    "text": "well so the the database is weird because it doesn't exist at all",
    "start": "525959",
    "end": "533399"
  },
  {
    "text": "right then you press build the compiler writes it out entirely stops writing it",
    "start": "533399",
    "end": "538440"
  },
  {
    "text": "and then nothing ever touches the database ever again and that assumption allows for more",
    "start": "538440",
    "end": "544380"
  },
  {
    "text": "optimization so for example metadata tokens they always start at row number one there are never any gaps",
    "start": "544380",
    "end": "552180"
  },
  {
    "text": "and there is a very well-defined order for the rows in any table it's defined in the spec",
    "start": "552180",
    "end": "559260"
  },
  {
    "text": "and so knowing that the other weird trick about metadata tables is these primary keys they don't",
    "start": "559260",
    "end": "566760"
  },
  {
    "text": "actually exist because you don't need them you know the rows start at one you know what table you're reading you can",
    "start": "566760",
    "end": "573420"
  },
  {
    "text": "compute any key I'm reading Row one therefore the key is 0601 because I'm reading the method table and so we get",
    "start": "573420",
    "end": "579420"
  },
  {
    "text": "efficiency Again by just not storing a bunch of data which is really cool but",
    "start": "579420",
    "end": "584580"
  },
  {
    "text": "it will come up later so remember that you start to see these metadata tokens and the type table figs everywhere",
    "start": "584580",
    "end": "591300"
  },
  {
    "text": "especially iSpy does a great job of showing you so ieltspy is showing you there so method is table six and there's",
    "start": "591300",
    "end": "598680"
  },
  {
    "text": "two rows in it that's where the brackets are the other place these tokens come up is",
    "start": "598680",
    "end": "606000"
  },
  {
    "text": "of course in our IL so IELTS by is showing that this method calls",
    "start": "606000",
    "end": "611279"
  },
  {
    "text": "system.console.writeline but that's IELTS by being nice really",
    "start": "611279",
    "end": "616320"
  },
  {
    "text": "what the IELTS is is there's the call opcode which is you know some bytes that",
    "start": "616320",
    "end": "623940"
  },
  {
    "text": "maps to some enum somewhere that no one no human can read and then there's another four bytes which is the token",
    "start": "623940",
    "end": "630779"
  },
  {
    "text": "for what to call this is again where our encoding our our token type or our table name comes in",
    "start": "630779",
    "end": "638220"
  },
  {
    "text": "handy we could call a method defined in this assembly we could call a method defined in another assembly we don't",
    "start": "638220",
    "end": "643920"
  },
  {
    "text": "need to tell we don't need to have separate IL instructions for those two because the token tells us what type of thing we're",
    "start": "643920",
    "end": "650880"
  },
  {
    "text": "doing so this is 0a that's member ref so remember we can Define things and we can reference",
    "start": "650880",
    "end": "656579"
  },
  {
    "text": "things they're stored separately so member ref why we went from method to member doesn't matter",
    "start": "656579",
    "end": "663120"
  },
  {
    "text": "um ignore that I probably have said the wrong word half the time so that's so we so we're going to look up that table",
    "start": "663120",
    "end": "669779"
  },
  {
    "text": "it was row C this is all hex obviously it was row C so we find that that's the",
    "start": "669779",
    "end": "675180"
  },
  {
    "text": "right line method it has a parent that's a foreign key what does it point to point to the type reference okay go look",
    "start": "675180",
    "end": "680459"
  },
  {
    "text": "that up well that's the console type that has a resolution scope I don't know",
    "start": "680459",
    "end": "686040"
  },
  {
    "text": "call it what you want we looked that up and that's in the assembly reference and we that comes from system.console so",
    "start": "686040",
    "end": "692760"
  },
  {
    "text": "this is the level of detail that metadata has right when you call system.writeline",
    "start": "692760",
    "end": "698820"
  },
  {
    "text": "in your IDE you can hover over it you can see it comes from the system namespace we don't really in the IDE we",
    "start": "698820",
    "end": "705779"
  },
  {
    "text": "don't really expose the dll it comes from but you can see it if you go through properties the metadata however doesn't show the",
    "start": "705779",
    "end": "712800"
  },
  {
    "text": "dll it shows the assembly name but finding the dll is up to the runtime",
    "start": "712800",
    "end": "718980"
  },
  {
    "text": "and this is where you know we have type forwarding and we have done at standard versus.net thing and we look up Ms core",
    "start": "718980",
    "end": "724800"
  },
  {
    "text": "lib and the GAC and all that stuff all that stuff is separate this is kind of a thing that makes dot net dlls really",
    "start": "724800",
    "end": "731040"
  },
  {
    "text": "portable too because they encode everything about what they're calling right I am calling",
    "start": "731040",
    "end": "737120"
  },
  {
    "text": "system.console.writeline and I expect it to be an assembly called system.console but then I stop there and I don't care",
    "start": "737120",
    "end": "742860"
  },
  {
    "text": "where you find system.console and if you find it because you have some weird you know wasm compiled JavaScript ASM",
    "start": "742860",
    "end": "749220"
  },
  {
    "text": "whatever thing fund okay call my deal right call My Method um so that's really cool and that's",
    "start": "749220",
    "end": "754320"
  },
  {
    "text": "really powerful because it all came from this one metadata token that says please call oaoc whatever that means and the",
    "start": "754320",
    "end": "761339"
  },
  {
    "text": "runtime works it out so how does hot reload work",
    "start": "761339",
    "end": "767279"
  },
  {
    "text": "glad you asked uh so hopefully remember all that that's the useful bit of the talk that's the been talking maybe can like",
    "start": "767279",
    "end": "774600"
  },
  {
    "text": "you know go forth and use that knowledge at work maybe the rest not so much",
    "start": "774600",
    "end": "780000"
  },
  {
    "text": "I talk fast all right this is uh I'm going to assume this is your conceptual model of hot reload",
    "start": "780000",
    "end": "786720"
  },
  {
    "text": "uh obviously for the purposes of comedic timing this is completely wrong but we'll talk about it anyway",
    "start": "786720",
    "end": "792320"
  },
  {
    "text": "so logically speaking what happens we write some code we start in the bottom",
    "start": "792320",
    "end": "797519"
  },
  {
    "text": "right but don't worry about that it's just my PowerPoint skills we write some code we compile it we send",
    "start": "797519",
    "end": "802980"
  },
  {
    "text": "it to the runtime the runtime runs it but then we want to keep writing code and we want to compile it again and we",
    "start": "802980",
    "end": "808860"
  },
  {
    "text": "send that off to the runtime and the reason this doesn't happen or the reason this isn't how hot reload works is back to efficiency speed all",
    "start": "808860",
    "end": "817200"
  },
  {
    "text": "those things if we had to compile your whole project every time you changed code that would",
    "start": "817200",
    "end": "824579"
  },
  {
    "text": "be slow and you would complain and if we were to give the runtime an",
    "start": "824579",
    "end": "829680"
  },
  {
    "text": "entire dll or set of dlls every time then it would have a lot of work to do to try to work out",
    "start": "829680",
    "end": "836279"
  },
  {
    "text": "you know what that means the thing to the reason for this or thing to remember about hot reload in this case is",
    "start": "836279",
    "end": "843120"
  },
  {
    "text": "it's not just applying the changes but it's maintaining the state in your",
    "start": "843120",
    "end": "848940"
  },
  {
    "text": "application that's the hard bit right just applying changes easy right that's",
    "start": "848940",
    "end": "854040"
  },
  {
    "text": "essentially like if you think about a web browser you navigate you know deeply through a web through a website if you",
    "start": "854040",
    "end": "860639"
  },
  {
    "text": "refresh the page you're still at that page so you don't have to re-navigate again but you've lost all of your state",
    "start": "860639",
    "end": "866100"
  },
  {
    "text": "and so it's not as much fun so they're keeping the state to the hype up anyway so this is",
    "start": "866100",
    "end": "872040"
  },
  {
    "text": "more likely how hot it really works so we start in the top left this time",
    "start": "872040",
    "end": "878360"
  },
  {
    "text": "confusingly so we write some code we create a compilation great send it to the runtime sure it was good",
    "start": "878360",
    "end": "885000"
  },
  {
    "text": "but now we edit some more code and the first thing we have to do is we have to work out what has changed",
    "start": "885000",
    "end": "890940"
  },
  {
    "text": "again right efficiency we only want to compile the bits that we want we don't want to compile the whole thing",
    "start": "890940",
    "end": "897060"
  },
  {
    "text": "and there's a bunch of fancy algorithms in rolleston that do this um there's uh was it longest common",
    "start": "897060",
    "end": "904260"
  },
  {
    "text": "subsequence I think it's called it's like you open up the file on GitHub and at the top it says this is from this paper with a link to like a PDF and all",
    "start": "904260",
    "end": "911399"
  },
  {
    "text": "the variable names in it are like n and K and L because that's what the paper says and so therefore you cannot understand a word of it but you just",
    "start": "911399",
    "end": "918180"
  },
  {
    "text": "don't trust it works and you move on but so we have to work out what's changed and we have to importantly we have to",
    "start": "918180",
    "end": "924060"
  },
  {
    "text": "work out what's changed from a.net perspective right we're editing C sharp",
    "start": "924060",
    "end": "929339"
  },
  {
    "text": "we need to produce a.net assembly and they are strictly separate and you know",
    "start": "929339",
    "end": "935639"
  },
  {
    "text": "you'll be editing vb.net in theory you could be editing F sharp although they don't support it because",
    "start": "935639",
    "end": "941880"
  },
  {
    "text": "Roslyn doesn't do F sharp but they could and so we have to think about these edits and we have to work out what's",
    "start": "941880",
    "end": "948120"
  },
  {
    "text": "changed in terms of net and that means in terms of the metadata tables so when",
    "start": "948120",
    "end": "954120"
  },
  {
    "text": "I change a string in a method uh Rosalind will Analyze That code and",
    "start": "954120",
    "end": "959279"
  },
  {
    "text": "it will use its syntax tree and it will say ah you've changed a string literal expression a little bit and that's part of an expression and it basically walks",
    "start": "959279",
    "end": "965339"
  },
  {
    "text": "back up the tree until it hits a boundary of Ah that's in a method.net knows about methods so your edit in that",
    "start": "965339",
    "end": "972240"
  },
  {
    "text": "case is an edit to the method it doesn't actually matter what you've done in the method because if you think back to the",
    "start": "972240",
    "end": "978480"
  },
  {
    "text": "metadata tables not that I let you Linger on the list of them but you know there's no there's no metadata table for",
    "start": "978480",
    "end": "983699"
  },
  {
    "text": "line of code there's no metadata table for you know a block method is kind of the smallest",
    "start": "983699",
    "end": "989940"
  },
  {
    "text": "um well I guess fields are smaller but anyway so we work out what's changed",
    "start": "989940",
    "end": "995100"
  },
  {
    "text": "and we take our list of changes and we tell the compiler hey go and compile a",
    "start": "995100",
    "end": "1000320"
  },
  {
    "text": "Delta compilation Delta meaning just the bits that have changed and so our edit list is our",
    "start": "1000320",
    "end": "1007220"
  },
  {
    "text": "to-do list for the compiler here's the whole project but here's your bits you we want you to",
    "start": "1007220",
    "end": "1013459"
  },
  {
    "text": "compile the compiler produces that Delta compilation which is just metadata IL",
    "start": "1013459",
    "end": "1018620"
  },
  {
    "text": "disorders it's the same compiler it's the same you know same code path as compiling the full",
    "start": "1018620",
    "end": "1025100"
  },
  {
    "text": "delay we send that Delta to the runtime and the runtime applies the delta",
    "start": "1025100",
    "end": "1030319"
  },
  {
    "text": "so the fact that it's a Delta meaning it's just the changes means the runtime",
    "start": "1030319",
    "end": "1035660"
  },
  {
    "text": "doesn't have to work out what's changed so it doesn't have to go and do any magic So that's fast the fact that we're",
    "start": "1035660",
    "end": "1041058"
  },
  {
    "text": "telling the compiler what's changed so it doesn't have to compile everything that makes it faster right so that so the linchpin is working out what has",
    "start": "1041059",
    "end": "1046760"
  },
  {
    "text": "changed and everything sort of flows from there the act of applying the delta",
    "start": "1046760",
    "end": "1054380"
  },
  {
    "text": "the way that I like to think about it is so we have our relational database in our metadata",
    "start": "1054380",
    "end": "1059840"
  },
  {
    "text": "and it's right once read-only never changes all that stuff the runtime",
    "start": "1059840",
    "end": "1065960"
  },
  {
    "text": "essentially has a representation of that in memory for each assembly and this is",
    "start": "1065960",
    "end": "1071780"
  },
  {
    "text": "what you query with reflection if you think about reflection being a query API over a relational database which",
    "start": "1071780",
    "end": "1077600"
  },
  {
    "text": "obviously no one would ever do but you can this is kind of what you the",
    "start": "1077600",
    "end": "1082700"
  },
  {
    "text": "information you dig out when you say give me the types and you say give me the members so it finds that record in the type table right then so give me the",
    "start": "1082700",
    "end": "1088220"
  },
  {
    "text": "members it goes looks up the member list and that's another sort of like key to",
    "start": "1088220",
    "end": "1093440"
  },
  {
    "text": "understand this you can't say give me the right line method and then read the type of it it doesn't work that way",
    "start": "1093440",
    "end": "1099559"
  },
  {
    "text": "because the metadata doesn't work that way you have to get the type first right so applying the Delta is basically",
    "start": "1099559",
    "end": "1107480"
  },
  {
    "text": "here's our compilation of what's changed the kind of update statements",
    "start": "1107480",
    "end": "1113900"
  },
  {
    "text": "maybe it's a very long bow I'm drawing I realized but anyway let's work through an example",
    "start": "1113900",
    "end": "1120140"
  },
  {
    "text": "so here is a very small class and it has three methods and here is our",
    "start": "1120140",
    "end": "1126380"
  },
  {
    "text": "method our method def table for our Baseline Baseline is what we call the you know the dll right the",
    "start": "1126380",
    "end": "1132919"
  },
  {
    "text": "thing you actually built and so we have three rows now they're tokens three four and five uh just for",
    "start": "1132919",
    "end": "1139039"
  },
  {
    "text": "illustrative purposes what is not shown here is the Constructor again in C sharp",
    "start": "1139039",
    "end": "1144559"
  },
  {
    "text": "I don't need a Constructor but the compilable synthesized one well that means the compiler has to create a",
    "start": "1144559",
    "end": "1149960"
  },
  {
    "text": "Constructor and therefore it has to go in the metadata.net does not have the same assumptions as C sharp so the",
    "start": "1149960",
    "end": "1155240"
  },
  {
    "text": "Constructor is one and then I don't know the main method for like you know running the class I don't know doesn't",
    "start": "1155240",
    "end": "1160700"
  },
  {
    "text": "matter so they're ID three four and five so we update method B",
    "start": "1160700",
    "end": "1166340"
  },
  {
    "text": "we we change the string Roslyn sees the change to the string it goes right let",
    "start": "1166340",
    "end": "1171559"
  },
  {
    "text": "me work out what that is and we produce an edit that says we have updated class",
    "start": "1171559",
    "end": "1177320"
  },
  {
    "text": "dot b now actually class is probably a bad name for this class because",
    "start": "1177320",
    "end": "1182419"
  },
  {
    "text": "the class there means the name of the class sorry uh so we have we have updated this uh",
    "start": "1182419",
    "end": "1188960"
  },
  {
    "text": "well I would call it a symbol that's a bit of a Rosalind term but anyway um this is the the thing we're updating",
    "start": "1188960",
    "end": "1194960"
  },
  {
    "text": "and so then we say hey compiler go compile this type it'll go compile this",
    "start": "1194960",
    "end": "1200000"
  },
  {
    "text": "project here's your to-do list that's right one item cluster B and so the compiler produces a generation oh I",
    "start": "1200000",
    "end": "1206780"
  },
  {
    "text": "forgot to mention that every time through the loop of of updating it's called The Generation",
    "start": "1206780",
    "end": "1212120"
  },
  {
    "text": "so for generation one our Delta compilation has a method def table that looks like this",
    "start": "1212120",
    "end": "1219279"
  },
  {
    "text": "yes it doesn't make sense just wait uh and so then we make another edit",
    "start": "1219860",
    "end": "1225679"
  },
  {
    "text": "we edit method a and Method B so in version two of method a version three and Method B our edits have disappeared",
    "start": "1225679",
    "end": "1231860"
  },
  {
    "text": "which doesn't matter but it just so happens that we don't know the edits after a generation has finished",
    "start": "1231860",
    "end": "1239600"
  },
  {
    "text": "um it doesn't really matter to the process it just something I like to complain about because it makes my job a bit harder sometimes",
    "start": "1239600",
    "end": "1245480"
  },
  {
    "text": "so generation two we have two updates Class A and Class B methods have been updated and now we have a method def",
    "start": "1245480",
    "end": "1251480"
  },
  {
    "text": "table with two rows in it cool so hopefully you can all see the very",
    "start": "1251480",
    "end": "1256700"
  },
  {
    "text": "obvious problem here these IDs don't make any sense right if",
    "start": "1256700",
    "end": "1262700"
  },
  {
    "text": "we're thinking of this as an update statement we have just ruined everything because how did method be method B in",
    "start": "1262700",
    "end": "1268940"
  },
  {
    "text": "this one slide is id4 id1 and id2 clearly doesn't work",
    "start": "1268940",
    "end": "1276380"
  },
  {
    "text": "so the the key to hot reload is there's a",
    "start": "1276380",
    "end": "1281419"
  },
  {
    "text": "little bit of information that the compiler produces when it's producing a Delta compilation that tells the runtime",
    "start": "1281419",
    "end": "1287980"
  },
  {
    "text": "how to apply these updates and it's essentially well it's not essentially it is a map",
    "start": "1287980",
    "end": "1294860"
  },
  {
    "text": "and it's a map of ID it's a map of tokens so",
    "start": "1294860",
    "end": "1301100"
  },
  {
    "text": "before I get into that why are they one and two",
    "start": "1301100",
    "end": "1306559"
  },
  {
    "text": "I'm going to make this interactive does anyone have a guess of why why is generation one method B id1",
    "start": "1306559",
    "end": "1313400"
  },
  {
    "text": "correct first row so this is where the fact that the tokens don't really exist is important right there isn't actually",
    "start": "1313400",
    "end": "1319220"
  },
  {
    "text": "a token that says method B is token one it just so happens we've asked the compiler",
    "start": "1319220",
    "end": "1325700"
  },
  {
    "text": "to produce to compile one method it has compiled one method and written one row in our table",
    "start": "1325700",
    "end": "1331820"
  },
  {
    "text": "so when we read that table in it's Row one so there's no way for us to say",
    "start": "1331820",
    "end": "1336980"
  },
  {
    "text": "in the method def table this is actually row four so we need this extra map",
    "start": "1336980",
    "end": "1343100"
  },
  {
    "text": "so the map where there's a map and there's a log and it's a two two metadata tables especially for hot",
    "start": "1343100",
    "end": "1349340"
  },
  {
    "text": "reload or for edit and continue ANC map ANC log and these are stored in the pdb which we",
    "start": "1349340",
    "end": "1355880"
  },
  {
    "text": "haven't talked about so pdb is we have a metadata from our dll and a pdb is just",
    "start": "1355880",
    "end": "1362659"
  },
  {
    "text": "a bunch more data that's all it is and it's just metadata there's no code in there there's no IL pdb stands for",
    "start": "1362659",
    "end": "1369260"
  },
  {
    "text": "program database thank you anyway",
    "start": "1369260",
    "end": "1375158"
  },
  {
    "text": "I'm not crazy I promise it's a relationship so the pdb contains a bunch of tables",
    "start": "1375440",
    "end": "1381679"
  },
  {
    "text": "and again thinking about efficiency the tables in the metadata in the dll",
    "start": "1381679",
    "end": "1387740"
  },
  {
    "text": "are the ones that are required for the runtime to run your code and everything",
    "start": "1387740",
    "end": "1393080"
  },
  {
    "text": "else is in the pdb because you don't have to ship the pdbs to run your code",
    "start": "1393080",
    "end": "1398480"
  },
  {
    "text": "but they are things that help you with debugging scenarios like our reload and it's also why pdbs are usually very big",
    "start": "1398480",
    "end": "1405380"
  },
  {
    "text": "because you know we try to keep as much as possible out of the main dll so there's things like the document table",
    "start": "1405380",
    "end": "1411140"
  },
  {
    "text": "the document table tells us the file name for every method type you know",
    "start": "1411140",
    "end": "1417080"
  },
  {
    "text": "every well every sequence point which is a thing that's how we get nice stat traces and",
    "start": "1417080",
    "end": "1423980"
  },
  {
    "text": "that's how go to definition can work sometimes right it's pulling data out of that table we don't need to know what",
    "start": "1423980",
    "end": "1429020"
  },
  {
    "text": "file name things came from to run the code but it helps in debugging we have method debug information it's kind of",
    "start": "1429020",
    "end": "1435140"
  },
  {
    "text": "obvious we have Scopes because IL doesn't have Scopes but breakpoints",
    "start": "1435140",
    "end": "1440840"
  },
  {
    "text": "local variables do we have custom debug information which I love because it's like I don't know if this is true but in",
    "start": "1440840",
    "end": "1447500"
  },
  {
    "text": "my mind they decided to name a bunch of tables like oh we're going to store this we're going to store this we're going to see this we just want to store a bunch",
    "start": "1447500",
    "end": "1453320"
  },
  {
    "text": "of other stuff as well and we everything goes in custom debug information great but of course there's no ENT map and ANC",
    "start": "1453320",
    "end": "1460100"
  },
  {
    "text": "log so where is it well there's a setting in IELTS by called hide empty metadata tables",
    "start": "1460100",
    "end": "1467659"
  },
  {
    "text": "so you go and you turn that off and now you can see a few more tables in the pdb file we get State machine method",
    "start": "1467659",
    "end": "1474500"
  },
  {
    "text": "that's a good one state machine has data about your async methods and your yield",
    "start": "1474500",
    "end": "1480679"
  },
  {
    "text": "your iterators because they become State machines and so in order to debug and step through these State machines we",
    "start": "1480679",
    "end": "1486919"
  },
  {
    "text": "have to know the information anyway still no ANC log and NC map like well yeah okay this is il spy it's looking at",
    "start": "1486919",
    "end": "1494120"
  },
  {
    "text": "a dll the Delta compilations never exist on disk they don't like there's no such thing as a Delta dll doesn't exist",
    "start": "1494120",
    "end": "1501740"
  },
  {
    "text": "so maybe that's why else why doesn't it so you're going to look up the spec you look up ecma 335 and you're like",
    "start": "1501740",
    "end": "1507260"
  },
  {
    "text": "David told me there was an ENC log table and you search for it in the spec and you find exactly one result",
    "start": "1507260",
    "end": "1513260"
  },
  {
    "text": "and it says yeah this is just used for red LinkedIn you don't worry about it if you're a conspiratory conspiratorial",
    "start": "1513260",
    "end": "1519980"
  },
  {
    "text": "person you think Microsoft's trying to keep their secrets and stop jet brains from using hot reload which is of course",
    "start": "1519980",
    "end": "1525260"
  },
  {
    "text": "right because jetbrain sports are reload the reality is of course developers are just really bad at documentation",
    "start": "1525260",
    "end": "1531380"
  },
  {
    "text": "and I say all this to to introduce the next tool I'll spy I love our spy it's",
    "start": "1531380",
    "end": "1536600"
  },
  {
    "text": "very nice it looks very nice it's very friendly once you can see past all of the magic numbers and see them for the",
    "start": "1536600",
    "end": "1542779"
  },
  {
    "text": "tokens they are but now we have to talk about mdv so mdv is stands for metadata visualizer",
    "start": "1542779",
    "end": "1550400"
  },
  {
    "text": "and it was described to me with two sentences the first sentence was mdv is the only",
    "start": "1550400",
    "end": "1558080"
  },
  {
    "text": "tool you ever need to look at metadata sounds good the second sentence was mdv",
    "start": "1558080",
    "end": "1566059"
  },
  {
    "text": "is designed for people who have read ecma 335 I have not read Edmonton it's not",
    "start": "1566059",
    "end": "1572840"
  },
  {
    "text": "actually that bad it sounds scary than it is but there's mdv you can go get it you can install it.net tool",
    "start": "1572840",
    "end": "1579440"
  },
  {
    "text": "um in in a slighter side of conference talk driven development up until last",
    "start": "1579440",
    "end": "1585260"
  },
  {
    "text": "week you couldn't install as a.net tool but I had to get it on this machine and it was so annoying building from source that I made it all I also wanted to do",
    "start": "1585260",
    "end": "1594500"
  },
  {
    "text": "markdown output so I could show you the results nicely but I ran out of time and it probably wouldn't have got P I wouldn't have got approved the people",
    "start": "1594500",
    "end": "1600679"
  },
  {
    "text": "who well people who like mdv being for ecma 335 readers they also like that it's just",
    "start": "1600679",
    "end": "1606740"
  },
  {
    "text": "text and then it's raw like it's great anyway in 26 minutes the longest I've ever gone",
    "start": "1606740",
    "end": "1612980"
  },
  {
    "text": "without a demo any talk let's let's jump to visual studio so this is",
    "start": "1612980",
    "end": "1618380"
  },
  {
    "text": "my little code snippet a b c now this is a different project let me run it and I'll show you so the I the tokens are",
    "start": "1618380",
    "end": "1624919"
  },
  {
    "text": "going to be different it's not going to be four five and six I don't know what's going to be we'll find out so this is just a little program uh oh it doesn't",
    "start": "1624919",
    "end": "1631400"
  },
  {
    "text": "quite fit on the screen just a little console app just runs a tight Loop and runs these methods you can see the clock",
    "start": "1631400",
    "end": "1637279"
  },
  {
    "text": "here ticking away just to prove that nothing's fake it outputs what it outputs and on the",
    "start": "1637279",
    "end": "1643400"
  },
  {
    "text": "right here we have essentially just looking in reflection",
    "start": "1643400",
    "end": "1648500"
  },
  {
    "text": "at what's in the program class this is just outputting what's in reflection and",
    "start": "1648500",
    "end": "1653960"
  },
  {
    "text": "so if I do my change to Method V2 and I press the hot relay button",
    "start": "1653960",
    "end": "1661039"
  },
  {
    "text": "we can see hello from B V2 has been updated right a code's updated no changes on the right hand side so",
    "start": "1661039",
    "end": "1667460"
  },
  {
    "text": "still only one method called B according to reflection so we have successfully hot reloaded well done everyone",
    "start": "1667460",
    "end": "1674059"
  },
  {
    "text": "uh and I'll now make my other change that I said I would B3 and we can't relate",
    "start": "1674059",
    "end": "1680360"
  },
  {
    "text": "that worked too great so scary pressing that button because if it doesn't work",
    "start": "1680360",
    "end": "1686059"
  },
  {
    "text": "um so that's the demo obviously I haven't shown you mdv yet that's because I wanted to get both Generations out of the way first",
    "start": "1686059",
    "end": "1692360"
  },
  {
    "text": "um actually I'm going to close this so",
    "start": "1692360",
    "end": "1697419"
  },
  {
    "text": "in Visual Studio I have a special flag set",
    "start": "1698299",
    "end": "1703460"
  },
  {
    "text": "that dumps information like you know diagnostic stuff about hot reload when",
    "start": "1703460",
    "end": "1708740"
  },
  {
    "text": "it does a hot reload and it dumps it to this folder and I can see two that means it's my second session of the day the",
    "start": "1708740",
    "end": "1715340"
  },
  {
    "text": "first session being in the previous talk when I practiced to make sure this would work and I can go into my app",
    "start": "1715340",
    "end": "1722000"
  },
  {
    "text": "and so here I have everything that hot reload produced normally this doesn't yeah I",
    "start": "1722000",
    "end": "1728900"
  },
  {
    "text": "said it doesn't exist on disk obviously it does but you've got to sit this flag so what we have here is we have our",
    "start": "1728900",
    "end": "1736460"
  },
  {
    "text": "at dll this is our Baseline right and our pdb that matches it we have the c-sharp files this is for you know",
    "start": "1736460",
    "end": "1742880"
  },
  {
    "text": "debugging roles and stuff we're not going to worry about that plus you know what it says because you saw me do it and then we have for each generation we",
    "start": "1742880",
    "end": "1749299"
  },
  {
    "text": "have the IL Delta the metadata Delta and the pdb Delta which is more metadata",
    "start": "1749299",
    "end": "1756080"
  },
  {
    "text": "and so we run mdv and it just goes and it knows about this file structure so it",
    "start": "1756080",
    "end": "1762440"
  },
  {
    "text": "does stuff obviously I will not expect you to read all of that so let me do this",
    "start": "1762440",
    "end": "1768679"
  },
  {
    "text": "and open it up and are we good for size cool okay",
    "start": "1768679",
    "end": "1776480"
  },
  {
    "text": "so mdv dumps out everything it found so the first thing it's going to dump out is our Baseline right generation zero is",
    "start": "1776480",
    "end": "1783140"
  },
  {
    "text": "what it calls it Greater and so this is just every metadata table so we have type ref I love this because there are",
    "start": "1783140",
    "end": "1790820"
  },
  {
    "text": "there are 20 there's not 20 but you know there's lots of rows of type riffs this",
    "start": "1790820",
    "end": "1796220"
  },
  {
    "text": "was a very small project it doesn't do much but all these attributes for the compiler has to eject whatever all that",
    "start": "1796220",
    "end": "1801980"
  },
  {
    "text": "has to exist in metadata I just love how big it is um and then we have type defs so these are types defined right there's",
    "start": "1801980",
    "end": "1809360"
  },
  {
    "text": "a few attributes which the compiler creates for us these are in basically every dll this is my class that does the",
    "start": "1809360",
    "end": "1816080"
  },
  {
    "text": "reflection output thing but here's our program class and interestingly if we",
    "start": "1816080",
    "end": "1821659"
  },
  {
    "text": "look over at the methods so IL spices method list mdv says methods",
    "start": "1821659",
    "end": "1828340"
  },
  {
    "text": "ilspy gives you one token excuse me mdv gives you a range",
    "start": "1828340",
    "end": "1834980"
  },
  {
    "text": "because of how the metadata tables work and they're just like it's just raw bytes and you have to know what you're",
    "start": "1834980",
    "end": "1840919"
  },
  {
    "text": "reading and oh I've got to the end there's a count for each table so you know how many rows to read and there's a",
    "start": "1840919",
    "end": "1846679"
  },
  {
    "text": "format for each table so you know how many columns to read and you know all this stuff so the names of these things there's not a lot of like there's no",
    "start": "1846679",
    "end": "1853340"
  },
  {
    "text": "metadata about your metadata to make to give a friendly name so mdv is being nice and showing us the end",
    "start": "1853340",
    "end": "1859460"
  },
  {
    "text": "method for this type again that doesn't really exist because you don't need it because you read in all of the types now",
    "start": "1859460",
    "end": "1866240"
  },
  {
    "text": "you Loop through the types reading methods and so you know when to stop so anyway so so for our main class we go",
    "start": "1866240",
    "end": "1871820"
  },
  {
    "text": "from eight to C cool our program class sorry as much fields",
    "start": "1871820",
    "end": "1876919"
  },
  {
    "text": "and then here we are here is our a b and c methods so where what are we nine A and",
    "start": "1876919",
    "end": "1883100"
  },
  {
    "text": "B okay fine we'll remember that here's our synthesizer Constructor here's our main method",
    "start": "1883100",
    "end": "1889039"
  },
  {
    "text": "um there's like lots of Constructors great so that's cool eight nine and ten great we can go down and we can see the",
    "start": "1889039",
    "end": "1895940"
  },
  {
    "text": "IL which no I don't know whether this is going to make any sense",
    "start": "1895940",
    "end": "1903398"
  },
  {
    "text": "nope nope nope there we are nope that's not it hang on",
    "start": "1903580",
    "end": "1909500"
  },
  {
    "text": "ah I hate the fact that I can kind of read the IL well actually I'm not I'm reading the English there we go I'm not",
    "start": "1909500",
    "end": "1914960"
  },
  {
    "text": "reading the actual op codes I have no idea what they do but so here's our method a right because it says hello from a he's a method B and you can see",
    "start": "1914960",
    "end": "1921559"
  },
  {
    "text": "we have metadata tokens here um nine A and B so this is the IL for",
    "start": "1921559",
    "end": "1927559"
  },
  {
    "text": "this row so the IL is kind of like another field but it's yeah stored separately because it's big it can be",
    "start": "1927559",
    "end": "1933799"
  },
  {
    "text": "um cool so that's our Baseline so generation one here is our one method",
    "start": "1933799",
    "end": "1940760"
  },
  {
    "text": "so again there's no primary key written down it's just that it happens to be the first one",
    "start": "1940760",
    "end": "1946399"
  },
  {
    "text": "this is a problem so here is the magic right here's the ENC",
    "start": "1946399",
    "end": "1952580"
  },
  {
    "text": "log table here's the ENC map table for the purposes of this demo for updating a method we don't need both",
    "start": "1952580",
    "end": "1958760"
  },
  {
    "text": "they they're redundant they have the same information but there's various other scenarios where the log tells us a",
    "start": "1958760",
    "end": "1965000"
  },
  {
    "text": "bit more and the mat helps us out in other ways like it's to help the runtime but for updating a method",
    "start": "1965000",
    "end": "1970220"
  },
  {
    "text": "it's it's pretty straightforward and the way this works which maybe you can deduce",
    "start": "1970220",
    "end": "1976159"
  },
  {
    "text": "based on everything I said about how metadata works and is red again there's a distinct lack of",
    "start": "1976159",
    "end": "1982340"
  },
  {
    "text": "information in this as far as hey update this method this says method def a",
    "start": "1982340",
    "end": "1988159"
  },
  {
    "text": "that's what it says that's all it says right it's like what do I do with that well it turns out this is the first",
    "start": "1988159",
    "end": "1995059"
  },
  {
    "text": "method def in the log therefore it's method Def One",
    "start": "1995059",
    "end": "2000159"
  },
  {
    "text": "but it's really method if I and so that's how that's how we tell the runtime which one to update and then same thing in the map this is the first",
    "start": "2000159",
    "end": "2006399"
  },
  {
    "text": "method def in the map a right the fact that this is at the end here and this is",
    "start": "2006399",
    "end": "2012039"
  },
  {
    "text": "in the middle here is just because of the spec of this table and they contain different things it doesn't matter the",
    "start": "2012039",
    "end": "2017080"
  },
  {
    "text": "order is defined we know how it's going to be written we know it'll never change we know there won't be any gaps and so",
    "start": "2017080",
    "end": "2022240"
  },
  {
    "text": "we can make all of these assumptions and the runtime has a bit of code that you know if the compiler changes how this is",
    "start": "2022240",
    "end": "2028179"
  },
  {
    "text": "produced it just things will just crash right like everything will die but for now we live in this wonderful world of",
    "start": "2028179",
    "end": "2033940"
  },
  {
    "text": "assumptions and everything works um and that's basically I mean that's it that's how hot really works like it's",
    "start": "2033940",
    "end": "2039760"
  },
  {
    "text": "it's for method updates anyway it's it's kind of actually well I think surprisingly simple we output a method",
    "start": "2039760",
    "end": "2047019"
  },
  {
    "text": "and then we say yeah that's that one and then the runtime goes okay and it updates all the data and in fact the",
    "start": "2047019",
    "end": "2052240"
  },
  {
    "text": "updating all the data is surprisingly simple too because remember there's no primary Keys all of these fields are",
    "start": "2052240",
    "end": "2058839"
  },
  {
    "text": "just data about method one which we now know is Method a and so we just upload all the data if we go further down",
    "start": "2058839",
    "end": "2066339"
  },
  {
    "text": "and we find some more IL here's IL from B version two the IL actually has",
    "start": "2066339",
    "end": "2073358"
  },
  {
    "text": "the right method def already in it so we don't even have to map that",
    "start": "2073359",
    "end": "2078520"
  },
  {
    "text": "right this is using the original uh token",
    "start": "2078520",
    "end": "2084460"
  },
  {
    "text": "metadata to open for that method because all of those Generations all of the or",
    "start": "2084460",
    "end": "2090700"
  },
  {
    "text": "the Baseline and the generations they are all essentially in memory inside",
    "start": "2090700",
    "end": "2095980"
  },
  {
    "text": "Roslin while you're working and so when it when we say hey compile method B",
    "start": "2095980",
    "end": "2101920"
  },
  {
    "text": "we go and look up how how was method be defined now we have to look it up and it's a little bit",
    "start": "2101920",
    "end": "2107560"
  },
  {
    "text": "complicated because of course you could add a method in generation two so we can't just go look in the Baseline so sometimes we have to do a little bit",
    "start": "2107560",
    "end": "2113740"
  },
  {
    "text": "of math and go well it was added in two and number 10 in the Baseline so that means this is actually 11. and so",
    "start": "2113740",
    "end": "2120280"
  },
  {
    "text": "sometimes that gets a bit confusing but you know again I'm the only one has to worry about that and then here's our",
    "start": "2120280",
    "end": "2125680"
  },
  {
    "text": "generation two this looks much the same we now have two methods one and two we have two methods in our method ENC",
    "start": "2125680",
    "end": "2132579"
  },
  {
    "text": "log nine and a again it's the first method Def and the second method def in the log that's all it's all just based",
    "start": "2132579",
    "end": "2139300"
  },
  {
    "text": "on ordering um and and and uh in a complete and",
    "start": "2139300",
    "end": "2144579"
  },
  {
    "text": "horribly anticlimactic talk that's how what really works um so I do have a couple more slides",
    "start": "2144579",
    "end": "2149619"
  },
  {
    "text": "because I tend to talk fast so that was only 35 minutes actually not too bad I think I do 40 in practice uh does anyone",
    "start": "2149619",
    "end": "2155560"
  },
  {
    "text": "have any questions about that what we've got in more detail any",
    "start": "2155560",
    "end": "2160660"
  },
  {
    "text": "anything yes hello",
    "start": "2160660",
    "end": "2164700"
  },
  {
    "text": "yes so the question was when it sees the number in the map does it just tell the run time",
    "start": "2175480",
    "end": "2181900"
  },
  {
    "text": "to append to that number and essentially yes what what the log is saying is I",
    "start": "2181900",
    "end": "2187240"
  },
  {
    "text": "mean it's called a log right it's a log of what the compiler has done so with the compiler is essentially saying I",
    "start": "2187240",
    "end": "2192280"
  },
  {
    "text": "have output a row for the method def table for token a",
    "start": "2192280",
    "end": "2199000"
  },
  {
    "text": "and and so the runtime will then go and get that row black motor",
    "start": "2199000",
    "end": "2205119"
  },
  {
    "text": "append versus update is is a good point so in this case we're not appending",
    "start": "2205119",
    "end": "2212440"
  },
  {
    "text": "we're updating right so we're replacing essentially replacing row 9A whatever it",
    "start": "2212440",
    "end": "2217660"
  },
  {
    "text": "is with a new one but you can sometimes append because you can add new methods and so the ENC log has another field",
    "start": "2217660",
    "end": "2227020"
  },
  {
    "text": "there which was all zeros in my example and that zero means update and one means add like it's in fact they're the only",
    "start": "2227020",
    "end": "2234160"
  },
  {
    "text": "two values I think and so sometimes we say hey update the type",
    "start": "2234160",
    "end": "2239980"
  },
  {
    "text": "but we're adding a method and so then for that yeah we tell it the new token so we have",
    "start": "2239980",
    "end": "2246520"
  },
  {
    "text": "to work out what the next method in line would be but then the runtime has to go okay well if you're adding a",
    "start": "2246520",
    "end": "2252880"
  },
  {
    "text": "method to this type and remembering that everything has to be in order",
    "start": "2252880",
    "end": "2258280"
  },
  {
    "text": "right we now have to essentially roll that new token forward through as we're",
    "start": "2258280",
    "end": "2265060"
  },
  {
    "text": "reading like the method that that method list column right type A goes from one",
    "start": "2265060",
    "end": "2271420"
  },
  {
    "text": "to two and type B goes from three to four but if we add a method to type a well now the method list for type B has",
    "start": "2271420",
    "end": "2277720"
  },
  {
    "text": "to be changed so we tell it we're adding and it rolls that foot",
    "start": "2277720",
    "end": "2283500"
  },
  {
    "text": "uh it rearranges the rows yes essentially but",
    "start": "2285160",
    "end": "2291099"
  },
  {
    "text": "the same rules apply always in order no gaps and and the order as defined in the",
    "start": "2291099",
    "end": "2296320"
  },
  {
    "text": "thing I could talk a bit about that later um really dumb question but it's been a",
    "start": "2296320",
    "end": "2301599"
  },
  {
    "text": "while since I've read ekma 335 yeah it's been a few minutes for me too um",
    "start": "2301599",
    "end": "2306820"
  },
  {
    "text": "I remember that in the spec it actually says that it's pointers into the various",
    "start": "2306820",
    "end": "2312040"
  },
  {
    "text": "heaps like the method bodies and things like that so I guess the dumb question is in terms",
    "start": "2312040",
    "end": "2317380"
  },
  {
    "text": "of hot reload wouldn't it be where you just change the pointer into a different",
    "start": "2317380",
    "end": "2323260"
  },
  {
    "text": "say for example you want to change your method body you just have it point to a different stream and say here you go here's a new method body for example",
    "start": "2323260",
    "end": "2329619"
  },
  {
    "text": "good question um yeah so you could do that right instead of updating row nine you could",
    "start": "2329619",
    "end": "2336099"
  },
  {
    "text": "just say you know what add on a row 10 because there's no validation other than the fact that it has to be a valid",
    "start": "2336099",
    "end": "2341140"
  },
  {
    "text": "method exactly um and in fact I can kind of demo this later but we could have done that we could say yeah add on a new row 10.",
    "start": "2341140",
    "end": "2348700"
  },
  {
    "text": "the problem with that goes back to state if you have a delegate that points to",
    "start": "2348700",
    "end": "2354940"
  },
  {
    "text": "Method B and I add on a new method B where's your delicate point to what does",
    "start": "2354940",
    "end": "2360640"
  },
  {
    "text": "it run which version of the code and there's so and you know you can probably answer that for method delegates fine",
    "start": "2360640",
    "end": "2366160"
  },
  {
    "text": "but in terms of thinking about the state of your application adding new stuff is easy for the runtime",
    "start": "2366160",
    "end": "2373119"
  },
  {
    "text": "but you get a much better experience if we can update all that stuff so what the runtime will do like we've also like I",
    "start": "2373119",
    "end": "2379720"
  },
  {
    "text": "haven't talked about that method b gets jetted when it gets run and then we have tiered compilation now which just did",
    "start": "2379720",
    "end": "2386020"
  },
  {
    "text": "over and over again well of course if we update it the runtime has to go and tell legit yep throw out everything you do about B start again right like there's",
    "start": "2386020",
    "end": "2392320"
  },
  {
    "text": "all sorts of flow-on effects here so it could always just append and in fact there are some scenarios so",
    "start": "2392320",
    "end": "2399940"
  },
  {
    "text": "uh Razer um I don't know if you know this hopefully you do Razer files are generated into c-sharp backing files",
    "start": "2399940",
    "end": "2407200"
  },
  {
    "text": "and in raise in some scenarios in Razer we actually do essentially append",
    "start": "2407200",
    "end": "2414460"
  },
  {
    "text": "there's a flag that Razer tells the compiler that says hey if you see any",
    "start": "2414460",
    "end": "2419980"
  },
  {
    "text": "changes to this type don't worry about trying to update the type just output an entirely new one and",
    "start": "2419980",
    "end": "2426339"
  },
  {
    "text": "so what was your razer backing class you know Foo is now Foo underscore one",
    "start": "2426339",
    "end": "2431980"
  },
  {
    "text": "and the Razer run time the asp.net runtime has to then go and do a bunch of",
    "start": "2431980",
    "end": "2437020"
  },
  {
    "text": "work to move all of its delegates and Method pointers and model binding and all of it stuff to say what I'm never I",
    "start": "2437020",
    "end": "2443079"
  },
  {
    "text": "forget about this class this is the new one and it's a lot of work so it's you know it razor asp.net can do",
    "start": "2443079",
    "end": "2449800"
  },
  {
    "text": "it because they know the the you know the context of how they're running there's they've probably got a list of",
    "start": "2449800",
    "end": "2455200"
  },
  {
    "text": "what supported what's not for the.net runtime to do that in general like you know there's a bigger breadth",
    "start": "2455200",
    "end": "2461200"
  },
  {
    "text": "of because I think the the part that's missing here is that yes it makes sense to update the tables",
    "start": "2461200",
    "end": "2468180"
  },
  {
    "text": "but if if this is being done in memory I've seen other approaches where people do a hot swap with delegates and things",
    "start": "2468180",
    "end": "2474880"
  },
  {
    "text": "like that yeah does that mean it actually changes what's in memory and how does that work with you know old",
    "start": "2474880",
    "end": "2480160"
  },
  {
    "text": "style where you have to get an app domain you have to load it and unload it and all the other stuff and how does that work out",
    "start": "2480160",
    "end": "2487540"
  },
  {
    "text": "um because you're not unloading it obviously no you're you're using no what did you get and you're changing the pointers in memory so that it actually",
    "start": "2487540",
    "end": "2493839"
  },
  {
    "text": "works yeah I mean so so the the thing about unloading a dll in app domains or",
    "start": "2493839",
    "end": "2499480"
  },
  {
    "text": "whatever that's you know that's essentially a runtime restriction right so where hot reload we're not",
    "start": "2499480",
    "end": "2507640"
  },
  {
    "text": "we're not cheating right this is a feature of the runtime so the fact that they don't have to run the dll will they",
    "start": "2507640",
    "end": "2513640"
  },
  {
    "text": "own the fee they can yeah they can do that and they can also say that you're not allowed to unload a deal but they are really they can totally do that so",
    "start": "2513640",
    "end": "2520240"
  },
  {
    "text": "we're not sort of cheating by trying to patch memory or anything this is a feature right there is an apply updates",
    "start": "2520240",
    "end": "2525460"
  },
  {
    "text": "method in the runtime which is called and gets there's three streams of bytes",
    "start": "2525460",
    "end": "2530560"
  },
  {
    "text": "there's the IL stream the metadata stream and the peer division like so the way the runtime does it is is uh",
    "start": "2530560",
    "end": "2539320"
  },
  {
    "text": "it doesn't necessarily uh it's not necessarily congruous with other things in the runtime the other thing with hot",
    "start": "2539320",
    "end": "2544780"
  },
  {
    "text": "reload so I'm talking about hot reload because it's the simplest scenario but all of this code all of this the way",
    "start": "2544780",
    "end": "2551440"
  },
  {
    "text": "this works comes from edit and continue which is why it's called ENC log edit and continue is more complicated because",
    "start": "2551440",
    "end": "2558220"
  },
  {
    "text": "editing continue happens at an even more granular level so if we talk about state",
    "start": "2558220",
    "end": "2563260"
  },
  {
    "text": "in edit and continue it maintains the state of your local variables right it maintains the state of which",
    "start": "2563260",
    "end": "2570880"
  },
  {
    "text": "statement in the method you're running hot wheeler doesn't have to worry about that and I didn't want to have to talk about it so I didn't",
    "start": "2570880",
    "end": "2576760"
  },
  {
    "text": "but so some of this stuff also it's like maybe for hot reload it makes sense to do it",
    "start": "2576760",
    "end": "2583660"
  },
  {
    "text": "this other way but editing continue was already doing it the hard way anyway and so hot reload just Builds on that and",
    "start": "2583660",
    "end": "2589119"
  },
  {
    "text": "that's and last well last question is where is this documented so for example if I wanted to admit the IL for an",
    "start": "2589119",
    "end": "2596500"
  },
  {
    "text": "assembly and without the compiler I just just you're the compiler I know but but if",
    "start": "2596500",
    "end": "2603640"
  },
  {
    "text": "you wanted to append it because for example if there's like a small shim that you want to",
    "start": "2603640",
    "end": "2608800"
  },
  {
    "text": "generate and then you you is it just a matter of changing that table",
    "start": "2608800",
    "end": "2613839"
  },
  {
    "text": "so like I'm I'm just really curious as to how you actually get to it in terms of implementation yeah so this is where the",
    "start": "2613839",
    "end": "2621520"
  },
  {
    "text": "documentation is lacking so as far as emitting the IL for the Delta it's just",
    "start": "2621520",
    "end": "2626619"
  },
  {
    "text": "an ecma 335 assembly essentially and it has to follow all those same rules the ENC log the NC map are sadly",
    "start": "2626619",
    "end": "2633760"
  },
  {
    "text": "undocumented um but because I looked at that I was like what's this yeah you would just",
    "start": "2633760",
    "end": "2638920"
  },
  {
    "text": "have to look at the code in Roslyn um but I mean it's not it's also not very exciting it is literally I output a",
    "start": "2638920",
    "end": "2644260"
  },
  {
    "text": "method I output at a time like it's telling that it's just telecompiler it's just what it did yeah",
    "start": "2644260",
    "end": "2649420"
  },
  {
    "text": "um if you come up after I can show you there's tests in Roslin that sort of",
    "start": "2649420",
    "end": "2654880"
  },
  {
    "text": "maybe illustrate it pretty well anyway any more questions yes Aaron",
    "start": "2654880",
    "end": "2660339"
  },
  {
    "text": "hello I'm just going to move to annoy the cameraman so you showed a demo of that using it",
    "start": "2660339",
    "end": "2667900"
  },
  {
    "text": "with a console application is this applicable for kind of anything that is running on the.net runtime like an",
    "start": "2667900",
    "end": "2673060"
  },
  {
    "text": "asp.net application or good question Windows forms and is it for cross-platform or is it just a visual",
    "start": "2673060",
    "end": "2678880"
  },
  {
    "text": "studio thing so I'm going to answer that by going to the next slide because",
    "start": "2678880",
    "end": "2684520"
  },
  {
    "text": "kind of the second last dot point there But to answer your question at the start I said I'm talking about",
    "start": "2684520",
    "end": "2691060"
  },
  {
    "text": "applying changes to a.net assembly and so therefore it applies anywhere a.net assembly can be run",
    "start": "2691060",
    "end": "2698380"
  },
  {
    "text": "so you know a.net assembly means via the spec that it has these metadata tables",
    "start": "2698380",
    "end": "2704859"
  },
  {
    "text": "and therefore hot reload when it says here's some new metadata tables well that's what that means just on it and",
    "start": "2704859",
    "end": "2710680"
  },
  {
    "text": "it's got nothing to do with platforms it's got nothing to do with things what it does have to do with these runtimes so I will jump forward in this slide so",
    "start": "2710680",
    "end": "2716740"
  },
  {
    "text": "why are some things not hot reloadable why do root edits so this is just a list",
    "start": "2716740",
    "end": "2721960"
  },
  {
    "text": "of random examples of things that either are or used to be root edits but they're good examples of where in the process",
    "start": "2721960",
    "end": "2727780"
  },
  {
    "text": "the blockers can be so to answer your question why do some things not work in Blazer wasm",
    "start": "2727780",
    "end": "2733900"
  },
  {
    "text": "so Roslyn can detect all of your changes in a blazerwasm server a Blazer wasm not",
    "start": "2733900",
    "end": "2741280"
  },
  {
    "text": "server um project the compiler can happily compile all of the metadata tables that",
    "start": "2741280",
    "end": "2746800"
  },
  {
    "text": "it needs to to do all of the changes for a blazerwasm project and in fact",
    "start": "2746800",
    "end": "2752380"
  },
  {
    "text": "you know the Blazer runtime will download that dll if necessary right like all of these things are essentially",
    "start": "2752380",
    "end": "2757920"
  },
  {
    "text": "uh Universal what's different specifically with blazer wasm is the",
    "start": "2757920",
    "end": "2763420"
  },
  {
    "text": "runtime blazerwasm uses the mono runtime and so that step in the process where we",
    "start": "2763420",
    "end": "2768760"
  },
  {
    "text": "give the Delta to the runtime the mono runtime does not have the same feature set as far as how as far as which things",
    "start": "2768760",
    "end": "2776980"
  },
  {
    "text": "in the ENC log it knows how to process so the mono runtime can only do at the moment method body updates that's it",
    "start": "2776980",
    "end": "2785560"
  },
  {
    "text": "so you can modify methods you can't add new ones you can't add Fields you can add properties you can't change field",
    "start": "2785560",
    "end": "2791859"
  },
  {
    "text": "initializers like there's a bunch of limits and there's this there's an API for the runtime to tell Roslyn what it",
    "start": "2791859",
    "end": "2798579"
  },
  {
    "text": "can support So Roslyn can report a root edit in a Blazer wasm that would work in a donut",
    "start": "2798579",
    "end": "2805020"
  },
  {
    "text": "standard.net6 Library so we know about what the runtime limitations are and",
    "start": "2805020",
    "end": "2810760"
  },
  {
    "text": "they're working on getting mono more support like seriously there's like people working on it but so that's where",
    "start": "2810760",
    "end": "2818140"
  },
  {
    "text": "the limitations come in at the runtime level so all of this is produced as per the spec and here's the things but some",
    "start": "2818140",
    "end": "2824260"
  },
  {
    "text": "runtimes don't have all the capabilities and so that's one reason you might get root edits and obviously blazerwasm it's",
    "start": "2824260",
    "end": "2830140"
  },
  {
    "text": "a pretty big blocker at the moment because it does limit what you can do so some other reasons for root edits why",
    "start": "2830140",
    "end": "2836859"
  },
  {
    "text": "couldn't you update records so this one's past tense because you can now because I do the work",
    "start": "2836859",
    "end": "2842500"
  },
  {
    "text": "um so one of the blockers is that whole thing of working out the changes and mapping the changes back to",
    "start": "2842500",
    "end": "2849339"
  },
  {
    "text": "a.netism from a c-sharpism means add and continue",
    "start": "2849339",
    "end": "2854560"
  },
  {
    "text": "which is what the classes are called in Roslin slash hot reload has to be taught about every single C sharp feature now",
    "start": "2854560",
    "end": "2861220"
  },
  {
    "text": "some of them well some of them it doesn't actually have to be taught about right like the fact that you can now do",
    "start": "2861220",
    "end": "2867220"
  },
  {
    "text": "a ref or an in parameter doesn't care because that doesn't sort of that",
    "start": "2867220",
    "end": "2872319"
  },
  {
    "text": "doesn't escape out to the metadata world at all that's a compiler thing but for things like records we have to teach",
    "start": "2872319",
    "end": "2878440"
  },
  {
    "text": "Roslyn okay if they add a new record here's what it means or can they add a new record right if they update a record",
    "start": "2878440",
    "end": "2884920"
  },
  {
    "text": "so for example if you add a field to a record versus adding a field to a class adding",
    "start": "2884920",
    "end": "2890740"
  },
  {
    "text": "field to a class one New Field adding field to a record one New Field change the Constructor change the copy",
    "start": "2890740",
    "end": "2896140"
  },
  {
    "text": "Constructor change the equals method the get hash code method the print members method Rosalind has to know all of that so that he can tell the compiler these",
    "start": "2896140",
    "end": "2902920"
  },
  {
    "text": "are all the methods you have to Omit so that it can put them all in the meta like so we have to teach it all about",
    "start": "2902920",
    "end": "2908020"
  },
  {
    "text": "all the um the c-sharp features now the compiler devs are supposed to do this some of the big ones they leave it for",
    "start": "2908020",
    "end": "2914319"
  },
  {
    "text": "us and we do it we do a pass at the end um and so well the reason for the root",
    "start": "2914319",
    "end": "2920980"
  },
  {
    "text": "edits is the easiest way to teach Roslyn about a new compiler feature is to say if you see this new compiler feature",
    "start": "2920980",
    "end": "2927339"
  },
  {
    "text": "it's a rooted lad ticks the Box um so that's number one uh why couldn't you update attributes and I think yes",
    "start": "2927339",
    "end": "2935200"
  },
  {
    "text": "this so This goes back to what you were asking about appending versus updating so attributes are interesting because",
    "start": "2935200",
    "end": "2942760"
  },
  {
    "text": "they point back to the table they come from more like a normal uh you know",
    "start": "2942760",
    "end": "2947859"
  },
  {
    "text": "database but the rules of ecma 335 say that the attribute table has to be ordered by the",
    "start": "2947859",
    "end": "2954940"
  },
  {
    "text": "parent column which is the column that points to where it was so if I add a new attribute to a method I might have",
    "start": "2954940",
    "end": "2961140"
  },
  {
    "text": "attribute for method one attribute for method two attribute for a property attribute for a type",
    "start": "2961140",
    "end": "2967780"
  },
  {
    "text": "but if I want to add a method I have to insert a row between two because the ordering has to be",
    "start": "2967780",
    "end": "2973480"
  },
  {
    "text": "maintained but that's going to affect all of the tokens for all of my other attributes",
    "start": "2973480",
    "end": "2978880"
  },
  {
    "text": "right so excuse me the the way to fix this or the reason this was a root edit",
    "start": "2978880",
    "end": "2985000"
  },
  {
    "text": "and the way we fix this is we added the capability or the smart to the compiler that when it's emitting a Delta",
    "start": "2985000",
    "end": "2992020"
  },
  {
    "text": "compilation it now knows how to Output the custom attribute table in a way that",
    "start": "2992020",
    "end": "2998319"
  },
  {
    "text": "the runtime will accept and this is also some that in this case we didn't have to in the end but we the way this project",
    "start": "2998319",
    "end": "3003960"
  },
  {
    "text": "started was we went and got talked to the runtime devs and say hey how can we do this right like what do you need to",
    "start": "3003960",
    "end": "3009300"
  },
  {
    "text": "know from us to be able to update this table and it turned out they didn't actually need anything from us if we could just do it on the rosin side and",
    "start": "3009300",
    "end": "3015540"
  },
  {
    "text": "essentially every time there's a generation we just re-output the entire custom attribute table and actually",
    "start": "3015540",
    "end": "3021599"
  },
  {
    "text": "that's one of the benefits of this token system the row is not special that it",
    "start": "3021599",
    "end": "3026940"
  },
  {
    "text": "points to a method or a property whatever it's just a bit of data and so we just clobber right this row used to point to a property great points to a",
    "start": "3026940",
    "end": "3032160"
  },
  {
    "text": "method now bad luck and so you add a method we want to insert a method you know in between rows two and three well",
    "start": "3032160",
    "end": "3038579"
  },
  {
    "text": "actually we just insert a method at the end which the runtime can handle but we rewrite all of the other methods",
    "start": "3038579",
    "end": "3044460"
  },
  {
    "text": "so sometimes it's teaching the compiler New Tricks um why couldn't you add a weight and yield return so this is that state",
    "start": "3044460",
    "end": "3050940"
  },
  {
    "text": "machine table in metadata it just didn't have enough information so async methods become a state machine",
    "start": "3050940",
    "end": "3057599"
  },
  {
    "text": "which means for every await in your method there's a new state so one two three four when you hot reload we need to remember",
    "start": "3057599",
    "end": "3064079"
  },
  {
    "text": "what state you're up to but of course if you add in a weight above where you are then we have to change this one for us",
    "start": "3064079",
    "end": "3071280"
  },
  {
    "text": "now it's not not State four anymore it's our state five and so that information is now in this new uh or not in it's in",
    "start": "3071280",
    "end": "3078240"
  },
  {
    "text": "the pdb so sometimes it's writing more data to the B2B Blazer where's the runtime and then generic types is the",
    "start": "3078240",
    "end": "3084359"
  },
  {
    "text": "big one I honestly don't know if this will ever be fixed because this is a huge runtime limitation the whole type",
    "start": "3084359",
    "end": "3090900"
  },
  {
    "text": "system of.net is affected if we ever have to change this and so sometimes we get these things like",
    "start": "3090900",
    "end": "3096180"
  },
  {
    "text": "yeah I don't know maybe we maybe we can't do that maybe we can I don't know um all right we have 10 more minutes",
    "start": "3096180",
    "end": "3102960"
  },
  {
    "text": "I'm now going to commit crimes I love Hot reload because you can commit crimes this is my favorite demo I love it",
    "start": "3102960",
    "end": "3108540"
  },
  {
    "text": "where's Visual Studio okay I'm going to run this code",
    "start": "3108540",
    "end": "3113700"
  },
  {
    "text": "run this app and here is this is kind of also back to",
    "start": "3113700",
    "end": "3120000"
  },
  {
    "text": "the appending stuff right so here's my code great I've got my three methods in reflection no problem I'm just going to",
    "start": "3120000",
    "end": "3127140"
  },
  {
    "text": "delete that one and I'll reload",
    "start": "3127140",
    "end": "3132480"
  },
  {
    "text": "now what happened there is we called C and something went wrong",
    "start": "3132480",
    "end": "3138900"
  },
  {
    "text": "and now this code this this class you know it has catches the exception it runs again you can see the clock is still ticking right it's still running",
    "start": "3138900",
    "end": "3145200"
  },
  {
    "text": "it's not fake and there's still a method C in reflection so the run time does not support",
    "start": "3145200",
    "end": "3152520"
  },
  {
    "text": "deleting methods but we on the wrestling team we get",
    "start": "3152520",
    "end": "3158220"
  },
  {
    "text": "Telemetry about root edits so we know you know any in the last seven days I",
    "start": "3158220",
    "end": "3163380"
  },
  {
    "text": "can tell you how many times people ran into root edit number 423 or whatever and one of the common ones is well one",
    "start": "3163380",
    "end": "3171960"
  },
  {
    "text": "of the common ones is is changing method signatures but then in designing the feature it",
    "start": "3171960",
    "end": "3177359"
  },
  {
    "text": "boils down to deleting members is part of it but so we wanted to be able to delete methods even though the runtime can't",
    "start": "3177359",
    "end": "3184980"
  },
  {
    "text": "and so we decided that we didn't care that the runtime can't and so what happens is you delete a method and in",
    "start": "3184980",
    "end": "3191640"
  },
  {
    "text": "the compiler there's a little bit of code that says oh you think you deleted that method no no you updated that",
    "start": "3191640",
    "end": "3196859"
  },
  {
    "text": "method but its body now says throw new Missing Method exception",
    "start": "3196859",
    "end": "3202200"
  },
  {
    "text": "so we cheat right normally this wouldn't be a problem the reason",
    "start": "3202200",
    "end": "3208380"
  },
  {
    "text": "this is committing crimes is because if I scroll up you'll see there's a compile area here right C doesn't exist the compiler",
    "start": "3208380",
    "end": "3214020"
  },
  {
    "text": "doesn't know how to compile this method but because we produced our list of edits and I didn't touch this method no",
    "start": "3214020",
    "end": "3219420"
  },
  {
    "text": "one asked the compilative part of this method so we didn't so there's a bit of Il that says call",
    "start": "3219420",
    "end": "3224940"
  },
  {
    "text": "method nine and Method nine still exists it just has one line of code and it says throw numeracy I love it I love it so",
    "start": "3224940",
    "end": "3231300"
  },
  {
    "text": "much and I can put it back and that works and now we're back to calling C again and so the whole point",
    "start": "3231300",
    "end": "3237480"
  },
  {
    "text": "of this hot reload is at runtime yeah that was really weird things threw up blew up in ways that you definitely",
    "start": "3237480",
    "end": "3242760"
  },
  {
    "text": "weren't expecting right there's no way that all of your code has try catches that says catch Missing Method exception",
    "start": "3242760",
    "end": "3247859"
  },
  {
    "text": "just in case someone deletes it at Dev time but the point is",
    "start": "3247859",
    "end": "3253500"
  },
  {
    "text": "if you are a little bit resilient with your code somewhere I didn't have to restart my app and",
    "start": "3253500",
    "end": "3258960"
  },
  {
    "text": "that's the point of hot reload right is and that's what we want to do is getting rid of the root edits maybe it",
    "start": "3258960",
    "end": "3265020"
  },
  {
    "text": "doesn't make things work exactly the way you expect them to but you at least don't have to",
    "start": "3265020",
    "end": "3271020"
  },
  {
    "text": "restart your app so all of your state is still there I can do cool things like return a string",
    "start": "3271020",
    "end": "3279420"
  },
  {
    "text": "so if I do this I think this is going to work but boy it might blow up",
    "start": "3279420",
    "end": "3285000"
  },
  {
    "text": "it worked okay so this one is so so that was changing",
    "start": "3285000",
    "end": "3290160"
  },
  {
    "text": "method signature right and the reason we did deleting methods is because changing methods is built on",
    "start": "3290160",
    "end": "3296220"
  },
  {
    "text": "top of deleting methods deleting methods is like the key to all of this what happened is",
    "start": "3296220",
    "end": "3302579"
  },
  {
    "text": "I changed method C from void returning to string returning and logically speaking as humans we see that as the",
    "start": "3302579",
    "end": "3309540"
  },
  {
    "text": "same method but I change the return type and C sharp doesn't let you distinguish",
    "start": "3309540",
    "end": "3315420"
  },
  {
    "text": "methods by return type but dot net absolutely does and so that's what we",
    "start": "3315420",
    "end": "3320640"
  },
  {
    "text": "did so when you update the return type or add a parameter or change of parameter type or rename a method we",
    "start": "3320640",
    "end": "3326460"
  },
  {
    "text": "delete the old one throw a Missing Method exception which is what you're seeing there and then we insert a new one which has the same name and a",
    "start": "3326460",
    "end": "3332819"
  },
  {
    "text": "different return type and that's totally fine it's fine as far as metadata is concerned and so",
    "start": "3332819",
    "end": "3338700"
  },
  {
    "text": "now we can see on the right here I have two methods one is this one is going to be you know",
    "start": "3338700",
    "end": "3344099"
  },
  {
    "text": "inactive right this one's going to throw an exception this one's active if I uh",
    "start": "3344099",
    "end": "3349260"
  },
  {
    "text": "reverse this and I'll reel it again now we're back to",
    "start": "3349260",
    "end": "3354359"
  },
  {
    "text": "calling C and we're happy still only two methods but now and you can't see this you have to trust me the one that",
    "start": "3354359",
    "end": "3359880"
  },
  {
    "text": "returns a string that one now throws a Missing Method exception and we are working with the runtime and hopefully",
    "start": "3359880",
    "end": "3365400"
  },
  {
    "text": "we'll have some way to flag to them that we've done this crime and then they can make reflection you know reflect that",
    "start": "3365400",
    "end": "3371460"
  },
  {
    "text": "fact or maybe they just will skip over it like yeah make it all make sense in general though if you're using",
    "start": "3371460",
    "end": "3376740"
  },
  {
    "text": "reflection like and hot reload kind of all bets are off so you know sorry but there's only",
    "start": "3376740",
    "end": "3383700"
  },
  {
    "text": "so much we can do um anyway I love that demo oh and this is still on top so that is",
    "start": "3383700",
    "end": "3391319"
  },
  {
    "text": "really the end of the talk so does anyone really have any questions or you can go get I guess lunch",
    "start": "3391319",
    "end": "3397140"
  },
  {
    "text": "yes hello we'll wait for the mark hang on wait because the method was never cleaned up so not that it would be a",
    "start": "3397140",
    "end": "3403980"
  },
  {
    "text": "real problem but if you did hot reload three or four times you'd have a lot of junk methods to be sitting in the assembly room yeah so",
    "start": "3403980",
    "end": "3411000"
  },
  {
    "text": "um that's true did they if you keep changing the method signature over and over again to new ones every time then",
    "start": "3411000",
    "end": "3417839"
  },
  {
    "text": "there will be detritus of methods left behind but we are clever and we try to",
    "start": "3417839",
    "end": "3423119"
  },
  {
    "text": "reuse them where we can like if the signature matches so if you resurrect one we will resurrect it where this gets",
    "start": "3423119",
    "end": "3429059"
  },
  {
    "text": "cool is properties and events because properties so what you think of a property",
    "start": "3429059",
    "end": "3434160"
  },
  {
    "text": "is not really a property it's two methods in a trench coat and so when you change the return of the type of a",
    "start": "3434160",
    "end": "3439740"
  },
  {
    "text": "property we output a new get method a new set method so we have two to four and then you change it again now we have",
    "start": "3439740",
    "end": "3445079"
  },
  {
    "text": "six and uh events if you're using VB are three methods in a trench coat because",
    "start": "3445079",
    "end": "3450119"
  },
  {
    "text": "there's an ad to remove and array C sharp doesn't have rays but of course.net has to have rays and Roslyn",
    "start": "3450119",
    "end": "3455760"
  },
  {
    "text": "has to therefore understand rays and I have to write VB code in order to make that work and I really hate myself uh any I think there was another question",
    "start": "3455760",
    "end": "3464400"
  },
  {
    "text": "here once uh thank you all right let's start from Modern runtime",
    "start": "3464400",
    "end": "3472500"
  },
  {
    "text": "was runtime Rewritten in.net6 I only saw modern runtime and something related to",
    "start": "3472500",
    "end": "3478920"
  },
  {
    "text": "Omni sharp and to connect no I mean dotnet6 has its traces the Terrace Edge",
    "start": "3478920",
    "end": "3485160"
  },
  {
    "text": "back a long way it wasn't a rewrite of.net framework or anything but I mean edit and continue has been in like",
    "start": "3485160",
    "end": "3491460"
  },
  {
    "text": "within.net framework very early on so the the bones of all of this have been there and in.net 6 with hot reload being",
    "start": "3491460",
    "end": "3500099"
  },
  {
    "text": "you know the marketing hot reload of xaml and xamarin and all of those things",
    "start": "3500099",
    "end": "3505440"
  },
  {
    "text": "um it got a bunch of yeah it was good because it funded a bunch of work and so I got a bunch more smarts around it",
    "start": "3505440",
    "end": "3511260"
  },
  {
    "text": "um things like you can create a class in your assembly and tag it with an",
    "start": "3511260",
    "end": "3517920"
  },
  {
    "text": "attribute and then after a hot reload occurs the runtime will call your code and tell you which types were changed",
    "start": "3517920",
    "end": "3524579"
  },
  {
    "text": "which is how asp.net does its whole hey there's a new view for this and so you can actually make your code work or your",
    "start": "3524579",
    "end": "3532680"
  },
  {
    "text": "application work better with hot reload by maybe there's some cache that you",
    "start": "3532680",
    "end": "3537780"
  },
  {
    "text": "need to invalidate it's like I've got a little train game and it's very like it's written terribly",
    "start": "3537780",
    "end": "3545339"
  },
  {
    "text": "so in order to get decent performance I catch a lot of stuff so you draw out the tracks and then I save that image of what those",
    "start": "3545339",
    "end": "3552420"
  },
  {
    "text": "tracks look like and I never draw it again but of course when I hot reload that's now a problem so I have a little thing and I tag it with the attribute",
    "start": "3552420",
    "end": "3559020"
  },
  {
    "text": "and I invalidate my cache every time I do a hot reload and now my Dev Loop while I'm working on my project is a bit",
    "start": "3559020",
    "end": "3565740"
  },
  {
    "text": "better so the runtime does get new features and stuff but yeah all of this stuff traces its lineage back to edit",
    "start": "3565740",
    "end": "3571079"
  },
  {
    "text": "and continue back into our Net Framework whatever it was I was saying this because I think you mentioned there was",
    "start": "3571079",
    "end": "3576599"
  },
  {
    "text": "something that modern runtime couldn't do and the mono runtime so mono is the",
    "start": "3576599",
    "end": "3582960"
  },
  {
    "text": "runtime used in laser wasm and it only supports method body updates at the",
    "start": "3582960",
    "end": "3588059"
  },
  {
    "text": "moment um but they are actively working on like uh it it also now supports Lambda",
    "start": "3588059",
    "end": "3594660"
  },
  {
    "text": "updates which are really just method body updates but in a separate type and so there's a bunch of work that has been",
    "start": "3594660",
    "end": "3600299"
  },
  {
    "text": "done it's not quite sort of visible to us as users yet when they get to like",
    "start": "3600299",
    "end": "3605819"
  },
  {
    "text": "add new field add new property that's when the majority of the root edits should hopefully Fall Away",
    "start": "3605819",
    "end": "3611819"
  },
  {
    "text": "cool so you actually started answering my other question uh so for example I when",
    "start": "3611819",
    "end": "3620520"
  },
  {
    "text": "using how to load I realized an esp.net specifically there are certain areas that",
    "start": "3620520",
    "end": "3627720"
  },
  {
    "text": "struggle one area kind of makes sense if you have something in the startup registrations",
    "start": "3627720",
    "end": "3635220"
  },
  {
    "text": "some other things like for example if you modify an auto mapper mapping something like that that also doesn't",
    "start": "3635220",
    "end": "3641520"
  },
  {
    "text": "get picked up yeah so that's a very good question and a good point I probably should have mentioned but I didn't but I",
    "start": "3641520",
    "end": "3646740"
  },
  {
    "text": "wouldn't know hot reload updates your code so when you change your startup class I",
    "start": "3646740",
    "end": "3652619"
  },
  {
    "text": "can promise you hot reload is updating that startup plus the problem is nothing ever calls that to be run again",
    "start": "3652619",
    "end": "3658859"
  },
  {
    "text": "right that's my why my console app has a loop it says a while through because I can apply the same hot reloads but if",
    "start": "3658859",
    "end": "3664980"
  },
  {
    "text": "nothing runs the new code or the old code or whatever then you don't see the changes so things like startup classes",
    "start": "3664980",
    "end": "3671040"
  },
  {
    "text": "automapa um that's up to asp.net to work out how",
    "start": "3671040",
    "end": "3677400"
  },
  {
    "text": "they're going to do that so they they can put that attribute on and they can somehow call startup again but without",
    "start": "3677400",
    "end": "3684660"
  },
  {
    "text": "breaking the world I don't know but that's that's up to them so is there anything actually that is available to real-end",
    "start": "3684660",
    "end": "3692460"
  },
  {
    "text": "users to for example say when I change this just restart to think",
    "start": "3692460",
    "end": "3698940"
  },
  {
    "text": "for me instead of me pressing Ctrl C Ctrl R um",
    "start": "3698940",
    "end": "3704460"
  },
  {
    "text": "for the web specifically I don't know in general like is there for example an attribute put attribute on these classes",
    "start": "3704460",
    "end": "3710099"
  },
  {
    "text": "and if it changes yeah so so you would write a class that you put the attribute on and then that",
    "start": "3710099",
    "end": "3716819"
  },
  {
    "text": "class knows how to do whatever so it gets called when there's a change but you have we would have to write the",
    "start": "3716819",
    "end": "3723480"
  },
  {
    "text": "smarts for what to do to react to that change we should probably let these people go get lunch before the queue gets big but",
    "start": "3723480",
    "end": "3730440"
  },
  {
    "text": "I'm happy to talk afterwards if you want uh thank you everybody [Applause]",
    "start": "3730440",
    "end": "3739349"
  }
]