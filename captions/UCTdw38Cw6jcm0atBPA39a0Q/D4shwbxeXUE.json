[
  {
    "text": "I think we can start so welcome everybody my name is Ferdinando papal",
    "start": "6000",
    "end": "11360"
  },
  {
    "text": "and I am a net developer at mongodb uh here in Copenhagen and the reason why",
    "start": "11360",
    "end": "17439"
  },
  {
    "text": "I'm here is that I would like to tell you a little bit about why we decide to move from using a weaving to search",
    "start": "17439",
    "end": "24160"
  },
  {
    "text": "generators in the uh net SDK of Realm so",
    "start": "24160",
    "end": "29240"
  },
  {
    "text": "have you ever heard about realm before okay one person I think at least is shooking his head so uh I will tell",
    "start": "29240",
    "end": "36480"
  },
  {
    "text": "you more about it later but realm is an objectoriented database that is mostly targeting",
    "start": "36480",
    "end": "43239"
  },
  {
    "text": "mobile um and we're going to see why we're using this in the first place why we're using this technique in the first",
    "start": "43239",
    "end": "49440"
  },
  {
    "text": "place and why decide to move from one approach to the other so uh just to set",
    "start": "49440",
    "end": "55239"
  },
  {
    "text": "up the context we are going to talk about uh code generation. net code generation",
    "start": "55239",
    "end": "60480"
  },
  {
    "text": "and alteration this because both a weaving and sord generators are two different techniques that can be used to",
    "start": "60480",
    "end": "67680"
  },
  {
    "text": "add code and modify uh modify code and so we're going to see um why we decide",
    "start": "67680",
    "end": "73119"
  },
  {
    "text": "to use these techniques in the first place and then why we decide to move from um from one to the other but first",
    "start": "73119",
    "end": "80479"
  },
  {
    "text": "of all we need to take a look at these techniques so first of all I weaving have you ever heard of I",
    "start": "80479",
    "end": "86840"
  },
  {
    "text": "weaving couple of person four perfect so",
    "start": "86840",
    "end": "92119"
  },
  {
    "text": "every time you compile uh your C code it gets compiled first to something called ilil that stands for Intermediate",
    "start": "92119",
    "end": "99520"
  },
  {
    "text": "Language then depending on the configuration it either gets converted to machine code at runtime if you're",
    "start": "99520",
    "end": "105360"
  },
  {
    "text": "using the now old uh just in time compilation or it gets compiled ahead of",
    "start": "105360",
    "end": "110920"
  },
  {
    "text": "time if you're using aot but the the idea is the same so you have this IL code that looks like um high level",
    "start": "110920",
    "end": "117680"
  },
  {
    "text": "assembly practically uh that is very similar to bite code if you're used with",
    "start": "117680",
    "end": "122880"
  },
  {
    "text": "Java I weaving essentially is the process of modifying the IL code in some",
    "start": "122880",
    "end": "128879"
  },
  {
    "text": "ways and I also wrote on the slide that it almost feels like magic because practically with a weaving you can do",
    "start": "128879",
    "end": "135560"
  },
  {
    "text": "practically anything so you can add classes modify how the uh code works you",
    "start": "135560",
    "end": "141080"
  },
  {
    "text": "can add attributes remove attributes and so on and one important thing to remember",
    "start": "141080",
    "end": "146440"
  },
  {
    "text": "about IL weaving is that this is a process that happens after the compilation so this means that",
    "start": "146440",
    "end": "152680"
  },
  {
    "text": "everything that is done by the Weaver you cannot see it in your uh ID it's something that you cannot see out of the",
    "start": "152680",
    "end": "160560"
  },
  {
    "text": "box and it also means that because this needs to happen after the compilation",
    "start": "160560",
    "end": "166000"
  },
  {
    "text": "your code needs to be in a compilable state you cannot leave it in a uncompilable state and then hope for the",
    "start": "166000",
    "end": "171599"
  },
  {
    "text": "Weaver to fix some problems for you so why would you use a weaver why would use",
    "start": "171599",
    "end": "177120"
  },
  {
    "text": "usually a library that has a weaver inside well it's very useful to generate repetitive or optimize code for example",
    "start": "177120",
    "end": "186200"
  },
  {
    "text": "um just to give you an idea about how I code looks like so if you have a simple class with a property with the setter",
    "start": "186200",
    "end": "193480"
  },
  {
    "text": "with a getter and Setter like the one that is on the left the one that you see on the right is the I code corresponding",
    "start": "193480",
    "end": "199840"
  },
  {
    "text": "to the getter on the top and the setter at the bottom it doesn't really matter that you understand everything but it",
    "start": "199840",
    "end": "205959"
  },
  {
    "text": "was just to show you how I code looks like it's a series of of instructions",
    "start": "205959",
    "end": "211080"
  },
  {
    "text": "practically and it's not really easy to read okay now to give you maybe a more",
    "start": "211080",
    "end": "217280"
  },
  {
    "text": "uh practical example of a use of vile weaving so if you ever had to work with",
    "start": "217280",
    "end": "223239"
  },
  {
    "text": "any mvvm framework like uh Mai zamarin avalonia un and so on you know that if",
    "start": "223239",
    "end": "230080"
  },
  {
    "text": "you want to if you have a view model and you want to show something in the UI usually what you do is that you bind",
    "start": "230080",
    "end": "236159"
  },
  {
    "text": "some classes to the eye some objects and in order to do that you need to um your",
    "start": "236159",
    "end": "241640"
  },
  {
    "text": "clust need to implement I notifi property change that has one uh event",
    "start": "241640",
    "end": "247000"
  },
  {
    "text": "that is this property change event the idea here is that your um your your",
    "start": "247000",
    "end": "253640"
  },
  {
    "text": "object should raise this event every time a property changes so if you had to",
    "start": "253640",
    "end": "259639"
  },
  {
    "text": "implement this yourself what you will do is that your class from this will look like what you have here on the right so",
    "start": "259639",
    "end": "267120"
  },
  {
    "text": "um what will need to happen essentially is that you will need to modify the Setters and Getters of the properties so",
    "start": "267120",
    "end": "273479"
  },
  {
    "text": "that every time the um the setter is called if the value is different than",
    "start": "273479",
    "end": "278800"
  },
  {
    "text": "the previous one then in this case it's calling this own property change that is invoking the um event in the end now you",
    "start": "278800",
    "end": "286960"
  },
  {
    "text": "can imagine that this is a lot of boiler PL code especially if you have a lot of properties it's annoying to write you",
    "start": "286960",
    "end": "293400"
  },
  {
    "text": "need to remember to use the right uh name for the uh for the properties and also it's annoying especially if you",
    "start": "293400",
    "end": "299800"
  },
  {
    "text": "have for example dependent properties so um if you have for example a full name property that depends on the first name",
    "start": "299800",
    "end": "306400"
  },
  {
    "text": "and last name then you need also to take care of that so what this property change. fod",
    "start": "306400",
    "end": "312960"
  },
  {
    "text": "does essentially is do it for you so it goes into your um into your dll after it",
    "start": "312960",
    "end": "319400"
  },
  {
    "text": "has been compiled it it finds all these classes that are defined as implementing I notifi property change and then is",
    "start": "319400",
    "end": "326319"
  },
  {
    "text": "modifying the setter and getter so that it does what you see here on the right essentially so it's invoking the the",
    "start": "326319",
    "end": "333280"
  },
  {
    "text": "event with the correct name of the properties and this also works for dependent for dependent properties so",
    "start": "333280",
    "end": "339960"
  },
  {
    "text": "one thing to to realize is that in your IDE you will still see only what you see",
    "start": "339960",
    "end": "345080"
  },
  {
    "text": "here on the on the left what you see here on the right is the behavior but this is not something that you're able",
    "start": "345080",
    "end": "350400"
  },
  {
    "text": "to see at least from your um from your ID and uh yes so now how do you see I",
    "start": "350400",
    "end": "358919"
  },
  {
    "text": "code how do you see see with code well um it really depends what do you want to do if you want for example you're just",
    "start": "358919",
    "end": "365120"
  },
  {
    "text": "curious about how I code looks like for a simple um snippet you can use",
    "start": "365120",
    "end": "370680"
  },
  {
    "text": "something like sharl that is useful for a lot of different things but it's an online.net playground and essentially",
    "start": "370680",
    "end": "377919"
  },
  {
    "text": "you just write here on the left and then on the right you see the corresponding I code and for example here you can see",
    "start": "377919",
    "end": "384800"
  },
  {
    "text": "the getter of the name property and if you over over the the body it will also",
    "start": "384800",
    "end": "390599"
  },
  {
    "text": "highlight it on the on the left so this is just if you have like a small snippet",
    "start": "390599",
    "end": "395919"
  },
  {
    "text": "and you're curious about how it looks like if you have a project that is using a library that is using weaving and you",
    "start": "395919",
    "end": "402720"
  },
  {
    "text": "are curious about what this library is doing to your code then you need to use something like a decompiler like IL spy",
    "start": "402720",
    "end": "410080"
  },
  {
    "text": "so um for example here I have a simple project that has this person property change that is declared as implementing",
    "start": "410080",
    "end": "417800"
  },
  {
    "text": "I notifi property change and as you can see just has a name an age two automatic",
    "start": "417800",
    "end": "423360"
  },
  {
    "text": "properties I didn't modify the Setters and Getters in anyway the only thing that I did do this project is that I",
    "start": "423360",
    "end": "428960"
  },
  {
    "text": "added the um this library that I've shown you before so property change. F0",
    "start": "428960",
    "end": "435080"
  },
  {
    "text": "now we need to compile it and then we need to open our um IL",
    "start": "435080",
    "end": "441240"
  },
  {
    "text": "spy that is a DEC compiler and then you need to open the dll then you navigate in the dll",
    "start": "441240",
    "end": "450360"
  },
  {
    "text": "into the models in this case and you have this person property change here now what you see here on the right is",
    "start": "450360",
    "end": "455720"
  },
  {
    "text": "the um is the I code is not particularly nice to see so what you can do is that",
    "start": "455720",
    "end": "461520"
  },
  {
    "text": "you can select the C code so you see the decompiled code and now if you try to open one of the properties you can see",
    "start": "461520",
    "end": "468319"
  },
  {
    "text": "that they've been modified they've been modified so that if the uh for example if the the new name is different than",
    "start": "468319",
    "end": "474599"
  },
  {
    "text": "the previous one then it's calling this onproperty changed and if you look at this",
    "start": "474599",
    "end": "480039"
  },
  {
    "text": "uh method that has been also added by the Weaver then you see that it's just invoking the uh the event so as you can",
    "start": "480039",
    "end": "486800"
  },
  {
    "text": "see this is not it really visible from the ID so this is all um you can see it",
    "start": "486800",
    "end": "492000"
  },
  {
    "text": "all if you're using something like a a decompiler and this was just to give an idea about how to look at the effect of",
    "start": "492000",
    "end": "499840"
  },
  {
    "text": "uh Wii code okay so SE generators who has heard about s generators more people",
    "start": "499840",
    "end": "507319"
  },
  {
    "text": "yes so this is a compiler feature that was added in Net 5 and essentially s",
    "start": "507319",
    "end": "513479"
  },
  {
    "text": "generators are a um part of the compilation pipeline so when you have a",
    "start": "513479",
    "end": "519360"
  },
  {
    "text": "um a s generator in your in your project what happens is that you have a first",
    "start": "519360",
    "end": "524720"
  },
  {
    "text": "step of the compilation that is going through the user code then what is what",
    "start": "524720",
    "end": "530080"
  },
  {
    "text": "happens is that the there is this sear generator step of the compilation so the",
    "start": "530080",
    "end": "535279"
  },
  {
    "text": "um the SE generator receives something called a compilation object that allows to um to look at the user code from the",
    "start": "535279",
    "end": "543600"
  },
  {
    "text": "syntactic level the semantic level and so on and then eventually the SE generator can add new code back into the",
    "start": "543600",
    "end": "550880"
  },
  {
    "text": "compilation and after this process has been done then the compilation resumes",
    "start": "550880",
    "end": "556000"
  },
  {
    "text": "so um essentially s generators can emit source code there are two biggest",
    "start": "556000",
    "end": "561440"
  },
  {
    "text": "differences between s generators and weaving and they are that first of all s generators are part of the compilation",
    "start": "561440",
    "end": "568720"
  },
  {
    "text": "pipeline so they are inside the compilation while weaving is something that happens after the",
    "start": "568720",
    "end": "574519"
  },
  {
    "text": "compilation and another thing is that Sur generator can they cannot modify",
    "start": "574519",
    "end": "579920"
  },
  {
    "text": "source code they can only add a new source code so they can also fix some",
    "start": "579920",
    "end": "586079"
  },
  {
    "text": "things that uh if you left your code in a non-com compilable state if you have a s generator then it can fix certain",
    "start": "586079",
    "end": "594440"
  },
  {
    "text": "things so why are they useful they useful for the same reason why uh wavers",
    "start": "594800",
    "end": "600079"
  },
  {
    "text": "are useful they're very useful to generate repetitive or optimized code for",
    "start": "600079",
    "end": "606640"
  },
  {
    "text": "example um system. text. Json that is probably the let's say default uh um",
    "start": "606640",
    "end": "613519"
  },
  {
    "text": "library for uh serializing and deserializing Json started using a search generator in net 6 I think so the",
    "start": "613519",
    "end": "622360"
  },
  {
    "text": "way that works is that you define your class as as normal then somewhere else in your code you need to have these uh",
    "start": "622360",
    "end": "629040"
  },
  {
    "text": "class class this partial class that is important that is deriving from the Json serializer context and then you need to",
    "start": "629040",
    "end": "635680"
  },
  {
    "text": "decorate it with this attributes that contains the type that this contact should be responsible for what the Sor",
    "start": "635680",
    "end": "642600"
  },
  {
    "text": "is doing essentially is going into your into your code finding this partial class and then having continuing like",
    "start": "642600",
    "end": "650720"
  },
  {
    "text": "adding another file with the uh the rest of the implementation of this class and then when you need to serialize it you",
    "start": "650720",
    "end": "657519"
  },
  {
    "text": "need to pass these contacts the details are not really important but the the important question is why did they",
    "start": "657519",
    "end": "664120"
  },
  {
    "text": "decide to add the sord Jor well uh historically the the process of um",
    "start": "664120",
    "end": "670160"
  },
  {
    "text": "serialization and the serialization is something that has been done um mostly serialization with reflection and it's",
    "start": "670160",
    "end": "677120"
  },
  {
    "text": "has been done with reflection because at run time you can discover which property a object has and so you can you can act",
    "start": "677120",
    "end": "683399"
  },
  {
    "text": "on it but if you think about it you already know all the properties that an object has at compile time and the",
    "start": "683399",
    "end": "689480"
  },
  {
    "text": "reason why we use this library is because we are lazy and we don't want to write the uh the serialization ourself",
    "start": "689480",
    "end": "695240"
  },
  {
    "text": "so what this library is doing with the sear genitor essentially is writing out the serialization already at compiled",
    "start": "695240",
    "end": "701720"
  },
  {
    "text": "time so this is much more um much more performant and according to the um to",
    "start": "701720",
    "end": "709279"
  },
  {
    "text": "the performance this is at least twice as the uh reflection based approach",
    "start": "709279",
    "end": "717240"
  },
  {
    "text": "okay so how do you see s generated code well this really depends on your ID um",
    "start": "717240",
    "end": "723600"
  },
  {
    "text": "if you for example you were you using visual Studio for Windows you need to go into your dependencies under analyzers",
    "start": "723600",
    "end": "730600"
  },
  {
    "text": "then maybe it's a little bit confusing then you find the library that is that as the SAR generator and then under that",
    "start": "730600",
    "end": "736800"
  },
  {
    "text": "all the generated classes that have this beautiful banner that tells you that the",
    "start": "736800",
    "end": "742120"
  },
  {
    "text": "uh the class is s generated so you cannot modify it but it really depends on the ID for example in the now funed",
    "start": "742120",
    "end": "749839"
  },
  {
    "text": "visual studio for Mac you couldn't see it um you always have the possibility actually because all these files are not",
    "start": "749839",
    "end": "755600"
  },
  {
    "text": "on your fight system they are just in the compilation actually if you change",
    "start": "755600",
    "end": "760880"
  },
  {
    "text": "some uh some uh configuration in the project file you can always put them on the file system but you need to be a",
    "start": "760880",
    "end": "766760"
  },
  {
    "text": "little bit careful about it okay uh so now you know about weaving now you know",
    "start": "766760",
    "end": "772920"
  },
  {
    "text": "about s generators you need to know a little bit about realm so um realm is a",
    "start": "772920",
    "end": "778079"
  },
  {
    "text": "reactive objector and cross crossplatform database that has been created mostly targeting mobile",
    "start": "778079",
    "end": "784399"
  },
  {
    "text": "so devices with low capabilities it's available for other programming languages like CP cotlin",
    "start": "784399",
    "end": "791320"
  },
  {
    "text": "Swift and so on and a lot of different platforms and it has a lot of nice features including the ability of um",
    "start": "791320",
    "end": "798560"
  },
  {
    "text": "synchronizing between multiple devices and with Atlas so mongodb in the cloud",
    "start": "798560",
    "end": "803839"
  },
  {
    "text": "but there are two features that are really important for the rest of this talk so first of all realm is object",
    "start": "803839",
    "end": "809120"
  },
  {
    "text": "object oriented and what this means this means that when you're working with realm you're working with C object and",
    "start": "809120",
    "end": "816199"
  },
  {
    "text": "there is no translation layer so it's not an omm where you have SQL underneath",
    "start": "816199",
    "end": "821839"
  },
  {
    "text": "it's its own database and the shape that your object as in C is the same shape",
    "start": "821839",
    "end": "827680"
  },
  {
    "text": "that it has in the database there is no translation layer between the two and this is one thing and the second thing",
    "start": "827680",
    "end": "834519"
  },
  {
    "text": "that is super important is the fact that realm objects are live in this case live",
    "start": "834519",
    "end": "840079"
  },
  {
    "text": "means that the object always reflect the um latest data stored in realm so we",
    "start": "840079",
    "end": "847639"
  },
  {
    "text": "will see it in a second but when you have a realm object and you get the value of a property you are getting this",
    "start": "847639",
    "end": "853240"
  },
  {
    "text": "property directly from the database if you're setting the value of a property you're setting this property directly in",
    "start": "853240",
    "end": "859959"
  },
  {
    "text": "database this is very different than um other U approaches for example that use",
    "start": "859959",
    "end": "866160"
  },
  {
    "text": "SQL underneath because if you do a query with SQL the objects that you get they reflect the state when you did the query",
    "start": "866160",
    "end": "873199"
  },
  {
    "text": "and that's it if you modify this object then you just modify this object you didn't modify what's in the",
    "start": "873199",
    "end": "879279"
  },
  {
    "text": "database and yes and I wanted to show you just a small example about this just",
    "start": "879279",
    "end": "884320"
  },
  {
    "text": "to give you an idea so I think should be",
    "start": "884320",
    "end": "891000"
  },
  {
    "text": "visible okay I have a small example here and maybe going uh line by line so um",
    "start": "891000",
    "end": "897800"
  },
  {
    "text": "here I'm just creating an instance of the database one second with this realm get instance then",
    "start": "897800",
    "end": "904040"
  },
  {
    "text": "I'm creating a g ID just that I'm using as a primary key and then I have this block with real. write that is the",
    "start": "904040",
    "end": "910600"
  },
  {
    "text": "equivalent of a right transaction in another database and then I'm adding a person where the ID is the ID that I",
    "start": "910600",
    "end": "916800"
  },
  {
    "text": "just created the name is Mario and the age is 22 nothing too crazy then I have",
    "start": "916800",
    "end": "923040"
  },
  {
    "text": "two uh persons person one and person two and the reason why I'm doing it twice is",
    "start": "923040",
    "end": "929040"
  },
  {
    "text": "is that because is that now person one and person two they are two different",
    "start": "929040",
    "end": "935600"
  },
  {
    "text": "objects okay two different objects but they are uh they are they found the same",
    "start": "935600",
    "end": "941600"
  },
  {
    "text": "person with the ID that I created before then I have a new right transaction where I'm changing the age",
    "start": "941600",
    "end": "948079"
  },
  {
    "text": "of person one to 40 and then I'm printing the um essentially the age of",
    "start": "948079",
    "end": "953600"
  },
  {
    "text": "person one and then the age of person two now the okay I hope it's visible but so",
    "start": "953600",
    "end": "962360"
  },
  {
    "text": "maybe this is not surprising that the age of person one has changed because I just changed it in this line here and",
    "start": "962360",
    "end": "968279"
  },
  {
    "text": "it's equal to 40 while before it was 22 the thing that maybe is a little bit strange is that also the um the age of",
    "start": "968279",
    "end": "976160"
  },
  {
    "text": "person two changed and the reason for that is that as I said realm objects are live so when you get the value of",
    "start": "976160",
    "end": "982360"
  },
  {
    "text": "property the property is coming directly from the database and I can assure you that person one and person two are not",
    "start": "982360",
    "end": "988480"
  },
  {
    "text": "the same uh object in the in the manage code but you have to believe me on that for now",
    "start": "988480",
    "end": "995240"
  },
  {
    "text": "okay so now you have an idea about what is weaving you have an idea about s generators uh now you need to understand",
    "start": "995240",
    "end": "1002800"
  },
  {
    "text": "why we decided to use these um this approach in the net SDK of Realm so um",
    "start": "1002800",
    "end": "1010480"
  },
  {
    "text": "first of all let's take a look at why we started using weaving so what you see",
    "start": "1010480",
    "end": "1015560"
  },
  {
    "text": "here on the left is the way that developers could Define find their um",
    "start": "1015560",
    "end": "1021600"
  },
  {
    "text": "their data model so you just Define a simple C Class you define properties",
    "start": "1021600",
    "end": "1027558"
  },
  {
    "text": "with Setters and Getters there are some attributes like primary key because this is a database and then the important",
    "start": "1027559",
    "end": "1033959"
  },
  {
    "text": "thing is that they needed to derive from something called realm object and what we were doing with",
    "start": "1033959",
    "end": "1040438"
  },
  {
    "text": "weaving in the beginning essentially what you see here on the right we were going into the um into the user dll we",
    "start": "1040439",
    "end": "1047640"
  },
  {
    "text": "were finding the uh classes that are deriving from real object and then we are changing the Setters and Getters to",
    "start": "1047640",
    "end": "1054400"
  },
  {
    "text": "call get value and set value without going too much into details get value and set value are what allow the objects",
    "start": "1054400",
    "end": "1062080"
  },
  {
    "text": "to be live so when you call get value you're getting the value for this property from the database and when",
    "start": "1062080",
    "end": "1067559"
  },
  {
    "text": "you're calling set value you're setting it into the database one thing to remember about",
    "start": "1067559",
    "end": "1073440"
  },
  {
    "text": "this is that this is an extremely simplified version of what the W is",
    "start": "1073440",
    "end": "1078520"
  },
  {
    "text": "doing because what is happening depends a lot on the state of the object for",
    "start": "1078520",
    "end": "1083640"
  },
  {
    "text": "example if it has been added to the database or not it depends on the type of the property and so on so if you look",
    "start": "1083640",
    "end": "1090320"
  },
  {
    "text": "at it it can be much more complicated than this so why we started using weaving well we started using weaving",
    "start": "1090320",
    "end": "1096679"
  },
  {
    "text": "essentially to improve the developer experience we want the developer to use a normal C object without needing to",
    "start": "1096679",
    "end": "1104039"
  },
  {
    "text": "worry about calling at Value calling set value needing to worry about the uh um",
    "start": "1104039",
    "end": "1110240"
  },
  {
    "text": "the state of the object and so on so essentially what we're we're doing with the weaving is that we were hiding a lot",
    "start": "1110240",
    "end": "1115919"
  },
  {
    "text": "of the complexity of the um of the of",
    "start": "1115919",
    "end": "1121200"
  },
  {
    "text": "the library of the internals of realm from the user by using this weaving because they just use normal properties",
    "start": "1121200",
    "end": "1128440"
  },
  {
    "text": "with Setters and Getters and there's a lot of stuff that is happening behind the scenes so um just to give you an idea",
    "start": "1128440",
    "end": "1136039"
  },
  {
    "text": "about what is happening with the let's say simple string property so what you see here on the left is the um the way",
    "start": "1136039",
    "end": "1143679"
  },
  {
    "text": "that your IL code looks like if you open a project and you just write a a um a",
    "start": "1143679",
    "end": "1149520"
  },
  {
    "text": "getter for a string property and on the right you see um how it looks like if",
    "start": "1149520",
    "end": "1156520"
  },
  {
    "text": "this sorry if this was um actually after the weaving process has been done and",
    "start": "1156520",
    "end": "1162120"
  },
  {
    "text": "this is just for a simple property because if you have a collection for example it becomes uh much longer",
    "start": "1162120",
    "end": "1170720"
  },
  {
    "text": "okay so as I said weing has been extremely powerful for us because it",
    "start": "1171480",
    "end": "1177320"
  },
  {
    "text": "allowed us to hide a lot of complexity from the final users behind the model",
    "start": "1177320",
    "end": "1182480"
  },
  {
    "text": "definition but it also has quite some drawbacks for us so first of all as you",
    "start": "1182480",
    "end": "1188600"
  },
  {
    "text": "could see I think we can all agree that the IL code doesn't really look nice to read and if you don't have experience",
    "start": "1188600",
    "end": "1194640"
  },
  {
    "text": "with it it's really difficult to understand what is happening so for this reason it's very difficult to um to",
    "start": "1194640",
    "end": "1203240"
  },
  {
    "text": "extend the the Weaver because you really need a lot of specific knowledge and we",
    "start": "1203240",
    "end": "1208600"
  },
  {
    "text": "were lucky that this kind of like the weiver was a specific part of our source",
    "start": "1208600",
    "end": "1213960"
  },
  {
    "text": "code so it's something for which we didn't need to touch uh many times but for example you need to touch it all the",
    "start": "1213960",
    "end": "1220360"
  },
  {
    "text": "time that you change that you are adding support for new uh property types for",
    "start": "1220360",
    "end": "1225480"
  },
  {
    "text": "example another problem is that essentially this is a black box so you",
    "start": "1225480",
    "end": "1230559"
  },
  {
    "text": "have you add realm to your uh project you try to use Getters and Setters and",
    "start": "1230559",
    "end": "1236159"
  },
  {
    "text": "it works like magic that it's nice but developers don't really know what is what has happened to their uh to their",
    "start": "1236159",
    "end": "1242960"
  },
  {
    "text": "properties and there's also another problem the interference so this is a",
    "start": "1242960",
    "end": "1248360"
  },
  {
    "text": "process that happens after compilation and because you can modify anything you",
    "start": "1248360",
    "end": "1253799"
  },
  {
    "text": "want with with a weaver if you have multiple wavers or multiple um libraries",
    "start": "1253799",
    "end": "1259280"
  },
  {
    "text": "that are using wyers then the result depends could depend on the order of the",
    "start": "1259280",
    "end": "1266280"
  },
  {
    "text": "of the wer for just to give you an example this um property change of fold",
    "start": "1266280",
    "end": "1272520"
  },
  {
    "text": "that I talk about a second ago this one here so they Implement I notifi property",
    "start": "1272520",
    "end": "1278039"
  },
  {
    "text": "change they not Implement they uh they call notifi property change and this all this is also something that we need to",
    "start": "1278039",
    "end": "1284080"
  },
  {
    "text": "do that we also provide because um realm is reactive so we had to to work in a",
    "start": "1284080",
    "end": "1291159"
  },
  {
    "text": "way that we don't stomp on each other so we put a certain attribute so that um",
    "start": "1291159",
    "end": "1297400"
  },
  {
    "text": "that Library knows that they don't have to touch Setters and Getters anymore another problem is that",
    "start": "1297400",
    "end": "1304000"
  },
  {
    "text": "essentially this is not debuggable it's not debuggable because this happens after compilation your IDE has no idea",
    "start": "1304000",
    "end": "1310200"
  },
  {
    "text": "what has happened and also it could leave your code in a state where if you",
    "start": "1310200",
    "end": "1316600"
  },
  {
    "text": "run it you will start getting uh strange errors okay there is another big issue",
    "start": "1316600",
    "end": "1322440"
  },
  {
    "text": "with weaving is that weaving is not part of compilation so a lot of developers",
    "start": "1322440",
    "end": "1328200"
  },
  {
    "text": "asked us well why do realm objects need to derive from a base class why couldn't",
    "start": "1328200",
    "end": "1333880"
  },
  {
    "text": "you use an interface that is a very reasonable question and the reason is essentially this so um weers app weaving",
    "start": "1333880",
    "end": "1342919"
  },
  {
    "text": "F happen after compilation so the code needs to be able to compile in order for",
    "start": "1342919",
    "end": "1348520"
  },
  {
    "text": "for the weer to do something and if we had to have a interface like here",
    "start": "1348520",
    "end": "1354679"
  },
  {
    "text": "instead of a base class this means that all the model classes that the user Define will need to implement this",
    "start": "1354679",
    "end": "1361919"
  },
  {
    "text": "interface maybe just right click Implement interface with all these beautiful um exceptions and then we",
    "start": "1361919",
    "end": "1368600"
  },
  {
    "text": "could go into the user code and then change the uh the behavior of the properties of the methods and so on but",
    "start": "1368600",
    "end": "1376200"
  },
  {
    "text": "we decide to go against this for a couple of reasons uh first of all it's",
    "start": "1376200",
    "end": "1382279"
  },
  {
    "text": "horrible on our point of view I mean from from the developer point of view because this means that now you need to",
    "start": "1382279",
    "end": "1388240"
  },
  {
    "text": "implement also all these properties in I that is very difficult to work with but especially this is a super bad",
    "start": "1388240",
    "end": "1395400"
  },
  {
    "text": "experience for developers I mean if you had a if you had to use a database and for each of your model classes you had",
    "start": "1395400",
    "end": "1402640"
  },
  {
    "text": "to have this horrible stuff you probably wouldn't use it because this looks just",
    "start": "1402640",
    "end": "1408000"
  },
  {
    "text": "impossible and also it feels it feels super magical because you have all these not Implement",
    "start": "1408000",
    "end": "1414039"
  },
  {
    "text": "exception then you run your code and boom it works so we decided to go um to",
    "start": "1414039",
    "end": "1419159"
  },
  {
    "text": "go against this okay so now um at a certain point",
    "start": "1419159",
    "end": "1424840"
  },
  {
    "text": "after Net 5 come out there was the support for surge generators and we decided to take advantage of them to try",
    "start": "1424840",
    "end": "1431520"
  },
  {
    "text": "to go away from uh weaving this was also a time that um where we decide to modify",
    "start": "1431520",
    "end": "1437480"
  },
  {
    "text": "slightly also the um the model definition in particular what you see",
    "start": "1437480",
    "end": "1443360"
  },
  {
    "text": "here on the left is the classic Model definition so the one that I've shown you before where you have your class",
    "start": "1443360",
    "end": "1449320"
  },
  {
    "text": "with the properties Setters and Getters and so on and then the base class and",
    "start": "1449320",
    "end": "1454559"
  },
  {
    "text": "then on the right you have the new model definition that is um based on um on",
    "start": "1454559",
    "end": "1461320"
  },
  {
    "text": "serg generator so you have the only difference is that you have now a partial class and instead of having a",
    "start": "1461320",
    "end": "1467399"
  },
  {
    "text": "base class we have have an interface that is also what developers",
    "start": "1467399",
    "end": "1472559"
  },
  {
    "text": "wanted um but the property definition is 100% the same so essentially moving from",
    "start": "1472559",
    "end": "1478919"
  },
  {
    "text": "the previous approach to the new approach is super easy for um for developers why this class needs to be",
    "start": "1478919",
    "end": "1485399"
  },
  {
    "text": "partial well for the same reason why it needed to be partial in uh the Json Library essentially what we're doing is",
    "start": "1485399",
    "end": "1492000"
  },
  {
    "text": "that even though you're not implementing all the properties and methods that are on these interface a real object we um",
    "start": "1492000",
    "end": "1500799"
  },
  {
    "text": "we add the new file that essentially contains all the implementation for",
    "start": "1500799",
    "end": "1506360"
  },
  {
    "text": "you and but the important thing to know is that this is essentially",
    "start": "1506360",
    "end": "1511600"
  },
  {
    "text": "a this is essentially a win for us but for developers this has 100% the same",
    "start": "1511600",
    "end": "1517279"
  },
  {
    "text": "behavior as the um as the woven approach and just to give you an idea uh",
    "start": "1517279",
    "end": "1524159"
  },
  {
    "text": "this is for example what the search generator is is generating for a simple class and this is like much much longer",
    "start": "1524159",
    "end": "1530000"
  },
  {
    "text": "than this because there are different classes that are being generated there is a lot of other things that are um",
    "start": "1530000",
    "end": "1535440"
  },
  {
    "text": "that are happening uh and the important thing that I forgot to say is that realm is open source so you can go on GitHub",
    "start": "1535440",
    "end": "1541600"
  },
  {
    "text": "and look at this and if you're curious about something we can talk but also you can just take a look on on",
    "start": "1541600",
    "end": "1548600"
  },
  {
    "text": "GitHub okay um so we think that the move to sord",
    "start": "1548600",
    "end": "1554880"
  },
  {
    "text": "generator was super nice for us because sor have a lot of advantages over um I",
    "start": "1554880",
    "end": "1561880"
  },
  {
    "text": "weevers so um first of all the code that you're generating is essentially readable because it's just C code you",
    "start": "1561880",
    "end": "1569200"
  },
  {
    "text": "should be able to read C code and it's also something that you can that you can read from your ID and it's",
    "start": "1569200",
    "end": "1577279"
  },
  {
    "text": "debuggable um it's also much nicer to work with s genitor because what you're",
    "start": "1577279",
    "end": "1582799"
  },
  {
    "text": "doing is that apart from the Roslin API and how to analyze the user code that is",
    "start": "1582799",
    "end": "1587880"
  },
  {
    "text": "annoying maybe but you are just generating uh C code so it's much easier to reason and also for this it's much",
    "start": "1587880",
    "end": "1596279"
  },
  {
    "text": "more um extensible so this allowed us to add support for some features um in a",
    "start": "1596279",
    "end": "1603159"
  },
  {
    "text": "much um nicer way in in a faster way for example support for uh nullability and",
    "start": "1603159",
    "end": "1610440"
  },
  {
    "text": "also this is part of the compilation being part of the compilation you don't have to fight be with other sord",
    "start": "1610440",
    "end": "1617279"
  },
  {
    "text": "generators and this is part of the U let's say official compilation pipeline differently from wers there are also",
    "start": "1617279",
    "end": "1624640"
  },
  {
    "text": "some problems with sord generators so the text generation is more like an",
    "start": "1624640",
    "end": "1629840"
  },
  {
    "text": "annoyance um so if you are you're just generating source file you're just generating um a text file right and so",
    "start": "1629840",
    "end": "1637279"
  },
  {
    "text": "if you want to um if you want developers to look at it and it look sloppy you need to take care of formatting because",
    "start": "1637279",
    "end": "1643960"
  },
  {
    "text": "you have some basic formatting that you can use but it's not super nice so you need to take care of it it's not a",
    "start": "1643960",
    "end": "1650000"
  },
  {
    "text": "bigie another problem is the performance and this because um s generators essentially are running as you type",
    "start": "1650000",
    "end": "1657960"
  },
  {
    "text": "they're not running actually only during the compilation because for the reason that I've said before so you are for",
    "start": "1657960",
    "end": "1664960"
  },
  {
    "text": "example in this case you have we have an interface and the seator need to run otherwise you will have a compilation",
    "start": "1664960",
    "end": "1671320"
  },
  {
    "text": "error because your ID will complain that you don't have the implementation of the interface so you need to take care of",
    "start": "1671320",
    "end": "1678480"
  },
  {
    "text": "making your SE generator work in the work the least amount of work that",
    "start": "1678480",
    "end": "1684600"
  },
  {
    "text": "it can do there are also some new some new not so new anymore but there is also",
    "start": "1684600",
    "end": "1690559"
  },
  {
    "text": "incremental generators now that are s generators that try to cat some parts of your of your work but this becomes much",
    "start": "1690559",
    "end": "1698159"
  },
  {
    "text": "more problematic if you have a s generator in a bigger project and there is a big big issue",
    "start": "1698159",
    "end": "1704120"
  },
  {
    "text": "with s big issue with sord generators uh at least for us and the problem is that",
    "start": "1704120",
    "end": "1709720"
  },
  {
    "text": "um Sur generators are only additive they can only add things they cannot modify what is already",
    "start": "1709720",
    "end": "1716720"
  },
  {
    "text": "there and this means that I can Ally to you and we didn't completely remove I",
    "start": "1716799",
    "end": "1723279"
  },
  {
    "text": "weaving and why is that so um what you see here on on the left this is the",
    "start": "1723279",
    "end": "1729440"
  },
  {
    "text": "model definition with Weaver the one that I've show in the beginning you have your class you have your um base uh",
    "start": "1729440",
    "end": "1736120"
  },
  {
    "text": "class and so on and then you have your properties now if we wanted to move to a 100% sord",
    "start": "1736120",
    "end": "1744080"
  },
  {
    "text": "generated approach then the uh the model definition will look like what you have",
    "start": "1744080",
    "end": "1749519"
  },
  {
    "text": "here in the middle so uh we have the partial class you have the interface and",
    "start": "1749519",
    "end": "1754679"
  },
  {
    "text": "then we cannot let the user define the properties themselves and we cannot do it because SE daters can only add things",
    "start": "1754679",
    "end": "1761919"
  },
  {
    "text": "and if the property is already there we cannot add the property with the same name and so we will need to use an",
    "start": "1761919",
    "end": "1767760"
  },
  {
    "text": "approach similar to what for example mvvm toolkit does if you have been to the talk yesterday they've also talked",
    "start": "1767760",
    "end": "1774360"
  },
  {
    "text": "about it so what they do and what we could have done is that we could have let developers Define some private",
    "start": "1774360",
    "end": "1781159"
  },
  {
    "text": "Fields with an underscore and then we could go and then Define uh and then in",
    "start": "1781159",
    "end": "1787320"
  },
  {
    "text": "the SE generated file we could go and um essentially implement the properties",
    "start": "1787320",
    "end": "1794279"
  },
  {
    "text": "with the same name this is something that we could have done we decided to go against this for for a couple of reasons",
    "start": "1794279",
    "end": "1801240"
  },
  {
    "text": "first of all moving to the previous approach to this approach will require much more work because before you had",
    "start": "1801240",
    "end": "1807360"
  },
  {
    "text": "properties now you have Fields so more more work for developers then we will need to have for",
    "start": "1807360",
    "end": "1815000"
  },
  {
    "text": "example more attributes because we um realm supports uh properties that can be",
    "start": "1815000",
    "end": "1822679"
  },
  {
    "text": "private protected public it doesn't matter what is the accessibility so this means that developers will need us will",
    "start": "1822679",
    "end": "1828960"
  },
  {
    "text": "need to tell us what kind of properties they want to Define and another problem",
    "start": "1828960",
    "end": "1834600"
  },
  {
    "text": "is that for example for mvvm toolkit the fact that they are um they're using this",
    "start": "1834600",
    "end": "1840000"
  },
  {
    "text": "approach makes much more sense because these fields in the end they end up",
    "start": "1840000",
    "end": "1845120"
  },
  {
    "text": "being used as the biging fields of those properties while in our case these fields will not be used so essentially",
    "start": "1845120",
    "end": "1851760"
  },
  {
    "text": "they are just a blueprint and will just be there and doesn't make much sense so overall in order to keep the same level",
    "start": "1851760",
    "end": "1858679"
  },
  {
    "text": "of developer experience we wanted to keep the same kind of magic let's say we decide to go for a mix",
    "start": "1858679",
    "end": "1865639"
  },
  {
    "text": "approach that I've also shown you so the one on the right where the property definition is the same as in the",
    "start": "1865639",
    "end": "1872080"
  },
  {
    "text": "beginning and the only thing that developers you need to do is to add this partial attribute um uh modifier and",
    "start": "1872080",
    "end": "1879200"
  },
  {
    "text": "then they need to have this base interface okay so what is the weaving",
    "start": "1879200",
    "end": "1885799"
  },
  {
    "text": "doing uh what is the weaving doing now so the the the thing is with Weaver now",
    "start": "1885799",
    "end": "1892120"
  },
  {
    "text": "what we're doing with the Weaver now essentially is that we are still modifying the setter and getter but what",
    "start": "1892120",
    "end": "1899360"
  },
  {
    "text": "we're doing is what I'm showing here on the right essentially the Setters and Getters of properties now are just going",
    "start": "1899360",
    "end": "1905760"
  },
  {
    "text": "to a property with the same name on the accessor and the accessor is is",
    "start": "1905760",
    "end": "1912039"
  },
  {
    "text": "something that is also surg generated so um one thing to remember is that this",
    "start": "1912039",
    "end": "1917120"
  },
  {
    "text": "looks like a a lot what I've shown you in the beginning about what we're doing with weaving but what I've shown you in",
    "start": "1917120",
    "end": "1922200"
  },
  {
    "text": "the beginning with weaving was an extremely simplified version while this is 100% what happens for every property",
    "start": "1922200",
    "end": "1930240"
  },
  {
    "text": "so there is no difference between the property types there is no difference between the uh between the state of the",
    "start": "1930240",
    "end": "1936320"
  },
  {
    "text": "object and so on so this is much much nicer to work much nicer to do with the",
    "start": "1936320",
    "end": "1942519"
  },
  {
    "text": "um with the Weaver and you have to believe me on this because it is like a couple of lines let's say and the",
    "start": "1942519",
    "end": "1951120"
  },
  {
    "text": "um so practically what we were done is that all the complexity that we had in the Weaver all these if else depending",
    "start": "1951120",
    "end": "1958159"
  },
  {
    "text": "on the property type and so on now are in the accessor but the accessor is something that we sech generate it's",
    "start": "1958159",
    "end": "1964519"
  },
  {
    "text": "something that is generated together with the implementation of the um of the interface so this is much nicer to um to",
    "start": "1964519",
    "end": "1973159"
  },
  {
    "text": "work with because this is something that we write ourself okay",
    "start": "1973159",
    "end": "1978360"
  },
  {
    "text": "so just to give you an idea about how all of this um went out so we worked for",
    "start": "1978360",
    "end": "1984559"
  },
  {
    "text": "on this for about um six months and we",
    "start": "1984559",
    "end": "1989919"
  },
  {
    "text": "during this time we didn't work only on this and also it we needed some time to change the way that our um let's say our",
    "start": "1989919",
    "end": "1999440"
  },
  {
    "text": "internal work because we were used to working with the base class and now we have to we had to use an interface so we",
    "start": "1999440",
    "end": "2004799"
  },
  {
    "text": "had to modify quite some things in our um in our source and we published the",
    "start": "2004799",
    "end": "2010159"
  },
  {
    "text": "first version of the S generator in November 2022 where we had a package",
    "start": "2010159",
    "end": "2015919"
  },
  {
    "text": "called realm. sour generator if you look at it nowadays it doesn't exist anymore because we decided to add the sord",
    "start": "2015919",
    "end": "2022200"
  },
  {
    "text": "generator directly into the um into the base Library we still support the classic",
    "start": "2022200",
    "end": "2028480"
  },
  {
    "text": "Model definition but it's something that we are trying to push Developers for um",
    "start": "2028480",
    "end": "2036000"
  },
  {
    "text": "to use the new uh the new the new s SE generated approach and overall we are um this",
    "start": "2036000",
    "end": "2043919"
  },
  {
    "text": "allowed us to add new features to the um to the SDK like for example support for",
    "start": "2043919",
    "end": "2049800"
  },
  {
    "text": "new data types and for uh nullability in the model definition we're also planning to do several things to the S generator",
    "start": "2049800",
    "end": "2057480"
  },
  {
    "text": "including this incremental generator this is something that we didn't do yet because we didn't receive any complaints",
    "start": "2057480",
    "end": "2065200"
  },
  {
    "text": "about the performance of the sord generator but it's something that we still want to tackle and there is another thing that",
    "start": "2065200",
    "end": "2071599"
  },
  {
    "text": "we'll really like to do um and that is completely remove uh is weaving so I",
    "start": "2071599",
    "end": "2078679"
  },
  {
    "text": "this is like the first time that I have like a modified version of this slide because the in order to completely",
    "start": "2078679",
    "end": "2085679"
  },
  {
    "text": "remove a weaving and to keep the same level of let's say to to keep the same model definition the thing that we will",
    "start": "2085679",
    "end": "2092878"
  },
  {
    "text": "need was partial properties and this picture this screenshot here was a screenshot that is in the C language",
    "start": "2092879",
    "end": "2100480"
  },
  {
    "text": "repo where they were asking for the partial properties and this something that was gathering more and more support",
    "start": "2100480",
    "end": "2107720"
  },
  {
    "text": "um as s generator came out because it's true that I mean it's not such an",
    "start": "2107720",
    "end": "2112760"
  },
  {
    "text": "uncommon use case the need to modify the way their Setters and Getters are acting",
    "start": "2112760",
    "end": "2118160"
  },
  {
    "text": "and because s generator is something that is here to stay especially with uh with aot and a lot of other things this",
    "start": "2118160",
    "end": "2125200"
  },
  {
    "text": "was gathering more and more support and finally in C 13 we are getting uh partial",
    "start": "2125200",
    "end": "2132240"
  },
  {
    "text": "properties and this is super nice because before this another way that",
    "start": "2132240",
    "end": "2137440"
  },
  {
    "text": "maybe we could have gone around this will be using interceptors that look",
    "start": "2137440",
    "end": "2143280"
  },
  {
    "text": "much worse to use to be honest um another thing though about this is that",
    "start": "2143280",
    "end": "2149040"
  },
  {
    "text": "it's true that c 13 is going to support partial properties and we're going to",
    "start": "2149040",
    "end": "2155440"
  },
  {
    "text": "support them but the problem is that we also need to support older version of C we need to uh support older version of",
    "start": "2155440",
    "end": "2163720"
  },
  {
    "text": "net so we support even NET Framework so this is something this is more like a long-term plan because we cannot simply",
    "start": "2163720",
    "end": "2171359"
  },
  {
    "text": "uh drop support for older version and get done with it but it's like a a a",
    "start": "2171359",
    "end": "2178319"
  },
  {
    "text": "long-term plan okay so just to sum",
    "start": "2178319",
    "end": "2183599"
  },
  {
    "text": "everything up so um code generation has been an extremely powerful technique for",
    "start": "2183599",
    "end": "2189319"
  },
  {
    "text": "us because it allowed us to hide a lot of complexity of the um internal of",
    "start": "2189319",
    "end": "2195160"
  },
  {
    "text": "Realm behind the model definition in the beginning we were using um I weing for",
    "start": "2195160",
    "end": "2200720"
  },
  {
    "text": "this that is an extremely powerful technique but is also very annoying to",
    "start": "2200720",
    "end": "2205960"
  },
  {
    "text": "uh to work with for this reason we decided to move to Sur generator that are nicer to work",
    "start": "2205960",
    "end": "2212880"
  },
  {
    "text": "with and are more modern and also are essentially what is being pushed by the",
    "start": "2212880",
    "end": "2219160"
  },
  {
    "text": "uh ecosystem so we believe that the support is going to be there they all",
    "start": "2219160",
    "end": "2224359"
  },
  {
    "text": "have their own um quick limitation but overall we think that this has been a",
    "start": "2224359",
    "end": "2231359"
  },
  {
    "text": "very good um a very good change because even though the developer experience is",
    "start": "2231359",
    "end": "2239000"
  },
  {
    "text": "very similar it also really improved our um our work especially in regards to",
    "start": "2239000",
    "end": "2245319"
  },
  {
    "text": "certain part of our source code um especially regarding the uh so the model",
    "start": "2245319",
    "end": "2250760"
  },
  {
    "text": "definition this obviously is only a part of what we work with so overall the we",
    "start": "2250760",
    "end": "2256200"
  },
  {
    "text": "think that the switch was definitely worth it we can see that we are much more able to add certain feature and the",
    "start": "2256200",
    "end": "2263319"
  },
  {
    "text": "developers didn't complain so overall I think it was a a good u a good",
    "start": "2263319",
    "end": "2269560"
  },
  {
    "text": "decision and that was it so um if you",
    "start": "2269560",
    "end": "2274880"
  },
  {
    "text": "have any questions uh any question sorry if you have more",
    "start": "2274880",
    "end": "2280640"
  },
  {
    "text": "um if you want to know a little bit more about sord generators weaving and so on I put some links here nothing uh and the",
    "start": "2280640",
    "end": "2287880"
  },
  {
    "text": "link is also underneath and also there are my colleagues at the uh at the booth in the",
    "start": "2287880",
    "end": "2296119"
  },
  {
    "text": "in the hall so they are ready to answer your um your questions and yes that's it",
    "start": "2296119",
    "end": "2306599"
  },
  {
    "text": "thank you and if you have questions I can take questions otherwise we can also talk later on you can stop me wherever",
    "start": "2307839",
    "end": "2314560"
  },
  {
    "text": "you want any questions we can also talk privately if",
    "start": "2314560",
    "end": "2321400"
  },
  {
    "text": "you don't want to thank you very much",
    "start": "2321400",
    "end": "2327559"
  }
]