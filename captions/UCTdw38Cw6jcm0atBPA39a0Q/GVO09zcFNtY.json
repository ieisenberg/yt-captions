[
  {
    "text": "i my name is Alan hold I am usually when I talk at conferences I do it on one of",
    "start": "4270",
    "end": "10059"
  },
  {
    "text": "two subjects that are related as I other talk about agile process or I talk about architectural topics that are related to",
    "start": "10059",
    "end": "16630"
  },
  {
    "text": "agility and micro-services are right in the middle of that space is the micro",
    "start": "16630",
    "end": "22990"
  },
  {
    "text": "servers architectures are almost ideal when you're developing an agile environment because the small size of",
    "start": "22990",
    "end": "30189"
  },
  {
    "text": "the micro service works really well with a small team that's doing the agile development so the tool related is that",
    "start": "30189",
    "end": "35680"
  },
  {
    "text": "I talk number of subjects said I should say about this particular subject I'm going to be doing a full three day",
    "start": "35680",
    "end": "42510"
  },
  {
    "text": "tutorial on Microsoft in an hour I can",
    "start": "42510",
    "end": "48820"
  },
  {
    "text": "only talk about the basics I can't talk about any of the in-depth stuff as we'll be looking that November class I'll be",
    "start": "48820",
    "end": "54970"
  },
  {
    "text": "talking about some of the same subjects I'll be talking about today but in much greater depth so if you want to follow",
    "start": "54970",
    "end": "60280"
  },
  {
    "text": "it along further do that and the slides are on my website is the URL is sometimes the URL the total comm slash",
    "start": "60280",
    "end": "67180"
  },
  {
    "text": "slides I'll have that URL up in the last slide also let's talk about swarming and what that's all about",
    "start": "67180",
    "end": "72760"
  },
  {
    "text": "first of all swarming systems are systems where you have objects cooperating with one another without any",
    "start": "72760",
    "end": "79860"
  },
  {
    "text": "controlling agent at the top telling everybody what to do and in the case of",
    "start": "79860",
    "end": "85900"
  },
  {
    "text": "a flock of geese each bird is just following the bird that was that's right in front of it and interestingly in the",
    "start": "85900",
    "end": "92590"
  },
  {
    "text": "swarms in the murmuration of starlings we were looking at on the initial slide the same rules applies every bird is",
    "start": "92590",
    "end": "98920"
  },
  {
    "text": "just looking at the bird in front of it however the the behavior of the system",
    "start": "98920",
    "end": "104200"
  },
  {
    "text": "as a whole is much more interesting than that it's much more interesting than you would guess by simply looking at what",
    "start": "104200",
    "end": "109750"
  },
  {
    "text": "any one bird is doing at any given moment now the systems are not chaotic is the",
    "start": "109750",
    "end": "114820"
  },
  {
    "text": "bird in front for example this guy will be in front for a while it'll get tired he'll fall to the back of the V and one",
    "start": "114820",
    "end": "120909"
  },
  {
    "text": "of the other birds will come forward so there's a there's a coordination going on with inside the clock as the flock is",
    "start": "120909",
    "end": "126580"
  },
  {
    "text": "moving but at any given moment everybody is just looking at the birds that are right in front of it now one of the best",
    "start": "126580",
    "end": "132340"
  },
  {
    "text": "examples of that in the mathematical world is Conway's Game of Life which I'm sure some of you at least have seen what",
    "start": "132340",
    "end": "139720"
  },
  {
    "text": "we're looking at here is a this is called a glider gun and objects that are appearing out of the out of the bottom",
    "start": "139720",
    "end": "147010"
  },
  {
    "text": "here those are the gliders now the interesting thing about this is that this game is following the same sorts of",
    "start": "147010",
    "end": "153070"
  },
  {
    "text": "rules that the flock follows when it's moving is that every cell is determining",
    "start": "153070",
    "end": "158290"
  },
  {
    "text": "whether it's alive or dead by looking at the state of the surrounding cells if there are too many cells that are alive",
    "start": "158290",
    "end": "164680"
  },
  {
    "text": "around you you die from overcrowding if there are too few there you die from loneliness if they're just the right amount will pop into existence or",
    "start": "164680",
    "end": "170800"
  },
  {
    "text": "continue to exist and those are the only rules that are involved so this entire this behavior here we're seeing this",
    "start": "170800",
    "end": "177280"
  },
  {
    "text": "interesting organized behavior is not actually programmed into this system is that it behaves in a useful way without",
    "start": "177280",
    "end": "184540"
  },
  {
    "text": "us having to program that specific behavior now this is particularly important in micro services because when",
    "start": "184540",
    "end": "190570"
  },
  {
    "text": "we're talking about lots and lots of micro services all operating at the same time and when we can't predict how many",
    "start": "190570",
    "end": "196630"
  },
  {
    "text": "of them that will be at any given moment having a overreaching coordinating entity telling the services what to do",
    "start": "196630",
    "end": "203739"
  },
  {
    "text": "is just too hard a problem to be solvable and a lot of the big",
    "start": "203739",
    "end": "208800"
  },
  {
    "text": "coordination systems if you will have so much in the way of coordination code and",
    "start": "208800",
    "end": "214690"
  },
  {
    "text": "so forth in them it's there it's unconvincing to me that they're going to work is that we have to have this we",
    "start": "214690",
    "end": "219790"
  },
  {
    "text": "have to have systems that are more flexible than that so a system that's adaptive is always going to be better in my mind than a system where you've got",
    "start": "219790",
    "end": "225970"
  },
  {
    "text": "some controlling agent that's in charge of everything and the game of life is a good example of that it's an adaptive",
    "start": "225970",
    "end": "231280"
  },
  {
    "text": "system but it was but the main behavior here is not programmed so microservices",
    "start": "231280",
    "end": "236799"
  },
  {
    "text": "then are a way of applying that kind of thinking to a programming environment to",
    "start": "236799",
    "end": "245530"
  },
  {
    "text": "a server environment now I could spend several hours talking about the characteristics of micro services but",
    "start": "245530",
    "end": "251530"
  },
  {
    "text": "let's talk about a few of the most important ones in this context first of all the micro service has to be a completely standalone thing you have to",
    "start": "251530",
    "end": "258910"
  },
  {
    "text": "be able to deploy a micro service independently of any other micro service so that's the first problem with the big",
    "start": "258910",
    "end": "265750"
  },
  {
    "text": "systems is they need to know too much about the micro services them cell in order to get them up and running so a",
    "start": "265750",
    "end": "271449"
  },
  {
    "text": "micro service should be implementable as a standalone process that you ought to be able to just launch without having to",
    "start": "271449",
    "end": "277569"
  },
  {
    "text": "have any kind of complicated system around the outside of it in order to get it launched and hooked into the system",
    "start": "277569",
    "end": "283330"
  },
  {
    "text": "properly and that's that's the only way that you get the independence that you",
    "start": "283330",
    "end": "288340"
  },
  {
    "text": "need for a micro service to be useful whole point of a service in other words is that you can work on it independently",
    "start": "288340",
    "end": "293349"
  },
  {
    "text": "as you can not just work on the code but the point independently bring it down to",
    "start": "293349",
    "end": "299020"
  },
  {
    "text": "independently deploy new versions you ought to be able to test things into the system manually by injecting services into the system manually instead of",
    "start": "299020",
    "end": "305289"
  },
  {
    "text": "seeing if they work or not you can't do any of that if the micro services depend on other things and in fact anytime you",
    "start": "305289",
    "end": "312220"
  },
  {
    "text": "have a situation where in order to deploy a service you've got to do something else as far as I'm concerned that's not a micro service anymore is",
    "start": "312220",
    "end": "317800"
  },
  {
    "text": "that what that is is a monolith with plugged with plugins and a monolith with plugins is not a micro service by",
    "start": "317800",
    "end": "323889"
  },
  {
    "text": "definition it's a monolith the second characteristic that's important is that micro services are small the usual rule",
    "start": "323889",
    "end": "331659"
  },
  {
    "text": "of thumb that people have been using for the last years so at least as they say a service should be the size of your head and the way that I interpret that is",
    "start": "331659",
    "end": "339190"
  },
  {
    "text": "that you should be able to have everything about how the service works in your head at once the best way to",
    "start": "339190",
    "end": "345969"
  },
  {
    "text": "think about this is that you should be thinking in terms of object size it's that I think a good size you know service should be implementable is it",
    "start": "345969",
    "end": "351699"
  },
  {
    "text": "implementable as a single class and it could be a class that follows all the usual rules about classes and how big",
    "start": "351699",
    "end": "358750"
  },
  {
    "text": "things should be so you get smaller than that and you have what I guess they're calling nano services now and there's",
    "start": "358750",
    "end": "364000"
  },
  {
    "text": "Amazon lambdas and that kind of thing but at that level you have two finer granularity is that the things that are",
    "start": "364000",
    "end": "370030"
  },
  {
    "text": "related to each other are not lumped together physically which makes them harder to maintain in other words the",
    "start": "370030",
    "end": "375219"
  },
  {
    "text": "controlling principles here excuse me is the so-called single responsibility principle right this knife violates the",
    "start": "375219",
    "end": "380650"
  },
  {
    "text": "single responsibility principle it's doing it doing way more it should it's",
    "start": "380650",
    "end": "386110"
  },
  {
    "text": "more to the point all of the things that it does are not really related to the to",
    "start": "386110",
    "end": "391780"
  },
  {
    "text": "the other things that it does so this is a clear violation of single responsibility that simple responsibility doesn't mean you only do",
    "start": "391780",
    "end": "397839"
  },
  {
    "text": "one thing so this corkscrew for example is also satisfied or does satisfy the",
    "start": "397839",
    "end": "404970"
  },
  {
    "text": "requirements of simple responsibilities even though there are four things that it's doing the thing is is that all four",
    "start": "404970",
    "end": "410699"
  },
  {
    "text": "of those functions are focused on a single goal which is to open a bottle of wine so the idea is not that you want an",
    "start": "410699",
    "end": "418199"
  },
  {
    "text": "object to do one thing but rather you want the object to be coherent in the sense that the group of things that it",
    "start": "418199",
    "end": "423750"
  },
  {
    "text": "does are all related to one another in a in a tight way so if something if you",
    "start": "423750",
    "end": "429990"
  },
  {
    "text": "call some method on the object on the class on the service that that method",
    "start": "429990",
    "end": "435389"
  },
  {
    "text": "might need to change some kind of state one way or another whether this urgent service is stateful or not is actually kind of irrelevant here and a subsequent",
    "start": "435389",
    "end": "443039"
  },
  {
    "text": "call might need to know that that change has happened well if you've got two separate functions to Amazon lambdas if",
    "start": "443039",
    "end": "448680"
  },
  {
    "text": "you will you can't do that or at least it becomes very very difficult to do that so simple responsibility really",
    "start": "448680",
    "end": "455280"
  },
  {
    "text": "applies the other principle that's essential here is the notion of simplicity this is a quote from the",
    "start": "455280",
    "end": "461160"
  },
  {
    "text": "agile manifesto but it's not which is not an accident its simplicity is central to agile thinking also but services should be as simple as",
    "start": "461160",
    "end": "468270"
  },
  {
    "text": "possible and that's another problem that I have with the way a lot of micro services are being implemented on the",
    "start": "468270",
    "end": "473520"
  },
  {
    "text": "big vendor frameworks right now is that you have to write the service in such a way that it supports the framework and",
    "start": "473520",
    "end": "479460"
  },
  {
    "text": "that not only violates the isolation issue right that standalone issue of the services but it it also means that they",
    "start": "479460",
    "end": "485280"
  },
  {
    "text": "can't be simple this complexity there that shouldn't be there any time I hear the word it's simple I",
    "start": "485280",
    "end": "492210"
  },
  {
    "text": "get scared right anytime somebody says oh this is easy right as I think that is one of the two phrases in other words in",
    "start": "492210",
    "end": "498419"
  },
  {
    "text": "English that scare me more than anything else is oh it's easy and this is awesome and when you hear both of those things",
    "start": "498419",
    "end": "503669"
  },
  {
    "text": "together you know it's neither and so we",
    "start": "503669",
    "end": "508770"
  },
  {
    "text": "want to keep things as simple as possible so my rule with all kinds of programming and this includes",
    "start": "508770",
    "end": "514260"
  },
  {
    "text": "microservices is the so-called fool me once rule is that the first time you implement something you implement it in",
    "start": "514260",
    "end": "521339"
  },
  {
    "text": "the absolute simplest way you possibly can and by simple I mean really simple so I never even do things like add extra",
    "start": "521339",
    "end": "528420"
  },
  {
    "text": "arguments to functions on the off chance that that will make the function more flexible if I will implement exactly",
    "start": "528420",
    "end": "534089"
  },
  {
    "text": "what's new nothing else now there are a lot of advantages to that the coders to go very quickly for one thing it's easy to test",
    "start": "534089",
    "end": "540320"
  },
  {
    "text": "it's easy to debug and it more to the point is more likely to work than not",
    "start": "540320",
    "end": "546260"
  },
  {
    "text": "because there is less in it to go wrong now if I find myself refactoring and I",
    "start": "546260",
    "end": "552140"
  },
  {
    "text": "and I say if I had done this somewhat more complicated thing if I had this design pattern in place for example and",
    "start": "552140",
    "end": "558070"
  },
  {
    "text": "the refactoring would have been easier then I will add a little bit of complexity in order to support the",
    "start": "558070",
    "end": "563420"
  },
  {
    "text": "refactor so I add complexity as a side-effect of refactoring when it's necessary and that complexity tends to",
    "start": "563420",
    "end": "569750"
  },
  {
    "text": "take the role of a design pattern or something along those lines",
    "start": "569750",
    "end": "574880"
  },
  {
    "text": "but we want that characteristic on our micro services also we want them to be as simple as possible and still get the",
    "start": "574880",
    "end": "581060"
  },
  {
    "text": "job done without any kind of extra stuff so if I'm writing code in order to",
    "start": "581060",
    "end": "586220"
  },
  {
    "text": "support my service framework there's something wrong I don't want to do that a couple other kind of basic issues",
    "start": "586220",
    "end": "592760"
  },
  {
    "text": "before we start you go to talks at conferences like this and Netflix always comes up",
    "start": "592760",
    "end": "598040"
  },
  {
    "text": "we are not Netflix but if anybody in this room writing the system right now that has to be the size and have the",
    "start": "598040",
    "end": "605450"
  },
  {
    "text": "scalability of Netflix I don't see anybody raising their hands right nobody",
    "start": "605450",
    "end": "610760"
  },
  {
    "text": "ever does right so we don't have to worry about the things that Netflix worries about a lot of the solutions",
    "start": "610760",
    "end": "616430"
  },
  {
    "text": "that we see a lot of stuff in Azure for example is meant to solve the Netflix problem we don't have that right is that",
    "start": "616430",
    "end": "623240"
  },
  {
    "text": "most of the systems that I work on we're just fine in one fork or VM in a cloud",
    "start": "623240",
    "end": "628520"
  },
  {
    "text": "in the cloud someplace I can get reliability by cloning that three or four times not done I don't have to have any of the fancy stuff that you see",
    "start": "628520",
    "end": "635900"
  },
  {
    "text": "supported and pushed by a lot of these micro service frameworks because our systems just don't need them so part of",
    "start": "635900",
    "end": "641839"
  },
  {
    "text": "the simplicity rule is that we don't want to build the service for a system for a situation that does not exist if",
    "start": "641839",
    "end": "647420"
  },
  {
    "text": "we're lucky enough to have to scale we want to build a service in such a way that it can scale but we don't need to",
    "start": "647420",
    "end": "653540"
  },
  {
    "text": "build all of the scaling in from day one because if we do that it's going to take longer to get to market it's going to",
    "start": "653540",
    "end": "659240"
  },
  {
    "text": "make the system more complicated it'll be harder to debug all of the other negatives that are associated with big",
    "start": "659240",
    "end": "664339"
  },
  {
    "text": "monolithic systems so as simple as possible the other problem that people don't talk",
    "start": "664339",
    "end": "669480"
  },
  {
    "text": "about a lot is locking is that a lot of vendors do what they do in order to lock",
    "start": "669480",
    "end": "675959"
  },
  {
    "text": "you into their systems and a lot of what they're saying is essential is not essential but if you buy the if you",
    "start": "675959",
    "end": "682890"
  },
  {
    "text": "drink the kool-aid right if you buy their argument you end up implementing this stuff in such a core way that you",
    "start": "682890",
    "end": "688560"
  },
  {
    "text": "are incapable it's not possible to take their system and move it to some some other vendor and that is always a",
    "start": "688560",
    "end": "694649"
  },
  {
    "text": "mistake is all of the vendors have advantages all of them have disadvantages you might not want to do",
    "start": "694649",
    "end": "699810"
  },
  {
    "text": "them at all you might want to be running inside your own data center at some point and you might want to run on the cloud at some other point you want that",
    "start": "699810",
    "end": "705810"
  },
  {
    "text": "flexibility and you want the ability if even if it's nothing that cost that's driving it to move from one vendor to",
    "start": "705810",
    "end": "710970"
  },
  {
    "text": "another so as soon as you start leveraging the facilities that a",
    "start": "710970",
    "end": "716130"
  },
  {
    "text": "specific vendor is providing then you are locked you're locked in now that",
    "start": "716130",
    "end": "721740"
  },
  {
    "text": "doesn't occur with all facilities right every vendor has some kind of storage mechanism and the api's might be",
    "start": "721740",
    "end": "728220"
  },
  {
    "text": "differently but you might be different from vendor to vendor but of course you can wrap those api's in a very simple shallow class that isolates you from the",
    "start": "728220",
    "end": "735180"
  },
  {
    "text": "specific API so that you can port more easily but other facilities are more tightly integrated into the way the",
    "start": "735180",
    "end": "741810"
  },
  {
    "text": "system works and I avoid those like the plague almost everything that I'm implementing right now is done on top of",
    "start": "741810",
    "end": "747089"
  },
  {
    "text": "one nano VM which costs about five dollars a month depending on who you're getting it from is Amazon and digitalocean both charge five bucks a",
    "start": "747089",
    "end": "753540"
  },
  {
    "text": "month for their nano VMS and in fact Amazon's nano VM if you if you are",
    "start": "753540",
    "end": "759540"
  },
  {
    "text": "running a computer or a service on one VM you'd probably be down in the free tier most of the time is that you're",
    "start": "759540",
    "end": "766140"
  },
  {
    "text": "using it so lightly in other words that it's not going to cost you anything so things like Amazon lambda and stuff I",
    "start": "766140",
    "end": "772800"
  },
  {
    "text": "hate long guys I think it's a disaster and but more to the point it's what they say which is you're only paying for the",
    "start": "772800",
    "end": "778500"
  },
  {
    "text": "time that you're spending well that's only true up to a point if you spend more than 100 milliseconds inside your function then they start charging you a",
    "start": "778500",
    "end": "785339"
  },
  {
    "text": "lot of money and you can open your bill from Amazon next month and find an eighty thousand dollar bill from Amazon",
    "start": "785339",
    "end": "790589"
  },
  {
    "text": "or eight hundred eight hundred thousand kronor bill from Amazon and their 80 a",
    "start": "790589",
    "end": "795890"
  },
  {
    "text": "Hollywood ticket times 100 whatever that is every times 10 and the",
    "start": "795890",
    "end": "801800"
  },
  {
    "text": "the point is is that you get surprises when it comes to when it comes to billing if you're talking about five",
    "start": "801800",
    "end": "807900"
  },
  {
    "text": "dollars a month for an endo VM there are no surprises there you know exactly what it's going to cost them it doesn't cost much and most of us can run our services",
    "start": "807900",
    "end": "814260"
  },
  {
    "text": "on nano VMS without any difficulty at all so you don't want to be locked in",
    "start": "814260",
    "end": "820080"
  },
  {
    "text": "the other issue is the complexity and the hideous difficulty of doing things",
    "start": "820080",
    "end": "826950"
  },
  {
    "text": "like configuration and just look at the service fabric this is not following the",
    "start": "826950",
    "end": "832140"
  },
  {
    "text": "single responsibility principle at the service fabric is a monolith it's among",
    "start": "832140",
    "end": "837720"
  },
  {
    "text": "the worst kinds of monoliths it's huge it is hideously difficult to configure",
    "start": "837720",
    "end": "843170"
  },
  {
    "text": "you need an expert just to configure it whether it works or not depends on",
    "start": "843170",
    "end": "848640"
  },
  {
    "text": "whether you have it configured right but it's something so hard to configure you don't know whether it's configured right if you're going to work on the service",
    "start": "848640",
    "end": "854970"
  },
  {
    "text": "fabric all of a sudden you have to spend a lot of time learning how the service fabric works when that time is better",
    "start": "854970",
    "end": "860760"
  },
  {
    "text": "spent programming it's just adding way too much complexity so I I reject these",
    "start": "860760",
    "end": "866970"
  },
  {
    "text": "kinds of systems just out of hand this is a monolith into which you are plugging things and micro services have",
    "start": "866970",
    "end": "873150"
  },
  {
    "text": "nothing are not plugins they're meant to be standalone independent units of computation so as soon as you're",
    "start": "873150",
    "end": "879840"
  },
  {
    "text": "plugging your micro service into something it ceases to be a micro service anymore it becomes part of the monolith thing you have all of the",
    "start": "879840",
    "end": "884940"
  },
  {
    "text": "problems that you have associated with monoliths so I really don't like this kind of stuff I also really don't like",
    "start": "884940",
    "end": "890700"
  },
  {
    "text": "the notion of orchestration is that the idea of an orchestra orchestration is that the somebody from outside is",
    "start": "890700",
    "end": "898440"
  },
  {
    "text": "telling the services how to work and again if that's happening your services are not independent of each other",
    "start": "898440",
    "end": "903930"
  },
  {
    "text": "anymore they're not independently deployable anymore my service is typically run at standalone processes",
    "start": "903930",
    "end": "908940"
  },
  {
    "text": "and nobody is telling them what to do so I don't like orchestration either is what we should be doing in other words",
    "start": "908940",
    "end": "914970"
  },
  {
    "text": "is not orchestration but what's called choreography where the individual player is here the individual dancers are paying attention to the dancers around",
    "start": "914970",
    "end": "921270"
  },
  {
    "text": "them they're all following a general theme but they're not it's not like a orchestration system where they're",
    "start": "921270",
    "end": "927240"
  },
  {
    "text": "behaving to the to the note in order to do whatever is on the score",
    "start": "927240",
    "end": "934160"
  },
  {
    "text": "so when we implement these things there's lots of ways that we can implement them typically one implements",
    "start": "934250",
    "end": "940310"
  },
  {
    "text": "them with some kind of HTTP front-end typically that requires you to have load",
    "start": "940310",
    "end": "946220"
  },
  {
    "text": "balancing and things like that on the front of the front-end that in itself is",
    "start": "946220",
    "end": "951950"
  },
  {
    "text": "a problem is HTTP is not zero overhead micro-services do have to talk to the",
    "start": "951950",
    "end": "958190"
  },
  {
    "text": "web but in most micro service systems most of the services spend most of their",
    "start": "958190",
    "end": "963590"
  },
  {
    "text": "time talking to each other not talking outside most of the micro service",
    "start": "963590",
    "end": "969500"
  },
  {
    "text": "systems that we work on will run in a single data center they're not you're not going to scatter your services over the whole planet you might replicate",
    "start": "969500",
    "end": "975740"
  },
  {
    "text": "your service system in different data centers but you're not going to scatter the service across data centers if for",
    "start": "975740",
    "end": "981470"
  },
  {
    "text": "no other reason it's impractical if you put your data in the EU and you put your your functions in the US there's going",
    "start": "981470",
    "end": "988070"
  },
  {
    "text": "to be hundreds of milliseconds of lag every time you need to access your data it's just not going to work so generally",
    "start": "988070",
    "end": "994160"
  },
  {
    "text": "thing generally speaking everything is concentrated in one place which means that we don't really need HTTP as HTTP",
    "start": "994160",
    "end": "999680"
  },
  {
    "text": "remember HTTP exists in order to be able to access data across the Internet if",
    "start": "999680",
    "end": "1004960"
  },
  {
    "text": "we're not accessing data across the internet we don't need that overhead the other problem is that it makes our systems harder to implement again the",
    "start": "1004960",
    "end": "1011710"
  },
  {
    "text": "micro services should be very small as soon as you start building a web server into your micro service it's not small",
    "start": "1011710",
    "end": "1017530"
  },
  {
    "text": "anymore as soon as you start bundling your micro service with apache or nginx or iis or any kind of web server in",
    "start": "1017530",
    "end": "1024160"
  },
  {
    "text": "order to have a web front-end then it's even less small because now the web server is effectively part of your",
    "start": "1024160",
    "end": "1029620"
  },
  {
    "text": "service and you have a lot of configuration and coordination issues that you would rather not have so having",
    "start": "1029620",
    "end": "1036040"
  },
  {
    "text": "your services talking with HTTPS or HTTP at the highest level is not actually a",
    "start": "1036040",
    "end": "1041350"
  },
  {
    "text": "very good strategy is that it adds in efficiencies adds complexity it takes away independence and you don't want any",
    "start": "1041350",
    "end": "1046660"
  },
  {
    "text": "of those things to be happening so what do you use when services talk to each other and the answer is that you should",
    "start": "1046660",
    "end": "1051970"
  },
  {
    "text": "be using some form of lightweight messaging now messaging is one of those",
    "start": "1051970",
    "end": "1057100"
  },
  {
    "text": "topics that everybody really desperately needs to know about and nobody knows that it's always presented is this kind",
    "start": "1057100",
    "end": "1062650"
  },
  {
    "text": "of minor side issue because people are so focused on the HTTP thing that they're not thinking about how you actually coordinate effectively",
    "start": "1062650",
    "end": "1069239"
  },
  {
    "text": "there are a lot of messaging systems out there there's rabbit there's Kafka there's zero MQ which I'll talk about in",
    "start": "1069239",
    "end": "1076059"
  },
  {
    "text": "a moment and there are bigger systems like TIBCO in a micro service",
    "start": "1076059",
    "end": "1082119"
  },
  {
    "text": "environment you want the system to be as lightweight as possible you want the least amount of configuration the least amount of programming overhead you just",
    "start": "1082119",
    "end": "1088179"
  },
  {
    "text": "want to use messaging in other words as a way to talk to other services in an efficient way so lightweight is a key",
    "start": "1088179",
    "end": "1094690"
  },
  {
    "text": "part of this equation now just an address for a few minutes let me talk for a bit about what messaging systems",
    "start": "1094690",
    "end": "1100929"
  },
  {
    "text": "do for you messaging systems basically are doing Network communication and they're doing it using one of two metaphors the first",
    "start": "1100929",
    "end": "1107440"
  },
  {
    "text": "one being a queue message queue works like any other queue it's a it's a first-in first-out",
    "start": "1107440",
    "end": "1112479"
  },
  {
    "text": "system the way that two objects on the network talk to each other is literally",
    "start": "1112479",
    "end": "1117940"
  },
  {
    "text": "by sending a message the message is a physical packet of data typically in my",
    "start": "1117940",
    "end": "1123909"
  },
  {
    "text": "systems I always use JSON for my payloads because Jason is completely independent of languages that it's a",
    "start": "1123909",
    "end": "1130659"
  },
  {
    "text": "important characteristic of a micro service that it be both platform and language independent I want if I'm",
    "start": "1130659",
    "end": "1136659"
  },
  {
    "text": "writing a micro service system in other words if I'm doing string operations I want to write the service in Python I don't want to write it in C sharp or",
    "start": "1136659",
    "end": "1142659"
  },
  {
    "text": "Java if I'm doing something that's got a lot of logic associated with it then I want to go to c-sharp or Java or",
    "start": "1142659",
    "end": "1147909"
  },
  {
    "text": "something like that where the logic is going to be easier to implement I want to use the appropriate tool in the appropriate place which means that micro",
    "start": "1147909",
    "end": "1154090"
  },
  {
    "text": "server systems are typically both polyglot in the sense that different services are written in different languages and also platform-independent",
    "start": "1154090",
    "end": "1159909"
  },
  {
    "text": "the messaging system allows you to have that independence because two things",
    "start": "1159909",
    "end": "1167320"
  },
  {
    "text": "written in different languages can talk to each other across the network and if the information is flowing back and",
    "start": "1167320",
    "end": "1173679"
  },
  {
    "text": "forth in some sort of uniform format and Jason is a good format for that then you're isolated from the implementation",
    "start": "1173679",
    "end": "1180759"
  },
  {
    "text": "language and even the platform if you have the system so you could have a service running on Windows talking to a",
    "start": "1180759",
    "end": "1186220"
  },
  {
    "text": "server the services running on Linux and there would be no problem there the messaging system in other words would absorb that so the basic idea then with",
    "start": "1186220",
    "end": "1194139"
  },
  {
    "text": "our queues this is the zero MQ situation so you have a producer and a consumer of",
    "start": "1194139",
    "end": "1200889"
  },
  {
    "text": "the message on the the what blue line here is the network you send a message obviously",
    "start": "1200889",
    "end": "1206800"
  },
  {
    "text": "from the producer to the consumer in the case of zero M Q 0 and Q is a point-to-point protocol which is one of",
    "start": "1206800",
    "end": "1212320"
  },
  {
    "text": "the things I like about it so the producer talks directly to the consumer",
    "start": "1212320",
    "end": "1217740"
  },
  {
    "text": "now the problem with that is that if the producer and the consumer are not talking to some through some central",
    "start": "1217740",
    "end": "1223600"
  },
  {
    "text": "coordinating entity it becomes difficult to make a connection and then make sure that that connection is reliable if the",
    "start": "1223600",
    "end": "1229990"
  },
  {
    "text": "connection drops you need to be able to re-establish the connection and it should be completely painless 0 does",
    "start": "1229990",
    "end": "1235240"
  },
  {
    "text": "that for us which is a good thing that's one of the things reasons we're using messaging systems as all of these kind",
    "start": "1235240",
    "end": "1240460"
  },
  {
    "text": "of reliability issues can be handled by the messaging system itself rather than by you it's code that you do not have to",
    "start": "1240460",
    "end": "1245530"
  },
  {
    "text": "write but it's a strict point-to-point thing I want to make that work the producer doesn't know when the consumer",
    "start": "1245530",
    "end": "1251860"
  },
  {
    "text": "is going to connect or vice-versa either one could come up first so if the producer comes up and starts",
    "start": "1251860",
    "end": "1257440"
  },
  {
    "text": "sending things off to the consumer and the consumer isn't in the system yet it's got to store messages locally on the producer side and so that when the",
    "start": "1257440",
    "end": "1263800"
  },
  {
    "text": "consumer finally connects it can then send them across so everyone following what I'm saying same thing applies on",
    "start": "1263800",
    "end": "1269710"
  },
  {
    "text": "the consumer side there could be many producers all sending messages to the consumers well you need a queue over here to hold the ones that you haven't",
    "start": "1269710",
    "end": "1275830"
  },
  {
    "text": "gotten around to handling yet so the queue has to be distributed in a point-to-point system now also connected",
    "start": "1275830",
    "end": "1284470"
  },
  {
    "text": "to this is the notion of connecting and binding one side has to have an address an IP address of some sort the other",
    "start": "1284470",
    "end": "1291280"
  },
  {
    "text": "side has to connect to that IP address interestingly in 0 at least you can put",
    "start": "1291280",
    "end": "1298750"
  },
  {
    "text": "the bind on either side so it doesn't matter where it is the question is where is it most convenient is that in order",
    "start": "1298750",
    "end": "1305230"
  },
  {
    "text": "for this guy to talk to this guy it has to know its address in order for this guy to talk to that guy it doesn't need to know the address",
    "start": "1305230",
    "end": "1310270"
  },
  {
    "text": "so topologically you've got to decide how to make that work I'll talk about that a little bit more in a moment but the binding can happen anywhere you",
    "start": "1310270",
    "end": "1317710"
  },
  {
    "text": "can put a broker in the middle of the system a broker is a separate entity so if you talk about systems like 0 mq or",
    "start": "1317710",
    "end": "1324450"
  },
  {
    "text": "Kafka or any of the larger messaging systems they all have brokers I don't",
    "start": "1324450",
    "end": "1329650"
  },
  {
    "text": "like brokers a broker is a single point of failure in the system it is difficult to configure it couples the end points together which it",
    "start": "1329650",
    "end": "1336430"
  },
  {
    "text": "shouldn't the only thing you get from having a broker is that the addresses the bindings are bound at the broker",
    "start": "1336430",
    "end": "1341980"
  },
  {
    "text": "side so this guy can talk to that guy both of them know about the broker but neither of them need to know about each",
    "start": "1341980",
    "end": "1347350"
  },
  {
    "text": "other and that's convenient but it is not convenient enough to make me think",
    "start": "1347350",
    "end": "1352690"
  },
  {
    "text": "that I want to use these things is that brokers again are very very complicated they're hard to configure they're very",
    "start": "1352690",
    "end": "1359410"
  },
  {
    "text": "heavyweight you just don't want to deal with them if you don't want to or if you don't have to rather they're also again",
    "start": "1359410",
    "end": "1365500"
  },
  {
    "text": "a single point of failure if the broker goes down the entire system comes to a halt and I don't like that I want my assistants to be more resilient",
    "start": "1365500",
    "end": "1371230"
  },
  {
    "text": "micro-service system should be resilient they shouldn't they shouldn't depend on one piece of the system functioning in",
    "start": "1371230",
    "end": "1376660"
  },
  {
    "text": "order to function so when you have point-to-point communications you don't get that dependency the final thing you",
    "start": "1376660",
    "end": "1383260"
  },
  {
    "text": "get with a broker while we're on the subject is you can have multiple queues the queue is actually in the broker so you can have multiple queues and one",
    "start": "1383260",
    "end": "1388540"
  },
  {
    "text": "broker but again what that means is that you take all of the queues for your entire system and put it in one single",
    "start": "1388540",
    "end": "1394000"
  },
  {
    "text": "broker when that broker goes down the entire system stops nobody has any data any more until the broker comes back up",
    "start": "1394000",
    "end": "1399970"
  },
  {
    "text": "again and from a resiliency point of view I don't like that now in terms of",
    "start": "1399970",
    "end": "1405370"
  },
  {
    "text": "sending messages typically the producer will talk to multiple consumers with some kind of queue there could be a",
    "start": "1405370",
    "end": "1411250"
  },
  {
    "text": "broker in the middle but there doesn't have to be typically when the producer sends messages out they get sent out in",
    "start": "1411250",
    "end": "1417430"
  },
  {
    "text": "a round-robin sort of fashion as they just go to the various consumers that are connected the thing to notice when",
    "start": "1417430",
    "end": "1424300"
  },
  {
    "text": "I'm talking about that is that this is a kind of load balancing so we talked a lot about load balancing in Microsoft in",
    "start": "1424300",
    "end": "1430810"
  },
  {
    "text": "the micro service world the question is do we really need to worry about full-blown load balancing and the answer",
    "start": "1430810",
    "end": "1436330"
  },
  {
    "text": "is when it comes to multiple instances of the same service no right because if",
    "start": "1436330",
    "end": "1442810"
  },
  {
    "text": "you have multiple instances of the same service they're all doing about the same amount of work in about the same amount",
    "start": "1442810",
    "end": "1448150"
  },
  {
    "text": "of time so if you pull that out of the load balancing equation what you have is around Robin scheduling and the message",
    "start": "1448150",
    "end": "1456730"
  },
  {
    "text": "system will do round-robin scheduling for us just fine so by using a messaging",
    "start": "1456730",
    "end": "1462460"
  },
  {
    "text": "system and having the producer round robin ting out to the various consumers with subsequent",
    "start": "1462460",
    "end": "1467890"
  },
  {
    "text": "messages with a series of subsequent messages we eliminate the need to load balance between multiple instances of",
    "start": "1467890",
    "end": "1473800"
  },
  {
    "text": "the same service we just don't need to do it anymore so we can simplify things a lot again by",
    "start": "1473800",
    "end": "1479260"
  },
  {
    "text": "just relying on the messaging system also say as an aside here you often hear about message buses a message bus is",
    "start": "1479260",
    "end": "1485950"
  },
  {
    "text": "nothing but about a broker if you had a situation when you had one queue in the broker right so you can think of a",
    "start": "1485950",
    "end": "1491590"
  },
  {
    "text": "message or a bus as just being a fancy way to say queue is that it's basically the same thing",
    "start": "1491590",
    "end": "1496980"
  },
  {
    "text": "now the other metaphor that people use in messaging systems as the publish/subscribe the type of sub",
    "start": "1496980",
    "end": "1502150"
  },
  {
    "text": "metaphor you have a publisher that publishes events you have a bunch of subscribers that are interested in",
    "start": "1502150",
    "end": "1507310"
  },
  {
    "text": "hearing about the events what you publish is a specific topic in this case",
    "start": "1507310",
    "end": "1512710"
  },
  {
    "text": "there is there may be a couple topics I'm assuming there's a blue topic and there's an orange topic so you could",
    "start": "1512710",
    "end": "1518800"
  },
  {
    "text": "subscribe to the blue topic or you could subscribe to the orange topic or subscribe to both of them when the",
    "start": "1518800",
    "end": "1524110"
  },
  {
    "text": "publisher publishes they publish on a specific topic and then that is routed to whoever subscribe to that topic so",
    "start": "1524110",
    "end": "1531040"
  },
  {
    "text": "there there is no round-robin it's a broad broadcast kind of situation pub/sub is a little bit faster",
    "start": "1531040",
    "end": "1536680"
  },
  {
    "text": "it's a little bit better in many situations than queueing is but it's not a replacement for queueing it's very",
    "start": "1536680",
    "end": "1541690"
  },
  {
    "text": "difficult sometimes you just need queues and one of the downsides of some of the messaging frameworks that I've seen like",
    "start": "1541690",
    "end": "1548170"
  },
  {
    "text": "Kafka is they just give you pub sub you can you can fake it in Kafka you could have a have a single subscriber",
    "start": "1548170",
    "end": "1554890"
  },
  {
    "text": "subscribing to a single topic but that's kind of work that I don't want to do I don't want to worry about it I'd rather",
    "start": "1554890",
    "end": "1560140"
  },
  {
    "text": "have the message messaging system in other words handle both metaphors for me so ideally you went both",
    "start": "1560140",
    "end": "1565600"
  },
  {
    "text": "publish/subscribe and some kind of queueing system and of course you could add add a broker to the middle of this",
    "start": "1565600",
    "end": "1570940"
  },
  {
    "text": "if you wanted to but there's no requirement that you have brokers there assuming that you've got a messaging system that can do point-to-point so by",
    "start": "1570940",
    "end": "1578110"
  },
  {
    "text": "going to messaging we get a lot we've got a lot of simplicity in our system we're pushing a lot of stuff off to the",
    "start": "1578110",
    "end": "1583780"
  },
  {
    "text": "messaging subsystem that we would otherwise have to write ourselves things that are giving us reliability and so",
    "start": "1583780",
    "end": "1589390"
  },
  {
    "text": "forth inside the code we get a lot of a lot of efficiency when compared to the HTTP or some sort of heavyweight",
    "start": "1589390",
    "end": "1595150"
  },
  {
    "text": "protocol for talking across the network it's easy to distribute this stuff in the case of 0 mq everything is done with",
    "start": "1595150",
    "end": "1601660"
  },
  {
    "text": "see IP addresses so if they're all in the same machine your system is running on the same machine if there are different machines than suddenly running",
    "start": "1601660",
    "end": "1607600"
  },
  {
    "text": "on different machines so it's easy to do distribution and we have complete language independence because the messaging system itself is language",
    "start": "1607600",
    "end": "1614410"
  },
  {
    "text": "neutral we can have a service written in any language talking to a service written in any other language so looking",
    "start": "1614410",
    "end": "1621340"
  },
  {
    "text": "at zero it's called zero because there are a lot of issues I will apologize in advance for the fact that they used a",
    "start": "1621340",
    "end": "1626620"
  },
  {
    "text": "know instead of a zero here is they don't understand the differences in letters and numbers I think but the but",
    "start": "1626620",
    "end": "1632200"
  },
  {
    "text": "this is the official logo zero I'm Gill the the it is zero all of these things",
    "start": "1632200",
    "end": "1639760"
  },
  {
    "text": "no broker's is not zero latency but it's close to it it's very very fast compared to a lot of the other protocols there is",
    "start": "1639760",
    "end": "1645670"
  },
  {
    "text": "there is literally no administration the only downside of that is there's no administration console so if you want to",
    "start": "1645670",
    "end": "1652060"
  },
  {
    "text": "monitor the system the behavior of your system with a pretty picture you have to write the program that's doing that",
    "start": "1652060",
    "end": "1657700"
  },
  {
    "text": "that's not part of zero as other messaging systems will have monitoring consoles that come as part of the system it doesn't cost anything that's open",
    "start": "1657700",
    "end": "1664390"
  },
  {
    "text": "source it's free it runs on every platform it's generally a good thing to be working for I'll skip past this slide",
    "start": "1664390",
    "end": "1670870"
  },
  {
    "text": "quickly because you'll you have access to the sides if you want them but you can get information at this URL",
    "start": "1670870",
    "end": "1677230"
  },
  {
    "text": "it was written originally for financial applications so it's very reliable and also very fast right is good for",
    "start": "1677230",
    "end": "1682900"
  },
  {
    "text": "real-time it runs on pretty much every platform runs fine on net it runs fine",
    "start": "1682900",
    "end": "1688480"
  },
  {
    "text": "on Linux it runs fine on the Mac it also actually runs on several of the IOT",
    "start": "1688480",
    "end": "1694780"
  },
  {
    "text": "platforms as well as in the IOT operating systems as well more to the point there are bindings in every known",
    "start": "1694780",
    "end": "1700000"
  },
  {
    "text": "language including oak is that I don't know if anybody here is an oak programmer but I didn't even know what",
    "start": "1700000",
    "end": "1705370"
  },
  {
    "text": "it was until I saw the zero had a painting for oak but if you want to program a nuke you can do it but more to",
    "start": "1705370",
    "end": "1711910"
  },
  {
    "text": "the point it supports the languages that all of us are using the C sharp and C and C++ and Java and Python and",
    "start": "1711910",
    "end": "1718030"
  },
  {
    "text": "obviously all of the standard languages so you can write a program in any language and it can talk to 0nq it",
    "start": "1718030",
    "end": "1725170"
  },
  {
    "text": "supports pretty much all of the networking program or protocols you would care to use I usually use TCP",
    "start": "1725170",
    "end": "1732460"
  },
  {
    "text": "because it is the most common of them work everywhere and it has a security",
    "start": "1732460",
    "end": "1738400"
  },
  {
    "text": "wrapper that goes around it that you can use to make your messaging secure one of the big flaws that I see when I look at",
    "start": "1738400",
    "end": "1743950"
  },
  {
    "text": "micro service systems is that people are not thinking of security inside the data center and you have to write is if you",
    "start": "1743950",
    "end": "1750550"
  },
  {
    "text": "think about the notion of a denial of service attack in a Microsoft in a micro service world the denial of service",
    "start": "1750550",
    "end": "1757060"
  },
  {
    "text": "attack isn't necessarily outside the data center if a service goes crazy it could be sending out hundreds of",
    "start": "1757060",
    "end": "1762940"
  },
  {
    "text": "thousands of messages and receiving those messages could generate hundreds",
    "start": "1762940",
    "end": "1768070"
  },
  {
    "text": "of thousands of more messages and you could have a cascade of messages that makes the system completely dysfunctional and that could be",
    "start": "1768070",
    "end": "1773770"
  },
  {
    "text": "happening entirely inside the data center and that might happen because of a bug and that might happen because of",
    "start": "1773770",
    "end": "1780400"
  },
  {
    "text": "something from the outside but it will happen so thinking of security as being a boundary thing something that if you",
    "start": "1780400",
    "end": "1786640"
  },
  {
    "text": "don't let in the bad guy you're okay you can't think that way so one of the things that's nice about Xero is that we",
    "start": "1786640",
    "end": "1793150"
  },
  {
    "text": "can encrypt the actual messages that the users elliptic curve encryption around the actual messages the final thing I'll",
    "start": "1793150",
    "end": "1799720"
  },
  {
    "text": "say about it before we start going a little bit more into architecture is this is the entire API for 0 mq and half",
    "start": "1799720",
    "end": "1807430"
  },
  {
    "text": "of these functions or functions that I've never used because I hadn't haven't needed to so it's a very very simple",
    "start": "1807430",
    "end": "1814240"
  },
  {
    "text": "system to learn as you can learn it in and after an afternoon is that they get up and up and running efficiently in an",
    "start": "1814240",
    "end": "1820840"
  },
  {
    "text": "afternoon the basic metaphor is the notion of a socket this is not a",
    "start": "1820840",
    "end": "1826920"
  },
  {
    "text": "unix/linux style socket it's really a port in the messaging system the basic idea is that you plug into a socket the",
    "start": "1826920",
    "end": "1835000"
  },
  {
    "text": "socket is an asynchronous front-end to a queue of some sort or it does a pub/sub kind of thing you can have multiple",
    "start": "1835000",
    "end": "1841930"
  },
  {
    "text": "endpoints so a socket could have multiple IP addresses bound to it on the other end a socket could connect to",
    "start": "1841930",
    "end": "1847510"
  },
  {
    "text": "multiple IP addresses so you can feed into a single socket for multiple sources or you could have multiple sources feeding out into as many targets",
    "start": "1847510",
    "end": "1855400"
  },
  {
    "text": "as they want you could have different IP addresses associated with the same socket if you wanted to more commonly",
    "start": "1855400",
    "end": "1860740"
  },
  {
    "text": "you'll have different port numbers associated with the same socket or different protocols associated with the same socket",
    "start": "1860740",
    "end": "1867120"
  },
  {
    "text": "you can even have multiple transport protocols associated so you could have TCP and something else for your two",
    "start": "1867420",
    "end": "1872620"
  },
  {
    "text": "protocols it does all of the threading for you so your services can be single",
    "start": "1872620",
    "end": "1878470"
  },
  {
    "text": "threaded which is a good thing is that in general you don't want to put multi-threading into services because they are it's another layer of",
    "start": "1878470",
    "end": "1884650"
  },
  {
    "text": "complexity that you would rather not have it's another other source of difficulty if you think about queueing instead of doing four things at once",
    "start": "1884650",
    "end": "1891700"
  },
  {
    "text": "if you for if you coup those four things up and do them one at a time you don't need to coordinate anymore there's no need for threading any more connection",
    "start": "1891700",
    "end": "1901000"
  },
  {
    "text": "and reconnection we already talked about so let me look at just one simple",
    "start": "1901000",
    "end": "1906010"
  },
  {
    "text": "example so you can see how this all works this is a simple request response",
    "start": "1906010",
    "end": "1911440"
  },
  {
    "text": "request reply system this is the easiest kind of connection to make in the zero",
    "start": "1911440",
    "end": "1917650"
  },
  {
    "text": "world you make a request to some kind of client makes a request to some server in this case the server replies this is",
    "start": "1917650",
    "end": "1924520"
  },
  {
    "text": "synchronous in zero MQ is that you can make a request to the server that you can't make another request until you've",
    "start": "1924520",
    "end": "1930010"
  },
  {
    "text": "gotten a reply back you don't have to block while you're waiting for the reply but generally you do so you make a",
    "start": "1930010",
    "end": "1936250"
  },
  {
    "text": "request you get a reply and a client could be requesting things from multiple servers here I've got to connect on the",
    "start": "1936250",
    "end": "1941440"
  },
  {
    "text": "request on the on the server side in the bind on the client side but it doesn't again have to be that way you could flip",
    "start": "1941440",
    "end": "1947200"
  },
  {
    "text": "things over if you wanted to so that's a two objects talking to each other if we look at the code for this I'm going to",
    "start": "1947200",
    "end": "1952900"
  },
  {
    "text": "skip through some of it but the basic idea and this is this is the way zero works pretty much everywhere and this is",
    "start": "1952900",
    "end": "1960670"
  },
  {
    "text": "Java but the c-sharp API is look almost exactly the same you start up in this",
    "start": "1960670",
    "end": "1965890"
  },
  {
    "text": "case I am implementing the client and the server on separate threads so I'm going to start up the server with this",
    "start": "1965890",
    "end": "1971050"
  },
  {
    "text": "is just a just a call that's going to start to serve with your head running this is the zmq stuff you create a",
    "start": "1971050",
    "end": "1977170"
  },
  {
    "text": "context you ask for a socket in this case it's a request socket so you have a",
    "start": "1977170",
    "end": "1982660"
  },
  {
    "text": "request socket talking to a reply socket you might also have a publish stop socket talking to a subscriber socket",
    "start": "1982660",
    "end": "1989140"
  },
  {
    "text": "there's a push socket that you can talk to a pull socket and so on and so forth so you decide what the socket type is",
    "start": "1989140",
    "end": "1994810"
  },
  {
    "text": "and then in this case on the client side I'm connecting and then I send messages",
    "start": "1994810",
    "end": "2000570"
  },
  {
    "text": "off just by saying requestor dot sin in this case it's just a string couldn't you",
    "start": "2000570",
    "end": "2007070"
  },
  {
    "text": "couldn't get much easier than this right as you you establish the connection you send strings across in the case of the",
    "start": "2007070",
    "end": "2013150"
  },
  {
    "text": "micro-service stuff what I'm doing the strings are Jason strings they are you",
    "start": "2013150",
    "end": "2019520"
  },
  {
    "text": "can think of them as an RPC system is that I don't use I don't do use rest right if you think about rest rest is",
    "start": "2019520",
    "end": "2024620"
  },
  {
    "text": "really a data centric protocol right is",
    "start": "2024620",
    "end": "2029990"
  },
  {
    "text": "the idea in the rest protocol if is pure rest is that the URL spells specifies the location of some resource and the",
    "start": "2029990",
    "end": "2037660"
  },
  {
    "text": "verb right get put post whatever to verb you're using specifies what you're supposed to do to that resource when",
    "start": "2037660",
    "end": "2043610"
  },
  {
    "text": "we're talking about micro services you're not getting and putting stuff we're thinking objects so you shouldn't",
    "start": "2043610",
    "end": "2048740"
  },
  {
    "text": "be getting and setting things from objects in any context what you should be doing is asking the objects to do work for you so the basic idea here then",
    "start": "2048740",
    "end": "2055820"
  },
  {
    "text": "is that the protocols will be used to request some objects so we'll look at a little bit of Jason in a moment but the",
    "start": "2055820",
    "end": "2061399"
  },
  {
    "text": "basic idea here is that what you're sending is a json packet that's requesting that the service do something",
    "start": "2061400",
    "end": "2066409"
  },
  {
    "text": "for you it tells you what you want it to do you pass arguments in it responds with the json packet that's got the result in it alright so this is our",
    "start": "2066410",
    "end": "2075679"
  },
  {
    "text": "basic sending code the receiving code looks almost the same you have a context",
    "start": "2075679",
    "end": "2081649"
  },
  {
    "text": "you get a socket out of it you bind on this side remember we connected on one side I'm binding on this side",
    "start": "2081650",
    "end": "2087800"
  },
  {
    "text": "on this side I'm receiving the string instead of sending it and then I'm looking at it if it starts with stop I'm",
    "start": "2087800",
    "end": "2093800"
  },
  {
    "text": "going to stop the service gracefully if it doesn't all do something and then spin back up and get another request but",
    "start": "2093800",
    "end": "2100190"
  },
  {
    "text": "the point is the point of this is not this is not a zero MQ class this is but I just want to show you that this",
    "start": "2100190",
    "end": "2105650"
  },
  {
    "text": "actually is easy so I said I usually run in terror when I hear somebody say that but then hopefully you'll make an",
    "start": "2105650",
    "end": "2110870"
  },
  {
    "text": "exception here because I've proven to you that this actually is easy so and as",
    "start": "2110870",
    "end": "2115910"
  },
  {
    "text": "I said their bindings were pretty much any language you want to program in to work with this so moving back into the",
    "start": "2115910",
    "end": "2122240"
  },
  {
    "text": "direction of the swarming systems this farming systems that I'm building are all built on top of messaging the",
    "start": "2122240",
    "end": "2130390"
  },
  {
    "text": "microservices use messages to talk with each other now let me explain them kind of the evolution of my thinking as",
    "start": "2130390",
    "end": "2137089"
  },
  {
    "text": "I moved in the direction of the system I'm going to get at this is uh where I",
    "start": "2137089",
    "end": "2142130"
  },
  {
    "text": "started with a web server called mongrel to mongrel to is it's a written in Ruby",
    "start": "2142130",
    "end": "2148310"
  },
  {
    "text": "so people in the Ruby community know more about it than anybody else does but the basic idea of mongrel 2 is that",
    "start": "2148310",
    "end": "2153560"
  },
  {
    "text": "mongrel 2 is a translator it takes HTTP in on one side and it generates zero MQ messages on the other side so the way",
    "start": "2153560",
    "end": "2161180"
  },
  {
    "text": "that you plug a service into this web server is by writing a service that",
    "start": "2161180",
    "end": "2167680"
  },
  {
    "text": "pulls messages off of some queue where the portal here mongrel itself is",
    "start": "2167680",
    "end": "2173089"
  },
  {
    "text": "pushing messages so that means that the service is not plugged into the web",
    "start": "2173089",
    "end": "2179089"
  },
  {
    "text": "server in any in any physical ways the service could be running on a different machine in a different data center they",
    "start": "2179089",
    "end": "2184550"
  },
  {
    "text": "connect across the messaging system using a TCP IP address so it's a standalone thing mongrel the the way you",
    "start": "2184550",
    "end": "2192980"
  },
  {
    "text": "configure mongrel is with a simple simple table that just Maps URLs to IP addresses says when something comes in",
    "start": "2192980",
    "end": "2198980"
  },
  {
    "text": "at this URL send a message all the post data and stick it inside of a 0 mq message and then send it off to this IP",
    "start": "2198980",
    "end": "2205310"
  },
  {
    "text": "address to a to a queue on this IP address and then it gets a response back since it gets a response back in",
    "start": "2205310",
    "end": "2212180"
  },
  {
    "text": "interestingly enough using pub/sub so it pushes and pulls here and then it publishes and subscribes to get the",
    "start": "2212180",
    "end": "2218180"
  },
  {
    "text": "result back I'll talk about why in a second so what this got me thinking about is that HTTP is just another service at",
    "start": "2218180",
    "end": "2226520"
  },
  {
    "text": "least HTTP translation is just another service if you look at your services in other words there's a cloud of",
    "start": "2226520",
    "end": "2232010"
  },
  {
    "text": "stand-alone objects that are sitting on a message bus and sending messages back and forth to each other and they're not",
    "start": "2232010",
    "end": "2238940"
  },
  {
    "text": "using HTTP to communicate with each other well we do have to talk to our services from the outside so that",
    "start": "2238940",
    "end": "2244869"
  },
  {
    "text": "talking can be done with others just another service something that does nothing but receive HTTP POST requests",
    "start": "2244869",
    "end": "2251540"
  },
  {
    "text": "for example and turns them into messages and routes them off to the correct server the correct micro service if you",
    "start": "2251540",
    "end": "2258109"
  },
  {
    "text": "will so that's where I started now mongrel is not good enough as it stands to run to run a micro service system but",
    "start": "2258109",
    "end": "2265040"
  },
  {
    "text": "it's it's you're thinking is good huh then your don't then your",
    "start": "2265040",
    "end": "2270190"
  },
  {
    "text": "doing right so that's it however you can run multiple instances of it so you could put all of the usual",
    "start": "2270190",
    "end": "2276999"
  },
  {
    "text": "infrastructure in front of this you could have multiple instances of mongrel you could have a load balancer in front in front of that you could have a",
    "start": "2276999",
    "end": "2282640"
  },
  {
    "text": "reverse proxy in front of that and then your isolated from the from the mongrel itself going to so you can use",
    "start": "2282640",
    "end": "2288699"
  },
  {
    "text": "replication to do that we can have multiple services on the bus of course",
    "start": "2288699",
    "end": "2294219"
  },
  {
    "text": "and remember they're going to round-robin so the portal is just going to if they're all if they're all bound to the same socket here on the portal",
    "start": "2294219",
    "end": "2300219"
  },
  {
    "text": "side they're just going to round-robin through them so we can scale simply by replicating the service so that's the",
    "start": "2300219",
    "end": "2305349"
  },
  {
    "text": "first thing in the direction of swarming is that the first characteristic of a swarming micro service is that it",
    "start": "2305349",
    "end": "2310359"
  },
  {
    "text": "observes when it's too busy and clones off in instances of itself to handle the extra load so a swarming system the",
    "start": "2310359",
    "end": "2318309"
  },
  {
    "text": "services are self-replicating the service needs to happen needs to know how to make a new version of itself and",
    "start": "2318309",
    "end": "2323519"
  },
  {
    "text": "framework that I'm using it does that by just shelling out to a shell script which does whatever it needs to do in",
    "start": "2323519",
    "end": "2329739"
  },
  {
    "text": "order to get a new instance of itself running I might be using them kubernetes cluster to do it it might just be",
    "start": "2329739",
    "end": "2335079"
  },
  {
    "text": "spawning process so the point here is that the service does need to make a",
    "start": "2335079",
    "end": "2340930"
  },
  {
    "text": "copy of itself though when load increases and what will happen then is the way you handle load is that as the",
    "start": "2340930",
    "end": "2346479"
  },
  {
    "text": "service gets too much load on it starts making clones of itself since the thing that is making the call is round-robin",
    "start": "2346479",
    "end": "2352449"
  },
  {
    "text": "the clones then the load is now distributed pretty much evenly between the clones and your load goes down your",
    "start": "2352449",
    "end": "2359140"
  },
  {
    "text": "loan factor goes down you can keep the extra ones around indefinitely I don't like to do that so I do have a mechanism",
    "start": "2359140",
    "end": "2364809"
  },
  {
    "text": "for getting rid of the clones when they're not working hard enough I'll talk about that in a second but that's a",
    "start": "2364809",
    "end": "2370209"
  },
  {
    "text": "less crib time critical issue right if a clone hangs around for ten minutes it's not what doesn't happen to be working it's it's not a big deal it's not going",
    "start": "2370209",
    "end": "2376599"
  },
  {
    "text": "to it's not going to cost you much in any way in any in any way that the word cost means next order of business is",
    "start": "2376599",
    "end": "2384969"
  },
  {
    "text": "that we could have more than one portal as I was getting at that earlier that way they could be running in parallel we",
    "start": "2384969",
    "end": "2390940"
  },
  {
    "text": "can have a little bit of a robustness will put the normal load balancers and so forth in front of the front of the",
    "start": "2390940",
    "end": "2396609"
  },
  {
    "text": "portals in order to get load distributed properly the reason it's pub/sub is that what",
    "start": "2396609",
    "end": "2401920"
  },
  {
    "text": "happens is that when the portal gets a request it puts the topic name into the",
    "start": "2401920",
    "end": "2407740"
  },
  {
    "text": "request that it pushes to the service the service then publishes the result to that topic so all of the requests that",
    "start": "2407740",
    "end": "2416950"
  },
  {
    "text": "came from this portal will have unique topic IDs that match the request of the response and all of the ones that come",
    "start": "2416950",
    "end": "2423670"
  },
  {
    "text": "from this portal will have unique and different topic IDs I guess that's what unique means it could be different but the point is is that the service that",
    "start": "2423670",
    "end": "2430180"
  },
  {
    "text": "handles the requests just publishes the response and it doesn't care which portal it goes to is that it's going to",
    "start": "2430180",
    "end": "2435430"
  },
  {
    "text": "the one that subscribes to that topic and the one that subscribes will be the one that generated the original request so pub/sub on the response side makes it",
    "start": "2435430",
    "end": "2443470"
  },
  {
    "text": "much easier to set it to reply to a service to send a result back because",
    "start": "2443470",
    "end": "2449050"
  },
  {
    "text": "you don't have to know who sent it to you it's kind of a basic rule of object-oriented systems that you shouldn't know who sent you the message",
    "start": "2449050",
    "end": "2456810"
  },
  {
    "text": "and then finally we can put things like logging just right on these buses and if",
    "start": "2458099",
    "end": "2463900"
  },
  {
    "text": "we do that we don't even have to log all right now also we could have multiple",
    "start": "2463900",
    "end": "2470859"
  },
  {
    "text": "portals feeding multiple buses so every one of these blue lines is effectively a broker in them in the system and",
    "start": "2470859",
    "end": "2477030"
  },
  {
    "text": "so you'd have one broker per micro service and then on the other side of those brokers there would be as many",
    "start": "2477030",
    "end": "2482380"
  },
  {
    "text": "instances of the servers that you needed services that you needed to handle the load handle the current load and of",
    "start": "2482380",
    "end": "2490390"
  },
  {
    "text": "course we could have multiple portals feeding multiple buses if we wanted to do that this is characteristic of messaging systems as they get really the",
    "start": "2490390",
    "end": "2496720"
  },
  {
    "text": "diagrams get really messy very quickly okay now so I started out with and",
    "start": "2496720",
    "end": "2505060"
  },
  {
    "text": "then I started thinking mongrels not good enough really for doing a micro service system it's it doesn't handle",
    "start": "2505060",
    "end": "2510430"
  },
  {
    "text": "security particularly well it there's just a bunch of things about it that I didn't like the fact that I had to",
    "start": "2510430",
    "end": "2516940"
  },
  {
    "text": "implement services using but or using brokers was the worst part though but",
    "start": "2516940",
    "end": "2522240"
  },
  {
    "text": "even then even saying that I started building a micro service platform which I'm calling Janus this is there's going",
    "start": "2522240",
    "end": "2529300"
  },
  {
    "text": "to be a URL Janus framework org that's not doesn't quite just yet is I'm not quite ready to put",
    "start": "2529300",
    "end": "2534400"
  },
  {
    "text": "it up on github is that I should be ready in a month or two if you go to that three day thing I'm going to do in London in November it'll be done by then",
    "start": "2534400",
    "end": "2540580"
  },
  {
    "text": "and we can analyse planning on spending a lot of class time analyzing the source code for it that it that in that class",
    "start": "2540580",
    "end": "2548050"
  },
  {
    "text": "but this is version one I'm not completely happy with version one I'll talk about version two in a second but",
    "start": "2548050",
    "end": "2553300"
  },
  {
    "text": "again I want to talk about my thinking as we went from point A to point B here",
    "start": "2553300",
    "end": "2558580"
  },
  {
    "text": "I had the browser this is a very kind of system right is that here's the",
    "start": "2558580",
    "end": "2563770"
  },
  {
    "text": "HTTP service which is just a micro service running on this system there could be multiple instances of it there's a simple naming service so we're",
    "start": "2563770",
    "end": "2570580"
  },
  {
    "text": "using 0 m2 to talk between these two elements the naming service is going to do a mongrel like thing it is going to",
    "start": "2570580",
    "end": "2577830"
  },
  {
    "text": "connect IP addresses to URLs essentially this naming service was a somewhat more",
    "start": "2577830",
    "end": "2584200"
  },
  {
    "text": "complicated service naming service than I wanted in this version one system in particular when a service instance when",
    "start": "2584200",
    "end": "2591280"
  },
  {
    "text": "I had what I created a new service I had two choices either I could have a broker or I could eliminate the broker and have",
    "start": "2591280",
    "end": "2597190"
  },
  {
    "text": "the broker have each service talked to the naming service every time it came online so the naming service could effectively do and be doing my",
    "start": "2597190",
    "end": "2603670"
  },
  {
    "text": "scheduling and that was making the naming service way too complicated it wasn't just naming anymore it was doing",
    "start": "2603670",
    "end": "2609100"
  },
  {
    "text": "too much so I reluctantly put a broker in place but now I've got a broker in place so the service then is effectively",
    "start": "2609100",
    "end": "2617110"
  },
  {
    "text": "the broker which is talking to the individual instances now these individual instances were self scaling in the sense that when they notice there",
    "start": "2617110",
    "end": "2624610"
  },
  {
    "text": "was too much load they would spawn off in two instances of themselves and talk to their broker the broker had a single",
    "start": "2624610",
    "end": "2631810"
  },
  {
    "text": "address it knew about the addresses of the instances that the outside world did not so this is most of the way there but",
    "start": "2631810",
    "end": "2639730"
  },
  {
    "text": "I still have this single point of failure sitting here and I really didn't want that to happen does everyone",
    "start": "2639730",
    "end": "2646030"
  },
  {
    "text": "understand what I mean what I'm saying here architectural so this was a reasonably good approach but it had its",
    "start": "2646030",
    "end": "2653350"
  },
  {
    "text": "issues now in the system though there were a few things that two design",
    "start": "2653350",
    "end": "2659310"
  },
  {
    "text": "considerations that I had that were that applied to version 2 - so let's talk",
    "start": "2659310",
    "end": "2664330"
  },
  {
    "text": "about those the first question is what do you do with the singleton the singleton is a one-of-a-kind thing right and those are",
    "start": "2664330",
    "end": "2670610"
  },
  {
    "text": "our simple points of failure those are the places that I want to avoid so in the case of the of this original system",
    "start": "2670610",
    "end": "2677060"
  },
  {
    "text": "and I'm just still doing that I'm handling the singleton problem in the easiest possible way I'm just spawning off multiple instances of it is that",
    "start": "2677060",
    "end": "2683810"
  },
  {
    "text": "most of us get by just fine with two DNS servers right that's enough robustness",
    "start": "2683810",
    "end": "2689060"
  },
  {
    "text": "to handle most of our problems I think if you had three or four DNS servers that was important that you",
    "start": "2689060",
    "end": "2694280"
  },
  {
    "text": "could ever need right I've had no problems with - I just run them in parallel they both work exactly the same way I'm using pub/sub",
    "start": "2694280",
    "end": "2700880"
  },
  {
    "text": "to talk to him I asked for an address I get two responses back and I throw one of them away and that works just fine the the so I'm",
    "start": "2700880",
    "end": "2711440"
  },
  {
    "text": "requesting by pub/sub there because I don't really want to write I don't want the naming service to know how many things are talking to it so by using",
    "start": "2711440",
    "end": "2717620"
  },
  {
    "text": "pub/sub to get this stuff to get the replies back that handles that problem",
    "start": "2717620",
    "end": "2724000"
  },
  {
    "text": "reliability monitoring is also an issue here I have to have a monitoring system the log the logging system is a is",
    "start": "2724000",
    "end": "2732620"
  },
  {
    "text": "another singleton there's a logging service two instances of it that are running in parallel and the logging",
    "start": "2732620",
    "end": "2738440"
  },
  {
    "text": "system does accumulate logs but I'm not really doing much with them I really",
    "start": "2738440",
    "end": "2743840"
  },
  {
    "text": "dislike the idea of having some global level service getting reliability by",
    "start": "2743840",
    "end": "2750170"
  },
  {
    "text": "observing the logs observing when a service goes down and then relaunching it because we're getting back to another",
    "start": "2750170",
    "end": "2755810"
  },
  {
    "text": "single point of failure in another place where we have complexity I would rather that the system scaled by itself so",
    "start": "2755810",
    "end": "2761710"
  },
  {
    "text": "we'll look at the the final architecture in a minute the way I saw the reliability issue is by handling",
    "start": "2761710",
    "end": "2767690"
  },
  {
    "text": "heartbeating between the sender and the receiver of every message so if you think of the idea of a heartbeat is that",
    "start": "2767690",
    "end": "2773870"
  },
  {
    "text": "if something is unresponsive or just isn't being used for a while you ping it",
    "start": "2773870",
    "end": "2779960"
  },
  {
    "text": "to see if it's still alive and if it's not alive then you could do something about it you can launch launched a new instance so the basic idea here is that",
    "start": "2779960",
    "end": "2787730"
  },
  {
    "text": "if I'm going to send a message to a given service if I'm sending messages at a fast enough pace I know that the",
    "start": "2787730",
    "end": "2794750"
  },
  {
    "text": "receiving service is alive because it's responding if I don't need to send a message for 10",
    "start": "2794750",
    "end": "2800140"
  },
  {
    "text": "minutes maybe five minutes into that I might want to ping it to see if it's alive so that another five minutes from",
    "start": "2800140",
    "end": "2806020"
  },
  {
    "text": "then I can send the message and not have to worry about it getting there so I'm putting the responsibility of detecting",
    "start": "2806020",
    "end": "2811900"
  },
  {
    "text": "when a service goes down on the message senders Matt is everyone following what",
    "start": "2811900",
    "end": "2817840"
  },
  {
    "text": "I'm saying it rather than on some centralized system that is keeping track of what all of the objects in the system",
    "start": "2817840",
    "end": "2823600"
  },
  {
    "text": "are doing so that again distributes the reliability out amongst the entire set of micro services so I don't have those",
    "start": "2823600",
    "end": "2829270"
  },
  {
    "text": "single points of failure anymore the",
    "start": "2829270",
    "end": "2834850"
  },
  {
    "text": "ramping up algorithm is pretty straight forward is that zero doesn't give you access to Q so you can't do with cooling",
    "start": "2834850",
    "end": "2840070"
  },
  {
    "text": "so I'm just doing it by load I'm if I'm if I'm so busy that I that I'm hardly",
    "start": "2840070",
    "end": "2846280"
  },
  {
    "text": "ever doing anything except working then I'll spawn off in your instance now let's the rest of this stuff let's",
    "start": "2846280",
    "end": "2852580"
  },
  {
    "text": "just table that for a second I want to I'm going to go to the next slide to explain how the rest is working all right now so it's it's a simple matter",
    "start": "2852580",
    "end": "2859510"
  },
  {
    "text": "though every service is responsible for cloning off itself when it gets too busy",
    "start": "2859510",
    "end": "2865410"
  },
  {
    "text": "so I'm going to do I'm going to fit on this slide for a moment I'm going to go to talk about how it works and then I'll",
    "start": "2865410",
    "end": "2871930"
  },
  {
    "text": "come back to it we have a requesting service and we have a receiving service",
    "start": "2871930",
    "end": "2876970"
  },
  {
    "text": "and remember everything is a service so the HTTP is being handled by a service that is no different than any other",
    "start": "2876970",
    "end": "2882940"
  },
  {
    "text": "service the only difference is that it has a port to the outlet port 80 HTTP",
    "start": "2882940",
    "end": "2888130"
  },
  {
    "text": "connection to the outside all right now the payload here is going to contain the",
    "start": "2888130",
    "end": "2896320"
  },
  {
    "text": "name of the function if you will that I want to call and the arguments to that function and some unique request ID so",
    "start": "2896320",
    "end": "2903460"
  },
  {
    "text": "that's just generated by the sender actually it's generated by the framework is that I probably should have shown it here but there's a framework class here",
    "start": "2903460",
    "end": "2910210"
  },
  {
    "text": "and there's a framework class there so in terms of implementing on this thing you don't have to do any of this overhead it's done for you by the system",
    "start": "2910210",
    "end": "2916590"
  },
  {
    "text": "but the basic idea is that it will push this request down to the service the",
    "start": "2916590",
    "end": "2922270"
  },
  {
    "text": "service will then do whatever it has to do and then it will respond and it responds again ignore this for a second",
    "start": "2922270",
    "end": "2928030"
  },
  {
    "text": "it will respond with the original request ID so that this guy can match the request to the response and then there's some",
    "start": "2928030",
    "end": "2933220"
  },
  {
    "text": "JSON that describes what the response is and that's going to be unique to the request so the basic idea is that I'm",
    "start": "2933220",
    "end": "2939369"
  },
  {
    "text": "pushing and pulling here and then I'm using pub/sub to go back in this direction now for this to work the",
    "start": "2939369",
    "end": "2946540"
  },
  {
    "text": "binding has to happen on this side has happened on this side the requesting",
    "start": "2946540",
    "end": "2952210"
  },
  {
    "text": "service has to know the address of the service that it's talking to for this to work so does everyone follow me here all",
    "start": "2952210",
    "end": "2959829"
  },
  {
    "text": "right so this guy is going to connect this guy's going to bind and also this the sub the subscriber connects to a",
    "start": "2959829",
    "end": "2967119"
  },
  {
    "text": "bound socket on this on the service that you the publishers the response so the",
    "start": "2967119",
    "end": "2972430"
  },
  {
    "text": "requester knows the address of the requested of the requested service so the hard part here is discovery the hard",
    "start": "2972430",
    "end": "2979630"
  },
  {
    "text": "part is how do you learn what the addresses of the services are so let me go to the next slide and as I said I'll",
    "start": "2979630",
    "end": "2985329"
  },
  {
    "text": "come back to this one I have my HTTP gateway service here I have a couple of",
    "start": "2985329",
    "end": "2990700"
  },
  {
    "text": "logging services running in parallel I've got a couple of naming services but and then I have the service I want to",
    "start": "2990700",
    "end": "2995829"
  },
  {
    "text": "talk to now this naming service is a very very simple naming services the role of this naming service is to get",
    "start": "2995829",
    "end": "3004140"
  },
  {
    "text": "the first one it has one service name in it that's matched with one TCP IP",
    "start": "3004140",
    "end": "3011069"
  },
  {
    "text": "address so the way this all starts whether the way the whole system starts",
    "start": "3011069",
    "end": "3017190"
  },
  {
    "text": "is on the very first call to the system the sending service goes up to the",
    "start": "3017190",
    "end": "3022980"
  },
  {
    "text": "naming service and says get me the address of the yellow service that I want to talk to all right so it's now",
    "start": "3022980",
    "end": "3028260"
  },
  {
    "text": "got that address over on this side since it's got that it can now send a message off to it so now the sending service and",
    "start": "3028260",
    "end": "3034950"
  },
  {
    "text": "the receiving service are happily talking to each other there's nothing earth-shattering here now what gets",
    "start": "3034950",
    "end": "3040020"
  },
  {
    "text": "interesting is how does the system scale the sending service in that JSON packet",
    "start": "3040020",
    "end": "3048210"
  },
  {
    "text": "I'll come back to it in a second had a table that had all of the addresses for",
    "start": "3048210",
    "end": "3054210"
  },
  {
    "text": "all of the instances of the receiving services in it initially that table will have just one address in it so",
    "start": "3054210",
    "end": "3059860"
  },
  {
    "text": "effectively the sending service is sending the address of this service to to itself to that service in the first",
    "start": "3059860",
    "end": "3065830"
  },
  {
    "text": "time what it gets interesting is that this service then gets so busy that it needs to scale so it clones often",
    "start": "3065830",
    "end": "3073090"
  },
  {
    "text": "instances of itself the cloning service knows the address of the cloned one so",
    "start": "3073090",
    "end": "3080620"
  },
  {
    "text": "it modifies its internal table to now have two addresses in it both the read",
    "start": "3080620",
    "end": "3085990"
  },
  {
    "text": "address and the yellow address and then when this guy replies to the request it",
    "start": "3085990",
    "end": "3091870"
  },
  {
    "text": "sends the new address back over to the requester as part of that response so",
    "start": "3091870",
    "end": "3097960"
  },
  {
    "text": "now the requester has both addresses it adds the new service to its socket and now it's round-robin in between them so",
    "start": "3097960",
    "end": "3106050"
  },
  {
    "text": "everyone is saying how this is working I can't see most of you so if you're nodding I probably can't see you but so",
    "start": "3106050",
    "end": "3112270"
  },
  {
    "text": "and the same thing keeps happening right if it spawns out if it has to spawn off a closed and the thing that did the spawning knows where it is and then one",
    "start": "3112270",
    "end": "3118090"
  },
  {
    "text": "replies to that message it sends the reply back up to the original requester and away you go so if there are multiple",
    "start": "3118090",
    "end": "3125560"
  },
  {
    "text": "requesters these tables this table I should have shown it on both sides exists on both sides right everybody",
    "start": "3125560",
    "end": "3131710"
  },
  {
    "text": "knows everybody's address so if another requester comes in it'll get the first one from the name and service but in the",
    "start": "3131710",
    "end": "3138820"
  },
  {
    "text": "reply it gets a list of every instance of the service that exists right now so",
    "start": "3138820",
    "end": "3145000"
  },
  {
    "text": "I'm essentially doing discovery inside the request in the reply services by passing this table around again this is",
    "start": "3145000",
    "end": "3151990"
  },
  {
    "text": "not code that I have to write I'm writing a micro service framework just to do this right it's doing all this",
    "start": "3151990",
    "end": "3157210"
  },
  {
    "text": "overhead for us but what this means is we can eliminate the need for discovery the discovery is happening dynamically",
    "start": "3157210",
    "end": "3162520"
  },
  {
    "text": "just as a side-effect it's an invention consistency system because you don't know the addresses of all the service",
    "start": "3162520",
    "end": "3168130"
  },
  {
    "text": "instances immediately but they will propagate out to the entire system eventually",
    "start": "3168130",
    "end": "3173550"
  },
  {
    "text": "is making sensitive so if we go back to the to the authentication I forgot to",
    "start": "3175910",
    "end": "3181520"
  },
  {
    "text": "mention that I'm doing authentication here in the and in the framework class but that's on the client side it's on",
    "start": "3181520",
    "end": "3188240"
  },
  {
    "text": "the service side so the the throttling is also happening here it's not really it's I've been going back and forth",
    "start": "3188240",
    "end": "3194630"
  },
  {
    "text": "about the throttling you really want the throttling to happen here but that's hard so I'm doing the throttling on this",
    "start": "3194630",
    "end": "3199640"
  },
  {
    "text": "side the way the throttling works is it just immediately rejects the request so it it doesn't take much time that it takes some time to throttle alright so",
    "start": "3199640",
    "end": "3209000"
  },
  {
    "text": "getting back to here so here is that table right this is the list of instances so the list of instances goes",
    "start": "3209000",
    "end": "3215420"
  },
  {
    "text": "across as part of the push if it clones off something it just adds the IP address and then it goes back and I'm",
    "start": "3215420",
    "end": "3221839"
  },
  {
    "text": "I'm using the very simplistic rule that if the push-pull pair is that a given",
    "start": "3221839",
    "end": "3228440"
  },
  {
    "text": "address the pub/sub peril via that address plus one added to the port",
    "start": "3228440",
    "end": "3233539"
  },
  {
    "text": "number so I assume they're on the same machine obviously but they'll be at different port numbers right it's red",
    "start": "3233539",
    "end": "3238880"
  },
  {
    "text": "they're consecutive alright so the addresses are always even is the odd port number is the pub/sub here alright",
    "start": "3238880",
    "end": "3250210"
  },
  {
    "text": "the question aside as a service basically transmitted the information about the service as a replication",
    "start": "3261480",
    "end": "3267240"
  },
  {
    "text": "happen the the short answer is that every service instance has a copy of the",
    "start": "3267240",
    "end": "3274770"
  },
  {
    "text": "complete table and every service requester has a copy of the Khmer B",
    "start": "3274770",
    "end": "3281040"
  },
  {
    "text": "maybe it may be a complete copy maybe not but the point is is that is that table goes from the client to the server",
    "start": "3281040",
    "end": "3288299"
  },
  {
    "text": "every time a request is made so if there's any communication happening at all eventually your tables are going to",
    "start": "3288299",
    "end": "3294210"
  },
  {
    "text": "get updated right when you spawn off",
    "start": "3294210",
    "end": "3306180"
  },
  {
    "text": "into instances the existing requesting services will not know the new address that's correct but the next time they",
    "start": "3306180",
    "end": "3311670"
  },
  {
    "text": "make a request they'll get that address because the service that they're making the request to does know the new address",
    "start": "3311670",
    "end": "3318559"
  },
  {
    "text": "its eventual consistency it might take two or three calls before you get it but you will get it eventually",
    "start": "3321380",
    "end": "3327770"
  },
  {
    "text": "and eventually me the worst case is you have to hit all of them I haven't seen a",
    "start": "3327770",
    "end": "3333450"
  },
  {
    "text": "situation yet where I've had more than about seven or eight instances of a service running so it's not it's not going to take that long it's not like",
    "start": "3333450",
    "end": "3338790"
  },
  {
    "text": "you've got thousands of them we're not all Netflix all right everyone saying",
    "start": "3338790",
    "end": "3345599"
  },
  {
    "text": "how this how this is working so that's that's the basic system so I'm basically taking the discovery issue and I'm",
    "start": "3345599",
    "end": "3352890"
  },
  {
    "text": "putting it into the request and reply services so that they can scale automatically and by doing that I",
    "start": "3352890",
    "end": "3360569"
  },
  {
    "text": "eliminate the need for any kind of coordination orchestration framework right is that the services just launched",
    "start": "3360569",
    "end": "3366599"
  },
  {
    "text": "you know the thing that starts it up is the simple naming service which is just simple key value pairs right has given",
    "start": "3366599",
    "end": "3372869"
  },
  {
    "text": "this logical name and a physical name for the first one the other thing I'm doing is that I've built into the code",
    "start": "3372869",
    "end": "3378119"
  },
  {
    "text": "for the system a little bit of load balancing in the sense that the service instance that is on the in the naming",
    "start": "3378119",
    "end": "3386460"
  },
  {
    "text": "service will be used less often than the server than other service instances",
    "start": "3386460",
    "end": "3391960"
  },
  {
    "text": "more than one of them because everybody's going to hit the first one everybody's going to hit the naming service and then hit the first one the",
    "start": "3391960",
    "end": "3397599"
  },
  {
    "text": "first time I make the call so I want to keep the load on that one a little bit a bit a little bit lower and I'm just doing that with a constant value right",
    "start": "3397599",
    "end": "3403450"
  },
  {
    "text": "now I just you know don't call it half the time all right",
    "start": "3403450",
    "end": "3408670"
  },
  {
    "text": "the only other issue here is shutting down we could just wind down easily or",
    "start": "3408670",
    "end": "3413980"
  },
  {
    "text": "run down quickly if a service just shut itself down abruptly the only downside of that is the tables will now be",
    "start": "3413980",
    "end": "3420430"
  },
  {
    "text": "invalid but that's an easy problem because you make a request and you get an error back from the messaging system and you just remove that one from the",
    "start": "3420430",
    "end": "3426430"
  },
  {
    "text": "table the downside is that if the service has just shut themselves down abruptly you have a sick you can have a",
    "start": "3426430",
    "end": "3432820"
  },
  {
    "text": "situation where no instances of the servers are running they all decide to shut themselves down and I didn't want that I wanted I wanted one of them to",
    "start": "3432820",
    "end": "3439630"
  },
  {
    "text": "continue to exist so I hit a hit on this algorithm to do it I'm still fiddling",
    "start": "3439630",
    "end": "3444820"
  },
  {
    "text": "around with this algorithm but the basic idea is that when a service wants to shut down it locks itself so that all",
    "start": "3444820",
    "end": "3451030"
  },
  {
    "text": "subsequent requests are rejected and then the service that is shutting down",
    "start": "3451030",
    "end": "3457200"
  },
  {
    "text": "remember it's got that pub/sub socket it publishes a request out to all of its siblings saying I'm about to shut down",
    "start": "3457200",
    "end": "3462220"
  },
  {
    "text": "if any of them reply with a I'm locked right in other words if they can't can't send it out then it says okay there's",
    "start": "3462220",
    "end": "3468460"
  },
  {
    "text": "another one shutting down so in that case what it does is it gives up on",
    "start": "3468460",
    "end": "3474250"
  },
  {
    "text": "shutting down backs out of that process by some random amount of time and then",
    "start": "3474250",
    "end": "3479740"
  },
  {
    "text": "tries again so this is if you've ever programmed in Corbin this is the way corporate work I'm beginning to think",
    "start": "3479740",
    "end": "3487330"
  },
  {
    "text": "that this is probably more complicated than it needs to be I could just say if you are the first one to be launched don't shut down and if you're anything",
    "start": "3487330",
    "end": "3493540"
  },
  {
    "text": "else just shut yourself down abruptly and don't worry about it and I'm leaning in that direction right now alright so",
    "start": "3493540",
    "end": "3502480"
  },
  {
    "text": "that's the system I've been working on is that the basic idea then is that the services are completely independent they",
    "start": "3502480",
    "end": "3508390"
  },
  {
    "text": "are not sitting inside of some elaborate framework they are sitting in a framework in a sense that they're sitting all sitting on the same message",
    "start": "3508390",
    "end": "3513700"
  },
  {
    "text": "bus there's a certain amount of work that has to go on to get all of the communication that we were talking about working but that's a relatively small",
    "start": "3513700",
    "end": "3520450"
  },
  {
    "text": "amount of work and that will be the code that's comprised is the system that I'm working on if you're interested in following up on",
    "start": "3520450",
    "end": "3526890"
  },
  {
    "text": "that by all means feel free to send me an email address or a DM on Twitter I'm",
    "start": "3526890",
    "end": "3532110"
  },
  {
    "text": "doing that session in London in November so you can get more information and that's in in the London conference if",
    "start": "3532110",
    "end": "3538050"
  },
  {
    "text": "you want to go there and I'm of course happy to answer your questions we don't have any time for that now but I think I",
    "start": "3538050",
    "end": "3544950"
  },
  {
    "text": "will have to hang out here and hang out outside and I have happy to answer your questions so thank you very much for",
    "start": "3544950",
    "end": "3549990"
  },
  {
    "text": "coming to my session",
    "start": "3549990",
    "end": "3552890"
  }
]