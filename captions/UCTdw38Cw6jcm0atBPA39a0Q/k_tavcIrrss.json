[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "uh all right so do we have sound yeah i'm not sure",
    "start": "8720",
    "end": "15360"
  },
  {
    "text": "all right uh so hello everybody uh my name is kevin i'm a software engineer at datadog",
    "start": "15360",
    "end": "21119"
  },
  {
    "text": "and i'm here with you today to talk about uh debugging more specifically uh debugging one layer",
    "start": "21119",
    "end": "27840"
  },
  {
    "text": "deeper so yeah we have the cuts that's perfect so uh what do i mean by one layer deeper",
    "start": "27840",
    "end": "34640"
  },
  {
    "text": "well in the past i've already talked about uh how to debug programs in your dotnet application",
    "start": "34640",
    "end": "40800"
  },
  {
    "text": "but this time i will i would like to focus on a more insidious kind of problem where the issue comes from the interaction",
    "start": "40800",
    "end": "47680"
  },
  {
    "text": "with native code and i think most of developers won't have to face this kind of problem uh",
    "start": "47680",
    "end": "54160"
  },
  {
    "text": "during that job at least i'm hoping hoping so but by showing you how to",
    "start": "54160",
    "end": "60960"
  },
  {
    "text": "tackle this kind of issue that looks overwhelmingly complex at first and how",
    "start": "60960",
    "end": "66240"
  },
  {
    "text": "to break it down into simple problem and solve them individually i'm hoping that you will learn a few",
    "start": "66240",
    "end": "72479"
  },
  {
    "text": "tricks that you can use for your own investigations um i will start with a few words of",
    "start": "72479",
    "end": "77840"
  },
  {
    "start": "75000",
    "end": "298000"
  },
  {
    "text": "warning uh first i'm going to focus on the process rather than the tooling so i",
    "start": "77840",
    "end": "83040"
  },
  {
    "text": "will be showing some windy bg command and i will give only the minimal amount of explanation about them",
    "start": "83040",
    "end": "88720"
  },
  {
    "text": "uh if you are interested in knowing more test ferrandes has a talk later today about",
    "start": "88720",
    "end": "94960"
  },
  {
    "text": "advanced debugging and i'm sure that she would cover this kind of stuff into more details",
    "start": "94960",
    "end": "101200"
  },
  {
    "text": "also there will be some assembly code so don't worry i will explain it but if you have a phobia that's a good moment to",
    "start": "101200",
    "end": "107920"
  },
  {
    "text": "leave the room and that's a detail but the description of the talk mentioned aadb that's because",
    "start": "107920",
    "end": "115200"
  },
  {
    "text": "it's the description for an older version of the torque and i forgot to update it so uh if you are here",
    "start": "115200",
    "end": "120880"
  },
  {
    "text": "specifically for idb which i don't think uh sorry that will be none",
    "start": "120880",
    "end": "126880"
  },
  {
    "text": "and so uh i mentioned uh methodically uh dividing the problem and",
    "start": "127200",
    "end": "132640"
  },
  {
    "text": "to do that i use a simple process which is uh three steps and the first step is",
    "start": "132640",
    "end": "137760"
  },
  {
    "text": "identify uh you can do anything without data and so the first step is to get",
    "start": "137760",
    "end": "143440"
  },
  {
    "text": "data about your problem so at the beginning it will be what are the symptoms",
    "start": "143440",
    "end": "148640"
  },
  {
    "text": "when did the problem start what have you tried and so on and it's very important to make sure",
    "start": "148640",
    "end": "154720"
  },
  {
    "text": "that this is a verified data you have no idea how much hours i've",
    "start": "154720",
    "end": "159760"
  },
  {
    "text": "lost in the past starting an investigation based on the first description of the symptoms so don't",
    "start": "159760",
    "end": "165440"
  },
  {
    "text": "trust anybody and don't hesitate to double check everything when you have the data you",
    "start": "165440",
    "end": "170959"
  },
  {
    "text": "still need to do something with it so you need to put it into context and make a theory about what is happening in your",
    "start": "170959",
    "end": "177120"
  },
  {
    "text": "application to me this is the hardest step because this is a creative step",
    "start": "177120",
    "end": "182640"
  },
  {
    "text": "you won't find any step-by-step description about how to come up with a theory about a difficult problem that's",
    "start": "182640",
    "end": "189840"
  },
  {
    "text": "something you have to figure out on your own and experience is going to help you a lot and also it's nice to have a few",
    "start": "189840",
    "end": "196879"
  },
  {
    "text": "co-workers around to bounce ideas back and forth and last but not least",
    "start": "196879",
    "end": "202480"
  },
  {
    "text": "when you have your theory you still need to verify it and more often than not you will find that",
    "start": "202480",
    "end": "207680"
  },
  {
    "text": "your theory is incorrect and this is this is fine this is part of the process because uh by discovering that this is",
    "start": "207680",
    "end": "214560"
  },
  {
    "text": "incorrect and by understanding why you will uncover more data that allows you to repeat the process and every time you",
    "start": "214560",
    "end": "221840"
  },
  {
    "text": "will be able to make a more refined theory until you finally manage to crack the case",
    "start": "221840",
    "end": "227760"
  },
  {
    "text": "so to illustrate this i will tell you about a bug i investigated as part of my",
    "start": "227760",
    "end": "232959"
  },
  {
    "text": "job so first i'm going to give a bit of context i'm working at datadog on the dotnet tracer what is it it's a",
    "start": "232959",
    "end": "240400"
  },
  {
    "text": "component that your install on your server and then without any modification of the source code we're going to",
    "start": "240400",
    "end": "245840"
  },
  {
    "text": "instrument your application and we're going to detect whenever you have an incoming or outgoing operation such as",
    "start": "245840",
    "end": "252480"
  },
  {
    "text": "an http request or a sql queries and we will send that information to our backend and then you can have a nice ui",
    "start": "252480",
    "end": "260000"
  },
  {
    "text": "where you see a summary of everything that happened in your application and the way we do that is by rewriting",
    "start": "260000",
    "end": "266800"
  },
  {
    "text": "il at runtime so whenever you load a supported third party library",
    "start": "266800",
    "end": "272400"
  },
  {
    "text": "we detect that and we rewrite it to inject our instrumentation code",
    "start": "272400",
    "end": "278639"
  },
  {
    "text": "to do so we use a dotnet profiling api and it turns out that today you can't",
    "start": "278639",
    "end": "285120"
  },
  {
    "text": "use manage code for the profiling api you absolutely have to use a native code",
    "start": "285120",
    "end": "290400"
  },
  {
    "text": "usually cpr express and that's why lately i've been dealing with this kind of bug that comes from the interaction",
    "start": "290400",
    "end": "296000"
  },
  {
    "text": "between manage and native code so for the program itself what were the symptoms so we have a special",
    "start": "296000",
    "end": "304240"
  },
  {
    "start": "298000",
    "end": "346000"
  },
  {
    "text": "test environment where we have two servers running the open source cms or",
    "start": "304240",
    "end": "309840"
  },
  {
    "text": "chart and they are receiving automated traffic and the idea is that one is a baseline server so it's running",
    "start": "309840",
    "end": "316639"
  },
  {
    "text": "the application as is and on the other one we run with the datadog instrumentation and then we monitor both",
    "start": "316639",
    "end": "323039"
  },
  {
    "text": "servers to find any difference in behavior that could be caused by our instrumentation",
    "start": "323039",
    "end": "328160"
  },
  {
    "text": "and at some point we noticed that the instrumented server was crashing to write about once per day",
    "start": "328160",
    "end": "334479"
  },
  {
    "text": "with an access violation and so an access violation is not something that you're supposed to get",
    "start": "334479",
    "end": "340000"
  },
  {
    "text": "from the manage code so i immediately suspected the native part of our component",
    "start": "340000",
    "end": "346400"
  },
  {
    "start": "346000",
    "end": "575000"
  },
  {
    "text": "and so the first thing i did is uh checking the source code for any change that could explain this",
    "start": "346400",
    "end": "352560"
  },
  {
    "text": "and uh i found nothing in that time frame nothing impactful",
    "start": "352560",
    "end": "357840"
  },
  {
    "text": "so the next step was to configure the server to capture a memory dom the next time it crashed",
    "start": "357840",
    "end": "363840"
  },
  {
    "text": "you can do that by setting a registry key everything is properly documented on msdn so i won't spend time on it",
    "start": "363840",
    "end": "372319"
  },
  {
    "text": "it's good to know that i didn't even try to reproduce the issue locally and the reason is that since it was happening",
    "start": "372479",
    "end": "379120"
  },
  {
    "text": "only once per day i figured out that my chances of reproducing locally were really very slim so i didn't even try",
    "start": "379120",
    "end": "386160"
  },
  {
    "text": "and so the day after i had a memory dump waiting for me and so i uh opened it in",
    "start": "386160",
    "end": "391280"
  },
  {
    "text": "uh windy bg so i have it right there and so uh when i open it the first thing we see that",
    "start": "391280",
    "end": "397680"
  },
  {
    "text": "it's indeed an access violation with some kind of error code we see that it happens in the clr in",
    "start": "397680",
    "end": "404000"
  },
  {
    "text": "object native is lockhead so at this point i don't know what it's doing and we see that it's trying to read the",
    "start": "404000",
    "end": "410160"
  },
  {
    "text": "memory at the address to be and so as you may already know the lower addresses",
    "start": "410160",
    "end": "415280"
  },
  {
    "text": "in the process are marked as invalid on purpose to catch command programming errors such",
    "start": "415280",
    "end": "420400"
  },
  {
    "text": "as new pointers and so just as a sanity check i try to understand where this 2b comes",
    "start": "420400",
    "end": "428000"
  },
  {
    "text": "from so we are reading the value from the rcx register with the 2c offset and if i read the value of rcx it's all",
    "start": "428000",
    "end": "436000"
  },
  {
    "text": "fs which is a hexadecimal representation of minus one so minus one plus two c equal to b",
    "start": "436000",
    "end": "441680"
  },
  {
    "text": "and so from this point on uh the goal of the investigation will be to understand how the value minus one ended up in that",
    "start": "441680",
    "end": "448080"
  },
  {
    "text": "register at that point in time so the first thing i wanted to know was",
    "start": "448080",
    "end": "453680"
  },
  {
    "text": "exactly what code was running on the server the moment of the crash so i loaded the sos extension",
    "start": "453680",
    "end": "460080"
  },
  {
    "text": "and then i run a cls stack which is going to dump the managed car stack and here we have an issue because we have",
    "start": "460080",
    "end": "467120"
  },
  {
    "text": "some technical frames but we have no no method in there so we were supposed to see the name of the net the",
    "start": "467120",
    "end": "473520"
  },
  {
    "text": "management that are running but we don't see anything so it could mean some kind of corruption",
    "start": "473520",
    "end": "478639"
  },
  {
    "text": "on the stack maybe or uh maybe the application crashed at a at a state that",
    "start": "478639",
    "end": "484160"
  },
  {
    "text": "is not supported by the sos extension i don't know but in any case we will have to do",
    "start": "484160",
    "end": "489919"
  },
  {
    "text": "something else so when that when that happens you can try using k which is going to dump the",
    "start": "489919",
    "end": "495280"
  },
  {
    "text": "native car stack instead of the manager stack and so at the very top we see the object",
    "start": "495280",
    "end": "501120"
  },
  {
    "text": "native is local but here we see a bunch of functions that are not resolved so all of them are the managed functions",
    "start": "501120",
    "end": "508560"
  },
  {
    "text": "and the issue is that when you compile a net application the final address of the function is not",
    "start": "508560",
    "end": "515599"
  },
  {
    "text": "known yet because it will be decided at runtime by the jit compiler and so it",
    "start": "515599",
    "end": "520880"
  },
  {
    "text": "cannot be written inside of the pdb symbols and windpg is a native native",
    "start": "520880",
    "end": "527440"
  },
  {
    "text": "debugger and so it's not capable of resolving the function if it's not in the symbols",
    "start": "527440",
    "end": "532800"
  },
  {
    "text": "so to do that you need a debugger with a special knowledge of the dotnet runtime and that's what the sos extension is",
    "start": "532800",
    "end": "540000"
  },
  {
    "text": "bringing to windybg and so i can take the function the address of this function",
    "start": "540000",
    "end": "546160"
  },
  {
    "text": "and use the ip2md command that is provided by sos which stands for instruction pointer to",
    "start": "546160",
    "end": "552560"
  },
  {
    "text": "metadescriptor and is going to resolve the address for me",
    "start": "552560",
    "end": "557920"
  },
  {
    "text": "and so it's telling me that this this address is the output cache",
    "start": "557920",
    "end": "563040"
  },
  {
    "text": "filter.dispersed function inside of our chart so then",
    "start": "563040",
    "end": "568320"
  },
  {
    "text": "i decided to look at this function to understand what it's doing fortunately orchard is open source so i was able to",
    "start": "568320",
    "end": "574240"
  },
  {
    "text": "find it online and so i have a stripped-down version here it's a fairly straightforward",
    "start": "574240",
    "end": "580320"
  },
  {
    "start": "575000",
    "end": "636000"
  },
  {
    "text": "implementation of the dispose pattern but the interesting parts are right there we are calling monitor that is",
    "start": "580320",
    "end": "586720"
  },
  {
    "text": "entered and the name reminds me a lot of object native is lockhead so maybe the two are linked",
    "start": "586720",
    "end": "593519"
  },
  {
    "text": "and also underscore cache key is an intern string locking isn't on an internal string",
    "start": "593519",
    "end": "599920"
  },
  {
    "text": "sorry it's a bad practice but it's not necessarily wrong still it's a good thing to note",
    "start": "599920",
    "end": "606000"
  },
  {
    "text": "so then i decided to check the source code of monitor that is entered so whenever you want to check the source",
    "start": "606000",
    "end": "612720"
  },
  {
    "text": "code of the net bcl you can go on sourceof.net or use the compiler",
    "start": "612720",
    "end": "619120"
  },
  {
    "text": "and so there it is uh it's not actually doing much it's just checking if the parameter is null and then it's calling",
    "start": "619120",
    "end": "625600"
  },
  {
    "text": "is alternative and then is alternative is bound to a native function in the clr",
    "start": "625600",
    "end": "630800"
  },
  {
    "text": "so unfortunately we can't dig any further without the source code of the clr",
    "start": "630800",
    "end": "636480"
  },
  {
    "start": "636000",
    "end": "698000"
  },
  {
    "text": "and the problem is that microsoft never published the source code of the net framework clr",
    "start": "636480",
    "end": "643440"
  },
  {
    "text": "they published the dotted codes dotted core source code but never.net framework",
    "start": "643440",
    "end": "649120"
  },
  {
    "text": "fortunately there is a trick and the trick is to know that the core clr repository on github was created",
    "start": "649120",
    "end": "655839"
  },
  {
    "text": "around the same time frame as dot at 4.6 and back then the source code of.net core was pretty much mirroring the",
    "start": "655839",
    "end": "662800"
  },
  {
    "text": "source code of the debt framework so if you go to github and check out the very first commit from this repository you",
    "start": "662800",
    "end": "669200"
  },
  {
    "text": "will have a pretty good approximation of the source code of that framework and",
    "start": "669200",
    "end": "674560"
  },
  {
    "text": "it may be enough for your investigations and so i looked into it and i searched for",
    "start": "674560",
    "end": "680959"
  },
  {
    "text": "ezenter native and i found this macro that is binding his alternative to",
    "start": "680959",
    "end": "686000"
  },
  {
    "text": "object native is lockheld so now we have the confirmation that monitor that is entered is actually calling object",
    "start": "686000",
    "end": "692720"
  },
  {
    "text": "native is local so then i try to check what this function is actually doing",
    "start": "692720",
    "end": "698880"
  },
  {
    "start": "698000",
    "end": "832000"
  },
  {
    "text": "and so here it gets a bit scary especially if you are not used to read the source code of the clr because",
    "start": "698880",
    "end": "705279"
  },
  {
    "text": "there are a lot of macros plus it's c plus plus and c plus plus is always caring",
    "start": "705279",
    "end": "710880"
  },
  {
    "text": "but basically it's taking one parameter which is the object that we use for locking and then it's calling get thread owning",
    "start": "710880",
    "end": "717839"
  },
  {
    "text": "monitor lock the name is safer expiratory it's fetching the thread that is currently owning the lock",
    "start": "717839",
    "end": "724240"
  },
  {
    "text": "and then it's comparing the id of that thread with the id of the current thread and it's written returning true or false",
    "start": "724240",
    "end": "730800"
  },
  {
    "text": "depending on the result so that's pretty much what you would expect from monitor that is entered so",
    "start": "730800",
    "end": "736320"
  },
  {
    "text": "no surprise there so then i started to think about what could go wrong in there why would that",
    "start": "736320",
    "end": "742839"
  },
  {
    "text": "crash and the most plausible theory i found is that there is something wrong with the",
    "start": "742839",
    "end": "749680"
  },
  {
    "text": "object that we are giving as a parameter for the method so i went back to the memory dump and",
    "start": "749680",
    "end": "755600"
  },
  {
    "text": "checked if i could get this parameter somehow and so normally when i need to get the",
    "start": "755600",
    "end": "761839"
  },
  {
    "text": "parameter of a function i will use a cls stack with the dash p parameter",
    "start": "761839",
    "end": "768000"
  },
  {
    "text": "stack dash p which is going to dump the manager stack with all the parameters of",
    "start": "768000",
    "end": "773120"
  },
  {
    "text": "the method but as we've seen earlier sierra stack is not working so instead i tried dso for dump stack",
    "start": "773120",
    "end": "780480"
  },
  {
    "text": "objects which is going to browse the managed stack and dump everything that looks like a pointer to",
    "start": "780480",
    "end": "787279"
  },
  {
    "text": "the managed hip and i was hoping to find a trace of my parameter in there",
    "start": "787279",
    "end": "792320"
  },
  {
    "text": "but unfortunately i couldn't find it there is a string there but that's not the right one",
    "start": "792320",
    "end": "798000"
  },
  {
    "text": "so it will it was looking bad so then i decided to",
    "start": "798000",
    "end": "803600"
  },
  {
    "text": "um well think a bit outside of the box so basically when you",
    "start": "803600",
    "end": "808720"
  },
  {
    "text": "are calling a method uh the arguments are going to be stored uh in registers and so if that register hasn't been",
    "start": "808720",
    "end": "815680"
  },
  {
    "text": "touched by the time the application crashed i should be able to find the value of my argument in there",
    "start": "815680",
    "end": "822160"
  },
  {
    "text": "so to verify that i needed to know what register is being used and so i needed to know what calling convention the cli",
    "start": "822160",
    "end": "829360"
  },
  {
    "text": "is using so uh on windows xc4 uh the cri is using",
    "start": "829360",
    "end": "836399"
  },
  {
    "start": "832000",
    "end": "893000"
  },
  {
    "text": "this calling convention the first argument is stored in the rcx register the second one on the rdx then r8 and",
    "start": "836399",
    "end": "843760"
  },
  {
    "text": "then r9 and so if between the beginning of the method and the moment of the crash the value of the rcx register",
    "start": "843760",
    "end": "851279"
  },
  {
    "text": "hasn't changed i will be able to find my argument in there so i decided to check the disassembly of",
    "start": "851279",
    "end": "859120"
  },
  {
    "text": "the method going to zoom a bit and so basically i needed to find if between the beginning",
    "start": "859120",
    "end": "865760"
  },
  {
    "text": "of the method and between the lines that crash the one in yellow the value of rcx has changed and",
    "start": "865760",
    "end": "872560"
  },
  {
    "text": "unfortunately just right there we are overwriting rcx with the value from the memory so",
    "start": "872560",
    "end": "878639"
  },
  {
    "text": "the original value is lost just in case i looked around for n equal to the push instruction that will",
    "start": "878639",
    "end": "885920"
  },
  {
    "text": "store the value of the register on the stack but i couldn't find any so unfortunately",
    "start": "885920",
    "end": "891040"
  },
  {
    "text": "the value is lost so i felt like i reached a dead end so i",
    "start": "891040",
    "end": "896480"
  },
  {
    "text": "took one step back and i decided to think about everything i found at this point",
    "start": "896480",
    "end": "901680"
  },
  {
    "text": "so we know that is lockheed is causing the crash uh we know that is lockheed takes only",
    "start": "901680",
    "end": "907360"
  },
  {
    "text": "one parameter which is the object that we use for locking and then i try thinking about what could",
    "start": "907360",
    "end": "912560"
  },
  {
    "text": "go wrong and i thought of two theories the first one is that something is wrong",
    "start": "912560",
    "end": "917600"
  },
  {
    "text": "with the with the parameter of the method which is what i've tried to verify but couldn't",
    "start": "917600",
    "end": "923760"
  },
  {
    "text": "and the other theory that guest trade owning monitor rock is failing somehow because that's the only part in the",
    "start": "923760",
    "end": "930160"
  },
  {
    "text": "function where we are actually doing something significant but this is a very coarse theory and so",
    "start": "930160",
    "end": "936639"
  },
  {
    "text": "uh before moving forward i needed to refine it somehow and so i decided to take a short pause",
    "start": "936639",
    "end": "943759"
  },
  {
    "text": "in my investigation and check books and articles online about how monitors work",
    "start": "943759",
    "end": "948959"
  },
  {
    "text": "in.net because i needed to understand exactly how everything worked so that i could come up with a better theory",
    "start": "948959",
    "end": "956399"
  },
  {
    "text": "and so here is a summary of what what i found so let's take this simple object with a",
    "start": "956399",
    "end": "962639"
  },
  {
    "text": "single property and when you're going to allocate it the layout in memory will look like this you have the header then",
    "start": "962639",
    "end": "969360"
  },
  {
    "text": "a pointer to the method table and then the actual value of the field a little bit of trivia when you have a",
    "start": "969360",
    "end": "976399"
  },
  {
    "text": "reference to the object the reference points to the method table pointer and not to the header or the value like you",
    "start": "976399",
    "end": "982560"
  },
  {
    "text": "could think let's focus on the header the header is 32 bits wide always even",
    "start": "982560",
    "end": "990720"
  },
  {
    "text": "in a 64-bit process and it has two parts the first part is 26 bits and it's some kind of",
    "start": "990720",
    "end": "997920"
  },
  {
    "text": "all-purpose storage that can contain either a hash code or the information about the thread holding the lock in the",
    "start": "997920",
    "end": "1004000"
  },
  {
    "text": "case of a thin lock or the index of a stick block i will come back to that the second part of the header is six",
    "start": "1004000",
    "end": "1010800"
  },
  {
    "text": "bits and is some bit flag that indicates additional information about your object for instance there is a flag that",
    "start": "1010800",
    "end": "1017519"
  },
  {
    "text": "indicates whether the finalizer has run some private information used by the gc",
    "start": "1017519",
    "end": "1022639"
  },
  {
    "text": "and also two two bits that indicate what is stored in the first part of the header",
    "start": "1022639",
    "end": "1029120"
  },
  {
    "text": "so why do we store information on the header let's look at practical examples",
    "start": "1029120",
    "end": "1034880"
  },
  {
    "text": "so i have this code i initialize an object so it's going to allocate the header in memory and then i call get",
    "start": "1034880",
    "end": "1041839"
  },
  {
    "text": "hashcode on it so assuming you didn't override the implementation of gethashcode it's",
    "start": "1041839",
    "end": "1047918"
  },
  {
    "text": "expected to return a value that is unique to your object and that doesn't change over time",
    "start": "1047919",
    "end": "1054480"
  },
  {
    "text": "at first i thought that the runtime would be using the memory address of the object because",
    "start": "1054480",
    "end": "1059919"
  },
  {
    "text": "it seems like a clever way of uniquely identifying an object but there are two problems with that uh",
    "start": "1059919",
    "end": "1066320"
  },
  {
    "text": "the first one is that the address of an object can change over time because during garbage collection it's going to",
    "start": "1066320",
    "end": "1072640"
  },
  {
    "text": "move objects around and the other problem is that the garbage collector is really trying very",
    "start": "1072640",
    "end": "1078559"
  },
  {
    "text": "hard to keep all the objects compacted to compact it together and we expect the",
    "start": "1078559",
    "end": "1084160"
  },
  {
    "text": "hash to use the whole space available so the address is not actually",
    "start": "1084160",
    "end": "1089440"
  },
  {
    "text": "a good way of generating a hash so instead the runtime is generating a",
    "start": "1089440",
    "end": "1094720"
  },
  {
    "text": "random number but it needs to return the same number the next time you call get hash code so it",
    "start": "1094720",
    "end": "1101840"
  },
  {
    "text": "needs to store it somewhere and that somewhere is the object header",
    "start": "1101840",
    "end": "1107039"
  },
  {
    "text": "note that since we only have 26 bits of storage in the header it means that the",
    "start": "1107039",
    "end": "1112320"
  },
  {
    "text": "hash code of an object actually have only 26 bits of entropy i know 32 bits like you could think",
    "start": "1112320",
    "end": "1119520"
  },
  {
    "text": "okay so that's one use case another one is what we call a thin lock so just like before i create an object and i call",
    "start": "1119520",
    "end": "1126320"
  },
  {
    "text": "lock on it because on.net you can lock on any reference type the way it works is that the runtime is",
    "start": "1126320",
    "end": "1132400"
  },
  {
    "text": "going to use an atomic interrupt operation to store thread information",
    "start": "1132400",
    "end": "1137520"
  },
  {
    "text": "inside of the header of the object and then it will execute the critical section and when it leaves it's going to",
    "start": "1137520",
    "end": "1144320"
  },
  {
    "text": "clear that information when you think about it that's one of the fastest possible ways of",
    "start": "1144320",
    "end": "1149760"
  },
  {
    "text": "implementing a lock because the header is next to your object so you are almost guaranteed that it will be available in",
    "start": "1149760",
    "end": "1156559"
  },
  {
    "text": "the cache of your cpu so it's going to be very fast but it's not always that easy and so for",
    "start": "1156559",
    "end": "1163679"
  },
  {
    "text": "instance let's consider what is going to happen if you have two threads competing for the same lock",
    "start": "1163679",
    "end": "1169760"
  },
  {
    "text": "so thread one arrives first it acquires the lock so the runtime is going to store the information in the header that",
    "start": "1169760",
    "end": "1175760"
  },
  {
    "text": "thread one is owning the lock and it executes the critical section",
    "start": "1175760",
    "end": "1180880"
  },
  {
    "text": "and then stretch your eyes and try to do the same thing it can't store you can't acquire the log because a thread one",
    "start": "1180880",
    "end": "1188080"
  },
  {
    "text": "already already owns it and so now uh what is going to happen thread two needs",
    "start": "1188080",
    "end": "1193440"
  },
  {
    "text": "to go to sleep and it needs to be woken up when uh the lock is freed so we need",
    "start": "1193440",
    "end": "1199679"
  },
  {
    "text": "to store somewhere the information that thread two is waiting to acquire the lock so we need a waitlist basically",
    "start": "1199679",
    "end": "1206480"
  },
  {
    "text": "and where are we going to store that since the header is already full",
    "start": "1206480",
    "end": "1211679"
  },
  {
    "text": "another problematic case is when we combine both scenarios so we create an object we call get hashcode",
    "start": "1211679",
    "end": "1218720"
  },
  {
    "text": "the runtime generates a random number and stores it in the header and then we try to lock",
    "start": "1218720",
    "end": "1224640"
  },
  {
    "text": "the instance so the runtime tries to store the thread information in the header but we can't because it's already",
    "start": "1224640",
    "end": "1230880"
  },
  {
    "text": "full so where are we going to store that in older scenarios",
    "start": "1230880",
    "end": "1236000"
  },
  {
    "text": "whenever we need to store information in the header but it's already full the runtime is going to use what we call the",
    "start": "1236000",
    "end": "1242320"
  },
  {
    "text": "sync table so it's a table allocated somewhere in memory and the runtime is going to look for the",
    "start": "1242320",
    "end": "1249360"
  },
  {
    "text": "next free entry in the table and it's going to replace whatever information is",
    "start": "1249360",
    "end": "1254799"
  },
  {
    "text": "in the header with the index of that entry and then every entry is actually two",
    "start": "1254799",
    "end": "1261360"
  },
  {
    "text": "pointers we have one back pointer to the object and then one pointer to another",
    "start": "1261360",
    "end": "1266880"
  },
  {
    "text": "chunk of memory that we call a thing block and the thing block is big enough to store everything we need so the",
    "start": "1266880",
    "end": "1272559"
  },
  {
    "text": "information about the lock the hash code and maybe even other stuff i don't know",
    "start": "1272559",
    "end": "1278400"
  },
  {
    "text": "so so basically in short the runtime is going to store information on the object",
    "start": "1278400",
    "end": "1285039"
  },
  {
    "text": "header as much as possible because it's fast but when it counts it will instead",
    "start": "1285039",
    "end": "1290799"
  },
  {
    "text": "use the thing table and so i went back to my problem and now i had enough information to refine my",
    "start": "1290799",
    "end": "1297440"
  },
  {
    "start": "1293000",
    "end": "1521000"
  },
  {
    "text": "theories and so now i had three theories about what is going wrong so still the address of the parameter could be wrong",
    "start": "1297440",
    "end": "1304480"
  },
  {
    "text": "or the sync table could be corrupted somehow or the index of the thing of the thing",
    "start": "1304480",
    "end": "1310400"
  },
  {
    "text": "table that we store inside of the object header could be corrupted somehow so in both cases we have some kind of",
    "start": "1310400",
    "end": "1316880"
  },
  {
    "text": "problem with the thing table but in one case it's a table itself and in the other case it's an index that we store",
    "start": "1316880",
    "end": "1323200"
  },
  {
    "text": "in the object so can we try to verify the theories",
    "start": "1323200",
    "end": "1328559"
  },
  {
    "text": "so i went back to my memory dump and since we are interested in the sync table i tried using the syncblk command",
    "start": "1328559",
    "end": "1335679"
  },
  {
    "text": "which is going to browse the thing table and dump anything block that is currently used by a lock",
    "start": "1335679",
    "end": "1342080"
  },
  {
    "text": "and when i execute it we see something interesting it finds a one thing block",
    "start": "1342080",
    "end": "1347440"
  },
  {
    "text": "and uh when when it tries to read the thread info it fails with some kind of",
    "start": "1347440",
    "end": "1352720"
  },
  {
    "text": "error so it's very interesting because we are suspecting that something is wrong with the thing table and when we",
    "start": "1352720",
    "end": "1358000"
  },
  {
    "text": "try to read it we have an error so then i try to use a sing blk-all",
    "start": "1358000",
    "end": "1364080"
  },
  {
    "text": "which is going to read the thing table but this time dump all the thing blocks and not only the ones",
    "start": "1364080",
    "end": "1369760"
  },
  {
    "text": "that are used by a lock and we see that it stops at index 226",
    "start": "1369760",
    "end": "1376640"
  },
  {
    "text": "which is the thing block with the error with the error so at this point i'm not capable of concluding whether it means that",
    "start": "1376640",
    "end": "1384480"
  },
  {
    "text": "zero happens on the last thing block of the table or maybe synblk stops at the",
    "start": "1384480",
    "end": "1389760"
  },
  {
    "text": "first error or maybe the thing table is so corrupted that it cannot be read past this point",
    "start": "1389760",
    "end": "1395840"
  },
  {
    "text": "but in any case it seems that i have some kind of memory corruption",
    "start": "1395840",
    "end": "1401039"
  },
  {
    "text": "and i decided to stop my investigation there and wait for another memory dump so why is that it's because i have some",
    "start": "1401039",
    "end": "1408559"
  },
  {
    "text": "signs that could point towards a memory corruption and this kind of corruption could be completely random for instance",
    "start": "1408559",
    "end": "1415360"
  },
  {
    "text": "imagine that you are writing to a wrong pointer you will be overwriting a random part of the memory and this time it",
    "start": "1415360",
    "end": "1422480"
  },
  {
    "text": "happened to be the thing table but maybe in the next crash it will be something completely different",
    "start": "1422480",
    "end": "1427520"
  },
  {
    "text": "so i didn't want to spend too much time on the sink table before knowing for sure that this was the source of the",
    "start": "1427520",
    "end": "1433840"
  },
  {
    "text": "problem fortunately by the time i reached this point in the investigation i already had",
    "start": "1433840",
    "end": "1439760"
  },
  {
    "text": "another memory dump waiting for me and so i have it right there",
    "start": "1439760",
    "end": "1444880"
  },
  {
    "text": "and so just like before we see an access violation uh we see it happens in object native is",
    "start": "1444880",
    "end": "1450480"
  },
  {
    "text": "lockhead and we see that we are reading the memory at address 2b so it looks really similar to the previous one",
    "start": "1450480",
    "end": "1457600"
  },
  {
    "text": "so i try loading sos and then run clr stack to know what is running",
    "start": "1457600",
    "end": "1463279"
  },
  {
    "text": "just like before cll stack is not working so i tried using k",
    "start": "1463279",
    "end": "1469120"
  },
  {
    "text": "and then take the top frame and reserve it with ip2md",
    "start": "1469120",
    "end": "1474799"
  },
  {
    "text": "just like before it's happening in our chart in output crash filter.dispose so",
    "start": "1474799",
    "end": "1480000"
  },
  {
    "text": "it looks really good because it seems that every crash has the same symptoms which",
    "start": "1480000",
    "end": "1485279"
  },
  {
    "text": "is going to make the investigation much easier and so then i try uni uh running thing",
    "start": "1485279",
    "end": "1492400"
  },
  {
    "text": "blk and this time we don't have an error which is nice and",
    "start": "1492400",
    "end": "1497679"
  },
  {
    "text": "we still see something significant that the second block has no thread info",
    "start": "1497679",
    "end": "1504480"
  },
  {
    "text": "so it means that the lock is orphaned so basically at some point one thread acquired the lock and it died without",
    "start": "1504480",
    "end": "1510880"
  },
  {
    "text": "freeing it which is a sign of a programming error so i checked the source code of our chart",
    "start": "1510880",
    "end": "1516960"
  },
  {
    "text": "to understand how we could end up with orphan locks",
    "start": "1516960",
    "end": "1521679"
  },
  {
    "start": "1521000",
    "end": "1660000"
  },
  {
    "text": "and so what i found is so basically orchard is an asp.net mvc",
    "start": "1522000",
    "end": "1527039"
  },
  {
    "text": "application and it's using two events as part of its locking mechanism",
    "start": "1527039",
    "end": "1533039"
  },
  {
    "text": "in controller that on action executing is going to acquire the lock and then in another event",
    "start": "1533039",
    "end": "1539200"
  },
  {
    "text": "action filter that end result executed is going to call push cache filter.disperse which is",
    "start": "1539200",
    "end": "1544880"
  },
  {
    "text": "going to release the lock and the thing is for this to work you need both events to be raised on the",
    "start": "1544880",
    "end": "1550559"
  },
  {
    "text": "same thread because only the thread that has acquired a lock can freeze but asp.net makes absolutely no",
    "start": "1550559",
    "end": "1557520"
  },
  {
    "text": "guarantee about that and it's entirely possible that the two events are raised on separate threads which is how you end",
    "start": "1557520",
    "end": "1564559"
  },
  {
    "text": "up with orphan logs so this is not great that's not something you want to happen in your",
    "start": "1564559",
    "end": "1569600"
  },
  {
    "text": "application but it still doesn't explain why we have an access violation and since this could",
    "start": "1569600",
    "end": "1575520"
  },
  {
    "text": "have been caused by our instrumentation i absolutely needed to get to the bottom of it",
    "start": "1575520",
    "end": "1580880"
  },
  {
    "text": "and so i was a bit out of leads and so i figured out that it was time to focus uh",
    "start": "1580880",
    "end": "1587360"
  },
  {
    "text": "on the disassembly so yeah we we have a bug in this version of windy bg where the disassembly window",
    "start": "1587360",
    "end": "1593760"
  },
  {
    "text": "is empty until you run one command and so basically i needed to understand",
    "start": "1593760",
    "end": "1601039"
  },
  {
    "text": "what were we doing exactly in the function uh at the moment of the crash",
    "start": "1601039",
    "end": "1606880"
  },
  {
    "text": "and i don't know about you but personally uh when i see that i don't understand much",
    "start": "1606880",
    "end": "1613279"
  },
  {
    "text": "i mean i know what most of the instructions are doing individually and i'm saying most not all of them",
    "start": "1613279",
    "end": "1619840"
  },
  {
    "text": "but i'm completely unable to reconstruct mentally the flow of the program like i would do with some c sharp code",
    "start": "1619840",
    "end": "1626480"
  },
  {
    "text": "but fortunately we already have the c press press code as a function and so it's just going to be a matter of",
    "start": "1626480",
    "end": "1632159"
  },
  {
    "text": "mapping the c plus plus to the native instructions and the way i do that is by looking for",
    "start": "1632159",
    "end": "1638320"
  },
  {
    "text": "instructions that are easy to recognize so for instance this one here we are reading the memory at some",
    "start": "1638320",
    "end": "1644480"
  },
  {
    "text": "address and thanks to the symbols it was reserved to a g underscore piecing table",
    "start": "1644480",
    "end": "1650240"
  },
  {
    "text": "in the clr and so then if i check the source code and i find one place where",
    "start": "1650240",
    "end": "1655279"
  },
  {
    "text": "we read this table i know that this line of code was compiled to this instruction",
    "start": "1655279",
    "end": "1660720"
  },
  {
    "start": "1660000",
    "end": "1815000"
  },
  {
    "text": "so i check the source code and we are not using g underscore piecing table anywhere so that usually",
    "start": "1660720",
    "end": "1666720"
  },
  {
    "text": "means that one of the function that you are calling got in line during compilation so you also need to check the function",
    "start": "1666720",
    "end": "1673200"
  },
  {
    "text": "that you are calling so i checked uh get thread owning monitor lock",
    "start": "1673200",
    "end": "1678320"
  },
  {
    "text": "and so this one is much bigger so i'm not going to try and understand what he's doing for now",
    "start": "1678320",
    "end": "1684559"
  },
  {
    "text": "all i'm interesting in is uh is it using g underscore piecing table somewhere",
    "start": "1684559",
    "end": "1689919"
  },
  {
    "text": "and it turns out it is and also i got lucky because it only use it at one",
    "start": "1689919",
    "end": "1695279"
  },
  {
    "text": "place and so i have the guarantee that this line of code is mapped to the native instruction that we saw",
    "start": "1695279",
    "end": "1702399"
  },
  {
    "text": "so then i kept looking for a stuff that you can recognize and here we have two if blocks and each",
    "start": "1702399",
    "end": "1709360"
  },
  {
    "text": "of them is checking if some bit flags are set and if we go back to the native",
    "start": "1709360",
    "end": "1715279"
  },
  {
    "text": "instructions we have two chords to the bt instruction and bt stands for bit",
    "start": "1715279",
    "end": "1720320"
  },
  {
    "text": "test we check if some bits are set so there is a good probability that those two bt instructions",
    "start": "1720320",
    "end": "1727120"
  },
  {
    "text": "are coding for those two if blocks so to verify that i check the value of",
    "start": "1727120",
    "end": "1733279"
  },
  {
    "text": "the constants that we are testing and so for instance a bit sync block is hashcode has this value",
    "start": "1733279",
    "end": "1740000"
  },
  {
    "text": "which is this binary representation which means check if the 27th bit is set",
    "start": "1740000",
    "end": "1745840"
  },
  {
    "text": "and one a in hexadecimal is 26 which means that this instruction is checking this",
    "start": "1745840",
    "end": "1752720"
  },
  {
    "text": "constant so here you may be confused because we are talking about the 27th bit and we",
    "start": "1752720",
    "end": "1759840"
  },
  {
    "text": "are calling bt with the value 26 and the trick is that bt is 0 base so bt0 is",
    "start": "1759840",
    "end": "1765919"
  },
  {
    "text": "testing the first bit bt1 is testing the second bit and bt26 is testing the 27th",
    "start": "1765919",
    "end": "1771679"
  },
  {
    "text": "bit so then i did the same thing for the other constant just to be sure so bitsync block is hash or sync block",
    "start": "1771679",
    "end": "1778240"
  },
  {
    "text": "index this is a binary representation and it means check if the 28th bit is set and",
    "start": "1778240",
    "end": "1784320"
  },
  {
    "text": "so 1b hexadecimal is 27 and so this is this native instruction",
    "start": "1784320",
    "end": "1790799"
  },
  {
    "text": "and so every time i was able to map a line of c plus plus to the native instruction i annotate in my code so",
    "start": "1790799",
    "end": "1797440"
  },
  {
    "text": "that i will little by little reconstruct my mental image as a function and so i kept looking for interesting",
    "start": "1797440",
    "end": "1804000"
  },
  {
    "text": "stuff and here we have test rcx rcx whenever you are testing a register",
    "start": "1804000",
    "end": "1809600"
  },
  {
    "text": "against itself you can be almost sure that it's either a null check or a false boolean check",
    "start": "1809600",
    "end": "1816000"
  },
  {
    "start": "1815000",
    "end": "2079000"
  },
  {
    "text": "so i check the source code and here we have another check so there is a chance that",
    "start": "1816000",
    "end": "1821760"
  },
  {
    "text": "it was compiled into this instruction so assuming this is the case it will mean that the rcx register is storing",
    "start": "1821760",
    "end": "1828240"
  },
  {
    "text": "the address of pthread so let's see where it's coming from is coming from the memory at address rdx press 8 rdx",
    "start": "1828240",
    "end": "1836720"
  },
  {
    "text": "comes from rax plus rcx times 8 and rax contains the address of the",
    "start": "1836720",
    "end": "1844159"
  },
  {
    "text": "thing table so given that rax contains the address of the servicing table",
    "start": "1844159",
    "end": "1850559"
  },
  {
    "text": "rax plus rcx times 8 sounds a lot like if we are reading the sync table at a",
    "start": "1850559",
    "end": "1856799"
  },
  {
    "text": "given index with the index stored in the rcx register which would mean that this",
    "start": "1856799",
    "end": "1862240"
  },
  {
    "text": "instruction codes for this this line of code assuming this is the case it will mean",
    "start": "1862240",
    "end": "1868080"
  },
  {
    "text": "that the result which is a pointer to the thing block will be stored in the rdx register",
    "start": "1868080",
    "end": "1874240"
  },
  {
    "text": "and so then when we read rdx press 8 it will mean that we are doing a curling",
    "start": "1874240",
    "end": "1879519"
  },
  {
    "text": "gate monitor on the sync block and fetching the amanda score holding thread field so here it's a bit of a stretch and so i",
    "start": "1879519",
    "end": "1886399"
  },
  {
    "text": "really needed to verify this before moving forward and so basically what i needed to verify is",
    "start": "1886399",
    "end": "1892480"
  },
  {
    "text": "is reading the memory at address rdx press 8 when rdx stores the address of",
    "start": "1892480",
    "end": "1897679"
  },
  {
    "text": "the sync block the same thing as calling get monitor on the sync block and fetching the m underscore holding thread",
    "start": "1897679",
    "end": "1903519"
  },
  {
    "text": "field in other words uh i assumed that i had the sync block in",
    "start": "1903519",
    "end": "1909519"
  },
  {
    "text": "the rdx register and so i tried to figure out what was that rdx 8",
    "start": "1909519",
    "end": "1915360"
  },
  {
    "text": "so to do that i checked further source code of the get monitor function all he's",
    "start": "1915360",
    "end": "1920960"
  },
  {
    "text": "doing is returning the address of the m underscore monitor field and then i checked",
    "start": "1920960",
    "end": "1926720"
  },
  {
    "text": "the sync block class and m underscore monitor is the first field of the class",
    "start": "1926720",
    "end": "1932640"
  },
  {
    "text": "in memory uh the fields are going to be stored in the same order as they are declared in the code",
    "start": "1932640",
    "end": "1939200"
  },
  {
    "text": "except summers some exceptions so that will mean that m underscore monitor is going to be stored at the",
    "start": "1939200",
    "end": "1945519"
  },
  {
    "text": "beginning of the object and so it's going to be stored at offset 0. so at",
    "start": "1945519",
    "end": "1950880"
  },
  {
    "text": "offset 0 we have the aware lock that is stored in the m underscore monitor field so then i check",
    "start": "1950880",
    "end": "1956880"
  },
  {
    "text": "the structure of the overlock and it has three fields the first one is another score monitor held so it's the",
    "start": "1956880",
    "end": "1964000"
  },
  {
    "text": "first field so it's going to be stored at the beginning of the object at a set zero and it's so long it's four bytes so",
    "start": "1964000",
    "end": "1969919"
  },
  {
    "text": "it's going to end at zero x4 then we have m underscore recursion is going to be stored next to the previous",
    "start": "1969919",
    "end": "1976159"
  },
  {
    "text": "field so out of set 0x4 and it's an enzyme long it's going to be 4 bytes so it's going to end out of set 0x8 and",
    "start": "1976159",
    "end": "1983120"
  },
  {
    "text": "then we have amanda score holding thread which is the field we are looking for which is going to be stored next to the",
    "start": "1983120",
    "end": "1988640"
  },
  {
    "text": "previous one and so it's going to be stored at offset 0x8 and so we have the confirmation that this native",
    "start": "1988640",
    "end": "1994720"
  },
  {
    "text": "instruction is a sensing as calling get monitor on the thing block and fetching the amazon holding straight field",
    "start": "1994720",
    "end": "2001919"
  },
  {
    "text": "so i annotated the native instructions with my findings and at this point i",
    "start": "2001919",
    "end": "2007360"
  },
  {
    "text": "felt like i had enough information to focus on the crash itself so here we are calling test rcx rcx",
    "start": "2007360",
    "end": "2014799"
  },
  {
    "text": "which is if-b thread is null and so the way it's going to work is that it's going to set the zero flag of",
    "start": "2014799",
    "end": "2020799"
  },
  {
    "text": "the cpu if the value of rcx is zero so basically it's going to set the zero",
    "start": "2020799",
    "end": "2026799"
  },
  {
    "text": "flag if this thread is null then we have this this ge instruction",
    "start": "2026799",
    "end": "2033279"
  },
  {
    "text": "ge is going to jump to the target address if the zero flag of the cpu is set so it's going to jump if rcx was",
    "start": "2033279",
    "end": "2041200"
  },
  {
    "text": "zero so it's going to jump if p thread was null then we have the line that caused the",
    "start": "2041200",
    "end": "2046320"
  },
  {
    "text": "crash and uh if we got there it means that we didn't jump at the previous instruction",
    "start": "2046320",
    "end": "2051679"
  },
  {
    "text": "so it means that rcx wasn't zero and so p thread wasn't null and so we were",
    "start": "2051679",
    "end": "2057839"
  },
  {
    "text": "there that will mean that we crashed when colleen gets thread id on pthread",
    "start": "2057839",
    "end": "2063520"
  },
  {
    "text": "and so a gets right id tries to fetch the id of the thread and so to move forward we have to verify",
    "start": "2063520",
    "end": "2070480"
  },
  {
    "text": "if the thread id is stored at offset 2c because we are crashing when reading the",
    "start": "2070480",
    "end": "2075839"
  },
  {
    "text": "offset 2c from pthread so i'm going to do the same verification",
    "start": "2075839",
    "end": "2081520"
  },
  {
    "start": "2079000",
    "end": "2189000"
  },
  {
    "text": "as before but without the fancy drawings we're just going to count how much memory is used by all the fields before",
    "start": "2081520",
    "end": "2088480"
  },
  {
    "text": "the thread id and see if it sums up to 2c so an underscore state is a straight state",
    "start": "2088480",
    "end": "2095118"
  },
  {
    "text": "it's 4 bytes we have an unsigned long it's 4 bytes we have 3 pointers it's a 64-bit process so",
    "start": "2095119",
    "end": "2101920"
  },
  {
    "text": "it's 8 bytes each then we have a g word the word is always 4 bytes and then finally we have our",
    "start": "2101920",
    "end": "2108000"
  },
  {
    "text": "field if we do the sum that means there is 36 bytes before the field",
    "start": "2108000",
    "end": "2113680"
  },
  {
    "text": "and 2c is 44 in decimal so it doesn't add up so does it mean that my theory",
    "start": "2113680",
    "end": "2119440"
  },
  {
    "text": "was wrong well not quite because if you pay close attention you will see that thread",
    "start": "2119440",
    "end": "2124560"
  },
  {
    "text": "inherits from i unknown and if you check the source code you will see that inon has some abstract functions which means",
    "start": "2124560",
    "end": "2131839"
  },
  {
    "text": "that thread will have some virtual functions and in c plus plus when an object has virtual function is going to expose a v",
    "start": "2131839",
    "end": "2139040"
  },
  {
    "text": "table and the compiler is going to generate kind of like an additional field at the",
    "start": "2139040",
    "end": "2146480"
  },
  {
    "text": "beginning of the object that is going to store a pointer to the v table",
    "start": "2146480",
    "end": "2151760"
  },
  {
    "text": "and since it's a 64-bit process that pointer is going to be 8 bytes so if we",
    "start": "2151760",
    "end": "2156880"
  },
  {
    "text": "redo the math we have 44 and so we have the confirmation that the thread id is",
    "start": "2156880",
    "end": "2162000"
  },
  {
    "text": "at offset to c and so we have the confirmation that we crash when reading the thread id",
    "start": "2162000",
    "end": "2168640"
  },
  {
    "text": "so that will mean that the crash occurred at this function which will mean that p thread would be",
    "start": "2168640",
    "end": "2174160"
  },
  {
    "text": "-1 because if you remember what i checked at the very beginning we are reading memory at rs2b which is a 2c",
    "start": "2174160",
    "end": "2181599"
  },
  {
    "text": "plus minus 1. so now the question is where does p threat comes from and why is it minus",
    "start": "2181599",
    "end": "2188000"
  },
  {
    "text": "one so this time is we need to focus on guess thread owning",
    "start": "2188000",
    "end": "2193359"
  },
  {
    "start": "2189000",
    "end": "2465000"
  },
  {
    "text": "monitor lock and actually understand what it's doing",
    "start": "2193359",
    "end": "2198160"
  },
  {
    "text": "so we start by calling get bits get bits is going to read the header of the object",
    "start": "2198839",
    "end": "2205119"
  },
  {
    "text": "that we use as a parameter for the locking then it's going to check",
    "start": "2205119",
    "end": "2210240"
  },
  {
    "text": "if the is hash or sync block index bit is set so if you remember my explanation",
    "start": "2210240",
    "end": "2216480"
  },
  {
    "text": "the header has two parts one all-purpose storage and then a few bit flags that indicate among other things what is",
    "start": "2216480",
    "end": "2223599"
  },
  {
    "text": "stored in the first part and so here we check if the first part is storing a hash or the index surfacing block",
    "start": "2223599",
    "end": "2230720"
  },
  {
    "text": "we know that is the case because if that wasn't then we would have executed the else part of the if and so we wouldn't",
    "start": "2230720",
    "end": "2237119"
  },
  {
    "text": "have gotten to the crashing instruction and so then we check the flag that",
    "start": "2237119",
    "end": "2242720"
  },
  {
    "text": "indicate whether it's a hash card we know that's not the case otherwise we wouldn't have gotten to the crash and",
    "start": "2242720",
    "end": "2248960"
  },
  {
    "text": "crashing instruction and so at this point we know that the header is storing the index of a sting",
    "start": "2248960",
    "end": "2254240"
  },
  {
    "text": "block so if you remember my explanation it means that the runtime tries to store something in the header but it was full",
    "start": "2254240",
    "end": "2260640"
  },
  {
    "text": "and so it moved everything to a sync block and instead store the index in the header",
    "start": "2260640",
    "end": "2265920"
  },
  {
    "text": "so then we apply a bit mask to retrieve that index and then we read the thing",
    "start": "2265920",
    "end": "2271760"
  },
  {
    "text": "table and we fetch we really sorry we read the same table at that index and",
    "start": "2271760",
    "end": "2276880"
  },
  {
    "text": "we fetch the pointer to the thing block so if you remember my description of the thing table",
    "start": "2276880",
    "end": "2282240"
  },
  {
    "text": "we have the index so we get the entry at that index and that in then in that entry we have a pointer to the thing",
    "start": "2282240",
    "end": "2288800"
  },
  {
    "text": "block and we are fetching that pointer um and then we",
    "start": "2288800",
    "end": "2293839"
  },
  {
    "text": "now that we have the pointer to the thing block we get the part of the thing blocks that contain the lock information",
    "start": "2293839",
    "end": "2300000"
  },
  {
    "text": "and more specifically we get the address of the thread owning the lock and then p thread is not null because",
    "start": "2300000",
    "end": "2306160"
  },
  {
    "text": "it's minus one and so we get to the crashing line and so that will mean that we are",
    "start": "2306160",
    "end": "2311920"
  },
  {
    "text": "crashing because uh we have the value minus one stored in the m underscore holdings thread feed",
    "start": "2311920",
    "end": "2318560"
  },
  {
    "text": "uh which begs the question why would we end up with the value minus one",
    "start": "2318560",
    "end": "2325119"
  },
  {
    "text": "but first uh before moving uh too far let's try to verify it so to verify it we will need the address",
    "start": "2325119",
    "end": "2331760"
  },
  {
    "text": "of the sting block and uh if we go back to our annotated native code we found out that at this",
    "start": "2331760",
    "end": "2338880"
  },
  {
    "text": "point we have the address of the sync block in the rdx register",
    "start": "2338880",
    "end": "2344800"
  },
  {
    "text": "and the rdx register is not touched past this point we never change the",
    "start": "2344800",
    "end": "2349920"
  },
  {
    "text": "value so it should still be intact in the memory lamp so if i get back to my memory dump i'm",
    "start": "2349920",
    "end": "2356160"
  },
  {
    "text": "not going to need that anymore and i read the value of the rdx register i should have the address of the thing",
    "start": "2356160",
    "end": "2362560"
  },
  {
    "text": "block and in fact if i copy this value and look for it inside of my wind dbg window",
    "start": "2362560",
    "end": "2368560"
  },
  {
    "text": "i find the output of my sync blk command in the second column which contains the address of the sync block so we have the",
    "start": "2368560",
    "end": "2374880"
  },
  {
    "text": "confirmation that this is indeed a thing block and interestingly it's the orphan sync blocks",
    "start": "2374880",
    "end": "2381440"
  },
  {
    "text": "so then i can use uh yeah i need to copy it sorry there we go then i can use a dd command",
    "start": "2381440",
    "end": "2387280"
  },
  {
    "text": "for dumb d words to read the memory at this address and it's going to display it by chunks of four bytes",
    "start": "2387280",
    "end": "2393839"
  },
  {
    "text": "and then i can try to map those values to the values of the thing block",
    "start": "2393839",
    "end": "2399040"
  },
  {
    "text": "so basically i know that uh the structure of the of this part of the thing block looks",
    "start": "2399040",
    "end": "2404640"
  },
  {
    "text": "like that i have those values in my memory and i'm just going to map them",
    "start": "2404640",
    "end": "2410400"
  },
  {
    "text": "so m underscore monitor held is the first four bytes so it's going to be one m underscore recursion is the next four",
    "start": "2410400",
    "end": "2417280"
  },
  {
    "text": "byte so it's going to be one and if you go back to the output of sing",
    "start": "2417280",
    "end": "2422640"
  },
  {
    "text": "blk you see that you have monitor head and recursion columns and both of them",
    "start": "2422640",
    "end": "2427680"
  },
  {
    "text": "are one so it seems like we are on the on the right track and then m underscore holding thread is",
    "start": "2427680",
    "end": "2434720"
  },
  {
    "text": "the next eight bytes so it's all f and so it's minus one so we have the definite confirmation that the thing",
    "start": "2434720",
    "end": "2441520"
  },
  {
    "text": "block is storing the value minus one which is causing the crash so we still need to figure out how this value ended",
    "start": "2441520",
    "end": "2447839"
  },
  {
    "text": "up in the sync block so fortunately -1 it is a very significant value easy to recognize and",
    "start": "2447839",
    "end": "2455440"
  },
  {
    "text": "so i was able to uh scan the source code of the clr until finding all the places",
    "start": "2455440",
    "end": "2461440"
  },
  {
    "text": "where we are storing minus one in the same block and there is only one",
    "start": "2461440",
    "end": "2466960"
  },
  {
    "start": "2465000",
    "end": "2634000"
  },
  {
    "text": "so it's happening in the object header get sync block function which is called during the promotion for",
    "start": "2466960",
    "end": "2472880"
  },
  {
    "text": "a syn lock to a thing block so basically this is called whenever the runtime tries to store something in the header",
    "start": "2472880",
    "end": "2479359"
  },
  {
    "text": "the header is full and so it tries to move that to a thing block this happens in getting block",
    "start": "2479359",
    "end": "2486079"
  },
  {
    "text": "and so we have the part where we store minus one in piece thread and",
    "start": "2486079",
    "end": "2492000"
  },
  {
    "text": "above we have a very interesting command saying that the lock is orphan which is consistent with what we found so far",
    "start": "2492000",
    "end": "2500319"
  },
  {
    "text": "then if we check where it's coming from we get there if p thread is null and a p",
    "start": "2500319",
    "end": "2505599"
  },
  {
    "text": "thread come from this pc lot thread id dispenser id to thread",
    "start": "2505599",
    "end": "2510800"
  },
  {
    "text": "with validation so that's a mouthful and so uh let's check what it's doing",
    "start": "2510800",
    "end": "2517040"
  },
  {
    "text": "so more c plus plus yay uh i'm not going to explain this one but what you need to know is basically the",
    "start": "2517040",
    "end": "2524400"
  },
  {
    "text": "function is taking an id and it's returning a pointer to a thread and internally it's using some kind of",
    "start": "2524400",
    "end": "2531280"
  },
  {
    "text": "table to get that pointer so why would the runtime need something like that",
    "start": "2531280",
    "end": "2537440"
  },
  {
    "text": "well let's go back to my explanation about thin locks i told you that the runtime is going to",
    "start": "2537440",
    "end": "2543040"
  },
  {
    "text": "store some information about the thread inside of the object header but i never explain what kind of information is",
    "start": "2543040",
    "end": "2549760"
  },
  {
    "text": "going to store well ideally the runtime will need the address of the thread because it needs the address to",
    "start": "2549760",
    "end": "2556960"
  },
  {
    "text": "fetch the thread instance unfortunately the address of this thread is going to be 32 or 64 bits depending",
    "start": "2556960",
    "end": "2563680"
  },
  {
    "text": "on the bitness of your process and we only have 26 bits of usable space",
    "start": "2563680",
    "end": "2568960"
  },
  {
    "text": "in the header so it's just not going to fit instead the runtime is going to store",
    "start": "2568960",
    "end": "2574240"
  },
  {
    "text": "the id of the thread so here you may be thinking how is that helping because we are still trying to solve 32 bits",
    "start": "2574240",
    "end": "2581040"
  },
  {
    "text": "instead of 26 and the trick is that the runtime we try to aggressively reuse the thread ids to",
    "start": "2581040",
    "end": "2588160"
  },
  {
    "text": "keep the maximum under 26 bits so what i mean is as soon as the thread is going to die the next thread that spawns is",
    "start": "2588160",
    "end": "2595119"
  },
  {
    "text": "going to reuse the same id and so to get above that limit",
    "start": "2595119",
    "end": "2600319"
  },
  {
    "text": "you need to spawn more than 67 million thread and given that every thread has a one",
    "start": "2600319",
    "end": "2606400"
  },
  {
    "text": "megabyte of stack uh you're probably going to run out of memory way before getting even near this limit",
    "start": "2606400",
    "end": "2614880"
  },
  {
    "text": "um but the runtime still needs the at the address of the thread not the id and so",
    "start": "2615119",
    "end": "2621280"
  },
  {
    "text": "it's also keeping a table that allows it to associate this id to the address of",
    "start": "2621280",
    "end": "2626560"
  },
  {
    "text": "the of the of the thread and this table is a syn lock strategy dispenser that we've just seen",
    "start": "2626560",
    "end": "2633440"
  },
  {
    "text": "all right so what do we know we know that the access violation is",
    "start": "2633440",
    "end": "2638800"
  },
  {
    "text": "caused by the value -1 stored as a thread address in the thing block",
    "start": "2638800",
    "end": "2644480"
  },
  {
    "text": "we know that this happens when a syn lock is promoted to a sync block but the thread id is missing from the table",
    "start": "2644480",
    "end": "2650319"
  },
  {
    "text": "so in this case the runtime is going to store -1 instead of the address",
    "start": "2650319",
    "end": "2656319"
  },
  {
    "text": "which begs the question in what condition can the thread id be missing from the table",
    "start": "2656319",
    "end": "2662160"
  },
  {
    "text": "we also know that thread ids are aggressively reused to keep the maximum and the maximum id under 26 bits and the way",
    "start": "2662160",
    "end": "2670400"
  },
  {
    "text": "it works is that when a thread is die when the thread is dead and the final",
    "start": "2670400",
    "end": "2676000"
  },
  {
    "text": "finalizer is going to run is going to clear the thread id from the table so that it can be reused by the next uh the",
    "start": "2676000",
    "end": "2683040"
  },
  {
    "text": "next thread and that's how it can be missing from the table and so that will mean that",
    "start": "2683040",
    "end": "2688640"
  },
  {
    "text": "the craft would happen well the value would be missing from the table if the threat died",
    "start": "2688640",
    "end": "2694800"
  },
  {
    "text": "by the point where we tried to fetch its id so i feel like at this point i had",
    "start": "2694800",
    "end": "2701520"
  },
  {
    "text": "a complete enough understanding of the problem to try and write a repro",
    "start": "2701520",
    "end": "2707040"
  },
  {
    "text": "so i switched to visual studio and i wrote this code so basically what i'm doing is i'm",
    "start": "2707040",
    "end": "2713680"
  },
  {
    "text": "creating a bunch of objects nothing special about them it's just new object",
    "start": "2713680",
    "end": "2718880"
  },
  {
    "text": "and then for each of those objects i'm creating a new thread a new thread will try to acquire the lock",
    "start": "2718880",
    "end": "2725280"
  },
  {
    "text": "so at this point the object header is empty so the runtime is going to store the id in the object header and also is",
    "start": "2725280",
    "end": "2732640"
  },
  {
    "text": "going to feed the table that actuates the id to the address of the thread",
    "start": "2732640",
    "end": "2739680"
  },
  {
    "text": "then i let all those threads die and so i will end up with orphan locks",
    "start": "2739680",
    "end": "2745680"
  },
  {
    "text": "and then i force a garbage collection to be sure that the finalizer of the thread is going to run and when it's going to",
    "start": "2745680",
    "end": "2751680"
  },
  {
    "text": "run it's going to clear those ids from the table then i enumerate again on my objects and",
    "start": "2751680",
    "end": "2758480"
  },
  {
    "text": "this time i call get hashcode so runtime is going to generate a random number it's going to try to store that number",
    "start": "2758480",
    "end": "2765119"
  },
  {
    "text": "in the header but the header is full so it's going to get a thing block in the same table",
    "start": "2765119",
    "end": "2770319"
  },
  {
    "text": "store the index of the thing block in in the object header and move the information inside of the",
    "start": "2770319",
    "end": "2777200"
  },
  {
    "text": "sync block and when doing so it's going to reserve the id of the thread and try to get the thread address so that it can",
    "start": "2777200",
    "end": "2783200"
  },
  {
    "text": "store it in the sync block but when doing so it won't be able to find it because it got it got cleared",
    "start": "2783200",
    "end": "2789760"
  },
  {
    "text": "here and so instead it's going to store minus one and so here we have all the conditions",
    "start": "2789760",
    "end": "2795119"
  },
  {
    "text": "for the crash so i just enumerate on my object and like a monitor that is entered which is going to call is",
    "start": "2795119",
    "end": "2801680"
  },
  {
    "text": "lockhead which will uh cause a crashing instruction because we check if p thread",
    "start": "2801680",
    "end": "2806800"
  },
  {
    "text": "is null but we don't check if this thread is equal to minus one so if i run this",
    "start": "2806800",
    "end": "2812400"
  },
  {
    "text": "you will see that it crashes with a fatal execution engineer so i don't see the access violation in there because",
    "start": "2812400",
    "end": "2819040"
  },
  {
    "text": "i'm running with the debugger and changing the error handling a bit but it's exactly the same crash and as a",
    "start": "2819040",
    "end": "2825040"
  },
  {
    "text": "matter of fact i have the same error code so",
    "start": "2825040",
    "end": "2830480"
  },
  {
    "start": "2829000",
    "end": "3019000"
  },
  {
    "text": "we've identified the problem that there are still a few uh unresolved questions and the first one",
    "start": "2830480",
    "end": "2837680"
  },
  {
    "text": "is why is the baseline server not crashing because if you remember my test environment i have two servers running",
    "start": "2837680",
    "end": "2844079"
  },
  {
    "text": "orchard and only only the instrumented server is crashing even though we just figured out",
    "start": "2844079",
    "end": "2850160"
  },
  {
    "text": "that it's a bug in the dot at runtime and the trick is that our child use a",
    "start": "2850160",
    "end": "2855599"
  },
  {
    "text": "finite set of lock as part of its cache mechanism so what i mean is the lock are used for",
    "start": "2855599",
    "end": "2863119"
  },
  {
    "text": "caching the output when you try to load a page and since we use",
    "start": "2863119",
    "end": "2868160"
  },
  {
    "text": "automatic traffic we always load the same page and so it's always the same lock that is going to be used",
    "start": "2868160",
    "end": "2875920"
  },
  {
    "text": "and the crash only happens if a north end thin lock is promoted after the",
    "start": "2875920",
    "end": "2881760"
  },
  {
    "text": "balance thread was collected this is a very precise set of conditions and it's especially unlikely to happen",
    "start": "2881760",
    "end": "2889119"
  },
  {
    "text": "in asp.net application because it's going to use a thread pull so the thread is unlikely to die",
    "start": "2889119",
    "end": "2895040"
  },
  {
    "text": "and the thing is uh if all the locks got promoted without those",
    "start": "2895040",
    "end": "2900319"
  },
  {
    "text": "conditions being filled then the crash cannot occur anymore so basically when you start the application uh",
    "start": "2900319",
    "end": "2907440"
  },
  {
    "text": "it's going to use syn locks then they are getting going to get promoted so here you have a window of opportunity",
    "start": "2907440",
    "end": "2913119"
  },
  {
    "text": "for the crash and then if it didn't crash you can let your application run for days and it's not going to crash",
    "start": "2913119",
    "end": "2918720"
  },
  {
    "text": "anymore and the thing is the thing is the instrumented server is",
    "start": "2918720",
    "end": "2924319"
  },
  {
    "text": "redeployed every time we do a charge in our codebase which is multiple times per day whereas the baseline server is never",
    "start": "2924319",
    "end": "2931119"
  },
  {
    "text": "restarted because we never need to restart it and that's the only reason why the crash was only occurring on the",
    "start": "2931119",
    "end": "2936880"
  },
  {
    "text": "instrumented server there's another question what has started the incident",
    "start": "2936880",
    "end": "2943920"
  },
  {
    "text": "this is a bug that has been in the dot net runtime for uh as long as i could find",
    "start": "2943920",
    "end": "2949599"
  },
  {
    "text": "uh and in fact it's still in the dot at runtime today so what did it start crashing someday",
    "start": "2949599",
    "end": "2957119"
  },
  {
    "text": "well this time it's our fault i'm saying that we run our chart but we",
    "start": "2957119",
    "end": "2962640"
  },
  {
    "text": "are not exactly running it basically we modify it to add some workload",
    "start": "2962640",
    "end": "2968880"
  },
  {
    "text": "just to better test our instrumentation and since this is uh asynchronous workload we",
    "start": "2968880",
    "end": "2975200"
  },
  {
    "text": "changed to use an asynchronous controller because by default our child uses synchronous controller",
    "start": "2975200",
    "end": "2981200"
  },
  {
    "text": "and if you remember we end up with often luck which is one of the conditions for the",
    "start": "2981200",
    "end": "2986720"
  },
  {
    "text": "crash if those two events are raised on separate threads and it's an implementation detail but",
    "start": "2986720",
    "end": "2993280"
  },
  {
    "text": "when you use a synchronous mvc controller those two events are always going to be raised on the same thread uh",
    "start": "2993280",
    "end": "2999920"
  },
  {
    "text": "simply because since there is no asynchronous operation then asp.net has no reason to switch the thread and",
    "start": "2999920",
    "end": "3006400"
  },
  {
    "text": "that's that's the reason why this bug has never been fought instead of orchard and it's us by switching to an",
    "start": "3006400",
    "end": "3013200"
  },
  {
    "text": "asynchronous controller that created the condition for the crash",
    "start": "3013200",
    "end": "3018480"
  },
  {
    "start": "3019000",
    "end": "3362000"
  },
  {
    "text": "all right so to wrap it up the more complex investigation the more",
    "start": "3019280",
    "end": "3024800"
  },
  {
    "text": "important it is to verify every theory or assumption so uh if you've seen the",
    "start": "3024800",
    "end": "3030160"
  },
  {
    "text": "the way i proceeded i try to break down the big problem into a smaller problem",
    "start": "3030160",
    "end": "3035359"
  },
  {
    "text": "and then every time i spend all the necessary time to verify the assumption i was making and by doing so",
    "start": "3035359",
    "end": "3042800"
  },
  {
    "text": "you make sure that you are little by little making progress because",
    "start": "3042800",
    "end": "3048319"
  },
  {
    "text": "uh if you try to uh resonate about the whole thing uh by",
    "start": "3048319",
    "end": "3054640"
  },
  {
    "text": "basing yourself on a fake assumption first assumption sorry uh then you're going to get lost",
    "start": "3054640",
    "end": "3061359"
  },
  {
    "text": "eventually because your reasoning is not going to work and you're not you will not be able to understand",
    "start": "3061359",
    "end": "3067520"
  },
  {
    "text": "where you did something wrong so it's very important to verify everything at every step on the way",
    "start": "3067520",
    "end": "3075280"
  },
  {
    "text": "also take the time to refresh your knowledge on the affected area that will be that will allow you to make better",
    "start": "3075599",
    "end": "3082000"
  },
  {
    "text": "theories about what is happening so in this case uh when i uh started suspecting that it has something",
    "start": "3082000",
    "end": "3088800"
  },
  {
    "text": "to do with a monitor uh i took a break i checked books i checked articles online until i had a",
    "start": "3088800",
    "end": "3095760"
  },
  {
    "text": "clear grasp of how monitors work in dotnet and it really helped me to make",
    "start": "3095760",
    "end": "3101839"
  },
  {
    "text": "better theories about what is happening and the last piece of advice is don't give up",
    "start": "3101839",
    "end": "3108240"
  },
  {
    "text": "raymond chen which is the author of the all-new thing blog says that uh debugging is an exercise in optimism and",
    "start": "3108240",
    "end": "3115520"
  },
  {
    "text": "as i agree 100 with that you're going to be wrong a lot",
    "start": "3115520",
    "end": "3120640"
  },
  {
    "text": "of times and uh it's part of the process so it's okay and every time you are wrong you are going to learn something",
    "start": "3120640",
    "end": "3127200"
  },
  {
    "text": "new about your problem and uh if you don't give up eventually you should be",
    "start": "3127200",
    "end": "3132319"
  },
  {
    "text": "able to get to the bottom of it if you like it there are more",
    "start": "3132319",
    "end": "3137760"
  },
  {
    "text": "investigations on my blog so uh make sure to check it and uh feel free to ping me on twitter",
    "start": "3137760",
    "end": "3144079"
  },
  {
    "text": "if you want so uh that's it and uh i think we we",
    "start": "3144079",
    "end": "3149280"
  },
  {
    "text": "still have plenty of time if you if you have questions about this",
    "start": "3149280",
    "end": "3154839"
  },
  {
    "text": "well no question about after showing that much assembly girl i don't know if that's a good sign",
    "start": "3166160",
    "end": "3172640"
  },
  {
    "text": "yes",
    "start": "3173760",
    "end": "3176760"
  },
  {
    "text": "ah sorry can you can you speak louder because i can't hear you",
    "start": "3187040",
    "end": "3193240"
  },
  {
    "text": "uh well this is really good uh so you use exactly the same kind of tour",
    "start": "3199119",
    "end": "3204480"
  },
  {
    "text": "uh of course a release code is going to be harder to read but most of the times",
    "start": "3204480",
    "end": "3210720"
  },
  {
    "text": "your crash dump is about to be released because well usually when you use a",
    "start": "3210720",
    "end": "3215760"
  },
  {
    "text": "crash jump it means that the crash is occurring in production otherwise you would just directly attach",
    "start": "3215760",
    "end": "3221359"
  },
  {
    "text": "the debugger and so uh yeah most of the time it's going to be released on and it's fine if",
    "start": "3221359",
    "end": "3227359"
  },
  {
    "text": "you have symbols it's going to help you a lot if you don't have symbols good luck but",
    "start": "3227359",
    "end": "3233200"
  },
  {
    "text": "the information is still there somewhere",
    "start": "3233200",
    "end": "3237400"
  },
  {
    "text": "i think there was another question yes",
    "start": "3238400",
    "end": "3243760"
  },
  {
    "text": "or it is going to be tricky i'm not hearing anything",
    "start": "3243760",
    "end": "3249040"
  },
  {
    "text": "oh so the question is how long i spent on this uh i think about three days",
    "start": "3249359",
    "end": "3254880"
  },
  {
    "text": "uh yeah that was three days investigation",
    "start": "3254880",
    "end": "3259559"
  },
  {
    "text": "i don't know uh probably when i stopped getting lazy and fix it uh i already opened the pr on github",
    "start": "3265200",
    "end": "3272720"
  },
  {
    "text": "where i explained everything about the problem i just need somebody to pick up pick it up",
    "start": "3272720",
    "end": "3278720"
  },
  {
    "text": "we have two problems with this with this uh the first problem is that it's uh",
    "start": "3278720",
    "end": "3284559"
  },
  {
    "text": "it's very hard to understand why the runtime is doing that uh there is i mean",
    "start": "3284559",
    "end": "3289599"
  },
  {
    "text": "i think it's at least as hard as net four and it's probably even harder than that",
    "start": "3289599",
    "end": "3294960"
  },
  {
    "text": "uh it's hard to know why at some point somebody decided to store minus one",
    "start": "3294960",
    "end": "3300000"
  },
  {
    "text": "rather than null for the for the thread and we see the command the lock has been",
    "start": "3300000",
    "end": "3305760"
  },
  {
    "text": "orphaned so it was a conscious decision and the other thing is that this bug is incredibly unlikely to happen because",
    "start": "3305760",
    "end": "3313680"
  },
  {
    "text": "well imagine that is going to happen to you you're going to think about what is wrong in my application you will see",
    "start": "3313680",
    "end": "3319280"
  },
  {
    "text": "that you have our fan locks so you're going to fix that because nobody live off unlocks in their application and",
    "start": "3319280",
    "end": "3324640"
  },
  {
    "text": "then the program is gone so you're not going to think about it anymore so uh so yeah it's very likely to say",
    "start": "3324640",
    "end": "3331040"
  },
  {
    "text": "that stay there for a while",
    "start": "3331040",
    "end": "3335319"
  },
  {
    "text": "so yeah in your example you create when you reproduce",
    "start": "3337839",
    "end": "3344920"
  },
  {
    "text": "okay uh so the reason i so the question is why in my repro i created 16 objects",
    "start": "3347680",
    "end": "3353520"
  },
  {
    "text": "instead of just one uh and that's because uh well i did not explain the details about uh the",
    "start": "3353520",
    "end": "3361760"
  },
  {
    "text": "going back back back back about the id uh to thread with validation uh but",
    "start": "3361760",
    "end": "3367040"
  },
  {
    "text": "basically i took some shortcuts in my explanation and uh the crash is only going to happen if uh we made that um",
    "start": "3367040",
    "end": "3376799"
  },
  {
    "text": "so basically uh he's going he's going to use a table uh that table has some uh i don't",
    "start": "3376799",
    "end": "3383760"
  },
  {
    "text": "remember what it's called but basically it's a linked list and it's going to store a links",
    "start": "3383760",
    "end": "3389680"
  },
  {
    "text": "it's going to store a free list to know how to reuse the node and there is an implementation details",
    "start": "3389680",
    "end": "3395440"
  },
  {
    "text": "that make that you're going to have this problem only if",
    "start": "3395440",
    "end": "3400720"
  },
  {
    "text": "you meet this if id uh so there is this if id",
    "start": "3400720",
    "end": "3406240"
  },
  {
    "text": "infer or equal of is heidi and you're going to have null only if it's bigger",
    "start": "3406240",
    "end": "3412000"
  },
  {
    "text": "and uh basically because there is some precise condition inside of it by creating 16 objects i make sure that",
    "start": "3412000",
    "end": "3417440"
  },
  {
    "text": "it's going to happen because if i have only one object it's actually going to reuse an old",
    "start": "3417440",
    "end": "3424160"
  },
  {
    "text": "so that's actually interesting because there is another bug in there that i i didn't try to explore",
    "start": "3424160",
    "end": "3429680"
  },
  {
    "text": "but basically if the id is lower it's going to fetch an old node uh",
    "start": "3429680",
    "end": "3437920"
  },
  {
    "text": "of the linked list instead of returning null which means that it's going to return the address of a different thread",
    "start": "3437920",
    "end": "3444559"
  },
  {
    "text": "and so it means that for your orphan lock it may actually get the address of a different thread and",
    "start": "3444559",
    "end": "3450240"
  },
  {
    "text": "i'm not sure what the consequence would be but in that case it won't",
    "start": "3450240",
    "end": "3456880"
  },
  {
    "text": "crash so i think that's it so uh thank you everybody and any case i will be around if you want to",
    "start": "3458839",
    "end": "3464880"
  },
  {
    "text": "to discuss",
    "start": "3464880",
    "end": "3468039"
  },
  {
    "text": "you",
    "start": "3479599",
    "end": "3481680"
  }
]