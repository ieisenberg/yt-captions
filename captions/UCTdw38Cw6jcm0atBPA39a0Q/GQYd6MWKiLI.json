[
  {
    "text": "okay welcome everybody thanks so much for joining me today uh close the door behind you please as you're coming in my",
    "start": "5759",
    "end": "12080"
  },
  {
    "text": "name is Brandon mck and in this session we're talking about correcting common async AWA mistakes specifically inet 8",
    "start": "12080",
    "end": "19920"
  },
  {
    "text": "now we're going to move fast there's a lot of material we have to cover uh ASN aait came out in C 5 and now we're on C",
    "start": "19920",
    "end": "27840"
  },
  {
    "text": "12 so there's been a lot of goodies added so don't worry about trying to take notes don't worry about trying to keep up because I've actually taken all",
    "start": "27840",
    "end": "34320"
  },
  {
    "text": "the notes and given all the things for you right here on this website so if you get a chance take out your camera or",
    "start": "34320",
    "end": "40280"
  },
  {
    "text": "take a picture of this slide you can use this QR code to go to Cod traveler. asyn weight best practices this is where you",
    "start": "40280",
    "end": "46600"
  },
  {
    "text": "can find these slides this is where you can find a recording of this talk this is where you can find uh the open source",
    "start": "46600",
    "end": "52199"
  },
  {
    "text": "code for all the demos we're going to do today so relax soak it all in like I",
    "start": "52199",
    "end": "57600"
  },
  {
    "text": "said we're going to be moving quickly and if you do have any more questions I'll be around all week and you can",
    "start": "57600",
    "end": "62760"
  },
  {
    "text": "always find me on Twitter my handle is the code traveler so feel free to reach out if you have any more",
    "start": "62760",
    "end": "68080"
  },
  {
    "text": "questions okay well let's start by looking at this async task method this is a method called get libraries it's",
    "start": "68080",
    "end": "74400"
  },
  {
    "text": "going to call HTTP client. getet async hit this API return a response ensure we",
    "start": "74400",
    "end": "80040"
  },
  {
    "text": "got a good status code then we're going to read that response get the content deserialize it and return the list of",
    "start": "80040",
    "end": "87840"
  },
  {
    "text": "libraries now what's really going on on here is let's say thread one kicks off",
    "start": "87840",
    "end": "93159"
  },
  {
    "text": "this method so thread one comes in thread one initializes this variable",
    "start": "93159",
    "end": "98200"
  },
  {
    "text": "response and then as soon as thread one hits that await keyword it returns and a",
    "start": "98200",
    "end": "103840"
  },
  {
    "text": "background thread comes in in this case we'll say thread 2 but it could be any free thread in the thread pool will run",
    "start": "103840",
    "end": "109920"
  },
  {
    "text": "HTP client. getet async and this is good because thread one is a very very",
    "start": "109920",
    "end": "115200"
  },
  {
    "text": "important thread it's also known as the UI thread it's also known as the main thread thread one is the only thread",
    "start": "115200",
    "end": "121119"
  },
  {
    "text": "that can redraw our UI it's the only thread that can respond to a user when they Tap a button on our app thread one",
    "start": "121119",
    "end": "127360"
  },
  {
    "text": "is responds that button click if they scroll on a list it's thread one that's redrawn the UI so we don't want to",
    "start": "127360",
    "end": "132400"
  },
  {
    "text": "overuse thread one and we definitely don't want thread one making any API calls that take a couple seconds because",
    "start": "132400",
    "end": "138920"
  },
  {
    "text": "if thread one does that essentially means our app is Frozen for a couple seconds so it's a good way to get a",
    "start": "138920",
    "end": "144360"
  },
  {
    "text": "onestar review get a you have to use your force quit your app and tweet about how much they hate you on Twitter so",
    "start": "144360",
    "end": "149440"
  },
  {
    "text": "with the keyword we're running this on a background thread meanwhile thread one is free to interact with the user",
    "start": "149440",
    "end": "155000"
  },
  {
    "text": "respond to the UI button clicks all that fun stuff so when thread 2 is done it",
    "start": "155000",
    "end": "160040"
  },
  {
    "text": "calls back out to thread one and says hey thread one I'm all done you're back up so thread one jumps back in thread",
    "start": "160040",
    "end": "165519"
  },
  {
    "text": "one runs response. insur status code and initializes the variable",
    "start": "165519",
    "end": "172080"
  },
  {
    "text": "stream and then we hit the await keyword again so what happens well we grab another background thread whatever",
    "start": "172080",
    "end": "177280"
  },
  {
    "text": "thread is free in the thread pool we'll come in and run run read as stream async and likewise with last time when thread",
    "start": "177280",
    "end": "183640"
  },
  {
    "text": "five is done here it's going to call back to thread one and thread one's going to jump back in again it's going to initialize this variable for",
    "start": "183640",
    "end": "189000"
  },
  {
    "text": "libraries and then we hit the weight keyword again so background thread will'll deserialize give us our list of",
    "start": "189000",
    "end": "195080"
  },
  {
    "text": "tasks and then finally thread one jumps back in for our last time to return the result so to understand what's really",
    "start": "195080",
    "end": "202200"
  },
  {
    "text": "going on here uh it helps a look at the compiler generated code so I have up",
    "start": "202200",
    "end": "207480"
  },
  {
    "text": "here on my screen we've gone to a website called sharp. if you've never heard of sharp laab this is a really really cool",
    "start": "207480",
    "end": "213680"
  },
  {
    "text": "website where you can see what the compiler is actually doing with your code uh in fact it's so good that the",
    "start": "213680",
    "end": "220000"
  },
  {
    "text": "net team at Microsoft actually uses this because we can see here that it has all",
    "start": "220000",
    "end": "225319"
  },
  {
    "text": "the different branches of the Rosen repo different platforms so literally the C",
    "start": "225319",
    "end": "230400"
  },
  {
    "text": "team when they're implementing new features for us they'll come in here to try them out so highly recommend sharp.",
    "start": "230400",
    "end": "235959"
  },
  {
    "text": "if you haven't used it before but what we have here on the left is that same code so this is our our get libraries",
    "start": "235959",
    "end": "242040"
  },
  {
    "text": "method and on the right this is what the compiler has generated so if you don't",
    "start": "242040",
    "end": "247879"
  },
  {
    "text": "know the way the compiler works when you first click compile it does what's called lowering so it takes the code we",
    "start": "247879",
    "end": "253760"
  },
  {
    "text": "write and turns it back into something that the compiler can understand because if you think about it the compiler's got",
    "start": "253760",
    "end": "259840"
  },
  {
    "text": "a support all the way back to c 1 and when c 1 was invented async of weight didn't exist like heck multi-threading",
    "start": "259840",
    "end": "266560"
  },
  {
    "text": "thread pools wasn't even really a thing uh even things like we get like VAR that gets lowered back into the type so it",
    "start": "266560",
    "end": "273120"
  },
  {
    "text": "can go through the compiler in a way it understands and what happens here with our async task",
    "start": "273120",
    "end": "279120"
  },
  {
    "text": "method is we see that the compiler has created a private struct that inherits",
    "start": "279120",
    "end": "285440"
  },
  {
    "text": "from iyn State I async State machine now quick fun fact we're looking at the comp",
    "start": "285440",
    "end": "291440"
  },
  {
    "text": "the code as if it was in compiled for release mode if you're when you're in debug mode it looks a little different",
    "start": "291440",
    "end": "296600"
  },
  {
    "text": "it'll be it'll be a class but when we're compiling for release the compiler goes",
    "start": "296600",
    "end": "301880"
  },
  {
    "text": "goes ahead and optimizes a little bit for us so so right so we get a private struct and you know right away that's a",
    "start": "301880",
    "end": "307199"
  },
  {
    "text": "little weird right because I just wrote a method but now the compiler generated code is this struct that inherits from",
    "start": "307199",
    "end": "313080"
  },
  {
    "text": "IAS sync State machine uh it's got all these funny names in it like angle bracket get libraries",
    "start": "313080",
    "end": "318720"
  },
  {
    "text": "dore2 and this if you squint and look closely this this is the name of my",
    "start": "318720",
    "end": "324000"
  },
  {
    "text": "method this is my git libraries method but what the compiler does because it's generating this class and it doesn't want to a naming conflict with any other",
    "start": "324000",
    "end": "331080"
  },
  {
    "text": "classes or structs that already exist in our class that adds these angle brackets which is a cool way to cheat because we",
    "start": "331080",
    "end": "336400"
  },
  {
    "text": "can't do that like we can't add an angle bracket in our code we'll get all sorts of weird errors for our class names and",
    "start": "336400",
    "end": "341800"
  },
  {
    "text": "the compiler knows that so it does it writes some illegal code that it knows we'll never be able to write that way we don't have any overlap with its compiler",
    "start": "341800",
    "end": "348560"
  },
  {
    "text": "generated code but let's take a look at what's going on here so inside this",
    "start": "348560",
    "end": "353880"
  },
  {
    "text": "method or inside this struct is a method called move next and right away this is",
    "start": "353880",
    "end": "359759"
  },
  {
    "text": "is something that perplexed me when I first started using asyn um I've been making IOS and Android apps in C using",
    "start": "359759",
    "end": "366759"
  },
  {
    "text": "zamarin and net Maui for about eight years now and I'll never forget when I first put first published my app to the",
    "start": "366759",
    "end": "372960"
  },
  {
    "text": "App Store uh I kept seeing these weird stack traces I'd get back these crash reports and Bug reports from the app and",
    "start": "372960",
    "end": "379199"
  },
  {
    "text": "move next would be everywhere and I was like what is this because I never wrote a method called move next uh turns out",
    "start": "379199",
    "end": "385280"
  },
  {
    "text": "the whole time it was just the compiler generating it for me but what move next is is it's essentially a giant State",
    "start": "385280",
    "end": "391520"
  },
  {
    "text": "machine or more explicitly or more specifically uh it's a giant switch",
    "start": "391520",
    "end": "396639"
  },
  {
    "text": "statement and inside of this switch statement the compiler adds a case every",
    "start": "396639",
    "end": "402000"
  },
  {
    "text": "time we use the awake keyword so in this example we're using the awake keyword three times and you can see that the",
    "start": "402000",
    "end": "408240"
  },
  {
    "text": "compiler generated case Zero case one and case two for us and there's also this default case",
    "start": "408240",
    "end": "415800"
  },
  {
    "text": "here which every every time this gets generated it'll always have at the default case and then every time we add",
    "start": "415800",
    "end": "421720"
  },
  {
    "text": "the a keyword in our method the compiler adds another case and if we look at what's going on here this is actually",
    "start": "421720",
    "end": "427840"
  },
  {
    "text": "just our code and again it looks a little silly um like there's these angle brackets but we see we're just calling",
    "start": "427840",
    "end": "433960"
  },
  {
    "text": "get async um when we first enter this and so so the first time move next is",
    "start": "433960",
    "end": "439639"
  },
  {
    "text": "called it looks at this variable called num and num is just whatever the current",
    "start": "439639",
    "end": "444720"
  },
  {
    "text": "state is and the current state the first time this runs will always be negative 1 and since there is no cas case of",
    "start": "444720",
    "end": "449879"
  },
  {
    "text": "negative one we jump into the default case and that's where we call get async now what the compiler does or the code",
    "start": "449879",
    "end": "456840"
  },
  {
    "text": "the compiler writs we'll first look to see did that task Complete because you know sometimes we write methods that are",
    "start": "456840",
    "end": "463280"
  },
  {
    "text": "asnc task but we return task. completed and it's pretty cool because the compiler is smart enough to know hey if",
    "start": "463280",
    "end": "469479"
  },
  {
    "text": "that task is completed we don't need to switch threads we don't need to do that it's expensive we don't want to do it",
    "start": "469479",
    "end": "475199"
  },
  {
    "text": "and so the first thing it'll do it'll say is that completed because if so we can just move on but we know in our",
    "start": "475199",
    "end": "481000"
  },
  {
    "text": "example we're calling an API it's going to have to reach out this is going to take a couple hundred milliseconds if not a couple seconds so it's not",
    "start": "481000",
    "end": "486440"
  },
  {
    "text": "completed yet which means we enter here where it updates the state to zero and",
    "start": "486440",
    "end": "493599"
  },
  {
    "text": "returns and this return is how thread one is now free to return and interact with the user but again before it left",
    "start": "493599",
    "end": "501319"
  },
  {
    "text": "it said it set the state to zero so as get async is now running out of",
    "start": "501319",
    "end": "506680"
  },
  {
    "text": "background thread once it finishes and it shouts back and says hey I'm all done",
    "start": "506680",
    "end": "511879"
  },
  {
    "text": "and thread one jumps back in again it sets this value of numb to",
    "start": "511879",
    "end": "517200"
  },
  {
    "text": "the current state jumps into the switch and now we're in state zero so this is",
    "start": "517200",
    "end": "522399"
  },
  {
    "text": "how thread one knows where to pick up where it left off and in this case it's",
    "start": "522399",
    "end": "527880"
  },
  {
    "text": "a little strange because the compiler is using go-to statements and we probably don't and probably shouldn't use go-to",
    "start": "527880",
    "end": "533880"
  },
  {
    "text": "statements in our code um but all this is saying is to jump to this line il0 7e",
    "start": "533880",
    "end": "540720"
  },
  {
    "text": "which is down here and in case one we can see our code again where we're calling uh we're get well first we're",
    "start": "540720",
    "end": "546480"
  },
  {
    "text": "getting the result setting that variable result to the get result value and then",
    "start": "546480",
    "end": "552680"
  },
  {
    "text": "ensuring we have a a success status code and then again just like last time it",
    "start": "552680",
    "end": "557720"
  },
  {
    "text": "kicks off read as stream async and just like we expect it first sees or",
    "start": "557720",
    "end": "565240"
  },
  {
    "text": "first checks to see is that already completed if not okay I'm going to go return thread one I'm going to go hang",
    "start": "565240",
    "end": "570320"
  },
  {
    "text": "out with the user so that uh our app doesn't freeze and so and so this goes",
    "start": "570320",
    "end": "576000"
  },
  {
    "text": "back and forth and this is how um the C team was able to design for us async a",
    "start": "576000",
    "end": "582079"
  },
  {
    "text": "weight so like we get this pretty syntax here in our code where it just says we have this async keyword we have this awake keyword it's very readable uh we",
    "start": "582079",
    "end": "589640"
  },
  {
    "text": "can read it top to bottom left or right but if you think about it this didn't exist when C was first created so super",
    "start": "589640",
    "end": "596399"
  },
  {
    "text": "super smart people on the Microsoft runtime team were able to figure figure out a way to take an existing language",
    "start": "596399",
    "end": "601600"
  },
  {
    "text": "an existing runtime and create this state machine for us while us as the developers consuming it we get to use",
    "start": "601600",
    "end": "607800"
  },
  {
    "text": "this really cool syntax so so that's how it's working under the hood but what I want to highlight for you is this try",
    "start": "607800",
    "end": "614880"
  },
  {
    "text": "catch block here and if you look this TR catch block consumes the entire code so",
    "start": "614880",
    "end": "623160"
  },
  {
    "text": "this Tri catch block again I didn't write this I don't have a tri catch Block in my code but this Tri catch",
    "start": "623160",
    "end": "629079"
  },
  {
    "text": "block takes all of the code from our acing task method and puts it inside of",
    "start": "629079",
    "end": "634160"
  },
  {
    "text": "a tri catch block which means if any of my code throws an exception it gets",
    "start": "634160",
    "end": "640079"
  },
  {
    "text": "caught right here it gets caught in this exception Handler and this is okay because as long as you",
    "start": "640079",
    "end": "647480"
  },
  {
    "text": "use the awake keyword this exception gets rethrown but when I was first",
    "start": "647480",
    "end": "652600"
  },
  {
    "text": "learning asyn and waight I thought I knew what I was doing and I would do things like ah well I want to run this code on a background thread so I would",
    "start": "652600",
    "end": "658959"
  },
  {
    "text": "say task. run i' put a bunch of code in it and I'm like I don't need to await it because I don't care when it finishes",
    "start": "658959",
    "end": "665120"
  },
  {
    "text": "and that is actually what led to all those bugs in my first app because what I didn't realize was sometimes my code",
    "start": "665120",
    "end": "672240"
  },
  {
    "text": "was thrown an exception you know I'm a mobile developer as mobile developers we know we can't trust your internet",
    "start": "672240",
    "end": "677399"
  },
  {
    "text": "connection on your phone because it's going to switch between Wi-Fi and cellular and different towers and maybe",
    "start": "677399",
    "end": "682519"
  },
  {
    "text": "you're on a bus and you lose your Wi-Fi all together so uh sometimes my code was failing but it was inside a test run",
    "start": "682519",
    "end": "690320"
  },
  {
    "text": "that was swallowing up the exception and because I wasn't awaiting test. run I never saw that exception and you might",
    "start": "690320",
    "end": "697480"
  },
  {
    "text": "think to yourself hey that's great I hate exceptions they crash my app I love this but in in reality exceptions are",
    "start": "697480",
    "end": "704040"
  },
  {
    "text": "good we want those exceptions to be thrown because if we get a timeout exception if we get an HTTP exception we",
    "start": "704040",
    "end": "710440"
  },
  {
    "text": "want to be able to handle that gracefully because different scenarios are going to pop up and we need to be able to tell our app what to do when",
    "start": "710440",
    "end": "716360"
  },
  {
    "text": "things fail whereas what was happening in my app was it was just failing and then the rest of my code kept going as",
    "start": "716360",
    "end": "722440"
  },
  {
    "text": "if everything was cool so weird weird things were happening and it was all because I didn't know about move next",
    "start": "722440",
    "end": "728279"
  },
  {
    "text": "and how this worked with this Tri catch block",
    "start": "728279",
    "end": "732959"
  },
  {
    "text": "so so let's do a quick review here the the async keyword adds about 80 bytes",
    "start": "733680",
    "end": "740079"
  },
  {
    "text": "and that's because every time and we compile our async code that async method becomes a struct when in release and if",
    "start": "740079",
    "end": "747160"
  },
  {
    "text": "it's in debug mode then that's still a CL so that the debugger can uh better handle it struct is a little bit more",
    "start": "747160",
    "end": "753560"
  },
  {
    "text": "performant which is why it does that in release mode and this is actually a fun Improvement in net 8 this used to be",
    "start": "753560",
    "end": "759639"
  },
  {
    "text": "about 96 bytes I think and in net 8 they made some optimizations squeezed it down",
    "start": "759639",
    "end": "764800"
  },
  {
    "text": "to 80 bytes but we're talking 80 bytes this really isn't much nowadays like even as a mobile developer who has a",
    "start": "764800",
    "end": "771880"
  },
  {
    "text": "limited amount of ram to work with I don't really care if my app size increases by 80 bytes probably most of",
    "start": "771880",
    "end": "777279"
  },
  {
    "text": "you don't either but fun fact to know about because maybe one day you'll be working on an embedded system or an iot",
    "start": "777279",
    "end": "782760"
  },
  {
    "text": "device and you don't want to increase your app size and now we know that the",
    "start": "782760",
    "end": "788079"
  },
  {
    "text": "asent keyword increased our app size by about 80 bytes every time and we want to",
    "start": "788079",
    "end": "793199"
  },
  {
    "text": "await every task and again this is because non awaited tasks hide exceptions again it's might sound like a",
    "start": "793199",
    "end": "800079"
  },
  {
    "text": "good thing but it's a bad thing we want those exceptions to be rethrown we want to be able to handle them gracefully we want to be able to tell our app hey",
    "start": "800079",
    "end": "805920"
  },
  {
    "text": "something went wrong maybe display to the user error internet connection could not be established something like that",
    "start": "805920",
    "end": "812279"
  },
  {
    "text": "whereas if we don't await the task that exception gets swallowed up forever okay so now that we're basically",
    "start": "812279",
    "end": "819480"
  },
  {
    "text": "async await experts let's jump into some code I have and fix it so uh this is an",
    "start": "819480",
    "end": "825920"
  },
  {
    "text": "app that I've created uh called Hacker News that uh just if you never heard of Hacker News it's a website where you can",
    "start": "825920",
    "end": "831600"
  },
  {
    "text": "go and find kind of the latest text stories and I made this app that just goes out to The Hacker News API fetches",
    "start": "831600",
    "end": "837759"
  },
  {
    "text": "all the top stories so when you do pull a refresh it goes gets all the top stories and then you can tap on any of",
    "start": "837759",
    "end": "844000"
  },
  {
    "text": "these to see or to read the story so this is the code we're going to be fixing today and like I said earlier",
    "start": "844000",
    "end": "850480"
  },
  {
    "text": "don't worry about memorizing anything because right now we're working on this class called news view model bad asyn O8",
    "start": "850480",
    "end": "859399"
  },
  {
    "text": "practices but all the things we're going to fix are already fixed inside of good asyn weight practices so when you come",
    "start": "859399",
    "end": "865320"
  },
  {
    "text": "back later you can just compare them side by side and you don't have to remember everything we did step by step",
    "start": "865320",
    "end": "870759"
  },
  {
    "text": "but we got a lot of things to refactor in here we got a lot of things to fix so let's jump into it now this first",
    "start": "870759",
    "end": "877639"
  },
  {
    "text": "refactor uh I'm getting yelled at because I'm calling an async task method here in my Constructor and it's yelling",
    "start": "877639",
    "end": "884639"
  },
  {
    "text": "at me because I'm not awaiting the call and you know this this this warning",
    "start": "884639",
    "end": "890639"
  },
  {
    "text": "isn't wrong it says you know you should use the await keyword but it doesn't say anything about the fact that it's going",
    "start": "890639",
    "end": "896160"
  },
  {
    "text": "to swallow up exceptions I wish it would actually I I used to work at Microsoft and tried really hard to get the net",
    "start": "896160",
    "end": "901440"
  },
  {
    "text": "team to add that in because I was like people don't know about this we need to add it in the warning um but it's also",
    "start": "901440",
    "end": "907680"
  },
  {
    "text": "correct in saying that the the execution will continue to the next line while that method's running in the background",
    "start": "907680",
    "end": "912720"
  },
  {
    "text": "but but anyways yeah we're here in the Constructor we have an async task method and I literally just said we need to",
    "start": "912720",
    "end": "918000"
  },
  {
    "text": "await every task so how do we do that right I mean if we put await here when",
    "start": "918000",
    "end": "923279"
  },
  {
    "text": "we add async here we're just going to get red squiggles because the Constructor can't do async await and it",
    "start": "923279",
    "end": "929360"
  },
  {
    "text": "shouldn't Constructors are just there to initialize our app it's to maybe assign a couple variables and then place all",
    "start": "929360",
    "end": "936639"
  },
  {
    "text": "this code into memory so Constructors shouldn't be doing any async a weight which is why they don't allow us to do",
    "start": "936639",
    "end": "942000"
  },
  {
    "text": "async a weight so that's nice that means they they don't allow us to kind of shoot ourselves in the foot there but if",
    "start": "942000",
    "end": "947839"
  },
  {
    "text": "we can't do async a we here what are our options well one option is I could",
    "start": "947839",
    "end": "954920"
  },
  {
    "text": "create another method called refresh and then and I can call this",
    "start": "954920",
    "end": "962079"
  },
  {
    "text": "code inside of it where I can await it and then back here in the",
    "start": "962079",
    "end": "968279"
  },
  {
    "text": "Constructor we'll just call that method now I can I can feel some tension",
    "start": "968279",
    "end": "973639"
  },
  {
    "text": "in the room because I just wrote an async void method and what does every teacher tell you never use async void",
    "start": "973639",
    "end": "981519"
  },
  {
    "text": "and that's not bad advice uh my my advice is actually avoid async void um",
    "start": "981519",
    "end": "987240"
  },
  {
    "text": "but the problem I have when folks tell you never use async void is they never tell you why so so why is this bad why",
    "start": "987240",
    "end": "994120"
  },
  {
    "text": "is this dangerous well first things first let's look at let's add a little",
    "start": "994120",
    "end": "999680"
  },
  {
    "text": "bit of code here so just to show you refresh this is the method that runs when the user does a pull to refresh and",
    "start": "999680",
    "end": "1005680"
  },
  {
    "text": "it's going to go get the top stories it's going to add them to our top Story collection and so if we add some code",
    "start": "1005680",
    "end": "1011560"
  },
  {
    "text": "here that says maybe top story collection. clear and top story collection. add and so you know now",
    "start": "1011560",
    "end": "1018560"
  },
  {
    "text": "we're working with um the top Story collection here in the Constructor but",
    "start": "1018560",
    "end": "1023959"
  },
  {
    "text": "let's think about what's happening cuz let's say thread one initializes this Constructor so thread one comes in it",
    "start": "1023959",
    "end": "1030678"
  },
  {
    "text": "hits this refresh meth method so thread one comes into here but then it hits the awake keyword so thread one returns and",
    "start": "1030679",
    "end": "1036959"
  },
  {
    "text": "that means thread one moves on to this line of code here meanwhile this refresh",
    "start": "1036959",
    "end": "1042480"
  },
  {
    "text": "method is still running in the background so what we just introduced is a race condition and these are fun",
    "start": "1042480",
    "end": "1048038"
  },
  {
    "text": "because we're editing top Story collection here but meanwhile this refresh method is also running in the",
    "start": "1048039",
    "end": "1053400"
  },
  {
    "text": "background and also editing top Story collection here so by having this Asing",
    "start": "1053400",
    "end": "1058840"
  },
  {
    "text": "void method in there we've just introduced a weird condition and we're going to see weird bugs on our app that'll take us forever to figure out",
    "start": "1058840",
    "end": "1064360"
  },
  {
    "text": "and fix uh well not us because now we're experts at it but this is bad and so the",
    "start": "1064360",
    "end": "1071039"
  },
  {
    "text": "other the other problem with this is you know intellisense doesn't tell us that this is async void if I zoom in here and",
    "start": "1071039",
    "end": "1080080"
  },
  {
    "text": "if you're like me I I rarely read the docs I I use a lot of intellisense and only when I hit a problem do I ever go",
    "start": "1080080",
    "end": "1085840"
  },
  {
    "text": "back and look at the docs um but if we look at the intellisense here it says this is a private void method so as C",
    "start": "1085840",
    "end": "1092280"
  },
  {
    "text": "developers we are absolutely in the right to assume that this method is going to finish before the next line of",
    "start": "1092280",
    "end": "1098280"
  },
  {
    "text": "code runs but with as an async void method now whoa now we know that this",
    "start": "1098280",
    "end": "1104840"
  },
  {
    "text": "method's actually still running in the background and and sure you know you could argue hey this method's running here like how can you miss it it's",
    "start": "1104840",
    "end": "1110919"
  },
  {
    "text": "always going to be right there but what if it wasn't right like what if that this method this async void method is in a different class and you know you have",
    "start": "1110919",
    "end": "1118400"
  },
  {
    "text": "somebody on your team that doesn't know it's asnc void doesn't understand how asyn void works well they're going to write this code and have that assumption",
    "start": "1118400",
    "end": "1125000"
  },
  {
    "text": "that because it returns void this method's done running once it returns but now we know that that's not true so",
    "start": "1125000",
    "end": "1131400"
  },
  {
    "text": "so that's one of the reasons asnc void is dangerous another reason is what if this code threw an exception you know",
    "start": "1131400",
    "end": "1138480"
  },
  {
    "text": "the refresh method might throw an exception in itself but you know we can just say Throw new exception here just",
    "start": "1138480",
    "end": "1143520"
  },
  {
    "text": "to really ensure that exception happens and you might think yourself well okay yeah I mean no problem exceptions happen",
    "start": "1143520",
    "end": "1149200"
  },
  {
    "text": "all the time we were just talking about how good exceptions are so I'll just put this in a try catch block no big deal",
    "start": "1149200",
    "end": "1155480"
  },
  {
    "text": "right well again let's think about what's going on so thread one enters the",
    "start": "1155480",
    "end": "1161440"
  },
  {
    "text": "Constructor thread one enters to try catch block enters the refresh method hits the await keyword and then returns",
    "start": "1161440",
    "end": "1167480"
  },
  {
    "text": "so thread one continues on on and thread one continues to the next line of code so thread one's now down here and",
    "start": "1167480",
    "end": "1175039"
  },
  {
    "text": "meanwhile this task is still running in the background so we've effectively",
    "start": "1175039",
    "end": "1180080"
  },
  {
    "text": "we've effectively just exited our triy catch block and now when this exception happens our app's going to crash there's",
    "start": "1180080",
    "end": "1186200"
  },
  {
    "text": "no way we can catch it so this is the other reason Asing void's dangerous is it's almost impossible to catch an",
    "start": "1186200",
    "end": "1192240"
  },
  {
    "text": "exception if it gets thrown inside or gets thrown from an asyn void method so",
    "start": "1192240",
    "end": "1197480"
  },
  {
    "text": "so this is bad we don't we don't want to do we want to avoid async void so let's uh let's scrap",
    "start": "1197480",
    "end": "1204360"
  },
  {
    "text": "this but what do we do right because we have this code we want to kick it off",
    "start": "1204360",
    "end": "1210159"
  },
  {
    "text": "and you know for me I want to make sure that I'm showing the latest stories as soon as the user launches the app",
    "start": "1210159",
    "end": "1216280"
  },
  {
    "text": "because if I don't call refresh here it's a really bad user experience to launch this app and just see a blank",
    "start": "1216280",
    "end": "1222280"
  },
  {
    "text": "screen and then have to pull to refresh it yourself like can you imagine like watching Instagram and just seeing a sign that says pull to refresh why I",
    "start": "1222280",
    "end": "1229480"
  },
  {
    "text": "just opened the app do it for me so I really want this here but what can we do because we don't want to use async void",
    "start": "1229480",
    "end": "1236640"
  },
  {
    "text": "well I've created an extension method for us called safe fire and forget now",
    "start": "1236640",
    "end": "1242960"
  },
  {
    "text": "with safe fire and forget if we dig into its source code what it's doing is essentially the",
    "start": "1242960",
    "end": "1249640"
  },
  {
    "text": "same thing it's utilizing async void because again this this is a valid use case of async FOID but there'll be",
    "start": "1249640",
    "end": "1256679"
  },
  {
    "text": "dragons so with safe fire and forget it still uses async void but it has all the guard rails there for us",
    "start": "1256679",
    "end": "1263720"
  },
  {
    "text": "so what we do here is we have our task run inside of a try catch block and we",
    "start": "1263720",
    "end": "1270240"
  },
  {
    "text": "allow you to pass in an exception Handler so that if you want",
    "start": "1270240",
    "end": "1276400"
  },
  {
    "text": "to you can handle any exceptions that pop up so for example we could say",
    "start": "1276400",
    "end": "1281440"
  },
  {
    "text": "trace. right Line pass in that exception and make sure that we still acknowledge it and still recognize it and the thing",
    "start": "1281440",
    "end": "1288240"
  },
  {
    "text": "I really like about uh this safe fire and forget extension method is it's very explicit so other developers uh when",
    "start": "1288240",
    "end": "1296600"
  },
  {
    "text": "they come and look at your code and other members of your team you're being very explicit saying hey I'm not waiting",
    "start": "1296600",
    "end": "1302120"
  },
  {
    "text": "for this method to finish so yeah maybe don't do this top Story collection stuff",
    "start": "1302120",
    "end": "1307440"
  },
  {
    "text": "here because that's going to be a race condition um so it's a safe way to do these fire and forget methods and it's",
    "start": "1307440",
    "end": "1313600"
  },
  {
    "text": "better than what I used to do which was just t. run forget about it because it'll still allow us to catch the",
    "start": "1313600",
    "end": "1319640"
  },
  {
    "text": "exception handle the exception uh just like we always want to so so perfect so",
    "start": "1319640",
    "end": "1325559"
  },
  {
    "text": "first one's done next up we get to this refactor now",
    "start": "1325559",
    "end": "1330960"
  },
  {
    "text": "now this looks a little weird right because we are creating a task so we're saying task. delay and we're setting it",
    "start": "1330960",
    "end": "1336679"
  },
  {
    "text": "to this variable and this is another thing we can do we can always we can create this task first and then we could",
    "start": "1336679",
    "end": "1342880"
  },
  {
    "text": "await it later uh so in this case this is actually a little trick that we use for mobile app development where uh it's",
    "start": "1342880",
    "end": "1352440"
  },
  {
    "text": "sounds counterintuitive but every time user does the p a pull to refresh we're going to make him show that activity",
    "start": "1352440",
    "end": "1358679"
  },
  {
    "text": "indicator that spinning activity indicator for at least two seconds because you know sometimes data gets cached and you know if that API request",
    "start": "1358679",
    "end": "1366760"
  },
  {
    "text": "comes back within 200 milliseconds then that's not a time enough time to update the UI and show that activity indicator",
    "start": "1366760",
    "end": "1373600"
  },
  {
    "text": "and so the user is going to do a pull to refresh and they're going to think we didn't do anything I'm like ah wait it",
    "start": "1373600",
    "end": "1378640"
  },
  {
    "text": "didn't happen something's broken they'll just keep pulling to refresh and they don't know that they have the latest data but they'll think our app's broken",
    "start": "1378640",
    "end": "1384679"
  },
  {
    "text": "and that's another good way to get a one star review so again a little weird but something I recommend doing is having",
    "start": "1384679",
    "end": "1391159"
  },
  {
    "text": "that consistency by having this minimum uh minimum refresh time task now I got a",
    "start": "1391159",
    "end": "1396760"
  },
  {
    "text": "little squiggle here and this one's yelling at me because I'm not passing in a cancellation token now as good C",
    "start": "1396760",
    "end": "1404000"
  },
  {
    "text": "developers we always want to anytime we have an async task method we always want",
    "start": "1404000",
    "end": "1409559"
  },
  {
    "text": "to have a cancellation token as a parameter so anytime we write uh Asing task method always allow the other",
    "start": "1409559",
    "end": "1415919"
  },
  {
    "text": "developers to pass in a cancellation token because maybe I don't want this to run",
    "start": "1415919",
    "end": "1421480"
  },
  {
    "text": "forever like maybe it'll take 20 seconds for this to time out well that's not a good user experience you know I want to",
    "start": "1421480",
    "end": "1428240"
  },
  {
    "text": "be able to have a cancellation token in that says yeah you know try it for 5 seconds and if it doesn't work that's when we'll alert the user so so as good",
    "start": "1428240",
    "end": "1435840"
  },
  {
    "text": "C developers we pass in our cancellation token and you know lucky for us test. delay",
    "start": "1435840",
    "end": "1442360"
  },
  {
    "text": "has that as a parameter so we just pass it in here but let's pretend like it doesn't uh let's let's pretend like",
    "start": "1442360",
    "end": "1448559"
  },
  {
    "text": "we're using somebody else's code and they're not good C developers like us and they didn't allow us to pass in",
    "start": "1448559",
    "end": "1453679"
  },
  {
    "text": "cancellation token like what do we do well there's a cool extension method called weight async and we can pass the",
    "start": "1453679",
    "end": "1461080"
  },
  {
    "text": "token into here and what this extension method basically does is bolts on that",
    "start": "1461080",
    "end": "1466720"
  },
  {
    "text": "cancellation token to this test so if you're ever working with somebody else's code or a library especially if",
    "start": "1466720",
    "end": "1472200"
  },
  {
    "text": "it's older they might not have or they might not have given you a parameter to pass in your cancellation token that's",
    "start": "1472200",
    "end": "1478520"
  },
  {
    "text": "okay because we can always say weight async and we can pass in our own cancellation token and it's essentially bolted that on to the task",
    "start": "1478520",
    "end": "1487520"
  },
  {
    "text": "so in this case since test out delay allows us to pass it in right there we'll just keep it in here now the next",
    "start": "1487760",
    "end": "1494640"
  },
  {
    "text": "thing to refactor Let's see we go inet read the top stories great so we got to",
    "start": "1494640",
    "end": "1499840"
  },
  {
    "text": "get the top stories before we can add them to our collection this makes sense uh but what do we do here what's what's",
    "start": "1499840",
    "end": "1505600"
  },
  {
    "text": "wrong with this right like we're we're still calling we're calling a wait this looks like good code um but again let's",
    "start": "1505600",
    "end": "1513600"
  },
  {
    "text": "remember what's going on here and so let's say thread one kicks off this method because you know pull a refresh",
    "start": "1513600",
    "end": "1519600"
  },
  {
    "text": "that's a UI event so it's highly likely that uh thread one will enter uh the",
    "start": "1519600",
    "end": "1525440"
  },
  {
    "text": "method refresh and get to here and then thread one returns so great we're doing this all on background threads",
    "start": "1525440",
    "end": "1531640"
  },
  {
    "text": "everybody's happy thread one's free to interact with the user they can scroll they can click on the stories do whatever they want my app great but when",
    "start": "1531640",
    "end": "1539159"
  },
  {
    "text": "it's done this like we saw earlier this shouts back to the calling thread and says hey I'm all done thread one get",
    "start": "1539159",
    "end": "1546919"
  },
  {
    "text": "back in here and now thread one has to come in to finish this method now is",
    "start": "1546919",
    "end": "1552440"
  },
  {
    "text": "that a good use of thread one not really cuz we're we're in my view model this is",
    "start": "1552440",
    "end": "1558960"
  },
  {
    "text": "uh this is code that never touches my UI so I know I never need thread one",
    "start": "1558960",
    "end": "1564240"
  },
  {
    "text": "anywhere in this class but yet we have thread one coming back in to do extra work and then on top of that what if",
    "start": "1564240",
    "end": "1570960"
  },
  {
    "text": "thread one's busy right like maybe the user's scrolling so thread one's got to redraw the UI on the screen as they're",
    "start": "1570960",
    "end": "1576399"
  },
  {
    "text": "scrolling through well now we have to wait for thread one to be free before it can come back in so we also run the risk",
    "start": "1576399",
    "end": "1583480"
  },
  {
    "text": "of our code sitting idle along with overusing the UI thread so",
    "start": "1583480",
    "end": "1588760"
  },
  {
    "text": "what we can do is we can add configur we false to the end and configure we false",
    "start": "1588760",
    "end": "1596640"
  },
  {
    "text": "basically tells net I don't care what thread we continue on when I'm done just",
    "start": "1596640",
    "end": "1602279"
  },
  {
    "text": "grab whatever thread is free from the thread pool and keep running the code and so now instead of returning to",
    "start": "1602279",
    "end": "1608039"
  },
  {
    "text": "thread one after this line of code to clear the top Story collection and iterate over it to add them to the list",
    "start": "1608039",
    "end": "1614640"
  },
  {
    "text": "nown net will just go to the thread poool and say hey who's free and it'll take whatever threads available and",
    "start": "1614640",
    "end": "1621159"
  },
  {
    "text": "it'll continue on running the code so with configurate false we can be sure we're not overworking and overusing our",
    "start": "1621159",
    "end": "1627799"
  },
  {
    "text": "UI thread and we get a little bit of a performance bump because again if thread one's busy well we got to wait for it to",
    "start": "1627799",
    "end": "1633279"
  },
  {
    "text": "free up before we can jump back in So my rule of thumb is you know with mobile",
    "start": "1633279",
    "end": "1639120"
  },
  {
    "text": "and net Maui specifically uh we use the mvvm architecture so everywhere in my view models everywhere in my service",
    "start": "1639120",
    "end": "1645320"
  },
  {
    "text": "layer everywhere in my code that doesn't touch the UI I configure weight false everything but",
    "start": "1645320",
    "end": "1651679"
  },
  {
    "text": "obviously if you're writing UI code and you know you need to return to the UI thread to maybe update some button text",
    "start": "1651679",
    "end": "1656720"
  },
  {
    "text": "or something like that of course don't use configure we false uh the default is actually configure we true so if you",
    "start": "1656720",
    "end": "1662679"
  },
  {
    "text": "don't have configure we on there it'll Default configurate true uh but then also new in net",
    "start": "1662679",
    "end": "1670360"
  },
  {
    "text": "8 is configure weight options we can now pass in an enum here and this enum has a",
    "start": "1670360",
    "end": "1678320"
  },
  {
    "text": "couple options and right away you'll see the values here on the side so this is",
    "start": "1678320",
    "end": "1683360"
  },
  {
    "text": "actually this is a flag so we can actually chain these together but let's talk about what they do first so there's there's configure options. none and this",
    "start": "1683360",
    "end": "1691840"
  },
  {
    "text": "is going to be a little counterintuitive because none is the same as configure O8",
    "start": "1691840",
    "end": "1696919"
  },
  {
    "text": "false so none means don't return to the calling thread again little",
    "start": "1696919",
    "end": "1702039"
  },
  {
    "text": "counterintuitive when I first saw this I was like oh cool configure white options I assume nun's the same as true right",
    "start": "1702039",
    "end": "1707399"
  },
  {
    "text": "because they're both the default false no configure we configure weight options. none is the same as configure",
    "start": "1707399",
    "end": "1713559"
  },
  {
    "text": "we false it will not return to the calling thread uh the next one here on the list in tsense is configure weight options.",
    "start": "1713559",
    "end": "1720519"
  },
  {
    "text": "Force yielding uh so this is basically the modern. net way of saying await",
    "start": "1720519",
    "end": "1725760"
  },
  {
    "text": "task. yield so remember when we looked at that compiled code it said every time we kicked off a task it would",
    "start": "1725760",
    "end": "1731799"
  },
  {
    "text": "immediately check and be like hey is this task already completed because I don't want to have to switch threads if I don't have to well Force yielding says",
    "start": "1731799",
    "end": "1739279"
  },
  {
    "text": "always switch threads and again probably a little weird to think about but if",
    "start": "1739279",
    "end": "1744519"
  },
  {
    "text": "you've ever had to use a weight test. yield in your code to force a thread switch then this is the way to do it",
    "start": "1744519",
    "end": "1750480"
  },
  {
    "text": "nowadays in net 8 and this can be super helpful because again if we're updating",
    "start": "1750480",
    "end": "1755840"
  },
  {
    "text": "code that needs to yield then maybe we want to update something on the screen with the UI thread then Force yielding",
    "start": "1755840",
    "end": "1762840"
  },
  {
    "text": "will make sure that once this code runs we will always make that thread switch so there's Force yielding uh there's",
    "start": "1762840",
    "end": "1770320"
  },
  {
    "text": "suppressed throwing and this one goes against everything I just talked about because I always said you want to",
    "start": "1770320",
    "end": "1775679"
  },
  {
    "text": "rethrow those exceptions we want to use the awake keyword uh but now you have the option not to so don't ask me I",
    "start": "1775679",
    "end": "1782080"
  },
  {
    "text": "don't know when you would want to use this in your code but you can say configure weight options. supress throwing and if an exception is thrown",
    "start": "1782080",
    "end": "1788519"
  },
  {
    "text": "in your task net will not rethrow it for you so little dangerous I don't I don't",
    "start": "1788519",
    "end": "1793640"
  },
  {
    "text": "know where anybody's going to use that if you do let me know I'd love to know a real world example and then the last one",
    "start": "1793640",
    "end": "1798840"
  },
  {
    "text": "here is continue on captured context so this is the same as configure a weight true so continue on captured context",
    "start": "1798840",
    "end": "1805880"
  },
  {
    "text": "we'll return to the calling thread before running the next line of code so again these are",
    "start": "1805880",
    "end": "1813320"
  },
  {
    "text": "also this is an enum flag meaning we can chain them together so we can always use that bitwise or and say uh we want to",
    "start": "1813320",
    "end": "1821200"
  },
  {
    "text": "force yielding and suppress throwing by putting them in there together so play around with those but I will say for my",
    "start": "1821200",
    "end": "1828240"
  },
  {
    "text": "code most of it I'm using configur away false unless for some reason I can think of a a good reason to use use the other",
    "start": "1828240",
    "end": "1835120"
  },
  {
    "text": "other ones otherwise okay cool so that refactor done now what's next oh great so down",
    "start": "1835120",
    "end": "1842919"
  },
  {
    "text": "here we finally have our minimum refresh time task so in our finally block this",
    "start": "1842919",
    "end": "1848519"
  },
  {
    "text": "is where I'm going to say hey if all this code if all this a all these API calls took less than 2 seconds hang out",
    "start": "1848519",
    "end": "1855360"
  },
  {
    "text": "here for a bit because I want to be sure the user knows we their pull to refresh and they update the UI they get the activity indicator 2",
    "start": "1855360",
    "end": "1862600"
  },
  {
    "text": "seconds is just enough time to say hey I acknowledge you but not enough time for them to be angry at us for uh wasting",
    "start": "1862600",
    "end": "1869399"
  },
  {
    "text": "their time but the problem here is I'm calling dot weight now I have a rule of",
    "start": "1869399",
    "end": "1875559"
  },
  {
    "text": "thumb and that is to never never never never never use do weight do weight is",
    "start": "1875559",
    "end": "1880799"
  },
  {
    "text": "really bad uh the reason do weight's bad is unlike the await keyword that will",
    "start": "1880799",
    "end": "1887480"
  },
  {
    "text": "return the calling threads so again when we use a weight the thread's able to return either back to the thread Pole or",
    "start": "1887480",
    "end": "1892960"
  },
  {
    "text": "if it's thread one it can interact with the user again weight says uhuh calling thread you're staying right here and it",
    "start": "1892960",
    "end": "1899720"
  },
  {
    "text": "locks the calling thread on this line of code meanwhile this minimum refresh time",
    "start": "1899720",
    "end": "1904799"
  },
  {
    "text": "task is already running on a different thread so bad things are happening because this",
    "start": "1904799",
    "end": "1911480"
  },
  {
    "text": "is going to wait 2 seconds so if if we are on the UI thread that means our ass can be frozen for two two seconds but",
    "start": "1911480",
    "end": "1917320"
  },
  {
    "text": "it's also bad CU we're using two threads when we should only be using one and even if you're thinking to yourself like",
    "start": "1917320",
    "end": "1923200"
  },
  {
    "text": "hey I don't really care about this UI stuff I'm a backend developer I make asp.net core apis what do I care well if",
    "start": "1923200",
    "end": "1931840"
  },
  {
    "text": "you use weight even if you don't have a UI to worry about you're still using two threads when you only need to be using",
    "start": "1931840",
    "end": "1937519"
  },
  {
    "text": "one and eventually you're going to reach what's called threadpool exhaustion because every server every computer only",
    "start": "1937519",
    "end": "1944279"
  },
  {
    "text": "has a finite amount of threads that net can have in the thread pool and that all depends on how much memory and how much",
    "start": "1944279",
    "end": "1950880"
  },
  {
    "text": "based on how much horsepower your server has net will determine how many threads it can it can spin up um but yeah even",
    "start": "1950880",
    "end": "1957120"
  },
  {
    "text": "if you're just making apis and you you don't care about freezing a UI well every time you call weight you're using",
    "start": "1957120",
    "end": "1963600"
  },
  {
    "text": "twice as many threads as you need and you're going to hit that thread pool exhaustion twice as fast so so what do",
    "start": "1963600",
    "end": "1969360"
  },
  {
    "text": "we do well easy easy solution here because we're in an asyn task method so we're just going to await but let's say",
    "start": "1969360",
    "end": "1977039"
  },
  {
    "text": "maybe you can't right now it's getting really really rare nowadays especially in theet 8 world where you'd ever have",
    "start": "1977039",
    "end": "1984519"
  },
  {
    "text": "to write synchronous code uh but it does still happen you know probably 99% of",
    "start": "1984519",
    "end": "1990000"
  },
  {
    "text": "the time we can just use the awake keyword but that 1% we might have to use",
    "start": "1990000",
    "end": "1995279"
  },
  {
    "text": "weight and I just said don't ever use it well what do I recommend",
    "start": "1995279",
    "end": "2000679"
  },
  {
    "text": "well we can instead use get a waiter get result now",
    "start": "2000679",
    "end": "2005760"
  },
  {
    "text": "this is still bad this is still going to do everything weight does it's still going to lock the calling thread we're still using two threads when we should",
    "start": "2005760",
    "end": "2011559"
  },
  {
    "text": "only be using one but if an exception is thrown so let's say that our",
    "start": "2011559",
    "end": "2016639"
  },
  {
    "text": "cancellation token uh timed out and this is going to throw an exception a timeout exception well get a wait or get result",
    "start": "2016639",
    "end": "2023519"
  },
  {
    "text": "throws our code it throws that timeout exception whereas if we're using weight or result that throws what's called a",
    "start": "2023519",
    "end": "2031240"
  },
  {
    "text": "system. aggregate exception and if you if you're unfamiliar with those they're really weird because an aggregate",
    "start": "2031240",
    "end": "2037080"
  },
  {
    "text": "exception is an exception that holds exceptions so it has a list of exceptions inside of it and that's where",
    "start": "2037080",
    "end": "2042720"
  },
  {
    "text": "our code lives so if you've ever seen those uh those uh",
    "start": "2042720",
    "end": "2048320"
  },
  {
    "text": "stack traces system aggregated exceptions are weird they're difficult to debug especially for new developers because you're looking at it you're",
    "start": "2048320",
    "end": "2054320"
  },
  {
    "text": "going okay I don't even see my code that threw an exception I have no idea what this aggregated exception even means",
    "start": "2054320",
    "end": "2060000"
  },
  {
    "text": "whereas if you use geta wa or get result it'll rethrow our code with our exception in that stack Trace so it's",
    "start": "2060000",
    "end": "2065878"
  },
  {
    "text": "still bad we still don't want to use it if we can just use async a weight instead but if we have to get a weight",
    "start": "2065879",
    "end": "2072118"
  },
  {
    "text": "or get result is better than weight and result it actually Place replaces both of them um because it'll rethrow our",
    "start": "2072119",
    "end": "2078760"
  },
  {
    "text": "code with our exception okay but for here we're not going to do any of that that is more of",
    "start": "2078760",
    "end": "2085158"
  },
  {
    "text": "a fun fact than anything else because we're in the async task method and we'll just await it and also fun fact yes you",
    "start": "2085159",
    "end": "2092079"
  },
  {
    "text": "can use asyn aade in your trif finally blocks okay next up we've got this",
    "start": "2092079",
    "end": "2097960"
  },
  {
    "text": "method called get top stories now this looks pretty good um another cool fun",
    "start": "2097960",
    "end": "2103560"
  },
  {
    "text": "fact here we're using a frozen set this is something new also in net 8 uh it has",
    "start": "2103560",
    "end": "2109000"
  },
  {
    "text": "nothing to do with async A8 but I love it because I'm a big fan of immutable data I strongly believe anytime we make",
    "start": "2109000",
    "end": "2115520"
  },
  {
    "text": "an API call anytime we pull data from a database that we should store that in an immutable list and that's what Frozen",
    "start": "2115520",
    "end": "2122040"
  },
  {
    "text": "set is you can see it's in the namespace system. collections. frozen so new and.net 8 is Frozen set and Frozen",
    "start": "2122040",
    "end": "2129040"
  },
  {
    "text": "dictionary and some of you might be thinking to yourself like hey wait a minute I've already used things like I read only list and immutable array and",
    "start": "2129040",
    "end": "2135800"
  },
  {
    "text": "immutable collection like why did they go create a third one what the heck's the difference well the Frozen set is",
    "start": "2135800",
    "end": "2142359"
  },
  {
    "text": "the only one that'll actually freeze the data um yes if you're using IAD only",
    "start": "2142359",
    "end": "2147440"
  },
  {
    "text": "list or a mutable list or mutable collection or any of those existing",
    "start": "2147440",
    "end": "2152720"
  },
  {
    "text": "ones yes you aren't able to add or remove anything from the list but a",
    "start": "2152720",
    "end": "2157880"
  },
  {
    "text": "Savvy developer might know you can actually go into and replace the data in there so I could go back to index zero",
    "start": "2157880",
    "end": "2164400"
  },
  {
    "text": "of my I read only list and I could swap out that data Frozen set doesn't allow you to do",
    "start": "2164400",
    "end": "2169960"
  },
  {
    "text": "that so we finally have a purely immutable collection that we can use in.net and I'm a big fan because like I",
    "start": "2169960",
    "end": "2175400"
  },
  {
    "text": "said I always use uh immutable data structures like this anytime I make API calls anytime I make uh database calls",
    "start": "2175400",
    "end": "2182760"
  },
  {
    "text": "and the way you can use it is you just say do two frozen set so super easy and super convenient now looking at this",
    "start": "2182760",
    "end": "2190160"
  },
  {
    "text": "code this code actually looks really good but it's telling me I got to refactor it so what's wrong here because",
    "start": "2190160",
    "end": "2195800"
  },
  {
    "text": "you know we're using the await keyword we're calling configure AWA false but if we look at this it's kind of a product",
    "start": "2195800",
    "end": "2202280"
  },
  {
    "text": "of how The Hacker News API works because The Hacker News API requires me to call",
    "start": "2202280",
    "end": "2207400"
  },
  {
    "text": "and get the top story IDs before I can actually get the top stories so whoever",
    "start": "2207400",
    "end": "2213400"
  },
  {
    "text": "designed the API I wish they would have just allowed me to get all the top stories in one API but nope the way they",
    "start": "2213400",
    "end": "2219000"
  },
  {
    "text": "do it is they got to give me a list of IDs and then serially I have to make a request to get every story in the list",
    "start": "2219000",
    "end": "2226240"
  },
  {
    "text": "so if I want to get 50 of the top stories well I make this first API call and then I got to make 50 more and",
    "start": "2226240",
    "end": "2232520"
  },
  {
    "text": "because it's in a for each Loop this is all happening serially so I got to wait for that first one to get back then I make the next one and so you know even",
    "start": "2232520",
    "end": "2239440"
  },
  {
    "text": "if they take half a second if I'm making 50 API 50 API requests that's still like",
    "start": "2239440",
    "end": "2246480"
  },
  {
    "text": "25 seconds so so we can do better and we can use something and instead of",
    "start": "2246480",
    "end": "2252319"
  },
  {
    "text": "rewriting this I'll jump over to the good async weight best practices to show you we can use something called I async",
    "start": "2252319",
    "end": "2259280"
  },
  {
    "text": "enumerable Now isync inumerable is really really cool uh it is an async",
    "start": "2259280",
    "end": "2264359"
  },
  {
    "text": "method uh but it allows us to return the results in real time so let's check out",
    "start": "2264359",
    "end": "2269839"
  },
  {
    "text": "this code real quick uh because it's this iyn inumerable that allows us to",
    "start": "2269839",
    "end": "2275200"
  },
  {
    "text": "consume it as an await for each Loop so await for each is this really really",
    "start": "2275200",
    "end": "2280560"
  },
  {
    "text": "cool feature where if we have an isync enumerable we can say await for each for",
    "start": "2280560",
    "end": "2286040"
  },
  {
    "text": "every story in our GP stories and it's again we can just use configure weight false here we pass our cancellation",
    "start": "2286040",
    "end": "2292359"
  },
  {
    "text": "token so we're still everything's still looking good um but as soon as one of those API calls come back I can add it",
    "start": "2292359",
    "end": "2300000"
  },
  {
    "text": "into my collection so instead of forcing the user to sit there just looking at a spinning indicator for 25 seconds and",
    "start": "2300000",
    "end": "2305599"
  },
  {
    "text": "Bam all that data shows up at once with this await for each loop I can feed them the data as it comes back and we'll see",
    "start": "2305599",
    "end": "2313920"
  },
  {
    "text": "in a second I'm doing it all in parallel so so the way I've designed this iyn innumerable is you know I still got to",
    "start": "2313920",
    "end": "2320760"
  },
  {
    "text": "go get those top story IDs but once I have them I instead of instead of",
    "start": "2320760",
    "end": "2326800"
  },
  {
    "text": "awaiting each each uh API call to get that story I've created a list of tasks",
    "start": "2326800",
    "end": "2334800"
  },
  {
    "text": "and so what I do I add all those tasks to this list and then I jump into this",
    "start": "2334800",
    "end": "2341640"
  },
  {
    "text": "while loop where I say as long as that task is not empty or as long as that list is not empty and as long as the",
    "start": "2341640",
    "end": "2348760"
  },
  {
    "text": "maximum story count hasn't been reached because you know maybe the user only wants 20 stories and that's fine they can set that uh keep going so what we",
    "start": "2348760",
    "end": "2355880"
  },
  {
    "text": "can do is we can say await task. win any and what this does we pass in a list of",
    "start": "2355880",
    "end": "2362760"
  },
  {
    "text": "tasks here and task. when any anytime one of those tasks is completed we'll",
    "start": "2362760",
    "end": "2369640"
  },
  {
    "text": "give it to us so as soon as one of these 50 tasks is done it returns it here and",
    "start": "2369640",
    "end": "2376599"
  },
  {
    "text": "now I have it so a I want to remove it from the list because I know I don't need it anymore in that list and then I",
    "start": "2376599",
    "end": "2382720"
  },
  {
    "text": "can get the story from that task and I can yield return it and yield return is",
    "start": "2382720",
    "end": "2389160"
  },
  {
    "text": "that's the same as an I inumerable yield return and if you've never used it it doesn't actually escape the method it",
    "start": "2389160",
    "end": "2394599"
  },
  {
    "text": "doesn't return the method instead it returns that one piece of data and it's this yield return if we jump back up to",
    "start": "2394599",
    "end": "2402160"
  },
  {
    "text": "the four each loop it's that yield return that allows us to run this code and subsequently show this data to our",
    "start": "2402160",
    "end": "2409040"
  },
  {
    "text": "to our user on the UI so so we're able to basically stream the data to our user",
    "start": "2409040",
    "end": "2415040"
  },
  {
    "text": "as it's coming in and at the same time we're running all of these in in parallel instead of running them um",
    "start": "2415040",
    "end": "2421960"
  },
  {
    "text": "sequentially so our app's going to load a lot faster it's a better UI experience and I do want to point out one one thing",
    "start": "2421960",
    "end": "2428839"
  },
  {
    "text": "here is I just said that whenever a task",
    "start": "2428839",
    "end": "2434240"
  },
  {
    "text": "completes that's what we get back so technically this task is completed but",
    "start": "2434240",
    "end": "2439440"
  },
  {
    "text": "I'm still awaiting it so there is the one valid use case for using do",
    "start": "2439440",
    "end": "2446880"
  },
  {
    "text": "result even though I just told you never to use it um we can use do result here because we know this task is completed",
    "start": "2446880",
    "end": "2454280"
  },
  {
    "text": "we know that this won't lock any threads because there's going to be no thread switching so do result is valid here but",
    "start": "2454280",
    "end": "2462160"
  },
  {
    "text": "I still don't recommend using it because this code will get refactored someday we're going to have new",
    "start": "2462160",
    "end": "2467839"
  },
  {
    "text": "developers on our team they're going to copy paste our existing code into their code and I guarantee you this line of",
    "start": "2467839",
    "end": "2473880"
  },
  {
    "text": "code will appear somewhere else in in your app one day and if we say do result here and then somebody else copy pastes",
    "start": "2473880",
    "end": "2480680"
  },
  {
    "text": "it and all of a sudden now our apps freezing performance is bad uh because they didn't understand that the task was",
    "start": "2480680",
    "end": "2486800"
  },
  {
    "text": "already completed so it definitely feels like Overkill to say a weight and configure weight false but we know those",
    "start": "2486800",
    "end": "2492640"
  },
  {
    "text": "are the best practices so we still want to do it even though we know that task is",
    "start": "2492640",
    "end": "2497760"
  },
  {
    "text": "completed okay next method we have a method called get story now so this this looks pretty",
    "start": "2497760",
    "end": "2505400"
  },
  {
    "text": "good you know we're using async of weight I could probably add in configure a weight false here um but there's",
    "start": "2505400",
    "end": "2511440"
  },
  {
    "text": "actually a better optimization here because this get story method if we zoom",
    "start": "2511440",
    "end": "2516760"
  },
  {
    "text": "in a little bit bit this get story method returns a task of type story Model and if we look at this method it",
    "start": "2516760",
    "end": "2523640"
  },
  {
    "text": "also returns a type of task story Model so what we can do is we can remove a",
    "start": "2523640",
    "end": "2529079"
  },
  {
    "text": "sync and remove a weight and just return that task and what this does is it saves",
    "start": "2529079",
    "end": "2534800"
  },
  {
    "text": "us a thread switch so again if you think about what's going on here let's say",
    "start": "2534800",
    "end": "2540200"
  },
  {
    "text": "thread five calls this method thread five comes in here hits the await statement returns back to the thread",
    "start": "2540200",
    "end": "2545240"
  },
  {
    "text": "pool this is now running on a different background thread maybe thread seven then when thread Seven's done it says",
    "start": "2545240",
    "end": "2551040"
  },
  {
    "text": "Hey thread five I'm all back or I'm all done or even if we had configure a weight false in here it would still have to go back to the thread pool and get a",
    "start": "2551040",
    "end": "2557160"
  },
  {
    "text": "different thread just to return the value so we had two thread switches when",
    "start": "2557160",
    "end": "2563839"
  },
  {
    "text": "we don't need to and if we if we remove a sink and we remove a weight now",
    "start": "2563839",
    "end": "2570920"
  },
  {
    "text": "we just return the task we saved those context switches and now whoever's calling the git story method meod they",
    "start": "2570920",
    "end": "2578599"
  },
  {
    "text": "can decide how they want to use it so that's why up here you can still say A weit you can still say configure weight false and we've just improved our",
    "start": "2578599",
    "end": "2584720"
  },
  {
    "text": "performance a little bit by saving our ourselves a contact",
    "start": "2584720",
    "end": "2590160"
  },
  {
    "text": "switch okay one more method down here uh this one's called get top story IDs and",
    "start": "2590160",
    "end": "2595680"
  },
  {
    "text": "let's actually remove this for just a second because right now we're looking at the same thing right this is just",
    "start": "2595680",
    "end": "2602520"
  },
  {
    "text": "like the last method it's a async task method and the only place where we have the await keyword is in the return",
    "start": "2602520",
    "end": "2608839"
  },
  {
    "text": "statement so that's easy right Brandon you just told us we remove await we",
    "start": "2608839",
    "end": "2614200"
  },
  {
    "text": "remove async and there we go like this is going to compile there's no red squiggles uh but no this is actually a",
    "start": "2614200",
    "end": "2619839"
  },
  {
    "text": "trick question because when we return We exit the method so as soon as we hit",
    "start": "2619839",
    "end": "2626200"
  },
  {
    "text": "that return statement we're given back the task which means we've exited this method which means we've exited this Tri",
    "start": "2626200",
    "end": "2632160"
  },
  {
    "text": "catch block so we're no longer inside this Tri catch block as soon as we return the task so what's happening is",
    "start": "2632160",
    "end": "2638960"
  },
  {
    "text": "this method is still running on a background thread but if it throws an exception we're never going to catch it",
    "start": "2638960",
    "end": "2645319"
  },
  {
    "text": "here so this was actually a trick question we do want to keep async a weight here even though the only place",
    "start": "2645319",
    "end": "2651960"
  },
  {
    "text": "we're doing it is in the return of weight statement just because we're inside a tri catch block now adding in",
    "start": "2651960",
    "end": "2659240"
  },
  {
    "text": "that that previous code back uh something else I want to show you is let's say you know wouldn't it be smart",
    "start": "2659240",
    "end": "2666920"
  },
  {
    "text": "if every time they did a pull to refresh we check to see is the data still good like Hacker News doesn't update every",
    "start": "2666920",
    "end": "2673200"
  },
  {
    "text": "second every minute so I kind of said hey if the data is recent like within the previous hour let's just skip that",
    "start": "2673200",
    "end": "2679440"
  },
  {
    "text": "API call let's save ourselves a round trip uh we don't need to burn through the cellular data for the user and we'll",
    "start": "2679440",
    "end": "2685440"
  },
  {
    "text": "just return what we already got like we already got the IDS just give them back um and so what happens now is you know",
    "start": "2685440",
    "end": "2692720"
  },
  {
    "text": "the first time we run this method we won't have any data so this will be FAL false and we'll have to do return a",
    "start": "2692720",
    "end": "2698680"
  },
  {
    "text": "weight which is totally fine and we should be good and add in configure weight false here uh but the second time",
    "start": "2698680",
    "end": "2704760"
  },
  {
    "text": "this runs assuming that pulled refresh happens within an hour this part of the method runs and",
    "start": "2704760",
    "end": "2710520"
  },
  {
    "text": "the third time this code runs we use this return statement the fourth time and what you start to see is the hot",
    "start": "2710520",
    "end": "2717000"
  },
  {
    "text": "path for the method is right here and the hot path does not use the awake",
    "start": "2717000",
    "end": "2722359"
  },
  {
    "text": "keyword so if you ever have a method like this where nine times out of 10 you don't need that AWA keyword instead of",
    "start": "2722359",
    "end": "2729680"
  },
  {
    "text": "returning a task we can return a value task now",
    "start": "2729680",
    "end": "2735720"
  },
  {
    "text": "value task is similar to task it's not exactly the same like for example you shouldn't pass around tasks or you",
    "start": "2735720",
    "end": "2742359"
  },
  {
    "text": "shouldn't pass around value tasks you shouldn't reuse value tasks but certainly safe to use it as a return for",
    "start": "2742359",
    "end": "2748680"
  },
  {
    "text": "a method that you can await and the reason it's a little bit better is value task is a value type so if we remember",
    "start": "2748680",
    "end": "2756240"
  },
  {
    "text": "in C in net value types live on the stack in memory whereas reference types",
    "start": "2756240",
    "end": "2761440"
  },
  {
    "text": "which a task is live on the Heap and so if we're not going to use the task and we're not going to need all that",
    "start": "2761440",
    "end": "2767000"
  },
  {
    "text": "overhead well we can get a performance boost by using value task because adding",
    "start": "2767000",
    "end": "2772079"
  },
  {
    "text": "something to a stack o of one we just push it right onto the stack whereas anytime we add something to the Heap",
    "start": "2772079",
    "end": "2778079"
  },
  {
    "text": "well we've got to index it it takes a little bit longer so if we're not going to use async await and we're not going",
    "start": "2778079",
    "end": "2783400"
  },
  {
    "text": "to need the await keyword in our method say 90% of the time we can get a little bit of a performance Bump by using value",
    "start": "2783400",
    "end": "2791480"
  },
  {
    "text": "task okay so let's talk about all those async weight best practices uh never use",
    "start": "2795319",
    "end": "2801800"
  },
  {
    "text": "weight or do result if you can avoid it avoid it it's really bad it locks the calling thread you're going to end up",
    "start": "2801800",
    "end": "2807000"
  },
  {
    "text": "using two threads when you only should be using one and we should always be using the await keyword but if for some",
    "start": "2807000",
    "end": "2813200"
  },
  {
    "text": "reason you have to like I see it still like old interfaces maybe it's an interface that returns a type Bo instead",
    "start": "2813200",
    "end": "2820079"
  },
  {
    "text": "of a task of type buol then okay fine uh what we'll do instead is get a waiter",
    "start": "2820079",
    "end": "2826640"
  },
  {
    "text": "get result get a waiter get result again replaces weight and it replaces do result but it's also bad because it's",
    "start": "2826640",
    "end": "2832559"
  },
  {
    "text": "going to lock the calling thread and you're going to end up using two threads when you only should be using one it just gives you better better stack",
    "start": "2832559",
    "end": "2839200"
  },
  {
    "text": "traces better exception handling and helps out future you when you're debugging code fire and forget tasks",
    "start": "2839200",
    "end": "2845319"
  },
  {
    "text": "don't do what I used to do and just say task. run run this in the background forget about it because we always want",
    "start": "2845319",
    "end": "2850559"
  },
  {
    "text": "to await every task so if we do want to fire and forget a task and we know this is totally cool we can run in the",
    "start": "2850559",
    "end": "2856800"
  },
  {
    "text": "background it's I'm fine with the code continuing to run after this use the safe fire forget extension method I have",
    "start": "2856800",
    "end": "2863400"
  },
  {
    "text": "it available in my Nate package async way best practices I highly recommend it and I know I'm a little biased because I",
    "start": "2863400",
    "end": "2869599"
  },
  {
    "text": "made this library but we just reached over 1.5 million downloads so couple",
    "start": "2869599",
    "end": "2875000"
  },
  {
    "text": "hundred, developers also think it's pretty cool too and actually saw Mozilla using it one of their c apps which is",
    "start": "2875000",
    "end": "2881480"
  },
  {
    "text": "crazy mind-blowing so uh Nate async weight best practices will give you the safe fire and forget extension",
    "start": "2881480",
    "end": "2887359"
  },
  {
    "text": "method avoid return await so if the only place in your method you're using the await keyword is in the return statement",
    "start": "2887359",
    "end": "2894160"
  },
  {
    "text": "you can remove it you can remove async and just return the task but keep in mind if you're inside of a TR catch",
    "start": "2894160",
    "end": "2900079"
  },
  {
    "text": "block keep it keep return a weight because you're going to exit that TR catch block right away likewise if",
    "start": "2900079",
    "end": "2906839"
  },
  {
    "text": "you're in a disposing like a using block and you're going to dispose of something again keep that return await because",
    "start": "2906839",
    "end": "2913440"
  },
  {
    "text": "you're going to exit the method and then objects are going to be disposed that you're probably using in the background",
    "start": "2913440",
    "end": "2918640"
  },
  {
    "text": "and then you're going to get weird object dispose exceptions it's happened to me I'm telling you this from experience keep it in those scenarios",
    "start": "2918640",
    "end": "2925280"
  },
  {
    "text": "but otherwise totally cool to remove it configure weight false so if you don't need to return to the calling thread",
    "start": "2925280",
    "end": "2931720"
  },
  {
    "text": "configure way false like I said I use it everywhere in the view model layer the service layer of my app",
    "start": "2931720",
    "end": "2937400"
  },
  {
    "text": "uh because it gives us a little bit of a performance bump when we know we don't need to return to the calling thread now",
    "start": "2937400",
    "end": "2944079"
  },
  {
    "text": "caveat uh configurate false uses something called the synchronization context and almost every framework in",
    "start": "2944079",
    "end": "2951079"
  },
  {
    "text": "net has a synchronization context but the odd one out asp.net core so if you're using WPF if you're using Wind",
    "start": "2951079",
    "end": "2957400"
  },
  {
    "text": "forms if you're using Blazer zamon net Maui whatever they all have synchronization contexts so configur",
    "start": "2957400",
    "end": "2963000"
  },
  {
    "text": "false we'll make sure you don't return to the calling thread um with asp.net core was created they made the decision",
    "start": "2963000",
    "end": "2968960"
  },
  {
    "text": "not to include a synchronization context which if you don't know what a synchronization context is that's cool I've got a link to it on the web page",
    "start": "2968960",
    "end": "2975240"
  },
  {
    "text": "it's basically what allows net to return back to the UI thread for us but",
    "start": "2975240",
    "end": "2981040"
  },
  {
    "text": "definitely check out those blog posts if you want to get real deep into it because there's synchronization context and execution context this this all goes",
    "start": "2981040",
    "end": "2986760"
  },
  {
    "text": "way deeper than even what we're touching on today but right so in asp.net core there is no synchronization context so",
    "start": "2986760",
    "end": "2992559"
  },
  {
    "text": "that means if you write configure weight fals and asp.net cords the same thing is writing configure way true so slight",
    "start": "2992559",
    "end": "2998839"
  },
  {
    "text": "slight caveat there but for all the other net Frameworks it's good now there's also",
    "start": "2998839",
    "end": "3006280"
  },
  {
    "text": "configur weight options so again new in. net 8 we can we can use this enum we",
    "start": "3006280",
    "end": "3011799"
  },
  {
    "text": "it's a flag we can chain them together and just keep in mind the weird caveat with none is the same as configur false",
    "start": "3011799",
    "end": "3020079"
  },
  {
    "text": "meaning it will not return to the calling Trend it's going to be a little weird to get used to that but you know",
    "start": "3020079",
    "end": "3025559"
  },
  {
    "text": "by the time net 15 rolls around we'll be Masters we'll know these like the back of our hand but the other options are to",
    "start": "3025559",
    "end": "3031720"
  },
  {
    "text": "to continue on the capture context we can also say Force yielding which will force the thread switch even if the task",
    "start": "3031720",
    "end": "3037720"
  },
  {
    "text": "is completed and then there's also suppressed throwing which terrifies me and would love to know why and when",
    "start": "3037720",
    "end": "3044720"
  },
  {
    "text": "anybody would want to use it and again same caveat it still uses or still requires a synchron synchronization",
    "start": "3044720",
    "end": "3051720"
  },
  {
    "text": "context and so asp.net core you're the odd man out cuz you don't have one",
    "start": "3051720",
    "end": "3058119"
  },
  {
    "text": "utilize value task so when your method's hot path doesn't call a weight you can",
    "start": "3058119",
    "end": "3063280"
  },
  {
    "text": "return a value task instead of a task get that performance boost because now again you're pushing that to the stack",
    "start": "3063280",
    "end": "3068920"
  },
  {
    "text": "instead of allocating on the Heap and your coach is going to run that much faster and you'll notice a lot of things",
    "start": "3068920",
    "end": "3074640"
  },
  {
    "text": "under the hood in net now use value task instead of task as well so we can be",
    "start": "3074640",
    "end": "3079799"
  },
  {
    "text": "just as smart as those guys using value task in our code iyn AAL if you're streaming data we want to be able to",
    "start": "3079799",
    "end": "3087040"
  },
  {
    "text": "show that to the user we want to be able to uh stream that real time I think enumerable allows us to do that so",
    "start": "3087040",
    "end": "3093079"
  },
  {
    "text": "instead of telling the user to wait and just showing them a little spinning indicator saying loading loading loading we can actually give them what they're",
    "start": "3093079",
    "end": "3099640"
  },
  {
    "text": "looking for we can run our API calls in parallel and it's a better using experience for all of us and don't",
    "start": "3099640",
    "end": "3106599"
  },
  {
    "text": "forget oh I I forgot actually I didn't even tell you about a numerator cancellation let's jump back to the code",
    "start": "3106599",
    "end": "3112079"
  },
  {
    "text": "real quick so what is this so right so we're good C",
    "start": "3112079",
    "end": "3118559"
  },
  {
    "text": "developers so we're always going to provide a cancellation token for our async methods um and when you do that",
    "start": "3118559",
    "end": "3124480"
  },
  {
    "text": "for an iyc enumerable it'll yell at you it'll say hey you need to add this or",
    "start": "3124480",
    "end": "3130680"
  },
  {
    "text": "you should add this enumerator cancellation attribute and what this does this tells net that this is the",
    "start": "3130680",
    "end": "3139920"
  },
  {
    "text": "token to pass into the net async enumerable under the hood and the reason",
    "start": "3139920",
    "end": "3145000"
  },
  {
    "text": "this is really cool you know if we didn't have this in here we would have to check that token right like we would",
    "start": "3145000",
    "end": "3150920"
  },
  {
    "text": "have to say things like token. throw and we'd probably want to do it down here and we have to make all these checks",
    "start": "3150920",
    "end": "3157359"
  },
  {
    "text": "because if the token's canceled we should we should abort but with enumerator",
    "start": "3157359",
    "end": "3163200"
  },
  {
    "text": "cancellation attribute we don't have to do that because we're essentially telling net like hey every time you",
    "start": "3163200",
    "end": "3168839"
  },
  {
    "text": "iterate just check the token for me so not too not too difficult to remember because again if you forget it you'll",
    "start": "3168839",
    "end": "3175920"
  },
  {
    "text": "get a little warning message and it'll say don't forget that",
    "start": "3175920",
    "end": "3181400"
  },
  {
    "text": "attribute okay uh weight async so again if if we ever have to consume an an",
    "start": "3185760",
    "end": "3192119"
  },
  {
    "text": "async task method that doesn't allow us to pass in a cancellation token shame on them shame on that developer who wrote",
    "start": "3192119",
    "end": "3197880"
  },
  {
    "text": "it but that's cool we can just use the weight async extension method and pass in our cancellation token there and then",
    "start": "3197880",
    "end": "3204240"
  },
  {
    "text": "it's basically the same thing it's as if they did allow to pass in a cancellation token to their task all right and we also didn't get a",
    "start": "3204240",
    "end": "3211280"
  },
  {
    "text": "chance to talk about isync disposable uh so we can we can show it off here uh",
    "start": "3211280",
    "end": "3216359"
  },
  {
    "text": "it's just like ey disposable but you can await it so this is really cool for",
    "start": "3216359",
    "end": "3221640"
  },
  {
    "text": "certain things that take a long time to clean up uh if you've never used I disposable or I async disposable it's",
    "start": "3221640",
    "end": "3228359"
  },
  {
    "text": "basically a way for the creator of a class to clean up after itself so you might have some managed and unmanaged",
    "start": "3228359",
    "end": "3233920"
  },
  {
    "text": "resources you need to get rid of uh when you know know that the user consuming your class is done like file stream for",
    "start": "3233920",
    "end": "3240640"
  },
  {
    "text": "example it has a bunch of buffers and does a bunch of system IO and so when it",
    "start": "3240640",
    "end": "3245960"
  },
  {
    "text": "disposes of all those things it takes a while and we don't want to lock the calling thread so they now added isync",
    "start": "3245960",
    "end": "3252920"
  },
  {
    "text": "disposable to things like file stream and the way this works it's very similar",
    "start": "3252920",
    "end": "3258319"
  },
  {
    "text": "to the using block we're used to but instead we say a weight using and then again we can use configure a weight",
    "start": "3258319",
    "end": "3264200"
  },
  {
    "text": "false right here and so what happens is our code runs here in the middle so inside the curly brackets just like with",
    "start": "3264200",
    "end": "3270359"
  },
  {
    "text": "a normal disclosing block our code runs and then once it's done once we get to that End closing squiggle curly bracket",
    "start": "3270359",
    "end": "3278400"
  },
  {
    "text": "that's when that await executes so that's when you'll see that configure weight false actually",
    "start": "3278400",
    "end": "3283700"
  },
  {
    "text": "[Music] happened okay well now's your chance if you haven't already take out your phones",
    "start": "3283700",
    "end": "3289880"
  },
  {
    "text": "grab a picture this slide head to codet traveler. async AWA best practices because this is where you can find",
    "start": "3289880",
    "end": "3296480"
  },
  {
    "text": "everything we covered today this is where I've posted a video of this exact talk so if you have any friends or",
    "start": "3296480",
    "end": "3302160"
  },
  {
    "text": "co-workers who couldn't make it today you can send them this link and they can watch the video they can become asyn",
    "start": "3302160",
    "end": "3307640"
  },
  {
    "text": "experts just like us and like I mentioned a minute ago this is also where you can find the resources so uh",
    "start": "3307640",
    "end": "3313319"
  },
  {
    "text": "you can find links to the asyn A8 best practices Nate package so you can use safe fired forget uh there's links to",
    "start": "3313319",
    "end": "3319880"
  },
  {
    "text": "the open source demo that we did here today so you can compare good and bad uh what good view model bad view model side",
    "start": "3319880",
    "end": "3326319"
  },
  {
    "text": "side by side to remember what everything we touched on and like I said earlier there's this goes really deep you this",
    "start": "3326319",
    "end": "3333319"
  },
  {
    "text": "feels like an advanced topic that we just covered today we're still way up here at the tip of the iceberg uh so",
    "start": "3333319",
    "end": "3338839"
  },
  {
    "text": "there's more things you can learn about about how value task Works about what's an e uh what's a synchronization context",
    "start": "3338839",
    "end": "3345039"
  },
  {
    "text": "what's an execution context how all this stuff work under the hood I've included a bunch of uh blog posts there that were",
    "start": "3345039",
    "end": "3350960"
  },
  {
    "text": "helpful with me when I was learning and first starting out my asyn weight journey and I know they'll be helpful for you too",
    "start": "3350960",
    "end": "3357160"
  },
  {
    "text": "thank",
    "start": "3357160",
    "end": "3359359"
  },
  {
    "text": "[Applause]",
    "start": "3362470",
    "end": "3370479"
  },
  {
    "text": "you",
    "start": "3382000",
    "end": "3385000"
  }
]