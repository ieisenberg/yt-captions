[
  {
    "text": "okay good morning everyone how's the sound it's good good I hope you're",
    "start": "5879",
    "end": "11599"
  },
  {
    "text": "having a great time here at the Copenhagen developer Festival is it good so far it's great okay good so I'm going to",
    "start": "11599",
    "end": "19520"
  },
  {
    "text": "be talking about react Ser components today um and first of all why is that",
    "start": "19520",
    "end": "24599"
  },
  {
    "text": "something you should care about so we know that react and JavaScript is ever relevant and with react server",
    "start": "24599",
    "end": "30240"
  },
  {
    "text": "components we have a completely new way to build react apps because react server components allow us to fade the boundary",
    "start": "30240",
    "end": "36680"
  },
  {
    "text": "between the client and the server to create Rich user interfaces with minimal client side code while still maintaining",
    "start": "36680",
    "end": "43160"
  },
  {
    "text": "interactivity and performance so my goal today is going to be to introduce and motivate and provide resources about",
    "start": "43160",
    "end": "49960"
  },
  {
    "text": "react server components and before I start first a little bit about me uh my name is Aurora",
    "start": "49960",
    "end": "56079"
  },
  {
    "text": "I'm from Norway and I work as a consultant at ineta in Oslo and I'm a fullstack developer but I work mostly on",
    "start": "56079",
    "end": "61920"
  },
  {
    "text": "web these days uh and I'm actively building with server components in my current consultancy",
    "start": "61920",
    "end": "66960"
  },
  {
    "text": "project I bring to you my view as a developer joining The Cutting Edge web world and how learning and working with",
    "start": "66960",
    "end": "72680"
  },
  {
    "text": "modding technology the talking points of today will be first rendering strategies then",
    "start": "72680",
    "end": "78960"
  },
  {
    "text": "we'll get to react server components what they are how they work and the benefits and the drawbacks then we'll go",
    "start": "78960",
    "end": "84360"
  },
  {
    "text": "through the nextjs app router onto best practices and patterns when using RC nextjs and and afterwards I'm going to",
    "start": "84360",
    "end": "90640"
  },
  {
    "text": "show you a uh some examples of RC in a demo app that I've made and finally I'll give my thoughts on working with react",
    "start": "90640",
    "end": "97600"
  },
  {
    "text": "for components in a real project and the future uh of RC so let's begin with rendering",
    "start": "97600",
    "end": "103840"
  },
  {
    "text": "strategies you can't really have a talk about web development without mentioning them it's a crucial prerequisite and",
    "start": "103840",
    "end": "109240"
  },
  {
    "text": "especially in this uh talk about reactive components so I'm not going to mention every type of rendering um",
    "start": "109240",
    "end": "115399"
  },
  {
    "text": "strategy and the history of the web here but I'm going to go through some relevant topics and this is probably going to be familiar to a lot of",
    "start": "115399",
    "end": "122200"
  },
  {
    "text": "you static website rendering is the most basic rendering pattern where all the web pages are assembled befor hand and",
    "start": "122200",
    "end": "128399"
  },
  {
    "text": "then uploaded as static files to a storage bucket it can be built with plain HTML and CSS or combined with",
    "start": "128399",
    "end": "134640"
  },
  {
    "text": "JavaScript it's delivered exactly the way it's stored meaning nothing will change unless the code is changed and",
    "start": "134640",
    "end": "140760"
  },
  {
    "text": "although quite simple and efficient it doesn't handle Dynamic data or inte interactive websites well and it can be",
    "start": "140760",
    "end": "146519"
  },
  {
    "text": "very impra impractical to maintain a use cas could be an informational website for business you could say that this is",
    "start": "146519",
    "end": "153560"
  },
  {
    "text": "the old way of making websites and is not used very much anymore multi-page applications on the",
    "start": "153560",
    "end": "159480"
  },
  {
    "text": "other hand can handle Dynamic data so in an NPA HTML and data is merged on the",
    "start": "159480",
    "end": "164720"
  },
  {
    "text": "server per request and then sent as one package to the client the user will open the browser and be served the merge",
    "start": "164720",
    "end": "171560"
  },
  {
    "text": "result and the entire page reloads per request or navigation to a new page npas",
    "start": "171560",
    "end": "177560"
  },
  {
    "text": "can be created with for example the asp.net VC pattern or with PHP or Ruby on Rails use cases would typically be an",
    "start": "177560",
    "end": "185120"
  },
  {
    "text": "e-commerce app for example Amazon is an MPA so what are the pros of npas firstly",
    "start": "185120",
    "end": "192879"
  },
  {
    "text": "all the page content can be read in indexed by search engines because it's rendered HTML allowing them to appear in",
    "start": "192879",
    "end": "198360"
  },
  {
    "text": "search results and be optimized for it then there is no restriction on the number of pages that you can add",
    "start": "198360",
    "end": "204080"
  },
  {
    "text": "performance will be the same meaning they have unlimited scalability and lastly they can provide",
    "start": "204080",
    "end": "209120"
  },
  {
    "text": "more website insights for example Google analytics can create reports for each",
    "start": "209120",
    "end": "214200"
  },
  {
    "text": "page the cons though they have a slower overall performance because they fetch each page as a package of HTML CSS and",
    "start": "214200",
    "end": "221080"
  },
  {
    "text": "Js from the server as is being navigated to and next since every navigation",
    "start": "221080",
    "end": "226120"
  },
  {
    "text": "causes a full page reload and can be hard to add real time interactivity and they can be hard to",
    "start": "226120",
    "end": "231360"
  },
  {
    "text": "maintain as well because each page needs to be maintained separately then we have the single page",
    "start": "231360",
    "end": "237560"
  },
  {
    "text": "application or Spa also know known as client side rendering a spa will typically be a create react app uh a",
    "start": "237560",
    "end": "244680"
  },
  {
    "text": "react app of create react app or vit or angular vuejs app it's been the most",
    "start": "244680",
    "end": "250120"
  },
  {
    "text": "common way to create an application for many years so in a spa the bundle.js file includes everything needed to build",
    "start": "250120",
    "end": "257199"
  },
  {
    "text": "the app the entire HTML is created on the client when the user opens the browser on the apps URL and the page",
    "start": "257199",
    "end": "264040"
  },
  {
    "text": "will be blank until the JavaScript has been downloaded pared and executed and then the framework like react starts",
    "start": "264040",
    "end": "270080"
  },
  {
    "text": "building it inside the root div and finally loads the data then after it's loaded only data in Json format is",
    "start": "270080",
    "end": "277080"
  },
  {
    "text": "needed to update the UI the use cases here could be any web app that needs to be highly",
    "start": "277080",
    "end": "283080"
  },
  {
    "text": "interactive what are the pros of using a spa they're fast there's no lag they've got smooth Transitions and instant",
    "start": "283080",
    "end": "289479"
  },
  {
    "text": "information present after the initial load this is because everything is loaded initially and not requested per",
    "start": "289479",
    "end": "295600"
  },
  {
    "text": "page as with an NPA and second they're easy to debug because everything can be logged in the",
    "start": "295600",
    "end": "301000"
  },
  {
    "text": "browser because it's browser only such as data page elements and network operations and third since everything is",
    "start": "301000",
    "end": "307759"
  },
  {
    "text": "downloaded initially they can work offline afterwards cache data and then update when",
    "start": "307759",
    "end": "312880"
  },
  {
    "text": "possible but there are some significant cons to using a spot most importantly they have a slow initial load because",
    "start": "312880",
    "end": "319600"
  },
  {
    "text": "everything is um sorry because um which is increased with everything that is",
    "start": "319600",
    "end": "325280"
  },
  {
    "text": "added on to the bundle which uh such as additional libraries and while you're waiting for this uh you're just looking",
    "start": "325280",
    "end": "331400"
  },
  {
    "text": "at a blank screen and then afterwards a bunch of loading Spinners uh next search engines like",
    "start": "331400",
    "end": "337120"
  },
  {
    "text": "Google don't really know what's on the page because the Crawlers read strings like HTML so typically your spa won't",
    "start": "337120",
    "end": "343080"
  },
  {
    "text": "show up on the Google search results unless optimized in certain ways and they need JavaScript to function so",
    "start": "343080",
    "end": "349600"
  },
  {
    "text": "therefore they cannot be progressively enhanced and typically run poorly on devices with lower processing",
    "start": "349600",
    "end": "356360"
  },
  {
    "text": "power finally they cannot hide information from the CL client because the data only exists there meaning",
    "start": "356360",
    "end": "361960"
  },
  {
    "text": "things such as API Keys cannot be stored in a spa for that you would need a backend or a serverless",
    "start": "361960",
    "end": "368080"
  },
  {
    "text": "function so the key difference between a spa and an MPA uh or SBA in an SBA",
    "start": "368080",
    "end": "374160"
  },
  {
    "text": "everything loads initially and then only data in Json format is requested for making updates where is in an NPA the",
    "start": "374160",
    "end": "379840"
  },
  {
    "text": "entire page reload per request I'm just going to get my water I just realized I forgot my water",
    "start": "379840",
    "end": "387240"
  },
  {
    "text": "um do you have there I forgot um I I'll go with the water thank",
    "start": "390240",
    "end": "396199"
  },
  {
    "text": "you thank you so that brings us to SSR which",
    "start": "396199",
    "end": "401720"
  },
  {
    "text": "combines the advantages of an NPA and an SBA so instead of generating the entire application on the client from the",
    "start": "401720",
    "end": "407520"
  },
  {
    "text": "JavaScript bundle server side rendering means that you pre-render the initial pages on the server and then send them",
    "start": "407520",
    "end": "412919"
  },
  {
    "text": "on demand and this will let the user go to a URL and instantly see a fully forward page with components and then",
    "start": "412919",
    "end": "420160"
  },
  {
    "text": "they can start reading the content immediately without waiting for react to build the page the JavaScript required to interact",
    "start": "420160",
    "end": "426639"
  },
  {
    "text": "with the page is then sent alongside the HTML in relation to SSR we also have",
    "start": "426639",
    "end": "433039"
  },
  {
    "text": "something called Static site generation or SSG which lets us pre-render pages in The build process of the",
    "start": "433039",
    "end": "439280"
  },
  {
    "text": "app and then upload them to a storage bucket the result of SSG is the same as",
    "start": "439280",
    "end": "445199"
  },
  {
    "text": "with a quick and simple static repite rendering but we can generate the pages from for example react",
    "start": "445199",
    "end": "451120"
  },
  {
    "text": "code serers side rendering is typically implemented in the so-called meta Frameworks which are Frameworks around",
    "start": "451120",
    "end": "457319"
  },
  {
    "text": "other JavaScript Frameworks such as remix and next for react spel kit for spelt and KN for view so these",
    "start": "457319",
    "end": "464720"
  },
  {
    "text": "Frameworks are full stack implementations of a web app meaning they have their own server with things",
    "start": "464720",
    "end": "471039"
  },
  {
    "text": "happening let's get back to that JavaScript that is sent along with the pre-rendered pages in SSR so we still",
    "start": "471039",
    "end": "477360"
  },
  {
    "text": "need JavaScript thank you um to run uh stilling JavaScript to run on the client to handle any interactivity so instead",
    "start": "477360",
    "end": "484440"
  },
  {
    "text": "of conjuring all the Dom nodes from scratch the framework like react will adopt the existing HTML and this process",
    "start": "484440",
    "end": "491759"
  },
  {
    "text": "is known as hydration the framework will attach the event handlers and for example fire",
    "start": "491759",
    "end": "497440"
  },
  {
    "text": "effects and add State and then afterwards the page is fully interactive however it essentially has",
    "start": "497440",
    "end": "503960"
  },
  {
    "text": "to rebuild the entire tree and compare with the existing one to know what to hydrate",
    "start": "503960",
    "end": "510080"
  },
  {
    "text": "so this quote by react core team member Dan abov explains it well hydration is like watering the dry HTML with the",
    "start": "510080",
    "end": "516120"
  },
  {
    "text": "water of interactivity and event handlers so that's pretty much SSR in a",
    "start": "516120",
    "end": "522839"
  },
  {
    "text": "nutshell done by a modern framework like nextjs it lets you load the initial page quickly and then still have an",
    "start": "522839",
    "end": "528800"
  },
  {
    "text": "interactive",
    "start": "528800",
    "end": "531279"
  },
  {
    "text": "Spa so this sounds great but as a are isn't perfect because first after the",
    "start": "536040",
    "end": "542640"
  },
  {
    "text": "initial fetch of the HTML the browser will download the JS code parse it and then execut it and this causes the",
    "start": "542640",
    "end": "548880"
  },
  {
    "text": "pre-render HTML to look fully interactive but in fact it doesn't contain any JavaScript yet so the user",
    "start": "548880",
    "end": "555200"
  },
  {
    "text": "is stock in a place often referenced as uncanny valley where they will click a button but nothing happens and the time",
    "start": "555200",
    "end": "561959"
  },
  {
    "text": "until you can interact with the app might even be longer than what it would have been for a plain Spa version of the",
    "start": "561959",
    "end": "567160"
  },
  {
    "text": "app so why does this happen first you have to fetch everything before you can show",
    "start": "567160",
    "end": "574040"
  },
  {
    "text": "anything all the HTML with the data fetched must be processed on the server before it can be sent to the",
    "start": "574040",
    "end": "579920"
  },
  {
    "text": "client secondly you have to load everything before you can hydrate anything that's because react needs to",
    "start": "579920",
    "end": "586040"
  },
  {
    "text": "match the tree in the browser with the one from the server and third you have to hydrate everything before you can",
    "start": "586040",
    "end": "592079"
  },
  {
    "text": "interact with anything react starts the hydration and then doesn't stop until it's",
    "start": "592079",
    "end": "597760"
  },
  {
    "text": "done so there are many techniques being utilized in different Frameworks to solve the hydration problem partial",
    "start": "597760",
    "end": "604079"
  },
  {
    "text": "hydration can be used to defin that only certain components need to have Js attached to them for example in the",
    "start": "604079",
    "end": "609880"
  },
  {
    "text": "framework Astro you can Define which components to hydrate with a directive client load and this is what we're going",
    "start": "609880",
    "end": "614920"
  },
  {
    "text": "to be seeing in server components later with Progressive hydration you can lazily load components JavaScript for",
    "start": "614920",
    "end": "621800"
  },
  {
    "text": "example with Astro's client visible or with react suspense selective hydration lets you",
    "start": "621800",
    "end": "627959"
  },
  {
    "text": "prioritize which component to make make interactive first based on user interaction this is also possible with",
    "start": "627959",
    "end": "633560"
  },
  {
    "text": "suspense in react and there's a lot of other ways being implemented in other Frameworks such as with resum ability in",
    "start": "633560",
    "end": "642000"
  },
  {
    "text": "quick let's also mention the concept of streaming so it's a part of the fetch API of es6 it's available in react 18",
    "start": "642000",
    "end": "649120"
  },
  {
    "text": "and is a big part of react server components performance streaming allows you to break down a request into smaller",
    "start": "649120",
    "end": "655360"
  },
  {
    "text": "chunks and then progressively send those chunks from the server to the client where and then render each chunk as it",
    "start": "655360",
    "end": "661360"
  },
  {
    "text": "streamed in and we can use it to send components down to the client as soon as they've been",
    "start": "661360",
    "end": "667519"
  },
  {
    "text": "generated so finally with all that knowledge we can move to react Sur components and how they solve these",
    "start": "667519",
    "end": "673160"
  },
  {
    "text": "problems that we've been seeing what if we could decide when we needed the behavior of a spa uh or an",
    "start": "673160",
    "end": "679079"
  },
  {
    "text": "MPA all in the same stack and the code I'm going to be showing here will be you can see it again in the demo",
    "start": "679079",
    "end": "686200"
  },
  {
    "text": "later so what are they reacts are components are components that run exclusively on the server server",
    "start": "686200",
    "end": "693000"
  },
  {
    "text": "components never render they run once on the server to generate the UI and then",
    "start": "693000",
    "end": "698320"
  },
  {
    "text": "their JavaScript is never sent to the client and when you say rendered on the",
    "start": "698320",
    "end": "703480"
  },
  {
    "text": "server I mean the server that is part of the full stack framework such as nextjs or during the build of the app not some.",
    "start": "703480",
    "end": "710800"
  },
  {
    "text": "net rest apbi this is the front end's own back end which in many cases eliminate the need for writing a rest",
    "start": "710800",
    "end": "717800"
  },
  {
    "text": "API server components differ from service at rendering because they are never hydrated meaning the resulting app",
    "start": "717800",
    "end": "724240"
  },
  {
    "text": "is partially hydrated hydration to non RC's components can happen concurrently",
    "start": "724240",
    "end": "730079"
  },
  {
    "text": "while RSS are streaming in since the compute load is shared between the client and the",
    "start": "730079",
    "end": "735800"
  },
  {
    "text": "server and since RC's are exclusively run on the server we can write database queres right inside our",
    "start": "735800",
    "end": "742240"
  },
  {
    "text": "components so here's an example of a simple server component called jokes list I can query my database through an",
    "start": "742240",
    "end": "747920"
  },
  {
    "text": "orm like Prisma have the data available and component fully rendered before it sent to the",
    "start": "747920",
    "end": "753240"
  },
  {
    "text": "client server components also introduce this uh type of asnc component basically",
    "start": "753240",
    "end": "758440"
  },
  {
    "text": "an Asing function that can as cleanly fetch data on the server without causing any issues for the client side and you",
    "start": "758440",
    "end": "765360"
  },
  {
    "text": "can do any kind of data fetching in in here such as calling your",
    "start": "765360",
    "end": "769800"
  },
  {
    "text": "API because Rea components only run on the server this means that a big chunk of react API is incompatible with them",
    "start": "771440",
    "end": "778920"
  },
  {
    "text": "for for example we can't use State because State can change but server components can't reender and we can't",
    "start": "778920",
    "end": "784720"
  },
  {
    "text": "use effects because uh effects only run after the render on the client and server components never make it to the",
    "start": "784720",
    "end": "790839"
  },
  {
    "text": "client we also can't use any browser specific apis because they don't exist there such as",
    "start": "790839",
    "end": "796959"
  },
  {
    "text": "window.location and we can't use on click and onchange because they require",
    "start": "796959",
    "end": "802000"
  },
  {
    "text": "JavaScript so server components themselves are simple but the react server component world is more complex",
    "start": "802000",
    "end": "808680"
  },
  {
    "text": "because we still want to have interactive components that include State and effect and event",
    "start": "808680",
    "end": "813760"
  },
  {
    "text": "handlers so because of this distinction there are now two types of react components server components and client",
    "start": "813760",
    "end": "820079"
  },
  {
    "text": "components and the client components will be the normal react components that you can do whatever you're used to",
    "start": "820079",
    "end": "826240"
  },
  {
    "text": "inside but it's worth noting that they're still pre-rendered on the server during the build and then hyd it on the",
    "start": "826240",
    "end": "832000"
  },
  {
    "text": "client as with the preac preexisting SSR so to make a client component you",
    "start": "832000",
    "end": "838720"
  },
  {
    "text": "must mark them with use client and that's how you define that you can use things like State and effects and on",
    "start": "838720",
    "end": "844519"
  },
  {
    "text": "click as normal and that this component will have its JS in the",
    "start": "844519",
    "end": "849759"
  },
  {
    "text": "browser so here's an explanation from the nextjs app R docs on the limitation in server and client components if you",
    "start": "851720",
    "end": "858480"
  },
  {
    "text": "need to fetch data access backend resources keep sensitive information on the server or keep large dependencies on",
    "start": "858480",
    "end": "864120"
  },
  {
    "text": "the server you would be using a server component and if you need to add interactivity like unli AR change or use",
    "start": "864120",
    "end": "870560"
  },
  {
    "text": "state or effects or use browser only apis you would be using a client",
    "start": "870560",
    "end": "876800"
  },
  {
    "text": "component uh how do they work what happens is that react renders server",
    "start": "879800",
    "end": "884959"
  },
  {
    "text": "components into a special format called the RSC payload and this is a streamable format that rep represents the Dom it's",
    "start": "884959",
    "end": "892519"
  },
  {
    "text": "kind of like a serialized version of a react tree and the RC payload contains rendered the render server components",
    "start": "892519",
    "end": "899959"
  },
  {
    "text": "with holes of references to client components and the props they pass down to them it is being used both to",
    "start": "899959",
    "end": "907120"
  },
  {
    "text": "generate the pre-rendered HTML on the server and to update the Dom on the client without a need for",
    "start": "907120",
    "end": "914040"
  },
  {
    "text": "JavaScript so here's what it looks like in the console we have the initial server side rendered HTML of the",
    "start": "915120",
    "end": "923120"
  },
  {
    "text": "page as well as the RC payloads which is identifiable by the underscore RC name",
    "start": "923199",
    "end": "930959"
  },
  {
    "text": "and multiple client side JS bundles and these are all used together to build the interactive",
    "start": "931519",
    "end": "938800"
  },
  {
    "text": "page and since this jokes this component is defined as server only it doesn't need to be hydrated at all and its",
    "start": "939279",
    "end": "945959"
  },
  {
    "text": "JavaScript is never shipped to the client as with everything it's quite complex when you start digging so that's",
    "start": "945959",
    "end": "952279"
  },
  {
    "text": "that's okay for now when an RSC uh needs to be re",
    "start": "952279",
    "end": "957639"
  },
  {
    "text": "rendered due to uh the data being changed or has to be updated it refreshes on the server and then",
    "start": "957639",
    "end": "963399"
  },
  {
    "text": "seamlessly merges into the existing Dom without a hard refresh updating only the",
    "start": "963399",
    "end": "968440"
  },
  {
    "text": "parts that have changed as a result the client State can be preserved even as part of the parts",
    "start": "968440",
    "end": "974800"
  },
  {
    "text": "of the view are updated from the server and this is possible because the RC P only contains references to the client",
    "start": "974800",
    "end": "980920"
  },
  {
    "text": "components and don't doesn't have to do anything with them what are the benefits of using",
    "start": "980920",
    "end": "987560"
  },
  {
    "text": "react server components firstly data fetching data fetching can happen in components before they're sent",
    "start": "987560",
    "end": "994279"
  },
  {
    "text": "to the client and will be faster since they can call the API uh or database in proximity to the resource and inside",
    "start": "994279",
    "end": "1001720"
  },
  {
    "text": "RC's you have access to all your backend resources next they can ensure security",
    "start": "1001720",
    "end": "1007440"
  },
  {
    "text": "by keeping sensitive data and logic like API keys on the server and never risk exposing",
    "start": "1007440",
    "end": "1013519"
  },
  {
    "text": "them then caching so by rendering on the server the result can be cached and reused on subsequent request and across",
    "start": "1013519",
    "end": "1020680"
  },
  {
    "text": "user users and bundle size so server components allow you to keep large",
    "start": "1020680",
    "end": "1026720"
  },
  {
    "text": "dependencies on the server meaning you can exclude all the JS for those components from the bundle without",
    "start": "1026720",
    "end": "1031959"
  },
  {
    "text": "restricting your use of them for example uh heavy Library like low Dash which will overall lead to a more performant",
    "start": "1031959",
    "end": "1040319"
  },
  {
    "text": "application server components can furthermore be streamed meaning they can be sent in chunks as viewed as they",
    "start": "1040319",
    "end": "1045480"
  },
  {
    "text": "become R so therefore they integrate naturally with react 18 suspense and finally developer",
    "start": "1045480",
    "end": "1052400"
  },
  {
    "text": "experience there's a lot less hassle on the client side with effects and keeping data in the state just fetch it asnc off",
    "start": "1052400",
    "end": "1058080"
  },
  {
    "text": "the client RC however comes with some",
    "start": "1058080",
    "end": "1063880"
  },
  {
    "text": "drawbacks first they require a framework in practice you will only be using them in a meta framework like nextjs due to",
    "start": "1063880",
    "end": "1070760"
  },
  {
    "text": "their need for a certain bundler and router setup which means you will become bound to the framework's way of things",
    "start": "1070760",
    "end": "1076400"
  },
  {
    "text": "and you have to follow their rules second they create increased complexity",
    "start": "1076400",
    "end": "1082120"
  },
  {
    "text": "so as a web dev you now have to understand a lot more Concepts than before when you were just making a spa with create react app such as what you",
    "start": "1082120",
    "end": "1089400"
  },
  {
    "text": "can and can't do on the server next it can be hard to onboard new developers because learning curve is",
    "start": "1089400",
    "end": "1095880"
  },
  {
    "text": "a lot steeper when aiming to write quality apps and finally it's still relatively",
    "start": "1095880",
    "end": "1102039"
  },
  {
    "text": "new and not everything has been figured out such as testing and compatibility with other libraries for example many",
    "start": "1102039",
    "end": "1108280"
  },
  {
    "text": "CSS JS libraries like emotion and Stell components don't work with RC's so um",
    "start": "1108280",
    "end": "1114280"
  },
  {
    "text": "that for that we need to use Alternatives like Laria pandac CSS material or materialized pigment CSS",
    "start": "1114280",
    "end": "1119480"
  },
  {
    "text": "which is a new library that's aiming to solve this problem and there's been a lot of bugs",
    "start": "1119480",
    "end": "1125039"
  },
  {
    "text": "in the app router uh since it was marked as stable but it's really seeming to settle down uh",
    "start": "1125039",
    "end": "1132159"
  },
  {
    "text": "now so how do you get started with rsc's the most reasonable way right now is in",
    "start": "1132159",
    "end": "1137280"
  },
  {
    "text": "the nextjs app router available from version 13.4 and onwards and nextjs is",
    "start": "1137280",
    "end": "1143159"
  },
  {
    "text": "made by versell and is Battle Tes in an Enterprise ready react server components",
    "start": "1143159",
    "end": "1148200"
  },
  {
    "text": "are a part of react 19 but developed closely with versell and nextjs which is good good for building apps with them",
    "start": "1148200",
    "end": "1154320"
  },
  {
    "text": "because everything is optimized and working smoothly and you have the entire react ecosystem",
    "start": "1154320",
    "end": "1159840"
  },
  {
    "text": "following so to make an xjs 14 app uh run this npx crate command and define",
    "start": "1159840",
    "end": "1165559"
  },
  {
    "text": "whether you want typescript and tailwind and such and you need the app router option set to yes to use",
    "start": "1165559",
    "end": "1172760"
  },
  {
    "text": "RC so that will generate the boiler plate for you and you can start using them right away there's not a lot of",
    "start": "1175200",
    "end": "1181039"
  },
  {
    "text": "files here to confuse you it's mostly standard files such as package Json ORS config and some config for TWI and",
    "start": "1181039",
    "end": "1186840"
  },
  {
    "text": "eslint so what matters here is everything inside the app",
    "start": "1186840",
    "end": "1192000"
  },
  {
    "text": "directory in the app router you define routes by making folders containing a page TSX that's what makes a valid route",
    "start": "1192000",
    "end": "1200240"
  },
  {
    "text": "so in this example I have some routes it's SL jokes and then a SL new and a slash joke idea ID sub route which is a",
    "start": "1200240",
    "end": "1208320"
  },
  {
    "text": "dynamic route because it's based on the ID that you're currently on in the URL which is a meaning it's a parameterized",
    "start": "1208320",
    "end": "1214960"
  },
  {
    "text": "route and then you can also use files with reserved Nam such as not found. TSX",
    "start": "1214960",
    "end": "1220080"
  },
  {
    "text": "air TSX which are error boundaries that render inside the layout of the route as",
    "start": "1220080",
    "end": "1225760"
  },
  {
    "text": "well as loading TSX which creates a suspense boundary around the page and all of these can be graned you can add",
    "start": "1225760",
    "end": "1232640"
  },
  {
    "text": "them to the rout or to subbrow or wherever you want and there's more features like uh ignoring folders from",
    "start": "1232640",
    "end": "1238480"
  },
  {
    "text": "routes with underscore or grouping them with parenthesis you can also Define API",
    "start": "1238480",
    "end": "1244760"
  },
  {
    "text": "routes in here like in the pages router so the route TS file is a reserved name and will allow you to create API",
    "start": "1244760",
    "end": "1252400"
  },
  {
    "text": "endpoints and then there is support for SEO with for example meta tags they can be added to any page or layout and can",
    "start": "1253559",
    "end": "1260280"
  },
  {
    "text": "also be generated dynamically for example using the R",
    "start": "1260280",
    "end": "1265000"
  },
  {
    "text": "prams so with nextjs comes a lot of optimization such as caching all the",
    "start": "1265640",
    "end": "1271080"
  },
  {
    "text": "pages generated in the build can be cached on verl CDN if you host it there and there are additional caching",
    "start": "1271080",
    "end": "1276520"
  },
  {
    "text": "mechanisms like the router cache which caches RC payloads and all of these can be enabled uh yeah and there's also",
    "start": "1276520",
    "end": "1285000"
  },
  {
    "text": "built-in code splitting for lazy loading JS and nextjs optimize your images if",
    "start": "1285000",
    "end": "1290120"
  },
  {
    "text": "you use the image tags and do things like preload pages when a user hovers a link and it has built-in font",
    "start": "1290120",
    "end": "1298360"
  },
  {
    "text": "optimization so how do you use reacts in nexts the right way what are the best",
    "start": "1298360",
    "end": "1303880"
  },
  {
    "text": "practices and development patterns to get the most out of them the best practice is going to be to",
    "start": "1303880",
    "end": "1309440"
  },
  {
    "text": "move your client code to the leaves of the component Tree in this way you ensure you do not ship any necessary",
    "start": "1309440",
    "end": "1314840"
  },
  {
    "text": "JavaScript to the client and then react will only hydrate these client leaves as we know as partial",
    "start": "1314840",
    "end": "1321400"
  },
  {
    "text": "hydration you could in theory just put use client on your rout and then code however you want but that just means all",
    "start": "1321400",
    "end": "1327480"
  },
  {
    "text": "your components have their JS shipped and be hydrated which just takes us back to the standard service",
    "start": "1327480",
    "end": "1334440"
  },
  {
    "text": "rendering but this doesn't mean that you have to be afraid of using client components it's completely normal to",
    "start": "1334440",
    "end": "1340279"
  },
  {
    "text": "have bigger client uh component sections when there are parts of the app that are very Interactive",
    "start": "1340279",
    "end": "1348320"
  },
  {
    "text": "to use a client component in a server component you simply import it so here the delete functionality has been",
    "start": "1350440",
    "end": "1356360"
  },
  {
    "text": "extracted to a component with used client because it needs an onclick event",
    "start": "1356360",
    "end": "1361440"
  },
  {
    "text": "handler however when going the other way around you cannot do the same without turning the server component into a",
    "start": "1361440",
    "end": "1367679"
  },
  {
    "text": "client component you instead need to slide it as a prop and they will fit as separate",
    "start": "1367679",
    "end": "1373960"
  },
  {
    "text": "chunks into the client tree and the client component doesn't really know what's being passed down here and this",
    "start": "1373960",
    "end": "1379919"
  },
  {
    "text": "can be uh referred to as the donut",
    "start": "1379919",
    "end": "1383840"
  },
  {
    "text": "pattern so this means that we can make a tree that looks like anything we want",
    "start": "1385600",
    "end": "1390720"
  },
  {
    "text": "and we can add client side logic in the parent components as well here only the green components are",
    "start": "1390720",
    "end": "1397120"
  },
  {
    "text": "hydrated and contain JS the rest is just HTML with this pattern we can",
    "start": "1397120",
    "end": "1403760"
  },
  {
    "text": "furthermore Implement things like State Management so by providing a wrapper client component with state for example",
    "start": "1403760",
    "end": "1410000"
  },
  {
    "text": "using react context which only works on the client side we can use the state in the leaves without converting the server",
    "start": "1410000",
    "end": "1416279"
  },
  {
    "text": "components in between and when combined this allows us to make apps that are extremely",
    "start": "1416279",
    "end": "1422520"
  },
  {
    "text": "performant due to their large amount of nonhydrated content while still being fully",
    "start": "1422520",
    "end": "1427799"
  },
  {
    "text": "interactive you could have a donnut pattern collapsible sidebar a theme toggle provider a search and then",
    "start": "1427799",
    "end": "1433440"
  },
  {
    "text": "buttons on the client side and then you can share your state between components however you need",
    "start": "1433440",
    "end": "1440440"
  },
  {
    "text": "when building an RC component Tre there will be some limitations between the client and the server components though",
    "start": "1441799",
    "end": "1448520"
  },
  {
    "text": "so for example since the client components exist on the client and the server components on the server props",
    "start": "1448520",
    "end": "1454480"
  },
  {
    "text": "need to be serializable because we are crossing the server boundary here and that means that we cannot pass functions",
    "start": "1454480",
    "end": "1461000"
  },
  {
    "text": "through the server boundary so instead we need to create API endpoints to communicate between them when we can't",
    "start": "1461000",
    "end": "1467480"
  },
  {
    "text": "use props or react server actions to simplify the process which I will talk more about",
    "start": "1467480",
    "end": "1474399"
  },
  {
    "text": "later so how do we manage our data with RC and the app",
    "start": "1474520",
    "end": "1479679"
  },
  {
    "text": "router I already showed that that you can make database queries through an over like Prisma but you can also use",
    "start": "1479679",
    "end": "1484960"
  },
  {
    "text": "the fetch API and there are a bunch of parameters here that you can add such as cach duration tags for validation and uh",
    "start": "1484960",
    "end": "1491640"
  },
  {
    "text": "re validating the data and headers and more in this example I'm showing what you could potentially do for example",
    "start": "1491640",
    "end": "1497760"
  },
  {
    "text": "getting a cook ke and making an authenticated request to an API and geta getting data this way in",
    "start": "1497760",
    "end": "1503559"
  },
  {
    "text": "your server uh is efficient because on the server you have this privileged environment with everything you need",
    "start": "1503559",
    "end": "1510679"
  },
  {
    "text": "accessible and if you use the same data in multiple components in a tree you do not have to fetch it in the root and",
    "start": "1514120",
    "end": "1520240"
  },
  {
    "text": "then pass it down you can fetch it in each component where it's required because it's automatically",
    "start": "1520240",
    "end": "1525960"
  },
  {
    "text": "duped and you can compare this pattern to react query will will where you will call your hooks wherever they are needed",
    "start": "1525960",
    "end": "1531799"
  },
  {
    "text": "and they will all call the same cache data and in addition you can pass it",
    "start": "1531799",
    "end": "1536840"
  },
  {
    "text": "down to client components when you need it for example as the options of an autocomplete",
    "start": "1536840",
    "end": "1543320"
  },
  {
    "text": "component so what about data mutation I mentioned that you can create API endpoints like in the pages router",
    "start": "1543720",
    "end": "1550720"
  },
  {
    "text": "but let's skip that for now and look at something way better called server actions server actions just became",
    "start": "1550720",
    "end": "1556600"
  },
  {
    "text": "stable with the release of next 14 we are by the way almost at the 15 now and",
    "start": "1556600",
    "end": "1561840"
  },
  {
    "text": "they are the preferred way to mutate data they kind of complete the whole server component",
    "start": "1561840",
    "end": "1567880"
  },
  {
    "text": "story so it's pretty simple you mark a function or a file with use server and",
    "start": "1567880",
    "end": "1573120"
  },
  {
    "text": "the nextjs will make a hidden API endpoint for you allowing you to call it from anywhere like from a client",
    "start": "1573120",
    "end": "1579279"
  },
  {
    "text": "component which solves this problem of passing functions between the server and the client and in addition you get type",
    "start": "1579279",
    "end": "1586440"
  },
  {
    "text": "safety between the server and the client through our PC so here I have a file marked with use",
    "start": "1586440",
    "end": "1593559"
  },
  {
    "text": "server turning uh the function inside it into a server action and I can now call",
    "start": "1593559",
    "end": "1599120"
  },
  {
    "text": "it from a client component and that's basically all I need to do but I also",
    "start": "1599120",
    "end": "1604559"
  },
  {
    "text": "need to tell nextjs that I have changed something in the data when I've done my mutation so that it can regenerate these",
    "start": "1604559",
    "end": "1611159"
  },
  {
    "text": "server components uh and I do that by saying revalidate path which will Val you f new",
    "start": "1611159",
    "end": "1617399"
  },
  {
    "text": "data from the database so looking at our data management graph",
    "start": "1617399",
    "end": "1623559"
  },
  {
    "text": "here the server action seamlessly takes us back from the client and to the server",
    "start": "1623559",
    "end": "1629640"
  },
  {
    "text": "again server actions also integrate nicely with form submissions so in this",
    "start": "1634080",
    "end": "1639279"
  },
  {
    "text": "example I have a form and a function marked with use server and when submitting the form with the action",
    "start": "1639279",
    "end": "1645039"
  },
  {
    "text": "property uh which is a part of react 19 being call this wave with a function it",
    "start": "1645039",
    "end": "1650360"
  },
  {
    "text": "can without JavaScript call the server action and add a joke to the database and again I have to tell xgs to",
    "start": "1650360",
    "end": "1656039"
  },
  {
    "text": "revalidate The View and there's so many possibilities here and it's extremely efficient to develop",
    "start": "1656039",
    "end": "1663279"
  },
  {
    "text": "with finally here's an example of something I have made for my current consultancy project where we use",
    "start": "1663279",
    "end": "1669080"
  },
  {
    "text": "RC so in this example there's a client component collapsible container and a server component fetching data mapping",
    "start": "1669080",
    "end": "1675480"
  },
  {
    "text": "to server component messages and then an in interactive client component input field submitting with server actions and",
    "start": "1675480",
    "end": "1682559"
  },
  {
    "text": "there's also a wrapper here to handle automatic scroll so in this example uh",
    "start": "1682559",
    "end": "1688080"
  },
  {
    "text": "I'm weaving the server and the client together meaning everything that does not have to be on the client can be only",
    "start": "1688080",
    "end": "1693399"
  },
  {
    "text": "on the server so that's pretty much it react server components in the app router",
    "start": "1693399",
    "end": "1699360"
  },
  {
    "text": "allow you to do whatever you need to do whether it's MPI functionality or interactive Spa stuff or include SSR or",
    "start": "1699360",
    "end": "1705440"
  },
  {
    "text": "SEO or any kind of functionality you need all in in the same stack and optimized which is pretty amazing so",
    "start": "1705440",
    "end": "1712480"
  },
  {
    "text": "hopefully you remember some of these terms by now it's a lot and V server",
    "start": "1712480",
    "end": "1717679"
  },
  {
    "text": "components will kind of force you into this new mental model and architecture so let's uh get into a demo",
    "start": "1717679",
    "end": "1724720"
  },
  {
    "text": "of this joke app it's a remake of the tutorial app from the remix docs but of",
    "start": "1724720",
    "end": "1729960"
  },
  {
    "text": "course very different because it uses RC and tailwind and server actions and it's also containing very simple",
    "start": "1729960",
    "end": "1735960"
  },
  {
    "text": "implementations so that the code is not clogged with complexity for the sake of the",
    "start": "1735960",
    "end": "1741919"
  },
  {
    "text": "demo so um the setup here is of course nextjs app router and Tailwind for CSS",
    "start": "1743480",
    "end": "1749919"
  },
  {
    "text": "and responsiveness and then I'm using Prisma as an orm and um an Azure sqle",
    "start": "1749919",
    "end": "1755480"
  },
  {
    "text": "database so I'm on the the main page here I'm just going to jump to the joke page and in this",
    "start": "1755480",
    "end": "1761360"
  },
  {
    "text": "page um you have a list of jokes that you can view um and then you have add a button",
    "start": "1761360",
    "end": "1768640"
  },
  {
    "text": "to add a new one um programmers for example why are",
    "start": "1768640",
    "end": "1774000"
  },
  {
    "text": "assembly programmers always soaking wet because they work below C Level so let's",
    "start": "1774000",
    "end": "1779320"
  },
  {
    "text": "add that one it's pretty good so I can add it and then finally I can also delet",
    "start": "1779320",
    "end": "1785840"
  },
  {
    "text": "it and that's uh basically the whole main functionality of the app so let's look at the code for",
    "start": "1785840",
    "end": "1793159"
  },
  {
    "text": "this um so in this uh this is the app router and there's the boil plate that",
    "start": "1793279",
    "end": "1798480"
  },
  {
    "text": "you saw earlier and then there's some Prisma stuff uh form validations the",
    "start": "1798480",
    "end": "1804200"
  },
  {
    "text": "public folder for public assets I have a lib folder here with my data access layer components and UI",
    "start": "1804200",
    "end": "1811080"
  },
  {
    "text": "components and finally the app router so if we look inside the app router we have the layout here which",
    "start": "1811080",
    "end": "1818799"
  },
  {
    "text": "there's nothing inside and the page which is this main page here and this is all server stuff no interactivity needed",
    "start": "1818799",
    "end": "1825919"
  },
  {
    "text": "just HTML here and then I can go to the jokes",
    "start": "1825919",
    "end": "1831159"
  },
  {
    "text": "route which is here because of this filebase routing and the layout here is",
    "start": "1831159",
    "end": "1837039"
  },
  {
    "text": "containing a header a sidebar which is now uh in the middle because of the responsiveness but still and a footer so",
    "start": "1837039",
    "end": "1844399"
  },
  {
    "text": "let's just have a look at these so the header it's only containing links no interactivity it can just be on the",
    "start": "1844399",
    "end": "1850720"
  },
  {
    "text": "server no js on the client for this one then there is a footer same thing",
    "start": "1850720",
    "end": "1856240"
  },
  {
    "text": "here just links nothing special and then the sidebar so that's",
    "start": "1856240",
    "end": "1861320"
  },
  {
    "text": "the footer here by the way sorry and this um sidebar which you will see is a sidebar in this um normal",
    "start": "1861320",
    "end": "1869039"
  },
  {
    "text": "View and um it's containing a random joke button this one here the jokes list",
    "start": "1869039",
    "end": "1876200"
  },
  {
    "text": "component and a nav button so let's begin by looking at this random joke",
    "start": "1876200",
    "end": "1882000"
  },
  {
    "text": "button uh which is just getting a random joke and this is using a client side uh",
    "start": "1882000",
    "end": "1888039"
  },
  {
    "text": "hook used router to uh refresh the page and that's why it has to be a client",
    "start": "1888039",
    "end": "1893480"
  },
  {
    "text": "component with this used client directive meaning the JavaScript to make this work and this onclick possible is",
    "start": "1893480",
    "end": "1899760"
  },
  {
    "text": "shipped to the client the jokes list component is",
    "start": "1899760",
    "end": "1904799"
  },
  {
    "text": "fetching its own data it's async and it's awaiting a database call and it's a server component because it's accessing",
    "start": "1904799",
    "end": "1911159"
  },
  {
    "text": "our database here and let's look at the function it's just finding many uh jokes",
    "start": "1911159",
    "end": "1916799"
  },
  {
    "text": "from the database here on the server and mapping them to links and the nav button is still uh",
    "start": "1916799",
    "end": "1925200"
  },
  {
    "text": "it's also just a server component with just a link and we can actually go to this",
    "start": "1925200",
    "end": "1931279"
  },
  {
    "text": "route and have a look at the new uh page here so there's a page makes it a",
    "start": "1931279",
    "end": "1938799"
  },
  {
    "text": "route we have the new here and I'm just going to do this again so you can",
    "start": "1938799",
    "end": "1945880"
  },
  {
    "text": "see and it's going to add excuse me add a joke there and this is using the form action",
    "start": "1945880",
    "end": "1954039"
  },
  {
    "text": "property to bind to a uh server action here and this server action is uh",
    "start": "1954039",
    "end": "1961720"
  },
  {
    "text": "defined with us server meaning we can use it from anywhere with this hidden API endpoint defined uh or created by",
    "start": "1961720",
    "end": "1968159"
  },
  {
    "text": "nextjs and it's mutating or it's um uh adding a joke to the database here we're",
    "start": "1968159",
    "end": "1974000"
  },
  {
    "text": "validating the path to regenerate the jokeis component and then redirecting to this",
    "start": "1974000",
    "end": "1979440"
  },
  {
    "text": "joke and there's also an add button because if you noticed that I have this interactivity while I'm waiting here",
    "start": "1979440",
    "end": "1986440"
  },
  {
    "text": "it's saying adding so that's why it's a client component because it requires uh realtime",
    "start": "1986440",
    "end": "1992240"
  },
  {
    "text": "interactivity and it's using a new react 19 hook called use form status which will get the current state of the form",
    "start": "1992240",
    "end": "1998799"
  },
  {
    "text": "that it's inside and this can be used to make um way better components than this",
    "start": "1998799",
    "end": "2004240"
  },
  {
    "text": "maybe something like a generalized subit button with with a spinner something like that but in this case it's very",
    "start": "2004240",
    "end": "2010799"
  },
  {
    "text": "simple then finally the joke ID route which is when you're currently selected",
    "start": "2010799",
    "end": "2016240"
  },
  {
    "text": "a joke here this is the ID and it's a dynamic route with a page which is",
    "start": "2016240",
    "end": "2022320"
  },
  {
    "text": "generating some metadata here dynamically that's why you can see it says arras joke at the top here so it's getting a joke based on the",
    "start": "2022320",
    "end": "2030639"
  },
  {
    "text": "params excuse me from the database and throwing it not found if",
    "start": "2030639",
    "end": "2035679"
  },
  {
    "text": "there if it didn't find anything and then it will um display it with the",
    "start": "2035679",
    "end": "2041559"
  },
  {
    "text": "content and it also has this delete joke button and by the way if a not found is",
    "start": "2041559",
    "end": "2046679"
  },
  {
    "text": "thrown you can handle it with a not found error boundary or if there's a different error it will be in the error",
    "start": "2046679",
    "end": "2053000"
  },
  {
    "text": "I can actually show that to you so this is not found okay so it rendered our not found error boundary here there you",
    "start": "2053000",
    "end": "2061358"
  },
  {
    "text": "go and there's a loading so that when you click something and it's waiting for it to uh load these are already cached",
    "start": "2061359",
    "end": "2068040"
  },
  {
    "text": "but it will display this uh skeleton and the delete button is also",
    "start": "2068040",
    "end": "2073599"
  },
  {
    "text": "giving me this interactive feedback which is of course a client component to",
    "start": "2073599",
    "end": "2078960"
  },
  {
    "text": "be able to do that because this is a JavaScript thing and this is uh using a server",
    "start": "2078960",
    "end": "2084398"
  },
  {
    "text": "action because we're on the client we have to get to the server good thing we have server actions to uh delete a joke",
    "start": "2084399",
    "end": "2091760"
  },
  {
    "text": "based on an ID here with a use server directive and it's also using a transition with can be async as a part",
    "start": "2091760",
    "end": "2099200"
  },
  {
    "text": "of react 19 which will give us the pending state of uh whatever is inside",
    "start": "2099200",
    "end": "2104720"
  },
  {
    "text": "so that's why I'm seeing this deleting here that's uh it for the main part of",
    "start": "2104720",
    "end": "2111839"
  },
  {
    "text": "this app but I have made some additional demo routes here to display some of the other Concepts I've been",
    "start": "2111839",
    "end": "2118800"
  },
  {
    "text": "explaining so let's have a look at those so I'm going to head over to so I",
    "start": "2118800",
    "end": "2124880"
  },
  {
    "text": "have this demo route here with lots of routes and and um this is displaying the donut pattern uh that I showed in the",
    "start": "2124880",
    "end": "2131960"
  },
  {
    "text": "slides how you conest them so you can do server component which is the main one here client component server component",
    "start": "2131960",
    "end": "2139359"
  },
  {
    "text": "if you slot it as a prop like this so the client component doesn't really care what's being passed down it's just doing",
    "start": "2139359",
    "end": "2145599"
  },
  {
    "text": "its thing and the server component has already been rendered on the server and if we have a look in the console the",
    "start": "2145599",
    "end": "2151960"
  },
  {
    "text": "server component it's doing outer server console log inner server and this is logged on the server",
    "start": "2151960",
    "end": "2159440"
  },
  {
    "text": "and in the client um when I click see if I can get some more space here it will only be",
    "start": "2159440",
    "end": "2165800"
  },
  {
    "text": "logged on the client here so this is the kind of way you can Nest them",
    "start": "2165800",
    "end": "2170880"
  },
  {
    "text": "together the next route I want to show you um is an example of revalidation so",
    "start": "2173200",
    "end": "2181319"
  },
  {
    "text": "I mentioned that uh when you can refresh an RC it doesn't remove the client state that you already have there",
    "start": "2181319",
    "end": "2188079"
  },
  {
    "text": "so if I'm creating some client State here and I'm going to add a new joke it will not destroy any of the",
    "start": "2188079",
    "end": "2195119"
  },
  {
    "text": "client State that's already there in the page and it didn't do any hard refresh or",
    "start": "2195119",
    "end": "2202200"
  },
  {
    "text": "anything uh next is how to do Global State Management so typically you can",
    "start": "2203280",
    "end": "2209000"
  },
  {
    "text": "use react context with a theme provider you would have a theme provider",
    "start": "2209000",
    "end": "2214560"
  },
  {
    "text": "and then you can have a pretend this is like a big tree server components somewhere some client",
    "start": "2214560",
    "end": "2219839"
  },
  {
    "text": "components and they can all they can both use the provider across the server tree here with a set theme component",
    "start": "2219839",
    "end": "2226920"
  },
  {
    "text": "which is using provider to set a theme and a use theme component which is",
    "start": "2226920",
    "end": "2232560"
  },
  {
    "text": "just using the theme so even though there's Ser components in between here we can still communicate across it and",
    "start": "2232560",
    "end": "2238880"
  },
  {
    "text": "you can also use the stand where if you don't need the provider features and you don't just want a global",
    "start": "2238880",
    "end": "2244720"
  },
  {
    "text": "State uh I also have a diff couple different examples of forms so first to show you what it's",
    "start": "2244720",
    "end": "2251520"
  },
  {
    "text": "like when you do server side validation so if you would were to have",
    "start": "2251520",
    "end": "2257040"
  },
  {
    "text": "a form that would do something on the server here this is a server action it's uh making sure that it's a certain",
    "start": "2257040",
    "end": "2263960"
  },
  {
    "text": "length with this schema here um if it fails we can see that it's being logged",
    "start": "2263960",
    "end": "2269839"
  },
  {
    "text": "on the server here so we have the validation eror here because it's happening on the",
    "start": "2269839",
    "end": "2275000"
  },
  {
    "text": "server and you can also do validation on the client",
    "start": "2275000",
    "end": "2280000"
  },
  {
    "text": "side which same thing but we're on the client so this is use client client component and if it fails to",
    "start": "2280920",
    "end": "2288760"
  },
  {
    "text": "validate it will be logged on the client instead there you",
    "start": "2288760",
    "end": "2294520"
  },
  {
    "text": "go and this can be combined to for example make a super interactive uh",
    "start": "2294520",
    "end": "2300920"
  },
  {
    "text": "react hook form which has client side validation and service side validation and it can even be",
    "start": "2300920",
    "end": "2306440"
  },
  {
    "text": "optimistic so let's just have a look at that so I'm using the typical react hook",
    "start": "2306440",
    "end": "2312560"
  },
  {
    "text": "form hook here I'm using a new react 19 feature use optimistic and doing some stuff here but",
    "start": "2312560",
    "end": "2319319"
  },
  {
    "text": "really what I want to show you is that we can have our reactor form interactivity here which you might be",
    "start": "2319319",
    "end": "2325000"
  },
  {
    "text": "used to seeing and I'm going to click add and it will be optimistic like that",
    "start": "2325000",
    "end": "2331200"
  },
  {
    "text": "boom but if there's an error so it's going to fail now because I have a",
    "start": "2331200",
    "end": "2336280"
  },
  {
    "text": "different validation on the server it will just roll",
    "start": "2336280",
    "end": "2341119"
  },
  {
    "text": "back and there's also another new uh hook that I want to just show you so I",
    "start": "2342160",
    "end": "2347680"
  },
  {
    "text": "call this action State form because it's a new hook called use action State and this is something that's from",
    "start": "2347680",
    "end": "2353599"
  },
  {
    "text": "react 19 which will uh which can let you do form um get return value from some",
    "start": "2353599",
    "end": "2359520"
  },
  {
    "text": "kind of form U mutation without JavaScript if you want that so if I were to turn off JavaScript here it's it",
    "start": "2359520",
    "end": "2366560"
  },
  {
    "text": "would still work um and I'm returning the validation from",
    "start": "2366560",
    "end": "2372240"
  },
  {
    "text": "the server here using use action State and create joke then I've been talking a lot about",
    "start": "2372240",
    "end": "2379599"
  },
  {
    "text": "suspens is um because when you're waiting from from",
    "start": "2379599",
    "end": "2386920"
  },
  {
    "text": "on something on the something on the server typically Dynamic content you need to show a fallback so what's",
    "start": "2386920",
    "end": "2392359"
  },
  {
    "text": "happening here is something is being awaited on the server and I'm rendering a suspense fall back and the way this",
    "start": "2392359",
    "end": "2399880"
  },
  {
    "text": "looks like is that I have a loading TSX which is the suspense for the full page",
    "start": "2399880",
    "end": "2406000"
  },
  {
    "text": "because this is uh awaiting just a slow function which is just a promise and then I have another suspense around this",
    "start": "2406000",
    "end": "2412200"
  },
  {
    "text": "header because it's also slow and then there is another jokes",
    "start": "2412200",
    "end": "2418119"
  },
  {
    "text": "here inide suspense with a list uh and then this function is slow so pretend there's like different levels of how",
    "start": "2418119",
    "end": "2424119"
  },
  {
    "text": "slow your requests are from the server and it's Dynamic so you have to do something something in between and",
    "start": "2424119",
    "end": "2429240"
  },
  {
    "text": "that's when you use a suspense to render a fallback like this and even though I'm waiting for something I can still",
    "start": "2429240",
    "end": "2434800"
  },
  {
    "text": "interact with this page even though the server isn't completely done with what I'm doing",
    "start": "2434800",
    "end": "2441200"
  },
  {
    "text": "here uh react queries also me me worth mentioning because if you want you can",
    "start": "2441200",
    "end": "2446680"
  },
  {
    "text": "still do your normal um uh client side fetching um and you can also make a kind",
    "start": "2446680",
    "end": "2453560"
  },
  {
    "text": "of like a hydration boundary which lets you define a service State first uh so",
    "start": "2453560",
    "end": "2458800"
  },
  {
    "text": "that it doesn't get any spinner here and then finally last route here",
    "start": "2458800",
    "end": "2464560"
  },
  {
    "text": "you can also attach server actions to blur events",
    "start": "2464560",
    "end": "2470560"
  },
  {
    "text": "um for example here I'm doing something on blur and then use calling server",
    "start": "2470560",
    "end": "2476960"
  },
  {
    "text": "action and then you can do like something like auto save features from the client to the",
    "start": "2476960",
    "end": "2482440"
  },
  {
    "text": "server okay I think that's it for the demo I'm going to head back to my slides now",
    "start": "2482440",
    "end": "2489079"
  },
  {
    "text": "uh there we go so this is the light Lighthouse score of",
    "start": "2490599",
    "end": "2498720"
  },
  {
    "text": "this joke app which is not really optimized a lot I just followed these patterns and it's a very small app but",
    "start": "2498720",
    "end": "2505000"
  },
  {
    "text": "you still get the point and all in all you can build very performant apps by default where the limitations of RC will",
    "start": "2505000",
    "end": "2512000"
  },
  {
    "text": "make your code better and like un like in plain react where you can do whatever you want",
    "start": "2512000",
    "end": "2518520"
  },
  {
    "text": "and here's also the badge for the app where uh when sharing a link to a joke as you can see the dynamic meta tags",
    "start": "2518520",
    "end": "2524560"
  },
  {
    "text": "create a badge so uh the next topic is some real",
    "start": "2524560",
    "end": "2531200"
  },
  {
    "text": "world experience with this so I'm working with RC in my uh current consultancy project it's a medium scale",
    "start": "2531200",
    "end": "2538560"
  },
  {
    "text": "production app with uh yeah and so let me just talk a little bit about my requirements and my experience so far",
    "start": "2538560",
    "end": "2545040"
  },
  {
    "text": "I'm working on a project set to La last at at least one year and it's a rewrite of an existing MVC app with a lot of",
    "start": "2545040",
    "end": "2550920"
  },
  {
    "text": "technical debt so the app would contain interactive dashboards complex forms",
    "start": "2550920",
    "end": "2557599"
  },
  {
    "text": "articles through a CMS and a lot of static data and a need for SEO it also needs to be mobile friendly and",
    "start": "2557599",
    "end": "2563079"
  },
  {
    "text": "accessible and support multiple languages and a big part of the app and something I made sure to prove of",
    "start": "2563079",
    "end": "2568559"
  },
  {
    "text": "concept with RSC before choosing the framework is the customers design system component",
    "start": "2568559",
    "end": "2573680"
  },
  {
    "text": "library and first of all this app is great case for RC because it can server side render a lot of content but then",
    "start": "2573680",
    "end": "2580160"
  },
  {
    "text": "also be highly interactive when it needs to be and I'm finding it to work well so far however I have had to do quite a lot",
    "start": "2580160",
    "end": "2587680"
  },
  {
    "text": "of trial and error and research to build functionality that is",
    "start": "2587680",
    "end": "2592880"
  },
  {
    "text": "nonstandard so for example I had to create wrapper components for the customer specific compon library to be",
    "start": "2594920",
    "end": "2601599"
  },
  {
    "text": "able to use them in my project and then put surf components inside them I also",
    "start": "2601599",
    "end": "2606640"
  },
  {
    "text": "had to pick pick my internationalization library without much guidance from nextjs it's working well but there were",
    "start": "2606640",
    "end": "2612599"
  },
  {
    "text": "certainly complexities and then finally testing RC is not covered properly anywhere uh they",
    "start": "2612599",
    "end": "2620040"
  },
  {
    "text": "basically just tell you to use end to- end testing and then don't say anything else and so to test async components",
    "start": "2620040",
    "end": "2626359"
  },
  {
    "text": "with a component test uh with rt RTL you have to follow this workaround and kind of do your own research there how to do",
    "start": "2626359",
    "end": "2634480"
  },
  {
    "text": "it but all in all it's going really well because the app is performant it fulfills the requirements it's",
    "start": "2634480",
    "end": "2640319"
  },
  {
    "text": "maintainable enforces best practices and it's a really great developer experience and the nextjs app router with RSC",
    "start": "2640319",
    "end": "2646800"
  },
  {
    "text": "inside provides so many tools to let me focus on building my",
    "start": "2646800",
    "end": "2651960"
  },
  {
    "text": "apps so to finish this off what is going to be the future of RSC there is no",
    "start": "2652079",
    "end": "2657599"
  },
  {
    "text": "doubt that this is the way react is going now it's not just some hype cycle that will die out is the result of many",
    "start": "2657599",
    "end": "2664240"
  },
  {
    "text": "years of work from the react team so for example versel is actually in the",
    "start": "2664240",
    "end": "2669599"
  },
  {
    "text": "progress of migrating their own dashboard to the app router and in this tweet the co forell talks about the",
    "start": "2669599",
    "end": "2676680"
  },
  {
    "text": "significant performance benefits they're they're seeing and there's a lot of examples uh coming out uh constantly of",
    "start": "2676680",
    "end": "2683640"
  },
  {
    "text": "more and more projects transitioning or migrating to the appor or creating something new in the apparat and they're",
    "start": "2683640",
    "end": "2689040"
  },
  {
    "text": "seeing really good results so we just have to keep uh keep paying attention to this and see if there are more success",
    "start": "2689040",
    "end": "2695400"
  },
  {
    "text": "stories and finally see the results of this migration when they're done with this to kind of get the proof",
    "start": "2695400",
    "end": "2701079"
  },
  {
    "text": "here and there's also multiple other Frameworks that are implementing RC's such as remix with the announcement of",
    "start": "2701079",
    "end": "2707520"
  },
  {
    "text": "reactor router V7 and the framework Redwood JS and most recently Expo for",
    "start": "2707520",
    "end": "2712640"
  },
  {
    "text": "mobile development so uh big things are happening there are so many solutions",
    "start": "2712640",
    "end": "2719000"
  },
  {
    "text": "being proposed to improve the performance of web apps with a goal of finding the optimal balance um between",
    "start": "2719000",
    "end": "2725599"
  },
  {
    "text": "ux and DX and this is reacts take so nonetheless there's a lot of things to be figured out as react server",
    "start": "2725599",
    "end": "2731880"
  },
  {
    "text": "components are battle tested so here is the repo for the joke app everything is there as well as the",
    "start": "2731880",
    "end": "2738640"
  },
  {
    "text": "reference demo",
    "start": "2738640",
    "end": "2741318"
  },
  {
    "text": "pages and there's also some more resources here that I used during my RC learning experience the react and nextjs",
    "start": "2747599",
    "end": "2754040"
  },
  {
    "text": "stocks are good and uh you will find more client side stuff in the react docs",
    "start": "2754040",
    "end": "2759200"
  },
  {
    "text": "and then a more server approach in the nextjs docs and of course nextjs specific stuff and there are a bunch of",
    "start": "2759200",
    "end": "2765800"
  },
  {
    "text": "template apps by verell that you can reference and there's a recently Rel released free call course called learn",
    "start": "2765800",
    "end": "2773000"
  },
  {
    "text": "nextjs which will take you through the whole experience of building an app from scratch and then finally deploy to",
    "start": "2773000",
    "end": "2779480"
  },
  {
    "text": "verel for YouTube uh bite grad does a lot of thorough RC content and uh code",
    "start": "2779480",
    "end": "2784920"
  },
  {
    "text": "with Antonio does some incredible codes clones of apps like twitch and mirro and recently slack with full YouTube codal",
    "start": "2784920",
    "end": "2792119"
  },
  {
    "text": "alongs like I don't know 14 hour codal alongs and he just recently started get",
    "start": "2792119",
    "end": "2797520"
  },
  {
    "text": "uh getting or taking payment for the code but you can still watch the videos and see how he does things because he's",
    "start": "2797520",
    "end": "2802599"
  },
  {
    "text": "really good at this so I recommend these and uh thanks for listening I hope",
    "start": "2802599",
    "end": "2809599"
  },
  {
    "text": "you're excited as I am I have some social media here I blog about RC and I have a Twitter where I post stuff and",
    "start": "2809599",
    "end": "2816520"
  },
  {
    "text": "I'm po post my slides there uh yeah some of the posts I have are about these react 19 hooks in",
    "start": "2816520",
    "end": "2823440"
  },
  {
    "text": "specific making a reusable submit button testing RC's and integrating with reactor forms and more so thank",
    "start": "2823440",
    "end": "2832680"
  },
  {
    "text": "you uh we can do some questions here or if you want to walk up later that's also cool yes maybe microphone uh do we need",
    "start": "2837559",
    "end": "2844960"
  },
  {
    "text": "that",
    "start": "2844960",
    "end": "2847960"
  },
  {
    "text": "I can just repeat repeat the question go",
    "start": "2850240",
    "end": "2854040"
  },
  {
    "text": "ahead uh it's instant it's just like a normal react up like vit it's amazing it's really",
    "start": "2860079",
    "end": "2865920"
  },
  {
    "text": "great yes anything else okay thank you thank you for having",
    "start": "2865920",
    "end": "2872960"
  },
  {
    "text": "me here",
    "start": "2872960",
    "end": "2876160"
  }
]