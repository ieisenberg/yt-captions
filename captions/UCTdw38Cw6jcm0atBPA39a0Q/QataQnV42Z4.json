[
  {
    "text": "so hello everybody thank you very much for joining me today i'm lili zarovic i'm a developer",
    "start": "1520",
    "end": "7919"
  },
  {
    "text": "relations advocate at neo4j and pace course",
    "start": "7919",
    "end": "13360"
  },
  {
    "text": "we are going to be getting graphic i'm going to be talking you through uh what graphs are",
    "start": "13360",
    "end": "19760"
  },
  {
    "text": "what neo4j is and we are going to be finishing with some experience at the end so let's go",
    "start": "19760",
    "end": "29519"
  },
  {
    "text": "so first of all",
    "start": "29679",
    "end": "45680"
  },
  {
    "text": "maybe a bar graph or some kind of a scatter graph but when we talk about graphs in this",
    "start": "45680",
    "end": "52239"
  },
  {
    "text": "context and we're thinking about graph databases a graph is a set of discrete objects and",
    "start": "52239",
    "end": "58320"
  },
  {
    "text": "we're interested in how these discrete objects are connected to each other so what relationships do they have",
    "start": "58320",
    "end": "64320"
  },
  {
    "text": "and this comes from graph theory and graph theory originated from this",
    "start": "64320",
    "end": "70799"
  },
  {
    "text": "famous maths problem which is the seven bridges of koninsburg and a famous mathematician leonard euler",
    "start": "70799",
    "end": "78479"
  },
  {
    "text": "came up and came across this problem and he looked at it and effectively what",
    "start": "78479",
    "end": "84640"
  },
  {
    "text": "he did to solve this problem was identify that actually the important elements of",
    "start": "84640",
    "end": "91360"
  },
  {
    "text": "this problem so this problem was all about these four land masses in this um town called koenigsberg which",
    "start": "91360",
    "end": "97759"
  },
  {
    "text": "is now in uh now in modern day russia which is kalingrad and they had these four land masses and",
    "start": "97759",
    "end": "104159"
  },
  {
    "text": "these seven bridges connecting them and the problem was is there a way to be able to visit all of these land masses",
    "start": "104159",
    "end": "110159"
  },
  {
    "text": "using the bridges there but you don't cross the bridge once and only once and you have to visit every single bridge",
    "start": "110159",
    "end": "116079"
  },
  {
    "text": "and leonard euler took this problem and i and decided that the best way to",
    "start": "116079",
    "end": "122000"
  },
  {
    "text": "do this was to try and reduce this into the most simplest component and effectively what he had from the",
    "start": "122000",
    "end": "128080"
  },
  {
    "text": "simplest components was he took these land masses and these are the discrete objects that we are",
    "start": "128080",
    "end": "133120"
  },
  {
    "text": "talking about and he used the bridges as a way to",
    "start": "133120",
    "end": "138400"
  },
  {
    "text": "describe how these land masses were connected to each other and thus the graph was born so i'm not",
    "start": "138400",
    "end": "145760"
  },
  {
    "text": "going into a huge amount of detail in this there's a lot of content that you can go and find out more about",
    "start": "145760",
    "end": "151200"
  },
  {
    "text": "this but this is the roots of graph theory",
    "start": "151200",
    "end": "156800"
  },
  {
    "text": "and absolutely anything can be a graph so as soon as we are interested",
    "start": "156800",
    "end": "162480"
  },
  {
    "text": "in how components might be connected to each other and you know how they're connected then",
    "start": "162480",
    "end": "169599"
  },
  {
    "text": "that becomes a graph so let's have a look at some examples so for example the internet",
    "start": "169599",
    "end": "174640"
  },
  {
    "text": "is a graph and there's lots of different ways that the internet can be a graph so if we think about for example the",
    "start": "174640",
    "end": "181680"
  },
  {
    "text": "different ways we might be communicating with each other over the internet so we would be the discrete entities",
    "start": "181680",
    "end": "187920"
  },
  {
    "text": "like the different people and maybe we're emailing each other maybe we are sending what's that messages to",
    "start": "187920",
    "end": "195040"
  },
  {
    "text": "each other and there'll be different other ways that we're communicating so maybe we want to",
    "start": "195040",
    "end": "200319"
  },
  {
    "text": "be able to graph the different ways and the different people that we're connected to or another way we may look at the",
    "start": "200319",
    "end": "206640"
  },
  {
    "text": "internet being a graph we may want to look at all of the various devices that help",
    "start": "206640",
    "end": "212080"
  },
  {
    "text": "the internet to exist to be so maybe we're interested in all of the different routers that are involved and how",
    "start": "212080",
    "end": "218159"
  },
  {
    "text": "they're connected to each other the switches firewalls all the way down to the bare",
    "start": "218159",
    "end": "223360"
  },
  {
    "text": "metal and wires that connect things up so this is a great example of a graph",
    "start": "223360",
    "end": "228560"
  },
  {
    "text": "another thing that can be a graph it would be something like a water molecule and if we think about the atoms that are",
    "start": "228560",
    "end": "234799"
  },
  {
    "text": "involved the elements that are involved in a water molecule we've got two hydrogen atoms and we've got an oxygen",
    "start": "234799",
    "end": "240319"
  },
  {
    "text": "atom but the thing that makes those two hydrogen atoms and the oxygen atom",
    "start": "240319",
    "end": "246000"
  },
  {
    "text": "a water molecule is not just the discrete entities there but how they're connected to each other",
    "start": "246000",
    "end": "252000"
  },
  {
    "text": "and it's that specific way that specific relationship that the hydrogen atoms have to the oxygen atoms",
    "start": "252000",
    "end": "258320"
  },
  {
    "text": "is what gives us a water molecule so these are two examples broadly of how something can be a graph",
    "start": "258320",
    "end": "266320"
  },
  {
    "text": "so why do we need grafts why are they important and what i'm going to do is go through a",
    "start": "266320",
    "end": "272479"
  },
  {
    "text": "high level example to just start getting the conversation going about and how graphs are important",
    "start": "272479",
    "end": "279520"
  },
  {
    "text": "so let's think of a and this is a silly example but let's think of somebody who's um sat in a cafe",
    "start": "279520",
    "end": "287919"
  },
  {
    "text": "so we've got a representation of reality here we've got somebody they've purchased a coffee and they're now consuming it in store",
    "start": "287919",
    "end": "295199"
  },
  {
    "text": "and maybe the problem we're looking to solve is an understanding of how people interact with our",
    "start": "295199",
    "end": "301840"
  },
  {
    "text": "establishment so we've got a representation of reality and if we started to sketch up well what",
    "start": "301840",
    "end": "308720"
  },
  {
    "text": "this what might this look like how would we describe um diagram diagrammatically",
    "start": "308720",
    "end": "314960"
  },
  {
    "text": "what's going on in this scenario and inevitably in this specific one we would start",
    "start": "314960",
    "end": "320320"
  },
  {
    "text": "drawing maybe some pictures or some circles or something and we'd start to describe how they're connected to each",
    "start": "320320",
    "end": "327039"
  },
  {
    "text": "other so in this example here we're describing that this this person here has a connection",
    "start": "327039",
    "end": "334880"
  },
  {
    "text": "to this beverage and specifically what is that connection like so the drinking in store and if we think",
    "start": "334880",
    "end": "342080"
  },
  {
    "text": "about how we'd go about storing this information and traditional data sources so for example if we were storing this",
    "start": "342080",
    "end": "348560"
  },
  {
    "text": "in a relational database um by the time we've thought about the data model and we've refined",
    "start": "348560",
    "end": "354960"
  },
  {
    "text": "it so that it is basically for the purpose of normalization so this data is ready to land into our",
    "start": "354960",
    "end": "362479"
  },
  {
    "text": "data source um we kind of remove this sort of concept of reality we've now ended up in",
    "start": "362479",
    "end": "369680"
  },
  {
    "text": "these discrete tables and there's a good reason for that we do that because we want to normalize our data we want to",
    "start": "369680",
    "end": "375039"
  },
  {
    "text": "reduce the amount of duplication that we have in our data and there's a lot of good reasons around but",
    "start": "375039",
    "end": "380560"
  },
  {
    "text": "but in this example here we're in a situation where it's not that representative",
    "start": "380560",
    "end": "387759"
  },
  {
    "text": "you know sort of just looking at it as to what's going on and we've got a lot of uh so we've got jointer so we have to go",
    "start": "387759",
    "end": "394240"
  },
  {
    "text": "and keep referring to a mapping table to be able to describe what's happening here and another thing",
    "start": "394240",
    "end": "401680"
  },
  {
    "text": "as well we might think about when we're trying to build a picture of what's going on this picture of reality",
    "start": "401680",
    "end": "407120"
  },
  {
    "text": "is if we were looking at quite a large data sets maybe the different entities that we're interested in are going to be stored in",
    "start": "407120",
    "end": "414160"
  },
  {
    "text": "different places which is not uncommon if we're thinking about a very large data system and you still think about",
    "start": "414160",
    "end": "420560"
  },
  {
    "text": "well how do we start to map these different elements together how do we get to a place where we're able to build",
    "start": "420560",
    "end": "426960"
  },
  {
    "text": "out a view of what's going on what's the reality going on and graphs are a great way of being able",
    "start": "426960",
    "end": "434639"
  },
  {
    "text": "to approximate to describe what we initially came with and i'm going to quickly touch on here because",
    "start": "434639",
    "end": "440960"
  },
  {
    "text": "this gives us a quick view of what's going on and we'll look a little bit more about anatomy of a graph shortly but",
    "start": "440960",
    "end": "447759"
  },
  {
    "text": "again we've got this idea we've got our two discrete entities here and we've got something that describes",
    "start": "447759",
    "end": "453039"
  },
  {
    "text": "the relationship between those two discrete entities so a graph allows us to get a better",
    "start": "453039",
    "end": "458720"
  },
  {
    "text": "approximate a better approximation of reality so let's have a look at some examples and again this is a",
    "start": "458720",
    "end": "466800"
  },
  {
    "text": "very high level view but let's talk about trainers and we have this situation here where",
    "start": "466800",
    "end": "475360"
  },
  {
    "text": "we've got this product in the middle so here here is a type of discrete entity we've got products",
    "start": "475360",
    "end": "481840"
  },
  {
    "text": "and we've got three people jane allison and ian and they've all bought the same product",
    "start": "481840",
    "end": "489199"
  },
  {
    "text": "and let's say there's something a bit more going on here and in this conceptual example we're",
    "start": "489199",
    "end": "495599"
  },
  {
    "text": "going to start bringing in other data sources so let's bring in some social media data sources and explore what's going on so",
    "start": "495599",
    "end": "503680"
  },
  {
    "text": "jane has bought these trainers and she's obviously very satisfied with these trainers so she posted",
    "start": "503680",
    "end": "510879"
  },
  {
    "text": "a tweet saying i love my trainers and it turns out that alison follows",
    "start": "510879",
    "end": "517680"
  },
  {
    "text": "jane on twitter and she reads that tweet and that's influenced alison to go away and also buy a pair of",
    "start": "517680",
    "end": "523760"
  },
  {
    "text": "trainers same trainers and alison very happy those trainers as well posts",
    "start": "523760",
    "end": "530800"
  },
  {
    "text": "an update on facebook very happy with the trainers and it turns out that",
    "start": "530800",
    "end": "536160"
  },
  {
    "text": "ian is friends with alison on facebook he reads that update that influences him to",
    "start": "536160",
    "end": "542240"
  },
  {
    "text": "buy the trainers he then posts an instagram and so forth and whilst this is a very",
    "start": "542240",
    "end": "548320"
  },
  {
    "text": "high level conceptual example of what's going on the really important part here about",
    "start": "548320",
    "end": "553440"
  },
  {
    "text": "why graphs are so fascinating and so exciting is because we're not just looking at",
    "start": "553440",
    "end": "559360"
  },
  {
    "text": "discrete entities but we're also understanding how they're connected to each other and this allows us to observe",
    "start": "559360",
    "end": "565279"
  },
  {
    "text": "interesting things going on so maybe we can observe why certain things are happening",
    "start": "565279",
    "end": "570880"
  },
  {
    "text": "or are there influences in a network so i'm going to have a quick look at another",
    "start": "570880",
    "end": "576240"
  },
  {
    "text": "example so i'm not going to spend a huge amount of time on this slide",
    "start": "576240",
    "end": "581760"
  },
  {
    "text": "um perhaps this is for a more older audience you'll probably recognize the uh two characters either side so",
    "start": "581760",
    "end": "589200"
  },
  {
    "text": "you've got robert redford and paul newman who played fortress where they played",
    "start": "589200",
    "end": "594560"
  },
  {
    "text": "robbers in butch cassidy in sundance kid where they were looking to steal from banks and the person in the",
    "start": "594560",
    "end": "600800"
  },
  {
    "text": "middle is charles ponzi uh famous for inventing the ponzi scheme",
    "start": "600800",
    "end": "607040"
  },
  {
    "text": "and this is somebody who did um defraud many people of millions of dollars of money",
    "start": "607040",
    "end": "614720"
  },
  {
    "text": "and the relevance by put here is another reason why graphs are really powerful because again",
    "start": "614720",
    "end": "621920"
  },
  {
    "text": "looking at how things are connected and this example here when we're looking",
    "start": "621920",
    "end": "627040"
  },
  {
    "text": "for things for example fraud a lot of the time we can spot fraud by finding out how people are connected",
    "start": "627040",
    "end": "634079"
  },
  {
    "text": "to other people and one great public example of how this has been used is with the panama papers",
    "start": "634079",
    "end": "640720"
  },
  {
    "text": "so um for those of you who remember the news story there was a leak of data from a panamanian law",
    "start": "640720",
    "end": "648399"
  },
  {
    "text": "firm that was sent over to journalists in germany and a joint effort with the",
    "start": "648399",
    "end": "653839"
  },
  {
    "text": "international national international consortium of investigative journalism went away and had a look at this data",
    "start": "653839",
    "end": "660560"
  },
  {
    "text": "and the key sort of store where that data was stored was in a graph database",
    "start": "660560",
    "end": "666079"
  },
  {
    "text": "and effectively coming back to this very simple idea of exploring how entities are connected to each other",
    "start": "666079",
    "end": "673680"
  },
  {
    "text": "so how discrete entities are related to other entities you can effectively start to follow this",
    "start": "673680",
    "end": "679600"
  },
  {
    "text": "trail of what's connected and by putting it in this representation",
    "start": "679600",
    "end": "685600"
  },
  {
    "text": "you can very quickly an example of the panama papers if you've got a start point here of an address and you've got an address in",
    "start": "685600",
    "end": "692640"
  },
  {
    "text": "panama and then you want to follow how an entity and an entity here in this",
    "start": "692640",
    "end": "699279"
  },
  {
    "text": "example is an organization or a company and an officer will be you know a director or",
    "start": "699279",
    "end": "705200"
  },
  {
    "text": "have you an intermediary is also another type of a personal node",
    "start": "705200",
    "end": "710480"
  },
  {
    "text": "and you can very quickly see where you know you may have a person that person is a director of a company",
    "start": "710480",
    "end": "717519"
  },
  {
    "text": "and that company is now a parent company of another company which is directed by another company and",
    "start": "717519",
    "end": "722800"
  },
  {
    "text": "so forth they just keep following this this nice connected chain and eventually you're going to hit",
    "start": "722800",
    "end": "728959"
  },
  {
    "text": "where you know where is the source of this point and for an example of the panama papers",
    "start": "728959",
    "end": "734000"
  },
  {
    "text": "you could very quickly find out whether somebody was 2 3 10 20 hops away connected from",
    "start": "734000",
    "end": "741279"
  },
  {
    "text": "connected to a company that was offshoring in panama for tax avoidance purposes and the thing",
    "start": "741279",
    "end": "749440"
  },
  {
    "text": "that she's really powerful behind this because we're treating the relationships as first-class citizens",
    "start": "749440",
    "end": "755360"
  },
  {
    "text": "we're not having to do this mapping or self-referencing in the table this allows us to go away and very",
    "start": "755360",
    "end": "762399"
  },
  {
    "text": "quickly understand if there's a connection in data and the really important thing here",
    "start": "762399",
    "end": "767600"
  },
  {
    "text": "is if there is a connection and it doesn't matter how long out but if there's a connection",
    "start": "767600",
    "end": "773120"
  },
  {
    "text": "between two parties we're going to find it just due to how we're storing that data and that is",
    "start": "773120",
    "end": "778800"
  },
  {
    "text": "again how neo4j is storing the data so as soon as we know that two entities are",
    "start": "778800",
    "end": "784160"
  },
  {
    "text": "connected we record that connection that connection goes into disk as well as the entities this is sort of",
    "start": "784160",
    "end": "790959"
  },
  {
    "text": "like if you think about it joins on right as soon as we know those joins are there we write them straight away rather than",
    "start": "790959",
    "end": "797040"
  },
  {
    "text": "having to look up how things might be joined at the time of read and just as an example",
    "start": "797040",
    "end": "804160"
  },
  {
    "text": "the panama papers had a huge impact in identifying a lot of current and",
    "start": "804160",
    "end": "809519"
  },
  {
    "text": "former world leaders who had some kind of involvement",
    "start": "809519",
    "end": "814639"
  },
  {
    "text": "with tax tax evasion and tax avoidance schemes so that's one example and the last",
    "start": "814639",
    "end": "820800"
  },
  {
    "text": "example i'm going to flag is when you start thinking about",
    "start": "820800",
    "end": "827920"
  },
  {
    "text": "who you might be connected to or trying to predict you might be connected to or who you might know",
    "start": "827920",
    "end": "833519"
  },
  {
    "text": "so this is an example we're going to have a look at shortly so a great example of friends of friends",
    "start": "833519",
    "end": "840720"
  },
  {
    "text": "if you think as an example um you've got two people you've got me and you've got bob",
    "start": "840720",
    "end": "846399"
  },
  {
    "text": "and i know and dan zane and jane bob also knows ann dan zane and jane",
    "start": "846399",
    "end": "853839"
  },
  {
    "text": "and what we can start to do by looking at the structures of the graph and we can say well hang on a minute bob",
    "start": "853839",
    "end": "860000"
  },
  {
    "text": "and i both know the same groups of people can we infer that there's a link between",
    "start": "860000",
    "end": "866720"
  },
  {
    "text": "me and bob and for whatever whatever reason we've not captured that so this is where you start to look at things like friends of friends so when",
    "start": "866720",
    "end": "873120"
  },
  {
    "text": "you start getting recommendations about people you might know these are some of the processes that are going on",
    "start": "873120",
    "end": "879360"
  },
  {
    "text": "and this also applies for example of co-actors of co-actors which is something that we're going to touch on",
    "start": "879360",
    "end": "885040"
  },
  {
    "text": "when we do the examples in the sandbox later and this example here if we've got meg",
    "start": "885040",
    "end": "890240"
  },
  {
    "text": "ryan that we've got circled here and we wanted to try and predict what characters we might want to recommend",
    "start": "890240",
    "end": "896639"
  },
  {
    "text": "for meg ryan to work with then we'd probably do that by looking at the movies that she's",
    "start": "896639",
    "end": "902320"
  },
  {
    "text": "been in and we have a look at who are the actors that were with her in those movies and then look at the movies of those",
    "start": "902320",
    "end": "908480"
  },
  {
    "text": "actors and then their co-actors and then we can start to recommend who meg ryan might work with in the",
    "start": "908480",
    "end": "915680"
  },
  {
    "text": "future and this is a component of building a recommendations engine as well",
    "start": "915680",
    "end": "921600"
  },
  {
    "text": "so let's start having a look at the anatomy of a graph database or a",
    "start": "921600",
    "end": "929199"
  },
  {
    "text": "prop label property graph database time check so what we've got is",
    "start": "929199",
    "end": "935839"
  },
  {
    "text": "a node so this is our discrete entity that we were talking about before and this is the main data element",
    "start": "935839",
    "end": "941440"
  },
  {
    "text": "for which graphs are constructed and we're also going to have a relationship or an",
    "start": "941440",
    "end": "946480"
  },
  {
    "text": "edge and this describes how these entities are connected and",
    "start": "946480",
    "end": "953279"
  },
  {
    "text": "we can have a direction and in neo4j we always write a relationship direction we don't have to query for the direction",
    "start": "953279",
    "end": "959360"
  },
  {
    "text": "but we always when we create a relationship between two nodes we provide a direction",
    "start": "959360",
    "end": "964480"
  },
  {
    "text": "and we can have some metadata on there as well so we can describe what does that relationship do so what is that",
    "start": "964480",
    "end": "970560"
  },
  {
    "text": "relationship between the two entities so uh we so we talk about here so you",
    "start": "970560",
    "end": "976720"
  },
  {
    "text": "can have a relationship between two nodes but you can't have a relationship with no nodes attached to it so let's take this a bit further",
    "start": "976720",
    "end": "983759"
  },
  {
    "text": "we'll be thinking about the additional properties that you get with something like neo4j we've got our nodes and we've got our",
    "start": "983759",
    "end": "990480"
  },
  {
    "text": "relationship so we've got we've got our entities we can say how we can connect them and what we can do as well is we can add",
    "start": "990480",
    "end": "997600"
  },
  {
    "text": "a label to the nodes and what the label does is it allows us to categorize categorize",
    "start": "997600",
    "end": "1003279"
  },
  {
    "text": "certain types of nodes so for example we may have nodes that are going to represent",
    "start": "1003279",
    "end": "1008399"
  },
  {
    "text": "people so we'll give it a person node um label we may have other nodes",
    "start": "1008399",
    "end": "1014959"
  },
  {
    "text": "that are going to be representing uh vehicles so maybe we provide a car label",
    "start": "1014959",
    "end": "1021040"
  },
  {
    "text": "for that kind of node and what you can do as well is you can have more than one label",
    "start": "1021040",
    "end": "1026400"
  },
  {
    "text": "so as an example here let's say we were describing a household and we want to label how many",
    "start": "1026400",
    "end": "1033839"
  },
  {
    "text": "cars a household has then we'd have a car label for the cars but maybe we also say for insurance",
    "start": "1033839",
    "end": "1039760"
  },
  {
    "text": "purposes want to understand what assets a household has then what we could do is we could add another label",
    "start": "1039760",
    "end": "1046160"
  },
  {
    "text": "to that node so we can describe all of the assets there as well if we wanted to do a query around",
    "start": "1046160",
    "end": "1052559"
  },
  {
    "text": "values and who owns what and patterns around that and another thing you can do as well is",
    "start": "1052559",
    "end": "1058320"
  },
  {
    "text": "you can add properties onto your nodes and your relationships and this allows you to enrich",
    "start": "1058320",
    "end": "1064559"
  },
  {
    "text": "and further detail what those uh those nodes and relationships are or",
    "start": "1064559",
    "end": "1070480"
  },
  {
    "text": "what is the relevance behind them so for example for a person node we're probably probably going to want to add a name",
    "start": "1070480",
    "end": "1076559"
  },
  {
    "text": "property to say you know the different name so we've got a node here with name of jane for our",
    "start": "1076559",
    "end": "1084640"
  },
  {
    "text": "car we're probably going to want to add properties that describe the make the model maybe other details",
    "start": "1084640",
    "end": "1090720"
  },
  {
    "text": "as well the color and so forth so we can do that and we can add properties on relationships as well",
    "start": "1090720",
    "end": "1096160"
  },
  {
    "text": "and the kinds of things for example we might want to add is when did that relationship occur maybe if jane goes and sells that",
    "start": "1096160",
    "end": "1103360"
  },
  {
    "text": "car we'd probably want to capture when she sold that car because we probably want to keep that information that she owned that",
    "start": "1103360",
    "end": "1109679"
  },
  {
    "text": "vehicle at some point but we want to say well when did that relationship end and the thing to point out as well with",
    "start": "1109679",
    "end": "1116480"
  },
  {
    "text": "properties is you don't need to provide a null value so you don't have this fast matrix thing going on that you",
    "start": "1116480",
    "end": "1123200"
  },
  {
    "text": "might have if you're storing data in a table so an example here if we wanted to capture that some person nodes have",
    "start": "1123200",
    "end": "1129919"
  },
  {
    "text": "twitter handles we could say maybe jane's got one so we could do twitter colon jane",
    "start": "1129919",
    "end": "1135799"
  },
  {
    "text": "1980 as an example but if we've got another person node with the name dan and dan doesn't have a twitter handle we",
    "start": "1135799",
    "end": "1142720"
  },
  {
    "text": "don't need to do twitter colon null we just don't set that property at all",
    "start": "1142720",
    "end": "1148559"
  },
  {
    "text": "so i'm going to now go through our query language which is called cipher so cipher",
    "start": "1148559",
    "end": "1155440"
  },
  {
    "text": "is a query language for korean graphs and it's it's using neo4j and we've also",
    "start": "1155440",
    "end": "1163039"
  },
  {
    "text": "got open cipher which is used by lots of other databases as well and it is a declarative language so",
    "start": "1163039",
    "end": "1170320"
  },
  {
    "text": "effectively you declare rather than having to rather than imperative language",
    "start": "1170320",
    "end": "1175520"
  },
  {
    "text": "it's expressive so you effectively describe what you want to do and it's pattern matching so what we can",
    "start": "1175520",
    "end": "1181039"
  },
  {
    "text": "do we can specify a specific endpoint or a start point that we're looking for in our query",
    "start": "1181039",
    "end": "1186160"
  },
  {
    "text": "but what we can do as well is we can specify a pattern so what we can say is well actually i'm not interested in",
    "start": "1186160",
    "end": "1194000"
  },
  {
    "text": "finding out um all of the assets that jane owns maybe i want to put a query where i say",
    "start": "1194000",
    "end": "1201120"
  },
  {
    "text": "bring me back um all of the person nodes that own assets where the asset isn't a car as an",
    "start": "1201120",
    "end": "1208080"
  },
  {
    "text": "example so we can we can start to ask interesting patterns which is really powerful when we start thinking about",
    "start": "1208080",
    "end": "1213679"
  },
  {
    "text": "fraud detection that sort of thing and the best bit of all it's with ascii",
    "start": "1213679",
    "end": "1219120"
  },
  {
    "text": "art so the queries are very diagrammatically descriptive of what you're looking to do",
    "start": "1219120",
    "end": "1226320"
  },
  {
    "text": "so let's have a look so we're going to go through um some quick queries and then what we're",
    "start": "1226320",
    "end": "1232400"
  },
  {
    "text": "going to do is moving on to the sandbox where you can all have a go at doing some of these queries yourself so",
    "start": "1232400",
    "end": "1240320"
  },
  {
    "text": "very quickly we use match to retrieve nodes and we've got here uh match and return n",
    "start": "1240320",
    "end": "1246880"
  },
  {
    "text": "so in this example here we're creating a variable a placeholder called n and we're going to match everything in",
    "start": "1246880",
    "end": "1252400"
  },
  {
    "text": "the database that that meets that pattern which in this situation will be absolutely everything and then we'll return",
    "start": "1252400",
    "end": "1259440"
  },
  {
    "text": "everything if we want to say well actually what i wanted to do is i want to return",
    "start": "1259440",
    "end": "1264960"
  },
  {
    "text": "just nodes i've got a person label then what we would do is we put that colon and then the label name so",
    "start": "1264960",
    "end": "1272400"
  },
  {
    "text": "everything to the um to the left of a column then you'll see this both in uh both in the relationship types and",
    "start": "1272400",
    "end": "1279440"
  },
  {
    "text": "in the node labels think of this like a variable the placeholder which is going to be representative",
    "start": "1279440",
    "end": "1284880"
  },
  {
    "text": "of um what we're asking and then here is the this is our filters this is going to say",
    "start": "1284880",
    "end": "1289919"
  },
  {
    "text": "filter by label person and now we're going to return nodes of label person",
    "start": "1289919",
    "end": "1295840"
  },
  {
    "text": "if we say well actually no what i want to do is i want to match all the nodes that have got a person",
    "start": "1295840",
    "end": "1302240"
  },
  {
    "text": "label and they've got the property name set to tom hanks then what we would do is",
    "start": "1302240",
    "end": "1308080"
  },
  {
    "text": "we put in any properties and this is for both relationships and for nodes we have the curly brace",
    "start": "1308080",
    "end": "1314960"
  },
  {
    "text": "and then here we specify this key value format so the key here is the name and then the",
    "start": "1314960",
    "end": "1320400"
  },
  {
    "text": "value is tom hanks so again so we're going to filter by label and then we're going to filter",
    "start": "1320400",
    "end": "1325600"
  },
  {
    "text": "by all nodes that have got property called name that has this value of tom hanks and then",
    "start": "1325600",
    "end": "1330640"
  },
  {
    "text": "we're going to return all of our nodes with the value um tom hanks that",
    "start": "1330640",
    "end": "1335679"
  },
  {
    "text": "have a label of person and there's two ways we can do this so",
    "start": "1335679",
    "end": "1341520"
  },
  {
    "text": "we can either do it like this so we just covered this where we are lining our property and we can do this",
    "start": "1341520",
    "end": "1346880"
  },
  {
    "text": "with more than one property so just separate with a comma or we can use a where clause so we can",
    "start": "1346880",
    "end": "1353200"
  },
  {
    "text": "do exactly the same thing and here what we're doing is rather than in lining",
    "start": "1353200",
    "end": "1358960"
  },
  {
    "text": "name is tom hanks we can use the where clause and say where p dot name so we use a dot",
    "start": "1358960",
    "end": "1365760"
  },
  {
    "text": "when we're not using it in this situation to refer back to our container to our variable that is a placeholder for this equals",
    "start": "1365760",
    "end": "1372559"
  },
  {
    "text": "tom hanks return p so both those do exactly the same thing uh the difference between them is if i",
    "start": "1372559",
    "end": "1379600"
  },
  {
    "text": "wanted to say where p dot name starts with tom where p dot name ends with hanks or if i want to",
    "start": "1379600",
    "end": "1386880"
  },
  {
    "text": "do some kind of range thing then i'll use where if i know exactly what",
    "start": "1386880",
    "end": "1392559"
  },
  {
    "text": "value the property has to match then i can use the inline version but again it the choice is yours as to what you",
    "start": "1392559",
    "end": "1398640"
  },
  {
    "text": "prefer if you'd rather use this than thin line one um so yeah we talked",
    "start": "1398640",
    "end": "1404559"
  },
  {
    "text": "about range so in this example here if i wanted to match movies with a match nodes with",
    "start": "1404559",
    "end": "1410720"
  },
  {
    "text": "label movie and i wanted to bring back those that were released in certain years",
    "start": "1410720",
    "end": "1415760"
  },
  {
    "text": "i could do it like this where i'm providing a range so we're going to extend this so at the",
    "start": "1415760",
    "end": "1421679"
  },
  {
    "text": "moment we were just focusing on bringing back nodes so now let's think about bringing",
    "start": "1421679",
    "end": "1427600"
  },
  {
    "text": "back nodes with specific relationship types and just to quickly describe my data",
    "start": "1427600",
    "end": "1434720"
  },
  {
    "text": "model going on here you can see we've got tom hanks so we've got a person noted nate on banks so we",
    "start": "1434720",
    "end": "1441600"
  },
  {
    "text": "can see he's got a directed relationship with the movie he's got an acted in relationship with",
    "start": "1441600",
    "end": "1446720"
  },
  {
    "text": "this movie and if we look further with the same movie there is another person kevin bacon who also",
    "start": "1446720",
    "end": "1453120"
  },
  {
    "text": "has enacted with relationship with this movie so if i wanted to find",
    "start": "1453120",
    "end": "1460400"
  },
  {
    "text": "all of the movies that tom hanks acted in this is what i would do so we've got the same setup so it we're filtering",
    "start": "1460400",
    "end": "1467679"
  },
  {
    "text": "by a person person label we don't have to i would always suggest if you've got labels use them because the query will",
    "start": "1467679",
    "end": "1474320"
  },
  {
    "text": "be faster so we're saying match node of b person with the name tom hanks",
    "start": "1474320",
    "end": "1479760"
  },
  {
    "text": "so bring me back all of the the nodes i've got a person labeled with the name property of",
    "start": "1479760",
    "end": "1484880"
  },
  {
    "text": "name tom hanks and then what we do you notice we represent those with the",
    "start": "1484880",
    "end": "1490159"
  },
  {
    "text": "round brackets we represent relationships as arrows and if we want to retrieve a certain",
    "start": "1490159",
    "end": "1497200"
  },
  {
    "text": "relationship type or properties associated with that relationship then we do them in the square brackets",
    "start": "1497200",
    "end": "1504320"
  },
  {
    "text": "and this situation we want to bring back the movies that tom hanks acted in so we just do our arrow",
    "start": "1504320",
    "end": "1510159"
  },
  {
    "text": "we say colon accident this is our relationship type in a movie and i'm going to return so",
    "start": "1510159",
    "end": "1516799"
  },
  {
    "text": "i've got my container here to represent movie and i'm going to return movie dot title",
    "start": "1516799",
    "end": "1522000"
  },
  {
    "text": "so if i want to return back the property rather than the note then i do the dot title in this example",
    "start": "1522000",
    "end": "1528720"
  },
  {
    "text": "here because that title is the property on the movie node that contains the title",
    "start": "1528720",
    "end": "1533760"
  },
  {
    "text": "we do that and that will let us know um all the titles that tom hanks has",
    "start": "1533760",
    "end": "1540000"
  },
  {
    "text": "acted in if i wanted to know the movies that tom hanks has directed",
    "start": "1540000",
    "end": "1546240"
  },
  {
    "text": "in and i want to order it by the latest movie then again it got similar syntax to what we had above but",
    "start": "1546240",
    "end": "1552640"
  },
  {
    "text": "we changed the relationship type to directed because we want to know about the films that he has directed and then we can",
    "start": "1552640",
    "end": "1559279"
  },
  {
    "text": "return the title we can return the release date and here we can similar to how you might do",
    "start": "1559279",
    "end": "1564799"
  },
  {
    "text": "with the sql query we're not saying order by released and descending because we want the",
    "start": "1564799",
    "end": "1570240"
  },
  {
    "text": "newest film first if i wanted to find out all of the",
    "start": "1570240",
    "end": "1575360"
  },
  {
    "text": "co-actors that tom hanks has worked with so you can see how we're extending the pattern here so we've got an example",
    "start": "1575360",
    "end": "1582880"
  },
  {
    "text": "here of so again person named tom hanks i don't care whether he acted in that film",
    "start": "1582880",
    "end": "1589600"
  },
  {
    "text": "whether he directed in that film whether he was a screenwriter for that film i want everything back so you notice",
    "start": "1589600",
    "end": "1595440"
  },
  {
    "text": "i've just got the arrow and i've not specified the type because i want all of tom hanks's connection with the movies",
    "start": "1595440",
    "end": "1601840"
  },
  {
    "text": "and then you can see we're going back so we've got our co-actor so this is our variable our container that we're going",
    "start": "1601840",
    "end": "1607840"
  },
  {
    "text": "to hold the results in person and but we want the collectors so this is why i've specified acted here because i want the",
    "start": "1607840",
    "end": "1613600"
  },
  {
    "text": "co-actors that have acted in the movie and then i return the co-actor's name",
    "start": "1613600",
    "end": "1620080"
  },
  {
    "text": "if and this is going to give an example of a pattern if i wanted to and this this would bring back everything but if",
    "start": "1620080",
    "end": "1625440"
  },
  {
    "text": "i wanted to bring back uh all persons that had a relationship with movie characters so if i wanted to",
    "start": "1625440",
    "end": "1630640"
  },
  {
    "text": "find the co-actors of everybody then i might drop that name property",
    "start": "1630640",
    "end": "1635840"
  },
  {
    "text": "so let's have a quick look at create so this is when we create data so it's got exactly the same setup as",
    "start": "1635840",
    "end": "1641760"
  },
  {
    "text": "the match the big difference here is we're using the create word so in this example here we're going to create a node",
    "start": "1641760",
    "end": "1648880"
  },
  {
    "text": "with the label person and it has the property name with the value of tom hanks",
    "start": "1648880",
    "end": "1655760"
  },
  {
    "text": "if i wanted to create a relationship between two existing notes so",
    "start": "1655760",
    "end": "1660799"
  },
  {
    "text": "between a person no tom hanks and a movie node apollo 13 i would match those two notes so i'd",
    "start": "1660799",
    "end": "1667760"
  },
  {
    "text": "match tom hanks i'd match apollo 13 and then i can use create using the variables so the placeholders that is a",
    "start": "1667760",
    "end": "1674240"
  },
  {
    "text": "representation of what comes back in our match so p and m respectively and i create that relationship to",
    "start": "1674240",
    "end": "1680640"
  },
  {
    "text": "connect the two of them together and if i wanted to create",
    "start": "1680640",
    "end": "1688320"
  },
  {
    "text": "the tom hanks node and the apollo 13 node and the fact that they're connected",
    "start": "1688320",
    "end": "1694880"
  },
  {
    "text": "to each other with an accident relationship i could do this and then this create will create the entire",
    "start": "1694880",
    "end": "1700559"
  },
  {
    "text": "pattern into the database so before we get started with the",
    "start": "1700559",
    "end": "1706320"
  },
  {
    "text": "hands-on exercise some things to be aware of cipher can be case sensitive",
    "start": "1706320",
    "end": "1712320"
  },
  {
    "text": "so you'll node labels so those are the things for our categories for our nodes of relationship types so how we describe",
    "start": "1712320",
    "end": "1719120"
  },
  {
    "text": "the nodes are connected the property key so for example name and title the property values so tom hanks apollo",
    "start": "1719120",
    "end": "1727200"
  },
  {
    "text": "13 and function and procedures so we don't touch on that um sorry about too much all of these are",
    "start": "1727200",
    "end": "1733840"
  },
  {
    "text": "case sensitive so you must make sure they are the same neo4j is a schema-less database",
    "start": "1733840",
    "end": "1740240"
  },
  {
    "text": "so you could easily query something where you've got the case wrong it'll come back and you say you've got",
    "start": "1740240",
    "end": "1746159"
  },
  {
    "text": "zero results and that would be completely correct because the case that you've provided is",
    "start": "1746159",
    "end": "1752080"
  },
  {
    "text": "valid it's a valid query it just doesn't match what you put in so be careful about the case",
    "start": "1752080",
    "end": "1757360"
  },
  {
    "text": "sensitivity the things are not case sensitive with cipher are the cipher keywords so match not ordered by",
    "start": "1757360",
    "end": "1765120"
  },
  {
    "text": "create and so forth so those are case insensitive okay so it's time to have a go",
    "start": "1765120",
    "end": "1772720"
  },
  {
    "text": "uh if you've not already done so go to uh sandbox or neo4j.com they both",
    "start": "1772720",
    "end": "1780399"
  },
  {
    "text": "work um your if you go down this route you'll see a button that says launch the free sandbox",
    "start": "1780399",
    "end": "1785919"
  },
  {
    "text": "uh click that some of you may have already set up the sandbox which is great sign in and then you will have an option",
    "start": "1785919",
    "end": "1792960"
  },
  {
    "text": "to create a new project so click on that select a blank sandbox and click launch",
    "start": "1792960",
    "end": "1798559"
  },
  {
    "text": "project and we're going to do this together so i'm just going to come out full screen now and let's show",
    "start": "1798559",
    "end": "1804480"
  },
  {
    "text": "you so if you go to sandbox dot or neo4j.combox uh your choice",
    "start": "1804480",
    "end": "1811840"
  },
  {
    "text": "if you do that and you sign in you are going to be greeted with this group so what you want to do is",
    "start": "1811840",
    "end": "1819039"
  },
  {
    "text": "click on new project and then if you see scroll down bit you see this one here",
    "start": "1819039",
    "end": "1824159"
  },
  {
    "text": "which is blank sandbox so select blank sandbox and press launch",
    "start": "1824159",
    "end": "1829919"
  },
  {
    "text": "project so whilst you're doing that just a quick introduction to the sandbox",
    "start": "1829919",
    "end": "1836559"
  },
  {
    "text": "so the sandbox is uh something that we host in the cloud and it's a great way if you want",
    "start": "1836559",
    "end": "1841679"
  },
  {
    "text": "to have a play with neo4j and um you don't really want to",
    "start": "1841679",
    "end": "1846720"
  },
  {
    "text": "download anything or install anything and this is a really easy way for you to go away",
    "start": "1846720",
    "end": "1851760"
  },
  {
    "text": "spin up a database and have a play and as you may have spotted there we've",
    "start": "1851760",
    "end": "1856960"
  },
  {
    "text": "got lots of different use cases so we've got use cases for fraud and for working with our graph data",
    "start": "1856960",
    "end": "1862559"
  },
  {
    "text": "science library with our visualization tool and we've got a crime investigation that",
    "start": "1862559",
    "end": "1869360"
  },
  {
    "text": "kind of thing so it's a great way to go away either work with the blank sandbox which is what we're going to be doing",
    "start": "1869360",
    "end": "1875120"
  },
  {
    "text": "now or a way to work with some pre-canned data and just have a play with working with the",
    "start": "1875120",
    "end": "1880880"
  },
  {
    "text": "queries and so forth and the sandbox can last up to 10 days i'm just going to quickly show you a",
    "start": "1880880",
    "end": "1886799"
  },
  {
    "text": "couple of things here so you've got the little down arrow on the side and what you can do is if you want to",
    "start": "1886799",
    "end": "1892159"
  },
  {
    "text": "extend your sandbox to last longer you can do that and if you want to",
    "start": "1892159",
    "end": "1897360"
  },
  {
    "text": "connect with your language of choice so for example you want to connect with javascript java and so",
    "start": "1897360",
    "end": "1904559"
  },
  {
    "text": "forth we provide you with a little code snippet as well to get you going so again you can connect to the sandbox",
    "start": "1904559",
    "end": "1911039"
  },
  {
    "text": "remotely from your um using your chosen driver as well this is a good way to have a play and",
    "start": "1911039",
    "end": "1917440"
  },
  {
    "text": "explore with the explore the graph database without having to install or download anything",
    "start": "1917440",
    "end": "1923519"
  },
  {
    "text": "so i'm hoping uh just quick check i was going to say if you've got any questions do fire them in i should have said that",
    "start": "1923519",
    "end": "1929200"
  },
  {
    "text": "at the start of the session i'm keeping an eye on the chat windows both on slack and on the session one",
    "start": "1929200",
    "end": "1935919"
  },
  {
    "text": "so hopefully you're all set so what you'll want to do is press the open with browser button and what",
    "start": "1935919",
    "end": "1942640"
  },
  {
    "text": "that's going to do is it's going to launch the neo4j browser",
    "start": "1942640",
    "end": "1948000"
  },
  {
    "text": "and this is a tool that allows us to explore and write queries so we've got a few minutes left",
    "start": "1948000",
    "end": "1954399"
  },
  {
    "text": "so i want to make sure that i know we've got we've got actually got 27 minutes we're",
    "start": "1954399",
    "end": "1960240"
  },
  {
    "text": "good um so this is a good opportunity now to uh have a play and work so what happens",
    "start": "1960240",
    "end": "1967519"
  },
  {
    "text": "when you start up at startup browser for the first time you have a guide",
    "start": "1967519",
    "end": "1972960"
  },
  {
    "text": "and this will show you how to navigate around the nifty browser which is a development",
    "start": "1972960",
    "end": "1978960"
  },
  {
    "text": "aid so it talks to you about the different areas so this thing here is a guide so",
    "start": "1978960",
    "end": "1984240"
  },
  {
    "text": "that's what we're going to be using it shows you how to navigate through a guide you can find information about",
    "start": "1984240",
    "end": "1990320"
  },
  {
    "text": "how to see what labels are in use in your database and types so it's a really useful guy to step",
    "start": "1990320",
    "end": "1995679"
  },
  {
    "text": "through so what i would suggest you do at the end of this session do take some time to follow through this because this",
    "start": "1995679",
    "end": "2001200"
  },
  {
    "text": "gives you more information about how you navigate around around neo4j browser so i'm just going",
    "start": "2001200",
    "end": "2009279"
  },
  {
    "text": "to close this but do have a look at that later so for the purposes of this session now",
    "start": "2009279",
    "end": "2015600"
  },
  {
    "text": "what we're going to do you'll see a box here which says jump into code",
    "start": "2015600",
    "end": "2020640"
  },
  {
    "text": "and this is here irrespective of which sandbox you launch if you download neo4j desktop which is a",
    "start": "2020640",
    "end": "2027760"
  },
  {
    "text": "developer tool that you can run databases locally that's free to use",
    "start": "2027760",
    "end": "2033279"
  },
  {
    "text": "uh what you can do is you'll always find this when you start up neo4j browser and i find this is a really",
    "start": "2033279",
    "end": "2039440"
  },
  {
    "text": "great way to get some code get some data into your database and go away and start",
    "start": "2039440",
    "end": "2044960"
  },
  {
    "text": "working with the technology so what we can do is if we click on write code button you'll see",
    "start": "2044960",
    "end": "2051760"
  },
  {
    "text": "this thing pops up so this i mentioned is called a browser guide so these are these are html based",
    "start": "2051760",
    "end": "2060480"
  },
  {
    "text": "and it allows you to write instructions in a guide so you'll see what happens here so we're going to select the movie graph example",
    "start": "2060480",
    "end": "2067599"
  },
  {
    "text": "so you click on create a graph and this is going to launch",
    "start": "2067599",
    "end": "2072800"
  },
  {
    "text": "our browser guide that we're going to be stepping through where we're going to build a very basic recommendations engine",
    "start": "2072800",
    "end": "2077919"
  },
  {
    "text": "at the end and what you can see is this browser guide gives you a set of",
    "start": "2077919",
    "end": "2083040"
  },
  {
    "text": "instructions you'll spot things in hash boxes and these hash boxes are code and rather than having to copy and",
    "start": "2083040",
    "end": "2090320"
  },
  {
    "text": "paste or try and type out the code what you can do is you can click on the code and it'll set it up send it up",
    "start": "2090320",
    "end": "2096240"
  },
  {
    "text": "to the window to execute and you can see you can step back and forth through them so i'm going",
    "start": "2096240",
    "end": "2102079"
  },
  {
    "text": "to give you a couple of moments to get that set up so again you click on create graph",
    "start": "2102079",
    "end": "2108000"
  },
  {
    "text": "and then select the movie graph so you've got here write code create a",
    "start": "2108000",
    "end": "2114240"
  },
  {
    "text": "graph for the movie graph and then you'll see the guide set up here and what i suggest you do as well",
    "start": "2114240",
    "end": "2119599"
  },
  {
    "text": "for this session is you'll spot a little picture of the pin so if you click on that",
    "start": "2119599",
    "end": "2124640"
  },
  {
    "text": "that's going to make sure that that frame stays at the top which will be really useful as we step through the examples so again",
    "start": "2124640",
    "end": "2132400"
  },
  {
    "text": "i'm going to give you a couple of moments to get set up for that and then we will get cracking",
    "start": "2132400",
    "end": "2138240"
  },
  {
    "text": "through the examples and the thing to mention as well for those of you who are not going",
    "start": "2138240",
    "end": "2143359"
  },
  {
    "text": "through the session just now you can do this anytime so again just go to sandbox spin",
    "start": "2143359",
    "end": "2149200"
  },
  {
    "text": "up a blank sandbox you can see how you can set this guide up and you can step through that",
    "start": "2149200",
    "end": "2155920"
  },
  {
    "text": "in sort of at your own pace okay so let's get",
    "start": "2155920",
    "end": "2162000"
  },
  {
    "text": "going with this so the movie graph is a mini uh mini data set so we're",
    "start": "2162000",
    "end": "2168960"
  },
  {
    "text": "going to load something like 176 people and movies and it's a really",
    "start": "2168960",
    "end": "2174720"
  },
  {
    "text": "great way to start exploring how would you go about loading data",
    "start": "2174720",
    "end": "2179839"
  },
  {
    "text": "how do you go about querying for nodes and connected nodes and in the end what",
    "start": "2179839",
    "end": "2186240"
  },
  {
    "text": "we did what happens in this guide is you can go away and build the famous kevin bacon number counter",
    "start": "2186240",
    "end": "2194400"
  },
  {
    "text": "as well as building a simple recommendations engine so if we start stepping through this",
    "start": "2194400",
    "end": "2201520"
  },
  {
    "text": "the first page that you'll see this is the snippet that's going to load",
    "start": "2201520",
    "end": "2207680"
  },
  {
    "text": "some data into our graph so i'm going to click on this and we're going to quickly talk through what's going on",
    "start": "2207680",
    "end": "2213440"
  },
  {
    "text": "here and what you will see so what you can do to make this",
    "start": "2213440",
    "end": "2218800"
  },
  {
    "text": "uh crew window bigger press escape and then if you want to get out of it press escape again",
    "start": "2218800",
    "end": "2224079"
  },
  {
    "text": "so i'm i've pressed escape to make it a bit bigger and what you can see",
    "start": "2224079",
    "end": "2230960"
  },
  {
    "text": "here is we've got that create statement that we spoke about earlier so you can see this example here",
    "start": "2230960",
    "end": "2236640"
  },
  {
    "text": "we're creating a node that's got the label movie we've got a number of properties",
    "start": "2236640",
    "end": "2242480"
  },
  {
    "text": "associated with this node so we've got a title a released date and a tagline and we're",
    "start": "2242480",
    "end": "2247920"
  },
  {
    "text": "giving it that variable name of the matrix and we do the same for a person node as well so you can see",
    "start": "2247920",
    "end": "2254640"
  },
  {
    "text": "we're creating a number of person nodes and we've created a movie node",
    "start": "2254640",
    "end": "2260000"
  },
  {
    "text": "and then what we do next is we then say how they're being connected to each other so we're then creating the",
    "start": "2260000",
    "end": "2265920"
  },
  {
    "text": "relationships that connect between them so let's have a quick look here here so we've got nodes that we've",
    "start": "2265920",
    "end": "2271119"
  },
  {
    "text": "given a keanu reference to and it's got an accident relationship with the",
    "start": "2271119",
    "end": "2278240"
  },
  {
    "text": "movie node that has the matrix reference to it and what you can do as",
    "start": "2278240",
    "end": "2283680"
  },
  {
    "text": "well and that's what we've done here is that we've created a property for that relationship which is roles and",
    "start": "2283680",
    "end": "2289280"
  },
  {
    "text": "you can see we've got a an array here for the for the role so some in some movies you've got some",
    "start": "2289280",
    "end": "2297359"
  },
  {
    "text": "actors that have played more than one role in that movie so we can capture that but in this example here everyone's just",
    "start": "2297359",
    "end": "2303440"
  },
  {
    "text": "had the one role so we've just got the one entry but as you can see here we're now creating the relationship between",
    "start": "2303440",
    "end": "2308560"
  },
  {
    "text": "those nodes and that's done so you can see that this goes on for",
    "start": "2308560",
    "end": "2313760"
  },
  {
    "text": "a number of movies and persons and then if we go to the very bottom",
    "start": "2313760",
    "end": "2320480"
  },
  {
    "text": "what we've got here is let me just put a few spaces in there to make it a bit oops",
    "start": "2320480",
    "end": "2325599"
  },
  {
    "text": "didn't mean to run that let me bring out postage running and then what you see at the very end",
    "start": "2325599",
    "end": "2330640"
  },
  {
    "text": "is we've got this with tom h as so what a with does is with basically",
    "start": "2330640",
    "end": "2337119"
  },
  {
    "text": "says for the next part of this query please bring with you this node because i want to do",
    "start": "2337119",
    "end": "2345520"
  },
  {
    "text": "something with it and you can do this with a relationship you can do this with a pattern so in this example here",
    "start": "2345520",
    "end": "2351200"
  },
  {
    "text": "saying please bring with you the tom hanks notes so the one that we",
    "start": "2351200",
    "end": "2356400"
  },
  {
    "text": "created you know we created a person node with the name tom hanks and so forth and we've given an alias of tom h and",
    "start": "2356400",
    "end": "2362320"
  },
  {
    "text": "what we're doing this as basically says and can you create an alias for this so we're now creating",
    "start": "2362320",
    "end": "2367440"
  },
  {
    "text": "a new alias for this node uh which is a and then you can see we've got our match name in here so we're saying match a",
    "start": "2367440",
    "end": "2374800"
  },
  {
    "text": "which we know is an alien to tom h which is the tom hanks node so match tom the tom hanks that's",
    "start": "2374800",
    "end": "2380839"
  },
  {
    "text": "accident m and we know this is going to be a movie because of the pattern of our data",
    "start": "2380839",
    "end": "2386240"
  },
  {
    "text": "and then from there we want to find the directors that directed that movie so we know it's a person node and i want",
    "start": "2386240",
    "end": "2392960"
  },
  {
    "text": "to return the original note that we're interested so that's the tom hanks node",
    "start": "2392960",
    "end": "2398079"
  },
  {
    "text": "the movies and the directors i'm going to limit that result to 10 and when that gets run which has",
    "start": "2398079",
    "end": "2405359"
  },
  {
    "text": "been done here it creates all of that data and also what it does is it also returns our",
    "start": "2405359",
    "end": "2412800"
  },
  {
    "text": "query so as you can see here we've got tom hanks we've got all of the movies that he's acted in these are the",
    "start": "2412800",
    "end": "2418720"
  },
  {
    "text": "movies themselves and then this is the director of the anthem so that's what's been returned",
    "start": "2418720",
    "end": "2425680"
  },
  {
    "text": "and you can make the screen bigger if you press this little arrow so the two arrows are",
    "start": "2425680",
    "end": "2431040"
  },
  {
    "text": "pointing to the diagonal axe diagonal out expand and we can contract back again",
    "start": "2431040",
    "end": "2436640"
  },
  {
    "text": "and just quickly let's have a look at the data model and you can do that by doing call db.schema and that's going to show us",
    "start": "2436640",
    "end": "2445280"
  },
  {
    "text": "what's been oops and that's going to show us what's been loaded",
    "start": "2445280",
    "end": "2451520"
  },
  {
    "text": "and you can see i'm just going to quickly add a caption to movie so what you can as you can see here so",
    "start": "2451520",
    "end": "2457680"
  },
  {
    "text": "we've got a node of type person we've got a node of type movie we can see we've got a number of different",
    "start": "2457680",
    "end": "2464079"
  },
  {
    "text": "relationships between a node of type person and type movie so directed vote produced and so forth",
    "start": "2464079",
    "end": "2470400"
  },
  {
    "text": "and we can also see there's a self-referencing relationship on person as well so we've got person that follows person",
    "start": "2470400",
    "end": "2478400"
  },
  {
    "text": "you've got so you've got an idea of what the data model is so we now know um what our data model looks like",
    "start": "2478400",
    "end": "2484240"
  },
  {
    "text": "and this is this is effectively a schema on right so that model is going to be created",
    "start": "2484240",
    "end": "2489440"
  },
  {
    "text": "based on the data that we write to the database okay so let's step through this so what",
    "start": "2489440",
    "end": "2496319"
  },
  {
    "text": "i'm going to do is um we've gone through this i'm now",
    "start": "2496319",
    "end": "2502480"
  },
  {
    "text": "going to let you spend some time on this so i'm going to give you about two three",
    "start": "2502480",
    "end": "2509359"
  },
  {
    "text": "minutes just to try out some of these queries so again um have a look think about what the query",
    "start": "2509359",
    "end": "2516240"
  },
  {
    "text": "does what you think the query is going to do before you run it so as a quick reminder if i click",
    "start": "2516240",
    "end": "2522880"
  },
  {
    "text": "on this one here it's going to send the query up and this play button here will run it",
    "start": "2522880",
    "end": "2528000"
  },
  {
    "text": "so i'll give you a couple of moments on that and i'm just going to check on any questions that have come",
    "start": "2528000",
    "end": "2533040"
  },
  {
    "text": "up as well so got a question which is can you",
    "start": "2533040",
    "end": "2538160"
  },
  {
    "text": "elaborate on when to use many relationships versus using properties on one relationship",
    "start": "2538160",
    "end": "2545920"
  },
  {
    "text": "so that's very much going to depend on the types of questions that you are asking so let me give you an example",
    "start": "2545920",
    "end": "2554240"
  },
  {
    "text": "um let's come actually let's come let's use the movie one as an example so if the thing we only were ever",
    "start": "2554240",
    "end": "2561040"
  },
  {
    "text": "concerned about were was how a person was connected to the movie for example",
    "start": "2561040",
    "end": "2566560"
  },
  {
    "text": "and we never wanted to filter on the type of relationship they had",
    "start": "2566560",
    "end": "2572000"
  },
  {
    "text": "with the movie so all we were interested in is a person's connection to a movie",
    "start": "2572000",
    "end": "2578319"
  },
  {
    "text": "then that might be an example where we might say something like person connected to movie and then in",
    "start": "2578319",
    "end": "2584800"
  },
  {
    "text": "there maybe we're going to capture the property of what is that person's connection to the movie and maybe we'd",
    "start": "2584800",
    "end": "2590000"
  },
  {
    "text": "have an array of different connections they have to movie so for example tom hanks",
    "start": "2590000",
    "end": "2595040"
  },
  {
    "text": "has uh directed and acted in a movie same movie there's an example so we",
    "start": "2595040",
    "end": "2600480"
  },
  {
    "text": "might do that but if we're really interested in the different relationships that that",
    "start": "2600480",
    "end": "2607839"
  },
  {
    "text": "person node has had with the movie then it would make sense to pull those out so for example if we want to make recommendations for",
    "start": "2607839",
    "end": "2615040"
  },
  {
    "text": "co-actors or if somebody had been reviewing a film maybe we can make",
    "start": "2615040",
    "end": "2620240"
  },
  {
    "text": "recommendations for other films they should also be reviewing and so forth um hopefully that makes sense we've got",
    "start": "2620240",
    "end": "2627040"
  },
  {
    "text": "another question that's coming in how does the graphical representation handle large",
    "start": "2627040",
    "end": "2632160"
  },
  {
    "text": "amounts of nodes and edges right so i think the thing to bear in mind here",
    "start": "2632160",
    "end": "2637200"
  },
  {
    "text": "is whilst we can see a graph graphical representation of the nodes and edges here when we write the",
    "start": "2637200",
    "end": "2643040"
  },
  {
    "text": "queries the neo4j browser is only designed to bring back a sample",
    "start": "2643040",
    "end": "2649359"
  },
  {
    "text": "of nodes and relationships for inspection so whilst the database itself we could",
    "start": "2649359",
    "end": "2654880"
  },
  {
    "text": "probably have you were going to have well certainly you can have billions of nodes and billions of relationships",
    "start": "2654880",
    "end": "2660480"
  },
  {
    "text": "and that's what the database is designed for i'm actually visualizing it in this specific browser",
    "start": "2660480",
    "end": "2666720"
  },
  {
    "text": "um you're going to have a limit as to how many you can show but there are many libraries and visualization tools",
    "start": "2666720",
    "end": "2672800"
  },
  {
    "text": "available for um for neo4j that you may use so either they're available out of the box that",
    "start": "2672800",
    "end": "2678319"
  },
  {
    "text": "allows you to explore a larger number of nodes and relationships or maybe a visualization library that",
    "start": "2678319",
    "end": "2683599"
  },
  {
    "text": "you go off and build yourself on top of the database so those are available and if you want to find out more about that i would",
    "start": "2683599",
    "end": "2689440"
  },
  {
    "text": "really recommend if you go to our developer guides so you can find those at neo4j.com",
    "start": "2689440",
    "end": "2695760"
  },
  {
    "text": "developer you'll see a button there for developer guides and then on the menu on the left hand side",
    "start": "2695760",
    "end": "2700960"
  },
  {
    "text": "you will see there is an option for data tools and visualizations so have a look at that page and we've",
    "start": "2700960",
    "end": "2706160"
  },
  {
    "text": "got lots of information on different options that you have there okay so what i'm going to do",
    "start": "2706160",
    "end": "2712560"
  },
  {
    "text": "is let's move on to the next slide so we can have a look at that so if there's any questions on this slide you can",
    "start": "2712560",
    "end": "2719040"
  },
  {
    "text": "bring them in and then again um whilst uh you're having a look at these examples i'll answer",
    "start": "2719040",
    "end": "2724319"
  },
  {
    "text": "more questions so we're slightly expanding the patterns here now so",
    "start": "2724319",
    "end": "2729599"
  },
  {
    "text": "what you can see is we're starting to introduce the relationship so we're querying by",
    "start": "2729599",
    "end": "2736640"
  },
  {
    "text": "what relationship certain nodes have so again i'm going to give you a few moments to have a look at that so",
    "start": "2736640",
    "end": "2742560"
  },
  {
    "text": "if you've got any specific questions related to this slide let me know and i'm also going to answer",
    "start": "2742560",
    "end": "2748079"
  },
  {
    "text": "general questions coming in as well okay so okay no",
    "start": "2748079",
    "end": "2754800"
  },
  {
    "text": "that was a repeat again about the visualization okay so again so again i'll give you a",
    "start": "2754800",
    "end": "2760400"
  },
  {
    "text": "few moments for this so we're going to go through these reasonably quickly so we can",
    "start": "2760400",
    "end": "2765440"
  },
  {
    "text": "hit the more fun queries and again again don't don't don't feel like this",
    "start": "2765440",
    "end": "2770880"
  },
  {
    "text": "is the last opportunity you're going to have to explore these um please you know come back at these",
    "start": "2770880",
    "end": "2776000"
  },
  {
    "text": "that the sandboxes that you spin up will last for a minimum of three days you can extend that if you need more time",
    "start": "2776000",
    "end": "2782079"
  },
  {
    "text": "and you can keep spinning up new sandboxes as well if that is required and so you will have an",
    "start": "2782079",
    "end": "2788560"
  },
  {
    "text": "opportunity to go at these at your own pace but this is a great time now if you've got any specific questions that you'd like me to",
    "start": "2788560",
    "end": "2795359"
  },
  {
    "text": "help you with",
    "start": "2795359",
    "end": "2798000"
  },
  {
    "text": "okay so the next one so now starting to move to more interesting ones where we're starting to look at these really",
    "start": "2800839",
    "end": "2807440"
  },
  {
    "text": "graphy questions where we've taken advantage of all those connections that we've been putting",
    "start": "2807440",
    "end": "2813040"
  },
  {
    "text": "in and you think about the famous uh kevin bacon number so this was the for",
    "start": "2813040",
    "end": "2818720"
  },
  {
    "text": "those of you who have not come across it this is kevin bacon was in so many films during a period where you had this idea",
    "start": "2818720",
    "end": "2826240"
  },
  {
    "text": "of a kevin bacon number where you'd find out how many hops away an actor",
    "start": "2826240",
    "end": "2831599"
  },
  {
    "text": "was from kevin bacon and this is an example of this so i'm just going to quickly talk through this query here",
    "start": "2831599",
    "end": "2837440"
  },
  {
    "text": "because we've introduced some new patterns into the query that we've not covered",
    "start": "2837440",
    "end": "2843760"
  },
  {
    "text": "in the original slides so we've got the same idea here we're matching a person so a node of",
    "start": "2843760",
    "end": "2850079"
  },
  {
    "text": "label person they've got the property name of kevin bacon and we're putting an alias of bacon in",
    "start": "2850079",
    "end": "2857119"
  },
  {
    "text": "there and what's happening here so this what this does here so we've opened the",
    "start": "2857119",
    "end": "2862240"
  },
  {
    "text": "square brackets because we're asking something specific of the relationship type and what this says is um",
    "start": "2862240",
    "end": "2869680"
  },
  {
    "text": "from one to four hop so this star basically says we're now going to say something about the number of hops we",
    "start": "2869680",
    "end": "2876079"
  },
  {
    "text": "want to go out so from one to four hops away from this node that we've specified",
    "start": "2876079",
    "end": "2884559"
  },
  {
    "text": "go and find all of the nodes that meet that criteria so this is going to be one to four hops",
    "start": "2884559",
    "end": "2890240"
  },
  {
    "text": "out covering both movie nodes and person nodes and we're going to put that in an alias",
    "start": "2890240",
    "end": "2896400"
  },
  {
    "text": "called hollywood and then what we're going to do is return a distinct hollywood so this",
    "start": "2896400",
    "end": "2901760"
  },
  {
    "text": "is going to return all of distinct distinct relationships and nodes that are up to four hops away from",
    "start": "2901760",
    "end": "2908559"
  },
  {
    "text": "kevin bacon the reason why i put distinct here is if you think about it there could be",
    "start": "2908559",
    "end": "2913680"
  },
  {
    "text": "numerous paths that connect the same actor to kevin bacon or the same film to kevin",
    "start": "2913680",
    "end": "2919200"
  },
  {
    "text": "bacon so by saying distinct we're just saying just bring us you know just filter it down so that we've just got distinct uh entities",
    "start": "2919200",
    "end": "2926000"
  },
  {
    "text": "rather than the copies so that's what's happening with that query so do have a go with that query",
    "start": "2926000",
    "end": "2931839"
  },
  {
    "text": "and try changing some of the actor names as well so let me show you a quick tip that you can do so if you click on",
    "start": "2931839",
    "end": "2939200"
  },
  {
    "text": "the picture here database picture you'll notice here we've got the node label so these are",
    "start": "2939200",
    "end": "2945200"
  },
  {
    "text": "node labels currently on the database and the relationship types so if you're thinking oh",
    "start": "2945200",
    "end": "2950240"
  },
  {
    "text": "i want to pick a you know another person how would i find out so quick trick you can do is if you click on any of these",
    "start": "2950240",
    "end": "2958240"
  },
  {
    "text": "it'll bring back 25 of those at random and you can do the same you've",
    "start": "2958240",
    "end": "2964240"
  },
  {
    "text": "got property keys as well so these are the property keys in use on the database so if i click on person i bring back a",
    "start": "2964240",
    "end": "2970720"
  },
  {
    "text": "number of uh person nodes and if i want to see that as a table i can click on table",
    "start": "2970720",
    "end": "2975839"
  },
  {
    "text": "here and then like this i can see all of the nodes that have come back and i might decide well actually i want to",
    "start": "2975839",
    "end": "2981839"
  },
  {
    "text": "maybe hugo even or uh lil wachowski i'm going to use them and i want to do the same sort",
    "start": "2981839",
    "end": "2987359"
  },
  {
    "text": "of what is the one to four hops away from them so that's good fun to be had there and",
    "start": "2987359",
    "end": "2993920"
  },
  {
    "text": "the other thing we can do as well is we can do shortest path and we might want to know about shortest",
    "start": "2993920",
    "end": "2999520"
  },
  {
    "text": "path because you know what is the shortest path two things we can do a weight on that we can put conditions on that shortest path",
    "start": "2999520",
    "end": "3006800"
  },
  {
    "text": "but this is a very simple shortest path here an example here is we want to find the shortest path between kevin bacon",
    "start": "3006800",
    "end": "3012800"
  },
  {
    "text": "and meg ryan so let me just quickly talk through what's going on here so we've got our so we're using this um",
    "start": "3012800",
    "end": "3020800"
  },
  {
    "text": "procedure shortest path and what we're saying inside is you know again same idea so bacon",
    "start": "3020800",
    "end": "3026400"
  },
  {
    "text": "person bacon so we want our kevin bacon node we want our meg ryan node and then you",
    "start": "3026400",
    "end": "3032480"
  },
  {
    "text": "can see here we've got the relationship and we've got this star and this basically says uh go through",
    "start": "3032480",
    "end": "3038880"
  },
  {
    "text": "the you know it's basically expand everything every single possible path now a word of warning this",
    "start": "3038880",
    "end": "3046720"
  },
  {
    "text": "is okay to use when we wrap it with shortest path don't remove shortest path and try to",
    "start": "3046720",
    "end": "3053440"
  },
  {
    "text": "run this query and let me tell you why now we've got a relatively small graph so we've got",
    "start": "3053440",
    "end": "3059200"
  },
  {
    "text": "something like 176 nodes and i'm going to guess probably an equivalent number of relationships maybe",
    "start": "3059200",
    "end": "3064720"
  },
  {
    "text": "a couple more now that's a that is a tiny data set when it comes to graphs but if we think about how those things",
    "start": "3064720",
    "end": "3071599"
  },
  {
    "text": "are connected and then you realize well actually if we thought about all the different paths",
    "start": "3071599",
    "end": "3078800"
  },
  {
    "text": "that uh two nodes like kevin bacon and meg ryan could be connected all of a sudden there could",
    "start": "3078800",
    "end": "3084240"
  },
  {
    "text": "be millions if you know potentially even billions of different parts that you could traverse",
    "start": "3084240",
    "end": "3090559"
  },
  {
    "text": "to get between kevin bacon and meg ryan because they'll be the direct ones they'll be via",
    "start": "3090559",
    "end": "3096079"
  },
  {
    "text": "one actor could be via you know 20 actors they they would be millions upon millions of different ways",
    "start": "3096079",
    "end": "3102800"
  },
  {
    "text": "that those two could be connected and that is going to run you know a long",
    "start": "3102800",
    "end": "3108240"
  },
  {
    "text": "long time that query is not going to complete just due to the millions upon millions of different paths that those could be",
    "start": "3108240",
    "end": "3114559"
  },
  {
    "text": "connected the reason why this works with the shortest path is because what the algorithm does as soon as it finds",
    "start": "3114559",
    "end": "3121680"
  },
  {
    "text": "a path between kevin bacon and meg ryan anything that's longer than the path it has it's never",
    "start": "3121680",
    "end": "3128400"
  },
  {
    "text": "going to bother exploring and as soon as it's got a shorter path it's never going to bother exploring the slightly longer",
    "start": "3128400",
    "end": "3134000"
  },
  {
    "text": "paths so this is why this is perfectly acceptable within shortest path because it's just going to discard",
    "start": "3134000",
    "end": "3139920"
  },
  {
    "text": "the paths that are longer than what it currently has but if you run that without it's just",
    "start": "3139920",
    "end": "3145119"
  },
  {
    "text": "going to basically iterate across every single possible path between those two nodes",
    "start": "3145119",
    "end": "3150559"
  },
  {
    "text": "so don't do that so that's just just a word of warning around that so",
    "start": "3150559",
    "end": "3156640"
  },
  {
    "text": "again i'll give you a couple of moments to have a go at that and i shall check",
    "start": "3156640",
    "end": "3161680"
  },
  {
    "text": "the questions again so got a question is it possible to solve problems like the bridges of",
    "start": "3161680",
    "end": "3167920"
  },
  {
    "text": "konigsberg using queries i'm going to have to let onto the secret i've never actually tried",
    "start": "3167920",
    "end": "3173920"
  },
  {
    "text": "doing the bridges of hennesburg it must be a way there must be way of doing that so there will be",
    "start": "3173920",
    "end": "3179040"
  },
  {
    "text": "many implementations of the travelling salesman problem so i've certainly done sort of cursory google for it and see people have done",
    "start": "3179040",
    "end": "3185520"
  },
  {
    "text": "solutions i've not had to go by myself so i'd say have a look i'm pretty certain people",
    "start": "3185520",
    "end": "3190559"
  },
  {
    "text": "have done it and but interesting that you mentioned it so something i did have a look at",
    "start": "3190559",
    "end": "3195680"
  },
  {
    "text": "recently was my colleague was talking about the how many triangles so you know the problem where you get",
    "start": "3195680",
    "end": "3201920"
  },
  {
    "text": "um you get sort of a triangle and a triangle within a triangle and there's load of lines and you have to",
    "start": "3201920",
    "end": "3207520"
  },
  {
    "text": "try and figure out the number of uh triangles that are there so i that one i did do recently so if",
    "start": "3207520",
    "end": "3213599"
  },
  {
    "text": "you have a look at our medium blog so if you go to medium.com neo4j you'll notice that one's very",
    "start": "3213599",
    "end": "3219839"
  },
  {
    "text": "recently published and that's one i did go off and solve when i wrote the cipher query it was literally like",
    "start": "3219839",
    "end": "3227520"
  },
  {
    "text": "less than like 60 characters or something it was tiny tiny tiny query that allows me to go away and",
    "start": "3227520",
    "end": "3233760"
  },
  {
    "text": "count how many triangles because again it's just it's just running through the paths and tossing them up",
    "start": "3233760",
    "end": "3239520"
  },
  {
    "text": "so do check that out if that kind of thing is of interest so yeah just have a quick google of travelling salesman and neo4j or",
    "start": "3239520",
    "end": "3246160"
  },
  {
    "text": "bridges of coonsburg and neo4j and do have a look at the triangles one as well it's good fun",
    "start": "3246160",
    "end": "3251359"
  },
  {
    "text": "and let me have a quick look at another question is manual indexes possible needed right",
    "start": "3251359",
    "end": "3256559"
  },
  {
    "text": "yeah so quick touch on indexes so the thing with neo4j it's what we'd call",
    "start": "3256559",
    "end": "3264079"
  },
  {
    "text": "it uses index free adjacency so what that means is when we've got a node great we create",
    "start": "3264079",
    "end": "3270559"
  },
  {
    "text": "a node we've got another node great we've got the other node and when we know that they're connected by a relationship",
    "start": "3270559",
    "end": "3276799"
  },
  {
    "text": "we create that physical relationship between the two nodes and how we do that",
    "start": "3276799",
    "end": "3281839"
  },
  {
    "text": "is through effectively point chasing so we've got a pointer so we've got pointer for the node we've got a relationship",
    "start": "3281839",
    "end": "3287520"
  },
  {
    "text": "and the relationship will point to one we'll have a pointer that points to the first node and then i'll have another point that points to the other node to",
    "start": "3287520",
    "end": "3293359"
  },
  {
    "text": "say that they're connected and then when we traverse so for example when we are",
    "start": "3293359",
    "end": "3298960"
  },
  {
    "text": "finding out the characters of tom hanks as an example we find the tom hanks node and then we",
    "start": "3298960",
    "end": "3305040"
  },
  {
    "text": "just basically say because we wanted to know about tom hanks when he was an accident who he co-acted with",
    "start": "3305040",
    "end": "3310640"
  },
  {
    "text": "we go well okay so we're just going to chase down the pointers of all the relationships that have got the acted in relationship we go to the movie",
    "start": "3310640",
    "end": "3317440"
  },
  {
    "text": "node and then we go check all of the outgoing relationships that have the acted in and we go you know we chase those pointers",
    "start": "3317440",
    "end": "3323599"
  },
  {
    "text": "so it's super super fast we're not having to do any kind of mapping look up so this is crazy fast",
    "start": "3323599",
    "end": "3329839"
  },
  {
    "text": "for being able to do 10 you know hops 20 hops whatever you don't have this off um grow this this exponential growth",
    "start": "3329839",
    "end": "3337440"
  },
  {
    "text": "that you'd have if you were using a mapping table for relational data space however",
    "start": "3337440",
    "end": "3342880"
  },
  {
    "text": "what we do use indexes for you can put an index and in fact if you've got a large data",
    "start": "3342880",
    "end": "3348000"
  },
  {
    "text": "set we would recommend you put an index on the property or property values",
    "start": "3348000",
    "end": "3354559"
  },
  {
    "text": "on your node that you would be doing your initial lookup so let's take this example with the movie",
    "start": "3354559",
    "end": "3360480"
  },
  {
    "text": "database if we were going to let's say we had millions of uh actor nodes in there we had millions of",
    "start": "3360480",
    "end": "3367440"
  },
  {
    "text": "movie nodes in there it would make sense that we had an index on the",
    "start": "3367440",
    "end": "3372640"
  },
  {
    "text": "actor's name and the movie title because whilst when we've located say",
    "start": "3372640",
    "end": "3379119"
  },
  {
    "text": "our tom hanks node and we want to find out his co-actors of co-actors and that's going to be super fast where we just",
    "start": "3379119",
    "end": "3384559"
  },
  {
    "text": "point at chase to find the end locations the actual act of locating the tom hanks node well",
    "start": "3384559",
    "end": "3390319"
  },
  {
    "text": "we have to do something about that and we don't want to scan the entire database so what we do is we can put an index on those",
    "start": "3390319",
    "end": "3397040"
  },
  {
    "text": "properties that we know that we're going to do a frequent search for and then we do an index node on the",
    "start": "3397040",
    "end": "3402880"
  },
  {
    "text": "first node or the nodes that are the first part of our query and then we switch over to that",
    "start": "3402880",
    "end": "3408319"
  },
  {
    "text": "index for adjacency where we run through the pointers so hopefully that makes sense okay",
    "start": "3408319",
    "end": "3414799"
  },
  {
    "text": "let's have a quick look at the last one which is our recommendations engine and then we are got another three",
    "start": "3414799",
    "end": "3421280"
  },
  {
    "text": "minutes left so very quickly talking through what's going on here and again i really do",
    "start": "3421280",
    "end": "3427680"
  },
  {
    "text": "recommend spend some time looking through this at your own time you've got the sandboxes they're easily available",
    "start": "3427680",
    "end": "3434079"
  },
  {
    "text": "so what you can see here we're doing the pattern so we're looking here for uh tom hanks node again and we're looking",
    "start": "3434079",
    "end": "3439359"
  },
  {
    "text": "the moves that he's acted in and you know so finding those characters and then",
    "start": "3439359",
    "end": "3444799"
  },
  {
    "text": "what we're doing is we're taking those co-actors or we want to find out the movies that they've acted in and",
    "start": "3444799",
    "end": "3450079"
  },
  {
    "text": "their their co-actors hence cocoa actors and then what we're saying is well we want to remove",
    "start": "3450079",
    "end": "3456160"
  },
  {
    "text": "any of those coco actors that have already acted with tom hanks so this is that where not so we're not tom has",
    "start": "3456160",
    "end": "3462480"
  },
  {
    "text": "acted in we know that's going to be a movie so that can be an open that could be an empty node because we",
    "start": "3462480",
    "end": "3467520"
  },
  {
    "text": "know that's going to be a movie there acted in the first character so we're going to get rid of all those coco actors that tom hanks has already acted",
    "start": "3467520",
    "end": "3474160"
  },
  {
    "text": "in acted with and we don't want tom to be that co-actor so that's what's happening so just in case",
    "start": "3474160",
    "end": "3479920"
  },
  {
    "text": "tom hanks has been pulled back as that co-actor and then we're returning the cocoa actors names so these are the ones",
    "start": "3479920",
    "end": "3485440"
  },
  {
    "text": "that we're recommending and what we want to do is we want to weight them by strength",
    "start": "3485440",
    "end": "3490880"
  },
  {
    "text": "and the waiting system that we're doing here is we're saying find those coco actors that have acted",
    "start": "3490880",
    "end": "3496960"
  },
  {
    "text": "with many of tom hanks co-actors effectively those cocoa actors",
    "start": "3496960",
    "end": "3502880"
  },
  {
    "text": "that have the most hits with tom hanks his co-actors those should be the ones that we more",
    "start": "3502880",
    "end": "3508079"
  },
  {
    "text": "strongly recommend so that's what we're doing here and we're ordering by strength and you can see as well the example here",
    "start": "3508079",
    "end": "3514720"
  },
  {
    "text": "about who could introduce tom hanks to tom cruise so you've got a similar idea we're finding the characters for",
    "start": "3514720",
    "end": "3522160"
  },
  {
    "text": "tom hanks and then we're using those characters to the movies to find",
    "start": "3522160",
    "end": "3529440"
  },
  {
    "text": "the uh tom cruise finding things tom cruise of those um oh excuse me",
    "start": "3529440",
    "end": "3536079"
  },
  {
    "text": "so what you can see here is the co-actors these are ones we're trying to find the links between tom hanks and tom cruise and we're going to return those names so",
    "start": "3536079",
    "end": "3543760"
  },
  {
    "text": "i'm going to leave it there so please do spend some more time on those i've not got more questions i'm going to be",
    "start": "3543760",
    "end": "3549680"
  },
  {
    "text": "around on slacks so if you want to send me a pm on slack i'll keep an eye on conference roommate",
    "start": "3549680",
    "end": "3556160"
  },
  {
    "text": "as well for the next 20 minutes if you've got any more questions please let me know",
    "start": "3556160",
    "end": "3561359"
  },
  {
    "text": "so what i would recommend as next steps do go away and have a play with the",
    "start": "3561359",
    "end": "3567680"
  },
  {
    "text": "sandbox you've got some more examples there let's work with the guides do go through the queries that we've covered here so",
    "start": "3567680",
    "end": "3573920"
  },
  {
    "text": "that you feel comfortable with those there's a lot of good fun to be had there and if you're looking to",
    "start": "3573920",
    "end": "3582880"
  },
  {
    "text": "if you're looking to continue your get rid of this",
    "start": "3582880",
    "end": "3588000"
  },
  {
    "text": "so if you're looking to continue your graph journey you want to learn more certain things that i would recommend",
    "start": "3588000",
    "end": "3594960"
  },
  {
    "text": "we've got the graph database book so you can get the free pdf of this on our website the links will appear",
    "start": "3594960",
    "end": "3601760"
  },
  {
    "text": "shortly or you can if you like a physical book you can order that from your favorite book",
    "start": "3601760",
    "end": "3607599"
  },
  {
    "text": "retailer so this is really great it's been around for a few years but still very valid you've got a lot of",
    "start": "3607599",
    "end": "3613280"
  },
  {
    "text": "description around my graph spotting your graphs shape problems chapter three talks a lot about graph modelling approaches",
    "start": "3613280",
    "end": "3619839"
  },
  {
    "text": "so that's a really good book we have a load of online content so we've got",
    "start": "3619839",
    "end": "3626400"
  },
  {
    "text": "training content on starting out with neo4j we have things on graph data modeling",
    "start": "3626400",
    "end": "3631440"
  },
  {
    "text": "and administration it's a lot of high quality free content there you can also do our certification course",
    "start": "3631440",
    "end": "3638640"
  },
  {
    "text": "again that is free and you can become a neo4j certified professional so do check that out as well and also we",
    "start": "3638640",
    "end": "3645839"
  },
  {
    "text": "have a lot of content on uh youtube so we have many things we have developer guides as well",
    "start": "3645839",
    "end": "3651440"
  },
  {
    "text": "we have our medium blog posts but these are like three main things that you may find useful actually you've got the links",
    "start": "3651440",
    "end": "3657839"
  },
  {
    "text": "there so you'll link that to the book uh check out the graph academy you'll find information then the various",
    "start": "3657839",
    "end": "3663280"
  },
  {
    "text": "training courses that we have as well as the certification scheme and if you want to have a look at",
    "start": "3663280",
    "end": "3668720"
  },
  {
    "text": "a sort of user stories best practices how to we also have technical content as well on",
    "start": "3668720",
    "end": "3674240"
  },
  {
    "text": "how to get set up and that kind of thing do have a look at the youtube channel",
    "start": "3674240",
    "end": "3679359"
  },
  {
    "text": "and again if you've got any questions again i'll keep an eye on slack so let me know if you want to get",
    "start": "3679359",
    "end": "3685440"
  },
  {
    "text": "in contact with me you've got my details there and i would heartily recommend you come check out our community we've got a very",
    "start": "3685440",
    "end": "3692000"
  },
  {
    "text": "strong healthy vibrant community we're really keen to hear about any graph stories",
    "start": "3692000",
    "end": "3697280"
  },
  {
    "text": "that you're getting involved in if you need some help come reach out to the community let us know",
    "start": "3697280",
    "end": "3703119"
  },
  {
    "text": "and you can find the community at community.neo4j.com so thank you very much and again if",
    "start": "3703119",
    "end": "3709119"
  },
  {
    "text": "you've got any questions please do let me know",
    "start": "3709119",
    "end": "3713839"
  }
]