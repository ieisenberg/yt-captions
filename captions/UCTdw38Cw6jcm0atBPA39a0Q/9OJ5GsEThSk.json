[
  {
    "text": "welcome to my talk good morning I hope you enjoyed the first day",
    "start": "4319",
    "end": "9400"
  },
  {
    "text": "of the conference did you I didn't I love",
    "start": "9400",
    "end": "15600"
  },
  {
    "text": "it so I will talk about modules once again",
    "start": "15600",
    "end": "22519"
  },
  {
    "text": "but please don't be scared it's the last time first of all we'll talk about we'll",
    "start": "22519",
    "end": "29080"
  },
  {
    "text": "give you a short modules recap it's not an introduction it's just to make you",
    "start": "29080",
    "end": "34559"
  },
  {
    "text": "more familiar with the terminology then we will talk about the compilers and how the status of the implementation of",
    "start": "34559",
    "end": "41640"
  },
  {
    "text": "modules in the compilers are and I will go through an example of a modularization of an existing Library I",
    "start": "41640",
    "end": "49800"
  },
  {
    "text": "will talk about build systems that support modules I will speak a little",
    "start": "49800",
    "end": "55000"
  },
  {
    "text": "bit about module dependencies and why they are so important",
    "start": "55000",
    "end": "60640"
  },
  {
    "text": "and then I will dive into a code demo this is a",
    "start": "60640",
    "end": "66000"
  },
  {
    "text": "continuation of a demo that I go I gave last year both here but also in the",
    "start": "66000",
    "end": "71240"
  },
  {
    "text": "Keynotes in cppcon and meeting C++ and I will expand on the parts that have been",
    "start": "71240",
    "end": "78159"
  },
  {
    "text": "missing out or left out out of these demo code uh",
    "start": "78159",
    "end": "83240"
  },
  {
    "text": "demonstrations and in the end as usual try to come to a",
    "start": "83240",
    "end": "88840"
  },
  {
    "text": "conclusion this QR code this is the instructions where you can get all of",
    "start": "88840",
    "end": "94200"
  },
  {
    "text": "the code and also the slides and as you can see I'm an",
    "start": "94200",
    "end": "99439"
  },
  {
    "text": "electrical engineer by profession I started I had my first programming",
    "start": "99439",
    "end": "106159"
  },
  {
    "text": "contract in the final school years in the late '70s and for some unfortunate",
    "start": "106159",
    "end": "111840"
  },
  {
    "text": "reason I'm still stuck there I'm also participating in the",
    "start": "111840",
    "end": "117799"
  },
  {
    "text": "committee in particular the evolution working group and also the tooling study group who's in charge of all these build",
    "start": "117799",
    "end": "125399"
  },
  {
    "text": "tool stuff for example and I'm employed at a small",
    "start": "125399",
    "end": "130840"
  },
  {
    "text": "company in Germany we build machines this is kind of industrial embedded what",
    "start": "130840",
    "end": "137959"
  },
  {
    "text": "I'm working on so let's dive into modules this is",
    "start": "137959",
    "end": "143160"
  },
  {
    "text": "probably the shortest introduction that you will ever get in your life about modules um in the traditional",
    "start": "143160",
    "end": "150319"
  },
  {
    "text": "compilation world we have libraries that have an interface usually implemented as",
    "start": "150319",
    "end": "156200"
  },
  {
    "text": "a header and we have implementation files and this combination is called by",
    "start": "156200",
    "end": "163239"
  },
  {
    "text": "John Lakers hopefully you know this name a module which it isn't but anyway and",
    "start": "163239",
    "end": "169480"
  },
  {
    "text": "these users of the library just include the interface header and the",
    "start": "169480",
    "end": "177239"
  },
  {
    "text": "meaning of the interface header dat and the contents in there depend on at which",
    "start": "177239",
    "end": "183599"
  },
  {
    "text": "point in the client translation unit the interface is actually included so there",
    "start": "183599",
    "end": "190560"
  },
  {
    "text": "might be different um interpretations of the textual code that you have in there",
    "start": "190560",
    "end": "196879"
  },
  {
    "text": "and this might lead to odr violations that we all love and hardly ever",
    "start": "196879",
    "end": "203440"
  },
  {
    "text": "see and um yes this is not just a theoretical kind of thing I've been",
    "start": "203440",
    "end": "210439"
  },
  {
    "text": "suffering from that in particular in preparation of this talk a",
    "start": "210439",
    "end": "215560"
  },
  {
    "text": "lot so what does the compiler do when it translates such a um translation unit",
    "start": "215560",
    "end": "223959"
  },
  {
    "text": "from the user it starts out with no declarations and it collect them through the whole",
    "start": "223959",
    "end": "230560"
  },
  {
    "text": "compilation of the translation unit it starts out with a couple of macros from",
    "start": "230560",
    "end": "235640"
  },
  {
    "text": "the command line or predefined and the same with compiler options s and at the",
    "start": "235640",
    "end": "241360"
  },
  {
    "text": "end of the translation it writes out hopefully at least an object",
    "start": "241360",
    "end": "247480"
  },
  {
    "text": "file and everything else is discarded and the next translation unit the same",
    "start": "247480",
    "end": "253560"
  },
  {
    "text": "is going on and on and on what changes with",
    "start": "253560",
    "end": "261560"
  },
  {
    "text": "modules is that the interface of this library that",
    "start": "261560",
    "end": "268400"
  },
  {
    "text": "I've been alluding to is no longer a header file but it becomes a translation unit on its",
    "start": "268400",
    "end": "275639"
  },
  {
    "text": "own so this is why the interface of a",
    "start": "275639",
    "end": "280919"
  },
  {
    "text": "library is no longer a header but a interface unit a translation unit just",
    "start": "280919",
    "end": "286280"
  },
  {
    "text": "as any other and the benefit of that is it",
    "start": "286280",
    "end": "291479"
  },
  {
    "text": "doesn't uh start the compilation and the meaning of the texts in there with",
    "start": "291479",
    "end": "297680"
  },
  {
    "text": "something that has happened before the TT textual inclusion but it start starts right out from the beginning of the",
    "start": "297680",
    "end": "304680"
  },
  {
    "text": "compilation so we have full control about which macros there are what kind",
    "start": "304680",
    "end": "311000"
  },
  {
    "text": "of compiler Flex we give and all of that and it also means the interface of the",
    "start": "311000",
    "end": "317960"
  },
  {
    "text": "library is compiled only once so there's no Divergence in the meaning of the text",
    "start": "317960",
    "end": "323840"
  },
  {
    "text": "in our code the problem is translation units in both C and C++",
    "start": "323840",
    "end": "331840"
  },
  {
    "text": "are independently compiled of each other so how do we transfer the contents of",
    "start": "331840",
    "end": "339880"
  },
  {
    "text": "the interface to both the implementation of the library and the users who want to use a module and there is a new channel",
    "start": "339880",
    "end": "348560"
  },
  {
    "text": "that has been invented and this is called a built module interface in short",
    "start": "348560",
    "end": "354520"
  },
  {
    "text": "BMI everything that the compiler encounters you've seen one of these columns there goes into this BMI file",
    "start": "354520",
    "end": "365840"
  },
  {
    "text": "and the the BMI F allows that other translation units know what is actually",
    "start": "365840",
    "end": "374080"
  },
  {
    "text": "contained in the interface of a library for example and the difference is",
    "start": "374080",
    "end": "380960"
  },
  {
    "text": "the con constituting parts of a module see all of the entities that are stored",
    "start": "380960",
    "end": "388120"
  },
  {
    "text": "in a BMI there is only selected parts of the contents in the interface become",
    "start": "388120",
    "end": "395280"
  },
  {
    "text": "available to the users outside of the module so you",
    "start": "395280",
    "end": "400440"
  },
  {
    "text": "can tightly control what you make available to your users of a",
    "start": "400440",
    "end": "407160"
  },
  {
    "text": "library the compiler does basically the same thing when it compiles such an",
    "start": "408520",
    "end": "414520"
  },
  {
    "text": "interface biggest difference is it starts out by zero and in the end and it",
    "start": "414520",
    "end": "420240"
  },
  {
    "text": "doesn't throw away all of the Declarations in there but rather it serializes it",
    "start": "420240",
    "end": "426879"
  },
  {
    "text": "into the BMI file and usually implementations also store a bit of",
    "start": "426879",
    "end": "434680"
  },
  {
    "text": "information in there about the initial compilation State like macros that have",
    "start": "434680",
    "end": "439840"
  },
  {
    "text": "been on the command line or compiler flxs this is to make sure that both the",
    "start": "439840",
    "end": "445360"
  },
  {
    "text": "user and the producer of an interface are compatible with each other compilers",
    "start": "445360",
    "end": "450759"
  },
  {
    "text": "can check that and they actually do so how does that look like in in the",
    "start": "450759",
    "end": "458440"
  },
  {
    "text": "real world a little bit about terminology in the top you see the",
    "start": "458440",
    "end": "464240"
  },
  {
    "text": "primary interface unit one of the translation unit types of modules in the",
    "start": "464240",
    "end": "469520"
  },
  {
    "text": "bottom you see a module implementation unit you can have as many of them as you",
    "start": "469520",
    "end": "474960"
  },
  {
    "text": "like and then both of these uh translation units carry a name of the",
    "start": "474960",
    "end": "480919"
  },
  {
    "text": "module and this is the reason why this module type is called named module and all the parts of code that",
    "start": "480919",
    "end": "490440"
  },
  {
    "text": "have this uh light green backdrop constitute the so-called module",
    "start": "490440",
    "end": "497039"
  },
  {
    "text": "perview this is actually the core part of a module",
    "start": "497039",
    "end": "502159"
  },
  {
    "text": "where all the module module rules apply they are slightly different to what we",
    "start": "502159",
    "end": "507560"
  },
  {
    "text": "are used to today",
    "start": "507560",
    "end": "511240"
  },
  {
    "text": "Please be aware of the fact that uh the per viw is not a nam space on its own",
    "start": "512640",
    "end": "518959"
  },
  {
    "text": "but it creates something like an independent domain of names that you can",
    "start": "518959",
    "end": "527160"
  },
  {
    "text": "have um independent from any other module then there's the so-called Global",
    "start": "527160",
    "end": "535080"
  },
  {
    "text": "module this are the orange Parts here and this is the the module that you",
    "start": "535080",
    "end": "542720"
  },
  {
    "text": "haven't been even aware that you have been programming in this is just the same as with the Nam",
    "start": "542720",
    "end": "549480"
  },
  {
    "text": "spaces uh C code is in the global Nam space and C++ is in individual Nam",
    "start": "549480",
    "end": "554519"
  },
  {
    "text": "spaces and with modules we have the same have the named module purviews and we",
    "start": "554519",
    "end": "560519"
  },
  {
    "text": "also have the global module each module translation unit can",
    "start": "560519",
    "end": "569519"
  },
  {
    "text": "optionally have an leading section where you can have a small fragment of the",
    "start": "569519",
    "end": "578600"
  },
  {
    "text": "global module and this is where you can introduce for example the standard",
    "start": "578600",
    "end": "584440"
  },
  {
    "text": "Library headers or other headers that you already have to make them available to implement your interface or your",
    "start": "584440",
    "end": "593200"
  },
  {
    "text": "implementation and this is introduced by a module declaration without a name so the global",
    "start": "593200",
    "end": "599880"
  },
  {
    "text": "module doesn't have a name on its own the next thing what we have to talk",
    "start": "599880",
    "end": "607680"
  },
  {
    "text": "about this is exportation of entities",
    "start": "607680",
    "end": "613000"
  },
  {
    "text": "through the BMI exported is not something that applies",
    "start": "613000",
    "end": "618640"
  },
  {
    "text": "to the Declaration itself it applies only to names if you export a name from",
    "start": "618640",
    "end": "626000"
  },
  {
    "text": "a module you make it available to name lookup and that's the whole secret of modules if",
    "start": "626000",
    "end": "633880"
  },
  {
    "text": "you will in syntax as seen before a module",
    "start": "633880",
    "end": "639560"
  },
  {
    "text": "declaration without a name introduces the global module fragment this is a part of the global",
    "start": "639560",
    "end": "645360"
  },
  {
    "text": "module then you come to the so-called module declaration where you name the",
    "start": "645360",
    "end": "652560"
  },
  {
    "text": "module or give it a name all translation units with the same module name are part of the same module",
    "start": "652560",
    "end": "659720"
  },
  {
    "text": "and if you stick an export keyword in front of it you designate this",
    "start": "659720",
    "end": "665000"
  },
  {
    "text": "particular translation unit as the so-called primary module",
    "start": "665000",
    "end": "670600"
  },
  {
    "text": "interface and you can have only one of them so one file tells the users what they expect as",
    "start": "670600",
    "end": "679760"
  },
  {
    "text": "the exported entities from a module you can import foreign modules",
    "start": "679760",
    "end": "687440"
  },
  {
    "text": "into your own module for for example you want to use entities from there in your own",
    "start": "687440",
    "end": "692760"
  },
  {
    "text": "interface or you can also make them part of your own module by ex re-exporting",
    "start": "692760",
    "end": "698800"
  },
  {
    "text": "the foreign module and you still can include header files in here but please",
    "start": "698800",
    "end": "706120"
  },
  {
    "text": "be aware we are in the module perview so the contents of this header file become",
    "start": "706120",
    "end": "713079"
  },
  {
    "text": "an integral part of the module itself you can't use the same header",
    "start": "713079",
    "end": "719880"
  },
  {
    "text": "within a module and outside of a module that would designate different",
    "start": "719880",
    "end": "726600"
  },
  {
    "text": "entities and here we see an example of an exported",
    "start": "726800",
    "end": "732160"
  },
  {
    "text": "declaration I say export the name frop of this function",
    "start": "732160",
    "end": "737639"
  },
  {
    "text": "declaration here the other parts of the function declaration are the entities",
    "start": "737639",
    "end": "743519"
  },
  {
    "text": "that come with the name but they're not visible in the sense at that we used to",
    "start": "743519",
    "end": "749760"
  },
  {
    "text": "in the traditional work they are just reable so the compiler can use that you",
    "start": "749760",
    "end": "755760"
  },
  {
    "text": "as a user are usually not involved into this kind of",
    "start": "755760",
    "end": "762079"
  },
  {
    "text": "uh um thinking in the bottom I have a module",
    "start": "762079",
    "end": "767399"
  },
  {
    "text": "declaration with the same name so this is part of the same module and this designates it as the module",
    "start": "767399",
    "end": "774240"
  },
  {
    "text": "implementation unit where I have the function body then there's another concept that",
    "start": "774240",
    "end": "780279"
  },
  {
    "text": "you that are new to modules and this allows us to give uh modules so-called",
    "start": "780279",
    "end": "786040"
  },
  {
    "text": "name isolation we have a module one in the left a module two in the right and",
    "start": "786040",
    "end": "791480"
  },
  {
    "text": "both of them have a non-exported function declaration called Fu as you",
    "start": "791480",
    "end": "796600"
  },
  {
    "text": "can see and these two function declarations do not Clash they have the",
    "start": "796600",
    "end": "801959"
  },
  {
    "text": "same name in different modules so they are different things each Fu can have a",
    "start": "801959",
    "end": "807399"
  },
  {
    "text": "different implementation",
    "start": "807399",
    "end": "810760"
  },
  {
    "text": "and if you import both modules into a translation",
    "start": "813680",
    "end": "818920"
  },
  {
    "text": "unit you can then use the exported functions in there with the function",
    "start": "818920",
    "end": "826680"
  },
  {
    "text": "bodies in line in the interface referring to the individual Fu functions",
    "start": "826680",
    "end": "834959"
  },
  {
    "text": "and the Linker has no problem using these uh F implementations from",
    "start": "834959",
    "end": "842120"
  },
  {
    "text": "different modules this is different from the traditional word you can't do that in",
    "start": "842120",
    "end": "847880"
  },
  {
    "text": "the traditional compilation model and the secret behind it there is",
    "start": "847880",
    "end": "857199"
  },
  {
    "text": "a notion called attachment so the fu in the left is attached to the module mod",
    "start": "857199",
    "end": "864279"
  },
  {
    "text": "one in this particular example so Theus has a different uh is a different entity",
    "start": "864279",
    "end": "872320"
  },
  {
    "text": "F at uh module one from the one onto right F at attached to module",
    "start": "872320",
    "end": "878440"
  },
  {
    "text": "two and this is this is the same for all names that are",
    "start": "878440",
    "end": "884959"
  },
  {
    "text": "part of the module perview this is the difference that I've been alluding to",
    "start": "884959",
    "end": "891040"
  },
  {
    "text": "all and all names in the perview of a module are attached to this module so",
    "start": "891040",
    "end": "898720"
  },
  {
    "text": "not attached to the global module in the specification of modules",
    "start": "898720",
    "end": "906399"
  },
  {
    "text": "we have a zoo of translation unit types that you can use I don't go into any details here",
    "start": "906399",
    "end": "916000"
  },
  {
    "text": "um we have seen the primary module interface so far and the module implementation unit but we also have",
    "start": "916000",
    "end": "921680"
  },
  {
    "text": "interface partitions internal partitions and the so-called private module",
    "start": "921680",
    "end": "926839"
  },
  {
    "text": "fragment and each of them have different properties that you can choose from if you want to build an name module",
    "start": "926839",
    "end": "934160"
  },
  {
    "text": "and we also have something that is completely different from that in many aspects at least and these are the",
    "start": "934160",
    "end": "940360"
  },
  {
    "text": "so-called header units this is when you have a header and instructed compiler to compile it just as a translation unit",
    "start": "940360",
    "end": "949319"
  },
  {
    "text": "and this is where the name comes from Please be aware it sounds easy to",
    "start": "949319",
    "end": "954839"
  },
  {
    "text": "compile a header in fact this is the most complicated type of module translation unit that you can have and",
    "start": "954839",
    "end": "964360"
  },
  {
    "text": "build systems are quite struggling with that kind of translation unit type the important differences are in",
    "start": "964360",
    "end": "971959"
  },
  {
    "text": "particular the name modules have a perview with attachment and name isolation whereas the header unit units",
    "start": "971959",
    "end": "980120"
  },
  {
    "text": "don't um the header units are part of the global modules whereas the name",
    "start": "980120",
    "end": "985279"
  },
  {
    "text": "modules have their own but they can use parts of the global module",
    "start": "985279",
    "end": "990959"
  },
  {
    "text": "entities head units can export macros sounds great but gives build",
    "start": "990959",
    "end": "999319"
  },
  {
    "text": "systems a really hard time",
    "start": "999319",
    "end": "1005279"
  },
  {
    "text": "and named modules have full isolation so no other stuff",
    "start": "1005279",
    "end": "1013360"
  },
  {
    "text": "can um change the meaning of entities and stuff in modules can change the",
    "start": "1013360",
    "end": "1020319"
  },
  {
    "text": "meaning of others whereas with header units you don't have full",
    "start": "1020319",
    "end": "1026918"
  },
  {
    "text": "isolation so this is just a short introduction I've given a couple of",
    "start": "1026919",
    "end": "1032839"
  },
  {
    "text": "talks in the past about the details of that if you want to know more about it",
    "start": "1032839",
    "end": "1038600"
  },
  {
    "text": "just watch any of these videos of mine to learn more about uh composition of",
    "start": "1038600",
    "end": "1045600"
  },
  {
    "text": "modules the details and everything",
    "start": "1045600",
    "end": "1050400"
  },
  {
    "text": "the next section is about the status of compilers and their module",
    "start": "1052480",
    "end": "1058960"
  },
  {
    "text": "implementation first we will look at what each of these",
    "start": "1060679",
    "end": "1066440"
  },
  {
    "text": "compilers they self assess through their documentation or other means of",
    "start": "1066440",
    "end": "1074960"
  },
  {
    "text": "communication so what does each compiler tell us about the features that they",
    "start": "1074960",
    "end": "1081640"
  },
  {
    "text": "support how complete the implementation is what kind of file extension they want",
    "start": "1081640",
    "end": "1087760"
  },
  {
    "text": "to see and take a particular source code as a module translation",
    "start": "1087760",
    "end": "1094360"
  },
  {
    "text": "unit and which compiler Flags you need to give to compile a name module or a",
    "start": "1094360",
    "end": "1101200"
  },
  {
    "text": "header unit this is a table that you may have seen before in other talks",
    "start": "1101200",
    "end": "1108960"
  },
  {
    "text": "in talks from the last years you had way more red marks in",
    "start": "1108960",
    "end": "1116240"
  },
  {
    "text": "there we are in 2023 and it's quite encouraging to see lots",
    "start": "1116240",
    "end": "1123360"
  },
  {
    "text": "of green marks now msvc is actually in a state that would",
    "start": "1123360",
    "end": "1129240"
  },
  {
    "text": "consider it production ready clang is very good in the latest",
    "start": "1129240",
    "end": "1136400"
  },
  {
    "text": "incarnation of clang 17 even though the modularized standard",
    "start": "1136400",
    "end": "1143240"
  },
  {
    "text": "library is still in an experimental stage and not uh part of the distribution distribution packages that",
    "start": "1143240",
    "end": "1150159"
  },
  {
    "text": "you can get from um the repositories at",
    "start": "1150159",
    "end": "1156960"
  },
  {
    "text": "llvm and then there's",
    "start": "1157440",
    "end": "1161120"
  },
  {
    "text": "GCC and important thing I've been alluding to it",
    "start": "1166880",
    "end": "1172039"
  },
  {
    "text": "is the thing called BMI consistency if you compile an interface",
    "start": "1172039",
    "end": "1179960"
  },
  {
    "text": "with a set of compiler flags and possibly macros these flags",
    "start": "1179960",
    "end": "1185960"
  },
  {
    "text": "and macros may change the API of your interface and this ABI may be different",
    "start": "1185960",
    "end": "1195520"
  },
  {
    "text": "from the one that you want to import a module",
    "start": "1195520",
    "end": "1200679"
  },
  {
    "text": "into and to provide to prevent um ODI violations because of API",
    "start": "1200679",
    "end": "1208159"
  },
  {
    "text": "differences compilers actually check if a compiled module interface the",
    "start": "1208159",
    "end": "1215760"
  },
  {
    "text": "BMI matches the expectations from the importing translation",
    "start": "1215760",
    "end": "1223520"
  },
  {
    "text": "unit and msvc has just a few two",
    "start": "1223520",
    "end": "1228679"
  },
  {
    "text": "different uh flags that you can give and it looks at them and says oh this don't",
    "start": "1228679",
    "end": "1235240"
  },
  {
    "text": "match up but it's more like a warning that you can ignore and still go ahead",
    "start": "1235240",
    "end": "1240640"
  },
  {
    "text": "and in some cases or even in many cases this just works whereas clang has so",
    "start": "1240640",
    "end": "1247360"
  },
  {
    "text": "many compiler flags that make the perceived uh ABI of a BMI or a",
    "start": "1247360",
    "end": "1254960"
  },
  {
    "text": "translation unit not to match up unfortunately this list of compiler",
    "start": "1254960",
    "end": "1261720"
  },
  {
    "text": "Flags is not documented it still gives a warning if they don't match up you can shut up this",
    "start": "1261720",
    "end": "1270520"
  },
  {
    "text": "warning but clang wouldn't accept it anyway n GCC I don't know there's",
    "start": "1270520",
    "end": "1278000"
  },
  {
    "text": "absolutely no documentation about BMI consistency let's see what the future",
    "start": "1278000",
    "end": "1285039"
  },
  {
    "text": "will bring the next part is file",
    "start": "1285039",
    "end": "1292320"
  },
  {
    "text": "names you may have heard about it some people in the",
    "start": "1292320",
    "end": "1297520"
  },
  {
    "text": "community are quite outspoken they say modules are",
    "start": "1297520",
    "end": "1305080"
  },
  {
    "text": "broken and what's the reason for that no",
    "start": "1305080",
    "end": "1311200"
  },
  {
    "text": "implementer agrees to the other implementer what the favorite extension",
    "start": "1311200",
    "end": "1316840"
  },
  {
    "text": "is it's it's only about it extensions so okay modules are broken",
    "start": "1316840",
    "end": "1325600"
  },
  {
    "text": "let's see what we can do anyways each compiler allows for flags",
    "start": "1325600",
    "end": "1332640"
  },
  {
    "text": "that you can give so that they would expect any source file with any name as",
    "start": "1332640",
    "end": "1338919"
  },
  {
    "text": "a translation unit for a module the same you have also compiler",
    "start": "1338919",
    "end": "1346000"
  },
  {
    "text": "flx to accept it as a header unit but we won't talk too much about header",
    "start": "1346000",
    "end": "1352559"
  },
  {
    "text": "units and as you can see every compiler has a different opinion what the true",
    "start": "1352559",
    "end": "1360760"
  },
  {
    "text": "extension of a module source file is clang loves to have an M suffix there",
    "start": "1360760",
    "end": "1369320"
  },
  {
    "text": "GCC says it's just C++ okay and msbc says H it's an inter",
    "start": "1369320",
    "end": "1377960"
  },
  {
    "text": "interface let's throw an eye in there so the interfaces stick",
    "start": "1377960",
    "end": "1384880"
  },
  {
    "text": "out and that's all about this topic of file",
    "start": "1386320",
    "end": "1392679"
  },
  {
    "text": "names so at this point we have learned everything about",
    "start": "1393960",
    "end": "1401080"
  },
  {
    "text": "modules and we are now fully prepared to build our first module",
    "start": "1401080",
    "end": "1408799"
  },
  {
    "text": "and we don't start from scratch we use an existing",
    "start": "1408799",
    "end": "1415559"
  },
  {
    "text": "library and this library is called AR class it's a sa t++",
    "start": "1415559",
    "end": "1421720"
  },
  {
    "text": "17 single file header only Library it's totally portable no dependencies except",
    "start": "1421720",
    "end": "1428320"
  },
  {
    "text": "for the standard Library this is a command line",
    "start": "1428320",
    "end": "1433520"
  },
  {
    "text": "parer if you know the demo code from last year I had uh the command land from",
    "start": "1433520",
    "end": "1438679"
  },
  {
    "text": "boost but I wasn't too happy about the 25 additional dependencies he brought in",
    "start": "1438679",
    "end": "1445000"
  },
  {
    "text": "so I thought maybe this year I will change the command line pass and this this is",
    "start": "1445000",
    "end": "1450720"
  },
  {
    "text": "it it's a very simple Library it's just a nam space there a couple of implementation",
    "start": "1450720",
    "end": "1458000"
  },
  {
    "text": "details that are not considered to be part of the interface and we have just a handful of",
    "start": "1458000",
    "end": "1465320"
  },
  {
    "text": "things that actually form the interface",
    "start": "1465320",
    "end": "1469799"
  },
  {
    "text": "shouldn't be too difficult to modularize this right",
    "start": "1470480",
    "end": "1476279"
  },
  {
    "text": "anybody okay I do it [Music]",
    "start": "1476279",
    "end": "1482258"
  },
  {
    "text": "um let's be a young pan keen on modularizing the first",
    "start": "1482600",
    "end": "1488880"
  },
  {
    "text": "Library just sling modu Declaration on top of it and call it aply",
    "start": "1488880",
    "end": "1496760"
  },
  {
    "text": "Aras export everything in a group of exports",
    "start": "1496760",
    "end": "1503279"
  },
  {
    "text": "that are meant to be part of the interface this section of decode",
    "start": "1503279",
    "end": "1510360"
  },
  {
    "text": "here and that's it right couldn't be",
    "start": "1510520",
    "end": "1517679"
  },
  {
    "text": "easier if you want to be fancy just export every",
    "start": "1519480",
    "end": "1525399"
  },
  {
    "text": "entity individually in some cases this really helps but just to give you an um",
    "start": "1525399",
    "end": "1533000"
  },
  {
    "text": "impression how this would like all the exported entities in",
    "start": "1533000",
    "end": "1538640"
  },
  {
    "text": "particular the forwarded one have an export so this is defensive",
    "start": "1538640",
    "end": "1547398"
  },
  {
    "text": "way let's see if compilers accept that",
    "start": "1552039",
    "end": "1559240"
  },
  {
    "text": "in alphabetical order first",
    "start": "1559240",
    "end": "1564480"
  },
  {
    "text": "PL oh seems like there's something L wrong",
    "start": "1564480",
    "end": "1571440"
  },
  {
    "text": "because it doesn't compile you don't need to look at the details of the error message here we know they are long um",
    "start": "1571440",
    "end": "1579960"
  },
  {
    "text": "but it tells something about the algorithm header from the standard",
    "start": "1579960",
    "end": "1585360"
  },
  {
    "text": "Library okay just one compile try the next one GCC in this case a",
    "start": "1585360",
    "end": "1592559"
  },
  {
    "text": "different set of compiler flags that you can use or must use compile",
    "start": "1592559",
    "end": "1598640"
  },
  {
    "text": "it fail doesn't compile hm you're probably",
    "start": "1598640",
    "end": "1604520"
  },
  {
    "text": "onto something anybody has an idea think",
    "start": "1604520",
    "end": "1609840"
  },
  {
    "text": "about it also the algorithm header in this",
    "start": "1609840",
    "end": "1615159"
  },
  {
    "text": "case our first candidate a thir candidat msvc another set of compiler Flags",
    "start": "1615159",
    "end": "1623279"
  },
  {
    "text": "compile it oops it did compile what's",
    "start": "1623279",
    "end": "1630720"
  },
  {
    "text": "wrong we got an BMI we got an object and we got a",
    "start": "1630799",
    "end": "1637240"
  },
  {
    "text": "warning it says include algorithm in the perview of",
    "start": "1637720",
    "end": "1644440"
  },
  {
    "text": "a module appears erroneous anybody an idea what's going what what",
    "start": "1644440",
    "end": "1652320"
  },
  {
    "text": "wrong nobody okay I will tell",
    "start": "1652679",
    "end": "1657720"
  },
  {
    "text": "you and it's actually helpful it says for",
    "start": "1657720",
    "end": "1663559"
  },
  {
    "text": "example consider moving that directive before the module",
    "start": "1663559",
    "end": "1670559"
  },
  {
    "text": "declaration and what's the solution we need a global module fragment as I said before for the global",
    "start": "1671279",
    "end": "1679080"
  },
  {
    "text": "module fragment is where the traditional include files live and where you stick",
    "start": "1679080",
    "end": "1685279"
  },
  {
    "text": "them into your module translation unit and our standard library is part of",
    "start": "1685279",
    "end": "1692159"
  },
  {
    "text": "the global module so we have to stick all the headers in there and please all",
    "start": "1692159",
    "end": "1698919"
  },
  {
    "text": "of them don't forget any of them use any tool that you can get your hands on to",
    "start": "1698919",
    "end": "1706080"
  },
  {
    "text": "figure out if you didn't forget get any of",
    "start": "1706080",
    "end": "1710200"
  },
  {
    "text": "them and don't make the error of including header files from the",
    "start": "1711279",
    "end": "1717480"
  },
  {
    "text": "traditional world into the perview of a module so let's compile it again and as",
    "start": "1717480",
    "end": "1725000"
  },
  {
    "text": "we can see clang compiles now msvc compiled",
    "start": "1725000",
    "end": "1731440"
  },
  {
    "text": "before and jesc H it crushes",
    "start": "1731440",
    "end": "1738840"
  },
  {
    "text": "if an segmentation fault and the problem with GCC is you can look as much as you",
    "start": "1738840",
    "end": "1745559"
  },
  {
    "text": "want at the source code of a source file of a translation unit with GCC GCC isn't",
    "start": "1745559",
    "end": "1753000"
  },
  {
    "text": "kind of an superposition State you need to actually observe the outcome of the",
    "start": "1753000",
    "end": "1758679"
  },
  {
    "text": "compilation so such the the the wave uh",
    "start": "1758679",
    "end": "1764200"
  },
  {
    "text": "the destroing wave formula and the uh the field decays into either a crash or",
    "start": "1764200",
    "end": "1771519"
  },
  {
    "text": "a success not really helpful in",
    "start": "1771519",
    "end": "1779120"
  },
  {
    "text": "practice but that's how life is in",
    "start": "1779120",
    "end": "1784158"
  },
  {
    "text": "2023 I also told you in the beginning a module interface has actually two phases",
    "start": "1784679",
    "end": "1791799"
  },
  {
    "text": "one that's looking into the module implementation itself and during the compilation of of the module we exercise",
    "start": "1791799",
    "end": "1799360"
  },
  {
    "text": "this interface so it's already",
    "start": "1799360",
    "end": "1804559"
  },
  {
    "text": "tested but the other side of the interface is looking outside into the user code and you need to test this kind",
    "start": "1804559",
    "end": "1813960"
  },
  {
    "text": "pH of the interface as well don't forget that this is a highly lacking",
    "start": "1813960",
    "end": "1821399"
  },
  {
    "text": "integration test not every entity of the export interface is",
    "start": "1821399",
    "end": "1828640"
  },
  {
    "text": "appearing here but it's a start you see I import the BMI of the",
    "start": "1828640",
    "end": "1836559"
  },
  {
    "text": "module have a little bit of code to exercise the interface so let's compile",
    "start": "1836559",
    "end": "1842640"
  },
  {
    "text": "it with clang compil it with msvc uh unfortunately GC is no longer with us",
    "start": "1842640",
    "end": "1851080"
  },
  {
    "text": "anymore so what's the outcome clang yeah this is the compiler Flex that you have",
    "start": "1851080",
    "end": "1856639"
  },
  {
    "text": "to give to actually consumer module don't forget to include the",
    "start": "1856639",
    "end": "1862919"
  },
  {
    "text": "object file from the interface translation",
    "start": "1862919",
    "end": "1868919"
  },
  {
    "text": "unit and oh dear yet another file",
    "start": "1868919",
    "end": "1876080"
  },
  {
    "text": "here something about missing declarations okay we have another",
    "start": "1876799",
    "end": "1882440"
  },
  {
    "text": "compiler at our hands let's do the same with mvz same problem missing",
    "start": "1882440",
    "end": "1890360"
  },
  {
    "text": "declarations anybody have an",
    "start": "1890360",
    "end": "1895080"
  },
  {
    "text": "idea the point is these declarations come from the",
    "start": "1896080",
    "end": "1902320"
  },
  {
    "text": "included headers in the global module fragment",
    "start": "1902320",
    "end": "1907760"
  },
  {
    "text": "and entities in the global module fragment get a special",
    "start": "1907760",
    "end": "1914440"
  },
  {
    "text": "treatment the headers in there are not part of the module",
    "start": "1914480",
    "end": "1921720"
  },
  {
    "text": "itself so the standard tells us what it",
    "start": "1921720",
    "end": "1929120"
  },
  {
    "text": "thinks we don't use from these headers and this is quite challenging then",
    "start": "1929120",
    "end": "1934880"
  },
  {
    "text": "templates come into place uh declarations that are not used",
    "start": "1934880",
    "end": "1941279"
  },
  {
    "text": "they in the technical term is declaration reachable and so they get discarded the benefit of that is our",
    "start": "1941279",
    "end": "1949760"
  },
  {
    "text": "bmis don't explode because we would otherwise possibly include the whole standard",
    "start": "1949760",
    "end": "1956399"
  },
  {
    "text": "Library into the BMI of the module there's a good reason for that the point is if an entity is",
    "start": "1956399",
    "end": "1963639"
  },
  {
    "text": "discarded from the BMI the entities in there and the names are neither reachable nor",
    "start": "1963639",
    "end": "1970720"
  },
  {
    "text": "visible and this means in Sensations Within user code have to deal",
    "start": "1970720",
    "end": "1979480"
  },
  {
    "text": "with the fact that declarations are missing in other words we as programmers",
    "start": "1979480",
    "end": "1985840"
  },
  {
    "text": "have to provide them",
    "start": "1985840",
    "end": "1991639"
  },
  {
    "text": "uh if you can use the modularized standard Library so you don't have to figure out which declarations are",
    "start": "1991639",
    "end": "1998639"
  },
  {
    "text": "missing because otherwise you need to figure out in this particular case and this particular",
    "start": "1998639",
    "end": "2005000"
  },
  {
    "text": "integration test we need the any header",
    "start": "2005000",
    "end": "2010039"
  },
  {
    "text": "and the string header and none of them appears in my own source",
    "start": "2010039",
    "end": "2015960"
  },
  {
    "text": "code how would you as a developer figure out which headers are",
    "start": "2015960",
    "end": "2023320"
  },
  {
    "text": "missing opinions diis would",
    "start": "2023639",
    "end": "2030278"
  },
  {
    "text": "help so this is s state if you use only",
    "start": "2031639",
    "end": "2040639"
  },
  {
    "text": "header files but there's actually more with",
    "start": "2040639",
    "end": "2046240"
  },
  {
    "text": "this piece of code from the Aras",
    "start": "2046240",
    "end": "2051398"
  },
  {
    "text": "Library this integration test was carefully chosen by me to not",
    "start": "2051399",
    "end": "2057320"
  },
  {
    "text": "trigger ADL within the library itself usually",
    "start": "2057320",
    "end": "2062960"
  },
  {
    "text": "ADL just reduces the compiler throughput that you can experience in the",
    "start": "2062960",
    "end": "2068240"
  },
  {
    "text": "traditional world just as well but here it can also cause lookup",
    "start": "2068240",
    "end": "2074720"
  },
  {
    "text": "failures because many entities that are not",
    "start": "2074720",
    "end": "2081919"
  },
  {
    "text": "exported are not available to name lookup in particular the second phase name",
    "start": "2081919",
    "end": "2087320"
  },
  {
    "text": "lookup so this can become problematic if you",
    "start": "2087320",
    "end": "2095280"
  },
  {
    "text": "run into ADL with your templates that you",
    "start": "2095280",
    "end": "2100480"
  },
  {
    "text": "export and on top of that we have another kind of thing that has to do",
    "start": "2101160",
    "end": "2106760"
  },
  {
    "text": "with translation unit local entities for example if you if you have something in",
    "start": "2106760",
    "end": "2112440"
  },
  {
    "text": "your interface header or module primary module interface that has internal",
    "start": "2112440",
    "end": "2120119"
  },
  {
    "text": "linkage you can't refer to it from the outside this is just how linking works",
    "start": "2120119",
    "end": "2127520"
  },
  {
    "text": "and if you have for example an exported function that is completely inlined",
    "start": "2127520",
    "end": "2134320"
  },
  {
    "text": "within the interface unit then you have the body in there and there you might",
    "start": "2134320",
    "end": "2140440"
  },
  {
    "text": "refer to such a translation unit local entity then you expose this translation",
    "start": "2140440",
    "end": "2147400"
  },
  {
    "text": "unit local entity that is not rple from the",
    "start": "2147400",
    "end": "2153800"
  },
  {
    "text": "outside to the user and the user code will try to link",
    "start": "2153800",
    "end": "2160359"
  },
  {
    "text": "to this translation unit local entity and this is a real problem if you",
    "start": "2160359",
    "end": "2169240"
  },
  {
    "text": "don't think about it so please make sure don't expose anything from your",
    "start": "2169240",
    "end": "2176720"
  },
  {
    "text": "interfaces be it in the traditional world or in the modules",
    "start": "2176720",
    "end": "2181800"
  },
  {
    "text": "world don't expose any of these translation unit local entities through",
    "start": "2181800",
    "end": "2186920"
  },
  {
    "text": "your interfaces in the modules word it makes your code ill formed in the transitional",
    "start": "2186920",
    "end": "2194440"
  },
  {
    "text": "word the standard explicitly says this is deprecated don't do",
    "start": "2194440",
    "end": "2202240"
  },
  {
    "text": "that if you don't do that you're safe don't use Statics in your",
    "start": "2202440",
    "end": "2209079"
  },
  {
    "text": "interfaces don't use anonymous name spaces in your interfaces but use inline",
    "start": "2209079",
    "end": "2215480"
  },
  {
    "text": "because inline doesn't mean in line it means all the entities are just the",
    "start": "2215480",
    "end": "2221440"
  },
  {
    "text": "same okay now we've seen the smallest library",
    "start": "2221599",
    "end": "2227720"
  },
  {
    "text": "in the demo code let's go to the largest one auu and what I'm using here is the what",
    "start": "2227720",
    "end": "2235319"
  },
  {
    "text": "I call the Trinity of modules we have a primary module a global module fragment",
    "start": "2235319",
    "end": "2241880"
  },
  {
    "text": "with all the dependencies that are not part of the library itself platform header for example standard Library",
    "start": "2241880",
    "end": "2248760"
  },
  {
    "text": "headers and others we have the exported entities in this case this is a header only library",
    "start": "2248760",
    "end": "2257359"
  },
  {
    "text": "or can be used as a header only Library so we throw all of these headers in there and we have a lot of",
    "start": "2257359",
    "end": "2264280"
  },
  {
    "text": "them and in the final section we have the private module fragment where you",
    "start": "2264280",
    "end": "2270160"
  },
  {
    "text": "place all of the implementations in here so in fact this",
    "start": "2270160",
    "end": "2276280"
  },
  {
    "text": "trans ation unit is a single file",
    "start": "2276280",
    "end": "2281319"
  },
  {
    "text": "module in fact it's a Unity build of the full library and this means this",
    "start": "2281319",
    "end": "2288520"
  },
  {
    "text": "compiles crazily fast much faster than you would compile",
    "start": "2288520",
    "end": "2294520"
  },
  {
    "text": "in the traditional world and this is without any use of",
    "start": "2294520",
    "end": "2300560"
  },
  {
    "text": "modules so far so so much about modularizing",
    "start": "2300560",
    "end": "2309200"
  },
  {
    "text": "existing libraries let's talk about build systems which build system support modules today",
    "start": "2309200",
    "end": "2316760"
  },
  {
    "text": "any idea any",
    "start": "2316760",
    "end": "2321720"
  },
  {
    "text": "candidates okay let's do it in some random order",
    "start": "2322040",
    "end": "2328960"
  },
  {
    "text": "the oldest one is Bill two some people might have heard about it a couple of years ago it has been",
    "start": "2328960",
    "end": "2337160"
  },
  {
    "text": "supporting all major compilers as far as I know today it only supports",
    "start": "2337160",
    "end": "2342240"
  },
  {
    "text": "GCC as module Please be aware I talk only about modules then there is cake finally since",
    "start": "2342240",
    "end": "2352480"
  },
  {
    "text": "version 325 it has an experimental support for",
    "start": "2352480",
    "end": "2358440"
  },
  {
    "text": "modules but it only supports named modules no header",
    "start": "2358440",
    "end": "2364560"
  },
  {
    "text": "units and it require quite reason compilers and it requires also a",
    "start": "2364560",
    "end": "2371599"
  },
  {
    "text": "dependency scanner that comes with the compiler or is built into the",
    "start": "2371599",
    "end": "2376920"
  },
  {
    "text": "compiler you still can do module dependency uh",
    "start": "2376920",
    "end": "2383839"
  },
  {
    "text": "specification by hand I did it I hated",
    "start": "2383839",
    "end": "2389040"
  },
  {
    "text": "it and if you ever see a piece of code in the",
    "start": "2389040",
    "end": "2395160"
  },
  {
    "text": "interwebs where people do it by hand look",
    "start": "2395160",
    "end": "2401359"
  },
  {
    "text": "closely it's pretty uh easy that it doesn't uh",
    "start": "2401359",
    "end": "2407720"
  },
  {
    "text": "compose with other modules so if you want to use",
    "start": "2407720",
    "end": "2413440"
  },
  {
    "text": "cake do it by the book then there's of course AMS build",
    "start": "2413440",
    "end": "2418960"
  },
  {
    "text": "that comes with visal Studio it's a boring build system because it does",
    "start": "2418960",
    "end": "2426680"
  },
  {
    "text": "everything that you expect no problems at all and it's around for quite some",
    "start": "2426680",
    "end": "2431760"
  },
  {
    "text": "time now in the frame of Visual Studio 2019 or",
    "start": "2431760",
    "end": "2437440"
  },
  {
    "text": "so this is what I have in production then there is a new Contender",
    "start": "2437440",
    "end": "2445240"
  },
  {
    "text": "that's quite famous as it seems in Asia called",
    "start": "2445240",
    "end": "2451480"
  },
  {
    "text": "xake and it's biggest benefit as people claim it",
    "start": "2451480",
    "end": "2457560"
  },
  {
    "text": "has a nicer syntax than cake on the other hand it has an even verse",
    "start": "2457560",
    "end": "2464640"
  },
  {
    "text": "documentation so I can't tell you much about it take what I've written here with a",
    "start": "2464640",
    "end": "2473359"
  },
  {
    "text": "grain of salt also R are evok by Peter bindles",
    "start": "2473359",
    "end": "2480520"
  },
  {
    "text": "this is also an old build system as far as I know it supports only CL",
    "start": "2480520",
    "end": "2487040"
  },
  {
    "text": "and the development is at",
    "start": "2487040",
    "end": "2492599"
  },
  {
    "text": "a well observable place and there's a new one from a guy",
    "start": "2492599",
    "end": "2499720"
  },
  {
    "text": "from Pakistan with a completely new approach it's quite interesting and we",
    "start": "2499720",
    "end": "2505599"
  },
  {
    "text": "will probably look at it in the study group 15 where we talk about",
    "start": "2505599",
    "end": "2512280"
  },
  {
    "text": "tools let's see how this fairs in practice is I have no",
    "start": "2512280",
    "end": "2517760"
  },
  {
    "text": "clue and hardcore people use make sure you can do that if you want to do",
    "start": "2517760",
    "end": "2527280"
  },
  {
    "text": "everything by yourself with your own build recipes but you can do",
    "start": "2527280",
    "end": "2534599"
  },
  {
    "text": "it so let's talk about CAC I think most of you",
    "start": "2534599",
    "end": "2540119"
  },
  {
    "text": "are using cake anybody not using cake",
    "start": "2540119",
    "end": "2547440"
  },
  {
    "text": "okay you're make guy okay then is probably the most",
    "start": "2547440",
    "end": "2554000"
  },
  {
    "text": "interesting part of the whole talk to you as I said 3.25 is the first one to",
    "start": "2554000",
    "end": "2560119"
  },
  {
    "text": "support modules I recommend 326 or possibly even",
    "start": "2560119",
    "end": "2565839"
  },
  {
    "text": "later the current one is 327 and it requires clang 16 and U",
    "start": "2565839",
    "end": "2574040"
  },
  {
    "text": "msvc uh qu quite recent all of them support module",
    "start": "2574040",
    "end": "2580319"
  },
  {
    "text": "dependency scanning and all of them can create a so-called module dependency",
    "start": "2580319",
    "end": "2586040"
  },
  {
    "text": "report in a standardized format and this is the key to the support for modules uh",
    "start": "2586040",
    "end": "2592720"
  },
  {
    "text": "By Cake what you have to do you need to opt",
    "start": "2592720",
    "end": "2601119"
  },
  {
    "text": "into this experimental support by giving the U",
    "start": "2601119",
    "end": "2607240"
  },
  {
    "text": "ID and in zake fashion this U ID changes with every version of",
    "start": "2607240",
    "end": "2614839"
  },
  {
    "text": "cmake and if you do that you can use file sets in your",
    "start": "2614839",
    "end": "2622119"
  },
  {
    "text": "target sources uh directive with in DCM list.",
    "start": "2622119",
    "end": "2627400"
  },
  {
    "text": "text file where you can give the in the oldfashioned way the the uh",
    "start": "2627400",
    "end": "2634680"
  },
  {
    "text": "source files for your executable or library and these are the entities that",
    "start": "2634680",
    "end": "2642240"
  },
  {
    "text": "or the source files that consume bmis then you have an file set where",
    "start": "2642240",
    "end": "2649079"
  },
  {
    "text": "specify the module translation unit sources that create BMI files and are",
    "start": "2649079",
    "end": "2655680"
  },
  {
    "text": "are parts of named modules these are partitions and",
    "start": "2655680",
    "end": "2661800"
  },
  {
    "text": "interfaces and in the last section you can also list all your header units that",
    "start": "2661800",
    "end": "2668520"
  },
  {
    "text": "you want to use they also create bmis the only sad thing is that head units",
    "start": "2668520",
    "end": "2675040"
  },
  {
    "text": "are not supported yet in C so in 326 the",
    "start": "2675040",
    "end": "2680280"
  },
  {
    "text": "last line is just ignored and in uh 327 uh C says this is in syntax",
    "start": "2680280",
    "end": "2689640"
  },
  {
    "text": "error so it's your choice of",
    "start": "2689640",
    "end": "2694119"
  },
  {
    "text": "poison so the support modules in cake revolves",
    "start": "2694960",
    "end": "2700440"
  },
  {
    "text": "about around um dependency Discovery",
    "start": "2700440",
    "end": "2707160"
  },
  {
    "text": "and you have to opt into that as well you see two more lines here and these",
    "start": "2707160",
    "end": "2712839"
  },
  {
    "text": "three lines need to be present in every CMAC text file that you use even if you",
    "start": "2712839",
    "end": "2720400"
  },
  {
    "text": "don't want to use dependency scanning you have they have to be there and if",
    "start": "2720400",
    "end": "2725559"
  },
  {
    "text": "you you don't get any kind of module support so it's just a cut and paste",
    "start": "2725559",
    "end": "2732640"
  },
  {
    "text": "thing so what do you think",
    "start": "2732640",
    "end": "2737880"
  },
  {
    "text": "about all of that that I've seen so far feel scared I hope not this is seake after",
    "start": "2737880",
    "end": "2746520"
  },
  {
    "text": "all and uh I hope this guy is still busy with the people he had scared 100 years",
    "start": "2746520",
    "end": "2753920"
  },
  {
    "text": "ago in the movie theaters all around the world no shouldn't scare us",
    "start": "2753920",
    "end": "2763000"
  },
  {
    "text": "anymore so let's go into the dependencies and",
    "start": "2763000",
    "end": "2769480"
  },
  {
    "text": "for example like make let's look at the library is a C library we can make a",
    "start": "2769480",
    "end": "2776960"
  },
  {
    "text": "module interface out of it it's a little bit more involved we have the primary interface and we also have two interface",
    "start": "2776960",
    "end": "2786559"
  },
  {
    "text": "partitions it has to do with uh sdl is really microe heavy in its interface so",
    "start": "2786559",
    "end": "2793480"
  },
  {
    "text": "to get rid of all the macros that the C export from named modules by using more",
    "start": "2793480",
    "end": "2800040"
  },
  {
    "text": "macros and yeah this is why the interface uh",
    "start": "2800040",
    "end": "2806720"
  },
  {
    "text": "exports Imports the partitions and the you can see the highlighting the one on",
    "start": "2806720",
    "end": "2812040"
  },
  {
    "text": "the left uh is using the one on the right and the one one on the right is using the actual C",
    "start": "2812040",
    "end": "2819640"
  },
  {
    "text": "headers and um sdl Library comes with a c text file",
    "start": "2819640",
    "end": "2826559"
  },
  {
    "text": "what do you have to do to build these additional free translation units for",
    "start": "2826559",
    "end": "2832800"
  },
  {
    "text": "the module well except for the three magic lines you add a file set with the",
    "start": "2832800",
    "end": "2839880"
  },
  {
    "text": "module translation units of the interface you can glob it if you have the",
    "start": "2839880",
    "end": "2846640"
  },
  {
    "text": "a distinctive file extension there and what does the modular",
    "start": "2846640",
    "end": "2851920"
  },
  {
    "text": "dependency scanner of clang tell us in particular here this example is about",
    "start": "2851920",
    "end": "2858000"
  },
  {
    "text": "the um the the module interface fragment at the bottom",
    "start": "2858000",
    "end": "2863760"
  },
  {
    "text": "left it says the name of this fragment is stdl global",
    "start": "2863760",
    "end": "2869200"
  },
  {
    "text": "macros it provides this particular interface partition it is an interface",
    "start": "2869200",
    "end": "2876160"
  },
  {
    "text": "and by the way this is the source code of it and it also requires another",
    "start": "2876160",
    "end": "2881640"
  },
  {
    "text": "module fragment this is the syntax as it comes",
    "start": "2881640",
    "end": "2886720"
  },
  {
    "text": "out of the clang dependency scanner msvc has it built into the compiler but in",
    "start": "2886720",
    "end": "2893520"
  },
  {
    "text": "effect it's exactly the same it's just the ordering is a little bit different but we don't care about ordering here so",
    "start": "2893520",
    "end": "2902000"
  },
  {
    "text": "both compilers support de direct format for the consumption by",
    "start": "2902000",
    "end": "2909599"
  },
  {
    "text": "cmake what cmake does it creates something that they call module",
    "start": "2909599",
    "end": "2915480"
  },
  {
    "text": "Maps this is something nothing complicated it just tells okay clang use this compiler flag",
    "start": "2915480",
    "end": "2923480"
  },
  {
    "text": "this is where you have to put the BMI file and this is where you find the B file BMI file of your",
    "start": "2923480",
    "end": "2930400"
  },
  {
    "text": "dependency and the same with msvc just the same",
    "start": "2930400",
    "end": "2937599"
  },
  {
    "text": "and this is all the magic that required to make cic happy and support",
    "start": "2939079",
    "end": "2947640"
  },
  {
    "text": "modules let's figure out if it actually works in practice as I said in the beginning I",
    "start": "2947640",
    "end": "2954280"
  },
  {
    "text": "have a demo code this is the same demo code and for the most part from last year last year I've been using Ms build",
    "start": "2954280",
    "end": "2962799"
  },
  {
    "text": "and the Microsoft compiler only with a library a standard library that I've",
    "start": "2962799",
    "end": "2969480"
  },
  {
    "text": "have to build myself this year I don't do any of this uh strange kind of",
    "start": "2969480",
    "end": "2977680"
  },
  {
    "text": "things this is the code where we left last year I use a modularized standard",
    "start": "2977680",
    "end": "2985000"
  },
  {
    "text": "Library I use ASO as a module seen before in the demo code itself I have",
    "start": "2985000",
    "end": "2992240"
  },
  {
    "text": "seven imports from modules from from the demo code and I'm using it",
    "start": "2992240",
    "end": "2999040"
  },
  {
    "text": "throughout the main uh function of the",
    "start": "2999040",
    "end": "3004200"
  },
  {
    "text": "demo code and this is the only non",
    "start": "3004200",
    "end": "3010119"
  },
  {
    "text": "modularized source code in the whole demo so the build the module structure",
    "start": "3010119",
    "end": "3016079"
  },
  {
    "text": "of the the whole demo is eight named modules within the project",
    "start": "3016079",
    "end": "3023920"
  },
  {
    "text": "here one header file last year it's been a header unit but you know why it's",
    "start": "3023920",
    "end": "3031040"
  },
  {
    "text": "demoted again to an include out of project I use these",
    "start": "3031040",
    "end": "3037160"
  },
  {
    "text": "dependencies here for named modules a arar slip a and",
    "start": "3037160",
    "end": "3042440"
  },
  {
    "text": "sdl all of them are named modules as you can see and I",
    "start": "3042440",
    "end": "3047839"
  },
  {
    "text": "use the modularized standard library and it don't build a particular Li Library just by",
    "start": "3047839",
    "end": "3057319"
  },
  {
    "text": "myself and do some some changes in there in this case I take any standard Library",
    "start": "3057319",
    "end": "3065799"
  },
  {
    "text": "as it comes with the distribution be it lip C++ be it lip C++ or Ms",
    "start": "3065799",
    "end": "3075720"
  },
  {
    "text": "STL and the build recipe in the demo code can make a modularized standard",
    "start": "3075720",
    "end": "3082720"
  },
  {
    "text": "Library out of all of them",
    "start": "3082720",
    "end": "3087359"
  },
  {
    "text": "so it's demo code time let's see if I did lie to",
    "start": "3089240",
    "end": "3096240"
  },
  {
    "text": "you or if it actually",
    "start": "3096240",
    "end": "3100160"
  },
  {
    "text": "works",
    "start": "3114359",
    "end": "3117359"
  },
  {
    "text": "so first let's load",
    "start": "3123040",
    "end": "3128280"
  },
  {
    "text": "Linux I'm using aun here and I have um the",
    "start": "3131839",
    "end": "3139760"
  },
  {
    "text": "appt packages from lrvm 17 here",
    "start": "3139760",
    "end": "3147280"
  },
  {
    "text": "and first of all I will try to",
    "start": "3151760",
    "end": "3157599"
  },
  {
    "text": "configure you see it's Clank 17 and in parallel to that this takes a",
    "start": "3166720",
    "end": "3172440"
  },
  {
    "text": "little bit of time I have a pre configured project for",
    "start": "3172440",
    "end": "3178480"
  },
  {
    "text": "msvc just let's build",
    "start": "3178480",
    "end": "3182599"
  },
  {
    "text": "it nothing to do okay let's clean it",
    "start": "3187960",
    "end": "3192880"
  },
  {
    "text": "first what you see here is the switching between",
    "start": "3197319",
    "end": "3203000"
  },
  {
    "text": "dependency uh um determination and the actual building",
    "start": "3203000",
    "end": "3210200"
  },
  {
    "text": "of all the libraries modules and everything the demo code is compiled so",
    "start": "3210200",
    "end": "3218319"
  },
  {
    "text": "it actually did work and far yeah okay we have a configured project for clang",
    "start": "3218319",
    "end": "3225160"
  },
  {
    "text": "17 on Linux let's build it",
    "start": "3225160",
    "end": "3230039"
  },
  {
    "text": "also",
    "start": "3234160",
    "end": "3237160"
  },
  {
    "text": "good",
    "start": "3264079",
    "end": "3267079"
  },
  {
    "text": "okay it it has",
    "start": "3283640",
    "end": "3287640"
  },
  {
    "text": "built does it run the next question",
    "start": "3294079",
    "end": "3301799"
  },
  {
    "text": "yes if you have seen the demo code from last year it's just the same now on",
    "start": "3303079",
    "end": "3308480"
  },
  {
    "text": "Linux it decodes chip files sends them over the network and displays it on an",
    "start": "3308480",
    "end": "3316720"
  },
  {
    "text": "GUI that's built from the sdl library so as you can see we actually we",
    "start": "3316720",
    "end": "3325319"
  },
  {
    "text": "can use modules not only on msvc and windows we can use it with cmake in a",
    "start": "3325319",
    "end": "3332359"
  },
  {
    "text": "platform independent manner also on other environments like Linux the msus",
    "start": "3332359",
    "end": "3340599"
  },
  {
    "text": "environment and I think this is a quite quite good improvement over last",
    "start": "3340599",
    "end": "3347640"
  },
  {
    "text": "year let's go back to the",
    "start": "3347640",
    "end": "3351558"
  },
  {
    "text": "slides so what's my conclusion from all that I",
    "start": "3354000",
    "end": "3359880"
  },
  {
    "text": "have been showing you if there is one thing I would",
    "start": "3359880",
    "end": "3367079"
  },
  {
    "text": "recommend even if you don't want to use modules on your own please consider using the standard",
    "start": "3367079",
    "end": "3376599"
  },
  {
    "text": "Library as a modular standard Library the reason for that you can see it",
    "start": "3376599",
    "end": "3383520"
  },
  {
    "text": "here I have a file called allit HPP here that contains the Full standard",
    "start": "3383520",
    "end": "3392440"
  },
  {
    "text": "library that you can include in a traditional way or you can",
    "start": "3392440",
    "end": "3398799"
  },
  {
    "text": "import it as a header unit that's the second line or you can import as a modularized",
    "start": "3398799",
    "end": "3405359"
  },
  {
    "text": "standard library and if you just include it do nothing else only",
    "start": "3405359",
    "end": "3412039"
  },
  {
    "text": "including on my system thata have been been taking the measurements on this took a bit over two seconds to",
    "start": "3412039",
    "end": "3420119"
  },
  {
    "text": "compile the header unit import took 15",
    "start": "3420119",
    "end": "3427480"
  },
  {
    "text": "milliseconds and the import of a named module was not",
    "start": "3427480",
    "end": "3433960"
  },
  {
    "text": "measurable I think this is a good reason to use a modularized",
    "start": "3433960",
    "end": "3440160"
  },
  {
    "text": "standard Library um I didn't",
    "start": "3440160",
    "end": "3445520"
  },
  {
    "text": "differentiate between the include import of a header unit and the import of the name module in the code on the",
    "start": "3445520",
    "end": "3453280"
  },
  {
    "text": "above if this works here and it is supposed to work according to the",
    "start": "3453280",
    "end": "3458319"
  },
  {
    "text": "standard then you can deem your implementation kind of production ready",
    "start": "3458319",
    "end": "3464119"
  },
  {
    "text": "not all implementations can do that today and this fits well into what I've",
    "start": "3464119",
    "end": "3472799"
  },
  {
    "text": "been presenting two years ago with the format Library it's just the same orders of magnitude where the includes and the",
    "start": "3472799",
    "end": "3480520"
  },
  {
    "text": "Imports differ so this is another proof named modules are the future for",
    "start": "3480520",
    "end": "3489480"
  },
  {
    "text": "many reasons and this is where all the build speed up comes from it's not the",
    "start": "3489480",
    "end": "3495440"
  },
  {
    "text": "compilation or instantiation of templates this is just the same as it was before it's the interfaces that",
    "start": "3495440",
    "end": "3504240"
  },
  {
    "text": "become available through the Imports of modules in the worst case it's as fast",
    "start": "3504240",
    "end": "3511760"
  },
  {
    "text": "as pre-compiled headers even though pre-compiled headers have a ton of limitations that modules",
    "start": "3511760",
    "end": "3519599"
  },
  {
    "text": "don't have modules compose pre-compiled headers",
    "start": "3519599",
    "end": "3526760"
  },
  {
    "text": "don't so taking all of this into",
    "start": "3526760",
    "end": "3533720"
  },
  {
    "text": "account the complicated CX syntax the status of compiler",
    "start": "3533720",
    "end": "3541559"
  },
  {
    "text": "implementations or so in my",
    "start": "3541559",
    "end": "3547559"
  },
  {
    "text": "opinion we should say yes to modules at least this year you",
    "start": "3548240",
    "end": "3554880"
  },
  {
    "text": "can if you want to dive into modules using Linux for example many people do",
    "start": "3554880",
    "end": "3562839"
  },
  {
    "text": "clang 17 available since",
    "start": "3562839",
    "end": "3568960"
  },
  {
    "text": "Thursday not Tuesday you can do the same on your",
    "start": "3568960",
    "end": "3578038"
  },
  {
    "text": "machine once again if you want to pull down all of this demo code with",
    "start": "3578559",
    "end": "3585039"
  },
  {
    "text": "everything that I've been showing to you here's the QR code once",
    "start": "3585039",
    "end": "3591319"
  },
  {
    "text": "again you can look at the G repositories also",
    "start": "3591839",
    "end": "3598160"
  },
  {
    "text": "individually here you find also where to contact",
    "start": "3598160",
    "end": "3603559"
  },
  {
    "text": "me and with that I happily answer any questions that you",
    "start": "3606240",
    "end": "3613960"
  },
  {
    "text": "might have",
    "start": "3613960",
    "end": "3617520"
  }
]