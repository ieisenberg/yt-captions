[
  {
    "text": "some of you may know that i spoke about gdd at ndc oslo about seven",
    "start": "6160",
    "end": "11440"
  },
  {
    "text": "years ago and it caused a little bit of a [Music] you know amount of attention and i",
    "start": "11440",
    "end": "16560"
  },
  {
    "text": "already wanted to kind of return to it my seven years later now um and try and put a little bit more structure around",
    "start": "16560",
    "end": "23680"
  },
  {
    "text": "some of the guidance um that i would give you during tdg today so whereas that prior talk was an exciting",
    "start": "23680",
    "end": "30400"
  },
  {
    "text": "rant um this talk is probably slightly more uh structured in in how we're looking",
    "start": "30400",
    "end": "35680"
  },
  {
    "text": "basically today okay most of you know this it's kind of dull",
    "start": "35680",
    "end": "41760"
  },
  {
    "text": "it means i'm old i've got a lot of slides to get through let's kind of move over who mr keeper is um i work on an open",
    "start": "41760",
    "end": "48320"
  },
  {
    "text": "source project for c-sharp and python called writer we love to have contributors um we do the same thing as mediator does",
    "start": "48320",
    "end": "55199"
  },
  {
    "text": "but we also do basically over middleware a messaging video where like rap and queue and kafka if you need to",
    "start": "55199",
    "end": "61920"
  },
  {
    "text": "all right so we're going to talk about um the bulk of this session will be about fallacies and",
    "start": "61920",
    "end": "68240"
  },
  {
    "text": "a principle that you should use instead for tdd and i see still permeating the",
    "start": "68240",
    "end": "74960"
  },
  {
    "text": "industry and then i will talk a little bit about clean architecture a very short section because it's useful i think to",
    "start": "74960",
    "end": "80960"
  },
  {
    "text": "understand how it can fit into helping our tdt practice in a little summer at the end",
    "start": "80960",
    "end": "87759"
  },
  {
    "text": "all right so what do i think some of the key fallacies are that we we still propagate",
    "start": "87759",
    "end": "93840"
  },
  {
    "text": "in the industry this to me is the biggest one um this idea that we have that",
    "start": "93840",
    "end": "101119"
  },
  {
    "text": "developers write unit tests nothing could be further from the truth if we're doing tdd",
    "start": "101119",
    "end": "108320"
  },
  {
    "text": "so if we look at how uh wikipedia defines uh unit testing it says to isolate",
    "start": "108479",
    "end": "115840"
  },
  {
    "text": "issues that may arise uh substitutes such as method starts mock objects fakes and test harnesses",
    "start": "115840",
    "end": "121600"
  },
  {
    "text": "can be used to assist testing a module in isolation what's all that",
    "start": "121600",
    "end": "126840"
  },
  {
    "text": "well the isolation piece is key to what people are trying to do",
    "start": "126840",
    "end": "131920"
  },
  {
    "text": "with the testing the original it comes from very classical testing and you yourself are divided",
    "start": "131920",
    "end": "138000"
  },
  {
    "text": "into modules you treat each module like a black box and you say i will test this black box",
    "start": "138000",
    "end": "143120"
  },
  {
    "text": "in isolation of all the other black boxes and i will therefore know that any failures relate to something that's",
    "start": "143120",
    "end": "149599"
  },
  {
    "text": "happened inside my black box and to do that what i have to do is make sure that the black box doesn't",
    "start": "149599",
    "end": "156080"
  },
  {
    "text": "anything that it talked to outside the box any connections had to other modules i replaced those with some kind of",
    "start": "156080",
    "end": "162000"
  },
  {
    "text": "substitute right and so generally where this practice has been taken into the world of test driven",
    "start": "162000",
    "end": "167599"
  },
  {
    "text": "development we've said the unit is essentially my class and therefore anything my class talks to you",
    "start": "167599",
    "end": "174800"
  },
  {
    "text": "i have to mock out my class is essentially my old school module and i'm using this unit testing practice",
    "start": "174800",
    "end": "180480"
  },
  {
    "text": "to basically do that and at its height what this led to was",
    "start": "180480",
    "end": "187360"
  },
  {
    "text": "this idea that became known as need driven development um particularly strongly advocated",
    "start": "187360",
    "end": "194319"
  },
  {
    "text": "uh often by what's called the london school as opposed to the chicago school which",
    "start": "194319",
    "end": "200400"
  },
  {
    "text": "is more we'll talk about later and say for example uh steve friedman",
    "start": "200400",
    "end": "205440"
  },
  {
    "text": "now prices are growing object charter software tests and knee driven development is this idea of outside",
    "start": "205440",
    "end": "212239"
  },
  {
    "text": "in where essentially you say i start at the outside i move in as i find",
    "start": "212239",
    "end": "217519"
  },
  {
    "text": "things that i may later need to build i kind of mock them out and then i go away and i build one of",
    "start": "217519",
    "end": "223280"
  },
  {
    "text": "those things that i've knocked out and i mock out and as i build it i mock out things it needs and i start basically",
    "start": "223280",
    "end": "229920"
  },
  {
    "text": "until i get down to everything basically that has been mocked now has a concrete replacement",
    "start": "229920",
    "end": "235680"
  },
  {
    "text": "so it it requires a couple of things that we have to do the first is we either have to work in",
    "start": "236319",
    "end": "243120"
  },
  {
    "text": "this very top-down fashion where we start with a test at the outer layer and we say right in order to fill in the",
    "start": "243120",
    "end": "248879"
  },
  {
    "text": "details i'm going to need a thing i can't have a concrete thing because this thing basically only had to talk to",
    "start": "248879",
    "end": "254879"
  },
  {
    "text": "itself therefore i need to mock out those things right so you write a test and as you go to implement stuff you say",
    "start": "254879",
    "end": "261440"
  },
  {
    "text": "wanting to mock out that operation i'll put a mock in my test i need to mock on that operation i'll put a mock in my testing to knock out that operation put",
    "start": "261440",
    "end": "266960"
  },
  {
    "text": "mark in my test i tested up to all these marks now which basically are defining the contract of what i will be",
    "start": "266960",
    "end": "273520"
  },
  {
    "text": "calling and and effectively my test is generating those marks there's a bit of a problem there in the",
    "start": "273520",
    "end": "280160"
  },
  {
    "text": "i don't like my test gets written as i'm writing the implementation the classical tdd model says hey red",
    "start": "280160",
    "end": "287280"
  },
  {
    "text": "write a fading test then green go to implement it then red go to refactor but i'm i'm i'm tying red",
    "start": "287280",
    "end": "293759"
  },
  {
    "text": "and green together horribly here and my refractory step often doesn't happen because i've spent so much time thinking",
    "start": "293759",
    "end": "299280"
  },
  {
    "text": "about the implementation so really i'm just directly writing the code and the test is being written at the same point and",
    "start": "299280",
    "end": "305039"
  },
  {
    "text": "i might as well be testing after the other model you can do this with is literally you get crc cards and",
    "start": "305039",
    "end": "310479"
  },
  {
    "text": "i can do upfront design okay and say oh i'm going to go and create the design of all my objects and",
    "start": "310479",
    "end": "316000"
  },
  {
    "text": "then i know what i'm going to call so i can then put the mock statements in when i write my test because i know that it's going to call",
    "start": "316000",
    "end": "322400"
  },
  {
    "text": "all those other classes and then effectively i can write my test uh now ahead of my class as i go to my",
    "start": "322400",
    "end": "328160"
  },
  {
    "text": "implementation i'll make those calls to the mocks i've defined early but you've still done upfront design",
    "start": "328160",
    "end": "333440"
  },
  {
    "text": "your entire class hierarchy you fleshed out and your tdd is no longer giving you",
    "start": "333440",
    "end": "338800"
  },
  {
    "text": "feedback as you go along uh on your code",
    "start": "338800",
    "end": "343759"
  },
  {
    "text": "so the consequence of this approach is that we don't do tdd in the",
    "start": "345199",
    "end": "351919"
  },
  {
    "text": "sense of tdd as a contract first approach to writing our code the idea behind tdd",
    "start": "351919",
    "end": "360240"
  },
  {
    "text": "is that i develop the contract that my code will present to express a given behavior that is",
    "start": "360240",
    "end": "366960"
  },
  {
    "text": "needed by the system this approach is about designing a class",
    "start": "366960",
    "end": "372160"
  },
  {
    "text": "hierarchy and testing it afterwards and even if you're pretty much",
    "start": "372160",
    "end": "377919"
  },
  {
    "text": "writing the cut the tests simultaneously with the code you're not really doing",
    "start": "377919",
    "end": "384080"
  },
  {
    "text": "test first you are trapped in a pattern of test after where you're getting feedback on the design that already exists",
    "start": "384080",
    "end": "390880"
  },
  {
    "text": "rather than your design being improved in your effector instead",
    "start": "390880",
    "end": "395840"
  },
  {
    "text": "so i spoke about this as far back as 2007 and we talked about this basically the idea of a fragile test",
    "start": "396960",
    "end": "403759"
  },
  {
    "text": "something where effectively we're saying hey these tests essentially are not",
    "start": "403759",
    "end": "411440"
  },
  {
    "text": "particularly robust because of the mocking and the issue becomes that as soon as",
    "start": "411440",
    "end": "419280"
  },
  {
    "text": "i have to inject a lot of stuff into my code right which may not necessarily be the",
    "start": "419280",
    "end": "425039"
  },
  {
    "text": "right design so i end up with a model that says my class takes interfaces of everything it can't just",
    "start": "425039",
    "end": "433199"
  },
  {
    "text": "new up a collaborator in its constructor and use it it must be passed into it as a dependency that dependency must be some",
    "start": "433199",
    "end": "440080"
  },
  {
    "text": "kind of abstraction so in a strongly typed language it would be an interface um in a uh",
    "start": "440080",
    "end": "446160"
  },
  {
    "text": "dynamic language basically you have to use some kind of duct typing to replace it and that's led us into",
    "start": "446160",
    "end": "452800"
  },
  {
    "text": "this world of um i've got ioc containers now because every object that i have has",
    "start": "452800",
    "end": "460639"
  },
  {
    "text": "a depend has dependencies and those dependencies have dependencies those dependencies have dependencies the graph",
    "start": "460639",
    "end": "466000"
  },
  {
    "text": "gets complicated and big we need an ioc container to realize it and yet if we didn't have that",
    "start": "466000",
    "end": "472000"
  },
  {
    "text": "if we just said i'm going to new up one of these i don't need to inject it um we might be able to get away with",
    "start": "472000",
    "end": "477680"
  },
  {
    "text": "poor man's di at the composition route with that and not actually use an iot container at all",
    "start": "477680",
    "end": "484000"
  },
  {
    "text": "so a lot of this thing people complain about which it says oh we've got this crazy world everything's the interface and",
    "start": "484000",
    "end": "489520"
  },
  {
    "text": "everything's at ioc huge amount of that comes from this",
    "start": "489520",
    "end": "494560"
  },
  {
    "text": "testing strategy i wanted to be able to replace the things that my classes depend upon as a result of testing if i didn't have",
    "start": "494560",
    "end": "501120"
  },
  {
    "text": "that in many cases i would never have surfaced those things outside i'd have surfaced",
    "start": "501120",
    "end": "507039"
  },
  {
    "text": "them if i was doing basically something like open close principle where essentially i wanted to have",
    "start": "507039",
    "end": "512959"
  },
  {
    "text": "different strategies around which my code varied and i wanted to pass them in i might have surfaced them if i had a",
    "start": "512959",
    "end": "519440"
  },
  {
    "text": "layer boundary issue where i should need to depend on something that's above me but those are genuine software design concerns",
    "start": "519440",
    "end": "526160"
  },
  {
    "text": "um i wouldn't have suffered i wouldn't have those interfaces injected into my code just because of a",
    "start": "526160",
    "end": "532160"
  },
  {
    "text": "testing icon and the problem becomes with all of those statements inside my",
    "start": "532160",
    "end": "539920"
  },
  {
    "text": "test which tell me exactly how this code interoperates with its neighbors is that",
    "start": "539920",
    "end": "546080"
  },
  {
    "text": "if i want to change any of my neighbors then i'm going to break all of those tests and my experience of",
    "start": "546080",
    "end": "553519"
  },
  {
    "text": "this was very in the past was very much along these lines i once worked on a system where we built um",
    "start": "553519",
    "end": "562320"
  },
  {
    "text": "god help us our own orm uh and for reasons um and one of the problems",
    "start": "562320",
    "end": "567600"
  },
  {
    "text": "the things we did that we did there was basically market very heavily because we were you know at that stage of our understanding of tdd um",
    "start": "567600",
    "end": "574720"
  },
  {
    "text": "and it would spit out basically relevant basically calls the database we would check what database calls you were gonna",
    "start": "574720",
    "end": "580560"
  },
  {
    "text": "make and we would assert this thing works you know perfectly but it was completely unchangeable because as soon as you",
    "start": "580560",
    "end": "587760"
  },
  {
    "text": "tweaked one thing over here in your code basically to represent i want a new parameter huge numbers of our tests",
    "start": "587760",
    "end": "595200"
  },
  {
    "text": "would work and that and that behaviour system problem where you change one thing",
    "start": "595200",
    "end": "600959"
  },
  {
    "text": "you get a sea of red and all your mops started failing you need to go through and literally correct all your marks it's a huge",
    "start": "600959",
    "end": "607040"
  },
  {
    "text": "problem because the promise of tdd is around refractory right we end up with what we call over",
    "start": "607040",
    "end": "613760"
  },
  {
    "text": "specified software my test has become coupled to my",
    "start": "613760",
    "end": "619040"
  },
  {
    "text": "implementation details my test understands how i intend to",
    "start": "619040",
    "end": "624720"
  },
  {
    "text": "implement that code my test should not be coupled to my implementation details",
    "start": "624720",
    "end": "630240"
  },
  {
    "text": "right i should not be thinking to myself in order to basically change this behavior i have to change these tests",
    "start": "630240",
    "end": "638800"
  },
  {
    "text": "the tests should assert a behavior continuously and if you change your behavior you",
    "start": "638800",
    "end": "645040"
  },
  {
    "text": "should only change the test that basically exercises that behavior not every test inside",
    "start": "645040",
    "end": "652800"
  },
  {
    "text": "all right so what's the kind of equivalent principle to this well the principle that we're",
    "start": "652959",
    "end": "659279"
  },
  {
    "text": "looking for much more is that developers write what we call developer tests",
    "start": "659279",
    "end": "665360"
  },
  {
    "text": "why is why is that different well it's important to understand that kent",
    "start": "665519",
    "end": "671120"
  },
  {
    "text": "um never effectively uh talked about unit tests in fact if you read his book tdd by",
    "start": "671120",
    "end": "678399"
  },
  {
    "text": "example he only uses the sent that the word unit test wants and he uses that to say that he doesn't",
    "start": "678399",
    "end": "685440"
  },
  {
    "text": "actually use unit tests that's the only reference in the book",
    "start": "685440",
    "end": "690640"
  },
  {
    "text": "what's happened is that in casual conversation people would refer to unit testing and tools like j unit and x units actually an n unit kind",
    "start": "691440",
    "end": "699200"
  },
  {
    "text": "of effectively established this the word units part of the terminology and people looked at that and said oh",
    "start": "699200",
    "end": "705120"
  },
  {
    "text": "unit testing there's tons of advice out there about",
    "start": "705120",
    "end": "710480"
  },
  {
    "text": "unit testing and i'll look if i've got unit tests i need integration tests or when i need acceptance tests people",
    "start": "710480",
    "end": "717200"
  },
  {
    "text": "bought the whole farm of unit testing but that was never",
    "start": "717200",
    "end": "722800"
  },
  {
    "text": "anything that was described originally by tdd it doesn't it's just not there right um",
    "start": "722800",
    "end": "731279"
  },
  {
    "text": "so what what what should we actually be",
    "start": "731279",
    "end": "736639"
  },
  {
    "text": "writing right well one of the key things that gives us",
    "start": "736639",
    "end": "741680"
  },
  {
    "text": "a bit of a clue is refactoring right remember that the cycle is red green and refactor",
    "start": "741680",
    "end": "750079"
  },
  {
    "text": "and in red we write a failing test we're essentially saying that there's some behavior in the system",
    "start": "750079",
    "end": "756880"
  },
  {
    "text": "we want to basically prove that the code under test provides that and initially we'll write",
    "start": "756880",
    "end": "762079"
  },
  {
    "text": "something red so we know that our test will genuinely fail because the behavior's not there yet we then go green using the cheapest",
    "start": "762079",
    "end": "769839"
  },
  {
    "text": "approach that we can to get green we copy and paste stuff out of stack overflow um",
    "start": "769839",
    "end": "775279"
  },
  {
    "text": "we ask questions on twitter and paste lines of code from twitter if we need to the goal is to find the algorithm and",
    "start": "775279",
    "end": "781519"
  },
  {
    "text": "not to write good code right once we have an algorithm that makes the code the test go",
    "start": "781519",
    "end": "787760"
  },
  {
    "text": "green we then do design we design the refactoring step",
    "start": "787760",
    "end": "793120"
  },
  {
    "text": "and the purpose of refactoring is to improve our implementation but not change our behavior",
    "start": "793120",
    "end": "801839"
  },
  {
    "text": "and by the behavior what we mean",
    "start": "807600",
    "end": "812880"
  },
  {
    "text": "is the contract that your api that you are developing expresses with the world",
    "start": "813120",
    "end": "818399"
  },
  {
    "text": "now i use the word api generically the public methods on a class are an api",
    "start": "818399",
    "end": "823920"
  },
  {
    "text": "right i don't mean in a sense http or rest or anything like that right",
    "start": "823920",
    "end": "828959"
  },
  {
    "text": "but your contract is what you effectively are discovering by the process of tdd",
    "start": "828959",
    "end": "834079"
  },
  {
    "text": "you care about that outside not about the internals",
    "start": "834079",
    "end": "839199"
  },
  {
    "text": "so the key idea here is that once i've got that contract established i",
    "start": "839279",
    "end": "844560"
  },
  {
    "text": "know what the behavior of this class should be i can then go in my refactoring step",
    "start": "844560",
    "end": "849760"
  },
  {
    "text": "and improve the design i can keep changing it and provide that it stays green i know that the changes i'm making are",
    "start": "849760",
    "end": "855440"
  },
  {
    "text": "safe i'm still preserving the behavior that i wanted make a little change the behavior test is still great make a little",
    "start": "855440",
    "end": "861120"
  },
  {
    "text": "implementation still green like i don't change the implementation check it's still green make a little change to implementation",
    "start": "861120",
    "end": "866800"
  },
  {
    "text": "just check it check it's still green and i can keep building out this implementation right one of the things that people",
    "start": "866800",
    "end": "872720"
  },
  {
    "text": "often miss is if i essentially is part of their refactoring process need to break out of",
    "start": "872720",
    "end": "877760"
  },
  {
    "text": "class because i decide this thing's got too many responsibilities i want to break out class that's going to be essentially private",
    "start": "877760",
    "end": "884320"
  },
  {
    "text": "to my module internal for example in c sharp or underscoring i say python",
    "start": "884320",
    "end": "889600"
  },
  {
    "text": "effectively i don't write tests for that it's covered by the tests that cover the behavior",
    "start": "889600",
    "end": "895279"
  },
  {
    "text": "right i already have code coverage for it the code coverage comes from the test that i'm currently writing",
    "start": "895279",
    "end": "901199"
  },
  {
    "text": "right that doesn't need a separate test",
    "start": "901199",
    "end": "904639"
  },
  {
    "text": "when our behavior is stable we don't need to change the tests okay so kent basically",
    "start": "907600",
    "end": "915519"
  },
  {
    "text": "um posted a basically a set of uh test principles and this is one of one of the key ideas",
    "start": "915519",
    "end": "920880"
  },
  {
    "text": "right if our contract does not change if the api that we are",
    "start": "920880",
    "end": "926240"
  },
  {
    "text": "currently dealing with in other words the public exports from a given module don't change right then no",
    "start": "926240",
    "end": "933680"
  },
  {
    "text": "tests should need to change if what we're doing is going in and changing some of our implementation details",
    "start": "933680",
    "end": "941839"
  },
  {
    "text": "we should better change the implementation of our classes and never break any tests and if our strategy around mocking",
    "start": "942000",
    "end": "950079"
  },
  {
    "text": "means that as soon as we change implementation details or test break because the marks effectively",
    "start": "950079",
    "end": "957519"
  },
  {
    "text": "now need changing we're doing it wrong",
    "start": "957519",
    "end": "962079"
  },
  {
    "text": "so ken basically uh on twitter quite recently said this right",
    "start": "963440",
    "end": "969600"
  },
  {
    "text": "tess should have kept the behavior of the code and decoupled from the structure of the code seeing tesla fell in both accounts what he means by that",
    "start": "969600",
    "end": "975199"
  },
  {
    "text": "is by the behavior it means the contract that the class is expressing right",
    "start": "975199",
    "end": "980800"
  },
  {
    "text": "that's what we coupled to we don't couple essentially to the implementation details",
    "start": "980800",
    "end": "988079"
  },
  {
    "text": "and one of the things you find when mentally you switch this approach you find a couple of very interesting things first is essentially that you begin to",
    "start": "988079",
    "end": "994720"
  },
  {
    "text": "actually do a proper red dream refactoring process because you stop doing design up front",
    "start": "994720",
    "end": "999920"
  },
  {
    "text": "of your implementation details which is which is a requirement of effectively a unit testing approach it's why people",
    "start": "999920",
    "end": "1005759"
  },
  {
    "text": "basically say i'm going to test after because they because because they can't see a difference",
    "start": "1005759",
    "end": "1010959"
  },
  {
    "text": "because they don't they don't genuinely experience a red green refactor approach so you find that you're",
    "start": "1010959",
    "end": "1016880"
  },
  {
    "text": "refactoring more you find that you're suspending design decisions until the refactoring step",
    "start": "1016880",
    "end": "1022959"
  },
  {
    "text": "and you find that your tests now reach that laudable xp goal of being documentation",
    "start": "1022959",
    "end": "1029760"
  },
  {
    "text": "for your code because you have clear examples of how to use your contract",
    "start": "1029760",
    "end": "1035038"
  },
  {
    "text": "and often when i look at you know test suites that i've seen out there they're just a spray of mocks um you",
    "start": "1035039",
    "end": "1041839"
  },
  {
    "text": "know even if someone basically then factors all those mocks out or worse use some horrific auto mocking",
    "start": "1041839",
    "end": "1048240"
  },
  {
    "text": "kind of fixture which is basically a bad wrong fun if you've got it anymore",
    "start": "1048240",
    "end": "1054559"
  },
  {
    "text": "but use that kind of approach you can't see very easily what is the contract what is the example",
    "start": "1054559",
    "end": "1061600"
  },
  {
    "text": "how would i do this in my own code you should better look at the test and say oh that's how i use that feature",
    "start": "1061600",
    "end": "1067200"
  },
  {
    "text": "great hey i can cut and paste the code out the test pretty much put it in what i need and then just alter it to my own purposes",
    "start": "1067200",
    "end": "1074240"
  },
  {
    "text": "that's what tests are for and so ken basically said uh this",
    "start": "1074240",
    "end": "1081280"
  },
  {
    "text": "basically in a conversation that was affected by martin um fowler effectively",
    "start": "1081280",
    "end": "1086559"
  },
  {
    "text": "between himself from dhh after dhh said i'm giving up on um tdd there was a kind of stupid",
    "start": "1086559",
    "end": "1092880"
  },
  {
    "text": "conversation and a lot of the conversation came around to this particular topic that the problem was people had misunderstood",
    "start": "1092880",
    "end": "1099600"
  },
  {
    "text": "what tdd was they were practicing unit testing and had gone into this whole world of mock all my dependencies",
    "start": "1099600",
    "end": "1106320"
  },
  {
    "text": "and ken said basically i don't go very far down the mock path right your test is completely coupled to the implementation of the interface",
    "start": "1106320",
    "end": "1112880"
  },
  {
    "text": "of course you can't change anything without breaking the tests",
    "start": "1112880",
    "end": "1117279"
  },
  {
    "text": "so tests shouldn't be looking to use mocks to isolate the system under test",
    "start": "1118400",
    "end": "1123919"
  },
  {
    "text": "right tests are not unit tests and the consequences basically of using",
    "start": "1123919",
    "end": "1131360"
  },
  {
    "text": "mocks to reserve indirect outputs is that you couple your test to your details",
    "start": "1131360",
    "end": "1137840"
  },
  {
    "text": "right so um the td community has done this for quite a long time and been",
    "start": "1137840",
    "end": "1143520"
  },
  {
    "text": "quite open about it it's just that people don't really listen so if you go to the c2 wiki and if you",
    "start": "1143520",
    "end": "1150000"
  },
  {
    "text": "really want to understand anything much about tdd xp it needs to come out of that era the ct wiki is still",
    "start": "1150000",
    "end": "1155120"
  },
  {
    "text": "useful repository of knowledge but this dates to the mid-noughties um and it defined the following it said",
    "start": "1155120",
    "end": "1160720"
  },
  {
    "text": "any unit test value implicates one and one only unit the way that you get defect localization",
    "start": "1160720",
    "end": "1168240"
  },
  {
    "text": "is you say i've got localization because it must be in that black box which is isolated",
    "start": "1168240",
    "end": "1174480"
  },
  {
    "text": "in db write programmer tests sometimes called developer tests",
    "start": "1176400",
    "end": "1181520"
  },
  {
    "text": "right and failure implicates the most recent edit",
    "start": "1181520",
    "end": "1186720"
  },
  {
    "text": "your localization is to what you just changed if you work test by test right you do a",
    "start": "1186720",
    "end": "1194559"
  },
  {
    "text": "little bit of work run the tests do a little bit of work run the test a little bit of work run the tests the",
    "start": "1194559",
    "end": "1201679"
  },
  {
    "text": "amount of code that essentially cause red tests is probably four or five lines that you just changed",
    "start": "1201679",
    "end": "1208960"
  },
  {
    "text": "you have absolutely got defect localization because it's something you just added",
    "start": "1208960",
    "end": "1214000"
  },
  {
    "text": "and a lot of tdt advocates say if you get unexpected red what do you do you revert you revert",
    "start": "1214000",
    "end": "1220960"
  },
  {
    "text": "that change and then you go and do it again and this time you try and get it so that you don't basically make rep",
    "start": "1220960",
    "end": "1226799"
  },
  {
    "text": "now actually i'm not as strict as that i tend to say you know maybe sometimes debugging that's helpful because i don't really understand",
    "start": "1226799",
    "end": "1232640"
  },
  {
    "text": "immediately what went wrong and a little bit of debugging might actually help me understand oh oh yeah i see what",
    "start": "1232640",
    "end": "1238320"
  },
  {
    "text": "went wrong okay maybe they're not reverting rewriter maybe then i can just i can fix and change it right but tdd is about doing programmer",
    "start": "1238320",
    "end": "1245840"
  },
  {
    "text": "or developer testing right we don't really use mocks where failure implicates the most recent",
    "start": "1245840",
    "end": "1252480"
  },
  {
    "text": "edit um and well it's a contract first approach where we are designing the api for a",
    "start": "1252480",
    "end": "1258880"
  },
  {
    "text": "module and it is that contract effectively and it's expression that we want to see",
    "start": "1258880",
    "end": "1265200"
  },
  {
    "text": "in the tests not um isolation code mock-up code etc",
    "start": "1265200",
    "end": "1270480"
  },
  {
    "text": "and of course once you get rid of unit tests you also basically throw things like integration tests in the trash bin too right that distinction doesn't really",
    "start": "1270480",
    "end": "1277039"
  },
  {
    "text": "exist it never has that on dvd",
    "start": "1277039",
    "end": "1280480"
  },
  {
    "text": "so this is basically the definition that you need to basically kind of get get internalized on the c2 wiki",
    "start": "1282880",
    "end": "1289120"
  },
  {
    "text": "testing development produces developer tests fairly implicates the developer's modulation edit you don't need to use mock objects and",
    "start": "1289120",
    "end": "1295120"
  },
  {
    "text": "you avoid debug debugging as you can by reverting that last edit that's what test driven development is",
    "start": "1295120",
    "end": "1302480"
  },
  {
    "text": "right so td is a process of discovery um and don't use marks right okay",
    "start": "1303440",
    "end": "1311440"
  },
  {
    "text": "um now having said that right having pushed you in that direction there are a couple of cases",
    "start": "1311440",
    "end": "1319039"
  },
  {
    "text": "where a ken originally in tgd by example describes using mods right so mocks and",
    "start": "1319039",
    "end": "1324080"
  },
  {
    "text": "all those things are actually part of the original first book that came out and uh one of the key things we need",
    "start": "1324080",
    "end": "1330799"
  },
  {
    "text": "from tdd is it's fast binary feedback it must be fast right and to do that we need to avoid",
    "start": "1330799",
    "end": "1338320"
  },
  {
    "text": "things that basically will slow us down the other thing is we must run all of our tests together so we need",
    "start": "1338320",
    "end": "1345600"
  },
  {
    "text": "to avoid things that cause problems where the shared state whether where one test could impact",
    "start": "1345600",
    "end": "1351679"
  },
  {
    "text": "another test so tests are isolated from each other we",
    "start": "1351679",
    "end": "1356880"
  },
  {
    "text": "need to run run them in parallel and typically the problem becomes what we call a shared fixture a database",
    "start": "1356880",
    "end": "1363919"
  },
  {
    "text": "a file something where multiple tests uh talking to it could cause one test out",
    "start": "1363919",
    "end": "1369919"
  },
  {
    "text": "to influence the other and that's a condition for using a mark right",
    "start": "1369919",
    "end": "1374960"
  },
  {
    "text": "where essentially you want to replace a piece of shared fixture and say i'm just going to basically replace that with some kind of in-memory dummy",
    "start": "1374960",
    "end": "1381120"
  },
  {
    "text": "that can effectively be very easily recreated for an individual test and you can do this stuff by doing",
    "start": "1381120",
    "end": "1387120"
  },
  {
    "text": "something like tearing you know creating and tearing down a database with every single test but the problem with that basically is",
    "start": "1387120",
    "end": "1393360"
  },
  {
    "text": "it becomes slow right and so what we need to do is make sure that what we",
    "start": "1393360",
    "end": "1398640"
  },
  {
    "text": "is we keep speed as well as basically isolation of tests from each other and that means we quite commonly think",
    "start": "1398640",
    "end": "1405039"
  },
  {
    "text": "about using some kind of test double uh to replace shared fixture components that's typically io",
    "start": "1405039",
    "end": "1412559"
  },
  {
    "text": "we can also use marks where essentially tests become fragile",
    "start": "1412559",
    "end": "1417760"
  },
  {
    "text": "because they're talking to say for example across the network to some third-party service which may or",
    "start": "1417760",
    "end": "1423760"
  },
  {
    "text": "may not be available and we don't really want to have a dependency on that for our test it's slow and effectively it's fragile right but",
    "start": "1423760",
    "end": "1431520"
  },
  {
    "text": "that's all we really want to use mocks for that's all the the whole reason marks are including regional book is to solve problems with",
    "start": "1431520",
    "end": "1437200"
  },
  {
    "text": "shared fixture solve problems of slow tests so a problem with fragile tests that's the reason to use mocks not",
    "start": "1437200",
    "end": "1444400"
  },
  {
    "text": "isolation dependencies",
    "start": "1444400",
    "end": "1447520"
  },
  {
    "text": "the second real problem we see out there is this idea that the trigger for a new test is a new function",
    "start": "1450320",
    "end": "1456880"
  },
  {
    "text": "we see people writing something saying oh yeah i need any method in my class i better spin up and write a test for that",
    "start": "1456880",
    "end": "1464880"
  },
  {
    "text": "and even wikipedia has this line saying what you do is you write a test that defines a function oral",
    "start": "1464880",
    "end": "1470960"
  },
  {
    "text": "improvements to a function so this idea is focusing on the function as the key unit of abstraction that",
    "start": "1470960",
    "end": "1477360"
  },
  {
    "text": "we're dealing with right and in particular we're seeing tdd is this idea of preconditions and post",
    "start": "1477360",
    "end": "1483200"
  },
  {
    "text": "conditions there we've got some things that are true before a function is called and things that are true after a function is",
    "start": "1483200",
    "end": "1489360"
  },
  {
    "text": "called and the test simply asserts and it's set up that given us preconditions we have these post conditions",
    "start": "1489360",
    "end": "1495200"
  },
  {
    "text": "and typically in a kind of o world where we're looking at some kind of object in its state and we're saying",
    "start": "1495200",
    "end": "1500960"
  },
  {
    "text": "hey it had this state before i run this method i have that it has the state after",
    "start": "1500960",
    "end": "1506000"
  },
  {
    "text": "and that leads us to very much fun to focus on hey every function that i have on my",
    "start": "1506000",
    "end": "1511520"
  },
  {
    "text": "class requires a test and i even see people having conversations",
    "start": "1511520",
    "end": "1516559"
  },
  {
    "text": "saying oh how do you test the private methods on your class right um",
    "start": "1516559",
    "end": "1524240"
  },
  {
    "text": "so that becomes a bit of a problem right um because people start to believe that",
    "start": "1524240",
    "end": "1529600"
  },
  {
    "text": "this function is the system under test i'm thinking all the time about functions and how and how i test",
    "start": "1529600",
    "end": "1536240"
  },
  {
    "text": "and even there's a lot of ideas around primaritized testing i'll worry about how can i exercise the different",
    "start": "1536240",
    "end": "1541840"
  },
  {
    "text": "possible combinations that my my function expresses right um",
    "start": "1541840",
    "end": "1548159"
  },
  {
    "text": "uh people start to talk about test coverage and say do i need to test this getter and setter",
    "start": "1548159",
    "end": "1553679"
  },
  {
    "text": "because you know do i that's a that's a function of my classes um should i test my getters and setters",
    "start": "1553679",
    "end": "1559440"
  },
  {
    "text": "and they get lost in this whole conversation about well maybe you don't really need a hundred percent test coverage getting",
    "start": "1559440",
    "end": "1564880"
  },
  {
    "text": "started can't fail um and it's really a pointless discussion because this is not our goal",
    "start": "1564880",
    "end": "1570400"
  },
  {
    "text": "right and quite often when we look at this model of mocks and unit tests and functions being a",
    "start": "1570400",
    "end": "1577039"
  },
  {
    "text": "target we end up in this world what we said we have to have these acceptance tests",
    "start": "1577039",
    "end": "1582840"
  },
  {
    "text": "because what we've tested in our tdd is these fine grains",
    "start": "1582840",
    "end": "1589440"
  },
  {
    "text": "of our application um but we need bigger tests to test they all fit together so we'll have to have integration tests",
    "start": "1589440",
    "end": "1596000"
  },
  {
    "text": "and we'll have to have acceptance tests because it turns out tdd isn't testing our system it's testing these tiny little",
    "start": "1596000",
    "end": "1602240"
  },
  {
    "text": "atomic units of our system right and again that's not true that's not what we're trying to achieve",
    "start": "1602240",
    "end": "1608640"
  },
  {
    "text": "now the problem with these tests is they're very much focused on i'm going to provide you some parameters",
    "start": "1609200",
    "end": "1616400"
  },
  {
    "text": "basically to the test and i'm going to produce an output i'm going to tell you very little about",
    "start": "1616400",
    "end": "1621840"
  },
  {
    "text": "why you might be calling that function what is the behavior in the domain",
    "start": "1621840",
    "end": "1627679"
  },
  {
    "text": "that we are trying to basically encode that we are looking at i can't often see that i can",
    "start": "1627679",
    "end": "1634559"
  },
  {
    "text": "just see hey i've got this method called do something and it adds five to seven um",
    "start": "1634559",
    "end": "1640240"
  },
  {
    "text": "and it seems to come back with the answer 26. i don't understand why why would it do that right",
    "start": "1640240",
    "end": "1646320"
  },
  {
    "text": "and nothing in the test tells me maybe there's some mocks in there that help us sir why how it does that nothing the test tells",
    "start": "1646320",
    "end": "1652880"
  },
  {
    "text": "me right and that's not the point there's this whole notion essentially we had of executable specifications that i",
    "start": "1652880",
    "end": "1660880"
  },
  {
    "text": "wouldn't need to do documentation anymore because i could go and read the tests right people laugh at this idea and they",
    "start": "1660880",
    "end": "1666000"
  },
  {
    "text": "go i gotta look at my test suite there's no way i can leave that documentation because",
    "start": "1666000",
    "end": "1671200"
  },
  {
    "text": "um uh you know look at the test you couldn't possibly interpret the system from the tests this whole idea is wrong",
    "start": "1671200",
    "end": "1677279"
  },
  {
    "text": "they never ask themselves maybe it's my test that is wrong i think my tests are just so badly written",
    "start": "1677279",
    "end": "1683600"
  },
  {
    "text": "that's why i can't do that and so it's not the idea that's the problem that's why people have been",
    "start": "1683600",
    "end": "1689440"
  },
  {
    "text": "writing tests as the problem you write tests the wrong way and you can't clearly see",
    "start": "1689440",
    "end": "1694480"
  },
  {
    "text": "what's going on right so from the from the dawn of tdd right",
    "start": "1694480",
    "end": "1702559"
  },
  {
    "text": "this has been the this has been this has been the actual statement that was made the trigger for a new test is a new",
    "start": "1702559",
    "end": "1708840"
  },
  {
    "text": "behavior the dawn of tdd that's been basically what tdd's been about right this is an example",
    "start": "1708840",
    "end": "1716720"
  },
  {
    "text": "in kent's book of what you are testing",
    "start": "1716720",
    "end": "1721840"
  },
  {
    "text": "we are testing that we need to be able to add amounts in two different currencies and convert the result given a set of exchange rates",
    "start": "1721840",
    "end": "1727600"
  },
  {
    "text": "i'm not testing a function i'm not testing a particular class hierarchy that i've",
    "start": "1727600",
    "end": "1733679"
  },
  {
    "text": "developed the crc cards i am testing a requirement that is a tdd",
    "start": "1733679",
    "end": "1738880"
  },
  {
    "text": "test right right nowadays we tend to rewrite these as given a set of exchange rates when we",
    "start": "1738880",
    "end": "1745679"
  },
  {
    "text": "add amounts in two different currencies then we convert the result but this is exactly what tdd was talking about from",
    "start": "1745679",
    "end": "1752320"
  },
  {
    "text": "the very very beginning right so if i rewrite that given a set of exchange rates when i add two amounts",
    "start": "1752320",
    "end": "1758159"
  },
  {
    "text": "of different currencies together then i get a result in the first currency we get a classic",
    "start": "1758159",
    "end": "1763440"
  },
  {
    "text": "uh what we think of now basically as you know given when then test right given the state the world before the test",
    "start": "1763440",
    "end": "1769200"
  },
  {
    "text": "when i exercise the behavior under test then we spread the following challenges right gwt sometimes people think oh hey",
    "start": "1769200",
    "end": "1776399"
  },
  {
    "text": "we went away and we fixed cdd and we presented this new thing given when then right that's exactly how it's been since",
    "start": "1776399",
    "end": "1783120"
  },
  {
    "text": "the beginning right given when then it's just another way of expressing that same concept that's basically how you do tdd",
    "start": "1783120",
    "end": "1789520"
  },
  {
    "text": "um it's the same as a four-fold test which is uh set up given exercise when i",
    "start": "1789520",
    "end": "1795760"
  },
  {
    "text": "verify it verify it then tear down right so set up exercise verifying tear down which has been encoded into x unit tools",
    "start": "1795760",
    "end": "1803919"
  },
  {
    "text": "since the dawn of time right and it's the same as that to arrange an assert which has the same set",
    "start": "1803919",
    "end": "1809440"
  },
  {
    "text": "of principles testing is about doing uh expressing a behavior",
    "start": "1809440",
    "end": "1815200"
  },
  {
    "text": "and then writing tests the smallest piece of code we can to move from where we are towards",
    "start": "1815200",
    "end": "1820960"
  },
  {
    "text": "implementing that behavior and that is is it is this that led dan",
    "start": "1820960",
    "end": "1827200"
  },
  {
    "text": "to make this statement right so dan originally made the statement very early on in tdd history",
    "start": "1827200",
    "end": "1832720"
  },
  {
    "text": "and his point was um uh tested the behavior tdd's behavior driving development was",
    "start": "1832720",
    "end": "1838720"
  },
  {
    "text": "if i that the word test to confuse people it started bringing in ideas like unit testing acceptance testing and",
    "start": "1838720",
    "end": "1844880"
  },
  {
    "text": "integration testing and the key to what we were doing was actually behavior",
    "start": "1844880",
    "end": "1850799"
  },
  {
    "text": "right so that's the key not",
    "start": "1850799",
    "end": "1857519"
  },
  {
    "text": "anything that came after bbd right i don't want and i'm not particularly advocating the bdd i think big d has",
    "start": "1857519",
    "end": "1864559"
  },
  {
    "text": "some of its basically own sets of issues on particularly its outside-in model and its current dependency on acceptance",
    "start": "1864559",
    "end": "1871279"
  },
  {
    "text": "testing right but originally the observation of bdd was",
    "start": "1871279",
    "end": "1876480"
  },
  {
    "text": "its behaviors that you are dealing with in is the contracts that you are dealing with in tdd",
    "start": "1876480",
    "end": "1884240"
  },
  {
    "text": "um so bdd originally when when dan created this blog post it's just an alternative name for tdd",
    "start": "1884240",
    "end": "1889519"
  },
  {
    "text": "so alternative way of naming it to express that basically the key thing was behaviours or contracts",
    "start": "1889519",
    "end": "1894640"
  },
  {
    "text": "not tests you could call it contract driven development that'd be an equally valid",
    "start": "1894640",
    "end": "1900559"
  },
  {
    "text": "name for what kent was basically expressing he just called it tdd because it manifested itself in these executable",
    "start": "1900559",
    "end": "1906399"
  },
  {
    "text": "specifications i tested it written and so although i mentioned bdd i'm not",
    "start": "1906399",
    "end": "1914320"
  },
  {
    "text": "advocating to be as i say i think it has its own set of problems i think it's lost its way from what original ideals",
    "start": "1914320",
    "end": "1922080"
  },
  {
    "text": "so the rule in in tdd is that the the next test you write is the most obvious step",
    "start": "1922640",
    "end": "1928720"
  },
  {
    "text": "in implementing a use case or user story right and in a sense that's the question",
    "start": "1928720",
    "end": "1934480"
  },
  {
    "text": "that answers everything right the question of what test do i write next is the most obvious step towards",
    "start": "1934480",
    "end": "1941120"
  },
  {
    "text": "implementing a requirement i've got a blank sheet of paper what do i write i have a i should have a requirement",
    "start": "1941120",
    "end": "1946640"
  },
  {
    "text": "from a customer which says there's something i need in the domain right and the next",
    "start": "1946640",
    "end": "1952640"
  },
  {
    "text": "test i write is the most obvious thing i can take in taking a small step towards implementing that",
    "start": "1952640",
    "end": "1957919"
  },
  {
    "text": "maybe i have some acceptance criteria from the customer about their requirements maybe i can look at the simplest of those acceptance criteria",
    "start": "1957919",
    "end": "1964880"
  },
  {
    "text": "and code that into a test right what's the what's the what's the smallest change i can make to the existing system",
    "start": "1964880",
    "end": "1971360"
  },
  {
    "text": "to move closer towards implementing this particular behavior that the customer has asked for",
    "start": "1971360",
    "end": "1977120"
  },
  {
    "text": "right test of that tv is all an agile it's all about small steps i",
    "start": "1977120",
    "end": "1982559"
  },
  {
    "text": "make a small change and it goes wrong i haven't got much to throw away right make a big change then i'm very",
    "start": "1982559",
    "end": "1989760"
  },
  {
    "text": "uninclined to throw it away when it goes wrong and i spent ages trying to hack it around it right i recently",
    "start": "1989760",
    "end": "1996000"
  },
  {
    "text": "um you know i had that experience basically on my on broadcast project i realized that",
    "start": "1996000",
    "end": "2003360"
  },
  {
    "text": "um rather than trying to make something uh work it was just easier basically",
    "start": "2003360",
    "end": "2008559"
  },
  {
    "text": "effectively to rewrite it because whatever decisions i've made in the past were lost to me and",
    "start": "2008559",
    "end": "2014080"
  },
  {
    "text": "it was quicker to go in and rewrite the whole thing right and i had tests that helped me do that",
    "start": "2014080",
    "end": "2019360"
  },
  {
    "text": "and that resolved that issue in the same way moving in small steps i should take advantage of that idea",
    "start": "2019360",
    "end": "2024960"
  },
  {
    "text": "that basically maybe that stuff doesn't work throughout a way try rewriting",
    "start": "2024960",
    "end": "2031360"
  },
  {
    "text": "and it's important to understand that it's we're focused on use cases and user stories right user storage",
    "start": "2031360",
    "end": "2036720"
  },
  {
    "text": "user stories are just light lightweight use cases right and it's that which effectively drives",
    "start": "2036720",
    "end": "2042240"
  },
  {
    "text": "our tdt we have a user story which we're given the customer basically says i want this thing to happen",
    "start": "2042240",
    "end": "2048158"
  },
  {
    "text": "and if we work with the customer we have a set of acceptance criteria that give us essentially rules",
    "start": "2048159",
    "end": "2053520"
  },
  {
    "text": "we can say hey when this happens that happens right these these are some numbers we can crunch to prove that and is that",
    "start": "2053520",
    "end": "2060000"
  },
  {
    "text": "that's that's what we said we should say about tdd hey what's the user story what's this what's the hey what's the demonstrator that's what i'm testing",
    "start": "2060000",
    "end": "2066480"
  },
  {
    "text": "right what's the smallest thing i can do to get towards that so if you go and look at for example ron jeffrey's",
    "start": "2066480",
    "end": "2072000"
  },
  {
    "text": "um work where effectively his catas and stuff where he's building for example the bowling game",
    "start": "2072000",
    "end": "2077358"
  },
  {
    "text": "you go and look at what he's doing right what he's doing is taking behaviors",
    "start": "2077359",
    "end": "2082878"
  },
  {
    "text": "about scoring a bowling game and each time around he's saying what's the smallest thing i can do",
    "start": "2082879",
    "end": "2088720"
  },
  {
    "text": "to move towards basically that set of behaviors so i've got a um on my github a copy basically",
    "start": "2088720",
    "end": "2094720"
  },
  {
    "text": "effectively of uh kind of his rules and he just you've got a set of acceptance criteria that basically say what how do i want to",
    "start": "2094720",
    "end": "2101680"
  },
  {
    "text": "see a bowling game work right and you can just work your way through that",
    "start": "2101680",
    "end": "2107200"
  },
  {
    "text": "um so if tdd is capturing these requirements this is my big objection to bdd",
    "start": "2108880",
    "end": "2113920"
  },
  {
    "text": "tdd is dealing with these use cases and user stories you might ask the question well hang on a minute isn't that what acceptance test",
    "start": "2113920",
    "end": "2120240"
  },
  {
    "text": "do you we'll come back to that um and the thing we mentioned earlier",
    "start": "2120240",
    "end": "2125920"
  },
  {
    "text": "right in the refactoring step right i don't have to introduce new",
    "start": "2125920",
    "end": "2131760"
  },
  {
    "text": "tests if i break out new classes or new methods they are placed under test",
    "start": "2131760",
    "end": "2138320"
  },
  {
    "text": "by the original test that you have your test gives you coverage essentially of that behave of what what",
    "start": "2138320",
    "end": "2145280"
  },
  {
    "text": "that change you just made when you refactor that challenge you just made and refactoring is usually safe steps which don't introduce new",
    "start": "2145280",
    "end": "2152000"
  },
  {
    "text": "paths etcetera and effectively even if i say oh i'm going to create some new methods or you",
    "start": "2152000",
    "end": "2158320"
  },
  {
    "text": "know what i want a little helper class to deal with that i don't need new tests the tests are on the behavior not on x",
    "start": "2158320",
    "end": "2165440"
  },
  {
    "text": "not on each individual class if i need eight classes to implement that that's great",
    "start": "2165440",
    "end": "2171440"
  },
  {
    "text": "i only necessarily need one test the test probably should be focused on what is exported",
    "start": "2171440",
    "end": "2176560"
  },
  {
    "text": "from the module there's other things in a language that supports that should be implementation digits which are hidden",
    "start": "2176560",
    "end": "2182000"
  },
  {
    "text": "and i supported from the module so i'm thinking internals in c sharp or you know single underscore and",
    "start": "2182000",
    "end": "2187440"
  },
  {
    "text": "python and a module right things that effectively you don't expose but those things don't need individual",
    "start": "2187440",
    "end": "2193200"
  },
  {
    "text": "tests and in refactoring you often find that you're building that class hierarchy",
    "start": "2193200",
    "end": "2198400"
  },
  {
    "text": "all you've got effectively under test is the facade and that's great because it means somebody else can come in",
    "start": "2198400",
    "end": "2203440"
  },
  {
    "text": "throw away your implementation rebuild it actually and provide the testing pass",
    "start": "2203440",
    "end": "2209200"
  },
  {
    "text": "know that their rework has been a good solution to the problem",
    "start": "2209200",
    "end": "2215280"
  },
  {
    "text": "remember that refractoring is changing the implementation without changing the behavior if you're doing anything else you're not doing with factoring",
    "start": "2215280",
    "end": "2220560"
  },
  {
    "text": "right um okay mention that multiplication exported um uh yeah could be a new class as well",
    "start": "2220560",
    "end": "2227520"
  },
  {
    "text": "right um and so remember that you need to follow this step red green refactor",
    "start": "2227520",
    "end": "2233599"
  },
  {
    "text": "green get your goal is to effectively define the algorithm as far as possible not to write clean code clean code in",
    "start": "2233599",
    "end": "2240320"
  },
  {
    "text": "the refactoring step refraction is where you apply patterns because you i understand",
    "start": "2240320",
    "end": "2245599"
  },
  {
    "text": "what the algorithm is to solve this problem now now i know what the context i have is now i know if a pattern is an",
    "start": "2245599",
    "end": "2251040"
  },
  {
    "text": "appropriate choice right so now i understand what complexity i write a complex enough",
    "start": "2251040",
    "end": "2256720"
  },
  {
    "text": "solution to the problem and no more i recommend usually going and reading a book called 99 bottles of beer by sandy metz uh",
    "start": "2256720",
    "end": "2264880"
  },
  {
    "text": "it's a great exploration i don't necessarily quite agree with some of the steps about td it's a great exploration of this idea of",
    "start": "2264880",
    "end": "2271119"
  },
  {
    "text": "using tests to avoid um increasing the complexity of your code",
    "start": "2271119",
    "end": "2277359"
  },
  {
    "text": "all right customers write acceptance tests um uh there's another fallacy",
    "start": "2277680",
    "end": "2283040"
  },
  {
    "text": "unfortunately um we don't really want to do that okay so",
    "start": "2283040",
    "end": "2288240"
  },
  {
    "text": "uh where did this idea come from so the idea originally came from the site this principle that we had",
    "start": "2288240",
    "end": "2293760"
  },
  {
    "text": "an on-site customer nowadays with an xp and nowadays we think about that as being say for example the product owner",
    "start": "2293760",
    "end": "2299280"
  },
  {
    "text": "and the product owner the idea was would essentially help us with defining the requirements um",
    "start": "2299280",
    "end": "2304960"
  },
  {
    "text": "looking deceptive criteria and testing basically the code right and so one of the uh",
    "start": "2304960",
    "end": "2312160"
  },
  {
    "text": "the kind of real stretch goal was basically was well why can't the customer actually write to test right",
    "start": "2312160",
    "end": "2318480"
  },
  {
    "text": "and then the obstacle was being well they can't write the test because they're not a developer well what if we created tools to let them write it in",
    "start": "2318480",
    "end": "2324000"
  },
  {
    "text": "their own language or just fill in a table in an html table they could write the tests so the the",
    "start": "2324000",
    "end": "2331359"
  },
  {
    "text": "idea behind acceptance testing was originally customers would come in and write the tests for us and that's",
    "start": "2331359",
    "end": "2337839"
  },
  {
    "text": "why we have a dsl like cucumber or basically we have a wiki page",
    "start": "2337839",
    "end": "2343040"
  },
  {
    "text": "or an html table and something like fit so that the customers can write the test directly",
    "start": "2343040",
    "end": "2350400"
  },
  {
    "text": "but how many of you actually have customers writing those",
    "start": "2353040",
    "end": "2360800"
  },
  {
    "text": "did you use spec flow or cucumber because your customer sits with your team and",
    "start": "2360960",
    "end": "2367280"
  },
  {
    "text": "writes the tests if you didn't why are you doing that",
    "start": "2367280",
    "end": "2372480"
  },
  {
    "text": "why not just you write your tests in an x unit tool what advantage have you gained by",
    "start": "2372480",
    "end": "2379440"
  },
  {
    "text": "putting it into basically another format which you then have to write some translation from and regex parsing and",
    "start": "2379440",
    "end": "2385839"
  },
  {
    "text": "fiddle all that around in order to then run your action an excellent tool effectively",
    "start": "2385839",
    "end": "2392560"
  },
  {
    "text": "probably zero and i've never really seen this work i've never even seen customers review",
    "start": "2392560",
    "end": "2398400"
  },
  {
    "text": "them all they earn is an additional burden on the team because they're complicated and hard to maintain",
    "start": "2398400",
    "end": "2404560"
  },
  {
    "text": "right my other question would be if i'm doing unit testing properly i'm doing tdd rather properly",
    "start": "2404560",
    "end": "2411040"
  },
  {
    "text": "right i'm doing tdd i've already got tests for my behaviors that express the acceptance",
    "start": "2411040",
    "end": "2416720"
  },
  {
    "text": "criteria described by the customer that's what my tdd's got what are these acceptance guys are keeping me there's no difference",
    "start": "2416720",
    "end": "2425680"
  },
  {
    "text": "so james shaw is the person that wrote one of people who helped write fit or achieve the word coming",
    "start": "2425680",
    "end": "2431839"
  },
  {
    "text": "so james has skin in the game right he's basically one of the people that helped write it also james's books on xp are great um if",
    "start": "2431839",
    "end": "2438240"
  },
  {
    "text": "you really want to understand how the xp philosophy worked if you if you if you missed out on that first time around your experience scrum",
    "start": "2438240",
    "end": "2444240"
  },
  {
    "text": "go and read basically his art of agile development um uh his problems basically he he",
    "start": "2444240",
    "end": "2450400"
  },
  {
    "text": "pointed this out he said i've abandoned using fit the tool that i wrote i've abandoned using it because it doesn't",
    "start": "2450400",
    "end": "2455520"
  },
  {
    "text": "work right and it's because because effectively customers don't do it and if customers",
    "start": "2455520",
    "end": "2461680"
  },
  {
    "text": "don't do it don't do it that tool only exists for customer consultation for the product",
    "start": "2461680",
    "end": "2466960"
  },
  {
    "text": "term if your product teller's not writing the tests in your cucumber suite don't do it",
    "start": "2466960",
    "end": "2472800"
  },
  {
    "text": "because they're more expensive they create a maintenance burden they spend much of their life read because generally the the pattern",
    "start": "2474240",
    "end": "2481040"
  },
  {
    "text": "of process you use says um i write them at the beginning they're read until i get all the",
    "start": "2481040",
    "end": "2486319"
  },
  {
    "text": "implementation or the all the implementation written and that means you have whole suites they're supposed to be read for a period of time",
    "start": "2486319",
    "end": "2492560"
  },
  {
    "text": "right that's really antithetical to the way that ttd works where effectively elsewhere should be green most of the time",
    "start": "2492560",
    "end": "2498000"
  },
  {
    "text": "and it tends to be people ignoring those tests because they're rare because there's things in there that haven't been built yet and then you get this crunch at the end",
    "start": "2498000",
    "end": "2503839"
  },
  {
    "text": "of the iteration where everyone goes hey we've got to fix the acceptance tests right",
    "start": "2503839",
    "end": "2509838"
  },
  {
    "text": "and i think atd and i think bdd bears basically a certain amount of responsibility for this unfortunately",
    "start": "2510079",
    "end": "2516800"
  },
  {
    "text": "has really um broken uh uh under our understanding of tdd",
    "start": "2516800",
    "end": "2523760"
  },
  {
    "text": "because the need in order to justify atd basically because we already have tested",
    "start": "2523760",
    "end": "2529839"
  },
  {
    "text": "the acceptance criteria for the behavior expressed by the customer that's tdd",
    "start": "2529839",
    "end": "2535040"
  },
  {
    "text": "wanted to justify http we have to effectively um degrade tdd adjust testing units",
    "start": "2535040",
    "end": "2544160"
  },
  {
    "text": "so we've added all this unnecessary complexity right all these unnecessary tools that",
    "start": "2544160",
    "end": "2549280"
  },
  {
    "text": "basically effectively are required to do dsls which the developer is writing themselves not the",
    "start": "2549280",
    "end": "2554720"
  },
  {
    "text": "customer to express the behavior which tdd should have been expressing an x unit tool",
    "start": "2554720",
    "end": "2559760"
  },
  {
    "text": "which would have given us fast binary feedback so really if you're using these today just ditch them",
    "start": "2559760",
    "end": "2567279"
  },
  {
    "text": "okay and again this is the point from ken originally this is a camera it's originally in ttd by example",
    "start": "2567440",
    "end": "2574319"
  },
  {
    "text": "talking about http which i think people are raising then and saying just don't do it right because you stare at a red bar for",
    "start": "2574319",
    "end": "2580640"
  },
  {
    "text": "too long because these tests essentially must be read until the implementation is done",
    "start": "2580640",
    "end": "2586800"
  },
  {
    "text": "let's rely on unit tests right uh customer specified acceptance",
    "start": "2586800",
    "end": "2593520"
  },
  {
    "text": "criteria is what we really want instead right so this is the way that james just working um",
    "start": "2593520",
    "end": "2599599"
  },
  {
    "text": "uh sometimes called example uh driven development but it's really just tdd um but if you want another name for this",
    "start": "2599599",
    "end": "2605359"
  },
  {
    "text": "kind of tdd you could call example driven development but customers illustrate examples and the developers basically use the",
    "start": "2605359",
    "end": "2611359"
  },
  {
    "text": "examples as a guide to write their tests we see in the elaboration customer says this is the user story here the acceptance criteria",
    "start": "2611359",
    "end": "2617920"
  },
  {
    "text": "um and we only use those to write our unique tests by taking tests even i say unit tests it's just",
    "start": "2617920",
    "end": "2624400"
  },
  {
    "text": "because i'm saying right but developer tests okay and that's where we get something",
    "start": "2624400",
    "end": "2631440"
  },
  {
    "text": "to go from okay it doesn't matter if you test first or you test last that's another fallacy",
    "start": "2631440",
    "end": "2637280"
  },
  {
    "text": "that seems to come up people say well um it doesn't matter i still get the same test coverage right",
    "start": "2637280",
    "end": "2643200"
  },
  {
    "text": "and people say i i've seen people actually literally say i like to explore my code so what i do is i write",
    "start": "2643200",
    "end": "2649280"
  },
  {
    "text": "something at the very top level at the outside contract and then i go in in small bits filling in individual details stubbing stuff out",
    "start": "2649280",
    "end": "2655680"
  },
  {
    "text": "until i get to the end and then right then i write the test to express that and you kind of like",
    "start": "2655680",
    "end": "2660880"
  },
  {
    "text": "uh okay that's tdd right so the problem is uh you say i want to",
    "start": "2660880",
    "end": "2667359"
  },
  {
    "text": "execute unit test after development tests right and that's classical testing right",
    "start": "2667359",
    "end": "2673920"
  },
  {
    "text": "classical testing is testing at the end of the line where essentially you say once i've written",
    "start": "2673920",
    "end": "2679119"
  },
  {
    "text": "something i'll then write tests it's a regression proofing",
    "start": "2679119",
    "end": "2684960"
  },
  {
    "text": "so your modeling has to occur when in advance of you getting tests",
    "start": "2685839",
    "end": "2692319"
  },
  {
    "text": "right so the feedback comes after your model has been just created by you perhaps with crc",
    "start": "2692319",
    "end": "2698319"
  },
  {
    "text": "colors and white boards um but also by the process of implementation at the end",
    "start": "2698319",
    "end": "2703440"
  },
  {
    "text": "when you're complete you see if that model is any good then what happens if the model is no",
    "start": "2703440",
    "end": "2708560"
  },
  {
    "text": "good right generally speaking people are very reluctant to go back",
    "start": "2708560",
    "end": "2714240"
  },
  {
    "text": "and throw away all that code that they've just written realizing the tests have now told them at the end",
    "start": "2714240",
    "end": "2719359"
  },
  {
    "text": "that their model was rubbish okay what they tend to do is then hack their models make it work and so if you are",
    "start": "2719359",
    "end": "2725599"
  },
  {
    "text": "doing test after you are essentially saying i prefer waterfall-style development that's what you're saying",
    "start": "2725599",
    "end": "2731359"
  },
  {
    "text": "i prefer design up front um and then test at the end classic phased waterfall development",
    "start": "2731359",
    "end": "2737440"
  },
  {
    "text": "that's that's your approach and that's okay if that's what you really want to do but please wear that shirt proudly",
    "start": "2737440",
    "end": "2742960"
  },
  {
    "text": "that's what you have signed up to right test last is no there's no relation test traffic",
    "start": "2742960",
    "end": "2750800"
  },
  {
    "text": "um one of the key issues here is this long",
    "start": "2750800",
    "end": "2757680"
  },
  {
    "text": "feedback loop right the idea behind tdd is we move quality left move quality up the line",
    "start": "2757680",
    "end": "2765680"
  },
  {
    "text": "right give you feedback on design decisions as you make them and you can do that by",
    "start": "2765680",
    "end": "2771599"
  },
  {
    "text": "red green refactor you can't do that like a test after and unfortunately",
    "start": "2771599",
    "end": "2776960"
  },
  {
    "text": "unit testing uh unit and integration testing and all that standing ins along with mock objects",
    "start": "2776960",
    "end": "2783200"
  },
  {
    "text": "implicitly push you into test after even if you write test at the same time you've really done the",
    "start": "2783200",
    "end": "2788400"
  },
  {
    "text": "design already and effectively you are then just trying to basically um write a test to encapsulate that design",
    "start": "2788400",
    "end": "2795920"
  },
  {
    "text": "um one of the problems here is that you're engaging in speculation right you're writing speculative code",
    "start": "2797200",
    "end": "2803040"
  },
  {
    "text": "how do you know when you're done right surely done basically is i've met the requirements given to me by the",
    "start": "2803040",
    "end": "2808720"
  },
  {
    "text": "customer but quite often in this model people go away and write a whole lot of code and then they add the test at the end",
    "start": "2808720",
    "end": "2814960"
  },
  {
    "text": "which can find the behavior the customer wanted and it may turn out that half the code was completely unnecessary",
    "start": "2814960",
    "end": "2820800"
  },
  {
    "text": "right you slowed yourself down considerably because you deliver stuff the customer didn't need and you may say oh the customer will",
    "start": "2820800",
    "end": "2826400"
  },
  {
    "text": "need that i know i'm smart the customer always wants that but how do you know until you actually",
    "start": "2826400",
    "end": "2831920"
  },
  {
    "text": "see what the customer wants whether your implementation is right and your tendency will be to say oh yeah",
    "start": "2831920",
    "end": "2838000"
  },
  {
    "text": "it's not quite what i built i can hack what i built to make that work right if you'd waited and found out what",
    "start": "2838000",
    "end": "2843599"
  },
  {
    "text": "the actual requirement was when it came if it came you wrote better code",
    "start": "2843599",
    "end": "2850000"
  },
  {
    "text": "so the the thing we need to understand is that we should basically only write production code in response",
    "start": "2852640",
    "end": "2858319"
  },
  {
    "text": "to a test that's one of the key principles of tdd okay",
    "start": "2858319",
    "end": "2863760"
  },
  {
    "text": "we only write a test in response to a requirement",
    "start": "2867280",
    "end": "2872319"
  },
  {
    "text": "so we can't write speculative code there's a path from requirement to test",
    "start": "2872319",
    "end": "2878880"
  },
  {
    "text": "the thing that i implemented if i come to write my tests and",
    "start": "2878880",
    "end": "2887200"
  },
  {
    "text": "because and i don't i don't know what the acceptance criteria are i don't know what the behavior is and and i feel like i'm stalled",
    "start": "2887200",
    "end": "2894480"
  },
  {
    "text": "well actually that's a prompt right it's a prompt to say we don't understand this story well enough let's get the product",
    "start": "2894480",
    "end": "2900000"
  },
  {
    "text": "on or the customer back into the room let's talk to them let's find out what we should actually be building",
    "start": "2900000",
    "end": "2906720"
  },
  {
    "text": "all right um as ken's kind of key point here is",
    "start": "2909200",
    "end": "2916559"
  },
  {
    "text": "tdd gives us two things it gives us design contract first design and it gives us scope control right we",
    "start": "2916559",
    "end": "2923280"
  },
  {
    "text": "don't write a necessary code and that's what we test first",
    "start": "2923280",
    "end": "2928800"
  },
  {
    "text": "all right 100 test coverage your code hopefully you'll begin to see that this one probably probably won't um uh work now even tdd",
    "start": "2928800",
    "end": "2936160"
  },
  {
    "text": "basically um ken at some point says cd4 religiously should result 100 coverage of code but that's because if",
    "start": "2936160",
    "end": "2943520"
  },
  {
    "text": "we do tdd right right if we're writing programmer tests we're basically following behaviors et",
    "start": "2943520",
    "end": "2948960"
  },
  {
    "text": "cetera um and we are writing a test first we're never writing any code that wasn't prompted by a test so we",
    "start": "2948960",
    "end": "2956000"
  },
  {
    "text": "can't write tests that basically doesn't have 100 coverage because why would we have written code that didn't have a test",
    "start": "2956000",
    "end": "2961760"
  },
  {
    "text": "over it we'd only get discrepancies if what we",
    "start": "2961760",
    "end": "2968000"
  },
  {
    "text": "were doing was essentially test first and we'll test first by by the process of introducing unit tests",
    "start": "2968000",
    "end": "2974800"
  },
  {
    "text": "because unit tests always are a test after strategy and so as soon as you try and do unit",
    "start": "2974800",
    "end": "2980079"
  },
  {
    "text": "tests you will effectively end up like doing tests after even if you are simultaneously writing",
    "start": "2980079",
    "end": "2987599"
  },
  {
    "text": "or untested branches and refractions without refracting stuff goes wrong we may well find that essentially we introduce a branch we get carried away",
    "start": "2987920",
    "end": "2995119"
  },
  {
    "text": "and that is the point effectively of co coverage tools which basically say at the beginning of the refactoring i have this much coverage at the end of",
    "start": "2995119",
    "end": "3001440"
  },
  {
    "text": "the refactoring i should have the same amount of coverage i shouldn't basically have introduced me positive to the code if i have it should",
    "start": "3001440",
    "end": "3007040"
  },
  {
    "text": "highlight to me hey you use this new path and nothing in the test expresses that if you take that path out and then you",
    "start": "3007040",
    "end": "3012559"
  },
  {
    "text": "write the test that basically expresses that particular behavior if you can confirm that is genuine requirement",
    "start": "3012559",
    "end": "3019440"
  },
  {
    "text": "of course we do actually have less than 100 right quite often so so why is that",
    "start": "3021760",
    "end": "3028160"
  },
  {
    "text": "is that because we've got problems right is that because essentially um",
    "start": "3028160",
    "end": "3035760"
  },
  {
    "text": "things happen in the past that are wrong one of the things that uh we need to",
    "start": "3035760",
    "end": "3041200"
  },
  {
    "text": "understand at this point is not all of our code should be driven by test driven development tdd is suitable",
    "start": "3041200",
    "end": "3046960"
  },
  {
    "text": "e4 expressing our funding our domain finding basically the behaviors of that",
    "start": "3046960",
    "end": "3052640"
  },
  {
    "text": "domain and how it works it's not super full of other things it's not test first development not the",
    "start": "3052640",
    "end": "3057839"
  },
  {
    "text": "process we're describing here right these processes to find fast binary",
    "start": "3057839",
    "end": "3063359"
  },
  {
    "text": "feedback right what we don't want to do therefore is drive tests about things that are fragile or slow",
    "start": "3063359",
    "end": "3070000"
  },
  {
    "text": "or potentially um where effectively exploratory testing would give us better with better better feedback",
    "start": "3070000",
    "end": "3077119"
  },
  {
    "text": "we don't drive spikes rather throw away code spike is basically how we find stuff out",
    "start": "3077119",
    "end": "3082240"
  },
  {
    "text": "you don't know point writing tests around it it the feedback is the spike right you don't have integration right if you",
    "start": "3082240",
    "end": "3089520"
  },
  {
    "text": "basically need essentially to figure out whether your configuration is for your your data for your database mapping is",
    "start": "3089520",
    "end": "3095680"
  },
  {
    "text": "correct that's not a tdd process you're not exploring a behavior right",
    "start": "3095680",
    "end": "3101119"
  },
  {
    "text": "run some code and see if it works that's the way you get feedback and if you're worried about it changing sure",
    "start": "3101119",
    "end": "3106960"
  },
  {
    "text": "write a test and maybe use an excellent tool after the protection against regression but that's not our tdd objective right",
    "start": "3106960",
    "end": "3113599"
  },
  {
    "text": "gd is about getting a feedback on the behaviors that you're encoding into the system it's not about confirming that you can",
    "start": "3113599",
    "end": "3119920"
  },
  {
    "text": "follow the instructions on how to use your rm correctly don't if it tests out things that are",
    "start": "3119920",
    "end": "3126800"
  },
  {
    "text": "fragile will continue to break like things that it's just over networking connections right",
    "start": "3126800",
    "end": "3132319"
  },
  {
    "text": "don't do tds around things that are slow so that you don't get fast binary feedback and everyone doesn't run the tests all the time",
    "start": "3132319",
    "end": "3138079"
  },
  {
    "text": "because it takes 20 minutes to run the test suite just use a test after approach to make",
    "start": "3138079",
    "end": "3143440"
  },
  {
    "text": "sure they're regression tested if you need to and often the fastest feedback is something to run them not to write tests at all",
    "start": "3143440",
    "end": "3149440"
  },
  {
    "text": "the goal of tdd is fast feedback on design decisions that's what it's there for",
    "start": "3149440",
    "end": "3155599"
  },
  {
    "text": "right if you can get faster feedback by a different mechanism use that instead",
    "start": "3155599",
    "end": "3162800"
  },
  {
    "text": "okay don't go third party code it's not yours either right um yeah so if not when your code is tdd",
    "start": "3164000",
    "end": "3172000"
  },
  {
    "text": "your entire code base won't have 100 coverage don't worry about that focus your tdd efforts on the things",
    "start": "3172000",
    "end": "3177839"
  },
  {
    "text": "that make sense for tdd which is really around your domain model and that leads to kind",
    "start": "3177839",
    "end": "3184000"
  },
  {
    "text": "of the testing pyramid which kind of says um you know tdd's part of strategy",
    "start": "3184000",
    "end": "3190240"
  },
  {
    "text": "because tdd basically is a cheap way of getting very fast feedback then we",
    "start": "3190240",
    "end": "3196319"
  },
  {
    "text": "should focus basically on making sure that our use cases the behavioral requirements of the system are driven by tdd",
    "start": "3196319",
    "end": "3203680"
  },
  {
    "text": "as we move up the stack we may want to use other techniques right where effectively it's i o we may want",
    "start": "3203680",
    "end": "3208960"
  },
  {
    "text": "to automate and check regression but we want to test that after right we want to think monitoring",
    "start": "3208960",
    "end": "3214319"
  },
  {
    "text": "alerting is part of our quality strategy right it tells us about the behavior system gives us feedback",
    "start": "3214319",
    "end": "3220240"
  },
  {
    "text": "about things that you might not be able to explore easily otherwise distributed systems fell in all sorts of interesting ways that tdd",
    "start": "3220240",
    "end": "3226480"
  },
  {
    "text": "is never going to discover for you right um and it spoke to your testing which basically asked the question which",
    "start": "3226480",
    "end": "3232000"
  },
  {
    "text": "is the opposite is asking the question you know how do i build this requirement things that i want this box testing is your qa saying let",
    "start": "3232000",
    "end": "3238559"
  },
  {
    "text": "me break this thing right by using it in new and unexpected ways",
    "start": "3238559",
    "end": "3243839"
  },
  {
    "text": "and all these things are valuable but the higher the louder they are the more expensive they are the slower",
    "start": "3243839",
    "end": "3250400"
  },
  {
    "text": "they are and effectively therefore the longer the time to feedback and the more cost to get feedback",
    "start": "3250400",
    "end": "3256319"
  },
  {
    "text": "so get the cheap feedback if you can at tdd and then go up the ladder as you need to",
    "start": "3256319",
    "end": "3264000"
  },
  {
    "text": "all right so clean architecture is one i always recommend as being a real help to doing tdd",
    "start": "3264000",
    "end": "3269200"
  },
  {
    "text": "okay this is a classic clean architecture model the clean architecture is just the generic name that's been created around hexagonal",
    "start": "3269200",
    "end": "3275200"
  },
  {
    "text": "onion bce there are a whole set of patterns that really just are the same thing",
    "start": "3275200",
    "end": "3280400"
  },
  {
    "text": "um and then really the key characteristic basically is that you have essentially a series of",
    "start": "3280400",
    "end": "3287440"
  },
  {
    "text": "layers in the center you have your entities which essentially is your domain model if you like um around that you have a",
    "start": "3287440",
    "end": "3295119"
  },
  {
    "text": "domain service layer which essentially is expressing um uh the use cases right",
    "start": "3295119",
    "end": "3301599"
  },
  {
    "text": "we think of them as ports in hexagon architecture i quite often think of them as commands right things that basically say um here is a",
    "start": "3301599",
    "end": "3308480"
  },
  {
    "text": "requirement which may involve a number of entities um so it's the behavior right around that we have where you",
    "start": "3308480",
    "end": "3314960"
  },
  {
    "text": "integrate with frameworks and other things that you need says right wait write your controller but so that",
    "start": "3314960",
    "end": "3320960"
  },
  {
    "text": "your web framework can call you and pass you the http request as parameters it's where you talk to your messaging",
    "start": "3320960",
    "end": "3326559"
  },
  {
    "text": "platform it's where you talk to your database right and beyond that is actually the",
    "start": "3326559",
    "end": "3331599"
  },
  {
    "text": "frameworks and the drivers that your system needs and the key idea in all clean architectures it depends inwards",
    "start": "3331599",
    "end": "3337119"
  },
  {
    "text": "right so things on the outer layer can call things on the inner layer but not in reverse",
    "start": "3337119",
    "end": "3343040"
  },
  {
    "text": "which tends to be why we need basically interfaces because if my use case",
    "start": "3343040",
    "end": "3349920"
  },
  {
    "text": "wants to basically write to a database um then what it needs to do basically is",
    "start": "3349920",
    "end": "3354960"
  },
  {
    "text": "have an interface that gets realized by a concrete database application by the outer layer",
    "start": "3354960",
    "end": "3360640"
  },
  {
    "text": "right that's all those are about that's all really injection that basically interfaces should be about it's about",
    "start": "3360640",
    "end": "3366000"
  },
  {
    "text": "layering right okay so given that we can look something like",
    "start": "3366000",
    "end": "3374400"
  },
  {
    "text": "that this right delivery mechanism boundary interactor entity boundary basically effectively things",
    "start": "3374400",
    "end": "3379760"
  },
  {
    "text": "like controllers interact effectively is our use cases entity is the things we're dealing with",
    "start": "3379760",
    "end": "3384799"
  },
  {
    "text": "we may have like an entity gateway that means go and get stuff from storage right when we have a request model",
    "start": "3384799",
    "end": "3390079"
  },
  {
    "text": "response model because our entities effectively can't leave can't go up beyond our interactor",
    "start": "3390079",
    "end": "3396079"
  },
  {
    "text": "so essentially our boundary effectively has to deal with something else instead that the interactive music right you can't it's a rule from",
    "start": "3396079",
    "end": "3403520"
  },
  {
    "text": "jakobson but you basically your boundary shouldn't talk directly to your entity you should always go through the interactive layer in between there's no",
    "start": "3403520",
    "end": "3408799"
  },
  {
    "text": "bypass um and you're really should be passing your entity back up therefore be directly exposed that's where you get",
    "start": "3408799",
    "end": "3414960"
  },
  {
    "text": "dtos right class models and response models okay given we know that it seems clear",
    "start": "3414960",
    "end": "3422079"
  },
  {
    "text": "that basically we should write most the majority of our tests against the use case line because tests exercise use cases",
    "start": "3422079",
    "end": "3430400"
  },
  {
    "text": "or user stories that's what i write most of my tdd if i",
    "start": "3430400",
    "end": "3435599"
  },
  {
    "text": "have an interactor like a command or i've got a dispatch model so i've got a command and a handler",
    "start": "3435599",
    "end": "3441359"
  },
  {
    "text": "that's where i write most of my tests our x unit suite is just another adapter",
    "start": "3441359",
    "end": "3448079"
  },
  {
    "text": "it's another thing driving it right and we can also essentially see that maybe it makes sense at this point",
    "start": "3448079",
    "end": "3454240"
  },
  {
    "text": "both from the depends inward stage of this architecture and from the symmetry of where we sit",
    "start": "3454240",
    "end": "3460079"
  },
  {
    "text": "to say that some of these things on the outside the lio things that are fragile and slow look like the good candidates",
    "start": "3460079",
    "end": "3465200"
  },
  {
    "text": "for things we should mark right sometimes the use case is too",
    "start": "3465200",
    "end": "3471440"
  },
  {
    "text": "coarse-grained and i need to be a bit more fine-grained and i can switch down to enters kent calls this notion gears it's a it's",
    "start": "3471440",
    "end": "3478640"
  },
  {
    "text": "it's one of the craziest explain things and i didn't realize america so many americans understood how stick shifts work",
    "start": "3478640",
    "end": "3484319"
  },
  {
    "text": "but the idea effectively is i choose a suitable gear so high gear most of the time low gear when things get tricky so you",
    "start": "3484319",
    "end": "3489839"
  },
  {
    "text": "can shift down to entities and things get tricky this is what it looks like i've got an x unit framework driving a test",
    "start": "3489839",
    "end": "3496640"
  },
  {
    "text": "the test has a request model and response model right so you can tell that you're dealing with the api for software implementation",
    "start": "3496640",
    "end": "3502960"
  },
  {
    "text": "details because generally exposes primitives not to main objects right because your apis are much better",
    "start": "3502960",
    "end": "3509359"
  },
  {
    "text": "exposing primitive structures not and things that are defined at its level not the things inside so interact and",
    "start": "3509359",
    "end": "3516640"
  },
  {
    "text": "then the entities before and then essentially you can have a delivery mechanism which has some kind of in-memory db for faking out purposes for a test okay",
    "start": "3516640",
    "end": "3524480"
  },
  {
    "text": "so your test is just driving the same code that other things drive",
    "start": "3524480",
    "end": "3530319"
  },
  {
    "text": "don't td other adapters generally they're provided to you by framework they should have tests that are running",
    "start": "3530319",
    "end": "3535680"
  },
  {
    "text": "basically the proof that they work and don't tds your controller effective etcetera and use that as your starting",
    "start": "3535680",
    "end": "3540880"
  },
  {
    "text": "point it's dealing with issues like http it should be skinny just hand over work to your use case",
    "start": "3540880",
    "end": "3546319"
  },
  {
    "text": "right it's another adapter like x unit if you need confirmation of stuff you",
    "start": "3546319",
    "end": "3552240"
  },
  {
    "text": "may want to have some kind of scripted tests that trace end to end let's show you the whole thing hangs together",
    "start": "3552240",
    "end": "3557760"
  },
  {
    "text": "and that essentially you haven't you know fluffed up when you basically been doing your routine table in your",
    "start": "3557760",
    "end": "3563280"
  },
  {
    "text": "controller or assigning your orm uh mappings that you need right you only",
    "start": "3563280",
    "end": "3568400"
  },
  {
    "text": "need a few of those just to test the happy path trace the whole thing hangs together for you and that's really about those",
    "start": "3568400",
    "end": "3574799"
  },
  {
    "text": "configuration concerns which is really what they are um",
    "start": "3574799",
    "end": "3579838"
  },
  {
    "text": "all right let's basically summarize um the fallacies developers write unit",
    "start": "3580000",
    "end": "3585839"
  },
  {
    "text": "tests trigger frame you test is a new function customers write acceptance tests doesn't",
    "start": "3585839",
    "end": "3591040"
  },
  {
    "text": "matter if you test first or last and you want 100 test coverage of your account right principles you should be following",
    "start": "3591040",
    "end": "3596960"
  },
  {
    "text": "if you're writing developer or programmer tests right the trigger trick for you to write a test should be a new behavior",
    "start": "3596960",
    "end": "3603839"
  },
  {
    "text": "um the customer should be writing acceptance criteria um you should only write production code",
    "start": "3603839",
    "end": "3608960"
  },
  {
    "text": "in response to a test but not all of your code should be driven by tdd",
    "start": "3608960",
    "end": "3614480"
  },
  {
    "text": "all right and we're done thanks very much um i can i will hang out for questions",
    "start": "3614480",
    "end": "3621359"
  },
  {
    "text": "uh at the but i know it's a break so um people are probably recording but they",
    "start": "3621359",
    "end": "3627359"
  },
  {
    "text": "will hang out people want to chat",
    "start": "3627359",
    "end": "3643838"
  }
]