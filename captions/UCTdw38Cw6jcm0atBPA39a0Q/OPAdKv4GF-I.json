[
  {
    "text": "oh is that is that the key it's oh oh",
    "start": "329",
    "end": "5600"
  },
  {
    "text": "look there's people hello I learned something very cool well I",
    "start": "5600",
    "end": "11550"
  },
  {
    "text": "knew it but I was reminded in two specific instances in the last 20 minutes in the break of the power of",
    "start": "11550",
    "end": "17699"
  },
  {
    "text": "smiling at people as I was going past two people they smiled at me I smiled back",
    "start": "17699",
    "end": "22800"
  },
  {
    "text": "I felt better I suspect they felt better as well so you know top tip smile at people it really works",
    "start": "22800",
    "end": "28019"
  },
  {
    "text": "yes it's cool Francis smile at us right so it's always great to catch up",
    "start": "28019",
    "end": "33500"
  },
  {
    "text": "whenever I come to UK I try to catch up with you yeah on stage in front yeah so apologies",
    "start": "33500",
    "end": "40890"
  },
  {
    "text": "to those who wanted undivided mats as it were this was me joining Mads at the",
    "start": "40890",
    "end": "47760"
  },
  {
    "text": "kind of last minute old Tuesday I think it was so thank you very much - Mads for inviting me up here so I get to do a",
    "start": "47760",
    "end": "54120"
  },
  {
    "text": "versioning talk tomorrow instead of a CTR peak talk because I figured that yeah there's only so much c-sharp 8 that",
    "start": "54120",
    "end": "60390"
  },
  {
    "text": "one conference can have it's like you silly high-level but we've been pushing",
    "start": "60390",
    "end": "65489"
  },
  {
    "text": "it and at this conference we're everything had to talks with will go Wagner yesterday and now how many of you",
    "start": "65489",
    "end": "71369"
  },
  {
    "text": "were at those talks or at least one of them okay maybe let's do it the other way around",
    "start": "71369",
    "end": "76500"
  },
  {
    "text": "how many of you weren't so therefore okay still a good number probably yeah you shouldn't entirely skip the null",
    "start": "76500",
    "end": "82890"
  },
  {
    "text": "thing if it was like you were all here for null you don't want to spending ten minutes going over exactly the same stuff right but now we will now we will",
    "start": "82890",
    "end": "90420"
  },
  {
    "text": "yeah because to our thing enough yeah so anyway do you think they know who we",
    "start": "90420",
    "end": "96299"
  },
  {
    "text": "actually introduce ourselves or yeah yeah good okay I'm I'm Masterson I'm the lead designer of c-sharp Microsoft and",
    "start": "96299",
    "end": "103079"
  },
  {
    "text": "I'm John skeet I'm a c-sharp fanboy basically I'm star software engineer at",
    "start": "103079",
    "end": "108390"
  },
  {
    "text": "Google I work on the Google cloud platform dotnet client libraries but the",
    "start": "108390",
    "end": "113820"
  },
  {
    "text": "reason I'm up here is because I'm a c-sharp family basically good so with that cleared away we have a we",
    "start": "113820",
    "end": "120270"
  },
  {
    "text": "have a lot of intro slides here no actually that's it we have a we have",
    "start": "120270",
    "end": "125759"
  },
  {
    "text": "Visual Studio so what we're going to talk about is mostly you know what's",
    "start": "125759",
    "end": "131340"
  },
  {
    "text": "coming in c-sharp a we're going to play with the late preview that came out last week well",
    "start": "131340",
    "end": "136750"
  },
  {
    "text": "some of it came out this week the the framework parts and we just kind of play with it I told Johnny - okay that he",
    "start": "136750",
    "end": "143920"
  },
  {
    "text": "comes up to my keyboard and types hello what tends to have long as I watch him doing it yeah when I come up and type in",
    "start": "143920",
    "end": "150700"
  },
  {
    "text": "preview builds I tend to end up fighting compiler issues just entirely accidentally I'm I have a massive corner",
    "start": "150700",
    "end": "157630"
  },
  {
    "text": "cases I mean how the hell me okay so so we got to do that we're gonna go through some of those features and then towards",
    "start": "157630",
    "end": "164260"
  },
  {
    "text": "the end we can talk about you know there a some of the things that aren't in preview bills yet that we still imagine",
    "start": "164260",
    "end": "169810"
  },
  {
    "text": "being in there and what's new what what are we imagining for the for the further",
    "start": "169810",
    "end": "175480"
  },
  {
    "text": "out future of c-sharp Kudo shut tanker to you let's go for it okay so a piece",
    "start": "175480",
    "end": "181690"
  },
  {
    "text": "of code here I have I have an array I'm creating an array of people persons we",
    "start": "181690",
    "end": "189070"
  },
  {
    "text": "can see from me from the the type Harbor type here and I want to just go through",
    "start": "189070",
    "end": "194770"
  },
  {
    "text": "and print them all out so I have a little display method here the friends the first name first letter of the",
    "start": "194770",
    "end": "199900"
  },
  {
    "text": "middle name and the last name so that is totally basic stuff for each of our",
    "start": "199900",
    "end": "205440"
  },
  {
    "text": "person in people display it display the",
    "start": "205440",
    "end": "215980"
  },
  {
    "text": "person boom alright what happens well",
    "start": "215980",
    "end": "223269"
  },
  {
    "text": "deliberately didn't show yeah and we haven't even shown the person type but you know you can go and I guess some of",
    "start": "223269",
    "end": "228970"
  },
  {
    "text": "what's going on there Joe and skeet Oh",
    "start": "228970",
    "end": "236440"
  },
  {
    "text": "boom okay okay do we still have the output so we can yeah it should still be",
    "start": "236440",
    "end": "241900"
  },
  {
    "text": "there yeah so it's apparently it's allergic to you know it got me I'm fine",
    "start": "241900",
    "end": "247299"
  },
  {
    "text": "oh it's yeah it's just you yeah I like this a compiler that owner what happened",
    "start": "247299",
    "end": "253299"
  },
  {
    "text": "that's let's go back here and see oh we got a null reference exception why did",
    "start": "253299",
    "end": "259030"
  },
  {
    "text": "we get a null reference exception well present that middle name don't get returned now oh oh someone we need",
    "start": "259030",
    "end": "266210"
  },
  {
    "text": "have a middle name so if we if we exit out of the debugger here and actually",
    "start": "266210",
    "end": "272810"
  },
  {
    "text": "look at that array yeah sure enough you're the only one in here who has a middle name",
    "start": "272810",
    "end": "278419"
  },
  {
    "text": "I like being special yes well probably more people have middle names but I",
    "start": "278419",
    "end": "283430"
  },
  {
    "text": "didn't know their middle names but no reference exception it feels like there is a feature for that yes the new",
    "start": "283430",
    "end": "288979"
  },
  {
    "text": "version of the app for that so how could we have avoided this you know how could we have avoid shipping this app to a",
    "start": "288979",
    "end": "295520"
  },
  {
    "text": "million people and then and then it crashed you know that's that's when all the reference types are out okay so the",
    "start": "295520",
    "end": "303740"
  },
  {
    "text": "idea being that we can like we can there",
    "start": "303740",
    "end": "310759"
  },
  {
    "text": "are things that you can't express today in c-sharp that maybe we can let you express mm-hm such as you know hey this",
    "start": "310759",
    "end": "317720"
  },
  {
    "text": "thing's supposed to be null or not right we can't say two days so we have to sort of guess right should I be checking for",
    "start": "317720",
    "end": "326120"
  },
  {
    "text": "knowledge or be handling know especially or use alternative approaches so in no time",
    "start": "326120",
    "end": "331669"
  },
  {
    "text": "that I'll probably mention notice I'm a bunch it's my dotnet date and time library and I sort of prepped for",
    "start": "331669",
    "end": "337780"
  },
  {
    "text": "nullable reference types before they were even on the horizon by I have an attribute on every public method that",
    "start": "337780",
    "end": "345949"
  },
  {
    "text": "returns a reference type saying whether or not it will return null and I actually have a test that makes sure",
    "start": "345949",
    "end": "351710"
  },
  {
    "text": "that every public method has either that either can be no or should not be null",
    "start": "351710",
    "end": "357440"
  },
  {
    "text": "and I'm trying to currently work out with nullable reference sites should I get rid of those tests or should I",
    "start": "357440",
    "end": "363070"
  },
  {
    "text": "assume that if I've just written one thing it's kind of okay and that's what I meant you know one thing about having",
    "start": "363070",
    "end": "370159"
  },
  {
    "text": "to put attributes in it makes you really really explicit and as matt said yesterday there was an option of",
    "start": "370159",
    "end": "376699"
  },
  {
    "text": "considering having this is an honorable string this is a nullable string this is",
    "start": "376699",
    "end": "382130"
  },
  {
    "text": "a no one's decided string there's something to be said for always being",
    "start": "382130",
    "end": "387560"
  },
  {
    "text": "explicit yeah I fully believe that classes should be sealed by default",
    "start": "387560",
    "end": "392719"
  },
  {
    "text": "rather than unsealed by default but I'd also have been fine with there being no default and saying you have to say I",
    "start": "392719",
    "end": "398599"
  },
  {
    "text": "want to seal I to unseal so always think about you not just can i express intention but am i",
    "start": "398599",
    "end": "405400"
  },
  {
    "text": "forced to expression intention yes so so the challenge here is that the world is",
    "start": "405400",
    "end": "411130"
  },
  {
    "text": "full of code it's full of use of reference types and some of them are",
    "start": "411130",
    "end": "416890"
  },
  {
    "text": "supposed to be null and some are not should we make you rewrite all of that code to be explicit about your",
    "start": "416890",
    "end": "423550"
  },
  {
    "text": "intentions in both directions or should we just make you rewrite and we we opted",
    "start": "423550",
    "end": "430120"
  },
  {
    "text": "for only making you rewrite half of that code week and so essentially the idea is",
    "start": "430120",
    "end": "435550"
  },
  {
    "text": "that we can now and and I'm now going to go and do it we can now turn so it's a feature that you have to turn on and then it's going",
    "start": "435550",
    "end": "441850"
  },
  {
    "text": "to essentially up the level of scrutiny of your code as sort of typically the first way you'll meet this feature on an",
    "start": "441850",
    "end": "447880"
  },
  {
    "text": "existing code is you turn it on and it's going to start complaining about things in your source code and it's gonna",
    "start": "447880",
    "end": "454120"
  },
  {
    "text": "complain nicely let's listen in one way you can turn it on if you just want to try it on a little bit of your code is you can say nullable enable a directive",
    "start": "454120",
    "end": "463030"
  },
  {
    "text": "and then it turns it on in your in your code but you can also turn it on for the whole project and I think that's I think",
    "start": "463030",
    "end": "469810"
  },
  {
    "text": "and that enable is not the only option and this is something that I haven't looked at in detail but you can put that",
    "start": "469810",
    "end": "475960"
  },
  {
    "text": "in the project file instead but there's an able there's warnings there's all kinds of different interactive aspects",
    "start": "475960",
    "end": "483940"
  },
  {
    "text": "of how this feature is going to be enabled because it's kind of different there are various ways in which null",
    "start": "483940",
    "end": "490540"
  },
  {
    "text": "ability is or nullable reference types are different to other new c-sharp features it's not really an on or off",
    "start": "490540",
    "end": "498070"
  },
  {
    "text": "thing yeah sorry the the little conversation that's going on here that the tag name in msbuild has changed kind",
    "start": "498070",
    "end": "505750"
  },
  {
    "text": "of recently so no one has it in muscle memory yet Ram I don't have it in any form of memory so there's an able",
    "start": "505750",
    "end": "512800"
  },
  {
    "text": "there's various other things and the reason this is weird is it depends on",
    "start": "512800",
    "end": "518380"
  },
  {
    "text": "what the code you're calling is going to be doing and whether that knows about null ability and it depends on you know",
    "start": "518380",
    "end": "525910"
  },
  {
    "text": "what's calling you and there are lots of different options because this is part",
    "start": "525910",
    "end": "530920"
  },
  {
    "text": "of an evolving language you know if you come along to my version talk tomorrow you'll hear a lot more about it's really hard to plan",
    "start": "530920",
    "end": "537820"
  },
  {
    "text": "for change and work out what counts as breaking on what doesn't and and how we should evolve things but that's been I",
    "start": "537820",
    "end": "544390"
  },
  {
    "text": "assume one of the tricky things in terms of design yeah one probably this feature is it so I said I turned the feature on",
    "start": "544390",
    "end": "550840"
  },
  {
    "text": "you now see I have a warning in my code I wouldn't otherwise have which says that this constructor is not",
    "start": "550840",
    "end": "557370"
  },
  {
    "text": "initializing all the none nullable fields of this class well up until very",
    "start": "557370",
    "end": "563140"
  },
  {
    "text": "recently there were known unknowable fields in this class because that doesn't didn't make any sense so I'm essentially making the language stricter",
    "start": "563140",
    "end": "569500"
  },
  {
    "text": "and when you do that you kind of have to give people a chance to ease into that so it's not just about evolved an",
    "start": "569500",
    "end": "575710"
  },
  {
    "text": "evolving language it's also about evolving source code and and getting to this on your own time rather than being",
    "start": "575710",
    "end": "581350"
  },
  {
    "text": "HIV saying okay by now from now on you're forced to do this so there's one big switch and once you turn it on",
    "start": "581350",
    "end": "586540"
  },
  {
    "text": "you're you're lost in a sea of warnings until you clean it all up and it really is a see I mean don't be fooled by the",
    "start": "586540",
    "end": "592450"
  },
  {
    "text": "fact that mothers turn this on for the one file and there's one warning I decided I made a mistake in turning it",
    "start": "592450",
    "end": "598990"
  },
  {
    "text": "on in all my no design projects other than the two I had already done this week and they were like a thousand or",
    "start": "598990",
    "end": "605230"
  },
  {
    "text": "two thousand warnings and that's just really you don't feel you're making any progress so I didn't then did a whole",
    "start": "605230",
    "end": "611290"
  },
  {
    "text": "project at a time which were still faced with a lot of warnings and it can be quite dispiriting so my experience of",
    "start": "611290",
    "end": "618510"
  },
  {
    "text": "these warnings is you're playing whack-a-mole with them so you fix a warning and that gives you two more",
    "start": "618510",
    "end": "623800"
  },
  {
    "text": "warnings let's try that so don't if you get that experience as well don't think you're doing anything",
    "start": "623800",
    "end": "629530"
  },
  {
    "text": "wrong okay so so we let's do the wacom yeah and so the the first half of the",
    "start": "629530",
    "end": "635680"
  },
  {
    "text": "future really is that when once you turn this on reference types become nun nullable you're no longer allowed or",
    "start": "635680",
    "end": "642070"
  },
  {
    "text": "supposed to have null in there and when you do we get a warning so oops and and",
    "start": "642070",
    "end": "648310"
  },
  {
    "text": "it's being a little sneaky because i'm not assigning notes or anything anywhere but now because i these strings here are",
    "start": "648310",
    "end": "654790"
  },
  {
    "text": "all reference types and so they're now not supposed to be not any longer and because i am so i mean i am initializing",
    "start": "654790",
    "end": "660460"
  },
  {
    "text": "two of them here so that's fine but the third one i'm leaving as null which is the default value that again",
    "start": "660460",
    "end": "665530"
  },
  {
    "text": "and so I get a complaint about that you should a sign you should initialize none knowable properties so let's initialize",
    "start": "665530",
    "end": "670990"
  },
  {
    "text": "the uncle property we were saying middle name how would you say it's equal to no and now we initialized it and now the",
    "start": "670990",
    "end": "677440"
  },
  {
    "text": "one it goes away but I get another one whack yeah that was one mole you can't assign null to it either what are we",
    "start": "677440",
    "end": "684760"
  },
  {
    "text": "gonna do now so so at this point you need to think and this is one of the scary bits about",
    "start": "684760",
    "end": "689980"
  },
  {
    "text": "knowable reference types is a feature that makes you think do not be scared of this but be ready for it yeah the point",
    "start": "689980",
    "end": "697900"
  },
  {
    "text": "is I don't want it to be none novel I want to be able to express that people don't have middle names and the compiler",
    "start": "697900",
    "end": "703930"
  },
  {
    "text": "cannot possibly know that yeah I you could write a rosin analyzer that says fix all my no ability warnings for",
    "start": "703930",
    "end": "711040"
  },
  {
    "text": "me however you see fit okay and goodness knows in this case it's feasible that a",
    "start": "711040",
    "end": "716260"
  },
  {
    "text": "smart analyzer could decide oh well you're not passing things in I will make",
    "start": "716260",
    "end": "722050"
  },
  {
    "text": "it comply with everything you're currently doing but that's kind of guesswork that really is thinking about",
    "start": "722050",
    "end": "728530"
  },
  {
    "text": "your domain in this case we want the middle name to maybe be null yeah oh but I wouldn't trust any tool that assumed",
    "start": "728530",
    "end": "735339"
  },
  {
    "text": "that for me so this is where the new syntax comes in this is where we are now allowing you to say explicitly this is",
    "start": "735339",
    "end": "740980"
  },
  {
    "text": "where you explicit about your intent and right actually you know middle names can be null so there's put a question mark",
    "start": "740980",
    "end": "746770"
  },
  {
    "text": "on the reference type and say this is nullable string okay and this is the new syntactically new thing here but oh yeah",
    "start": "746770",
    "end": "753390"
  },
  {
    "text": "this is not so this looks really familiar with if you've been asked what",
    "start": "753390",
    "end": "758530"
  },
  {
    "text": "syntax should be used for an honorable type a noble reference type you might well have guessed that right and you",
    "start": "758530",
    "end": "765220"
  },
  {
    "text": "might think that's fine that just means it's equivalent to nullable string not",
    "start": "765220",
    "end": "771190"
  },
  {
    "text": "at all okay this is a different kind of null ability and you need to think about types in a different kind of way and",
    "start": "771190",
    "end": "777820"
  },
  {
    "text": "that's one of the difficult things about the feature this is not a simple feature but it's a fantastic feature we chose",
    "start": "777820",
    "end": "784410"
  },
  {
    "text": "syntactically to use the analogy to nullable value types so question mark",
    "start": "784410",
    "end": "789880"
  },
  {
    "text": "means inaudible lack of question mark means not an oval but what that actually means one level down is different right",
    "start": "789880",
    "end": "795790"
  },
  {
    "text": "for value types they don't have value types don't already have a null in them so for them it you really get a",
    "start": "795790",
    "end": "802620"
  },
  {
    "text": "different type at runtime that has an extra boolean neck its struct it has an extra boolean next to the the nested",
    "start": "802620",
    "end": "807870"
  },
  {
    "text": "value but says whether it's null and on and we can't do that but we could do that here but then we'd be binary",
    "start": "807870",
    "end": "814410"
  },
  {
    "text": "breaking the whole world right so we probably know a good thing so we don't want to change what it looks like at",
    "start": "814410",
    "end": "819630"
  },
  {
    "text": "runtime so instead we have a compile time illusion like an erase type a thing that I was gonna map and say exactly",
    "start": "819630",
    "end": "826260"
  },
  {
    "text": "that thing I don't know if you were Java developers or have been Java developers in the past okay a few so you know how",
    "start": "826260",
    "end": "833280"
  },
  {
    "text": "Java generics aren't kind of real there's this whole type of Asia thing and you can't tell the difference at execution time do you know who was at",
    "start": "833280",
    "end": "839790"
  },
  {
    "text": "least partially responsible for that yeah so so none of all types being sort",
    "start": "839790",
    "end": "846780"
  },
  {
    "text": "of a compile time only thing not so surprising really and it's a little bit like we already have outs it's all about",
    "start": "846780",
    "end": "852330"
  },
  {
    "text": "they're all about the blame game we already have something like that with value tuples",
    "start": "852330",
    "end": "857970"
  },
  {
    "text": "so c-sharp tuples from c sharp 7 where you can give them different element",
    "start": "857970",
    "end": "863700"
  },
  {
    "text": "names and things but that only exists at compile time as well and the compiler can help you with it but you need to",
    "start": "863700",
    "end": "868950"
  },
  {
    "text": "understand the difference between what's going on at compile time and what's going on execution time you'll you",
    "start": "868950",
    "end": "876060"
  },
  {
    "text": "probably ought to be more familiar with that now than five years ago right and",
    "start": "876060",
    "end": "881580"
  },
  {
    "text": "we could have made other choices if we were starting from scratch with if we were building c-sharp today but here we",
    "start": "881580",
    "end": "887940"
  },
  {
    "text": "feel like for this feature to be useful you know there are some choices that we",
    "start": "887940",
    "end": "893310"
  },
  {
    "text": "have to make design wise and and one of the choices is that it has to be it has",
    "start": "893310",
    "end": "898800"
  },
  {
    "text": "to be binary compatible and has to be runtime compatible with whatever code you had before it has to be that you can",
    "start": "898800",
    "end": "905430"
  },
  {
    "text": "just turn on the feature and then you can add null ability annotations in the right places and get the what's the",
    "start": "905430",
    "end": "912630"
  },
  {
    "text": "benefit you say well that's that's sort of what we're getting to now if we go back to the program now the benefit is",
    "start": "912630",
    "end": "918060"
  },
  {
    "text": "that you will get all the pile time calling out of where you probably have a",
    "start": "918060",
    "end": "924480"
  },
  {
    "text": "have a null bug right those places that would lead to those unpredictable null reference exceptions before you will",
    "start": "924480",
    "end": "930819"
  },
  {
    "text": "get them called out in your code right so now get a warning here where I'm dereferencing something that might be",
    "start": "930819",
    "end": "936189"
  },
  {
    "text": "null it's because I marked the middle name as nullable and and because the compiler doesn't have reason to believe",
    "start": "936189",
    "end": "943629"
  },
  {
    "text": "that it's not null right sometimes you'll get a warning where you didn't have any bugs before it's just you",
    "start": "943629",
    "end": "950499"
  },
  {
    "text": "couldn't really the compiler can't tell that you didn't have any bugs right or your code might be correct but it's",
    "start": "950499",
    "end": "955509"
  },
  {
    "text": "probably shady right yeah so and and and maybe you know error-prone and you know",
    "start": "955509",
    "end": "961629"
  },
  {
    "text": "in the future refactoring so it's good - it's good to heat these warnings and so it is telling me indeed that you're",
    "start": "961629",
    "end": "966910"
  },
  {
    "text": "possibly dereferencing in our reference so what can you do about that well we",
    "start": "966910",
    "end": "972239"
  },
  {
    "text": "could check whether middle name is null and you not printed at all we could say",
    "start": "972239",
    "end": "980259"
  },
  {
    "text": "can just check if pede middle name is null do something else you know write",
    "start": "980259",
    "end": "988689"
  },
  {
    "text": "your shorter version of the right line that just doesn't talk about middle",
    "start": "988689",
    "end": "994179"
  },
  {
    "text": "names like that oh the desire to run and put braces in",
    "start": "994179",
    "end": "1001199"
  },
  {
    "text": "that I'm sorry it's fine so that doesn't take the warning away but if you put on else here",
    "start": "1001199",
    "end": "1008659"
  },
  {
    "text": "then the warning goes away okay so that so the idea being that the compiler now",
    "start": "1008659",
    "end": "1015149"
  },
  {
    "text": "has reason to believe that middle name is not null here because it's in an else",
    "start": "1015149",
    "end": "1020399"
  },
  {
    "text": "branch of something that checked whether it was no so so that's another sort of",
    "start": "1020399",
    "end": "1025558"
  },
  {
    "text": "concession to c-sharp being an existing language there are ways that you can",
    "start": "1025559",
    "end": "1030870"
  },
  {
    "text": "check for null that are sort of correct by construction using pattern matching for instance which we can do in a little bit if you want yep but that's not how",
    "start": "1030870",
    "end": "1037949"
  },
  {
    "text": "people usually check for null they'd ask up here is this variable null and then or is this field null and then a little",
    "start": "1037949",
    "end": "1043350"
  },
  {
    "text": "later they use the field assuming it wasn't since the test right and that's exactly what's going on here so so in",
    "start": "1043350",
    "end": "1050039"
  },
  {
    "text": "order for the compiler to to appreciate and recognize that it has to do a flow",
    "start": "1050039",
    "end": "1056279"
  },
  {
    "text": "analysis from oh you checked up here we use the result of that check down here to give you a pass on okay we",
    "start": "1056279",
    "end": "1063350"
  },
  {
    "text": "we get what you're doing and it can be a little more subtle than you might think because for one thing I tend to think of",
    "start": "1063350",
    "end": "1070789"
  },
  {
    "text": "this as a little bit like definite assignment so I can't write int I and then console dot write line I mm-hmm",
    "start": "1070789",
    "end": "1078590"
  },
  {
    "text": "okay that's that's invalid because it's not definitely assigned and the the compiler already does flow analysis for",
    "start": "1078590",
    "end": "1084799"
  },
  {
    "text": "local variables saying okay I can see that you know maybe it branched and each branch assigning something so then it's",
    "start": "1084799",
    "end": "1090559"
  },
  {
    "text": "definitely assigned but what's going on here is much more than that partly",
    "start": "1090559",
    "end": "1095630"
  },
  {
    "text": "because it's not just for variables okay it's not that we're checking whether P is null and remembering that that",
    "start": "1095630",
    "end": "1101510"
  },
  {
    "text": "variable is null we're saying when we invoked a method okay it's a property but effectively we're calling a method",
    "start": "1101510",
    "end": "1108020"
  },
  {
    "text": "called get underscore middle name that returned not null we'll assume it stays",
    "start": "1108020",
    "end": "1113480"
  },
  {
    "text": "that way because that's the pragmatic way of going and it can be really hard to",
    "start": "1113480",
    "end": "1118490"
  },
  {
    "text": "reason about because it's not even guaranteed from the type you can you could have a non nullable thing that",
    "start": "1118490",
    "end": "1125780"
  },
  {
    "text": "you're getting from you get from some method and the compiler may not be sure",
    "start": "1125780",
    "end": "1132559"
  },
  {
    "text": "about that for whatever reason more weirdly still you can say I'm gonna have",
    "start": "1132559",
    "end": "1138380"
  },
  {
    "text": "a nullable variable called X and I'll assign it a non null value and do you",
    "start": "1138380",
    "end": "1150440"
  },
  {
    "text": "expect when I complete this that there should be a warning okay I'll give it away I originally expected it to be a",
    "start": "1150440",
    "end": "1157780"
  },
  {
    "text": "warning because I'm dotting into something that is not able but the compilers worked out up but the value",
    "start": "1157780",
    "end": "1164179"
  },
  {
    "text": "you're assigning is non-noble so it's not just the type of the variable and",
    "start": "1164179",
    "end": "1170090"
  },
  {
    "text": "it's not just variables and we need to get used to it may be hard to predict",
    "start": "1170090",
    "end": "1176179"
  },
  {
    "text": "for a while when it's going to warn us I've certainly found that and obviously",
    "start": "1176179",
    "end": "1181610"
  },
  {
    "text": "things will be changing at the moment while we're still in preview but yeah",
    "start": "1181610",
    "end": "1186679"
  },
  {
    "text": "but this I think this is pretty solid it's going to be like this and again here's this so it's if we had just",
    "start": "1186679",
    "end": "1192110"
  },
  {
    "text": "checked in all ability of a local variable or tracked that yep that would be one thing and that's is safe but this is actually a little",
    "start": "1192110",
    "end": "1198620"
  },
  {
    "text": "unsafe that the compiler that you do that it kind of shows that there are holes in our analysis it doesn't guarantee you that you won't get your no",
    "start": "1198620",
    "end": "1204890"
  },
  {
    "text": "reference exceptions it just gives you a pretty high probability because actually you know maybe me calling first name",
    "start": "1204890",
    "end": "1212960"
  },
  {
    "text": "here after the test actually mutated the object and turned it into a nullable maiden middle name no oh maybe it's just",
    "start": "1212960",
    "end": "1219740"
  },
  {
    "text": "so what when I give c-sharp eight demos on my own I almost entirely show caller cases where we can break the compiler",
    "start": "1219740",
    "end": "1226100"
  },
  {
    "text": "because that's what I kind of like and I tend to give a property that if date",
    "start": "1226100",
    "end": "1231740"
  },
  {
    "text": "time UTC now dot seconds less than 30 return null otherwise return greater",
    "start": "1231740",
    "end": "1236870"
  },
  {
    "text": "than null sorry return some perfects and then you know sometimes it'll see a non",
    "start": "1236870",
    "end": "1242390"
  },
  {
    "text": "null value and then go okay I'm fine and then gets a null one and go bang",
    "start": "1242390",
    "end": "1247580"
  },
  {
    "text": "sometimes it'll get a null thing and then not even ask the second time when it would have got none no but basically",
    "start": "1247580",
    "end": "1253700"
  },
  {
    "text": "we assume or the c-sharp compiler is assuming that people are writing sensible code yes unless not always",
    "start": "1253700",
    "end": "1260870"
  },
  {
    "text": "couldn't be that often at youth yeah so yeah so the I so the idea here so this",
    "start": "1260870",
    "end": "1266870"
  },
  {
    "text": "is just to show that there's lots and lots of code out there already that is",
    "start": "1266870",
    "end": "1273230"
  },
  {
    "text": "null safe by you know checking a property and then using that property alright and that's I mean that's a super",
    "start": "1273230",
    "end": "1280610"
  },
  {
    "text": "common pattern and if we were to warn on that because ooh somebody might another thread might or you know some superiors",
    "start": "1280610",
    "end": "1287240"
  },
  {
    "text": "ill implement a property might have changed and we're not doing you a favor we're calling out all kinds of false",
    "start": "1287240",
    "end": "1293210"
  },
  {
    "text": "positives in a sense that technically they might be unsafe in corner cases but",
    "start": "1293210",
    "end": "1298250"
  },
  {
    "text": "in practice they're not so so the feature is very much shaped by what's already there what's already common and",
    "start": "1298250",
    "end": "1303740"
  },
  {
    "text": "trying to give the right trade-off between having lots of safety against",
    "start": "1303740",
    "end": "1309320"
  },
  {
    "text": "nulls but at the same time recognizing most of you and all safe code as s null",
    "start": "1309320",
    "end": "1314480"
  },
  {
    "text": "safe yeah it's a different kind the thing I think that it's important to understand is this is a different kind",
    "start": "1314480",
    "end": "1320570"
  },
  {
    "text": "of type safety it's not sort of I guarantee I will not let bad stuff",
    "start": "1320570",
    "end": "1325700"
  },
  {
    "text": "happen it's kind of looks good to me and that takes a little while to get into that new mental model",
    "start": "1325700",
    "end": "1332460"
  },
  {
    "text": "and hopefully we'll talk a bit later on about new mental models that the c-sharp team want us to all learn it does",
    "start": "1332460",
    "end": "1338519"
  },
  {
    "text": "straight me remember when we talked in Copenhagen and talked for like three hours or something yes we only have one",
    "start": "1338519",
    "end": "1343649"
  },
  {
    "text": "hour and he'll and it's yes and it's 22 minutes passed already and we weren't going to spend long and though we should probably move on that's what I yeah I've",
    "start": "1343649",
    "end": "1350519"
  },
  {
    "text": "been trying to lead up to it for a couple of minutes but think so we do",
    "start": "1350519",
    "end": "1357779"
  },
  {
    "text": "have a nice little conditional in here right and so that's a good I think that's a good opportunity for talking",
    "start": "1357779",
    "end": "1363480"
  },
  {
    "text": "about patterns and switch expressions let's yeah okay so another another",
    "start": "1363480",
    "end": "1370470"
  },
  {
    "text": "conditional construct in c-sharp is the switch statement it's probably half a",
    "start": "1370470",
    "end": "1376470"
  },
  {
    "text": "century old syntactically it looks aerated from language to language java",
    "start": "1376470",
    "end": "1382110"
  },
  {
    "text": "copied it from c++ perpetuated it from seed you ever copied it from c++ we",
    "start": "1382110",
    "end": "1388110"
  },
  {
    "text": "copied it from c++ and I was by the",
    "start": "1388110",
    "end": "1395549"
  },
  {
    "text": "diagram yesterday that showed c-sharp coming from Java C++ and Pascal was it I",
    "start": "1395549",
    "end": "1400889"
  },
  {
    "text": "remember the the Delphi the Delfy I remember the document that sort of",
    "start": "1400889",
    "end": "1406559"
  },
  {
    "text": "introduced eShop before there was a c-sharp one spec that said that c-sharp was the product of VB and C++ never",
    "start": "1406559",
    "end": "1413580"
  },
  {
    "text": "mentioned Java in the entire thing it's like everyone in the industry going you're doing Java right you're really",
    "start": "1413580",
    "end": "1419309"
  },
  {
    "text": "doing job anyway so we could do instead",
    "start": "1419309",
    "end": "1425730"
  },
  {
    "text": "of this if else we could do it as a switch expression if we wanted or a switch statement if you wanted to yeah but it's also a good opportunity to show",
    "start": "1425730",
    "end": "1431669"
  },
  {
    "text": "the switch expressions which is say syntactic syntactically slightly less heavyweight construct which is you know",
    "start": "1431669",
    "end": "1439559"
  },
  {
    "text": "you take an expression you switch on it you have various other expressions as the possible output depending on weather",
    "start": "1439559",
    "end": "1445169"
  },
  {
    "text": "patterns match and the one that wins besides what's the result of the whole expression so that's the sort of",
    "start": "1445169",
    "end": "1451080"
  },
  {
    "text": "language way of saying it from the human way of saying it would you like to feel smarter yeah would you like to feel like",
    "start": "1451080",
    "end": "1458520"
  },
  {
    "text": "F sharp and function programmers yeah switch xpressions are a way to get that I found that with",
    "start": "1458520",
    "end": "1464909"
  },
  {
    "text": "expression body members in c-sharp six it's like I can now feel like I'm five IQ points smarter and switch expressions",
    "start": "1464909",
    "end": "1471700"
  },
  {
    "text": "just do that for me again right so we could do something like string output equals we could switch well to if we",
    "start": "1471700",
    "end": "1478119"
  },
  {
    "text": "want an easy incrementally into this we could switch on P dot middle name right and week so we could say P dot middle",
    "start": "1478119",
    "end": "1484599"
  },
  {
    "text": "name switch well it's more something",
    "start": "1484599",
    "end": "1492029"
  },
  {
    "text": "switch and then give a couple of cases here and the way you give cases in",
    "start": "1492029",
    "end": "1499378"
  },
  {
    "text": "preview the last time this happened to",
    "start": "1501929",
    "end": "1507339"
  },
  {
    "text": "me I actually had to kill and restart visual studio I am so sorry guys so well",
    "start": "1507339",
    "end": "1516580"
  },
  {
    "text": "well that's going we can describe I can describe what's going forever will be so in a normal switch statement it's switch",
    "start": "1516580",
    "end": "1524109"
  },
  {
    "text": "and then the value and then open brace and a load of case labels so you have case foo and then colon and maybe some",
    "start": "1524109",
    "end": "1531489"
  },
  {
    "text": "code or maybe multiple case labels will get my feature requests term ads in a minute and within each case label there",
    "start": "1531489",
    "end": "1540219"
  },
  {
    "text": "are a bunch of statements and then usually break unless you're returning from the method there the and you have a",
    "start": "1540219",
    "end": "1549940"
  },
  {
    "text": "default potentially for if you don't what you want to do if none of them match and before c-sharp six do I mean",
    "start": "1549940",
    "end": "1558309"
  },
  {
    "text": "six or seven when did we introduce person matching when did you introduce about seven seven okay so before seven",
    "start": "1558309",
    "end": "1564309"
  },
  {
    "text": "the order didn't matter in most cases because only one case could be matched",
    "start": "1564309",
    "end": "1570460"
  },
  {
    "text": "anyway so c-sharp seven-inch use pattern matching in switch statements as well as",
    "start": "1570460",
    "end": "1575529"
  },
  {
    "text": "in is expressions and so you could have",
    "start": "1575529",
    "end": "1580570"
  },
  {
    "text": "patterns so you could say yeah I will match an object o when it's an integer n",
    "start": "1580570",
    "end": "1586929"
  },
  {
    "text": "and introduce a guard clause saying when n is greater than 5 and good stuff like",
    "start": "1586929",
    "end": "1592629"
  },
  {
    "text": "that so we we ended up having a pattern as the case label instead of just a constant and every constant is a pattern in",
    "start": "1592629",
    "end": "1600920"
  },
  {
    "text": "itself so now having all those cases and things whoa",
    "start": "1600920",
    "end": "1606440"
  },
  {
    "text": "ended up being getting worse and worse we may need to plug in my laptop after all which doesn't have the code on it",
    "start": "1606440",
    "end": "1612710"
  },
  {
    "text": "has different than okayed we may need to is someone taking a screenshot via so",
    "start": "1612710",
    "end": "1624020"
  },
  {
    "text": "what we're gonna have instead we don't want to have case label zero every everything in a switch expression is",
    "start": "1624020",
    "end": "1630370"
  },
  {
    "text": "going to be a case so why would we bother having a key word saying it and",
    "start": "1630370",
    "end": "1635900"
  },
  {
    "text": "instead of being this weird block that contains other things that don't have to",
    "start": "1635900",
    "end": "1641300"
  },
  {
    "text": "have their own blocks which introduces unfortunate scoping rules a switch",
    "start": "1641300",
    "end": "1647060"
  },
  {
    "text": "expression is expression switch and then a list of cases a comma separated list",
    "start": "1647060",
    "end": "1654830"
  },
  {
    "text": "of cases so usually when you're converting a switch statement to a switch expression you switch round the",
    "start": "1654830",
    "end": "1662200"
  },
  {
    "text": "switch keyword and the value and you can get rid of any brackets around the value",
    "start": "1662200",
    "end": "1667340"
  },
  {
    "text": "and then remove case from everywhere and instead of case then the case thing",
    "start": "1667340",
    "end": "1674270"
  },
  {
    "text": "itself : instead of that : we have a fat arrow a goes to because it's the idea that you",
    "start": "1674270",
    "end": "1681020"
  },
  {
    "text": "know this input produces this output this input produces that's output and there comma-separated instead of",
    "start": "1681020",
    "end": "1687830"
  },
  {
    "text": "semicolon so you usually replace every break with a comma you can get rid of if",
    "start": "1687830",
    "end": "1693380"
  },
  {
    "text": "you if you were returning you know my most common thing is I've got a method that is trying to get a value of",
    "start": "1693380",
    "end": "1700280"
  },
  {
    "text": "something and it's going to return in every case and you can get rid of the return statements just as you could in lambda expressions and the final thing",
    "start": "1700280",
    "end": "1709070"
  },
  {
    "text": "is that there is no default keyword for switch expressions instead we've already got a pattern that matches everything",
    "start": "1709070",
    "end": "1714350"
  },
  {
    "text": "and by the time we're there usually we don't care about what the value is so we",
    "start": "1714350",
    "end": "1719480"
  },
  {
    "text": "just use an underscore which is a special sort of I don't know whether it counts as a contextual keyword crew",
    "start": "1719480",
    "end": "1726830"
  },
  {
    "text": "I got my Curly's but it just means we we discovered what I was in there okay so",
    "start": "1726830",
    "end": "1734600"
  },
  {
    "text": "no fat error so I'm really glad that you joined this talk okay now I can show",
    "start": "1734600",
    "end": "1741620"
  },
  {
    "text": "what John just carefully took a lot of time right to explain so now I can then",
    "start": "1741620",
    "end": "1748670"
  },
  {
    "text": "return a given a given string let me if I have another paste area somewhere it",
    "start": "1748670",
    "end": "1754370"
  },
  {
    "text": "probably it won't go wrong my friend okay if I paste up here and I can steal",
    "start": "1754370",
    "end": "1759920"
  },
  {
    "text": "that string out the string out of there and hopefully paste it in there we go no",
    "start": "1759920",
    "end": "1773690"
  },
  {
    "text": "oh no I don't think we're showing this which expression okay",
    "start": "1773690",
    "end": "1780700"
  },
  {
    "text": "what's that oh that's okay we'll",
    "start": "1780700",
    "end": "1789890"
  },
  {
    "text": "probably move on yeah but the pattern match yeah oh but the path match it",
    "start": "1789890",
    "end": "1795140"
  },
  {
    "text": "worked the other day I might enter it I'm and the internal preview I shouldn't have I should find type it instead of",
    "start": "1795140",
    "end": "1801530"
  },
  {
    "text": "you is it more likely to work maybe I don't you just want that to work I'm",
    "start": "1801530",
    "end": "1806920"
  },
  {
    "text": "yeah I I don't have the latest fiasco",
    "start": "1806920",
    "end": "1813170"
  },
  {
    "text": "yeah nice though okay we're gonna give up on on showing now what's going to",
    "start": "1813170",
    "end": "1819350"
  },
  {
    "text": "happen is I'm gonna get a million yep great so I can say that here's one I",
    "start": "1819350",
    "end": "1825500"
  },
  {
    "text": "prepared earlier as it were if you go to the notice home github repository which is predictably github.com slash no two",
    "start": "1825500",
    "end": "1831950"
  },
  {
    "text": "time slash no two time and look at the commits from the last couple of weeks",
    "start": "1831950",
    "end": "1837430"
  },
  {
    "text": "one of them is switch expressions and I think I've helpfully said yo you switch",
    "start": "1837430",
    "end": "1842630"
  },
  {
    "text": "expressions from C sharp ape and the good thing about that is not only do you get to see it without crashing anything",
    "start": "1842630",
    "end": "1848960"
  },
  {
    "text": "but you also get to see that this is actually genuinely useful and I've got a bunch of commits for notice I'm",
    "start": "1848960",
    "end": "1856250"
  },
  {
    "text": "implementing nullable reference types you may notice that CI is broken I'm at the moment on a player because",
    "start": "1856250",
    "end": "1862660"
  },
  {
    "text": "that there only has preview one a Visual Studio 2019 and I now need preview - I'm",
    "start": "1862660",
    "end": "1868539"
  },
  {
    "text": "expecting that sort of sort itself out in a week or so but Travis is working so yay but you get to see all the good",
    "start": "1868539",
    "end": "1876580"
  },
  {
    "text": "things about it you also get to see that the commits that's currently on there that I'll be pushing on the train this",
    "start": "1876580",
    "end": "1882190"
  },
  {
    "text": "afternoon is docker FEX doesn't like switch expressions at the moment and just it looks like it stops parsing when",
    "start": "1882190",
    "end": "1889929"
  },
  {
    "text": "it finds one so I've got a commit that just moves a method that's composed of a switch expression from the top of a file",
    "start": "1889929",
    "end": "1895780"
  },
  {
    "text": "to the bottom of a file so that all the public members between I can actually see at least gets most of the way this",
    "start": "1895780",
    "end": "1901090"
  },
  {
    "text": "is yeah this is a very temporary hack it will also mention the the feature",
    "start": "1901090",
    "end": "1906400"
  },
  {
    "text": "request that I have from ads so one of the nice things you can do in switch statements is you can say case 1 and",
    "start": "1906400",
    "end": "1914110"
  },
  {
    "text": "case 2 and case 5 all go to the same thing now if you have a list of patterns",
    "start": "1914110",
    "end": "1922900"
  },
  {
    "text": "you can do one goes to compute value two goes to compute value 5 goes to compute",
    "start": "1922900",
    "end": "1929049"
  },
  {
    "text": "value but there's no current way or at least there wasn't last time I asked about it to say gerrae I want a pattern",
    "start": "1929049",
    "end": "1935830"
  },
  {
    "text": "that matches any of these things there is a github feature request for it that",
    "start": "1935830",
    "end": "1942610"
  },
  {
    "text": "has had some traction what's the current thinking are we likely to get it in 8 doing there why turi having multiple",
    "start": "1942610",
    "end": "1949330"
  },
  {
    "text": "patterns that are sort of odd together so that I can say if the monkey olive is",
    "start": "1949330",
    "end": "1954429"
  },
  {
    "text": "them is this this or this then the answer is that is not currently going in okay I think there's some debate as to",
    "start": "1954429",
    "end": "1960429"
  },
  {
    "text": "whether it's a good idea so that's a promise for 8.1 yeah",
    "start": "1960429",
    "end": "1965340"
  },
  {
    "text": "so now I'm gonna do it again but I'm going to do it with mt no okay yes yes",
    "start": "1965880",
    "end": "1973360"
  },
  {
    "text": "who came back no nope Oh oh my god",
    "start": "1973360",
    "end": "1980500"
  },
  {
    "text": "maybe it's ya cuz it oh yeah let's let's just okay we will all run from here",
    "start": "1980500",
    "end": "1986020"
  },
  {
    "text": "we're not gonna do the with that part we can move on to code that won't compile ironically next in my little agenda here",
    "start": "1986020",
    "end": "1993280"
  },
  {
    "text": "is target Titan you yes how old confident are we that when writing code",
    "start": "1993280",
    "end": "2000090"
  },
  {
    "text": "that we don't even expect to compile it won't just crash Visual Studio well that could be surprisingly that could be that",
    "start": "2000090",
    "end": "2006210"
  },
  {
    "text": "could be much better yep so expect for the red squigglies in this bit are intentional yep Oh could be yeah",
    "start": "2006210",
    "end": "2019380"
  },
  {
    "text": "okay alright so one thing that is you",
    "start": "2019380",
    "end": "2026640"
  },
  {
    "text": "know that that's annoying that's repetition is I'm having in my array here I'm having to say new person all",
    "start": "2026640",
    "end": "2032730"
  },
  {
    "text": "the time person that's a short type name but sometimes you have generic types or things that are you know it's you and",
    "start": "2032730",
    "end": "2039060"
  },
  {
    "text": "you just said you know you're declaring a field of type I dictionary of",
    "start": "2039060",
    "end": "2044490"
  },
  {
    "text": "something to something else and now you have two equals dictionary oh now equals new blah that whole type once again so a",
    "start": "2044490",
    "end": "2052860"
  },
  {
    "text": "nice little feature that's mostly just the convenience is allowing you and I'm really scared about typing anything in",
    "start": "2052860",
    "end": "2059340"
  },
  {
    "text": "here but allowing you when the context is given which is isn't right now but it could be allowing you in the context is",
    "start": "2059340",
    "end": "2066720"
  },
  {
    "text": "given to to simply say a new without the type okay just give the constructor",
    "start": "2066720",
    "end": "2072179"
  },
  {
    "text": "argument and then whatever that is assigned to with the context the type target if you will gets to decide what",
    "start": "2072179",
    "end": "2078840"
  },
  {
    "text": "your newing up so you could pass that to a method that expects parameter of type person or you know assign it to a field",
    "start": "2078840",
    "end": "2084990"
  },
  {
    "text": "that has that type so that's something that's which nerd perspective I find this kind of thing quite scary because",
    "start": "2084990",
    "end": "2091440"
  },
  {
    "text": "this is introducing another kind of expression that has no type so we already have a few of these like the",
    "start": "2091440",
    "end": "2097840"
  },
  {
    "text": "little does not have a type it's sort of well do different things depending on how you're trying to use it and lambda",
    "start": "2097840",
    "end": "2103450"
  },
  {
    "text": "expressions themselves don't have a type if you have a lambda expression that",
    "start": "2103450",
    "end": "2108670"
  },
  {
    "text": "takes no parameters and and says console",
    "start": "2108670",
    "end": "2113950"
  },
  {
    "text": "dot write line whatever then you can assign that to action but you could also assign it to any other delegate type",
    "start": "2113950",
    "end": "2119740"
  },
  {
    "text": "with no parameters and no return value and this is another kind of expression",
    "start": "2119740",
    "end": "2125890"
  },
  {
    "text": "as type plus expression and that raises interesting questions when it comes to",
    "start": "2125890",
    "end": "2131920"
  },
  {
    "text": "type inference and overlay resolution it does but most of those interesting",
    "start": "2131920",
    "end": "2137740"
  },
  {
    "text": "questions we've already had to deal with because the write another example if you show so we decided you know why we can do this and not significantly complicate",
    "start": "2137740",
    "end": "2144970"
  },
  {
    "text": "the language and in many cases it's completely given what you're doing up it's a nice convenient so so it's going it's going in hopefully in the next",
    "start": "2144970",
    "end": "2153070"
  },
  {
    "text": "preview and so you you demonstrated sort of the how it's mildly useful but the",
    "start": "2153070",
    "end": "2160810"
  },
  {
    "text": "the really nice example is if you you sort of want static var people equals",
    "start": "2160810",
    "end": "2170230"
  },
  {
    "text": "new list of person stuff and this is not",
    "start": "2170230",
    "end": "2176230"
  },
  {
    "text": "that but it's a shorter side it's sort of if we just instead of that just do",
    "start": "2176230",
    "end": "2183900"
  },
  {
    "text": "that and Oh will I be able to do this without any round brackets or will I need the rail right yeah it's so you can",
    "start": "2183900",
    "end": "2190540"
  },
  {
    "text": "you can do with that okay so if you have it an object initializer instead and then oh and presumably it'll infer that",
    "start": "2190540",
    "end": "2197260"
  },
  {
    "text": "well I can say yes to all of them is that running right now yeah so you still",
    "start": "2197260",
    "end": "2205120"
  },
  {
    "text": "only have to put put it in one place now interestingly that works if I definitely",
    "start": "2205120",
    "end": "2211330"
  },
  {
    "text": "want the same concrete type yeah the actual type on that site if it's limited",
    "start": "2211330",
    "end": "2217570"
  },
  {
    "text": "in the same way that measure is that var is just in the opposite direction right var can give you the interface that the",
    "start": "2217570",
    "end": "2224290"
  },
  {
    "text": "concrete type implements or something like that I give you the most specific type it can and presumably there's no idea of well the default in",
    "start": "2224290",
    "end": "2231160"
  },
  {
    "text": "commentation type and not trainer mixed features default implementation type of I lists of T is list of T's so if I",
    "start": "2231160",
    "end": "2238120"
  },
  {
    "text": "declare it okay that's fine because that would yeah that now we would get complicated right this is this",
    "start": "2238120",
    "end": "2244930"
  },
  {
    "text": "is right now it's just a shorthand and that's that's how it's gonna stay okay but I'm going to erase this because it",
    "start": "2244930",
    "end": "2251380"
  },
  {
    "text": "doesn't compile and hopefully we will get to actually writing something that does compile and doesn't fresh so time",
    "start": "2251380",
    "end": "2260680"
  },
  {
    "text": "to talk about anything yeah so oh oh we're gonna do indexes and ranges that",
    "start": "2260680",
    "end": "2266860"
  },
  {
    "text": "we forgot about those yeah that's why it crashed okay so yeah that's right so we",
    "start": "2266860",
    "end": "2272590"
  },
  {
    "text": "have we have an array up here and so that's a good example to demonstrate",
    "start": "2272590",
    "end": "2278850"
  },
  {
    "text": "features that are on a kill line 25 before bad stuff happens yes line 25 is",
    "start": "2278850",
    "end": "2284560"
  },
  {
    "text": "still there isn't it so line of doom hopefully killing it isn't right what",
    "start": "2284560",
    "end": "2291850"
  },
  {
    "text": "causes the problem so we talked about various ways that we could improve",
    "start": "2291850",
    "end": "2297420"
  },
  {
    "text": "things working with indexed things right it's sort of vaguely inspired by the the",
    "start": "2297420",
    "end": "2304710"
  },
  {
    "text": "arrival of span into the language how many of you have used or at least looked at span of T which is yeah which you",
    "start": "2304710",
    "end": "2311920"
  },
  {
    "text": "know you're gonna want to know more it's it's really it's gonna be important I",
    "start": "2311920",
    "end": "2317200"
  },
  {
    "text": "think maybe it might not be for everyone but it's essentially an the idea of being able to represent a chunk of",
    "start": "2317200",
    "end": "2324190"
  },
  {
    "text": "memory without sort of representing the whole chunk of the memory right so for",
    "start": "2324190",
    "end": "2330940"
  },
  {
    "text": "instance it can be a window onto an array but you can index it and manipulate it through the span yeah so",
    "start": "2330940",
    "end": "2337330"
  },
  {
    "text": "an abstraction over I can get some stuff and I can take a slice of that span yeah",
    "start": "2337330",
    "end": "2343540"
  },
  {
    "text": "and yeah good stuff so but there are other things as well and you know a rays",
    "start": "2343540",
    "end": "2349600"
  },
  {
    "text": "are a good example of it but but there are ways in which it's a little annoying",
    "start": "2349600",
    "end": "2355660"
  },
  {
    "text": "to work with an array for instance if I let's say I wanted to I want to display the last person in the array",
    "start": "2355660",
    "end": "2364790"
  },
  {
    "text": "okay so we say ray no people index now I",
    "start": "2364790",
    "end": "2372020"
  },
  {
    "text": "have to what do I do I have to say people dot and it's an array so its length there are length I have to",
    "start": "2372020",
    "end": "2378770"
  },
  {
    "text": "remember what the thing and well I got intellisense mine is one okay um and",
    "start": "2378770",
    "end": "2383930"
  },
  {
    "text": "sure I can do that and I mentioned people twice if it was a result of some computation I would have to grab it into",
    "start": "2383930",
    "end": "2390320"
  },
  {
    "text": "a local variable so I can mention it twice and yep you know and you could use dot last yeah we could just link if I",
    "start": "2390320",
    "end": "2396500"
  },
  {
    "text": "the whole thing sure but it's yeah that only works for last they won't work so what if I wanted there the second to",
    "start": "2396500",
    "end": "2402350"
  },
  {
    "text": "last no sorry so so we haven't you you can sort of call it a shorthand that you",
    "start": "2402350",
    "end": "2408410"
  },
  {
    "text": "can you can get you can ask from the end instead so I can get number one from the end gives me exactly what we saw before",
    "start": "2408410",
    "end": "2414650"
  },
  {
    "text": "so that's essentially an index that means length minus this number and when",
    "start": "2414650",
    "end": "2422570"
  },
  {
    "text": "you say it's essentially an index the type of that expression is index it is in fact a new type called index so we",
    "start": "2422570",
    "end": "2429320"
  },
  {
    "text": "could say index hat one here index I",
    "start": "2429320",
    "end": "2438580"
  },
  {
    "text": "equals that and this is a new type in dotnet core 3.0 but presumably there'll",
    "start": "2438580",
    "end": "2444320"
  },
  {
    "text": "be a new get package so that if you're using all the versions of.net you could bring in the nougat package in the",
    "start": "2444320",
    "end": "2450860"
  },
  {
    "text": "compiler will just say oh yeah I know about that type I'm sure there will be such a such a if we don't put one out",
    "start": "2450860",
    "end": "2456740"
  },
  {
    "text": "it'll be out in five seconds anyway yeah you will so you know so it's a first class thing",
    "start": "2456740",
    "end": "2464870"
  },
  {
    "text": "and index that knows whether it's starting from the beginning or from the end so you can compute with the indexes",
    "start": "2464870",
    "end": "2469910"
  },
  {
    "text": "and then apply them later if you want to that's not always what you want but you know sometimes you do what's more is that you you can you can",
    "start": "2469910",
    "end": "2479270"
  },
  {
    "text": "also express ranges and so I can for instance say that I want to go from the",
    "start": "2479270",
    "end": "2486680"
  },
  {
    "text": "the second element to the second-to-last element in them with a range expression",
    "start": "2486680",
    "end": "2494090"
  },
  {
    "text": "like this okay so this is really a range that also has",
    "start": "2494090",
    "end": "2501410"
  },
  {
    "text": "its own type I can say range are equals this and arranged is two indexes it's",
    "start": "2501410",
    "end": "2508250"
  },
  {
    "text": "one for the first element of the range and one for just beyond the last element",
    "start": "2508250",
    "end": "2514580"
  },
  {
    "text": "of the so inclusive lower bound exclusive upper bound if you want because in those ways the way it means it's slightly confusing because if you",
    "start": "2514580",
    "end": "2521810"
  },
  {
    "text": "take people hat one that gets you the last one",
    "start": "2521810",
    "end": "2527150"
  },
  {
    "text": "whereas people one dot hat one doesn't include the last one so you need to",
    "start": "2527150",
    "end": "2533000"
  },
  {
    "text": "remember that it's exclusive which most things already are you know if you're using substring for example substring 0",
    "start": "2533000",
    "end": "2538670"
  },
  {
    "text": "comma 5 doesn't give you that character with index 5 it gives you the first five",
    "start": "2538670",
    "end": "2545000"
  },
  {
    "text": "characters so it's yeah we are trying to be consistent with what's already there but it is a little confusing that it's",
    "start": "2545000",
    "end": "2552560"
  },
  {
    "text": "exclusive at the end it it does make for very simple math though yeah so it's actually this is just this is the way",
    "start": "2552560",
    "end": "2558680"
  },
  {
    "text": "you slice off one at either end so we get the three middle people and if we if we if we run that do I do I just want to",
    "start": "2558680",
    "end": "2568370"
  },
  {
    "text": "see if there's anything dangerous in here you know if we run right we we don't get John and we don't get tests",
    "start": "2568370",
    "end": "2573490"
  },
  {
    "text": "but we get everyone else all right what test is there because we we displayed",
    "start": "2573490",
    "end": "2579650"
  },
  {
    "text": "very explicitly on the line before okay so so that that's good for manipulation",
    "start": "2579650",
    "end": "2586070"
  },
  {
    "text": "of various indexed various various indexed collections including spans",
    "start": "2586070",
    "end": "2592190"
  },
  {
    "text": "right so one of the things you can do with a span is you can just get a sub span and a sub span of that and so on you can you can check them down and",
    "start": "2592190",
    "end": "2598700"
  },
  {
    "text": "they're all like pointing to the same the part of span is they pointing somebody else's memories they are applauding just right in memory so in",
    "start": "2598700",
    "end": "2605060"
  },
  {
    "text": "particular in this case we've got an array and we're applying the index operator sorry the indexer with a range",
    "start": "2605060",
    "end": "2612860"
  },
  {
    "text": "not index so if you hover over people one hat one what's the type of that",
    "start": "2612860",
    "end": "2618440"
  },
  {
    "text": "where do you want me to hover oh yeah well let's just assign that to a",
    "start": "2618440",
    "end": "2624840"
  },
  {
    "text": "local variable and see what yeah you want to borrow it yeah so if we because",
    "start": "2624840",
    "end": "2630420"
  },
  {
    "text": "you may be wondering is that gonna create a copy of the array and I'm hoping it's not yeah yes very much so",
    "start": "2630420",
    "end": "2641850"
  },
  {
    "text": "who asks are you wearing there it was and the problem with minus one is that",
    "start": "2641850",
    "end": "2647760"
  },
  {
    "text": "that's fine except for at the end right if you if you want to express a range",
    "start": "2647760",
    "end": "2654810"
  },
  {
    "text": "that go always all the way to the end then you end up having to say minus zero which is the same as zero which doesn't",
    "start": "2654810",
    "end": "2661080"
  },
  {
    "text": "mean the end it means the beginning right so so python has a math problem and they have a that means that you have",
    "start": "2661080",
    "end": "2667530"
  },
  {
    "text": "to sort of special case the end when you're going all the way to the end as opposed to when you're going in spaces from the end and and you have lots of",
    "start": "2667530",
    "end": "2674010"
  },
  {
    "text": "it's one of the annoying things when using an otherwise nice feature in Python is to have two special case this",
    "start": "2674010",
    "end": "2680060"
  },
  {
    "text": "going all the way to the end versus going almost to the end and it should also be pointed out that these two indexes are entirely independent so you",
    "start": "2680060",
    "end": "2687300"
  },
  {
    "text": "can have you know I want to go from three to three from the end to one from the end yeah or even three from the end",
    "start": "2687300",
    "end": "2694800"
  },
  {
    "text": "to five exclusive four exclusive so still getting rid of the first one and",
    "start": "2694800",
    "end": "2700740"
  },
  {
    "text": "that's not saying I'm gonna wrap around it's just saying well I'll take oh",
    "start": "2700740",
    "end": "2705900"
  },
  {
    "text": "you're starting at this index that happens to be from the end and you're finishing at this end it's the index",
    "start": "2705900",
    "end": "2711390"
  },
  {
    "text": "that happens to be from the start and of course like everything every index operation if you apply it to a",
    "start": "2711390",
    "end": "2717450"
  },
  {
    "text": "collection where those numbers don't make sense where they go around you get but the range itself is still valid and",
    "start": "2717450",
    "end": "2723810"
  },
  {
    "text": "the the type of that hat 3.4 is range which is a new type again and you can",
    "start": "2723810",
    "end": "2729870"
  },
  {
    "text": "create those range values you know by calling new range or whatever but the",
    "start": "2729870",
    "end": "2735990"
  },
  {
    "text": "range itself does not know about people you could apply the same range to",
    "start": "2735990",
    "end": "2741300"
  },
  {
    "text": "multiple collections and sometimes it'll be valid and sometimes it won't it's just you know it's a little type and I assume they're structs actually",
    "start": "2741300",
    "end": "2748100"
  },
  {
    "text": "yes there's structure yeah so we were looking at what the type of a hat and",
    "start": "2748100",
    "end": "2753290"
  },
  {
    "text": "and it's gonna be used by used but it's a rate and that you might wonder hey",
    "start": "2753290",
    "end": "2760340"
  },
  {
    "text": "that can't be the most efficient thing yeah and it isn't right like we're actually we have to copy and create a",
    "start": "2760340",
    "end": "2766070"
  },
  {
    "text": "new array so when you apply the range index it to an array you get a copy whoa so don't do that and so it's what we",
    "start": "2766070",
    "end": "2772730"
  },
  {
    "text": "should do so what you should do is you should go through span since that right though you",
    "start": "2772730",
    "end": "2777800"
  },
  {
    "text": "could say people dot s span so that's not creating a copy of the array it's",
    "start": "2777800",
    "end": "2784940"
  },
  {
    "text": "just creating a span that refers to the array yes it's creating a window onto the same old array and then when you're",
    "start": "2784940",
    "end": "2792200"
  },
  {
    "text": "licensing it when you apply the range index it to that then you get another",
    "start": "2792200",
    "end": "2797360"
  },
  {
    "text": "span obviously but one but of course no no copying is happening on this and the cool thing here and already didn't have",
    "start": "2797360",
    "end": "2803540"
  },
  {
    "text": "it let's let's so the just you so the principle here that we've discussed it a lot because",
    "start": "2803540",
    "end": "2809720"
  },
  {
    "text": "it's not very efficient to copy part of the array out but the reason we ended up",
    "start": "2809720",
    "end": "2816380"
  },
  {
    "text": "with this is that it's a good principle that the that the slicing index are the one now apply range that it returns the",
    "start": "2816380",
    "end": "2823040"
  },
  {
    "text": "same type as it's applied to so that will also be the case for string even though you know a span of character",
    "start": "2823040",
    "end": "2830240"
  },
  {
    "text": "would be more efficient it's that's gonna be kind of surprising to get back right you get a substring so so it works",
    "start": "2830240",
    "end": "2836840"
  },
  {
    "text": "be aware of this in order to use this use it effectively on big arrays at",
    "start": "2836840",
    "end": "2842270"
  },
  {
    "text": "least right but small arrays who cares yeah just a situation there's there's an",
    "start": "2842270",
    "end": "2849020"
  },
  {
    "text": "assumption to say I'm using small data now therefore it doesn't matter how inefficient it is and then later it",
    "start": "2849020",
    "end": "2854360"
  },
  {
    "text": "becomes big without anyone going over those joins again but this span to sort of prove that it really isn't copy here",
    "start": "2854360",
    "end": "2861200"
  },
  {
    "text": "I've now taken so we're taking a span over people then taking a slice of that",
    "start": "2861200",
    "end": "2866600"
  },
  {
    "text": "span and then assigning a new value into part of that span and then we're going",
    "start": "2866600",
    "end": "2873740"
  },
  {
    "text": "to display this is creating a copy of the array so if we taken this as a local",
    "start": "2873740",
    "end": "2879800"
  },
  {
    "text": "variable earlier and it would have caused different behavior but hopefully if we now",
    "start": "2879800",
    "end": "2886180"
  },
  {
    "text": "my brother for you know yeah okay and now you it's a bit small but you can see",
    "start": "2886180",
    "end": "2891579"
  },
  {
    "text": "yes amy k panic as the third entry here so through through the span right through into the other span into the",
    "start": "2891579",
    "end": "2899049"
  },
  {
    "text": "array that was then copied yeah so it's all sort of this actually yes see the",
    "start": "2899049",
    "end": "2905109"
  },
  {
    "text": "result of that printing test to start with is confusing everything even more but yeah but yeah so the idea is there's",
    "start": "2905109",
    "end": "2913240"
  },
  {
    "text": "a sort of memory transparency I mean but that's not where we here to talk about sleep nope but so I do want to get",
    "start": "2913240",
    "end": "2922240"
  },
  {
    "text": "briefly to talking about async streams as well yep and then for the last like",
    "start": "2922240",
    "end": "2927460"
  },
  {
    "text": "five minutes or so we can talk about the future yes sir let's do the the beyond",
    "start": "2927460",
    "end": "2932559"
  },
  {
    "text": "the future future so let's see how how do we do this let's let's create a",
    "start": "2932559",
    "end": "2940539"
  },
  {
    "text": "little method let's do a local method that's an iterator okay to start with as do one step at a time",
    "start": "2940539",
    "end": "2947950"
  },
  {
    "text": "I'm gonna write a method that returns an ienumerable of person and it's a",
    "start": "2947950",
    "end": "2955299"
  },
  {
    "text": "completely trivial method let's call it get people that just runs through the",
    "start": "2955299",
    "end": "2963579"
  },
  {
    "text": "array and and yields a night what do we do yield new person yield new person okay so we've got more than one yield",
    "start": "2963579",
    "end": "2970630"
  },
  {
    "text": "statement unless that's just for more a bit more writing I'm too lazy for that",
    "start": "2970630",
    "end": "2977470"
  },
  {
    "text": "sorry so for each bar P and people yield",
    "start": "2977470",
    "end": "2985809"
  },
  {
    "text": "P okay and maybe print that we've done",
    "start": "2985809",
    "end": "2992380"
  },
  {
    "text": "it what's yield return or you'll return so right yeah I don't know my own language here so I I don't do much",
    "start": "2992380",
    "end": "3000210"
  },
  {
    "text": "c-sharp I'm sorry so so we have a method here that gets",
    "start": "3000210",
    "end": "3005270"
  },
  {
    "text": "the people and then if let's remove some of this index range stuff because it",
    "start": "3005270",
    "end": "3010310"
  },
  {
    "text": "confuses me a little then we can say for each bar person in get people print them",
    "start": "3010310",
    "end": "3021200"
  },
  {
    "text": "out okay so nothing new here it's just an iterator however what if I wanted to",
    "start": "3021200",
    "end": "3027970"
  },
  {
    "text": "let's say we're emulating some service where things are coming down over time",
    "start": "3027970",
    "end": "3033050"
  },
  {
    "text": "pretty much anything over a network it's as the people are signing up for my service I get I get there the person",
    "start": "3033050",
    "end": "3039200"
  },
  {
    "text": "objects I would really want to await tasks but delay of some time let's say 500 milliseconds okay you know I want to",
    "start": "3039200",
    "end": "3046970"
  },
  {
    "text": "do something async now of course I can to wait because it's not an async method well let's make it a sink okay",
    "start": "3046970",
    "end": "3054910"
  },
  {
    "text": "now it's a sink of course you can't return I'm numerable from an async",
    "start": "3054910",
    "end": "3060410"
  },
  {
    "text": "method but what you can return now is an i async innumerable so you can see that's one of the options here which is",
    "start": "3060410",
    "end": "3067040"
  },
  {
    "text": "a new interface that is the asynchronous version of enumerable okay so all the",
    "start": "3067040",
    "end": "3072859"
  },
  {
    "text": "things that you've been able to reach over all the time there's an async version of that I wonder what we could do with that one mmm so let's just just",
    "start": "3072859",
    "end": "3080660"
  },
  {
    "text": "to be nice let's call it get people async because I think we probably want to have the right and suffix there so",
    "start": "3080660",
    "end": "3086869"
  },
  {
    "text": "now the errors have gone away so apparently I have a valid a sink method here to a first approximation at least",
    "start": "3086869",
    "end": "3093859"
  },
  {
    "text": "but now first of all there's nothing called get people but I'm gonna get a",
    "start": "3093859",
    "end": "3099560"
  },
  {
    "text": "different error saying I can't for reach over is inaudible it's not an ienumerable",
    "start": "3099560",
    "end": "3104680"
  },
  {
    "text": "fact it doesn't contain gets enumerate so we already have yes that's an e things but I can a wait for each it if",
    "start": "3104680",
    "end": "3112790"
  },
  {
    "text": "we make it a stuffing with it anything yeah yeah so now so I'm fine to await it",
    "start": "3112790",
    "end": "3117950"
  },
  {
    "text": "but I have to make I have to make the the main method an async method but luckily you know there's a there's even",
    "start": "3117950",
    "end": "3125990"
  },
  {
    "text": "a refactoring for it I think ooh does it tell the project oh you'll probably make method ASIC already and",
    "start": "3125990",
    "end": "3132050"
  },
  {
    "text": "now SFC chef 72 it was seven one main message can be",
    "start": "3132050",
    "end": "3139480"
  },
  {
    "text": "async and so now that all works out so essentially we have an async version of",
    "start": "3139480",
    "end": "3144630"
  },
  {
    "text": "streams that can represent stuff that comes over the wire to you or gets computed over time or whatever so",
    "start": "3144630",
    "end": "3151240"
  },
  {
    "text": "real-time streams and you can and we have lime support for producing them out",
    "start": "3151240",
    "end": "3156670"
  },
  {
    "text": "of iterators that are async and language support for consuming them with a weight",
    "start": "3156670",
    "end": "3161950"
  },
  {
    "text": "for each now this is not the same I a sink enumerable as we're familiar with",
    "start": "3161950",
    "end": "3167140"
  },
  {
    "text": "from our X is it or is it now it is essentially the same in the sense that",
    "start": "3167140",
    "end": "3172420"
  },
  {
    "text": "our X or I X rather the interactive frame is essentially the same so now",
    "start": "3172420",
    "end": "3178480"
  },
  {
    "text": "does that mean that my libraries that are currently returned it means that we have we have changed the interface a",
    "start": "3178480",
    "end": "3184570"
  },
  {
    "text": "little bit over what they had right but but I X which is a community library",
    "start": "3184570",
    "end": "3190060"
  },
  {
    "text": "that provides link over asynchronous streams is actually going to adjust to",
    "start": "3190060",
    "end": "3196750"
  },
  {
    "text": "our we're putting the interface in as a core interface and they're going to adjust it so that it works but I mean if you have libraries that currently return",
    "start": "3196750",
    "end": "3203410"
  },
  {
    "text": "the i-x one you'll need to work out what to do next yeah which will be interesting so I'm in",
    "start": "3203410",
    "end": "3210040"
  },
  {
    "text": "that position myself and then can blog about it and so that's a thing streams",
    "start": "3210040",
    "end": "3217420"
  },
  {
    "text": "and that sort of completes the async picture in it also and the async picture at large is the subject of a talk",
    "start": "3217420",
    "end": "3224290"
  },
  {
    "text": "tomorrow that I'm going to plug which Bill Wagner is is giving so if you want",
    "start": "3224290",
    "end": "3229300"
  },
  {
    "text": "to be reminded of all the goodness of async and all the things to be worried about including async streams as I'm standing go to that talk tomorrow",
    "start": "3229300",
    "end": "3236020"
  },
  {
    "text": "and as well as async so as well as a weight for each there'll be a sink using",
    "start": "3236020",
    "end": "3241270"
  },
  {
    "text": "so that you can asynchronously dispose of things and be at weight using yes so",
    "start": "3241270",
    "end": "3246490"
  },
  {
    "text": "there's an ia sink disposable as well and you can await using an ia sink disposable but we were in bullets for",
    "start": "3246490",
    "end": "3252730"
  },
  {
    "text": "showing that now because we're because we're running desperately short of time desperately and desperately little short",
    "start": "3252730",
    "end": "3259330"
  },
  {
    "text": "so that's essentially what we were able to show which was a little less than I",
    "start": "3259330",
    "end": "3265240"
  },
  {
    "text": "had hoped for there are things that beyond the things that don't work properly in the preview",
    "start": "3265240",
    "end": "3270950"
  },
  {
    "text": "there are things that aren't there yet at all we showed one of them just by mother typing but the other one that is",
    "start": "3270950",
    "end": "3278870"
  },
  {
    "text": "it's a major feature is the default interface members which will be in one of the next previews and the idea here",
    "start": "3278870",
    "end": "3284660"
  },
  {
    "text": "is that this is something that we squinted a little at Java here I have to admit you know occasionally that happens",
    "start": "3284660",
    "end": "3292280"
  },
  {
    "text": "and when you're assigning a new language 20 years ago you squint a little at Java",
    "start": "3292280",
    "end": "3298010"
  },
  {
    "text": "so they this is essentially to address a",
    "start": "3298010",
    "end": "3303830"
  },
  {
    "text": "problem with interfaces which is you can never evolve your interfaces because they're a public contract that that not",
    "start": "3303830",
    "end": "3311060"
  },
  {
    "text": "only has consumers but also producers right there implementers of the interface and if you add a new member to",
    "start": "3311060",
    "end": "3316160"
  },
  {
    "text": "your interface you've just broken all the implementers and default interface members are primarily there to to",
    "start": "3316160",
    "end": "3323150"
  },
  {
    "text": "address that scenario so the idea is you can add a new member to an interface as long as you provide a default implementation for it so that all the",
    "start": "3323150",
    "end": "3329600"
  },
  {
    "text": "existing implementers aren't broken they just get that default implementation for free yep it just continues to work the",
    "start": "3329600",
    "end": "3337100"
  },
  {
    "text": "same way and so an example here is I'm adding I have an existing implementer of my ilogger interface I add another",
    "start": "3337100",
    "end": "3344120"
  },
  {
    "text": "overload of the log method and as long as I implement it right there in the interface with a so that's a method body",
    "start": "3344120",
    "end": "3350360"
  },
  {
    "text": "in an interface if some people find offensive but you know it's it's what",
    "start": "3350360",
    "end": "3355700"
  },
  {
    "text": "the feature is about it's necessary for the feature to work I'm sorry but so you",
    "start": "3355700",
    "end": "3360880"
  },
  {
    "text": "the console logger will continue to work and if people use it through the interface they can now call the new",
    "start": "3360880",
    "end": "3367160"
  },
  {
    "text": "overlord of log only through the interface so my understanding is this is effectively explicitly implemented it",
    "start": "3367160",
    "end": "3373130"
  },
  {
    "text": "gives you an explicit implementation which means it's not available on the console logger itself it's not part it",
    "start": "3373130",
    "end": "3378230"
  },
  {
    "text": "doesn't change it's public and that would be very breaking right because that could change over low resolution",
    "start": "3378230",
    "end": "3383930"
  },
  {
    "text": "and everything when you use it right so it doesn't become visible on the console logger but if you use it through the",
    "start": "3383930",
    "end": "3389690"
  },
  {
    "text": "interface now it instead of being broken it actually but if you later on someone thinks hey I can do a more efficient",
    "start": "3389690",
    "end": "3396050"
  },
  {
    "text": "implementation yes then you can just add it it implements the interface method and",
    "start": "3396050",
    "end": "3401960"
  },
  {
    "text": "always well presumably you are in trouble if you've got a public int log",
    "start": "3401960",
    "end": "3407119"
  },
  {
    "text": "exception X then you know people are only going to see one version via the interface they'll only see the other",
    "start": "3407119",
    "end": "3413390"
  },
  {
    "text": "version via the class and we just have to live with that that's all you can already get into that today yeah and it's not a new problem",
    "start": "3413390",
    "end": "3418849"
  },
  {
    "text": "so and it's but essentially if you if you choose to implement the interface",
    "start": "3418849",
    "end": "3424220"
  },
  {
    "text": "method yourself there's nothing different about it it's like today it's just that if you don't then it gets",
    "start": "3424220",
    "end": "3430190"
  },
  {
    "text": "implemented for you so this becomes a little bit more like an abstract class but you still can't introduce fields but",
    "start": "3430190",
    "end": "3437089"
  },
  {
    "text": "I suspect certainly it would it would mean that a little a lot of the places I use abstract classes at the moment so",
    "start": "3437089",
    "end": "3443240"
  },
  {
    "text": "that I can add stuff later on I would be able to use interfaces at least I would if I were only targeting dotnet cause",
    "start": "3443240",
    "end": "3449690"
  },
  {
    "text": "because my understanding is yes this requires runtime support this is only",
    "start": "3449690",
    "end": "3454700"
  },
  {
    "text": "going to well done at core or the course a liar and Sam rain or montemagno stay",
    "start": "3454700",
    "end": "3460160"
  },
  {
    "text": "ok right yet oh so this requires new runtime support which is actually an first in like a decade since essentially",
    "start": "3460160",
    "end": "3467299"
  },
  {
    "text": "since generics we haven't added language features that require a new runtime support even on dynamic which kind of",
    "start": "3467299",
    "end": "3472849"
  },
  {
    "text": "blows my mind that dynamic can be implemented entirely within framework et might have been better if we did though but it's so this is this means that this",
    "start": "3472849",
    "end": "3482420"
  },
  {
    "text": "doesn't work is this doesn't down target and particularly doesn't target the framework currently there's a CL are the",
    "start": "3482420",
    "end": "3489619"
  },
  {
    "text": "classic CLR on desktop doesn't support this there is a discussion around whether that's should be in standard to",
    "start": "3489619",
    "end": "3496549"
  },
  {
    "text": "one or not yeah so so it's interesting like it's giving us and we're using this",
    "start": "3496549",
    "end": "3501980"
  },
  {
    "text": "as a bit of a you know canary in a coalmine for what does it mean for us to",
    "start": "3501980",
    "end": "3507230"
  },
  {
    "text": "start doing runtime changes again and doing them only and some of the stats like that well how does that all work",
    "start": "3507230",
    "end": "3513920"
  },
  {
    "text": "out this is sort of our our first foray into that and but and it means that we",
    "start": "3513920",
    "end": "3520279"
  },
  {
    "text": "if this goes well we will be open to doing more features that are implemented in the runtime and evolving the runtime",
    "start": "3520279",
    "end": "3526220"
  },
  {
    "text": "along with the language which you know if we've done that all along many things would probably have been better so but equally would have had a worse",
    "start": "3526220",
    "end": "3533040"
  },
  {
    "text": "backward compatibility story in some cases and yeah there are there are trade offs yeah life is ham and that's one of",
    "start": "3533040",
    "end": "3538830"
  },
  {
    "text": "the reasons why we can now do it because duck neck core has a better story for sticking with the older versions you",
    "start": "3538830",
    "end": "3546150"
  },
  {
    "text": "know so yep can can the implementation",
    "start": "3546150",
    "end": "3559350"
  },
  {
    "text": "down here in telemetry logger be explicit yes of course yes it if you you know it you can do all the same things",
    "start": "3559350",
    "end": "3565380"
  },
  {
    "text": "as if it didn't have its its default implementation and if I wanted to call",
    "start": "3565380",
    "end": "3571260"
  },
  {
    "text": "the default implementation from another application 30 seconds okay so I just",
    "start": "3571260",
    "end": "3577440"
  },
  {
    "text": "want to quickly mention though you have more things on my slides quickly wanna mention some things that we are thinking",
    "start": "3577440",
    "end": "3582810"
  },
  {
    "text": "about for the further future maybe c-sharp 9 one is some notion of Records",
    "start": "3582810",
    "end": "3588920"
  },
  {
    "text": "which by which I mean a drastically abbreviated way of creating classes for",
    "start": "3588920",
    "end": "3595500"
  },
  {
    "text": "for representing data okay so it might be that they have a syntax something like this and you know what that would",
    "start": "3595500",
    "end": "3603450"
  },
  {
    "text": "really mean is that you you get a constructor and a Deconstructor and and value-based equality and and hash codes",
    "start": "3603450",
    "end": "3611340"
  },
  {
    "text": "and you know that all that stuff properties so a it's sort of a way of",
    "start": "3611340",
    "end": "3617910"
  },
  {
    "text": "very concisely describing data which you know functional languages are good at this things are more verbose in an",
    "start": "3617910",
    "end": "3625020"
  },
  {
    "text": "updating language and that's sometimes you know okay I know exactly what my data looks like what I'm gonna spend the",
    "start": "3625020",
    "end": "3630030"
  },
  {
    "text": "next day and a half just writing the class declaration maybe you could do that maybe you could turn that into a",
    "start": "3630030",
    "end": "3635040"
  },
  {
    "text": "half an hour so we're looking at that and in connection with that maybe also looking at discriminated Union syntax",
    "start": "3635040",
    "end": "3642030"
  },
  {
    "text": "where you can describe a group of related types in in a very concise way",
    "start": "3642030",
    "end": "3647610"
  },
  {
    "text": "which when you combine with opossum matching is then kind of more interesting and a lot of these features",
    "start": "3647610",
    "end": "3652800"
  },
  {
    "text": "all build and work together I I can't wait for this I have been waiting since",
    "start": "3652800",
    "end": "3657870"
  },
  {
    "text": "c-sharp six or whatever and but I far rather have it right than early right and there's some ways in which it is a",
    "start": "3657870",
    "end": "3663930"
  },
  {
    "text": "little hard one thing we would like to capture is that it doesn't necessarily have to be ordered it doesn't necessarily have to",
    "start": "3663930",
    "end": "3669750"
  },
  {
    "text": "be that you give things in a certain order and and there you can they always deconstruct it by by that order maybe",
    "start": "3669750",
    "end": "3676880"
  },
  {
    "text": "maybe you want to just describe your records as having these name entities and maybe you want to be able to create",
    "start": "3676880",
    "end": "3683790"
  },
  {
    "text": "them using object initializers even though object initializes today require you to mutate and an already existing",
    "start": "3683790",
    "end": "3690210"
  },
  {
    "text": "object maybe we can make it either with or without runtime help make it so that you can use an object initializer even",
    "start": "3690210",
    "end": "3696750"
  },
  {
    "text": "to engine to initialize immutable objects right after all is part of the",
    "start": "3696750",
    "end": "3701760"
  },
  {
    "text": "constructor syntax wouldn't it be nice if it could actually help construct the object and so something like that and",
    "start": "3701760",
    "end": "3707850"
  },
  {
    "text": "maybe even for immutable objects having a feature for non-destructive update as",
    "start": "3707850",
    "end": "3713970"
  },
  {
    "text": "people call it where you can create another object just like the first one except with these things changed so for",
    "start": "3713970",
    "end": "3720210"
  },
  {
    "text": "instance I could create John Galloway by taking John ski and just changing is creating a version of him that has a",
    "start": "3720210",
    "end": "3726330"
  },
  {
    "text": "different last and this does not change my name importantly and they're still a John skeet so that's so that's the nice",
    "start": "3726330",
    "end": "3732150"
  },
  {
    "text": "thing is that we would still have you all nice for me anyway so so that's that",
    "start": "3732150",
    "end": "3737310"
  },
  {
    "text": "stuff that we are actively researching now for a future version of a C sharp and then there's more crazy stuff but",
    "start": "3737310",
    "end": "3742560"
  },
  {
    "text": "are we over time so I think yeah so in in summary if you want to know about C sharp 9 and get ahead of the curve learn",
    "start": "3742560",
    "end": "3748920"
  },
  {
    "text": "F sharp now it's that's true for this stuff that when a what I don't get won't get to is it's a little more right it's",
    "start": "3748920",
    "end": "3756570"
  },
  {
    "text": "different yeah and and there's no there is no disrespect meant in saying that",
    "start": "3756570",
    "end": "3762000"
  },
  {
    "text": "the C sharp team is borrowing from a sharp heavily this is fantastic for all of us it's a really really good approach",
    "start": "3762000",
    "end": "3769800"
  },
  {
    "text": "that seems to have been working very well taking things slowly so that we make sure that everything is still feels",
    "start": "3769800",
    "end": "3774930"
  },
  {
    "text": "like C sharp just feels like C sharp with a little bit more of an option a functional bent as it were and it's it's",
    "start": "3774930",
    "end": "3782730"
  },
  {
    "text": "fantastic I don't want to be a revolt I want to be clear that the the boring goes both ways like right yeah okay you",
    "start": "3782730",
    "end": "3788220"
  },
  {
    "text": "have to remember to remember names now and nullable in in F sharp Malibu is going in there and so on so we kind of",
    "start": "3788220",
    "end": "3793440"
  },
  {
    "text": "Co evolving and that feels good yep cool alright thanks thanks",
    "start": "3793440",
    "end": "3801748"
  }
]