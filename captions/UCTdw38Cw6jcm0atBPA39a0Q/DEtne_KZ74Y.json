[
  {
    "text": "all right so let's get this going I'm actually super surprised that so many people joined this talk um so you are",
    "start": "3399",
    "end": "10280"
  },
  {
    "text": "aware of how conferences work right so usually conferences are built a way",
    "start": "10280",
    "end": "15839"
  },
  {
    "text": "that the first talks are not particularly exciting but as the conference goes talks get more and more",
    "start": "15839",
    "end": "21279"
  },
  {
    "text": "exciting until after the conference people will definitely return the next year and so this is the first regular",
    "start": "21279",
    "end": "28840"
  },
  {
    "text": "talk after the uh opening keynote so do not have too many expectations",
    "start": "28840",
    "end": "34360"
  },
  {
    "text": "still um first of all a wonderful good morning and welcome to the most common",
    "start": "34360",
    "end": "39760"
  },
  {
    "text": "misconceptions of design patterns second of n so quick quick introduction some",
    "start": "39760",
    "end": "45600"
  },
  {
    "text": "people might not know me so I'm Claus working as a freelancing C+",
    "start": "45600",
    "end": "51079"
  },
  {
    "text": "trainer consultant read a book about C++ coincidentally softly design I run the",
    "start": "51079",
    "end": "56559"
  },
  {
    "text": "Cs user group together with a couple of other people the one in Munich and um I",
    "start": "56559",
    "end": "61920"
  },
  {
    "text": "do various things at conferences so one of the things I do like is indeed sof to",
    "start": "61920",
    "end": "67159"
  },
  {
    "text": "design and design patterns and so this is the second talk after one that I've given last year where I was talking",
    "start": "67159",
    "end": "73720"
  },
  {
    "text": "about a couple of misconceptions in common design patterns and even the term design patterns",
    "start": "73720",
    "end": "79200"
  },
  {
    "text": "itself this year I want to continue the story but for this year I have I",
    "start": "79200",
    "end": "85200"
  },
  {
    "text": "actually had to think quite hard what to select because there's so many things to talk about and this year I decided decided to talk specifically about a",
    "start": "85200",
    "end": "91479"
  },
  {
    "text": "couple of misconceptions that we have about the virtual functions and so I now",
    "start": "91479",
    "end": "96759"
  },
  {
    "text": "talk about two things that I think um are pretty important here and you might",
    "start": "96759",
    "end": "102200"
  },
  {
    "text": "know that um virtual functions in a community can produce a mixed Echo so",
    "start": "102200",
    "end": "108119"
  },
  {
    "text": "some people ah feel like that to slow we have to do something different so for instance in at cukon",
    "start": "108119",
    "end": "115200"
  },
  {
    "text": "2022 um I talked about the hidden performance price of virtual functions",
    "start": "115200",
    "end": "120320"
  },
  {
    "text": "trying to tell you they're expensive but then just in the year after somebody said optimizing way virtual functions",
    "start": "120320",
    "end": "126560"
  },
  {
    "text": "maybe pointless entirely so there is this battle is it good is it bad and I'm",
    "start": "126560",
    "end": "132239"
  },
  {
    "text": "not happy to chime in but from a different perspective I want to take a look at this from the design perspective",
    "start": "132239",
    "end": "139239"
  },
  {
    "text": "and so today we're going to talk about two topics only we're going to talk about crtp one of the Beloved cryptic",
    "start": "139239",
    "end": "146440"
  },
  {
    "text": "abbreviations that they have language and we're going to talk about stood variant",
    "start": "146440",
    "end": "151519"
  },
  {
    "text": "specifically good so let's start to talk a little bit about c2p which is from my point of view one",
    "start": "151519",
    "end": "157200"
  },
  {
    "text": "of the things that I definitely should uh should talk about so you might not know crtp it's",
    "start": "157200",
    "end": "164640"
  },
  {
    "text": "actually something pretty old it's from 1995 and it's named after a paper that James cin wrote In",
    "start": "164640",
    "end": "171560"
  },
  {
    "text": "1995 um after observing that a certain template B pattern appeared in a couple",
    "start": "171560",
    "end": "177000"
  },
  {
    "text": "of code bases and so just in case indeed you have not heard about this",
    "start": "177000",
    "end": "182200"
  },
  {
    "text": "very quick intro so we have a regular inheritance Hier that just one of the classic ones so we have animals I have a",
    "start": "182200",
    "end": "189040"
  },
  {
    "text": "sheep Drive class now this inheritance Hier first of all has a templated base",
    "start": "189040",
    "end": "196840"
  },
  {
    "text": "class and now right away these special detail about this technique the ri class",
    "start": "196840",
    "end": "202040"
  },
  {
    "text": "inherits from the space class but passes itself as a template",
    "start": "202040",
    "end": "207280"
  },
  {
    "text": "parameter which is curious indeed does this even work absolutely because",
    "start": "207280",
    "end": "213120"
  },
  {
    "text": "as soon as you say class sheep you kind of have for declared this and yes you are allowed to instantiate a template",
    "start": "213120",
    "end": "219080"
  },
  {
    "text": "with an incomplete type so perfectly fine perfectly valid but now so you now see what the T",
    "start": "219080",
    "end": "226080"
  },
  {
    "text": "in the drive in a base class is so this is the drive type and so one of the things that we now do in order to",
    "start": "226080",
    "end": "233840"
  },
  {
    "text": "communicate this pattern is to name the template parameter derived now this is a typical name for that",
    "start": "233840",
    "end": "240519"
  },
  {
    "text": "so then it's a base class but it's not really used in any virtual way and that",
    "start": "240519",
    "end": "245560"
  },
  {
    "text": "that's pretty much the point we want to get rid of virtual functions entirely so we tend to make the Constructor default",
    "start": "245560",
    "end": "251959"
  },
  {
    "text": "Constructor and even more specifically the destructor private which kind of means that we cannot access them anymore",
    "start": "251959",
    "end": "259000"
  },
  {
    "text": "but that drive class has to and so we befriend the drive class which actually",
    "start": "259000",
    "end": "264440"
  },
  {
    "text": "is even a prediction that we not accidentally use a different wrong type here so this is a pretty pretty solid",
    "start": "264440",
    "end": "270919"
  },
  {
    "text": "protection against any kind of misuse in a drive class you don't have",
    "start": "270919",
    "end": "277840"
  },
  {
    "text": "to medal with a destructed all yeah remember the rule of five leave it now this is just to mention there's nothing",
    "start": "277840",
    "end": "284000"
  },
  {
    "text": "special now of course it Base Class is about defining an interface a contract",
    "start": "284000",
    "end": "289320"
  },
  {
    "text": "something that people can use and so this is the same thing again so animals make some",
    "start": "289320",
    "end": "294960"
  },
  {
    "text": "sound but most specifically it's not a virtual function but still",
    "start": "294960",
    "end": "300240"
  },
  {
    "text": "the real implementation must be in the drive class because only the drive class knows exactly what what needs to be",
    "start": "300240",
    "end": "306039"
  },
  {
    "text": "done so if it's not a virtual function how do we get from here to there well we",
    "start": "306039",
    "end": "311800"
  },
  {
    "text": "know what we are we are a derived and so we statically convert",
    "start": "311800",
    "end": "317280"
  },
  {
    "text": "ourselves to a dve type with a static cast which is perfectly valid if we are",
    "start": "317280",
    "end": "323680"
  },
  {
    "text": "truly a derived and on the derived object we call the makon function",
    "start": "323680",
    "end": "330639"
  },
  {
    "text": "so and in this this entire scheme usually is used by just writing functions that take an animal of derived",
    "start": "330639",
    "end": "339600"
  },
  {
    "text": "and so now in this function I can use all kinds of animals all dve types I can",
    "start": "339600",
    "end": "344680"
  },
  {
    "text": "call make sound whenever I what and there's no virtual function call at all no virtual",
    "start": "344680",
    "end": "351720"
  },
  {
    "text": "dispatch although I have a proper inheritance",
    "start": "351720",
    "end": "356960"
  },
  {
    "text": "hierarchy so now if indeed some people have seen this for the first time oh wow",
    "start": "358639",
    "end": "364039"
  },
  {
    "text": "I know the reaction W that's amazing that's the Holy Grail",
    "start": "364039",
    "end": "370759"
  },
  {
    "text": "of inheritance oh my God why haven't I done this and of course you you have great plans for next week yeah this week",
    "start": "370759",
    "end": "376960"
  },
  {
    "text": "is the conference but next week you're rewriting the entire code base with crtp making it",
    "start": "376960",
    "end": "383599"
  },
  {
    "text": "fast but before before you actually do that and before you said any big plans",
    "start": "383599",
    "end": "389039"
  },
  {
    "text": "no no no no there's some limitations two at least they're pretty serious and so I should",
    "start": "389039",
    "end": "394599"
  },
  {
    "text": "now mention them qu right Qui quite quickly so first something that you might not have realized initially if you",
    "start": "394599",
    "end": "402000"
  },
  {
    "text": "use the CP pattern every derived class has a different base",
    "start": "402000",
    "end": "408440"
  },
  {
    "text": "class now this actually has quite superious implication so I say it again every dve class is a different Base",
    "start": "408440",
    "end": "415440"
  },
  {
    "text": "Class so there is no common Base Class anymore you could not have this ctor of",
    "start": "415440",
    "end": "421039"
  },
  {
    "text": "animals which is what people usually want to have if they use some kind of inheritance this is really",
    "start": "421039",
    "end": "428879"
  },
  {
    "text": "different but there's something else that people are bucked with quite quickly I've shown this print function",
    "start": "428879",
    "end": "435680"
  },
  {
    "text": "before and yes this print function is a function template and it kind of has to",
    "start": "435680",
    "end": "440960"
  },
  {
    "text": "be because this is the only way to really mention without explicitly naming it the deriv class now this is the print",
    "start": "440960",
    "end": "448759"
  },
  {
    "text": "fun for some specific animal but this kind of means that pretty much everything that comes into",
    "start": "448759",
    "end": "454960"
  },
  {
    "text": "contact with this animal based class is itself a template and so interestingly this crtp",
    "start": "454960",
    "end": "461360"
  },
  {
    "text": "is a little bit like a virus everything that comes into touch with these base classes becomes itself a template stuff",
    "start": "461360",
    "end": "468720"
  },
  {
    "text": "is moved from the source file to the header file good source code is suddenly turned into template only header only",
    "start": "468720",
    "end": "475120"
  },
  {
    "text": "fun libraries wo your compile times might be super miserable out the wordss and many",
    "start": "475120",
    "end": "482199"
  },
  {
    "text": "people have reverted all of these changes because well even compile times is an important",
    "start": "482199",
    "end": "487720"
  },
  {
    "text": "property so okay now hopefully most people have dropped the idea to rework everything in",
    "start": "487720",
    "end": "494440"
  },
  {
    "text": "crdp um that's what we have today because actually we have something new",
    "start": "494440",
    "end": "502800"
  },
  {
    "text": "and the new cuton on blog which is kind of introduced by benine in 2021 commonly called as producing this",
    "start": "502800",
    "end": "511759"
  },
  {
    "text": "so what he's talking about is a new feature in C+ 23 the feature refer to as",
    "start": "511759",
    "end": "516880"
  },
  {
    "text": "explicit object parameters so I take the example from his talk make it a little bigger and a little more specific so",
    "start": "516880",
    "end": "524120"
  },
  {
    "text": "thato is going on so again this is an example for CTP ah you recognize this",
    "start": "524120",
    "end": "530480"
  },
  {
    "text": "with this derived U name up here the Base Class provides a scale function which however eventually calls some get",
    "start": "530480",
    "end": "537760"
  },
  {
    "text": "value and set value on the underlying type to derve type these two functions",
    "start": "537760",
    "end": "543440"
  },
  {
    "text": "will be provided by derive type okay now in the main function I create a sensitivity object some initialization",
    "start": "543440",
    "end": "550920"
  },
  {
    "text": "and I call scale well I call the function on the base type but the base type knows fully",
    "start": "550920",
    "end": "556560"
  },
  {
    "text": "well what it is so it can call the derived uh classes get value and set value functions good so this works",
    "start": "556560",
    "end": "564360"
  },
  {
    "text": "nicely but admittedly it's a little technically complex it's not something",
    "start": "564360",
    "end": "569519"
  },
  {
    "text": "is super simple to understand and so now here's the new idea in the base class we",
    "start": "569519",
    "end": "576279"
  },
  {
    "text": "introduce one of these explicit object parameters that this pointer so now",
    "start": "576279",
    "end": "583079"
  },
  {
    "text": "since plus 23 you are allowed to explicitly Express the type of this object and you write this then the type",
    "start": "583079",
    "end": "589839"
  },
  {
    "text": "of that and you've commonly now Ed the the name self um um as a parameter name",
    "start": "589839",
    "end": "596560"
  },
  {
    "text": "so now you can call self set value and self dotg get value to call these two",
    "start": "596560",
    "end": "602240"
  },
  {
    "text": "functions so they're no template parameters anymore it's simpler and you",
    "start": "602240",
    "end": "607440"
  },
  {
    "text": "have full power to express what the type of the of this object is whether this is",
    "start": "607440",
    "end": "612480"
  },
  {
    "text": "Con or not you can use forwarding references you can use whatever you want to Prett is",
    "start": "612480",
    "end": "619160"
  },
  {
    "text": "simple whoa that's amazing this is nice",
    "start": "619160",
    "end": "624279"
  },
  {
    "text": "and people were quite quite intrigued by that and then kind of in in one sentence",
    "start": "624279",
    "end": "629760"
  },
  {
    "text": "said so crtp really just I guess goes",
    "start": "629760",
    "end": "635440"
  },
  {
    "text": "away oh this motivated people to show off in their code indeed now in the last",
    "start": "635440",
    "end": "641639"
  },
  {
    "text": "year one and a half years I've seen many talks that kind of picked up the idea and and just showed how beautiful the",
    "start": "641639",
    "end": "647720"
  },
  {
    "text": "new era will be with explicit object parameters first example second example then have be a couple more examples that",
    "start": "647720",
    "end": "654639"
  },
  {
    "text": "unfortunately did not find online anymore so now let's take a look at the examples that they presented in their",
    "start": "654639",
    "end": "661639"
  },
  {
    "text": "talk at least a gist of it I'm using my animal and sheep again so my animal has",
    "start": "661639",
    "end": "667040"
  },
  {
    "text": "this make sound function which calls Mak sound imple in the derve class so in the in a base class I now",
    "start": "667040",
    "end": "675519"
  },
  {
    "text": "use this explicit object parameter I make it a reference to con doesn't have to be a foring reference all the time so",
    "start": "675519",
    "end": "682320"
  },
  {
    "text": "this is nice now in the main function I create a sheep but I also store the Sheep at a",
    "start": "682320",
    "end": "689480"
  },
  {
    "text": "pointer of animal reference to animal I can do that there is an inheritance",
    "start": "689480",
    "end": "694880"
  },
  {
    "text": "hierarchy then I call sheep. MAK sound and animal. Mak",
    "start": "694880",
    "end": "700720"
  },
  {
    "text": "sound it's simpler isn't it it's amazing it's so beautiful but it doesn't",
    "start": "700720",
    "end": "707600"
  },
  {
    "text": "compile it doesn't work and indeed surprisingly this happened in a lot of talks they presented code that would",
    "start": "707600",
    "end": "714040"
  },
  {
    "text": "just not work not compile that is surprising why why is",
    "start": "714040",
    "end": "720399"
  },
  {
    "text": "that well I think there is a big miscommunication and it has to do with the term",
    "start": "720399",
    "end": "726440"
  },
  {
    "text": "crtp now in the talk of um bendine himself he actually explains why this is",
    "start": "726440",
    "end": "733040"
  },
  {
    "text": "not possible to work so it's actually this line if you",
    "start": "733040",
    "end": "738279"
  },
  {
    "text": "have a base type base object um and if you try to call the derve some if you",
    "start": "738279",
    "end": "744560"
  },
  {
    "text": "call a base function on this base type it will never derive the dve type so",
    "start": "744560",
    "end": "750440"
  },
  {
    "text": "this explicit object parameter cannot um deduce the dynamic type of an object but it can only deduce the static type so as",
    "start": "750440",
    "end": "758000"
  },
  {
    "text": "soon as you call something via the base thing it will always be a um a reference",
    "start": "758000",
    "end": "764680"
  },
  {
    "text": "to the base actually this is the line so no this can actually not work",
    "start": "764680",
    "end": "771240"
  },
  {
    "text": "technically this is um this is limited but why the confusion well on this slide that I've",
    "start": "771240",
    "end": "778279"
  },
  {
    "text": "shown before that actually it's a nice link to fluent C cpp.com from uh uh blog",
    "start": "778279",
    "end": "783839"
  },
  {
    "text": "entry from 2017 so this was a pretty good um um",
    "start": "783839",
    "end": "790639"
  },
  {
    "text": "blog about what the curiously recurring template pattern can bring to your code but that's an interesting um uh",
    "start": "790639",
    "end": "798360"
  },
  {
    "text": "block of of comments that that's not interesting for us but there are several ways that cr2p",
    "start": "798360",
    "end": "805079"
  },
  {
    "text": "can be useful here I'm presenting the one that I see most in code adding functionality and another one that is",
    "start": "805079",
    "end": "812040"
  },
  {
    "text": "interesting but I don't encounter as often creating static",
    "start": "812040",
    "end": "817720"
  },
  {
    "text": "interfaces all right adding functionality static interfaces that's",
    "start": "818279",
    "end": "823760"
  },
  {
    "text": "the difference well adding functionality is what I've shown in the numerical",
    "start": "823760",
    "end": "828839"
  },
  {
    "text": "functions and sensitivity Example The Base Class provides some function that the drive class is",
    "start": "828839",
    "end": "835320"
  },
  {
    "text": "supposed to use however the use is quite quite important I never really use the The Base Class",
    "start": "835320",
    "end": "842279"
  },
  {
    "text": "specifically so it's just some kind of um provided functionality so I create a",
    "start": "842279",
    "end": "847680"
  },
  {
    "text": "derived object and I call scale via the derived object this is where crtp indeed can be",
    "start": "847680",
    "end": "855279"
  },
  {
    "text": "very very nicely be replaced by explicit object parameters here again this works",
    "start": "855279",
    "end": "862320"
  },
  {
    "text": "this is fine I will always use the derived object directly",
    "start": "862320",
    "end": "869240"
  },
  {
    "text": "however we've also seen the other example the animal example yeah animal",
    "start": "870040",
    "end": "875839"
  },
  {
    "text": "sheep same slide as before in this context at this point the static cast to",
    "start": "875839",
    "end": "882839"
  },
  {
    "text": "derived is an explicit going to the the the dynamic type of the thing so I know",
    "start": "882839",
    "end": "888959"
  },
  {
    "text": "the dynamic type because I statically have found it to my Base Class however if I replace this with an explicit",
    "start": "888959",
    "end": "894920"
  },
  {
    "text": "object parameter and uh here at this again",
    "start": "894920",
    "end": "899959"
  },
  {
    "text": "then unfortunately the last line just cannot compile because I cannot deduce",
    "start": "899959",
    "end": "905639"
  },
  {
    "text": "self to be the dve type and so that does not work however",
    "start": "905639",
    "end": "912360"
  },
  {
    "text": "in this context I truly use the this this thing via the base type and so I hope you see the",
    "start": "912360",
    "end": "918920"
  },
  {
    "text": "difference between the two one is about adding functionality one is about creating an interface static",
    "start": "918920",
    "end": "926639"
  },
  {
    "text": "interface and that pretty much is these two two names so there two forms of",
    "start": "926639",
    "end": "934040"
  },
  {
    "text": "c2p but the term because of this is kind of ambiguous so if I say CRP to you you",
    "start": "934040",
    "end": "940120"
  },
  {
    "text": "might think about exactly the opposite thing that is kind of a problem now this is an ambiguity and misunderstanding",
    "start": "940120",
    "end": "946959"
  },
  {
    "text": "this led to people using the wrong thing in their talks so what we do need is new terms we",
    "start": "946959",
    "end": "954680"
  },
  {
    "text": "need new terms in order to disintegrate between these two things so I believe um you kind of have",
    "start": "954680",
    "end": "961360"
  },
  {
    "text": "them already but before that kind I public apologize I miss the opportunity to do",
    "start": "961360",
    "end": "968040"
  },
  {
    "text": "something in my book I actually talked about CP and I showed the two different things I did not provide new terms",
    "start": "968040",
    "end": "975120"
  },
  {
    "text": "though although it's a book about terms pretty much about terminology that's a chance I totally missed I'm totally",
    "start": "975120",
    "end": "982399"
  },
  {
    "text": "sorry but today I'm going to um change that so z2p for static",
    "start": "982399",
    "end": "990519"
  },
  {
    "text": "interfaces that's the the animal sheep example so in this example I provide a",
    "start": "990519",
    "end": "996920"
  },
  {
    "text": "based class for related set family of types that's the point I want to have a",
    "start": "996920",
    "end": "1004680"
  },
  {
    "text": "common interface for everything and I'm going to use it via the interface via the base",
    "start": "1004680",
    "end": "1010040"
  },
  {
    "text": "class it's an inheritance relationship so in this case I really",
    "start": "1010040",
    "end": "1015120"
  },
  {
    "text": "introduce an abstraction and so I would say this is pretty much a design pattern something where I can create a static",
    "start": "1015120",
    "end": "1022680"
  },
  {
    "text": "interface and this is I believe the name that we should use for this technique I think static interface is good which by",
    "start": "1022680",
    "end": "1029640"
  },
  {
    "text": "the way is exactly the term that Jonathan mukar used in 27 also I believe",
    "start": "1029640",
    "end": "1034880"
  },
  {
    "text": "this is a good term so let's use this from now on for this particular technique the other technique though",
    "start": "1034880",
    "end": "1042438"
  },
  {
    "text": "adding functionality V c2p well it is different so in this case the Base Class",
    "start": "1042439",
    "end": "1048199"
  },
  {
    "text": "provides some impementation detail for the drive class it's just introduced into the class so I don't really create",
    "start": "1048199",
    "end": "1055240"
  },
  {
    "text": "a common interface it's not really about a base class some some um use via the",
    "start": "1055240",
    "end": "1062400"
  },
  {
    "text": "base class and so this does not introduce an abstraction it's more like an implementation",
    "start": "1062400",
    "end": "1068240"
  },
  {
    "text": "detail this is what I would call a mix in and not just me this is the common term for this kind of technique so we",
    "start": "1068240",
    "end": "1075280"
  },
  {
    "text": "mix in some piece of functionality via some Base Class into a Drive class and it's never about the base class it's",
    "start": "1075280",
    "end": "1081679"
  },
  {
    "text": "about the drive class having this piece of functionality so I believe this is the",
    "start": "1081679",
    "end": "1087679"
  },
  {
    "text": "two terms that we should be using consistently and then the confusion totally goes away because if you say",
    "start": "1087679",
    "end": "1092799"
  },
  {
    "text": "static interface then it it should be clear so prefer to use the term static",
    "start": "1092799",
    "end": "1099080"
  },
  {
    "text": "interface to express the intent to create a family of types a static family of",
    "start": "1099080",
    "end": "1105799"
  },
  {
    "text": "types an static interface is a pattern it's something that you consciously to",
    "start": "1105799",
    "end": "1111120"
  },
  {
    "text": "create this this connection unfortunately because it's a design pattern explicit object",
    "start": "1111120",
    "end": "1116360"
  },
  {
    "text": "parameters much an implementation detail simply cannot replace c2p and prefer to use the term mixin to",
    "start": "1116360",
    "end": "1124520"
  },
  {
    "text": "express the intent to inherit implementation details from a base class now it's not about the base it's about",
    "start": "1124520",
    "end": "1131760"
  },
  {
    "text": "adding this functionality to another class this makes in that is an implementation detail",
    "start": "1131760",
    "end": "1139039"
  },
  {
    "text": "and that can very well be replaced by explicit object parameters they are a pretty elegant pretty good alternative",
    "start": "1139039",
    "end": "1145480"
  },
  {
    "text": "to the good old crtp all",
    "start": "1145480",
    "end": "1150960"
  },
  {
    "text": "right but now of course some of you say wait a second C I'm not entirely",
    "start": "1150960",
    "end": "1158360"
  },
  {
    "text": "convinced about what you're saying here no no no no no no no crtp has always been a little special",
    "start": "1158360",
    "end": "1165600"
  },
  {
    "text": "technically contrived Etc isn't it just much easier to replace",
    "start": "1165600",
    "end": "1170760"
  },
  {
    "text": "RTP entirely also for these static concepts with a c+2 concept isn't this",
    "start": "1170760",
    "end": "1176760"
  },
  {
    "text": "just what we should do today that's an interesting thought so let's take a look so I've now",
    "start": "1176760",
    "end": "1185440"
  },
  {
    "text": "re um recreated this animal sheep example but now really differently the",
    "start": "1185440",
    "end": "1190679"
  },
  {
    "text": "Sheep class itself is now a standalone class there's no Base Class anymore there's also no template parameters",
    "start": "1190679",
    "end": "1196640"
  },
  {
    "text": "sheep just has Mak sound function the base class now has been replaced by",
    "start": "1196640",
    "end": "1201919"
  },
  {
    "text": "a concept a concept that just clearly expresses that every animal has Mak",
    "start": "1201919",
    "end": "1207000"
  },
  {
    "text": "sound function member function indeed and if I now write a print",
    "start": "1207000",
    "end": "1212559"
  },
  {
    "text": "function which actually is um can be before the Sheep because it's independent if I write a print function",
    "start": "1212559",
    "end": "1219559"
  },
  {
    "text": "that takes some animal expressed explicitly with the um with this concept",
    "start": "1219559",
    "end": "1225280"
  },
  {
    "text": "then uh I can call make sound and know that this is to work because I can only",
    "start": "1225280",
    "end": "1231000"
  },
  {
    "text": "pass things that do have make sound like the Sheep that's it right this is pretty",
    "start": "1231000",
    "end": "1237159"
  },
  {
    "text": "much the same thing no it's not so what can I pass to print can pass",
    "start": "1237159",
    "end": "1245480"
  },
  {
    "text": "the Sheep pass anything I can pass this guy here I can be printed too I can also",
    "start": "1245480",
    "end": "1253960"
  },
  {
    "text": "pass this guy me too and this one",
    "start": "1253960",
    "end": "1259159"
  },
  {
    "text": "it is logical assume that I can be printed too anything can be printed and",
    "start": "1259159",
    "end": "1264240"
  },
  {
    "text": "you know who we call this duct typing okay now you get the reference this is",
    "start": "1264240",
    "end": "1269320"
  },
  {
    "text": "what we call duct typing anything can be printed as long as it has a Mak sound function that's definitely not the same",
    "start": "1269320",
    "end": "1276520"
  },
  {
    "text": "thing really not because accidentally I could now print something that has",
    "start": "1276520",
    "end": "1281720"
  },
  {
    "text": "nothing to do with my idea of printing so I admit yes the concept that",
    "start": "1281720",
    "end": "1288840"
  },
  {
    "text": "is a nice one but we have to do something else we have to introduce something that really creates a family",
    "start": "1288840",
    "end": "1294440"
  },
  {
    "text": "of types an explicit family family that really knows it belongs together like a",
    "start": "1294440",
    "end": "1301000"
  },
  {
    "text": "like a tag class so I introduced some empty animal",
    "start": "1301000",
    "end": "1306559"
  },
  {
    "text": "tag and additionally I say that animals must have a makon function but they also",
    "start": "1306559",
    "end": "1312559"
  },
  {
    "text": "must be derived from animal tag that's now a precondition for animals print is",
    "start": "1312559",
    "end": "1318960"
  },
  {
    "text": "unchanged it now accepts animals but now the Sheep class is required to ex",
    "start": "1318960",
    "end": "1325320"
  },
  {
    "text": "explicitly derive from animal tack in order to be an animal in my",
    "start": "1325320",
    "end": "1332400"
  },
  {
    "text": "context and that's exactly what static interface is about it's about creating this family of types A specific group of",
    "start": "1332400",
    "end": "1340200"
  },
  {
    "text": "types that opts into being an animal and now this poor guy cannot be printed",
    "start": "1340200",
    "end": "1346960"
  },
  {
    "text": "anymore me neither and it's logic to assume that I'm on printable now as well",
    "start": "1346960",
    "end": "1353159"
  },
  {
    "text": "so suddenly it's not duct typing anymore Suddenly It's specific that this is exactly what static interface is about",
    "start": "1353159",
    "end": "1359440"
  },
  {
    "text": "this is what we've used CTP for and so okay I give you that also CTP",
    "start": "1359440",
    "end": "1366120"
  },
  {
    "text": "for this application has an alternative perhaps a more modern one but note it's",
    "start": "1366120",
    "end": "1372400"
  },
  {
    "text": "still has to be a base class it has to be something that cannot accidentally happen it has to be something that",
    "start": "1372400",
    "end": "1378559"
  },
  {
    "text": "explicitly happens this explicit optin so it has to be a base class and cannot be some uh some member some uh member",
    "start": "1378559",
    "end": "1386200"
  },
  {
    "text": "type whatever this could happen accidentally all right so still prefer",
    "start": "1386200",
    "end": "1394360"
  },
  {
    "text": "um to use the term static interface to express this creation of a static family of types and okay perhaps there's an",
    "start": "1394360",
    "end": "1401679"
  },
  {
    "text": "alternative CP but still I I would say this is not totally out of the game c",
    "start": "1401679",
    "end": "1406799"
  },
  {
    "text": "might still be interesting and same as before mixins Oh yeah this",
    "start": "1406799",
    "end": "1412840"
  },
  {
    "text": "is definitely something that today I would Implement by means of explicit object parameters it's just simpler more",
    "start": "1412840",
    "end": "1421120"
  },
  {
    "text": "beautiful good all right so much for",
    "start": "1421120",
    "end": "1426720"
  },
  {
    "text": "crtp let's talk a little bit about the other thing",
    "start": "1426720",
    "end": "1432519"
  },
  {
    "text": "variant variant so let's start with a",
    "start": "1433080",
    "end": "1439000"
  },
  {
    "text": "um a toy example okay some people know me some people know that I have a go-to",
    "start": "1439000",
    "end": "1445840"
  },
  {
    "text": "classic example H and I know it's it's still boring but I'm still going to use it today we're going to draw a couple of",
    "start": "1445840",
    "end": "1453000"
  },
  {
    "text": "shapes again yeah I I don't think it's funny anymore but I I didn't find a better",
    "start": "1453000",
    "end": "1459799"
  },
  {
    "text": "example I'm I'm sorry I apologize however today I'm actually setting a um",
    "start": "1459799",
    "end": "1465559"
  },
  {
    "text": "a couple of requirements I want to be able to introduce new kinds of shapes like ellipses rectangles perap a couple of",
    "start": "1465559",
    "end": "1472279"
  },
  {
    "text": "triangles to I want to be able to add new triangles later so it should be extendable in new",
    "start": "1472279",
    "end": "1479720"
  },
  {
    "text": "kinds of shapes good I expect that this happens in a big",
    "start": "1479720",
    "end": "1484760"
  },
  {
    "text": "code base so we're talking about 10 Millions plus lines of code not just 200 lines as usual lightwear examples and I",
    "start": "1484760",
    "end": "1492840"
  },
  {
    "text": "think this is also a project that is developed by 100 plus developers so we thinking big we're thinking large",
    "start": "1492840",
    "end": "1500120"
  },
  {
    "text": "scale all right then um how could we how could we draw shapes well of",
    "start": "1500120",
    "end": "1508000"
  },
  {
    "text": "course we could start with an inheritance hierarchy a shape based class virtual structor of course but",
    "start": "1508000",
    "end": "1514559"
  },
  {
    "text": "also for our case now the most important function a virtual draw function there's",
    "start": "1514559",
    "end": "1519799"
  },
  {
    "text": "several other virtual functions as well but draw is the important one then circles as one example would",
    "start": "1519799",
    "end": "1527640"
  },
  {
    "text": "inherit from shape but now here's the issue the circle now would have to",
    "start": "1527640",
    "end": "1533720"
  },
  {
    "text": "implement draw simply because this is the bidding of the base class but Circle doesn't want to really",
    "start": "1533720",
    "end": "1540760"
  },
  {
    "text": "Circle doesn't want to know about Graphics libraries about how to draw",
    "start": "1540760",
    "end": "1546480"
  },
  {
    "text": "itself this is way of throwing a design pattern the strategy design pattern so",
    "start": "1546480",
    "end": "1552799"
  },
  {
    "text": "we're going to introduce a base class called Draw strategy that thing it's going to",
    "start": "1552799",
    "end": "1558760"
  },
  {
    "text": "represent the implementation details of drawing that thing um is able to yeah uh",
    "start": "1558760",
    "end": "1564919"
  },
  {
    "text": "draw a concrete shape could be Circle could be square something else now this is exactly what the circle uses so it",
    "start": "1564919",
    "end": "1572320"
  },
  {
    "text": "expects a draw strategy in its Constructor it stores this draw strategy as a member whenever somebody calls draw",
    "start": "1572320",
    "end": "1579520"
  },
  {
    "text": "this draw strategy this drawer is used to draw the circle nice so it's testable",
    "start": "1579520",
    "end": "1586200"
  },
  {
    "text": "it's flexible it has a lot of very positive qualities okay just to have another one",
    "start": "1586200",
    "end": "1593279"
  },
  {
    "text": "because else Circle would feel so lonely there's a square to there other shapes as well but it's pretty much the same",
    "start": "1593279",
    "end": "1600960"
  },
  {
    "text": "thing now I have this Base Class shape based class so I can now actually store",
    "start": "1600960",
    "end": "1607679"
  },
  {
    "text": "a lot of shapes in a vector of shapes a vector of unique pointers of shape it's",
    "start": "1607679",
    "end": "1614039"
  },
  {
    "text": "what are called shapes it's shorter it's it's quite convenient okay but there more I need to create",
    "start": "1614039",
    "end": "1621320"
  },
  {
    "text": "these shapes too how do we do this well I would like to abstract this too so I introduce a",
    "start": "1621320",
    "end": "1628320"
  },
  {
    "text": "shapes Factory oh that's a favorite term of many people I know I know but still stay",
    "start": "1628320",
    "end": "1635520"
  },
  {
    "text": "here it it's not as bad as it looks like so we'll have a shape Factory that creates shapes meaning a vector of",
    "start": "1635520",
    "end": "1642440"
  },
  {
    "text": "shapes based on some file some content that we par and then read all the shapes",
    "start": "1642440",
    "end": "1648200"
  },
  {
    "text": "from that good and then we can draw all the shapes some function that just runs over",
    "start": "1648200",
    "end": "1654600"
  },
  {
    "text": "all the given shapes and a vector and called draw good and last but not least because",
    "start": "1654600",
    "end": "1661799"
  },
  {
    "text": "we can create them we can draw them why not have a create and draw shapes function it takes a strategy some input",
    "start": "1661799",
    "end": "1667640"
  },
  {
    "text": "file name and it first creates the shapes and it draws them all",
    "start": "1667640",
    "end": "1672880"
  },
  {
    "text": "nice all right now that all of this in place can actually start to do some real work",
    "start": "1672880",
    "end": "1679080"
  },
  {
    "text": "so we could for instance do the drawing by means of open gel this is what my open gel drawer does open gel drawer has",
    "start": "1679080",
    "end": "1686399"
  },
  {
    "text": "a couple of Base classes because it implements the draw Str for Circle and for square potentially a few more and so",
    "start": "1686399",
    "end": "1693320"
  },
  {
    "text": "it implements the a couple of draw functions by means of open gel of course",
    "start": "1693320",
    "end": "1698919"
  },
  {
    "text": "so it's do with colors textures transparencies whatever is required and then of course I can",
    "start": "1698919",
    "end": "1704720"
  },
  {
    "text": "introduce some shapes Factory that's a lot of code you do not have to read this the one important",
    "start": "1704720",
    "end": "1711080"
  },
  {
    "text": "thing is that we now read something from file for instance detect that circle is specified and we read a circle from file",
    "start": "1711080",
    "end": "1717919"
  },
  {
    "text": "perhaps it's a square and we read a square from file we package everything into this Vector of shapes and in the",
    "start": "1717919",
    "end": "1723720"
  },
  {
    "text": "end return that thing good nice all right and with all of this",
    "start": "1723720",
    "end": "1730120"
  },
  {
    "text": "we're done we can create a factory and we can call create and draw shapes to",
    "start": "1730120",
    "end": "1736760"
  },
  {
    "text": "just read everything from this file and draw this stuff great isn't it beautiful it works",
    "start": "1736760",
    "end": "1744760"
  },
  {
    "text": "however um let's let's think a little bit about um our design again there's",
    "start": "1744760",
    "end": "1751519"
  },
  {
    "text": "one very important aspect that I'm not focusing on and it happens right here",
    "start": "1751519",
    "end": "1757159"
  },
  {
    "text": "right here there's a line implicit at first but now visualized that's an",
    "start": "1757159",
    "end": "1763880"
  },
  {
    "text": "architectural boundary and this is a pretty important Point here",
    "start": "1763880",
    "end": "1769000"
  },
  {
    "text": "because well you and me we want to work together you want to do some stuff I want to do some",
    "start": "1769000",
    "end": "1775120"
  },
  {
    "text": "stuff okay I know that high level and low level is always a little confusing stable VA okay let's make it simple for",
    "start": "1775120",
    "end": "1782679"
  },
  {
    "text": "today this is my code this is your code okay so in my code I just want to get a",
    "start": "1782679",
    "end": "1790480"
  },
  {
    "text": "couple of shapes I want to draw them but I don't care which shapes I really really don't care a",
    "start": "1790480",
    "end": "1796159"
  },
  {
    "text": "lot but have everything in place that this now works a lot it works very well",
    "start": "1796159",
    "end": "1801320"
  },
  {
    "text": "so you can now if you want to introduce a rectangle your your geometry of choice",
    "start": "1801320",
    "end": "1807360"
  },
  {
    "text": "yeah you you you do something again not important to uh look this through but again there's of course a draw function",
    "start": "1807360",
    "end": "1813799"
  },
  {
    "text": "that you configure by means of some draw strategy all right you can also if you want to",
    "start": "1813799",
    "end": "1820880"
  },
  {
    "text": "introduce the according open Gill functionality it's on your side of the code you selected open Gill and I don't",
    "start": "1820880",
    "end": "1827720"
  },
  {
    "text": "really care about this so you just implement the new draw function for the rectangle and you again you can",
    "start": "1827720",
    "end": "1835039"
  },
  {
    "text": "introduce the according code to read rectangles from files",
    "start": "1835039",
    "end": "1840080"
  },
  {
    "text": "also nice there's no change in here yeah we can still do the same thing in the main",
    "start": "1840679",
    "end": "1847120"
  },
  {
    "text": "function it works right it works it just works you can do what you want I can do",
    "start": "1847120",
    "end": "1853880"
  },
  {
    "text": "what I want we're both happy people",
    "start": "1853880",
    "end": "1858799"
  },
  {
    "text": "okay now you look a little unhappy at this point this may be because um it's it's",
    "start": "1859039",
    "end": "1866279"
  },
  {
    "text": "early in the morning but this can also be because perhaps you do not like this",
    "start": "1866279",
    "end": "1872279"
  },
  {
    "text": "style of programming anymore and okay perhaps I've just the talk to kind of represent what I mean uh",
    "start": "1872279",
    "end": "1880000"
  },
  {
    "text": "oh not the talk first the book so the style of programming this is um you know the book",
    "start": "1880000",
    "end": "1886159"
  },
  {
    "text": "probably you've seen it at least perhaps some people have even looked into the book this is what referred to as the gang of four book gang of four because",
    "start": "1886159",
    "end": "1892919"
  },
  {
    "text": "of the four authors and it's a classic this year it actually turns 30 now 30 years ago these four people collected",
    "start": "1892919",
    "end": "1900039"
  },
  {
    "text": "design patterns classic objectoriented solutions to common problems and so the",
    "start": "1900039",
    "end": "1906240"
  },
  {
    "text": "style that you just saw is pretty much from this book the GOL style yeah the GOL style where inheritance and virtual",
    "start": "1906240",
    "end": "1912480"
  },
  {
    "text": "functions pretty much are the answer to all the problems okay almost 21 of the 23 patterns based on",
    "start": "1912480",
    "end": "1920320"
  },
  {
    "text": "inheritance but exactly you may remember this",
    "start": "1920559",
    "end": "1925880"
  },
  {
    "text": "talk perhaps you've heard about it at least inheritance is the base class of",
    "start": "1925880",
    "end": "1932159"
  },
  {
    "text": "evil even after all this years I kind of like the title it's funny it's a clever choice of words however apparently this",
    "start": "1932159",
    "end": "1939120"
  },
  {
    "text": "talk tells us do not use inheritance it's bad it's evil it's it's right here",
    "start": "1939120",
    "end": "1944880"
  },
  {
    "text": "in the talk so based on that of course people kind of people kind of got the",
    "start": "1944880",
    "end": "1950840"
  },
  {
    "text": "message so talk from 2022 using modern to eliminate virtual",
    "start": "1950840",
    "end": "1960080"
  },
  {
    "text": "functions sounds kind of aggressive eliminate virtual functions but I think",
    "start": "1960279",
    "end": "1965919"
  },
  {
    "text": "that's kind of the spirit and a little bit what I said in the beginning too we don't like virtual function anymore",
    "start": "1965919",
    "end": "1971120"
  },
  {
    "text": "they're too slow that's not the style of programming you use anymore also might have been last year",
    "start": "1971120",
    "end": "1978880"
  },
  {
    "text": "or the year before I think it was the year before to one of my um submissions to some conference I got this review",
    "start": "1978880",
    "end": "1986120"
  },
  {
    "text": "from uh so this feedback from a reviewer um for one of our talks I believe that object programming",
    "start": "1986120",
    "end": "1994120"
  },
  {
    "text": "and especially its Theory are overestimated C+ has always had templates and now also has stood variant",
    "start": "1994120",
    "end": "2000919"
  },
  {
    "text": "which makes the use of inheritance unnecessary oh the",
    "start": "2000919",
    "end": "2008360"
  },
  {
    "text": "variant so if you're not used to variant before beautiful and of course that's",
    "start": "2008360",
    "end": "2014760"
  },
  {
    "text": "the solution to all the problems right St variant the the solution to replace",
    "start": "2014760",
    "end": "2021600"
  },
  {
    "text": "inheritance hierarchies so let's use this let's modernize our code with a stud variant so I start with a circle",
    "start": "2021600",
    "end": "2030000"
  },
  {
    "text": "class note there's no Base Class anymore yeah no base class at all um there's",
    "start": "2030000",
    "end": "2036720"
  },
  {
    "text": "also no virtual function pry much circle is at the top of the entire file meaning there's also no draw",
    "start": "2036720",
    "end": "2043600"
  },
  {
    "text": "functionality that's totally decoupled from this this is good Square the same",
    "start": "2043600",
    "end": "2049280"
  },
  {
    "text": "squares rectangles triangles it's pretty much the same thing so no inheritance no",
    "start": "2049280",
    "end": "2055040"
  },
  {
    "text": "dependency on Graphics code no base pointer anywhere nice I also will not",
    "start": "2055040",
    "end": "2061320"
  },
  {
    "text": "you will see this more uh in later there's no manual lifetime management anymore and it's just so much less code",
    "start": "2061320",
    "end": "2066839"
  },
  {
    "text": "to write so much simpler",
    "start": "2066839",
    "end": "2072520"
  },
  {
    "text": "good then the shape uh type has been replaced by a variant variant of circle",
    "start": "2072520",
    "end": "2080240"
  },
  {
    "text": "square or potentially also a couple of other shapes so this now is pretty much",
    "start": "2080240",
    "end": "2085560"
  },
  {
    "text": "my abstraction of shapes hence the name the variant now represents a",
    "start": "2085560",
    "end": "2090720"
  },
  {
    "text": "shape and I directly store a couple of variants in the vector no more unique",
    "start": "2090720",
    "end": "2096679"
  },
  {
    "text": "pointer noal point at all simpler it's just simpler",
    "start": "2096679",
    "end": "2104000"
  },
  {
    "text": "good now the shapes Factory okay it's not much shorter but perhaps a little simpler because I do not have to make",
    "start": "2104000",
    "end": "2111079"
  },
  {
    "text": "unique circles and squares anymore I just create objects values put them in",
    "start": "2111079",
    "end": "2116640"
  },
  {
    "text": "the vector I think this is definitely an improvement okay and also no inheritance",
    "start": "2116640",
    "end": "2123320"
  },
  {
    "text": "necessary there's no shape Factory based class anywhere it's just the factory itself",
    "start": "2123320",
    "end": "2128920"
  },
  {
    "text": "okay this is what I said now of course there's another opportunity to use a variant let's use",
    "start": "2128920",
    "end": "2135119"
  },
  {
    "text": "it so we have a factory which at this point is just a varant of the shapes",
    "start": "2135119",
    "end": "2140359"
  },
  {
    "text": "Factory but it could be more oh great all right then the open gel",
    "start": "2140359",
    "end": "2146440"
  },
  {
    "text": "drawer that pretty much is the same as before but again no Base Class",
    "start": "2146440",
    "end": "2153440"
  },
  {
    "text": "good and perhaps a little simplified because a couple of other things might also not not be necessary okay I I think",
    "start": "2153440",
    "end": "2160079"
  },
  {
    "text": "it's in in total simpler but there's another opportunity of varant so we can now have all the drawers the different",
    "start": "2160079",
    "end": "2166839"
  },
  {
    "text": "draw implementations in a variant at this point maybe just one",
    "start": "2166839",
    "end": "2172839"
  },
  {
    "text": "okay so and here oh one of the most most interesting lines that I have draw",
    "start": "2172839",
    "end": "2178839"
  },
  {
    "text": "shapes now traverses all the shapes in the given Vector but it also at the same time um",
    "start": "2178839",
    "end": "2185960"
  },
  {
    "text": "uses this visit of course I'm visiting the variant but now I have two things I have",
    "start": "2185960",
    "end": "2194000"
  },
  {
    "text": "the uh shape I have a drawer well I'm just using multi dispatch with a visit",
    "start": "2194000",
    "end": "2199319"
  },
  {
    "text": "function I pass two things the drawer into shape two variants and the two",
    "start": "2199319",
    "end": "2206040"
  },
  {
    "text": "things are just combined oh this is this is amazing multi- dispatching C++ but just a single",
    "start": "2206040",
    "end": "2212720"
  },
  {
    "text": "very simple line of code create in shapes pretty much the",
    "start": "2212720",
    "end": "2218839"
  },
  {
    "text": "same most but okay the visit uh is is now used as well and then in the main function I",
    "start": "2218839",
    "end": "2226800"
  },
  {
    "text": "would um I would simply create a factory some drawer and I put them together in",
    "start": "2226800",
    "end": "2232119"
  },
  {
    "text": "the create and draw shapes call",
    "start": "2232119",
    "end": "2239040"
  },
  {
    "text": "good and I think you you kind of agree so much better there's no inheritance",
    "start": "2239040",
    "end": "2246319"
  },
  {
    "text": "that's a pretty functional approach very clean I I would say",
    "start": "2246319",
    "end": "2251560"
  },
  {
    "text": "simpler there's no smart pointers yeah not even not raw pointers with",
    "start": "2251560",
    "end": "2257359"
  },
  {
    "text": "values then um there's no no um management of Graphics code this is just",
    "start": "2257359",
    "end": "2263680"
  },
  {
    "text": "extracted no dependence in that this is fantastic lifetime management is also",
    "start": "2263680",
    "end": "2270280"
  },
  {
    "text": "much simplified it's less code to write it's so much simpler and on top of that",
    "start": "2270280",
    "end": "2277880"
  },
  {
    "text": "it even has better performance oh now of course now people",
    "start": "2277880",
    "end": "2285480"
  },
  {
    "text": "are staring at me performance now close I want proof okay I get that",
    "start": "2285480",
    "end": "2293800"
  },
  {
    "text": "but performance this is usually the toughest part of any talk yeah if somebody",
    "start": "2293800",
    "end": "2299720"
  },
  {
    "text": "presents performance results in the end it's always uh bickering about little",
    "start": "2299720",
    "end": "2304960"
  },
  {
    "text": "differences oh and my compil it's different oh and my of something else okay now I'm going to actually show you",
    "start": "2304960",
    "end": "2311040"
  },
  {
    "text": "a couple of performance results I do but only under one condition so you promise",
    "start": "2311040",
    "end": "2319640"
  },
  {
    "text": "that you will not complain about my performance results can you do",
    "start": "2319640",
    "end": "2326040"
  },
  {
    "text": "that okay so I take this as yes good so they are really not do not take",
    "start": "2326400",
    "end": "2332800"
  },
  {
    "text": "them too serious this is just qualitative results on my machine but still I should show what I'm doing so I",
    "start": "2332800",
    "end": "2339040"
  },
  {
    "text": "have six different kinds of shapes circles squares ellipses rectangles hexagons and pentagons please do not",
    "start": "2339040",
    "end": "2344800"
  },
  {
    "text": "expect that I took the time to really Implement a full-fledged flexible hexagon it's an equal sided hexagon Al a",
    "start": "2344800",
    "end": "2352760"
  },
  {
    "text": "pentagon I'm using a 10,000 randomly generated shapes I perform two thou 25,000",
    "start": "2352760",
    "end": "2360040"
  },
  {
    "text": "translit operations each one of them which means um it's a super simple cheap",
    "start": "2360040",
    "end": "2365200"
  },
  {
    "text": "operation this actually reveals the real performance difference in the uh in intrinsic setup itself and I'm",
    "start": "2365200",
    "end": "2372119"
  },
  {
    "text": "benchmarking with I would say recent compilers GCC 13.2 and clang",
    "start": "2372119",
    "end": "2378319"
  },
  {
    "text": "18.14 okay and last but not least my machine that I used was an8 core Intel Core A7",
    "start": "2378319",
    "end": "2384480"
  },
  {
    "text": "with decent decent numbers good so the performance on my",
    "start": "2384480",
    "end": "2391200"
  },
  {
    "text": "machine this classic objectoriented solution that you just saw runs in this time I again please don't make it a race",
    "start": "2391200",
    "end": "2399359"
  },
  {
    "text": "between GC and cl totally irrelevant if I use St",
    "start": "2399359",
    "end": "2404720"
  },
  {
    "text": "variant okay GCC much better CL not so much but there is another very popular",
    "start": "2404760",
    "end": "2410920"
  },
  {
    "text": "variant implementation on GitHub impark variant if you use this one both compilers agree much",
    "start": "2410920",
    "end": "2419839"
  },
  {
    "text": "faster faster and again if you see these numbers twice as fast you're making",
    "start": "2420160",
    "end": "2426560"
  },
  {
    "text": "plans for the next week quick I'm going to replace all my inheritance hieres with",
    "start": "2426560",
    "end": "2431599"
  },
  {
    "text": "variant okay I can already kind of give you the the gist of this time please",
    "start": "2431599",
    "end": "2437760"
  },
  {
    "text": "don't yeah please do not make plans for that too because let's let's take a look it looks like",
    "start": "2437760",
    "end": "2445640"
  },
  {
    "text": "this is just fantastic it's fast it's it's simple it's beautiful it really is",
    "start": "2445640",
    "end": "2450880"
  },
  {
    "text": "no doubt here let's talk about design again so again I'm trying to find the",
    "start": "2450880",
    "end": "2458119"
  },
  {
    "text": "point where we can separate concerns yeah where your code start uh ends and my code starts or vice",
    "start": "2458119",
    "end": "2463920"
  },
  {
    "text": "versa uh keep it simple for now let's let's do it um right here so I think",
    "start": "2463920",
    "end": "2469920"
  },
  {
    "text": "these two functions draw shapes and create draw create and draw shapes that's my functions I think so this is",
    "start": "2469920",
    "end": "2475960"
  },
  {
    "text": "my two functions I want to draw all the shapes not knowing what they are and I want to create and draw them okay this",
    "start": "2475960",
    "end": "2482640"
  },
  {
    "text": "is your code okay of course it's kind of incomplete",
    "start": "2482640",
    "end": "2488119"
  },
  {
    "text": "I don't want to know about the open gel drawer I'm not interested in open gel at",
    "start": "2488119",
    "end": "2493880"
  },
  {
    "text": "all you may be I'm not and so the open Gill drawer that's your code so that",
    "start": "2493880",
    "end": "2500359"
  },
  {
    "text": "goes into your code of course okay that's yours uh oh oh okay there's one little",
    "start": "2500359",
    "end": "2508240"
  },
  {
    "text": "wrinkle drawer that type is actually used in my type my my",
    "start": "2508240",
    "end": "2514480"
  },
  {
    "text": "function okay okay perhaps I was a little too to Quick that of course kind of still belongs to me",
    "start": "2514480",
    "end": "2522760"
  },
  {
    "text": "okay oh oh no open gel drawer I I don't know want to know about",
    "start": "2522760",
    "end": "2529319"
  },
  {
    "text": "the open gel drawer that's not my stuff but now it's still my",
    "start": "2529319",
    "end": "2535400"
  },
  {
    "text": "thing so it doesn't work it really doesn't work to be honest from an architectural",
    "start": "2535400",
    "end": "2542520"
  },
  {
    "text": "point of view with our set goals this actually is an architectural disaster total",
    "start": "2542520",
    "end": "2548480"
  },
  {
    "text": "it doesn't give us what we actually want to have standard variant doesn't hide any any type it very much declares all these",
    "start": "2548480",
    "end": "2555880"
  },
  {
    "text": "types up front it's in the type variant of blah blah blah these types are visible everywhere I have a dependency",
    "start": "2555880",
    "end": "2561960"
  },
  {
    "text": "on these types I cannot simply extend them so sen Rance is definitely not a",
    "start": "2561960",
    "end": "2568599"
  },
  {
    "text": "silver bullet and most definitely it's not a replacement for virtual functions",
    "start": "2568599",
    "end": "2574599"
  },
  {
    "text": "cannot be never has been will not be on the contrary Z variant is pretty much",
    "start": "2574599",
    "end": "2580800"
  },
  {
    "text": "the architectural antipode of virtual functions the opposite how well let's let's quickly",
    "start": "2580800",
    "end": "2588160"
  },
  {
    "text": "compare variant versus virtual functions so first of all because also here I think there's kind of confusion standard",
    "start": "2588160",
    "end": "2595640"
  },
  {
    "text": "variant still is dynamic poic just as virtual functions are at runtime A dispatch at runtime I know what to",
    "start": "2595640",
    "end": "2602440"
  },
  {
    "text": "do this I would say is a little functional programming this object orent programming",
    "start": "2602440",
    "end": "2608319"
  },
  {
    "text": "but this this makes the difference actually because in a variant context you work with a fixed set of types it's",
    "start": "2608319",
    "end": "2616359"
  },
  {
    "text": "in the variant type itself this is the fixed set of types you work with this is not supposed to be",
    "start": "2616359",
    "end": "2621920"
  },
  {
    "text": "extendable but an objectoriented setting the idea is to enable an open set of",
    "start": "2621920",
    "end": "2627559"
  },
  {
    "text": "types but then with functions it's just the the other way around with a variant",
    "start": "2627559",
    "end": "2632800"
  },
  {
    "text": "you can very easily very conveniently introduce new operations on this fixed set of types you you have an open set of",
    "start": "2632800",
    "end": "2638920"
  },
  {
    "text": "operations but with the virtual functions you have a close set of operations you cannot just add a new",
    "start": "2638920",
    "end": "2644200"
  },
  {
    "text": "virtual function into a base class and nothing else will have to be done now that that is a difficult thing to",
    "start": "2644200",
    "end": "2650880"
  },
  {
    "text": "do and so you see it's pretty much the opposite so you cannot simply replace",
    "start": "2650880",
    "end": "2656119"
  },
  {
    "text": "them and how is pretty much because after all this is a pattern other aign",
    "start": "2656119",
    "end": "2661400"
  },
  {
    "text": "pattern we call this the visitor design pattern that that's what basically hides",
    "start": "2661400",
    "end": "2666800"
  },
  {
    "text": "behind this idea and so what I think many people fail to realize is that",
    "start": "2666800",
    "end": "2672680"
  },
  {
    "text": "standard variant is indeed not a replacement for virtual functions it really shouldn't be used as such it's",
    "start": "2672680",
    "end": "2677960"
  },
  {
    "text": "something different a specific solution for a specific",
    "start": "2677960",
    "end": "2683720"
  },
  {
    "text": "problem good so you know I've seen perhaps a common pattern between these two patterns now they're not directly",
    "start": "2683720",
    "end": "2691520"
  },
  {
    "text": "and um they're not good replacements of virtual functions no they're not so so",
    "start": "2691520",
    "end": "2697160"
  },
  {
    "text": "neither crtp nor is the variant are replacements for virtual functions generally always think about",
    "start": "2697160",
    "end": "2704319"
  },
  {
    "text": "design patterns as some dependency structure this is what they are every pattern with every name introduces a",
    "start": "2704319",
    "end": "2711400"
  },
  {
    "text": "different dependency structure what depends on what what is um what needs",
    "start": "2711400",
    "end": "2716640"
  },
  {
    "text": "something else because of that design patterns have some architectural properties yeah",
    "start": "2716640",
    "end": "2722559"
  },
  {
    "text": "it so it matters which pattern you choose you want a certain design and",
    "start": "2722559",
    "end": "2728000"
  },
  {
    "text": "architecture so you cannot just replace one design pattern with another one believing that this will not make any",
    "start": "2728000",
    "end": "2733960"
  },
  {
    "text": "difference and I think this is what currently is is forgotten this is why we talk about let's get rid of virtual",
    "start": "2733960",
    "end": "2740880"
  },
  {
    "text": "functions this design aspect seems to be overlooked too much so please final",
    "start": "2740880",
    "end": "2746599"
  },
  {
    "text": "guideline think about your design architecture first what do I want to do what do you want to extend how do you",
    "start": "2746599",
    "end": "2752520"
  },
  {
    "text": "want to move forward in the future and after that you think how to implement that",
    "start": "2752520",
    "end": "2757800"
  },
  {
    "text": "and so if you decide that you need a lot of new types later that you want others to write new types A is just not a",
    "start": "2757800",
    "end": "2764960"
  },
  {
    "text": "solution and so consider only the patterns SL abstractions that fit your design I think that that's the the right",
    "start": "2764960",
    "end": "2771520"
  },
  {
    "text": "thing to do first the design then the implementation and please do not design based on performance requirements I mean",
    "start": "2771520",
    "end": "2778319"
  },
  {
    "text": "sure performance is important but I think maintainability in future might be much more important at least for for",
    "start": "2778319",
    "end": "2785400"
  },
  {
    "text": "most of us and so architecture and design",
    "start": "2785400",
    "end": "2791160"
  },
  {
    "text": "first okay thank you very",
    "start": "2791160",
    "end": "2795078"
  },
  {
    "text": "much all right so we have a lot of time left um sometime are there any",
    "start": "2801359",
    "end": "2808640"
  },
  {
    "text": "questions okay and remember you promised not to complain about my performance results so these questions are out",
    "start": "2810559",
    "end": "2818520"
  },
  {
    "text": "but if not thank you much and enjoy the rest of the conference",
    "start": "2818520",
    "end": "2824558"
  }
]