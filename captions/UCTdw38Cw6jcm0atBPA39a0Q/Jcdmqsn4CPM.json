[
  {
    "text": "all right hi welcome everybody let's talk about",
    "start": "2159",
    "end": "9639"
  },
  {
    "text": "guidelines so um my name is Anor Metz I'm a software engineer at s engineering",
    "start": "9639",
    "end": "16880"
  },
  {
    "text": "we do mostly contract work for all kinds of companies um I mostly working on",
    "start": "16880",
    "end": "24840"
  },
  {
    "text": "better projects but not exclusively I've been working with C+",
    "start": "24840",
    "end": "30080"
  },
  {
    "text": "Plus for about two decades but um this talk is explicitly not entirely C++",
    "start": "30080",
    "end": "37960"
  },
  {
    "text": "specific so it's it's more General if you're looking for code you really have to pay attention because I think there",
    "start": "37960",
    "end": "44320"
  },
  {
    "text": "are two slides with code and the rest is not really about code it's about",
    "start": "44320",
    "end": "49399"
  },
  {
    "text": "guidelines and um on the side I'm a trainer for C++ and for all things maintainable code",
    "start": "49399",
    "end": "57440"
  },
  {
    "text": "clean code stuff unit testing and so on in my N9 years at cirle I've worked in",
    "start": "57440",
    "end": "66520"
  },
  {
    "text": "about 12 projects for different lengths sometimes just a few Mon Mon um just a",
    "start": "66520",
    "end": "72560"
  },
  {
    "text": "few months um sometimes multiple years and different Industries different",
    "start": "72560",
    "end": "77759"
  },
  {
    "text": "environments but all these projects had one common Baseline they had some kind",
    "start": "77759",
    "end": "83240"
  },
  {
    "text": "of style guide guidelines document something in that area often provided by by our customers",
    "start": "83240",
    "end": "91799"
  },
  {
    "text": "sometimes provided by the project team which could mean either a team completely from our company or a team",
    "start": "91799",
    "end": "97880"
  },
  {
    "text": "mixed developers from the customer company from us so it's it's really",
    "start": "97880",
    "end": "102920"
  },
  {
    "text": "quite different those documents are usually more or less closely followed so um in",
    "start": "102920",
    "end": "111079"
  },
  {
    "text": "some projects yeah there is a guideline document everybody ignores it and some projects you have to stick to the",
    "start": "111079",
    "end": "117479"
  },
  {
    "text": "guidelines right and these documents are at least in the last years quite often uh",
    "start": "117479",
    "end": "125119"
  },
  {
    "text": "inspired motivated by the C++ core guidelines let's do a quick warmup this",
    "start": "125119",
    "end": "131760"
  },
  {
    "text": "is not a guideline this is a proverb right who has heard of this check of all traits master of",
    "start": "131760",
    "end": "139319"
  },
  {
    "text": "none one two three four a couple hands what does it",
    "start": "139319",
    "end": "144519"
  },
  {
    "text": "mean so a common interpretation is can do everything but nothing really",
    "start": "144519",
    "end": "153239"
  },
  {
    "text": "well so not really something good right is that the actual meaning of the",
    "start": "153239",
    "end": "160640"
  },
  {
    "text": "original proverb hint it's",
    "start": "160640",
    "end": "167560"
  },
  {
    "text": "not the full proverb is Jack of all trades master of none but of times better than master of",
    "start": "167560",
    "end": "174640"
  },
  {
    "text": "one interpretation we need generalists um I learned this in my very",
    "start": "174640",
    "end": "181800"
  },
  {
    "text": "first project at Suka where I came and said um well I do want to continue doing",
    "start": "181800",
    "end": "187080"
  },
  {
    "text": "C++ because that was what I had done before I want to get out of all the insurance",
    "start": "187080",
    "end": "192519"
  },
  {
    "text": "stuff which I had done for8 years before so naturally my very first project as Su",
    "start": "192519",
    "end": "198799"
  },
  {
    "text": "was was Insurance stuff in Java JavaScript web development so no C++ at",
    "start": "198799",
    "end": "205440"
  },
  {
    "text": "all so the I was the master of one of C++",
    "start": "205440",
    "end": "210840"
  },
  {
    "text": "so I did everything else but what I actually could do so I",
    "start": "210840",
    "end": "216120"
  },
  {
    "text": "was the journalist in the project because um we had people doing JavaScript we had people doing Java way",
    "start": "216120",
    "end": "223360"
  },
  {
    "text": "longer than I had ever done so I've learned all these things on the project but I was a journalist and",
    "start": "223360",
    "end": "231319"
  },
  {
    "text": "um after a year or so our project lead um called me the",
    "start": "231319",
    "end": "236599"
  },
  {
    "text": "uh the Swiss army knife developer so basically if there's a problem and nobody has wants to solve it just give",
    "start": "236599",
    "end": "243760"
  },
  {
    "text": "it the journalist so depending on the size of the team we need journalist I mean if you're one person team that's",
    "start": "243760",
    "end": "250640"
  },
  {
    "text": "obvious right if you have 200 developers maybe you don't need a journalist but in",
    "start": "250640",
    "end": "255959"
  },
  {
    "text": "in smaller size teams five six seven people you usually need one of these",
    "start": "255959",
    "end": "262800"
  },
  {
    "text": "so what I'm going to talk about um we are going through a couple of guid",
    "start": "262800",
    "end": "269880"
  },
  {
    "text": "lines that I've seen in projects not only at Su sometimes from",
    "start": "269880",
    "end": "278280"
  },
  {
    "text": "before um I tried to figure out where they originated from what the impact is",
    "start": "278280",
    "end": "285440"
  },
  {
    "text": "of the guidelines how we found them in the projects and what we can learn from the",
    "start": "285440",
    "end": "291039"
  },
  {
    "text": "differences between the guidelin how we found them and the origins and then some",
    "start": "291039",
    "end": "297639"
  },
  {
    "text": "guidelines disclaimer with my opinions about guidelines how to deal with",
    "start": "297639",
    "end": "304479"
  },
  {
    "text": "guidelines first guideline C++ Define or delete all copy",
    "start": "304520",
    "end": "309840"
  },
  {
    "text": "move and destructive functions rule of five how does it sound for you I see a",
    "start": "309840",
    "end": "315120"
  },
  {
    "text": "shaking head anyone else good",
    "start": "315120",
    "end": "320680"
  },
  {
    "text": "there corter guidelines c21 if you define or delete any copy move or",
    "start": "320960",
    "end": "326199"
  },
  {
    "text": "destructure function then Define or delete them all",
    "start": "326199",
    "end": "331639"
  },
  {
    "text": "tiny difference even more important C20 which comes before it if you can avoid",
    "start": "331840",
    "end": "338039"
  },
  {
    "text": "defining default operations then do major difference right",
    "start": "338039",
    "end": "346000"
  },
  {
    "text": "so slightly it sounds similar but it is completely different so what's the",
    "start": "346800",
    "end": "352880"
  },
  {
    "text": "impact of having this kind of guideline in the project it leads to needless boiler",
    "start": "352880",
    "end": "358960"
  },
  {
    "text": "plate because people start to write um the the usual five everywhere I've also seen uh a rule of",
    "start": "358960",
    "end": "367160"
  },
  {
    "text": "six which includes a default Constructor so they try by force to have like default constructible objects even if",
    "start": "367160",
    "end": "373800"
  },
  {
    "text": "they shouldn't be default constructible you write sometimes needless non-rival members because um I",
    "start": "373800",
    "end": "382680"
  },
  {
    "text": "have seen people who say well I have to write a copy Constructor right I don't want to delete it so I write it",
    "start": "382680",
    "end": "390199"
  },
  {
    "text": "manual member wise assignment maybe skip a member member but these are then",
    "start": "390199",
    "end": "396479"
  },
  {
    "text": "non-trial copy Constructors while otherwise the compiler will generate trivial copy Constructors for you which",
    "start": "396479",
    "end": "403440"
  },
  {
    "text": "can turn out to be quite more performant and the wrong boiler plate",
    "start": "403440",
    "end": "409759"
  },
  {
    "text": "because well it's the fifth class I'm writing today I just write the same thing I copy paste Maybe and Just rename",
    "start": "409759",
    "end": "415720"
  },
  {
    "text": "the class name and stuff like that um can lead to to errors",
    "start": "415720",
    "end": "421520"
  },
  {
    "text": "another thing um this is the rule of five we were talking about guidelines",
    "start": "422479",
    "end": "430199"
  },
  {
    "text": "right so quote from P pirot of the Caribbean um it's more what you call",
    "start": "430199",
    "end": "438199"
  },
  {
    "text": "guidelines than actual rules so there's a difference between rules and guidelines and it's an important",
    "start": "438199",
    "end": "445960"
  },
  {
    "text": "difference developers usually love rules",
    "start": "445960",
    "end": "451280"
  },
  {
    "text": "they're very strict they're very clear we don't have to really think we just follow the rules",
    "start": "451280",
    "end": "458039"
  },
  {
    "text": "right um we're used to having rules because our compiler is very strict as",
    "start": "458039",
    "end": "463400"
  },
  {
    "text": "well if the compiler says no Then well we can't argue with it right so we have",
    "start": "463400",
    "end": "468440"
  },
  {
    "text": "to follow these rules and well often or well many rules",
    "start": "468440",
    "end": "474840"
  },
  {
    "text": "most rules can be checked automatically because they are that strict right guidelines are less",
    "start": "474840",
    "end": "482120"
  },
  {
    "text": "strict so there are exceptions to the guidelines there are R areas where the",
    "start": "482120",
    "end": "488120"
  },
  {
    "text": "guidelines don't apply and maybe we have reasons to not follow them we have more",
    "start": "488120",
    "end": "494520"
  },
  {
    "text": "freedom to either follow them or not but we also have more",
    "start": "494520",
    "end": "500560"
  },
  {
    "text": "responsibility um guidelines are formulated like avoid something prefer",
    "start": "501319",
    "end": "507000"
  },
  {
    "text": "something consider something while if I would write this as a rule",
    "start": "507000",
    "end": "512240"
  },
  {
    "text": "which I probably should have don't interpret guidelines as",
    "start": "512240",
    "end": "517719"
  },
  {
    "text": "rules okay prefer to follow the guidelines but think about whether they apply",
    "start": "517719",
    "end": "523200"
  },
  {
    "text": "right and please do provide comments when you break the guidelines and um",
    "start": "523200",
    "end": "528720"
  },
  {
    "text": "write why you didn't follow the guidelines because the people after you who read it and see why didn't they",
    "start": "528720",
    "end": "535160"
  },
  {
    "text": "follow the guidelines here they will thank you for it right",
    "start": "535160",
    "end": "540560"
  },
  {
    "text": "so please don't do this stick to the one in the core guidelines maybe have a link to the core",
    "start": "540680",
    "end": "546240"
  },
  {
    "text": "guidelines and stick to that one but um don't simplify this this guideline or the rule or",
    "start": "546240",
    "end": "552640"
  },
  {
    "text": "five how about tooling um many guidelines um who has been in",
    "start": "552640",
    "end": "561519"
  },
  {
    "text": "the talk in in the keynote this this morning many guidelines especially from the C guidelines um can be checked by",
    "start": "561519",
    "end": "568399"
  },
  {
    "text": "Clank tidy there's a huge set of guidelines and can't be can't be checked because",
    "start": "568399",
    "end": "573800"
  },
  {
    "text": "they're more wishy-washy not not really specific but",
    "start": "573800",
    "end": "579880"
  },
  {
    "text": "um many can be checked but if you have this tool enabled to check for",
    "start": "579880",
    "end": "589040"
  },
  {
    "text": "the ru of five do you actually need the rule of five in your guideline document maybe maybe",
    "start": "589040",
    "end": "596759"
  },
  {
    "text": "not another guideline found in the one don't use",
    "start": "597079",
    "end": "603079"
  },
  {
    "text": "exceptions this is different I work in embedded from we can't use exceptions because we are working on a tiny chip",
    "start": "603079",
    "end": "609040"
  },
  {
    "text": "there where there's no place for the exceptions that stuff like that the guideline that says don't use",
    "start": "609040",
    "end": "614680"
  },
  {
    "text": "exceptions who has seen this one a handful I've seen it like half a dozen",
    "start": "614680",
    "end": "622440"
  },
  {
    "text": "times or more in over the years when you ask people how do you get",
    "start": "622440",
    "end": "628399"
  },
  {
    "text": "through this where where do where does this come from Google style guide says we do not",
    "start": "628399",
    "end": "635399"
  },
  {
    "text": "use exceptions difference we do not use exceptions at Google not don't use",
    "start": "635399",
    "end": "642800"
  },
  {
    "text": "exceptions then if you read the fineprint after this Google has a lot of code a lot of",
    "start": "642800",
    "end": "649560"
  },
  {
    "text": "code is written without exceptions in mind and if you were to introduce exceptions then you would have to",
    "start": "649560",
    "end": "654639"
  },
  {
    "text": "basically fortify all the code against exceptions that can be thrown um make it exeption safe basically and that's not",
    "start": "654639",
    "end": "661959"
  },
  {
    "text": "feasible for the range of code for the large code base that Google has so they",
    "start": "661959",
    "end": "667399"
  },
  {
    "text": "say we cannot use exceptions Our advice against using",
    "start": "667399",
    "end": "672639"
  },
  {
    "text": "exceptions is not predicated on philosophical or moral grounds but practical ones so it's just not",
    "start": "672639",
    "end": "678000"
  },
  {
    "text": "practical to use exceptions this is not that we don't like exceptions things would probably be",
    "start": "678000",
    "end": "683760"
  },
  {
    "text": "different if we had to do it all over again from scratch so this is a hint they would",
    "start": "683760",
    "end": "689360"
  },
  {
    "text": "like to actually use exceptions not we hate exceptions don't do it",
    "start": "689360",
    "end": "695839"
  },
  {
    "text": "right I've given this talks this talk once before and after the talk I had someone coming up to me yeah I worked",
    "start": "695839",
    "end": "702200"
  },
  {
    "text": "for Google for a while and we were actually in a project where we were using exceptions so this guidelines this",
    "start": "702200",
    "end": "709360"
  },
  {
    "text": "guideline this overall guidelines for which makes sense for the large big Google code base does not apply to all",
    "start": "709360",
    "end": "716440"
  },
  {
    "text": "of their parts and everyone I talked to about the don't",
    "start": "716440",
    "end": "722680"
  },
  {
    "text": "use exceptions guideline yeah Google says it Google are the cool kit so we have to do it as",
    "start": "722680",
    "end": "728680"
  },
  {
    "text": "well are you Google do you have this kind of code base probably not maybe",
    "start": "728680",
    "end": "735920"
  },
  {
    "text": "there are there are teams that have like big code bases that are not aware of exceptions and then they can't use",
    "start": "735920",
    "end": "741120"
  },
  {
    "text": "exceptions right um what's the impact well exceptions are a part of the language um",
    "start": "741120",
    "end": "748519"
  },
  {
    "text": "who likes except ions who does not like exceptions at all one two people",
    "start": "748519",
    "end": "755000"
  },
  {
    "text": "okay um they have to be handled if you don't then your program",
    "start": "755000",
    "end": "761040"
  },
  {
    "text": "terminates um they can be handled where they well where actually you have all the information that you need to handle",
    "start": "761040",
    "end": "766680"
  },
  {
    "text": "them you don't have to propagate them manually from function to function to function to function until the place where you can handle",
    "start": "766680",
    "end": "772360"
  },
  {
    "text": "them and not using exceptions affects basically the whole code base right you",
    "start": "772360",
    "end": "778360"
  },
  {
    "text": "have to basically use um either your return channel is used and you have to use all",
    "start": "778360",
    "end": "785040"
  },
  {
    "text": "parameters which I see quite often which is ugly to to to reason about because",
    "start": "785040",
    "end": "790519"
  },
  {
    "text": "you see something passing to a function but it's not actually an argument it's it's the outcome or you have to use stuff like s",
    "start": "790519",
    "end": "799360"
  },
  {
    "text": "expected s optional s variant stuff like that and you have to test that your aror",
    "start": "799360",
    "end": "806440"
  },
  {
    "text": "propagation that you have in your function actually works and does the right thing whereas when you call it um when your function just calls something",
    "start": "806440",
    "end": "812519"
  },
  {
    "text": "that might throw an exception then it just does the right thing it propagates exception and the",
    "start": "812519",
    "end": "817880"
  },
  {
    "text": "compiler guarantees that it works so for guidelines the context",
    "start": "817880",
    "end": "826519"
  },
  {
    "text": "matters they are quite often not Universal many things in the core",
    "start": "826519",
    "end": "832560"
  },
  {
    "text": "guidelines are but guidelines that you get from other locations may be specific to the that",
    "start": "832560",
    "end": "840160"
  },
  {
    "text": "location so depending on what project you are in what team you're working",
    "start": "840160",
    "end": "845320"
  },
  {
    "text": "in guidelines may or may not apply the same is for rules like there are may be",
    "start": "845320",
    "end": "851399"
  },
  {
    "text": "strict rules for specific applications um for specific areas of application",
    "start": "851399",
    "end": "857360"
  },
  {
    "text": "where you basically have to follow those rules but if you don't work in those areas those rules don't apply to you",
    "start": "857360",
    "end": "865560"
  },
  {
    "text": "right so please don't use this guy guideline accept unless you are Google",
    "start": "865560",
    "end": "871480"
  },
  {
    "text": "or you are in a Google like hod base where you can't really can't use",
    "start": "871480",
    "end": "876720"
  },
  {
    "text": "exceptions next guideline every function shall have a",
    "start": "877959",
    "end": "883480"
  },
  {
    "text": "single return statement s whatever that means who has seen this one couple of",
    "start": "883480",
    "end": "891000"
  },
  {
    "text": "hands okay I tried to figure out where this",
    "start": "891000",
    "end": "896839"
  },
  {
    "text": "came from because um I didn't agree the function shall have a single",
    "start": "896839",
    "end": "903320"
  },
  {
    "text": "point of exit at the end of the function misra c misra",
    "start": "903320",
    "end": "909519"
  },
  {
    "text": "c reasons stated in those um documents readability and it avoids",
    "start": "909519",
    "end": "917120"
  },
  {
    "text": "leaks um my counter argument if we use early",
    "start": "918199",
    "end": "924959"
  },
  {
    "text": "return and guard closes they are relatively common pattern that can improve",
    "start": "924959",
    "end": "930759"
  },
  {
    "text": "readability I don't have to like nest if Aces if elers and stuff like that if I",
    "start": "930759",
    "end": "935920"
  },
  {
    "text": "say okay my conditions are not met return done another condition is not met return",
    "start": "935920",
    "end": "941920"
  },
  {
    "text": "and then I do like five lines of my actual processing and then I have the actual good case return at the end of",
    "start": "941920",
    "end": "948399"
  },
  {
    "text": "the function which is okay in C the argument of leaks I can",
    "start": "948399",
    "end": "954600"
  },
  {
    "text": "completely agree if you have stuff where I have like pointer where I allocate memory I have to",
    "start": "954600",
    "end": "959839"
  },
  {
    "text": "think about deallocating this memory then I probably want to do this like in a cleanup block at the end of my",
    "start": "959839",
    "end": "965480"
  },
  {
    "text": "function and I don't want have an early return where I risk leaking the memory I've allocated before and stuff like",
    "start": "965480",
    "end": "970720"
  },
  {
    "text": "that right um I've seen patterns where they just have like if okay if something goes",
    "start": "970720",
    "end": "976000"
  },
  {
    "text": "wrong then go to clean up and then I have like the cleanup Block in the end and then the return and see that's perfectly good in C++ we should use RI",
    "start": "976000",
    "end": "985399"
  },
  {
    "text": "classes like smart pointers smart locks all the kind of things we have so we can use early",
    "start": "985399",
    "end": "992839"
  },
  {
    "text": "return and just be good about it um so again context matters some",
    "start": "992839",
    "end": "1001720"
  },
  {
    "text": "projects have to follow external standards like the Misha standards and other functional safety standards it's",
    "start": "1001720",
    "end": "1008120"
  },
  {
    "text": "required of those projects to to follow them this can be an automotive maybe",
    "start": "1008120",
    "end": "1014040"
  },
  {
    "text": "medical stuff and and similar areas right um if you have to follow those",
    "start": "1014040",
    "end": "1021199"
  },
  {
    "text": "rules there's no way but to actually follow those rules even if it makes maybe your code base a little less",
    "start": "1021199",
    "end": "1027400"
  },
  {
    "text": "readable depending on personal opinion probably um I would regardless not um",
    "start": "1027400",
    "end": "1036038"
  },
  {
    "text": "repeat those rules in your in your project guidelines but instead say in",
    "start": "1036039",
    "end": "1041760"
  },
  {
    "text": "the very beginning okay we have to follow this set of rules look here and then have a link instead of like",
    "start": "1041760",
    "end": "1047558"
  },
  {
    "text": "repeating all the stuff copy paste um regardless regulations like that and",
    "start": "1047559",
    "end": "1055120"
  },
  {
    "text": "in those projects you need a more formal approach and there are usually automated",
    "start": "1055120",
    "end": "1060840"
  },
  {
    "text": "tools that check these kind of things so misra stards I know that most if not all",
    "start": "1060840",
    "end": "1066720"
  },
  {
    "text": "the rules can be checked by tooling and then you off obviously should use that",
    "start": "1066720",
    "end": "1072360"
  },
  {
    "text": "tooling and um then the tooling should tell you this is not okay you're violating this guideline it probably",
    "start": "1072360",
    "end": "1078000"
  },
  {
    "text": "give you a link to the gu guideline instead of um you having to look it up in your personal or or project",
    "start": "1078000",
    "end": "1085799"
  },
  {
    "text": "space um what about the SE means single entry single",
    "start": "1085960",
    "end": "1094400"
  },
  {
    "text": "exit I had to dig somewhat to actually find out what single entry",
    "start": "1094400",
    "end": "1100559"
  },
  {
    "text": "means single exit okay probably like this one return at",
    "start": "1100559",
    "end": "1106280"
  },
  {
    "text": "the end of the function but single entry I mean you enter the function from the top and that's it right why do you have",
    "start": "1106280",
    "end": "1113039"
  },
  {
    "text": "to State this means don't jump or go to or entry",
    "start": "1113039",
    "end": "1118480"
  },
  {
    "text": "that's a foron keyword into alternate points at the function this is possible in some",
    "start": "1118480",
    "end": "1125159"
  },
  {
    "text": "languages to enter a function not from the top but from somewhere in the middle single exit is from don't",
    "start": "1125159",
    "end": "1132640"
  },
  {
    "text": "returned to a different point than the one immediately after the call of the function this is also possible in some",
    "start": "1132640",
    "end": "1140520"
  },
  {
    "text": "languages that you specifically say um if I'm in this error case don't return to the call site return to somewhere",
    "start": "1140520",
    "end": "1147559"
  },
  {
    "text": "else from what I know foron and maybe one or two other languages but not",
    "start": "1147559",
    "end": "1153600"
  },
  {
    "text": "C++ and also not C",
    "start": "1153600",
    "end": "1159720"
  },
  {
    "text": "however in C++ technically if you throw an exception we except the function early",
    "start": "1159960",
    "end": "1167039"
  },
  {
    "text": "and we end up somewhere else right but all the stuff in between still gets",
    "start": "1167039",
    "end": "1172760"
  },
  {
    "text": "the stack gets the stack gets unrolled by the compiler so the compiler basically says yes you go there and I",
    "start": "1172760",
    "end": "1179000"
  },
  {
    "text": "implicitly go your back to the to the catch Handler for exception so under the",
    "start": "1179000",
    "end": "1184280"
  },
  {
    "text": "hood it's still a single exit so um the single entry single exit",
    "start": "1184280",
    "end": "1193400"
  },
  {
    "text": "there is a document written by Edgar dyra I'm think in the mid 70s or",
    "start": "1193400",
    "end": "1199880"
  },
  {
    "text": "something like that where he says your function to be readable to be understandable should model this like",
    "start": "1199880",
    "end": "1205400"
  },
  {
    "text": "you had the single point where you enter the function and this single point where you get to when you leave the function",
    "start": "1205400",
    "end": "1213280"
  },
  {
    "text": "um they were not using exceptions back then um but apparently um all kinds of",
    "start": "1213280",
    "end": "1219000"
  },
  {
    "text": "go-to come from what else um which made the code un readable so this is about that code back",
    "start": "1219000",
    "end": "1227039"
  },
  {
    "text": "then what's the impact of single entry single exit or just one return at the end of the function well um pattern that",
    "start": "1227039",
    "end": "1234880"
  },
  {
    "text": "you probably also have seen quite often I have my red value and I don't know what it will be yet so I will give it",
    "start": "1234880",
    "end": "1241400"
  },
  {
    "text": "like an empty string or a minus or something to indicate this is like the",
    "start": "1241400",
    "end": "1246520"
  },
  {
    "text": "more or less initialized value and then I do my pre-checks and I can't immediately return because I only",
    "start": "1246520",
    "end": "1253120"
  },
  {
    "text": "have this one return at the end of the function so I set some flag that something is not okay",
    "start": "1253120",
    "end": "1259120"
  },
  {
    "text": "and then I have to endure the rest of the function even though even though I already know what I will return",
    "start": "1259120",
    "end": "1265280"
  },
  {
    "text": "right and um the alternative to the is okay is basically um invert the",
    "start": "1265280",
    "end": "1272559"
  },
  {
    "text": "condition and and then I say if my pro web is not empty then I do the next check and then",
    "start": "1272559",
    "end": "1278919"
  },
  {
    "text": "I do the next check and sometime I'm completely out of my screen and then I come back at some point right and the",
    "start": "1278919",
    "end": "1285520"
  },
  {
    "text": "VAR else is like error um I don't know what I'm in about because it is 40 lines",
    "start": "1285520",
    "end": "1292039"
  },
  {
    "text": "above I've seen this and it's it's horrible to",
    "start": "1292159",
    "end": "1297080"
  },
  {
    "text": "read so forcing a single exit in many cases reduces a cord quality this return",
    "start": "1297760",
    "end": "1305320"
  },
  {
    "text": "value dragged from top to bottom to till we get actually to the return instead of immediately I know what this does return",
    "start": "1305320",
    "end": "1311679"
  },
  {
    "text": "this I know what it does in this case return something else right and either this is okay very",
    "start": "1311679",
    "end": "1319080"
  },
  {
    "text": "or the the um deeply nested indentations and also like I said we",
    "start": "1319080",
    "end": "1325080"
  },
  {
    "text": "can't really use exceptions when we um really want to fit to to the",
    "start": "1325080",
    "end": "1332679"
  },
  {
    "text": "style um so some of the guidelines are ancient law that has been transported",
    "start": "1332840",
    "end": "1339240"
  },
  {
    "text": "like this is bad we don't have we shouldn't have early returns and stuff like that our Lang languages have",
    "start": "1339240",
    "end": "1344760"
  },
  {
    "text": "evolved our tools have evolved our understanding of how how to write code has evolved involved so question where these guidelines come",
    "start": "1344760",
    "end": "1352080"
  },
  {
    "text": "from if they seem not applicable to you anymore this includes guid guidelines",
    "start": "1352080",
    "end": "1358600"
  },
  {
    "text": "for C++ 98 and stuff like that",
    "start": "1358600",
    "end": "1363158"
  },
  {
    "text": "right so um please don't site rules that are completely outdated and whe when you",
    "start": "1363799",
    "end": "1371320"
  },
  {
    "text": "see them question them",
    "start": "1371320",
    "end": "1375399"
  },
  {
    "text": "a guideline font in the wild don't use references as members who has seen this",
    "start": "1378799",
    "end": "1384919"
  },
  {
    "text": "one a couple of an okay the core guideline where this comes",
    "start": "1384919",
    "end": "1391679"
  },
  {
    "text": "from don't make data members const or references in a copyable or movable",
    "start": "1391679",
    "end": "1397720"
  },
  {
    "text": "type because they make such types difficult to use by making them at least partly uncopyable or unmovable for",
    "start": "1397720",
    "end": "1405200"
  },
  {
    "text": "subtle reasons well it's not so subtle if you have a ref or con memory you can't assign it to it so copy assignment",
    "start": "1405200",
    "end": "1411880"
  },
  {
    "text": "cop um move assignment cannot be get generated by the compiler and you have to write workarounds and maybe they",
    "start": "1411880",
    "end": "1417520"
  },
  {
    "text": "don't really do what you what you would expect instead use pointers for example",
    "start": "1417520",
    "end": "1422760"
  },
  {
    "text": "GSL is the GU land support Library not null if you mean to have a pointer that",
    "start": "1422760",
    "end": "1428840"
  },
  {
    "text": "is assignable but never has can be null and then to like Clank TI you can check",
    "start": "1428840",
    "end": "1434400"
  },
  {
    "text": "on that one the important one is if is the the bald one right this means in a type that",
    "start": "1434400",
    "end": "1442039"
  },
  {
    "text": "is designed to be copyable or movable in those types you shouldn't have con and",
    "start": "1442039",
    "end": "1447440"
  },
  {
    "text": "reference members that's correct in any other types you can have con and reference",
    "start": "1447440",
    "end": "1453880"
  },
  {
    "text": "members this type is otherwise copyable except for the reference member so this",
    "start": "1453880",
    "end": "1459960"
  },
  {
    "text": "is a quote randomizer service we have you repository and um you save your used",
    "start": "1459960",
    "end": "1467200"
  },
  {
    "text": "quotes and you have a random engine in there the vector is copyable movable the random engine is copyable um I think",
    "start": "1467200",
    "end": "1474240"
  },
  {
    "text": "also movable and so except for the reference this would be copyable does it",
    "start": "1474240",
    "end": "1480120"
  },
  {
    "text": "have to be copiable movable not really it's a service you construct it once it sits there until the end of his lifetime",
    "start": "1480120",
    "end": "1487799"
  },
  {
    "text": "everybody who uses is has a reference or a pointer to it and then us it it and um",
    "start": "1487799",
    "end": "1492919"
  },
  {
    "text": "you never need a copy of this you never need to move this so don't make data members Quant or",
    "start": "1492919",
    "end": "1500120"
  },
  {
    "text": "reference for types that are designed to be copyable and movable for types that should have value",
    "start": "1500120",
    "end": "1506960"
  },
  {
    "text": "semantics quite often you have like this application Services factories repositories all these buzzwords from",
    "start": "1507919",
    "end": "1514600"
  },
  {
    "text": "from um domain driven design and and similar where you have like these objects that just exist there couple of",
    "start": "1514600",
    "end": "1521640"
  },
  {
    "text": "times or one time and you don't need copying and moving and having reference members in those perfectly fine",
    "start": "1521640",
    "end": "1530320"
  },
  {
    "text": "so the reasons for our guidelines matter so we have to read the fine",
    "start": "1530559",
    "end": "1535600"
  },
  {
    "text": "print they inform us about when it's okay to have reference members when it's okay to not when the guidelines apply",
    "start": "1535600",
    "end": "1542320"
  },
  {
    "text": "and when they don't apply if you just want to follow the guidelin say okay I guess I have to use",
    "start": "1542320",
    "end": "1547960"
  },
  {
    "text": "not null there right um it's a bit more ver Bose and not as easy to read and in",
    "start": "1547960",
    "end": "1553600"
  },
  {
    "text": "some projects you have to go through like several layers of bureaucracy to",
    "start": "1553600",
    "end": "1558640"
  },
  {
    "text": "actually be able to use GSL in your code or you have to reimplement it yourself not really",
    "start": "1558640",
    "end": "1566720"
  },
  {
    "text": "fun um also side note which I have seen don't ignore one guideline to just to",
    "start": "1566720",
    "end": "1573640"
  },
  {
    "text": "satisfy another I've seen people say Okay I want to use a reference but my",
    "start": "1573640",
    "end": "1579440"
  },
  {
    "text": "class that I have here is copyable so I just write the copy Constructor equals delete",
    "start": "1579440",
    "end": "1584760"
  },
  {
    "text": "done which is against the root of zero right",
    "start": "1584760",
    "end": "1589960"
  },
  {
    "text": "so don't be too dogmatic think about where the guidelines apply where they",
    "start": "1589960",
    "end": "1596398"
  },
  {
    "text": "don't next guideline const goes to the left of the",
    "start": "1598559",
    "end": "1604279"
  },
  {
    "text": "type West const so let's get out the eggs and",
    "start": "1604279",
    "end": "1609720"
  },
  {
    "text": "tomatoes who is against it who's for it hands up so who's for West",
    "start": "1609720",
    "end": "1616840"
  },
  {
    "text": "const West con const who's for East",
    "start": "1616840",
    "end": "1622080"
  },
  {
    "text": "const handful of both so",
    "start": "1622080",
    "end": "1627840"
  },
  {
    "text": "um does it matter to have either one or the other",
    "start": "1627840",
    "end": "1634360"
  },
  {
    "text": "one a mix is bad right but if your whole code base is westc or the whole code",
    "start": "1634360",
    "end": "1639720"
  },
  {
    "text": "base is East con who cares um the actual core guideline NL 26",
    "start": "1639720",
    "end": "1647440"
  },
  {
    "text": "use conven const notation they don't write vest const they conventional con",
    "start": "1647440",
    "end": "1654240"
  },
  {
    "text": "notation so if by C++ 29 or maybe in in 10",
    "start": "1654240",
    "end": "1659840"
  },
  {
    "text": "years the the general usage has shifted to East cons then this guideline still",
    "start": "1659840",
    "end": "1665840"
  },
  {
    "text": "applies then it say use is Con the reason is conventional notation",
    "start": "1665840",
    "end": "1671120"
  },
  {
    "text": "is more familiar to most to more programmers and consistency in large case code bases is important absolutely",
    "start": "1671120",
    "end": "1678159"
  },
  {
    "text": "abolutely agree note this is a recommendation for when you have no constraints or better",
    "start": "1678159",
    "end": "1684480"
  },
  {
    "text": "ideas this rule was added after many requests for guidance and after many more issues in",
    "start": "1684480",
    "end": "1691320"
  },
  {
    "text": "the core guidelines GitHub repository that went over pages and pages and",
    "start": "1691320",
    "end": "1697000"
  },
  {
    "text": "Pages because people have opinions about this",
    "start": "1697000",
    "end": "1703360"
  },
  {
    "text": "um some core guideline rules um so it's a core guidelines",
    "start": "1703360",
    "end": "1708600"
  },
  {
    "text": "document and they call each guideline they call a rule they are neither a guideline nor a",
    "start": "1708600",
    "end": "1714640"
  },
  {
    "text": "rule the explicitly St State for the lnl section naming and layout",
    "start": "1714640",
    "end": "1721480"
  },
  {
    "text": "suggestions sorry these rules are suggested defaults to follow so they are",
    "start": "1721480",
    "end": "1727080"
  },
  {
    "text": "suggestions not guidelines so to follow unless you have",
    "start": "1727080",
    "end": "1732720"
  },
  {
    "text": "reasons not to so basically you can use this if you have no idea about what to do this then this is a good thing to",
    "start": "1732720",
    "end": "1739760"
  },
  {
    "text": "start a good point to start but it's not really a guideline that you should just take at face and adapt to your",
    "start": "1739760",
    "end": "1747039"
  },
  {
    "text": "projects the consistent part one definitely a conventional conation look at what your code base has",
    "start": "1747039",
    "end": "1755559"
  },
  {
    "text": "if you work from scratch ask your team and maybe pick the majority or whatever",
    "start": "1755559",
    "end": "1761279"
  },
  {
    "text": "but um don't just blindly adapt these guidelines um",
    "start": "1761279",
    "end": "1768640"
  },
  {
    "text": "in addition where we put the const can be done by automatic tooling this is",
    "start": "1768640",
    "end": "1773880"
  },
  {
    "text": "what Clank format is for you can tell Clank format please put the const on",
    "start": "1773880",
    "end": "1779200"
  },
  {
    "text": "this side that side or leave it as it is",
    "start": "1779200",
    "end": "1785720"
  },
  {
    "text": "yes yes so the East cons West cons only works for if you have like a single type",
    "start": "1787880",
    "end": "1794399"
  },
  {
    "text": "variable not a pointer not a reference something like that where you can say okay okay this is a Conant or in Con in",
    "start": "1794399",
    "end": "1800039"
  },
  {
    "text": "con right if you have a int pointer and the pointer has to be constant you have to put the con on the right side",
    "start": "1800039",
    "end": "1805919"
  },
  {
    "text": "anyway and this is where the argument comes well actually East cons is a more",
    "start": "1805919",
    "end": "1811120"
  },
  {
    "text": "consistent one because then it's every every time on the right of except when okay westc is something for the break I",
    "start": "1811120",
    "end": "1819799"
  },
  {
    "text": "guess um so if you have tooling if you have Clank format that does this stuff for us",
    "start": "1819799",
    "end": "1827279"
  },
  {
    "text": "why do we need in our document just put it out of the document",
    "start": "1827279",
    "end": "1832519"
  },
  {
    "text": "configure your Clank format and it will do stuff for you so please don't make me read formatting rules give me a Clank",
    "start": "1832519",
    "end": "1839799"
  },
  {
    "text": "format file and does everything it needs to",
    "start": "1839799",
    "end": "1843679"
  },
  {
    "text": "do another guideline font in the wild I think I have to no I'm I'm I'm",
    "start": "1845919",
    "end": "1852360"
  },
  {
    "text": "good in in time you single",
    "start": "1852360",
    "end": "1858120"
  },
  {
    "text": "for objects that exist only once face palm I I",
    "start": "1858120",
    "end": "1867080"
  },
  {
    "text": "know um where does it where does this come",
    "start": "1868760",
    "end": "1873799"
  },
  {
    "text": "from I actually found a screen grap somewhere in the archives of the first",
    "start": "1873799",
    "end": "1880440"
  },
  {
    "text": "edition of the object oriented design patterns of the gang of four book where",
    "start": "1880440",
    "end": "1885840"
  },
  {
    "text": "it says the Singleton design pattern the intent is to ensure a class has only one",
    "start": "1885840",
    "end": "1892399"
  },
  {
    "text": "instance and provide a global point of access to it again two things together not only",
    "start": "1892399",
    "end": "1901039"
  },
  {
    "text": "has only one instance um a global variable makes an",
    "start": "1901039",
    "end": "1906840"
  },
  {
    "text": "object object accessible doesn't but it doesn't keep you from instantiating multiple",
    "start": "1906840",
    "end": "1914519"
  },
  {
    "text": "objects so you want to avoid having the global and then have like local other",
    "start": "1914600",
    "end": "1920960"
  },
  {
    "text": "objects of the same type because usually you want to use a global in that case",
    "start": "1920960",
    "end": "1926840"
  },
  {
    "text": "right use when there must be exactly one instant of a class and it must be accessible to clients from a well-known",
    "start": "1926919",
    "end": "1933080"
  },
  {
    "text": "access point so like the order in which they write the two the wellknown access",
    "start": "1933080",
    "end": "1939600"
  },
  {
    "text": "point the global one and the one instance stresses a bit the one instance",
    "start": "1939600",
    "end": "1946559"
  },
  {
    "text": "right um um but still it's not the same as use Singletons for objects that exist only once this is like leaving out the",
    "start": "1946720",
    "end": "1954279"
  },
  {
    "text": "major part the global part what's the impact of this previous",
    "start": "1954279",
    "end": "1960840"
  },
  {
    "text": "projects ages ago or like a decade ago we had a code base where we had",
    "start": "1960840",
    "end": "1966960"
  },
  {
    "text": "hundreds I think it was like between 900 and 1200 Singletons in our code",
    "start": "1966960",
    "end": "1973880"
  },
  {
    "text": "base it was a complete monolith the that you could not",
    "start": "1973960",
    "end": "1980360"
  },
  {
    "text": "decouple um when we wrote a unit test for one of our upper layer classes the",
    "start": "1980360",
    "end": "1986880"
  },
  {
    "text": "unit test would then take this part and this would then have a reference to that Singleton which would have a reference",
    "start": "1986880",
    "end": "1993000"
  },
  {
    "text": "to all these database exess Singletons which would have like and in the end we would have roughly one and a half",
    "start": "1993000",
    "end": "1999320"
  },
  {
    "text": "million lines of code tied into each single unit tests into each single class",
    "start": "1999320",
    "end": "2004480"
  },
  {
    "text": "it had to be linked against that class because it was all tied together",
    "start": "2004480",
    "end": "2009639"
  },
  {
    "text": "plus a 180 megabyte access database that had to be linked into the stuff um every",
    "start": "2009639",
    "end": "2017600"
  },
  {
    "text": "time um interpretation matters so the",
    "start": "2018080",
    "end": "2023399"
  },
  {
    "text": "thing about the Singleton is this text has to interpret it",
    "start": "2023399",
    "end": "2030320"
  },
  {
    "text": "and the interpretations change over time there is an interview with the gang of",
    "start": "2030320",
    "end": "2036240"
  },
  {
    "text": "four authors like 10 years after they wrote that book where they say well",
    "start": "2036240",
    "end": "2043919"
  },
  {
    "text": "um the single in in itself is a good pattern but how people interpret this",
    "start": "2043919",
    "end": "2050040"
  },
  {
    "text": "part of the book went completely wrong it's not how we intended it to go um so we have to get a common",
    "start": "2050040",
    "end": "2059520"
  },
  {
    "text": "understanding and the modern interpretation is if you need Global state which you should avoid you cannot",
    "start": "2059520",
    "end": "2066158"
  },
  {
    "text": "always avoid it if you actually need need it so turn this thing around if we need this single",
    "start": "2066159",
    "end": "2073720"
  },
  {
    "text": "AIS then we should use Singleton to avoid copies and multiple instances and",
    "start": "2073839",
    "end": "2080280"
  },
  {
    "text": "stuff like that but only if we actually need the global then the single is a good pattern not if we need something",
    "start": "2080280",
    "end": "2087520"
  },
  {
    "text": "only once an alternative to Global state is dependency injection but in large code",
    "start": "2087520",
    "end": "2095560"
  },
  {
    "text": "bases it can happen that you inject something up here just to trickle it down to 20 layers or something to just",
    "start": "2095560",
    "end": "2101000"
  },
  {
    "text": "use it down there and in that case you have things in especially in other",
    "start": "2101000",
    "end": "2107599"
  },
  {
    "text": "languages like Java Frameworks C Frameworks you where you have like inversion of control containers and",
    "start": "2107599",
    "end": "2113000"
  },
  {
    "text": "stuff like that where have like one big Singleton container where it says okay if you want to have your something",
    "start": "2113000",
    "end": "2119760"
  },
  {
    "text": "repository ask this inversion of control container that is a Singleton and it will tell you where this repository is",
    "start": "2119760",
    "end": "2125480"
  },
  {
    "text": "and stuff like that I haven't seen kinds this kind of of of Library this kind of",
    "start": "2125480",
    "end": "2130640"
  },
  {
    "text": "stuff in C++ code yet but there might",
    "start": "2130640",
    "end": "2135880"
  },
  {
    "text": "be so this guideline use Singletons for object that exist only once don't do that unless for very good",
    "start": "2137040",
    "end": "2145480"
  },
  {
    "text": "reasons when you have a global that you can't get around then it's the right pattern to use",
    "start": "2145480",
    "end": "2151200"
  },
  {
    "text": "here but definitely not 900 or 1200 times in one application",
    "start": "2151200",
    "end": "2157760"
  },
  {
    "text": "let's get to guidelines about",
    "start": "2166160",
    "end": "2171720"
  },
  {
    "text": "guidelines so important is that basically everybody in the team should",
    "start": "2174359",
    "end": "2181000"
  },
  {
    "text": "intend should understand the context of your guidelines the context you're working",
    "start": "2181000",
    "end": "2186280"
  },
  {
    "text": "in and the reasons why these guidelines are in the project why you want to stick to those",
    "start": "2186280",
    "end": "2192079"
  },
  {
    "text": "guidelines or at least observe the guidelines and then decide to may or may not maybe or maybe not stick to",
    "start": "2192079",
    "end": "2200359"
  },
  {
    "text": "them when do they apply when do they not apply why are they actually important",
    "start": "2200359",
    "end": "2207160"
  },
  {
    "text": "for your project some guidelines well yeah they make sense but if you do it or don't do",
    "start": "2207160",
    "end": "2212760"
  },
  {
    "text": "it uh we don't use this kind of code in our project anyway so why should we adopt the guideline",
    "start": "2212760",
    "end": "2219520"
  },
  {
    "text": "um so you can come on understanding how to break them when to break them and especially how to break them so write",
    "start": "2223119",
    "end": "2230280"
  },
  {
    "text": "explanatory comments have in your G maybe in your guideline document we follow the rule of",
    "start": "2230280",
    "end": "2237440"
  },
  {
    "text": "five except for this or that case common case is when you have interface",
    "start": "2237440",
    "end": "2244599"
  },
  {
    "text": "classes that contain no data members so copying moving assignment is just a noop",
    "start": "2244599",
    "end": "2252280"
  },
  {
    "text": "but you have to define the D structor of those classes to be virtual and if",
    "start": "2252280",
    "end": "2257319"
  },
  {
    "text": "that's the only thing I have my virtual Destructor defaulted and I have no data members",
    "start": "2257319",
    "end": "2262880"
  },
  {
    "text": "because my class is just an interface with a bunch of pure virtual meth methods then that can be an exception",
    "start": "2262880",
    "end": "2268839"
  },
  {
    "text": "that is not in the core guidelines document where you can say okay in this case we can just break the five rule of",
    "start": "2268839",
    "end": "2274520"
  },
  {
    "text": "five because everybody knows this is an interface maybe you have even a naming convention with a capital I in the",
    "start": "2274520",
    "end": "2280440"
  },
  {
    "text": "beginning which is I think horrible but you can use it or call it something something interface to make it more",
    "start": "2280440",
    "end": "2288119"
  },
  {
    "text": "explicit and then it's completely okay to break this rule because everybody knows okay this is an interface I have a virtual Destructor and nothing",
    "start": "2288119",
    "end": "2296040"
  },
  {
    "text": "else naming conventions your services that don't need to um observe this rule",
    "start": "2296920",
    "end": "2303480"
  },
  {
    "text": "about um references and stuff like that give them specific specific names and if a class has a specific names name then",
    "start": "2303480",
    "end": "2310960"
  },
  {
    "text": "nobody will tell you to to to remove the reference or remove the con and stuff like",
    "start": "2310960",
    "end": "2318040"
  },
  {
    "text": "that um concentrate on writing the guidelines that you can't automate",
    "start": "2318040",
    "end": "2323200"
  },
  {
    "text": "because if you can automate them then hopefully your tool will helpfully point you at yes you have broken core",
    "start": "2323200",
    "end": "2329720"
  },
  {
    "text": "guideline number 76 or something like that and then you can look it up and get the documentation you don't have to",
    "start": "2329720",
    "end": "2335760"
  },
  {
    "text": "repeat that documentation in your guideline",
    "start": "2335760",
    "end": "2340240"
  },
  {
    "text": "document automated tooling is your friend I've mentioned Clank format I've",
    "start": "2343760",
    "end": "2350079"
  },
  {
    "text": "mentioned Clank tidy um use static analysis tools whatever you have to give you all the",
    "start": "2350079",
    "end": "2356720"
  },
  {
    "text": "warnings so people don't have to look to your in the code reviews to your code and say well you put this cons on the",
    "start": "2356720",
    "end": "2363359"
  },
  {
    "text": "wrong side of a variable because that is a waste of time for everyone who has has to review your",
    "start": "2363359",
    "end": "2368920"
  },
  {
    "text": "code if your automated tool can do this in a fraction of seconds for you",
    "start": "2368920",
    "end": "2376359"
  },
  {
    "text": "right however using automatic tooling they will tell us what's",
    "start": "2376560",
    "end": "2382359"
  },
  {
    "text": "wrong they won't tell us necessarily what's",
    "start": "2382359",
    "end": "2387520"
  },
  {
    "text": "right um in many cases they can fix it automatically like Clank",
    "start": "2387960",
    "end": "2393920"
  },
  {
    "text": "format in many cases um Clank ID has automated fixes for a bunch of the",
    "start": "2393920",
    "end": "2401079"
  },
  {
    "text": "warnings that it IDs um but if we have a warning that we",
    "start": "2401079",
    "end": "2408680"
  },
  {
    "text": "can't automatically get fixed we have to stop thinking because sometimes we can just",
    "start": "2408680",
    "end": "2416079"
  },
  {
    "text": "turn the warning off project wide or in a subdirectory or",
    "start": "2416079",
    "end": "2421599"
  },
  {
    "text": "just on a line by line cases case um some times not ignoring the",
    "start": "2421599",
    "end": "2428800"
  },
  {
    "text": "warning and fixing the code is the right thing how to fix a code is a completely",
    "start": "2428800",
    "end": "2434440"
  },
  {
    "text": "different project um definitely don't trick your tooling like obfuscate the code so much",
    "start": "2434440",
    "end": "2441560"
  },
  {
    "text": "that the tool can figure out while it's in Bas in in principle does the same stuff right try to actually fix the",
    "start": "2441560",
    "end": "2450640"
  },
  {
    "text": "code and um this is just an example for the Repository thing um there is a",
    "start": "2452680",
    "end": "2460280"
  },
  {
    "text": "something something core guidelines ref data members con or ref data members I don't know the exact name um if you turn",
    "start": "2460280",
    "end": "2467680"
  },
  {
    "text": "it on then it will warn you on this repository reference and then you can say SL SL no lint and tlink ID this line",
    "start": "2467680",
    "end": "2476880"
  },
  {
    "text": "don't warn me about this ref data member thing everything else you will still warn about so you can configure your",
    "start": "2476880",
    "end": "2483240"
  },
  {
    "text": "tools on a line by line basis you can also tell it like from this line start to this line and please ignore all these",
    "start": "2483240",
    "end": "2490400"
  },
  {
    "text": "warnings about C++ cor guid lines or something like that so know your tooling know how to",
    "start": "2490400",
    "end": "2497800"
  },
  {
    "text": "turn off These Warnings because the one thing that I think we all should adapt as a rule your",
    "start": "2497800",
    "end": "2505280"
  },
  {
    "text": "code should not emit on any warnings compiler warnings or tool warnings or other",
    "start": "2505280",
    "end": "2511000"
  },
  {
    "text": "ways um so guide lines mean freedom mean",
    "start": "2514160",
    "end": "2519640"
  },
  {
    "text": "responsibility we can't just turn off all Bri and let the tools do everything for us right so because they are",
    "start": "2519640",
    "end": "2525599"
  },
  {
    "text": "guidelines they're not rules and please don't play the metrics I've seen guidelines that say",
    "start": "2525599",
    "end": "2533800"
  },
  {
    "text": "Okay um our functions shouldn't be too long so we configure Sona Cube or",
    "start": "2533800",
    "end": "2540960"
  },
  {
    "text": "similar tools that give us a warning when the function is longer than 40 lines of code",
    "start": "2540960",
    "end": "2547640"
  },
  {
    "text": "um I have seen people then go ahead and say okay I have two doubles initialized here um I just write double X comma Y",
    "start": "2547880",
    "end": "2555800"
  },
  {
    "text": "and I have only one line less no more warnings or um this function has 60",
    "start": "2555800",
    "end": "2562200"
  },
  {
    "text": "lines of code okay I've write two new functions F",
    "start": "2562200",
    "end": "2567839"
  },
  {
    "text": "part one F part two I call them just consecutively not a good idea so this is playing the metrix right",
    "start": "2567839",
    "end": "2576480"
  },
  {
    "text": "just hiding the fact that I wrote an actually tool Long Function and there are things like refactoring that you can",
    "start": "2576480",
    "end": "2582680"
  },
  {
    "text": "do split the function up and and and do things that actually make sense instead",
    "start": "2582680",
    "end": "2588359"
  },
  {
    "text": "of just tricking the tools into shutting",
    "start": "2588359",
    "end": "2593599"
  },
  {
    "text": "up um you should talk about guidelines and code reviews there will be code that",
    "start": "2596800",
    "end": "2602480"
  },
  {
    "text": "everybody reviews that violat some guidelines because no nobody is perfect",
    "start": "2602480",
    "end": "2608280"
  },
  {
    "text": "we forget or we don't see that we violate a guideline so we will have to talk about",
    "start": "2608280",
    "end": "2614359"
  },
  {
    "text": "it um it might be a mistake an actual mistake to point out um this why let is guideline did you do this on purpose if",
    "start": "2614359",
    "end": "2620760"
  },
  {
    "text": "yes why or if not then please fix it um it might be on purpose and Justified and",
    "start": "2620760",
    "end": "2628559"
  },
  {
    "text": "then please add like your comment or whatever you agreed on write down why you're violating guideline X and",
    "start": "2628559",
    "end": "2635200"
  },
  {
    "text": "Y or it might not be justifiable then you have to talk about Alternatives why",
    "start": "2635200",
    "end": "2641119"
  },
  {
    "text": "was a guideline violated here what were you trying to achieve how can you actually achieve it without violating the guidelines so um talking points and",
    "start": "2641119",
    "end": "2649200"
  },
  {
    "text": "code reviews violating guidelines not cons on the left or on the right",
    "start": "2649200",
    "end": "2656559"
  },
  {
    "text": "right um and find the correct way to adjust the",
    "start": "2656559",
    "end": "2662160"
  },
  {
    "text": "violation about those guidelines the guideline document that you use in your team should be short and readable",
    "start": "2664800",
    "end": "2671440"
  },
  {
    "text": "and accessible nobody will read and remember a 30 40 50 pages of",
    "start": "2671440",
    "end": "2678680"
  },
  {
    "text": "guidelines trust me I've tried nobody will do it they will know like the five",
    "start": "2678680",
    "end": "2684520"
  },
  {
    "text": "or six key takeaways and everything else is ignored um nobody will find your",
    "start": "2684520",
    "end": "2691640"
  },
  {
    "text": "guideline if you hide it away somewhere in a SharePoint or something else so make it accessible have your onboarding",
    "start": "2691640",
    "end": "2697760"
  },
  {
    "text": "document for the team so everybody who goes on the team or is longer on the team has you has a usual",
    "start": "2697760",
    "end": "2703640"
  },
  {
    "text": "references we had projects where um we actually had a pull request template",
    "start": "2703640",
    "end": "2711119"
  },
  {
    "text": "where when you created a new pull request it said these are the guidelines that we follow so before inviting anyone",
    "start": "2711119",
    "end": "2717839"
  },
  {
    "text": "to review your pull request you could have a look at the link and check okay these guidelines were the ones that I was thinking about I followed them in",
    "start": "2717839",
    "end": "2724240"
  },
  {
    "text": "the code now I can have everybody else review those",
    "start": "2724240",
    "end": "2728960"
  },
  {
    "text": "um as I said earlier um references over petition so include links to we follow",
    "start": "2730480",
    "end": "2736680"
  },
  {
    "text": "the C++ core guideline 1 2 3 4 5 and have links instead of just copy pasting them because it makes your document",
    "start": "2736680",
    "end": "2743400"
  },
  {
    "text": "longer right uh think about your team situation",
    "start": "2743400",
    "end": "2750160"
  },
  {
    "text": "not only about the project but about the experience and knowledge um the softare landscape",
    "start": "2750160",
    "end": "2757839"
  },
  {
    "text": "surrounding you so depending on what libraries you use you may want to adopt specific guidelines for those libraries",
    "start": "2757839",
    "end": "2764400"
  },
  {
    "text": "for the use of those libraries or maybe even specific about your project we have in the project I'm",
    "start": "2764400",
    "end": "2771920"
  },
  {
    "text": "currently working on a bit of a peculiar way to in include um cute and there's",
    "start": "2771920",
    "end": "2779640"
  },
  {
    "text": "like certain patterns that emerge um that the views can be null pointers and stuff like that and we have guidelines",
    "start": "2779640",
    "end": "2785760"
  },
  {
    "text": "how to explicitly deal with with those other because they are different way to ways to deal with them and we want to have them unified to be on the on the",
    "start": "2785760",
    "end": "2793680"
  },
  {
    "text": "safe side um one example the rule of zero rule of five is something that becomes",
    "start": "2793680",
    "end": "2800839"
  },
  {
    "text": "familiar rather quickly I think do you need those in your guideline document if you have people",
    "start": "2800839",
    "end": "2807119"
  },
  {
    "text": "who have never seen those rules probably you need them if you have people who are",
    "start": "2807119",
    "end": "2812200"
  },
  {
    "text": "familiar with those rules everyone on the team is on familiar with those rules why would you include include them in",
    "start": "2812200",
    "end": "2817640"
  },
  {
    "text": "your guideline document",
    "start": "2817640",
    "end": "2823760"
  },
  {
    "text": "um if you agree to exceptions where you say okay we have this rule but this is an exception for example the interface",
    "start": "2823760",
    "end": "2830520"
  },
  {
    "text": "for the for the um rule of zero then maybe you should reference them in new guideline",
    "start": "2830520",
    "end": "2835760"
  },
  {
    "text": "document it's a living document so it has to evolve talk about the content",
    "start": "2835760",
    "end": "2842359"
  },
  {
    "text": "regularly um have meetings regularly Maybe once a month every other month or",
    "start": "2842359",
    "end": "2848559"
  },
  {
    "text": "maybe once a week who knows and check whether those guidelines still apply whether some of these",
    "start": "2848559",
    "end": "2854000"
  },
  {
    "text": "guidelines may be outdated after some time or whether you have to adopt new the guidelines sometimes I see in code",
    "start": "2854000",
    "end": "2859559"
  },
  {
    "text": "reviews well um this is a bit weird um why did we do it this way maybe because",
    "start": "2859559",
    "end": "2864640"
  },
  {
    "text": "if we had a guideline or maybe because we did not have a guideline to follow and then we have to talk about them",
    "start": "2864640",
    "end": "2871040"
  },
  {
    "text": "first in the code review with the other person and then in our def sys where we say okay maybe we should need need a new",
    "start": "2871040",
    "end": "2877240"
  },
  {
    "text": "we should adopt a new guideline or maybe we should scratch the old guideline because it is not applicable",
    "start": "2877240",
    "end": "2882599"
  },
  {
    "text": "anymore like after 2 years do you still need the rule of 05 I would not throw them away",
    "start": "2882599",
    "end": "2890240"
  },
  {
    "text": "completely because you will have new joiners on the project probably if it's a longer project and then those new",
    "start": "2890240",
    "end": "2897960"
  },
  {
    "text": "joiners will want to have a look at the guideline that you implicitly follow because you already know them by heart",
    "start": "2897960",
    "end": "2903920"
  },
  {
    "text": "and then they're grateful to see this archive we needs to be maintained at some",
    "start": "2903920",
    "end": "2910558"
  },
  {
    "text": "point what about guidelines by customers as I said we are a contractor company we work exclusively with customers so we",
    "start": "2910880",
    "end": "2917760"
  },
  {
    "text": "don't write our own projects or something like that EXA PR for you the customer is",
    "start": "2917760",
    "end": "2923920"
  },
  {
    "text": "always right in matters of",
    "start": "2923920",
    "end": "2929800"
  },
  {
    "text": "taste if you working for customers and they say okay we have these guidelines",
    "start": "2930160",
    "end": "2935640"
  },
  {
    "text": "for you um they didn't hire you to follow their guidelines they did hire you to actually",
    "start": "2935640",
    "end": "2941400"
  },
  {
    "text": "write code for them so that means you are probably the expert in writing that code and not the customers else they",
    "start": "2941400",
    "end": "2948040"
  },
  {
    "text": "wouldn't have hired you more or less right so if you are the expert if they",
    "start": "2948040",
    "end": "2954480"
  },
  {
    "text": "buy your expertise to write code then um they might also buy a bit of your",
    "start": "2954480",
    "end": "2960160"
  },
  {
    "text": "expertise to actually consult um do some Consulting work for them and challenge",
    "start": "2960160",
    "end": "2965520"
  },
  {
    "text": "their guidelines and maybe change the guidelines because early return is um",
    "start": "2965520",
    "end": "2971280"
  },
  {
    "text": "something good and uh not something to be omitted you may have different teams I",
    "start": "2971280",
    "end": "2978359"
  },
  {
    "text": "guess you have different teams you may have very different situations so if there are things not in",
    "start": "2978359",
    "end": "2986799"
  },
  {
    "text": "matters of taste that you agree or disagree with um other",
    "start": "2986799",
    "end": "2992720"
  },
  {
    "text": "questions comments anything you want to add where we want to say well um I'm not Google",
    "start": "2992720",
    "end": "2999280"
  },
  {
    "text": "but we want to work like",
    "start": "2999280",
    "end": "3002440"
  },
  {
    "text": "Google anyone okay then thank you very much",
    "start": "3005319",
    "end": "3013750"
  },
  {
    "text": "[Applause]",
    "start": "3013750",
    "end": "3021949"
  }
]