[
  {
    "text": "thank you very much for coming to my talk after lunch hope you don't sleep I try to keep you entertained my name is",
    "start": "4600",
    "end": "11840"
  },
  {
    "text": "ignot and today we're going to talk about Linux name spaces um who yesterday came to my",
    "start": "11840",
    "end": "20039"
  },
  {
    "text": "talk oh damn it I wanted to recycle some of the jok",
    "start": "20039",
    "end": "25400"
  },
  {
    "text": "but okay I'll repeat some of those so anyway so like I work for cloud for",
    "start": "25400",
    "end": "30880"
  },
  {
    "text": "everyone here knows what claer does who who doesn't know",
    "start": "30880",
    "end": "36559"
  },
  {
    "text": "claur okay we do internet just in the simple",
    "start": "36559",
    "end": "43399"
  },
  {
    "text": "terms uh a little bit about myself I do Linux at claer I am a diard Linux fan uh",
    "start": "43399",
    "end": "50600"
  },
  {
    "text": "that's why I'm presenting from a Mac this is what I mentioned yesterday I like system security and performance and",
    "start": "50600",
    "end": "57840"
  },
  {
    "text": "uh and I enjoy low level programming like Linux kernel drivers bootloaders and other stuff really unsafe",
    "start": "57840",
    "end": "65040"
  },
  {
    "text": "programming languages um have a lot of cover in the",
    "start": "65040",
    "end": "71080"
  },
  {
    "text": "Str so this is the agenda first we'll talk about containers and Linux and how",
    "start": "71080",
    "end": "76920"
  },
  {
    "text": "they're implemented um we'll dive into unprivileged username",
    "start": "76920",
    "end": "82880"
  },
  {
    "text": "spaces uh we taken as an example like how you can sandbox an application on",
    "start": "82880",
    "end": "90240"
  },
  {
    "text": "Linux well like Google Chrome does it uh let's discover some bugs under Linux",
    "start": "90240",
    "end": "96759"
  },
  {
    "text": "name spaces and learn basically how to effectively protect from",
    "start": "96759",
    "end": "102799"
  },
  {
    "text": "them all right let's talk about containers who here knows the difference",
    "start": "102799",
    "end": "109040"
  },
  {
    "text": "between a virtual machine and a container not money people okay um so",
    "start": "109040",
    "end": "117000"
  },
  {
    "text": "you know containers on Linux are different from virtual machines but with with virtual machine you kind of have a",
    "start": "117000",
    "end": "123000"
  },
  {
    "text": "virtualized computer but with containers you can have processes or applications",
    "start": "123000",
    "end": "129319"
  },
  {
    "text": "running but the underlying kernel is the same and the way how containers are implemented and Linux is a container is",
    "start": "129319",
    "end": "136280"
  },
  {
    "text": "basically a collection of namespaces so I in the beginning of this talk I will actually try to break down some of the",
    "start": "136280",
    "end": "142840"
  },
  {
    "text": "most popular Nam spaces there are many of them and what you can actually do with them like each namespace does for",
    "start": "142840",
    "end": "149319"
  },
  {
    "text": "you so let's start with the mount name spaces but to actually uh",
    "start": "149319",
    "end": "157040"
  },
  {
    "text": "discuss Mount name spaces we have to revise what is a Mount Tre on a system right so Mount Tre is like a simple data",
    "start": "157040",
    "end": "164200"
  },
  {
    "text": "structure so if you're running Linux or any Unix based system so you have your",
    "start": "164200",
    "end": "169720"
  },
  {
    "text": "root file system usually mounted at you know like slash root right uh here and",
    "start": "169720",
    "end": "176760"
  },
  {
    "text": "then underneath you can create different directories and mount different file",
    "start": "176760",
    "end": "182120"
  },
  {
    "text": "systems right so usually like you can have a different boot partition which",
    "start": "182120",
    "end": "188519"
  },
  {
    "text": "will be mounted at/ boot have a special device file system mounted at/ DAV",
    "start": "188519",
    "end": "195879"
  },
  {
    "text": "sometimes uh home directories contain different file like are dedicated on different partitions and different file",
    "start": "195879",
    "end": "202519"
  },
  {
    "text": "systems TMP file system like the in memory file system and others right and",
    "start": "202519",
    "end": "209840"
  },
  {
    "text": "special file systems so yeah like everyone has this Mount tree right so",
    "start": "209840",
    "end": "216519"
  },
  {
    "text": "now if we project that to the Mount namespace what happens when you create a",
    "start": "216519",
    "end": "224200"
  },
  {
    "text": "mount namespace and mount namespace are basically the first Nam spaces introduced into Linux so the idea behind",
    "start": "224200",
    "end": "230879"
  },
  {
    "text": "Mount space is you create a name all Nam spaces are created with either with the",
    "start": "230879",
    "end": "237799"
  },
  {
    "text": "Clone or unshare system code so when you and then there you could specify which",
    "start": "237799",
    "end": "243439"
  },
  {
    "text": "kind of name space you want to create so if you want to create a amount Nam",
    "start": "243439",
    "end": "248599"
  },
  {
    "text": "spaces what it basically does under the hood it kind of creates a exact copy of",
    "start": "248599",
    "end": "254680"
  },
  {
    "text": "the mountry into the new name spaces but the idea like why do we why do we need",
    "start": "254680",
    "end": "260079"
  },
  {
    "text": "that right the idea is that this is like the system name uh",
    "start": "260079",
    "end": "265600"
  },
  {
    "text": "mountry and this is like your own private mountry though the idea behind that that like once you have the copy of",
    "start": "265600",
    "end": "273520"
  },
  {
    "text": "your private mountry you can like interact with it without affecting the overall systems right so look for",
    "start": "273520",
    "end": "280479"
  },
  {
    "text": "example you can unmount some file systems and you can even Mount new file",
    "start": "280479",
    "end": "286759"
  },
  {
    "text": "system so you can create a directory and mount something there generally there are restrictions but",
    "start": "286759",
    "end": "293440"
  },
  {
    "text": "yeah so why is it useful like if you used containers uh for example when you",
    "start": "293440",
    "end": "300320"
  },
  {
    "text": "launch a container right you you can for example launch a red hat container on a",
    "start": "300320",
    "end": "305680"
  },
  {
    "text": "Debian system or vice versa right so you can get a different file system under",
    "start": "305680",
    "end": "311639"
  },
  {
    "text": "while inside your container which actually gives you that feeling of a virtual machine it's kind of like you",
    "start": "311639",
    "end": "317520"
  },
  {
    "text": "have a different environment but in a nutshell you don't have a full virtual machine you're still using the same uh",
    "start": "317520",
    "end": "324120"
  },
  {
    "text": "host machine with the same underlying kernel but like the the file system is different and this is what gives you the",
    "start": "324120",
    "end": "330479"
  },
  {
    "text": "feeling of being inside a virtual machine right and uh the other uh thing",
    "start": "330479",
    "end": "338400"
  },
  {
    "text": "why it's very useful it's also for security purposes so uh before namespaces were introduced if you wanted",
    "start": "338400",
    "end": "345319"
  },
  {
    "text": "to sandbox an application you use a thing called truth right or or",
    "start": "345319",
    "end": "351479"
  },
  {
    "text": "alternative technology called jails in Macos but the idea behind that is like",
    "start": "351479",
    "end": "356759"
  },
  {
    "text": "you have your root file system mounted here and then you can create a",
    "start": "356759",
    "end": "362160"
  },
  {
    "text": "directory uh file system and then you call a special system called called Truth and start a process inside the",
    "start": "362160",
    "end": "369479"
  },
  {
    "text": "truth and the idea is that the process started inside the truth directory only",
    "start": "369479",
    "end": "375680"
  },
  {
    "text": "sees the mountry up to that directory so Tru becomes the root Mount the root",
    "start": "375680",
    "end": "381759"
  },
  {
    "text": "namespace for this directory and uh basically the whole point of that if the",
    "start": "381759",
    "end": "388360"
  },
  {
    "text": "process becomes malicious somehow um it shouldn't be able to",
    "start": "388360",
    "end": "393440"
  },
  {
    "text": "access files on your host file system like to steal a password or your SSH key",
    "start": "393440",
    "end": "399080"
  },
  {
    "text": "stored in your host file system the problem with this approach that like while the IDE is great the",
    "start": "399080",
    "end": "405360"
  },
  {
    "text": "implementation has some limitations and there are still ways on Modern operating",
    "start": "405360",
    "end": "410759"
  },
  {
    "text": "system where like uh a Tred process can still somehow affect files on on the",
    "start": "410759",
    "end": "416639"
  },
  {
    "text": "host file systems right and and exfiltrate data and this is what security researchers are usually calling",
    "start": "416639",
    "end": "423639"
  },
  {
    "text": "a a truth Escape or Jail Jailbreak whatever is Mac costing and like in",
    "start": "423639",
    "end": "430039"
  },
  {
    "text": "Linux if you're not careful like the Tred process can still affect the host",
    "start": "430039",
    "end": "435720"
  },
  {
    "text": "file system via bind mounts not closed file descriptors various Sim links",
    "start": "435720",
    "end": "441680"
  },
  {
    "text": "virtual file systems etc etc so what containers do and they",
    "start": "441680",
    "end": "447720"
  },
  {
    "text": "utilize the mount namespace is they they take it one step further so uh to tr a",
    "start": "447720",
    "end": "452800"
  },
  {
    "text": "process with a mount namespace what you do you create a mount namespace and now you have this copy not the original host",
    "start": "452800",
    "end": "460440"
  },
  {
    "text": "Mount tree but the copy of Mount tree and what they do is they create they",
    "start": "460440",
    "end": "465919"
  },
  {
    "text": "start similar to truth they create like a truth environment for your new process but then they also called a special",
    "start": "465919",
    "end": "473479"
  },
  {
    "text": "system call which called pivot route and what pivot route basically does it takes your mountry and like flips on a side",
    "start": "473479",
    "end": "480440"
  },
  {
    "text": "right so so the new root directory becomes the root and your real root",
    "start": "480440",
    "end": "485800"
  },
  {
    "text": "becomes the old root right so it's kind of like becomes like that and once you change the root you and and old root",
    "start": "485800",
    "end": "493440"
  },
  {
    "text": "contains your host file system right but because it's a mount namespace and you now can operate on this copy you can",
    "start": "493440",
    "end": "500240"
  },
  {
    "text": "basically unmount it right and the idea behind here if your process become",
    "start": "500240",
    "end": "505840"
  },
  {
    "text": "malicious it has never nowhere to escape to right it cannot affect the host file system because it's",
    "start": "505840",
    "end": "512680"
  },
  {
    "text": "in this namespace it's already unmounted so like there is no access",
    "start": "512680",
    "end": "518080"
  },
  {
    "text": "there here is a simple example uh so in this case this is my Dev",
    "start": "518080",
    "end": "526320"
  },
  {
    "text": "machine it's a simple Debian so what I do is I list all the amounts available",
    "start": "526320",
    "end": "531720"
  },
  {
    "text": "currently on my host and and by the way this was all copied from a real terminal",
    "start": "531720",
    "end": "537839"
  },
  {
    "text": "copy paste so considered as a d demo but it never fails so yeah these are all the",
    "start": "537839",
    "end": "544279"
  },
  {
    "text": "uh mounts are present on my host file system uh so what I do now I create a",
    "start": "544279",
    "end": "550640"
  },
  {
    "text": "mount namespace and I can do it from the Shell by unshare uh command and I say like hey",
    "start": "550640",
    "end": "557079"
  },
  {
    "text": "create me a new Mount namespace now my shell is executing in the mount namespace and what I'm doing here I'm",
    "start": "557079",
    "end": "565240"
  },
  {
    "text": "unmounting this thing in my namespace right",
    "start": "565240",
    "end": "570519"
  },
  {
    "text": "uh yeah and I can check that it actually succeed so like run user 1000 is not a",
    "start": "570519",
    "end": "576440"
  },
  {
    "text": "mount point anym right but then when I exit the process the process terminates",
    "start": "576440",
    "end": "581560"
  },
  {
    "text": "so again I'm uh exiting both the process and therefore the newly created Mount",
    "start": "581560",
    "end": "587279"
  },
  {
    "text": "namespace I'm in a host Nam space now and here I can check that run user 1000",
    "start": "587279",
    "end": "593959"
  },
  {
    "text": "is still uh still a mount point so like I unmounted that mount",
    "start": "593959",
    "end": "599880"
  },
  {
    "text": "this file system in my copy on my of my namespace but on the I had no effect on",
    "start": "599880",
    "end": "605560"
  },
  {
    "text": "the host file system clear so far okay let's talk about network name",
    "start": "605560",
    "end": "613560"
  },
  {
    "text": "spaces but to talk about Network space is like let's see what kind of network resources we have in an operating system",
    "start": "613560",
    "end": "621040"
  },
  {
    "text": "of course you have is networking you have the network cards right one or several then you have your machine has",
    "start": "621040",
    "end": "628079"
  },
  {
    "text": "some kind of routing configuration or rooting if you're British uh then you have your firewall",
    "start": "628079",
    "end": "635320"
  },
  {
    "text": "configuration right and various operating system tunables configs or tweaks with respect to",
    "start": "635320",
    "end": "643279"
  },
  {
    "text": "networking so now with all these resources we want to create a network Nam space so we call our favorite clone",
    "start": "643279",
    "end": "650240"
  },
  {
    "text": "and and share and what do we get what do you think",
    "start": "650240",
    "end": "656200"
  },
  {
    "text": "copy get nothing and uh we get an empty Nam space",
    "start": "656200",
    "end": "661320"
  },
  {
    "text": "uh it's not really empty you will have a local copy of a local host interface",
    "start": "661320",
    "end": "667240"
  },
  {
    "text": "inside but the thing is what you can now do is you can move some of the",
    "start": "667240",
    "end": "672279"
  },
  {
    "text": "networking resources to your network space not some like only the network art so for example you can move the Nick",
    "start": "672279",
    "end": "678600"
  },
  {
    "text": "from the initial namespace uh all the Nam spaces which are available in your",
    "start": "678600",
    "end": "683959"
  },
  {
    "text": "host called initial namespaces so from the initial networking namespace to your private networking name space and here",
    "start": "683959",
    "end": "691200"
  },
  {
    "text": "you can have separate independent routing configuration you can have",
    "start": "691200",
    "end": "696240"
  },
  {
    "text": "independent firewall configuration and you can have independent operating system configuration so like a total",
    "start": "696240",
    "end": "702880"
  },
  {
    "text": "copy of the whole networking stack just dedicated to yourself and you can do whatever you want with it almost and the",
    "start": "702880",
    "end": "710000"
  },
  {
    "text": "other thing is which is really popular with networking spaces on Linux you can create a virtual network card called vs",
    "start": "710000",
    "end": "718440"
  },
  {
    "text": "so basically they're these are virtual Nicks that always created in pairs and they act like real Nicks and they kind",
    "start": "718440",
    "end": "725839"
  },
  {
    "text": "of always connected with this virtual cable right so like if you send a packet",
    "start": "725839",
    "end": "732600"
  },
  {
    "text": "on one end it will always come out on the other end but why it's useful so like you can create this V spare and",
    "start": "732600",
    "end": "738560"
  },
  {
    "text": "move one of the ends of uh of the vs spare to the network namespaces now we",
    "start": "738560",
    "end": "744360"
  },
  {
    "text": "have two network namespaces two networking stacks on the same system able to communicate with each other",
    "start": "744360",
    "end": "750600"
  },
  {
    "text": "which is very useful for various cases so let's see an example so uh here",
    "start": "750600",
    "end": "757320"
  },
  {
    "text": "I list all my network devices on my host virtual machine and I you see I can have",
    "start": "757320",
    "end": "763480"
  },
  {
    "text": "some kind of like several adapters here uh one real one and one created by",
    "start": "763480",
    "end": "769880"
  },
  {
    "text": "Docker now I'm creating a new network namespaces and again I'm listing all the",
    "start": "769880",
    "end": "775720"
  },
  {
    "text": "Nicks now and I only see my local copy of the Local Host n there is nothing",
    "start": "775720",
    "end": "780959"
  },
  {
    "text": "more and actually to make networking namespace useful you have to always",
    "start": "780959",
    "end": "787000"
  },
  {
    "text": "enable The Local Host interface first before you can do anything yeah and now it works so why is",
    "start": "787000",
    "end": "795279"
  },
  {
    "text": "it's useful it's very like it's very convenient to use for example in testing",
    "start": "795279",
    "end": "800839"
  },
  {
    "text": "in kernel development or other networking applications because you can actually test like a client and a server",
    "start": "800839",
    "end": "807600"
  },
  {
    "text": "on the same machine without resorting to virtual machine so for example this is",
    "start": "807600",
    "end": "813120"
  },
  {
    "text": "my host namespace and this is my newly created Network namespace so what I do",
    "start": "813120",
    "end": "818680"
  },
  {
    "text": "here as I mentioned previously I'm creating a v pair and I'm saying that one uh the adapters will be called left",
    "start": "818680",
    "end": "826440"
  },
  {
    "text": "and right right and I I tell also in immediately in the common that I should",
    "start": "826440",
    "end": "832920"
  },
  {
    "text": "uh move the left part of the Vare back to the namespace number one the initial",
    "start": "832920",
    "end": "838360"
  },
  {
    "text": "namespace uh yeah so namespace number one so like one of the ends will be moved to this",
    "start": "838360",
    "end": "845000"
  },
  {
    "text": "Nam space so now we can check we can list all the adapters and I can see I have one networking adapter called write",
    "start": "845000",
    "end": "852240"
  },
  {
    "text": "right and on my uh host name space my initial name space I can also uh list a",
    "start": "852240",
    "end": "857959"
  },
  {
    "text": "networking adapter and now I have a new networking adapter called Left Right and now I can configure like IP",
    "start": "857959",
    "end": "864399"
  },
  {
    "text": "addresses uh um and enable Nicks on both ends so like IP address here they should",
    "start": "864399",
    "end": "871320"
  },
  {
    "text": "be from the same subnet and uh now I can communicate between the two name spaces",
    "start": "871320",
    "end": "876519"
  },
  {
    "text": "so like this is how I can do testing so I can move a server to a namespace and have a client and test the whole",
    "start": "876519",
    "end": "883240"
  },
  {
    "text": "networking protocol around it right without affecting each",
    "start": "883240",
    "end": "888959"
  },
  {
    "text": "other and the nice thing about it like all the resources that created in the namespace have the lifetime of that",
    "start": "888959",
    "end": "895360"
  },
  {
    "text": "namespaces so now I exit my process which is in the Nam space right and my",
    "start": "895360",
    "end": "902240"
  },
  {
    "text": "process gets destroyed my Nam space gets destroyed and all the resources associated with the namespace get",
    "start": "902240",
    "end": "907720"
  },
  {
    "text": "automatically destroyed so even the VIS adapter which one end was sent to this",
    "start": "907720",
    "end": "913720"
  },
  {
    "text": "namespace also uh gets destroyed so like the automatic cleanup is very very",
    "start": "913720",
    "end": "919360"
  },
  {
    "text": "useful for test like the tear down is simple you shut down the namespace and it's",
    "start": "919360",
    "end": "925320"
  },
  {
    "text": "gone clear so far okay let's talk about process Nam spaces",
    "start": "925320",
    "end": "932360"
  },
  {
    "text": "and to talk about process name spaces let's talk about op pit name spaces sorry and we need to talk about the",
    "start": "932360",
    "end": "938199"
  },
  {
    "text": "process tree so again if you start your system every process on your system has",
    "start": "938199",
    "end": "944000"
  },
  {
    "text": "a process ID PID right and the first process ID which is started by the kernel has a PID one so this is your",
    "start": "944000",
    "end": "951040"
  },
  {
    "text": "init process on model Linux distribution It's usually the system D and system D starts other processes so you have pit",
    "start": "951040",
    "end": "958680"
  },
  {
    "text": "one it starts other processes and these processes can start other processes and all of them can have",
    "start": "958680",
    "end": "965959"
  },
  {
    "text": "IDs so now that we want to create a pit namespace so we do our favorite clone",
    "start": "965959",
    "end": "971560"
  },
  {
    "text": "and and share call and we get",
    "start": "971560",
    "end": "977040"
  },
  {
    "text": "what what do you think huh we get",
    "start": "977040",
    "end": "983800"
  },
  {
    "text": "one well technically we almost get nothing almost yeah but one so we",
    "start": "983800",
    "end": "991040"
  },
  {
    "text": "actually need to create another process in the host namespace which have some kind of ID non one ID but it will",
    "start": "991040",
    "end": "999720"
  },
  {
    "text": "automatically become a PID one in our namespace so it will become the root of",
    "start": "999720",
    "end": "1006639"
  },
  {
    "text": "of the pit right and then being the uh pit one in the namespace again it can",
    "start": "1006639",
    "end": "1012480"
  },
  {
    "text": "create other processes and like yeah you can have the same even pits repeating over and over again",
    "start": "1012480",
    "end": "1020000"
  },
  {
    "text": "but the processes in this case exist both in the host Nam space under some",
    "start": "1020000",
    "end": "1025160"
  },
  {
    "text": "PID and in the Pro PID namespace under some other pit right uh so here is an example so this",
    "start": "1025160",
    "end": "1032839"
  },
  {
    "text": "is my shell I can check its P ID and currently it's 7551 right now uh I",
    "start": "1032839",
    "end": "1039360"
  },
  {
    "text": "create I'm creating a a pit name space and basically because of the semantics I",
    "start": "1039360",
    "end": "1045480"
  },
  {
    "text": "just show I also need to pass the fork parameter but now I can check my ID I'm becoming the init Nam space uh init",
    "start": "1045480",
    "end": "1053080"
  },
  {
    "text": "process in my pit name space so I'm PID number one surprisingly if I go to the proc",
    "start": "1053080",
    "end": "1061160"
  },
  {
    "text": "file system and try to get the pit I will still get a pit from my host name",
    "start": "1061160",
    "end": "1068200"
  },
  {
    "text": "space and this is because this is actually an example of a container Escape because when containers create",
    "start": "1068200",
    "end": "1074640"
  },
  {
    "text": "it's not enough just to create a pit name space you also need to create a mount name space to mask that if you",
    "start": "1074640",
    "end": "1079880"
  },
  {
    "text": "don't want processes discovering their pids on the host name spaces right uh so",
    "start": "1079880",
    "end": "1086600"
  },
  {
    "text": "here I didn't do that so I can see the pit on my host name space and",
    "start": "1086600",
    "end": "1091679"
  },
  {
    "text": "also I can see a mapping like NS pit so like I can see that in this namespace",
    "start": "1091679",
    "end": "1097400"
  },
  {
    "text": "the process on the host namespace is mapped to pit one uh also PS3 kind of like gives you",
    "start": "1097400",
    "end": "1104799"
  },
  {
    "text": "this helpful example so this is my initial shell right and this is what",
    "start": "1104799",
    "end": "1111320"
  },
  {
    "text": "processes are created I created pseudo twice because I used fork and then I in",
    "start": "1111320",
    "end": "1116760"
  },
  {
    "text": "share and then and then when you see the bash started s",
    "start": "1116760",
    "end": "1122080"
  },
  {
    "text": "7574 but it tells you also that here we transitioned to a new pit name space and",
    "start": "1122080",
    "end": "1127280"
  },
  {
    "text": "it became uh a pit number one and then in the pit name space we have the PS3",
    "start": "1127280",
    "end": "1132760"
  },
  {
    "text": "running under this pit okay clear",
    "start": "1132760",
    "end": "1138919"
  },
  {
    "text": "let's talk about users we know users on the system like you have the root which",
    "start": "1138919",
    "end": "1144600"
  },
  {
    "text": "has the user ID zero uh usually actually root doesn't have to be named root so",
    "start": "1144600",
    "end": "1150080"
  },
  {
    "text": "any user with a user ID zero is root uh",
    "start": "1150080",
    "end": "1155200"
  },
  {
    "text": "then you have some you may have some depending on your distribution some system users called demon like sshd",
    "start": "1155200",
    "end": "1160720"
  },
  {
    "text": "engine X they may have some user IDs then you have like actual real users who",
    "start": "1160720",
    "end": "1166080"
  },
  {
    "text": "log in into the system like ignant Alice and Bob um so when you create a user",
    "start": "1166080",
    "end": "1172559"
  },
  {
    "text": "name space with our favorite system called so what happens what do you",
    "start": "1172559",
    "end": "1179159"
  },
  {
    "text": "get uh no well technically you get the same",
    "start": "1179159",
    "end": "1184440"
  },
  {
    "text": "thing but it's not a copy it's kind of the same representation but the thing is",
    "start": "1184440",
    "end": "1189760"
  },
  {
    "text": "what you can do here you can create mappings uh in the username so for",
    "start": "1189760",
    "end": "1195000"
  },
  {
    "text": "example in my username spaces I can remap my host user ignot to the same user in my username",
    "start": "1195000",
    "end": "1203080"
  },
  {
    "text": "space I can become ignot in the same username space like 1,000 to 1,000 which",
    "start": "1203080",
    "end": "1208120"
  },
  {
    "text": "is not very interesting or useful uh what I can do also I can remap",
    "start": "1208120",
    "end": "1213640"
  },
  {
    "text": "Alice to become the privilege demon process which is more fun and the most",
    "start": "1213640",
    "end": "1219039"
  },
  {
    "text": "fun I can remap Bob a regular user on my host file system to become rude in my",
    "start": "1219039",
    "end": "1224240"
  },
  {
    "text": "username space cool right so let's see an example um",
    "start": "1224240",
    "end": "1231960"
  },
  {
    "text": "here is my ID I'm ignot my U ID is 1,000 right I can I create a username space un",
    "start": "1231960",
    "end": "1239440"
  },
  {
    "text": "share and now I'm by default unshare Maps you to the user ID 65534 which is",
    "start": "1239440",
    "end": "1247480"
  },
  {
    "text": "nobody and the system tells me that so I exit my username space I create another",
    "start": "1247480",
    "end": "1253640"
  },
  {
    "text": "ID and I can actually Supply mappings that I want myself so I now I I'm telling the system to map my user to uh",
    "start": "1253640",
    "end": "1261640"
  },
  {
    "text": "one and my group to one and then I can run the ID and now I'm suddenly demon on",
    "start": "1261640",
    "end": "1266960"
  },
  {
    "text": "the system uh and this is like the example I can actually even map to non-existing uid so like I can map",
    "start": "1266960",
    "end": "1274679"
  },
  {
    "text": "myself to user 1337 and my system even doesn't have such a user and and the",
    "start": "1274679",
    "end": "1280279"
  },
  {
    "text": "shell tells me I have no name uh yeah but I still have the user ID so but I have no name as in hacker",
    "start": "1280279",
    "end": "1288200"
  },
  {
    "text": "movie uh yeah and yeah the most interesting case I can tell uh the system to map",
    "start": "1288200",
    "end": "1295600"
  },
  {
    "text": "myself to root so and here I immediately become rude right and ID I'm zero",
    "start": "1295600",
    "end": "1302360"
  },
  {
    "text": "and and and",
    "start": "1302360",
    "end": "1306320"
  },
  {
    "text": "everything so let's talk about unprivileged username spaces so if you are intentive enough watching this demo",
    "start": "1307480",
    "end": "1314320"
  },
  {
    "text": "you will probably notice the difference all the Nam spaces that presented I created with pseudo like like the mount",
    "start": "1314320",
    "end": "1321840"
  },
  {
    "text": "and and share name space I need to run pseudo and share right versus when I created a username space I didn't use",
    "start": "1321840",
    "end": "1328960"
  },
  {
    "text": "PSE sudo right so here I need real root",
    "start": "1328960",
    "end": "1335039"
  },
  {
    "text": "privileges to create other name space but I don't need any privileges to create a username space and moreover I",
    "start": "1335039",
    "end": "1342120"
  },
  {
    "text": "don't need it need privileges to create a user name space but also I can map",
    "start": "1342120",
    "end": "1347919"
  },
  {
    "text": "myself with without any privilege to become the user to become root in the Nam space right so it's interesting so",
    "start": "1347919",
    "end": "1356520"
  },
  {
    "text": "like I don't have any privileges I create a namespace and suddenly I'm becoming rude on the",
    "start": "1356520",
    "end": "1361960"
  },
  {
    "text": "system yeah so it's is it unlimited power and the ultimate privilege",
    "start": "1361960",
    "end": "1367520"
  },
  {
    "text": "escalation you can always",
    "start": "1367520",
    "end": "1370880"
  },
  {
    "text": "use uh yeah uh good question what have it depends if you have amount name",
    "start": "1374320",
    "end": "1380120"
  },
  {
    "text": "space yeah if I didn't have it if I create the file system from the host perspective it will be as if my user",
    "start": "1380120",
    "end": "1386240"
  },
  {
    "text": "created the files I don't remember it depends again",
    "start": "1386240",
    "end": "1393320"
  },
  {
    "text": "on your permission but we'll get there okay",
    "start": "1393320",
    "end": "1399840"
  },
  {
    "text": "uh so yeah I mean it's not an ultimate privilege escalation obviously because",
    "start": "1400200",
    "end": "1406080"
  },
  {
    "text": "all the hackers will be using that and will be ined position so why do you need un privileged usern name spaces in the",
    "start": "1406080",
    "end": "1412640"
  },
  {
    "text": "first place so the thing is in the system user namespaces are kind of like",
    "start": "1412640",
    "end": "1418159"
  },
  {
    "text": "the permission manager for other namespaces so for example I'm an unprivileged user on this system and I",
    "start": "1418159",
    "end": "1424480"
  },
  {
    "text": "can create a A usern namespace and M myself to root and but there for example I can",
    "start": "1424480",
    "end": "1432559"
  },
  {
    "text": "check that the /tmp is not a mount point so now because I'm root why can't I use",
    "start": "1432559",
    "end": "1438159"
  },
  {
    "text": "a Mount operation right and I want to mount a new file system uh on /tmp but I",
    "start": "1438159",
    "end": "1445000"
  },
  {
    "text": "still get permission denied even though I seem to be rude so why is that because on the system uh so you have all these",
    "start": "1445000",
    "end": "1452480"
  },
  {
    "text": "initial name spaces so you have initial username spacal initial network name spaces Mount and pit name spaces so what",
    "start": "1452480",
    "end": "1459760"
  },
  {
    "text": "we did here uh on Linux the user name space is set to be owning every other",
    "start": "1459760",
    "end": "1466480"
  },
  {
    "text": "namespace in this in this set right so what but what we",
    "start": "1466480",
    "end": "1472279"
  },
  {
    "text": "did here so we created a new username space right uh but when we tried to",
    "start": "1472279",
    "end": "1477760"
  },
  {
    "text": "issue a mount command so we tried it we didn't create a mount namespace so we tried to interact with the initial Mount",
    "start": "1477760",
    "end": "1485200"
  },
  {
    "text": "name space because we didn't create a new Mount name space and the permission models in Linux is doing checks again",
    "start": "1485200",
    "end": "1491600"
  },
  {
    "text": "not your current user but the user that created a particular Nam space so in",
    "start": "1491600",
    "end": "1497480"
  },
  {
    "text": "this case when m trying to interact with the initial Mount name space the permission checks are done against the",
    "start": "1497480",
    "end": "1503399"
  },
  {
    "text": "initial username space and the initial username space I'm not a privileged user so therefore systems does not me allowed",
    "start": "1503399",
    "end": "1510320"
  },
  {
    "text": "to do a privileged operation yeah so what can I do once I'm a new",
    "start": "1510320",
    "end": "1518320"
  },
  {
    "text": "user uh a privileged user in my username space I can create other Nam spaces so I",
    "start": "1518320",
    "end": "1524440"
  },
  {
    "text": "can actually create a new Mount name space which will be a copy of of the initial months they say but now I can",
    "start": "1524440",
    "end": "1530840"
  },
  {
    "text": "interact with that because the permission checks will be done you know like according to my user ID in my my",
    "start": "1530840",
    "end": "1538159"
  },
  {
    "text": "namespace and it should be allowed so let's see an example so again it wasn't allowed but if I create a new Mount name",
    "start": "1538159",
    "end": "1545520"
  },
  {
    "text": "space now I can easily mount a 10pf file system on the/ TMP and it just works",
    "start": "1545520",
    "end": "1552080"
  },
  {
    "text": "right and we can check that's its a mount Point Okay so",
    "start": "1552080",
    "end": "1558679"
  },
  {
    "text": "this combination gives you a nice building block to do unprivileged",
    "start": "1558679",
    "end": "1563799"
  },
  {
    "text": "containers for code sand boxing so why do you want to do that so from a high",
    "start": "1563799",
    "end": "1570080"
  },
  {
    "text": "level perspective you have your infrastructure you have some applications running right uh which is",
    "start": "1570080",
    "end": "1575520"
  },
  {
    "text": "for example a web server and and then you have like internet people you have",
    "start": "1575520",
    "end": "1581840"
  },
  {
    "text": "good people and bad people they're sending good both good and bad traffic and like bad people always try to",
    "start": "1581840",
    "end": "1587600"
  },
  {
    "text": "exploit your application right so and if you don't have any sandboxing in place",
    "start": "1587600",
    "end": "1592799"
  },
  {
    "text": "not only your application get exploited like your whole infrastructure might get exploited so what you want to do is like",
    "start": "1592799",
    "end": "1598960"
  },
  {
    "text": "you want to sandbox your application to ensure that any bugs you didn't discover cannot be like used to exploit your",
    "start": "1598960",
    "end": "1606600"
  },
  {
    "text": "whole system potentially on on your application and like what is the the",
    "start": "1606600",
    "end": "1612960"
  },
  {
    "text": "best example of a network facing uh application that receives un trusted",
    "start": "1612960",
    "end": "1618679"
  },
  {
    "text": "it's probably a browser right you download a lot of HTML so Chrome multiprocess sand model is like very",
    "start": "1618679",
    "end": "1625320"
  },
  {
    "text": "complicated so what they do they have several layers of sandboxing so what",
    "start": "1625320",
    "end": "1630399"
  },
  {
    "text": "they try to do first every tab you run in Chrome is run actually as a separate",
    "start": "1630399",
    "end": "1636159"
  },
  {
    "text": "process on Linux so you have already have the address space isolation between the processes so if you if one tab gets",
    "start": "1636159",
    "end": "1643520"
  },
  {
    "text": "compromised it cannot affect other tabs so yeah address space isolation",
    "start": "1643520",
    "end": "1650159"
  },
  {
    "text": "secondly they actually use these and privilege username spaces and various other name spaces to create these",
    "start": "1650159",
    "end": "1657159"
  },
  {
    "text": "virtual containers around each process yeah and on top of that they",
    "start": "1657159",
    "end": "1663159"
  },
  {
    "text": "also use the technology called saom which was introduced here last year and some other years as well so like to",
    "start": "1663159",
    "end": "1669720"
  },
  {
    "text": "further uh like really really limit what this thing can do so like if there is a",
    "start": "1669720",
    "end": "1676799"
  },
  {
    "text": "buck in the HTML part in Chrome it kind of has to go up three several layers of",
    "start": "1676799",
    "end": "1681880"
  },
  {
    "text": "sandboxing to actually affect the system yeah and if you're interested in more detail this is a reference where you can",
    "start": "1681880",
    "end": "1689640"
  },
  {
    "text": "look for it",
    "start": "1689640",
    "end": "1694159"
  },
  {
    "text": "yes I mean it it is for Linux but they have similar techn they try to use similar Technologies on other operating",
    "start": "1695080",
    "end": "1701880"
  },
  {
    "text": "system available I'm not for example a Windows expert I'm not sure if it's all",
    "start": "1701880",
    "end": "1707640"
  },
  {
    "text": "of it is true on Windows but I do know most likely they still run tabs as separate processes so that's definitely",
    "start": "1707640",
    "end": "1715399"
  },
  {
    "text": "true yeah there are some other users of unprivileged usern name spaces so a",
    "start": "1715399",
    "end": "1720720"
  },
  {
    "text": "project called rootless containers which allow you to run your Docker without Root which is very useful uh system",
    "start": "1720720",
    "end": "1728159"
  },
  {
    "text": "decore dump also uses unprivileged containers to actually like when your",
    "start": "1728159",
    "end": "1734559"
  },
  {
    "text": "system creates a cordum they want to process it but they don't want to accidentally like process malicious",
    "start": "1734559",
    "end": "1740799"
  },
  {
    "text": "input so they Fork themselves into the container and basically process a core dump in the container and again various",
    "start": "1740799",
    "end": "1748159"
  },
  {
    "text": "testing Frameworks fake root applications all of that other thing that uh requires you to potentially run",
    "start": "1748159",
    "end": "1755480"
  },
  {
    "text": "stuff as root but you don't want to give extra privileges to it uh to run as root on your real host",
    "start": "1755480",
    "end": "1763278"
  },
  {
    "text": "system so in a nutshell we can say that a privilege user namespaces is a great",
    "start": "1763480",
    "end": "1769240"
  },
  {
    "text": "tool for applications to create effective sandboxes and Harden their security",
    "start": "1769240",
    "end": "1775679"
  },
  {
    "text": "right well maybe not right so if",
    "start": "1775679",
    "end": "1781360"
  },
  {
    "text": "you're who here uses Arch like you say by the way use Arch oh",
    "start": "1781360",
    "end": "1787159"
  },
  {
    "text": "cool uh if you read this is from Arch Arc Linux hardening guide but you can like",
    "start": "1787159",
    "end": "1795320"
  },
  {
    "text": "read any Linux Kernel Security hardening guide and you may see that most of these",
    "start": "1795320",
    "end": "1801640"
  },
  {
    "text": "guide for some reason recommending disabling unprivileged username spaces so yeah if you talk to security folk the",
    "start": "1801640",
    "end": "1808519"
  },
  {
    "text": "first thing they will say like disable and privilege username say disable and privilege username spaces because it's",
    "start": "1808519",
    "end": "1814440"
  },
  {
    "text": "bad for security which is weird right so like we just discovered that it's a good sandboxing technology but everyone wants",
    "start": "1814440",
    "end": "1820679"
  },
  {
    "text": "to disable it and to give you an example why let's talk about a kernel bug in",
    "start": "1820679",
    "end": "1827279"
  },
  {
    "text": "cler which is like from 2022 but it's even older than that so A long long time",
    "start": "1827279",
    "end": "1834360"
  },
  {
    "text": "ago uh one of our Engineers actually reported actually discovered the Kon BR",
    "start": "1834360",
    "end": "1840880"
  },
  {
    "text": "in our jira uh so with some they were experimenting",
    "start": "1840880",
    "end": "1846519"
  },
  {
    "text": "with some networking configuration and they realized they can crash the Linux system with some specific configuration",
    "start": "1846519",
    "end": "1852640"
  },
  {
    "text": "and you can see the the bug is quite old it's from 2019 year uh uh year like we uh we are",
    "start": "1852640",
    "end": "1860440"
  },
  {
    "text": "responsible for the Linux kernel we actually reported that bug Upstream but",
    "start": "1860440",
    "end": "1865720"
  },
  {
    "text": "technically we didn't get any attention so like nobody even responded and we didn't know exactly how the TC subsystem",
    "start": "1865720",
    "end": "1872559"
  },
  {
    "text": "Works inside the kernel and we didn't get any output uh nobody responded to that b and and that's natural because",
    "start": "1872559",
    "end": "1880600"
  },
  {
    "text": "this is a reproducer to reproduce theog but the problem is like you need like",
    "start": "1880600",
    "end": "1886080"
  },
  {
    "text": "super user privileges right to to to do that so basically is it critical well no",
    "start": "1886080",
    "end": "1893440"
  },
  {
    "text": "like so the system administrator can crash a system so like yeah it's not",
    "start": "1893440",
    "end": "1898679"
  },
  {
    "text": "like yeah it is a bug it needs to be fixed but it's not that critical right because you can do it officially in Linux by running this common for testing",
    "start": "1898679",
    "end": "1907960"
  },
  {
    "text": "right but fast forward to 2022 and we come back to like remember the",
    "start": "1907960",
    "end": "1913639"
  },
  {
    "text": "networking namespaces how and how they work like hey um well we're thinking like after a all why not",
    "start": "1913639",
    "end": "1920559"
  },
  {
    "text": "why not try to reproduce the bug in the kernel Network in the lunux networking",
    "start": "1920559",
    "end": "1926720"
  },
  {
    "text": "names spaces so and here is an example I I'm actually running the bug was fixed",
    "start": "1926720",
    "end": "1932039"
  },
  {
    "text": "already in the kernel but I'm running a on a buggy system now and I'm an privileged user uh this is the last",
    "start": "1932039",
    "end": "1938559"
  },
  {
    "text": "version which had the bug so yeah I'm showing that I'm fully on privileged I'm just user ID 1000 what I'm doing here",
    "start": "1938559",
    "end": "1946440"
  },
  {
    "text": "I'm creating both the user name space and the networking Nam space I'm U again",
    "start": "1946440",
    "end": "1951840"
  },
  {
    "text": "configuring my Local Host interface up and then I'm trying to run the",
    "start": "1951840",
    "end": "1957440"
  },
  {
    "text": "reproducer from the to reproduce the bug and and and and after you configured",
    "start": "1957440",
    "end": "1964039"
  },
  {
    "text": "your system all you need is one ping you need to send one packet through through the networking device and if you",
    "start": "1964039",
    "end": "1969880"
  },
  {
    "text": "basically uh run this like your system will crash so now it becomes more interesting right because I could for",
    "start": "1969880",
    "end": "1976679"
  },
  {
    "text": "example I could run my unprivileged container in our kubernetes cluster with",
    "start": "1976679",
    "end": "1981840"
  },
  {
    "text": "no Privileges and I can go and crush a kubernetes host and I assume you could crash like a cloud provider providing",
    "start": "1981840",
    "end": "1988360"
  },
  {
    "text": "you a kubernetes service and and turns out we're not alone here so this is not the only bug",
    "start": "1988360",
    "end": "1995440"
  },
  {
    "text": "which become a security vulnerability just because and privileged user name spaces exist and like a simple scan of",
    "start": "1995440",
    "end": "2002120"
  },
  {
    "text": "the CV database there are many more of them and they keep popping up",
    "start": "2002120",
    "end": "2008639"
  },
  {
    "text": "so why do these bugs uh become CVS why does this happen is this because the",
    "start": "2008639",
    "end": "2014200"
  },
  {
    "text": "user name spaces are bad well no they're actually doing what they supposed to do",
    "start": "2014200",
    "end": "2019720"
  },
  {
    "text": "the problem is elsewhere inside the kernel so this is like a pseudo code of",
    "start": "2019720",
    "end": "2025519"
  },
  {
    "text": "some kernel functionality which is was originally only available to privileged",
    "start": "2025519",
    "end": "2030880"
  },
  {
    "text": "users so you basically get some check privilege checks so okay if capable sis",
    "start": "2030880",
    "end": "2036760"
  },
  {
    "text": "admin and then do some privileged stuff and the problem with that that like over time the Linux kernel code batch is s is",
    "start": "2036760",
    "end": "2044320"
  },
  {
    "text": "huge that this thing may contain bugs right but previously it wasn't a problem",
    "start": "2044320",
    "end": "2050919"
  },
  {
    "text": "because only like privileged user can get to this point in code execution but",
    "start": "2050919",
    "end": "2056560"
  },
  {
    "text": "the availability of unprivileged username spaces allows any user ownown system to actually get to that code and",
    "start": "2056560",
    "end": "2063480"
  },
  {
    "text": "if that code is buggy you can trigger bugs in the Linux Kel is and unprivileged user user which is bad",
    "start": "2063480",
    "end": "2069280"
  },
  {
    "text": "that's why all the security folks tell you that username spaces are bad so what what can we do about it",
    "start": "2069280",
    "end": "2077158"
  },
  {
    "text": "right so uh well well we can follow the advice and we can disable username",
    "start": "2077159",
    "end": "2083599"
  },
  {
    "text": "spaces in our colel configuration file uh which is uh or you can use a special cctl so",
    "start": "2083599",
    "end": "2092560"
  },
  {
    "text": "there is a how many username spaces you can create and usually it's a big positive number",
    "start": "2092560",
    "end": "2098640"
  },
  {
    "text": "uh so you can create a username space but if you set it to zero uh so you",
    "start": "2098640",
    "end": "2103839"
  },
  {
    "text": "cannot create username spaces anymore so you can disable them even without recompiling the kernel however the",
    "start": "2103839",
    "end": "2111040"
  },
  {
    "text": "problem with that approach it's kind of like a a cracking a knot with a sledgehammer",
    "start": "2111040",
    "end": "2117200"
  },
  {
    "text": "right so uh you kind of like disable the whole useful thing which allows you to",
    "start": "2117200",
    "end": "2123400"
  },
  {
    "text": "sandbox your applications as well as like having a good testing framework for for the other",
    "start": "2123400",
    "end": "2129599"
  },
  {
    "text": "code uh Debian operating systems and then it",
    "start": "2129599",
    "end": "2134880"
  },
  {
    "text": "was and therefore Ubuntu also adopted and then it was ported to Arch Linux",
    "start": "2134880",
    "end": "2140640"
  },
  {
    "text": "also introduced another cctl that uh instead of completely",
    "start": "2140640",
    "end": "2146440"
  },
  {
    "text": "disabling username space you can only disable unprivileged username space so",
    "start": "2146440",
    "end": "2152920"
  },
  {
    "text": "uh but that patch was never accepted Upstream so like basically when you have this cctl enabled and you can find some",
    "start": "2152920",
    "end": "2160040"
  },
  {
    "text": "guides on the internet doing so so if you're nonroot user you cannot you cannot create a username space but if",
    "start": "2160040",
    "end": "2166720"
  },
  {
    "text": "you're a root user you can still create username spaces so Docker works on your system but again this patch was proposed",
    "start": "2166720",
    "end": "2173680"
  },
  {
    "text": "by Debian but it was never accepted in Upstream kernel so it's not available on all distribution so I know it's",
    "start": "2173680",
    "end": "2179839"
  },
  {
    "text": "available Deb and you boot to Arch Linux but not on red hat for",
    "start": "2179839",
    "end": "2185318"
  },
  {
    "text": "example U yeah and and the idea why it wasn't accepted because the whole kinal",
    "start": "2185560",
    "end": "2192000"
  },
  {
    "text": "Community is kind of divided into camps right from one side we say like well uh",
    "start": "2192000",
    "end": "2199000"
  },
  {
    "text": "should we have unprivileged username spaces and the security people say like we need to disable un privileged",
    "start": "2199000",
    "end": "2204920"
  },
  {
    "text": "username spaces because they create more vul vulnerabilities actually they don't",
    "start": "2204920",
    "end": "2210079"
  },
  {
    "text": "create more vulnerabilities but they open the attack surface to unprivileged users more in the kernel and the other",
    "start": "2210079",
    "end": "2217760"
  },
  {
    "text": "side of the cam says like no we need to keep and privilege username spaces",
    "start": "2217760",
    "end": "2222960"
  },
  {
    "text": "because they allow us for more secure designs and the whole problem with unprivileged username spaces is not",
    "start": "2222960",
    "end": "2229240"
  },
  {
    "text": "because they exist but because other bugs in the curent exist so let's just",
    "start": "2229240",
    "end": "2235040"
  },
  {
    "text": "instead fix all the bugs right let's just fix all the bugs in the Linux kernel uh probably not will work very",
    "start": "2235040",
    "end": "2243800"
  },
  {
    "text": "well so should we disable or keep uh well actually let's do both right so the",
    "start": "2243800",
    "end": "2250640"
  },
  {
    "text": "idea here is how do we allow some applications that we trust to create username spaces our testing framework",
    "start": "2250640",
    "end": "2258000"
  },
  {
    "text": "our services that require sandboxing while prohibiting the others like a random app that you down on the internet",
    "start": "2258000",
    "end": "2264119"
  },
  {
    "text": "cannot exploit a kernel back on the system and for this you need some kind of policy now right and policy in Linux",
    "start": "2264119",
    "end": "2271920"
  },
  {
    "text": "is equal to some Linux security module implementation who here worked with Linux security module",
    "start": "2271920",
    "end": "2279079"
  },
  {
    "text": "uh maybe you know SE Linux who here works with Linux so SE Linux is like one of the uh main example of Linux security",
    "start": "2279079",
    "end": "2286839"
  },
  {
    "text": "modules you can use to do it but the problem with the SE Linux if you ever",
    "start": "2286839",
    "end": "2292040"
  },
  {
    "text": "worked with the SE Linux defining a good security policy is very complicated so",
    "start": "2292040",
    "end": "2298520"
  },
  {
    "text": "first of all it uses a custom language to describe your security policies also",
    "start": "2298520",
    "end": "2304599"
  },
  {
    "text": "if you want to to be really really fine grain so you have to do a lot of stuff and basically you have to have a",
    "start": "2304599",
    "end": "2311079"
  },
  {
    "text": "dedicated team just to managing a Linux policy for a complicated production",
    "start": "2311079",
    "end": "2316240"
  },
  {
    "text": "setup so we actually opted not to doing that what what instead we started investigating is to use the BPF LSM",
    "start": "2316240",
    "end": "2324440"
  },
  {
    "text": "who've been to the ebpf talk introduction to ebpf yeah so you kind of have the idea of like what it ebpf does",
    "start": "2324440",
    "end": "2332240"
  },
  {
    "text": "but like usually ebpf is used for tracing or performance investigations but here you can actually write your",
    "start": "2332240",
    "end": "2339760"
  },
  {
    "text": "security policies in BPF programming languages so for example you have your kernel implements some system",
    "start": "2339760",
    "end": "2346200"
  },
  {
    "text": "call uh what you can do is you can write some policy as a BPF program attach it",
    "start": "2346200",
    "end": "2352160"
  },
  {
    "text": "to a particular hook in the kernel and then when some process runs uh and some",
    "start": "2352160",
    "end": "2358079"
  },
  {
    "text": "process for example in this case calls the Clone system call uh we can check if it's allowed to",
    "start": "2358079",
    "end": "2364760"
  },
  {
    "text": "do so and either allow unprivileged usernames spes or deny very for each process so it will be very very fine",
    "start": "2364760",
    "end": "2372720"
  },
  {
    "text": "grain uh the problem with this approach we tried to select a proper security hook inside the Linux",
    "start": "2372720",
    "end": "2379480"
  },
  {
    "text": "kernel uh which kind of created a little bit of bad experience for operations",
    "start": "2379480",
    "end": "2384880"
  },
  {
    "text": "people because the way how it was implemented if you attach a policy which",
    "start": "2384880",
    "end": "2390720"
  },
  {
    "text": "prohibits you creating unprivileged username space the actual user of the application will not get the permission",
    "start": "2390720",
    "end": "2396640"
  },
  {
    "text": "denied will get that cannot allocate memory uh error code and this is because",
    "start": "2396640",
    "end": "2402280"
  },
  {
    "text": "the hook we selected is implemented like this so the error is defined in om this",
    "start": "2402280",
    "end": "2409280"
  },
  {
    "text": "is where we attach stuff and this is where prohibit creating the username",
    "start": "2409280",
    "end": "2415119"
  },
  {
    "text": "space but as you can see we kind of ignore the error code and just return here in om M so which create a lot of",
    "start": "2415119",
    "end": "2422760"
  },
  {
    "text": "confusion for our sres actually like why is this is it reporting no memory I",
    "start": "2422760",
    "end": "2430119"
  },
  {
    "text": "because we have a lot of memory on our servers",
    "start": "2430119",
    "end": "2435560"
  },
  {
    "text": "so to address this we we wanted to propose a new security hook just for",
    "start": "2435560",
    "end": "2441079"
  },
  {
    "text": "this purpose in the Linux kernel which will be accepted at stream uh but there",
    "start": "2441079",
    "end": "2446400"
  },
  {
    "text": "were dragons in with this approach and you can read the details here and the",
    "start": "2446400",
    "end": "2452200"
  },
  {
    "text": "problem with that that the maintainer of unprivileged username spaces in from from this Camp so they strongly believe",
    "start": "2452200",
    "end": "2460480"
  },
  {
    "text": "that we should not ever ever disable unprivileged username spaces and we should not police them in any way and uh",
    "start": "2460480",
    "end": "2468160"
  },
  {
    "text": "yeah they kept refusing our proposal and we actually spent six months arguing",
    "start": "2468160",
    "end": "2473560"
  },
  {
    "text": "that the security Community needs it luckily like Linux kernel is the biggest",
    "start": "2473560",
    "end": "2479520"
  },
  {
    "text": "open source project on the world so it's kind of democratic so it's not like a decision of a single person right no",
    "start": "2479520",
    "end": "2487000"
  },
  {
    "text": "wrong this is a guy who decides and and luckily linos actually took our position",
    "start": "2487000",
    "end": "2494280"
  },
  {
    "text": "and said like okay if we have security policies policing like opening a file",
    "start": "2494280",
    "end": "2500359"
  },
  {
    "text": "why shouldn't we have a security hook policing like a complicated thing like unprivileged usern name spaces so uh",
    "start": "2500359",
    "end": "2508079"
  },
  {
    "text": "this is what his response it's very funny you can read it you know lonus usually when he's angry writes funny",
    "start": "2508079",
    "end": "2514560"
  },
  {
    "text": "text uh so overall uh we got our cured merge and from Linux 6.1 you have a new",
    "start": "2514560",
    "end": "2520800"
  },
  {
    "text": "shiny security hook where you can attach a BPF policy to actually really find grain police and prig spaces and here is",
    "start": "2520800",
    "end": "2528880"
  },
  {
    "text": "an full feature example you can later copy paste from the slide here it's like it's not a Gro security policy it's kind",
    "start": "2528880",
    "end": "2536760"
  },
  {
    "text": "of uh it just shows that it works so this is our new security hook that we",
    "start": "2536760",
    "end": "2541960"
  },
  {
    "text": "introduced called user NS create and in this particular example I'm creating a",
    "start": "2541960",
    "end": "2547400"
  },
  {
    "text": "policy just to show it works so I'm saying in here if my process name starts",
    "start": "2547400",
    "end": "2554880"
  },
  {
    "text": "uh uh starts with a t i allow it to create unprivileged username spaces but",
    "start": "2554880",
    "end": "2560079"
  },
  {
    "text": "if not it returns permission denied and uh basically if you went to the BPF",
    "start": "2560079",
    "end": "2566319"
  },
  {
    "text": "truck I hope they showed you how to compile BPF applications but if not you",
    "start": "2566319",
    "end": "2571559"
  },
  {
    "text": "can run these commment so you can compile your policy into a program then",
    "start": "2571559",
    "end": "2576680"
  },
  {
    "text": "because the BPF ecosystem is very weird and developer and friendly you can you need to generate a skeleton from this",
    "start": "2576680",
    "end": "2584040"
  },
  {
    "text": "program and then it will produce you another program which loads that policy into the kernel so this is the problem",
    "start": "2584040",
    "end": "2591319"
  },
  {
    "text": "that loads it in the kernel and you you and yeah uh from this point our policy",
    "start": "2591319",
    "end": "2596520"
  },
  {
    "text": "is kind of enforced so going back to that we again need to compile this real",
    "start": "2596520",
    "end": "2601760"
  },
  {
    "text": "program and when we load it our policy is now enforced in the kernel but that's",
    "start": "2601760",
    "end": "2606839"
  },
  {
    "text": "not interesting the interesting part is how it works so again once the policy is loaded it's enforced so now I try to",
    "start": "2606839",
    "end": "2613960"
  },
  {
    "text": "create an N share an unprivileged user space using",
    "start": "2613960",
    "end": "2619160"
  },
  {
    "text": "using and share and I'm getting the proper error code that operation is not permitted but remember how our policy",
    "start": "2619160",
    "end": "2626440"
  },
  {
    "text": "was implemented so if I rename the B and share binary to SL trusted I can",
    "start": "2626440",
    "end": "2633040"
  },
  {
    "text": "suddenly create a username space because I'm kind of Allowed by the PO policy so",
    "start": "2633040",
    "end": "2638319"
  },
  {
    "text": "and uh so basically the similar approach but much more complicated we now are",
    "start": "2638319",
    "end": "2643920"
  },
  {
    "text": "using in production so we know we have an allow list of services or applications that are that actually need",
    "start": "2643920",
    "end": "2650640"
  },
  {
    "text": "unprivileged username spaces to for sandboxing testing and other stuff but",
    "start": "2650640",
    "end": "2656040"
  },
  {
    "text": "uh for any other software which is not in the allow list we don't allow on privileged username",
    "start": "2656040",
    "end": "2663160"
  },
  {
    "text": "spaces I think that's it so inclusions and privilege username spaces are a nice",
    "start": "2663880",
    "end": "2669800"
  },
  {
    "text": "building block in Linux which should you definitely explore for better application sandboxing rootless",
    "start": "2669800",
    "end": "2675720"
  },
  {
    "text": "containers and reduce need for set u ID programs however uncontrolled username",
    "start": "2675720",
    "end": "2681400"
  },
  {
    "text": "spaces may have uh uh widen the system attack service by escalating simple",
    "start": "2681400",
    "end": "2688240"
  },
  {
    "text": "kernel bugs to actual security vulnerabilities and we can still get Best of Both Worlds by utilizing Linux",
    "start": "2688240",
    "end": "2694960"
  },
  {
    "text": "security models to provide really fun fine grain uh access for application to and privilege username spaces and I",
    "start": "2694960",
    "end": "2702839"
  },
  {
    "text": "highly encourage you to consider if you want to employ any uh Linux security module to employ BPF LSM because it's",
    "start": "2702839",
    "end": "2711040"
  },
  {
    "text": "more a new developer friendly LSM so now you don't have to write these complicated SC Linux policies you write",
    "start": "2711040",
    "end": "2718359"
  },
  {
    "text": "your policies in a simple C programming language which is understood by most developers so they can actually",
    "start": "2718359",
    "end": "2724680"
  },
  {
    "text": "collaborate on these policies with you so like if now in production if someone needs to add a service to allow list",
    "start": "2724680",
    "end": "2732760"
  },
  {
    "text": "they don't create a ticket for us they just send a pool request to the policy and it all works thank you very much here are some",
    "start": "2732760",
    "end": "2740359"
  },
  {
    "text": "links uh links to the Man pages describing the various namespace functionalities everything that I",
    "start": "2740359",
    "end": "2747079"
  },
  {
    "text": "presented today is covered by two CLA for blog post with all these examples and much more I highly encourage you to",
    "start": "2747079",
    "end": "2753760"
  },
  {
    "text": "go and read them thank you very much and I'm happy for answer",
    "start": "2753760",
    "end": "2761240"
  },
  {
    "text": "questions going back to your question about the file I I kept thinking about",
    "start": "2761599",
    "end": "2766720"
  },
  {
    "text": "it but I'm I don't remember actually like it depends on like how many name spaces",
    "start": "2766720",
    "end": "2772319"
  },
  {
    "text": "you can figure I know at least in Docker if you create if you run a Docker right",
    "start": "2772319",
    "end": "2778400"
  },
  {
    "text": "and you create a file as root inside the docker it will also be root outside the docker so this is like one of the",
    "start": "2778400",
    "end": "2785280"
  },
  {
    "text": "problems but uh uh yeah uh I guess you can reconfigure it uh with a user map I",
    "start": "2785280",
    "end": "2791640"
  },
  {
    "text": "think there is another namespace which actually can support remapping the files back from root to your proper host user",
    "start": "2791640",
    "end": "2798839"
  },
  {
    "text": "if you need to any more",
    "start": "2798839",
    "end": "2804960"
  },
  {
    "text": "questions going once going twice thank you",
    "start": "2807359",
    "end": "2812630"
  },
  {
    "text": "[Applause]",
    "start": "2812630",
    "end": "2818238"
  }
]