[
  {
    "start": "0",
    "end": "100000"
  },
  {
    "text": "this is the main main the main modeling made functional and I thought just to",
    "start": "9730",
    "end": "15880"
  },
  {
    "text": "start the morning off I'll give you a little challenge and this is a little bit of code a little data type obviously",
    "start": "15880",
    "end": "25149"
  },
  {
    "text": "and so how many things are wrong with this design you've probably written code like this many times we have some sort",
    "start": "25149",
    "end": "31759"
  },
  {
    "text": "of contact or a customer type and they've got a name and they've got an email and all this kind of stuff did you",
    "start": "31759",
    "end": "40820"
  },
  {
    "text": "think this is a good design this is how you dress it what kinds of things would",
    "start": "40820",
    "end": "45829"
  },
  {
    "text": "be born with it you think yeah name",
    "start": "45829",
    "end": "53420"
  },
  {
    "text": "could be anything yeah you miss there's no validation on the name why yeah you",
    "start": "53420",
    "end": "63229"
  },
  {
    "text": "said it got one email that's true okay yeah",
    "start": "63229",
    "end": "68170"
  },
  {
    "text": "uh-huh primitive type using a string rather than something more sophisticated right",
    "start": "73970",
    "end": "80220"
  },
  {
    "text": "exactly good okay that's all good so yeah I think you guys are in the in the right",
    "start": "80220",
    "end": "85710"
  },
  {
    "text": "place because it I'll be talking about exactly those things and what we'll do in the course of this talk as we'll see",
    "start": "85710",
    "end": "91800"
  },
  {
    "text": "how to evolve this design into something which is much more self documenting and does actually capture the domain better",
    "start": "91800",
    "end": "100190"
  },
  {
    "start": "100000",
    "end": "171000"
  },
  {
    "text": "so before I talk about the nitty-gritty of domain modeling I just want to talk",
    "start": "100190",
    "end": "106320"
  },
  {
    "text": "about why why do domain modeling at all because you know if you think of",
    "start": "106320",
    "end": "111360"
  },
  {
    "text": "software development as a process that's an input and an output and there's you know the middle bit of the coding part",
    "start": "111360",
    "end": "117860"
  },
  {
    "text": "and we spend most of our time talking about coding and tooling and you know",
    "start": "117860",
    "end": "124080"
  },
  {
    "text": "all the fun stuff you know stuff of developers we'd like to do but the problem is this is like a regular",
    "start": "124080",
    "end": "130080"
  },
  {
    "text": "process garbage in garbage out right so even if you have the best development",
    "start": "130080",
    "end": "135810"
  },
  {
    "text": "tools and the best programming language in the world if you have garbage coming in you're gonna have the knowledge",
    "start": "135810",
    "end": "142050"
  },
  {
    "text": "coming out you can't have a you can't ever have a good product if the input is bad so the idea of doing domain design",
    "start": "142050",
    "end": "152310"
  },
  {
    "text": "doing proper domain modeling is if you can reduce the garbage in then hopefully",
    "start": "152310",
    "end": "157650"
  },
  {
    "text": "you can reduce the garbage out and that's you know the design process basically so we should spend some more",
    "start": "157650",
    "end": "163620"
  },
  {
    "text": "time focusing on design another spending time on coding and tools that's what",
    "start": "163620",
    "end": "169530"
  },
  {
    "text": "this talk is about how can we reduce the garbage in all right so let's go back to this and I'll I'll tell you the things I",
    "start": "169530",
    "end": "177090"
  },
  {
    "start": "171000",
    "end": "370000"
  },
  {
    "text": "think are wrong with this and they are politically with most of them the first thing is which values are optional right",
    "start": "177090",
    "end": "182790"
  },
  {
    "text": "it's not at all clear that is that is the first name required or is optional is the middle initial",
    "start": "182790",
    "end": "188700"
  },
  {
    "text": "required or optional and so on it doesn't it doesn't tell you from the code now you may have some validation",
    "start": "188700",
    "end": "193830"
  },
  {
    "text": "logic buried in your code somewhere it says yeah if the middle initial is no less an error that's what it allowed to",
    "start": "193830",
    "end": "199680"
  },
  {
    "text": "be no but the first things not have to be that's in your code that's not right in your face what we want to do is",
    "start": "199680",
    "end": "205260"
  },
  {
    "text": "actually encode in the design not in the actual code buried in some validation module",
    "start": "205260",
    "end": "212020"
  },
  {
    "text": "somewhere so in this case that was optional and all the other ones have acquired say okay what are the",
    "start": "212020",
    "end": "219490"
  },
  {
    "text": "constraints so as you say these are wheezing primitive types can can you really have a first name that's like a",
    "start": "219490",
    "end": "226180"
  },
  {
    "text": "million characters long can you have a first name that has non-printable characters in it maybe you can but know",
    "start": "226180",
    "end": "233200"
  },
  {
    "text": "most of us would find the hard if you're printing out a mailing label or something you're going to have to limit",
    "start": "233200",
    "end": "238870"
  },
  {
    "text": "it to some standard length and you know not allowing carriage of turns or",
    "start": "238870",
    "end": "243910"
  },
  {
    "text": "something in your in your first name so there has to be some sort of constraint in this case it can't be more than 50",
    "start": "243910",
    "end": "249400"
  },
  {
    "text": "characters now I realize it in the real world people do have names which along that but we're unfortunately in the in",
    "start": "249400",
    "end": "256000"
  },
  {
    "text": "the normal world we actually have to deal with databases and stuff so there's normally constraints and what we can do",
    "start": "256000",
    "end": "261060"
  },
  {
    "text": "which feels a linked so in terms of atomically atomic updates versus",
    "start": "261060",
    "end": "267670"
  },
  {
    "text": "independent objects so if one person is changing the name on one website and we",
    "start": "267670",
    "end": "273100"
  },
  {
    "text": "know one browser and another browser they're hitting the same thing and they're changing email is that okay is",
    "start": "273100",
    "end": "279010"
  },
  {
    "text": "there concurrency problem probably not but if one person is changing the first name of the other person is changing the",
    "start": "279010",
    "end": "284350"
  },
  {
    "text": "last name then we probably do have a some sort of becomes equipment rights but it's not clear from this design so",
    "start": "284350",
    "end": "289600"
  },
  {
    "text": "what we wanna do is group them into things which have to be updated atomically so that's an atomic update",
    "start": "289600",
    "end": "296230"
  },
  {
    "text": "and that's another atomic a bit okay and then what's the domain logic so we have",
    "start": "296230",
    "end": "302440"
  },
  {
    "text": "this is email verified flag here and we use that to say okay you know I've sent",
    "start": "302440",
    "end": "308110"
  },
  {
    "text": "you a you put in your email but I don't know that you only yet so I'm gonna send you a you know a verification email you",
    "start": "308110",
    "end": "314380"
  },
  {
    "text": "have to click on the link and verify who you are and if you have verified who you are you can set this boolean flag the",
    "start": "314380",
    "end": "321880"
  },
  {
    "text": "problem is that I just said all this but that's not anywhere indicated in the copy in the design right nowhere is that",
    "start": "321880",
    "end": "328510"
  },
  {
    "text": "it's like in there's some piece of code that does this but the design doesn't make this at all obvious and it's quite",
    "start": "328510",
    "end": "334390"
  },
  {
    "text": "easy for someone to set it to false true without any with that accidentally or deliberately image either maliciously",
    "start": "334390",
    "end": "339939"
  },
  {
    "text": "or accidently they can said it's the wrong thing so the rule is in this case the rule is if you put in a new email",
    "start": "339939",
    "end": "346990"
  },
  {
    "text": "address you have to reset this to false because you haven't verified it there's nothing in design that conveys that",
    "start": "346990",
    "end": "354370"
  },
  {
    "text": "information so these four things we'll",
    "start": "354370",
    "end": "360639"
  },
  {
    "text": "see how we can actually encode that in the type system because F sharp can actually help with all these questions",
    "start": "360639",
    "end": "366400"
  },
  {
    "text": "and most function languages can - but I'm going to talk about your shop today so domain modelling made functional with",
    "start": "366400",
    "end": "373539"
  },
  {
    "start": "370000",
    "end": "383000"
  },
  {
    "text": "the F sharp type system I'm Scott volution I have a website F",
    "start": "373539",
    "end": "379180"
  },
  {
    "text": "sharp of a nonprofit comm so if you're interested in F sharp would you come to my website so this is a kind of a",
    "start": "379180",
    "end": "385900"
  },
  {
    "start": "383000",
    "end": "431000"
  },
  {
    "text": "mishmash of different topics in the store servant domain driven design for those of you who are not familiar with",
    "start": "385900",
    "end": "392080"
  },
  {
    "text": "this it's originally a book by Eric Evans but the point about domain design as opposed to object oriented design or",
    "start": "392080",
    "end": "399310"
  },
  {
    "text": "database driven design or any other kind of driven design it's about the domain it's about understanding there's the the",
    "start": "399310",
    "end": "409300"
  },
  {
    "text": "system from a user's point of view not from this or technical point of view so focus on the logic the business logic",
    "start": "409300",
    "end": "415539"
  },
  {
    "text": "rather than a technology using so this is this talk asur the intersection the",
    "start": "415539",
    "end": "422979"
  },
  {
    "text": "main modeling which is to believe considers of our thing and functional programming and I actually think they go",
    "start": "422979",
    "end": "427990"
  },
  {
    "text": "together really well and I hope you agree so I'll talk first of all I always",
    "start": "427990",
    "end": "433479"
  },
  {
    "start": "431000",
    "end": "454000"
  },
  {
    "text": "put in a bit of thing about demystifying functional programming because I just want to do that anyway the fun I'll talk",
    "start": "433479",
    "end": "440560"
  },
  {
    "text": "about why it's good for real-world applications then I'll go into the F sharp type system and how it's different from an object-oriented type system and",
    "start": "440560",
    "end": "447789"
  },
  {
    "text": "then we'll get into the meat of the thing which is how would you design how would you model that simple thing using",
    "start": "447789",
    "end": "452800"
  },
  {
    "text": "types alone so a lot of people think functional programs really cards they",
    "start": "452800",
    "end": "459250"
  },
  {
    "start": "454000",
    "end": "568000"
  },
  {
    "text": "think it's scary because there's all these big words like functor and catabolism and Monod and monad",
    "start": "459250",
    "end": "467229"
  },
  {
    "text": "those do sunlight skywards and I mean there's Homer he's a little freaked out by all these words the problem with this",
    "start": "467229",
    "end": "475699"
  },
  {
    "text": "is that sort of math admissions got there first and these are these words are scary but they're actually not that scary is actually just unfamiliar if you",
    "start": "475699",
    "end": "483410"
  },
  {
    "text": "know what they were if you knew it once you know what they are they're not that bad and also if you had different names of them so mapable",
    "start": "483410",
    "end": "489320"
  },
  {
    "text": "instead of functor and collapsible and aggregated ball and chain a ball or",
    "start": "489320",
    "end": "494930"
  },
  {
    "text": "something those things if they would call those things you still wouldn't know what they were but they wouldn't be so scary",
    "start": "494930",
    "end": "501560"
  },
  {
    "text": "sounding and we like his homework right he's still he's puzzles you know but it's like it's not so intimidating so",
    "start": "501560",
    "end": "507530"
  },
  {
    "text": "unfortunately you'd have to get over the mathematical jargon and the concepts",
    "start": "507530",
    "end": "512810"
  },
  {
    "text": "actually pretty straightforward telling what's really scary object or into programming because there's all these",
    "start": "512810",
    "end": "519050"
  },
  {
    "text": "buzz words all these strange words like you know polymorphism and inheritance and covariance and and solids which in",
    "start": "519050",
    "end": "525740"
  },
  {
    "text": "turn is another five abbreviations right there's a lot of there's a lot of weird",
    "start": "525740",
    "end": "530959"
  },
  {
    "text": "stuff in object programming but you're just used to it so you don't think it's scary but I think if you're a brand new",
    "start": "530959",
    "end": "537230"
  },
  {
    "text": "program it's just just a scariest functional program and of course there's IRC and di and ABC and NBC is like some",
    "start": "537230",
    "end": "544610"
  },
  {
    "text": "little jargony buzzwords and they were alright so don't forget that just",
    "start": "544610",
    "end": "550940"
  },
  {
    "text": "because you know something you know you have a lot of knowledge normally that you bring into a system the good thing",
    "start": "550940",
    "end": "556520"
  },
  {
    "text": "about this talk is you're not gonna need any of this stuff I'm not going to talk about monads on mono anything so it's",
    "start": "556520",
    "end": "561790"
  },
  {
    "text": "absolutely from smash and it turns out for domain modeling this is all forget",
    "start": "561790",
    "end": "567230"
  },
  {
    "text": "about all this stuff is not relevant all right functional world function programming for real world applications",
    "start": "567230",
    "end": "573110"
  },
  {
    "start": "568000",
    "end": "602000"
  },
  {
    "text": "so people think that function program is all about mathematical stuff for its",
    "start": "573110",
    "end": "578480"
  },
  {
    "text": "algorithms and power processing and all this stuff you know and it's pretty full",
    "start": "578480",
    "end": "585260"
  },
  {
    "text": "of stuff but you need like a PhD to understand it know things like well yeah it's true I mean it's good for all these",
    "start": "585260",
    "end": "590420"
  },
  {
    "text": "things but it's not true that you need a PhD really you can have a friend who's",
    "start": "590420",
    "end": "597470"
  },
  {
    "text": "not we'll son and he's teaching his son sharpen this really yes so not from so",
    "start": "597470",
    "end": "604369"
  },
  {
    "start": "602000",
    "end": "722000"
  },
  {
    "text": "tell you what I think functional program is really good for what I call boring line of business applications okay which",
    "start": "604369",
    "end": "612110"
  },
  {
    "text": "is the stuff that most of us actually do for our day job this is like writing accounting systems or inventory",
    "start": "612110",
    "end": "618649"
  },
  {
    "text": "management systems or ecommerce sites or you know boring stuff basically the",
    "start": "618649",
    "end": "625160"
  },
  {
    "text": "stuff that pays the rent and I think phone is actually really good for that by the way I call these",
    "start": "625160",
    "end": "631759"
  },
  {
    "text": "things blubbers so if you like blah blah driven development so if you think about",
    "start": "631759",
    "end": "638209"
  },
  {
    "text": "blah blah developments like boring enterprise apps the requirement so you've got expressed it got a expressed",
    "start": "638209",
    "end": "645079"
  },
  {
    "text": "appliance clearly because often you're dealing with people who have a hard time having clear thoughts the users you need",
    "start": "645079",
    "end": "652970"
  },
  {
    "text": "a rapid development cycle because you want to kind of get the stuff out of the door before they change the mind about what the requirements are you need high",
    "start": "652970",
    "end": "660079"
  },
  {
    "text": "quality deliverables because there's nothing worse than going back and fixing a bug from six months ago and you've",
    "start": "660079",
    "end": "666499"
  },
  {
    "text": "already moved on to an another project right so these are things these are the things you want this is the things you want any kind of software but especially",
    "start": "666499",
    "end": "672079"
  },
  {
    "text": "in enterprise software so the nice thing about F sharp is it's very concise it's",
    "start": "672079",
    "end": "678559"
  },
  {
    "text": "really easy to express requirements again that's what we're going to be focusing on today rapid development",
    "start": "678559",
    "end": "683689"
  },
  {
    "text": "cycle F sharp has a repple an interactive system where you can",
    "start": "683689",
    "end": "688699"
  },
  {
    "text": "actually type stuff that's very cool for doing web development and the high quality so again we'll talk about using",
    "start": "688699",
    "end": "694309"
  },
  {
    "text": "the type system to into sort of do compile time unit tests so you can actually write less unit tests and",
    "start": "694309",
    "end": "699350"
  },
  {
    "text": "actually have more reliable code and of course fun if you're going to be doing",
    "start": "699350",
    "end": "704480"
  },
  {
    "text": "boring if you're building boring applications elysian have fun doing it",
    "start": "704480",
    "end": "709939"
  },
  {
    "text": "right so the fund is an important aspect of any kind of programming and luckily fun is a key word in F sharp so II knew",
    "start": "709939",
    "end": "717319"
  },
  {
    "text": "what they were doing okay so f sharp blah blah development go together very well right domain during design is the next",
    "start": "717319",
    "end": "724879"
  },
  {
    "start": "722000",
    "end": "743000"
  },
  {
    "text": "thing the key point about domain driven design is it's really about",
    "start": "724879",
    "end": "731459"
  },
  {
    "text": "education it's not like a technique or it's not like I said of buzzwords to me it's all about how do you communicate",
    "start": "731459",
    "end": "737730"
  },
  {
    "text": "between the developer and the user or the domain expert so the the approach of",
    "start": "737730",
    "end": "747179"
  },
  {
    "start": "743000",
    "end": "862000"
  },
  {
    "text": "domain driven design is that you have a shared mental model so you don't have one of those things where you know a",
    "start": "747179",
    "end": "752910"
  },
  {
    "text": "domain expert tells a business analyst and the business analyst tells the software designer the software design of",
    "start": "752910",
    "end": "759089"
  },
  {
    "text": "writes up a requirements document they hand it off to a developer who write you know that whole thing that whole waterfall even the agile model you tend",
    "start": "759089",
    "end": "766619"
  },
  {
    "text": "to have this translation stage where the developer translates the requirements into code in the domain driven design",
    "start": "766619",
    "end": "773459"
  },
  {
    "text": "approach the developer and the domain expert and the code itself also always",
    "start": "773459",
    "end": "780119"
  },
  {
    "text": "all have a said chain to makers same model the same mental model so that",
    "start": "780119",
    "end": "786329"
  },
  {
    "text": "means that your code looks like the domain so you don't have things in your code which are not part of than main so",
    "start": "786329",
    "end": "793379"
  },
  {
    "text": "you don't have any manager classes or factory classes or you know things that you know a base an abstract base class",
    "start": "793379",
    "end": "800759"
  },
  {
    "text": "is not part of the domain a domain expert doesn't know what that you're talking about so you try and avoid that kind of stuff and everything in your",
    "start": "800759",
    "end": "806429"
  },
  {
    "text": "code is named in such a way that a domain expert could read it and understand it that's the theory",
    "start": "806429",
    "end": "813019"
  },
  {
    "text": "unfortunately it's pretty hard for most domain experts to read most code but I",
    "start": "813019",
    "end": "818549"
  },
  {
    "text": "think we'll see that you can actually get halfway there so one of the problems",
    "start": "818549",
    "end": "824249"
  },
  {
    "text": "with having a shared mental model is it's really easy to have communication mistakes and so one of the goals of",
    "start": "824249",
    "end": "832259"
  },
  {
    "text": "domain driven design is to try and eliminate these kind of community communication mistakes that's what",
    "start": "832259",
    "end": "838170"
  },
  {
    "text": "common so for example if I say this word write UN IO and I said e so is that",
    "start": "838170",
    "end": "846389"
  },
  {
    "text": "someone who's you know fighting for better pay or is that a nice way a",
    "start": "846389",
    "end": "854519"
  },
  {
    "text": "chemical chemistry term right which one is it well the artists is both right it",
    "start": "854519",
    "end": "860400"
  },
  {
    "text": "depends on the context so this is the the first thing that domain-driven",
    "start": "860400",
    "end": "866640"
  },
  {
    "start": "862000",
    "end": "938000"
  },
  {
    "text": "design into space there's context for things with a piece of you know a name",
    "start": "866640",
    "end": "871860"
  },
  {
    "text": "doesn't necessarily mean the same thing everywhere so obviously in this case it's really obvious but we create this",
    "start": "871860",
    "end": "878370"
  },
  {
    "text": "context with where the words mean something but here's another one spam right in a supermarket it means one kind",
    "start": "878370",
    "end": "884670"
  },
  {
    "text": "of thing and in an email system that means another kind of thing same word okay what's really obvious but what",
    "start": "884670",
    "end": "889830"
  },
  {
    "text": "about products there's an example where in a sales context it might mean",
    "start": "889830",
    "end": "895230"
  },
  {
    "text": "something that you can sell but in a warehouse system it might be something you have in stock there's a physical",
    "start": "895230",
    "end": "900420"
  },
  {
    "text": "item and non-physical items don't count you know so subtly subtly different",
    "start": "900420",
    "end": "905700"
  },
  {
    "text": "meanings there and if you try and make the same word mean the same thing throughout the entire system you're",
    "start": "905700",
    "end": "911550"
  },
  {
    "text": "gonna get in trouble there's another one customer I went into this one all the",
    "start": "911550",
    "end": "916770"
  },
  {
    "text": "time where the marketing people think customers anyone has an email address anyone they can send you know they can",
    "start": "916770",
    "end": "922830"
  },
  {
    "text": "spam with emails and finance people think customers somebody owes us money and obviously coming from a different",
    "start": "922830",
    "end": "929760"
  },
  {
    "text": "place and I've seen people try to merge these into one giant customer which has thousands of different fields and",
    "start": "929760",
    "end": "935610"
  },
  {
    "text": "surface like that's not gonna work keep them separate and then after you get these different",
    "start": "935610",
    "end": "941940"
  },
  {
    "start": "938000",
    "end": "1113000"
  },
  {
    "text": "contests within that context there's a set of words that sort of define the domain so in the chemistry domain you",
    "start": "941940",
    "end": "948510"
  },
  {
    "text": "have you know polymer and compound and molecule and stuff and it's very",
    "start": "948510",
    "end": "953610"
  },
  {
    "text": "important as developers that we use these words so if you if you're working on a system that does chemical analysis",
    "start": "953610",
    "end": "959970"
  },
  {
    "text": "you don't have a linked list of molecules you call a polymer that's what the domain experts call it you don't",
    "start": "959970",
    "end": "965430"
  },
  {
    "text": "like say well technically it's this nothing it's like don't it's not what it is technically it's what the domain",
    "start": "965430",
    "end": "970470"
  },
  {
    "text": "expert thinks about it might and that set of terms the terminology in that",
    "start": "970470",
    "end": "977370"
  },
  {
    "text": "context is the a bigoted language we call that and everywhere language everybody should use the same words that",
    "start": "977370",
    "end": "982740"
  },
  {
    "text": "includes the code the developers and their domain experts and if people are using slightly different sets of",
    "start": "982740",
    "end": "988860"
  },
  {
    "text": "languages that's where you communication problems so similarly in sales like here's the word product and",
    "start": "988860",
    "end": "995389"
  },
  {
    "text": "customer and stuff warehouse might have something different so again the same words but the overall set of the camera",
    "start": "995389",
    "end": "1003639"
  },
  {
    "text": "they use may be subtly different alright so that's the theory so let's see how",
    "start": "1003639",
    "end": "1010029"
  },
  {
    "text": "you do that in code alright it's like oh yeah it's a nice ideal but surely code",
    "start": "1010029",
    "end": "1015040"
  },
  {
    "text": "is more complicated that so let's see so this is a piece of F sharp code and the",
    "start": "1015040",
    "end": "1022779"
  },
  {
    "text": "question is can you tell what's about a context is and can you tell what the",
    "start": "1022779",
    "end": "1029740"
  },
  {
    "text": "ubiquitous language is right so the context means that something like you",
    "start": "1029740",
    "end": "1037120"
  },
  {
    "text": "know a deck in this context is different from a deck if you're in a kind of boat building context deck means something",
    "start": "1037120",
    "end": "1044470"
  },
  {
    "text": "completely different right so there's the context it's a conscious of a card game and these are all the nouns and the",
    "start": "1044470",
    "end": "1050440"
  },
  {
    "text": "verbs alright so this is an example of how you can represent a ubiquitous",
    "start": "1050440",
    "end": "1057100"
  },
  {
    "text": "language and a bounded context in one page of F sharp code and I'll just",
    "start": "1057100",
    "end": "1063820"
  },
  {
    "text": "quickly explain some of these terms that vertical bar means a choice so a suit which is a club or a diamond or a spade",
    "start": "1063820",
    "end": "1069429"
  },
  {
    "text": "or whatever that little star means a pair so a card is a pair of a suit and a",
    "start": "1069429",
    "end": "1075700"
  },
  {
    "text": "rank the list type is built in at hand is a list of cards a deck is a list of cards and then that's the F short way of",
    "start": "1075700",
    "end": "1085000"
  },
  {
    "text": "doing a function with an arrow X arrow Y as a function which has X as an input and Y is now cut so for examples deal to",
    "start": "1085000",
    "end": "1091630"
  },
  {
    "text": "deal is you start with a deck as the input and after you finish dealing the",
    "start": "1091630",
    "end": "1096970"
  },
  {
    "text": "new the output is a new deck because the deck has got one less cards and there's now a card on the table so the output is",
    "start": "1096970",
    "end": "1103450"
  },
  {
    "text": "that there's a pair so we've communicated a lot of the meaning or of",
    "start": "1103450",
    "end": "1109929"
  },
  {
    "text": "the domain you know in a few lines of code is cool so do you think this is a",
    "start": "1109929",
    "end": "1115360"
  },
  {
    "start": "1113000",
    "end": "1153000"
  },
  {
    "text": "reason about a code to write to represent the domain I think it's not bad I think it would be",
    "start": "1115360",
    "end": "1121210"
  },
  {
    "text": "hard to write this in text to convey the same information it's quite condensed do",
    "start": "1121210",
    "end": "1127450"
  },
  {
    "text": "you think a non programmer can understand this yes yeah you could yeah",
    "start": "1127450",
    "end": "1133479"
  },
  {
    "text": "I think I mean you know you don't have to be you don't have to go to super detail but I think it's pretty",
    "start": "1133479",
    "end": "1138940"
  },
  {
    "text": "reasonable certainly good enough that if I was like missing out a suit if I'd left off hearts or something they could",
    "start": "1138940",
    "end": "1144399"
  },
  {
    "text": "say you know you're missing a suit or you're missing how to deal a card it's not I mean it certainly could go through it and have them understand it can act",
    "start": "1144399",
    "end": "1150820"
  },
  {
    "text": "as a shear documentation and the other thing about this is really important is",
    "start": "1150820",
    "end": "1155889"
  },
  {
    "start": "1153000",
    "end": "1244000"
  },
  {
    "text": "this what the domain drone design people called persistence ignorance which means there's nothing about databases mites",
    "start": "1155889",
    "end": "1161979"
  },
  {
    "text": "there's nothing about foreign keys and and you know it's like it's purely a",
    "start": "1161979",
    "end": "1168429"
  },
  {
    "text": "domain there's nothing about classes here there's nothing right inheritance there's no abstract think there's no",
    "start": "1168429",
    "end": "1173499"
  },
  {
    "text": "interfaces right this is all about to make every single thing and this is something relevant to the domain so this",
    "start": "1173499",
    "end": "1180489"
  },
  {
    "text": "is the you know there's something we've always been we always kind of strive to do especially in agile is the design is",
    "start": "1180489",
    "end": "1186909"
  },
  {
    "text": "the code the code is design you try not to have the design be a separate thing",
    "start": "1186909",
    "end": "1192119"
  },
  {
    "text": "because if you have documentation or something it's going to go out to take right the code is always the sort of",
    "start": "1192119",
    "end": "1197289"
  },
  {
    "text": "source of truth so if you can make the design and the code be the same thing",
    "start": "1197289",
    "end": "1202739"
  },
  {
    "text": "that's really great and I think this is really a good way of doing it so this is",
    "start": "1202739",
    "end": "1207820"
  },
  {
    "text": "not pseudocode this is executable code and typically in an F sharp project you would do something like this and you'd",
    "start": "1207820",
    "end": "1212859"
  },
  {
    "text": "stick it as the first file in your project and then obviously you have more complicated code kind of executing",
    "start": "1212859",
    "end": "1219159"
  },
  {
    "text": "algorithms and how do you actually deal how do you actually do it you know a shuffle algorithm whatever but this part",
    "start": "1219159",
    "end": "1225729"
  },
  {
    "text": "is something which can be shared between the you and the domain expert so you don't need any UML diagrams right you",
    "start": "1225729",
    "end": "1232720"
  },
  {
    "text": "don't need any out of date documentation 200-page required documents I think this",
    "start": "1232720",
    "end": "1238659"
  },
  {
    "text": "is great way it's a very agile way of working in in conjunction with the domain expert right understanding the F",
    "start": "1238659",
    "end": "1246519"
  },
  {
    "start": "1244000",
    "end": "1262000"
  },
  {
    "text": "sharp type system so the f-sharp tie system has something called algebraic type system I just do",
    "start": "1246519",
    "end": "1253849"
  },
  {
    "text": "as does Haskell and no camera on most talking languages that's another Massey word so I'm gonna",
    "start": "1253849",
    "end": "1258979"
  },
  {
    "text": "use the word composable type system instead and composable it's like Lego you can glue pieces of Lego together to",
    "start": "1258979",
    "end": "1265549"
  },
  {
    "start": "1262000",
    "end": "1269000"
  },
  {
    "text": "make another piece of Lego and so on so that's what composable means so let's actually see how that works so you given you two types you can",
    "start": "1265549",
    "end": "1273679"
  },
  {
    "text": "combine them to make another type composable and there's two ways you can",
    "start": "1273679",
    "end": "1279109"
  },
  {
    "text": "combine them you can multiply them and you can add them and that sounds kind of",
    "start": "1279109",
    "end": "1284119"
  },
  {
    "text": "strange how can you add a type on multiply type so that's what I'm talking about here let's say that you have a",
    "start": "1284119",
    "end": "1291529"
  },
  {
    "text": "function called add 1 the input is a set of interests any possible integers and",
    "start": "1291529",
    "end": "1297469"
  },
  {
    "text": "inputs and any possible integer doesn't happen it's easy enough so we write that in a shop we like there's int arrow int",
    "start": "1297469",
    "end": "1303259"
  },
  {
    "text": "right enters the input and int is the output fair enough ok now what happens if the input is a",
    "start": "1303259",
    "end": "1310399"
  },
  {
    "text": "pair okay so we know whether we can know the output type is would say the out",
    "start": "1310399",
    "end": "1315799"
  },
  {
    "text": "present in but what's the input now we can say well let's just define a class called a pair some things like no we",
    "start": "1315799",
    "end": "1321679"
  },
  {
    "text": "have to use it by building on the types we've already got we can't define a new thing so how do we how do we do that",
    "start": "1321679",
    "end": "1330489"
  },
  {
    "text": "well if you think about it a pair is one from the first pile and one from a",
    "start": "1330489",
    "end": "1337009"
  },
  {
    "text": "second part right every possible combination so let's say there are four integers in the universe how many",
    "start": "1337009",
    "end": "1343159"
  },
  {
    "text": "possible combinations are there well there's you know four possible things for the first number and four possible",
    "start": "1343159",
    "end": "1349849"
  },
  {
    "text": "things for the second number total number combinations is 16 yes so it's",
    "start": "1349849",
    "end": "1355519"
  },
  {
    "text": "multiplication right so we actually write this and his list let's say a pair",
    "start": "1355519",
    "end": "1361129"
  },
  {
    "text": "of boolean's two possible ones for the first power of two plus one second of all it's four possible combinations all",
    "start": "1361129",
    "end": "1366739"
  },
  {
    "text": "together so this is what we call a product type I'm multiplying two types",
    "start": "1366739",
    "end": "1371809"
  },
  {
    "text": "together okay and so I in F sharp you actually write it with a multiplication the star so int",
    "start": "1371809",
    "end": "1379070"
  },
  {
    "text": "star int is a pair of Vince and the bull star pool is a pair of balloons right",
    "start": "1379070",
    "end": "1387000"
  },
  {
    "text": "okay let's okay that kind of sounds theoretical but let's look at a practical example let's say you want to pick model people's birthdays so Alice",
    "start": "1387000",
    "end": "1393810"
  },
  {
    "text": "has a birthday on January 12th and bob has a birthday on every second or whatever well you take the set of people",
    "start": "1393810",
    "end": "1400440"
  },
  {
    "text": "in the world all the possible people and you take all the possible dates and you",
    "start": "1400440",
    "end": "1406110"
  },
  {
    "text": "multiply them you get every possible combination of a person in a date and that is the set of all possible birthdays so you could quite easily say",
    "start": "1406110",
    "end": "1414090"
  },
  {
    "text": "that their birthday is is that person times a date no a pair of a personality so that's how you do that all right",
    "start": "1414090",
    "end": "1422940"
  },
  {
    "text": "let's look another example let's say that you have a function that figures out whether you have a fever or not so",
    "start": "1422940",
    "end": "1429570"
  },
  {
    "text": "there's some sort of temperature comes as the input and if it's true or false so the outputs a boolean but what's the",
    "start": "1429570",
    "end": "1435480"
  },
  {
    "text": "input well let's say that you want to be good and support both kinds of temperatures Fahrenheit and what type",
    "start": "1435480",
    "end": "1446480"
  },
  {
    "text": "well if we think about it again let's say there's only four possible temperatures if you think about you can",
    "start": "1447500",
    "end": "1455130"
  },
  {
    "text": "either have one from the Fahrenheit pile or one from the Celsius Pole all right",
    "start": "1455130",
    "end": "1460860"
  },
  {
    "text": "so how many possible choices are there there's eight like this four plus four",
    "start": "1460860",
    "end": "1466320"
  },
  {
    "text": "so we call that a plus so we call this a sum type and how can we represent this",
    "start": "1466320",
    "end": "1473640"
  },
  {
    "start": "1472000",
    "end": "1512000"
  },
  {
    "text": "in a shop well they might both be integers or floats or something so we",
    "start": "1473640",
    "end": "1479010"
  },
  {
    "text": "need to separate them we need to distinguish them tag them and we're gonna tag the Fahrenheit ones with an F",
    "start": "1479010",
    "end": "1484230"
  },
  {
    "text": "and the Celsius ones there's a C and we end up with something looks like this so we say a temperature type is either a",
    "start": "1484230",
    "end": "1491610"
  },
  {
    "text": "fan height where it's represented by an int or Celsius where it's represented by a float and this is something that you",
    "start": "1491610",
    "end": "1499290"
  },
  {
    "text": "can't do in C shop so the pairs and stuff you can certainly do in most",
    "start": "1499290",
    "end": "1504480"
  },
  {
    "text": "languages but this kind of choice type or combination time like this this is really cool really important for the",
    "start": "1504480",
    "end": "1511290"
  },
  {
    "text": "main modeling alright here's a here's a more real-world example okay we have a payment method what can we do for",
    "start": "1511290",
    "end": "1518140"
  },
  {
    "start": "1512000",
    "end": "1565000"
  },
  {
    "text": "payments as well you can take cash we can take checks we can take credit cards and if you take a check then you have a",
    "start": "1518140",
    "end": "1525640"
  },
  {
    "text": "check number and this is kind of getting it all out of data probably put in PayPal or Bitcoin or something now but",
    "start": "1525640",
    "end": "1530789"
  },
  {
    "text": "you know what's cool about this is you can have extra information associated with each thing so with the cash there's",
    "start": "1530789",
    "end": "1537460"
  },
  {
    "text": "no extra information but if you pay by credit card you need to know what the credit card type was and what their",
    "start": "1537460",
    "end": "1542860"
  },
  {
    "text": "credit card number was so the little bits of information can go along with each choice all right so this is really",
    "start": "1542860",
    "end": "1552520"
  },
  {
    "text": "nice so this is a real-world example of why these choice types are really useful because again I've gotten like four",
    "start": "1552520",
    "end": "1559059"
  },
  {
    "text": "lines of code I've conveyed quite a lot of information about how payment methods works and what's cool is then when you",
    "start": "1559059",
    "end": "1568510"
  },
  {
    "start": "1565000",
    "end": "1679000"
  },
  {
    "text": "actually need to work with these things you have to do you have to get the data out and you get the data out using what",
    "start": "1568510",
    "end": "1573850"
  },
  {
    "text": "we call pattern matching and it's basically a pattern matching is sort of like a switch statement and for each",
    "start": "1573850",
    "end": "1580690"
  },
  {
    "text": "choice you have a little handler and what's cool though is that the as part",
    "start": "1580690",
    "end": "1587770"
  },
  {
    "text": "of matching that choice it extracts the data in that choice too so you don't have to say well if it's a if it's a",
    "start": "1587770",
    "end": "1593620"
  },
  {
    "text": "check cast it into a check and then see what the check number is it's like now you get everything in one go you you",
    "start": "1593620",
    "end": "1599080"
  },
  {
    "text": "find out it's a check and you get the check number all in one step that's very cool all right",
    "start": "1599080",
    "end": "1606460"
  },
  {
    "text": "so one of the nice things about this compared with maybe if you get to model is in c-sharp you might model its using",
    "start": "1606460",
    "end": "1614740"
  },
  {
    "text": "inheritance so you might have a base payment method on a payment method and",
    "start": "1614740",
    "end": "1619809"
  },
  {
    "text": "then you'd have like three subclasses for each choice say one of the nice",
    "start": "1619809",
    "end": "1625270"
  },
  {
    "text": "things about this approach is that all the choices are in the same place there's like three lines of code if you",
    "start": "1625270",
    "end": "1631539"
  },
  {
    "text": "if you have a kind of a subclass model in c-sharp you'd actually have like four files so I'd have to go to lots of",
    "start": "1631539",
    "end": "1636940"
  },
  {
    "text": "different places to try and find out what doesn't pay much mess in pain wrestling here is like light in your face very convenient and the other important thing",
    "start": "1636940",
    "end": "1644230"
  },
  {
    "text": "is a closed set of options which means that I can't add if you know I can't",
    "start": "1644230",
    "end": "1650860"
  },
  {
    "text": "inherit from this and add a new new option automatically I have to like change this definition and you know what",
    "start": "1650860",
    "end": "1657280"
  },
  {
    "text": "you might say well that's a bad thing because if I change it I break all my code it's like yes I think that is a good thing because if you add PayPal",
    "start": "1657280",
    "end": "1663910"
  },
  {
    "text": "that is a you know that's a changing of the domain of often adding a new kind of",
    "start": "1663910",
    "end": "1669310"
  },
  {
    "text": "thing is a new kind of business logic and it needs to be handled you don't want to accidentally forget about it and",
    "start": "1669310",
    "end": "1674590"
  },
  {
    "text": "just just inherit from it and then not have that everything else work all right",
    "start": "1674590",
    "end": "1680650"
  },
  {
    "start": "1679000",
    "end": "1766000"
  },
  {
    "text": "so we normally think in most kind of programmers we think of types ourself an annotation you know say is just for type",
    "start": "1680650",
    "end": "1688540"
  },
  {
    "text": "checking to make sure our code compiles you know we say add one and it takes an integer it's like okay if I passed a",
    "start": "1688540",
    "end": "1694870"
  },
  {
    "text": "string to it the pile is going to complain so we normally think of types and as a just for compiler just to make",
    "start": "1694870",
    "end": "1703240"
  },
  {
    "text": "the compiler happy but in functional world we can think of types also as a",
    "start": "1703240",
    "end": "1708580"
  },
  {
    "text": "domain model at all so here we have a deal okay so I'm modeling how to deal",
    "start": "1708580",
    "end": "1715540"
  },
  {
    "text": "something and I'm not really caring about it's nothing to do this making the compiler happy about compiling things is",
    "start": "1715540",
    "end": "1721480"
  },
  {
    "text": "as you're trying to model stuff using types but the nice thing is you get both at the same time you get the modeling",
    "start": "1721480",
    "end": "1728560"
  },
  {
    "text": "thing and you get the type checking thing and as a result you get what I call compile time type checking so if",
    "start": "1728560",
    "end": "1736240"
  },
  {
    "text": "you if your code does not match the model you get a compiler error so if I'm",
    "start": "1736240",
    "end": "1741550"
  },
  {
    "text": "trying to deal and I'm not passing in a deck or I don't spit out the right thing my code won't compile there's a white",
    "start": "1741550",
    "end": "1747760"
  },
  {
    "text": "type checker so this is what I call you know kind of like having compile time unit tests you guarantee that your code",
    "start": "1747760",
    "end": "1754420"
  },
  {
    "text": "matches the model all right so typing all the things functional people love",
    "start": "1754420",
    "end": "1759790"
  },
  {
    "text": "the title all right so let's see what we can do with this time system let's take it out",
    "start": "1759790",
    "end": "1765030"
  },
  {
    "text": "for a spin let's start with the optional values that we talked about the very beginning how can we model an optional",
    "start": "1765030",
    "end": "1770640"
  },
  {
    "start": "1766000",
    "end": "1926000"
  },
  {
    "text": "value so in this case the middle initial is optional and the old ones not quite",
    "start": "1770640",
    "end": "1777020"
  },
  {
    "text": "let's see well let's say this type of start with a simple example let's say we have a string and we're calculating its",
    "start": "1777020",
    "end": "1786690"
  },
  {
    "text": "length right now one of the problems with most programming languages is that",
    "start": "1786690",
    "end": "1792840"
  },
  {
    "text": "null is a valid string right so you might say yeah fine if we have an",
    "start": "1792840",
    "end": "1799320"
  },
  {
    "text": "optional string we'll just model it using annul well there's a couple of",
    "start": "1799320",
    "end": "1804750"
  },
  {
    "text": "problems with that first of all you can't tell from looking at the design",
    "start": "1804750",
    "end": "1809760"
  },
  {
    "text": "whether it's optional lot because null is a valid value for stream and this null is real really painful because if",
    "start": "1809760",
    "end": "1815850"
  },
  {
    "text": "you think about it you know null doesn't mean anything you can't say set phasers to null they're just no no it just gets in the",
    "start": "1815850",
    "end": "1823410"
  },
  {
    "text": "way it doesn't mean anything from it from in the real world it's just an artifact of programming and much more",
    "start": "1823410",
    "end": "1831330"
  },
  {
    "text": "but more importantly a null is sort of a dangerous thing because it's not really",
    "start": "1831330",
    "end": "1837150"
  },
  {
    "text": "a strict from a coding point of view you know you say there's a function that calculates the length of a string and",
    "start": "1837150",
    "end": "1843900"
  },
  {
    "text": "you give me a null and the compiler says here no snails are string just find their problem and when you actually try and ask the null for the length is that",
    "start": "1843900",
    "end": "1851640"
  },
  {
    "text": "ha I'm going to crash now exception I'm not really a string I'm just pretending to be a string and your compiler won't",
    "start": "1851640",
    "end": "1858780"
  },
  {
    "text": "even detect that I'm not really a string right so nulls are not very good for doing optional values and in fact I like",
    "start": "1858780",
    "end": "1865350"
  },
  {
    "text": "to see the null is the cerumen of static typing it's likely somebody who acts like your friend and there's going to",
    "start": "1865350",
    "end": "1870450"
  },
  {
    "text": "stab you in the back so now don't use no ok so if you don't use null",
    "start": "1870450",
    "end": "1876930"
  },
  {
    "text": "ok so let's not say let's say the null is not allowed okay we don't want no to",
    "start": "1876930",
    "end": "1882420"
  },
  {
    "text": "be used as any of our types we want to get rid of it from that from the list of possible values so if you can't use no",
    "start": "1882420",
    "end": "1887730"
  },
  {
    "text": "what can we do well we want to do is model it using what we did before is say",
    "start": "1887730",
    "end": "1893340"
  },
  {
    "text": "well here's a list of strings or nothing we're missing a string right so we're going to model it",
    "start": "1893340",
    "end": "1899139"
  },
  {
    "text": "like this it's either this thing or is this thing now we saw how to do that before this thing or this thing right",
    "start": "1899139",
    "end": "1905080"
  },
  {
    "text": "it's going to be a choice type or an addition so we're going to tag the top one with some string we're going to tag",
    "start": "1905080",
    "end": "1911620"
  },
  {
    "text": "the bottom with nothing and we end up with the type that looks like this an optional string is either some string or",
    "start": "1911620",
    "end": "1916929"
  },
  {
    "text": "it's nothing now this is really good because it's now a special type call option of string and it's really obvious",
    "start": "1916929",
    "end": "1922690"
  },
  {
    "text": "what it is right in our code now I say this is awesome really love this I'm",
    "start": "1922690",
    "end": "1928809"
  },
  {
    "start": "1926000",
    "end": "1955000"
  },
  {
    "text": "gonna do an optional string I'm going to do an option I'm gonna do optional boolean and then okay I think there's a",
    "start": "1928809",
    "end": "1934360"
  },
  {
    "text": "little bit of duplication going on here so let's make a generic type okay replace all these with one single thing",
    "start": "1934360",
    "end": "1940990"
  },
  {
    "text": "called an option of T so the little tick T is F sharps way of doing generics and in c-sharp you're just F of T but",
    "start": "1940990",
    "end": "1948460"
  },
  {
    "text": "basically it says to see there's something that's nothing this is a really really useful type any user in",
    "start": "1948460",
    "end": "1953649"
  },
  {
    "text": "their shop all the time so if we go back to our personal name we say well the",
    "start": "1953649",
    "end": "1959740"
  },
  {
    "start": "1955000",
    "end": "1989000"
  },
  {
    "text": "middle initial is now an option of a string okay now it's much more much more self documenting that much clearer and",
    "start": "1959740",
    "end": "1966190"
  },
  {
    "text": "one cool thing in F sharp is you can actually take a generic - stick at the end so you can say string option which",
    "start": "1966190",
    "end": "1973480"
  },
  {
    "text": "is a little easier to read I think for non-technical person so now we've made it very clear that the is an optional",
    "start": "1973480",
    "end": "1980649"
  },
  {
    "text": "string and the other ones are required so basically it's not optional it's required but that's what we always say",
    "start": "1980649",
    "end": "1987159"
  },
  {
    "text": "that and that's pretty readable I think all right next one single choice types",
    "start": "1987159",
    "end": "1993899"
  },
  {
    "start": "1993000",
    "end": "2014000"
  },
  {
    "text": "so this is something you'll see a lot of in functional domain modelling is you have you know a choice of one thing it's",
    "start": "1993899",
    "end": "2000539"
  },
  {
    "text": "choice of a of a an email is an email of a string a choice of email or customer ID is a customer ID of one choice why",
    "start": "2000539",
    "end": "2009269"
  },
  {
    "text": "would you bother to do that there's not you're not really getting a choice thing the reason is because an email address",
    "start": "2009269",
    "end": "2016350"
  },
  {
    "start": "2014000",
    "end": "2032000"
  },
  {
    "text": "is not just a string right an email address has some validation rules about it I mean it just might be represented",
    "start": "2016350",
    "end": "2022139"
  },
  {
    "text": "by a string but it's not really a string from a domain modeling point of view email addresses a special kind of thing",
    "start": "2022139",
    "end": "2027500"
  },
  {
    "text": "right the user the domaine expert doesn't think about strings they think about email addresses a customer ID is",
    "start": "2027500",
    "end": "2033720"
  },
  {
    "start": "2032000",
    "end": "2110000"
  },
  {
    "text": "not an integer it may be represented by an integer but you can't add to customer IDs together you can't multiply you",
    "start": "2033720",
    "end": "2041070"
  },
  {
    "text": "can't take the square root of a customer ID you know it's not an integer so what we do is we use these single",
    "start": "2041070",
    "end": "2047220"
  },
  {
    "text": "choice types all these wrapper types to keep these things distinct so we might say okay email address",
    "start": "2047220",
    "end": "2053580"
  },
  {
    "text": "perhaps a string a phone number perhaps a string but now we've got two separate types and an email address and a phone",
    "start": "2053580",
    "end": "2058980"
  },
  {
    "text": "number can't be mixed up there conceptually different constant they're completely logically different things",
    "start": "2058980",
    "end": "2066110"
  },
  {
    "text": "now you can totally do this in any shop what's really nice about F sharp you can",
    "start": "2066110",
    "end": "2071669"
  },
  {
    "text": "do it in one line of code that makes life a lot easier so you tend to do a lot more in a language like a shot",
    "start": "2071669",
    "end": "2079169"
  },
  {
    "text": "because it's so concise so what's really nice is then you when you pass these",
    "start": "2079169",
    "end": "2084510"
  },
  {
    "text": "around and you say you've got a function that says it takes an email address that's a parameter it takes the phone numbers of parameters really really",
    "start": "2084510",
    "end": "2089520"
  },
  {
    "text": "obvious what it is so this is good practice in object-oriented design - I'd like to say it's kind of painful often",
    "start": "2089520",
    "end": "2095669"
  },
  {
    "text": "to write thousands and thousands of classes in every op you might have you know fifty of these and it's all fitting",
    "start": "2095669",
    "end": "2101880"
  },
  {
    "text": "in one file here's another example customer ID an old idea of different things you don't want to get any mixed",
    "start": "2101880",
    "end": "2107970"
  },
  {
    "text": "up right okay so let's look at how we",
    "start": "2107970",
    "end": "2113220"
  },
  {
    "start": "2110000",
    "end": "2208000"
  },
  {
    "text": "actually create an email address so we're gonna have some horrible regex",
    "start": "2113220",
    "end": "2118280"
  },
  {
    "text": "that makes an email address valid and if the string that you pass in matches that",
    "start": "2118280",
    "end": "2123900"
  },
  {
    "text": "regex they're not gonna say yes we've got an email address successfully but",
    "start": "2123900",
    "end": "2129060"
  },
  {
    "text": "what happens if it doesn't match the regice what you're gonna do you're gonna",
    "start": "2129060",
    "end": "2134070"
  },
  {
    "text": "turn null we're gonna throw an exception no we need to indicate some way that",
    "start": "2134070",
    "end": "2140580"
  },
  {
    "text": "this thing might not work right so the answer is we're gonna say okay if it's",
    "start": "2140580",
    "end": "2147650"
  },
  {
    "text": "valid we're gonna return something if it's not valid we're gonna turn thing okay so we're going to use this",
    "start": "2147650",
    "end": "2154340"
  },
  {
    "text": "option type we just defined and what's cool is if you look at the signature of",
    "start": "2154340",
    "end": "2159920"
  },
  {
    "text": "this function well than saying you give me a string and I'll give you back an email address which is a lie because",
    "start": "2159920",
    "end": "2165980"
  },
  {
    "text": "sometimes it won't it says actually you give me a string I might give you back an email address depending on whether you're the emails",
    "start": "2165980",
    "end": "2172340"
  },
  {
    "text": "about and this is a listen so this is the again we're getting documentation in",
    "start": "2172340",
    "end": "2178310"
  },
  {
    "text": "the time signature I don't have to see if there's an exception I don't have you know I can actually see from the time",
    "start": "2178310",
    "end": "2184490"
  },
  {
    "text": "signature yourself that this might not work so I know I have to handle it just",
    "start": "2184490",
    "end": "2190010"
  },
  {
    "text": "wait one of the cool things about this is in F sharp everything is immutable so once I pray to this email address I",
    "start": "2190010",
    "end": "2195800"
  },
  {
    "text": "never ever have to validate it ever again I can pass it around my codes and I can guarantee that no one's going to",
    "start": "2195800",
    "end": "2201830"
  },
  {
    "text": "mutate it and mess with it so you typically only have to do foundation at the very beginning of the program here's",
    "start": "2201830",
    "end": "2208970"
  },
  {
    "start": "2208000",
    "end": "2229000"
  },
  {
    "text": "another one spring 50 so to create a spring 50 I'm gonna pass in a string and if it's less than 50 that's good and",
    "start": "2208970",
    "end": "2215450"
  },
  {
    "text": "obviously I might check for you know non-printable characters so on and if",
    "start": "2215450",
    "end": "2220760"
  },
  {
    "text": "it's not there's none okay and again if I look at the signature search you give me a string and I might give you back a",
    "start": "2220760",
    "end": "2226190"
  },
  {
    "text": "string 50 depending on that's better than not here's another one this is",
    "start": "2226190",
    "end": "2231560"
  },
  {
    "start": "2229000",
    "end": "2333000"
  },
  {
    "text": "something I once saw on a ecommerce site they could put nine hundred ninety nine thousand items in my basket now I very",
    "start": "2231560",
    "end": "2238910"
  },
  {
    "text": "much doubt that's what they intended to do I think that was a bug and the reason",
    "start": "2238910",
    "end": "2246440"
  },
  {
    "text": "it was a bug is because they were using integer as their that's their quantity right so don't do that",
    "start": "2246440",
    "end": "2254620"
  },
  {
    "text": "typically in when in places I were in that in e-commerce site you can only order like 100 items max if you're",
    "start": "2254620",
    "end": "2260450"
  },
  {
    "text": "ordering in nine hundred ninety nine thousand you know that you either doing something malicious or us like you know that's not that's not really what you",
    "start": "2260450",
    "end": "2267260"
  },
  {
    "text": "should be doing so the way to solve that problem is to create a new type as always and you know it's easy in a shop",
    "start": "2267260",
    "end": "2276950"
  },
  {
    "text": "you should really do be doing this in all packages but it's you don't bother it's like it's a lot of",
    "start": "2276950",
    "end": "2282480"
  },
  {
    "text": "work to make new time for this so you don't bother though we're going to wrap it in it in a time and then we're going",
    "start": "2282480",
    "end": "2288150"
  },
  {
    "text": "to have a some code you know if it's more than zero less than 99 s okay what's cool about this is if it's zero",
    "start": "2288150",
    "end": "2294240"
  },
  {
    "text": "if it's not valid so if you say if you have a decrement thing you hit the minus button you're going to have to handle",
    "start": "2294240",
    "end": "2300450"
  },
  {
    "text": "the case where it goes to zero you can't your code will be forced to handle that case you can't say I'm not",
    "start": "2300450",
    "end": "2307020"
  },
  {
    "text": "going to hand it because you literally will not have an order line come back you'll get nothing back and so you'll",
    "start": "2307020",
    "end": "2312120"
  },
  {
    "text": "have to handle that case nicely so again the signature is very self documenting",
    "start": "2312120",
    "end": "2318890"
  },
  {
    "text": "alright so let's go back to our challenge first name middle initial last name okay so we now got the middle",
    "start": "2318890",
    "end": "2325560"
  },
  {
    "text": "initial is optional that's good we've now got these constraint i p-- switch",
    "start": "2325560",
    "end": "2330660"
  },
  {
    "text": "are much more clearly documenting and what they do and we can also break it up",
    "start": "2330660",
    "end": "2335760"
  },
  {
    "text": "into smaller pieces really easily so in our say a contact is a name and an email and the name has these things and the",
    "start": "2335760",
    "end": "2342780"
  },
  {
    "text": "email has these things great okay so that's three out of the four but let's",
    "start": "2342780",
    "end": "2348300"
  },
  {
    "text": "talk about this email verifies so there's a zoom in on that so we've got some business rules if the email has",
    "start": "2348300",
    "end": "2354570"
  },
  {
    "start": "2350000",
    "end": "2392000"
  },
  {
    "text": "been changed you need to set the flag back to false and you can only set it to",
    "start": "2354570",
    "end": "2360120"
  },
  {
    "text": "be true by special verification services like this logic about verifying it there's going to be some hash that's",
    "start": "2360120",
    "end": "2366420"
  },
  {
    "text": "checked against the email and not make sure it's good I don't want anyone setting this to be true I want only this piece of code to do it so how can i how",
    "start": "2366420",
    "end": "2374010"
  },
  {
    "text": "can I enforce that in the design right and how can I make it clear that you can't do that alright and again anyone",
    "start": "2374010",
    "end": "2382920"
  },
  {
    "text": "can say the true that could be done from malicious reason so I could be done accidentally you could cause a bug where you sending passwords to people who",
    "start": "2382920",
    "end": "2389010"
  },
  {
    "text": "haven't even verify the email and so on not good so what we're going to do is",
    "start": "2389010",
    "end": "2394140"
  },
  {
    "text": "create a new type and of course in domain modeling you always create a new type that's always the solution to",
    "start": "2394140",
    "end": "2399240"
  },
  {
    "text": "everything there's no problem that can't be solved by laughing in another type so we've got our email address already",
    "start": "2399240",
    "end": "2405090"
  },
  {
    "text": "we're going to wrap it in another type called a verified email address okay now what do we do with that we have our",
    "start": "2405090",
    "end": "2412110"
  },
  {
    "text": "verification service and it's going to take an email address as input and it's also going to",
    "start": "2412110",
    "end": "2417710"
  },
  {
    "text": "take some sort of hash and it's gonna spit out a verified email type maybe",
    "start": "2417710",
    "end": "2423339"
  },
  {
    "text": "right you give me an email address I might give you back a verified email",
    "start": "2423339",
    "end": "2428750"
  },
  {
    "text": "assuming that the hash matches and you're not trying to fool me now what we can do is make this verified email type",
    "start": "2428750",
    "end": "2435380"
  },
  {
    "text": "have a private constructor so they're the only person who can create it is this verification service right so it's",
    "start": "2435380",
    "end": "2442760"
  },
  {
    "text": "the typist public but it's a constructor it's private so that means as there's",
    "start": "2442760",
    "end": "2448010"
  },
  {
    "text": "anyone else any other part of the system I can't create my own verified emails I",
    "start": "2448010",
    "end": "2453680"
  },
  {
    "text": "have to go through the verification service it's the only way I can get a verified email okay so next okay so this",
    "start": "2453680",
    "end": "2461450"
  },
  {
    "text": "is and it's very clear that you might it might not be verified so you're gonna have to handle that case now now we do",
    "start": "2461450",
    "end": "2467180"
  },
  {
    "text": "is we go back to our original design get rid of the boolean flag and we say that email is either a verified email and",
    "start": "2467180",
    "end": "2473869"
  },
  {
    "text": "unverified email if there's an unverified email it's just a regular email address and if it's a verified email it's one of these special verified",
    "start": "2473869",
    "end": "2481130"
  },
  {
    "text": "email address types now what's cool about this is first of all it's much more self documenting because there's",
    "start": "2481130",
    "end": "2487160"
  },
  {
    "text": "much clearer than having the boolean but the other thing is I literally cannot do",
    "start": "2487160",
    "end": "2492440"
  },
  {
    "text": "the wrong thing if I if I change the email address do you give me a new address I think I can get an email address type that's fine but then I can",
    "start": "2492440",
    "end": "2499220"
  },
  {
    "text": "only set it to unverified because I can't I can't create a verified email I",
    "start": "2499220",
    "end": "2504230"
  },
  {
    "text": "can only create normal emails so if I've given if you give me a new humourous I",
    "start": "2504230",
    "end": "2509390"
  },
  {
    "text": "have to create a none variety unverified case I literally cannot do the wrong thing so there is not only is it so if",
    "start": "2509390",
    "end": "2517310"
  },
  {
    "text": "documented it's also guaranteed that I conform to this business rule without",
    "start": "2517310",
    "end": "2522650"
  },
  {
    "text": "having to buy a unit test that's very nice so if we look at the challenge this is",
    "start": "2522650",
    "end": "2529890"
  },
  {
    "text": "what we've got now we've got email address verified email email contact info a person names so on so forth which",
    "start": "2529890",
    "end": "2535380"
  },
  {
    "text": "val is optional which are the constraints were the link fields and so on which values optional it's very clear",
    "start": "2535380",
    "end": "2542339"
  },
  {
    "text": "now from the design what are the constraints that's very clear now from the design",
    "start": "2542339",
    "end": "2548329"
  },
  {
    "text": "which feels are linked it's very clear now for the design the domain logic is",
    "start": "2548329",
    "end": "2553559"
  },
  {
    "text": "much clearer now that we have a concept of an unverified and a verified email so",
    "start": "2553559",
    "end": "2558589"
  },
  {
    "text": "the design is better and also this hell this thing of ubiquitous language",
    "start": "2558589",
    "end": "2563609"
  },
  {
    "text": "initially we had one thing all the contacts and we were using primitive types now we have like four six seven",
    "start": "2563609",
    "end": "2571079"
  },
  {
    "text": "different things but they represent them to main much better I mean we we now have a concept of a verified email addresses now represented by something",
    "start": "2571079",
    "end": "2577769"
  },
  {
    "text": "in our code and we have represented there's a choice between these two things and so this is good because this",
    "start": "2577769",
    "end": "2584279"
  },
  {
    "text": "is how the domain expert would say yeah we do these kinds of things with verified emails we do password resets",
    "start": "2584279",
    "end": "2589559"
  },
  {
    "text": "with them or something it's actually a lot this is actually a lot better from the domain modeling point of view so is",
    "start": "2589559",
    "end": "2596279"
  },
  {
    "text": "the code is more useful and it's more self documenting and of course this is a",
    "start": "2596279",
    "end": "2601349"
  },
  {
    "text": "compatible code right this is not a documentation this is code all right",
    "start": "2601349",
    "end": "2606450"
  },
  {
    "text": "it's a final thing making illegal states unrepresentable that's a cool phrase",
    "start": "2606450",
    "end": "2613609"
  },
  {
    "text": "let's say that sometime later they decide to have an address as well as an",
    "start": "2613609",
    "end": "2619200"
  },
  {
    "text": "email okay fair enough but they have a new business rule okay you have to have",
    "start": "2619200",
    "end": "2625460"
  },
  {
    "text": "contact must have either an email address or a postal address where you can contact you fair enough so the",
    "start": "2625460",
    "end": "2632400"
  },
  {
    "text": "question is does this design meet that business law now says no doesn't because",
    "start": "2632400",
    "end": "2639359"
  },
  {
    "text": "remember everything is required so these two properties are both required right",
    "start": "2639359",
    "end": "2644789"
  },
  {
    "text": "now so as it stands you have to have both okay well let's not do that let's make them optional so this meet the",
    "start": "2644789",
    "end": "2651900"
  },
  {
    "text": "requirements no it doesn't because this requirement they could both be missing right now what you could say was",
    "start": "2651900",
    "end": "2658499"
  },
  {
    "text": "okay I'll have them both be optional and I put in some special code somewhere that validates if one isn't missing and",
    "start": "2658499",
    "end": "2664289"
  },
  {
    "text": "the other ones missing that's an error answer no that's in the code I want to do in the design how can I capture in",
    "start": "2664289",
    "end": "2670349"
  },
  {
    "text": "the design where you literally cannot screw it up okay so if you think about",
    "start": "2670349",
    "end": "2677190"
  },
  {
    "text": "it so this is this guideline make illegal states unrepresentable so rather than saying yeah they can both be",
    "start": "2677190",
    "end": "2683190"
  },
  {
    "text": "missing and I'll put some special code in to validate it you're asking for trouble like if you can actually encapsulate",
    "start": "2683190",
    "end": "2689160"
  },
  {
    "text": "this business rule in the cut in the design you literally you never have that thing happen and you never have to write a unit test for it and you never have to",
    "start": "2689160",
    "end": "2695009"
  },
  {
    "text": "write any special violation code for it it literally cannot exist so how can we",
    "start": "2695009",
    "end": "2700859"
  },
  {
    "text": "how can we solve that well if you think about it when you say it must have an email address or personalists there's",
    "start": "2700859",
    "end": "2707670"
  },
  {
    "text": "actually three choices it's either gone only an email address or it's got only a person who escorts",
    "start": "2707670",
    "end": "2713220"
  },
  {
    "text": "got both right there's three choices all right how can we model three choices in",
    "start": "2713220",
    "end": "2719039"
  },
  {
    "text": "our code well you say it's either an email or its address only always both so",
    "start": "2719039",
    "end": "2726839"
  },
  {
    "text": "we're just model our three choices right there all right and there's no fourth choice there's no choice where they're both not",
    "start": "2726839",
    "end": "2733170"
  },
  {
    "text": "missing we're both missing so this is an example of literally modeling it in such a way that I have to be one of these",
    "start": "2733170",
    "end": "2739890"
  },
  {
    "text": "three things the fourth one where they're both missing is not an available option this is very cool and we stick",
    "start": "2739890",
    "end": "2747630"
  },
  {
    "text": "that back in our main thing and now we have a",
    "start": "2747630",
    "end": "2752239"
  },
  {
    "text": "so this is an example of encoding the requirements in the type so I say this",
    "start": "2753349",
    "end": "2760309"
  },
  {
    "text": "has multiple benefits I can't do the wrong thing but more in more importantly it's actually self documenting codes one",
    "start": "2760309",
    "end": "2766940"
  },
  {
    "text": "of the problems is having sort of your validation logic buried in some file somewhere is it's not clear to me as",
    "start": "2766940",
    "end": "2772309"
  },
  {
    "text": "another developer time if I'm inheriting your code base or I'm working on your code base it's quite easy to",
    "start": "2772309",
    "end": "2778219"
  },
  {
    "text": "accidentally forget to call that validation logic you know this is self",
    "start": "2778219",
    "end": "2783349"
  },
  {
    "text": "documenting this like if I have this thing I look at this like oh okay these are things literally the only thing things I can do so it actually helps to",
    "start": "2783349",
    "end": "2790699"
  },
  {
    "text": "document the code as well as to constrain it now so there's what we had before we had an email addresses to sum",
    "start": "2790699",
    "end": "2798559"
  },
  {
    "start": "2793000",
    "end": "2813000"
  },
  {
    "text": "of things and afterwards we now have this new contact which has a field and that field has this choice so now we",
    "start": "2798559",
    "end": "2805009"
  },
  {
    "text": "have again we have a new domain constant called contact information that didn't",
    "start": "2805009",
    "end": "2810469"
  },
  {
    "text": "exist before we've learned something new about the domain so this is awesome",
    "start": "2810469",
    "end": "2815599"
  },
  {
    "start": "2813000",
    "end": "2890000"
  },
  {
    "text": "static types are almost as awesome as a cat on a unicorn white but it's pretty",
    "start": "2815599",
    "end": "2821930"
  },
  {
    "text": "cool what you can do with stereotypes obviously you can't do everything but the stuff you can do it's really nice it",
    "start": "2821930",
    "end": "2828739"
  },
  {
    "text": "saves you a lot of time let's just look at one more variant on this let's say that they change their mind and it's",
    "start": "2828739",
    "end": "2835009"
  },
  {
    "text": "like they say well actually we don't really care that they have to have one or the other we just want at least one way of contacting somebody no that's",
    "start": "2835009",
    "end": "2842499"
  },
  {
    "text": "much put their Puli a better way of doing it we just have at least we won't have at least one way of contact you so",
    "start": "2842499",
    "end": "2848599"
  },
  {
    "text": "what I'm gonna do is say okay here's the ways we can contact you we can contact you by email we can contact you by",
    "start": "2848599",
    "end": "2853969"
  },
  {
    "text": "address we can contact you by phone whatever that's the way of being contacted and then in our contact we say",
    "start": "2853969",
    "end": "2862789"
  },
  {
    "text": "okay there's primary contact information and secondary contact information primary contact information is required",
    "start": "2862789",
    "end": "2867859"
  },
  {
    "text": "and the secondary contact information is optional or it could be a list if you want to have more than one and again",
    "start": "2867859",
    "end": "2874519"
  },
  {
    "text": "we've now documented what the constraints are you literally",
    "start": "2874519",
    "end": "2881460"
  },
  {
    "text": "to have a primary contact but the contact info could be email or personalist we're not we're not",
    "start": "2881460",
    "end": "2886560"
  },
  {
    "text": "constraining that all right so let's",
    "start": "2886560",
    "end": "2891720"
  },
  {
    "start": "2890000",
    "end": "2969000"
  },
  {
    "text": "look at what we've covered we've got the the original challenge the whole thing of you becomes language and the self",
    "start": "2891720",
    "end": "2896970"
  },
  {
    "text": "document design I think we've seen that pretty good algebraic type so there's that kind of math you buzzwords but",
    "start": "2896970",
    "end": "2902460"
  },
  {
    "text": "hopefully you see it's not you forget about the mathematical stuff so you can see the concepts are really pretty",
    "start": "2902460",
    "end": "2908430"
  },
  {
    "text": "straightforward but using choices rather inherent it's a really nice thing you",
    "start": "2908430",
    "end": "2914490"
  },
  {
    "text": "see that we used to over and over for modeling things doing choices it's really really it's the one thing I'm",
    "start": "2914490",
    "end": "2919680"
  },
  {
    "text": "really missing c-sharp is having these choice types designing the types don't",
    "start": "2919680",
    "end": "2925980"
  },
  {
    "text": "use novel use options use these single case unions to wrap things and making",
    "start": "2925980",
    "end": "2931109"
  },
  {
    "text": "illegal states unrepresentable I haven't had time to cover a lot of stuff so",
    "start": "2931109",
    "end": "2936690"
  },
  {
    "text": "really just scratching the surface there's a lot of stuff to do with States state machines and state transitions",
    "start": "2936690",
    "end": "2942510"
  },
  {
    "text": "services seek us all this stuff can't talk about it right now but I have other",
    "start": "2942510",
    "end": "2949560"
  },
  {
    "text": "talks on these kinds of topics if you're interested so there you go thanks so",
    "start": "2949560",
    "end": "2954720"
  },
  {
    "text": "much mainland diminish all the code and the slides and and videos are on my",
    "start": "2954720",
    "end": "2961410"
  },
  {
    "text": "website at slash DVD so if you go there and you want to watch this video again you can go look at the slides if you",
    "start": "2961410",
    "end": "2969780"
  },
  {
    "start": "2969000",
    "end": "3094000"
  },
  {
    "text": "want to know more about F sharp there's an organization in F sharp dot org and if you like this talk I have a book",
    "start": "2969780",
    "end": "2976380"
  },
  {
    "text": "coming out shortly it's actually available right now as early access so you can go and if you just search for a",
    "start": "2976380",
    "end": "2982560"
  },
  {
    "text": "domain medaling made functional book police show up there's pragmatic press",
    "start": "2982560",
    "end": "2988190"
  },
  {
    "text": "if you do get it I'll be very interested to get your feedback also in room six",
    "start": "2988190",
    "end": "2995520"
  },
  {
    "text": "immediately following this there's two more functional programming talks which look very good so if you think that's",
    "start": "2995520",
    "end": "3000800"
  },
  {
    "text": "interesting you can learn some more stuff and I'm also doing an AMA in a",
    "start": "3000800",
    "end": "3006770"
  },
  {
    "text": "session after this interview eight I think it is so yeah thanks very much for coming and",
    "start": "3006770",
    "end": "3012330"
  },
  {
    "text": "yeah let me know I think we've got time for questions or yeah I think we've got a few minutes for questions or while",
    "start": "3012330",
    "end": "3018000"
  },
  {
    "text": "hunting we just stopped and you can come and ask me questions separately do you think does anyone have any urgent questions yes right so the question is",
    "start": "3018000",
    "end": "3033810"
  },
  {
    "text": "how do you actually do the Beast private constructors I didn't show it in the code no it's a little tricky yeah it is",
    "start": "3033810",
    "end": "3042900"
  },
  {
    "text": "in the book yeah it's also on like it's also on the website as soon as you have private stuff it does become tricky",
    "start": "3042900",
    "end": "3049730"
  },
  {
    "text": "often you can get away with not actually making it private but just by its it's",
    "start": "3049730",
    "end": "3055260"
  },
  {
    "text": "if you're lazy it's the kind of thing where you tend not to do it anyway it's",
    "start": "3055260",
    "end": "3061230"
  },
  {
    "text": "this is you have a type you mutually say okay I better just call the trade method on this thing and not just like do my",
    "start": "3061230",
    "end": "3066240"
  },
  {
    "text": "hands but yeah the way if you really if you're letting an API and I really like an email address might be worth doing",
    "start": "3066240",
    "end": "3071910"
  },
  {
    "text": "because I really don't want people to mess it up yeah but like phone number maybe maybe no I don't care depends how",
    "start": "3071910",
    "end": "3077190"
  },
  {
    "text": "much you care about validation yeah any other questions no all right well thanks",
    "start": "3077190",
    "end": "3086010"
  },
  {
    "text": "very much everyone Cheers [Applause]",
    "start": "3086010",
    "end": "3092219"
  }
]