[
  {
    "text": "firstly thank you so much for coming and joining me this afternoon I know Ian Cooper is in room one very compelling",
    "start": "2960",
    "end": "8040"
  },
  {
    "text": "alternative so I appreciate you wandering down to room five here uh and also as always I'd like to start by",
    "start": "8040",
    "end": "13480"
  },
  {
    "text": "thanking NDC and the Hilton and all the staff here uh as always it's an amazing conference um the catering the AV crew",
    "start": "13480",
    "end": "20880"
  },
  {
    "text": "everyone puts on a huge amount of effort to make this happen and uh I've really enjoyed the last couple of days and I",
    "start": "20880",
    "end": "26039"
  },
  {
    "text": "hope you have too we are going to be talking today about tdd and dddd not all",
    "start": "26039",
    "end": "31439"
  },
  {
    "text": "the ddds or not all the DDS but some of the DDS um and it says from the ground up and as Nick pointed out earlier it's",
    "start": "31439",
    "end": "38040"
  },
  {
    "text": "not literally from the ground up I'm not creating my own Frameworks or anything but uh we're going to start with some",
    "start": "38040",
    "end": "43239"
  },
  {
    "text": "pretty much a blank project uh and we're going to try and build in the next hour a system and explore really the question",
    "start": "43239",
    "end": "50000"
  },
  {
    "text": "that I got asked that inspired this was uh you know domain driven design sounds",
    "start": "50000",
    "end": "55239"
  },
  {
    "text": "great for a really complex domain but what if you are building a system that seems really simple at the start and you don't find out that it's complex until",
    "start": "55239",
    "end": "61359"
  },
  {
    "text": "later and so that's kind of the scenario I've constructed for you today before we get too far into it though just want to",
    "start": "61359",
    "end": "67560"
  },
  {
    "text": "check because I know not everybody is familiar with some of these terms who in the audience is using say tdd test",
    "start": "67560",
    "end": "73159"
  },
  {
    "text": "driven development on a regular basis yeah so pretty much a minority um",
    "start": "73159",
    "end": "79439"
  },
  {
    "text": "hopefully after this many of the others who are not doing it will be motivated to to give it a try I think it's a wonderful practice um who's doing domain",
    "start": "79439",
    "end": "86479"
  },
  {
    "text": "driven design the DDD part on a regular basis okay even more wow that's uh not what I",
    "start": "86479",
    "end": "94040"
  },
  {
    "text": "expected but um great to see um so for those of you who don't do either of these things I will briefly explain what",
    "start": "94040",
    "end": "100240"
  },
  {
    "text": "they are so we got a couple of slides at the start just to intro it and a little bit about myself uh my name is Chris uh",
    "start": "100240",
    "end": "105360"
  },
  {
    "text": "I do a bunch of stuff I was a CTO of a startup um twice over and these days I",
    "start": "105360",
    "end": "110719"
  },
  {
    "text": "do a lot of training uh Consulting uh coaching uh and various other things but I really found that uh my passion was",
    "start": "110719",
    "end": "117119"
  },
  {
    "text": "always at the intersection of technology and business uh trying to help technology teams be real drivers of their business's success you know not",
    "start": "117119",
    "end": "123840"
  },
  {
    "text": "not just cost centers uh in as it is often the case in in large companies so we're going to be building",
    "start": "123840",
    "end": "130840"
  },
  {
    "text": "a system today and as I said we are explicitly not using DDD at the start",
    "start": "130840",
    "end": "135920"
  },
  {
    "text": "the idea here is we're going to follow the kinds of practices that you get advised to use if you do The Beginner's",
    "start": "135920",
    "end": "141080"
  },
  {
    "text": "tutorial um you go and you know check out the Microsoft documentation and say run. net new and here's how you create",
    "start": "141080",
    "end": "147040"
  },
  {
    "text": "an API here's how you use Entity framework if you're beginner and you follow this guidance you'll end up",
    "start": "147040",
    "end": "152480"
  },
  {
    "text": "building a little bit of the kind of system that we're going to start with today but what I'm hoping to show you is that by bringing in some of the",
    "start": "152480",
    "end": "158480"
  },
  {
    "text": "philosophies and ideas of DDD um you might call it lowercase DDD DDD light",
    "start": "158480",
    "end": "164120"
  },
  {
    "text": "just the the thought patterns rather than the explicit um coding practices you can still get a lot of benefit in",
    "start": "164120",
    "end": "170400"
  },
  {
    "text": "your code base and it might guide you towards starting to think about some of those other domain driven design practices over time so we're going to be",
    "start": "170400",
    "end": "176319"
  },
  {
    "text": "building a system which is uh a really simple thing uh this is an entity relationship model um that that I put",
    "start": "176319",
    "end": "182959"
  },
  {
    "text": "together and you can imagine someone says we need to uh build a system that's going to be for registering in courses",
    "start": "182959",
    "end": "188239"
  },
  {
    "text": "at a university um we're going to ignore a lot of complexity here and we're just",
    "start": "188239",
    "end": "193840"
  },
  {
    "text": "going to say we have a student and they enroll in a course um and the course is allocated to a room okay says enrolls in",
    "start": "193840",
    "end": "199840"
  },
  {
    "text": "that should not be the case the course is allocated to a room the room has a capacity so the primary constraint that",
    "start": "199840",
    "end": "205519"
  },
  {
    "text": "we're going to be dealing with is that we don't want to overfill the room it's really important that we don't we have to should start blocking enrollments at",
    "start": "205519",
    "end": "211560"
  },
  {
    "text": "the point where um the room is going to be full so let's see how we're going to do that using tdd uh tdd for those of",
    "start": "211560",
    "end": "219519"
  },
  {
    "text": "you who don't do it uh test driven development it's a pretty simple practice in theory some people find it",
    "start": "219519",
    "end": "225120"
  },
  {
    "text": "quite challenging to get into um but if I was going to describe it it's you start by writing a test a failing test",
    "start": "225120",
    "end": "231400"
  },
  {
    "text": "you make the test past in the simplest way you possibly can and then you do some refactoring not every time but",
    "start": "231400",
    "end": "237599"
  },
  {
    "text": "often I find it's helpful to do that so now it's time to get onto the code so we got Visual Studio code here this is",
    "start": "237599",
    "end": "244560"
  },
  {
    "text": "almost the exact outcome of running net new on a on an MBC API project uh I've",
    "start": "244560",
    "end": "249879"
  },
  {
    "text": "got an xunit test project here with no tests in it and I've got uh an API",
    "start": "249879",
    "end": "255400"
  },
  {
    "text": "project here with no controllers or anything I say it's almost the same because if you run net newu you get a weather controller um I don't know if",
    "start": "255400",
    "end": "261680"
  },
  {
    "text": "people are familiar with that if you run the the net new and you get the weather controller um so I've stripped that out just to simplify things and just to",
    "start": "261680",
    "end": "267600"
  },
  {
    "text": "prove it we'll run Nest test here and it'll come back and say no test is",
    "start": "267600",
    "end": "273120"
  },
  {
    "text": "available so under tdd what's the first thing I do a test write a test yes a",
    "start": "273120",
    "end": "280199"
  },
  {
    "text": "failing test exactly so let's do that so we go student uh tests I'm going to start with the student registration",
    "start": "280199",
    "end": "288600"
  },
  {
    "text": "except I did not put the the end",
    "start": "288600",
    "end": "294700"
  },
  {
    "text": "[Music]",
    "start": "294700",
    "end": "298370"
  },
  {
    "text": "[Music]",
    "start": "300860",
    "end": "307960"
  },
  {
    "text": "some uh helper things we'll create an xunit test class um as I'm familiar with doing like",
    "start": "307960",
    "end": "315680"
  },
  {
    "text": "uh web API tests in net you can use the in class fixture to build a web application Factory around your program",
    "start": "315680",
    "end": "323120"
  },
  {
    "text": "class um which allows you to in your Constructor inject [Music]",
    "start": "323120",
    "end": "333779"
  },
  {
    "text": "Factory and then save it for later lets you to",
    "start": "336880",
    "end": "343080"
  },
  {
    "text": "create an APA client that you can use to interact with your system under test",
    "start": "343080",
    "end": "348600"
  },
  {
    "text": "um so let [Music]",
    "start": "348600",
    "end": "356880"
  },
  {
    "text": "me now we got our Factory we can start to write a test now I like to write tests in a way that sometimes people",
    "start": "356880",
    "end": "363520"
  },
  {
    "text": "find a bit strange but um I'm a big fan of bdd which is behavior driven development which is really to be honest",
    "start": "363520",
    "end": "368800"
  },
  {
    "text": "the intersection of tdd and DDD it's about using domain language in your tests a lot of people think it means you have to use cucumber or gerker and these",
    "start": "368800",
    "end": "375280"
  },
  {
    "text": "fanty syntaxes and I think they're quite cool but you don't have to do them I think you can still follow the bdd principles without them but I do write",
    "start": "375280",
    "end": "382000"
  },
  {
    "text": "to right so given I am a student when I",
    "start": "382000",
    "end": "387280"
  },
  {
    "text": "register so we need an API client get one from our [Music]",
    "start": "387319",
    "end": "395400"
  },
  {
    "text": "factory and we're going to get a response if I'm",
    "start": "395400",
    "end": "400639"
  },
  {
    "text": "doing students URL I'm going to have to await that and",
    "start": "401759",
    "end": "407880"
  },
  {
    "text": "then the simplest thing assert do equal",
    "start": "407880",
    "end": "414440"
  },
  {
    "text": "[Music]",
    "start": "414440",
    "end": "421959"
  },
  {
    "text": "okay so this is going to test after we do a post to that URL are we getting back a created status code now when I",
    "start": "422039",
    "end": "428560"
  },
  {
    "text": "talk to people about tdd some people say to me ah you know sounds great as long as you know all the requirements up",
    "start": "428560",
    "end": "433759"
  },
  {
    "text": "front and as I'm showing you here you don't have to test all the requirements in fact it's probably a good idea to not",
    "start": "433759",
    "end": "439520"
  },
  {
    "text": "test all the requirements in the very first test that you write you want to write a really small test that just tests one small aspect of the",
    "start": "439520",
    "end": "445319"
  },
  {
    "text": "application and in this case we're just going to test does the route exist and so if I run net",
    "start": "445319",
    "end": "451960"
  },
  {
    "text": "test um what have I done here ah yes thank",
    "start": "453080",
    "end": "458400"
  },
  {
    "text": "you audience [Music] participation you know it's live coding",
    "start": "458400",
    "end": "465039"
  },
  {
    "text": "because it doesn't work okay failing test excellent so we got a red that's the red in that part of",
    "start": "465039",
    "end": "470479"
  },
  {
    "text": "the circle um the other thing I'm going to do just because the assertion here like it's fine it's pretty simple you",
    "start": "470479",
    "end": "477639"
  },
  {
    "text": "can understand it but I quite like to wrap the uh assertions",
    "start": "477639",
    "end": "483560"
  },
  {
    "text": "in methods that sort of illustrate what's going on so you know it should allocate um should so should uh register",
    "start": "483560",
    "end": "491280"
  },
  {
    "text": "the student and we can move that assertion in",
    "start": "491280",
    "end": "498039"
  },
  {
    "text": "here you'll see why over time this kind of starts to build up and make sense we need",
    "start": "498039",
    "end": "503800"
  },
  {
    "text": "our response message [Music]",
    "start": "503800",
    "end": "510720"
  },
  {
    "text": "and now I can the test is just given I'm a student when I register it should register the student and we're kind of saying that by getting that status code",
    "start": "510840",
    "end": "517719"
  },
  {
    "text": "back what we mean in the language of the business is that the student has become registered obviously that's still not",
    "start": "517719",
    "end": "523080"
  },
  {
    "text": "going to be passing the other thing I'm going to be doing in this uh demo is I've got this script uh forwards which",
    "start": "523080",
    "end": "529519"
  },
  {
    "text": "is basically um just going to move me through a repository that's got all the steps in it um I'm going to do a lot of",
    "start": "529519",
    "end": "535320"
  },
  {
    "text": "live coding but occasionally I'll run the forwards well not just occasionally quite a lot I'm going to run the script is going to reset everything I've done and move me forward through the script",
    "start": "535320",
    "end": "542040"
  },
  {
    "text": "hopefully everything I've just done live kind of aligns with what um I missed a new student but it's basically the same",
    "start": "542040",
    "end": "548120"
  },
  {
    "text": "uh interaction here but it's still failing there's no actual controller yet so let's add a controller",
    "start": "548120",
    "end": "553530"
  },
  {
    "text": "[Music]",
    "start": "553530",
    "end": "562330"
  },
  {
    "text": "[Music]",
    "start": "567000",
    "end": "572330"
  },
  {
    "text": "class [Music]",
    "start": "572399",
    "end": "578480"
  },
  {
    "text": "there I think that's enough I need",
    "start": "578480",
    "end": "586000"
  },
  {
    "text": "to all right controller [Music]",
    "start": "586000",
    "end": "608389"
  },
  {
    "text": "this is all I need to do to get this test to pass so when I say the simplest thing that will get the test to pass I really mean it I'm not doing anything",
    "start": "608839",
    "end": "615440"
  },
  {
    "text": "else the test is passing now I shouldn't write any more code at this point because if I write more code it's",
    "start": "615440",
    "end": "620959"
  },
  {
    "text": "untested code there's no test that demands I do anything more complex at this point not doing any persistence I haven't even created a student class but",
    "start": "620959",
    "end": "627680"
  },
  {
    "text": "I'm starting to build up the expectations in the test the nice thing about doing it this way by doing it in a",
    "start": "627680",
    "end": "632880"
  },
  {
    "text": "really simple way that you can understand is that you're actually checking that the test does what you expect so they're kind of using the code",
    "start": "632880",
    "end": "638560"
  },
  {
    "text": "to validate the test and then when you do the refactoring you're using the test to validate the code that you refactored",
    "start": "638560",
    "end": "643760"
  },
  {
    "text": "so a couple of things that are interesting here this is super simple um who thinks this has to be called",
    "start": "643760",
    "end": "650639"
  },
  {
    "text": "post you can actually call it anything you want and the test will still pass the other thing I really like about tdd",
    "start": "651200",
    "end": "657160"
  },
  {
    "text": "is by having that strong test highness I can play around with different things and see what makes it work and what doesn't Fubar is not very helpful post",
    "start": "657160",
    "end": "662920"
  },
  {
    "text": "isn't very helpful either I think register is maybe a little bit more helpful um it can be helpful to put the",
    "start": "662920",
    "end": "668279"
  },
  {
    "text": "attribute there just to restrict it because if you don't have an attribute it will respond to all methods",
    "start": "668279",
    "end": "673519"
  },
  {
    "text": "um now this should be going green okay so I think that's probably",
    "start": "673519",
    "end": "679399"
  },
  {
    "text": "enough of watching me like laboriously type out every single keystroke it's going to take a long time to build this application so let's jump back to our",
    "start": "679399",
    "end": "686600"
  },
  {
    "text": "test and I'll show you what the next scenario uh we're going to add",
    "start": "686600",
    "end": "692680"
  },
  {
    "text": "is it should allocate a new ID so we've got it should register the student we're saying that means the hcp status code is",
    "start": "693800",
    "end": "700839"
  },
  {
    "text": "created and it should allocate a new ID so in this case we have had to create a student response class one thing that",
    "start": "700839",
    "end": "707160"
  },
  {
    "text": "sometimes people get caught up is they try and use the same dto or like the classes that represent the API responses",
    "start": "707160",
    "end": "713680"
  },
  {
    "text": "or the API payloads in the test and the application I strongly disagree with that I strongly recommend not doing that",
    "start": "713680",
    "end": "719480"
  },
  {
    "text": "because if you change it you've changed the test as well and the test is just going to pass without warning you that all of your other API consumers are not",
    "start": "719480",
    "end": "726200"
  },
  {
    "text": "going to have updated their expectations so you need to think about your tests as being a proxy for your other API",
    "start": "726200",
    "end": "731639"
  },
  {
    "text": "consumers and if they're not going to change your test shouldn't change so I segregate the um the classes that",
    "start": "731639",
    "end": "737720"
  },
  {
    "text": "represent the structures that are passing back and forward over the API in the test from the classes in the application when you're cheing tdd that",
    "start": "737720",
    "end": "744120"
  },
  {
    "text": "makes it even easier because it's obvious I need a class year to extract the ID from the response that I'm",
    "start": "744120",
    "end": "749199"
  },
  {
    "text": "getting back or in this case not yet getting back um so of course I'm just going to add it into the test project",
    "start": "749199",
    "end": "755560"
  },
  {
    "text": "which means that when I go and add a controller or update the controll to actually return something um I'm not",
    "start": "755560",
    "end": "760720"
  },
  {
    "text": "going to be doing that now let's make this pass with the simplest implementation",
    "start": "760720",
    "end": "767519"
  },
  {
    "text": "possible not even creating a student class and this test is going to pass I",
    "start": "769000",
    "end": "774839"
  },
  {
    "text": "haven't yet written a test that demands that I need an actual student class and I probably won't um until I start doing",
    "start": "774839",
    "end": "780440"
  },
  {
    "text": "some persistence and things like that and validating that actually after registering a student I can retrieve it again later but there is one advantage I",
    "start": "780440",
    "end": "787680"
  },
  {
    "text": "think to creating a class uh that comes up even straight away um which is if I create say a student uh",
    "start": "787680",
    "end": "797040"
  },
  {
    "text": "object sorry I'm getting all over the place on my Mac touchpad the right click",
    "start": "797040",
    "end": "802680"
  },
  {
    "text": "is not working for [Music] me all right we'll just go forward here",
    "start": "802680",
    "end": "807880"
  },
  {
    "text": "for a second um if I create a student class uh this doesn't look that",
    "start": "807880",
    "end": "813120"
  },
  {
    "text": "different right this and this I mean maybe it's a little bit more readable",
    "start": "813120",
    "end": "818160"
  },
  {
    "text": "but what I find a lot more readable is to do this because we're doing we're registering the student so let's put a",
    "start": "818160",
    "end": "824240"
  },
  {
    "text": "static Factory method on the student class then encapsulate this process of allocating the ID seems simple why would",
    "start": "824240",
    "end": "831680"
  },
  {
    "text": "I bother adding another method but see how much more easily readable this code is and as you get more and more complex",
    "start": "831680",
    "end": "838600"
  },
  {
    "text": "rules building up into the registration process you've already got a nice place to put them um that keeps it segregated",
    "start": "838600",
    "end": "844600"
  },
  {
    "text": "from the concerns of the controller um so moving forwards again",
    "start": "844600",
    "end": "850320"
  },
  {
    "text": "uh we're going to we've added another test here to um assert on the location header so",
    "start": "850320",
    "end": "856160"
  },
  {
    "text": "we've we've got a test that asserted on the student has an ID in the response and we're saying it should show where to",
    "start": "856160",
    "end": "861279"
  },
  {
    "text": "locate the new student so we're getting the the response header and making sure that the header is not null and that it equals the expected student ID",
    "start": "861279",
    "end": "869399"
  },
  {
    "text": "and of course now we have a failing",
    "start": "869399",
    "end": "874720"
  },
  {
    "text": "tests so now we just have to move our registration",
    "start": "877120",
    "end": "882240"
  },
  {
    "text": "here and we can [Music]",
    "start": "882240",
    "end": "891639"
  },
  {
    "text": "build a URL test is passing still not doing any",
    "start": "891639",
    "end": "899040"
  },
  {
    "text": "persistence we're just gradually building up the application one step at a time one really tiny step at a time um and that's done exactly there",
    "start": "899040",
    "end": "907800"
  },
  {
    "text": "the same thing there so now we want to test that asserts that we're actually confirming the details so we're going to",
    "start": "907800",
    "end": "914040"
  },
  {
    "text": "pass in a student with an actual name so I'm just creating a good for the name",
    "start": "914040",
    "end": "919959"
  },
  {
    "text": "for now just for testing purposes um and then we're going to assert that after registration it confirms the student",
    "start": "919959",
    "end": "925759"
  },
  {
    "text": "details and so we're going to um get back the pass into this method the requests",
    "start": "925759",
    "end": "932240"
  },
  {
    "text": "and the response that we got back and assert that the name matches the name and once again I've got this register",
    "start": "932240",
    "end": "937519"
  },
  {
    "text": "student request with a name uh field on it but my student object in the application I have added a name there",
    "start": "937519",
    "end": "943680"
  },
  {
    "text": "but um it's not doing anything yet I'm not allocating that uh in in the registration method so if we run that",
    "start": "943680",
    "end": "950040"
  },
  {
    "text": "test it will fail and then if we go forward we're",
    "start": "950040",
    "end": "955440"
  },
  {
    "text": "going to pass in the request object uh allocate the name as the ID and you can sort of see how having put that into a",
    "start": "955440",
    "end": "962040"
  },
  {
    "text": "register method has already encapsulated that behavior so the controller is still basically the same which calling student",
    "start": "962040",
    "end": "967480"
  },
  {
    "text": "register with the request now we should get a",
    "start": "967480",
    "end": "972240"
  },
  {
    "text": "pass so another um thing that I like to do in uh when I'm doing this kind of DDD",
    "start": "974199",
    "end": "981399"
  },
  {
    "text": "like lightweight DDD is there's a real focus on the language you can see I'm specifically using words like register",
    "start": "981399",
    "end": "987279"
  },
  {
    "text": "rather than create and I'm being sure to use the word student all over the place I think a lot of people they would have",
    "start": "987279",
    "end": "992519"
  },
  {
    "text": "used words like post or they would have used create student um but I really try and focus on what's the like the student",
    "start": "992519",
    "end": "998680"
  },
  {
    "text": "wasn't just created I mean presumably they're 18 years old they've been around for a while um you might say well",
    "start": "998680",
    "end": "1004839"
  },
  {
    "text": "they've been created in the database but who cares about the database the customer certainly doesn't the student doesn't the teachers don't um what we're",
    "start": "1004839",
    "end": "1011160"
  },
  {
    "text": "saying is the student has registered that's the business process that has just happened so we try and use that language in the",
    "start": "1011160",
    "end": "1016639"
  },
  {
    "text": "code um but uh to support that I've actually been working on an extension uh for the IDE called Contex and you can",
    "start": "1016639",
    "end": "1023399"
  },
  {
    "text": "put some definitions in a yaml file like a glossery of the terminology so he says student is a person who would like to",
    "start": "1023399",
    "end": "1030160"
  },
  {
    "text": "study a course and it gives you like sample examples of the usage of that term uh in the context and then the",
    "start": "1030160",
    "end": "1037280"
  },
  {
    "text": "register process as well and what that gives you is when you are looking at the",
    "start": "1037280",
    "end": "1042558"
  },
  {
    "text": "um controller if I hover over the word student it gives me that definition there and so as a developer I can be",
    "start": "1042559",
    "end": "1049240"
  },
  {
    "text": "reminded constantly hang on yes I'm working in technology but I'm doing this for a purpose for a reason and these are",
    "start": "1049240",
    "end": "1056160"
  },
  {
    "text": "the domain terms and the way that the domain experts talk about the domain um and we've got the register definition",
    "start": "1056160",
    "end": "1061840"
  },
  {
    "text": "there as well the process of student registering um it notes there they'll not yet be enrolled in a course even",
    "start": "1061840",
    "end": "1067120"
  },
  {
    "text": "after they've registered uh and if you hover over a term like this with register student requests it gives you both definitions as well so you can sort",
    "start": "1067120",
    "end": "1073000"
  },
  {
    "text": "of get uh Clarity on everything that's going on there so you'll start to see as we go more of those definitions creeping",
    "start": "1073000",
    "end": "1078320"
  },
  {
    "text": "in um and appearing in the popups so now we're adding a test for",
    "start": "1078320",
    "end": "1083559"
  },
  {
    "text": "checking the student details I'm going to start to move a little bit quicker um because I do want to get to a point",
    "start": "1083559",
    "end": "1089360"
  },
  {
    "text": "where there's some really meaty uh logic to worry about but just to S of show you here we've added a test now um for",
    "start": "1089360",
    "end": "1096880"
  },
  {
    "text": "checking the details so now we have a get request we do a post and then we want to do a get with the new student",
    "start": "1096880",
    "end": "1103480"
  },
  {
    "text": "location that was in the location header that we already have now uh and make sure that the response exists again",
    "start": "1103480",
    "end": "1109520"
  },
  {
    "text": "we're not jumping ahead we're not even checking that the payload has anything we're just checking that the route exists this is kind of micro test style",
    "start": "1109520",
    "end": "1115280"
  },
  {
    "text": "of tdd where we write really small tests so now we don't have a get request in the controller so let's skip forward",
    "start": "1115280",
    "end": "1122000"
  },
  {
    "text": "again and we add a get request and so we're just returning okay because the test is not expecting anything from the",
    "start": "1122000",
    "end": "1127679"
  },
  {
    "text": "payload yet so we're not going to ask anything of it but at least now this test will pass it's always the question",
    "start": "1127679",
    "end": "1134200"
  },
  {
    "text": "my I ask when I start to write some code what test is confirming that I need this code before I used to do tdd I was one",
    "start": "1134200",
    "end": "1141240"
  },
  {
    "text": "of those people who always like oh I can think of like 10 things that might happen in the future so I'm just going to take care of them now because it'll",
    "start": "1141240",
    "end": "1146320"
  },
  {
    "text": "save me time later guess how many of those 10 things were actually Ever Needed exactly and then guess how often",
    "start": "1146320",
    "end": "1154039"
  },
  {
    "text": "production releases were delayed because it was a bug one of those 10 things caused somewhere else in the system so how bad is it that you're delaying a",
    "start": "1154039",
    "end": "1159919"
  },
  {
    "text": "production release because of a bug in a piece of functionality that nobody even needs yet and this is one of the things I love about tdd is that it forces me to",
    "start": "1159919",
    "end": "1165760"
  },
  {
    "text": "be more um you know more precise um but a little bit more simple it just keeps the code simpler I'm not adding",
    "start": "1165760",
    "end": "1172280"
  },
  {
    "text": "complexity that isn't needed yet and to to add it I have to force myself to add a test and that little extra hurdle just",
    "start": "1172280",
    "end": "1178080"
  },
  {
    "text": "makes me question does this really need it is this really needed do I need it now so um we're going to add another",
    "start": "1178080",
    "end": "1187360"
  },
  {
    "text": "test now to assert that the response is there and the implementation now this is",
    "start": "1187360",
    "end": "1193159"
  },
  {
    "text": "another thing I often do when I'm doing tdd especially when I'm in this phase of like scaffolding up the application just",
    "start": "1193159",
    "end": "1198360"
  },
  {
    "text": "some hardcoded data we've got a registration process and we've got a retrieval process there's no persistence",
    "start": "1198360",
    "end": "1204159"
  },
  {
    "text": "yet so there's no way to carry the data from one to the other you could put like a static property on the controller and",
    "start": "1204159",
    "end": "1210559"
  },
  {
    "text": "I sometimes do that and the test passes but the point is I'm not going to leave it like this I'm just actually the only",
    "start": "1210559",
    "end": "1216240"
  },
  {
    "text": "reason I'm doing it this way is to check that my test is doing what I was expecting sometimes people think the",
    "start": "1216240",
    "end": "1221919"
  },
  {
    "text": "test just exists to test the code but when you're doing tdd the code exists to confirm that the test works and then the",
    "start": "1221919",
    "end": "1227880"
  },
  {
    "text": "test exists to support your refactoring and that's the reason you split it between the simple implementation and",
    "start": "1227880",
    "end": "1233280"
  },
  {
    "text": "the refactoring phase so enough uh test here now I do",
    "start": "1233280",
    "end": "1239039"
  },
  {
    "text": "want a test to force me to do some persistence I'm not just going to add one student I'm going to add two students I'm going to request them by ID",
    "start": "1239039",
    "end": "1244840"
  },
  {
    "text": "and I expect to get different results back obviously this code is not going to pass when I add that test um to support",
    "start": "1244840",
    "end": "1251159"
  },
  {
    "text": "doing that I'm going to parameterize the test so I make it a theory instead of a fact with some inline data of the test",
    "start": "1251159",
    "end": "1257679"
  },
  {
    "text": "student um and at the moment it's just the same test so I've done some refactoring on the test side uh that",
    "start": "1257679",
    "end": "1264080"
  },
  {
    "text": "should still pass and then I'm going to add a test to just add you know test",
    "start": "1264080",
    "end": "1269159"
  },
  {
    "text": "student and another student and of course now that is going to fail because you can guess why I",
    "start": "1269159",
    "end": "1277000"
  },
  {
    "text": "expected another student but I got back to a student because of the hardcoded value and now the next step it is a",
    "start": "1277000",
    "end": "1282799"
  },
  {
    "text": "little bit of a chunky piece of work um and this is part of why it's nice to have done all that other work in advance",
    "start": "1282799",
    "end": "1289200"
  },
  {
    "text": "and have it locked in with test checking it because now I'm adding a DB context I'm actually adding some persistence um",
    "start": "1289200",
    "end": "1296000"
  },
  {
    "text": "call it the university context at the moment we just have a DB set for students and we can now when we register",
    "start": "1296000",
    "end": "1302720"
  },
  {
    "text": "the student we add it to the context save the changes and then when we're getting it we're retrieving from the persistence um it's all configured to",
    "start": "1302720",
    "end": "1310320"
  },
  {
    "text": "use the in-memory database so these tests are still pretty quick uh and now we're test is passing so we're actually getting the right student uh I'm going",
    "start": "1310320",
    "end": "1317240"
  },
  {
    "text": "to do a little bit of refactoring because I think the things should probably be async or weight um test",
    "start": "1317240",
    "end": "1322799"
  },
  {
    "text": "should still pass you can see here why testing at the",
    "start": "1322799",
    "end": "1329400"
  },
  {
    "text": "boundary of the application is quite nice because I'm actually testing the publicly exposed capability I could be",
    "start": "1329400",
    "end": "1336480"
  },
  {
    "text": "testing a Go app with these same test scripts I could be testing a node.js app with these same test scripts because I'm just interacting over",
    "start": "1336480",
    "end": "1343080"
  },
  {
    "text": "HTTP might be a little bit different because I'm leveraging the web application Factory which actually loads up the net application in the the same",
    "start": "1343080",
    "end": "1348960"
  },
  {
    "text": "process as the tests but in theory just by changing the way that factory works and and changing the client to be a real",
    "start": "1348960",
    "end": "1354520"
  },
  {
    "text": "web client I could be testing any application with the same scripts and so I actually quite like this because you",
    "start": "1354520",
    "end": "1359640"
  },
  {
    "text": "can you can put in a configuration uh so that you can run these tests against the inmemory version of the app on your box",
    "start": "1359640",
    "end": "1365840"
  },
  {
    "text": "and maybe during the build stage on your CI but then you can just flick a configuration parameter run exactly the same scripts against your hosted version",
    "start": "1365840",
    "end": "1372400"
  },
  {
    "text": "in your Dev environment or your staging environment with the exactly the same expectations of behavior",
    "start": "1372400",
    "end": "1379200"
  },
  {
    "text": "so now I'm going to start making the tests a little bit simpler because they've gotten a bit complex um I'm",
    "start": "1379200",
    "end": "1384520"
  },
  {
    "text": "going to introduce like a student API like an SDK style thing which is going to extract and encapsulate a few methods",
    "start": "1384520",
    "end": "1390279"
  },
  {
    "text": "so registering a student that's a couple of lines of code and I'm know I'm going to be doing that a lot so we'll put that in a register student method which um",
    "start": "1390279",
    "end": "1397600"
  },
  {
    "text": "posts uh does the post async and then does the read from response um and it get student method that encapsulates",
    "start": "1397600",
    "end": "1404159"
  },
  {
    "text": "that interaction and then um now that we have",
    "start": "1404159",
    "end": "1409240"
  },
  {
    "text": "a get action one of the nice things we can do in the controller is change it to use created at action instead of just created and reference the action so I",
    "start": "1409240",
    "end": "1416039"
  },
  {
    "text": "don't have to hand code the route or the the path of the of the API method um in",
    "start": "1416039",
    "end": "1421880"
  },
  {
    "text": "multiple places test should all still be passing because I just been doing a little bit of refactoring you you'll notice when I do refactoring and I do",
    "start": "1421880",
    "end": "1427760"
  },
  {
    "text": "refactor the tests I never refactor the tests and the code at the same time because they're mutually supporting each",
    "start": "1427760",
    "end": "1433559"
  },
  {
    "text": "other so if I refactor the tests and a test starts failing when I haven't changed the code I can be pretty confident that it's something just in",
    "start": "1433559",
    "end": "1439400"
  },
  {
    "text": "the test that needs fixing and vice versa um we have a scenario now where I",
    "start": "1439400",
    "end": "1446760"
  },
  {
    "text": "can add a test that's going to fail again um for a scenario that you know didn't think of to start with which is if I'm going to be requesting a student",
    "start": "1446760",
    "end": "1454880"
  },
  {
    "text": "that doesn't exist so I'm requesting with the wrong ID get student with wrong ID it should come back with um not found",
    "start": "1454880",
    "end": "1462640"
  },
  {
    "text": "now the reason this test fails is because I haven't handled that scenario explicitly and so what I'm actually going to get is an exception",
    "start": "1462640",
    "end": "1469200"
  },
  {
    "text": "now one challenge with this way of writing the test is that the um the test is not very sorry the test result is not",
    "start": "1469200",
    "end": "1475640"
  },
  {
    "text": "very helpful it just tells me it can't pass the Json if you did inspect the Json you would see the exception uh that was bubbled up um but because I'm doing",
    "start": "1475640",
    "end": "1483000"
  },
  {
    "text": "this sort of micro test I actually have a pretty good expectation of what's going to happen I expected the test to pass sorry to fail uh I kind of knew why",
    "start": "1483000",
    "end": "1490159"
  },
  {
    "text": "it was going to fail so when I see it go red that matches my expectation I'm reasonably happy um and then I can uh in",
    "start": "1490159",
    "end": "1497600"
  },
  {
    "text": "the controller add the um scenario for it well if it's null I",
    "start": "1497600",
    "end": "1503120"
  },
  {
    "text": "going to do a not found and if it's there then I do an okay so now we're getting back the proper HTTP status code",
    "start": "1503120",
    "end": "1508760"
  },
  {
    "text": "um for this situation um I'm going to that's kind of it for",
    "start": "1508760",
    "end": "1515039"
  },
  {
    "text": "the student now we're creating a student we're retrieving a student the whole persistance story around the student is working um didn't take very long even",
    "start": "1515039",
    "end": "1521960"
  },
  {
    "text": "with writing those tests and doing that sort of tick tock uh red green um but I'm going to start moving on to some",
    "start": "1521960",
    "end": "1527760"
  },
  {
    "text": "other uh things like the course and the room now um so I've moved the student",
    "start": "1527760",
    "end": "1533480"
  },
  {
    "text": "logic into this students folder this is also something that sometimes people find a bit strange when you've been guided oh ports an adapter you know this",
    "start": "1533480",
    "end": "1540720"
  },
  {
    "text": "kind of structure you should have all your domain models over here and all your controllers over there I actually really like especially for a simple",
    "start": "1540720",
    "end": "1546240"
  },
  {
    "text": "application like this the vertical slice architecture which kind of recommends keeping everything to do with the domain",
    "start": "1546240",
    "end": "1551440"
  },
  {
    "text": "Concept in the one place it's still layered like I I've I've separated some stuff into this student class and I've",
    "start": "1551440",
    "end": "1557520"
  },
  {
    "text": "separated out the concern of handling the HT the HTTP interaction into this",
    "start": "1557520",
    "end": "1562799"
  },
  {
    "text": "which you might consider the adapter uh in this interaction but my primary organizing principle in the code is the",
    "start": "1562799",
    "end": "1568320"
  },
  {
    "text": "domain concern not the technical concern doesn't mean that I'm not still keeping separate the technical concerns within",
    "start": "1568320",
    "end": "1574840"
  },
  {
    "text": "that primary organizing principle it just becomes a secondary organizing principle not the primary one because I",
    "start": "1574840",
    "end": "1579880"
  },
  {
    "text": "used to find when I had like a controllers folder and a domain models folder and like a persistence folder",
    "start": "1579880",
    "end": "1585799"
  },
  {
    "text": "whenever I had a change to that domain model I was changing like scatter my changes were scattered all over the code base and now when I changed to a student",
    "start": "1585799",
    "end": "1592600"
  },
  {
    "text": "they're all just in that one folder it's easy to find um easy to do um and so we've done the same thing",
    "start": "1592600",
    "end": "1599880"
  },
  {
    "text": "on the student test side just move everything into the into a students's folder and this is in preparation for starting to do some other things now I'm",
    "start": "1599880",
    "end": "1605440"
  },
  {
    "text": "going to skip through the next uh chunk of changes pretty quickly because we just you know in reality we're going to go through that exact same process for",
    "start": "1605440",
    "end": "1612080"
  },
  {
    "text": "the other entities in our system for the courses and the rooms um so we're starting a test for setting up a new",
    "start": "1612080",
    "end": "1617600"
  },
  {
    "text": "room um I'm just going to skip through all this because I don't think it adds too much to the explanation um it's",
    "start": "1617600",
    "end": "1623840"
  },
  {
    "text": "pretty much exactly the same with the same kind of refactors um location header making sure",
    "start": "1623840",
    "end": "1630440"
  },
  {
    "text": "the room is set up the only thing that might be interesting to have a look at is um when we're looking at the room",
    "start": "1630440",
    "end": "1636080"
  },
  {
    "text": "tests uh we've got that definition of a room a physical",
    "start": "1636080",
    "end": "1641360"
  },
  {
    "text": "space that a course can be delivered in as soon as it has a physical size has a limited capacity uh who can attend a course in the room and we call it",
    "start": "1641360",
    "end": "1647440"
  },
  {
    "text": "setting up a room that's the verb that we've um decided to use here rather than create process of defining a new room",
    "start": "1647440",
    "end": "1653080"
  },
  {
    "text": "that's available at the University usually only done once when the university is setting up the system uh but may be done if they reconfigure",
    "start": "1653080",
    "end": "1658320"
  },
  {
    "text": "their layouts so starting to think about like the domain concerns involved in the room um skip through a few more we'll",
    "start": "1658320",
    "end": "1666240"
  },
  {
    "text": "get to courses shortly we've added room",
    "start": "1666240",
    "end": "1673720"
  },
  {
    "text": "persistance here we go starting to add a course now the domain terminology we've used here is including it in the catalog",
    "start": "1673720",
    "end": "1681799"
  },
  {
    "text": "so given I'm an admin when I include a new course in the catalog so again I'm not using Create I'm not using crud",
    "start": "1681799",
    "end": "1687679"
  },
  {
    "text": "terminology I'm thinking about what what's the admin thinking like what the course exists maybe they've spoken to",
    "start": "1687679",
    "end": "1693519"
  },
  {
    "text": "the professor and they've constructed the course they said I've got this great new course um but it's not available for students to register yet uh why not",
    "start": "1693519",
    "end": "1700200"
  },
  {
    "text": "because we haven't included in the catalog so that it's actually what we're doing here is the process of including the course in the catalog for the",
    "start": "1700200",
    "end": "1705360"
  },
  {
    "text": "students to choose when they're when they're enrolling um all of these things have disappeared because we did move",
    "start": "1705360",
    "end": "1711200"
  },
  {
    "text": "them into a sub folder so I'll just close everything there um yeah so you can start to see that language it should include the course in the catalog which",
    "start": "1711200",
    "end": "1717200"
  },
  {
    "text": "again is just testing at the moment the created status that code and then there'll be other tests to assert that it confirms the details and it tells me",
    "start": "1717200",
    "end": "1723120"
  },
  {
    "text": "where to find the course and all those little things that sometimes you take for granted but actually quite important especially if you're building an API",
    "start": "1723120",
    "end": "1729159"
  },
  {
    "text": "that's going to be integrated with by third party um you don't want to change any of that stuff it could break the consumer of your API",
    "start": "1729159",
    "end": "1737240"
  },
  {
    "text": "um we're ending up with some similar kind of patterns here in the courses uh course controller of course",
    "start": "1740200",
    "end": "1747240"
  },
  {
    "text": "including catalog just realized I have no",
    "start": "1747240",
    "end": "1753600"
  },
  {
    "text": "visibility of a clock right at the minute so I'm just going to pull this out and make sure that I don't completely miss the time here um okay",
    "start": "1753600",
    "end": "1763518"
  },
  {
    "text": "so we are here we go this is a new thing so this is actually where I wanted to get to unlike all the others which is",
    "start": "1771519",
    "end": "1777640"
  },
  {
    "text": "really simple create operations from a persistence perspective but obviously had different domain things we're registering a student we're setting up a",
    "start": "1777640",
    "end": "1783840"
  },
  {
    "text": "room we're including a course in the catalog um now we need to do something a little bit more tricky which is we're",
    "start": "1783840",
    "end": "1789600"
  },
  {
    "text": "starting to set up some relationships between them in the course tests we are",
    "start": "1789600",
    "end": "1795399"
  },
  {
    "text": "um going to be asserting that we can uh include a the room is alloc sorry",
    "start": "1795399",
    "end": "1804039"
  },
  {
    "text": "the course is allocated to a room um sorry the uh test the course can be",
    "start": "1804039",
    "end": "1812399"
  },
  {
    "text": "linked to a",
    "start": "1812399",
    "end": "1814880"
  },
  {
    "text": "room here we go it should confirm the course details asserts that the room name is correct um and the the room ID",
    "start": "1818320",
    "end": "1825760"
  },
  {
    "text": "of the so sorry the name of the course is correct and the room ID allocated to the uh course is correct as well so",
    "start": "1825760",
    "end": "1831440"
  },
  {
    "text": "we're if we go to the implementation including catalog it's",
    "start": "1831440",
    "end": "1838840"
  },
  {
    "text": "going to show us here it doesn't do it yet because I've added the test and of course it's going",
    "start": "1838840",
    "end": "1844919"
  },
  {
    "text": "to pass sorry it's going to fail because we haven't implemented it yet uh so the next step will be to change this to",
    "start": "1844919",
    "end": "1851600"
  },
  {
    "text": "allocate the room ID from the request data so I'm doing a really simple thing here which is we're just putting a goid property uh on the course for the room",
    "start": "1851600",
    "end": "1858279"
  },
  {
    "text": "ID um some people might think oh using any framework why aren't you using a virtual related entity um and we'll have",
    "start": "1858279",
    "end": "1864360"
  },
  {
    "text": "a look at that in a second but like I said the simplest implementation is what we start with so we just put a room ID property on there and just set that and",
    "start": "1864360",
    "end": "1871240"
  },
  {
    "text": "now when we retrieve the course we can check what room is it um allocated to there we",
    "start": "1871240",
    "end": "1879480"
  },
  {
    "text": "go so we have to do add some Edge case tests for when the room ID is not specified um so it's like some input",
    "start": "1880320",
    "end": "1886720"
  },
  {
    "text": "validation um and what is that going to look like in the course controller",
    "start": "1886720",
    "end": "1894200"
  },
  {
    "text": "um and test for an Unown room ID so now we're going to check does the",
    "start": "1895159",
    "end": "1900919"
  },
  {
    "text": "room exist if we are deciding that we're going to include",
    "start": "1900919",
    "end": "1906120"
  },
  {
    "text": "a course in the catalog we're going to check that the room that the course is trying to be linked to actually exists",
    "start": "1906120",
    "end": "1911399"
  },
  {
    "text": "and if not we get a bad request so just some basic now of a su just some validation not just of the entity itself",
    "start": "1911399",
    "end": "1917159"
  },
  {
    "text": "but of the relationship ship that it should have um with other parts of the",
    "start": "1917159",
    "end": "1922519"
  },
  {
    "text": "system now there's a I'm going to go back and",
    "start": "1925960",
    "end": "1931080"
  },
  {
    "text": "forwards here because I want to show this um a little bit here we've got a check here we look for",
    "start": "1931080",
    "end": "1938720"
  },
  {
    "text": "the room and we say if room is null bad request and then we go on with the rest of the logic now that's fine and it",
    "start": "1938720",
    "end": "1944480"
  },
  {
    "text": "works but I've sort of said that including in the catalog is the method that should encapsulate the process so",
    "start": "1944480",
    "end": "1950200"
  },
  {
    "text": "if this is a business rule shouldn't I try and put it into that method and so",
    "start": "1950200",
    "end": "1955559"
  },
  {
    "text": "just to reshow you what that looks like we're going to change the including catalog method now to take in the room",
    "start": "1955559",
    "end": "1961639"
  },
  {
    "text": "so we're going to retrieve the room which might be null and we're going to go into the including catalog method and now we're going to check in here if the",
    "start": "1961639",
    "end": "1967279"
  },
  {
    "text": "room is not because this is a is a business check I mean it's a bit annoying to be asking if the room is",
    "start": "1967279",
    "end": "1972600"
  },
  {
    "text": "null that doesn't mean anything it' be nice if you say does the room exist that might be or has the room been set up that might be a bit cleaner um but some",
    "start": "1972600",
    "end": "1980120"
  },
  {
    "text": "people say well you've just you've now got two if statements because you've got an if statement here you're checking the result of that operation is null so that",
    "start": "1980120",
    "end": "1986039"
  },
  {
    "text": "you know whether to do a bad request so is it really worth that effort of pushing the business logic down into the",
    "start": "1986039",
    "end": "1991080"
  },
  {
    "text": "domain model um when you still have to do a check at this adapter layer in the controller and I think the answer is yes",
    "start": "1991080",
    "end": "1997039"
  },
  {
    "text": "because there's a difference between this if statement and the other if statement the if statement inside including catalog represents a business",
    "start": "1997039",
    "end": "2003159"
  },
  {
    "text": "rule this statement here represents a decision how to represent that business rule over an HTTP response it's the bad",
    "start": "2003159",
    "end": "2010039"
  },
  {
    "text": "request thing bad request is specific to the fact that we're doing a rest API but including catalog this rule exists",
    "start": "2010039",
    "end": "2016480"
  },
  {
    "text": "whether or not we're doing this over a rest API or a graphql API or any other kind of API so yes I've got two but one",
    "start": "2016480",
    "end": "2023000"
  },
  {
    "text": "is about the business rule and the other is about how to represent that business rule at the boundary and the other thing that's quite nice here is that this is a",
    "start": "2023000",
    "end": "2030240"
  },
  {
    "text": "result of a series of operations if I add more business rules course is always going to be null that's kind of the",
    "start": "2030240",
    "end": "2036960"
  },
  {
    "text": "indicator this is actually not a business rule if I was going to add more reasons to not include it in the catalog and I put them into that including",
    "start": "2036960",
    "end": "2043039"
  },
  {
    "text": "catalog method the outcome will be that the course is is undefined so this will actually never change as I add more",
    "start": "2043039",
    "end": "2049200"
  },
  {
    "text": "business rules and that's kind of an indicator that this is actually a a worthwhile structure to",
    "start": "2049200",
    "end": "2055358"
  },
  {
    "text": "adopt um so we're doing a bit more encapsulation",
    "start": "2056240",
    "end": "2061839"
  },
  {
    "text": "and going add a test about um if there's an unknown uh course ID in the retrieval",
    "start": "2061839",
    "end": "2067480"
  },
  {
    "text": "that should should be a 404 it's kind of the same thing that we had before um not",
    "start": "2067480",
    "end": "2074118"
  },
  {
    "text": "found now as I said before sometimes you might",
    "start": "2078240",
    "end": "2083720"
  },
  {
    "text": "go well why using entity Frameworks capabilities to sort of store the room directly and actually you can do that",
    "start": "2083720",
    "end": "2089200"
  },
  {
    "text": "and so we've just done that as a refactor and again the tests are now still passing so it kind of highlights because I didn't change any tests then I",
    "start": "2089200",
    "end": "2096280"
  },
  {
    "text": "only changed the implementation between storing a room ID and storing a virtual related entity It's actually an",
    "start": "2096280",
    "end": "2102560"
  },
  {
    "text": "implementation detail so I can change that quite I can do that refactor none of my tests have changed um and I can",
    "start": "2102560",
    "end": "2109400"
  },
  {
    "text": "decide either way how do I want the system to work it's irrelevant from the perspective of the public specification of how the system works because you",
    "start": "2109400",
    "end": "2115560"
  },
  {
    "text": "can't return the related entity over the API you do just return an ID usually sometimes you might put a nested entity or if you're doing like proper hatos you",
    "start": "2115560",
    "end": "2122040"
  },
  {
    "text": "might put a a real link to the room thing we're not going to worry about that for for this demo um",
    "start": "2122040",
    "end": "2129520"
  },
  {
    "text": "but yeah so now we're going to start testing the enrollment process this is kind of one of the really uh meaty parts of it because this is where the",
    "start": "2129520",
    "end": "2135280"
  },
  {
    "text": "constraint comes in we've now got courses with capacities we got rooms linked to courses we got students now",
    "start": "2135280",
    "end": "2140400"
  },
  {
    "text": "we're going to tie them together through the enrollment process so similar to before we've got enrolling tests um",
    "start": "2140400",
    "end": "2148000"
  },
  {
    "text": "we're going to do a few things here set up a room include a course in the catalog now our room request has a",
    "start": "2148000",
    "end": "2154000"
  },
  {
    "text": "capacity of five and we're only registering one student so it should pass now as you can probably guess now",
    "start": "2154000",
    "end": "2161280"
  },
  {
    "text": "I'm not going to immediately jump into implementing that restriction rule I'm going to do a bunch of basic stuff to build up the scaffolding first but one",
    "start": "2161280",
    "end": "2167880"
  },
  {
    "text": "really important point is that if you are implementing a test and the test uh is you know just for something small but",
    "start": "2167880",
    "end": "2175000"
  },
  {
    "text": "you know that this test is going to need to continue to pass into the future the scenario construct should still be one",
    "start": "2175000",
    "end": "2180800"
  },
  {
    "text": "that's consistent with how the rules are going to work once you've completed building the system does that make sense so even though right now I could build",
    "start": "2180800",
    "end": "2187119"
  },
  {
    "text": "this with a capacity of zero and the test would pass that's giv me a false sense of confidence because once I implement the capacity check rule if I",
    "start": "2187119",
    "end": "2194160"
  },
  {
    "text": "did a capacity of zero this said this test would start failing so I always want to make sure that I've designed the",
    "start": "2194160",
    "end": "2199480"
  },
  {
    "text": "test so that it is it is a fact it's always going to be true whether or not I've completed the",
    "start": "2199480",
    "end": "2204800"
  },
  {
    "text": "implementation the fact that I'm only asserting on the created status code means that I'm only prompted to do a",
    "start": "2204800",
    "end": "2210599"
  },
  {
    "text": "very minimal amount of implementation but I should be confident that as I continue working uh I'm not going to",
    "start": "2210599",
    "end": "2216160"
  },
  {
    "text": "break this test so so let's add now an enrolling controller and much like before it's pretty straightforward we're",
    "start": "2216160",
    "end": "2222079"
  },
  {
    "text": "just retuning the created status code so let's skip a little bit ahead uh",
    "start": "2222079",
    "end": "2229920"
  },
  {
    "text": "sorry skip ahead a little bit further I'm going to add the enrollment term the definitions file um successful",
    "start": "2229920",
    "end": "2236240"
  },
  {
    "text": "enrollment setting an enrollment ID add a test to confirm the student ID is",
    "start": "2236240",
    "end": "2241400"
  },
  {
    "text": "confirmed in the enrollment uh pass the student ID back in the enrollment uh add",
    "start": "2241400",
    "end": "2246760"
  },
  {
    "text": "a test to confirm the the course ID is confirmed in the enrollment and then pass that back so literally every tiny little field change is done with a test",
    "start": "2246760",
    "end": "2252839"
  },
  {
    "text": "and an implementation add a test for an unknown student ID not showing all these details because we're about to get to",
    "start": "2252839",
    "end": "2258160"
  },
  {
    "text": "something far more interesting add an implementation for the student ID before attempting to enroll test for unknown",
    "start": "2258160",
    "end": "2264200"
  },
  {
    "text": "course ID I might just show what's starting to happen here is we're ending up with a bit of structure here validating that student exists",
    "start": "2264200",
    "end": "2270560"
  },
  {
    "text": "validating the course exist before we construct the uh enrollment I need to slide this up so I",
    "start": "2270560",
    "end": "2277800"
  },
  {
    "text": "can see the git log test location",
    "start": "2277800",
    "end": "2283400"
  },
  {
    "text": "header test for checking the enrollment now we're going to be saving",
    "start": "2283400",
    "end": "2290318"
  },
  {
    "text": "it 's credit action add a test for a failing enrollment if the course is full",
    "start": "2291000",
    "end": "2296599"
  },
  {
    "text": "so now we've hit the meat and potatoes of the system this is really the whole reason we're building it to constrain this capacity so we now have a test um",
    "start": "2296599",
    "end": "2304599"
  },
  {
    "text": "in the enrolling process uh there'll be a new one down the bottom",
    "start": "2304599",
    "end": "2310040"
  },
  {
    "text": "here so uh no wrong student ID sorry um check my enrollment given the course I want is",
    "start": "2310040",
    "end": "2317079"
  },
  {
    "text": "full when I enroll in a course so it's kind of pretty cleanly articulates like a business person could read that test",
    "start": "2317079",
    "end": "2322839"
  },
  {
    "text": "and understand what you're trying to to get out here so of course we set up a",
    "start": "2322839",
    "end": "2327920"
  },
  {
    "text": "room with a capacity of three we complete three registrations enroll the student in the course enroll the student so now we've got a course that should be",
    "start": "2327920",
    "end": "2334560"
  },
  {
    "text": "full and we do the final enrollment here and we say it should not enroll me uh",
    "start": "2334560",
    "end": "2339599"
  },
  {
    "text": "and it should include errors around y so of course this is going to fail because it will enroll you we haven't",
    "start": "2339599",
    "end": "2345079"
  },
  {
    "text": "implemented that check yet so the completion uh so this test is failing because that fourth students enrollment",
    "start": "2345079",
    "end": "2350640"
  },
  {
    "text": "is going to go ahead now but now we've got the structure in place we've got tests that validate all the other stuff we've got the controller and the and the",
    "start": "2350640",
    "end": "2356720"
  },
  {
    "text": "various behaviors there uh and so now we can go on and do the implementation there in the um enrollment controller",
    "start": "2356720",
    "end": "2363319"
  },
  {
    "text": "and we're going to start with just a really naive implementation we're going to check that we do a count async of the",
    "start": "2363319",
    "end": "2369280"
  },
  {
    "text": "enrollments that match that course ID we say if the number of enrollments plus one exceeds the room capacity I'm going",
    "start": "2369280",
    "end": "2376240"
  },
  {
    "text": "to respond with a bad request if you saw this code you would go you're not doing DDD this is terrible",
    "start": "2376240",
    "end": "2383280"
  },
  {
    "text": "why L business logic in the controller of course but it's just the first simple implementation to get it to pass because",
    "start": "2383280",
    "end": "2388800"
  },
  {
    "text": "I haven't yet got a structure that gives me like a a quite NE neat way of expressing this in the in the language",
    "start": "2388800",
    "end": "2394480"
  },
  {
    "text": "of the business this is starting to get a little bit better I've put a method on the room",
    "start": "2394480",
    "end": "2401280"
  },
  {
    "text": "instead of having that plus one here I now put a method would the enrollment exceed the capacity so it's a property",
    "start": "2401280",
    "end": "2406800"
  },
  {
    "text": "of the room you pass in the current number of enrollments to the room and you say would the enrollment exceed the",
    "start": "2406800",
    "end": "2412599"
  },
  {
    "text": "capacity so we starting to put some domain language around the check uh and use that domain language from the",
    "start": "2412599",
    "end": "2417800"
  },
  {
    "text": "controller so that's getting a little bit better but this is what I would love to do I would love to be able to just say",
    "start": "2417800",
    "end": "2423720"
  },
  {
    "text": "course. enroll student that is just literally saying enroll a student in the course that's",
    "start": "2423720",
    "end": "2429560"
  },
  {
    "text": "starting to say the code reads like a human describing what the process should be I can't do that at the moment because",
    "start": "2429560",
    "end": "2436319"
  },
  {
    "text": "I need to do this query to check the number of enrollments but as I hinted at before when you use anyti framework and",
    "start": "2436319",
    "end": "2441880"
  },
  {
    "text": "you can have uh sort of virtual lazy loaded properties and lazy loaded collections you can actually do this so let's look what happens if we do a",
    "start": "2441880",
    "end": "2447960"
  },
  {
    "text": "little bit more refactoring um we start to move to using a lazy loaded reference properties for",
    "start": "2447960",
    "end": "2453240"
  },
  {
    "text": "the enrollments and courses haven't changed this yet but if we have a look we don't have a course ID so I have to",
    "start": "2453240",
    "end": "2458359"
  },
  {
    "text": "close that because I did some changes to it uh pick up the enrolling controller",
    "start": "2458359",
    "end": "2464599"
  },
  {
    "text": "um and we can actually do that now course enroll students so let's look at what that looks like well enrollments",
    "start": "2464599",
    "end": "2471640"
  },
  {
    "text": "count because the course has in an virtual IR numerable of the linked",
    "start": "2471640",
    "end": "2476920"
  },
  {
    "text": "enrollments so we can get the count straight away and if the count plus one exceeds the room capacity uh we return",
    "start": "2476920",
    "end": "2483079"
  },
  {
    "text": "null so we're using a related reference to the room so the course is link to a room and it's also linked to all the",
    "start": "2483079",
    "end": "2488599"
  },
  {
    "text": "enrollments in that course so we can ask the room uh what's Your Capacity and we can check the count of the enrollments",
    "start": "2488599",
    "end": "2494920"
  },
  {
    "text": "all within the domain model using that virtual lazy loaded um property which sounds really nice Yeah question lazy",
    "start": "2494920",
    "end": "2505040"
  },
  {
    "text": "Lo um I think for the purpose of what I'm demoing here it's kind of irrelevant um we are going to get rid of this in a",
    "start": "2509160",
    "end": "2516240"
  },
  {
    "text": "minute but for other reasons um so I'll show you in a second um sorry the",
    "start": "2516240",
    "end": "2522280"
  },
  {
    "text": "question for if you couldn't hear on the mic was that lazy loading is a synchronous request as you saw before I've made most of the other requests",
    "start": "2522280",
    "end": "2527800"
  },
  {
    "text": "asynchronous so is that a concern uh look in some situations it might be but not really relevant for the purpose of",
    "start": "2527800",
    "end": "2533480"
  },
  {
    "text": "what we're doing here today the main thing I want to focus on is that by doing this it's allowed me to encapsulate all of the rules in a way",
    "start": "2533480",
    "end": "2540000"
  },
  {
    "text": "that's kind of um ignorant to the uh the way that we've done persistence to be honest like this class doesn't know how",
    "start": "2540000",
    "end": "2547480"
  },
  {
    "text": "the P it doesn't know how lazy loading work it doesn't know whether it's lazy loaded we could do Eagle loading we could go and update the way we retrieve",
    "start": "2547480",
    "end": "2553160"
  },
  {
    "text": "the enrollment and do Eagle loading in that asynchronous request but the business rule doesn't care it's encapsulated within this um with within",
    "start": "2553160",
    "end": "2560440"
  },
  {
    "text": "this class but there is a problem and it's a",
    "start": "2560440",
    "end": "2567440"
  },
  {
    "text": "a more subtle one we start maybe now we go hey this is great we've implemented the constraint",
    "start": "2567440",
    "end": "2573680"
  },
  {
    "text": "system can go live let's launch it we go live people start using it and we have professors coming back saying I said I",
    "start": "2573680",
    "end": "2579880"
  },
  {
    "text": "could only have 20 students in this class and I had 21 students show up what's going on your system is broken",
    "start": "2579880",
    "end": "2585880"
  },
  {
    "text": "and it takes you a while to work it out but you realize that there's a race condition yeah um Nick spotted it straight away so",
    "start": "2585880",
    "end": "2593520"
  },
  {
    "text": "if we go into the enrollment uh tests what I've done here is I've added a test to validate that so you know sort of",
    "start": "2593520",
    "end": "2599160"
  },
  {
    "text": "skipping through a lot of things we've done some checking we've done some log analysis and we've worked out that two students are enrolling at the same time",
    "start": "2599160",
    "end": "2606160"
  },
  {
    "text": "and that's when it crosses the capacity because they're both issuing a request for the current count before they've",
    "start": "2606160",
    "end": "2612440"
  },
  {
    "text": "committed their completion of the enrollment so at the same time both of them say you've got a capacity of 20 you",
    "start": "2612440",
    "end": "2618680"
  },
  {
    "text": "get two students enroll and they issue a request they go both get back a count of 19 and they say I'm good to go and then",
    "start": "2618680",
    "end": "2624880"
  },
  {
    "text": "one completes and the other completes and all of a sudden now you've got 21 and that exceeds the capacity this is commonly known as a race condition and",
    "start": "2624880",
    "end": "2630680"
  },
  {
    "text": "you've got two concurrent requests that are racing each other for for the finish line so let me just the test that that does",
    "start": "2630680",
    "end": "2638640"
  },
  {
    "text": "this so we I wanted to construct a test to validate my hypothesis that this is what's going on and we've done that here",
    "start": "2638640",
    "end": "2643920"
  },
  {
    "text": "so we've set up uh a course with the capacity of three complete three enrollments and I have two um I register",
    "start": "2643920",
    "end": "2651920"
  },
  {
    "text": "two students and I go to enroll them at the same time now the way that I do the concurrency is that I don't await them",
    "start": "2651920",
    "end": "2657520"
  },
  {
    "text": "so I kick them off it's like fire and forget I'm not awaiting those requests in net I just save the tasks and then",
    "start": "2657520",
    "end": "2664480"
  },
  {
    "text": "when I do a task when all to say when both the tasks completed and then I await them now I know they're already completed so awaiting here just gives me",
    "start": "2664480",
    "end": "2671119"
  },
  {
    "text": "back um the results and then I can say it should not enroll me with errors on response 4 so let's see what happens",
    "start": "2671119",
    "end": "2677240"
  },
  {
    "text": "when I run this test and we get a failure now I've put in here in comments just so that we can",
    "start": "2677240",
    "end": "2683960"
  },
  {
    "text": "demonstrate quick quite quickly if I was to not do it uh in that concurrent",
    "start": "2683960",
    "end": "2691440"
  },
  {
    "text": "way bumped into the task um",
    "start": "2691960",
    "end": "2697200"
  },
  {
    "text": "comment out there so that was concurrent and this is synchronous so we're going to await for the third one and then await for the fourth one and now the",
    "start": "2697200",
    "end": "2703839"
  },
  {
    "text": "test will pass and this just sort of validates the hypothesis that okay if the students are all doing it one after",
    "start": "2703839",
    "end": "2708920"
  },
  {
    "text": "the other everything's fine but if we get two at the same time we have an",
    "start": "2708920",
    "end": "2713359"
  },
  {
    "text": "issue so what do you think we should do about this ship it ship",
    "start": "2714599",
    "end": "2721280"
  },
  {
    "text": "it just let the professors work for their money what's one more student yeah put another chair in the room that maybe",
    "start": "2721280",
    "end": "2727119"
  },
  {
    "text": "good ideas um when I'm doing with this talk to a sorry lock lock it yeah so I",
    "start": "2727119",
    "end": "2733839"
  },
  {
    "text": "was going to say when I do this talk to a crowd that does a lot of domain driven design I get a response back with is you",
    "start": "2733839",
    "end": "2738880"
  },
  {
    "text": "need an aggregate does anyone know what an aggregate is so in the field of demander and design an agre is a term",
    "start": "2738880",
    "end": "2745480"
  },
  {
    "text": "that's used to describe uh a boundary around a bunch of behavior and data that needs to be transactionally consistent",
    "start": "2745480",
    "end": "2751800"
  },
  {
    "text": "and so there's actually maybe a good candidate for uh saying that the there's an aggregate here around the enrollments",
    "start": "2751800",
    "end": "2757680"
  },
  {
    "text": "the count of the enrollments but this is kind of annoying right an aggregate is effectively a way",
    "start": "2757680",
    "end": "2763079"
  },
  {
    "text": "of locking you need to do optimistic locking or pessimistic locking to basically say I can't have two things",
    "start": "2763079",
    "end": "2768520"
  },
  {
    "text": "change this at one time it needs to be transactionally consistent within this boundary but the boundary as you see",
    "start": "2768520",
    "end": "2773599"
  },
  {
    "text": "it's not just the enrollment it's the count of enrollments so now I'm locking the whole system I can never let two",
    "start": "2773599",
    "end": "2779800"
  },
  {
    "text": "students enroll in the same course at the same time maybe I'm doing this for like a conference like NDC with 1600 100",
    "start": "2779800",
    "end": "2787480"
  },
  {
    "text": "registrations I'm pretty sure that when they went live with their ticket sales they would have got more than one thing at the same time and if I had to lock",
    "start": "2787480",
    "end": "2793240"
  },
  {
    "text": "that and stream all of those um ticket sales through a lock that would be a real limit to our scalability so one",
    "start": "2793240",
    "end": "2800079"
  },
  {
    "text": "thing that DDD prompts us to do is to say let's just interrogate our assumptions here yes we could strictly",
    "start": "2800079",
    "end": "2807000"
  },
  {
    "text": "speaking solve this problem with a lock we could use the aggregate patent to implement that lock uh or we could not",
    "start": "2807000",
    "end": "2812280"
  },
  {
    "text": "use the aggregate patent and just Implement some other locking technique um and that would be a technical solution to enforcing the rule that as",
    "start": "2812280",
    "end": "2819119"
  },
  {
    "text": "we understood it but one of the things I really love about DDD is it says maybe don't do that maybe go and have a",
    "start": "2819119",
    "end": "2825200"
  },
  {
    "text": "conversation with a human being and find out what's really going on here so I'm going to slide back to my um",
    "start": "2825200",
    "end": "2833040"
  },
  {
    "text": "presentation here so this is a really simplified example of what you might get if you did demain driven design event",
    "start": "2833040",
    "end": "2838599"
  },
  {
    "text": "storming at the start of the process instead of just drawing up a static entity relationship model like I had at",
    "start": "2838599",
    "end": "2843640"
  },
  {
    "text": "the very start if you did like a Time series model um of what's going on so we've got the room has been set up it's",
    "start": "2843640",
    "end": "2849160"
  },
  {
    "text": "a past tense setup course has been included in the catalog with a with a constraint there that it must be",
    "start": "2849160",
    "end": "2854440"
  },
  {
    "text": "allocated to a room and then later on the student registers and then they enroll in the course and the can't",
    "start": "2854440",
    "end": "2859839"
  },
  {
    "text": "overfill the room and now if you lay out the series of operations like this and you see what's happening over time you",
    "start": "2859839",
    "end": "2866200"
  },
  {
    "text": "can do this really neat thing called modeling with constraints which says let's look at these key constraints and let's see what happens if we move them",
    "start": "2866200",
    "end": "2872079"
  },
  {
    "text": "to different points in the system because when you talk to The Domain experts and they say what's going on why why is this system you've built so crap",
    "start": "2872079",
    "end": "2878280"
  },
  {
    "text": "Chris um and you say well you told me that you know the rooms have to be allocated to courses when you set up the",
    "start": "2878280",
    "end": "2883400"
  },
  {
    "text": "courses and so it's all set up there the way you wanted it and they say no that's that's not what we expected and so",
    "start": "2883400",
    "end": "2889720"
  },
  {
    "text": "finally you're having a conversation with them and you find out but you know what about the scenario where you think",
    "start": "2889720",
    "end": "2895520"
  },
  {
    "text": "that um you know in computer science 101 is going to be hugely popular so you allocate it to a room with 100 seats and",
    "start": "2895520",
    "end": "2902440"
  },
  {
    "text": "you know myths and legends of ancient Greece is not going to be popular so you allocate it to a room with seats and it",
    "start": "2902440",
    "end": "2907640"
  },
  {
    "text": "turns out that you were completely wrong because uh you know everyone's really interested in Zeus and Athena and",
    "start": "2907640",
    "end": "2913319"
  },
  {
    "text": "nobody's interested in computer science anymore so now you've got a room with 20 seats that is filling up really quickly",
    "start": "2913319",
    "end": "2918920"
  },
  {
    "text": "and lots of people on the wait list and you got a room with 100 seats that's only got like 30 people wanting to use it and 7 70 empty seats they're like",
    "start": "2918920",
    "end": "2925480"
  },
  {
    "text": "that's nonsense why would we want that why would we want 70 empty seats and so you start working through this problem with them and start exploring well what",
    "start": "2925480",
    "end": "2932040"
  },
  {
    "text": "are you actually trying to achieve here what are your goals well we want to maximize utilization of the rooms that we have and so you realize well the only",
    "start": "2932040",
    "end": "2938799"
  },
  {
    "text": "way we can maximize utilization is to find out how many people are interested in the course before we do the room",
    "start": "2938799",
    "end": "2944400"
  },
  {
    "text": "allocation so that phrase before we do the room allocation is an example of modeling with constraints it's about",
    "start": "2944400",
    "end": "2950440"
  },
  {
    "text": "moving the constraint around what has to happen first what can happen later so let's see um what could happen if we",
    "start": "2950440",
    "end": "2956920"
  },
  {
    "text": "come up with a different event model event storming outcome that says let's actually set up the room and include the",
    "start": "2956920",
    "end": "2962359"
  },
  {
    "text": "course in the catalog and not have a constraint that it's allocated to a room all allow students to register allow",
    "start": "2962359",
    "end": "2968040"
  },
  {
    "text": "them to enroll in a course and then run some scheduling allocation algorithm that will take the most popular courses",
    "start": "2968040",
    "end": "2974319"
  },
  {
    "text": "and assign them to the biggest rooms and that's when we enforce the overfill room constraint that constraint is real you",
    "start": "2974319",
    "end": "2980040"
  },
  {
    "text": "can't overfill the room the question is when do you enforce it do you enforce it at enrollment time or do you enforce it",
    "start": "2980040",
    "end": "2986000"
  },
  {
    "text": "later when you can do some sort of allocation algorithm and then eventually end up with now the courses are scheduled and allocated to the rooms and",
    "start": "2986000",
    "end": "2993359"
  },
  {
    "text": "you talk to The Domain experts and they go well duh like of of course that's how it should have worked and that's a",
    "start": "2993359",
    "end": "2999520"
  },
  {
    "text": "wonderful sign that you're doing domain driven design right when you suddenly have this Insight that says oh now the",
    "start": "2999520",
    "end": "3005359"
  },
  {
    "text": "domain experts are telling me something and it's finally making sense to me truth is they were probably telling you",
    "start": "3005359",
    "end": "3010440"
  },
  {
    "text": "this from the start but because you just went into it thinking hey this is simple I know what I'm doing I've got my Entity",
    "start": "3010440",
    "end": "3015599"
  },
  {
    "text": "framework entity relationship model I'm just going to build it um you kind of didn't pay attention to the subtle",
    "start": "3015599",
    "end": "3021040"
  },
  {
    "text": "nuances of the words that they were using and the and what was important to them and so if you're doing DDD you do pay attention to that stuff you pay",
    "start": "3021040",
    "end": "3027200"
  },
  {
    "text": "attention to it right from the start it doesn't say do massive big upfront design it doesn't say solve every",
    "start": "3027200",
    "end": "3032559"
  },
  {
    "text": "problem right for the beginning it just says give a about what's important to your users pay attention to the way",
    "start": "3032559",
    "end": "3038200"
  },
  {
    "text": "they talk and care about um you know the outcomes that they're trying to achieve",
    "start": "3038200",
    "end": "3043359"
  },
  {
    "text": "and in this case an outcome was effective utilization of the resources that they have it wasn't just enforcing",
    "start": "3043359",
    "end": "3048839"
  },
  {
    "text": "the constraint that the room can't be full so you've built this system you go well now I'm going to have to change it all but of course you don't have to",
    "start": "3048839",
    "end": "3054799"
  },
  {
    "text": "change all of it and luckily because we've been doing tddd we've got really strong protection against accidental um",
    "start": "3054799",
    "end": "3060400"
  },
  {
    "text": "mistakes so we can actually fix this really easily so let's back to back to the code I'm going to strip out this uh",
    "start": "3060400",
    "end": "3067520"
  },
  {
    "text": "test to do the concurrency check because we don't need it anymore and I'm going to go through a series of steps to",
    "start": "3067520",
    "end": "3072960"
  },
  {
    "text": "unwind some of the functionality that we introduced now there's a really subtle aspect of tdd that a lot of people miss",
    "start": "3072960",
    "end": "3080599"
  },
  {
    "text": "everyone knows it's red greeny factor and actually that's the most important thing some people think it's right test",
    "start": "3080599",
    "end": "3087280"
  },
  {
    "text": "make it pass refactor I submit that it's more important to do red green refactor",
    "start": "3087280",
    "end": "3092359"
  },
  {
    "text": "than it is to say write a test make it pass because sometimes you're removing functionality and when you're removing",
    "start": "3092359",
    "end": "3098839"
  },
  {
    "text": "functionality how do you make the test go red you removed the functionality if you",
    "start": "3098839",
    "end": "3104880"
  },
  {
    "text": "removed the test first your test would still be green you would have skipped that red step so if you if you think",
    "start": "3104880",
    "end": "3111480"
  },
  {
    "text": "about tdd as just touch the tests touch the code you're missing the point of why",
    "start": "3111480",
    "end": "3116680"
  },
  {
    "text": "it's red first red first is saying I've made a change which is counter to the",
    "start": "3116680",
    "end": "3122119"
  },
  {
    "text": "expectations of one side of this relationship that tells me that that change is the change I intended to make",
    "start": "3122119",
    "end": "3129680"
  },
  {
    "text": "and then I have to balance it on the other side and if you say I'm removing some capability from my system and you",
    "start": "3129680",
    "end": "3135440"
  },
  {
    "text": "just remove all the tests that test it first and then you start removing the functionality how do you know if you've gone far enough the test is just going",
    "start": "3135440",
    "end": "3142480"
  },
  {
    "text": "to be green the whole time because you've removed anything that would have told you that you've REM removed enough functionality so the first thing that I",
    "start": "3142480",
    "end": "3148880"
  },
  {
    "text": "do then is actually remove the functionality associated with checking enrollment",
    "start": "3148880",
    "end": "3155200"
  },
  {
    "text": "capacity actually I'm just going to just so you know I'm not cheating here I'll go back and because I've removed the concurrency test we're in a green State",
    "start": "3155200",
    "end": "3162000"
  },
  {
    "text": "now everything should be passing and I'm going to remove the functionality associated with",
    "start": "3162000",
    "end": "3167960"
  },
  {
    "text": "checking the enrollment capacity so if you recall we had neatly encapsulated that in our enrollment class um oh sorry",
    "start": "3167960",
    "end": "3175839"
  },
  {
    "text": "no it was in the course it so we had a check here enrollments",
    "start": "3175839",
    "end": "3183400"
  },
  {
    "text": "count greater than one greater than room capacity that's the check I'm going to remove that",
    "start": "3183400",
    "end": "3189000"
  },
  {
    "text": "check and that's it so I've removed that constraint and now the test that was",
    "start": "3189000",
    "end": "3194880"
  },
  {
    "text": "demanding that that constraint exists should fail red First Step red now I can",
    "start": "3194880",
    "end": "3200960"
  },
  {
    "text": "remove the test for blocking enrollment if the capacity exceeded and I go back to green First Step red second cor step",
    "start": "3200960",
    "end": "3208599"
  },
  {
    "text": "green yep is this still enrollment or is there some kind of pre enrollment after",
    "start": "3208599",
    "end": "3214280"
  },
  {
    "text": "changing that word as well uh I think it's still enrolling because it's students saying I want to do the course",
    "start": "3214280",
    "end": "3220720"
  },
  {
    "text": "so they're enrolling in the course what we separated out now is scheduling and room allocation which becomes a separate",
    "start": "3220720",
    "end": "3225839"
  },
  {
    "text": "activity so yeah I would I would still call this enrollment but still need to un check that",
    "start": "3225839",
    "end": "3231400"
  },
  {
    "text": "capacity doesn't exceed the capacity of the room with the most capacity right maybe",
    "start": "3231400",
    "end": "3237240"
  },
  {
    "text": "or maybe you say hey it's so popular we're going to run two instances of the course so there's always a domain",
    "start": "3237240",
    "end": "3243760"
  },
  {
    "text": "solution I think to these things rather than just defaulting to the technical solution and when you have that question they go hey if it was that popular why",
    "start": "3243760",
    "end": "3249640"
  },
  {
    "text": "would we turn away money why would we stop people paying us if we have so many people wanting to do it if we can go and",
    "start": "3249640",
    "end": "3254720"
  },
  {
    "text": "get the resources of course we'll run it for that many students I'm not saying all businesses are so rational some of",
    "start": "3254720",
    "end": "3260240"
  },
  {
    "text": "them will just say hey look we can't be bothered we just don't have the resources we we we have real constraints",
    "start": "3260240",
    "end": "3266040"
  },
  {
    "text": "and they will need you to do something like that but for the purpos of this exercise we're sort of illustrating what it means to take a constraint and move",
    "start": "3266040",
    "end": "3272400"
  },
  {
    "text": "it to another point in the process so we've removed the test for blocking the enrollments um and now we",
    "start": "3272400",
    "end": "3278359"
  },
  {
    "text": "remove the uh functionality for setting the course room ID because now remember we're going to when we set up a course",
    "start": "3278359",
    "end": "3284040"
  },
  {
    "text": "we're not going to allocate it to a room so we don't want to have any sort of room ID at all at the start um we just",
    "start": "3284040",
    "end": "3290480"
  },
  {
    "text": "want to make sure that we're setting up courses so that we remove that functionality where we remove the test",
    "start": "3290480",
    "end": "3295839"
  },
  {
    "text": "for setting room ID when including the course in the catalog",
    "start": "3295839",
    "end": "3301599"
  },
  {
    "text": "and when I get to start testing the scheduling process now I'm going to I'm",
    "start": "3301599",
    "end": "3306720"
  },
  {
    "text": "getting close to time here so I'm going to um skip through a couple of things here so we are starting the scheduling process it's just uh another API",
    "start": "3306720",
    "end": "3313720"
  },
  {
    "text": "basically schedule controller and again we're going to start out with a really simple implementation that just says",
    "start": "3313720",
    "end": "3318960"
  },
  {
    "text": "Okay um we're going to test to um just validate the contents of the response so",
    "start": "3318960",
    "end": "3325720"
  },
  {
    "text": "we're going to start setting up some structures here and make sure that we get like a list of the schedule courses and which rooms have they been allocated",
    "start": "3325720",
    "end": "3332440"
  },
  {
    "text": "to um now we're adding a unit test so all the tests I've added so far have been",
    "start": "3332440",
    "end": "3338640"
  },
  {
    "text": "you call them like API tests or some people might call them end to end tests I still think they're just business functionality tests I've chosen to test",
    "start": "3338640",
    "end": "3345119"
  },
  {
    "text": "out the boundary of the system to give me the biggest amount of freedom to refactor um I think Ian Cooper would call them like module tests because",
    "start": "3345119",
    "end": "3351880"
  },
  {
    "text": "that's the public interface to the module is the HTTP layer um but now I'm about to do some really complex business",
    "start": "3351880",
    "end": "3357240"
  },
  {
    "text": "logic with this scheduling algorithm so I'm actually going to create uh some tests called um so I've got some tests",
    "start": "3357240",
    "end": "3364559"
  },
  {
    "text": "around the API which I'm calling the scheduling tests because that's about testing the business process of scheduling and how the interactions with",
    "start": "3364559",
    "end": "3370720"
  },
  {
    "text": "the API work and then scheduler tests which I agree is a little bit confusing and I'd like to find a better term for",
    "start": "3370720",
    "end": "3376680"
  },
  {
    "text": "that which is about just testing the scheduling uh like the scheduler which does the algorithm and the nice thing",
    "start": "3376680",
    "end": "3382079"
  },
  {
    "text": "about that now I'm dropping down to a proper unit test uh is I don't have to go set up all of the student",
    "start": "3382079",
    "end": "3387440"
  },
  {
    "text": "registrations and everything at the start I can just start to create the data as the algorithm needs it which is",
    "start": "3387440",
    "end": "3393480"
  },
  {
    "text": "the course and the number of enrollments in that course and the room and the capacity because that's all the algorithm needs so presumably at some",
    "start": "3393480",
    "end": "3399160"
  },
  {
    "text": "point I can construct a query which will return that data um or if you're doing event sourcing you might have a read model or something that will give you",
    "start": "3399160",
    "end": "3405200"
  },
  {
    "text": "that data quickly and easily but now I just want to test the algorithm so I'm going to drop down to a layer where I just write tests around the algorithm uh",
    "start": "3405200",
    "end": "3412079"
  },
  {
    "text": "in in a more traditional unit test kind of way so here we're just setting up thing that just validates that if I've",
    "start": "3412079",
    "end": "3418160"
  },
  {
    "text": "got one room and one course and the capacity is fine it's going to work again this rule is always going to pass",
    "start": "3418160",
    "end": "3423240"
  },
  {
    "text": "even as I make the algorithm more complex I'm going to start with a really simple algorithm here uh let me find the",
    "start": "3423240",
    "end": "3429760"
  },
  {
    "text": "these are the tests let's find the shed and you can see here it's just starting out well not even implemented yet test",
    "start": "3429760",
    "end": "3436280"
  },
  {
    "text": "is red let's go forwards and build a really simple algorithm it literally just zips up the enrollments with the",
    "start": "3436280",
    "end": "3441839"
  },
  {
    "text": "rooms so whatever sequence they came back from the database we just zip them together and that's our simple naive",
    "start": "3441839",
    "end": "3447280"
  },
  {
    "text": "allocation algorithm happens to pass for the current test because the test says two and two um so that's that's always",
    "start": "3447280",
    "end": "3454359"
  },
  {
    "text": "going to work now we start adding in some more complex um scenarios like",
    "start": "3454359",
    "end": "3461559"
  },
  {
    "text": "um let's add in for a scenario I've got two courses uh enrollment count four and",
    "start": "3461880",
    "end": "3467200"
  },
  {
    "text": "enrollment count two and then I've got a room with capacity 2 capacity 4 so the the zipping isn't going to work there",
    "start": "3467200",
    "end": "3472720"
  },
  {
    "text": "because it's going to misallocate um the rooms and so going to get a red test",
    "start": "3472720",
    "end": "3478920"
  },
  {
    "text": "here because it's going to allocate course one to room one it's going to say enrollment count four two that's not",
    "start": "3478920",
    "end": "3485440"
  },
  {
    "text": "right um so let's go back to the scheduler no I do not want to do that",
    "start": "3485440",
    "end": "3491760"
  },
  {
    "text": "and",
    "start": "3491760",
    "end": "3494000"
  },
  {
    "text": "say let's Implement like a simple sorting thing so we'll sort the enrollments and sort the room by",
    "start": "3497240",
    "end": "3503000"
  },
  {
    "text": "capacity and demand so then now they're sorted the the course with the most",
    "start": "3503000",
    "end": "3508280"
  },
  {
    "text": "demand will be matched with the course with the most capacity and for that scenario that is going to work since I am caring about the",
    "start": "3508280",
    "end": "3515720"
  },
  {
    "text": "language that I use and I find this to be horrific and not make any sense to me I'm going to do a little bit of refactoring and put those um functions",
    "start": "3515720",
    "end": "3522359"
  },
  {
    "text": "into like by most popular and by most spacious so now it reads a little bit more neatly course enrollment sort by most popular room sort by most spacious",
    "start": "3522359",
    "end": "3529680"
  },
  {
    "text": "and then I can zip them up assign the course to the room now there are more scenarios we have to cater to so maybe",
    "start": "3529680",
    "end": "3535680"
  },
  {
    "text": "there's a um situation",
    "start": "3535680",
    "end": "3540599"
  },
  {
    "text": "where so I've just put some uh helper methods in there so we can make one a bit more complex so we're going to say",
    "start": "3547280",
    "end": "3554280"
  },
  {
    "text": "three courses with uh de uh demand of 42 and seven rooms with these capacities",
    "start": "3554280",
    "end": "3559440"
  },
  {
    "text": "you under the current algorithm this is going to be wrong because it's going to sequence them as the 742 and it's going",
    "start": "3559440",
    "end": "3565200"
  },
  {
    "text": "to sequence them 10 six 5 two and so seven matched with 10 is going to be",
    "start": "3565200",
    "end": "3570960"
  },
  {
    "text": "fine uh four matched with six is going to be fine but two matched with five is not going to be fine because even though",
    "start": "3570960",
    "end": "3576200"
  },
  {
    "text": "I've sorted them now I haven't actually checked the capacity um as part of doing the algorithm so this test is going to",
    "start": "3576200",
    "end": "3583319"
  },
  {
    "text": "fail um if we go back to the scheduler we can just make another",
    "start": "3585280",
    "end": "3591599"
  },
  {
    "text": "slight change to the algorithm which is just to introduce that check so can the course fit so now we've got a can course",
    "start": "3591599",
    "end": "3597720"
  },
  {
    "text": "fit method find me the first room where the current course can fit assign the course to the candidate room and then",
    "start": "3597720",
    "end": "3603440"
  },
  {
    "text": "remove the course uh from the list of candidate rooms and that should make it",
    "start": "3603440",
    "end": "3609799"
  },
  {
    "text": "work so I think this is the end of the algorithmic thing so I'm going to um just show you one last little refactor",
    "start": "3609799",
    "end": "3616280"
  },
  {
    "text": "that uh I think is quite neat here because a lot of people say okay Chris you're not doing demain driven design",
    "start": "3616280",
    "end": "3621920"
  },
  {
    "text": "here because you're using this same class this course class you're using it for your entity framework persistence you're using it for your domain model",
    "start": "3621920",
    "end": "3627839"
  },
  {
    "text": "you're even returning this over the HTTP API this is terrible this is not what you should do this is worst practice why",
    "start": "3627839",
    "end": "3634280"
  },
  {
    "text": "don't you have a a persistence model and an API model um and and do lots of",
    "start": "3634280",
    "end": "3639799"
  },
  {
    "text": "mapping uh between all of them and uh you know my answer to that is I totally agree if I wanted to change this model",
    "start": "3639799",
    "end": "3647319"
  },
  {
    "text": "and I had a public consumer of my API that was not able to change their side I",
    "start": "3647319",
    "end": "3652799"
  },
  {
    "text": "would absolutely at that point introduce a dto for the API so I could constrain",
    "start": "3652799",
    "end": "3658480"
  },
  {
    "text": "the interface specification and make sure that my public consumer was not affected and then continue to refactor",
    "start": "3658480",
    "end": "3663960"
  },
  {
    "text": "my model cleanly and adapt that at the thing but why would I introduce that before I need it that's just extra work",
    "start": "3663960",
    "end": "3670160"
  },
  {
    "text": "more complexity more risk of bugs on the persistence side I've been really pondering this obsession with like",
    "start": "3670160",
    "end": "3675599"
  },
  {
    "text": "separated persistence models and I think in one part it comes from an era where persistence technology was just not",
    "start": "3675599",
    "end": "3681799"
  },
  {
    "text": "where it is now like you literally couldn't just take a class and store it but you can now this class is completely",
    "start": "3681799",
    "end": "3687839"
  },
  {
    "text": "ignorant of any persistence concerns but any new framework is smart enough to store it in a SQL database and to get it",
    "start": "3687839",
    "end": "3694119"
  },
  {
    "text": "back for me without any problems and to give me capabilities around querying and all that sort of stuff so I have absolutely no problems with using this",
    "start": "3694119",
    "end": "3700400"
  },
  {
    "text": "class directly in my persistance layer if there was something that I needed to do that en framework was struggling with",
    "start": "3700400",
    "end": "3707359"
  },
  {
    "text": "the adapting then yeah I might introduce a persistence model map explicitly between the two and then convert it into",
    "start": "3707359",
    "end": "3713599"
  },
  {
    "text": "a format that any framework could work with better or what whatever persistence mechanism I'm using but I don't do that by default again extra complexity extra",
    "start": "3713599",
    "end": "3720680"
  },
  {
    "text": "overhead more risk of bugs if the framework can do it for you just let it work as simply as it can I think the",
    "start": "3720680",
    "end": "3726079"
  },
  {
    "text": "other obsession with it is a lot of people are working in environments where despite the fact that the database is notionally some private concern of your",
    "start": "3726079",
    "end": "3732599"
  },
  {
    "text": "service you have a lot of like external systems that are treating your database as public data and so you've got a",
    "start": "3732599",
    "end": "3738960"
  },
  {
    "text": "public contract in that database that you're maybe not aware of and so people are really concerned about changing the",
    "start": "3738960",
    "end": "3744319"
  },
  {
    "text": "schema of the database because it's going to break this report and it's going to break this other service that's got a read um you know connection string",
    "start": "3744319",
    "end": "3750720"
  },
  {
    "text": "directly to my database to those people I say I am deeply sorry I hope you can find another place to work as soon as",
    "start": "3750720",
    "end": "3756160"
  },
  {
    "text": "possible and if you can't please stop letting other people read your data it should be private you should be allowed",
    "start": "3756160",
    "end": "3761319"
  },
  {
    "text": "to change that schem or whenever you want if you need to publish data to other people put it on a queue do some sort of Eventing um or or open an API if",
    "start": "3761319",
    "end": "3768200"
  },
  {
    "text": "you really have to um so the final thing we're going to do though is I do agree with one thing around the traditional",
    "start": "3768200",
    "end": "3773680"
  },
  {
    "text": "DDD thing for these sort of entity models is that this public Setter here is a bit of a problem and so I'm going",
    "start": "3773680",
    "end": "3779559"
  },
  {
    "text": "to do one final refactor um which is oh sorry I'll jump the gun a little bit we got a little bit more of algorithm but I",
    "start": "3779559",
    "end": "3785920"
  },
  {
    "text": "don't think it's that relevant skip forward a bit we've now got private Setters and the nice thing about when I",
    "start": "3785920",
    "end": "3791119"
  },
  {
    "text": "do this right at the end is that everything else that we've done has actually already put us in a place where",
    "start": "3791119",
    "end": "3796319"
  },
  {
    "text": "we were never using those public Setters anyway because we encapsulated all the business logic in methods with intention",
    "start": "3796319",
    "end": "3801839"
  },
  {
    "text": "revealing names and we made sure that you know we didn't leak business logic out into the controllers the main reason",
    "start": "3801839",
    "end": "3808079"
  },
  {
    "text": "sometimes you need public sets is because you've got business logic in the controller which makes a decision about the state of the entity and so it calls",
    "start": "3808079",
    "end": "3814039"
  },
  {
    "text": "the public Setter to update the state but we never did that because just by following simple refactoring practices",
    "start": "3814039",
    "end": "3819279"
  },
  {
    "text": "and putting intention revealing names around it we ended up in a in a world where we didn't actually need any of the Setters to be public anyway so that",
    "start": "3819279",
    "end": "3825359"
  },
  {
    "text": "final bit of refactoring made all the sets private and the test still passed without any other changes so that is the",
    "start": "3825359",
    "end": "3831559"
  },
  {
    "text": "end of uh the journey that we've been on um I hope that it has been interesting you to you to think about how you can",
    "start": "3831559",
    "end": "3838079"
  },
  {
    "text": "challenge some of the technical requirements that you get and engage more closely with your business stakeholders to learn about what's",
    "start": "3838079",
    "end": "3843200"
  },
  {
    "text": "important to them I encourage you to look into the domain driven design uh the community and the work that's being",
    "start": "3843200",
    "end": "3849240"
  },
  {
    "text": "done there um go and see Nick Tunes talks at the conference he does some amazing stuff uh in in this space and",
    "start": "3849240",
    "end": "3854559"
  },
  {
    "text": "read his books um and it will give you some tools and practices that are really helpful for that process of engaging",
    "start": "3854559",
    "end": "3860960"
  },
  {
    "text": "with and understanding the domain that you're working in just going to jump back to uh the slides for last little bit all the code that you just saw is in",
    "start": "3860960",
    "end": "3867599"
  },
  {
    "text": "a repo every commit every tiny little step is tracked in a separate commit so you can get that on GitHub with this um",
    "start": "3867599",
    "end": "3874440"
  },
  {
    "text": "QR code I'll put it on the slack later as well if you want to get it that way um we uh that extension that I talked",
    "start": "3874440",
    "end": "3881400"
  },
  {
    "text": "about Contex if you'd like to get that for vs code you can get it from this QR code um I'm rolling out the intell J",
    "start": "3881400",
    "end": "3887200"
  },
  {
    "text": "version very soon um and we also have a domain driven design Meetup in Australia",
    "start": "3887200",
    "end": "3892760"
  },
  {
    "text": "uh R we run it in Sydney one month and Melbourne in another um alternating back and forth we just had the Sydney one the other night so March will be in",
    "start": "3892760",
    "end": "3898640"
  },
  {
    "text": "Melbourne we'll be back in Sydney in April if any of what I said tonight is interesting to you I I think you'll find the meet up quite interesting um so come",
    "start": "3898640",
    "end": "3905119"
  },
  {
    "text": "along to that um and yeah finally this is me um feel free to connect up with me on the socials and all that sort of",
    "start": "3905119",
    "end": "3911240"
  },
  {
    "text": "stuff the final little thing I'm going to offer completely unrelated to anything to do with DDD um it's sort of more of a personal project of mine I'm",
    "start": "3911240",
    "end": "3917599"
  },
  {
    "text": "really committed to improving uh life for our colleagues who are affected by things like systemic discrimination and",
    "start": "3917599",
    "end": "3923880"
  },
  {
    "text": "bias in our industry I think is pretty awful um the way that the the industry has evolved if you go back to like the",
    "start": "3923880",
    "end": "3930000"
  },
  {
    "text": "70s and 80s there was much more diversity and equity and equality in our industry and these days it's pretty",
    "start": "3930000",
    "end": "3935359"
  },
  {
    "text": "pretty rubbish so one of the things I want to do about that is if you are working in an environment and you",
    "start": "3935359",
    "end": "3940680"
  },
  {
    "text": "witness Sy systemic discrimination or bias um and you think what can I do about it but you don't know what to do",
    "start": "3940680",
    "end": "3946880"
  },
  {
    "text": "please connect with me I'd love to have a chat with you I offer like I call peer support so free peer support for anyone",
    "start": "3946880",
    "end": "3952359"
  },
  {
    "text": "who wants to be a better Ally to people who are affected by this stuff um because I think it's up to us the people",
    "start": "3952359",
    "end": "3958160"
  },
  {
    "text": "who are I'm not talking to everyone in the room but to anyone who like me is probably a member of the dominant group",
    "start": "3958160",
    "end": "3963279"
  },
  {
    "text": "it's up to us to make a change so I'd love to talk to anybody that wants to um do better in their workplaces and make",
    "start": "3963279",
    "end": "3968920"
  },
  {
    "text": "life better for people affected by this stuff so that's me thank you very much hope to cheat to you later",
    "start": "3968920",
    "end": "3974280"
  },
  {
    "text": "[Applause]",
    "start": "3974280",
    "end": "3980389"
  }
]