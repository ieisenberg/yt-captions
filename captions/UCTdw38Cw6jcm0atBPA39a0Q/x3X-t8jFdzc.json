[
  {
    "text": "it's always good to come after lunch everybody is feeling uh fully energetic",
    "start": "5279",
    "end": "11080"
  },
  {
    "text": "yeah so my name is Patrick skit cat my last name is maybe a bit difficult to",
    "start": "11080",
    "end": "16198"
  },
  {
    "text": "pronounce so just call me Patrick in the hallway I will be talking about out of order execution what can you do for me",
    "start": "16199",
    "end": "24000"
  },
  {
    "text": "out of order execution is uh the Paradigm the prevailing way that uh",
    "start": "24000",
    "end": "29279"
  },
  {
    "text": "Hardware C use nowadays uh try to get performance out of your code I will be talking about advantages of that and I",
    "start": "29279",
    "end": "36760"
  },
  {
    "text": "will be talking about the limitations of that basically this talk is a call out",
    "start": "36760",
    "end": "43640"
  },
  {
    "text": "to start understanding Hardware CPU better such that we can uh tune our code",
    "start": "43640",
    "end": "50680"
  },
  {
    "text": "better so this will be a bit of the bottom up talk a bit different than uh a",
    "start": "50680",
    "end": "56640"
  },
  {
    "text": "typical C C++ talk that we have seen here but I try to entertain you",
    "start": "56640",
    "end": "61719"
  },
  {
    "text": "especially when it's after lunch so so great so why why this is a call out why",
    "start": "61719",
    "end": "67880"
  },
  {
    "text": "is this a call out why is Hardware CPU U knowledge about Hardware CPU increasingly more uh important for that",
    "start": "67880",
    "end": "75880"
  },
  {
    "text": "I will take you back to 1959 see this big computer Etc and",
    "start": "75880",
    "end": "82400"
  },
  {
    "text": "fireman said ah there's a plenty of room at the bottom he didn't mean that there is plenty of room on the floor to put",
    "start": "82400",
    "end": "89520"
  },
  {
    "text": "more these bigger things no it was plenty of room at the bottom at the bottom meaning between the software and",
    "start": "89520",
    "end": "95479"
  },
  {
    "text": "the hardware stack Hardware could uh was",
    "start": "95479",
    "end": "100640"
  },
  {
    "text": "lots of room to miniaturize at that time in 59 on top of that uh afterwards Dar",
    "start": "100640",
    "end": "108880"
  },
  {
    "text": "dinard scaling maybe in in English said if we could make the transistors smaller",
    "start": "108880",
    "end": "114040"
  },
  {
    "text": "by a factor of K we could get the power density uh keep the power density",
    "start": "114040",
    "end": "119840"
  },
  {
    "text": "constant and increase the frequency with K which was a free lunch basically yeah",
    "start": "119840",
    "end": "125439"
  },
  {
    "text": "we could make faster CPUs smaller CPUs and they don't dissipate heat so much or",
    "start": "125439",
    "end": "132760"
  },
  {
    "text": "that was keeping constant so that went uh well for a",
    "start": "132760",
    "end": "139200"
  },
  {
    "text": "while until around 2005 2007 where we couldn't shrink the we were shrinking",
    "start": "139200",
    "end": "146519"
  },
  {
    "text": "the transistors but with that we also needed to shrink the voltage and that was not possible anymore to put it lower",
    "start": "146519",
    "end": "152800"
  },
  {
    "text": "under a certain threshold if we went below that",
    "start": "152800",
    "end": "158400"
  },
  {
    "text": "threshold then uh current starts to leak transistor start to leak and power starts to dissip dissipate now also we",
    "start": "158400",
    "end": "166080"
  },
  {
    "text": "were pushing a bit the frequency faster than the low of Denard scaling so we got there a bit faster than we",
    "start": "166080",
    "end": "172120"
  },
  {
    "text": "anticipated as a consequence you see uh",
    "start": "172120",
    "end": "177519"
  },
  {
    "text": "here we couldn't increase the CL Frey anymore we actually lowered it and",
    "start": "177519",
    "end": "185440"
  },
  {
    "text": "decided to have multiple cores multiple cores here and you see",
    "start": "185440",
    "end": "193040"
  },
  {
    "text": "single core performance so each point in this graph which is the x-axis per year",
    "start": "193040",
    "end": "199560"
  },
  {
    "text": "and uh the relative performance on a a well-known Benchmark specking you see",
    "start": "199560",
    "end": "204599"
  },
  {
    "text": "that it's declining and uh this is a bit simil re it's declining especially",
    "start": "204599",
    "end": "211599"
  },
  {
    "text": "single thread performance and here if you have multiple cores then it gets better but that means that we needed to",
    "start": "211599",
    "end": "217280"
  },
  {
    "text": "change our programming model we need to think about threats and not every program is made to make a Threat Level",
    "start": "217280",
    "end": "224920"
  },
  {
    "text": "parallelism okay so that's why Performance",
    "start": "224920",
    "end": "231920"
  },
  {
    "text": "Tuning gets much more important we can't improve the performance of our Hardware",
    "start": "231920",
    "end": "237120"
  },
  {
    "text": "so fast as we have did before but so we need to work on the input to",
    "start": "237120",
    "end": "242959"
  },
  {
    "text": "that uh computer to this chip so we can do that in uh different ways we can uh",
    "start": "242959",
    "end": "250159"
  },
  {
    "text": "take our existing software and try to remove some of the bloat teing the software to specific Hardware features",
    "start": "250159",
    "end": "257560"
  },
  {
    "text": "and that's what we I'm going to try to do uh talk about this today or we can make new algorithms or we can possibly",
    "start": "257560",
    "end": "265880"
  },
  {
    "text": "rethink this out of order execution uh model um how can we make it uh more simplified",
    "start": "265880",
    "end": "273520"
  },
  {
    "text": "how we can make it maybe uh much more to the point for a certain uh workload so",
    "start": "273520",
    "end": "279759"
  },
  {
    "text": "that's what's meant with this slide there's room at the top maybe not so",
    "start": "279759",
    "end": "284800"
  },
  {
    "text": "more at the bottom even though Intel and AMD will tell there's still room at the bottom and to a certain extent I agree",
    "start": "284800",
    "end": "292800"
  },
  {
    "text": "but it gets difficult but we have room at the top still if we just know also much better this Hardware execution",
    "start": "292800",
    "end": "299199"
  },
  {
    "text": "model okay so let's",
    "start": "299199",
    "end": "305240"
  },
  {
    "text": "start so we expect now what you can expect further in this talk is that I'll give",
    "start": "305240",
    "end": "311280"
  },
  {
    "text": "you insights how a modern CPU core Works uh we try to tease out some CPU",
    "start": "311280",
    "end": "316800"
  },
  {
    "text": "features using micro benchmarks some wellknown some lesser well-known and",
    "start": "316800",
    "end": "322000"
  },
  {
    "text": "analyze some C++ workloads on uh modern CPUs in a top down",
    "start": "322000",
    "end": "327440"
  },
  {
    "text": "way because this talk will be top down to start from not the Nitty Gritty",
    "start": "327440",
    "end": "333120"
  },
  {
    "text": "details but it starts from the top of a basic knowledge of a ex of the out of",
    "start": "333120",
    "end": "340199"
  },
  {
    "text": "for execution model okay and uh almost arbitrary C",
    "start": "340199",
    "end": "346919"
  },
  {
    "text": "example I say almost because I needed to find a simple enough example such that I",
    "start": "346919",
    "end": "352960"
  },
  {
    "text": "can get it on my slides if you want you can uh compile this and do an object dump and then you will get also the",
    "start": "352960",
    "end": "360840"
  },
  {
    "text": "instructions x86 uh 64 instructions on uh yeah",
    "start": "360840",
    "end": "367680"
  },
  {
    "text": "here on the right side with some more information Etc so let's go over this uh",
    "start": "367680",
    "end": "374880"
  },
  {
    "text": "example so here parameter E A sorry is",
    "start": "374880",
    "end": "380800"
  },
  {
    "text": "adx so we have a function that takes three inputs and tries to set the result",
    "start": "380800",
    "end": "387319"
  },
  {
    "text": "into the output uh memory out you have a b which is e",
    "start": "387319",
    "end": "395199"
  },
  {
    "text": "x then we have a pointer X pointer y to some area to some memory",
    "start": "395199",
    "end": "404240"
  },
  {
    "text": "allocated uh stuff this is the pointer to uh the",
    "start": "404240",
    "end": "410400"
  },
  {
    "text": "output result and what we do with it we uh we add whatever is in",
    "start": "410400",
    "end": "417080"
  },
  {
    "text": "X with a and we multiply whatever is in y with b and then we subtract the",
    "start": "417080",
    "end": "427000"
  },
  {
    "text": "result and we store the result in the output register",
    "start": "429280",
    "end": "436360"
  },
  {
    "text": "now this is the on the right side to see what's in binary of course uh in a",
    "start": "436360",
    "end": "443039"
  },
  {
    "text": "memory this needs to be fetched by Hardware by the CPU and this needs to be decoded this",
    "start": "443039",
    "end": "449960"
  },
  {
    "text": "needs to be decoded into instructions or to something that the machine understands and to kind of configure the",
    "start": "449960",
    "end": "455639"
  },
  {
    "text": "whole Hardware to do it uh thing this instructions on the right",
    "start": "455639",
    "end": "461000"
  },
  {
    "text": "side are not used directly they are disassembled even to smaller smaller or en decoded even into",
    "start": "461000",
    "end": "469479"
  },
  {
    "text": "smaller uh Micro Ops as you can see here for example the ad we normally take uh",
    "start": "469479",
    "end": "478319"
  },
  {
    "text": "edx and the pointer and then put the result back into adx but instead the mcrs are split for this ad first you",
    "start": "478319",
    "end": "486199"
  },
  {
    "text": "have a move that gets the the memory it gets uh in this case X from memory and",
    "start": "486199",
    "end": "493639"
  },
  {
    "text": "puts it in a register one and you also have the add then with the register one",
    "start": "493639",
    "end": "499840"
  },
  {
    "text": "that you just have uh yeah filled with the value and the same for",
    "start": "499840",
    "end": "508000"
  },
  {
    "text": "multiply now have this is a bit madeup micro language we don't know how Intel",
    "start": "508000",
    "end": "514640"
  },
  {
    "text": "exactly encodes this in the Intel or others yeah encod this internally but",
    "start": "514640",
    "end": "521240"
  },
  {
    "text": "what we do know is that they have uh more than the 16 registers that you can use in the from the ISA they have around",
    "start": "521240",
    "end": "529720"
  },
  {
    "text": "200 Etc so they add so you can add physical registers and you also would do",
    "start": "529720",
    "end": "535440"
  },
  {
    "text": "that to avoid false dependencies because you only had 16 registers and if you",
    "start": "535440",
    "end": "540920"
  },
  {
    "text": "could split them up then something doesn't depend on something else",
    "start": "540920",
    "end": "547959"
  },
  {
    "text": "okay so how would a CPU execute this Micro Ops in order so to explain out of",
    "start": "549399",
    "end": "556720"
  },
  {
    "text": "order I would try to First say what was the in order concept what was uh or",
    "start": "556720",
    "end": "562120"
  },
  {
    "text": "method execution model so we load this",
    "start": "562120",
    "end": "568120"
  },
  {
    "text": "one and then we have a cach Miss for example",
    "start": "568120",
    "end": "574680"
  },
  {
    "text": "in a CPU it was the first time we did it was a cash Miss 20 Cycles maybe more,",
    "start": "574680",
    "end": "580519"
  },
  {
    "text": "100 million depending on how far we need to look in the far memory so what",
    "start": "580519",
    "end": "586519"
  },
  {
    "text": "happens with in order this ad can't be can't be executed",
    "start": "586519",
    "end": "592519"
  },
  {
    "text": "and it stalls it stops it can't go any further because R1",
    "start": "592519",
    "end": "599519"
  },
  {
    "text": "is not ready yet okay do we get a better performance",
    "start": "599519",
    "end": "606839"
  },
  {
    "text": "when it's out of order execution so this is a small example but you should see that this happens like on a big scale in",
    "start": "606839",
    "end": "613880"
  },
  {
    "text": "a Intel or AMD CP or any that uses out of order execution so here we do the",
    "start": "613880",
    "end": "619720"
  },
  {
    "text": "load again we have the cach Miss 20 Cycles we have the ad ah but we are out",
    "start": "619720",
    "end": "626480"
  },
  {
    "text": "of order so we continue and later on we come back when uh the register one uh is",
    "start": "626480",
    "end": "632720"
  },
  {
    "text": "ready we load Y into R2 and we can do already the",
    "start": "632720",
    "end": "642959"
  },
  {
    "text": "multiply so that's the reason why out of order gets a better performance than in",
    "start": "644680",
    "end": "649920"
  },
  {
    "text": "order if everything else is the same um so because out of order",
    "start": "649920",
    "end": "655240"
  },
  {
    "text": "execution can overlap longer long lat Micro Ops is if",
    "start": "655240",
    "end": "660639"
  },
  {
    "text": "it's a if you have for example uh three um memory three loads that you need to",
    "start": "660639",
    "end": "667040"
  },
  {
    "text": "do and they whole hit L2 cache or even L3 cach or even memory they can be done",
    "start": "667040",
    "end": "672920"
  },
  {
    "text": "done in parallel in order can't do that so they won't pull",
    "start": "672920",
    "end": "679880"
  },
  {
    "text": "they won't pull uh instructions up and execute them as fast as they can when the data is available do in summary out",
    "start": "679880",
    "end": "688480"
  },
  {
    "text": "of order execution they analyze your dependencies of your between your instructions and",
    "start": "688480",
    "end": "695760"
  },
  {
    "text": "will check whether values are available operants are available to be able to execute",
    "start": "695760",
    "end": "701760"
  },
  {
    "text": "things already when it's there and not wait and not",
    "start": "701760",
    "end": "707639"
  },
  {
    "text": "stall yeah okay so this is a modern outof over CPU",
    "start": "707639",
    "end": "716000"
  },
  {
    "text": "very modern so we have the fronted who did this uh pitching and uh decoding and gives the",
    "start": "716000",
    "end": "723000"
  },
  {
    "text": "Micro Ops to the back end who does actually the actual execution where you have more uh you have different",
    "start": "723000",
    "end": "730040"
  },
  {
    "text": "functional units for multiply L and load operations uh all specified in many",
    "start": "730040",
    "end": "735720"
  },
  {
    "text": "documents of Intel and AMD but they want to try to do even better so they add Branch",
    "start": "735720",
    "end": "745399"
  },
  {
    "text": "speculation so what does that mean so Branch or control speculation so let's suppose that every dot is a what we call",
    "start": "746560",
    "end": "755680"
  },
  {
    "text": "a basic block is is a block of code instructions like you have seen before and it ends with a jump instruction",
    "start": "755680",
    "end": "763000"
  },
  {
    "text": "telling if it's uh true this comparison somehow then you go to the left side or",
    "start": "763000",
    "end": "769040"
  },
  {
    "text": "otherwise you go to the right side left side means Branch taken so you need to jump into the memory to get your new",
    "start": "769040",
    "end": "776199"
  },
  {
    "text": "basic block to the first instruction of that or uh Branch not taken means so the",
    "start": "776199",
    "end": "782199"
  },
  {
    "text": "red one okay think about green and red a bit",
    "start": "782199",
    "end": "789000"
  },
  {
    "text": "differently now don't so right let's just say left or right yeah right is uh",
    "start": "789000",
    "end": "796920"
  },
  {
    "text": "um right is a branch not taken so that means that you can just follow through and keep on fetching you don't need to",
    "start": "796920",
    "end": "803320"
  },
  {
    "text": "jump and incur excess Cycles to go and fing now I have now we come to the colors um you have the green ones you",
    "start": "803320",
    "end": "810240"
  },
  {
    "text": "have the red ones so let's suppose you're following you start on the top",
    "start": "810240",
    "end": "815440"
  },
  {
    "text": "and you say ah fetch this and I jump but I don't know I don't know yet what my the outcome of my comparison is the back",
    "start": "815440",
    "end": "822160"
  },
  {
    "text": "end didn't tell me yet what was the result of this what do I do do I",
    "start": "822160",
    "end": "828120"
  },
  {
    "text": "stall then we need to wait why can't I just fetch more what do I need to do",
    "start": "828120",
    "end": "834399"
  },
  {
    "text": "then okay I predict that I will go for the left side",
    "start": "834399",
    "end": "840199"
  },
  {
    "text": "that I will need to take this jump so we go for the red one uh the green one for example so every time we",
    "start": "840199",
    "end": "847360"
  },
  {
    "text": "predict so in every note we need to make a decision sometimes that will be a good decision sometimes you will be on the",
    "start": "847360",
    "end": "854519"
  },
  {
    "text": "wrong part so in this case the happy part or",
    "start": "854519",
    "end": "860440"
  },
  {
    "text": "the correct part was all the way down up to here if you would have predicted at",
    "start": "860440",
    "end": "866160"
  },
  {
    "text": "the the right decision at the right time then we would end up here and no problem",
    "start": "866160",
    "end": "873560"
  },
  {
    "text": "we have uh we started even executing instructions that at the time that we were executing didn't know that we",
    "start": "873560",
    "end": "879440"
  },
  {
    "text": "should have done it or doing it so but let's suppose you're on the",
    "start": "879440",
    "end": "885320"
  },
  {
    "text": "you ended up in the on the right side you discover a wrong prediction that",
    "start": "885320",
    "end": "890920"
  },
  {
    "text": "your discovery that you're here so I have predicted all this wrongly so on a",
    "start": "890920",
    "end": "896959"
  },
  {
    "text": "red part then you need to basically reset your hardware and go back",
    "start": "896959",
    "end": "905440"
  },
  {
    "text": "somehow to the last known well decision to keep program semantics and",
    "start": "905440",
    "end": "913880"
  },
  {
    "text": "especially in the case of exceptions what if you throw an exception in the wrong part should you give it to the",
    "start": "913880",
    "end": "921639"
  },
  {
    "text": "user should you give it to the client that won't be nice yeah that you",
    "start": "921639",
    "end": "926759"
  },
  {
    "text": "get exceptions of executions that actually didn't need to be executed and in fact this in the early",
    "start": "926759",
    "end": "932759"
  },
  {
    "text": "days of out of order execution they tried this model it was a fast told no",
    "start": "932759",
    "end": "938880"
  },
  {
    "text": "this is not good yeah so in order to accomplish that we can",
    "start": "938880",
    "end": "945600"
  },
  {
    "text": "actually uh send exceptions back or know what the right uh path was or go back to",
    "start": "945600",
    "end": "951199"
  },
  {
    "text": "the right path we have they introduced something like uh what's called a reorder",
    "start": "951199",
    "end": "956600"
  },
  {
    "text": "buffer so a reorder buffer is filled from the front end here",
    "start": "956600",
    "end": "963079"
  },
  {
    "text": "whenever uh always press the wrong button so is whenever something is decoded it also goes to the reorder",
    "start": "963079",
    "end": "970040"
  },
  {
    "text": "buffer you have a micro op one micro Op 2 micro 3 this is the sequence how they",
    "start": "970040",
    "end": "975240"
  },
  {
    "text": "are in the reorder buffer they can have different data structures but they know the order in which they have uh",
    "start": "975240",
    "end": "982199"
  },
  {
    "text": "come and now you have seen two green ones these mean that they are retired",
    "start": "982199",
    "end": "987480"
  },
  {
    "text": "these were executed at the end committed retired they were at the right part so",
    "start": "987480",
    "end": "994079"
  },
  {
    "text": "if you have an exception for example in micro op 4 it will wait to retire until you have",
    "start": "994079",
    "end": "1001759"
  },
  {
    "text": "done micro op 3 and that it's known to be on the good PA if",
    "start": "1001759",
    "end": "1009759"
  },
  {
    "text": "not if not you would uh um so let's suppose you have this",
    "start": "1010600",
    "end": "1016279"
  },
  {
    "text": "exception you would uh go back and flush and set all these things on invalid Etc",
    "start": "1016279",
    "end": "1022880"
  },
  {
    "text": "and start back over on this uh two green mons and so that's how we deal with the",
    "start": "1022880",
    "end": "1029199"
  },
  {
    "text": "speculation Etc okay that somehow",
    "start": "1029199",
    "end": "1035360"
  },
  {
    "text": "clear yeah so this is something you can read",
    "start": "1035360",
    "end": "1040918"
  },
  {
    "text": "from the Intel architecture but the what is the size of the reorder buffer this",
    "start": "1040919",
    "end": "1045959"
  },
  {
    "text": "is an important question because how big the reorder buffer is how larger it is",
    "start": "1045959",
    "end": "1053440"
  },
  {
    "text": "how the more instructions we can do out of order the more performance that we can get and of course that comes at the",
    "start": "1053440",
    "end": "1059720"
  },
  {
    "text": "cost at power usage Etc energy usage so you can't do everything but it's an",
    "start": "1059720",
    "end": "1065880"
  },
  {
    "text": "interesting thing to know what is the reorder buffer especially when you don't know exactly the machine so how would we",
    "start": "1065880",
    "end": "1071720"
  },
  {
    "text": "try to tease out this how would we know that the reorder we can use some",
    "start": "1071720",
    "end": "1077400"
  },
  {
    "text": "assembly we have we and therefore before I show you the example you should know",
    "start": "1077400",
    "end": "1082880"
  },
  {
    "text": "that there is a uh an instruction that's called a micro that's called No",
    "start": "1082880",
    "end": "1089559"
  },
  {
    "text": "op or in short no yeah so no op and a no up doesn't go to the back end a no op",
    "start": "1089600",
    "end": "1096480"
  },
  {
    "text": "goes only to the to the reorder buffer so what we can do is let's suppose we",
    "start": "1096480",
    "end": "1103120"
  },
  {
    "text": "have a we start with a load then we have one no up and we can check the time how long",
    "start": "1103120",
    "end": "1110320"
  },
  {
    "text": "that takes to be executed",
    "start": "1110320",
    "end": "1115400"
  },
  {
    "text": "uh and we can do that for a load no op one no op two and we Che can check how",
    "start": "1115400",
    "end": "1120960"
  },
  {
    "text": "long that can be executed and so forth so in the end we could have a series of",
    "start": "1120960",
    "end": "1126080"
  },
  {
    "text": "loads with Nos and a load behind and see when that falls off into the reorder",
    "start": "1126080",
    "end": "1132080"
  },
  {
    "text": "buffer when it can't be filling the reorder buffer anymore because the if you have an instruction and the order",
    "start": "1132080",
    "end": "1138559"
  },
  {
    "text": "buffer is full then it will the machine will stall the front end will stall and you won't be executing this load anymore",
    "start": "1138559",
    "end": "1146000"
  },
  {
    "text": "until there's place available in this reorder buffer so if the reorder buffer",
    "start": "1146000",
    "end": "1151640"
  },
  {
    "text": "is full you have a load and you have",
    "start": "1151640",
    "end": "1157840"
  },
  {
    "text": "a let's suppose the buffer is 20 you have 19 NOS then this load this second",
    "start": "1157840",
    "end": "1163960"
  },
  {
    "text": "load will not be in the reorder buffer so it needs to wait until the the other load is done so then we will get a spike",
    "start": "1163960",
    "end": "1171200"
  },
  {
    "text": "in our uh CPU",
    "start": "1171200",
    "end": "1176679"
  },
  {
    "text": "time so if you see that so this is the total CPU time on the y-axis on the",
    "start": "1178720",
    "end": "1185240"
  },
  {
    "text": "x-axis is basically the number of nobes that you have put in between every time plus",
    "start": "1185240",
    "end": "1191559"
  },
  {
    "text": "one so here we have uh 16 16 noobs or 15",
    "start": "1191559",
    "end": "1197240"
  },
  {
    "text": "noes 49 noobs 84 and so we go on so here you see it's gradually",
    "start": "1197240",
    "end": "1205360"
  },
  {
    "text": "increasing because it requires a little bit more effort to keep this reorder",
    "start": "1205360",
    "end": "1210720"
  },
  {
    "text": "buffer but here it jumps around",
    "start": "1210720",
    "end": "1216360"
  },
  {
    "text": "512 which I know was the correct one because I looked it up it was a raptor Cove it has",
    "start": "1216360",
    "end": "1222200"
  },
  {
    "text": "512 uh reorder buffer uh entries because you see here that the",
    "start": "1222200",
    "end": "1227520"
  },
  {
    "text": "time to to do the two loads spikes that means that they can't be were not executed out of order they",
    "start": "1227520",
    "end": "1235520"
  },
  {
    "text": "were serialized because one needed to wait until the reorder buffer was free with the load that was",
    "start": "1235520",
    "end": "1242559"
  },
  {
    "text": "done so we have detected our R size R reorder buffer",
    "start": "1242559",
    "end": "1248440"
  },
  {
    "text": "size so and that you you can do also to do other type of CPU uh features to get",
    "start": "1248440",
    "end": "1254360"
  },
  {
    "text": "out we will see another example in a minute is that okay",
    "start": "1254360",
    "end": "1262799"
  },
  {
    "text": "yeah okay another type of speculation something that's less known also it's not so commercialized by uh in the",
    "start": "1262840",
    "end": "1271159"
  },
  {
    "text": "optimization manuals Etc but it's uh it's good to know there's also some speculation going on in the back end and",
    "start": "1271159",
    "end": "1278880"
  },
  {
    "text": "it's called memory disambiguation I will tell",
    "start": "1278880",
    "end": "1284600"
  },
  {
    "text": "you with this drawing what that is so let's suppose in the program order",
    "start": "1284600",
    "end": "1290880"
  },
  {
    "text": "you get the store so in your instruction fetching you get a store to certain",
    "start": "1290880",
    "end": "1296200"
  },
  {
    "text": "memory location before a",
    "start": "1296200",
    "end": "1300600"
  },
  {
    "text": "load so the store before the load out of order what would it like to",
    "start": "1301320",
    "end": "1309799"
  },
  {
    "text": "do it would like if it can if the load if all the if the address is available",
    "start": "1309799",
    "end": "1315200"
  },
  {
    "text": "it will already start loading and actually doing it before it's known the store the address",
    "start": "1315200",
    "end": "1322559"
  },
  {
    "text": "of the store is known or before the store is this",
    "start": "1322559",
    "end": "1329080"
  },
  {
    "text": "allowed can we do",
    "start": "1329600",
    "end": "1333158"
  },
  {
    "text": "this almost name name address so so it has this is allowed if there's not",
    "start": "1335279",
    "end": "1342679"
  },
  {
    "text": "overlapping addresses for the load in the store because otherwise you would be already have load it which happens to be",
    "start": "1342679",
    "end": "1350120"
  },
  {
    "text": "a stay of value because the store would have given you the new uh value so if it's not overlapping addresses you're",
    "start": "1350120",
    "end": "1357679"
  },
  {
    "text": "all fine except when it's overlapping",
    "start": "1357679",
    "end": "1364279"
  },
  {
    "text": "addresses then you're not allowed to do it",
    "start": "1364279",
    "end": "1370440"
  },
  {
    "text": "so doing this that's called load hosting actually this two but that's wrong yeah",
    "start": "1370440",
    "end": "1376640"
  },
  {
    "text": "so load hosting is doing it uh before uh the store now uh CPUs are very good at",
    "start": "1376640",
    "end": "1383520"
  },
  {
    "text": "it especially this is uh again easy decision it always takes transistors Etc um but if you know the",
    "start": "1383520",
    "end": "1391880"
  },
  {
    "text": "address of the store and if you know the address of the load then you can basically compare it and discuss and",
    "start": "1391880",
    "end": "1398880"
  },
  {
    "text": "basically decide should I do it or not load hosting or not but what happens in most modern CPUs and when they actually",
    "start": "1398880",
    "end": "1405600"
  },
  {
    "text": "introduced it it gave a 10% Improvement in the instructions per cycle that you",
    "start": "1405600",
    "end": "1410679"
  },
  {
    "text": "can uh execute more or less um they actually start predicting it they start",
    "start": "1410679",
    "end": "1416919"
  },
  {
    "text": "predicting can I can I do the load before the store before you have the address before",
    "start": "1416919",
    "end": "1425120"
  },
  {
    "text": "the store is known uh the store address is",
    "start": "1425120",
    "end": "1430039"
  },
  {
    "text": "known and afterwards when so then I have two cases one in the end it was okay so",
    "start": "1430720",
    "end": "1437640"
  },
  {
    "text": "then you you don't need to do anything but if the load and the store address were overlapping then what you",
    "start": "1437640",
    "end": "1444240"
  },
  {
    "text": "need to do then you need to clear the whole machine so again the whole reorder buffer needs to be cleaned out the whole",
    "start": "1444240",
    "end": "1449600"
  },
  {
    "text": "pipeline maybe start pitching again Etc so that's an expensive operation about 30 30 40 cyes more than the bad",
    "start": "1449600",
    "end": "1456960"
  },
  {
    "text": "speculation uh that we have seen uh before so and since this uh is not uh so",
    "start": "1456960",
    "end": "1463760"
  },
  {
    "text": "well known it's also not so much written how it actually works we can make a small",
    "start": "1463760",
    "end": "1470760"
  },
  {
    "text": "program to start seeing how this is done and try to reverse engineer this so",
    "start": "1470760",
    "end": "1478200"
  },
  {
    "text": "all in the spirit of getting to know what the hardware uh what the CPU is",
    "start": "1478200",
    "end": "1483399"
  },
  {
    "text": "doing so you see here this store load function is actually written in",
    "start": "1483399",
    "end": "1490039"
  },
  {
    "text": "assembly um was quite big but basically what it does it basically uh does a store for a",
    "start": "1490039",
    "end": "1499760"
  },
  {
    "text": "load it takes two memory uh locations one for the store and one for the",
    "start": "1499760",
    "end": "1505279"
  },
  {
    "text": "load as you can see here here yeah two memory locations yeah",
    "start": "1505279",
    "end": "1513080"
  },
  {
    "text": "so in this case memory yeah one basically or th000 uh here so store",
    "start": "1513080",
    "end": "1522039"
  },
  {
    "text": "load um what also is done in this store load sem Lang is that you make sure the",
    "start": "1523200",
    "end": "1531600"
  },
  {
    "text": "the store address is very late known with a couple of multiplications of the",
    "start": "1531600",
    "end": "1537000"
  },
  {
    "text": "address multiplied with one but at least all these things needs to be done so you actually you would in this case not",
    "start": "1537000",
    "end": "1543799"
  },
  {
    "text": "know the address before that is guaranteed by the uh yeah store load or",
    "start": "1543799",
    "end": "1549760"
  },
  {
    "text": "Not Guaranteed at least some experiments so what do we do then we go over first",
    "start": "1549760",
    "end": "1554960"
  },
  {
    "text": "we try to kind of reset this memory this ambiguation system so we make it uh we",
    "start": "1554960",
    "end": "1560919"
  },
  {
    "text": "always store loading to the same address so overlapping so it will reset uh the",
    "start": "1560919",
    "end": "1566320"
  },
  {
    "text": "counter it will count down and then at moment say I really not going to do it anymore because we get all these machine",
    "start": "1566320",
    "end": "1573320"
  },
  {
    "text": "braks and then the fun starts so now we make F we make hting back possible so",
    "start": "1573320",
    "end": "1579320"
  },
  {
    "text": "from iteration 200 to 2020 we say do the store in the load and it has nonoverlapping",
    "start": "1579320",
    "end": "1585440"
  },
  {
    "text": "memory addresses so it will tell ah at some",
    "start": "1585440",
    "end": "1590520"
  },
  {
    "text": "point I can do load hosting I can do this load before the store no",
    "start": "1590520",
    "end": "1596840"
  },
  {
    "text": "problem and then here we're going to be a bit nasty and all of a sudden at iteration",
    "start": "1596840",
    "end": "1604039"
  },
  {
    "text": "2020 we do a store load on the same",
    "start": "1604039",
    "end": "1609679"
  },
  {
    "text": "address so what will happen what will we",
    "start": "1609679",
    "end": "1615760"
  },
  {
    "text": "see yeah yeah so you will see somewhere before it stalls what you will",
    "start": "1616200",
    "end": "1625120"
  },
  {
    "text": "see yeah you see a dip right because you",
    "start": "1626000",
    "end": "1632320"
  },
  {
    "text": "have uh here here at some point it will think hey this is",
    "start": "1632320",
    "end": "1639120"
  },
  {
    "text": "uh here I can do load hosting so you will see that it take less CPU",
    "start": "1639120",
    "end": "1645919"
  },
  {
    "text": "time so maybe I needed to take averages Etc a bit more but I tested this basically the",
    "start": "1646520",
    "end": "1653480"
  },
  {
    "text": "the week before I came to this conference I didn't have so much time but here we start from the loop",
    "start": "1653480",
    "end": "1659360"
  },
  {
    "text": "iteration 200 to 230 remember the Y the I and here this is the number of Cycles",
    "start": "1659360",
    "end": "1667600"
  },
  {
    "text": "it took so here in the beginning I can go back to this uh slide so here we are",
    "start": "1667600",
    "end": "1676240"
  },
  {
    "text": "and we say ah here we have non overlapping addresses so from 200 to",
    "start": "1676240",
    "end": "1682880"
  },
  {
    "text": "220 uh and so from 200 to 220 we have non",
    "start": "1682880",
    "end": "1688640"
  },
  {
    "text": "overlapping addresses but you see at 215 exactly then we start to see a drop",
    "start": "1688640",
    "end": "1696760"
  },
  {
    "text": "in the CPU time this is when load hosting starts this is when they said ah",
    "start": "1696760",
    "end": "1702120"
  },
  {
    "text": "the predictor said I can really now start doing load hosting and put this load before this is also what's in the",
    "start": "1702120",
    "end": "1708880"
  },
  {
    "text": "patent of uh Intel around 15 Cycles 50 load store combinations then we can",
    "start": "1708880",
    "end": "1715440"
  },
  {
    "text": "start to load hosting again and then it goes",
    "start": "1715440",
    "end": "1720880"
  },
  {
    "text": "well until iteration 2020 remember iteration 2020 we all of a sudden say",
    "start": "1721559",
    "end": "1728600"
  },
  {
    "text": "I'll do a do a store load with the same memory address so what do we",
    "start": "1728600",
    "end": "1734720"
  },
  {
    "text": "get a big spike so here we have load",
    "start": "1734720",
    "end": "1740240"
  },
  {
    "text": "hting this is how uh we get a lot of uh yeah a lot more performance because",
    "start": "1740240",
    "end": "1746240"
  },
  {
    "text": "loads are very important to do as early as possible because memory is getting slower compared to how fast we can get",
    "start": "1746240",
    "end": "1754039"
  },
  {
    "text": "the CPUs and here is what we got a machine clear and",
    "start": "1754039",
    "end": "1760519"
  },
  {
    "text": "it takes even longer time than normally serializing because we need to reset the system and start from the last wellknown",
    "start": "1760519",
    "end": "1767399"
  },
  {
    "text": "re tired instruction again so this is all this happens all",
    "start": "1767399",
    "end": "1773840"
  },
  {
    "text": "for you in the CPU which is quite a lot I think that's a big uh big Advantage be",
    "start": "1773840",
    "end": "1780200"
  },
  {
    "text": "besides that this is um improving it you need much more power and it's",
    "start": "1780200",
    "end": "1786799"
  },
  {
    "text": "power uh hungry but this is what it does for",
    "start": "1786799",
    "end": "1791840"
  },
  {
    "text": "you so and basically you can the some people of the University of Amsterdam I",
    "start": "1793440",
    "end": "1800840"
  },
  {
    "text": "think from the Netherlands they have reversed engineered how this memory dis igation",
    "start": "1800840",
    "end": "1807240"
  },
  {
    "text": "Works they also find out for example that there had the that there is like a watch doog principle if four times you",
    "start": "1807240",
    "end": "1813799"
  },
  {
    "text": "got trapped in a machine clear then they would never try it again",
    "start": "1813799",
    "end": "1818840"
  },
  {
    "text": "until a very long time yeah so so there is a yeah you don't need to know the in",
    "start": "1818840",
    "end": "1824440"
  },
  {
    "text": "and outs of this Ario but they they basically could sketch this and see how this works in",
    "start": "1824440",
    "end": "1831440"
  },
  {
    "text": "Intel they did it actually was a very nice paper it's called R Rage Against",
    "start": "1831440",
    "end": "1836519"
  },
  {
    "text": "the Machine clear so it's actually exposed also a vulnerability because you could get",
    "start": "1836519",
    "end": "1843600"
  },
  {
    "text": "somehow like inspector Etc some passwords here so that's why I was uh they know this from Skylake so that's",
    "start": "1843600",
    "end": "1849799"
  },
  {
    "text": "why it was interesting to see whether it's still in the new intels which it does when I did the test as you could",
    "start": "1849799",
    "end": "1856639"
  },
  {
    "text": "see here",
    "start": "1856639",
    "end": "1859240"
  },
  {
    "text": "yeah okay now I think now I've talked about the advantages so what this does",
    "start": "1862639",
    "end": "1869159"
  },
  {
    "text": "for you so I would like to talk now about uh limitations limitations of this out of",
    "start": "1869159",
    "end": "1875120"
  },
  {
    "text": "order execution system because in a way it's a fixed system in Hardware so sometimes we need to help it shape the",
    "start": "1875120",
    "end": "1882360"
  },
  {
    "text": "input so that it's get helped so so one way of looking at it is uh top down",
    "start": "1882360",
    "end": "1888639"
  },
  {
    "text": "that's why I mentioned this in the beginning so we have back a very modern",
    "start": "1888639",
    "end": "1895120"
  },
  {
    "text": "machine now if you see graphs of Intel and AMD there will be much more much",
    "start": "1895120",
    "end": "1900480"
  },
  {
    "text": "more Boxes Etc but I think this will always be the main the main scheme the grand scheme so",
    "start": "1900480",
    "end": "1906440"
  },
  {
    "text": "I think if you know this you would be it's much easier to interpret all these boxes and how they are connected when",
    "start": "1906440",
    "end": "1912880"
  },
  {
    "text": "you read the manuals of Intel and AMD so let's start so what we know we",
    "start": "1912880",
    "end": "1920120"
  },
  {
    "text": "know that the front end sends Micro Ops to the back end to execute out of order",
    "start": "1920120",
    "end": "1926120"
  },
  {
    "text": "now in most modern ones now you have you can send four let's say six to",
    "start": "1926120",
    "end": "1935360"
  },
  {
    "text": "eight Micro Ops per cycle and you want to use them as best as",
    "start": "1935360",
    "end": "1941159"
  },
  {
    "text": "possible I only have drawn four because of placement reasons and for other reasons that you will see so we have",
    "start": "1941159",
    "end": "1947320"
  },
  {
    "text": "let's say these are all slots so per cycle you can uh put an instruction here",
    "start": "1947320",
    "end": "1955080"
  },
  {
    "text": "that can be executed on the back end so in the best case you want this all to",
    "start": "1955080",
    "end": "1962480"
  },
  {
    "text": "be instructions that in the end would have been uh",
    "start": "1962480",
    "end": "1967960"
  },
  {
    "text": "retired that needed to be executed uh that was not badly",
    "start": "1967960",
    "end": "1973240"
  },
  {
    "text": "speculated and so forth you would just do instructions all green ones that",
    "start": "1973240",
    "end": "1978320"
  },
  {
    "text": "would be perfect unfortunately that's not the case so some",
    "start": "1978320",
    "end": "1985840"
  },
  {
    "text": "instructions are instructions that are executed in the back end but in the end didn't end up in the",
    "start": "1985840",
    "end": "1993720"
  },
  {
    "text": "yeah it was not needed for your program so yeah this is lost execution is lost execution on top of that in this uh box",
    "start": "1993720",
    "end": "2000559"
  },
  {
    "text": "for bad speculation is also all the all the cycles that you waste or all the slots pipeline slots that you waste",
    "start": "2000559",
    "end": "2007679"
  },
  {
    "text": "because of um because that you need to go back to the previous state that you know was good so at that time you can't",
    "start": "2007679",
    "end": "2014799"
  },
  {
    "text": "start uh executing anymore you need to flush everything so that are all SLS that you couldn't use for retired",
    "start": "2014799",
    "end": "2021799"
  },
  {
    "text": "operation or for instructions that can be retired we have something called this s",
    "start": "2021799",
    "end": "2029039"
  },
  {
    "text": "is frontend bound meaning that is also not a retired insert but that are um it's actually not",
    "start": "2029039",
    "end": "2036639"
  },
  {
    "text": "an instruction it's uh Cycles or slots that you didn't use because the front end was not ready while the back end",
    "start": "2036639",
    "end": "2045159"
  },
  {
    "text": "could execute it so the front end was not able to fetch things from memory and",
    "start": "2045159",
    "end": "2050520"
  },
  {
    "text": "decode it on time for the back end and the back end was free free to do it was",
    "start": "2050520",
    "end": "2056040"
  },
  {
    "text": "standing there hey yeah what are you doing okay that we call Front End bound",
    "start": "2056040",
    "end": "2061200"
  },
  {
    "text": "uh slots then we have the backend bound which is basic I guess you can",
    "start": "2061200",
    "end": "2068960"
  },
  {
    "text": "guess it by now so it means that the front end wanted to deliver something but the back",
    "start": "2068960",
    "end": "2075398"
  },
  {
    "text": "end was busy with something and it couldn't accept it it was loading or it was uh",
    "start": "2075399",
    "end": "2081240"
  },
  {
    "text": "yeah stalling on something it all the ports were used all the execution units were used or so or yeah or the reorder",
    "start": "2081240",
    "end": "2088760"
  },
  {
    "text": "buffer was full Etc so that we mean back and bound of course you can have some overlap if you have at the same time",
    "start": "2088760",
    "end": "2096638"
  },
  {
    "text": "from front end bound and backend bound then it's counted as backend bound because these all slots need to sum in",
    "start": "2096639",
    "end": "2102800"
  },
  {
    "text": "the end to 100 100% or yeah so so what we want to do is to",
    "start": "2102800",
    "end": "2108839"
  },
  {
    "text": "maximize as much as possible the green slots you want to have slots that are all green per cycle",
    "start": "2108839",
    "end": "2115599"
  },
  {
    "text": "you want to fill this with useful work that you know that you actually needed to do and stall as less as possible",
    "start": "2115599",
    "end": "2124400"
  },
  {
    "text": "but with this scheme now you have seen b speculation memory disambiguation uh speculation how it",
    "start": "2124400",
    "end": "2130640"
  },
  {
    "text": "works with branch and control do this will all fall under that umbrella and",
    "start": "2130640",
    "end": "2135920"
  },
  {
    "text": "front end the fetching and decoding that you have SE now too and also some backet execution a very small part with the",
    "start": "2135920",
    "end": "2142839"
  },
  {
    "text": "stalling Etc yeah yes and that we can use to analyze our workloads and how",
    "start": "2142839",
    "end": "2148440"
  },
  {
    "text": "they run on our Hardware from the top down looking at that too because mostly we don't have this micro benchmarks that",
    "start": "2148440",
    "end": "2155359"
  },
  {
    "text": "you have seen we have Big C systems so it's difficult to reason about you don't know you have maybe learned some C++",
    "start": "2155359",
    "end": "2162800"
  },
  {
    "text": "tricks to know this line can be done faster but in the end yeah these are maybe small things that are yeah that",
    "start": "2162800",
    "end": "2170760"
  },
  {
    "text": "disappear in the in the bigger picture so from my point of view it's good to also approach these problems from the",
    "start": "2170760",
    "end": "2177319"
  },
  {
    "text": "top down with this in mind with this model imount is uh yeah it's a model",
    "start": "2177319",
    "end": "2182920"
  },
  {
    "text": "it's not a real system but it's a model yeah okay now I gave it away I",
    "start": "2182920",
    "end": "2189280"
  },
  {
    "text": "wanted to ask um what would be a program that you would say is front end bound or",
    "start": "2189280",
    "end": "2195640"
  },
  {
    "text": "could be front end bound yeah and yes yeah yeah it was a",
    "start": "2195640",
    "end": "2202520"
  },
  {
    "text": "bit too fast pressing here yeah so the um yeah so comp compilers com why",
    "start": "2202520",
    "end": "2211359"
  },
  {
    "text": "Anders yeah there's a lot of branching a lot of jumping uh probably lots of uh",
    "start": "2211359",
    "end": "2216720"
  },
  {
    "text": "smaller code which jumps under it so that gets uh yeah it's difficult so you would that's also why you see a quite",
    "start": "2216720",
    "end": "2224000"
  },
  {
    "text": "bad speculation and yeah backend bound but mostly front end bound so again you",
    "start": "2224000",
    "end": "2230319"
  },
  {
    "text": "can get these numbers by doing this uh perf command I assume everybody knows",
    "start": "2230319",
    "end": "2237480"
  },
  {
    "text": "perf see noding so yeah yeah so you do this perf command and they have a top down uh switch but uh watch out uh you",
    "start": "2237480",
    "end": "2246800"
  },
  {
    "text": "say here top down all but you need to make sure that you",
    "start": "2246800",
    "end": "2252440"
  },
  {
    "text": "fix your your running to a certain uh",
    "start": "2252440",
    "end": "2257800"
  },
  {
    "text": "core yeah and make sure that uh the m so that you avoid migration because modern",
    "start": "2257800",
    "end": "2264720"
  },
  {
    "text": "CPU cores are telling uh ah this is getting too warm here this execution I migrated to another core until that gets",
    "start": "2264720",
    "end": "2273200"
  },
  {
    "text": "too warm Etc and then if you want to get the numbers the set statistics yeah if you do the whole",
    "start": "2273200",
    "end": "2279000"
  },
  {
    "text": "machine all your statistics are then from different cores and you don't know what program did now actually run where",
    "start": "2279000",
    "end": "2286000"
  },
  {
    "text": "so and there is also some Python scripts on top of perf from pmu tools I think",
    "start": "2286000",
    "end": "2291480"
  },
  {
    "text": "from Andy clean who does this in a bit lesser yeah uh easier let's say with",
    "start": "2291480",
    "end": "2298960"
  },
  {
    "text": "easier syntax and a bit better output so setting it to the first core is C see T",
    "start": "2298960",
    "end": "2307160"
  },
  {
    "text": "it and then you can perform a ninja clang and then afterwards we clean it and we see that we get this type of",
    "start": "2307160",
    "end": "2313560"
  },
  {
    "text": "output on the console it's now it's a figure 36% so what can we do about",
    "start": "2313560",
    "end": "2319880"
  },
  {
    "text": "it yeah what can we do about it on the front end I can give you a small like",
    "start": "2319920",
    "end": "2325560"
  },
  {
    "text": "sample to see the bigger picture so let's suppose we have uh again an easy",
    "start": "2325560",
    "end": "2332560"
  },
  {
    "text": "function It Gets In A and B and it uh gets uh it can set C and it can set",
    "start": "2332560",
    "end": "2340079"
  },
  {
    "text": "D now I written in some comments hot po cold part hot part continues what does",
    "start": "2340079",
    "end": "2345880"
  },
  {
    "text": "it mean hot part hot part is a part that's exercised a",
    "start": "2345880",
    "end": "2352000"
  },
  {
    "text": "lot I think most of the time that will be clear in a Cod part that's something that you don't exercise a lot only an",
    "start": "2352000",
    "end": "2358560"
  },
  {
    "text": "exceptional cases for example here that could be uh this comparison could just",
    "start": "2358560",
    "end": "2364160"
  },
  {
    "text": "to check whether you are in a in an error case or not you don't exercise it",
    "start": "2364160",
    "end": "2369240"
  },
  {
    "text": "this a lot so hot part lots of exercise cold part exercise so what happens uh if you disassemble it and we get our",
    "start": "2369240",
    "end": "2376760"
  },
  {
    "text": "instructions here again now you could see you have here the comparison between A and",
    "start": "2376760",
    "end": "2383560"
  },
  {
    "text": "B you have the jump that says if so Branch taken if it's",
    "start": "2383560",
    "end": "2390480"
  },
  {
    "text": "yes or if it's no sorry so Branch not taken then you set it to one one so",
    "start": "2390480",
    "end": "2398119"
  },
  {
    "text": "here's the cold path four and at offset a starts the hot poth again D3 so you so",
    "start": "2398119",
    "end": "2406760"
  },
  {
    "text": "Branch taken you jump from two to a and you start fishing from",
    "start": "2406760",
    "end": "2414000"
  },
  {
    "text": "here so you see it better in this uh maybe in this box so you are",
    "start": "2415240",
    "end": "2420319"
  },
  {
    "text": "here and then you want to know you do this compar you have done this comparison here so I jump into another",
    "start": "2420319",
    "end": "2426480"
  },
  {
    "text": "place in memory to get my uh go to my hot code or otherwise Branch taken or",
    "start": "2426480",
    "end": "2432079"
  },
  {
    "text": "not taken you just fall two into the cold case so here's the hot case here's",
    "start": "2432079",
    "end": "2437119"
  },
  {
    "text": "the Cod case as you can see here also in the memory out the Cod case hot",
    "start": "2437119",
    "end": "2445640"
  },
  {
    "text": "case so what would be more optimized more optimized is that we put",
    "start": "2445720",
    "end": "2451079"
  },
  {
    "text": "hot Cod uh hot hot cold you should have cat and cold",
    "start": "2451079",
    "end": "2456839"
  },
  {
    "text": "yeah should have maybe find other names but uh you want to have the hot code as much as possible together you want to",
    "start": "2456839",
    "end": "2464119"
  },
  {
    "text": "separated from the cold code yeah so uh",
    "start": "2464119",
    "end": "2470119"
  },
  {
    "text": "how can you do that you have a for example a C++ attribute that says where",
    "start": "2470119",
    "end": "2475200"
  },
  {
    "text": "you tell you also can do it in earlier versions I think this is C++ 20 we can",
    "start": "2475200",
    "end": "2481800"
  },
  {
    "text": "say unlikely what does the compiler do then it does some other trickery it will",
    "start": "2481800",
    "end": "2488400"
  },
  {
    "text": "double some of the here the settings to of D to three so it has a bit of",
    "start": "2488400",
    "end": "2495359"
  },
  {
    "text": "duplication but what it do then it will put the hot coat the hot coat close to",
    "start": "2495359",
    "end": "2501400"
  },
  {
    "text": "the jump so if you're fetching you're already there into memory you you just",
    "start": "2501400",
    "end": "2507280"
  },
  {
    "text": "also think about that this the this other parts where you need to jump to can be very far in memory and you need",
    "start": "2507280",
    "end": "2513440"
  },
  {
    "text": "to maybe fetch it from uh from memory and it's not in the cach don't get it so",
    "start": "2513440",
    "end": "2519119"
  },
  {
    "text": "so what is good yeah we just assume that the branch",
    "start": "2519119",
    "end": "2526359"
  },
  {
    "text": "predictor will predict the the branch is true by default I think uh it's maybe",
    "start": "2526359",
    "end": "2534440"
  },
  {
    "text": "Anders knows this more but I think it will choose not taken first I think yeah",
    "start": "2534440",
    "end": "2540200"
  },
  {
    "text": "so it chose the full through part first but if we take one br predict it next",
    "start": "2540200",
    "end": "2547040"
  },
  {
    "text": "time that we take it again yeah like how how intelligent it is does it only remember the last that was taken or does",
    "start": "2547040",
    "end": "2553319"
  },
  {
    "text": "it remember uh this I think we can have a another hour talk about it yeah maybe",
    "start": "2553319",
    "end": "2560079"
  },
  {
    "text": "for next time but it doesn't most uh uh most intelligent branch predictors that",
    "start": "2560079",
    "end": "2566200"
  },
  {
    "text": "nowadays they use the history and also from where you come uh in which part Etc",
    "start": "2566200",
    "end": "2572400"
  },
  {
    "text": "so uh so but that may be an interesting talk for next but I don't have time to to go into that I think yeah but in",
    "start": "2572400",
    "end": "2579720"
  },
  {
    "text": "either case it will try to predict as best as possible and it will normally think not taken just because because of",
    "start": "2579720",
    "end": "2587119"
  },
  {
    "text": "this reason is that fetching is easier when it's uh not taken Branch because it's closer into",
    "start": "2587119",
    "end": "2594280"
  },
  {
    "text": "memory yeah only the you already patch the the maybe",
    "start": "2594280",
    "end": "2602800"
  },
  {
    "text": "the rest of the H is yeah yeah exactly so this is a a good",
    "start": "2602800",
    "end": "2610359"
  },
  {
    "text": "step up to my next slide so one yeah so one untaken branches are easier actually",
    "start": "2610359",
    "end": "2618480"
  },
  {
    "text": "I don't know whether it's always true now anymore I think they can but you could say you can take two branches if",
    "start": "2618480",
    "end": "2624599"
  },
  {
    "text": "they are well aligned the in memory you can take two untaken branches in one cycle but the taken Brin takes two",
    "start": "2624599",
    "end": "2631920"
  },
  {
    "text": "cycles often so that's a big difference so you lose two cycles yeah so these slots two times they will be as tall",
    "start": "2631920",
    "end": "2639160"
  },
  {
    "text": "yeah of the front end bounds yeah so so and why is this better is because the",
    "start": "2639160",
    "end": "2645079"
  },
  {
    "text": "front end kind of fetches memory in chunks 32 bytes chunks before it was 16",
    "start": "2645079",
    "end": "2651160"
  },
  {
    "text": "bytes but now it was 32 bytes so whatever comes after the jump and you",
    "start": "2651160",
    "end": "2657040"
  },
  {
    "text": "actually take the branch taken then that's instructions or memory that you",
    "start": "2657040",
    "end": "2662680"
  },
  {
    "text": "wouldn't have need to be taken uh so so that's all than polluting the cach and",
    "start": "2662680",
    "end": "2667920"
  },
  {
    "text": "maybe evicting some things that you that you were using very much so you would like to avoid that as much as possible",
    "start": "2667920",
    "end": "2674640"
  },
  {
    "text": "to have uh Cod cold code in your cach you actually want to have only",
    "start": "2674640",
    "end": "2681000"
  },
  {
    "text": "hot cod in your cach if you want to yeah okay so other things you can do I",
    "start": "2681000",
    "end": "2687839"
  },
  {
    "text": "think um you have systems that also tried to uh do function splittings so that",
    "start": "2687839",
    "end": "2694839"
  },
  {
    "text": "they have more variability or more decisions that they can make to put this",
    "start": "2694839",
    "end": "2700480"
  },
  {
    "text": "hot code together with the other hot code yeah um to give an example a good",
    "start": "2700480",
    "end": "2708000"
  },
  {
    "text": "example is something it's called Uh Google propeller and they can do this for you",
    "start": "2708000",
    "end": "2716400"
  },
  {
    "text": "so they anal I think it's a post link time optimization so they get your binaries and",
    "start": "2716400",
    "end": "2722800"
  },
  {
    "text": "they have a profiled clang they some of the perve profiles use that data to make",
    "start": "2722800",
    "end": "2729400"
  },
  {
    "text": "a more propelled clang let's just say that so they improved this hot code hot",
    "start": "2729400",
    "end": "2736200"
  },
  {
    "text": "code code code layout so again yeah I keep doing this mistake again but okay",
    "start": "2736200",
    "end": "2743280"
  },
  {
    "text": "and what you see here is that only doing that or only yeah it's a lot of movement",
    "start": "2743280",
    "end": "2748920"
  },
  {
    "text": "you get four% less W clock time compared to the Baseline of clang which were also",
    "start": "2748920",
    "end": "2754119"
  },
  {
    "text": "already optimized with uh uh with um profile guidet optimization",
    "start": "2754119",
    "end": "2760520"
  },
  {
    "text": "and lto for example so and four% is a lot if you do this I don't know who said it on the",
    "start": "2760520",
    "end": "2767400"
  },
  {
    "text": "first day 1% 2% you can just remove yeah you don't need to use so many uh many",
    "start": "2767400",
    "end": "2774200"
  },
  {
    "text": "computer servers anymore it's a huge deal 4% seems small but it's a huge deal",
    "start": "2774200",
    "end": "2779319"
  },
  {
    "text": "if you look at it in the big picture of a data center which they have this Loop",
    "start": "2779319",
    "end": "2785160"
  },
  {
    "text": "feedback loop compiling profiling compiling again or linking improving so",
    "start": "2785160",
    "end": "2790920"
  },
  {
    "text": "if you can do this much faster also that would be",
    "start": "2790920",
    "end": "2796359"
  },
  {
    "text": "good okay now you see also this is a picture from the the paper that they",
    "start": "2798359",
    "end": "2804960"
  },
  {
    "text": "that they had published about it so on the left side here they used profile garet",
    "start": "2804960",
    "end": "2811359"
  },
  {
    "text": "optimization and Link time optimization so so it was already an improved version",
    "start": "2811359",
    "end": "2816920"
  },
  {
    "text": "they want to see how much better it was and I think they had 7% Improvement but",
    "start": "2816920",
    "end": "2822920"
  },
  {
    "text": "that was with older older servers Etc older CPUs so so probably we had here",
    "start": "2822920",
    "end": "2829000"
  },
  {
    "text": "some improvements now when I tested it on the on the front end side of the hardware I use and you see on the x-axis",
    "start": "2829000",
    "end": "2835640"
  },
  {
    "text": "is time and on the y- AIS you have uh",
    "start": "2835640",
    "end": "2840760"
  },
  {
    "text": "the basically an idea on the location where memory is accessed",
    "start": "2840760",
    "end": "2847720"
  },
  {
    "text": "so this is the offset of certain memory address we just didn't want to write I think all the memory addresses uh long",
    "start": "2848040",
    "end": "2855599"
  },
  {
    "text": "because then the picture would be a bit Yeah confusing but you you see on the Bas sign you see that the aises are much",
    "start": "2855599",
    "end": "2861760"
  },
  {
    "text": "more spread over time temporarily and spatially and that's why it's not so",
    "start": "2861760",
    "end": "2868599"
  },
  {
    "text": "optimized but if you see on the propelled version you see a band much thicker band much less",
    "start": "2868599",
    "end": "2874680"
  },
  {
    "text": "spreading out of accesses so this not really lines it's like access points",
    "start": "2874680",
    "end": "2879839"
  },
  {
    "text": "yeah it's like at that time I need to access this memory part at that time so it's small little points that form a",
    "start": "2879839",
    "end": "2886599"
  },
  {
    "text": "line so that means here that in time you're you're basically accessing very",
    "start": "2886599",
    "end": "2892960"
  },
  {
    "text": "close memory very close to each other over time and in the bigger picture also",
    "start": "2892960",
    "end": "2899880"
  },
  {
    "text": "compared to this one so it means much more of your hot part will be in the cache you won't have so many um uh page",
    "start": "2899880",
    "end": "2909400"
  },
  {
    "text": "walks that you need to do um so I think",
    "start": "2909400",
    "end": "2914520"
  },
  {
    "text": "this picture shows well why you get this improvements of",
    "start": "2914520",
    "end": "2920520"
  },
  {
    "text": "four% okay questions",
    "start": "2920520",
    "end": "2928119"
  },
  {
    "text": "yeah there's a rightand so you also Access Memory that's very close l",
    "start": "2928720",
    "end": "2937040"
  },
  {
    "text": "here you mean yeah",
    "start": "2937040",
    "end": "2943680"
  },
  {
    "text": "yeah afraid that you have to look consistently a bit further",
    "start": "2943680",
    "end": "2949640"
  },
  {
    "text": "but okay no this is okay I have the um",
    "start": "2949640",
    "end": "2954799"
  },
  {
    "text": "these are basically memory locations absolute memory locations or",
    "start": "2954799",
    "end": "2961400"
  },
  {
    "text": "virtual memory addresses so it doesn't matter so much the offset we could have had the band here that would have been fine",
    "start": "2961400",
    "end": "2969880"
  },
  {
    "text": "as long as it's close to each other so you see it as a map yeah",
    "start": "2969880",
    "end": "2977599"
  },
  {
    "text": "l no yeah the absolute the absolute memory address sorry for the confusion",
    "start": "2977599",
    "end": "2983640"
  },
  {
    "text": "that's that's cor it's good that you ask yeah um yeah next one I think have 10",
    "start": "2983640",
    "end": "2992440"
  },
  {
    "text": "yeah yes okay uh then maybe next one so bad speculation part so that that was",
    "start": "2992440",
    "end": "3000000"
  },
  {
    "text": "another type of slots in this case bad speculation Branch control uh control",
    "start": "3000000",
    "end": "3005280"
  },
  {
    "text": "speculation binary search I saw the talk of Andre so this will be disappearing into nothing yeah uh so this is uh so",
    "start": "3005280",
    "end": "3014200"
  },
  {
    "text": "this is a typically a search of the lower bound and why is this bad speculation",
    "start": "3014200",
    "end": "3021760"
  },
  {
    "text": "why do we get bad speculation uh here I would like they have shown the numbers",
    "start": "3021760",
    "end": "3026799"
  },
  {
    "text": "which I had before the same graphs but I'm bad sh but they actually uh couldn't",
    "start": "3026799",
    "end": "3033160"
  },
  {
    "text": "reproduce it on the computer I had so so it differs also per Hardware that you",
    "start": "3033160",
    "end": "3038280"
  },
  {
    "text": "use but let's suppose this is bad speculation in the bigger picture and",
    "start": "3038280",
    "end": "3043319"
  },
  {
    "text": "this comes because of this this comparison this is a comparison that can",
    "start": "3043319",
    "end": "3050160"
  },
  {
    "text": "go either way about 50% left 50% right so it's very difficult for the predictor",
    "start": "3050160",
    "end": "3056760"
  },
  {
    "text": "on top of that you have a memory access here and if you're if this is very big",
    "start": "3056760",
    "end": "3064119"
  },
  {
    "text": "arrays it won't be in the cache or not in the closest cache maybe in L2 or",
    "start": "3064119",
    "end": "3069599"
  },
  {
    "text": "maybe into memory so in the meantime while you're waiting for this memory",
    "start": "3069599",
    "end": "3075440"
  },
  {
    "text": "address to be uh yeah for this uh value to get from",
    "start": "3075440",
    "end": "3080960"
  },
  {
    "text": "the memory address you're speculating and you can do that 45 about 45 branches",
    "start": "3080960",
    "end": "3087160"
  },
  {
    "text": "deep which is quite a lot so you will Discover it very late so you get a lot",
    "start": "3087160",
    "end": "3092200"
  },
  {
    "text": "of bad speculation if this is wrong 50% of the time so that's the reason",
    "start": "3092200",
    "end": "3099400"
  },
  {
    "text": "why this is uh this will be worse when it comes to uh",
    "start": "3099400",
    "end": "3104960"
  },
  {
    "text": "speculation so I have here a picture over certain area size I got this this",
    "start": "3105960",
    "end": "3111880"
  },
  {
    "text": "example from actually a very good book I thought it gives you also insights into Hardware CPU it's online available it's",
    "start": "3111880",
    "end": "3119160"
  },
  {
    "text": "from uh Sergey sloten it's called algorithm if you're interested very good",
    "start": "3119160",
    "end": "3124880"
  },
  {
    "text": "read they have a Russian version was difficult to read for me uh and they have an English version that is up to",
    "start": "3124880",
    "end": "3131520"
  },
  {
    "text": "date but the Russian version is a bit uh yeah um I assume more up to date that's",
    "start": "3131520",
    "end": "3136920"
  },
  {
    "text": "what it tells me in English uh that's what it tells in so what they did then was write",
    "start": "3136920",
    "end": "3143720"
  },
  {
    "text": "another version of this binary search a version that basically doesn't allow",
    "start": "3143720",
    "end": "3150319"
  },
  {
    "text": "you to speculate because here this if",
    "start": "3150319",
    "end": "3155520"
  },
  {
    "text": "statement now also this if statement will be um transferred what they call a",
    "start": "3155520",
    "end": "3163119"
  },
  {
    "text": "conditional move so you only put uh so you only uh put the x value",
    "start": "3163119",
    "end": "3170000"
  },
  {
    "text": "there when this condition is true okay",
    "start": "3170000",
    "end": "3176000"
  },
  {
    "text": "so so you don't have this Branch speculation here it will end up in an",
    "start": "3176000",
    "end": "3181319"
  },
  {
    "text": "ordinary instruction it's called conditional move so you won't be having this comparison jump instructions that",
    "start": "3181319",
    "end": "3188000"
  },
  {
    "text": "we have seen before so there's no ending of the basic boook so it doesn't need to predict anything so that's why we don't",
    "start": "3188000",
    "end": "3194960"
  },
  {
    "text": "get a bad speculation thing here so what you see here this is",
    "start": "3194960",
    "end": "3202559"
  },
  {
    "text": "basically Branch test programming right yeah so you try to avoid the branches",
    "start": "3202559",
    "end": "3207599"
  },
  {
    "text": "the the jumps in your cod in your so here you see that the branchless",
    "start": "3207599",
    "end": "3214280"
  },
  {
    "text": "version is much better for a certain um that the Norwegian word St how for a",
    "start": "3214280",
    "end": "3222400"
  },
  {
    "text": "certain um yeah how large the area size is but from this point it starts to be",
    "start": "3222400",
    "end": "3228920"
  },
  {
    "text": "worse any idea why this can",
    "start": "3228920",
    "end": "3234000"
  },
  {
    "text": "be why why this gets now more back and bound why do we need to",
    "start": "3234000",
    "end": "3239760"
  },
  {
    "text": "wait because we removed all the bad",
    "start": "3239760",
    "end": "3245200"
  },
  {
    "text": "speculation yeah yeah exactly yeah so you you will uh so you remember this",
    "start": "3246160",
    "end": "3251640"
  },
  {
    "text": "tree normally it will Traverse and it will try to do the loads what it can Etc and so would already",
    "start": "3251640",
    "end": "3257599"
  },
  {
    "text": "prepare to some extent not perfectly your your uh your data so that it put in",
    "start": "3257599",
    "end": "3263960"
  },
  {
    "text": "the cache okay not perfect because it doesn't know exactly uh yeah what to do",
    "start": "3263960",
    "end": "3269280"
  },
  {
    "text": "with the 50 50% case but it will do it uh yeah rather well yeah but we can",
    "start": "3269280",
    "end": "3275720"
  },
  {
    "text": "improve it we can improve this memory boundness SO waiting for memory because we don't do the loads anymore as we",
    "start": "3275720",
    "end": "3282680"
  },
  {
    "text": "would do um with the with the speculation with the speculation me",
    "start": "3282680",
    "end": "3288480"
  },
  {
    "text": "mechanism so we can do this by changing the layout it's something called very",
    "start": "3288480",
    "end": "3294160"
  },
  {
    "text": "good paper from I hope I pronouncing it well from I singer it's kind of I singer",
    "start": "3294160",
    "end": "3299799"
  },
  {
    "text": "layout where you're going to lay out the array according to how you access how frequent you",
    "start": "3299799",
    "end": "3306160"
  },
  {
    "text": "access the or the order how you access actually your binary search so let's say",
    "start": "3306160",
    "end": "3311680"
  },
  {
    "text": "you have a an array from zero to nine in this case you would first",
    "start": "3311680",
    "end": "3319920"
  },
  {
    "text": "access this one then you would try to access three and seven then you would try XIs 58 or",
    "start": "3320240",
    "end": "3328240"
  },
  {
    "text": "9 if you go uh if you have your binary search in",
    "start": "3328240",
    "end": "3334079"
  },
  {
    "text": "it and 0 to four could have been balanced I would have even have a better",
    "start": "3334079",
    "end": "3339280"
  },
  {
    "text": "picture but you could rearrange your array from 0 to 9 to this way and in",
    "start": "3339280",
    "end": "3346200"
  },
  {
    "text": "this way and then when you would preit now you would know if you're here you would maybe prefet this in memory three",
    "start": "3346200",
    "end": "3353559"
  },
  {
    "text": "and seven already so your much more likely to get your data into the cache",
    "start": "3353559",
    "end": "3359359"
  },
  {
    "text": "because it's ordered according to you have access so it's more more temporal",
    "start": "3359359",
    "end": "3364400"
  },
  {
    "text": "uh locality so you would have more more elements that are correct in",
    "start": "3364400",
    "end": "3369559"
  },
  {
    "text": "the cache so so this is how it would access so you start here 15 then you go",
    "start": "3369559",
    "end": "3376240"
  },
  {
    "text": "here and then you jump to here and they're all these parts they're all uh yeah close to each",
    "start": "3376240",
    "end": "3384640"
  },
  {
    "text": "other what you need to so here you can see the frequency",
    "start": "3384640",
    "end": "3391039"
  },
  {
    "text": "graph again so by changing this layout you can get a much more Improvement and",
    "start": "3391039",
    "end": "3397079"
  },
  {
    "text": "by prefetching it we can get much more an improvement over the Baseline one the Baseline lower",
    "start": "3397079",
    "end": "3403559"
  },
  {
    "text": "bound also for the bigger area so look at the yellow",
    "start": "3403559",
    "end": "3409440"
  },
  {
    "text": "here that's it for me I think that's uh I",
    "start": "3413880",
    "end": "3419039"
  },
  {
    "text": "hope you you see that a modern CPU does a lot to increase uh",
    "start": "3419039",
    "end": "3424720"
  },
  {
    "text": "performance I think um Performance Tuning while understanding the underlying CPU is important otherwise",
    "start": "3424720",
    "end": "3432359"
  },
  {
    "text": "you it's very vague and it's difficult to know what to do so that's why I like the top down",
    "start": "3432359",
    "end": "3437880"
  },
  {
    "text": "approach um every CPU is different which I found out myself so measure measure",
    "start": "3437880",
    "end": "3443559"
  },
  {
    "text": "measure also on different hardware and I also showed that if you think quite",
    "start": "3443559",
    "end": "3450280"
  },
  {
    "text": "creatively you can with some micro Benchmark understand understand the less well-known CPU",
    "start": "3450280",
    "end": "3456920"
  },
  {
    "text": "features so that was it for me thanks a [Applause]",
    "start": "3456920",
    "end": "3464619"
  },
  {
    "text": "lot yeah yes",
    "start": "3471160",
    "end": "3476799"
  },
  {
    "text": "okay",
    "start": "3477200",
    "end": "3479558"
  },
  {
    "text": "shoot any where I it's probably unlike uh I think you yeah I think it's uh if",
    "start": "3484079",
    "end": "3492359"
  },
  {
    "text": "you slap it um everywhere where you want to then it's likely that it won't get",
    "start": "3492359",
    "end": "3497640"
  },
  {
    "text": "the best result because what do you do if you have unlikely on different parts or yeah what would the pn or you put",
    "start": "3497640",
    "end": "3505920"
  },
  {
    "text": "likely and unlikely on the same part so so then it gets confused so",
    "start": "3505920",
    "end": "3513039"
  },
  {
    "text": "yeah so I would use it sparingly yeah once you detected where the problem",
    "start": "3513039",
    "end": "3520558"
  },
  {
    "text": "is um I I would first measure measure and see where it is where you put your",
    "start": "3530799",
    "end": "3537079"
  },
  {
    "text": "effort also yeah so",
    "start": "3537079",
    "end": "3541400"
  },
  {
    "text": "the [Music] um yeah I think more or less",
    "start": "3547039",
    "end": "3554960"
  },
  {
    "text": "yeah of course many details are different yeah they have a different way I think and also arm has probably also",
    "start": "3554960",
    "end": "3560960"
  },
  {
    "text": "an in order processor like so it's difficult to say yeah so so",
    "start": "3560960",
    "end": "3568960"
  },
  {
    "text": "the yeah other question was that",
    "start": "3570920",
    "end": "3580640"
  },
  {
    "text": "it okay thanks a lot yeah see you after",
    "start": "3581079",
    "end": "3588559"
  }
]