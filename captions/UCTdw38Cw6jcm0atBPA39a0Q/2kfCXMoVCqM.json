[
  {
    "text": "all right I'm Carl Franklin I'm going to be talking about Polly which is an open",
    "start": "8970",
    "end": "14830"
  },
  {
    "text": "sore project that you can use to do resilience strategies and retry",
    "start": "14830",
    "end": "21470"
  },
  {
    "text": "strategies for connected systems that have transient errors and so that's what",
    "start": "21470",
    "end": "28880"
  },
  {
    "text": "this talk is all about there are two talks here at NDC on poly the other one's gonna be Friday right",
    "start": "28880",
    "end": "34940"
  },
  {
    "text": "here in this room it 11:40 by Brian Hogan and he's here as well I'm sort of",
    "start": "34940",
    "end": "41690"
  },
  {
    "text": "giving the the starter pitch the overview and then Brian's gonna dig into",
    "start": "41690",
    "end": "47510"
  },
  {
    "text": "some more interesting things on Friday so first of all I want to tell you about",
    "start": "47510",
    "end": "55100"
  },
  {
    "text": "my company app-v next we are the the Shepherds the current shepherds of the poly project which talking about here",
    "start": "55100",
    "end": "62410"
  },
  {
    "text": "appiy next is a consultancy which I started how many people listen to dotnet",
    "start": "62410",
    "end": "67910"
  },
  {
    "text": "rocks hey I've heard that show okay now that's a free podcast that's been on the",
    "start": "67910",
    "end": "73190"
  },
  {
    "text": "air since 2002 a long long time and basically reached out in a newsletter to",
    "start": "73190",
    "end": "80030"
  },
  {
    "text": "listeners and said anybody interested in in their spare time working on some cool projects and I got a whole bunch of",
    "start": "80030",
    "end": "86840"
  },
  {
    "text": "people that wrote me back and said yes I fed it a whole bunch of them we started",
    "start": "86840",
    "end": "92090"
  },
  {
    "text": "a slack channel and then out of those about ten stuck around and became social and and we were sort of the the guys",
    "start": "92090",
    "end": "99380"
  },
  {
    "text": "that took over this project anyway so if you're interested in a Phoenix you can",
    "start": "99380",
    "end": "104390"
  },
  {
    "text": "talk to me after Polly was accepted into the dotnet foundation in October 2016",
    "start": "104390",
    "end": "111140"
  },
  {
    "text": "the dotnet foundation is a sort of well",
    "start": "111140",
    "end": "116210"
  },
  {
    "text": "it's a sort of a place of honor where open-source projects go and get visible",
    "start": "116210",
    "end": "121969"
  },
  {
    "text": "support from Microsoft that's really all it is and it was an honor to be in be considered in the.net",
    "start": "121969",
    "end": "129649"
  },
  {
    "text": "foundation all right so we're talking about transient errors these are things",
    "start": "129649",
    "end": "134990"
  },
  {
    "text": "that happen on outside of your control whether the network outages or service outages or you know",
    "start": "134990",
    "end": "141950"
  },
  {
    "text": "a service goes down for some reason maybe it's in the code maybe it's in the",
    "start": "141950",
    "end": "147260"
  },
  {
    "text": "infrastructure we don't really know denial of service attacks can happen these these are just things that happen",
    "start": "147260",
    "end": "153950"
  },
  {
    "text": "and how do you gracefully recover from these that's what poly helps with and",
    "start": "153950",
    "end": "159670"
  },
  {
    "text": "it's not necessarily all client-side stuff that we have to worry about because let's face it if you're using a",
    "start": "159670",
    "end": "167959"
  },
  {
    "text": "browser and the network goes down you don't you know you don't expect the app",
    "start": "167959",
    "end": "173239"
  },
  {
    "text": "to gracefully tell you the network is down it's you know Gmail does this nicely oops we can't you know get the",
    "start": "173239",
    "end": "180530"
  },
  {
    "text": "network right now maybe you want to retry we're gonna retry in a little bit but if you want to retry now you can do",
    "start": "180530",
    "end": "185630"
  },
  {
    "text": "that and that's nice but you know if you're if your screen just blows up that's life right I mean this is what",
    "start": "185630",
    "end": "192560"
  },
  {
    "text": "we're used to but in a micro-services world when services are talking to services nobody's there to go oops",
    "start": "192560",
    "end": "201200"
  },
  {
    "text": "you know so your code has to retry or or come up with some sort of resilience",
    "start": "201200",
    "end": "206510"
  },
  {
    "text": "strategy and that's what probably really helps you with so what happens this is a",
    "start": "206510",
    "end": "212510"
  },
  {
    "text": "really good example of what happens when you're you have a service that's struggling one service is talking to",
    "start": "212510",
    "end": "218180"
  },
  {
    "text": "another service and that downstream service is struggling and you're pelting it with retries well this is kind of",
    "start": "218180",
    "end": "224959"
  },
  {
    "text": "this is kind of what happens if you remember this but this is from us a show",
    "start": "224959",
    "end": "232670"
  },
  {
    "text": "called I Love Lucy in the 50s where Lucy and Ethel got a job wrapping strawberries or chocolates or something",
    "start": "232670",
    "end": "239329"
  },
  {
    "text": "as they come down this conveyor belt and then they go a little bit too fast and they notice that you know they can't",
    "start": "239329",
    "end": "246620"
  },
  {
    "text": "keep up with it and so they don't really have any resilient strategy to deal with this problem and so your downstream",
    "start": "246620",
    "end": "252739"
  },
  {
    "text": "service is getting pinged with all these retries and you become the denial of",
    "start": "252739",
    "end": "258590"
  },
  {
    "text": "service attack err that's basically what's happening here so we're gonna try to figure out how to deal with that so",
    "start": "258590",
    "end": "267200"
  },
  {
    "text": "Polly is here's all about it dot net 4.5",
    "start": "267200",
    "end": "272780"
  },
  {
    "text": "and higher standard one point which is you know pretty pretty down there pretty low right standard to.net",
    "start": "272780",
    "end": "280970"
  },
  {
    "text": "core 2.1 it you use this fluent syntax to express these transient exception",
    "start": "280970",
    "end": "287419"
  },
  {
    "text": "policies and that's why poly is called poly it's not because of the parrot its policies and these policies are just",
    "start": "287419",
    "end": "294860"
  },
  {
    "text": "objects and we can do all sorts of strategies like retries and circuit breakers and timeouts and bulkhead",
    "start": "294860",
    "end": "300889"
  },
  {
    "text": "isolation and and fallback and this is exactly what we're going to talk about",
    "start": "300889",
    "end": "306430"
  },
  {
    "text": "it's on new get install - package poly pretty simple so these are the resilient",
    "start": "306430",
    "end": "314479"
  },
  {
    "text": "strategies you've got retry which is maybe it's just a blip maybe it'll just work itself out a circuit breaker helps",
    "start": "314479",
    "end": "322460"
  },
  {
    "text": "that you know chocolate wrapping strategy right there you know that system is down it's struggling we're",
    "start": "322460",
    "end": "328910"
  },
  {
    "text": "going to stop making calls to it on our side so it can recover the time out",
    "start": "328910",
    "end": "334910"
  },
  {
    "text": "simply don't wait forever a bulkhead isolation is sort of a way that you can",
    "start": "334910",
    "end": "340450"
  },
  {
    "text": "appropriate appropriate resources so that one struggling service doesn't take",
    "start": "340450",
    "end": "347120"
  },
  {
    "text": "down all the other services and caching pretty pretty easy to understand there",
    "start": "347120",
    "end": "354020"
  },
  {
    "text": "and then fallback is just a way to to fail gracefully with a an exception",
    "start": "354020",
    "end": "361310"
  },
  {
    "text": "message that makes sense and you can combine these and wrap them inside each",
    "start": "361310",
    "end": "366410"
  },
  {
    "text": "other no it's actually not a cache that",
    "start": "366410",
    "end": "372410"
  },
  {
    "text": "we provide we snuggle up to whatever Redis or last to search or whatever you",
    "start": "372410",
    "end": "378080"
  },
  {
    "text": "want to use yeah so here's the history of poly in 2013 Michael wolf and then",
    "start": "378080",
    "end": "384320"
  },
  {
    "text": "started poly I got actually got to meet him which was great and in 2015 Scott",
    "start": "384320",
    "end": "390050"
  },
  {
    "text": "Hanselman recommended it we on dotnet rocks also recommended it in 2015",
    "start": "390050",
    "end": "395150"
  },
  {
    "text": "thought works recommended it in December 2015 we took stewardship and added fully",
    "start": "395150",
    "end": "402110"
  },
  {
    "text": "synchronous support and then we started doing all these other things like the advanced circuit breaker",
    "start": "402110",
    "end": "408300"
  },
  {
    "text": "and other features and the really recent",
    "start": "408300",
    "end": "414030"
  },
  {
    "text": "landmark which was great last year we were brought into dotnet core 2.1 with",
    "start": "414030",
    "end": "420720"
  },
  {
    "text": "the HTTP client factory they actually use our code base in the.net core",
    "start": "420720",
    "end": "425909"
  },
  {
    "text": "framework which is great now this isn't these are these numbers",
    "start": "425909",
    "end": "433259"
  },
  {
    "text": "are correct for adaptation adoption rather but the graph is a little bit out",
    "start": "433259",
    "end": "438599"
  },
  {
    "text": "of date so all poly packages to date is over 16 million downloads 47 releases is 39",
    "start": "438599",
    "end": "446490"
  },
  {
    "text": "since we took over so that's quite a quite a trip",
    "start": "446490",
    "end": "451789"
  },
  {
    "text": "alright so here's just simple syntax step 1 you define the policy and this policy is just an object so once you",
    "start": "451940",
    "end": "459960"
  },
  {
    "text": "have this policy and you define what exceptions you have and what the resilience strategy is then you make a",
    "start": "459960",
    "end": "466379"
  },
  {
    "text": "call whatever whatever code you want to run you run within the context of the policy execute a sync right there",
    "start": "466379",
    "end": "475550"
  },
  {
    "text": "alright so first let's talk about the retry patterns because there are a few of these retried just retries",
    "start": "475550",
    "end": "482219"
  },
  {
    "text": "immediately upon failure so specify the number of retries and then a wait and",
    "start": "482219",
    "end": "488279"
  },
  {
    "text": "retry puts a timeout in between each retry and then that can be a constant",
    "start": "488279",
    "end": "495029"
  },
  {
    "text": "number or you can increment it every time so this is one of the ideas the",
    "start": "495029",
    "end": "500610"
  },
  {
    "text": "exponential back-off right so first you wait two seconds then you wait 4 seconds then you wait 16 seconds anyway 32",
    "start": "500610",
    "end": "507419"
  },
  {
    "text": "seconds etc and it sort of backs off a little bit more each time",
    "start": "507419",
    "end": "513560"
  },
  {
    "text": "retry forever it just keeps it is what it is keeps retrying until it succeeds",
    "start": "513560",
    "end": "519630"
  },
  {
    "text": "or you stop it the circuit breaker is",
    "start": "519630",
    "end": "524850"
  },
  {
    "text": "great because this this essentially takes that struggling service and gives",
    "start": "524850",
    "end": "529980"
  },
  {
    "text": "it a break gives it time to recover the circuit breaker says like the ladies in",
    "start": "529980",
    "end": "535350"
  },
  {
    "text": "the video stop sending the chocolates stop the conveyor belt right stop",
    "start": "535350",
    "end": "540390"
  },
  {
    "text": "hammering that downstream service with calls we break it right at the calling side and fail to the caller to",
    "start": "540390",
    "end": "547710"
  },
  {
    "text": "call encode and you fail fast to prevent cascading effects timeout and these",
    "start": "547710",
    "end": "556320"
  },
  {
    "text": "things like I said can be combined together so a timeout could be like the outermost policy right whereas you know",
    "start": "556320",
    "end": "565980"
  },
  {
    "text": "we can try all these circuit breakers and things but if after a half-hour this still this thing still isn't coming back",
    "start": "565980",
    "end": "571860"
  },
  {
    "text": "wait till tomorrow you know it's no big deal and bulkhead isolation is the",
    "start": "571860",
    "end": "580500"
  },
  {
    "text": "source of this idea is large ocean vessels the hulls are divided into",
    "start": "580500",
    "end": "585690"
  },
  {
    "text": "bulkheads rather than having one big hollow hull you know like the Titanic",
    "start": "585690",
    "end": "591480"
  },
  {
    "text": "let's say you've got sections so if a torpedo hits one section only that",
    "start": "591480",
    "end": "597720"
  },
  {
    "text": "section that bulkhead will fill up with water it won't sink the whole ship and the idea is akin to threading so if you",
    "start": "597720",
    "end": "605340"
  },
  {
    "text": "if you're making a call to system a and it's working and you're making another call to service B and that is struggling",
    "start": "605340",
    "end": "612930"
  },
  {
    "text": "well you're calling code resources your cpu resources is being taken up by waiting",
    "start": "612930",
    "end": "618870"
  },
  {
    "text": "for that struggling one all the time and then the calls that are being made to",
    "start": "618870",
    "end": "624240"
  },
  {
    "text": "the you know service a that are working suffer because all the attention is paid",
    "start": "624240",
    "end": "630450"
  },
  {
    "text": "to the one that's struggling so that basically is a way to separate out all",
    "start": "630450",
    "end": "635610"
  },
  {
    "text": "the calls if you're making multiple calls to multiple services on one on one client that can save you from taking",
    "start": "635610",
    "end": "643500"
  },
  {
    "text": "down the whole ship and then the cash like I said before it's a pluggable",
    "start": "643500",
    "end": "648839"
  },
  {
    "text": "interface you can add any cash provider that you want and you know you've asked",
    "start": "648839",
    "end": "655620"
  },
  {
    "text": "for that before that's a that's a resilient strategy so if you have a cache you can plug it in and fallback is",
    "start": "655620",
    "end": "664470"
  },
  {
    "text": "simply the last gasp before giving up it's a way to provide a substitute value",
    "start": "664470",
    "end": "671670"
  },
  {
    "text": "or message or action when an operation fails after all is said and done a policy wrap",
    "start": "671670",
    "end": "680160"
  },
  {
    "text": "is a way to combine policies into a single object so starting with the",
    "start": "680160",
    "end": "687960"
  },
  {
    "text": "outermost so fall back is the outermost if you think of these as nested calls right then the retried and the circuit",
    "start": "687960",
    "end": "695130"
  },
  {
    "text": "breaker then the timeout and then you can just execute that as one single policy I'm gonna show you the code for",
    "start": "695130",
    "end": "701250"
  },
  {
    "text": "all of these things so to recap you have you define your",
    "start": "701250",
    "end": "707820"
  },
  {
    "text": "transient exception handling with a policy you use this fluent and concise",
    "start": "707820",
    "end": "714330"
  },
  {
    "text": "syntax these objects are thread safe you can reuse them across call sites and",
    "start": "714330",
    "end": "720180"
  },
  {
    "text": "reuse them you can call them synchronously or asynchronously you can",
    "start": "720180",
    "end": "726150"
  },
  {
    "text": "chain them together and any code at all can be run within a policy so this is a",
    "start": "726150",
    "end": "734870"
  },
  {
    "text": "github repo for the demos which include this slideshow and the samples that I'm",
    "start": "734870",
    "end": "741780"
  },
  {
    "text": "going to show you right now",
    "start": "741780",
    "end": "744560"
  },
  {
    "text": "so this is the local server it's a local web api server that I'm running here and",
    "start": "749610",
    "end": "756339"
  },
  {
    "text": "the interesting thing about this demo server is that we've created this",
    "start": "756339",
    "end": "763000"
  },
  {
    "text": "throttling handler object and the throttling handler basically with this",
    "start": "763000",
    "end": "769920"
  },
  {
    "text": "configuration says we will accept three calls from the same ip address within",
    "start": "769920",
    "end": "777810"
  },
  {
    "text": "five seconds and on the fourth call we're gonna fail until that five seconds",
    "start": "777810",
    "end": "784449"
  },
  {
    "text": "is up we're gonna fail with the 500 so this is just an easy way for us to simulate a transient error right in it's",
    "start": "784449",
    "end": "794439"
  },
  {
    "text": "constant it's consistent so that all of the demos will react in the in different",
    "start": "794439",
    "end": "799689"
  },
  {
    "text": "ways depending on their policies - the same - the same problem and it's simply",
    "start": "799689",
    "end": "806649"
  },
  {
    "text": "a values controller you pass in a number and it responds with response to request",
    "start": "806649",
    "end": "811750"
  },
  {
    "text": "number ID and returns message pretty pretty easy so then we have a console",
    "start": "811750",
    "end": "818589"
  },
  {
    "text": "app client with a whole bunch of different demos these are synchronous demos here and these are the",
    "start": "818589",
    "end": "823990"
  },
  {
    "text": "asynchronous versions of them and I'm just going to go through them one at a",
    "start": "823990",
    "end": "829540"
  },
  {
    "text": "time and show you what they look like so first we start with making a call to",
    "start": "829540",
    "end": "834610"
  },
  {
    "text": "this service with no with no strategy at",
    "start": "834610",
    "end": "841060"
  },
  {
    "text": "all no resilience no policy and all of the demos look the same in other words",
    "start": "841060",
    "end": "847180"
  },
  {
    "text": "what they do is the same they make a call - and I'll show you this is in a try-catch they make a call with",
    "start": "847180",
    "end": "852759"
  },
  {
    "text": "getstring async to the web api and increment the number the total requests",
    "start": "852759",
    "end": "859809"
  },
  {
    "text": "and if there's a problem we say what the problem is so if the message succeeds",
    "start": "859809",
    "end": "866769"
  },
  {
    "text": "we're showing in the color green the reply message and if it fails we're",
    "start": "866769",
    "end": "872470"
  },
  {
    "text": "showing it with red color and then we wait half a second and we do it again",
    "start": "872470",
    "end": "878790"
  },
  {
    "text": "until we stop so this is what it looks like three",
    "start": "878790",
    "end": "885139"
  },
  {
    "text": "requests go through and then until you're five seconds are up every request fails with a 503 pretty simple and you",
    "start": "885139",
    "end": "894470"
  },
  {
    "text": "press the spacebar and then it gives you some statistics at the bottom so all these demos are going to kind of look",
    "start": "894470",
    "end": "900649"
  },
  {
    "text": "like this with with different variations",
    "start": "900649",
    "end": "904628"
  },
  {
    "text": "alright so the first one that uses a policy will just be a retry a number of",
    "start": "905860",
    "end": "912019"
  },
  {
    "text": "times",
    "start": "912019",
    "end": "914319"
  },
  {
    "text": "before we run the code let's actually take a look at with a look at what the code does here all right",
    "start": "921480",
    "end": "928790"
  },
  {
    "text": "retry end times alright here we go so and there's also very nice comments",
    "start": "930350",
    "end": "935939"
  },
  {
    "text": "up here that this and by the way this isn't guidance these demos aren't guidance they they're simply showing you",
    "start": "935939",
    "end": "942359"
  },
  {
    "text": "the behavior of the policies and then once we get toward the end of the demos",
    "start": "942359",
    "end": "947519"
  },
  {
    "text": "we'll start talking about how to put them together for a good strategy alright so here you go we've got a",
    "start": "947519",
    "end": "954419"
  },
  {
    "text": "cancellation token here's the policy definition we're handling all exceptions right there and you could specify which",
    "start": "954419",
    "end": "962309"
  },
  {
    "text": "one specifically you want to handle and retry async is the policy number and",
    "start": "962309",
    "end": "967619"
  },
  {
    "text": "we're using three retries and then we have this lambda here that passes in the",
    "start": "967619",
    "end": "973199"
  },
  {
    "text": "exception and the attempt and you know this is your new exception handler tell",
    "start": "973199",
    "end": "978720"
  },
  {
    "text": "the user what they've won so right here in the policy itself is the handling",
    "start": "978720",
    "end": "983759"
  },
  {
    "text": "code is the code to handle what happens when the exception occurs now we're",
    "start": "983759",
    "end": "990539"
  },
  {
    "text": "still doing this in a try-catch all right and you can see right here that",
    "start": "990539",
    "end": "996929"
  },
  {
    "text": "everything that it's happening within the I'm sorry everything is happening",
    "start": "996929",
    "end": "1002269"
  },
  {
    "text": "within the policy is in yellow and then all the exceptions are in red so the",
    "start": "1002269",
    "end": "1010699"
  },
  {
    "text": "code that makes the call get string async is exactly the same right and the",
    "start": "1010699",
    "end": "1016519"
  },
  {
    "text": "exception is exactly the same the only difference is we're doing a weight policy execute a sink and then within",
    "start": "1016519",
    "end": "1024019"
  },
  {
    "text": "the context of that execute a sink that's where we're making the call",
    "start": "1024019",
    "end": "1029350"
  },
  {
    "text": "mm-hmm all right so you see retry three times boom boom boom there's no time out",
    "start": "1032750",
    "end": "1037938"
  },
  {
    "text": "it's just boom boom boom right it's it makes three calls right in a row and",
    "start": "1037939",
    "end": "1043220"
  },
  {
    "text": "then we get the exception in red okay so not not a great policy but that's what's",
    "start": "1043220",
    "end": "1050809"
  },
  {
    "text": "happening now the next one will add a timeout in between",
    "start": "1050809",
    "end": "1060370"
  },
  {
    "text": "so here's the policy right here it's a wait and retry and the retry count is",
    "start": "1064930",
    "end": "1071050"
  },
  {
    "text": "also three and now your sleep duration",
    "start": "1071050",
    "end": "1076420"
  },
  {
    "text": "is 200 milliseconds we're gonna wait 200 milliseconds between each retry and",
    "start": "1076420",
    "end": "1082900"
  },
  {
    "text": "here's our on retry and we're gonna log that in yellow everything else is",
    "start": "1082900",
    "end": "1088180"
  },
  {
    "text": "exactly the same it's now in between",
    "start": "1088180",
    "end": "1094510"
  },
  {
    "text": "each yellow call retries you're gonna see it goes a little bit slower 200",
    "start": "1094510",
    "end": "1102400"
  },
  {
    "text": "milliseconds it's still not enough time but that's what's happening",
    "start": "1102400",
    "end": "1109140"
  },
  {
    "text": "okay now we're going to add enough retries so that it actually works and",
    "start": "1111590",
    "end": "1118999"
  },
  {
    "text": "again not guidance this is this isn't how you debug a problem but now we're",
    "start": "1118999",
    "end": "1126139"
  },
  {
    "text": "going to do 20 retries and that's the only number that's the only thing that",
    "start": "1126139",
    "end": "1132379"
  },
  {
    "text": "has changed in this demo still 200 milliseconds between each try",
    "start": "1132379",
    "end": "1138249"
  },
  {
    "text": "okay so now we don't ever get that exception we're just doing 20 retries",
    "start": "1143560",
    "end": "1149200"
  },
  {
    "text": "and that seems to be enough for this particular problem all right now this",
    "start": "1149200",
    "end": "1160750"
  },
  {
    "text": "one is wait and retry forever now retry forever is going to look exactly the",
    "start": "1160750",
    "end": "1166360"
  },
  {
    "text": "same because we're the only thing is we're not saying retry 20 times we're saying keep retrying with the 200",
    "start": "1166360",
    "end": "1173020"
  },
  {
    "text": "millisecond delay each time until it works and there is actually a case on",
    "start": "1173020",
    "end": "1179290"
  },
  {
    "text": "the client side for using wait and retry forever and that is well I was doing",
    "start": "1179290",
    "end": "1186010"
  },
  {
    "text": "that I was using I was writing an app once that was a WPF app that collected",
    "start": "1186010",
    "end": "1192250"
  },
  {
    "text": "some data from a connect and then sent that data up to the cloud and they did",
    "start": "1192250",
    "end": "1199510"
  },
  {
    "text": "their secret sauce calculations and then brought the data back with their",
    "start": "1199510",
    "end": "1204670"
  },
  {
    "text": "evaluation on the next screen and you couldn't advance to the next screen until you had that data so it was either",
    "start": "1204670",
    "end": "1212220"
  },
  {
    "text": "this app stops right here or we get that",
    "start": "1212220",
    "end": "1217900"
  },
  {
    "text": "data we can't continue on we can't move forward with the application until this happens so you know in that case a wait",
    "start": "1217900",
    "end": "1225700"
  },
  {
    "text": "and retry forever is fine because the user can't just say no that's all right we'll skip go ahead to the next page or",
    "start": "1225700",
    "end": "1232600"
  },
  {
    "text": "whatever so it's either it's not going to work we're going to close it and come back after lunch",
    "start": "1232600",
    "end": "1238150"
  },
  {
    "text": "or we're gonna wait forever until it works that's up to you to decide",
    "start": "1238150",
    "end": "1247500"
  },
  {
    "text": "okay now this is the cool one wait and retry with an exponential back-off so",
    "start": "1248710",
    "end": "1256400"
  },
  {
    "text": "all we're doing here is we have a wait and retry a sync and we're going to do",
    "start": "1256400",
    "end": "1264140"
  },
  {
    "text": "it six times except in the the numpy the",
    "start": "1264140",
    "end": "1270320"
  },
  {
    "text": "I'm sorry the the timeout value is calculated from the attempt and using",
    "start": "1270320",
    "end": "1277570"
  },
  {
    "text": "exponential an exponent of two with the attempt we're going to increase the time",
    "start": "1277570",
    "end": "1283250"
  },
  {
    "text": "out every single time that it fails otherwise the code is exactly the same",
    "start": "1283250",
    "end": "1291250"
  },
  {
    "text": "this is a great strategy",
    "start": "1292690",
    "end": "1296710"
  },
  {
    "text": "cool",
    "start": "1301690",
    "end": "1304690"
  },
  {
    "text": "okay now we're going to start combining some",
    "start": "1313570",
    "end": "1319300"
  },
  {
    "text": "of these this is a wait and retry with a circuit breaker and again the circuit",
    "start": "1319300",
    "end": "1328840"
  },
  {
    "text": "breaker well this the circuit breaker basically fails to the calling code on",
    "start": "1328840",
    "end": "1334510"
  },
  {
    "text": "the client side and says hey that downstream service is struggling which",
    "start": "1334510",
    "end": "1340450"
  },
  {
    "text": "I'm just going to fail quickly to you so that we don't keep over you know flooding it with calls what's",
    "start": "1340450",
    "end": "1347380"
  },
  {
    "text": "interesting about this demo is there's two policies the wait and retry policy",
    "start": "1347380",
    "end": "1352780"
  },
  {
    "text": "is 200 millisecond wait and retry forever and then inside that we're gonna",
    "start": "1352780",
    "end": "1361090"
  },
  {
    "text": "have the circuit breaker policy which basically is going to fail we're going",
    "start": "1361090",
    "end": "1368920"
  },
  {
    "text": "to break the circuit if the action fails four times in a row so we allow for",
    "start": "1368920",
    "end": "1374440"
  },
  {
    "text": "exceptions then we break the circuit and then all the calls that are going out",
    "start": "1374440",
    "end": "1379930"
  },
  {
    "text": "don't go out and we're going to wait for three seconds and then we have some",
    "start": "1379930",
    "end": "1387450"
  },
  {
    "text": "handlers here the circuit breaker metaphor is a little bit different a",
    "start": "1387450",
    "end": "1394690"
  },
  {
    "text": "metaphor to wrap your mind around if you're used to thinking about database connections database connections when",
    "start": "1394690",
    "end": "1400780"
  },
  {
    "text": "they're open everything's working and you can talk to the database right and when you close the connection you can no",
    "start": "1400780",
    "end": "1406990"
  },
  {
    "text": "longer talk to the database well elect an electrical circuit when it's closed that's when signal is going through it",
    "start": "1406990",
    "end": "1413920"
  },
  {
    "text": "when it's open that means the circuit is broken and then it's not working so it's",
    "start": "1413920",
    "end": "1420130"
  },
  {
    "text": "opposite of a database connection metaphor that may be confusing I don't",
    "start": "1420130",
    "end": "1426400"
  },
  {
    "text": "know so what's in the other interesting thing about this is that these calls are",
    "start": "1426400",
    "end": "1432880"
  },
  {
    "text": "nested so first we're using the wait and retry policy and then executing code",
    "start": "1432880",
    "end": "1439300"
  },
  {
    "text": "which calls through the circuit breaker policy execute so there it's nested and",
    "start": "1439300",
    "end": "1446610"
  },
  {
    "text": "that's why we created the policy wrap which we're gonna show in the next demo so you don't have to nest code inside",
    "start": "1446610",
    "end": "1454090"
  },
  {
    "text": "code inside code but that's what we're doing right here wait and retry on the",
    "start": "1454090",
    "end": "1459550"
  },
  {
    "text": "outside circuit breaker on the inside let's see what happens okay so that",
    "start": "1459550",
    "end": "1471070"
  },
  {
    "text": "purple and you just go back here so so",
    "start": "1471070",
    "end": "1476320"
  },
  {
    "text": "this is happening in the retry you know we retry three times we allow four times",
    "start": "1476320",
    "end": "1482230"
  },
  {
    "text": "so this is actually happening happening out of sequence but so then the the",
    "start": "1482230",
    "end": "1487480"
  },
  {
    "text": "circuit breaker kicks in and it breaks the circuit for three seconds okay and then all of these exceptions we're",
    "start": "1487480",
    "end": "1495550"
  },
  {
    "text": "failing to the calling code until those three seconds go",
    "start": "1495550",
    "end": "1500850"
  },
  {
    "text": "you know are up and then the sir the next one is half open so we make a call",
    "start": "1500850",
    "end": "1507100"
  },
  {
    "text": "as a trial and if that works okay we close the circuit again all this happens within the policy so that's the",
    "start": "1507100",
    "end": "1515380"
  },
  {
    "text": "beautiful thing about this is once you setup that policy object you no longer have to worry about all of these things",
    "start": "1515380",
    "end": "1522010"
  },
  {
    "text": "you just make the call within the policy code",
    "start": "1522010",
    "end": "1527160"
  },
  {
    "text": "all right then that's next one is the same demo but we're using a policy wrap",
    "start": "1532360",
    "end": "1539279"
  },
  {
    "text": "so we have our two policies wait and retry and circuit breaker and now we create a policy wrap that wraps the",
    "start": "1539279",
    "end": "1546580"
  },
  {
    "text": "retry on the outside the circuit breaker on the inside and now instead of nesting we're simply within the policy wrap",
    "start": "1546580",
    "end": "1554049"
  },
  {
    "text": "executing the call so it's going to look",
    "start": "1554049",
    "end": "1560830"
  },
  {
    "text": "exactly the same it will get exactly the same results except that it's a lot",
    "start": "1560830",
    "end": "1567159"
  },
  {
    "text": "neater code wise",
    "start": "1567159",
    "end": "1571440"
  },
  {
    "text": "okay now we're gonna add a fall back in here this is a wait and retry circuit",
    "start": "1578330",
    "end": "1584870"
  },
  {
    "text": "breaker with a fall back so now we're actually using for policies check this",
    "start": "1584870",
    "end": "1590450"
  },
  {
    "text": "out here's our wait and retry policy same as last time then we have a circuit breaker also same",
    "start": "1590450",
    "end": "1598640"
  },
  {
    "text": "as last time we allow for exceptions then we break for three seconds also I didn't really",
    "start": "1598640",
    "end": "1605720"
  },
  {
    "text": "point this out all that much before but we have an on break an on reset and an on half-open these are all different",
    "start": "1605720",
    "end": "1613700"
  },
  {
    "text": "handlers for the states of the circuit breaker which is cool alright now we",
    "start": "1613700",
    "end": "1619160"
  },
  {
    "text": "have a fallback for the circuit breaker which basically fails with you know",
    "start": "1619160",
    "end": "1626480"
  },
  {
    "text": "please try again later and we substituted with a fallback policy there",
    "start": "1626480",
    "end": "1632260"
  },
  {
    "text": "and now we have a fallback policy for any exception right and this is the",
    "start": "1632260",
    "end": "1639910"
  },
  {
    "text": "difference right there broken circuit exception and just exception now here's",
    "start": "1639910",
    "end": "1647180"
  },
  {
    "text": "how we wrap them we take the resilience strategy and wrap that wait and retry and circuit breaker just like last time",
    "start": "1647180",
    "end": "1653020"
  },
  {
    "text": "but now we use another policy wrap to take that resilience strategy and wrap",
    "start": "1653020",
    "end": "1661400"
  },
  {
    "text": "those in fall backs so fall back for any exception wrap fall back for circuit",
    "start": "1661400",
    "end": "1667130"
  },
  {
    "text": "breaker wrap resilient strategy and now just like before we just have that one",
    "start": "1667130",
    "end": "1675020"
  },
  {
    "text": "policy wrap we execute it and all of those policies get come into play",
    "start": "1675020",
    "end": "1683950"
  },
  {
    "text": "there you go so let's take a look at this a little bit so there's our wait",
    "start": "1693940",
    "end": "1699790"
  },
  {
    "text": "and retry three times circuit breaker happens and now instead of getting just",
    "start": "1699790",
    "end": "1704980"
  },
  {
    "text": "a regular old exception we're handling it in the policy fall back catches two failed with circuits now open not",
    "start": "1704980",
    "end": "1711610"
  },
  {
    "text": "allowing calls and then we have your please try again later",
    "start": "1711610",
    "end": "1716640"
  },
  {
    "text": "right so essentially we're we're getting a chance to that to specify that",
    "start": "1716640",
    "end": "1723340"
  },
  {
    "text": "last-gasp instead of just letting it fall to a regular exception that's the",
    "start": "1723340",
    "end": "1730720"
  },
  {
    "text": "funny thing about poly is it really is a giant wrapper around try catch if you",
    "start": "1730720",
    "end": "1737620"
  },
  {
    "text": "look at the source code that's really what it is it comes down to just an intelligent exception handling mechanism",
    "start": "1737620",
    "end": "1746550"
  },
  {
    "text": "so now we're going to do another wrap and this has a fallback a timeout and",
    "start": "1746550",
    "end": "1755650"
  },
  {
    "text": "wait and retry so the timeout basically we're gonna test the timeout as being",
    "start": "1755650",
    "end": "1761350"
  },
  {
    "text": "the overall policy and we're going to test it by making the timeout really",
    "start": "1761350",
    "end": "1768310"
  },
  {
    "text": "short two seconds and the wait and retry policy is four seconds so the timeout",
    "start": "1768310",
    "end": "1775390"
  },
  {
    "text": "should kick in before that wait and retry policy does that's the whole idea here and then we have our fall backs for",
    "start": "1775390",
    "end": "1782830"
  },
  {
    "text": "any exception and fall back four timeout",
    "start": "1782830",
    "end": "1786779"
  },
  {
    "text": "boom right there so the fallback for the the timeout happened because we",
    "start": "1795429",
    "end": "1801729"
  },
  {
    "text": "specifically said it to be shorter than the than the wait and so this",
    "start": "1801729",
    "end": "1809499"
  },
  {
    "text": "demonstrates that you know after after all is said and done you know we can do",
    "start": "1809499",
    "end": "1814960"
  },
  {
    "text": "all these retries and we can do the circuit breaker and all of that but at a certain time we're gonna say we're gonna",
    "start": "1814960",
    "end": "1820779"
  },
  {
    "text": "give up we're gonna say okay we've spent too much time on this now we're just gonna fail which will put this in the",
    "start": "1820779",
    "end": "1827769"
  },
  {
    "text": "dead letter Q come back tomorrow something like that whatever you want to do with it okay now we're gonna do",
    "start": "1827769",
    "end": "1837729"
  },
  {
    "text": "bulkhead demos and as I said before the bulkhead isolates calls in two different",
    "start": "1837729",
    "end": "1847659"
  },
  {
    "text": "bulkheads sort of think of them as threads but they're not really they're just context within which calls are made",
    "start": "1847659",
    "end": "1856149"
  },
  {
    "text": "and when you isolate them then when you're making calls to different",
    "start": "1856149",
    "end": "1861309"
  },
  {
    "text": "services if one is struggling it doesn't affect the other one the code is a",
    "start": "1861309",
    "end": "1868929"
  },
  {
    "text": "little bit strange in that we go into this loop and we have our total requests",
    "start": "1868929",
    "end": "1875799"
  },
  {
    "text": "and we're either picking good or faulting calls and we have two endpoints",
    "start": "1875799",
    "end": "1880989"
  },
  {
    "text": "on the API and so if this is a good call",
    "start": "1880989",
    "end": "1886440"
  },
  {
    "text": "we're calling this throttled or non throttled good and this is the this is",
    "start": "1886440",
    "end": "1892839"
  },
  {
    "text": "the control group right here we're not actually isolating them to show you what the problem is and then if it's a",
    "start": "1892839",
    "end": "1900909"
  },
  {
    "text": "faulting call we're calling this endpoint non throttled faulting and so",
    "start": "1900909",
    "end": "1906549"
  },
  {
    "text": "this one is going to fail the other one is going to should be good it's",
    "start": "1906549",
    "end": "1912399"
  },
  {
    "text": "returning good calls but as you see we're just going in a loop and we're making calls to each one and we'll see",
    "start": "1912399",
    "end": "1920200"
  },
  {
    "text": "what happens with that faulting call and this is going by really fast so I'm just",
    "start": "1920200",
    "end": "1927369"
  },
  {
    "text": "going to let it run for a few seconds and then I'll stop it and we'll see to see what happens okay so to",
    "start": "1927369",
    "end": "1939610"
  },
  {
    "text": "the good end point we made 25 requests only one succeeded 24 fails that's to",
    "start": "1939610",
    "end": "1945760"
  },
  {
    "text": "the good end point the one that should be returning okay we requested to the faulting end point",
    "start": "1945760",
    "end": "1952060"
  },
  {
    "text": "33 zero succeeded 10 are pending 23",
    "start": "1952060",
    "end": "1958450"
  },
  {
    "text": "failed so what's going on here is that the calls to the struggling service are",
    "start": "1958450",
    "end": "1963940"
  },
  {
    "text": "affecting the calls to the one that isn't struggling so now we take that",
    "start": "1963940",
    "end": "1971200"
  },
  {
    "text": "same code and we wrap the calls in bulkheads bulkhead policies right",
    "start": "1971200",
    "end": "1980710"
  },
  {
    "text": "we have bulkhead policy for good calls and a bulkhead policy for faulting calls",
    "start": "1980710",
    "end": "1986320"
  },
  {
    "text": "and now rather than calling them without",
    "start": "1986320",
    "end": "1991690"
  },
  {
    "text": "a policy we call the them through these bulkheads execute async and faulting",
    "start": "1991690",
    "end": "2000360"
  },
  {
    "text": "calls execute a sink otherwise the codes exactly the same",
    "start": "2000360",
    "end": "2007190"
  },
  {
    "text": "let this go for a bit",
    "start": "2008930",
    "end": "2012370"
  },
  {
    "text": "okay 28 good calls requested 28 succeeded 31 bad faulting calls",
    "start": "2018270",
    "end": "2026700"
  },
  {
    "text": "requested zero succeeded some pending some failed there you go",
    "start": "2026700",
    "end": "2033920"
  },
  {
    "text": "all right so some further features that we have in here you can handle multiple exception types in one policy and so",
    "start": "2046500",
    "end": "2055740"
  },
  {
    "text": "here's an example of handling sequel exceptions and where the number of the",
    "start": "2055740",
    "end": "2062070"
  },
  {
    "text": "exception is particular to the call that you're making 12050 or a timeout exception so you can",
    "start": "2062070",
    "end": "2070230"
  },
  {
    "text": "use the or method also delegates you can",
    "start": "2070230",
    "end": "2078960"
  },
  {
    "text": "use those as well so very very flexible in terms of what you can handle specifically you want to handle every",
    "start": "2078960",
    "end": "2085710"
  },
  {
    "text": "exception at just an HTTP request exception this handles a return value as",
    "start": "2085710",
    "end": "2092340"
  },
  {
    "text": "well so you may be in a situation like making a soap call where you're going to",
    "start": "2092340",
    "end": "2098820"
  },
  {
    "text": "get a 200 every time except that somewhere in the process of that service",
    "start": "2098820",
    "end": "2105630"
  },
  {
    "text": "there was an exception or there was an error so it returned an error but but",
    "start": "2105630",
    "end": "2111240"
  },
  {
    "text": "the HTTP return type return value was 200 you can handle inner exceptions with",
    "start": "2111240",
    "end": "2121650"
  },
  {
    "text": "the on inner call or method or whatever you want to call it so now we can handle",
    "start": "2121650",
    "end": "2128810"
  },
  {
    "text": "HTTP request exception or the inner exception operation canceled the policy",
    "start": "2128810",
    "end": "2137580"
  },
  {
    "text": "registry is it's some app apps it can be useful to be able to dynamically",
    "start": "2137580",
    "end": "2144119"
  },
  {
    "text": "reconfigure the policy without restarting the process so you might want to tweak circuit breaking thresholds or",
    "start": "2144119",
    "end": "2151349"
  },
  {
    "text": "something like that to be more or less sensitive according to what the conditions are in production so with",
    "start": "2151349",
    "end": "2158369"
  },
  {
    "text": "policy registry just replace the policy in the registry with a new one and when the underlying configuration source is",
    "start": "2158369",
    "end": "2164670"
  },
  {
    "text": "detected to have changed it just loads up and you can read more in the wiki",
    "start": "2164670",
    "end": "2170280"
  },
  {
    "text": "which I'll give you a link to here in a minute for that",
    "start": "2170280",
    "end": "2176000"
  },
  {
    "text": "integration with core 2.1 which or higher which is great HDB client factory you can configure",
    "start": "2176710",
    "end": "2184289"
  },
  {
    "text": "these we use a factory to get particular policies like those that might be I",
    "start": "2184289",
    "end": "2191910"
  },
  {
    "text": "don't know if you have one that's pre-configured for the github you know",
    "start": "2191910",
    "end": "2197890"
  },
  {
    "text": "for the github API for example you can just use these to spit out policies and",
    "start": "2197890",
    "end": "2203770"
  },
  {
    "text": "it's it's actually a very nice very nice way to use it so some stuff that's",
    "start": "2203770",
    "end": "2212109"
  },
  {
    "text": "coming up we've got chaos monkey kind of stuff going on here there's a if you",
    "start": "2212109",
    "end": "2219700"
  },
  {
    "text": "look on the Polly website there's another github project called a shimmy I think it is kind of like simian and we",
    "start": "2219700",
    "end": "2229089"
  },
  {
    "text": "we can do we can inject fake results into our calls and so this is great",
    "start": "2229089",
    "end": "2238029"
  },
  {
    "text": "because now you can test how things fail without actually you know making things",
    "start": "2238029",
    "end": "2243730"
  },
  {
    "text": "fail also we can inject exceptions turn",
    "start": "2243730",
    "end": "2252400"
  },
  {
    "text": "them on and off by percentage or by you know specific number of times",
    "start": "2252400",
    "end": "2259230"
  },
  {
    "text": "pretty cool stuff I haven't used this yet but also latency we can inject",
    "start": "2259230",
    "end": "2264490"
  },
  {
    "text": "latency so instead of saying make this stuff fail we can say you know this is",
    "start": "2264490",
    "end": "2270789"
  },
  {
    "text": "going to timeout maybe we can handle that a certain way cool stuff",
    "start": "2270789",
    "end": "2279690"
  },
  {
    "text": "this is all about that stuff as well so things that we're working on the most",
    "start": "2280690",
    "end": "2288400"
  },
  {
    "text": "important thing I think that's next for us is this distributed circuit breaker",
    "start": "2288400",
    "end": "2294480"
  },
  {
    "text": "as your functions just came out with this durable function an empty function",
    "start": "2294480",
    "end": "2301809"
  },
  {
    "text": "which is essentially a stateful actor and that can we think really make it",
    "start": "2301809",
    "end": "2308920"
  },
  {
    "text": "easy for you to do a distributed circuit breaker the problem with circuit breaker is only one instance of an app knows",
    "start": "2308920",
    "end": "2315099"
  },
  {
    "text": "what the state of that circuit is right but if you distribute that now multiple",
    "start": "2315099",
    "end": "2320730"
  },
  {
    "text": "actors can understand what the state of the circuit breaker is to back off calls",
    "start": "2320730",
    "end": "2328690"
  },
  {
    "text": "to a downstream service so this is something that we're working on it's the guys that Microsoft and the function's",
    "start": "2328690",
    "end": "2334630"
  },
  {
    "text": "team are really interested in it and stay tuned for that",
    "start": "2334630",
    "end": "2340109"
  },
  {
    "text": "so there's some other I won't say implementations of poly but similar",
    "start": "2340109",
    "end": "2347170"
  },
  {
    "text": "projects going on here one is poly j/s this isn't us but it",
    "start": "2347170",
    "end": "2354430"
  },
  {
    "text": "simply does a retry and retry and wait I think that it's the state of it now at",
    "start": "2354430",
    "end": "2359559"
  },
  {
    "text": "least it was as of December they may have done some more things but also",
    "start": "2359559",
    "end": "2366220"
  },
  {
    "text": "history is a Netflix resilience framework but it's no longer in",
    "start": "2366220",
    "end": "2371980"
  },
  {
    "text": "development and Netflix decided to end development in early 2018 but the",
    "start": "2371980",
    "end": "2378339"
  },
  {
    "text": "original engineers moved on and we hope that it's going to be taken up by other contributors so that's a Java or Scala",
    "start": "2378339",
    "end": "2386529"
  },
  {
    "text": "you know JVM framework and here's just a couple of snippets of the code you might",
    "start": "2386529",
    "end": "2395109"
  },
  {
    "text": "see in poly j/s looks really really easy",
    "start": "2395109",
    "end": "2400239"
  },
  {
    "text": "really easy to understand and hystrix",
    "start": "2400239",
    "end": "2405350"
  },
  {
    "text": "also very similar so here's the the wiki this is a good thing take a picture of",
    "start": "2405350",
    "end": "2411990"
  },
  {
    "text": "if you don't want to just google Polly wiki great documentation their ideas",
    "start": "2411990",
    "end": "2420420"
  },
  {
    "text": "resilience strategies recommendations and patterns what's going on what's new",
    "start": "2420420",
    "end": "2427260"
  },
  {
    "text": "what's coming up we have a slack channel",
    "start": "2427260",
    "end": "2433830"
  },
  {
    "text": "we have a blog easy easy stuff so let me tell you about",
    "start": "2433830",
    "end": "2442590"
  },
  {
    "text": "the people that are involved here my job is just to simply do what I'm",
    "start": "2442590",
    "end": "2448410"
  },
  {
    "text": "doing right now which is go talk to developers about Polly tell them what's possible and get them to start using it",
    "start": "2448410",
    "end": "2456650"
  },
  {
    "text": "I haven't done the work on Polly I I started the client demo with Joel Hulan",
    "start": "2456650",
    "end": "2463880"
  },
  {
    "text": "but Dylan Rison Berger has essentially done the lion's share of the work he and",
    "start": "2463880",
    "end": "2470100"
  },
  {
    "text": "Joel but I would say Dylan is the guy right now who is the go-to lead",
    "start": "2470100",
    "end": "2475230"
  },
  {
    "text": "developer Joel healin also he works on",
    "start": "2475230",
    "end": "2482100"
  },
  {
    "text": "it as well so and of course we have lots and lots of contributors in the OSS",
    "start": "2482100",
    "end": "2487710"
  },
  {
    "text": "project and maybe you'd be one of them we hope so I'm gonna let you out a",
    "start": "2487710",
    "end": "2494520"
  },
  {
    "text": "little bit early and if anybody has any questions right now that'd be fine otherwise I'll just be off to the side",
    "start": "2494520",
    "end": "2502170"
  },
  {
    "text": "if you want to talk to me there Thanks [Applause]",
    "start": "2502170",
    "end": "2514369"
  }
]