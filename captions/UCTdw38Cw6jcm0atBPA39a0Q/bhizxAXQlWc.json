[
  {
    "text": "um uh my name is Sean parent uh I'm a senior principal scientist at Adobe uh I",
    "start": "5520",
    "end": "12120"
  },
  {
    "text": "work most closely with the Photoshop team I'm in that organization but I run Adobe software technology lab which is a",
    "start": "12120",
    "end": "18359"
  },
  {
    "text": "small group uh there are four of us and our Charter is to try to look 10 years",
    "start": "18359",
    "end": "23720"
  },
  {
    "text": "out at how do we in improve software engineering practice and we describe",
    "start": "23720",
    "end": "29080"
  },
  {
    "text": "practice as being distinct from process so we're not concerned with whether or not you're following an agile or some",
    "start": "29080",
    "end": "35680"
  },
  {
    "text": "other methodology we're concerned with what's the code that you write when you",
    "start": "35680",
    "end": "40719"
  },
  {
    "text": "sit down at the keyboard and how do we help you write better code and so our process is three-fold",
    "start": "40719",
    "end": "48280"
  },
  {
    "text": "we're looking at how do we do this by improving tooling how do we do this by improving education and how do we come",
    "start": "48280",
    "end": "55559"
  },
  {
    "text": "up with new ideas to do this through research so that's what our team does uh",
    "start": "55559",
    "end": "62160"
  },
  {
    "text": "this talk originally came about uh because I was having a conversation with some people and they said you know",
    "start": "62160",
    "end": "67360"
  },
  {
    "text": "whenever you write code whatever language you're writing in it kind of all looks the same and and how do you do",
    "start": "67360",
    "end": "73119"
  },
  {
    "text": "that how do you write code in in JavaScript and write code in occasional I'll write code in um Objective C or",
    "start": "73119",
    "end": "80720"
  },
  {
    "text": "objective C++ or cotlin and somehow it's all kind of the",
    "start": "80720",
    "end": "86320"
  },
  {
    "text": "same and I replied that it was all about local reasoning and and then had to explain myself for an hour and I thought",
    "start": "86320",
    "end": "92520"
  },
  {
    "text": "that would be a good talk um so the original idea for this talk was local reasoning and any language but we're",
    "start": "92520",
    "end": "98880"
  },
  {
    "text": "going to bend that a little bit to local reasonings and C++ because to do any language would take more than the hour",
    "start": "98880",
    "end": "104479"
  },
  {
    "text": "that I have unfortunately there's too many details to get hung up on in",
    "start": "104479",
    "end": "110759"
  },
  {
    "text": "C++ um some links real quick uh the reason why I'm here representing Adobe",
    "start": "110759",
    "end": "116600"
  },
  {
    "text": "is because we have almost 300 open positions in engine in um many of those are C++ open positions and you can find",
    "start": "116600",
    "end": "124360"
  },
  {
    "text": "links to that there you can also find some links to some seminars that my team has given and some blog posts and more",
    "start": "124360",
    "end": "130160"
  },
  {
    "text": "information uh my personal vanity page is the next page this talk is already posted there uh so you can you can find",
    "start": "130160",
    "end": "137360"
  },
  {
    "text": "it there in several formats uh uh if you want to steal my information steal my slides that's fine",
    "start": "137360",
    "end": "144319"
  },
  {
    "text": "with me the artwork is copyright Adobe so don't take the artwork but take the",
    "start": "144319",
    "end": "150000"
  },
  {
    "text": "content and all the source materials there so feel free um uh and then a link",
    "start": "150000",
    "end": "156040"
  },
  {
    "text": "to Hyo h.org which got some mentions my team is involved with the development of",
    "start": "156040",
    "end": "161959"
  },
  {
    "text": "the Hyo language uh some of you may or may not have heard of it uh it actually relates some to this talk uh so check it",
    "start": "161959",
    "end": "169120"
  },
  {
    "text": "out and we're looking for more people to help contribute to that",
    "start": "169120",
    "end": "174080"
  },
  {
    "text": "effort so if we're going to do local reasoning in any language it should be in any language",
    "start": "175560",
    "end": "181040"
  },
  {
    "text": "so I thought I'd put that up there uh so how many people ever saw",
    "start": "181040",
    "end": "187680"
  },
  {
    "text": "this magazine yeah I knew Kate would have seen it a few of us a few of us are old",
    "start": "187680",
    "end": "192720"
  },
  {
    "text": "enough this is from 1981 this is bite magazine which if you've never seen a bite magazine it looks like a small",
    "start": "192720",
    "end": "198840"
  },
  {
    "text": "phone book and if you've never seen a phone book it's a really thick book",
    "start": "198840",
    "end": "205360"
  },
  {
    "text": "um uh and so uh this was uh an issue devoted to the language small talk I",
    "start": "205360",
    "end": "212720"
  },
  {
    "text": "hope most of you have heard of small talk uh Small Talk was actually created in 1979 so this came out just a few",
    "start": "212720",
    "end": "219280"
  },
  {
    "text": "years when Small Talk was still a new language Small Talk never really took",
    "start": "219280",
    "end": "225159"
  },
  {
    "text": "over the industry but its ideas did and in large part because of this one issue",
    "start": "225159",
    "end": "230760"
  },
  {
    "text": "this one issue of bite magazine everybody read this like cover to cover",
    "start": "230760",
    "end": "236319"
  },
  {
    "text": "every article in here and this had this massive influence on the industry and we",
    "start": "236319",
    "end": "242560"
  },
  {
    "text": "thought that small talk was going to solve the software engineering crisis",
    "start": "242560",
    "end": "247599"
  },
  {
    "text": "the software engineering crisis was was an older term um uh uh that was about the problem with",
    "start": "247599",
    "end": "257000"
  },
  {
    "text": "trying to build large software systems and that they would fail right right you",
    "start": "257000",
    "end": "263120"
  },
  {
    "text": "just couldn't construct them and uh this is a uml diagram how",
    "start": "263120",
    "end": "269280"
  },
  {
    "text": "many people here have ever used uml yeah quite a few quite a few okay so",
    "start": "269280",
    "end": "274479"
  },
  {
    "text": "this is a uml diagram of a smallish system actually this isn't isn't very big but I wanted to give you a feel for",
    "start": "274479",
    "end": "281440"
  },
  {
    "text": "this and the Really seductive idea with object-oriented programming was that we could take a bunch of classes and we",
    "start": "281440",
    "end": "288479"
  },
  {
    "text": "could tie them all together building like Lego Lego bricks and build very complicated systems and that's how we",
    "start": "288479",
    "end": "294919"
  },
  {
    "text": "were going to solve the software engineering crisis uh",
    "start": "294919",
    "end": "300280"
  },
  {
    "text": "and that date the software engineering crisis goes all the way back to 1968 so this has been a long time that this was",
    "start": "300280",
    "end": "306600"
  },
  {
    "text": "considered a big problem so what",
    "start": "306600",
    "end": "312240"
  },
  {
    "text": "happened well Wikipedia lists 17 major failed software projects the total",
    "start": "312240",
    "end": "317360"
  },
  {
    "text": "billion dollars of losses since 1980 okay so and some of my favorite ones are",
    "start": "317360",
    "end": "324639"
  },
  {
    "text": "not on here but the most recent one 2023 2020 2014 was a really bad year",
    "start": "324639",
    "end": "333360"
  },
  {
    "text": "okay now failed here doesn't mean that the software was built and then it",
    "start": "333360",
    "end": "338960"
  },
  {
    "text": "crashed and the plane crashed and everybody died or anything like that failed is the software was either Nei",
    "start": "338960",
    "end": "346600"
  },
  {
    "text": "was either never completed at huge expense and huge investment or it was",
    "start": "346600",
    "end": "353360"
  },
  {
    "text": "completed but was too riddled with bugs to ever serve its purpose and then was cancelled um or in a in a few",
    "start": "353360",
    "end": "361280"
  },
  {
    "text": "cases it was so late as that by the time it shipped it was irrelevant right the",
    "start": "361280",
    "end": "367240"
  },
  {
    "text": "entire industry had moved on so that's what a failed software project is one of my favorites which is actually not in",
    "start": "367240",
    "end": "374160"
  },
  {
    "text": "these top 17 on Wikipedia is the Denver Airport uh uh luggage control system",
    "start": "374160",
    "end": "381360"
  },
  {
    "text": "they were going to when they put in the Denver Airport they were going to build this uh they built a system of tunnels",
    "start": "381360",
    "end": "387400"
  },
  {
    "text": "and switches and they had 14 PCS and they were all going to control the luggage and you would put your luggage",
    "start": "387400",
    "end": "393440"
  },
  {
    "text": "on the conveyor and it would all get to the right plane at the right time magic switching and they were saving lots of money because the tunnels were not big",
    "start": "393440",
    "end": "400240"
  },
  {
    "text": "enough to put a person through and there are videos online of people with really long steel poles banging the luggage out",
    "start": "400240",
    "end": "407560"
  },
  {
    "text": "of these tunnels uh uh because they jammed and because the system never",
    "start": "407560",
    "end": "412880"
  },
  {
    "text": "worked right and it was all a software failure and the company who built it had built systems before",
    "start": "412880",
    "end": "419720"
  },
  {
    "text": "that worked but they were a much smaller",
    "start": "419720",
    "end": "424280"
  },
  {
    "text": "scale so in every single case that I could",
    "start": "424759",
    "end": "429840"
  },
  {
    "text": "find in the analysis of why these systems failed they talk about the",
    "start": "429840",
    "end": "435560"
  },
  {
    "text": "management failures okay there are articles and",
    "start": "435560",
    "end": "440680"
  },
  {
    "text": "books written about management failures of why these software systems failed but",
    "start": "440680",
    "end": "446639"
  },
  {
    "text": "software practice available languages libraries tools fundamental algorithms",
    "start": "446639",
    "end": "451800"
  },
  {
    "text": "and types are never mentioned for a single one of these and I spent a lot of",
    "start": "451800",
    "end": "456960"
  },
  {
    "text": "time searching I couldn't even find without asking people involved what language they were",
    "start": "456960",
    "end": "463280"
  },
  {
    "text": "programmed in did that choice matter I don't know",
    "start": "463280",
    "end": "468879"
  },
  {
    "text": "do we have any students in the room not a single one usually there's at least some grad student in the room if",
    "start": "468879",
    "end": "475759"
  },
  {
    "text": "you know a grad student there's a PhD thesis there right go research that I'm dead serious",
    "start": "475759",
    "end": "482840"
  },
  {
    "text": "that would make a really outstanding PhD",
    "start": "482840",
    "end": "487319"
  },
  {
    "text": "thesis how many people have worked on a failed software project Kate has I",
    "start": "487919",
    "end": "493639"
  },
  {
    "text": "have lots of people I blamed",
    "start": "493639",
    "end": "499319"
  },
  {
    "text": "management Kate like it was Management's fault and in a lot of cases management",
    "start": "499560",
    "end": "505280"
  },
  {
    "text": "hold a huge part of the blame okay but I o think there's not",
    "start": "505280",
    "end": "510560"
  },
  {
    "text": "enough analysis what they were trying to do was it even doable did they know the",
    "start": "510560",
    "end": "515640"
  },
  {
    "text": "right algorithms okay what was the right process I don't think Management's",
    "start": "515640",
    "end": "521880"
  },
  {
    "text": "entirely to blame if you had perfect management and the perfect team and the",
    "start": "521880",
    "end": "527399"
  },
  {
    "text": "right amount of time it isn't clear that some of these systems could have been",
    "start": "527399",
    "end": "533279"
  },
  {
    "text": "built so why do software projects fail I've got a conjecture based on absolutely zero",
    "start": "535839",
    "end": "543800"
  },
  {
    "text": "evidence uh this is a really big",
    "start": "543800",
    "end": "548399"
  },
  {
    "text": "topic but here's a quote the greatest limitation in writing software is our ability to understand the systems we're",
    "start": "549760",
    "end": "556279"
  },
  {
    "text": "creating and I think this is the fundamental point this is where everything goes wrong we build systems",
    "start": "556279",
    "end": "562920"
  },
  {
    "text": "that exceed our ability to reason about them okay so",
    "start": "562920",
    "end": "570880"
  },
  {
    "text": "how do we go about Building Systems that we can reason about that's where we tie this back to the idea of local reasoning",
    "start": "570880",
    "end": "579120"
  },
  {
    "text": "right what we want to do is be able to take our big systems break them into small enough chunks that we can reason",
    "start": "579120",
    "end": "586320"
  },
  {
    "text": "about them locally we can prove their correctness we can assemble them into larger systems we can reason about those",
    "start": "586320",
    "end": "593600"
  },
  {
    "text": "prove them correct and so on to build up the larger system",
    "start": "593600",
    "end": "600800"
  },
  {
    "text": "so local reasoning what is that it's the ability to reason about a defined unit",
    "start": "601839",
    "end": "606920"
  },
  {
    "text": "of code and verify its correctness without understanding all the context in which it's used or the implementations",
    "start": "606920",
    "end": "614640"
  },
  {
    "text": "upon which it relies we're going to be concerned today with just two units of code functions",
    "start": "614640",
    "end": "621480"
  },
  {
    "text": "and classes and the API is the key to local",
    "start": "621480",
    "end": "627680"
  },
  {
    "text": "reasoning okay",
    "start": "627680",
    "end": "631320"
  },
  {
    "text": "now local reasoning is concerned with both sides of the API so we're going to use this terminology the client code is",
    "start": "633240",
    "end": "640240"
  },
  {
    "text": "the code calling a function or holding on to an instance of a class and the implementor code is the code that is the",
    "start": "640240",
    "end": "648399"
  },
  {
    "text": "implementation of that function or class okay because we got to be looking at this from both sides sometimes I'm just",
    "start": "648399",
    "end": "654760"
  },
  {
    "text": "going to say call or and call E when I'm talking about a function but the idea of client and implementer extends us the",
    "start": "654760",
    "end": "662000"
  },
  {
    "text": "termin terminology to classes so let's start with a very",
    "start": "662000",
    "end": "667360"
  },
  {
    "text": "simple function okay here's our Declaration of",
    "start": "667360",
    "end": "673880"
  },
  {
    "text": "it tell me what does this function do you haven't seen the implementation what's it going to",
    "start": "674639",
    "end": "682880"
  },
  {
    "text": "do side effects probably that would be really unfortunate because we're talking about",
    "start": "682880",
    "end": "688680"
  },
  {
    "text": "local reasoning if it has side effects we can't reason about it locally okay so",
    "start": "688680",
    "end": "695120"
  },
  {
    "text": "either this function does nothing or whatever it does is through side",
    "start": "695120",
    "end": "700639"
  },
  {
    "text": "effects we're going to make this function do nothing now can we implement",
    "start": "700639",
    "end": "706240"
  },
  {
    "text": "it yeah everybody just you guys are so confident this is great",
    "start": "706240",
    "end": "712399"
  },
  {
    "text": "okay okay what's the key here it's the",
    "start": "712399",
    "end": "717600"
  },
  {
    "text": "comment that's our specific spe ification people get very hung up about how do you specify software most of the",
    "start": "717600",
    "end": "725000"
  },
  {
    "text": "time just a single sentence fragment and with a period that describes what the function does is a",
    "start": "725000",
    "end": "731720"
  },
  {
    "text": "sufficient specification okay so with that specification and even the",
    "start": "731720",
    "end": "738839"
  },
  {
    "text": "really bad name of f okay we know what this function does",
    "start": "738839",
    "end": "744519"
  },
  {
    "text": "it does nothing and even if we just had the semicolon there does nothing F we know with just the semicolon we don't",
    "start": "744519",
    "end": "750440"
  },
  {
    "text": "have to look at the implementation okay so here's another",
    "start": "750440",
    "end": "756120"
  },
  {
    "text": "function we're going to keep the bad name for a while apologies to Kate we'll fix it",
    "start": "756120",
    "end": "762519"
  },
  {
    "text": "okay this is going to return the successor of X okay does this this look",
    "start": "762519",
    "end": "769720"
  },
  {
    "text": "okay everybody's nodding it looks okay what's missing there's something missing in our",
    "start": "769720",
    "end": "776040"
  },
  {
    "text": "specification a precondition what's our precondition",
    "start": "776040",
    "end": "781120"
  },
  {
    "text": "yeah yeah yeah we better say that okay and on my team we've been having some",
    "start": "784279",
    "end": "789839"
  },
  {
    "text": "debates about this do we have to say that or is it implied by saying it's the successor of X and there's no successor",
    "start": "789839",
    "end": "795560"
  },
  {
    "text": "of XEX but the problem is with a contract is if you satisfy the",
    "start": "795560",
    "end": "804000"
  },
  {
    "text": "preconditions then the function has to either satisfy the post conditions or return an error and we're not going to",
    "start": "804000",
    "end": "809839"
  },
  {
    "text": "return an error we're going to do UB so we really better say that this is the",
    "start": "809839",
    "end": "815360"
  },
  {
    "text": "precondition okay now preconditions are an incredibly powerful thing they mean",
    "start": "815680",
    "end": "821040"
  },
  {
    "text": "that we get to cut out all the bad cases and blame everything on the client okay this is great do not",
    "start": "821040",
    "end": "828240"
  },
  {
    "text": "underestimate the power of a",
    "start": "828240",
    "end": "831600"
  },
  {
    "text": "precondition before we move on we need to talk a little bit more about function arguments",
    "start": "834440",
    "end": "841040"
  },
  {
    "text": "let's make this a little more complicated increments the value of x by one our precondition is still",
    "start": "843000",
    "end": "851800"
  },
  {
    "text": "there is this okay did we add any additional",
    "start": "851800",
    "end": "860160"
  },
  {
    "text": "preconditions yeah what's a precondition x should refer to an OB",
    "start": "862959",
    "end": "869240"
  },
  {
    "text": "within its lifetime X should refer to an object within its lifetime that's a valid precondition",
    "start": "869240",
    "end": "875639"
  },
  {
    "text": "anymore yeah so so both initialized and within its lifetime you guys are good",
    "start": "878560",
    "end": "885240"
  },
  {
    "text": "there's one more the one I'm actually looking for no concurrent yeah no no concurrent",
    "start": "885240",
    "end": "892079"
  },
  {
    "text": "accesses we're writing it nobody else better be accessing that right another thread better not have access to that",
    "start": "892079",
    "end": "898480"
  },
  {
    "text": "int okay if we do that would have been a data",
    "start": "898480",
    "end": "904040"
  },
  {
    "text": "race so we're going to write this really ugly precondition no other thread of execution is accessing X during this",
    "start": "904040",
    "end": "911880"
  },
  {
    "text": "operation we're going to get to the lifetime issues so I'm not ignoring those completely but that's a really",
    "start": "911880",
    "end": "917839"
  },
  {
    "text": "ugly thing to write on every single function okay",
    "start": "917839",
    "end": "924759"
  },
  {
    "text": "so let's come up with some general preconditions arguments passed to a function by non-const reference cannot",
    "start": "924759",
    "end": "930800"
  },
  {
    "text": "be accessed by other threads during the operation in arguments passed to a function by const reference cannot be",
    "start": "930800",
    "end": "937279"
  },
  {
    "text": "written uh by another thread during the operation unless otherwise specified and",
    "start": "937279",
    "end": "942480"
  },
  {
    "text": "if you're doing General preconditions you always want the unless otherwise specified because you're always going to have some function that is special and",
    "start": "942480",
    "end": "949000"
  },
  {
    "text": "has a mutex and does magic things and so ignore all of",
    "start": "949000",
    "end": "954360"
  },
  {
    "text": "that okay so now we can put our code back and it looks simple again",
    "start": "954360",
    "end": "960360"
  },
  {
    "text": "so that's that's pretty good now we wouldn't normally pass an INT by reference but I'm going to use an INT here as a placeholder for for your",
    "start": "960360",
    "end": "967120"
  },
  {
    "text": "regular objects so so why do we want to do mutation at",
    "start": "967120",
    "end": "975800"
  },
  {
    "text": "all okay mutation can be more well mutation directly in place as opposed to",
    "start": "976160",
    "end": "983440"
  },
  {
    "text": "to making a copy is more space efficient and it may be more",
    "start": "983440",
    "end": "990240"
  },
  {
    "text": "performant and it's often simpler to reason about right the simpler to reason",
    "start": "990240",
    "end": "995759"
  },
  {
    "text": "about because people think functional programing know that's that can be so easy if I say you need to change the",
    "start": "995759",
    "end": "1002040"
  },
  {
    "text": "battery in your 1968 Honda Civic and the shop says that's no problem we're just",
    "start": "1002040",
    "end": "1007279"
  },
  {
    "text": "going to bring build you a brand new Honda Civic with a new battery in it",
    "start": "1007279",
    "end": "1012920"
  },
  {
    "text": "that exactly matches your 72 Honda Civic and we'll throw the old car away that's a very difficult thing to actually",
    "start": "1012920",
    "end": "1019079"
  },
  {
    "text": "reason about how do you go about do that it's much easier to think about how do I just go in and I change the battery okay so in in many cases",
    "start": "1019079",
    "end": "1027240"
  },
  {
    "text": "mutation can be can be much easier to think about and that's what we want to do we want to be able to reason about",
    "start": "1027240",
    "end": "1032918"
  },
  {
    "text": "the correctness of our functions so let's define a couple more",
    "start": "1032919",
    "end": "1039038"
  },
  {
    "text": "terms here a transformation is a regular unary op operation right so it's it",
    "start": "1039039",
    "end": "1044600"
  },
  {
    "text": "takes one argument returns a value of the same type changing the state of an",
    "start": "1044600",
    "end": "1050160"
  },
  {
    "text": "object by applying a transformation to it defines an action on the object so xal f ofx is an action built out of a",
    "start": "1050160",
    "end": "1058799"
  },
  {
    "text": "transformation it's also known as a functional update if you're a functional update",
    "start": "1058799",
    "end": "1064240"
  },
  {
    "text": "programmer now there's a duality between a transformation and a corresponding action they can be defined in terms of",
    "start": "1064240",
    "end": "1070960"
  },
  {
    "text": "each other okay I can define an action in terms of a transformation or a",
    "start": "1070960",
    "end": "1076159"
  },
  {
    "text": "transformation in terms of an action so I can always go back and forth between",
    "start": "1076159",
    "end": "1081720"
  },
  {
    "text": "the two but one or the other of these may be more efficient okay and so I might want to",
    "start": "1081720",
    "end": "1088679"
  },
  {
    "text": "implement them both I might want to implement one and implement the other in terms of the first one okay it depends",
    "start": "1088679",
    "end": "1095840"
  },
  {
    "text": "on the operation so classically sort is an example of something that is better",
    "start": "1095840",
    "end": "1101120"
  },
  {
    "text": "to do as an action doing sort in place and situ is the most efficient way to do a sort which is odd because typically",
    "start": "1101120",
    "end": "1108240"
  },
  {
    "text": "sord has build out of our partition algorithm the most efficient way to do a partition algorithm is with a",
    "start": "1108240",
    "end": "1115520"
  },
  {
    "text": "transformation okay so now we can Define some argument",
    "start": "1115520",
    "end": "1123360"
  },
  {
    "text": "terminology and I'm stealing the terms here from Hyo so this is the labeling",
    "start": "1123360",
    "end": "1128400"
  },
  {
    "text": "that Hyo uses for arguments unfortunately C++ gets too confusing and has too many options for the way that",
    "start": "1128400",
    "end": "1134559"
  },
  {
    "text": "you can pass arguments but we're going to say let arguments let meaning constant like you know let xal 5 would",
    "start": "1134559",
    "end": "1141559"
  },
  {
    "text": "declare a constant is a constant reference an inout argument just takes",
    "start": "1141559",
    "end": "1147120"
  },
  {
    "text": "the thing by reference and a sync argument is something where it's passed by an R value reference and it's",
    "start": "1147120",
    "end": "1154120"
  },
  {
    "text": "consumed and so if that's deduced if it's a universal reference in C++ H you",
    "start": "1154120",
    "end": "1160400"
  },
  {
    "text": "want to constrain it uh to be an ourv value reference so which is really ugly unfortunately in",
    "start": "1160400",
    "end": "1166559"
  },
  {
    "text": "C++ uh uh that's a partial thing there what's missing is you also want the you",
    "start": "1166559",
    "end": "1172720"
  },
  {
    "text": "want T not to be deduced as a const which is really ugly um I wish that we",
    "start": "1172720",
    "end": "1179120"
  },
  {
    "text": "had a good way to just say sync and I haven't been able to come up with a good way to do it even with Concepts so if",
    "start": "1179120",
    "end": "1184760"
  },
  {
    "text": "you can come up with a way where I could just say like you know auto sync T I don't know of a way to do that",
    "start": "1184760",
    "end": "1190919"
  },
  {
    "text": "there's no way to get the ref ref on there right so so it's just ugly in",
    "start": "1190919",
    "end": "1200240"
  },
  {
    "text": "plus now each of these come with their own",
    "start": "1200240",
    "end": "1205440"
  },
  {
    "text": "contract if I say if I have a Le argument I have a implied post condition that that argument is not modified by",
    "start": "1205440",
    "end": "1212280"
  },
  {
    "text": "this function do not Cast Away Con on me if I have an in-out argument my post",
    "start": "1212280",
    "end": "1218000"
  },
  {
    "text": "condition is that the argument may be modified it doesn't have to be okay and if I have a sync argument the post",
    "start": "1218000",
    "end": "1224799"
  },
  {
    "text": "condition is that the argument is assumed to be consumed okay whether or not it is consumed the caller has to",
    "start": "1224799",
    "end": "1232039"
  },
  {
    "text": "assume it was okay now picking on C++ again C++",
    "start": "1232039",
    "end": "1239520"
  },
  {
    "text": "co- routine handles have a really nasty interface where when you're handing off the co- routine handle it may or may not",
    "start": "1239520",
    "end": "1245360"
  },
  {
    "text": "be consumed and that's really difficult to deal with in the face of a possible exception in error",
    "start": "1245360",
    "end": "1252640"
  },
  {
    "text": "handling now the client uh can from a move from argument the client",
    "start": "1252640",
    "end": "1258679"
  },
  {
    "text": "can subsequently assign to the argument or destruct it those are your only",
    "start": "1258679",
    "end": "1266600"
  },
  {
    "text": "options so now we can do a more complex example we're going to give it a good",
    "start": "1268480",
    "end": "1274720"
  },
  {
    "text": "name called offset we're going to write a function that offsets the argument X by n and",
    "start": "1274720",
    "end": "1283120"
  },
  {
    "text": "we're going to write it like this everybody agree it looks okay okay",
    "start": "1283120",
    "end": "1288760"
  },
  {
    "text": "yeah it's good we're going to call it like this what does it",
    "start": "1288760",
    "end": "1297000"
  },
  {
    "text": "print does it print two or four four but we said that it wasn't",
    "start": "1297400",
    "end": "1305279"
  },
  {
    "text": "going to modify n right but it did so is that the",
    "start": "1305279",
    "end": "1312080"
  },
  {
    "text": "problem of the function or the problem of the caller okay so it's going to print",
    "start": "1312080",
    "end": "1319880"
  },
  {
    "text": "four but we're violating our post conditions and we don't really know who",
    "start": "1319880",
    "end": "1326960"
  },
  {
    "text": "violated our contract here okay to see why this is a problem",
    "start": "1326960",
    "end": "1333360"
  },
  {
    "text": "let's Implement offset a little bit differently we're going to write a",
    "start": "1333360",
    "end": "1338440"
  },
  {
    "text": "loop and we're going to increment x n",
    "start": "1338440",
    "end": "1343399"
  },
  {
    "text": "times and we're going to call it exactly the same way what will that",
    "start": "1344200",
    "end": "1351200"
  },
  {
    "text": "print anybody formatting of your hard drive yeah it will never",
    "start": "1351640",
    "end": "1356919"
  },
  {
    "text": "print it will keep going until it invokes UB and it will probably keep",
    "start": "1356919",
    "end": "1362480"
  },
  {
    "text": "going after that okay it will never terminate we didn't change the interface",
    "start": "1362480",
    "end": "1369120"
  },
  {
    "text": "we didn't change our contract okay and now we're in a situation where our code isn't even",
    "start": "1369120",
    "end": "1376000"
  },
  {
    "text": "terminating this happens in non-contrived",
    "start": "1376000",
    "end": "1383320"
  },
  {
    "text": "examples what does this code print",
    "start": "1383320",
    "end": "1389760"
  },
  {
    "text": "anybody you're erasing a Subzero so every element",
    "start": "1389760",
    "end": "1394919"
  },
  {
    "text": "that's a sub zero so that's Zero from a so I believe that we intentionally",
    "start": "1394919",
    "end": "1402080"
  },
  {
    "text": "support this because we are not allowed to not support it and therefore it will actually give you Vector of",
    "start": "1402080",
    "end": "1410440"
  },
  {
    "text": "nope it was a good guess so her guess was she believes that we actually do",
    "start": "1411320",
    "end": "1416720"
  },
  {
    "text": "support this the standard committee supports this because they're not allowed not to support it um Howard",
    "start": "1416720",
    "end": "1421880"
  },
  {
    "text": "hinnen has had a number of arguments about individual functions not this function so there are some functions",
    "start": "1421880",
    "end": "1428200"
  },
  {
    "text": "where where it's true it would do the right thing not this one so what does this",
    "start": "1428200",
    "end": "1435559"
  },
  {
    "text": "print one zer anybody know",
    "start": "1435559",
    "end": "1441919"
  },
  {
    "text": "why what happens is the algorithm for erase there and there's a link godbolt if you don't believe me and it's not",
    "start": "1441919",
    "end": "1447919"
  },
  {
    "text": "going to be the same according to the standard is actually unspecified what this means so we're going to erase the",
    "start": "1447919",
    "end": "1456039"
  },
  {
    "text": "first zero because that matches a sub Z but now a sub Z is a sub one because",
    "start": "1456039",
    "end": "1461240"
  },
  {
    "text": "that's actually passed in by reference okay so now we're going to erase",
    "start": "1461240",
    "end": "1466679"
  },
  {
    "text": "ones so but we've already got a one in the first in the first slot and so now we erase",
    "start": "1466679",
    "end": "1474080"
  },
  {
    "text": "the following one and that leaves the final zero okay",
    "start": "1474080",
    "end": "1480279"
  },
  {
    "text": "so that's what's going to happen with that piece of",
    "start": "1480480",
    "end": "1484799"
  },
  {
    "text": "code okay now if you really want to mess with your mind this is actually valid",
    "start": "1486559",
    "end": "1491840"
  },
  {
    "text": "t++ code what does this do",
    "start": "1491840",
    "end": "1497840"
  },
  {
    "text": "[Laughter] I didn't even have to say what what what",
    "start": "1498000",
    "end": "1503039"
  },
  {
    "text": "will it print if I tried to print a because this is what's going to happen",
    "start": "1503039",
    "end": "1510159"
  },
  {
    "text": "Okay so the object is actually its lifetime has begun at the point that a",
    "start": "1510159",
    "end": "1515919"
  },
  {
    "text": "is declared and so we can pass a to its own Constructor this was actually an intentional feature of C++ I learned",
    "start": "1515919",
    "end": "1522080"
  },
  {
    "text": "about this in the discussion with BNA who described this feature to me as an answer to how do you solve a",
    "start": "1522080",
    "end": "1528799"
  },
  {
    "text": "particular problem I was a bit horrified at the time",
    "start": "1528799",
    "end": "1534039"
  },
  {
    "text": "um uh because nobody expects self initialization not the standard Library",
    "start": "1534039",
    "end": "1540679"
  },
  {
    "text": "nobody that's a good way to to crash your app um what is supposed to mean is",
    "start": "1540679",
    "end": "1545919"
  },
  {
    "text": "is it's a way that you can write your own class that leaves an object in an",
    "start": "1545919",
    "end": "1551760"
  },
  {
    "text": "uninitialized State even though you have a default Constructor that would zero it so you can have a copy Constructor that",
    "start": "1551760",
    "end": "1558440"
  },
  {
    "text": "text in might being copied from self and then not initialize your members and in C you can actually write int a equals a",
    "start": "1558440",
    "end": "1568240"
  },
  {
    "text": "and that explicitly means don't initialize a okay",
    "start": "1568240",
    "end": "1574120"
  },
  {
    "text": "so like nobody knew that nobody expects self",
    "start": "1574120",
    "end": "1579799"
  },
  {
    "text": "initialization what does that example though have in common with a previous",
    "start": "1579799",
    "end": "1585120"
  },
  {
    "text": "example okay it's a problem of alias we have a appearing twice within the",
    "start": "1585120",
    "end": "1591880"
  },
  {
    "text": "same function so our",
    "start": "1591880",
    "end": "1598000"
  },
  {
    "text": "general preconditions here we're going to extend them referenced objects must be within the object lifetimes in out",
    "start": "1598000",
    "end": "1603960"
  },
  {
    "text": "and sync arguments cannot be accessed except directly by the implementation for the duration of the call lead",
    "start": "1603960",
    "end": "1610000"
  },
  {
    "text": "arguments passed by reference cannot be mutated for the duration of the call unless otherwise specified and that",
    "start": "1610000",
    "end": "1615399"
  },
  {
    "text": "actually covers that the arguments cannot a leas okay because then you would be modifying one and not the other",
    "start": "1615399",
    "end": "1622120"
  },
  {
    "text": "and so making this a precondition lifts that issue out to the caller because there is in general no way for the",
    "start": "1622120",
    "end": "1629640"
  },
  {
    "text": "function being called to check now Swift has this rule to achieve",
    "start": "1629640",
    "end": "1638399"
  },
  {
    "text": "memory safety Swift requires exclusive access to a variable in order to modify that variable in essence a variable",
    "start": "1638399",
    "end": "1644919"
  },
  {
    "text": "cannot be accessed via a different name for the duration in which the same variable is being modified as an inout",
    "start": "1644919",
    "end": "1651399"
  },
  {
    "text": "argument or as self with a mutating method okay that's from the Swift manual",
    "start": "1651399",
    "end": "1659799"
  },
  {
    "text": "uh uh uh uh and what is it exclusivity",
    "start": "1659799",
    "end": "1665799"
  },
  {
    "text": "enforcement so rust has borrowing says mutable references have one big",
    "start": "1665799",
    "end": "1670880"
  },
  {
    "text": "restriction if you have a mutable reference to a value you can have no other references to that",
    "start": "1670880",
    "end": "1676919"
  },
  {
    "text": "value okay now in C++ we have exactly the same rule",
    "start": "1676919",
    "end": "1683440"
  },
  {
    "text": "okay we just don't have the language facilities to enforce it it is up to",
    "start": "1683440",
    "end": "1688720"
  },
  {
    "text": "each and every one of you to enforce it uh John McCall coined the term the law",
    "start": "1688720",
    "end": "1694720"
  },
  {
    "text": "of exclusivity and it's the realization that mutex is in in exclusive access",
    "start": "1694720",
    "end": "1700760"
  },
  {
    "text": "doesn't just apply to threading it applies to every mutation within the system and it applies to your ability to",
    "start": "1700760",
    "end": "1707600"
  },
  {
    "text": "reason about it logically if you're writing the erase algorithm and you're",
    "start": "1707600",
    "end": "1712640"
  },
  {
    "text": "trying to handle the case of well what if this Alias is that and this Alias is that not only can the compiler not",
    "start": "1712640",
    "end": "1719000"
  },
  {
    "text": "reason about that and so the compiler is getting very pessimistic if it can determine that that things might Alias",
    "start": "1719000",
    "end": "1724880"
  },
  {
    "text": "is you cannot okay in the presence of aliasing you can't reason about your code so it's",
    "start": "1724880",
    "end": "1732159"
  },
  {
    "text": "a precondition on the caller they cannot pass you Alias arguments",
    "start": "1732159",
    "end": "1738320"
  },
  {
    "text": "okay so upholding it is left as an exercise to the",
    "start": "1739519",
    "end": "1744760"
  },
  {
    "text": "developer so now I want to talk a little bit about projections we haven't talked about function results",
    "start": "1746000",
    "end": "1752519"
  },
  {
    "text": "yet so let's start our discussion of projections there",
    "start": "1752519",
    "end": "1758679"
  },
  {
    "text": "okay so we had this function Returns the successor of of",
    "start": "1758679",
    "end": "1763919"
  },
  {
    "text": "X and we've got that",
    "start": "1763919",
    "end": "1768679"
  },
  {
    "text": "uh but no sorry I should have gone back here is there any reason why from a",
    "start": "1770039",
    "end": "1775399"
  },
  {
    "text": "function we would want to return a reference okay some form of a reference",
    "start": "1775399",
    "end": "1782440"
  },
  {
    "text": "yeah yeah some noding it's actually very common right so here's an example from",
    "start": "1782440",
    "end": "1787640"
  },
  {
    "text": "the standard Library I can have this vector and I can say A.B equals 42 a do",
    "start": "1787640",
    "end": "1793840"
  },
  {
    "text": "back in this case returns a reference to the last element within the vector",
    "start": "1793840",
    "end": "1798960"
  },
  {
    "text": "and then I can print it and it's not a quiz it prints what you would expect there's no aliasing issues",
    "start": "1798960",
    "end": "1805559"
  },
  {
    "text": "here okay so when we return a reference to a part of a hole we refer to that as",
    "start": "1805559",
    "end": "1811799"
  },
  {
    "text": "a projection right we've got some whole object we're returning some projection out of",
    "start": "1811799",
    "end": "1818399"
  },
  {
    "text": "it now projection qualifi mere argument qualifiers okay so we have mutable",
    "start": "1818399",
    "end": "1824440"
  },
  {
    "text": "projections right where we return something by a non-con graph we have Conant projections where where the",
    "start": "1824440",
    "end": "1830360"
  },
  {
    "text": "caller is not allowed to mutate the thing that they get back and we have consumable projections which are a little bit more rare but you can return",
    "start": "1830360",
    "end": "1836880"
  },
  {
    "text": "something by by an R value reference now returning consumable",
    "start": "1836880",
    "end": "1844399"
  },
  {
    "text": "protections as I said is relatively uncommon but sometimes if you know you're dealing with a temporary object you might want to cough up something",
    "start": "1844399",
    "end": "1851720"
  },
  {
    "text": "just before you go away and so you could have some extract function as a member function that's Bound for R Val",
    "start": "1851720",
    "end": "1858159"
  },
  {
    "text": "references which is the trailing refre syntax and coughs up some object on its way",
    "start": "1858159",
    "end": "1863519"
  },
  {
    "text": "out okay and mutable projections may also be consumed uh uh or mutable",
    "start": "1863519",
    "end": "1871360"
  },
  {
    "text": "projections uh may also be consumed from a non-temporary by explicitly using move",
    "start": "1871360",
    "end": "1877799"
  },
  {
    "text": "but in that case it's the caller's responsibility to put things back okay",
    "start": "1877799",
    "end": "1883159"
  },
  {
    "text": "either to delete that element that was extracted or to ass sign over it okay so",
    "start": "1883159",
    "end": "1889639"
  },
  {
    "text": "if you move the back some element from the back of a vector either get rid of it with pop",
    "start": "1889639",
    "end": "1896399"
  },
  {
    "text": "back or assign something new into its",
    "start": "1896399",
    "end": "1900320"
  },
  {
    "text": "slot okay a projection is invalidated when the object they are projected from",
    "start": "1901519",
    "end": "1907559"
  },
  {
    "text": "is modified other than through the projection okay so in this case if I've",
    "start": "1907559",
    "end": "1913840"
  },
  {
    "text": "got a projection P here is my projection to the zeroth element of my Vector array",
    "start": "1913840",
    "end": "1920760"
  },
  {
    "text": "and then I do a push back of one that reference is invalidated okay",
    "start": "1920760",
    "end": "1926440"
  },
  {
    "text": "that P is invalidated so the object they are",
    "start": "1926440",
    "end": "1932279"
  },
  {
    "text": "projected from is modified other than through the projection so or through another",
    "start": "1932279",
    "end": "1938960"
  },
  {
    "text": "nonoverlapping projection I can have multiple projections on something then that's okay and I can modify things",
    "start": "1938960",
    "end": "1944120"
  },
  {
    "text": "through both of those projections and modifying one projection doesn't doesn't invalidate the other",
    "start": "1944120",
    "end": "1950480"
  },
  {
    "text": "projection okay I can't do it if they're overlapping law of exclusivity you have to enforce",
    "start": "1950480",
    "end": "1958000"
  },
  {
    "text": "that okay but doing something like this that's going to invalidate my",
    "start": "1958399",
    "end": "1965600"
  },
  {
    "text": "projection okay so on this side not",
    "start": "1965919",
    "end": "1972200"
  },
  {
    "text": "invalidated okay the lifetime of and the other way that a projection ends",
    "start": "1974559",
    "end": "1980440"
  },
  {
    "text": "is if the lifetime of the objects they are projected from ends okay so in this",
    "start": "1980440",
    "end": "1985519"
  },
  {
    "text": "case when I'm projecting out of a vector when that Vector goes away all the projections onto that Vector are",
    "start": "1985519",
    "end": "1993880"
  },
  {
    "text": "invalidated so p is invalidated in this case right after",
    "start": "1995120",
    "end": "2000960"
  },
  {
    "text": "creation unfortunately um uh I think clang tidy actually warned on this one",
    "start": "2000960",
    "end": "2007840"
  },
  {
    "text": "uh none of the compilers did",
    "start": "2007840",
    "end": "2011840"
  },
  {
    "text": "so uh iterator pairs right begin and end iterator pairs views",
    "start": "2013679",
    "end": "2019559"
  },
  {
    "text": "spans those are a way to project a collection of values out of an object",
    "start": "2019559",
    "end": "2026279"
  },
  {
    "text": "okay so a view or a span that's a projection it follows the same rules I can have a mutable span and immutable",
    "start": "2026279",
    "end": "2032320"
  },
  {
    "text": "span okay they follow the same rules as reference projections about overlapping and",
    "start": "2032320",
    "end": "2038440"
  },
  {
    "text": "validation and lifetimes okay so doing this with copy",
    "start": "2038440",
    "end": "2045120"
  },
  {
    "text": "invalid right I've got overlapping projections I can't do that okay this is okay not",
    "start": "2045120",
    "end": "2053079"
  },
  {
    "text": "overlapping now copy has a special case right if you're",
    "start": "2053079",
    "end": "2058440"
  },
  {
    "text": "uh uh uh uh copying to the left it's allowed for your projections to be",
    "start": "2058440",
    "end": "2064398"
  },
  {
    "text": "overlapping okay but that's documented as a special case right so all of these",
    "start": "2064399",
    "end": "2070398"
  },
  {
    "text": "General preconditions always come with the Clause un less otherwise",
    "start": "2070399",
    "end": "2075960"
  },
  {
    "text": "specified okay so that's it with that way to just think about functions now we",
    "start": "2078679",
    "end": "2084440"
  },
  {
    "text": "have a framework within when we're writing our function we have a set of generalized",
    "start": "2084440",
    "end": "2089520"
  },
  {
    "text": "preconditions and now we can reason about our function and we're only dealing with the arguments we're not dealing with global variables we've",
    "start": "2089520",
    "end": "2095760"
  },
  {
    "text": "tried to get rid of all of our side effects X and so just looking at our function we can go through and we can",
    "start": "2095760",
    "end": "2101920"
  },
  {
    "text": "think about what does this function do we want to write small functions",
    "start": "2101920",
    "end": "2107200"
  },
  {
    "text": "structure them well no raw Loops follow all of my other rules and you can work through it but we",
    "start": "2107200",
    "end": "2114880"
  },
  {
    "text": "haven't talked about objects okay so let's start talking",
    "start": "2114880",
    "end": "2120640"
  },
  {
    "text": "about objects and we're going to do that looking at it through the lens through functions so we've got this function it",
    "start": "2120640",
    "end": "2127119"
  },
  {
    "text": "takes a sh pointer to a widget p is this",
    "start": "2127119",
    "end": "2133079"
  },
  {
    "text": "good is that an inout argument maybe is it being",
    "start": "2133079",
    "end": "2141320"
  },
  {
    "text": "consumed maybe is it constant maybe even if I",
    "start": "2141320",
    "end": "2148400"
  },
  {
    "text": "said it was a con shared pointer that really doesn't help to let me know whether or not it's modifying the",
    "start": "2148400",
    "end": "2153920"
  },
  {
    "text": "widget okay so this is incredibly context free and I see this all over in",
    "start": "2153920",
    "end": "2160240"
  },
  {
    "text": "the code I do not know what that signature means I do not have enough context to know what that signature",
    "start": "2160240",
    "end": "2168200"
  },
  {
    "text": "means okay what's the type of the argument F here right is it the shared",
    "start": "2168920",
    "end": "2175000"
  },
  {
    "text": "pointer is it the widget those are two distinct things",
    "start": "2175000",
    "end": "2181040"
  },
  {
    "text": "okay to understand F we need to understand the extent of P okay we need",
    "start": "2181040",
    "end": "2187319"
  },
  {
    "text": "to know where does p begin and where does p end and that includes everything else",
    "start": "2187319",
    "end": "2193079"
  },
  {
    "text": "that's pointing into P okay so to understand the extent of p in this case",
    "start": "2193079",
    "end": "2198960"
  },
  {
    "text": "breaks local reasoning we cannot think through",
    "start": "2198960",
    "end": "2204760"
  },
  {
    "text": "this now the foundation for any kind of reasoning is equational reasoning so I",
    "start": "2205560",
    "end": "2211000"
  },
  {
    "text": "want to touch on this equational reasoning is proving that expression are",
    "start": "2211000",
    "end": "2218040"
  },
  {
    "text": "equal by substituting equals for equals okay that's the basic idea and",
    "start": "2218040",
    "end": "2223839"
  },
  {
    "text": "equationally equational reasoning explains how code works and is a component part of any larger",
    "start": "2223839",
    "end": "2230079"
  },
  {
    "text": "proof okay to know if two values are equal we",
    "start": "2230079",
    "end": "2235240"
  },
  {
    "text": "need to know the extent of those two",
    "start": "2235240",
    "end": "2238960"
  },
  {
    "text": "values so equality which we've been talking about is an equivalent relationship right it's",
    "start": "2240839",
    "end": "2247040"
  },
  {
    "text": "reflects it's semantics it's transitive I hope you all know that and equality is connected to copy",
    "start": "2247040",
    "end": "2254359"
  },
  {
    "text": "copies must be equal but disjoint okay what I mean by disjoint is that if I if I'm able to modify one side",
    "start": "2254359",
    "end": "2261520"
  },
  {
    "text": "that it doesn't affect the copy of it okay so copies are equal but",
    "start": "2261520",
    "end": "2267839"
  },
  {
    "text": "disjoint this which I threw up earlier which everybody nodded and agreed with okay this is an example of equational",
    "start": "2267839",
    "end": "2274800"
  },
  {
    "text": "reasoning and this formula only holds if whatever type T is here okay is",
    "start": "2274800",
    "end": "2285079"
  },
  {
    "text": "contained right if that becomes a shared pointer and there's other mutations happening in the",
    "start": "2285079",
    "end": "2290599"
  },
  {
    "text": "system does that hold I don't know I've lost my ability to reason about that",
    "start": "2290599",
    "end": "2297000"
  },
  {
    "text": "okay so this simple formula only holds as long as equational reasoning",
    "start": "2297000",
    "end": "2303480"
  },
  {
    "text": "holds so how do we build up Lar objects then well a composite object is made up of objects called its parts right so we",
    "start": "2305359",
    "end": "2312599"
  },
  {
    "text": "have a hole and we have Parts the whole part relationship satisfies four",
    "start": "2312599",
    "end": "2318160"
  },
  {
    "text": "properties connectedness the whole is connected to the parts non-circularity",
    "start": "2318160",
    "end": "2323760"
  },
  {
    "text": "the whole is not a part of its parts okay disjointedness the hole is not",
    "start": "2323760",
    "end": "2331520"
  },
  {
    "text": "connected to some other hole right modifying one modifying a copy doesn't modify the original and ownership when",
    "start": "2331520",
    "end": "2338359"
  },
  {
    "text": "the whole goes away all the parts go away okay that's the the definition of a",
    "start": "2338359",
    "end": "2343560"
  },
  {
    "text": "whole part relationship so if I have a vector of a 0 1 2 3 right the one two 3 values in",
    "start": "2343560",
    "end": "2352160"
  },
  {
    "text": "the vector are the parts of the vector and the vector contains them okay if I have a struct like",
    "start": "2352160",
    "end": "2360040"
  },
  {
    "text": "this with uh a name and ID okay that holds to that relationship",
    "start": "2360040",
    "end": "2368119"
  },
  {
    "text": "I have name and ID are the parts of B bad",
    "start": "2368119",
    "end": "2374680"
  },
  {
    "text": "name I can just hear Kate in the back of my head what he could have done better",
    "start": "2376640",
    "end": "2382480"
  },
  {
    "text": "uh right so that original piece of code I want to rewrite it as something like this I've got some",
    "start": "2382480",
    "end": "2388520"
  },
  {
    "text": "function that's modifying an instance of my widget and in 99% of the cases when I",
    "start": "2388520",
    "end": "2394040"
  },
  {
    "text": "see shared pointers in interfaces they could be replaced with a reference to",
    "start": "2394040",
    "end": "2399119"
  },
  {
    "text": "the actual thing that they're pointing to I don't need to pass the shared pointer in okay I'm not operating on the",
    "start": "2399119",
    "end": "2405440"
  },
  {
    "text": "shared pointer and operating on the object on the other end of that",
    "start": "2405440",
    "end": "2410119"
  },
  {
    "text": "pointer okay so and it should be possible to express that as an action",
    "start": "2411640",
    "end": "2416880"
  },
  {
    "text": "form right I can consume p and return a a a new a new",
    "start": "2416880",
    "end": "2423160"
  },
  {
    "text": "widget okay that's a simple transformation",
    "start": "2423160",
    "end": "2428040"
  },
  {
    "text": "so objects us as arguments must be independent under mutation to uphold the law of",
    "start": "2429440",
    "end": "2435240"
  },
  {
    "text": "exclusivity they have to be so we have to create our objects so they're",
    "start": "2435240",
    "end": "2440800"
  },
  {
    "text": "independent and copies are equal in logically disjoint that's the number one way that you know that your objects are",
    "start": "2440880",
    "end": "2450079"
  },
  {
    "text": "independent okay there are three primary ways we can achieve independence one is",
    "start": "2450079",
    "end": "2455960"
  },
  {
    "text": "by disallowing mutation that's the functional programming approach another is by disallowing",
    "start": "2455960",
    "end": "2463079"
  },
  {
    "text": "sharing okay and third is we can say well we'll only allow mutation when",
    "start": "2463079",
    "end": "2469720"
  },
  {
    "text": "there's no sharing so we'll take a copy on right approach",
    "start": "2469720",
    "end": "2476079"
  },
  {
    "text": "okay now extending independence with mutation a mutable object May extend permission",
    "start": "2476960",
    "end": "2483359"
  },
  {
    "text": "for mutation to its parts through projections so if I've got a mutable hole I can",
    "start": "2483359",
    "end": "2489760"
  },
  {
    "text": "create a projection to it and I can extend the privilege to modify that to the functions I'm calling through those",
    "start": "2489760",
    "end": "2496440"
  },
  {
    "text": "projections so so long as those projections do not",
    "start": "2496440",
    "end": "2501759"
  },
  {
    "text": "overlap now a couple quick examples right here's kind of the canonical",
    "start": "2504319",
    "end": "2509839"
  },
  {
    "text": "structure that I use for a class um I've kind of moved away from saying you need",
    "start": "2509839",
    "end": "2515359"
  },
  {
    "text": "a default Constructor a lot of times it just doesn't make sense let's just create objects with real values if you",
    "start": "2515359",
    "end": "2520720"
  },
  {
    "text": "have a meaningful default that's fine okay uh uh you've got some Constructor",
    "start": "2520720",
    "end": "2528599"
  },
  {
    "text": "that constructs it in terms of its parts uh I've started marking my copy",
    "start": "2528599",
    "end": "2534000"
  },
  {
    "text": "Constructors as explicit uh this comes from programming in Hyo in Hyo we have",
    "start": "2534000",
    "end": "2539760"
  },
  {
    "text": "uh uh uh destructive move and move is implicit so if I if I say b equals a",
    "start": "2539760",
    "end": "2547400"
  },
  {
    "text": "then a is now gone and out of scope and that was an implicit implicit move if I",
    "start": "2547400",
    "end": "2553040"
  },
  {
    "text": "wanted a copy I have to say a equals copy B okay and that's even true of an",
    "start": "2553040",
    "end": "2559920"
  },
  {
    "text": "integer okay which sounds like it would be very verbose turns out copies are actually rare and this is completely",
    "start": "2559920",
    "end": "2566319"
  },
  {
    "text": "fine and so I've kind of started doing that in my C++ code",
    "start": "2566319",
    "end": "2571400"
  },
  {
    "text": "um uh uh uh uh uh so that's for that um and then we want to have an equal equal",
    "start": "2571400",
    "end": "2578520"
  },
  {
    "text": "and luckily now we get a not equal by default as soon as we declare our equal equal um uh uh so this is the canonical",
    "start": "2578520",
    "end": "2587920"
  },
  {
    "text": "template now you might have remote remote parts uh maybe you want them shared uh that's fine if you're going to",
    "start": "2587920",
    "end": "2594800"
  },
  {
    "text": "share things no mutation right right that was our rule before how do we get in Independence no",
    "start": "2594800",
    "end": "2600480"
  },
  {
    "text": "mutation so now we've got a shared pointer to a const part now that's private inside of this class and we're",
    "start": "2600480",
    "end": "2606280"
  },
  {
    "text": "not going to expose that shared pointer outside of that class because as soon as I do I could apply a non-const pointer",
    "start": "2606280",
    "end": "2612760"
  },
  {
    "text": "of the same type into that thing and then all all bets are lost okay now when",
    "start": "2612760",
    "end": "2619599"
  },
  {
    "text": "I do that I probably want to also provide equal equal in terms of the thing that",
    "start": "2619599",
    "end": "2627359"
  },
  {
    "text": "my pointer is pointing to and not the pointer itself but it's actually not horrible if I just leave operator equal",
    "start": "2627359",
    "end": "2634319"
  },
  {
    "text": "equal as default it satisfies all my AC a copy is equal to a copy okay and if I",
    "start": "2634319",
    "end": "2640440"
  },
  {
    "text": "expect my objects to be relatively unique then that equivalence implies a",
    "start": "2640440",
    "end": "2645559"
  },
  {
    "text": "true a true equivalent just not the converse okay and that's okay your code",
    "start": "2645559",
    "end": "2651319"
  },
  {
    "text": "will be fine okay or I could just say I don't",
    "start": "2651319",
    "end": "2656880"
  },
  {
    "text": "want to share it I don't want to pay the overhead of a shared part but I do have something that's variable size or uh or",
    "start": "2656880",
    "end": "2664160"
  },
  {
    "text": "for whatever reason I'm doing a p a pimple pattern I want to make my part remote so I can stick it in a unique",
    "start": "2664160",
    "end": "2671000"
  },
  {
    "text": "pointer that's fine okay but you should still write a copy Constructor that",
    "start": "2671000",
    "end": "2676960"
  },
  {
    "text": "copies the thing that that pointer points to okay let's make our our type be regular type and now you have to",
    "start": "2676960",
    "end": "2684400"
  },
  {
    "text": "Define your own operator equal equal okay if you just use the default operator equal equal you just broke the",
    "start": "2684400",
    "end": "2691559"
  },
  {
    "text": "axioms of copy because copies will not be equal Okay so now you must it's not okay",
    "start": "2691559",
    "end": "2698559"
  },
  {
    "text": "to just default it Okay so we've covered whole Parts",
    "start": "2698559",
    "end": "2704720"
  },
  {
    "text": "relationships and we've covered our functions in all of our arguments and so now we have a way that we can build up",
    "start": "2704720",
    "end": "2710119"
  },
  {
    "text": "larger things okay and we can they're independent and so we can use them as",
    "start": "2710119",
    "end": "2715520"
  },
  {
    "text": "arguments and we're not going to create a mess but code is never so simple we have",
    "start": "2715520",
    "end": "2722839"
  },
  {
    "text": "extrinsic relationships extrinsic relationships are any relationship that's not a whole part relationship",
    "start": "2722839",
    "end": "2729599"
  },
  {
    "text": "okay it's an external relationship and these things just",
    "start": "2729599",
    "end": "2734760"
  },
  {
    "text": "happen as soon as you have an object in a space that object has a relationship with the space in which it resides okay",
    "start": "2734760",
    "end": "2742520"
  },
  {
    "text": "as soon as I have a vector of these parts I have a whole bunch of relationships a z is before",
    "start": "2742520",
    "end": "2747760"
  },
  {
    "text": "A1 okay extrinsic relationships just happen and this is where all of the",
    "start": "2747760",
    "end": "2753079"
  },
  {
    "text": "complexity of our software comes in okay we have to identify what are the essential",
    "start": "2753079",
    "end": "2759559"
  },
  {
    "text": "relationships and then we have to figure out how we're going to manage those relationships and my recommendation is",
    "start": "2759559",
    "end": "2765000"
  },
  {
    "text": "you take those essential relationships and you figure out how you package them into a class and you make up holding",
    "start": "2765000",
    "end": "2771160"
  },
  {
    "text": "those ex extrinsic relationships the invariant of your",
    "start": "2771160",
    "end": "2777040"
  },
  {
    "text": "class okay so they're only the relationships between the parts and we're going to to uphold them okay so",
    "start": "2777040",
    "end": "2786920"
  },
  {
    "text": "let's talk a little bit about relationships because we're throwing that term out a lot here A relationship is a connection between elements of two",
    "start": "2786920",
    "end": "2793880"
  },
  {
    "text": "sets for every relationship there's a corresponding binary predicate such as is married right I'm married to my wife",
    "start": "2793880",
    "end": "2801200"
  },
  {
    "text": "you can ask are you married I can say yes or no a relationship between objects may be severed by modifying or",
    "start": "2801200",
    "end": "2808400"
  },
  {
    "text": "destroying either of the objects in the relationship okay and that's really",
    "start": "2808400",
    "end": "2813720"
  },
  {
    "text": "unfortunate that's how we get spooky at action at a distance you modify something over here and the pointers",
    "start": "2813720",
    "end": "2819000"
  },
  {
    "text": "invalidated over there okay that's an example of invalidating a",
    "start": "2819000",
    "end": "2825000"
  },
  {
    "text": "relationship by modifying just one end of it now we can create objects that",
    "start": "2825000",
    "end": "2830319"
  },
  {
    "text": "witness a relationship right when I said a z is before a sub one there's no",
    "start": "2830319",
    "end": "2835880"
  },
  {
    "text": "object there okay but I can create an object like a pointer or an index or",
    "start": "2835880",
    "end": "2842559"
  },
  {
    "text": "something like that which is a witness to that relationship okay it is not the relationship it is just a witness to it",
    "start": "2842559",
    "end": "2850640"
  },
  {
    "text": "and so an object that is a witness uh uh to a severed relationship",
    "start": "2850640",
    "end": "2855680"
  },
  {
    "text": "May itself be invalid and it can be invalidated to the point like a pointer is a witness to a relationship some",
    "start": "2855680",
    "end": "2862319"
  },
  {
    "text": "relationship uh uh uh where when that relationship is is is severed my pointer",
    "start": "2862319",
    "end": "2868640"
  },
  {
    "text": "is invalidated and you can't even ask the question anymore are you part of that relationship okay that's UB",
    "start": "2868640",
    "end": "2877760"
  },
  {
    "text": "okay so that's a problem so you have an",
    "start": "2877760",
    "end": "2884280"
  },
  {
    "text": "extrinsic relationship if anybody want to cite some",
    "start": "2884280",
    "end": "2891440"
  },
  {
    "text": "examples nobody did I lose everybody we'll see your class stores a non-owning",
    "start": "2891440",
    "end": "2898200"
  },
  {
    "text": "pointer or any pointer that doesn't witness the whole part relationship you have an extrinsic",
    "start": "2898200",
    "end": "2904400"
  },
  {
    "text": "relationship your class door is a key or index okay the functional programming",
    "start": "2904400",
    "end": "2910440"
  },
  {
    "text": "guys will be like we don't have pointers I'm like you still have relationships okay you're still sticking",
    "start": "2910440",
    "end": "2915559"
  },
  {
    "text": "them all over your objects they're getting invalidated you're not tracking them you I will bet my life that one of",
    "start": "2915559",
    "end": "2922359"
  },
  {
    "text": "those failed software projects was written in a functional programming language",
    "start": "2922359",
    "end": "2928640"
  },
  {
    "text": "okay your reference a global variable okay Global variable is shared pretty",
    "start": "2929119",
    "end": "2935240"
  },
  {
    "text": "much by definition you have extrinsic relationship you use any synchronization",
    "start": "2935240",
    "end": "2942359"
  },
  {
    "text": "Primitives you have an extrinsic relationship okay by definition if you didn't if you didn't have sharing you",
    "start": "2942359",
    "end": "2949480"
  },
  {
    "text": "wouldn't need synchronization okay so how do we reason",
    "start": "2949480",
    "end": "2956280"
  },
  {
    "text": "locally about extrinsic relationships we need to encapsulate them into a class like I said before we need to put this",
    "start": "2956280",
    "end": "2963280"
  },
  {
    "text": "together the REM relationships are maintained by that that class it's that class's job to manage the extrinsic",
    "start": "2963280",
    "end": "2970680"
  },
  {
    "text": "relationships between its parts and make sure they are upheld an intrusive relationship in a",
    "start": "2970680",
    "end": "2977920"
  },
  {
    "text": "part right that would be like a pointer in a part can only be modified by the whole that owns it not by the part",
    "start": "2977920",
    "end": "2986000"
  },
  {
    "text": "itself okay containers are example of classes that manage extr relationships between",
    "start": "2986000",
    "end": "2993119"
  },
  {
    "text": "their parts right",
    "start": "2993119",
    "end": "2997400"
  },
  {
    "text": "now I wanted to put this up here as an analogy because I was looking for like can I find an example to kind of drive",
    "start": "2998280",
    "end": "3004119"
  },
  {
    "text": "this home and the reality is that once I start to develop a class that has some",
    "start": "3004119",
    "end": "3012160"
  },
  {
    "text": "complex invariant and I'm going to build it first as a bunch of separate classes and show that there's a relationship",
    "start": "3012160",
    "end": "3017799"
  },
  {
    "text": "there and then I'm going to package it all into a class and show that there's an invariant that needs to be encapsulated you're going to be looking",
    "start": "3017799",
    "end": "3023040"
  },
  {
    "text": "at walls of code and if I have to make it complex enough that it's meaning",
    "start": "3023040",
    "end": "3028079"
  },
  {
    "text": "it's not a useful example so I came up with this analogy I'm not talking about the game",
    "start": "3028079",
    "end": "3034319"
  },
  {
    "text": "of chess I'm talking about this particular game of chess and this particular chess board in this",
    "start": "3034319",
    "end": "3041160"
  },
  {
    "text": "particular State we only have eight pieces that we're concerned with okay now chest",
    "start": "3041160",
    "end": "3049799"
  },
  {
    "text": "pieces unlike my remote here closer to my glass here have no",
    "start": "3049799",
    "end": "3055839"
  },
  {
    "text": "state okay does everybody believe me chest piece has no State I mean if I held up a chest piece show me a moving part okay",
    "start": "3055839",
    "end": "3063960"
  },
  {
    "text": "does anybody think a chess piece has a state capture what's that capture",
    "start": "3063960",
    "end": "3069240"
  },
  {
    "text": "capture I mean it it it has operations does it have a",
    "start": "3069240",
    "end": "3074359"
  },
  {
    "text": "state King doesn't isn't allowed to have have moved before does",
    "start": "3074520",
    "end": "3081200"
  },
  {
    "text": "the yeah so we get uh uh some rules around did a castling happen uh could we",
    "start": "3081200",
    "end": "3087359"
  },
  {
    "text": "osant right has a pond moved yet uh things of that nature but we're talking about this chess board",
    "start": "3087359",
    "end": "3094280"
  },
  {
    "text": "okay so too late if there was castline it already happened we can on assant",
    "start": "3094280",
    "end": "3100400"
  },
  {
    "text": "none of our pawns are on square one okay okay so maybe you could model",
    "start": "3100400",
    "end": "3106040"
  },
  {
    "text": "those you might say color but that's known at compile time right okay so none",
    "start": "3106040",
    "end": "3111440"
  },
  {
    "text": "of these have state somebody over here peace can be captured or noted peace can be captured or not captured is that is",
    "start": "3111440",
    "end": "3119359"
  },
  {
    "text": "that part of the state of it or is that an extrinsic",
    "start": "3119359",
    "end": "3124400"
  },
  {
    "text": "relationship to the part I don't know if I held up a chest",
    "start": "3124400",
    "end": "3129480"
  },
  {
    "text": "piece tell me whether or not the chest piece was captured not the king could be checked",
    "start": "3129480",
    "end": "3134640"
  },
  {
    "text": "or not checked again relationship okay relationship specifically between the king in some",
    "start": "3134640",
    "end": "3141119"
  },
  {
    "text": "other piece okay so there's no States in chest pieces",
    "start": "3141119",
    "end": "3147240"
  },
  {
    "text": "okay what I was thought somebody would say was position right but just like an object in memory right it's not the",
    "start": "3147240",
    "end": "3154520"
  },
  {
    "text": "memory location that's the state of that object I can create an empty object with no State at some particular position",
    "start": "3154520",
    "end": "3161280"
  },
  {
    "text": "it's not the state of the object that's a relationship between the object and the container that contains it in this",
    "start": "3161280",
    "end": "3167040"
  },
  {
    "text": "case there's a relationship between all of these pieces and the board that contains them okay so here we have four",
    "start": "3167040",
    "end": "3174599"
  },
  {
    "text": "kinds of chest pieces they all have a really well- defined contract I'm not going to go through it but you know your",
    "start": "3174599",
    "end": "3179839"
  },
  {
    "text": "kings you can pick one of eight directions that they could move in they only move one square your Queens can",
    "start": "3179839",
    "end": "3185559"
  },
  {
    "text": "move in the same one of eight directions but you get uh a count of n which is between zero and seven uh uh for spaces",
    "start": "3185559",
    "end": "3193520"
  },
  {
    "text": "that they could move our Knights could move in eight places and our pawns are a",
    "start": "3193520",
    "end": "3198720"
  },
  {
    "text": "little bit different they can only move one space forward unless they're capturing and then they can move it a diagonal but we could write those",
    "start": "3198720",
    "end": "3204680"
  },
  {
    "text": "functions all very well defined cont all very simple okay and our chest board is",
    "start": "3204680",
    "end": "3210640"
  },
  {
    "text": "only 8 by8 we only have 64 squares okay they all contain a variant",
    "start": "3210640",
    "end": "3216599"
  },
  {
    "text": "of either nothing or one of our our our four types of pieces if even if we",
    "start": "3216599",
    "end": "3223400"
  },
  {
    "text": "separate them out by colors uh we only have seven okay but yeah we created a super complex",
    "start": "3223400",
    "end": "3231319"
  },
  {
    "text": "system here one that's very difficult to reason about you don't need many op",
    "start": "3231319",
    "end": "3236480"
  },
  {
    "text": "objects and many relationships within your system before your ability to reason breaks",
    "start": "3236480",
    "end": "3243160"
  },
  {
    "text": "down okay so if I start to ask well I've got the goal of winning the game and",
    "start": "3243160",
    "end": "3249480"
  },
  {
    "text": "it's White's next move that's a complicated system okay if I said well the goal is I need the queen in the top",
    "start": "3249480",
    "end": "3255599"
  },
  {
    "text": "right corner and the king in the bottom left corner uh without either of them getting captured okay that's a complex",
    "start": "3255599",
    "end": "3262040"
  },
  {
    "text": "thing to go and reason about and we build these little systems with our with our code the time when I came up with",
    "start": "3262040",
    "end": "3268040"
  },
  {
    "text": "this example I was like is there a smaller example what's the the smallest example I could come up with for kind of",
    "start": "3268040",
    "end": "3274440"
  },
  {
    "text": "number of objects and number of relationships where reasoning gets hard or breaks down entirely and Dave",
    "start": "3274440",
    "end": "3281280"
  },
  {
    "text": "Abrahams on my team said said oh I've got one uh uh this",
    "start": "3281280",
    "end": "3286760"
  },
  {
    "text": "one anybody know what this is this this is the three body problem",
    "start": "3286760",
    "end": "3293240"
  },
  {
    "text": "okay you know very popular these days because of of of Netflix um uh uh uh so",
    "start": "3293240",
    "end": "3301000"
  },
  {
    "text": "what's the problem here we start with three bodies they all have very well-defined contracts they all have a",
    "start": "3301000",
    "end": "3307040"
  },
  {
    "text": "relationship to each other uh they all start with some initial",
    "start": "3307040",
    "end": "3312200"
  },
  {
    "text": "conditions and now the once you set this into motion you can't predict at some",
    "start": "3312200",
    "end": "3318440"
  },
  {
    "text": "given State end where these three objects are going to be this is where the chaos theory",
    "start": "3318440",
    "end": "3323920"
  },
  {
    "text": "originates okay there is no closed form solution to where all of these objects",
    "start": "3323920",
    "end": "3329359"
  },
  {
    "text": "are going to end up in space and you don't need three objects before you get",
    "start": "3329359",
    "end": "3335480"
  },
  {
    "text": "chaos okay I've got this other example here so this is a a henan map or a henon",
    "start": "3335480",
    "end": "3342520"
  },
  {
    "text": "map I'm not quite sure how to pronounce it uh this is just two relationships and it forms this chaotic system and it's",
    "start": "3342520",
    "end": "3349799"
  },
  {
    "text": "impossible to predict where it's going to go it's two relatively simple",
    "start": "3349799",
    "end": "3355039"
  },
  {
    "text": "formulas now how many people here have been in a situation where they've been assigned a bug and the customer says or",
    "start": "3355039",
    "end": "3362119"
  },
  {
    "text": "whoever ass you know QE or somebody said okay well what I did was I did step a",
    "start": "3362119",
    "end": "3368000"
  },
  {
    "text": "and then I did step B and then it crashed and you do step a and you do step B and it doesn't",
    "start": "3368000",
    "end": "3376319"
  },
  {
    "text": "crash anybody hit those do you kind of see where I'm going how do you know",
    "start": "3376799",
    "end": "3381960"
  },
  {
    "text": "given step a and given step B whether or not the system is going to crash Maybe there's a whole bunch of other state",
    "start": "3381960",
    "end": "3388359"
  },
  {
    "text": "that you're relying on there were things that happened before a or things that happened between A and B that the person",
    "start": "3388359",
    "end": "3394760"
  },
  {
    "text": "forgot to mention okay and so given that small amount of",
    "start": "3394760",
    "end": "3400520"
  },
  {
    "text": "information we're not able to predict what the next step in the system is we just built a chaotic system okay we're",
    "start": "3400520",
    "end": "3408400"
  },
  {
    "text": "not able to project forward we need to be able to to figure out where we are we need to go all the way back to the",
    "start": "3408400",
    "end": "3413720"
  },
  {
    "text": "beginning and take every single step exactly as it was to get to where we",
    "start": "3413720",
    "end": "3420000"
  },
  {
    "text": "where where we end up to be okay it's not enough to just get the tail end of that",
    "start": "3420000",
    "end": "3425319"
  },
  {
    "text": "sequence so what we want to do is try to build systems that are not chaotic where we can predict the next step just",
    "start": "3425319",
    "end": "3432359"
  },
  {
    "text": "knowing the previous state that's it not everything around it but of that one",
    "start": "3432359",
    "end": "3437599"
  },
  {
    "text": "object of The Next Step if you said I crashed inside of this function it's like just give me the previous state of",
    "start": "3437599",
    "end": "3443160"
  },
  {
    "text": "the arguments to that function that's all I need to know should be all you need to know but we",
    "start": "3443160",
    "end": "3448880"
  },
  {
    "text": "don't build systems like that okay so what kind of structures are good",
    "start": "3448880",
    "end": "3456400"
  },
  {
    "text": "Hier hierarchies are good structures to have in code this is the whole part relationship right those forms form",
    "start": "3456400",
    "end": "3463440"
  },
  {
    "text": "containment hierarchies hierarchies are good structures relatively re to reason about",
    "start": "3463440",
    "end": "3469400"
  },
  {
    "text": "if you have them that exist outside of a class I don't recommend it but try to build a structure that somehow enforces",
    "start": "3469400",
    "end": "3475920"
  },
  {
    "text": "that that stays a hierarchy you don't know how many times I've seen somebody take like a view system and they say oh",
    "start": "3475920",
    "end": "3483079"
  },
  {
    "text": "I took this shared pointer from this view over here and I put it over here in my view and they both had parent links",
    "start": "3483079",
    "end": "3489480"
  },
  {
    "text": "and that parent link overwrite that Parent Link okay and now my system did something bizarre and wacky or crashed",
    "start": "3489480",
    "end": "3495960"
  },
  {
    "text": "or when this thing moved that thing moved instead okay how many people have seen problems like that yeah quite a few",
    "start": "3495960",
    "end": "3503599"
  },
  {
    "text": "quite a few okay so if you're going to have extrinsic relationships and you're not going to M manage them inside of a",
    "start": "3503599",
    "end": "3509000"
  },
  {
    "text": "class please do but if you must have some facility to make sure it stays a correct",
    "start": "3509000",
    "end": "3515520"
  },
  {
    "text": "hierarchy so what's the next thing it's a poly tree who knows what a poly tree",
    "start": "3515520",
    "end": "3522119"
  },
  {
    "text": "is one one person it's like not quite a generalized dag so a poly tree is a",
    "start": "3522119",
    "end": "3528599"
  },
  {
    "text": "little more than a hierarchy in that I can have joins but I can't ever rejoin I can't Branch out and come together okay",
    "start": "3528599",
    "end": "3536760"
  },
  {
    "text": "now this is a little more dangerous to have as as a structure and I need to take more care if my objects are forming",
    "start": "3536760",
    "end": "3542359"
  },
  {
    "text": "a poly tree and how I manage this every join is a potential contradiction every",
    "start": "3542359",
    "end": "3547640"
  },
  {
    "text": "join is where your race conditions happen every join is where you violate the the law of",
    "start": "3547640",
    "end": "3553559"
  },
  {
    "text": "exclusivity every join is where you write the value one from one function",
    "start": "3553559",
    "end": "3559839"
  },
  {
    "text": "and you write the value three from the other function and you're like why isn't it one anymore what happened okay",
    "start": "3559839",
    "end": "3566599"
  },
  {
    "text": "so so almost every join we write in our code we write it as last one in",
    "start": "3566599",
    "end": "3573720"
  },
  {
    "text": "wins and that's almost always the wrong rule okay so think about your joins now",
    "start": "3573720",
    "end": "3580079"
  },
  {
    "text": "joins aren't bad right addition is a join I can add two numbers and I get a result but when I add two numbers I",
    "start": "3580079",
    "end": "3586240"
  },
  {
    "text": "don't say throw away the first one just take the second one okay okay so if you have a join make it",
    "start": "3586240",
    "end": "3592920"
  },
  {
    "text": "explicit and specify what the semantics of that joint R the next thing we",
    "start": "3592920",
    "end": "3599559"
  },
  {
    "text": "have is structural complexity for dags okay so dags now directed acyclic graphs",
    "start": "3599559",
    "end": "3608799"
  },
  {
    "text": "I'm losing people I'm overtime aren't I I'm way over time I will try to speed it up sorry guys",
    "start": "3608799",
    "end": "3615880"
  },
  {
    "text": "um uh uh uh so structural complexity of",
    "start": "3615880",
    "end": "3621519"
  },
  {
    "text": "dags uh here what you've got problems is inconsistency okay I fan out along one way and then I",
    "start": "3622039",
    "end": "3629640"
  },
  {
    "text": "come back in and those are two relationships that that represent different aspects of the same thing and",
    "start": "3629640",
    "end": "3636079"
  },
  {
    "text": "are they consistent and when I wrote that code maybe they were consistent and then somebody modified the relationship",
    "start": "3636079",
    "end": "3642599"
  },
  {
    "text": "over here but forgot about that relationship and now they're inconsistent okay so more dangerous and",
    "start": "3642599",
    "end": "3650240"
  },
  {
    "text": "then if we get to the place where we've got a fully directed graph we've got a loop uh",
    "start": "3650240",
    "end": "3656520"
  },
  {
    "text": "now reasoning about this is pretty much off the table so what you need to do at this point is identify where that Loop",
    "start": "3656520",
    "end": "3663559"
  },
  {
    "text": "is figure out how to structure that as an algorithm what are the rules when does this terminate right what governs",
    "start": "3663559",
    "end": "3670359"
  },
  {
    "text": "governs this does it converge and make it one node that represents that entire",
    "start": "3670359",
    "end": "3676319"
  },
  {
    "text": "Loop and this leads us to the end of free relationships right so we started",
    "start": "3676520",
    "end": "3682920"
  },
  {
    "text": "talking about small talk and objectoriented programming and this dream that we could just build networks of objects and connect them together and",
    "start": "3682920",
    "end": "3690280"
  },
  {
    "text": "everything would leave would live harmoniously right it would just all work but it doesn't unfortunately you",
    "start": "3690280",
    "end": "3698079"
  },
  {
    "text": "know I think the 80s programmers were the hippies of the 60s and 70s right they were fans of these free",
    "start": "3698079",
    "end": "3706038"
  },
  {
    "text": "relationships okay so a free relationship is an extrinsic relationship that is not managed between",
    "start": "3706720",
    "end": "3712279"
  },
  {
    "text": "parts of an object okay not managed at all if we assume local reasoning what",
    "start": "3712279",
    "end": "3717799"
  },
  {
    "text": "meaningful structures can we build with free relationships is there anything it's an",
    "start": "3717799",
    "end": "3723880"
  },
  {
    "text": "interesting problem if I want to have a global variable and I want it to be shared what meaningful thing can I do in",
    "start": "3723880",
    "end": "3731160"
  },
  {
    "text": "that Global variable is it never okay or is it sometimes okay and how do you",
    "start": "3731160",
    "end": "3736400"
  },
  {
    "text": "qualify when sometimes is okay well this is the question that's",
    "start": "3736400",
    "end": "3742160"
  },
  {
    "text": "that's asked in this paper what is the family of problems that can be cons consistently computed in a distributed",
    "start": "3742160",
    "end": "3747640"
  },
  {
    "text": "fashion without coordination and what problems lie outside that family how do we know this paper is from 2019 so this",
    "start": "3747640",
    "end": "3755680"
  },
  {
    "text": "is relatively recent work and they have an answer and a proof it's a very nice paper a program has",
    "start": "3755680",
    "end": "3763319"
  },
  {
    "text": "consistent coordination free distributed implementation if and only if it is",
    "start": "3763319",
    "end": "3769119"
  },
  {
    "text": "monotonic anybody have any feeling for what that is you know what I'm on you know what",
    "start": "3769119",
    "end": "3775400"
  },
  {
    "text": "you know what I'm monotonic function is right so right a monotonic function like never comes back down it goes up right",
    "start": "3775400",
    "end": "3782359"
  },
  {
    "text": "or it goes down right but it never goes up and then down okay and what does that",
    "start": "3782359",
    "end": "3789559"
  },
  {
    "text": "mean from from programming well Conflict Free replicated data types crdts if",
    "start": "3789559",
    "end": "3794760"
  },
  {
    "text": "you've heard about that uh uh that's an example of a monotonic system and it",
    "start": "3794760",
    "end": "3800480"
  },
  {
    "text": "provides a framework for doing monotonic programming patterns immutable variables are very simple example of something",
    "start": "3800480",
    "end": "3806760"
  },
  {
    "text": "that's monotonic they don't exist and then they come into existence okay and then they never go out of existence",
    "start": "3806760",
    "end": "3813279"
  },
  {
    "text": "again okay so that's another example uh",
    "start": "3813279",
    "end": "3818359"
  },
  {
    "text": "in one of my talks I gave this example which is I refer to it as the Russian coeck algorithm which is kind of a cute",
    "start": "3818359",
    "end": "3824119"
  },
  {
    "text": "play on Russian peasant algorithm and I came up with this because I was actually watching how how a woman was uh very",
    "start": "3824119",
    "end": "3831160"
  },
  {
    "text": "efficiently managing coats at a coat check at a just blazing speed like how does she do that well here's the trick",
    "start": "3831160",
    "end": "3837839"
  },
  {
    "text": "she's giving out tickets the 0 1 2 3 4 which are always increasing in value and",
    "start": "3837839",
    "end": "3843799"
  },
  {
    "text": "when people come in and hand them her ticket she can do a quick binary search",
    "start": "3843799",
    "end": "3848839"
  },
  {
    "text": "on the rack and pull out their coat and hand it to them okay and then when the",
    "start": "3848839",
    "end": "3855000"
  },
  {
    "text": "coat rack is filled up she just squishes it all together and keeps putting the new coats on the end new coats always go",
    "start": "3855000",
    "end": "3860400"
  },
  {
    "text": "on the end numbers are always increasing so we can stack things out this way we put in in coats AB bcde E F G",
    "start": "3860400",
    "end": "3868960"
  },
  {
    "text": "H um and then people come in and claim their coats and so now their coats are",
    "start": "3868960",
    "end": "3874680"
  },
  {
    "text": "gone so we tum Stone them and then the rack fills up so we just push the remaining coats back together and then",
    "start": "3874680",
    "end": "3882200"
  },
  {
    "text": "more people add more coats now eight and nine and we keep going this is a monotonic system because the system will",
    "start": "3882200",
    "end": "3889960"
  },
  {
    "text": "never repeat its previous state okay it will never go back to the state it was in before",
    "start": "3889960",
    "end": "3897039"
  },
  {
    "text": "which means that I can safely share my my coat tickets across threads I can",
    "start": "3897039",
    "end": "3902279"
  },
  {
    "text": "distribute them out and my system is still meaningful you can either get the coat with the ticket or not get the coat",
    "start": "3902279",
    "end": "3907760"
  },
  {
    "text": "with a ticket uh uh but you'll never run into an ABA problem and threading okay",
    "start": "3907760",
    "end": "3913520"
  },
  {
    "text": "everything is well defined it's monotonic it's consistent okay so if you want to build",
    "start": "3913520",
    "end": "3919880"
  },
  {
    "text": "those free networks you have to build monotonic systems so in summary",
    "start": "3919880",
    "end": "3927359"
  },
  {
    "text": "be conservative when you're writing your code okay when you're calling a function and it doesn't have a well- defined",
    "start": "3927359",
    "end": "3933640"
  },
  {
    "text": "specification assume that that the uh anything that's not that",
    "start": "3933640",
    "end": "3941160"
  },
  {
    "text": "doesn't appear to be well defined is an implicit precondition that failed to be",
    "start": "3941160",
    "end": "3946640"
  },
  {
    "text": "documented don't assume you're going to get an error back okay avoid modifying shared state",
    "start": "3946640",
    "end": "3953440"
  },
  {
    "text": "if you don't know it's shared considered immutable okay or make a copy avoid creating new",
    "start": "3953440",
    "end": "3959720"
  },
  {
    "text": "sharing don't hold a member by shared reference if you didn't create it just don't if you're dealing with reference",
    "start": "3959720",
    "end": "3966240"
  },
  {
    "text": "semantics make it clear if you are returning a new object or a reference to an existing one and don't take shared",
    "start": "3966240",
    "end": "3973799"
  },
  {
    "text": "pointers in your interface as as arguments okay and remember the power of preconditions to push the responsibility",
    "start": "3973799",
    "end": "3980880"
  },
  {
    "text": "onto the caller it seems like a silly thing but you do that and",
    "start": "3980880",
    "end": "3986160"
  },
  {
    "text": "the responsibilities become clear and it's you're actually doing your caller a favor because now your caller doesn't",
    "start": "3986160",
    "end": "3993160"
  },
  {
    "text": "have to reason about all these other cases they just have to assure that they're satisfying your preconditions",
    "start": "3993160",
    "end": "3999200"
  },
  {
    "text": "based off their arguments and their preconditions and everything flows down interfaces should make the scope of",
    "start": "3999200",
    "end": "4006720"
  },
  {
    "text": "the operation clear projections provide an efficient way to achieve value semantics and still",
    "start": "4006720",
    "end": "4013240"
  },
  {
    "text": "manipulate the parts and still have mutation it's the client's responsibility to uphold the law of",
    "start": "4013240",
    "end": "4019839"
  },
  {
    "text": "exclusivity okay the implementer cannot",
    "start": "4019839",
    "end": "4025200"
  },
  {
    "text": "okay don't pass projections that overlap a mutable",
    "start": "4025200",
    "end": "4031079"
  },
  {
    "text": "projection implementers provide types with value semantics when you're writing a new a new type don't create shared",
    "start": "4031160",
    "end": "4038440"
  },
  {
    "text": "types right uphold value semantics make sure that your equal equal is the right thing make sure you implement",
    "start": "4038440",
    "end": "4044520"
  },
  {
    "text": "copy confine extrinsic relationships between Parts within a class and write",
    "start": "4044520",
    "end": "4049760"
  },
  {
    "text": "down the class invariance and check your class invariance and write test cases for them as the relationships between",
    "start": "4049760",
    "end": "4055559"
  },
  {
    "text": "Parts scale seek a more General solution and this last point when we looked at",
    "start": "4055559",
    "end": "4061240"
  },
  {
    "text": "the chessboard with eight pieces if you're looking at that chess board and you've got eight objects in your code",
    "start": "4061240",
    "end": "4067559"
  },
  {
    "text": "and you've got this small address space and you're trying to figure out okay you're writing code that's like if the",
    "start": "4067559",
    "end": "4073279"
  },
  {
    "text": "black piece moves here then then I'll move this piece over here but if they do",
    "start": "4073279",
    "end": "4078400"
  },
  {
    "text": "that then I'll do this and you're getting this whole morass of logic and there's no way you can reason through all the steps then you're like oh well",
    "start": "4078400",
    "end": "4085279"
  },
  {
    "text": "then next if they had moved there then I have to consider this case okay then you have to step back and say what's the",
    "start": "4085279",
    "end": "4092720"
  },
  {
    "text": "algorithm to play the game of chess and how do I write that and at",
    "start": "4092720",
    "end": "4098640"
  },
  {
    "text": "some point your individual relationships be become so complex that that's your only solution you cannot reason through",
    "start": "4098640",
    "end": "4106040"
  },
  {
    "text": "all the possibilities you have to stand back and solve the system as a whole and",
    "start": "4106040",
    "end": "4112400"
  },
  {
    "text": "then Implement that algorithm and now your chess board's",
    "start": "4112400",
    "end": "4117238"
  },
  {
    "text": "okay okay so that's the end of my talk I apologize for running over time uh I",
    "start": "4117640",
    "end": "4123880"
  },
  {
    "text": "hope you all enjoyed it I am here the rest of the day if anybody wants to chat uh or go out to dinner or whatever uh",
    "start": "4123880",
    "end": "4130560"
  },
  {
    "text": "since we don't have time for Q and Q&A but if anybody wants to come on up please feel free",
    "start": "4130560",
    "end": "4135939"
  },
  {
    "text": "[Applause]",
    "start": "4135939",
    "end": "4148629"
  }
]