[
  {
    "text": "cool so thank you for having me as a speaker today at NDC Copenhagen it's",
    "start": "3480",
    "end": "8639"
  },
  {
    "text": "nice to be back in person on the stage and um I'm purnima Nair I'll be talking",
    "start": "8639",
    "end": "14400"
  },
  {
    "text": "about Jason over HTTP multiple ways a little bit about myself I'm a",
    "start": "14400",
    "end": "20160"
  },
  {
    "text": "freelance.net developer and I live in Berkshire UK with my husband and seven-year-old daughter I'm a Microsoft",
    "start": "20160",
    "end": "27119"
  },
  {
    "text": "MVP for developer Technologies and I do a lot of work with umbraco which is a.net based open source CMS in fact my",
    "start": "27119",
    "end": "34620"
  },
  {
    "text": "day-to-day job is primarily with umbraco and I've been an umbraway MVP for the past three years known work me you",
    "start": "34620",
    "end": "42120"
  },
  {
    "text": "already know that I'm a mother so right now my husband and kiddo are in Denmark they are at Legoland while mommy",
    "start": "42120",
    "end": "48840"
  },
  {
    "text": "speaks at NDC and non-work me again I do a lot of reading I can read anything",
    "start": "48840",
    "end": "54660"
  },
  {
    "text": "Tech books to a English novel that's all good and I'm also a student of carnatic",
    "start": "54660",
    "end": "62160"
  },
  {
    "text": "Music vocals carnatic music is a stream of Indian classical music and I have been a student for the past five years",
    "start": "62160",
    "end": "67920"
  },
  {
    "text": "on its focus and that's what my Twitter handle should use to connect with me on Twitter",
    "start": "67920",
    "end": "74540"
  },
  {
    "text": "talking about Jason over HTTP it's probably the most popular API pattern",
    "start": "74700",
    "end": "81720"
  },
  {
    "text": "out there think of an API which you would want to develop I think as developers we have this subconscious",
    "start": "81720",
    "end": "87479"
  },
  {
    "text": "mentality to go towards Jason on HTTP it's that popular as a pattern but when",
    "start": "87479",
    "end": "94320"
  },
  {
    "text": "we do that we invariably or at least I have done this been there done that give",
    "start": "94320",
    "end": "99659"
  },
  {
    "text": "the name rest whether rest is Json over HTTP is an entirely different discussion",
    "start": "99659",
    "end": "106200"
  },
  {
    "text": "for another day but that's not the point that I want to make today there are other patterns which will help you serve",
    "start": "106200",
    "end": "112380"
  },
  {
    "text": "Json over HTTP like graphql and the newest grpcjson transcoding so we'll",
    "start": "112380",
    "end": "119100"
  },
  {
    "text": "have a look at all these three API patterns and go for a comparison at the end so any questions come find me after",
    "start": "119100",
    "end": "125700"
  },
  {
    "text": "the talk and we can have a conversation because the last time I practiced I was bordering on about 59 minutes with it",
    "start": "125700",
    "end": "131039"
  },
  {
    "text": "with the talk today talking about HTTP https everywhere but",
    "start": "131039",
    "end": "137340"
  },
  {
    "text": "still a little bit of history is the foundation of communication for the worldwide web the first revision was in",
    "start": "137340",
    "end": "143580"
  },
  {
    "text": "1996 followed by 1.1 of HTTP in 1997. we've had updates after that to http 1.1",
    "start": "143580",
    "end": "151620"
  },
  {
    "text": "with the latest updates happening in 2014 but right now we also have HTTP 2",
    "start": "151620",
    "end": "157500"
  },
  {
    "text": "as a published RFC and that was done in may 2015. we are also looking at HTTP 3",
    "start": "157500",
    "end": "164280"
  },
  {
    "text": "and the first draft of HTTP 3 was published in 2020 it is getting out",
    "start": "164280",
    "end": "169440"
  },
  {
    "text": "there which means that even patterns like grpc which came out with official",
    "start": "169440",
    "end": "175379"
  },
  {
    "text": "supporting.net with the version 3.0.net core grpc is beginning to have support",
    "start": "175379",
    "end": "181319"
  },
  {
    "text": "with HTTP 3 as well it's a stateless protocol what HTTP gives us is a very",
    "start": "181319",
    "end": "186900"
  },
  {
    "text": "rich toolkit like request responses caching Authentication and HTTP methods",
    "start": "186900",
    "end": "195060"
  },
  {
    "text": "to the point that when we talk about the various different patterns of apis",
    "start": "195060",
    "end": "200280"
  },
  {
    "text": "serving data over HTTP it all boils down to how these API patterns use this",
    "start": "200280",
    "end": "206459"
  },
  {
    "text": "really nice toolkit which HTTP provides us with and my talk deals with exactly the same",
    "start": "206459",
    "end": "212340"
  },
  {
    "text": "we'll be talking about requests responses and HTTP methods quite a lot today",
    "start": "212340",
    "end": "218340"
  },
  {
    "text": "talking about Json they say that after the first Json message was sent in 2001",
    "start": "218340",
    "end": "223799"
  },
  {
    "text": "the West is history it's an open standard it's lightweight it's text",
    "start": "223799",
    "end": "228840"
  },
  {
    "text": "based and it's language independent which makes it a really popular choice for developers out there",
    "start": "228840",
    "end": "235340"
  },
  {
    "text": "and the widespread adoption of JavaScript and the popularity which rest",
    "start": "235340",
    "end": "240420"
  },
  {
    "text": "gained amongst developers made Json even more popular to the point that every",
    "start": "240420",
    "end": "246239"
  },
  {
    "text": "programming language out there has a way of passing and understanding Json",
    "start": "246239",
    "end": "251700"
  },
  {
    "text": "I am a dotnet developer I like to talk about net packages and what's happening at the.net realm and we have Newtons of",
    "start": "251700",
    "end": "259440"
  },
  {
    "text": "Json which is incredibly popular has been out there for ages and we also have",
    "start": "259440",
    "end": "265199"
  },
  {
    "text": "system text Json which is kind of newer uh into the realm at the moment and my",
    "start": "265199",
    "end": "270540"
  },
  {
    "text": "focus all my code to the user system takes Json this package is built in as a part of",
    "start": "270540",
    "end": "276900"
  },
  {
    "text": "the shared framework for net course 3.0 and later so if you create a say a web",
    "start": "276900",
    "end": "282060"
  },
  {
    "text": "API project or anything that needs Json at the moment this would be your go to library at the moment",
    "start": "282060",
    "end": "288360"
  },
  {
    "text": "but you can even have it in previous versions of net core Newton soft Json",
    "start": "288360",
    "end": "294120"
  },
  {
    "text": "still continues to exist you can have support for that that's all there which system takes Json it uses runtime",
    "start": "294120",
    "end": "301259"
  },
  {
    "text": "reflection to gather metadata metadata is the information that the package needs to access things like information",
    "start": "301259",
    "end": "308460"
  },
  {
    "text": "on how to access the property Getters or the property Setters what about the customizations that you can have to",
    "start": "308460",
    "end": "315000"
  },
  {
    "text": "your.net classes that is the metadata that is needs and this metadata is gathered at runtime by default by this",
    "start": "315000",
    "end": "323639"
  },
  {
    "text": "package however with net 6 you can also use Source generation to gather the same",
    "start": "323639",
    "end": "329340"
  },
  {
    "text": "metadata at compile time um if you are after performance with",
    "start": "329340",
    "end": "334680"
  },
  {
    "text": "serialization and deserialization Source generation is the way to go because I read somewhere that there's about 40",
    "start": "334680",
    "end": "340320"
  },
  {
    "text": "percent increase in performance when you do it the source generation way because this happens entirely at compile time",
    "start": "340320",
    "end": "346039"
  },
  {
    "text": "however the Richer feature set is with the runtime reflection with it has more",
    "start": "346039",
    "end": "352080"
  },
  {
    "text": "features so if you want to have a good comparison of what each pattern supports go have a look at the MS docs",
    "start": "352080",
    "end": "359240"
  },
  {
    "text": "documentation for this I have included a link to that in my resource docs at the",
    "start": "359240",
    "end": "364320"
  },
  {
    "text": "end of the day so for my APA patterns I am coming up with a simple to-do list API which is",
    "start": "364320",
    "end": "372360"
  },
  {
    "text": "based on a very simple class which looks like so you'll get to see this class more often now and it's got all The",
    "start": "372360",
    "end": "379979"
  },
  {
    "text": "Usual Suspects like ID name complete nodes but trust me I'm a working mother",
    "start": "379979",
    "end": "385319"
  },
  {
    "text": "I'm a full-time working mother and no to-do list AP can sort out things for me",
    "start": "385319",
    "end": "390660"
  },
  {
    "text": "everything is in my brain and I'm multitask like no one else but nevertheless what I expect to see at",
    "start": "390660",
    "end": "398880"
  },
  {
    "text": "the end of my API is a Json object that looks like this this is the web default",
    "start": "398880",
    "end": "403919"
  },
  {
    "text": "of this particular class because there are certain behave behavioral differences between default system",
    "start": "403919",
    "end": "409740"
  },
  {
    "text": "system text Json and the web defaults for example by default system text Json",
    "start": "409740",
    "end": "416759"
  },
  {
    "text": "uses the.net casing so if you have a net casing in your class that is used by",
    "start": "416759",
    "end": "422100"
  },
  {
    "text": "default when it's realized serializes unless and until you choose to customize it but the web defaults to camel KC you",
    "start": "422100",
    "end": "430139"
  },
  {
    "text": "get minified Json there's no change there however you can printify it and system text Json by default uses",
    "start": "430139",
    "end": "437940"
  },
  {
    "text": "case sensitive property names for deserialization again for web default it's case insensitive so there are",
    "start": "437940",
    "end": "445500"
  },
  {
    "text": "certain subtle behavioral changes when it comes to web default and the system text Json default",
    "start": "445500",
    "end": "451740"
  },
  {
    "text": "and with that we can move to the first API pattern of the day that's HTTP API",
    "start": "451740",
    "end": "456780"
  },
  {
    "text": "I am not going fully rest for the day because I don't want to bring extra complexities in but we will discuss rest",
    "start": "456780",
    "end": "462960"
  },
  {
    "text": "very briefly the first point is just because you have an HTTP API doesn't make it a rest API",
    "start": "462960",
    "end": "469620"
  },
  {
    "text": "because restful apis are completely governed by this six constraints which",
    "start": "469620",
    "end": "475500"
  },
  {
    "text": "are not as a Fielding constraints client servers stateless cachability uniform interface layered system and code on",
    "start": "475500",
    "end": "482580"
  },
  {
    "text": "demand but the when an HTTP API actually it kind of confirms to most of this I",
    "start": "482580",
    "end": "489720"
  },
  {
    "text": "think the key breaking Factor there there is hatios etios which is quite",
    "start": "489720",
    "end": "494759"
  },
  {
    "text": "intimidating as a term and that's hypermedia as the engine of application State this is what really makes your",
    "start": "494759",
    "end": "500940"
  },
  {
    "text": "HTTP API a restful API nevertheless with a good HTTP API we always think in terms",
    "start": "500940",
    "end": "508259"
  },
  {
    "text": "of resources a resource can be anything which can have a representation it can be a web page it can be a person it can",
    "start": "508259",
    "end": "515940"
  },
  {
    "text": "be a car anything that can have a representation a meaningful representation is a resource you think",
    "start": "515940",
    "end": "521760"
  },
  {
    "text": "about resources a resource has a uniform resource identifier which is always unique and in",
    "start": "521760",
    "end": "529200"
  },
  {
    "text": "our case when we are talking about apis it's urls and a resource always has a",
    "start": "529200",
    "end": "534899"
  },
  {
    "text": "representation that is the data plus the metadata that makes up the resource",
    "start": "534899",
    "end": "540600"
  },
  {
    "text": "representation again I have left out the hypermedia controls for Simplicity sake today",
    "start": "540600",
    "end": "545880"
  },
  {
    "text": "and what we have is the HTTP API pattern is a very seamless integration of the",
    "start": "545880",
    "end": "551040"
  },
  {
    "text": "HTTP toolkit to how the API works you begin with a resource and each resource",
    "start": "551040",
    "end": "556980"
  },
  {
    "text": "has a URL in our example something like slash to do items and then you issue the",
    "start": "556980",
    "end": "562800"
  },
  {
    "text": "various HTTP verbs with or without the request body whichever is appropriate",
    "start": "562800",
    "end": "568080"
  },
  {
    "text": "for the HTTP verb which you are using and then you try and respond back with a",
    "start": "568080",
    "end": "573899"
  },
  {
    "text": "meaningful status code that status code conveys a lot of meaning to your clients and that should be appropriate as well",
    "start": "573899",
    "end": "580440"
  },
  {
    "text": "so here is a rough mapping of what the state or what the HTTP verbs are and the",
    "start": "580440",
    "end": "586080"
  },
  {
    "text": "status codes could be for example if you want to read some information you would do get if you want to create a new to do",
    "start": "586080",
    "end": "593040"
  },
  {
    "text": "item you would do a post for updates you have both put and patch so these are two",
    "start": "593040",
    "end": "599459"
  },
  {
    "text": "HTTP verbs and they are slightly different in the sense that with HTTP put it replaces a resource in its",
    "start": "599459",
    "end": "606959"
  },
  {
    "text": "entirety so which means that the request body that I give is a resource in itself however with patch it is incremental",
    "start": "606959",
    "end": "614640"
  },
  {
    "text": "updates that you're doing probably you just want to update the due date probably you just want to say update the",
    "start": "614640",
    "end": "621600"
  },
  {
    "text": "notes with uh for a particular to-do item so the request body is quite",
    "start": "621600",
    "end": "626640"
  },
  {
    "text": "different when it comes to Patches well you would have say this is the to-do item the ID of the to do the item which",
    "start": "626640",
    "end": "632580"
  },
  {
    "text": "I want to update here is the field I want to update and here is the value I want to update that field with so it's a",
    "start": "632580",
    "end": "638760"
  },
  {
    "text": "very different request body as well and for delete deleting a to-do item you",
    "start": "638760",
    "end": "644100"
  },
  {
    "text": "would do an HTTP delete the status code is important here because that conveys a",
    "start": "644100",
    "end": "649920"
  },
  {
    "text": "lot of meaning and a lot of sense to the consuming clients now talking about building the API I've",
    "start": "649920",
    "end": "656940"
  },
  {
    "text": "got a lot of code in my slides but there is a GitHub repo which I will share at the end which has got all the three APA",
    "start": "656940",
    "end": "663360"
  },
  {
    "text": "patterns with all the HTTP verbs in place for you I'm using a web the web API framework",
    "start": "663360",
    "end": "670140"
  },
  {
    "text": "here again I start off with the class and I have my API controller but web API",
    "start": "670140",
    "end": "675300"
  },
  {
    "text": "is not the only way you can serve Json over HTTP in the.net World itself when",
    "start": "675300",
    "end": "680640"
  },
  {
    "text": "it comes to an HTTP API if you are thinking about if you're not thinking about resources but you just want to",
    "start": "680640",
    "end": "686519"
  },
  {
    "text": "send Json over HTTP there is also something called route to code something which I have not really investigated but",
    "start": "686519",
    "end": "693180"
  },
  {
    "text": "I see a full-fledged asp.net community stand up on the.net Youtube channel so",
    "start": "693180",
    "end": "698339"
  },
  {
    "text": "it's very well worth checking in checking it out as well back to our web API controller it inherits from",
    "start": "698339",
    "end": "705000"
  },
  {
    "text": "controller base I've got the route attribute which controls my route so in this case I've got the API that's",
    "start": "705000",
    "end": "711540"
  },
  {
    "text": "a prefix and the controller name which acts as the route template and the API",
    "start": "711540",
    "end": "716760"
  },
  {
    "text": "controller attribute here gives me access to a lot of goodies like binding the problem details Factory the",
    "start": "716760",
    "end": "724440"
  },
  {
    "text": "routing Etc a lot of goodies comes alongside with it and I've got this to do items repository",
    "start": "724440",
    "end": "731279"
  },
  {
    "text": "which I'm injecting into my controller which helps me access my SQL like database behind the scenes and it does",
    "start": "731279",
    "end": "737519"
  },
  {
    "text": "all the heavy lifting for me to keep my controller class clean",
    "start": "737519",
    "end": "742820"
  },
  {
    "text": "so to get an item I start off with an action method issuing the HTTP get",
    "start": "743160",
    "end": "748500"
  },
  {
    "text": "method and the ID of the item which I want to read information about comes in",
    "start": "748500",
    "end": "753600"
  },
  {
    "text": "as a route parameter my repository gets the gets to do the heavy lifting for me",
    "start": "753600",
    "end": "759540"
  },
  {
    "text": "and if I have a to-do item corresponding to the ID that comes in I return that",
    "start": "759540",
    "end": "765060"
  },
  {
    "text": "to-do item if I don't have anything say if the to-do item doesn't exist I am",
    "start": "765060",
    "end": "770940"
  },
  {
    "text": "returning a note found that is 404. this actually returns Json by default that's",
    "start": "770940",
    "end": "777720"
  },
  {
    "text": "because web apis defaults to Json as the media type you can have XML as well but",
    "start": "777720",
    "end": "784079"
  },
  {
    "text": "the default is Json and what I get from my API method is a 200 status code with",
    "start": "784079",
    "end": "792120"
  },
  {
    "text": "the response body and some response headers you can add more information to the",
    "start": "792120",
    "end": "797339"
  },
  {
    "text": "response headers but I've kept it plain and simple for the day talking about creating an item again we",
    "start": "797339",
    "end": "804480"
  },
  {
    "text": "have an action method and we should wish you a HTTP post there is a to-do item",
    "start": "804480",
    "end": "810060"
  },
  {
    "text": "which comes in as a part of the request body um let us come back to this a bit later",
    "start": "810060",
    "end": "815519"
  },
  {
    "text": "on when we talk about problem details but we have the repository doing the heavy lifting for me and because this is",
    "start": "815519",
    "end": "823079"
  },
  {
    "text": "a HTTP post we have the request body that comes in and that maps to the",
    "start": "823079",
    "end": "828120"
  },
  {
    "text": "object that I have got here this binding is something that the API controller attribute gives me as well and what I",
    "start": "828120",
    "end": "834839"
  },
  {
    "text": "get back as the response is a 201 status code it gives me some Json it Returns",
    "start": "834839",
    "end": "841740"
  },
  {
    "text": "the object that's been newly created but in addition it also adds a header to the",
    "start": "841740",
    "end": "847620"
  },
  {
    "text": "response headers yes foreign",
    "start": "847620",
    "end": "853220"
  },
  {
    "text": "oh that needs to come in from a client so it can be any app of your choice",
    "start": "861660",
    "end": "866940"
  },
  {
    "text": "of say a mobile app or another web app or even a JavaScript driven app any any",
    "start": "866940",
    "end": "873899"
  },
  {
    "text": "client app you can think of can send some data into this API endpoint does that help",
    "start": "873899",
    "end": "881180"
  },
  {
    "text": "yes I'm coming to that in a minute still to answer the question so this is",
    "start": "886139",
    "end": "891779"
  },
  {
    "text": "the response that I get back and that's the Json response that is the object that's been newly created there's the",
    "start": "891779",
    "end": "898440"
  },
  {
    "text": "201 status code and that's the header in the location header in the response",
    "start": "898440",
    "end": "904740"
  },
  {
    "text": "headers which tells me what is the URL of the newly created to do item so this",
    "start": "904740",
    "end": "910440"
  },
  {
    "text": "is what is ideally expected of your HTTP post method now I have the API with HTTP",
    "start": "910440",
    "end": "918060"
  },
  {
    "text": "put and delete in place as well I'll give you the GitHub repo which you can have a look at later on",
    "start": "918060",
    "end": "925500"
  },
  {
    "text": "now we are talking about computers and communication and everything is not always happy in that world",
    "start": "925500",
    "end": "931920"
  },
  {
    "text": "of course we do have the status codes which can help your client gather information on what went wrong but",
    "start": "931920",
    "end": "938040"
  },
  {
    "text": "sometimes that status code itself cannot really be very friendly and I think many",
    "start": "938040",
    "end": "944399"
  },
  {
    "text": "of us have done this at least I've done this that is coming coming up with your own friendly error responses",
    "start": "944399",
    "end": "951480"
  },
  {
    "text": "however there is a better way to do that that is with the problem details object so this is a way to respond with a",
    "start": "951480",
    "end": "959339"
  },
  {
    "text": "friendlier error message and this was proposes a standard in March 2016 with a",
    "start": "959339",
    "end": "966060"
  },
  {
    "text": "media type application problem Json it's a Json object and it looks something",
    "start": "966060",
    "end": "971339"
  },
  {
    "text": "like this so this is kind of a standard at the moment and you can use this with your web API controllers to return error",
    "start": "971339",
    "end": "979079"
  },
  {
    "text": "responses so talking about some of the fields we have the type which actually tells you in Greater detail what",
    "start": "979079",
    "end": "987000"
  },
  {
    "text": "actually went wrong what is happening with this error response why did you get that in first place and that's typically",
    "start": "987000",
    "end": "993420"
  },
  {
    "text": "your url the title is a summary a short summary of what your error message is all about",
    "start": "993420",
    "end": "1000440"
  },
  {
    "text": "and Type and Title are kind of mandatory for your problem details object",
    "start": "1000440",
    "end": "1006139"
  },
  {
    "text": "the detail is all about detailed information about the error it's not debugging information we are talking",
    "start": "1006139",
    "end": "1012740"
  },
  {
    "text": "about friendly error messaging here in Greater detail an instance is a URL again a URL at",
    "start": "1012740",
    "end": "1019759"
  },
  {
    "text": "which you can replicate the issue or a URL at which things went wrong and the balance and accounts that you",
    "start": "1019759",
    "end": "1026959"
  },
  {
    "text": "see here is additional information so if you want you can actually extend the problem details object with your own",
    "start": "1026959",
    "end": "1032418"
  },
  {
    "text": "information as well this is an example which I took off the problem details object RFC itself and sorry I haven't",
    "start": "1032419",
    "end": "1040100"
  },
  {
    "text": "actually added the credits here but you can extend it if you need it need to be",
    "start": "1040100",
    "end": "1045860"
  },
  {
    "text": "support in the dotnet realm the API controller enables problem details for",
    "start": "1045860",
    "end": "1050900"
  },
  {
    "text": "error status codes so if you have a 400 error or if you have a validation error for that",
    "start": "1050900",
    "end": "1057200"
  },
  {
    "text": "instance by default it gives you the problem details payload the API controller attribute that you add on",
    "start": "1057200",
    "end": "1063440"
  },
  {
    "text": "your controller class with takes care of that for you however if you want to do exception handling with problem details",
    "start": "1063440",
    "end": "1070039"
  },
  {
    "text": "payload you need to have a middleware in place which is this middleware there are some really good blog posts about it",
    "start": "1070039",
    "end": "1077480"
  },
  {
    "text": "again the links have been added to my resources I will share that with you it's a really nice way of sharing",
    "start": "1077480",
    "end": "1083840"
  },
  {
    "text": "friendly error messages with the clients now the breaking factor between sccp and",
    "start": "1083840",
    "end": "1089900"
  },
  {
    "text": "the rest API hatios hypermedia as the engine of application state it's very intimidating as a term and I",
    "start": "1089900",
    "end": "1096559"
  },
  {
    "text": "think it takes some time to wrap your head around it it's so intimidating that the last time I spoke about had used as",
    "start": "1096559",
    "end": "1103340"
  },
  {
    "text": "Restaurant Savannah this was the expression on Leila Porter's face it's intimidating the idea is that",
    "start": "1103340",
    "end": "1109640"
  },
  {
    "text": "application state which is stored on the client the server needs a way to",
    "start": "1109640",
    "end": "1115340"
  },
  {
    "text": "manipulate it and that manipulation is done through hypermedia controls which the server sends you in your API",
    "start": "1115340",
    "end": "1122000"
  },
  {
    "text": "response so if you look at your response it could have certain hypermedia controls like this uh which caters in",
    "start": "1122000",
    "end": "1130400"
  },
  {
    "text": "for you have got a resource now what more can you do about it that connectivity is what hatios brings you",
    "start": "1130400",
    "end": "1136520"
  },
  {
    "text": "now this is an example which I did for a previous talk uh but having said that",
    "start": "1136520",
    "end": "1142280"
  },
  {
    "text": "with hatch use there is no standard or a specification at the moment saying that this is the format you can use to serve",
    "start": "1142280",
    "end": "1149480"
  },
  {
    "text": "your hypermedia control Z Richardson maturity model it's it's a",
    "start": "1149480",
    "end": "1155780"
  },
  {
    "text": "great concept which actually defines how how restful your system is as a restful",
    "start": "1155780",
    "end": "1161840"
  },
  {
    "text": "API at level zero we have the plain old XML level one we start thinking about",
    "start": "1161840",
    "end": "1168260"
  },
  {
    "text": "resources however we don't use the STP verbs in its entirety we just stick to resources and HTTP post",
    "start": "1168260",
    "end": "1175460"
  },
  {
    "text": "level two is what we have been talking about today we make use of request responses the correct HTTP verbs and we",
    "start": "1175460",
    "end": "1182419"
  },
  {
    "text": "still have our resources however the glory of rest resides in level three",
    "start": "1182419",
    "end": "1187580"
  },
  {
    "text": "which is hypermedia controls in your response and that is when you have a truly restful uh system or a truly",
    "start": "1187580",
    "end": "1195020"
  },
  {
    "text": "restful API API the idea is that if you imagine a website with a collection of",
    "start": "1195020",
    "end": "1200900"
  },
  {
    "text": "web pages you navigate through the links on the web pages nothing is hard-coded that's exactly like how an API a restful",
    "start": "1200900",
    "end": "1209000"
  },
  {
    "text": "API should function it should be a website which the clients can just navigate through",
    "start": "1209000",
    "end": "1215720"
  },
  {
    "text": "and at this point of time there is no standard as to what format can you use",
    "start": "1215720",
    "end": "1220940"
  },
  {
    "text": "for hypermedia controls in your response but these these formats could help",
    "start": "1220940",
    "end": "1226160"
  },
  {
    "text": "starting from hell to Json API to Hydra so that was the world of this is not a",
    "start": "1226160",
    "end": "1233000"
  },
  {
    "text": "spec and from there we are going to graphql which is actually a specification things are laid in black",
    "start": "1233000",
    "end": "1238520"
  },
  {
    "text": "and white for you which makes it a lot more easier to implement and talk about as well graphql is a very different type",
    "start": "1238520",
    "end": "1246080"
  },
  {
    "text": "of API in the sense a it's a specification B it is a query language for your API and that query language is",
    "start": "1246080",
    "end": "1254539"
  },
  {
    "text": "supported by a server-side runtime which is under capable of understanding those queries and executing the such queries",
    "start": "1254539",
    "end": "1262000"
  },
  {
    "text": "now graphql comes along as one of the Cool Kids on the Block I'm not going to go into the great history of graphql at",
    "start": "1262000",
    "end": "1268700"
  },
  {
    "text": "all today but it is made for mobile mobile think about an API you need for",
    "start": "1268700",
    "end": "1274460"
  },
  {
    "text": "mobile probably you should be using graphql but for me it was one of those APA patterns",
    "start": "1274460",
    "end": "1280640"
  },
  {
    "text": "that took my took time to kind of understand what is going on behind the scenes what you get with graphql is a single",
    "start": "1280640",
    "end": "1287539"
  },
  {
    "text": "smart endpoint that takes in all those queries that the client sends in and builds some data output for you so",
    "start": "1287539",
    "end": "1294620"
  },
  {
    "text": "immediately you can get the idea that clients are in control here clients",
    "start": "1294620",
    "end": "1300020"
  },
  {
    "text": "specify the date the shape of the data that they need and the server responds back with the similar kind of data graph",
    "start": "1300020",
    "end": "1307100"
  },
  {
    "text": "now if you see here I have my query which is jsonish",
    "start": "1307100",
    "end": "1312980"
  },
  {
    "text": "and I have some data that's Json that's perfectly fine however there are two",
    "start": "1312980",
    "end": "1319400"
  },
  {
    "text": "striking things my data graph is a mirror image of what I have got here if",
    "start": "1319400",
    "end": "1324500"
  },
  {
    "text": "you have nested items like the to do items having a category and fetching of the category as well for me that can all",
    "start": "1324500",
    "end": "1331100"
  },
  {
    "text": "be done in a single single query to the end point but the data that I'll get",
    "start": "1331100",
    "end": "1336320"
  },
  {
    "text": "back will be a mirror image of my query and that's a part of the spec that the",
    "start": "1336320",
    "end": "1341360"
  },
  {
    "text": "the data should be a mirror image of the query and the second thing is that the",
    "start": "1341360",
    "end": "1346940"
  },
  {
    "text": "order of the fields I have specified here is actually met so the that also",
    "start": "1346940",
    "end": "1352280"
  },
  {
    "text": "matches up again that's another part of the spec it's it's a very client client",
    "start": "1352280",
    "end": "1357440"
  },
  {
    "text": "focused experience driven API is what you get with graphql and it's an",
    "start": "1357440",
    "end": "1362720"
  },
  {
    "text": "apologetic about it at the heart of any graphql server what you have is something called a schema",
    "start": "1362720",
    "end": "1369020"
  },
  {
    "text": "schema is strongly typed system of graphql and graphql being a specification there are many many",
    "start": "1369020",
    "end": "1375640"
  },
  {
    "text": "implementations of it in various different programming languages and any implementation of a graphql server helps",
    "start": "1375640",
    "end": "1383059"
  },
  {
    "text": "you establish this schema in its own ways and gives you a server-side runtime",
    "start": "1383059",
    "end": "1388220"
  },
  {
    "text": "which can actually understand those queries so it it actually does two different things a schema is made up of",
    "start": "1388220",
    "end": "1395059"
  },
  {
    "text": "your object types so that is what you want to gather information about in our case the to-do item",
    "start": "1395059",
    "end": "1401780"
  },
  {
    "text": "there is directives the definition of directive is it's a way to describe alternate runtime execution however I'll",
    "start": "1401780",
    "end": "1409100"
  },
  {
    "text": "speak about it in the next slide where it'll make more sense to you the third one is the root operation",
    "start": "1409100",
    "end": "1414679"
  },
  {
    "text": "types so there are three root operation types the one is a query that is for reading information",
    "start": "1414679",
    "end": "1420919"
  },
  {
    "text": "mutation which is for changing information that can be a insert update",
    "start": "1420919",
    "end": "1426260"
  },
  {
    "text": "or a delete but it is immediately followed by a fetch so if I insert something into the database say it",
    "start": "1426260",
    "end": "1432679"
  },
  {
    "text": "fetches that data out for me that is that is how a mutation is supposed to work and a subscription which stands for",
    "start": "1432679",
    "end": "1438980"
  },
  {
    "text": "pushed updates so which means that it's actually something which works alongside a successful mutation say for example if",
    "start": "1438980",
    "end": "1446780"
  },
  {
    "text": "an event succeeds then you get a pushed update from the server so it's like a pub sub way of communication and the",
    "start": "1446780",
    "end": "1456020"
  },
  {
    "text": "minimum things that you need to have in your graphql apis of course your object",
    "start": "1456020",
    "end": "1461120"
  },
  {
    "text": "types and the query without a query they cannot be a graphql API mutation and",
    "start": "1461120",
    "end": "1466520"
  },
  {
    "text": "subscription are not mandatory but what the main thing to understand",
    "start": "1466520",
    "end": "1472760"
  },
  {
    "text": "here is both graphql types and your root operation types they are graphql types",
    "start": "1472760",
    "end": "1478700"
  },
  {
    "text": "and each graphql type is made up of fields with each field having a name",
    "start": "1478700",
    "end": "1483980"
  },
  {
    "text": "a type of the field that it returns as well as resolvers and resolvers does the",
    "start": "1483980",
    "end": "1489500"
  },
  {
    "text": "heavy lifting of resolving the field to concrete data so your graphql is like an",
    "start": "1489500",
    "end": "1495679"
  },
  {
    "text": "application layer which can sit on top of a database a rest API or even a",
    "start": "1495679",
    "end": "1501380"
  },
  {
    "text": "collection of an a set of graphql apis from which it can gather that information so resolvers or graphql in",
    "start": "1501380",
    "end": "1509240"
  },
  {
    "text": "itself doesn't actually concern itself with where the data is stored",
    "start": "1509240",
    "end": "1514340"
  },
  {
    "text": "so for example in your object type my Fields could be ID name Etc when it",
    "start": "1514340",
    "end": "1520039"
  },
  {
    "text": "comes to queries it can be like get a particular to-do item get me a list of to do items when it comes to mutation",
    "start": "1520039",
    "end": "1527059"
  },
  {
    "text": "say insert a new to to-do item or Mark a field Mark a to-do item is complete they",
    "start": "1527059",
    "end": "1533900"
  },
  {
    "text": "all can be fields in my types and with the type they don't have any meaning as",
    "start": "1533900",
    "end": "1539960"
  },
  {
    "text": "such it's the fields which bring in meanings to the object types and with the type you cannot ask for all the",
    "start": "1539960",
    "end": "1546980"
  },
  {
    "text": "information about a type you have to be really specific about what you want from an object type so in such instances",
    "start": "1546980",
    "end": "1553520"
  },
  {
    "text": "there might be cases where you want a field or you don't want to feel so that",
    "start": "1553520",
    "end": "1559520"
  },
  {
    "text": "yes I want it yes I don't want it based upon a condition that that is what",
    "start": "1559520",
    "end": "1564740"
  },
  {
    "text": "directives bring in so you can alter the execution saying I want this I don't want this based upon certain conditions",
    "start": "1564740",
    "end": "1571159"
  },
  {
    "text": "and that's what directives do uh help you with there are two directors which should be a part of every graphql server",
    "start": "1571159",
    "end": "1578360"
  },
  {
    "text": "implementation that is Skip and include now graphql is transport layer agnostic",
    "start": "1578360",
    "end": "1585980"
  },
  {
    "text": "but graphql or HTTP is the most common pattern out there because HTTP is",
    "start": "1585980",
    "end": "1591020"
  },
  {
    "text": "everywhere graphql over HTTP is not a standard a published standard by any means it's a",
    "start": "1591020",
    "end": "1597559"
  },
  {
    "text": "work in progress thing because many of the implementers have put together some",
    "start": "1597559",
    "end": "1602960"
  },
  {
    "text": "best practices which is now getting into black and white format with a published",
    "start": "1602960",
    "end": "1608600"
  },
  {
    "text": "not a published sorry a work in progress standard so as I said graphql over HTTP",
    "start": "1608600",
    "end": "1614600"
  },
  {
    "text": "is an implementation of graphql over HTTP if you want something that works",
    "start": "1614600",
    "end": "1620299"
  },
  {
    "text": "over web sockets you need graphql over web sockets but let's have a look at some of the main points with graphql",
    "start": "1620299",
    "end": "1626960"
  },
  {
    "text": "over HTTP the first and foremost is that it needs to handle at least one it needs",
    "start": "1626960",
    "end": "1632600"
  },
  {
    "text": "to have at least one URL that can handle graphql requests for you the the one being slash graphql or that's a",
    "start": "1632600",
    "end": "1639260"
  },
  {
    "text": "recommended one the server must accept post requests and it should be able to accept Json as well",
    "start": "1639260",
    "end": "1647000"
  },
  {
    "text": "as reply with Json and when your request gets into the server it should have",
    "start": "1647000",
    "end": "1652760"
  },
  {
    "text": "certain request parameters the first one being query that is what your graphql query is and that's mandatory but you",
    "start": "1652760",
    "end": "1659779"
  },
  {
    "text": "can have an optional operation name which can be used for debugging purposes so if you go back a few slides",
    "start": "1659779",
    "end": "1668740"
  },
  {
    "text": "there we go the to-do item that is the optional operation name I have a variable here",
    "start": "1670820",
    "end": "1678020"
  },
  {
    "text": "and there is extensions as well I have not used extensions but I've just included it because it's a part of the",
    "start": "1678020",
    "end": "1684740"
  },
  {
    "text": "graphql over HTTP spec talking about how graphql over HTTP uses",
    "start": "1684740",
    "end": "1690980"
  },
  {
    "text": "HTTP verbs unlike HTTP API where you read information using an HTTP get",
    "start": "1690980",
    "end": "1696400"
  },
  {
    "text": "reading here is using HTTP post that is the default mutation subscription query",
    "start": "1696400",
    "end": "1702020"
  },
  {
    "text": "everything happens over a post and the request must have the query and any",
    "start": "1702020",
    "end": "1707960"
  },
  {
    "text": "variables again in a Json map however you can use HTTP get for",
    "start": "1707960",
    "end": "1714260"
  },
  {
    "text": "querying that needs to be explicitly enabled in many of the packages that I've seen out there and that can be used",
    "start": "1714260",
    "end": "1720080"
  },
  {
    "text": "for caching it's useful but if someone if the client tries to do an HTTP a",
    "start": "1720080",
    "end": "1725240"
  },
  {
    "text": "mutation over HTTP get immediately the execution should stop with a 405 being",
    "start": "1725240",
    "end": "1731240"
  },
  {
    "text": "served coming to status course if you have no null data uh status code in the 200",
    "start": "1731240",
    "end": "1737900"
  },
  {
    "text": "range must be served and if you have invalid request body or if you have graphql validation errors that is errors",
    "start": "1737900",
    "end": "1744620"
  },
  {
    "text": "happening before the execution it should reply with the 400 error code",
    "start": "1744620",
    "end": "1750760"
  },
  {
    "text": "and coming to response graphql as a spec doesn't talk about sorry",
    "start": "1750799",
    "end": "1757419"
  },
  {
    "text": "uh which one",
    "start": "1760220",
    "end": "1764380"
  },
  {
    "text": "that is what the graphql spec suggests because you are actually because graphql",
    "start": "1771320",
    "end": "1777440"
  },
  {
    "text": "is a very client driven API the client gets to choose what query they want to",
    "start": "1777440",
    "end": "1783260"
  },
  {
    "text": "send to the server so my understanding is that this the client is in control",
    "start": "1783260",
    "end": "1788539"
  },
  {
    "text": "there and they want to make it safer probably so that's why resource to STP post yeah",
    "start": "1788539",
    "end": "1795820"
  },
  {
    "text": "yeah you can have that is query string",
    "start": "1796760",
    "end": "1801919"
  },
  {
    "text": "parameters with yeah you can put your query in your HTTP get",
    "start": "1801919",
    "end": "1808520"
  },
  {
    "text": "query parameters as well but as I said as a part of the spec itself SCT posters",
    "start": "1808520",
    "end": "1813620"
  },
  {
    "text": "what is recommended uh yeah talking about response graphql",
    "start": "1813620",
    "end": "1820640"
  },
  {
    "text": "doesn't have a response format as such but uh Json seems to be the most popular",
    "start": "1820640",
    "end": "1826760"
  },
  {
    "text": "one however the response needs to have three parts or can contain only these three parts",
    "start": "1826760",
    "end": "1832399"
  },
  {
    "text": "which is data errors and extensions and graphql suggest that as developers",
    "start": "1832399",
    "end": "1838760"
  },
  {
    "text": "and implementers we stick to these three top level uh map items",
    "start": "1838760",
    "end": "1844100"
  },
  {
    "text": "data is the result of execution so um that is again in Json if an operation",
    "start": "1844100",
    "end": "1850399"
  },
  {
    "text": "fails before execution there wouldn't be any data at all in which case there",
    "start": "1850399",
    "end": "1855620"
  },
  {
    "text": "would be an errors map and if the error was traced during the operation you would get a null response for the data",
    "start": "1855620",
    "end": "1862480"
  },
  {
    "text": "with the errors explaining what went wrong",
    "start": "1862480",
    "end": "1867919"
  },
  {
    "text": "the errors map looks like this it's a it's a Json object again with uh it's",
    "start": "1867919",
    "end": "1874399"
  },
  {
    "text": "it's an it's an array of items with the message detailing what is the issue you",
    "start": "1874399",
    "end": "1879919"
  },
  {
    "text": "can pinpoint locations you can have field arrays as well and that's the extensions this is for",
    "start": "1879919",
    "end": "1886760"
  },
  {
    "text": "additional information which the implementer can put in say for example I'm using hot chocolate in My Demo I",
    "start": "1886760",
    "end": "1893659"
  },
  {
    "text": "know that hot chocolate has its own error codes which itself through the extensions uh map to us",
    "start": "1893659",
    "end": "1901220"
  },
  {
    "text": "talking about implementations of graphql in.net we have two packages graphql.net",
    "start": "1901220",
    "end": "1906559"
  },
  {
    "text": "and hot chocolate that's the that's the.net CLI command for adding hot chocolate into solution",
    "start": "1906559",
    "end": "1912679"
  },
  {
    "text": "and building the API we start off with the object type that's my object type and to create a graphql type of my",
    "start": "1912679",
    "end": "1920720"
  },
  {
    "text": "object I inherit a class from object type of type T I'm using the code first",
    "start": "1920720",
    "end": "1926899"
  },
  {
    "text": "approach here but there's The annotation based and as well as schema based approach but I like",
    "start": "1926899",
    "end": "1934039"
  },
  {
    "text": "to talk about this which helps me slot into my head that this is an object type and uh that there is some mapping going",
    "start": "1934039",
    "end": "1941120"
  },
  {
    "text": "on between the field names and the class names but again you can enhance it by further customizations like adding",
    "start": "1941120",
    "end": "1948080"
  },
  {
    "text": "descriptions or adding meaningful field names Etc that gets picked up as a part of your documentation as well",
    "start": "1948080",
    "end": "1956899"
  },
  {
    "text": "talking about query creating a query type follows the same method because query is also an object type or a",
    "start": "1956899",
    "end": "1963140"
  },
  {
    "text": "graphql type at the end of the day you create a class and have your methods in place and these methods become becomes",
    "start": "1963140",
    "end": "1971059"
  },
  {
    "text": "the field on your query type but it gets rid of the gets for you and if you have",
    "start": "1971059",
    "end": "1976940"
  },
  {
    "text": "async at the end of your method name again that's gotten read for you and if you want a query type out of this create",
    "start": "1976940",
    "end": "1983419"
  },
  {
    "text": "a class and inherit again from object type of the type query again following",
    "start": "1983419",
    "end": "1988580"
  },
  {
    "text": "the code first approach here uh moving on to grp just before I move on I haven't put mutations and",
    "start": "1988580",
    "end": "1995480"
  },
  {
    "text": "subscriptions here but I can Circle back to that if we have time at the end of my",
    "start": "1995480",
    "end": "2000760"
  },
  {
    "text": "uh talk the third pattern of the day is grpc HTTP API so when I submitted the talk",
    "start": "2000760",
    "end": "2007179"
  },
  {
    "text": "for NDC company again it was an experimental project in the grpc realm called the grpc HTTP API but this was a",
    "start": "2007179",
    "end": "2016000"
  },
  {
    "text": "very popular Community feature the community requested it so much that it",
    "start": "2016000",
    "end": "2021279"
  },
  {
    "text": "has made its way into dot Net 7 and it is available in preview 4 of.net 7 with",
    "start": "2021279",
    "end": "2026320"
  },
  {
    "text": "the name grpc Json transcoding this as a concept in the Google grpclm",
    "start": "2026320",
    "end": "2032440"
  },
  {
    "text": "is not new it's been out there for some time however we're getting.net support for it now like officially",
    "start": "2032440",
    "end": "2040899"
  },
  {
    "text": "in.net 7. talking about grpc it's a modern open source high performance RPC",
    "start": "2040899",
    "end": "2046840"
  },
  {
    "text": "framework and it's Google's implementation of RPC with uh which we have official support",
    "start": "2046840",
    "end": "2053440"
  },
  {
    "text": "for in.net3 on dot net code 3.0 onwards it's it Favors contract based API",
    "start": "2053440",
    "end": "2060040"
  },
  {
    "text": "development using protofiles so your protophiles act as your contract here and it is designed for HTTP 2 which",
    "start": "2060040",
    "end": "2067780"
  },
  {
    "text": "means it makes use of all the nice stp2 features like request multiplexing",
    "start": "2067780",
    "end": "2072960"
  },
  {
    "text": "response streaming Etc and messages in grpc are transmitted in",
    "start": "2072960",
    "end": "2080260"
  },
  {
    "text": "binary format using what is called protocol buffers protocol buffers are little messages in binary format and",
    "start": "2080260",
    "end": "2086740"
  },
  {
    "text": "that's Google's proprietary way of communication it's not Json and grpcgson",
    "start": "2086740",
    "end": "2092378"
  },
  {
    "text": "transcoding is all about how these protocol buffers maps to Json and how we have the endpoints around the grpc",
    "start": "2092379",
    "end": "2099339"
  },
  {
    "text": "methods so with grpc we have a client which communicates to the grpc using HTTP to",
    "start": "2099339",
    "end": "2106599"
  },
  {
    "text": "post and uses protobuf using Google Proto buff for serialization and deserialization and the response we get",
    "start": "2106599",
    "end": "2113920"
  },
  {
    "text": "is protobuf as well and all is fine in this world till we realize that there's no browser support because some of the",
    "start": "2113920",
    "end": "2120820"
  },
  {
    "text": "low-lying browser apis cannot force an HTTP to uh request we have grpc web but",
    "start": "2120820",
    "end": "2129099"
  },
  {
    "text": "again that's that needs the grpc generated client that's what I've put here",
    "start": "2129099",
    "end": "2134140"
  },
  {
    "text": "so when we think about a paradigm which can exist alongside grpc but we we need",
    "start": "2134140",
    "end": "2139780"
  },
  {
    "text": "the browser support but we still don't need the generated client that is where grpc Json transcoding comes in it's an",
    "start": "2139780",
    "end": "2147099"
  },
  {
    "text": "extension to asp.net core and it extends your grpc service so that you can map",
    "start": "2147099",
    "end": "2152200"
  },
  {
    "text": "your grpc methods to http endpoints so you have a single asp.net core app in",
    "start": "2152200",
    "end": "2160119"
  },
  {
    "text": "which both your grpc as well as HTTP API coexist and clients can access this",
    "start": "2160119",
    "end": "2166180"
  },
  {
    "text": "without a generated endpoint and that is the CLI command for it",
    "start": "2166180",
    "end": "2171940"
  },
  {
    "text": "it's a nuget package which needs to be included and we have our grpc service now a rest client or a browser can talk",
    "start": "2171940",
    "end": "2179680"
  },
  {
    "text": "to it using HTTP one using Json the HTTP verbs and get back a response as well so",
    "start": "2179680",
    "end": "2187540"
  },
  {
    "text": "the idea here according to Google is that you can actually have a resource",
    "start": "2187540",
    "end": "2192579"
  },
  {
    "text": "oriented HTTP API in your grpc API when I talk about rest I usually include a",
    "start": "2192579",
    "end": "2199780"
  },
  {
    "text": "site about how rest is not a remote procedure invocation over HTTP",
    "start": "2199780",
    "end": "2205599"
  },
  {
    "text": "but this kind of seems to me like Life coming into a full circle because we",
    "start": "2205599",
    "end": "2210880"
  },
  {
    "text": "have grpc we have methods over HTTP and then we are having a",
    "start": "2210880",
    "end": "2217500"
  },
  {
    "text": "resource oriented API sitting together with it it it is uh it takes time to",
    "start": "2217500",
    "end": "2223480"
  },
  {
    "text": "come get used to now for building the API we start off",
    "start": "2223480",
    "end": "2228520"
  },
  {
    "text": "with protocol buffers the protophile and see how the grpc service functions as",
    "start": "2228520",
    "end": "2234220"
  },
  {
    "text": "such and then we can extend on top of it there is a C sharp namespace and in the",
    "start": "2234220",
    "end": "2239680"
  },
  {
    "text": "c-sharp namespace there's a lot of code generation happening because of the tooling that we have at visual studio",
    "start": "2239680",
    "end": "2244859"
  },
  {
    "text": "and the service that I have in my protophile gives rise to a abstract Base",
    "start": "2244859",
    "end": "2250540"
  },
  {
    "text": "Class called to do dot to do base and all the methods that I have in my protophile becomes virtual methods in",
    "start": "2250540",
    "end": "2257619"
  },
  {
    "text": "this base abstract class now I can override each of these methods",
    "start": "2257619",
    "end": "2262720"
  },
  {
    "text": "in my own class and then give it a meaningful implementation and this",
    "start": "2262720",
    "end": "2268000"
  },
  {
    "text": "doesn't change when we talk about extending this grpc service to have the",
    "start": "2268000",
    "end": "2273220"
  },
  {
    "text": "HTTP API attached to it and that's where HTTP rules come in HTTP",
    "start": "2273220",
    "end": "2279400"
  },
  {
    "text": "rule actually defines the schema of the grpc to http API mapping so the mapping",
    "start": "2279400",
    "end": "2285280"
  },
  {
    "text": "involves how how we use our HTTP verbs what endpoints are we using and how the",
    "start": "2285280",
    "end": "2290560"
  },
  {
    "text": "request messages maps to the part of the URL or query string parameters or the",
    "start": "2290560",
    "end": "2296140"
  },
  {
    "text": "request body for that we need to have additional decorations in our protophiles the first",
    "start": "2296140",
    "end": "2301900"
  },
  {
    "text": "thing is to bring in annotations Proto and the HTTP Proto into your project this is a manual task of copy paste at",
    "start": "2301900",
    "end": "2309520"
  },
  {
    "text": "the moment but I think there are plans to uh to automate it",
    "start": "2309520",
    "end": "2315660"
  },
  {
    "text": "the second thing is we need to import this Proto into our protophile this is",
    "start": "2317079",
    "end": "2322119"
  },
  {
    "text": "equivalent to bringing in C sharp namespaces but from a Proto perspective",
    "start": "2322119",
    "end": "2328660"
  },
  {
    "text": "and the final thing you need to start annotating your RPC methods with the option this actually tests the",
    "start": "2328660",
    "end": "2335680"
  },
  {
    "text": "transcoding layer that there is a HTTP mapping for this particular RPC method",
    "start": "2335680",
    "end": "2340960"
  },
  {
    "text": "so this is where you start off with so for each of the methods you need to",
    "start": "2340960",
    "end": "2346180"
  },
  {
    "text": "have this HTTP mapping wherever if you want an HTTP mapping to be attached to",
    "start": "2346180",
    "end": "2351760"
  },
  {
    "text": "that RPC method we can then start about thinking about our HTTP verbs so in this example I've",
    "start": "2351760",
    "end": "2358720"
  },
  {
    "text": "got a get against this particular endpoint and I've got a route parameter in place as well so whenever it",
    "start": "2358720",
    "end": "2365320"
  },
  {
    "text": "encounters something in the curly braces that is telling the transcoding layer",
    "start": "2365320",
    "end": "2370359"
  },
  {
    "text": "that for the value of this particular ID field or the parameter it needs to go",
    "start": "2370359",
    "end": "2376480"
  },
  {
    "text": "into the message request and look for a field of the same name in this instance",
    "start": "2376480",
    "end": "2382000"
  },
  {
    "text": "so the ID it gets its value from the request here if there are more fields in my request",
    "start": "2382000",
    "end": "2388720"
  },
  {
    "text": "that gets then bound to the URL as query string parameters",
    "start": "2388720",
    "end": "2394900"
  },
  {
    "text": "and that is my to do item reply which is like a carbon copy of my c-sharp class but this is the protobuf message",
    "start": "2394900",
    "end": "2403420"
  },
  {
    "text": "and that's what I get as a Json response body now suddenly your grpc method which",
    "start": "2403420",
    "end": "2410740"
  },
  {
    "text": "didn't have a browser support at all you can now hit this endpoint using a",
    "start": "2410740",
    "end": "2416140"
  },
  {
    "text": "postman or even a browser and then get the data out you can also have requests going in as a",
    "start": "2416140",
    "end": "2423280"
  },
  {
    "text": "part of request body uh for example in terms of post you can bind the message",
    "start": "2423280",
    "end": "2429339"
  },
  {
    "text": "request to the body using the star notation which means that the entire message request is bound to the body in",
    "start": "2429339",
    "end": "2436420"
  },
  {
    "text": "this instance in fact if you have you are the route parameters plus the",
    "start": "2436420",
    "end": "2442000"
  },
  {
    "text": "body then you cannot have query string parameters at all because the star notation says that anything that's not",
    "start": "2442000",
    "end": "2448240"
  },
  {
    "text": "bound to the path bind it to the body and if I now try and create an item I",
    "start": "2448240",
    "end": "2454960"
  },
  {
    "text": "get an output like this you can also have custom messages or",
    "start": "2454960",
    "end": "2460119"
  },
  {
    "text": "custom methods in your RPC like sending an alert and in that case Google suggests using post instead of get",
    "start": "2460119",
    "end": "2467020"
  },
  {
    "text": "unless you are having alternate get like if you are getting a list of completed items or incomplete items then you could",
    "start": "2467020",
    "end": "2474520"
  },
  {
    "text": "relate to get but otherwise it's all done against post again and it needs a",
    "start": "2474520",
    "end": "2479920"
  },
  {
    "text": "little method Convention as well because it expects a colon with the custom verb",
    "start": "2479920",
    "end": "2485800"
  },
  {
    "text": "at the end of the URL that is the suggested naming convention there's also a nice mapping table of how",
    "start": "2485800",
    "end": "2493900"
  },
  {
    "text": "protobuf feels and their types map to corresponding Json types and this is a subset of that again links are in my",
    "start": "2493900",
    "end": "2501640"
  },
  {
    "text": "documentation grpc also gives us error codes which are quite specific and they",
    "start": "2501640",
    "end": "2507760"
  },
  {
    "text": "have corresponding HTTP mapping as well again this is a subset with links to the",
    "start": "2507760",
    "end": "2513099"
  },
  {
    "text": "resources in my links to the URL in my resources now the error model itself Google",
    "start": "2513099",
    "end": "2519520"
  },
  {
    "text": "suggests a nice rich error model like this with a code a message and detail",
    "start": "2519520",
    "end": "2526200"
  },
  {
    "text": "however there is no support for this in the dotnet realm uh I I have seen a",
    "start": "2526200",
    "end": "2532420"
  },
  {
    "text": "couple of discussions in the GitHub issue space regarding this and I see a Target attached to the GitHub issue so",
    "start": "2532420",
    "end": "2539260"
  },
  {
    "text": "which means we could be hoping to get this in.net 7 but there is Beginnings",
    "start": "2539260",
    "end": "2544720"
  },
  {
    "text": "for this in the source code of grpc.net we have an RPC exception which is the",
    "start": "2544720",
    "end": "2550599"
  },
  {
    "text": "exception that you throw when you have errors and it accepts a stat status chart",
    "start": "2550599",
    "end": "2556000"
  },
  {
    "text": "and it has a code field and an optional detail string the message is not relayed to the client at all because that is",
    "start": "2556000",
    "end": "2563320"
  },
  {
    "text": "developer facing and if I throw a new RPC exception and see what I get as a Json response this",
    "start": "2563320",
    "end": "2570460"
  },
  {
    "text": "is what I get it is a bit far off from what we have as the error model but I",
    "start": "2570460",
    "end": "2576220"
  },
  {
    "text": "can see the code the message and the details field so I I get adjust that there might be beginnings of it but is",
    "start": "2576220",
    "end": "2583060"
  },
  {
    "text": "not fully supported but hey I do get the corresponding HTTP mapping there",
    "start": "2583060",
    "end": "2588640"
  },
  {
    "text": "now uh how do these three APA patterns compare so it's not a full-fledged",
    "start": "2588640",
    "end": "2594760"
  },
  {
    "text": "comprehensive comparison I've just put together things that I've seen the fundamental unit with the HTTP API is",
    "start": "2594760",
    "end": "2601180"
  },
  {
    "text": "Resources with graphql it is query because the client is in control and",
    "start": "2601180",
    "end": "2606400"
  },
  {
    "text": "with grpc Json transcoding it is functions because as far as grpc Json",
    "start": "2606400",
    "end": "2611859"
  },
  {
    "text": "transcoding it is you cannot or there is no use case it doesn't make sense for a",
    "start": "2611859",
    "end": "2617619"
  },
  {
    "text": "rest API or sdtp API to happen as a grpc API it makes sense only if you have a",
    "start": "2617619",
    "end": "2625300"
  },
  {
    "text": "grpc API and then you want to extend that to have an HTTP counterpart as well the coupling is low in all the three",
    "start": "2625300",
    "end": "2633540"
  },
  {
    "text": "paradigms the caching HTTP API can have seamless integration making using HTTP",
    "start": "2633540",
    "end": "2640180"
  },
  {
    "text": "caching but with graphql you need to resort to custom ways like persisted",
    "start": "2640180",
    "end": "2645760"
  },
  {
    "text": "queries which is built on top of HTTP get but that's quite an advanced topic I think in",
    "start": "2645760",
    "end": "2651160"
  },
  {
    "text": "graphql with grpc Json transcoding similarly I've seen someone uh play",
    "start": "2651160",
    "end": "2656740"
  },
  {
    "text": "around with redis cache and caching the responses with grpcg grpc",
    "start": "2656740",
    "end": "2662140"
  },
  {
    "text": "but however anything that you have in grpc applies to grpc transcoding as well similarly if you're thinking about",
    "start": "2662140",
    "end": "2668260"
  },
  {
    "text": "course again you can enable cores with grpcgs on transcoding discoverability is",
    "start": "2668260",
    "end": "2673900"
  },
  {
    "text": "bad with HTTP API there is no way to discover HTTP apis on the Fly the",
    "start": "2673900",
    "end": "2680079"
  },
  {
    "text": "hypermedia controls in rest API are supposed to be the discoverability factor but we don't have that in HTTP",
    "start": "2680079",
    "end": "2685839"
  },
  {
    "text": "API so you need something in black and white which is no good graphql has this",
    "start": "2685839",
    "end": "2691480"
  },
  {
    "text": "a nice feature of schema introspection which is a way of the API to query",
    "start": "2691480",
    "end": "2696700"
  },
  {
    "text": "itself which means that it can it has given rise to some self-documenting",
    "start": "2696700",
    "end": "2701980"
  },
  {
    "text": "tools so if you think about testing tools like banana cake pop or graphql playground which Michael spoke about all",
    "start": "2701980",
    "end": "2708520"
  },
  {
    "text": "these have built-in documentation kind of into that IDs which scans your",
    "start": "2708520",
    "end": "2714720"
  },
  {
    "text": "API using the schema introspection and display that in a friendly format for you again with grpc Json transcoding",
    "start": "2714720",
    "end": "2722319"
  },
  {
    "text": "discoverability is bad because you have a contract which you potentially need to share and unless and until you can write",
    "start": "2722319",
    "end": "2728380"
  },
  {
    "text": "down or generate something automatically for you that's of no use versioning uh",
    "start": "2728380",
    "end": "2735280"
  },
  {
    "text": "graphql is regarded as a no version API whereas with HTTP API and grpc Json",
    "start": "2735280",
    "end": "2742300"
  },
  {
    "text": "transcoding you need to take care of versioning when it comes to statefulness everything is stateless except for",
    "start": "2742300",
    "end": "2749260"
  },
  {
    "text": "graphql subscriptions because a that needs a persistent connection to the server and it also needs an",
    "start": "2749260",
    "end": "2754900"
  },
  {
    "text": "understanding of what clients are after what it needs to keep in memory Etc so",
    "start": "2754900",
    "end": "2759940"
  },
  {
    "text": "there is that statefulness factor there with graphql with performance",
    "start": "2759940",
    "end": "2765640"
  },
  {
    "text": "um grpc and HTTP are fine graphql I hear that it can suffer on complex queries",
    "start": "2765640",
    "end": "2772240"
  },
  {
    "text": "however there can be multiple factors to it it can lie in the graphql layer that is where your schema is being passed and",
    "start": "2772240",
    "end": "2779260"
  },
  {
    "text": "executed or it can even travel down to the resolver layer and the layers within where the data is actually fetched from",
    "start": "2779260",
    "end": "2786400"
  },
  {
    "text": "whatever your data layer is as far as standard is a concerned HTTP",
    "start": "2786400",
    "end": "2792339"
  },
  {
    "text": "API is just best practices so talking about it implementing about it and checking whether it's all good is",
    "start": "2792339",
    "end": "2799300"
  },
  {
    "text": "difficult but graphql and grpc are formal specs maturity is a maximum in",
    "start": "2799300",
    "end": "2807160"
  },
  {
    "text": "HTTP API because it's widely adopted graphql is early days because it's it's",
    "start": "2807160",
    "end": "2812560"
  },
  {
    "text": "just beginning to get that boom from what I understand grpc Json transcoding in.net realm is still early days and",
    "start": "2812560",
    "end": "2820839"
  },
  {
    "text": "talking about grpc Json transcoding again there is another another feature called grpc Gateway which can help you",
    "start": "2820839",
    "end": "2827560"
  },
  {
    "text": "achieve Json apis HTTP apis in grpc world as well but it works in a slightly",
    "start": "2827560",
    "end": "2834579"
  },
  {
    "text": "different way as compared to grpc Json transcoding learning curve is highest in",
    "start": "2834579",
    "end": "2840160"
  },
  {
    "text": "graphql at least that was a my personal experience whereas with the HTTP API and",
    "start": "2840160",
    "end": "2845260"
  },
  {
    "text": "grpc it's medium learning resources HTTP being most mature we have maximum",
    "start": "2845260",
    "end": "2851500"
  },
  {
    "text": "resources we are still struggling to find good resources on graphql and particularly in Json transcoding all I",
    "start": "2851500",
    "end": "2858460"
  },
  {
    "text": "have had is Ms docs as well as Google Docs but you might find it for other languages because because I think other",
    "start": "2858460",
    "end": "2864880"
  },
  {
    "text": "languages are ahead of grpc Json transcoding support when it comes to net support HTTP API",
    "start": "2864880",
    "end": "2872619"
  },
  {
    "text": "has out of the box support graphql has to have third-party implementations like graphql.net or chocolate grpc Json",
    "start": "2872619",
    "end": "2880420"
  },
  {
    "text": "transcoding is a extension and it's new get packages with Visual Studio support",
    "start": "2880420",
    "end": "2885819"
  },
  {
    "text": "you have out of after the Box templates for grpc and for grpc sorry HTTP API and",
    "start": "2885819",
    "end": "2892000"
  },
  {
    "text": "for grpc again you have out of the box templates but you need to have the nuget package and the annotations on top of it",
    "start": "2892000",
    "end": "2899140"
  },
  {
    "text": "to have the grpc Json transcoding with graphql you need to rely on external",
    "start": "2899140",
    "end": "2904720"
  },
  {
    "text": "templates I know hot chocolate has a template which you can use Azure supports hosting all the three API",
    "start": "2904720",
    "end": "2911380"
  },
  {
    "text": "patterns with Azure functions container apps even app service I know grpc has",
    "start": "2911380",
    "end": "2916960"
  },
  {
    "text": "app service support now and for testing we have tools like Swagger and Postman in HTTP API we have banana cake pop",
    "start": "2916960",
    "end": "2924359"
  },
  {
    "text": "graphql playground which is the first ID even Postman can help you test graph graph equal with Json transcoding the",
    "start": "2924359",
    "end": "2932680"
  },
  {
    "text": "open API support is yet to be investigated but you can use Postman to",
    "start": "2932680",
    "end": "2938579"
  },
  {
    "text": "test your API if needed and that's my resources for the day it",
    "start": "2938579",
    "end": "2945220"
  },
  {
    "text": "will take you to a page with a lot of links and the GitHub repo in place",
    "start": "2945220",
    "end": "2950859"
  },
  {
    "text": "thank you for having me today and um that's my Twitter handle again should",
    "start": "2950859",
    "end": "2956140"
  },
  {
    "text": "you wish to connect with me I hope you have learned a thing or two",
    "start": "2956140",
    "end": "2960900"
  }
]