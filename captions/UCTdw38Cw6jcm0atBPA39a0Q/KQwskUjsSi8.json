[
  {
    "text": "testing testing can you hear me good welcome to",
    "start": "9309",
    "end": "14980"
  },
  {
    "text": "if it's life food actors will be talking about a kebab nut mostly and a project is an",
    "start": "14980",
    "end": "21850"
  },
  {
    "text": "experience based report so it's a project that's been running for I think just over here which will shows you some",
    "start": "21850",
    "end": "29340"
  },
  {
    "text": "experiences during this project but first let's introduce yourself who are you good morning my name is Val Eve I'm",
    "start": "29340",
    "end": "38250"
  },
  {
    "text": "originally from Russia as you can see from these Cyrillic letters they have a league in living and working in Norway",
    "start": "38250",
    "end": "44800"
  },
  {
    "text": "for quite many years and last few years working with some interesting projects at NRK it's a Norwegian Broadcasting",
    "start": "44800",
    "end": "51909"
  },
  {
    "text": "Corporation I'm consultants working for a company miles and in this last project I've been",
    "start": "51909",
    "end": "57760"
  },
  {
    "text": "working together with Arlen yes and this is me I'm also mainly background in",
    "start": "57760",
    "end": "65350"
  },
  {
    "text": "c-sharp but recently 12 last few years I've been doing F sharp a lot and this is as you",
    "start": "65350",
    "end": "72100"
  },
  {
    "text": "can see all the text here you can't really see but it's a ma award which I",
    "start": "72100",
    "end": "77860"
  },
  {
    "text": "haven't won but I I could take the picture at least it likes before a",
    "start": "77860",
    "end": "84159"
  },
  {
    "text": "children's show that we produced at NRK and this is an RK as I said it's sort of",
    "start": "84159",
    "end": "91450"
  },
  {
    "text": "the BBC equivalent in Norway so Republic podcasts are owned by the state or the government and we are funded by the",
    "start": "91450",
    "end": "98259"
  },
  {
    "text": "people and this is a picture from our first live TV broadcast in the middle",
    "start": "98259",
    "end": "104009"
  },
  {
    "text": "the guy and the shot I think it's it's the first is the king is king olav the",
    "start": "104009",
    "end": "110710"
  },
  {
    "text": "guy on the far right is the Prime Minister is called Kate Hudson and the reguar next to the Prime Minister is the",
    "start": "110710",
    "end": "119740"
  },
  {
    "text": "third guy and it was before fake news so the whole thing is real yeah we can't",
    "start": "119740",
    "end": "125319"
  },
  {
    "text": "really you haven't found out who the third guy was he's he's like the third guy on the Apollo 11 mission along with",
    "start": "125319",
    "end": "131770"
  },
  {
    "text": "Buzz Aldrin and so a short timeline like",
    "start": "131770",
    "end": "137770"
  },
  {
    "text": "we said the first ball cost TV broadcast was 1960 but we've been around doing",
    "start": "137770",
    "end": "142780"
  },
  {
    "text": "radio since 1925 eight years as a private company and then it was",
    "start": "142780",
    "end": "148300"
  },
  {
    "text": "in 1933 and today we have over million programs in our database which is cool",
    "start": "148300",
    "end": "156090"
  },
  {
    "text": "but due to rights mostly around 120 hundred and thirty",
    "start": "156090",
    "end": "163120"
  },
  {
    "text": "thousand are available at any given time and that's combined TV and radio and our",
    "start": "163120",
    "end": "170890"
  },
  {
    "text": "product looks like this at least on an iPad of course we have multiple",
    "start": "170890",
    "end": "176290"
  },
  {
    "text": "platforms Apple TVs and so on as you can see it's a modern web player and we are",
    "start": "176290",
    "end": "181750"
  },
  {
    "text": "our main competitors our Netflix in the Norwegian market and YouTube and so on",
    "start": "181750",
    "end": "188380"
  },
  {
    "text": "all the Giants from America and this is",
    "start": "188380",
    "end": "193870"
  },
  {
    "text": "our system this is our system as you can see we've been very creative during this trying to create this talk we've been",
    "start": "193870",
    "end": "200950"
  },
  {
    "text": "drawing a lot in OneNote and our project is the square box in the middle here the",
    "start": "200950",
    "end": "207250"
  },
  {
    "text": "e stands for distribution engine and that is our project we take some programs from internal storage and we",
    "start": "207250",
    "end": "214270"
  },
  {
    "text": "distribute them to the cloud that's been Akamai and on the far back and you can",
    "start": "214270",
    "end": "219610"
  },
  {
    "text": "see that a program is typically made up of five files which are encoded in different qualities ranging from 720p I",
    "start": "219610",
    "end": "227950"
  },
  {
    "text": "think it's the highest one to a very low quality hundred and eighty P so that is",
    "start": "227950",
    "end": "234040"
  },
  {
    "text": "the project a lot of files shred state parallel processing parallel uploads",
    "start": "234040",
    "end": "239560"
  },
  {
    "text": "yeah we try to distribute things as fast as possible and that's where parallelism comes into play and that brings us to",
    "start": "239560",
    "end": "247600"
  },
  {
    "text": "the point why we needed to do something with it because as Alan said we actually",
    "start": "247600",
    "end": "253330"
  },
  {
    "text": "started doing it from 2012 so actually we have working stable system so but as",
    "start": "253330",
    "end": "261010"
  },
  {
    "text": "you saw with a lot of files processing parallel then it's a lot of thread",
    "start": "261010",
    "end": "268810"
  },
  {
    "text": "manual thread management it's a lot of state locking state management so the",
    "start": "268810",
    "end": "273960"
  },
  {
    "text": "large the old system was really hard to maintain because it was not many domain",
    "start": "273960",
    "end": "280780"
  },
  {
    "text": "related things mostly thread and state management so then we started looking and different",
    "start": "280780",
    "end": "286900"
  },
  {
    "text": "programming models which would simplify our work so it could get rid of all this and then we found that actor model and",
    "start": "286900",
    "end": "293520"
  },
  {
    "text": "particular actor dotnet since we are in dotnet was a good fit and in the rest of",
    "start": "293520",
    "end": "298600"
  },
  {
    "text": "this talk we are going to talk about primarily about main lessons especially",
    "start": "298600",
    "end": "303730"
  },
  {
    "text": "my lessons for us as developers is object-oriented background who considers",
    "start": "303730",
    "end": "308950"
  },
  {
    "text": "himself or herself developer with object-oriented background yeah I guess",
    "start": "308950",
    "end": "314050"
  },
  {
    "text": "majority so so what are we lost majority yeah which leads us to again a simple drawing",
    "start": "314050",
    "end": "320800"
  },
  {
    "text": "our existing system bog if mentioned it is a system written in written in",
    "start": "320800",
    "end": "326290"
  },
  {
    "text": "c-sharp fairly well written four years ago five years ago but we've mentioned",
    "start": "326290",
    "end": "333970"
  },
  {
    "text": "we had quite a few issues around threading and it was spinning up of",
    "start": "333970",
    "end": "339070"
  },
  {
    "text": "multiple I need to do multiple uploads there was a big pasta torii of tasks so",
    "start": "339070",
    "end": "345190"
  },
  {
    "text": "I had to lock the repository and make sure you check in some tasks and check them out and there was also the green",
    "start": "345190",
    "end": "351940"
  },
  {
    "text": "one is the database a lot of the state was actually kept in the database with",
    "start": "351940",
    "end": "357300"
  },
  {
    "text": "various amounts of flags so this is a typical software development story if",
    "start": "357300",
    "end": "362620"
  },
  {
    "text": "you want a new feature you add a add a flag in a database which leads you into trouble so you wanted to get rid away",
    "start": "362620",
    "end": "371620"
  },
  {
    "text": "from these horrified monkeys design goals to get rid of where did you find",
    "start": "371620",
    "end": "377260"
  },
  {
    "text": "this picture yeah so we wanted to get",
    "start": "377260",
    "end": "382600"
  },
  {
    "text": "rid of the man actual manual handling state of threads I consider it a bit like memory management you want to get",
    "start": "382600",
    "end": "389260"
  },
  {
    "text": "away from it as much as much as possible at least in general programming models and and in for some more of a strict",
    "start": "389260",
    "end": "398190"
  },
  {
    "text": "mutability and what did you use f-sharp basically and more a functional approach since this is a very back-end driven",
    "start": "398190",
    "end": "404860"
  },
  {
    "text": "data transformation type of project the C sharp implementation was was trying to",
    "start": "404860",
    "end": "412780"
  },
  {
    "text": "do it functionally but but a functional language is better at doing it functionally so we ended up with",
    "start": "412780",
    "end": "420639"
  },
  {
    "text": "these two choices acha dotnet and an f-sharp and I think F",
    "start": "420639",
    "end": "426100"
  },
  {
    "text": "sharp which was the obvious choice for us as we've recently become quite big",
    "start": "426100",
    "end": "432490"
  },
  {
    "text": "fans both of us and in different projects so it's become more or less the default language in our team that was",
    "start": "432490",
    "end": "439180"
  },
  {
    "text": "easy I thought that was maybe not that of an obvious choice but we read some",
    "start": "439180",
    "end": "447520"
  },
  {
    "text": "stuff about the actor model and I thought it could help us isolate some state around these uploads around these",
    "start": "447520",
    "end": "453520"
  },
  {
    "text": "programs we maybe can model each upload as a as an actor and by the way who had",
    "start": "453520",
    "end": "460210"
  },
  {
    "text": "no experience with F sharp please don't leave the room yet because our main",
    "start": "460210",
    "end": "466660"
  },
  {
    "text": "lessons there about programming model F sharp just an imitation language and",
    "start": "466660",
    "end": "472449"
  },
  {
    "text": "there will be music at the end so you so you have to stick around for this it will be worth it so how to introduce",
    "start": "472449",
    "end": "481120"
  },
  {
    "text": "actor model in just in a few minutes the best probably you should find the proper picture and of course when we started",
    "start": "481120",
    "end": "486729"
  },
  {
    "text": "googling welcome our model this is the first picture not diagram we found and actually in some presentations actor",
    "start": "486729",
    "end": "493120"
  },
  {
    "text": "model is illustrated with their picture of fabula which was completely unacceptable for me because I have in in",
    "start": "493120",
    "end": "499630"
  },
  {
    "text": "our family fibre this is my father so we couldn't use that picture father instead",
    "start": "499630",
    "end": "505840"
  },
  {
    "text": "we'll focus on the actual description in a few slides how actors and actor model",
    "start": "505840",
    "end": "513099"
  },
  {
    "text": "work yeah this is a diagram showing the actor or one actor this is an actor",
    "start": "513099",
    "end": "518860"
  },
  {
    "text": "several actors actually an actor is simply a message loop and for your left",
    "start": "518860",
    "end": "524410"
  },
  {
    "text": "you can see you interface with an actor by sending it a message that message gets put on on a cube which we usually",
    "start": "524410",
    "end": "532510"
  },
  {
    "text": "refer to as a mailbox and it's important to note that one actor has its own mailbox so they're not these queues are",
    "start": "532510",
    "end": "539320"
  },
  {
    "text": "not shared among actors every actor has its own mailbox and when a message gets",
    "start": "539320",
    "end": "544930"
  },
  {
    "text": "puts on the queue direct actor starts reading the message one at a time it's also very",
    "start": "544930",
    "end": "550570"
  },
  {
    "text": "important to remember so you so it has to finish the message before you can start anything else and as you can see",
    "start": "550570",
    "end": "559150"
  },
  {
    "text": "that one message at a time and also just messages can an actor have a state which",
    "start": "559150",
    "end": "564370"
  },
  {
    "text": "is visible for others no it controls its own state so it's not like an object you can't access the property and so you",
    "start": "564370",
    "end": "571450"
  },
  {
    "text": "have to send it a message if you want to ask it something then you ask it by sending a message similarly when we talk",
    "start": "571450",
    "end": "578410"
  },
  {
    "text": "about actors we also refer to an actor's system or an actor hierarchy this is",
    "start": "578410",
    "end": "585360"
  },
  {
    "text": "very simple iteration system is a namespace we think of research for",
    "start": "585360",
    "end": "592000"
  },
  {
    "text": "logging and some operational things and space you use mostly is our user space",
    "start": "592000",
    "end": "598600"
  },
  {
    "text": "where we create our after you create a hierarchy parent and child and the provision and someone will will come",
    "start": "598600",
    "end": "605320"
  },
  {
    "text": "into that later because the hierarchy is quite quite important on this slide we",
    "start": "605320",
    "end": "611350"
  },
  {
    "text": "try to illustrate that just because it's a hierarchy doesn't mean that you only",
    "start": "611350",
    "end": "617440"
  },
  {
    "text": "can pass message to your children or your parents you can actually pass them",
    "start": "617440",
    "end": "622839"
  },
  {
    "text": "along any way you want actually you can obtain a reference from the lowest level",
    "start": "622839",
    "end": "629200"
  },
  {
    "text": "to the top level actually whether that makes sense is up to you still have to be intelligent when writing these",
    "start": "629200",
    "end": "635440"
  },
  {
    "text": "message flows but but there's no inherent thing stopping you from passing",
    "start": "635440",
    "end": "640780"
  },
  {
    "text": "messages all through the hierarchy but actors are quite different from from",
    "start": "640780",
    "end": "646420"
  },
  {
    "text": "objects in what way what if yeah for us it was a big change",
    "start": "646420",
    "end": "652240"
  },
  {
    "text": "of perception how actors work among the objects objects they don't have a really",
    "start": "652240",
    "end": "659800"
  },
  {
    "text": "embedded notion of threads when they do those things so objects are bags of",
    "start": "659800",
    "end": "665770"
  },
  {
    "text": "properties you can give them human readable names you can call them Pete and Mary but they can be easily bullied so anyone who has a thread can access",
    "start": "665770",
    "end": "674140"
  },
  {
    "text": "public methods of public properties and start changing objects so and then we say the object is not thread safe if you",
    "start": "674140",
    "end": "680380"
  },
  {
    "text": "can't do changes to it through multiple threads and that's of course a big",
    "start": "680380",
    "end": "685670"
  },
  {
    "text": "problem actors they don't own threads either continuously all the time but",
    "start": "685670",
    "end": "692310"
  },
  {
    "text": "what's different is that an actor when I like to get the message it borrows a thread and whatever he does to it state",
    "start": "692310",
    "end": "700199"
  },
  {
    "text": "if needed it's just its own sole responsibility so if actor changes the state it's only that actor that changes",
    "start": "700199",
    "end": "707430"
  },
  {
    "text": "the state that makes it much easier to debug actors in case you have some",
    "start": "707430",
    "end": "712620"
  },
  {
    "text": "problems with that so no shred state no threading that makes it very very different and very",
    "start": "712620",
    "end": "720779"
  },
  {
    "text": "applicable to this enterprise system with a lot of parallel processing yeah",
    "start": "720779",
    "end": "727620"
  },
  {
    "text": "this is a simple this is actually C sharp example which we wanted to show as",
    "start": "727620",
    "end": "733529"
  },
  {
    "text": "we mentioned it will mostly be showing examples in F sharp but let's look at a very simple implementation in ships C",
    "start": "733529",
    "end": "739920"
  },
  {
    "text": "sharp it's a class it inherits from receive actor it's as a constructor and",
    "start": "739920",
    "end": "745860"
  },
  {
    "text": "it has a receive method that's quite important so receive is like well in",
    "start": "745860",
    "end": "750930"
  },
  {
    "text": "JavaScript like an on receive message so when you receive the message of type user message then you do something",
    "start": "750930",
    "end": "757769"
  },
  {
    "text": "there's a lambda expression here just doing very simple logging in this",
    "start": "757769",
    "end": "762899"
  },
  {
    "text": "example and similarly an example is in F",
    "start": "762899",
    "end": "768180"
  },
  {
    "text": "sharp is a bit more alien to you perhaps there's some stuff going on here there's",
    "start": "768180",
    "end": "775370"
  },
  {
    "text": "bangs and stuff and there's loops and yeah but in essence it's the same thing",
    "start": "775370",
    "end": "780779"
  },
  {
    "text": "we're getting a message on me the main lesson is the same thing it's a continuous loop asynchronous receiving a",
    "start": "780779",
    "end": "786569"
  },
  {
    "text": "message from the mailbox receive message it's prints printer found prints the message and returns the loop and tries",
    "start": "786569",
    "end": "793680"
  },
  {
    "text": "to receive another message let's look at a bit more interesting example that's",
    "start": "793680",
    "end": "799620"
  },
  {
    "text": "something more interesting from operational point of view because this is an actor which implements a simple",
    "start": "799620",
    "end": "806040"
  },
  {
    "text": "state machine FSM so it it has two states disconnected and",
    "start": "806040",
    "end": "811290"
  },
  {
    "text": "connected and each state is managed by so called function because then F sharp everything because this function you tried to use",
    "start": "811290",
    "end": "817680"
  },
  {
    "text": "only functions with that so this is a function which takes messages and then it reacts on message Connect and then it",
    "start": "817680",
    "end": "824910"
  },
  {
    "text": "creates connection and then it goes to another state which is also implemented using another function connected in",
    "start": "824910",
    "end": "831480"
  },
  {
    "text": "connected state we only respond to disconnect messages otherwise otherwise we yes we do respond but we Jung don't",
    "start": "831480",
    "end": "838050"
  },
  {
    "text": "do anything we stay connected so you see it's very declarative we have States",
    "start": "838050",
    "end": "843720"
  },
  {
    "text": "presented as function and also it's quite declarative like what messages respond in every state and of course we",
    "start": "843720",
    "end": "849810"
  },
  {
    "text": "need to specify what is initial state of this actor is disconnected state so these constructions we use quite a lot",
    "start": "849810",
    "end": "856649"
  },
  {
    "text": "in our project and it's really easy to read it's really easy to maintain yeah",
    "start": "856649",
    "end": "866220"
  },
  {
    "text": "is remind you of the agenda we'll finish",
    "start": "866220",
    "end": "871380"
  },
  {
    "text": "with our introduction now and we'll move on to the main lessons and by starting",
    "start": "871380",
    "end": "876720"
  },
  {
    "text": "with tell don't ask yeah that's the first main lesson probably far the most",
    "start": "876720",
    "end": "882540"
  },
  {
    "text": "important lesson that we learned because when we started with active model we saw that akka has two methods both looks",
    "start": "882540",
    "end": "890010"
  },
  {
    "text": "very convenient tell and ask you used tell we just send message to another actor and you ask when you send message",
    "start": "890010",
    "end": "897089"
  },
  {
    "text": "to another actor and you don't do anything else until you get a response",
    "start": "897089",
    "end": "902250"
  },
  {
    "text": "let me so that's the best of two worlds let's use them both of course we try to",
    "start": "902250",
    "end": "909029"
  },
  {
    "text": "use most detail but in case we need answer now we just wait first of all that breaks reactive software principle",
    "start": "909029",
    "end": "918029"
  },
  {
    "text": "because when an actor is waiting for response it's actually consuming CPU it's in it's consuming a thread but then",
    "start": "918029",
    "end": "925230"
  },
  {
    "text": "what if response never comes and this is not fine and this is frightening picture it shows actual number of hours which we",
    "start": "925230",
    "end": "932430"
  },
  {
    "text": "spend debugging such actors waiting for respond that would never come and I",
    "start": "932430",
    "end": "937440"
  },
  {
    "text": "probably should have specifically bad conscience because I'm external consultants using these hours",
    "start": "937440",
    "end": "943550"
  },
  {
    "text": "but there is more than that the performance of aspiration is just horrible and let's have a brief look why so will",
    "start": "943550",
    "end": "951199"
  },
  {
    "text": "this machine the small machine with into i-5 to run some tests and just for the",
    "start": "951199",
    "end": "959480"
  },
  {
    "text": "reference the fastest thing you can do of course is direct method invocation and then you can call a method about 300",
    "start": "959480",
    "end": "966889"
  },
  {
    "text": "million times a second on this machine and all other operations which we tried",
    "start": "966889",
    "end": "972050"
  },
  {
    "text": "so much slower we decided to remove this from other slides otherwise we wouldn't",
    "start": "972050",
    "end": "977929"
  },
  {
    "text": "really see the real thing so when we run two actors talk to each other just",
    "start": "977929",
    "end": "984019"
  },
  {
    "text": "sending a message to another actor is also pretty damn fast it's three million about actually about",
    "start": "984019",
    "end": "989360"
  },
  {
    "text": "four million on this machine messages you can send from actor a track to B which is approximately approximately 10",
    "start": "989360",
    "end": "996290"
  },
  {
    "text": "times faster as using a sing a wave if you use tip a library but if you use ask",
    "start": "996290",
    "end": "1002019"
  },
  {
    "text": "before most drops dramatically we're only about hundred fifty thousand",
    "start": "1002019",
    "end": "1007809"
  },
  {
    "text": "messages so it's really horrible performance if you want a long answer to",
    "start": "1007809",
    "end": "1013149"
  },
  {
    "text": "that you should read the blog post written by one of a cadet contributor Bart Asha Petrovski",
    "start": "1013149",
    "end": "1018579"
  },
  {
    "text": "but in brief the ask implementation internally is actually quite complex",
    "start": "1018579",
    "end": "1024220"
  },
  {
    "text": "because everything is message in actor model so let's say an actor a sends a",
    "start": "1024220",
    "end": "1030339"
  },
  {
    "text": "message to actor B and then it needs to get a message back immediately before processing anything else so there is a",
    "start": "1030339",
    "end": "1037959"
  },
  {
    "text": "message coming its way if message is received in the regular mail box what if there are other pending",
    "start": "1037959",
    "end": "1044350"
  },
  {
    "text": "messages that needs to be processed but it can't it needs to respond to get",
    "start": "1044350",
    "end": "1050080"
  },
  {
    "text": "message the response first so we either need to rewrite implementation of",
    "start": "1050080",
    "end": "1056350"
  },
  {
    "text": "mailbox which is starting not sequential or we need to do something smart and both creators",
    "start": "1056350",
    "end": "1061809"
  },
  {
    "text": "acha acha Scala and akka dotnet they did alternative resolution to that so",
    "start": "1061809",
    "end": "1068200"
  },
  {
    "text": "actually they create a third actor with the sole responsibility for waiting for",
    "start": "1068200",
    "end": "1073840"
  },
  {
    "text": "this response and delivering it using kind of priority delivery to the actor a so you",
    "start": "1073840",
    "end": "1079150"
  },
  {
    "text": "see three actors are involved just to get response back which of course makes it complex and makes it slow so what if",
    "start": "1079150",
    "end": "1088330"
  },
  {
    "text": "you really need a response from actor and you can't do anything else until you get a response what works very well",
    "start": "1088330",
    "end": "1096429"
  },
  {
    "text": "actually is implement so called integration pattern where you add simple",
    "start": "1096429",
    "end": "1103059"
  },
  {
    "text": "finite state machine to your actor which actually brings it into a waiting State",
    "start": "1103059",
    "end": "1108240"
  },
  {
    "text": "so you can wait for a response staying reactive let's see how it can be",
    "start": "1108240",
    "end": "1114070"
  },
  {
    "text": "implemented first the region employment a shin you have an actor that receives a",
    "start": "1114070",
    "end": "1119350"
  },
  {
    "text": "message and if you see the message process item it needs to fetch some more details and here it's old implemented",
    "start": "1119350",
    "end": "1126279"
  },
  {
    "text": "it's waiting for response this is an F sharp ask method get item details we are",
    "start": "1126279",
    "end": "1131500"
  },
  {
    "text": "waiting so we are in hands of this other actor and we still consuming CPU how can",
    "start": "1131500",
    "end": "1139090"
  },
  {
    "text": "we rewrite it let's introduce now simple FSM we can be an idle state and if we get the message",
    "start": "1139090",
    "end": "1146830"
  },
  {
    "text": "process item we just send a message straight get item details and we enter a",
    "start": "1146830",
    "end": "1152289"
  },
  {
    "text": "new state awaiting details and we actually go to sleep until we receive the response in this new state if we",
    "start": "1152289",
    "end": "1160570"
  },
  {
    "text": "can't process incoming message then we stash it that's a function of akka so",
    "start": "1160570",
    "end": "1167980"
  },
  {
    "text": "you can stash messages in some intermediate queue until you can do",
    "start": "1167980",
    "end": "1173529"
  },
  {
    "text": "something with them stay in your active once you get this new message you get",
    "start": "1173529",
    "end": "1178779"
  },
  {
    "text": "these details and send them to interested party and un stash messages",
    "start": "1178779",
    "end": "1184419"
  },
  {
    "text": "that have been waiting so this gives you actor very scalable and reactive and no",
    "start": "1184419",
    "end": "1190690"
  },
  {
    "text": "longer you have this synchronous loop waiting for responses and if you look at",
    "start": "1190690",
    "end": "1195960"
  },
  {
    "text": "performance of this it's actually not that bad of course it's slower than tell",
    "start": "1195960",
    "end": "1202260"
  },
  {
    "text": "direct single message between two actors but it's actually several times faster",
    "start": "1202260",
    "end": "1207429"
  },
  {
    "text": "than using TTL yeah this I think does yeah TPL so this",
    "start": "1207429",
    "end": "1216009"
  },
  {
    "text": "is our preferred way of implementing bi-directional communication now in our system of course we still use us in some",
    "start": "1216009",
    "end": "1224259"
  },
  {
    "text": "cases but this is mostly some system calls some calls to active system like",
    "start": "1224259",
    "end": "1230609"
  },
  {
    "text": "asking for reference for an actor wearing persistent actor we'll be",
    "start": "1230609",
    "end": "1236169"
  },
  {
    "text": "talking about later so mostly our system now implementing using the",
    "start": "1236169",
    "end": "1241389"
  },
  {
    "text": "unidirectional messages and that brings us to the next important lesson probably",
    "start": "1241389",
    "end": "1247119"
  },
  {
    "text": "the second of its importance Octus provision yeah let's look at actor",
    "start": "1247119",
    "end": "1252999"
  },
  {
    "text": "supervision or I wrote handling as it's as it is actor or other handling in a",
    "start": "1252999",
    "end": "1262419"
  },
  {
    "text": "car is quite a bit different and in c-sharp or look at that it's we try to get away from handling actors in a very",
    "start": "1262419",
    "end": "1269589"
  },
  {
    "text": "small local scope and we try to do supervision on top of that and say fail",
    "start": "1269589",
    "end": "1274799"
  },
  {
    "text": "fast and easily down here but take care of care of it up here so we actually",
    "start": "1274799",
    "end": "1282039"
  },
  {
    "text": "have another example in c-sharp it's true remember that but this is a example",
    "start": "1282039",
    "end": "1289269"
  },
  {
    "text": "trying to connect database of thing and what do you do in c-sharp well you slap",
    "start": "1289269",
    "end": "1294309"
  },
  {
    "text": "the try-catch around and they come on you want to execute of course okay",
    "start": "1294309",
    "end": "1300369"
  },
  {
    "text": "probably a lot of you've done multiple times in this case we are not doing very",
    "start": "1300369",
    "end": "1307389"
  },
  {
    "text": "much we are just wrapping it in some sort of custom exception which is very nice and nice an enterprise I think it's",
    "start": "1307389",
    "end": "1316299"
  },
  {
    "text": "not good enough there is not good enough we can do it even more Enterprise e we",
    "start": "1316299",
    "end": "1321669"
  },
  {
    "text": "can catch multiple exceptions there's probably I can't remember how many exceptions that connection is able to",
    "start": "1321669",
    "end": "1328029"
  },
  {
    "text": "throw but I guess is approaching double digits and how many different argument",
    "start": "1328029",
    "end": "1334119"
  },
  {
    "text": "exceptions and all these kinds of different exceptions but what's important here you can read in the code",
    "start": "1334119",
    "end": "1339429"
  },
  {
    "text": "or in the comments is what what do you actually do inside these",
    "start": "1339429",
    "end": "1344640"
  },
  {
    "text": "catchers do you just log the idle and we throw it and hope that some other being",
    "start": "1344640",
    "end": "1351400"
  },
  {
    "text": "on top catches it what do you do if the connection is shared among a hundred",
    "start": "1351400",
    "end": "1356650"
  },
  {
    "text": "different methods how do they recover when the connection is suddenly dropped",
    "start": "1356650",
    "end": "1361950"
  },
  {
    "text": "how about the threads how are they able to to stay on top of this it becomes",
    "start": "1361950",
    "end": "1369850"
  },
  {
    "text": "very difficult and we'll just have to",
    "start": "1369850",
    "end": "1375550"
  },
  {
    "text": "reference this other article paper which is very good and explains it isn't quite",
    "start": "1375550",
    "end": "1380770"
  },
  {
    "text": "quite a good detailed they're very sticky situations you can get into with",
    "start": "1380770",
    "end": "1386650"
  },
  {
    "text": "the control flow when you try to handle these others locally particularly in",
    "start": "1386650",
    "end": "1391810"
  },
  {
    "text": "more modern parallel paradigms so let's start trying to explain how I did it in",
    "start": "1391810",
    "end": "1398950"
  },
  {
    "text": "in aqua dotnet and this is a very simple example of our interface which deals",
    "start": "1398950",
    "end": "1406780"
  },
  {
    "text": "with reading messages from a queue not the internal actor queue but external",
    "start": "1406780",
    "end": "1413290"
  },
  {
    "text": "queue like rabbitmq we use RabbitMQ lots so this is command as you can see it to",
    "start": "1413290",
    "end": "1420160"
  },
  {
    "text": "connect to the queue you have to connect of course and once you've connected then you have to subscribe to the actual",
    "start": "1420160",
    "end": "1428260"
  },
  {
    "text": "queue name and or give give an actor that's supposed to receive the message",
    "start": "1428260",
    "end": "1433750"
  },
  {
    "text": "after you've you've read it off the queue and the implementation looks a bit",
    "start": "1433750",
    "end": "1439330"
  },
  {
    "text": "like this as before that's usually mutually recursive function and an FSM",
    "start": "1439330",
    "end": "1445780"
  },
  {
    "text": "that's deals with transitions between all these states but off but I'd also",
    "start": "1445780",
    "end": "1452170"
  },
  {
    "text": "care always not just in a c-sharp code it will probably the database can go",
    "start": "1452170",
    "end": "1458830"
  },
  {
    "text": "down mean there's no magic in functional programming that you won't lose the database so and you have to handle that",
    "start": "1458830",
    "end": "1467710"
  },
  {
    "text": "error and then okay that is dealt through a supervisor strategy so a",
    "start": "1467710",
    "end": "1473530"
  },
  {
    "text": "supervisor is the parent of the child so as you remember earlier we had a actor hierarchy and the",
    "start": "1473530",
    "end": "1481479"
  },
  {
    "text": "parent house is when the heir apparent creates the child it's also a sort of responsible for that child just as in",
    "start": "1481479",
    "end": "1488559"
  },
  {
    "text": "real life and what happens when an exception occurs in the child then",
    "start": "1488559",
    "end": "1494889"
  },
  {
    "text": "depends on the on the strategy and the strategy can be applied just to the",
    "start": "1494889",
    "end": "1500559"
  },
  {
    "text": "failing child so if the child falls down it breaks its leg you take the child to",
    "start": "1500559",
    "end": "1506859"
  },
  {
    "text": "the hospital or maybe retort to yourself and you fix the leg I'm not sure I usually take my into the hospital you",
    "start": "1506859",
    "end": "1515319"
  },
  {
    "text": "could do the same action for all your children so if one falls down you take",
    "start": "1515319",
    "end": "1520899"
  },
  {
    "text": "them all to the hospital I guess might make sense be the only",
    "start": "1520899",
    "end": "1526809"
  },
  {
    "text": "child in my family I find this not fair strategy it's nice to go to a hospital",
    "start": "1526809",
    "end": "1531959"
  },
  {
    "text": "but so you can choose just hand the one message or maybe it's just a that child",
    "start": "1531959",
    "end": "1538869"
  },
  {
    "text": "is part of say a hundred workers doing the same job and it all need to restart them for instance because what you can",
    "start": "1538869",
    "end": "1544959"
  },
  {
    "text": "do there are four types of things you can do you can just restart the actor",
    "start": "1544959",
    "end": "1550319"
  },
  {
    "text": "just say oh exceptions that's bad try again and that's default that's you",
    "start": "1550319",
    "end": "1556209"
  },
  {
    "text": "don't find out this is what will happen yeah or you can resume so we have the mailbox and one message fails but that",
    "start": "1556209",
    "end": "1562839"
  },
  {
    "text": "doesn't doesn't really matter maybe it's a video stream so if you lose one frame that doesn't really matter so you can",
    "start": "1562839",
    "end": "1570309"
  },
  {
    "text": "just keep on processing you could actually just stop the actor give up or you could really go give up and just",
    "start": "1570309",
    "end": "1576429"
  },
  {
    "text": "escalate the whole other to grandparent yeah so grandparents or who always know better government or supreme being of",
    "start": "1576429",
    "end": "1584829"
  },
  {
    "text": "some kind and this is a simple example",
    "start": "1584829",
    "end": "1591129"
  },
  {
    "text": "again the strategy as you can see it's one for one so this is just the one actor and here we can also be quite",
    "start": "1591129",
    "end": "1598089"
  },
  {
    "text": "enterprising and catch all these different exceptions and do different jobs depending on the exception but what",
    "start": "1598089",
    "end": "1606429"
  },
  {
    "text": "is important that this strategy definition it replaces all those",
    "start": "1606429",
    "end": "1611770"
  },
  {
    "text": "around try caches everywhere so you define within one place typically on parent level in case parent encounters",
    "start": "1611770",
    "end": "1620410"
  },
  {
    "text": "these types of problems what needs to be done to after stop it can see a resume",
    "start": "1620410",
    "end": "1625870"
  },
  {
    "text": "it and so on so no no more this logic inside the catch that is true and let's",
    "start": "1625870",
    "end": "1632470"
  },
  {
    "text": "be really explicit and just show you what actually happens the exception occurs the exception gets thrown so it's",
    "start": "1632470",
    "end": "1640150"
  },
  {
    "text": "and it's it suspends the run time like actually suspended the supervisor get",
    "start": "1640150",
    "end": "1646210"
  },
  {
    "text": "note gets notified supervisors then gets rid of the actor but what's important",
    "start": "1646210",
    "end": "1651760"
  },
  {
    "text": "here is that the supervisor gets the mailbox so say there was a thousand messages pending on this actor and one",
    "start": "1651760",
    "end": "1659230"
  },
  {
    "text": "of them's fail the apparent gets the other 99 or the whole mailbox actually",
    "start": "1659230",
    "end": "1664450"
  },
  {
    "text": "and can we instantiate the actor and give it's all its messages so you can just try again and what we realized with",
    "start": "1664450",
    "end": "1674860"
  },
  {
    "text": "our implementation was it was quite I think it was a very strong",
    "start": "1674860",
    "end": "1680350"
  },
  {
    "text": "implementation basically it's very much modeled after the c-sharp API what what",
    "start": "1680350",
    "end": "1688059"
  },
  {
    "text": "happened here is that when we you restart the actor it gets the mailbox",
    "start": "1688059",
    "end": "1693970"
  },
  {
    "text": "yes but it doesn't get the message just replayed that made it go into a certain",
    "start": "1693970",
    "end": "1701380"
  },
  {
    "text": "state so in our case when we first started up an actor you have to actually send it a message to connect and then a",
    "start": "1701380",
    "end": "1708580"
  },
  {
    "text": "message to subscribe when it gets restarted it gets into a blank state it receives the messages or the mailbox but",
    "start": "1708580",
    "end": "1716050"
  },
  {
    "text": "it's not actually in a state to be able to process the messages so we had to",
    "start": "1716050",
    "end": "1721390"
  },
  {
    "text": "inject those doing similarly to",
    "start": "1721390",
    "end": "1727030"
  },
  {
    "text": "dependency injection after actually have to send in functions or messages that",
    "start": "1727030",
    "end": "1733690"
  },
  {
    "text": "makes the actor able to start working right away so we could get rid of a lot",
    "start": "1733690",
    "end": "1740110"
  },
  {
    "text": "of the API making it is a bit less explicit and we ended up with this now it's just",
    "start": "1740110",
    "end": "1747190"
  },
  {
    "text": "a one function and on the top you can see that we send in in the constructor",
    "start": "1747190",
    "end": "1752890"
  },
  {
    "text": "or in it's called pops in properties we send in the actual details of the queue",
    "start": "1752890",
    "end": "1759190"
  },
  {
    "text": "so the address of the queue the name of the key you should subscribe to and also the subscriber the one that is going to",
    "start": "1759190",
    "end": "1766900"
  },
  {
    "text": "do the next step in the in the pipeline and if you remember the first implementation it can had three states",
    "start": "1766900",
    "end": "1773590"
  },
  {
    "text": "disconnected connected subscribe but it doesn't make sense to create an actor",
    "start": "1773590",
    "end": "1778870"
  },
  {
    "text": "disconnected it should be as operational as possible so just not just one state",
    "start": "1778870",
    "end": "1783940"
  },
  {
    "text": "and we try to send anything that we can to make actor up and running in cases",
    "start": "1783940",
    "end": "1789010"
  },
  {
    "text": "we've restarted which takes us to the",
    "start": "1789010",
    "end": "1795370"
  },
  {
    "text": "next lesson which actually was not essential reason for us to choose actor",
    "start": "1795370",
    "end": "1801760"
  },
  {
    "text": "model we read about so called persistent actors but we thought it will be nice",
    "start": "1801760",
    "end": "1806919"
  },
  {
    "text": "addition to regular database because in every back-end project you need to have regular database and after a year of",
    "start": "1806919",
    "end": "1813429"
  },
  {
    "text": "development we can be proud to say that that was a year without creating tables",
    "start": "1813429",
    "end": "1820600"
  },
  {
    "text": "without writing out the table everything all our persistent needs solved by so",
    "start": "1820600",
    "end": "1826150"
  },
  {
    "text": "called persistent actors which are implemented using so-called event sourcing principle so an actor receives",
    "start": "1826150",
    "end": "1833669"
  },
  {
    "text": "commands or messages and they all can be treated as events and if you need to",
    "start": "1833669",
    "end": "1838870"
  },
  {
    "text": "play them back if you take care of them you can do that so the persistent actor",
    "start": "1838870",
    "end": "1844450"
  },
  {
    "text": "is the one who actually stores all these events in so called event journal so",
    "start": "1844450",
    "end": "1850059"
  },
  {
    "text": "this are all events that happened to this actor for performance reasons for",
    "start": "1850059",
    "end": "1855940"
  },
  {
    "text": "optimism you can also have snapshot store it's a typically another table in your back-end where you can store some",
    "start": "1855940",
    "end": "1863190"
  },
  {
    "text": "stage periodically so if you want to play it back you will play back quite",
    "start": "1863190",
    "end": "1868419"
  },
  {
    "text": "fast so this example of persistent state that we take care of we deal with file",
    "start": "1868419",
    "end": "1875620"
  },
  {
    "text": "distribution so in our system we need to take care of locator when in the cloud file is located",
    "start": "1875620",
    "end": "1882070"
  },
  {
    "text": "storage provider its CDN path and so on this production code is not yeah it's",
    "start": "1882070",
    "end": "1887149"
  },
  {
    "text": "actually it is from production code and these are four commands that we send to our persistent actor we can assign",
    "start": "1887149",
    "end": "1893330"
  },
  {
    "text": "locator we can remove locators that's the only case we'll use ask actually",
    "start": "1893330",
    "end": "1898399"
  },
  {
    "text": "query locators I said earlier that we still use ask for querying persistent actors and we take snapshots for",
    "start": "1898399",
    "end": "1905440"
  },
  {
    "text": "efficiency reason and there is a wide choice of backends for I could net we",
    "start": "1905440",
    "end": "1912289"
  },
  {
    "text": "using Microsoft sequel server just for reason of maintainability and operation",
    "start": "1912289",
    "end": "1918830"
  },
  {
    "text": "because at NRK there's a lot of competency and good operations around microscope server",
    "start": "1918830",
    "end": "1925669"
  },
  {
    "text": "you can choose anything that you would like to of course MongoDB or even events",
    "start": "1925669",
    "end": "1932239"
  },
  {
    "text": "store it's not listed here because it's not officially released but you can also use that and just for curiosity that",
    "start": "1932239",
    "end": "1940039"
  },
  {
    "text": "this is how event journal table SQL server looks what's important that you must have global unique persistence ID",
    "start": "1940039",
    "end": "1946519"
  },
  {
    "text": "which is up to you to assign it has sequence number so it will be played",
    "start": "1946519",
    "end": "1951619"
  },
  {
    "text": "back using the sequence number and of course the event content is here its payload but again this is something we",
    "start": "1951619",
    "end": "1958669"
  },
  {
    "text": "just copied from github and apply to the database we didn't do it ourselves and being back-end developer for quite a lot",
    "start": "1958669",
    "end": "1966200"
  },
  {
    "text": "of years I must say that that was not my most creative time I've been doing in my",
    "start": "1966200",
    "end": "1972469"
  },
  {
    "text": "life creating and altering tables and just focusing on the main tasks and",
    "start": "1972469",
    "end": "1979149"
  },
  {
    "text": "outsourcing to preset actors was quite quite a relief and then next question",
    "start": "1979149",
    "end": "1985820"
  },
  {
    "text": "about how less than about yeah it's",
    "start": "1985820",
    "end": "1991909"
  },
  {
    "text": "about scalability so which leads us back",
    "start": "1991909",
    "end": "1997279"
  },
  {
    "text": "to this actor hierarchy and one of the main advantages I think of implication",
    "start": "1997279",
    "end": "2003339"
  },
  {
    "text": "is that it's very easy to create a lot of parallel tasks or sort of worker",
    "start": "2003339",
    "end": "2009279"
  },
  {
    "text": "thread there are not threads there are actors but they are if you have a task that's supposed to break down something maybe",
    "start": "2009279",
    "end": "2015530"
  },
  {
    "text": "something you can easily split them up to ten jobs or maybe hundred jobs or",
    "start": "2015530",
    "end": "2020600"
  },
  {
    "text": "thousand jobs it's very easy to create that parallelism in our cabinets it's",
    "start": "2020600",
    "end": "2026419"
  },
  {
    "text": "that done through routing which is similar to supervision is defined on the",
    "start": "2026419",
    "end": "2032120"
  },
  {
    "text": "parent level do you define how the messages should be distributed among your children and you can do that in",
    "start": "2032120",
    "end": "2039770"
  },
  {
    "text": "several ways there's round-robin you all know this it's just evenly distributing them you",
    "start": "2039770",
    "end": "2046640"
  },
  {
    "text": "could do the smallest mailbox and say the one that doesn't have much to do you",
    "start": "2046640",
    "end": "2052158"
  },
  {
    "text": "should get the message it doesn't take into account stashed messages so you",
    "start": "2052159",
    "end": "2059270"
  },
  {
    "text": "might run into some trouble there but the one that we have been using a lot is",
    "start": "2059270",
    "end": "2064810"
  },
  {
    "text": "consistent hashing where you give the actual router a function saying based on",
    "start": "2064810",
    "end": "2072590"
  },
  {
    "text": "this hash you should drive the message to this and we use this for the separate programs as I mentioned we have a",
    "start": "2072590",
    "end": "2079220"
  },
  {
    "text": "million programs or a hundred and twenty thousand active programs and each of those programs are separate actor based",
    "start": "2079220",
    "end": "2086840"
  },
  {
    "text": "on the hash which is based on I think it's the unique ID and some other",
    "start": "2086840",
    "end": "2092500"
  },
  {
    "text": "characteristics here so this example shows you the very basic creation of an",
    "start": "2092500",
    "end": "2101090"
  },
  {
    "text": "actor so this is just creating one actor exactly you might upload actor is the actual function and it has some drops",
    "start": "2101090",
    "end": "2108890"
  },
  {
    "text": "properties yeah and this one shows a bit more code but this is actually all you",
    "start": "2108890",
    "end": "2114470"
  },
  {
    "text": "need to write to create its limit here",
    "start": "2114470",
    "end": "2119540"
  },
  {
    "text": "somewhere I can't remember or you can put everything in configuration it works out yeah well it's limited by some free",
    "start": "2119540",
    "end": "2126160"
  },
  {
    "text": "configuration but I think we have a lot at least 100,000 different actors will",
    "start": "2126160",
    "end": "2133190"
  },
  {
    "text": "create it on the hash function which is the Akamai uploader get hash base so",
    "start": "2133190",
    "end": "2138800"
  },
  {
    "text": "that returns something which uniquely identifies your actor and then every",
    "start": "2138800",
    "end": "2143810"
  },
  {
    "text": "other message that could post into this parent actor and gets routed to the",
    "start": "2143810",
    "end": "2150590"
  },
  {
    "text": "correct child that prevents same files be processed by parallel actors",
    "start": "2150590",
    "end": "2156830"
  },
  {
    "text": "simultaneously and what and what",
    "start": "2156830",
    "end": "2161840"
  },
  {
    "text": "probably what's important if you go back one slide that this act doesn't know about it is configured so now it's",
    "start": "2161840",
    "end": "2168260"
  },
  {
    "text": "running in hundreds of instances the code is still the same yeah it's actually actual actor implementation you",
    "start": "2168260",
    "end": "2173870"
  },
  {
    "text": "don't have to rewrite that and say you up to 100 or something you define it on the top and the actual function is still",
    "start": "2173870",
    "end": "2180260"
  },
  {
    "text": "still be exactly the same more or less yeah which takes us to the much promised",
    "start": "2180260",
    "end": "2190090"
  },
  {
    "text": "musical break yeah there's been quite a lot some of content and so we thought",
    "start": "2190090",
    "end": "2196280"
  },
  {
    "text": "that it would be time before we go to the final part representation to let you",
    "start": "2196280",
    "end": "2202160"
  },
  {
    "text": "easier memorize the things by presenting a song about it and this song might of",
    "start": "2202160",
    "end": "2207470"
  },
  {
    "text": "course must be written by English musician in this case Elton John and we",
    "start": "2207470",
    "end": "2213650"
  },
  {
    "text": "will be covering several topics in this song of course you already know that",
    "start": "2213650",
    "end": "2218950"
  },
  {
    "text": "doctor you say we but this is more of your yeah it will be helping with this line your domain yeah this is where I",
    "start": "2218950",
    "end": "2225620"
  },
  {
    "text": "become a sort of embarrassed and I refuse but you can sing along so octopus",
    "start": "2225620",
    "end": "2231800"
  },
  {
    "text": "is one message at a time we all know and actor instance created using little",
    "start": "2231800",
    "end": "2236870"
  },
  {
    "text": "props and the reference track is called actor F and if we're out to create multiple instances of actor they get",
    "start": "2236870",
    "end": "2244190"
  },
  {
    "text": "names dollar a dollar beam dollar see and our hero will get name dollar beautiful names yeah and then of course",
    "start": "2244190",
    "end": "2250610"
  },
  {
    "text": "you have supervision strategy and the most crucial one or cruel one is all for",
    "start": "2250610",
    "end": "2255830"
  },
  {
    "text": "one we're all octo sorry started and of course you should try to use tell and not ask so with that we will see if we",
    "start": "2255830",
    "end": "2266150"
  },
  {
    "text": "can see this keyboard yes yeah looks like so now you're helping",
    "start": "2266150",
    "end": "2273440"
  },
  {
    "text": "with text yes and everybody can sing along [Music]",
    "start": "2273440",
    "end": "2287040"
  },
  {
    "text": "though I never you you they chose us to restart you",
    "start": "2289000",
    "end": "2295490"
  },
  {
    "text": "and you kid stones got your name but when you were alive",
    "start": "2295490",
    "end": "2303970"
  },
  {
    "text": "you played your own props and every single message do that",
    "start": "2303980",
    "end": "2311020"
  },
  {
    "text": "for you she's only one [Music]",
    "start": "2311020",
    "end": "2317369"
  },
  {
    "text": "[Music] only using a few cycles from the message",
    "start": "2320290",
    "end": "2328730"
  },
  {
    "text": "game and I",
    "start": "2328730",
    "end": "2333960"
  },
  {
    "text": "but supervisors five new Pistons",
    "start": "2334280",
    "end": "2340250"
  },
  {
    "text": "I gotta read little lost",
    "start": "2340420",
    "end": "2345299"
  },
  {
    "text": "[Music]",
    "start": "2349210",
    "end": "2354300"
  },
  {
    "text": "loneliness was done you had to sleep alone",
    "start": "2357240",
    "end": "2362530"
  },
  {
    "text": "most of the time you go away come they let you tell but",
    "start": "2362530",
    "end": "2370250"
  },
  {
    "text": "when you die it was another sibling spam",
    "start": "2372660",
    "end": "2380349"
  },
  {
    "text": "but supervillain strategy",
    "start": "2380349",
    "end": "2383970"
  },
  {
    "text": "and it seems to be it's your life",
    "start": "2389140",
    "end": "2394420"
  },
  {
    "text": "for me [Music]",
    "start": "2396740",
    "end": "2403840"
  },
  {
    "text": "and I will [Music] why",
    "start": "2404369",
    "end": "2411610"
  },
  {
    "text": "[Music]",
    "start": "2411670",
    "end": "2414889"
  },
  {
    "text": "I",
    "start": "2419830",
    "end": "2421830"
  },
  {
    "text": "[Music] thank you thank you I ready for with",
    "start": "2431550",
    "end": "2441279"
  },
  {
    "text": "more technical stuff no that was also technical testing testing how we tested actors how can we",
    "start": "2441279",
    "end": "2449049"
  },
  {
    "text": "go back to testing now there is a courtesy desk it yeah I think one of the",
    "start": "2449049",
    "end": "2456700"
  },
  {
    "text": "main lessons we learned that of course well and recently there's been a big",
    "start": "2456700",
    "end": "2462700"
  },
  {
    "text": "debate on testing in Uncle Bob and so on but I think we started a bit late on",
    "start": "2462700",
    "end": "2468160"
  },
  {
    "text": "doing our testing and you shouldn't really underestimate testing even in a functional language and even in an actor",
    "start": "2468160",
    "end": "2474400"
  },
  {
    "text": "model and whatever fancy framework you're doing you should probably do some testing and verify that's the stuff for",
    "start": "2474400",
    "end": "2480849"
  },
  {
    "text": "accessory expect an architect's kit helps you do that it's it fits well with",
    "start": "2480849",
    "end": "2488019"
  },
  {
    "text": "the functional paradigm so it's an input and an output and then an extra systems case that is a message in and the",
    "start": "2488019",
    "end": "2494470"
  },
  {
    "text": "message out so you can actually send it a message and then verify that it sends a message you expects that's basically",
    "start": "2494470",
    "end": "2504489"
  },
  {
    "text": "the answers of testing actors you have incoming messages and then you expect certain output messages and then if",
    "start": "2504489",
    "end": "2510970"
  },
  {
    "text": "they're OK in relationship with incoming messages and your actor is good but we",
    "start": "2510970",
    "end": "2517390"
  },
  {
    "text": "are also using so-called FS check who knows quick check o fo check yeah quite",
    "start": "2517390",
    "end": "2524230"
  },
  {
    "text": "a few you yeah so a first trick is very heavily influenced by quick checks sort",
    "start": "2524230",
    "end": "2529509"
  },
  {
    "text": "of a port from from quick check and what this helps us do is randomize the input of our messages so in this instance you",
    "start": "2529509",
    "end": "2537190"
  },
  {
    "text": "can see that we the very top line on the far right you can see that we get a",
    "start": "2537190",
    "end": "2543489"
  },
  {
    "text": "message that is of type a then on the bottom area that you see that we",
    "start": "2543489",
    "end": "2549970"
  },
  {
    "text": "expect some certain messages or sequential messages being handled these are message types or message names",
    "start": "2549970",
    "end": "2557200"
  },
  {
    "text": "and this is order so if it will be wrong message wrong order then we will add an error but look that we didn't specify",
    "start": "2557200",
    "end": "2564099"
  },
  {
    "text": "the initial data there will be automatically sampled by our check and this case is",
    "start": "2564099",
    "end": "2569770"
  },
  {
    "text": "just it tries to create ten different so it's ten different variations of the",
    "start": "2569770",
    "end": "2575560"
  },
  {
    "text": "upload jutsu so it looks as at the type looks whether it's a string and so on and and tries to",
    "start": "2575560",
    "end": "2581050"
  },
  {
    "text": "infer the data types of course an analyst tries to manipulate those data",
    "start": "2581050",
    "end": "2587080"
  },
  {
    "text": "types and basically tries to break break your system and that helps us a lot I",
    "start": "2587080",
    "end": "2593680"
  },
  {
    "text": "think with actually steps that weak typing Korea who follows this recent",
    "start": "2593680",
    "end": "2600850"
  },
  {
    "text": "Twitter war started by Uncle Bob who",
    "start": "2600850",
    "end": "2606850"
  },
  {
    "text": "claimed that static languages sometimes their to read it too strong about things and then it shouldn't really replace",
    "start": "2606850",
    "end": "2614200"
  },
  {
    "text": "your test with with it you should sort of rely more on your test who who has been following this yeah and well Uncle",
    "start": "2614200",
    "end": "2623530"
  },
  {
    "text": "Bob of course he has a lot of valid think things to say but we must say on",
    "start": "2623530",
    "end": "2631600"
  },
  {
    "text": "outside that actually we'll be using quite extensively the static type system",
    "start": "2631600",
    "end": "2638170"
  },
  {
    "text": "because when we started with this applauded job we used types like strings",
    "start": "2638170",
    "end": "2643570"
  },
  {
    "text": "ins and then our sample generator just generated some rubbish strings for us because you have file I which consists",
    "start": "2643570",
    "end": "2650110"
  },
  {
    "text": "of commas or new strings and then this is a noise which is not worth testing then we slowly started turning into",
    "start": "2650110",
    "end": "2656410"
  },
  {
    "text": "strong type so now we have typed the URL file name alphanumeric and so on once it",
    "start": "2656410",
    "end": "2662020"
  },
  {
    "text": "was done and we have proper generators for everything then we get actually data that has a lot of sense and so we can",
    "start": "2662020",
    "end": "2670270"
  },
  {
    "text": "get here in this test ten samples but usually by default like hundred samples you get for free basically from test",
    "start": "2670270",
    "end": "2676780"
  },
  {
    "text": "generators and it's all dependent on good strong types behind behind I think",
    "start": "2676780",
    "end": "2682300"
  },
  {
    "text": "we also had some file paths so see : something path and then the FS",
    "start": "2682300",
    "end": "2690670"
  },
  {
    "text": "check would just create a string with just numbers which doesn't of course",
    "start": "2690670",
    "end": "2696490"
  },
  {
    "text": "it's a valid test if you want to make your system really handle everything in the known universe and be unbreakable",
    "start": "2696490",
    "end": "2702640"
  },
  {
    "text": "that's not really realistic because when you control the input and the output you",
    "start": "2702640",
    "end": "2708190"
  },
  {
    "text": "won't really send like nine nine nine nine nine when you're creating a path so",
    "start": "2708190",
    "end": "2715530"
  },
  {
    "text": "it helped a lot by creating strong type F sharp is especially strong with that",
    "start": "2715530",
    "end": "2721060"
  },
  {
    "text": "it's very easy to create new types and make them very having some some some",
    "start": "2721060",
    "end": "2726240"
  },
  {
    "text": "semantic meaning in the types not just a string in value a if you are f sharp guy or sorry C sharp guy you can use FS",
    "start": "2726240",
    "end": "2733450"
  },
  {
    "text": "check inventory search our library with your C sharp code to generate samples",
    "start": "2733450",
    "end": "2739060"
  },
  {
    "text": "for your C sharp yeah success to the final point and this is the conclusion",
    "start": "2739060",
    "end": "2744960"
  },
  {
    "text": "we will start off by this obligatory F sharp slide bragging this is just",
    "start": "2744960",
    "end": "2751690"
  },
  {
    "text": "propaganda propaganda slide you can see the total lines are about half empty",
    "start": "2751690",
    "end": "2757930"
  },
  {
    "text": "lines or lot less files are actually a lot less because you can fit more into file or makes it easier to fit anything",
    "start": "2757930",
    "end": "2765670"
  },
  {
    "text": "into a whole file but the story is not that big of a difference when you see at the actual code lines when you remove",
    "start": "2765670",
    "end": "2772090"
  },
  {
    "text": "all the stuff now you see that C sharp code is actually is still something like 25% larger than F sharp but so many you",
    "start": "2772090",
    "end": "2781690"
  },
  {
    "text": "sort of get just the meat as they're comparable but the traditional with C sharp is Java you get a lot of",
    "start": "2781690",
    "end": "2787330"
  },
  {
    "text": "ceremonial get a lot of verbosity which affects actually the ability of the code",
    "start": "2787330",
    "end": "2794650"
  },
  {
    "text": "because you you can't really see the whole thing on one page with this F sharp you it's very efficient code like",
    "start": "2794650",
    "end": "2801490"
  },
  {
    "text": "88% is real code exactly executable code so our impression that it's improved in",
    "start": "2801490",
    "end": "2810910"
  },
  {
    "text": "practical aspect our work with source code and also the fact that we have now one third or maybe almost 1/4 of",
    "start": "2810910",
    "end": "2817720"
  },
  {
    "text": "original number of files also also I don't think we mentioned it but this is a comparison of the old project from",
    "start": "2817720",
    "end": "2824490"
  },
  {
    "text": "10 2012 and a new project and they are not strictly like there's no one to one",
    "start": "2824490",
    "end": "2829590"
  },
  {
    "text": "feature set with that we've tried to extract the ones that are overlapping and compare them but they're not",
    "start": "2829590",
    "end": "2835920"
  },
  {
    "text": "you can't yeah there are approximate she do not do not yeah they're not written",
    "start": "2835920",
    "end": "2842460"
  },
  {
    "text": "in stone these numbers but actors are not silver bullets so what bad can we",
    "start": "2842460",
    "end": "2849240"
  },
  {
    "text": "say about well you remember the benchmark that the absolutely fastest",
    "start": "2849240",
    "end": "2855600"
  },
  {
    "text": "way to execute piece of code just to have direct method invocation and when",
    "start": "2855600",
    "end": "2860790"
  },
  {
    "text": "we started working with actor model we run some examples including them boot camp and there were some examples of",
    "start": "2860790",
    "end": "2867510"
  },
  {
    "text": "creating actors to conclusion eight two strings of course this is kind of caliber thing but it may give you a",
    "start": "2867510",
    "end": "2873390"
  },
  {
    "text": "wrong impression that you should be creating our actor for some such strong such simple things no you shouldn't you",
    "start": "2873390",
    "end": "2880980"
  },
  {
    "text": "have to have some reasons for creating actors yeah because actors do add some",
    "start": "2880980",
    "end": "2887960"
  },
  {
    "text": "complexity and I think mostly to do with debugging because an actor is",
    "start": "2887960",
    "end": "2893480"
  },
  {
    "text": "asynchronous and it's very small piece of code and you create this large hierarchy so it can be a bit difficult",
    "start": "2893480",
    "end": "2900270"
  },
  {
    "text": "to fit it all in your head but of course you can say that about a long stack also",
    "start": "2900270",
    "end": "2905460"
  },
  {
    "text": "but on the debugging sort of operational side it can be quite difficult sometimes",
    "start": "2905460",
    "end": "2911550"
  },
  {
    "text": "because this stack in every actor is so small that you can't really trace your whole the whole flow if you're not being",
    "start": "2911550",
    "end": "2920250"
  },
  {
    "text": "proactive by doing a lot of logging by doing well Cabala is your friend at",
    "start": "2920250",
    "end": "2926400"
  },
  {
    "text": "least for us by doing some transexual IDs maybe so you start with like a unit",
    "start": "2926400",
    "end": "2935430"
  },
  {
    "text": "of work ID or some kind if you create that of the on the boundary or system that or addy flows through your whole",
    "start": "2935430",
    "end": "2941730"
  },
  {
    "text": "system makes it easier to to look at logs in in in the whole operation of one",
    "start": "2941730",
    "end": "2947610"
  },
  {
    "text": "operation and they are not easily composable a sort of hardcore",
    "start": "2947610",
    "end": "2952950"
  },
  {
    "text": "the next step in the flow is sort of hard-coded in the first actor you can't",
    "start": "2952950",
    "end": "2958560"
  },
  {
    "text": "easily publish library that contains an and actor to the rest of the world of",
    "start": "2958560",
    "end": "2963780"
  },
  {
    "text": "course if active just confuse messages and does certain things you can but let's say actor is communicating with",
    "start": "2963780",
    "end": "2969030"
  },
  {
    "text": "other actors you have to some smart things typical dependency injection to",
    "start": "2969030",
    "end": "2974630"
  },
  {
    "text": "make it more open but extremes initiative actually tries to address this point that's for another talk yeah",
    "start": "2974630",
    "end": "2981839"
  },
  {
    "text": "I mean it really tested so when should",
    "start": "2981839",
    "end": "2987089"
  },
  {
    "text": "you should you use the vector before or define one yeah well as we started in",
    "start": "2987089",
    "end": "2992940"
  },
  {
    "text": "the beginning we showed this evil picture with three creators like thread",
    "start": "2992940",
    "end": "3000859"
  },
  {
    "text": "lock and state and like this year while we have been working with actor model we",
    "start": "3000859",
    "end": "3008300"
  },
  {
    "text": "really focused on all the main tasks we we didn't we didn't actually write a single instance of word thread oh look",
    "start": "3008300",
    "end": "3016160"
  },
  {
    "text": "during this year and that's probably good personal achievement and also",
    "start": "3016160",
    "end": "3021829"
  },
  {
    "text": "actors say they're very good in single way ordered message processing and so if",
    "start": "3021829",
    "end": "3027950"
  },
  {
    "text": "this is something that your system can accommodate that that actors have a",
    "start": "3027950",
    "end": "3033349"
  },
  {
    "text": "friend and also the parallel computation it's it's easy to at least when you're",
    "start": "3033349",
    "end": "3039140"
  },
  {
    "text": "in the prototyping phase you can experiment by splitting jobs into several smaller jobs if you need some",
    "start": "3039140",
    "end": "3046400"
  },
  {
    "text": "sort of high performance type of operation you can split them is very easy to scale up maybe maybe does it",
    "start": "3046400",
    "end": "3052609"
  },
  {
    "text": "make sense with the ten concurrent or maybe a thousand just that's just one line of code to experiment with this and",
    "start": "3052609",
    "end": "3059240"
  },
  {
    "text": "it's very very pleasurable to work with that sort of scalability and state of",
    "start": "3059240",
    "end": "3066470"
  },
  {
    "text": "course you don't get have getters and setters no status it is very nice to not",
    "start": "3066470",
    "end": "3073900"
  },
  {
    "text": "lock down huge collections of tasks that's been very nice so all in all are",
    "start": "3073900",
    "end": "3080440"
  },
  {
    "text": "are we happy with our choice yes right now we're happy we have a cyst",
    "start": "3080440",
    "end": "3085900"
  },
  {
    "text": "them in pre-production it's actually part of it already is in production which showing very good scalability and",
    "start": "3085900",
    "end": "3093339"
  },
  {
    "text": "performance figures the rest of the system is under testing but our",
    "start": "3093339",
    "end": "3100000"
  },
  {
    "text": "impression so far that we have in the system which is will be much better",
    "start": "3100000",
    "end": "3106319"
  },
  {
    "text": "maintainable so in the future probably you will need less consultants like me",
    "start": "3106319",
    "end": "3111670"
  },
  {
    "text": "to work with this stuff so how are we doing this time I think we still have",
    "start": "3111670",
    "end": "3118049"
  },
  {
    "text": "more than five minutes so we will be around during the rest of the conference",
    "start": "3118049",
    "end": "3125799"
  },
  {
    "text": "and you can contact us on Twitter on email party have some questions now can",
    "start": "3125799",
    "end": "3131890"
  },
  {
    "text": "people try to answer them we have a my",
    "start": "3131890",
    "end": "3140170"
  },
  {
    "text": "kick and you could get the mic I can",
    "start": "3140170",
    "end": "3146140"
  },
  {
    "text": "actors have more than one subscriber so you for instance like you pass you pass",
    "start": "3146140",
    "end": "3153069"
  },
  {
    "text": "the message on to the next the next step which does your processing we might also have an active that sends off a",
    "start": "3153069",
    "end": "3158650"
  },
  {
    "text": "notification or something so like a branching yes actors you can you can",
    "start": "3158650",
    "end": "3163779"
  },
  {
    "text": "subscribe to certain missions or certain actors even though actor is sending",
    "start": "3163779",
    "end": "3168789"
  },
  {
    "text": "accident message to to some after you you can subscribe from different places",
    "start": "3168789",
    "end": "3175270"
  },
  {
    "text": "also you have broadcasting possibility with actors another question how do you",
    "start": "3175270",
    "end": "3184960"
  },
  {
    "text": "handle your dependency injection with using actors there's no explicit sort of",
    "start": "3184960",
    "end": "3193660"
  },
  {
    "text": "framework or anything I don't think we we have sort of a which became quite",
    "start": "3193660",
    "end": "3198970"
  },
  {
    "text": "large after hila a sort of a startup function which basically wires up so in",
    "start": "3198970",
    "end": "3206740"
  },
  {
    "text": "a lot of cases you start on the very main or main method function level and",
    "start": "3206740",
    "end": "3212619"
  },
  {
    "text": "you create an actor and then you create the second actor and you just toss it into the",
    "start": "3212619",
    "end": "3218020"
  },
  {
    "text": "next one dr. F so it's kind of sometimes it's referred as poor man dependency",
    "start": "3218020",
    "end": "3224260"
  },
  {
    "text": "injection exemptions that we are not using any dependency injection framework and we considered that we actually",
    "start": "3224260",
    "end": "3230170"
  },
  {
    "text": "didn't need that we have bootstrapper gold that just spins actors and passing",
    "start": "3230170",
    "end": "3238000"
  },
  {
    "text": "them are the actor references of functions that retrieve code or data",
    "start": "3238000",
    "end": "3247270"
  },
  {
    "text": "that is necessary to start this this actor this is how handle we have a few",
    "start": "3247270",
    "end": "3253200"
  },
  {
    "text": "bootstrappers that we execute in the beginning of it and also it's quite",
    "start": "3253200",
    "end": "3258880"
  },
  {
    "text": "testable we use a test kit let me just pass different actives test actors when",
    "start": "3258880",
    "end": "3267100"
  },
  {
    "text": "adjust the system so all our tests are the pure unit tests in memory test no",
    "start": "3267100",
    "end": "3273820"
  },
  {
    "text": "questions left or right for you is there",
    "start": "3273820",
    "end": "3280990"
  },
  {
    "text": "a single server application or do you rent on the cluster observers is the",
    "start": "3280990",
    "end": "3286750"
  },
  {
    "text": "distributed app or a single server app it's just a single serve up in our case there is something called a car cluster",
    "start": "3286750",
    "end": "3294310"
  },
  {
    "text": "so you can or a CO remote actually so there's a commodity of Osaka cluster",
    "start": "3294310",
    "end": "3299530"
  },
  {
    "text": "yeah true can't deploy it to multiple service or say that this this group or",
    "start": "3299530",
    "end": "3305260"
  },
  {
    "text": "actor should be deployed to this servant but not this but in our case I think the",
    "start": "3305260",
    "end": "3310330"
  },
  {
    "text": "just the amount of computation hasn't been great enough to yeah performance",
    "start": "3310330",
    "end": "3317890"
  },
  {
    "text": "wise will we have fun adjusting instance but we already started the testing of",
    "start": "3317890",
    "end": "3324310"
  },
  {
    "text": "our cluster because of failover across their needs because it's not good enough",
    "start": "3324310",
    "end": "3330370"
  },
  {
    "text": "just to have one instance of operation reasons and there is a class of issues released about half a year ago and which",
    "start": "3330370",
    "end": "3340140"
  },
  {
    "text": "supports different scenarios so what we're probably going to use this are called cluster sharding which uses",
    "start": "3340140",
    "end": "3348240"
  },
  {
    "text": "persistent actor so you have single back end and you persist certain actors there and so then nodes can enter and leave",
    "start": "3348240",
    "end": "3356190"
  },
  {
    "text": "the cluster we will also be using so called aqua class a single tone where",
    "start": "3356190",
    "end": "3361260"
  },
  {
    "text": "you actually have just single instance of your server but in a classic environment so if it goes down then",
    "start": "3361260",
    "end": "3367050"
  },
  {
    "text": "another one will be fired up thought that probably transition paths for us because it will require less code",
    "start": "3367050",
    "end": "3374010"
  },
  {
    "text": "changes you started testing is lost yeah yeah we are actually",
    "start": "3374010",
    "end": "3379620"
  },
  {
    "text": "we run some tests last week and Iroquois organization where you have to called",
    "start": "3379620",
    "end": "3385260"
  },
  {
    "text": "innovation days where people can try different things like couple a month and",
    "start": "3385260",
    "end": "3391590"
  },
  {
    "text": "for us was very good opportunity to actually start using our cluster yeah no",
    "start": "3391590",
    "end": "3397500"
  },
  {
    "text": "questions so style with the one server F",
    "start": "3397500",
    "end": "3402750"
  },
  {
    "text": "Shop has actors as well do you mix the two do you replace everything with akka",
    "start": "3402750",
    "end": "3408140"
  },
  {
    "text": "is it is it is it just what's your why did you look at the EF shop kind of a",
    "start": "3408140",
    "end": "3414660"
  },
  {
    "text": "Bach process we looked at the mailbox processor because as you say f-sharp has a built in actor system and I've",
    "start": "3414660",
    "end": "3421680"
  },
  {
    "text": "actually built one smaller project using that and that it's fine it's basically",
    "start": "3421680",
    "end": "3427530"
  },
  {
    "text": "the same thing it's an asynchronous message slips it keeps its own state and everything but it's very limited it is",
    "start": "3427530",
    "end": "3434610"
  },
  {
    "text": "just the raw actor there's no routing there's no supervision there's there's",
    "start": "3434610",
    "end": "3440010"
  },
  {
    "text": "no yeah it's very limiting so he decided to go for a bit more of a framework",
    "start": "3440010",
    "end": "3446550"
  },
  {
    "text": "because we need some of the routing and so on yeah so like we presented four main lessons and three of them included",
    "start": "3446550",
    "end": "3454020"
  },
  {
    "text": "things that you found you won't find in f-sharp mailbox processor with persistent actors routing supervision",
    "start": "3454020",
    "end": "3461910"
  },
  {
    "text": "and in addition occurring mode on our clustering it's not covered by but it works fine so use it for if you have a smallish",
    "start": "3461910",
    "end": "3468450"
  },
  {
    "text": "project and just ease it it's it's fine I've have it in production in a much smaller project and it's I have no",
    "start": "3468450",
    "end": "3475260"
  },
  {
    "text": "issues with it so more questions",
    "start": "3475260",
    "end": "3480330"
  },
  {
    "text": "I guess the time is small this up yeah thank you very much enjoy your meal and",
    "start": "3480330",
    "end": "3486140"
  },
  {
    "text": "the rest of the conference yes [Applause]",
    "start": "3486140",
    "end": "3494580"
  }
]