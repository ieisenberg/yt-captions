[
  {
    "text": "there we go yeah cool all right nice click baity title",
    "start": "7040",
    "end": "12799"
  },
  {
    "text": "right I guess that's why you're all here um hi I'm hanas um I'm going to start",
    "start": "12799",
    "end": "19119"
  },
  {
    "text": "with a small service announcement uh today at 12 well at least between 11:55 and 12:10 the",
    "start": "19119",
    "end": "27279"
  },
  {
    "text": "Norwegian government is going to test there alert system which means that any phone connected to 4G or 5G is going to",
    "start": "27279",
    "end": "34680"
  },
  {
    "text": "sound a siren like alarm and it's going to give you a popup on your screen that you have to swipe away or okay okay so",
    "start": "34680",
    "end": "42640"
  },
  {
    "text": "that's going to happen it's going to happen during this talk okay and I hate being interrupted so if your alarm goes",
    "start": "42640",
    "end": "50760"
  },
  {
    "text": "off you owe me a beer right can we play that game now the thing is we're in",
    "start": "50760",
    "end": "56520"
  },
  {
    "text": "Norway so a beer means you have to remortgage your house so nobody wants that put your phones on airplane mode",
    "start": "56520",
    "end": "63440"
  },
  {
    "text": "turn them completely off um so that we can have this talk in peace thank you so",
    "start": "63440",
    "end": "68840"
  },
  {
    "text": "much oh I I don't think I've turned mine off actually so let's do",
    "start": "68840",
    "end": "75040"
  },
  {
    "text": "that there we go um so",
    "start": "75040",
    "end": "81040"
  },
  {
    "text": "clickbait clickbait is content with the only purpose of making you follow a link",
    "start": "81040",
    "end": "87560"
  },
  {
    "text": "so that they can get more ad Revenue Vue on their website right you came to a",
    "start": "87560",
    "end": "93119"
  },
  {
    "text": "clickbait talk now what does clickbait usually say about the content the",
    "start": "93119",
    "end": "98759"
  },
  {
    "text": "content isn't all that shocking it's a total waste of time which means you have",
    "start": "98759",
    "end": "103880"
  },
  {
    "text": "been warned you can still walk out and go to another talk so let's go I'm hanis um I have",
    "start": "103880",
    "end": "110560"
  },
  {
    "text": "three beautiful children and I recently got engaged to my partner of 18 years um",
    "start": "110560",
    "end": "117280"
  },
  {
    "text": "I am the League coachnet access which basically means Hannas does whatever he wants um and I have been a net backend",
    "start": "117280",
    "end": "124920"
  },
  {
    "text": "developer for a very long time I play with Dylan Bey and the line Breakers those of you who don't know what that is",
    "start": "124920",
    "end": "131560"
  },
  {
    "text": "in this venue tomorrow evening our horn player is sitting right here as well and I get some Community",
    "start": "131560",
    "end": "138640"
  },
  {
    "text": "recognitions from Microsoft and and service bus now I have a plan for today and I",
    "start": "138640",
    "end": "145160"
  },
  {
    "text": "have to say I am scared shitless I've never done a live coding talk before at",
    "start": "145160",
    "end": "151480"
  },
  {
    "text": "a conference um but that's what today is going to be so first of all I'm going to",
    "start": "151480",
    "end": "157080"
  },
  {
    "text": "present you 10 features that Ned framework has that are either semi-",
    "start": "157080",
    "end": "162599"
  },
  {
    "text": "recent or really surprising um and I will tell you what they do without showing you",
    "start": "162599",
    "end": "168879"
  },
  {
    "text": "code and then I will allow you to vote you can take out your phones oh man that",
    "start": "168879",
    "end": "175040"
  },
  {
    "text": "if that coincides with the alarm that's going to be interesting I I only just realized that that may be a problem",
    "start": "175040",
    "end": "181159"
  },
  {
    "text": "um but you can scan a QR code and vote for the ones that you want to see the most and then I will work my way down",
    "start": "181159",
    "end": "187799"
  },
  {
    "text": "the list until the time is up and then we all get lunch which means that um you",
    "start": "187799",
    "end": "196000"
  },
  {
    "text": "have to stay awake through this part until the vote during the coding you can take your nap and then there is lunch",
    "start": "196000",
    "end": "202280"
  },
  {
    "text": "right that's the plan so here we go I have 10 in no particular order and I'm just going to",
    "start": "202280",
    "end": "209799"
  },
  {
    "text": "tell you what they do you listen it's just a a bunch of handdrawn slides and if you think that that is interesting",
    "start": "209799",
    "end": "216120"
  },
  {
    "text": "you remember it and you vote for it when we get to the end of the 10 features so on the code side we often",
    "start": "216120",
    "end": "224519"
  },
  {
    "text": "have more complex models than just a dto so what I've done is on the left",
    "start": "224519",
    "end": "230959"
  },
  {
    "text": "I've put all the things that happen in the C code on the right I've put all the stuff that happens in the database now",
    "start": "230959",
    "end": "236879"
  },
  {
    "text": "what we have is we often have nested classes and a lot of nested models and",
    "start": "236879",
    "end": "242720"
  },
  {
    "text": "if we start putting that into a database and we don't do any configuration that all becomes Separate Tables and it's",
    "start": "242720",
    "end": "248920"
  },
  {
    "text": "very complex you have to do a lot of joints now we had own types for a while in EF core uh but behind the scenes",
    "start": "248920",
    "end": "256359"
  },
  {
    "text": "Entity framework still reasons about own types as having an ID and it has a whole bunch of implications in runtime now in",
    "start": "256359",
    "end": "264040"
  },
  {
    "text": "the last version of EF core what we have gotten is the ability to do those own",
    "start": "264040",
    "end": "269800"
  },
  {
    "text": "types but behind the scenes they are no longer defined by an identifier they're defined by their values which makes it a",
    "start": "269800",
    "end": "276240"
  },
  {
    "text": "lot easier to map things like value types in your domain so that's a pretty nifty feature",
    "start": "276240",
    "end": "283440"
  },
  {
    "text": "so we can take out a part of our model and just push that into a bunch of columns in the same table you won't have",
    "start": "283440",
    "end": "289520"
  },
  {
    "text": "to do any joints it's going to be much faster also behind the scenes there is no ID nanigans going on",
    "start": "289520",
    "end": "296199"
  },
  {
    "text": "right value type properties many to many relationships it's something we often have to do right",
    "start": "296199",
    "end": "303560"
  },
  {
    "text": "and if you don't know how to model them um what you have is you can have many of",
    "start": "303560",
    "end": "308840"
  },
  {
    "text": "entity two for entity one and the other way around if you model this in your database what you'll have is you'll have",
    "start": "308840",
    "end": "314440"
  },
  {
    "text": "your two tables with a primary key and you will make a join table and that join",
    "start": "314440",
    "end": "319600"
  },
  {
    "text": "table has two foreign Keys pointing at the two for the two primary keys of our",
    "start": "319600",
    "end": "324960"
  },
  {
    "text": "two tables um and that combined will be the primary key of that join table and",
    "start": "324960",
    "end": "331400"
  },
  {
    "text": "that's how we Define that many to many relationship because we can only link each entity to each entity",
    "start": "331400",
    "end": "337360"
  },
  {
    "text": "once now we can do the same thing in Entity framework you can have the two entities and you can have like a joint",
    "start": "337360",
    "end": "344400"
  },
  {
    "text": "entity in between but what's the fun in that what I want is to have two",
    "start": "344400",
    "end": "349759"
  },
  {
    "text": "collections in my two entities and I don't want to see that join table in my model I just want them to point straight",
    "start": "349759",
    "end": "356400"
  },
  {
    "text": "at each other in code because that's much easier to reason about it represents the intent of what what I'm",
    "start": "356400",
    "end": "362800"
  },
  {
    "text": "doing a lot better and I'm not seeing that join uh entity so I don't also also",
    "start": "362800",
    "end": "368319"
  },
  {
    "text": "have to do includes that are two levels deep it's a great feature and you can do",
    "start": "368319",
    "end": "374440"
  },
  {
    "text": "this um perfectly with ef core and then hierarchies hierarchies",
    "start": "374440",
    "end": "380280"
  },
  {
    "text": "are amazing um we often model things that look like this like a tree of data",
    "start": "380280",
    "end": "386240"
  },
  {
    "text": "right um and if you don't know about this feature you will probably end up modeling it like like this you will have",
    "start": "386240",
    "end": "394360"
  },
  {
    "text": "a foreign key in your table that points at it at its own primary key it points at its parent and that way you can model",
    "start": "394360",
    "end": "401680"
  },
  {
    "text": "that entire tree in your code but the problem with that is if you",
    "start": "401680",
    "end": "406960"
  },
  {
    "text": "have to do complex queries like get all the descendants for a certain item that",
    "start": "406960",
    "end": "412599"
  },
  {
    "text": "becomes pretty annoying now SQL server has a feature for this it has a feature",
    "start": "412599",
    "end": "418840"
  },
  {
    "text": "called Hier ID it's a feature of SQL Server where you can basically have your hierarchy location in a single field and",
    "start": "418840",
    "end": "426879"
  },
  {
    "text": "that allows you to do way more complex queries so that when we do this with na",
    "start": "426879",
    "end": "431919"
  },
  {
    "text": "framework we can have a a query that says hey give me all the descendants of this one tree item or give me all the",
    "start": "431919",
    "end": "439120"
  },
  {
    "text": "parents that go up the tree from a certain location that sort of queries is a sort of queries you can do with",
    "start": "439120",
    "end": "445440"
  },
  {
    "text": "hierarchy IDs and in your tree structures that is a lot lot more efficient to work with than it would be",
    "start": "445440",
    "end": "452639"
  },
  {
    "text": "to have that self- referencing forign key um so that's that got introduced",
    "start": "452639",
    "end": "458479"
  },
  {
    "text": "semi recently and that is I think a very Nifty feature when you are modeling this type of structures in your",
    "start": "458479",
    "end": "465560"
  },
  {
    "text": "data now we've all had Dapper for a very long time running raw SQL queries so",
    "start": "465560",
    "end": "471560"
  },
  {
    "text": "what we want to do is we have this string literal that we push some parameters into and then we run that on",
    "start": "471560",
    "end": "478039"
  },
  {
    "text": "the database and that match Ally rematerialize as objects when we run it",
    "start": "478039",
    "end": "484759"
  },
  {
    "text": "and basically all Entity framework has done it has stolen that idea from Dapper right first version was a little bit",
    "start": "484759",
    "end": "491039"
  },
  {
    "text": "slower than Dapper we're getting pretty close at the moment so basically what you're what you're able to do is you can",
    "start": "491039",
    "end": "496680"
  },
  {
    "text": "run your SQL query literal against a DB context execute it on your database and",
    "start": "496680",
    "end": "503000"
  },
  {
    "text": "return a bunch of bunch of objects to your codee very Nifty for those situations",
    "start": "503000",
    "end": "509280"
  },
  {
    "text": "where where you have a query that is either too complex to express in link or where you want to use SQL Server",
    "start": "509280",
    "end": "516200"
  },
  {
    "text": "specific functionality in your query that you cannot properly Express and Link",
    "start": "516200",
    "end": "521919"
  },
  {
    "text": "either sometimes it's a performance issue if you don't want any parsing on the link to happen and you don't want",
    "start": "521919",
    "end": "527760"
  },
  {
    "text": "any change tracking to happen this can also be a way to do it but there are other ways to get that behavior in enity",
    "start": "527760",
    "end": "533200"
  },
  {
    "text": "framework as as well similar to the first one that that",
    "start": "533200",
    "end": "539600"
  },
  {
    "text": "I explained you sometimes want to just push a more complex field into a Jason",
    "start": "539600",
    "end": "547320"
  },
  {
    "text": "colum instead of just pushing it in to a whole bunch of separate fields in your database so what you can do is in your",
    "start": "547320",
    "end": "554240"
  },
  {
    "text": "table this is my record I want to put that nested object into just a field",
    "start": "554240",
    "end": "560360"
  },
  {
    "text": "that is represented as Json this is Nifty for those situations where um it",
    "start": "560360",
    "end": "566760"
  },
  {
    "text": "is actually really complex and nested and it would end up being a lot of fields or it's hard to represent because",
    "start": "566760",
    "end": "572920"
  },
  {
    "text": "there are collections in there and if you want to do collections with own types you will end up with join tables",
    "start": "572920",
    "end": "579279"
  },
  {
    "text": "and so on but in Jason you won't have to in Jason you can say okay put all of this into that Jason column and then you",
    "start": "579279",
    "end": "585920"
  },
  {
    "text": "have your whole collection of nested data in a single string in your database",
    "start": "585920",
    "end": "592360"
  },
  {
    "text": "fantastic now one of the performance issues that you may run into when you're using NTI framework is how queries are",
    "start": "592360",
    "end": "601200"
  },
  {
    "text": "batched towards the database and I don't know if you know this but when you have a DB context um that part you probably",
    "start": "601200",
    "end": "608959"
  },
  {
    "text": "know it acts as a unit of work and you are qu you're queuing a bunch of statements that need to get executed as",
    "start": "608959",
    "end": "615480"
  },
  {
    "text": "soon as you hit the safe changes and as soon as you hit the safe changes all of those statements are executed in a",
    "start": "615480",
    "end": "622040"
  },
  {
    "text": "single transaction so you get nice consistency but it could end up being a",
    "start": "622040",
    "end": "627079"
  },
  {
    "text": "lot of round trips to your database and round trips are expensive you're going over the network you're going to another",
    "start": "627079",
    "end": "632480"
  },
  {
    "text": "system right um so that could be painful for performance so what Entity framework",
    "start": "632480",
    "end": "638600"
  },
  {
    "text": "does behind the scenes it takes batches it takes a whole batch of queries that",
    "start": "638600",
    "end": "643639"
  },
  {
    "text": "happen in one go and it sends all those statements in one roundt trip to the database and you have control over that",
    "start": "643639",
    "end": "649880"
  },
  {
    "text": "batch size if you want to fun fact the default B batch size is 42 there's",
    "start": "649880",
    "end": "656000"
  },
  {
    "text": "reason reasons for that I will tell you those reasons if you pick this one now inheritance is probably one of",
    "start": "656000",
    "end": "664440"
  },
  {
    "text": "my favorite enti framework features and it has been there for a long time this is nothing new um but if you have",
    "start": "664440",
    "end": "671880"
  },
  {
    "text": "inheritance in your code you have a parent entity and then you have a couple of inheriting entities that um and you",
    "start": "671880",
    "end": "679560"
  },
  {
    "text": "go further down the tree and on the database side there are a couple of ways of modeling this you can either take the",
    "start": "679560",
    "end": "687639"
  },
  {
    "text": "default way of doing this and that is just have one big table for all of the fields that means that you're going to",
    "start": "687639",
    "end": "693839"
  },
  {
    "text": "put the parent Fields next to the child fields and they all go into the same table with a single primary key and you",
    "start": "693839",
    "end": "700399"
  },
  {
    "text": "will have one column that is the discriminator which tells you which type of data is in that particular record so",
    "start": "700399",
    "end": "709000"
  },
  {
    "text": "Entity framework queries this table and it looks at the discriminator and that tells you what it should deserialize",
    "start": "709000",
    "end": "714480"
  },
  {
    "text": "this row as so that means that if you have a vehicle table that could tell you",
    "start": "714480",
    "end": "720079"
  },
  {
    "text": "that a car should be coming out or a boat should be coming out and it will actually pick those properties that it needs to give you back the correct type",
    "start": "720079",
    "end": "727920"
  },
  {
    "text": "and that saves you a whole lot of hassle because you can have a single DB set for the parent entity and you get the",
    "start": "727920",
    "end": "734360"
  },
  {
    "text": "correct runtime types back when you query data now table per hierarchy is what",
    "start": "734360",
    "end": "740600"
  },
  {
    "text": "this one is called it's not the only way of mapping this in the database there are other strategies as well you can do",
    "start": "740600",
    "end": "747199"
  },
  {
    "text": "table per type table type means I have one table for the parent entity and then",
    "start": "747199",
    "end": "753040"
  },
  {
    "text": "further down the tree we get tables for each child entity and each child entity has a primary key that is also a forign",
    "start": "753040",
    "end": "760240"
  },
  {
    "text": "key that points up towards the parent which means that all the parent Fields",
    "start": "760240",
    "end": "766120"
  },
  {
    "text": "live in the parent table that all the child Fields live in the child tables and everything looks in the database the",
    "start": "766120",
    "end": "772560"
  },
  {
    "text": "same way that it looks in your code it's easy to reason about as a developer the",
    "start": "772560",
    "end": "778279"
  },
  {
    "text": "downside of this is you'll be doing a lot of joins when you're querying this you also don't have a discriminator column so you're joining all the tables",
    "start": "778279",
    "end": "785079"
  },
  {
    "text": "and just looking at where you have records right that's what n framework does for you you don't have to do it",
    "start": "785079",
    "end": "790760"
  },
  {
    "text": "yourself table per type there is a third strategy and that one was only recently brought over from ef6 into EF core um",
    "start": "790760",
    "end": "799880"
  },
  {
    "text": "and that is called table per concrete class you will have a separate table for each um entity but we will repeat the",
    "start": "799880",
    "end": "808880"
  },
  {
    "text": "par parent properties in the child table so that to get a record out of those we don't have to do any",
    "start": "808880",
    "end": "814560"
  },
  {
    "text": "joins um which we only have to Union across those tables so that's a good",
    "start": "814560",
    "end": "820600"
  },
  {
    "text": "thing the bad thing about this is is that you sacrifice something very important because we can get away with",
    "start": "820600",
    "end": "828560"
  },
  {
    "text": "having unique primary Keys across all of those tables by using a sequence on the database s but what we lose is the",
    "start": "828560",
    "end": "836120"
  },
  {
    "text": "ability to have a foreign key point at the correct entity because the entity is",
    "start": "836120",
    "end": "841399"
  },
  {
    "text": "spread across many tables your records may be in the child one table but you want to put a foreign key towards the",
    "start": "841399",
    "end": "848160"
  },
  {
    "text": "parent entity that no longer works right you gain performance you sacrifice",
    "start": "848160",
    "end": "853320"
  },
  {
    "text": "something there is no free lunch right there's lunch after this though and although you will not be paying for it",
    "start": "853320",
    "end": "859560"
  },
  {
    "text": "your employer paid for it so there's that um so you can do all three of these",
    "start": "859560",
    "end": "865480"
  },
  {
    "text": "strategies in Entity framework core um and they have been around for a long",
    "start": "865480",
    "end": "871360"
  },
  {
    "text": "time but they are there now um and we can have them in EF core 8 all three of",
    "start": "871360",
    "end": "876480"
  },
  {
    "text": "them are available and this is a cool feature it's a pre-release feature from EF cord",
    "start": "876480",
    "end": "882519"
  },
  {
    "text": "9 uh but I'm so excited about it I really wanted to put it in this presentation um what Microsoft is",
    "start": "882519",
    "end": "890000"
  },
  {
    "text": "planning to do is you will have One DB context with a bunch of DB sets in it",
    "start": "890000",
    "end": "896360"
  },
  {
    "text": "and you can map your DB sets to separate databases and for now we will only be",
    "start": "896360",
    "end": "902199"
  },
  {
    "text": "able to do that with SQL server but they're planning to bring support to other database engines as well and the",
    "start": "902199",
    "end": "908720"
  },
  {
    "text": "cool thing about this is you will be able to do query and Crut as a normal DB context um you will even be able to do",
    "start": "908720",
    "end": "916199"
  },
  {
    "text": "joints across different databases and this is Microsoft's idea",
    "start": "916199",
    "end": "921279"
  },
  {
    "text": "of the future of polyglot persistance in our projects I'm really excited about it",
    "start": "921279",
    "end": "926519"
  },
  {
    "text": "it's it's very Bare Bones as it is right now but I'm hoping that this will really take off there's going to be some",
    "start": "926519",
    "end": "931839"
  },
  {
    "text": "interesting stuff happening when we get this logical deletes logical deletes is",
    "start": "931839",
    "end": "939079"
  },
  {
    "text": "also something that you can easily map with Entity framework it's not an Entity framework feature but it's something",
    "start": "939079",
    "end": "944880"
  },
  {
    "text": "that we can really put some small things together to make it happen so if we have",
    "start": "944880",
    "end": "951360"
  },
  {
    "text": "a logical delete we have a record there and we want to delete it it normally deletes that record from the",
    "start": "951360",
    "end": "957120"
  },
  {
    "text": "table but instead what if we introduce a deleted column that we set to True when",
    "start": "957120",
    "end": "963199"
  },
  {
    "text": "we actually delete the record um so that it's not really gone from the database but at least through the DB context we",
    "start": "963199",
    "end": "969839"
  },
  {
    "text": "will no longer see it and if we combine a couple of features of n framework core we can easily achieve this Behavior the",
    "start": "969839",
    "end": "977480"
  },
  {
    "text": "features that we will need is first the shadow property because we won't show the deleted field in our model then on",
    "start": "977480",
    "end": "984399"
  },
  {
    "text": "that property will we will put a global query filter to make it happen uh that that we can no longer query the records",
    "start": "984399",
    "end": "991319"
  },
  {
    "text": "that have been deleted then we will have to do uh a safe changes Interceptor to see when we",
    "start": "991319",
    "end": "998680"
  },
  {
    "text": "delete an entity instead we modify it and we set that shadow property to true",
    "start": "998680",
    "end": "1004319"
  },
  {
    "text": "and of course for that we will need the Chang record to see which records have been deleted if you put all these things",
    "start": "1004319",
    "end": "1009920"
  },
  {
    "text": "together you can have logical delete deletes uh without too much hassle in an",
    "start": "1009920",
    "end": "1015000"
  },
  {
    "text": "framework core compile queries um there are some",
    "start": "1015000",
    "end": "1020800"
  },
  {
    "text": "points I mean per the basic performance tuning in Entity framework core is usually looking at how many queries are",
    "start": "1020800",
    "end": "1026798"
  },
  {
    "text": "you executed executing or they hitting the right indexes that sort of stuff but",
    "start": "1026799",
    "end": "1032240"
  },
  {
    "text": "when you've got all of that out of the way and you have code that lives on your hot pad converting your query and the",
    "start": "1032240",
    "end": "1039600"
  },
  {
    "text": "parameters into an actual SQL query can be an overhead that is worth dealing with now what happens when you write a",
    "start": "1039600",
    "end": "1046720"
  },
  {
    "text": "link query that link expression tree gets parsed there is a a tree Walker",
    "start": "1046720",
    "end": "1053440"
  },
  {
    "text": "that actually goes down the entire query and converts the thing into a SQL query",
    "start": "1053440",
    "end": "1059320"
  },
  {
    "text": "and it executes that on the database and then the results that come back get materialized and get given back to the",
    "start": "1059320",
    "end": "1065000"
  },
  {
    "text": "calling code now this parsing step is something that we can do just",
    "start": "1065000",
    "end": "1071520"
  },
  {
    "text": "once with a compiled query we can actually do that we we parse the whole",
    "start": "1071520",
    "end": "1077159"
  },
  {
    "text": "thing and we run it again against every DB context that we want to run it again",
    "start": "1077159",
    "end": "1082440"
  },
  {
    "text": "in the future we can even have parameters for our compiled query but it will not go through the entire idea of",
    "start": "1082440",
    "end": "1090159"
  },
  {
    "text": "this is how this link syntax tree makes it into SQL it becomes a parameterized SQL query behind the scenes and you just",
    "start": "1090159",
    "end": "1097360"
  },
  {
    "text": "pass in the new parameters and the new DB context and it it's ready to go so this can be a performance gain for code",
    "start": "1097360",
    "end": "1104000"
  },
  {
    "text": "that lives on your hot bath also been around for a while",
    "start": "1104000",
    "end": "1109880"
  },
  {
    "text": "and then the last one I think it's the last one I think it's the last one um",
    "start": "1109880",
    "end": "1115120"
  },
  {
    "text": "ntity framework needs three things to work it needs to know what your models look like it needs to know what your",
    "start": "1115120",
    "end": "1121880"
  },
  {
    "text": "code looks like uh well the models in your code look like it needs to know what your database tables look like and",
    "start": "1121880",
    "end": "1127720"
  },
  {
    "text": "it needs to know how to map between those two things and those of you who have been around for a long time remember that that stuff was all in the",
    "start": "1127720",
    "end": "1134520"
  },
  {
    "text": "edmx file right we don't have edmx files anymore for better which is great um but",
    "start": "1134520",
    "end": "1141640"
  },
  {
    "text": "that means that doesn't mean that n framework doesn't need this info anymore n framework still needs that model to do",
    "start": "1141640",
    "end": "1147400"
  },
  {
    "text": "its work which means that if you're developing your first DB context is always really slow it's because and the",
    "start": "1147400",
    "end": "1153880"
  },
  {
    "text": "framework is building that mental model of what the code and the tables look",
    "start": "1153880",
    "end": "1158960"
  },
  {
    "text": "like like and how to map between them and nowadays luckily we feed that info",
    "start": "1158960",
    "end": "1164360"
  },
  {
    "text": "either with conventions in our code or with mapping expressions in um fluid uent API but it still builds that model",
    "start": "1164360",
    "end": "1172559"
  },
  {
    "text": "it's why some developers have the feeling that n framework cor is really slow because as developers what we do is we hit F5 we hit that first",
    "start": "1172559",
    "end": "1181520"
  },
  {
    "text": "initialization who owes me a beer is it time yet",
    "start": "1181520",
    "end": "1187600"
  },
  {
    "text": "yes anybody owe me a beer damn it um so it still needs that mental",
    "start": "1187600",
    "end": "1194080"
  },
  {
    "text": "model but it doesn't need that model at compile time it builds that model at runtime which means that we can",
    "start": "1194080",
    "end": "1201600"
  },
  {
    "text": "influence that model at runtime as well so in theory what you could do is you",
    "start": "1201600",
    "end": "1207400"
  },
  {
    "text": "could have a DB context that has no DB sets and you feed it a bunch of info in",
    "start": "1207400",
    "end": "1212919"
  },
  {
    "text": "the on model creating and you can use that to actually have the all that info",
    "start": "1212919",
    "end": "1219440"
  },
  {
    "text": "in the mental model that the DB context is going to use so it will know about the tables it will look know about the",
    "start": "1219440",
    "end": "1225320"
  },
  {
    "text": "code and we can actually use that to do stuff with a DB context even though we don't have DB sets because it derives",
    "start": "1225320",
    "end": "1232120"
  },
  {
    "text": "the DB schema from the stuff that you give it which means that we can save entities and query entities and all that",
    "start": "1232120",
    "end": "1239080"
  },
  {
    "text": "without even having a single DB set in our DB context right and I don't",
    "start": "1239080",
    "end": "1245320"
  },
  {
    "text": "recommend using ND framework core this way but it does come in handy when",
    "start": "1245320",
    "end": "1251760"
  },
  {
    "text": "you're doing flexible stuff where you need to tell it about inherited um",
    "start": "1251760",
    "end": "1256799"
  },
  {
    "text": "entities that live in plugins for for instance I mean in those scenarios you could have a use for this type of",
    "start": "1256799",
    "end": "1262720"
  },
  {
    "text": "functionality and I just want to make you aware of how Entity framework builds that",
    "start": "1262720",
    "end": "1268440"
  },
  {
    "text": "model and I'm I'm really scared now because we're getting to the voting part",
    "start": "1268440",
    "end": "1273640"
  },
  {
    "text": "and it is around the time where all the alarms are going off but but you're going to need your network connection to do this now there is a Twist there is a",
    "start": "1273640",
    "end": "1281000"
  },
  {
    "text": "Twist I have presented 11 things and one of them is fake right so we're gonna",
    "start": "1281000",
    "end": "1287480"
  },
  {
    "text": "play another game apart from the beer game because I've lost that and I want to win",
    "start": "1287480",
    "end": "1293200"
  },
  {
    "text": "um I will code the things in order that you vote them but if I make my way to",
    "start": "1293200",
    "end": "1299679"
  },
  {
    "text": "the fake one I win right so don't vote for the one that you",
    "start": "1299679",
    "end": "1305080"
  },
  {
    "text": "think is fake that is the whole thing um I will tell you at the end which one the",
    "start": "1305080",
    "end": "1311640"
  },
  {
    "text": "fake one is um if you scan that QR code you should be able to vote you can just",
    "start": "1311640",
    "end": "1317440"
  },
  {
    "text": "drag some items up and when you're done and you have them in the order that you care about you can press submit and we",
    "start": "1317440",
    "end": "1324679"
  },
  {
    "text": "should hopefully see the slight move as we",
    "start": "1324679",
    "end": "1330240"
  },
  {
    "text": "go oh that's good we have participants ranking that is",
    "start": "1330600",
    "end": "1336240"
  },
  {
    "text": "um Jason columns right you can vote for more than one by the way you can drag up",
    "start": "1338159",
    "end": "1343880"
  },
  {
    "text": "as many as you want for",
    "start": "1343880",
    "end": "1351520"
  },
  {
    "text": "okay that seems to be stabilizing there's 21 people still",
    "start": "1386320",
    "end": "1392600"
  },
  {
    "text": "ranking I'm going to let that get down to five or something and then uh then we'll get going",
    "start": "1392600",
    "end": "1400120"
  },
  {
    "text": "there's new people coming in",
    "start": "1410880",
    "end": "1414880"
  },
  {
    "text": "no this is actually a great way for me to count my audience that's that's like more than 150 people in this room thank",
    "start": "1417400",
    "end": "1423960"
  },
  {
    "text": "you so much for coming I'm going to take a picture so I know which order we we have to do them in I'm not sure if I can",
    "start": "1423960",
    "end": "1430760"
  },
  {
    "text": "get back um I I will keep the voting open um and this is scary part this is",
    "start": "1430760",
    "end": "1436600"
  },
  {
    "text": "the first ever conference talk talk where I do line uh where I do live coding and it's the first conference I'm",
    "start": "1436600",
    "end": "1444000"
  },
  {
    "text": "doing it at so let's see what happens right um I am prepared though so should",
    "start": "1444000",
    "end": "1450799"
  },
  {
    "text": "be fine should be fine um here we go I have a solution with all of the",
    "start": "1450799",
    "end": "1457880"
  },
  {
    "text": "demos um I'll take a look at what was top of the line and that was Jason",
    "start": "1457880",
    "end": "1463360"
  },
  {
    "text": "columns right okay the Jason columns demo um I can already tell you that was",
    "start": "1463360",
    "end": "1468760"
  },
  {
    "text": "not the fake one so that's good um you did good did you vote safely and you",
    "start": "1468760",
    "end": "1475440"
  },
  {
    "text": "don't care about Jason columns but you're sure that that is something that exists is that the game you're playing",
    "start": "1475440",
    "end": "1481000"
  },
  {
    "text": "could be right um okay cool what we have here is I've made a DB context and wow",
    "start": "1481000",
    "end": "1489520"
  },
  {
    "text": "this is so annoying thank you Norwegian government",
    "start": "1489520",
    "end": "1496760"
  },
  {
    "text": "I reckon the government owes me a beer right I can just walk into Vin monopolet and ask for one or how does that",
    "start": "1496760",
    "end": "1503440"
  },
  {
    "text": "work um so what I did here is um I have a um shipment and my shipment has a",
    "start": "1503440",
    "end": "1511200"
  },
  {
    "text": "shipping label and my shipping label has a shipping address so I'm nested a few",
    "start": "1511200",
    "end": "1516240"
  },
  {
    "text": "levels deep right to represent really what the use would be of doing um one of",
    "start": "1516240",
    "end": "1521559"
  },
  {
    "text": "those Jason columns um and all the all the mapping I have done for now is m it",
    "start": "1521559",
    "end": "1528679"
  },
  {
    "text": "all as owned types right um owns one owns one um and for now if I run this code",
    "start": "1528679",
    "end": "1538159"
  },
  {
    "text": "what I've done in my program.cs this is going to be the same for all demos so you know a little bit what's going on",
    "start": "1538159",
    "end": "1543399"
  },
  {
    "text": "and first I call recreate database and that just doesn't ensure delete it ensure create it it throws away my",
    "start": "1543399",
    "end": "1549039"
  },
  {
    "text": "entire schema so when I change things we will be able to see the changes in the database um this is my cue to also fire",
    "start": "1549039",
    "end": "1556679"
  },
  {
    "text": "up SS SMS right there we go um so I recreate the database and",
    "start": "1556679",
    "end": "1562679"
  },
  {
    "text": "then I'm able to create DB contexts with the correct DB context parameters that just goes on be uh in a function below",
    "start": "1562679",
    "end": "1569760"
  },
  {
    "text": "it doesn't do anything fancy do not recover I don't need any of that there we go",
    "start": "1569760",
    "end": "1576240"
  },
  {
    "text": "so um what I have now I'm just adding a shipment with all the data that's all",
    "start": "1576240",
    "end": "1582840"
  },
  {
    "text": "I'm doing and I'm calling safe changes so if I now run this and I run Json columns we should be able to go and take",
    "start": "1582840",
    "end": "1589000"
  },
  {
    "text": "a look in our database what we are getting um that one was demo",
    "start": "1589000",
    "end": "1596720"
  },
  {
    "text": "number five okay that's good so we should look at dat database five I did prepare you know um so I get",
    "start": "1596720",
    "end": "1605080"
  },
  {
    "text": "a shipment stable but it has a lot of columns right",
    "start": "1605080",
    "end": "1610559"
  },
  {
    "text": "um I should be doing this I learned about that this week so what we get",
    "start": "1610559",
    "end": "1616200"
  },
  {
    "text": "here is we get the shipping label fields and then we get another level down for",
    "start": "1616200",
    "end": "1621440"
  },
  {
    "text": "the shipping address if we were to do this this with something that has a collection then we would get a second",
    "start": "1621440",
    "end": "1627159"
  },
  {
    "text": "table for it with the own t types and so on it gets a little bit messy and the",
    "start": "1627159",
    "end": "1632600"
  },
  {
    "text": "shape of that structure may change from time to time so maybe I just want to dump it in a chasing column and be done",
    "start": "1632600",
    "end": "1638240"
  },
  {
    "text": "with it now that is exactly what we will be doing um I should be able to go back out",
    "start": "1638240",
    "end": "1646840"
  },
  {
    "text": "yeah okay cheat sheat come",
    "start": "1646840",
    "end": "1653760"
  },
  {
    "text": "on ah oh yeah I changed this for line breaker",
    "start": "1655720",
    "end": "1663120"
  },
  {
    "text": "friends this is also the iPad that we use to control our digital mixer now",
    "start": "1663320",
    "end": "1669159"
  },
  {
    "text": "when you want to do Jason columns you still go into the owns one uh syntax so",
    "start": "1669159",
    "end": "1676200"
  },
  {
    "text": "this remains an owns one but the shipping label here is the only one we care about we don't need this",
    "start": "1676200",
    "end": "1682799"
  },
  {
    "text": "line anymore that will be implied because it is a property on our shipping label now the way that that works is",
    "start": "1682799",
    "end": "1689640"
  },
  {
    "text": "there is a second parameter that we can pass into that owns one and that is our",
    "start": "1689640",
    "end": "1695559"
  },
  {
    "text": "um Builder to actually Define how that owns one relationship is constructed in",
    "start": "1695559",
    "end": "1700880"
  },
  {
    "text": "the database so what I should be able to do it's called the owned navigation",
    "start": "1700880",
    "end": "1706640"
  },
  {
    "text": "Builder um gation Builder I should be able to use",
    "start": "1706640",
    "end": "1713720"
  },
  {
    "text": "that one to configure my thing the way that I want to have it and actually the",
    "start": "1713720",
    "end": "1719679"
  },
  {
    "text": "easy part about it is the first thing I will have to do is I will have to use that Builder H can I get rid of that",
    "start": "1719679",
    "end": "1726960"
  },
  {
    "text": "yeah and I can just say to Json it's simple as that and that tells it that",
    "start": "1726960",
    "end": "1732720"
  },
  {
    "text": "this own type should be dumped into adjacent column instead of dumping it into a whole bunch of separate fields",
    "start": "1732720",
    "end": "1738799"
  },
  {
    "text": "and possibly even additional tables now the other thing we will have to do",
    "start": "1738799",
    "end": "1745200"
  },
  {
    "text": "is as soon as we now have those nested properties we don't put them at the top level anymore we have to put them into",
    "start": "1745200",
    "end": "1751559"
  },
  {
    "text": "this navigation Builder hey Art how are you doing one of the best photographers in",
    "start": "1751559",
    "end": "1758159"
  },
  {
    "text": "the whole conference circuit in the world really um so we have to tell it here",
    "start": "1758159",
    "end": "1765880"
  },
  {
    "text": "that it owns another type so we do the owns one here and as you can see you have Syntax for owns one and owns many",
    "start": "1765880",
    "end": "1772600"
  },
  {
    "text": "down this so if you have a nested collection and you want that to go along into your Json column this is where you",
    "start": "1772600",
    "end": "1778840"
  },
  {
    "text": "map that um so here I can just say label label Dot and then I can do my",
    "start": "1778840",
    "end": "1787399"
  },
  {
    "text": "shipping address right there we go now this should be it this should be the entire mapping that I need to actually",
    "start": "1787399",
    "end": "1793799"
  },
  {
    "text": "put everything into Jason so if we now run this again we should should be able to open our database instead of all of",
    "start": "1793799",
    "end": "1800399"
  },
  {
    "text": "those fields we will see one column and it should have oh what did I do requires the primary key to be",
    "start": "1800399",
    "end": "1807919"
  },
  {
    "text": "defined defined oh yeah it has no key but that",
    "start": "1807919",
    "end": "1813640"
  },
  {
    "text": "that should be fine oh did I have oh that is that is my",
    "start": "1813640",
    "end": "1820159"
  },
  {
    "text": "problem then thank you for thinking along that is that's great this this",
    "start": "1820159",
    "end": "1825279"
  },
  {
    "text": "should be own's one and then that should solve that um talking and typing at the same time",
    "start": "1825279",
    "end": "1832840"
  },
  {
    "text": "yes it worked though so if we go and look here now and we refresh the columns",
    "start": "1832840",
    "end": "1838679"
  },
  {
    "text": "we see that we now have shipping label which is a vard Max we can still control the size I mean don't worry about that",
    "start": "1838679",
    "end": "1843880"
  },
  {
    "text": "you can still do all the mapping on it the same way that you would do um on a normal on a normal uh",
    "start": "1843880",
    "end": "1850640"
  },
  {
    "text": "property if I now select this and we take a look at what we get um this",
    "start": "1850640",
    "end": "1856399"
  },
  {
    "text": "actually um I'm not sure I'm just going to copy this and put it into a notepad or something uh so we can",
    "start": "1856399",
    "end": "1863600"
  },
  {
    "text": "see what is actually sto stored in there what we get is indeed our can I",
    "start": "1863600",
    "end": "1870519"
  },
  {
    "text": "increase the font size I probably can there we go so we get we get our tracking code we get our shipper",
    "start": "1870519",
    "end": "1876919"
  },
  {
    "text": "shipping address which is nicely nested no this is not my home address by the way it is our company's address um so",
    "start": "1876919",
    "end": "1885039"
  },
  {
    "text": "all of it is in there in a nice Chason document and it will also fetch that as a nice Jason document when you're",
    "start": "1885039",
    "end": "1891000"
  },
  {
    "text": "fetching this entity and because it is an own type it will always be a fetched along with the parent entity right so",
    "start": "1891000",
    "end": "1899440"
  },
  {
    "text": "that's chasing columns that's one down right and we have time but I I am fully aware that I'm standing between you and",
    "start": "1899440",
    "end": "1905840"
  },
  {
    "text": "lunch so I will try not to run over time here okay um so the second one let me",
    "start": "1905840",
    "end": "1911519"
  },
  {
    "text": "look at my phone what was that um",
    "start": "1911519",
    "end": "1917480"
  },
  {
    "text": "I that was many to many wasn't it no hierarchical IDs oh that's a fun one I love that one it's uh it's new it's also",
    "start": "1924399",
    "end": "1932200"
  },
  {
    "text": "not the fake one yay so we have hierarchical IDs and I've",
    "start": "1932200",
    "end": "1937320"
  },
  {
    "text": "prepared something and and I know that you are all a bunch of nerds just like me so I think you will appreciate the",
    "start": "1937320",
    "end": "1943919"
  },
  {
    "text": "domain and I've and I've not invented this it is also the the demo that microsof uses to to actually do this um",
    "start": "1943919",
    "end": "1951159"
  },
  {
    "text": "the demo is with Hobbits um so what I'm doing here is I have all my halflings I",
    "start": "1951159",
    "end": "1957639"
  },
  {
    "text": "have the entire halfling family tree um and I just make a single DB",
    "start": "1957639",
    "end": "1963600"
  },
  {
    "text": "set and the hierarchy ID is actually the hierarch hierarchy from the original",
    "start": "1963600",
    "end": "1969320"
  },
  {
    "text": "patriarch so the original top level node of my entire tree and then that ID gets",
    "start": "1969320",
    "end": "1976559"
  },
  {
    "text": "defined now it Bec comes more clear if I show you um I have a link here should be",
    "start": "1976559",
    "end": "1982639"
  },
  {
    "text": "there um because in the recreate data base I'm actually inserting all of the halflings um but to show you what's",
    "start": "1982639",
    "end": "1989720"
  },
  {
    "text": "going on I should be able to open that so we have this entire tree and you can see the IDS on this so you have a b BOS",
    "start": "1989720",
    "end": "1997960"
  },
  {
    "text": "at the top of the whole thing he is the root halfling right and then we have the the second level you get slash one slash",
    "start": "1997960",
    "end": "2005760"
  },
  {
    "text": "and and two and three and four and five and we the further down the tree tree we go the more nodes are added to the ID",
    "start": "2005760",
    "end": "2014360"
  },
  {
    "text": "and the advantage of doing all of this is that you can do queries on the ID and get the part of the tree that you're",
    "start": "2014360",
    "end": "2020000"
  },
  {
    "text": "interested in compared to the node where you are which is a lot more powerful than having that key",
    "start": "2020000",
    "end": "2027559"
  },
  {
    "text": "now the way that this will work because I've already inserted the data and I'm going to show you the bids that you need",
    "start": "2027559",
    "end": "2033240"
  },
  {
    "text": "to do it yourself but this would have been way too much to life code so I've prepared it um but we will still do some",
    "start": "2033240",
    "end": "2039039"
  },
  {
    "text": "live coding with this so um hierar hierarchy ID is something that comes out",
    "start": "2039039",
    "end": "2044240"
  },
  {
    "text": "of an Entity framework core package that actually enables this so the hierarchy",
    "start": "2044240",
    "end": "2049800"
  },
  {
    "text": "ID is living in the SQL Server uh. hierarchy ID package so if you want to",
    "start": "2049800",
    "end": "2057040"
  },
  {
    "text": "use SQL servers hierarchy ID features you need to enable that package and that gives you this class and hierarchy ID",
    "start": "2057040",
    "end": "2063520"
  },
  {
    "text": "can just parse from um from a string and",
    "start": "2063520",
    "end": "2068560"
  },
  {
    "text": "then it will be able to deal with that if we put it into our database that comes an actual hierarchy ID column now",
    "start": "2068560",
    "end": "2075240"
  },
  {
    "text": "if we insert all of these halflings um that gives us a database that we can play with so for now I'm",
    "start": "2075240",
    "end": "2082520"
  },
  {
    "text": "just going to print them all out to show that this works and to show that we can take a look at the database and then I",
    "start": "2082520",
    "end": "2087800"
  },
  {
    "text": "will show you a little bit how you can query this and why this is way more fun than having self-referencing primary",
    "start": "2087800",
    "end": "2094118"
  },
  {
    "text": "keys so for it is my startup project ready so it should be good um and of",
    "start": "2094119",
    "end": "2103000"
  },
  {
    "text": "course the entity type hierarchy what did I do",
    "start": "2103000",
    "end": "2108520"
  },
  {
    "text": "wrong The Entity type hierarchy ID requires a primary key to be",
    "start": "2108520",
    "end": "2114400"
  },
  {
    "text": "defined",
    "start": "2114400",
    "end": "2117400"
  },
  {
    "text": "yay that should work oh no it it should not work I know why it's not working okay um",
    "start": "2120040",
    "end": "2127920"
  },
  {
    "text": "hierarchy IDs need to be enabled on the DB context so I need to go uh down here",
    "start": "2127920",
    "end": "2134320"
  },
  {
    "text": "and when you do the use SQL Server that is where we enable the hierarchy ID so when we do our connection string we can",
    "start": "2134320",
    "end": "2141200"
  },
  {
    "text": "basically use again uh some kind of options Builder and on the options on",
    "start": "2141200",
    "end": "2146400"
  },
  {
    "text": "SQL Server I was scared for a second um I can do",
    "start": "2146400",
    "end": "2152119"
  },
  {
    "text": "options. use uh hierarchy ID which will enable the feature for my my BB",
    "start": "2152119",
    "end": "2158560"
  },
  {
    "text": "context and I'm just going to rerun and see what happens and that should solve my problem",
    "start": "2158560",
    "end": "2164760"
  },
  {
    "text": "and I should have my hofling in my database that looks way better um so that was database number three it should",
    "start": "2164760",
    "end": "2171800"
  },
  {
    "text": "print them all out by the way but it's inserting a lot maybe I should control the batch size right um so they're all",
    "start": "2171800",
    "end": "2180319"
  },
  {
    "text": "there and I can take a look at that database and see what we have gotten so",
    "start": "2180319",
    "end": "2187440"
  },
  {
    "text": "uh um this is the one and I have my halflings there and",
    "start": "2187440",
    "end": "2192560"
  },
  {
    "text": "the columns that we're getting is um let me get the magnifier again so the",
    "start": "2192560",
    "end": "2197680"
  },
  {
    "text": "columns that we're getting is we get an ID we get the Pat from patriarch and you can clearly see that we have the",
    "start": "2197680",
    "end": "2203280"
  },
  {
    "text": "hierarchy ID there right um and then the name and the year of bird as",
    "start": "2203280",
    "end": "2208319"
  },
  {
    "text": "expected now what that looks like if I select all the rows um they are stored",
    "start": "2208319",
    "end": "2215319"
  },
  {
    "text": "in SQL server in a different format than the one that we're seeing in code it does not really matter you do see the",
    "start": "2215319",
    "end": "2221280"
  },
  {
    "text": "nodes get longer as we go further down and that means that we're adding additional um additional bytes to define",
    "start": "2221280",
    "end": "2228119"
  },
  {
    "text": "the IDS right so the IDS are there um so this works now how can we query this why is",
    "start": "2228119",
    "end": "2235319"
  },
  {
    "text": "this interesting well Bosco lives somewhere Midway in the",
    "start": "2235319",
    "end": "2240880"
  },
  {
    "text": "tree on the third level so that means that from him we can go down or we can go up um and those are queries that with",
    "start": "2240880",
    "end": "2248440"
  },
  {
    "text": "self-referencing primary Keys would actually be very hard to do it's easy to do for one level it's hard to do to get",
    "start": "2248440",
    "end": "2254880"
  },
  {
    "text": "the entire tree because that usually makes uh requires recurring calls or",
    "start": "2254880",
    "end": "2260119"
  },
  {
    "text": "very very very complex SQL queries um so this enables all of that in a heartbeat",
    "start": "2260119",
    "end": "2267480"
  },
  {
    "text": "so I can just do a wear here and if I just take my uh",
    "start": "2267480",
    "end": "2273839"
  },
  {
    "text": "hling um I can do oh uh yeah hopefully um what I can do is I can do",
    "start": "2275000",
    "end": "2282720"
  },
  {
    "text": "the Pat from patriarch which is my Hy ID and I can say is descendant off and I",
    "start": "2282720",
    "end": "2289560"
  },
  {
    "text": "can pass in my ID and my ID of posco is already constructed above and this query",
    "start": "2289560",
    "end": "2295760"
  },
  {
    "text": "actually gets parsed towards the database and is executed there and will",
    "start": "2295760",
    "end": "2301000"
  },
  {
    "text": "return only the part of the tree um we can take a look uh I still have that",
    "start": "2301000",
    "end": "2306920"
  },
  {
    "text": "open don't I so um he's sitting right that's not him",
    "start": "2306920",
    "end": "2312000"
  },
  {
    "text": "he's sitting right here um so we should get him and four child notes right um so",
    "start": "2312000",
    "end": "2318680"
  },
  {
    "text": "that's what my coach should be doing two levels down if it all works um that is",
    "start": "2318680",
    "end": "2324319"
  },
  {
    "text": "what we should be seeing here going to move my magnifier around and yeah that is this is the",
    "start": "2324319",
    "end": "2329760"
  },
  {
    "text": "downside of the whole um Ure deleted andure created it always takes a little",
    "start": "2329760",
    "end": "2335440"
  },
  {
    "text": "while for while for the bigger demos to look load but there they",
    "start": "2335440",
    "end": "2340720"
  },
  {
    "text": "are now this is really cool because we can also go up up the tree with a single",
    "start": "2340720",
    "end": "2346520"
  },
  {
    "text": "query and we need the same syntax we just need to flip um",
    "start": "2346520",
    "end": "2351880"
  },
  {
    "text": "this to the hling right move that one to the other side so the query Works in two",
    "start": "2351880",
    "end": "2359359"
  },
  {
    "text": "directions uh what have I done oh no Bosco is",
    "start": "2359359",
    "end": "2365480"
  },
  {
    "text": "descended off and then I need to do halfling do pad from",
    "start": "2365480",
    "end": "2370720"
  },
  {
    "text": "patriarch so that allows my query to go in the opposite direction and now I should get all the nodes that go up from",
    "start": "2370720",
    "end": "2379318"
  },
  {
    "text": "posco and there's a little bit more to it we can also get the level in the hierarchy of a certain node um so you",
    "start": "2382680",
    "end": "2390560"
  },
  {
    "text": "can get the parent there is a bunch more methods that we can get on those IDs but we go all the way back up to Balo right",
    "start": "2390560",
    "end": "2398319"
  },
  {
    "text": "so this is super convenient if you ever need to model those trees again do you have a question because hierarch is just",
    "start": "2398319",
    "end": "2405800"
  },
  {
    "text": "AUM yes you could have multiple hierarchies on the same set of objects yes okay I'm I'm going to repeat the",
    "start": "2405800",
    "end": "2411760"
  },
  {
    "text": "question because none of you have heard that uh because the hierarchy key ID is just a column you can have multiple",
    "start": "2411760",
    "end": "2418520"
  },
  {
    "text": "hierarchies on the same entity the answer to that is totally yes right this",
    "start": "2418520",
    "end": "2423960"
  },
  {
    "text": "is just a column yes this is nice if you want to structure data in three shaped structures hierarchies IDs are amazing",
    "start": "2423960",
    "end": "2432359"
  },
  {
    "text": "um I was really hoping that I was be would be able to do this demo so thank you for voting for it it's a nice one um",
    "start": "2432359",
    "end": "2439839"
  },
  {
    "text": "so if we look at the syntax of this uh hierarchy ID uh we can see I'm not going",
    "start": "2439839",
    "end": "2444960"
  },
  {
    "text": "to run it again don't worry you won't have to wait for it um but you can see um there is things like a get level um",
    "start": "2444960",
    "end": "2453800"
  },
  {
    "text": "you can uh get get descendants get ancestors that sort of thing and then you can get hierarchy IDs that that are",
    "start": "2453800",
    "end": "2461640"
  },
  {
    "text": "working with the stuff that you need get level in this case will return three uh for posco um I'm just not going to play",
    "start": "2461640",
    "end": "2469160"
  },
  {
    "text": "with that anymore but you get the idea of what the power of this thing uh can",
    "start": "2469160",
    "end": "2475800"
  },
  {
    "text": "be next one you voted was I think many to many's yes many to many's um that was",
    "start": "2475800",
    "end": "2482960"
  },
  {
    "text": "a fake one no it wasn't um many to many",
    "start": "2482960",
    "end": "2489760"
  },
  {
    "text": "are uh let me set that as my startup project there we go yes",
    "start": "2489760",
    "end": "2497280"
  },
  {
    "text": "question I there's too much noise downstairs I don't really hear you wait",
    "start": "2499520",
    "end": "2505560"
  },
  {
    "text": "can I know yeah the is descendant of always re uh includes the root note that",
    "start": "2507800",
    "end": "2513800"
  },
  {
    "text": "is how it behaves but if you exclude the ones where the level is the same okay",
    "start": "2513800",
    "end": "2518920"
  },
  {
    "text": "now you're going to have to make me rerun this uh that's not a problem what you could do if you want to exclude that",
    "start": "2518920",
    "end": "2525280"
  },
  {
    "text": "notes you can play around with the other functionality of the um hierarchy ID so",
    "start": "2525280",
    "end": "2530560"
  },
  {
    "text": "what you can do is you can go and Bosco",
    "start": "2530560",
    "end": "2536280"
  },
  {
    "text": "dolev level uh doesn't equal the um halfling",
    "start": "2536720",
    "end": "2543960"
  },
  {
    "text": "dot hierarchy ID um the pad from p rear. level um do",
    "start": "2543960",
    "end": "2552079"
  },
  {
    "text": "you no because posco is already an hierarchy ID and patr patriarch is my",
    "start": "2552480",
    "end": "2558200"
  },
  {
    "text": "property on the entity so if I do this um I will not be including him in the",
    "start": "2558200",
    "end": "2563640"
  },
  {
    "text": "hierarchy but by default you get the note that you're starting from along with the query that's just how it works",
    "start": "2563640",
    "end": "2569680"
  },
  {
    "text": "uh now oh yeah I I I switched uh my startup",
    "start": "2569680",
    "end": "2574800"
  },
  {
    "text": "project right didn't I um no worries what could go wrong life coding conference talk right A wise man once",
    "start": "2574800",
    "end": "2581680"
  },
  {
    "text": "told me if the demo goes well it could have been a video if the demo goes wrong it should have been a video um and here",
    "start": "2581680",
    "end": "2589559"
  },
  {
    "text": "is me taking that advice and putting it to the side",
    "start": "2589559",
    "end": "2594680"
  },
  {
    "text": "right but I'm still having fun are you having fun I'm having having a good day",
    "start": "2596000",
    "end": "2601200"
  },
  {
    "text": "I'll be full of adrenaline for my lunch break um so yeah now he's gone right is",
    "start": "2601200",
    "end": "2606319"
  },
  {
    "text": "that okay so uh many to many um that should be a",
    "start": "2606319",
    "end": "2611520"
  },
  {
    "text": "quick one um what we have here is I have movies and actors and cast members this",
    "start": "2611520",
    "end": "2618520"
  },
  {
    "text": "is the way you would model it in your database so the way it looks like is we have a movie we have a navigation",
    "start": "2618520",
    "end": "2624599"
  },
  {
    "text": "property to the cast members we have an actor we have a navigation property to the cast uh cast members and then we",
    "start": "2624599",
    "end": "2630839"
  },
  {
    "text": "have the join entity which has a primary key on both of those properties it has",
    "start": "2630839",
    "end": "2636040"
  },
  {
    "text": "foreign Keys towards the two entities and it has navigation properties in both directions this is how to query if you",
    "start": "2636040",
    "end": "2642800"
  },
  {
    "text": "want to get the actors for a movie you're always doing includes two level deep levels deep and although in the",
    "start": "2642800",
    "end": "2649119"
  },
  {
    "text": "database we don't have another option to model this in Entity framework we do so",
    "start": "2649119",
    "end": "2654599"
  },
  {
    "text": "what I'm G to do is I'm gonna first um I'm GNA first run this to make sure that it works um just to see that that we get",
    "start": "2654599",
    "end": "2663839"
  },
  {
    "text": "what we do uh startup no no no not that",
    "start": "2663839",
    "end": "2669599"
  },
  {
    "text": "one good so if we run this uh we will get the tables as we expect to see them",
    "start": "2669640",
    "end": "2677119"
  },
  {
    "text": "um this gives a way a little bit about the movies that we have um so let's take",
    "start": "2677119",
    "end": "2683200"
  },
  {
    "text": "a look that was demo number two at the tables that we're getting um just getting those in and as",
    "start": "2683200",
    "end": "2691720"
  },
  {
    "text": "you can see we have actors cast members and movies so we we expect that that is the",
    "start": "2691720",
    "end": "2698160"
  },
  {
    "text": "database structure that we are dealing with now I want to get rid of that this needs",
    "start": "2698160",
    "end": "2706040"
  },
  {
    "text": "to go from my code and what I'm doing here in my program.cs is I'm taking two movies um",
    "start": "2706040",
    "end": "2714359"
  },
  {
    "text": "and two actors and I had to look for some actors I like that have been in the same movie twice now Robert DeNiro and",
    "start": "2714359",
    "end": "2720280"
  },
  {
    "text": "alpacino have been in a bunch of movies together not just these two um but they",
    "start": "2720280",
    "end": "2726480"
  },
  {
    "text": "have been in a bunch of movies together which means I could map the entities in two directions um and just add",
    "start": "2726480",
    "end": "2732599"
  },
  {
    "text": "everything to my database now I don't want to be doing this anymore um I also",
    "start": "2732599",
    "end": "2738160"
  },
  {
    "text": "want to um change the code in the context to not have this entity so I'm",
    "start": "2738160",
    "end": "2743240"
  },
  {
    "text": "just throwing this away so that needs to go um which means that I can no longer",
    "start": "2743240",
    "end": "2748880"
  },
  {
    "text": "point at cast cast members well what I can do is here I'm going to point at",
    "start": "2748880",
    "end": "2754480"
  },
  {
    "text": "ectors uh so that should be ector um I'm just going to call this collection the cast and of course that",
    "start": "2754480",
    "end": "2763200"
  },
  {
    "text": "should be initialized as the correct type of collection um the same here I",
    "start": "2763200",
    "end": "2768400"
  },
  {
    "text": "will do movie um was in movies something like this and",
    "start": "2768400",
    "end": "2777720"
  },
  {
    "text": "that will be a movie as well now in order to map this um this",
    "start": "2777720",
    "end": "2783680"
  },
  {
    "text": "entity no longer exist um now we have to set up that many to many",
    "start": "2783680",
    "end": "2789720"
  },
  {
    "text": "relationship um by default I think it will do some of it um but we could",
    "start": "2789720",
    "end": "2795400"
  },
  {
    "text": "control a lot of what is going on and my iPad got locked again no worries so when",
    "start": "2795400",
    "end": "2803760"
  },
  {
    "text": "you map this um I'm going to overwrite the on model",
    "start": "2803760",
    "end": "2810119"
  },
  {
    "text": "creating um you should never put your mapping code directly in the on model creating okay I'm doing this for demo",
    "start": "2810119",
    "end": "2816040"
  },
  {
    "text": "purposes you should be making I entity type configurations for all of your types okay let that be a warning to all",
    "start": "2816040",
    "end": "2823000"
  },
  {
    "text": "of you um what I'm just going to do here is I'm just going to take one of the",
    "start": "2823000",
    "end": "2829160"
  },
  {
    "text": "entities um I'm going to start from the movie side that seems to make the most sense um Entity movie and then I'm going",
    "start": "2829160",
    "end": "2837040"
  },
  {
    "text": "to be able to do a has many um and the has many will be my",
    "start": "2837040",
    "end": "2843119"
  },
  {
    "text": "navigation property from my movie to my actors so movie.",
    "start": "2843119",
    "end": "2849000"
  },
  {
    "text": "cast and then instead of doing a with one I can do a with many um and then I'm going going to go",
    "start": "2849000",
    "end": "2856119"
  },
  {
    "text": "back from the actor towards the movies was in movies now that I have",
    "start": "2856119",
    "end": "2863839"
  },
  {
    "text": "those available to me I can basically control what that join table looks like",
    "start": "2863839",
    "end": "2870040"
  },
  {
    "text": "because the default will just create something and this will work um but we",
    "start": "2870040",
    "end": "2875359"
  },
  {
    "text": "can basically have full control over what that middle entity looks like in our database without ever showing it in",
    "start": "2875359",
    "end": "2882440"
  },
  {
    "text": "the model so I can do using entity and using entity in this case means that I",
    "start": "2882440",
    "end": "2889040"
  },
  {
    "text": "can just call this table whatever I want in the database and we used to call it cast members uh so I'm going to call it",
    "start": "2889040",
    "end": "2896480"
  },
  {
    "text": "something else now I'm just going to call it cast so that we know that we uh regenerated a database right if we see a",
    "start": "2896480",
    "end": "2902559"
  },
  {
    "text": "table called cast that is what we wanted to see and then I'm able to um control the rest of it as well and as",
    "start": "2902559",
    "end": "2910800"
  },
  {
    "text": "you can see from the signature of this we will be having a left mapping um",
    "start": "2910800",
    "end": "2916200"
  },
  {
    "text": "function a right mapping function um and then we can basically have a foreign key on that as well so let's start from the",
    "start": "2916200",
    "end": "2924040"
  },
  {
    "text": "left and on the left side we can basically say that our Center entity has",
    "start": "2924040",
    "end": "2931319"
  },
  {
    "text": "a foreign key towards the entity that we're coming from so what I can do um is",
    "start": "2931319",
    "end": "2937240"
  },
  {
    "text": "the has one and has one in this case I will have to tell uh the type of because I don't",
    "start": "2937240",
    "end": "2944280"
  },
  {
    "text": "have navigation properties this is not a model that exists in my database so I can just do type of",
    "start": "2944280",
    "end": "2950520"
  },
  {
    "text": "movie which puts movie on the left of my relationship um it has one",
    "start": "2950520",
    "end": "2956119"
  },
  {
    "text": "movie um and I can do a with many on that so this is just mapping on that",
    "start": "2956119",
    "end": "2961880"
  },
  {
    "text": "Center entity uh what am I doing wrong that should be there with many",
    "start": "2961880",
    "end": "2967630"
  },
  {
    "text": "[Music] um and I will have many um on the other",
    "start": "2967630",
    "end": "2973000"
  },
  {
    "text": "side of the relationship it already knows what it is so I don't have to um Define that and I can basically do the",
    "start": "2973000",
    "end": "2979480"
  },
  {
    "text": "foreign key on there um meaning that um",
    "start": "2979480",
    "end": "2985240"
  },
  {
    "text": "I can give that foreign key whatever name I want to give it let's say that we call it movie ID right now I can do the",
    "start": "2985240",
    "end": "2992599"
  },
  {
    "text": "same for the right side I'm not going to repeat everything I'm going to duplicate that line and just change the things",
    "start": "2992599",
    "end": "2997880"
  },
  {
    "text": "that need changing so on the right side I do the same thing it has one",
    "start": "2997880",
    "end": "3003079"
  },
  {
    "text": "actor um and I also have a with many and that",
    "start": "3003079",
    "end": "3010200"
  },
  {
    "text": "should get obviously a different name that is called actor ID now if I want to define the primary",
    "start": "3010200",
    "end": "3017040"
  },
  {
    "text": "key for this join entity um I can do that as well meaning that the last",
    "start": "3017040",
    "end": "3024000"
  },
  {
    "text": "mapping expression we get is the mapping that we do on the Central entity and not on the left and the right side",
    "start": "3024000",
    "end": "3029400"
  },
  {
    "text": "relationships so how that works is I can just do the join entity in this case and",
    "start": "3029400",
    "end": "3035680"
  },
  {
    "text": "we do J do um has primary key or has key",
    "start": "3035680",
    "end": "3043200"
  },
  {
    "text": "um yeah and I'm going to pass in my two IDs right there right so I'm just going",
    "start": "3043200",
    "end": "3049119"
  },
  {
    "text": "to say the primary key of this entity is movie ID and actor ID we can control",
    "start": "3049119",
    "end": "3054319"
  },
  {
    "text": "this way further than I have right now now um but this basically is the basics",
    "start": "3054319",
    "end": "3059720"
  },
  {
    "text": "of what we had before we ran this except it's no longer called cast member it is now called cast it should all work I do",
    "start": "3059720",
    "end": "3066880"
  },
  {
    "text": "have to adjust my program code here because well cast member here does not",
    "start": "3066880",
    "end": "3072880"
  },
  {
    "text": "exist anymore so what I'm going to do is to just make this simple um I'm going to",
    "start": "3072880",
    "end": "3078839"
  },
  {
    "text": "say that heat and I I can access this from either side really um on my movie I",
    "start": "3078839",
    "end": "3087319"
  },
  {
    "text": "can just say that my cast well my cast equals um and I just do a",
    "start": "3087319",
    "end": "3095319"
  },
  {
    "text": "new hash set or I can just do new collection right um and that go will go",
    "start": "3095319",
    "end": "3101920"
  },
  {
    "text": "be robero and alucino um and that is not the right",
    "start": "3101920",
    "end": "3111119"
  },
  {
    "text": "type oh it's non oh yeah I've been doing it wrong aren't",
    "start": "3113240",
    "end": "3119318"
  },
  {
    "text": "I that's my brain um messing up like like this should work",
    "start": "3120000",
    "end": "3130400"
  },
  {
    "text": "no it's just my fat fingers it's nothing nothing wrong with for the rest of it um",
    "start": "3130440",
    "end": "3136119"
  },
  {
    "text": "so I can do this on both of the movies meaning that I'm adding all of the actors to all of the movies um which is",
    "start": "3136119",
    "end": "3143960"
  },
  {
    "text": "exactly what my code was supposed to do um we can throw away this",
    "start": "3143960",
    "end": "3150240"
  },
  {
    "text": "now um and it also means that now my includes become a lot easier because I",
    "start": "3150240",
    "end": "3157520"
  },
  {
    "text": "can just say include movie. cast I only have a one level of includes and it will",
    "start": "3157520",
    "end": "3164240"
  },
  {
    "text": "query everything correctly um for each cast member in movie. cast um and I",
    "start": "3164240",
    "end": "3171599"
  },
  {
    "text": "don't have this extra level so I'm simplifying all of my code and the reason that I put all of that in there is to see how much simpler the many to",
    "start": "3171599",
    "end": "3178160"
  },
  {
    "text": "many are if you map them correctly so if we run this this should work we should get our movie it should be in the",
    "start": "3178160",
    "end": "3184000"
  },
  {
    "text": "database we should see a table called cast um the skip navigation was in",
    "start": "3184000",
    "end": "3189319"
  },
  {
    "text": "movies doesn't have a foreign key associated with it",
    "start": "3189319",
    "end": "3194359"
  },
  {
    "text": "h what have I done wrong probably something",
    "start": "3194359",
    "end": "3199400"
  },
  {
    "text": "oh yeah I should have done principal Keys as well right um I totally forgot about those um no worries",
    "start": "3199400",
    "end": "3207359"
  },
  {
    "text": "I can get this fixed before launch time um what I forgot here is that this",
    "start": "3207359",
    "end": "3213559"
  },
  {
    "text": "mapping entity also requires a principal key so I'm just going to do this uh do",
    "start": "3213559",
    "end": "3219440"
  },
  {
    "text": "has principal key now it becomes a mapping issue the code is done we've simplified that now",
    "start": "3219440",
    "end": "3226200"
  },
  {
    "text": "we we have to make sure that it is mapped correctly um and my principle key in this type uh in this thing is we do",
    "start": "3226200",
    "end": "3234440"
  },
  {
    "text": "name of um because we also don't have lambdas here because we're in this weird",
    "start": "3234440",
    "end": "3240040"
  },
  {
    "text": "limbo um movie.id and and I'm going to have to do",
    "start": "3240040",
    "end": "3245960"
  },
  {
    "text": "the same for this one um and that should be my actor",
    "start": "3245960",
    "end": "3256119"
  },
  {
    "text": "ID always use name of when you're referring to stuff that already exist in your code you know this right um so this",
    "start": "3257119",
    "end": "3265319"
  },
  {
    "text": "should work no it",
    "start": "3265319",
    "end": "3269839"
  },
  {
    "text": "doesn't must have oh did I not fully stop the run was that maybe the",
    "start": "3272400",
    "end": "3280559"
  },
  {
    "text": "problem this should now be okay it's still",
    "start": "3280920",
    "end": "3288200"
  },
  {
    "text": "crashing that's cool the last demo before lunch goes wrong",
    "start": "3288200",
    "end": "3295040"
  },
  {
    "text": "uh has one with many foreign key has principal key has key",
    "start": "3295040",
    "end": "3302440"
  },
  {
    "text": "yeah actor wasn't movies doesn't have a foreign",
    "start": "3302440",
    "end": "3307640"
  },
  {
    "text": "key anybody have a clue",
    "start": "3307640",
    "end": "3313160"
  },
  {
    "text": "no Dylan was right this should have been in video damn it um somebody said maybe",
    "start": "3313160",
    "end": "3321960"
  },
  {
    "text": "excuse me",
    "start": "3327720",
    "end": "3330440"
  },
  {
    "text": "the um no I I I should not have to do that",
    "start": "3335280",
    "end": "3342480"
  },
  {
    "text": "um so has many with many that is exactly what I had in",
    "start": "3342480",
    "end": "3348720"
  },
  {
    "text": "my demo using entity I give that a name",
    "start": "3348720",
    "end": "3353799"
  },
  {
    "text": "yes I have a left relation that does a has one type of",
    "start": "3353799",
    "end": "3361480"
  },
  {
    "text": "movie did I maybe I think I may have to swap these",
    "start": "3361480",
    "end": "3369200"
  },
  {
    "text": "um I think I may have to swap the left and the right um I think that is probably the",
    "start": "3369200",
    "end": "3375240"
  },
  {
    "text": "problem um because I'm mapping from the movie which means that movie is left and",
    "start": "3375240",
    "end": "3380880"
  },
  {
    "text": "movie is not right um so",
    "start": "3380880",
    "end": "3386838"
  },
  {
    "text": "and that was it okay",
    "start": "3403520",
    "end": "3410359"
  },
  {
    "text": "yeah so everything went right um I should actually when I refresh that that",
    "start": "3411960",
    "end": "3418440"
  },
  {
    "text": "table should become cast with its primary key for and",
    "start": "3418440",
    "end": "3424200"
  },
  {
    "text": "key fields and that is how we do the many to many right three minutes before lunch I would",
    "start": "3424200",
    "end": "3429839"
  },
  {
    "text": "have loved to do more demos uh but you will have to come to the next iteration of this talk and just vote for different",
    "start": "3429839",
    "end": "3435039"
  },
  {
    "text": "ones and I'm not sure I'll ever do this again this is stressful life",
    "start": "3435039",
    "end": "3440119"
  },
  {
    "text": "coding but again um I I do want to round out with um yeah that was your time um",
    "start": "3440119",
    "end": "3448160"
  },
  {
    "text": "which one was fake oh I'm still in magnifier mode um let me first like get so which was one was can you shout which",
    "start": "3448160",
    "end": "3455039"
  },
  {
    "text": "one was the fake one what without DB contexts without DB",
    "start": "3455039",
    "end": "3463280"
  },
  {
    "text": "sets no you can actually do that it's really fun we even did some of it in the workshop yesterday the one that was fake",
    "start": "3463280",
    "end": "3470559"
  },
  {
    "text": "was double databases obviously how can you join across multiple database uh",
    "start": "3470559",
    "end": "3476760"
  },
  {
    "text": "engines this will never happen it's technically not possible but I thought it was a fun idea to throw that in there",
    "start": "3476760",
    "end": "3483240"
  },
  {
    "text": "um which meant you won twice you didn't interrupt my talk with the alarms you",
    "start": "3483240",
    "end": "3488480"
  },
  {
    "text": "also didn't vote for the one that was obviously fake it was a pleasure to be here I hope you enjoy the rest of your",
    "start": "3488480",
    "end": "3495440"
  },
  {
    "text": "conference um so I hope you got Walk Away Learning something I still think EF",
    "start": "3495440",
    "end": "3500559"
  },
  {
    "text": "core is awesome it is getting more awesome with every release it's also getting faster with every release which",
    "start": "3500559",
    "end": "3505880"
  },
  {
    "text": "means means you have less and less reasons to use all the Lesser ORS right",
    "start": "3505880",
    "end": "3511119"
  },
  {
    "text": "um this is my Twitter handle and my icq number and I'm very sad to say I've been making this joke for five years and this",
    "start": "3511119",
    "end": "3518559"
  },
  {
    "text": "will be the last conference where I'm able to do it because I seeq although it's still active today and you can",
    "start": "3518559",
    "end": "3524559"
  },
  {
    "text": "message me on the app will shut down later this month it's a sad time teenage",
    "start": "3524559",
    "end": "3530520"
  },
  {
    "text": "me loved icq a lot to talk to strangers around the globe I now go to conference",
    "start": "3530520",
    "end": "3535680"
  },
  {
    "text": "to to do the same thing so if you want to come up this week and talk to me please do I'll be here all week thank",
    "start": "3535680",
    "end": "3541839"
  },
  {
    "text": "you so much",
    "start": "3541839",
    "end": "3545240"
  }
]