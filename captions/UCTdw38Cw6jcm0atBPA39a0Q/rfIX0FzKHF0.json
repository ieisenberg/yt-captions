[
  {
    "text": "thank you it's good to be back I was here four years ago and you know in the before times uh and it's nice to be back",
    "start": "6839",
    "end": "13980"
  },
  {
    "text": "again I wanted to talk to you about abstraction today because uh abstraction turns out",
    "start": "13980",
    "end": "20820"
  },
  {
    "text": "to be probably the most important thing uh to being a good developer",
    "start": "20820",
    "end": "26220"
  },
  {
    "text": "to understand when to use it what it's for am I am I doing it right do I need more of it and so on",
    "start": "26220",
    "end": "33120"
  },
  {
    "text": "and uh I thought it would start though with some thank yous I've been getting up on stages for about",
    "start": "33120",
    "end": "39899"
  },
  {
    "text": "20 years and in most of that time speakers get up and they tell you that they're going to spend an hour or an",
    "start": "39899",
    "end": "45360"
  },
  {
    "text": "hour and a half with you and share wisdom with you and it sounds like they thought it all up by themselves it just came to them",
    "start": "45360",
    "end": "51840"
  },
  {
    "text": "one day when they were at their desk for no good reason and a few years ago a Conor Hoekstra and if you don't know",
    "start": "51840",
    "end": "57239"
  },
  {
    "text": "Connor I strongly recommend that you seek him out uh started doing talks where he said I",
    "start": "57239",
    "end": "63300"
  },
  {
    "text": "was watching this talk and I was reading this blog and I was listening to this podcast and I decided to put this piece",
    "start": "63300",
    "end": "68700"
  },
  {
    "text": "of this together with this piece of that and that's what this talk is and I realized that's how all talks",
    "start": "68700",
    "end": "75299"
  },
  {
    "text": "happen Okay uh we do something at work we listen to something we watch",
    "start": "75299",
    "end": "80400"
  },
  {
    "text": "something we talk to a friend over dinner and it turns into a talk and Connor really started telling the",
    "start": "80400",
    "end": "86040"
  },
  {
    "text": "truth about that instead of implying that we all just make all this stuff up in our Ivory Towers alone",
    "start": "86040",
    "end": "91320"
  },
  {
    "text": "so in that spirit last year guy Davidson wrote this book",
    "start": "91320",
    "end": "96780"
  },
  {
    "text": "he likes to say that we wrote this book but that's not really true he wrote all the words um I helped him to choose which of the",
    "start": "96780",
    "end": "103380"
  },
  {
    "text": "30 core guidelines of which 30 of the hundreds of core guidelines we would talk about",
    "start": "103380",
    "end": "108780"
  },
  {
    "text": "and uh you know worked a little bit on you know choosing examples or maybe this",
    "start": "108780",
    "end": "114119"
  },
  {
    "text": "paragraph should be before that paragraph that kind of thing but he really did all the work and what we discovered we chose the",
    "start": "114119",
    "end": "119640"
  },
  {
    "text": "guidelines to cover a variety not all the same stuff but over and over and over again",
    "start": "119640",
    "end": "126000"
  },
  {
    "text": "they boiled down to you should do this highly specific piece of C plus plus syntax and the answer for",
    "start": "126000",
    "end": "132360"
  },
  {
    "text": "why was always because that's better abstraction it was like we said it's just abstraction all the way down",
    "start": "132360",
    "end": "140120"
  },
  {
    "text": "uh also Tony uh Canadian like me did a talk at simplest plus now last year",
    "start": "140160",
    "end": "145500"
  },
  {
    "text": "which was allegedly about the solid principles I'm kind of meh on the solid",
    "start": "145500",
    "end": "150780"
  },
  {
    "text": "principles these days for a variety of reasons but that's okay because the talk really wasn't about the solid principles at all but it was about like designing",
    "start": "150780",
    "end": "156900"
  },
  {
    "text": "and architecting uh classes and abstractions and I learned a lot from that talk as well and I recommend you",
    "start": "156900",
    "end": "163319"
  },
  {
    "text": "seek out Talks by these three people uh you won't be disappointed",
    "start": "163319",
    "end": "168739"
  },
  {
    "text": "here's the thing we teach abstraction we kind of lie",
    "start": "169080",
    "end": "175260"
  },
  {
    "text": "here are The Lies We Tell people you you find your abstractions before you write your code",
    "start": "175260",
    "end": "182959"
  },
  {
    "text": "you have to write them down in some kind of a notation I have books by people like Grady booch",
    "start": "183420",
    "end": "190260"
  },
  {
    "text": "that came with plastic templates in the back to help you draw the little shapes on paper the lozenges and clouds and",
    "start": "190260",
    "end": "197459"
  },
  {
    "text": "whatnot that represented the different notations for uh for object orientation",
    "start": "197459",
    "end": "202800"
  },
  {
    "text": "and you need to understand whatever domain it is you're writing it so my undergraduate work is in chemical",
    "start": "202800",
    "end": "209159"
  },
  {
    "text": "engineering so if I was going to model as I did chemical reactors and refineries you",
    "start": "209159",
    "end": "216840"
  },
  {
    "text": "know you have to understand how a heat exchanger works or how pump works that's how you can write good code to model one",
    "start": "216840",
    "end": "222420"
  },
  {
    "text": "of those if you're going to write something that sells things to people and charges them sales tax you need to understand the",
    "start": "222420",
    "end": "228840"
  },
  {
    "text": "rules of sales tax not just to write the code but even to design it so for example in some countries there",
    "start": "228840",
    "end": "235260"
  },
  {
    "text": "is just a sales tax rate period in many countries some things are taxable and some are not and in others",
    "start": "235260",
    "end": "241680"
  },
  {
    "text": "there are different rates for different things so designing and saying every object",
    "start": "241680",
    "end": "248280"
  },
  {
    "text": "will have a sales tax rate might not in fact be the correct design in some countries",
    "start": "248280",
    "end": "254480"
  },
  {
    "text": "and probably the biggest lie is that once you've done that you're good going forward if anything changes they",
    "start": "254519",
    "end": "261660"
  },
  {
    "text": "change the rules for sales tax or whatever you'll just go to this one place and you'll change it",
    "start": "261660",
    "end": "267560"
  },
  {
    "text": "sorry about my throat now when I call these lies right they're",
    "start": "267560",
    "end": "273900"
  },
  {
    "text": "really just simplifications my granddaughter is five she's learning to read",
    "start": "273900",
    "end": "279300"
  },
  {
    "text": "we tell her this is the letter c it makes a cuss sound see for Chloe",
    "start": "279300",
    "end": "284880"
  },
  {
    "text": "C for cat we don't tell her about Pacific Ocean",
    "start": "284880",
    "end": "290759"
  },
  {
    "text": "there's the Seas uh in Pacific Ocean each make a different sound and in the same way like C is for Chloe",
    "start": "290759",
    "end": "297540"
  },
  {
    "text": "and C does make a k sound for cat but you're not a fluent reader of English if",
    "start": "297540",
    "end": "302699"
  },
  {
    "text": "you pronounce all C's that way there are other things going on for abstraction",
    "start": "302699",
    "end": "308820"
  },
  {
    "text": "the truth is yeah you do design and find some abstractions and you do",
    "start": "308820",
    "end": "314639"
  },
  {
    "text": "need a way to write it down when you don't have code and you do need domain knowledge to discover them",
    "start": "314639",
    "end": "320520"
  },
  {
    "text": "but you're not done when you found those you've just started you're going to continue finding",
    "start": "320520",
    "end": "327419"
  },
  {
    "text": "abstractions for as long as this software exists and most importantly you find those",
    "start": "327419",
    "end": "334380"
  },
  {
    "text": "abstractions completely differently then the way you find them when you're",
    "start": "334380",
    "end": "339419"
  },
  {
    "text": "designing then the only way we've ever taught you to find them so that's what I want to talk about in",
    "start": "339419",
    "end": "345780"
  },
  {
    "text": "this talk is finding missing abstractions in working code you don't need to understand how",
    "start": "345780",
    "end": "353160"
  },
  {
    "text": "chemical reactors work you don't need to understand how to run a rental car business",
    "start": "353160",
    "end": "358440"
  },
  {
    "text": "okay this is not about drawing on a deep domain knowledge",
    "start": "358440",
    "end": "364020"
  },
  {
    "text": "and you don't update the diagrams you don't have any non-code notation for",
    "start": "364020",
    "end": "370500"
  },
  {
    "text": "these missing abstractions and you certainly don't check with the business Hey listen you know we've got orders we",
    "start": "370500",
    "end": "377699"
  },
  {
    "text": "talked a lot about what orders do I've decided to be useful if I had an order item class is that okay with you that is",
    "start": "377699",
    "end": "383280"
  },
  {
    "text": "not a phone call you're ever going to have these abstractions are in the code you",
    "start": "383280",
    "end": "389759"
  },
  {
    "text": "see that in the code that there's a missing abstraction the code tells you about it code screams at you about it to be fair",
    "start": "389759",
    "end": "395580"
  },
  {
    "text": "and then you put them in the code whatever's missing if there's a missing",
    "start": "395580",
    "end": "401460"
  },
  {
    "text": "class you make a class now the abstraction's in the code",
    "start": "401460",
    "end": "406580"
  },
  {
    "text": "foreign most people if you were to say hey who's that person who's coming to",
    "start": "407060",
    "end": "412080"
  },
  {
    "text": "speak to us this week what does she do they'll say oh she's a trainer and that's fair I do a lot of teaching I",
    "start": "412080",
    "end": "418860"
  },
  {
    "text": "have a lot of courses on pluralsight and elsewhere I want people to write 21st",
    "start": "418860",
    "end": "424199"
  },
  {
    "text": "century C plus plus and I put a fair amount of time and effort into that because I don't want people to be afraid of C plus plus",
    "start": "424199",
    "end": "430979"
  },
  {
    "text": "I mean like if you're not careful at parties I'll start talking about that that's one of my things you know let's just okay if it's a C plus plus party",
    "start": "430979",
    "end": "437759"
  },
  {
    "text": "but it's less okay if it's like a neighborhood barbecue and when I'm not getting paid to teach",
    "start": "437759",
    "end": "444120"
  },
  {
    "text": "and train I'll come in as a consultant and sometimes it's as much a Management Consultant as it is a C plus plus consultant projects are in big trouble",
    "start": "444120",
    "end": "451259"
  },
  {
    "text": "and especially when people own code they can't maintain",
    "start": "451259",
    "end": "456300"
  },
  {
    "text": "then this happens more often than you might think the last person who understood this code is gone",
    "start": "456300",
    "end": "462120"
  },
  {
    "text": "in some cases I mean gone the number of phone calls I've had that has started with telling me that they",
    "start": "462120",
    "end": "467580"
  },
  {
    "text": "had someone who understood the code but he died this is a real thing please do not be that person",
    "start": "467580",
    "end": "473699"
  },
  {
    "text": "please do not please do not die and no one else knows how your code works that's not job security",
    "start": "473699",
    "end": "481860"
  },
  {
    "text": "and uh and I come in these situations and I figure out how to",
    "start": "481860",
    "end": "487199"
  },
  {
    "text": "make code that they can understand and how to make code that they can maintain sometimes I have to teach them C plus",
    "start": "487199",
    "end": "493199"
  },
  {
    "text": "plus so they can read their own code but a lot of times I have to fix the code and what I have to fix about it is",
    "start": "493199",
    "end": "499319"
  },
  {
    "text": "generally that it is missing abstractions that's why they can't understand it it doesn't make any sense because it's missing abstractions",
    "start": "499319",
    "end": "506460"
  },
  {
    "text": "but it's important to know that the things I'm going to tell you are not just about going into Legacy code yes if",
    "start": "506460",
    "end": "512640"
  },
  {
    "text": "you go into 30 year old code which I've had to do you will find lots and lots of opportunities to make it better",
    "start": "512640",
    "end": "518940"
  },
  {
    "text": "but with what I'm going to show you you will catch yourself doing them live",
    "start": "518940",
    "end": "525420"
  },
  {
    "text": "like literally you will press enter and you will look at the screen and you will realize that there is a missing",
    "start": "525420",
    "end": "530880"
  },
  {
    "text": "abstraction in your 30-second old code and you will provide the missing abstraction",
    "start": "530880",
    "end": "537800"
  },
  {
    "text": "maybe you'll just add a comment I really should make this a function but maybe",
    "start": "538080",
    "end": "543779"
  },
  {
    "text": "you'll actually make it a function either way it will be better so this is not a technique for approaching old code",
    "start": "543779",
    "end": "550019"
  },
  {
    "text": "it's also a technique for watching what you do right in the moment while you're doing it",
    "start": "550019",
    "end": "556760"
  },
  {
    "text": "so I've said missing abstractions a bunch of times I've said I'm going to give you abstraction patterns most people think they know what an",
    "start": "558060",
    "end": "563399"
  },
  {
    "text": "abstraction is they'll say an abstraction is a class no a class is an abstraction",
    "start": "563399",
    "end": "571140"
  },
  {
    "text": "but many many things are abstractions that are not classes anything with a name",
    "start": "571140",
    "end": "577980"
  },
  {
    "text": "the minute it can have a name it is an abstraction a variable",
    "start": "577980",
    "end": "583080"
  },
  {
    "text": "is an abstraction compared to a literal a class a function a file",
    "start": "583080",
    "end": "589320"
  },
  {
    "text": "anything with a name is an abstraction and when we're doing those abstraction",
    "start": "589320",
    "end": "594480"
  },
  {
    "text": "lies we tell you that you do this to avoid repetition and to avoid duplication and that's true that is one",
    "start": "594480",
    "end": "602040"
  },
  {
    "text": "of the reasons for writing an abstraction it's probably not the most important I actually think the most important is the",
    "start": "602040",
    "end": "607320"
  },
  {
    "text": "name but that usually comes along with it so I live in Canada Canada we work in",
    "start": "607320",
    "end": "614279"
  },
  {
    "text": "metric but we also work in Imperial we have to be bilingual in measurement systems as well as a little bit in",
    "start": "614279",
    "end": "620339"
  },
  {
    "text": "languages and imagine that I've got some code a couple million lines of code",
    "start": "620339",
    "end": "627120"
  },
  {
    "text": "and all over the place it needs to convert between Fahrenheit and Celsius",
    "start": "627120",
    "end": "632459"
  },
  {
    "text": "I could just plonk the formula in everywhere I needed it certainly any Canadian is oh you're subtracting 32. I",
    "start": "632459",
    "end": "640019"
  },
  {
    "text": "see what's happening here yeah we're going to divide by 9 we're going to multiply by 5. I know what's going on that's Celsius in Fahrenheit",
    "start": "640019",
    "end": "646320"
  },
  {
    "text": "but there's a good chance that once in a while you would mess it up you make a typo you subtract 33 instead of 32 that",
    "start": "646320",
    "end": "652920"
  },
  {
    "text": "kind of thing you'd divide by 9 instead of multiplying that kind of thing so you make a little function right C to",
    "start": "652920",
    "end": "659820"
  },
  {
    "text": "F and another function F to C you don't do that because like with",
    "start": "659820",
    "end": "665279"
  },
  {
    "text": "sales tax what if the rules for converting Fahrenheit to Celsius change I'll only have to change this one",
    "start": "665279",
    "end": "670920"
  },
  {
    "text": "function we all know they're never going to change but we're eliminating that repetition of",
    "start": "670920",
    "end": "676140"
  },
  {
    "text": "the same formula over and over again and we're giving it a name so that if somebody reads it who doesn't know why",
    "start": "676140",
    "end": "681899"
  },
  {
    "text": "we're subtracting 32 they can tell from the name of the function",
    "start": "681899",
    "end": "687360"
  },
  {
    "text": "we're actually isolating the part of the problem that converts temperature units into a place of its",
    "start": "687360",
    "end": "694320"
  },
  {
    "text": "own where everyone else can ignore it and isolation is a very important part of abstraction",
    "start": "694320",
    "end": "701519"
  },
  {
    "text": "if you take all the stuff that's related to sales tax and you put it in a place with a big sales tax sign in front of it then everybody else can just trust okay",
    "start": "701519",
    "end": "708720"
  },
  {
    "text": "that's the sales tax stuff I don't need to understand about that I can focus on what I came in here to change which is that I want the total to be blue or what",
    "start": "708720",
    "end": "715019"
  },
  {
    "text": "have you separating the problem out into different spaces lets different people",
    "start": "715019",
    "end": "720779"
  },
  {
    "text": "work on different parts of it this is just as valuable as avoiding repetition so there's no need for",
    "start": "720779",
    "end": "727019"
  },
  {
    "text": "something to be repeated over and over again for you to choose to put it in abstraction",
    "start": "727019",
    "end": "732620"
  },
  {
    "text": "of course the very best abstractions are the ones that you just use instead of writing",
    "start": "732779",
    "end": "738060"
  },
  {
    "text": "so there's a class or a function in the standard library that will give you what you need or there's a third party",
    "start": "738060",
    "end": "743880"
  },
  {
    "text": "library right so I need to look things up in a table I need to manipulate",
    "start": "743880",
    "end": "748980"
  },
  {
    "text": "strings I need to parse Jason I need to parse command line options",
    "start": "748980",
    "end": "754140"
  },
  {
    "text": "that's all solved problems I shouldn't be writing all of that and if I find a not very good implementation of it I",
    "start": "754140",
    "end": "760019"
  },
  {
    "text": "should probably be ripping it out and putting in a good one the world is now full of examples of",
    "start": "760019",
    "end": "767100"
  },
  {
    "text": "people who discovered they were accidentally writing stood rotate that seems to be a very popular thing",
    "start": "767100",
    "end": "772380"
  },
  {
    "text": "for people to not notice they were writing and uh it's obviously a better plan to use the",
    "start": "772380",
    "end": "778620"
  },
  {
    "text": "standard function than your own in the book we say abstraction localizes",
    "start": "778620",
    "end": "785040"
  },
  {
    "text": "and minimizes complexity so rather than having all those minus 32 divide by 9",
    "start": "785040",
    "end": "790500"
  },
  {
    "text": "whatever smeared all over your Millions lines of code they're all in one place everything else gets simpler",
    "start": "790500",
    "end": "796980"
  },
  {
    "text": "but the trick that you're not expecting is that often when you do that the overall complexity disappears because",
    "start": "796980",
    "end": "804300"
  },
  {
    "text": "this formula for going back and forth between Fahrenheit and Celsius or kilograms and pounds or what have you are not exactly complicated formulas",
    "start": "804300",
    "end": "811380"
  },
  {
    "text": "and yet by putting them in one place you didn't just localize the complexity you actually make it completely disappear",
    "start": "811380",
    "end": "819380"
  },
  {
    "text": "so when code is missing abstractions It's Your Role to provide them",
    "start": "821579",
    "end": "827279"
  },
  {
    "text": "and I just telling you that's going to make the code better why well because if you have thousands of lines of code if",
    "start": "827279",
    "end": "835139"
  },
  {
    "text": "you have a class with 50 member variables I'm not making any of this up this is all real how is that different from Global mutable state",
    "start": "835139",
    "end": "842220"
  },
  {
    "text": "like really it's not so you provide the missing abstractions you provide smaller things and you get",
    "start": "842220",
    "end": "848220"
  },
  {
    "text": "all the benefits that we've always said you'll get from abstractions",
    "start": "848220",
    "end": "853519"
  },
  {
    "text": "the simplest thing to do I said an abstraction is anything with a name if you have a magic number anywhere in your",
    "start": "853680",
    "end": "859440"
  },
  {
    "text": "code make it some kind of a variable could be just like some local thing could be a member variable of a class if",
    "start": "859440",
    "end": "866279"
  },
  {
    "text": "the if the formula is in a member function of that class it can be const sure it's a constant be",
    "start": "866279",
    "end": "872820"
  },
  {
    "text": "const expert that's also fine I don't really care how you spell it what I really care about is that it gets a name",
    "start": "872820",
    "end": "880320"
  },
  {
    "text": "well but how am I going to know the name here's this big long complicated formula it's got a 23 and a 17 and a 48 knit",
    "start": "880320",
    "end": "886260"
  },
  {
    "text": "well chances are there's a comment right before the formula that pretty much always is that says you know 17 is how",
    "start": "886260",
    "end": "893940"
  },
  {
    "text": "many I don't know provinces there are in the country or something and and that's where that comes from",
    "start": "893940",
    "end": "899399"
  },
  {
    "text": "the name is almost always right there in the code because someone else has read this formula and said why do we divide",
    "start": "899399",
    "end": "905100"
  },
  {
    "text": "by 23 here and rather than introduce an abstraction someone's just added a comment",
    "start": "905100",
    "end": "911399"
  },
  {
    "text": "there's a joke about a consultant being someone who will borrow your watch to tell you what time it is",
    "start": "911399",
    "end": "916980"
  },
  {
    "text": "but it but you know if you're walking around with a watch on going man I wish I knew what time it was then you you need a consultant who knows how to read",
    "start": "916980",
    "end": "923339"
  },
  {
    "text": "watches for you and I very much borrow people's watches when I look in their code read their comments and use that to",
    "start": "923339",
    "end": "929579"
  },
  {
    "text": "give a variable a better name so give your constants a better name and not zero and one like real constants but",
    "start": "929579",
    "end": "937920"
  },
  {
    "text": "don't reinvent the wheel if you've got seven in your formula",
    "start": "937920",
    "end": "943199"
  },
  {
    "text": "don't just introduce a constant called days per week Go off into the Chrono header",
    "start": "943199",
    "end": "949139"
  },
  {
    "text": "and see if there's something to convert between days and weeks for you already something that is uh already written to",
    "start": "949139",
    "end": "956519"
  },
  {
    "text": "handle all the weird edge cases that might appear you want pi okay bring in the numbers",
    "start": "956519",
    "end": "962760"
  },
  {
    "text": "header and use stood numbers Pi or square root of 2 or where the other number with a name you want is probably",
    "start": "962760",
    "end": "969660"
  },
  {
    "text": "in that header that's more expressive to other people than you're a super cool arc 10 of -1 or whatever related formula",
    "start": "969660",
    "end": "977160"
  },
  {
    "text": "that you've come up with to calculate pi by we'll start with a really simple one",
    "start": "977160",
    "end": "984800"
  },
  {
    "text": "I see this sort of thing all the time in Old code you've got uh report I chose report",
    "start": "985139",
    "end": "991079"
  },
  {
    "text": "because pretty much every old system has does reports used to print them now it emails them whatever okay and and they",
    "start": "991079",
    "end": "997920"
  },
  {
    "text": "used to just have the report and then they're like oh actually the reports are going to be a little bit different for some people than for",
    "start": "997920",
    "end": "1004339"
  },
  {
    "text": "others so they add like a report type a member verbal to the report class which is fine",
    "start": "1004339",
    "end": "1010279"
  },
  {
    "text": "and uh they decide to use these these macros for the report type names",
    "start": "1010279",
    "end": "1016639"
  },
  {
    "text": "they typically all start with a common prefix because of course macros are not uh in their namespaced in any way so RT",
    "start": "1016639",
    "end": "1023480"
  },
  {
    "text": "is going to be the name for all of these ones and then having apparently just had this well we used up two letters we",
    "start": "1023480",
    "end": "1030020"
  },
  {
    "text": "can't be going crazy we'll just use one or two from now on so we have rtb RTC rtbc and so on",
    "start": "1030020",
    "end": "1036678"
  },
  {
    "text": "and you know how many mistakes you can make I mean this is three but that's because we're on a slide like in life",
    "start": "1036679",
    "end": "1043339"
  },
  {
    "text": "there's a hundred and seven or maybe 700 there's just like so many",
    "start": "1043339",
    "end": "1048799"
  },
  {
    "text": "and and you need to copy and paste and there are three different things you need to change the name the numerical",
    "start": "1048799",
    "end": "1054200"
  },
  {
    "text": "value and the comment ask me how often people successfully change all three",
    "start": "1054200",
    "end": "1060580"
  },
  {
    "text": "but then you know you what order do you put them in do you keep them in numerical order do you keep them in alphabetical order how do you know like",
    "start": "1060740",
    "end": "1067160"
  },
  {
    "text": "if I'm just going to add another one and I want to give it the value 2006 has anyone already used 2006 there's a",
    "start": "1067160",
    "end": "1073460"
  },
  {
    "text": "delightful series of bugs when when two of these have the same numerical value right because then your switches and",
    "start": "1073460",
    "end": "1078860"
  },
  {
    "text": "whatnot are going into the wrong switch and you can't figure out why there's a ton of mistakes waiting for",
    "start": "1078860",
    "end": "1084200"
  },
  {
    "text": "you here just using a new okay now the numbers will be assigned by",
    "start": "1084200",
    "end": "1089539"
  },
  {
    "text": "the compiler so they're going to be in the right order and you can use all 26",
    "start": "1089539",
    "end": "1094700"
  },
  {
    "text": "letters of the alphabet should you desire now this is an old school unscoped Anum",
    "start": "1094700",
    "end": "1100220"
  },
  {
    "text": "which means that the names have to be unique so I might still need to have some kind of a prefix on them like RT",
    "start": "1100220",
    "end": "1105620"
  },
  {
    "text": "basic and so forth I normally would prefer you using a new class a scope denim but these are very",
    "start": "1105620",
    "end": "1112580"
  },
  {
    "text": "often in a switch and you can't switch on a new class without casting it back to an INT first",
    "start": "1112580",
    "end": "1119480"
  },
  {
    "text": "so for that particular case you might want to stick with the old school enums which case you might need to put",
    "start": "1119480",
    "end": "1125240"
  },
  {
    "text": "um prefixes on them so that you can tell them apart from the other kinds of basics",
    "start": "1125240",
    "end": "1131799"
  },
  {
    "text": "I meet a lot of this kind of stuff super common and the person who who died",
    "start": "1133160",
    "end": "1139100"
  },
  {
    "text": "you know would have been able to look over this and go what what what what no no no no you have one of these truths",
    "start": "1139100",
    "end": "1145400"
  },
  {
    "text": "and one of these forces flipped but all the new people are like I I don't know the difference between these calls at a",
    "start": "1145400",
    "end": "1151400"
  },
  {
    "text": "first glance do you notice that two of these are true in each call",
    "start": "1151400",
    "end": "1156400"
  },
  {
    "text": "it's generally a bad idea to have consecutive parameters of the same type but it really wouldn't be better if",
    "start": "1157340",
    "end": "1163100"
  },
  {
    "text": "there was one INT in the middle of all of this right it's the sheer number of parameters that's starting to make it",
    "start": "1163100",
    "end": "1168919"
  },
  {
    "text": "horrible and I find it especially frustrating if let's say the default is false",
    "start": "1168919",
    "end": "1176539"
  },
  {
    "text": "I really just want to turn on two of the seven options but I have to specify",
    "start": "1176539",
    "end": "1181700"
  },
  {
    "text": "those other five falses because you know defaults can only be at the end",
    "start": "1181700",
    "end": "1188120"
  },
  {
    "text": "so I've done this many times and it helps enormously with readability just make a struct",
    "start": "1188120",
    "end": "1193940"
  },
  {
    "text": "and uh in this case I'm taking advantage of default values I'm going to make them all false so now I only need to set the",
    "start": "1193940",
    "end": "1199220"
  },
  {
    "text": "ones that are going to be true and I change the function to take an instance of this struct",
    "start": "1199220",
    "end": "1205600"
  },
  {
    "text": "it's just a struct there's no Getters there's no Setters there's no encapsulation and the code is pretty mechanical to",
    "start": "1206299",
    "end": "1212419"
  },
  {
    "text": "change people say well where'd you get those names from well those will be the names of the parameters inside the function",
    "start": "1212419",
    "end": "1217940"
  },
  {
    "text": "right because the reason this nobody sits down in that we teach",
    "start": "1217940",
    "end": "1223100"
  },
  {
    "text": "abstraction lies pre-design stuff and says we should totes have a function that takes seven Bulls like that was",
    "start": "1223100",
    "end": "1228679"
  },
  {
    "text": "that was not done on purpose right it didn't used to take anything and then it needed one we need a special",
    "start": "1228679",
    "end": "1235460"
  },
  {
    "text": "case for Europe so we pass in this pool of whether it's Europe or not and then it needed another one the year-end",
    "start": "1235460",
    "end": "1241400"
  },
  {
    "text": "version is special okay so it adds another one uh what if the notices were already sent and we're just updating",
    "start": "1241400",
    "end": "1246799"
  },
  {
    "text": "again but we don't want to do the notices again okay so they just keep adding so generally they have pretty",
    "start": "1246799",
    "end": "1252020"
  },
  {
    "text": "good names and you just take the names of the parameters and make them the names of the elements that the struct and then",
    "start": "1252020",
    "end": "1258320"
  },
  {
    "text": "you mechanically anywhere in the code for this update function where it said if Europe something or another",
    "start": "1258320",
    "end": "1264140"
  },
  {
    "text": "you go if opt dot Europe and the rest of the code is unchanged it's pretty simple to do",
    "start": "1264140",
    "end": "1271280"
  },
  {
    "text": "then calling it looks like this I'll set up a an update options object set just the things that I want to Mark as true",
    "start": "1271280",
    "end": "1277400"
  },
  {
    "text": "because the rest all default to false and call update Europe problem is a pretty crummy name it's really just",
    "start": "1277400",
    "end": "1283640"
  },
  {
    "text": "telling you which two flags I turned on if this was a real example I could probably give it a better name there's",
    "start": "1283640",
    "end": "1289100"
  },
  {
    "text": "probably a particular circumstance that corresponds to its preliminary results for Europe",
    "start": "1289100",
    "end": "1294140"
  },
  {
    "text": "it's easy to tell the difference between this one where I'm setting two different things to true",
    "start": "1294140",
    "end": "1300279"
  },
  {
    "text": "but it's not just about parameter lists that are hard to remember like seven Bulls in a row",
    "start": "1303260",
    "end": "1308480"
  },
  {
    "text": "sometimes people are very confidently sure that they know what your parameters mean and they're wrong",
    "start": "1308480",
    "end": "1314720"
  },
  {
    "text": "so the classic example of this genre is draw rect think for a minute about what these integers mean",
    "start": "1314720",
    "end": "1322179"
  },
  {
    "text": "probably half of you thought there was X1 y1 X2 Y2 and probably half of you",
    "start": "1323419",
    "end": "1328640"
  },
  {
    "text": "thought it was X Y width height or maybe height width right it could go many",
    "start": "1328640",
    "end": "1334520"
  },
  {
    "text": "different ways the problem is a missing abstraction if my draw rectangle takes two points",
    "start": "1334520",
    "end": "1341620"
  },
  {
    "text": "now you know what those mean",
    "start": "1341620",
    "end": "1346600"
  },
  {
    "text": "when you make these structs they might not end up as structs",
    "start": "1348740",
    "end": "1355340"
  },
  {
    "text": "so I've got some function that takes three strings in a float and I decide no you know what that's",
    "start": "1355340",
    "end": "1361039"
  },
  {
    "text": "actually some kind of an abstraction it's not going to be an employee",
    "start": "1361039",
    "end": "1366200"
  },
  {
    "text": "or a purchase order because those kinds of abstractions got figured out",
    "start": "1366200",
    "end": "1371240"
  },
  {
    "text": "back during design but maybe it's an employment contract maybe it's an order item something like that",
    "start": "1371240",
    "end": "1378580"
  },
  {
    "text": "this function that takes a t whatever T is maybe this should be a member",
    "start": "1378980",
    "end": "1384799"
  },
  {
    "text": "function of the T class maybe it should and after inventing the",
    "start": "1384799",
    "end": "1390440"
  },
  {
    "text": "struct there's nothing wrong with stopping and asking yourself that this is this really a free function or",
    "start": "1390440",
    "end": "1397280"
  },
  {
    "text": "is it better served to be a member function of the class you just invented",
    "start": "1397280",
    "end": "1402440"
  },
  {
    "text": "now you know structs can have member functions you know that but most of us once we add a member function to",
    "start": "1402440",
    "end": "1408740"
  },
  {
    "text": "something we start thinking about canonical classes and we're like oh the member variable should be private I need",
    "start": "1408740",
    "end": "1414679"
  },
  {
    "text": "gets I need sets I'm going to use special member functions how many Constructors do I need oh rule of three",
    "start": "1414679",
    "end": "1420020"
  },
  {
    "text": "rule of five so like don't rush off to do that this code was working",
    "start": "1420020",
    "end": "1426380"
  },
  {
    "text": "right when these were just local variables everything was fine the reason we have",
    "start": "1426380",
    "end": "1434299"
  },
  {
    "text": "private member variables protect invariance",
    "start": "1434299",
    "end": "1440419"
  },
  {
    "text": "some classes have invariants so if I write a bank account class and I have a",
    "start": "1440419",
    "end": "1445460"
  },
  {
    "text": "transaction log and I have a balance if you were to start at zero and add and subtract every transaction in the",
    "start": "1445460",
    "end": "1451520"
  },
  {
    "text": "history of the account you should end up with the same number as what is in the balance that is the invariant of the",
    "start": "1451520",
    "end": "1456860"
  },
  {
    "text": "bank account class and this is why you don't have a set balance method you have deposit which increases the",
    "start": "1456860",
    "end": "1463580"
  },
  {
    "text": "balance and adds a transaction you have withdrawal which decreases the balance and adds a transaction and",
    "start": "1463580",
    "end": "1469640"
  },
  {
    "text": "guarantees that outside of those member functions the invariant always holds",
    "start": "1469640",
    "end": "1475520"
  },
  {
    "text": "it is possible the structure you're inventing do hold secret invariance like",
    "start": "1475520",
    "end": "1480740"
  },
  {
    "text": "maybe for your points that um X and Y have to be in the same quadrant in the",
    "start": "1480740",
    "end": "1486200"
  },
  {
    "text": "particular Universe you're working in in which case you might want to actually have set methods that would deal with",
    "start": "1486200",
    "end": "1491539"
  },
  {
    "text": "that but it's more likely that there's no invariant whatsoever which means you",
    "start": "1491539",
    "end": "1497600"
  },
  {
    "text": "don't need that kind of encapsulation you don't need Getters and Setters you don't need destructors you don't need",
    "start": "1497600",
    "end": "1503299"
  },
  {
    "text": "special member functions of any kind it's okay for these to just be a thing with a name don't run off and do design",
    "start": "1503299",
    "end": "1512259"
  },
  {
    "text": "it is a good idea to look around I mentioned that this free function taking a t might be a member function",
    "start": "1513140",
    "end": "1519020"
  },
  {
    "text": "of the new t-class it's also possible there's some other local variables that belong in that class and some other",
    "start": "1519020",
    "end": "1525380"
  },
  {
    "text": "functions that take this new type that should be member functions of it that's fine consider that possibility",
    "start": "1525380",
    "end": "1533679"
  },
  {
    "text": "I don't like out params I think if you've heard me talk before you're familiar with the fact that I don't like outpreps",
    "start": "1535159",
    "end": "1542059"
  },
  {
    "text": "you want to return something return something it's a pretty simple rule oh but I need",
    "start": "1542059",
    "end": "1547820"
  },
  {
    "text": "to return three things oh well we've only had that capability you know for as long as we've had the",
    "start": "1547820",
    "end": "1553100"
  },
  {
    "text": "language so I can understand you might not have learned that part yet right you can return a struct you can return a",
    "start": "1553100",
    "end": "1558740"
  },
  {
    "text": "pair you can return a tuple struct has a name and its pieces have a",
    "start": "1558740",
    "end": "1564740"
  },
  {
    "text": "name this is all a good thing you can write your own struct with names",
    "start": "1564740",
    "end": "1571640"
  },
  {
    "text": "other people have written a couple of Fairly handy things optional so if what you need is a Boolean like",
    "start": "1571640",
    "end": "1577520"
  },
  {
    "text": "this worked or not and then a value which is only usable if the Boolean is true well that's what optional does for",
    "start": "1577520",
    "end": "1583940"
  },
  {
    "text": "you expected can I say stood expected yet I'm getting nods from the people who are",
    "start": "1583940",
    "end": "1590120"
  },
  {
    "text": "not qualified uh I've been using expected for quite a while cybrand has a great one but we do",
    "start": "1590120",
    "end": "1596840"
  },
  {
    "text": "now have can expect stood expected uh which is two thingies and it knows",
    "start": "1596840",
    "end": "1602600"
  },
  {
    "text": "which of them is legit one's what you're expecting to calculate some object or an integer whatever and the other is an",
    "start": "1602600",
    "end": "1608779"
  },
  {
    "text": "error type and so then if everything works you get what you expect back in the value and if",
    "start": "1608779",
    "end": "1615080"
  },
  {
    "text": "it didn't work you get an error in the error that work's been done take advantage of",
    "start": "1615080",
    "end": "1621440"
  },
  {
    "text": "that don't roll your own thing where you have a bunch of pointers and you return a Bool and then depending on the Bool",
    "start": "1621440",
    "end": "1626600"
  },
  {
    "text": "you look at different ones of the pointers uh it's much more readable for everyone if you use things that people can look",
    "start": "1626600",
    "end": "1632059"
  },
  {
    "text": "up on CPP reference that's one of the things I like about optional and expected that plus they have some nice",
    "start": "1632059",
    "end": "1637220"
  },
  {
    "text": "uh bull conversions that let you say if results and it does what you think it",
    "start": "1637220",
    "end": "1642440"
  },
  {
    "text": "should do foreign the other thing I see",
    "start": "1642440",
    "end": "1648260"
  },
  {
    "text": "I don't have to understand the code not to know anything about running nuclear reactors just need to be able to pattern",
    "start": "1648260",
    "end": "1653960"
  },
  {
    "text": "match is this kind of thing now the older the code the more likely",
    "start": "1653960",
    "end": "1659179"
  },
  {
    "text": "it is that people declare a bunch of stuff at the beginning without initializing it and they're all clumped up together like this but you can also",
    "start": "1659179",
    "end": "1665960"
  },
  {
    "text": "spot it when they're spread out a little further they just don't fit on slides as well",
    "start": "1665960",
    "end": "1671779"
  },
  {
    "text": "they all start with the same three letters that I see all the time two three four",
    "start": "1671779",
    "end": "1679100"
  },
  {
    "text": "letters it's because they're all parts of the same thing in this particular case they're all parts of an employee",
    "start": "1679100",
    "end": "1685220"
  },
  {
    "text": "that is the employee first name the employee last name the employee title and the employee salary and if you do",
    "start": "1685220",
    "end": "1691159"
  },
  {
    "text": "nothing more than just gather them up into a single struct and then declare an instance of it I",
    "start": "1691159",
    "end": "1696620"
  },
  {
    "text": "mean then you consider mechanically put a dot between the EMP and the first name EMP in the last name you're good to go",
    "start": "1696620",
    "end": "1704120"
  },
  {
    "text": "often this does lead you off onto other things but just seeing the names all starting with the same letters it tells",
    "start": "1704120",
    "end": "1710960"
  },
  {
    "text": "you that these are in fact one thing and you can take advantage of that and put that information in the code",
    "start": "1710960",
    "end": "1717940"
  },
  {
    "text": "take a look at these declarations again in real life they might be slightly more",
    "start": "1721659",
    "end": "1726679"
  },
  {
    "text": "spread out without even looking at the variable names",
    "start": "1726679",
    "end": "1732320"
  },
  {
    "text": "you you see something here right there's two clumps there's two thingies",
    "start": "1732320",
    "end": "1739880"
  },
  {
    "text": "and when you look at them more closely the first clump start value and value number of points",
    "start": "1739880",
    "end": "1746120"
  },
  {
    "text": "average tolerance this is some kind of statistical something involving values",
    "start": "1746120",
    "end": "1751520"
  },
  {
    "text": "and the second clump that's a Latitude a longitude and altitude",
    "start": "1751520",
    "end": "1756559"
  },
  {
    "text": "visible secure this about some sort of physical location they're clearly very",
    "start": "1756559",
    "end": "1761600"
  },
  {
    "text": "different without I don't need domain knowledge though all I really need is that blank line",
    "start": "1761600",
    "end": "1768020"
  },
  {
    "text": "I call this a load-bearing blank line right it's very clearly demonstrating",
    "start": "1768020",
    "end": "1775220"
  },
  {
    "text": "these are two things okay you can create two classes or two",
    "start": "1775220",
    "end": "1781520"
  },
  {
    "text": "structs now to hold these thingies but look a little closer",
    "start": "1781520",
    "end": "1786799"
  },
  {
    "text": "look at the first line of each clump how long have we been told not to",
    "start": "1786799",
    "end": "1792020"
  },
  {
    "text": "declare two variables on the same line with a comma and then if there's a pointer involved it confuses people there's no pointer",
    "start": "1792020",
    "end": "1800059"
  },
  {
    "text": "but we still generally are told don't do this but whoever wrote this code did this",
    "start": "1800059",
    "end": "1805340"
  },
  {
    "text": "maybe didn't even notice that they did it that's what I love about this sometimes I talk to the person who wrote it",
    "start": "1805340",
    "end": "1812120"
  },
  {
    "text": "and I say you knew they were a thing start valid envel latitude and longitude",
    "start": "1812120",
    "end": "1817640"
  },
  {
    "text": "you knew they were a single thing you declared them on a single line and the person says huh",
    "start": "1817640",
    "end": "1824480"
  },
  {
    "text": "I guess I did right you're you're sending messages to the",
    "start": "1824480",
    "end": "1830480"
  },
  {
    "text": "future but also to yourself right now when you want to declare start valid end Val on a single line like that it's",
    "start": "1830480",
    "end": "1837020"
  },
  {
    "text": "because that pairing is really one thing listen to yourself make it one thing",
    "start": "1837020",
    "end": "1844840"
  },
  {
    "text": "now a big part of refactoring oh my goodness the big functions I've walked up to 100 lines of code please you are",
    "start": "1847100",
    "end": "1853760"
  },
  {
    "text": "like little baby uh I used to routinely have phone calls where the person would say so if you go to line",
    "start": "1853760",
    "end": "1860740"
  },
  {
    "text": "5896 in such a file you will see and that would be like",
    "start": "1860740",
    "end": "1866000"
  },
  {
    "text": "in the middle of a case statement that was itself hundreds of lines long which was in a switch statement which was",
    "start": "1866000",
    "end": "1871940"
  },
  {
    "text": "thousands of lines long and the file was 10 or 15 000 lines and yeah we had to do a lot of",
    "start": "1871940",
    "end": "1878120"
  },
  {
    "text": "refactoring but but how do you do that how do you know where in these thousands",
    "start": "1878120",
    "end": "1884240"
  },
  {
    "text": "of lines of code to grab this 106 lines and make them a function",
    "start": "1884240",
    "end": "1889640"
  },
  {
    "text": "blank lines load bearing blank lines there's also comments right the number",
    "start": "1889640",
    "end": "1896120"
  },
  {
    "text": "of people who are like pick out all the rush orders process the orders",
    "start": "1896120",
    "end": "1902240"
  },
  {
    "text": "like whoa you're so close so close",
    "start": "1902240",
    "end": "1907059"
  },
  {
    "text": "your tool will do this for you do not ever try to do this by hand",
    "start": "1909860",
    "end": "1915559"
  },
  {
    "text": "and you know the best part of any refactoring tool is the undo button",
    "start": "1915559",
    "end": "1921260"
  },
  {
    "text": "okay so you select 107 lines maybe separated by some convenient blank lines say extract function",
    "start": "1921260",
    "end": "1928279"
  },
  {
    "text": "and your tool says sure it's going to take 11 parameters four of which are out params undo that was not the correct",
    "start": "1928279",
    "end": "1935179"
  },
  {
    "text": "refactoring you want to absolutely minimize the information flow into and out of",
    "start": "1935179",
    "end": "1941419"
  },
  {
    "text": "this function you've just invented yes you need to be able to give it a name but ideally it would take one two three",
    "start": "1941419",
    "end": "1947720"
  },
  {
    "text": "parameters and would return a value and depending on where you choose to",
    "start": "1947720",
    "end": "1953720"
  },
  {
    "text": "select the lines that's what's going to grow that so when you see that it has three out params take a look at what are",
    "start": "1953720",
    "end": "1958940"
  },
  {
    "text": "the variables that are in that block of code that are still used afterwards and figure out maybe if I should select less",
    "start": "1958940",
    "end": "1965000"
  },
  {
    "text": "lines at the top or less lines at the bottom or something so that that doesn't work that way let me take a couple tries but again",
    "start": "1965000",
    "end": "1971720"
  },
  {
    "text": "without any knowledge of the domain what is the grouping of these hundreds of lines of code that minimizes the",
    "start": "1971720",
    "end": "1978200"
  },
  {
    "text": "parameters that are going into and out of that new function and then you'll need to name it but once you see the parameters and the",
    "start": "1978200",
    "end": "1985220"
  },
  {
    "text": "return type that often will be all you need to understand it oh I'm I'm adding up all of the totals okay",
    "start": "1985220",
    "end": "1993220"
  },
  {
    "text": "now if I have a 5000 line file and every 100 ish lines of code becomes a function",
    "start": "1993980",
    "end": "1999620"
  },
  {
    "text": "I then have a function that is 50 function calls in a row perhaps that itself could do with a",
    "start": "1999620",
    "end": "2007240"
  },
  {
    "text": "little compression here's where you need some judgment okay maybe you could turn it into five",
    "start": "2007240",
    "end": "2013840"
  },
  {
    "text": "ish functions Each of which calls 10 ish functions don't ever do this numerically or",
    "start": "2013840",
    "end": "2019899"
  },
  {
    "text": "mechanically uh one of my first jobs programming I was an undergraduate student and at the",
    "start": "2019899",
    "end": "2026380"
  },
  {
    "text": "University of Waterloo we do co-op so we're put out into industry and do real jobs and uh and I was working in",
    "start": "2026380",
    "end": "2032919"
  },
  {
    "text": "industry in Fortran and the person there who was in charge of us was to my mind very old and",
    "start": "2032919",
    "end": "2039700"
  },
  {
    "text": "experienced I mean she probably was 24 25 years old uh and she knew everything",
    "start": "2039700",
    "end": "2045600"
  },
  {
    "text": "and one of her rules was no function could be more than 20 lines long",
    "start": "2045600",
    "end": "2050618"
  },
  {
    "text": "so if you wrote a 21 line function we didn't know any better and it seems that she didn't know any better the",
    "start": "2050619",
    "end": "2056440"
  },
  {
    "text": "first 20 lines would be called like calc 1. and the last line would be called like calc 2 and then you just call calc",
    "start": "2056440",
    "end": "2062618"
  },
  {
    "text": "one followed by calc 2. please don't ever do that so when I say like five and ten I don't",
    "start": "2062619",
    "end": "2068138"
  },
  {
    "text": "mean any of these numbers precisely but would it make sense to take your 50",
    "start": "2068139",
    "end": "2074138"
  },
  {
    "text": "function calls and Clump them up a bit yes if you can give the clumps names if",
    "start": "2074139",
    "end": "2079720"
  },
  {
    "text": "that gives value if this nine function calls are all about permission",
    "start": "2079720",
    "end": "2085358"
  },
  {
    "text": "and these 12 down here are all about I don't know sending emails or something then you can give them names then that's",
    "start": "2085359",
    "end": "2091179"
  },
  {
    "text": "a good thing to do if it's just going to add confusion if it's just going to add another level of",
    "start": "2091179",
    "end": "2096460"
  },
  {
    "text": "indirection then don't do it just give me the 50 function calls I think it's unlikely that none of them have any",
    "start": "2096460",
    "end": "2102160"
  },
  {
    "text": "commonality but don't invent abstraction that doesn't have a name",
    "start": "2102160",
    "end": "2108880"
  },
  {
    "text": "that doesn't have a purpose that doesn't add clarity remember we're trying to reduce repetition we're trying to reduce",
    "start": "2108880",
    "end": "2115780"
  },
  {
    "text": "duplication we're also trying to isolate parts of the problem",
    "start": "2115780",
    "end": "2120359"
  },
  {
    "text": "I saw this on Twitter recently someone was complaining about comments at the end of a long",
    "start": "2125260",
    "end": "2132160"
  },
  {
    "text": "series of nested things that ended with closed braces so you said while",
    "start": "2132160",
    "end": "2138820"
  },
  {
    "text": "somewhere inside the wall there's an if it's like a couple hundred lines in the if then inside one maybe the if maybe",
    "start": "2138820",
    "end": "2143980"
  },
  {
    "text": "the else there's like a for Loop and it gets to the point where somebody feels the need to label the close braces this",
    "start": "2143980",
    "end": "2150160"
  },
  {
    "text": "is the end of the four this is the end of the if this is the end of the while and the original assertion on Twitter",
    "start": "2150160",
    "end": "2155740"
  },
  {
    "text": "was that they were pointless they were just noise they should be deleted and my statement was no no no no no",
    "start": "2155740",
    "end": "2162300"
  },
  {
    "text": "it's telling you it's too long and too nested don't just delete them use them",
    "start": "2162300",
    "end": "2170260"
  },
  {
    "text": "because very often when I used to do this I would just copy the original if and put that in the",
    "start": "2170260",
    "end": "2177040"
  },
  {
    "text": "comment but kids these days are way more hard working than that they paraphrase the condition",
    "start": "2177040",
    "end": "2184900"
  },
  {
    "text": "they're telling you the name of the function that you're going to use to put inside where these braces were",
    "start": "2184900",
    "end": "2192160"
  },
  {
    "text": "okay it's got a name we're processing each outstanding item or this is what you do",
    "start": "2192160",
    "end": "2198220"
  },
  {
    "text": "when you're over limit fantastic foreign does the if go in the function or is it",
    "start": "2198220",
    "end": "2204940"
  },
  {
    "text": "if function that's going to be a judgment call on your part a couple different ways to do",
    "start": "2204940",
    "end": "2210820"
  },
  {
    "text": "it here's a situation using reports as an example again and I apologize for the font size but I'll read it to you for",
    "start": "2210820",
    "end": "2216940"
  },
  {
    "text": "every R in reports and then there's a closed brace way down at the bottom of the screen",
    "start": "2216940",
    "end": "2222220"
  },
  {
    "text": "if we'll call ours header needed r dot our points to do header so imagine this",
    "start": "2222220",
    "end": "2228579"
  },
  {
    "text": "didn't used to say do header used to be 20 lines of code then we do some little local",
    "start": "2228579",
    "end": "2234460"
  },
  {
    "text": "calculations about how many lines are going to be in the report and then while for each line",
    "start": "2234460",
    "end": "2239680"
  },
  {
    "text": "well again r dot points to new line was maybe 100 lines of code and that's why",
    "start": "2239680",
    "end": "2244900"
  },
  {
    "text": "we needed to have comments on the closed brace of that while then we have another if about if you need a footer",
    "start": "2244900",
    "end": "2250839"
  },
  {
    "text": "so this is a simple way to do it keep your ifs keep your walls keep all your nesting but just take whatever was",
    "start": "2250839",
    "end": "2256240"
  },
  {
    "text": "between the braces and make it a function because of the scoping of braces the",
    "start": "2256240",
    "end": "2261820"
  },
  {
    "text": "chances are you'll have really limited parameter action when you pick these out into functions these are member",
    "start": "2261820",
    "end": "2268000"
  },
  {
    "text": "functions they're only working with member variables is fine so this isn't wrong",
    "start": "2268000",
    "end": "2273640"
  },
  {
    "text": "but you might prefer to do this so what this says is you know what I",
    "start": "2273640",
    "end": "2279760"
  },
  {
    "text": "don't know who this code is that's looping through all the reports but why does it need to know whether a",
    "start": "2279760",
    "end": "2286359"
  },
  {
    "text": "report needs a header or not why is that the business of this calling code we think about encapsulation and",
    "start": "2286359",
    "end": "2293619"
  },
  {
    "text": "abstraction and keeping like would like sure reports know whether they need headers or not but why does external",
    "start": "2293619",
    "end": "2299859"
  },
  {
    "text": "code need to say hey do you need a header in that case do your header maybe we better just say do your header",
    "start": "2299859",
    "end": "2305980"
  },
  {
    "text": "and some reports would be I'm good right they don't need a header they just return",
    "start": "2305980",
    "end": "2311320"
  },
  {
    "text": "that works why does the external code need to know how many lines there are in the body of the report just do your body",
    "start": "2311320",
    "end": "2318220"
  },
  {
    "text": "I mean I'm making these functions up so I can make them up however I like so these are both right",
    "start": "2318220",
    "end": "2324460"
  },
  {
    "text": "some people when they see that one they go why does the calling code need to know there is a header then there's the body",
    "start": "2324460",
    "end": "2331060"
  },
  {
    "text": "then there's a footer why don't we just have do report and I'm not going to argue that's what happens when you start",
    "start": "2331060",
    "end": "2338020"
  },
  {
    "text": "putting missing abstractions in as the code gets simpler and you can understand it then you can say things",
    "start": "2338020",
    "end": "2344020"
  },
  {
    "text": "like I got business logic in the wrong place the logic that says a report starts with",
    "start": "2344020",
    "end": "2349119"
  },
  {
    "text": "a header then there's a body then there's a footer that's report talk that belongs inside report why does some code",
    "start": "2349119",
    "end": "2354760"
  },
  {
    "text": "that's not in report knowing that and your instructions get better",
    "start": "2354760",
    "end": "2361260"
  },
  {
    "text": "it's very common to find especially an older code but it happens in newer code too classes that are very similar but",
    "start": "2364240",
    "end": "2371800"
  },
  {
    "text": "only similar right and going through and bringing inheritance into play can make a real difference here now this doesn't",
    "start": "2371800",
    "end": "2378520"
  },
  {
    "text": "have to mean polymorphism and indirection and virtual functions this can be your common or garden",
    "start": "2378520",
    "end": "2384599"
  },
  {
    "text": "implementation inheritance you're already using what John lamb calls editor inheritance copy paste",
    "start": "2384599",
    "end": "2393720"
  },
  {
    "text": "the problem with editor inheritance is you don't necessarily edit the same for the history of time right",
    "start": "2394420",
    "end": "2402280"
  },
  {
    "text": "so imagine that you have like an old system that sent faxes and there's a class called facts",
    "start": "2402280",
    "end": "2408820"
  },
  {
    "text": "and roughly 20 years ago somebody also wanted this thing to be able to send emails so they made a class called email",
    "start": "2408820",
    "end": "2415680"
  },
  {
    "text": "using editor inheritance they copied fax.h and fax.cpp to email.h and",
    "start": "2415680",
    "end": "2421839"
  },
  {
    "text": "email.cpp and then went through effectively with a crayon Crossing out facts and writing an email and then they",
    "start": "2421839",
    "end": "2427359"
  },
  {
    "text": "made a few changes because faxes go to phone numbers but emails go to addresses maybe emails can be cc'd that kind of",
    "start": "2427359",
    "end": "2433240"
  },
  {
    "text": "thing made a few changes and then over time these two classes have been",
    "start": "2433240",
    "end": "2440380"
  },
  {
    "text": "living in parallel maybe there's not two now maybe there's seven right because maybe in addition to faxes",
    "start": "2440380",
    "end": "2446440"
  },
  {
    "text": "and emails you can also send texts and whatsapps and whatever else",
    "start": "2446440",
    "end": "2452160"
  },
  {
    "text": "and it's starting to bother people when you need to make a change that you need to make that same change in seven places",
    "start": "2452560",
    "end": "2459220"
  },
  {
    "text": "so if you put all the commonality in a base class and then have each of the drive classes",
    "start": "2459220",
    "end": "2464740"
  },
  {
    "text": "just only override what's different for them maybe some of the times when you need to",
    "start": "2464740",
    "end": "2469900"
  },
  {
    "text": "make changes you only need to make it in the one place in the base class instead of the seven different places uh in",
    "start": "2469900",
    "end": "2475599"
  },
  {
    "text": "these what are now derived classes but used to be independent just similar classes",
    "start": "2475599",
    "end": "2481300"
  },
  {
    "text": "this can be a wonderful way to fix mystery bucks it can also be a way to get the business",
    "start": "2481300",
    "end": "2487180"
  },
  {
    "text": "very mad at you and you need to know this is one of the few times when you need to check with",
    "start": "2487180",
    "end": "2492220"
  },
  {
    "text": "the business imagine that you can export as XML and as Json",
    "start": "2492220",
    "end": "2497260"
  },
  {
    "text": "and you discover the XML exports include the sales tax",
    "start": "2497260",
    "end": "2502380"
  },
  {
    "text": "and the Json reports do not feels like a bug right you're going to",
    "start": "2502380",
    "end": "2507640"
  },
  {
    "text": "be a hero you're going to fix the bug you're going to get a phone call",
    "start": "2507640",
    "end": "2513299"
  },
  {
    "text": "it's pretty common to hear oh yeah we we had a new customer and they wanted it in",
    "start": "2513640",
    "end": "2519160"
  },
  {
    "text": "Json but they also wanted the sales tax included so we just have the Json export",
    "start": "2519160",
    "end": "2524800"
  },
  {
    "text": "include the sales tax for them and the old customers they didn't want the sales tax they're still just using the XML report",
    "start": "2524800",
    "end": "2530800"
  },
  {
    "text": "as common as dirt what appears to be a simple format difference is actually a business rule difference",
    "start": "2530800",
    "end": "2537099"
  },
  {
    "text": "the PDF reports have subtotals and the and the HTML reports don't because",
    "start": "2537099",
    "end": "2542859"
  },
  {
    "text": "they're for different external or internal customers so when you find this similar stuff you",
    "start": "2542859",
    "end": "2550359"
  },
  {
    "text": "bring it together and you're going to make everything consistent you need to phone someone or email someone or slack someone or",
    "start": "2550359",
    "end": "2556780"
  },
  {
    "text": "Discord someone or whatever and say is it deliberate that they're inconsistent in this way",
    "start": "2556780",
    "end": "2562119"
  },
  {
    "text": "and you may have to encode that and then harking back to my naming talk you might want to change the names right the",
    "start": "2562119",
    "end": "2569200"
  },
  {
    "text": "difference between these two exports is not just that one's XML and one's Json but that one has sales tax and one",
    "start": "2569200",
    "end": "2574240"
  },
  {
    "text": "doesn't you can put that in their names they can be called like XML with sales tax and Json without sales tax and now",
    "start": "2574240",
    "end": "2579819"
  },
  {
    "text": "people will understand this is a deliberate choice",
    "start": "2579819",
    "end": "2583680"
  },
  {
    "text": "foreign how many of you want to do this bit I",
    "start": "2584920",
    "end": "2590800"
  },
  {
    "text": "want to write a template anyone the front row a few people in the front",
    "start": "2590800",
    "end": "2596500"
  },
  {
    "text": "right yeah I told right I'll write a template everyone I was like no look I'll do a lot of things but I'm not",
    "start": "2596500",
    "end": "2602020"
  },
  {
    "text": "going to become one of those template writing people I get it I get it I do and and that's fine there",
    "start": "2602020",
    "end": "2609400"
  },
  {
    "text": "are other things you could do if you've got a bunch of very similar functions you could find some Base Class of",
    "start": "2609400",
    "end": "2615280"
  },
  {
    "text": "whatever this thing works with and have your function just take that so I'll have to write it once and I'll call",
    "start": "2615280",
    "end": "2620740"
  },
  {
    "text": "derived functions and that's better than having seven versions of my function I'll have one that works with something",
    "start": "2620740",
    "end": "2625900"
  },
  {
    "text": "they have in common that can be the right choice I can find maybe not something they all",
    "start": "2625900",
    "end": "2631180"
  },
  {
    "text": "are but something they all have so think about the STL which I know is a template so maybe not a good example but they",
    "start": "2631180",
    "end": "2637000"
  },
  {
    "text": "work they don't work with containers they work with iterators right and all the containers have iterators so is there something like that that you could",
    "start": "2637000",
    "end": "2642880"
  },
  {
    "text": "do instead of having your function take a document it could take the text that's in the document and work that way",
    "start": "2642880",
    "end": "2650200"
  },
  {
    "text": "or I could write a helper function and all my similar functions could all call the helper function if those aren't wrong",
    "start": "2650200",
    "end": "2658060"
  },
  {
    "text": "if you are thinking of doing those things go ahead but templates are often cleaner let me choose the world's",
    "start": "2658060",
    "end": "2663760"
  },
  {
    "text": "simplest example of adding of a function called add int that takes",
    "start": "2663760",
    "end": "2668800"
  },
  {
    "text": "two integers and returns an integer then I have another function called add colors I don't know quite what that",
    "start": "2668800",
    "end": "2675099"
  },
  {
    "text": "would mean but it takes two colors and returns a color and add string returns a string",
    "start": "2675099",
    "end": "2680260"
  },
  {
    "text": "there's no natural commonality right you can't say these are all",
    "start": "2680260",
    "end": "2685660"
  },
  {
    "text": "Edibles or something and then call their derived plus function that's just weird okay and there's also the problem of the",
    "start": "2685660",
    "end": "2694119"
  },
  {
    "text": "return type if I make this take something vague and then I call it with two strings then",
    "start": "2694119",
    "end": "2700599"
  },
  {
    "text": "I have to cast whatever I get back because I know it's really a string because I called it with two strings like this kind of getting gross",
    "start": "2700599",
    "end": "2707020"
  },
  {
    "text": "but if you make a template It Takes Two T's and returns a t you're done cleaner",
    "start": "2707020",
    "end": "2712420"
  },
  {
    "text": "so if you're really tying yourself in knots and especially if you're tying yourself in knots around return types",
    "start": "2712420",
    "end": "2718900"
  },
  {
    "text": "consider writing a template I swear it does not hurt I have written templates",
    "start": "2718900",
    "end": "2724000"
  },
  {
    "text": "it didn't hurt it's sometimes very very cool so you wouldn't really reach for it",
    "start": "2724000",
    "end": "2729520"
  },
  {
    "text": "I want to encourage you to think about it and I love this example",
    "start": "2729520",
    "end": "2736660"
  },
  {
    "text": "this comes from the book guy wrote this",
    "start": "2736660",
    "end": "2742660"
  },
  {
    "text": "if we're on Windows and you want to know whether the letter A was pressed or not you call a global function called get key State passing in the Single",
    "start": "2742660",
    "end": "2749440"
  },
  {
    "text": "Character a you bitwise and that with 8 000 because of course you do and uh if that's",
    "start": "2749440",
    "end": "2756000"
  },
  {
    "text": "non-zero then someone press the letter A uh for Linux he wasn't prepared to even",
    "start": "2756000",
    "end": "2761859"
  },
  {
    "text": "write it down and you will see this stuff",
    "start": "2761859",
    "end": "2768099"
  },
  {
    "text": "sprinkled throughout user interface code if you have a function",
    "start": "2768099",
    "end": "2775839"
  },
  {
    "text": "that's on average a couple dozen lines long it'll probably be only once in each",
    "start": "2775839",
    "end": "2780940"
  },
  {
    "text": "function but there might be 10 different functions in the same file that have this check in them and of course you're",
    "start": "2780940",
    "end": "2786880"
  },
  {
    "text": "not just checking for whether or not the letter A was pressed you have another check for whether or not someone's pressed control something or another and",
    "start": "2786880",
    "end": "2792700"
  },
  {
    "text": "all the different platform specific things you might need to check for",
    "start": "2792700",
    "end": "2798160"
  },
  {
    "text": "and the key to what I'm going to show you as an abstraction is to understand that I mispronounced the if",
    "start": "2798160",
    "end": "2805900"
  },
  {
    "text": "most of us pronounce this if as if we are running on Windows if we're on Windows",
    "start": "2805900",
    "end": "2811660"
  },
  {
    "text": "that's not what's being checked for it's not a runtime check if we are building four windows",
    "start": "2811660",
    "end": "2819040"
  },
  {
    "text": "and that changes everything",
    "start": "2819040",
    "end": "2822480"
  },
  {
    "text": "make a file actually make several files called for example keypress.h",
    "start": "2824440",
    "end": "2830920"
  },
  {
    "text": "the windows version of keypress.h does the getkey state thing the Linux version of keypress.h does the",
    "start": "2830920",
    "end": "2838900"
  },
  {
    "text": "complicated thing but they both think declaring this function called Key State user code just calls Key State after",
    "start": "2838900",
    "end": "2847359"
  },
  {
    "text": "including keypress.h your build system",
    "start": "2847359",
    "end": "2852819"
  },
  {
    "text": "make sure the right header gets included because that's how those flags got set",
    "start": "2852819",
    "end": "2858099"
  },
  {
    "text": "right when you're building for Windows you set the win32 flag when you're building for Linux you set the Linux",
    "start": "2858099",
    "end": "2864160"
  },
  {
    "text": "flag well why not when you're building for Windows include the windows version of",
    "start": "2864160",
    "end": "2870160"
  },
  {
    "text": "keypress.h when you're building for Linux include the Linux version oh all of a sudden you can actually",
    "start": "2870160",
    "end": "2876280"
  },
  {
    "text": "support three platforms without trying to deal with what is effectively a switch statement in preprocessor",
    "start": "2876280",
    "end": "2881500"
  },
  {
    "text": "includes because you could just have three files and all of the window stuff is in one",
    "start": "2881500",
    "end": "2886780"
  },
  {
    "text": "file all of the Linux stuff is in one file it's a beautiful example of isolation your windows aware person",
    "start": "2886780",
    "end": "2892060"
  },
  {
    "text": "maintains the Windows File your Linux aware person maintains a Linux file and everybody else can ignore it they just",
    "start": "2892060",
    "end": "2898540"
  },
  {
    "text": "call in Key State then a miracle occurs I don't know why it works but it works",
    "start": "2898540",
    "end": "2903640"
  },
  {
    "text": "it comes from realizing that the if is not testing what we're running on but what we're building for and we have",
    "start": "2903640",
    "end": "2909339"
  },
  {
    "text": "better ways of building for different platforms than we used to have I love this example as a way to eliminate",
    "start": "2909339",
    "end": "2916060"
  },
  {
    "text": "complexity entirely there there is no complexity when you're when you're done",
    "start": "2916060",
    "end": "2922119"
  },
  {
    "text": "once you understand that which keypress.h got included is chosen by your build system",
    "start": "2922119",
    "end": "2928079"
  },
  {
    "text": "now I mentioned the idea of a report type and it's it's common as dirt you have an account type a report type a",
    "start": "2930220",
    "end": "2937240"
  },
  {
    "text": "document type a whatever it's not wrong classes have a type member variable all",
    "start": "2937240",
    "end": "2943300"
  },
  {
    "text": "the time and it lets you every once in a while do special things for special kinds of accounts or special kinds of",
    "start": "2943300",
    "end": "2949060"
  },
  {
    "text": "reports where it starts to hurt is as everything",
    "start": "2949060",
    "end": "2954160"
  },
  {
    "text": "grows and go from having two types to having 20 types to having 200 types",
    "start": "2954160",
    "end": "2960819"
  },
  {
    "text": "and you go from having mostly commonality with a little bit of special handling to pretty much all special",
    "start": "2960819",
    "end": "2967359"
  },
  {
    "text": "handling and that's when the type approach is probably not helping you anymore",
    "start": "2967359",
    "end": "2973480"
  },
  {
    "text": "a switch statement that fits on a screen is useful better than a bunch of ips a switch statement that is 5000 lines long",
    "start": "2973480",
    "end": "2980800"
  },
  {
    "text": "not so much and especially when you find functions where there is no commonality",
    "start": "2980800",
    "end": "2987579"
  },
  {
    "text": "but the entire thing is just a switch statement this was the dream if you will",
    "start": "2987579",
    "end": "2995260"
  },
  {
    "text": "I'm going to print the header of this report and this would be no different if it was a member function of report okay",
    "start": "2995260",
    "end": "3001020"
  },
  {
    "text": "I'm going to have a bunch of common stuff 1500 lines of commonality the top 50 100 lines of commonality at the",
    "start": "3001020",
    "end": "3006119"
  },
  {
    "text": "bottom and then this one little switch for just this special stuff to know the",
    "start": "3006119",
    "end": "3011940"
  },
  {
    "text": "basic header the customer header the big customer header this is using the same enume that I invented half an hour ago",
    "start": "3011940",
    "end": "3017339"
  },
  {
    "text": "for the defines fine",
    "start": "3017339",
    "end": "3023040"
  },
  {
    "text": "that's like 10 lines there's 50 lines above it 50 lines below it there's just a little diversion no",
    "start": "3023040",
    "end": "3029400"
  },
  {
    "text": "big deal when there's three report types when there's 200 report types things get",
    "start": "3029400",
    "end": "3035520"
  },
  {
    "text": "kind of yuckier and especially when there's 200 report types and most of them do the same things as",
    "start": "3035520",
    "end": "3042599"
  },
  {
    "text": "each other this is a very very simplified version of stuff I saw in real life",
    "start": "3042599",
    "end": "3048960"
  },
  {
    "text": "I have a function called footer needed which you saw being used in the nested",
    "start": "3048960",
    "end": "3055020"
  },
  {
    "text": "fours and Wilds all it is is a switch there's nothing in there besides the switch and we have these different case",
    "start": "3055020",
    "end": "3060599"
  },
  {
    "text": "statements but all it can do is return true or false so if there are 200 report types and there often are",
    "start": "3060599",
    "end": "3065940"
  },
  {
    "text": "this means case 100 case statements in a row return true",
    "start": "3065940",
    "end": "3072359"
  },
  {
    "text": "and then case something else in another 100 or so return uh case statements in a row and then return false",
    "start": "3072359",
    "end": "3078240"
  },
  {
    "text": "that's really nasty where do you put them like when I have to add a new one what order do I add them in are they",
    "start": "3078240",
    "end": "3084780"
  },
  {
    "text": "alphabetical or the numerical according to the old numerical defines we aren't using anymore like and maybe someone",
    "start": "3084780",
    "end": "3091020"
  },
  {
    "text": "already added it that's fun uh and you'll notice we have this assert false now down at the bottom which is",
    "start": "3091020",
    "end": "3096059"
  },
  {
    "text": "something that developers put in to protect themselves because there's food are needed there's header needed",
    "start": "3096059",
    "end": "3102059"
  },
  {
    "text": "there's 12 20 different functions you have to remember to add cases to all of them so you have the assert so that if",
    "start": "3102059",
    "end": "3107700"
  },
  {
    "text": "you forget it'll catch it for you and I know there are now compiler settings to do that for you but this sample code",
    "start": "3107700",
    "end": "3113760"
  },
  {
    "text": "comes from before that time and this is hard to maintain it's also almost impossible to read",
    "start": "3113760",
    "end": "3119819"
  },
  {
    "text": "like if someone says I'm not getting a footer on the reports for",
    "start": "3119819",
    "end": "3125400"
  },
  {
    "text": "such a customer and you go and you look and you see that it's a big customer report answering a",
    "start": "3125400",
    "end": "3130500"
  },
  {
    "text": "simple question like are we supposed to have a footer on the big customer report can be reasonably difficult to do",
    "start": "3130500",
    "end": "3136800"
  },
  {
    "text": "and I faced this with a real customer they had a simple 21 step procedure for",
    "start": "3136800",
    "end": "3141900"
  },
  {
    "text": "adding a new report and it was simple because I wrote it up",
    "start": "3141900",
    "end": "3147059"
  },
  {
    "text": "for them what they had before was you phoned someone and they walked you through it for several hours so it was a",
    "start": "3147059",
    "end": "3152220"
  },
  {
    "text": "huge Improvement that I wrote up their 21 step procedure but we obviously needed to make it simpler than that",
    "start": "3152220",
    "end": "3157680"
  },
  {
    "text": "and so we had this class report already and all I did was make the",
    "start": "3157680",
    "end": "3162960"
  },
  {
    "text": "individual specific reports derive from report and added little tiny overrides",
    "start": "3162960",
    "end": "3168839"
  },
  {
    "text": "like here footer needed return false that's easy to read if you want to know",
    "start": "3168839",
    "end": "3175800"
  },
  {
    "text": "whether the the Europe basic report includes Footers or not pretty easy to go and read this function and say that",
    "start": "3175800",
    "end": "3181619"
  },
  {
    "text": "looks like a no much easier than the old switch approach and uh two ways you can come about this",
    "start": "3181619",
    "end": "3188400"
  },
  {
    "text": "one is if it's always true if all reports have Footers except for the three weirdos",
    "start": "3188400",
    "end": "3194280"
  },
  {
    "text": "then you can have a implementation in the base class that returns true and",
    "start": "3194280",
    "end": "3199800"
  },
  {
    "text": "only override it for the three weirdos which will make it really obvious for people who are trying to answer the",
    "start": "3199800",
    "end": "3204839"
  },
  {
    "text": "question or if you're worried you'll forget you can make it pure virtual in the base class and then the compiler will tell",
    "start": "3204839",
    "end": "3211200"
  },
  {
    "text": "you that you forgot to implement the pure virtual function in the drive class either way much simpler than putting",
    "start": "3211200",
    "end": "3216480"
  },
  {
    "text": "assert falses in the defaults of switches and I have to tell you I did that in",
    "start": "3216480",
    "end": "3222780"
  },
  {
    "text": "real life and it worked beautifully and it took the effort to add new reports down",
    "start": "3222780",
    "end": "3228720"
  },
  {
    "text": "by by much less than half it was much much quicker afterwards and it made a difference because they charged",
    "start": "3228720",
    "end": "3233760"
  },
  {
    "text": "customers for adding reports so let them either make more profit or charge less depending how you want to look at it",
    "start": "3233760",
    "end": "3240440"
  },
  {
    "text": "sometimes when I insist on good names for things the truth comes out that the reason something doesn't have a good",
    "start": "3242760",
    "end": "3248160"
  },
  {
    "text": "name is because it's not really a good sized abstraction functions that are called update and",
    "start": "3248160",
    "end": "3254520"
  },
  {
    "text": "process and do it in classes that are called stuff and data and information",
    "start": "3254520",
    "end": "3260579"
  },
  {
    "text": "oh you all act like you never wrote one but I know you did the reason you can't name them is",
    "start": "3260579",
    "end": "3267000"
  },
  {
    "text": "they're the wrong size and you should maybe split it up what does it keep track of what does it",
    "start": "3267000",
    "end": "3273359"
  },
  {
    "text": "do this is all the way back to like CRC cards from 40 years ago but",
    "start": "3273359",
    "end": "3279540"
  },
  {
    "text": "if it's doing more than one thing it probably is more than one thing",
    "start": "3279540",
    "end": "3286460"
  },
  {
    "text": "how are you gonna break it up white space is again your friend sometimes there's comments but there",
    "start": "3287040",
    "end": "3292500"
  },
  {
    "text": "doesn't have to be so here's all our private member variables and here's a blank line and then there's some more private member",
    "start": "3292500",
    "end": "3298500"
  },
  {
    "text": "variables why that is a note from the past maybe it's only from yesterday but",
    "start": "3298500",
    "end": "3303960"
  },
  {
    "text": "it's a note from the past right two thingies here's all our public member functions",
    "start": "3303960",
    "end": "3310319"
  },
  {
    "text": "oh sure look your special ones your Constructors your destructors that are then a blank line then the good stuff I get that but why is your good stuff",
    "start": "3310319",
    "end": "3317160"
  },
  {
    "text": "broken into two pieces because there's two pieces right I'm",
    "start": "3317160",
    "end": "3322319"
  },
  {
    "text": "boring your watch to tell you what time it is but you know what okay I'm showing you how to read watches this is how it's",
    "start": "3322319",
    "end": "3327420"
  },
  {
    "text": "done same with the gaps between the blocks of the code when you implement those functions",
    "start": "3327420",
    "end": "3332520"
  },
  {
    "text": "it's telling you about the grouping all you need to do is read it",
    "start": "3332520",
    "end": "3338420"
  },
  {
    "text": "but people say to me why why are you breaking up my beautiful information",
    "start": "3339800",
    "end": "3346319"
  },
  {
    "text": "it's it's so easy that's that's why I'm breaking it up because it's so easy",
    "start": "3346319",
    "end": "3353520"
  },
  {
    "text": "okay because you just start using stuff like hey look the font is right there I'm going to use",
    "start": "3353520",
    "end": "3359520"
  },
  {
    "text": "the font that's going to be helpful and you're taking a chance that you're breaking something",
    "start": "3359520",
    "end": "3365280"
  },
  {
    "text": "else we already say we don't want Global mutable State why it's so easy if all",
    "start": "3365280",
    "end": "3371280"
  },
  {
    "text": "our variables were globals how easy life would be no because we would break stuff",
    "start": "3371280",
    "end": "3376980"
  },
  {
    "text": "when you separate things you have a better design when you have encapsulation you have a better design",
    "start": "3376980",
    "end": "3382740"
  },
  {
    "text": "and when you're explicit about what's going across boundaries and you minimize what goes across boundaries you have a",
    "start": "3382740",
    "end": "3389520"
  },
  {
    "text": "better design so imagine I have a class that represents an employee",
    "start": "3389520",
    "end": "3395520"
  },
  {
    "text": "and it's full of stuff about that person as a human being their name their birth date where they",
    "start": "3395520",
    "end": "3402119"
  },
  {
    "text": "live it's stuff about their business relationship with you your employee their salary how many hours they've",
    "start": "3402119",
    "end": "3408540"
  },
  {
    "text": "worked this year how much vacation they've used and then some stuff about your and their shared relationship with",
    "start": "3408540",
    "end": "3414720"
  },
  {
    "text": "the government how many taxes you've already taken off and sent to the government on their behalf that kind of thing these are",
    "start": "3414720",
    "end": "3420660"
  },
  {
    "text": "three like separate things if you have code that sends people birthday cards I have vendors who send",
    "start": "3420660",
    "end": "3427020"
  },
  {
    "text": "me birthday cards I find really creepy I didn't give them my birthday so they could send me cards but they do but if",
    "start": "3427020",
    "end": "3432359"
  },
  {
    "text": "you're going to send your employees birthday cards that's different from writing up their tax paperwork at the end of the year right",
    "start": "3432359",
    "end": "3439559"
  },
  {
    "text": "so you say I'm going to split my employee class into these three functions that's great but then or into",
    "start": "3439559",
    "end": "3444599"
  },
  {
    "text": "these three subclasses but then where do I keep the functions so chances are you're going to make a",
    "start": "3444599",
    "end": "3450359"
  },
  {
    "text": "class called personal employee personal information employee will have a member variable Pi which is their personal",
    "start": "3450359",
    "end": "3456420"
  },
  {
    "text": "information and another one with their tax stuff another one with their salary stuff and I need to write your tax slip at the",
    "start": "3456420",
    "end": "3463800"
  },
  {
    "text": "end of the year so that's a function in employee right now",
    "start": "3463800",
    "end": "3469380"
  },
  {
    "text": "will I move it into one of these aggregated classes well probably not because there's outside code calling it",
    "start": "3469380",
    "end": "3475440"
  },
  {
    "text": "but I might just delegate right the the function sitting in employee might do nothing but call the tax slips uh",
    "start": "3475440",
    "end": "3482520"
  },
  {
    "text": "prepare method but is it the tax slips prepare method or is it the personal information method",
    "start": "3482520",
    "end": "3488040"
  },
  {
    "text": "like you have to make a decision most of the time it can be as simple as numerically I use seven things from this",
    "start": "3488040",
    "end": "3495180"
  },
  {
    "text": "new smaller class and none from the others well I guess it's a member function of that",
    "start": "3495180",
    "end": "3501000"
  },
  {
    "text": "where it's kind of balanced like your tax slip has your name and address on it which is your personal information yeah",
    "start": "3501000",
    "end": "3506099"
  },
  {
    "text": "but this is about your taxes right so it goes in the taxes class",
    "start": "3506099",
    "end": "3511578"
  },
  {
    "text": "making the information that you're passing around obvious alerts you when you're taking a",
    "start": "3512280",
    "end": "3518940"
  },
  {
    "text": "dependency that maybe you should not be taking that's what's best about a good splitting up why do I need my home",
    "start": "3518940",
    "end": "3526440"
  },
  {
    "text": "address to print my tax slip well that's easy in Canada we're supposed to print the home address on the tax slip okay",
    "start": "3526440",
    "end": "3532920"
  },
  {
    "text": "but maybe in some other countries you don't do that so you're like why are you passing personal information in",
    "start": "3532920",
    "end": "3538520"
  },
  {
    "text": "I have to rearrange the inside of the class it may be enough to rearrange those Getters and Setters that I said",
    "start": "3539940",
    "end": "3546059"
  },
  {
    "text": "you shouldn't have run off to write imagine a huge class with all these",
    "start": "3546059",
    "end": "3551640"
  },
  {
    "text": "getters it's got something to do with uh displaying text on a screen probably",
    "start": "3551640",
    "end": "3556799"
  },
  {
    "text": "right we've got some X Y coordinates foreground and background color actual text",
    "start": "3556799",
    "end": "3562500"
  },
  {
    "text": "and we have dozens of gets dozens of sets and then presumably a whole pile of like business logic as well",
    "start": "3562500",
    "end": "3569280"
  },
  {
    "text": "if you just leave the member variables alone but change these gets so that they return little abstractions",
    "start": "3569280",
    "end": "3576540"
  },
  {
    "text": "like location and appearance it's much more obvious that you need to call them kind of in clumps probably",
    "start": "3576540",
    "end": "3583079"
  },
  {
    "text": "everyone was calling get X immediately then called get why why not make a single call to location and get the X and Y",
    "start": "3583079",
    "end": "3589020"
  },
  {
    "text": "but only the X and Y if you want to know the colors you need to make another call makes it more obvious which things are",
    "start": "3589020",
    "end": "3595260"
  },
  {
    "text": "using what out of this big interface and this is about",
    "start": "3595260",
    "end": "3600599"
  },
  {
    "text": "the constant change if I need another parameter where I used to call get X and get y",
    "start": "3600599",
    "end": "3607200"
  },
  {
    "text": "I just let well I'll just call get text now without really thinking now I have to think about it why do I",
    "start": "3607200",
    "end": "3613920"
  },
  {
    "text": "need more information should I change location should there be more stuff in location that I could call",
    "start": "3613920",
    "end": "3619260"
  },
  {
    "text": "gives you better design because when we're in a hurry we just make it work",
    "start": "3619260",
    "end": "3625579"
  },
  {
    "text": "the idea behind abstraction is to protect you from accidental dependencies and Rippling changes and that's why",
    "start": "3625799",
    "end": "3631740"
  },
  {
    "text": "you're putting these in place I see that I very carefully arranged for power and then didn't actually you know",
    "start": "3631740",
    "end": "3637260"
  },
  {
    "text": "plug it into my laptop",
    "start": "3637260",
    "end": "3640400"
  },
  {
    "text": "there you go foreign",
    "start": "3645420",
    "end": "3650420"
  },
  {
    "text": "I know what you need to do did you see it it said call to action for a minute uh and I will try to wake",
    "start": "3652700",
    "end": "3659400"
  },
  {
    "text": "it up for the sake of the recording oh it's really unhappy now um what I want you to do is to listen to",
    "start": "3659400",
    "end": "3666780"
  },
  {
    "text": "the code when it's telling you that there are abstractions that are missing okay whether you wrote it or whether",
    "start": "3666780",
    "end": "3672900"
  },
  {
    "text": "you're just reading it it is telling you there's missing abstractions and when you provide those missing abstractions",
    "start": "3672900",
    "end": "3679319"
  },
  {
    "text": "you're going to make the code better for you and for future people you don't need to understand sales tax nuclear reactors",
    "start": "3679319",
    "end": "3686700"
  },
  {
    "text": "chemical refineries rental car business you just need to look for those load-bearing white spaces those names",
    "start": "3686700",
    "end": "3693660"
  },
  {
    "text": "that are so similar for what's clumped together and what's separate",
    "start": "3693660",
    "end": "3699059"
  },
  {
    "text": "and and then just listen to the code now don't be super mechanical about it you do bring judgment to this it is still",
    "start": "3699059",
    "end": "3706020"
  },
  {
    "text": "important to be a designer and be able to put things together correctly but don't be overwhelmed by it",
    "start": "3706020",
    "end": "3712760"
  },
  {
    "text": "uh just automatically and say well I couldn't possibly because I could never design this system from scratch that's",
    "start": "3712760",
    "end": "3719040"
  },
  {
    "text": "fine you don't have to design the system from scratch you just have to listen to what the code is telling you",
    "start": "3719040",
    "end": "3724559"
  },
  {
    "text": "and most importantly as you write stuff you could leave some notes for the",
    "start": "3724559",
    "end": "3729960"
  },
  {
    "text": "future some blank lines some comments but you could also just take that note right now and work on it and make the",
    "start": "3729960",
    "end": "3736079"
  },
  {
    "text": "code better right now and that would be uh even better once you know to see them those blank",
    "start": "3736079",
    "end": "3742140"
  },
  {
    "text": "lines those gaps they are absolutely screaming at you and all you got to do",
    "start": "3742140",
    "end": "3747240"
  },
  {
    "text": "is listen and I encourage you to do just that and look through your code for abstraction patterns thank you",
    "start": "3747240",
    "end": "3754819"
  }
]