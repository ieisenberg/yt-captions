[
  {
    "text": "we can start I guess it's time or 1 minute before the time but doesn't",
    "start": "4759",
    "end": "10519"
  },
  {
    "text": "matter really so let's talk about manad operations and some practicalities of",
    "start": "10519",
    "end": "17600"
  },
  {
    "text": "using these things first of all let me introduce myself my name is Vitali and",
    "start": "17600",
    "end": "23000"
  },
  {
    "text": "I've been doing software for quite a while mostly in C++ now I'm working at remarkable as a",
    "start": "23000",
    "end": "30199"
  },
  {
    "text": "part of core team we do an internal framework libraries and Par responsible for CI our main product is basically",
    "start": "30199",
    "end": "37920"
  },
  {
    "text": "here we doing this very nice I'd say ink tablet that provides you good",
    "start": "37920",
    "end": "46840"
  },
  {
    "text": "experience for wrer like a natural peer and this one not mine I have to return to the colleague but you can give it a",
    "start": "46840",
    "end": "52760"
  },
  {
    "text": "try if you want so we have a several",
    "start": "52760",
    "end": "57718"
  },
  {
    "text": "here so and this talk basically first of all I'm going to",
    "start": "58239",
    "end": "65040"
  },
  {
    "text": "briefly explain expected and optional types for you not in the many details",
    "start": "65040",
    "end": "71040"
  },
  {
    "text": "because there are a lot of good talks about it you just can explore them then show common use cases why and",
    "start": "71040",
    "end": "78400"
  },
  {
    "text": "where we do use expected and optional in the real code then some Mantic operations and",
    "start": "78400",
    "end": "85840"
  },
  {
    "text": "what actual challenges they can solve for you and then I will give you some tips and tricks from my practical",
    "start": "85840",
    "end": "92560"
  },
  {
    "text": "experience as if you read the agenda of the talk we've been using those things for real projects for longer than one",
    "start": "92560",
    "end": "100079"
  },
  {
    "text": "year already and happy so far mostly so in this",
    "start": "100079",
    "end": "105759"
  },
  {
    "text": "talk we are not going to have a lot of theory even category Theory nothing like",
    "start": "105759",
    "end": "111759"
  },
  {
    "text": "that so we are going to doing C++ no high skill no scolar nothing like that",
    "start": "111759",
    "end": "117719"
  },
  {
    "text": "and of course we are going to have a lot of practical examples and if you expect opposite now it's a good chance to",
    "start": "117719",
    "end": "123320"
  },
  {
    "text": "escape the room so examples where are examples",
    "start": "123320",
    "end": "129039"
  },
  {
    "text": "coming from I mentioned that we had this amazing device and we have our internal",
    "start": "129039",
    "end": "136400"
  },
  {
    "text": "framework to build the software for those devices and what we have in very very high level overview perspective we",
    "start": "136400",
    "end": "142760"
  },
  {
    "text": "have set of libraries that the shared components you can think of those like",
    "start": "142760",
    "end": "148040"
  },
  {
    "text": "about the regular shared libraries then we have modules that represents",
    "start": "148040",
    "end": "153879"
  },
  {
    "text": "different sets of capabilities for instance now we have colorful displays or marker with charging and stuff like",
    "start": "153879",
    "end": "160560"
  },
  {
    "text": "that and the previous generation we didn't have it so we don't need these capabilities and the capabilities is a",
    "start": "160560",
    "end": "166599"
  },
  {
    "text": "set of software for instance we have like a bundle software that represents this particular device or the another",
    "start": "166599",
    "end": "174400"
  },
  {
    "text": "device or another another so you can freely combine those modules again get different kind of things so it's our",
    "start": "174400",
    "end": "180360"
  },
  {
    "text": "internal platform and a colleague of mine mkin had a talk about dependency injection he",
    "start": "180360",
    "end": "187480"
  },
  {
    "text": "didn't mention it but we actually use all this black magic in our real code base which is kind of",
    "start": "187480",
    "end": "194959"
  },
  {
    "text": "cool so and I'm well for this talk I was thinking like which kind of subsystem we",
    "start": "194959",
    "end": "202200"
  },
  {
    "text": "should take and I decided to use the user interface subsystem because well it",
    "start": "202200",
    "end": "208560"
  },
  {
    "text": "really nice picture the intersection of two words the words like that where we can apply functional Concepts and the",
    "start": "208560",
    "end": "216000"
  },
  {
    "text": "word where well we probably shouldn't appli it or traditionally not applied",
    "start": "216000",
    "end": "222000"
  },
  {
    "text": "and this subsystem is used particularly for collecting windows and widgets for modules and windows we are talking like",
    "start": "222000",
    "end": "227280"
  },
  {
    "text": "not about operating system mostly but like say mobile applications widget there small just",
    "start": "227280",
    "end": "233560"
  },
  {
    "text": "pieces that sharable between those modules then we use the binding for other",
    "start": "233560",
    "end": "241560"
  },
  {
    "text": "libraries like we don't have custom solutions to bring pixels on screen we use cute but any other libraries can be",
    "start": "241560",
    "end": "249400"
  },
  {
    "text": "used and wrapped into our system and then this subsystem is used for navigation between Windows like say if",
    "start": "249400",
    "end": "256280"
  },
  {
    "text": "you need to open the certain route that you can go there and open it the US C++ 20 in our project VC",
    "start": "256280",
    "end": "264919"
  },
  {
    "text": "package as a package manager we have a lot of third party libraries I'm not sure the exact number but probably",
    "start": "264919",
    "end": "271479"
  },
  {
    "text": "around 30 without transitive dependencies nowadays something like that I put some libraries on the slide",
    "start": "271479",
    "end": "278400"
  },
  {
    "text": "so it's uh ranges sketch for testing expected we don't use one from Senter",
    "start": "278400",
    "end": "283520"
  },
  {
    "text": "library for a reason I will tell you later about and cute for UI on our",
    "start": "283520",
    "end": "290080"
  },
  {
    "text": "devices how many of you are familiar with cute cool I can skip this slide but very",
    "start": "290080",
    "end": "296440"
  },
  {
    "text": "briefly so there are two words in cute right you know about this C++ codee C++",
    "start": "296440",
    "end": "302320"
  },
  {
    "text": "for business logic in Ideal World again because many people like put business",
    "start": "302320",
    "end": "307720"
  },
  {
    "text": "logic in qml and another one is a qml declarative things where you basically",
    "start": "307720",
    "end": "314199"
  },
  {
    "text": "declare or show your UI in very nice maner and this part is also responsible for animations and some other things",
    "start": "314199",
    "end": "320160"
  },
  {
    "text": "like trans Transitions and so on so forth and there is a this big Arrow",
    "start": "320160",
    "end": "326039"
  },
  {
    "text": "which means that uh those two well things are kind of Tangled in a way and",
    "start": "326039",
    "end": "331919"
  },
  {
    "text": "you can for instance take C++ object and inject or expose into qml context and manipulate some properties do whatever",
    "start": "331919",
    "end": "338680"
  },
  {
    "text": "you want and then you can do vice versa but the issue is that those two words",
    "start": "338680",
    "end": "343759"
  },
  {
    "text": "that use different approaches to many kind of things like error handling how do you put your logic where do you put",
    "start": "343759",
    "end": "350720"
  },
  {
    "text": "it how do you structure code and so on so that's why like in qml that could be",
    "start": "350720",
    "end": "356160"
  },
  {
    "text": "naturous hard to do some well good or best practices from the functional",
    "start": "356160",
    "end": "361479"
  },
  {
    "text": "programming world and that's also why it was the choice now let's talk briefly about",
    "start": "361479",
    "end": "367080"
  },
  {
    "text": "classes and the second question is how many of you ever used optional stud or",
    "start": "367080",
    "end": "372160"
  },
  {
    "text": "some other stuff amazing I can skip a half of presentation no I will not but",
    "start": "372160",
    "end": "377520"
  },
  {
    "text": "yeah and expected cool less so not half of presentation but let's talk a little bit",
    "start": "377520",
    "end": "384400"
  },
  {
    "text": "about optional without a lot of theory just practicalities so what the optional is it's obstruction that contains value",
    "start": "384400",
    "end": "391800"
  },
  {
    "text": "you can think about it like about a box where you could put something and it can",
    "start": "391800",
    "end": "397160"
  },
  {
    "text": "be empty or with something so the closest and simplest for understanding",
    "start": "397160",
    "end": "402560"
  },
  {
    "text": "obstruction would be stood pair of t or bull well in reality it's not this way",
    "start": "402560",
    "end": "408360"
  },
  {
    "text": "but this just for simplification so and here on the left",
    "start": "408360",
    "end": "413759"
  },
  {
    "text": "side you can see the real example so we have an box optional box I would use this terminology not official but it's",
    "start": "413759",
    "end": "420520"
  },
  {
    "text": "very nice perhaps represents the meaning then we can put something 42 the number",
    "start": "420520",
    "end": "427759"
  },
  {
    "text": "the integer and then we are just printing that the value is something so for printing or something I use fmg",
    "start": "427759",
    "end": "434360"
  },
  {
    "text": "Library we also use in project but I guess those string interpolation syntax",
    "start": "434360",
    "end": "439840"
  },
  {
    "text": "looks familiar so how do we use optional in the",
    "start": "439840",
    "end": "445840"
  },
  {
    "text": "projects usually there are not too many use cases but the perhaps most natural one is the most",
    "start": "445840",
    "end": "452680"
  },
  {
    "text": "frequent then we use it the return value when our code or our function can",
    "start": "452680",
    "end": "458960"
  },
  {
    "text": "technically fail but we don't care why it fails so here is an example of vector",
    "start": "458960",
    "end": "466520"
  },
  {
    "text": "some custom Vector that has method index of assume it's Q vector or something",
    "start": "466520",
    "end": "471720"
  },
  {
    "text": "like that and if the element is in the vector there is an index will be",
    "start": "471720",
    "end": "478240"
  },
  {
    "text": "returned of it's not found there is special auxiliary class student will opt that you can",
    "start": "478240",
    "end": "484879"
  },
  {
    "text": "return if it's not found later on you can check",
    "start": "484879",
    "end": "489120"
  },
  {
    "text": "it another thing I don't like it much but I it many times so you can have the",
    "start": "490400",
    "end": "497599"
  },
  {
    "text": "optional thing as a parameters so when you invoke your function you can supply",
    "start": "497599",
    "end": "502639"
  },
  {
    "text": "the additional argument and then based on it do something or do not do",
    "start": "502639",
    "end": "508240"
  },
  {
    "text": "something here we have a function for resolving URL that just returning",
    "start": "508240",
    "end": "514560"
  },
  {
    "text": "URL so and if the configuration is supplied resolve this URL according to this configuration and if the",
    "start": "514560",
    "end": "521560"
  },
  {
    "text": "configuration is not supplied we just resolve it somehow differently and the default",
    "start": "521560",
    "end": "528519"
  },
  {
    "text": "value it's like student all opt so you can invoke this function without the",
    "start": "528519",
    "end": "533600"
  },
  {
    "text": "second argument good news from the upcoming standard I'm not sure when we will have",
    "start": "533600",
    "end": "539959"
  },
  {
    "text": "it perhaps we already have it in some implementations but basically stud optional will be iterable stuff because",
    "start": "539959",
    "end": "546839"
  },
  {
    "text": "it's like very naturally representable this way it's either sequence of zero values or one",
    "start": "546839",
    "end": "552720"
  },
  {
    "text": "value and the difference between this and all other views that if you can read",
    "start": "552720",
    "end": "558160"
  },
  {
    "text": "the last sentence so the lifetime of the contained elements it's bound to the object itself so it's like view",
    "start": "558160",
    "end": "565640"
  },
  {
    "text": "interface but not nonion view there which is kind of good we'll see how we",
    "start": "565640",
    "end": "573000"
  },
  {
    "text": "can potentially utilize it I don't have many cases for you now but just worse mentioning or you learn perhaps",
    "start": "573000",
    "end": "579480"
  },
  {
    "text": "something new about optional from this now expect it so expected is",
    "start": "579480",
    "end": "585399"
  },
  {
    "text": "slightly different it can either have one value",
    "start": "585399",
    "end": "591800"
  },
  {
    "text": "or another value there are two types and the it's closest thing is St variant of",
    "start": "591800",
    "end": "597200"
  },
  {
    "text": "either the left or right or the value or an error which we use in C++ I guess",
    "start": "597200",
    "end": "604079"
  },
  {
    "text": "mostly this terminology the left most is a value and the right M as an error here we have some custom error type not super",
    "start": "604079",
    "end": "610920"
  },
  {
    "text": "important here and then we put value and then it acts pretty much like optional",
    "start": "610920",
    "end": "616680"
  },
  {
    "text": "so we can extract this value print do whatever and then if there is an error we can",
    "start": "616680",
    "end": "622360"
  },
  {
    "text": "check it's also used as a return type for many functions that the only",
    "start": "622360",
    "end": "628000"
  },
  {
    "text": "difference that you might need to know why it fails and perhaps roll back or do",
    "start": "628000",
    "end": "633600"
  },
  {
    "text": "something say If that's a file system error you can reach another file or just",
    "start": "633600",
    "end": "639320"
  },
  {
    "text": "remove something or drop lock or wait or whatever here we have loading widget and",
    "start": "639320",
    "end": "645639"
  },
  {
    "text": "uh this is from real codes simplified and reduced example but still so if",
    "start": "645639",
    "end": "652200"
  },
  {
    "text": "there is an error you have to use special wrapper like St unexpected and uh this required to just",
    "start": "652200",
    "end": "660240"
  },
  {
    "text": "distinguish between unexpected and expected stuff because other than that",
    "start": "660240",
    "end": "665720"
  },
  {
    "text": "well it will be hard to in terms of implementation and then if we have an actual result we can just return a",
    "start": "665720",
    "end": "672000"
  },
  {
    "text": "result by value that's would be fine where you can get all of those nice",
    "start": "672000",
    "end": "679279"
  },
  {
    "text": "abstractions basically if you use it in your project is it from standard library",
    "start": "679279",
    "end": "685560"
  },
  {
    "text": "or it's from so first of all is it from standard Library if you use",
    "start": "685560",
    "end": "691000"
  },
  {
    "text": "it for both expected and optional yeah okay so that's very cool",
    "start": "691000",
    "end": "697519"
  },
  {
    "text": "it means your tool chain allows it so but if you have more tool chains like say some mobile tool chains that are",
    "start": "697519",
    "end": "704040"
  },
  {
    "text": "outdated and you cannot upgrade and some other things so you most likely will be using them",
    "start": "704040",
    "end": "709600"
  },
  {
    "text": "from con or VC package we use our from VC package for this exact reason and",
    "start": "709600",
    "end": "715959"
  },
  {
    "text": "thanks to sbrand and all contributors uh that it's available in TL nice tested",
    "start": "715959",
    "end": "724160"
  },
  {
    "text": "Library feel free to use very good stuff now let's talk a little bit about how",
    "start": "724160",
    "end": "730360"
  },
  {
    "text": "it's used that's what I'm going to talk about",
    "start": "730360",
    "end": "736880"
  },
  {
    "text": "I'm going to talk about expected perhaps 90% of interest in use cases is expected from my practice of",
    "start": "736880",
    "end": "743639"
  },
  {
    "text": "talking for different people I do not have representative statistic here but yeah that's uh like this at least from",
    "start": "743639",
    "end": "751880"
  },
  {
    "text": "practicalities we use it mostly for error handling and then the third one",
    "start": "751880",
    "end": "757160"
  },
  {
    "text": "can be slightly tricky but it should be more understandable in the future but we using it for unifying interface for",
    "start": "757160",
    "end": "763880"
  },
  {
    "text": "basically having more composable obstruction in our interface yeah I will talk about it some",
    "start": "763880",
    "end": "772199"
  },
  {
    "text": "slides how do we process the expected St expected whatever other expected you to",
    "start": "772199",
    "end": "777720"
  },
  {
    "text": "have so imagine that you have a function for loading widget you are getting new widget somehow in the box that returns",
    "start": "777720",
    "end": "784240"
  },
  {
    "text": "you expect it you're doing the checking the value you can obviously admit the second part after semic colum but it's",
    "start": "784240",
    "end": "790600"
  },
  {
    "text": "just here for readability so then if there is a value you have a value doing",
    "start": "790600",
    "end": "795959"
  },
  {
    "text": "something with a widget and if there is an error there is something you can do with an error doesn't really matter what",
    "start": "795959",
    "end": "802959"
  },
  {
    "text": "right now so if you saw that was a kind of bad",
    "start": "802959",
    "end": "808199"
  },
  {
    "text": "example no it wasn't entirely bad example now it's very practical and not",
    "start": "808199",
    "end": "815120"
  },
  {
    "text": "too good example and this situation is like happening super",
    "start": "815120",
    "end": "820480"
  },
  {
    "text": "often even with some experience at Engineers I'd say so we getting widget",
    "start": "820480",
    "end": "827079"
  },
  {
    "text": "here perhaps we have a lot of quote in between then we check in value doing something and this error we just get in",
    "start": "827079",
    "end": "832639"
  },
  {
    "text": "this error want to log it somehow and then we set in okay certain widget we want to perhaps put a point or value our",
    "start": "832639",
    "end": "839880"
  },
  {
    "text": "each is printable and then we have an error so who see the issue here in this",
    "start": "839880",
    "end": "847600"
  },
  {
    "text": "code nice so and for those who doesn't cover negative scenarios in the test",
    "start": "849639",
    "end": "856600"
  },
  {
    "text": "that could be spotted in very very late stages so that's that's the issue you",
    "start": "856600",
    "end": "862240"
  },
  {
    "text": "can easily access like check the widget box do the value and if it's not covered",
    "start": "862240",
    "end": "869160"
  },
  {
    "text": "by test or if it's not super frequent pass or something that you can get it in production only not nice but we have",
    "start": "869160",
    "end": "878120"
  },
  {
    "text": "sort of magic tool that can solve this but introduce some other things as",
    "start": "878120",
    "end": "886040"
  },
  {
    "text": "usual now I'm going to briefly talk about manic operations another question have you ever used Mantic operations in",
    "start": "886040",
    "end": "892519"
  },
  {
    "text": "the real code like the production code cool cool not that many to be honest and half of",
    "start": "892519",
    "end": "899639"
  },
  {
    "text": "them remarkable okay okay I'm just going to briefly",
    "start": "899639",
    "end": "905079"
  },
  {
    "text": "explain the operations they will be four of them and the top example is the regular one",
    "start": "905079",
    "end": "912720"
  },
  {
    "text": "the procedural style and the bottom stuff is the what you can do with Mantic operations so this example you're",
    "start": "912720",
    "end": "919040"
  },
  {
    "text": "familiar with you just check in some code with and then and then if there is",
    "start": "919040",
    "end": "924320"
  },
  {
    "text": "something you do operations and alternative branch is not interested for us right now",
    "start": "924320",
    "end": "930240"
  },
  {
    "text": "then expect it has and then method where you can pass a function that accepts not",
    "start": "930240",
    "end": "936800"
  },
  {
    "text": "the expected not the Box itself but the actual value so and then you can do",
    "start": "936800",
    "end": "942720"
  },
  {
    "text": "something with that and then return the value there are some limitations for",
    "start": "942720",
    "end": "947920"
  },
  {
    "text": "this operation so it should return another expected and the error type should be the same as it was before but",
    "start": "947920",
    "end": "954560"
  },
  {
    "text": "here you have some well freedom to change the return type of widget at least in TL it should",
    "start": "954560",
    "end": "960720"
  },
  {
    "text": "be the same for standard Library I assume there are not too many deviations",
    "start": "960720",
    "end": "966839"
  },
  {
    "text": "but you have another routines to map the value type as well and here as you may",
    "start": "966839",
    "end": "971920"
  },
  {
    "text": "see that's notoriously harder to well to do something with the Box itself because",
    "start": "971920",
    "end": "978319"
  },
  {
    "text": "this function will never ever ever be invoked if expected has",
    "start": "978319",
    "end": "983639"
  },
  {
    "text": "error so it's this one will be invoked only if it has a value",
    "start": "983639",
    "end": "989800"
  },
  {
    "text": "which is kind of cool another thing I briefly mentioned",
    "start": "989800",
    "end": "994880"
  },
  {
    "text": "is a transform say we have a widget and we have some unique IDs of these widgets",
    "start": "994880",
    "end": "1000120"
  },
  {
    "text": "whatever it is just youu each or something here how can we do it in the",
    "start": "1000120",
    "end": "1006120"
  },
  {
    "text": "more procedural style so we just do in widget do ID Andor it and for transform",
    "start": "1006120",
    "end": "1012360"
  },
  {
    "text": "here it's not necessary to put a type I just put it for this code to be more explanatory but transform function",
    "start": "1012360",
    "end": "1018519"
  },
  {
    "text": "except the widget itself not a box not expected and then you can do return widget ID and your value will be wrapped",
    "start": "1018519",
    "end": "1026880"
  },
  {
    "text": "unexpected for you so that error type will be the same but the value type will",
    "start": "1026880",
    "end": "1033520"
  },
  {
    "text": "be different and again this function will never be invoked if the expected",
    "start": "1033520",
    "end": "1038678"
  },
  {
    "text": "has an error so only for Value so it's it's impossible in this code to just",
    "start": "1038679",
    "end": "1044600"
  },
  {
    "text": "access some invalid object or else another Mantic St that",
    "start": "1044600",
    "end": "1052280"
  },
  {
    "text": "allows you to handle the alternative Branch so this code will be invoked only",
    "start": "1052280",
    "end": "1058960"
  },
  {
    "text": "and only if this stuff contains an error and actually accepts this error and you",
    "start": "1058960",
    "end": "1065520"
  },
  {
    "text": "can do something with this error so it's not necessary to return anything from this function but you can return another",
    "start": "1065520",
    "end": "1071640"
  },
  {
    "text": "expected and it would be like kind of expected with a value so if want to recover from the state you can return",
    "start": "1071640",
    "end": "1078559"
  },
  {
    "text": "some invalid and then for the next chain of calls there would be a valid value and this one again this function",
    "start": "1078559",
    "end": "1086000"
  },
  {
    "text": "will be only invoked if they expected at this particular stage contains an error",
    "start": "1086000",
    "end": "1092559"
  },
  {
    "text": "so it will never be invoked if it has valid",
    "start": "1092559",
    "end": "1097360"
  },
  {
    "text": "value transform error super useful function that allows you to change the",
    "start": "1097600",
    "end": "1103799"
  },
  {
    "text": "type of error I will like show you some examples but basically between different",
    "start": "1103799",
    "end": "1108840"
  },
  {
    "text": "libraries between different parts of your code there can be different errors and you want to go from one error to",
    "start": "1108840",
    "end": "1114600"
  },
  {
    "text": "another error type or you want to say additional context additional information there is a good example of",
    "start": "1114600",
    "end": "1121720"
  },
  {
    "text": "it so then you can do transform error and you can use it this way so we just",
    "start": "1121720",
    "end": "1127240"
  },
  {
    "text": "have fmt to string and we assume that our widget error can be transformed to string we have everything we need so we",
    "start": "1127240",
    "end": "1134440"
  },
  {
    "text": "just move it this way and the error will be transformed in to something like into",
    "start": "1134440",
    "end": "1139760"
  },
  {
    "text": "the string if you needed f as a string any questions so far I forgot to",
    "start": "1139760",
    "end": "1146919"
  },
  {
    "text": "mention but you can just say anything then I put some time aside so we can do",
    "start": "1146919",
    "end": "1152320"
  },
  {
    "text": "it afterwards",
    "start": "1152320",
    "end": "1155440"
  },
  {
    "text": "should uh they evaluate instantly so that the chain is evaluated and then",
    "start": "1158039",
    "end": "1163600"
  },
  {
    "text": "they evaluate it but of course say as I said if there is a different kind of",
    "start": "1163600",
    "end": "1168760"
  },
  {
    "text": "value so they will never be invoked but the expression itself is evaluated instantly so it's not laziness in this",
    "start": "1168760",
    "end": "1175679"
  },
  {
    "text": "man and the same for functions",
    "start": "1175679",
    "end": "1180360"
  },
  {
    "text": "arguments and here we have like for practical development because practical",
    "start": "1182600",
    "end": "1188720"
  },
  {
    "text": "development in mostly like about people interaction in most cases rather than",
    "start": "1188720",
    "end": "1194120"
  },
  {
    "text": "code it's not only about monics and stuff but it's very good case to mention",
    "start": "1194120",
    "end": "1199760"
  },
  {
    "text": "it and we have three pillars here the first one is people and the probably key part another important thing is a",
    "start": "1199760",
    "end": "1205840"
  },
  {
    "text": "software design or architecture of the software and then you should start like",
    "start": "1205840",
    "end": "1211320"
  },
  {
    "text": "you know doing the functional approach where you don't go like a top down but basically going opposite direction where",
    "start": "1211320",
    "end": "1218039"
  },
  {
    "text": "you have small pieces then changing it to functional approach and then they build the entire",
    "start": "1218039",
    "end": "1225200"
  },
  {
    "text": "app let's talk about people and not straight away here I have two examples",
    "start": "1225200",
    "end": "1231360"
  },
  {
    "text": "for you left right is confusing please read it it's pretty much the same so and",
    "start": "1231360",
    "end": "1238280"
  },
  {
    "text": "then you can see me like who thinks that this part is better by all means like",
    "start": "1238280",
    "end": "1246200"
  },
  {
    "text": "readability maintainability whatever criteria you have so who thinks that",
    "start": "1246200",
    "end": "1251559"
  },
  {
    "text": "this one is good one or better than the another one raise your hand",
    "start": "1251559",
    "end": "1258799"
  },
  {
    "text": "okay so and for this one again no you cannot vote for for",
    "start": "1258799",
    "end": "1264280"
  },
  {
    "text": "both choose one okay so that's very good and that's",
    "start": "1264280",
    "end": "1270039"
  },
  {
    "text": "like kind of represent a little bit the selection many like a lot of experiened developers they telling okay fine this",
    "start": "1270039",
    "end": "1277440"
  },
  {
    "text": "procedural like style it's much better I can clearly understand what's happening here so I don't need to even know the",
    "start": "1277440",
    "end": "1284120"
  },
  {
    "text": "obstructions like transform I don't need what to do and then I don't need to change C if I need I can move like the",
    "start": "1284120",
    "end": "1290559"
  },
  {
    "text": "separate functions which will probably be never done but still and now let's",
    "start": "1290559",
    "end": "1296679"
  },
  {
    "text": "talk a little bit about observation like functional programming in general can be",
    "start": "1296679",
    "end": "1302480"
  },
  {
    "text": "super complicated like over complicated for many if you came like for say",
    "start": "1302480",
    "end": "1308480"
  },
  {
    "text": "procedural what object oriented world so new conceptions of this like say",
    "start": "1308480",
    "end": "1313640"
  },
  {
    "text": "immutability Transformations components that can be a composition function",
    "start": "1313640",
    "end": "1318799"
  },
  {
    "text": "composition can be super complicated and the understanding or mean of that why",
    "start": "1318799",
    "end": "1324159"
  },
  {
    "text": "why do we need it it also can be like a little bit FL and not talking about functional programming in a whole we are",
    "start": "1324159",
    "end": "1330080"
  },
  {
    "text": "talking about just Mantic operations for combining stuff like just a very teeny tiny subset doesn't have to follow like",
    "start": "1330080",
    "end": "1337320"
  },
  {
    "text": "any kind of rules or stuff that can be not straightforward",
    "start": "1337320",
    "end": "1342559"
  },
  {
    "text": "and the last stuff stood option expected we have very good audience here all",
    "start": "1342559",
    "end": "1347600"
  },
  {
    "text": "people are familiar with is like optional many is expected many use of them but for my my observations well",
    "start": "1347600",
    "end": "1355279"
  },
  {
    "text": "it's quite close it's quite Far From Reality so that's literally a teror",
    "start": "1355279",
    "end": "1360480"
  },
  {
    "text": "incognit like unknown fields for many but we should like you know some kind of",
    "start": "1360480",
    "end": "1367120"
  },
  {
    "text": "work with this because when you work on the software you almost like in a company we're talking about",
    "start": "1367120",
    "end": "1372279"
  },
  {
    "text": "practicalities you are not working with this like all alone you're working with other people and",
    "start": "1372279",
    "end": "1379440"
  },
  {
    "text": "first of all we need to do something with this what can we do about it we first of",
    "start": "1379440",
    "end": "1385039"
  },
  {
    "text": "all should show practical benefits from this presentation from other talks take",
    "start": "1385039",
    "end": "1390120"
  },
  {
    "text": "small pieces of the existing Cod base show practical benefits which especially would work for like experienced",
    "start": "1390120",
    "end": "1395880"
  },
  {
    "text": "programmers then do more workspace where people can know play with this solve",
    "start": "1395880",
    "end": "1401279"
  },
  {
    "text": "real cases try something perhaps in more friendly environment without any time",
    "start": "1401279",
    "end": "1407520"
  },
  {
    "text": "pressure deadline and so on so forth because that's important and then design",
    "start": "1407520",
    "end": "1412880"
  },
  {
    "text": "review if you can like know help your colleagues to understand how you can improve say API interfaces cross module",
    "start": "1412880",
    "end": "1420360"
  },
  {
    "text": "communication using those Mantic operations that would be amazing because without this key factor without this",
    "start": "1420360",
    "end": "1426559"
  },
  {
    "text": "first pillar you will never perhaps can use the monic operations in real code",
    "start": "1426559",
    "end": "1434640"
  },
  {
    "text": "and we'll not get any benefits of it so assume the good you kind of have this",
    "start": "1434640",
    "end": "1444320"
  },
  {
    "text": "monadic religion in place in your company all people like it and now you want to use it but how do you start what",
    "start": "1444320",
    "end": "1451720"
  },
  {
    "text": "do you need to do the first thing you should accept that you will never ever",
    "start": "1451720",
    "end": "1458559"
  },
  {
    "text": "ever ever be doing purely functional programming in the real world in your",
    "start": "1458559",
    "end": "1464440"
  },
  {
    "text": "project unless it's like your pet project or like you do it with your functional GE or something or it's like",
    "start": "1464440",
    "end": "1469799"
  },
  {
    "text": "very teeny tiny stuff you're working all the AL on so perhaps all other 99% of",
    "start": "1469799",
    "end": "1476520"
  },
  {
    "text": "cases would be not pure functional programming so you will always be having",
    "start": "1476520",
    "end": "1482640"
  },
  {
    "text": "side effects there will be a lot of objectoriented procedural declarative",
    "start": "1482640",
    "end": "1488240"
  },
  {
    "text": "mix and style Cod existing Cod base there will be a lot of Integrations with third party libraries in real project",
    "start": "1488240",
    "end": "1494399"
  },
  {
    "text": "Legacy non- Legacy doesn't really matter they will be L",
    "start": "1494399",
    "end": "1499480"
  },
  {
    "text": "code and many many other factors will not allow you to do in purely functional programming Le I've never perhaps SE or",
    "start": "1499480",
    "end": "1507440"
  },
  {
    "text": "heard okay two times actually I heard but well it's very rare in nich cases",
    "start": "1507440",
    "end": "1513200"
  },
  {
    "text": "for C++ word specifically so if you have like you know better statistics than I do please share after talk with me or",
    "start": "1513200",
    "end": "1522000"
  },
  {
    "text": "right now and that's why you have to put a",
    "start": "1522000",
    "end": "1527720"
  },
  {
    "text": "clear bar boundary between when you do design between functional style code and",
    "start": "1527720",
    "end": "1533919"
  },
  {
    "text": "the rest of apps or the rest the libraries and something and in",
    "start": "1533919",
    "end": "1540159"
  },
  {
    "text": "the first part like where you do functional soltion on you can apply best",
    "start": "1540159",
    "end": "1545760"
  },
  {
    "text": "practices having refer transpar functions what not uh and the second part that can be perhaps difficult to",
    "start": "1545760",
    "end": "1553159"
  },
  {
    "text": "implement or doesn't make much sense right now it's like a login I have some",
    "start": "1553159",
    "end": "1559799"
  },
  {
    "text": "examples here as well uh integration with UI libraries has a glue code between third party libraries here you",
    "start": "1559799",
    "end": "1565799"
  },
  {
    "text": "will probably not be using those stuff and that's a second part this is a boundary for login there are some tools",
    "start": "1565799",
    "end": "1573240"
  },
  {
    "text": "but still I have seen them widely using accepted even in functional programming",
    "start": "1573240",
    "end": "1579080"
  },
  {
    "text": "world so and where is this magical boundary it's usually either class interface remember like perhaps no",
    "start": "1579080",
    "end": "1586200"
  },
  {
    "text": "purely functional interface you most likely will be having classes and objectoriented programming and that can",
    "start": "1586200",
    "end": "1592720"
  },
  {
    "text": "be a library interface as well so like the saying Library I mean like the",
    "start": "1592720",
    "end": "1598520"
  },
  {
    "text": "module or something the set of classes that represents some highly coherent",
    "start": "1598520",
    "end": "1604120"
  },
  {
    "text": "functionality I have a very nice example from our practical code we have a class",
    "start": "1605120",
    "end": "1611440"
  },
  {
    "text": "called window layout this is represented by hope it's see nice yeah that's um",
    "start": "1611440",
    "end": "1618559"
  },
  {
    "text": "interface for this class for manipula layouts and then the certain implementation when we have Windows that",
    "start": "1618559",
    "end": "1623720"
  },
  {
    "text": "should be opened like a stack maner the next new the new window coming like a",
    "start": "1623720",
    "end": "1629080"
  },
  {
    "text": "top of another one it's a regular pattern I guess when you do it on mobile phone and then we have very",
    "start": "1629080",
    "end": "1638039"
  },
  {
    "text": "distinguishable boundary here and then we have the class in UI namespace window allow they're supposed to be used in the",
    "start": "1638039",
    "end": "1645399"
  },
  {
    "text": "qml or cute context let's talk a little bit about this",
    "start": "1645399",
    "end": "1651080"
  },
  {
    "text": "classes doors are very simplified and reduced we have layout Class A window",
    "start": "1651080",
    "end": "1656600"
  },
  {
    "text": "alloud that has interface that can be used for say add in Windows here we have",
    "start": "1656600",
    "end": "1662799"
  },
  {
    "text": "URI and this class returns expected uh we have like sort of um not",
    "start": "1662799",
    "end": "1670120"
  },
  {
    "text": "our own expected but our own LS for expected and by default the return type is void so that's why you canit it here",
    "start": "1670120",
    "end": "1676159"
  },
  {
    "text": "but let's assume this void so in this operation can fail and we",
    "start": "1676159",
    "end": "1681360"
  },
  {
    "text": "might need to know why and that's how we can use it in a certain implementation",
    "start": "1681360",
    "end": "1686840"
  },
  {
    "text": "we have window layout stack then the URI that passed first of all we loading windows then we adding it",
    "start": "1686840",
    "end": "1694080"
  },
  {
    "text": "to layout then active window and then adding like window lout prefix for an",
    "start": "1694080",
    "end": "1699519"
  },
  {
    "text": "error we can use transform function here because we just alter in our error but",
    "start": "1699519",
    "end": "1705440"
  },
  {
    "text": "for like historical reason there is or else is used so that's by the way this",
    "start": "1705440",
    "end": "1711840"
  },
  {
    "text": "interesting piece that's how your code can look like if you use monadic fully so and",
    "start": "1711840",
    "end": "1718120"
  },
  {
    "text": "this can be like you know also complicated for many people at least from the beginning so that's why I want",
    "start": "1718120",
    "end": "1724880"
  },
  {
    "text": "to highlight that the people factor is super important but anyway so you have",
    "start": "1724880",
    "end": "1731080"
  },
  {
    "text": "it and it's written like in a functional style and this is also like combination with object oriented programming so we",
    "start": "1731080",
    "end": "1737559"
  },
  {
    "text": "have an inter that we can chain on very cool I like it",
    "start": "1737559",
    "end": "1743360"
  },
  {
    "text": "so but then we need to use the same class in another world in the cute one",
    "start": "1743360",
    "end": "1750159"
  },
  {
    "text": "so we have the class that inherits from Q object there is a micro I don't need to explain too much but to inject some M",
    "start": "1750159",
    "end": "1756440"
  },
  {
    "text": "information here there is a property that follows active window change and we have the implementation",
    "start": "1756440",
    "end": "1763960"
  },
  {
    "text": "here and this has a pointer to the lay out some certain implementation and then",
    "start": "1763960",
    "end": "1770120"
  },
  {
    "text": "simply invo it in another namespace inside of UI namespace I just didn't put it on slide because it will not fit our",
    "start": "1770120",
    "end": "1777760"
  },
  {
    "text": "device so and then how we use it we do this stuff and then we adding window by",
    "start": "1777760",
    "end": "1786360"
  },
  {
    "text": "URI to the layout and if it fails we're just printing an error so that's how",
    "start": "1786360",
    "end": "1791960"
  },
  {
    "text": "it's Handles in qml world we just print everything in the default error context not that I'm a big fan of it but that's",
    "start": "1791960",
    "end": "1798399"
  },
  {
    "text": "how cute handles it that's how UI Engineers used to use it so and there",
    "start": "1798399",
    "end": "1804080"
  },
  {
    "text": "the entire class the entire class with is a kind of a boundary where you stopped using the functional stuff you",
    "start": "1804080",
    "end": "1810840"
  },
  {
    "text": "you wrapped your functional interfaces right here and then start using",
    "start": "1810840",
    "end": "1816039"
  },
  {
    "text": "objectoriented integrational part and some other stuff so that's very good",
    "start": "1816039",
    "end": "1822399"
  },
  {
    "text": "approach and this is like perhaps one of the way I would recommend how you",
    "start": "1822399",
    "end": "1828360"
  },
  {
    "text": "organize your code in a way and what did we achieve by",
    "start": "1828360",
    "end": "1834399"
  },
  {
    "text": "this we have in integration with existing code base which is already cool",
    "start": "1834399",
    "end": "1839640"
  },
  {
    "text": "so we have our obstructions our montic obstructions save chainable with propagation error and",
    "start": "1839640",
    "end": "1846960"
  },
  {
    "text": "thingy but it's integrated with a current code base we have manic interface that advantages you saw and",
    "start": "1846960",
    "end": "1854200"
  },
  {
    "text": "then we separated functional and nonfunctional code the good way there might be some Engineers who who don't",
    "start": "1854200",
    "end": "1860200"
  },
  {
    "text": "want to work with this code at all so they don't have to touch it which is",
    "start": "1860200",
    "end": "1865440"
  },
  {
    "text": "very nice perhaps not what we want to do but still I also mentioned small",
    "start": "1865440",
    "end": "1874039"
  },
  {
    "text": "steps with the existing code base that can be super hard to well to got the",
    "start": "1875519",
    "end": "1882399"
  },
  {
    "text": "thing I showed you before like so like this one at the very beginning if you",
    "start": "1882399",
    "end": "1888159"
  },
  {
    "text": "already have existing something that can be hard so what can you do and where you should start",
    "start": "1888159",
    "end": "1894919"
  },
  {
    "text": "from you should start with implementation details so you can even if you have the non manic interface of",
    "start": "1896039",
    "end": "1903720"
  },
  {
    "text": "your class we start with small implementation detail on the functions Anonymous name space or the some simple",
    "start": "1903720",
    "end": "1911559"
  },
  {
    "text": "private method that are not part of interface then you can partially change the interface then you can go to fully",
    "start": "1911559",
    "end": "1917639"
  },
  {
    "text": "change interface they unified to return all mantics and then optionally which is",
    "start": "1917639",
    "end": "1924880"
  },
  {
    "text": "like good things to do in many cases you can drop class entirely because your interface can be the set of function and",
    "start": "1924880",
    "end": "1931639"
  },
  {
    "text": "you can have a state that just travels between those functions so in most cases you don't",
    "start": "1931639",
    "end": "1938720"
  },
  {
    "text": "even need a class let's do it like step by step sort",
    "start": "1938720",
    "end": "1945720"
  },
  {
    "text": "of refactoring if you might we have some function that it's inous",
    "start": "1945720",
    "end": "1951760"
  },
  {
    "text": "name space assuming in the CPP file that using for loading Windows window U we",
    "start": "1951760",
    "end": "1957799"
  },
  {
    "text": "have some obstruction for loading this as a loader and it Returns the loaded window as a share",
    "start": "1957799",
    "end": "1962960"
  },
  {
    "text": "pointer and we have a function assume it's an old function interface we had an interface that returns bull only there",
    "start": "1962960",
    "end": "1969600"
  },
  {
    "text": "but assume the same so and we have it like this so if there is a window we do something with a window all of the same",
    "start": "1969600",
    "end": "1976200"
  },
  {
    "text": "chain of transformations and then if there is no windows we just",
    "start": "1976200",
    "end": "1981840"
  },
  {
    "text": "return false an Ence so I guess this code looks super familiar for many people so no monics",
    "start": "1981840",
    "end": "1989799"
  },
  {
    "text": "nothing the first step with change in implementation we changing that the implementation implementation what the",
    "start": "1989799",
    "end": "1997080"
  },
  {
    "text": "hidden in your CPP file in your Anonymous name space this signatures Chang like very minor we have expected",
    "start": "1997080",
    "end": "2005120"
  },
  {
    "text": "around share pointer we put shade pointer in the expected container and there is error type is not",
    "start": "2005120",
    "end": "2011519"
  },
  {
    "text": "specified but of course we have error type it's just an LS and error type is a common for our library say for core",
    "start": "2011519",
    "end": "2020279"
  },
  {
    "text": "now then we adding it and already here from this step you can start chaining so",
    "start": "2020279",
    "end": "2026399"
  },
  {
    "text": "you can we change the implementation only of one function of the load window but you already can start safely",
    "start": "2026399",
    "end": "2032480"
  },
  {
    "text": "composing your function and chaining and then you have a result and that's the complete ignore white files but for this",
    "start": "2032480",
    "end": "2040240"
  },
  {
    "text": "step it's kind of fine so and then we having this result has value again like",
    "start": "2040240",
    "end": "2045279"
  },
  {
    "text": "long notation but for readability here the last step you changing the",
    "start": "2045279",
    "end": "2053320"
  },
  {
    "text": "interface and now you can simply return the previous chain and that's how you can safely refactor your code or put it",
    "start": "2053320",
    "end": "2061358"
  },
  {
    "text": "like on well monadic expected SL optional stuff you can do it in one take",
    "start": "2061359",
    "end": "2067720"
  },
  {
    "text": "you can have like one pool request several commits you can do it gradually if you want so like any kind of",
    "start": "2067720",
    "end": "2074158"
  },
  {
    "text": "approaches would work but do it like kind of from the very very bottom to top",
    "start": "2074159",
    "end": "2080240"
  },
  {
    "text": "like from the small implementation pieces to the interface if you do need a refactoring of course but say if you",
    "start": "2080240",
    "end": "2086079"
  },
  {
    "text": "have the luxury and write and create a new subsystem from scratch you can design good interfaces from the",
    "start": "2086079",
    "end": "2092079"
  },
  {
    "text": "beginning but it's not like the most frequent case again from my experience",
    "start": "2092079",
    "end": "2099640"
  },
  {
    "text": "now let's start with tips and tricks if you like agreed with those three pillars",
    "start": "2099920",
    "end": "2106200"
  },
  {
    "text": "not this",
    "start": "2106200",
    "end": "2109760"
  },
  {
    "text": "tell what first of all I want to make some like assumptions here so you can be",
    "start": "2111880",
    "end": "2118960"
  },
  {
    "text": "at the very beginning of your journey so you don't have a lot of well- defined",
    "start": "2118960",
    "end": "2124160"
  },
  {
    "text": "practices for using Mantic operations in your codebase but even if you do you will learn some useful stuff and you",
    "start": "2124160",
    "end": "2130359"
  },
  {
    "text": "perhaps adopt and there are not too many functional programming libraries that already reachen by someone implemented",
    "start": "2130359",
    "end": "2136960"
  },
  {
    "text": "and because it also gives you some well I would say some best practices so",
    "start": "2136960",
    "end": "2144000"
  },
  {
    "text": "just code style changes and whatnot first of all yeah I start with",
    "start": "2144000",
    "end": "2151240"
  },
  {
    "text": "two or three perhaps controversial points but use less LDA functions perhaps yes in functional",
    "start": "2151240",
    "end": "2158640"
  },
  {
    "text": "programing function style the thing is that Lambda functions in C++ is a super powerful tool it the",
    "start": "2158640",
    "end": "2167520"
  },
  {
    "text": "super flexible you have amazing control over your capture list of how you capture what you capture it's perhaps",
    "start": "2167520",
    "end": "2173160"
  },
  {
    "text": "the most flexible lambdas I've ever seen and yet it's super noisy if you can",
    "start": "2173160",
    "end": "2180280"
  },
  {
    "text": "compare because this flexibility is not required for perhaps 90% of use cases",
    "start": "2180280",
    "end": "2185560"
  },
  {
    "text": "again and it's get another food gun because who has ever had an had issues",
    "start": "2185560",
    "end": "2191760"
  },
  {
    "text": "with say lifetime of the things that captured in capture",
    "start": "2191760",
    "end": "2197359"
  },
  {
    "text": "list yeah so not that many lucky",
    "start": "2197359",
    "end": "2202720"
  },
  {
    "text": "people still what you should use less because Lambda functions themselves they are",
    "start": "2202720",
    "end": "2208400"
  },
  {
    "text": "very good however if use a lot of nested lambdas and if you ever seen like this very very long ladder of lambdas or call",
    "start": "2208400",
    "end": "2216520"
  },
  {
    "text": "hell Call It Whatever ever it doesn't look nice it's not readable at all please don't do",
    "start": "2216520",
    "end": "2222160"
  },
  {
    "text": "it loan Lambda functions and Loan functions in general like if your function it's like super I will not give",
    "start": "2222160",
    "end": "2229240"
  },
  {
    "text": "you exact numbers but it's like if it's something like this it's probably not better be a single function Lambda not",
    "start": "2229240",
    "end": "2236680"
  },
  {
    "text": "Lambda doesn't really matter please de composite and then I have example next",
    "start": "2236680",
    "end": "2243440"
  },
  {
    "text": "slide about Lambda functions assigned to local variables many people think it's good idea having a lot of Lambda",
    "start": "2243440",
    "end": "2249520"
  },
  {
    "text": "functions assigned to local variables and use it I have an example the same example",
    "start": "2249520",
    "end": "2255200"
  },
  {
    "text": "you already seen so the left part right here we have the and then then that",
    "start": "2255200",
    "end": "2261400"
  },
  {
    "text": "those are like free functions pointers to free functions and those are the same but for some reasons we decided to put",
    "start": "2261400",
    "end": "2268599"
  },
  {
    "text": "them inside here and it's very good case if it's sled is a real oneliner most likely it will like two V",
    "start": "2268599",
    "end": "2276079"
  },
  {
    "text": "lines even more complicated logic and if you put it here you first like your cognitive lo as just engineer or some",
    "start": "2276079",
    "end": "2283480"
  },
  {
    "text": "other engineer perhaps not you or you mon after you like who read this bad",
    "start": "2283480",
    "end": "2288520"
  },
  {
    "text": "code like I cannot understand anything I start reading there's one Lambda another Lambda another Lambda and only some very",
    "start": "2288520",
    "end": "2294560"
  },
  {
    "text": "close to bottom you see how they used how they composed so you have very long function to read it's like not really",
    "start": "2294560",
    "end": "2300720"
  },
  {
    "text": "nice and in general like please use more",
    "start": "2300720",
    "end": "2306319"
  },
  {
    "text": "small functions because it already gives you small steps of what you're doing with names they",
    "start": "2306319",
    "end": "2311560"
  },
  {
    "text": "already named for you you can easy to reuse it in this part of code if you need to use it somewhere else you can",
    "start": "2311560",
    "end": "2316760"
  },
  {
    "text": "easily expose it as a part of functional interface from cpv file to header file and you can test them very easily then",
    "start": "2316760",
    "end": "2324160"
  },
  {
    "text": "expose them in the details name space that's every so often you see like people need to test something then add a",
    "start": "2324160",
    "end": "2331160"
  },
  {
    "text": "friend class then test it like this way so there is a tool for this use small",
    "start": "2331160",
    "end": "2337480"
  },
  {
    "text": "functions expose what you need to test and test it or use Mo or use interfaces or other stuff so but it's not about",
    "start": "2337480",
    "end": "2344760"
  },
  {
    "text": "functional thing it's in general stuff and has quite",
    "start": "2344760",
    "end": "2352040"
  },
  {
    "text": "controversial CHP or advice use buy and back front who has ever heard about it",
    "start": "2352040",
    "end": "2358359"
  },
  {
    "text": "or used cool so I have an example what this",
    "start": "2358359",
    "end": "2363680"
  },
  {
    "text": "is about but first like if you you should do perhaps if you already you have a function and you like enough that",
    "start": "2363680",
    "end": "2370480"
  },
  {
    "text": "the parameters of the functions in the correct order and place so this function is really used in many places you cannot",
    "start": "2370480",
    "end": "2377599"
  },
  {
    "text": "EAS like change signature you can change you can just put parameters in the different places so and then if",
    "start": "2377599",
    "end": "2383839"
  },
  {
    "text": "Solutions since Lambda functions are to combersome you can use bind back and what bind back is",
    "start": "2383839",
    "end": "2389400"
  },
  {
    "text": "about so see here we have a Lambda function",
    "start": "2389400",
    "end": "2394800"
  },
  {
    "text": "that adds two numbers to then bind back returns another function",
    "start": "2394800",
    "end": "2401040"
  },
  {
    "text": "where this second argument is bound to the second parameter here so it just",
    "start": "2401040",
    "end": "2406839"
  },
  {
    "text": "passed and this one returns a new function that can be invoked on the single",
    "start": "2406839",
    "end": "2412359"
  },
  {
    "text": "argument so and then simply prints three I think I do have something scary",
    "start": "2412359",
    "end": "2420520"
  },
  {
    "text": "for you I've never tested for all compilers and I'm not sure that is is",
    "start": "2420520",
    "end": "2427440"
  },
  {
    "text": "fully correct so but at least it works on my machine with GCC so the point is",
    "start": "2427440",
    "end": "2432960"
  },
  {
    "text": "how bind back works and we simply takes all of the arguments and of course this",
    "start": "2432960",
    "end": "2438079"
  },
  {
    "text": "super redive simplified function without any checks and so on so forth we just Tak in all arguments then we preserve",
    "start": "2438079",
    "end": "2445119"
  },
  {
    "text": "them as a capture list if you have L C++ you can forward them as a tle not like this so we Preserve in function itself",
    "start": "2445119",
    "end": "2452240"
  },
  {
    "text": "then we have the remain arcs or tail of the list then we invoke function we",
    "start": "2452240",
    "end": "2457640"
  },
  {
    "text": "return a Lambda and then when this function is invoked we invoke in the function we invoke in the arguments we",
    "start": "2457640",
    "end": "2464400"
  },
  {
    "text": "passed and then we invoke passing the tail and if we do B front we just simply",
    "start": "2464400",
    "end": "2469920"
  },
  {
    "text": "swap those in the places so that's a possible implementation of bindb super simplified super reduced and not",
    "start": "2469920",
    "end": "2476319"
  },
  {
    "text": "necessarily workable on all compilers so but yeah there are many talks how it's implemented and you don't",
    "start": "2476319",
    "end": "2483640"
  },
  {
    "text": "have to write it yourself if I'm not mistaken by back and front will be in a",
    "start": "2483640",
    "end": "2489560"
  },
  {
    "text": "standard or if not already there so bind front will be",
    "start": "2489560",
    "end": "2496920"
  },
  {
    "text": "later yeah so yeah front is a later standard that back is already here you",
    "start": "2496920",
    "end": "2502359"
  },
  {
    "text": "can also take bind back from range's library so it's already here it's",
    "start": "2502359",
    "end": "2509400"
  },
  {
    "text": "implemented so and the example of usage buying back right now assuming you have",
    "start": "2509400",
    "end": "2514599"
  },
  {
    "text": "the function and you want to add some error prefix here so see that those",
    "start": "2514599",
    "end": "2522440"
  },
  {
    "text": "functions there are except two arguments so the first is an would be error s that",
    "start": "2522440",
    "end": "2528280"
  },
  {
    "text": "should be passed and the second one is a prefix and then you just simply add in the prefix say it's going to be window",
    "start": "2528280",
    "end": "2534720"
  },
  {
    "text": "layout or something when you want to add it to an error to add more context for instance and you simply return unexpected but the point is if you pass",
    "start": "2534720",
    "end": "2542040"
  },
  {
    "text": "this function as is to the or else it will never be compiled because this",
    "start": "2542040",
    "end": "2547280"
  },
  {
    "text": "function this requires like two arguments not one for this particular",
    "start": "2547280",
    "end": "2553960"
  },
  {
    "text": "small example you can probably use DDA functions one liner but more complicated examples can be also here and those",
    "start": "2553960",
    "end": "2561599"
  },
  {
    "text": "examples can be L function that already used somewhere in your code that's or it",
    "start": "2561599",
    "end": "2566800"
  },
  {
    "text": "can be even the method of the some classes that's where you need to use bind front because you need to bind an",
    "start": "2566800",
    "end": "2572760"
  },
  {
    "text": "object in front and then invoke it on stuff so that's how you can use it",
    "start": "2572760",
    "end": "2578119"
  },
  {
    "text": "you're doing bind back you bound the stack layout view to the second parameter and then it returns a function",
    "start": "2578119",
    "end": "2584760"
  },
  {
    "text": "that can be worked only on an error string which we assuming that the error type for our expected so that's how you",
    "start": "2584760",
    "end": "2591000"
  },
  {
    "text": "can use it and there can be much more arguments you can pass addition context",
    "start": "2591000",
    "end": "2596359"
  },
  {
    "text": "yes I see",
    "start": "2596359",
    "end": "2599200"
  },
  {
    "text": "question mm you just",
    "start": "2602960",
    "end": "2609119"
  },
  {
    "text": "uh yeah so basically I will not perhaps help you the question was about using",
    "start": "2621760",
    "end": "2629000"
  },
  {
    "text": "lambdas oneliner lambdas named lambdas for or else or for this like scenarios",
    "start": "2629000",
    "end": "2635720"
  },
  {
    "text": "where you can just fit the very tiny Lambda into the code if you have very",
    "start": "2635720",
    "end": "2641760"
  },
  {
    "text": "tiny Lambda one line Lambda use it like no problem if you say have the scenarios",
    "start": "2641760",
    "end": "2648400"
  },
  {
    "text": "where you have only like very short chain of the call say of there is like",
    "start": "2648400",
    "end": "2655359"
  },
  {
    "text": "one or two and z and their function is very small and you have named V liners inside function use it but say if you",
    "start": "2655359",
    "end": "2663119"
  },
  {
    "text": "have much more complicated cases where like perhaps 15 steps 10 steps in one",
    "start": "2663119",
    "end": "2668880"
  },
  {
    "text": "functions and that can be blow your function significantly then don't use it",
    "start": "2668880",
    "end": "2674280"
  },
  {
    "text": "it's mostly about like a well I hate it but it's mostly about common sense so if",
    "start": "2674280",
    "end": "2680440"
  },
  {
    "text": "you say have some static analysis tool like sonor or something that can help you with a function with the function",
    "start": "2680440",
    "end": "2686440"
  },
  {
    "text": "complexity so this function is getting too long so that you probably shouldn't use like a lot of named lambas even they",
    "start": "2686440",
    "end": "2691839"
  },
  {
    "text": "on liners yeah yeah so I hope I answered so but yeah",
    "start": "2691839",
    "end": "2699040"
  },
  {
    "text": "M well the qu the question was uh you want to be on a record you will so the",
    "start": "2714800",
    "end": "2720839"
  },
  {
    "text": "question was about the readability of this stuff and yeah M and I just for the context working together and we are a",
    "start": "2720839",
    "end": "2727359"
  },
  {
    "text": "lot about the readability of buy and back and stuff and that's why I put it as a controversial thing so it can be",
    "start": "2727359",
    "end": "2734800"
  },
  {
    "text": "good and can be bad but you should accept certain rules across your code",
    "start": "2734800",
    "end": "2740559"
  },
  {
    "text": "base whether you use it or you do not use it whether you think like you know among all developers that is good or",
    "start": "2740559",
    "end": "2747160"
  },
  {
    "text": "whether it's bad for you because there is no like Universal thing with third party libraries we can have applicatives",
    "start": "2747160",
    "end": "2752960"
  },
  {
    "text": "we have some other things that can help you to deal with this however there is no Universal answer so if you",
    "start": "2752960",
    "end": "2759839"
  },
  {
    "text": "like as a developers of a certain project of a library gathers and say okay bind back bind front are ugly never",
    "start": "2759839",
    "end": "2765880"
  },
  {
    "text": "use it use small lambdas fine I mean do it but if you said it's good to use them",
    "start": "2765880",
    "end": "2772040"
  },
  {
    "text": "also use them it's again common sense and people agreement people is a key factor that would be my answer if",
    "start": "2772040",
    "end": "2778599"
  },
  {
    "text": "it's satisfactory enough",
    "start": "2778599",
    "end": "2783359"
  },
  {
    "text": "else okay there was a comment about externally remarkable talks about bind",
    "start": "2800319",
    "end": "2805599"
  },
  {
    "text": "back or not bind back yeah we had a few discussion but in our company we are still kind of not in the conclusion",
    "start": "2805599",
    "end": "2812240"
  },
  {
    "text": "that's why it's not fully accepted and that's why we use it in a very limited libraries like wied Li subset of",
    "start": "2812240",
    "end": "2819599"
  },
  {
    "text": "libraries so like the core parts of our framework that they used but widely in",
    "start": "2819599",
    "end": "2824920"
  },
  {
    "text": "the functional feature right related code it's not used",
    "start": "2824920",
    "end": "2830040"
  },
  {
    "text": "another do",
    "start": "2832160",
    "end": "2835318"
  },
  {
    "text": "it I did so the comment from Jason was that",
    "start": "2838400",
    "end": "2845400"
  },
  {
    "text": "there is no name space in front of buy and back and this is where fair point so they usually like name spaces here there",
    "start": "2845400",
    "end": "2852440"
  },
  {
    "text": "can be Nam spaces here and there can be much longer but yeah yeah yeah that's true that's true but if we use another",
    "start": "2852440",
    "end": "2861079"
  },
  {
    "text": "stuff like another example if you use lambdas it will not make it even shorter so like yeah I kind of cheated but well",
    "start": "2861079",
    "end": "2867559"
  },
  {
    "text": "yes in a way I'm not cheated so because all of this like by readability or by lens of the line that would be pretty",
    "start": "2867559",
    "end": "2873559"
  },
  {
    "text": "much equal Solutions because them they can have capture lease you need to to preserve something as well and that can",
    "start": "2873559",
    "end": "2878760"
  },
  {
    "text": "be like pretty much the",
    "start": "2878760",
    "end": "2882119"
  },
  {
    "text": "same un Fair it's string view but",
    "start": "2886920",
    "end": "2893160"
  },
  {
    "text": "yeah well if if if I use string views perhaps not the comment was about additional stuff that's that's a very",
    "start": "2898240",
    "end": "2904720"
  },
  {
    "text": "good point by the way if we just not you know like discussing for many parameters use in buy back you need to pass St D",
    "start": "2904720",
    "end": "2912319"
  },
  {
    "text": "because there should be values so you Cann freely bind regular references",
    "start": "2912319",
    "end": "2917800"
  },
  {
    "text": "that's the point so if your function say here if it was the second parameter was",
    "start": "2917800",
    "end": "2923079"
  },
  {
    "text": "just a regular reference to something you want to alter something in your function that you should use to DFT to",
    "start": "2923079",
    "end": "2929160"
  },
  {
    "text": "wrap it you will not be able to pass in buy back without ref St ref so that's",
    "start": "2929160",
    "end": "2935040"
  },
  {
    "text": "fair point it's a good one so any other comments about second controversial stuff because I have",
    "start": "2935040",
    "end": "2941319"
  },
  {
    "text": "more no okay we should be fine uh in terms of time so this one is another",
    "start": "2941319",
    "end": "2949839"
  },
  {
    "text": "controversial part so I would recommend for well to have more",
    "start": "2949839",
    "end": "2956839"
  },
  {
    "text": "easy changeability of the function to make all functions to return",
    "start": "2956839",
    "end": "2963079"
  },
  {
    "text": "composable types like expected or optional even if you do not needed so",
    "start": "2963079",
    "end": "2968319"
  },
  {
    "text": "because here it's like easy to chain them you don't need to use any other s",
    "start": "2968319",
    "end": "2973720"
  },
  {
    "text": "party librar since a very good option for the beginning while you don't start using anything",
    "start": "2973720",
    "end": "2979000"
  },
  {
    "text": "else here we have an example that some internal details where we removing from",
    "start": "2979000",
    "end": "2985880"
  },
  {
    "text": "layout we have an iterator to map of windows then we have the windows themselves and the stack and then we are",
    "start": "2985880",
    "end": "2992119"
  },
  {
    "text": "erasing stuff and see here that's like potentially nothing can fail or",
    "start": "2992119",
    "end": "2997440"
  },
  {
    "text": "something can fail dat is Mission or something we don't care about it and we simply return nothing so but void they",
    "start": "2997440",
    "end": "3006960"
  },
  {
    "text": "expect it is here and it's here because this function we can easily by using bind back or Lambda or something we can",
    "start": "3006960",
    "end": "3013480"
  },
  {
    "text": "change this function we can work with it further and only the like things to argue about it why my function should",
    "start": "3013480",
    "end": "3020760"
  },
  {
    "text": "return something why should return expected if I don't need it and I would answer it like if",
    "start": "3020760",
    "end": "3027160"
  },
  {
    "text": "and only if we have like you know pure stuffs to the expected pure that wouldn't have the ugly and cumbersome",
    "start": "3027160",
    "end": "3032240"
  },
  {
    "text": "syntax we probably wouldn't have the this one here but since we do not have",
    "start": "3032240",
    "end": "3037680"
  },
  {
    "text": "it I would recommend to return the types that can be composable",
    "start": "3037680",
    "end": "3043359"
  },
  {
    "text": "types is manic operations even if some points you might not need it or think it's",
    "start": "3043359",
    "end": "3050119"
  },
  {
    "text": "redundant okay no questions so far that's a good one that's not not",
    "start": "3050520",
    "end": "3056839"
  },
  {
    "text": "controversial so if you use like any kind of say algebraic data types or like",
    "start": "3056839",
    "end": "3063680"
  },
  {
    "text": "tles of pairs that's very good practice those are your best friends ever you",
    "start": "3063680",
    "end": "3069480"
  },
  {
    "text": "don't need to create external structure it's easy to pass several object as a context between function chains uh we",
    "start": "3069480",
    "end": "3078079"
  },
  {
    "text": "all familiar with tles and pairs right yeah oh that's just a collection",
    "start": "3078079",
    "end": "3085400"
  },
  {
    "text": "of the objects with different types that you can pass here we for instance have",
    "start": "3085400",
    "end": "3091200"
  },
  {
    "text": "a function to create qml component we have an engine to create it for we have a file name and we have a name that can",
    "start": "3091200",
    "end": "3098119"
  },
  {
    "text": "be set for the created components so we're doing something with that and for the other steps we might need the qml",
    "start": "3098119",
    "end": "3105119"
  },
  {
    "text": "context that created and qml component that created and we simply create a tle out of it and then move into the second",
    "start": "3105119",
    "end": "3111880"
  },
  {
    "text": "function but the point is that second function should have a signature that accepts this exact tle that you have",
    "start": "3111880",
    "end": "3117319"
  },
  {
    "text": "structural binding and then you can have it as a separate stuff very cool like if",
    "start": "3117319",
    "end": "3123119"
  },
  {
    "text": "you need only two you stood pair if you need more use to tle or just expose some structures and if you need in",
    "start": "3123119",
    "end": "3130000"
  },
  {
    "text": "more places and then I want to remind we",
    "start": "3130000",
    "end": "3136160"
  },
  {
    "text": "already had chat about it many times but do not forget about this super nice monatic function transform error so this",
    "start": "3136160",
    "end": "3142799"
  },
  {
    "text": "one is used to change the type of error the idea is that we do have many",
    "start": "3142799",
    "end": "3148640"
  },
  {
    "text": "different kind of libraries that can provide different kind of Errors say one provide one file error another another",
    "start": "3148640",
    "end": "3154720"
  },
  {
    "text": "filer or you need to convert it when you use many of different libraries then you need to pass an additional context just",
    "start": "3154720",
    "end": "3161119"
  },
  {
    "text": "imagine that in scope of one function you need to say to pass some contexts that you'll be using for cleaning up if",
    "start": "3161119",
    "end": "3167559"
  },
  {
    "text": "it if there is an error it means that you need to change the error type of the of your expected thing and then you",
    "start": "3167559",
    "end": "3174400"
  },
  {
    "text": "might need to change it again if you do cleanups so that's super useful function do not forget about it and my last",
    "start": "3174400",
    "end": "3182400"
  },
  {
    "text": "bullet here it's like about adding a prefix so in this prefix is also cool if",
    "start": "3182400",
    "end": "3188480"
  },
  {
    "text": "you need to slightly amend the error messages I showed like at context or",
    "start": "3188480",
    "end": "3194000"
  },
  {
    "text": "something and my last advice please use and explore s party",
    "start": "3194000",
    "end": "3200839"
  },
  {
    "text": "libraries perhaps not from the very beginning but there are many nice",
    "start": "3200839",
    "end": "3207400"
  },
  {
    "text": "functional libraries for C++ I would recommend explore the source code of TL",
    "start": "3207400",
    "end": "3213240"
  },
  {
    "text": "of ranges of LIF of many other things to just get inspired to learn how the best",
    "start": "3213240",
    "end": "3221200"
  },
  {
    "text": "practices applied many people contributed to those things that's very nicely designed you can learn and get a",
    "start": "3221200",
    "end": "3227640"
  },
  {
    "text": "lot from it and improve your code your skills you can contribute back if you want like say if some MTH or something",
    "start": "3227640",
    "end": "3234200"
  },
  {
    "text": "are not con expert for instance or some other the cases very nice things to do and with",
    "start": "3234200",
    "end": "3241680"
  },
  {
    "text": "this thank you guys for watching that's it for",
    "start": "3241680",
    "end": "3247280"
  },
  {
    "text": "me any questions please shoot me",
    "start": "3251079",
    "end": "3256400"
  }
]