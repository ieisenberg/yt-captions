[
  {
    "start": "0",
    "end": "142000"
  },
  {
    "text": "hi everyone um I'm so blown away that so many of you have come to to hear me um",
    "start": "7160",
    "end": "14679"
  },
  {
    "text": "and actually I was supposed to say go k Hound um so yeah today we'll be talking",
    "start": "14679",
    "end": "21119"
  },
  {
    "text": "about testing and I am going to demonstrate a variety of tools to you",
    "start": "21119",
    "end": "26679"
  },
  {
    "text": "which you will be able to use in um any language and I'll tell you what languages are supported and how stuff",
    "start": "26679",
    "end": "32279"
  },
  {
    "text": "works but I am a goer so I write go um and I am going to demonstrate everything",
    "start": "32279",
    "end": "39000"
  },
  {
    "text": "with go and uh for those of you that are not you know are there any golfers in the room yes a few people well done um",
    "start": "39000",
    "end": "49280"
  },
  {
    "text": "so for those of you that are not aware like the go Community the people in the go Community are called gophers and this",
    "start": "49280",
    "end": "55079"
  },
  {
    "text": "is our mascot they've got like teeny tiny arms and they do funny things and they can't typ on keyboards and stuff so",
    "start": "55079",
    "end": "62079"
  },
  {
    "text": "um that's why they're there so a little bit about me um I'm currently working in",
    "start": "62079",
    "end": "67640"
  },
  {
    "text": "the developer relations field so I go to conferences and I talk about stuff I've",
    "start": "67640",
    "end": "72799"
  },
  {
    "text": "been a go engineer since 2018 but I started as a Java engineer um I'm a",
    "start": "72799",
    "end": "78880"
  },
  {
    "text": "LinkedIn learning instructor and I wrote a book about test R development and go",
    "start": "78880",
    "end": "84280"
  },
  {
    "text": "um and a lot of the ideas that are in this presentation are from the book because I wanted to make them more",
    "start": "84280",
    "end": "90680"
  },
  {
    "text": "available to everyone um and also I grew up and I studied at DTU which is",
    "start": "90680",
    "end": "97159"
  },
  {
    "text": "Technical University of Denmark so um I'm absolutely flabbergasted so honored",
    "start": "97159",
    "end": "102880"
  },
  {
    "text": "to be able to stand on stage here in wonderful copen again I'm also an",
    "start": "102880",
    "end": "107960"
  },
  {
    "text": "organizer of women who go um that's the logo and it's also on my t-shirt uh",
    "start": "107960",
    "end": "113240"
  },
  {
    "text": "women who go is a community initiative to help diversity in the go community so",
    "start": "113240",
    "end": "120399"
  },
  {
    "text": "about only 4% of go Engineers are women and we want to promote leadership and um",
    "start": "120399",
    "end": "125920"
  },
  {
    "text": "get people a nicer entry into go um there are chapters all over the world",
    "start": "125920",
    "end": "131680"
  },
  {
    "text": "but unfortunately there's not a Copenhagen chapter so if anyone is interested in getting involved and maybe",
    "start": "131680",
    "end": "138360"
  },
  {
    "text": "starting a chapter we can talk about that later anyway that's all about me so before we go into testing I want",
    "start": "138360",
    "end": "146800"
  },
  {
    "start": "142000",
    "end": "277000"
  },
  {
    "text": "to talk about bugs because testing is a tool to avoid bugs right so",
    "start": "146800",
    "end": "154640"
  },
  {
    "text": "what percentage of time do you think developers spend fixing bugs and this is going to be the only audience",
    "start": "154640",
    "end": "161120"
  },
  {
    "text": "interaction you'll have to live through so uh can I get some votes if you think",
    "start": "161120",
    "end": "166159"
  },
  {
    "text": "it's less than a quarter of our time less than 25% very very very shy of very few votes",
    "start": "166159",
    "end": "175280"
  },
  {
    "text": "if you think it's between a quarter and half of our time oh yeah there we're not",
    "start": "175280",
    "end": "181280"
  },
  {
    "text": "shy now there's the majority of people and if you think it's a whopping more",
    "start": "181280",
    "end": "186760"
  },
  {
    "text": "than half of our time yeah yeah I see I see some pain in some eyes here yeah okay so according to",
    "start": "186760",
    "end": "196400"
  },
  {
    "text": "rollar which is an observability company they uh so I haven't written much down but I wanted to really do justice to the",
    "start": "196400",
    "end": "203360"
  },
  {
    "text": "survey they did a survey on 950 developers in 2021 and the answer are that 38% of",
    "start": "203360",
    "end": "211439"
  },
  {
    "text": "people spend up to a quarter of their time fixing bogs um 26% spend half of",
    "start": "211439",
    "end": "217720"
  },
  {
    "text": "their time fixing bgs and 8% spent more than three qus of their time and I",
    "start": "217720",
    "end": "223959"
  },
  {
    "text": "really my heart really goes out to those people but the funny thing is also kind of tragic is that 2third of the people",
    "start": "223959",
    "end": "231400"
  },
  {
    "text": "surveyed said they'd rather do an unpleasant activity than fixed box",
    "start": "231400",
    "end": "237280"
  },
  {
    "text": "26% said they'd rather pay their bills like I'd rather pay my bills get rid of",
    "start": "237280",
    "end": "243519"
  },
  {
    "text": "money than actually fix this bug which is insane right 21% said they'd rather",
    "start": "243519",
    "end": "249360"
  },
  {
    "text": "go to the dentist I feel like that's even sadder and 20% said they'd rather",
    "start": "249360",
    "end": "255480"
  },
  {
    "text": "spend time with their in-laws I don't know maybe their in-laws are like really fun I have no idea but anyways we spend",
    "start": "255480",
    "end": "263199"
  },
  {
    "text": "a lot of time fixing bugs and we don't like it so the main tool that we have",
    "start": "263199",
    "end": "269440"
  },
  {
    "text": "that we can yield in our hands to stop these things from happening to us that we really don't like is to write tests",
    "start": "269440",
    "end": "276600"
  },
  {
    "text": "and that's why I'm here to show you the way uh but first let's look at some common bug causes so these are not the",
    "start": "276600",
    "end": "284320"
  },
  {
    "start": "277000",
    "end": "374000"
  },
  {
    "text": "only bug causes um but it's the ones that I've chosen to uh focus on today so",
    "start": "284320",
    "end": "290880"
  },
  {
    "text": "first we've got miscommunicated client requirements developers are often really far away from the clients we didn't",
    "start": "290880",
    "end": "297639"
  },
  {
    "text": "build the thing they wanted cuz we didn't understand what they wanted um you've got your pore design and implementation",
    "start": "297639",
    "end": "304520"
  },
  {
    "text": "we've all cut corners and know it's not something we're proud of but deadlines come and sometimes we cut corners and we",
    "start": "304520",
    "end": "311400"
  },
  {
    "text": "reuse we copy some code and then all of a sudden bugs happen you have",
    "start": "311400",
    "end": "316560"
  },
  {
    "text": "insufficient testing so we know that uh we should be aiming on 80% test coverage",
    "start": "316560",
    "end": "322759"
  },
  {
    "text": "but again things happen and we got to get things out the door and some most of the time it's the tests that get the",
    "start": "322759",
    "end": "329919"
  },
  {
    "text": "boot um then you've got even if you do everything right you still can have",
    "start": "329919",
    "end": "335199"
  },
  {
    "text": "functionality regressions um because maybe someone wanted to introduce something new and then they ended up",
    "start": "335199",
    "end": "341600"
  },
  {
    "text": "breaking your little like baby feature that you nurtured and put in production um and you could also have a the",
    "start": "341600",
    "end": "349400"
  },
  {
    "text": "problems from inside the house so incompatible dependency API changes",
    "start": "349400",
    "end": "354560"
  },
  {
    "text": "someone changed an API that really trusted and they didn't tell you because why would they um or the coal can be",
    "start": "354560",
    "end": "361880"
  },
  {
    "text": "coming from inside the house and you've got unexpected changes inside the system in a microservice architecture where you",
    "start": "361880",
    "end": "368919"
  },
  {
    "text": "don't know what team B is doing um you know these things could happen so we",
    "start": "368919",
    "end": "375720"
  },
  {
    "start": "374000",
    "end": "488000"
  },
  {
    "text": "often talk about the uh software development life cycle and this was like one of the things that came along with",
    "start": "375720",
    "end": "382280"
  },
  {
    "text": "the devops with the devops movement um and what we see is these things that I",
    "start": "382280",
    "end": "387720"
  },
  {
    "text": "mentioned are riddle throughout the software development life cycle so they can happen at any time especially what I",
    "start": "387720",
    "end": "395680"
  },
  {
    "text": "think is really jarring and is something that's very difficult to detect is when things go wrong without you touching",
    "start": "395680",
    "end": "402560"
  },
  {
    "text": "them so past the release and the maintenance after you've tested them the API changes can happen from under you um",
    "start": "402560",
    "end": "410759"
  },
  {
    "text": "so all sorts of things can happen even if you think you've done everything right what does this point to better",
    "start": "410759",
    "end": "418000"
  },
  {
    "text": "testing strategies there's another uh very famous IBM study from 2001 take it with a little grain of",
    "start": "418000",
    "end": "425680"
  },
  {
    "text": "salt because obviously we deliver uh software in a very different way now um",
    "start": "425680",
    "end": "431440"
  },
  {
    "text": "but they say that uh the cost of fixing a bug goes to a whooping a 100 times",
    "start": "431440",
    "end": "437720"
  },
  {
    "text": "more um 100 times more expensive when you fix it and the pass the test phase",
    "start": "437720",
    "end": "444360"
  },
  {
    "text": "so if it costs one to fix it on the design phase it will cost seven at implement ation 14 in the test phase and",
    "start": "444360",
    "end": "452160"
  },
  {
    "text": "a whopping 100 in maintenance uh this was one of the um motos one of the",
    "start": "452160",
    "end": "458360"
  },
  {
    "text": "reasons that the devops movement said detect early detect often and we talk about the shift left of testing so test",
    "start": "458360",
    "end": "465800"
  },
  {
    "text": "earlier in the development pipeline so again this is difficult",
    "start": "465800",
    "end": "472120"
  },
  {
    "text": "because our bugs are happening all across the development Pipeline and it points to having some kind of automated",
    "start": "472120",
    "end": "479680"
  },
  {
    "text": "way that'll like monitor when things really go wrong and they will protect us we need automation to protect us from",
    "start": "479680",
    "end": "486960"
  },
  {
    "text": "the unknown but not All Is Lost why because",
    "start": "486960",
    "end": "492280"
  },
  {
    "start": "488000",
    "end": "564000"
  },
  {
    "text": "Engineers are now involved throughout the development pipeline like the the devops pipeline even if you have sres",
    "start": "492280",
    "end": "499599"
  },
  {
    "text": "you know they're mostly still working with Engineers that are de delivering uh features delivering functionality you",
    "start": "499599",
    "end": "507159"
  },
  {
    "text": "see this um inter disciplinary kind of team makeup where everyone can work",
    "start": "507159",
    "end": "513518"
  },
  {
    "text": "together detect bugs and fix them so um yeah I mean that sounds pretty good right when we talk about tests we talk",
    "start": "513519",
    "end": "520880"
  },
  {
    "text": "about the testing pyramid and I'm not going to spend too much time here because we all kind of know it so you've",
    "start": "520880",
    "end": "526000"
  },
  {
    "text": "got a unit test why is the pyramid wide at the bottom because that's the most amount of tests they should be writing",
    "start": "526000",
    "end": "533000"
  },
  {
    "text": "so you've got unit tests which should be the most numerous integration tests which are less numerous in the in the",
    "start": "533000",
    "end": "539200"
  },
  {
    "text": "middle and endtoend tests which are at the top um integration tests are",
    "start": "539200",
    "end": "545320"
  },
  {
    "text": "particularly interesting because they allow us to test how things work",
    "start": "545320",
    "end": "550519"
  },
  {
    "text": "together we talk about the scenes of units and the Integrations between units",
    "start": "550519",
    "end": "556200"
  },
  {
    "text": "that are perhaps working correctly but do they work well together and this is where integration tests really shine um",
    "start": "556200",
    "end": "564360"
  },
  {
    "start": "564000",
    "end": "663000"
  },
  {
    "text": "have I don't know if many of you have seen this but there's been a in 2008 2009 there's been a revision on the unit",
    "start": "564360",
    "end": "571320"
  },
  {
    "text": "testing pyramid and we call this the testing trophy um why because we writing",
    "start": "571320",
    "end": "577560"
  },
  {
    "text": "test code is real code so I'm going to say that the reason I say that is",
    "start": "577560",
    "end": "582880"
  },
  {
    "text": "because once you put some tests out there you got to maintain them and this can make it more difficult they kind of",
    "start": "582880",
    "end": "589680"
  },
  {
    "text": "like build walls around your software and it becomes more difficult to change your software why because now you got to",
    "start": "589680",
    "end": "596680"
  },
  {
    "text": "go and you got to refactor all of your test and make sure that everything is working at the bottom of the testing",
    "start": "596680",
    "end": "603800"
  },
  {
    "text": "trophy we have static checks and why do we like static checks because they're normally built into the language and you",
    "start": "603800",
    "end": "610279"
  },
  {
    "text": "don't have to to make them and maintain them um the static checks that we talk about our reviews you've got static",
    "start": "610279",
    "end": "617320"
  },
  {
    "text": "analysis check style you've got linters uh most languages will provide these but of course go particularly shines in its",
    "start": "617320",
    "end": "626000"
  },
  {
    "text": "tooling um yeah one of the reasons why we should love go um when we talk about",
    "start": "626000",
    "end": "631959"
  },
  {
    "text": "code coverage we're still talking about the 80 90% range but we notice that the",
    "start": "631959",
    "end": "638120"
  },
  {
    "text": "integration tests are more numerous why because with you know with using",
    "start": "638120",
    "end": "643360"
  },
  {
    "text": "compilers with like checks for example uh go is able to check dead code we've",
    "start": "643360",
    "end": "648959"
  },
  {
    "text": "got a lot of tooling that can help us we don't want to spend time writing unit tests that are just Getters and Setters",
    "start": "648959",
    "end": "656440"
  },
  {
    "text": "instead we should focus on these seams be between units where bugs really like",
    "start": "656440",
    "end": "661560"
  },
  {
    "text": "to borrow and Thrive okay so let's talk about microservices um I've covered the basics",
    "start": "661560",
    "end": "668800"
  },
  {
    "start": "663000",
    "end": "787000"
  },
  {
    "text": "we like we know that integration tests are better um are really important and we're going to move away from unit test",
    "start": "668800",
    "end": "676120"
  },
  {
    "text": "which are the bread and butter of Engineers um so microservices we know",
    "start": "676120",
    "end": "681760"
  },
  {
    "text": "that one of the main things that they deliver is the ability to change systems faster why because we can deliver",
    "start": "681760",
    "end": "689040"
  },
  {
    "text": "changes and release them at different times without central oversight that's one of the beauties of microservice",
    "start": "689040",
    "end": "694760"
  },
  {
    "text": "architectures we don't have to build these humongous binaries um and then deliver",
    "start": "694760",
    "end": "700560"
  },
  {
    "text": "them um when we look at uh AP at the way that two Services my interact we talk",
    "start": "700560",
    "end": "706519"
  },
  {
    "text": "about direct API calls one requests or some information um and the other",
    "start": "706519",
    "end": "711800"
  },
  {
    "text": "response or you can have it uh with a message cue and in that case we have a vent driven architecture well what can",
    "start": "711800",
    "end": "719200"
  },
  {
    "text": "go wrong where I'm always like really nagging and like oh what can go wrong um",
    "start": "719200",
    "end": "725639"
  },
  {
    "text": "so when it comes to um direct API calls you can have request and response format",
    "start": "725639",
    "end": "731360"
  },
  {
    "text": "issues you can have incorrect service Behavior so even if service B seems to",
    "start": "731360",
    "end": "736519"
  },
  {
    "text": "be passing tests and seems to be working correctly it might still not behave according to the expectations of service",
    "start": "736519",
    "end": "743639"
  },
  {
    "text": "a which is then a humongous problem in the event driven architecture we've got the same same issues we got um payloads",
    "start": "743639",
    "end": "752040"
  },
  {
    "text": "even if the response is an event payload it can still be wrong we might still not be able to pars it then of course you've",
    "start": "752040",
    "end": "758519"
  },
  {
    "text": "got Brokers so for those maybe not familiar with event driven architectures Brokers are the ones that manage message",
    "start": "758519",
    "end": "765600"
  },
  {
    "text": "cues and they take and they are able to to take to store messages until um the",
    "start": "765600",
    "end": "772760"
  },
  {
    "text": "receiver is ready to to take them on and often you you can also have events",
    "start": "772760",
    "end": "778160"
  },
  {
    "text": "acknowledged but not process so things just keep going wrong and there's no getting around it we need to up our game",
    "start": "778160",
    "end": "785760"
  },
  {
    "text": "and write more than just unit tests so I hope this has laid the foundation of",
    "start": "785760",
    "end": "791079"
  },
  {
    "start": "787000",
    "end": "863000"
  },
  {
    "text": "what I'm going to talk to you about when we talk about so let's start pulling the testing lever I've talked enough you",
    "start": "791079",
    "end": "796680"
  },
  {
    "text": "know let's see some action here when we talk about testing we talk about test driven development and this",
    "start": "796680",
    "end": "802800"
  },
  {
    "text": "is the flow you know you write test code first you see it fail um and then you write implementation code and then you",
    "start": "802800",
    "end": "809600"
  },
  {
    "text": "see the test pass and you do this like wonderful elegant dance uh where you assert the logic of the unit under test",
    "start": "809600",
    "end": "817079"
  },
  {
    "text": "um even though my book is about test driven development and I believe that writing test is obviously very valuable",
    "start": "817079",
    "end": "823440"
  },
  {
    "text": "I'm not like a Die Hard tddd practitioner because I think sometimes",
    "start": "823440",
    "end": "829600"
  },
  {
    "text": "we don't think in fractions we don't think in if statements and then a little bit like we think in bigger blocks and",
    "start": "829600",
    "end": "836440"
  },
  {
    "text": "our thoughts are more abstract than a little tiny piece of functionality that you'll write and then go test",
    "start": "836440",
    "end": "842920"
  },
  {
    "text": "immediately so honestly I don't really mind if you use tdd as long as you test",
    "start": "842920",
    "end": "847959"
  },
  {
    "text": "correctly and you make testing part of your practice and um something that you",
    "start": "847959",
    "end": "853360"
  },
  {
    "text": "like internalize that quality is something you care about um yeah so I'm",
    "start": "853360",
    "end": "858399"
  },
  {
    "text": "probably gonna you know if you at me online I'm sure that tdd people will go",
    "start": "858399",
    "end": "863600"
  },
  {
    "start": "863000",
    "end": "1000000"
  },
  {
    "text": "mental in go so this is where we I start to show you go um Ino packages are the",
    "start": "863600",
    "end": "870600"
  },
  {
    "text": "smallest unit under test and they are uh what we call a self-contained mini API",
    "start": "870600",
    "end": "876320"
  },
  {
    "text": "the only things that you're able to see inside um so the only thing that you're able to see outside of package scope is",
    "start": "876320",
    "end": "884720"
  },
  {
    "text": "something called exported names there's no public modifiers um the only things",
    "start": "884720",
    "end": "890720"
  },
  {
    "text": "the only way you know that something is exported is because it's capitalized o",
    "start": "890720",
    "end": "896240"
  },
  {
    "text": "um so when I capitalize something that's the equivalent of me making it",
    "start": "896240",
    "end": "901920"
  },
  {
    "text": "public tests in go are just functions and we declare functions with the funk keyword and uh tests must start with um",
    "start": "901920",
    "end": "910120"
  },
  {
    "text": "they must have the signature which is the as you see test hello um so they start with the capital test and then we",
    "start": "910120",
    "end": "916920"
  },
  {
    "text": "camel case the rest of whatever and they must take a single testing T parameter",
    "start": "916920",
    "end": "923440"
  },
  {
    "text": "what you see there you see something really funny um there is a little star",
    "start": "923440",
    "end": "928680"
  },
  {
    "text": "in front of testing T pointers are explicit and goal uh a lot of people get kind of annoyed but um due to",
    "start": "928680",
    "end": "936720"
  },
  {
    "text": "memory go was made to be very very fast um and when you are able to handle your",
    "start": "936720",
    "end": "942959"
  },
  {
    "text": "pointers explicitly you can make really performant code what we then see is um we start I",
    "start": "942959",
    "end": "950000"
  },
  {
    "text": "start by declaring an array of names with go Anna and Bell then we for Loop",
    "start": "950000",
    "end": "955160"
  },
  {
    "text": "over these two inputs and we're going to run two tests um the t. run that you see here is my",
    "start": "955160",
    "end": "962920"
  },
  {
    "text": "way of creating subtests which are kind of like test like me building a mini",
    "start": "962920",
    "end": "968079"
  },
  {
    "text": "test suite and then you're able to write these tests that can execute over a variety of inputs so that's it I mean",
    "start": "968079",
    "end": "976079"
  },
  {
    "text": "testing is pretty easy there oh if something goes wrong then we um call the T dot fatal and say like hey this Suite",
    "start": "976079",
    "end": "983800"
  },
  {
    "text": "is going to stop because this is the end of the world and we're going to cut the whole um the whole test run so I know it",
    "start": "983800",
    "end": "990880"
  },
  {
    "text": "seems kind of like weird um but I want to I it's my job in life to show people",
    "start": "990880",
    "end": "997880"
  },
  {
    "text": "go codes so now you've seen it um another cool thing that we talk about when we talk about testing in go",
    "start": "997880",
    "end": "1004680"
  },
  {
    "start": "1000000",
    "end": "1113000"
  },
  {
    "text": "is fuzz testing so fuzz testing is um a little bit different but it generates a",
    "start": "1004680",
    "end": "1012560"
  },
  {
    "text": "corpus what we call a corpus of values from a starting seed you can do that in",
    "start": "1012560",
    "end": "1018839"
  },
  {
    "text": "a lot of in other languages as well but it was recently introduced in go and",
    "start": "1018839",
    "end": "1024360"
  },
  {
    "text": "what happens is that I don't have to write Annabel CL Clarice Diane we can",
    "start": "1024360",
    "end": "1030038"
  },
  {
    "text": "begin to generate a large variety of inputs and cover and find edge cases the",
    "start": "1030039",
    "end": "1036880"
  },
  {
    "text": "way they work is they start with the keyword fuzz and then they take a different parameter which is the",
    "start": "1036880",
    "end": "1042360"
  },
  {
    "text": "testing. f um then instead of running it you call fuzz and at that point the",
    "start": "1042360",
    "end": "1048919"
  },
  {
    "text": "fuzzer what we call the go fuzzer will begin to generate a huge amount of",
    "start": "1048919",
    "end": "1055360"
  },
  {
    "text": "inputs um it allows us to it helps us to ensure code robustness inside our unit",
    "start": "1055360",
    "end": "1062480"
  },
  {
    "text": "and what do we mean by code robustness is how do we handle completely",
    "start": "1062480",
    "end": "1068440"
  },
  {
    "text": "unexpected inputs for example let's say that um instead of Anna and Bell I've",
    "start": "1068440",
    "end": "1074200"
  },
  {
    "text": "got some non-unicode characters even in my little um even in my my",
    "start": "1074200",
    "end": "1079280"
  },
  {
    "text": "little teeny tiny say hello function a whole bunch of stuff can go wrong and",
    "start": "1079280",
    "end": "1085240"
  },
  {
    "text": "this is where fuzzing really shines um so I know I wanted to take you above",
    "start": "1085240",
    "end": "1091120"
  },
  {
    "text": "unit tests but I really wanted to show you fuz testing because it is very",
    "start": "1091120",
    "end": "1096320"
  },
  {
    "text": "important also in security testing so um fuzz tests are really a great fit for",
    "start": "1096320",
    "end": "1103200"
  },
  {
    "text": "testing any kind of user input that you don't trust and you should never trust the user input right",
    "start": "1103200",
    "end": "1108840"
  },
  {
    "text": "um even if it's coming for your trusted friends third party apis um okay so I'm going to show you a",
    "start": "1108840",
    "end": "1116080"
  },
  {
    "start": "1113000",
    "end": "1164000"
  },
  {
    "text": "little bit more go code uh I've built a super useful conference talks Service uh it's",
    "start": "1116080",
    "end": "1125320"
  },
  {
    "text": "uh we're going to inter interact with it as a client and the server exposes three",
    "start": "1125320",
    "end": "1130600"
  },
  {
    "text": "endpoints events events and byid so I've built like a little teeny tiny rest API",
    "start": "1130600",
    "end": "1136120"
  },
  {
    "text": "and even in this thing that doesn't have any um other third party service doesn't",
    "start": "1136120",
    "end": "1143440"
  },
  {
    "text": "save any data I'm going to show you you can get we can get in some serious trouble and we can write some really",
    "start": "1143440",
    "end": "1148760"
  },
  {
    "text": "interesting tests um what it does is it saves some events so here we have Copenhagen devfest and then you can uh",
    "start": "1148760",
    "end": "1155520"
  },
  {
    "text": "list all of the talks that um are from this event and it allows us to you know maybe just like filter through talks and",
    "start": "1155520",
    "end": "1162360"
  },
  {
    "text": "there in a particular day so let's see the code so all of the",
    "start": "1162360",
    "end": "1168520"
  },
  {
    "start": "1164000",
    "end": "1470000"
  },
  {
    "text": "code that I show you will is available on GitHub testing strategies demo and added is my username um the slides will",
    "start": "1168520",
    "end": "1177000"
  },
  {
    "text": "also be there by the way so you know if you want to check out the slides um and um you can do that maybe because you",
    "start": "1177000",
    "end": "1183799"
  },
  {
    "text": "particularly like purple and pink um anyways so first I'm going to show you",
    "start": "1183799",
    "end": "1190120"
  },
  {
    "text": "the event so um the way we do Json tags",
    "start": "1190120",
    "end": "1195559"
  },
  {
    "text": "um is with these backslashes so um this is the the stru structs are custom types",
    "start": "1195559",
    "end": "1201600"
  },
  {
    "text": "um by the way go is not object oriented we can talk about that later um so we",
    "start": "1201600",
    "end": "1206720"
  },
  {
    "text": "have these custom types called talks and then talks belong to events um so I've built just this little thing in the",
    "start": "1206720",
    "end": "1213280"
  },
  {
    "text": "event service oops two seconds um in the event",
    "start": "1213280",
    "end": "1218480"
  },
  {
    "text": "service I save events inside a map maps are dictionaries like you might not them",
    "start": "1218480",
    "end": "1224320"
  },
  {
    "text": "as as dictionaries in um in go and then when we as an ID we just simply fetch it",
    "start": "1224320",
    "end": "1230720"
  },
  {
    "text": "from the map and if if we don't find one we return a nil so you know we have Nils",
    "start": "1230720",
    "end": "1237080"
  },
  {
    "text": "because we got pointers when I test the event um when I test this just this little sorry when I",
    "start": "1237080",
    "end": "1245240"
  },
  {
    "text": "test just this little tiny function I'm going to write a test that does a variety of inputs and the way we do that",
    "start": "1245240",
    "end": "1251520"
  },
  {
    "text": "is I set up an array exactly like we saw with Anna and Belle um then talks belong",
    "start": "1251520",
    "end": "1256840"
  },
  {
    "text": "to different events I initialize the event service and then I run different",
    "start": "1256840",
    "end": "1262280"
  },
  {
    "text": "subtests exactly like we saw before so if I were to run this",
    "start": "1262280",
    "end": "1269880"
  },
  {
    "text": "test um so you write go test and then in order to run all of the tests in your",
    "start": "1269880",
    "end": "1275679"
  },
  {
    "text": "Suite you do this little thing which says Traverse all the directories and find all of the tests and then I'm going",
    "start": "1275679",
    "end": "1283520"
  },
  {
    "text": "to do minus V which means veros so we can see all of the output also how funny",
    "start": "1283520",
    "end": "1290279"
  },
  {
    "text": "would it be if tests failed um so what we see here these are",
    "start": "1290279",
    "end": "1297000"
  },
  {
    "text": "the um the subtest that I was talking about you see for example test get event filter talks and then we've got subtests",
    "start": "1297000",
    "end": "1304320"
  },
  {
    "text": "that are nested underneath it um you could do the same with Java and and Suites I suppose um but the cool thing",
    "start": "1304320",
    "end": "1310960"
  },
  {
    "text": "about this kind of output is that you can see exactly what ran and what didn't",
    "start": "1310960",
    "end": "1316080"
  },
  {
    "text": "uh what passed and what didn't pass I want to show you the fuzz testing as",
    "start": "1316080",
    "end": "1321320"
  },
  {
    "text": "well so what I'm going to use as my fuzz Target is the uh talk title um because",
    "start": "1321320",
    "end": "1327760"
  },
  {
    "text": "we talked about that there could be all sorts of like random characters and what will we do um so I create a new talk the",
    "start": "1327760",
    "end": "1335520"
  },
  {
    "text": "name is going to be the target um and then I do the exact same kind of um",
    "start": "1335520",
    "end": "1341360"
  },
  {
    "text": "assertions that we saw before save the event can I fetch it back and is it",
    "start": "1341360",
    "end": "1347279"
  },
  {
    "text": "correct now fuzz tests will run until they fail",
    "start": "1347279",
    "end": "1353159"
  },
  {
    "text": "so that means that if you have a function that says aert that returns through you could end up running forever",
    "start": "1353159",
    "end": "1359720"
  },
  {
    "text": "right um so what we do is they will run until you fail you panic um or there's",
    "start": "1359720",
    "end": "1366640"
  },
  {
    "text": "like um or it runs out of time there we go um so in order to I'm going to come",
    "start": "1366640",
    "end": "1373000"
  },
  {
    "text": "click this so I've got a little cheat sheet here so in order to test it we get go test",
    "start": "1373000",
    "end": "1378480"
  },
  {
    "text": "and then the dash fuzz allows me to say like listen this is the test I want so my test was called fuzz get",
    "start": "1378480",
    "end": "1385720"
  },
  {
    "text": "event then I can say Okay I want to run it for a particular time because I know",
    "start": "1385720",
    "end": "1392000"
  },
  {
    "text": "my my code is perfect so I'm going to specify fuz time as 5 Seconds sorry that",
    "start": "1392000",
    "end": "1399720"
  },
  {
    "text": "5s and then it is going to live in the data folder so I won't run everything",
    "start": "1399720",
    "end": "1405840"
  },
  {
    "text": "this time so this is how I can say run this particular thing what's happening now is we're Gathering a baseline we're",
    "start": "1405840",
    "end": "1413240"
  },
  {
    "text": "running over multiple workers and actually we executed this many um this",
    "start": "1413240",
    "end": "1420000"
  },
  {
    "text": "many uh test inputs so you see this makes it so easy for us to test with a",
    "start": "1420000",
    "end": "1426679"
  },
  {
    "text": "variety like imagine if I had to generate all of these inputs a I'm really lazy so I don't want to do that",
    "start": "1426679",
    "end": "1432559"
  },
  {
    "text": "and B I'll probably get it wrong because generating true Randomness is really",
    "start": "1432559",
    "end": "1438440"
  },
  {
    "text": "difficult um the go fuzzer will also try and find try and catch you out so",
    "start": "1438440",
    "end": "1444039"
  },
  {
    "text": "they'll be like what they find what are called in interesting targets so they'll",
    "start": "1444039",
    "end": "1449360"
  },
  {
    "text": "try and see generate a v wide variety of things and then find a um a",
    "start": "1449360",
    "end": "1455960"
  },
  {
    "text": "failure so I think this is also really interesting if let's say your service is written in another language and you",
    "start": "1455960",
    "end": "1462400"
  },
  {
    "text": "wanted to make use of the fuzzer you could still do that and you can uh fuzz input and output at any point okay I",
    "start": "1462400",
    "end": "1470960"
  },
  {
    "start": "1470000",
    "end": "1602000"
  },
  {
    "text": "hope that has wetted your appetite when it comes to testing but unfortunately I still spend all this time talking about",
    "start": "1470960",
    "end": "1477200"
  },
  {
    "text": "unit tests and I promised you more well I will deliver um okay so when we talk",
    "start": "1477200",
    "end": "1483279"
  },
  {
    "text": "so let's move up the test pyramid right um okay let's talk a little bit about",
    "start": "1483279",
    "end": "1488360"
  },
  {
    "text": "the difference between integration test and endtoend test to my great shame I was confused about them and I kind of",
    "start": "1488360",
    "end": "1494919"
  },
  {
    "text": "used them interchangeably for a little while when I was um quite Junior so I",
    "start": "1494919",
    "end": "1500279"
  },
  {
    "text": "thought it would um I thought it would be useful to talk about what they are so integration tests are all about",
    "start": "1500279",
    "end": "1508840"
  },
  {
    "text": "testing a particular well we talk we don't talk about units anymore we talk about components so self-standing",
    "start": "1508840",
    "end": "1515760"
  },
  {
    "text": "components that have a defined input output relationship uh while end to end",
    "start": "1515760",
    "end": "1521720"
  },
  {
    "text": "test test user flow and user experience the reason why end test get",
    "start": "1521720",
    "end": "1527159"
  },
  {
    "text": "get a really bad W is because they are slow and expensive the reason why they",
    "start": "1527159",
    "end": "1532600"
  },
  {
    "text": "are slow is because we need to start the whole application and end to end right",
    "start": "1532600",
    "end": "1537840"
  },
  {
    "text": "like that's the whole thing um if integration tests are good middle ground",
    "start": "1537840",
    "end": "1543320"
  },
  {
    "text": "and also why they were the biggest part of the of the testing trophy because they allow us to test larger scope while",
    "start": "1543320",
    "end": "1551240"
  },
  {
    "text": "not paying the incurring the cost correct we can perform the timing is",
    "start": "1551240",
    "end": "1557279"
  },
  {
    "text": "crucial we saw how much cost soar the longer we wait to test so the",
    "start": "1557279",
    "end": "1562919"
  },
  {
    "text": "integration tests have the the advantage that they can be performed earlier in the software development life cycle but",
    "start": "1562919",
    "end": "1570320"
  },
  {
    "text": "entest should not be thrown away why because they test what our users what",
    "start": "1570320",
    "end": "1575440"
  },
  {
    "text": "our users will will eventually see and finally the scope is that",
    "start": "1575440",
    "end": "1581320"
  },
  {
    "text": "integration test ensure that their component works as intended their component brings together multiple units",
    "start": "1581320",
    "end": "1588919"
  },
  {
    "text": "and it it test these integration seams while um entn test more have this like",
    "start": "1588919",
    "end": "1595200"
  },
  {
    "text": "more workflow kind of focus um so yeah I hope that has cleared",
    "start": "1595200",
    "end": "1600880"
  },
  {
    "text": "up anything that we didn't know in go we have the HTTP test Library which I can't",
    "start": "1600880",
    "end": "1607240"
  },
  {
    "start": "1602000",
    "end": "1663000"
  },
  {
    "text": "wait to show you the reason why we really like it is because we when we",
    "start": "1607240",
    "end": "1612720"
  },
  {
    "text": "write tests with with HTTP test we use the same code as a CL Cent will so we we",
    "start": "1612720",
    "end": "1620399"
  },
  {
    "text": "uh interact with the HTTP Library which is the default way we write uh client",
    "start": "1620399",
    "end": "1626279"
  },
  {
    "text": "code um this is huge in my opinion and I think you will agree too um it's huge",
    "start": "1626279",
    "end": "1632600"
  },
  {
    "text": "because we our tests can be the first consumers of our service of our API of",
    "start": "1632600",
    "end": "1638799"
  },
  {
    "text": "our response we can really get in and see how does it behave what should my um",
    "start": "1638799",
    "end": "1644480"
  },
  {
    "text": "depend the people that depend on my service expect um another cool thing that it does is it",
    "start": "1644480",
    "end": "1650679"
  },
  {
    "text": "starts a mini test server under the hood so I can pass a thing called a Handler",
    "start": "1650679",
    "end": "1655799"
  },
  {
    "text": "um so the Handler is the one that takes over uh HTTP requests and builds responses and Status codes another cool",
    "start": "1655799",
    "end": "1664200"
  },
  {
    "start": "1663000",
    "end": "1756000"
  },
  {
    "text": "one is this when we talk about so HTP test is important in the world of integration tests which we know is is",
    "start": "1664200",
    "end": "1670960"
  },
  {
    "text": "super super important um in the world of end to end tests we have the test",
    "start": "1670960",
    "end": "1676480"
  },
  {
    "text": "containers project so HTTP test um I should have mentioned is part of the go",
    "start": "1676480",
    "end": "1681880"
  },
  {
    "text": "standard Library while test containers is an open source project and um this",
    "start": "1681880",
    "end": "1687799"
  },
  {
    "text": "test containers is like is super cool why because it bundles together",
    "start": "1687799",
    "end": "1692919"
  },
  {
    "text": "container management with your test code and why is that cool because you don't",
    "start": "1692919",
    "end": "1699440"
  },
  {
    "text": "have to manage starting up a server waiting for like a health end point all",
    "start": "1699440",
    "end": "1704559"
  },
  {
    "text": "of this is taken care of for you and where it really really shines is when you have dependencies on other",
    "start": "1704559",
    "end": "1711200"
  },
  {
    "text": "containers as well you can encode that into your test and make it easier for you to write in t test and it makes me",
    "start": "1711200",
    "end": "1719159"
  },
  {
    "text": "really excited because I don't like to write anything other than go I don't like to write you know some other script",
    "start": "1719159",
    "end": "1726440"
  },
  {
    "text": "that'll wait for things and then return stuff or write the file or anything like that so I think this test containers",
    "start": "1726440",
    "end": "1734360"
  },
  {
    "text": "project is really a GameChanger for for me um you can see here the languages",
    "start": "1734360",
    "end": "1740480"
  },
  {
    "text": "that it supports and obviously we are obsessed with go today so it's going to be all about go um the team are really",
    "start": "1740480",
    "end": "1748159"
  },
  {
    "text": "lovely so if you want to build support for another language and you want to get involved with open source they will help",
    "start": "1748159",
    "end": "1754360"
  },
  {
    "text": "you as well okay should we see some more code I",
    "start": "1754360",
    "end": "1759399"
  },
  {
    "start": "1756000",
    "end": "2234000"
  },
  {
    "text": "think so I mean that's kind of why we're here right oops um okay so what is a",
    "start": "1759399",
    "end": "1765840"
  },
  {
    "text": "good candidate for integration testing well they are our handlers so before I",
    "start": "1765840",
    "end": "1771679"
  },
  {
    "text": "I'm just going to show you a very quick Handler so the event handler will call the event service um and get things um",
    "start": "1771679",
    "end": "1780200"
  },
  {
    "text": "get the events that are according to that request the that are according to like the endpoint or the request that",
    "start": "1780200",
    "end": "1786960"
  },
  {
    "text": "what they wanted and then we will build an HTTP response um again we do this",
    "start": "1786960",
    "end": "1792960"
  },
  {
    "text": "with the HTTP library and um then we can return responses and bad requests and",
    "start": "1792960",
    "end": "1799760"
  },
  {
    "text": "all of that when it comes to testing it um what what I want to do so integration",
    "start": "1799760",
    "end": "1806120"
  },
  {
    "text": "tests are faster than unit test than uh my apologies than NN tests but I still",
    "start": "1806120",
    "end": "1812039"
  },
  {
    "text": "might not want to run them on everything so what we usually do we need some kind of Separation what's an integration test",
    "start": "1812039",
    "end": "1818720"
  },
  {
    "text": "what's a unit test because really they are just tests when it comes to like the lens that um that the way that go",
    "start": "1818720",
    "end": "1826600"
  },
  {
    "text": "registers so the way we there are a few options but the way I've done it with is with an",
    "start": "1826600",
    "end": "1832600"
  },
  {
    "text": "environment variable so this is what I do here on line 63 um where if the",
    "start": "1832600",
    "end": "1837880"
  },
  {
    "text": "integration uh environment variable is not set then I skip this test and why is",
    "start": "1837880",
    "end": "1843720"
  },
  {
    "text": "that important because you want to give your developers a feedback loop that is",
    "start": "1843720",
    "end": "1850120"
  },
  {
    "text": "as quick as possible so maybe I don't want to run all of the integration tests when I'm testing just locally because",
    "start": "1850120",
    "end": "1857240"
  },
  {
    "text": "you know for reasons that I don't want to um then we write the test cases and",
    "start": "1857240",
    "end": "1863679"
  },
  {
    "text": "set up everything in exactly the same way in this particular um example that I",
    "start": "1863679",
    "end": "1869600"
  },
  {
    "text": "wanted to show you well we also have is something called TBL driven design um so",
    "start": "1869600",
    "end": "1875200"
  },
  {
    "text": "table driven testing so table driven testing allows us to build a map of",
    "start": "1875200",
    "end": "1880880"
  },
  {
    "text": "expected uh of respon uh of input which is a my event ID and expected response",
    "start": "1880880",
    "end": "1887440"
  },
  {
    "text": "and this is what I've built here why um this is a very popular testing technique",
    "start": "1887440",
    "end": "1893000"
  },
  {
    "text": "in goal because it can be really easy to add new inputs and outputs so you can",
    "start": "1893000",
    "end": "1898240"
  },
  {
    "text": "add a new test case really easy what we do here is we just Loop over and in the",
    "start": "1898240",
    "end": "1903360"
  },
  {
    "text": "case so some some are failures and some are passes so in this would be like a",
    "start": "1903360",
    "end": "1908919"
  },
  {
    "text": "successful test case this is how we um how we how we handle it and then in the",
    "start": "1908919",
    "end": "1914960"
  },
  {
    "text": "um in the event of a failure test a failure case which is",
    "start": "1914960",
    "end": "1920919"
  },
  {
    "text": "also super important you should test your failure cases I should have said that as well um then we do some other um",
    "start": "1920919",
    "end": "1928200"
  },
  {
    "text": "some other code the way that we interact with HTTP test is we use this we set up",
    "start": "1928200",
    "end": "1934200"
  },
  {
    "text": "a recorder we set up a request here on line 121 and then under the hood the",
    "start": "1934200",
    "end": "1940440"
  },
  {
    "text": "ephemeral test server that I was talking about is here on line 124 where you say",
    "start": "1940440",
    "end": "1946399"
  },
  {
    "text": "um s serve this HTTP and that's all we do um the way we",
    "start": "1946399",
    "end": "1952200"
  },
  {
    "text": "do the way we run that is in the usual way but I need to set this environment",
    "start": "1952200",
    "end": "1957559"
  },
  {
    "text": "variable that we spoke about and one cool thing that the uh gold tool chain can do is we can um set an environment",
    "start": "1957559",
    "end": "1964279"
  },
  {
    "text": "variable just for the scope of a single um of a single go go test command so we",
    "start": "1964279",
    "end": "1971360"
  },
  {
    "text": "also the go tool chain supports other commands other than test but obviously like this is what we're doing today",
    "start": "1971360",
    "end": "1977880"
  },
  {
    "text": "so I'm going to go say go test the tests that I want to run are in the Handler's",
    "start": "1977880",
    "end": "1983480"
  },
  {
    "text": "uh folder so I'm going to say that and then I'm going to say verbals as well so",
    "start": "1983480",
    "end": "1989039"
  },
  {
    "text": "now I'm going to run all of the integration tests and this is what comes out again they run quite quick but",
    "start": "1989039",
    "end": "1996679"
  },
  {
    "text": "actually like um 0.6 seconds is quite a lot so this is why the the reason why I",
    "start": "1996679",
    "end": "2002279"
  },
  {
    "text": "want to um why I want to skip them when I'm doing my quick feedback loop",
    "start": "2002279",
    "end": "2008960"
  },
  {
    "text": "um I'm going to show you really quick because I'm really keen on this test containers project to show you what it",
    "start": "2009240",
    "end": "2015960"
  },
  {
    "text": "looks like so way I do these expected events are in the same way that we've",
    "start": "2015960",
    "end": "2022559"
  },
  {
    "text": "done it before so we the way that I instruct test containers to run",
    "start": "2022559",
    "end": "2028120"
  },
  {
    "text": "something is uh with this container request that you see on line 47 and then",
    "start": "2028120",
    "end": "2034880"
  },
  {
    "text": "I Pro I give it an image that I've put on Doc dockerhub so I've built the image",
    "start": "2034880",
    "end": "2041320"
  },
  {
    "text": "of my server that I want to test on and I've pushed it to Docker Hub and then I",
    "start": "2041320",
    "end": "2046440"
  },
  {
    "text": "say listen on this port of obviously I've hardcoded some things because I'm",
    "start": "2046440",
    "end": "2051480"
  },
  {
    "text": "doing demos but you shouldn't hard code ports in this way then it starts up this generic",
    "start": "2051480",
    "end": "2058000"
  },
  {
    "text": "container and once the container is up then we will be able to pass to the next",
    "start": "2058000",
    "end": "2064398"
  },
  {
    "text": "to the next um part of the test deferred functions um are functions that",
    "start": "2064399",
    "end": "2070358"
  },
  {
    "text": "are like cleanup functions and go they go at the end of the test and here I say",
    "start": "2070359",
    "end": "2075599"
  },
  {
    "text": "at the end of my test Please terminate my container and clean things up for me",
    "start": "2075599",
    "end": "2080839"
  },
  {
    "text": "obviously I don't want things to like just you know live there forever um then this we are returned an",
    "start": "2080839",
    "end": "2087919"
  },
  {
    "text": "end point so this end point will be coming from your server container I don't control it it's",
    "start": "2087919",
    "end": "2094679"
  },
  {
    "text": "generated by um by um test containers and then all of the",
    "start": "2094679",
    "end": "2101119"
  },
  {
    "text": "um the rest of the test is done exactly like an integration test we use the HTTP",
    "start": "2101119",
    "end": "2106200"
  },
  {
    "text": "library to be able to interact with the ephemeral container this is actually going to be a",
    "start": "2106200",
    "end": "2112280"
  },
  {
    "text": "more exciting oh sorry this is going to be a more exciting test run um so um",
    "start": "2112280",
    "end": "2118520"
  },
  {
    "text": "I've done I didn't show you but I've got another environment variable which is",
    "start": "2118520",
    "end": "2123640"
  },
  {
    "text": "called E2 e because again I want to separate my test with I want to say like",
    "start": "2123640",
    "end": "2129040"
  },
  {
    "text": "exactly what I want to run when I want to run it um so here I say go test where",
    "start": "2129040",
    "end": "2135240"
  },
  {
    "text": "is it in the e2e um repository in the E2 uh folder and then I'm going to pass the",
    "start": "2135240",
    "end": "2142599"
  },
  {
    "text": "V so verbos this is obviously even though test containers is running what you see",
    "start": "2142599",
    "end": "2149560"
  },
  {
    "text": "here is that it's starting a container um it's then saying like this is the",
    "start": "2149560",
    "end": "2154920"
  },
  {
    "text": "container was created we wait for it we run our tests and then we terminate at",
    "start": "2154920",
    "end": "2160440"
  },
  {
    "text": "the end and finally I know it looks like we terminated the container and then we",
    "start": "2160440",
    "end": "2166400"
  },
  {
    "text": "ran the test but that's not the case um it's just the way that um it's just the",
    "start": "2166400",
    "end": "2172240"
  },
  {
    "text": "way that the outputs came come out on the console um sorry on the terminal so",
    "start": "2172240",
    "end": "2178480"
  },
  {
    "text": "the reason that this happens is that the test won't finish until the Deferred function runs and then the test output",
    "start": "2178480",
    "end": "2185960"
  },
  {
    "text": "will come on the terminal so yeah I mean it it looks weird but I'm promising you that this is what's happened because",
    "start": "2185960",
    "end": "2191319"
  },
  {
    "text": "we've waited and then we've cleaned up I think this is super cool um it's super",
    "start": "2191319",
    "end": "2197119"
  },
  {
    "text": "cool to be able to manage my container inside my test and it's super cool to",
    "start": "2197119",
    "end": "2202359"
  },
  {
    "text": "not say oh you know please look at the read me and see what the setup is um",
    "start": "2202359",
    "end": "2208960"
  },
  {
    "text": "before you run your intent test because otherwise they're fail someone will be like oh why is it failing I ran this oh",
    "start": "2208960",
    "end": "2215200"
  },
  {
    "text": "no they Supply the wrong Port I I don't know all sorts of things can happen so the management of of test containers",
    "start": "2215200",
    "end": "2221599"
  },
  {
    "text": "inside tests I think is is huge um this is I wasn't too I wasn't",
    "start": "2221599",
    "end": "2228319"
  },
  {
    "text": "aware of this project until recently so I was really Keen to include it and show it to you as well okay the next thing",
    "start": "2228319",
    "end": "2235839"
  },
  {
    "start": "2234000",
    "end": "2447000"
  },
  {
    "text": "that we're going to have so we've got we've gone all the way through in the um",
    "start": "2235839",
    "end": "2241240"
  },
  {
    "text": "in the p in the test pyramid in the what you call it in the testing trophy but I want to show you one other thing which",
    "start": "2241240",
    "end": "2247680"
  },
  {
    "text": "is contract testing so contract testing is not new but it's gained a lot of",
    "start": "2247680",
    "end": "2253040"
  },
  {
    "text": "popularity in the microservices world so there's been a lot more um like interest",
    "start": "2253040",
    "end": "2259520"
  },
  {
    "text": "in contract testing what is contract testing the reason why it's really cool is because it allows you to test a",
    "start": "2259520",
    "end": "2266160"
  },
  {
    "text": "consumer and a provider um in in separation and also have some kind of",
    "start": "2266160",
    "end": "2274560"
  },
  {
    "text": "communication tool between microservices which can be developed by different teams that never",
    "start": "2274560",
    "end": "2281000"
  },
  {
    "text": "talk so in a contract testing nomenclature a consumer issues the",
    "start": "2281000",
    "end": "2286720"
  },
  {
    "text": "request for data so they're the ones that in have that want something the provider responds to the request and",
    "start": "2286720",
    "end": "2293640"
  },
  {
    "text": "they're the ones that are returning that are returning said data the contract itself is records the",
    "start": "2293640",
    "end": "2302520"
  },
  {
    "text": "expectations of the consumer and the provider so the contract will contain like hey I'm the consumer I expect to",
    "start": "2302520",
    "end": "2309599"
  },
  {
    "text": "send you this request and I expect this response for you and then from you and",
    "start": "2309599",
    "end": "2315000"
  },
  {
    "text": "then we verify the provider is um behaving according to the consumer",
    "start": "2315000",
    "end": "2320680"
  },
  {
    "text": "expectations and why is it the Viewpoint of the consumer why is it the consumer that says like this is what I'm sending",
    "start": "2320680",
    "end": "2327319"
  },
  {
    "text": "you and this is what I expect because normally the consumer will be the one that is the external",
    "start": "2327319",
    "end": "2335240"
  },
  {
    "text": "party um so it's all they contract testing is normally also called",
    "start": "2335240",
    "end": "2340640"
  },
  {
    "text": "consumer-driven Contra contract testing because they are the ones that are recording their requests recording their",
    "start": "2340640",
    "end": "2346720"
  },
  {
    "text": "expectations and then the provider has to fall in line the contract is um as we will see",
    "start": "2346720",
    "end": "2354040"
  },
  {
    "text": "it's just a Json file um and it allows us to have a Common Language between",
    "start": "2354040",
    "end": "2360079"
  },
  {
    "text": "these two teams and it allows us to have something generated that will be the",
    "start": "2360079",
    "end": "2365280"
  },
  {
    "text": "source of Truth and that I will show you that that is very powerful the way we do that because",
    "start": "2365280",
    "end": "2370640"
  },
  {
    "text": "again I don't like doing stuff from scratch I'm very lazy um the packed tool",
    "start": "2370640",
    "end": "2375800"
  },
  {
    "text": "is another open source project that I'm Keen to share with you and it provides contract testing it provides a contract",
    "start": "2375800",
    "end": "2382040"
  },
  {
    "text": "testing framework with libraries in over 10 languages I didn't list the languages",
    "start": "2382040",
    "end": "2387440"
  },
  {
    "text": "here but you'll be able to find all the major languages what it does provide you is",
    "start": "2387440",
    "end": "2393760"
  },
  {
    "text": "mocking and verification so like when we test from the consumer Viewpoint we test",
    "start": "2393760",
    "end": "2400599"
  },
  {
    "text": "against the mock of the provider um and this the the reason we do that is",
    "start": "2400599",
    "end": "2406000"
  },
  {
    "text": "because we want to record record our expectations but also have the tests run",
    "start": "2406000",
    "end": "2411839"
  },
  {
    "text": "as quick as possible um normally where do we store",
    "start": "2411839",
    "end": "2418000"
  },
  {
    "text": "this contract do we put it in a GitHub repository how do we verion it how does it work the way we the way that I've",
    "start": "2418000",
    "end": "2425119"
  },
  {
    "text": "seen it done and this is like the best way is to run a broker so a broker will",
    "start": "2425119",
    "end": "2430359"
  },
  {
    "text": "say like this is the interaction I'll send the request to the broker say this is the interaction this is what I want",
    "start": "2430359",
    "end": "2436280"
  },
  {
    "text": "to verify against this is the version and then the broker will respond with the",
    "start": "2436280",
    "end": "2441520"
  },
  {
    "text": "contract so um that's kind of like how you might productionize what I'm going to show you so um I'm going to show you",
    "start": "2441520",
    "end": "2448960"
  },
  {
    "start": "2447000",
    "end": "2736000"
  },
  {
    "text": "some more code I hope you're not sick of it um so in the contract test I've",
    "start": "2448960",
    "end": "2455560"
  },
  {
    "text": "written only a very small contract test um so the consumer test will be the get",
    "start": "2455560",
    "end": "2462040"
  },
  {
    "text": "events and what we see here is I'm going to start a new um a new Emeral server",
    "start": "2462040",
    "end": "2468640"
  },
  {
    "text": "and I'm going to say this is the test what you see here is the DSL or like domain specific language that the pack",
    "start": "2468640",
    "end": "2475800"
  },
  {
    "text": "Library provides so I can just call things like upon receiving with requests",
    "start": "2475800",
    "end": "2481040"
  },
  {
    "text": "I don't have to write this common language myself because the pack Library provid and this is like also um",
    "start": "2481040",
    "end": "2488280"
  },
  {
    "text": "something that's really important because no matter where you now go you will have the same n clature when you",
    "start": "2488280",
    "end": "2495319"
  },
  {
    "text": "write contract testing between employers between languages um once we're finished we this",
    "start": "2495319",
    "end": "2502920"
  },
  {
    "text": "contract test will be saved somewhere and it will be saved in the local",
    "start": "2502920",
    "end": "2508200"
  },
  {
    "text": "environment it will be saved here in the packed um in the packed folder so here",
    "start": "2508200",
    "end": "2513599"
  },
  {
    "text": "you can see here this is the interaction that I've SE said on G events this is the response I expect and uh the reason",
    "start": "2513599",
    "end": "2521040"
  },
  {
    "text": "why this is this you will agree that this is very pable between different languages the contract can look the same",
    "start": "2521040",
    "end": "2527880"
  },
  {
    "text": "which I think is great right when it comes to the provider um I can't test",
    "start": "2527880",
    "end": "2533480"
  },
  {
    "text": "against two mocks right because like what's the point like I've already mocked you once now it's your turn to",
    "start": "2533480",
    "end": "2539040"
  },
  {
    "text": "cough up and see if you match my expectation so what we do is we um again",
    "start": "2539040",
    "end": "2545280"
  },
  {
    "text": "we use test containers are bezzies that we've just met um and we start the we we",
    "start": "2545280",
    "end": "2552480"
  },
  {
    "text": "start a generic container with a um with the docker image and then we run against",
    "start": "2552480",
    "end": "2558079"
  },
  {
    "text": "that and this will be the test this test is very similar to what I've already shown you it was only the contract that",
    "start": "2558079",
    "end": "2565800"
  },
  {
    "text": "was the important bit um I've done something that was very sneaky and I",
    "start": "2565800",
    "end": "2571400"
  },
  {
    "text": "didn't show you when if we are running no it it was over here sorry",
    "start": "2571400",
    "end": "2576920"
  },
  {
    "text": "um if we are running against a remote um which will be my next thing I'm going to",
    "start": "2576920",
    "end": "2582720"
  },
  {
    "text": "say like what about pipelines if we are running against the remote I will have a broker based URL so I will I have a",
    "start": "2582720",
    "end": "2590640"
  },
  {
    "text": "broker somewhere um so again I'm going to do that with another um environment",
    "start": "2590640",
    "end": "2596640"
  },
  {
    "text": "variable when we run things this is going to be one of the last things I run",
    "start": "2596640",
    "end": "2601800"
  },
  {
    "text": "um again everything is exactly the same so I'm going to say contract equals",
    "start": "2601800",
    "end": "2607960"
  },
  {
    "text": "true um and then I'm going to go test and the um the the folder is called",
    "start": "2607960",
    "end": "2616280"
  },
  {
    "text": "contract test and then I'm going to say uh foros so this is going to start that",
    "start": "2616280",
    "end": "2622480"
  },
  {
    "text": "takes a while we check the back broker we see the versioning and then we test against the real um the real provider",
    "start": "2622480",
    "end": "2630760"
  },
  {
    "text": "and you see some really nice um some really nicely generated output like like",
    "start": "2630760",
    "end": "2636240"
  },
  {
    "text": "I didn't write these really nice lines I just specified them inside my test with",
    "start": "2636240",
    "end": "2641960"
  },
  {
    "text": "those chained methods that you saw again the output will be the same no matter",
    "start": "2641960",
    "end": "2647000"
  },
  {
    "text": "what language you're using so even though I've demonstrated things to with you to you and go if you're using",
    "start": "2647000",
    "end": "2653200"
  },
  {
    "text": "something else these techniques will still be applicable the last things I want to",
    "start": "2653200",
    "end": "2659720"
  },
  {
    "text": "talk about is um cicd pipelines and I've already said that because I was sneaky and I had I already set up something",
    "start": "2659720",
    "end": "2666480"
  },
  {
    "text": "about remotes in the contract test so I think most people will agree that GitHub",
    "start": "2666480",
    "end": "2673119"
  },
  {
    "text": "actions are now the popular solution for cicd pipelines um do you use G GitHub",
    "start": "2673119",
    "end": "2680240"
  },
  {
    "text": "actions yeah yeah the cool thing about GitHub actions is that you can use what others have worked and done for you so I",
    "start": "2680240",
    "end": "2687440"
  },
  {
    "text": "don't like to write stuff from scratch we've already seen I like using tools um so that's the best thing about giab",
    "start": "2687440",
    "end": "2694200"
  },
  {
    "text": "actions normally we use them as quality Gates so they sit in between um the",
    "start": "2694200",
    "end": "2701520"
  },
  {
    "text": "build and the test so you've pushed your commit to GitHub or whatever you use um",
    "start": "2701520",
    "end": "2707599"
  },
  {
    "text": "and then you will run your GitHub actions your test and then if everything is working correctly then we only then",
    "start": "2707599",
    "end": "2714160"
  },
  {
    "text": "we will push to Docker and only then we might deploy in the big bad world now",
    "start": "2714160",
    "end": "2721280"
  },
  {
    "text": "sometimes you can have tests in between um the the pushing of the image and the",
    "start": "2721280",
    "end": "2726480"
  },
  {
    "text": "deployment but obviously um I have only very a very small um a very small",
    "start": "2726480",
    "end": "2733079"
  },
  {
    "text": "application so I've decided to skip that so I'm going to show you um what",
    "start": "2733079",
    "end": "2739839"
  },
  {
    "start": "2736000",
    "end": "3039000"
  },
  {
    "text": "the GitHub actions might look like so when it comes to just testing on any",
    "start": "2739839",
    "end": "2746680"
  },
  {
    "text": "push run when I run my tests on all branches we've already said that I only want to do a very the fast feedback loop",
    "start": "2746680",
    "end": "2754800"
  },
  {
    "text": "so you see I check out this is the way we set up we we set up things in goal so",
    "start": "2754800",
    "end": "2759839"
  },
  {
    "text": "we set up goal I check out the dependencies one go 121 is the newest version um that's why I've put the Go",
    "start": "2759839",
    "end": "2766760"
  },
  {
    "text": "version to 121 um then we build and then we test things um in go we also have",
    "start": "2766760",
    "end": "2773880"
  },
  {
    "text": "this thing called the goang which is the linter um and it'll be able to find any",
    "start": "2773880",
    "end": "2779040"
  },
  {
    "text": "style errors like style um is something that's very um very well prescribed and",
    "start": "2779040",
    "end": "2784800"
  },
  {
    "text": "goal so we'll be able to have default tooling that will be able to do that when it comes to let's say now I want to",
    "start": "2784800",
    "end": "2792200"
  },
  {
    "text": "push to main so I want to be a little bit more stringent I've pushed to the main branch Instead at this point I want",
    "start": "2792200",
    "end": "2799559"
  },
  {
    "text": "to run integration tests and what do I do I do the exact same thing as I've done before I set up go I check out my",
    "start": "2799559",
    "end": "2806200"
  },
  {
    "text": "repository and then I run with the integration with the uh integration",
    "start": "2806200",
    "end": "2811960"
  },
  {
    "text": "environment variable set exactly like I did in the console but I also want to show you now exactly",
    "start": "2811960",
    "end": "2819760"
  },
  {
    "text": "what's happening with contract test and endtoend test so I've got some environment variables which are my uh",
    "start": "2819760",
    "end": "2827960"
  },
  {
    "text": "packed broker base URL and I will also have a token which will allow me to authenticate my GitHub actions against",
    "start": "2827960",
    "end": "2835800"
  },
  {
    "text": "my user or my packed user at this point once I've built",
    "start": "2835800",
    "end": "2841040"
  },
  {
    "text": "everything so I know that things are maybe passing on Main it's time to Lo into Docker Hub extract metadata and",
    "start": "2841040",
    "end": "2848440"
  },
  {
    "text": "then push my Docker image once I've pushed the docker image I um so I push",
    "start": "2848440",
    "end": "2855520"
  },
  {
    "text": "the docker image first which I spec I can specify ordering with this like needs um online 46 once I've pushed that",
    "start": "2855520",
    "end": "2863839"
  },
  {
    "text": "I'm like okay this is the new get uh this is the new Docker image let me run my end to end test and we know that I",
    "start": "2863839",
    "end": "2870599"
  },
  {
    "text": "use test containers with the docker Hub image and then finally because the",
    "start": "2870599",
    "end": "2876800"
  },
  {
    "text": "consumer also depends on the docker image um I will say Okay run the",
    "start": "2876800",
    "end": "2881839"
  },
  {
    "text": "contract tests as well so you'll see that installing packed is a bit of a",
    "start": "2881839",
    "end": "2888160"
  },
  {
    "text": "situation so I do use Curl to install it um the you will find other um already",
    "start": "2888160",
    "end": "2895400"
  },
  {
    "text": "built GitHub actions you will have other options to be able to do that and then once that's set up I can test it and do",
    "start": "2895400",
    "end": "2902040"
  },
  {
    "text": "it exactly the same way that we've done before once the consumer runs I can",
    "start": "2902040",
    "end": "2907559"
  },
  {
    "text": "publish the packed file so that'll be the new packed the new contract that",
    "start": "2907559",
    "end": "2912640"
  },
  {
    "text": "I've said will be the way and I will be pushing it to something called packed flow and then I will run the provider",
    "start": "2912640",
    "end": "2920359"
  },
  {
    "text": "test so let me show you what packed flow is I think it's great deploying a broker",
    "start": "2920359",
    "end": "2926119"
  },
  {
    "text": "is actually not difficult they provide a Docker image and then you can run it in",
    "start": "2926119",
    "end": "2931280"
  },
  {
    "text": "you know your work environment in whatever staging environment you might have but obviously",
    "start": "2931280",
    "end": "2937359"
  },
  {
    "text": "like maybe I don't want to do that just for a demo so what they provide is packed flow so they can run the broker",
    "start": "2937359",
    "end": "2944160"
  },
  {
    "text": "for you and then you can push the contract up um up against it and when you run the provider you can use this",
    "start": "2944160",
    "end": "2951880"
  },
  {
    "text": "URL that will return you the pack from the newly published image not what I",
    "start": "2951880",
    "end": "2958079"
  },
  {
    "text": "checked in to my repository in fact my packs should generally be get ignored",
    "start": "2958079",
    "end": "2963720"
  },
  {
    "text": "because you should run them you should generate them as part of your CD",
    "start": "2963720",
    "end": "2968920"
  },
  {
    "text": "pipeline um and then they're able to like build this really lovely user interface um and then respond with the",
    "start": "2968920",
    "end": "2976960"
  },
  {
    "text": "expected responses so what you see here at the top is the packed flow URL and",
    "start": "2976960",
    "end": "2983200"
  },
  {
    "text": "then the version that I would be requested which is version one 12 three because that's what I wrote in my cic",
    "start": "2983200",
    "end": "2990200"
  },
  {
    "text": "pipeline um let me just when I'm just going to show you this very quickly so",
    "start": "2990200",
    "end": "2995680"
  },
  {
    "text": "um one of the things that you can do I told you we were talking about ordering um of images so this is quite small but",
    "start": "2995680",
    "end": "3002799"
  },
  {
    "text": "you can see here that I've ordered push to the docker image run the consumer publish and then run the provider and",
    "start": "3002799",
    "end": "3009559"
  },
  {
    "text": "the end to end tests are running as well so this ordering is important because we",
    "start": "3009559",
    "end": "3014680"
  },
  {
    "text": "don't want to run against an old version or any of of that so GitHub actions is a",
    "start": "3014680",
    "end": "3022799"
  },
  {
    "text": "great way to reuse things that other have done as well as um make it easy for",
    "start": "3022799",
    "end": "3029480"
  },
  {
    "text": "you to order in things in yaml so I think it's really great um and I can definitely understand why they've become",
    "start": "3029480",
    "end": "3036799"
  },
  {
    "text": "the standard of cicd pipelines so I've showed you a lot of things I hope you",
    "start": "3036799",
    "end": "3042200"
  },
  {
    "start": "3039000",
    "end": "3130000"
  },
  {
    "text": "found them useful um in summary um developers",
    "start": "3042200",
    "end": "3047359"
  },
  {
    "text": "should write tests at all levels so try and challenge yourself to come out of",
    "start": "3047359",
    "end": "3052760"
  },
  {
    "text": "the bread and butter that are unit tests as I've shown you there is lots of tooling that we can use in a lot of",
    "start": "3052760",
    "end": "3060559"
  },
  {
    "text": "languages that will allow you to write tests from in the same way that you",
    "start": "3060559",
    "end": "3065960"
  },
  {
    "text": "write backend code I think this is if you take anything away from me talking",
    "start": "3065960",
    "end": "3072040"
  },
  {
    "text": "today is remember you have tooling that allows you to use the same backend",
    "start": "3072040",
    "end": "3077119"
  },
  {
    "text": "coding techniques to write tests at all levels um use tests as your quality",
    "start": "3077119",
    "end": "3084319"
  },
  {
    "text": "Gates prevent outages prevent those nasty bugs prevent um you spending all",
    "start": "3084319",
    "end": "3090400"
  },
  {
    "text": "your time fixing these bugs uh and in particular if you Embrace writing",
    "start": "3090400",
    "end": "3096359"
  },
  {
    "text": "different types of tests you'll be able to make better assertions on um around",
    "start": "3096359",
    "end": "3102280"
  },
  {
    "text": "the behavior of your microservice architectures but most important Embrace a testing and quality culture in your",
    "start": "3102280",
    "end": "3109200"
  },
  {
    "text": "teams ask yourselves why should tests come last when they actually help make",
    "start": "3109200",
    "end": "3115960"
  },
  {
    "text": "your lives so much easier like think about how much time you'd have to test also I'm a person that really doesn't",
    "start": "3115960",
    "end": "3122599"
  },
  {
    "text": "trust myself and this is probably why I really go into testing because I want to prove to myself that the code I wrote is",
    "start": "3122599",
    "end": "3129680"
  },
  {
    "text": "working so that's all I've got for you today um I'm Adelina I hope you really enjoyed the session um I'll be around",
    "start": "3129680",
    "end": "3136480"
  },
  {
    "start": "3130000",
    "end": "3435000"
  },
  {
    "text": "the rest of the day and also I think we have some time for questions thank",
    "start": "3136480",
    "end": "3142960"
  },
  {
    "text": "you",
    "start": "3144280",
    "end": "3147280"
  },
  {
    "text": "if you're shy you'll be able to find me later so definitely yeah um when you do",
    "start": "3154920",
    "end": "3160000"
  },
  {
    "text": "the uh FY testing the what sorry the fuzzy testing the fuzzy testing yeah um",
    "start": "3160000",
    "end": "3166680"
  },
  {
    "text": "is it like the same uh sequence of uh test parameters that'll generate from uh",
    "start": "3166680",
    "end": "3173000"
  },
  {
    "text": "each run no so you don't necessarily know that if you test once then it will pass and yeah so flakiness and fuz",
    "start": "3173000",
    "end": "3179760"
  },
  {
    "text": "testing is something we shouldn't throw away right but if things were to were to to fail you'll be able to see exactly",
    "start": "3179760",
    "end": "3187079"
  },
  {
    "text": "what's gone wrong um code robustness is something that I you know I should have",
    "start": "3187079",
    "end": "3192799"
  },
  {
    "text": "talked about more maybe but I think it's much more important to cover cod in",
    "start": "3192799",
    "end": "3198480"
  },
  {
    "text": "today's world it's super important to cover code robustness alongside edge",
    "start": "3198480",
    "end": "3204160"
  },
  {
    "text": "cases also I don't know if I was quite surprised you know what the difference between a corner case and an edge case",
    "start": "3204160",
    "end": "3211920"
  },
  {
    "text": "is so an edge case is happens at the extremes of one parameter and a corner",
    "start": "3211920",
    "end": "3218280"
  },
  {
    "text": "case happens at the extremes of multiple parameters yeah I I use them",
    "start": "3218280",
    "end": "3224200"
  },
  {
    "text": "interchangeably but you know the more you learn what is your experience of the",
    "start": "3224200",
    "end": "3231079"
  },
  {
    "text": "efficiency of finding box with packs so how many box do we find in pack versus earlier stages with unit testing or",
    "start": "3231079",
    "end": "3237880"
  },
  {
    "text": "later stages with Inn testing uh that's really uh really a great question um",
    "start": "3237880",
    "end": "3243760"
  },
  {
    "text": "what we've seen um from experience in production is that they really work well",
    "start": "3243760",
    "end": "3250480"
  },
  {
    "text": "with especially event driven architectures so um event driven AR you'll be able to support like this is",
    "start": "3250480",
    "end": "3257480"
  },
  {
    "text": "the response and you'll be able to really see what's going on in your data",
    "start": "3257480",
    "end": "3262799"
  },
  {
    "text": "exchange um I think especially in convoluted systems like we",
    "start": "3262799",
    "end": "3268720"
  },
  {
    "text": "were talking about earlier like really difficult to test systems contract",
    "start": "3268720",
    "end": "3274200"
  },
  {
    "text": "testing shines over end to end tests because of this separation where you can",
    "start": "3274200",
    "end": "3280400"
  },
  {
    "text": "run against the mock and then things will become much faster um at the same",
    "start": "3280400",
    "end": "3285960"
  },
  {
    "text": "time the contract that the contract is only as good as the test while in endtoend testing you might be able to do",
    "start": "3285960",
    "end": "3293160"
  },
  {
    "text": "a a lot more variety of of specifications and like really see",
    "start": "3293160",
    "end": "3298319"
  },
  {
    "text": "maybe synthetic monitoring or things like that um we use it a lot everywhere",
    "start": "3298319",
    "end": "3304400"
  },
  {
    "text": "I've worked we've used it a lot especially to monitor against third",
    "start": "3304400",
    "end": "3309720"
  },
  {
    "text": "parties that we don't maybe trust so you can say to them like hey all of a sudden",
    "start": "3309720",
    "end": "3315200"
  },
  {
    "text": "this test is failing um and you can test it also at you know large volumes which",
    "start": "3315200",
    "end": "3322240"
  },
  {
    "text": "M which will move the needle when it comes to cost if you were doing it in um in end to endend testing that's kind of",
    "start": "3322240",
    "end": "3329160"
  },
  {
    "text": "my experience I hope that answered",
    "start": "3329160",
    "end": "3332720"
  },
  {
    "text": "it um you mentioned in the test containers that you passed it uh like a",
    "start": "3335559",
    "end": "3341079"
  },
  {
    "text": "pre-built Docker image on Docker Hub yeah uh but you might want to like run those integration tests to like verify",
    "start": "3341079",
    "end": "3347200"
  },
  {
    "text": "everything is okay before you ever publish something as an artifact is there any way to like give it your Docker file or anything like maybe you",
    "start": "3347200",
    "end": "3353319"
  },
  {
    "text": "have a Docker compose even yeah so integration tests don't run against the docker file they run against",
    "start": "3353319",
    "end": "3360640"
  },
  {
    "text": "just the handlers the code that I have but yes you might want to to do it before publishing to Docker you can",
    "start": "3360640",
    "end": "3367680"
  },
  {
    "text": "support you can give it a Docker file um but what I find is that you know the",
    "start": "3367680",
    "end": "3374880"
  },
  {
    "text": "docker the docker Hub can have versions that are not ready um so I don't think",
    "start": "3374880",
    "end": "3381799"
  },
  {
    "text": "it's the worst idea to push to Docker and then maybe test and deploy later um",
    "start": "3381799",
    "end": "3388039"
  },
  {
    "text": "you know you maybe don't want to do i' what I've seen often is that deploys manual so like like deploys so you'll be",
    "start": "3388039",
    "end": "3395880"
  },
  {
    "text": "like okay um not manual manual but you'll commit another ver another PR to",
    "start": "3395880",
    "end": "3401480"
  },
  {
    "text": "say like bump this version um after you've asserted that everything is is",
    "start": "3401480",
    "end": "3406520"
  },
  {
    "text": "working so I think it's okay to have like random versions going around in Docker Docker",
    "start": "3406520",
    "end": "3413880"
  },
  {
    "text": "hub huge thank you and thanks for sticking",
    "start": "3413880",
    "end": "3420480"
  },
  {
    "text": "with [Applause]",
    "start": "3420480",
    "end": "3426779"
  },
  {
    "text": "me",
    "start": "3434280",
    "end": "3437280"
  }
]