[
  {
    "text": "hi that's loud welcome to the last session of the day",
    "start": "3679",
    "end": "11200"
  },
  {
    "text": "normally i love to take questions during my talks but if i can't hear you it's because i've been like partially deaf",
    "start": "11200",
    "end": "16880"
  },
  {
    "text": "for the past few weeks it's not that i'm ignoring you at least that's what i've been saying at",
    "start": "16880",
    "end": "22640"
  },
  {
    "text": "home it's true so we're gonna be talking about some features from c sharp eight 9",
    "start": "22640",
    "end": "29359"
  },
  {
    "text": "10 11 12 and onwards there's a lot happening in c sharp as a",
    "start": "29359",
    "end": "34640"
  },
  {
    "text": "programming language and we're going to go back a little bit and talk about some of the features that",
    "start": "34640",
    "end": "40079"
  },
  {
    "text": "have been added the past few years and if you were at my session in porto i",
    "start": "40079",
    "end": "45120"
  },
  {
    "text": "believe two and a half three years ago there's been a lot of changes in the language",
    "start": "45120",
    "end": "50399"
  },
  {
    "text": "before we get to that my name is philip ekberg i do a lot of talks on c-sharp i have a",
    "start": "50399",
    "end": "55600"
  },
  {
    "text": "few courses on pluralsight on different types of c-sharp subjects",
    "start": "55600",
    "end": "60640"
  },
  {
    "text": "if you do have any questions that arise after this feel free to ping me on twitter send me an email my book is free",
    "start": "60640",
    "end": "67040"
  },
  {
    "text": "to download as well if you like to dig into that so enough about me let's talk about c-sharp",
    "start": "67040",
    "end": "74080"
  },
  {
    "text": "this here is a map over the features that have been added in c-sharp over the years there's quite a lot of language",
    "start": "74080",
    "end": "80640"
  },
  {
    "text": "features but if you look at the fundamental building blocks you don't need much you",
    "start": "80640",
    "end": "86240"
  },
  {
    "text": "just need a couple of ifs and elses and switches and all of that to make a nice program but what all these language",
    "start": "86240",
    "end": "93119"
  },
  {
    "text": "features allow you to do is to express yourself in different ways to better",
    "start": "93119",
    "end": "98400"
  },
  {
    "text": "build software that hopefully doesn't crash and hopefully it's easier for other developers to understand as well",
    "start": "98400",
    "end": "105600"
  },
  {
    "text": "one example of that is both the generics and the async and away keywords both of these language features were in",
    "start": "105600",
    "end": "112960"
  },
  {
    "text": "its way kind of fundamentally changing the way that we look at approaching those different problems",
    "start": "112960",
    "end": "118479"
  },
  {
    "text": "generics change the way that we work with collections and async in a way change the way that we work with streams",
    "start": "118479",
    "end": "124560"
  },
  {
    "text": "of data or data that's retrieved asynchronously and the aim here is to",
    "start": "124560",
    "end": "131280"
  },
  {
    "text": "get language features into the language that always do this that always change the way that we want to approach",
    "start": "131280",
    "end": "137920"
  },
  {
    "text": "problems that might have previously been hard to express and we're going to look through a lot of",
    "start": "137920",
    "end": "144080"
  },
  {
    "text": "the features that have been added but also look at what's coming in c sharp 11.",
    "start": "144080",
    "end": "149760"
  },
  {
    "text": "what's pretty cool with c sharp and vbs programming languages nf sharp as well",
    "start": "149760",
    "end": "154800"
  },
  {
    "text": "if i forget to mention f sharp in this context of being open source this is a hate storm after this",
    "start": "154800",
    "end": "161360"
  },
  {
    "text": "so c sharp vb and f sharp are all open source you can go ahead and contribute your language features if they're",
    "start": "161360",
    "end": "167599"
  },
  {
    "text": "approved all the discussions around which features to add to the language that's all done in the open you can",
    "start": "167599",
    "end": "174319"
  },
  {
    "text": "participate in the discussion you can see the ideas behind why a certain language feature might be valuable to",
    "start": "174319",
    "end": "180879"
  },
  {
    "text": "the language you can even just help out update the documentation if you so like to",
    "start": "180879",
    "end": "187599"
  },
  {
    "text": "so with that out of the way if we just look at a few highlights c sharp 7's been around for quite a while",
    "start": "187599",
    "end": "193040"
  },
  {
    "text": "now but one of the interesting things with with the fact that this is open source is that they've",
    "start": "193040",
    "end": "199040"
  },
  {
    "text": "been able to add so many features into the language so i don't want to alienate anyone",
    "start": "199040",
    "end": "204480"
  },
  {
    "text": "the first feature i want to talk about is tuples or tuples depending on where you're from and how you like to",
    "start": "204480",
    "end": "210000"
  },
  {
    "text": "pronounce it we're talking about the same thing prior to c sharp seven",
    "start": "210000",
    "end": "216400"
  },
  {
    "text": "we had to work with tuples in a rather interesting way we had this type called tuple and this",
    "start": "216400",
    "end": "222480"
  },
  {
    "text": "was a generic type and you access properties and fields like you do any normal class the problem here excuse me is that item",
    "start": "222480",
    "end": "229840"
  },
  {
    "text": "one two and three they don't have any proper naming so this was really hard to work with",
    "start": "229840",
    "end": "236000"
  },
  {
    "text": "so as of c sharp seven this is now a first class citizen in the programming language so as you'll see here tuples in",
    "start": "236000",
    "end": "242959"
  },
  {
    "text": "c-sharp seven allows you to construct this grouping of elements where each of the different",
    "start": "242959",
    "end": "250159"
  },
  {
    "text": "things you put in your tuple so fields and you get that you get names",
    "start": "250159",
    "end": "255519"
  },
  {
    "text": "for those fields during compile time and during the the work that you do in your program",
    "start": "255519",
    "end": "260639"
  },
  {
    "text": "it's not a part of the actual compiled version so why are we talking about this and why",
    "start": "260639",
    "end": "266639"
  },
  {
    "text": "is this such a big change the fact is that this is kind of one of those things that was needed to be added",
    "start": "266639",
    "end": "272479"
  },
  {
    "text": "to allow us to easily work with pattern matching which was introduced in c sharp eight",
    "start": "272479",
    "end": "278560"
  },
  {
    "text": "together with tuples we also got something called deconstruction which is a way to take an object and pull that",
    "start": "278560",
    "end": "284960"
  },
  {
    "text": "apart into different types of variables and different types of pieces and make it look like a tuple it's sort of",
    "start": "284960",
    "end": "291680"
  },
  {
    "text": "they're totally different things but they were used together and hopefully you'll understand why in just a second",
    "start": "291680",
    "end": "297759"
  },
  {
    "text": "if i have a class let's say that the class exposes a name and an age property and i simply",
    "start": "297759",
    "end": "303759"
  },
  {
    "text": "just add this method to this class what this now allows me to do",
    "start": "303759",
    "end": "309120"
  },
  {
    "text": "is to deconstruct this object look at this here i have an instance of",
    "start": "309120",
    "end": "315680"
  },
  {
    "text": "a person and i just dereference that or reference that into something that looks like a tuple",
    "start": "315680",
    "end": "322080"
  },
  {
    "text": "what happens here is that this instance is deconstructed into two local",
    "start": "322080",
    "end": "327120"
  },
  {
    "text": "variables a name and an h variable the compiler will make sure that it calls the",
    "start": "327120",
    "end": "332160"
  },
  {
    "text": "deconstruct method to do this it's a handy feature but used on its own like this here",
    "start": "332160",
    "end": "338479"
  },
  {
    "text": "doesn't make much sense but if we keep this in mind this is one of those fundamental things that we need to understand when we start looking at",
    "start": "338479",
    "end": "345280"
  },
  {
    "text": "other new features as well tuples and deconstructions are often",
    "start": "345280",
    "end": "350400"
  },
  {
    "text": "used together as you'll see here if i have a tuple here that i defined in line",
    "start": "350400",
    "end": "356560"
  },
  {
    "text": "it contains the variable or the value 10 and 20 that is then deconstructed into two fields that will exist on this local",
    "start": "356560",
    "end": "363840"
  },
  {
    "text": "variable might look very weird but this is kind of a new way of building things in",
    "start": "363840",
    "end": "369680"
  },
  {
    "text": "c sharp seven but again you wouldn't write this just out of the way like this here",
    "start": "369680",
    "end": "374720"
  },
  {
    "text": "a better example is if you have an instance of coordinate you then deconstruct that into something",
    "start": "374720",
    "end": "380880"
  },
  {
    "text": "similar right all this is capable by introducing a method called deconstruct and you can",
    "start": "380880",
    "end": "386880"
  },
  {
    "text": "add this on any type of object and what's interesting is that we're going to talk about something",
    "start": "386880",
    "end": "392479"
  },
  {
    "text": "called record types which is a new way of creating reference types in c sharp this is added automatically on that",
    "start": "392479",
    "end": "401120"
  },
  {
    "text": "so if we skip c sharp 7 and and there's a lot more attitude language as well",
    "start": "401120",
    "end": "408479"
  },
  {
    "text": "but now we're going to be talking about c sharp 8 and beyond because this is where things quiet",
    "start": "408479",
    "end": "413599"
  },
  {
    "text": "changed a little bit more drastically there's a lot more changes in the language and you'll see that if i'm just going to",
    "start": "413599",
    "end": "420160"
  },
  {
    "text": "list out a whole bunch of different language features i'm not oops sorry i'm not going to be",
    "start": "420160",
    "end": "425919"
  },
  {
    "text": "able to go through all of these here but just to give you an idea of the amount of language features that was added in",
    "start": "425919",
    "end": "431759"
  },
  {
    "text": "the language got something called read only members default interface implementations those",
    "start": "431759",
    "end": "438000"
  },
  {
    "text": "pattern matching enhancements and why i'm saying enhancements here is because the language designers added a first",
    "start": "438000",
    "end": "444479"
  },
  {
    "text": "version of pattern matching in c sharp seven but at that point it didn't make much sense to use it",
    "start": "444479",
    "end": "452000"
  },
  {
    "text": "it's actually not up until i would say now that i see this used quite heavily in uc r projects",
    "start": "452000",
    "end": "458960"
  },
  {
    "text": "because something called using declarations static local functions and then another really big thing called nullable reference types",
    "start": "458960",
    "end": "467039"
  },
  {
    "text": "changes the way that we look at nulls and we'll go get into that as well the highlighted portions the one that",
    "start": "467199",
    "end": "472800"
  },
  {
    "text": "i've bolded out here that's what we're going to be looking at a little bit more in detail",
    "start": "472800",
    "end": "478560"
  },
  {
    "text": "we also got something called asynchronous streams which is a way for us to consume data that's streamed into",
    "start": "478560",
    "end": "484319"
  },
  {
    "text": "an application async disposable ranges analysis and some null um handling as well",
    "start": "484319",
    "end": "493360"
  },
  {
    "text": "if we want to use this in an old project we can't simply tell the compiler that now i want to be using c sharp 8 or c",
    "start": "493360",
    "end": "500479"
  },
  {
    "text": "sharp 9. what they also made sure here is that it changed the way that they look at",
    "start": "500479",
    "end": "506960"
  },
  {
    "text": "deploying the language versions so to use c-sharp 8 you need to use",
    "start": "506960",
    "end": "512399"
  },
  {
    "text": "visual studio 2019 or later together with dot-net core 3.0",
    "start": "512399",
    "end": "518000"
  },
  {
    "text": "c-sharp 9 requires nine requires.net five c sharp ten requires.net six",
    "start": "518000",
    "end": "523599"
  },
  {
    "text": "each version of dot net would have a corresponding c sharp version",
    "start": "523599",
    "end": "528640"
  },
  {
    "text": "this is because they want to be able to do runtime changes for the language as well that means that they can do even",
    "start": "529040",
    "end": "535920"
  },
  {
    "text": "further or bigger changes to the language that is also tied into changes in the run time",
    "start": "535920",
    "end": "542560"
  },
  {
    "text": "in the past that was a little bit more difficult because the teams were i believe more separated in the organization but now that everything's",
    "start": "542560",
    "end": "548640"
  },
  {
    "text": "open source they can just help each other out that's great",
    "start": "548640",
    "end": "553760"
  },
  {
    "text": "so if you want to use the latest and greatest always use the latest visual studio obviously that's not always going to be",
    "start": "553760",
    "end": "560800"
  },
  {
    "text": "working in new projects some of the language features are also available to use on older frameworks but you have to",
    "start": "560800",
    "end": "569519"
  },
  {
    "text": "that we if we are download in winforms or wpf we might not be able to just jump on net",
    "start": "574959",
    "end": "580800"
  },
  {
    "text": "core right we couldn't do that so they had to also introduce project templates for dotnet core for",
    "start": "580800",
    "end": "586959"
  },
  {
    "text": "wpf as well as winforms so you can use this across all the",
    "start": "586959",
    "end": "592240"
  },
  {
    "text": "different types of applications all right",
    "start": "592240",
    "end": "597920"
  },
  {
    "text": "one language feature that is kind of this i don't know if this is an english expression but you have like a water divider so you have one portion of the",
    "start": "597920",
    "end": "604160"
  },
  {
    "text": "water on this side that loves it and then the other people on the other hand hates it i think most people don't like this",
    "start": "604160",
    "end": "611200"
  },
  {
    "text": "but that's just that's just me this here is known as default interface",
    "start": "611200",
    "end": "616240"
  },
  {
    "text": "implementations from a perspective of a library developer imagine that i want to update",
    "start": "616240",
    "end": "622480"
  },
  {
    "text": "my package i want to deploy that out to my millions of users if i'm lucky enough to have that many people using my",
    "start": "622480",
    "end": "629279"
  },
  {
    "text": "project that's great but one of the drawbacks with that is that i don't want to break anyone's code",
    "start": "629279",
    "end": "634640"
  },
  {
    "text": "by updating an interface i require everyone to implement all my new members or all my new methods",
    "start": "634640",
    "end": "641760"
  },
  {
    "text": "with this here i've now added an implementation to my interface",
    "start": "641760",
    "end": "647040"
  },
  {
    "text": "looks like a normal class except there's no instance of the class",
    "start": "647040",
    "end": "652160"
  },
  {
    "text": "what this now does is that it allows me to deploy a default implementation this doesn't do anything",
    "start": "652160",
    "end": "658880"
  },
  {
    "text": "and the problem with this approach is that if i just download the new version of this this interface or the new package",
    "start": "658880",
    "end": "665040"
  },
  {
    "text": "that contains the interface there's no warning that i haven't implemented this because there's already",
    "start": "665040",
    "end": "671120"
  },
  {
    "text": "an implementation provided by the the library developer that's something to keep in mind if you",
    "start": "671120",
    "end": "677440"
  },
  {
    "text": "ever have to use this so basically you can have method bodies on your methods on your interfaces",
    "start": "677440",
    "end": "685600"
  },
  {
    "text": "now this dot requires.net core 3.0 so what happens if i have a net standard",
    "start": "685600",
    "end": "691839"
  },
  {
    "text": "library so we're not going to be talking about the differences between framework standard and all of that because that's",
    "start": "691839",
    "end": "697120"
  },
  {
    "text": "a whole session on its own but what happens if this lives in a shared library that's compiled to",
    "start": "697120",
    "end": "703040"
  },
  {
    "text": "multiple targets that would be a little bit problematic we do get a little bit of help here i'm",
    "start": "703040",
    "end": "708560"
  },
  {
    "text": "going to zoom in here it's going to tell me that the target runtime that i'm not that i'm currently building for doesn't",
    "start": "708560",
    "end": "714720"
  },
  {
    "text": "support this particular language feature so the compiler is trying to be smart enough to tell me that you're now using",
    "start": "714720",
    "end": "720880"
  },
  {
    "text": "a feature for one of the targets but it doesn't work so you have to do something else this is where you end up having a",
    "start": "720880",
    "end": "726880"
  },
  {
    "text": "lot of if devs and a lot of other ugly code anyways it's a nice addition to library",
    "start": "726880",
    "end": "733519"
  },
  {
    "text": "authors now i did say that i want to talk about one really interesting feature of c sharp",
    "start": "733519",
    "end": "740000"
  },
  {
    "text": "and that's nullable reference types how many here have had a null reference exception",
    "start": "740000",
    "end": "746240"
  },
  {
    "text": "no one everyone perfect who loves them",
    "start": "746240",
    "end": "752560"
  },
  {
    "text": "no one loves no reference exceptions i've heard this many times but someone said that",
    "start": "752560",
    "end": "758399"
  },
  {
    "text": "null reference exceptions is one of those things that costed the world the most in terms of crashes in",
    "start": "758399",
    "end": "763839"
  },
  {
    "text": "applications right and the problem with null reference exceptions is that",
    "start": "763839",
    "end": "770000"
  },
  {
    "text": "we really don't know that they're gonna occur right we have to guard against them everywhere and the code becomes hard to read and",
    "start": "770000",
    "end": "776240"
  },
  {
    "text": "hard to understand that's why they introduce something called nullable reference types which is",
    "start": "776240",
    "end": "781920"
  },
  {
    "text": "the naming here is a little bit confusing because reference types have always been nullable you've always been",
    "start": "781920",
    "end": "787040"
  },
  {
    "text": "able to set a reference type to null so what they've actually done is that they've introduced all reference types",
    "start": "787040",
    "end": "793040"
  },
  {
    "text": "are not null and i'll show you that in just a second we've all had this happened in different",
    "start": "793040",
    "end": "798880"
  },
  {
    "text": "types of applications and we all love it so how do we approach this in a",
    "start": "798880",
    "end": "804480"
  },
  {
    "text": "different way to avoid all of these different types of crashes well we can't get rid of nulls in the",
    "start": "804480",
    "end": "810399"
  },
  {
    "text": "language because it's been there forever and that would be quite a breaking change",
    "start": "810399",
    "end": "816480"
  },
  {
    "text": "but if we take one step backwards what's the problem with nullability",
    "start": "816480",
    "end": "822160"
  },
  {
    "text": "one of the biggest issues is that we have to add null checks everywhere in places where nulls might not even be a",
    "start": "822160",
    "end": "827440"
  },
  {
    "text": "problem we have to add it everywhere and all of a sudden the code becomes really hard to",
    "start": "827440",
    "end": "832560"
  },
  {
    "text": "maintain and we want to add as little code as possible to have the biggest impact",
    "start": "832560",
    "end": "839839"
  },
  {
    "text": "and then it's kind of ambiguous what does it mean to return null from a method",
    "start": "839839",
    "end": "844959"
  },
  {
    "text": "if i return null from a method that looks for an object was the object not found was there a problem did i catch an exception and",
    "start": "844959",
    "end": "851839"
  },
  {
    "text": "just returned null or what's the purpose there are many architectural",
    "start": "851839",
    "end": "858079"
  },
  {
    "text": "architecturally ways to solve this a default object would be better that tells you the",
    "start": "858079",
    "end": "863839"
  },
  {
    "text": "intent if you have a method that explicitly determines that this may return null if",
    "start": "863839",
    "end": "870399"
  },
  {
    "text": "this does something that's great but we don't want to name our methods based on what they may or may not return",
    "start": "870399",
    "end": "878079"
  },
  {
    "text": "in terms of nullability that is a slightly different type of problem",
    "start": "878079",
    "end": "884240"
  },
  {
    "text": "with nullability is that it encourages mutability it encourages us to change objects",
    "start": "884240",
    "end": "890560"
  },
  {
    "text": "and in multi-threaded applications that's going to be an issue we want to ensure that objects are immutable",
    "start": "890560",
    "end": "897440"
  },
  {
    "text": "so we are never changing anything once we've created an instance if you want to change a field or a property you create",
    "start": "897440",
    "end": "904399"
  },
  {
    "text": "a new instance that way you don't interfere with any other threads working on that",
    "start": "904399",
    "end": "909839"
  },
  {
    "text": "that data because it could end up in cases where you have partial data that's being managed across different threads",
    "start": "909839",
    "end": "916399"
  },
  {
    "text": "so that's no good so an example of a problem or kind of an ugly piece of code here in this case",
    "start": "916399",
    "end": "922720"
  },
  {
    "text": "here i have an instance of a classical person i have to check if that's null i have to check if the address is null and",
    "start": "922720",
    "end": "927920"
  },
  {
    "text": "then check if the street name is not null we can simplify this by saying",
    "start": "927920",
    "end": "932959"
  },
  {
    "text": "is this null conditional operator to say well if the address is not null go ahead and get the or sorry if the person is",
    "start": "932959",
    "end": "938000"
  },
  {
    "text": "not going to get the address and so forth it's still not very nice it would be better to assume that person",
    "start": "938000",
    "end": "944880"
  },
  {
    "text": "in this case would never be null here i should be able to trust that if i'm in a portion of the code where i",
    "start": "944880",
    "end": "950880"
  },
  {
    "text": "need to access the street name of the address there should be an instance",
    "start": "950880",
    "end": "956079"
  },
  {
    "text": "otherwise maybe the compiler can be smart enough to indicate that this could be potentially null based on other types",
    "start": "956079",
    "end": "962240"
  },
  {
    "text": "or other things that have happened in the code so that's where it cut where null state",
    "start": "962240",
    "end": "967759"
  },
  {
    "text": "static analysis comes into play where this very handy thing called nullable or nullable context is going to solve all",
    "start": "967759",
    "end": "974639"
  },
  {
    "text": "our problems if i add this piece a piece of code inside my",
    "start": "974639",
    "end": "980079"
  },
  {
    "text": "namespace or inside my class or inside my method this turns on nullable reference types i can also do this on",
    "start": "980079",
    "end": "986000"
  },
  {
    "text": "the project level which i'll show in a second here what this now does is that it changes",
    "start": "986000",
    "end": "991519"
  },
  {
    "text": "the way the compiler looks at my reference types everything is now assumed to be non-annulable",
    "start": "991519",
    "end": "997279"
  },
  {
    "text": "this means in this case here we're going to get a warning here we have a warning telling us well",
    "start": "997279",
    "end": "1003279"
  },
  {
    "text": "string here is not null so you shouldn't set this to null still just warnings right",
    "start": "1003279",
    "end": "1009440"
  },
  {
    "text": "but then it's getting smarter here since it knows that i've set this to null somewhere else it also knows that it may",
    "start": "1009440",
    "end": "1016320"
  },
  {
    "text": "be null here so in this case it would be appropriate to perform an i'll check",
    "start": "1016320",
    "end": "1022959"
  },
  {
    "text": "so how about we take a look at a sample application",
    "start": "1022959",
    "end": "1028000"
  },
  {
    "text": "if i can exit my powerpoint",
    "start": "1028000",
    "end": "1031280"
  },
  {
    "text": "phone size is good enough in the back perfect this here is a dot net six",
    "start": "1033839",
    "end": "1039120"
  },
  {
    "text": "application this works with the dot net five as well and and dot net core 3.0",
    "start": "1039120",
    "end": "1045438"
  },
  {
    "text": "so i've gone into the project file i can also do this from the project settings",
    "start": "1045439",
    "end": "1051440"
  },
  {
    "text": "if i want to do that and i'm going to add this thing here",
    "start": "1051440",
    "end": "1056799"
  },
  {
    "text": "called nullable enable now before i save this um",
    "start": "1056799",
    "end": "1061919"
  },
  {
    "text": "just notice there's there's nothing this is just a normal program it has two classes there's no warnings there's no",
    "start": "1061919",
    "end": "1067120"
  },
  {
    "text": "nothing i have a person class has a reference type on it called details has two strings called first",
    "start": "1067120",
    "end": "1073919"
  },
  {
    "text": "name and last name now when i save this here it's going to change",
    "start": "1073919",
    "end": "1081200"
  },
  {
    "text": "kind of how the compiler looks at my reference types hopefully",
    "start": "1081200",
    "end": "1087200"
  },
  {
    "text": "look at that worked now we've got these squigglies here under details under first name under",
    "start": "1087200",
    "end": "1092400"
  },
  {
    "text": "last name of course this is just warnings so if i bring up my warnings here at the bottom",
    "start": "1092400",
    "end": "1098880"
  },
  {
    "text": "it's going to tell me that details here let's see if i can zoom in",
    "start": "1098880",
    "end": "1106000"
  },
  {
    "text": "it may be null because you haven't set this in the constructor that's good to know",
    "start": "1106000",
    "end": "1111840"
  },
  {
    "text": "we all know that everyone reads all the warnings am i right",
    "start": "1111840",
    "end": "1117760"
  },
  {
    "text": "so what i can do i can be a little bit i can say treat",
    "start": "1117760",
    "end": "1123360"
  },
  {
    "text": "warnings as errors true i think it's the default or it's",
    "start": "1123360",
    "end": "1128400"
  },
  {
    "text": "what i set this to now when i compile this hopefully everything's going to blow up",
    "start": "1128400",
    "end": "1135280"
  },
  {
    "text": "this build failed now it looks as these warnings as errors instead and i can't compile the code",
    "start": "1135280",
    "end": "1141520"
  },
  {
    "text": "unless i fix these null reference potentially in all reference exceptions",
    "start": "1141520",
    "end": "1146799"
  },
  {
    "text": "of course that's kind of a big change to do to a larger project just go ahead and enable normal reference types and treat warnings as errors and everyone's going",
    "start": "1146799",
    "end": "1153120"
  },
  {
    "text": "to hate you so don't do that what you can do is that you can enable this for",
    "start": "1153120",
    "end": "1159679"
  },
  {
    "text": "proportions of the code so let's do nullable disable",
    "start": "1159679",
    "end": "1165200"
  },
  {
    "text": "and now it's only enabled well it's enabled for everything else but you get the idea right i can use this compiler directly to turn it on and off so i",
    "start": "1165200",
    "end": "1172000"
  },
  {
    "text": "could refactor portions of my code so to solve these",
    "start": "1172000",
    "end": "1177200"
  },
  {
    "text": "potential null reference exceptions you'd have to introduce a constructor",
    "start": "1177200",
    "end": "1182720"
  },
  {
    "text": "so let's do this on the person instead i have to introduce a constructor",
    "start": "1182720",
    "end": "1188799"
  },
  {
    "text": "now the warning disappeared from the properties because they shouldn't be the ones that are in charge of setting the",
    "start": "1188799",
    "end": "1194240"
  },
  {
    "text": "values the constructor should be the one in charge of setting the values now telling saying well you're not",
    "start": "1194240",
    "end": "1200320"
  },
  {
    "text": "setting these properties and the problem with this approach here is that i'm now changing the contract to",
    "start": "1200320",
    "end": "1206159"
  },
  {
    "text": "anyone that's using first name i can't talk and write at the same time",
    "start": "1206159",
    "end": "1212559"
  },
  {
    "text": "i've now changed the contract of last name",
    "start": "1212960",
    "end": "1218880"
  },
  {
    "text": "oh come on",
    "start": "1218880",
    "end": "1221840"
  },
  {
    "text": "if you've used the latest version of visual studio you get kind of used to the the new type of intellisense where",
    "start": "1224720",
    "end": "1229840"
  },
  {
    "text": "it just predicts everything i just press tab and just knows exactly what i want to write i just auto-generate all my",
    "start": "1229840",
    "end": "1235679"
  },
  {
    "text": "code right so now we don't have any warnings anymore",
    "start": "1235679",
    "end": "1241280"
  },
  {
    "text": "that's great but everyone that's using this class now has to change how they're creating an instance that's a little bit problematic",
    "start": "1241280",
    "end": "1249520"
  },
  {
    "text": "i do believe that the null reference exception wouldn't have occurred in this place here so there's no use in kind of",
    "start": "1249520",
    "end": "1255360"
  },
  {
    "text": "guarding against nulls here this here is an old guard sort of unless someone actually sends",
    "start": "1255360",
    "end": "1260799"
  },
  {
    "text": "first name and last name as nulls because it's still allowed to do so",
    "start": "1260799",
    "end": "1266559"
  },
  {
    "text": "actually let me show you what this looks like",
    "start": "1267039",
    "end": "1271919"
  },
  {
    "text": "if i create a new instance for details",
    "start": "1272080",
    "end": "1277600"
  },
  {
    "text": "go to new details i have to pass first name and last name right",
    "start": "1277600",
    "end": "1284240"
  },
  {
    "text": "if i pass null here it's going to give me a warning telling you that you shouldn't do this",
    "start": "1284240",
    "end": "1289840"
  },
  {
    "text": "you're not allowed to use null here but i can promise that this isn't null",
    "start": "1289840",
    "end": "1294720"
  },
  {
    "text": "now all of a sudden i trick the compiler because i know better this is not where you should use this",
    "start": "1296400",
    "end": "1302480"
  },
  {
    "text": "bang operator it's not the best place to put it but it just shows you that the compiler",
    "start": "1302480",
    "end": "1307600"
  },
  {
    "text": "tries to help you but it's not always going to solve everything for you so instead of changing the contract of",
    "start": "1307600",
    "end": "1314559"
  },
  {
    "text": "this details instead what we can do is that we can go to the root of the problem and we can say that well i do in",
    "start": "1314559",
    "end": "1319679"
  },
  {
    "text": "fact want to allow these to be null and this is where the nullable reference types come into play",
    "start": "1319679",
    "end": "1325360"
  },
  {
    "text": "i can now declare that my string here is allowed to be null by adding a question mark",
    "start": "1325360",
    "end": "1330799"
  },
  {
    "text": "that's like you've done with nullable value types in the past i can go one step further just to make",
    "start": "1330799",
    "end": "1336880"
  },
  {
    "text": "sure that this is now using the best practices i can declare that you're no longer once you've set this to a value",
    "start": "1336880",
    "end": "1343760"
  },
  {
    "text": "you're not allowed to change it this is a feature from c sharp 9 called the init only auto property",
    "start": "1343760",
    "end": "1350080"
  },
  {
    "text": "so if i set this to end it here i'm only allowed to set this once in the object initializer",
    "start": "1350080",
    "end": "1356080"
  },
  {
    "text": "and then you can't change it anymore unless you create a new instance",
    "start": "1356080",
    "end": "1361360"
  },
  {
    "text": "still have a problem here it's telling me that details could potentially be null and i don't want to change the contract here either so i'm",
    "start": "1361360",
    "end": "1367760"
  },
  {
    "text": "going to allow this to be null as well now this is the first i would say",
    "start": "1367760",
    "end": "1372880"
  },
  {
    "text": "and the biggest problem with nullable reference types is that you're going to end up with question marks everywhere",
    "start": "1372880",
    "end": "1378080"
  },
  {
    "text": "and again it's going to make maybe it's hard to understand the intent the idea isn't to end up with question",
    "start": "1378080",
    "end": "1383919"
  },
  {
    "text": "marks all over the place it's a good way to refactor portions of the code until you're actually at a place where you",
    "start": "1383919",
    "end": "1390240"
  },
  {
    "text": "have a better architecture but now i can start looking for the",
    "start": "1390240",
    "end": "1395360"
  },
  {
    "text": "places where this might actually cause an issue as you see here it's giving me a an",
    "start": "1395360",
    "end": "1402240"
  },
  {
    "text": "error here telling me that you're accessing details here and i know for a fact that this could be potentially null",
    "start": "1402240",
    "end": "1408159"
  },
  {
    "text": "right so here i'd need to do a null guard right",
    "start": "1408159",
    "end": "1414240"
  },
  {
    "text": "there's other types of doing all guards as well i could say i could use i'm going to show you a pretty cool trick",
    "start": "1414240",
    "end": "1419440"
  },
  {
    "text": "here we'll do argument null reference exception",
    "start": "1419440",
    "end": "1424799"
  },
  {
    "text": "throw if null person dot details oops sorry look at what happens with the with the",
    "start": "1424799",
    "end": "1431679"
  },
  {
    "text": "error at the next line it disappeared the compiler is now smart enough to know",
    "start": "1431679",
    "end": "1438400"
  },
  {
    "text": "that this thing here null checks this",
    "start": "1438400",
    "end": "1444720"
  },
  {
    "text": "that's why i don't get any warnings or here or errors here at the bottom right",
    "start": "1444720",
    "end": "1451200"
  },
  {
    "text": "that's good so that's one way of minimizing the places where you have to do null checks",
    "start": "1451200",
    "end": "1458400"
  },
  {
    "text": "but the root of the problem wasn't really in here either problem is that i i have one method here",
    "start": "1458400",
    "end": "1465039"
  },
  {
    "text": "that returns null which isn't really that great so if i want to change this as well",
    "start": "1465039",
    "end": "1471200"
  },
  {
    "text": "to return something that's a little bit more better i would say can create a new person",
    "start": "1471200",
    "end": "1478480"
  },
  {
    "text": "i'll show you another new pretty cool language feature so i have details here and i don't it's",
    "start": "1481520",
    "end": "1487120"
  },
  {
    "text": "a property let's say that we don't really know what type this is",
    "start": "1487120",
    "end": "1492480"
  },
  {
    "text": "i can use the new new target type new expression i don't have to specify the type anymore",
    "start": "1492480",
    "end": "1498960"
  },
  {
    "text": "it just figures that out so if it's a really complex type that you're instantiating the compiler can figure it",
    "start": "1498960",
    "end": "1504400"
  },
  {
    "text": "out for you and you don't have to be explicit about the type you're creating you can set first name to flip",
    "start": "1504400",
    "end": "1511760"
  },
  {
    "text": "and then to return this you can use yield return person",
    "start": "1511760",
    "end": "1517039"
  },
  {
    "text": "that's pretty cool i don't have to create a temporary list i can use the yield keyword to create an",
    "start": "1517039",
    "end": "1522240"
  },
  {
    "text": "iterator for me and that just corresponds with the innumerable of person that had a very top",
    "start": "1522240",
    "end": "1528640"
  },
  {
    "text": "now the init only keyword that i added earlier i'll show you here i can't just access",
    "start": "1528640",
    "end": "1534159"
  },
  {
    "text": "the person details or first name",
    "start": "1534159",
    "end": "1540240"
  },
  {
    "text": "i can't change that because it's it's not allowed it's an init only so you're not allowed to change it afterwards it's",
    "start": "1540240",
    "end": "1545840"
  },
  {
    "text": "been created all right",
    "start": "1545840",
    "end": "1551679"
  },
  {
    "text": "and if i wanted to actually say that i can return null from this method here",
    "start": "1553520",
    "end": "1558640"
  },
  {
    "text": "i'd have to explicitly say everywhere in my code where i want to allow nulls",
    "start": "1558640",
    "end": "1564240"
  },
  {
    "text": "right and that's not very pretty i'd have to add question marks all over the place but it's better to find those places that could potentially be causing",
    "start": "1564240",
    "end": "1570640"
  },
  {
    "text": "those null reference exceptions and now if i build this hopefully",
    "start": "1570640",
    "end": "1575919"
  },
  {
    "text": "there's no more problems and the application hopefully works as well",
    "start": "1575919",
    "end": "1582080"
  },
  {
    "text": "right so that's a null reference exceptions and this method here relies on something",
    "start": "1582840",
    "end": "1590320"
  },
  {
    "text": "called the null state static analysis there's attributes that you can add to your methods to do the same thing",
    "start": "1590320",
    "end": "1597039"
  },
  {
    "text": "so you could say for instance that i guarantee that whatever thing you passed into this method i've null checked that",
    "start": "1597039",
    "end": "1603120"
  },
  {
    "text": "if i return a certain value that's exactly what this method here does if this doesn't throw an exception it's",
    "start": "1603120",
    "end": "1609760"
  },
  {
    "text": "not null you don't obviously have to handle the exception somewhere else you just move the problem but at least it's",
    "start": "1609760",
    "end": "1616080"
  },
  {
    "text": "intentional right it's all about intent",
    "start": "1616080",
    "end": "1623600"
  },
  {
    "text": "all right there we go",
    "start": "1625440",
    "end": "1631200"
  },
  {
    "text": "and of course once you've gotten to a place where you've added all the null checks that you have",
    "start": "1631200",
    "end": "1636799"
  },
  {
    "text": "on the places where it's necessary where it could potentially be null you could treat warnings as errors on",
    "start": "1636799",
    "end": "1642159"
  },
  {
    "text": "your build server and anytime someone checks something in that could potentially be null you'd get a",
    "start": "1642159",
    "end": "1647200"
  },
  {
    "text": "very nice slack message from them asking you to turn it off",
    "start": "1647200",
    "end": "1653360"
  },
  {
    "text": "it's not always going to find everything but it's a good way of solving a problem that they couldn't solve right now which",
    "start": "1653360",
    "end": "1659760"
  },
  {
    "text": "is removing nulls completely other programming languages like swift kotlin",
    "start": "1659760",
    "end": "1665039"
  },
  {
    "text": "they make it hard to use nulls out of the box they tell you that you shouldn't you have to explicitly say i want to use",
    "start": "1665039",
    "end": "1671120"
  },
  {
    "text": "nulls they pretty much do the opposite of what c sharp did in the past",
    "start": "1671120",
    "end": "1676880"
  },
  {
    "text": "so let's talk about asynchronous streams and leave the nullable reference type for a moment",
    "start": "1677679",
    "end": "1685919"
  },
  {
    "text": "asynchronous streams is a way for it kind of requires you to understand asynchronous programming a little bit",
    "start": "1685919",
    "end": "1692000"
  },
  {
    "text": "it's a way for us to stream data so imagine that i have this portion of this method call here",
    "start": "1692000",
    "end": "1698640"
  },
  {
    "text": "there's a few things happening in here that's a little bit different from what you might have seen in the past if you have any synchronous methods",
    "start": "1698640",
    "end": "1704480"
  },
  {
    "text": "called async that just tells it that it's capable of retrieving data asynchronously it doesn't mean that the",
    "start": "1704480",
    "end": "1710799"
  },
  {
    "text": "entire method is in fact going to run on a separate thread or going to be faster than what it could be",
    "start": "1710799",
    "end": "1716320"
  },
  {
    "text": "it's just a way for you to enable that capability so to say this is then coupled with the i async",
    "start": "1716320",
    "end": "1723600"
  },
  {
    "text": "innumerable excuse me that's indicating that this is going to give you an iterator that's going to",
    "start": "1723600",
    "end": "1730480"
  },
  {
    "text": "allow you to asynchronously retrieve strings so each string is going to be returned",
    "start": "1730480",
    "end": "1736880"
  },
  {
    "text": "out of this enumerable asynchronously and obviously this is called read lines",
    "start": "1736880",
    "end": "1741919"
  },
  {
    "text": "async so that means we're going to read something from disk so we indicate that the data will be",
    "start": "1741919",
    "end": "1747200"
  },
  {
    "text": "streamed which means that it's just going to read one file at one line at a time from disk",
    "start": "1747200",
    "end": "1753840"
  },
  {
    "text": "and then return that i can use a yield return to do that so i use yield together with a weight",
    "start": "1753840",
    "end": "1758880"
  },
  {
    "text": "somewhere in this code here and that's what performs all the magic it tells the iterator that there's a new",
    "start": "1758880",
    "end": "1765039"
  },
  {
    "text": "item to process now instead of going through the code in",
    "start": "1765039",
    "end": "1771760"
  },
  {
    "text": "in powerpoint i actually improved this code a little bit today",
    "start": "1771760",
    "end": "1777600"
  },
  {
    "text": "which is always a good idea to do right before you go on stage so",
    "start": "1777600",
    "end": "1783279"
  },
  {
    "text": "what i did here i increased i introduced this method here called get lyrics",
    "start": "1783279",
    "end": "1788720"
  },
  {
    "text": "the idea here is that i want to get each line from this file",
    "start": "1788720",
    "end": "1794320"
  },
  {
    "text": "one at a time we can just imagine that this is loaded from somewhere else it loaded from the web it might be an",
    "start": "1794320",
    "end": "1799600"
  },
  {
    "text": "expensive database operation so i have this this fictive delay here of 400 milliseconds",
    "start": "1799600",
    "end": "1806960"
  },
  {
    "text": "to open the this stream reader i'm using this using declaration using",
    "start": "1806960",
    "end": "1812000"
  },
  {
    "text": "declarations was also introduced quite recently in c-sharp and what it ensures is that it's going",
    "start": "1812000",
    "end": "1818720"
  },
  {
    "text": "to be disposed of at the end of the method call and it's quite a lot happening in here",
    "start": "1818720",
    "end": "1824159"
  },
  {
    "text": "since this is asynchronous programming it's going to context switches it's going to involve",
    "start": "1824159",
    "end": "1829440"
  },
  {
    "text": "different threads the fact that this here closes the stream to the disk after all of that is done is pretty amazing",
    "start": "1829440",
    "end": "1836880"
  },
  {
    "text": "then what i do here is that i i together with pattern matching i say while there is a line that i can read",
    "start": "1836880",
    "end": "1844000"
  },
  {
    "text": "and i'm using this the var pattern here to say that if this is a string i'm going to capture this into a local",
    "start": "1844000",
    "end": "1849919"
  },
  {
    "text": "variable this here performs a null check it",
    "start": "1849919",
    "end": "1855360"
  },
  {
    "text": "stores whatever read line async returns into that local variable which is only",
    "start": "1855360",
    "end": "1860720"
  },
  {
    "text": "then available inside this context here and then i have a 400 second milli 400",
    "start": "1860720",
    "end": "1866159"
  },
  {
    "text": "millisecond delay and then return so this is cool this is a way to just",
    "start": "1866159",
    "end": "1871840"
  },
  {
    "text": "read stuff asynchronously or read one thing at a time how do i then consume this",
    "start": "1871840",
    "end": "1877519"
  },
  {
    "text": "you do that normally when you call a an asynchronous method",
    "start": "1877519",
    "end": "1884799"
  },
  {
    "text": "you do something like this right so you say give me all of whatever this is returning that's what you normally do",
    "start": "1884799",
    "end": "1891440"
  },
  {
    "text": "maybe this is hard to read in the back normally you do that right but now",
    "start": "1891440",
    "end": "1898080"
  },
  {
    "text": "you don't do that anymore well you say instead you say a wait for each for a line in",
    "start": "1898720",
    "end": "1905360"
  },
  {
    "text": "get lyrics right so",
    "start": "1905360",
    "end": "1911039"
  },
  {
    "text": "kind of change the way that you look at using the away keyword so what i'm doing here the weight keyword in front of a for",
    "start": "1911039",
    "end": "1917600"
  },
  {
    "text": "each loop means that each line here is going to be retrieved or each item is going to be retrieved asynchronously",
    "start": "1917600",
    "end": "1924960"
  },
  {
    "text": "so if i print this out to the console hopefully this is going to work",
    "start": "1926720",
    "end": "1932720"
  },
  {
    "text": "dot net run",
    "start": "1932720",
    "end": "1935840"
  },
  {
    "text": "look at that works",
    "start": "1941760",
    "end": "1948679"
  },
  {
    "text": "i think this is pretty cool and it's useful in cases where you want to stream data into an application it doesn't as",
    "start": "1951200",
    "end": "1958080"
  },
  {
    "text": "with any i innumerable you don't have to know where it where it's ending right",
    "start": "1958080",
    "end": "1964240"
  },
  {
    "text": "which is why it's not the best idea to do two array on innumerables because they could be infinite amount of",
    "start": "1964240",
    "end": "1971120"
  },
  {
    "text": "elements being streamed into that innumerable there's no ending here like we're doing",
    "start": "1971120",
    "end": "1976880"
  },
  {
    "text": "yield return how do we know if this maybe this file here is being fed with data all the time",
    "start": "1976880",
    "end": "1983519"
  },
  {
    "text": "so yeah the for each loop allows us to iterate over this data asynchronously",
    "start": "1983519",
    "end": "1991240"
  },
  {
    "text": "all right",
    "start": "1993760",
    "end": "1996240"
  },
  {
    "text": "so that's c sharp eight quite a lot of features i've showed you a few of them added to c sharp from c",
    "start": "2000480",
    "end": "2007200"
  },
  {
    "text": "sharp nine as well one of the biggest features added to c sharp nine is something called record",
    "start": "2007200",
    "end": "2012480"
  },
  {
    "text": "types it's one of the we've been waiting for this for a very long time",
    "start": "2012480",
    "end": "2018559"
  },
  {
    "text": "they promised to add something that looked like record types all the way back in c-sharp six",
    "start": "2018559",
    "end": "2023679"
  },
  {
    "text": "but it's been really hard to implement it's i don't know why but then again i'm not a language designer",
    "start": "2023679",
    "end": "2031600"
  },
  {
    "text": "but there's a lot of complex situations that they had to handle but it's finally",
    "start": "2031600",
    "end": "2037919"
  },
  {
    "text": "there we looked at the end only setters the top level statements i didn't",
    "start": "2037919",
    "end": "2043519"
  },
  {
    "text": "mention this but the application that i had over here",
    "start": "2043519",
    "end": "2049040"
  },
  {
    "text": "this is a top-level statement there's no public static void main stuff or anything like that this is just a normal console",
    "start": "2049040",
    "end": "2055520"
  },
  {
    "text": "application with just a few lines of code this actually generates all of that behind the scenes but it makes it easier",
    "start": "2055520",
    "end": "2061040"
  },
  {
    "text": "to just focus on the code maybe not for experienced developers but especially",
    "start": "2061040",
    "end": "2066960"
  },
  {
    "text": "when you're learning about c-sharp or building minimal apis it's nice to just be able to",
    "start": "2066960",
    "end": "2072800"
  },
  {
    "text": "deploy like a single file and have all the logic in one place unless it's a lot of logic that is",
    "start": "2072800",
    "end": "2081118"
  },
  {
    "text": "c sharp nine also came with a lot of changes to pattern matching as well which we're going to spend a bit of time",
    "start": "2081119",
    "end": "2086878"
  },
  {
    "text": "talking about in just a moment and then there's a bunch of other things as well",
    "start": "2086879",
    "end": "2093440"
  },
  {
    "text": "it's kind of a lot of features to add to a programming language just in one iteration of it if we compare this to",
    "start": "2096000",
    "end": "2101920"
  },
  {
    "text": "other programming languages i don't want to name it but the one by oracle",
    "start": "2101920",
    "end": "2108560"
  },
  {
    "text": "i'm just kidding they actually got a lot of features as well so they they help each other out i know microsoft talks a",
    "start": "2108560",
    "end": "2114400"
  },
  {
    "text": "lot with other language designers from other teams like swift and kotlin and java and all of that",
    "start": "2114400",
    "end": "2119760"
  },
  {
    "text": "i try to make the best programming language so what i like about c sharp is that each",
    "start": "2119760",
    "end": "2125440"
  },
  {
    "text": "feature that they add to the language is in fact looks and acts very much like a c-sharp",
    "start": "2125440",
    "end": "2131440"
  },
  {
    "text": "language feature they try to make it so that if you know c-sharp you're still going to be comfortable",
    "start": "2131440",
    "end": "2137680"
  },
  {
    "text": "working with those features some of it looks a little bit",
    "start": "2137680",
    "end": "2143280"
  },
  {
    "text": "odd and some of it might look very unfamiliar but once you get into it it's it's really nice and pattern matching is",
    "start": "2143280",
    "end": "2150000"
  },
  {
    "text": "one of those things the whole idea with pattern matching is that we can look on an object or the",
    "start": "2150000",
    "end": "2156000"
  },
  {
    "text": "different traits and attributes and understand what an object is and write code that expresses what we're",
    "start": "2156000",
    "end": "2163440"
  },
  {
    "text": "looking for i might be looking for a particular shape of an object i might be looking for different",
    "start": "2163440",
    "end": "2170160"
  },
  {
    "text": "let's say colors or if it's an edible fruit or whatever might be very different things that i'm looking for i might be looking for very",
    "start": "2170160",
    "end": "2177280"
  },
  {
    "text": "particular things in a large segment of data for instance let's say that i'm looking at the last 128 bytes in a byte",
    "start": "2177280",
    "end": "2184320"
  },
  {
    "text": "array to validate a signature that needs to be a very specific set of numbers i could for instance use pattern matching",
    "start": "2184320",
    "end": "2190160"
  },
  {
    "text": "for that hopefully in c sharp 11 when they're adding list patterns",
    "start": "2190160",
    "end": "2196240"
  },
  {
    "text": "this isn't really a new concept the idea of looking at the type and just matching",
    "start": "2196560",
    "end": "2202000"
  },
  {
    "text": "ifs and else or you know or just looking at different attributes on a type it's been possible for a very",
    "start": "2202000",
    "end": "2208960"
  },
  {
    "text": "long time just as i mentioned earlier it's just a way a different way of expressing the",
    "start": "2208960",
    "end": "2214079"
  },
  {
    "text": "intent using less characters less code that's more understandable",
    "start": "2214079",
    "end": "2220320"
  },
  {
    "text": "in this case here i get the type i compare the type to what i'm looking for then i'm looking at a property and then",
    "start": "2220320",
    "end": "2225920"
  },
  {
    "text": "i'm doing something with that particular object in c sharp 7 they introduced a first",
    "start": "2225920",
    "end": "2231760"
  },
  {
    "text": "version of pattern matching that allowed us to look a little bit differently at the same",
    "start": "2231760",
    "end": "2237599"
  },
  {
    "text": "type of code but express this in a little bit of a different manner now we can use something called a switch",
    "start": "2237599",
    "end": "2243599"
  },
  {
    "text": "with the object and instead construct an expression that says well in the case",
    "start": "2243599",
    "end": "2249440"
  },
  {
    "text": "of this being an apple when the color is green then i want to go into this this um",
    "start": "2249440",
    "end": "2254880"
  },
  {
    "text": "this case block and what's interesting here is that it's the correct type i don't have to cast it",
    "start": "2254880",
    "end": "2260240"
  },
  {
    "text": "into any particular type once i'm inside this here and the compiler",
    "start": "2260240",
    "end": "2265760"
  },
  {
    "text": "evaluated this pattern and it knows what type it is i don't have to do anything",
    "start": "2265760",
    "end": "2271119"
  },
  {
    "text": "right and then what was introduced is something called a switch expression",
    "start": "2271119",
    "end": "2279520"
  },
  {
    "text": "which is a different way of of working with objects in constructing these types",
    "start": "2279520",
    "end": "2284880"
  },
  {
    "text": "of pattern matches so here we have the input",
    "start": "2284880",
    "end": "2291280"
  },
  {
    "text": "and this is the object that i want to construct patterns for",
    "start": "2291280",
    "end": "2296880"
  },
  {
    "text": "all right and then i can fill this switch block here or this switch body this is known as a switch expression",
    "start": "2296960",
    "end": "2304560"
  },
  {
    "text": "with all my different expressions so here i could say that i based on the fruit",
    "start": "2304560",
    "end": "2311440"
  },
  {
    "text": "what this is if it matches an apple then this is going to be returned so everything on",
    "start": "2311440",
    "end": "2317760"
  },
  {
    "text": "the right hand side of the expression just like an expression-bodied member is what's going to be returned it doesn't",
    "start": "2317760",
    "end": "2323200"
  },
  {
    "text": "necessarily have to be a string it could be anything",
    "start": "2323200",
    "end": "2328800"
  },
  {
    "text": "and you could use this in very interesting situations you could for instance say give me the result of this",
    "start": "2328880",
    "end": "2334079"
  },
  {
    "text": "operation if it's a failed result do this if it's a successful result do this",
    "start": "2334079",
    "end": "2339359"
  },
  {
    "text": "that's a very basic way of looking at pattern matching",
    "start": "2339359",
    "end": "2344078"
  },
  {
    "text": "so with pattern matching in c sharp there's quite a lot of patterns and there this is one of the things that i think is going to be",
    "start": "2344400",
    "end": "2350560"
  },
  {
    "text": "evolved much further over the years so we see that with the new versions of c-sharp they're adding even more",
    "start": "2350560",
    "end": "2356720"
  },
  {
    "text": "patterns to allow us to express things that might have been hard to do before",
    "start": "2356720",
    "end": "2361920"
  },
  {
    "text": "we just saw the type pattern there's a way for us to look at a tuple and compare different positions in the",
    "start": "2361920",
    "end": "2367760"
  },
  {
    "text": "tuple to different values there's a property pattern there's a there's something called a tuple pattern",
    "start": "2367760",
    "end": "2373040"
  },
  {
    "text": "that allows you to match exactly what a tuple is and we're going to look at a few of these in just a moment",
    "start": "2373040",
    "end": "2378800"
  },
  {
    "text": "it's a relational pattern to allow you to compare different values you can do and or and parenthesize",
    "start": "2378800",
    "end": "2384640"
  },
  {
    "text": "patterns you can negate patterns and you can introduce something called recursive patterns",
    "start": "2384640",
    "end": "2389760"
  },
  {
    "text": "so let's take a look at a few of these here",
    "start": "2389760",
    "end": "2394119"
  },
  {
    "text": "i'm going to create a new project",
    "start": "2399760",
    "end": "2403680"
  },
  {
    "text": "just a console application you can call it console app one",
    "start": "2406960",
    "end": "2413599"
  },
  {
    "text": "i'm going to use dotnet 6 the lts version",
    "start": "2413599",
    "end": "2418560"
  },
  {
    "text": "and this here is the new top level statement that you'd get if you just create a new application",
    "start": "2420079",
    "end": "2426079"
  },
  {
    "text": "and i need to bring in a file",
    "start": "2426079",
    "end": "2430400"
  },
  {
    "text": "alright so this here is a test result imagine this is a test result for when you've been to university or done some courses and you've written a test",
    "start": "2435839",
    "end": "2443280"
  },
  {
    "text": "so maybe if you're like me you have to do the tests a couple of times before you succeed",
    "start": "2443280",
    "end": "2449440"
  },
  {
    "text": "especially if it's math it's not my strongest subject so we have a public property called number of tests a",
    "start": "2449440",
    "end": "2455200"
  },
  {
    "text": "boolean if it's valid uh when this was tested on and i've also introduced a deconstruct method that allows us to",
    "start": "2455200",
    "end": "2461040"
  },
  {
    "text": "deconstruct this into something that's just represents this object in a different manner right",
    "start": "2461040",
    "end": "2467040"
  },
  {
    "text": "so i can say how many days since the test and if it's still valid this doesn't have to be in correlation",
    "start": "2467040",
    "end": "2473520"
  },
  {
    "text": "to the properties that you have this could be as you see here i'm computing how long it was since i did the test",
    "start": "2473520",
    "end": "2478800"
  },
  {
    "text": "based on the property value and the date then i have a few subclasses",
    "start": "2478800",
    "end": "2484000"
  },
  {
    "text": "if it's a positive or a negative test or it should be passed or failed maybe",
    "start": "2484000",
    "end": "2490800"
  },
  {
    "text": "see i've used this quite a lot and just now i realize the naming is not the best",
    "start": "2490800",
    "end": "2496960"
  },
  {
    "text": "beauty of software development so let's now say that i want to use this here i have my test",
    "start": "2497280",
    "end": "2503119"
  },
  {
    "text": "test result let's call it test result and let's create a new positive result",
    "start": "2503119",
    "end": "2510800"
  },
  {
    "text": "now i can use patterns in not only with the switch expressions i keep using with switches or if else else ifs as well so",
    "start": "2510800",
    "end": "2518079"
  },
  {
    "text": "i could say that if the test result test result if i can spell is",
    "start": "2518079",
    "end": "2523599"
  },
  {
    "text": "positive this is going to do quite a few things i feel two things",
    "start": "2523599",
    "end": "2530400"
  },
  {
    "text": "one it's going to ensure that it's an instance of an object",
    "start": "2530400",
    "end": "2535839"
  },
  {
    "text": "it's actually checking if it's set to a value and then also making sure that the type is correct",
    "start": "2535839",
    "end": "2542400"
  },
  {
    "text": "if i if i want to say if it's if it's not null i can do that as well",
    "start": "2542400",
    "end": "2547599"
  },
  {
    "text": "that would match on any different types it would match on if it's negative as well now if i want to make it a little bit",
    "start": "2547599",
    "end": "2553920"
  },
  {
    "text": "more interesting maybe i want to say that well if this is a positive test result",
    "start": "2553920",
    "end": "2559520"
  },
  {
    "text": "and you only had to do this test within a certain amount of tries",
    "start": "2559520",
    "end": "2564960"
  },
  {
    "text": "then you're a gold star student so how would i express that well i can use a",
    "start": "2564960",
    "end": "2570960"
  },
  {
    "text": "recursive pattern which is a way for me to apply an additional pattern that is also evaluated",
    "start": "2570960",
    "end": "2576640"
  },
  {
    "text": "so first we check if it's positive and then i can use something called a",
    "start": "2576640",
    "end": "2581839"
  },
  {
    "text": "property pattern to say well if the numbers number of tests",
    "start": "2581839",
    "end": "2587839"
  },
  {
    "text": "is less than or equal to five then you're awesome",
    "start": "2587839",
    "end": "2593280"
  },
  {
    "text": "and if it's more than or equal to two you're also awesome",
    "start": "2593280",
    "end": "2600160"
  },
  {
    "text": "right so i can kind of express myself in ways that might have been a little",
    "start": "2600160",
    "end": "2605200"
  },
  {
    "text": "bit difficult before and what's pretty cool here is that",
    "start": "2605200",
    "end": "2610560"
  },
  {
    "text": "inside the scope here i think i can capture this as a result",
    "start": "2610560",
    "end": "2616240"
  },
  {
    "text": "variable and i can now use this here as the proper type",
    "start": "2616240",
    "end": "2624318"
  },
  {
    "text": "if i can zoom in here you'll see that it says that this is a positive test result so it was captured into the if statement",
    "start": "2626000",
    "end": "2632079"
  },
  {
    "text": "as the correct type of which it was matched to be right",
    "start": "2632079",
    "end": "2639359"
  },
  {
    "text": "so there's quite a things quite quite a few things happening in here and what i did here was a few things i did a",
    "start": "2639599",
    "end": "2645119"
  },
  {
    "text": "relational pattern i have a property here that could be it's an integer and then i'm saying this can be between two",
    "start": "2645119",
    "end": "2650560"
  },
  {
    "text": "values so i used an and here to say that it has to be more than",
    "start": "2650560",
    "end": "2656160"
  },
  {
    "text": "five unless or more than two less than five sorry",
    "start": "2656160",
    "end": "2660800"
  },
  {
    "text": "we could also use this together with the switch expression to for instance",
    "start": "2661280",
    "end": "2666400"
  },
  {
    "text": "dictate the outcome of the test so based on the test result",
    "start": "2666400",
    "end": "2672960"
  },
  {
    "text": "i start this switch expression i can use a discard",
    "start": "2673359",
    "end": "2681119"
  },
  {
    "text": "just do this i can use a discard here to say that for everything",
    "start": "2681119",
    "end": "2687200"
  },
  {
    "text": "that's not matched above so just like a normal switch okay you have to add the",
    "start": "2687200",
    "end": "2692480"
  },
  {
    "text": "the most granular ones at the top so you have to say you can't add the default case at the",
    "start": "2692480",
    "end": "2697680"
  },
  {
    "text": "top because then it won't match anything else so for",
    "start": "2697680",
    "end": "2702720"
  },
  {
    "text": "where the discard here is called this called a discard keyword if you use that that's kind of the default case it",
    "start": "2702720",
    "end": "2708160"
  },
  {
    "text": "captures everything if it's null if it's whatever if you don't want to capture null you say not null",
    "start": "2708160",
    "end": "2713680"
  },
  {
    "text": "right and then you can say if it is null do this",
    "start": "2713680",
    "end": "2719520"
  },
  {
    "text": "but the same would be to say discard make sense now",
    "start": "2719520",
    "end": "2724960"
  },
  {
    "text": "i can apply a few different patterns here first i could do the same thing we did at the top so say that i can use a type pattern to say if it's positive",
    "start": "2724960",
    "end": "2733440"
  },
  {
    "text": "i'll actually do not available on this one",
    "start": "2733440",
    "end": "2738640"
  },
  {
    "text": "so for for all the positive tests i'm just going to return the string positive and",
    "start": "2740400",
    "end": "2746160"
  },
  {
    "text": "if it's a positive test let's say let's use the same pattern we have at the at the top",
    "start": "2746160",
    "end": "2752640"
  },
  {
    "text": "positive come on number of tests",
    "start": "2752640",
    "end": "2758000"
  },
  {
    "text": "is above five right so i can add a lot of different test",
    "start": "2758000",
    "end": "2765359"
  },
  {
    "text": "cases and i can add a lot of different patterns in here and use different patterns available in c sharp",
    "start": "2765359",
    "end": "2772880"
  },
  {
    "text": "what's interesting is that if i remove this here that's also valid",
    "start": "2773680",
    "end": "2779119"
  },
  {
    "text": "so i don't have to check the type if i don't want to i could say that for all different tests",
    "start": "2779119",
    "end": "2786000"
  },
  {
    "text": "if it's it's valid for example if it's a valid",
    "start": "2786960",
    "end": "2794079"
  },
  {
    "text": "passed or failed test right or negative or positive one thing you should avoid doing",
    "start": "2794079",
    "end": "2801040"
  },
  {
    "text": "is negating these types of patterns you can but you shouldn't",
    "start": "2801040",
    "end": "2806240"
  },
  {
    "text": "just as with any code that you write just be cautious and this here is interesting because what it's doing",
    "start": "2806240",
    "end": "2813520"
  },
  {
    "text": "it might not be doing what you want do you think this is going to match if it's null",
    "start": "2813520",
    "end": "2819200"
  },
  {
    "text": "maybe this here the property pattern will ensure that it has an instance",
    "start": "2819280",
    "end": "2824319"
  },
  {
    "text": "and then if that instance has a property of of called its valley that is true",
    "start": "2824319",
    "end": "2831440"
  },
  {
    "text": "then i negate that entire expression so if there's not an instance this is true if there is an instance and if its valid",
    "start": "2831440",
    "end": "2838240"
  },
  {
    "text": "is false it becomes really hard to understand exactly what your intent is here",
    "start": "2838240",
    "end": "2844160"
  },
  {
    "text": "yes exactly what try to think about the other developers",
    "start": "2844160",
    "end": "2849760"
  },
  {
    "text": "that come after you that have to maintain the code right not null make sense using not in other",
    "start": "2849760",
    "end": "2856400"
  },
  {
    "text": "places might be be cautious with that",
    "start": "2856400",
    "end": "2862079"
  },
  {
    "text": "i also mentioned that you can use the positional pattern to leverage the deconstruct method so i",
    "start": "2862079",
    "end": "2867440"
  },
  {
    "text": "could say that based on how this is deconstructed so if you go into the test result i know that",
    "start": "2867440",
    "end": "2873200"
  },
  {
    "text": "i have two out parameters here and based on what we talked about earlier i can take an object and i can",
    "start": "2873200",
    "end": "2878720"
  },
  {
    "text": "deconstruct that into a different representation based on this here it returns an integer",
    "start": "2878720",
    "end": "2885040"
  },
  {
    "text": "and a boolean so what i can do with this here is that i have built in support that this here can deconstruct the",
    "start": "2885040",
    "end": "2891839"
  },
  {
    "text": "object for me if i say that i want to use a positional pattern",
    "start": "2891839",
    "end": "2897440"
  },
  {
    "text": "i can fill this with exactly the number of",
    "start": "2897440",
    "end": "2901838"
  },
  {
    "text": "of parameters that's output or deconstructed out of that so where this makes a little bit more",
    "start": "2903359",
    "end": "2908800"
  },
  {
    "text": "sense is if we named parameters is valid is valid",
    "start": "2908800",
    "end": "2914559"
  },
  {
    "text": "and intellisense doesn't help at all here so what this lets me do is that i could",
    "start": "2914559",
    "end": "2920640"
  },
  {
    "text": "deconstruct the object and if it can be deconstructed into something that generates true that's more than 10 days old or 10 days",
    "start": "2920640",
    "end": "2928160"
  },
  {
    "text": "ago then i want to evaluate that expression so hopefully this just shows you a few",
    "start": "2928160",
    "end": "2934400"
  },
  {
    "text": "examples of examples of how powerful pattern matching can be in the way that you can express yourself in different",
    "start": "2934400",
    "end": "2939920"
  },
  {
    "text": "ways there's many different patterns and many different ways to do this but",
    "start": "2939920",
    "end": "2946960"
  },
  {
    "text": "yes it is obvious getting your code if you're not using it properly",
    "start": "2947359",
    "end": "2952400"
  },
  {
    "text": "and i'm kind of intentionally showing you ways to not do this because you should be really cautious when you",
    "start": "2952400",
    "end": "2958640"
  },
  {
    "text": "do this it might be very easy for you to understand when you write this code",
    "start": "2958640",
    "end": "2964400"
  },
  {
    "text": "personally this approach is fine if you're very explicit about what you're talking about in this case here",
    "start": "2964400",
    "end": "2971680"
  },
  {
    "text": "if i didn't have the name parameter and just said over 10 and true how would i know what that is i don't want to",
    "start": "2971680",
    "end": "2977520"
  },
  {
    "text": "force anyone to go in to look at a deconstruct method that might live on a base class in a nuget package that i",
    "start": "2977520",
    "end": "2983839"
  },
  {
    "text": "know that i don't own you know so that might feel really hard so in this case here i would be if you",
    "start": "2983839",
    "end": "2990000"
  },
  {
    "text": "have to use the deconstruct i would say do something like this here instead",
    "start": "2990000",
    "end": "2996960"
  },
  {
    "text": "use it together with the the name parameters so it makes sense exactly what your intent is",
    "start": "2997280",
    "end": "3003920"
  },
  {
    "text": "okay so we have let's see here",
    "start": "3003920",
    "end": "3010519"
  },
  {
    "text": "let's um let's talk about record types about 10 minutes left",
    "start": "3013760",
    "end": "3019760"
  },
  {
    "text": "so i want to show you what record types are all about",
    "start": "3019760",
    "end": "3024000"
  },
  {
    "text": "record types is a new type of reference type that was introduced in c sharp",
    "start": "3025040",
    "end": "3030559"
  },
  {
    "text": "it all starts with the keyword record you can have a record class you can have a record struct",
    "start": "3030559",
    "end": "3038000"
  },
  {
    "text": "and that's just because it makes sense to allow you to explicitly define that",
    "start": "3038000",
    "end": "3044400"
  },
  {
    "text": "and it does give you a little bit of code out of the box as well if you don't specify anything and you just say record",
    "start": "3044400",
    "end": "3051119"
  },
  {
    "text": "that's going to be a record class so if we say we have a record called person",
    "start": "3051119",
    "end": "3057359"
  },
  {
    "text": "this here is now a record declaration and it comes with something called a",
    "start": "3057359",
    "end": "3062960"
  },
  {
    "text": "positional constructor or primary constructor where i can say that this person has a",
    "start": "3062960",
    "end": "3068960"
  },
  {
    "text": "first name and it has a last name and now what happened behind the scenes",
    "start": "3068960",
    "end": "3075200"
  },
  {
    "text": "here is that this here generated a whole bunch of code for us code that should make it easier for us",
    "start": "3075200",
    "end": "3081440"
  },
  {
    "text": "to work with reference types if i create a new sorry",
    "start": "3081440",
    "end": "3087200"
  },
  {
    "text": "if i create a new person new person",
    "start": "3087200",
    "end": "3093599"
  },
  {
    "text": "i have to specify the the first name and last name",
    "start": "3094079",
    "end": "3099599"
  },
  {
    "text": "berg and it's immutable by default so i couldn't say that i want to change any",
    "start": "3103040",
    "end": "3108240"
  },
  {
    "text": "of the properties on this here first name",
    "start": "3108240",
    "end": "3114079"
  },
  {
    "text": "i couldn't do that because it's an init only property",
    "start": "3114079",
    "end": "3119838"
  },
  {
    "text": "if i do want to get a new person within you with a new name let's say that i want to get a person",
    "start": "3120800",
    "end": "3126559"
  },
  {
    "text": "two that's the second person",
    "start": "3126559",
    "end": "3131920"
  },
  {
    "text": "person with first name",
    "start": "3131920",
    "end": "3138400"
  },
  {
    "text": "first intellisense doesn't work very well with top-level statements i'm sorry",
    "start": "3138400",
    "end": "3145599"
  },
  {
    "text": "actually let's do yeah let's do take my wife's name so now what happened here is that i've",
    "start": "3145599",
    "end": "3152240"
  },
  {
    "text": "copied the entire instance this with expression was also introduced with c sharp nine",
    "start": "3152240",
    "end": "3159040"
  },
  {
    "text": "and allows you to copy pretty much everything you can copy an anonymous type you can copy a tuple you can copy",
    "start": "3159040",
    "end": "3165920"
  },
  {
    "text": "your your reference types and you can do this with the the record it allows you to change the",
    "start": "3165920",
    "end": "3172480"
  },
  {
    "text": "values of the properties that you want to change but what happens if we have a reference",
    "start": "3172480",
    "end": "3179040"
  },
  {
    "text": "type on that would you imagine that it copies the entire reference type or does it only",
    "start": "3179040",
    "end": "3185520"
  },
  {
    "text": "copy the reference itself it doesn't perform a deep copy i'm sorry",
    "start": "3185520",
    "end": "3191359"
  },
  {
    "text": "so if we have for instance an innumerable of string",
    "start": "3191359",
    "end": "3197200"
  },
  {
    "text": "phone numbers if i have this here it would copy",
    "start": "3198400",
    "end": "3205040"
  },
  {
    "text": "the reference it wouldn't copy all the elements in the list of phone numbers",
    "start": "3205040",
    "end": "3210079"
  },
  {
    "text": "unless this also was a record",
    "start": "3210079",
    "end": "3214880"
  },
  {
    "text": "but you can experiment with that yourself so what's interesting here is that if i",
    "start": "3216400",
    "end": "3222400"
  },
  {
    "text": "compare my my first person to my second person obviously if i run this here",
    "start": "3222400",
    "end": "3229599"
  },
  {
    "text": "and set the correct project as a startup project oh it was perfect it's going to say",
    "start": "3229599",
    "end": "3237280"
  },
  {
    "text": "false because they're not the same makes sense but if i copy this person",
    "start": "3237280",
    "end": "3243680"
  },
  {
    "text": "and set the the name to the same name as i have and i run this again",
    "start": "3243680",
    "end": "3249599"
  },
  {
    "text": "when you compare to reference types normally it returns false because it's different references",
    "start": "3249599",
    "end": "3255920"
  },
  {
    "text": "but in this case here with record types you get value-based equality which means that it's going to compare each",
    "start": "3255920",
    "end": "3261760"
  },
  {
    "text": "properties it overloads the equality operator and make sure that it compares",
    "start": "3261760",
    "end": "3267520"
  },
  {
    "text": "all the properties that are available on those different types so to show you exactly what you get from",
    "start": "3267520",
    "end": "3273839"
  },
  {
    "text": "a record i'm going to copy this here there's multiple ways to do this",
    "start": "3273839",
    "end": "3278960"
  },
  {
    "text": "i've already pasted this in here so i'm at sharplab.io which is a way for",
    "start": "3278960",
    "end": "3284640"
  },
  {
    "text": "you to write c sharp code and you can decompile that and look at what the code generates",
    "start": "3284640",
    "end": "3291000"
  },
  {
    "text": "would be awesome if i could do a white team here but i don't think i can do that oh perfect there we go",
    "start": "3292319",
    "end": "3298720"
  },
  {
    "text": "so let's scroll down here we have",
    "start": "3298720",
    "end": "3303838"
  },
  {
    "text": "we have a class called person which implements iequatable",
    "start": "3304559",
    "end": "3309760"
  },
  {
    "text": "it has two private read-only fields it has an equality contract it has two properties",
    "start": "3309760",
    "end": "3317599"
  },
  {
    "text": "it has the constructor it overrides two string there's a lot of code in here that's",
    "start": "3317599",
    "end": "3322799"
  },
  {
    "text": "generated by just introducing that record keyword and where it gets pretty interesting is",
    "start": "3322799",
    "end": "3329680"
  },
  {
    "text": "when it overwrites the equals method here from the i equality operator",
    "start": "3329680",
    "end": "3336400"
  },
  {
    "text": "it checks that the first name for the backing field is equal to the other person's",
    "start": "3336400",
    "end": "3342079"
  },
  {
    "text": "backing field so this is in fact doing true value based equality",
    "start": "3342079",
    "end": "3347520"
  },
  {
    "text": "and you also get this deconstruct method out of the box you can use these with the patterns that you might have introduced earlier",
    "start": "3347520",
    "end": "3354720"
  },
  {
    "text": "so honestly the record types are really powerful the only place where you cannot use them is with entity framework",
    "start": "3355680",
    "end": "3362799"
  },
  {
    "text": "because entity framework relies on references and since this is doing value-based",
    "start": "3362799",
    "end": "3368480"
  },
  {
    "text": "equality that won't work but for everywhere else where you have a data container or like a",
    "start": "3368480",
    "end": "3374319"
  },
  {
    "text": "a domain object that represents some data or you might not want your entity to flow through the application you",
    "start": "3374319",
    "end": "3380799"
  },
  {
    "text": "might map that to a record instead and you get a lot of my things nice",
    "start": "3380799",
    "end": "3386480"
  },
  {
    "text": "things out of the box all right",
    "start": "3386480",
    "end": "3391839"
  },
  {
    "text": "so a few minutes left let's talk about c sharp 10 and 11. so c sharp 10 also introduced the record",
    "start": "3396000",
    "end": "3402400"
  },
  {
    "text": "struct so you can do get the same type of of generated code structs are value-based",
    "start": "3402400",
    "end": "3408000"
  },
  {
    "text": "use value based on quality but you get all the other nice things that record provides",
    "start": "3408000",
    "end": "3415040"
  },
  {
    "text": "some other nice improvements like global using the directive so you could say at one place in the application i want to",
    "start": "3415040",
    "end": "3421760"
  },
  {
    "text": "be able to use this namespace and that just works throughout the entire application so you don't have to have the using at the top of each file",
    "start": "3421760",
    "end": "3429440"
  },
  {
    "text": "which is a nice addition you can see something called a file scope namespace declaration so instead",
    "start": "3429440",
    "end": "3436000"
  },
  {
    "text": "of having to having to wrap your entire let's",
    "start": "3436000",
    "end": "3441440"
  },
  {
    "text": "go in here instead instead of having to wrap your entire file in a namespace you could say",
    "start": "3441440",
    "end": "3446640"
  },
  {
    "text": "namespace namespace ndc and this entire file would then be a",
    "start": "3446640",
    "end": "3452000"
  },
  {
    "text": "part of the ndc namespace",
    "start": "3452000",
    "end": "3455359"
  },
  {
    "text": "and that didn't work because i had that in a top level statement",
    "start": "3457599",
    "end": "3461838"
  },
  {
    "text": "they've done some changes to property patterns and dumps done some improvements to lambda expressions",
    "start": "3463200",
    "end": "3470318"
  },
  {
    "text": "it's quite a quite a nice set of features as well in c sharp 10 not as big as in c sharp 8 and 9 but it's still",
    "start": "3470799",
    "end": "3476880"
  },
  {
    "text": "a it's a nice set of features they're looking at or they have added",
    "start": "3476880",
    "end": "3483119"
  },
  {
    "text": "the static sorry static abstract members in interfaces if that's something that you",
    "start": "3483119",
    "end": "3488720"
  },
  {
    "text": "want to use this is for very specific use cases where you might have",
    "start": "3488720",
    "end": "3494319"
  },
  {
    "text": "custom math implementations and so forth right",
    "start": "3494319",
    "end": "3501160"
  },
  {
    "text": "also introduced constant interpolated strings so you don't have to you can use that with string",
    "start": "3502000",
    "end": "3507680"
  },
  {
    "text": "interpolation as well another cool feature is inferred type",
    "start": "3507680",
    "end": "3513280"
  },
  {
    "text": "of the lambda so in c sharp nine you had to explicitly declare which type of func that you were using",
    "start": "3513280",
    "end": "3519839"
  },
  {
    "text": "but now with c sharp 10 you don't have to do that it's now the the using the",
    "start": "3519839",
    "end": "3528000"
  },
  {
    "text": "natural type of the lambda and with the lambda improvements and i",
    "start": "3528000",
    "end": "3533920"
  },
  {
    "text": "don't know if you've seen the top level statements but they've also made a whole lot of improvements to the fact",
    "start": "3533920",
    "end": "3539760"
  },
  {
    "text": "that you can use attributes in your lambdas so you could for instance write a really nice this here",
    "start": "3539760",
    "end": "3547440"
  },
  {
    "text": "is in fact inside a top level statement if i run this it's going to boot up a",
    "start": "3547440",
    "end": "3553440"
  },
  {
    "text": "asp.net web application it's a little bit of code at the top as well but basically i can write an entire asp.net",
    "start": "3553440",
    "end": "3560400"
  },
  {
    "text": "core mvc application in just a few lines of code right so in about 35 seconds let's see",
    "start": "3560400",
    "end": "3565680"
  },
  {
    "text": "what's next in c sharp that's not a lot",
    "start": "3565680",
    "end": "3572319"
  },
  {
    "text": "in fact i i didn't want to spend too much time talking about c sharp 11 because",
    "start": "3572319",
    "end": "3578319"
  },
  {
    "text": "based on experience in six months none of this is going to be in the language",
    "start": "3578319",
    "end": "3584880"
  },
  {
    "text": "unfortunately they're doing a lot of more patterns they're they want to add list patterns and slice patterns and",
    "start": "3584880",
    "end": "3590000"
  },
  {
    "text": "span patterns we didn't talk about spans and slices and ranges and all of that but for pattern matching that's going to",
    "start": "3590000",
    "end": "3595839"
  },
  {
    "text": "be a nice addition as well name of parameter is one thing they want to add and the big thing is they want to",
    "start": "3595839",
    "end": "3601440"
  },
  {
    "text": "cache the delegates for static method groups so if you have lambdas that just points to or a func that points to one a",
    "start": "3601440",
    "end": "3608079"
  },
  {
    "text": "method in your application and you have that in a in a loop it's going to cache that method instead",
    "start": "3608079",
    "end": "3614240"
  },
  {
    "text": "of having to use an additional allocation for each iteration",
    "start": "3614240",
    "end": "3619760"
  },
  {
    "text": "i think any new required properties keyword so that you're required to specify the property or set that",
    "start": "3619760",
    "end": "3625920"
  },
  {
    "text": "property when you create an instance of the object something called raw string literals static members and interfaces and i just",
    "start": "3625920",
    "end": "3632480"
  },
  {
    "text": "showed you a snippet of that they also want to this is an interesting change they want",
    "start": "3632480",
    "end": "3638720"
  },
  {
    "text": "to add something called utf-8 string literals so i can take my name here and i can",
    "start": "3638720",
    "end": "3643920"
  },
  {
    "text": "just assign that to a span of byte and this would generate a byte array",
    "start": "3643920",
    "end": "3649359"
  },
  {
    "text": "of utf-8 bytes which is nice if you pass data across the wire quite a lot",
    "start": "3649359",
    "end": "3655520"
  },
  {
    "text": "so depending on the type of application you're building this is going to be a nice addition and another one is generic attributes so",
    "start": "3655520",
    "end": "3662799"
  },
  {
    "text": "you could say that you have an attribute that is a generic type you haven't been able to do this in the past you had to",
    "start": "3662799",
    "end": "3669359"
  },
  {
    "text": "rely on the type off and it was quite ugly so finally we're getting that and for those of you that were hoping",
    "start": "3669359",
    "end": "3676160"
  },
  {
    "text": "for something called parameter null checking unfortunately the community voted that",
    "start": "3676160",
    "end": "3681599"
  },
  {
    "text": "down after they implemented the feature basically they wanted to allow you to do bang bang which is the double",
    "start": "3681599",
    "end": "3687680"
  },
  {
    "text": "exclamation marks so for any parameter that you accept to a method you add bang",
    "start": "3687680",
    "end": "3692720"
  },
  {
    "text": "bang and then it automatically null check that and if it was knowledge through an exception",
    "start": "3692720",
    "end": "3699640"
  },
  {
    "text": "and that's another thing 50 probably didn't want that but so they removed that all kudos to",
    "start": "3700079",
    "end": "3706319"
  },
  {
    "text": "microsoft that's quite amazing so if you want to learn more about c sharp and all the language features in a",
    "start": "3706319",
    "end": "3712319"
  },
  {
    "text": "little bit more slow pace i have a lot of courses on pluralsight i just released a course on a lot of language",
    "start": "3712319",
    "end": "3718000"
  },
  {
    "text": "features so if you have seven hours to spare go ahead and have a look at that",
    "start": "3718000",
    "end": "3723440"
  },
  {
    "text": "so thank you so much for for letting me come here to talk today it's been a pleasure thank you",
    "start": "3723440",
    "end": "3730839"
  },
  {
    "text": "you",
    "start": "3755839",
    "end": "3757920"
  }
]