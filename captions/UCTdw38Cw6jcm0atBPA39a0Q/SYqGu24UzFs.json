[
  {
    "start": "0",
    "end": "277000"
  },
  {
    "text": "hey there everyone i live in pennsylvania which is on the east coast of the us it would feel odd",
    "start": "80",
    "end": "7040"
  },
  {
    "text": "to me to give a bright cheery talk without acknowledging all that is going on in the world right now",
    "start": "7040",
    "end": "13599"
  },
  {
    "text": "many of us are feeling sad many of us are feeling frustrated many of us are feeling angry and many of",
    "start": "13599",
    "end": "19039"
  },
  {
    "text": "us are hurting for years we've had a pattern of racial injustice and systemic racism in the us",
    "start": "19039",
    "end": "26160"
  },
  {
    "text": "for many of us current events have increased our awareness of this ugly problem",
    "start": "26160",
    "end": "31359"
  },
  {
    "text": "you must change we must do better in a global online space like this",
    "start": "31359",
    "end": "36880"
  },
  {
    "text": "chances are good that some of you are already working to influence change i applaud you for this",
    "start": "36880",
    "end": "42800"
  },
  {
    "text": "in this space i have a feeling some of you want to be part of the solution but aren't sure how it can be so easy to",
    "start": "42800",
    "end": "49280"
  },
  {
    "text": "acknowledge the problem feel overwhelmed by it and then become immobilized by that overwhelming feeling",
    "start": "49280",
    "end": "56160"
  },
  {
    "text": "we feel the feelings of sadness and anger but then don't actually take the next step to do",
    "start": "56160",
    "end": "61199"
  },
  {
    "text": "something about it it's so easy to let this happen without even realizing it",
    "start": "61199",
    "end": "67119"
  },
  {
    "text": "in the tech world when we have a large problem to solve we don't do it all at once right we break it down into smaller tasks or user stories",
    "start": "67119",
    "end": "73439"
  },
  {
    "text": "that can be accomplished in a day or two when you put all those tasks and user stories together",
    "start": "73439",
    "end": "78479"
  },
  {
    "text": "you get a full working app so let's do the same thing here if you're not already involved part of",
    "start": "78479",
    "end": "84479"
  },
  {
    "text": "the solution i encourage you to pick one small thing you can do this coming weekend",
    "start": "84479",
    "end": "90079"
  },
  {
    "text": "and then do it if you're not sure what you can do i have a list of three things you can do",
    "start": "90079",
    "end": "95680"
  },
  {
    "text": "i recognize that i'm coming into this conversation as a white person with privilege so the research i've done on how to help",
    "start": "95680",
    "end": "101360"
  },
  {
    "text": "is from that perspective i'm not saying these are the right things to do or the best things to do i just want to give you some practical",
    "start": "101360",
    "end": "107360"
  },
  {
    "text": "examples of small steps that you can take right now",
    "start": "107360",
    "end": "112320"
  },
  {
    "text": "so one thing you can do is educate yourself there are so many ways you can do this you can research the history of racism",
    "start": "113280",
    "end": "120320"
  },
  {
    "text": "online you can go to youtube and other social media and listen to the stories black people are sharing",
    "start": "120320",
    "end": "126000"
  },
  {
    "text": "you can learn about microaggressions and bias and discover how you might be unintentionally hurting others",
    "start": "126000",
    "end": "132480"
  },
  {
    "text": "one book that's been recommended to me by a couple of people is how to be an anti-racist by candy",
    "start": "132480",
    "end": "139360"
  },
  {
    "text": "if you have kids talk with them about racism and current events research from harvard university shows",
    "start": "139360",
    "end": "145599"
  },
  {
    "text": "that kids as young as three embrace racism when exposed to it it's not too early to talk with your",
    "start": "145599",
    "end": "151680"
  },
  {
    "text": "kids about it it's probably going to be uncomfortable for you but it's important embrace race.org has",
    "start": "151680",
    "end": "158480"
  },
  {
    "text": "put together a list of children's books to help you have these conversations and finally you can donate if you're in",
    "start": "158480",
    "end": "165519"
  },
  {
    "text": "a position to donate i encourage you to do to do so find a cause that reflects your",
    "start": "165519",
    "end": "170560"
  },
  {
    "text": "values and donate it can be easy to feel overwhelmed when you start researching what caused to donate to as there are so",
    "start": "170560",
    "end": "176959"
  },
  {
    "text": "many good organizations but don't let that sway you from donating you don't have to find the",
    "start": "176959",
    "end": "182000"
  },
  {
    "text": "perfect cause find one that is doing good work and donate to it if you find another cause later on",
    "start": "182000",
    "end": "187920"
  },
  {
    "text": "that's doing good great things you can always donate to that cause as well think about the impact we can make right",
    "start": "187920",
    "end": "193760"
  },
  {
    "text": "now if everyone who is listening donated just five dollars i know that's",
    "start": "193760",
    "end": "199040"
  },
  {
    "text": "u.s centric but you know donated just a little bit right think about if we all donated more there",
    "start": "199040",
    "end": "205519"
  },
  {
    "text": "are many good lists online right now of organizations to donate to so to get you started here are four",
    "start": "205519",
    "end": "211840"
  },
  {
    "text": "organizations that mongodb has been raising donations for this week they are code 2040 the bail project",
    "start": "211840",
    "end": "220239"
  },
  {
    "text": "national lawyers guild foundation inc and national urban link league inc mongodb has set up a page on",
    "start": "220239",
    "end": "227920"
  },
  {
    "text": "bright funds and is matching funds up to 250 thousand dollars for for donations received by june 30th",
    "start": "227920",
    "end": "235760"
  },
  {
    "text": "i've added links to the resources i just mentioned in a thread on twitter there's so many other things you can do",
    "start": "235760",
    "end": "242080"
  },
  {
    "text": "you can protest you can sign a petition you can support a friend who is hurting you can research politicians for",
    "start": "242080",
    "end": "247519"
  },
  {
    "text": "upcoming elections you can amplify black voices who are sharing their stories and ideas for solutions",
    "start": "247519",
    "end": "253599"
  },
  {
    "text": "you can advocate for better hiring and promotion policies at your company you can support black owned businesses",
    "start": "253599",
    "end": "259280"
  },
  {
    "text": "or you can get involved in an organization that is working to influence change whatever it is i encourage you to do one",
    "start": "259280",
    "end": "265759"
  },
  {
    "text": "thing this weekend and then pick something else and do it next week just don't do nothing",
    "start": "265759",
    "end": "272320"
  },
  {
    "text": "the silence is deafening",
    "start": "272320",
    "end": "275680"
  },
  {
    "text": "okay i don't think there's a smooth way to transition out of that so i'm not even going to try um but let's let's jump into the talk",
    "start": "278080",
    "end": "284880"
  },
  {
    "text": "let's talk about tables and documents but first let's talk about ron ron is a",
    "start": "284880",
    "end": "292479"
  },
  {
    "text": "character from the best tv show ever created parks and recreation for those of you",
    "start": "292479",
    "end": "297759"
  },
  {
    "text": "who have never watched an episode of parks and rec let me tell you a little bit about ron ron is an old school guy",
    "start": "297759",
    "end": "304240"
  },
  {
    "text": "he's a bit set in his ways he likes his privacy and he likes to stay off the grid now in",
    "start": "304240",
    "end": "310800"
  },
  {
    "text": "season 6 episode 14 ron discovers yelp he loves the idea of",
    "start": "310800",
    "end": "316080"
  },
  {
    "text": "being able to review places he's been however yelp is way too on the grid",
    "start": "316080",
    "end": "321680"
  },
  {
    "text": "for ron so ron uses the internet to look up the physical mailing addresses of where he wants to snail mail his reviews",
    "start": "321680",
    "end": "328960"
  },
  {
    "text": "and then he pulls out his big old typewriter and he starts typing his reviews",
    "start": "328960",
    "end": "334320"
  },
  {
    "text": "now ron writes some pretty great reviews here's one of my favorites dear frozen yogurt you are the celery of",
    "start": "334320",
    "end": "342320"
  },
  {
    "text": "desserts the ice cream or be nothing",
    "start": "342320",
    "end": "347680"
  },
  {
    "text": "zero stars now that's a pretty great review but i",
    "start": "347680",
    "end": "353199"
  },
  {
    "text": "see three three problems with his approach first up snail mail is way slower than posting",
    "start": "353199",
    "end": "359600"
  },
  {
    "text": "the review to yelp where it will be instantly available the businesses he's reviewing may never open",
    "start": "359600",
    "end": "365199"
  },
  {
    "text": "the review because they may just assume it's junk mail and finally no one else will benefit",
    "start": "365199",
    "end": "370319"
  },
  {
    "text": "from the review i don't know about you but i live for these kind of reviews online",
    "start": "370319",
    "end": "376960"
  },
  {
    "text": "ron was inspired by yelp and he saw the value in the technology but he didn't change his old school",
    "start": "376960",
    "end": "382080"
  },
  {
    "text": "mindset in order to really get the value out of it this is what we see sometimes as people",
    "start": "382080",
    "end": "387919"
  },
  {
    "text": "move from tabular databases to document databases they see the value of document databases and they're",
    "start": "387919",
    "end": "394000"
  },
  {
    "text": "inspired by the technology but they bring with them their old mindsets so they don't get the full",
    "start": "394000",
    "end": "399280"
  },
  {
    "text": "value of document databases now i don't want this to happen to you i want to see you be really successful",
    "start": "399280",
    "end": "405520"
  },
  {
    "text": "as you work with document databases so before we dive in let me introduce",
    "start": "405520",
    "end": "410960"
  },
  {
    "text": "myself my name is lauren shafer i took a database course in college that was all about best practices for",
    "start": "410960",
    "end": "417840"
  },
  {
    "text": "relational databases i began my career at ibm where i spent eight years",
    "start": "417840",
    "end": "422960"
  },
  {
    "text": "as a software engineer for a lot of that time i used db2 toward the end of my time",
    "start": "422960",
    "end": "429360"
  },
  {
    "text": "there my team started getting flexibility and what database we wanted to use so i started trying out different nosql",
    "start": "429360",
    "end": "435520"
  },
  {
    "text": "databases to be honest i didn't really get the hype without a doubt no sql databases",
    "start": "435520",
    "end": "442000"
  },
  {
    "text": "were easy to get started using but i brought with me my relational database mindset so i kept thinking",
    "start": "442000",
    "end": "448080"
  },
  {
    "text": "about my data in rows and columns even though i wasn't using rows and columns anymore",
    "start": "448080",
    "end": "453680"
  },
  {
    "text": "it worked but it wasn't great i joined mongodb about a year and a half",
    "start": "453680",
    "end": "458880"
  },
  {
    "text": "ago and i've worked through the process of changing my mindset and how i think about storing data",
    "start": "458880",
    "end": "464639"
  },
  {
    "text": "i'm so happy i did because it's really easy to work with data in the apps that i build now",
    "start": "464639",
    "end": "469840"
  },
  {
    "text": "today i'm going to share with you what i've learned as i've gone on the journey of moving from tables to documents",
    "start": "469840",
    "end": "476240"
  },
  {
    "text": "i would love to connect with you on social you can find me on both twitter and tick tock with the handle",
    "start": "476240",
    "end": "482800"
  },
  {
    "text": "lauren underscore shafer i don't really know what i'm doing on tiktok but i'm having a lot of fun doing it",
    "start": "482800",
    "end": "489599"
  },
  {
    "text": "if you'd like to get a copy of the slides from today you can get you can find the link i've pinned it to",
    "start": "489599",
    "end": "494800"
  },
  {
    "text": "the top of my twitter page all right so today we're going to be",
    "start": "494800",
    "end": "499919"
  },
  {
    "start": "498000",
    "end": "637000"
  },
  {
    "text": "talking about moving from tables to documents when i say tables i mean a tabular or",
    "start": "499919",
    "end": "505360"
  },
  {
    "text": "relational database for example you might have experience using mysql or",
    "start": "505360",
    "end": "510400"
  },
  {
    "text": "oracle we'll dive into what document databases are in just a few minutes",
    "start": "510400",
    "end": "515599"
  },
  {
    "text": "so if you're here i'm going to assume you have experience with relational databases and minimal to no experience with",
    "start": "515599",
    "end": "522080"
  },
  {
    "text": "document databases today we're going to go on a mental",
    "start": "522080",
    "end": "527360"
  },
  {
    "text": "journey from tables to documents i'm going to kick things off by mapping the terms and concepts you're familiar",
    "start": "527360",
    "end": "533120"
  },
  {
    "text": "with in tabular databases to similar terms and concepts in document databases",
    "start": "533120",
    "end": "539040"
  },
  {
    "text": "then i'll talk about the four major advantages of document databases and finally we'll wrap up with three key",
    "start": "539040",
    "end": "545680"
  },
  {
    "text": "ways you need to change your mindset when you move from tables to documents so",
    "start": "545680",
    "end": "551279"
  },
  {
    "text": "let's jump right in with terms and concepts let's talk about documents",
    "start": "551279",
    "end": "558480"
  },
  {
    "text": "no i'm not talking about word documents i'm talking about json documents json",
    "start": "558480",
    "end": "565760"
  },
  {
    "text": "stands for javascript object notation if you've used any of the c family",
    "start": "565760",
    "end": "571279"
  },
  {
    "text": "programming languages such as c c sharp go java javascript php or python",
    "start": "571279",
    "end": "578080"
  },
  {
    "text": "documents will probably feel pretty comfortable to you documents typically store information",
    "start": "578080",
    "end": "583760"
  },
  {
    "text": "about one object as well as any information related to that object so every document",
    "start": "583760",
    "end": "590880"
  },
  {
    "text": "begins and ends with curly braces inside of those curly braces are field",
    "start": "590880",
    "end": "597680"
  },
  {
    "text": "value pairs the great thing about documents is that they can be incredibly rich",
    "start": "597680",
    "end": "603360"
  },
  {
    "text": "values can be a variety of types including strings numbers arrays dates timestamps or even objects",
    "start": "603360",
    "end": "612320"
  },
  {
    "text": "you can have objects within a document and you'll see what that looks like in just a moment",
    "start": "612320",
    "end": "618000"
  },
  {
    "text": "when people talk about document databases they'll often use the term non-relational but that doesn't mean",
    "start": "618000",
    "end": "624160"
  },
  {
    "text": "document databases don't store relationships okay that was a double negative stick with me",
    "start": "624160",
    "end": "630079"
  },
  {
    "text": "document databases store relationships really well it's just different than the way relational databases do",
    "start": "630079",
    "end": "637760"
  },
  {
    "start": "637000",
    "end": "1092000"
  },
  {
    "text": "so let's walk through an example of how you would model the same data in a relational tabular database versus a document",
    "start": "637760",
    "end": "645120"
  },
  {
    "text": "database so let's say we need to store information about a user named leslie",
    "start": "645120",
    "end": "652079"
  },
  {
    "text": "let's begin with our contact information in a relational database we create we will create a table named",
    "start": "652079",
    "end": "658079"
  },
  {
    "text": "users we can create columns for each piece of contact information we need to store",
    "start": "658079",
    "end": "664320"
  },
  {
    "text": "so things like her first name last name cell phone number and city to ensure we have a unique way",
    "start": "664320",
    "end": "671279"
  },
  {
    "text": "to identify each row we'll include an id column",
    "start": "671279",
    "end": "676399"
  },
  {
    "text": "so now let's store that same information in a document we can create a new document for leslie",
    "start": "676800",
    "end": "682560"
  },
  {
    "text": "where we'll add field value pairs for each piece of contact information we need to store",
    "start": "682560",
    "end": "688480"
  },
  {
    "text": "as you can see we have field value pairs for first name last name cell and city",
    "start": "688480",
    "end": "695120"
  },
  {
    "text": "we'll use underscore id to uniquely identify each document we'll store this document in a",
    "start": "695120",
    "end": "701120"
  },
  {
    "text": "collection that we'll call users",
    "start": "701120",
    "end": "705360"
  },
  {
    "text": "now that we've stored leslie's contact information let's store the coordinates of her current location",
    "start": "706880",
    "end": "713519"
  },
  {
    "text": "when using a relational database we'll need to split the latitude and longitude between two columns",
    "start": "713519",
    "end": "720560"
  },
  {
    "text": "document databases support arrays so we can store the latitude and longitude together in a single field we'll call that field",
    "start": "720720",
    "end": "728839"
  },
  {
    "text": "location we're successfully storing leslie's contact information and her current",
    "start": "728839",
    "end": "735360"
  },
  {
    "text": "location so now let's store her hobbies when using a relational database we could",
    "start": "735360",
    "end": "741279"
  },
  {
    "text": "choose to add more columns to the users table however since a single user could have",
    "start": "741279",
    "end": "747839"
  },
  {
    "text": "many hobbies meaning we need to represent a one-to-many relationship we're more likely to create a separate",
    "start": "747839",
    "end": "754160"
  },
  {
    "text": "table just for hobbies each row in the table will contain information about one hobby",
    "start": "754160",
    "end": "760480"
  },
  {
    "text": "for one user when we need to retrieve leslie's hobbies we'll join the users table and our new",
    "start": "760480",
    "end": "767040"
  },
  {
    "text": "hobbies table together since document databases support arrays",
    "start": "767040",
    "end": "773680"
  },
  {
    "text": "we can simply add a new field named hobbies to our existing document for leslie the",
    "start": "773680",
    "end": "779360"
  },
  {
    "text": "array can contain as many or as few hobbies as we need when we need to retrieve likely's",
    "start": "779360",
    "end": "784880"
  },
  {
    "text": "hobbies we don't need to do an expensive join to bring the data together we can simply retrieve her document in",
    "start": "784880",
    "end": "790720"
  },
  {
    "text": "the user's collection",
    "start": "790720",
    "end": "793839"
  },
  {
    "text": "now let's say we also need to store leslie's job history wrong way so far we've used arrays to",
    "start": "797200",
    "end": "805600"
  },
  {
    "text": "store geolocation data and a list of strings arrays",
    "start": "805600",
    "end": "811600"
  },
  {
    "text": "boy i jumped all over the place here we go so just as we did with hobbies we're likely to",
    "start": "812160",
    "end": "817200"
  },
  {
    "text": "create a separate table just for job history information each row in the table will contain",
    "start": "817200",
    "end": "823040"
  },
  {
    "text": "information about one job for one user so far we've used arrays to store geolocation",
    "start": "823040",
    "end": "830079"
  },
  {
    "text": "data and a list of strings arrays can contain values of any type including objects",
    "start": "830079",
    "end": "837199"
  },
  {
    "text": "so let's create an object for each job leslie has held and store those objects in an array",
    "start": "837199",
    "end": "844959"
  },
  {
    "text": "so as you can see we have a job history field that stores an array inside of that array we have an object",
    "start": "844959",
    "end": "851360"
  },
  {
    "text": "for when she was the deputy director an object for when she was a city councilor and an object for when she was",
    "start": "851360",
    "end": "857680"
  },
  {
    "text": "director of the national park services midwest branch",
    "start": "857680",
    "end": "862480"
  },
  {
    "text": "so now that we've decided how we'll store information about our users in both tables and documents let's store information about ron",
    "start": "862720",
    "end": "870560"
  },
  {
    "text": "ron will have almost all of the same information as leslie however ron does his best to stay off",
    "start": "870560",
    "end": "876160"
  },
  {
    "text": "the grid so he will not be storing his location in the system",
    "start": "876160",
    "end": "881680"
  },
  {
    "text": "let's begin by examining how we would store ron's information in the same tables that we used for leslie's",
    "start": "882639",
    "end": "888880"
  },
  {
    "text": "when using a relational database we are required to input a value for every cell in the table",
    "start": "888880",
    "end": "894560"
  },
  {
    "text": "so we'll represent ron's lack of location data with null the problem with using null is",
    "start": "894560",
    "end": "900800"
  },
  {
    "text": "that it's unclear whether the data does not exist or if the data is just unknown so many",
    "start": "900800",
    "end": "906079"
  },
  {
    "text": "people discourage the use of null in document databases we have the option",
    "start": "906079",
    "end": "912720"
  },
  {
    "text": "of representing ron's lack of location data in two ways we can omit the location field from the",
    "start": "912720",
    "end": "918560"
  },
  {
    "text": "document or we can set location to null best practices suggest that we omit the",
    "start": "918560",
    "end": "924720"
  },
  {
    "text": "location field just to save space so you can choose if you want omitted fields and fields set to null",
    "start": "924720",
    "end": "931360"
  },
  {
    "text": "to represent different things in your applications",
    "start": "931360",
    "end": "935759"
  },
  {
    "text": "so ron has some hobbies and some job history so we'll add his information to those tables",
    "start": "936720",
    "end": "943279"
  },
  {
    "text": "and we can add that information as well to his document so right now the structure of ron's",
    "start": "943360",
    "end": "948480"
  },
  {
    "text": "document looks pretty similar to leslie's",
    "start": "948480",
    "end": "954399"
  },
  {
    "text": "so let's say we're feeling pretty good about our data models and decide to launch our apps using them",
    "start": "954399",
    "end": "960639"
  },
  {
    "text": "then we discover we need to store information about a new user her name is lauren burhaug she's a",
    "start": "960639",
    "end": "966959"
  },
  {
    "text": "fourth grade student who ron teaches about government we need to store a lot of the same information about lauren as we did with",
    "start": "966959",
    "end": "974160"
  },
  {
    "text": "leslie and ron her first name last name city and hobbies however lauren doesn't have a cell phone",
    "start": "974160",
    "end": "981120"
  },
  {
    "text": "location data or job history we also discover hey requirements change",
    "start": "981120",
    "end": "987279"
  },
  {
    "text": "we need to store a new piece of information for school all right so let's begin by",
    "start": "987279",
    "end": "993360"
  },
  {
    "text": "storing lauren's information in the tables as they already exist",
    "start": "993360",
    "end": "998319"
  },
  {
    "text": "we can create a new document for lauren and include the data we have for her in it",
    "start": "999199",
    "end": "1005199"
  },
  {
    "text": "so now let's talk about how to store information about lauren's school in our tables we've got two options",
    "start": "1005600",
    "end": "1012240"
  },
  {
    "text": "we can choose to add a column to the existing users table or we could create a whole new table",
    "start": "1012240",
    "end": "1017279"
  },
  {
    "text": "named schools let's say we choose to add a column named school to the users table",
    "start": "1017279",
    "end": "1023759"
  },
  {
    "text": "depending on our access rights to the database we may need to talk to the dba and convince them to add the column",
    "start": "1023759",
    "end": "1031438"
  },
  {
    "text": "maybe we have to do a little begging to get our dba to add the column maybe we have to do a little bribing",
    "start": "1031439",
    "end": "1036798"
  },
  {
    "text": "maybe we bring our dba their favorite donut or maybe we bring our manager along to pressure the dba",
    "start": "1036799",
    "end": "1042720"
  },
  {
    "text": "into agreeing if our dba agrees the database will likely need to be",
    "start": "1042720",
    "end": "1047918"
  },
  {
    "text": "taken down the school column will need to be added no values will be stored in every row in",
    "start": "1047919",
    "end": "1053200"
  },
  {
    "text": "the user's table where a user does not have a school and then the database will need to be brought back up it's totally do",
    "start": "1053200",
    "end": "1059840"
  },
  {
    "text": "doable but it can be a little painful so now let's talk about how to store",
    "start": "1059840",
    "end": "1065919"
  },
  {
    "text": "lauren's school in documents we can simply add a new field named",
    "start": "1065919",
    "end": "1072400"
  },
  {
    "text": "school to lauren's document we do not need to make any modifications to leslie's document",
    "start": "1072400",
    "end": "1078559"
  },
  {
    "text": "or ron's document when we add the new school field to lauren's document",
    "start": "1078559",
    "end": "1083679"
  },
  {
    "text": "document databases have a flexible schema so every document in a collection does not need to have the same fields",
    "start": "1083679",
    "end": "1092480"
  },
  {
    "start": "1092000",
    "end": "1395000"
  },
  {
    "text": "now for those of you with years of experience using relational databases you might be starting to panic at the",
    "start": "1092960",
    "end": "1098720"
  },
  {
    "text": "idea of a flexible schema i know i started panic a little i when i was introduced to the idea",
    "start": "1098720",
    "end": "1105760"
  },
  {
    "text": "but don't panic this flexibility can be hugely valuable as your application's",
    "start": "1105760",
    "end": "1111039"
  },
  {
    "text": "requirements evolve and change also some document databases provide schema validation",
    "start": "1111039",
    "end": "1117520"
  },
  {
    "text": "so you can lock down your schema as much or as little as you'd like when you're ready",
    "start": "1117520",
    "end": "1123840"
  },
  {
    "text": "so now that we're starting to get the idea of how tables and documents are similar and different let's do some",
    "start": "1125120",
    "end": "1131360"
  },
  {
    "text": "explicit term mapping so on the left side of the screen you'll see tabular or relational database terms",
    "start": "1131360",
    "end": "1137600"
  },
  {
    "text": "and on the right side of the screen you'll see document database terms so first up we saw this a bit in our",
    "start": "1137600",
    "end": "1144480"
  },
  {
    "text": "earlier example a row maps to a document or depending on how you've normalized",
    "start": "1144480",
    "end": "1151039"
  },
  {
    "text": "your data rows from multiple tables could map to a single document",
    "start": "1151039",
    "end": "1157200"
  },
  {
    "text": "a column maps roughly to a field now in a relational database groups of",
    "start": "1158000",
    "end": "1164000"
  },
  {
    "text": "rows are stored in tables in a document database groups of documents are stored in collections",
    "start": "1164000",
    "end": "1171360"
  },
  {
    "text": "so tables map to collections the next few terms will probably feel",
    "start": "1171360",
    "end": "1176559"
  },
  {
    "text": "pretty comfortable to those of you with relational database backgrounds as the terminology is basically the same",
    "start": "1176559",
    "end": "1182400"
  },
  {
    "text": "between the two just like you store groups of tables in",
    "start": "1182400",
    "end": "1187440"
  },
  {
    "text": "a relational database you store groups of collections in a document database",
    "start": "1187440",
    "end": "1193840"
  },
  {
    "text": "indexes are fairly similar between the two indexes help speed up your read queries",
    "start": "1194880",
    "end": "1202080"
  },
  {
    "text": "views are pretty similar in both there are a few different ways to handle",
    "start": "1202720",
    "end": "1209600"
  },
  {
    "text": "joins in a document database the general recommendation is that if",
    "start": "1209600",
    "end": "1214960"
  },
  {
    "text": "you have related information that you would put in a separate table in a relational database you should embed that information in a",
    "start": "1214960",
    "end": "1221840"
  },
  {
    "text": "single document when working in a document database the rule of thumb is data that is",
    "start": "1221840",
    "end": "1228240"
  },
  {
    "text": "accessed together should be stored together let me say that again data that is accessed together should be",
    "start": "1228240",
    "end": "1235440"
  },
  {
    "text": "stored together so if you'll be frequently accessing information together",
    "start": "1235440",
    "end": "1240720"
  },
  {
    "text": "that you would have put in separate tables you should likely just embed it in a document depending on the",
    "start": "1240720",
    "end": "1247760"
  },
  {
    "text": "document database you're using there are other options for joins as well",
    "start": "1247760",
    "end": "1252880"
  },
  {
    "text": "some databases support references between the documents similar to how you would use a foreign key",
    "start": "1252880",
    "end": "1259280"
  },
  {
    "text": "some databases also have special operations to support a left outer join",
    "start": "1259280",
    "end": "1264320"
  },
  {
    "text": "now these options for joins get specific to the database you're using so i'm not going to go any deeper into it here",
    "start": "1264320",
    "end": "1269520"
  },
  {
    "text": "today all right finally let's talk about acid",
    "start": "1269520",
    "end": "1274880"
  },
  {
    "text": "transactions transactions group database operations together so they either all succeed",
    "start": "1274880",
    "end": "1281280"
  },
  {
    "text": "or none succeed if you did some research online about relational databases versus",
    "start": "1281280",
    "end": "1286720"
  },
  {
    "text": "document databases before coming here today you probably saw something about document databases not supporting",
    "start": "1286720",
    "end": "1293280"
  },
  {
    "text": "transactions as a major drawback if you care about data integrity and",
    "start": "1293280",
    "end": "1298400"
  },
  {
    "text": "really who doesn't that's a pretty scary sounding drawback",
    "start": "1298400",
    "end": "1303840"
  },
  {
    "text": "some document databases support acid transactions while others do not in relational",
    "start": "1303840",
    "end": "1309200"
  },
  {
    "text": "databases we call these multi-record acid transactions in document databases we call these",
    "start": "1309200",
    "end": "1316120"
  },
  {
    "text": "multi-document asset transactions however when you model your data for",
    "start": "1316120",
    "end": "1321919"
  },
  {
    "text": "document databases you'll find that most of the time you don't actually need to use",
    "start": "1321919",
    "end": "1327200"
  },
  {
    "text": "a transaction i'll explain why that is at the end of this presentation so don't get freaked out if you're",
    "start": "1327200",
    "end": "1333679"
  },
  {
    "text": "looking at drawbacks of document databases and you see no transactions listed",
    "start": "1333679",
    "end": "1339360"
  },
  {
    "text": "some document databases support transactions some don't but chances are good that",
    "start": "1339360",
    "end": "1344799"
  },
  {
    "text": "either way you won't actually need them all right so to wrap up this section i",
    "start": "1344799",
    "end": "1351200"
  },
  {
    "text": "created this term mapping summary for you it's way too much information for you to read now but you can take a screenshot",
    "start": "1351200",
    "end": "1357840"
  },
  {
    "text": "and tweet it or you can print it and hang it up at your desk whatever you need to do but before we go",
    "start": "1357840",
    "end": "1363919"
  },
  {
    "text": "on i want you to internalize the first three term mappings because they'll help you out through the rest of this presentation",
    "start": "1363919",
    "end": "1370000"
  },
  {
    "text": "so a row maps to a document a column maps to a field and a table",
    "start": "1370000",
    "end": "1376799"
  },
  {
    "text": "maps to a collection",
    "start": "1376799",
    "end": "1379760"
  },
  {
    "text": "with water break okay so now that we have an understanding of the terms and concepts let's talk about",
    "start": "1383600",
    "end": "1390799"
  },
  {
    "text": "the four major advantages of document databases",
    "start": "1390799",
    "end": "1396080"
  },
  {
    "start": "1395000",
    "end": "1429000"
  },
  {
    "text": "let's jump back to ron for a moment ron loves his typewriter and unless you convince him otherwise",
    "start": "1396080",
    "end": "1401760"
  },
  {
    "text": "there is no way he's going to change his mindset maybe that's you maybe you've been",
    "start": "1401760",
    "end": "1407679"
  },
  {
    "text": "really successful with relational databases if you're comfortable with them they aren't always the easiest but you've",
    "start": "1407679",
    "end": "1414000"
  },
  {
    "text": "learned how to get the job done so let's answer the question is it worth changing your mindset",
    "start": "1414000",
    "end": "1419840"
  },
  {
    "text": "from tables to documents i'm going to walk you through four advantages to using document databases",
    "start": "1419840",
    "end": "1425679"
  },
  {
    "text": "and these are in no particular order so let's begin by talking about scaling",
    "start": "1425679",
    "end": "1433039"
  },
  {
    "start": "1429000",
    "end": "1560000"
  },
  {
    "text": "let's say ron has an app where he sells the chairs he makes in his workshop ron's using a relational database behind",
    "start": "1433039",
    "end": "1439919"
  },
  {
    "text": "the scenes when one of ron's chairs is nominated for an award from the indiana fine woodworking",
    "start": "1439919",
    "end": "1446400"
  },
  {
    "text": "association orders start pouring in he needs to scale his database",
    "start": "1446400",
    "end": "1452000"
  },
  {
    "text": "now typically relational databases will scale vertically when his database becomes too big for",
    "start": "1452000",
    "end": "1458400"
  },
  {
    "text": "its server he has to migrate it to a larger server",
    "start": "1458400",
    "end": "1463520"
  },
  {
    "text": "when ron's chair appears in bluesh magazine his chairs go viral and he needs to",
    "start": "1463520",
    "end": "1469919"
  },
  {
    "text": "migrate to an even larger server there are a few key problems with vertical scaling",
    "start": "1469919",
    "end": "1476799"
  },
  {
    "text": "large servers tend to be more expensive than two smaller servers with the same total capacity",
    "start": "1476799",
    "end": "1483120"
  },
  {
    "text": "large servers may not even be available due to cost limitations cloud provider limitations or just",
    "start": "1483120",
    "end": "1489600"
  },
  {
    "text": "straight up technology limitations migrating to a larger server may require",
    "start": "1489600",
    "end": "1495200"
  },
  {
    "text": "application downtime all right let's take another example let's say tom has an app for his",
    "start": "1495200",
    "end": "1501279"
  },
  {
    "text": "restaurant tom bistro he uses a document database behind the scenes",
    "start": "1501279",
    "end": "1507919"
  },
  {
    "text": "after a feature in the pawnee journal his restaurant surges in popularity and he needs more space for his database",
    "start": "1507919",
    "end": "1515120"
  },
  {
    "text": "since tom is using a document database he has the flexibility to scale horizontally through sharding",
    "start": "1515120",
    "end": "1522240"
  },
  {
    "text": "sharding is a method for distributing data across multiple servers when his database exceeds the capacity",
    "start": "1522240",
    "end": "1528080"
  },
  {
    "text": "of its current server he can begin sharding and split it over two servers",
    "start": "1528080",
    "end": "1533520"
  },
  {
    "text": "when the shelter in place orders hit pawnee and everyone has to order food online",
    "start": "1533520",
    "end": "1538880"
  },
  {
    "text": "tom can continue to add more servers the advantage is that these new servers don't need to be big expensive machines",
    "start": "1538880",
    "end": "1546000"
  },
  {
    "text": "they can be cheaper commodity hardware plus no downtime is required so with document",
    "start": "1546000",
    "end": "1552559"
  },
  {
    "text": "databases you can scale cheaper at the size your database grows you can scale horizontally",
    "start": "1552559",
    "end": "1559919"
  },
  {
    "start": "1560000",
    "end": "1637000"
  },
  {
    "text": "your queries will typically be faster with document databases let's examine why even in our simple",
    "start": "1560559",
    "end": "1567200"
  },
  {
    "text": "example we worked through earlier where we modeled leslie leslie's data in both tables and documents",
    "start": "1567200",
    "end": "1573200"
  },
  {
    "text": "we saw that your information was spread across three different tables whenever we want a query for leslie's",
    "start": "1573200",
    "end": "1579360"
  },
  {
    "text": "information we'll need to join those three tables back together so in these three small tables the join",
    "start": "1579360",
    "end": "1585279"
  },
  {
    "text": "is going to be very fast however as the tables grow and our queries become more complex",
    "start": "1585279",
    "end": "1591039"
  },
  {
    "text": "joining tables together starts to become very expensive so recall our rule of thumb when",
    "start": "1591039",
    "end": "1596880"
  },
  {
    "text": "modeling data in document databases data that is accessed together should be",
    "start": "1596880",
    "end": "1602000"
  },
  {
    "text": "stored together when you follow this rule of thumb most queries will not require you to join any",
    "start": "1602000",
    "end": "1608080"
  },
  {
    "text": "data together so back to our example if we want to retrieve leslie's information from a",
    "start": "1608080",
    "end": "1613679"
  },
  {
    "text": "document database we can simply query for a single document in the user's collection",
    "start": "1613679",
    "end": "1619600"
  },
  {
    "text": "as a result our query will be very fast as our collections grow larger we don't",
    "start": "1619600",
    "end": "1625120"
  },
  {
    "text": "have to worry about our queries slowing down as long as we are using indexes and continue following our rule of thumb",
    "start": "1625120",
    "end": "1631520"
  },
  {
    "text": "i'll say it again data that is accessed together should be stored together",
    "start": "1631520",
    "end": "1637440"
  },
  {
    "start": "1637000",
    "end": "1725000"
  },
  {
    "text": "all right requirements change it's a regular part of the software development life cycle",
    "start": "1638399",
    "end": "1645200"
  },
  {
    "text": "sometimes we're lucky the changes are simple and require only a few tweaks to the user interface",
    "start": "1645200",
    "end": "1651200"
  },
  {
    "text": "but sometimes changes go all the way down to the database so let's think back to our earlier",
    "start": "1651200",
    "end": "1656640"
  },
  {
    "text": "example where we needed to update our database to store information about lauren's school to add a new school column in our",
    "start": "1656640",
    "end": "1663760"
  },
  {
    "text": "relational database we're going to have to alter the users table executing the alter table command could",
    "start": "1663760",
    "end": "1670159"
  },
  {
    "text": "take a couple of hours depending on how much data is in the table the performance of our application can",
    "start": "1670159",
    "end": "1675679"
  },
  {
    "text": "be decreased while the table is being altered and we may need to schedule down time for our application",
    "start": "1675679",
    "end": "1682080"
  },
  {
    "text": "now let's examine how we can do something similar in document databases",
    "start": "1682080",
    "end": "1687120"
  },
  {
    "text": "when our requirements change and we need to begin storing the name of a user school in a user document",
    "start": "1687120",
    "end": "1692960"
  },
  {
    "text": "we can simply begin doing so we can choose if and when to update existing",
    "start": "1692960",
    "end": "1698240"
  },
  {
    "text": "documents in the collection if we'd implemented schema validation we would have the option of applying the",
    "start": "1698240",
    "end": "1704320"
  },
  {
    "text": "validation to all inserts and updates or only to insert some updates to documents that",
    "start": "1704320",
    "end": "1709600"
  },
  {
    "text": "already meet the schema requirements we would also have the choice of throwing an error or a warning if a",
    "start": "1709600",
    "end": "1715520"
  },
  {
    "text": "validation rule is violated with document databases you can easily change the shape of your data",
    "start": "1715520",
    "end": "1721679"
  },
  {
    "text": "as your app evolves all right finally you can program faster",
    "start": "1721679",
    "end": "1729279"
  },
  {
    "start": "1725000",
    "end": "1826000"
  },
  {
    "text": "now to be honest with you this advantage is one of the biggest surprises to me",
    "start": "1729279",
    "end": "1734320"
  },
  {
    "text": "i figured that it didn't matter what you used as your backend database the code that interacts with it would be",
    "start": "1734320",
    "end": "1739760"
  },
  {
    "text": "basically the same i was wrong documents mapped to data",
    "start": "1739760",
    "end": "1745520"
  },
  {
    "text": "structures in most popular programming languages this sounds like such a simple thing but",
    "start": "1745520",
    "end": "1750960"
  },
  {
    "text": "it makes a huge difference when you're writing code a friend encouraged me to test this out",
    "start": "1750960",
    "end": "1756720"
  },
  {
    "text": "so i did i implemented the code to retrieve and update user profile information",
    "start": "1756720",
    "end": "1762640"
  },
  {
    "text": "now my code has some simplifications in it to enable me to focus on the interactions with the database",
    "start": "1762640",
    "end": "1768399"
  },
  {
    "text": "rather than the user interface i also limited the user profile information to just contact information",
    "start": "1768399",
    "end": "1774720"
  },
  {
    "text": "and hobbies so let's walk through my implementation i used my sql for my relational database",
    "start": "1774720",
    "end": "1781360"
  },
  {
    "text": "and mongodb as my document database i wrote the code in python but don't worry if you're not familiar",
    "start": "1781360",
    "end": "1787520"
  },
  {
    "text": "with python i'll walk you through it step by step the concepts will be applicable no matter what your programming language of",
    "start": "1787520",
    "end": "1793520"
  },
  {
    "text": "choice is and once again i've moved in the wrong direction okay",
    "start": "1793520",
    "end": "1798720"
  },
  {
    "text": "so before i show you the code let's do a quick refresh of the data we're going to retrieve and update",
    "start": "1798720",
    "end": "1804640"
  },
  {
    "text": "on the left we have a table for users and a table for hobbies on the right oh my goodness",
    "start": "1804640",
    "end": "1811600"
  },
  {
    "text": "i'm click happy today on the right we have a document for our",
    "start": "1811600",
    "end": "1816720"
  },
  {
    "text": "user that contains both contact information and",
    "start": "1816720",
    "end": "1821840"
  },
  {
    "text": "all right hopefully you guys got to see that so let's begin with the typical top of",
    "start": "1821840",
    "end": "1828080"
  },
  {
    "text": "the file stuff we'll import what we need connect the database and declare our variables i'm going to",
    "start": "1828080",
    "end": "1835279"
  },
  {
    "text": "simplify things by hard coding the user id of the user whose profile we will be retrieving",
    "start": "1835279",
    "end": "1841039"
  },
  {
    "text": "rather than pulling it dynamically from the front end code now if we look at the mongodb code it's",
    "start": "1841039",
    "end": "1847200"
  },
  {
    "text": "basically the same thing importing connecting and setting the",
    "start": "1847200",
    "end": "1852320"
  },
  {
    "text": "user id variable now that we have our database",
    "start": "1852320",
    "end": "1857760"
  },
  {
    "text": "connections ready let's use them to retrieve our user profile information",
    "start": "1857760",
    "end": "1863279"
  },
  {
    "text": "we'll store the profile information in a python dictionary dictionaries are a common data structure",
    "start": "1863279",
    "end": "1868799"
  },
  {
    "text": "in python and provide an easy way to work with your data so let's begin by implementing the code for mysql",
    "start": "1868799",
    "end": "1876398"
  },
  {
    "text": "since the user profile information is spread across the users table and the hobbies table we'll need to join",
    "start": "1876880",
    "end": "1882240"
  },
  {
    "text": "them in our query so we'll say select everything from the users table",
    "start": "1882240",
    "end": "1888399"
  },
  {
    "text": "left join hobbies we can use prepared statements to ensure our data stays safe",
    "start": "1888399",
    "end": "1894720"
  },
  {
    "text": "we'll set the values in our prepared statement execute the query and fetch our result",
    "start": "1894720",
    "end": "1902000"
  },
  {
    "text": "now because we joined the users and the hobbies table we have a result for each hobby",
    "start": "1903120",
    "end": "1908159"
  },
  {
    "text": "this user has so to retrieve all the hobbies we need to iterate the cursor we'll",
    "start": "1908159",
    "end": "1914399"
  },
  {
    "text": "append each hobby to a new hobbies array and then add the hobbies array to our user",
    "start": "1914399",
    "end": "1919840"
  },
  {
    "text": "dictionary",
    "start": "1919840",
    "end": "1922398"
  },
  {
    "start": "1924000",
    "end": "1962000"
  },
  {
    "text": "now let's implement that same functionality from mongodb since we stored all of the user profile",
    "start": "1924880",
    "end": "1930799"
  },
  {
    "text": "information in the user document we don't need to do any joins we can simply retrieve a single document",
    "start": "1930799",
    "end": "1937600"
  },
  {
    "text": "in our collection so here's where that big advantage that documents mapped to data structures",
    "start": "1937600",
    "end": "1943360"
  },
  {
    "text": "and most popular programming languages comes in comes in i don't have to do any",
    "start": "1943360",
    "end": "1948720"
  },
  {
    "text": "work to get my data into an easy to work with python dictionary i get all the results in a python",
    "start": "1948720",
    "end": "1954159"
  },
  {
    "text": "dictionary automatically and i don't need to manipulate the results i'm done",
    "start": "1954159",
    "end": "1963120"
  },
  {
    "start": "1962000",
    "end": "2000000"
  },
  {
    "text": "now our user dictionaries are now pretty similar in both pieces of code so here you're looking at those dictionaries",
    "start": "1963120",
    "end": "1969679"
  },
  {
    "text": "the one exception is how we're storing our location data but this is a pretty minor difference so",
    "start": "1969679",
    "end": "1976320"
  },
  {
    "text": "now that we've retrieved the user's profile information we'd likely send that information up the stack to the front-end ui code",
    "start": "1976320",
    "end": "1983760"
  },
  {
    "text": "let's take a look at her profile information in our app let's say she discovers she needs to update her profile information",
    "start": "1983760",
    "end": "1991120"
  },
  {
    "text": "so the front-end ui code would send that updated information in a python dictionary back down to the python files we've been",
    "start": "1991120",
    "end": "1997600"
  },
  {
    "text": "writing so let's simulate leslie upton your",
    "start": "1997600",
    "end": "2002720"
  },
  {
    "start": "2000000",
    "end": "2020000"
  },
  {
    "text": "profile information we're just going to manually update the python dictionary ourselves for both mysql and mongodb",
    "start": "2002720",
    "end": "2011039"
  },
  {
    "text": "and these updates are basically the same with once again just that exception of how the location data is being stored",
    "start": "2011039",
    "end": "2019840"
  },
  {
    "start": "2020000",
    "end": "2079000"
  },
  {
    "text": "now that our user dictionary is updated let's push the updated information to our databases so let's begin with",
    "start": "2020799",
    "end": "2027519"
  },
  {
    "text": "mysql first up we need to update the information that is stored in the users",
    "start": "2027519",
    "end": "2032799"
  },
  {
    "text": "table so we'll say update users set first name equal to this string last name equal",
    "start": "2032799",
    "end": "2038880"
  },
  {
    "text": "this string cell equals this string all the way through and we'll set the values of all those",
    "start": "2038880",
    "end": "2045279"
  },
  {
    "text": "strings is this complicated no not really",
    "start": "2045279",
    "end": "2051839"
  },
  {
    "text": "is this error prone yep you have to make sure you get every string in just the right spot",
    "start": "2051839",
    "end": "2058398"
  },
  {
    "text": "now to be honest with you i didn't unit test this code i know bad developer um so it's possible that i",
    "start": "2058399",
    "end": "2064800"
  },
  {
    "text": "made a mistake without realizing it this is a pretty uh simple example so i",
    "start": "2064800",
    "end": "2070000"
  },
  {
    "text": "probably got it right but sql queries can get really long so you can imagine this getting much more",
    "start": "2070000",
    "end": "2076320"
  },
  {
    "text": "complicated next we need to update our hobbies for",
    "start": "2076320",
    "end": "2082000"
  },
  {
    "start": "2079000",
    "end": "2165000"
  },
  {
    "text": "simplicity we'll delete any existing hobbies in the hobbies table for this user and then we'll insert the new hobbies",
    "start": "2082000",
    "end": "2088480"
  },
  {
    "text": "into the hobbies table all right now let's update the user",
    "start": "2088480",
    "end": "2094240"
  },
  {
    "text": "profile information in mongodb since the user's profile information is",
    "start": "2094240",
    "end": "2099520"
  },
  {
    "text": "stored in a single document we only have to do a single update so once again we're going to benefit from",
    "start": "2099520",
    "end": "2105520"
  },
  {
    "text": "documents mapping to data structures in most popular programming languages we can send our user python dictionary",
    "start": "2105520",
    "end": "2112240"
  },
  {
    "text": "when we call update one and that's significantly simplifies our code",
    "start": "2112240",
    "end": "2119280"
  },
  {
    "text": "in this example we wrote 27 lines of code to interact with our data in mysql",
    "start": "2122240",
    "end": "2127839"
  },
  {
    "text": "and two lines of code to interact with our data in mongodb while fewer lines of code is not always",
    "start": "2127839",
    "end": "2134640"
  },
  {
    "text": "indicative of better code in this case we can probably agree that fewer lines of code will likely lead to",
    "start": "2134640",
    "end": "2140880"
  },
  {
    "text": "easier maintenance and fewer bugs now this example was relatively simple with small queries",
    "start": "2140880",
    "end": "2148000"
  },
  {
    "text": "imagine how much bigger the difference would be for larger more complex queries",
    "start": "2148000",
    "end": "2153040"
  },
  {
    "text": "so documents mapping to data structures in most popular programming languages can be a huge advantage in terms of time",
    "start": "2153040",
    "end": "2159440"
  },
  {
    "text": "to write debug and maintain code",
    "start": "2159440",
    "end": "2164960"
  },
  {
    "text": "so is it worth changing your mindset and learning how to work with a document database i mean i think so with the document",
    "start": "2165839",
    "end": "2172720"
  },
  {
    "text": "database you can scale cheaper query faster",
    "start": "2172720",
    "end": "2178640"
  },
  {
    "text": "pivot easier and program faster",
    "start": "2178640",
    "end": "2186400"
  },
  {
    "start": "2186000",
    "end": "2213000"
  },
  {
    "text": "all right so now let's move into our final section and this is our shortest section let's talk about three key ways to",
    "start": "2186400",
    "end": "2193040"
  },
  {
    "text": "change your mindset as you move from tables to documents",
    "start": "2193040",
    "end": "2198560"
  },
  {
    "text": "people who pick up a document database and try to use it as a relational database are the ones who typically struggle and",
    "start": "2198720",
    "end": "2205440"
  },
  {
    "text": "fail you can't keep doing things in the same way so let's talk about three key ways",
    "start": "2205440",
    "end": "2211280"
  },
  {
    "text": "to change your mindset first up embrace document diversity",
    "start": "2211280",
    "end": "2218000"
  },
  {
    "start": "2213000",
    "end": "2262000"
  },
  {
    "text": "let's think back to when we modeled documents for leslie ron and lauren we saw that not all documents in a",
    "start": "2218000",
    "end": "2224800"
  },
  {
    "text": "collection need to have the same fields now for those of us with relational database backgrounds this is going to",
    "start": "2224800",
    "end": "2230800"
  },
  {
    "text": "feel uncomfortable and probably a little odd at first i promise it will be okay embrace",
    "start": "2230800",
    "end": "2238400"
  },
  {
    "text": "document diversity it gives us so much flexibility and power to model our data",
    "start": "2238400",
    "end": "2245200"
  },
  {
    "text": "in fact there's a schema design pattern that specifically focuses on documents not having the same fields it's called",
    "start": "2245200",
    "end": "2251680"
  },
  {
    "text": "the polymorphic pattern we use the polymorphic pattern when documents in a collection are of similar",
    "start": "2251680",
    "end": "2257920"
  },
  {
    "text": "but not identical structures let's take a look at an example that",
    "start": "2257920",
    "end": "2264320"
  },
  {
    "text": "builds on the polymorphic pattern so let's say we decided to keep a list of each user's social",
    "start": "2264320",
    "end": "2270000"
  },
  {
    "text": "media followers inside of each user document lord and leslie don't have very many",
    "start": "2270000",
    "end": "2275520"
  },
  {
    "text": "followers so we could easily list their followers in their documents for example lauren's",
    "start": "2275520",
    "end": "2281520"
  },
  {
    "text": "document might look something like this at the bottom of her document we can see",
    "start": "2281520",
    "end": "2288560"
  },
  {
    "text": "a list of her followers brandon wesley and sierra this approach would",
    "start": "2288560",
    "end": "2295119"
  },
  {
    "text": "likely work for most of our users however since ron built a chair that appeared in the very popular",
    "start": "2295119",
    "end": "2301520"
  },
  {
    "text": "blush magazine ron has millions of followers if we try to list all of his followers",
    "start": "2301520",
    "end": "2307599"
  },
  {
    "text": "in his user document it may exceed a document size limit",
    "start": "2307599",
    "end": "2312720"
  },
  {
    "text": "so the question arises do we want to optimize our schema design for the typical use case",
    "start": "2312720",
    "end": "2318000"
  },
  {
    "text": "where a user has a few hundred followers or the outlier use case where a user has millions of followers",
    "start": "2318000",
    "end": "2325599"
  },
  {
    "text": "we can actually utilize the outlier schema design pattern to solve this problem the outlier pattern allows us to model",
    "start": "2325599",
    "end": "2332400"
  },
  {
    "text": "our data for the typical use case but still handle outlier use cases",
    "start": "2332400",
    "end": "2338240"
  },
  {
    "text": "we can begin modeling ron's document just like lauren's and include a list of followers when we",
    "start": "2338240",
    "end": "2344400"
  },
  {
    "text": "begin to approach the document size limit we can add a new has extras",
    "start": "2344400",
    "end": "2350320"
  },
  {
    "text": "field to ron's document and this field can actually be named anything we'd like",
    "start": "2350320",
    "end": "2356160"
  },
  {
    "text": "then we can create a new document where we will store the rest of ron's followers",
    "start": "2356160",
    "end": "2361200"
  },
  {
    "text": "if ron continues to gain more followers we can actually create another overflow document for him",
    "start": "2361200",
    "end": "2367040"
  },
  {
    "text": "the great thing about the outlier pattern is that we are optimizing for the typical use case but we have the flexibility to handle",
    "start": "2367040",
    "end": "2373760"
  },
  {
    "text": "outliers so embrace document diversity resist the urge to force",
    "start": "2373760",
    "end": "2379599"
  },
  {
    "text": "all of your documents to have identical structures just because it's what you've always done",
    "start": "2379599",
    "end": "2386000"
  },
  {
    "start": "2386000",
    "end": "2415000"
  },
  {
    "text": "second way to change your mindset data that is accessed together should be stored together i know you've",
    "start": "2386720",
    "end": "2392240"
  },
  {
    "text": "heard me say it all day to day thing is you've probably heard over and over that you should normalize your data",
    "start": "2392240",
    "end": "2399599"
  },
  {
    "text": "okay why is that well historically there are a couple different reasons for this one of those is that when relational",
    "start": "2399599",
    "end": "2405760"
  },
  {
    "text": "databases became popular disk space was extremely expensive financially it made sense to reduce data",
    "start": "2405760",
    "end": "2411920"
  },
  {
    "text": "duplication and save disk space as you can see from this chart",
    "start": "2411920",
    "end": "2417119"
  },
  {
    "start": "2415000",
    "end": "2452000"
  },
  {
    "text": "and you probably know from buying flash drives the price of storage has dramatically decreased",
    "start": "2417119",
    "end": "2423440"
  },
  {
    "text": "our phones tablets laptops and flash drives have more storage capacity today",
    "start": "2423440",
    "end": "2428800"
  },
  {
    "text": "than they did even five to ten years ago for a fraction of the cost",
    "start": "2428800",
    "end": "2434400"
  },
  {
    "text": "when was the last time you deleted a photo i mean i can't even remember when i did",
    "start": "2434400",
    "end": "2439599"
  },
  {
    "text": "i keep even the really horribly unflattering photos and i currently back up all my photos",
    "start": "2439599",
    "end": "2446000"
  },
  {
    "text": "external hard drives and multiple cloud services storage is so cheap",
    "start": "2446000",
    "end": "2452560"
  },
  {
    "start": "2452000",
    "end": "2509000"
  },
  {
    "text": "storage has become so cheap that we've actually seen a shift in the cost of software development",
    "start": "2452560",
    "end": "2458160"
  },
  {
    "text": "30 to 40 years ago storage was a huge cost in software development and developers were relatively cheap",
    "start": "2458160",
    "end": "2465200"
  },
  {
    "text": "today the costs have flipped storage is a small cost of software development and developers are expensive",
    "start": "2465200",
    "end": "2472079"
  },
  {
    "text": "instead of optimizing for storage we need to optimize for developers time and productivity as a developer i like",
    "start": "2472079",
    "end": "2479359"
  },
  {
    "text": "this shift right like i want to be able to focus on implementing business logic and iterate quickly",
    "start": "2479359",
    "end": "2484960"
  },
  {
    "text": "those are the things that matter to the business and move developers careers forward i don't want to be dragged down by the",
    "start": "2484960",
    "end": "2491200"
  },
  {
    "text": "data storage specifics so think back to our earlier example where i coded retrieving and updating a",
    "start": "2491200",
    "end": "2497760"
  },
  {
    "text": "user's profile information even in that simple example i was able to write fewer lines of code",
    "start": "2497760",
    "end": "2504000"
  },
  {
    "text": "and move quicker when i used a document database",
    "start": "2504000",
    "end": "2509119"
  },
  {
    "start": "2509000",
    "end": "2538000"
  },
  {
    "text": "so leverage embedding consider how you can use objects",
    "start": "2509119",
    "end": "2515440"
  },
  {
    "text": "arrays and arrays of objects to store your data together resist the",
    "start": "2515440",
    "end": "2522800"
  },
  {
    "text": "temptation to break up your data data that is accessed together should be stored together",
    "start": "2522800",
    "end": "2528640"
  },
  {
    "text": "if you end up repeating data in your database that's okay especially if you won't be updating it",
    "start": "2528640",
    "end": "2534640"
  },
  {
    "text": "very often all right last way to change your",
    "start": "2534640",
    "end": "2539839"
  },
  {
    "start": "2538000",
    "end": "2602000"
  },
  {
    "text": "mindset tread carefully with transactions some document databases support asset",
    "start": "2539839",
    "end": "2546000"
  },
  {
    "text": "transactions while others don't but here's the thing if you're modeling your data for the",
    "start": "2546000",
    "end": "2551839"
  },
  {
    "text": "document model you're probably not going to need a transaction in fact relying on transactions is a bad",
    "start": "2551839",
    "end": "2559359"
  },
  {
    "text": "design smell okay why well it's actually built on our first two points in this section",
    "start": "2559359",
    "end": "2565680"
  },
  {
    "text": "first not all documents need to have the same fields perhaps you're breaking up data between multiple collections because it's not",
    "start": "2565680",
    "end": "2572400"
  },
  {
    "text": "all of identical structure if that's the only reason you've broken the data up you can probably just put it",
    "start": "2572400",
    "end": "2578160"
  },
  {
    "text": "back together in a single collection second data that is accessed together should be stored together",
    "start": "2578160",
    "end": "2584560"
  },
  {
    "text": "if you're following this principle you won't need to use transactions some use cases call for transactions",
    "start": "2584560",
    "end": "2592079"
  },
  {
    "text": "most do not if you find yourself frequently using transactions take a look at your data",
    "start": "2592079",
    "end": "2597280"
  },
  {
    "text": "model and consider if you need to restructure it",
    "start": "2597280",
    "end": "2601838"
  },
  {
    "start": "2602000",
    "end": "2643000"
  },
  {
    "text": "alright so to summarize the three key ways to change your mindset embrace document diversity data that is",
    "start": "2602480",
    "end": "2610079"
  },
  {
    "text": "accessed together should be stored together and tread carefully with trend with",
    "start": "2610079",
    "end": "2617520"
  },
  {
    "text": "transactions all right let's wrap up this presentation so today we went on a",
    "start": "2618839",
    "end": "2624079"
  },
  {
    "text": "mental journey from tables to documents we began by mapping terms and concepts",
    "start": "2624079",
    "end": "2629680"
  },
  {
    "text": "from tables to documents the three that are most important are those first three",
    "start": "2629680",
    "end": "2635200"
  },
  {
    "text": "rows mapped to documents columns mapped to fields and tables mapped to collections",
    "start": "2635200",
    "end": "2643040"
  },
  {
    "start": "2643000",
    "end": "2698000"
  },
  {
    "text": "then we talked about the four major advantages of documents you can scale cheaper because you can",
    "start": "2643920",
    "end": "2650000"
  },
  {
    "text": "scale horizontally you can query faster because you aren't having to do expensive joins to bring",
    "start": "2650000",
    "end": "2656079"
  },
  {
    "text": "your data together you can pivot easier because you have a flexible schema",
    "start": "2656079",
    "end": "2662640"
  },
  {
    "text": "and finally you can program faster because documents map to objects in most popular programming languages",
    "start": "2662640",
    "end": "2670079"
  },
  {
    "text": "and then we wrap things up with the three key ways you need to change your mindset so first embrace document diversity not",
    "start": "2670319",
    "end": "2678079"
  },
  {
    "text": "all of your documents need to be the same shape and that's perfectly okay",
    "start": "2678079",
    "end": "2684079"
  },
  {
    "text": "second data that is accessed together should be stored together",
    "start": "2684079",
    "end": "2689119"
  },
  {
    "text": "third tread carefully with transactions relying on transactions when you're using a document database",
    "start": "2689200",
    "end": "2695520"
  },
  {
    "text": "is a bad design smell so if i had to sum up this presentation in one idea",
    "start": "2695520",
    "end": "2701119"
  },
  {
    "start": "2698000",
    "end": "2718000"
  },
  {
    "text": "i would say this don't be around wisconsin i mean in this particular case because ron is awake",
    "start": "2701119",
    "end": "2706640"
  },
  {
    "text": "amazing in so many other ways but don't be wrong swanson change your mindset and get the",
    "start": "2706640",
    "end": "2713119"
  },
  {
    "text": "full value of document databases",
    "start": "2713119",
    "end": "2718240"
  },
  {
    "start": "2718000",
    "end": "2736000"
  },
  {
    "text": "at the end of this presentation i've included a list of additional resources the top resource listed here is a blog",
    "start": "2718240",
    "end": "2725040"
  },
  {
    "text": "series that i wrote that has content very similar to what i presented today but it's specific to mongodb",
    "start": "2725040",
    "end": "2731200"
  },
  {
    "text": "if later you want to reference the material i covered that's a great place to start",
    "start": "2731200",
    "end": "2736640"
  },
  {
    "start": "2736000",
    "end": "2770000"
  },
  {
    "text": "one of the best ways to learn new technology is by trying it out mongodb atlas is a fully managed",
    "start": "2736800",
    "end": "2742560"
  },
  {
    "text": "document database service it's got a perpetually free tier that is great for learning if you'd like to try",
    "start": "2742560",
    "end": "2747680"
  },
  {
    "text": "it out if you hop back a slide i have a link to a quick start blog series that will walk",
    "start": "2747680",
    "end": "2753040"
  },
  {
    "text": "you through trying it out as a reminder if you'd like to get a copy of my slides you can check out my",
    "start": "2753040",
    "end": "2758800"
  },
  {
    "text": "twitter page i'm lauren underscore shafer alright that is all i have for you today",
    "start": "2758800",
    "end": "2765040"
  },
  {
    "text": "thank you so much for coming i hope you enjoy trying out document databases thank you",
    "start": "2765040",
    "end": "2772640"
  }
]