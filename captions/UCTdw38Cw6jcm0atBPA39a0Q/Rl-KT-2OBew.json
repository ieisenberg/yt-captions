[
  {
    "start": "0",
    "end": "93000"
  },
  {
    "text": "all right hello everyone my name is Barrett this is a talk about that script",
    "start": "10460",
    "end": "17520"
  },
  {
    "text": "how many people here are familiar with bad script can raise your hands",
    "start": "17520",
    "end": "24230"
  },
  {
    "text": "excellent there are a few that aren't familiar this is an intermediate level",
    "start": "24230",
    "end": "29400"
  },
  {
    "text": "talk so I will try to get the beginners on board as much as possible one thing",
    "start": "29400",
    "end": "36090"
  },
  {
    "text": "to note about that script is that it is all about just JavaScript it is",
    "start": "36090",
    "end": "41280"
  },
  {
    "text": "essentially the JavaScript that runs in the browsers today plus upcoming JavaScript standards followed by",
    "start": "41280",
    "end": "47519"
  },
  {
    "text": "additional syntax specifically for type annotations it is not Microsoft but it's",
    "start": "47519",
    "end": "56010"
  },
  {
    "text": "the new an open-source Microsoft they really really doing some pretty excellent stuff and the real objective",
    "start": "56010",
    "end": "64198"
  },
  {
    "text": "of the typescript team has always been just to help you write better JavaScript it starts and end ends with JavaScript",
    "start": "64199",
    "end": "72810"
  },
  {
    "text": "so let me just jump with the jump into the demos so here I have a JavaScript",
    "start": "72810",
    "end": "82590"
  },
  {
    "text": "file if I can stop the slides",
    "start": "82590",
    "end": "93679"
  },
  {
    "start": "93000",
    "end": "340000"
  },
  {
    "text": "cool anybody see any issues in this",
    "start": "95240",
    "end": "100880"
  },
  {
    "text": "simple piece of JavaScript code like very drastic definitely wrong it's going",
    "start": "100880",
    "end": "108170"
  },
  {
    "text": "to give a type error issues that's pretty much the experience with mode",
    "start": "108170",
    "end": "114380"
  },
  {
    "text": "most JavaScript code out there you just assume that it's going to function and",
    "start": "114380",
    "end": "119869"
  },
  {
    "text": "that's where that script is designed to help you reason better about JavaScript",
    "start": "119869",
    "end": "127100"
  },
  {
    "text": "so if I just paste in that exact same JavaScript code into a taffeta faux fly script has actually found a number of",
    "start": "127100",
    "end": "133100"
  },
  {
    "text": "issues in this code base even without any special touch get specific syntax one of them is over here you want to",
    "start": "133100",
    "end": "141140"
  },
  {
    "text": "take a guess at what's wrong parse int takes a string and someone's passing in",
    "start": "141140",
    "end": "151400"
  },
  {
    "text": "and HTML element I don't know I can just go something like this or whatever get",
    "start": "151400",
    "end": "158330"
  },
  {
    "text": "some text from the dorm and then pass input function not be a type error there's an error in this line as well",
    "start": "158330",
    "end": "164540"
  },
  {
    "text": "the touch crib has identified anybody know what that is so delivery method is a function that",
    "start": "164540",
    "end": "171260"
  },
  {
    "text": "returns the string and someone's doing this it's a very subtle thing and it's",
    "start": "171260",
    "end": "179180"
  },
  {
    "text": "easy to miss in code reviews and that's again something that actually can automatically capture for you what",
    "start": "179180",
    "end": "185569"
  },
  {
    "text": "was happening there was there was only one pipe instead of two pipes and that's the bitwise or and not the or or which",
    "start": "185569",
    "end": "193519"
  },
  {
    "text": "is the standard way that JavaScript terms provide default values so that",
    "start": "193519",
    "end": "199459"
  },
  {
    "text": "error is fixed now have a look at this send update function there's a comment",
    "start": "199459",
    "end": "205069"
  },
  {
    "text": "here an email address or an array of email addresses to ship to like that",
    "start": "205069",
    "end": "211250"
  },
  {
    "text": "that's something that's really well represented as",
    "start": "211250",
    "end": "216310"
  },
  {
    "text": "type definition and now the other user",
    "start": "221349",
    "end": "229129"
  },
  {
    "text": "doesn't actually have to necessarily read the comments you can actually just hover over it you get autocomplete and",
    "start": "229129",
    "end": "234190"
  },
  {
    "text": "it's actually finding a bug over here as well the person who wrote this code was probably a beginner they were like if",
    "start": "234190",
    "end": "240290"
  },
  {
    "text": "email addressed at length basically what they were trying to do is if it's an array then send an email for each",
    "start": "240290",
    "end": "246079"
  },
  {
    "text": "element in the in the array otherwise just call it with the first value and that length is something that exists on",
    "start": "246079",
    "end": "252230"
  },
  {
    "text": "a string as well as an array so this discriminator is actually not valid the proper way to discriminate one of the",
    "start": "252230",
    "end": "258680"
  },
  {
    "text": "ways at least is to use array dot is array so we had we had an email address",
    "start": "258680",
    "end": "266870"
  },
  {
    "text": "which can be a string got an array of strings as soon as you that touches it wraps chip has actually figured out that",
    "start": "266870",
    "end": "273590"
  },
  {
    "text": "within this if condition email address is going to be an array within the elf email address is going to be a string so",
    "start": "273590",
    "end": "280310"
  },
  {
    "text": "that she understands a lot about the JavaScript runtime that's by default present in browsers and JavaScript",
    "start": "280310",
    "end": "287680"
  },
  {
    "text": "environments and this is like I just went in the definition of is array like",
    "start": "287680",
    "end": "294530"
  },
  {
    "text": "this is all the stuff that you'd have to keep in your head I can keep scrolling for hours it's not good but that ship",
    "start": "294530",
    "end": "301430"
  },
  {
    "text": "can provide you autocomplete and intelligence and fix very simple issues",
    "start": "301430",
    "end": "306710"
  },
  {
    "text": "that you might miss in your code base just by using standard JavaScript",
    "start": "306710",
    "end": "312699"
  },
  {
    "text": "there's an error over here as well anybody want to take a guess what they did wrong over here they have the values",
    "start": "312699",
    "end": "320449"
  },
  {
    "text": "for so for each email address send an email they have the index as the first and value of the second well actually in",
    "start": "320449",
    "end": "328310"
  },
  {
    "text": "JavaScript for each returns the call that gets the value as the first argument and index is the second we're",
    "start": "328310",
    "end": "335090"
  },
  {
    "text": "not using the index I can actually just leave there and that error is gone as well so just to JavaScript file but in lieu",
    "start": "335090",
    "end": "342380"
  },
  {
    "text": "TS file it finds issues for you so that's pretty much an introduction to touch get so the rescue team has",
    "start": "342380",
    "end": "350270"
  },
  {
    "text": "actually been pretty busy they are and lots of features and some of these",
    "start": "350270",
    "end": "355639"
  },
  {
    "text": "features aren't even covered in the change lockers what they do is they just",
    "start": "355639",
    "end": "361509"
  },
  {
    "text": "understand more of the JavaScript and find more patterns that are causing bugs",
    "start": "361509",
    "end": "367610"
  },
  {
    "text": "and fix them for you without beating a drum about it and it's they doing an",
    "start": "367610",
    "end": "373819"
  },
  {
    "text": "excellent job one of the features that came out in the last year was a large yes so this has been a point of",
    "start": "373819",
    "end": "385249"
  },
  {
    "text": "contention between people that want to use to escape and don't want to use typescript that I just want to have a",
    "start": "385249",
    "end": "390709"
  },
  {
    "text": "J's file I don't want to have a tester file with the additional pressure syntax well you can migrate your JavaScript",
    "start": "390709",
    "end": "396469"
  },
  {
    "text": "project to attach three projects simply by adding the largest compiler flag to",
    "start": "396469",
    "end": "403459"
  },
  {
    "text": "your tight ship config options and as soon as you do that let's skip and",
    "start": "403459",
    "end": "408949"
  },
  {
    "text": "understand J's files and it can actually transfer them to whatever target you might specify for example over here I've",
    "start": "408949",
    "end": "415729"
  },
  {
    "text": "specified that I wanted transpose to es5 so this es6 arrow is going to get",
    "start": "415729",
    "end": "423489"
  },
  {
    "text": "transpose into just an ef5 function we",
    "start": "423489",
    "end": "433159"
  },
  {
    "text": "both in DC and you can see that that script was doing that on the file",
    "start": "433159",
    "end": "438349"
  },
  {
    "text": "similarly Const and let you can transfer all them away as well as your talked in years 5 and whatever so you can actually",
    "start": "438349",
    "end": "444139"
  },
  {
    "text": "use that script on a pure JavaScript project by just writing JavaScript and",
    "start": "444139",
    "end": "450349"
  },
  {
    "text": "you can cross use it as just a transpiler without any type checking but they've gone a step further now with a",
    "start": "450349",
    "end": "457579"
  },
  {
    "text": "large es they always had syntax errors or syntax errors however type errors",
    "start": "457579",
    "end": "465709"
  },
  {
    "text": "were not checked because your existing JavaScript code base might be too",
    "start": "465709",
    "end": "471019"
  },
  {
    "text": "massive you have external dependencies like this external dependency is changing the bar member of foo to be",
    "start": "471019",
    "end": "478639"
  },
  {
    "text": "looks like a string because it's got the trim method magically which is not something that exists on a number",
    "start": "478639",
    "end": "486699"
  },
  {
    "text": "they've added this option checked yes so",
    "start": "487070",
    "end": "495530"
  },
  {
    "text": "we just allow Jess you don't have to worry about immediately migrating all your JS to type safety it would have",
    "start": "495530",
    "end": "502760"
  },
  {
    "text": "just worked but now they were an option checked yes which means that you can actually continue to use just dot J's",
    "start": "502760",
    "end": "510020"
  },
  {
    "text": "files and that second type check them for you as well for example over here is starting to complain that cannot find",
    "start": "510020",
    "end": "515240"
  },
  {
    "text": "this external thing cream is not",
    "start": "515240",
    "end": "520250"
  },
  {
    "text": "something that exists on a number so now",
    "start": "520250",
    "end": "525650"
  },
  {
    "text": "we understand that moving your Jas to TS immediately might be a lot of work for",
    "start": "525650",
    "end": "530900"
  },
  {
    "text": "you so another feature that they've added in the last year is quick fixes and one of those quick fixes is disabled",
    "start": "530900",
    "end": "538820"
  },
  {
    "text": "type checking for this file so with checked yes there's a comment now on the first line TS no check which means that",
    "start": "538820",
    "end": "545510"
  },
  {
    "text": "this file is not type checked anymore and those errors go with you can yes so",
    "start": "545510",
    "end": "558470"
  },
  {
    "text": "the question is couldn't you have done this with just an any annotation you cannot have any auditions in a GS file",
    "start": "558470",
    "end": "565340"
  },
  {
    "text": "so allow Jess you have a J's file with J syntax so you're not allowed to use any extra syntax for example bar is of type",
    "start": "565340",
    "end": "572450"
  },
  {
    "text": "any that's a syntax error it's not a stretch gate its energy as well so",
    "start": "572450",
    "end": "579130"
  },
  {
    "text": "because you cannot have type annotations in a J's file you have to explicitly by",
    "start": "579130",
    "end": "587660"
  },
  {
    "text": "into check J's and then you can ignore individual errors like I've just done",
    "start": "587660",
    "end": "593330"
  },
  {
    "text": "for this external dependency or as I did previously for the whole file so that is",
    "start": "593330",
    "end": "602200"
  },
  {
    "start": "600000",
    "end": "900000"
  },
  {
    "text": "checked yes",
    "start": "602200",
    "end": "605410"
  },
  {
    "text": "now this is one of the best features in my opinion that have come out in the",
    "start": "607300",
    "end": "613150"
  },
  {
    "text": "latest version of typescript which is a single bit like I said it's a new",
    "start": "613150",
    "end": "618830"
  },
  {
    "text": "Microsoft they're really all about the open source and they really want to help",
    "start": "618830",
    "end": "624230"
  },
  {
    "text": "JavaScript developers and async/await is something that's made into the ES spec because of efforts of people within",
    "start": "624230",
    "end": "630620"
  },
  {
    "text": "Microsoft it is from C sharp so for a language that is purely about async",
    "start": "630620",
    "end": "637580"
  },
  {
    "text": "programming which is what javascript is a single thread can do 100 things in parallel it's fairly painful to do async",
    "start": "637580",
    "end": "645680"
  },
  {
    "text": "programming so if I have a function that I don't know wants to do some work after one second then two seconds and three",
    "start": "645680",
    "end": "651830"
  },
  {
    "text": "seconds I would write it as well set timeout do some work just log out one",
    "start": "651830",
    "end": "661970"
  },
  {
    "text": "thing for now and do it in one second",
    "start": "661970",
    "end": "670730"
  },
  {
    "text": "and then I want to do some more work after two seconds and after three seconds and this is where it gets a bit",
    "start": "670730",
    "end": "676750"
  },
  {
    "text": "funky do some more work after two seconds then do some more work after",
    "start": "676750",
    "end": "685160"
  },
  {
    "text": "three seconds and you can see that it does work but it gets fairly painful and",
    "start": "685160",
    "end": "693470"
  },
  {
    "text": "many throw an error checking and all those other requirements that we have with readable code callbacks aren't",
    "start": "693470",
    "end": "699020"
  },
  {
    "text": "particularly ideally suited for that so people have come up with a better put pattern for this in es5 as well so what",
    "start": "699020",
    "end": "705320"
  },
  {
    "text": "you can actually do is create a delay function that takes some milliseconds",
    "start": "705320",
    "end": "715270"
  },
  {
    "text": "returns a new promise oops and like I don't need to actually",
    "start": "715270",
    "end": "723110"
  },
  {
    "text": "use any type of additions if I don't want to attach it I'm not annotating Billy second is a",
    "start": "723110",
    "end": "728660"
  },
  {
    "text": "number I'm not interesting that promise is going to return a promise of void in this case so all I'm simply going to do",
    "start": "728660",
    "end": "737290"
  },
  {
    "text": "is promised constructor gets passed in the",
    "start": "737290",
    "end": "744140"
  },
  {
    "text": "resolve so I'm going to call resolve after the specified milliseconds you",
    "start": "744140",
    "end": "752000"
  },
  {
    "text": "know what you can do is instead of all these funky callbacks you can just do delay for one second then go ahead and",
    "start": "752000",
    "end": "761860"
  },
  {
    "text": "log out one second then delay for one",
    "start": "761860",
    "end": "772460"
  },
  {
    "text": "more second and repeat so two second and",
    "start": "772460",
    "end": "783650"
  },
  {
    "text": "then three second of course I forgot to do you love type scripts it wanted that",
    "start": "783650",
    "end": "790610"
  },
  {
    "text": "error out for me didn't need help from the crowd supposed to pass in a function I'm passing in a void too dense",
    "start": "790610",
    "end": "799120"
  },
  {
    "text": "it's that fixed and of course it does",
    "start": "799120",
    "end": "806390"
  },
  {
    "text": "work but then it's still a lot of functions but you have to write and then",
    "start": "806390",
    "end": "813800"
  },
  {
    "text": "you have to think about okay so code that's going to execute over here it's going to execute before this gets called",
    "start": "813800",
    "end": "820210"
  },
  {
    "text": "stuff like that so thread should cream pour in brought in two es and as well as",
    "start": "820210",
    "end": "827060"
  },
  {
    "text": "in touch script async functions so now what you can simply do is await anything",
    "start": "827060",
    "end": "832910"
  },
  {
    "text": "that returns a promise and now the code that's going to be present over here it's not going to execute till this",
    "start": "832910",
    "end": "840350"
  },
  {
    "text": "delay the promise returned badly resolved so now I can actually simply do",
    "start": "840350",
    "end": "845530"
  },
  {
    "text": "plug out one second to second and three",
    "start": "845530",
    "end": "854150"
  },
  {
    "text": "seconds and touch again transpile it down to es5",
    "start": "854150",
    "end": "860400"
  },
  {
    "text": "and you can run it forever so that's actually one of the best features that have come out in the last",
    "start": "860400",
    "end": "867690"
  },
  {
    "text": "year any questions about that yes yes",
    "start": "867690",
    "end": "878690"
  },
  {
    "text": "really yes exactly so a lot of the patterns that you have in the",
    "start": "880850",
    "end": "887280"
  },
  {
    "text": "synchronous programming they just work naturally with asynchronous programming with async of it as well",
    "start": "887280",
    "end": "893150"
  },
  {
    "text": "okay so generators well generators is another one of those",
    "start": "893150",
    "end": "898320"
  },
  {
    "text": "features that are that's really really",
    "start": "898320",
    "end": "904980"
  },
  {
    "start": "900000",
    "end": "1155000"
  },
  {
    "text": "cool it allows very powerful patterns for example so ienumerable and use for people in c-sharp that have",
    "start": "904980",
    "end": "911880"
  },
  {
    "text": "used that it's the same thing not same but similar so what you can actually do",
    "start": "911880",
    "end": "917130"
  },
  {
    "text": "with generators is for example generate an infinite list for example of a list of whole numbers so I can go ahead and",
    "start": "917130",
    "end": "924870"
  },
  {
    "text": "create a function that is going to yield",
    "start": "924870",
    "end": "931500"
  },
  {
    "text": "one by one",
    "start": "931500",
    "end": "934400"
  },
  {
    "text": "a value from the hula misete and there's",
    "start": "942329",
    "end": "948720"
  },
  {
    "text": "no touch script specific magical hit but that scripts already figured out what this thing is going to be it's going to",
    "start": "948720",
    "end": "954389"
  },
  {
    "text": "be something that returns an iterable iterator of numbers so you got acting I",
    "start": "954389",
    "end": "960600"
  },
  {
    "text": "can actually use it with a for a loop get me all the whole numbers one by one",
    "start": "960600",
    "end": "966509"
  },
  {
    "text": "so this is lazy attrition if I wanted to I trait all the whole numbers without",
    "start": "966509",
    "end": "973379"
  },
  {
    "text": "this I'd have to keep state and a lot of other funky stuff that I simply don't",
    "start": "973379",
    "end": "979350"
  },
  {
    "text": "have to deal with anymore because of generators so I can move through the results of whole one by one and let's",
    "start": "979350",
    "end": "985439"
  },
  {
    "text": "just terminate at some things like that",
    "start": "985439",
    "end": "991819"
  },
  {
    "text": "then just break the for loop otherwise",
    "start": "991819",
    "end": "998040"
  },
  {
    "text": "simply just log out the item and no surprises no prizes for guessing it's",
    "start": "998040",
    "end": "1005989"
  },
  {
    "text": "going to be items that are being lazily returned by the whole number function",
    "start": "1005989",
    "end": "1013899"
  },
  {
    "text": "there are a lot of programming patterns that become much easier with generators",
    "start": "1013899",
    "end": "1021669"
  },
  {
    "text": "for example I have a linked list over here for people that know data structures linked lists just each item",
    "start": "1021669",
    "end": "1027319"
  },
  {
    "text": "has appointed to the next and a value each node has a value so that's a linked",
    "start": "1027319",
    "end": "1032630"
  },
  {
    "text": "list node and here I have a linked list that you can push stuff into I want to",
    "start": "1032630",
    "end": "1038839"
  },
  {
    "text": "loop through all of the values in the linked list knowing that someone might be iterating",
    "start": "1038839",
    "end": "1044659"
  },
  {
    "text": "through the linkage items in parallel some that the iterator that I have to",
    "start": "1044659",
    "end": "1051860"
  },
  {
    "text": "return from a potential various function lazily would be well complex but with",
    "start": "1051860",
    "end": "1058760"
  },
  {
    "text": "addresses actually quite easy so I start with that I don't know current is equal to this door head while we still have current",
    "start": "1058760",
    "end": "1068389"
  },
  {
    "text": "value I can simply go ahead and give the current value",
    "start": "1068389",
    "end": "1074960"
  },
  {
    "text": "and then for the next operation I would simply move this to the current",
    "start": "1074960",
    "end": "1082340"
  },
  {
    "text": "drop next and now I can actually go ahead and again use far off to lazily I",
    "start": "1082340",
    "end": "1091820"
  },
  {
    "text": "prayed all the items from this list of values just log on so if I demo this farm i",
    "start": "1091820",
    "end": "1101920"
  },
  {
    "text": "spec to see one two three four one more trick with I tray tables if you actually",
    "start": "1101920",
    "end": "1108440"
  },
  {
    "text": "want to make them in array you can just use raid or from and it'll run through",
    "start": "1108440",
    "end": "1120650"
  },
  {
    "text": "the right raishin and collect the results into an array and give that back to you so this should be an array of one",
    "start": "1120650",
    "end": "1126530"
  },
  {
    "text": "two three four and that works as expected so very complex patterns are",
    "start": "1126530",
    "end": "1132800"
  },
  {
    "text": "now fairly simple thanks to you generators and touch it understands them and can transfer them to es5 any",
    "start": "1132800",
    "end": "1140090"
  },
  {
    "text": "questions about that",
    "start": "1140090",
    "end": "1143470"
  },
  {
    "text": "great let's junction this one",
    "start": "1145990",
    "end": "1151179"
  },
  {
    "text": "spread is another thing that's actually I use quite a lot touch tip can",
    "start": "1151740",
    "end": "1157480"
  },
  {
    "start": "1155000",
    "end": "1290000"
  },
  {
    "text": "transpire that and understand that for example if I have an object that has a I",
    "start": "1157480",
    "end": "1163330"
  },
  {
    "text": "don't know some number B some number and then I have another object that has some",
    "start": "1163330",
    "end": "1168610"
  },
  {
    "text": "remember see if I wanted to merge these two objects into a third object I could",
    "start": "1168610",
    "end": "1174700"
  },
  {
    "text": "look through the keys create kidney object go to the keys and put each key value into the new object and done that",
    "start": "1174700",
    "end": "1180820"
  },
  {
    "text": "now I can even use an object spread and create a new object simply by spread all",
    "start": "1180820",
    "end": "1187000"
  },
  {
    "text": "the stuff from foo and spread all the stuff from Bob now to get thing about",
    "start": "1187000",
    "end": "1200710"
  },
  {
    "text": "using touch script for this is that it actually understands what's going on over here as well says figured out that",
    "start": "1200710",
    "end": "1205810"
  },
  {
    "text": "bears is something that has all the members of foo as well as all the never self bar in there so best of ABC it's",
    "start": "1205810",
    "end": "1216400"
  },
  {
    "text": "all in there you can also take out",
    "start": "1216400",
    "end": "1221860"
  },
  {
    "text": "values from an object with a rest destructuring so you could always do",
    "start": "1221860",
    "end": "1227110"
  },
  {
    "text": "something like not always but for a while you've been able to do something like this take out C from this object where's and",
    "start": "1227110",
    "end": "1234700"
  },
  {
    "text": "again since the start scape there are absolutely no annotations on the file right now but it's figured out that C is",
    "start": "1234700",
    "end": "1240400"
  },
  {
    "text": "something that is of type number because this was of type number you can move",
    "start": "1240400",
    "end": "1248380"
  },
  {
    "text": "everything else other than C into whatever you want to call it and again",
    "start": "1248380",
    "end": "1255640"
  },
  {
    "text": "that's just going to figure out that okay so you've taken C out into this D structured variable and everything else",
    "start": "1255640",
    "end": "1262660"
  },
  {
    "text": "other than C has gone into this variable over here something like this is create",
    "start": "1262660",
    "end": "1270520"
  },
  {
    "text": "with react and spreads and when you put when you get one props and you want to pass a different set of props to your",
    "start": "1270520",
    "end": "1277330"
  },
  {
    "text": "cell component stuff like that transcript understands that don't need any annotation just works any questions",
    "start": "1277330",
    "end": "1284320"
  },
  {
    "text": "about that cool",
    "start": "1284320",
    "end": "1289420"
  },
  {
    "text": "the next one is the prototypes the touch step now also has little types it's",
    "start": "1289420",
    "end": "1295770"
  },
  {
    "start": "1290000",
    "end": "1735000"
  },
  {
    "text": "fairly simple so you've always been able to do Fuu is something that is of type",
    "start": "1295770",
    "end": "1305620"
  },
  {
    "text": "string it can accept anything within the",
    "start": "1305620",
    "end": "1311200"
  },
  {
    "text": "string domain but not that script even has little type so you can actually say that just the literal string hello is",
    "start": "1311200",
    "end": "1320200"
  },
  {
    "text": "allowed for Fuu and now he'd try to assign some other string to Fuu that's",
    "start": "1320200",
    "end": "1326020"
  },
  {
    "text": "an error the only string that can be allowed is the exact string hello and",
    "start": "1326020",
    "end": "1332710"
  },
  {
    "text": "you'll actually see that that does autocomplete as well because it knows that these are all the allowed values so really fancy stuff kudos that I should",
    "start": "1332710",
    "end": "1340630"
  },
  {
    "text": "deem so that that's fine but you would normally like if you just have one value",
    "start": "1340630",
    "end": "1345940"
  },
  {
    "text": "it wouldn't be particularly useful well that ship has had union types for a while and I can have literals with",
    "start": "1345940",
    "end": "1357430"
  },
  {
    "text": "unions as well so for example that boo is something so variable that can accept",
    "start": "1357430",
    "end": "1362620"
  },
  {
    "text": "two values true or false so boo is equal to true is allowed boo is equal to false",
    "start": "1362620",
    "end": "1371590"
  },
  {
    "text": "is allowed boo is equal to anything else is an error I can even so normally you",
    "start": "1371590",
    "end": "1381040"
  },
  {
    "text": "wouldn't annotate who like this there's a special type for that anyways boolean",
    "start": "1381040",
    "end": "1387420"
  },
  {
    "text": "but you can even do stuff like okay so sometimes it's really great for mapping",
    "start": "1387420",
    "end": "1393910"
  },
  {
    "text": "server responses and existing ApS out there some ApS have something like it is",
    "start": "1393910",
    "end": "1399550"
  },
  {
    "text": "valid or invalid or invalid with this reason so you can actually map that in its fill that payment field is one of",
    "start": "1399550",
    "end": "1407710"
  },
  {
    "text": "the valid values see this is really something that can have two false or payment fields",
    "start": "1407710",
    "end": "1414010"
  },
  {
    "text": "anything else is not in the Union and therefore cannot be assigned so that shipping has had minions for a",
    "start": "1414010",
    "end": "1420550"
  },
  {
    "text": "while but now it's got literals as well so much more powerful what's great about when you combine unions and literals is",
    "start": "1420550",
    "end": "1433000"
  },
  {
    "text": "you actually get discriminated unions as well so for those that are familiar",
    "start": "1433000",
    "end": "1440550"
  },
  {
    "text": "discriminately the Union Union is basically a union that you can discriminate over basically identify",
    "start": "1440550",
    "end": "1446650"
  },
  {
    "text": "which member this particular item belongs to for example over here I have",
    "start": "1446650",
    "end": "1452170"
  },
  {
    "text": "a type square that has a kind of literal square and a type rectangle that has a kind of",
    "start": "1452170",
    "end": "1459700"
  },
  {
    "text": "a literal rectangle I can go ahead and create a new type which is a union of",
    "start": "1459700",
    "end": "1465480"
  },
  {
    "text": "these two types so at this point over here S can actually be a square or a",
    "start": "1465480",
    "end": "1473860"
  },
  {
    "text": "rectangle so if I wanted to for example for the ADI if I wanted to return something like I know it's a square so",
    "start": "1473860",
    "end": "1480580"
  },
  {
    "text": "I'm just going to return a start sighs sighs nope it's that she knows that well",
    "start": "1480580",
    "end": "1488260"
  },
  {
    "text": "you said that it can be a shape so it might actually be a rectangle or a square so you can't do something like",
    "start": "1488260",
    "end": "1494950"
  },
  {
    "text": "that but when you have a literal type annotation for a particular member that",
    "start": "1494950",
    "end": "1500020"
  },
  {
    "text": "ship understands how to discriminate over there so I can actually go if s dot kind",
    "start": "1500020",
    "end": "1505780"
  },
  {
    "text": "is equal to the literal string square then go ahead and return the area for a",
    "start": "1505780",
    "end": "1515950"
  },
  {
    "text": "square and as soon as I do that touch like that ship nose over here there it can be a square or a rectangle and over",
    "start": "1515950",
    "end": "1521230"
  },
  {
    "text": "here it knows that it can only be a square because if the kind was not squared then I wouldn't be within this",
    "start": "1521230",
    "end": "1528100"
  },
  {
    "text": "if block that's pretty cool it also by the process of elimination figured out",
    "start": "1528100",
    "end": "1533830"
  },
  {
    "text": "that over here s can only be a rectangle",
    "start": "1533830",
    "end": "1538980"
  },
  {
    "text": "so the weight star height",
    "start": "1539580",
    "end": "1544110"
  },
  {
    "text": "well I want to complete any questions about that yes yes so if I actually",
    "start": "1546210",
    "end": "1569680"
  },
  {
    "text": "change it to something else so it knows that there's no way that kind can be",
    "start": "1569680",
    "end": "1575080"
  },
  {
    "text": "something that is not in the discriminate engine which is kind mice pas D F F ASD or rectangle so you",
    "start": "1575080",
    "end": "1582730"
  },
  {
    "text": "actually can like and structures like this is what is actually used by redux",
    "start": "1582730",
    "end": "1590760"
  },
  {
    "text": "actions and that ship can figure out which actions are available and stuff",
    "start": "1590760",
    "end": "1596890"
  },
  {
    "text": "like that with these type annotations you can even do exhaust exhaustive checks for example I can go ahead and",
    "start": "1596890",
    "end": "1603010"
  },
  {
    "text": "create a new one let me just undo that interface I don't",
    "start": "1603010",
    "end": "1610660"
  },
  {
    "text": "know circle it's something that has kind circle and it will have radius number so",
    "start": "1610660",
    "end": "1624430"
  },
  {
    "text": "right now if I go ahead and add this new",
    "start": "1624430",
    "end": "1630760"
  },
  {
    "text": "type to the discriminate Union there's no error actually there is it's already figure",
    "start": "1630760",
    "end": "1636820"
  },
  {
    "text": "out that if the kind isn't squared bulb and S can actually be a rectangle or",
    "start": "1636820",
    "end": "1642580"
  },
  {
    "text": "circle so this is invalid but even without that if I had an explicit case",
    "start": "1642580",
    "end": "1650470"
  },
  {
    "text": "over here if s dot kind is equal to",
    "start": "1650470",
    "end": "1655950"
  },
  {
    "text": "rectangle then do that cool now since I have that explicit check over there",
    "start": "1655950",
    "end": "1661630"
  },
  {
    "text": "and I add a new I think the discriminative Union there's no error so",
    "start": "1661630",
    "end": "1667060"
  },
  {
    "text": "if you want to cater for some feature type being added to the discriminated union you can actually add another block",
    "start": "1667060",
    "end": "1672970"
  },
  {
    "text": "here and ensure that this block never never executes so there's this new tie",
    "start": "1672970",
    "end": "1678909"
  },
  {
    "text": "called never I'll just call it Nev of type never is equal to s and right now",
    "start": "1678909",
    "end": "1690399"
  },
  {
    "text": "shape can either be a square or rectangle if it's a square go here else if it's a rectangle go here",
    "start": "1690399",
    "end": "1697149"
  },
  {
    "text": "otherwise go here that's just already figured out that there is no way that this thing can",
    "start": "1697149",
    "end": "1702669"
  },
  {
    "text": "execute because there are only two types that s can be so it's inferred that s is",
    "start": "1702669",
    "end": "1708580"
  },
  {
    "text": "of type never within this particular block and only a never can be assigned to another so now if the new developer",
    "start": "1708580",
    "end": "1714700"
  },
  {
    "text": "comes in and they add a new type to discriminated union they'll actually have to handle all the s else cases as",
    "start": "1714700",
    "end": "1722649"
  },
  {
    "text": "well this is called an exhaustive check for the indiscriminately unions in various programming languages so that",
    "start": "1722649",
    "end": "1729999"
  },
  {
    "text": "soup has there as well all right so no one does it any is a",
    "start": "1729999",
    "end": "1737220"
  },
  {
    "start": "1735000",
    "end": "2184000"
  },
  {
    "text": "feature that has been in touch scape for quite a while for example I can have a",
    "start": "1737220",
    "end": "1744879"
  },
  {
    "text": "function food that takes a variable bar and I just that is interesting",
    "start": "1744879",
    "end": "1759359"
  },
  {
    "text": "I just have I just know that bar is something that has a property pairs and",
    "start": "1768040",
    "end": "1774220"
  },
  {
    "text": "it has a member cream and like you can write this JavaScript code perfectly",
    "start": "1774220",
    "end": "1781420"
  },
  {
    "text": "fine but there's no real help for the next guys to realize that okay bar is an",
    "start": "1781420",
    "end": "1786490"
  },
  {
    "text": "object that has a property bans that is most likely a string but it may not be a string it might be anything that has a",
    "start": "1786490",
    "end": "1793300"
  },
  {
    "text": "dream function and again like that script cannot figure that out either what is the type of dream is it",
    "start": "1793300",
    "end": "1799390"
  },
  {
    "text": "necessarily a function is that what does it return and so there's not enough",
    "start": "1799390",
    "end": "1805060"
  },
  {
    "text": "hints within this piece of Java code to figure out all the types for the variables that are involved that",
    "start": "1805060",
    "end": "1811840"
  },
  {
    "text": "separate has add this flag called no implicit any and as soon as you do",
    "start": "1811840",
    "end": "1818410"
  },
  {
    "text": "that anytime that ship cannot infer the type of a variable it'll actually mark",
    "start": "1818410",
    "end": "1823930"
  },
  {
    "text": "it as an error and if you still want to be a cowboy you can still do and yell of",
    "start": "1823930",
    "end": "1829060"
  },
  {
    "text": "that word cover or you can actually be a better person and right in that it has",
    "start": "1829060",
    "end": "1837130"
  },
  {
    "text": "something that is whatever okay so no",
    "start": "1837130",
    "end": "1842680"
  },
  {
    "text": "one person any that's been there for a while but now they've added a lot of other similar flags that help catch bugs",
    "start": "1842680",
    "end": "1852070"
  },
  {
    "text": "early at compile time instead of run time arguably this in JavaScript is one",
    "start": "1852070",
    "end": "1862870"
  },
  {
    "text": "of the most misunderstood and abused things the reason is that it gets",
    "start": "1862870",
    "end": "1871540"
  },
  {
    "text": "disconnected from people assume that when I have a function this is bound to a particular value that is not generally",
    "start": "1871540",
    "end": "1879580"
  },
  {
    "text": "the case it is derived by how you call that function so here I have a function Inc this just goes ahead and add",
    "start": "1879580",
    "end": "1888810"
  },
  {
    "text": "something to the count on this so I can actually go ahead and create an object",
    "start": "1888810",
    "end": "1894070"
  },
  {
    "text": "foo that actually has a count and I can add",
    "start": "1894070",
    "end": "1899830"
  },
  {
    "text": "increment function do this as well and now i factly go ahead and log out",
    "start": "1899830",
    "end": "1905260"
  },
  {
    "text": "food account before I call this function and call this function and log it out",
    "start": "1905260",
    "end": "1912960"
  },
  {
    "text": "after now since I'm calling this function increment on foo this is going",
    "start": "1912960",
    "end": "1919780"
  },
  {
    "text": "to point to foo and the count of foo is going to get increment it if I just on",
    "start": "1919780",
    "end": "1926679"
  },
  {
    "text": "this file you can see that it works as expected was zero and now it's 1 but if",
    "start": "1926679",
    "end": "1934330"
  },
  {
    "text": "I go ahead and disconnect this function or rather pass this function to at the set timeout or someone else to call at a",
    "start": "1934330",
    "end": "1940809"
  },
  {
    "text": "later point or as an event handler what can happen is like foo increment is the increment function here's something call",
    "start": "1940809",
    "end": "1948730"
  },
  {
    "text": "this function for me later that thing calls it and everybody dies",
    "start": "1948730",
    "end": "1956940"
  },
  {
    "text": "the reason is now this function the increment function is being called",
    "start": "1956940",
    "end": "1961990"
  },
  {
    "text": "without the correct context that you can actually figure that out as well now",
    "start": "1961990",
    "end": "1968320"
  },
  {
    "text": "there's a flag called no implicit this",
    "start": "1968320",
    "end": "1974250"
  },
  {
    "text": "no more magical this anytime you have",
    "start": "1974250",
    "end": "1980580"
  },
  {
    "text": "magical this it becomes and over here I",
    "start": "1980580",
    "end": "1985780"
  },
  {
    "text": "can actually say that ok so this must be something that has a member count on it cool so that's fine but now you're",
    "start": "1985780",
    "end": "1994630"
  },
  {
    "text": "calling this stuff see let's figure out that you calling this function on something that doesn't have the member",
    "start": "1994630",
    "end": "1999760"
  },
  {
    "text": "counter and in a small map that so you'll actually have to do food order",
    "start": "1999760",
    "end": "2006320"
  },
  {
    "text": "that shooting has been very busy they've added a lot of features that capture",
    "start": "2008540",
    "end": "2015410"
  },
  {
    "text": "bugs early another one is no unused parameters so",
    "start": "2015410",
    "end": "2027710"
  },
  {
    "text": "imagine you have this function that has argument and a massive for the end this",
    "start": "2027710",
    "end": "2035299"
  },
  {
    "text": "code was written 10 years ago and not 10 years ago but maybe five years ago X to 10 years would be fine as well just",
    "start": "2035299",
    "end": "2041150"
  },
  {
    "text": "keeps me around longer than that and well this permit is no longer used and",
    "start": "2041150",
    "end": "2047870"
  },
  {
    "text": "the new guy comes in he's like I'm not sure if this is relevant or not in any way but that you can figure that out for",
    "start": "2047870",
    "end": "2054378"
  },
  {
    "text": "you there's a flag called no unused parameters true and now unused",
    "start": "2054379",
    "end": "2065358"
  },
  {
    "text": "parameters like this become an error so you don't have to worry about it another",
    "start": "2065359",
    "end": "2071300"
  },
  {
    "text": "similar flag no unused vocals you have a",
    "start": "2071300",
    "end": "2080000"
  },
  {
    "text": "messy function over here it has this label created for funsies is what we",
    "start": "2080000",
    "end": "2087020"
  },
  {
    "text": "call it in our team form you can just switch on another flag no unused locals",
    "start": "2087020",
    "end": "2092780"
  },
  {
    "text": "- and that bad boy sticks out like a",
    "start": "2092780",
    "end": "2100130"
  },
  {
    "text": "sore thumb",
    "start": "2100130",
    "end": "2102369"
  },
  {
    "text": "that's perfectly fine so the question is I have a function that goes ahead and",
    "start": "2128290",
    "end": "2140710"
  },
  {
    "text": "yep this dot X is equal to 1 2 3 and Const self is equal to this and this dot",
    "start": "2143920",
    "end": "2152150"
  },
  {
    "text": "increment is a function that will go ahead and use self dot X this is what we",
    "start": "2152150",
    "end": "2160310"
  },
  {
    "text": "find that shadows have you that if you want to do that that's you will actually figure out what the variable is",
    "start": "2160310",
    "end": "2167619"
  },
  {
    "text": "generally as well so you don't have to actually worry about it in the modern JavaScript you'll actually normally use",
    "start": "2167619",
    "end": "2173540"
  },
  {
    "text": "just an arrow so it will actually captured this from the outside automatically so that's no unused",
    "start": "2173540",
    "end": "2186080"
  },
  {
    "start": "2184000",
    "end": "2357000"
  },
  {
    "text": "lokos there are a lot of other flags like that as well and what are you gonna actually",
    "start": "2186080",
    "end": "2191500"
  },
  {
    "text": "magically let me just show you one more flag so this is one of the I'll just close all other tabs this is getting a",
    "start": "2191500",
    "end": "2199250"
  },
  {
    "text": "bit crowded so here I have a function that adds days",
    "start": "2199250",
    "end": "2209740"
  },
  {
    "text": "of a given number to a date someone can",
    "start": "2209740",
    "end": "2215900"
  },
  {
    "text": "actually go ahead and call this function with no values and then everybody dies",
    "start": "2215900",
    "end": "2224710"
  },
  {
    "text": "get didn't die and what what's going to happen is that date is going to be now",
    "start": "2224710",
    "end": "2230120"
  },
  {
    "text": "and get time is not a function that is yes or no and now handling is just a",
    "start": "2230120",
    "end": "2235820"
  },
  {
    "text": "nightmare it's not something that if you can offload it to the language go for it",
    "start": "2235820",
    "end": "2243080"
  },
  {
    "text": "and with that ship you can actually do that there's a compiler flag called strict no checks the reason why it's new",
    "start": "2243080",
    "end": "2251990"
  },
  {
    "text": "as a flag is because it's new you don't have to immediately fix all your code",
    "start": "2251990",
    "end": "2258290"
  },
  {
    "text": "with now just the new code you can actually just say strict no checks and",
    "start": "2258290",
    "end": "2263300"
  },
  {
    "text": "now now are not in the domain of the primitive types or objects or classes",
    "start": "2263300",
    "end": "2268580"
  },
  {
    "text": "and stuff like that so you cannot pass in now and to date you don't have to litter your code with stuff like if date",
    "start": "2268580",
    "end": "2276770"
  },
  {
    "text": "is equal to now then do something clever anymore cuz that's someone else's",
    "start": "2276770",
    "end": "2284960"
  },
  {
    "text": "problem now well the library author it can actually like save execution time",
    "start": "2284960",
    "end": "2291950"
  },
  {
    "text": "because you don't have to do Mel checks needlessly it's one of the like generally when you add type safety to",
    "start": "2291950",
    "end": "2300770"
  },
  {
    "text": "language you have more runtime overhead but in this case is actually it's going to save you don't ever overhead because",
    "start": "2300770",
    "end": "2305900"
  },
  {
    "text": "you don't have to do these checks they can be done by the compiler at compile time",
    "start": "2305900",
    "end": "2310570"
  },
  {
    "text": "yes yes so what you can actually say that if it is a valid case that you might accept I know you can add a null",
    "start": "2312640",
    "end": "2320900"
  },
  {
    "text": "as a union again the literal none no and not if it knows that well this object",
    "start": "2320900",
    "end": "2325970"
  },
  {
    "text": "might actually be a now and then you actually have to handle if there is not",
    "start": "2325970",
    "end": "2332900"
  },
  {
    "text": "equal to and do this and now track skater is",
    "start": "2332900",
    "end": "2338790"
  },
  {
    "text": "actually going to go ahead and infer that this thing can actually do it on a date or an undefined because the elf",
    "start": "2338790",
    "end": "2344910"
  },
  {
    "text": "block does an undefined so strict no check three powerful it's like moving me maybe type into the language instead of",
    "start": "2344910",
    "end": "2351420"
  },
  {
    "text": "having a special type for it it's the",
    "start": "2351420",
    "end": "2357720"
  },
  {
    "start": "2357000",
    "end": "2507000"
  },
  {
    "text": "best trick no checks one of the like instead of having to go through all",
    "start": "2357720",
    "end": "2363330"
  },
  {
    "text": "these options and check them what you can actually even do is there's option called strict and he said that 'true and",
    "start": "2363330",
    "end": "2372570"
  },
  {
    "text": "it know that all of these strict features as well as any new features that might come in the truth you can",
    "start": "2372570",
    "end": "2379080"
  },
  {
    "text": "toggle individual ones of like well I have a lot of for example ways to say no",
    "start": "2379080",
    "end": "2385170"
  },
  {
    "text": "unused locals I can go ahead and switch them off after setting this trick to",
    "start": "2385170",
    "end": "2391190"
  },
  {
    "text": "generics is really cool it's been in the language for quite a",
    "start": "2393080",
    "end": "2398820"
  },
  {
    "text": "while the main objective of generics is to put constraint between different",
    "start": "2398820",
    "end": "2404910"
  },
  {
    "text": "variables functions methods over here I have a stack of type T and the",
    "start": "2404910",
    "end": "2410250"
  },
  {
    "text": "constraint that I want to enforce over here is that whatever you push into the stack is what gets popped out of the",
    "start": "2410250",
    "end": "2416760"
  },
  {
    "text": "stack so if I go ahead and create a stack of numbers then I call its track",
    "start": "2416760",
    "end": "2426570"
  },
  {
    "text": "so let's just use that if I push in a number that's what I get out I get our",
    "start": "2426570",
    "end": "2438180"
  },
  {
    "text": "number I cannot push in a string because",
    "start": "2438180",
    "end": "2444360"
  },
  {
    "text": "I've said that stack this particular stack is a stack of numbers so genetics",
    "start": "2444360",
    "end": "2450810"
  },
  {
    "text": "have been there for a while the Ricoh and they'll get used in a bit in some of",
    "start": "2450810",
    "end": "2458130"
  },
  {
    "text": "the newer features that have come up yes so what you can actually so the",
    "start": "2458130",
    "end": "2465480"
  },
  {
    "text": "question is can you constrain the type would especially saying is that can I say that T must be something that has a",
    "start": "2465480",
    "end": "2474990"
  },
  {
    "text": "member full of type string on it so I can actually specified that constrain as the",
    "start": "2474990",
    "end": "2483990"
  },
  {
    "text": "extends that prototype so now I can only create stack of something that has like",
    "start": "2483990",
    "end": "2494130"
  },
  {
    "text": "number would be invalid because numbers do not have a property foo call string but I can create a stack of something",
    "start": "2494130",
    "end": "2500100"
  },
  {
    "text": "that has full of string and bar of cool",
    "start": "2500100",
    "end": "2506630"
  },
  {
    "text": "so generators have been in touch cubes and constraints genetical students have been in touch with for a while they'll",
    "start": "2506630",
    "end": "2512850"
  },
  {
    "start": "2507000",
    "end": "2644000"
  },
  {
    "text": "get used in a bit another thing that has been interested for a while has been the",
    "start": "2512850",
    "end": "2518310"
  },
  {
    "text": "concept of declaration spaces there's a variable space and there's a type space for example I have a variable called foo",
    "start": "2518310",
    "end": "2525540"
  },
  {
    "text": "I cannot go ahead and and a type called foo I cannot go ahead and say well",
    "start": "2525540",
    "end": "2531420"
  },
  {
    "text": "there's a new variable called bar which is of types which is the type foo against its off type ooh but it isn't",
    "start": "2531420",
    "end": "2537840"
  },
  {
    "text": "like foo the type doesn't exist over here the variable doesn't exist over and you actually get a nice error therefore",
    "start": "2537840",
    "end": "2543510"
  },
  {
    "text": "either first row type but is being used as a value over here similarly I cannot",
    "start": "2543510",
    "end": "2548670"
  },
  {
    "text": "go ahead and I can create a new type to point to an existing type but I cannot",
    "start": "2548670",
    "end": "2555600"
  },
  {
    "text": "create a new type to point to a variable because the the name foo is not",
    "start": "2555600",
    "end": "2561440"
  },
  {
    "text": "available in the type declaration space now there has been they have been",
    "start": "2561440",
    "end": "2567210"
  },
  {
    "text": "features within the language for a while for example type of that allow you to",
    "start": "2567210",
    "end": "2574250"
  },
  {
    "text": "move items from the type declaration space into the variable declaration space and vice versa so for example I",
    "start": "2576080",
    "end": "2582930"
  },
  {
    "text": "have an object person a and an object person P I'm really lazy I just I don't want to create a new type called person",
    "start": "2582930",
    "end": "2590160"
  },
  {
    "text": "that has first name and a last name strings this is an existing code base so",
    "start": "2590160",
    "end": "2595880"
  },
  {
    "text": "I can actually do is just say that okay so all of these persons are of the type",
    "start": "2595880",
    "end": "2601460"
  },
  {
    "text": "whatever is inferred for person a so now if someone goes ahead and effectives",
    "start": "2601460",
    "end": "2607190"
  },
  {
    "text": "person a to be something else you get a nice error that okay this object no longer conforms to the type of that",
    "start": "2607190",
    "end": "2612980"
  },
  {
    "text": "variable you get autocomplete over here as well and all those other awesome good thing",
    "start": "2612980",
    "end": "2618410"
  },
  {
    "text": "is you can even name these types if you wanted to so I can actually sort of",
    "start": "2618410",
    "end": "2624019"
  },
  {
    "text": "having you defining your type explicitly I can just say that person is something that is whatever the type you've",
    "start": "2624019",
    "end": "2631309"
  },
  {
    "text": "inferred the it I tripped about person a and now I can use this new type as type",
    "start": "2631309",
    "end": "2637519"
  },
  {
    "text": "in addition but they really bumped up",
    "start": "2637519",
    "end": "2645529"
  },
  {
    "start": "2644000",
    "end": "3056000"
  },
  {
    "text": "the power of these moving types around in the type declaration space and the",
    "start": "2645529",
    "end": "2650599"
  },
  {
    "text": "available dictation space a bit more so one of them is lookup types and I just",
    "start": "2650599",
    "end": "2658279"
  },
  {
    "text": "absolutely love this I deal with a lot of back-end code and external",
    "start": "2658279",
    "end": "2664190"
  },
  {
    "text": "dependencies that take data payloads that are massive like this one so you have a submit request that takes",
    "start": "2664190",
    "end": "2670220"
  },
  {
    "text": "transaction ID and a personal member which has these properties inside and stuff like that and if I have to create",
    "start": "2670220",
    "end": "2676160"
  },
  {
    "text": "this particular available of this type what I'd have to normally do is well submit is something that is of type",
    "start": "2676160",
    "end": "2682910"
  },
  {
    "text": "submit request and well I want to make",
    "start": "2682910",
    "end": "2688369"
  },
  {
    "text": "the driver property and I have to write down all the data properties within this",
    "start": "2688369",
    "end": "2693529"
  },
  {
    "text": "single JavaScript statement before I can actually move on and we as humans don't",
    "start": "2693529",
    "end": "2700369"
  },
  {
    "text": "think like that we try to break down problems into smaller problems so if I",
    "start": "2700369",
    "end": "2706970"
  },
  {
    "text": "wanted to create a submit request what I would normally do is well it has a payment section let's create a payment",
    "start": "2706970",
    "end": "2712910"
  },
  {
    "text": "section and I want this payment variable",
    "start": "2712910",
    "end": "2718519"
  },
  {
    "text": "to be of the type whatever this submit request takes for I'll what I can do is",
    "start": "2718519",
    "end": "2726019"
  },
  {
    "text": "actually create a new type called payment over here which points to that particular sub-segment and then I have",
    "start": "2726019",
    "end": "2731490"
  },
  {
    "text": "to go ahead and update this submit request to say that payment is of type payment and I can do that",
    "start": "2731490",
    "end": "2739619"
  },
  {
    "text": "so now I have a payment over here and I can like touch it border completed and all those good things but it's a bit",
    "start": "2739619",
    "end": "2746040"
  },
  {
    "text": "painful for the next guy the next guy has to if I do it for all of these I'll have six seven new types that I have to",
    "start": "2746040",
    "end": "2753869"
  },
  {
    "text": "name and Deming is one of the hardest things in programming and the next guy has to resubmit request and then they'll",
    "start": "2753869",
    "end": "2759450"
  },
  {
    "text": "see it has these members and one of them is of personal whatever I called it at",
    "start": "2759450",
    "end": "2768570"
  },
  {
    "text": "the time and the next guy will have to go through this and then they'll have to",
    "start": "2768570",
    "end": "2773700"
  },
  {
    "text": "go through each of the type definitions for these things to figure out what's going on over here so you don't have to",
    "start": "2773700",
    "end": "2781200"
  },
  {
    "text": "do that now there's a concept of a lookup type so I can simply revert this",
    "start": "2781200",
    "end": "2786740"
  },
  {
    "text": "new type pulley name type and I can just say the payment is something that is a",
    "start": "2786740",
    "end": "2795720"
  },
  {
    "text": "part of the submit request payload and look up from that the member payment so",
    "start": "2795720",
    "end": "2804450"
  },
  {
    "text": "you can put use any literal string and like that should understand literals now said no that this payment is a literal",
    "start": "2804450",
    "end": "2810560"
  },
  {
    "text": "from submit request take payment out so credit card okay autocomplete received",
    "start": "2810560",
    "end": "2817250"
  },
  {
    "text": "that checking to see if all those things didn't have to come up with names didn't have to confuse the next guy with why",
    "start": "2817250",
    "end": "2825089"
  },
  {
    "text": "are there 20 types in this file when all you needed was just one yes yes yes so I",
    "start": "2825089",
    "end": "2834210"
  },
  {
    "text": "can actually go it is of type personal",
    "start": "2834210",
    "end": "2839730"
  },
  {
    "text": "previous aliases and some so the",
    "start": "2839730",
    "end": "2846150"
  },
  {
    "text": "question was can I do next eight as well so I just took payment out previously right but I can even go ahead and take",
    "start": "2846150",
    "end": "2852750"
  },
  {
    "text": "out personal and from that take out previous the IOUs addresses I would",
    "start": "2852750",
    "end": "2858720"
  },
  {
    "text": "actually stop at this point normally as good thing there's a typo in there",
    "start": "2858720",
    "end": "2863819"
  },
  {
    "text": "let's figure that out these aliases not addresses I love that script so yes so",
    "start": "2863819",
    "end": "2880409"
  },
  {
    "text": "the question is if I are statute about the type of payment what will it show",
    "start": "2880409",
    "end": "2885539"
  },
  {
    "text": "right now I've said that it is off type submit request and from that the personal details and off from that",
    "start": "2885539",
    "end": "2891630"
  },
  {
    "text": "previous aliases previous aliases is this object over here which is an array",
    "start": "2891630",
    "end": "2896759"
  },
  {
    "text": "of these things that ship knows that payment is you can see the yeah you know",
    "start": "2896759",
    "end": "2908719"
  },
  {
    "text": "is just that let's figure out that it's",
    "start": "2908719",
    "end": "2913949"
  },
  {
    "text": "just the previous releases portion this empty object overhead is not performed with that if I actually just go ahead",
    "start": "2913949",
    "end": "2919709"
  },
  {
    "text": "and say well just I'm going to create a variable later of this type you can see",
    "start": "2919709",
    "end": "2924899"
  },
  {
    "text": "that it has figured out that it payment is something that has type string first name middle name last minute in any of these things so the question is is has",
    "start": "2924899",
    "end": "2950939"
  },
  {
    "text": "this feature got any similarity with ambient occlusion so ambient",
    "start": "2950939",
    "end": "2956459"
  },
  {
    "text": "declarations are for example I want to use jQuery and I want to get the value",
    "start": "2956459",
    "end": "2965039"
  },
  {
    "text": "for some selector if I just write that in the new text file that's just going to complain jQuery is not something that",
    "start": "2965039",
    "end": "2971789"
  },
  {
    "text": "is available by default so dollar is not something that is available in this file",
    "start": "2971789",
    "end": "2976949"
  },
  {
    "text": "but I can actually go ahead and create an Indian declaration I can say that the attach script there is this variable",
    "start": "2976949",
    "end": "2984289"
  },
  {
    "text": "lovingly called dollar that I want you to be quiet about",
    "start": "2984289",
    "end": "2991230"
  },
  {
    "text": "and now typescript is quite about it it's gone ahead and said that okay there's a variable dollar of type any I",
    "start": "2991230",
    "end": "2998800"
  },
  {
    "text": "can let you do whatever you want with it I'm not going to complain now writing",
    "start": "2998800",
    "end": "3003809"
  },
  {
    "text": "these declarations is very similar to writing this type definition for a",
    "start": "3003809",
    "end": "3010579"
  },
  {
    "text": "payload that I'm going to send to the back end so that that's pretty much the extent of the similarity you can of",
    "start": "3010579",
    "end": "3018750"
  },
  {
    "text": "course create new types for example payment info is submit request from that",
    "start": "3018750",
    "end": "3027000"
  },
  {
    "text": "take out payment and that is valid as",
    "start": "3027000",
    "end": "3034559"
  },
  {
    "text": "well so when you're writing type type declaration and if you feel that oh this",
    "start": "3034559",
    "end": "3039750"
  },
  {
    "text": "is this type is getting used too many times you can within your type declarations use this feature as well nothing barring that yes go for it all",
    "start": "3039750",
    "end": "3051780"
  },
  {
    "text": "right so that's lookup types key off",
    "start": "3051780",
    "end": "3058940"
  },
  {
    "start": "3056000",
    "end": "3191000"
  },
  {
    "text": "well we have type of there's a new thing called key off which is person keys is",
    "start": "3058940",
    "end": "3069240"
  },
  {
    "text": "any of the keys of person secure a new type and ask you to touch script to give",
    "start": "3069240",
    "end": "3076890"
  },
  {
    "text": "me the union of all the keys that it has in it has for the type person so person",
    "start": "3076890",
    "end": "3082920"
  },
  {
    "text": "Keys is going to be the union of the strings literal strings first name and last name by itself it doesn't sound",
    "start": "3082920",
    "end": "3089660"
  },
  {
    "text": "particularly exciting but when you combine it with generics which is why I showed generics and fortunately generic",
    "start": "3089660",
    "end": "3097020"
  },
  {
    "text": "constraints it becomes much more powerful so here I have a function called prop which takes two parameters",
    "start": "3097020",
    "end": "3104400"
  },
  {
    "text": "an object of type T and a key of type K and I have a constraint over here that K",
    "start": "3104400",
    "end": "3110970"
  },
  {
    "text": "must be something that is in the keys that are inferred for type T so if I go",
    "start": "3110970",
    "end": "3120270"
  },
  {
    "text": "ahead and call prop on an object has foo and bar on it what's going to",
    "start": "3120270",
    "end": "3130849"
  },
  {
    "text": "happen is statute has going is going to infer that the type T based on this",
    "start": "3130849",
    "end": "3135890"
  },
  {
    "text": "argument position for the prop function over here is of type foo and bar and the",
    "start": "3135890",
    "end": "3152599"
  },
  {
    "text": "type K must be something that is in the key of T so the keys of type T are foo",
    "start": "3152599",
    "end": "3160549"
  },
  {
    "text": "and bar in this empty string or some other random string is not for bar so that is going to complain about that and",
    "start": "3160549",
    "end": "3168769"
  },
  {
    "text": "it's actually probably even going to know if only going to allow valid keys",
    "start": "3168769",
    "end": "3175700"
  },
  {
    "text": "from this object and something like pluck lodash is full of it you can",
    "start": "3175700",
    "end": "3182029"
  },
  {
    "text": "actually with this key off commanding with generics you actually get much more powerful type annotations for exists in",
    "start": "3182029",
    "end": "3188719"
  },
  {
    "text": "JavaScript so that's key of it gets much",
    "start": "3188719",
    "end": "3197059"
  },
  {
    "start": "3191000",
    "end": "3306000"
  },
  {
    "text": "more interesting string genomes is something that has been requested for",
    "start": "3197059",
    "end": "3203089"
  },
  {
    "text": "quite a while - it has that now so I can say construction is is of type direction",
    "start": "3203089",
    "end": "3213739"
  },
  {
    "text": "so well north is a very value and if I",
    "start": "3213739",
    "end": "3220309"
  },
  {
    "text": "go ahead and log it out",
    "start": "3220309",
    "end": "3223089"
  },
  {
    "text": "it's going to be the string month no surprise there",
    "start": "3230050",
    "end": "3236559"
  },
  {
    "text": "one of the really really cool features is read-only chars can have the concept",
    "start": "3239890",
    "end": "3247370"
  },
  {
    "text": "of read-only it has had that for a while transcript understands that it has understood that for a while if I have an",
    "start": "3247370",
    "end": "3253820"
  },
  {
    "text": "object with a class with the getter so calls foo is a new food that has a",
    "start": "3253820",
    "end": "3259850"
  },
  {
    "text": "getter I can get bar but I can't assign to bar because there is no setter for",
    "start": "3259850",
    "end": "3267290"
  },
  {
    "text": "bar in that script understands that and it complains about that there is absolutely no touch to specific feature",
    "start": "3267290",
    "end": "3274070"
  },
  {
    "text": "here except that I should understand it target does have a feature called",
    "start": "3274070",
    "end": "3279500"
  },
  {
    "text": "read-only which allows you to sort of using getters and setters whichever",
    "start": "3279500",
    "end": "3286460"
  },
  {
    "text": "runtime overhead you can actually just annotate a member with type it only and it would have similar semantics as",
    "start": "3286460",
    "end": "3293770"
  },
  {
    "text": "something that just has a getter so it's read-only from the outside world",
    "start": "3293770",
    "end": "3301610"
  },
  {
    "text": "so you cannot assign to it and that works fine what's more interesting is",
    "start": "3301610",
    "end": "3310520"
  },
  {
    "start": "3306000",
    "end": "3413000"
  },
  {
    "text": "that you can actually combine these with",
    "start": "3310520",
    "end": "3318700"
  },
  {
    "text": "the feature called match types so here I have a type read-only which of type T which takes",
    "start": "3321880",
    "end": "3330470"
  },
  {
    "text": "all the keys of type T and for each member in in that set makes them",
    "start": "3330470",
    "end": "3336050"
  },
  {
    "text": "read-only the value for each of these would be the same as the value that",
    "start": "3336050",
    "end": "3342530"
  },
  {
    "text": "would be entitled EB so if I have a type",
    "start": "3342530",
    "end": "3350540"
  },
  {
    "text": "two I can always do a foo is of type foo so I can have a one two three",
    "start": "3350540",
    "end": "3359230"
  },
  {
    "text": "something I can assign to it cool that's how type food works but I can actually",
    "start": "3359380",
    "end": "3364960"
  },
  {
    "text": "even go ahead and now say that foo is not of type foo it is of type read only",
    "start": "3364960",
    "end": "3373589"
  },
  {
    "text": "of foo and now type shape is going to go",
    "start": "3373589",
    "end": "3380559"
  },
  {
    "text": "ahead and infer that it'll have all the properties foo but each of these would",
    "start": "3380559",
    "end": "3387240"
  },
  {
    "text": "automatically get marked with read only which means that if you try to assign to",
    "start": "3387240",
    "end": "3394210"
  },
  {
    "text": "it it's going to be another and this read only type actually exists within",
    "start": "3394210",
    "end": "3399250"
  },
  {
    "text": "the default liberal d dot es so you don't actually have to write it yourself you just want to convert a type into a",
    "start": "3399250",
    "end": "3406240"
  },
  {
    "text": "read only type can just use this type of notation and you get to go they can see it's in the label dirtiest most really",
    "start": "3406240",
    "end": "3415119"
  },
  {
    "start": "3413000",
    "end": "3600000"
  },
  {
    "text": "cool about this is when you combine it with language patterns that exist out",
    "start": "3415119",
    "end": "3420910"
  },
  {
    "text": "there so",
    "start": "3420910",
    "end": "3424170"
  },
  {
    "text": "here I have a simple react foe that",
    "start": "3429900",
    "end": "3437730"
  },
  {
    "text": "renders out a button that shows the states clicked count right now on click",
    "start": "3437730",
    "end": "3446040"
  },
  {
    "text": "is empty so nothing happens when I click it I want to increment the clicked count in state that different strands react",
    "start": "3446040",
    "end": "3456770"
  },
  {
    "text": "it's amazing now a beginner developer might actually do something like oh I",
    "start": "3456980",
    "end": "3462330"
  },
  {
    "text": "can actually just state that count plus plus and what they'll quickly find out is well that doesn't work so we look at",
    "start": "3462330",
    "end": "3470280"
  },
  {
    "text": "oh I just just just uploaded a bit it for me yeah just just go for it",
    "start": "3470280",
    "end": "3475740"
  },
  {
    "text": "Shh be quiet and it'll work but it's it's horrible that's not what the react",
    "start": "3475740",
    "end": "3485600"
  },
  {
    "text": "components assume that you're going to call said state with the new object and it will control when it won't surrender",
    "start": "3485600",
    "end": "3490890"
  },
  {
    "text": "you shouldn't be using for state unless you explicitly need to special actually",
    "start": "3490890",
    "end": "3496020"
  },
  {
    "text": "figures that out now because it knows that I created a react component with a",
    "start": "3496020",
    "end": "3503160"
  },
  {
    "text": "member called count of type number within the type definitions for component you will see that it has a",
    "start": "3503160",
    "end": "3512760"
  },
  {
    "text": "property called state which is read-only of that type occlusion so of this state",
    "start": "3512760",
    "end": "3520160"
  },
  {
    "text": "type generic over here the state member",
    "start": "3520160",
    "end": "3525510"
  },
  {
    "text": "within the class instance is going to be a rioni of that so you cannot actually implement that and I've had beginner",
    "start": "3525510",
    "end": "3531990"
  },
  {
    "text": "developers write something which is probably very easy to miss you go ahead",
    "start": "3531990",
    "end": "3540420"
  },
  {
    "text": "and say count is okay so I understand I'm not supposed to use force update I won't use that but I just want count to",
    "start": "3540420",
    "end": "3546000"
  },
  {
    "text": "be well plus first of the current state console just call set state with that and then we'll commit it and it'll work",
    "start": "3546000",
    "end": "3553310"
  },
  {
    "text": "it will not work I thought it would but that correctly figured out that state",
    "start": "3553310",
    "end": "3560820"
  },
  {
    "text": "plus plus cannot work because it mutates the state so you actually have to do something like that cool there are lots of other",
    "start": "3560820",
    "end": "3571050"
  },
  {
    "text": "features within this release and lots of",
    "start": "3571050",
    "end": "3576360"
  },
  {
    "text": "new features coming out as well what you can actually do to keep up to date is I",
    "start": "3576360",
    "end": "3582480"
  },
  {
    "text": "recommend just updating your package this entire trip the latest version it will find bugs in your code and they'll",
    "start": "3582480",
    "end": "3589200"
  },
  {
    "text": "most likely be bugs in your code so just be thankful and move on stay happy any",
    "start": "3589200",
    "end": "3596790"
  },
  {
    "text": "questions that is it thank you all for",
    "start": "3596790",
    "end": "3603240"
  },
  {
    "text": "coming [Applause]",
    "start": "3603240",
    "end": "3610679"
  }
]