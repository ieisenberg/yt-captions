[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "uh thanks for coming to my session today uh we are going to speak about the cosmos tv and how you can actually save",
    "start": "3199",
    "end": "9440"
  },
  {
    "text": "some money with it uh when you say cosmo cb usually people say oh that's an expensive database",
    "start": "9440",
    "end": "15200"
  },
  {
    "text": "right so i'm going to try to explain to you how i guess you can save",
    "start": "15200",
    "end": "20640"
  },
  {
    "text": "and make the application more scalable in this talk",
    "start": "20640",
    "end": "25920"
  },
  {
    "text": "let me actually start to introduce myself first my name is hassan savran",
    "start": "25920",
    "end": "31359"
  },
  {
    "text": "and i am my own company self-run web consulting mostly i am really focusing on the cosmos tv for consulting but",
    "start": "31359",
    "end": "38559"
  },
  {
    "text": "rather than that i still have a full-time job i work for a large insurance company at united states",
    "start": "38559",
    "end": "45520"
  },
  {
    "text": "i'm a microsoft data platform mvp this is my third year and i'm from cleveland ohio united",
    "start": "45520",
    "end": "53440"
  },
  {
    "text": "states i have great experience with the web development and the data so i can see",
    "start": "53440",
    "end": "58640"
  },
  {
    "text": "kind of like the both sides especially when you are talking about the dba stuff i can see both sides",
    "start": "58640",
    "end": "66080"
  },
  {
    "text": "i like to write in my blog mostly about the cosmos tv sql server but i you can",
    "start": "66080",
    "end": "72080"
  },
  {
    "text": "find some stuff like front-end c-sharp check it out you might find something interesting there",
    "start": "72080",
    "end": "77759"
  },
  {
    "text": "and if you will have any questions about this session later or any kind of cosmos db questions please uh you know you can",
    "start": "77759",
    "end": "85040"
  },
  {
    "text": "follow me from the linkedin or the twitter i will be more than happy to",
    "start": "85040",
    "end": "90240"
  },
  {
    "text": "try to help you and answer your questions so uh before we go in details let's",
    "start": "90240",
    "end": "96640"
  },
  {
    "start": "96000",
    "end": "96000"
  },
  {
    "text": "actually go back to i guess the base and try to understand what really cosmos db is and when we",
    "start": "96640",
    "end": "102880"
  },
  {
    "text": "compare this to the relational databases what are the differences because that's the first thing you really need to",
    "start": "102880",
    "end": "108560"
  },
  {
    "text": "understand to be able to kind of put the right settings on the cosmos db",
    "start": "108560",
    "end": "114240"
  },
  {
    "text": "so the first thing you see in the left side here this is the centralized database example for it sql server everybody uses",
    "start": "114240",
    "end": "121600"
  },
  {
    "text": "sql server right so we have clients those clients can be a web application it can be your ssrs",
    "start": "121600",
    "end": "128399"
  },
  {
    "text": "report something just pulling data from the database server",
    "start": "128399",
    "end": "134160"
  },
  {
    "text": "so the database is centralized but the client does not need to worry about",
    "start": "134160",
    "end": "141360"
  },
  {
    "text": "where the data is that's database engine's problem to go and find the data",
    "start": "141360",
    "end": "146400"
  },
  {
    "text": "and deliver it to client so that is great for client because there's",
    "start": "146400",
    "end": "152239"
  },
  {
    "text": "not that much pressure on the web application or the you know report or",
    "start": "152239",
    "end": "157519"
  },
  {
    "text": "whatever the access is easy because well we don't need to worry about where the data is",
    "start": "157519",
    "end": "164400"
  },
  {
    "text": "uh but that can be create problems in relational databases first of all it can",
    "start": "164400",
    "end": "170000"
  },
  {
    "text": "be a bottleneck right you might have a lot of clients try to pull the data together then usually well your only one",
    "start": "170000",
    "end": "177680"
  },
  {
    "text": "database server so usually that's the bottleneck can happen easily",
    "start": "177680",
    "end": "183040"
  },
  {
    "text": "so you have a limitation uh this is a scale up which means that you have one machine and you can always",
    "start": "183040",
    "end": "189280"
  },
  {
    "text": "you know like put more memories on it more uh eye on it or more resources on",
    "start": "189280",
    "end": "194720"
  },
  {
    "text": "it but there is a limit for it it's not gonna go for infinite if we compare this to the distributed",
    "start": "194720",
    "end": "201440"
  },
  {
    "text": "databases like cosmos db the model changes and the model changes",
    "start": "201440",
    "end": "206879"
  },
  {
    "text": "dramatically well depending how much storage or how",
    "start": "206879",
    "end": "212720"
  },
  {
    "text": "much uh usage you can actually get from the database you don't have only one anymore",
    "start": "212720",
    "end": "219040"
  },
  {
    "text": "but you have x number of servers",
    "start": "219040",
    "end": "224159"
  },
  {
    "text": "so now if you're a client here right you're a web application and you are going to try to pull the data",
    "start": "224159",
    "end": "230400"
  },
  {
    "text": "well where is the data if you are not going to specify",
    "start": "230400",
    "end": "235439"
  },
  {
    "text": "that partition key that you define in the container you are really forcing your query to run",
    "start": "235439",
    "end": "241439"
  },
  {
    "text": "in each database servers that means each database server is going to use memory",
    "start": "241439",
    "end": "248000"
  },
  {
    "text": "they are going to use cpu they are going to use net resources and that's going to actually cost you so",
    "start": "248000",
    "end": "254720"
  },
  {
    "text": "you have here four but now you can have easily have 10 20 database servers",
    "start": "254720",
    "end": "260400"
  },
  {
    "text": "and if your query is a simple query let's say it's going to cost you three request units",
    "start": "260400",
    "end": "265520"
  },
  {
    "text": "if you have 20 of those you're going to multiply 3 with 20 and you're going to end up with a large request because you",
    "start": "265520",
    "end": "272000"
  },
  {
    "text": "have not you know include the partition key in your query",
    "start": "272000",
    "end": "277759"
  },
  {
    "text": "this is more scalable because depending how much data or how much power you need it's much easier to just give you",
    "start": "277759",
    "end": "284240"
  },
  {
    "text": "another new database server so that it's naturally limited like the one here in the limitations",
    "start": "284240",
    "end": "290479"
  },
  {
    "text": "and the availability is high because well if one of them actually goes down",
    "start": "290479",
    "end": "295680"
  },
  {
    "text": "microsoft is actually in charge of that and it will bring it back for you and the rest of them is still working so",
    "start": "295680",
    "end": "302240"
  },
  {
    "text": "not the whole web application will go down because well some of the part of web application",
    "start": "302240",
    "end": "307280"
  },
  {
    "text": "will still pull the data it needs now",
    "start": "307280",
    "end": "312400"
  },
  {
    "text": "each of those database servers in cosmos tb we call them physical partitions",
    "start": "312400",
    "end": "319199"
  },
  {
    "start": "317000",
    "end": "317000"
  },
  {
    "text": "physical partition is the place that actually cosmos db lives that's where all your database",
    "start": "319199",
    "end": "325759"
  },
  {
    "text": "files are index files are query optimizer optimization everything is actually happening in the physical",
    "start": "325759",
    "end": "331919"
  },
  {
    "text": "partition now let me say physical partition that's almost the same one if you had like in",
    "start": "331919",
    "end": "338000"
  },
  {
    "text": "all days let's say you install the sql server you put that actually cd or dvd",
    "start": "338000",
    "end": "343759"
  },
  {
    "text": "and you kind of pick a location for the uh you know execute the files that's the place where's the physical partition for",
    "start": "343759",
    "end": "350080"
  },
  {
    "text": "cosmos cb a cosmo cv's physical partition there's not that much you can",
    "start": "350080",
    "end": "355520"
  },
  {
    "text": "do because well microsoft manages that 100 percent so there's no really settings for it",
    "start": "355520",
    "end": "362240"
  },
  {
    "text": "but there are two numbers here there's a developer or a dba that you need to know by heart",
    "start": "362240",
    "end": "368240"
  },
  {
    "text": "those are the first one is the limit of the storage one physical partition can get up to 50 gigabyte storage",
    "start": "368240",
    "end": "376479"
  },
  {
    "text": "and also it can deliver 10 000 request units for whatever reason if you are gonna",
    "start": "376479",
    "end": "382960"
  },
  {
    "text": "test any of those numbers then that means you are triggering a new physical partition",
    "start": "382960",
    "end": "389280"
  },
  {
    "text": "if you actually go back and look at here you are going to have one more each time you pass those numbers",
    "start": "389280",
    "end": "396400"
  },
  {
    "text": "so that's important so whenever you are actually creating a new container ask yourself if you are going to pass this",
    "start": "396400",
    "end": "402240"
  },
  {
    "text": "number if you're going to pass that number you want to be sure that whatever partition key you are picking should",
    "start": "402240",
    "end": "408639"
  },
  {
    "text": "actually work for all of the queries so that is the first level for the",
    "start": "408639",
    "end": "414880"
  },
  {
    "text": "physical partitions now as i said before when you actually",
    "start": "414880",
    "end": "421039"
  },
  {
    "text": "get close to that 10 000 request units uh that is the limitation of the",
    "start": "421039",
    "end": "426240"
  },
  {
    "text": "physical partition cosmos tb does not wait until you hit the 10 000 request unit to give you a new physical",
    "start": "426240",
    "end": "432400"
  },
  {
    "text": "partition so depending what type of threshold you pick if you pick the manual threshold",
    "start": "432400",
    "end": "438720"
  },
  {
    "text": "as soon as you hit the 6000 that will actually trigger a neve physical partition so it won't wait",
    "start": "438720",
    "end": "444319"
  },
  {
    "text": "until 10 000. if you pick the rs scale then actually it will give you for each 10 000 uh",
    "start": "444319",
    "end": "450720"
  },
  {
    "text": "request units one physical partition so those are the two numbers that you should know uh",
    "start": "450720",
    "end": "456880"
  },
  {
    "text": "if you are changing your special the threshold for any reason because for example let's say tomorrow you have a",
    "start": "456880",
    "end": "462880"
  },
  {
    "text": "web application and tomorrow you know it's gonna be very busy and if you will test a 6000 that means",
    "start": "462880",
    "end": "468879"
  },
  {
    "text": "you're actually triggering a new physical partition so things can get changed dramatically",
    "start": "468879",
    "end": "474160"
  },
  {
    "text": "because of that now let's give you an example right",
    "start": "474160",
    "end": "479440"
  },
  {
    "start": "476000",
    "end": "476000"
  },
  {
    "text": "let's say we have an application and our current request unit is 9000 and we have a file storage limit is 79",
    "start": "479440",
    "end": "487599"
  },
  {
    "text": "gigabytes by knowing those two numbers we can actually tell how many physical",
    "start": "487599",
    "end": "493120"
  },
  {
    "text": "partitions we have first of all since this is more than six thousand i know we have at least two",
    "start": "493120",
    "end": "499599"
  },
  {
    "text": "here and since this is between the 50 and 100 gigabyte we know there are two physical",
    "start": "499599",
    "end": "505680"
  },
  {
    "text": "partitions we have and also 9000 since we have two request units is",
    "start": "505680",
    "end": "513279"
  },
  {
    "text": "getting actually uh divided by the x number of physical partitions which makes it 4 500 and 4500 each of them so",
    "start": "513279",
    "end": "521760"
  },
  {
    "text": "that is the horsepower each of them has and let's say this one actually has 35",
    "start": "521760",
    "end": "527760"
  },
  {
    "text": "gig and this one has 44 gig you must say why they are not divided",
    "start": "527760",
    "end": "532880"
  },
  {
    "text": "perfectly unfortunately when you pick the partition key you never pick up like something uh which is gonna actually get",
    "start": "532880",
    "end": "539760"
  },
  {
    "text": "divided perfectly right you might have more one big partition key here a",
    "start": "539760",
    "end": "544800"
  },
  {
    "text": "partition which actually size much bigger than this one so that's why that's the really reality",
    "start": "544800",
    "end": "550640"
  },
  {
    "text": "i mean uh whenever people say that you know there's a 50 gig this is 50",
    "start": "550640",
    "end": "555839"
  },
  {
    "text": "that's not the reality unfortunately now let's say we are going to have more data",
    "start": "555839",
    "end": "563040"
  },
  {
    "text": "coming up maybe you are going to push like a bulk load of data or you are going to wait one or two years and you",
    "start": "563040",
    "end": "569839"
  },
  {
    "text": "are going to actually add 12 gig to this uh criteria",
    "start": "569839",
    "end": "576000"
  },
  {
    "text": "just to be just to be safe or just to make it easy i'm gonna say six here and six here that's really not gonna be the",
    "start": "576000",
    "end": "582640"
  },
  {
    "text": "reality because of that's gonna really depend on the partition key you pick but just say six so actually this is to",
    "start": "582640",
    "end": "589120"
  },
  {
    "text": "reach the 50 and well now we are going to have a new physical partition just because of that",
    "start": "589120",
    "end": "595600"
  },
  {
    "text": "because we have more data so what can actually happen here we are going to have the third physical",
    "start": "595600",
    "end": "601279"
  },
  {
    "text": "partition the number goes down because well you have total 9 000 and this needs some",
    "start": "601279",
    "end": "607120"
  },
  {
    "text": "resources right so then we have to divide 9000 to three physical partitions and each of them has",
    "start": "607120",
    "end": "614560"
  },
  {
    "text": "3 000 request units so that happens in the background you have no control of it",
    "start": "614560",
    "end": "620160"
  },
  {
    "text": "and microsoft controls there so now if you look at the numbers",
    "start": "620160",
    "end": "625920"
  },
  {
    "text": "this looks great right we have the 50 percent here 50 percent here this one does not look that great",
    "start": "625920",
    "end": "633120"
  },
  {
    "text": "and it's very close to 50 gig when reached the 50 gig probably is",
    "start": "633120",
    "end": "638240"
  },
  {
    "text": "gonna get you know split too but the problem is this used to have 4 500 request units",
    "start": "638240",
    "end": "647040"
  },
  {
    "text": "it has most of the data now we are giving it less request units",
    "start": "647040",
    "end": "652800"
  },
  {
    "text": "and it has more data so what can actually happen here is probably you're going to see 429 errors",
    "start": "652800",
    "end": "658959"
  },
  {
    "text": "here because it used to have you know more resources now it has less resources",
    "start": "658959",
    "end": "665279"
  },
  {
    "text": "on top of it has more data so to fix that problem usually what you do",
    "start": "665279",
    "end": "671120"
  },
  {
    "text": "is you go and change your threshold so right now it's nine thousand you may need to kind of make this again",
    "start": "671120",
    "end": "677920"
  },
  {
    "text": "maybe four thousand five hundred but you are talking like a good amount of numbers because",
    "start": "677920",
    "end": "682959"
  },
  {
    "text": "to make four thousand five hundred each well you need fifteen hundred three thousand four thousand five hundred more",
    "start": "682959",
    "end": "690079"
  },
  {
    "text": "actually request units to make it balanced just like that that's one way to fix it the other way",
    "start": "690079",
    "end": "696399"
  },
  {
    "text": "to fix it is we know two numbers right 50 gig and 10 000 request units",
    "start": "696399",
    "end": "701680"
  },
  {
    "text": "so we can try to force this to actually create another physical partition by",
    "start": "701680",
    "end": "707440"
  },
  {
    "text": "giving a much larger uh more request more than four thousand five hundred",
    "start": "707440",
    "end": "713200"
  },
  {
    "text": "in my case what i'm gonna do here is i'm gonna make it twenty thousand",
    "start": "713200",
    "end": "718240"
  },
  {
    "text": "that is gonna trigger a whole new physical partition now each is five thousand",
    "start": "718240",
    "end": "724800"
  },
  {
    "text": "now you might say that you know okay this is great but i don't wanna pay for this you know that's an easy easy way to",
    "start": "724800",
    "end": "729839"
  },
  {
    "text": "fix the problem is uh if you are going to scale down this",
    "start": "729839",
    "end": "735200"
  },
  {
    "text": "number you are not going to lose a physical partition physical partitions will never get merged in the back",
    "start": "735200",
    "end": "741680"
  },
  {
    "text": "so potentially what you can do here is you can go back to 9000. now you actually trigger a new physical",
    "start": "741680",
    "end": "749200"
  },
  {
    "start": "744000",
    "end": "744000"
  },
  {
    "text": "partition and our requestedness is lower but in the meantime we have lower data so we",
    "start": "749200",
    "end": "756000"
  },
  {
    "text": "should fix the physical partition one's problem here because we have less data",
    "start": "756000",
    "end": "761839"
  },
  {
    "text": "and well 2 250 if it's not you know enough we might increase it more but you don't",
    "start": "761839",
    "end": "768639"
  },
  {
    "text": "need to increase like 3500 for each so by knowing those two numbers yeah you",
    "start": "768639",
    "end": "774399"
  },
  {
    "text": "cannot change anything physical partition in the azure portal but you can trigger any physical",
    "start": "774399",
    "end": "780399"
  },
  {
    "text": "partitions to actually fix problems this way it will be more cheaper than adding 4500 to just reach where it was before",
    "start": "780399",
    "end": "789360"
  },
  {
    "text": "make sense now uh that was the physical partition",
    "start": "789360",
    "end": "795120"
  },
  {
    "text": "and in the physical partition i kind of passed that one in physical partition we have four computers in each physical",
    "start": "795120",
    "end": "801279"
  },
  {
    "text": "partition you have a leader and you have three followers so if you have a web application try to",
    "start": "801279",
    "end": "808000"
  },
  {
    "text": "pull data that kind of explains you why cosmos tv is very fast",
    "start": "808000",
    "end": "813040"
  },
  {
    "text": "potentially it has four computers to get the data not just one four and for each",
    "start": "813040",
    "end": "818560"
  },
  {
    "text": "physical partition and if one of them fails cosmos tb just handles that for you and just add a new",
    "start": "818560",
    "end": "825279"
  },
  {
    "text": "one for you so that's how the physical partition works uh the leader here gets all the updates",
    "start": "825279",
    "end": "832639"
  },
  {
    "text": "the leads and inserts and it just moves the data to the followers so",
    "start": "832639",
    "end": "838800"
  },
  {
    "text": "followers are always or reading if you want to write the data usually that goes to the leader and that happens",
    "start": "838800",
    "end": "845279"
  },
  {
    "text": "in the back end now next level is the logical partition so",
    "start": "845279",
    "end": "852320"
  },
  {
    "start": "849000",
    "end": "849000"
  },
  {
    "text": "that's where actually you have some power you can actually change things uh partition keys",
    "start": "852320",
    "end": "859360"
  },
  {
    "text": "are very important and you that's where actually you whenever you create the container you declare a partition key",
    "start": "859360",
    "end": "866079"
  },
  {
    "text": "you want something really high cardinality uh whenever you are creating a partition key",
    "start": "866079",
    "end": "871279"
  },
  {
    "text": "for example if you are i'm from united states you know there are states out there let's say we are",
    "start": "871279",
    "end": "876639"
  },
  {
    "text": "selling stuff you don't want to pick a partition key like for example a city because you might have a small city and you may have",
    "start": "876639",
    "end": "883360"
  },
  {
    "text": "a much larger city and since we have a limit each partition key can not have more",
    "start": "883360",
    "end": "889040"
  },
  {
    "text": "than 20 gig maybe you know probably like new york city is going to hit the 20 gig because",
    "start": "889040",
    "end": "894800"
  },
  {
    "text": "they are going to have a lot of sales coming in so i don't want to pick something really with the low",
    "start": "894800",
    "end": "899839"
  },
  {
    "text": "cardinality you want the high cardinality for the partition key and you want to be sure that whatever",
    "start": "899839",
    "end": "906399"
  },
  {
    "text": "you pick you don't you're not going to able to actually change that so let's say you have an order for new",
    "start": "906399",
    "end": "913440"
  },
  {
    "text": "york city and i make the new york city my partition key and you realize that actually you know what this order is not",
    "start": "913440",
    "end": "918800"
  },
  {
    "text": "for new york city for this is something else you cannot change them because that's a partition key and you cannot change",
    "start": "918800",
    "end": "924880"
  },
  {
    "text": "partition key values as i show you before with the physical",
    "start": "924880",
    "end": "931680"
  },
  {
    "text": "partitions you have the storage and request units you want to you know whenever you create",
    "start": "931680",
    "end": "937600"
  },
  {
    "text": "the application you usually know how much data you might have in two three four five years right",
    "start": "937600",
    "end": "943440"
  },
  {
    "text": "uh or how much power you are going to need if for any reason if you are going to have more than 50",
    "start": "943440",
    "end": "949199"
  },
  {
    "text": "gig or if you are going to have if you are going to need more than 10 000 request units my suggestion is whatever",
    "start": "949199",
    "end": "956079"
  },
  {
    "text": "partitioning key you are going to pick just trigger more partitions just uh you know",
    "start": "956079",
    "end": "961839"
  },
  {
    "text": "pass maybe 20 30 000 request units so you will end up with two three physical partition and test your queries with",
    "start": "961839",
    "end": "968480"
  },
  {
    "text": "that so you will be kind of ready for feature when it happens so you will know that you know how much those queries are",
    "start": "968480",
    "end": "974000"
  },
  {
    "text": "gonna cost you when you have multiple physical partitions one day",
    "start": "974000",
    "end": "979839"
  },
  {
    "text": "also if you are in this situation and you have let's say your partitioning key is",
    "start": "979839",
    "end": "987040"
  },
  {
    "text": "costing you a lot of money because well whenever some of your queries actually cost you a lot of money because",
    "start": "987040",
    "end": "992639"
  },
  {
    "text": "partitioning there's no way that partition key can be in the where clause in that case rather than try to",
    "start": "992639",
    "end": "998240"
  },
  {
    "text": "re-partition your current container storage is actually much cheaper in",
    "start": "998240",
    "end": "1003920"
  },
  {
    "text": "azure portal so what you can actually do is maybe you can create another container one will be for writing other will be",
    "start": "1003920",
    "end": "1010160"
  },
  {
    "text": "for reading data and you can actually connect them in the back end with change feed so whenever a",
    "start": "1010160",
    "end": "1015839"
  },
  {
    "text": "write comes in it will just sync with the read container so they will have a different",
    "start": "1015839",
    "end": "1020880"
  },
  {
    "text": "partition key whatever works so you can always use the reading container to actually make your queries",
    "start": "1020880",
    "end": "1029199"
  },
  {
    "text": "i guess much cheaper so storage is cheaper rather than try to go back and",
    "start": "1029199",
    "end": "1034480"
  },
  {
    "text": "re-partition the whole physical partition it might be easier for you to just add a new container",
    "start": "1034480",
    "end": "1040880"
  },
  {
    "text": "that's a no sql in sql server that's a no no because you are multiplying the data but you're not in no you know in",
    "start": "1040880",
    "end": "1046480"
  },
  {
    "text": "sql server anymore so no sql that's that works",
    "start": "1046480",
    "end": "1052000"
  },
  {
    "text": "so as you can see here i'm not sure uh we have in united states",
    "start": "1052000",
    "end": "1057600"
  },
  {
    "text": "we have those stores for amazon returns they just they say friday is five dollars saturday",
    "start": "1057600",
    "end": "1063919"
  },
  {
    "text": "it's four dollars you whatever is there you can just pick it right so don't organize your data like this",
    "start": "1063919",
    "end": "1071679"
  },
  {
    "text": "whenever you pick a you know random partition key each partition you just kind of put all",
    "start": "1071679",
    "end": "1077919"
  },
  {
    "text": "this data in it right and you're going to say after that you know what cosmos tb go and find the sales from new york",
    "start": "1077919",
    "end": "1086960"
  },
  {
    "text": "it's not going to be easy to find that in here cosmos if you have to go dig in here each of them and find the data that's",
    "start": "1086960",
    "end": "1094320"
  },
  {
    "text": "why people say that cosmos db is expensive if we are going to organize the data this way it is going to be expensive",
    "start": "1094320",
    "end": "1101919"
  },
  {
    "text": "if you are going to organize it well it's going to cost you much cheaper because cosmos tv doesn't need to kind",
    "start": "1101919",
    "end": "1107600"
  },
  {
    "text": "of use them as cpu or memory to find your data so it's really about organizing how to organize the data in",
    "start": "1107600",
    "end": "1114320"
  },
  {
    "text": "cosmos tv if you want affordable solutions by cosmos tv",
    "start": "1114320",
    "end": "1119919"
  },
  {
    "text": "now let's give you an example let's say we have four physical partitions",
    "start": "1120880",
    "end": "1127200"
  },
  {
    "start": "1121000",
    "end": "1121000"
  },
  {
    "text": "and we are actually saving posts and our partition key is post id",
    "start": "1127200",
    "end": "1133840"
  },
  {
    "text": "now by just looking at that i'm expecting my rights is going to be very",
    "start": "1133840",
    "end": "1138880"
  },
  {
    "text": "best because post id is going to be unique every time i insert data but whenever i try to read data",
    "start": "1138880",
    "end": "1146480"
  },
  {
    "text": "probably i'm not going to have all the post ids right so if you are reading a specific post id it's going to work",
    "start": "1146480",
    "end": "1152320"
  },
  {
    "text": "great but that's not the real life right most of the you know really usage what happens is you have",
    "start": "1152320",
    "end": "1158799"
  },
  {
    "text": "this grid and it shows you maybe the posts in last 24 hours or the posts from",
    "start": "1158799",
    "end": "1164480"
  },
  {
    "text": "this user or you know that that's usually what a usual report or website kind of shows you",
    "start": "1164480",
    "end": "1171120"
  },
  {
    "text": "if that is the case well i'm kind of screw here because there's no way i can guess the post id for that",
    "start": "1171120",
    "end": "1177200"
  },
  {
    "text": "so if i have a grid like this and i'm showing you you know okay give me the all the posts",
    "start": "1177200",
    "end": "1183600"
  },
  {
    "text": "larger than this date well there is no way i can put the post id here",
    "start": "1183600",
    "end": "1189760"
  },
  {
    "text": "then if i have four physical partitions if this query costs let's say three",
    "start": "1189760",
    "end": "1196559"
  },
  {
    "text": "request units in this case i am multiplying by four so",
    "start": "1196559",
    "end": "1203039"
  },
  {
    "text": "how to fix that right after fix that is still storage",
    "start": "1203039",
    "end": "1209200"
  },
  {
    "start": "1206000",
    "end": "1206000"
  },
  {
    "text": "in cosmos tv well in azure storage is cheap as you can see",
    "start": "1209200",
    "end": "1214559"
  },
  {
    "text": "depends how much data you have it's much easier to actually add a new container",
    "start": "1214559",
    "end": "1220880"
  },
  {
    "text": "and let's say you have 10 gig data well it will be 2.5 dollars to actually",
    "start": "1220880",
    "end": "1227760"
  },
  {
    "text": "fix that problem by creating a new container in our case i don't know maybe",
    "start": "1227760",
    "end": "1232799"
  },
  {
    "text": "well date is really not a good idea to put a partition key but it solves the problem here if that is the only thing i",
    "start": "1232799",
    "end": "1238159"
  },
  {
    "text": "need to worry about maybe that is the way to create a new container with a different partition key",
    "start": "1238159",
    "end": "1244320"
  },
  {
    "text": "and my web application which actually displays that will go to that container not this one because this one works",
    "start": "1244320",
    "end": "1250080"
  },
  {
    "text": "great maybe i'm getting a lot of post and rights are very good in here so",
    "start": "1250080",
    "end": "1256080"
  },
  {
    "text": "if i'm gonna try to reorganize this i might actually break my rights so it's much easier to actually create a",
    "start": "1256080",
    "end": "1262880"
  },
  {
    "text": "new container and fix it this way it will be actually much cheaper to fix it this way",
    "start": "1262880",
    "end": "1269840"
  },
  {
    "text": "and if you don't worry about the change feed change feed is the function whenever a change comes in to your",
    "start": "1269840",
    "end": "1275280"
  },
  {
    "text": "container you can actually trigger an azure function and that azure function can move that",
    "start": "1275280",
    "end": "1281280"
  },
  {
    "text": "data to different container or containers so you can actually sync it in this way",
    "start": "1281280",
    "end": "1288559"
  },
  {
    "text": "now next one i'm going to cover is the page nation let's say we have a web application here",
    "start": "1288960",
    "end": "1296640"
  },
  {
    "start": "1290000",
    "end": "1290000"
  },
  {
    "text": "and we are going to try to run a query the query is going to go to the cosmos",
    "start": "1296640",
    "end": "1302080"
  },
  {
    "text": "tv and cosmos db is gonna have a response so there are a couple of numbers that you actually have control",
    "start": "1302080",
    "end": "1307679"
  },
  {
    "text": "here the first one cosmos cb promises you it's gonna return",
    "start": "1307679",
    "end": "1312880"
  },
  {
    "text": "something in five seconds doesn't mean it's gonna send you everything whatever it finds it's gonna",
    "start": "1312880",
    "end": "1318480"
  },
  {
    "text": "send you something in five seconds so that's one of the cosmos tv promises the second one is we know there's a",
    "start": "1318480",
    "end": "1325360"
  },
  {
    "text": "limit it cannot send more than four megabyte data because to you know to be able to kind",
    "start": "1325360",
    "end": "1332080"
  },
  {
    "text": "of give you something in five seconds there has to be limit so that's the page size of cosmos db return that is the",
    "start": "1332080",
    "end": "1338480"
  },
  {
    "text": "four megabyte limit so what we can do here is we have an actual",
    "start": "1338480",
    "end": "1344720"
  },
  {
    "text": "option name max item count by default it is hundred",
    "start": "1344720",
    "end": "1351200"
  },
  {
    "text": "if you are let's say getting 500 items from cosmos db your query takes 500 you",
    "start": "1351200",
    "end": "1357520"
  },
  {
    "text": "say top 500 right in this case here you are gonna actually hit cosmos tv five times",
    "start": "1357520",
    "end": "1363520"
  },
  {
    "text": "because each time cosmos is gonna return you 100 items because that's what the default is",
    "start": "1363520",
    "end": "1370320"
  },
  {
    "text": "you can change that you can go up and down depending what you need but if you have a grid i don't know maybe this",
    "start": "1370320",
    "end": "1375760"
  },
  {
    "text": "every time you are getting 150 200 by just changing max item count to 200 that",
    "start": "1375760",
    "end": "1381280"
  },
  {
    "text": "will actually save you requesting this because each time you hit the cosmos tv that's going to actually give you a new",
    "start": "1381280",
    "end": "1388480"
  },
  {
    "text": "request unit bill so if you actually hit cosmos db less that will cost you less",
    "start": "1388480",
    "end": "1395600"
  },
  {
    "text": "and to control that in here for example in here rather than creating",
    "start": "1395600",
    "end": "1401039"
  },
  {
    "text": "making 100 i'm making 10. so that's how i change the max item count i",
    "start": "1401039",
    "end": "1406799"
  },
  {
    "text": "use the feed options and just giving a new number here you can do that with the rest api too it",
    "start": "1406799",
    "end": "1413760"
  },
  {
    "text": "you just add the max item count and the http headers and it works the same ready",
    "start": "1413760",
    "end": "1420240"
  },
  {
    "text": "so that was the partitions the next part of this talk is going to be",
    "start": "1420240",
    "end": "1426080"
  },
  {
    "text": "indexing i talked about the partition first because if you think about the sql server that's",
    "start": "1426080",
    "end": "1432400"
  },
  {
    "text": "the whole different way in sql server usually you create your indexes first when you have a lot of data then you",
    "start": "1432400",
    "end": "1438880"
  },
  {
    "text": "create the partitions in cosmos cv you create your partition first and you better create it right because",
    "start": "1438880",
    "end": "1445520"
  },
  {
    "text": "after that if you have the right index it really doesn't matter if you have the if you don't have the right partition",
    "start": "1445520",
    "end": "1451039"
  },
  {
    "text": "uh so indexes in cosmos db is like a tree you have only one file index file",
    "start": "1451039",
    "end": "1457279"
  },
  {
    "text": "and actually let's look at an example let's say this is our json this is what we are saving in",
    "start": "1457279",
    "end": "1463520"
  },
  {
    "text": "cosmos cb and the index file is going to actually look like just like a tree so we're",
    "start": "1463520",
    "end": "1469679"
  },
  {
    "text": "going to have all the items and the data is going to be like just almost like a three leaves under that",
    "start": "1469679",
    "end": "1476000"
  },
  {
    "text": "so every time you try to re-index you are changing this file so and this is",
    "start": "1476000",
    "end": "1481840"
  },
  {
    "text": "per partition if you have 20 partitions you have 20 index in each physical partition",
    "start": "1481840",
    "end": "1489279"
  },
  {
    "text": "that's why sometimes it can take much longer to reindex in cosmos tv because each computer has to actually complete",
    "start": "1489279",
    "end": "1496159"
  },
  {
    "text": "indexing now uh there are three",
    "start": "1496159",
    "end": "1502320"
  },
  {
    "start": "1501000",
    "end": "1501000"
  },
  {
    "text": "modes when it comes to indexes the first one which is the default one is consistent",
    "start": "1502320",
    "end": "1509279"
  },
  {
    "text": "and that is really the the level between the data file and index file",
    "start": "1509279",
    "end": "1514960"
  },
  {
    "text": "that's the consistency really you are picking whichever by pick the consistent you are saying",
    "start": "1514960",
    "end": "1520880"
  },
  {
    "text": "that the between each file is strong constancy",
    "start": "1520880",
    "end": "1526159"
  },
  {
    "text": "whenever we have a new data or data changes here immediately it changes in index file",
    "start": "1526159",
    "end": "1532960"
  },
  {
    "text": "and also if it's the consistent id and underscore ts will get indexed automatically",
    "start": "1532960",
    "end": "1539440"
  },
  {
    "text": "we have another mode lazy which you won't see that much documentation about it which there's a good reason",
    "start": "1539440",
    "end": "1546799"
  },
  {
    "text": "why you might be crazy because usually it cost less whenever you",
    "start": "1546799",
    "end": "1552640"
  },
  {
    "text": "actually for your rides or updates but just anything like anything in the life",
    "start": "1552640",
    "end": "1557919"
  },
  {
    "text": "because it's cheap doesn't mean that it's good so what really happened here is when you",
    "start": "1557919",
    "end": "1562960"
  },
  {
    "text": "pick lazy here you are changing the consistency between data file index file to eventual",
    "start": "1562960",
    "end": "1568960"
  },
  {
    "text": "which means you might have more data here and you might not be you know match the index file",
    "start": "1568960",
    "end": "1575200"
  },
  {
    "text": "what's going to happen in that case is when you write your queries your query might actually use the index file not",
    "start": "1575200",
    "end": "1580480"
  },
  {
    "text": "the data file then well it might not return all the data actually it has because the consistency between those",
    "start": "1580480",
    "end": "1587440"
  },
  {
    "text": "files is lazy and you will just create more problems so it's really not worth it",
    "start": "1587440",
    "end": "1594080"
  },
  {
    "text": "usually people fix that one the main reason whenever they do a bulk load you know updates or changes",
    "start": "1594080",
    "end": "1600720"
  },
  {
    "text": "they just speak lazy so they won't pay i guess that much uh as consistent but the",
    "start": "1600720",
    "end": "1606000"
  },
  {
    "text": "problem is the reality is if this is the first time you are pushing data to call you know cosmos tv",
    "start": "1606000",
    "end": "1611440"
  },
  {
    "text": "you don't want any indexes on it you want nothing in it you want to just push to data as fast as you can then you can",
    "start": "1611440",
    "end": "1618559"
  },
  {
    "text": "go back and re-index whatever you like so my suggestion is if this is the first time you are pushing data a bulk load of",
    "start": "1618559",
    "end": "1624960"
  },
  {
    "text": "data just keep it none after you are done with the data just go",
    "start": "1624960",
    "end": "1630000"
  },
  {
    "text": "back change your indexing policy and move it back to the consistent so that's usually the right way when it comes to",
    "start": "1630000",
    "end": "1637120"
  },
  {
    "text": "bulk load of data in cosmos db by doing that when you say none that means you",
    "start": "1637120",
    "end": "1642720"
  },
  {
    "text": "don't have to change the index file so your writes updates deletes are much faster because it doesn't need to worry",
    "start": "1642720",
    "end": "1648159"
  },
  {
    "text": "about index file also none is good if you are using cosmos db as a key value uh database in",
    "start": "1648159",
    "end": "1655679"
  },
  {
    "text": "that case key is going to be probably your partition key and value well i'm hoping you're not going to look i guess",
    "start": "1655679",
    "end": "1662399"
  },
  {
    "text": "put that in where clause you're not going to look at the value as your filter your filter is going to be key",
    "start": "1662399",
    "end": "1667679"
  },
  {
    "text": "not the value so by just doing the none you will actually save",
    "start": "1667679",
    "end": "1672960"
  },
  {
    "text": "money because index file is not free it's a storage so you need to pay the storage for the index file so if you",
    "start": "1672960",
    "end": "1680320"
  },
  {
    "text": "don't have it it will be cheaper now uh if you look at the index types we",
    "start": "1680320",
    "end": "1686399"
  },
  {
    "start": "1684000",
    "end": "1684000"
  },
  {
    "text": "have three type of indexes in cosmos db the first one is the range index and in probably colors i will say 97 98 percent",
    "start": "1686399",
    "end": "1694159"
  },
  {
    "text": "whatever you have it's going to be a range index those are all your equality queries if you have any kind of range you are",
    "start": "1694159",
    "end": "1700480"
  },
  {
    "text": "looking the you know the range of the date or anything like that everything is going to be in the range index type",
    "start": "1700480",
    "end": "1707440"
  },
  {
    "text": "second one is the geospatial data in the default uh indexing policy you",
    "start": "1707440",
    "end": "1713440"
  },
  {
    "text": "don't have any of them so if you have a geospatial data and if you want to use your spatial functions be sure that you define them in your",
    "start": "1713440",
    "end": "1720000"
  },
  {
    "text": "indexing policy the third one which is the new one is the composite index",
    "start": "1720000",
    "end": "1726080"
  },
  {
    "text": "composite index really a series of range indexes so if you have a where clause",
    "start": "1726080",
    "end": "1731120"
  },
  {
    "text": "maybe you have like five or six kind of filters you can actually put them together with",
    "start": "1731120",
    "end": "1736559"
  },
  {
    "text": "the composite index and actually it will cost you much cheaper because it doesn't have to go and find",
    "start": "1736559",
    "end": "1742480"
  },
  {
    "text": "each range index and try to use them and also you need the composite index if",
    "start": "1742480",
    "end": "1748000"
  },
  {
    "text": "you have order by with multiple properties if without composite index that order by",
    "start": "1748000",
    "end": "1753679"
  },
  {
    "text": "will not work and if you look at the index usage usually if you are in the sql server it",
    "start": "1753679",
    "end": "1760080"
  },
  {
    "text": "gives you a great you know execution plan it kind of tells you where the data is coming from where is it going what",
    "start": "1760080",
    "end": "1765520"
  },
  {
    "text": "type of indexes it uses in cosmos tv we don't have that and but we know that it",
    "start": "1765520",
    "end": "1772960"
  },
  {
    "text": "since we don't know which one your execution plan uses but it's using one of those index seek is the fastest that means you",
    "start": "1772960",
    "end": "1780720"
  },
  {
    "text": "are using an equality filter maybe saying h is 20 right so it's much easier to find that data in the index file",
    "start": "1780720",
    "end": "1787520"
  },
  {
    "text": "but if you are using any kind of range comparison i don't know maybe like you are looking for data between this state",
    "start": "1787520",
    "end": "1792880"
  },
  {
    "text": "and that date so you are using larger or smaller than then you are kind of hitting somewhere here",
    "start": "1792880",
    "end": "1800080"
  },
  {
    "text": "full scan is the worst one and that is a table scan i guess for the sql server that means you are",
    "start": "1800080",
    "end": "1807120"
  },
  {
    "text": "not using any indexes if you have thanked data cosmos db has to go and read the 10 gig",
    "start": "1807120",
    "end": "1813200"
  },
  {
    "text": "data to actually give right give you the query back so try to i guess not try to do no full",
    "start": "1813200",
    "end": "1820159"
  },
  {
    "text": "scans because that's going to cost a lot of requesting is for you so that's really the efficiency",
    "start": "1820159",
    "end": "1825279"
  },
  {
    "text": "which i will have some demos for this in later uh in cosmos tv everything is in json and",
    "start": "1825279",
    "end": "1832320"
  },
  {
    "start": "1828000",
    "end": "1828000"
  },
  {
    "text": "if you there's not that much data type in js right we have mostly string number ball",
    "start": "1832320",
    "end": "1838320"
  },
  {
    "text": "that's it so because most of the data is going to be a string many people use a lot of string system",
    "start": "1838320",
    "end": "1845360"
  },
  {
    "text": "functions like you know you want to maybe replace stuff you want to do l trim ends",
    "start": "1845360",
    "end": "1851200"
  },
  {
    "text": "with contains those are the system functions many people uses",
    "start": "1851200",
    "end": "1856640"
  },
  {
    "text": "this actual graph is telling you which function is using which indexed usage",
    "start": "1856640",
    "end": "1863200"
  },
  {
    "text": "for example uh if you look at the starts with here and if you don't have any kind of case",
    "start": "1863200",
    "end": "1870240"
  },
  {
    "text": "sensitive you are using the start with as it is it will use the expanded index scan so",
    "start": "1870240",
    "end": "1875760"
  },
  {
    "text": "your query will actually cost you cheaper but",
    "start": "1875760",
    "end": "1881279"
  },
  {
    "text": "actually no one means precise index scan so if you are gonna use with the case sensitive it's gonna cost you more",
    "start": "1881279",
    "end": "1888399"
  },
  {
    "text": "as you can see it starts with moving to here we have the string equals here that's really the same thing with the equals",
    "start": "1888399",
    "end": "1894399"
  },
  {
    "text": "too but if you are going to use the case sensitive it's going to actually move back to expanded index scan so it's",
    "start": "1894399",
    "end": "1900720"
  },
  {
    "text": "going to actually cost you more and like contains ends with and regex",
    "start": "1900720",
    "end": "1906720"
  },
  {
    "text": "match actually they are in here and if you are not using like an aggregation or can say sensitive on",
    "start": "1906720",
    "end": "1913120"
  },
  {
    "text": "those you can actually use the indexes for them uh but if you are going to be in case",
    "start": "1913120",
    "end": "1919120"
  },
  {
    "text": "if you're going to put in a case sensitive or aggregation that's going to move to the full scale so that's why i guess any kind of system functions",
    "start": "1919120",
    "end": "1926320"
  },
  {
    "text": "is not a really good idea but in the same time if you can do the same thing maybe you are using contains but",
    "start": "1926320",
    "end": "1934399"
  },
  {
    "text": "looks like starts with actually will give you a cheaper request unit if you can use a start with",
    "start": "1934399",
    "end": "1941440"
  },
  {
    "text": "you know that you are going to actually save request units here or the left so just kind of i guess look",
    "start": "1941440",
    "end": "1948240"
  },
  {
    "text": "at this diagram and by just using the right system functions actually you can save",
    "start": "1948240",
    "end": "1954399"
  },
  {
    "text": "some requests",
    "start": "1954399",
    "end": "1957559"
  },
  {
    "text": "like titles yo what do you mean",
    "start": "1965120",
    "end": "1969880"
  },
  {
    "text": "yes you can but depending on your you know what depends what type of data you are looking if start first actually",
    "start": "1976720",
    "end": "1982880"
  },
  {
    "text": "cheaper i mean if you can do the same thing with the star speed place your stars with that will actually give you a",
    "start": "1982880",
    "end": "1987919"
  },
  {
    "text": "better request unit result all right next one is",
    "start": "1987919",
    "end": "1995600"
  },
  {
    "start": "1993000",
    "end": "1993000"
  },
  {
    "text": "picking how you are going to actually organize your indexing policy there are two ways",
    "start": "1995600",
    "end": "2000960"
  },
  {
    "text": "the first way let's talk about including properties because many people are uh familiar with",
    "start": "2000960",
    "end": "2006399"
  },
  {
    "text": "that one because that's how the sql server works you end up with a table usually you have",
    "start": "2006399",
    "end": "2012240"
  },
  {
    "text": "a primary key in it then you kind of say that okay i want to index h i want to index this column i",
    "start": "2012240",
    "end": "2017840"
  },
  {
    "text": "want to index that column right that's what you do that's really what the including properties are",
    "start": "2017840",
    "end": "2023279"
  },
  {
    "text": "that works great for sql server because usually your schema doesn't change that",
    "start": "2023279",
    "end": "2028480"
  },
  {
    "text": "much and whenever your schema changes you kind of need to add a new column and you can add the index in that point if",
    "start": "2028480",
    "end": "2034640"
  },
  {
    "text": "you like in cosmos tv well it's no sequel so your schema potentially can change anytime",
    "start": "2034640",
    "end": "2041760"
  },
  {
    "text": "so in cosmos db everything is indexed and let's say",
    "start": "2041760",
    "end": "2047440"
  },
  {
    "text": "uh you are maybe introducing two or three more properties to your uh object",
    "start": "2047440",
    "end": "2052480"
  },
  {
    "text": "you do that in your you know c sharp or you know whatever you are using that's gonna actually start to go to",
    "start": "2052480",
    "end": "2057520"
  },
  {
    "text": "cosmos db immediately you don't have to change the schema in cosmos db if you are going to have an index file",
    "start": "2057520",
    "end": "2064878"
  },
  {
    "text": "and you're going to use the included properties with all let's say you just introduce i don't",
    "start": "2064879",
    "end": "2070320"
  },
  {
    "text": "know age and name of a customer those will get start to get automatically",
    "start": "2070320",
    "end": "2075919"
  },
  {
    "text": "index for you so cosmos tv will do that for you that sounds great right",
    "start": "2075919",
    "end": "2082240"
  },
  {
    "text": "but you might be actually adding a totally something useless to like maybe you are adding a description and that's",
    "start": "2082240",
    "end": "2088398"
  },
  {
    "text": "a whole different huge text file or text kind of uh characters",
    "start": "2088399",
    "end": "2093760"
  },
  {
    "text": "and you know that you are never going to put that in your filter in this case if you have that that means",
    "start": "2093760",
    "end": "2098960"
  },
  {
    "text": "you are actually indexing that too so it works great depending what type of i",
    "start": "2098960",
    "end": "2104240"
  },
  {
    "text": "guess properties you are pushing the cosmos tv including properties is really you are",
    "start": "2104240",
    "end": "2109440"
  },
  {
    "text": "saying where you want to spend your data because well that's the storage at the end so if",
    "start": "2109440",
    "end": "2114960"
  },
  {
    "text": "you're going to index everything potentially your index file can be larger than your data file",
    "start": "2114960",
    "end": "2121200"
  },
  {
    "text": "so you kind of need to watch uh which way you want to go um well most of my customers actually",
    "start": "2121200",
    "end": "2128720"
  },
  {
    "text": "choose excluding the uh properties this is great for write heavy applications for example if you have iot",
    "start": "2128720",
    "end": "2135520"
  },
  {
    "text": "and it just sends every you know one second some kind of data you don't really want to worry about the",
    "start": "2135520",
    "end": "2141440"
  },
  {
    "text": "indexing because that to make the right faster well indexing can be a bottleneck out there",
    "start": "2141440",
    "end": "2148480"
  },
  {
    "text": "so in this case you can just exclude and only pick whatever you want to index",
    "start": "2148480",
    "end": "2155119"
  },
  {
    "text": "uh this one actually controls the index file size and this is really telling you",
    "start": "2155119",
    "end": "2160160"
  },
  {
    "text": "that where you don't want to spend your money in cosmos db because you are telling that those are the properties i",
    "start": "2160160",
    "end": "2166320"
  },
  {
    "text": "don't want you to index in other for example stack overflow",
    "start": "2166320",
    "end": "2171520"
  },
  {
    "text": "think about the stack overflow the last one you want to probably index is that chunk of text",
    "start": "2171520",
    "end": "2178880"
  },
  {
    "text": "you might have some classes but if you're going to try to do that your index file is going to go crazy because the storage is going to go crazy",
    "start": "2178880",
    "end": "2187480"
  },
  {
    "text": "all right next one is composite indexes this is new that's the news i guess index we",
    "start": "2188000",
    "end": "2194400"
  },
  {
    "start": "2189000",
    "end": "2189000"
  },
  {
    "text": "have and this is great for the complex filters if you have many filters in your class or this is great for group by",
    "start": "2194400",
    "end": "2201599"
  },
  {
    "text": "order by any aggregates composite index can actually save you a good amount of requests",
    "start": "2201599",
    "end": "2207599"
  },
  {
    "text": "order is important so let's say you have a where clause and your web class says that i want to",
    "start": "2207599",
    "end": "2215040"
  },
  {
    "text": "look at the age i want to look at the city and i want to look at the name",
    "start": "2215040",
    "end": "2220640"
  },
  {
    "text": "to be able to use the composite index you have to declare composite index in the same order",
    "start": "2220640",
    "end": "2226880"
  },
  {
    "text": "if it's not in the same order composite index is not going to get used by cosmos db",
    "start": "2226880",
    "end": "2232079"
  },
  {
    "text": "so the or the way that you declare is important you can declare up to eight properties",
    "start": "2232079",
    "end": "2238960"
  },
  {
    "text": "per composite index in cosmos tv geospatial indexes are not supported",
    "start": "2238960",
    "end": "2246079"
  },
  {
    "text": "and again to actually see some difference with the composite indexes you want to be sure that there is high",
    "start": "2246079",
    "end": "2251200"
  },
  {
    "text": "cardinality if there's no high cardinality on that items you are looking for you are not",
    "start": "2251200",
    "end": "2256240"
  },
  {
    "text": "gonna see that much uh change by requesting it and also you should have like a lot of",
    "start": "2256240",
    "end": "2262000"
  },
  {
    "text": "data uh to be able to see some changes in composite index if you have a small amount of data composite index might not",
    "start": "2262000",
    "end": "2269200"
  },
  {
    "text": "actually help you that much all right next one whenever you try to",
    "start": "2269200",
    "end": "2275680"
  },
  {
    "start": "2273000",
    "end": "2273000"
  },
  {
    "text": "re-index right it happens so you want to change all the indexes in",
    "start": "2275680",
    "end": "2280880"
  },
  {
    "text": "the same time you don't want to go like in sql server i want to index this column first and that column for next",
    "start": "2280880",
    "end": "2286720"
  },
  {
    "text": "and that column later you want to make all those indexes together because as i said before potentially you might have",
    "start": "2286720",
    "end": "2292320"
  },
  {
    "text": "20 25 physical partitions that means you are sending this index transformation to all of them",
    "start": "2292320",
    "end": "2298560"
  },
  {
    "text": "so all of them has to be completed for this reindexing to be done",
    "start": "2298560",
    "end": "2304000"
  },
  {
    "text": "whenever that's happening production we'll still use the current indexes so that's this is not going to really break",
    "start": "2304000",
    "end": "2309119"
  },
  {
    "text": "anything in the production and index transformation is kind of free",
    "start": "2309119",
    "end": "2314960"
  },
  {
    "text": "not really because let's say you have a request units for your application thousand requests per second right but your web",
    "start": "2314960",
    "end": "2322079"
  },
  {
    "text": "application uses maybe 800 constantly and 200 is out there just to be safe",
    "start": "2322079",
    "end": "2327359"
  },
  {
    "text": "that 200 is gonna get use three index so depending how much i guess gap you",
    "start": "2327359",
    "end": "2333119"
  },
  {
    "text": "have out there potentially you're indexing can take four days to complete",
    "start": "2333119",
    "end": "2339200"
  },
  {
    "text": "always you cannot change every question is higher to make the process faster but don't forget that threshold that we",
    "start": "2339200",
    "end": "2346160"
  },
  {
    "text": "were talking about 6 000 we don't want to pass that because that's going to actually create a whole new physical partition as long as you don't pass that",
    "start": "2346160",
    "end": "2352880"
  },
  {
    "text": "limit you can actually change the requestedness and make the process higher you know faster if you like",
    "start": "2352880",
    "end": "2359920"
  },
  {
    "start": "2360000",
    "end": "2360000"
  },
  {
    "text": "other uh item we have is the point read and versus to queries",
    "start": "2361280",
    "end": "2367119"
  },
  {
    "text": "sql server doesn't have anything like this right everything has to be query but in cosmos db you have this option a",
    "start": "2367119",
    "end": "2373760"
  },
  {
    "text": "cheaper option to pull data from cosmos db which named point read you can do",
    "start": "2373760",
    "end": "2379359"
  },
  {
    "text": "that only from sdk nowhere else so if you compare them you know query",
    "start": "2379359",
    "end": "2384400"
  },
  {
    "text": "the biggest difference between them is there's no query optimization in point read you are really telling cosmos to be",
    "start": "2384400",
    "end": "2390880"
  },
  {
    "text": "where data is because you have to pass the partition key and your id by you know giving those two numbers",
    "start": "2390880",
    "end": "2397119"
  },
  {
    "text": "cosmos db know exactly where that data is it doesn't need to go and run query optimization",
    "start": "2397119",
    "end": "2402720"
  },
  {
    "text": "and as i said before a partition key is required and this will only return one item one json document it won't return",
    "start": "2402720",
    "end": "2410079"
  },
  {
    "text": "more than that uh you can use both but if you actually design your application and let's say",
    "start": "2410079",
    "end": "2417119"
  },
  {
    "text": "you have the for example grid maybe shows all the posts and if you can actually",
    "start": "2417119",
    "end": "2422160"
  },
  {
    "text": "uh know where the partition key and the id of each rows",
    "start": "2422160",
    "end": "2427599"
  },
  {
    "text": "when somebody clicks on it and you try to get pull more data you can do a point read rather than a query and it will",
    "start": "2427599",
    "end": "2433680"
  },
  {
    "text": "cost you one request unit rather than well at least 2.3 so you will",
    "start": "2433680",
    "end": "2439280"
  },
  {
    "text": "save a lot of requests by then but you have to kind of organize that before when you have the data so you",
    "start": "2439280",
    "end": "2445359"
  },
  {
    "text": "kind of need to study on that and figure out next one which is a new one is the",
    "start": "2445359",
    "end": "2450800"
  },
  {
    "start": "2449000",
    "end": "2449000"
  },
  {
    "text": "indexing metrics this is available only in.net sdk java and rest api",
    "start": "2450800",
    "end": "2458000"
  },
  {
    "text": "and when you actually turn this on cosmos dbx will suggest you which indexes you",
    "start": "2458000",
    "end": "2463520"
  },
  {
    "text": "should maybe have in your queries uh there are like two options one is",
    "start": "2463520",
    "end": "2469680"
  },
  {
    "text": "utilized single indexes the other one is the utilized or the potential uh indexes",
    "start": "2469680",
    "end": "2476720"
  },
  {
    "text": "if something is under the utilized indexes you don't want to touch that that means cosmos tv is using it",
    "start": "2476720",
    "end": "2482480"
  },
  {
    "text": "but you can try all the potential indexes don't forget that's a suggestion that",
    "start": "2482480",
    "end": "2489040"
  },
  {
    "text": "doesn't mean that it's going to make this big you know change just like in sql server sometimes it kind of tells",
    "start": "2489040",
    "end": "2494640"
  },
  {
    "text": "you can you create this index it will make it maybe 90 percent faster or something like that it's just a",
    "start": "2494640",
    "end": "2499680"
  },
  {
    "text": "suggestion just test it before you push in the production and be sure that actually it's going to be useful",
    "start": "2499680",
    "end": "2507319"
  },
  {
    "text": "so how are you gonna do that the first you need to find an expensive query in production usually diagnostic",
    "start": "2508800",
    "end": "2516000"
  },
  {
    "text": "locks is the first place to check or you know i have some customers actually they log the request unit with the query in",
    "start": "2516000",
    "end": "2522960"
  },
  {
    "text": "their kind of database to kind of look at them later so first you have to find a query then you can just turn on the populate",
    "start": "2522960",
    "end": "2530319"
  },
  {
    "text": "index metrics to true that will actually make every every uh",
    "start": "2530319",
    "end": "2535839"
  },
  {
    "text": "queries to come up with the popular index suggestions in your just in the cosmos db's response",
    "start": "2535839",
    "end": "2543359"
  },
  {
    "text": "so just focus on whatever you see on the potential indexes this can actually give",
    "start": "2543359",
    "end": "2549599"
  },
  {
    "text": "you as i said before just try it before you push on the production if it suggests you more than one",
    "start": "2549599",
    "end": "2556880"
  },
  {
    "text": "try to make those changes in one indexing policy change don't try to kind of add them again and again later and",
    "start": "2556880",
    "end": "2564960"
  },
  {
    "text": "try this in the non-production first you don't want to push this in production because if it's not going to work then",
    "start": "2564960",
    "end": "2570079"
  },
  {
    "text": "you might need to go back and re-index the whole thing again so you can do that in the rest api actually",
    "start": "2570079",
    "end": "2577520"
  },
  {
    "text": "i found this one this is not documented in cosmos tv so in the request header all you have to do",
    "start": "2577520",
    "end": "2584160"
  },
  {
    "text": "is add this to the header and in the response you will get this value which is a base64 format",
    "start": "2584160",
    "end": "2591359"
  },
  {
    "text": "so after that you kind of need to go and get the base64 format and it comes up as",
    "start": "2591359",
    "end": "2597920"
  },
  {
    "text": "json object for the indexing metrics this works for the postman but you kind",
    "start": "2597920",
    "end": "2604400"
  },
  {
    "text": "of need to i guess uh convert that to string to see it if you if you want this is available in rest api",
    "start": "2604400",
    "end": "2611520"
  },
  {
    "start": "2611000",
    "end": "2611000"
  },
  {
    "text": "all right next one is integrated cache so you can cache data in cosmos tv this is pretty new too and i think it's in",
    "start": "2611520",
    "end": "2618000"
  },
  {
    "text": "public preview right now so it's not like globally available yet generally available yet so",
    "start": "2618000",
    "end": "2623440"
  },
  {
    "text": "what's actually happening here is there are different ways to connect the cosmos db and most common one is the",
    "start": "2623440",
    "end": "2629920"
  },
  {
    "text": "gateway server which means that we have the web application here try to pull data",
    "start": "2629920",
    "end": "2636240"
  },
  {
    "text": "in this case we have a gateway server in the middle so that's where actual web application make the request from",
    "start": "2636240",
    "end": "2641680"
  },
  {
    "text": "and gateway server go gets the the data and returns back to you",
    "start": "2641680",
    "end": "2647839"
  },
  {
    "text": "by having the dedicated gateway server usually you actually share this with",
    "start": "2647839",
    "end": "2653119"
  },
  {
    "text": "other cosmos tv customers that's it doesn't cost you money and there are different costs cosmos db",
    "start": "2653119",
    "end": "2658640"
  },
  {
    "text": "customers hitting the same one and this is actually responsible to get the data for each customer in this case you are actually buying",
    "start": "2658640",
    "end": "2666079"
  },
  {
    "text": "your own gateway server from cosmos db so this is getting used by only you",
    "start": "2666079",
    "end": "2672800"
  },
  {
    "text": "and by doing that cosmos db actually did something very interesting here they",
    "start": "2672800",
    "end": "2677920"
  },
  {
    "text": "wanted to add new features to the database engine but they didn't want to go back and put that code in the",
    "start": "2677920",
    "end": "2683119"
  },
  {
    "text": "database engine that caching functionality well whenever you add a new feature in any kind of",
    "start": "2683119",
    "end": "2688800"
  },
  {
    "text": "product potentially you add bugs right in this case they start to actually put",
    "start": "2688800",
    "end": "2694560"
  },
  {
    "text": "the new uh features in this i guess middleware here",
    "start": "2694560",
    "end": "2699760"
  },
  {
    "text": "so that is available if you have dedicated gateway server and you make the request",
    "start": "2699760",
    "end": "2705119"
  },
  {
    "text": "uh the the consistency between your application and the cosmos tv must be eventual for this to work",
    "start": "2705119",
    "end": "2713040"
  },
  {
    "text": "i'm not saying go and change your consistency for the whole database but you can change for only the query you",
    "start": "2713040",
    "end": "2719200"
  },
  {
    "text": "want to cache so that can be a query specific uh consultancy when you do that if you are reading the",
    "start": "2719200",
    "end": "2726000"
  },
  {
    "text": "same data again again well guess what uh the first one is going to cost you let's say i don't know 20 30 request units and",
    "start": "2726000",
    "end": "2733200"
  },
  {
    "text": "after that it's going to cost you zero because the data is going to get cached in the middle here and it's never going",
    "start": "2733200",
    "end": "2738319"
  },
  {
    "text": "to hit the cosmos tv so you have controls you can say i want to cache it for 30 minutes one hour whatever",
    "start": "2738319",
    "end": "2743920"
  },
  {
    "text": "uh this will actually save you a lot of money if you are trying to read the same data again and again",
    "start": "2743920",
    "end": "2750319"
  },
  {
    "text": "uh let's see here the only thing as i said before it's not free so you have to pick",
    "start": "2750319",
    "end": "2755839"
  },
  {
    "text": "one of those options here depending what you need uh that's how much it costs you",
    "start": "2755839",
    "end": "2761839"
  },
  {
    "text": "so you kind of need to compare this i guess price with the request units that you might save per month and if it makes",
    "start": "2761839",
    "end": "2768800"
  },
  {
    "text": "sense you can actually you know get a gateway server if not you know it might not be even",
    "start": "2768800",
    "end": "2774400"
  },
  {
    "text": "worth it it caches is great but if you are not reading the same data again again it's gonna be useless",
    "start": "2774400",
    "end": "2781680"
  },
  {
    "text": "now order by want that is a special one",
    "start": "2781680",
    "end": "2788960"
  },
  {
    "text": "i'm going to show you right now how to do this one this one is pretty easy you don't need to really know that much",
    "start": "2788960",
    "end": "2794240"
  },
  {
    "text": "what's going on if you compare this to the sql server if you are going to say dba oh i want to",
    "start": "2794240",
    "end": "2800160"
  },
  {
    "text": "put the order by in my julie they said oh no why don't you do that into your c sharp code right",
    "start": "2800160",
    "end": "2806079"
  },
  {
    "text": "well you're going to say there's a lot of you know pressure on the c shop so i don't want to do this and i want to do this in database that's why i have the",
    "start": "2806079",
    "end": "2812319"
  },
  {
    "text": "database so that's usually how the sql server in cosmos tv it's totally different so i'm gonna",
    "start": "2812319",
    "end": "2818480"
  },
  {
    "text": "actually show you right now so let me stop this one now i'm gonna go",
    "start": "2818480",
    "end": "2828280"
  },
  {
    "text": "now this is actually vs code extension i wrote and it's only for cosmos tv you",
    "start": "2830640",
    "end": "2836160"
  },
  {
    "text": "can download it for free this is for the community it's always going to be free so it's going to ask your connection",
    "start": "2836160",
    "end": "2841839"
  },
  {
    "text": "string in the beginning after you give the connection string it's going to fill up all your databases and all the",
    "start": "2841839",
    "end": "2846960"
  },
  {
    "text": "containers for each of them so in here i have picked a stack overflow my",
    "start": "2846960",
    "end": "2852000"
  },
  {
    "text": "database and this is my container i talk about the physical partition so you can actually see how important it is",
    "start": "2852000",
    "end": "2858559"
  },
  {
    "text": "this one when you actually click here it's gonna give you physical partition of this container i only won",
    "start": "2858559",
    "end": "2866240"
  },
  {
    "text": "so really i don't need to worry about that much about my partition key because i'm always gonna hit to this physical",
    "start": "2866240",
    "end": "2872000"
  },
  {
    "text": "partition but if i change this one let's say actually",
    "start": "2872000",
    "end": "2878000"
  },
  {
    "text": "much more data right and if i click here this one actually has",
    "start": "2878000",
    "end": "2883599"
  },
  {
    "text": "five physical partitions so if i don't have the partition key in my query i'm gonna hit",
    "start": "2883599",
    "end": "2890720"
  },
  {
    "text": "to five physical partitions so that button is kind of uh",
    "start": "2890720",
    "end": "2895760"
  },
  {
    "text": "i guess useful so let me actually go back here",
    "start": "2895760",
    "end": "2901040"
  },
  {
    "text": "and i guess that's another tip if you want to clear the screen",
    "start": "2901040",
    "end": "2907760"
  },
  {
    "text": "select top zero of course you actually nothing so nothing returns see it's like dos clr i",
    "start": "2907760",
    "end": "2915200"
  },
  {
    "text": "guess so in here before i start let me actually look at the options here",
    "start": "2915200",
    "end": "2921440"
  },
  {
    "text": "you want to be sure that displaying index metrics is available is on so you will see this tab here",
    "start": "2921440",
    "end": "2929119"
  },
  {
    "text": "so let's actually start with this one first so i'm gonna pick the top hundred for the owner user id one",
    "start": "2929119",
    "end": "2935599"
  },
  {
    "text": "since indexing metrics is available it looks like this cost me six point fifty five sixty eight items are coming",
    "start": "2935599",
    "end": "2942960"
  },
  {
    "text": "and you can see that cosmos db is using owner user id index",
    "start": "2942960",
    "end": "2948960"
  },
  {
    "text": "this is my indexing policy here as you can see everything is index so",
    "start": "2948960",
    "end": "2955280"
  },
  {
    "text": "really i don't need to worry about because everything is indexed here but if my core is going to get a little",
    "start": "2955280",
    "end": "2961520"
  },
  {
    "text": "bit more complex than that and what's going to actually happen here is when i execute this one",
    "start": "2961520",
    "end": "2968839"
  },
  {
    "text": "now cosmos db is using owner user id and score and it suggests you maybe if you",
    "start": "2968839",
    "end": "2975119"
  },
  {
    "text": "actually create a composite index to both of them then you know you might be actually seeing some changes with the request",
    "start": "2975119",
    "end": "2981839"
  },
  {
    "text": "unit here and as your uh query get i guess more complex we add order by",
    "start": "2981839",
    "end": "2988640"
  },
  {
    "text": "here well indexing matrix is going to actually give you more options so",
    "start": "2988640",
    "end": "2995359"
  },
  {
    "text": "you know you can create both of them in test environment and see what type of changes",
    "start": "2995359",
    "end": "3001599"
  },
  {
    "text": "you're gonna see if it's worth it you can do this in production but in this way cosmos tv actually suggests you uh",
    "start": "3001599",
    "end": "3007920"
  },
  {
    "text": "what indexes you should use and you should not touch in here",
    "start": "3007920",
    "end": "3013839"
  },
  {
    "text": "next one we talk about pagination so let's say as i say before my",
    "start": "3014319",
    "end": "3021200"
  },
  {
    "text": "uh whenever you make a request the default number is hundred always cosmos is going to give you 100",
    "start": "3021200",
    "end": "3027440"
  },
  {
    "text": "items so if i'm going to run this this says select stop 99 let's see how much that's",
    "start": "3027440",
    "end": "3033680"
  },
  {
    "text": "going to actually cost me let's start with this shouldn't be that bad",
    "start": "3033680",
    "end": "3039200"
  },
  {
    "text": "6.6.06 well if i'm gonna pass",
    "start": "3039200",
    "end": "3046160"
  },
  {
    "text": "under it let's see what type of i guess change we",
    "start": "3046160",
    "end": "3051839"
  },
  {
    "text": "are gonna see here it was six let's say six",
    "start": "3051839",
    "end": "3056880"
  },
  {
    "text": "when this one runs we're actually hitting cosmos db twice that's why you see almost like a fifty percent jump",
    "start": "3056880",
    "end": "3062960"
  },
  {
    "text": "here now it costs six or six plus whatever actually left so by just",
    "start": "3062960",
    "end": "3070880"
  },
  {
    "text": "to change that you can actually go here and you can do this in sdk this one actually is showing you after you change",
    "start": "3070880",
    "end": "3077760"
  },
  {
    "text": "an sdk if i make this 150 that means i'm going to actually hit the cosmos db",
    "start": "3077760",
    "end": "3083440"
  },
  {
    "text": "and it's going to return 150. so if i'm going to run the same query 839 now",
    "start": "3083440",
    "end": "3089520"
  },
  {
    "text": "now it should cost me cheaper because it doesn't has to go and hit the cosmos db twice",
    "start": "3089520",
    "end": "3095280"
  },
  {
    "text": "as you can see it goes back to six now",
    "start": "3095280",
    "end": "3102000"
  },
  {
    "text": "i think it's time to actually show my order by one now",
    "start": "3102160",
    "end": "3107920"
  },
  {
    "text": "look at this function here i am picking top 100 and i am setting the contains",
    "start": "3107920",
    "end": "3114800"
  },
  {
    "text": "function and i'm looking if sql is in title and this is a pretty large this is close",
    "start": "3114800",
    "end": "3120400"
  },
  {
    "text": "to i think 30 or 40 gig data so it's going to cost a good amount of",
    "start": "3120400",
    "end": "3126640"
  },
  {
    "text": "requestions when i run this it cost me 161 so that's pretty high and",
    "start": "3126640",
    "end": "3133680"
  },
  {
    "text": "in this case there's not that much really i can do here i'm just looking for title it's using the title as an",
    "start": "3133680",
    "end": "3139280"
  },
  {
    "text": "index anyway there's no composite index to make this better but believe it or not",
    "start": "3139280",
    "end": "3145200"
  },
  {
    "text": "by just adding the order by here we are gonna add the order by",
    "start": "3145200",
    "end": "3151200"
  },
  {
    "text": "and we are gonna say i guess focus focus right let's see what's gonna happen it was",
    "start": "3151200",
    "end": "3156400"
  },
  {
    "text": "161. 14. it's more than 90 percent you actually",
    "start": "3156400",
    "end": "3163599"
  },
  {
    "text": "gain here i can actually do this in many cases not just for contains",
    "start": "3163599",
    "end": "3169359"
  },
  {
    "text": "let's go back you can do that with the like if i run the like here",
    "start": "3169359",
    "end": "3175680"
  },
  {
    "text": "and execute this one that should be the same 161.",
    "start": "3175760",
    "end": "3182640"
  },
  {
    "text": "by just adding that order by and using the same property here this should actually work the same way",
    "start": "3182640",
    "end": "3191119"
  },
  {
    "text": "and when i actually show this to the dba says like what what happened because when you use the order buying sql server",
    "start": "3191119",
    "end": "3197040"
  },
  {
    "text": "it usually gets worse not better right so as you can see 14 again so you have",
    "start": "3197040",
    "end": "3202640"
  },
  {
    "text": "like another 90 plus percentage gain here it's got cheaper by just adding the",
    "start": "3202640",
    "end": "3208160"
  },
  {
    "text": "order by what else we have here let's see ends with another system function i'm looking",
    "start": "3208160",
    "end": "3214319"
  },
  {
    "text": "at the titles ends with sql executed",
    "start": "3214319",
    "end": "3220160"
  },
  {
    "text": "that's a total different function so well still costs 161.",
    "start": "3220240",
    "end": "3225520"
  },
  {
    "text": "if i'm gonna go and add my title here let's see what's going to happen here",
    "start": "3225520",
    "end": "3232400"
  },
  {
    "text": "161 is 37 so maybe it's not 90 percent but it's",
    "start": "3234400",
    "end": "3239599"
  },
  {
    "text": "much better than 161. now we can actually do this with regex",
    "start": "3239599",
    "end": "3246240"
  },
  {
    "text": "match that should work the same way i'm not sure how much this is going to",
    "start": "3246240",
    "end": "3251680"
  },
  {
    "text": "cost so you can use the reject max you can put your regex function here looking for title that's",
    "start": "3251680",
    "end": "3258240"
  },
  {
    "text": "even worse 314. imagine you are running that",
    "start": "3258240",
    "end": "3263440"
  },
  {
    "text": "in a application and it's costing you that much every time you run and if you run it multiple times then that's going to",
    "start": "3263440",
    "end": "3269760"
  },
  {
    "text": "be a really i guess an expensive bill",
    "start": "3269760",
    "end": "3274880"
  },
  {
    "text": "so if you go here and by just putting the title here it was 314 i think",
    "start": "3274880",
    "end": "3282960"
  },
  {
    "text": "59. so as i said before that's probably the easiest optimization",
    "start": "3282960",
    "end": "3288640"
  },
  {
    "text": "you can really you know think of and you i'm sure you'll remember uh",
    "start": "3288640",
    "end": "3294559"
  },
  {
    "text": "actually it can work for the ranges too in here you can see that we are looking for data between these two dates",
    "start": "3294559",
    "end": "3301680"
  },
  {
    "text": "so i'm not even using a system function here so let's actually run this first",
    "start": "3301680",
    "end": "3308480"
  },
  {
    "text": "give me the top 100 between those two dates and let's see what we see 64.",
    "start": "3308480",
    "end": "3317440"
  },
  {
    "text": "you can see actual results in this tab here and if you go back and add your order by here and say",
    "start": "3317440",
    "end": "3324240"
  },
  {
    "text": "ocus pocos 64 should go down to 8.",
    "start": "3324240",
    "end": "3330480"
  },
  {
    "text": "so order by can be your best friend in cosmos tv",
    "start": "3330480",
    "end": "3336400"
  },
  {
    "text": "the only thing you want to be careful when you're using the order by if the property you are ordering by is",
    "start": "3336400",
    "end": "3344559"
  },
  {
    "text": "undefined in any of the json function json properties it will not return that",
    "start": "3344559",
    "end": "3350400"
  },
  {
    "text": "property that uh json document so hey let's actually look at this one",
    "start": "3350400",
    "end": "3356000"
  },
  {
    "text": "so in here i'm looking all the owner user id one data let's see how many do i have",
    "start": "3356000",
    "end": "3362240"
  },
  {
    "text": "i have 68 json documents now",
    "start": "3362240",
    "end": "3368240"
  },
  {
    "text": "i create this one just for the i guess the demo this so i'm looking specifically",
    "start": "3368240",
    "end": "3373920"
  },
  {
    "text": "this data here so when i run this it should return one item",
    "start": "3373920",
    "end": "3380160"
  },
  {
    "text": "as you can see the problem is i'm gonna try to order this by let's say score right",
    "start": "3382000",
    "end": "3387599"
  },
  {
    "text": "but the score is not here but i know that the other items with the",
    "start": "3387599",
    "end": "3392960"
  },
  {
    "text": "same owner user id has that score so one one of the items does not have it",
    "start": "3392960",
    "end": "3398720"
  },
  {
    "text": "if i'm gonna order this buy with the score same exact query",
    "start": "3398720",
    "end": "3404559"
  },
  {
    "text": "and execute it it's going to return nothing because score",
    "start": "3404559",
    "end": "3410240"
  },
  {
    "text": "is not in that json document you can fix this problem one way right",
    "start": "3410240",
    "end": "3416640"
  },
  {
    "text": "now this will happen only if you index by everything if you will actually go and create an",
    "start": "3416640",
    "end": "3422960"
  },
  {
    "text": "included properties and make the score index manually here then you won't be in this situation",
    "start": "3422960",
    "end": "3430400"
  },
  {
    "text": "so but if you have that default indexing policy it just indexes everything",
    "start": "3430400",
    "end": "3435440"
  },
  {
    "text": "then you might have this problem so if you actually add that score manually to indexing properties it should work",
    "start": "3435440",
    "end": "3442960"
  },
  {
    "text": "and it will actually return the data then",
    "start": "3442960",
    "end": "3447799"
  },
  {
    "text": "as i said before you can download this one right here you should find it out there for the",
    "start": "3449359",
    "end": "3456720"
  },
  {
    "text": "cosmos db studio if you search for and it's free it's great for reading data it doesn't",
    "start": "3456720",
    "end": "3463599"
  },
  {
    "text": "have any kind of writing or changing policy functionality yet",
    "start": "3463599",
    "end": "3469839"
  },
  {
    "text": "i'm still working on it and what else it can actually do if you have do you guys have like any",
    "start": "3469839",
    "end": "3476079"
  },
  {
    "text": "geospatial data in your databases but what else it can actually do here is",
    "start": "3476079",
    "end": "3483040"
  },
  {
    "text": "it's actually let me show you that too [Music]",
    "start": "3483040",
    "end": "3489690"
  },
  {
    "text": "i need to find the cosmos well what actually can do here is it is a map so in the options you just tell",
    "start": "3493119",
    "end": "3500960"
  },
  {
    "text": "application where the spatial geospatial data is in my case it's the location",
    "start": "3500960",
    "end": "3506319"
  },
  {
    "text": "and whenever you actually go here and",
    "start": "3506319",
    "end": "3511839"
  },
  {
    "text": "do this it will actually go and find the data under those properties",
    "start": "3511839",
    "end": "3517040"
  },
  {
    "text": "in this case it's not going to find anything because no that's not the right connection string i have but that's how",
    "start": "3517040",
    "end": "3522799"
  },
  {
    "text": "it actually works uh in the back end and it will actually show you the geospatial data query on top too so if you have the",
    "start": "3522799",
    "end": "3530240"
  },
  {
    "text": "geospatial data it can be useful",
    "start": "3530240",
    "end": "3534319"
  },
  {
    "text": "all right well let's go back here",
    "start": "3536000",
    "end": "3542318"
  },
  {
    "text": "and well that's all i have for you today i hope everybody learned something new",
    "start": "3542839",
    "end": "3548640"
  },
  {
    "text": "today and please give me feedback i think when you are leaving they're going to ask you cards so if you can give me a feedback",
    "start": "3548640",
    "end": "3555119"
  },
  {
    "text": "i'll be more than happy to kind of look at the results and if you have any questions i can answer now or if you",
    "start": "3555119",
    "end": "3560640"
  },
  {
    "text": "will have questions come up later please you know follow me from the linkedin or twitter i will be more than happy to",
    "start": "3560640",
    "end": "3566319"
  },
  {
    "text": "answer them thank you",
    "start": "3566319",
    "end": "3571078"
  },
  {
    "text": "you",
    "start": "3577119",
    "end": "3579200"
  }
]