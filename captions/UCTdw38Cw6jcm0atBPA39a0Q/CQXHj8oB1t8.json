[
  {
    "text": "all right let's get the last few stragglers",
    "start": "3800",
    "end": "9360"
  },
  {
    "text": "uh inside and we'll get started uh if you're thinking that oh no",
    "start": "9360",
    "end": "14839"
  },
  {
    "text": "there's a bearded guy in a Fel shirt going to talk to me about programming and you're scared of huge words and",
    "start": "14839",
    "end": "21000"
  },
  {
    "text": "difficult Theory uh you might be right so this is in Praise of programming",
    "start": "21000",
    "end": "28000"
  },
  {
    "text": "minimalism uh my name is Ian uh I work as a newsroom developer at nrk that",
    "start": "28000",
    "end": "35200"
  },
  {
    "text": "means I help out making news more understandable uh comprehensible and uh",
    "start": "35200",
    "end": "41520"
  },
  {
    "text": "exciting exciting uh and also in my spare time I like to thinker with weird programming",
    "start": "41520",
    "end": "47280"
  },
  {
    "text": "languages and creative programming which I guess makes me like the the overlap in",
    "start": "47280",
    "end": "52600"
  },
  {
    "text": "Dylan's vend diagram from yesterday uh this talk is about",
    "start": "52600",
    "end": "58280"
  },
  {
    "text": "programming minimalism because sometimes programming to us uh programmers is as water to the Goldfish",
    "start": "58280",
    "end": "65760"
  },
  {
    "text": "it's easy to take things for granted or get stuck thinking we have solved the problem a little careful consideration",
    "start": "65760",
    "end": "72759"
  },
  {
    "text": "and exploration is both fun and necessary every now and",
    "start": "72759",
    "end": "77759"
  },
  {
    "text": "then as well as reminding ourselves that what water is is smart um minimalism at",
    "start": "78320",
    "end": "85799"
  },
  {
    "text": "its core isn't really about owning the Fest things even if you could make do with your things uh and",
    "start": "85799",
    "end": "93159"
  },
  {
    "text": "therefore I'm not going to like Marie condo your favorite programming language or try to convince you that there is some sort of PR programming language out",
    "start": "93159",
    "end": "100000"
  },
  {
    "text": "there that is more virtuous to use for some measure of virtue that's not the point um code is IM material it would be",
    "start": "100000",
    "end": "107600"
  },
  {
    "text": "pointless and if you get that P come talk to me later um uh just like we",
    "start": "107600",
    "end": "113040"
  },
  {
    "text": "would examine our lives and ask ourselves every now and then which things we value and what uh things have",
    "start": "113040",
    "end": "120200"
  },
  {
    "text": "a positive impact on our life we could examine our programming languages and ask ourselves which part",
    "start": "120200",
    "end": "126520"
  },
  {
    "text": "we value which parts we value and which parts have a positive impact on our",
    "start": "126520",
    "end": "131879"
  },
  {
    "text": "programs like dear undefined what's your value that would be an interesting conversation to have um and to truly",
    "start": "131879",
    "end": "139760"
  },
  {
    "text": "answer that question we would have to take away all things remember to laugh okay more ha or",
    "start": "139760",
    "end": "146360"
  },
  {
    "text": "something uh but no really uh taking away things teach us about their",
    "start": "146360",
    "end": "152400"
  },
  {
    "text": "value and even if the point isn't whether we can do without it taking the time to consider each piece of a big",
    "start": "152400",
    "end": "158760"
  },
  {
    "text": "puzzle is an interesting mental exercise in and of",
    "start": "158760",
    "end": "163439"
  },
  {
    "text": "itself also like satisfying your own curiosity is a perfectly valid reason to do something and uh you might end up",
    "start": "164640",
    "end": "171400"
  },
  {
    "text": "making a tiger or something which is a pretty cool thing to do uh if we're going to talk about",
    "start": "171400",
    "end": "177000"
  },
  {
    "text": "taking apart a programming language we're going to have to have some idea of what a programming",
    "start": "177000",
    "end": "182319"
  },
  {
    "text": "language is made up of and here comes syntax and semantics two of the most exciting words",
    "start": "182319",
    "end": "189519"
  },
  {
    "text": "I know uh syntax dictates the form of a program like the shape of things which",
    "start": "189519",
    "end": "195840"
  },
  {
    "text": "rules they have to follow to in order to make a valid program and so forth and then you have semantics which",
    "start": "195840",
    "end": "201720"
  },
  {
    "text": "dictate the meaning of program so given like a syntactically valid program the semantics dictate what the program",
    "start": "201720",
    "end": "208760"
  },
  {
    "text": "does given uh these two programs from two different languages I picked uh one",
    "start": "208760",
    "end": "215080"
  },
  {
    "text": "language that's hopefully familiar to you guys and uh one language that I find interesting and I'll leave it to you to",
    "start": "215080",
    "end": "220920"
  },
  {
    "text": "make to figure out which one switch uh here we have two two languages uh two programs they are syntactically similar",
    "start": "220920",
    "end": "229360"
  },
  {
    "text": "but they have they evalu to different things so they are different in semantics if we change a little bit",
    "start": "229360",
    "end": "235760"
  },
  {
    "text": "around uh we get something that's semantically similar but have a difference syntax",
    "start": "235760",
    "end": "241120"
  },
  {
    "text": "so syntax and semantics are deeply interconnected if you want a thing to",
    "start": "241120",
    "end": "246480"
  },
  {
    "text": "have different behavior in a different context you usually reach for syntax to make that happen and especially in programming",
    "start": "246480",
    "end": "253480"
  },
  {
    "text": "languages uh where relying purely on contextual information is highly impractical like uh when you're trying",
    "start": "253480",
    "end": "261160"
  },
  {
    "text": "to like parse natural language you can always like look around the words surround surrounding your the word you're trying to find the meaning of but",
    "start": "261160",
    "end": "267759"
  },
  {
    "text": "that is uh a computationally difficult task to do so you try to avoid doing that in programming",
    "start": "267759",
    "end": "274080"
  },
  {
    "text": "languages and as an aside we looking into semiotics uh here we have a class dog",
    "start": "274080",
    "end": "281360"
  },
  {
    "text": "that extends animal it can speak and it is a good boy it name is",
    "start": "281360",
    "end": "287680"
  },
  {
    "text": "Yol and uh even though uh Yol is the dog in this program",
    "start": "287680",
    "end": "293840"
  },
  {
    "text": "y isn't actually a dog uh This Is Not A Pipe and all that stuff um Yola is an abstract",
    "start": "293840",
    "end": "301120"
  },
  {
    "text": "representation of a dog it's like a symbol if you will and we only interpret Yol as a dog because we have an idea",
    "start": "301120",
    "end": "307240"
  },
  {
    "text": "what the dog is it's an animal that barks and it's a good boy and uh this interpretation process that's semiotics",
    "start": "307240",
    "end": "313680"
  },
  {
    "text": "and that's not semantics just to like uh make that distinction and also semiotics",
    "start": "313680",
    "end": "320639"
  },
  {
    "text": "is a whole other talk uh if you're interested there's a talk called metaphors you compute by you should check it",
    "start": "320639",
    "end": "326039"
  },
  {
    "text": "out okay so applied minimalism how do we do go about this",
    "start": "326039",
    "end": "331199"
  },
  {
    "text": "so this is what we're going to do we are going to take a piece of code take away the things and examine what happens",
    "start": "331199",
    "end": "339000"
  },
  {
    "text": "easy uh when we hit something nonsensical we go back because nonsense is inherently",
    "start": "339240",
    "end": "345560"
  },
  {
    "text": "uninteresting sometimes at least um if you have a program that for some kind of",
    "start": "345560",
    "end": "350919"
  },
  {
    "text": "program that evaluates to like the number one you could you could replace the entire program with just the number",
    "start": "350919",
    "end": "356080"
  },
  {
    "text": "one but that would be just nonsense it's not interesting and when we hit something interesting we",
    "start": "356080",
    "end": "361400"
  },
  {
    "text": "will stop so we'll begin here with this uh",
    "start": "361400",
    "end": "366720"
  },
  {
    "text": "totally not contr example we have like a tiny add function we have some some uh",
    "start": "366720",
    "end": "373440"
  },
  {
    "text": "variables with names we have this partial applied function I hope you can",
    "start": "373440",
    "end": "379000"
  },
  {
    "text": "read this stuff um and we have some some method program calculation that does",
    "start": "379000",
    "end": "387080"
  },
  {
    "text": "something and the first question we could ask ourselves uh what if we could do like without operators at all",
    "start": "388199",
    "end": "394759"
  },
  {
    "text": "operators are finy they are different uh they cause us to use like infix instead",
    "start": "394759",
    "end": "401400"
  },
  {
    "text": "of uh uh application which is something that's different um so what if we uh",
    "start": "401400",
    "end": "409479"
  },
  {
    "text": "instead of having the minus in our code we take it out put it in a stick in a function and we",
    "start": "409479",
    "end": "416560"
  },
  {
    "text": "replace the uh error variable we had earlier with just uh a partial applied",
    "start": "416560",
    "end": "422440"
  },
  {
    "text": "function that gives us like encodes the meaning of what it means to be without error it's the subtract function with",
    "start": "422440",
    "end": "430199"
  },
  {
    "text": "given a one and then we can replace the the um",
    "start": "430199",
    "end": "435800"
  },
  {
    "text": "minus operator in our program and we get rid of some parentheses and all that good stuff uh we can do that with all the",
    "start": "435800",
    "end": "442800"
  },
  {
    "text": "operators uh we don't actually need to keep them around in our program we uh do the same same thing",
    "start": "442800",
    "end": "449800"
  },
  {
    "text": "with equality and uh modulo and we can like encode the",
    "start": "449800",
    "end": "455000"
  },
  {
    "text": "meaning into whatever fine Step is uh and you can say that something is",
    "start": "455000",
    "end": "460759"
  },
  {
    "text": "acceptable if it's equal to zero we can replace all the operators in our uh tin",
    "start": "460759",
    "end": "466199"
  },
  {
    "text": "little program and now we just have a m function instead instead that's",
    "start": "466199",
    "end": "471240"
  },
  {
    "text": "nice uh so what if you could just compose all those functions uh this has been JavaScript up up until now um now",
    "start": "471240",
    "end": "478240"
  },
  {
    "text": "it's star inter veing to like fantasy ter territory instead we just put those stick those",
    "start": "478240",
    "end": "483599"
  },
  {
    "text": "functions in a pipeline and uh apply it to the value",
    "start": "483599",
    "end": "489039"
  },
  {
    "text": "and that gives us the same result or we can just imagine uh some new syntax",
    "start": "489039",
    "end": "495159"
  },
  {
    "text": "that's like a composting syntax that would be nice to have and now we're completely into fancy territory um the",
    "start": "495159",
    "end": "503680"
  },
  {
    "text": "functions are still the same um and you can notice here that all the functions have like basically the same signature",
    "start": "503680",
    "end": "510800"
  },
  {
    "text": "it takes in takes some one thing and applies it to a function so we can compost this cleanly without any extra",
    "start": "510800",
    "end": "518360"
  },
  {
    "text": "fiddling uh so what if we didn't have all these multiple arguments and then we can fix the signatures of our base",
    "start": "518360",
    "end": "524519"
  },
  {
    "text": "functions instead of just the composed functions so let's imagine that we don't",
    "start": "524519",
    "end": "531240"
  },
  {
    "text": "accept taking arguments into our functions we just have this like gen generic argument thing that we can read",
    "start": "531240",
    "end": "539880"
  },
  {
    "text": "values of of and then we just have to rewrite it like this and our program still works",
    "start": "539880",
    "end": "546839"
  },
  {
    "text": "the same so that's good but what if that arguments function instead was like this",
    "start": "546839",
    "end": "553120"
  },
  {
    "text": "Global place you can just put values and all your functions just read values from that Global",
    "start": "553120",
    "end": "559920"
  },
  {
    "text": "thing so instead of having uh a value that is zero you can have a value function that just puts zero into your",
    "start": "559920",
    "end": "566880"
  },
  {
    "text": "Global State and uh that would be nice",
    "start": "566880",
    "end": "574160"
  },
  {
    "text": "maybe like now our program probably doesn't run anymore it just returns whatever I don't know it probably",
    "start": "574440",
    "end": "580320"
  },
  {
    "text": "crashes because you don't really put anything back onto the stack um so yeah",
    "start": "580320",
    "end": "587200"
  },
  {
    "text": "um and what if like to solve this problem of our code not really executing",
    "start": "587200",
    "end": "592480"
  },
  {
    "text": "properly we could uh just like make the function not really return things it",
    "start": "592480",
    "end": "598079"
  },
  {
    "text": "just would just P push result back onto whatever the global thing",
    "start": "598079",
    "end": "603640"
  },
  {
    "text": "is and you just have this add function and you instead of like accessing the",
    "start": "603640",
    "end": "608680"
  },
  {
    "text": "top and the the second top of this uh Global thing you can just pop off it and",
    "start": "608680",
    "end": "616600"
  },
  {
    "text": "you can do the calculation and then you can push the result back onto whatever this state thing is and you can just",
    "start": "616600",
    "end": "625120"
  },
  {
    "text": "because you know no longer require the plus sign to to be in your code you can",
    "start": "625120",
    "end": "630399"
  },
  {
    "text": "just call the function Plus instead and then you have like Rewritten plus to be something",
    "start": "630399",
    "end": "635600"
  },
  {
    "text": "else so now we have a a program that looks like this you have you can because it's our",
    "start": "635600",
    "end": "642839"
  },
  {
    "text": "our own program and it's our own fantasy world we can just stuff all the",
    "start": "642839",
    "end": "647880"
  },
  {
    "text": "functions into the stand library and don't have to worry about them anymore and we can rewrite our uh",
    "start": "647880",
    "end": "654519"
  },
  {
    "text": "earlier functions uh and make them into uh compositions of uh like this push",
    "start": "654519",
    "end": "661720"
  },
  {
    "text": "this weird push function and uh whatever operator function we have already",
    "start": "661720",
    "end": "668040"
  },
  {
    "text": "made so yeah and uh because um ordering",
    "start": "668320",
    "end": "675320"
  },
  {
    "text": "matters for some functions like if you remember that the modulo function",
    "start": "675320",
    "end": "680720"
  },
  {
    "text": "requires us to have uh the the the a first and then the",
    "start": "680720",
    "end": "687320"
  },
  {
    "text": "four May writing the code like this wouldn't work so you have to do some fiddling",
    "start": "687320",
    "end": "692839"
  },
  {
    "text": "things and we introduce some kind of swap function that will make sure that",
    "start": "692839",
    "end": "697920"
  },
  {
    "text": "the top two elements on This Global State thing is swapped around so that uh",
    "start": "697920",
    "end": "703279"
  },
  {
    "text": "your function gets things in the right order again you can do the same with the the error function and now your program",
    "start": "703279",
    "end": "709880"
  },
  {
    "text": "evaluates again it's nice and instead of calling it RX we can",
    "start": "709880",
    "end": "715040"
  },
  {
    "text": "just call it State and we just have one Global state for a whole program that sounds like some people just call",
    "start": "715040",
    "end": "721519"
  },
  {
    "text": "that nonsense but uh bear with me um so what if we made instead of having",
    "start": "721519",
    "end": "727880"
  },
  {
    "text": "functions that produce values we just made values functions instead like um",
    "start": "727880",
    "end": "734160"
  },
  {
    "text": "because um everything uh in our program is now a function we don't really need",
    "start": "734160",
    "end": "740320"
  },
  {
    "text": "to distinguish between functions and values you can just have like a value is just a function that produces the value",
    "start": "740320",
    "end": "746320"
  },
  {
    "text": "of its name so now now the value zero is not a value it's it's a function that puts",
    "start": "746320",
    "end": "752560"
  },
  {
    "text": "zero onto the state and we can do that with all the",
    "start": "752560",
    "end": "758199"
  },
  {
    "text": "functions and then we have still have our nice program so now our program is",
    "start": "758199",
    "end": "764399"
  },
  {
    "text": "made up of only functions uh and also like function aliases I guess and",
    "start": "764399",
    "end": "770720"
  },
  {
    "text": "composition and we're still using this composition operator or syntax or whatever uh but because everything is",
    "start": "770720",
    "end": "777399"
  },
  {
    "text": "now a function we don't really need to do be explicit about this syntax anymore",
    "start": "777399",
    "end": "782920"
  },
  {
    "text": "we just remove it and suddenly our program looks very um different and also",
    "start": "782920",
    "end": "788519"
  },
  {
    "text": "because we have uh reduced what a function can do in the context we also",
    "start": "788519",
    "end": "793680"
  },
  {
    "text": "don't need the the function application syntax anymore either they can just be implicit",
    "start": "793680",
    "end": "800959"
  },
  {
    "text": "so now we have uh basically a syntax free language it's nice uh and what if we got rid of everything but the",
    "start": "800959",
    "end": "806800"
  },
  {
    "text": "functions and we were left with just this this weird string which",
    "start": "806800",
    "end": "811880"
  },
  {
    "text": "actually just still computes the same value but some things are just too good to give up like giving away ability to",
    "start": "811880",
    "end": "819279"
  },
  {
    "text": "name things and give meaning to your program that's wearing into nonsense territory and we don't want to go there",
    "start": "819279",
    "end": "825199"
  },
  {
    "text": "so we're just going to keep the naming uh conventions and um maybe like swap syntax around a",
    "start": "825199",
    "end": "831639"
  },
  {
    "text": "little bit we don't have to use like uh equals",
    "start": "831639",
    "end": "836720"
  },
  {
    "text": "for assignments because why we can just use equals for actual",
    "start": "836720",
    "end": "843000"
  },
  {
    "text": "comparison instead so our math friends are happy",
    "start": "843000",
    "end": "848600"
  },
  {
    "text": "again so this is where we started a totally normal JavaScript",
    "start": "848600",
    "end": "854360"
  },
  {
    "text": "program and this is where we ended up in some kind of fantasy weird language where everything lives on a global State",
    "start": "854360",
    "end": "862279"
  },
  {
    "text": "and everything's a function and you have no values so this is like the easy",
    "start": "862279",
    "end": "868120"
  },
  {
    "text": "introduction to cative programming uh I apologize for the very",
    "start": "868120",
    "end": "873639"
  },
  {
    "text": "uh strange and uh weird Journey but it was done to hopefully uh give you a hint",
    "start": "873639",
    "end": "880519"
  },
  {
    "text": "on uh as to what makes concatenative programming tick because concatenative",
    "start": "880519",
    "end": "886639"
  },
  {
    "text": "programming uh in concatenative programming you make programs by",
    "start": "886639",
    "end": "891800"
  },
  {
    "text": "composing functions that's all you do as opposed to most other programming",
    "start": "891800",
    "end": "897720"
  },
  {
    "text": "languages which work by applying functions to values so we have like this",
    "start": "897720",
    "end": "903440"
  },
  {
    "text": "split between concatenative and applicative programming uh there are no values at",
    "start": "903440",
    "end": "910040"
  },
  {
    "text": "least not in a traditional sense as I said a few times um what looks like values actually",
    "start": "910040",
    "end": "915560"
  },
  {
    "text": "aren't values they're functions that produce that value so that you can compose things nicely",
    "start": "915560",
    "end": "920920"
  },
  {
    "text": "again that who knew that the mine could be a function uh every function has the same",
    "start": "920920",
    "end": "927759"
  },
  {
    "text": "type it's a function from state to New State uh actually like you don't really",
    "start": "927759",
    "end": "933040"
  },
  {
    "text": "have to put the state in there you can just have a function that takes nothing and produces nothing everything is just",
    "start": "933040",
    "end": "938839"
  },
  {
    "text": "behind the scenes but for the sake of clarity we can say that every function",
    "start": "938839",
    "end": "944160"
  },
  {
    "text": "takes the global State and returns a new Global State and the state in this case is",
    "start": "944160",
    "end": "950480"
  },
  {
    "text": "usually a stack because Stacks are simple uh it could be anything but",
    "start": "950480",
    "end": "956000"
  },
  {
    "text": "having something that has very simple semantics makes it so that uh the way",
    "start": "956000",
    "end": "962079"
  },
  {
    "text": "you implement this kind of language uh is actually doable and not just",
    "start": "962079",
    "end": "967360"
  },
  {
    "text": "painful uh because of the state effect that the global State usually lives on stack concatenative programming is often",
    "start": "967360",
    "end": "973480"
  },
  {
    "text": "referred to as stack based programming I don't really like this term um because it uh beers into like this",
    "start": "973480",
    "end": "982519"
  },
  {
    "text": "during tarpit uh area of programs like brain and uh all those other",
    "start": "982519",
    "end": "987639"
  },
  {
    "text": "programs that just are just uh operating on the stack uh concat programming is",
    "start": "987639",
    "end": "993000"
  },
  {
    "text": "about so much more and the stack is kind of the least interesting part anyways uh these languages are not a",
    "start": "993000",
    "end": "1000079"
  },
  {
    "text": "modern phenomenon they have been around for a",
    "start": "1000079",
    "end": "1005519"
  },
  {
    "text": "while uh probably the two most well-known examples are fourth and joy",
    "start": "1005519",
    "end": "1010920"
  },
  {
    "text": "and fourth is like really really old for a programar language and these two languages also",
    "start": "1010920",
    "end": "1016240"
  },
  {
    "text": "happen to uh represent two very different approaches to concatenative",
    "start": "1016240",
    "end": "1021399"
  },
  {
    "text": "programming uh fourth was created by Charles H Moore uh in the 60s and it was",
    "start": "1021399",
    "end": "1029000"
  },
  {
    "text": "made to program directly on CPUs as an alternative to assembly and uh it was designed by uh",
    "start": "1029000",
    "end": "1036678"
  },
  {
    "text": "Chuck Moore to be simple portable and human friendly uh portable because he was so sick and tired of all these uh",
    "start": "1036679",
    "end": "1043600"
  },
  {
    "text": "processors having different uh specs for the registers and like the only thing",
    "start": "1043600",
    "end": "1049240"
  },
  {
    "text": "that all these all these processors had in common was a stack so he just based his language on a stack and he wanted it",
    "start": "1049240",
    "end": "1055200"
  },
  {
    "text": "to be human friendly so he wanted it to be like word Centric so it looks like uh written language and it had to be simple",
    "start": "1055200",
    "end": "1062600"
  },
  {
    "text": "so he could just so he could implement it and take it away take it around with him actually there's a picture somewhere",
    "start": "1062600",
    "end": "1068440"
  },
  {
    "text": "on the internet about of a case with uh this punch cards that are like the for",
    "start": "1068440",
    "end": "1073760"
  },
  {
    "text": "first to Fourth compiler um yeah and fourth has seen wide and very used since its Inception",
    "start": "1073760",
    "end": "1079960"
  },
  {
    "text": "in 60s uh it uh it's out in space on some kind of uh space",
    "start": "1079960",
    "end": "1085039"
  },
  {
    "text": "probe and uh it's been used in like meta systems uh still and still is to some",
    "start": "1085039",
    "end": "1091320"
  },
  {
    "text": "degree then you have uh Joy which was created by Manfred one because he wanted",
    "start": "1091320",
    "end": "1097880"
  },
  {
    "text": "a simpler Lambda calculus without variable bindings that's the sort of idea you only get when you're living in",
    "start": "1097880",
    "end": "1103520"
  },
  {
    "text": "Australia where like FAA tries to kill you on a daily basis trying to simplify Lambda calculus",
    "start": "1103520",
    "end": "1110320"
  },
  {
    "text": "uh he was uh inspired by bakus uh he had made like a theoretical language called",
    "start": "1110320",
    "end": "1115400"
  },
  {
    "text": "FP and also the ski calculus from combinatory logic and that made up Joy",
    "start": "1115400",
    "end": "1123400"
  },
  {
    "text": "so uh joy and forth both ended up in this same place which where with mostly",
    "start": "1123400",
    "end": "1130520"
  },
  {
    "text": "the same semantics mostly the same syntax but they were following like vastly different paths to get there uh",
    "start": "1130520",
    "end": "1136280"
  },
  {
    "text": "forth was practical Joy was theoretical but still they ended up in the same place and that says something about the",
    "start": "1136280",
    "end": "1142559"
  },
  {
    "text": "power of simple semantics driving a simple syntax which I find kind of",
    "start": "1142559",
    "end": "1148120"
  },
  {
    "text": "interesting so we have this programming language that's supposedly really excellent at composting programs so the",
    "start": "1150200",
    "end": "1158120"
  },
  {
    "text": "natural thing to do would seem to implement some of the stuff from Peter Henderson seminal light2 paper",
    "start": "1158120",
    "end": "1164600"
  },
  {
    "text": "functional geometry or actually we're going to use the two to revised version because",
    "start": "1164600",
    "end": "1169799"
  },
  {
    "text": "that's just easier so uh the basis of this paper is to construct a translation a translation",
    "start": "1169799",
    "end": "1176400"
  },
  {
    "text": "is uh math speak for covering a plane with repeating images that completely cover entire plane or",
    "start": "1176400",
    "end": "1184440"
  },
  {
    "text": "this this is a picture from that paper it's an approximation of MC e Square",
    "start": "1184440",
    "end": "1189919"
  },
  {
    "text": "limit and uh we're going to try and make that using HTML canvas API and also a",
    "start": "1189919",
    "end": "1196919"
  },
  {
    "text": "concatenative language implemented in j script and yes I committed the sin of implementing my own language so more on",
    "start": "1196919",
    "end": "1204000"
  },
  {
    "text": "that later uh the paper outlines uh three basic operations flip turn and toss or",
    "start": "1204000",
    "end": "1211159"
  },
  {
    "text": "actually the paper calls it something else but uh these are better names in addition to uh those three",
    "start": "1211159",
    "end": "1218280"
  },
  {
    "text": "operations the paper also defines the operation over which groups images that belong in the same box we don't really",
    "start": "1218280",
    "end": "1224280"
  },
  {
    "text": "need that operation because uh the canvas just does that by default all",
    "start": "1224280",
    "end": "1230919"
  },
  {
    "text": "right so flip this is the implementation of the",
    "start": "1230919",
    "end": "1237440"
  },
  {
    "text": "operation flip uh flipping around the central axis like",
    "start": "1237440",
    "end": "1243720"
  },
  {
    "text": "the y- axis of uh this figure can be done by scaling with a negative value",
    "start": "1243720",
    "end": "1251000"
  },
  {
    "text": "along the axis the axis you want to flip like so if you scale by minus one along the x-axis you flip it around the y-",
    "start": "1251000",
    "end": "1257679"
  },
  {
    "text": "axis and you have to do this uh negative translation to make",
    "start": "1257679",
    "end": "1264840"
  },
  {
    "text": "sure it ends up in the same place so if we flip the F around we get",
    "start": "1264840",
    "end": "1269880"
  },
  {
    "text": "this if you didn't have this uh translation we would end up here because",
    "start": "1269880",
    "end": "1274919"
  },
  {
    "text": "what we're actually doing is flipping around what the um the y- axis of the",
    "start": "1274919",
    "end": "1280120"
  },
  {
    "text": "entire coordinate system is and that at the moment it's placed right here uh at the end edge of",
    "start": "1280120",
    "end": "1286919"
  },
  {
    "text": "the box so this is",
    "start": "1286919",
    "end": "1291240"
  },
  {
    "text": "flip and also we have this little translation thing here and we can just",
    "start": "1292120",
    "end": "1298200"
  },
  {
    "text": "take that out because we want to call it something it's easier in that way we",
    "start": "1298200",
    "end": "1304960"
  },
  {
    "text": "just call this Center and then that just make sure that everything we draw is in the",
    "start": "1304960",
    "end": "1310480"
  },
  {
    "text": "center and then we have turn we can Implement turn this way",
    "start": "1310480",
    "end": "1320159"
  },
  {
    "text": "and uh we can just because turn is defined to be uh a counterclockwise",
    "start": "1321960",
    "end": "1327320"
  },
  {
    "text": "rotation of 90° which is the same as Pi Hales and um the way we do uh rotation",
    "start": "1327320",
    "end": "1335520"
  },
  {
    "text": "in the canvas API or or with the canvas in this case because uh normally the",
    "start": "1335520",
    "end": "1342000"
  },
  {
    "text": "canvas 0 Z point is like the upper left corner of the canvas and if you and and every rotation is around that Central",
    "start": "1342000",
    "end": "1349279"
  },
  {
    "text": "Point so what you want to do is make that sure that that point is in now in the center of whatever object you're",
    "start": "1349279",
    "end": "1355080"
  },
  {
    "text": "trying to rotate and then you do the rotation and then you reverse the",
    "start": "1355080",
    "end": "1361960"
  },
  {
    "text": "translation and uh because we know that uh um 4 * 90 is the same as a full turn",
    "start": "1363559",
    "end": "1372200"
  },
  {
    "text": "we can just make our four turn functions already because we don't need to repeat",
    "start": "1372200",
    "end": "1377440"
  },
  {
    "text": "turn all the time so now we can do turn zero doesn't do",
    "start": "1377440",
    "end": "1383720"
  },
  {
    "text": "anything turn one turn two turn three back to zero and that's turn now we have",
    "start": "1383720",
    "end": "1389960"
  },
  {
    "text": "toss which is the most interesting function of them uh tossing something in the context",
    "start": "1389960",
    "end": "1397039"
  },
  {
    "text": "of this paper means that you want to rotate it counterclockwise by 45° which",
    "start": "1397039",
    "end": "1402919"
  },
  {
    "text": "is the same as a quarter pi and then uh scale it by the square",
    "start": "1402919",
    "end": "1409000"
  },
  {
    "text": "root of two times the size of the box which means that the diagonal of the new box is the same as length length side",
    "start": "1409000",
    "end": "1414760"
  },
  {
    "text": "length of the old box so if you try to do a toss here you",
    "start": "1414760",
    "end": "1423159"
  },
  {
    "text": "can see that the F has moved around uh we can",
    "start": "1423159",
    "end": "1427278"
  },
  {
    "text": "also look at the Box uh box restore now you can see that the box has shrunk a",
    "start": "1428200",
    "end": "1434279"
  },
  {
    "text": "bit and the reason we're doing this save restore save restore uh Shenanigans is",
    "start": "1434279",
    "end": "1439840"
  },
  {
    "text": "because um when we're applying transforms uh on a canvas they are stacking on top of each other and if we",
    "start": "1439840",
    "end": "1446760"
  },
  {
    "text": "don't like uh remove the the translations where the transforms not long no longer interested in they will",
    "start": "1446760",
    "end": "1452480"
  },
  {
    "text": "just keep on stacking and everything just goes Haywire that's why we're doing it like",
    "start": "1452480",
    "end": "1457559"
  },
  {
    "text": "that okay so now we have uh these three operations this paper also defines a",
    "start": "1457559",
    "end": "1463039"
  },
  {
    "text": "couple of tation tiles called T tile and utile and is defined like",
    "start": "1463039",
    "end": "1470039"
  },
  {
    "text": "this uh I'm not going to read it up to you I just you just look at it it's it contains a lot of things and also utile",
    "start": "1470039",
    "end": "1477919"
  },
  {
    "text": "it's just bigger but when we start implementing it it will make more sense okay so let's look",
    "start": "1477919",
    "end": "1485039"
  },
  {
    "text": "at the tiles and here we have the T",
    "start": "1485039",
    "end": "1491840"
  },
  {
    "text": "tile oops they see there we go the T tile and uh I've like written out the",
    "start": "1491840",
    "end": "1499480"
  },
  {
    "text": "definition of the te tile a little cleaner so you can see that the te tile consists of a the drawing of the figure",
    "start": "1499480",
    "end": "1505480"
  },
  {
    "text": "and it's over the flip toss version of the same figure and also a turn turn",
    "start": "1505480",
    "end": "1511159"
  },
  {
    "text": "turn flip toss figure and since we have uh made things easier for ourselves by",
    "start": "1511159",
    "end": "1517480"
  },
  {
    "text": "uh making a turn three you just write turn three of turn turn turn and this is",
    "start": "1517480",
    "end": "1522720"
  },
  {
    "text": "like the definition of this tile now and already like it's it's so",
    "start": "1522720",
    "end": "1529399"
  },
  {
    "text": "much simpler than to actually write out this trying to convert this function",
    "start": "1529399",
    "end": "1534600"
  },
  {
    "text": "expression into composition of functions and the same goes for the",
    "start": "1534600",
    "end": "1540840"
  },
  {
    "text": "utile uh the utile is when you write it out in this way it's it's you can see",
    "start": "1541880",
    "end": "1547279"
  },
  {
    "text": "the Symmetry more clearly because uh every piece of that tile is just the",
    "start": "1547279",
    "end": "1553480"
  },
  {
    "text": "same figure turned all four directions",
    "start": "1553480",
    "end": "1559240"
  },
  {
    "text": "and if we now go and uh look at like you can start by looking at the",
    "start": "1559240",
    "end": "1565640"
  },
  {
    "text": "utile it looks like this and uh the te tile would look like",
    "start": "1565640",
    "end": "1575360"
  },
  {
    "text": "this uh at the moment it doesn't look like much looks kind of weird but uh",
    "start": "1575360",
    "end": "1580840"
  },
  {
    "text": "it's leading somewhere uh and now we have all the parts we need to make our tessellation",
    "start": "1580840",
    "end": "1588520"
  },
  {
    "text": "uh we can we will divide the plane into a 3X3 grid and just fill each cell with tiles such that it completely covers the",
    "start": "1588520",
    "end": "1594799"
  },
  {
    "text": "whole canvas and here we have our uh our",
    "start": "1594799",
    "end": "1600240"
  },
  {
    "text": "tiles and I just made these helper functions to uh like uh Define where",
    "start": "1600240",
    "end": "1607159"
  },
  {
    "text": "like which cell in this grid are you trying to paint into like the Northwestern one would be the one that",
    "start": "1607159",
    "end": "1614000"
  },
  {
    "text": "started with 0 and the southwestern one would be like uh zero",
    "start": "1614000",
    "end": "1619159"
  },
  {
    "text": "Time 2times the Box height and so forth and then we can choose what we want to",
    "start": "1619159",
    "end": "1625080"
  },
  {
    "text": "draw in each of these so like you see uh in the center we want a utile would like",
    "start": "1625080",
    "end": "1631760"
  },
  {
    "text": "look like this we can just uh maybe do like this just to make it clear what we're",
    "start": "1631760",
    "end": "1639880"
  },
  {
    "text": "doing and if you wanted to uh put something that",
    "start": "1639880",
    "end": "1646120"
  },
  {
    "text": "uh goes into the same like you want to cover the whole Space so we make sure",
    "start": "1646120",
    "end": "1651760"
  },
  {
    "text": "that there are no gaps so we uh put a t tile in the corner here we can",
    "start": "1651760",
    "end": "1658720"
  },
  {
    "text": "see that the two smaller boxes of the T tile line up with the two smaller boxes of the utile and we just do this keep",
    "start": "1658720",
    "end": "1664960"
  },
  {
    "text": "going around around this uh around all the corners and do the same",
    "start": "1664960",
    "end": "1670640"
  },
  {
    "text": "thing turn one",
    "start": "1670640",
    "end": "1674960"
  },
  {
    "text": "of course there's yep there we go uh live coding is always an interesting uh thing to do in the talk",
    "start": "1683519",
    "end": "1690519"
  },
  {
    "text": "uh turn to T tile restore and then we can do the same with the last one jry t",
    "start": "1690519",
    "end": "1697200"
  },
  {
    "text": "TI restore and uh like uh writing code in this kind of programming language is",
    "start": "1697200",
    "end": "1702240"
  },
  {
    "text": "just it's just like you just insert new code in between old code and just it",
    "start": "1702240",
    "end": "1707440"
  },
  {
    "text": "just works it's nice and then we can just go around and fill in all",
    "start": "1707440",
    "end": "1713840"
  },
  {
    "text": "the all of the sides like we've filled all the corner tiles",
    "start": "1713840",
    "end": "1721640"
  },
  {
    "text": "now and we can start sticking a utiles in all the",
    "start": "1721640",
    "end": "1727120"
  },
  {
    "text": "sides following the same pattern turn one",
    "start": "1727159",
    "end": "1733799"
  },
  {
    "text": "utile turn to utile and also a turn three",
    "start": "1734720",
    "end": "1742159"
  },
  {
    "text": "utile and if we put it all together we have a complete tessellation",
    "start": "1742159",
    "end": "1748519"
  },
  {
    "text": "it doesn't look like much though um it doesn't look like the picture at all actually and if we look at our drawing",
    "start": "1748519",
    "end": "1754799"
  },
  {
    "text": "and we can this is our draw function it it draws a triangle and it draws a box and if we don't want to draw the",
    "start": "1754799",
    "end": "1760679"
  },
  {
    "text": "triangle anymore you can just comment that out and now we can see like the the pattern of our testation",
    "start": "1760679",
    "end": "1768519"
  },
  {
    "text": "and if you put something else in here like a",
    "start": "1768519",
    "end": "1772639"
  },
  {
    "text": "fish now we have a complete tation of the plane using these fancy fishes taking away the boxes and you can",
    "start": "1774600",
    "end": "1781360"
  },
  {
    "text": "see how it looks and because we now have something interesting uh we can start playing",
    "start": "1781360",
    "end": "1787440"
  },
  {
    "text": "around with it maybe uh like we can do some",
    "start": "1787440",
    "end": "1792519"
  },
  {
    "text": "uh like a shadow color Shadows are nice we need some blur",
    "start": "1792519",
    "end": "1799559"
  },
  {
    "text": "Shadow blur and starting to Glow that's cool if",
    "start": "1799559",
    "end": "1804799"
  },
  {
    "text": "you also do",
    "start": "1804799",
    "end": "1809279"
  },
  {
    "text": "lighter that was the scariest part of this whole talk trying to to write Global composite operation correctly and",
    "start": "1813720",
    "end": "1821039"
  },
  {
    "text": "now we have uh glowing neon fishes uh we can make them even more",
    "start": "1821039",
    "end": "1826679"
  },
  {
    "text": "neon by doing some trickery with the lines let's",
    "start": "1826679",
    "end": "1834559"
  },
  {
    "text": "see let me do",
    "start": "1836120",
    "end": "1840360"
  },
  {
    "text": "this now we have a really glowing neon fishes uh maybe you just Swap this",
    "start": "1845919",
    "end": "1853200"
  },
  {
    "text": "around s and there we go now they're looking really really evil and",
    "start": "1853200",
    "end": "1859840"
  },
  {
    "text": "lasery and uh yeah this is uh this is concatenative",
    "start": "1859840",
    "end": "1867278"
  },
  {
    "text": "programming and hopefully uh someone has been thinking like what was that weird thing you did with the",
    "start": "1867440",
    "end": "1873760"
  },
  {
    "text": "brackets uh if someone if someone didn't think that you will get the explanation anyway um those are quotations uh they",
    "start": "1873760",
    "end": "1880960"
  },
  {
    "text": "are a sub program omitted from execution within the uh the full",
    "start": "1880960",
    "end": "1886080"
  },
  {
    "text": "program uh we can modify quotations using conative operations like con cons and append uh which gives us uh this uh",
    "start": "1886080",
    "end": "1893440"
  },
  {
    "text": "ability to make control flow high order functions and recursive Shenanigans which are really nice to",
    "start": "1893440",
    "end": "1899919"
  },
  {
    "text": "have like this is a standard reppel for a stack based language if we did uh",
    "start": "1899919",
    "end": "1907760"
  },
  {
    "text": "stick like these uh four numbers into a quotation like this made another",
    "start": "1907760",
    "end": "1914760"
  },
  {
    "text": "quotation which would be the function of adding one to something then we can use a map",
    "start": "1914760",
    "end": "1923159"
  },
  {
    "text": "operation and we can map over and that's how it will do a high order function in",
    "start": "1923159",
    "end": "1928240"
  },
  {
    "text": "uh concat style also you can do like if tests like",
    "start": "1928240",
    "end": "1934360"
  },
  {
    "text": "control flow so here we have three quotations uh",
    "start": "1934360",
    "end": "1940480"
  },
  {
    "text": "the first one is test it will execute and and inspect the result and see whether it's true or not and the first",
    "start": "1940480",
    "end": "1947159"
  },
  {
    "text": "the second quotation would be whatever is happening if it's true and the last one is what if is whatever would happen",
    "start": "1947159",
    "end": "1952880"
  },
  {
    "text": "if if it was false so in this case we would put one on the stack if it's true and nothing if it's",
    "start": "1952880",
    "end": "1959120"
  },
  {
    "text": "false so if you execute that with a if test function you get you one get the one",
    "start": "1959120",
    "end": "1965000"
  },
  {
    "text": "back that's how we would do uh like hardare functions than control FL also you can do something called Anonymous uh",
    "start": "1965000",
    "end": "1973720"
  },
  {
    "text": "uh recursion which is uh really strange and usually you do recursion by having a",
    "start": "1973720",
    "end": "1980240"
  },
  {
    "text": "named function and referring to that name within the body of the function but in this case you can just",
    "start": "1980240",
    "end": "1986559"
  },
  {
    "text": "make recursion without any reference to the function",
    "start": "1986559",
    "end": "1992120"
  },
  {
    "text": "name so this factorial thing is using a linear recursion it will calculate the",
    "start": "1992120",
    "end": "1998720"
  },
  {
    "text": "factorial of seven in this case and also you can Implement quick sort using",
    "start": "1998720",
    "end": "2004519"
  },
  {
    "text": "something called binary cursion",
    "start": "2004519",
    "end": "2008360"
  },
  {
    "text": "and you can do like a quick sort and I sort it and um this looks quite",
    "start": "2009559",
    "end": "2017639"
  },
  {
    "text": "completely Bonkers to me uh I still I still wouldn't be able to explain this to you if even if I tried I have to like",
    "start": "2017639",
    "end": "2023559"
  },
  {
    "text": "sit down with a pen and paper and go over this uh for at least 30 minutes before I be able to explain it so",
    "start": "2023559",
    "end": "2030519"
  },
  {
    "text": "um yeah that's recursion in concatenative Styles and um moving on uh Praise of",
    "start": "2030519",
    "end": "2038639"
  },
  {
    "text": "Simplicity that's that's that should have been the title of the talk instead of minimalism but I realized that way too",
    "start": "2038639",
    "end": "2046120"
  },
  {
    "text": "late uh what surprises me most about uh like concat programming is how little we",
    "start": "2046120",
    "end": "2052200"
  },
  {
    "text": "actually lose like uh most of you have probably seen these",
    "start": "2052200",
    "end": "2058200"
  },
  {
    "text": "uh stack languages that are that belong in the touring tarpet which have like six operators and can make binary",
    "start": "2058200",
    "end": "2065000"
  },
  {
    "text": "numbers and letters and you can write hello World in like this much code or whatever but in like uh this is still",
    "start": "2065000",
    "end": "2072480"
  },
  {
    "text": "stack based but you still have access to all like the tools you expect to have in a program",
    "start": "2072480",
    "end": "2078398"
  },
  {
    "text": "language and sure we have to do some deeply dissatisfying stack fidling which",
    "start": "2078399",
    "end": "2083679"
  },
  {
    "text": "isn't nice at all and uh upper and ordering for",
    "start": "2083679",
    "end": "2089040"
  },
  {
    "text": "operators like uh divided by or mod still makes my brain hurt a little bit when I do",
    "start": "2089040",
    "end": "2095398"
  },
  {
    "text": "this but uh the the programming you can do with this with quotations and stuff",
    "start": "2095399",
    "end": "2100400"
  },
  {
    "text": "kind of reminds me of lisp you have the same thing there you can like you can quote the list and say unquote and then",
    "start": "2100400",
    "end": "2107079"
  },
  {
    "text": "it executes the program it's the same here and so if you like you you want to",
    "start": "2107079",
    "end": "2112359"
  },
  {
    "text": "partially apply an argument to a bunch of functions you can just map over them and cons the argument onto whatever",
    "start": "2112359",
    "end": "2118200"
  },
  {
    "text": "quotation you're using uh and for explorative programming",
    "start": "2118200",
    "end": "2123720"
  },
  {
    "text": "like what you would do when you're working creatively like uh you you could see with the the neon fishes and stuff it feels",
    "start": "2123720",
    "end": "2130760"
  },
  {
    "text": "really good like the lack of syntax getting in your way is like it's really nice and also uh reordering functions in",
    "start": "2130760",
    "end": "2138760"
  },
  {
    "text": "the pipeline just uh you want to do this before this and you just swap the lines around and if you want to uh make a",
    "start": "2138760",
    "end": "2147760"
  },
  {
    "text": "value produce it from something else you can just slot it in Just Between the other functions and it feels really good",
    "start": "2147760",
    "end": "2154680"
  },
  {
    "text": "to work with and the run time time for a programming language like this is so",
    "start": "2154680",
    "end": "2160000"
  },
  {
    "text": "surprisingly easy to make um there's a reason why you can find programm languages like this and",
    "start": "2160000",
    "end": "2167000"
  },
  {
    "text": "with similar semantics and the the whole concat sty and stuff in the jvm like the",
    "start": "2167000",
    "end": "2172119"
  },
  {
    "text": "jvm bite code this based on this and in Printers with postcript because they're uh so easy to uh",
    "start": "2172119",
    "end": "2179880"
  },
  {
    "text": "interpret and compile and also because uh implementing a compiler for it is",
    "start": "2179880",
    "end": "2185680"
  },
  {
    "text": "super simple and given how easy it is to create a runtime for a program language like this",
    "start": "2185680",
    "end": "2191720"
  },
  {
    "text": "making uh domain specific languages and embedding them in your program as an",
    "start": "2191720",
    "end": "2196800"
  },
  {
    "text": "alternative to a graphic user interface seems like a really good idea I haven't tried it but like I can imagine that for",
    "start": "2196800",
    "end": "2204319"
  },
  {
    "text": "things like an HML canvas or a web API this would be a good user",
    "start": "2204319",
    "end": "2209400"
  },
  {
    "text": "interface and I want to leave you with this quote from Alan pearis that says a language that doesn't affect the way you",
    "start": "2209400",
    "end": "2216000"
  },
  {
    "text": "think about programming is not worth knowing and uh with that I am done thanks for listening and",
    "start": "2216000",
    "end": "2223680"
  },
  {
    "text": "stay",
    "start": "2223680",
    "end": "2225960"
  },
  {
    "text": "curious you can find the slides up on GitHub if you want to try it uh also the",
    "start": "2231800",
    "end": "2236880"
  },
  {
    "text": "slides are fully interactive so go nuts",
    "start": "2236880",
    "end": "2242359"
  }
]