[
  {
    "start": "0",
    "end": "95000"
  },
  {
    "text": "welcome everybody uh thanks for that much for coming along today um i know for many of you you're going",
    "start": "480",
    "end": "6000"
  },
  {
    "text": "to be potentially stuck at home uh looking after children doing all",
    "start": "6000",
    "end": "11519"
  },
  {
    "text": "sorts of other things so the fact that you're able to participate even though you're not able to actually",
    "start": "11519",
    "end": "16640"
  },
  {
    "text": "fly around the world i think that's fantastic i'm going to be sharing with you some",
    "start": "16640",
    "end": "23439"
  },
  {
    "text": "thoughts about micro services coupling cohesion information hiding and",
    "start": "23439",
    "end": "29119"
  },
  {
    "text": "a whole bunch of other ideas and and in some degrees these are kind of old school computer science ideas but i think in another very real",
    "start": "29119",
    "end": "35440"
  },
  {
    "text": "way they're they're kind of really important uh topics and very important uh subjects",
    "start": "35440",
    "end": "40559"
  },
  {
    "text": "for us to look at and i think we often lose sight of the things that came before because the shiny stuff is way more interesting",
    "start": "40559",
    "end": "47039"
  },
  {
    "text": "and so i'm hopefully going to show you some of the earlier ideas uh from the area structure programming",
    "start": "47039",
    "end": "52719"
  },
  {
    "text": "that might help you build a better micro service architecture very quick bit of background about me",
    "start": "52719",
    "end": "58320"
  },
  {
    "text": "i previously wrote a book about microservices uh building microservices that book was released in early 2015.",
    "start": "58320",
    "end": "64960"
  },
  {
    "text": "i'm in the process of working on a second edition that's at a very early stages my most recent book monolith to",
    "start": "64960",
    "end": "71040"
  },
  {
    "text": "microservices was released at the end of last year this is a deep dive on how we take systems",
    "start": "71040",
    "end": "76320"
  },
  {
    "text": "and decompose them i was actually just doing a did a two-day online class uh maybe some",
    "start": "76320",
    "end": "82880"
  },
  {
    "text": "of you in the audience came alongside class in which case there's going to be some overlap but if you want to know more about the",
    "start": "82880",
    "end": "88080"
  },
  {
    "text": "work that i do i'll see some of the other talks that i've done in the past you can find lots of information over at",
    "start": "88080",
    "end": "94479"
  },
  {
    "text": "my website but we're here today to talk about microservices as is quite common for me",
    "start": "94479",
    "end": "99600"
  },
  {
    "start": "95000",
    "end": "283000"
  },
  {
    "text": "that's what i end up doing a lot and when i talk about microservice architectures i always try to sort of zero in on the thing that makes them",
    "start": "99600",
    "end": "106079"
  },
  {
    "text": "interesting as an architectural choice and that one of those key characteristics that we're often aiming",
    "start": "106079",
    "end": "111280"
  },
  {
    "text": "for with a microservice architecture is this idea of independent deployability",
    "start": "111280",
    "end": "116560"
  },
  {
    "text": "so the idea that i can go to a service i can make a change to that service and deploy that",
    "start": "116560",
    "end": "122000"
  },
  {
    "text": "into a production environment without actually having to change anything else now this is often quite tricky to make",
    "start": "122000",
    "end": "128959"
  },
  {
    "text": "work in practice one of the things that often comes up very early on is okay well that's a great idea",
    "start": "128959",
    "end": "134720"
  },
  {
    "text": "and sure we can talk about things like zero downtime deployments and all this kind of fun techy stuff but it often just starts",
    "start": "134720",
    "end": "141440"
  },
  {
    "text": "with how do you handle independent deployability when you consider the fact that microservice is being used by other people",
    "start": "141440",
    "end": "147760"
  },
  {
    "text": "in other words what about those sort of upstream consumers of your service when we think about independent",
    "start": "147760",
    "end": "154000"
  },
  {
    "text": "deployability if i'm going to change the account service in this situation i i want to be able to make that change",
    "start": "154000",
    "end": "160480"
  },
  {
    "text": "in isolation make a change to accounts deploy it into production release that functionality to my",
    "start": "160480",
    "end": "166800"
  },
  {
    "text": "customers to the users of my software without having to change anything else so that means in this particular",
    "start": "166800",
    "end": "172879"
  },
  {
    "text": "situation when i redeploy uh version two of the account service i need to make sure that the customer",
    "start": "172879",
    "end": "179280"
  },
  {
    "text": "service which is upstream which is an upstream consumer of the service that that still is able",
    "start": "179280",
    "end": "185120"
  },
  {
    "text": "to work so i have to maintain backwards compatibility if i don't maintain backwards compatibility",
    "start": "185120",
    "end": "191280"
  },
  {
    "text": "when i make a change i deploy that microservice i could end up breaking my upstream consumer",
    "start": "191280",
    "end": "196480"
  },
  {
    "text": "which could often have quite catastrophic effects for a system if that causes some kind of cascade of failures so",
    "start": "196480",
    "end": "203040"
  },
  {
    "text": "we've got this idea of a group of functionality which uses another group of functionality and i'm able to change",
    "start": "203040",
    "end": "208400"
  },
  {
    "text": "some of that functionality independent of other functionality and still make sure that they all work together this seems like quite a tricky",
    "start": "208400",
    "end": "215599"
  },
  {
    "text": "problem to deal with and it can be but luckily we have been here before maybe we were here before back in these",
    "start": "215599",
    "end": "221760"
  },
  {
    "text": "1960s back in the 1960s much of our computing was done on mainframes we were operated",
    "start": "221760",
    "end": "228400"
  },
  {
    "text": "in a world where we had a small number of very large machines that would look",
    "start": "228400",
    "end": "233599"
  },
  {
    "text": "not that dissimilar to this sort of thing um where you know just because of how difficult it was to build computers we",
    "start": "233599",
    "end": "240239"
  },
  {
    "text": "didn't have many of them and that meant most of our software was running on mainframe based applications",
    "start": "240239",
    "end": "245920"
  },
  {
    "text": "as the mainframes became more powerful as advances in computer science allowed us to build more complicated and larger",
    "start": "245920",
    "end": "253200"
  },
  {
    "text": "uh programs we started realizing that we needed ways to organize those programs to make them more manageable",
    "start": "253200",
    "end": "259759"
  },
  {
    "text": "uh some of you today might rail against your um sort of single process monolithic",
    "start": "259759",
    "end": "264880"
  },
  {
    "text": "applications before becoming a big ball of mud um often that's just the case of you know not finding ways to structure that",
    "start": "264880",
    "end": "271280"
  },
  {
    "text": "code in the right way so a lot of work was done back in the 1960s and into the 1970s",
    "start": "271280",
    "end": "277759"
  },
  {
    "text": "looking at how do we structure a program in order to make larger programs easier to work with one of the core",
    "start": "277759",
    "end": "284160"
  },
  {
    "start": "283000",
    "end": "521000"
  },
  {
    "text": "ideas that came out of this space is that time is the idea of having software broken down into modules the idea here is that a module",
    "start": "284160",
    "end": "291759"
  },
  {
    "text": "can be worked on independently at one module can expose functionality that can be used by a",
    "start": "291759",
    "end": "297440"
  },
  {
    "text": "different module these modules allow for a degree of independent working if i had lots of different developers or",
    "start": "297440",
    "end": "304000"
  },
  {
    "text": "even lots of different teams i could have some developers working on module a some other developers working",
    "start": "304000",
    "end": "309520"
  },
  {
    "text": "on module b and so on and so forth great that works pretty well",
    "start": "309520",
    "end": "314720"
  },
  {
    "text": "these are modules also would allow some degree of reuse depending on the nature of",
    "start": "314720",
    "end": "320560"
  },
  {
    "text": "technology that you're using you may be able to take say module c and reuse that in a different",
    "start": "320560",
    "end": "325680"
  },
  {
    "text": "program and this would give us reusability of functionality across different programs now modules as a",
    "start": "325680",
    "end": "332800"
  },
  {
    "text": "concept have been around for a very long time and but in a lot of our modern programming languages the concept and",
    "start": "332800",
    "end": "339520"
  },
  {
    "text": "importance of modules has been reduced somewhat at one level we have",
    "start": "339520",
    "end": "345199"
  },
  {
    "text": "capabilities in our programming languages like namespaces or packages in java these are ways where you can group code",
    "start": "345199",
    "end": "351520"
  },
  {
    "text": "together and say okay this code is hidden inside this module this code is available to another module",
    "start": "351520",
    "end": "357680"
  },
  {
    "text": "another package elsewhere we could then take those packages those namespaces and sort of bundle them together in a",
    "start": "357680",
    "end": "364319"
  },
  {
    "text": "nuget package an npm a jar file that then gives us the ability to reuse those modules between",
    "start": "364319",
    "end": "370319"
  },
  {
    "text": "different programs so we have all of the same building blocks that allow us to create",
    "start": "370319",
    "end": "375440"
  },
  {
    "text": "modules in our modern programs but we often don't really use them in the same way as we used to think",
    "start": "375440",
    "end": "381600"
  },
  {
    "text": "about structured programming often the way we kind of organize our code into name spaces",
    "start": "381600",
    "end": "386720"
  },
  {
    "text": "and packages is way too much of just an afterthought and it's kind of just an arbitrary categorization rather than thinking",
    "start": "386720",
    "end": "393919"
  },
  {
    "text": "about grouping our code into isolated modules that can be easily changed independently",
    "start": "393919",
    "end": "399440"
  },
  {
    "text": "from each other nowadays of course we operate in the world of micro services and the microservice world has changed",
    "start": "399440",
    "end": "406960"
  },
  {
    "text": "microservices we are now we can think of microsoft as now are as collections of functionality hosted",
    "start": "406960",
    "end": "413599"
  },
  {
    "text": "on a networked endpoint fundamentally is a module though a microservice individually is a",
    "start": "413599",
    "end": "419520"
  },
  {
    "text": "collection of functionality that that now communicates uh with over networks with other modules",
    "start": "419520",
    "end": "426000"
  },
  {
    "text": "these modules now just happen to run on different computers whereas before they're typically on the",
    "start": "426000",
    "end": "432000"
  },
  {
    "text": "same machine now these modules run on different computers the communication between those modules",
    "start": "432000",
    "end": "437759"
  },
  {
    "text": "is done via network calls some kind of network protocol typically it could be a synchronous on",
    "start": "437759",
    "end": "443039"
  },
  {
    "text": "asynchronous protocol doesn't really matter too much as sake of this conversation the fact that",
    "start": "443039",
    "end": "448800"
  },
  {
    "text": "we run these things now separate processes typically on separate computers means that we have a",
    "start": "448800",
    "end": "454960"
  },
  {
    "text": "much easier time of deploying these things we can deploy them now independently",
    "start": "454960",
    "end": "460319"
  },
  {
    "text": "whereas typically for modular-based software before we would think about including a module into a program as a",
    "start": "460319",
    "end": "466479"
  },
  {
    "text": "static linking activity i would package all of those modules together and deploy them as one big",
    "start": "466479",
    "end": "472639"
  },
  {
    "text": "thing whereas now we can kind of think of our of our modular architecture as being",
    "start": "472639",
    "end": "477919"
  },
  {
    "text": "modules that can be worked on independently yes but also deployed independently and that's kind of the shift and that's",
    "start": "477919",
    "end": "484240"
  },
  {
    "text": "really come about because we've got more computers in the 90s we saw a shift",
    "start": "484240",
    "end": "489280"
  },
  {
    "text": "from larger very expensive mainframe based systems over to much more cost-effective",
    "start": "489280",
    "end": "494879"
  },
  {
    "text": "server-based infrastructure so now we had a large amount of smaller machines rather than a small",
    "start": "494879",
    "end": "500240"
  },
  {
    "text": "amount of large machines and you can see all the work done around things like service oriented architecture",
    "start": "500240",
    "end": "505520"
  },
  {
    "text": "that followed as an attempt to come to grips with the new economies of computing how do we build applications that make",
    "start": "505520",
    "end": "511759"
  },
  {
    "text": "use of the fact that we now have a lot more computers um but i think often in all that scramble we've sort of lost sight",
    "start": "511759",
    "end": "517760"
  },
  {
    "text": "of a lot of the lessons we learned about building modular software and i do think that when done right",
    "start": "517760",
    "end": "523518"
  },
  {
    "start": "521000",
    "end": "647000"
  },
  {
    "text": "microservices are just a form of modular architecture",
    "start": "523519",
    "end": "529120"
  },
  {
    "text": "so this is same way let's talk about some of the backgrounds to all of this",
    "start": "529200",
    "end": "535200"
  },
  {
    "text": "let's talk about information hiding so information hiding was a concept developed by david parnass",
    "start": "535200",
    "end": "540640"
  },
  {
    "text": "back in 1971 and david parnasse was doing some research looking into",
    "start": "540640",
    "end": "546240"
  },
  {
    "text": "well if we've got these ideas of modules what's the right way to find a boundary for a module",
    "start": "546240",
    "end": "551760"
  },
  {
    "text": "how to ensure that one module can be worked on uh independently without causing problems",
    "start": "551760",
    "end": "556880"
  },
  {
    "text": "elsewhere so his work published in 1971 really zoned in on this idea of information hiding",
    "start": "556880",
    "end": "563120"
  },
  {
    "text": "uh and we'll come back to this concept of information hiding but basically it entails sort of hiding as much stuff as",
    "start": "563120",
    "end": "568320"
  },
  {
    "text": "possible inside the service boundary the idea here is that if information that's hidden",
    "start": "568320",
    "end": "573680"
  },
  {
    "text": "away can be changed freely any information that a module exposes to another module",
    "start": "573680",
    "end": "579360"
  },
  {
    "text": "is something that effectively becomes part of the contract that that module exposes to the outside world and so if we hide",
    "start": "579360",
    "end": "586880"
  },
  {
    "text": "as much as possible we can change lots of things without worrying about having a cascading effect and there's actually",
    "start": "586880",
    "end": "594640"
  },
  {
    "text": "really nice piece of work done by agent collier agent collier writes a really good blog called the morning paper where he looks back over uh sort of",
    "start": "594640",
    "end": "600880"
  },
  {
    "text": "computer research papers and summarizes them for for mortal people and he actually took a look back at david pardas's",
    "start": "600880",
    "end": "607600"
  },
  {
    "text": "work in this area and he said well what would happen if we just took the word module and replaced it with the word",
    "start": "607600",
    "end": "613120"
  },
  {
    "text": "micro service would these papers still make sense and you know indeed he found that you know certainly when looking into the",
    "start": "613120",
    "end": "618800"
  },
  {
    "text": "ideas of information hiding and the other work that david pines did in the area of modular decomposition",
    "start": "618800",
    "end": "624800"
  },
  {
    "text": "that actually these ideas do stack up it's actually quite a nice moment in one of these blocks where david pines himself starts leaving",
    "start": "624800",
    "end": "631440"
  },
  {
    "text": "comments uh on the blog post uh talking about how his own current thoughts about the subject",
    "start": "631440",
    "end": "636959"
  },
  {
    "text": "so coming back to information hiding um so you may well want to go read those agent collier papers because they're really interesting but going back to uh",
    "start": "636959",
    "end": "643440"
  },
  {
    "text": "this idea of information hiding the idea really at one level is quite simple so here i've got some sort of",
    "start": "643440",
    "end": "648800"
  },
  {
    "start": "647000",
    "end": "883000"
  },
  {
    "text": "microservice here and i've got internal implementation detail i've got some external consumer that's",
    "start": "648800",
    "end": "655440"
  },
  {
    "text": "going to make use of the functionality that my account service in this example exposes",
    "start": "655440",
    "end": "660959"
  },
  {
    "text": "and that shipping service here can reach right in and gain access to some of my internal",
    "start": "660959",
    "end": "667200"
  },
  {
    "text": "implementation details and that then leads to a bit of a problem because if i change some of that",
    "start": "667200",
    "end": "672399"
  },
  {
    "text": "internal implementation detail then that's going to break the consumer so i might change some",
    "start": "672399",
    "end": "677760"
  },
  {
    "text": "innocent piece of internal detail that an external party needed the contract therefore with my",
    "start": "677760",
    "end": "683760"
  },
  {
    "text": "outstanding party has been violated and i've kind of lost the ability to do independent deployability",
    "start": "683760",
    "end": "689040"
  },
  {
    "text": "because if i deploy this account service in this state it's going to break an existing consumer",
    "start": "689040",
    "end": "694880"
  },
  {
    "text": "with information hiding the idea here is that you're being quite explicit about what information you",
    "start": "694880",
    "end": "700720"
  },
  {
    "text": "expose to what functionality you expose and that is you're being explicit not only to the person",
    "start": "700720",
    "end": "705839"
  },
  {
    "text": "using your service but also to the person developing that service so if you can clearly differentiate",
    "start": "705839",
    "end": "712000"
  },
  {
    "text": "between functionality which is hidden from the outside world and functionality which is",
    "start": "712000",
    "end": "717519"
  },
  {
    "text": "shared with the outside world you make it very easy for a developer to reason about what information can be easily",
    "start": "717519",
    "end": "723920"
  },
  {
    "text": "changed the shipping service here only has access to that shared information if i change anything there i am aware",
    "start": "723920",
    "end": "730959"
  },
  {
    "text": "that i may well end up breaking that upstream consumer but anything in that hidden space",
    "start": "730959",
    "end": "736480"
  },
  {
    "text": "that stuff that i should be free to change without worrying and so when you're building microservices one of the earliest pieces",
    "start": "736480",
    "end": "742800"
  },
  {
    "text": "of advice i can give you is share as little as possible hide everything you can",
    "start": "742800",
    "end": "748399"
  },
  {
    "text": "and if anything that is part of the external contract that you're exposing with an outside party that should be made",
    "start": "748399",
    "end": "755040"
  },
  {
    "text": "very very explicit to the developer working or the developers working on that service sometimes we do things",
    "start": "755040",
    "end": "762720"
  },
  {
    "text": "that make these what we share not very explicit at all so here's an example of",
    "start": "762720",
    "end": "767760"
  },
  {
    "text": "and this is this can introduce areas of accidental breakages where you'll be making an innocent change to a piece of code without",
    "start": "767760",
    "end": "773519"
  },
  {
    "text": "realizing that that has an effect on the public contract so quite a common pattern i see is",
    "start": "773519",
    "end": "778800"
  },
  {
    "text": "someone taking say a class definition like this and mapping it to some kind of json payload",
    "start": "778800",
    "end": "784480"
  },
  {
    "text": "and that's a json payload that's going to be exposed over a network boundary and used by another service so in this",
    "start": "784480",
    "end": "790639"
  },
  {
    "text": "example here we expose a customer from this service we take that customer object",
    "start": "790639",
    "end": "795839"
  },
  {
    "text": "run it through some kind of json serializer that's just going to walk the fields of a given object",
    "start": "795839",
    "end": "801040"
  },
  {
    "text": "and convert that into the mapping to the json maps version of that and there are goodness knows how many",
    "start": "801040",
    "end": "807040"
  },
  {
    "text": "libraries out there that will do something like this for very different languages and take just data structures and map them to json",
    "start": "807040",
    "end": "812160"
  },
  {
    "text": "quite straightforwardly now i'm working as a developer i look at that customer class and i think hang on",
    "start": "812160",
    "end": "817440"
  },
  {
    "text": "a minute we're storing an age why would we store the age of a customer that seems a bit odd",
    "start": "817440",
    "end": "822480"
  },
  {
    "text": "it seems to make much more sense that we actually store say a date of birth so i might change that to store a date",
    "start": "822480",
    "end": "828079"
  },
  {
    "text": "of birth unbeknownst to me though that co that customer object is actually being serialized and exposed over my",
    "start": "828079",
    "end": "834720"
  },
  {
    "text": "network boundary so if you now serialize that object again the age field has vanished",
    "start": "834720",
    "end": "840000"
  },
  {
    "text": "it's now been replaced with a date of birth field now if i didn't if i wasn't aware that that customer",
    "start": "840000",
    "end": "846240"
  },
  {
    "text": "object was being serialized i could accidentally do i could make a change that customer object very easily",
    "start": "846240",
    "end": "852160"
  },
  {
    "text": "that breaks external parties and i see this happen a surprising amount",
    "start": "852160",
    "end": "857519"
  },
  {
    "text": "if you're going to do something like automatically mapping from a piece of code or data structure",
    "start": "857519",
    "end": "862720"
  },
  {
    "text": "into something like a json structure i was just making it very explicit to the developer",
    "start": "862720",
    "end": "868079"
  },
  {
    "text": "make your heavy use of annotations maybe explicitly mark fields that will be serialized and make",
    "start": "868079",
    "end": "873360"
  },
  {
    "text": "it an opt-in and then at least there'll be a visual cue to the developer that there's something going on here they need to be",
    "start": "873360",
    "end": "879279"
  },
  {
    "text": "aware of you might even want to consider doing something like creating a data transfer object",
    "start": "879279",
    "end": "884320"
  },
  {
    "start": "883000",
    "end": "965000"
  },
  {
    "text": "this is a pattern that martin fowler sort of captured in his book enterprise application",
    "start": "884320",
    "end": "889920"
  },
  {
    "text": "architecture and it's a the basic idea of the data transfer object to say is that i've got",
    "start": "889920",
    "end": "895760"
  },
  {
    "text": "my internal representation of something but i might have quite a different external representation so i might have",
    "start": "895760",
    "end": "902000"
  },
  {
    "text": "my customer that i use inside my service boundary and see here i've made the decision to",
    "start": "902000",
    "end": "907120"
  },
  {
    "text": "change that customer field to be a date of birth rather than the age but i recognize i still have to",
    "start": "907120",
    "end": "913600"
  },
  {
    "text": "expose the age to the outside world because that's what the people externally expect and so i basically create a data",
    "start": "913600",
    "end": "921120"
  },
  {
    "text": "transfer object representing that customer and i recognize that that data transfer object is what will effectively be",
    "start": "921120",
    "end": "927199"
  },
  {
    "text": "serialized and sent over the wire so that can give you some separation between internal representation",
    "start": "927199",
    "end": "933519"
  },
  {
    "text": "and external representation and so as a developer i'm going to have to explicitly go and change",
    "start": "933519",
    "end": "939680"
  },
  {
    "text": "my customer dto to change that external representation and that's something that can that's",
    "start": "939680",
    "end": "944880"
  },
  {
    "text": "going to be a very conscious thing right you put it in a separate package if you want to in in some projects like this i would even",
    "start": "944880",
    "end": "951519"
  },
  {
    "text": "put watches on dto objects to see if they're being changed in ways that are backwards compatible or backwards",
    "start": "951519",
    "end": "957320"
  },
  {
    "text": "incompatible so that's kind of really important right so being very explicit from a developer",
    "start": "957320",
    "end": "962959"
  },
  {
    "text": "point of view about what can and can't change going back to some other work done by david parnass he",
    "start": "962959",
    "end": "968399"
  },
  {
    "start": "965000",
    "end": "1082000"
  },
  {
    "text": "talks about this idea that when we think about modules the connections between them are the assumptions that modules make",
    "start": "968399",
    "end": "975920"
  },
  {
    "text": "about each other so in other words you know a a call that one module makes to another",
    "start": "975920",
    "end": "982160"
  },
  {
    "text": "basically one module module a that talks to module b module a has assumptions of how module b is going to behave the",
    "start": "982160",
    "end": "989519"
  },
  {
    "text": "connections are effectively the calls that we would make in say a microservice architecture",
    "start": "989519",
    "end": "994959"
  },
  {
    "text": "implicitly imply we have implicitly implies definitely redundancy but they imply we have an assumption",
    "start": "994959",
    "end": "1001920"
  },
  {
    "text": "about how that microservice is going to behave with information hiding we're reducing",
    "start": "1001920",
    "end": "1007519"
  },
  {
    "text": "how many assumptions that we have to make about another microservice or another module generically the problem",
    "start": "1007519",
    "end": "1013759"
  },
  {
    "text": "often is that these connections these assumptions we make about the modules or the microservices we call",
    "start": "1013759",
    "end": "1020000"
  },
  {
    "text": "are often purely captured in an implicit way we are not explicit about that and i'm a",
    "start": "1020000",
    "end": "1025760"
  },
  {
    "text": "big fan where possible of being explicit about the assumptions you're making where",
    "start": "1025760",
    "end": "1031120"
  },
  {
    "text": "possible if you are explicit about the yeah about what module b thinks module d should do for example",
    "start": "1031120",
    "end": "1038319"
  },
  {
    "text": "then it becomes much easier for you to reason about what things can change safely and what things",
    "start": "1038319",
    "end": "1043360"
  },
  {
    "text": "cannot so what what kind of tools have we got here that can help us in terms of being",
    "start": "1043360",
    "end": "1049600"
  },
  {
    "text": "explicit about what we expect of another module well this is actually an",
    "start": "1049600",
    "end": "1054960"
  },
  {
    "text": "area where schemas can help greatly and i think it's a bit unfortunate that sort of in the time since the soa",
    "start": "1054960",
    "end": "1061200"
  },
  {
    "text": "also the way we're implementing service oriented architectures um you know with things like soap and",
    "start": "1061200",
    "end": "1066320"
  },
  {
    "text": "whistle when that fell out of favor we seem to have ditched a lot of other ideas in that space at the same time",
    "start": "1066320",
    "end": "1072799"
  },
  {
    "text": "wizdl which is the schema format for soap is not much fun to work with but we seem to have got rid of the idea",
    "start": "1072799",
    "end": "1078240"
  },
  {
    "text": "of any schema rather than just reflecting on the fact that maybe that schema wasn't great i actually think schemas are very useful",
    "start": "1078240",
    "end": "1085120"
  },
  {
    "start": "1082000",
    "end": "1265000"
  },
  {
    "text": "because they allow you to make an explicit definition of what a microservice exposes",
    "start": "1085120",
    "end": "1091200"
  },
  {
    "text": "that again becomes an explicit representation for your developer working on that microservice",
    "start": "1091200",
    "end": "1096240"
  },
  {
    "text": "as to what they need to maintain to maintain backwards compatibility it is also an explicit representation of",
    "start": "1096240",
    "end": "1102559"
  },
  {
    "text": "the assumptions that an upstream microservice has of you i know loads of you are probably sending",
    "start": "1102559",
    "end": "1109039"
  },
  {
    "text": "json over http that's probably the most common form of inter-process communication is some",
    "start": "1109039",
    "end": "1114640"
  },
  {
    "text": "style of json over http communication now i personally am not a big fan of json",
    "start": "1114640",
    "end": "1120080"
  },
  {
    "text": "for general service to service communication i think it's fine for a browser but i think it's got a lot to be desired",
    "start": "1120080",
    "end": "1126240"
  },
  {
    "text": "for communication within a services estate and json typically is used without a schema",
    "start": "1126240",
    "end": "1131600"
  },
  {
    "text": "but you do have the option of using a schema with json there's a thing called json schema which",
    "start": "1131600",
    "end": "1136960"
  },
  {
    "text": "although it hasn't got a final version has a perfectly usable draft um and and that's uh",
    "start": "1136960",
    "end": "1142400"
  },
  {
    "text": "that's that's something that can be used today so you can still carry on using your json over http but you could also",
    "start": "1142400",
    "end": "1148559"
  },
  {
    "text": "now optionally have a schema that says and here is how i'm going to expose my data and i think that's very useful",
    "start": "1148559",
    "end": "1155360"
  },
  {
    "text": "very very useful schemas one done well can also allow you to generate client-side code that is able to read",
    "start": "1155360",
    "end": "1162240"
  },
  {
    "text": "those payloads automatically so we kind of get this benefit of being explicit about what our our microservice",
    "start": "1162240",
    "end": "1169039"
  },
  {
    "text": "or our module exposes but we also get the ability to generate code to read those endpoints a great example",
    "start": "1169039",
    "end": "1176080"
  },
  {
    "text": "of that will be something like the google protobuffer specifications this is an open source serialization",
    "start": "1176080",
    "end": "1182400"
  },
  {
    "text": "mechanism it's also used inside grpc and so here on the right hand side here",
    "start": "1182400",
    "end": "1187600"
  },
  {
    "text": "i see a very very simple protocol specification this is exposing kind of the different types",
    "start": "1187600",
    "end": "1193679"
  },
  {
    "text": "that an end point is exposing um and so it's very easy for an external party to now generate code against that",
    "start": "1193679",
    "end": "1200480"
  },
  {
    "text": "and google proto buffers allow for a higher degree of interoperability between different languages the civilization form itself is also",
    "start": "1200480",
    "end": "1206720"
  },
  {
    "text": "significantly more efficient than json in terms of the time taken to serialize deserialize and transmit",
    "start": "1206720",
    "end": "1213520"
  },
  {
    "text": "so there may be some other wins for you there if you're looking for other to eat other efficiencies out of your into",
    "start": "1213520",
    "end": "1219520"
  },
  {
    "text": "process communication one of the nice things around a schema is that you have theoretically at least the ability to",
    "start": "1219520",
    "end": "1226480"
  },
  {
    "text": "compare different versions of a schema and reason about whether or not the changes made from one version to another",
    "start": "1226480",
    "end": "1232240"
  },
  {
    "text": "are backwards compatible and for something like protocol buffers we actually have a program and a tool",
    "start": "1232240",
    "end": "1237600"
  },
  {
    "text": "train to do that there's a tool called protoloc which allows you to compare and contrast two different schemas and say are they",
    "start": "1237600",
    "end": "1243760"
  },
  {
    "text": "matching this could be a great thing for your service if your service exposed some sort of proto buffer endpoint",
    "start": "1243760",
    "end": "1249679"
  },
  {
    "text": "you could easily put this into your build you make a change that protocol specification",
    "start": "1249679",
    "end": "1254799"
  },
  {
    "text": "and the build says yes that's backwards compatible the build passes or no that won't be backwards compatible and",
    "start": "1254799",
    "end": "1260960"
  },
  {
    "text": "i'm going to fail the build and then at least you get some fast feedback obviously schemas aren't the",
    "start": "1260960",
    "end": "1266240"
  },
  {
    "text": "only way forward for this testing also is a huge part of maintaining and making sure you have",
    "start": "1266240",
    "end": "1271280"
  },
  {
    "text": "some degree of backwards compatibility and again good testing could really help",
    "start": "1271280",
    "end": "1276480"
  },
  {
    "text": "in terms of independent deployability what i will say is if you don't have schemas you're likely going to have to",
    "start": "1276480",
    "end": "1281840"
  },
  {
    "text": "do more testing to get the same degree of confidence so i think schemas and testing can complement each other very very well",
    "start": "1281840",
    "end": "1288799"
  },
  {
    "text": "in the same way that static typing and testing can still go together hand in hand so we've talked a bit about",
    "start": "1288799",
    "end": "1294799"
  },
  {
    "text": "information hiding and it is a super super important concept and if there's only one thing you take away from the presentation today",
    "start": "1294799",
    "end": "1300720"
  },
  {
    "text": "should be i should hide as much as possible all right information hiding is super super useful",
    "start": "1300720",
    "end": "1306240"
  },
  {
    "text": "but there's other ideas that we can look at as well that come from the wider field of structured programming these books",
    "start": "1306240",
    "end": "1312320"
  },
  {
    "text": "are actually surprisingly hard to get hold of nowadays i managed to get a copy of the book on the right the book on the left goes for",
    "start": "1312320",
    "end": "1317679"
  },
  {
    "text": "about 80 quid at the moment and takes a long time to arrive so i i have to say i've relied on online",
    "start": "1317679",
    "end": "1322720"
  },
  {
    "text": "versions of this book but um you can find it i think over archive.org",
    "start": "1322720",
    "end": "1328080"
  },
  {
    "text": "as part of their lending process anyway these are some of the seminal books certainly the structured design book by",
    "start": "1328080",
    "end": "1334240"
  },
  {
    "text": "jordan and constantine on the left which outlined a whole other concept around how we think about structured",
    "start": "1334240",
    "end": "1340559"
  },
  {
    "text": "programming and they gave us a whole bunch of terms that we kind of now take for granted two of those terms that we now",
    "start": "1340559",
    "end": "1347120"
  },
  {
    "text": "take for granted are coupling and cohesion we talk about these ideas quite a bit",
    "start": "1347120",
    "end": "1352320"
  },
  {
    "text": "especially in the concepts in the context rather of object-oriented programming and often as well in the context of",
    "start": "1352320",
    "end": "1359200"
  },
  {
    "text": "services-based programming we don't necessarily always have a good understanding about what these terms",
    "start": "1359200",
    "end": "1364320"
  },
  {
    "text": "mean but we tend to know what the desirable types of these things are so we talk about wanting low",
    "start": "1364320",
    "end": "1370720"
  },
  {
    "text": "coupling and strong cohesion and so that's what we tend to say we want these things and",
    "start": "1370720",
    "end": "1375840"
  },
  {
    "text": "we'll talk about why uh just in a moment so let's talk about what these terms mean well cohesion is the kind of idea that",
    "start": "1375840",
    "end": "1383600"
  },
  {
    "start": "1378000",
    "end": "1615000"
  },
  {
    "text": "well there's different definitions don't i like the best i know where i originally heard this from is the code that changes together stays",
    "start": "1383600",
    "end": "1390240"
  },
  {
    "text": "together so in other words if i've got all my invoicing functionality that i've got to change i would like to be able to change that in one place",
    "start": "1390240",
    "end": "1396320"
  },
  {
    "text": "keep that code in one place rather than having to go lots and parts of my code base to to make that change happen by having all that",
    "start": "1396320",
    "end": "1402799"
  },
  {
    "text": "functionality in one place makes it much easier for me to say uh fight you know remove duplication create abstractions",
    "start": "1402799",
    "end": "1408480"
  },
  {
    "text": "all that good stuff but it also reduces the amount of work required to make changes and then we often might see the opposite",
    "start": "1408480",
    "end": "1415039"
  },
  {
    "text": "of this we might see examples of weak cohesion and we've probably all worked on systems and maybe distributed systems",
    "start": "1415039",
    "end": "1421360"
  },
  {
    "text": "where you have to sort of go to like 5 10 15 different 20 different places in your architecture",
    "start": "1421360",
    "end": "1428000"
  },
  {
    "text": "in order to make a change that software you know the the invoicing functionality is spread all over",
    "start": "1428000",
    "end": "1433279"
  },
  {
    "text": "payroll's in about five different places and we have to go make changes in like two three four five six different services",
    "start": "1433279",
    "end": "1439919"
  },
  {
    "text": "just to roll out a simple feature and then when we have our architectures that have this sort of",
    "start": "1439919",
    "end": "1445279"
  },
  {
    "text": "weak cohesion that can often lead to um sort of a much higher maintenance",
    "start": "1445279",
    "end": "1450720"
  },
  {
    "text": "costs as well with the services architecture that can lead us into the world of things like the distributed monolith",
    "start": "1450720",
    "end": "1457200"
  },
  {
    "text": "now cohesion kind of goes hand in hand with coupling and coupling is the degree to which changing one",
    "start": "1457200",
    "end": "1463039"
  },
  {
    "text": "module requires a change in another module if the if my cohesion is weak um i'll",
    "start": "1463039",
    "end": "1469919"
  },
  {
    "text": "have to go and change lots of things if i want to change that functionality i've got to go and change it in lots of places",
    "start": "1469919",
    "end": "1474960"
  },
  {
    "text": "that leads to coupling because i'm having to change all those things together so as we have weaker cohesion we tend to",
    "start": "1474960",
    "end": "1481679"
  },
  {
    "text": "have tighter coupling what we want of course is we want looser lower coupling",
    "start": "1481679",
    "end": "1486960"
  },
  {
    "text": "so as we reduce coupling we will tend to find that our cohesion improves so there's a vicious or",
    "start": "1486960",
    "end": "1492640"
  },
  {
    "text": "virtuous relationship there and this actually gives rise to something that's known as constantine's",
    "start": "1492640",
    "end": "1497919"
  },
  {
    "text": "law which states that if a structure is stable if the cohesion is strong and the",
    "start": "1497919",
    "end": "1504080"
  },
  {
    "text": "coupling is low now remember what we want for our micro services we want independent deployability",
    "start": "1504080",
    "end": "1510159"
  },
  {
    "text": "to have independent deployability we need a stable interface so with that in mind",
    "start": "1510159",
    "end": "1516480"
  },
  {
    "text": "we want a micro services which have a strong degree of cohesion and have loose or low coupling with",
    "start": "1516480",
    "end": "1522880"
  },
  {
    "text": "other micro services and based on you know these ideas that should give us a",
    "start": "1522880",
    "end": "1528159"
  },
  {
    "text": "stable microservice boundary that makes it easy for us to develop independently so if you want independent",
    "start": "1528159",
    "end": "1534960"
  },
  {
    "text": "deployability information hiding is really really important as are having strong cohesion and loose coupling",
    "start": "1534960",
    "end": "1543679"
  },
  {
    "text": "now coupling is a bit more of a nuanced concept and it comes up in lots of different forms i'm going to take you through a few different forms",
    "start": "1543679",
    "end": "1550799"
  },
  {
    "text": "and and some of these are terms taken directly from structured programming some of them have changed a little bit i'm trying to work on kind of a",
    "start": "1550799",
    "end": "1557440"
  },
  {
    "text": "model to describe the different forms of coupling in the context of micro services so this is far from a finished piece of",
    "start": "1557440",
    "end": "1563520"
  },
  {
    "text": "work but we're going to look um i think we'll actually skip over  coupling because it's a bit of a niche one",
    "start": "1563520",
    "end": "1569120"
  },
  {
    "text": "but we're going to take a look at domain coupling common coupling and content coupling and look at how",
    "start": "1569120",
    "end": "1574559"
  },
  {
    "text": "these different forms of coupling would manifest themselves in a distributed system",
    "start": "1574559",
    "end": "1580880"
  },
  {
    "text": "and maybe talk a bit about how we could fix those problems in general when we think about these different forms of coupling we're",
    "start": "1580880",
    "end": "1586799"
  },
  {
    "text": "looking to find looser forms of coupling so domain coupling over here on the left is a fairly",
    "start": "1586799",
    "end": "1592320"
  },
  {
    "text": "loose form of coupling we get over something like content coupling which is also known as pathological",
    "start": "1592320",
    "end": "1598880"
  },
  {
    "text": "coupling this is where we're getting to really really tight forms of coupling so in general when you find a form of",
    "start": "1598880",
    "end": "1605200"
  },
  {
    "text": "coupling you're going to think well can i kind of replace this with a different form of coupling that might be better for me",
    "start": "1605200",
    "end": "1610480"
  },
  {
    "text": "that's looser that allows me more ability to change things independently",
    "start": "1610480",
    "end": "1615679"
  },
  {
    "start": "1615000",
    "end": "1806000"
  },
  {
    "text": "we'll start off with the kind of the easiest one which is domain coupling and so here's the main coupling so i've",
    "start": "1615679",
    "end": "1622000"
  },
  {
    "text": "got a service here over on the left called the order processor and this is involved in some kind of",
    "start": "1622000",
    "end": "1627520"
  },
  {
    "text": "process to reserve stock and take payments right so this looks like a",
    "start": "1627520",
    "end": "1633120"
  },
  {
    "text": "sort of orchestrated process to handle you know on some online e-commerce company maybe",
    "start": "1633120",
    "end": "1639039"
  },
  {
    "text": "so i'm talking to a warehouse i thought we've got some physical inventory going on i'm taking money the kinds of things you could imagine an",
    "start": "1639039",
    "end": "1644320"
  },
  {
    "text": "e-commerce company would need so the order processor has need to use functionality in the warehouse service",
    "start": "1644320",
    "end": "1650640"
  },
  {
    "text": "the warehouse service here exposes the functionality to allow me to reserve stock and the payment service allows me to use",
    "start": "1650640",
    "end": "1657760"
  },
  {
    "text": "the functionality to take payments which is kind of what you would expect from a payment service the order process here is said to have",
    "start": "1657760",
    "end": "1664320"
  },
  {
    "text": "domain coupling with the warehouse and with the payment the order processor",
    "start": "1664320",
    "end": "1669520"
  },
  {
    "text": "needs to make use of the domain exposed by the warehouse and the domain exposed by the payment",
    "start": "1669520",
    "end": "1675200"
  },
  {
    "text": "service if the warehouse changes its functionality changes that part of the domain changes how",
    "start": "1675200",
    "end": "1680320"
  },
  {
    "text": "stock is managed for example in such a way that it impacts that contract the order processor would also need to",
    "start": "1680320",
    "end": "1686640"
  },
  {
    "text": "change having some degree of domain coupling in a microservice architecture is pretty much inescapable what we've",
    "start": "1686640",
    "end": "1693679"
  },
  {
    "text": "done with our microservice architecture is broken things down into you know this functionality is using",
    "start": "1693679",
    "end": "1698880"
  },
  {
    "text": "functionality in this micro service over here we do need to collaborate with other micro services from time to time to get",
    "start": "1698880",
    "end": "1705200"
  },
  {
    "text": "things done so this is to some extent unescapable but we can also still take",
    "start": "1705200",
    "end": "1711120"
  },
  {
    "text": "attempts to limit it so here the order processor has a degree of domain coupling to both",
    "start": "1711120",
    "end": "1716720"
  },
  {
    "text": "warehouse and payment it's therefore vulnerable if the warehouse or payment make changes that change their contract",
    "start": "1716720",
    "end": "1723279"
  },
  {
    "text": "but there is no domain coupling between the warehouse and the payment service they don't talk to each other",
    "start": "1723279",
    "end": "1728640"
  },
  {
    "text": "there's no communication between them whatsoever so a change to payment is never going to affect warehouse",
    "start": "1728640",
    "end": "1733919"
  },
  {
    "text": "directly and so if you can reduce how many services that you have domain coupling on you're likely going to make it easier to",
    "start": "1733919",
    "end": "1740320"
  },
  {
    "text": "evolve your services in isolation um one of the sort of smells you can look for one of the potential problems",
    "start": "1740320",
    "end": "1746559"
  },
  {
    "text": "you can look for are micro services that have lots of outbound domain coupling something like an order processor is",
    "start": "1746559",
    "end": "1753360"
  },
  {
    "text": "often the kind of service that could well end up talking to about 5 10 15 20 different micro services",
    "start": "1753360",
    "end": "1758720"
  },
  {
    "text": "so it will have a high degree of domain coupling to lots of other outbound services and in that",
    "start": "1758720",
    "end": "1764320"
  },
  {
    "text": "situation you're always worried that it's doing too much that'll tend to maybe that could sometimes point to a centralization of",
    "start": "1764320",
    "end": "1770799"
  },
  {
    "text": "logic but it also means you've got a micro service which is much more vulnerable to other changes that might be made in the",
    "start": "1770799",
    "end": "1776399"
  },
  {
    "text": "system you'll typically find that micro services that have a high degree of",
    "start": "1776399",
    "end": "1782240"
  },
  {
    "text": "domain coupling will often also have a higher degree of volatility the extent to which it has to change because of these other changes that may",
    "start": "1782240",
    "end": "1788640"
  },
  {
    "text": "be happening in the system so you always want to be keeping an eye on those whenever you see a micro service that look depends on loads of other",
    "start": "1788640",
    "end": "1794080"
  },
  {
    "text": "things take a good hard look at it and and you know in the same way that you would say look at a god class in a code base",
    "start": "1794080",
    "end": "1800320"
  },
  {
    "text": "where which might be doing way too many things and think is there a way we could maybe uh split this apart",
    "start": "1800320",
    "end": "1806480"
  },
  {
    "start": "1806000",
    "end": "1944000"
  },
  {
    "text": "the next form of coupling we're going to look at is common coupling so common coupling is where we have",
    "start": "1806480",
    "end": "1811679"
  },
  {
    "text": "multiple micro services that are all depending on some externally defined sort of data source so in this example",
    "start": "1811679",
    "end": "1818880"
  },
  {
    "text": "here i've got stock levels so these stock levels could be held in like a redis cache or",
    "start": "1818880",
    "end": "1824480"
  },
  {
    "text": "you know it could be a database table or it could be a file location and the warehouse needs",
    "start": "1824480",
    "end": "1830320"
  },
  {
    "text": "to read and write from those stock levels and the order processor needs to check those stock levels and we've also got",
    "start": "1830320",
    "end": "1836640"
  },
  {
    "text": "our forecasting service over here which needs to also do things with those stock levels to check how much",
    "start": "1836640",
    "end": "1842159"
  },
  {
    "text": "stock we're selling and maybe make decisions about what we should order so a common coupling describes a",
    "start": "1842159",
    "end": "1847360"
  },
  {
    "text": "situation where like you have a micro service which depends on an externally defined data set",
    "start": "1847360",
    "end": "1853360"
  },
  {
    "text": "the issue of course here is that if we change that stock level service also our stock levels data source",
    "start": "1853360",
    "end": "1858720"
  },
  {
    "text": "we're going to potentially impact multiple different micro services here um and often with data sources like this",
    "start": "1858720",
    "end": "1865200"
  },
  {
    "text": "we're allowing direct data access another example uh uh that could be similar this would be something like a data warehouse",
    "start": "1865200",
    "end": "1871120"
  },
  {
    "text": "you know if you're having all these services having to push data into a centralized data warehouse that's arguably a form of common",
    "start": "1871120",
    "end": "1877360"
  },
  {
    "text": "coupling although typically that is mitigated by the fact that you know you're typically doing read-only access to",
    "start": "1877360",
    "end": "1883200"
  },
  {
    "text": "those data warehouses where something like stock levels where i've got read and write behavior we're a bit more concerned about something like this",
    "start": "1883200",
    "end": "1890000"
  },
  {
    "text": "the issue of course here is that we're much you know any changes to stock levels ends up having quite a significant",
    "start": "1890000",
    "end": "1895279"
  },
  {
    "text": "impact on our system and in fact when you tend to find common coupling you tend to find like some sort of data",
    "start": "1895279",
    "end": "1900799"
  },
  {
    "text": "store in the middle of it that's just never going to be able to change in any way shape or form because the impacts of that are too",
    "start": "1900799",
    "end": "1906240"
  },
  {
    "text": "great so manageable in some situations but you again really do want to limit this where appropriate and actually be maybe",
    "start": "1906240",
    "end": "1913360"
  },
  {
    "text": "more selective in what data is stored or managed in this way would be useful an example of common coupling that you",
    "start": "1913360",
    "end": "1918960"
  },
  {
    "text": "might find within a program would be things like shared memory locations so shared mutable state",
    "start": "1918960",
    "end": "1924399"
  },
  {
    "text": "so whenever you have a mutable state that's shared by multiple multiple different bits of code or different",
    "start": "1924399",
    "end": "1929440"
  },
  {
    "text": "processes we have a real issue there because effectively we can end up with situations we effectively do in communication",
    "start": "1929440",
    "end": "1935679"
  },
  {
    "text": "via these shared memory locations which can get really nasty so even",
    "start": "1935679",
    "end": "1941120"
  },
  {
    "text": "within common coupling there are some forms that are worse than others the last form of coupling",
    "start": "1941120",
    "end": "1946320"
  },
  {
    "text": "we're going to look at is something called content coupling and content coupling is the worst form of coupling that you'll see it's",
    "start": "1946320",
    "end": "1953760"
  },
  {
    "text": "also unfortunately something i still see far too often so here i've got an order",
    "start": "1953760",
    "end": "1958960"
  },
  {
    "text": "service and that order service is manages the life cycle of a given order",
    "start": "1958960",
    "end": "1965039"
  },
  {
    "text": "and uh very simplistically here we've sort of modeled that as it basically ha uses and",
    "start": "1965039",
    "end": "1972080"
  },
  {
    "text": "a table inside its own database where it can manage the state of a row so when i make a change to an order i'm going to",
    "start": "1972080",
    "end": "1978320"
  },
  {
    "text": "update that row okay it's a pretty straightforward approach one of the ways in which we",
    "start": "1978320",
    "end": "1983760"
  },
  {
    "text": "allow ensure that microservices can be independently deployable is we look to also isolate data we want microservices",
    "start": "1983760",
    "end": "1990320"
  },
  {
    "text": "to own their own data management so that means that other microservices if they want to make a change in state",
    "start": "1990320",
    "end": "1996159"
  },
  {
    "text": "have to come to that service and say please can i make a change in this state so here",
    "start": "1996159",
    "end": "2001519"
  },
  {
    "text": "i've got the order processor which is coming to the order service and saying could you update this order please so",
    "start": "2001519",
    "end": "2007679"
  },
  {
    "text": "the way this would work is an order processor would send some form of request over whatever protocol it seems fit and",
    "start": "2007679",
    "end": "2014640"
  },
  {
    "text": "it might say can you please mark this order into a shipped state our order service would take a",
    "start": "2014640",
    "end": "2019840"
  },
  {
    "text": "look at its local data and say well based on the current state of this order based on the request being made that yes",
    "start": "2019840",
    "end": "2026640"
  },
  {
    "text": "this is an allowable state transition and i will now move it into a shipped state no it's not and it might reject that the",
    "start": "2026640",
    "end": "2033440"
  },
  {
    "text": "idea being here that the order actually manages the set of allowable state transitions around a piece of data",
    "start": "2033440",
    "end": "2039840"
  },
  {
    "text": "and so that kind of can encapsulate the logic and state of this service of course we could",
    "start": "2039840",
    "end": "2045440"
  },
  {
    "text": "do something fancy like running an event source system in here if we wanted to but you know let's keep things simple with",
    "start": "2045440",
    "end": "2050560"
  },
  {
    "text": "tables and so the nice thing about this is that we have a single source of truth for where we get our order information",
    "start": "2050560",
    "end": "2056480"
  },
  {
    "text": "it is the order service and we go to the order service to request the information we want by going to an explicit service",
    "start": "2056480",
    "end": "2063280"
  },
  {
    "text": "interface to ask for information about an order we actually ensure that the microservice the order microservice",
    "start": "2063280",
    "end": "2069679"
  },
  {
    "text": "exposes only what limited data it needs to it can hide a lot of the detail in that database",
    "start": "2069679",
    "end": "2074960"
  },
  {
    "text": "that no one else needs to know about there might be other things it needs to track to do its job no one else in the outside world should",
    "start": "2074960",
    "end": "2081440"
  },
  {
    "text": "know or care about that but oh no along comes the warehouse service and the warehouse service for",
    "start": "2081440",
    "end": "2087280"
  },
  {
    "text": "reasons we don't fully understand has direct access to the order services database",
    "start": "2087280",
    "end": "2092638"
  },
  {
    "text": "so it can now directly read order state from that database it is also able to make changes to that",
    "start": "2092639",
    "end": "2099200"
  },
  {
    "text": "date state maybe by saying okay this order is now in a picking state so picking is the process by which",
    "start": "2099200",
    "end": "2104560"
  },
  {
    "text": "people go at a warehouse pick things up and put them into boxes at this point we've completely bypassed information",
    "start": "2104560",
    "end": "2111359"
  },
  {
    "text": "hiding we are no longer available to decide about what information is hidden",
    "start": "2111359",
    "end": "2116720"
  },
  {
    "text": "from the outside world everything in our database is effectively now shared it's completely unclear to us now when",
    "start": "2116720",
    "end": "2123520"
  },
  {
    "text": "working on that order service as to what parts of our database can be changed easily",
    "start": "2123520",
    "end": "2128880"
  },
  {
    "text": "you know we may even have challenges here about doing things like adding new database constraints because",
    "start": "2128880",
    "end": "2134320"
  },
  {
    "text": "we know we're aware that we've got this other warehouse service out there that has this connection straight into our database",
    "start": "2134320",
    "end": "2140480"
  },
  {
    "text": "we mentioned before that the connections between modules also kind of define the assumptions that modules have of other",
    "start": "2140480",
    "end": "2146240"
  },
  {
    "text": "modules well here the warehouse has a connection to our database so the warehouse clearly has",
    "start": "2146240",
    "end": "2152560"
  },
  {
    "text": "expectations it has assumptions about what functionality we should be providing to that warehouse",
    "start": "2152560",
    "end": "2158000"
  },
  {
    "text": "but it is completely implicit to us how can we be explicit about what we think the warehouse needs",
    "start": "2158000",
    "end": "2163920"
  },
  {
    "text": "the only thing we've got to go on maybe is the structure of our database and that's not a great schema in this context the other problem",
    "start": "2163920",
    "end": "2171359"
  },
  {
    "text": "with this model is that we might have logic and code inside the order service that says",
    "start": "2171359",
    "end": "2176960"
  },
  {
    "text": "these things are reliable state transitions this is the logic about how this object this entity is",
    "start": "2176960",
    "end": "2182720"
  },
  {
    "text": "allowed to change these are the set of allowable you know state transitions that you can have but if we allow people to bypass",
    "start": "2182720",
    "end": "2189599"
  },
  {
    "text": "that logic and go direct to the database either they've got a duplicate implementation",
    "start": "2189599",
    "end": "2195040"
  },
  {
    "text": "of that same functionality in which case we're lacking cohesion or they've got a different implementation in which case we're in",
    "start": "2195040",
    "end": "2200960"
  },
  {
    "text": "the world where we might have inconsistent data our data being updated in inconsistent ways",
    "start": "2200960",
    "end": "2206480"
  },
  {
    "text": "there's a reason that this form of coupling is called pathological coupling when you reach directly into another",
    "start": "2206480",
    "end": "2212800"
  },
  {
    "text": "services implementation like this and reaching directly into another services database is the worst form of that",
    "start": "2212800",
    "end": "2219200"
  },
  {
    "text": "this is a very very tight form of coupling and the right fix here would be to get",
    "start": "2219200",
    "end": "2224800"
  },
  {
    "text": "the warehouse to rather than going straight to the database would actually be go to maybe an interface exposed by the order",
    "start": "2224800",
    "end": "2231599"
  },
  {
    "text": "that could be a rest-based api or an invented endpoint or some other exposed or cue or something else",
    "start": "2231599",
    "end": "2238720"
  },
  {
    "text": "don't bypass the information hiding and go go to a well-defined service interface and you'll be better",
    "start": "2238720",
    "end": "2244320"
  },
  {
    "text": "off so just to summarize there are different forms of coupling out there when you encounter these",
    "start": "2244320",
    "end": "2250640"
  },
  {
    "start": "2245000",
    "end": "2405000"
  },
  {
    "text": "different forms of coupling what you're going to try and do so drag them from the right to the left if we loop if we make our coupling if we",
    "start": "2250640",
    "end": "2258000"
  },
  {
    "text": "sort of decrease the amount of coupling we have we are going to make it much easier for us to",
    "start": "2258000",
    "end": "2263040"
  },
  {
    "text": "make our software independently deployable so when you encounter these ideas when you count say content coupling or common",
    "start": "2263040",
    "end": "2269440"
  },
  {
    "text": "coupling think can i get that functionality and change it in such a way that now maybe it's using domain coupling",
    "start": "2269440",
    "end": "2275040"
  },
  {
    "text": "or perhaps even remove the relationship altogether so just in summary uh information hiding",
    "start": "2275040",
    "end": "2281520"
  },
  {
    "text": "is super super important okay it's vital that you kind of hide as much",
    "start": "2281520",
    "end": "2287280"
  },
  {
    "text": "as possible anything you expose when you excuse to expose some information this could be a",
    "start": "2287280",
    "end": "2292960"
  },
  {
    "text": "piece of data this could be a method expose that in a way that makes what you're exposing very",
    "start": "2292960",
    "end": "2298480"
  },
  {
    "text": "explicit strongly consider the use of an explicit contract to say this is what i'm exposing having an",
    "start": "2298480",
    "end": "2305599"
  },
  {
    "text": "explicit declaration about what you expose is going to be useful for clients that are using your service it's also going",
    "start": "2305599",
    "end": "2312000"
  },
  {
    "text": "to be super useful for people who are developing on that service because they understand what things can be safely changed and",
    "start": "2312000",
    "end": "2318720"
  },
  {
    "text": "what things cannot so whatever mechanism makes sense for you look at maybe doing you maybe look at dtos if that's going",
    "start": "2318720",
    "end": "2325280"
  },
  {
    "text": "to work for you look at something like explicit schemas annotate any classes that are used in",
    "start": "2325280",
    "end": "2330320"
  },
  {
    "text": "serialization all of these are things that can help tests can also be part of that",
    "start": "2330320",
    "end": "2335599"
  },
  {
    "text": "but i think you can do more than just adding tests to this sort of thing some coupling when you get into it is worse",
    "start": "2335599",
    "end": "2342079"
  },
  {
    "text": "than others um common coupling and that sort of pathological content coupling is really bad so if we",
    "start": "2342079",
    "end": "2348880"
  },
  {
    "text": "can maybe shift that multiples domain coupling will make our coupling looser we therefore make independent",
    "start": "2348880",
    "end": "2354480"
  },
  {
    "text": "developability much easier as well along the lines we'll actually end up making this",
    "start": "2354480",
    "end": "2359599"
  },
  {
    "text": "our systems have a higher a higher degree of cohesion which in turn should actually reduce our maintenance costs",
    "start": "2359599",
    "end": "2364800"
  },
  {
    "text": "which is a lot of what this is all about but information hiding low coupling and strong cohesion all of",
    "start": "2364800",
    "end": "2370960"
  },
  {
    "text": "these ideas build up to giving you that idea of independent deployability",
    "start": "2370960",
    "end": "2376720"
  },
  {
    "text": "i hope this was of use i didn't want to keep you too long i've got a lot more information over at my website including information about",
    "start": "2376720",
    "end": "2382640"
  },
  {
    "text": "my latest book and the services i offer and you can find lots of that stuff over there i will get the slides for this",
    "start": "2382640",
    "end": "2388640"
  },
  {
    "text": "talk uploaded there shortly but we do have a little bit of time left for questions i believe",
    "start": "2388640",
    "end": "2394400"
  },
  {
    "text": "so i think i will just exit the sharing from this um so let's",
    "start": "2394400",
    "end": "2400880"
  },
  {
    "text": "stop streaming take a look to see if we've got any question okay so let's",
    "start": "2400880",
    "end": "2409200"
  },
  {
    "start": "2405000",
    "end": "2749000"
  },
  {
    "text": "take a quick look at this so we've had a question here from denise lounge so janiece uh says and i am going to",
    "start": "2409200",
    "end": "2415599"
  },
  {
    "text": "apologize up front if i get that your um if i get the terms your terms your name's wrong um so i've",
    "start": "2415599",
    "end": "2423280"
  },
  {
    "text": "heard talk about high cohesion low cohesion not strong weak either a semantic difference or",
    "start": "2423280",
    "end": "2428640"
  },
  {
    "text": "just different wording the strong weak cohesion is the terms that were originally used in structured",
    "start": "2428640",
    "end": "2433760"
  },
  {
    "text": "programming and so because i'm trying to sort of unify that work a little bit i'm trying to use the",
    "start": "2433760",
    "end": "2439119"
  },
  {
    "text": "original terms here but you can consider them as being the same concepts so you can think of them as a spectrum",
    "start": "2439119",
    "end": "2444720"
  },
  {
    "text": "so high cohesion you can consider to be the same as strong cohesion low cohesion the same as weak cohesion",
    "start": "2444720",
    "end": "2450720"
  },
  {
    "text": "i'm sort of trying to go back to the original terms at the moment purely because i'm spending so much time reading books",
    "start": "2450720",
    "end": "2456160"
  },
  {
    "text": "from the 1970s that switching my brain patterns is proving to be difficult um",
    "start": "2456160",
    "end": "2462319"
  },
  {
    "text": "uh so you've mentioned you're not really a fan of jason as the communication between services what would you recommend as an alternative and why",
    "start": "2462319",
    "end": "2468960"
  },
  {
    "text": "well so why am i not a big fan of json well firstly it doesn't require a schema yes you've got json schema that helps",
    "start": "2468960",
    "end": "2475680"
  },
  {
    "text": "but it's not you know the fact that most people don't use it with jason is a problem the second thing is what is",
    "start": "2475680",
    "end": "2482560"
  },
  {
    "text": "json being compared to people picked up jason largely because they thought it was less for both than xml",
    "start": "2482560",
    "end": "2488880"
  },
  {
    "text": "now we can put aside the fact that actually once you send it over the wire and compress it it's not much smaller",
    "start": "2488880",
    "end": "2494000"
  },
  {
    "text": "than xml um secondly why do you care about how verbose it looks it's not there for a",
    "start": "2494000",
    "end": "2499359"
  },
  {
    "text": "human being to read it's there for a computer to read so by all means use json for configuration files",
    "start": "2499359",
    "end": "2505200"
  },
  {
    "text": "but by and large we really like to print to pick serialization protocols or sometimes encodings",
    "start": "2505200",
    "end": "2510720"
  },
  {
    "text": "some people refer to them as things that are easy for a computer to create and another computer to read and json is",
    "start": "2510720",
    "end": "2517599"
  },
  {
    "text": "alright for that but there are other forms that are much more efficient so protocol buffers for example are",
    "start": "2517599",
    "end": "2523040"
  },
  {
    "text": "significantly more efficient to serialize deserialize and read also something like protocol buffers has",
    "start": "2523040",
    "end": "2529119"
  },
  {
    "text": "significantly better support built in for enabling you to make reasoned decisions about making payloads",
    "start": "2529119",
    "end": "2535359"
  },
  {
    "text": "backwards compatible by all means use json for human readable things if you want to or although i think yaml is slightly",
    "start": "2535359",
    "end": "2542079"
  },
  {
    "text": "better for human readable configuration stuff or but i would tend to restrict the use of json to",
    "start": "2542079",
    "end": "2548160"
  },
  {
    "text": "communication to to kind of the front so your front end devices",
    "start": "2548160",
    "end": "2553839"
  },
  {
    "text": "are better serialization mechanisms that i'd be more interested in using protocol buffers i'd also look at avro",
    "start": "2553839",
    "end": "2560400"
  },
  {
    "text": "avro effectively is sort of a json based protocol but actually has explicit schemas and has",
    "start": "2560400",
    "end": "2565760"
  },
  {
    "text": "some really nice interesting support for uh sort of almost like interpreting",
    "start": "2565760",
    "end": "2571680"
  },
  {
    "text": "different payloads using different versions of schemas so i could actually write effectively something they can interpret uh",
    "start": "2571680",
    "end": "2578160"
  },
  {
    "text": "payloads from multiple different versions of the same avro schema almost using sort of binding to uh",
    "start": "2578160",
    "end": "2584400"
  },
  {
    "text": "payloads a bit like i'd sort of handle a dynamic type um so have a look at avro as a serialization format that's quite",
    "start": "2584400",
    "end": "2590400"
  },
  {
    "text": "heavily used in messaging or protocol buffers and by the way there's no reason why you couldn't",
    "start": "2590400",
    "end": "2596079"
  },
  {
    "text": "theoretically send those things over a http or rest based interface",
    "start": "2596079",
    "end": "2601839"
  },
  {
    "text": "the other thing you could potentially look at is maybe look at something like open api specification so this is uh not",
    "start": "2601839",
    "end": "2608800"
  },
  {
    "text": "replacing the serialization format but is at least giving you a way to define a a schema for a rest based",
    "start": "2608800",
    "end": "2615839"
  },
  {
    "text": "interface that'd be making use of json as a serialization format",
    "start": "2615839",
    "end": "2620640"
  },
  {
    "text": "so the question is one last question here and we'll take a break the way you describe it it seems that content coupling and",
    "start": "2621440",
    "end": "2627040"
  },
  {
    "text": "common coupling are similar is the difference the persistence mechanism content coupling is about a shared",
    "start": "2627040",
    "end": "2632560"
  },
  {
    "text": "database while common coupling is about shared state in a more volatile fashion not quite the distinction is is a bit",
    "start": "2632560",
    "end": "2640560"
  },
  {
    "text": "kind of less well defined than i would like uh content so common coupling is where you've got a",
    "start": "2640560",
    "end": "2646880"
  },
  {
    "text": "common let's say the content coupling so common coupling is where you have a common externally defined data source",
    "start": "2646880",
    "end": "2653280"
  },
  {
    "text": "that multiple people access so you say this thing loads people can access go at it so that would be your traditional shared",
    "start": "2653280",
    "end": "2659359"
  },
  {
    "text": "database everyone can access that common couple as a content coupling on",
    "start": "2659359",
    "end": "2665040"
  },
  {
    "text": "the other hand is where you reach inside of somebody else's implementation detail so there's there's a subtle difference",
    "start": "2665040",
    "end": "2671200"
  },
  {
    "text": "so when you with common coupling you typically say this is a common data source everyone could do what they want with that common data source it is a",
    "start": "2671200",
    "end": "2678319"
  },
  {
    "text": "free-for-all content coupling is by reaching into somebody else's",
    "start": "2678319",
    "end": "2683359"
  },
  {
    "text": "implementation detail so that's the distinction i'm still working through those models trying to come up with some",
    "start": "2683359",
    "end": "2688480"
  },
  {
    "text": "better distinctions it's a weird thing that a lot of those distinctions are much more stark when we look at it in code form than we look at",
    "start": "2688480",
    "end": "2694480"
  },
  {
    "text": "in services form so i'm still working through those models the key thing is they're both not great but reaching",
    "start": "2694480",
    "end": "2701440"
  },
  {
    "text": "inside another services implementation into its database is worse often because we're bypassing a lot of",
    "start": "2701440",
    "end": "2708160"
  },
  {
    "text": "logic around how that data should be managed but i i can understand the overlap there",
    "start": "2708160",
    "end": "2714560"
  },
  {
    "text": "all right we are at time um thank you so much for coming along and asking questions so um i i've seen",
    "start": "2714560",
    "end": "2721520"
  },
  {
    "text": "familiar from some familiar faces on the attendee list as well so thanks for coming on some of my talks again um if you want to know more about my",
    "start": "2721520",
    "end": "2728160"
  },
  {
    "text": "anything i do you can pop over to uh uh sort of um the uh hd drop over to my website which",
    "start": "2728160",
    "end": "2735920"
  },
  {
    "text": "is just samuel io you can also find me over at sam newman uh if there are any questions i didn't",
    "start": "2735920",
    "end": "2741920"
  },
  {
    "text": "get to i am going to be on this slack channel and i'll be hanging around there for the rest of the day so thank you so much for",
    "start": "2741920",
    "end": "2747920"
  },
  {
    "text": "your time",
    "start": "2747920",
    "end": "2751200"
  }
]