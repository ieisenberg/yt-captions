[
  {
    "text": "all right uh thanks again for coming to my session uh it's 20 so I guess let's start so as I said before we are going",
    "start": "3520",
    "end": "10480"
  },
  {
    "text": "to compare these two products and hopefully it's going to help you to pick the right one in the right time uh so I",
    "start": "10480",
    "end": "16560"
  },
  {
    "text": "actually have those two numbers here and those two numbers actually presents the ages of these products so SQL server is",
    "start": "16560",
    "end": "23680"
  },
  {
    "text": "actually 30 years old this uh this year and many people says 30s are the new 20s",
    "start": "23680",
    "end": "30720"
  },
  {
    "text": "you know it might actually apply for maybe humans but for SQL server they are really trying to make the application",
    "start": "30720",
    "end": "38160"
  },
  {
    "text": "much modern with adding all kind of new features uh every year uh it's in the Azure SQL you can use that or the SQL",
    "start": "38160",
    "end": "44879"
  },
  {
    "text": "server on prem so which is kind of like a nice for SQL server to have because you can actually have onrem version uh",
    "start": "44879",
    "end": "52320"
  },
  {
    "text": "and it does it's just not like the cloud only uh Cosmos CB is 7 years old so it's",
    "start": "52320",
    "end": "58559"
  },
  {
    "text": "a totally new generation you know the application is cloudorn so it's much easier for you to kind of you know",
    "start": "58559",
    "end": "64960"
  },
  {
    "text": "interact with the other new features like AI or any kind of other cloud uh",
    "start": "64960",
    "end": "70799"
  },
  {
    "text": "you know product it's much easier to you know do the interactions so those are the kind of like the I guess the two",
    "start": "70799",
    "end": "76640"
  },
  {
    "text": "numbers uh you can kind of see uh when it comes to the community SQL server has",
    "start": "76640",
    "end": "81920"
  },
  {
    "text": "been out there so you are going to have a lot of support if you have questions it's going to be much easier to find it",
    "start": "81920",
    "end": "87360"
  },
  {
    "text": "but you know Cosmos DV is new we are trying to you know like create a new uh user I guess the database for it and",
    "start": "87360",
    "end": "94479"
  },
  {
    "text": "user community so uh I'm always out there my name is Sassan Saver if you",
    "start": "94479",
    "end": "99759"
  },
  {
    "text": "will have any kind of questions about the Cosmos DB I'll be more than happy to answer you uh from any of my uh you know",
    "start": "99759",
    "end": "106000"
  },
  {
    "text": "the social media uh accounts and I'm a data platform MVP uh this is my sixth",
    "start": "106000",
    "end": "112560"
  },
  {
    "text": "year i'm proud and happy to be part of the program i am from United States uh",
    "start": "112560",
    "end": "118399"
  },
  {
    "text": "Cleveland Ohio i am my own company web consulting mostly I am really focusing",
    "start": "118399",
    "end": "124399"
  },
  {
    "text": "on uh Cosmos DB but I have a full-time job in a large uh insurance company and",
    "start": "124399",
    "end": "131440"
  },
  {
    "text": "I'm a senior business intelligence manager out there so and also I'm not sure if you had chance to kind of play",
    "start": "131440",
    "end": "138480"
  },
  {
    "text": "with the Cosmos DBSQL studio owner i'm the I'm the owner for that and it's a VS code extension if we had some uh time at",
    "start": "138480",
    "end": "146000"
  },
  {
    "text": "the end of the session I will maybe some give you some demo for that and really",
    "start": "146000",
    "end": "151760"
  },
  {
    "text": "that's me uh so let's actually start the presentation the first thing I want to",
    "start": "151760",
    "end": "157519"
  },
  {
    "text": "actually do here is I want to be sure that you know you understand what's really happening in the back end for a",
    "start": "157519",
    "end": "163360"
  },
  {
    "text": "central database and a distributed database uh SQL server is a centralized",
    "start": "163360",
    "end": "169360"
  },
  {
    "text": "database so although it's clients trying to pull data from the SQL server they",
    "start": "169360",
    "end": "175760"
  },
  {
    "text": "don't really need to think about that much where the data is that is database's problem to find the data and",
    "start": "175760",
    "end": "181680"
  },
  {
    "text": "deliver that to you so you can do something with it as long as you have the connection string all the sort",
    "start": "181680",
    "end": "187440"
  },
  {
    "text": "aggregation everything actually happens in the database so that is great because well",
    "start": "187440",
    "end": "193200"
  },
  {
    "text": "all the database in the same place you don't need to really worry about uh that much but in the meantime that's really",
    "start": "193200",
    "end": "199840"
  },
  {
    "text": "kind of put a bottleneck out there very quickly especially if you have a lot of clients trying to read the data in the",
    "start": "199840",
    "end": "205599"
  },
  {
    "text": "same time well you only one database server so and if you want to scale kind of like up that you need to maybe like",
    "start": "205599",
    "end": "213040"
  },
  {
    "text": "increase the CPU or increase the memory but that's going to that's going to be a limit for that so it's easy to become a",
    "start": "213040",
    "end": "220000"
  },
  {
    "text": "bottleneck uh for the SQL server well the Cosmos DB is a little",
    "start": "220000",
    "end": "226080"
  },
  {
    "text": "bit different so whenever you are actually organizing the Cosmos DB you really need to think about where the",
    "start": "226080",
    "end": "232000"
  },
  {
    "text": "database is because as you can see all those Cosmos DB icons on the top those",
    "start": "232000",
    "end": "237599"
  },
  {
    "text": "are your databases there's not only one but there's X number of databases you are going to end up with and that's",
    "start": "237599",
    "end": "243519"
  },
  {
    "text": "going to depend of how much uh how much uh storage you have you need and how",
    "start": "243519",
    "end": "248560"
  },
  {
    "text": "much power you need from the Cosmos DB so all the clients in the bottom",
    "start": "248560",
    "end": "254159"
  },
  {
    "text": "whenever you try to pull data now you better know which database has the which",
    "start": "254159",
    "end": "260440"
  },
  {
    "text": "data if not you're going to be in trouble because you're going to actually run this simple",
    "start": "260440",
    "end": "265880"
  },
  {
    "text": "query uh well I'm not sure it looks like maybe we have 10 databases here you're going to send that query to the 10",
    "start": "265880",
    "end": "272000"
  },
  {
    "text": "places well each database is going to actually charge you for that and that's most of the time people say that Cosmos",
    "start": "272000",
    "end": "278560"
  },
  {
    "text": "DB is expensive database uh if you are going to pick the wrong partition key",
    "start": "278560",
    "end": "283919"
  },
  {
    "text": "it's going to be an expensive so you want to be kind of sure uh you are picking the right partition key and",
    "start": "283919",
    "end": "290080"
  },
  {
    "text": "whenever you actually send something like that uh a query like that is going to go and get the right data from the",
    "start": "290080",
    "end": "297600"
  },
  {
    "text": "right database so the product ID here for example is really getting the data",
    "start": "297600",
    "end": "304160"
  },
  {
    "text": "it's it's almost like working like a you go to the parking lot and you lost your car how hour you're going to find your",
    "start": "304160",
    "end": "310800"
  },
  {
    "text": "car usually you just click the panic button and it starts a blink right so in",
    "start": "310800",
    "end": "316160"
  },
  {
    "text": "the it's working the same way in the Cosmos DB so if we know the product ID and product ID is the partition key this",
    "start": "316160",
    "end": "322960"
  },
  {
    "text": "query is going to actually go to the right database and get the right data for you now since we are talking about the",
    "start": "322960",
    "end": "330479"
  },
  {
    "text": "partitioning let's actually talk about the partitioning in SQL Server first in SQL server well usually partitioning",
    "start": "330479",
    "end": "338160"
  },
  {
    "text": "happens if you have too much data your uh table is getting larger and larger and larger what usually happens is it",
    "start": "338160",
    "end": "345120"
  },
  {
    "text": "takes much more time to find the data because well IO time the seat time is getting larger and it's just takes too",
    "start": "345120",
    "end": "352320"
  },
  {
    "text": "much time to find the data so our the table is getting larger and you want the salt and the salt is in the other side",
    "start": "352320",
    "end": "359039"
  },
  {
    "text": "and it takes some time to actually reach the salt how are you going to fix that problem well in SQL Server what actually",
    "start": "359039",
    "end": "365199"
  },
  {
    "text": "happens here is uh you create smaller tables and you just the schema is the",
    "start": "365199",
    "end": "371759"
  },
  {
    "text": "same and that happens in the actually in the back end and the user still sees the one table but as long as you have the",
    "start": "371759",
    "end": "378720"
  },
  {
    "text": "partition key in SQL Server usually it is the date and time uh you say that",
    "start": "378720",
    "end": "384639"
  },
  {
    "text": "okay 2010 year uh data is going here 11 goes here 12 goes here as long as year",
    "start": "384639",
    "end": "391520"
  },
  {
    "text": "is in your wear clause SQL server is going to actually go and get that from the smaller table rather than we go and",
    "start": "391520",
    "end": "397919"
  },
  {
    "text": "hit the each tables so that's how how the partitioning actually works in SQL",
    "start": "397919",
    "end": "402960"
  },
  {
    "text": "server so it's the same database engine but partitioning actually happening in different",
    "start": "402960",
    "end": "410120"
  },
  {
    "text": "files cosmos DB works a little bit different so when you actually set up",
    "start": "410120",
    "end": "415199"
  },
  {
    "text": "the Cosmos DB first time usually you don't have that much data and you end up",
    "start": "415199",
    "end": "420479"
  },
  {
    "text": "with just one database server just like SQL server you have one server and there are two numbers that you really need to",
    "start": "420479",
    "end": "427120"
  },
  {
    "text": "know in Cosmos DB the first one is the 50 gig data that is the storage limit of",
    "start": "427120",
    "end": "432560"
  },
  {
    "text": "one database server as long as you hit that number or get close to that number",
    "start": "432560",
    "end": "437599"
  },
  {
    "text": "Cosmos DB will actually give you another database server or 10,000 request units",
    "start": "437599",
    "end": "443199"
  },
  {
    "text": "that is how much I guess I can say that that's a horsepower of one server if you",
    "start": "443199",
    "end": "449039"
  },
  {
    "text": "are going to pass that number then that means if you have less data you are going to end up with another database",
    "start": "449039",
    "end": "455360"
  },
  {
    "text": "server so you're going to end up with you start with one kind of like a let's",
    "start": "455360",
    "end": "460639"
  },
  {
    "text": "say a restaurant and rather than making your restaurant bigger you are actually franchising it and actually opening",
    "start": "460639",
    "end": "467599"
  },
  {
    "text": "different restaurants in different places now uh so if you look at a little",
    "start": "467599",
    "end": "473520"
  },
  {
    "text": "bit more I guess technical than that as I say before we have physical partition physical partition is really the",
    "start": "473520",
    "end": "479520"
  },
  {
    "text": "database server we have a replica set in the database server so potentially your",
    "start": "479520",
    "end": "486560"
  },
  {
    "text": "web application has four places to get data in the SQL server you have only one",
    "start": "486560",
    "end": "492000"
  },
  {
    "text": "in here in one physical partition potentially you can get it from the four different places that kind of explains",
    "start": "492000",
    "end": "498000"
  },
  {
    "text": "why Cosmos DB is much faster because you have options uh as I say before don't",
    "start": "498000",
    "end": "503919"
  },
  {
    "text": "forget those two numbers 50 gig and 10,000 request units and you cannot",
    "start": "503919",
    "end": "509039"
  },
  {
    "text": "change those in Cosmos DB but by just knowing how much storage you have or how",
    "start": "509039",
    "end": "514399"
  },
  {
    "text": "much 10 you know the request units you need you can easily figure out architecture how much you know servers",
    "start": "514399",
    "end": "519599"
  },
  {
    "text": "you have and what you are really dealing with uh you can easily create a diagram so in our replica set we have the leader",
    "start": "519599",
    "end": "527200"
  },
  {
    "text": "leader is responsible for any updates inserts deletes all of them actually goes the leader then uh everything gets",
    "start": "527200",
    "end": "535120"
  },
  {
    "text": "sync with the three follower nodes if you have multiple regions one of these",
    "start": "535120",
    "end": "542160"
  },
  {
    "text": "followers actually becomes forwarder which means that a change comes to the leader syncs up with the followers and",
    "start": "542160",
    "end": "549519"
  },
  {
    "text": "the forward forwarder will be responsible to take that change and move it to other regions so that's how the",
    "start": "549519",
    "end": "555279"
  },
  {
    "text": "data actually gets synced uh in the back end if we look at the logical partition",
    "start": "555279",
    "end": "562240"
  },
  {
    "text": "logical partition is the place that you actually have some rights to change things uh this is a place that you",
    "start": "562240",
    "end": "569360"
  },
  {
    "text": "actually declare the partition key that's how you actually group the data",
    "start": "569360",
    "end": "574399"
  },
  {
    "text": "now as I say before you are really like you have your restaurants out there now you're actually organizing how many",
    "start": "574399",
    "end": "579600"
  },
  {
    "text": "tables you are going to end up so uh the only thing you really need to know here",
    "start": "579600",
    "end": "584720"
  },
  {
    "text": "is the limit of the uh table which is the 20 gig limit for the logical",
    "start": "584720",
    "end": "591000"
  },
  {
    "text": "partitions and hopefully you're not going to get close to that because logical partitions",
    "start": "591000",
    "end": "596959"
  },
  {
    "text": "should be really small and your data model should be really small so",
    "start": "596959",
    "end": "602240"
  },
  {
    "text": "hopefully you won't get close but 20 gig is the limit for them now let's actually see how this",
    "start": "602240",
    "end": "609680"
  },
  {
    "text": "works let's say we have a container named orders our partition key is",
    "start": "609680",
    "end": "615200"
  },
  {
    "text": "customer ID so that means that we are actually grouping all the orders by customer ID looks like we have four",
    "start": "615200",
    "end": "622800"
  },
  {
    "text": "physical partitions which tells me we are dealing something like 150 to 200 GB",
    "start": "622800",
    "end": "629600"
  },
  {
    "text": "of data because each of them can have 50 gig or we have an application very busy",
    "start": "629600",
    "end": "635279"
  },
  {
    "text": "application maybe we don't have that much data but this the application is pretty busy now as you can see each",
    "start": "635279",
    "end": "641360"
  },
  {
    "text": "physical partition has a hash number it's a minimum hash and maximum hash it starts from zero and ends up at the FF",
    "start": "641360",
    "end": "648480"
  },
  {
    "text": "which is the last one so each time you have more data that's actually get splits and you might end up like five",
    "start": "648480",
    "end": "654720"
  },
  {
    "text": "six seven database servers so if we want to",
    "start": "654720",
    "end": "660120"
  },
  {
    "text": "actually insert a new order here what happens in the back end the first thing",
    "start": "660120",
    "end": "666079"
  },
  {
    "text": "happens is we need to figure out what is a partition key so partition key must be exist in every data model you have it's",
    "start": "666079",
    "end": "673760"
  },
  {
    "text": "the customer ID so the customer ID is going to get hashed from that moment cosmos DB kind",
    "start": "673760",
    "end": "680079"
  },
  {
    "text": "of knows where this actual request is going to go because as you can see we have the hash numbers in each physical",
    "start": "680079",
    "end": "686120"
  },
  {
    "text": "partition so we are going to figure out which database needs to actually have",
    "start": "686120",
    "end": "691519"
  },
  {
    "text": "this insert statement and we are going to send that to only one database engine so that's actually where we are going to",
    "start": "691519",
    "end": "697360"
  },
  {
    "text": "save and find uh the data this is going to work exactly the",
    "start": "697360",
    "end": "702640"
  },
  {
    "text": "same way uh when we try to get the data so as you can see that's our select statement my customer ID is John 1 2 3 4",
    "start": "702640",
    "end": "710560"
  },
  {
    "text": "the first thing Cosmos DB is going to do is hash the partition key and figure out",
    "start": "710560",
    "end": "716160"
  },
  {
    "text": "where this request should go and after that it just sends that select statement",
    "start": "716160",
    "end": "722560"
  },
  {
    "text": "only one physical partition not four of them if you have a different so our",
    "start": "722560",
    "end": "729040"
  },
  {
    "text": "partition key is customer ID and let's say you want to select all and you have only order ID if you had the order ID",
    "start": "729040",
    "end": "736480"
  },
  {
    "text": "then that means that select statement is going to go to the four uh physical partitions and you are going to get",
    "start": "736480",
    "end": "741839"
  },
  {
    "text": "charged four times even you don't get the data so that's why it's pretty important that you pick the right",
    "start": "741839",
    "end": "747920"
  },
  {
    "text": "partition key when you actually set up your uh Cosmos DB",
    "start": "747920",
    "end": "753839"
  },
  {
    "text": "account next one is query plan engine actually this is the question I usually",
    "start": "754519",
    "end": "760959"
  },
  {
    "text": "ask in the interviews and figure out what is the level of the person I am kind of dealing with in database uh",
    "start": "760959",
    "end": "768920"
  },
  {
    "text": "levels we had this question uh okay we had the query select statement very",
    "start": "768920",
    "end": "774360"
  },
  {
    "text": "simple and we just take that put it in the management studio and I asked them",
    "start": "774360",
    "end": "780000"
  },
  {
    "text": "okay how do we get this data you create the you know you click the execute button and you end up with the data but",
    "start": "780000",
    "end": "785680"
  },
  {
    "text": "do you know actually what happened in the back end how is SQL servers getting this data the first thing SQL server",
    "start": "785680",
    "end": "791680"
  },
  {
    "text": "does is it just parses and binds the data we want to be sure for first of all",
    "start": "791680",
    "end": "796800"
  },
  {
    "text": "that select statement is correct then we want want to be sure that all that tables all that columns exist then we",
    "start": "796800",
    "end": "804720"
  },
  {
    "text": "want to be sure all the tables are good to go and we are going to actually go in the query optimization query",
    "start": "804720",
    "end": "809760"
  },
  {
    "text": "optimization is the place actually where Cosmos DB finds the best way to get that",
    "start": "809760",
    "end": "814959"
  },
  {
    "text": "data uh fastest way for you to do that it's going to go and check all the indexes all the size of the tables all",
    "start": "814959",
    "end": "822240"
  },
  {
    "text": "the statistics and be sure that you know everything is working fine and it actually creates many query planes you",
    "start": "822240",
    "end": "828720"
  },
  {
    "text": "might end up with like 100 query plans uh after it finds the plans it's going",
    "start": "828720",
    "end": "833760"
  },
  {
    "text": "to go back and figure out which one is the fastest way to get that data it can",
    "start": "833760",
    "end": "838959"
  },
  {
    "text": "easily do that because well we know most of the information we know how much IO it might take how much CPU it might take",
    "start": "838959",
    "end": "846399"
  },
  {
    "text": "how much memory is going to need and it can easily figure out which one is the fastest way and it just picks that from",
    "start": "846399",
    "end": "852000"
  },
  {
    "text": "there and caches it so if you're going to send that select statement again we don't need to do this query plan again",
    "start": "852000",
    "end": "858399"
  },
  {
    "text": "it's just going to cach uh get that cache version and run it so that's actually how SQL server gets the data uh",
    "start": "858399",
    "end": "865040"
  },
  {
    "text": "for you in Cosmos DB well let's say we have the same select statement in Cosmos",
    "start": "865040",
    "end": "872399"
  },
  {
    "text": "DB we don't need to do that much with the pass and bind why because well we don't have a schema so there's really",
    "start": "872399",
    "end": "879120"
  },
  {
    "text": "not that much to check out there the first thing we are going to check we want to be sure that select statement is correct and then really we are ready to",
    "start": "879120",
    "end": "887440"
  },
  {
    "text": "go uh uh and run this so one important uh I guess uh tip for",
    "start": "887440",
    "end": "894560"
  },
  {
    "text": "you if you are creating Cosmos DB application you want to be sure that you are actually creating a 64-bit solution",
    "start": "894560",
    "end": "901680"
  },
  {
    "text": "not 32-bit or not any CPU the main reason for that is we have this uh local",
    "start": "901680",
    "end": "908160"
  },
  {
    "text": "SDK name is service interrupt that is actually one which can",
    "start": "908160",
    "end": "914079"
  },
  {
    "text": "create the query plan locally not in the cosmos DB so if that is exist you don't",
    "start": "914079",
    "end": "919920"
  },
  {
    "text": "have to make a request to Cosmos DB and make a query plan it can actually happen locally so you want to be sure that uh",
    "start": "919920",
    "end": "926639"
  },
  {
    "text": "your application isn't 64-bit if that is the case we are going to create the query plan and we are ready to pull the",
    "start": "926639",
    "end": "934199"
  },
  {
    "text": "data now uh the next one is going to be well your SDK is going to actually check",
    "start": "934199",
    "end": "939760"
  },
  {
    "text": "if you have the partition key so that is pretty important one if you have the partition key then that means we can",
    "start": "939760",
    "end": "945839"
  },
  {
    "text": "just hash that partition key and send this query only one database engine if",
    "start": "945839",
    "end": "950880"
  },
  {
    "text": "you don't have it then things are going to get a little bit tricky because then you can have 10 20 30 database engines",
    "start": "950880",
    "end": "958480"
  },
  {
    "text": "and we need to send this query to 20 30 uh you know like different database engines and it's going to take longer",
    "start": "958480",
    "end": "965120"
  },
  {
    "text": "and it's going to take some time and probably it's going to be expensive too so after that we are going to get the",
    "start": "965120",
    "end": "972240"
  },
  {
    "text": "data from the SDK and SDK is the place that central place that all that data is",
    "start": "972240",
    "end": "978320"
  },
  {
    "text": "going to come in and if we need to do any kind of merging that is the place we are going to do so for example if you",
    "start": "978320",
    "end": "984800"
  },
  {
    "text": "are doing any kind of aggregation let's say you are trying to maybe get the average of the ages right and you have",
    "start": "984800",
    "end": "991120"
  },
  {
    "text": "20 database engines well SDK is the one which is going to do that aggregation",
    "start": "991120",
    "end": "996720"
  },
  {
    "text": "database engine cannot do that because each database engine has no idea what other data you know they have so all the",
    "start": "996720",
    "end": "1003199"
  },
  {
    "text": "data has to come to the SDK and SDK is the place which is going to do that aggregation for you that is one of the",
    "start": "1003199",
    "end": "1009759"
  },
  {
    "text": "big reason that you need a good resources for SDK because there's a lot actually actually happening in the SDK",
    "start": "1009759",
    "end": "1016240"
  },
  {
    "text": "for the NoSQL databases because you are dealing with you know different uh many database engines and that's the place",
    "start": "1016240",
    "end": "1023120"
  },
  {
    "text": "that you know central place for data to come in and just do all that",
    "start": "1023120",
    "end": "1029760"
  },
  {
    "text": "aggregation next one is data models so in SQL server as I say before uh",
    "start": "1029880",
    "end": "1035438"
  },
  {
    "text": "Microsoft is really trying uh to keep up with the technology and they are adding all kind of different uh functions to",
    "start": "1035439",
    "end": "1041839"
  },
  {
    "text": "the SQL server so we have the relational database model we have JSON objects you",
    "start": "1041839",
    "end": "1047438"
  },
  {
    "text": "can actually save NoSQL and uh SQL server we have the XML you can present",
    "start": "1047439",
    "end": "1052559"
  },
  {
    "text": "data as an XML and also you have the graph databases in uh SQL server so",
    "start": "1052559",
    "end": "1058880"
  },
  {
    "text": "everything is great but the problem is you are stuck with the TSQL so whatever",
    "start": "1058880",
    "end": "1065520"
  },
  {
    "text": "TSQL supports you're going to be actually just you know using that so there's some kind of limitation uh when",
    "start": "1065520",
    "end": "1071039"
  },
  {
    "text": "it comes to you know like different I guess data models in SQL server in",
    "start": "1071039",
    "end": "1076320"
  },
  {
    "text": "Cosmos DB it's different uh so you know we have the NoSQL we have the MongoDB we have Gremlin Cassandra Postgress SQL and",
    "start": "1076320",
    "end": "1084480"
  },
  {
    "text": "each of them is actually using their own native languages so for example you have",
    "start": "1084480",
    "end": "1089679"
  },
  {
    "text": "a MongoDB and you're like I'm really tired of maintaining this uh server I",
    "start": "1089679",
    "end": "1094720"
  },
  {
    "text": "want to just migrate to Cosmos DB all you have to do is just you know move your data to Cosmos DB and change your",
    "start": "1094720",
    "end": "1102000"
  },
  {
    "text": "connection string in your API your API is going to think about is just actually connecting to MongoDB when it's",
    "start": "1102000",
    "end": "1108160"
  },
  {
    "text": "connecting to Cosmos DB so you are going to use still the native language of each uh data models so which is going to give",
    "start": "1108160",
    "end": "1114960"
  },
  {
    "text": "you much more uh flexibility uh for the data",
    "start": "1114960",
    "end": "1119919"
  },
  {
    "text": "models next one is indexes so in SQL server as I said before it has been out",
    "start": "1120520",
    "end": "1126480"
  },
  {
    "text": "there for 30 years so there's all kind of situation and all kind of index types SQL server actually has so those are the",
    "start": "1126480",
    "end": "1133760"
  },
  {
    "text": "most common ones uh as you can see clustered nonclustered filter and unique those are the most common ones those are",
    "start": "1133760",
    "end": "1140080"
  },
  {
    "text": "equal to the range and composite indexes in Cosmos DB we have the column store",
    "start": "1140080",
    "end": "1145600"
  },
  {
    "text": "mostly for analyzing data in SQL server in Cosmos DB well Cosmos DB is an",
    "start": "1145600",
    "end": "1151280"
  },
  {
    "text": "operational database it is not a reporting place so your data scientist your BI developers should not really",
    "start": "1151280",
    "end": "1158000"
  },
  {
    "text": "touch your Cosmos DB if they do that's going to be an expensive query so for",
    "start": "1158000",
    "end": "1163760"
  },
  {
    "text": "that there's a totally different you know storage for uh Cosmos DB uh if you",
    "start": "1163760",
    "end": "1169280"
  },
  {
    "text": "actually enable that there's a fabric and there is a uh different areas it just like move",
    "start": "1169280",
    "end": "1175360"
  },
  {
    "text": "your data to analytical storage it's much cheaper to actually you know like uh analyze the data out there rather",
    "start": "1175360",
    "end": "1181120"
  },
  {
    "text": "than in Cosmos DB uh rather rather than that we have the full text in SQL server",
    "start": "1181120",
    "end": "1187440"
  },
  {
    "text": "if you want to do any kind of full text search in Cosmos DB I recommend you to use the Azure search it's much faster",
    "start": "1187440",
    "end": "1195200"
  },
  {
    "text": "and flexible uh then try to run any kind of like a system functions and try to",
    "start": "1195200",
    "end": "1200559"
  },
  {
    "text": "find uh you know like I guess run any kind of full text queries geospatial data is another one sql",
    "start": "1200559",
    "end": "1207520"
  },
  {
    "text": "server uh Cosmos DB actually has that too so when you create a SQL server",
    "start": "1207520",
    "end": "1213320"
  },
  {
    "text": "table if you don't have any kind of primary key on it there's absolutely no indexes it is your responsibility in SQL",
    "start": "1213320",
    "end": "1220720"
  },
  {
    "text": "Server to figure out which columns should be indexed in Cosmos DB when you",
    "start": "1220720",
    "end": "1226480"
  },
  {
    "text": "create a container everything is indexed so you don't need to worry about what you should index so which works great",
    "start": "1226480",
    "end": "1234159"
  },
  {
    "text": "but the problem is you know if you are going to keep everything indexed your index file potentially can get larger",
    "start": "1234159",
    "end": "1240640"
  },
  {
    "text": "than your data file so you are paying for the storage so it makes sense uh for you to kind of after you go to the you",
    "start": "1240640",
    "end": "1247039"
  },
  {
    "text": "know production figure out which properties actually you are not using in",
    "start": "1247039",
    "end": "1252159"
  },
  {
    "text": "your wear filters so you can actually exclude them and save some uh I guess",
    "start": "1252159",
    "end": "1257440"
  },
  {
    "text": "the storage space for the index file and also your updates inserts will be much",
    "start": "1257440",
    "end": "1262880"
  },
  {
    "text": "faster because they don't they don't need to get indexed every time uh you run an update and",
    "start": "1262880",
    "end": "1267960"
  },
  {
    "text": "insert uh indexes centralized in SQL server just like the database in Cosmos",
    "start": "1267960",
    "end": "1274480"
  },
  {
    "text": "DB well if you have 10 physical partitions that means you have 10 indexes if you are trying to do any kind",
    "start": "1274480",
    "end": "1281600"
  },
  {
    "text": "of reindex don't forget it you are actually reindexing uh 10",
    "start": "1281600",
    "end": "1287080"
  },
  {
    "text": "databases so it's going to take much longer uh because of that in SQL server usually you create the indexes one by",
    "start": "1287080",
    "end": "1294080"
  },
  {
    "text": "one in Cosmos DB well you want to be sure that you make all those indexes together because you might be you know",
    "start": "1294080",
    "end": "1301120"
  },
  {
    "text": "handling like tens maybe hundreds databases so you want to send that request once and be done with it rather",
    "start": "1301120",
    "end": "1307360"
  },
  {
    "text": "than try to run it again and again just like SQL server next one is store procedures and",
    "start": "1307360",
    "end": "1315039"
  },
  {
    "text": "store procedures are great in uh SQL server you have to know the TSQL everything is in TSQL and SQL server uh",
    "start": "1315039",
    "end": "1321840"
  },
  {
    "text": "they are read and write friendly so they can do both no problem they give you a",
    "start": "1321840",
    "end": "1327200"
  },
  {
    "text": "better performance because well most of the SQL server store procedures get",
    "start": "1327200",
    "end": "1332320"
  },
  {
    "text": "cached and it's just give you a much faster uh and central place to actually",
    "start": "1332320",
    "end": "1338400"
  },
  {
    "text": "run those queries you can join tables no problem in SQL server I mean if you have",
    "start": "1338400",
    "end": "1344080"
  },
  {
    "text": "the rights you can even join the databases in different servers so you can actually do that in Cosmos DB",
    "start": "1344080",
    "end": "1350720"
  },
  {
    "text": "totally different first of all you must know JavaScript because all the store procedures are in JavaScript in Cosmos",
    "start": "1350720",
    "end": "1357840"
  },
  {
    "text": "DB they are write friendly they are not read friendly I'm not saying you cannot",
    "start": "1357840",
    "end": "1363280"
  },
  {
    "text": "read data but if you read data we are going to have some issues because if you think about that replica set I showed",
    "start": "1363280",
    "end": "1370000"
  },
  {
    "text": "you before we have a leader and three followers store procedures will get",
    "start": "1370000",
    "end": "1375520"
  },
  {
    "text": "executed only on the leaders not in the followers so if you are going to try to",
    "start": "1375520",
    "end": "1381039"
  },
  {
    "text": "read data with store procedures in Cosmos DB potentially you are actually pushing leader to read data when it's",
    "start": "1381039",
    "end": "1388640"
  },
  {
    "text": "busy with updates insert and deletes so can it do it yeah but it's really a not",
    "start": "1388640",
    "end": "1394480"
  },
  {
    "text": "good practice to read data by store procedures in Cosmos DB uh everything is specifically one",
    "start": "1394480",
    "end": "1401520"
  },
  {
    "text": "container so that means you cannot join any containers in Cosmos DB and you can",
    "start": "1401520",
    "end": "1407039"
  },
  {
    "text": "implement easily transactions uh by using the store procedures because well if you're in JavaScript if something",
    "start": "1407039",
    "end": "1413600"
  },
  {
    "text": "fails what happens whole thing just freezes right so you can easily do that uh and use the transactions by the store",
    "start": "1413600",
    "end": "1420640"
  },
  {
    "text": "procedures in Cosmos DB next one is triggers so triggers are",
    "start": "1420640",
    "end": "1426880"
  },
  {
    "text": "great with the you know SQL server you can actually they get auto uh trigger automatically they are special store",
    "start": "1426880",
    "end": "1433679"
  },
  {
    "text": "procedures which means they are still in TSQL uh we have three type of triggers DML DDL and login triggers and they as I",
    "start": "1433679",
    "end": "1441120"
  },
  {
    "text": "said before they executed automatically so in Cosmos DB they are special store procedures that means they",
    "start": "1441120",
    "end": "1447760"
  },
  {
    "text": "are still in uh JavaScript we have two type of triggers pre-trigger and",
    "start": "1447760",
    "end": "1453520"
  },
  {
    "text": "post-trigger pre-trigger happens before the transaction before any data changes so that is actually a great place to",
    "start": "1453520",
    "end": "1459760"
  },
  {
    "text": "validate data before you know do anything that is a good place to actually do that and post trigger",
    "start": "1459760",
    "end": "1465279"
  },
  {
    "text": "happens after the transactions and the biggest one of the biggest difference is all of these are",
    "start": "1465279",
    "end": "1472240"
  },
  {
    "text": "getting executed manually from the SDK so you are responsible to actually execute them they won't get",
    "start": "1472240",
    "end": "1478000"
  },
  {
    "text": "automatically executed by SQL server next one is competed columns or competed",
    "start": "1478000",
    "end": "1485600"
  },
  {
    "text": "properties depending I guess which system we are talking about here uh computed columns are great in uh SQL",
    "start": "1485600",
    "end": "1492400"
  },
  {
    "text": "server those are like virtual columns you can make them physical column if you like by just indexing them and they are",
    "start": "1492400",
    "end": "1499360"
  },
  {
    "text": "visible out there whenever you write select all of them comes up on the screen and they are indexable so they",
    "start": "1499360",
    "end": "1506159"
  },
  {
    "text": "are great uh I use them every day in Cosmos DB they are pretty new i think",
    "start": "1506159",
    "end": "1512080"
  },
  {
    "text": "they just came out generally available I think this year uh so one of the biggest",
    "start": "1512080",
    "end": "1517520"
  },
  {
    "text": "challenge I have with that is they are not visible when you say select all so you kind of need to know by heart the",
    "start": "1517520",
    "end": "1523520"
  },
  {
    "text": "name of the computed properties so you can use them uh you can access them by",
    "start": "1523520",
    "end": "1529200"
  },
  {
    "text": "SDK you can list them if they are there or Azure portal actually has that too you can actually see them but select all",
    "start": "1529200",
    "end": "1536240"
  },
  {
    "text": "is not going to actually show them to you uh they are indexable and when you",
    "start": "1536240",
    "end": "1541279"
  },
  {
    "text": "make them indexed uh they are working much faster they can actually save money so in NoSQL everything is case sensitive",
    "start": "1541279",
    "end": "1548960"
  },
  {
    "text": "so you might be using like upper or lower functions in your uh work clause if you are doing that you can actually",
    "start": "1548960",
    "end": "1555919"
  },
  {
    "text": "use computed columns and create a you know a function for that a column for that and call that uh competed column",
    "start": "1555919",
    "end": "1563279"
  },
  {
    "text": "rather than uh looking for lower or upper so that can actually save you uh",
    "start": "1563279",
    "end": "1568720"
  },
  {
    "text": "some money if you want to use them next one is pricing uh well we can",
    "start": "1568720",
    "end": "1576240"
  },
  {
    "text": "talk about SQL server pricing all day I guess because it's pretty complex so there are different ways to actually pay",
    "start": "1576240",
    "end": "1582400"
  },
  {
    "text": "for the SQL server and those are the kind of ways to I I guess I'm not going to go in detail in that but in Cosmos DB",
    "start": "1582400",
    "end": "1589520"
  },
  {
    "text": "uh there are a couple of ways so the first one is the well manual threshold so for every single region 400 request",
    "start": "1589520",
    "end": "1596640"
  },
  {
    "text": "units you are really paying almost like $6 per month so you can do that easily",
    "start": "1596640",
    "end": "1603360"
  },
  {
    "text": "uh the minimum unit is the 400 request units so for minimum really you're going",
    "start": "1603360",
    "end": "1609120"
  },
  {
    "text": "to pay somewhere between 25 to $30 uh for the Cosmos DB per month you can",
    "start": "1609120",
    "end": "1615520"
  },
  {
    "text": "easily pick the serverless serverless is just like you pay as much as you use so",
    "start": "1615520",
    "end": "1620799"
  },
  {
    "text": "that is actually great for dev QA any kind of proof of concept application you can actually do that by the serverless",
    "start": "1620799",
    "end": "1627360"
  },
  {
    "text": "and you can easily convert that uh to the regular uh threshold later if you",
    "start": "1627360",
    "end": "1632559"
  },
  {
    "text": "like to use that uh so as I said before there are two layers in Cosmos DB first",
    "start": "1632559",
    "end": "1639360"
  },
  {
    "text": "you are actually paying for the request units and the next is you are paying for the storage so for storage is pretty",
    "start": "1639360",
    "end": "1645279"
  },
  {
    "text": "cheap as you can see one gig is 25 cents per month so depending how much data you have uh I guess uh that's going to be an",
    "start": "1645279",
    "end": "1653360"
  },
  {
    "text": "addition on the cost as you can see analytical is much cheaper so it is important to kind of move uh all the",
    "start": "1653360",
    "end": "1660799"
  },
  {
    "text": "data that you want to analyze to the analytical storage and don't keep them in the you know operational database",
    "start": "1660799",
    "end": "1666480"
  },
  {
    "text": "that will keep your database smaller and your queries work much faster because you have less data so have some kind of",
    "start": "1666480",
    "end": "1673760"
  },
  {
    "text": "retention policy after two years if you don't care about the data just use uh",
    "start": "1673760",
    "end": "1679039"
  },
  {
    "text": "one of the Cosmos DB actually has a TTL functions time to live function so you can actually put easily to two years and",
    "start": "1679039",
    "end": "1685520"
  },
  {
    "text": "it can delete it for free for you uh so that will actually help you uh to keep the database size uh I guess",
    "start": "1685520",
    "end": "1693799"
  },
  {
    "text": "easy also actually dynamic autoscale per region just came up and that's a great",
    "start": "1693799",
    "end": "1699679"
  },
  {
    "text": "one to actually save uh if you want to have multi-reion uh applications with",
    "start": "1699679",
    "end": "1704960"
  },
  {
    "text": "that you know in before if you have two for example regions and let's say one of",
    "start": "1704960",
    "end": "1710240"
  },
  {
    "text": "them might be in Asia other one is in let's say in United States right so when the actually night happens for in Asia",
    "start": "1710240",
    "end": "1717279"
  },
  {
    "text": "when uh United States gets busy you are still getting charged what United States",
    "start": "1717279",
    "end": "1722640"
  },
  {
    "text": "highest number in Asia So with the dynamic autoscale per region",
    "start": "1722640",
    "end": "1728559"
  },
  {
    "text": "actually it's going to work different now when people goes to sleep and your application goes uh I guess not very",
    "start": "1728559",
    "end": "1735360"
  },
  {
    "text": "busy then you're going to get uh you know charge for the minimum rather than what actually United States is the",
    "start": "1735360",
    "end": "1741440"
  },
  {
    "text": "highest one next one is views so views are very",
    "start": "1741440",
    "end": "1749520"
  },
  {
    "text": "useful in SQL server that actually keeps you might be joining many tables so you",
    "start": "1749520",
    "end": "1755039"
  },
  {
    "text": "don't really need to I guess know all the joins you can just create a view and get the data from there uh you can",
    "start": "1755039",
    "end": "1762080"
  },
  {
    "text": "actually materialize them by easily by indexing them and I use them every day and they are",
    "start": "1762080",
    "end": "1769200"
  },
  {
    "text": "very useful in Cosmos DB there is really no views so you kind of need to kind of",
    "start": "1769200",
    "end": "1775120"
  },
  {
    "text": "come up with your own view by using uh different features of Cosmos DB so",
    "start": "1775120",
    "end": "1781039"
  },
  {
    "text": "materialized views are actually in private preview or public preview right now you can try them if you like uh it",
    "start": "1781039",
    "end": "1788880"
  },
  {
    "text": "it kind of almost what it does is let's say you have the orders container and",
    "start": "1788880",
    "end": "1794080"
  },
  {
    "text": "you want to create a materialized view you can easily create another container named order two for example easily by",
    "start": "1794080",
    "end": "1801279"
  },
  {
    "text": "changing the partition key or anything like that now let's actually see them how",
    "start": "1801279",
    "end": "1806880"
  },
  {
    "text": "that works so change feed function is the one uh we use for materialize views",
    "start": "1806880",
    "end": "1812799"
  },
  {
    "text": "in Cosmos DB so it looks like we have a container named orders and our part",
    "start": "1812799",
    "end": "1819039"
  },
  {
    "text": "partition key is customer ID now everything works great until we end",
    "start": "1819039",
    "end": "1826000"
  },
  {
    "text": "up with a query that does not have the partition key so we are looking for a",
    "start": "1826000",
    "end": "1831440"
  },
  {
    "text": "specific product here and product ID is 200 well we have two four six database",
    "start": "1831440",
    "end": "1837760"
  },
  {
    "text": "engines out there running and since we don't have the customer ID in our uh select statement this is going to be a",
    "start": "1837760",
    "end": "1844320"
  },
  {
    "text": "cross partition and it's going to cost us 49 request units because well I'm",
    "start": "1844320",
    "end": "1850240"
  },
  {
    "text": "getting charged from the each database engine now if this happens couple of times a day I guess it's really not big",
    "start": "1850240",
    "end": "1857120"
  },
  {
    "text": "deal but if this happens a lot that's going to give you a lot of problem because in here you are really just you",
    "start": "1857120",
    "end": "1863440"
  },
  {
    "text": "know losing money because not for a good reason so we kind of need to come up with some kind of solution for that",
    "start": "1863440",
    "end": "1869520"
  },
  {
    "text": "because if you don't this is going to get even worse how because your data is going to get even bigger and you're",
    "start": "1869520",
    "end": "1875840"
  },
  {
    "text": "going to end up with maybe one two three more databases so that 49 is going to even go higher later so this is really",
    "start": "1875840",
    "end": "1882320"
  },
  {
    "text": "not going to fix itself at all so to fix that problem what we are going to",
    "start": "1882320",
    "end": "1887600"
  },
  {
    "text": "actually use is the change feed function change feed function is the CDC uh of",
    "start": "1887600",
    "end": "1892880"
  },
  {
    "text": "SQL server so data change comes uh in our orders table our partition key is",
    "start": "1892880",
    "end": "1898480"
  },
  {
    "text": "customer ID now uh change feed get trigger and we can actually get that",
    "start": "1898480",
    "end": "1903600"
  },
  {
    "text": "trigger in two places i use the Azure functions because that's much easier",
    "start": "1903600",
    "end": "1908880"
  },
  {
    "text": "cosmos TV is already in Azure azure function is already there so it's much easier for me to use the Azure functions",
    "start": "1908880",
    "end": "1915679"
  },
  {
    "text": "uh when the change feed is going to get you know trigger Azure functions going to get the data and figure out what is",
    "start": "1915679",
    "end": "1921360"
  },
  {
    "text": "change and you can do whatever you like to do out there in my case I create a",
    "start": "1921360",
    "end": "1926640"
  },
  {
    "text": "new container named orders under product and my partition key is actually different here product ID it is the same",
    "start": "1926640",
    "end": "1934360"
  },
  {
    "text": "data only difference is the partition key so in that case",
    "start": "1934360",
    "end": "1940799"
  },
  {
    "text": "uh you can actually easily do that with the materialized views I just talked about it's still in uh preview right now",
    "start": "1940799",
    "end": "1946480"
  },
  {
    "text": "you can do that but that is really the way that to do before actually that becomes available so in that",
    "start": "1946480",
    "end": "1953240"
  },
  {
    "text": "case now I have the product ID rather than actually using my orders container",
    "start": "1953240",
    "end": "1959519"
  },
  {
    "text": "I am using my orders product container so from 49 actually everything goes back",
    "start": "1959519",
    "end": "1966000"
  },
  {
    "text": "to eight request units as you can see you can easily save uh a lot of request",
    "start": "1966000",
    "end": "1971760"
  },
  {
    "text": "units uh if you have any cross partition common cross partition queries like that and you can fix it like that very easily",
    "start": "1971760",
    "end": "1978880"
  },
  {
    "text": "so in cloud storage is much cheaper than the CPU power so that's usually how you",
    "start": "1978880",
    "end": "1985919"
  },
  {
    "text": "fix uh the problems in NoSQL databases in NoSQL databases it's it's okay to",
    "start": "1985919",
    "end": "1991760"
  },
  {
    "text": "duplicate the data and this is a kind of good example to show you the benefits uh of the you know the benefit of the I",
    "start": "1991760",
    "end": "1999120"
  },
  {
    "text": "guess fixing this by syncing the data and duplicating the data next one is performance tuning in",
    "start": "1999120",
    "end": "2008240"
  },
  {
    "text": "SQL server that's a whole job title out there uh many of people out there you know just their businesses just make the",
    "start": "2008240",
    "end": "2014320"
  },
  {
    "text": "performances better uh do the SQL server faster so I guess there are a couple of",
    "start": "2014320",
    "end": "2019600"
  },
  {
    "text": "things you need to uh I guess pay attention in SQL Server you want to",
    "start": "2019600",
    "end": "2024640"
  },
  {
    "text": "select only what you need you don't want to just always select all and get all the data uh you want to look at the",
    "start": "2024640",
    "end": "2031519"
  },
  {
    "text": "missing indexes uh if you are missing indexes those might be very easy to fix in SQL Server uh and fix a lot of",
    "start": "2031519",
    "end": "2038760"
  },
  {
    "text": "problems you want to be careful with the query hints uh query hints is like in SQL server you almost tell SQL server",
    "start": "2038760",
    "end": "2046480"
  },
  {
    "text": "how it should get the data so in some cases it might work but at the end SQL",
    "start": "2046480",
    "end": "2051520"
  },
  {
    "text": "server is going to actually know much better than any of us how to get that data much faster so whatever query hint",
    "start": "2051520",
    "end": "2057839"
  },
  {
    "text": "might actually work today but as your data is going to get larger it might fail later so just be careful if you're",
    "start": "2057839",
    "end": "2063440"
  },
  {
    "text": "using any kind of query hints in SQL server uh look for the parameter sniffing",
    "start": "2063440",
    "end": "2068560"
  },
  {
    "text": "that's mostly for the store procedure when store procedure gets created it creates some kind of like a query plan",
    "start": "2068560",
    "end": "2075040"
  },
  {
    "text": "as I said before your data is going to get larger and larger that query plan might not be the good way anymore but",
    "start": "2075040",
    "end": "2081200"
  },
  {
    "text": "it's cached so you want you want to kind of look at the parameter sniffing uh for the store procedures",
    "start": "2081200",
    "end": "2087599"
  },
  {
    "text": "uh if you have any kind of problems in SQL server execution plans gives you all kind of information about what is really",
    "start": "2087599",
    "end": "2094398"
  },
  {
    "text": "happening in the SQL server and it can really show you where the problem is easily uh and also uh if indexes are not",
    "start": "2094399",
    "end": "2102240"
  },
  {
    "text": "enough in SQL server the next level usually is the partitioning the data so that's how you usually uh do the uh",
    "start": "2102240",
    "end": "2109839"
  },
  {
    "text": "performance tuning in SQL server cosmos DB similar at the NSA database so you",
    "start": "2109839",
    "end": "2116240"
  },
  {
    "text": "want to select only what you need so if you really think about it that's even more important in Cosmos DB because you",
    "start": "2116240",
    "end": "2122720"
  },
  {
    "text": "are your services on the cloud so it's kind of the if I mean the SQL server is",
    "start": "2122720",
    "end": "2128320"
  },
  {
    "text": "in the enterprise on prem okay is in the same network at least but you know in Cosmos DB you it might be just even far",
    "start": "2128320",
    "end": "2135440"
  },
  {
    "text": "away from your uh area so just select only what you need so that request and",
    "start": "2135440",
    "end": "2141119"
  },
  {
    "text": "response might be much uh smaller packages for the Cosmos DB uh missing",
    "start": "2141119",
    "end": "2146160"
  },
  {
    "text": "indexes you can use the indexing metrics uh this is available in SDK and you can easily figure out if there's any kind of",
    "start": "2146160",
    "end": "2153280"
  },
  {
    "text": "suggestions from the Cosmos DB uh maybe you are missing any kind of indexes cosmos DB actually suggests you so you",
    "start": "2153280",
    "end": "2159680"
  },
  {
    "text": "can enable that and see if you have any kind of indexing matrix suggestions uh you can use the point",
    "start": "2159680",
    "end": "2165920"
  },
  {
    "text": "read point is a interesting one in Cosmos DB so let's say your data model",
    "start": "2165920",
    "end": "2171200"
  },
  {
    "text": "is 1 kilobytes uh if you want to actually run a query and get one",
    "start": "2171200",
    "end": "2176320"
  },
  {
    "text": "document from the Cosmos DB that's going to cost you minimum 2.6 to three request",
    "start": "2176320",
    "end": "2181520"
  },
  {
    "text": "units if you will use a point read that's always going to cost you one request unit for point read to work you",
    "start": "2181520",
    "end": "2189200"
  },
  {
    "text": "must have the partition key and you must have the document ID so if you can actually make those two ids available in",
    "start": "2189200",
    "end": "2197359"
  },
  {
    "text": "your application all the time Cosmos DB can get really really cheap because it's",
    "start": "2197359",
    "end": "2202880"
  },
  {
    "text": "just going to cost you one request unit to get one document uh you can use the material as",
    "start": "2202880",
    "end": "2208560"
  },
  {
    "text": "views the one that I just showed you if you have a lot of cross partition queries then you can easily use the",
    "start": "2208560",
    "end": "2214160"
  },
  {
    "text": "material as views and kind of try to tackle problem with that uh for the",
    "start": "2214160",
    "end": "2220079"
  },
  {
    "text": "retention policies as I said before you want to keep the hot data in Cosmos DB",
    "start": "2220079",
    "end": "2225200"
  },
  {
    "text": "whatever matters should be in Cosmos DB if you are not using it just have some kind of retention policy and you know",
    "start": "2225200",
    "end": "2231359"
  },
  {
    "text": "work on just removing it from the operational database also we have the execution",
    "start": "2231359",
    "end": "2237200"
  },
  {
    "text": "metrics you can use that they are not as good as the execution plan of SQL server",
    "start": "2237200",
    "end": "2242400"
  },
  {
    "text": "but they still give you some information about what's really happening in the back end uh in Cosmos DB",
    "start": "2242400",
    "end": "2250119"
  },
  {
    "text": "next one is null and undefined so those can be problem doesn't matter which uh",
    "start": "2250400",
    "end": "2256079"
  },
  {
    "text": "database it is in SQL server null is neither an empty string nor a zero value",
    "start": "2256079",
    "end": "2262480"
  },
  {
    "text": "so when you say null is equal to null it just says false so you can use is null",
    "start": "2262480",
    "end": "2268560"
  },
  {
    "text": "or is not null to handle null values in SQL server easily",
    "start": "2268560",
    "end": "2274560"
  },
  {
    "text": "uh you can be I mean be careful with them because some of the aggregations uh you know they are not really null",
    "start": "2274560",
    "end": "2280640"
  },
  {
    "text": "friendly for example when you say count it will not count on null rows or same",
    "start": "2280640",
    "end": "2286640"
  },
  {
    "text": "with the you know the average so the number you are ending up uh might be a little bit uh different than what you",
    "start": "2286640",
    "end": "2292480"
  },
  {
    "text": "are expecting uh with the null values cosmos DB it gets worse so in Cosmos DB",
    "start": "2292480",
    "end": "2300000"
  },
  {
    "text": "first of all that's a NoSQL database that means if it's null you don't need to keep it there because you are not and",
    "start": "2300000",
    "end": "2307119"
  },
  {
    "text": "you know not like SQL server you have a column name out there I don't know age if you don't have the h don't keep it in",
    "start": "2307119",
    "end": "2313440"
  },
  {
    "text": "your uh I guess the data model that will be the best way to go uh to handle the",
    "start": "2313440",
    "end": "2319119"
  },
  {
    "text": "null values in cosmos DB because when you actually have them the problem gets",
    "start": "2319119",
    "end": "2324400"
  },
  {
    "text": "bigger for example aggregation and there's only one null value let's say you have 1 million",
    "start": "2324400",
    "end": "2331520"
  },
  {
    "text": "documents but one of them has null in it uh the function is not going to run and",
    "start": "2331520",
    "end": "2337040"
  },
  {
    "text": "it's not going to return anything to you so it's important not to keep null",
    "start": "2337040",
    "end": "2342240"
  },
  {
    "text": "values in Cosmos DB or any really any other NoSQL databases you don't have to",
    "start": "2342240",
    "end": "2347359"
  },
  {
    "text": "keep them uh in the data model next one is data modeling which I'm",
    "start": "2347359",
    "end": "2354320"
  },
  {
    "text": "going to actually have another uh session coming up just for that because that's a whole kind of I guess topic for",
    "start": "2354320",
    "end": "2362040"
  },
  {
    "text": "itself uh data modeling in SQL server is like well you everything is relational",
    "start": "2362040",
    "end": "2368720"
  },
  {
    "text": "so we don't want to kind of I guess duplicate all the information uh in SQL server so it's very flexible you have",
    "start": "2368720",
    "end": "2376160"
  },
  {
    "text": "different uh it's almost like making your own sandwich all the kind of you know all the ingredients you can just",
    "start": "2376160",
    "end": "2381839"
  },
  {
    "text": "pick them whatever you want and every time it can be different uh you can join",
    "start": "2381839",
    "end": "2387200"
  },
  {
    "text": "uh tables but that actually creates a constant pressure on the query optimizer",
    "start": "2387200",
    "end": "2392560"
  },
  {
    "text": "so everything is great everything is working fine uh it's a totally different I guess way",
    "start": "2392560",
    "end": "2399040"
  },
  {
    "text": "uh in NoSQL databases in NoSQL databases you better know who your customer is so",
    "start": "2399040",
    "end": "2405839"
  },
  {
    "text": "you're not going to let them join any kind of because uh there's not even an option for that so you better know uh",
    "start": "2405839",
    "end": "2412720"
  },
  {
    "text": "your application or the service which is going to use the Cosmos DB for example let's say you are creating an",
    "start": "2412720",
    "end": "2418560"
  },
  {
    "text": "application think about the Amazon product page right you exactly know that",
    "start": "2418560",
    "end": "2423599"
  },
  {
    "text": "what that product page is going to actually want from Cosmos DB uh if that is the case just put in data",
    "start": "2423599",
    "end": "2430880"
  },
  {
    "text": "model what it really needs in I guess other words just know your customer uh",
    "start": "2430880",
    "end": "2436720"
  },
  {
    "text": "if your customer is a vegetarian don't make I guess uh you know Italian and a",
    "start": "2436720",
    "end": "2441839"
  },
  {
    "text": "data model out there because it's not going to work nobody's going to come and you know like buy that for you so it is",
    "start": "2441839",
    "end": "2447119"
  },
  {
    "text": "important that uh you know know that there's no joins",
    "start": "2447119",
    "end": "2452480"
  },
  {
    "text": "uh and also there's no schema uh normalization",
    "start": "2452480",
    "end": "2458160"
  },
  {
    "text": "does not work so if you are actually moving from the SQL server to Cosmos DB",
    "start": "2458160",
    "end": "2463680"
  },
  {
    "text": "the worst thing you can do is keeping the data model as it is you are going to",
    "start": "2463680",
    "end": "2468720"
  },
  {
    "text": "end up with many containers and you need to make many requests and that's going to actually cost you more I guess",
    "start": "2468720",
    "end": "2476079"
  },
  {
    "text": "running the CPU number of requests is going to be higher and that solution is going to be very expensive in Cosmos DB",
    "start": "2476079",
    "end": "2482960"
  },
  {
    "text": "so you want to be sure that you know if you are moving from the SQL server or any kind of relational database to",
    "start": "2482960",
    "end": "2488079"
  },
  {
    "text": "Cosmos DB just don't take the data model as it is and try to you know keep those",
    "start": "2488079",
    "end": "2493760"
  },
  {
    "text": "uh tables tables",
    "start": "2493760",
    "end": "2498400"
  },
  {
    "text": "small now everybody came here for this question right which one should I use so",
    "start": "2499480",
    "end": "2506640"
  },
  {
    "text": "in older days this was an easy question why because well SQL server is a",
    "start": "2506640",
    "end": "2511920"
  },
  {
    "text": "relational database uh cosmos DB is non- relational database well unfortunately",
    "start": "2511920",
    "end": "2517040"
  },
  {
    "text": "that is not the case anymore in SQL server it supports the JSON it supports",
    "start": "2517040",
    "end": "2522560"
  },
  {
    "text": "XML so it can actually easily save nosql data model in SQL server so if your",
    "start": "2522560",
    "end": "2529040"
  },
  {
    "text": "application is a small application it's not going to be a global application it's something just for the you know",
    "start": "2529040",
    "end": "2534240"
  },
  {
    "text": "internally uh your uh I guess the enterprise database you can easily use",
    "start": "2534240",
    "end": "2540800"
  },
  {
    "text": "SQL server for a NoSQL environment i do in my end if it's a",
    "start": "2540800",
    "end": "2546000"
  },
  {
    "text": "small application I can easily save the my JSON objects out there and you can easily use the like inmemory tables and",
    "start": "2546000",
    "end": "2553440"
  },
  {
    "text": "you can make things really really quick in SQL server as long as you know you don't worry about the scalability and",
    "start": "2553440",
    "end": "2560000"
  },
  {
    "text": "globalization that much so SQL server can actually give you that uh functionality uh yeah the scaling is",
    "start": "2560000",
    "end": "2567520"
  },
  {
    "text": "going to be the problem and the best thing about the SQL server it is available on prem so you know if you",
    "start": "2567520",
    "end": "2574400"
  },
  {
    "text": "have the SQL server already you don't really need to know another cloud subscription you don't need to worry",
    "start": "2574400",
    "end": "2580640"
  },
  {
    "text": "about all this kind of like the firewall rules and other stuff SQL server is there is it's a good option and also",
    "start": "2580640",
    "end": "2588960"
  },
  {
    "text": "when it comes to the aggregation SQL server is the kink you can do all kind of things with the SQL server SQL server",
    "start": "2588960",
    "end": "2595280"
  },
  {
    "text": "can be an operational database sql server can be a you know a database for an analytical stuff so SQL server is a",
    "start": "2595280",
    "end": "2602640"
  },
  {
    "text": "good option cosmos DB is a totally new generation so non-reational database not",
    "start": "2602640",
    "end": "2610560"
  },
  {
    "text": "really because actually it supports the post SQL so if you if you had the post",
    "start": "2610560",
    "end": "2616720"
  },
  {
    "text": "SQL you can make it relational and use the cosmos for that uh if you are worrying about the",
    "start": "2616720",
    "end": "2622079"
  },
  {
    "text": "scalability if you are worrying about the globalization Cosmos DB way to go if your application is already in cloud",
    "start": "2622079",
    "end": "2628960"
  },
  {
    "text": "well probably Cosmos DB is way to go because it's going to be much easier to connect and do all kind of features uh",
    "start": "2628960",
    "end": "2635520"
  },
  {
    "text": "that you know on-prem cannot give you uh you have different constences levels if",
    "start": "2635520",
    "end": "2641280"
  },
  {
    "text": "that's you know like you can actually make things much more uh flexible in Cosmos DB you don't have only eventual",
    "start": "2641280",
    "end": "2647440"
  },
  {
    "text": "or the strong we have actually five different levels in Cosmos DB uh global",
    "start": "2647440",
    "end": "2652720"
  },
  {
    "text": "distribution with multi-reion uh right so there's all kind of options you can actually uh Cosmos DB can give you and",
    "start": "2652720",
    "end": "2660560"
  },
  {
    "text": "most of them is really for the high scalability globalization and is very",
    "start": "2660560",
    "end": "2666400"
  },
  {
    "text": "you know all the new features coming up Cosmos DB is going to be the probably the first one uh is going to bring that",
    "start": "2666400",
    "end": "2672000"
  },
  {
    "text": "to you because at the end you don't need to buy another I guess version of Cosmos",
    "start": "2672000",
    "end": "2677359"
  },
  {
    "text": "DB when something comes up it becomes available in the cloud so how to start it in SQL Server",
    "start": "2677359",
    "end": "2685520"
  },
  {
    "text": "well there's all kind of tools that you can use sql Server Express uh developer",
    "start": "2685520",
    "end": "2691119"
  },
  {
    "text": "version is usually free you can use SS SMS you can SQL Server as I say before",
    "start": "2691119",
    "end": "2696720"
  },
  {
    "text": "it has been out there for 30 years so there's a lot of tools a lot of information about SQL server uh and if",
    "start": "2696720",
    "end": "2703200"
  },
  {
    "text": "you are actually just starting and you know trying to learn about the databases SQL server has been out there for a long",
    "start": "2703200",
    "end": "2710000"
  },
  {
    "text": "time and most of the companies is going to have SQL server some you know like so it's kind of good to know about the SQL",
    "start": "2710000",
    "end": "2716240"
  },
  {
    "text": "server uh because most of the job requirements probably is going to need the SQL server knowledge",
    "start": "2716240",
    "end": "2722720"
  },
  {
    "text": "uh Cosmos CB if this is the first time you are trying to read or learn you don't need a subscription you can",
    "start": "2722720",
    "end": "2729040"
  },
  {
    "text": "actually get the emulator emulator is free you can download it and it will work on locally on your machine and it",
    "start": "2729040",
    "end": "2736079"
  },
  {
    "text": "will just act like a Cosmos DB so you don't need a subscription you can still uh learn Cosmos DB and use the emulator",
    "start": "2736079",
    "end": "2743760"
  },
  {
    "text": "for the dev and QA environments too uh there's a serverless option that is",
    "start": "2743760",
    "end": "2748880"
  },
  {
    "text": "great for the dev and QA or proof of concept you can easily use it and it will charge you only for what you need",
    "start": "2748880",
    "end": "2755599"
  },
  {
    "text": "or what you actually use also Cosmos DB has a free tier uh",
    "start": "2755599",
    "end": "2761280"
  },
  {
    "text": "there's only one for each subscription and that will give you 1,000 request units free and 25 gig for free so if you",
    "start": "2761280",
    "end": "2768480"
  },
  {
    "text": "are learning uh if that's the first time you know you want to kind of deal with Cosmos DB be sure that you know you have the free tier uh that will give you you",
    "start": "2768480",
    "end": "2775280"
  },
  {
    "text": "know 1,000 request units and 25 gig uh for free as you can see those are the SDKs",
    "start": "2775280",
    "end": "2781359"
  },
  {
    "text": "Cosmos DB actually has uh so it's available in different languages",
    "start": "2781359",
    "end": "2787960"
  },
  {
    "text": "now uh after this I'm going to actually show you some of the I guess the cosmos in action here but uh if you will have",
    "start": "2788480",
    "end": "2795280"
  },
  {
    "text": "any kind of questions or anything like that please uh you know follow me from any of those social media I'll be more",
    "start": "2795280",
    "end": "2800319"
  },
  {
    "text": "than happy to answer any of your questions there if you want to learn about Cosmos DB and maybe pass that uh",
    "start": "2800319",
    "end": "2806800"
  },
  {
    "text": "exam out there the certification I work uh with uh Steve Flowers to actually",
    "start": "2806800",
    "end": "2812560"
  },
  {
    "text": "review this book so that will be pretty helpful uh if you want to kind of I guess learn about it more so now uh and",
    "start": "2812560",
    "end": "2820240"
  },
  {
    "text": "also the demo that I'm going to show you for the Cosmos DBS SQL studio you can download it from there or you can",
    "start": "2820240",
    "end": "2826079"
  },
  {
    "text": "actually download uh from VS Code uh directly so let me actually open my VS",
    "start": "2826079",
    "end": "2833040"
  },
  {
    "text": "code here to be able to download this you can easily go in here the extension and",
    "start": "2833040",
    "end": "2839680"
  },
  {
    "text": "search for the Cosmos DB SQL Studio and it should just come up here",
    "start": "2839680",
    "end": "2846359"
  },
  {
    "text": "now when you actually put the connection string here the first thing you are going to going to see here is it's going",
    "start": "2846359",
    "end": "2852560"
  },
  {
    "text": "to list all the databases available on the top left here after you pick that it's going to show you all the",
    "start": "2852560",
    "end": "2858000"
  },
  {
    "text": "containers as you can see I have a bunch of containers here for demo so we talk",
    "start": "2858000",
    "end": "2863040"
  },
  {
    "text": "about the physical partitions now you can easily see how many physical partitions this container actually has",
    "start": "2863040",
    "end": "2870400"
  },
  {
    "text": "so in here it looks like I have five physical partitions and it gives you all the uh hash numbers too as you can see",
    "start": "2870400",
    "end": "2876960"
  },
  {
    "text": "we talk about it so those are actually controlling uh how we are finding the data for example if we are going to go",
    "start": "2876960",
    "end": "2884560"
  },
  {
    "text": "and run this query as you can see it's a very simple query but if you think about",
    "start": "2884560",
    "end": "2889920"
  },
  {
    "text": "it there's a lot actually going on here for a NoSQL database so I want to get top 10 from C what is C c is the",
    "start": "2889920",
    "end": "2897440"
  },
  {
    "text": "container that I just pick which is the posts now if I actually execute this one",
    "start": "2897440",
    "end": "2904520"
  },
  {
    "text": "here and look at the results well I get top 10 right no surprise out there so",
    "start": "2904520",
    "end": "2910880"
  },
  {
    "text": "there are a couple of things actually happening here first of all my request charge is 12.90 for a simple query like",
    "start": "2910880",
    "end": "2918160"
  },
  {
    "text": "that is pretty expensive and 10 items return but actually this is kind of",
    "start": "2918160",
    "end": "2924160"
  },
  {
    "text": "lying to me why because if I go and look at the execution metrics as you can see",
    "start": "2924160",
    "end": "2929760"
  },
  {
    "text": "since I don't have the partition key in my query this 10 top 10 actually went",
    "start": "2929760",
    "end": "2935599"
  },
  {
    "text": "five different servers and I get actually 50 records and SDK is actually",
    "start": "2935599",
    "end": "2942319"
  },
  {
    "text": "uh showing me only 10 so as you can see number of requests here is five i can",
    "start": "2942319",
    "end": "2948319"
  },
  {
    "text": "easily click here and see that SDK made five requests and each of them actually",
    "start": "2948319",
    "end": "2955040"
  },
  {
    "text": "cost me this much request units also retrieved documents is 50 not",
    "start": "2955040",
    "end": "2963520"
  },
  {
    "text": "10 so you kind of need to be I guess careful this is kind of nice uh to kind of show you what's really happening in",
    "start": "2963520",
    "end": "2969520"
  },
  {
    "text": "the back end with the NoSQL databases so if you have I don't know 100 databases",
    "start": "2969520",
    "end": "2974640"
  },
  {
    "text": "you are going to end up with a lot of uh request units here and a lot of documents that you are not even going to see on the",
    "start": "2974640",
    "end": "2980599"
  },
  {
    "text": "screen the next thing I can show you is I can easily show you the indexing",
    "start": "2980599",
    "end": "2986920"
  },
  {
    "text": "metrics so rather than writing your own code and try to figure out what uh indexing matrix uh Cosmos DB suggests",
    "start": "2986920",
    "end": "2994640"
  },
  {
    "text": "you I can easily for example run this select statement here I am looking all the posts by this",
    "start": "2994640",
    "end": "3004400"
  },
  {
    "text": "user and I'm looking for score is larger than 10 so when I run",
    "start": "3004400",
    "end": "3010839"
  },
  {
    "text": "that it's going to take a little bit longer uh it's still 24.10 the main",
    "start": "3010839",
    "end": "3017040"
  },
  {
    "text": "reason for that is my partition key is I believe is the post ID since I don't",
    "start": "3017040",
    "end": "3022559"
  },
  {
    "text": "have the post ID I am running this in every physical partition I have so I can",
    "start": "3022559",
    "end": "3028720"
  },
  {
    "text": "easily go here as you can see index and matrix becomes available and it shows you uh in the left side it says well I",
    "start": "3028720",
    "end": "3036960"
  },
  {
    "text": "am using the owner user id so please do not touch that don't remove that in the right side potential indexes those are",
    "start": "3036960",
    "end": "3043599"
  },
  {
    "text": "the indexes it suggests me that you know you should actually create it looks like score is not indexed so if actually",
    "start": "3043599",
    "end": "3052079"
  },
  {
    "text": "create a score that's going to probably help me uh with the requests you can easily We go and look at this indexing",
    "start": "3052079",
    "end": "3058880"
  },
  {
    "text": "policy here as you can see excluded properties in here looks like postbody",
    "start": "3058880",
    "end": "3064960"
  },
  {
    "text": "score is not indexed post body makes perfect sense because that is the one actually all that description all the",
    "start": "3064960",
    "end": "3070960"
  },
  {
    "text": "information is i'm never going to use it in my work class so it really makes sense to kind of exclude postbody but",
    "start": "3070960",
    "end": "3077040"
  },
  {
    "text": "score in this case might not be a good uh I guess uh to exclude so uh this",
    "start": "3077040",
    "end": "3083599"
  },
  {
    "text": "actually helps me to figure out where the problem is rather than that uh we have results you",
    "start": "3083599",
    "end": "3089520"
  },
  {
    "text": "can easily uh do a kind of like a query analyzer you can actually start this",
    "start": "3089520",
    "end": "3095480"
  },
  {
    "text": "here when I run this it's going to show you some of the",
    "start": "3095480",
    "end": "3101680"
  },
  {
    "text": "most uh I guess important uh properties here as you can see looks like I am having an index problem uh you can",
    "start": "3101680",
    "end": "3109040"
  },
  {
    "text": "easily see see it here so if I'm going to go and I don't know let's make this one two",
    "start": "3109040",
    "end": "3115119"
  },
  {
    "text": "but probably what's going to happen is you're going to play with the properties try to run this in a different way and",
    "start": "3115119",
    "end": "3120319"
  },
  {
    "text": "you can execute it so you can actually see when you change it when you change the query how it's going to actually change uh in the I guess in the process",
    "start": "3120319",
    "end": "3128240"
  },
  {
    "text": "so you can kind of easily go back and compare the queries and figure out which one is the best way or fastest way uh",
    "start": "3128240",
    "end": "3133839"
  },
  {
    "text": "for you to run uh the other one is a data analyzer so you don't really need I",
    "start": "3133839",
    "end": "3139839"
  },
  {
    "text": "guess a top law or you know any kind of big I guess uh report uh options so if",
    "start": "3139839",
    "end": "3147760"
  },
  {
    "text": "you are looking something really simple for example if you want to kind of look at the scores you can easily see okay",
    "start": "3147760",
    "end": "3153280"
  },
  {
    "text": "this is the minimum number this is the average number that's the max so that kind of gives you rather than taking this JSON object out of here and put it",
    "start": "3153280",
    "end": "3160160"
  },
  {
    "text": "like in an Excel file and try to figure out what is minimum what is maximum this gives you kind of like a simple uh you",
    "start": "3160160",
    "end": "3166079"
  },
  {
    "text": "know option uh when it comes to analyzing the data i have the map here but I'm not",
    "start": "3166079",
    "end": "3172559"
  },
  {
    "text": "going to go in that if you have any geospatial data you can easily create your polygons and figure out if what",
    "start": "3172559",
    "end": "3177760"
  },
  {
    "text": "data is under that so I'm not going to go in that that's a kind of all big topic for itself uh but it's an option",
    "start": "3177760",
    "end": "3183680"
  },
  {
    "text": "out there for you and one more option here is the point read point read is how",
    "start": "3183680",
    "end": "3189520"
  },
  {
    "text": "you actually read the data the fastest and you can easily see the post ID here",
    "start": "3189520",
    "end": "3194640"
  },
  {
    "text": "is this is always going to change that's going to show you what the partition key so if you pick the partition key here",
    "start": "3194640",
    "end": "3200319"
  },
  {
    "text": "and document ID here it should be the fastest way to get the data so yes actually track post ID is",
    "start": "3200319",
    "end": "3208280"
  },
  {
    "text": "16 and document ID is this number here GUID and put it right",
    "start": "3208280",
    "end": "3216200"
  },
  {
    "text": "here and just click on read and cross fingers right so as you can see request",
    "start": "3216200",
    "end": "3222000"
  },
  {
    "text": "charges one or five so that is the fastest way you can read data in Cosmos",
    "start": "3222000",
    "end": "3227839"
  },
  {
    "text": "DB so whenever you are architecting your application if you have some kind of like a grid for example you want to be",
    "start": "3227839",
    "end": "3233359"
  },
  {
    "text": "sure that in every row you have partition key and document ID of that",
    "start": "3233359",
    "end": "3238559"
  },
  {
    "text": "row presents so when you click it rather than running a query you run a point read to get that row information so that",
    "start": "3238559",
    "end": "3245839"
  },
  {
    "text": "will make things much faster and cheaper so that's the fastest and cheapest way you can read data from Cosmos",
    "start": "3245839",
    "end": "3252280"
  },
  {
    "text": "DB but with that I think that's all I have for you this one is actually free i'm doing this for community i'm still",
    "start": "3252280",
    "end": "3258319"
  },
  {
    "text": "working to make this open source so if you'll like to help me I guess later uh you can find this in the GitHub it's not",
    "start": "3258319",
    "end": "3265520"
  },
  {
    "text": "uh open yet but I'm still working on it and everything in uh VS Code has to be JavaScript so that's using the",
    "start": "3265520",
    "end": "3271599"
  },
  {
    "text": "JavaScript API and yeah it will be uh open source soon so thank you again for",
    "start": "3271599",
    "end": "3278240"
  },
  {
    "text": "coming to my session and hopefully I will see you in the next session thank you",
    "start": "3278240",
    "end": "3285079"
  }
]