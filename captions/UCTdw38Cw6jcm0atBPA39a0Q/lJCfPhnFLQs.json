[
  {
    "text": "this is exciting i'm really excited to be here here at the ntc with all of you but also i'm super excited for the first time in",
    "start": "8320",
    "end": "14480"
  },
  {
    "text": "oslo i had yesterday with friends of mine a lot of bruno's it's delicious",
    "start": "14480",
    "end": "20800"
  },
  {
    "text": "but of course you didn't came here to to listen to me praise the norwegian cuisine you hear",
    "start": "20800",
    "end": "27519"
  },
  {
    "text": "about learning what i learned about source generators in wasteland",
    "start": "27519",
    "end": "32880"
  },
  {
    "text": "so my name is stefan pertz i started develop coding in 2008.",
    "start": "32880",
    "end": "39440"
  },
  {
    "text": "i'm originally from austria i started my first t-sharp application in 2012. i did unity back then so this",
    "start": "39440",
    "end": "47039"
  },
  {
    "text": "was mono i then switched to dot net in 2013 when i moved to germany",
    "start": "47039",
    "end": "52480"
  },
  {
    "text": "the germans they really taught me how to do.net in c-sharp it was excellent experience",
    "start": "52480",
    "end": "57920"
  },
  {
    "text": "and i learned also all the predecessors to source code generation via roslin for",
    "start": "57920",
    "end": "64080"
  },
  {
    "text": "example d4 templates actually didn't do foldy",
    "start": "64080",
    "end": "70080"
  },
  {
    "text": "il weaving via 40 however i did check out post sharp and also reflection emit",
    "start": "70080",
    "end": "77119"
  },
  {
    "text": "and creating expression trees and source generators are now the latest",
    "start": "77119",
    "end": "83280"
  },
  {
    "text": "addition on how you can generate code at compile time so that is fast at one",
    "start": "83280",
    "end": "89360"
  },
  {
    "text": "time i into in last year i've started actually",
    "start": "89360",
    "end": "94799"
  },
  {
    "text": "with rosslyn the and the western api is very exhaustive i think now i'm not one and a half years into it and i believe i",
    "start": "94799",
    "end": "100880"
  },
  {
    "text": "know five percent is a beast and doing source generators now i started this year half a year ago",
    "start": "100880",
    "end": "107600"
  },
  {
    "text": "actually after listening uh to another talk which which inspired me and social media is awesome",
    "start": "107600",
    "end": "113360"
  },
  {
    "text": "currently i'm in austria working as a senior developed by admiral schwartzbergen in vienna",
    "start": "113360",
    "end": "119040"
  },
  {
    "text": "and i listed here some of my alter egos if you want to connect and tell me about the talk what was good what was bad",
    "start": "119040",
    "end": "124640"
  },
  {
    "text": "maybe you have some questions i would like to connect so what are we gonna talk about tonight",
    "start": "124640",
    "end": "131039"
  },
  {
    "text": "so c-sharp nine added two small features",
    "start": "131039",
    "end": "136720"
  },
  {
    "text": "which facilitate roslin generators we will check them out then we have a look",
    "start": "136720",
    "end": "141920"
  },
  {
    "text": "at the laws of source generation what to do what they can do and what they are not supposed to do",
    "start": "141920",
    "end": "148560"
  },
  {
    "text": "we will check out some examples.net six the bcl now actually ships with source generators microsoft is building source",
    "start": "148560",
    "end": "154480"
  },
  {
    "text": "generators themselves we will check out the anatomy how does the source generator look like",
    "start": "154480",
    "end": "160160"
  },
  {
    "text": "what base classes are there and so on we will see the tooling which facilitates",
    "start": "160160",
    "end": "165519"
  },
  {
    "text": "us developing these bit of debugging i i'm prepared",
    "start": "165519",
    "end": "171840"
  },
  {
    "text": "we will see um there is a bit if you want to enable more up-to-date features such as",
    "start": "172319",
    "end": "179680"
  },
  {
    "text": "nullable reference types there's a bit of a of tweak you have to do there but we",
    "start": "179680",
    "end": "185280"
  },
  {
    "text": "will we will see how this works we'll talk about the different versions since boston generators are ever evolving.6",
    "start": "185280",
    "end": "192319"
  },
  {
    "text": "just got new features we will see some performance issues that we will",
    "start": "192319",
    "end": "198959"
  },
  {
    "text": "also solve we'll have a brief look how this looks like in nougat so how we can ship our",
    "start": "198959",
    "end": "204000"
  },
  {
    "text": "source generators to other developers and we'll have there will be tons of",
    "start": "204000",
    "end": "209200"
  },
  {
    "text": "examples and some more resources so c sharp nine",
    "start": "209200",
    "end": "215599"
  },
  {
    "text": "in c sharp nine which shipped with dot net five roughly last year um",
    "start": "215599",
    "end": "221360"
  },
  {
    "text": "two features were added under the title now support for source generators previously c-sharp 8 and lower",
    "start": "221360",
    "end": "228480"
  },
  {
    "text": "you could have partial methods but they must be returning void",
    "start": "228480",
    "end": "234080"
  },
  {
    "text": "they cannot have explicit visibility they are always private implicitly they cannot have out parameters",
    "start": "234080",
    "end": "241120"
  },
  {
    "text": "and for example if we have a partial method without an implementation it actually gets stripped out of the code but now",
    "start": "241120",
    "end": "247760"
  },
  {
    "text": "with c sharp nine those rules got a little bit lifted so",
    "start": "247760",
    "end": "253680"
  },
  {
    "text": "since um c-sharp is always very so as so far very backwards compatible i",
    "start": "253680",
    "end": "260079"
  },
  {
    "text": "here have a partial method and i'm not calling it in code we see",
    "start": "260079",
    "end": "267120"
  },
  {
    "text": "the ide tells me this is not used so this will actually be stripped out it will not be in the final compilation",
    "start": "267120",
    "end": "272880"
  },
  {
    "text": "unless we really use it and the old rules apply i cannot return string this will immediately",
    "start": "272880",
    "end": "280000"
  },
  {
    "text": "result in an error however if i now state an explicit visibility perhaps internal",
    "start": "280000",
    "end": "286800"
  },
  {
    "text": "or any visibility now the new rules apply and the new rules allow all that",
    "start": "286800",
    "end": "292000"
  },
  {
    "text": "was forbidden beforehand but we must supply an implementation if there is no",
    "start": "292000",
    "end": "297759"
  },
  {
    "text": "implementation this will cause a compiler error this will not compile but i now actually have a source",
    "start": "297759",
    "end": "304479"
  },
  {
    "text": "generator in place already which now fills this hole so some various code which now has the same definition and",
    "start": "304479",
    "end": "311360"
  },
  {
    "text": "actually returned something from this get method so let's see what if i it happens if i call this",
    "start": "311360",
    "end": "317840"
  },
  {
    "text": "let's get this string let's run the application",
    "start": "320080",
    "end": "325840"
  },
  {
    "text": "and i didn't write any there is no user code that actually produces now the",
    "start": "330800",
    "end": "336720"
  },
  {
    "text": "from generator but it actually generates producing it so it's part of the compilation but i didn't write it",
    "start": "336720",
    "end": "342160"
  },
  {
    "text": "directly another thing that got added are module",
    "start": "342160",
    "end": "348400"
  },
  {
    "text": "initializers so there is a new attribute the module initializer attribute also available in",
    "start": "348400",
    "end": "354240"
  },
  {
    "text": "stock.net five and we can put the module initializer attribute on a method which is static",
    "start": "354240",
    "end": "362400"
  },
  {
    "text": "somehow visible so it can't be private nor a local function must be accessible",
    "start": "362400",
    "end": "369120"
  },
  {
    "text": "it must return void cannot have any old parameters it can't be generic can take",
    "start": "369120",
    "end": "374319"
  },
  {
    "text": "any generic type parameters and",
    "start": "374319",
    "end": "378960"
  },
  {
    "text": "this is then picked up by the compiler and called before any other code so if we have some static initializers they",
    "start": "379600",
    "end": "385440"
  },
  {
    "text": "are called after the module initializer so we could have a module write which is",
    "start": "385440",
    "end": "390960"
  },
  {
    "text": "most likely assembly-wide initialization at the beginning",
    "start": "390960",
    "end": "396400"
  },
  {
    "text": "so i will briefly get my snippet here",
    "start": "396400",
    "end": "401600"
  },
  {
    "text": "so i have here a text property and i set it via the module initializer",
    "start": "401759",
    "end": "409280"
  },
  {
    "text": "however i never call this init method directly yet",
    "start": "409280",
    "end": "415039"
  },
  {
    "text": "if i print this",
    "start": "415039",
    "end": "419758"
  },
  {
    "text": "property it says initialize what the motor initializer sets this is called before anything else",
    "start": "420880",
    "end": "428160"
  },
  {
    "text": "and those two help building source generators",
    "start": "428160",
    "end": "434840"
  },
  {
    "text": "now what are the laws of source generation with rustling",
    "start": "434840",
    "end": "441199"
  },
  {
    "text": "perhaps let's have a brief look on how this actually looks like",
    "start": "441360",
    "end": "446560"
  },
  {
    "text": "so this picture basically shows it very well in the beginning",
    "start": "446560",
    "end": "453758"
  },
  {
    "text": "now my shortcut stops working sorry for that in the beginning there is a compilation",
    "start": "455680",
    "end": "461840"
  },
  {
    "text": "which which consists entirely of the user code this then gets shipped",
    "start": "461840",
    "end": "467120"
  },
  {
    "text": "or pushed to the source generator to any source generated which are there they now basically can run through all the",
    "start": "467120",
    "end": "473199"
  },
  {
    "text": "user code they see all the user code however they don't see the syntax trees of the of um package references or other",
    "start": "473199",
    "end": "480879"
  },
  {
    "text": "references but they could access the semantic model behind it and then the new generator may or may",
    "start": "480879",
    "end": "488000"
  },
  {
    "text": "not generate no new source this actually strings strings in c sharp then get",
    "start": "488000",
    "end": "494639"
  },
  {
    "text": "back to the compilation and are compiled together with the user code so if our social media creates a compiler error",
    "start": "494639",
    "end": "501039"
  },
  {
    "text": "the user ends up with a compiler error that they can't actually really fix because it's the source generator generating them the generated source can",
    "start": "501039",
    "end": "507360"
  },
  {
    "text": "be edited by the user and the laws around that is that we do",
    "start": "507360",
    "end": "514880"
  },
  {
    "text": "retrieve the user code and drift that the syntax tree so that that's um all the nodes for",
    "start": "514880",
    "end": "521440"
  },
  {
    "text": "example the private a private keyword that's uh that's in the huge syntax tree just a note or a",
    "start": "521440",
    "end": "528320"
  },
  {
    "text": "method declaration and so on um you can also grab the semantic model which gives more information about the",
    "start": "528320",
    "end": "534320"
  },
  {
    "text": "actual type and we can add new source as strings and we can only add source",
    "start": "534320",
    "end": "542720"
  },
  {
    "text": "we cannot remove or manipulate source so this is not really a replacement for for",
    "start": "542720",
    "end": "548080"
  },
  {
    "text": "example il weaving this is so far the the restriction",
    "start": "548080",
    "end": "555040"
  },
  {
    "text": "it can it could produce diagnostics because it's basically technically it's an analyzer analyzers can do diagnostics",
    "start": "555040",
    "end": "562560"
  },
  {
    "text": "such as reporting infos or warnings or even errors prevent the compilation from succeeding",
    "start": "562560",
    "end": "568880"
  },
  {
    "text": "and we also may access additional files additional files in the compilation are for example the app to json",
    "start": "568880",
    "end": "577360"
  },
  {
    "text": "source changes are unordered they do well they do one in a defined order but",
    "start": "577360",
    "end": "582720"
  },
  {
    "text": "it's not documented what that order is and so that they cannot depend on each other the output of once one source",
    "start": "582720",
    "end": "588880"
  },
  {
    "text": "generate is not visible to the next generator and yeah technically they are analyzers",
    "start": "588880",
    "end": "595120"
  },
  {
    "text": "so the two most prominent use cases are either with source generation we could pre we could avoid having the user write",
    "start": "595120",
    "end": "602640"
  },
  {
    "text": "tedious implementations for example i notify property changed that's pretty much always looks the same it's a",
    "start": "602640",
    "end": "608480"
  },
  {
    "text": "certain pattern that we apply or implementing i equatable well um",
    "start": "608480",
    "end": "615440"
  },
  {
    "text": "records are now solving that a bit they're not source generated they're actually a c-sharp feature a language",
    "start": "615600",
    "end": "621200"
  },
  {
    "text": "feature and the second use case is we could avoid reflection so that we can interact",
    "start": "621200",
    "end": "627440"
  },
  {
    "text": "with the user code and build upon it for example in an asp.net core application don't",
    "start": "627440",
    "end": "633200"
  },
  {
    "text": "find the the the controllers via reflection but",
    "start": "633200",
    "end": "638880"
  },
  {
    "text": "actually find them at compile time already so then startup gets much faster",
    "start": "638880",
    "end": "645240"
  },
  {
    "text": "i also linked the cookbook if you want to check this out this is like the prime source of of how to power build uh source",
    "start": "646079",
    "end": "652560"
  },
  {
    "text": "generators so now let's actually get to it how does",
    "start": "652560",
    "end": "657600"
  },
  {
    "text": "the chelsea look like now we've dotnet six two source generators are shipped",
    "start": "657600",
    "end": "662640"
  },
  {
    "text": "we have in system text json and also in logging.abstractions which",
    "start": "662640",
    "end": "669440"
  },
  {
    "text": "saves us writing boilerplate code but also",
    "start": "669440",
    "end": "676160"
  },
  {
    "text": "uh gives us a lot of performance so let's go with vlogging first i grab this",
    "start": "676160",
    "end": "681920"
  },
  {
    "text": "method here so this is this is how the generator works the generator analyzes my code searches",
    "start": "681920",
    "end": "686959"
  },
  {
    "text": "for a partial type in this case the log type and searches for a method a partial",
    "start": "686959",
    "end": "693680"
  },
  {
    "text": "method which has the logger message attribute on it now i define",
    "start": "693680",
    "end": "699519"
  },
  {
    "text": "my my values to this log message for example 240 as the as",
    "start": "699519",
    "end": "706959"
  },
  {
    "text": "the event id the log level is information and i can do a format string which then gets filled in by the",
    "start": "706959",
    "end": "713920"
  },
  {
    "text": "parameter and this method must have a logger with it if i remove this locker then i will",
    "start": "713920",
    "end": "719839"
  },
  {
    "text": "get a diagnostic so this diagnostic is not actually from the um",
    "start": "719839",
    "end": "725920"
  },
  {
    "text": "well actually the generator is now not generating something so we missed that implementation",
    "start": "725920",
    "end": "732320"
  },
  {
    "text": "we need that it doesn't have to be an extension method it can be now we can call that",
    "start": "732320",
    "end": "738480"
  },
  {
    "text": "instead of here let's say log dot hello",
    "start": "738480",
    "end": "745839"
  },
  {
    "text": "and we need to pass actually it's an extension",
    "start": "745839",
    "end": "751040"
  },
  {
    "text": "method so i can say this and we can pass law",
    "start": "751040",
    "end": "758760"
  },
  {
    "text": "and there's a bunch of code generated better generator i can 12 into these and this is generated by",
    "start": "761600",
    "end": "768320"
  },
  {
    "text": "the source generator we see at the top is dude he wants us that this file is auto generated it looks very similar and",
    "start": "768320",
    "end": "774560"
  },
  {
    "text": "wider there is a there is a lock on top telling you we can't edit it doesn't make sense because it's generated",
    "start": "774560",
    "end": "780800"
  },
  {
    "text": "and so this is very similar we could also do this manually with the logger",
    "start": "780800",
    "end": "786040"
  },
  {
    "text": "message.define to have the high performance logging but it's tedious to always write the same code so the social",
    "start": "786040",
    "end": "791279"
  },
  {
    "text": "media reduces that and another use case oops is about performance system talks system",
    "start": "791279",
    "end": "797600"
  },
  {
    "text": "text json so it is actually shipped with the dotnet six bcl",
    "start": "797600",
    "end": "804399"
  },
  {
    "text": "we i define here oops i define some entity",
    "start": "805120",
    "end": "811120"
  },
  {
    "text": "now i define another method that gets picked up by the generator the generator searches for types which have json",
    "start": "812399",
    "end": "818800"
  },
  {
    "text": "serializable attribute applied and also a partial deriving from json",
    "start": "818800",
    "end": "824480"
  },
  {
    "text": "serializer context and i don't have any implementation but it compiles because the",
    "start": "824480",
    "end": "829760"
  },
  {
    "text": "json server as a context does have an abstract method i do need",
    "start": "829760",
    "end": "835760"
  },
  {
    "text": "to implement this but it's a generator taking over and the usage is now such",
    "start": "835760",
    "end": "842720"
  },
  {
    "text": "that i oops",
    "start": "842720",
    "end": "846399"
  },
  {
    "text": "can i define my entity i say json serializer.serialize and use this new generator type so there's the serializer",
    "start": "852560",
    "end": "859040"
  },
  {
    "text": "context this is my type that it defines down there dot default.entity and this is now",
    "start": "859040",
    "end": "865120"
  },
  {
    "text": "the type information that is used for deserialization but also zero is a yeah",
    "start": "865120",
    "end": "870399"
  },
  {
    "text": "the other way around first serialization and then the round track decentralization back to the original entity",
    "start": "870399",
    "end": "876480"
  },
  {
    "text": "and when we run this we will see first the json",
    "start": "876480",
    "end": "881519"
  },
  {
    "text": "then the deserialized record again we can also control this analyzer",
    "start": "881519",
    "end": "887440"
  },
  {
    "text": "via the source json source generator options we can for example i passed in true i",
    "start": "887440",
    "end": "893519"
  },
  {
    "text": "could also pass it oops false so now the output string is not intended",
    "start": "893519",
    "end": "898560"
  },
  {
    "text": "now we just have one line so this is what the what the the analyzer is inspecting and a lot of code",
    "start": "898560",
    "end": "904959"
  },
  {
    "text": "is generated here if we uh go to definition this is all generated by the generator so this is the most naive",
    "start": "904959",
    "end": "911440"
  },
  {
    "text": "direct code that you could write to serialize an entity no reflection so",
    "start": "911440",
    "end": "916480"
  },
  {
    "text": "it's a lot of code but it's significantly faster",
    "start": "916480",
    "end": "920880"
  },
  {
    "text": "there is also with dotnet six ships a source generator with blazers so that the razer files get",
    "start": "921920",
    "end": "928240"
  },
  {
    "text": "source generated",
    "start": "928240",
    "end": "930959"
  },
  {
    "text": "so let's come to the anatomy if i want to write this myself not just use the generator from somebody else",
    "start": "937440",
    "end": "945360"
  },
  {
    "text": "we basically uh let me quickly check my",
    "start": "945360",
    "end": "951440"
  },
  {
    "text": "try to restart",
    "start": "951440",
    "end": "954839"
  },
  {
    "text": "zoom it",
    "start": "959839",
    "end": "963079"
  },
  {
    "text": "no we still didn't fix it um [Music] we basically",
    "start": "970800",
    "end": "976800"
  },
  {
    "text": "have to consume the package microsoft dot code analysis dot c sharp",
    "start": "976800",
    "end": "982720"
  },
  {
    "text": "dot workspaces it's not in the system namespace it's in the microsoft code analysis namespace this is all",
    "start": "982720",
    "end": "989040"
  },
  {
    "text": "everything was then starts with microsoft dot code analysis and it's a source",
    "start": "989040",
    "end": "994639"
  },
  {
    "text": "generator available since the version 3.8 i always",
    "start": "994639",
    "end": "999759"
  },
  {
    "text": "like to include the code analysis analyzers which is an analyzer packages which scans the source generator code",
    "start": "999759",
    "end": "1006160"
  },
  {
    "text": "that i write and produces warnings if i don't follow the rules for example with type equality",
    "start": "1006160",
    "end": "1011759"
  },
  {
    "text": "in roslyn rarely any type implements equality via the equals operator so",
    "start": "1011759",
    "end": "1018880"
  },
  {
    "text": "there are special comparers for that to use then we have a",
    "start": "1018880",
    "end": "1024959"
  },
  {
    "text": "type which derives from i source generator and we need to apply the generator",
    "start": "1024959",
    "end": "1030400"
  },
  {
    "text": "attribute this is very important otherwise the the tool for example visual studio or the.net sdk will not pick it up",
    "start": "1030400",
    "end": "1037678"
  },
  {
    "text": "then we have two methods they initialize at the execute we will come to that white in a minute and optionally we can use a syntax",
    "start": "1037679",
    "end": "1044079"
  },
  {
    "text": "receiver which is basically a visitor which calls on visit syntax node on each and",
    "start": "1044079",
    "end": "1050480"
  },
  {
    "text": "every syntax node that is found so let's have a look at",
    "start": "1050480",
    "end": "1056000"
  },
  {
    "text": "a source generator so maybe you have seen the talk from david",
    "start": "1056000",
    "end": "1062880"
  },
  {
    "text": "fowler about implementation detailed matters where he briefly shows how",
    "start": "1062880",
    "end": "1070320"
  },
  {
    "text": "how in enum.2string or the enum.getname and the fast",
    "start": "1073840",
    "end": "1081600"
  },
  {
    "text": "the fastest way how to get the the constant string representation of an enum because there is a reflection and a",
    "start": "1081600",
    "end": "1089200"
  },
  {
    "text": "binary array lookup involved and a moana if implementation would be to wide it ourself",
    "start": "1089200",
    "end": "1096640"
  },
  {
    "text": "and this is now what a source tuner can do so it's very naive code it's basically just switching",
    "start": "1096640",
    "end": "1102400"
  },
  {
    "text": "on this log-level enumeration type and going through linearly",
    "start": "1102400",
    "end": "1108960"
  },
  {
    "text": "doing basically if it's a type name of that string and if we don't find any we return now",
    "start": "1108960",
    "end": "1114559"
  },
  {
    "text": "so that it's on par with enum.getname",
    "start": "1114559",
    "end": "1121960"
  },
  {
    "text": "a little bit of a benchmark there it is and here we see the difference so at first we have the",
    "start": "1122720",
    "end": "1128720"
  },
  {
    "text": "generated method which is 1.6 nanoseconds and has a zero allocation",
    "start": "1128720",
    "end": "1135200"
  },
  {
    "text": "and the two string which involves reflection and the binary lookup binary lookup",
    "start": "1135200",
    "end": "1142799"
  },
  {
    "text": "is 25 nanoseconds and also involves a bit of",
    "start": "1142799",
    "end": "1148960"
  },
  {
    "text": "uh allocation which is pretty much the enemy of every high performance app right now",
    "start": "1149039",
    "end": "1155200"
  },
  {
    "text": "so how does generator look like",
    "start": "1155200",
    "end": "1159039"
  },
  {
    "text": "we have here the type as we've seen the wi-fi source generator",
    "start": "1163200",
    "end": "1168400"
  },
  {
    "text": "has the generator attribute on top and at first there is an initialize method in the initialize we now can set",
    "start": "1168400",
    "end": "1174480"
  },
  {
    "text": "up the syntax receiver so basically initially the syntax receiver now the",
    "start": "1174480",
    "end": "1180320"
  },
  {
    "text": "syntax receiver is the isomtrix receiver type which now visits at each and every",
    "start": "1180320",
    "end": "1186559"
  },
  {
    "text": "syntax node in the compilation and they basically do this since uh on visit twitter note is called a lot of times if",
    "start": "1186559",
    "end": "1193200"
  },
  {
    "text": "we have if i have a small 50 lines of code programmed then i have",
    "start": "1193200",
    "end": "1199120"
  },
  {
    "text": "like 500 invocations of this per compilation which is also per key press",
    "start": "1199120",
    "end": "1205039"
  },
  {
    "text": "so we need to mine performance here a lot don't do any expensive stuff we we see source generators there is no async",
    "start": "1205039",
    "end": "1210559"
  },
  {
    "text": "method to to not invite you to to do something slower this must be fast otherwise the experience in the tooling",
    "start": "1210559",
    "end": "1218559"
  },
  {
    "text": "would suffer and so",
    "start": "1218559",
    "end": "1224080"
  },
  {
    "text": "when if you have done watson you will be familiar with with the uh the syntax nodes and the expression types",
    "start": "1224080",
    "end": "1231440"
  },
  {
    "text": "we basically search and we now search a special method",
    "start": "1231919",
    "end": "1237440"
  },
  {
    "text": "it has one argument and it's it has a special name so we'll search this method and then put it",
    "start": "1237440",
    "end": "1243360"
  },
  {
    "text": "in the list this invocations list and this invocations list",
    "start": "1243360",
    "end": "1248960"
  },
  {
    "text": "is then used by the execute method so the execute method is only this one once",
    "start": "1248960",
    "end": "1255520"
  },
  {
    "text": "we we grab the syntax receiver i also check if it's actually c sharp because i'm producing c sharp code this",
    "start": "1255520",
    "end": "1262080"
  },
  {
    "text": "would uh fail if this would be a visual basic project we get the syntax receiver",
    "start": "1262080",
    "end": "1267840"
  },
  {
    "text": "and now in this method i get all the all the symbols so i",
    "start": "1267840",
    "end": "1273120"
  },
  {
    "text": "so i can actually get the the type behind that enum so that i can produce that i know the the the names of",
    "start": "1273120",
    "end": "1280480"
  },
  {
    "text": "the constants i also get the options this is basically some additional files",
    "start": "1280480",
    "end": "1286480"
  },
  {
    "text": "i can i can get ms build properties or global analyzer",
    "start": "1286480",
    "end": "1292000"
  },
  {
    "text": "entries similar to editor config and then eventually we can generate the source code",
    "start": "1292000",
    "end": "1297840"
  },
  {
    "text": "i like to use an indented text writer because it um",
    "start": "1297840",
    "end": "1304080"
  },
  {
    "text": "nicely supports indentation so i can i can create a nice looking c sharp file",
    "start": "1304080",
    "end": "1309360"
  },
  {
    "text": "so that it's actually reasonable readable i always like to put auto generator on top so that automatic tools",
    "start": "1309360",
    "end": "1315440"
  },
  {
    "text": "such as other analyzers or maybe source code coverage shouldn't pick this up",
    "start": "1315440",
    "end": "1324080"
  },
  {
    "text": "then it's important to mind compatibility massage generator could create c sharp",
    "start": "1324240",
    "end": "1331120"
  },
  {
    "text": "10 code but if a if if i see if i if our dot standard project which is by default c-sharp 7.3",
    "start": "1331120",
    "end": "1338080"
  },
  {
    "text": "would consume it compilation would fail we would get all the warnings that this feature is not available in c sharp 3.8",
    "start": "1338080",
    "end": "1344400"
  },
  {
    "text": "we must increase the language version and to to enable a more",
    "start": "1344400",
    "end": "1350240"
  },
  {
    "text": "broader consumer range depends on your scenario you may want to support",
    "start": "1350240",
    "end": "1355679"
  },
  {
    "text": "multiple or lower languages i did definitely overdid it here this example is supporting up to uh c sharp two",
    "start": "1355679",
    "end": "1362559"
  },
  {
    "text": "but find five find a good balance you could also say okay i don't need the latest features i just write c sharp 7.3 since",
    "start": "1362559",
    "end": "1369520"
  },
  {
    "text": "this is a good range it depends on the scenario then basically generating going",
    "start": "1369520",
    "end": "1375919"
  },
  {
    "text": "generally really this is all c sharp code adding up and eventually",
    "start": "1375919",
    "end": "1382399"
  },
  {
    "text": "then we will call from this context the add source method and this is",
    "start": "1382799",
    "end": "1388559"
  },
  {
    "text": "actually adding the string that we assembled to the compilation we also pass a hint",
    "start": "1388559",
    "end": "1394000"
  },
  {
    "text": "name i always add a dot g dot cs",
    "start": "1394000",
    "end": "1400400"
  },
  {
    "text": "because this is also a signal that this is generated code and tools shouldn't shouldn't pick this up with user code",
    "start": "1400400",
    "end": "1407840"
  },
  {
    "text": "and then pass it to source context and then it appears uh in visual studio we can actually so",
    "start": "1407840",
    "end": "1414000"
  },
  {
    "text": "basically we can f12 this this is also the very same experience in wider this enum input is generated in wider we can",
    "start": "1414000",
    "end": "1420480"
  },
  {
    "text": "also go to the definition then we see this and",
    "start": "1420480",
    "end": "1426240"
  },
  {
    "text": "we can also have a look here in the analyzer yes in the analyzers tab",
    "start": "1426240",
    "end": "1431840"
  },
  {
    "text": "we now see all of the analyzers generators are analyzers so they will show up here as well",
    "start": "1431840",
    "end": "1437200"
  },
  {
    "text": "and we now see that this project has actually three analyzers",
    "start": "1437200",
    "end": "1442400"
  },
  {
    "text": "and if i expand this one we see this is the enum info.g.t.s which gets um",
    "start": "1442400",
    "end": "1447440"
  },
  {
    "text": "emitted so this is how i can browse the the generated code if there is any if a",
    "start": "1447440",
    "end": "1452720"
  },
  {
    "text": "generator doesn't generate anything then there is a little bit of an info saying that this generator doesn't produce anything to the compilation",
    "start": "1452720",
    "end": "1460799"
  },
  {
    "text": "also i want to mention testing so microsoft has released a testing",
    "start": "1463200",
    "end": "1469440"
  },
  {
    "text": "package which is microsoft dot code analysis dot c dot source generators dot testing and",
    "start": "1469440",
    "end": "1477919"
  },
  {
    "text": "then there is also ms test and end unit depends on what you would you prefer",
    "start": "1477919",
    "end": "1484159"
  },
  {
    "text": "and we can write unit tests and they are basically string comparison",
    "start": "1484159",
    "end": "1490000"
  },
  {
    "text": "since the compiler is a string in compilation out we convert this combination back to a",
    "start": "1490000",
    "end": "1496640"
  },
  {
    "text": "string so that we can nicely compare it so let me find a",
    "start": "1496640",
    "end": "1502720"
  },
  {
    "text": "smaller test for example here basically have here some some usages of the code it's just a",
    "start": "1502720",
    "end": "1509760"
  },
  {
    "text": "string as input is basically what the compiler actually gets as input and then",
    "start": "1509760",
    "end": "1515360"
  },
  {
    "text": "what i expect to be the output so i pass in the input code the expected output code",
    "start": "1515360",
    "end": "1521840"
  },
  {
    "text": "i can also optionally add diagnostics and can also this is not very similar",
    "start": "1521840",
    "end": "1528559"
  },
  {
    "text": "um if you have tested um uh diagnostic analyzers it's very similar with with um",
    "start": "1528559",
    "end": "1535440"
  },
  {
    "text": "with that so we can say okay this should produce this warning and so on at this location",
    "start": "1535440",
    "end": "1541840"
  },
  {
    "text": "speaking of analyzers now i want to show you how we can actually produce a warning so if i would use this analyzer",
    "start": "1541840",
    "end": "1549120"
  },
  {
    "text": "artist this generator sorry wrong for example actually passing in",
    "start": "1549120",
    "end": "1556320"
  },
  {
    "text": "the lock level sn enum type",
    "start": "1556320",
    "end": "1560639"
  },
  {
    "text": "since this generator is always also generating this stub it's all it's always throwing but i",
    "start": "1562480",
    "end": "1570080"
  },
  {
    "text": "um it's generated so that we have in the beginning some intellisense so that this method is",
    "start": "1570080",
    "end": "1576240"
  },
  {
    "text": "discoverable but it shouldn't be called because um you know we would need then now we",
    "start": "1576240",
    "end": "1582880"
  },
  {
    "text": "have no type information now we would need reflection to actually go to the properties so this is not fast",
    "start": "1582880",
    "end": "1588720"
  },
  {
    "text": "um and if i would use this now i should get the error list",
    "start": "1588720",
    "end": "1595120"
  },
  {
    "text": "okay too many warnings i was expecting one",
    "start": "1596840",
    "end": "1602000"
  },
  {
    "text": "let me quickly rebuild",
    "start": "1602960",
    "end": "1606600"
  },
  {
    "text": "okay uh sorry about that um we would see uh one warning",
    "start": "1612400",
    "end": "1619679"
  },
  {
    "text": "but let me show you the code so this is how we can",
    "start": "1619679",
    "end": "1625760"
  },
  {
    "text": "define the diagnostic diagnostic always has an id it has a message as a verity",
    "start": "1625760",
    "end": "1632240"
  },
  {
    "text": "this is your default severity because the user can change the severity either to a more severe or less severe via an",
    "start": "1632240",
    "end": "1638799"
  },
  {
    "text": "editor config or global analyzer setting and",
    "start": "1638799",
    "end": "1644480"
  },
  {
    "text": "in the code then we can basically call report",
    "start": "1644480",
    "end": "1650320"
  },
  {
    "text": "diagnostic so the report diagnostic method",
    "start": "1650320",
    "end": "1655440"
  },
  {
    "text": "um",
    "start": "1655440",
    "end": "1657679"
  },
  {
    "text": "yes",
    "start": "1666080",
    "end": "1669080"
  },
  {
    "text": "so we can we can also supply the location so that the user knows where this error",
    "start": "1672399",
    "end": "1677600"
  },
  {
    "text": "is and then we report this this diagnostic which is very very similar as we would do with a diagnostic",
    "start": "1677600",
    "end": "1683440"
  },
  {
    "text": "analyzer i would not like to i'm not sure i guess",
    "start": "1683440",
    "end": "1689440"
  },
  {
    "text": "this demo would fail i'm afraid i'm not sure what's uh what's wrong but i want to show you",
    "start": "1689440",
    "end": "1694720"
  },
  {
    "text": "the source either way so we can have for example a global config so this is a",
    "start": "1694720",
    "end": "1701600"
  },
  {
    "text": "file called dot global config if it has another name we need to set an endless build property but the dot global config",
    "start": "1701600",
    "end": "1707279"
  },
  {
    "text": "is picked up automatically and for example here it must have that is global is true",
    "start": "1707279",
    "end": "1714320"
  },
  {
    "text": "and then we can set some string so this is a setting that that i defined by the generator generally is aware of that i",
    "start": "1714320",
    "end": "1721039"
  },
  {
    "text": "set it to true which now actually changes the default behavior so that if the constant is not found we",
    "start": "1721039",
    "end": "1726960"
  },
  {
    "text": "don't return null but we actually throw so in this project where i enabled this if i go to the same method",
    "start": "1726960",
    "end": "1733520"
  },
  {
    "text": "we have enough info.get name if i have to have this now it's actually different source code generated so if we",
    "start": "1733520",
    "end": "1740080"
  },
  {
    "text": "fall through to the default we don't return null we actually throw an exception",
    "start": "1740080",
    "end": "1745760"
  },
  {
    "text": "and then with the return type is not nullable string this would throw and",
    "start": "1745760",
    "end": "1751440"
  },
  {
    "text": "the generator can read this",
    "start": "1751440",
    "end": "1757360"
  },
  {
    "text": "via actually let me search the stream",
    "start": "1757520",
    "end": "1762679"
  },
  {
    "text": "via the analyzer config options so we can say we had a generator execution",
    "start": "1767200",
    "end": "1772960"
  },
  {
    "text": "context that we get in in the execute method we can say dot analyzer config options we can get the",
    "start": "1772960",
    "end": "1780000"
  },
  {
    "text": "global options where now this setting is in and we read it and we see if the string",
    "start": "1780000",
    "end": "1786159"
  },
  {
    "text": "is true or false and this can then control the analyzer another way how we can control are the analyzer the the",
    "start": "1786159",
    "end": "1792240"
  },
  {
    "text": "generator another way how we can control the generator could be custom attributes that i apply",
    "start": "1792240",
    "end": "1798480"
  },
  {
    "text": "yes so that's the the basic about uh generators",
    "start": "1804720",
    "end": "1810880"
  },
  {
    "text": "now i want to [Music] uh those are the tools i use them all",
    "start": "1810880",
    "end": "1815919"
  },
  {
    "text": "the time when i do anything before slim they're super helpful first off sharp lap but sharp lip is super for everything",
    "start": "1815919",
    "end": "1823840"
  },
  {
    "text": "oops i wanted to hit yes so usually we can view here the",
    "start": "1823840",
    "end": "1829919"
  },
  {
    "text": "decompiled code or the lowered code to be more precise but we can also",
    "start": "1829919",
    "end": "1835600"
  },
  {
    "text": "change the view to the syntax tree and now we see the worst line representation of",
    "start": "1835600",
    "end": "1841679"
  },
  {
    "text": "our source code so this here it's a compilation unit it has on top it's called a using",
    "start": "1841679",
    "end": "1848840"
  },
  {
    "text": "directive this using directive has the node name then we have a class declaration the",
    "start": "1848840",
    "end": "1856159"
  },
  {
    "text": "class declaration has a public keyword as as modifier it also contains one or many method",
    "start": "1856159",
    "end": "1863360"
  },
  {
    "text": "declarations one of the state method declarations now for example has the return type predefined type which is the",
    "start": "1863360",
    "end": "1870960"
  },
  {
    "text": "void keyword this is how the tree looks like this is how we can analyze all the syntax nodes and",
    "start": "1870960",
    "end": "1876720"
  },
  {
    "text": "see if you're not sure what i'm searching for example if we would like to have",
    "start": "1876720",
    "end": "1883200"
  },
  {
    "text": "every method which returns void if we want the analyzer cares about that we could search for",
    "start": "1883200",
    "end": "1890000"
  },
  {
    "text": "each and every method declaration where the return type is the predefined type",
    "start": "1890000",
    "end": "1896320"
  },
  {
    "text": "void so sharp lab is super handy also visual studio has something very",
    "start": "1896320",
    "end": "1902399"
  },
  {
    "text": "similar built in if we enable it in the installer the installer there is in the sdk you can enable",
    "start": "1902399",
    "end": "1909760"
  },
  {
    "text": "the.net compiler platform sdk and then you get",
    "start": "1909760",
    "end": "1914799"
  },
  {
    "text": "the syntax visualizer and this is pretty much the same as shoplift does if i go to any",
    "start": "1914799",
    "end": "1922480"
  },
  {
    "text": "code sometimes it doesn't display then you need to edit the source and then it",
    "start": "1922480",
    "end": "1929200"
  },
  {
    "text": "works again of course it does not know",
    "start": "1929200",
    "end": "1934480"
  },
  {
    "text": "yes there it is and here again we see the entire from this source file one source for this one compilation unit and we can inspect the",
    "start": "1934480",
    "end": "1941519"
  },
  {
    "text": "tree and we also see the trivial trivia is white spacing and spaces which",
    "start": "1941519",
    "end": "1948799"
  },
  {
    "text": "have more visual meaning than physical meaning",
    "start": "1948799",
    "end": "1953200"
  },
  {
    "text": "there is also the rustling quota so this is more useful if you would build a",
    "start": "1955600",
    "end": "1964480"
  },
  {
    "text": "code called completion but",
    "start": "1964559",
    "end": "1970000"
  },
  {
    "text": "i can't i can put in any code public void method",
    "start": "1970000",
    "end": "1976360"
  },
  {
    "text": "and it's empty and if i generate now we get the codes that we would need in",
    "start": "1978080",
    "end": "1983760"
  },
  {
    "text": "order to build this tree ourself so watson is basically doing something",
    "start": "1983760",
    "end": "1989760"
  },
  {
    "text": "similar analyzing it creating tree and",
    "start": "1989760",
    "end": "1996559"
  },
  {
    "text": "justice there is dot dot source.net",
    "start": "1996559",
    "end": "2002559"
  },
  {
    "text": "there is um source whistling dot io which is basically the same",
    "start": "2002559",
    "end": "2008080"
  },
  {
    "text": "as the reference source for the net but but for wasteland for example we can browse here the",
    "start": "2008080",
    "end": "2013600"
  },
  {
    "text": "i source generator",
    "start": "2013600",
    "end": "2018679"
  },
  {
    "text": "and also if we go to web access then actually jump to the source code on github",
    "start": "2018960",
    "end": "2025120"
  },
  {
    "text": "where was i yes",
    "start": "2028799",
    "end": "2033840"
  },
  {
    "text": "debugging yes finally sir the attack is ready",
    "start": "2035120",
    "end": "2040799"
  },
  {
    "text": "um debugging is not super straightforward just as any other",
    "start": "2041519",
    "end": "2047519"
  },
  {
    "text": "um library especially in visual studio we just studio loads analyzers at",
    "start": "2047519",
    "end": "2053200"
  },
  {
    "text": "startup so this is what we need to tell visual studio and the tooling um how to deal with that so we need the",
    "start": "2053200",
    "end": "2060800"
  },
  {
    "text": "is wasn't component set to true we can optionally",
    "start": "2060800",
    "end": "2065839"
  },
  {
    "text": "also emit the generated files and put in a path where to view them",
    "start": "2065839",
    "end": "2071599"
  },
  {
    "text": "that we actually see the files generated but usually the generator does not generate physical files you will never",
    "start": "2071599",
    "end": "2077040"
  },
  {
    "text": "see those files unless you enable this this switch then we must define a launch profile",
    "start": "2077040",
    "end": "2084960"
  },
  {
    "text": "with the debug rustling component i think this is available since visual studios 16.10 11 something i may mix it",
    "start": "2084960",
    "end": "2093200"
  },
  {
    "text": "up then target a project that you want one so which would actually produce the source",
    "start": "2093200",
    "end": "2099520"
  },
  {
    "text": "for this generator and we need to include this generator of course",
    "start": "2099520",
    "end": "2106240"
  },
  {
    "text": "in the in the consuming project and must set the ref",
    "start": "2106240",
    "end": "2111440"
  },
  {
    "text": "the output type to analyzer and in this case also the set target",
    "start": "2111440",
    "end": "2116640"
  },
  {
    "text": "framework to not destroy 2.0 uh wasn't an uh was an analyzer and source traders",
    "start": "2116640",
    "end": "2122079"
  },
  {
    "text": "must always be dotnet standard 2.0 because it still needs to work for visual studio which is dotnet framework so we can't go higher however i do",
    "start": "2122079",
    "end": "2129040"
  },
  {
    "text": "multi-targeting here for some benefits which i will show so we need to define this here and when we set this up",
    "start": "2129040",
    "end": "2136079"
  },
  {
    "text": "we can now actually",
    "start": "2136079",
    "end": "2141280"
  },
  {
    "text": "go to example we can set now the analyzer which is",
    "start": "2141280",
    "end": "2147280"
  },
  {
    "text": "actually just a library a startup project now i set a breakpoint",
    "start": "2147280",
    "end": "2154960"
  },
  {
    "text": "let's set up breakpoint yeah",
    "start": "2155119",
    "end": "2159838"
  },
  {
    "text": "for example have a look at the at the pass option what they are this is one way of how to enter",
    "start": "2167760",
    "end": "2175280"
  },
  {
    "text": "debugging what i prefer is debugging for my unit test because it's super precise i only",
    "start": "2175280",
    "end": "2181119"
  },
  {
    "text": "have the code that i want and i can with multiple tests so debugging from a unit test works just as",
    "start": "2181119",
    "end": "2187839"
  },
  {
    "text": "well",
    "start": "2187839",
    "end": "2190079"
  },
  {
    "text": "another reference types i mentioned this a social must be dot-net standard 2.0",
    "start": "2195280",
    "end": "2202160"
  },
  {
    "text": "standard 2.0 if we have a look at the language versions but default",
    "start": "2202160",
    "end": "2208480"
  },
  {
    "text": "has uses c-sharp 7.3 we could set the lang version ourselves to a higher",
    "start": "2208480",
    "end": "2213920"
  },
  {
    "text": "version to have more features not all of them will work especially those",
    "start": "2213920",
    "end": "2219760"
  },
  {
    "text": "which need which need type support such as the init keyword that needs actually",
    "start": "2219760",
    "end": "2224960"
  },
  {
    "text": "the easy external init type if it's not available for example dr stana the type is not available it wouldn't work",
    "start": "2224960",
    "end": "2232000"
  },
  {
    "text": "and features which actually need one-time support i believe",
    "start": "2232000",
    "end": "2237440"
  },
  {
    "text": "cover-event return types need one-time support so this will never run on anything which implements just open channel 2.0",
    "start": "2237440",
    "end": "2245279"
  },
  {
    "text": "um but still for nullable reference types if you want to have these annotations in order to know what is null to avoid null",
    "start": "2245839",
    "end": "2251760"
  },
  {
    "text": "reference exceptions because they are tougher to debug in in an analyzer and",
    "start": "2251760",
    "end": "2257040"
  },
  {
    "text": "then analyze the generators um we can multi-target",
    "start": "2257040",
    "end": "2262560"
  },
  {
    "text": "so actually multi-targeted we've talked standard 2.0 and dot-net",
    "start": "2262560",
    "end": "2268240"
  },
  {
    "text": "uh 6.0 because the pcl is annotated since was",
    "start": "2268240",
    "end": "2273920"
  },
  {
    "text": "fully almost fully annotated with dotnet five and with dotnet six i think it's fully annotated",
    "start": "2273920",
    "end": "2279760"
  },
  {
    "text": "um if not then it's super close so we have all the nullable annotations everywhere and",
    "start": "2279760",
    "end": "2286160"
  },
  {
    "text": "if you want to produce a package it must be dotnet 2.0 we can't have have multi-targeting with an analyzer",
    "start": "2286160",
    "end": "2292320"
  },
  {
    "text": "so we will set the where is it it's here",
    "start": "2292320",
    "end": "2298640"
  },
  {
    "text": "so we set the um we only pack",
    "start": "2298640",
    "end": "2304640"
  },
  {
    "text": "no one line sorry uh let me break this yes",
    "start": "2304640",
    "end": "2309839"
  },
  {
    "text": "so we only pack the dotted standard 2.0 into the package",
    "start": "2309839",
    "end": "2316640"
  },
  {
    "text": "and this is the location in the package where a analyzer must be",
    "start": "2316640",
    "end": "2322800"
  },
  {
    "text": "and now we can actually have if i go i definitely have somewhere question mark",
    "start": "2322800",
    "end": "2328000"
  },
  {
    "text": "no that's a value type where is for example yes here for",
    "start": "2328000",
    "end": "2333520"
  },
  {
    "text": "example i actually have a malleable reference type here and i get",
    "start": "2333520",
    "end": "2338960"
  },
  {
    "text": "these annotations because of multi-targeting with dotnet uh six but we've thought that but standard 2.0 is",
    "start": "2338960",
    "end": "2344720"
  },
  {
    "text": "not aware of this annotation so we would get we would get warnings so for docker standard 2.1 2.0 we have to suppress",
    "start": "2344720",
    "end": "2352960"
  },
  {
    "text": "these warnings and we can do this with this ms built property if it is total channel 2.0",
    "start": "2352960",
    "end": "2360160"
  },
  {
    "text": "we suppress no warn all the nullable warnings",
    "start": "2360160",
    "end": "2366599"
  },
  {
    "text": "and we may also want to use this package since",
    "start": "2373280",
    "end": "2378880"
  },
  {
    "text": "two of the nullable attributes actually emitted by the compiler but most of them",
    "start": "2378880",
    "end": "2385040"
  },
  {
    "text": "are not for example allow null or disallow null",
    "start": "2385040",
    "end": "2392480"
  },
  {
    "text": "and but we can get them either we can define them ourself or we use this",
    "start": "2392480",
    "end": "2397520"
  },
  {
    "text": "package which introduced them for platforms which do not support them yet we could also have a source generator",
    "start": "2397520",
    "end": "2404079"
  },
  {
    "text": "creating them if we have time i'll show it at the end now about versioning so",
    "start": "2404079",
    "end": "2411119"
  },
  {
    "text": "so far we checked out wasling 3.8 which is shipped with the net sdk with",
    "start": "2411119",
    "end": "2416480"
  },
  {
    "text": "the first dotnet uh sdk it's supported by visual studio 16.8 and",
    "start": "2416480",
    "end": "2422400"
  },
  {
    "text": "wider supports c-sharp nine since 2020.3",
    "start": "2422400",
    "end": "2428640"
  },
  {
    "text": "now in the next version 3.9 there was one feature added i really want to show this to you",
    "start": "2428640",
    "end": "2436319"
  },
  {
    "text": "it's here so here i now have a 3.9 uh source generator",
    "start": "2436319",
    "end": "2442240"
  },
  {
    "text": "and this generate then now has a method called register for post initialization",
    "start": "2442240",
    "end": "2450079"
  },
  {
    "text": "and in this post energization method which is here i can also add a source but",
    "start": "2450079",
    "end": "2456800"
  },
  {
    "text": "unconditionally at this time i don't have the syntax tree available so i can't really analyze the user code and",
    "start": "2456800",
    "end": "2463119"
  },
  {
    "text": "build something from that i can only add something unconditionally for",
    "start": "2463119",
    "end": "2468800"
  },
  {
    "text": "example a stop method for for for intellisense support um",
    "start": "2468800",
    "end": "2473920"
  },
  {
    "text": "and this now is actually visible to later generator phases",
    "start": "2473920",
    "end": "2478960"
  },
  {
    "text": "in this generator or the next generator i have some code down there we can",
    "start": "2478960",
    "end": "2484079"
  },
  {
    "text": "actually get the compilation get this type that we produced",
    "start": "2484079",
    "end": "2489599"
  },
  {
    "text": "post initialization dot was length 3 on the square 9 is exactly the type that we produce up here",
    "start": "2489599",
    "end": "2495040"
  },
  {
    "text": "and this won't be null so this is actually available",
    "start": "2495040",
    "end": "2500318"
  },
  {
    "text": "and the second change is we can have an enhanced um context receiver so this context",
    "start": "2502240",
    "end": "2509359"
  },
  {
    "text": "receiver has the node just as the other context receiver had but additionally the",
    "start": "2509359",
    "end": "2515680"
  },
  {
    "text": "semantic model in case you need in the syntax receiver already semantic model but",
    "start": "2515680",
    "end": "2521280"
  },
  {
    "text": "yeah we shouldn't we should never do too expensive stuff with this in the in the syntax receiver because it's called a",
    "start": "2521280",
    "end": "2526880"
  },
  {
    "text": "lot of times actually i'm not going to show you how often this is called so for this example",
    "start": "2526880",
    "end": "2532240"
  },
  {
    "text": "i have um 50 lines of code roughly if i go to the output of this 3.9",
    "start": "2532240",
    "end": "2539440"
  },
  {
    "text": "generator oops wrong file generated there it is",
    "start": "2539440",
    "end": "2546640"
  },
  {
    "text": "so we visited actually 386 notes and we will also see i can put this uh",
    "start": "2546640",
    "end": "2552960"
  },
  {
    "text": "down below and while i edit we will see this change",
    "start": "2552960",
    "end": "2559440"
  },
  {
    "text": "and more notes get added so really with almost every key press this is all executed",
    "start": "2559440",
    "end": "2566400"
  },
  {
    "text": "and if we would have a big solution many many projects a lot of",
    "start": "2566640",
    "end": "2571920"
  },
  {
    "text": "source code so a lot of nodes to put there what analyzer would be slow than visual studio or wider would also slow",
    "start": "2571920",
    "end": "2578640"
  },
  {
    "text": "down because we need to compile this a lot of a lot of code and this actually now performance problem that potentially",
    "start": "2578640",
    "end": "2587119"
  },
  {
    "text": "the three point uh 3.8 and above wesleyan",
    "start": "2587119",
    "end": "2592160"
  },
  {
    "text": "generators have so now we've gotten at six we got an addition we now have incremental source",
    "start": "2592160",
    "end": "2598960"
  },
  {
    "text": "generators which are bound to avoid this",
    "start": "2598960",
    "end": "2604839"
  },
  {
    "text": "problem so here i actually have this this project which produces",
    "start": "2604839",
    "end": "2610160"
  },
  {
    "text": "incremental and this generator does",
    "start": "2610160",
    "end": "2615839"
  },
  {
    "text": "create the external init generators so for example let me",
    "start": "2615839",
    "end": "2621839"
  },
  {
    "text": "just show the example this should make things clearer um",
    "start": "2621839",
    "end": "2627200"
  },
  {
    "text": "i have here a record and a record in the",
    "start": "2627200",
    "end": "2632560"
  },
  {
    "text": "emits in the in the primary constructor those are those are created as init only",
    "start": "2632560",
    "end": "2638160"
  },
  {
    "text": "properties but init only properties require the init keyword and the init keyword",
    "start": "2638160",
    "end": "2643920"
  },
  {
    "text": "requires there is external init type it must be available",
    "start": "2643920",
    "end": "2649359"
  },
  {
    "text": "so",
    "start": "2649359",
    "end": "2651519"
  },
  {
    "text": "when i when i step into this we see okay this type is actually from system.onetime so it's from the pcl",
    "start": "2654880",
    "end": "2660960"
  },
  {
    "text": "because 1.6 but if we switch to a lower.net version",
    "start": "2660960",
    "end": "2667119"
  },
  {
    "text": "for example i now switch to net core app 3.1",
    "start": "2667680",
    "end": "2672720"
  },
  {
    "text": "this was a c-sharp 8 and so the inner keyboard didn't exist this type didn't exist",
    "start": "2672720",
    "end": "2678960"
  },
  {
    "text": "although i have the latest language version i'm still using g-sharp 10 so records work but",
    "start": "2678960",
    "end": "2685520"
  },
  {
    "text": "this type wouldn't isn't there so we now should actually get a compiler error but we have a",
    "start": "2685520",
    "end": "2691920"
  },
  {
    "text": "generator in place which creates this and now we see i stepped into this this is not the one from the bcl in system.onetime this is",
    "start": "2691920",
    "end": "2699359"
  },
  {
    "text": "actually the type that that the generator emitted and this emitted by an incremental generator",
    "start": "2699359",
    "end": "2708559"
  },
  {
    "text": "so the programming model with incremental generalism are different there is only an",
    "start": "2709280",
    "end": "2715839"
  },
  {
    "text": "initialized method this syntax receiver is gone because this was most times the source of",
    "start": "2715839",
    "end": "2721599"
  },
  {
    "text": "performance issues and we do create",
    "start": "2721599",
    "end": "2727680"
  },
  {
    "text": "we can create the equivalent to the syntax receiver is we can create a",
    "start": "2728240",
    "end": "2734319"
  },
  {
    "text": "syntax provider which takes two methods first a predicate which is there to",
    "start": "2734319",
    "end": "2739839"
  },
  {
    "text": "filter candidates that we're interested in and the second one is a transform method",
    "start": "2739839",
    "end": "2745280"
  },
  {
    "text": "where we can transform it to a different type so if i jump to the to the predicate the",
    "start": "2745280",
    "end": "2752880"
  },
  {
    "text": "filter now this is very similar we get in the syntax node",
    "start": "2752880",
    "end": "2758079"
  },
  {
    "text": "this is now again called for every syntax node that we have but only if there are uh subsequent so with",
    "start": "2758079",
    "end": "2764880"
  },
  {
    "text": "incremental source changes we we build a pipeline and of um later steps in this pipeline are",
    "start": "2764880",
    "end": "2770640"
  },
  {
    "text": "only executed if if a step above actually produces a different output so if there is a change",
    "start": "2770640",
    "end": "2777760"
  },
  {
    "text": "then later steps will be executed if there is no change the cached output will be reused so we save",
    "start": "2777760",
    "end": "2785599"
  },
  {
    "text": "work and the experience in the editor is actually then getting better because microsoft actually had this issue with",
    "start": "2785599",
    "end": "2791839"
  },
  {
    "text": "uh 3.9 generators and above um with the syntax receiver",
    "start": "2791839",
    "end": "2797040"
  },
  {
    "text": "in the big pci solution the the experience wasn't wasn't good because there was so much going on and",
    "start": "2797040",
    "end": "2803359"
  },
  {
    "text": "typing felt sluggish so they now using incremental source generators in the wasteland 4.0",
    "start": "2803359",
    "end": "2811680"
  },
  {
    "text": "version and this is how the pipeline is is built",
    "start": "2811680",
    "end": "2820160"
  },
  {
    "text": "and once we have um created the syntax provider we now",
    "start": "2820240",
    "end": "2827200"
  },
  {
    "text": "return we get incremental value providers so this is not an incremental step so we now define the first step of",
    "start": "2827200",
    "end": "2833280"
  },
  {
    "text": "the pipeline and now we can do the next step for example in our case",
    "start": "2833280",
    "end": "2838880"
  },
  {
    "text": "now the next step is to combine these types so what are we actually",
    "start": "2838880",
    "end": "2844559"
  },
  {
    "text": "searching um we are searching for for for our um",
    "start": "2844559",
    "end": "2850000"
  },
  {
    "text": "declaration as a way searching for every for for record declarations every record type which actually has a parameter list",
    "start": "2850000",
    "end": "2858480"
  },
  {
    "text": "or has parameters in the parameter list which means there are definitely properties emitted which require the",
    "start": "2858480",
    "end": "2864720"
  },
  {
    "text": "init only keyword or if we explicitly use the init",
    "start": "2864720",
    "end": "2870800"
  },
  {
    "text": "keyword in code so we find all the all the accessor declaration syntax which is basically the thing in brackets",
    "start": "2870800",
    "end": "2877200"
  },
  {
    "text": "the property and we search for the init keyword and those those are then filtered out",
    "start": "2877200",
    "end": "2883760"
  },
  {
    "text": "and um and then uh transformed so in our case",
    "start": "2883760",
    "end": "2890800"
  },
  {
    "text": "we're not really interested in the type itself we just need to know if it's a rare so our transform doesn't really do",
    "start": "2890800",
    "end": "2896720"
  },
  {
    "text": "anything but we could here return uh something else as well maybe we would need an int so the pipeline now now gets",
    "start": "2896720",
    "end": "2905520"
  },
  {
    "text": "passed further down the later steps and now we have those uh those syntax nodes",
    "start": "2905680",
    "end": "2911920"
  },
  {
    "text": "and we can now collect them so this will now actually run this pipeline step and",
    "start": "2911920",
    "end": "2917440"
  },
  {
    "text": "combine it with the compilation provider because we also require the compilation",
    "start": "2917440",
    "end": "2923119"
  },
  {
    "text": "uh to check if this type is already there so we can ask the compilation hey is there already",
    "start": "2923119",
    "end": "2928800"
  },
  {
    "text": "is external init type because if there isn't i need to create it if there is i would",
    "start": "2928800",
    "end": "2934880"
  },
  {
    "text": "create a duplicate of the same namespace and this would cause a warning",
    "start": "2934880",
    "end": "2940240"
  },
  {
    "text": "so um we can check here do we actually have this type in the",
    "start": "2940240",
    "end": "2946559"
  },
  {
    "text": "compilation and if we have not then we actually add the source",
    "start": "2946559",
    "end": "2952400"
  },
  {
    "text": "and um with this pipelines we it we can really build a very complex uh pipelines",
    "start": "2952400",
    "end": "2958880"
  },
  {
    "text": "so this context has has many um",
    "start": "2958880",
    "end": "2965119"
  },
  {
    "text": "switches so we can get the compilation we can get the pass options the path options for",
    "start": "2965119",
    "end": "2970880"
  },
  {
    "text": "example contain which language version this project was was built in",
    "start": "2970880",
    "end": "2976160"
  },
  {
    "text": "we can get additional texts such as app settings or some text file if i add",
    "start": "2976160",
    "end": "2982480"
  },
  {
    "text": "a compilation to a text file we could build a transpiler so i can just pass in let's say visual basic code",
    "start": "2982480",
    "end": "2989440"
  },
  {
    "text": "as a text file in additional code and then produce c sharp code out of that or",
    "start": "2989440",
    "end": "2995520"
  },
  {
    "text": "yeah this is how we could build transpilers again the analyzer config options that",
    "start": "2995520",
    "end": "3000559"
  },
  {
    "text": "we can use to read from the global analyzers or also misbuild properties it's also possible",
    "start": "3000559",
    "end": "3006960"
  },
  {
    "text": "and metadata references there as well so this is all accessible via previous",
    "start": "3006960",
    "end": "3012400"
  },
  {
    "text": "generators as well but now we have this more pipelining syntax and if you have a look at this incremental values provider",
    "start": "3012400",
    "end": "3019359"
  },
  {
    "text": "they have they have link like um",
    "start": "3019359",
    "end": "3026160"
  },
  {
    "text": "extensions there's a select aware method where we can apply more filters or transforms to this",
    "start": "3026160",
    "end": "3033520"
  },
  {
    "text": "pipeline but this is it isn't linked actually it's it's a separate",
    "start": "3033520",
    "end": "3038960"
  },
  {
    "text": "extensions type it's just link like",
    "start": "3038960",
    "end": "3043200"
  },
  {
    "text": "and with incremental source generators we can now speed up the performance",
    "start": "3046000",
    "end": "3051839"
  },
  {
    "text": "actually if we do if we do a if it's only a single compiler.net build uh then the experience is that there is",
    "start": "3051839",
    "end": "3058720"
  },
  {
    "text": "not really a difference but if we edit live in for example visual studio which",
    "start": "3058720",
    "end": "3063760"
  },
  {
    "text": "which compiles all the time when we when we type this could speed up",
    "start": "3063760",
    "end": "3069520"
  },
  {
    "text": "the experience",
    "start": "3069520",
    "end": "3072240"
  },
  {
    "text": "and yeah so those incremental source changes they are available since wasn't 4.0 but what we need to be",
    "start": "3074640",
    "end": "3080480"
  },
  {
    "text": "careful they are only supported in dotnet 6 sdk so if i would",
    "start": "3080480",
    "end": "3086319"
  },
  {
    "text": "have a generator which requires version 4 but would be consumed from a",
    "start": "3086319",
    "end": "3092960"
  },
  {
    "text": "project which uses the net 5 sdk it wouldn't work the generator wouldn't work because those types are unknown",
    "start": "3092960",
    "end": "3099760"
  },
  {
    "text": "so again we need to find a bit of a balance we could say that well",
    "start": "3099760",
    "end": "3105040"
  },
  {
    "text": "i think that the net sdk pretty much goes um i think",
    "start": "3105040",
    "end": "3110960"
  },
  {
    "text": "in may out of out of support so maybe go to the",
    "start": "3110960",
    "end": "3117599"
  },
  {
    "text": "to the viewers immediately if you require the performance booster",
    "start": "3117599",
    "end": "3124359"
  },
  {
    "text": "yes we talked about performance one thing i will show is how does this",
    "start": "3124880",
    "end": "3131280"
  },
  {
    "text": "look like in nougat",
    "start": "3131280",
    "end": "3135480"
  },
  {
    "text": "um [Music] so we will have a",
    "start": "3140800",
    "end": "3146880"
  },
  {
    "text": "we can open this here and look at patch explorer so nougat package is basically just a zip file in a special specific",
    "start": "3146880",
    "end": "3153040"
  },
  {
    "text": "format and",
    "start": "3153040",
    "end": "3158240"
  },
  {
    "text": "we see this is the folder structure it must be here it must be in analyzers.net",
    "start": "3158240",
    "end": "3164319"
  },
  {
    "text": "cs for the sharp and there lies our analyzer",
    "start": "3164319",
    "end": "3169599"
  },
  {
    "text": "oh yes and we also want to",
    "start": "3171200",
    "end": "3176559"
  },
  {
    "text": "set development dependencies to true for this package so that by default [Music]",
    "start": "3176559",
    "end": "3182480"
  },
  {
    "text": "we get the private assets tag so that we don't want our analyzers",
    "start": "3182480",
    "end": "3188720"
  },
  {
    "text": "or our generators in that case to transitively so that the consumer is transitively",
    "start": "3188720",
    "end": "3194640"
  },
  {
    "text": "depending on those uh we went through plenty of examples i",
    "start": "3194640",
    "end": "3201200"
  },
  {
    "text": "listed here for interested the slides is all online um some the awesome was then has like a",
    "start": "3201200",
    "end": "3207440"
  },
  {
    "text": "bunch of uh generators for example there's also the community toolkit which um has a",
    "start": "3207440",
    "end": "3215520"
  },
  {
    "text": "i notified property changed uh generator it's",
    "start": "3215520",
    "end": "3220720"
  },
  {
    "text": "somewhere in here so we don't need to manually implement our",
    "start": "3220720",
    "end": "3226079"
  },
  {
    "text": "uh i not changed all the time if you would like to know more i listed",
    "start": "3226079",
    "end": "3231359"
  },
  {
    "text": "here uh some videos of other speakers about source generators",
    "start": "3231359",
    "end": "3237520"
  },
  {
    "text": "and also some links i would like to highlight this one since it connects a little bit to the keynote",
    "start": "3237520",
    "end": "3243680"
  },
  {
    "text": "there is an article about supply chain attacks how",
    "start": "3243680",
    "end": "3249599"
  },
  {
    "text": "social readers could be used maliciously now if we would have a malicious nougat",
    "start": "3249599",
    "end": "3256079"
  },
  {
    "text": "package it can only under equals only one bad code but a generator could analyze my source code",
    "start": "3256079",
    "end": "3263359"
  },
  {
    "text": "so it has full access to the user source code maybe extract secrets or something",
    "start": "3263359",
    "end": "3268400"
  },
  {
    "text": "else from there which may not be actually admitted to the compilation because it's additional files which i",
    "start": "3268400",
    "end": "3273599"
  },
  {
    "text": "ignored so this also opens more yeah it's a bit of a danger so",
    "start": "3273599",
    "end": "3281040"
  },
  {
    "text": "just as with any nougat package we should only consume trusted sources",
    "start": "3281040",
    "end": "3286880"
  },
  {
    "text": "and with that i would like to know if i have opened up some questions or",
    "start": "3289520",
    "end": "3296079"
  },
  {
    "text": "left some questions unanswered",
    "start": "3296079",
    "end": "3299960"
  },
  {
    "text": "are there any reasons not to always use the incremental generator or feels like it's just a more performant",
    "start": "3311119",
    "end": "3317839"
  },
  {
    "text": "version or did i misunderstand so um if we should if understand",
    "start": "3317839",
    "end": "3323200"
  },
  {
    "text": "correctly um if we if we actually should only use the the incremental source generator and not the regular uh source",
    "start": "3323200",
    "end": "3329440"
  },
  {
    "text": "generator um i i found it more easy i i find the the",
    "start": "3329440",
    "end": "3336559"
  },
  {
    "text": "regular generators more easy um to to understand i still haven't fully understood the source or the",
    "start": "3336559",
    "end": "3343119"
  },
  {
    "text": "incremental swatches that are really new so perhaps as a starting point um the regular",
    "start": "3343119",
    "end": "3348480"
  },
  {
    "text": "other the three point eight was three point nine social just maybe a little bit more easier and when you when you",
    "start": "3348480",
    "end": "3354799"
  },
  {
    "text": "understand the model in the system then for production for production project which may be consumed in a big project",
    "start": "3354799",
    "end": "3360880"
  },
  {
    "text": "then incremental source channels would be would be the way to go when you can when you can safely assume that",
    "start": "3360880",
    "end": "3367280"
  },
  {
    "text": "everybody will be having everybody who wants to consume this will have the.6 sdk",
    "start": "3367280",
    "end": "3373960"
  },
  {
    "text": "external text files",
    "start": "3382480",
    "end": "3386280"
  },
  {
    "text": "so how could we analyze in our generator any text file",
    "start": "3394160",
    "end": "3399520"
  },
  {
    "text": "and have it have it produce to the code so we could",
    "start": "3399520",
    "end": "3406160"
  },
  {
    "text": "let me jump to the",
    "start": "3406160",
    "end": "3409680"
  },
  {
    "text": "so i just add any file",
    "start": "3414240",
    "end": "3422000"
  },
  {
    "text": "so i of course want to make it a text file",
    "start": "3430160",
    "end": "3434559"
  },
  {
    "text": "we need to make it part of the compilation just only only the dot net sdk by default",
    "start": "3439040",
    "end": "3444319"
  },
  {
    "text": "picks up c sharp files we need to make the compiler aware of it",
    "start": "3444319",
    "end": "3450079"
  },
  {
    "text": "so",
    "start": "3450079",
    "end": "3452319"
  },
  {
    "text": "i'm actually not entirely sure now i believe it's is it content believe it's content okay",
    "start": "3455440",
    "end": "3462079"
  },
  {
    "text": "not entirely sure but we need to set some some build action so that it gets picked up and then it would appear for example",
    "start": "3462079",
    "end": "3468720"
  },
  {
    "text": "either in the incremental source generator it would appear in the additional texts",
    "start": "3468720",
    "end": "3475119"
  },
  {
    "text": "provider so and for the additional text provider",
    "start": "3475119",
    "end": "3480319"
  },
  {
    "text": "we basically have source text so the sort of with c sharp code we get",
    "start": "3481200",
    "end": "3488799"
  },
  {
    "text": "syntax nodes but with with regular text we get a source text and this is basically a",
    "start": "3488799",
    "end": "3494799"
  },
  {
    "text": "wrapper around around a string so this is how we can access a string",
    "start": "3494799",
    "end": "3500240"
  },
  {
    "text": "with more information and then we can basically pass this string",
    "start": "3500240",
    "end": "3506160"
  },
  {
    "text": "manually and produce whatever sharp code that we like",
    "start": "3506160",
    "end": "3511319"
  },
  {
    "text": "[Music] uh no no you have to build it yourself but you",
    "start": "3519120",
    "end": "3526640"
  },
  {
    "text": "could build your own transparent nodes i i believe there is uh in involved i'm",
    "start": "3526640",
    "end": "3533200"
  },
  {
    "text": "sure that somebody already built some some out of some specific text format a",
    "start": "3533200",
    "end": "3538400"
  },
  {
    "text": "a c source generator but i'm currently not aware of some but",
    "start": "3538400",
    "end": "3543839"
  },
  {
    "text": "there is no built-in there is nothing there already only only with c sharp you get this",
    "start": "3543839",
    "end": "3549359"
  },
  {
    "text": "get this get the syntax notes",
    "start": "3549359",
    "end": "3553240"
  },
  {
    "text": "uh do i miss another question or oh yes",
    "start": "3559440",
    "end": "3564520"
  },
  {
    "text": "um which use cases",
    "start": "3576880",
    "end": "3581558"
  },
  {
    "text": "um so when i when i have some when i have implementations when i know when i when i know in",
    "start": "3587280",
    "end": "3593119"
  },
  {
    "text": "advance what implementation would look like then the source generator could then i could automate this via source generator",
    "start": "3593119",
    "end": "3599440"
  },
  {
    "text": "so i didn't need to manually implement it all the time which is error-prone or if i",
    "start": "3599440",
    "end": "3605440"
  },
  {
    "text": "if i if i have some code with with reflection i cannot eliminate every reflection code but it's definitely",
    "start": "3605440",
    "end": "3611599"
  },
  {
    "text": "subject to maybe replaceable by a source generator for example i could if i build my own cli",
    "start": "3611599",
    "end": "3618880"
  },
  {
    "text": "command library which which searches for types of a certain command type",
    "start": "3618880",
    "end": "3624000"
  },
  {
    "text": "um usually we'll do this via reflection find all those types in the assembly which which",
    "start": "3624000",
    "end": "3629839"
  },
  {
    "text": "are deriving from from that type or are assignable to this type but",
    "start": "3629839",
    "end": "3635440"
  },
  {
    "text": "with a source generator we could analyze it at compile time and then directly link it up in source so we don't need",
    "start": "3635440",
    "end": "3642079"
  },
  {
    "text": "the reflection part so okay compilation now is a little bit slower but one time is significantly faster",
    "start": "3642079",
    "end": "3649200"
  },
  {
    "text": "did i did i answer the question if not then perhaps",
    "start": "3649839",
    "end": "3655440"
  },
  {
    "text": "we can talk later or via",
    "start": "3655440",
    "end": "3660880"
  },
  {
    "text": "twitter and i believe we are on time so",
    "start": "3661280",
    "end": "3666480"
  },
  {
    "text": "i want to thank you everybody for coming i hope i you learned i was able to to to",
    "start": "3666480",
    "end": "3673040"
  },
  {
    "text": "to share my knowledges too syntac and thank you for staying awhile and",
    "start": "3673040",
    "end": "3678319"
  },
  {
    "text": "listening have a great conference",
    "start": "3678319",
    "end": "3682599"
  },
  {
    "text": "you",
    "start": "3695920",
    "end": "3698000"
  }
]