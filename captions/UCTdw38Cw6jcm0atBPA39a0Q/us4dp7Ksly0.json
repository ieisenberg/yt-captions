[
  {
    "text": "hello everyone everyone can hear me at the moment hello uh sues thomas uh who we got wendy",
    "start": "160",
    "end": "7200"
  },
  {
    "text": "torreira uh great to have you here and marcel and lars and lars and henrik and anders and alexander",
    "start": "7200",
    "end": "15519"
  },
  {
    "text": "and henrietta who's the host and uh and the others who i miss thank you so much for coming along to my talk today i hope",
    "start": "15519",
    "end": "21279"
  },
  {
    "text": "you can all hear me okay uh if there's any technical problems along the way i guess just dive in and get them fixed as soon",
    "start": "21279",
    "end": "28320"
  },
  {
    "text": "as you can and um just to make sure this goes as well as possible uh welcome back to ndc oslo",
    "start": "28320",
    "end": "36719"
  },
  {
    "text": "it's one of my fav most favorite conferences in the world i've had such amazing times in in oslo over the",
    "start": "36719",
    "end": "43600"
  },
  {
    "text": "last uh few years uh last year was a huge highlight getting to play with dylan beatty and the linebreakers on stage at",
    "start": "43600",
    "end": "49840"
  },
  {
    "text": "the party some of you might have been there it was a great time but also be honest there and uh it's wonderful that the",
    "start": "49840",
    "end": "56399"
  },
  {
    "text": "conference has continued in these difficult times through to this situation and fantastic that you've all come along",
    "start": "56399",
    "end": "62879"
  },
  {
    "text": "and attended and you come along to my talk today and i'm really very very happy that you're doing that",
    "start": "62879",
    "end": "68880"
  },
  {
    "text": "um so and i look forward to all being back together in person hopefully",
    "start": "68880",
    "end": "74560"
  },
  {
    "text": "uh this time next year in in oslo uh so uh many of you um",
    "start": "74560",
    "end": "82400"
  },
  {
    "text": "will know my background i am a researcher at microsoft research and i am the designer of the f sharp",
    "start": "82400",
    "end": "88880"
  },
  {
    "text": "programming language and i have also worked i guess the consistent theme in",
    "start": "88880",
    "end": "93920"
  },
  {
    "text": "my work in the dot net and programming languages space has been to expand the role",
    "start": "93920",
    "end": "101439"
  },
  {
    "text": "of functional programming techniques and functional programming languages uh",
    "start": "101439",
    "end": "109119"
  },
  {
    "text": "to to let these wonderful powerful ideas become to spread",
    "start": "109119",
    "end": "115920"
  },
  {
    "text": "and to become a broader application and uh to help",
    "start": "115920",
    "end": "123360"
  },
  {
    "text": "to help normalize them and disseminate them into broader programming experience and i think we can see the results of that at",
    "start": "123680",
    "end": "130399"
  },
  {
    "text": "ndc oslo we have talks like functional programming in c sharp uh we we have a lot of talks on",
    "start": "130399",
    "end": "137280"
  },
  {
    "text": "like f sharp or functional techniques and so on and you can see it all the way through",
    "start": "137280",
    "end": "143040"
  },
  {
    "text": "generics and other things these things are now spreading and becoming a totally normal part of the programming landscape",
    "start": "143040",
    "end": "148560"
  },
  {
    "text": "and this is a a wonderful thing but because that is my work i tend to",
    "start": "148560",
    "end": "154000"
  },
  {
    "text": "drill down to quite fundamental issues in programming things are",
    "start": "154000",
    "end": "161040"
  },
  {
    "text": "which go right to the core of how we we deal with programming right down to the programming language level",
    "start": "161040",
    "end": "167360"
  },
  {
    "text": "and one of those topics is the one i'm going to be talking about today and that's about how functional",
    "start": "167360",
    "end": "174640"
  },
  {
    "text": "programming interacts with change and adaption with increment with incremental",
    "start": "174640",
    "end": "181760"
  },
  {
    "text": "computation and the context i'm going to be talking about then is in the context of high performance functional",
    "start": "181760",
    "end": "187599"
  },
  {
    "text": "uis and a lot of the work i'm going to talk about today is actually based on this incredible",
    "start": "187599",
    "end": "193519"
  },
  {
    "text": "f-sharp initiative called the aardvark platform and you can find out all about aardvark",
    "start": "193519",
    "end": "199519"
  },
  {
    "text": "i'll just bring up some of the uh web pages here we go the aardvark platform here at",
    "start": "199519",
    "end": "205560"
  },
  {
    "text": "advarkians.com you can get it started you can get touch and you can join their research community and these are awesome",
    "start": "205560",
    "end": "210879"
  },
  {
    "text": "libraries for interactive high performance visual computing and graphics applications and they're nearly all done in f sharp they're often",
    "start": "210879",
    "end": "218000"
  },
  {
    "text": "c sharp uh components or apis in there as well and um it's you can you can check out",
    "start": "218000",
    "end": "225200"
  },
  {
    "text": "who's using it the community the components and so on and i really do encourage you if you interested in this space",
    "start": "225200",
    "end": "233040"
  },
  {
    "text": "because it's really mind-blowing what they are doing there with dot-net and with f-sharp and get involved in in in that",
    "start": "233519",
    "end": "240400"
  },
  {
    "text": "initiative it's a big thank you to thomas ortner kyo kaza harold steinlechner and uh other people",
    "start": "240400",
    "end": "248799"
  },
  {
    "text": "other advice contributors uh the way someone i mentioned at the end as well uh",
    "start": "248799",
    "end": "256479"
  },
  {
    "text": "right okay so what's the situation well okay there's two aspects to this situation one is the one of sort of high",
    "start": "256479",
    "end": "261519"
  },
  {
    "text": "performance ui that i was talking about there's another situation which is about this",
    "start": "261519",
    "end": "266560"
  },
  {
    "text": "theme of functional programming expanding its range of application in ways that we didn't initially expect",
    "start": "266560",
    "end": "272800"
  },
  {
    "text": "when we started things like f sharp but we now understand just that functional programming is even more",
    "start": "272800",
    "end": "277840"
  },
  {
    "text": "powerful than we ever thought it was and even more applicable to a",
    "start": "277840",
    "end": "282880"
  },
  {
    "text": "whole range of uh of programming problems so the world of ui is developing i've used this slide",
    "start": "282880",
    "end": "288720"
  },
  {
    "text": "last year in my talk at ndc oslo if you were here uh and the the slide is between these",
    "start": "288720",
    "end": "294160"
  },
  {
    "text": "two views on designing user interfaces and and and they're roughly two categories of user interface we're talking about",
    "start": "294160",
    "end": "300320"
  },
  {
    "text": "not that i've got the screen but there's a high performance graphics kind of applications i was talking about",
    "start": "300320",
    "end": "305520"
  },
  {
    "text": "just now now also these information rich application uh which is sort of line of business",
    "start": "305520",
    "end": "310560"
  },
  {
    "text": "applications uh and so this is about how you design the live business applications generally",
    "start": "310560",
    "end": "316000"
  },
  {
    "text": "you have these mvvm components uh mvvm approach over on the left and we have this mvu",
    "start": "316000",
    "end": "321759"
  },
  {
    "text": "approach over on the right and uh mvvm is sort of the standard in the",
    "start": "321759",
    "end": "326960"
  },
  {
    "text": "industry today it's how the underlying components work for things like wpf and uwp and zabra and forms and over in the",
    "start": "326960",
    "end": "333600"
  },
  {
    "text": "right you've got these new quite trendy quite interesting ways of doing things which is based on",
    "start": "333600",
    "end": "338880"
  },
  {
    "text": "this model view of that and they're very different architectures over on the over on the left you generally use object oriented",
    "start": "338880",
    "end": "344479"
  },
  {
    "text": "programming and use mutable programming models and you often do this view in something like xaml",
    "start": "344479",
    "end": "350240"
  },
  {
    "text": "okay you've probably all done this kind of work over on the right and overall let me just close this down",
    "start": "350240",
    "end": "356000"
  },
  {
    "text": "over on the right we have uh generally functional programming approaches we have",
    "start": "356000",
    "end": "361120"
  },
  {
    "text": "immutable models underneath quite often and the view is often done in the same",
    "start": "361120",
    "end": "366639"
  },
  {
    "text": "language or a mix between some markup files and the the um the view might be done in",
    "start": "366639",
    "end": "373199"
  },
  {
    "text": "a dsl in f sharp or in another programming language such as elm",
    "start": "373199",
    "end": "379039"
  },
  {
    "text": "okay so okay just to compare how information",
    "start": "379039",
    "end": "384800"
  },
  {
    "text": "flows in in these two systems over on the left each of these components are mutable so",
    "start": "384800",
    "end": "390240"
  },
  {
    "text": "there's actual state change going on in each of them and that it's very intrinsic to the",
    "start": "390240",
    "end": "395840"
  },
  {
    "text": "design it sort of influences the entire design of the each of these components you have a view",
    "start": "395840",
    "end": "401360"
  },
  {
    "text": "here where things are changing and you have data binding messages going back and forth to the new model and then you have a",
    "start": "401360",
    "end": "407280"
  },
  {
    "text": "two-way binding here between the model and the view model when the model is perceived to be where the business logic",
    "start": "407280",
    "end": "413680"
  },
  {
    "text": "and data is so we're all familiar with that architecture and the model on the right the information",
    "start": "413680",
    "end": "418960"
  },
  {
    "text": "flow is very different and it's the key thing key phrase to remember is univ unidirectional in",
    "start": "418960",
    "end": "427039"
  },
  {
    "text": "data flow so if information flows really in one direction around the loop so we start with the",
    "start": "427039",
    "end": "433680"
  },
  {
    "text": "model and the model is rendered by a function into the view and the view uh receives some messages or generates",
    "start": "433680",
    "end": "440880"
  },
  {
    "text": "some messages in response to user interactions or from outside events those get processed into an update it",
    "start": "440880",
    "end": "446479"
  },
  {
    "text": "generates a new model and you re-render the view and that's the basic information loop that's going on over on",
    "start": "446479",
    "end": "452800"
  },
  {
    "text": "the right so i've been through this one and this is another view the elm architecture",
    "start": "452800",
    "end": "457919"
  },
  {
    "text": "of the same thing you'll just see these round and round unity information flow",
    "start": "457919",
    "end": "463360"
  },
  {
    "text": "diagrams in all the basic descriptions of the elm architecture or anything involving unidirectional data flow",
    "start": "463360",
    "end": "469919"
  },
  {
    "text": "and just to say that this idea that we move away from objects of mutation over in the",
    "start": "469919",
    "end": "476560"
  },
  {
    "text": "mvvm world or at least we have might have that underneath but on top we build",
    "start": "476560",
    "end": "482160"
  },
  {
    "text": "something that uses unidirectional data flow these this idea of uni directional data",
    "start": "482160",
    "end": "488080"
  },
  {
    "text": "flow in all its variations is becoming almost ubiquitous in the world of inter interface",
    "start": "488080",
    "end": "493520"
  },
  {
    "text": "development and there are quite a few different variations on this and this is in uh and this is quite key to",
    "start": "493520",
    "end": "500319"
  },
  {
    "text": "understand people use the term mvu generally using it for uh the the elm version of this where you",
    "start": "500319",
    "end": "507360"
  },
  {
    "text": "actually have an immutable model and you and you have these pure a very pure approach to this",
    "start": "507360",
    "end": "512959"
  },
  {
    "text": "but if you look at systems like swift ui or you look at maui uh or you look at fabulous from in the",
    "start": "512959",
    "end": "519039"
  },
  {
    "text": "sharp world you even look at react it has elements of this in it and the and",
    "start": "519039",
    "end": "524159"
  },
  {
    "text": "this way of doing user interface programming is becoming more or less ubiquitous and i actually talked about these ideas last",
    "start": "524159",
    "end": "530480"
  },
  {
    "text": "year at ndc and these are now strongly contributing to the future of dotneta.net ui",
    "start": "530480",
    "end": "535839"
  },
  {
    "text": "in the context of the maui project which was recent the maori initiative it's really the future of multi-platform ui",
    "start": "535839",
    "end": "542959"
  },
  {
    "text": "in the dot-net stack uh for at least it's one it's it's microsoft's uh sort of big new",
    "start": "542959",
    "end": "549920"
  },
  {
    "text": "initiative in this area and you can see from the blog post about maui that they are enabling developers to",
    "start": "549920",
    "end": "556800"
  },
  {
    "text": "write fluent c sharp and you will be able to do it in fsharp as well to uh ui to implement the model view mvu",
    "start": "556800",
    "end": "563600"
  },
  {
    "text": "pattern or a variation on that pattern and it uses one way flow of data and",
    "start": "563600",
    "end": "568800"
  },
  {
    "text": "state management and a code first development experience those are the key parts of mmvu right so that's the situation but",
    "start": "568800",
    "end": "577040"
  },
  {
    "text": "the big the question i want to ask really is is functional relevant to high performance ui because there are",
    "start": "577040",
    "end": "584720"
  },
  {
    "text": "key trade-offs in this in this mvu approach and what do we mean by high performance",
    "start": "584720",
    "end": "590160"
  },
  {
    "text": "ui and this is actually a a an application that is using uh",
    "start": "590160",
    "end": "595440"
  },
  {
    "text": "the techniques the adapt functional adaptive data techniques i'll be talking about today to do",
    "start": "595440",
    "end": "600720"
  },
  {
    "text": "high performance functional ui and it's uh it's a visualizer due it's a",
    "start": "600720",
    "end": "606560"
  },
  {
    "text": "great it was one of those wonderful applications of uh of coding for for you know it's all to do with um",
    "start": "606560",
    "end": "613040"
  },
  {
    "text": "uh uh the reconstructing the martian surface",
    "start": "613040",
    "end": "618880"
  },
  {
    "text": "images based on the data that's coming from the rovers on the planet uh and um",
    "start": "618880",
    "end": "626399"
  },
  {
    "text": "you can find out a lot more about this application in this wonderful talk which i will link at the end of the talk",
    "start": "626399",
    "end": "633120"
  },
  {
    "text": "this is i almost i almost canceled my talk and just decided to play thomas ortner's talk",
    "start": "633120",
    "end": "638720"
  },
  {
    "text": "from gpu day 2019 the future of computing graphics and data analysis",
    "start": "638720",
    "end": "643920"
  },
  {
    "text": "and in this talk uh thomas uh gives a wonderful overview let me just",
    "start": "643920",
    "end": "650320"
  },
  {
    "text": "maximize this a wonderful overview of how he's using these techniques for functional programming for high",
    "start": "650320",
    "end": "656880"
  },
  {
    "text": "performance data and ui and let me just skip through some of this uh and you can see some of the",
    "start": "656880",
    "end": "662800"
  },
  {
    "text": "applications they're using it using there and what and one of the key things in this area",
    "start": "662800",
    "end": "668399"
  },
  {
    "text": "is you're they're reaching for functional programming for those classical reasons that",
    "start": "668399",
    "end": "674800"
  },
  {
    "text": "you want to reduce your time to market and you want to be able to crank out high quality prototypes on a low budget",
    "start": "674800",
    "end": "681760"
  },
  {
    "text": "so they're looking for that productivity of functional programming in this in this extremely complex and",
    "start": "681760",
    "end": "689360"
  },
  {
    "text": "technically challenging domain okay so that's",
    "start": "689360",
    "end": "694399"
  },
  {
    "text": "our context here and that's the video talk you can go and watch okay so let's go back to",
    "start": "694399",
    "end": "702720"
  },
  {
    "text": "basics now we've set the context for where the areas in which we're trying to apply",
    "start": "702720",
    "end": "708000"
  },
  {
    "text": "functional programming we want it in those information rich apps but we want extreme versions of those",
    "start": "708000",
    "end": "714720"
  },
  {
    "text": "where uh you have incredible amounts of information in the application and you have high",
    "start": "714720",
    "end": "721519"
  },
  {
    "text": "rates of change in the application okay so uh just to get back to basics",
    "start": "721519",
    "end": "729440"
  },
  {
    "text": "here's a typical structure of an mvu app we have the model from which a view is generated up here",
    "start": "729440",
    "end": "735600"
  },
  {
    "text": "we have the messages which calls updates to the model we have the initial state of the for the model the initial model",
    "start": "735600",
    "end": "742079"
  },
  {
    "text": "and we have the logic which updates the model and that's in a sense all the business logic and part of the wonder of mvu is that",
    "start": "742079",
    "end": "748480"
  },
  {
    "text": "you get to uh you get to unit test these parts of your code separately you can test all",
    "start": "748480",
    "end": "754000"
  },
  {
    "text": "your business logic through this very and this is all straight up pure functional programming there might be some",
    "start": "754000",
    "end": "759440"
  },
  {
    "text": "interaction with some components on the uh the outside some database components and the likes and has some connection",
    "start": "759440",
    "end": "764560"
  },
  {
    "text": "handles they will typically be stored in the model as well okay and then you have the key thing",
    "start": "764560",
    "end": "771600"
  },
  {
    "text": "which is the computation to construct the view and uh and here we",
    "start": "771600",
    "end": "777040"
  },
  {
    "text": "have say so if you're doing this then generate a label otherwise generate a button and so on and in in more detail",
    "start": "777040",
    "end": "783839"
  },
  {
    "text": "depending on the dsl you're using to express your view uh it will it will look like this we",
    "start": "783839",
    "end": "790079"
  },
  {
    "text": "have model we have messages is the button pressed or not the initial model",
    "start": "790079",
    "end": "795120"
  },
  {
    "text": "the button's not pressed we update the model and then we have the view which can be the view which is a dynamic",
    "start": "795120",
    "end": "801519"
  },
  {
    "text": "view it depends on whether the model is pressed so the entire view will change the entire dom",
    "start": "801519",
    "end": "807279"
  },
  {
    "text": "tree that we have ultimately will have to change based on that button press and the",
    "start": "807279",
    "end": "812560"
  },
  {
    "text": "entire the entire view gets brought down and an entire different view might get brought up as each message is",
    "start": "812560",
    "end": "819040"
  },
  {
    "text": "processed and the beauty about this as we said is it's all dysfunctional programming uh the ui",
    "start": "819040",
    "end": "825120"
  },
  {
    "text": "becomes calculation and the wonderful thing when you think of functional programming it's not all these abstract",
    "start": "825120",
    "end": "830160"
  },
  {
    "text": "ideas and everything it's actually really something we do all the way through school as we write down",
    "start": "830160",
    "end": "835760"
  },
  {
    "text": "calculation after calculation it's algebra it's just information and calculation rather than",
    "start": "835760",
    "end": "842639"
  },
  {
    "text": "state and mutation and so the whole ui just becomes its calculation and because",
    "start": "842639",
    "end": "848160"
  },
  {
    "text": "because the information flow is unidirectional then then you can always track down",
    "start": "848160",
    "end": "855040"
  },
  {
    "text": "where information is being lost where it's been gained where bugs are being introduced and you can break it apart",
    "start": "855040",
    "end": "862079"
  },
  {
    "text": "each bit you can break apart and unit tests separately",
    "start": "862079",
    "end": "867199"
  },
  {
    "text": "and so and the views are recomputed and then a shadow dom is",
    "start": "867199",
    "end": "873519"
  },
  {
    "text": "produced it does a diff between the shadow and the actual dom and apply some changes to the actual dom",
    "start": "873519",
    "end": "879680"
  },
  {
    "text": "okay that's beautiful but well we've got an issue here and this is really at the",
    "start": "879680",
    "end": "885199"
  },
  {
    "text": "heart of what what i've really been boiling getting towards because are you serious",
    "start": "885199",
    "end": "891760"
  },
  {
    "text": "that we are going to use functional programming for rapid update data intense",
    "start": "891760",
    "end": "898399"
  },
  {
    "text": "interactive ui and you look at that you need to say you can't possibly",
    "start": "898399",
    "end": "904000"
  },
  {
    "text": "be serious that that that this approach which we've just talked about is going",
    "start": "904000",
    "end": "909440"
  },
  {
    "text": "to be suitable for high performance ui because you're recalculating the view",
    "start": "909440",
    "end": "915120"
  },
  {
    "text": "as you uh even if you are recalculating a shadow view then",
    "start": "915120",
    "end": "922880"
  },
  {
    "text": "and doing a diff you still have to do that stiffing process it's still computationally",
    "start": "922880",
    "end": "928720"
  },
  {
    "text": "intensive in a sense on each update to work out what needs",
    "start": "928720",
    "end": "934480"
  },
  {
    "text": "to change you might it's very declarative but working out the incremental version",
    "start": "934480",
    "end": "941440"
  },
  {
    "text": "of that it's hard but what if we change a question so that so so the cat we see our cat and we",
    "start": "941440",
    "end": "948880"
  },
  {
    "text": "everything and the question is what if we're doing incremental functional programming",
    "start": "948880",
    "end": "954160"
  },
  {
    "text": "for rapid update data index incremental interactive ui okay so if we insert that",
    "start": "954160",
    "end": "960800"
  },
  {
    "text": "keyword incremental then we uh we begin to consider that we may perhaps",
    "start": "960800",
    "end": "966800"
  },
  {
    "text": "we are talking so metal and functional what even is that and that is really at the",
    "start": "966800",
    "end": "973199"
  },
  {
    "text": "heart of of the talk today i've set the scene and i've got the question",
    "start": "973199",
    "end": "978880"
  },
  {
    "text": "uh what is incremental and functional when it really comes down to it and just stop and think to yourself uh",
    "start": "978880",
    "end": "986399"
  },
  {
    "text": "take take a take take a moment to stop and think what word associations if someone comes",
    "start": "986399",
    "end": "992639"
  },
  {
    "text": "along to your customer comes along to you and says hey we're going to do we need an incremental xyz",
    "start": "992639",
    "end": "999519"
  },
  {
    "text": "uh we need to you know process process new information as it comes in and changes and and you might be if you're",
    "start": "999519",
    "end": "1005920"
  },
  {
    "text": "functionally trained you might be thinking event sourcing and that's good that's that's very related to the techniques",
    "start": "1005920",
    "end": "1011759"
  },
  {
    "text": "i'm thinking about today but if you're object-oriented trained you will immediately be starting to think about okay i'm going to have",
    "start": "1011759",
    "end": "1017920"
  },
  {
    "text": "objects i'm going to have mutable state i'm going to be making incremental updates i've got to be writing lots of code to maintain that incremental state",
    "start": "1017920",
    "end": "1024079"
  },
  {
    "text": "along the way and so if you do you might also be thinking about okay we're going to have",
    "start": "1024079",
    "end": "1029520"
  },
  {
    "text": "a dependency graph we're going to be doing asynchronous update to that dependency graph we're probably going to get ourselves into all",
    "start": "1029520",
    "end": "1035918"
  },
  {
    "text": "sorts of currency problems and so on and that's for me it's interesting to do i i i went and",
    "start": "1035919",
    "end": "1042558"
  },
  {
    "text": "did i made a word graph to myself copied out some words and made this nice graphic entirely not based on any information uh",
    "start": "1042559",
    "end": "1050400"
  },
  {
    "text": "except what's in my head about what it makes me think when i hear the word incremental i think update nodes",
    "start": "1050400",
    "end": "1055919"
  },
  {
    "text": "dependency graphs i think mutation a static probably a static graph if i suddenly think oh my god it's going",
    "start": "1055919",
    "end": "1062160"
  },
  {
    "text": "to be a dynamic graph and incrementation this is going to blow my mind okay so it it is a complex space that",
    "start": "1062160",
    "end": "1068960"
  },
  {
    "text": "people that challenge people's uh challenge people and i've got a little secret for the functional",
    "start": "1068960",
    "end": "1074799"
  },
  {
    "text": "programmers as you sit around your team and think where are where are the mutable objects",
    "start": "1074799",
    "end": "1081840"
  },
  {
    "text": "and where is the kind of static thinking where is the kind of object orientation in the in the worst",
    "start": "1081840",
    "end": "1088720"
  },
  {
    "text": "many good aspects of object oriented object programming but if you think about object orientation kind of thinking coming in",
    "start": "1088720",
    "end": "1094960"
  },
  {
    "text": "then one of the likely sources of object immutable object thinking in your",
    "start": "1094960",
    "end": "1101120"
  },
  {
    "text": "team is going to be to do with incremental processing of results okay",
    "start": "1101120",
    "end": "1106480"
  },
  {
    "text": "and so part of what i want to get through is not just the situation but if you as a functional programmer can",
    "start": "1106480",
    "end": "1113120"
  },
  {
    "text": "master incremental functional programming uh you will be able to do more",
    "start": "1113120",
    "end": "1119440"
  },
  {
    "text": "functional everywhere and build better systems with better reliability at lower cost and um",
    "start": "1119440",
    "end": "1128720"
  },
  {
    "text": "you so this and and one area you should learn is absolutely event",
    "start": "1128720",
    "end": "1133919"
  },
  {
    "text": "sourcing and as i said it's related it's related to what i'm talking about today and this library on the ui side of",
    "start": "1133919",
    "end": "1139520"
  },
  {
    "text": "this set of techniques uh is uh is a similar a similar core thing you can learn i",
    "start": "1139520",
    "end": "1146720"
  },
  {
    "text": "call it's like having a tool in your tool belt to go and tackle many different problems uh in in the future okay so let's so",
    "start": "1146720",
    "end": "1154720"
  },
  {
    "text": "let's just recap where we are using some slides from the wonderful yaron minsky your ui as an incremental computation so",
    "start": "1154720",
    "end": "1161840"
  },
  {
    "text": "this is the traditional model of vdom that gets applied to the dom in",
    "start": "1161840",
    "end": "1167200"
  },
  {
    "text": "the view function and traditionally in these mvu systems you compare as the model changes you",
    "start": "1167200",
    "end": "1175039"
  },
  {
    "text": "compare the vdoms that are produced you re-run and generate the view function and then",
    "start": "1175039",
    "end": "1182000"
  },
  {
    "text": "you get a diff and you apply it to the actual diamond we all know that's what react does and that's what many of these systems do",
    "start": "1182000",
    "end": "1189280"
  },
  {
    "text": "and uh but we are going but look at this we're recomputing this this function",
    "start": "1189280",
    "end": "1195280"
  },
  {
    "text": "down below here we are recomputing the v dom on each on each stage and yeah you recompute the",
    "start": "1195280",
    "end": "1202080"
  },
  {
    "text": "v dom this is the same question we asked before but drilling down to the more specific you can't be serious",
    "start": "1202080",
    "end": "1207600"
  },
  {
    "text": "you incrementally can recompute the v dom now we are talking okay so we want to say if",
    "start": "1207600",
    "end": "1214720"
  },
  {
    "text": "there is a diff to the model uh so we want this this to not be a whole new model but we want to know what",
    "start": "1214720",
    "end": "1221360"
  },
  {
    "text": "this actual diff is then we compute a diff to the v dom and we and we run all the way through and this",
    "start": "1221360",
    "end": "1228480"
  },
  {
    "text": "kind of says well we're not just going to be doing mvu which is functional functional functional functional",
    "start": "1228480",
    "end": "1234000"
  },
  {
    "text": "model functional view functional update and this is what elm fabulous and elmish and others",
    "start": "1234000",
    "end": "1239120"
  },
  {
    "text": "do we actually want a variation on it which i'll call sort of delta mvu which is a delta to the model a delta",
    "start": "1239120",
    "end": "1246480"
  },
  {
    "text": "to the view a delta gets propagated through the update and a delta to the view",
    "start": "1246480",
    "end": "1253120"
  },
  {
    "text": "okay so so to get down to the question we're asking incremental plus functional",
    "start": "1253120",
    "end": "1258240"
  },
  {
    "text": "what even is that one place you can go and there are actually many actual technologies which fit in this",
    "start": "1258240",
    "end": "1265600"
  },
  {
    "text": "particular intersection in software design uh there and and this is not the bill it's",
    "start": "1265600",
    "end": "1273360"
  },
  {
    "text": "an end-all of it but one place you can go to learn about it is fsharp.data.adaptive and i",
    "start": "1273360",
    "end": "1279760"
  },
  {
    "text": "really like this library and that's why i'm drilling into it on this in this talk because it exactly captures",
    "start": "1279760",
    "end": "1286559"
  },
  {
    "text": "uh this intersection between functional and and incremental for the working.net",
    "start": "1286559",
    "end": "1293039"
  },
  {
    "text": "programmer you can use this library from c-sharp as well it has a it has a design api designed",
    "start": "1293039",
    "end": "1299360"
  },
  {
    "text": "for use from c-sharp and that is that is great appropriate set of extension methods and the like",
    "start": "1299360",
    "end": "1305600"
  },
  {
    "text": "and uh please uh you know try out this library contribute",
    "start": "1305600",
    "end": "1312559"
  },
  {
    "text": "to it it's just coming up to version 1.0 it's a very high quality library i've been using it uh and",
    "start": "1312559",
    "end": "1318960"
  },
  {
    "text": "it's extremely well tested based on code from the advanced who i mentioned before and it really",
    "start": "1318960",
    "end": "1325440"
  },
  {
    "text": "and what i like is that it's not um it's not tied into any other ui",
    "start": "1325440",
    "end": "1330960"
  },
  {
    "text": "framework or anything it's used by those things but it's just conceptually independent and you get to learn the",
    "start": "1330960",
    "end": "1338080"
  },
  {
    "text": "intersection of techniques and i think it's one of those things actually digging into the code if you're if you're an f sharp programmer it's",
    "start": "1338080",
    "end": "1343520"
  },
  {
    "text": "actually really interesting experience as well because uh it it it you learn something from that",
    "start": "1343520",
    "end": "1351120"
  },
  {
    "text": "you learn a set of new techniques okay so let's look at how this works and remember the key thing is we want the",
    "start": "1351120",
    "end": "1357480"
  },
  {
    "text": "fsharp.data programming model as in like f-sharp dot uh collections of lists",
    "start": "1357480",
    "end": "1363360"
  },
  {
    "text": "and it could be called their shop.collections.adaptive actually rather national.adaptive so we",
    "start": "1363360",
    "end": "1369200"
  },
  {
    "text": "have these collections like fsharp lists we know as f sharp programmers you take a list and you map it and you get a new",
    "start": "1369200",
    "end": "1375520"
  },
  {
    "text": "list you can filter that list you can sum that list we have all this wonderful",
    "start": "1375520",
    "end": "1380720"
  },
  {
    "text": "set of operators you can use to take functional data and transform and shape",
    "start": "1380720",
    "end": "1386799"
  },
  {
    "text": "and reduce it out and and that programming model is consistent for",
    "start": "1386799",
    "end": "1392240"
  },
  {
    "text": "lists it's consistent for arrays it's into sequences and for sets and for maps",
    "start": "1392240",
    "end": "1397919"
  },
  {
    "text": "and so on and these collections all support the same set of operations and uh having done some c-sharp",
    "start": "1397919",
    "end": "1403679"
  },
  {
    "text": "programming recently i mean i know there's c-sharp link but but the the actually the f-sharp uh",
    "start": "1403679",
    "end": "1410000"
  },
  {
    "text": "functional collection programming model is actually really nice and really consistent across all these different types",
    "start": "1410000",
    "end": "1415520"
  },
  {
    "text": "so something that all f sharp programmers absolutely know and love so that's",
    "start": "1415520",
    "end": "1422880"
  },
  {
    "text": "uh that's that model and we all given you know that model you want a really simple leap",
    "start": "1422880",
    "end": "1429679"
  },
  {
    "text": "step towards the incrementalization of that model and and that is we're going to have an",
    "start": "1429679",
    "end": "1435520"
  },
  {
    "text": "adaptive list which you can map and we're going to have an adaptive filter",
    "start": "1435520",
    "end": "1441600"
  },
  {
    "text": "and we're going to have an adaptive sum it's the same programming model you just sort of put",
    "start": "1441600",
    "end": "1446720"
  },
  {
    "text": "a on the front and and internally instead of having a list",
    "start": "1446720",
    "end": "1453200"
  },
  {
    "text": "of data you have the propagations of delta of changes to that list and you can",
    "start": "1453200",
    "end": "1459679"
  },
  {
    "text": "as you have your own functional collections uh and your own yeah your own functional",
    "start": "1459679",
    "end": "1466159"
  },
  {
    "text": "data types your own models and the like you can actually write the same you can implement your",
    "start": "1466159",
    "end": "1471600"
  },
  {
    "text": "own adaptive version of these of this programming model",
    "start": "1471600",
    "end": "1477760"
  },
  {
    "text": "okay so uh continuing on uh let's just walk through some basics of how this actually works",
    "start": "1477760",
    "end": "1485120"
  },
  {
    "text": "in practice i'm going to do that in visual studio code and",
    "start": "1485120",
    "end": "1490880"
  },
  {
    "text": "i'm going to just so i have ionide installed in visual studio code",
    "start": "1490880",
    "end": "1498320"
  },
  {
    "text": "i'm using fsharp.net core programming down below fsharp",
    "start": "1498320",
    "end": "1503520"
  },
  {
    "text": "interactive and here is some functional programming so let's just do the",
    "start": "1503520",
    "end": "1509600"
  },
  {
    "text": "the usual let's just create a list of ten thousand elements here and we're going to multiply each",
    "start": "1509600",
    "end": "1516720"
  },
  {
    "text": "element of the list to generate a new list like this and we have a new list whether it's multiplied by 10",
    "start": "1516720",
    "end": "1522559"
  },
  {
    "text": "10 20 30. okay so it's the usual information and calculation here and we have",
    "start": "1522559",
    "end": "1530159"
  },
  {
    "text": "except i'm actually going to put a print uh down below so you can see 10 000 prints coming out there",
    "start": "1530159",
    "end": "1538000"
  },
  {
    "text": "okay and we have that and i just we have some information we'll do a transformation on that information to",
    "start": "1538000",
    "end": "1543520"
  },
  {
    "text": "multiply it up by 10 again so we have our two steps in the",
    "start": "1543520",
    "end": "1548559"
  },
  {
    "text": "pipeline and then we will sum that result up except what did i do wrong here",
    "start": "1548559",
    "end": "1556670"
  },
  {
    "text": "[Music] okay i'll drop this down to a thousand",
    "start": "1556670",
    "end": "1564320"
  },
  {
    "text": "okay i have the result down down there okay uh now we can put those steps to",
    "start": "1566240",
    "end": "1572080"
  },
  {
    "text": "that pipeline up and we can take the input list here coming in and we can have a function that computes those",
    "start": "1572080",
    "end": "1578799"
  },
  {
    "text": "results uh with a function taking an integer list and reducing it down to an integer",
    "start": "1578799",
    "end": "1584320"
  },
  {
    "text": "and we compute the results here actually i was going to drop this down to ten thousand here",
    "start": "1584320",
    "end": "1591440"
  },
  {
    "text": "and i'll do it again drop it down to it down to a thousand",
    "start": "1597600",
    "end": "1602640"
  },
  {
    "text": "okay so now what if the result is actually what if this list actually changes",
    "start": "1602640",
    "end": "1609120"
  },
  {
    "text": "that's and that's the kind of thing we want to get down to is what if your input actually has one less element in it say",
    "start": "1609120",
    "end": "1615600"
  },
  {
    "text": "the element five is removed so we have the list from this up to up to a thousand",
    "start": "1615600",
    "end": "1624320"
  },
  {
    "text": "here and we'll put that in brackets here we'll get rid of this filter",
    "start": "1624320",
    "end": "1630720"
  },
  {
    "text": "here and that's now our input and we get a different result coming out as you can expect it's",
    "start": "1630720",
    "end": "1636559"
  },
  {
    "text": "reduced but you'll notice that we're re-computing all the work every time we had one item",
    "start": "1636559",
    "end": "1642559"
  },
  {
    "text": "removed from that list and there was an incremental change where five disappeared",
    "start": "1642559",
    "end": "1647919"
  },
  {
    "text": "and you think to yourself how would i adapt that how would i avoid",
    "start": "1647919",
    "end": "1653039"
  },
  {
    "text": "doing that work all over again okay that is a key problem it's like",
    "start": "1653039",
    "end": "1659279"
  },
  {
    "text": "suddenly programming has become hard right or from what looks like so trivial or just",
    "start": "1659279",
    "end": "1665440"
  },
  {
    "text": "multiplying by 10 and multiplying by 10 and adding things up and suddenly",
    "start": "1665440",
    "end": "1671360"
  },
  {
    "text": "i don't want to do all that work again in response to that change of that removal of five and you",
    "start": "1671360",
    "end": "1677039"
  },
  {
    "text": "think to yourself oh my god this is going to be really quite tricky all that state i'm going to",
    "start": "1677039",
    "end": "1682480"
  },
  {
    "text": "have to maintain in order to make sure i don't redo that work",
    "start": "1682480",
    "end": "1688398"
  },
  {
    "text": "okay so now let's do this in the adaptive version of that so we have an adaptive input so",
    "start": "1688480",
    "end": "1695039"
  },
  {
    "text": "this is the initial uh initial uh state of the of the the the initial",
    "start": "1695039",
    "end": "1702080"
  },
  {
    "text": "input into our adaption and uh we were using lists up above we're going to use a",
    "start": "1702080",
    "end": "1707840"
  },
  {
    "text": "set here and we do a map and we do a map over that adaptive set and we do an adaptive sum so we've started off with",
    "start": "1707840",
    "end": "1714799"
  },
  {
    "text": "our input and we're doing our adaption and it's it's effectively functional programming a functional transformation",
    "start": "1714799",
    "end": "1721760"
  },
  {
    "text": "and we observe the result at the end actually i was going to change this down to a thousand here",
    "start": "1721760",
    "end": "1729039"
  },
  {
    "text": "just uh let that run through and it will have the same problem we had",
    "start": "1729760",
    "end": "1736840"
  },
  {
    "text": "before and we'll do that some and we'll take a look at the result",
    "start": "1736840",
    "end": "1742559"
  },
  {
    "text": "and the result is sure enough it's correct but now something changes the change comes into the system",
    "start": "1742559",
    "end": "1747919"
  },
  {
    "text": "and changes are still ultimately at the fringes of the system you still have a",
    "start": "1747919",
    "end": "1754320"
  },
  {
    "text": "change being made imperatively it's and then you have this functional flow all the way through",
    "start": "1754320",
    "end": "1759679"
  },
  {
    "text": "and then you have a change being observed okay so you still have an imperative changes at the edges of the",
    "start": "1759679",
    "end": "1765279"
  },
  {
    "text": "system but the core of your code is still a functional transformation",
    "start": "1765279",
    "end": "1770880"
  },
  {
    "text": "and uh we so we had uh removing the element and now we do",
    "start": "1770880",
    "end": "1776480"
  },
  {
    "text": "the force here you'll notice the result has come back and absolutely no nothing has",
    "start": "1776480",
    "end": "1784880"
  },
  {
    "text": "been recomputed okay now let's try that again and say how what the heck happened okay so let's add a new input",
    "start": "1784880",
    "end": "1791760"
  },
  {
    "text": "i'd add the input 20 000 into the set of of results and we re-observe wow",
    "start": "1791760",
    "end": "1798799"
  },
  {
    "text": "so all that work that we did to compute the first result up here which did all",
    "start": "1798799",
    "end": "1804000"
  },
  {
    "text": "those printing out of 10 000 things all of that",
    "start": "1804000",
    "end": "1809120"
  },
  {
    "text": "none of that got all of that got saved somehow okay in in in whatever data flow is",
    "start": "1809120",
    "end": "1815679"
  },
  {
    "text": "going on whatever however things are being computed and you can look up the details in that shop.data.adaptive about how this works",
    "start": "1815679",
    "end": "1822080"
  },
  {
    "text": "all of that got uh got got recorded and saved and all those intermediate tables",
    "start": "1822080",
    "end": "1827600"
  },
  {
    "text": "to work out what to do and what not to do when we removed the result it just said um what did it do",
    "start": "1827600",
    "end": "1833039"
  },
  {
    "text": "it said okay so this result and it had recorded how that five had gone through this",
    "start": "1833039",
    "end": "1838559"
  },
  {
    "text": "mapping and given us 500 and it just said some i have to change a sum result",
    "start": "1838559",
    "end": "1844559"
  },
  {
    "text": "in response to a change for what's coming in well i just subtract it off okay so i did the subtraction there then",
    "start": "1844559",
    "end": "1851440"
  },
  {
    "text": "when we did the addition well it multiplied that up it actually did do those steps you can see those steps being done",
    "start": "1851440",
    "end": "1857360"
  },
  {
    "text": "a new element comes in it says hmm i've got a new element and we're doing a map okay work that out",
    "start": "1857360",
    "end": "1863039"
  },
  {
    "text": "and then we get to the sum it's a new element in the sum so i'll just add it on okay so it's incrementalized",
    "start": "1863039",
    "end": "1868640"
  },
  {
    "text": "the entire functional declarative computation uh in",
    "start": "1868640",
    "end": "1875679"
  },
  {
    "text": "it it has built up an incremental version of that that can respond to add and",
    "start": "1875679",
    "end": "1882399"
  },
  {
    "text": "remove events okay so that's the core idea of let me switch across",
    "start": "1882399",
    "end": "1891360"
  },
  {
    "text": "to uh fsharp.data.adaptive and here is the the the library actual.adaptive and adaptive",
    "start": "1891360",
    "end": "1899120"
  },
  {
    "text": "values and it'll run you through that it'll run you through how to build a little excel spreadsheet uh which",
    "start": "1899120",
    "end": "1904640"
  },
  {
    "text": "sort of does incremental update and computation or things that are like a code version of an excel spreadsheet and you can look at how you",
    "start": "1904640",
    "end": "1911919"
  },
  {
    "text": "can build up these graphs of uh what feel like graphs of adaptive computation now crucially these",
    "start": "1911919",
    "end": "1918799"
  },
  {
    "text": "graphs can also have dynamic dependencies they don't have to be merely static",
    "start": "1918799",
    "end": "1924000"
  },
  {
    "text": "uh and we'll we can talk about that in just a moment so just say fsharp.data.adaptive your",
    "start": "1924000",
    "end": "1929120"
  },
  {
    "text": "data as incremental computation okay so over on the left you",
    "start": "1929120",
    "end": "1934240"
  },
  {
    "text": "have your usual f sharp immutable data and over on the right i've given the corresponding thing for your adaptive",
    "start": "1934240",
    "end": "1941360"
  },
  {
    "text": "version of your data so where you have an integer you'll have an adaptive value of an integer and",
    "start": "1941360",
    "end": "1948880"
  },
  {
    "text": "over on the left you have a list you have an adaptive list a set you have an adaptive set a map you have an adaptive",
    "start": "1948880",
    "end": "1954080"
  },
  {
    "text": "map and uh if you have a an actual list of values you'll write a list",
    "start": "1954080",
    "end": "1960320"
  },
  {
    "text": "one two three on the right if you have a computation so for instance uh you're treating time as an adaptive",
    "start": "1960320",
    "end": "1966000"
  },
  {
    "text": "value they're 1.0 plus now.seconds you'll write a val and you'll get the current time",
    "start": "1966000",
    "end": "1971279"
  },
  {
    "text": "using the f sharp workflow syntax left bang t equals now and you will take t.seconds and add",
    "start": "1971279",
    "end": "1978720"
  },
  {
    "text": "it one and use a return and over on the right you've seen the pipeline just like we just had over on the left sorry you have a list",
    "start": "1978720",
    "end": "1985679"
  },
  {
    "text": "dot map filter and sum and you have a list map filter and so on",
    "start": "1985679",
    "end": "1991519"
  },
  {
    "text": "okay so you can see how you can take function functional f sharp functional code and do a fairly straightforward",
    "start": "1991519",
    "end": "1997279"
  },
  {
    "text": "translation over on the right until you have your adaptive version of your code okay",
    "start": "1997279",
    "end": "2004559"
  },
  {
    "text": "but we we're talking user interfaces and you say oh this is all just lists and some lists and maps and sets and things okay",
    "start": "2004559",
    "end": "2012480"
  },
  {
    "text": "and uh so what about the user interface uh okay well",
    "start": "2012480",
    "end": "2019200"
  },
  {
    "text": "um let's just talk about the okay so because ultimately we're going to do you have to compute a view in the mvu",
    "start": "2019200",
    "end": "2026159"
  },
  {
    "text": "programming model so what is the dom as data and this is a typical f sharp programming model of",
    "start": "2026159",
    "end": "2032000"
  },
  {
    "text": "dom as data you each dom node has i an id uh it has a set of",
    "start": "2032000",
    "end": "2038480"
  },
  {
    "text": "attributes uh it's a map from a functional map from strings to some kind of attribute value",
    "start": "2038480",
    "end": "2044480"
  },
  {
    "text": "and it has a set of children and that is a tree of data that is a full declaration in f sharp for a typical dom",
    "start": "2044480",
    "end": "2051679"
  },
  {
    "text": "uh a dom tree nice and simple recursive uh structure okay so",
    "start": "2051679",
    "end": "2057919"
  },
  {
    "text": "what is the dom as adaptive data and this is a kind of thing you have to learn when using this library when you",
    "start": "2057919",
    "end": "2064079"
  },
  {
    "text": "have some data structure you say so you you prototype out your code in",
    "start": "2064079",
    "end": "2069280"
  },
  {
    "text": "terms of beautiful pure functional programming and then you say i want to incrementalize that",
    "start": "2069280",
    "end": "2075520"
  },
  {
    "text": "and you say where are the key points uh where you need to insert your incrementalization and",
    "start": "2075520",
    "end": "2083520"
  },
  {
    "text": "those usually come down to the insertion of these a this magical a letter for adaptive at",
    "start": "2083520",
    "end": "2090240"
  },
  {
    "text": "exactly the right places so in the dom node you now have an each dom has an adaptive map of attributes",
    "start": "2090240",
    "end": "2098400"
  },
  {
    "text": "what does that mean that means your dom node its attributes could change over time okay that it did there will be",
    "start": "2098400",
    "end": "2105839"
  },
  {
    "text": "these deltas of changes to these maps additions of attributes",
    "start": "2105839",
    "end": "2110960"
  },
  {
    "text": "changes of attributes removals of attributes flowing up through your dom node okay so",
    "start": "2110960",
    "end": "2117119"
  },
  {
    "text": "it becomes an adaptive map at every single dom node now has an adaptive map so as you have your view",
    "start": "2117119",
    "end": "2124000"
  },
  {
    "text": "each thing you get getting the perspective of where your dom node can change",
    "start": "2124000",
    "end": "2130240"
  },
  {
    "text": "your children of your dom node is now an adaptive list of children okay so what does that",
    "start": "2130240",
    "end": "2136480"
  },
  {
    "text": "mean you can have new children it can have removed children",
    "start": "2136480",
    "end": "2141760"
  },
  {
    "text": "it can change over time and don't forget they they themselves it's a recursive structure going all the",
    "start": "2141760",
    "end": "2147280"
  },
  {
    "text": "way down you have adaption all the way down all the way down your stack of turtles can",
    "start": "2147280",
    "end": "2152400"
  },
  {
    "text": "change anywhere along the way okay so here we have in a four",
    "start": "2152400",
    "end": "2159359"
  },
  {
    "text": "line declaration we have a declaration of one of the most difficult to implement",
    "start": "2159359",
    "end": "2167040"
  },
  {
    "text": "programming language structures a tree that adapts and changes over",
    "start": "2167040",
    "end": "2172079"
  },
  {
    "text": "time and where there's a a a coherent notion of what are the deltas",
    "start": "2172079",
    "end": "2177599"
  },
  {
    "text": "to that tree okay so you now you now have an adaptive",
    "start": "2177599",
    "end": "2184960"
  },
  {
    "text": "dom that simple now there there is complexity here",
    "start": "2184960",
    "end": "2190400"
  },
  {
    "text": "but in terms of the use underneath absolutely and maintain in this thing the way this",
    "start": "2190400",
    "end": "2196160"
  },
  {
    "text": "the way the adaptive maps are implemented and maintained is absolutely key which is why it's in this",
    "start": "2196160",
    "end": "2201359"
  },
  {
    "text": "wonderful library called shop.data.adaptive this is a recursive adaptive type",
    "start": "2201359",
    "end": "2206480"
  },
  {
    "text": "the whole shape of the tree might change and adapt okay so when you have an adaptive dom",
    "start": "2206480",
    "end": "2213359"
  },
  {
    "text": "that is the key those four lined data structure you see there is the absolute magic that's sitting",
    "start": "2213359",
    "end": "2220640"
  },
  {
    "text": "inside a high performance functional web ui okay and just to say",
    "start": "2220640",
    "end": "2226880"
  },
  {
    "text": "uh that it's it's not just about the dom the mvu",
    "start": "2226880",
    "end": "2232400"
  },
  {
    "text": "programming model tends to focus on the dom but actually if you have adaptive scene graphs",
    "start": "2232400",
    "end": "2239040"
  },
  {
    "text": "then you'll have high performance functional graphics uis and uh that's what's covered in the",
    "start": "2239040",
    "end": "2244480"
  },
  {
    "text": "aardvark platform it's thankfully the key idea that at the core of a lot of what aardvark is doing is",
    "start": "2244480",
    "end": "2250320"
  },
  {
    "text": "you have this adaptive scene graph and uh you can go and look at aardvark okay",
    "start": "2250320",
    "end": "2257440"
  },
  {
    "text": "so right uh just to say okay let's say we have the",
    "start": "2257440",
    "end": "2262960"
  },
  {
    "text": "adaptive dom on the left and i haven't really represented the change that's happening to that thing and the deltas that are happening",
    "start": "2262960",
    "end": "2269119"
  },
  {
    "text": "but i've talked about it children get added children get removed attributes change the whole shape of the",
    "start": "2269119",
    "end": "2274800"
  },
  {
    "text": "tree tree can kind of change as things go on uh now and it's not a static graph okay",
    "start": "2274800",
    "end": "2282880"
  },
  {
    "text": "it's absolutely a dynamic thing so you do full-on dynamic ui with this now the actual code",
    "start": "2282880",
    "end": "2290480"
  },
  {
    "text": "uh that's in these frameworks that sort of consumes these changes ultimately you have to l",
    "start": "2290480",
    "end": "2297200"
  },
  {
    "text": "in some sense listen to the changes coming from one of these adaptive collections or one of these adaptive",
    "start": "2297200",
    "end": "2303119"
  },
  {
    "text": "data structures and ultimately you have to make changes to the real dom now you don't have to do this in your",
    "start": "2303119",
    "end": "2308960"
  },
  {
    "text": "as a user of this thing but if you're going to work with fsharp.data.adaptive you might",
    "start": "2308960",
    "end": "2315359"
  },
  {
    "text": "and you and build interesting new data structures you might have to",
    "start": "2315359",
    "end": "2320400"
  },
  {
    "text": "write this kind of code that listens to changes on an adaptive thing and makes",
    "start": "2320400",
    "end": "2326000"
  },
  {
    "text": "changes to an actual thing and it's actually uh interesting exercise and puzzle and",
    "start": "2326000",
    "end": "2331200"
  },
  {
    "text": "once you solve it you encapsulate that listener and it just becomes a simple combinator",
    "start": "2331200",
    "end": "2336480"
  },
  {
    "text": "which says sort of propagate changes from here to here and you have this sort of",
    "start": "2336480",
    "end": "2341520"
  },
  {
    "text": "corresponding uh set of listeners which sort of listen into the",
    "start": "2341520",
    "end": "2346720"
  },
  {
    "text": "changes coming over from the left and make a corresponding actual mutations actual",
    "start": "2346720",
    "end": "2353680"
  },
  {
    "text": "changes over on the right and uh there are samples in fsharp.data.adapter there's some pull",
    "start": "2353680",
    "end": "2359920"
  },
  {
    "text": "requests skipping those samples as well listing in at the edges okay so",
    "start": "2359920",
    "end": "2365119"
  },
  {
    "text": "what have we gained by moving to adaptive functional data you get very very minimal recomputation and",
    "start": "2365119",
    "end": "2371119"
  },
  {
    "text": "update you already saw that minimal recomputation for that sum that corresponds through the entire ui",
    "start": "2371119",
    "end": "2377280"
  },
  {
    "text": "programming as well adaptive data can have dynamic shape and dependencies you're not being tied into",
    "start": "2377280",
    "end": "2383760"
  },
  {
    "text": "this static thinking but it can have this sort of static outer part for performance that is you can make",
    "start": "2383760",
    "end": "2390880"
  },
  {
    "text": "sure you're not re-cue there is a risk here that you end up recreating the entire adaptive part",
    "start": "2390880",
    "end": "2396560"
  },
  {
    "text": "in response to just one little change anywhere in the graph and you have to be aware of some techniques for avoiding that so you have this sort of",
    "start": "2396560",
    "end": "2403680"
  },
  {
    "text": "static outer outer part and also there's this thing that these adaptive",
    "start": "2403680",
    "end": "2409440"
  },
  {
    "text": "this adaptive data is recomputed on demand okay and that is actually critical in",
    "start": "2409440",
    "end": "2415119"
  },
  {
    "text": "especially in the context of these adaptive scene graphs because of course you only have one in your typical game",
    "start": "2415119",
    "end": "2420720"
  },
  {
    "text": "or visualizer of the kinds we've been seeing earlier on you only have one part of the martian",
    "start": "2420720",
    "end": "2426720"
  },
  {
    "text": "surface that you're looking at even though you've actually got this huge information space available and you want to only compute",
    "start": "2426720",
    "end": "2433359"
  },
  {
    "text": "that that part on the demand as things change through your user interface or as the camera changes",
    "start": "2433359",
    "end": "2440400"
  },
  {
    "text": "through your views okay and just how does it actually look in code in a typical delta mvu app an",
    "start": "2440400",
    "end": "2447599"
  },
  {
    "text": "incrementalized mpu then you have a model you have an update stay the same",
    "start": "2447599",
    "end": "2453359"
  },
  {
    "text": "uh you have this interesting bit of code automatically synthesized which is generates from your functional model",
    "start": "2453359",
    "end": "2459680"
  },
  {
    "text": "this tool called adaptify uh it's part of the uh fsharp.",
    "start": "2459680",
    "end": "2466640"
  },
  {
    "text": "sort of tool chain gives you an adaptive model uh so where your individual adaptive",
    "start": "2466640",
    "end": "2472960"
  },
  {
    "text": "values like is the button pressed goes from being purely functional to an adaptive functional and it gives you a",
    "start": "2472960",
    "end": "2478640"
  },
  {
    "text": "thing which diffs out the models to compare those two models so these parts actually stay purely functional but it's",
    "start": "2478640",
    "end": "2484400"
  },
  {
    "text": "only the view which is written with respect to the adaptive model so you still get to do all the",
    "start": "2484400",
    "end": "2490319"
  },
  {
    "text": "nice functional programming but the delta you get the deltas on the views and the view now becomes a thing which is built",
    "start": "2490319",
    "end": "2497119"
  },
  {
    "text": "on the adaptive model and sort of listens to changes to that adaptive model and you in this case it's a adaptive",
    "start": "2497119",
    "end": "2503200"
  },
  {
    "text": "value which when the model is pressed then you'll get a change uh in the appropriate view and um",
    "start": "2503200",
    "end": "2511119"
  },
  {
    "text": "yeah that this is a typical way that you'll see the in things like uh the adaptive",
    "start": "2511119",
    "end": "2518160"
  },
  {
    "text": "uh elmish mbu programming models this is the kind of code you will be",
    "start": "2518160",
    "end": "2523599"
  },
  {
    "text": "typically seeing the adaptive view okay",
    "start": "2523599",
    "end": "2528960"
  },
  {
    "text": "okay so uh i am actually close to finished i i will be finished well ahead of time",
    "start": "2528960",
    "end": "2535920"
  },
  {
    "text": "the summary of the whole talk is really that that mvu is a beautiful programming",
    "start": "2535920",
    "end": "2543359"
  },
  {
    "text": "model you see it's starting to influence you know in swift ui you see it in maui",
    "start": "2543359",
    "end": "2548839"
  },
  {
    "text": "ui uh and you see it in elm initially it's absolutely amazing for information rich",
    "start": "2548839",
    "end": "2554480"
  },
  {
    "text": "apps but and but it does have performance issues for high performance ui and extremely",
    "start": "2554480",
    "end": "2560720"
  },
  {
    "text": "data-rich ui and so you're beginning to see these variations on mvu",
    "start": "2560720",
    "end": "2566400"
  },
  {
    "text": "which allow adaptive functional data to make this mvu point of view this functional point",
    "start": "2566400",
    "end": "2572160"
  },
  {
    "text": "of view relevant to amazing high performance ui uh and just some of the examples uh that",
    "start": "2572160",
    "end": "2578240"
  },
  {
    "text": "have been done with the aardvark platform i've mentioned that the robotics viewer on the right uh you mentioned this high quality light",
    "start": "2578240",
    "end": "2584960"
  },
  {
    "text": "lighting simulation overseeing graphs uh this is some of the best visualization research",
    "start": "2584960",
    "end": "2591839"
  },
  {
    "text": "i mean there's a lot going on in these kind of areas but it's just they're cranking up these incredibly high uh incredible applications with",
    "start": "2591839",
    "end": "2598960"
  },
  {
    "text": "high productivity of extremely complex data sets uh based on what they're doing in the yardback",
    "start": "2598960",
    "end": "2604560"
  },
  {
    "text": "aardvark platform so uh um and the other",
    "start": "2604560",
    "end": "2610319"
  },
  {
    "text": "part yeah that's the high level conceptual thing that you'll see repeated in many different settings over",
    "start": "2610319",
    "end": "2615839"
  },
  {
    "text": "the next 10 or 20 years is this thing about adaptive functional data making",
    "start": "2615839",
    "end": "2620880"
  },
  {
    "text": "it relevant but if you want to actually use adaptive functional data today there are several different options",
    "start": "2620880",
    "end": "2626400"
  },
  {
    "text": "floating around the.net space uh some of the tool chain some of the the mvu systems like maui have",
    "start": "2626400",
    "end": "2632880"
  },
  {
    "text": "things actually incorporated uh some some some of these elements",
    "start": "2632880",
    "end": "2637920"
  },
  {
    "text": "actually sort of incorporated into maui itself uh but if if you if you want to",
    "start": "2637920",
    "end": "2643200"
  },
  {
    "text": "actually use the general notion of functional adaptive data today you can do that with fsharp.data.adaptive and get involved",
    "start": "2643200",
    "end": "2649520"
  },
  {
    "text": "and contribute to that library as well and um and and build things",
    "start": "2649520",
    "end": "2654960"
  },
  {
    "text": "on on top of it it really is an amazing bit of technology some resources for you",
    "start": "2654960",
    "end": "2660560"
  },
  {
    "text": "uh uh there's uh three talks from the advarchians guillock harza functional",
    "start": "2660560",
    "end": "2666560"
  },
  {
    "text": "adventures on high performance computer graphics you have the thomas ortner talk which i mentioned before functional programming",
    "start": "2666560",
    "end": "2671920"
  },
  {
    "text": "boosting scientific and industrial research and this uh one from harold steinlechner",
    "start": "2671920",
    "end": "2677440"
  },
  {
    "text": "and georg harza on functional programming versus efficiency a lot of these things about incrementality",
    "start": "2677440",
    "end": "2683839"
  },
  {
    "text": "we talk about also other ways to get super high performance uh using your functional programming",
    "start": "2683839",
    "end": "2689200"
  },
  {
    "text": "language and uh there's an entire course on this",
    "start": "2689200",
    "end": "2694880"
  },
  {
    "text": "uh from one of the austrian universities and uh we have the repos here the aardvark",
    "start": "2694880",
    "end": "2700880"
  },
  {
    "text": "platform and f sharp.data.adaptive",
    "start": "2700880",
    "end": "2705839"
  }
]