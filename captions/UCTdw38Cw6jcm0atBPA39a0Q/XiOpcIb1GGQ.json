[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "so thank you everyone for joining me um to the last slot well done on making it to the end of the full day I'm going",
    "start": "0",
    "end": "6480"
  },
  {
    "text": "to be talking about Bloom filters today which is a probabilistic data structure",
    "start": "6480",
    "end": "11760"
  },
  {
    "text": "and I'll explain what that means as we go through but it's it's kind of a talk of two halves the first half",
    "start": "11760",
    "end": "17279"
  },
  {
    "text": "is about how I ended up with so much data that I simply didn't know what to do with it and then the second half is",
    "start": "17279",
    "end": "23640"
  },
  {
    "text": "about how I managed to handle that and process it in an efficient way so in",
    "start": "23640",
    "end": "30119"
  },
  {
    "text": "2013 I started working on a little idea that I had to build a website to process",
    "start": "30119",
    "end": "35399"
  },
  {
    "text": "security Telemetry modern web browsers are packed with features where they can send you feedback on things that are",
    "start": "35399",
    "end": "41340"
  },
  {
    "text": "happening in the page now one of the things that they can send you feedback in is when bad stuff happens and bad stuff",
    "start": "41340",
    "end": "49440"
  },
  {
    "text": "might look like this so this is something that we know within the security industry is cross-site scripting and it basically means you",
    "start": "49440",
    "end": "56039"
  },
  {
    "start": "50000",
    "end": "50000"
  },
  {
    "text": "ended up with some JavaScript on your page that shouldn't be there now if I gave all of you this script tag and said",
    "start": "56039",
    "end": "62820"
  },
  {
    "text": "like hey do you want this script tag to run on your site do you want it to be on your page",
    "start": "62820",
    "end": "67920"
  },
  {
    "text": "would anyone say yes all right like we all have the context to look at this and be like evil.com",
    "start": "67920",
    "end": "75140"
  },
  {
    "text": "keylogger.js like I probably don't want this to be there bought an attacker with",
    "start": "75140",
    "end": "80159"
  },
  {
    "text": "some kind of evil intentions might have a very good reason that they want to get it there and we've seen some really kind",
    "start": "80159",
    "end": "86460"
  },
  {
    "text": "of Almost Famous examples of when attackers have managed to do this throughout recent history one of the",
    "start": "86460",
    "end": "93299"
  },
  {
    "text": "most notable ones was something called coin Hive now coin Hive started out as well he started out as a legitimate idea",
    "start": "93299",
    "end": "100020"
  },
  {
    "text": "and the idea was that we don't like adverts on websites we don't like the Privacy implications the tracking",
    "start": "100020",
    "end": "105540"
  },
  {
    "text": "they're really really heavy they slow down the page they consume loads of bandwidth and kind was like okay we had",
    "start": "105540",
    "end": "110880"
  },
  {
    "text": "an idea you can get rid of all the ads but we still need to make some money from our site so what you could do is you could put this little JavaScript",
    "start": "110880",
    "end": "117119"
  },
  {
    "text": "library on the page and when users visit your site and obviously the page is running in their browser we will mine a",
    "start": "117119",
    "end": "123780"
  },
  {
    "text": "little bit of cryptocurrency in JavaScript and that would be the air quote payment that would replace",
    "start": "123780",
    "end": "129599"
  },
  {
    "text": "advertising so there's no more advertising no more privacy no more bandwidth consumption I'm just going to",
    "start": "129599",
    "end": "134700"
  },
  {
    "text": "borrow a few little CPU Cycles from you whilst you're reading my articles",
    "start": "134700",
    "end": "139980"
  },
  {
    "text": "and that will be how we fund everything now you know I'm a little bit torn on",
    "start": "139980",
    "end": "146099"
  },
  {
    "text": "whether that's a good idea or not from the outset but the problem was when we have nice things bad people do bad",
    "start": "146099",
    "end": "151500"
  },
  {
    "text": "things with them and what the attackers realized was like Hey if I take the library and I put it on your site all of",
    "start": "151500",
    "end": "158700"
  },
  {
    "text": "your visitors will mine cryptocurrency for me so we now had like some really good",
    "start": "158700",
    "end": "163739"
  },
  {
    "text": "incentives for you to find ways to get JavaScript into other people's websites that shouldn't be there and this became",
    "start": "163739",
    "end": "168780"
  },
  {
    "text": "known as crypto jacking and we went through especially with the kind of explosion of cryptocurrencies and their popularity we went through this huge",
    "start": "168780",
    "end": "175200"
  },
  {
    "text": "phase where cryptojacking was super super popular and if somebody found a cross-site scripting vulnerability on your website",
    "start": "175200",
    "end": "181680"
  },
  {
    "text": "you would start or at least all of your visitors would start Mining cryptocurrency and sending it to these",
    "start": "181680",
    "end": "187620"
  },
  {
    "text": "attackers now another really popular one came from a collective that we refer to as",
    "start": "187620",
    "end": "192659"
  },
  {
    "text": "magecart now magecart did the same thing they found a way to get JavaScript into your site that didn't belong there and",
    "start": "192659",
    "end": "199260"
  },
  {
    "text": "when they got this JavaScript into your site it was just a tiny little file that would simply bind to all of the key",
    "start": "199260",
    "end": "205739"
  },
  {
    "text": "presses and then Ajax them out the back it was a simple keylogger the site would load the script would load and as your",
    "start": "205739",
    "end": "211980"
  },
  {
    "text": "users are sat there typing all of their keystrokes are being logged and sent to the attackers a magecard",
    "start": "211980",
    "end": "218700"
  },
  {
    "text": "focus very specifically on sites that have an e-commerce component some kind of online payment so you would go to the",
    "start": "218700",
    "end": "224819"
  },
  {
    "text": "payment page and what do you type in on payment pages right full 16 digit card number expiry date security code your",
    "start": "224819",
    "end": "231720"
  },
  {
    "text": "address your name everything and they will be siphoning all of this data off from your site because they found a way",
    "start": "231720",
    "end": "238019"
  },
  {
    "text": "to get a simple few lines of JavaScript on the page now these are two pretty notable",
    "start": "238019",
    "end": "243420"
  },
  {
    "text": "examples of the kind of things that would go wrong and the kind of things that you might want to prevent from",
    "start": "243420",
    "end": "248519"
  },
  {
    "text": "happening now to prevent this from happening there is a mechanism that you can use called content security policy",
    "start": "248519",
    "end": "255239"
  },
  {
    "start": "252000",
    "end": "252000"
  },
  {
    "text": "and this is a super powerful application security mechanism that would allow you to stop the attacks I just mentioned and",
    "start": "255239",
    "end": "262320"
  },
  {
    "text": "a lot more things from happening and you write a Content security policy for your site and then simply return it to the",
    "start": "262320",
    "end": "269340"
  },
  {
    "text": "client as a HTTP response header with the page right so you write the security",
    "start": "269340",
    "end": "274680"
  },
  {
    "text": "policy this is what's supposed to happen on my page you stick it in the header and you send it to the client with the",
    "start": "274680",
    "end": "280979"
  },
  {
    "text": "page and then the client will simply enforce the policy right these are the things that are supposed to happen on your site I will only let these things",
    "start": "280979",
    "end": "287639"
  },
  {
    "text": "happen now as long as your policy doesn't include things like crypto jacking or malware then the browser will stop us",
    "start": "287639",
    "end": "293699"
  },
  {
    "text": "things from happening so you could stop bad stuff from happening now most people want to control JavaScript with content",
    "start": "293699",
    "end": "300060"
  },
  {
    "start": "296000",
    "end": "296000"
  },
  {
    "text": "security policy because it's the most powerful type of content on the page and what you would do",
    "start": "300060",
    "end": "305940"
  },
  {
    "text": "is you would Define your content security policy header you would issue what we call the script Source directive",
    "start": "305940",
    "end": "311040"
  },
  {
    "text": "I want to control where script is going to come from on my page and you would say self you might load some JavaScript",
    "start": "311040",
    "end": "317040"
  },
  {
    "text": "files from yourself from your own domain and you might load let's say jQuery from the jQuery CDM",
    "start": "317040",
    "end": "322979"
  },
  {
    "text": "and now if we saw the script tag just a moment ago if the browser sees that in the page it would look at the source",
    "start": "322979",
    "end": "328740"
  },
  {
    "text": "attribute on that script tag and say evil.com well evil.com is not in the",
    "start": "328740",
    "end": "334440"
  },
  {
    "text": "allowed list so we will block this script tag from loading and the attack is completely neutralized that script",
    "start": "334440",
    "end": "339780"
  },
  {
    "text": "tag will not be run on the page and this is all you would have to do to stop it and that's super super powerful now you",
    "start": "339780",
    "end": "346800"
  },
  {
    "text": "can control all of the other types of content that you may have on your page you can control Styles and you can",
    "start": "346800",
    "end": "351840"
  },
  {
    "start": "348000",
    "end": "348000"
  },
  {
    "text": "control images child sources things like iframes and other nested browsing contacts but you can even control where",
    "start": "351840",
    "end": "359580"
  },
  {
    "text": "data goes to things like connect sources where can the page send data we also have form action where can we send data",
    "start": "359580",
    "end": "366840"
  },
  {
    "text": "out so you can control west of comes in and West off goes out you can take full",
    "start": "366840",
    "end": "372660"
  },
  {
    "text": "control of absolutely everything with CSP now the problem is",
    "start": "372660",
    "end": "378780"
  },
  {
    "text": "this is done on the client so let's say my website had that script tag that we just looked at I've sent this policy to",
    "start": "378780",
    "end": "385560"
  },
  {
    "text": "your browser you've come to my site the evil script tag has been blocked it's not going to run and that's great",
    "start": "385560",
    "end": "391500"
  },
  {
    "text": "because you are now protected you're not going to have your credit cards or your names or your passwords stolen",
    "start": "391500",
    "end": "397319"
  },
  {
    "text": "but I don't know right it happened on your client it happened in your browser",
    "start": "397319",
    "end": "402660"
  },
  {
    "text": "and I don't have any knowledge that that happened but content security policy has",
    "start": "402660",
    "end": "407699"
  },
  {
    "start": "407000",
    "end": "407000"
  },
  {
    "text": "a way to fix that because I need to know about the issue to be able to fix the issue",
    "start": "407699",
    "end": "413639"
  },
  {
    "text": "so with content security policy there is one final feature that you can enable and it's called the report URI directive",
    "start": "413639",
    "end": "421080"
  },
  {
    "text": "and this is where you say to the browser look if something goes wrong if you block something based on this policy",
    "start": "421080",
    "end": "426900"
  },
  {
    "text": "what we call a violation of the policy I want you to send a violation report here",
    "start": "426900",
    "end": "432360"
  },
  {
    "text": "I want you to tell me hey I came to your site you said this should happen but also this other thing happened and I",
    "start": "432360",
    "end": "440099"
  },
  {
    "text": "stopped it and that will now give me the ability as a site operator to go to my site and",
    "start": "440099",
    "end": "445199"
  },
  {
    "text": "actually fix it so this was the feature that I wanted to leverage all of those years ago and I",
    "start": "445199",
    "end": "451199"
  },
  {
    "text": "was like wow that sounds pretty cool like I would love to know about this so I went on Google I tried to find a service that did it and I couldn't find",
    "start": "451199",
    "end": "457199"
  },
  {
    "text": "the service that did it I spent like five minutes on Google definitely doesn't exist so I built one I was like right well you know how hard can this be",
    "start": "457199",
    "end": "463740"
  },
  {
    "text": "famous last words like how hard can this be right I'll just build a service to ingest some Json and hence like the name",
    "start": "463740",
    "end": "469740"
  },
  {
    "text": "of the company that I built was report URI because I'm bad at naming things so I just borrowed the name from The Standard",
    "start": "469740",
    "end": "475500"
  },
  {
    "text": "so I built a company well I built a project originally actually to ingest these reports these violation reports",
    "start": "475500",
    "end": "481740"
  },
  {
    "text": "for myself because they simply come in as a Json payload in a post request",
    "start": "481740",
    "end": "486780"
  },
  {
    "start": "482000",
    "end": "482000"
  },
  {
    "text": "right it's not too difficult not too complicated I thought I was like great stand up at endpoint you have to receive",
    "start": "486780",
    "end": "492720"
  },
  {
    "text": "these post requests pause a little bit of Json and I can start to find out about interesting things or bad things",
    "start": "492720",
    "end": "498720"
  },
  {
    "text": "that are happening on my site so you would visit my site something would happen in breach of the policy a",
    "start": "498720",
    "end": "504780"
  },
  {
    "text": "violation and then your client would send the post with this Json payload it",
    "start": "504780",
    "end": "510360"
  },
  {
    "text": "tells you what page was I on what was violated the script Source it gives a copy of the original policy because you",
    "start": "510360",
    "end": "516539"
  },
  {
    "text": "may be referring to this later so you want to know well what was the client working with at the time so you get the original policy and it will tell you",
    "start": "516539",
    "end": "523440"
  },
  {
    "text": "what was blocked among several other pieces of information in there so now if",
    "start": "523440",
    "end": "529019"
  },
  {
    "text": "I were to receive this I'd look at this and be like whoa I need to go fix this right now because apparently there's",
    "start": "529019",
    "end": "535500"
  },
  {
    "text": "script tag on my page loading from evil.com coldkeylogger.js I have a new JavaScript dependency that I didn't ask",
    "start": "535500",
    "end": "541080"
  },
  {
    "text": "for and this was the Json payload that the service was built to ingest now when I",
    "start": "541080",
    "end": "547440"
  },
  {
    "text": "started it and it was just me it you know it was in like the hundreds a month right I would get hundreds of these payloads per month super super easy but",
    "start": "547440",
    "end": "554519"
  },
  {
    "text": "I actually got some useful information from it so I was like okay I'll build a nice front end and I'll put it online and I'm like hey I built this free tool",
    "start": "554519",
    "end": "560040"
  },
  {
    "text": "people can check it out you can use it if you find it interesting or useful",
    "start": "560040",
    "end": "565560"
  },
  {
    "start": "563000",
    "end": "563000"
  },
  {
    "text": "now when I actually launched it publicly the kind of first month was in 2015 when",
    "start": "565560",
    "end": "570959"
  },
  {
    "text": "it was actually open and anybody apart from people that I knew could go and register and use this kind of tool or",
    "start": "570959",
    "end": "576480"
  },
  {
    "text": "product if you want to call it that and by the end of the first month we'd done a million Json payloads right I was like",
    "start": "576480",
    "end": "583800"
  },
  {
    "text": "wow like one million pieces of telemetry came in I was like this is amazing you",
    "start": "583800",
    "end": "589019"
  },
  {
    "text": "know and it's just running on one little server in digitalocean it's like 20 a month or something this is nice and easy",
    "start": "589019",
    "end": "595560"
  },
  {
    "text": "but then a couple of other people like hey actually yeah we got some useful Telemetry from this people should use this this would be really good so time",
    "start": "595560",
    "end": "601620"
  },
  {
    "text": "goes forwards and at one point in 2016 we hit a marker where we were doing a",
    "start": "601620",
    "end": "606779"
  },
  {
    "text": "million of those reports per day I was like wow this is you know this is scaling up but a million requests a day",
    "start": "606779",
    "end": "612000"
  },
  {
    "text": "right it's still kind of within the Realms of being reasonable and I could just add more Cloud right like we've got",
    "start": "612000",
    "end": "618120"
  },
  {
    "text": "a problem got more data add more Cloud cost a little bit more money but we can just throw money at the problem because",
    "start": "618120",
    "end": "623700"
  },
  {
    "text": "the amount of money is still small we get to 2018 that was the next marker for me which was when",
    "start": "623700",
    "end": "629760"
  },
  {
    "text": "we were doing a million of these an hour now they're all Json posts they have all got database activity they've all got",
    "start": "629760",
    "end": "635700"
  },
  {
    "text": "something to be done with them this isn't a get request from cash it's a post request for the Json payload that",
    "start": "635700",
    "end": "641160"
  },
  {
    "text": "you must do something with and I'm like okay it's kind of getting a little busy now then we got to 2021 when we hit the next",
    "start": "641160",
    "end": "648779"
  },
  {
    "text": "marker and I was like when I first kind of started to delve into this problem I was like okay how long does it take us",
    "start": "648779",
    "end": "654480"
  },
  {
    "text": "to do a million reports on average throughout 24-hour period we would do it every 15.4 seconds we would process 1",
    "start": "654480",
    "end": "661920"
  },
  {
    "text": "million Json payloads and then it just kept getting worse and worse so now we can at Peak in America",
    "start": "661920",
    "end": "668579"
  },
  {
    "text": "time because we we get like the vast majority of our reports in America time we do around about 64 000 a second so if",
    "start": "668579",
    "end": "676740"
  },
  {
    "text": "we if America's awakened on the internet we'll be doing 64 000 Json payloads a second",
    "start": "676740",
    "end": "682800"
  },
  {
    "text": "now there's only so far you can get through this problem by just adding more Cloud right adding more cloud makes it more expensive and I had to kind of get",
    "start": "682800",
    "end": "689640"
  },
  {
    "text": "a bit smarter about how we're doing things and there were several things that I did along the way to try and ease",
    "start": "689640",
    "end": "694980"
  },
  {
    "start": "692000",
    "end": "692000"
  },
  {
    "text": "our processing burden so all of the different browsers and clients out there slightly disagree on how the Json should",
    "start": "694980",
    "end": "701100"
  },
  {
    "text": "be structured right it's like there's a specification but that doesn't matter so we we normalize really really hard on",
    "start": "701100",
    "end": "706860"
  },
  {
    "text": "the way in some browsers will include quoting parameters some won't there's loads of differences so we try and",
    "start": "706860",
    "end": "712079"
  },
  {
    "text": "flatten them down as much as possible we have a nice redis cache on the way in and we normalize them hard on the front",
    "start": "712079",
    "end": "718019"
  },
  {
    "text": "and then de-duplicate them on insertion into the cache we looked at how our users were querying",
    "start": "718019",
    "end": "723360"
  },
  {
    "text": "the data and thinking like well how can we how can we better store it to then better query it because querying of the",
    "start": "723360",
    "end": "729060"
  },
  {
    "text": "data was becoming really really difficult when you've got terabytes and terabytes of Json in the database it",
    "start": "729060",
    "end": "734459"
  },
  {
    "text": "becomes hard to run queries So based on how people were querying in the UI we now store the reports in little time",
    "start": "734459",
    "end": "740519"
  },
  {
    "text": "series buckets for the hour of the day and the month because they were the most popular query formats",
    "start": "740519",
    "end": "745620"
  },
  {
    "text": "deduplication again we this was slightly further than normalizing the Json",
    "start": "745620",
    "end": "751079"
  },
  {
    "text": "some browsers would include fields that are not in the standard like extra information to try and be helpful I",
    "start": "751079",
    "end": "756779"
  },
  {
    "text": "guess but these were cluttering up the UI because you would have multiple different reports in the UI that",
    "start": "756779",
    "end": "762180"
  },
  {
    "text": "essentially track back to the same problem so we would try and flatten those down also",
    "start": "762180",
    "end": "767279"
  },
  {
    "text": "spam reports and noise anyone here use browser extensions right like loads of people half people",
    "start": "767279",
    "end": "773579"
  },
  {
    "text": "you put a browser extension on the page and you want to you know a browser extension to change the font right the browser extension goes in the browser",
    "start": "773579",
    "end": "780000"
  },
  {
    "text": "the page loads and it's like no we don't want that font we want this font and it shows a new font in the page and the",
    "start": "780000",
    "end": "785279"
  },
  {
    "text": "font violates the policy because it's loading from somewhere that was not allowed if you violate the policy or report get",
    "start": "785279",
    "end": "790800"
  },
  {
    "text": "sent so a popular browser extensions can trigger huge quantities of data to be sent so we've now got some really good",
    "start": "790800",
    "end": "797639"
  },
  {
    "text": "methods for identifying those and just discarding them we don't need them users don't need them and then we don't have to process them",
    "start": "797639",
    "end": "804420"
  },
  {
    "text": "but eventually we kind of hit our final problem which was too much data on disk right it was just too much Json in the",
    "start": "804420",
    "end": "810600"
  },
  {
    "text": "database so we introduced a 90-day retention policy right once a report gets 90 days or older we just chop it",
    "start": "810600",
    "end": "816839"
  },
  {
    "text": "off the back so you can only have a look at a sliding window of the last 90 days that allowed us to obviously get rid of",
    "start": "816839",
    "end": "822779"
  },
  {
    "text": "the vast majority of data on disk hugely reduce our overheads but this one actually came with it one",
    "start": "822779",
    "end": "828480"
  },
  {
    "text": "of the biggest problems now one of the most common things that people want to know if a report comes in",
    "start": "828480",
    "end": "835380"
  },
  {
    "text": "they want to be able to answer this question have we seen this before like if a",
    "start": "835380",
    "end": "840899"
  },
  {
    "text": "report comes in and it is the first time something is being reported to you you're probably more interested in it than you know if this is like the 47",
    "start": "840899",
    "end": "848160"
  },
  {
    "text": "000th time this has been reported you're like yeah okay we know about this and we're dealing with it so one of the features that we really",
    "start": "848160",
    "end": "854339"
  },
  {
    "text": "wanted was to be able to alert people this is like a brand new report you've never seen this before it's never been",
    "start": "854339",
    "end": "859380"
  },
  {
    "text": "before been reported before now okay yeah there's loads of data in",
    "start": "859380",
    "end": "865079"
  },
  {
    "text": "the database we could query over and say like is this thing in there but then you hit the 90-day retention",
    "start": "865079",
    "end": "871079"
  },
  {
    "text": "policy and you're like well actually all we can say is have we seen this before in the last 90 days right because all of",
    "start": "871079",
    "end": "877380"
  },
  {
    "text": "the data Beyond 90 days has fallen off the back and he's now gone so even answering this simple question",
    "start": "877380",
    "end": "882899"
  },
  {
    "text": "have we seen this before number one querying over huge quantities of data is really really difficult when",
    "start": "882899",
    "end": "888600"
  },
  {
    "text": "the reports are coming in in the tens of thousands a second that's really hard and also 90-day limit anyway so it's not",
    "start": "888600",
    "end": "894839"
  },
  {
    "text": "actually answering the question and these two major problems are the ones that I set out to solve answering this one question and it sounds so",
    "start": "894839",
    "end": "902040"
  },
  {
    "text": "simple and I was like oh this will be great we'll just set up some alerting and then I actually looked at the scale in the volume and thought",
    "start": "902040",
    "end": "908220"
  },
  {
    "text": "yeah we can't query the database like that tens of thousands of times a second to say have we ever seen this thing before so I was like how can we do this",
    "start": "908220",
    "end": "915060"
  },
  {
    "text": "efficiently how can we do this in an achievable way and I started looking at something",
    "start": "915060",
    "end": "921420"
  },
  {
    "start": "921000",
    "end": "921000"
  },
  {
    "text": "called probabilistic data structures now a bloom filter is a probabilistic data",
    "start": "921420",
    "end": "926820"
  },
  {
    "text": "structure and in order to explain it I'm going to take you through this example of a rather simple Bloom filter but it",
    "start": "926820",
    "end": "932220"
  },
  {
    "text": "demonstrates all of the qualities now a balloon filters you can just see here is an array of bits all initialized to zero",
    "start": "932220",
    "end": "939360"
  },
  {
    "text": "so the width of the filter W is 10 in this case we have got 10 bits and when",
    "start": "939360",
    "end": "944880"
  },
  {
    "text": "we insert an item into the filter you need to set a number of bits in order to",
    "start": "944880",
    "end": "949980"
  },
  {
    "text": "reflect that item so we've got two here k equals two so we use two hash functions to set bits in the array to",
    "start": "949980",
    "end": "956459"
  },
  {
    "text": "say we've seen this item we're going to set these two bits so we'll take a look at what it looks like we're going to do this using H1 and",
    "start": "956459",
    "end": "962940"
  },
  {
    "start": "960000",
    "end": "960000"
  },
  {
    "text": "H2 because we've got k equals 2 2 hash functions two bits to set the only requirement for these hash functions you",
    "start": "962940",
    "end": "969360"
  },
  {
    "text": "want them to be as fast as possible but you need them to be what's called pairwise independent which means if you",
    "start": "969360",
    "end": "975120"
  },
  {
    "text": "hash the same item with hash function one and two they will always generate a different index in the array that's all",
    "start": "975120",
    "end": "981959"
  },
  {
    "text": "pairwise independent means so let's do it let's take I to me a report has come in we'll just refer to it as item a it's",
    "start": "981959",
    "end": "988740"
  },
  {
    "text": "a Json payload and we're going to take the first hash function hash function one we're going to Hash item a and then",
    "start": "988740",
    "end": "994860"
  },
  {
    "text": "we modulus it with the width of the array to give us an index that's in range and it gives us index two",
    "start": "994860",
    "end": "999959"
  },
  {
    "text": "then you take the second hash function hash function two you hash the item mod it with the width and it gives us four",
    "start": "999959",
    "end": "1007339"
  },
  {
    "text": "now we've received this item it's come in and we set the bits in the array so we just set the bit there we set the bit",
    "start": "1007339",
    "end": "1013699"
  },
  {
    "text": "there this now indicates we have seen item a and we have inserted it into the bloom",
    "start": "1013699",
    "end": "1020000"
  },
  {
    "text": "filter and this is now what we do for reports that are coming in for reports that we're processing the next report",
    "start": "1020000",
    "end": "1025100"
  },
  {
    "text": "comes in Item B okay we've now processed it we need to set it in the array to say we've seen it we need to set it in the",
    "start": "1025100",
    "end": "1031520"
  },
  {
    "text": "filter so we hash it with hash Function One gives us index 6 hash function 2",
    "start": "1031520",
    "end": "1036678"
  },
  {
    "text": "gives us 9. yeah",
    "start": "1036679",
    "end": "1040120"
  },
  {
    "text": "so you mean for like a collision",
    "start": "1046100",
    "end": "1049419"
  },
  {
    "text": "here both 20 and 30 for example",
    "start": "1052520",
    "end": "1057820"
  },
  {
    "text": "but because the width is always the same oh so the only way that you would realistically be able to do that is if",
    "start": "1059059",
    "end": "1064400"
  },
  {
    "text": "you wrapped over multiple times which with a realistic width you would never be able to achieve so you are correct in my example but in a realistic scenario",
    "start": "1064400",
    "end": "1071840"
  },
  {
    "text": "the width you'll see in a minute I'll give you some realistic numbers the width would be too large and I'll explain that at the end actually because",
    "start": "1071840",
    "end": "1077360"
  },
  {
    "text": "we have a q a section but it's a really good point this is just because of a poor short array for the example",
    "start": "1077360",
    "end": "1083900"
  },
  {
    "text": "but for now we've got bit six and bit9 set so this now filter this now stores the",
    "start": "1083900",
    "end": "1090919"
  },
  {
    "text": "information that we've seen item a an item B so if we now look at item C we've",
    "start": "1090919",
    "end": "1096260"
  },
  {
    "text": "got the bloom filter in front of us we want to query you know item C comes in have we seen this thing before we now",
    "start": "1096260",
    "end": "1102320"
  },
  {
    "text": "want to query the filter we don't want to insert something into it we want to be able to query it so to query item C",
    "start": "1102320",
    "end": "1109280"
  },
  {
    "text": "to say have we ever seen this thing before we simply do the same but look up the bits so we hash it with hash",
    "start": "1109280",
    "end": "1115520"
  },
  {
    "text": "function one which gives us index 4 which is set and then we hash it with hash function 2 which gives us seven and",
    "start": "1115520",
    "end": "1122240"
  },
  {
    "text": "we can see the bitter index seven is not set so we can now say",
    "start": "1122240",
    "end": "1127580"
  },
  {
    "text": "we have never seen this item before because if we had seen this item before we would have done this process and the",
    "start": "1127580",
    "end": "1134000"
  },
  {
    "text": "bit seven would be set so we can say definitively 100 we have never seen this",
    "start": "1134000",
    "end": "1140240"
  },
  {
    "text": "item before so this is how a bloom Filter Works in",
    "start": "1140240",
    "end": "1145700"
  },
  {
    "text": "principle with a short simple example but this is how it works but they do have one drawback",
    "start": "1145700",
    "end": "1152179"
  },
  {
    "text": "there is one thing that we always have to consider with a bloom filter if we query item a",
    "start": "1152179",
    "end": "1159620"
  },
  {
    "text": "an item that we have seen we can say if you remember from a few slides ago we set the index two and four so we could",
    "start": "1159620",
    "end": "1167179"
  },
  {
    "text": "query item a and we could say yeah we've seen this before right like we set those two bits earlier two and four they're",
    "start": "1167179",
    "end": "1172580"
  },
  {
    "text": "both one we've seen the item but then we query another item now this",
    "start": "1172580",
    "end": "1178400"
  },
  {
    "text": "is item D and we've never seen item D before I haven't inserted it yet but we're going to query item d",
    "start": "1178400",
    "end": "1184640"
  },
  {
    "text": "Ash function one gives us the index of four and hash function two gives us the index of nine",
    "start": "1184640",
    "end": "1190820"
  },
  {
    "text": "which are both set now index 4 was set when we inserted item a and index nine was set when we",
    "start": "1190820",
    "end": "1197299"
  },
  {
    "text": "inserted Item B so now the filter is going to tell us that we have seen this item before",
    "start": "1197299",
    "end": "1204080"
  },
  {
    "text": "but actually that's not what it's telling us because it is a probabilistic data structure Bloom filters can only",
    "start": "1204080",
    "end": "1210500"
  },
  {
    "text": "give you a definitive on the negative they can say no this has not been",
    "start": "1210500",
    "end": "1216260"
  },
  {
    "text": "inserted and that is with 100 accuracy but when they say yes this item has been inserted previously they're doing it",
    "start": "1216260",
    "end": "1223460"
  },
  {
    "text": "with a probability that this could be a false positive because of collisions with other bits that have already been",
    "start": "1223460",
    "end": "1230179"
  },
  {
    "text": "set and this is the nature of a probabilistic data structure you can ask them a question was this item in this",
    "start": "1230179",
    "end": "1237020"
  },
  {
    "start": "1233000",
    "end": "1233000"
  },
  {
    "text": "set the set of all inserted items and it can tell you definitely no",
    "start": "1237020",
    "end": "1242059"
  },
  {
    "text": "and that is 100 if the filter says you've not seen it you've not seen it",
    "start": "1242059",
    "end": "1247160"
  },
  {
    "text": "however if it says yes caveat with a probability that this is a false",
    "start": "1247160",
    "end": "1253220"
  },
  {
    "text": "positive now you can control the false positive probability you can have a relatively large amount of control over that and",
    "start": "1253220",
    "end": "1260120"
  },
  {
    "text": "you control that when you're setting up the filter so now if we take a look at setting up",
    "start": "1260120",
    "end": "1265400"
  },
  {
    "start": "1264000",
    "end": "1264000"
  },
  {
    "text": "the bloom filter there's obviously a few different characteristics that you can control so if we take a look I had a",
    "start": "1265400",
    "end": "1272120"
  },
  {
    "text": "very small width of 10 but obviously in real real scenarios you would have something much larger we also have",
    "start": "1272120",
    "end": "1278900"
  },
  {
    "text": "number of items that you expect to insert you need to have at least a rough idea on how many things are you going to",
    "start": "1278900",
    "end": "1284960"
  },
  {
    "text": "put in the filter because this will impact the size you can then also derive K which is",
    "start": "1284960",
    "end": "1290000"
  },
  {
    "text": "basically the number of bits that you're going to set for each item that is present in the filter and then finally",
    "start": "1290000",
    "end": "1295820"
  },
  {
    "text": "you can control P the probability that there will be a false positive",
    "start": "1295820",
    "end": "1302480"
  },
  {
    "text": "now it's relatively easy to calculate these values you can basically you can kind of think of it like you get",
    "start": "1302480",
    "end": "1308179"
  },
  {
    "text": "to pick two and then the other one the other ones are derived for you so for us we needed to get some some",
    "start": "1308179",
    "end": "1314539"
  },
  {
    "start": "1313000",
    "end": "1313000"
  },
  {
    "text": "kind of idea like how many items are we ever going to insert this was a particularly difficult one for us but",
    "start": "1314539",
    "end": "1320539"
  },
  {
    "text": "whichever one you pick whichever item you want to control here you simply calculate the others now",
    "start": "1320539",
    "end": "1327559"
  },
  {
    "text": "those Bloom filter calculators online you don't need to learn any of this but just as a general point you can see for",
    "start": "1327559",
    "end": "1333380"
  },
  {
    "text": "example if you were deriving the width then you can see we use the number of items and the probability of false",
    "start": "1333380",
    "end": "1339020"
  },
  {
    "text": "positive obviously a large number of items equals larger width if you want a lower probability of false positive you",
    "start": "1339020",
    "end": "1346220"
  },
  {
    "text": "need a larger width again same for the number of items going in there more items equals more width equals more bits",
    "start": "1346220",
    "end": "1352460"
  },
  {
    "text": "set per item so they're all derived from each other and you would just pick the couple that",
    "start": "1352460",
    "end": "1358220"
  },
  {
    "text": "mean the most to you so for us we went for the width and I wanted to control the probability of false positive because I wanted to keep that kind of",
    "start": "1358220",
    "end": "1364640"
  },
  {
    "text": "low so those are the two items that I wanted to exert control over and then the other two were defined for me so to",
    "start": "1364640",
    "end": "1372919"
  },
  {
    "start": "1370000",
    "end": "1370000"
  },
  {
    "text": "calculate the wave I was like okay well I'm going to assume over time we're going to insert 7 billion items into",
    "start": "1372919",
    "end": "1378919"
  },
  {
    "text": "this filter now remember this is 7 billion distinct items I know we're processing tens of thousands of reports",
    "start": "1378919",
    "end": "1384799"
  },
  {
    "text": "a second but significant quantities of them are duplicates so this is a projection over time for distinct",
    "start": "1384799",
    "end": "1391100"
  },
  {
    "text": "reports that will be put into the filter but we're going to put somewhere in the region of 7 billion of these reports",
    "start": "1391100",
    "end": "1397640"
  },
  {
    "text": "into the filter and this is the probability of false positive that I would like to have",
    "start": "1397640",
    "end": "1403100"
  },
  {
    "text": "and from there it's a simple case of just calculating you substitute in the values and then you can get to the size of your",
    "start": "1403100",
    "end": "1409700"
  },
  {
    "text": "filter now it's kind of pretty big and then it's",
    "start": "1409700",
    "end": "1415039"
  },
  {
    "text": "also not really that big at all when you think about what we're going to do with this we ended up so we're hosted in",
    "start": "1415039",
    "end": "1420559"
  },
  {
    "text": "digitalocean and we ended up spinning up a dedicated redis cache for this and it cost a few dollars a month to have a",
    "start": "1420559",
    "end": "1426260"
  },
  {
    "text": "machine with like 16 gig of RAM right it's really not a big deal super super easy to do this so that was going to be",
    "start": "1426260",
    "end": "1432140"
  },
  {
    "text": "the size requirement of our filter then of course we needed to calculate k so we now have our defined width we know",
    "start": "1432140",
    "end": "1438440"
  },
  {
    "text": "the number of items going in there we need to figure out okay how many bits are we going to set in the array for",
    "start": "1438440",
    "end": "1444980"
  },
  {
    "text": "each item and it came out at seven in order to hit our false positive probability we need to rely on the",
    "start": "1444980",
    "end": "1451580"
  },
  {
    "text": "accuracy of seven bits so we will be setting seven and this was it this is what we did now",
    "start": "1451580",
    "end": "1457940"
  },
  {
    "text": "if you don't want to do all the math yourself like I said there's some really good Bloom filter calculators online just",
    "start": "1457940",
    "end": "1463760"
  },
  {
    "text": "Google them there's plenty of them and we use this in production we set this up eight and a half gig",
    "start": "1463760",
    "end": "1469880"
  },
  {
    "text": "approximately relatively low powered redis cash actually so redis has really good",
    "start": "1469880",
    "end": "1474919"
  },
  {
    "text": "support for Bloom filters and the other the other data structures I'm going to talk about and now we can take all of our inbound",
    "start": "1474919",
    "end": "1482059"
  },
  {
    "text": "reports in our processing Pipeline and first thing that we do is query them against the filter as soon as a report",
    "start": "1482059",
    "end": "1488780"
  },
  {
    "text": "comes in brand new report has been deduplicated it's been normalized have we seen this thing before now if that filter comes back and says",
    "start": "1488780",
    "end": "1495500"
  },
  {
    "text": "no we know for sure 100 we've never seen this thing before and if it says yes we're like okay there",
    "start": "1495500",
    "end": "1503600"
  },
  {
    "text": "is a probability here that this is a false positive and it's something that we've never seen before",
    "start": "1503600",
    "end": "1508760"
  },
  {
    "text": "but we were looking for that definitive no like how quickly can we get the no",
    "start": "1508760",
    "end": "1513919"
  },
  {
    "text": "and send an alert and that's what the filter tells us it gives us a guaranteed no",
    "start": "1513919",
    "end": "1519620"
  },
  {
    "text": "so this works for us and as long as you can as long as you can kind of live with the",
    "start": "1519620",
    "end": "1525679"
  },
  {
    "text": "drawbacks of probabilistic data structures like that false positive on the yes then they can work really really",
    "start": "1525679",
    "end": "1531080"
  },
  {
    "text": "well so I went out and I dug out some other examples of the use of Bloom filters in real life scenarios so maybe",
    "start": "1531080",
    "end": "1538039"
  },
  {
    "text": "they can relate better now one of the ones that I liked was a white paper that came from a company called Akamai now",
    "start": "1538039",
    "end": "1544820"
  },
  {
    "start": "1540000",
    "end": "1540000"
  },
  {
    "text": "akamaya a CDM provider so they reverse proxy their sites you put your site behind the CDN and they serve all of",
    "start": "1544820",
    "end": "1550880"
  },
  {
    "text": "your requests and cash assets and things for you and what they found was they were looking at their Edge caches",
    "start": "1550880",
    "end": "1557120"
  },
  {
    "text": "so they've got their data centers all around the world and they have Edge caches with all of their customers files that they've cached and then they would",
    "start": "1557120",
    "end": "1562940"
  },
  {
    "text": "serve out and they were like okay well you know we have a huge huge huge amount of data in the",
    "start": "1562940",
    "end": "1569179"
  },
  {
    "text": "cache but is all of it really you know being used are these like highly requested files that we need to cache",
    "start": "1569179",
    "end": "1574460"
  },
  {
    "text": "and they're like Well we'd like to only cache a file if it's a shot at a kind of like",
    "start": "1574460",
    "end": "1580580"
  },
  {
    "text": "popularity a certain number of requests if it's a file that's requested super infrequently we don't want to Cache it because it's just going to sit in the",
    "start": "1580580",
    "end": "1586220"
  },
  {
    "text": "cache and then expire and we cash it all that time for nothing so they set up a bloom filter in front of their Edge",
    "start": "1586220",
    "end": "1592100"
  },
  {
    "text": "cache and what they would do when a request came in for a file if the file is not in the cache and they're",
    "start": "1592100",
    "end": "1598460"
  },
  {
    "text": "contemplating going back to the origin server to fetch it they would query the bloom filter and say has this file been",
    "start": "1598460",
    "end": "1604100"
  },
  {
    "text": "requested before now whilst they're doing this the bloom filter will obviously say no this has",
    "start": "1604100",
    "end": "1609620"
  },
  {
    "text": "never been requested before because it's the first time they would fetch the file from the origin and serve it to the",
    "start": "1609620",
    "end": "1615440"
  },
  {
    "text": "client but they wouldn't cash it because it's never been asked for before it's like no one's ever asked for this file",
    "start": "1615440",
    "end": "1620600"
  },
  {
    "text": "so we're not going to Cache it and then they'll set the bits in the filter and then when the second or any subsequent",
    "start": "1620600",
    "end": "1626299"
  },
  {
    "text": "request for the file comes in they query the filter and say yes this has been requested before",
    "start": "1626299",
    "end": "1632299"
  },
  {
    "text": "so that time when they fetch it from the origin and serve it to the client they drop it in the cache on the second",
    "start": "1632299",
    "end": "1637820"
  },
  {
    "text": "request and this helped them eliminate what they refer to in the paper as one hit wonders a file that is requested once and then",
    "start": "1637820",
    "end": "1644659"
  },
  {
    "text": "cached and then sits in the cache until expiration and nobody ever asks for it again and they managed to reduce the",
    "start": "1644659",
    "end": "1650480"
  },
  {
    "text": "size of their cash by around 74 by eliminating one-hit wonders so they remove three quarters of the data that",
    "start": "1650480",
    "end": "1656900"
  },
  {
    "text": "they were caching for absolutely no reason using a simple Bloom filter on the way",
    "start": "1656900",
    "end": "1662419"
  },
  {
    "text": "in I found another one this one's particularly interesting because this one's up my street of security",
    "start": "1662419",
    "end": "1668419"
  },
  {
    "text": "now Google safe browsing is a really really good idea and as I start to explain it in the middle it sounds like",
    "start": "1668419",
    "end": "1674539"
  },
  {
    "text": "a terrible idea so when you're browsing websites you want to know I'm about to",
    "start": "1674539",
    "end": "1679760"
  },
  {
    "text": "visit this URL is this URL malicious right like I would love to know before I",
    "start": "1679760",
    "end": "1684860"
  },
  {
    "text": "go to any URL in my browser is there something malicious at the other side now Google safe browsing is a collection",
    "start": "1684860",
    "end": "1690679"
  },
  {
    "text": "of known malicious URLs they have a huge huge data set that comes from sources all over the web",
    "start": "1690679",
    "end": "1696380"
  },
  {
    "text": "so you're sat there on your browser and I want to go to this URL and I want to know is this URL malicious so what your",
    "start": "1696380",
    "end": "1703520"
  },
  {
    "text": "device could do what your browser could do is take that URL and send it off to Google in a request",
    "start": "1703520",
    "end": "1708980"
  },
  {
    "text": "and say hey is this URL malicious I'm about to go there",
    "start": "1708980",
    "end": "1714500"
  },
  {
    "text": "now it sounds like a good idea because they'll be able to tell you yes or no it's malicious but then it sounds like a",
    "start": "1714500",
    "end": "1719600"
  },
  {
    "text": "really bad idea because that sounds like some very invasive and privacy concerning tracking I don't want to be",
    "start": "1719600",
    "end": "1724940"
  },
  {
    "text": "shipping all of the URLs that I visit after some external API to make sure that they're okay",
    "start": "1724940",
    "end": "1730700"
  },
  {
    "text": "so how do we deal with it well they built a bloom filter so on the Google server with their ginormous list of URLs",
    "start": "1730700",
    "end": "1739400"
  },
  {
    "text": "that are malicious they insert them into a bloom filter literally a couple of megabytes they ship it down to the",
    "start": "1739400",
    "end": "1745220"
  },
  {
    "text": "client and then when I open any page if you're using Chrome or Firefox or anything every time you open a URL every time you",
    "start": "1745220",
    "end": "1752659"
  },
  {
    "text": "do a navigation it queries the bloom filter locally and it says is this URL in the set of all items is this URL in",
    "start": "1752659",
    "end": "1761419"
  },
  {
    "text": "the list of all malicious urls and they ask that question and does the query locally so now we're not hitting",
    "start": "1761419",
    "end": "1768020"
  },
  {
    "text": "an API and being tracked and having our privacy invaded you can do that locally now what can the bloom filter tell you",
    "start": "1768020",
    "end": "1774140"
  },
  {
    "text": "definitely no great navigate off we go no problem it's not malicious but then the bloom filter",
    "start": "1774140",
    "end": "1780980"
  },
  {
    "text": "can say yes with the probability of false positive so in those scenarios that is when your",
    "start": "1780980",
    "end": "1787220"
  },
  {
    "text": "client will then reach out to the API now it still sounds like a bad idea but there is a bot they use something called",
    "start": "1787220",
    "end": "1793640"
  },
  {
    "text": "K anonymity to query the API it's not the focus of the talk but it's super super cool you can query an API for",
    "start": "1793640",
    "end": "1800480"
  },
  {
    "text": "something without telling the API what you're querying for and that's what they use so you can take the URL query the",
    "start": "1800480",
    "end": "1807500"
  },
  {
    "text": "URL against the API and the API doesn't learn what the URL is it's called K anonymity check it out it's really",
    "start": "1807500",
    "end": "1813500"
  },
  {
    "text": "awesome but the point is they went from querying every URL you",
    "start": "1813500",
    "end": "1818659"
  },
  {
    "text": "visit to only the ones where the bloom filter says yes so they took it from basically all requests to basically no",
    "start": "1818659",
    "end": "1825260"
  },
  {
    "text": "requests using a simple Bloom filter on the client",
    "start": "1825260",
    "end": "1831158"
  },
  {
    "text": "now have you ever been to a News website and they say to you like hey you've read this article before so we're going to",
    "start": "1831200",
    "end": "1836840"
  },
  {
    "text": "give you this list of new articles right it says new articles like articles you've not read medium does this you go to medium and they're like new articles",
    "start": "1836840",
    "end": "1842840"
  },
  {
    "text": "things that you have not read and I thought to myself well how do they how do they keep track of that right",
    "start": "1842840",
    "end": "1848059"
  },
  {
    "text": "like how do they know do they just have like a database of all the articles that I've read and it turns out it's not a database",
    "start": "1848059",
    "end": "1854919"
  },
  {
    "text": "turns out it's a bloom filter when you read an article they set the URL of the",
    "start": "1854919",
    "end": "1861260"
  },
  {
    "text": "article in the filter and then when they get out the stream of new articles they query them against your Bloom filter to",
    "start": "1861260",
    "end": "1867320"
  },
  {
    "text": "say is it in there has Scott read this before and if it says yes the light rank throw that one out it's not a new",
    "start": "1867320",
    "end": "1872960"
  },
  {
    "text": "article and here is the new list I was like okay it feels a tiny bit Overkill but it works it is the same principle so",
    "start": "1872960",
    "end": "1881419"
  },
  {
    "text": "you can now go to medium read an article and know that this is being done by setting bits",
    "start": "1881419",
    "end": "1888320"
  },
  {
    "text": "in a bloom filter now we do use this at report your eye this boom filter is yeah",
    "start": "1888320",
    "end": "1894440"
  },
  {
    "text": "okay you know I admit eight and a half gigs of RAM nine gigs of RAM it's quite a bit but for what it does",
    "start": "1894440",
    "end": "1900860"
  },
  {
    "text": "it's basically nothing right like the reddish cache respawn up on digitalocean is 50 a month and we're pushing like 50",
    "start": "1900860",
    "end": "1907820"
  },
  {
    "text": "60 000 reports a second at Peak like much lower in the night time but at Peak we're pushing like 50 60 000 requests a",
    "start": "1907820",
    "end": "1914720"
  },
  {
    "text": "second against the cash and it's basically free all in memory the hash functions are super super cheap we're",
    "start": "1914720",
    "end": "1920419"
  },
  {
    "text": "just checking our seven bit set right it's virtually free now there are other data structures",
    "start": "1920419",
    "end": "1927440"
  },
  {
    "text": "built on top of Bloom filters we have other probabilistic data structures so",
    "start": "1927440",
    "end": "1933320"
  },
  {
    "text": "one of the first ones is something called accounting Bloom filter right saying yes or no have I seen this item",
    "start": "1933320",
    "end": "1939380"
  },
  {
    "start": "1934000",
    "end": "1934000"
  },
  {
    "text": "before is okay but what about how many times have I seen this item before so",
    "start": "1939380",
    "end": "1944840"
  },
  {
    "text": "it's the same principle it is a one-dimensional array a filter as we refer to it it's the same probabilistic",
    "start": "1944840",
    "end": "1950960"
  },
  {
    "text": "nature obviously because a bloom filter is the base data structure here the only thing is",
    "start": "1950960",
    "end": "1956299"
  },
  {
    "text": "we're now counting a threshold so instead of just setting the bit for",
    "start": "1956299",
    "end": "1961700"
  },
  {
    "text": "the presence and setting seven bits you would take the counter at those seven locations and increment them so we've",
    "start": "1961700",
    "end": "1968179"
  },
  {
    "text": "seen this report one more time increment those counters now of course because of the collisions",
    "start": "1968179",
    "end": "1974600"
  },
  {
    "text": "with other items we can see counters over increased beyond the true number and that is why the item is possibly",
    "start": "1974600",
    "end": "1981620"
  },
  {
    "text": "greater than equal to the threshold but what you can say you've got the definite negative this item is definitely not",
    "start": "1981620",
    "end": "1987799"
  },
  {
    "text": "less seen than this number so it's the same probabilistic nature but instead of just setting the bits we now increment",
    "start": "1987799",
    "end": "1994340"
  },
  {
    "text": "counters instead what about if you want to delete something I put this thing in the filter",
    "start": "1994340",
    "end": "2000279"
  },
  {
    "start": "1998000",
    "end": "1998000"
  },
  {
    "text": "and now I want to take it out with the bloom filter you cannot do that if you delete those bits you break the filter right but with a",
    "start": "2000279",
    "end": "2007000"
  },
  {
    "text": "cuckoo Filter Works in exactly the same way but you can delete items slightly higher memory requirement for this one",
    "start": "2007000",
    "end": "2013120"
  },
  {
    "text": "but you can delete stuff if you need to we then have what we refer to as a",
    "start": "2013120",
    "end": "2019360"
  },
  {
    "start": "2017000",
    "end": "2017000"
  },
  {
    "text": "sketch now a sketch is just a two-dimensional filter basically right we looked at a one-dimensional filter earlier a sketch is two dimensions and",
    "start": "2019360",
    "end": "2027100"
  },
  {
    "text": "the count Min sketch allows for frequency analysis on events if you have a huge data stream like maybe a peak you",
    "start": "2027100",
    "end": "2033279"
  },
  {
    "text": "know 64 000 events a second coming through and you wanted to do frequency analysis on that data stream you can do",
    "start": "2033279",
    "end": "2039820"
  },
  {
    "text": "that efficiently with account mean sketch now again same probabilistic nature it's just a two-dimensional Bloom",
    "start": "2039820",
    "end": "2046059"
  },
  {
    "text": "filter basically it allows over counting but never under counting again because of the collisions with the increments",
    "start": "2046059",
    "end": "2053618"
  },
  {
    "text": "and you can Define the over count tolerance it's the same as controlling the probability in the bloom filter",
    "start": "2053619",
    "end": "2060520"
  },
  {
    "text": "now I've got an interesting post on count me sketch actually as well if you want to do some more reading on that",
    "start": "2060520",
    "end": "2065618"
  },
  {
    "text": "with an explanation of how the actual array Works in two Dimensions but then one that I've done a really kind of",
    "start": "2065619",
    "end": "2071980"
  },
  {
    "text": "extended blog post on was something called top K now top K is another data structure that we're currently using in",
    "start": "2071980",
    "end": "2077500"
  },
  {
    "text": "production and what top K does it's built on on a two-dimensional filter so a sketch it runs a binary Min Heap",
    "start": "2077500",
    "end": "2084220"
  },
  {
    "text": "alongside the sketch and it allows for frequency analysis again but top K is",
    "start": "2084220",
    "end": "2089858"
  },
  {
    "text": "designed to give you whereas the company sketch will give you account for all items a top K has way less overheads but",
    "start": "2089859",
    "end": "2096760"
  },
  {
    "text": "it's only designed to track the top K items so in our case it's the top 100 we track our top 100 most common reports so",
    "start": "2096760",
    "end": "2105220"
  },
  {
    "text": "you can have like top 100 top 50 top whatever you need but we track the top 100 most common reports every week to",
    "start": "2105220",
    "end": "2111880"
  },
  {
    "text": "see like you know what's going on in the world like what are the big things being reported have we got some new incidents",
    "start": "2111880",
    "end": "2117579"
  },
  {
    "text": "some new event so we stream all of our reports through the top case structure and at any point you can take the top",
    "start": "2117579",
    "end": "2124119"
  },
  {
    "text": "100 from the data stream at that moment in time so we can simply look at it and say right now what are our top 100 items",
    "start": "2124119",
    "end": "2130839"
  },
  {
    "text": "in this data stream based on their frequency now you can query the number out we don't really use it to count the",
    "start": "2130839",
    "end": "2137440"
  },
  {
    "text": "number we're actually just looking for basically the top 100 however because you can Define the undercount tolerance",
    "start": "2137440",
    "end": "2143440"
  },
  {
    "text": "and the probability we can actually use it to get a pretty good grip on the true volume of those reports being reported",
    "start": "2143440",
    "end": "2150460"
  },
  {
    "text": "so this works we're currently using this in production as well I have a really big blog post on this one explaining how",
    "start": "2150460",
    "end": "2156760"
  },
  {
    "text": "it works and the final one is something called a hyperlog log now a hypolog log is it we use it to",
    "start": "2156760",
    "end": "2164920"
  },
  {
    "start": "2159000",
    "end": "2159000"
  },
  {
    "text": "like the fancy terminology is we use it to determine the cardinality of the set which means basically like how much",
    "start": "2164920",
    "end": "2170020"
  },
  {
    "text": "uniqueness is in the data or how much duplication is in the data so you take the data stream you stream it through",
    "start": "2170020",
    "end": "2176619"
  },
  {
    "text": "the hyperlog log and it will tell you what is the cardinality of the set it will count the distinct items that it",
    "start": "2176619",
    "end": "2182500"
  },
  {
    "text": "has seen in the data stream now it does this with massive massive",
    "start": "2182500",
    "end": "2188200"
  },
  {
    "text": "efficiencies right those like basically zero storage in memory for this thing and the CPU overhead the time complexity",
    "start": "2188200",
    "end": "2194020"
  },
  {
    "text": "of doing this is almost zero if you were to do this in the traditional sense of you know inserting them into a database",
    "start": "2194020",
    "end": "2199720"
  },
  {
    "text": "or counting them there it would come with huge overheads we can literally stream our entire production data through the hyperlog log in redis and",
    "start": "2199720",
    "end": "2206560"
  },
  {
    "text": "it's like yeah no problem so we can now count the distinct number of items in the data stream which was",
    "start": "2206560",
    "end": "2211780"
  },
  {
    "text": "really useful for earlier when I was trying to figure out how wide does the filter need to be for the number of items so if you don't know what the",
    "start": "2211780",
    "end": "2218079"
  },
  {
    "text": "cardinality of your data is run it through the hyperlog log and it will tell you",
    "start": "2218079",
    "end": "2223300"
  },
  {
    "text": "so the whole kind of point of all of these things for us was to do this in massively efficient ways I added Cloud",
    "start": "2223300",
    "end": "2229900"
  },
  {
    "text": "for as long as I could and it just cost my money right like more Cloud equals more cost than for what was a side",
    "start": "2229900",
    "end": "2236200"
  },
  {
    "text": "project at the time I needed to do this in way more efficient ways now I wanted to leave",
    "start": "2236200",
    "end": "2242859"
  },
  {
    "text": "plenty of time for questions on this one and I now want to open this up to the audience I appreciate his last talk and",
    "start": "2242859",
    "end": "2248680"
  },
  {
    "text": "you know it's like what 5 30 or something 6 p.m but I did leave lots of time for questions on this and I'd be",
    "start": "2248680",
    "end": "2255160"
  },
  {
    "text": "happy to look back to the question at the front there now that we have a little bit of time to do that",
    "start": "2255160",
    "end": "2260380"
  },
  {
    "text": "so you were saying if I remember correctly please correct me if I'm wrong um if we modulus it with the width both",
    "start": "2260380",
    "end": "2267700"
  },
  {
    "text": "of the hash indexes could wrap around and potentially collide with each other yeah probably with a width of 10 but not",
    "start": "2267700",
    "end": "2273880"
  },
  {
    "text": "with a width of like I can't remember what our width was like 27 million or something like so essentially yeah that",
    "start": "2273880",
    "end": "2280000"
  },
  {
    "text": "was just a like a byproduct of me using a really really small demo",
    "start": "2280000",
    "end": "2285640"
  },
  {
    "text": "so let's open it up to questions there must be some questions here",
    "start": "2285640",
    "end": "2290800"
  },
  {
    "text": "yes go ahead nice okay go ahead",
    "start": "2290800",
    "end": "2298619"
  },
  {
    "text": "yeah no no it does so um I'll repeat the question for the",
    "start": "2304680",
    "end": "2310000"
  },
  {
    "text": "audience and I'll go back to a slide to help me answer that question so the question there was basically",
    "start": "2310000",
    "end": "2316960"
  },
  {
    "text": "um you know at some point in the future correct me if I'm wrong at some point in the future you're essentially going to have all of these bits in the array set",
    "start": "2316960",
    "end": "2322300"
  },
  {
    "text": "right is that did I so yeah so this is one of the problems that we have with Bloom filters if we overpopulate the",
    "start": "2322300",
    "end": "2329320"
  },
  {
    "start": "2326000",
    "end": "2326000"
  },
  {
    "text": "filter they kind of become useless right so imagine my terrible example with width of 10 I would probably only have",
    "start": "2329320",
    "end": "2335260"
  },
  {
    "text": "to set a few more items and every single bit in here would be one and then the filter is utterly useless so the number",
    "start": "2335260",
    "end": "2342160"
  },
  {
    "text": "of items that you set in the filter is highly relevant so when you set n you have to be at least reasonably confident",
    "start": "2342160",
    "end": "2348400"
  },
  {
    "text": "you're going to be somewhat close to that so you can't set n and then insert like 10 times n because the filter will",
    "start": "2348400",
    "end": "2354820"
  },
  {
    "text": "be overpopulated now the other kind of interesting thing there is obviously the the number of items I set",
    "start": "2354820",
    "end": "2361660"
  },
  {
    "text": "in this photo will impact the probability of false positive as I set more items more bits are set more false",
    "start": "2361660",
    "end": "2367420"
  },
  {
    "text": "positives between having nothing set and having the full population set your probability",
    "start": "2367420",
    "end": "2373660"
  },
  {
    "text": "of false positive actually goes from zero to the expected probability of false positive so you don't actually you",
    "start": "2373660",
    "end": "2379359"
  },
  {
    "text": "get better than the defined probability at every point before your app",
    "start": "2379359",
    "end": "2384820"
  },
  {
    "text": "population so technically it's getting worse and worse and worse until it hits Where You Are but then if you",
    "start": "2384820",
    "end": "2390760"
  },
  {
    "text": "overpopulate the filter the probability of false positive continues to get worse but then it increases an exponential",
    "start": "2390760",
    "end": "2397599"
  },
  {
    "text": "rate so you don't have to go far over the population to start having a really significant impact on the rate of false",
    "start": "2397599",
    "end": "2403960"
  },
  {
    "text": "positives but yeah oh you've got to have a good control on n",
    "start": "2403960",
    "end": "2409660"
  },
  {
    "text": "good question yeah",
    "start": "2409660",
    "end": "2413099"
  },
  {
    "text": "so yeah so at that point what do you do like what happens if you overpopulate it well this is a problem because you can't",
    "start": "2415000",
    "end": "2421900"
  },
  {
    "text": "there's really nothing that you could do if you like wipe the filter and set it back to the beginning and say okay we want to do this again but n equals like",
    "start": "2421900",
    "end": "2428619"
  },
  {
    "text": "10 billion you would need the original data set to set all of the items back in",
    "start": "2428619",
    "end": "2434200"
  },
  {
    "text": "the new filter and one of the problems that we set out to solve was our 90-day retention problem to answer the question",
    "start": "2434200",
    "end": "2439900"
  },
  {
    "text": "for basically data that we've deleted so this is not the sole mechanism that we",
    "start": "2439900",
    "end": "2446200"
  },
  {
    "text": "currently depend upon if we get the definitive no we've not seen this before it's used to short-circuit the alerting",
    "start": "2446200",
    "end": "2452079"
  },
  {
    "text": "process and just immediately kick that off so we don't have to then go and query",
    "start": "2452079",
    "end": "2457480"
  },
  {
    "text": "over like terabytes and terabytes of Json on disk so yeah like you need to think you know like is if you become fully",
    "start": "2457480",
    "end": "2464800"
  },
  {
    "text": "dependent on this as the soul mechanism you need to be aware of all of the drawbacks if you overpopulate it you",
    "start": "2464800",
    "end": "2471520"
  },
  {
    "text": "can't ever get back unless you've got the original data set now if you have the original data set then yeah you can",
    "start": "2471520",
    "end": "2477280"
  },
  {
    "text": "absolutely do this I built a bloom filter is anyone familiar with Troy Hunt's poem passwords",
    "start": "2477280",
    "end": "2483339"
  },
  {
    "text": "so a really common use case for Bloom filters is something like that so I took poem passwords and I was like right okay",
    "start": "2483339",
    "end": "2489520"
  },
  {
    "text": "you've got a query against the API there's like external network comms delays what if we just took like the poem passwords data set put it in a",
    "start": "2489520",
    "end": "2496180"
  },
  {
    "text": "bloom filter I have a blog post on it I built one you can query against the filter locally is this password in the",
    "start": "2496180",
    "end": "2502180"
  },
  {
    "text": "data set definitely no then the user can use it is this password in the data set maybe",
    "start": "2502180",
    "end": "2508599"
  },
  {
    "text": "yes then we query the API right so we've cut down the amount of external API",
    "start": "2508599",
    "end": "2514300"
  },
  {
    "text": "traffic by significant margin with a really really small Bloom filter and it's those kinds of scenarios where",
    "start": "2514300",
    "end": "2519400"
  },
  {
    "text": "they're super helpful where they help you cut down massive overheads in most cases right they're not perfect and they",
    "start": "2519400",
    "end": "2526300"
  },
  {
    "text": "won't solve all overheads but they keep allowing us to cut really significant amounts of work out a lot of the time",
    "start": "2526300",
    "end": "2534640"
  },
  {
    "text": "there was another yes",
    "start": "2534640",
    "end": "2537838"
  },
  {
    "text": "yes",
    "start": "2540880",
    "end": "2542880"
  },
  {
    "text": "okay so the question there uh is this essentially just an enormous bit of Ray yes absolutely is it updated on the fly",
    "start": "2551200",
    "end": "2557920"
  },
  {
    "text": "on the way in yes so we will query it first and then depending on the result of the query if we've not seen it then",
    "start": "2557920",
    "end": "2564339"
  },
  {
    "text": "we will set it but if we query and we've seen it we don't have any other interactions with the array now in terms",
    "start": "2564339",
    "end": "2570160"
  },
  {
    "text": "of reading the bits and setting the bits it's so lightweight right like it's we",
    "start": "2570160",
    "end": "2575200"
  },
  {
    "text": "do this at scale and the redis cache is just like sat chilling out it's like taking its time and it's not a problem",
    "start": "2575200",
    "end": "2581140"
  },
  {
    "text": "at all we would have to be doing significantly more volume that like the",
    "start": "2581140",
    "end": "2586180"
  },
  {
    "text": "the network latency of the redis cache which is on the local network is like a gazillion times more expensive than the",
    "start": "2586180",
    "end": "2591579"
  },
  {
    "text": "operation in redis so if anything we just need to move the redis cache closer if we can that's where the cost is",
    "start": "2591579",
    "end": "2598900"
  },
  {
    "text": "did that cover everything okay more questions",
    "start": "2598900",
    "end": "2604000"
  },
  {
    "text": "yes just here yeah no go ahead",
    "start": "2604000",
    "end": "2608579"
  },
  {
    "text": "yes",
    "start": "2610720",
    "end": "2613200"
  },
  {
    "text": "okay yeah",
    "start": "2623619",
    "end": "2626338"
  },
  {
    "text": "okay multiple databases yes so the question there was was",
    "start": "2630640",
    "end": "2637480"
  },
  {
    "text": "basically like could because we have particularly a 90-day retention policy like could we run essentially like what",
    "start": "2637480",
    "end": "2643660"
  },
  {
    "text": "you're referring to is what we call temporal sharding which is like we would Shard the filter based on time and like everything in this 90-day window would",
    "start": "2643660",
    "end": "2650020"
  },
  {
    "text": "go into this filter and then the next 90 day window so yeah temporal sharding is a thing",
    "start": "2650020",
    "end": "2655359"
  },
  {
    "text": "um right now especially because I've created a filter so large for hopefully like all reports for this future Scott's",
    "start": "2655359",
    "end": "2661720"
  },
  {
    "text": "problem not current Scott's problem when it gets full um future Scott's going to hate me but yeah",
    "start": "2661720",
    "end": "2667119"
  },
  {
    "text": "like you could do sharding based on time as well um I can't see any reason why that",
    "start": "2667119",
    "end": "2672160"
  },
  {
    "text": "wouldn't work we have a very similar concept but not quite for the same thing called cascading Bloom filters which is",
    "start": "2672160",
    "end": "2677680"
  },
  {
    "text": "where you have like a generally quite low resolution filter to query against to get your quick answer and then you",
    "start": "2677680",
    "end": "2682900"
  },
  {
    "text": "query against increasingly higher resolution filters to get more definitive answers so yeah there's",
    "start": "2682900",
    "end": "2688660"
  },
  {
    "text": "probably a couple of different strategies you could take there to do that",
    "start": "2688660",
    "end": "2693480"
  },
  {
    "text": "any more questions we do have a few minutes left oh there we go thank you and I'll come",
    "start": "2694480",
    "end": "2700720"
  },
  {
    "text": "back",
    "start": "2700720",
    "end": "2702900"
  },
  {
    "text": "correct so the question there was given an array of known size if you look at",
    "start": "2706540",
    "end": "2712119"
  },
  {
    "text": "the number of bits that can you calculate the population yes you can very accurately estimate the population",
    "start": "2712119",
    "end": "2717460"
  },
  {
    "text": "of the array if I know the width of the array and the number of bits set per item in the array you can with a really",
    "start": "2717460",
    "end": "2723400"
  },
  {
    "text": "high degree of accuracy count the population and from the population you can then calculate what is my current",
    "start": "2723400",
    "end": "2729099"
  },
  {
    "text": "probability false positive so yeah you can if you know the details you can calculate both of those things with",
    "start": "2729099",
    "end": "2734920"
  },
  {
    "text": "great accuracy at the back there",
    "start": "2734920",
    "end": "2740220"
  },
  {
    "text": "we could do that so yeah the question there is um basically if we wanted to recreate",
    "start": "2752319",
    "end": "2758260"
  },
  {
    "text": "the filter at the current point in time we only need to store the unique reports that we've seen so like we could have",
    "start": "2758260",
    "end": "2764980"
  },
  {
    "text": "like some Separate Tables like unique reports or something and then we wouldn't need to store the you know bazillions of duplicates and then we",
    "start": "2764980",
    "end": "2771400"
  },
  {
    "text": "would be able to rebuild the table at some point in the future like yeah that would work we could keep some kind of record of that",
    "start": "2771400",
    "end": "2777640"
  },
  {
    "text": "in previous situations I've spoken to someone and they were like what about if you just like hash the report and then",
    "start": "2777640",
    "end": "2783339"
  },
  {
    "text": "you could just store the hash and then perhaps reinsert it in the future the only problem with the hash is you we",
    "start": "2783339",
    "end": "2788800"
  },
  {
    "text": "would reduce the essentially like the character space of the report to generate you know if we like sha256 then",
    "start": "2788800",
    "end": "2794920"
  },
  {
    "text": "we've only got 256 bits of entropy and there's still basically zero chance of a collision actually I guess but yeah like",
    "start": "2794920",
    "end": "2801819"
  },
  {
    "text": "we could just store the report payloads that are unique and be able to rebuild that in the",
    "start": "2801819",
    "end": "2807040"
  },
  {
    "text": "future and uh and based on",
    "start": "2807040",
    "end": "2813040"
  },
  {
    "text": "yeah I mean they'd actually be really significantly less of them I've never thought less Futures cost problem I've never thought of a different way to",
    "start": "2813040",
    "end": "2818500"
  },
  {
    "text": "solve that like what you know what if the reddish cache dies and we lose the bloom filter or something we're not solder dependent on it right now so even",
    "start": "2818500",
    "end": "2824800"
  },
  {
    "text": "if it completely goes away I mean it would change our reporting time from like a few seconds to a few minutes because we'd have to go down the",
    "start": "2824800",
    "end": "2831099"
  },
  {
    "text": "traditional pipeline but yeah that would work it's a good idea",
    "start": "2831099",
    "end": "2836400"
  },
  {
    "text": "any more questions nope",
    "start": "2837160",
    "end": "2843099"
  },
  {
    "text": "okay so yeah well thank you very much for joining me if you do come up with any questions afterwards",
    "start": "2843099",
    "end": "2848140"
  },
  {
    "text": "um you know feel free to find me I'm here for the rest of the day is anyone going to the event tonight the NDC it's",
    "start": "2848140",
    "end": "2853660"
  },
  {
    "text": "like the speaker didn't know but they also open up tickets no okay so is anyone staying if anyone's",
    "start": "2853660",
    "end": "2859300"
  },
  {
    "text": "staying at the NDC Hotel you'll see a lot of us in the bar later feel free to come grab me at any time and thank you",
    "start": "2859300",
    "end": "2865060"
  },
  {
    "text": "very much [Applause]",
    "start": "2865060",
    "end": "2872910"
  }
]