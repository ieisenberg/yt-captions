[
  {
    "text": "hi everyone um I'm Craig uh really fun to be here uh it's already been a fun day so hopefully we have a good few days",
    "start": "5080",
    "end": "11440"
  },
  {
    "text": "to come up uh I'm from New Zealand thankfully that means my accent just works here I don't have to say American",
    "start": "11440",
    "end": "18039"
  },
  {
    "text": "words um I'm an Ang angular GD Google developer expert do a bunch of angular stuff um and I'm also an architect at",
    "start": "18039",
    "end": "24960"
  },
  {
    "text": "herods so Herod devs um we kind of specialize in handling end of life um for open software we do never ending",
    "start": "24960",
    "end": "32000"
  },
  {
    "text": "support for libraries like angularjs V2 bootstrap uh Drupal 6 or seven or",
    "start": "32000",
    "end": "37480"
  },
  {
    "text": "whatever one it is and a whole bunch more and in my role I get to work with clients all over the world to help plan",
    "start": "37480",
    "end": "43800"
  },
  {
    "text": "and roll out large scale migrations and manage to transition to like new modern technology stacks and at the moment I'm",
    "start": "43800",
    "end": "51160"
  },
  {
    "text": "working with the engineering team ruses I work out of the rusty Lightning Mcqueen training center and Technology",
    "start": "51160",
    "end": "57120"
  },
  {
    "text": "Hub in radiator Arizona um and responsible for making sure that Lightning McQueen is performing his",
    "start": "57120",
    "end": "63039"
  },
  {
    "text": "absolute best so he can keep up his winning form if you want to follow along with",
    "start": "63039",
    "end": "68600"
  },
  {
    "text": "slides um maybe this will",
    "start": "68600",
    "end": "75240"
  },
  {
    "text": "work that one if you can scan that um get it up on your phone it might be a bit easier to read some code and stuff",
    "start": "75240",
    "end": "80560"
  },
  {
    "text": "so I'll give you a couple seconds to hit that if you",
    "start": "80560",
    "end": "85078"
  },
  {
    "text": "want nice but before we get started um I have a quick message to play from our sponsors Rusty featuring Mr Lightning",
    "start": "87000",
    "end": "93159"
  },
  {
    "text": "McQueen himself Lightning McQueen here and I use Rusty's medicated bumper ointment new rear end formula nothing",
    "start": "93159",
    "end": "99560"
  },
  {
    "text": "sues a rusty bumper like Rusty wow look at that shine use rusties",
    "start": "99560",
    "end": "107000"
  },
  {
    "text": "and you too can look like me",
    "start": "107000",
    "end": "111840"
  },
  {
    "text": "kow kow indeed Lightning McQueen it's a bit of a legend seven time pistol Cup",
    "start": "112360",
    "end": "119320"
  },
  {
    "text": "winner catchphrase Master an all-around great guy whatever Mr McQueen wants Mr",
    "start": "119320",
    "end": "124600"
  },
  {
    "text": "McQueen gets and usually what Mr McQueen wants is to go faster lightning is a",
    "start": "124600",
    "end": "131720"
  },
  {
    "text": "highly tuned machine every engineer every system is engineered for Peak Performance and we're always on the hunt",
    "start": "131720",
    "end": "137640"
  },
  {
    "text": "to fulfill his need for more speed chief engineer at um Rusty sir Tom",
    "start": "137640",
    "end": "145000"
  },
  {
    "text": "has been Lightning's best friend for as long as anyone can remember and he's often the source of the best ideas and",
    "start": "145000",
    "end": "151000"
  },
  {
    "text": "suggestions for how to make things go faster speak of the devil here he comes",
    "start": "151000",
    "end": "156120"
  },
  {
    "text": "now he the great I have an to help L McQueen Y and then",
    "start": "156120",
    "end": "163120"
  },
  {
    "text": "faster it's so funny I can't me together this is AI generated voices it's great",
    "start": "163120",
    "end": "168360"
  },
  {
    "text": "um oh that's amazing M what's the idea I think it's time to get the third Dynamic",
    "start": "168360",
    "end": "175560"
  },
  {
    "text": "simulation working on Ling heads up this place wow that's a great idea maer",
    "start": "175560",
    "end": "181879"
  },
  {
    "text": "lightning has always wanted to be able to update his aerodynamics on the fly during a",
    "start": "181879",
    "end": "188280"
  },
  {
    "text": "race one little known fact about Lightning McQueen is that all of his onboard software is written using",
    "start": "188480",
    "end": "194200"
  },
  {
    "text": "typescript and running on an internal browser as part of ongoing research and",
    "start": "194200",
    "end": "201200"
  },
  {
    "text": "development lightning uses complex aerodynamic simulations to figure out the fastest shape to be on while he's",
    "start": "201200",
    "end": "207319"
  },
  {
    "text": "racing these fluid dynamic simul use lce boltzman methods to simulate the flow of",
    "start": "207319",
    "end": "213120"
  },
  {
    "text": "air over the body of a car this is an example of the kind of visualizations that the simulation",
    "start": "213120",
    "end": "220680"
  },
  {
    "text": "produces the lce boltman method is a two-step algorithm Which models how a fluid moves through space and interacts",
    "start": "221720",
    "end": "228319"
  },
  {
    "text": "with barriers in that space the first step of the assimilation is a collision step Which models the",
    "start": "228319",
    "end": "235000"
  },
  {
    "text": "collisions between molecules in a fluid don't have to worry about the mass for this just know that you have got from",
    "start": "235000",
    "end": "240480"
  },
  {
    "text": "one position in space some interaction happening and a change in that position and the second step is the",
    "start": "240480",
    "end": "247400"
  },
  {
    "text": "streaming step Which models the change in fluid density the specifics of how this is",
    "start": "247400",
    "end": "252920"
  },
  {
    "text": "implemented also don't really matter but it does take a little bit of Mass to make it work so at a very high level you",
    "start": "252920",
    "end": "259120"
  },
  {
    "text": "can think of it as a simulation across a two-dimensional grid that requires computation to then move on to the next",
    "start": "259120",
    "end": "265320"
  },
  {
    "text": "timebase step we just need to figure out how get the simulation running fast enough to be",
    "start": "265320",
    "end": "272240"
  },
  {
    "text": "as full during a race that's right Mater whenever we've tried to run in a browser in the past it",
    "start": "272240",
    "end": "279160"
  },
  {
    "text": "just hasn't been fast enough crunching all those numbers takes some time let's investigate a little",
    "start": "279160",
    "end": "285639"
  },
  {
    "text": "bit there's two main parts to our visual visualization the",
    "start": "285639",
    "end": "290759"
  },
  {
    "text": "simulation and the renderer the simulation class is the",
    "start": "290759",
    "end": "297039"
  },
  {
    "text": "implementation of the lattice boltzman algorithm which takes X and Y dimensions of the grid as well as some values",
    "start": "297039",
    "end": "302800"
  },
  {
    "text": "representing fluid velocity viscosity and simulation",
    "start": "302800",
    "end": "307800"
  },
  {
    "text": "speed the canvas renderer is a HTML canvas based renderer which basically",
    "start": "307840",
    "end": "312880"
  },
  {
    "text": "just colors in the grid based on the fluid velocity at each point in the simulation",
    "start": "312880",
    "end": "317960"
  },
  {
    "text": "grid everything executes in a in a loop one step of the simulation too small too",
    "start": "317960",
    "end": "324199"
  },
  {
    "text": "small can we read yeah okay good um everything executes in a loop so once",
    "start": "324199",
    "end": "329960"
  },
  {
    "text": "the simulation is evaluated um then the result gets drawn onto the",
    "start": "329960",
    "end": "335560"
  },
  {
    "text": "canvas so the code for that obviously that you can't read um but if you scan that it'll should open up um a real",
    "start": "335560",
    "end": "342039"
  },
  {
    "text": "running version of the simulation see if I can actually get it as well going to work",
    "start": "342039",
    "end": "350360"
  },
  {
    "text": "cool oh I'm not going to be able to see both of these okay so this is um let's",
    "start": "350360",
    "end": "355520"
  },
  {
    "text": "see if we can zoom the hell out of that",
    "start": "355520",
    "end": "359918"
  },
  {
    "text": "cool so this is uh just a little angular implementation of the simulation um",
    "start": "360600",
    "end": "366360"
  },
  {
    "text": "nothing too fancy here but don't worry if you haven't seen any angular before basically we're reaching into the Dom",
    "start": "366360",
    "end": "371880"
  },
  {
    "text": "grabbing a canvas finding out how big the canvas is and then creating the simulation",
    "start": "371880",
    "end": "378520"
  },
  {
    "text": "simulation's kind of the interesting bit and then we initialize this little black",
    "start": "378520",
    "end": "383960"
  },
  {
    "text": "line as some kind of starting thing to collide the fluids against uh and then",
    "start": "383960",
    "end": "389080"
  },
  {
    "text": "we have this canvas renderer which is the thing that makes it draw the shape on",
    "start": "389080",
    "end": "394680"
  },
  {
    "text": "here we have some dumb render Loop um with uh requesting an animation frame",
    "start": "394680",
    "end": "400840"
  },
  {
    "text": "every as often as it can ideally 60 frames a second and in that frame we run",
    "start": "400840",
    "end": "406400"
  },
  {
    "text": "some simulation and we we render the result of that you can see here also I've got some timing code and if we go",
    "start": "406400",
    "end": "414560"
  },
  {
    "text": "like this hopefully yeah we'll see that we're getting kind of thir 30 to 40",
    "start": "414560",
    "end": "420319"
  },
  {
    "text": "milliseconds a frame for the simulation code which uh is is basically too slow",
    "start": "420319",
    "end": "425440"
  },
  {
    "text": "as we're going to see in a little second if I close that again we can look in",
    "start": "425440",
    "end": "432039"
  },
  {
    "text": "here at the simulation and it's a whole bunch of",
    "start": "432039",
    "end": "437440"
  },
  {
    "text": "code um there's nothing too special about it it's basically a whole bunch of",
    "start": "437440",
    "end": "442840"
  },
  {
    "text": "AR array manipulation a bit of math to move some things around but it looks kind of like any programming language in",
    "start": "442840",
    "end": "449840"
  },
  {
    "text": "this case it just happens to be typescript um there's also some color",
    "start": "449840",
    "end": "455440"
  },
  {
    "text": "code which doesn't really matter but we'll we'll talk about that in a little bit later and the canvas which is",
    "start": "455440",
    "end": "460560"
  },
  {
    "text": "basically just a thing that Loops over the data in the simulation picks out the",
    "start": "460560",
    "end": "465599"
  },
  {
    "text": "appropriate color for the the speed of the liquid at that point and then draws that to the canvas the nice thing about",
    "start": "465599",
    "end": "472400"
  },
  {
    "text": "the canvas renderer is that's fast it takes about 2 milliseconds to render a frame which gives us something like 14",
    "start": "472400",
    "end": "479479"
  },
  {
    "text": "15 second milliseconds um per frame to run the simulation but like I said we're",
    "start": "479479",
    "end": "484680"
  },
  {
    "text": "not getting anywhere close to that in this uh current",
    "start": "484680",
    "end": "489879"
  },
  {
    "text": "version yeah so as you can kind of see here we've got some logging and we can see that our simulate meth method is",
    "start": "490280",
    "end": "495520"
  },
  {
    "text": "taking about 32 milliseconds a frame um if we want 16 millisecond 60 frames a",
    "start": "495520",
    "end": "501000"
  },
  {
    "text": "second that gives us 16 milliseconds a frame so we need to be about twice as fast but the good news here is that our",
    "start": "501000",
    "end": "507560"
  },
  {
    "text": "render code is like I said already pretty quick so renderer code is good canvas",
    "start": "507560",
    "end": "514240"
  },
  {
    "text": "apis are fast enough for the browser but our simulation code is way too heavy to get it running at 60 frames a second you",
    "start": "514240",
    "end": "521440"
  },
  {
    "text": "don't know if it's fast enough for me to use it in real time I need it",
    "start": "521440",
    "end": "527839"
  },
  {
    "text": "faster you hear the B it's got to be faster got to be faster all right let's",
    "start": "527959",
    "end": "534000"
  },
  {
    "text": "get into it you get to work on that I need to go put on some rusties cow",
    "start": "534000",
    "end": "541440"
  },
  {
    "text": "good there's one thing I know about Lightning McQueen is that he sure loves",
    "start": "541760",
    "end": "547519"
  },
  {
    "text": "rusties wait a minute that's it rust M",
    "start": "547519",
    "end": "553200"
  },
  {
    "text": "what if we try running the simulation in Rust that's a great idea thanks I think",
    "start": "553200",
    "end": "560040"
  },
  {
    "text": "so too you'll have to teach me a bit of R can h of course let's do a quick",
    "start": "560040",
    "end": "567399"
  },
  {
    "text": "comparison between typescript and rust to get earings so typescript in case you don't",
    "start": "567399",
    "end": "574480"
  },
  {
    "text": "know is a super set of JavaScript focusing on static typing and web development rust on the other hand is a",
    "start": "574480",
    "end": "580720"
  },
  {
    "text": "systems programming language emphasizing memory safety performance and",
    "start": "580720",
    "end": "586640"
  },
  {
    "text": "concurrency typescript um relies on javascript's runtime which means it has garbage collection while rust provides",
    "start": "586640",
    "end": "593360"
  },
  {
    "text": "memory safety without needing to use a garbage collector using a borrow Checker types supports asynchronous",
    "start": "593360",
    "end": "600680"
  },
  {
    "text": "programming but basically lacks native paral parallelism while rust has",
    "start": "600680",
    "end": "606440"
  },
  {
    "text": "built-in support fck concurrency and running things in parallel typescript kind of inherits all",
    "start": "606440",
    "end": "613839"
  },
  {
    "text": "the performance characteristics of whatever JavaScript runtime it's in so it's an interpreted language um that",
    "start": "613839",
    "end": "619880"
  },
  {
    "text": "means it's generally running a bit slower whereas rust can be highly um",
    "start": "619880",
    "end": "624959"
  },
  {
    "text": "optimized you have pretty fine grin control over memory access um so you can make make it run pretty",
    "start": "624959",
    "end": "631839"
  },
  {
    "text": "fast in terms of the kind of ecosystem the tools that we use in both of these different worlds in typescript land we",
    "start": "631839",
    "end": "638360"
  },
  {
    "text": "might use something like NVM to manage the different versions of node that we're using or different libraries um in",
    "start": "638360",
    "end": "644560"
  },
  {
    "text": "Rust the equivalent is rust up for typescript or more generally node",
    "start": "644560",
    "end": "650120"
  },
  {
    "text": "we'd use something like mpm or yarn to install dependencies in Rust we use",
    "start": "650120",
    "end": "655360"
  },
  {
    "text": "cargo to install what are called crates just their way of calling the dependency",
    "start": "655360",
    "end": "660880"
  },
  {
    "text": "to in in t script land node land to compile and build our code and we might use one of many many tools we might use",
    "start": "660880",
    "end": "667920"
  },
  {
    "text": "the typescript compiler directly we might use V or webpack or B or anything like that but in rustland again we're",
    "start": "667920",
    "end": "674800"
  },
  {
    "text": "just going to use cargo so cargo build is how you build things in again in typescript frontend",
    "start": "674800",
    "end": "681800"
  },
  {
    "text": "land um we have a whole bunch of different options for how we test our code we might use G or v test we might",
    "start": "681800",
    "end": "687040"
  },
  {
    "text": "write some end end tests using playright but in rustland we're going to use cargo test the whole rust ecosystem is",
    "start": "687040",
    "end": "693760"
  },
  {
    "text": "basically based around around uh cargo and in general there's a much tighter",
    "start": "693760",
    "end": "699040"
  },
  {
    "text": "coupling between the language and the tooling and the community and how they use it well that's a pretty neat mod",
    "start": "699040",
    "end": "705440"
  },
  {
    "text": "does it look like yeah it's a good point let's actually look at some code so hopefully um you're reasonably",
    "start": "705440",
    "end": "713079"
  },
  {
    "text": "familiar at what things look like in typescript that's going to be my frame of reference here but if you've seen any programming language most of the these",
    "start": "713079",
    "end": "719399"
  },
  {
    "text": "things should look quite similar uh in typescript we can kind of create variables we can create constant",
    "start": "719399",
    "end": "725880"
  },
  {
    "text": "variables we can create variables using let and there were some kind of confusing implications on how that value",
    "start": "725880",
    "end": "733279"
  },
  {
    "text": "is assigned and the mutability of that that um that variable specifically if there's objects assigned and how",
    "start": "733279",
    "end": "739199"
  },
  {
    "text": "properties are dealt with in Rust we have a rough equivalent like like this",
    "start": "739199",
    "end": "744680"
  },
  {
    "text": "so by default if we use let and rust that thing is going to be immutable and if we want to mutate it we have to",
    "start": "744680",
    "end": "751120"
  },
  {
    "text": "declare it using the mute um keyword to opt into that mutability yeah so by default we're",
    "start": "751120",
    "end": "758279"
  },
  {
    "text": "mutable or we can add this little keyword",
    "start": "758279",
    "end": "762880"
  },
  {
    "text": "here both languages have module system so in typescript we can import code just from another file we can use a relative",
    "start": "763399",
    "end": "770120"
  },
  {
    "text": "path to just pull in this thing from the simulation or we could use a package name to import something from from a",
    "start": "770120",
    "end": "776760"
  },
  {
    "text": "node module say in Rust it's a little bit different so there's not necessarily A onetoone",
    "start": "776760",
    "end": "782920"
  },
  {
    "text": "mapping from files to modules we can import a full module and",
    "start": "782920",
    "end": "789040"
  },
  {
    "text": "move specific module members into scope which means they can be used with the Ed",
    "start": "789040",
    "end": "795399"
  },
  {
    "text": "keyword and in um in a rust program you kind of have to have this main method in in typescript files just get interpreted",
    "start": "795399",
    "end": "802440"
  },
  {
    "text": "from top to bottom so in this top one uh the simulation would just be created but in Rust we have to have this main entry",
    "start": "802440",
    "end": "809880"
  },
  {
    "text": "point in our typescript example we use the new keyword to create a new instance of a class whereas there's not really an",
    "start": "809880",
    "end": "816480"
  },
  {
    "text": "equivalent in the language of of rust but there is this um kind of Convention",
    "start": "816480",
    "end": "822120"
  },
  {
    "text": "of a a a method kind of thing on an object called new um but yeah this is",
    "start": "822120",
    "end": "827240"
  },
  {
    "text": "just a convention it's not actually a keyword part of the language of course it's a these are",
    "start": "827240",
    "end": "833959"
  },
  {
    "text": "programming languages we have to do control flow we have to decide when things are going to happen typescript of",
    "start": "833959",
    "end": "839240"
  },
  {
    "text": "course has the usual things like if statements while Loops um and specifically like when you're calling",
    "start": "839240",
    "end": "845800"
  },
  {
    "text": "functions if um you're passing a value or an object to a function in typescript you're passing a reference to that",
    "start": "845800",
    "end": "853120"
  },
  {
    "text": "object rough has something roughly equivalent these look pretty much the same but of course there are a few",
    "start": "853120",
    "end": "859040"
  },
  {
    "text": "syntactic differences um rust has optional um parentheses so you don't need to have them all the time you can",
    "start": "859040",
    "end": "865120"
  },
  {
    "text": "add them if you like um but these things mostly work how you expect the difference here is that when you",
    "start": "865120",
    "end": "871000"
  },
  {
    "text": "call a function in Rust you need to explicitly state that you're passing a reference and we're going to come back and touch on more of this soon this is",
    "start": "871000",
    "end": "877399"
  },
  {
    "text": "where um the memory management comes into play so with just a regular old function",
    "start": "877399",
    "end": "884399"
  },
  {
    "text": "there's a whole bunch of sim similarities between rust and and typescript in fact they look almost",
    "start": "884399",
    "end": "890720"
  },
  {
    "text": "identical uh the difference here is that rust uses just FN as a kind of shorthand to declare a function and some",
    "start": "890720",
    "end": "897920"
  },
  {
    "text": "differences in the naming conventions so rust uses this like snake case for for naming functions and",
    "start": "897920",
    "end": "905360"
  },
  {
    "text": "variables there's there's a few little differences in the types of objects that can be passed around so when you have a",
    "start": "905360",
    "end": "912320"
  },
  {
    "text": "parameter in a function that must be a reference um or must be mutable like in",
    "start": "912320",
    "end": "917639"
  },
  {
    "text": "this case you have the Ampersand and the mutable keyword um which declares how",
    "start": "917639",
    "end": "922920"
  },
  {
    "text": "the objects are going to be passed to this function one other little difference is",
    "start": "922920",
    "end": "928079"
  },
  {
    "text": "that there are much more specific types in Rust so in in typescript we basically have number um and in in Rust we can use",
    "start": "928079",
    "end": "937160"
  },
  {
    "text": "you know uh integers unsigned integers floats um a few a few other ones in there in this case u64 is obviously a",
    "start": "937160",
    "end": "944160"
  },
  {
    "text": "unsigned 64 bit integer obviously who maybe not obvious um one other nice",
    "start": "944160",
    "end": "950160"
  },
  {
    "text": "thing is that uh rust has this kind of range syntax which if anyone ever did any copy script or any python might look",
    "start": "950160",
    "end": "957160"
  },
  {
    "text": "familiar um I really really like sytax I think we should steal",
    "start": "957160",
    "end": "962399"
  },
  {
    "text": "it obviously we're going to be doing things with stuff because it's programming um in typescript we can kind",
    "start": "962399",
    "end": "968240"
  },
  {
    "text": "of Define these object shapes using a type um or perhaps an interface and the",
    "start": "968240",
    "end": "973639"
  },
  {
    "text": "equivalent of that in Rust is a struct and so by default um in in typescript",
    "start": "973639",
    "end": "979319"
  },
  {
    "text": "everything's public by default in Rust everything is private so if you want to explicitly make values on an object to",
    "start": "979319",
    "end": "986079"
  },
  {
    "text": "be public you have to use the pub keyword so public um these these",
    "start": "986079",
    "end": "991240"
  },
  {
    "text": "properties on this object would be would be uh public by using the pub keyword",
    "start": "991240",
    "end": "997160"
  },
  {
    "text": "and again we use more specific types so we have unsigned 64 bit inages again rather than just the weird floating",
    "start": "997160",
    "end": "1003600"
  },
  {
    "text": "Point fun that is the JavaScript equivalent so in typescript we can",
    "start": "1003600",
    "end": "1010920"
  },
  {
    "text": "define a class um and that's going to be both uh type and the implementation of",
    "start": "1010920",
    "end": "1017120"
  },
  {
    "text": "that type so you can use this colors class you can instantiate a version of it or you can pass around a reference to",
    "start": "1017120",
    "end": "1024000"
  },
  {
    "text": "colors and use that as a declaration of the type that this object should be but",
    "start": "1024000",
    "end": "1029199"
  },
  {
    "text": "in Rust um the type and the implementation are always separate so the type is defined as the struct like",
    "start": "1029199",
    "end": "1035678"
  },
  {
    "text": "we saw before um in this case these are all going to be private because we haven't marked them as public that is",
    "start": "1035679",
    "end": "1040839"
  },
  {
    "text": "probably a bug um but we have the implementation of this thing which uses",
    "start": "1040839",
    "end": "1046160"
  },
  {
    "text": "the impl imple keyword",
    "start": "1046160",
    "end": "1050840"
  },
  {
    "text": "like we sort of talked about before we don't have like a Constructor and we don't call new but we do have this uh",
    "start": "1051240",
    "end": "1057160"
  },
  {
    "text": "Convention of a new function um and that's used for",
    "start": "1057160",
    "end": "1062240"
  },
  {
    "text": "instantiation in in the case of the new function here we want to return um an",
    "start": "1062240",
    "end": "1067400"
  },
  {
    "text": "object that matches the struct so here we're saying um this new function will return a struct of type color and then",
    "start": "1067400",
    "end": "1074559"
  },
  {
    "text": "at the bottom we're defining and returning AR struct called colors which has the these just RGB values on",
    "start": "1074559",
    "end": "1081640"
  },
  {
    "text": "it one other cute little thing to note here is this exclamation mark um bit a",
    "start": "1081640",
    "end": "1087080"
  },
  {
    "text": "syntax which is uh basically a way of executing a macro so we're kind of doing",
    "start": "1087080",
    "end": "1092480"
  },
  {
    "text": "some metaprogramming here this takes this uh kind of declared object and makes a vector out of it kind of like an",
    "start": "1092480",
    "end": "1100000"
  },
  {
    "text": "array go that looks like a programming language exactly ma there's nothing too",
    "start": "1100000",
    "end": "1107120"
  },
  {
    "text": "scary here um especially like in our case where we're going to be converting something fairly mathy into",
    "start": "1107120",
    "end": "1114120"
  },
  {
    "text": "rust so this is the kind of you know some snippet of the typescript implementation of the simulation um",
    "start": "1114120",
    "end": "1121440"
  },
  {
    "text": "again you can scan that and read the whole thing if you want to it's like I showed you before it's",
    "start": "1121440",
    "end": "1126840"
  },
  {
    "text": "basically just a whole bunch of arrays looping over things moving values around the kind of stuff you might expect to",
    "start": "1126840",
    "end": "1132960"
  },
  {
    "text": "see in like kind of mathy code and this is R version so again you can",
    "start": "1132960",
    "end": "1140280"
  },
  {
    "text": "scan the code and compare them if you want but it's a fairly straightforward translation the the main differences are",
    "start": "1140280",
    "end": "1146200"
  },
  {
    "text": "just little syntactic things like using the range to Loop over a list um using",
    "start": "1146200",
    "end": "1151440"
  },
  {
    "text": "self instead of this or just some extra Precision around the different types of numbers so again types script we would",
    "start": "1151440",
    "end": "1158000"
  },
  {
    "text": "have declared just number types here we've got um unsigned 64-bit integers all over the",
    "start": "1158000",
    "end": "1163440"
  },
  {
    "text": "place and it would be kind of easy to look at these two bits of code and go okay what's the benefit what's kind of",
    "start": "1163440",
    "end": "1168720"
  },
  {
    "text": "kind of special about rust this just looks like pretty much any language you can you can pick and most of the magic",
    "start": "1168720",
    "end": "1176039"
  },
  {
    "text": "here comes in the realm of memory management as I've kind of alluded to a little",
    "start": "1176039",
    "end": "1181919"
  },
  {
    "text": "bit so Russ has some guarantees around memory safety by enforcing some pretty",
    "start": "1181919",
    "end": "1189400"
  },
  {
    "text": "basic but quite strict rules for how you pass data around and specifically how you borrow data and who owns data so",
    "start": "1189400",
    "end": "1197559"
  },
  {
    "text": "we're going to look at ownership first a little bit of a contrived",
    "start": "1197559",
    "end": "1202640"
  },
  {
    "text": "example but let's say you just wanted to just to really really make sure that the initialization had happened properly and",
    "start": "1202640",
    "end": "1209120"
  },
  {
    "text": "you wanted to call it twice um if we were to run a cargo build on this code",
    "start": "1209120",
    "end": "1216559"
  },
  {
    "text": "we'd get something like this which is a pretty loud pretty detailed error with a whole bunch of like nice things like",
    "start": "1216559",
    "end": "1223360"
  },
  {
    "text": "pointing to the place in the code where it was um the the compiler areas that you get in Rust can seem pretty scary",
    "start": "1223360",
    "end": "1230120"
  },
  {
    "text": "pretty daunting but they're actually usually very very helpful if you read them they're very specific but you have",
    "start": "1230120",
    "end": "1235720"
  },
  {
    "text": "to like sometimes look up the docks and read some new big words but eventually you kind of get the hang of",
    "start": "1235720",
    "end": "1241720"
  },
  {
    "text": "things what this era is saying in this case is that when we passed the simulation into the initialized function",
    "start": "1241720",
    "end": "1247919"
  },
  {
    "text": "the first time we gave up ownership so we lend a book to a friend we gave up",
    "start": "1247919",
    "end": "1253000"
  },
  {
    "text": "the in this case simulation object and you can't give away things twice you only have one one thing that you own you",
    "start": "1253000",
    "end": "1260000"
  },
  {
    "text": "give it away you can't just then give it away again and so the compiler rightfully complains and says hey you",
    "start": "1260000",
    "end": "1265480"
  },
  {
    "text": "can't do that and if we want to be able to give away ownership",
    "start": "1265480",
    "end": "1271120"
  },
  {
    "text": "Twice first we have to make a clone of our thing I guess take a photocopy of the book um which creates a new instance",
    "start": "1271120",
    "end": "1277520"
  },
  {
    "text": "in memory and then we can give away the Clone and the original and in this case the borrow",
    "start": "1277520",
    "end": "1283799"
  },
  {
    "text": "Checker would be totally happy so again fairly conceptually simple but when pops",
    "start": "1283799",
    "end": "1288880"
  },
  {
    "text": "up a new code you kind of go what the hell is going on here quite a mental shift but sometimes you don't actually",
    "start": "1288880",
    "end": "1295240"
  },
  {
    "text": "want to transfer ownership you still want to be the owner of the thing but you want to let someone borrow it for a",
    "start": "1295240",
    "end": "1300559"
  },
  {
    "text": "little while kind of like again with the book metaphor hey give this back to me when you're done with",
    "start": "1300559",
    "end": "1305880"
  },
  {
    "text": "it so this means that the function um has to expect to take a reference to the",
    "start": "1305880",
    "end": "1311159"
  },
  {
    "text": "object of a given type and the caller can take a reference",
    "start": "1311159",
    "end": "1316440"
  },
  {
    "text": "to the object using the ersan symbol which then gets passed as a reference",
    "start": "1316440",
    "end": "1322000"
  },
  {
    "text": "and so this is kind of similar to how passing an object Works in JavaScript or typescript you're always passing this",
    "start": "1322000",
    "end": "1327240"
  },
  {
    "text": "thing by a reference so you're just lending the ownership of the reference while that function is being",
    "start": "1327240",
    "end": "1333960"
  },
  {
    "text": "executed and you can take as many immutable references as you want but with initialize the initial barrier",
    "start": "1334080",
    "end": "1341120"
  },
  {
    "text": "function it actually expects a mutable reference and so if you try to take two mutable references and then pass each of",
    "start": "1341120",
    "end": "1347799"
  },
  {
    "text": "them to the initial ized function um we've broken another rule so yeah we've",
    "start": "1347799",
    "end": "1353240"
  },
  {
    "text": "taken this kind of second mutable reference um one copy second copy um but",
    "start": "1353240",
    "end": "1358600"
  },
  {
    "text": "then the borrow Cher comes in and says hey um you actually can't do that cannot borrow simulation as mutable more than",
    "start": "1358600",
    "end": "1364200"
  },
  {
    "text": "one at once at a time again really kind of descriptive ear message tells you what's going on here tells you where the",
    "start": "1364200",
    "end": "1370240"
  },
  {
    "text": "problems are everything's kind of nice and the fix for this is a little bit frustrating so all you have to do is",
    "start": "1370240",
    "end": "1377720"
  },
  {
    "text": "take the first m reference and then use it and then take the second mutable reference and then use it so just",
    "start": "1377720",
    "end": "1384640"
  },
  {
    "text": "slightly restructuring how your code was defined you can kind of get around this here and that makes us have a happy",
    "start": "1384640",
    "end": "1390919"
  },
  {
    "text": "compiler I found this one really weird um but then I realize I write JavaScript",
    "start": "1390919",
    "end": "1396120"
  },
  {
    "text": "all the time and that's a pretty quirky language and so you kind of get used to that and so like every language these",
    "start": "1396120",
    "end": "1402200"
  },
  {
    "text": "things have these quirks and I think the benefits and rust um really do do pay off",
    "start": "1402200",
    "end": "1408760"
  },
  {
    "text": "so the borrow Checker is a pretty different concept there's not really an equivalent in JavaScript land or",
    "start": "1408840",
    "end": "1414200"
  },
  {
    "text": "typescript land and that's just a fundamental difference in how the language works we couldn't just shoehorn that in and expect to get rid of garbage",
    "start": "1414200",
    "end": "1420480"
  },
  {
    "text": "collection but thankfully the type systems are reasonably straightforward to understand reasonably equivalent to",
    "start": "1420480",
    "end": "1426799"
  },
  {
    "text": "what we might have seen in other languages as well but again there are a few differences so typescript has what's",
    "start": "1426799",
    "end": "1433240"
  },
  {
    "text": "called a structural type system so if two objects have the same shape they can be applied to the same type that means",
    "start": "1433240",
    "end": "1439919"
  },
  {
    "text": "if they've got the same properties and values on them um regardless of what the thing is called you can still pass those",
    "start": "1439919",
    "end": "1445840"
  },
  {
    "text": "objects around and treat them as the same type rust on the other hand what's called has what's called a nominal type",
    "start": "1445840",
    "end": "1452000"
  },
  {
    "text": "system so Nom nominal name basically um if two types are totally identical but",
    "start": "1452000",
    "end": "1458320"
  },
  {
    "text": "are you know named a different thing they're copies of that same type they are treated as two different separate",
    "start": "1458320",
    "end": "1464360"
  },
  {
    "text": "types and they cannot be assigned to each other so you have to actually have the same Ty so I think this is similar",
    "start": "1464360",
    "end": "1469480"
  },
  {
    "text": "to you know Java and c and a lot of other languages but the way typescript exists kind of that layer on top of",
    "start": "1469480",
    "end": "1475720"
  },
  {
    "text": "JavaScript with a whole duck typed model that made sense for typescript and also has some powerful things that come with",
    "start": "1475720",
    "end": "1483760"
  },
  {
    "text": "it typescript has got like I said before some relatively simple number types so we have this all-encompassing number",
    "start": "1483760",
    "end": "1490760"
  },
  {
    "text": "which until like two years ago was basically everything you could do more recently we've got a big in number type",
    "start": "1490760",
    "end": "1496679"
  },
  {
    "text": "which is actually a u64 as well um that's the way it's implemented under the hood but rust allows us to do a",
    "start": "1496679",
    "end": "1503480"
  },
  {
    "text": "whole bunch more things we can be very specific with the amount of memory that type users um and we can do signed or",
    "start": "1503480",
    "end": "1509200"
  },
  {
    "text": "unsigned inages um we can do floats we can do this uze thing which is useful",
    "start": "1509200",
    "end": "1514520"
  },
  {
    "text": "when accessing um indexes in an array a whole bunch of different things thankfully um booleans are just",
    "start": "1514520",
    "end": "1522120"
  },
  {
    "text": "the same um we have bull and true and false in in both languages so those things um copy over pretty easily but",
    "start": "1522120",
    "end": "1530200"
  },
  {
    "text": "then strings again are much more complicated typ script we have this string type and I'm not being super",
    "start": "1530200",
    "end": "1535720"
  },
  {
    "text": "generous here because typescript does have string it also has like specific string types so string literal types",
    "start": "1535720",
    "end": "1542399"
  },
  {
    "text": "typescript also has string template literal types but fundamentally they're all just a string of characters and you",
    "start": "1542399",
    "end": "1548159"
  },
  {
    "text": "can treat them all the same way whereas in Rust we have this capital S string type we have the lowercase STW type",
    "start": "1548159",
    "end": "1555440"
  },
  {
    "text": "which you use quite a lot and then a Char type car ch I don't know how to say that but for a character just an",
    "start": "1555440",
    "end": "1560559"
  },
  {
    "text": "individual character of code um I guess I guess the equivalent of a character in in Rust would be just",
    "start": "1560559",
    "end": "1567440"
  },
  {
    "text": "like a single character string literal type in typescript",
    "start": "1567440",
    "end": "1572640"
  },
  {
    "text": "so on the typescript side we have arrays so we have a generic array of type T and",
    "start": "1572640",
    "end": "1578240"
  },
  {
    "text": "the equivalent to that in our rust code would be a vector of type T and again we kind of touched on this a",
    "start": "1578240",
    "end": "1585640"
  },
  {
    "text": "little bit we have objects and classes and typescript land and the equivalent and rust and in the typ in the type",
    "start": "1585640",
    "end": "1591120"
  },
  {
    "text": "cheer uh strs and implementations okay so let's ride the",
    "start": "1591120",
    "end": "1596679"
  },
  {
    "text": "runner and Rush cool um let's give that a little go so let's quickly look at the",
    "start": "1596679",
    "end": "1603240"
  },
  {
    "text": "typescript implementation first so we have some canvas renderer class with a single function called Paint which takes",
    "start": "1603240",
    "end": "1610200"
  },
  {
    "text": "the simulation as an argument and returns nothing because it's going to going to have a side effect we're going to draw to the",
    "start": "1610200",
    "end": "1616360"
  },
  {
    "text": "screen uh it just Loops of all the positions of the simulation grid so we're going from X to Y um through all",
    "start": "1616360",
    "end": "1623120"
  },
  {
    "text": "the Y values and all the X values so kind of painting across the 2D array if we find that the cell in that",
    "start": "1623120",
    "end": "1630640"
  },
  {
    "text": "position is a barrier so one of the things that we want to bounce against um we just draw that barrier as black and",
    "start": "1630640",
    "end": "1637120"
  },
  {
    "text": "leave it there otherwise we assess the simulation to get the velocity or that point in the",
    "start": "1637120",
    "end": "1642799"
  },
  {
    "text": "simulation look up the appropriate color for that and then basically color in",
    "start": "1642799",
    "end": "1647919"
  },
  {
    "text": "that pixel on the screen the way this is actually implemented is kind of um using this put",
    "start": "1647919",
    "end": "1655120"
  },
  {
    "text": "image data you basically create the whole image once and then draw it to the canvas once it's way faster than",
    "start": "1655120",
    "end": "1660440"
  },
  {
    "text": "updating each individual pixel one at a time and so what would that look like in",
    "start": "1660440",
    "end": "1666559"
  },
  {
    "text": "Rust we obviously don't have kind of canvas apis or anything like that in Rust so to keep it really simple we're",
    "start": "1666559",
    "end": "1673080"
  },
  {
    "text": "just going to render to the terminal um and similarly we have our terminal renderer um renderer terminal I",
    "start": "1673080",
    "end": "1679880"
  },
  {
    "text": "guess they called it here um with this paint function and it basically does the same thing so the very first thing it",
    "start": "1679880",
    "end": "1686279"
  },
  {
    "text": "does is a terminal control character which just clears everything so that we can kind of update the whole",
    "start": "1686279",
    "end": "1692960"
  },
  {
    "text": "thing and instead of storing that result as the image the image data that we had before to draw to the canvas we're just",
    "start": "1692960",
    "end": "1699080"
  },
  {
    "text": "going to build up a string in this case we're using um a capital S string which",
    "start": "1699080",
    "end": "1705000"
  },
  {
    "text": "is a mutable string which means that we can appin to it as we go because the lowercase string is a immutable string",
    "start": "1705000",
    "end": "1711200"
  },
  {
    "text": "you can't update that and kind of similar thing here we're just going to Loop over the two",
    "start": "1711200",
    "end": "1716840"
  },
  {
    "text": "dimensions of the array check if the um cell is a barrier cell if it's barrier",
    "start": "1716840",
    "end": "1722760"
  },
  {
    "text": "we draw a black Square to the terminal um otherwise we do that same kind of",
    "start": "1722760",
    "end": "1727840"
  },
  {
    "text": "color manipulation for the the position of the for the speed of the position in the array and then we draw a colored um",
    "start": "1727840",
    "end": "1735279"
  },
  {
    "text": "Square to the to the terminal again where terminal control",
    "start": "1735279",
    "end": "1740679"
  },
  {
    "text": "characters um after each line we append a whole new line character so we're kind of doing the first line new line first",
    "start": "1740679",
    "end": "1746679"
  },
  {
    "text": "line keep going on and then at the very end of that we'd print the whole thing to the",
    "start": "1746679",
    "end": "1752960"
  },
  {
    "text": "terminal with the rust implementation of this we can do a cargo run which is",
    "start": "1752960",
    "end": "1758399"
  },
  {
    "text": "again using the cargo implementation um the whole cargo tooling and if we use the release profile we get something",
    "start": "1758399",
    "end": "1765399"
  },
  {
    "text": "like this um the this is again just rendering to the terminal so it's pretty",
    "start": "1765399",
    "end": "1770600"
  },
  {
    "text": "kind of loosely granular we don't have as many pixels as we did um but the simulation is still doing the full",
    "start": "1770600",
    "end": "1775880"
  },
  {
    "text": "simulation for the same size grid as with the JavaScript implementation but we're kind of down at around 13",
    "start": "1775880",
    "end": "1782159"
  },
  {
    "text": "milliseconds of frame whereas before I think we were at 30 something so basically it's about yeah about three",
    "start": "1782159",
    "end": "1789120"
  },
  {
    "text": "times faster just to run that simulation code and this is an optimized build so you can run just cargo run that will",
    "start": "1789120",
    "end": "1795039"
  },
  {
    "text": "give you the kind of debug build even that was faster than in the JavaScript implementation so I think it's pretty",
    "start": "1795039",
    "end": "1800840"
  },
  {
    "text": "safe to say that rust is categorically faster which is Great Chow did someone",
    "start": "1800840",
    "end": "1807120"
  },
  {
    "text": "say bastter we sure did you s she's slaming",
    "start": "1807120",
    "end": "1813880"
  },
  {
    "text": "H now flaming hot who how can we get that running that fast in my browser get",
    "start": "1813880",
    "end": "1820720"
  },
  {
    "text": "out really good question Mr McQueen um so the rust ecosystem has got one more",
    "start": "1820720",
    "end": "1825919"
  },
  {
    "text": "magic trick for us to try out so web assembly has been floating around",
    "start": "1825919",
    "end": "1831960"
  },
  {
    "text": "as an idea for a few years now um but and you know you can approach that from a whole bunch of different ways you can",
    "start": "1831960",
    "end": "1837960"
  },
  {
    "text": "directly write in web assembly or you can compile to it from various different languages but the Rusk ecosystem",
    "start": "1837960",
    "end": "1844279"
  },
  {
    "text": "probably provides at least to me the most complete and the most accessible way of creating a WM bundle that can run",
    "start": "1844279",
    "end": "1850919"
  },
  {
    "text": "in the browser so we only have to do a few little changes to our code um and then",
    "start": "1850919",
    "end": "1856799"
  },
  {
    "text": "we can prepare it to be compiled using WM so we have to import the WM module",
    "start": "1856799",
    "end": "1862519"
  },
  {
    "text": "using this Ed syntax we saw before and then we just use this this binding",
    "start": "1862519",
    "end": "1867960"
  },
  {
    "text": "syntax these kind of weird little annotations and that's to expose the public parts of our code bits of the",
    "start": "1867960",
    "end": "1873960"
  },
  {
    "text": "code that we want to call from the the web layer um I guess in in some ways it's kind of like The Decorator syntax",
    "start": "1873960",
    "end": "1880880"
  },
  {
    "text": "and and various languages you're annotating um the code kind of with some",
    "start": "1880880",
    "end": "1886000"
  },
  {
    "text": "metadata and then I know I said that we basically use cargo for everything um in this case we're not going to we're going",
    "start": "1886000",
    "end": "1891720"
  },
  {
    "text": "to step away from cargo and we're going to use WM Pac which is um I guess some",
    "start": "1891720",
    "end": "1897279"
  },
  {
    "text": "web pack SL reference but this is basically another Builder that takes the rust compiler compiles the rust code",
    "start": "1897279",
    "end": "1903960"
  },
  {
    "text": "into an Intermediate Language and then compiles it into the WM and it actually produces like a importable JavaScript",
    "start": "1903960",
    "end": "1910639"
  },
  {
    "text": "bundle that happens to reference some WM code and so um like it kind of look",
    "start": "1910639",
    "end": "1918000"
  },
  {
    "text": "pretty straightforward but it's actually a little bit weird to reference this compiled rust WM code from the",
    "start": "1918000",
    "end": "1923639"
  },
  {
    "text": "typescript side so the import is kind of as usual we can say hey we want to pull this simulation from our from our fluid",
    "start": "1923639",
    "end": "1930960"
  },
  {
    "text": "package um but obviously the code that we exported follows these rust conventions so instead of using new like",
    "start": "1930960",
    "end": "1938120"
  },
  {
    "text": "we might expect to instantiate something we're going to use do new which is that that referenc um that kind of convention",
    "start": "1938120",
    "end": "1944559"
  },
  {
    "text": "from from the the rust side of things",
    "start": "1944559",
    "end": "1949760"
  },
  {
    "text": "and we have to do a few other things as well so we have to make sure that the numbers that we're passing in aren't",
    "start": "1951279",
    "end": "1958039"
  },
  {
    "text": "regular JavaScript numbers we need to wrap them as big inss because like I said a big int is roughly equivalent to",
    "start": "1958039",
    "end": "1963799"
  },
  {
    "text": "a unsigned 64 bit integer in the rest layer and so for our kind of different",
    "start": "1963799",
    "end": "1970440"
  },
  {
    "text": "um u64 variables we're passing in these wrapped beant numbers",
    "start": "1970440",
    "end": "1977760"
  },
  {
    "text": "and then the other thing that we have to do to make sure things um don't get too slow is one of the slowest things you",
    "start": "1977960",
    "end": "1983720"
  },
  {
    "text": "can do is pass memory back and forward between the the rust and the JavaScript",
    "start": "1983720",
    "end": "1989000"
  },
  {
    "text": "layers so here we're creating this uint 8 array with this thing called memory",
    "start": "1989000",
    "end": "1994600"
  },
  {
    "text": "buffer which comes from inside the the WM package and that basically gives us a window over the entire chunk of rust",
    "start": "1994600",
    "end": "2002760"
  },
  {
    "text": "memory so we don't have to pass things back and forward we're just directly reaching into and investigating that",
    "start": "2002760",
    "end": "2008720"
  },
  {
    "text": "memory we can't really manipulate it we can't really update it from this side but we can just look at a value and so",
    "start": "2008720",
    "end": "2014919"
  },
  {
    "text": "the simulation is going to run in the rust layer and then for any value that we want to read out of the rust layer",
    "start": "2014919",
    "end": "2020120"
  },
  {
    "text": "for our rendering we can just look at this mirror and so we have here two different bits the barrier which is the",
    "start": "2020120",
    "end": "2026639"
  },
  {
    "text": "the bits of code that are going to be colored in Black in the simulation and the the curl um that's from the original",
    "start": "2026639",
    "end": "2032840"
  },
  {
    "text": "implementation of this algorithm that's the bit that has the velocities of each point in the uh in the",
    "start": "2032840",
    "end": "2040320"
  },
  {
    "text": "simulation yeah and so we we use this kind of pointer um to point at that part in the code um and then directly access",
    "start": "2040639",
    "end": "2048000"
  },
  {
    "text": "WM memory so this is the bit where I haven't actually got my code running",
    "start": "2048000",
    "end": "2053240"
  },
  {
    "text": "let's see if I can make this happen um",
    "start": "2053240",
    "end": "2059440"
  },
  {
    "text": "[Music]",
    "start": "2064449",
    "end": "2067658"
  },
  {
    "text": "let's see if this works okay I refresh",
    "start": "2075800",
    "end": "2083358"
  },
  {
    "text": "that cool okay so so that is our WM compiled rust",
    "start": "2083359",
    "end": "2091200"
  },
  {
    "text": "implementation running um converted to wesm in the browser using the canvas API",
    "start": "2091200",
    "end": "2097520"
  },
  {
    "text": "um and it's heaps faster which is kind of kind of the goal",
    "start": "2097520",
    "end": "2103000"
  },
  {
    "text": "output let's see if this is working now",
    "start": "2103000",
    "end": "2107240"
  },
  {
    "text": "again so yeah um if we do some more logging and we check out the time that the simulation takes again we're getting",
    "start": "2109599",
    "end": "2115839"
  },
  {
    "text": "the kind of speed that we were seeing in the rust layer but in the browser um so instead of uh the the 30 plus",
    "start": "2115839",
    "end": "2122720"
  },
  {
    "text": "milliseconds we were aiming for and we were trying to get everything under 16 milliseconds and we've got down to to 13",
    "start": "2122720",
    "end": "2129280"
  },
  {
    "text": "in a little bit giving us the 2 milliseconds for the rendering time so we're well under our 60 frames a second so that is again uh certified",
    "start": "2129280",
    "end": "2137599"
  },
  {
    "text": "faster kachow this is amazing I can custom till my drag reduction system as",
    "start": "2137599",
    "end": "2142960"
  },
  {
    "text": "I go sure can lightning that sounds like success to me uh me too let's um go over",
    "start": "2142960",
    "end": "2151240"
  },
  {
    "text": "the things that we did one last time so Landing McQueen always wants to go faster and and the dream for him is",
    "start": "2151240",
    "end": "2158640"
  },
  {
    "text": "to be able to use these aerodynamic simulations on the fly as he's racing he can only run a web browser",
    "start": "2158640",
    "end": "2165119"
  },
  {
    "text": "during the race um and typescript is too slow to do this kind of mathy high level",
    "start": "2165119",
    "end": "2171359"
  },
  {
    "text": "processing rust is really fast um and we can run the simulation super quick especially if we can do that in a",
    "start": "2171359",
    "end": "2177760"
  },
  {
    "text": "terminal environment but if we combine it with WM we can get it running super Speedy in the browser and make lightning",
    "start": "2177760",
    "end": "2184520"
  },
  {
    "text": "a very very happy race car you can look at it again because I find it really quite mesmerizing um it's",
    "start": "2184520",
    "end": "2192319"
  },
  {
    "text": "just kind of pretty um the code's there uh if you try to get it running later good luck to you it's an absolute mess",
    "start": "2192319",
    "end": "2198720"
  },
  {
    "text": "um but I don't know ping me on the internet and we can we can talk about it Kow um hopefully that is the end um",
    "start": "2198720",
    "end": "2207680"
  },
  {
    "text": "once again I'm Craig thanks for having me um that was really fun shout out to NDC this place is already really fun",
    "start": "2207680",
    "end": "2213720"
  },
  {
    "text": "come find me say hi I'll be floating around um otherwise remember life is indeed a highway thank you so",
    "start": "2213720",
    "end": "2221670"
  },
  {
    "text": "[Applause] much and yeah I think we have question",
    "start": "2221670",
    "end": "2228680"
  },
  {
    "text": "time or if you want to go upstairs and catch the last bit of Scot's talk then I'm not going to be offended",
    "start": "2228680",
    "end": "2235079"
  }
]