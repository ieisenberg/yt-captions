[
  {
    "text": "okay so we're going to talk about testing everyone's favorite topic hot off some like weird emulator talks we're",
    "start": "1040",
    "end": "8240"
  },
  {
    "text": "going to talk about the basic stuff and nothing about hoover's unfortunately um",
    "start": "8240",
    "end": "14160"
  },
  {
    "text": "so to anyone that hasn't met me and i appreciate i am somewhat conspicuous um i'm david i'm a software consultant",
    "start": "14160",
    "end": "21439"
  },
  {
    "text": "um i wrote a few kids books and i've built some massive web scale systems",
    "start": "21439",
    "end": "27599"
  },
  {
    "text": "hopefully you've used something i've made even if you don't realize it but what i really do is i perpetually play with any and all technology i can get my",
    "start": "27599",
    "end": "34640"
  },
  {
    "text": "hands on and i've spent close to the past 20 years writing all sorts of tests",
    "start": "34640",
    "end": "39920"
  },
  {
    "text": "and trying to do tdd in just about every language and stack that i've had the pleasure of working in",
    "start": "39920",
    "end": "46239"
  },
  {
    "text": "so are we ready to see how deep this iceberg really goes if you pay close attention to some great controversial",
    "start": "46239",
    "end": "51760"
  },
  {
    "text": "stuff in here now a good portion of my own journey with software testing involved mostly good fortune and meeting the",
    "start": "51760",
    "end": "58320"
  },
  {
    "text": "right people at the right time um see i i was originally a self-taught developer",
    "start": "58320",
    "end": "63760"
  },
  {
    "text": "and you know the truth is my confession is for the first 10 years of my programming life i didn't write a single test",
    "start": "63760",
    "end": "69840"
  },
  {
    "text": "didn't never heard of it and everything seemed just fine honestly everything seemed just fine and",
    "start": "69840",
    "end": "75840"
  },
  {
    "text": "my code kind of worked and i didn't know what i didn't know and i was happy",
    "start": "75840",
    "end": "80880"
  },
  {
    "text": "and i made it through an entire 2000s early 2000s computer science degree with nothing but the most casual reference to",
    "start": "80880",
    "end": "87840"
  },
  {
    "text": "unit tests being made um trust those degrees folks there are entire modules on the software",
    "start": "87840",
    "end": "94640"
  },
  {
    "text": "testing life cycle but not a single instance of here's a unit test it was all very 1990s",
    "start": "94640",
    "end": "102720"
  },
  {
    "text": "and i was fortunate because in my very first job out of university i was lucky enough to have a mentor that",
    "start": "102720",
    "end": "109360"
  },
  {
    "text": "introduced me to the then relatively nascent concept of unit testing and i",
    "start": "109360",
    "end": "114479"
  },
  {
    "text": "didn't really get it straight away at all um but working with this this mentor put me",
    "start": "114479",
    "end": "120799"
  },
  {
    "text": "on this path of discovery that really hasn't stopped since and so if you you know if he ever sees this that thank you",
    "start": "120799",
    "end": "127360"
  },
  {
    "text": "andy longshore you you really uh you helped me when i was barely more mature than a precocious teenager",
    "start": "127360",
    "end": "134239"
  },
  {
    "text": "um so while this talk on the surface is kind of about how to write tests that survive and a little bit about javascript i",
    "start": "134239",
    "end": "141040"
  },
  {
    "text": "suppose it's also a little bit about my own personal experience because narcissist i don't know um",
    "start": "141040",
    "end": "146319"
  },
  {
    "text": "and and how it changed the path of my entire career so it's gonna be one of those sessions where we start somewhere obvious and end up somewhere you might",
    "start": "146319",
    "end": "153200"
  },
  {
    "text": "not expect somewhere down the bottom so we're going to start by covering some",
    "start": "153200",
    "end": "159599"
  },
  {
    "text": "of the very very very very basics and um from time to time i get asked the question why i'm so enthusiastic about",
    "start": "159599",
    "end": "166160"
  },
  {
    "text": "automated testing because it isn't really the sexy end of software for most people um it's the boring stuff it's the",
    "start": "166160",
    "end": "171920"
  },
  {
    "text": "tedious work but for me testing is beautiful by testing is the thing we have that is",
    "start": "171920",
    "end": "179519"
  },
  {
    "text": "fundamentally of software that wasn't borrowed or mimicked from another discipline",
    "start": "179519",
    "end": "185280"
  },
  {
    "text": "it's the thing we invented it's our process it's the thing that proves our software works",
    "start": "185280",
    "end": "190800"
  },
  {
    "text": "so whenever i'm faced with folks asking me do i need to test x y or zed",
    "start": "190800",
    "end": "196080"
  },
  {
    "text": "or which part of the uh the software should we skip testing like what's the bits we don't need to test my my answer",
    "start": "196080",
    "end": "201840"
  },
  {
    "text": "is the same every single time skip testing the bits of your software that you're happy failing in production",
    "start": "201840",
    "end": "209440"
  },
  {
    "text": "because it will right it's inevitable and um you know i'm not going to promise you that great code of tests will stop",
    "start": "209440",
    "end": "215040"
  },
  {
    "text": "your software failing ever but if you get your tests right triangulating and fixing the software",
    "start": "215040",
    "end": "221280"
  },
  {
    "text": "when it does do those things and does fail will be easier than ever",
    "start": "221280",
    "end": "227360"
  },
  {
    "text": "so let's talk about again the very foundational basics for a moment and i'm probably preaching to the choir a little bit here because you've probably all",
    "start": "227360",
    "end": "232799"
  },
  {
    "text": "heard of unit testing before um but first a definition so in computer",
    "start": "232799",
    "end": "238000"
  },
  {
    "text": "programming unit testing is a software testing method by which individual units",
    "start": "238000",
    "end": "243040"
  },
  {
    "text": "of source code sets one or more computer program modules together with associated control data usage procedures and",
    "start": "243040",
    "end": "249360"
  },
  {
    "text": "operating procedures are tested to determine whether they are fit for use thanks wikipedia who writes all that",
    "start": "249360",
    "end": "254799"
  },
  {
    "text": "stuff really um we're going to start by talking about you know the humble garden variety unit",
    "start": "254799",
    "end": "260079"
  },
  {
    "text": "test and what it is and what it isn't so unit tests test a piece of code where unit means the unit of isolation",
    "start": "260079",
    "end": "268000"
  },
  {
    "text": "now that's the thing that's being tested right so unit tests use you know they test functions they",
    "start": "268000",
    "end": "274240"
  },
  {
    "text": "test single functions single classes they are written with the help of a testing framework and your test code is",
    "start": "274240",
    "end": "281199"
  },
  {
    "text": "executed using a test runner the thing that discovers and executes your tests and unit tests contain one or more",
    "start": "281199",
    "end": "287040"
  },
  {
    "text": "assertions lines of code that verify the output of your function class or program like very very foundational knowledge",
    "start": "287040",
    "end": "294160"
  },
  {
    "text": "and um as as with most things in the whole the javascript ecosystem it doesn't take",
    "start": "294160",
    "end": "299759"
  },
  {
    "text": "long to talk about a concept before people start arguing what we're going to use what we're going to install for npm",
    "start": "299759",
    "end": "305199"
  },
  {
    "text": "all that kind of stuff the framework wars were bloody and there were only casualties on the way",
    "start": "305199",
    "end": "311600"
  },
  {
    "text": "so all the examples here are just going to be written in jest because it's a combined test runner framework and assertion tool",
    "start": "311600",
    "end": "317919"
  },
  {
    "text": "it isn't the only tool available to write tests in javascript but arguably it's you know the standards were kind of",
    "start": "317919",
    "end": "323520"
  },
  {
    "text": "set with libraries like mocker and jasmine in the early 2010s and there are other libraries that",
    "start": "323520",
    "end": "328800"
  },
  {
    "text": "enable different categories of testing you know things are quite popular like storybook um in the component and ui",
    "start": "328800",
    "end": "334080"
  },
  {
    "text": "testing space but and newer tools like vitest kind of a spin-off from veet are up and coming",
    "start": "334080",
    "end": "339680"
  },
  {
    "text": "at the moment but you know as with most things in software brand recognition sadly um and support",
    "start": "339680",
    "end": "345280"
  },
  {
    "text": "tends to win and you know jess has authored them supported by facebook meta facebook meta",
    "start": "345280",
    "end": "350800"
  },
  {
    "text": "who knows and uh and broadly is the most well supported across the the tool chain in the ecosystem so it's probably the",
    "start": "350800",
    "end": "357360"
  },
  {
    "text": "test framework you're going to see the most so i want to describe jest and x unit",
    "start": "357360",
    "end": "363680"
  },
  {
    "text": "frameworks in general so x unit if you didn't know is the not whilst is the name of a framework in c",
    "start": "363680",
    "end": "369440"
  },
  {
    "text": "sharp it's also the name of the loose family of frameworks that all implement roughly the same pattern of test",
    "start": "369440",
    "end": "375120"
  },
  {
    "text": "fixtures and test cases regardless of the language of choice you're working in so you know the dominant testing",
    "start": "375120",
    "end": "380560"
  },
  {
    "text": "framework um is tends to be x unit styled so in javascript there's things like jest n unit an x unit in c sharp j",
    "start": "380560",
    "end": "388479"
  },
  {
    "text": "unit and java et cetera actually some trivia the very first x unit framework was s unit in small talk so",
    "start": "388479",
    "end": "395680"
  },
  {
    "text": "that's kind of where this pattern comes from and so just as stated is maintained and supported by facebook and used to",
    "start": "395680",
    "end": "400960"
  },
  {
    "text": "test react you know runs under node and contains all the stuff you need to get started",
    "start": "400960",
    "end": "407600"
  },
  {
    "text": "and you know once we have a test framework we need our assertions and assertions are used to verify the output",
    "start": "407600",
    "end": "413680"
  },
  {
    "text": "of your functions now most assertion libraries are just syntactic sugar over the top of some conditional checks and throwing",
    "start": "413680",
    "end": "419680"
  },
  {
    "text": "exceptions you can write your own assertion library in a couple of hours it's not too difficult and you can bring",
    "start": "419680",
    "end": "425440"
  },
  {
    "text": "your own but you know the truth is with the testing landscape most tools in 2022 are just fine",
    "start": "425440",
    "end": "431599"
  },
  {
    "text": "like there's a nice thing that we've got to this place of maturity that everything is kind of just fine and you're not going to end up with sucky",
    "start": "431599",
    "end": "436960"
  },
  {
    "text": "tools here they all have individual wrinkles but they'll work so people seem to think that the state",
    "start": "436960",
    "end": "443360"
  },
  {
    "text": "of testing in the wild looks like lists you know you see this diagram in like a thousand books or a thousand web pages",
    "start": "443360",
    "end": "449680"
  },
  {
    "text": "you've probably not seen like this one though because unit tests are really just one of an increasingly broad",
    "start": "449680",
    "end": "456000"
  },
  {
    "text": "category of tests you know we have unit tests integration tests acceptance tests end-to-end tests smoke tests",
    "start": "456000",
    "end": "461199"
  },
  {
    "text": "consumer-driven contracts toxicity tests that's one that most people haven't heard of ui automation tests mutation",
    "start": "461199",
    "end": "466800"
  },
  {
    "text": "tests and and you know you know what about bdd how about gherkin full stack tests",
    "start": "466800",
    "end": "472879"
  },
  {
    "text": "right but different kinds of tests are designed to help you at different times during different phases of your development life cycle so it's kind of",
    "start": "472879",
    "end": "479599"
  },
  {
    "text": "important to know what you're meant to be doing so you know if we look at something at",
    "start": "479599",
    "end": "484720"
  },
  {
    "text": "build time we have problems like code breaks we have basic integration between components and like other",
    "start": "484720",
    "end": "490879"
  },
  {
    "text": "nasty code junk says a ruder word in my slide notes you know the solutions here we have we",
    "start": "490879",
    "end": "497199"
  },
  {
    "text": "have unit tests and we have coverage so coverage isn't correctness we have integration so cross-unit",
    "start": "497199",
    "end": "502319"
  },
  {
    "text": "cross-component tests and you know the commonalities of all these categories of tests is that all of your dependencies are you",
    "start": "502319",
    "end": "508160"
  },
  {
    "text": "can be mocked and stubbed and it's all in process so there's a category of tests that's all in process and a build",
    "start": "508160",
    "end": "514240"
  },
  {
    "text": "time now at deploy time we have different categories of problems so you know they're often environmental",
    "start": "514240",
    "end": "520320"
  },
  {
    "text": "they're often consistency based related to downstream systems they're often slower to diagnose and debug so you know",
    "start": "520320",
    "end": "526560"
  },
  {
    "text": "the solutions to that is you end up with different categories of tests like end-to-end acceptance testing without",
    "start": "526560",
    "end": "531839"
  },
  {
    "text": "mocks smoke tests that can run against any environment that are safe and give you a heads up on on failure right so you",
    "start": "531839",
    "end": "538000"
  },
  {
    "text": "reach for different tools and then finally at kind of a systems integration time you know we have",
    "start": "538000",
    "end": "544080"
  },
  {
    "text": "things like continuous tests running against third-party systems consumer-driven contracts to check the",
    "start": "544080",
    "end": "549680"
  },
  {
    "text": "apis you call haven't changed their shape and toxicity tests where you write repeated tests that enforce things like",
    "start": "549680",
    "end": "556320"
  },
  {
    "text": "your standards and check that quality gates are being met across your software and you know and the commonality between",
    "start": "556320",
    "end": "562080"
  },
  {
    "text": "all this stuff is all helps you fail faster that's the point",
    "start": "562080",
    "end": "567839"
  },
  {
    "text": "so while that's a wonderful and diverse list of tests that helps you at various points we need to be careful to crawl",
    "start": "567920",
    "end": "574720"
  },
  {
    "text": "before we run and you know that's enough theory let's kind of get practical and you know i remember",
    "start": "574720",
    "end": "580080"
  },
  {
    "text": "i was speaking to a guy called james gregory years ago and he and he said something to me that always stuck with me which was you know what i've used all",
    "start": "580080",
    "end": "586399"
  },
  {
    "text": "these different kinds of tests and the only thing i reliably care about is tests that don't break when i don't want them to",
    "start": "586399",
    "end": "591680"
  },
  {
    "text": "and i thought that was actually quite revealingly insightful so it's probably worth highlighting that",
    "start": "591680",
    "end": "596720"
  },
  {
    "text": "while i'd love to be brave and just do this live in front of you here i do not have the the nerve to trust both npm and",
    "start": "596720",
    "end": "604800"
  },
  {
    "text": "conference wi-fi at the same time i feel like that's two gambles that you shouldn't take at once",
    "start": "604800",
    "end": "610560"
  },
  {
    "text": "so many people will interact with code bases from some point after they were first created right and because of that",
    "start": "610560",
    "end": "616160"
  },
  {
    "text": "it's entirely possible that when you're trying to test in javascript especially actually you're approaching a project",
    "start": "616160",
    "end": "622000"
  },
  {
    "text": "that's already got like a whole cavalcade of tooling and gum from npm strewn all over it and everything is set",
    "start": "622000",
    "end": "628720"
  },
  {
    "text": "up and you kind of don't really know how this hangs together so it's no secret the javascript ecosystem is wide and complex and it's",
    "start": "628720",
    "end": "635839"
  },
  {
    "text": "easy to think that you need a whole bunch of tooling like webpack and compilers and god knows what to get",
    "start": "635839",
    "end": "641839"
  },
  {
    "text": "started but really actually you don't and what we're going to do here is we're going to new up a new node project",
    "start": "641839",
    "end": "648480"
  },
  {
    "text": "and we're going to install three packages and i'm going to explain what those packages do and how you can turn testing on",
    "start": "648480",
    "end": "653600"
  },
  {
    "text": "so like with everything there are a few wrinkles you need to navigate in the form of a tiny bit of configuration but",
    "start": "653600",
    "end": "659200"
  },
  {
    "text": "i'll try and explain not just what the configuration is but why you need it now presuming we already have a modern",
    "start": "659200",
    "end": "664880"
  },
  {
    "text": "version of node installed we're going to just node in a new application here and install three packages now those",
    "start": "664880",
    "end": "670800"
  },
  {
    "text": "packages are just just cli and the wonderfully uh catchily",
    "start": "670800",
    "end": "676480"
  },
  {
    "text": "named babel preset m cool so jest is obviously the test framework we've been talking about and",
    "start": "676480",
    "end": "682720"
  },
  {
    "text": "we're going to include that in our code base in other ecosystems you'll see junit en unit whatever",
    "start": "682720",
    "end": "688480"
  },
  {
    "text": "just cli is the test runner that can be called from the command line and it executes your test code now babel preset",
    "start": "688480",
    "end": "694640"
  },
  {
    "text": "m is a plug-in for babel which is implicitly used by jest",
    "start": "694640",
    "end": "699839"
  },
  {
    "text": "which what it does is it target it it compiles your test for whatever version of node",
    "start": "699839",
    "end": "705600"
  },
  {
    "text": "you have installed automatically when just runs so you don't need to worry about webpack and transpilation and",
    "start": "705600",
    "end": "712240"
  },
  {
    "text": "targeting whatever version of yes current whatever version of node you support it'll take care of it",
    "start": "712240",
    "end": "718000"
  },
  {
    "text": "so we need to use um the preset m package to use modern javascript modules in in our code",
    "start": "718000",
    "end": "724880"
  },
  {
    "text": "along with other language features so once we've done this npm init we need",
    "start": "724880",
    "end": "730720"
  },
  {
    "text": "to tweak a few things in in package.json so we want to first enable es6 modules so",
    "start": "730720",
    "end": "737760"
  },
  {
    "text": "we're going to flip the type of our project to be a module now you really everyone should be doing this today and",
    "start": "737760",
    "end": "743120"
  },
  {
    "text": "like set webpack on fire really set where pack on fire is it's it's a hellscape that lets you shoot yourself",
    "start": "743120",
    "end": "748399"
  },
  {
    "text": "in the foot with two guns um please i beg of you so everyone should use these modules they",
    "start": "748399",
    "end": "755279"
  },
  {
    "text": "work in your browser natively now as well so there's really no excuse um so by setting the type property in",
    "start": "755279",
    "end": "761120"
  },
  {
    "text": "your package.json the node runtime allows you to use the import and export module syntax",
    "start": "761120",
    "end": "766800"
  },
  {
    "text": "there are other ways you can achieve the same effect so you can like rename all your javascript files.mjs",
    "start": "766800",
    "end": "772079"
  },
  {
    "text": "which is just annoying and nobody wants to do that so flagging as a module is the cleanest",
    "start": "772079",
    "end": "777600"
  },
  {
    "text": "way once we've done that we're going to update our scripts configuration to call jest now",
    "start": "777600",
    "end": "783519"
  },
  {
    "text": "this just means that when we type npm run test on our command line it will actually do something now you can install jest as a global tool and make",
    "start": "783519",
    "end": "790560"
  },
  {
    "text": "sure it's in your path and all sorts of stuff but i don't know why you would do that i don't know why it supports that at all",
    "start": "790560",
    "end": "798079"
  },
  {
    "text": "and and then finally we're going to add some babel configuration the most arcane looking bit of all this um so this configuration",
    "start": "798160",
    "end": "805680"
  },
  {
    "text": "uh can appear arcane but it's better than trying to learn how to use webpack and uh if if you get this right you",
    "start": "805680",
    "end": "811040"
  },
  {
    "text": "should never have to look at it ever again all we're saying here is configure jest's implicitly called version of",
    "start": "811040",
    "end": "817440"
  },
  {
    "text": "babel to apply the preset for our current version of node and a lot of brackets",
    "start": "817440",
    "end": "823120"
  },
  {
    "text": "so it's probably worth noting if you're using typescript you'll probably end up using something like ts jest instead and",
    "start": "823120",
    "end": "828720"
  },
  {
    "text": "you won't need to do this because it already has compilers that make sure the packaging and module system work so you don't need",
    "start": "828720",
    "end": "834160"
  },
  {
    "text": "to worry about it so much now let's take a look at a very very",
    "start": "834160",
    "end": "839279"
  },
  {
    "text": "basic jest test now i don't know if anyone's seen this before um first note that we've we've called it",
    "start": "839279",
    "end": "845360"
  },
  {
    "text": "index.spec.js.js jason um so just by default looks for things",
    "start": "845360",
    "end": "851839"
  },
  {
    "text": "called.spec now i know certainly you know if you're from like a.net background that's a weird naming convention because spec",
    "start": "851839",
    "end": "858079"
  },
  {
    "text": "has other connotations in in their ecosystem but um you know you can configure it to use like",
    "start": "858079",
    "end": "864360"
  },
  {
    "text": "star.test.js if you want to but that involves extra config that you don't really need so we're going to go through a few",
    "start": "864360",
    "end": "869680"
  },
  {
    "text": "things we have a file that exports a single function here on the right and now on the left there's a test file",
    "start": "869680",
    "end": "875519"
  },
  {
    "text": "illustrating just standard testing conventions so there's an import for our code a describe block with an embedded",
    "start": "875519",
    "end": "882560"
  },
  {
    "text": "closure for the tests and an it block with the test inside of it now the it block is our is our test",
    "start": "882560",
    "end": "889360"
  },
  {
    "text": "method um the name of the test lives in the brackets and our names follow a very very simple naming convention of like what happened",
    "start": "889360",
    "end": "896079"
  },
  {
    "text": "under what condition and your expected output now you can be clever and craft sentences in jest because it renders the",
    "start": "896079",
    "end": "902639"
  },
  {
    "text": "output funnily but i rather have tests that i can read when i'm glancing at the code than",
    "start": "902639",
    "end": "908079"
  },
  {
    "text": "glancing at the test output now it's worth noting again that we're using the native import and export",
    "start": "908079",
    "end": "913440"
  },
  {
    "text": "keywords of the language here that's what we get from es6 modules it works pretty well especially if you've perhaps been",
    "start": "913440",
    "end": "919519"
  },
  {
    "text": "trapped in the hell of compatibility with common js and amd modules in the past like this is the module system you",
    "start": "919519",
    "end": "925120"
  },
  {
    "text": "expected your language to have now if you've not done much javascript in a",
    "start": "925120",
    "end": "931519"
  },
  {
    "text": "long time i'm happy to report that classes work now too and uh and you can use them exactly the",
    "start": "931519",
    "end": "936560"
  },
  {
    "text": "same way that you would in other languages and you might hear a thousand people blog about how javascript doesn't",
    "start": "936560",
    "end": "941600"
  },
  {
    "text": "understand classes and it's not the prototype chain stuff bores they're wrong you should absolutely use the syntactic",
    "start": "941600",
    "end": "948160"
  },
  {
    "text": "sugar put in the language to help you organize code in whatever way makes it more legible to you always they work",
    "start": "948160",
    "end": "954399"
  },
  {
    "text": "fine use them as appropriate and it works",
    "start": "954399",
    "end": "960079"
  },
  {
    "text": "no animations cool didn't know that was that uh you too can now do tdd and javascript",
    "start": "960079",
    "end": "965519"
  },
  {
    "text": "without any weird tooling that's it that's like the whole bit at the start now",
    "start": "965519",
    "end": "971440"
  },
  {
    "text": "this is about as close to using an x unit framework as in any roughly comparable language you get and if you",
    "start": "971440",
    "end": "977279"
  },
  {
    "text": "like you can configure an npm watch task to run your tests repeatedly when you save your files",
    "start": "977279",
    "end": "983680"
  },
  {
    "text": "but we can probably do better than that iceberg now if that's unit testing",
    "start": "983680",
    "end": "990560"
  },
  {
    "text": "what's tdd and why is it different now obviously test driven development is a software development process that",
    "start": "990560",
    "end": "997279"
  },
  {
    "text": "relies on the repetition of a short development cycle now requirements are turned into specific test cases and then",
    "start": "997279",
    "end": "1002639"
  },
  {
    "text": "the software is improved to pass the new tests only now this is opposed to like classical software development that",
    "start": "1002639",
    "end": "1008000"
  },
  {
    "text": "allows software to be added that's not proven to meet requirements right and you know this is the the tdd by example",
    "start": "1008000",
    "end": "1013920"
  },
  {
    "text": "this is the bible it was published in 2003 by this this lovely man this is this is kemp beck kent becker's are like one",
    "start": "1013920",
    "end": "1020720"
  },
  {
    "text": "good old white guy right like kent beck in his own words is not a great programmer he's just a good",
    "start": "1020720",
    "end": "1026640"
  },
  {
    "text": "programmer with good habits and i was that was a really really great sentiment um so tdd was part of the broader xp the",
    "start": "1026640",
    "end": "1032959"
  },
  {
    "text": "extreme programming movement of the late 90s and test first was promoted as a concept from xp since around 1999 or so",
    "start": "1032959",
    "end": "1040720"
  },
  {
    "text": "and um you know kent beck always just says he rediscovered this thing now in beck's own words",
    "start": "1040720",
    "end": "1046798"
  },
  {
    "text": "the original description of tdd was an ancient book about programming it said you take the input tape manually type in",
    "start": "1046799",
    "end": "1053760"
  },
  {
    "text": "the output tape you expect then program until the actual output tape matches the expected output",
    "start": "1053760",
    "end": "1060080"
  },
  {
    "text": "after i'd written the first x unit framework in small talk i remembered reading this and tried it out",
    "start": "1060080",
    "end": "1065280"
  },
  {
    "text": "and that was the origin of tdd for me so when describing tdd to all the programmers i often hear of course how",
    "start": "1065280",
    "end": "1072240"
  },
  {
    "text": "else could you program therefore i uh i refer to my role as rediscovering",
    "start": "1072240",
    "end": "1079919"
  },
  {
    "text": "tdd um everyone remembers the dress right",
    "start": "1079919",
    "end": "1086880"
  },
  {
    "text": "it's gold and white well while unit tests are all about",
    "start": "1086880",
    "end": "1092320"
  },
  {
    "text": "testing the units of code they're not a workflow right they're not a process or methodology they're just a programming",
    "start": "1092320",
    "end": "1099039"
  },
  {
    "text": "tool and unit test verifying the correctness of your implementation is their entire job that's it right so test driven",
    "start": "1099039",
    "end": "1105760"
  },
  {
    "text": "development conversely is all about building out new pieces of functionality of behavior and verifying that instead",
    "start": "1105760",
    "end": "1113280"
  },
  {
    "text": "now tdd is a working practice an approach with the tests you produce existing almost as a side effect",
    "start": "1113280",
    "end": "1119760"
  },
  {
    "text": "now it's why advocates of the process describe it as test-driven design sometimes where really what you're doing is",
    "start": "1119760",
    "end": "1125360"
  },
  {
    "text": "discovering the structure of your program through experimentation and testing so advocates for this approach including",
    "start": "1125360",
    "end": "1132000"
  },
  {
    "text": "myself believe this reduces waste and over design because we've all seen some stuff",
    "start": "1132000",
    "end": "1139039"
  },
  {
    "text": "now the tdd method is described as red green refactor",
    "start": "1139200",
    "end": "1144559"
  },
  {
    "text": "and in the red phase your challenge is to get a test failing as quickly as possible",
    "start": "1146080",
    "end": "1151120"
  },
  {
    "text": "now that red can be as simple as non-valid code or non-compiling code in compiled languages",
    "start": "1151120",
    "end": "1157200"
  },
  {
    "text": "and this red test expresses an outcome a thing that you wish your software did",
    "start": "1157200",
    "end": "1162240"
  },
  {
    "text": "now then the challenge is to do the simplest thing that can possibly work to make the tesco green and so help me god",
    "start": "1162240",
    "end": "1168320"
  },
  {
    "text": "so many people struggle with the concept of the simplest thing that can possibly work and you know it might be pasting in",
    "start": "1168320",
    "end": "1173919"
  },
  {
    "text": "some dubious code from stack overflow that's cool i see you i'm okay with that you know it might be hacking some ugly",
    "start": "1173919",
    "end": "1179679"
  },
  {
    "text": "code that just gets the job done or even hard coding a value that's my favorite",
    "start": "1179679",
    "end": "1185120"
  },
  {
    "text": "now the people that get tdd wrong stop here right they get green and they stop and they",
    "start": "1185120",
    "end": "1191600"
  },
  {
    "text": "ship it the final part is the iterative loop it's refactoring the code to make it",
    "start": "1191600",
    "end": "1197840"
  },
  {
    "text": "good enough it's the most important part of tdd and of the workflow because it's where you shift things around literally changing",
    "start": "1197840",
    "end": "1204480"
  },
  {
    "text": "the factoring but not the behavior supported by your hopefully still green test",
    "start": "1204480",
    "end": "1210480"
  },
  {
    "text": "now again in tdd by example what it says is that different phases can have different purposes",
    "start": "1210480",
    "end": "1216720"
  },
  {
    "text": "they call for different styles of solution different aesthetic viewpoints and um the first three phases need to go",
    "start": "1216720",
    "end": "1223440"
  },
  {
    "text": "by quickly so we get to a known state where the new with the new functionality we can commit any number of sins to get",
    "start": "1223440",
    "end": "1230000"
  },
  {
    "text": "there we all love sins um because speed trumps design just for",
    "start": "1230000",
    "end": "1235760"
  },
  {
    "text": "that brief moment so to the developer of software the argument for any kind of code based",
    "start": "1235760",
    "end": "1241039"
  },
  {
    "text": "testing is very very simple is it faster than running the program and it always is",
    "start": "1241039",
    "end": "1248400"
  },
  {
    "text": "so after that brief kind of history lesson and my subtle adoring of mr beck",
    "start": "1248400",
    "end": "1254080"
  },
  {
    "text": "um we're gonna get back to the the practical stuff so the thing about those tdd workflows",
    "start": "1254080",
    "end": "1259520"
  },
  {
    "text": "they mean you end up running your code like a lot a lot a lot a lot a lot a lot like so frequently you bash out the keys",
    "start": "1259520",
    "end": "1266400"
  },
  {
    "text": "for the the running test runners and in javascript the standard solution for this is to use a file watcher and you",
    "start": "1266400",
    "end": "1272640"
  },
  {
    "text": "know run your tests every time the files get saved but there is a better way continuous test runs execute any tests",
    "start": "1272640",
    "end": "1280000"
  },
  {
    "text": "affected by changes you make to your software on each and every key press instantly inside of your editor",
    "start": "1280000",
    "end": "1286000"
  },
  {
    "text": "now the first time i used a continuous test runner i didn't really understand what all the fuss was about and this was encryption.net and i was pairing with",
    "start": "1286000",
    "end": "1292559"
  },
  {
    "text": "someone for two days and at the end of the first day i went and bought my own copy because it literally changed my programming workflow so significantly",
    "start": "1292559",
    "end": "1299280"
  },
  {
    "text": "i've never looked back so wallaby is a continuous test runner for javascript and for the rest of the",
    "start": "1299280",
    "end": "1305280"
  },
  {
    "text": "session when you see screenshots from vs code we'll be using wallaby now it's it's amazing it's by far and away the",
    "start": "1305280",
    "end": "1311039"
  },
  {
    "text": "best tool in all of javascript and perhaps the best continuous test runner i've ever used it's not free it costs",
    "start": "1311039",
    "end": "1317200"
  },
  {
    "text": "you 99 pounds a year i think 199 pounds for organizations it's worth",
    "start": "1317200",
    "end": "1322799"
  },
  {
    "text": "every single penny you will like make that money back instantly and i'm going to resist the urge i'm not going to resist the urge to climb on myself my",
    "start": "1322799",
    "end": "1329200"
  },
  {
    "text": "soapbox and labor the point there's professionals we should be buying software from other professionals or we",
    "start": "1329200",
    "end": "1334799"
  },
  {
    "text": "all go hungry so please please support tiny companies with good tools",
    "start": "1334799",
    "end": "1340159"
  },
  {
    "text": "um they're not essential to do tdd continuous test runners but like honestly i'll make your orders of magnitude faster and they really don't",
    "start": "1340159",
    "end": "1346559"
  },
  {
    "text": "pay me for this so running with wallaby you no longer have to use any npm watchers",
    "start": "1346559",
    "end": "1352799"
  },
  {
    "text": "there's a whole host of other features you can do things like log in line and watch the results output inside your",
    "start": "1352799",
    "end": "1358080"
  },
  {
    "text": "ide you can get instant feedback on code changes and you can do wild stuff like debugging backwards through your code",
    "start": "1358080",
    "end": "1365200"
  },
  {
    "text": "so you can step backwards and see the entire stack it's really wild and very very good um wallaby's amazing they should",
    "start": "1365200",
    "end": "1371520"
  },
  {
    "text": "probably pay me for this promo so you can see here if i change my",
    "start": "1371520",
    "end": "1376880"
  },
  {
    "text": "invoke function to return false wallaby provides this in ide feedback so you get the kind of stuff you would see on the",
    "start": "1376880",
    "end": "1382080"
  },
  {
    "text": "console right in line buy it or nag your boss both",
    "start": "1382080",
    "end": "1387360"
  },
  {
    "text": "okay so now we understand what a test is we understand what jest is we understand what a test runner is and assertions are",
    "start": "1387360",
    "end": "1392720"
  },
  {
    "text": "um i want to talk a little bit about something i really love and i've been thinking about this for about",
    "start": "1392720",
    "end": "1397840"
  },
  {
    "text": "15 years it's about intentionality in code so i suppose what we have to do is we",
    "start": "1397840",
    "end": "1403280"
  },
  {
    "text": "have to address the elephant in the room ready to be mad everyone ready to be mad",
    "start": "1403280",
    "end": "1409360"
  },
  {
    "text": "oh this guy burn your cop is a clean code it's aged very poorly and it means we do not have",
    "start": "1409360",
    "end": "1416240"
  },
  {
    "text": "to [ __ ] with he who shall not be named um it's not classy to twist the knife but suffers to say everything in beck's",
    "start": "1416240",
    "end": "1423360"
  },
  {
    "text": "work dwarfs everyone's least favorite family member",
    "start": "1423360",
    "end": "1428240"
  },
  {
    "text": "clean code is an extremely dogmatic book and its presence in the industry has reduced discussions about quality to the",
    "start": "1428880",
    "end": "1435039"
  },
  {
    "text": "discussions about naming variables its muted conversations about architectural style in the same way",
    "start": "1435039",
    "end": "1441440"
  },
  {
    "text": "dogmatic adherence to the solid principles has stopped intelligent conversations about architecture",
    "start": "1441440",
    "end": "1447200"
  },
  {
    "text": "its shadow is long and it's one of thoughtless dogma followed blindly",
    "start": "1447200",
    "end": "1454080"
  },
  {
    "text": "please don't heresy i hear you cry you can't say that",
    "start": "1454080",
    "end": "1459520"
  },
  {
    "text": "about clean code i love writing clean code so there was a point in my career why where",
    "start": "1459520",
    "end": "1466080"
  },
  {
    "text": "i too thought the rules around basic hygiene were enough um but over the last five or so years",
    "start": "1466080",
    "end": "1471279"
  },
  {
    "text": "i've come to value intentionality in code over any sense of syntactic cleanliness",
    "start": "1471279",
    "end": "1477279"
  },
  {
    "text": "so what does that mean it means that every character matters every single thing you do now the most",
    "start": "1477279",
    "end": "1483120"
  },
  {
    "text": "valuable thing i learned about software was to reason about it like a body of literature",
    "start": "1483120",
    "end": "1488240"
  },
  {
    "text": "it has text it has subtext it has authorial intent software is the means of communicating",
    "start": "1488240",
    "end": "1494799"
  },
  {
    "text": "intent between developer and developer sometimes we get it more right than others but in writing our code and",
    "start": "1494799",
    "end": "1501200"
  },
  {
    "text": "especially in writing our tests i want you to approach the work as if every character matters",
    "start": "1501200",
    "end": "1507039"
  },
  {
    "text": "be intentional the white space matters the rhythm of your code matters naming",
    "start": "1507039",
    "end": "1512159"
  },
  {
    "text": "does matter form matters function matters and when we're talking about writing",
    "start": "1512159",
    "end": "1517840"
  },
  {
    "text": "tests that survive that are legible that are useful tests written with thoughtfulness and",
    "start": "1517840",
    "end": "1524159"
  },
  {
    "text": "intentionality for the reader of what matters",
    "start": "1524159",
    "end": "1529520"
  },
  {
    "text": "so let's start with a few guiding principles iceberg and then we can get really really deep into specific examples",
    "start": "1529520",
    "end": "1536240"
  },
  {
    "text": "now good tests test the what not the how they're not implementation specific they",
    "start": "1536240",
    "end": "1542640"
  },
  {
    "text": "don't require huge amounts of state to understand they test single things be they concepts outputs or functions",
    "start": "1542640",
    "end": "1549360"
  },
  {
    "text": "and they need to be just as good just as intentional as the code that you are testing",
    "start": "1549360",
    "end": "1555279"
  },
  {
    "text": "now i'm going to go through some examples of how we can make some tests look good from both bad and good perspectives so this is like",
    "start": "1555279",
    "end": "1563279"
  },
  {
    "text": "the first tier of knowing things about tests now the aaa pattern i like it because it",
    "start": "1563279",
    "end": "1568640"
  },
  {
    "text": "sounds like screaming so tests should as a general rule follow this arrange act assert patterns like",
    "start": "1568640",
    "end": "1575600"
  },
  {
    "text": "stanzas in a poem they should make it easier to understand the intent of the code because it splits",
    "start": "1575600",
    "end": "1581279"
  },
  {
    "text": "up the preparation of test data the actual test and then the assertions now you'll hopefully see this pattern",
    "start": "1581279",
    "end": "1587039"
  },
  {
    "text": "everywhere if you've ever written any tests before even if you didn't know it had a name",
    "start": "1587039",
    "end": "1592880"
  },
  {
    "text": "um also while tempting to call out what you're doing please use whitespace intentionally to so please don't add",
    "start": "1592880",
    "end": "1599039"
  },
  {
    "text": "slash slash arrange slash slash act slash like we all we know what it means",
    "start": "1599039",
    "end": "1604720"
  },
  {
    "text": "please don't it's an organizational pattern it doesn't have to make your code ugly",
    "start": "1604720",
    "end": "1610000"
  },
  {
    "text": "so where possible we should use relatively standard names for things like system under test",
    "start": "1611520",
    "end": "1617120"
  },
  {
    "text": "and the names of the tests themselves you know as a general rule people have trended towards using sut standing for",
    "start": "1617120",
    "end": "1623520"
  },
  {
    "text": "system under test to describe the thing that you're testing where possible this is the most relevant in situations",
    "start": "1623520",
    "end": "1628960"
  },
  {
    "text": "where you're testing classes or entire composed applications or modules where you have dependencies flying around now",
    "start": "1628960",
    "end": "1635039"
  },
  {
    "text": "it makes it more obvious when you're interacting with your test code and when you're interacting with the unit of isolation",
    "start": "1635039",
    "end": "1641279"
  },
  {
    "text": "we're also using a standard naming pattern for tests that i mentioned before kind of formatting aside the test name should always tell you what you're",
    "start": "1641279",
    "end": "1647120"
  },
  {
    "text": "invoking under what condition and what expectation you have of the thing the number of codebases i've seen with",
    "start": "1647120",
    "end": "1652720"
  },
  {
    "text": "test one test two test three like people think it's not out there but it's everywhere",
    "start": "1652720",
    "end": "1658960"
  },
  {
    "text": "so here's an example file so i horrifyingly um went shopping for big javascript",
    "start": "1658960",
    "end": "1664559"
  },
  {
    "text": "projects with tests and it took me a while to find them um so i borrowed this spec file from an mit licensed major",
    "start": "1664559",
    "end": "1671919"
  },
  {
    "text": "open source project on the internet um we're not going to name and shame it's from some test code regarding the",
    "start": "1671919",
    "end": "1677760"
  },
  {
    "text": "handling of site configuration and it's certainly not the worst test file i've ever seen but what we're going",
    "start": "1677760",
    "end": "1682799"
  },
  {
    "text": "to do we're going to go through a number of techniques that would improve its quality and maintain ability and readability and you know everything",
    "start": "1682799",
    "end": "1688880"
  },
  {
    "text": "matters even things this small so we're going to revisit this a few times but that's what it started off like",
    "start": "1688880",
    "end": "1694880"
  },
  {
    "text": "and yeah i'm not really sure what it does so firstly use white space wisely",
    "start": "1694880",
    "end": "1701120"
  },
  {
    "text": "you know in this example one of the handful of problems is that a total lack of white space in the test file here",
    "start": "1701120",
    "end": "1706960"
  },
  {
    "text": "slows down your comprehension now white space exists in code the same reason it exists in written language",
    "start": "1706960",
    "end": "1713279"
  },
  {
    "text": "to help direct the reader to give you a pause to let you think use it the file on the left here has absolutely",
    "start": "1713279",
    "end": "1720080"
  },
  {
    "text": "no significant white space indicating either the different tests or that there's clearly different phases in",
    "start": "1720080",
    "end": "1726080"
  },
  {
    "text": "these individual test functions but they're totally not delineated so introducing some new lines are shown",
    "start": "1726080",
    "end": "1731520"
  },
  {
    "text": "to the right makes the tests easier to read because you know when you're meant to pause so people that fall in that do this fall",
    "start": "1731520",
    "end": "1737120"
  },
  {
    "text": "into this trap of making their tests this terse and they do it because they mistake uniformity the way something",
    "start": "1737120",
    "end": "1744080"
  },
  {
    "text": "looks neat and similar they mistake that for expressiveness where we use form and shape",
    "start": "1744080",
    "end": "1750080"
  },
  {
    "text": "intentionally to convey meaning it's far better for distinct parts of your test files and functions or any",
    "start": "1750080",
    "end": "1756720"
  },
  {
    "text": "code at all to look different when they do different things because the visual variation",
    "start": "1756720",
    "end": "1762080"
  },
  {
    "text": "leads the eye encourages reading instead of the skimming that large bodies of identical looking text leads",
    "start": "1762080",
    "end": "1768399"
  },
  {
    "text": "to right and i know it's weird kind of approaching this from a pure aesthetic viewpoint but it's really it's design",
    "start": "1768399",
    "end": "1776158"
  },
  {
    "text": "now no magic numbers and like most test code bases i ever see",
    "start": "1776559",
    "end": "1781840"
  },
  {
    "text": "suffer this problem so magic numbers in test code are even more evil than magic numbers in real code",
    "start": "1781840",
    "end": "1787600"
  },
  {
    "text": "because they make me believe that the value of that thing is important right so if i see a minus -2 and a test",
    "start": "1787600",
    "end": "1794640"
  },
  {
    "text": "i think it means something i think there's something special in that code that's going to react to that right you should always give test input data names",
    "start": "1794640",
    "end": "1801600"
  },
  {
    "text": "to establish context right because here the -1 is a magic number and needs a name now i",
    "start": "1801600",
    "end": "1808399"
  },
  {
    "text": "need the author of the test to tell me why that it is that number i need to know if i should worry about",
    "start": "1808399",
    "end": "1813520"
  },
  {
    "text": "it or not even though i'm describing this as magic numbers it applies to all test data you",
    "start": "1813520",
    "end": "1818880"
  },
  {
    "text": "know we've got to make sure there are no magic strings that appear to have meaning either or any data structures that look real",
    "start": "1818880",
    "end": "1825200"
  },
  {
    "text": "so one of the common tricks to make your test data stand out is to literally call it out in the data you know if you're",
    "start": "1825200",
    "end": "1830559"
  },
  {
    "text": "passing a string to a function that you don't care about why not give it a value of some valid data or unimportant data to",
    "start": "1830559",
    "end": "1838880"
  },
  {
    "text": "make it really obviously garbage so the reader understands that it isn't important",
    "start": "1838880",
    "end": "1845600"
  },
  {
    "text": "and in this specific example we could have also relied on the test name to provide the invalid weak context that we",
    "start": "1845919",
    "end": "1851520"
  },
  {
    "text": "see here you know it's not quite as legible as as the -1 still feels a little bit",
    "start": "1851520",
    "end": "1856880"
  },
  {
    "text": "magic but in a test so small context is key and it's a tolerable compromise",
    "start": "1856880",
    "end": "1862799"
  },
  {
    "text": "it probably doesn't affect the experience of the reader if we make it smaller here and you know again remember golden rule",
    "start": "1862799",
    "end": "1868399"
  },
  {
    "text": "always optimizing for the reader now we should also avoid unnecessary",
    "start": "1868399",
    "end": "1874559"
  },
  {
    "text": "data like a relevant test code that doesn't affect the execution of the software should not be in your tests ever",
    "start": "1874559",
    "end": "1881519"
  },
  {
    "text": "so here the unnecessary test data all of those those headers make you think that they're important they make you think",
    "start": "1881519",
    "end": "1886880"
  },
  {
    "text": "that's what a valid request looks like but if you actually look at the code it's not true right it's impossible to",
    "start": "1886880",
    "end": "1892240"
  },
  {
    "text": "understand what's going on in this test because you just suck a punch by a wall of text and noise and chaos",
    "start": "1892240",
    "end": "1898159"
  },
  {
    "text": "that's the name of my grindcore album you need to make sure that when you're specifying test data you",
    "start": "1898159",
    "end": "1904320"
  },
  {
    "text": "include only the data that impacts the behavior of the test themselves because anything else is a distraction and pulls",
    "start": "1904320",
    "end": "1910240"
  },
  {
    "text": "the reader into thinking that's required so remove the noise to increase the legibility",
    "start": "1910240",
    "end": "1917399"
  },
  {
    "text": "now now you can see the exact condition that triggers the behavior testing for",
    "start": "1921279",
    "end": "1926640"
  },
  {
    "text": "because our actual implementation only actually checks the request method property",
    "start": "1926640",
    "end": "1932480"
  },
  {
    "text": "and we can slim down the test code to only specify the data that triggers our check you know in this case it has to be",
    "start": "1932480",
    "end": "1938240"
  },
  {
    "text": "a get or it throws now as much as possible we should avoid",
    "start": "1938240",
    "end": "1944640"
  },
  {
    "text": "repetition in test data too because the visual noise causes the reader to start skimming and not recognize the",
    "start": "1944640",
    "end": "1951120"
  },
  {
    "text": "difference between those tests so here we have code that requires a whole lot of test data to execute but",
    "start": "1951120",
    "end": "1957120"
  },
  {
    "text": "because we're testing two different scenarios we have two different tests you know we need to extract the commonalities between those two tests",
    "start": "1957120",
    "end": "1964559"
  },
  {
    "text": "now by extracting out the request construction we can more clearly see the intent of",
    "start": "1964559",
    "end": "1969840"
  },
  {
    "text": "our code rather than be blindsided by the noise of test data everywhere",
    "start": "1969840",
    "end": "1975200"
  },
  {
    "text": "our valid request with function takes two arguments that will create test data in the correct correct form for both of",
    "start": "1975200",
    "end": "1981360"
  },
  {
    "text": "those tests and yes before anybody yells we are technically drying out our tesco",
    "start": "1981360",
    "end": "1986399"
  },
  {
    "text": "base here i know um but you should always strive to remove any statements that are inconsequential from the understanding",
    "start": "1986399",
    "end": "1993279"
  },
  {
    "text": "of the test to something else elsewhere like tests should be tiny",
    "start": "1993279",
    "end": "1999120"
  },
  {
    "text": "now this looks like the same slide but it isn't it's important to keep your tests up to",
    "start": "1999519",
    "end": "2004720"
  },
  {
    "text": "date with the latest language changes available to you too you know this might seem as though it's the same but we can",
    "start": "2004720",
    "end": "2010480"
  },
  {
    "text": "use more modern javascript language features to improve visual noise so here what we're doing that's",
    "start": "2010480",
    "end": "2016159"
  },
  {
    "text": "different is we're destructuring the results of the http get function and extracting the body",
    "start": "2016159",
    "end": "2021200"
  },
  {
    "text": "and using includes instead of like index of and the relatively arcane minus one",
    "start": "2021200",
    "end": "2026320"
  },
  {
    "text": "there to check if our return string contains a data value or the other data value now these subtle improvements to",
    "start": "2026320",
    "end": "2032320"
  },
  {
    "text": "language may seem invisible at skim read but when you're the developer trying to read the work and understand why",
    "start": "2032320",
    "end": "2037840"
  },
  {
    "text": "something is broken tight legible production grade test code will make your life a tremendous amount",
    "start": "2037840",
    "end": "2043200"
  },
  {
    "text": "easier you should continually revisit and update your test code as your software grows",
    "start": "2043200",
    "end": "2048800"
  },
  {
    "text": "and as languages tooling and standards change around you too and you're going to remember like like all software it is",
    "start": "2048800",
    "end": "2053839"
  },
  {
    "text": "never done you've never written the tests and they're finished things change",
    "start": "2053839",
    "end": "2059040"
  },
  {
    "text": "now if you find yourself extracting similar categories of data to helper functions too often your code",
    "start": "2059520",
    "end": "2066800"
  },
  {
    "text": "base might be in need of some kind of test data building pattern so this is another common approach so test data",
    "start": "2066800",
    "end": "2072000"
  },
  {
    "text": "builder functions or classes functions or classes for well-known categories of test data remove visual",
    "start": "2072000",
    "end": "2078000"
  },
  {
    "text": "noise not only from the test but to a completely different location altogether to make it easier to comprehend",
    "start": "2078000",
    "end": "2085200"
  },
  {
    "text": "now they they do this and you can use your test data builders to construct known",
    "start": "2085200",
    "end": "2090240"
  },
  {
    "text": "categories of test data that can then be shared amongst different tests um think",
    "start": "2090240",
    "end": "2095358"
  },
  {
    "text": "of it as like ddd but for tests i guess is probably the easiest way to think about it you know you make your test",
    "start": "2095359",
    "end": "2101520"
  },
  {
    "text": "cases a first class concept in your application so again it makes it much easier for future developers to",
    "start": "2101520",
    "end": "2106960"
  },
  {
    "text": "understand what you were thinking and you know it's trivial",
    "start": "2106960",
    "end": "2113200"
  },
  {
    "text": "to accidentally add dependencies on how to process systems that you don't control so it's important that we also isolate",
    "start": "2113200",
    "end": "2119280"
  },
  {
    "text": "our tests from data storage or anything you request over the network now if you're caught online or get rate",
    "start": "2119280",
    "end": "2124960"
  },
  {
    "text": "limited here your tests become reliable and flicker now we're inevitably going to talk about",
    "start": "2124960",
    "end": "2130640"
  },
  {
    "text": "you know mocking here and mocking is dangerous so you can't you can use jest's built-in",
    "start": "2130640",
    "end": "2136400"
  },
  {
    "text": "mock functions to mock the behavior of other modules or files in your applications but if you go and like google just documentation for this stuff",
    "start": "2136400",
    "end": "2143359"
  },
  {
    "text": "it like it's really bad really really exceptionally poor like this is the easiest way to do it now just has this whole convention where",
    "start": "2143359",
    "end": "2150000"
  },
  {
    "text": "you can add like files with pre-canned mocks in them but i don't know why you would ever use any",
    "start": "2150000",
    "end": "2155040"
  },
  {
    "text": "of that stuff because all you're doing is you're taking logic that behave belongs in your test and just putting it",
    "start": "2155040",
    "end": "2160320"
  },
  {
    "text": "in a random directory somewhere else like it doesn't make any sense it's a really silly approach so it's important to highlight that in",
    "start": "2160320",
    "end": "2166720"
  },
  {
    "text": "javascript you have to make sure that you call just mock before you import anything else from the module you want to mock otherwise the",
    "start": "2166720",
    "end": "2174000"
  },
  {
    "text": "package loader will grab your actual code rather than the uh the mock so at the very top of the file we're",
    "start": "2174000",
    "end": "2179280"
  },
  {
    "text": "mocking out node fetch here this prevents any imports accidentally like loading our real dependency",
    "start": "2179280",
    "end": "2185520"
  },
  {
    "text": "and then you should be careful when introducing mocks into your test code because mocking again is the act of swapping out one dependency for another",
    "start": "2185520",
    "end": "2192640"
  },
  {
    "text": "but it's very common the tests that use extensive amounts of mocking become brittle now as any change in the way one",
    "start": "2192640",
    "end": "2199359"
  },
  {
    "text": "component uses another often induces rippling changes throughout the code base all of those tests with deep mocks",
    "start": "2199359",
    "end": "2205680"
  },
  {
    "text": "around expectations will all break so use mocks but try and use them to only isolate yourself from external",
    "start": "2205680",
    "end": "2212640"
  },
  {
    "text": "systems that you can't control like web apis or databases or sometimes the file system",
    "start": "2212640",
    "end": "2218400"
  },
  {
    "text": "if you're mocking out your own code often what you're really doing is you're building software that's tying you into",
    "start": "2218400",
    "end": "2223760"
  },
  {
    "text": "a specific implementation so you should assert on only one concept",
    "start": "2223760",
    "end": "2231440"
  },
  {
    "text": "or capability per test now this is often misinterpreted as meaning only one",
    "start": "2231440",
    "end": "2236880"
  },
  {
    "text": "assert statement right like a classic fumble of words um but we can be far gentler here and you know in this",
    "start": "2236880",
    "end": "2242880"
  },
  {
    "text": "example we're testing that a library can reset its configuration now it clearly contains two kinds of configuration some",
    "start": "2242880",
    "end": "2249680"
  },
  {
    "text": "kind of global site config and some regular config object now the ability to reset both of these",
    "start": "2249680",
    "end": "2255119"
  },
  {
    "text": "values are individual features of the code and should be split into two separate tests even though the resulting",
    "start": "2255119",
    "end": "2261200"
  },
  {
    "text": "output looks worse it looks like weird copy and pasted stuff but we'll come back and we'll tidy",
    "start": "2261200",
    "end": "2266480"
  },
  {
    "text": "it up a bit later now what i want to do is i want to revisit",
    "start": "2266480",
    "end": "2272000"
  },
  {
    "text": "this this example file and see if we can apply some of the techniques here now before we did anything to the file it",
    "start": "2272000",
    "end": "2277839"
  },
  {
    "text": "looked like this this is the whole file split left to right now yeah i'm not really sure what",
    "start": "2277839",
    "end": "2283680"
  },
  {
    "text": "properly means um i don't know what a directive is and like god knows what all those",
    "start": "2283680",
    "end": "2289920"
  },
  {
    "text": "different conflict files are exactly the same set of assertions",
    "start": "2289920",
    "end": "2294960"
  },
  {
    "text": "could be written like that by following those rules you know some gentle rework we reduce it",
    "start": "2294960",
    "end": "2300640"
  },
  {
    "text": "down to this so what did we actually do here now we reduce the cognitive load so that every single thing you see in those test",
    "start": "2300640",
    "end": "2307680"
  },
  {
    "text": "lines matters we introduce white space to help the reader split out some concepts into",
    "start": "2307680",
    "end": "2312960"
  },
  {
    "text": "their own tests but most importantly in you know the one most significant change is that we stop testing the basic the basics again and",
    "start": "2312960",
    "end": "2319680"
  },
  {
    "text": "again and again in every test all of those tests here just repeat the same assertions",
    "start": "2319680",
    "end": "2325359"
  },
  {
    "text": "stupid it doesn't make any sense you know they're relying on distinct what we're doing now is you know relying",
    "start": "2325359",
    "end": "2330560"
  },
  {
    "text": "on distinct tests to cover scenarios um because that that copy paste and previous test was obscuring the actual",
    "start": "2330560",
    "end": "2337200"
  },
  {
    "text": "intent of the individual tests now i know it doesn't seem like much but i hope you'll agree the difference here to",
    "start": "2337200",
    "end": "2342960"
  },
  {
    "text": "legibility is like pretty huge actually and you know of the tests you know especially with some rework naming it's",
    "start": "2342960",
    "end": "2348960"
  },
  {
    "text": "really significant because again intentionality every line of code matters there and i cannot say the same",
    "start": "2348960",
    "end": "2355280"
  },
  {
    "text": "thing about all that so okay next level there",
    "start": "2355280",
    "end": "2362640"
  },
  {
    "text": "so far we've spoken about the small minutiae of increasing legibility of our tests but i want to talk to you about my",
    "start": "2362640",
    "end": "2367920"
  },
  {
    "text": "two big rules like these are the most important things in all the testing you test what not how",
    "start": "2367920",
    "end": "2374000"
  },
  {
    "text": "and you test the capabilities of code not the data in your tests",
    "start": "2374000",
    "end": "2379040"
  },
  {
    "text": "now i believe that these two things together are the difference between poorly factored tests and tests that last",
    "start": "2379040",
    "end": "2385200"
  },
  {
    "text": "let's look at what that really means so testing the exact implementation of a",
    "start": "2385200",
    "end": "2390640"
  },
  {
    "text": "dependency is one of the most common pitfalls in testing you should be testing the outcomes of your system under test",
    "start": "2390640",
    "end": "2397599"
  },
  {
    "text": "not how they reach their conclusion now tests that test precise implementations are brittle to change",
    "start": "2397599",
    "end": "2403760"
  },
  {
    "text": "and you'll have to rework them if you ever change the code so test that um",
    "start": "2403760",
    "end": "2411040"
  },
  {
    "text": "sorry test the test the outcomes of a piece of code are resilient to change and can",
    "start": "2411040",
    "end": "2416640"
  },
  {
    "text": "have implementation swapped over time while the tests still remain valid and that's like one of these big golden",
    "start": "2416640",
    "end": "2421839"
  },
  {
    "text": "rules it's a gold standard to check if you've got a good test can i replace my entire implementation and have my test",
    "start": "2421839",
    "end": "2427839"
  },
  {
    "text": "still work now in this example we're asserting explicitly that our weather api is",
    "start": "2427839",
    "end": "2434240"
  },
  {
    "text": "called by url and that's a leaky abstraction because there's an api key in there like this is literally testing",
    "start": "2434240",
    "end": "2440319"
  },
  {
    "text": "how we are reaching our conclusion not the outcomes of the test and you know as soon as our api key",
    "start": "2440319",
    "end": "2446319"
  },
  {
    "text": "changes the tests blow up and we didn't break our code our code still works it's leaking knowledge also of the",
    "start": "2446319",
    "end": "2452880"
  },
  {
    "text": "document response formats of the underlying system now if we change our weather api this",
    "start": "2452880",
    "end": "2458960"
  },
  {
    "text": "test will still pass here when we're testing the what perhaps with a single change to our weather api",
    "start": "2458960",
    "end": "2464880"
  },
  {
    "text": "returns temp helper function so it's important to note that we're still exposing some elements of the",
    "start": "2464880",
    "end": "2470319"
  },
  {
    "text": "implementation here you know our test code still needs to know what the format the response body from that weather api",
    "start": "2470319",
    "end": "2475440"
  },
  {
    "text": "is but it's the smallest possible compromise we can make to make this a good test you know it's okay if you have",
    "start": "2475440",
    "end": "2482319"
  },
  {
    "text": "to change one of your testing abstractions if your implementation significantly changes like it's okay it's not the end",
    "start": "2482319",
    "end": "2488720"
  },
  {
    "text": "of the world but you want to make sure the blast radius of those changes are very very small so by building these",
    "start": "2488720",
    "end": "2494319"
  },
  {
    "text": "kind of helper methods to construct this stuff we keep those changes centralized now you could go further and you could",
    "start": "2494319",
    "end": "2500000"
  },
  {
    "text": "extract this logic into its own specific adapter class but for a scenario this narrow what you'd end up doing is",
    "start": "2500000",
    "end": "2506240"
  },
  {
    "text": "writing tests around the adapter then test that you checking that you were calling the adapter and then a simple",
    "start": "2506240",
    "end": "2511920"
  },
  {
    "text": "refactor would mean you'd have to change two things that are really asserting the same concept it doesn't really make any sense",
    "start": "2511920",
    "end": "2519119"
  },
  {
    "text": "but and also don't hardcode api keys stupid",
    "start": "2519119",
    "end": "2524240"
  },
  {
    "text": "okay so the best example of testing capabilities over data is the diamond cutter",
    "start": "2525040",
    "end": "2531920"
  },
  {
    "text": "the funny thing is i use this as an interview question so i hope no one's watching",
    "start": "2532079",
    "end": "2537680"
  },
  {
    "text": "the diamond catter if you've never heard of it is probably my favorite tdd exercise the idea is simple",
    "start": "2537680",
    "end": "2543200"
  },
  {
    "text": "given a character from the alphabet print a diamond of its output with the character being on the middle line of",
    "start": "2543200",
    "end": "2548560"
  },
  {
    "text": "the diamond you can see the desired output in the the slide here but the idea is that you",
    "start": "2548560",
    "end": "2553839"
  },
  {
    "text": "incrementally build up each of the features of the code that generates the diamond bit by bit it's a tdd cutter",
    "start": "2553839",
    "end": "2560560"
  },
  {
    "text": "and it's especially tricky as a tdd cutter because well the alphabet's really well known people know the data",
    "start": "2560560",
    "end": "2566160"
  },
  {
    "text": "so they fall into a trap now it isn't too difficult there are",
    "start": "2566160",
    "end": "2571359"
  },
  {
    "text": "probably like 20 ways of solving this that i've seen that i can trivially remember here is a solution i'm using for this",
    "start": "2571359",
    "end": "2577040"
  },
  {
    "text": "cutter don't worry too much about how it works um it's it's the testing style that we really care about but in this",
    "start": "2577040",
    "end": "2582480"
  },
  {
    "text": "case in case you're curious the solution we're using is to loop all the way up the alphabet to generate the top half of the diamond we're doing a second loop to",
    "start": "2582480",
    "end": "2589040"
  },
  {
    "text": "pad out the bit in the middle and then we're flipping and mirroring it right now",
    "start": "2589040",
    "end": "2594640"
  },
  {
    "text": "this is the example of the kind of tests i often see for the diamond cutter these ocean boiling tests that you know",
    "start": "2594640",
    "end": "2602240"
  },
  {
    "text": "they're not just testing the data but they're also very hard to incrementally incrementally",
    "start": "2602240",
    "end": "2607680"
  },
  {
    "text": "tdd because they require this entire fully working thing to pass",
    "start": "2607680",
    "end": "2612800"
  },
  {
    "text": "like if you write tests like this it stops you from decomposing the problem that you're working on into these smaller chunks",
    "start": "2612800",
    "end": "2619280"
  },
  {
    "text": "and and because it'll take almost the entire time you're programming to get a green test you kind of break that red",
    "start": "2619280",
    "end": "2624720"
  },
  {
    "text": "green refactor workflow right yeah it's kind of red finish it",
    "start": "2624720",
    "end": "2630160"
  },
  {
    "text": "right you know it's a perfect example of how people often start trying to think about the diamond cutter and it's why it's my favorite testing example because",
    "start": "2630160",
    "end": "2636319"
  },
  {
    "text": "it's basically this isn't it right don't write tests like that like tests like this make the draw the rest",
    "start": "2636319",
    "end": "2642400"
  },
  {
    "text": "of the owl thing real in your implementation like we don't want to do this",
    "start": "2642400",
    "end": "2648480"
  },
  {
    "text": "so a better solution focuses on the capabilities of your code and not the data",
    "start": "2648480",
    "end": "2654400"
  },
  {
    "text": "now you'll notice we go out of our way here to turn the data into categories or classes of data so you see we have an edge case we have",
    "start": "2654400",
    "end": "2660880"
  },
  {
    "text": "a and then another category which is all of the letters that aren't a",
    "start": "2660880",
    "end": "2665920"
  },
  {
    "text": "but you could pretty much change the test data in these tests and they would all still work right so we're building up a test by inspecting the qualities of",
    "start": "2665920",
    "end": "2673440"
  },
  {
    "text": "the code that constructs a diamond for the output and we're testing what the code does rather than just that it does",
    "start": "2673440",
    "end": "2679119"
  },
  {
    "text": "it at all so this means that if any of our specific capabilities get broken like the padding or making sure the diamond's",
    "start": "2679119",
    "end": "2685359"
  },
  {
    "text": "the right length we'll know which bit of the code failed not just it's broken",
    "start": "2685359",
    "end": "2690480"
  },
  {
    "text": "um so learning to test what and not the how is in my opinion the most important lesson you will ever learn in testing",
    "start": "2690480",
    "end": "2696000"
  },
  {
    "text": "like this is what makes good tests now there's actually an argument here that given the problem posed by the",
    "start": "2696000",
    "end": "2701599"
  },
  {
    "text": "diamond cutter you could just hard code 26 diamonds and it'd be fine and you know what i would accept that as a solution because a constrained problem",
    "start": "2701599",
    "end": "2708160"
  },
  {
    "text": "space but like fugly",
    "start": "2708160",
    "end": "2711680"
  },
  {
    "text": "okay so final tier we arrived at this weird inflection",
    "start": "2713760",
    "end": "2720720"
  },
  {
    "text": "point where we have so many different types of tests that actually it makes things more confusing not less",
    "start": "2720720",
    "end": "2726720"
  },
  {
    "text": "it's funny that so people get stuck in these like cyclical conversations about what type of test to use in what context",
    "start": "2726720",
    "end": "2733920"
  },
  {
    "text": "and because there are just so many definitions going around and just so many subtle misalignments around the",
    "start": "2733920",
    "end": "2738960"
  },
  {
    "text": "different types of testing that perhaps we need a bit of a radical simplification to all this stuff now",
    "start": "2738960",
    "end": "2745440"
  },
  {
    "text": "and you know i'm going to blame something i think it's all because of integration tests",
    "start": "2745440",
    "end": "2751520"
  },
  {
    "text": "so i want to talk about the murder of integration tests and their replacement",
    "start": "2751520",
    "end": "2756640"
  },
  {
    "text": "with a thing that we barely have a name for yet because there's no better way to come to a standard by making up a new",
    "start": "2756640",
    "end": "2762319"
  },
  {
    "text": "name so integration tests are dead the history they're useless totally useless",
    "start": "2762319",
    "end": "2767760"
  },
  {
    "text": "artifacts from a simpler time they're a complete contradiction see if i were to ask a handful of people",
    "start": "2767760",
    "end": "2773280"
  },
  {
    "text": "in this room i could probably source a handful of different definitions of what an integration test is",
    "start": "2773280",
    "end": "2779760"
  },
  {
    "text": "um there's the traditional definition where an integration test is a test covering the interactions between more",
    "start": "2779760",
    "end": "2785359"
  },
  {
    "text": "than one classal function that's it now there are folks that use them to describe tests that include",
    "start": "2785359",
    "end": "2791760"
  },
  {
    "text": "the integration of your code and external systems like databases that are within your control",
    "start": "2791760",
    "end": "2796960"
  },
  {
    "text": "and then there's a piece people that use them to describe testing everything except the integration of your code with external systems like databases so the",
    "start": "2796960",
    "end": "2803680"
  },
  {
    "text": "two opposite definitions and i'm faced with this fundamental contradiction but probably best just",
    "start": "2803680",
    "end": "2809680"
  },
  {
    "text": "setting fire to the term and never using it again like it's garbage it doesn't mean anything it's too broad sorry",
    "start": "2809680",
    "end": "2815760"
  },
  {
    "text": "integration tests we loved you but you're dead it's the literally a programming where",
    "start": "2815760",
    "end": "2821359"
  },
  {
    "text": "recently literally was redefined to also include figuratively as one of its possible definitions",
    "start": "2821359",
    "end": "2827440"
  },
  {
    "text": "dumb so at the same time as integration tests",
    "start": "2827440",
    "end": "2832960"
  },
  {
    "text": "having lost their identity the sentiment of integration tests is more powerful than ever more popular",
    "start": "2832960",
    "end": "2839760"
  },
  {
    "text": "than ever now as our computers have increased in power and our test frameworks have become more sophisticated",
    "start": "2839760",
    "end": "2846559"
  },
  {
    "text": "the kind of fast feedback cycles previously reserved for the humble unit test have been expanded to a place where",
    "start": "2846559",
    "end": "2852720"
  },
  {
    "text": "you're using modern tooling and you know you're capable of running your entire application in memory instantly",
    "start": "2852720",
    "end": "2859119"
  },
  {
    "text": "even more interestingly when you combine the speed at which we can now run our entire apps in memory with the more sophisticated approaches to kind of",
    "start": "2859119",
    "end": "2865680"
  },
  {
    "text": "mocking and stubbing it's increasingly common to find test suites that can be mostly executed outside in",
    "start": "2865680",
    "end": "2872400"
  },
  {
    "text": "but with tiny invasive cuts to switch out data storage or network services",
    "start": "2872400",
    "end": "2877920"
  },
  {
    "text": "and network dependencies with something that can be manipulated from within the test code base now",
    "start": "2877920",
    "end": "2883839"
  },
  {
    "text": "these full stack tests or in memory tests or integration tests",
    "start": "2883839",
    "end": "2890559"
  },
  {
    "text": "by some definition and they allow you the liberty to tdd the what you want your application your",
    "start": "2890559",
    "end": "2896240"
  },
  {
    "text": "website your api to do without really having to worry so much about like traditional low-level integration tests and over the",
    "start": "2896240",
    "end": "2903680"
  },
  {
    "text": "past five or so years everything has kind of sped up and services have become smaller because of microservices it's an increasingly",
    "start": "2903680",
    "end": "2910720"
  },
  {
    "text": "popular style of testing but it's kind of like it's the testing style that's a little",
    "start": "2910720",
    "end": "2915839"
  },
  {
    "text": "bit of all those other testing styles um so why is it been so difficult to find a name that sticks right you know",
    "start": "2915839",
    "end": "2922079"
  },
  {
    "text": "and it's more about workflow and test isolation than what you're testing actually and it's related to the",
    "start": "2922079",
    "end": "2928160"
  },
  {
    "text": "increase in performance of tools over time but you know it's it's okay i'd rather we not like lose ourself trying",
    "start": "2928160",
    "end": "2934079"
  },
  {
    "text": "to catch uh to coin a catchy name and spend the time actually thinking about the thing right and i think the",
    "start": "2934079",
    "end": "2939920"
  },
  {
    "text": "one real defining characteristic of this style of testing is its tests and as much of your",
    "start": "2939920",
    "end": "2945119"
  },
  {
    "text": "application as possible in process that's that's what it is and um and in process matters because",
    "start": "2945119",
    "end": "2951119"
  },
  {
    "text": "when it's all in process you can interact with the stubs and you can really you can play around with the small incisions it's really really good",
    "start": "2951119",
    "end": "2958160"
  },
  {
    "text": "so if we're struggling to find a name for this style um what are its characteristics now",
    "start": "2958160",
    "end": "2963599"
  },
  {
    "text": "tests are fast and execute in memory like unit tests they don't you know the order doesn't matter",
    "start": "2963599",
    "end": "2969359"
  },
  {
    "text": "the test shouldn't affect each other they're not brittle so you can change all of your implementation in the middle",
    "start": "2969359",
    "end": "2975119"
  },
  {
    "text": "and the test should still pass they test high level business functionality and then some low level",
    "start": "2975119",
    "end": "2980720"
  },
  {
    "text": "detail where required and they're generally authored in this high level to low level tdd-ish workflow",
    "start": "2980720",
    "end": "2988720"
  },
  {
    "text": "right and they should still pass if you provide them with a different test test data of the same category or class",
    "start": "2988720",
    "end": "2995760"
  },
  {
    "text": "now just because none of the names feel quite right does not mean people have not tried to name this thing",
    "start": "2995760",
    "end": "3001760"
  },
  {
    "text": "um obviously some people seem to have settled on component testing um but it feels a little overloaded to",
    "start": "3001760",
    "end": "3008240"
  },
  {
    "text": "me because you know it's easy to mistake it for things like web components or some other kind of components i feel",
    "start": "3008240",
    "end": "3013839"
  },
  {
    "text": "like component is one of the most overused words in our entire lexicon um that",
    "start": "3013839",
    "end": "3019280"
  },
  {
    "text": "you know maybe what it really is is just the tests for our program",
    "start": "3019280",
    "end": "3024880"
  },
  {
    "text": "so perhaps you know instead we should follow ian cooper's lead i don't know if you've seen ian's tdd where all went",
    "start": "3024880",
    "end": "3031359"
  },
  {
    "text": "wrong talk where he describes the emerging style simply as developer tests",
    "start": "3031359",
    "end": "3037040"
  },
  {
    "text": "and i kind of like that it is after all what they are um we don't need to lose ourselves",
    "start": "3037040",
    "end": "3042880"
  },
  {
    "text": "trying to articulate the subtle differences between subtle different variants of these things than to be useful to us",
    "start": "3042880",
    "end": "3051280"
  },
  {
    "text": "now the most important thing to me about this style of testing is that it goes hand in hand with the tdd-style workflow",
    "start": "3052400",
    "end": "3057839"
  },
  {
    "text": "if slightly adjusted now while writing traditional tests it was common to start writing a test for a",
    "start": "3057839",
    "end": "3063599"
  },
  {
    "text": "class and then you get some kind of system boundary and you would introduce a mock object and write tests that verified the",
    "start": "3063599",
    "end": "3069760"
  },
  {
    "text": "behavior of that mock and then you peel the onion back and you go down a level and you repeat that process until you reach the very very",
    "start": "3069760",
    "end": "3075520"
  },
  {
    "text": "bottom of the stack now it's a fairly slow and laborious process and has often led to a huge amount of",
    "start": "3075520",
    "end": "3081760"
  },
  {
    "text": "repetition in both test scenarios and the kinds of tests that were left behind you know by",
    "start": "3081760",
    "end": "3087200"
  },
  {
    "text": "this movement of tests being mostly in memory we can change this process to be better now instead of peeling layers off our",
    "start": "3087200",
    "end": "3092880"
  },
  {
    "text": "software away one by one we can focus on a test driven almost behavior driven style of testing",
    "start": "3092880",
    "end": "3099440"
  },
  {
    "text": "around the outside of our functionality at a speed previously only available to unit tests so you know what this means",
    "start": "3099440",
    "end": "3105119"
  },
  {
    "text": "instead of this repeated cycle of red green refactor at every level of our code as we start outside in",
    "start": "3105119",
    "end": "3111359"
  },
  {
    "text": "and then as soon as we usually consider reaching for a mock actually and you know testing abstraction we should instead break out",
    "start": "3111359",
    "end": "3118720"
  },
  {
    "text": "into a very very low level unit test around the piece of functionality that we're struggling with we we make those test paths around the",
    "start": "3118720",
    "end": "3125680"
  },
  {
    "text": "little pocket of complexity and then instead of like using a di container or injecting it just new it up and use it",
    "start": "3125680",
    "end": "3131920"
  },
  {
    "text": "right and then then the top level test goes green and then you continue so you end up with",
    "start": "3131920",
    "end": "3137280"
  },
  {
    "text": "detailed tests around the complex bits of your software and tests around your expectations of what it does",
    "start": "3137280",
    "end": "3143359"
  },
  {
    "text": "you know it's it's beautiful there's no need to needlessly build layered software",
    "start": "3143359",
    "end": "3148559"
  },
  {
    "text": "we just call the code it's cool and it's a style much more compatible with modern microservices and",
    "start": "3148559",
    "end": "3154400"
  },
  {
    "text": "feature-based organization than like dogmatic onion-layered end-tiered architectures",
    "start": "3154400",
    "end": "3160160"
  },
  {
    "text": "now this repeated cycle of high-level to low-level testing results in code bases with less compromises made for testing",
    "start": "3160160",
    "end": "3166800"
  },
  {
    "text": "ironically and with architectures that are more amenable to change because the tests are all either very high level what does",
    "start": "3166800",
    "end": "3173359"
  },
  {
    "text": "this do or a very detail-oriented level here is a pocket of complexity that we need to understand",
    "start": "3173359",
    "end": "3179280"
  },
  {
    "text": "we're liberated from the repetitive onion peel test code bases that are like treacle",
    "start": "3179280",
    "end": "3184480"
  },
  {
    "text": "and that the damage our code's ability to change and you know what we're really doing is building code",
    "start": "3184480",
    "end": "3189599"
  },
  {
    "text": "that's able to change easily and that's the most important metric really that's that's the real deal",
    "start": "3189599",
    "end": "3196480"
  },
  {
    "text": "now in the mid 2000s when lots of thinking and writing on this topic happened the",
    "start": "3197040",
    "end": "3202720"
  },
  {
    "text": "london extreme tuesday club popularized the idea of what later became known as moccas testing",
    "start": "3202720",
    "end": "3208559"
  },
  {
    "text": "that's the same onion peel approach where each layer of software mocks and tests its expectations of the",
    "start": "3208559",
    "end": "3214319"
  },
  {
    "text": "one below it now it was promoted as an alternative to a traditional classical tdd",
    "start": "3214319",
    "end": "3221440"
  },
  {
    "text": "and i think this new wave of developer tests both replaces that style completely",
    "start": "3221440",
    "end": "3227599"
  },
  {
    "text": "and illuminates the negative side effects it's had on all of software um the london school moccase style",
    "start": "3227599",
    "end": "3233440"
  },
  {
    "text": "testing is brittle and doesn't survive and doesn't last and was a mistake",
    "start": "3233440",
    "end": "3239359"
  },
  {
    "text": "so how do you make tests that don't suck don't do that",
    "start": "3239680",
    "end": "3245520"
  },
  {
    "text": "thank you",
    "start": "3245520",
    "end": "3248760"
  },
  {
    "text": "any questions go set fire to clean code",
    "start": "3253760",
    "end": "3261160"
  }
]