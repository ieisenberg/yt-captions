[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "good morning everyone how's NDC Oso so",
    "start": "0",
    "end": "5040"
  },
  {
    "text": "far so today's talk is about scaling large angular apps my name is j bran and",
    "start": "5680",
    "end": "12320"
  },
  {
    "text": "I founded startup called EOB in the Mina region which connects patients and doctors online and right now I'm",
    "start": "12320",
    "end": "18359"
  },
  {
    "text": "teaching with loao in Brussels Amsterdam and Lisbon and I love open",
    "start": "18359",
    "end": "24119"
  },
  {
    "text": "source so I want to start by telling you exactly what I mean by scalings because it can mean literally anything thing and",
    "start": "24119",
    "end": "31279"
  },
  {
    "text": "what we're going to cover today is how we can scale on an angular project the number of developers how we can scale the",
    "start": "31279",
    "end": "38000"
  },
  {
    "text": "performance and the functionality and by functionality I mean how can we keep on adding functionality to our project",
    "start": "38000",
    "end": "44239"
  },
  {
    "text": "because with time sometimes it can get very hard and I will start with the takeaway",
    "start": "44239",
    "end": "51039"
  },
  {
    "text": "of the talk which is scaling requires a solid code base so this is why we will be",
    "start": "51039",
    "end": "58440"
  },
  {
    "text": "exploring we will be talking about JavaScript I'll be talking about component based",
    "start": "58440",
    "end": "64198"
  },
  {
    "text": "architecture even API calls then performance and at the end I'm going to",
    "start": "64199",
    "end": "70280"
  },
  {
    "text": "show you how angular 2 is fixing all of the problems because mainly today I'm focusing about angular",
    "start": "70280",
    "end": "76320"
  },
  {
    "text": "one so let's talk about JavaScript and technically this is how",
    "start": "76320",
    "end": "82960"
  },
  {
    "start": "78000",
    "end": "78000"
  },
  {
    "text": "it all started in 1997 we had ES1 which is ecmascript one and then a",
    "start": "82960",
    "end": "88920"
  },
  {
    "text": "year later we had es2 and then 1999 ES3 and then for 9 years almost nothing they",
    "start": "88920",
    "end": "95799"
  },
  {
    "text": "working on ES4 which wasn't released but then we had es5 which is what you know today which is what you're using ecos",
    "start": "95799",
    "end": "101920"
  },
  {
    "text": "script 5 and then for six years we've been using es5 no new additions to the",
    "start": "101920",
    "end": "107520"
  },
  {
    "text": "language no new features just like just like it was so as I told you we've all",
    "start": "107520",
    "end": "113600"
  },
  {
    "text": "been using ecmascript 5 because we know it's supported on all browsers but the nice thing is that we will be having new",
    "start": "113600",
    "end": "120399"
  },
  {
    "text": "releases every year this is why we have es 2015 2016 2017 so on and so",
    "start": "120399",
    "end": "127520"
  },
  {
    "text": "forth so I'm going to talk a bit about es 2015 and technically you already know es",
    "start": "127520",
    "end": "135080"
  },
  {
    "text": "2015 that's because your es5 code already runs inside es 2015 so if I want",
    "start": "135080",
    "end": "142440"
  },
  {
    "text": "to put this into a vanent diagram you have this is your es5 code and then you have this super set which is es 20105",
    "start": "142440",
    "end": "150200"
  },
  {
    "text": "and then you have another Super set which is es",
    "start": "150200",
    "end": "154599"
  },
  {
    "text": "2016 and now the reason why they created es 2015 was to fix some of the es5",
    "start": "155440",
    "end": "162440"
  },
  {
    "text": "problems and there are a lot honestly and they wanted to bring modern syntax and new features to the",
    "start": "162440",
    "end": "169159"
  },
  {
    "text": "language and if you're wondering how it works like how can you write the 2015",
    "start": "169159",
    "end": "174360"
  },
  {
    "text": "code if it doesn't run in the browser because we don't have the perfect browser support yet in all of them what",
    "start": "174360",
    "end": "180319"
  },
  {
    "text": "we do is we write in es 2015 the new language and it gets transpiled into es5",
    "start": "180319",
    "end": "186640"
  },
  {
    "text": "we call it es5 compliant because all the browsers know how to run it and we can use a tool such as Babble for",
    "start": "186640",
    "end": "193519"
  },
  {
    "text": "this so I'm going to show you a few es 2015 features without without uh taking",
    "start": "193519",
    "end": "200159"
  },
  {
    "text": "a lot of time on this so we've got template strings classes L and const arof functions and a",
    "start": "200159",
    "end": "207840"
  },
  {
    "text": "lot more but these are the only things that I'm going to show you",
    "start": "207840",
    "end": "212120"
  },
  {
    "text": "today so if you were in the previous angular talk you probably seen template strings they're technically like regular",
    "start": "215599",
    "end": "222480"
  },
  {
    "text": "strings but with backtick we call it the backck operator sorry the back character and they allow you to do multi-line",
    "start": "222480",
    "end": "228799"
  },
  {
    "text": "strings just easily without appending uh without concatenating a string with back",
    "start": "228799",
    "end": "234159"
  },
  {
    "text": "slash end to another string Etc and you can finally do interpolation so so if",
    "start": "234159",
    "end": "239840"
  },
  {
    "text": "you got a variable called name you can do interpolation inside of it and that's by using this dollar sign curly braces",
    "start": "239840",
    "end": "246879"
  },
  {
    "text": "and then the variable name and then we've got classes so in this example I'm creating my own custom",
    "start": "246879",
    "end": "253920"
  },
  {
    "text": "class which I called person and it has a Constructor like in initialized function",
    "start": "253920",
    "end": "259519"
  },
  {
    "text": "that has two arguments first name and last name then I can say this do first name equals first name same thing for",
    "start": "259519",
    "end": "266040"
  },
  {
    "text": "last name so I'm setting the attributes then I can create my own custom function for example get full name and I'm using",
    "start": "266040",
    "end": "273080"
  },
  {
    "text": "here template strings which returns first name space last name then if I want to call it in my",
    "start": "273080",
    "end": "279479"
  },
  {
    "text": "code I can say V John equals new person and then john. get full name but I have",
    "start": "279479",
    "end": "284720"
  },
  {
    "text": "to tell you that I'll keep it for a few",
    "start": "284720",
    "end": "289240"
  },
  {
    "text": "seconds okay so that's the code behind the classes it makes things more neat but I",
    "start": "292160",
    "end": "298479"
  },
  {
    "text": "have to tell you that this is is only a syntactic sugar so everything you know in the Prototype objectoriented",
    "start": "298479",
    "end": "304520"
  },
  {
    "text": "JavaScript is still the same this is just a way to make them look nicer and then we've got Arrow",
    "start": "304520",
    "end": "312560"
  },
  {
    "text": "functions um so this is an example of an arrow function I can say VAR say hello",
    "start": "312560",
    "end": "318039"
  },
  {
    "text": "equals I start with the arguments and then do the arrow and then curly braces",
    "start": "318039",
    "end": "323720"
  },
  {
    "text": "and have my code inside it might look a bit weird the first time you see it but it solves problems that I'm not going to",
    "start": "323720",
    "end": "329319"
  },
  {
    "text": "talk talk about today which we call the lexical disc but it's very useful and it's uh it's short uh it's short then",
    "start": "329319",
    "end": "337280"
  },
  {
    "text": "we've got let so uh for example inside this for Loop we create",
    "start": "337280",
    "end": "344360"
  },
  {
    "text": "let x equals zero and uh we can do console. log X inside the for Loop but",
    "start": "344360",
    "end": "351240"
  },
  {
    "text": "outside the loop we do not have access to X this is what we call X is block scope block scope not like the VAR which",
    "start": "351240",
    "end": "359160"
  },
  {
    "text": "is when you create it inside the for Loop you have access outside of it which can lead to several issues later",
    "start": "359160",
    "end": "366199"
  },
  {
    "text": "on so um and then I'm going to talk a bit about typescript as well so",
    "start": "366199",
    "end": "371639"
  },
  {
    "start": "369000",
    "end": "369000"
  },
  {
    "text": "typescript compiles to regular JavaScript just like we used to do with the S 2015 to es5 but if you look at",
    "start": "371639",
    "end": "378319"
  },
  {
    "text": "this example which adds two variables X and Y you can actually tell typescript that I expect X and Y to be of type",
    "start": "378319",
    "end": "385960"
  },
  {
    "text": "number but don't forget that when you compile this to or transpile this into JavaScript the types will be gone and",
    "start": "385960",
    "end": "393280"
  },
  {
    "text": "the easiest way to show you the benefit behind this is you cannot do add string",
    "start": "393280",
    "end": "398520"
  },
  {
    "text": "to integer I know this is a dull example but this is the simplest thing I can show you so it can warn you when you do",
    "start": "398520",
    "end": "405639"
  },
  {
    "text": "things wrong so some types script benefits are",
    "start": "405639",
    "end": "410680"
  },
  {
    "text": "static analysis are actually all the benefits we get from static analysis because we have it is now typed and we",
    "start": "410680",
    "end": "419039"
  },
  {
    "text": "also get get code completion which is also awesome in the text editor so when I press dot I get exactly what I should",
    "start": "419039",
    "end": "425120"
  },
  {
    "text": "see for this function or for this variable and as John Papa said if you",
    "start": "425120",
    "end": "431080"
  },
  {
    "text": "screw up it'll tell you that's the main benefit of",
    "start": "431080",
    "end": "436000"
  },
  {
    "text": "typescript and then there are other typescript features for example I showed you a bit about types and I'm really",
    "start": "441160",
    "end": "447599"
  },
  {
    "text": "interested in typ interfaces so I can create an interface call it I",
    "start": "447599",
    "end": "452840"
  },
  {
    "text": "user I for interface it's just a naming convention and I know for sure that this interface will have a first name of type",
    "start": "452840",
    "end": "459759"
  },
  {
    "text": "string and the last name of type string and can have optionally a age variable",
    "start": "459759",
    "end": "465560"
  },
  {
    "text": "an age property of type number the option is because of the queries the question mark so you can think of",
    "start": "465560",
    "end": "472599"
  },
  {
    "text": "interfaces as a code contract and you know this is very beneficial in teams if you have a code contract so with the",
    "start": "472599",
    "end": "479960"
  },
  {
    "text": "same interface I I hint the user variable to be of type I user now I know",
    "start": "479960",
    "end": "485720"
  },
  {
    "text": "that I can get the autoc completion of user. first name and I know for sure that it should exist so these things are",
    "start": "485720",
    "end": "492280"
  },
  {
    "text": "very beneficial when you're working in a team so as a recap for all the",
    "start": "492280",
    "end": "499199"
  },
  {
    "text": "JavaScript that we've been talking about everything is transpiled into es5 right",
    "start": "499199",
    "end": "504639"
  },
  {
    "text": "now but it can change in a year or two so once we have es 2015 support across",
    "start": "504639",
    "end": "509680"
  },
  {
    "text": "all browsers you do not change your code you only change the config file and instead of transpiling into S5 we",
    "start": "509680",
    "end": "515919"
  },
  {
    "text": "transpile into s25 and so once again the V diagram is",
    "start": "515919",
    "end": "521120"
  },
  {
    "text": "we have es5 then we've got a super set which is es",
    "start": "521120",
    "end": "526279"
  },
  {
    "text": "2015 then another superet es 2016 and we have this huge superet which is",
    "start": "526279",
    "end": "532560"
  },
  {
    "text": "typescript so typescript allows you to use the future today allows you to use all the nice things all the nice",
    "start": "532560",
    "end": "538560"
  },
  {
    "text": "features just today so that's it about JavaScript and",
    "start": "538560",
    "end": "543839"
  },
  {
    "text": "now when you're starting a new project in angular we often know that if you want to set up your project by yourself",
    "start": "543839",
    "end": "550320"
  },
  {
    "start": "545000",
    "end": "545000"
  },
  {
    "text": "it's going to take a lot of time and it's almost impossible to get right because there are so many things",
    "start": "550320",
    "end": "556160"
  },
  {
    "text": "involved and if you think you got it right just wait a couple of weeks and you will start seeing that the folder",
    "start": "556160",
    "end": "561480"
  },
  {
    "text": "structure is not working properly so I would like to introduce you for an angular one generator that",
    "start": "561480",
    "end": "568880"
  },
  {
    "text": "can uh generate your app so assuming you have Yo which is Yan a generator and",
    "start": "568880",
    "end": "574920"
  },
  {
    "text": "then Gulp and B installed you can install this generator and then just run",
    "start": "574920",
    "end": "580519"
  },
  {
    "text": "y gulp Das angular and what this thing is going to do is just ask you a couple of smart",
    "start": "580519",
    "end": "587399"
  },
  {
    "text": "questions I summarize some of them so would you like to use a rest",
    "start": "587399",
    "end": "593440"
  },
  {
    "text": "resource Library which means it gives you options like would you use would you like to use dollar HTTP or maybe dollar",
    "start": "593440",
    "end": "600279"
  },
  {
    "text": "resources or restangular and you can choose whichever option you like then it asks about the UI framework so would you",
    "start": "600279",
    "end": "607120"
  },
  {
    "text": "like to use material design light angular material bootstrap or even no UI",
    "start": "607120",
    "end": "613279"
  },
  {
    "text": "uh framework you can choose between less SAS or stylus Etc so you can really",
    "start": "613279",
    "end": "620680"
  },
  {
    "text": "customize it to fit what you're looking up what you want and then mainly for",
    "start": "620680",
    "end": "625800"
  },
  {
    "text": "JavaScript pre-processing you can choose between es25 by transpiling transpiling using bubble",
    "start": "625800",
    "end": "631920"
  },
  {
    "text": "or you can even choose typescript or you can just choose plain JavaScript and then basically that's it at the end it",
    "start": "631920",
    "end": "638079"
  },
  {
    "text": "will run npm install so it probably take forever but",
    "start": "638079",
    "end": "643600"
  },
  {
    "text": "that's a really nice starting point and now I need to introduce you to",
    "start": "643600",
    "end": "649160"
  },
  {
    "text": "component based architecture so you're probably seeing that it's really all about uh some kind of having a solid",
    "start": "649160",
    "end": "655000"
  },
  {
    "text": "code base it's not about doing one particular thing",
    "start": "655000",
    "end": "661040"
  },
  {
    "text": "and component based archit architecture is now possible because of angular 1.5 and it kind of mimics what's going",
    "start": "664320",
    "end": "671440"
  },
  {
    "text": "to happen in angular 2 so you're not learning something that you will need to uh throw out in the garbage very soon",
    "start": "671440",
    "end": "679480"
  },
  {
    "text": "and the benefits of component based architecture is that the components you build are testable reusable and isolated",
    "start": "679480",
    "end": "686760"
  },
  {
    "text": "isolation is very important in teams so I will talk about this later on now how many of you are still using",
    "start": "686760",
    "end": "693760"
  },
  {
    "text": "NG controller raise hands up okay so uh I will start with some of the best",
    "start": "693760",
    "end": "699720"
  },
  {
    "text": "practices that uh there have been circulating in the community that we need to get rid of plane",
    "start": "699720",
    "end": "705839"
  },
  {
    "start": "704000",
    "end": "704000"
  },
  {
    "text": "controllers and the simplest reason is because uh plane controllers like NG",
    "start": "705839",
    "end": "711079"
  },
  {
    "text": "controller has been removed in angular 2 so what we do instead we stick to components now of course inside the",
    "start": "711079",
    "end": "718000"
  },
  {
    "text": "component there will be a controller but this controller is strictly to be used by this component it's not a global",
    "start": "718000",
    "end": "723680"
  },
  {
    "text": "controller available everywhere in your code so we only stick to",
    "start": "723680",
    "end": "729079"
  },
  {
    "text": "components and I can show you a quick uh like from controllers to components code",
    "start": "729079",
    "end": "735680"
  },
  {
    "text": "so instead of having div NG controller and then side menu controller you can actually have a more much more",
    "start": "735680",
    "end": "742360"
  },
  {
    "text": "expressive syntax which is a component I called it side menu and I can even pass",
    "start": "742360",
    "end": "747519"
  },
  {
    "text": "in custom attributes like theme equals dark and if you're wondering how would",
    "start": "747519",
    "end": "754279"
  },
  {
    "text": "the code behind this look in es 2015 it would look something like a class side",
    "start": "754279",
    "end": "759480"
  },
  {
    "text": "menu controller which has a Constructor that does nothing for now and then we can register the",
    "start": "759480",
    "end": "767040"
  },
  {
    "text": "component by saying angular module app and then do component I'm going to",
    "start": "767040",
    "end": "772199"
  },
  {
    "text": "register it as side menu with the lowercase s and capital M and then I",
    "start": "772199",
    "end": "778000"
  },
  {
    "text": "need to point it to the the correct template URL so I say template URL Sid menu. component. HTML this is where my",
    "start": "778000",
    "end": "784279"
  },
  {
    "text": "view is going to be and I reference the controller by saying side menu",
    "start": "784279",
    "end": "790480"
  },
  {
    "text": "controller so that's a really nice way to start writing components in angular",
    "start": "790480",
    "end": "796000"
  },
  {
    "text": "1.5 hands up for dollar scope come on don't be",
    "start": "796000",
    "end": "802360"
  },
  {
    "text": "afraid okay so uh you're you're taking",
    "start": "802360",
    "end": "807760"
  },
  {
    "text": "picture okay so um so we need to get rid of dollar",
    "start": "807760",
    "end": "816320"
  },
  {
    "text": "scope the reason why once again is because it doesn't exist in angular 2",
    "start": "816320",
    "end": "821360"
  },
  {
    "text": "anymore and it just clutters our code U without any like beneficial reason so",
    "start": "821360",
    "end": "827959"
  },
  {
    "text": "what we're going to do instead is we will bind to this keyword this by using",
    "start": "827959",
    "end": "833160"
  },
  {
    "text": "the controller as syntax how many of you have been using the controller as syntax great",
    "start": "833160",
    "end": "840759"
  },
  {
    "text": "so instead of having this terrible thing we registering a controller and then",
    "start": "842279",
    "end": "847959"
  },
  {
    "text": "injecting do scope Etc we will be fixing it",
    "start": "847959",
    "end": "855759"
  },
  {
    "text": "into and in the view you would have a name variable we would be fixing it to uh use the S 2015 syntax and the",
    "start": "855880",
    "end": "862920"
  },
  {
    "text": "controller as so we would have a class and then in the Constructor I do this. name was",
    "start": "862920",
    "end": "869560"
  },
  {
    "text": "igore and then when I register the component the only thing I need to change is ADD controller as dollar Ctrl",
    "start": "869560",
    "end": "876600"
  },
  {
    "text": "has anyone been using VM instead of dlll yeah it's basically the same they just changed the documentation uh the best",
    "start": "876600",
    "end": "883639"
  },
  {
    "text": "practice for it a few weeks ago or a few months ago and by the way if I omit controller as it would still work",
    "start": "883639",
    "end": "890040"
  },
  {
    "text": "because this is a default here but I needed to add it so I can tell you about it but then the only thing that changes",
    "start": "890040",
    "end": "895720"
  },
  {
    "text": "in the view is that you need to prefix name with dollar C r l so this is where you probably seen vm.",
    "start": "895720",
    "end": "902680"
  },
  {
    "text": "name and again that's how you can benefit from this new syntax and make your code look much",
    "start": "902680",
    "end": "911320"
  },
  {
    "text": "cleaner so then I'm going to talk about components and directives so there has",
    "start": "915480",
    "end": "920680"
  },
  {
    "start": "917000",
    "end": "917000"
  },
  {
    "text": "been a bit of confusion between components and directives should I use a component should I use a directive or is",
    "start": "920680",
    "end": "926320"
  },
  {
    "text": "there even a difference I'm just going to Briefly summarize it that components are meant for UI components I know I use",
    "start": "926320",
    "end": "933319"
  },
  {
    "text": "the word component again but so when you have when you're building your application uh you can think of UI",
    "start": "933319",
    "end": "939199"
  },
  {
    "text": "components as Lego blocks so I have this user detail here I have this to-do entry",
    "start": "939199",
    "end": "945240"
  },
  {
    "text": "user info user profile those components and when I add them together I will have",
    "start": "945240",
    "end": "950440"
  },
  {
    "text": "a page or a website and components promote best practices by default like the controller",
    "start": "950440",
    "end": "956560"
  },
  {
    "text": "as syntax like the bind to control controller which will not see but it has the best practices built built",
    "start": "956560",
    "end": "964160"
  },
  {
    "text": "in and then for directives so they're mainly meant for Dom manipulations if you're doing Dom manipulations think of",
    "start": "964160",
    "end": "970920"
  },
  {
    "text": "it as if you were doing your own ngf you would use a directive so they're not mainly for uh doing UI components that",
    "start": "970920",
    "end": "978279"
  },
  {
    "text": "you will uh use for your",
    "start": "978279",
    "end": "983040"
  },
  {
    "text": "UI and then for component isolation which I mentioned is very important in teams I will start with the folder",
    "start": "987519",
    "end": "993839"
  },
  {
    "start": "988000",
    "end": "988000"
  },
  {
    "text": "structure which is something you will get by default if you use the generator that I showed you so the folder by feature",
    "start": "993839",
    "end": "1000920"
  },
  {
    "text": "architecture allows us to group related features into feature files into one folder so everything that relates to one",
    "start": "1000920",
    "end": "1008319"
  },
  {
    "text": "feature will be in the same folder and this is easier to maintain especially on the longr if you go back in six month",
    "start": "1008319",
    "end": "1015880"
  },
  {
    "text": "and you look at the side menu folder you know that that you will find everything inside like the Sid menu. component. HML",
    "start": "1015880",
    "end": "1022720"
  },
  {
    "text": "this is the view sidem menu. component.js this is the component Javascript file and I also have DOS spc.",
    "start": "1022720",
    "end": "1029880"
  },
  {
    "text": "JS for the tests and for example all the SAS or L files in the same",
    "start": "1029880",
    "end": "1036720"
  },
  {
    "text": "folder and then the funniest issue is coping CSS like we want to avoid Class",
    "start": "1038160",
    "end": "1044199"
  },
  {
    "text": "Collision in teams you end up having the same classes being used Maybe uh on on",
    "start": "1044199",
    "end": "1049440"
  },
  {
    "text": "different components and changing one property here would conflict another uh property so you end up doing a meeting",
    "start": "1049440",
    "end": "1056280"
  },
  {
    "text": "and after the meeting we agree that we will have unnecessary long names to avoid this class confusion and it's not",
    "start": "1056280",
    "end": "1062520"
  },
  {
    "text": "really a nice way to deal with it and also we want to scope CSS because we want to keep our files short so um I",
    "start": "1062520",
    "end": "1070720"
  },
  {
    "text": "would suggest using name naming conventions uh like BM or suit CSS has",
    "start": "1070720",
    "end": "1075840"
  },
  {
    "text": "anyone been using BM or suit CSS none okay so uh I will introduce suit",
    "start": "1075840",
    "end": "1083360"
  },
  {
    "text": "CSS but you can use BM or any other uh naming convention that really thinks at",
    "start": "1083360",
    "end": "1089000"
  },
  {
    "text": "the component level so uh on the top I will show you",
    "start": "1089000",
    "end": "1094159"
  },
  {
    "text": "uh the general rule and below I will show you an example so do component name",
    "start": "1094159",
    "end": "1100400"
  },
  {
    "text": "in our example is going to be a button so if you're building a component for a button we would start by saying dot button with a capital",
    "start": "1100400",
    "end": "1107120"
  },
  {
    "text": "B and then we can have a modifier and the Syntax for the modifier is by having",
    "start": "1107120",
    "end": "1112400"
  },
  {
    "text": "the dash dash so do component name-- modifier name in our example it could be",
    "start": "1112400",
    "end": "1117799"
  },
  {
    "text": "something like button large or button dark so immediately when I see this dash",
    "start": "1117799",
    "end": "1122880"
  },
  {
    "text": "dash syntax I know that this is a modifier so this is something I can add maybe next to the button to change the",
    "start": "1122880",
    "end": "1128880"
  },
  {
    "text": "way it looks like and then we've got descendant descendant so component name Dash only",
    "start": "1128880",
    "end": "1135760"
  },
  {
    "text": "one dash descendant name and our example could be button Das icon so now again I",
    "start": "1135760",
    "end": "1141080"
  },
  {
    "text": "immediately know that this is a descendant of button and finally we have the is state",
    "start": "1141080",
    "end": "1147000"
  },
  {
    "text": "of component for example like button is active so I will show you an HML example",
    "start": "1147000",
    "end": "1152520"
  },
  {
    "text": "of this uh we can have something like this div in the class button then inside of",
    "start": "1152520",
    "end": "1159480"
  },
  {
    "text": "it we uh told you about the descendant we can have a button icon and then you",
    "start": "1159480",
    "end": "1164799"
  },
  {
    "text": "can have the modifi so you can have button-- large or you can remove it but that's how the",
    "start": "1164799",
    "end": "1171400"
  },
  {
    "text": "modifier is meant to be used and finally you can also use is",
    "start": "1171400",
    "end": "1176799"
  },
  {
    "text": "active so once again the purpose behind this is to scope CSS because up until",
    "start": "1176799",
    "end": "1182840"
  },
  {
    "text": "now this is the best thing we had I will mention how angular 2 is changing this at the end of the",
    "start": "1182840",
    "end": "1188919"
  },
  {
    "text": "talk and uh what I really like about suit CSS is that we don't have those dangling classes anymore just like",
    "start": "1188919",
    "end": "1195240"
  },
  {
    "text": "Twitter bootp you've got navbar BTN everywhere and if you've got some Junior",
    "start": "1195240",
    "end": "1200760"
  },
  {
    "text": "developers on your team they'll probably end up using nvar at display flex and then the whole website doesn't work so",
    "start": "1200760",
    "end": "1208000"
  },
  {
    "text": "uh what suss tells us is it's better to prefix our helpers with youu you for",
    "start": "1208000",
    "end": "1213720"
  },
  {
    "text": "utility so all the utilities will be prefixed with - something that way you",
    "start": "1213720",
    "end": "1218799"
  },
  {
    "text": "know that this class is being used everywhere and you should probably not have a lot of",
    "start": "1218799",
    "end": "1225000"
  },
  {
    "text": "them and now for API calls this is my",
    "start": "1227159",
    "end": "1232240"
  },
  {
    "start": "1231000",
    "end": "1231000"
  },
  {
    "text": "favorite part of this talk although people will be wondering you might be wondering why does what does API calls",
    "start": "1232240",
    "end": "1238960"
  },
  {
    "text": "have to do with scaling large angular apps so I'm going to ask you how many times do you call your",
    "start": "1238960",
    "end": "1244600"
  },
  {
    "text": "API and what I mean by this if you look for for example D http.get and poost in",
    "start": "1244600",
    "end": "1251400"
  },
  {
    "text": "your code how many times do you think you will how many results do you think you will get raise raise your hands for",
    "start": "1251400",
    "end": "1256880"
  },
  {
    "text": "30 plus you can raise your hand again because",
    "start": "1256880",
    "end": "1261960"
  },
  {
    "text": "how many of you think it's 50 plus and sometimes it's also 100 plus so",
    "start": "1261960",
    "end": "1268360"
  },
  {
    "text": "if you're doing something that frequent to your code why not take a step back and think how we can make it uh more",
    "start": "1268360",
    "end": "1276480"
  },
  {
    "text": "fluent how we can avoid boilerplate code so so in this example I'll be using",
    "start": "1276480",
    "end": "1281799"
  },
  {
    "text": "restangular which is an API library and I will use restangular to remove all the",
    "start": "1281799",
    "end": "1287240"
  },
  {
    "text": "B boiler code so we can keep our code dry and dry as in don't repeat yourself",
    "start": "1287240",
    "end": "1293919"
  },
  {
    "text": "and at the end we will notice that we will have a fluent syntax so you don't have to use restangular you can use",
    "start": "1293919",
    "end": "1299039"
  },
  {
    "text": "dollar HTTP and build your own functions on top of it or you can use another library but just for the sake of this",
    "start": "1299039",
    "end": "1306559"
  },
  {
    "text": "example so and the first thing I'm going to do is I'm going to create my own API service so this is a regular angular",
    "start": "1306559",
    "end": "1313240"
  },
  {
    "text": "service I called it API and uh I just returned restangular",
    "start": "1313240",
    "end": "1319159"
  },
  {
    "text": "with a custom configuration and we will be configuring restangular step by step",
    "start": "1319159",
    "end": "1324200"
  },
  {
    "text": "what this means is from now on you will see the word API you can think of it as dollar HTTP but it's my own version on",
    "start": "1324200",
    "end": "1330559"
  },
  {
    "text": "top of restangular so I'll start with the basics and it's really good",
    "start": "1330559",
    "end": "1337799"
  },
  {
    "start": "1334000",
    "end": "1334000"
  },
  {
    "text": "to uh with the base configuration is very important because imagine if you were doing something like api. getet and",
    "start": "1337799",
    "end": "1344760"
  },
  {
    "text": "then you have this whole base URL and then SL users once again api. poost all of the URL it",
    "start": "1344760",
    "end": "1352000"
  },
  {
    "text": "doesn't really make sense if you want to change the space URL it's going to take a lot of time and it's not best practice",
    "start": "1352000",
    "end": "1357799"
  },
  {
    "text": "so what we can do instead is we can just configure in the configuration part that I showed you you",
    "start": "1357799",
    "end": "1363840"
  },
  {
    "text": "can just configure and set the base URL to something like example.com API",
    "start": "1363840",
    "end": "1370200"
  },
  {
    "text": "V1 I know this is simple but it will save a lot of time later on and then in",
    "start": "1370200",
    "end": "1375400"
  },
  {
    "text": "your code you would just use it as API doget users api. poost",
    "start": "1375400",
    "end": "1381159"
  },
  {
    "text": "articles has anyone been doing something similar with d HTP okay we're on the right track and",
    "start": "1381159",
    "end": "1388200"
  },
  {
    "text": "this allows for environment based base URL which is also simple but you can",
    "start": "1388200",
    "end": "1394520"
  },
  {
    "text": "easily flip the environment variable and then change the base URL without adding some tooling so if you're on staging you",
    "start": "1394520",
    "end": "1401240"
  },
  {
    "text": "can flip it if you're on uh testing you can flip it and then for all remaining cases you're on production so we need to",
    "start": "1401240",
    "end": "1407480"
  },
  {
    "text": "use the production",
    "start": "1407480",
    "end": "1410278"
  },
  {
    "text": "endpoint and then same for default headers if you're sending a particular header on every request or maybe every",
    "start": "1412720",
    "end": "1419840"
  },
  {
    "text": "subset of requests you can just set it from the configuration in this example I'm doing content negotiation with a",
    "start": "1419840",
    "end": "1426400"
  },
  {
    "text": "server I'm particularly particularly asking for V1 and I'm asking for a",
    "start": "1426400",
    "end": "1432039"
  },
  {
    "text": "return type of Json but it could be any any header that you send you can just set it from the configuration and then",
    "start": "1432039",
    "end": "1437880"
  },
  {
    "text": "then you forget about it now for the even more interesting",
    "start": "1437880",
    "end": "1442919"
  },
  {
    "start": "1442000",
    "end": "1442000"
  },
  {
    "text": "part our request interceptors how many of you have been using them great um so a request Interceptor",
    "start": "1442919",
    "end": "1451400"
  },
  {
    "text": "is basically a method that gets called before every API call so for example",
    "start": "1451400",
    "end": "1457159"
  },
  {
    "text": "this function which uses the arrow syntax with ADD request Interceptor this function inside the block will be called",
    "start": "1457159",
    "end": "1464720"
  },
  {
    "text": "every time before sending the request so what this allows I'm going to show a",
    "start": "1464720",
    "end": "1470240"
  },
  {
    "text": "few examples you can do everything related to http authentication so",
    "start": "1470240",
    "end": "1475559"
  },
  {
    "text": "whether you're doing basic HTTP authentication JWT Json web token authentication or even token",
    "start": "1475559",
    "end": "1482880"
  },
  {
    "text": "authentication for example you can read a token from the local storage if it exists and then again check if it exists",
    "start": "1482880",
    "end": "1489080"
  },
  {
    "text": "and add a custom header instead of doing it in a weird or bizarre way so you can",
    "start": "1489080",
    "end": "1494200"
  },
  {
    "text": "manage all your authentication from inside the request interceptor",
    "start": "1494200",
    "end": "1499760"
  },
  {
    "text": "and then we will see the same but for response interceptors so a response",
    "start": "1501600",
    "end": "1506960"
  },
  {
    "start": "1504000",
    "end": "1504000"
  },
  {
    "text": "Interceptor is technically a method that gets called after receiving data from the server every time after receiving",
    "start": "1506960",
    "end": "1512960"
  },
  {
    "text": "data and the syntax looks almost exactly the same but this allows us to do much more",
    "start": "1512960",
    "end": "1520840"
  },
  {
    "text": "powerful things so if I use both uh the request Interceptor and the response Interceptor we can handle we can manage",
    "start": "1520840",
    "end": "1527320"
  },
  {
    "text": "the load state from one place of the app so I can set a request Interceptor to",
    "start": "1527320",
    "end": "1532840"
  },
  {
    "text": "start a loader this is where what loader service. start does so when we send a",
    "start": "1532840",
    "end": "1538799"
  },
  {
    "text": "request we start the loader and then when we get the response back we stop it so I find this really elegant",
    "start": "1538799",
    "end": "1546200"
  },
  {
    "text": "solution especially in teams where you have sometimes developers forgetting to start the loader or forgetting to stop",
    "start": "1546200",
    "end": "1552720"
  },
  {
    "text": "the loader so we can manage all of this once and then never worry about it",
    "start": "1552720",
    "end": "1559679"
  },
  {
    "text": "and one more thing with interceptors which is for errors and once again error interceptors allow you to set a function",
    "start": "1559960",
    "end": "1567440"
  },
  {
    "start": "1560000",
    "end": "1560000"
  },
  {
    "text": "that gets called after there is an error with the server so this allows us to do even more things so also same",
    "start": "1567440",
    "end": "1576240"
  },
  {
    "text": "syntax and the first example is handling unauthorized requests so if your server",
    "start": "1579200",
    "end": "1585600"
  },
  {
    "text": "sends back 401 you want to redirect the user to the loog login page you can do this by checking the response to status",
    "start": "1585600",
    "end": "1593360"
  },
  {
    "text": "for 401 401 as in unauthorized and then you can redirect",
    "start": "1593360",
    "end": "1599360"
  },
  {
    "text": "uh the user to the login page for example so you do this once and then later on when you're using your API",
    "start": "1599360",
    "end": "1605520"
  },
  {
    "text": "service you don't worry about it",
    "start": "1605520",
    "end": "1608960"
  },
  {
    "text": "anymore and another thing I like to do is to man manage validation errors because validation errors occur on",
    "start": "1614440",
    "end": "1621000"
  },
  {
    "text": "almost every single API call so this is what we used to do before so you would",
    "start": "1621000",
    "end": "1627760"
  },
  {
    "text": "say api. getet users and then you resolve the promise with do then and then you have to pass in two functions",
    "start": "1627760",
    "end": "1634960"
  },
  {
    "text": "the first function is the success callback okay what should I do if everything was successful then the next",
    "start": "1634960",
    "end": "1641279"
  },
  {
    "text": "argument would be what should I do if there was an error so I would go and inject the toast service and then I",
    "start": "1641279",
    "end": "1647120"
  },
  {
    "text": "would show error. data error message and you have to do this every single time by the way this is how a toast would look",
    "start": "1647120",
    "end": "1653640"
  },
  {
    "text": "like for example so instead of doing this TDS process on every single API call what",
    "start": "1653640",
    "end": "1659960"
  },
  {
    "text": "you would do is start by configuring it so 422 in some of the Frameworks uh",
    "start": "1659960",
    "end": "1667679"
  },
  {
    "text": "422 means unprocessable entity so in most Frameworks it's used for uh for validation errors so if there is a 4 to2",
    "start": "1667679",
    "end": "1674960"
  },
  {
    "text": "error I will take the error message from it and and then open a toast so with",
    "start": "1674960",
    "end": "1680120"
  },
  {
    "text": "that piece of code you would you would have solved the validation for most of your",
    "start": "1680120",
    "end": "1686600"
  },
  {
    "text": "application and then you can just simply worry about the success callback so you",
    "start": "1686600",
    "end": "1692320"
  },
  {
    "text": "do api. getet users then resolve the promise and then only worry about the success",
    "start": "1692320",
    "end": "1699640"
  },
  {
    "text": "callback and if you're wondering that this is making me lose my flexibility",
    "start": "1706440",
    "end": "1712840"
  },
  {
    "text": "with the code that is not true because uh you can still pass in a",
    "start": "1712840",
    "end": "1718120"
  },
  {
    "text": "custom error Handler and it will be executed so you're not losing the flexibility of having an error function",
    "start": "1718120",
    "end": "1724320"
  },
  {
    "text": "but you're just setting a generic generic way to handle all the validation errors so you can do things for other",
    "start": "1724320",
    "end": "1730679"
  },
  {
    "text": "responses I just showed you for 401 and 422 and one last thing with the with the",
    "start": "1730679",
    "end": "1739840"
  },
  {
    "text": "dealing with apis sometimes in some projects you're dealing with multiple apis and we already saw how we can do it",
    "start": "1739840",
    "end": "1746399"
  },
  {
    "text": "because remember I created a class API that extends restangular so you can create another API for example API two",
    "start": "1746399",
    "end": "1754279"
  },
  {
    "text": "that extends restangular and has completely different configuration So This is highly",
    "start": "1754279",
    "end": "1759840"
  },
  {
    "text": "customizable and will save you a lot of time and as a summary for the",
    "start": "1759840",
    "end": "1766320"
  },
  {
    "start": "1765000",
    "end": "1765000"
  },
  {
    "text": "apis look at the instead of doing this actually instead of worrying worrying about the headers the base",
    "start": "1766320",
    "end": "1773360"
  },
  {
    "text": "URL success and callback functions you can now do all of this with just",
    "start": "1773360",
    "end": "1780399"
  },
  {
    "text": "this and now on to Performance so this I'll Define my",
    "start": "1787279",
    "end": "1792720"
  },
  {
    "start": "1789000",
    "end": "1789000"
  },
  {
    "text": "strategy first the strategy for performance is not going to be about microand benchmarks I'm not going to",
    "start": "1792720",
    "end": "1798200"
  },
  {
    "text": "tell you to use a particular thing instead of another thing because that's not really the best way to approach",
    "start": "1798200",
    "end": "1804039"
  },
  {
    "text": "performance because in most scenarios you have to rely on profiling and see why this particular issue is slow",
    "start": "1804039",
    "end": "1811000"
  },
  {
    "text": "however I'll try to give you as much as possible uh of generic rules that you can apply and don't forget that the",
    "start": "1811000",
    "end": "1816880"
  },
  {
    "text": "right optimization technique will outweigh thousands of micro benchmarks so this is why we tell you not to waste",
    "start": "1816880",
    "end": "1822720"
  },
  {
    "text": "your time on micro benchmarks",
    "start": "1822720",
    "end": "1828200"
  },
  {
    "start": "1828000",
    "end": "1828000"
  },
  {
    "text": "so angular has something called Watchers but before talking about Watchers I'm going to quickly mention the digest",
    "start": "1828200",
    "end": "1834360"
  },
  {
    "text": "cycle I'm sure you've heard about it it's basically angular's way of say of checking what has changed so angular",
    "start": "1834360",
    "end": "1840360"
  },
  {
    "text": "does some checks okay what has changed and then if it picks up some changes it needs to update the UI that's basically",
    "start": "1840360",
    "end": "1846519"
  },
  {
    "text": "how it works and how does it check for changes it goes through a list of",
    "start": "1846519",
    "end": "1851840"
  },
  {
    "text": "forur so things that angular kind of watches and it sees if they change now",
    "start": "1851840",
    "end": "1858000"
  },
  {
    "text": "what are Watchers so Watchers are created when you have an expression or a",
    "start": "1858000",
    "end": "1863960"
  },
  {
    "text": "one-way data binding if you're using directives like ngf so basically every time you're using the framework you are",
    "start": "1863960",
    "end": "1869200"
  },
  {
    "text": "setting Watchers without knowing it and normally there is no problem with",
    "start": "1869200",
    "end": "1874600"
  },
  {
    "text": "this but when you set too many Watchers the app becomes to feel a bit more responsive that's because the digest",
    "start": "1874600",
    "end": "1880440"
  },
  {
    "text": "cycle is taking up more time than it should and this is a problem that you",
    "start": "1880440",
    "end": "1885799"
  },
  {
    "text": "should solve if you have too many Watchers and I'm GNA have to talk before",
    "start": "1885799",
    "end": "1891720"
  },
  {
    "text": "about two-way data binding so if you're using the new component this would be",
    "start": "1891720",
    "end": "1897279"
  },
  {
    "text": "the Syntax for it before we used to use the scope two points but in in the new syntax it would be bindings and then",
    "start": "1897279",
    "end": "1904360"
  },
  {
    "text": "I'll say theme and then equal sign for two-way data binding and the view would look",
    "start": "1904360",
    "end": "1910559"
  },
  {
    "text": "something like this so side menu theme that I'm binding to another variable another component dollar C l. theme team",
    "start": "1910559",
    "end": "1917960"
  },
  {
    "text": "and this is two-way data binding because we're using the equal",
    "start": "1917960",
    "end": "1922799"
  },
  {
    "text": "sign so if we want to know exactly how two-way data binding we need to explore",
    "start": "1923039",
    "end": "1928480"
  },
  {
    "text": "the two factors of two-way data binding and the first one is parent to child",
    "start": "1928480",
    "end": "1934039"
  },
  {
    "text": "which means when the theme changes in parent go ahead and update it in the",
    "start": "1934039",
    "end": "1939080"
  },
  {
    "text": "child which is the theme which is the side menu and then for the other aspect",
    "start": "1939080",
    "end": "1944159"
  },
  {
    "text": "it would be child to parent and then it means when the theme changes in the",
    "start": "1944159",
    "end": "1950240"
  },
  {
    "text": "child update weight could you do that in angular so a lot of people had no idea",
    "start": "1950240",
    "end": "1956200"
  },
  {
    "text": "that you can do that in angulars so or if you know about it you probably don't use it what I mean by this is in most",
    "start": "1956200",
    "end": "1963080"
  },
  {
    "text": "scenarios we don't really need two-way data binding this is why in angular 2 it has been renamed to input and everything",
    "start": "1963080",
    "end": "1968919"
  },
  {
    "text": "is one-way data binding by default so we don't have to pay for something that we don't need this is why",
    "start": "1968919",
    "end": "1975840"
  },
  {
    "text": "we can start using the one way way data binding syntax in angular 1.5 which is this less than",
    "start": "1975840",
    "end": "1982440"
  },
  {
    "text": "sign and instead of the equal sign for the theme I would say less than and now we have only one way data",
    "start": "1982440",
    "end": "1990720"
  },
  {
    "text": "binding then we've got lazy loading so lazy loading means we should",
    "start": "1999440",
    "end": "2005200"
  },
  {
    "text": "only load what we need without loading uh instead of loading the entire application we just load exactly what we",
    "start": "2005200",
    "end": "2012760"
  },
  {
    "text": "need because uh the benefits of this is that it reduces the footprint the",
    "start": "2012760",
    "end": "2018000"
  },
  {
    "text": "JavaScript footprint so we have the footprint for download and footprint footprint for",
    "start": "2018000",
    "end": "2023360"
  },
  {
    "text": "execution but unfortunately in angular one um lazy loading is not supported by",
    "start": "2023360",
    "end": "2028600"
  },
  {
    "text": "default you can do some workarounds for it but it's not going to be very easy",
    "start": "2028600",
    "end": "2034000"
  },
  {
    "text": "however I can give you an advice which is uh you can create create separate modules and then bootstrap different",
    "start": "2034000",
    "end": "2039919"
  },
  {
    "text": "applications so if you're building a web application that has a client facing app",
    "start": "2039919",
    "end": "2045799"
  },
  {
    "text": "and an admin admin interface then it doesn't really make sense to have only",
    "start": "2045799",
    "end": "2050960"
  },
  {
    "text": "one application instead we will have the app which is for the client then we have another completely different app which",
    "start": "2050960",
    "end": "2057440"
  },
  {
    "text": "is the admin so now you as if you have two independent angular applications and",
    "start": "2057440",
    "end": "2062638"
  },
  {
    "text": "you're not loading something that you don't need for the client and vice versa",
    "start": "2062639",
    "end": "2068879"
  },
  {
    "text": "then for caching how many of you are doing caching in angular just four so caching doesn't",
    "start": "2071560",
    "end": "2079599"
  },
  {
    "start": "2072000",
    "end": "2072000"
  },
  {
    "text": "have to do anything in with angular it's not really what I'm going to say is not really angular specific I'm just",
    "start": "2079599",
    "end": "2085200"
  },
  {
    "text": "reminding you that if something takes a bit of time to get from the server then",
    "start": "2085200",
    "end": "2090398"
  },
  {
    "text": "and it doesn't change frequently then it makes makes sense to just cash it so it's just a reminder that sometimes",
    "start": "2090399",
    "end": "2096960"
  },
  {
    "text": "times the optimizations need to be done uh are not really relevant to angular they are the right the optimization",
    "start": "2096960",
    "end": "2103400"
  },
  {
    "text": "techniques that you already know so you can cach in memory in local storage depending on your purpose if something",
    "start": "2103400",
    "end": "2110119"
  },
  {
    "text": "changes uh every week you can also set an expiration for it so it can expire after a week and um so basically that's",
    "start": "2110119",
    "end": "2118480"
  },
  {
    "text": "it for for caching then I'm really interested to know how many of you have heard about",
    "start": "2118480",
    "end": "2124280"
  },
  {
    "start": "2122000",
    "end": "2122000"
  },
  {
    "text": "the angular production mode okay three even the angular docss haven't heard about the angular",
    "start": "2124280",
    "end": "2130320"
  },
  {
    "text": "production mode or they forgot it so First Development mode so by default",
    "start": "2130320",
    "end": "2135839"
  },
  {
    "text": "angular runs in development mode and the development mode is",
    "start": "2135839",
    "end": "2140880"
  },
  {
    "text": "basically angular goes and attaches thebug information to all your elements",
    "start": "2140880",
    "end": "2145960"
  },
  {
    "text": "have you seen this NG scope before while inspecting yeah so this is this is all",
    "start": "2145960",
    "end": "2154000"
  },
  {
    "text": "angular running and development mode now you're probably you're probably wondering why do they do it so they do",
    "start": "2154000",
    "end": "2160599"
  },
  {
    "text": "they do that because they need to make tools such as bang uh they need to make it possible to work so this is only for",
    "start": "2160599",
    "end": "2167680"
  },
  {
    "text": "debugging purposes so they go and update every element with some data that is",
    "start": "2167680",
    "end": "2173079"
  },
  {
    "text": "relevant for debugging so are you thinking what I'm thinking do you need this in production",
    "start": "2173079",
    "end": "2179440"
  },
  {
    "text": "of course not so and yes you can disable this you can disable development mode",
    "start": "2179440",
    "end": "2185440"
  },
  {
    "text": "which technically brings you into production mode and angular will run perfectly fine without this debug",
    "start": "2185440",
    "end": "2191079"
  },
  {
    "text": "information so it's only for debugging it doesn't matter angular can still work without it it will be actually more",
    "start": "2191079",
    "end": "2197880"
  },
  {
    "text": "optimized without it because angular doesn't have to touch the Dome and update some classes if it doesn't need it so basically this is performance",
    "start": "2197880",
    "end": "2204520"
  },
  {
    "text": "Improvement for free so don't forget to switch to uh enable production mode",
    "start": "2204520",
    "end": "2209800"
  },
  {
    "text": "before deploying on production and the code behind it is very simple you just inject dollar",
    "start": "2209800",
    "end": "2216079"
  },
  {
    "text": "compile provid in the config and disable you say debug info disabled and",
    "start": "2216079",
    "end": "2223119"
  },
  {
    "text": "then false I mean enabled",
    "start": "2223119",
    "end": "2227680"
  },
  {
    "text": "false but now what if we have something wrong on production and you need to",
    "start": "2232680",
    "end": "2237920"
  },
  {
    "text": "debug it's it's still possible you can just open your console and run angular do reload with debug information it's",
    "start": "2237920",
    "end": "2245079"
  },
  {
    "text": "going to reload the page and only set debug mode for you I think they do it using a cookie so you don't lose the",
    "start": "2245079",
    "end": "2251079"
  },
  {
    "text": "debugging flexibility you had on",
    "start": "2251079",
    "end": "2255119"
  },
  {
    "start": "2258000",
    "end": "2258000"
  },
  {
    "text": "Production Service workers hands up for service",
    "start": "2258240",
    "end": "2263560"
  },
  {
    "text": "workers nothing to do with angular I will be completely honest with you this is not angular specific at all but I",
    "start": "2263599",
    "end": "2270400"
  },
  {
    "text": "will show you what I mean by this so first of all a service worker is a script that is run by your browser",
    "start": "2270400",
    "end": "2277440"
  },
  {
    "text": "in the background and separate from the web page",
    "start": "2277440",
    "end": "2283079"
  },
  {
    "text": "so uh so even if the web page is not running you can have a service worker running and the service worker allows us",
    "start": "2283079",
    "end": "2289560"
  },
  {
    "text": "to do features I think you've been hearing about them such as push notifications on the web even offline",
    "start": "2289560",
    "end": "2295839"
  },
  {
    "text": "support or um even intercepting requests so all of these new stuff you can do",
    "start": "2295839",
    "end": "2301319"
  },
  {
    "text": "them using service workers and the best approach to use service worker is to build an shell",
    "start": "2301319",
    "end": "2307560"
  },
  {
    "text": "structure the appell structure means you have something that loads initially that",
    "start": "2307560",
    "end": "2312880"
  },
  {
    "text": "will hold your application it's like a placeholder for your application and this is supposed to load as soon as",
    "start": "2312880",
    "end": "2319520"
  },
  {
    "text": "possible so as fast as it can and every time you enter your website this appell",
    "start": "2319520",
    "end": "2325079"
  },
  {
    "text": "will load super quickly and then it will start requesting other resources um so this is going to give",
    "start": "2325079",
    "end": "2331800"
  },
  {
    "text": "your app a native like performance so for the web this is like the peak of peak of optimization I mean how it looks",
    "start": "2331800",
    "end": "2339000"
  },
  {
    "text": "for the user in terms of user experience you go into a website and then under a split of a second the appell would start",
    "start": "2339000",
    "end": "2345480"
  },
  {
    "text": "clothing and I will show you an example of this",
    "start": "2345480",
    "end": "2351720"
  },
  {
    "text": "um so here's the app shell here's the application shell on the left you can see we have the side menu and we have",
    "start": "2351720",
    "end": "2359040"
  },
  {
    "text": "this header and then just a wide placeholder for the content so this is supposed to load as fast as possible and",
    "start": "2359040",
    "end": "2365760"
  },
  {
    "text": "then it will request the content on the right if you think about it that's how mobile apps work when you click on an",
    "start": "2365760",
    "end": "2372160"
  },
  {
    "text": "icon you've got a splash screen and then you've got a header and the sidebar maybe and then placeholder for the",
    "start": "2372160",
    "end": "2378119"
  },
  {
    "text": "content and then you see a loader so we are now able to do this on the web and I'll show you an",
    "start": "2378119",
    "end": "2384240"
  },
  {
    "text": "example uh of how we can make how we can use service workers to make this app",
    "start": "2384240",
    "end": "2389359"
  },
  {
    "text": "shell load very quick quickly on repeat visits so on the left you've got first visit it's going to take a bit of time",
    "start": "2389359",
    "end": "2395720"
  },
  {
    "text": "and on the right it will load as quickly as if you were on a on a native mobile",
    "start": "2395720",
    "end": "2402000"
  },
  {
    "text": "app so that's it in 0.8 seconds you have the ab structure loading loaded without",
    "start": "2402920",
    "end": "2409119"
  },
  {
    "text": "having all the information that you need but it will show the user that there's",
    "start": "2409119",
    "end": "2414400"
  },
  {
    "text": "something happening so this is great for user experience one more",
    "start": "2414400",
    "end": "2420359"
  },
  {
    "text": "time okay so I can't really dive a lot into",
    "start": "2421960",
    "end": "2428240"
  },
  {
    "text": "service workers I just wanted to introduce you to service workers and again they're not really angular",
    "start": "2428240",
    "end": "2434119"
  },
  {
    "text": "specific but if you're looking to do this kind of user experience then you would have to use service",
    "start": "2434119",
    "end": "2440640"
  },
  {
    "text": "workers and you can use them with angular and now for testing so uh",
    "start": "2440640",
    "end": "2449599"
  },
  {
    "start": "2445000",
    "end": "2445000"
  },
  {
    "text": "testing is very important although some people don't like to do it very",
    "start": "2449599",
    "end": "2455319"
  },
  {
    "text": "correctly um I'm going to tackle a different",
    "start": "2455319",
    "end": "2460680"
  },
  {
    "text": "perspective about testing today so but before we know that writing",
    "start": "2460680",
    "end": "2465800"
  },
  {
    "start": "2464000",
    "end": "2464000"
  },
  {
    "text": "test is very important because it gives us the flexibility to optimize without",
    "start": "2465800",
    "end": "2471280"
  },
  {
    "text": "breaking the previous functionality so if you learn something new and you want to refactor this component you can just",
    "start": "2471280",
    "end": "2476640"
  },
  {
    "text": "make sure that it still works if you have a solid unit test case and obviously this is a requirement",
    "start": "2476640",
    "end": "2483319"
  },
  {
    "text": "for maintaining large angular apps or large apps",
    "start": "2483319",
    "end": "2488240"
  },
  {
    "text": "and uh which will allow us later on to scale our developer",
    "start": "2489119",
    "end": "2494040"
  },
  {
    "text": "team but what I'm going to talk about today is I think it's rarely being talked about which is the developer",
    "start": "2496400",
    "end": "2502680"
  },
  {
    "text": "experience behind tests because I'll be honest with you I don't like writing tests in angular the syntax is horrible",
    "start": "2502680",
    "end": "2509680"
  },
  {
    "text": "and it's you've got so many dollar signs flying around so I'm going to introduce NG Mock and NG Mark allows you to write",
    "start": "2509680",
    "end": "2517839"
  },
  {
    "text": "tests for angular in a declarative way so start by saying NG describe then I",
    "start": "2517839",
    "end": "2524319"
  },
  {
    "text": "name my test and then set whatever module I need to inject and then I can",
    "start": "2524319",
    "end": "2530400"
  },
  {
    "text": "tell NG Mo I want to test the side menu element so I pass an element and say",
    "start": "2530400",
    "end": "2535800"
  },
  {
    "text": "side menu then I can write my test suit inside of it so that's really a nice way",
    "start": "2535800",
    "end": "2542960"
  },
  {
    "text": "to avoid all the boiler plate code that you need to write some teams create their own helpers but",
    "start": "2542960",
    "end": "2548520"
  },
  {
    "text": "you can also use something that's already out there and it",
    "start": "2548520",
    "end": "2553160"
  },
  {
    "text": "works and another huge benefit of uh of",
    "start": "2555760",
    "end": "2561359"
  },
  {
    "text": "NG mock is if you want to mock HTTP has anyone mocked HTTP before with dollar HTTP back",
    "start": "2561359",
    "end": "2567960"
  },
  {
    "text": "end have you suffered yes so look at the nice syntax so uh once again I'm",
    "start": "2567960",
    "end": "2575599"
  },
  {
    "text": "injecting this element and I mean I'm selecting this element I want to test this side menu element and I can also",
    "start": "2575599",
    "end": "2582119"
  },
  {
    "text": "easily inject dollar HTTP and then you specify that for HTTP and for get",
    "start": "2582119",
    "end": "2588520"
  },
  {
    "text": "requests if I get this URL API Pages it should return this that's basically it",
    "start": "2588520",
    "end": "2594839"
  },
  {
    "text": "and now you can carry on and write your test without worrying about all the messy stuff behind the",
    "start": "2594839",
    "end": "2600838"
  },
  {
    "text": "scenes so that's basically it for angle one and now I'm really excited to tell",
    "start": "2603200",
    "end": "2608359"
  },
  {
    "text": "you how angular 2 has been already thinking about most of the problems and their new approach to solve to solve all",
    "start": "2608359",
    "end": "2615559"
  },
  {
    "text": "of these issues so we will start with the same structure you already know that angular",
    "start": "2615559",
    "end": "2621079"
  },
  {
    "text": "2 comes with types script and the next step would be setting up the project and",
    "start": "2621079",
    "end": "2626559"
  },
  {
    "text": "to set up the project you've got angular CLI which is the official tool to bootstrap angular to start angular apps",
    "start": "2626559",
    "end": "2634640"
  },
  {
    "text": "so npm install engine new and then you're up",
    "start": "2634640",
    "end": "2640440"
  },
  {
    "text": "and then basically you have all the development life cycle that you would need so if you want to create a",
    "start": "2640440",
    "end": "2646280"
  },
  {
    "text": "component like you you've got some uh sub generators to create a component so it will generate the boilerplate code",
    "start": "2646280",
    "end": "2653160"
  },
  {
    "text": "you need for components if you want to run a test server you've got that working if you want to run an optimized",
    "start": "2653160",
    "end": "2659480"
  },
  {
    "text": "version and deploy it it's it's also built in so we've got everything you need inside angular",
    "start": "2659480",
    "end": "2665000"
  },
  {
    "text": "CLI and then for component based architecture as I told you did it didn't",
    "start": "2665000",
    "end": "2673240"
  },
  {
    "start": "2668000",
    "end": "2668000"
  },
  {
    "text": "change a lot except for the syntax because we now have typescript it's mainly it's kind of still the same but",
    "start": "2673240",
    "end": "2679800"
  },
  {
    "text": "we get more formalized input properties and output events and",
    "start": "2679800",
    "end": "2685480"
  },
  {
    "text": "if I want to map this to angular one the input properties would be the you we used to use the equal sign for two a",
    "start": "2685480",
    "end": "2691440"
  },
  {
    "text": "data binding which is not correct which is uh the same as the less than one way data binding then the output events",
    "start": "2691440",
    "end": "2698720"
  },
  {
    "text": "would be similar to using the uh ment and then the function and at input and at output are",
    "start": "2698720",
    "end": "2706079"
  },
  {
    "text": "the decorators that you that you use to inform angular that this is an input property and this is an output",
    "start": "2706079",
    "end": "2713520"
  },
  {
    "text": "event and then do you remember the mess for the styles using all of these naming",
    "start": "2716440",
    "end": "2722760"
  },
  {
    "text": "conventions so there's something called Shadow Dom which you can think of it as uh this section of the Dom will be kind",
    "start": "2722760",
    "end": "2729839"
  },
  {
    "text": "of completely independent from the rest so angular 2 allows us to use this functionality as of today so it means",
    "start": "2729839",
    "end": "2737760"
  },
  {
    "text": "that every component in angular will be isolated from the rest so I can use a do",
    "start": "2737760",
    "end": "2743480"
  },
  {
    "text": "active class and not worry about having a different component or a different developer using it somewhere else and",
    "start": "2743480",
    "end": "2751240"
  },
  {
    "text": "this is something that works natively in the browser in new browsers in Chrome but because we need our app to work",
    "start": "2751240",
    "end": "2757800"
  },
  {
    "text": "everywhere what angular does is they have an emulated mode so emulated it means they take this class and then they",
    "start": "2757800",
    "end": "2764359"
  },
  {
    "text": "add some attributes to make it only match this your component so you can",
    "start": "2764359",
    "end": "2769599"
  },
  {
    "text": "actually decide if you want to have the emulated mode or if you want to have uh the native mode or you can even disable",
    "start": "2769599",
    "end": "2775760"
  },
  {
    "text": "it so this is a really nice feature you can just go back to use those image",
    "start": "2775760",
    "end": "2781440"
  },
  {
    "text": "selector H2 selectors if you're building small components without worrying about the Cascade stuff of",
    "start": "2781440",
    "end": "2788440"
  },
  {
    "start": "2793000",
    "end": "2793000"
  },
  {
    "text": "CSS then for lazy loading uh it's a good thing that angular 2 comes by default",
    "start": "2793280",
    "end": "2799440"
  },
  {
    "text": "with uh lazy loading uh as you already said the router has been deprecated but I think",
    "start": "2799440",
    "end": "2805880"
  },
  {
    "text": "the new router also supports lazy loading and uh so it means you can just",
    "start": "2805880",
    "end": "2811160"
  },
  {
    "text": "load the components that you need and because of the new way the new uh",
    "start": "2811160",
    "end": "2816200"
  },
  {
    "text": "dependency injection how it works uh it will resolve only the components that are required for this route and they",
    "start": "2816200",
    "end": "2822200"
  },
  {
    "text": "will be uh loaded so this is less JavaScript footprint you download less",
    "start": "2822200",
    "end": "2827599"
  },
  {
    "text": "stuff and uh less execution for JavaScript less time uh waiting for",
    "start": "2827599",
    "end": "2833319"
  },
  {
    "text": "JavaScript execution another feature uh of angular",
    "start": "2833319",
    "end": "2840280"
  },
  {
    "start": "2839000",
    "end": "2839000"
  },
  {
    "text": "2 is web worker support so all of these features are mainly targeting performance at least the web work",
    "start": "2840280",
    "end": "2846359"
  },
  {
    "text": "and the web worker is different from a service worker but it allows you to run computations in the background of your",
    "start": "2846359",
    "end": "2852240"
  },
  {
    "text": "page on a different thread so without blocking the main thread because you know all your JavaScript code is running",
    "start": "2852240",
    "end": "2858119"
  },
  {
    "text": "on the main thread and if you do something that takes a bit of time your REI will start having degraded",
    "start": "2858119",
    "end": "2864640"
  },
  {
    "text": "performance so this has been in browsers for a few years I think but no one has",
    "start": "2864640",
    "end": "2869760"
  },
  {
    "text": "been using it because it's a bit complicated in order to implement threat safety you had to you don't have access",
    "start": "2869760",
    "end": "2876160"
  },
  {
    "text": "to the Dom inside the web worker so no one was really using it but what what angular 2 uh gives us is they have",
    "start": "2876160",
    "end": "2883839"
  },
  {
    "text": "optional support for web workers and if you stay within the boundaries they Define you can make your code and",
    "start": "2883839",
    "end": "2889280"
  },
  {
    "text": "angular's code run in the web worker which also means you get more performance benefits because you're",
    "start": "2889280",
    "end": "2895520"
  },
  {
    "text": "running uh in a separate thread without blocking the",
    "start": "2895520",
    "end": "2900319"
  },
  {
    "text": "UI then this is something really exciting static temp template comp",
    "start": "2901480",
    "end": "2907359"
  },
  {
    "start": "2902000",
    "end": "2902000"
  },
  {
    "text": "compilation so everything that angular needs to do to prepare your templates",
    "start": "2907359",
    "end": "2913400"
  },
  {
    "text": "instead of doing it in the browser it can now be done on your machine and then",
    "start": "2913400",
    "end": "2919359"
  },
  {
    "text": "you deploy uh optimized code so it means that angular can compile all the",
    "start": "2919359",
    "end": "2924760"
  },
  {
    "text": "templates at build time which basically means angular is removing all the overhead of the framework and now you're",
    "start": "2924760",
    "end": "2930520"
  },
  {
    "text": "delivering optimized templates to the view so that's how they were able to uh make make templates render five times",
    "start": "2930520",
    "end": "2937640"
  },
  {
    "text": "faster than angular one whether it was the first view or repeat view so we now have much faster template rendering on",
    "start": "2937640",
    "end": "2944839"
  },
  {
    "text": "the client so you can think of it as for example when you write this uh curly",
    "start": "2944839",
    "end": "2950880"
  },
  {
    "text": "braces if they need to be transpiled into something else for angular to understand angular will already do this",
    "start": "2950880",
    "end": "2956839"
  },
  {
    "text": "in your build tools so when you write your code it will generate the optimized version which will be then served to the",
    "start": "2956839",
    "end": "2964520"
  },
  {
    "text": "browser then tree shaking so the technique of tree shaking has been for a lot of time",
    "start": "2964520",
    "end": "2970839"
  },
  {
    "start": "2966000",
    "end": "2966000"
  },
  {
    "text": "a lot of time now but I'm really excited to tell you that there is support for tree shaking in angular 2 you can think",
    "start": "2970839",
    "end": "2977640"
  },
  {
    "text": "of it as pay for uh only pay for what you use so if you're only using a couple",
    "start": "2977640",
    "end": "2982880"
  },
  {
    "text": "of things in angular 2 uh you you have the possibility to generate a version of",
    "start": "2982880",
    "end": "2987920"
  },
  {
    "text": "angular 2 that only has the things that you need so instead of serving the whole",
    "start": "2987920",
    "end": "2993319"
  },
  {
    "text": "angular framework you only serve the parts of it that you need and this is something that can be done",
    "start": "2993319",
    "end": "2998480"
  },
  {
    "text": "automatically and uh this is another benefit of typescript because of uh because of the typescript ecosystem and",
    "start": "2998480",
    "end": "3005640"
  },
  {
    "text": "that angular is written in typescript they can know exactly what functions you require and what functions you don't",
    "start": "3005640",
    "end": "3013240"
  },
  {
    "text": "require another interesting thing we have is server side rendering so uh by",
    "start": "3013240",
    "end": "3019280"
  },
  {
    "start": "3014000",
    "end": "3014000"
  },
  {
    "text": "project called angular universal server side rendering is when you render it the component on your server on the server",
    "start": "3019280",
    "end": "3026000"
  },
  {
    "text": "side and then return it to the front end so this will give you a better perceived",
    "start": "3026000",
    "end": "3032200"
  },
  {
    "text": "performance because instead of waiting for the whole page to load and for angular to boost DRP in order for it to",
    "start": "3032200",
    "end": "3038119"
  },
  {
    "text": "render the component you will serve a component that is already pre-rendered and then uh later on when",
    "start": "3038119",
    "end": "3046040"
  },
  {
    "text": "angular loads you can do everything that you used to do now this is the main benefit but you",
    "start": "3046040",
    "end": "3052160"
  },
  {
    "text": "can finally get SEO optimization now we know that Google as a search engine can",
    "start": "3052160",
    "end": "3058440"
  },
  {
    "text": "um can crawl angular apps but what about the other search engines so now because",
    "start": "3058440",
    "end": "3063480"
  },
  {
    "text": "we're serving something that is already rendered we don't have the SEO Pro SEO",
    "start": "3063480",
    "end": "3069000"
  },
  {
    "text": "problem anymore and same thing for the site preview so remember when you used to share an angular website on Facebook",
    "start": "3069000",
    "end": "3075599"
  },
  {
    "text": "and you get those curly braces or NG cloak or",
    "start": "3075599",
    "end": "3080720"
  },
  {
    "text": "whatever so those are some of the angular 2 features there is there's always uh performance features I mean",
    "start": "3080720",
    "end": "3087000"
  },
  {
    "text": "there's also one that's uh I didn't mention here I can tell you about it which is uh the change detector for",
    "start": "3087000",
    "end": "3093680"
  },
  {
    "text": "angular 2 always runs a VM friendly a uh an optimized version of JavaScript so",
    "start": "3093680",
    "end": "3100920"
  },
  {
    "text": "the way they used to do it is they used to have one change detector for all your angular app and this is going to use",
    "start": "3100920",
    "end": "3107040"
  },
  {
    "text": "polymorphism in JavaScript and at the VM level for V8 and all of those uh",
    "start": "3107040",
    "end": "3112680"
  },
  {
    "text": "softwares running JavaScript with a jit controller with the sorry jit uh just in",
    "start": "3112680",
    "end": "3118160"
  },
  {
    "text": "time compiler it will be slow because when a function gets repeated a lot which is what we call when a function is",
    "start": "3118160",
    "end": "3124240"
  },
  {
    "text": "hot the just in time uh interpreter will not be able to optimize it because every",
    "start": "3124240",
    "end": "3130200"
  },
  {
    "text": "time you're giving it different inputs but now what they're doing with angular 2 is that they create a change detector",
    "start": "3130200",
    "end": "3136200"
  },
  {
    "text": "for every component which means when this change detector gets hot on every",
    "start": "3136200",
    "end": "3142040"
  },
  {
    "text": "digest cycle uh it will be already optimized by by the virtual machine which is another performance benefit so",
    "start": "3142040",
    "end": "3149640"
  },
  {
    "start": "3149000",
    "end": "3149000"
  },
  {
    "text": "once again uh as a close closing thought it's the same thing uh scaling requires",
    "start": "3149640",
    "end": "3155640"
  },
  {
    "start": "3153000",
    "end": "3153000"
  },
  {
    "text": "a solid code base so it's about using all of these best practices uh thinking ahead of time and uh again angular 2",
    "start": "3155640",
    "end": "3164200"
  },
  {
    "text": "makes things a lot more easier I hope you enjoyed this talk you can find it online on this URL and I'd be happy to",
    "start": "3164200",
    "end": "3170599"
  },
  {
    "text": "answer your questions thanks for your time",
    "start": "3170599",
    "end": "3176420"
  },
  {
    "text": "[Applause]",
    "start": "3176420",
    "end": "3180199"
  },
  {
    "text": "yes guys can you please go that way and vote it's not working because it's not working on that side and if you've got",
    "start": "3182680",
    "end": "3189240"
  },
  {
    "text": "any questions we've got five more minutes or you can catch me around",
    "start": "3189240",
    "end": "3194079"
  },
  {
    "text": "today",
    "start": "3201640",
    "end": "3204640"
  }
]