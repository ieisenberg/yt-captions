[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "you guys see me alright everything's good cool well happy end of the conference thank you for joining me in",
    "start": "30",
    "end": "6420"
  },
  {
    "text": "the last session and hope you guys ready to do some some Kotlin work for all you see sharp devs and enjoy my corny just",
    "start": "6420",
    "end": "14990"
  },
  {
    "text": "half-hearted Photoshop of super smash bros melee versus sign really though we're not gonna be doing like a column",
    "start": "14990",
    "end": "21689"
  },
  {
    "text": "verse C sharp we're gonna just be sort of comparing the languages and allowing you to basically take your tools from C",
    "start": "21689",
    "end": "27779"
  },
  {
    "text": "sharp and your knowledge of C sharp and in writing applications in that style and apply it to Colin so real quick for",
    "start": "27779",
    "end": "34920"
  },
  {
    "start": "34000",
    "end": "34000"
  },
  {
    "text": "those who don't know me I'm Alex done you'll find me online as suave pirate that's because my name is super super",
    "start": "34920",
    "end": "41280"
  },
  {
    "text": "basic when I was trying to basically start actually building my online personality I was like oh let's see what",
    "start": "41280",
    "end": "47520"
  },
  {
    "text": "kind of Alex Dunn's there are turns out there's three Alex Dunn developers at Microsoft so I didn't really have a good",
    "start": "47520",
    "end": "52920"
  },
  {
    "text": "place to sit so I wrote a little name generator' took a bunch of stuff from the dictionary just adjectives and and",
    "start": "52920",
    "end": "59449"
  },
  {
    "text": "noun and Here I am a suave pirate and I couldn't even get the the full Twitter",
    "start": "59449",
    "end": "65280"
  },
  {
    "text": "handle so my blog is Alex dun org or suave pirate calm this whole series is",
    "start": "65280",
    "end": "71610"
  },
  {
    "text": "is also a blog series on Alex Nunn org and it's also shown in a bit of content",
    "start": "71610",
    "end": "78810"
  },
  {
    "text": "in Pluralsight so I'm sorry I'm a Microsoft MEP in the.net space and Azure space and also a Pluralsight author",
    "start": "78810",
    "end": "85500"
  },
  {
    "text": "where my course is focused in Kotlin and specifically Kotlin and android so I have getting started courses if you do",
    "start": "85500",
    "end": "91890"
  },
  {
    "text": "like the plural site scale IQ exams for Android or for Kotlin that's a lot of my questions and I'm sorry if they're hard",
    "start": "91890",
    "end": "97890"
  },
  {
    "text": "or super easy but you can kind of see like that that's sort of weird balance and turmoil I have internally has led to",
    "start": "97890",
    "end": "104220"
  },
  {
    "text": "a super interesting talk like this I don't know if I can follow up very well from the last talk which is like",
    "start": "104220",
    "end": "109740"
  },
  {
    "text": "building tanks and unity and blowing  up but we can compare languages and I'll be pretty cool so to preface like I said I don't want",
    "start": "109740",
    "end": "116820"
  },
  {
    "start": "115000",
    "end": "115000"
  },
  {
    "text": "this to be a let's ditch c-sharp and go to Colin Cowan so sick and I also don't want it to be like ha look I showed you",
    "start": "116820",
    "end": "123540"
  },
  {
    "text": "guys Colin and this thing actually sucks we should stay with c-sharp and said I think both really have a place and I",
    "start": "123540",
    "end": "128879"
  },
  {
    "text": "think that they're they come across is so similar that it makes sense to take your knowledge from either and apply it towards developing",
    "start": "128879",
    "end": "135330"
  },
  {
    "text": "something in the other if you have that need and we'll get into basically some code comparing contrasting looking into",
    "start": "135330",
    "end": "141420"
  },
  {
    "text": "syntax for Kotlin versus c-sharp for some of the basics and then get a little more complicated and then also talk",
    "start": "141420",
    "end": "146760"
  },
  {
    "text": "about like there's use cases in terms of like what platforms they best fit and when you should use each one and lastly",
    "start": "146760",
    "end": "153390"
  },
  {
    "text": "we're specifically talking about Kotlin 1.3 I just updated this talk to do 1.3 and also some c-sharp 8 both of those",
    "start": "153390",
    "end": "161010"
  },
  {
    "text": "releases between c-sharp 8 and Collin 1.3 were like massive releases so column 1.3 we get things like better",
    "start": "161010",
    "end": "167730"
  },
  {
    "text": "asynchronous programming with co-routines and c-sharp a diffuse on e of like Mads talked CERN or John ski talking about",
    "start": "167730",
    "end": "174600"
  },
  {
    "text": "some of the new features it's ridiculous like Nobel reference types default interface implementations asynchronous",
    "start": "174600",
    "end": "180900"
  },
  {
    "text": "streams and we'll talk about all of those and also compare those new features and how even still there",
    "start": "180900",
    "end": "186660"
  },
  {
    "text": "they're continuing to sort of lift each other in terms of like features that the language can complete so I'll just do a",
    "start": "186660",
    "end": "193019"
  },
  {
    "text": "quick overview of Collin how many you guys actually know what Collin is and you walked in here knowing you're gonna learn a new programming language and not",
    "start": "193019",
    "end": "198780"
  },
  {
    "text": "like a framework alright how many you guys had no idea what Collin is and you're like oh another thing for c-sharp",
    "start": "198780",
    "end": "204360"
  },
  {
    "text": "developers and yeah sorry we're going to talk about an entirely new programming language that has nothing to do with",
    "start": "204360",
    "end": "209760"
  },
  {
    "text": "c-sharp other than that they're really similar so the brief overview of Collin it's an open source statically typed",
    "start": "209760",
    "end": "216570"
  },
  {
    "text": "language and it's written by JetBrains one of the the gracious sponsors of this conference its supports mostly in a sort",
    "start": "216570",
    "end": "223350"
  },
  {
    "text": "of targeted towards mostly an object-oriented style programming but there is a lot of support for functional programming in Kotlin we'll talk a",
    "start": "223350",
    "end": "229799"
  },
  {
    "text": "little bit about that but not that much since again this is like a c-sharp for Kotlin it runs on the Java Virtual",
    "start": "229799",
    "end": "236430"
  },
  {
    "text": "Machine that's not just like I can execute like a Kotlin like decks or",
    "start": "236430",
    "end": "242370"
  },
  {
    "text": "custom decks or something it's a hundred percent interoperable with Java which means you can write things in a modern",
    "start": "242370",
    "end": "248190"
  },
  {
    "text": "language throw Java behind where it belongs and actually use usable code but",
    "start": "248190",
    "end": "253799"
  },
  {
    "text": "still like retrofitted in the Java and then the other way around take existing Java libraries use them in your",
    "start": "253799",
    "end": "258810"
  },
  {
    "text": "Coughlin's code the way you'd sort of expect and I think this last line is the most surprising race we talked about it",
    "start": "258810",
    "end": "263880"
  },
  {
    "text": "runs on the JVM you can actually compiling to JavaScript and that's like officially supported compiler we won't",
    "start": "263880",
    "end": "270509"
  },
  {
    "text": "get into too much depth about how that works I have it like a totally different talking series on that but basically you",
    "start": "270509",
    "end": "275970"
  },
  {
    "text": "can take like typescript types run it through a tool that they have and generate Kotlin types and then compile",
    "start": "275970",
    "end": "281550"
  },
  {
    "text": "your own Kotlin into JavaScript and then just load it all up as one like minified file so it's pretty cool the primary",
    "start": "281550",
    "end": "288780"
  },
  {
    "text": "goals of Colin as a language I think are really important because you'll notice as we go through the code that every",
    "start": "288780",
    "end": "294720"
  },
  {
    "start": "289000",
    "end": "289000"
  },
  {
    "text": "single bit of code we we look at keeps all of these things in mind so number one is reduced verbosity coming from",
    "start": "294720",
    "end": "300810"
  },
  {
    "text": "like the Java world which is you know Kotlin sort of routes Java is super verbose I hate Java personally like it",
    "start": "300810",
    "end": "308220"
  },
  {
    "text": "sort of stemmed into c-sharp development sort of code style that was very intentional from like C sharps like J",
    "start": "308220",
    "end": "314550"
  },
  {
    "text": "plus plus and now we actually have a real programming language but also to support many different styles of",
    "start": "314550",
    "end": "320699"
  },
  {
    "text": "programming so like I said there's object-oriented there's everything every tool you need for that will dig into",
    "start": "320699",
    "end": "325919"
  },
  {
    "text": "that but also functional you can write things procedural you can script with it in sort of everything in between and",
    "start": "325919",
    "end": "332159"
  },
  {
    "text": "then from the beginning having backwards compatibility it's super important for being able to execute Colin in older",
    "start": "332159",
    "end": "339360"
  },
  {
    "text": "Java code so even though we're sort of introducing like modern language features we still need to be able to",
    "start": "339360",
    "end": "345900"
  },
  {
    "text": "find some way to make that usable in our ugly Java and then of course a faster development cycle like I said this comes",
    "start": "345900",
    "end": "351419"
  },
  {
    "text": "from JetBrains and their entire team everything they do is about making our lives easier with building code faster",
    "start": "351419",
    "end": "357090"
  },
  {
    "text": "and building our applications faster so you'll see that in sort of like the ability to do like multi-platform",
    "start": "357090",
    "end": "362669"
  },
  {
    "text": "deployments with Colin just how easy it is to quickly spin up Colin and just how integrated it is into the different IDs",
    "start": "362669",
    "end": "369500"
  },
  {
    "text": "so in psychology there's a sort of concept called speech convergence and it's essentially when someone is thrown",
    "start": "369500",
    "end": "376590"
  },
  {
    "text": "into a room with a bunch of people who either speak a different language or speak with an accent they start to sort of fall into that bucket as well I",
    "start": "376590",
    "end": "383460"
  },
  {
    "text": "personally have it so badly where like if any of you come and talk to me afterwards I'm like fighting internally",
    "start": "383460",
    "end": "389610"
  },
  {
    "text": "not to like speak with a bad British accent and it will slip sometimes and so I apologize I'm not mocking you it's my",
    "start": "389610",
    "end": "396300"
  },
  {
    "text": "brain is just wired in in the worst way but this this concept also comes through a lot with new programming languages you can",
    "start": "396300",
    "end": "403120"
  },
  {
    "text": "tell what's inspiring a language based on its structure its platforms in its use cases and Kotlin themselves",
    "start": "403120",
    "end": "409629"
  },
  {
    "text": "explicitly say on their website that it's inspired by existing languages like Java obviously if they just want to get rid of Java good call",
    "start": "409629",
    "end": "416110"
  },
  {
    "text": "c-sharp which is why I get to talk like this JavaScript because it can run in JavaScript and in Scala and groovy",
    "start": "416110",
    "end": "421720"
  },
  {
    "text": "there's sort of more functional and procedural languages so any questions about like Kotlin at all what I'm going",
    "start": "421720",
    "end": "429009"
  },
  {
    "text": "to do next is get into like some of the very basics side by sides between like a c-sharp example and a Kotlin example and",
    "start": "429009",
    "end": "437169"
  },
  {
    "text": "this I'm gonna break this down so you guys can just ask questions the whole way like feel free to interrupt me cool",
    "start": "437169",
    "end": "443889"
  },
  {
    "text": "so let's let's start with a poco you know plain old CLR object POJO if you're in Java and what I've seen toss around",
    "start": "443889",
    "end": "451030"
  },
  {
    "text": "sometimes with a poco with a k4 Kotlin so I'm very much into dogs and especially rescuing dogs so all my",
    "start": "451030",
    "end": "457780"
  },
  {
    "text": "examples are going to be related to that so just don't be surprised with how many times you see dog or a service that",
    "start": "457780",
    "end": "463030"
  },
  {
    "text": "relates to a dog or something like that so here we have a c-sharp 7 version of a",
    "start": "463030",
    "end": "468610"
  },
  {
    "text": "poco for dog has a name an age just an integer and a breed it's as simple as we",
    "start": "468610",
    "end": "474490"
  },
  {
    "text": "can get it right so in the cotton world we have the exact same sort of structure",
    "start": "474490",
    "end": "479560"
  },
  {
    "text": "and I'm going to start by pointing out some of the differences here right so you'll notice right away everything is explicitly nullable or not knowable",
    "start": "479560",
    "end": "486159"
  },
  {
    "text": "reference types value types or whatever that is super similar to the the c-sharp 8 version of knowable reference types",
    "start": "486159",
    "end": "492909"
  },
  {
    "text": "with that optional field you can turn on now and we'll talk more about that in a bit but you also notice that we have to",
    "start": "492909",
    "end": "499029"
  },
  {
    "text": "explicitly set a value for these properties whereas in c-sharp we get that sort of default concept and we can even call",
    "start": "499029",
    "end": "505419"
  },
  {
    "text": "default in terms of assigning of value so for string name and the c-sharp side",
    "start": "505419",
    "end": "510819"
  },
  {
    "text": "that's just going to be null by default it will be 0 breed will be null as well but in the Colin side all three of these",
    "start": "510819",
    "end": "517240"
  },
  {
    "text": "are knowable we have to explicitly set it to null or to a value and then we can",
    "start": "517240",
    "end": "522640"
  },
  {
    "start": "521000",
    "end": "521000"
  },
  {
    "text": "take a look at some constructor override so in a basic boko we don't have to define our default constructor right it",
    "start": "522640",
    "end": "528220"
  },
  {
    "text": "sits there we have our empty parameters constructor but if we want to add one that adds the ability to set the name",
    "start": "528220",
    "end": "533529"
  },
  {
    "text": "age and breed directly from the constructor we have to now add the default and then add any overrides same thing in Kotlin except",
    "start": "533529",
    "end": "540820"
  },
  {
    "text": "you'll notice the syntax is a bit different and one thing you might have noticed right away is that up here in the signature is where we actually",
    "start": "540820",
    "end": "546850"
  },
  {
    "text": "define our default constructor so the sort of thing in that that my instead of reducing verbosity let's just throw it",
    "start": "546850",
    "end": "553360"
  },
  {
    "text": "up there so then we override constructors with just adding that sort of constructor keyword whatever parameters and then whatever logic we",
    "start": "553360",
    "end": "559480"
  },
  {
    "text": "need to do collin also introduced this concept of a data class it's kind of",
    "start": "559480",
    "end": "566440"
  },
  {
    "text": "similar to using a struct instead of a class in c-sharp it actually does a bit more so this one-liner at the top is",
    "start": "566440",
    "end": "573160"
  },
  {
    "text": "actually the entire class definition with a constructor that takes in those values but instead of saying like if I",
    "start": "573160",
    "end": "578740"
  },
  {
    "text": "go back to the previous slide just named as the string ages and int or whatever we actually say Val name is a string Val",
    "start": "578740",
    "end": "585220"
  },
  {
    "text": "ages and an invalid is a string and that actually gives us those public accessible properties with those names",
    "start": "585220",
    "end": "590740"
  },
  {
    "text": "as well as the constructor to set them it's one line no braces you can do that with any other class but I specifically",
    "start": "590740",
    "end": "597340"
  },
  {
    "text": "want to talk about the data class because you can instantiate it like this you get default copies for helping with",
    "start": "597340",
    "end": "602740"
  },
  {
    "text": "immutability you get the equality comparisons you get like hash code sets and stuff like that too I'll just built",
    "start": "602740",
    "end": "608770"
  },
  {
    "text": "in by just you know slapping a data on it there's also this concept of vowel",
    "start": "608770",
    "end": "614290"
  },
  {
    "start": "613000",
    "end": "613000"
  },
  {
    "text": "and var in in terms of relating that you can think of var as a variable and Val",
    "start": "614290",
    "end": "619900"
  },
  {
    "text": "is a value so a variable can change its value a value can not it's set once and",
    "start": "619900",
    "end": "625000"
  },
  {
    "text": "that's it if you relate that to c-sharp that beam like a constant in a property or a",
    "start": "625000",
    "end": "630220"
  },
  {
    "text": "read-only because you can set them in the constructor and you're good to go the difference though is actually in this this function here where Vallon var",
    "start": "630220",
    "end": "636850"
  },
  {
    "text": "is actually true for any statement of a value or a variable regardless of scope so here we're not defining properties of",
    "start": "636850",
    "end": "643240"
  },
  {
    "text": "the function bark we're just saying like a local variable and we cannot set the new value of sound because it's a value",
    "start": "643240",
    "end": "651990"
  },
  {
    "text": "we also have that same sort of concept of getters and setters if you've ever come from the Java world this isn't a",
    "start": "651990",
    "end": "657580"
  },
  {
    "start": "652000",
    "end": "652000"
  },
  {
    "text": "thing you have to explicitly have like a get property name and a set property name and that's sort of how you handle encapsulation again the idea of saying",
    "start": "657580",
    "end": "665230"
  },
  {
    "text": "throw away all this extra methods and functions we have - right let's just use our getters and setters c-sharp has done this you know",
    "start": "665230",
    "end": "671890"
  },
  {
    "text": "from years ago but we have the ability to call a single get on the sage and it",
    "start": "671890",
    "end": "676900"
  },
  {
    "text": "does a calculation and you can just call dot age in column we have almost the exact same thing we can define get as a",
    "start": "676900",
    "end": "683590"
  },
  {
    "text": "function and it returns a whole bunch of calculations except we have to do more because we're using Java State and it's",
    "start": "683590",
    "end": "688660"
  },
  {
    "text": "garbage compared to c-sharp date time but everything else is sort of the same you have the same sort of like initial",
    "start": "688660",
    "end": "694150"
  },
  {
    "text": "sets on the right and all that and if you're doing a a set method same thing to show the next line set whatever you",
    "start": "694150",
    "end": "700630"
  },
  {
    "text": "need to do when defining methods and functions in c-sharp we have the ability",
    "start": "700630",
    "end": "706900"
  },
  {
    "start": "702000",
    "end": "702000"
  },
  {
    "text": "to have a void method it doesn't return anything just execute some code and we can also have return types for methods",
    "start": "706900",
    "end": "712240"
  },
  {
    "text": "right in Kotlin it's the exact same concept everything's just prefixed with function that's how we're telling it",
    "start": "712240",
    "end": "718090"
  },
  {
    "text": "that this is a function or a method and then the return type just like everything else was over here on the right side after that it's you know it's",
    "start": "718090",
    "end": "725590"
  },
  {
    "text": "just like executing any other method we can just call dog adoption service that adopt one thing you'll also notice is",
    "start": "725590",
    "end": "731260"
  },
  {
    "text": "that we don't have to use the new keyword if we take the class name and we throw the parentheses around it that's over instantiating it just taking little",
    "start": "731260",
    "end": "738010"
  },
  {
    "text": "shortcuts to to cut up some of the extra characters we get a type my favorite",
    "start": "738010",
    "end": "743800"
  },
  {
    "start": "742000",
    "end": "742000"
  },
  {
    "text": "thing in c-sharp that I abuse the hell out of especially when writing new c-sharp eight is null coalescing and",
    "start": "743800",
    "end": "748900"
  },
  {
    "text": "propagation so in this case we have both examples in one we have this breed class it has a knowable integer and then in",
    "start": "748900",
    "end": "756070"
  },
  {
    "text": "the dog class we have that breed which is a reference type so it's default nullable and then we also have the ability to get that with the color",
    "start": "756070",
    "end": "763750"
  },
  {
    "text": "propagation rather and the coalescing so propagation you see if I can get this to work there we go",
    "start": "763750",
    "end": "769320"
  },
  {
    "text": "propagation being that if breed is null this whole statement is evaluated to",
    "start": "769320",
    "end": "774820"
  },
  {
    "text": "null we're coalescing is saying if the left side is null then return the right side if not just return the actual value",
    "start": "774820",
    "end": "781090"
  },
  {
    "text": "of the left side and if we want to do that we're saying hey I actually know that this isn't going to be no L don't worry about it",
    "start": "781090",
    "end": "786490"
  },
  {
    "text": "we can just do it dangerously and in risk that no reference exception and then also called dot value on those knowable types that does change a bit",
    "start": "786490",
    "end": "792940"
  },
  {
    "text": "and c-sharp eight where start there on the bangs or exclamation points whatever you want to call it around Kotlin is has",
    "start": "792940",
    "end": "799240"
  },
  {
    "text": "both of those as well as just a slight syntax difference where we still get the propagation with the question mark in",
    "start": "799240",
    "end": "805040"
  },
  {
    "text": "the dot but with coalescing we get the question mark and the colon and then if",
    "start": "805040",
    "end": "810740"
  },
  {
    "text": "we're going to do something dangerously we have to explicitly put the double bang it's also just a good tell like I'm",
    "start": "810740",
    "end": "816200"
  },
  {
    "text": "probably messing something up here if I have to do this especially because everything's knowable or not knowable so",
    "start": "816200",
    "end": "821960"
  },
  {
    "text": "if I'm saying I guarantee you this knowable type is not null I better know what I'm doing and I can see that I can with tons of exclamation points",
    "start": "821960",
    "end": "829040"
  },
  {
    "text": "everywhere so questions on the basic syntax of that and then we'll take a",
    "start": "829040",
    "end": "834500"
  },
  {
    "text": "break from the sort of side by side code examples and we'll talk about the the platforms that both of these support",
    "start": "834500",
    "end": "840680"
  },
  {
    "text": "yeah I'll get into that I'm gonna talk a",
    "start": "840680",
    "end": "845780"
  },
  {
    "text": "little bit about the encapsulation but the default for Kotlin is actually public so if you want it to be",
    "start": "845780",
    "end": "851480"
  },
  {
    "text": "non-public then you got to throw a private or protected or internal on it yeah I know other questions yeah sorry",
    "start": "851480",
    "end": "863410"
  },
  {
    "text": "it does yeah so other than functions it's unlike like a JavaScript object",
    "start": "863410",
    "end": "869780"
  },
  {
    "text": "function it's those two are separate but you can still actually execute that so everything comes from object yeah and",
    "start": "869780",
    "end": "875240"
  },
  {
    "text": "you'll actually see a really cool indicator they have four that when we talk about statics anything else cool",
    "start": "875240",
    "end": "882470"
  },
  {
    "text": "all right let's talk about some platforms so these these are more or less my opinions we we as c-sharp",
    "start": "882470",
    "end": "889100"
  },
  {
    "start": "885000",
    "end": "885000"
  },
  {
    "text": "developers know that c-sharp can run just about everywhere but we sort of have like these buckets of what most",
    "start": "889100",
    "end": "894770"
  },
  {
    "text": "people are using C sharp for based off even just like Stack Overflow surveys so obviously asp.net ASP it on that core",
    "start": "894770",
    "end": "900530"
  },
  {
    "text": "we're writing web applications we're running things on is running things in containers we're using asp.net you also",
    "start": "900530",
    "end": "906740"
  },
  {
    "text": "have cloud apps and that's sort of just like a generalization of where we're running our c-sharp code so i could be",
    "start": "906740",
    "end": "912170"
  },
  {
    "text": "running like a function lambda in terms of laser functions a Tobias lambda or",
    "start": "912170",
    "end": "918680"
  },
  {
    "text": "just any sort of cloud execution or services you also have the entire Windows platform so think like think you",
    "start": "918680",
    "end": "924590"
  },
  {
    "text": "WP WPF WinForms and I I like to consider xamarin one of the newer primary",
    "start": "924590",
    "end": "929840"
  },
  {
    "text": "platforms I myself abused Dameron a lot sort of how I I came into the Microsoft every piece of",
    "start": "929840",
    "end": "935390"
  },
  {
    "text": "always through xamarin and so we can build cross-platform mobile apps on that platform to which which runs on mono",
    "start": "935390",
    "end": "941740"
  },
  {
    "text": "collins core has spring and k tour so this is think of this is their asp.net right spring is Java's MVC framework so",
    "start": "941740",
    "end": "950000"
  },
  {
    "start": "942000",
    "end": "942000"
  },
  {
    "text": "it allows us to write java code that runs in the JVM and can take in requests and do everything in between and the",
    "start": "950000",
    "end": "955310"
  },
  {
    "text": "continent seemed actually introduced in and runs this open-source project called K tour which I still don't know if I'm",
    "start": "955310",
    "end": "960890"
  },
  {
    "text": "saying right at first just supposed to be called Couture but I'm gonna keep going with K tour so it's mostly like a",
    "start": "960890",
    "end": "967360"
  },
  {
    "text": "even nicer version of spring MVC it runs more similarly to like in asp.net MVC or",
    "start": "967360",
    "end": "973790"
  },
  {
    "text": "node with Express where you're defining endpoints and routes and you're just running your code from there and you can handle all your abstraction layer and",
    "start": "973790",
    "end": "979520"
  },
  {
    "text": "all that you also have the same thing with cloud apps I think this is actually a more popular language to use for cloud",
    "start": "979520",
    "end": "987320"
  },
  {
    "text": "apps simply because of the JVM so obviously Amazon if you don't know does a lot in Java so a lot of things on",
    "start": "987320",
    "end": "994580"
  },
  {
    "text": "AWS start with their Java SDK first then their JavaScript SDK and then someone finally supports a c-sharp developers",
    "start": "994580",
    "end": "1001120"
  },
  {
    "text": "and then Android which I think it was about two years ago that Google officially announced Kotlin as a",
    "start": "1001120",
    "end": "1007330"
  },
  {
    "text": "supported language for Android development so outside of just saying like oh yeah you can write count line",
    "start": "1007330",
    "end": "1012460"
  },
  {
    "text": "and compile it with your java stuff and now you've got android they're tooling with Android studio is actually pretty",
    "start": "1012460",
    "end": "1018010"
  },
  {
    "text": "incredible so you can do things like take existing Java code like an entire file just like right click convert to",
    "start": "1018010",
    "end": "1023740"
  },
  {
    "text": "Kotlin and it's done so nice or the other side like taking an existing Java snippet copy and paste it into a column",
    "start": "1023740",
    "end": "1029890"
  },
  {
    "text": "file and it'll go hey I think that was Java you probably wanna switch this to Kotlin cuz you're a smart person do you want to",
    "start": "1029890",
    "end": "1035439"
  },
  {
    "text": "do that yes and it dumps it in for you automatically translated it's like really well done - it's not like translated as a bunch of build errors",
    "start": "1035440",
    "end": "1041949"
  },
  {
    "text": "because they're interoperable there's like oh yeah we know like static is companion and these objects go to this",
    "start": "1041949",
    "end": "1047079"
  },
  {
    "text": "and get rid of the get sets and stuff like that in terms of other platforms the c-sharp covers a whole lot right so",
    "start": "1047079",
    "end": "1054190"
  },
  {
    "text": "we have new IOT services even more coming out with things like metal labs new new microcontroller and stuff like",
    "start": "1054190",
    "end": "1062320"
  },
  {
    "text": "that we have unity which if you're in the room here before we got to saw a great demo of stuff blowing up in unity",
    "start": "1062320",
    "end": "1069340"
  },
  {
    "text": "we have mana which like I said is also the foundation of xamarin but is also used to run things on any sort of NYX kernel and then uno a newer",
    "start": "1069340",
    "end": "1076210"
  },
  {
    "text": "cross-platform mobile and then blazer which if you didn't have a chance to see those all the different blazer talks at",
    "start": "1076210",
    "end": "1081850"
  },
  {
    "text": "this conference I definitely recommend finding the videos later because blazer is pretty sick countless other platforms",
    "start": "1081850",
    "end": "1087850"
  },
  {
    "text": "include iOS actually and this is sort of like a secondary platform where people are like hey we can now compile the",
    "start": "1087850",
    "end": "1094090"
  },
  {
    "text": "native let's see if we can like translate things from iOS to Kotlin so like if you go to Collin conference",
    "start": "1094090",
    "end": "1100060"
  },
  {
    "text": "their iOS after an entirely uncommon which is pretty cool JavaScript like I said compiling down a JavaScript that's still in beta native",
    "start": "1100060",
    "end": "1106900"
  },
  {
    "text": "with LLVM that compiler to native is also in beta but they're working on releasing that in production and then",
    "start": "1106900",
    "end": "1113050"
  },
  {
    "text": "anything on the JVM which Java always boasts we have a hundred billion devices that run Java or three hundred billion",
    "start": "1113050",
    "end": "1119200"
  },
  {
    "text": "devices now whatever it is anywhere you're doing that you can also use Kotlin instead now like I said let's",
    "start": "1119200",
    "end": "1124780"
  },
  {
    "text": "just please get rid of get rid of Java",
    "start": "1124780",
    "end": "1129630"
  },
  {
    "text": "so I sort of have this Venn diagram where on the left was c-sharp we have",
    "start": "1129870",
    "end": "1135580"
  },
  {
    "text": "the Windows platform right that's what we can build for in a very native way that we can't really do with Collin and",
    "start": "1135580",
    "end": "1141340"
  },
  {
    "text": "then Kotlin everywhere that the JVM is running I don't think I'd ever dare trying to compile C sharp to to the JVM",
    "start": "1141340",
    "end": "1148330"
  },
  {
    "text": "but like literally everything else both of these platforms can or both these languages can support in one way or",
    "start": "1148330",
    "end": "1153370"
  },
  {
    "text": "another colin is still very immature it's only an aversion 11.3 so where C",
    "start": "1153370",
    "end": "1159190"
  },
  {
    "text": "sharp is moving into eight and it's been around for so many years Colin still sort of in infancy but I expect as this",
    "start": "1159190",
    "end": "1164950"
  },
  {
    "text": "community grows around just the love for the language itself we'll also see more the platform support as well any",
    "start": "1164950",
    "end": "1170530"
  },
  {
    "text": "questions about that before I get more Cody cool I should expected more",
    "start": "1170530",
    "end": "1177880"
  },
  {
    "text": "questions for that because people are like but what about this framework in this platform all right let's talk about",
    "start": "1177880",
    "end": "1186870"
  },
  {
    "text": "object-oriented programming so those you have written C sharp and I hope most of",
    "start": "1186870",
    "end": "1192250"
  },
  {
    "text": "you here are because that's kind of the talk object oriented programming is sort of the foundation of of our design",
    "start": "1192250",
    "end": "1198010"
  },
  {
    "text": "patterns and stuff C sharps introduce some features to make it a little easier to not do object programming which some people hate some",
    "start": "1198010",
    "end": "1205480"
  },
  {
    "text": "people don't but let's start with the foundation right we have a class that defines an object and we start with our",
    "start": "1205480",
    "end": "1211299"
  },
  {
    "text": "object and we need to make sure that Kotlin can help us fill out the other pillars of object-oriented programming",
    "start": "1211299",
    "end": "1216850"
  },
  {
    "text": "now whether you want to debate if it's this for abstraction encapsulation polymorphism or inheritance or if you",
    "start": "1216850",
    "end": "1223389"
  },
  {
    "text": "don't like the idea of inheritance being its own because polymorphism can arguably handle that or if you've got",
    "start": "1223389",
    "end": "1228549"
  },
  {
    "text": "like the full six I'm talking about these four and in my opinion the things that we need to have in order to support",
    "start": "1228549",
    "end": "1235389"
  },
  {
    "text": "these are encapsulation keywords public private protected all that inheritance is obvious to be able to inherit classes",
    "start": "1235389",
    "end": "1242039"
  },
  {
    "text": "abstraction and polymorphism can also be helped with the way that we can handle",
    "start": "1242039",
    "end": "1247119"
  },
  {
    "text": "multi-level inheritance or interfaces and abstract classes and sort of everything in between so let's start",
    "start": "1247119",
    "end": "1253299"
  },
  {
    "text": "with interfaces which is my favorite recently debated for some reason thing",
    "start": "1253299",
    "end": "1258999"
  },
  {
    "start": "1254000",
    "end": "1254000"
  },
  {
    "text": "in c-sharp where people are like yeah interfaces or abuse and di is too much I say no I love di so we have an AI",
    "start": "1258999",
    "end": "1266379"
  },
  {
    "text": "adoption service right and we have two methods to find there we have a void adopt dog and avoid adopt dogs that",
    "start": "1266379",
    "end": "1272169"
  },
  {
    "text": "takes in a list and we have our implementation of that which is dog adoption service which influenced I adoption service and does some super",
    "start": "1272169",
    "end": "1278980"
  },
  {
    "text": "basic stuff we can loop over and call the other adopt dog in Kotlin we do get",
    "start": "1278980",
    "end": "1287080"
  },
  {
    "text": "our default interface implementations so something that's new and c-sharp eight",
    "start": "1287080",
    "end": "1292629"
  },
  {
    "text": "is being able to do that but I'm also using the actual like Java naming convention so an interface is the dog",
    "start": "1292629",
    "end": "1298509"
  },
  {
    "text": "adoption service and the class is the dog adoption service implementation I hate this naming convention I like the I",
    "start": "1298509",
    "end": "1305049"
  },
  {
    "text": "better it's shorter it's it's easier to read where I'm like dog adoption service is that a class or the interface I have",
    "start": "1305049",
    "end": "1310240"
  },
  {
    "text": "no idea because if it's a class it doesn't implement an interface and it doesn't start with our end in freaking imple sorry anyway we have this adopt",
    "start": "1310240",
    "end": "1318279"
  },
  {
    "text": "dogs which goes around each of the dogs passing in and calls adopt dog and then here all we have to do is implement the one method encapsulation we talked about",
    "start": "1318279",
    "end": "1327249"
  },
  {
    "text": "this a little bit where everything is sort of default public in Colin where that's not true for c-sharp so we have",
    "start": "1327249",
    "end": "1333100"
  },
  {
    "text": "some common keywords like public for classes and then Fred members of that class we can also encapsulate it with certain keywords",
    "start": "1333100",
    "end": "1339460"
  },
  {
    "text": "like public protected private or default which is like basically private with like some other extra gunk and then",
    "start": "1339460",
    "end": "1345910"
  },
  {
    "text": "within that we can also nest classes right in Kotlin we have all of the same",
    "start": "1345910",
    "end": "1352330"
  },
  {
    "text": "ones but there's also a little bit more one thing you'll notice right away is they all assume we've got this open keyword in front of our class because",
    "start": "1352330",
    "end": "1359950"
  },
  {
    "text": "just like everything is default public it's also default final which if you're not familiar of from the Java world",
    "start": "1359950",
    "end": "1366520"
  },
  {
    "text": "that's essentially saying that it's default public sealed class in c-sharp so in order to say that something can",
    "start": "1366520",
    "end": "1372460"
  },
  {
    "text": "inherit from dog we throw the open keyword and then if you for whatever reason need to explicitly say that it's",
    "start": "1372460",
    "end": "1378880"
  },
  {
    "text": "not inheritable you can throw a final up there as well same thing with public is it is a keyword you can use but it's default so",
    "start": "1378880",
    "end": "1384880"
  },
  {
    "text": "no one really does that so you can keep everything on the left side like on the line so then we have our default public",
    "start": "1384880",
    "end": "1390610"
  },
  {
    "text": "and final variable that can change name our private variable of breed are protected which is similar to C sharps",
    "start": "1390610",
    "end": "1398260"
  },
  {
    "text": "protected but I believe it can actually be accessed within the entire same package which is essentially a folder",
    "start": "1398260",
    "end": "1404940"
  },
  {
    "text": "and then we have private for those sort of subclasses as well we have a whole",
    "start": "1404940",
    "end": "1411820"
  },
  {
    "text": "bunch of other key words we can use though c-sharp we can use sealed which is like I said is sort of similar to the",
    "start": "1411820",
    "end": "1416890"
  },
  {
    "text": "default for Kotlin we have virtual which explicitly says this can be overridden for a method or property we have",
    "start": "1416890",
    "end": "1424750"
  },
  {
    "text": "internal which means that only my final package only my final dll can access this nothing else and we have our",
    "start": "1424750",
    "end": "1430480"
  },
  {
    "text": "default and it called let me have final like I mentioned that's that's making sure that it's the same as sealed but",
    "start": "1430480",
    "end": "1435640"
  },
  {
    "text": "can also be applied to local variables so that's like Val is the same as a final whatever type in Java then we have",
    "start": "1435640",
    "end": "1443410"
  },
  {
    "text": "open means it can be inherited internal like I mentioned and then external which I personally haven't found a use case",
    "start": "1443410",
    "end": "1449380"
  },
  {
    "text": "for but it's basically like only people outside this can access it I don't know",
    "start": "1449380",
    "end": "1454420"
  },
  {
    "text": "why you'd really do that but you can all",
    "start": "1454420",
    "end": "1459790"
  },
  {
    "start": "1459000",
    "end": "1459000"
  },
  {
    "text": "right let's carry on so we have abstract classes this example isn't the greatest",
    "start": "1459790",
    "end": "1465520"
  },
  {
    "text": "because it's basically like an interface with the default implementation but an abstract class we can add the keyword",
    "start": "1465520",
    "end": "1472220"
  },
  {
    "text": "abstract and then within that abstract to any of our given members so that means that any implementer or inheritor",
    "start": "1472220",
    "end": "1479420"
  },
  {
    "text": "sorry of that abstract class needs to implement that abstract member right so that's like having an interface where we",
    "start": "1479420",
    "end": "1485990"
  },
  {
    "text": "have a default adopt dogs so the biggest difference is if you haven't used abstract classes is that you can also",
    "start": "1485990",
    "end": "1492140"
  },
  {
    "text": "use things like protected and stuff like that if it's abstract it doesn't have to default public so and you can also only",
    "start": "1492140",
    "end": "1498440"
  },
  {
    "text": "inherit one thing and that's also true for Kotlin where we have our abstract keyword that's so it's an abstract final",
    "start": "1498440",
    "end": "1505760"
  },
  {
    "text": "public class an abstract public function adopt pet and then the loop that sort of",
    "start": "1505760",
    "end": "1512840"
  },
  {
    "text": "runs over it which is then implemented to call the abstract method and our implement or sorry our inherit our child",
    "start": "1512840",
    "end": "1519470"
  },
  {
    "text": "class of adoption service being dog adoption service has to override that adopt pet now for the not-so",
    "start": "1519470",
    "end": "1530470"
  },
  {
    "start": "1527000",
    "end": "1527000"
  },
  {
    "text": "object-oriented things that people usually try to avoid side of it the concept of statics and stuff like that",
    "start": "1530470",
    "end": "1536570"
  },
  {
    "text": "right so to make something static and c-sharp we just throw static keywords in front of it and now it can be accessed",
    "start": "1536570",
    "end": "1541670"
  },
  {
    "text": "in a static way we can just say adoption helper dot a dot pet and we're good to go but in Kotlin they actually is a naming",
    "start": "1541670",
    "end": "1548510"
  },
  {
    "text": "convention that I didn't I didn't expect so there is no static keyword in Kotlin which really threw me off when I was",
    "start": "1548510",
    "end": "1555230"
  },
  {
    "text": "like first learning and I was like how do I make like an extension method and make it static and like that and you don't do that so it actually has the",
    "start": "1555230",
    "end": "1561740"
  },
  {
    "text": "concept of an object you think about it makes sense right a static class is an object that's initialized when the",
    "start": "1561740",
    "end": "1567140"
  },
  {
    "text": "program's run initially and so instead of saying a static class we just have an object and then we define whatever",
    "start": "1567140",
    "end": "1572180"
  },
  {
    "text": "members of that object we want and those are all brought up statically throughout the application so the same thing in",
    "start": "1572180",
    "end": "1578480"
  },
  {
    "text": "terms of how do we actually use this adoption helper it's still just adoption helper dot a dot pet so on top of static",
    "start": "1578480",
    "end": "1587750"
  },
  {
    "start": "1586000",
    "end": "1586000"
  },
  {
    "text": "objects we also have the the concept of static members normally this is like alright yeah I get it we throw static",
    "start": "1587750",
    "end": "1593120"
  },
  {
    "text": "around in c-sharp but I wanted to show this to show you this the the real difference in Kotlin so in this case we",
    "start": "1593120",
    "end": "1599120"
  },
  {
    "text": "have a public non-static class of adoption service and we have have the instance method of adopt and",
    "start": "1599120",
    "end": "1604920"
  },
  {
    "text": "also a static one that takes on that pet as well and the implements are the use of it or saturation of is we have to",
    "start": "1604920",
    "end": "1611700"
  },
  {
    "text": "instantiate adoption service first it's not for calling static right that makes sense so everyone knows how to do that in Kotlin like I said there is no static",
    "start": "1611700",
    "end": "1618660"
  },
  {
    "text": "keyword so we have our instance adopt we have our non object just an actual class of adoption service but then we have this",
    "start": "1618660",
    "end": "1625440"
  },
  {
    "text": "concept of a companion object so like I said things that are static are objects that are initialized and so when you",
    "start": "1625440",
    "end": "1631350"
  },
  {
    "text": "create a companion object what you're doing is saying take this object and everything that can just run by itself",
    "start": "1631350",
    "end": "1636450"
  },
  {
    "text": "and just marry that with the class that holds it so in the end you still end up executing it the same way where you can",
    "start": "1636450",
    "end": "1643080"
  },
  {
    "text": "say adoption service that's static adopt but the biggest difference is that when you actually try to execute this in",
    "start": "1643080",
    "end": "1648960"
  },
  {
    "text": "something like Java or in JavaScript you can't just say adoption service that static adopt and said you say adoption",
    "start": "1648960",
    "end": "1655170"
  },
  {
    "text": "service dot companion dot static adopt so it ends up adding an actual like static property or object within the",
    "start": "1655170",
    "end": "1662010"
  },
  {
    "text": "class itself so now that's kind of funky is anyone have any questions on that yeah if your class is static so if you",
    "start": "1662010",
    "end": "1676500"
  },
  {
    "text": "just had an object instead of a class I don't think objects get sub companion objects I think it's just classes",
    "start": "1676500",
    "end": "1682710"
  },
  {
    "text": "abstract classes and I don't think interface was do either so yeah any other questions on it cool so let's talk",
    "start": "1682710",
    "end": "1690750"
  },
  {
    "text": "about what I feel like most people end up using statics for nowadays and build extension methods",
    "start": "1690750",
    "end": "1696630"
  },
  {
    "text": "I see people abused this all the time I personally do it a lot because it's super cool to be able to just say like",
    "start": "1696630",
    "end": "1702000"
  },
  {
    "text": "hot dog dot add up now it looks like a you know I wrote good code because no one will see that I just wrote a shitty extension method I'm not knocking any",
    "start": "1702000",
    "end": "1710670"
  },
  {
    "text": "with using centrum I really do it all the time I think they're super cool but in this case we have to wrap in c-sharp",
    "start": "1710670",
    "end": "1716400"
  },
  {
    "text": "our extension methods in its own class usually named with it's our postfix with",
    "start": "1716400",
    "end": "1721830"
  },
  {
    "text": "extensions and then every method within that has to be static and if you add your parameter and you had to this",
    "start": "1721830",
    "end": "1727679"
  },
  {
    "text": "keyword to the first parameter now we know the subject of that extension right so now we know that an adoptable dog",
    "start": "1727679",
    "end": "1733200"
  },
  {
    "text": "should be able to call adopt and we can reference the dog anywhere in that method and call whatever we want on it",
    "start": "1733200",
    "end": "1739729"
  },
  {
    "text": "Kotlin simplifies this a lot this is another thing that cotton that I really do like a lot more than how it's",
    "start": "1739729",
    "end": "1746429"
  },
  {
    "text": "implemented in c-sharp so same concept we have an adoption service and it has a function that calls adopt and it calls",
    "start": "1746429",
    "end": "1751529"
  },
  {
    "text": "that extension method but what we do to create an extension function is we take the type and this is done in global",
    "start": "1751529",
    "end": "1757950"
  },
  {
    "text": "scope or within any other scope so you can you can scope your extension methods which is really cool but you just say",
    "start": "1757950",
    "end": "1764099"
  },
  {
    "text": "function adoptable pet the the type and then you define the function right afterwards so for example if I only",
    "start": "1764099",
    "end": "1770759"
  },
  {
    "text": "wanted this extension function to be available within this adoption service I just lift this bit throw it within that",
    "start": "1770759",
    "end": "1777359"
  },
  {
    "text": "class and now I can't access it anywhere else but instead I've gone ahead and",
    "start": "1777359",
    "end": "1782669"
  },
  {
    "text": "input it at the global level so anyone that's referencing my package can execute that we can talk a little bit",
    "start": "1782669",
    "end": "1788759"
  },
  {
    "text": "more about global scope later on when we talk about sort of the c-sharp eight stuff but it's a bit of the side that",
    "start": "1788759",
    "end": "1794129"
  },
  {
    "text": "gets into like how you can execute something functionally you don't have to have a class you just throw functions wherever you want and import it and then",
    "start": "1794129",
    "end": "1800220"
  },
  {
    "text": "pipe pipe pipe so some other things that are common only you can actually add",
    "start": "1800220",
    "end": "1805259"
  },
  {
    "text": "extension properties I know we've talked a bit about doing this in c-sharp but",
    "start": "1805259",
    "end": "1810299"
  },
  {
    "text": "it's it works very similarly to how you would define a function but instead of that if I go back having function",
    "start": "1810299",
    "end": "1815879"
  },
  {
    "text": "adoptable pet adopt we just say Val adoptable pet name to find the type and",
    "start": "1815879",
    "end": "1821279"
  },
  {
    "text": "then we have to have explicit getters or setters so we can't just end it there just say yep it now it's got a property",
    "start": "1821279",
    "end": "1826710"
  },
  {
    "text": "called name that's a string but you can't actually use getters and setters use some other scope more like a Java",
    "start": "1826710",
    "end": "1832950"
  },
  {
    "text": "style where you're setting some other field or something like that you also have the ability and this is another",
    "start": "1832950",
    "end": "1838649"
  },
  {
    "start": "1837000",
    "end": "1837000"
  },
  {
    "text": "thing I don't I don't think I'll ever find a use case for it but you can add extensions to your companion object as",
    "start": "1838649",
    "end": "1843659"
  },
  {
    "text": "well so that like I was saying how in Java style you have to call doc companion this is like the same sort of",
    "start": "1843659",
    "end": "1848849"
  },
  {
    "text": "thing here but you're basically saying take my companion object of my class and also give it this extension I guess like",
    "start": "1848849",
    "end": "1855299"
  },
  {
    "text": "a use case for that would be if you already have yours to find if someone else does but you want to give it another static thing instead of having",
    "start": "1855299",
    "end": "1860940"
  },
  {
    "text": "like some sort of helper method you can do that I just haven't really run into it yet myself so any questions on that",
    "start": "1860940",
    "end": "1866999"
  },
  {
    "text": "before we get into sort of the cooler typing sides and I'm just gonna keep chugging water",
    "start": "1866999",
    "end": "1873150"
  },
  {
    "text": "cuz my mouth gets so dry cool so both these languages have some really",
    "start": "1873150",
    "end": "1880560"
  },
  {
    "text": "cool typing features not in the sense of a keyboard typing I mean like an actual class typing and stuff like that in",
    "start": "1880560",
    "end": "1887700"
  },
  {
    "text": "c-sharp we were introduced to the concept of a dynamic type probably the most hated type of the world has ever",
    "start": "1887700",
    "end": "1893580"
  },
  {
    "start": "1888000",
    "end": "1888000"
  },
  {
    "text": "seen those you hear a C sharp all the time probably forget that you can even do this but instead of having a strong type",
    "start": "1893580",
    "end": "1898830"
  },
  {
    "text": "you just throw dynamic and then the type checker and compiler just go uh-huh no I trust you I hope that this pet thing has",
    "start": "1898830",
    "end": "1904650"
  },
  {
    "text": "an is adopted field but if it doesn't then the whole thing blows up at runtime and you also get some very vague errors",
    "start": "1904650",
    "end": "1911250"
  },
  {
    "text": "and it kind of yells at you for me like stupid shouldn't use a dynamic type we also get a dynamic type in Colin but the",
    "start": "1911250",
    "end": "1917490"
  },
  {
    "text": "funny thing is it doesn't exist in the JVM so if you're compiling against the JVM for something like Android or Kate",
    "start": "1917490",
    "end": "1924330"
  },
  {
    "text": "or you'll never be able to do this you won't be able to build it'll yell at you but if you're compiling to native or to",
    "start": "1924330",
    "end": "1930150"
  },
  {
    "text": "JavaScript you can mostly because JavaScript everything's a dynamic type they don't really care it's like saying",
    "start": "1930150",
    "end": "1936570"
  },
  {
    "text": "and typescript like just type this as any I don't I don't care what it is but in the reason why they can't get in the",
    "start": "1936570",
    "end": "1942360"
  },
  {
    "text": "JVM is because of that backwards compatibility focus so in order to support sort of the older legacy",
    "start": "1942360",
    "end": "1948480"
  },
  {
    "text": "versions of Java that are so sore really any version of Java it's so tightly bound to its type system and its",
    "start": "1948480",
    "end": "1955110"
  },
  {
    "text": "definitions there there's no way they can build any sort of dynamic or Expando object or anything like that but if you",
    "start": "1955110",
    "end": "1960990"
  },
  {
    "text": "are compiling against anything else feel free to also write this bad code you also have type inference this is",
    "start": "1960990",
    "end": "1968010"
  },
  {
    "start": "1965000",
    "end": "1965000"
  },
  {
    "text": "something that's becoming more popular in most languages especially new languages it's something that was",
    "start": "1968010",
    "end": "1974220"
  },
  {
    "text": "created because we realize as people we don't we don't need to always say what it is like we know we can infer that",
    "start": "1974220",
    "end": "1980160"
  },
  {
    "text": "that P here is an adoptable dog because I'd know that the the pet exists method",
    "start": "1980160",
    "end": "1985260"
  },
  {
    "text": "takes in a function that uses an adoptable pet so I don't have to go and say adopt a little pet P arrow function",
    "start": "1985260",
    "end": "1991470"
  },
  {
    "text": "you know ID equals ID but that is where the influence is happening here same thing in colonists it's really",
    "start": "1991470",
    "end": "1997710"
  },
  {
    "text": "similar and there's a few other places that inference exists in both of these languages but I figured it was good to",
    "start": "1997710",
    "end": "2003350"
  },
  {
    "text": "sort show there's the side-by-sides here so in on the left side we define an expression of a thunk of an adoptable",
    "start": "2003350",
    "end": "2010759"
  },
  {
    "text": "pet to return a bool we just passed that into the link any method probably",
    "start": "2010759",
    "end": "2016580"
  },
  {
    "text": "doesn't need to be an expression honestly I just kind of wasted space with that and I think about it because I just been a funk but anyway and then on",
    "start": "2016580",
    "end": "2022730"
  },
  {
    "text": "the right side and Kotlin we defined a predicate as the arrow function so this is the type right this is this is saying",
    "start": "2022730",
    "end": "2027919"
  },
  {
    "text": "predicate is a function that returns me a boolean given an adoptable pet and we",
    "start": "2027919",
    "end": "2032960"
  },
  {
    "text": "also get that sort of any feature if you've ever tried to write Java lately you don't get any of this cool like array management stuff where we",
    "start": "2032960",
    "end": "2039379"
  },
  {
    "text": "basically get linked in Kotlin but we won't get into all the sort of library stuff and then at the top we can say Pet",
    "start": "2039379",
    "end": "2046549"
  },
  {
    "text": "exists we use an arrow function some slice and tactical differences there's actually reasons behind it so we can't",
    "start": "2046549",
    "end": "2052460"
  },
  {
    "text": "actually create a function as an object and pass it around in Kotlin simply because Java is not cool with that so",
    "start": "2052460",
    "end": "2060020"
  },
  {
    "text": "instead what we do is we basically like say pet exists is a function and it takes this function and we're just executing that function within it that's",
    "start": "2060020",
    "end": "2066740"
  },
  {
    "text": "something that I think c-sharp just handles a little bit better but the way to get around it is pretty clever if",
    "start": "2066740",
    "end": "2071810"
  },
  {
    "text": "you're passing around a predicate or something like that you just have to use the curly braces any questions on any of",
    "start": "2071810",
    "end": "2077599"
  },
  {
    "text": "the type inference or anything like that and I'll get into generics cool so",
    "start": "2077599",
    "end": "2083148"
  },
  {
    "start": "2083000",
    "end": "2083000"
  },
  {
    "text": "generics one of my favorite things in sort of the object oriented programming world but especially in the type",
    "start": "2083149",
    "end": "2089510"
  },
  {
    "text": "inference world where now we don't have to build implementations of so many classes depending on what types we build",
    "start": "2089510",
    "end": "2094730"
  },
  {
    "text": "we can build like generic stuff that can do a whole bunch of things and c-sharp when they implemented generics sort of",
    "start": "2094730",
    "end": "2100430"
  },
  {
    "text": "became like the leader in terms of like this is how generics really should be has all of us love using generics and",
    "start": "2100430",
    "end": "2105589"
  },
  {
    "text": "c-sharp because we can do things like say I can take type T but that type T better be an adoptable pet and because",
    "start": "2105589",
    "end": "2111380"
  },
  {
    "text": "of that I can now call those methods or properties like is adopted because I know that exists on my adoptable pet",
    "start": "2111380",
    "end": "2117640"
  },
  {
    "text": "other languages like Java is initial implementation without that it's just it almost makes generics useless or at",
    "start": "2117640",
    "end": "2123770"
  },
  {
    "text": "least confusing in order to build something like in depth they're usable Kotlin started with generics with that",
    "start": "2123770",
    "end": "2129859"
  },
  {
    "text": "in mind again just coming from that background of c-sharp like this works but I don't like the fact that I have to say where and put t2 places so and",
    "start": "2129859",
    "end": "2137360"
  },
  {
    "text": "we define it right here at the top right we say pet adoption service of type T and type T better be an adoptable pet of",
    "start": "2137360",
    "end": "2143840"
  },
  {
    "text": "some kind and then we get the same sort of autocomplete we get the ability to compile this in any way we want and use",
    "start": "2143840",
    "end": "2149930"
  },
  {
    "text": "the is adopted without running into any errors because we can safely infer the type so I also want to talk a bit about",
    "start": "2149930",
    "end": "2157880"
  },
  {
    "start": "2155000",
    "end": "2155000"
  },
  {
    "text": "tuples this is something that I also see debated quite a bit in the object-oriented world because it's kind",
    "start": "2157880",
    "end": "2163190"
  },
  {
    "text": "of just a shortcut to making to avoid making like another class just pass in this type that is these other two types",
    "start": "2163190",
    "end": "2169760"
  },
  {
    "text": "or three or four end types so for those of you who don't use tuples or when",
    "start": "2169760",
    "end": "2174830"
  },
  {
    "text": "c-sharp 7 introduced sums like i don't care about that it's essentially the idea of creating a type that contains",
    "start": "2174830",
    "end": "2180350"
  },
  {
    "text": "multiple other types so in this case we have this dog and shelter as a type but",
    "start": "2180350",
    "end": "2186500"
  },
  {
    "text": "those are also two classes below and then the way that we access each of those different types within that as we",
    "start": "2186500",
    "end": "2193220"
  },
  {
    "text": "can say item 1 and now we know that's the dog versus sorry versus saying item",
    "start": "2193220",
    "end": "2200300"
  },
  {
    "text": "2 or item 3 and stuff like that but we can also give them explicit name so I can say dog and the name of it is pet",
    "start": "2200300",
    "end": "2206150"
  },
  {
    "text": "and then I can say data dot pet rather than item 1 but if we don't at least they give us something to access it you",
    "start": "2206150",
    "end": "2211880"
  },
  {
    "text": "can also access it with sort of like the array accessors and stuff like that same",
    "start": "2211880",
    "end": "2217250"
  },
  {
    "text": "sort of functionality and Kotlin displayed a little differently with a little bit of helper tools as well so we",
    "start": "2217250",
    "end": "2223250"
  },
  {
    "text": "have the idea to apples we have a tuple type we just basically throw in a bunch of generics and number of times I think",
    "start": "2223250",
    "end": "2228470"
  },
  {
    "text": "it's actually limiting it to like 20 or 16 or something like that but I hope you don't have to run into that but they",
    "start": "2228470",
    "end": "2234290"
  },
  {
    "text": "also give us two different shortcut types for tuples so we have pair where we have two different types which is",
    "start": "2234290",
    "end": "2240230"
  },
  {
    "text": "what we're using here and then also triple which is just three different types so instead of having to say tuple everywhere and pass it around you know",
    "start": "2240230",
    "end": "2246560"
  },
  {
    "text": "you get two types and that's how we're able to get first second and third for those other types if you go beyond that",
    "start": "2246560",
    "end": "2252650"
  },
  {
    "text": "you got to use accessors or explicit naming to pull out those properties so in this case it's the same thing we're",
    "start": "2252650",
    "end": "2258650"
  },
  {
    "text": "passing in a pair of type dog and shelter and we can say data dot first that is adopted is true questions on any",
    "start": "2258650",
    "end": "2266630"
  },
  {
    "text": "of the the type stuff I know it's sort of like it's a very debated area in in both programming languages",
    "start": "2266630",
    "end": "2274130"
  },
  {
    "text": "because it's like object-oriented stuff but they're not so object oriented yeah",
    "start": "2274130",
    "end": "2278710"
  },
  {
    "text": "yeah you can just like in c-sharp where you can say like oh this has to be a",
    "start": "2280930",
    "end": "2287270"
  },
  {
    "text": "class or this has to be a class with this constructor that takes in these things or a class with an empty constructor you can do those same sort",
    "start": "2287270",
    "end": "2293569"
  },
  {
    "text": "of things in Collin yeah any other questions cool so my I think favorite",
    "start": "2293569",
    "end": "2301190"
  },
  {
    "text": "part of modern programming in asynchronous programming especially coming from a mobile developer and voice developer background asynchronous stuff",
    "start": "2301190",
    "end": "2308240"
  },
  {
    "text": "is extremely important to be able to take something that in action that happens on the UI go execute something",
    "start": "2308240",
    "end": "2313670"
  },
  {
    "text": "in the background while also letting the user do something but still handle the result when it comes back is so",
    "start": "2313670",
    "end": "2318980"
  },
  {
    "text": "invaluable and having to do that before Kotlin in java was a nightmare and also",
    "start": "2318980",
    "end": "2324529"
  },
  {
    "text": "just in c-sharp before we were introduced to async away so let's take a look at that here c-sharp manages most",
    "start": "2324529",
    "end": "2330650"
  },
  {
    "start": "2328000",
    "end": "2328000"
  },
  {
    "text": "of its asynchronous programming with the concept of async await in tasks so we have an empty task that means it doesn't",
    "start": "2330650",
    "end": "2336650"
  },
  {
    "text": "expect a return type now we can say that's async you can also use async void but obviously you're gonna get warnings",
    "start": "2336650",
    "end": "2341900"
  },
  {
    "text": "that are like it should be a task otherwise you're not really thread safe and then we can await another asynchronous task method we can also run",
    "start": "2341900",
    "end": "2349220"
  },
  {
    "text": "these in other tasks runs we can batch these asynchronous tasks together and away all of them a whole bunch of stuff",
    "start": "2349220",
    "end": "2355039"
  },
  {
    "text": "that makes our lives easier to say like go do this thing and then like when you get back and do something else and I'll just carry on over here if you're doing",
    "start": "2355039",
    "end": "2361520"
  },
  {
    "text": "it right Collin introduced this concept in 1.3 and this is what I just recently updated these slides for this as well",
    "start": "2361520",
    "end": "2368000"
  },
  {
    "text": "called co-routines so before co-routines you had to use other libraries that basically used a",
    "start": "2368000",
    "end": "2374089"
  },
  {
    "text": "whole bunch of callback methods and everything else from sort of the traditional asynchronous programming similar to more like a promise type",
    "start": "2374089",
    "end": "2382069"
  },
  {
    "text": "system like javascript has but in this case now we have Co routines and Co routines are amazing and they're a very",
    "start": "2382069",
    "end": "2387890"
  },
  {
    "text": "different approach than other programming languages take what we have is the ability to use either a global",
    "start": "2387890",
    "end": "2393440"
  },
  {
    "text": "scope or a custom defined scope and then execute co-routines and so the idea is",
    "start": "2393440",
    "end": "2398930"
  },
  {
    "text": "that we have a global dispatcher or a custom defined dispatcher that's going to go execute these tasks and send them",
    "start": "2398930",
    "end": "2404690"
  },
  {
    "text": "along but then we can do all sorts of things with that task while it's executing including like just waiting for it to",
    "start": "2404690",
    "end": "2409760"
  },
  {
    "text": "come back executing other co-routines throwing that on other dispatchers waiting for a whole bunch to come back",
    "start": "2409760",
    "end": "2415160"
  },
  {
    "text": "similar functionality that we get in c-sharp with async await and tasks but we do get it in sort of like this new",
    "start": "2415160",
    "end": "2420829"
  },
  {
    "text": "style that almost feels like I can actually control this without saying like if I just run tasks that run on an",
    "start": "2420829",
    "end": "2427220"
  },
  {
    "text": "async oh wait or a c-sharp task rather I'm gonna end up risking like exceptions blowing up",
    "start": "2427220",
    "end": "2432799"
  },
  {
    "text": "and stuff like that where this keeps a lot of context and you can provide your own context as well and I'm much more it's like familiar way so we can look at",
    "start": "2432799",
    "end": "2440720"
  },
  {
    "text": "like a more real-world example ish real-world issue obviously this doesn't do anything where we have this this",
    "start": "2440720",
    "end": "2447710"
  },
  {
    "text": "background get we have a list of dogs there and basically want to set that list of dogs on the background this is",
    "start": "2447710",
    "end": "2452809"
  },
  {
    "text": "bad code don't actually write stuff like this is not really thread safe that like the dogs are gonna be disposed and then",
    "start": "2452809",
    "end": "2458089"
  },
  {
    "text": "you're gonna lose a whole bunch of stuff but just bear with me as I go over the concept so we have a list of dogs and we",
    "start": "2458089",
    "end": "2463940"
  },
  {
    "text": "want to go get them in the background while everything else executes below it so we call it a thought run and a weight",
    "start": "2463940",
    "end": "2469130"
  },
  {
    "text": "up here up top we have a task that returns a list of dogs and it's basically making like a very basic HTTP",
    "start": "2469130",
    "end": "2475130"
  },
  {
    "text": "GET as a string request that expecting some JSON and then we just serialize it with JSON net so what's going to happen",
    "start": "2475130",
    "end": "2481520"
  },
  {
    "text": "is that we call back round get means initiate our list of dogs is null we execute the tasks that run and",
    "start": "2481520",
    "end": "2487940"
  },
  {
    "text": "everything else below that Jesus keeps going in that task top run now we go await that and we set the dogs to the",
    "start": "2487940",
    "end": "2493190"
  },
  {
    "text": "result like I said this this really shouldn't actually work because everything after background get unless it has something to keep it keep its",
    "start": "2493190",
    "end": "2499730"
  },
  {
    "text": "context and keep it out of the garbage collector is going to get booted we can do the same sort of thing in Kotlin with",
    "start": "2499730",
    "end": "2506270"
  },
  {
    "start": "2506000",
    "end": "2506000"
  },
  {
    "text": "co-routines so we have this get adoptable dogs this get adoptable dogs it's not executed co-routine it's",
    "start": "2506270",
    "end": "2512930"
  },
  {
    "text": "basically synchronously going and making this request other side now don't just call you or all that read text but I",
    "start": "2512930",
    "end": "2518329"
  },
  {
    "text": "needed to fit it all in one screen so it's nice I'm pretty really you should probably use a better library but anyway we take that JSON that we get",
    "start": "2518329",
    "end": "2525680"
  },
  {
    "text": "synchronously waiting for it to read everything on that thread that it's executing on and then we do the same",
    "start": "2525680",
    "end": "2530690"
  },
  {
    "text": "sort of deserialization using google's json library with that we actually can",
    "start": "2530690",
    "end": "2536690"
  },
  {
    "text": "execute to get adoptable dogs in back and so same deal we instantiate a local variable of list of dogs with no and",
    "start": "2536690",
    "end": "2543560"
  },
  {
    "text": "then we call the global scope and launch a new Co routine from the global dispatcher and set that as get adoptable",
    "start": "2543560",
    "end": "2549260"
  },
  {
    "text": "dogs so what's going to actually happen is we execute it instantiate it the current fires and we just basically",
    "start": "2549260",
    "end": "2554600"
  },
  {
    "text": "continue on but we can also await a Co routine and there's a few different ways",
    "start": "2554600",
    "end": "2560150"
  },
  {
    "text": "you can do that so this is the exact same code except if we wanted to for example do like an actual await the the",
    "start": "2560150",
    "end": "2565880"
  },
  {
    "text": "co-routine to get me the results then we can call dot join and it basically says take the test that's running in this Co",
    "start": "2565880",
    "end": "2571310"
  },
  {
    "text": "routine and bring it back to the throat where I executed it from or at least in the thread that I'm calling dot join in",
    "start": "2571310",
    "end": "2577220"
  },
  {
    "text": "so in this case it's obviously the most basic example but you can actually take Co routines that are in like many different threads and join them into",
    "start": "2577220",
    "end": "2584030"
  },
  {
    "text": "like other threads in completely different areas and sort of give it new contexts and stuff like that which i think is pretty wild and I don't think",
    "start": "2584030",
    "end": "2590720"
  },
  {
    "text": "it's something you can do very easily in c-sharp so from there we can talk about",
    "start": "2590720",
    "end": "2596210"
  },
  {
    "text": "tooling but if you have any questions about any of the asynchronous stuff let me know cool",
    "start": "2596210",
    "end": "2608020"
  },
  {
    "text": "so in c-sharp we have some of the best developer tools I think you guys if you",
    "start": "2608020",
    "end": "2614150"
  },
  {
    "text": "have to go and write JavaScript code or something and come back to C sharp you're like oh my god yes I can actually like do things quickly and just like",
    "start": "2614150",
    "end": "2620450"
  },
  {
    "text": "control period and tab around and do everything I want the way I want and everything's fast at least that's how I",
    "start": "2620450",
    "end": "2625700"
  },
  {
    "text": "normally feel we have things like Visual Studio which is now have even even newer focus in terms of like building better",
    "start": "2625700",
    "end": "2631910"
  },
  {
    "text": "developer tools we have AI and our intellisense we have things that predict the way that we personally use the",
    "start": "2631910",
    "end": "2637280"
  },
  {
    "text": "editor to make it easier to like hey I know you name parameters like this so let me just auto suggest that you can just tap your way through it and it's",
    "start": "2637280",
    "end": "2643160"
  },
  {
    "text": "like you're not even writing code anymore we have vias coat the slimmed down version you can saw some c-sharp plugins",
    "start": "2643160",
    "end": "2648320"
  },
  {
    "text": "and and carry on the way you would expect and then we can also now write it on the Mac outside of the Visual Studio",
    "start": "2648320",
    "end": "2654200"
  },
  {
    "text": "line of tools there's also been this sort of new player named rider this is from JetBrains if you haven't used it",
    "start": "2654200",
    "end": "2659750"
  },
  {
    "text": "before it's incredible how many of you guys use resharper at all in your visual studio yeah that'd be a lot imagine just",
    "start": "2659750",
    "end": "2667190"
  },
  {
    "text": "resharper has an IDE with like everything else IntelliJ has been writing the entire time",
    "start": "2667190",
    "end": "2672270"
  },
  {
    "text": "the difference is that it's not free because it's all part of the the JetBrains package I personally love",
    "start": "2672270",
    "end": "2677910"
  },
  {
    "text": "Ryder a lot I mostly use Visual Studio just for consistency sake between like my Mac and my Windows machine but writer",
    "start": "2677910",
    "end": "2684000"
  },
  {
    "text": "does actually run on all platforms including Linux Mac and Windows and it's the exact same interface like you'd",
    "start": "2684000",
    "end": "2690450"
  },
  {
    "text": "expect where if you've used Visual Studio for Mac it's more Maki it's a little different you sort of got to get",
    "start": "2690450",
    "end": "2695610"
  },
  {
    "text": "used to setting things up a little differently or just like force yourself into using the command key as a control",
    "start": "2695610",
    "end": "2700680"
  },
  {
    "text": "key and like try to keep the same shortcuts which I personally just can't execute well on the cotton side we have",
    "start": "2700680",
    "end": "2708180"
  },
  {
    "text": "a similar set of awesome tools so we have IntelliJ the og of Java environments that were actually decent",
    "start": "2708180",
    "end": "2715340"
  },
  {
    "text": "separate from Eclipse which if you if you still have to use eclipse I'm really sorry it hasn't gotten much better",
    "start": "2715340",
    "end": "2721940"
  },
  {
    "text": "IntelliJ just like Rider or using resharper you're gonna get the same feel and we have Android studio for Android",
    "start": "2721940",
    "end": "2727710"
  },
  {
    "text": "development this is basically Google partnering with JEP rating that's saying like hey I like what you guys are doing let us just put a whole bunch of Android",
    "start": "2727710",
    "end": "2733740"
  },
  {
    "text": "stuff on top of that but it's really the same sort of actual intellisense same sort of code management with a whole",
    "start": "2733740",
    "end": "2739020"
  },
  {
    "text": "bunch of stuff to like Auto generate some Android stuff but in terms of Kotlin support IntelliJ and Android",
    "start": "2739020",
    "end": "2745590"
  },
  {
    "text": "studio operate in the exact same way you can do that whole like copy Java over to Kotlin like I mentioned and then eclipse",
    "start": "2745590",
    "end": "2751470"
  },
  {
    "text": "they've built a plugin for you so you can still suffer it with Kotlin so",
    "start": "2751470",
    "end": "2757130"
  },
  {
    "text": "tooling aside anyone have any questions I'm not going to be able to have time to do like any demos of the IDE s or",
    "start": "2757130",
    "end": "2762330"
  },
  {
    "text": "anything like that so if you have questions about like how that sort of stuff works right good time to ask her save it for the end and then after that",
    "start": "2762330",
    "end": "2768690"
  },
  {
    "text": "I'll talk about the c-sharp eight stuff which you've probably heard a whole bunch of times already cool all right so",
    "start": "2768690",
    "end": "2776910"
  },
  {
    "text": "let's dig into the stuff in c-sharp eight and I sort of think of this and it's four major features and also how",
    "start": "2776910",
    "end": "2783570"
  },
  {
    "text": "this features can also be reflected in common it's stuff that colin has actually had for quite a while so we",
    "start": "2783570",
    "end": "2789060"
  },
  {
    "start": "2789000",
    "end": "2789000"
  },
  {
    "text": "looked at knowable reference types in Kotlin and this is actually a behavior you can't turn off we're in c-sharp eight it's something",
    "start": "2789060",
    "end": "2795780"
  },
  {
    "text": "you'll be able to explicitly add and we get the difference between now our string has a question mark next to it to",
    "start": "2795780",
    "end": "2801360"
  },
  {
    "text": "denote it as a knowable reference type we have that same sort of like automatic",
    "start": "2801360",
    "end": "2806679"
  },
  {
    "text": "behavior and type checking and everything else it says hey you try to access something that's knowable you either need to propagate it with null or",
    "start": "2806679",
    "end": "2814150"
  },
  {
    "text": "you need to dangerously set it with a bang so the biggest difference is you",
    "start": "2814150",
    "end": "2819189"
  },
  {
    "text": "you'll probably still notice is that on the c-sharp side for knowable types we still won't have to explicitly and",
    "start": "2819189",
    "end": "2824979"
  },
  {
    "text": "instantiate it as null because the default of a noble types no C sharp smart enough to do that and so I",
    "start": "2824979",
    "end": "2830410"
  },
  {
    "text": "actually really prefer the way C sharp does it however if we do take off one of those question marks for something like",
    "start": "2830410",
    "end": "2835509"
  },
  {
    "text": "name we do have to instantiate that with a name in the C sharp side on the right side of the equation the next one is",
    "start": "2835509",
    "end": "2843369"
  },
  {
    "start": "2842000",
    "end": "2842000"
  },
  {
    "text": "ranges which I I don't know if I've actually had like a real need for it but it's sort of like a neat thing to have",
    "start": "2843369",
    "end": "2848769"
  },
  {
    "text": "that other languages have also had for a while so it's in this case I'm showing like the most basic example of a range",
    "start": "2848769",
    "end": "2855009"
  },
  {
    "text": "where I'm defining a range as 1 to 4 in terms of positioning so instead of looping over every dog that's sent down",
    "start": "2855009",
    "end": "2861400"
  },
  {
    "text": "to me I'm saying give me from position 1 to position 4 and then also write their",
    "start": "2861400",
    "end": "2866499"
  },
  {
    "text": "names in the console but obviously I'm not tight like checking like others listed dogs not no one does it also like",
    "start": "2866499",
    "end": "2873819"
  },
  {
    "text": "have at least four available I don't care about that right now Colin is the",
    "start": "2873819",
    "end": "2879009"
  },
  {
    "text": "same thing this is another thing we're C sharp when they implement I was like how this is a nice little shortcut to add so on the right side in in Kotlin you'll",
    "start": "2879009",
    "end": "2885699"
  },
  {
    "text": "notice that we have the ability to assign a range as a variable you can also do that in c-sharp or range as a",
    "start": "2885699",
    "end": "2890829"
  },
  {
    "text": "type and we can pass it around but I did want to show off where C sharp is a little bit more clever where on the",
    "start": "2890829",
    "end": "2896559"
  },
  {
    "text": "right side we don't have that access or with a range so we can't just take a list and say give me one to four like we",
    "start": "2896559",
    "end": "2901719"
  },
  {
    "text": "can in c-sharp but we can still define as a type pass it around and do all that but instead we just call like the sub",
    "start": "2901719",
    "end": "2907209"
  },
  {
    "text": "list and it's still clean but I think this is like the first time the c-sharp side got to like fewer lines of code also because we just have the obnoxious",
    "start": "2907209",
    "end": "2914199"
  },
  {
    "text": "same line brackets which I still internally debate so often we also were",
    "start": "2914199",
    "end": "2920650"
  },
  {
    "start": "2919000",
    "end": "2919000"
  },
  {
    "text": "introduced to default interface implementations so I know some of you guys probably already went to all the c-sharp eight talks and I think one of",
    "start": "2920650",
    "end": "2927099"
  },
  {
    "text": "them at least talked about this quite a bit but if you remember our original interface conversation with comparing it",
    "start": "2927099",
    "end": "2933099"
  },
  {
    "text": "and c-sharp Scotland left side was only those two definitions in the contract rather than actual implementation this time around",
    "start": "2933099",
    "end": "2940559"
  },
  {
    "text": "these look a lot more similar where we actually are able to implement adopt dogs it has to be explicitly public in I",
    "start": "2940559",
    "end": "2947039"
  },
  {
    "text": "adoption service where we sort of get the next default public comment right other than that it's still basically the",
    "start": "2947039",
    "end": "2952259"
  },
  {
    "text": "same other other than little syntactical things we now have the same capability of default interface implementations",
    "start": "2952259",
    "end": "2957809"
  },
  {
    "text": "that we've had in column for the whole time and Collins just had it because Java has had default interface implementations for like ever probably",
    "start": "2957809",
    "end": "2965130"
  },
  {
    "text": "the only thing Java had over C sharp which is also even just the beta extract",
    "start": "2965130",
    "end": "2970559"
  },
  {
    "text": "class was make an interface and just have interfaces that I just don't actually use as an interface and I don't",
    "start": "2970559",
    "end": "2976619"
  },
  {
    "text": "know I like it I'll probably use it this one is my favorite and it's something I feel like people haven't really talked",
    "start": "2976619",
    "end": "2982829"
  },
  {
    "start": "2979000",
    "end": "2979000"
  },
  {
    "text": "about enough people are all about the noble reference type and how your codes gonna be cleaner and it's gonna be safer",
    "start": "2982829",
    "end": "2987839"
  },
  {
    "text": "throw away the no reference exception or the null pointer exception in the Kotlin and java world but this one I feel like",
    "start": "2987839",
    "end": "2993990"
  },
  {
    "text": "I could I can like actually really use and I'll try to sort of like visualize what I thought about when I when I",
    "start": "2993990",
    "end": "2999720"
  },
  {
    "text": "started putting together this slide earlier today I'll go through the code",
    "start": "2999720",
    "end": "3005059"
  },
  {
    "text": "first so we have this concept of an i async enumerable and this is what it's giving us the ability to stream things",
    "start": "3005059",
    "end": "3012259"
  },
  {
    "text": "from that enumerable so in that method we're returning and I sync enumerable of type string given a list of dogs and",
    "start": "3012259",
    "end": "3018619"
  },
  {
    "text": "we're looping over those dogs and saying pause for a bit then yield the return of",
    "start": "3018619",
    "end": "3023809"
  },
  {
    "text": "that name of the dog so if I mean I personally didn't use yield a whole lot",
    "start": "3023809",
    "end": "3028910"
  },
  {
    "text": "back when I was writing a bunch of c-sharp seven but it's basically saying I'm building an enumerable throw this one in there right so every time we hit",
    "start": "3028910",
    "end": "3035420"
  },
  {
    "text": "this we're actually adding something to that enumerable and down below when we're running it we can just loop over",
    "start": "3035420",
    "end": "3040609"
  },
  {
    "text": "that just like we would with any sort of for each loop but instead this is going to hit that console dot write line every",
    "start": "3040609",
    "end": "3046430"
  },
  {
    "text": "200 milliseconds with that name so it sounds like why would I use I just like batch load stuff and I don't really care",
    "start": "3046430",
    "end": "3052910"
  },
  {
    "text": "but the way I sort of thought about it from like a mobile perspective is a lot of the way the paradigm works right now is you're loading a list of data you're",
    "start": "3052910",
    "end": "3060049"
  },
  {
    "text": "gonna go grab like a chunk of like 10 things load it into a list and carry on well this sort of gives us the ability",
    "start": "3060049",
    "end": "3065779"
  },
  {
    "text": "to like a synchronous load one thing at a time especially if you're interfacing with something like an",
    "start": "3065779",
    "end": "3070880"
  },
  {
    "text": "API that doesn't have like a bulk with pagination capabilities in the API to say like skip this Manning take this",
    "start": "3070880",
    "end": "3077180"
  },
  {
    "text": "many and said I can just go like give me the one by this ID then this idea then this ID and instead of just saying task",
    "start": "3077180",
    "end": "3082369"
  },
  {
    "text": "delay and return the name I can say go make an HTTP request make that async go give me the result of that and then pipe",
    "start": "3082369",
    "end": "3088670"
  },
  {
    "text": "that back down and then loop over that so I don't know I thought it was really cool and I feel like not enough people",
    "start": "3088670",
    "end": "3093799"
  },
  {
    "text": "are talking about it this is something where again we've got way more lines of code and Kotlin to do it but it's possible and this is in some of the",
    "start": "3093799",
    "end": "3101269"
  },
  {
    "text": "experimental things of columns so while we're talking about the feature of C sharp with C sharp 8 this is actually",
    "start": "3101269",
    "end": "3108619"
  },
  {
    "text": "sort of like the future of Kotlin which i think is planned to be fully released in one point-four so let me just break",
    "start": "3108619",
    "end": "3115009"
  },
  {
    "text": "this down for you from from the top down we have a an async get name which is an",
    "start": "3115009",
    "end": "3120440"
  },
  {
    "text": "async Metheny actually could see the async keyword which we're getting a little bit into sort of the new KO routine stuff don't get into too much",
    "start": "3120440",
    "end": "3126589"
  },
  {
    "text": "detail but the same thing we're just getting the name of the dog delay it then return it then we have the actual",
    "start": "3126589",
    "end": "3132589"
  },
  {
    "text": "get of all the names right so we have the ability to taken a list of dogs go over returning is actually a list of",
    "start": "3132589",
    "end": "3138289"
  },
  {
    "text": "deferred of string a noble string so that deferred type is what allows us to",
    "start": "3138289",
    "end": "3143599"
  },
  {
    "text": "actually await the individual result of it so what we're doing is calling an array mapper map to get the async name",
    "start": "3143599",
    "end": "3151029"
  },
  {
    "text": "then in the actual running block which again is fired in a KO routine we're",
    "start": "3151029",
    "end": "3156349"
  },
  {
    "text": "able to say give me the names and then loop over them and await the individual result of it so getting the async names",
    "start": "3156349",
    "end": "3162680"
  },
  {
    "text": "gives me the whole list of the deferred and it's just going to continue to run that and then I'm going to await the result of each individual piece which is",
    "start": "3162680",
    "end": "3169819"
  },
  {
    "text": "pretty cool but it's obviously a little bit more involved and we're actually doing it was sort of like the more functional style where we're defining it",
    "start": "3169819",
    "end": "3176210"
  },
  {
    "text": "at the co-routine scope rather than doing it in an object but I thought it was a pretty cool example any questions",
    "start": "3176210",
    "end": "3182569"
  },
  {
    "text": "about sort of like those really really new really cool c-sharp 8 features or how you can actually implement the same",
    "start": "3182569",
    "end": "3188539"
  },
  {
    "text": "sort of thing in Collin",
    "start": "3188539",
    "end": "3191619"
  },
  {
    "text": "so in this case it's going to execute it one at a time so in this async name all we're saying",
    "start": "3202560",
    "end": "3208300"
  },
  {
    "text": "is that we're mapping the list of dogs to basically the list of this method this async function in the code routine",
    "start": "3208300",
    "end": "3215290"
  },
  {
    "text": "so this is an entire function and we're actually mapping the dogs to that list",
    "start": "3215290",
    "end": "3220300"
  },
  {
    "text": "of that function and then we're able to await it one at a time so you can think",
    "start": "3220300",
    "end": "3225700"
  },
  {
    "text": "of like this this list of deferred string is like a list of a function that returns me a string asynchronously and",
    "start": "3225700",
    "end": "3231250"
  },
  {
    "text": "so then we're able to loop over that list just like we would any other and then we just say dot await and we'll wait for the individual result of each",
    "start": "3231250",
    "end": "3237490"
  },
  {
    "text": "one in the list any questions cool I",
    "start": "3237490",
    "end": "3245500"
  },
  {
    "text": "think this is like the last major section but talking about now the future of Kotlin there's a lot going on it's",
    "start": "3245500",
    "end": "3252280"
  },
  {
    "text": "open source so it's not just JetBrains working on it although they have a dedicated team of some of the best developers in the world designing this",
    "start": "3252280",
    "end": "3258730"
  },
  {
    "text": "language it's also open source and allowing people to actually make poor request to the compilers so the",
    "start": "3258730",
    "end": "3263890"
  },
  {
    "text": "JavaScript compiler I believe actually came from an initial concept from an open source community member so if",
    "start": "3263890",
    "end": "3269440"
  },
  {
    "text": "you're interested in actually getting involved in a community that's like very open to the concept of people hopping in",
    "start": "3269440",
    "end": "3274510"
  },
  {
    "text": "which also has great documentation sort of the best place to be but let's talk",
    "start": "3274510",
    "end": "3279940"
  },
  {
    "text": "about them one by one some more code routine stuff it's it's brand new like 1.3 just released that's when they were",
    "start": "3279940",
    "end": "3285160"
  },
  {
    "text": "finally like co-routines are ready but like I just said with that sort of streaming asynchronously stuff and that",
    "start": "3285160",
    "end": "3290620"
  },
  {
    "text": "deferred type and being able to dock oh wait that that's still experimental I wouldn't be using that in production so",
    "start": "3290620",
    "end": "3296320"
  },
  {
    "text": "that sort of stuff is going to continue to be developed to continue to be tested against all the different platforms also",
    "start": "3296320",
    "end": "3301660"
  },
  {
    "text": "the native compiler it's currently in beta which is also the 1.3 release pushed it to beta they're basically just",
    "start": "3301660",
    "end": "3307000"
  },
  {
    "text": "trying to get it ready for for a production environment and then continued IDE enhancements this is",
    "start": "3307000",
    "end": "3313060"
  },
  {
    "text": "mostly in regards to the multi-platform stuff so if you've ever run dotnet with",
    "start": "3313060",
    "end": "3318970"
  },
  {
    "text": "multi-platform so something like is Ameren or even just like talking to a SPI web app and then like a console app",
    "start": "3318970",
    "end": "3325420"
  },
  {
    "text": "and you're abstracting your code into like different projects that it then references kahlan's trying to do more of this",
    "start": "3325420",
    "end": "3331000"
  },
  {
    "text": "because it has to use a different compile for each of those different platforms so being able to support code that's shared",
    "start": "3331000",
    "end": "3337500"
  },
  {
    "text": "between JavaScript and Java and Native and iOS with all of its extra tooling they want to be able to build it into",
    "start": "3337500",
    "end": "3343680"
  },
  {
    "text": "the tooling a bit better to handle that so this is also in preview right now they're trying to push people to do it a",
    "start": "3343680",
    "end": "3348720"
  },
  {
    "text": "bit more same thing with c-sharp if you're already writing c-sharp apps and you ready have a whole bunch of business logic just you know throw throw a mobile",
    "start": "3348720",
    "end": "3354840"
  },
  {
    "text": "app on it and and run with it now they're trying to promote that sort of behavior as well so that's that's it",
    "start": "3354840",
    "end": "3362820"
  },
  {
    "text": "I'll get it in the into the summary but what I hope you can take away from this is that both these languages are super",
    "start": "3362820",
    "end": "3368460"
  },
  {
    "text": "cool and you can take the knowledge of the style that you develop in c-sharp and apply it to places where it can't",
    "start": "3368460",
    "end": "3374520"
  },
  {
    "text": "support it right now build stuff on the JVM if you're in consulting and someone comes even like oh yeah we got this",
    "start": "3374520",
    "end": "3379680"
  },
  {
    "text": "legacy Java system and I need you to come in and help us work on and you're like I'm a dotnet div that kind of sucks it doesn't have to suck any more",
    "start": "3379680",
    "end": "3386090"
  },
  {
    "text": "kontin's pretty cool or if you just hate javascript so much and you don't feel",
    "start": "3386090",
    "end": "3392040"
  },
  {
    "text": "like touching typescript which is my other I'd put it over here with my like third favorite language you can also",
    "start": "3392040",
    "end": "3397950"
  },
  {
    "text": "write Cottle in there as well and share that across your different platforms so I also want to emphasize that we like",
    "start": "3397950",
    "end": "3403740"
  },
  {
    "start": "3402000",
    "end": "3402000"
  },
  {
    "text": "barely barely scratch the surface with this language in the platform's we didn't really talk about anything about the functional side because we're",
    "start": "3403740",
    "end": "3409710"
  },
  {
    "text": "comparing it to c-sharp I definitely encourage people to look into that a bit more we didn't talk about any real design patterns other than here's",
    "start": "3409710",
    "end": "3415740"
  },
  {
    "text": "object-oriented programming we're going to talk about how you can implement things like dependency injection proper inversion of control with other",
    "start": "3415740",
    "end": "3421350"
  },
  {
    "text": "practices we didn't get into much of the actual deeper language features we talked about the basics and we talked about co-routines which is probably",
    "start": "3421350",
    "end": "3427500"
  },
  {
    "text": "about as far as we could go we also didn't talk about any of the cool tooling that the cotton team is built like couture and how that's actually",
    "start": "3427500",
    "end": "3433530"
  },
  {
    "text": "implemented and why it's so much better and faster than spring and arguably in certain cases than dotnet core or anko",
    "start": "3433530",
    "end": "3441180"
  },
  {
    "text": "which is their whole other suite of tools that can do just about anything for you including like data syncing between your code routines and stuff",
    "start": "3441180",
    "end": "3447450"
  },
  {
    "text": "like that we can get into how to build things with native or with JavaScript or into all the other cool Android tools so",
    "start": "3447450",
    "end": "3452760"
  },
  {
    "text": "I definitely encourage you to sort of do that research if you if you've found interest in the language itself it's",
    "start": "3452760",
    "end": "3457980"
  },
  {
    "text": "definitely worth seeing what you can really do with it because it's pretty crazy so I have some resources here that that's the actual compiler set for cots",
    "start": "3457980",
    "end": "3465330"
  },
  {
    "start": "3460000",
    "end": "3460000"
  },
  {
    "text": "spec and compiler and everything else open source by JetBrains there is also a Colin organization which has like the",
    "start": "3465330",
    "end": "3471270"
  },
  {
    "text": "extra toolings like Kate or and anko and stuff like that all the examples that you saw in the slides are also available",
    "start": "3471270",
    "end": "3478050"
  },
  {
    "text": "on my github including what my original talk was which was also included a basic Android app with Kotlin to a xamarin",
    "start": "3478050",
    "end": "3485310"
  },
  {
    "text": "Android app that's also up there we just don't have time to continue to go over the sort of basics I wanted to introduce",
    "start": "3485310",
    "end": "3491400"
  },
  {
    "text": "the c-sharp eight concepts because I felt that was more interesting also check out my plural site course on it if",
    "start": "3491400",
    "end": "3496530"
  },
  {
    "text": "you're interested in doing Kotlin in an actual implementation I have this building Android apps with Kotlin getting started it's it's interesting we",
    "start": "3496530",
    "end": "3503369"
  },
  {
    "text": "go through the process of building a real-world app from scratch without any assumption of Kotlin knowledge at all so",
    "start": "3503369",
    "end": "3508740"
  },
  {
    "text": "we we do things like execute request to a third party API and then actually sync that down to a local database handle",
    "start": "3508740",
    "end": "3515640"
  },
  {
    "text": "navigation in a more complex app between different types and sort of the different layouts and structures you can use in Android and then like I said at",
    "start": "3515640",
    "end": "3522180"
  },
  {
    "text": "the beginning check out my blog series on this and all my other Kotlin and c-sharp stuff and then I'll put these slides up on Twitter at the end so be",
    "start": "3522180",
    "end": "3528780"
  },
  {
    "text": "sure to follow me swab underscore pirate there and thank you it's left to anyone",
    "start": "3528780",
    "end": "3541230"
  },
  {
    "text": "does have questions or anything or just wants to talk",
    "start": "3541230",
    "end": "3544849"
  }
]