[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "um thanks for your patience I appreciate this so we'll be talking about Ekman six JavaScript the good parts I'm a big fan",
    "start": "0",
    "end": "7350"
  },
  {
    "text": "of Crockford actually wrote him a little fun fact I wrote him some fan mail last",
    "start": "7350",
    "end": "13049"
  },
  {
    "text": "summer because he's got kind of got his email published and I was web played so I wrote him some fan mail and he",
    "start": "13049",
    "end": "18570"
  },
  {
    "text": "responded and we bounced a few e-mails back and forth and that like that really made me feel cool so you know I'm a big",
    "start": "18570",
    "end": "30390"
  },
  {
    "text": "fan of him so this there was a book",
    "start": "30390",
    "end": "35630"
  },
  {
    "text": "JavaScript the good parts written by Douglas Crockford which is pretty much the Bible you've probably all read it so",
    "start": "35630",
    "end": "42180"
  },
  {
    "text": "this is we're basically going to talk about what comes next in that book it was O'Reilly and they had a butterfly on it a lot of people don't get my joke so",
    "start": "42180",
    "end": "48960"
  },
  {
    "text": "here that's where the butterfly comes from about me I'm Jennifer Estrada I am",
    "start": "48960",
    "end": "55140"
  },
  {
    "start": "52000",
    "end": "52000"
  },
  {
    "text": "a web developer more like a JavaScript architect these days this is my daughter brought her along for the talk I am a",
    "start": "55140",
    "end": "63840"
  },
  {
    "text": "senior consultant software developer with a Vinod it's an IT consulting firm I'm out of Chicago I'm the front-end",
    "start": "63840",
    "end": "70860"
  },
  {
    "text": "development capability lead for the Midwest software engineering team what does that mean for you my primary focus",
    "start": "70860",
    "end": "76229"
  },
  {
    "text": "has been getting dotnet people over the JavaScript stack because all of our web projects we sell these days are the",
    "start": "76229",
    "end": "82500"
  },
  {
    "text": "JavaScript stamps so this is why I'm interested I like speaking and talking and everything like that in my spare",
    "start": "82500",
    "end": "88500"
  },
  {
    "text": "time I also sometimes when I have spare time when you have two kids you just don't have it but sometimes I like to",
    "start": "88500",
    "end": "94829"
  },
  {
    "text": "speak at boot camps and stuff and and and I'm really happy to be here so thank you what are we going to talk about ekam",
    "start": "94829",
    "end": "104610"
  },
  {
    "text": "is six JavaScript I always like to read the state of JavaScript survey raise",
    "start": "104610",
    "end": "110159"
  },
  {
    "text": "your hand if you've looked at this it's really good I'll show you the URL keep it in mind for next year it's kind of",
    "start": "110159",
    "end": "116340"
  },
  {
    "text": "neat it's really a lot of it centers around salaries you can kind of look at",
    "start": "116340",
    "end": "121409"
  },
  {
    "text": "where am i where do I work what do I make what am i using and what's the industry standard so at the very least",
    "start": "121409",
    "end": "128160"
  },
  {
    "text": "if you'll show the URL in a slider so if you keep this handy it's a good",
    "start": "128160",
    "end": "133890"
  },
  {
    "text": "- kinda at the end of the year gage where you are you can even answer I answered it last year was super fun we're gonna talk about consulate and var",
    "start": "133890",
    "end": "141210"
  },
  {
    "text": "and then my opinion right everybody's got one right and arrows and default",
    "start": "141210",
    "end": "148800"
  },
  {
    "text": "arguments template strings destructuring spread and rest operator a little bit on",
    "start": "148800",
    "end": "155310"
  },
  {
    "text": "promises and then a think and it wait keywords in my opinion these are the core functions of x6 that'll really",
    "start": "155310",
    "end": "162540"
  },
  {
    "text": "bring your code up to beautiful clean modern standards so most likely you're already using some of these but",
    "start": "162540",
    "end": "168720"
  },
  {
    "text": "hopefully you'll come away from this and expert in all of them alright",
    "start": "168720",
    "end": "173880"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "what is ECMO six JavaScript ECMO script yes ECM AI it's kind of goofy there's",
    "start": "173880",
    "end": "182910"
  },
  {
    "text": "not a really good way to pronounce it is a trademarked scripting language spec this came I liked this definition this",
    "start": "182910",
    "end": "189600"
  },
  {
    "text": "came from Wikipedia that comes from ACMA International and it gives someone you",
    "start": "189600",
    "end": "195390"
  },
  {
    "text": "have a standard you get a little number for it and here's what we've got this was created to standardize JavaScript",
    "start": "195390",
    "end": "204799"
  },
  {
    "text": "Ekman script is also it's not just JavaScript but 99% of all languages",
    "start": "204799",
    "end": "211500"
  },
  {
    "text": "which use which implements ACMA script is JavaScript there's also J script which was a really",
    "start": "211500",
    "end": "217019"
  },
  {
    "text": "weird I think that was kind of a peripheral the dotnet I don't remember and Adobe ActionScript I don't actually",
    "start": "217019",
    "end": "223860"
  },
  {
    "text": "believe people still use this but that does not mean the code does not exist because just like you know ASP pages in",
    "start": "223860",
    "end": "231989"
  },
  {
    "text": "Visual Basic just because it's not current doesn't mean you're not gonna find it at work so if you ever bump into",
    "start": "231989",
    "end": "237390"
  },
  {
    "text": "this that means you're you must be working on some super front-end stuff this ActionScript technically is Ekman",
    "start": "237390",
    "end": "244799"
  },
  {
    "text": "script Eckman International was started by Brandon Ike and that probably has to",
    "start": "244799",
    "end": "250950"
  },
  {
    "text": "do with the name there there's probably some correlation between the names and you know Brandon Ike was the person who",
    "start": "250950",
    "end": "259019"
  },
  {
    "text": "wrote JavaScript there were a few people involved in it but he was a key player at the time this",
    "start": "259019",
    "end": "266680"
  },
  {
    "text": "was Netscape which eventually morphed into my favorite company and I wish I",
    "start": "266680",
    "end": "273220"
  },
  {
    "text": "could work there but I don't think that's ever going to happen Mozilla which is the people who publish Firefox",
    "start": "273220",
    "end": "278740"
  },
  {
    "text": "I love Firefox I don't know it's kind of dorky but I think it's fun I also like there when I need to use data sheets I",
    "start": "278740",
    "end": "285070"
  },
  {
    "text": "like mozilla.org Eknath script six is this here I liked this definite I like",
    "start": "285070",
    "end": "293169"
  },
  {
    "text": "this definition I took this from github so that's why I put it on here Eknath script six is Eckman script 2015",
    "start": "293169",
    "end": "301720"
  },
  {
    "text": "which is kind of weird but that's just a number there on this is the latest official version of the standard there's",
    "start": "301720",
    "end": "308979"
  },
  {
    "text": "more bleeding edge features but these are the official features that we're going to focus on es5 is significant",
    "start": "308979",
    "end": "317620"
  },
  {
    "text": "updates to the language and the first update to the language since es5 was standardized way back in 2009",
    "start": "317620",
    "end": "323770"
  },
  {
    "text": "think about what web projects you are working on in 2009 so it's a it's about",
    "start": "323770",
    "end": "329410"
  },
  {
    "text": "a six year jump there in functionality so this is kind of the next stair up",
    "start": "329410",
    "end": "335340"
  },
  {
    "text": "implementation of these features and major JavaScript engines is underway now this basically means that even in good",
    "start": "335340",
    "end": "342700"
  },
  {
    "text": "old ie all of this functionality is supported in all modern browsers here's",
    "start": "342700",
    "end": "350080"
  },
  {
    "text": "a survey that the state of je is calm I think this is really interesting and if nothing else to take away keep this in",
    "start": "350080",
    "end": "357520"
  },
  {
    "text": "mind for the end of the year I think this is a really great way to gauge where are you is it because the",
    "start": "357520",
    "end": "362590"
  },
  {
    "text": "JavaScript world changes so frequently this is a great way to gauge where are you as a developer what are you working",
    "start": "362590",
    "end": "368710"
  },
  {
    "text": "on what are you making where do you live what kinds of projects are you building and where does that align to the",
    "start": "368710",
    "end": "375310"
  },
  {
    "text": "industry so this is a super fun thing that I forget who publishes this but it's kind of its own stand along thing",
    "start": "375310",
    "end": "381580"
  },
  {
    "text": "and the website is really nice too so what do we know they talked to 20,000",
    "start": "381580",
    "end": "387430"
  },
  {
    "text": "developers and we talked about topics ranging from front-end frameworks to",
    "start": "387430",
    "end": "392950"
  },
  {
    "text": "testing libraries and salary and everything in between so quick shameless plug by",
    "start": "392950",
    "end": "400180"
  },
  {
    "text": "for sighted JavaScript developers worldwide our women yes the most work",
    "start": "400180",
    "end": "405280"
  },
  {
    "text": "we're gonna get we're gonna change that we're working on that but um that number as it stands the most popular JavaScript",
    "start": "405280",
    "end": "412090"
  },
  {
    "text": "flavor and this was my when I was going through the survey this is my motivation for putting this talk together is eggman",
    "start": "412090",
    "end": "418509"
  },
  {
    "text": "script 686 percent of all our JavaScript developers use it and this is 13% more",
    "start": "418509",
    "end": "425650"
  },
  {
    "text": "from the last time we talked about it on the survey in 2016 and curiously this is",
    "start": "425650",
    "end": "431470"
  },
  {
    "text": "important stuff the average salary of a necklace script six developer is about that of typescript I will say that a lot",
    "start": "431470",
    "end": "438849"
  },
  {
    "text": "of these features if not all are available in typescript and then it it",
    "start": "438849",
    "end": "444030"
  },
  {
    "text": "properly builds down you know that we well know the relationship with javascript in typescript but but this is",
    "start": "444030",
    "end": "449979"
  },
  {
    "text": "this is interchangeable here so eggman script javascript like a node person is",
    "start": "449979",
    "end": "455259"
  },
  {
    "text": "nearly identical two types a type Script developer closure script developers are the folks that I found statistically",
    "start": "455259",
    "end": "462610"
  },
  {
    "text": "make the most money so I think next year when I come back I'll be talking about that the most likely feature is elegant",
    "start": "462610",
    "end": "470919"
  },
  {
    "text": "programming style and patterns but people also think it's buggy and I don't",
    "start": "470919",
    "end": "476169"
  },
  {
    "text": "agree with this but again I love JavaScript so I think I'm a little",
    "start": "476169",
    "end": "481690"
  },
  {
    "text": "biased but check that survey out ok jumping into the content VAR Const and",
    "start": "481690",
    "end": "490330"
  },
  {
    "text": "let so you're most likely using Letten",
    "start": "490330",
    "end": "495849"
  },
  {
    "text": "continuities I think that's pretty much become the standard but let's talk a little bit about why they're different",
    "start": "495849",
    "end": "502030"
  },
  {
    "text": "and what are the different things that do remember that when we create a variable with keyword var we define a",
    "start": "502030",
    "end": "509830"
  },
  {
    "text": "function scoped variable so this essentially var is global the let's and",
    "start": "509830",
    "end": "517390"
  },
  {
    "text": "Const keywords on the other hand declare a variable inside of black scope what",
    "start": "517390",
    "end": "523570"
  },
  {
    "text": "does that mean inside of braces here or locally inside of a function remember",
    "start": "523570",
    "end": "528579"
  },
  {
    "text": "that when you declare a function using the function keyword that creates its own isolated scope right there but even if",
    "start": "528579",
    "end": "535500"
  },
  {
    "text": "we're not inside of a function inside of braces also this is black scope and outside of it like we have up here is",
    "start": "535500",
    "end": "541920"
  },
  {
    "text": "global scope the value of variables declared with Const cannot be or",
    "start": "541920",
    "end": "549210"
  },
  {
    "text": "assigned reassigned and we'll talk about this more in a second I think Const is a little tricky here",
    "start": "549210",
    "end": "554820"
  },
  {
    "text": "it's a lot different than our favorite strongly typed languages Const basically",
    "start": "554820",
    "end": "560400"
  },
  {
    "text": "just declares an immutable binding I'll show some examples of that you actually can change if you've got an object you",
    "start": "560400",
    "end": "566130"
  },
  {
    "text": "could change its properties if it's a constant which I thought was really strange but it's kind of fun to talk",
    "start": "566130",
    "end": "571350"
  },
  {
    "text": "about so two examples outside in the global scope here var x equals 10 right",
    "start": "571350",
    "end": "579180"
  },
  {
    "text": "we use var so it's always 10 outside of here inside of my black X in here we're",
    "start": "579180",
    "end": "586410"
  },
  {
    "text": "giving a value to of X so inside of my block X is 2 outside of the black it's",
    "start": "586410",
    "end": "592380"
  },
  {
    "text": "back at 10 same thing with here outside of the black globally X is 10 inside",
    "start": "592380",
    "end": "599550"
  },
  {
    "text": "let's do a Const this time and Const is also black scoped so inside of my black",
    "start": "599550",
    "end": "604830"
  },
  {
    "text": "X is 2 and outside it's back at 10 more",
    "start": "604830",
    "end": "611220"
  },
  {
    "start": "611000",
    "end": "611000"
  },
  {
    "text": "on the con security I thought when I started unpacking this is something I learned when I was working on this",
    "start": "611220",
    "end": "618150"
  },
  {
    "text": "presentation in January I was surprised that objects declared with Const are not",
    "start": "618150",
    "end": "623940"
  },
  {
    "text": "immutable only the values are counts Const creates immutable bindings so when",
    "start": "623940",
    "end": "630210"
  },
  {
    "text": "you use the Const keyword you're declaring a contract that you're not going to change the binding this is",
    "start": "630210",
    "end": "637290"
  },
  {
    "text": "totally different than anything you've seen in c-sharp for example and anything strongly typed things operate",
    "start": "637290",
    "end": "643470"
  },
  {
    "text": "differently but Const is just an immutable binding why does that matter that comes into play when you're",
    "start": "643470",
    "end": "649560"
  },
  {
    "text": "declaring objects constants cats does not define a constant value",
    "start": "649560",
    "end": "656370"
  },
  {
    "text": "it's a ref constant reference to a value this was a nice definition you could add",
    "start": "656370",
    "end": "662880"
  },
  {
    "text": "properties to objects declared with Const but you cannot reassign values the only",
    "start": "662880",
    "end": "669350"
  },
  {
    "text": "difference between Const and let is that Const makes a contract that no rebinding",
    "start": "669350",
    "end": "675680"
  },
  {
    "text": "x' will happen and in a second we'll look at some objects declared with Const and you'll understand what I'm saying",
    "start": "675680",
    "end": "681610"
  },
  {
    "text": "Const variables like our strongly typed language cousins cons variables on the",
    "start": "681610",
    "end": "687440"
  },
  {
    "text": "other hand must be given a value when they are assigned you cannot declare a constant constable and then not give it",
    "start": "687440",
    "end": "695149"
  },
  {
    "text": "a value you have to do that all at once okay remember cons does not define a",
    "start": "695149",
    "end": "702769"
  },
  {
    "text": "constant value it's just a constant reference to a value so what's going on here you I think we see this car example",
    "start": "702769",
    "end": "710120"
  },
  {
    "text": "a lot so let's create an object car and use the Const keyword and here we've got",
    "start": "710120",
    "end": "716209"
  },
  {
    "text": "three properties whatever Fiat 500 white we could change this guy's color we can",
    "start": "716209",
    "end": "723380"
  },
  {
    "text": "also check give it a property mrs. Johnson known as the Fiat but you cannot",
    "start": "723380",
    "end": "729730"
  },
  {
    "text": "reassign a constant object let's say jumping back into the code we're gonna",
    "start": "729730",
    "end": "734779"
  },
  {
    "text": "declare our very variable car Fiat 500 white notice this would error out",
    "start": "734779",
    "end": "742490"
  },
  {
    "text": "because here we're trying to reference a new object literal statement here we're",
    "start": "742490",
    "end": "748850"
  },
  {
    "text": "trying to weave when we declare a variable we're defining it with an object literal statement up here and",
    "start": "748850",
    "end": "755420"
  },
  {
    "text": "then we would get an error if we tried to bind this variable to a new object literal statement down here but",
    "start": "755420",
    "end": "762110"
  },
  {
    "text": "interestingly like we saw over here you can it's perfectly legal to go into each",
    "start": "762110",
    "end": "767209"
  },
  {
    "text": "property and assign it a new value this is the big difference in a nutshell",
    "start": "767209",
    "end": "772250"
  },
  {
    "text": "between strongly typed constants and constants in JavaScript before we move",
    "start": "772250",
    "end": "784970"
  },
  {
    "text": "on to arrow functions I promised my opinion I every I think the general thinking is in this if you use any kind",
    "start": "784970",
    "end": "791509"
  },
  {
    "text": "of linting in your code the general thinking is to stick with Const and let",
    "start": "791509",
    "end": "798139"
  },
  {
    "text": "an preferably and anytime you can stick with cons to always do can't and then use let's to",
    "start": "798139",
    "end": "804799"
  },
  {
    "text": "keep the scope of your variables as small as possible I tend to disagree",
    "start": "804799",
    "end": "810470"
  },
  {
    "text": "with that I think if you're willing to kind of put the brainpower into using some global",
    "start": "810470",
    "end": "816139"
  },
  {
    "text": "variables where appropriate I think it simplifies your code because when I code I like to favor less variables doing",
    "start": "816139",
    "end": "824659"
  },
  {
    "text": "more than than variables all over the place unnecessarily but that's just my lowly opinion you'll kind of if you read",
    "start": "824659",
    "end": "831499"
  },
  {
    "text": "into it I'm sure you'll develop yours all right arrow functions now I'm raise your hand",
    "start": "831499",
    "end": "839299"
  },
  {
    "text": "if you use these just so I know who I'm talking to okay a lot of us have these are super neat once you get in the habit of using",
    "start": "839299",
    "end": "846289"
  },
  {
    "text": "these you'll never want to go back arrow functions are an abbreviated syntax for anonymous function declaration using",
    "start": "846289",
    "end": "854179"
  },
  {
    "text": "this is called the fat arrow it's an equal sign and then a greater than instead of the function keyword now this",
    "start": "854179",
    "end": "861470"
  },
  {
    "text": "fat arrow and the function keyword they both declare functions but they do not",
    "start": "861470",
    "end": "866809"
  },
  {
    "text": "do the same thing the big difference is functions declared with the function",
    "start": "866809",
    "end": "873769"
  },
  {
    "text": "keyword when we use the function keyword we're declaring a new isolated scope",
    "start": "873769",
    "end": "879319"
  },
  {
    "text": "inside of that function where when we declare a function using a fat arrow",
    "start": "879319",
    "end": "884509"
  },
  {
    "text": "here we're inheriting the scope of the surrounding code and that's a big difference",
    "start": "884509",
    "end": "890269"
  },
  {
    "text": "you'll see when you're doing callbacks and whatnot any sort of array operations",
    "start": "890269",
    "end": "895779"
  },
  {
    "text": "where you want to map and add a function that there's a big difference and I think the arrow functions simplifies",
    "start": "895779",
    "end": "901309"
  },
  {
    "text": "things a lot but you'll see why that's useful but they both declare a function but they do things they're not the same",
    "start": "901309",
    "end": "908359"
  },
  {
    "text": "thing so remember this this is our vanilla old function times two and we've",
    "start": "908359",
    "end": "914539"
  },
  {
    "text": "got our parameters and then we've got our block statement we always have the return if we're going to return a value and then we're going to call it an arrow",
    "start": "914539",
    "end": "923599"
  },
  {
    "text": "function here can simplify all on one line here we're declaring a variable and",
    "start": "923599",
    "end": "930919"
  },
  {
    "text": "assigning it this misfunction here well it's a named function after the statement but we're",
    "start": "930919",
    "end": "936320"
  },
  {
    "text": "declaring on the right side an autonomous function with parameter params and then this arrow if you've not",
    "start": "936320",
    "end": "942199"
  },
  {
    "text": "seen this before this reads as in - so the way you would read this in English params into params x - and then the fat",
    "start": "942199",
    "end": "951829"
  },
  {
    "text": "arrow here what this does is creates an anonymous function there's the function",
    "start": "951829",
    "end": "956930"
  },
  {
    "text": "statement there and again we've given it a name so it's now a named function and",
    "start": "956930",
    "end": "962029"
  },
  {
    "text": "just like above we can evaluate x - I me and before and we get the same results",
    "start": "962029",
    "end": "968029"
  },
  {
    "text": "so it's accomplished it's the same thing but the way it handles scope and there's",
    "start": "968029",
    "end": "974360"
  },
  {
    "text": "my new show around the return statement and whatnot they're not the same but I think you'll",
    "start": "974360",
    "end": "980209"
  },
  {
    "text": "love them let's see some of them in action oh yeah one more thing I really love the way arrow functions handle",
    "start": "980209",
    "end": "986300"
  },
  {
    "text": "parameters these are all valid ways of passing parameters to your arrow function this is the one you'll see most",
    "start": "986300",
    "end": "992510"
  },
  {
    "text": "of the time and I think when you're first getting used to working with them this can throw you off a little bit but",
    "start": "992510",
    "end": "997880"
  },
  {
    "text": "just think of it as this and then eventually you'll get used to reading it this way so we can have multiple",
    "start": "997880",
    "end": "1004149"
  },
  {
    "text": "parameters we can have one parameter we can have no parameters and that's fine and if we've got at least one parameter",
    "start": "1004149",
    "end": "1010089"
  },
  {
    "text": "we don't have to have parenthesis what's not valid in this case is if we had no",
    "start": "1010089",
    "end": "1016839"
  },
  {
    "text": "parameters and then we omitted the parentheses here that would not compile",
    "start": "1016839",
    "end": "1022980"
  },
  {
    "text": "okay arrow functions like we said arrow functions have implicit return values if",
    "start": "1024660",
    "end": "1032650"
  },
  {
    "text": "the black statement is not used so what does this mean if you have all of your",
    "start": "1032650",
    "end": "1038589"
  },
  {
    "text": "functionality on one line just a function expression like here we have an",
    "start": "1038589",
    "end": "1043990"
  },
  {
    "text": "implicit return value where we do not have to use the return keyword I think this really simplifies your code it",
    "start": "1043990",
    "end": "1050740"
  },
  {
    "text": "makes it really elegant and you could do some powerful things here you can also",
    "start": "1050740",
    "end": "1056080"
  },
  {
    "text": "use an arrow function to declare a function statement inside of a block",
    "start": "1056080",
    "end": "1061929"
  },
  {
    "text": "like this we're gonna call this an expression in this inside of a block is statement you can also use a fat arrow",
    "start": "1061929",
    "end": "1068650"
  },
  {
    "text": "to declare a function statement but notice that we have to have a return value in each case that's the big",
    "start": "1068650",
    "end": "1075040"
  },
  {
    "text": "difference",
    "start": "1075040",
    "end": "1077190"
  },
  {
    "start": "1081000",
    "end": "1081000"
  },
  {
    "text": "arrow functions simplify scope we talked a little bit about this a few seconds ago and standard function expressions",
    "start": "1086610",
    "end": "1094530"
  },
  {
    "text": "our this keyword is bound to the context in which it's called",
    "start": "1094530",
    "end": "1100920"
  },
  {
    "text": "with arrow functions are this keyword is lexically bound so it's bound to the",
    "start": "1100920",
    "end": "1107680"
  },
  {
    "text": "scope containing the code in which we're using it it's inherits the context from",
    "start": "1107680",
    "end": "1113590"
  },
  {
    "text": "the code that contains it arrow functions do not rebind are this keyword",
    "start": "1113590",
    "end": "1121240"
  },
  {
    "text": "when we're used inside of another function and right here they attribute I'm pointing to right",
    "start": "1121240",
    "end": "1126730"
  },
  {
    "text": "here without using magic for this our attribute here of arrow functions are property right here this is the most",
    "start": "1126730",
    "end": "1132550"
  },
  {
    "text": "powerful thing arrow functions do not rebind are this pointer when we're used",
    "start": "1132550",
    "end": "1138370"
  },
  {
    "text": "inside of another function we'll see an example on the next slide arrow functions inside of other functions",
    "start": "1138370",
    "end": "1145120"
  },
  {
    "text": "inherits the value of this so like I said you have containing code and then",
    "start": "1145120",
    "end": "1150760"
  },
  {
    "text": "inside of that's an arrow function code we'll see that in a second and you'll see this refers to the scope of the",
    "start": "1150760",
    "end": "1157180"
  },
  {
    "text": "containing code a little bit of a catch recall that orphaned this pointers",
    "start": "1157180",
    "end": "1162940"
  },
  {
    "text": "default to the window scope so for debugging purposes if your average",
    "start": "1162940",
    "end": "1168250"
  },
  {
    "text": "debugging and then you see you're checking the value of a variable and then you see any sort of reference to",
    "start": "1168250",
    "end": "1174910"
  },
  {
    "text": "the window scope that means you've got your scope wrong and it's northen this point or just gotcha arrow functions",
    "start": "1174910",
    "end": "1181510"
  },
  {
    "text": "reduce the need for dot bind this equals that pointers etc as we'll see in a",
    "start": "1181510",
    "end": "1188410"
  },
  {
    "text": "second here so they're super powerful and they greatly simplify the way that",
    "start": "1188410",
    "end": "1194260"
  },
  {
    "text": "we handle scope okay a standard function expression",
    "start": "1194260",
    "end": "1202260"
  },
  {
    "text": "would need help with our inner this so we've got an array nums and we're going",
    "start": "1202260",
    "end": "1209640"
  },
  {
    "text": "to iterate for each and here we're using the function keyword to declare a function object in here once we use the",
    "start": "1209640",
    "end": "1217830"
  },
  {
    "text": "function keyword remember that we've essentially declared a new scope that's",
    "start": "1217830",
    "end": "1224430"
  },
  {
    "text": "how if these work we use in memory in JavaScript use if he's an the function keyword to declare isolated scopes and",
    "start": "1224430",
    "end": "1232770"
  },
  {
    "text": "private values and if these are great things and I would love to talk about them for an hour but I'm not gonna do that here but remember that once we",
    "start": "1232770",
    "end": "1240300"
  },
  {
    "text": "declare a function block with the function keyword we're essentially creating an isolated scope inside of the",
    "start": "1240300",
    "end": "1247920"
  },
  {
    "text": "block here and our this keyword in this case I'm showing points to the scope",
    "start": "1247920",
    "end": "1254280"
  },
  {
    "text": "inside of the block and I just realized I'm missing a Parenti R sorry for the",
    "start": "1254280",
    "end": "1261780"
  },
  {
    "text": "typo so what we've got right now going",
    "start": "1261780",
    "end": "1267720"
  },
  {
    "text": "back to the same scope okay our function statement and then we've got a dot bind",
    "start": "1267720",
    "end": "1273060"
  },
  {
    "text": "this is the old-school way of doing it where we would have to bind our scope",
    "start": "1273060",
    "end": "1278400"
  },
  {
    "text": "inside of here to what's outside in order to match up our this pointers in",
    "start": "1278400",
    "end": "1283650"
  },
  {
    "text": "order to make the scope pointer inside of here match the scope pointer outside",
    "start": "1283650",
    "end": "1288870"
  },
  {
    "text": "and the lexically contain code we have to bind it this is the old-school way of doing it because I'm using the function",
    "start": "1288870",
    "end": "1294720"
  },
  {
    "text": "pointer down below the lexically bound",
    "start": "1294720",
    "end": "1300240"
  },
  {
    "text": "this pointer in an arrow function is going to inherit from its container this",
    "start": "1300240",
    "end": "1306030"
  },
  {
    "text": "is way simpler in my opinion notice we're using the fat arrow the difference here is the fat arrow instead of the",
    "start": "1306030",
    "end": "1312150"
  },
  {
    "text": "function keyword so because we're declaring our function block here with",
    "start": "1312150",
    "end": "1317490"
  },
  {
    "text": "the fat arrow and not the function keyword our this pointer inherits from",
    "start": "1317490",
    "end": "1322830"
  },
  {
    "text": "the containing scope so you do not have to bind it there's no this equals that no none of that you don't have to rebind",
    "start": "1322830",
    "end": "1330390"
  },
  {
    "text": "your scope pointer and in a nutshell here we have the most",
    "start": "1330390",
    "end": "1335490"
  },
  {
    "text": "powerful feature of arrow functions I think any time you're doing a race call by handling anything like that you",
    "start": "1335490",
    "end": "1340950"
  },
  {
    "text": "consider take a look at your scope and consider refactoring to using fat arrows because it makes your code a lot cleaner",
    "start": "1340950",
    "end": "1347400"
  },
  {
    "text": "and a lot easier to use it doesn't ok the caveat opinions right what you're",
    "start": "1347400",
    "end": "1354330"
  },
  {
    "text": "losing out here is the private veil the private variableness of a function",
    "start": "1354330",
    "end": "1362520"
  },
  {
    "text": "contained with a function declared with the function keyword you're losing that out and things tend to be less private",
    "start": "1362520",
    "end": "1369120"
  },
  {
    "text": "more public shared scoped so it's it's kind of a paradigm shift but consider",
    "start": "1369120",
    "end": "1374670"
  },
  {
    "text": "this for a raise in callbacks it's super elegant I think you'll like it",
    "start": "1374670",
    "end": "1380540"
  },
  {
    "start": "1381000",
    "end": "1381000"
  },
  {
    "text": "ok default parameters ok this was super",
    "start": "1381500",
    "end": "1386550"
  },
  {
    "text": "neat JavaScript now lets us specify a default parameter when we define our",
    "start": "1386550",
    "end": "1392400"
  },
  {
    "text": "functions so I've got the pointer on it right here so we're declaring a multiply",
    "start": "1392400",
    "end": "1397950"
  },
  {
    "text": "function and when it's got two parameters in the function signature here but we're giving a default value to",
    "start": "1397950",
    "end": "1405150"
  },
  {
    "text": "the second one so you could guess what happens anytime you want to call multiply if you do not specify a value",
    "start": "1405150",
    "end": "1411060"
  },
  {
    "text": "for B that's okay the code is going to pick up what you were trying to say so",
    "start": "1411060",
    "end": "1416700"
  },
  {
    "text": "the meat of our function we're returning x so then when we call multiply we're",
    "start": "1416700",
    "end": "1422520"
  },
  {
    "text": "only giving it a value for a and it knows what's going on even better than that I this is really neat let's declare",
    "start": "1422520",
    "end": "1429150"
  },
  {
    "text": "a function and remember you could pass functions as arguments because Y",
    "start": "1429150",
    "end": "1434820"
  },
  {
    "text": "functions are objects we're giving it a parameter with the default value and",
    "start": "1434820",
    "end": "1442020"
  },
  {
    "text": "we're also giving it a parameter with a function as a default value so at runtime when we call this we're just",
    "start": "1442020",
    "end": "1449070"
  },
  {
    "text": "going to return the two so when we call down here we give it nothing what happens call our function foo we're",
    "start": "1449070",
    "end": "1454950"
  },
  {
    "text": "going to go back to the default parameters because we did not specify we're gonna pass one and then we're going to evaluate multiply on the value",
    "start": "1454950",
    "end": "1463380"
  },
  {
    "text": "for one which is no which is one in this case and then we go back up here",
    "start": "1463380",
    "end": "1468779"
  },
  {
    "text": "note how the default value persists so it's gonna know exactly we've given it",
    "start": "1468779",
    "end": "1474779"
  },
  {
    "text": "nothing and it's gonna know exactly what we're talking about we're gonna get one two um",
    "start": "1474779",
    "end": "1480379"
  },
  {
    "text": "default values are optional as you see here we can give it a value of six and it's still gonna know what to do with it",
    "start": "1480379",
    "end": "1486779"
  },
  {
    "text": "so that's a great way to kind of simplify and clean things up which one I",
    "start": "1486779",
    "end": "1497719"
  },
  {
    "text": "believe so I do believe so where you might have some trouble I don't if",
    "start": "1503419",
    "end": "1509129"
  },
  {
    "text": "you've got like a Nazi winter or something which most of us use that's where you might end up with trouble but",
    "start": "1509129",
    "end": "1514349"
  },
  {
    "text": "I believe this is legal typescript yeah",
    "start": "1514349",
    "end": "1538829"
  },
  {
    "text": "I would expect it to pick the defaults up yeah we do I think what I tend to use",
    "start": "1538829",
    "end": "1546179"
  },
  {
    "text": "is the air B&B winter and whether or not it compiles that thing doesn't care that won't a lot of stuff doesn't fly with",
    "start": "1546179",
    "end": "1554159"
  },
  {
    "text": "that which technically compiles but that's kind of a runaround answer for",
    "start": "1554159",
    "end": "1560729"
  },
  {
    "text": "you is it difference in your winter but that's a really good point with the default thank you for that and that was a good question thank you it's just your",
    "start": "1560729",
    "end": "1570959"
  },
  {
    "text": "linting process there's a couple different options out there and I like to use the air B&B one but it's very",
    "start": "1570959",
    "end": "1576509"
  },
  {
    "text": "strict that's all I'm saying obviously",
    "start": "1576509",
    "end": "1582779"
  },
  {
    "text": "after you lint you're gonna have to build okay template strings raise your",
    "start": "1582779",
    "end": "1589049"
  },
  {
    "start": "1586000",
    "end": "1586000"
  },
  {
    "text": "hand if you're a react developer you know I love react I have such a crush on",
    "start": "1589049",
    "end": "1595319"
  },
  {
    "text": "react I think it's the coolest thing in the world but I actually been simply because of I need a",
    "start": "1595319",
    "end": "1601800"
  },
  {
    "text": "job and I need to pay my bills I do a lot of angular because those are the",
    "start": "1601800",
    "end": "1606840"
  },
  {
    "text": "contracts we tend to sell where I work but if you are a react developer I know",
    "start": "1606840",
    "end": "1612060"
  },
  {
    "text": "you have seen template strings and all this is is using backticks instead of",
    "start": "1612060",
    "end": "1619530"
  },
  {
    "text": "apostrophes from afar it looks the same it might have thrown you off when you first seen it use backticks instead of",
    "start": "1619530",
    "end": "1625860"
  },
  {
    "text": "apostrophes to open and close your string template strings can span multiple lines this is very important",
    "start": "1625860",
    "end": "1633030"
  },
  {
    "text": "when you're working with any kind of JSX to comprehend your HTML that you're",
    "start": "1633030",
    "end": "1638910"
  },
  {
    "text": "writing template strings can span multiple lines and what we've got is some interpolation brackets here I know",
    "start": "1638910",
    "end": "1645390"
  },
  {
    "text": "we've seen this with MVC razor we've seen this with angular and you see it in react",
    "start": "1645390",
    "end": "1650700"
  },
  {
    "text": "I know you've seen interpolation what that does as this tells the browser as",
    "start": "1650700",
    "end": "1656670"
  },
  {
    "text": "it's parsing your string look in your JavaScript code and evaluate what's inside here you can even use the",
    "start": "1656670",
    "end": "1664830"
  },
  {
    "text": "interpolation binding to call functions it's very neat I've got an example in a second okay I'm just playing with",
    "start": "1664830",
    "end": "1676290"
  },
  {
    "text": "template strings we've seen this plain old hello world we're gonna blog hello Jenny we've got two variables equals",
    "start": "1676290",
    "end": "1684810"
  },
  {
    "text": "five B equals five and then let's log out the statement JavaScript was written in and here we've got interpolation",
    "start": "1684810",
    "end": "1692550"
  },
  {
    "text": "brackets so the browser knows don't print this this isn't out of strength our interpolation our tribulation braces",
    "start": "1692550",
    "end": "1700020"
  },
  {
    "text": "tell the browser what's inside of this function should be evaluated as JavaScript and your browser will know go",
    "start": "1700020",
    "end": "1707520"
  },
  {
    "text": "to yours memory stack in JavaScript grab these two values add them together and then this is what we get out I'm not",
    "start": "1707520",
    "end": "1713970"
  },
  {
    "text": "actually sure that that's true where JavaScript was written in ten days it might be like a developer urban legend",
    "start": "1713970",
    "end": "1720000"
  },
  {
    "text": "but I know the story of JavaScript is that it was kind of a hurry up and get this done but anyway here's let's",
    "start": "1720000",
    "end": "1727890"
  },
  {
    "text": "declare a function using our function keyword so I need my return statement if I just wanted to name this",
    "start": "1727890",
    "end": "1735630"
  },
  {
    "text": "guy and use the fattier already let's let's just use the old school function",
    "start": "1735630",
    "end": "1741150"
  },
  {
    "text": "and notice I need the return statement after we've talked about fat arrows this",
    "start": "1741150",
    "end": "1746160"
  },
  {
    "text": "seems kind of redundant doesn't it the return but anyway well we'll do it old school for now this is taken from my",
    "start": "1746160",
    "end": "1752790"
  },
  {
    "text": "son's favorite book I've got a string",
    "start": "1752790",
    "end": "1757830"
  },
  {
    "text": "and I purposely used double quotes to delineate my string here am i using all",
    "start": "1757830",
    "end": "1764610"
  },
  {
    "text": "yeah start and and this is just a string literal so all we're doing inside of my",
    "start": "1764610",
    "end": "1769830"
  },
  {
    "text": "function is returning a string little or literal so let's log out and notice I",
    "start": "1769830",
    "end": "1775440"
  },
  {
    "text": "did this to demonstrate this is also another great way to use nested apostrophes you don't have to do with",
    "start": "1775440",
    "end": "1781860"
  },
  {
    "text": "any escaping or anything like that this is just another option at the very least if you want to deal with your strengths",
    "start": "1781860",
    "end": "1787620"
  },
  {
    "text": "we've got a back tic a string literal and then I've got an apostrophe and then",
    "start": "1787620",
    "end": "1795750"
  },
  {
    "text": "inside of there we're going to evaluate my function so what logs out they told B",
    "start": "1795750",
    "end": "1802080"
  },
  {
    "text": "be told see um do you see this is the important part I've got my apostrophe",
    "start": "1802080",
    "end": "1807960"
  },
  {
    "text": "here that still gets logged out and it's not considered part of the delineators so at the very least this is in addition",
    "start": "1807960",
    "end": "1815550"
  },
  {
    "text": "to spanning multiple lines and using the template this is another tool you have if you have to deal with strings and you",
    "start": "1815550",
    "end": "1820950"
  },
  {
    "text": "don't want to deal with any sort of complicating complicated escaping okay I",
    "start": "1820950",
    "end": "1830550"
  },
  {
    "text": "thought destructuring I think this is my favorite one I know you're very concerned about what I love about it",
    "start": "1830550",
    "end": "1836850"
  },
  {
    "text": "buddy this is JavaScript we all love it get past it D structuring this is very",
    "start": "1836850",
    "end": "1841920"
  },
  {
    "text": "useful you can now use braces on the left side of an expression to extract",
    "start": "1841920",
    "end": "1848340"
  },
  {
    "text": "data from arrays objects map sets etc to extract data from any sort of enumerated",
    "start": "1848340",
    "end": "1855360"
  },
  {
    "text": "set you could use braces on the left side it's very useful check out these examples this is essentially in an",
    "start": "1855360",
    "end": "1862860"
  },
  {
    "text": "inverted object declaration this is one that was I hadn't really used that",
    "start": "1862860",
    "end": "1868720"
  },
  {
    "text": "much of this until about a year ago and I this is one I find quite useful I use",
    "start": "1868720",
    "end": "1874060"
  },
  {
    "text": "every day so let's declare an object an engineer is Jen Estrada and she lives in",
    "start": "1874060",
    "end": "1879580"
  },
  {
    "text": "Chicago this is valid here it kind of looks like we took our statement and",
    "start": "1879580",
    "end": "1884590"
  },
  {
    "text": "flipped it what we used to do back in Atma script five this is the old-school",
    "start": "1884590",
    "end": "1889780"
  },
  {
    "text": "way of doing things where we declare two variables first and last and then we'll",
    "start": "1889780",
    "end": "1894880"
  },
  {
    "text": "give it engineer da first engineer doubtless and explicitly bind our properties that's the old way of doing",
    "start": "1894880",
    "end": "1900310"
  },
  {
    "text": "things but then if you look here on the right side this is perfectly valid up",
    "start": "1900310",
    "end": "1905440"
  },
  {
    "text": "here to create art define our object inside of the two braces and then assign",
    "start": "1905440",
    "end": "1912130"
  },
  {
    "text": "it to what we're destructuring on the right and then these first and last variables exist with values here so this",
    "start": "1912130",
    "end": "1919840"
  },
  {
    "text": "takes a little bit of getting used to but I think this is very concise syntax",
    "start": "1919840",
    "end": "1925090"
  },
  {
    "text": "for dealing with this sort of situation where we've got an object and we need to extract properties because if you're",
    "start": "1925090",
    "end": "1931720"
  },
  {
    "text": "coding with JavaScript you're using JSON objects and you're using this is pretty much like 25% of all your code so I",
    "start": "1931720",
    "end": "1939880"
  },
  {
    "text": "really love this syntax I think you'll find it cleaning up your code quite well",
    "start": "1939880",
    "end": "1945840"
  },
  {
    "start": "1946000",
    "end": "1946000"
  },
  {
    "text": "destructuring object properties now things do get destructuring works",
    "start": "1946710",
    "end": "1952150"
  },
  {
    "text": "similar to a shallow copy where literals are copied and objects are referenced",
    "start": "1952150",
    "end": "1958270"
  },
  {
    "text": "it's so basically it's not perfect nesting of object and properties in",
    "start": "1958270",
    "end": "1963640"
  },
  {
    "text": "general will follow syntax but it's not perfect anytime there's some ambiguity where the browser compiler what's not in",
    "start": "1963640",
    "end": "1972370"
  },
  {
    "text": "compiler where the browser interpreter cannot precisely figure out what you're talking about anytime there's an option",
    "start": "1972370",
    "end": "1979030"
  },
  {
    "text": "for ambiguity you're gonna get an error and you'll have to work with default values but I'm that here because we just",
    "start": "1979030",
    "end": "1985600"
  },
  {
    "text": "want to do overview but in general this here the syntax notice I've got name",
    "start": "1985600",
    "end": "1992980"
  },
  {
    "text": "first last and then go in here and I've referencing my object by name and then",
    "start": "1992980",
    "end": "1998890"
  },
  {
    "text": "giving it first and last and I just realized I'm sorry this is a syntax error with my slides pardon me for that",
    "start": "1998890",
    "end": "2004500"
  },
  {
    "text": "but what we're doing in our D structuring statement is we're referencing the object name and then in",
    "start": "2004500",
    "end": "2010890"
  },
  {
    "text": "another level of braces we can go in and get each property by name and our first",
    "start": "2010890",
    "end": "2017280"
  },
  {
    "text": "and last still exists down here when we log them out",
    "start": "2017280",
    "end": "2021770"
  },
  {
    "text": "we need to reference the object level in our destructuring statement basically",
    "start": "2023480",
    "end": "2030169"
  },
  {
    "text": "okay this is my favorite and this is my joke based on when I first saw this I",
    "start": "2030260",
    "end": "2037290"
  },
  {
    "start": "2031000",
    "end": "2031000"
  },
  {
    "text": "thought of a spread gun in Cointreau so I don't know in my head it was funny so based on the ellipse operator based on",
    "start": "2037290",
    "end": "2047250"
  },
  {
    "text": "context our ellipse operator is interpreted as either the spread operator or the rest parameter this is",
    "start": "2047250",
    "end": "2053669"
  },
  {
    "text": "very useful when you're dealing with lists of objects and erase the rest parameter can taint collects all",
    "start": "2053669",
    "end": "2060540"
  },
  {
    "text": "remaining elements from a function parameter list into an array the spread",
    "start": "2060540",
    "end": "2065639"
  },
  {
    "text": "operator allows our iterables arrays object strings map sets etc to be",
    "start": "2065640",
    "end": "2072740"
  },
  {
    "text": "expanded into single elements and let's see an example of that so based on context the ellipse operator does some",
    "start": "2072740",
    "end": "2080760"
  },
  {
    "text": "very important things with a raise and list of arguments rest parameter case a",
    "start": "2080760",
    "end": "2088230"
  },
  {
    "start": "2086000",
    "end": "2086000"
  },
  {
    "text": "the respirometer collects all remaining arguments from a functions arguments object into an array now the arguments",
    "start": "2088230",
    "end": "2095879"
  },
  {
    "text": "object is weird it's not an array it's an array like object called args which",
    "start": "2095880",
    "end": "2102900"
  },
  {
    "text": "contains a list of all your key value pair name referenced arguments to your",
    "start": "2102900",
    "end": "2108210"
  },
  {
    "text": "function so it's not an array is an array like list but how many times have you taken in a list of arguments and you",
    "start": "2108210",
    "end": "2114390"
  },
  {
    "text": "want to perform an array operation on them map filter reduce etc so you can't",
    "start": "2114390",
    "end": "2121350"
  },
  {
    "text": "do any of these array things but if we put the rest parameter it collects everything in our list of values into an",
    "start": "2121350",
    "end": "2129600"
  },
  {
    "text": "array and then you could go in your code and manipulate as if it were to rate it's very useful",
    "start": "2129600",
    "end": "2134820"
  },
  {
    "text": "it'll clean up the way you deal with a race note though however if you're inside of an arrow fun this only works",
    "start": "2134820",
    "end": "2140640"
  },
  {
    "text": "with a function declared using the old-school syntax with the function",
    "start": "2140640",
    "end": "2145740"
  },
  {
    "text": "keyword because arrow functions do not have an arguments object so if you try to do something like this with an arrow",
    "start": "2145740",
    "end": "2152310"
  },
  {
    "text": "function you're gonna get goofy behavior so don't do that but let's look at some",
    "start": "2152310",
    "end": "2158220"
  },
  {
    "text": "examples okay let's create an ad",
    "start": "2158220",
    "end": "2164760"
  },
  {
    "text": "function using the function keyword here's our rest parameter and again it's",
    "start": "2164760",
    "end": "2169920"
  },
  {
    "text": "the ellipse for both cases but based on context your browser knows that this is",
    "start": "2169920",
    "end": "2177120"
  },
  {
    "text": "the rest parameter it's gonna collect everything into an array called args so",
    "start": "2177120",
    "end": "2183720"
  },
  {
    "text": "here our array operation is totally valid and then you can clean up you can",
    "start": "2183720",
    "end": "2189300"
  },
  {
    "text": "omit the need for any sort of code that loops through your argument values and",
    "start": "2189300",
    "end": "2194790"
  },
  {
    "text": "creates a set or just whatever you you can greatly simplify the way you're dealing with any sort of string of",
    "start": "2194790",
    "end": "2200400"
  },
  {
    "text": "values here all these guys 1 3 15 etc these are valid um",
    "start": "2200400",
    "end": "2206160"
  },
  {
    "text": "note that this guy only makes sense at the end if we had something like this",
    "start": "2206160",
    "end": "2211320"
  },
  {
    "text": "where we had argument a and then a list of arguments and then argument B this",
    "start": "2211320",
    "end": "2216540"
  },
  {
    "text": "doesn't compile correctly just like with any JavaScript function parameters are",
    "start": "2216540",
    "end": "2223980"
  },
  {
    "text": "optional that's true but order matters you can't only specify the second and",
    "start": "2223980",
    "end": "2231930"
  },
  {
    "text": "the third value in your list you can't omit this guy you would the the order is interpreted by the browser so is the",
    "start": "2231930",
    "end": "2238320"
  },
  {
    "text": "same thing for the rest frame or it only makes sense at the end or the beginning if you've only got one is in the case",
    "start": "2238320",
    "end": "2243840"
  },
  {
    "text": "here but you can't really do it at the end it doesn't make sense okay spread",
    "start": "2243840",
    "end": "2250170"
  },
  {
    "start": "2249000",
    "end": "2249000"
  },
  {
    "text": "operator this guy alone I need to pick up a piece this guy allows iterables",
    "start": "2250170",
    "end": "2255570"
  },
  {
    "text": "arrays object Springs to be expanded into single elements again anytime you're working with an array this spread",
    "start": "2255570",
    "end": "2263040"
  },
  {
    "text": "operator is really going to simplify your code so we've got this this is an eye I'm making",
    "start": "2263040",
    "end": "2270150"
  },
  {
    "text": "a joke about Cointreau I hope you left this that's alright concept let's",
    "start": "2270150",
    "end": "2276570"
  },
  {
    "text": "declare a our our is an array of three different types of guns right we're",
    "start": "2276570",
    "end": "2283650"
  },
  {
    "text": "gonna create a new array and we're gonna use the spread operator in front of our array here and then we're gonna add",
    "start": "2283650",
    "end": "2289770"
  },
  {
    "text": "somebody else so this is the result I think dealing with arrays this is a common situation if you did not have",
    "start": "2289770",
    "end": "2297270"
  },
  {
    "text": "your spread operator here and you tried to do this you'd get something weird you get an array with two objects in it and",
    "start": "2297270",
    "end": "2304590"
  },
  {
    "text": "the first would be or an array with three values and then the second object in your array would be the last two",
    "start": "2304590",
    "end": "2311100"
  },
  {
    "text": "homing gun thing and that's never what we want well in most cases that's not",
    "start": "2311100",
    "end": "2316380"
  },
  {
    "text": "what we want to do but that's what you get so I think this really cleans up the",
    "start": "2316380",
    "end": "2321690"
  },
  {
    "text": "way you deal with array concatenation array manipulation etc quick copy down",
    "start": "2321690",
    "end": "2328080"
  },
  {
    "text": "here note that this is a shallow copy so if you had some objects going on it it's",
    "start": "2328080",
    "end": "2335190"
  },
  {
    "text": "just a shell copy you want to be careful right but quick copy and again I think",
    "start": "2335190",
    "end": "2341180"
  },
  {
    "text": "it's most useful here when you need to pass an array of values as separate",
    "start": "2341180",
    "end": "2347370"
  },
  {
    "text": "arguments let's say we've declared our function to take three different argues you could and you've got an array you",
    "start": "2347370",
    "end": "2353220"
  },
  {
    "text": "could go down here and use the spread operator to break them apart into separate values and then you've got",
    "start": "2353220",
    "end": "2359130"
  },
  {
    "text": "perfectly valid call your function okay",
    "start": "2359130",
    "end": "2364250"
  },
  {
    "text": "promises and the event loop really quick",
    "start": "2364250",
    "end": "2369590"
  },
  {
    "text": "javascript code as we know runs single threaded wait a minute how is it single threaded",
    "start": "2369590",
    "end": "2376770"
  },
  {
    "text": "well this is how the event loop works our browser runs a single execution",
    "start": "2376770",
    "end": "2382620"
  },
  {
    "text": "thread down here in what's called our event loop and this is our code executing and I don't care about my I",
    "start": "2382620",
    "end": "2390330"
  },
  {
    "text": "close source sorry okay so JavaScript runs a single execution",
    "start": "2390330",
    "end": "2398609"
  },
  {
    "text": "thread down here in your browser this is our event loop now it's going to respond to events like this and if we want to do",
    "start": "2398609",
    "end": "2408510"
  },
  {
    "text": "asynchronous functionality our I don't",
    "start": "2408510",
    "end": "2415680"
  },
  {
    "text": "love max I'm sorry okay I don't care they're trying to sell me something in the middle of my presentation but that's",
    "start": "2415680",
    "end": "2422190"
  },
  {
    "start": "2419000",
    "end": "2419000"
  },
  {
    "text": "how it is you know everybody's trying to sell you and curiously we actually at",
    "start": "2422190",
    "end": "2427410"
  },
  {
    "text": "home did have Microsoft Virtual Assistants my husband works for them so",
    "start": "2427410",
    "end": "2432619"
  },
  {
    "text": "Cortana I think she's got a new name now but Cortana is the only one that doesn't try to sell you something Alexa tries to",
    "start": "2432619",
    "end": "2439289"
  },
  {
    "text": "sell you something I had the Google one for a while I was trying to tell me something Apple's trying to sell me things in the middle of my presentation",
    "start": "2439289",
    "end": "2445069"
  },
  {
    "text": "I digress back to the JavaScript event loop in our browser the way that our",
    "start": "2445069",
    "end": "2451380"
  },
  {
    "text": "single threaded yet asynchronously capable JavaScript code works we've got",
    "start": "2451380",
    "end": "2457380"
  },
  {
    "text": "this event loop running in our browser and this is running our code it responds",
    "start": "2457380",
    "end": "2463079"
  },
  {
    "text": "to events the way that we implement asynchronous functionality is through",
    "start": "2463079",
    "end": "2468660"
  },
  {
    "text": "browser API methods JavaScript code runs single threaded in our event loop down",
    "start": "2468660",
    "end": "2475319"
  },
  {
    "text": "here but asynchronous function functionality is implemented using our",
    "start": "2475319",
    "end": "2480650"
  },
  {
    "text": "browser stack here our code will call API methods look for your HTTP response",
    "start": "2480650",
    "end": "2489630"
  },
  {
    "text": "etc set timeout blah blah those asynchronous methods are not part of the",
    "start": "2489630",
    "end": "2495839"
  },
  {
    "text": "event loop but they're actually calls to the browser API over here and then we're",
    "start": "2495839",
    "end": "2502109"
  },
  {
    "text": "going to call them we're going to put them on the stack and then the stack is going to wait for our HTTP response our",
    "start": "2502109",
    "end": "2509520"
  },
  {
    "text": "timeout to expire etc and then when this is done it gets popped off the stack and once the stack is done we go back to our",
    "start": "2509520",
    "end": "2515849"
  },
  {
    "text": "loop and we keep looping so where am I going with this",
    "start": "2515849",
    "end": "2521339"
  },
  {
    "text": "Eknath 6 implemented the promise API to elegantly interface with our",
    "start": "2521339",
    "end": "2528250"
  },
  {
    "text": "call stack from the event loop code so the promise API is some Co is a library",
    "start": "2528250",
    "end": "2534790"
  },
  {
    "text": "that we can use to elegantly handle this situation and I'll show an example in a second but before I do most of you raise",
    "start": "2534790",
    "end": "2542740"
  },
  {
    "text": "your hand if you use promises in your JavaScript code a lot of okay yeah so you've seen this before but it's",
    "start": "2542740",
    "end": "2548680"
  },
  {
    "text": "worth mentioning this was a big thing of equi six that's all and later on we'll",
    "start": "2548680",
    "end": "2554110"
  },
  {
    "text": "talk about async await those aren't those are new features all right",
    "start": "2554110",
    "end": "2560220"
  },
  {
    "text": "promises promises are a design pattern which greatly simplify ank synchronous",
    "start": "2560220",
    "end": "2566710"
  },
  {
    "text": "coding they let us cleanly handle callbacks from asynchronous function",
    "start": "2566710",
    "end": "2572080"
  },
  {
    "text": "calls so we can clearly handle the return our HTTP response our said",
    "start": "2572080",
    "end": "2577270"
  },
  {
    "text": "timeout etc and any like Web API things we need to do we include Lee Han delays",
    "start": "2577270",
    "end": "2582850"
  },
  {
    "text": "callbacks using the promised library promises are non blocking all that a",
    "start": "2582850",
    "end": "2589000"
  },
  {
    "text": "promise is and we'll see an example in a second it's a container for a future value and a contract in the code that we",
    "start": "2589000",
    "end": "2597550"
  },
  {
    "text": "will indeed receive the value hence the name promise I think it's kind of a dorky name but it really makes sense if",
    "start": "2597550",
    "end": "2604240"
  },
  {
    "text": "you think about what it's going to do promises are exclusive where other",
    "start": "2604240",
    "end": "2609670"
  },
  {
    "text": "handlers cannot alter the value that we're gonna get back it's immutable and we're also guaranteed to receive the",
    "start": "2609670",
    "end": "2617140"
  },
  {
    "text": "value regardless of whether we register a handler for it even if this is the big",
    "start": "2617140",
    "end": "2622870"
  },
  {
    "text": "part even if the valley we get back is already resolved so when you're working",
    "start": "2622870",
    "end": "2629680"
  },
  {
    "text": "with asynchronous code you're always gonna be working with a resolution of some sort this is on think about this in",
    "start": "2629680",
    "end": "2636940"
  },
  {
    "text": "contrast to events where all your code is doing is oh somebody clicked on me",
    "start": "2636940",
    "end": "2642010"
  },
  {
    "text": "what not events can have race conditions they're all over the place there's no",
    "start": "2642010",
    "end": "2647800"
  },
  {
    "text": "contract there's no guarantees but promises on the other hand our code knows eventually we're going to get a",
    "start": "2647800",
    "end": "2653830"
  },
  {
    "text": "value back a promise is an object which is used as a placeholder for the",
    "start": "2653830",
    "end": "2660310"
  },
  {
    "text": "eventual results of deferred and possibly asynchronous computation I thought this was a really",
    "start": "2660310",
    "end": "2666520"
  },
  {
    "text": "great definition so I thought I'd share it he was the promise API so how do we use",
    "start": "2666520",
    "end": "2672040"
  },
  {
    "text": "it we're gonna declare our promises and then we're gonna specify what to do when",
    "start": "2672040",
    "end": "2678040"
  },
  {
    "text": "we get a response back and if we want to resolve our own promise that's fine",
    "start": "2678040",
    "end": "2683440"
  },
  {
    "text": "that's part of the API you'll see it in a second you can chain operations you'll hear people say the words Venable",
    "start": "2683440",
    "end": "2691050"
  },
  {
    "text": "because you use the Zen property to declare what your code needs to do when",
    "start": "2691050",
    "end": "2696520"
  },
  {
    "text": "it gets the response you'll hear these called Venable let's look at some examples P is our new promise here we're",
    "start": "2696520",
    "end": "2706210"
  },
  {
    "text": "using the promise API to declare our promise we're passing it a function",
    "start": "2706210",
    "end": "2711460"
  },
  {
    "text": "object with two parameters we've got what to do what function to call on",
    "start": "2711460",
    "end": "2716590"
  },
  {
    "text": "resolve and what function to call and reject inside of our declaration this is",
    "start": "2716590",
    "end": "2721960"
  },
  {
    "text": "where we're actually going to call the asynchronous API method here and then we",
    "start": "2721960",
    "end": "2729310"
  },
  {
    "text": "talked about resolve reject those guys contain what to do on the resolve reject",
    "start": "2729310",
    "end": "2735790"
  },
  {
    "text": "state so here we go our assign a function object to the Zen property and",
    "start": "2735790",
    "end": "2742770"
  },
  {
    "text": "our code will execute this when we get the resolve back so we get our resolve",
    "start": "2742770",
    "end": "2749050"
  },
  {
    "text": "back here then resolve into our function",
    "start": "2749050",
    "end": "2754090"
  },
  {
    "text": "statement this is completely so when",
    "start": "2754090",
    "end": "2760780"
  },
  {
    "text": "you're writing synchronous code and there might be a time where you need to deal with values inside of an",
    "start": "2760780",
    "end": "2766960"
  },
  {
    "text": "asynchronous function you can you can explicitly resolve on your own if let's just say you want to have a scalar value",
    "start": "2766960",
    "end": "2773050"
  },
  {
    "text": "and you want to make it compatible with your asynchronous you know flow here you this is perfectly valid this is a very",
    "start": "2773050",
    "end": "2780940"
  },
  {
    "text": "short overview of asynchronous programming but I just want to get your feet wet with promises in the event you",
    "start": "2780940",
    "end": "2786670"
  },
  {
    "text": "might not have",
    "start": "2786670",
    "end": "2789270"
  },
  {
    "text": "before I move on doesn't have any questions about this I know you've seen",
    "start": "2791910",
    "end": "2796990"
  },
  {
    "text": "this but okay good I'm glad everyone knows it okay this is something I really",
    "start": "2796990",
    "end": "2803170"
  },
  {
    "start": "2801000",
    "end": "2801000"
  },
  {
    "text": "liked ECMO six gives us the async await keywords with which really simplify",
    "start": "2803170",
    "end": "2809830"
  },
  {
    "text": "working with promises you've you've probably already seen this if not take a second look I think it really cleans up",
    "start": "2809830",
    "end": "2817930"
  },
  {
    "text": "what you've got going on with async await place the async keyword before a",
    "start": "2817930",
    "end": "2823570"
  },
  {
    "text": "function to cause the function to return a promise so what async does is it tells",
    "start": "2823570",
    "end": "2831460"
  },
  {
    "text": "our browser our return value here is going to be a resolution compatible with",
    "start": "2831460",
    "end": "2837580"
  },
  {
    "text": "type of promise non promise functionality then let's just say we",
    "start": "2837580",
    "end": "2842650"
  },
  {
    "text": "want to return a scalar we're gonna have to do that in a promise doubt resolve so",
    "start": "2842650",
    "end": "2848680"
  },
  {
    "text": "here we go here's our async keyword we're declaring our function f with the function keyword return one this is this",
    "start": "2848680",
    "end": "2857320"
  },
  {
    "text": "is valid all it does is return a value but notice because we've declared this",
    "start": "2857320",
    "end": "2862570"
  },
  {
    "text": "function with the async keyword we can use its bendable equals venable we can",
    "start": "2862570",
    "end": "2868660"
  },
  {
    "text": "use the dot ven clause of the function to define what to do next",
    "start": "2868660",
    "end": "2875470"
  },
  {
    "text": "so anything declared with async is using the promise API so what does that mean",
    "start": "2875470",
    "end": "2881620"
  },
  {
    "text": "it inherently has a venn property just",
    "start": "2881620",
    "end": "2888370"
  },
  {
    "text": "like right here we can because we're working with a scalar we can also return promise that result these are",
    "start": "2888370",
    "end": "2894160"
  },
  {
    "text": "essentially the same thing asynchronous functions are venable meaning they return a promise resolution",
    "start": "2894160",
    "end": "2900730"
  },
  {
    "text": "so why would you want to do this what's the point this is basically just a shorthand for the syntax we just saw up",
    "start": "2900730",
    "end": "2911170"
  },
  {
    "text": "here where you were using the API to declare a promise this guy is the",
    "start": "2911170",
    "end": "2917470"
  },
  {
    "text": "shorthand for that syntax I think it's elegant I think it really cleans up your code",
    "start": "2917470",
    "end": "2923160"
  },
  {
    "text": "all right a wait a sink and a wait we're",
    "start": "2927690",
    "end": "2934750"
  },
  {
    "start": "2928000",
    "end": "2928000"
  },
  {
    "text": "gonna use the await keyword inside of our async function now the ohwait keyword does not work with the base",
    "start": "2934750",
    "end": "2942519"
  },
  {
    "text": "promise API you need to use the async keyword in order to be able to use a weight so if you want to block for some",
    "start": "2942519",
    "end": "2950289"
  },
  {
    "text": "reason for some reason you want to block your code use the async keyword to pause",
    "start": "2950289",
    "end": "2955660"
  },
  {
    "text": "your execution until a promise resolves why is this useful sometimes blocking is useful but if you want to block before",
    "start": "2955660",
    "end": "2963789"
  },
  {
    "text": "the await keyword if you wanted to block there wasn't a really great way to do it so using one keyword here as you'll see",
    "start": "2963789",
    "end": "2973529"
  },
  {
    "text": "in the middle of my lines because I highlight as you'll see down here using",
    "start": "2974160",
    "end": "2979450"
  },
  {
    "text": "one keyword we're gonna block until this promise results so we're creating the",
    "start": "2979450",
    "end": "2984519"
  },
  {
    "text": "prompt where it's I have an async we're creating a promise here and then we're gonna block until we resolve from it",
    "start": "2984519",
    "end": "2991180"
  },
  {
    "text": "sign the return value to result and then you know print it out do whatever we're gonna do but again a weight is only",
    "start": "2991180",
    "end": "2999730"
  },
  {
    "text": "valid inside of async functions I think this is super useful anytime you need to deal with any sort of blocking whatnot",
    "start": "2999730",
    "end": "3008088"
  },
  {
    "text": "and that's it that's the best parts in my opinion of Eggman's javascript I need",
    "start": "3011930",
    "end": "3018779"
  },
  {
    "text": "comments so that I think we've got like four minutes left here but anything I can do for you at the end here's my",
    "start": "3018779",
    "end": "3025140"
  },
  {
    "text": "LinkedIn feel free to tell me you love that you hated this that any if you wanted some of the slides or anything",
    "start": "3025140",
    "end": "3031650"
  },
  {
    "text": "like that if that's useful if there's anything I could do feel free to connect there's my LinkedIn and thanks very much",
    "start": "3031650",
    "end": "3037890"
  },
  {
    "text": "this is the first time I spoke at NDC so thanks for turning up for my talk",
    "start": "3037890",
    "end": "3042940"
  },
  {
    "text": "[Applause]",
    "start": "3042940",
    "end": "3047510"
  }
]