[
  {
    "text": "okay this is the functional programming tool kits my name is Scott the lotion",
    "start": "8040",
    "end": "15610"
  },
  {
    "text": "that's me on Twitter and I have a website f-sharp for fun and profit calm which is about F sharp as you can",
    "start": "15610",
    "end": "23320"
  },
  {
    "text": "probably guess I'm going to be using f sharp for the code examples",
    "start": "23320",
    "end": "29769"
  },
  {
    "text": "in fact these are this is a concept talks a big-picture kind of concept taught so these concepts should pretty",
    "start": "29769",
    "end": "36670"
  },
  {
    "text": "much work in all modern programming languages maybe not in COBOL but they",
    "start": "36670",
    "end": "42219"
  },
  {
    "text": "should certainly work in you know JavaScript or Python or whatever so the",
    "start": "42219",
    "end": "47350"
  },
  {
    "text": "first thing is why do functional programmers use of strange words they use you know words like functor",
    "start": "47350",
    "end": "55320"
  },
  {
    "text": "metamorphism and applicative and monoid and carrying an monad that worse word of",
    "start": "55320",
    "end": "61719"
  },
  {
    "text": "all and I think part of the point of this talk is to say that really yeah",
    "start": "61719",
    "end": "67210"
  },
  {
    "text": "don't be like homer and and like put your hands to is it's not that scary it's not the really this scary it's just",
    "start": "67210",
    "end": "73090"
  },
  {
    "text": "that unfamiliar and so one of the goals of this talk is to make you more",
    "start": "73090",
    "end": "78910"
  },
  {
    "text": "familiar with some of these worse so you know unfortunately these words are not",
    "start": "78910",
    "end": "84250"
  },
  {
    "text": "friendly words if they were called AG repeatable or chainable or mapable like",
    "start": "84250",
    "end": "89259"
  },
  {
    "text": "thing would be an oo or something then they might not be so scary and you might just say well I don't know what they mean but I can learn what they mean it's",
    "start": "89259",
    "end": "96189"
  },
  {
    "text": "not a problem but because they're kind of mathematical sounding words people get very scared and very cut off so",
    "start": "96189",
    "end": "102070"
  },
  {
    "text": "please don't do that it actually is worth learning them and I'll tell you what's really scary is obviously on your",
    "start": "102070",
    "end": "107469"
  },
  {
    "text": "programming if you're not a novice of it on your programming you've got all these words like polymorphism and inheritance and interface and generics covariance",
    "start": "107469",
    "end": "115299"
  },
  {
    "text": "and solid and solid is five other things and then this IRC and di and MVC Emma so",
    "start": "115299",
    "end": "121149"
  },
  {
    "text": "you forget if you're experienced probably I hope you experience an oo you forget that there's all these",
    "start": "121149",
    "end": "126310"
  },
  {
    "text": "complicated words in oo - so functional programming isn't actually any worse than our that way it's just they're",
    "start": "126310",
    "end": "131590"
  },
  {
    "text": "different words so don't ever say that fronting the following words are scary now even though these have a",
    "start": "131590",
    "end": "139239"
  },
  {
    "text": "mathematical basis they're actually very useful tools in everyday programming",
    "start": "139239",
    "end": "145180"
  },
  {
    "text": "it's not just academic concepts that we're talking about here and so this talk is really to show you some of these",
    "start": "145180",
    "end": "150370"
  },
  {
    "text": "tools and how can actually be used to solve real-world problems not just kind of academic problems so just like our",
    "start": "150370",
    "end": "156970"
  },
  {
    "text": "people have our patterns and so on functional programmers have a standard set of tools",
    "start": "156970",
    "end": "162380"
  },
  {
    "text": "I call this the functional toolkit and just imagine just like you have our tool box and there's a bunch of things you",
    "start": "162380",
    "end": "168410"
  },
  {
    "text": "know you have a saw and a hammer and a wrench and a spoon or whatever functional programmers they have map",
    "start": "168410",
    "end": "173450"
  },
  {
    "text": "they have returned they have Traverse spines lifts that map combined whatever",
    "start": "173450",
    "end": "178610"
  },
  {
    "text": "there's actually about 11 tools that you need to understand so these are these",
    "start": "178610",
    "end": "185690"
  },
  {
    "text": "are tools designed for problem solving like I say they're not just academic tools with no purpose these are actually useful tools that are used every day and",
    "start": "185690",
    "end": "191870"
  },
  {
    "text": "they solve the kind of problems that you have as a developer so you know how do you compose things how do you make",
    "start": "191870",
    "end": "197660"
  },
  {
    "text": "bigger things from smaller things how do you combine things how do you aggregate things how do you loop over collections",
    "start": "197660",
    "end": "203210"
  },
  {
    "text": "and stuff how do you work with effects now I'm going to explain what I mean by fix later one but effects is basically",
    "start": "203210",
    "end": "210710"
  },
  {
    "text": "some extra enhanced data or something so when you mix things up when you mix a list and an on list how do you work with",
    "start": "210710",
    "end": "217100"
  },
  {
    "text": "that when you need to chain lists or tasks or a sinks or promises in series",
    "start": "217100",
    "end": "222410"
  },
  {
    "text": "how do you do that if you want to do the thought from parallel how do you do that if you want to mix and match lists and",
    "start": "222410",
    "end": "227780"
  },
  {
    "text": "then task something how do you do that so these are very common problems and this is what the toolkit solves so I'm",
    "start": "227780",
    "end": "233900"
  },
  {
    "text": "going to give these things names so the compose function whatever isn't you know language is composition fold is",
    "start": "233900",
    "end": "240830"
  },
  {
    "text": "typically is for looping over collections you can combine things and reduce things with functions typically",
    "start": "240830",
    "end": "249350"
  },
  {
    "text": "call combined and reduce math in return a very common bind and flatmap a very",
    "start": "249350",
    "end": "255140"
  },
  {
    "text": "common apply lift is it other functions sequence and reverse these are all really common functions in your talk",
    "start": "255140",
    "end": "261109"
  },
  {
    "text": "yeah like I say it's about 11 of them 12 of them whatever and if you know how these will work you have all the tools",
    "start": "261109",
    "end": "266780"
  },
  {
    "text": "you need to do function programming this is actually a smaller toolset then probably 400 now of course there's the",
    "start": "266780",
    "end": "274580"
  },
  {
    "text": "jargon version of these works this is the like the friendly version the jargon version is when you're talking about",
    "start": "274580",
    "end": "280460"
  },
  {
    "text": "combining things and aggregating is you use moloids and when you're working with effects you use things like functors",
    "start": "280460",
    "end": "286940"
  },
  {
    "text": "monads and effectives so this is the jargon version and I'm going to mix and match between the jargon version and the",
    "start": "286940",
    "end": "293090"
  },
  {
    "text": "non-jarring version so don't cut off so this talk I'm not going to talk about",
    "start": "293090",
    "end": "298729"
  },
  {
    "text": "Manos I'm going to talk about basically working with the fix and how you work with them in parallel how you chain them together how you mix and match them this",
    "start": "298729",
    "end": "305210"
  },
  {
    "text": "one so that's what this talk is about right now it's only an hour and there's",
    "start": "305210",
    "end": "311750"
  },
  {
    "text": "a lot to cover so it's just like one of those tour buses you go to a city and you like see you just drive by the sites",
    "start": "311750",
    "end": "317479"
  },
  {
    "text": "really quickly that's what this is like you're really not gonna kind of get everything in so hopefully they will",
    "start": "317479",
    "end": "323689"
  },
  {
    "text": "demystify and you can go away and like learn on your by yourself and get more into it if you want so don't worry if",
    "start": "323689",
    "end": "330169"
  },
  {
    "text": "you don't understand everything I can say it's really just to demystify and make sure they stop being scary so I'm",
    "start": "330169",
    "end": "336169"
  },
  {
    "text": "going to talk about the core principles of functional programming then what about function transform which is really the main idea behind all these",
    "start": "336169",
    "end": "342770"
  },
  {
    "text": "things and then I look at some of the tools which is map bind and lift and then I'll look at a real world example",
    "start": "342770",
    "end": "349310"
  },
  {
    "text": "of how you combine all these tools together to actually do something useful and it's really how you think about",
    "start": "349310",
    "end": "355819"
  },
  {
    "text": "using these tools this sort of way of approaching problems so part 1 I'm going",
    "start": "355819",
    "end": "362479"
  },
  {
    "text": "to talk about functional programming what are the principles are touching programming now this is my take on it",
    "start": "362479",
    "end": "368360"
  },
  {
    "text": "everyone has slightly different takes and I like to begin in my talk because I have to really emphasize this every",
    "start": "368360",
    "end": "374270"
  },
  {
    "text": "single time so one of the main principles is that functions are things right and I like to use a little railway",
    "start": "374270",
    "end": "381949"
  },
  {
    "text": "track analogy you like if you're playing with wooden railway States isn't it and that means you can use them like",
    "start": "381949",
    "end": "387439"
  },
  {
    "text": "integers and strings and dates and stuff they're just things you can pass them around as parameters and then the second",
    "start": "387439",
    "end": "394580"
  },
  {
    "text": "really important principle is it used composition as your fundamental tool for building things and that is like Lego so",
    "start": "394580",
    "end": "402349"
  },
  {
    "text": "if you know how to use toy railways and you know how to use Lego you know everything about functional programming",
    "start": "402349",
    "end": "408610"
  },
  {
    "text": "so let's look at functions as things so here's I like this railway track analogy",
    "start": "408610",
    "end": "413960"
  },
  {
    "text": "a lot you're gonna see me doing over and over again so imagine there's a little rail we reckon there's like a tunnel on",
    "start": "413960",
    "end": "419659"
  },
  {
    "text": "the railway track and something goes into the tunnel as one thing and it comes out as another thing so it goes in",
    "start": "419659",
    "end": "425569"
  },
  {
    "text": "as an apple and it comes out as a banana so we call this as a function turns apples into bananas okay and we",
    "start": "425569",
    "end": "432180"
  },
  {
    "text": "write it Apple Arrow banana now here's the thing unlike object ID programming",
    "start": "432180",
    "end": "437310"
  },
  {
    "text": "functions or standalone things they're not attached to a class and that means you can use it just like an int or",
    "start": "437310",
    "end": "443310"
  },
  {
    "text": "string what it was just a value that you could pass around and in particular because they're standalone things that",
    "start": "443310",
    "end": "449640"
  },
  {
    "text": "means they're reusable so the way you use functions is very different than the way you use objects because any function",
    "start": "449640",
    "end": "455730"
  },
  {
    "text": "can typically be used anywhere in your code so let's look at a function that has a normal input but it spits out a",
    "start": "455730",
    "end": "463890"
  },
  {
    "text": "function there's an output all right so you can have a function that spits out functions and output you can have a",
    "start": "463890",
    "end": "470730"
  },
  {
    "text": "function as an input that returns a normal thing you can even have you know a normal function but it has a special",
    "start": "470730",
    "end": "477360"
  },
  {
    "text": "kind of function parameter that controls how the function works the size which we in our we call that strategy pattern so",
    "start": "477360",
    "end": "485040"
  },
  {
    "text": "you know that's all it is that's watching the program right there but you",
    "start": "485040",
    "end": "490530"
  },
  {
    "text": "can really build complex systems from this kind of basics so for example you can have a function that returns a",
    "start": "490530",
    "end": "495960"
  },
  {
    "text": "function that constructs another function that is another function transform you know it can get really complicated but the principles are based",
    "start": "495960",
    "end": "501750"
  },
  {
    "text": "basically straightforward and most of the tools in the functional toolkit our",
    "start": "501750",
    "end": "506760"
  },
  {
    "text": "function transform as they are functions you feed them in a function and they spit out another function which is",
    "start": "506760",
    "end": "512280"
  },
  {
    "text": "tweaked of the original function it's been changed somehow so I I'm calling those function transformers so that's",
    "start": "512280",
    "end": "520530"
  },
  {
    "text": "functions as things and the second thing is you used composition everywhere and if you're familiar with the Lego you",
    "start": "520530",
    "end": "527490"
  },
  {
    "text": "already know how to do this so in Lego there is actually a philosophy behind Lego and is that all the pieces are",
    "start": "527490",
    "end": "534570"
  },
  {
    "text": "designed to be connected that's the thing number one and if you connect any two LEGO pieces you get another thing",
    "start": "534570",
    "end": "540570"
  },
  {
    "text": "that can is another kind of piece of Lego you can still kind of keep going right and the pieces are reusable right",
    "start": "540570",
    "end": "547520"
  },
  {
    "text": "so here's some Lego and notice that every single piece of Lego has a little bump on it or multiple bumps on it",
    "start": "547520",
    "end": "553050"
  },
  {
    "text": "and that's how you connect them together right but they're designed that way when you design when you make a piece of Lego",
    "start": "553050",
    "end": "558360"
  },
  {
    "text": "they actually think about where to put the bumps right they don't just design it without bond and because of these connection things",
    "start": "558360",
    "end": "565529"
  },
  {
    "text": "you can take two pieces and connect them and make another piece and then you can take another take that and take another piece and take that and connect another",
    "start": "565529",
    "end": "571649"
  },
  {
    "text": "piece and take that and connect another piece and so on this thing that you can keep getting more and more pieces you",
    "start": "571649",
    "end": "577230"
  },
  {
    "text": "don't need a special adapter to add a Lego to another piece of Lego and you",
    "start": "577230",
    "end": "582600"
  },
  {
    "text": "can keep adding and adding you never have to run out you know you never have to stop at some point because you've run out of bumps and of course",
    "start": "582600",
    "end": "591089"
  },
  {
    "text": "Lego is reusable you can make something out of Lego and you can take it apart and put it together another way so",
    "start": "591089",
    "end": "596299"
  },
  {
    "text": "that's why I Lego is such a fun thing to play with and the reason why the pieces",
    "start": "596299",
    "end": "603239"
  },
  {
    "text": "are reusable is they literally do not have strings attached you can take you know if a Lego have string attached if",
    "start": "603239",
    "end": "608790"
  },
  {
    "text": "it really tangled up they literally have they are completely independent they have no dependencies in the outside",
    "start": "608790",
    "end": "614730"
  },
  {
    "text": "world and so they are completely musical and we did the same thing with functional program we were trying to design our functions so they have no",
    "start": "614730",
    "end": "620689"
  },
  {
    "text": "dependencies on the outside world and that means they're completely reusable so the Lego philosophy makes you allows",
    "start": "620689",
    "end": "628889"
  },
  {
    "text": "you to make really big things by building bigger things some smaller things right and I call that the power",
    "start": "628889",
    "end": "634649"
  },
  {
    "text": "of composition have a whole talk about that so how do we apply these ideas to",
    "start": "634649",
    "end": "640170"
  },
  {
    "text": "programming well let's the plot let's transfer these ideas to programming now I'm talking",
    "start": "640170",
    "end": "645779"
  },
  {
    "text": "about in this talk I'm talking about a statically typed functional programming but in fact you can you know a lot of these ideas also work for non statically",
    "start": "645779",
    "end": "652559"
  },
  {
    "text": "type - so you design functions that do one thing well and these functions can",
    "start": "652559",
    "end": "657929"
  },
  {
    "text": "be reused in different contexts and you design the functions to work together they all have bumps on them and that",
    "start": "657929",
    "end": "664379"
  },
  {
    "text": "means basically when you're coding you always think that somebody could be using this function in a way that I didn't think about so you try and design",
    "start": "664379",
    "end": "670649"
  },
  {
    "text": "the output of the function in such a way that people can't mess it up and then you use the types in order to make sure",
    "start": "670649",
    "end": "677189"
  },
  {
    "text": "the bits fit together like with the Lego you can't push them into the wrong slots so doing the things that do one thing",
    "start": "677189",
    "end": "684149"
  },
  {
    "text": "well designing those little functions that's the toolkit those those eleven functions in the toolkit are very you",
    "start": "684149",
    "end": "689910"
  },
  {
    "text": "know they're tools that they do one thing really well you don't use a hammer for hitting nails you know they do one thing well and you",
    "start": "689910",
    "end": "696410"
  },
  {
    "text": "can reuse them for that one thing so composition this is how you compose two",
    "start": "696410",
    "end": "704059"
  },
  {
    "text": "functions here we have two functions one is an apple - banana function and another is a banana - cherry function how do we connect them well this is why",
    "start": "704059",
    "end": "711679"
  },
  {
    "text": "I like the railway analogy because it's really obvious how you connect let me just like stick them together so that's",
    "start": "711679",
    "end": "718069"
  },
  {
    "text": "before and that's after now what's interesting is we now have a new function and you cannot contact you",
    "start": "718069",
    "end": "724160"
  },
  {
    "text": "cannot tell it's built from smaller pieces the fact that it's made from smaller parts we can't tell all you can",
    "start": "724160",
    "end": "729559"
  },
  {
    "text": "see is the insight unit input the output at for example where - the banana co-write the smaller functions cared",
    "start": "729559",
    "end": "736069"
  },
  {
    "text": "about bananas this function doesn't care about an honest and so if I'm using this function I don't need to know about bananas so this kind of composition",
    "start": "736069",
    "end": "744350"
  },
  {
    "text": "thing you might think well yeah but can you you know how far can you go with this so you can start with low-level",
    "start": "744350",
    "end": "751339"
  },
  {
    "text": "functions like upper case in a string that's a really simple function why you give it a string and you get a string back but you can take these low-level",
    "start": "751339",
    "end": "758600"
  },
  {
    "text": "operations and build them into the like a service that does something like that dress validation so obviously you feed",
    "start": "758600",
    "end": "763730"
  },
  {
    "text": "in some sort of dress that spits out results and our service is a bit of a strange word so anyone under 30 service",
    "start": "763730",
    "end": "772040"
  },
  {
    "text": "is just like a micro service yeah you",
    "start": "772040",
    "end": "777410"
  },
  {
    "text": "have to be over 32 no way so we take these services and we combine them into",
    "start": "777410",
    "end": "783949"
  },
  {
    "text": "a use case or a scenario or a story or work whatever I want to call it you know",
    "start": "783949",
    "end": "789559"
  },
  {
    "text": "they do various things they could work together to make something happen and then finally you take all these scenarios the use cases whatever and you",
    "start": "789559",
    "end": "795410"
  },
  {
    "text": "build a web application now a web application is actually a function it takes in an HTTP request as input and it",
    "start": "795410",
    "end": "800660"
  },
  {
    "text": "spits out an HTTP responses output so you can actually think of entire web application as a function and in some",
    "start": "800660",
    "end": "807110"
  },
  {
    "text": "way there you have a controller or a dispatcher or router whatever you want to call it the decides based on the",
    "start": "807110",
    "end": "812689"
  },
  {
    "text": "input which one of these things to call so that's a complete application built for functions and so you can say that",
    "start": "812689",
    "end": "819980"
  },
  {
    "text": "composition is sort of fractal it works you use the same techniques of there's low level as you do the high level there you don't have to switch between",
    "start": "819980",
    "end": "825470"
  },
  {
    "text": "different endings just like with Lego use same techniques in Lego when you're putting two pieces together as smoothly",
    "start": "825470",
    "end": "830560"
  },
  {
    "text": "bring big things together so if you look inside a web application this is what it looks like there's these functions all",
    "start": "830560",
    "end": "836260"
  },
  {
    "text": "chained together but notice the arrows go in one direction so unlike our way even have kind of dependencies and all",
    "start": "836260",
    "end": "843280"
  },
  {
    "text": "sort of things the in front of the project we didn't have this linear pipeline thing where things tend to go in one direction so that's the power",
    "start": "843280",
    "end": "851350"
  },
  {
    "text": "composition for functions as I said I've got a whole talk of this if you go to my",
    "start": "851350",
    "end": "856840"
  },
  {
    "text": "website or just Google power composition you'll find it right so let's look at how this works in F sharp so I'm going",
    "start": "856840",
    "end": "864400"
  },
  {
    "text": "to show you some F sharp code now here is this a simple function f sharp adding one here's another simple function which",
    "start": "864400",
    "end": "870250"
  },
  {
    "text": "doubles it and in F sharp we use the let keyword to define things in C sharp use",
    "start": "870250",
    "end": "875740"
  },
  {
    "text": "var or you know in other languages it's def in dog language is whatever so that defines a function and you can also",
    "start": "875740",
    "end": "882940"
  },
  {
    "text": "define functions using lambdas using the fun keyword because fun is a keyword in",
    "start": "882940",
    "end": "888160"
  },
  {
    "text": "a shop that's why if shock is so great so you know this is how you do a lambda in a shop right so you can switch",
    "start": "888160",
    "end": "896890"
  },
  {
    "text": "between defining functions both ways all right so let's compose some functions now you say well let's say I want to add",
    "start": "896890",
    "end": "903280"
  },
  {
    "text": "one and then I want to double it and then I want to square it now in a traditional program if you do this by",
    "start": "903280",
    "end": "908530"
  },
  {
    "text": "using lots and lots of parentheses and this kind of nested thing can get kind",
    "start": "908530",
    "end": "913600"
  },
  {
    "text": "of ugly sometimes I don't need so we have to kind of work from the inside out now a model I think is much nicer is",
    "start": "913600",
    "end": "919930"
  },
  {
    "text": "this pipeline model where you start with a number and you feed it into add one and you take the output of that and you",
    "start": "919930",
    "end": "926590"
  },
  {
    "text": "feed it into double then you take the output of that and you've read it into square and so on so forth now anyone who's done any kind of UNIX come online",
    "start": "926590",
    "end": "933220"
  },
  {
    "text": "you know program programming this is you know you have the pipe on the car - exactly the same technique and I think",
    "start": "933220",
    "end": "940120"
  },
  {
    "text": "this is actually a much easier model to understand and a functional programmers tend to use this a lot more so an F sharp is the way you do this is you have",
    "start": "940120",
    "end": "945730"
  },
  {
    "text": "a special pipe symbol which is the vertical bar an angle bracket and I take",
    "start": "945730",
    "end": "950800"
  },
  {
    "text": "you know I take five and I feed it into add one I take the output a bad one I feed it a double they take the output a",
    "start": "950800",
    "end": "955870"
  },
  {
    "text": "double and I feed it into square and you just you just pipe this little so that's how when you look at F sharp",
    "start": "955870",
    "end": "961820"
  },
  {
    "text": "code you'll see a lot of code that looks just like this all right so that's composition of course that's it makes it",
    "start": "961820",
    "end": "968510"
  },
  {
    "text": "sound too easy right in real world it's never that easy there's always complications so let's look at the some",
    "start": "968510",
    "end": "975320"
  },
  {
    "text": "of the complications what happens if the inputs and the outputs don't match up properly so if the output is a banana",
    "start": "975320",
    "end": "983420"
  },
  {
    "text": "and the input or the next one Isabella everything's good we're very happy but if the input of the next one is a cherry",
    "start": "983420",
    "end": "990460"
  },
  {
    "text": "the banana and the cherry don't match and you can't composer to hear so one fix for that that doesn't work",
    "start": "990460",
    "end": "997850"
  },
  {
    "text": "one fix is to insert some sort of conversion function into the pipeline so we have a little ethyl to cherry",
    "start": "997850",
    "end": "1003220"
  },
  {
    "text": "converter and we just stick it into pipeline and then everything works let me show you some real code here because",
    "start": "1003220",
    "end": "1009790"
  },
  {
    "text": "this is a contrived example but let's say that we take output it add one and we want to feed it into string length",
    "start": "1009790",
    "end": "1016380"
  },
  {
    "text": "now string length doesn't take in sit take strings so you're going to get an",
    "start": "1016380",
    "end": "1022180"
  },
  {
    "text": "error when you try to do that so the solution is to stick a new function into",
    "start": "1022180",
    "end": "1027189"
  },
  {
    "text": "this pipeline that turns into into strings and that fixes that book so",
    "start": "1027190",
    "end": "1032230"
  },
  {
    "text": "that's pretty easy but that's tends to be really not the most important problem that you wanted to so you can fix things",
    "start": "1032230",
    "end": "1039430"
  },
  {
    "text": "that way more likely is you have a situation where the types are sort of the right type but they're they're",
    "start": "1039430",
    "end": "1045010"
  },
  {
    "text": "wrapped in something and they don't match so you might return an optional value an optional banana and you need to",
    "start": "1045010",
    "end": "1051460"
  },
  {
    "text": "feed it into something that has a banana and the optional bananas and resins don't match up or you have something a",
    "start": "1051460",
    "end": "1057910"
  },
  {
    "text": "banana and you need to have a list of bananas and you can't turn a banana into a list of bananas so they kind of match",
    "start": "1057910",
    "end": "1063250"
  },
  {
    "text": "up sort of but they still don't really connect together properly and this is really what we're going to solve with",
    "start": "1063250",
    "end": "1068800"
  },
  {
    "text": "the functional toolkit right the spoiler tidiest by the way is Monas right right",
    "start": "1068800",
    "end": "1076330"
  },
  {
    "text": "so part two let's talk about function transformers so we've got the basic problem of composition how do we compose",
    "start": "1076330",
    "end": "1082660"
  },
  {
    "text": "things that don't fit properly and really this is what we spend the rest of the talk talking about",
    "start": "1082660",
    "end": "1089200"
  },
  {
    "text": "so we're gonna use a railway analogy again we're always what do we always have to do programming I keep talking",
    "start": "1089200",
    "end": "1094990"
  },
  {
    "text": "about it so here's a real-world scenario let's say that I have a Web API web",
    "start": "1094990",
    "end": "1100780"
  },
  {
    "text": "service and I want to update my name and email address so I'm gonna receive a request and the request contains a name",
    "start": "1100780",
    "end": "1106660"
  },
  {
    "text": "and an email say and I'm gonna validate the quest you know is the named not blank is the email of our D mail and so",
    "start": "1106660",
    "end": "1112750"
  },
  {
    "text": "on maybe I want a lowercase the email maybe trim stuff from the string and then want to update the database okay",
    "start": "1112750",
    "end": "1118780"
  },
  {
    "text": "pretty simple straightforward kind of thing to do now let's look at some code",
    "start": "1118780",
    "end": "1124180"
  },
  {
    "text": "so this is some C shop code and you know we do the thing we take the request and",
    "start": "1124180",
    "end": "1129460"
  },
  {
    "text": "then we validate it and then we lowercase the email and then we update the data piece and then we return okay",
    "start": "1129460",
    "end": "1134470"
  },
  {
    "text": "whatever whatever it is that's great it's really nice it's just a few lines of code everything works great the only",
    "start": "1134470",
    "end": "1139870"
  },
  {
    "text": "problem is we don't have any error handling so this is actually not production quality code let's add the",
    "start": "1139870",
    "end": "1146230"
  },
  {
    "text": "error handling okay now since we and error handling we have to say well what happens if the validation doesn't work",
    "start": "1146230",
    "end": "1152610"
  },
  {
    "text": "what happens if you can't find the customer record in the database what happens if the database throws an",
    "start": "1152610",
    "end": "1158740"
  },
  {
    "text": "exception you know all sorts of things that go well and your nice clean code you're a couple of lines of code ends up",
    "start": "1158740",
    "end": "1165130"
  },
  {
    "text": "being really ugly and really complicated and that's a shame because it was you know if you wouldn't have to do error",
    "start": "1165130",
    "end": "1170950"
  },
  {
    "text": "handling it would be wonderful now let's look at the functional equivalent so what we're going to try and do is",
    "start": "1170950",
    "end": "1177640"
  },
  {
    "text": "preserve the simplicity the original version that really nice is very simple but it didn't have any are handling now the the production quality version is",
    "start": "1177640",
    "end": "1184300"
  },
  {
    "text": "much more ready for production but it looks horrible so can we have the get",
    "start": "1184300",
    "end": "1189460"
  },
  {
    "text": "the best of both worlds can it still look simple but still do the error handle so we're going to use this type",
    "start": "1189460",
    "end": "1195280"
  },
  {
    "text": "that functional programmers use a lot which is result type and the result type is basically a choice when you do",
    "start": "1195280",
    "end": "1201790"
  },
  {
    "text": "something like this you validate something you can either either success or failure it's like it is valid or it's",
    "start": "1201790",
    "end": "1207430"
  },
  {
    "text": "not valid and we represent this with a choice type and this is how you write it in their shop it's basically a choice",
    "start": "1207430",
    "end": "1214000"
  },
  {
    "text": "between two things you can think of this as an enum you can think of this as a class with two subclasses it doesn't",
    "start": "1214000",
    "end": "1221020"
  },
  {
    "text": "really matter how you think of it but it's basically you've got a choice between two things and we in functional",
    "start": "1221020",
    "end": "1226119"
  },
  {
    "text": "programmers call these some types now let's actually see how this is work so",
    "start": "1226119",
    "end": "1231580"
  },
  {
    "text": "we're gonna validate an input if the name is blank that's bad so we're going to say that's an error type we're gonna",
    "start": "1231580",
    "end": "1236859"
  },
  {
    "text": "use the ever choice if the email is blank that's also bad I'm gonna return",
    "start": "1236859",
    "end": "1242109"
  },
  {
    "text": "an error but if everything is if those are both fine then the whole thing is good so we're going to see it okay we're",
    "start": "1242109",
    "end": "1247149"
  },
  {
    "text": "very unhappy path right now what's interesting from the railway point of view this looks awfully like a switch",
    "start": "1247149",
    "end": "1255159"
  },
  {
    "text": "function or a points function you have one input and you have two outputs so",
    "start": "1255159",
    "end": "1260739"
  },
  {
    "text": "this is the metaphor I'm going to use and you often run into the situation where you have like a variation function",
    "start": "1260739",
    "end": "1267279"
  },
  {
    "text": "and it does something else and then there's another function and there's like one input but every possible thing could have an error everything could",
    "start": "1267279",
    "end": "1273669"
  },
  {
    "text": "possibly fail and now the question is how do you connect these kinds of functions together now if you are well",
    "start": "1273669",
    "end": "1281320"
  },
  {
    "text": "way expert you'll know how to do this right because you just do that so that's",
    "start": "1281320",
    "end": "1286359"
  },
  {
    "text": "before they're connected and that's after they're connected so it's actually really obvious how to connect them and",
    "start": "1286359",
    "end": "1292839"
  },
  {
    "text": "if you think about it but now the question how do you actually implement this part so I call this the two-track",
    "start": "1292839",
    "end": "1299499"
  },
  {
    "text": "model of error handling otherwise known as a railway oriented programming and again I have a talk about this if you're",
    "start": "1299499",
    "end": "1305229"
  },
  {
    "text": "interested know if we go back to the original code and we update the customer",
    "start": "1305229",
    "end": "1310330"
  },
  {
    "text": "we know this is the functional version now we've got the F sharp code with the point being everything we take the requests we pipe it into validate we",
    "start": "1310330",
    "end": "1317320"
  },
  {
    "text": "pipe it into the lower case we pipe it into update and so on and so forth so that's the the one track version without",
    "start": "1317320",
    "end": "1323440"
  },
  {
    "text": "any error handling just like the C shell code now let's look at the same version with the error handling okay so that's",
    "start": "1323440",
    "end": "1329769"
  },
  {
    "text": "before now with the error handling what does it look like it looks like this you",
    "start": "1329769",
    "end": "1335889"
  },
  {
    "text": "take the requests you validate it feed it into lower case the email you update the database and so on and you're",
    "start": "1335889",
    "end": "1341950"
  },
  {
    "text": "thinking well that looks just the same how can it be any different where's the error handling and the answer is because",
    "start": "1341950",
    "end": "1347830"
  },
  {
    "text": "this is actually a two-track model so the error handling is built into the way the two-track system works so you get to",
    "start": "1347830",
    "end": "1354729"
  },
  {
    "text": "preserve the elegance of the original that you still get all the benefits of the nice area right so let's actually",
    "start": "1354729",
    "end": "1364510"
  },
  {
    "text": "look at the real code for implementing this stuff so this is the function we have we've got input we've got success and failure we want to connect these",
    "start": "1364510",
    "end": "1372160"
  },
  {
    "text": "functions together and we want to say worth it succeeds we want to do the next thing if it fails we want to bypass we",
    "start": "1372160",
    "end": "1378400"
  },
  {
    "text": "want to get on to the error track and we wanted to stay on the air track and says listen if we can't validate the input we're never gonna update the database so",
    "start": "1378400",
    "end": "1386530"
  },
  {
    "text": "we want to get to this point we want to connect them together so how do we compose these things well if we had one",
    "start": "1386530",
    "end": "1393309"
  },
  {
    "text": "track functions we could compose them because they have we just connect the input at the output and if we had to",
    "start": "1393309",
    "end": "1399040"
  },
  {
    "text": "track functions we could also compose them because we connect the success track to the other success track and the",
    "start": "1399040",
    "end": "1404320"
  },
  {
    "text": "failure track to the failure track that would work fine too but that's we don't have that we have this we have a one",
    "start": "1404320",
    "end": "1409450"
  },
  {
    "text": "input and two outputs and this doesn't work so this is awful how do we combine",
    "start": "1409450",
    "end": "1415360"
  },
  {
    "text": "these mismatched functions and the answer is bind this is a word you're gonna hear a lot functional programmers",
    "start": "1415360",
    "end": "1421840"
  },
  {
    "text": "love the word bind they get very excited by the word bind we're going to bind all the things so here is our function and",
    "start": "1421840",
    "end": "1429300"
  },
  {
    "text": "as we said it's not suitable for composition however if we had a two-track version of that function with",
    "start": "1429300",
    "end": "1435850"
  },
  {
    "text": "two inputs that would be perfect that would be just what we need now here's",
    "start": "1435850",
    "end": "1442030"
  },
  {
    "text": "the problem how do we go from the top one which doesn't work at the bottom one that doesn't work okay so what we're",
    "start": "1442030",
    "end": "1450190"
  },
  {
    "text": "going to do is create a it'll adapt a block and if you think even though wooden will waves have something like",
    "start": "1450190",
    "end": "1456130"
  },
  {
    "text": "this way you have a little square thing and you slot your thing into it so there's a two-track thing and it's got a",
    "start": "1456130",
    "end": "1461890"
  },
  {
    "text": "slot for the for the points or the switch and we put this in the slot and",
    "start": "1461890",
    "end": "1468000"
  },
  {
    "text": "what comes out is one of those so this is an adapter block that turns these",
    "start": "1468000",
    "end": "1473380"
  },
  {
    "text": "switcher points functions into these to track functions this is exactly what we want to solve our problem this is a",
    "start": "1473380",
    "end": "1479620"
  },
  {
    "text": "function transformer it takes a function as input and spits out another function as output",
    "start": "1479620",
    "end": "1485580"
  },
  {
    "text": "so the implementation is actually really easy it's I'm going to say buying it's got two parameters we parse in the to",
    "start": "1485820",
    "end": "1492179"
  },
  {
    "text": "track a input we're going to compare is it the okay case or the error case if it's the okay case then we're going to",
    "start": "1492179",
    "end": "1499049"
  },
  {
    "text": "call the next function if it's the error case we're going to skip we're not going we're just going to stay on the red",
    "start": "1499049",
    "end": "1504869"
  },
  {
    "text": "track and not do anything so that's the complete implementation so the implementation is literally three lines of code it's one it we're gonna find all",
    "start": "1504869",
    "end": "1512369"
  },
  {
    "text": "today that I spend more time explaining something than writing it once you understand how these things literally the implementations it's trivial but the",
    "start": "1512369",
    "end": "1518909"
  },
  {
    "text": "understanding is it's harder so once we have this behind function we can take",
    "start": "1518909",
    "end": "1526440"
  },
  {
    "text": "our points functions like this and we can turn them into bind and we can connect them together so this thing of",
    "start": "1526440",
    "end": "1534450"
  },
  {
    "text": "using function transformer to convert things from one thing is this like the most important concept understand and let's look at another some of this look",
    "start": "1534450",
    "end": "1540929"
  },
  {
    "text": "at how you do validation so let's say that we want to validate the infant again and how do we do that now before I",
    "start": "1540929",
    "end": "1548999"
  },
  {
    "text": "put it in one giant function but probably you want to break it up into pieces so I might want to violate the name is not blank and maybe I want to",
    "start": "1548999",
    "end": "1555779"
  },
  {
    "text": "make sure the name is less than 50 characters because I'm putting in a database then maybe I need to check the",
    "start": "1555779",
    "end": "1560849"
  },
  {
    "text": "emails not blank so writing smaller functions is nicer because each each little tiny function does one little",
    "start": "1560849",
    "end": "1566669"
  },
  {
    "text": "thing and then we use a boy I could reuse the email one in another context result so we have all these each of",
    "start": "1566669",
    "end": "1572639"
  },
  {
    "text": "these little functions is one of these you know to track output functions and again how do we combine them well the",
    "start": "1572639",
    "end": "1580109"
  },
  {
    "text": "first function we're going to leave alone the second function we want to compose with and the Third Point remembers now that in order to actually",
    "start": "1580109",
    "end": "1586919"
  },
  {
    "text": "compose them well have to convert the other two into these to track things so we used bind so the first time we leave",
    "start": "1586919",
    "end": "1593460"
  },
  {
    "text": "alone we do bind on the second or we do bind on the third one and once you've done that we can connect them together",
    "start": "1593460",
    "end": "1600710"
  },
  {
    "text": "so let's actually look at the code we take the first one and we pipe the output into the second one we pipe the",
    "start": "1600710",
    "end": "1606840"
  },
  {
    "text": "output into the third one assuming they've used bind on them so now that",
    "start": "1606840",
    "end": "1612389"
  },
  {
    "text": "solved our fact we've lived these individual pieces and we've composed them into a chain and what we can do is",
    "start": "1612389",
    "end": "1618149"
  },
  {
    "text": "we can give that whole thing a name we can say to validate input here's the three little functions we're going to use we're going to chain them together",
    "start": "1618149",
    "end": "1624630"
  },
  {
    "text": "like that and we're going to give it a name we call it validate the input just like we did before and what's cool about",
    "start": "1624630",
    "end": "1630570"
  },
  {
    "text": "this is if we see it's a black box we now have another function with one input",
    "start": "1630570",
    "end": "1636480"
  },
  {
    "text": "and two outputs so this bigger function looks just like smaller functions just like the Lego we",
    "start": "1636480",
    "end": "1642510"
  },
  {
    "text": "can keep going and going we can build a bigger that we can actually connect this to the other things and build a bigger function out of it so this is how you",
    "start": "1642510",
    "end": "1648210"
  },
  {
    "text": "can build you can see how it will feel bigger than some small things nicely so",
    "start": "1648210",
    "end": "1653310"
  },
  {
    "text": "we just keep going and going and we're done now one thing to point out is that the shapes and the types are kind of",
    "start": "1653310",
    "end": "1659370"
  },
  {
    "text": "different concepts when we're talking about composing they're two tracks we're talking about the shape of the track",
    "start": "1659370",
    "end": "1664560"
  },
  {
    "text": "right now the type of the data that goes through can change as it goes through so",
    "start": "1664560",
    "end": "1669720"
  },
  {
    "text": "we could start off with an apple and it can turn into banana and it can turn into a cherry or whatever so the type",
    "start": "1669720",
    "end": "1675810"
  },
  {
    "text": "cans the type can changes as long as the shapes match up so transforming the data is fine it doesn't even have to be so",
    "start": "1675810",
    "end": "1683220"
  },
  {
    "text": "here's an example where the types match up the bananas are the same and the cherries are the same and the shapes are",
    "start": "1683220",
    "end": "1689940"
  },
  {
    "text": "the same so that's good now sometimes the shapes do match up you put they're both to track but the types don't match",
    "start": "1689940",
    "end": "1695460"
  },
  {
    "text": "up so you have a banana here and a cherry here they don't match up so you're gonna have to use this converter",
    "start": "1695460",
    "end": "1700770"
  },
  {
    "text": "thing like I said you have to turn Bernards it's a cherry eseni not to make it go right so that's that now one thing",
    "start": "1700770",
    "end": "1709800"
  },
  {
    "text": "we've talked about is these one input and two outputs but sometimes you have functions with one input and one output",
    "start": "1709800",
    "end": "1716070"
  },
  {
    "text": "so for example if we're going to lowercase an email it can't go wrong",
    "start": "1716070",
    "end": "1723240"
  },
  {
    "text": "there's no error it's never going to break so really it's just a one track function one input one output so how",
    "start": "1723240",
    "end": "1731370"
  },
  {
    "text": "does that fit into the model the way we're doing it right now is it doesn't",
    "start": "1731370",
    "end": "1739490"
  },
  {
    "text": "you know so what we did need to do same thing we do before it's just use a function transformer to convert that",
    "start": "1739490",
    "end": "1746100"
  },
  {
    "text": "into a two-track thing and we call this map and Matt works very much like mine",
    "start": "1746100",
    "end": "1754490"
  },
  {
    "text": "there's a slot you feed in this one track function and it spits out a to TRO",
    "start": "1754490",
    "end": "1759620"
  },
  {
    "text": "function and the information from app is really really easy to we just say you know is the input good or bad if it's",
    "start": "1759620",
    "end": "1767539"
  },
  {
    "text": "good input we call that single track function and we take the output of that we turn it back into a success case and",
    "start": "1767539",
    "end": "1774080"
  },
  {
    "text": "if the infant is bad we just skip the whole thing so again it's like a three line implementation so now once we've",
    "start": "1774080",
    "end": "1781549"
  },
  {
    "text": "got this map function we can can turn the we can fit that lowercase email into our pipeline just by using math on it so",
    "start": "1781549",
    "end": "1788990"
  },
  {
    "text": "this is the principle we're doing here we're converting everything into a standard to track everything is",
    "start": "1788990",
    "end": "1794750"
  },
  {
    "text": "converted into the same shape as it were so we had a single track function that we convert it into to tow function we",
    "start": "1794750",
    "end": "1801140"
  },
  {
    "text": "have one of these points or switch functions and we turned it into a two track function and we'll find if we have",
    "start": "1801140",
    "end": "1806720"
  },
  {
    "text": "any other kind of weird functions we'll turn them into two trig functions and we just make them all into the same kind of thing once they're all the same kind of",
    "start": "1806720",
    "end": "1812390"
  },
  {
    "text": "thing we can connect them together so this is these map and bind our to function transformers these are the",
    "start": "1812390",
    "end": "1818750"
  },
  {
    "text": "first two and actually poly the most important function transformers the user program so here's what we had before and",
    "start": "1818750",
    "end": "1827360"
  },
  {
    "text": "these things were not composable they weren't able to be connected but after",
    "start": "1827360",
    "end": "1832880"
  },
  {
    "text": "we use these function transformers they are able to be protected we've turned everything into two tracks and we've",
    "start": "1832880",
    "end": "1838370"
  },
  {
    "text": "solved that problem so there we go that's so that's what function",
    "start": "1838370",
    "end": "1848210"
  },
  {
    "text": "transformers are for so turning the different shape functions into the same shape function and this is really a set up for the whole functional toolkit so",
    "start": "1848210",
    "end": "1854919"
  },
  {
    "text": "before I go into the functional toolkit I need to talk about what I mean by effects so what is an effect so an",
    "start": "1854919",
    "end": "1862220"
  },
  {
    "text": "effect is really just a kind of generic type like for example lists is it in a",
    "start": "1862220",
    "end": "1869090"
  },
  {
    "text": "generic list is a kind of effect it could be a type with extra data like option or results it can be a type that",
    "start": "1869090",
    "end": "1876679"
  },
  {
    "text": "interacts to the outside will because functional programmers hate to have random stuff going on it's like you want",
    "start": "1876679",
    "end": "1882260"
  },
  {
    "text": "to make sure you really control how interact outside well so in a synchronous stuff with tasks or dealing",
    "start": "1882260",
    "end": "1887540"
  },
  {
    "text": "with random numbers or whatever you want to make sure that's a special type function programmers also use things",
    "start": "1887540",
    "end": "1892760"
  },
  {
    "text": "like States and parses special types to represent things going on there it doesn't really matter what it is it",
    "start": "1892760",
    "end": "1898130"
  },
  {
    "text": "could be all sorts of stuff and it really doesn't matter what's what we're really going to focus on in what is common what are the patterns which are",
    "start": "1898130",
    "end": "1904670"
  },
  {
    "text": "calling behind all of these things so the implementation might be slightly different but there's a commonality",
    "start": "1904670",
    "end": "1909710"
  },
  {
    "text": "there's certain patterns which work for them so I'm going to focus on three types of this talk which is list option",
    "start": "1909710",
    "end": "1916040"
  },
  {
    "text": "and a sync and async is the F sharp version of task or promise or future",
    "start": "1916040",
    "end": "1921290"
  },
  {
    "text": "we're gonna commit right so normal world and effects world what do I mean by that",
    "start": "1921290",
    "end": "1928190"
  },
  {
    "text": "so in normal worlds you have things like strings and integers and your boolean and you also have functions you have a",
    "start": "1928190",
    "end": "1934430"
  },
  {
    "text": "function that turns an enter into string and you have a function that turns into a boolean and so on so you have this kind of world or all these things these",
    "start": "1934430",
    "end": "1940490"
  },
  {
    "text": "are things you are used to now in option world it's like a parallel universe",
    "start": "1940490",
    "end": "1945880"
  },
  {
    "text": "so everything in the normal world has a kind of mirror image in option worlds so",
    "start": "1945880",
    "end": "1951260"
  },
  {
    "text": "every time there's a string in normal well there's an option of string every time there's an in in normal world",
    "start": "1951260",
    "end": "1956570"
  },
  {
    "text": "there's an option of it and there's an option of Bourgh and just like the functions in the normal world there are",
    "start": "1956570",
    "end": "1962360"
  },
  {
    "text": "functions in option world except the functions always working options so you know it's they're going into string",
    "start": "1962360",
    "end": "1968840"
  },
  {
    "text": "function you have a something attention optional in international spring or an optional inter optional bull so this",
    "start": "1968840",
    "end": "1975770"
  },
  {
    "text": "kind of if option word world is something we're going to be coming back to the same way there's a list world and",
    "start": "1975770",
    "end": "1981440"
  },
  {
    "text": "in list world everything is a list so you have a list of strings and you have a list of hints and you have a list of",
    "start": "1981440",
    "end": "1987110"
  },
  {
    "text": "balls and all the functions are list functions they turn lists event into lists of strings and lists of intint",
    "start": "1987110",
    "end": "1992600"
  },
  {
    "text": "listicles all right you can see where I'm going with us you do the same thing with async will async of spring async",
    "start": "1992600",
    "end": "1999320"
  },
  {
    "text": "event async of or more task of string or tasks or whatever you wanna call it again all the functions live in async",
    "start": "1999320",
    "end": "2005080"
  },
  {
    "text": "walls so think about these worlds is going to be quite useful technique in",
    "start": "2005080",
    "end": "2011230"
  },
  {
    "text": "terms of understanding how to compose things and you can see there's just a generic pattern here it's like a generic",
    "start": "2011230",
    "end": "2016600"
  },
  {
    "text": "effect whatever the effect is there's a flex world where there's the effect of the string and the effect of the int and the",
    "start": "2016600",
    "end": "2022149"
  },
  {
    "text": "effect of the ball and all the functions of respective functions alright so if",
    "start": "2022149",
    "end": "2027789"
  },
  {
    "text": "you can understand that then you can understand what I'm gonna be talking about next now these these effects is a",
    "start": "2027789",
    "end": "2033580"
  },
  {
    "text": "it's like a functional programming jargon people call the effects some people call",
    "start": "2033580",
    "end": "2038919"
  },
  {
    "text": "them enhanced because it's like enhanced values data it's like a value with extra data like a result of an option",
    "start": "2038919",
    "end": "2045600"
  },
  {
    "text": "sometimes I call them elevated worlds because we often talk about lifting things from the normal world into this",
    "start": "2045600",
    "end": "2051820"
  },
  {
    "text": "other world so it's like lifting things up into the higher world or an elevated world so I'm gonna use e everything's in",
    "start": "2051820",
    "end": "2058000"
  },
  {
    "text": "EE worlds right so here's the challenge how do we actually work with these things I'll give you a real world",
    "start": "2058000",
    "end": "2064480"
  },
  {
    "text": "example so let's say I need to download Yoel and I'm gonna it's gonna be some Jason that comes out okay so I got Jason",
    "start": "2064480",
    "end": "2070570"
  },
  {
    "text": "and now I need to convert that Jason into for example a customer DTO so cuz",
    "start": "2070570",
    "end": "2076270"
  },
  {
    "text": "in my domain and then that dto needs to be converted into a valid customer so I'm gonna do some validation on it make",
    "start": "2076270",
    "end": "2082388"
  },
  {
    "text": "sure it's good and then I'm going to store that customer in a database okay so this is a kind of example tsunami ax",
    "start": "2082389",
    "end": "2088408"
  },
  {
    "text": "if we look at the things of how it works you know we download the JSON file we",
    "start": "2088409",
    "end": "2096730"
  },
  {
    "text": "start off in the normal world but the Downloads it might be asynchronous and it might only not work so it's an async",
    "start": "2096730",
    "end": "2103180"
  },
  {
    "text": "containing a result so it we're trans were traveling between another world if",
    "start": "2103180",
    "end": "2110109"
  },
  {
    "text": "I'm trying to decode the Chasen into into one of my objects that might or might not work because that might but my",
    "start": "2110109",
    "end": "2115630"
  },
  {
    "text": "got the time small so the Jason is in the normal thing it's like a string but when I decode it I'm like a result they",
    "start": "2115630",
    "end": "2123190"
  },
  {
    "text": "might not work so I'm now moving into another world when I do some validation you know I start with a normal DC oh and",
    "start": "2123190",
    "end": "2130660"
  },
  {
    "text": "I validate each field that the validation may be errored right there",
    "start": "2130660",
    "end": "2136119"
  },
  {
    "text": "each each piece of validation be an error so I have a result for that to construct a valid customer from either",
    "start": "2136119",
    "end": "2143290"
  },
  {
    "text": "the name and the email is valid and I want to construct a customer from that that's fine that's all normal world stuff so there's nothing special there",
    "start": "2143290",
    "end": "2150490"
  },
  {
    "text": "and then finally when I want to store the customer in the database I start with a customer and again it may be",
    "start": "2150490",
    "end": "2156309"
  },
  {
    "text": "asynchronous and it may not work so it's a async that's continuing the result so",
    "start": "2156309",
    "end": "2162039"
  },
  {
    "text": "here's the problem how do we compose these things together that's the problem they're all all kind of going in",
    "start": "2162039",
    "end": "2167859"
  },
  {
    "text": "different directions and stuff so there none of the worlds matchup this is where the functional tool kit comes in so",
    "start": "2167859",
    "end": "2174670"
  },
  {
    "text": "let's start with options here's our novel world and here's the world of",
    "start": "2174670",
    "end": "2180069"
  },
  {
    "text": "options now when you're working with options you often do this thing where",
    "start": "2180069",
    "end": "2185440"
  },
  {
    "text": "you have some sort of function that returns an optional value or nullable value if you replace option with",
    "start": "2185440",
    "end": "2190779"
  },
  {
    "text": "nullable if your language doesn't have options just replace everything I say with no level so you go to this world and then you need to do something with",
    "start": "2190779",
    "end": "2196630"
  },
  {
    "text": "this you kind of come back down to the normal world to do something go back up to the option will you go down and go back up you go down this is a really bad",
    "start": "2196630",
    "end": "2203589"
  },
  {
    "text": "way of doing things so in front of the phone list is like so on anti pan what you really want to do",
    "start": "2203589",
    "end": "2209470"
  },
  {
    "text": "is when you go to the option world you want to go up there and you want to stay up there there's long as possible now",
    "start": "2209470",
    "end": "2214660"
  },
  {
    "text": "you might have to come down at the very end you know just to return a string in your HTTP whatever but you try and stay",
    "start": "2214660",
    "end": "2220359"
  },
  {
    "text": "up in this world as long as possible that's the right doing it so here's my",
    "start": "2220359",
    "end": "2226000"
  },
  {
    "text": "add one function this is a normal world function now if I try and use it on an optional value I get an error because",
    "start": "2226000",
    "end": "2232510"
  },
  {
    "text": "add one doesn't work with options it only works with normal things right so let's say well I'm gonna watch special",
    "start": "2232510",
    "end": "2239500"
  },
  {
    "text": "function called add one to an option and if the option is valid if it's something",
    "start": "2239500",
    "end": "2244839"
  },
  {
    "text": "I'm gonna call add one on it and then I'm going to take that value and wrap it back up in an option and if it's not",
    "start": "2244839",
    "end": "2250450"
  },
  {
    "text": "valid I'm gonna turn nothing right now this is the same thing I'm talking about you're unwrapping it you're doing the",
    "start": "2250450",
    "end": "2257049"
  },
  {
    "text": "thing and you're wrapping it back up again this is like not how to do it don't come",
    "start": "2257049",
    "end": "2262119"
  },
  {
    "text": "down and do something and go back up again right so if you if you catch yourself doing this try and think about",
    "start": "2262119",
    "end": "2268270"
  },
  {
    "text": "doing another way so what is the other way how do you how do you add one function and stay up in option Wells the",
    "start": "2268270",
    "end": "2274990"
  },
  {
    "text": "add one isn't an option function so what we want to do is the this is our first",
    "start": "2274990",
    "end": "2281650"
  },
  {
    "text": "tool which is the map function moves things between worlds here's our",
    "start": "2281650",
    "end": "2287410"
  },
  {
    "text": "option our add one to options is the really explicit function that only works",
    "start": "2287410",
    "end": "2292420"
  },
  {
    "text": "in one particular case let's make it generic alright let's make it a generic function so I'm gonna do is part in a",
    "start": "2292420",
    "end": "2299710"
  },
  {
    "text": "parameter like what is the thing that I want to do well I don't care it could be anything so I'm going to pass that thing",
    "start": "2299710",
    "end": "2304990"
  },
  {
    "text": "in as a function then I'm gonna call it f because I have no idea what the function is it could be anything the program has functional programs to",
    "start": "2304990",
    "end": "2311170"
  },
  {
    "text": "use these very short letters sometimes because what can you out what else can you call it you know so I'm gonna run",
    "start": "2311170",
    "end": "2317200"
  },
  {
    "text": "that function on whatever the value is and make something otherwise it's nothing so that's my prioritized version",
    "start": "2317200",
    "end": "2323170"
  },
  {
    "text": "of this functional that's good that's better but I can go further what I can",
    "start": "2323170",
    "end": "2328180"
  },
  {
    "text": "do is have a lambda version so I'm",
    "start": "2328180",
    "end": "2333880"
  },
  {
    "text": "actually going to rewrite this so it returns the whole thing returns the lando returns a function and the input",
    "start": "2333880",
    "end": "2340450"
  },
  {
    "text": "to this lambda is an option and the output of this lambda is another option so this whole thing this lambda is an",
    "start": "2340450",
    "end": "2348250"
  },
  {
    "text": "option two option function and the input the prior I've given it which is in",
    "start": "2348250",
    "end": "2354130"
  },
  {
    "text": "normal world is a normal world function so what we've got here is a function that turns normal world functions into",
    "start": "2354130",
    "end": "2360069"
  },
  {
    "text": "option world functions and if you look at it on the picture like this it's like here's my op here's my normal function",
    "start": "2360069",
    "end": "2365770"
  },
  {
    "text": "and I use this this option map turns it into an optional world function so",
    "start": "2365770",
    "end": "2371260"
  },
  {
    "text": "that's what map is that is a function transformer that turns normal world",
    "start": "2371260",
    "end": "2377230"
  },
  {
    "text": "functions into optional world functions so when I have this map function I can then work on anything so one having away",
    "start": "2377230",
    "end": "2385210"
  },
  {
    "text": "a special thing of add one I can say option map of add one and now the add one has been moved into optional worlds",
    "start": "2385210",
    "end": "2390609"
  },
  {
    "text": "and I can use it with options without any problem let's do the same thing for",
    "start": "2390609",
    "end": "2396819"
  },
  {
    "text": "lists here's adding one to each item in a list okay so for each item in the lists I add one",
    "start": "2396819",
    "end": "2404319"
  },
  {
    "text": "to it and I put it back in a new list and I return the new list again this is super super specific for add one it's",
    "start": "2404319",
    "end": "2410650"
  },
  {
    "text": "like I would never buy a function like this because I'm unwrapping it and wrapping it you know applying and wrapping up",
    "start": "2410650",
    "end": "2415920"
  },
  {
    "text": "doing exactly what I said you shouldn't do you don't want to come down do the thing go back so this is the same pan so",
    "start": "2415920",
    "end": "2421529"
  },
  {
    "text": "even we're talking about lists and sort of options it's the same kind of pattern so even though working with lists it's",
    "start": "2421529",
    "end": "2427470"
  },
  {
    "text": "different from working with options we're making the same kind of mistake so again let's make a generic we're gonna",
    "start": "2427470",
    "end": "2434369"
  },
  {
    "text": "pass in a parameter what do we want to do with each item in the list we'll pass in a function f and for each item the",
    "start": "2434369",
    "end": "2439890"
  },
  {
    "text": "lists will call that function f to get a new item so now we've parameterised it",
    "start": "2439890",
    "end": "2445260"
  },
  {
    "text": "and then what we'll do is we'll lambda rise it as well so we've now got a",
    "start": "2445260",
    "end": "2450599"
  },
  {
    "text": "lambda which takes a list as input and it spits a list as output and again our",
    "start": "2450599",
    "end": "2457769"
  },
  {
    "text": "little parameter is a normal function so what I've done again is we've taken we've created a function that takes",
    "start": "2457769",
    "end": "2464160"
  },
  {
    "text": "normal world functions and puts them into your list of other functions so",
    "start": "2464160",
    "end": "2470910"
  },
  {
    "text": "that's great and now we can use it just like we did before we can say add one we turn into list and use it for that and",
    "start": "2470910",
    "end": "2478170"
  },
  {
    "text": "people say why is this any better than writing run loops it's because it's a pattern once you recognize this pattern",
    "start": "2478170",
    "end": "2484170"
  },
  {
    "text": "you know a bunch of stuff about it I know for example I know that Matt can never change the length of a list it's",
    "start": "2484170",
    "end": "2489720"
  },
  {
    "text": "always gonna be seen under item so I can just tell straight away if I've seen at full there was something I would never",
    "start": "2489720",
    "end": "2494789"
  },
  {
    "text": "really be 100% sure all right and you can do the same thing for async you can",
    "start": "2494789",
    "end": "2499920"
  },
  {
    "text": "have a sink map that turns normal functions into a sink world so most generic functions most generic types",
    "start": "2499920",
    "end": "2506490"
  },
  {
    "text": "that list and may have an option that they have a map function use it and if you write your own generic type write a",
    "start": "2506490",
    "end": "2512220"
  },
  {
    "text": "map function for good use now in FP terminology this is called a functor so",
    "start": "2512220",
    "end": "2517500"
  },
  {
    "text": "a functor is some sort of effect type like optional list or async plus a map function which is called map or it can",
    "start": "2517500",
    "end": "2524640"
  },
  {
    "text": "be called select or it can be called lift there's lots of different names of this thing and it has to have a sensible implementation known as the functor",
    "start": "2524640",
    "end": "2531390"
  },
  {
    "text": "clause it's basically it's just to make sure you have a sensible implementation",
    "start": "2531390",
    "end": "2536420"
  },
  {
    "text": "right what about tool number two which is moving values between worlds this is",
    "start": "2536809",
    "end": "2542519"
  },
  {
    "text": "really easy we have a value in normal world and we want to move it up to the",
    "start": "2542519",
    "end": "2547740"
  },
  {
    "text": "world option and that's normally called return like here's the example you know it's",
    "start": "2547740",
    "end": "2553620"
  },
  {
    "text": "different for each type of thing so to make an option you say it's something that's really easy so normal world value",
    "start": "2553620",
    "end": "2559470"
  },
  {
    "text": "and an optional world value and for making a list you can take a single item and make it into a lists and list return",
    "start": "2559470",
    "end": "2566310"
  },
  {
    "text": "or list singleton whatever you want to call it again to make a single item list is really easy so there's nothing",
    "start": "2566310",
    "end": "2572550"
  },
  {
    "text": "special about this type of function list is useful in combination with other functions right what about bind that's a",
    "start": "2572550",
    "end": "2581220"
  },
  {
    "text": "familiar word so what's a world's crossing function I'm going to be talking about world crossing functions",
    "start": "2581220",
    "end": "2586980"
  },
  {
    "text": "so here it is a function you give me a maximum integer and I give you a list of integers up to that maximum value so",
    "start": "2586980",
    "end": "2593130"
  },
  {
    "text": "this is a function that takes the integer and returns a list of integers so we start the input is the list that",
    "start": "2593130",
    "end": "2599910"
  },
  {
    "text": "is a normal value and the output is in list world okay so this is a world",
    "start": "2599910",
    "end": "2605430"
  },
  {
    "text": "crossing function you start down at the bottom and you end up higher up what",
    "start": "2605430",
    "end": "2610860"
  },
  {
    "text": "about getting a customer from a database you give me a customer ID and I'm going to try and get the customer from a",
    "start": "2610860",
    "end": "2616710"
  },
  {
    "text": "database so if the customers found I'm not actually going to show the database code obviously somehow you do the database query if the customers found",
    "start": "2616710",
    "end": "2622890"
  },
  {
    "text": "you're gonna say yeah here's some custom later I'm gonna give it to you if the customer isn't found I've got nothing to",
    "start": "2622890",
    "end": "2628650"
  },
  {
    "text": "give you so we're gonna return nothing so again this is a function that crosses",
    "start": "2628650",
    "end": "2635130"
  },
  {
    "text": "worlds you give me a customer ID and I might or might not we'll give you a bad customer data is an optional I give you",
    "start": "2635130",
    "end": "2641730"
  },
  {
    "text": "back an optional customer so we start off with the value in normal world and we end up with a value in functional",
    "start": "2641730",
    "end": "2647760"
  },
  {
    "text": "world so here we are customer ID down here option customer data up here these",
    "start": "2647760",
    "end": "2654570"
  },
  {
    "text": "world costing functions are really common so how do you cheney's things together so let's say we have options we",
    "start": "2654570",
    "end": "2660180"
  },
  {
    "text": "have an option world we do something and it returns an option and we want to do something else well if the option is",
    "start": "2660180",
    "end": "2665940"
  },
  {
    "text": "something then we can do the next thing and if that is something we can do the next thing and if that is something we",
    "start": "2665940",
    "end": "2671820"
  },
  {
    "text": "can do the next thing and so on and if any of them are nothing then we have this kind of skip right so this pattern",
    "start": "2671820",
    "end": "2679170"
  },
  {
    "text": "is very common when you have these world crossing functions you have these nested checks you keep",
    "start": "2679170",
    "end": "2684280"
  },
  {
    "text": "nesting and nesting and nesting nesting and people call this the pyramid of do because it looks with you although now",
    "start": "2684280",
    "end": "2691359"
  },
  {
    "text": "you see this all over world I mean you see this with tasks so that it's not just options tasks are the same thing",
    "start": "2691359",
    "end": "2696910"
  },
  {
    "text": "you run a task and when the task is finished you do the next task and when the task is finished you do the next task when the tarsals finishing the next",
    "start": "2696910",
    "end": "2703000"
  },
  {
    "text": "tiles and so on exactly the same kind of thing you get this nested pyramid this nested indent and nested callbacks and",
    "start": "2703000",
    "end": "2710260"
  },
  {
    "text": "this pyramid so anytime you have these world crossing functions you're going to run into this pattern okay so how do we",
    "start": "2710260",
    "end": "2717400"
  },
  {
    "text": "solve this pattern how do we fix this problem let's look at the option one and notice there's a pattern that we can",
    "start": "2717400",
    "end": "2724420"
  },
  {
    "text": "exploit if it's something do something otherwise do nothing if it's something do something otherwise do nothing if",
    "start": "2724420",
    "end": "2730180"
  },
  {
    "text": "it's something do something otherwise do nothing that's the pattern we can exploit so let's take it let's make a little helper function to that we're",
    "start": "2730180",
    "end": "2736210"
  },
  {
    "text": "going to call it you know if it's something then do something otherwise do nothing all right that's the pattern how",
    "start": "2736210",
    "end": "2742930"
  },
  {
    "text": "do we make a helper function well we have a little we don't exactly know what you want to do with it so we're going to parameterize it with a pair thought with",
    "start": "2742930",
    "end": "2749109"
  },
  {
    "text": "a function parameter so here's the actual helper function if something dude I'm going to call it if the option is",
    "start": "2749109",
    "end": "2754569"
  },
  {
    "text": "something do it what is it we're going to do we don't know otherwise return",
    "start": "2754569",
    "end": "2760000"
  },
  {
    "text": "nothing so whatever it is we're going to do we don't know what it is so we're going to pass it in as a function priority so this if some do is that it",
    "start": "2760000",
    "end": "2767470"
  },
  {
    "text": "really useful it will help a function and you know go back to our original example we can say well do something if",
    "start": "2767470",
    "end": "2774130"
  },
  {
    "text": "it's something do the next thing if it's something do the next thing if it's something do the next thing so we've taken our kind of pyramid shape",
    "start": "2774130",
    "end": "2780880"
  },
  {
    "text": "and turned it in a nice linear up-and-down shape much easier to read",
    "start": "2780880",
    "end": "2786240"
  },
  {
    "text": "and let's revisit that well way analogy because it's very similar",
    "start": "2786240",
    "end": "2792220"
  },
  {
    "text": "instead of having success and failure we have something or nothing for options and we've already seen this if it's",
    "start": "2792220",
    "end": "2799599"
  },
  {
    "text": "something to the next thing if it's nothing to do that I pass it so we're going to follow exactly the same thing",
    "start": "2799599",
    "end": "2804760"
  },
  {
    "text": "we did before we want to cheney's together and we're going to use bind again and we're going to do this thing",
    "start": "2804760",
    "end": "2811990"
  },
  {
    "text": "where we have these functions that don't fit and we want to turn them into the functions that do fit and we're going to",
    "start": "2811990",
    "end": "2817530"
  },
  {
    "text": "write a bind function which is a transformer function and this time the code is slightly different because we're",
    "start": "2817530",
    "end": "2823800"
  },
  {
    "text": "talking about options rather than results but the idea is exactly the same so it's another function transformer so",
    "start": "2823800",
    "end": "2829380"
  },
  {
    "text": "in this case defined for options we say if the option is something do the next thing and if the option is nothing keep",
    "start": "2829380",
    "end": "2837750"
  },
  {
    "text": "going on the error path now it turns out that's exactly the function we just wrote that if something do function is",
    "start": "2837750",
    "end": "2844050"
  },
  {
    "text": "exactly the same limitation so this you know option example that we wrote with",
    "start": "2844050",
    "end": "2851310"
  },
  {
    "text": "the nested thing which is ugly and horrible we use this option buying function like I say it's exactly the same as that if something do function",
    "start": "2851310",
    "end": "2857610"
  },
  {
    "text": "exactly same implementation right and it's parameter is exactly the same way",
    "start": "2857610",
    "end": "2862890"
  },
  {
    "text": "and we can then turn our original ugly code into something nice and clean no",
    "start": "2862890",
    "end": "2868830"
  },
  {
    "text": "pyramid anywhere and let's do the same thing for tasks let's get rid of the task pyramid here's how you change you",
    "start": "2868830",
    "end": "2876600"
  },
  {
    "text": "task together if the task completes or when the task completes you do the next thing otherwise if the task doesn't complete you bypass it right so that's",
    "start": "2876600",
    "end": "2883770"
  },
  {
    "text": "the when finish to do so let's do the same thing here's the uh none untidy",
    "start": "2883770",
    "end": "2891990"
  },
  {
    "text": "version with a nesting and there so on which is really ugly so we're going to write a helper function called when",
    "start": "2891990",
    "end": "2898080"
  },
  {
    "text": "finished do otherwise known as bind alright so when the thing is finished we",
    "start": "2898080",
    "end": "2904140"
  },
  {
    "text": "can do something whatever the next thing is but we don't know what it is so we'll just pass in a function parameter for that there's the function parameter",
    "start": "2904140",
    "end": "2910440"
  },
  {
    "text": "we're passing in and once we have this task finished do or task bind we can",
    "start": "2910440",
    "end": "2915750"
  },
  {
    "text": "make our pyramid logic much more simple with a straight linear line so there you",
    "start": "2915750",
    "end": "2921840"
  },
  {
    "text": "go so bind is like one of the most important functions in important",
    "start": "2921840",
    "end": "2927900"
  },
  {
    "text": "concepts in functional programming because it makes world crossing functions composable you know this is",
    "start": "2927900",
    "end": "2934020"
  },
  {
    "text": "the original version of our functional it's a world crossing function it starts in normal world ends up in an effects",
    "start": "2934020",
    "end": "2939210"
  },
  {
    "text": "world whether it's an option or a list or results or an async what it was after we do binds we have a",
    "start": "2939210",
    "end": "2947070"
  },
  {
    "text": "horizontal function so it's the whole function lives in the effects world so",
    "start": "2947070",
    "end": "2952800"
  },
  {
    "text": "after we did bind we had the option input option output or we had to list in put this down what are they thinking",
    "start": "2952800",
    "end": "2959250"
  },
  {
    "text": "but task input task out from whatever and if you go back to the railway model",
    "start": "2959250",
    "end": "2964590"
  },
  {
    "text": "it's like this is what this is the world crossing function we said and after we did bind we have this nice to track",
    "start": "2964590",
    "end": "2971040"
  },
  {
    "text": "model so you can see this is really really powerful and you often have this situation where you have a bunch of",
    "start": "2971040",
    "end": "2976650"
  },
  {
    "text": "world crossing functions or diagonal functions and you need to chain them together and so what bind does is it",
    "start": "2976650",
    "end": "2982650"
  },
  {
    "text": "allows them to be composed because the diagonal functions as they stand cannot be composed but if you do bind and you",
    "start": "2982650",
    "end": "2989580"
  },
  {
    "text": "make it into a horizontal function and you bind the next one and you make it into horizontal function you buy the next one you make it horizontal I'm sure",
    "start": "2989580",
    "end": "2995850"
  },
  {
    "text": "you now have a bunch of holes on the functions and you can glue them all together all right so the whole point is",
    "start": "2995850",
    "end": "3002330"
  },
  {
    "text": "trying how can we make our functions composable that's what mine's all about so an FP terminology that's what a monad",
    "start": "3002330",
    "end": "3009380"
  },
  {
    "text": "is so we've been talking about mode as its whole time monad is an effect type plus something return plus a bind",
    "start": "3009380",
    "end": "3017780"
  },
  {
    "text": "function basically it's a type plus a bind function plus some rules about how to implement now the buying function is",
    "start": "3017780",
    "end": "3023990"
  },
  {
    "text": "all sorts of different names in other languages it's called flat map it's sometimes called when then do or when do",
    "start": "3023990",
    "end": "3031550"
  },
  {
    "text": "in c-sharp is called select many you know link and it has to have a sensible implementation but that's all a monad is",
    "start": "3031550",
    "end": "3037970"
  },
  {
    "text": "is really just a tight manner and an Associated bind operation so use a monad",
    "start": "3037970",
    "end": "3043610"
  },
  {
    "text": "if you want to chain effects generating functions in series right I'll quickly",
    "start": "3043610",
    "end": "3048740"
  },
  {
    "text": "talk about applicatives for doing parallel stuff if you want to combine",
    "start": "3048740",
    "end": "3054350"
  },
  {
    "text": "effects in parallel sometimes you want to have both things like if you were combine two options you want to get an option that contains the",
    "start": "3054350",
    "end": "3060440"
  },
  {
    "text": "pair like if you have some 42 and some hello you want to have 42 and lower but",
    "start": "3060440",
    "end": "3065630"
  },
  {
    "text": "you know if one of them is missing the overall thing is missing similarly if",
    "start": "3065630",
    "end": "3071030"
  },
  {
    "text": "you have two lists and you want to combine them we want to get a list of pairs or something here's a list of all pairs or you might want to have the list",
    "start": "3071030",
    "end": "3078320"
  },
  {
    "text": "of pairs that way either across products or as oppressed so this is a general",
    "start": "3078320",
    "end": "3084470"
  },
  {
    "text": "concept inflation ponycorn on your ticket of funk sure it's the same kind of thing it's like a monad like a functor it's a way of combining things",
    "start": "3084470",
    "end": "3092060"
  },
  {
    "text": "in the effects world and you preserve them you know you can bind them together in parallel so let's look an example",
    "start": "3092060",
    "end": "3099290"
  },
  {
    "text": "yeah there's the picot all this stuff you don't really have to worry about the jargon really the jargon",
    "start": "3099290",
    "end": "3105109"
  },
  {
    "text": "I'm gonna throw this out here but don't worry about the job sometimes you see the word lift and we're actually going",
    "start": "3105109",
    "end": "3111260"
  },
  {
    "text": "to use the word lift sometimes you see the word apply these are all different variants of this kind of concept",
    "start": "3111260",
    "end": "3118119"
  },
  {
    "text": "sometimes you see angle brackets with a star in the middle that's the high school version of this right so why is",
    "start": "3118119",
    "end": "3126020"
  },
  {
    "text": "this useful because you're going to do things in parallel here's our customer",
    "start": "3126020",
    "end": "3131150"
  },
  {
    "text": "and we've got our validation logic right the problem with chaining them in series is that as soon as the first one fails",
    "start": "3131150",
    "end": "3136910"
  },
  {
    "text": "the rest of them fail and we never get a list of errors we just get the first error so it'd be quite nice rather than",
    "start": "3136910",
    "end": "3142790"
  },
  {
    "text": "change them in series we'll only get one hour at a time is to get all the errors",
    "start": "3142790",
    "end": "3147890"
  },
  {
    "text": "at once all the validation errors at once and in order to do that we have to run them in parallel like this so we one each feel gets validated separately and",
    "start": "3147890",
    "end": "3154730"
  },
  {
    "text": "then we combine them in parallel and that's exactly what the applicative team does we get all the errors at once so",
    "start": "3154730",
    "end": "3163190"
  },
  {
    "text": "you know just like we had before we've got all these in independent results",
    "start": "3163190",
    "end": "3168770"
  },
  {
    "text": "from the validation that we want to combine them now we have a we have a in normal world we have a way of combining",
    "start": "3168770",
    "end": "3174140"
  },
  {
    "text": "them we just call a constructor or you know a function that makes these things so that's not a problem we know how to",
    "start": "3174140",
    "end": "3180530"
  },
  {
    "text": "combine them in normal world but we don't know how to combine them in result worlds and what we want to do is combine",
    "start": "3180530",
    "end": "3186230"
  },
  {
    "text": "them in the result world and have the output also being result world so we have all these errors and we combine",
    "start": "3186230",
    "end": "3191450"
  },
  {
    "text": "them to make a customer and if any of them are not valid we get an error on that side too so that's what I flick it",
    "start": "3191450",
    "end": "3196880"
  },
  {
    "text": "is for you're combining things in result world to make a new result or",
    "start": "3196880",
    "end": "3202130"
  },
  {
    "text": "complaining things in this world we can you list or combining things in a sink or two we can use a sink or whatever and",
    "start": "3202130",
    "end": "3207829"
  },
  {
    "text": "these functions are normally called lifts like a for applicative lifts a 2 is a 2 parameter lift",
    "start": "3207829",
    "end": "3214430"
  },
  {
    "text": "lift a3 a3 frowns and lifts so if I just like we had a list map which would have",
    "start": "3214430",
    "end": "3219800"
  },
  {
    "text": "a one-parameter function lift it up lift to will lift up a two parameter function",
    "start": "3219800",
    "end": "3224839"
  },
  {
    "text": "so this one has the two parameters lift three will lift up a three parameter function and so on",
    "start": "3224839",
    "end": "3230150"
  },
  {
    "text": "so if you see lifts is doing the same thing as markets moving it from one world to another world so if you look at",
    "start": "3230150",
    "end": "3237020"
  },
  {
    "text": "the code to convert our detail into a customer we validate the name it could",
    "start": "3237020",
    "end": "3243710"
  },
  {
    "text": "be valid me or it could be an error we valid an email it could be a valid name or an error and found that in one area",
    "start": "3243710",
    "end": "3248900"
  },
  {
    "text": "we validate the birthday could be father of an error and now we want to try and make a customer out of these things and",
    "start": "3248900",
    "end": "3253910"
  },
  {
    "text": "so we use they'll make customer function and we lift it into result wells and",
    "start": "3253910",
    "end": "3259130"
  },
  {
    "text": "once we lift it into result worlds we can pass in those three parameters and we get back a results containing a",
    "start": "3259130",
    "end": "3266089"
  },
  {
    "text": "customer so that's the magic I'm not gonna explain how it works but it's kind of magic and we get a nice list of",
    "start": "3266089",
    "end": "3273260"
  },
  {
    "text": "errors rather than a single error back so again don't worry about I picked it's working too much just be aware that if",
    "start": "3273260",
    "end": "3279920"
  },
  {
    "text": "you want to do if you want to chain things in parallel using applicative if you want to change things in series use",
    "start": "3279920",
    "end": "3285650"
  },
  {
    "text": "them own app all right so let's look at the tools so we've been talking about we've talked about a map which lifts",
    "start": "3285650",
    "end": "3291170"
  },
  {
    "text": "things into a fix world return this individual items individual values like Springs and int into FX world bind the",
    "start": "3291170",
    "end": "3298430"
  },
  {
    "text": "four diagonal functions well forcing functions apply or lift for combining",
    "start": "3298430",
    "end": "3303440"
  },
  {
    "text": "things in parallel right so let's use all the tools together let's actually solve that real world problem that I",
    "start": "3303440",
    "end": "3309530"
  },
  {
    "text": "talked about so we had downloading a URL downloading the Jason converting VTO etc",
    "start": "3309530",
    "end": "3315559"
  },
  {
    "text": "so downloading the JSON file we started the URL and we end up up here",
    "start": "3315559",
    "end": "3323329"
  },
  {
    "text": "decoding the jason we started in the normal world and we ended it in results the validation feels we end up in",
    "start": "3323329",
    "end": "3331250"
  },
  {
    "text": "results constructing the customer was all normal stuff and then storing the",
    "start": "3331250",
    "end": "3336349"
  },
  {
    "text": "customer in the database was normal world to async result world alright so let's look at we can use the tools to",
    "start": "3336349",
    "end": "3342770"
  },
  {
    "text": "compose though before we didn't know how that we didn't know how to do it now we do know how to do it so let's start with",
    "start": "3342770",
    "end": "3347990"
  },
  {
    "text": "the validation we've got these three results and we want to make a customer ask them and we",
    "start": "3347990",
    "end": "3353450"
  },
  {
    "text": "saw how to do that using the applicator using this three so that's good that's one thing so now what we do is we now",
    "start": "3353450",
    "end": "3360140"
  },
  {
    "text": "have a normal DTO in normal world and we have a customer in results world so",
    "start": "3360140",
    "end": "3365900"
  },
  {
    "text": "that's that particular problem solved so there's our DTO to customer that's a diagonal world busing function we also",
    "start": "3365900",
    "end": "3373280"
  },
  {
    "text": "have the jason to the DTO that's also a diagonal function because the DTO you might the jason might not",
    "start": "3373280",
    "end": "3379940"
  },
  {
    "text": "work it might be invalid so we have these two diagonal functions and we want to connect them together we want to take",
    "start": "3379940",
    "end": "3385010"
  },
  {
    "text": "the output of the the jason which is the DTO and we want to feed that into the next one right and as they as they stand",
    "start": "3385010",
    "end": "3392510"
  },
  {
    "text": "they can't be connected but if we use bind that will solve a problem we're",
    "start": "3392510",
    "end": "3397700"
  },
  {
    "text": "going to use bind and make them both horizontal like that now they're both horizontal we can connect them all together to make a big",
    "start": "3397700",
    "end": "3403580"
  },
  {
    "text": "function so now we have a big function that starts off with jason and ends up",
    "start": "3403580",
    "end": "3408920"
  },
  {
    "text": "with a customer so the DTO is now hitting the banana has now gone away all",
    "start": "3408920",
    "end": "3414140"
  },
  {
    "text": "right so there's our new function so we're building bigger functions and smaller functions now we're going to reuse this function in in the in the",
    "start": "3414140",
    "end": "3421250"
  },
  {
    "text": "overall bigger picture right so this is what the code looks like again the code is really simple we do a bind and",
    "start": "3421250",
    "end": "3428330"
  },
  {
    "text": "another bind literally three lines of code and again takes much more time to",
    "start": "3428330",
    "end": "3433640"
  },
  {
    "text": "explain it than to actually write it alright so now we have this now our final thing is living up in in in async",
    "start": "3433640",
    "end": "3440540"
  },
  {
    "text": "result world and this is not there this is in result world but it's not in async",
    "start": "3440540",
    "end": "3446060"
  },
  {
    "text": "result world so we need to move it up another level need to move it one stage higher how do we do that how do we move",
    "start": "3446060",
    "end": "3453440"
  },
  {
    "text": "a function from one world to another world we use map so we're going to use map to lift it up to the async wall now",
    "start": "3453440",
    "end": "3460060"
  },
  {
    "text": "so our original function which is kind of all these diagonal functions that didn't fit together we've flattened them",
    "start": "3460060",
    "end": "3465200"
  },
  {
    "text": "out horizontally and we've lifted them up so now we have a final function which works up in the async world and it's",
    "start": "3465200",
    "end": "3470390"
  },
  {
    "text": "horizontal it's gonna be easy to compose right now what about storing the customer in the database that was also",
    "start": "3470390",
    "end": "3476600"
  },
  {
    "text": "another diagonal function and again it's not composable as it stands but again we",
    "start": "3476600",
    "end": "3482750"
  },
  {
    "text": "can use bind we're gonna take this thing we're going to turn it horizontal like that and now we have a horizontal",
    "start": "3482750",
    "end": "3488480"
  },
  {
    "text": "function that lives entirely in async will so now if you look at all the different steps we have with the",
    "start": "3488480",
    "end": "3493550"
  },
  {
    "text": "original step was downloading URL and that made an async results which contains and jason and now we have the",
    "start": "3493550",
    "end": "3501410"
  },
  {
    "text": "jason - customer function which we built from the various pieces and that now lives in a single result world because",
    "start": "3501410",
    "end": "3508040"
  },
  {
    "text": "we started off down and results we did the map to lift it up and the other function which was storing a customer",
    "start": "3508040",
    "end": "3513290"
  },
  {
    "text": "into a database again that was originally a diagonal function and we made a horizontal so it's now a purely",
    "start": "3513290",
    "end": "3519740"
  },
  {
    "text": "async world function and these are all async wall functions and they can all be composed together really nicely now so",
    "start": "3519740",
    "end": "3526220"
  },
  {
    "text": "we start here we go up we compose and we compose and we can connect these",
    "start": "3526220",
    "end": "3532460"
  },
  {
    "text": "together and make it into one giant function so this is how you use the tools to do real stuff and again it's",
    "start": "3532460",
    "end": "3539930"
  },
  {
    "text": "more complicated to explain if we actually look at the code there's the code we had before and this is the this is the the actual main function that",
    "start": "3539930",
    "end": "3546170"
  },
  {
    "text": "downloads and stores a customer you start with the URL you download it you",
    "start": "3546170",
    "end": "3551630"
  },
  {
    "text": "convert it adjacent you do the jason to customer conversion then you have to do it in the extinct wills and then finally",
    "start": "3551630",
    "end": "3557359"
  },
  {
    "text": "you store the customer in the databases and that has to use buying you know so it's six lines of code or eight lines of",
    "start": "3557359",
    "end": "3563420"
  },
  {
    "text": "code these patterns are very unfamiliar initially but once you see these patterns you'll be able to look at this",
    "start": "3563420",
    "end": "3569060"
  },
  {
    "text": "code and know exactly what it does right so much more time to explain than to",
    "start": "3569060",
    "end": "3574430"
  },
  {
    "text": "write it but you can get once they're common patterns once you know what they are this mean it easy to use right so",
    "start": "3574430",
    "end": "3580640"
  },
  {
    "text": "final thing is all this buying stuff can get really ugly and so a lot of functional programming languages",
    "start": "3580640",
    "end": "3586339"
  },
  {
    "text": "actually have support from monads built in so if you solve of F shelf has something called computation expressions Haskell has do notation Scala has for",
    "start": "3586339",
    "end": "3593690"
  },
  {
    "text": "conventions C sharp has select many so you can actually overload select many to",
    "start": "3593690",
    "end": "3598849"
  },
  {
    "text": "do a lot of this stuff for you that's kind of cool right so finally just want to remember that functional programming",
    "start": "3598849",
    "end": "3604940"
  },
  {
    "text": "jargon is actually not that scary hopefully the concepts makes sense even if the words are a bit scary hopefully",
    "start": "3604940",
    "end": "3611869"
  },
  {
    "text": "you can see why monads are such a big deal and everyone talks about motors all the time if you think about buying monads you can see why that's valuable",
    "start": "3611869",
    "end": "3619170"
  },
  {
    "text": "this is a very generic toolkit all the spined and math and stuff you know this is a concept the worse for any effects",
    "start": "3619170",
    "end": "3625350"
  },
  {
    "text": "will so not just for options not just for results not just async anything and",
    "start": "3625350",
    "end": "3631410"
  },
  {
    "text": "so as a functional programmer you basically use these kinds of functions over and over for everything you do and now when you see if you look at",
    "start": "3631410",
    "end": "3637350"
  },
  {
    "text": "functional coder you see map and left and bind you'll know what people talking about like I say don't expect to",
    "start": "3637350",
    "end": "3642390"
  },
  {
    "text": "understand everything straight away so I'm gonna post the slides of videos on",
    "start": "3642390",
    "end": "3648150"
  },
  {
    "text": "my website at some point if you're interested in some of the stuff I've talked about I have over later talk",
    "start": "3648150",
    "end": "3653850"
  },
  {
    "text": "which is functional design patterns I have another one called the pram composition I have another one called domain mod naming functional and I have",
    "start": "3653850",
    "end": "3660960"
  },
  {
    "text": "a whole book about domain modeling and functional so if you're interested in that let me know I think is actually for sale at the bookstore here contact me on",
    "start": "3660960",
    "end": "3667860"
  },
  {
    "text": "Twitter and thanks very much [Applause]",
    "start": "3667860",
    "end": "3679700"
  }
]