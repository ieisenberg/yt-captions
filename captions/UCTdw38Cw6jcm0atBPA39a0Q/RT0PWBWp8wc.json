[
  {
    "text": "thank you for coming along um so",
    "start": "359",
    "end": "6359"
  },
  {
    "text": "um set comp I'm gonna I've got a lot to cover so I'm going to go real fast um I think I will say I'll take",
    "start": "6359",
    "end": "14040"
  },
  {
    "text": "questions as I go if I get too many questions I'll say take them to the end but for the moment I'll say I'll take",
    "start": "14040",
    "end": "19800"
  },
  {
    "text": "questions as I go some of you might have already attended",
    "start": "19800",
    "end": "24900"
  },
  {
    "text": "Martin I I won't try and pronounce Martin's surname",
    "start": "24900",
    "end": "30720"
  },
  {
    "text": "um the presentation on set comp today there will be a bit of commonality with um what Martin covered but Martin was",
    "start": "30720",
    "end": "37800"
  },
  {
    "text": "taking a much more practical approach than than I'm going to take I'm going to be sort of this is this is this is the",
    "start": "37800",
    "end": "44160"
  },
  {
    "text": "theory well you know this is the details um",
    "start": "44160",
    "end": "49980"
  },
  {
    "text": "okay uh what do I say I I did stuff with Linux I do stuff with",
    "start": "49980",
    "end": "55980"
  },
  {
    "text": "the Linux I do training Oslo I will do training in oslook",
    "start": "55980",
    "end": "63719"
  },
  {
    "text": "or elsewhere um so a bit of a quick introduction",
    "start": "63719",
    "end": "70439"
  },
  {
    "text": "what's the idea here the kernel provides system calls system",
    "start": "70439",
    "end": "77640"
  },
  {
    "text": "calls are the way that programs ask the kernel to do things in the Linux kernel there's about 400",
    "start": "77640",
    "end": "83159"
  },
  {
    "text": "system calls the way a lot of us think about system calls is they're a way of",
    "start": "83159",
    "end": "88619"
  },
  {
    "text": "getting the kernel to do something for me the way an attacker thinks about a",
    "start": "88619",
    "end": "94680"
  },
  {
    "text": "system call is hey this is one more way in which I can try and attack the system",
    "start": "94680",
    "end": "99900"
  },
  {
    "text": "and oh goody there's about 400 of them and let's try them all out",
    "start": "99900",
    "end": "106560"
  },
  {
    "text": "but most programs only use a small subset of the available system calls",
    "start": "106560",
    "end": "112500"
  },
  {
    "text": "even a big program like emacs probably only uses 10 percent of those 400",
    "start": "112500",
    "end": "120960"
  },
  {
    "text": "different system calls and most out of the system calls you know they do what they don't get used",
    "start": "120960",
    "end": "128000"
  },
  {
    "text": "so the the supposition is that suppose you've got some program and you know it makes a certain set of system calls and",
    "start": "128220",
    "end": "135300"
  },
  {
    "text": "one day you observe it makes another system call different than you ever expected perhaps the reason is the code",
    "start": "135300",
    "end": "144840"
  },
  {
    "text": "got taken over by an attacker got compromised by an attacker and the attacker is making the the program",
    "start": "144840",
    "end": "152160"
  },
  {
    "text": "execute some arbitrary code the process executes some arbitrary code in the hope",
    "start": "152160",
    "end": "157680"
  },
  {
    "text": "of compromising the system so if you see the program make an unexpected system call then you want to",
    "start": "157680",
    "end": "165480"
  },
  {
    "text": "stop that from happening and this is what sec.com lets you do it lets you prevent the program making unexpected",
    "start": "165480",
    "end": "173220"
  },
  {
    "text": "system calls and the the idea then is of course that",
    "start": "173220",
    "end": "179400"
  },
  {
    "text": "you're removing those other possible vectors for attack because the attacker can't exercise those other system calls",
    "start": "179400",
    "end": "186300"
  },
  {
    "text": "that were were not expected we're reducing the attack surface of the",
    "start": "186300",
    "end": "191340"
  },
  {
    "text": "kernel the whole point of State comp then there's a fundamental building block in",
    "start": "191340",
    "end": "196739"
  },
  {
    "text": "various kinds of sandboxing tools and in container Frameworks and and so on",
    "start": "196739",
    "end": "204000"
  },
  {
    "text": "foreign 's been around for quite a long time but at the beginning back in 2005 it was a",
    "start": "204000",
    "end": "210420"
  },
  {
    "text": "much simpler thing it only really became interesting in 2012 so just over 10",
    "start": "210420",
    "end": "216480"
  },
  {
    "text": "years ago when the functionality got greatly expanded and this is such a",
    "start": "216480",
    "end": "222060"
  },
  {
    "text": "change that occurred at that time that you see some people talking about SEC comp2 because it was such a major change",
    "start": "222060",
    "end": "229560"
  },
  {
    "text": "from the original set comp and and the key thing that happened in setcom 2 was",
    "start": "229560",
    "end": "234959"
  },
  {
    "text": "that you were able to choose which system calls were allowed and disallowed in the very early version of system of",
    "start": "234959",
    "end": "241500"
  },
  {
    "text": "setcom there was a fixed set of system cores that were allowed and everything else was disallowed but sick sitcom 2 in",
    "start": "241500",
    "end": "250920"
  },
  {
    "text": "inversion Linux 3.5 2012 things became much more flexible",
    "start": "250920",
    "end": "258440"
  },
  {
    "text": "people had wanted this I've got to change my device there the battery must be getting a bit flat",
    "start": "259040",
    "end": "265080"
  },
  {
    "text": "um people had wanted this feature for a long time they've been you know well before 2012 there'd been attempts to",
    "start": "265080",
    "end": "271800"
  },
  {
    "text": "merge this sort of functionality in the kernel but they'd all sort of for various reasons failed but one second",
    "start": "271800",
    "end": "279020"
  },
  {
    "text": "Merchant of the kernel sort of the floodgates opened and many people who",
    "start": "279020",
    "end": "284220"
  },
  {
    "text": "wanted this functionality then started integrating the functionality into their into their applications so this is some",
    "start": "284220",
    "end": "292620"
  },
  {
    "text": "examples of you know some well-known applications that use SEC on web",
    "start": "292620",
    "end": "297960"
  },
  {
    "text": "browsers use it sandboxing the renderer process for example",
    "start": "297960",
    "end": "303840"
  },
  {
    "text": "the container Frameworks use it um even at Trace uses SEC comp to do a",
    "start": "303840",
    "end": "311220"
  },
  {
    "text": "quite clever thing to speed up certain kinds of system call tracing which seems",
    "start": "311220",
    "end": "316800"
  },
  {
    "text": "a little bit surprising but if you're going rate go away read about what estrace is doing it actually uses",
    "start": "316800",
    "end": "322740"
  },
  {
    "text": "um set com to actually speed up certain kinds of system call tracing",
    "start": "322740",
    "end": "329300"
  },
  {
    "text": "the um a bit more history in 2014 a new system call was added there was an",
    "start": "329400",
    "end": "336660"
  },
  {
    "text": "earlier system call called PR CTL which was used for implementing set comp",
    "start": "336660",
    "end": "342539"
  },
  {
    "text": "functionality but in 2014 they added a dedicated system call",
    "start": "342539",
    "end": "347880"
  },
  {
    "text": "which provides all the set comp functionality that PR CTL had but adds",
    "start": "347880",
    "end": "353340"
  },
  {
    "text": "some new stuff as well and this is really the system call of choice uh going forward",
    "start": "353340",
    "end": "360860"
  },
  {
    "text": "sitcom's a lively area of development in the kernel there's really quite steadily",
    "start": "361440",
    "end": "367080"
  },
  {
    "text": "new stuff being added all the time in terms of New pieces of functionality",
    "start": "367080",
    "end": "373440"
  },
  {
    "text": "for set com setcom so it's this a lot of a lot of stuff keeps happening",
    "start": "373440",
    "end": "380100"
  },
  {
    "text": "so the fundamental idea of setcomp you can do filtering limitation of which system",
    "start": "380100",
    "end": "386520"
  },
  {
    "text": "calls are allowed the limitation that you can Implement is based on the system call number in other words essentially",
    "start": "386520",
    "end": "393120"
  },
  {
    "text": "the system core the system call name if you like but except the kernel doesn't know about names it just knows about",
    "start": "393120",
    "end": "399120"
  },
  {
    "text": "numbers and system call arguments and what I mean by that is the values in the",
    "start": "399120",
    "end": "405180"
  },
  {
    "text": "registers this was something that Martin pointed out this morning as well that",
    "start": "405180",
    "end": "411180"
  },
  {
    "text": "the registers that contain the arguments might contain pointers but you can't de-reference those",
    "start": "411180",
    "end": "418500"
  },
  {
    "text": "pointers to find out what they point to you can't make decisions based on what",
    "start": "418500",
    "end": "423900"
  },
  {
    "text": "the pointers point to it's a little unfortunate but there are good technical reasons for that and good reasons around",
    "start": "423900",
    "end": "429419"
  },
  {
    "text": "security for that but you know for instance if you had an argument that was appointed to a path name you might say",
    "start": "429419",
    "end": "435419"
  },
  {
    "text": "well I want to make a decision based on what the path name is in my set compiler you can't do that sort of thing",
    "start": "435419",
    "end": "443400"
  },
  {
    "text": "the general idea um we've got sort of three steps in the operation of setcom the first thing we",
    "start": "443400",
    "end": "450360"
  },
  {
    "text": "do is we construct a filter program this is a program that's going to make",
    "start": "450360",
    "end": "455460"
  },
  {
    "text": "decisions about what system calls are going to be allowed and disallowed so we",
    "start": "455460",
    "end": "461160"
  },
  {
    "text": "build that filter program we load it into the kernel and when I say we I mean",
    "start": "461160",
    "end": "466440"
  },
  {
    "text": "a process loads for itself a filter into the kernel and this is done using either",
    "start": "466440",
    "end": "475020"
  },
  {
    "text": "the setcom system call or the pr CTL system pool and after that we execute",
    "start": "475020",
    "end": "480660"
  },
  {
    "text": "some code that we somehow don't trust perhaps we're about to exec an untrusted",
    "start": "480660",
    "end": "487919"
  },
  {
    "text": "program or we've dynamically loaded some shared Library we're going to call a function out of that shared Library some",
    "start": "487919",
    "end": "494880"
  },
  {
    "text": "sort of plug-in functionality in other words and for some reason we don't trust",
    "start": "494880",
    "end": "500460"
  },
  {
    "text": "the code that we're about to execute perhaps it could be compromised perhaps",
    "start": "500460",
    "end": "505860"
  },
  {
    "text": "we even think it could be possibly somehow malicious",
    "start": "505860",
    "end": "513080"
  },
  {
    "text": "and after we've done this from now on every system call that the",
    "start": "513479",
    "end": "518700"
  },
  {
    "text": "process makes triggers the execution of the filter and the filter makes a",
    "start": "518700",
    "end": "524219"
  },
  {
    "text": "decision is this system call going to be allowed or disallowed and if the system",
    "start": "524219",
    "end": "530040"
  },
  {
    "text": "call is disallowed the um the the kind of disallowing there's a few different",
    "start": "530040",
    "end": "535980"
  },
  {
    "text": "choices that we can make here the the filter might say well don't execute the system call but make it look like it",
    "start": "535980",
    "end": "543360"
  },
  {
    "text": "failed or maybe the filter says actually we really don't like this system called",
    "start": "543360",
    "end": "548580"
  },
  {
    "text": "kill the process there's a few choices once we've installed the filter for the",
    "start": "548580",
    "end": "555300"
  },
  {
    "text": "program this is irreversible when we install a filter we're",
    "start": "555300",
    "end": "561420"
  },
  {
    "text": "essentially making a declaration we're about to to execute some code we don't",
    "start": "561420",
    "end": "566519"
  },
  {
    "text": "trust and we certainly don't want that code to be able to remove the",
    "start": "566519",
    "end": "571920"
  },
  {
    "text": "restrictions the the filters themselves they're",
    "start": "571920",
    "end": "578399"
  },
  {
    "text": "expressed using a language called BPF Berkeley packet filter syntax",
    "start": "578399",
    "end": "584399"
  },
  {
    "text": "um this this language essentially it's a byte code and there is a virtual machine inside the kernel that interprets that",
    "start": "584399",
    "end": "591660"
  },
  {
    "text": "byte code now this BTF language has been around for a long time it's 31 years old now",
    "start": "591660",
    "end": "600000"
  },
  {
    "text": "the reason it's been around for a long time it was initially added to support TCP dump because TCP dump has",
    "start": "600000",
    "end": "609060"
  },
  {
    "text": "or the implementers of TC bitum had a problem yes we want to filter Network traffic because the the user wants to",
    "start": "609060",
    "end": "615899"
  },
  {
    "text": "trace a network conversation but the amount of network traffic is huge",
    "start": "615899",
    "end": "621720"
  },
  {
    "text": "so we need a way of filtering that traffic and one possible way that TCP",
    "start": "621720",
    "end": "627480"
  },
  {
    "text": "dump might have done that job is simply say put the network interface into promiscuous mode get all the packets",
    "start": "627480",
    "end": "634740"
  },
  {
    "text": "pumped across the kernel use the space boundary and then in user space inspect the network packet headers",
    "start": "634740",
    "end": "641519"
  },
  {
    "text": "the problem with that kind of approach which is just theoretical is that simply",
    "start": "641519",
    "end": "647160"
  },
  {
    "text": "the act of pumping all of those bytes across the kernel user space boundary would place a heavy load on the system",
    "start": "647160",
    "end": "654300"
  },
  {
    "text": "because there's so much Network traffic and so the um the idea of BPF was let's",
    "start": "654300",
    "end": "661380"
  },
  {
    "text": "write a program for this virtual we'll have a virtual machine in the kernel and we write",
    "start": "661380",
    "end": "666660"
  },
  {
    "text": "we on what I mean by uh this is uh TCP dump can construct a program for that",
    "start": "666660",
    "end": "673140"
  },
  {
    "text": "virtual machine that gets loaded into the kernel and the the program in the kernel the BPF program running on the",
    "start": "673140",
    "end": "679079"
  },
  {
    "text": "virtual machine in the kernel inspects Network packets to decide which ones are interesting and whichever ones are",
    "start": "679079",
    "end": "684720"
  },
  {
    "text": "interesting those ones get pumped across the kernel user space boundary and the",
    "start": "684720",
    "end": "690240"
  },
  {
    "text": "whole idea is of course that the number of interesting packets is a fraction a tiny fraction of the total number of",
    "start": "690240",
    "end": "697440"
  },
  {
    "text": "packets so the amount of bytes being pumped across the kernel user space boundary is",
    "start": "697440",
    "end": "703220"
  },
  {
    "text": "manageably small the",
    "start": "703220",
    "end": "708779"
  },
  {
    "text": "Brilliance of the SEC comp 2 idea was to",
    "start": "708779",
    "end": "713880"
  },
  {
    "text": "say hey we've already got a virtual machine inside the kernel that has the job of inspecting a bunch of bytes and",
    "start": "713880",
    "end": "720779"
  },
  {
    "text": "making some decisions that those were the bytes in a network packet header let's repurpose that virtual machine and",
    "start": "720779",
    "end": "727320"
  },
  {
    "text": "instead make it look at the bytes which describe a system call number and the",
    "start": "727320",
    "end": "732360"
  },
  {
    "text": "register values associated with that system call number and so for example or",
    "start": "732360",
    "end": "739019"
  },
  {
    "text": "just by way of History this the set comp 2 idea when it was first proposed from the time was first",
    "start": "739019",
    "end": "745579"
  },
  {
    "text": "worked on until it was actually merged into the kernel it was about one year which for a major new kernel feature was",
    "start": "745579",
    "end": "753720"
  },
  {
    "text": "a remarkably short time but one of the people one of the reasons that you know",
    "start": "753720",
    "end": "758940"
  },
  {
    "text": "Colonel of Albus felt reasonably comfortable with doing this relatively fast was we're not inventing entirely",
    "start": "758940",
    "end": "765660"
  },
  {
    "text": "new technology we're repurposing this virtual machine that has been in the kernel already for 20 years we feel very",
    "start": "765660",
    "end": "772920"
  },
  {
    "text": "confident that the machine is you know safe and so repurposing it you know this",
    "start": "772920",
    "end": "778800"
  },
  {
    "text": "feels okay so the idea is we've got a virtual",
    "start": "778800",
    "end": "783839"
  },
  {
    "text": "machine in the kernel then the virtual machine has a few characteristics it's got a very simple instruction set",
    "start": "783839",
    "end": "789540"
  },
  {
    "text": "um it's a small set of instructions they're all the same size this means the virtual machine implementation in the",
    "start": "789540",
    "end": "796380"
  },
  {
    "text": "kernel is simple it's fast there are Branch instructions we can jump in our",
    "start": "796380",
    "end": "801899"
  },
  {
    "text": "program but we can only jump forward so there can be no Loops in BPF programs",
    "start": "801899",
    "end": "807720"
  },
  {
    "text": "this is important because we want to be we we need to be able to know that every",
    "start": "807720",
    "end": "813959"
  },
  {
    "text": "BPF program will eventually finish execution there could be a program with a loop then this could Loop infinitely",
    "start": "813959",
    "end": "820320"
  },
  {
    "text": "inside the kernel which of course would be a some kind of denial of service attack against the kernel",
    "start": "820320",
    "end": "828240"
  },
  {
    "text": "so the kernel is ignitively sort of do various kinds of validation of BPF programs it knows they're always",
    "start": "828240",
    "end": "834660"
  },
  {
    "text": "complete it can verify the op codes and the arguments because the the format of the instructions is is fairly simple the",
    "start": "834660",
    "end": "842579"
  },
  {
    "text": "kernel can even do things like detecting dead code in a BPF program where you know there's a jump over a block of code",
    "start": "842579",
    "end": "849360"
  },
  {
    "text": "but no jump that jumps into that block of code if you try and load a BPF program like that under the kernel the",
    "start": "849360",
    "end": "855240"
  },
  {
    "text": "kernel detects that and actually says no here have an error you're not allowed to do that",
    "start": "855240",
    "end": "861839"
  },
  {
    "text": "okay um BDF programs themselves are limited to 4K instructions which seems",
    "start": "861839",
    "end": "868800"
  },
  {
    "text": "to be enough for people's use cases generally",
    "start": "868800",
    "end": "874819"
  },
  {
    "text": "okay so there's some features of this virtual machine it's uh it's got a it's",
    "start": "875100",
    "end": "880380"
  },
  {
    "text": "got a register a 32-bit registers the working area for doing operations",
    "start": "880380",
    "end": "886339"
  },
  {
    "text": "there's a data area now in the context of um set comp that data area is bytes that",
    "start": "886339",
    "end": "894480"
  },
  {
    "text": "describe the system call in other words the system call number and the values that are in the registers that have the",
    "start": "894480",
    "end": "900839"
  },
  {
    "text": "arguments the instructions as I said they're a fixed size they're all 64 bits they have",
    "start": "900839",
    "end": "908399"
  },
  {
    "text": "a certain format that format of course can be expressed as a c structure the C structure even defined in a header file",
    "start": "908399",
    "end": "915540"
  },
  {
    "text": "it looks like this every instruction consists of a 16-bit op code at the end",
    "start": "915540",
    "end": "920880"
  },
  {
    "text": "a 32-bit operand which depends on the instruction and for the jump",
    "start": "920880",
    "end": "926820"
  },
  {
    "text": "instructions there's two bytes that contain offset saying how far forward do",
    "start": "926820",
    "end": "932579"
  },
  {
    "text": "we want to jump okay an important thing about BPF",
    "start": "932579",
    "end": "937620"
  },
  {
    "text": "there's no concept of state now you can't have a BPF program though that",
    "start": "937620",
    "end": "943500"
  },
  {
    "text": "executes saves some result that can then be used later on by another invocation",
    "start": "943500",
    "end": "949560"
  },
  {
    "text": "of that BPF program that's not possible so for instance you couldn't write a sync comp BPF filter that said I'll do",
    "start": "949560",
    "end": "957779"
  },
  {
    "text": "something on the third call to open something different there's no concept of state so you can't",
    "start": "957779",
    "end": "963839"
  },
  {
    "text": "do that sort of thing similar programming the the virtual",
    "start": "963839",
    "end": "970740"
  },
  {
    "text": "machine has the kinds of instructions you'd expect to see on a virtual machine there's load instructions there's jump",
    "start": "970740",
    "end": "977760"
  },
  {
    "text": "instructions there's arithmetic logic instruction show add subtract multiply divide left shift right shift xor and",
    "start": "977760",
    "end": "985620"
  },
  {
    "text": "all of the stuff that you might expect one thing that is sort of particular to",
    "start": "985620",
    "end": "992820"
  },
  {
    "text": "BPF is these return instructions and the return instructions are the instructions that say terminate execution of the",
    "start": "992820",
    "end": "999720"
  },
  {
    "text": "filter return a result to the kernel with the decision about the system pool should it be allowed or disallowed",
    "start": "999720",
    "end": "1009079"
  },
  {
    "text": "foreign so we've got jump instructions there are conditional jump instructions there's also an unconditional jump instruction",
    "start": "1009079",
    "end": "1015380"
  },
  {
    "text": "the conditional jump instructions yeah yeah if you again if you've done some assembled programming none of this is",
    "start": "1015380",
    "end": "1020899"
  },
  {
    "text": "too surprising there's not code saying what kind of tests do we want to do",
    "start": "1020899",
    "end": "1026000"
  },
  {
    "text": "these tests are tests against the value in the accumulator there's a value we",
    "start": "1026000",
    "end": "1031220"
  },
  {
    "text": "want to test against compare the accumulator against and then every jump instruction this is a little bit unusual",
    "start": "1031220",
    "end": "1038540"
  },
  {
    "text": "in terms of jump instructions every jump instruction has two addresses or two",
    "start": "1038540",
    "end": "1044600"
  },
  {
    "text": "offsets where should we jump to if the test is true and where should we jump to if the",
    "start": "1044600",
    "end": "1051799"
  },
  {
    "text": "test result is false the sort of instructions you expect for",
    "start": "1051799",
    "end": "1058640"
  },
  {
    "text": "conditional drums jump equal jump greater than jump greater than or equal there's even a bit set testing R some",
    "start": "1058640",
    "end": "1065600"
  },
  {
    "text": "bits test set and that's all there is which at first glance seems like not",
    "start": "1065600",
    "end": "1072320"
  },
  {
    "text": "enough for instance what if I did jump not equal test well that's just the false Branch from",
    "start": "1072320",
    "end": "1079280"
  },
  {
    "text": "jump equal just says jump less than or equal is the false Branch from jump",
    "start": "1079280",
    "end": "1084679"
  },
  {
    "text": "greater than okay the the jump targets are expressed",
    "start": "1084679",
    "end": "1092539"
  },
  {
    "text": "as uh offsets in the instruction list an offset of zero means don't jump in fact",
    "start": "1092539",
    "end": "1098120"
  },
  {
    "text": "just do the next instruction but otherwise because we've got one byte to",
    "start": "1098120",
    "end": "1103820"
  },
  {
    "text": "express the offset we can jump up to 255 instructions forward",
    "start": "1103820",
    "end": "1109340"
  },
  {
    "text": "if you want to jump further there's a jump always instruction now an unconditional uh jump where the offset",
    "start": "1109340",
    "end": "1116000"
  },
  {
    "text": "is expressed in the operand and the operand of course is 32 bits which is way bigger than we need to jump rowers",
    "start": "1116000",
    "end": "1124520"
  },
  {
    "text": "as far as a program could be because the program can only be four kilobytes of",
    "start": "1124520",
    "end": "1129559"
  },
  {
    "text": "instructions okay now",
    "start": "1129559",
    "end": "1134600"
  },
  {
    "text": "when the filter gets executed it gets it gets to examine a data area the data",
    "start": "1134600",
    "end": "1141860"
  },
  {
    "text": "area is information describing the system call this is the system called",
    "start": "1141860",
    "end": "1147260"
  },
  {
    "text": "number and the arguments to the system call the buffer is read only so what I'm",
    "start": "1147260",
    "end": "1155360"
  },
  {
    "text": "trying to say there is you can use SEC comp to inspect the system call but you",
    "start": "1155360",
    "end": "1160580"
  },
  {
    "text": "can't for example change the arguments to the system call inside the BPF filter",
    "start": "1160580",
    "end": "1166940"
  },
  {
    "text": "of course that structure can be expressed as a c structure there's a structure defined in the header files",
    "start": "1166940",
    "end": "1173960"
  },
  {
    "text": "the structure looks like this struct set comp Dart and we get a few different",
    "start": "1173960",
    "end": "1179059"
  },
  {
    "text": "fields in there the first field is the system call number which system core are",
    "start": "1179059",
    "end": "1184760"
  },
  {
    "text": "we making going down a bit further the the last field is what it's expressed as",
    "start": "1184760",
    "end": "1192380"
  },
  {
    "text": "an array but the point is this field describes the arguments of the system",
    "start": "1192380",
    "end": "1198320"
  },
  {
    "text": "call on on Linux the the greatest number of arguments",
    "start": "1198320",
    "end": "1203419"
  },
  {
    "text": "that any system call has is six so the space here for up to six arguments now",
    "start": "1203419",
    "end": "1209780"
  },
  {
    "text": "of course each system call has a particular number of arguments it's up to you as the author of The BPF filter",
    "start": "1209780",
    "end": "1217580"
  },
  {
    "text": "to write your filter to look at the right number of arguments if you care about the arguments",
    "start": "1217580",
    "end": "1224780"
  },
  {
    "text": "we get a few other pieces of information as well one of those other pieces is the",
    "start": "1224780",
    "end": "1229940"
  },
  {
    "text": "so-called um the arch field which is a it contains a number that says what architecture is",
    "start": "1229940",
    "end": "1236960"
  },
  {
    "text": "this BPF filter running on and I'll explain a little bit later on why that",
    "start": "1236960",
    "end": "1242240"
  },
  {
    "text": "matters um aside from that we get another field the instruction pointer this is the",
    "start": "1242240",
    "end": "1249200"
  },
  {
    "text": "actual virtual address uh in your in your in your real program from which the",
    "start": "1249200",
    "end": "1255320"
  },
  {
    "text": "system call was made um and when I first saw that I was quite puzzled why is that information there",
    "start": "1255320",
    "end": "1261679"
  },
  {
    "text": "and I sort of came up with crazy hypotheses about you know why they have that information there and then",
    "start": "1261679",
    "end": "1268100"
  },
  {
    "text": "eventually I had a chance to talk to one of the core set comp maintainers to say well why is that field there",
    "start": "1268100",
    "end": "1273679"
  },
  {
    "text": "um because we could there was no particular use case in mind",
    "start": "1273679",
    "end": "1279760"
  },
  {
    "text": "okay now if you're feeling in a 1950s frame of mind you could write your BPF",
    "start": "1280220",
    "end": "1286580"
  },
  {
    "text": "programs as binary values uh coded up by hand but as a first step to making your",
    "start": "1286580",
    "end": "1294140"
  },
  {
    "text": "life easier the the header files do provide some macros that you can use to",
    "start": "1294140",
    "end": "1300080"
  },
  {
    "text": "sort of hand build the the instructions that you want to create and and this is",
    "start": "1300080",
    "end": "1306500"
  },
  {
    "text": "this is doing it the hard way but I want to do it the hard way so that we actually see what's really going on and",
    "start": "1306500",
    "end": "1312500"
  },
  {
    "text": "so there's a couple of macros for instance BPF statement and BPF jump and all they're doing BPF statement you give",
    "start": "1312500",
    "end": "1319460"
  },
  {
    "text": "it two two arguments an OP code and an operand now for reasons of history that",
    "start": "1319460",
    "end": "1326000"
  },
  {
    "text": "I'm I don't know about but this goes right back to the 1992 paper that described BPF the operand is always",
    "start": "1326000",
    "end": "1333260"
  },
  {
    "text": "called K just a piece of notation but what you can see of course is that",
    "start": "1333260",
    "end": "1341179"
  },
  {
    "text": "that macro is really just constructing an initializer it's constructing an initializer for this struct sock filter",
    "start": "1341179",
    "end": "1350000"
  },
  {
    "text": "structure that we looked at already and you can see that it's you know defining",
    "start": "1350000",
    "end": "1355880"
  },
  {
    "text": "the op code and at the end the operand and for the two jump Fields it's just putting zero",
    "start": "1355880",
    "end": "1362200"
  },
  {
    "text": "BPF jump which is the macro for constructing a jump instruction we give",
    "start": "1362200",
    "end": "1367520"
  },
  {
    "text": "an OP code um an operand again and then because the",
    "start": "1367520",
    "end": "1374240"
  },
  {
    "text": "conditional jumps take two offsets we have two more arguments which are the offsets and again all the macro is doing",
    "start": "1374240",
    "end": "1380120"
  },
  {
    "text": "is constructing an initializer for this struct sock filter",
    "start": "1380120",
    "end": "1386620"
  },
  {
    "text": "so some examples um here we've got a BPF statement now",
    "start": "1386900",
    "end": "1392480"
  },
  {
    "text": "it's a it takes a bit of practice to just sort of break this down but the point is that you know the macro takes",
    "start": "1392480",
    "end": "1399620"
  },
  {
    "text": "two arguments the comma there is separating the two arguments and the first argument is the op code and the",
    "start": "1399620",
    "end": "1408080"
  },
  {
    "text": "opcode is being constructed by just ordering together some bit patterns these constants are defined in the",
    "start": "1408080",
    "end": "1416480"
  },
  {
    "text": "um in the kernel header file but the point is these these concepts are being ordered together to build up an OP code",
    "start": "1416480",
    "end": "1422360"
  },
  {
    "text": "now these particular constants what are they saying well they're saying first of all this is a load instruction load of",
    "start": "1422360",
    "end": "1431179"
  },
  {
    "text": "value into the accumulator the next question of course is how big a",
    "start": "1431179",
    "end": "1436760"
  },
  {
    "text": "value are we going to load and the accumulator bpfw says a word four bytes",
    "start": "1436760",
    "end": "1442700"
  },
  {
    "text": "and then the question of course is where are those four bytes coming from and the last piece here BPF ABS effectively is",
    "start": "1442700",
    "end": "1450980"
  },
  {
    "text": "saying those bytes come from the data area",
    "start": "1450980",
    "end": "1457000"
  },
  {
    "text": "okay and then the question is well which bytes in the data area which four bytes well that's expressed in the operand and",
    "start": "1457100",
    "end": "1465020"
  },
  {
    "text": "the off-brand is the value opposite of struct set comp",
    "start": "1465020",
    "end": "1470600"
  },
  {
    "text": "data comma Arch now when I ask most C programmers have they ever seen the offset of macro before the",
    "start": "1470600",
    "end": "1477320"
  },
  {
    "text": "answer is no but offset of is just a macro you give it two arguments one is",
    "start": "1477320",
    "end": "1482840"
  },
  {
    "text": "the name of a structure and the other is a name of a field in that structure and it's just giving you back the offset of",
    "start": "1482840",
    "end": "1489559"
  },
  {
    "text": "a particular field relative to the start of that structure so just going back a moment",
    "start": "1489559",
    "end": "1497659"
  },
  {
    "text": "there was our struct setcom data um",
    "start": "1497659",
    "end": "1503440"
  },
  {
    "text": "structure and we're asking about what is the offset of the arch field well the in",
    "start": "1504440",
    "end": "1509960"
  },
  {
    "text": "our field the system call number field that's four bytes so offset of arch is the value for",
    "start": "1509960",
    "end": "1516260"
  },
  {
    "text": "and that's what this macro is returning the the number sorry for one slide it's",
    "start": "1516260",
    "end": "1522860"
  },
  {
    "text": "returning the the number four so we're saying load four bytes from the dart",
    "start": "1522860",
    "end": "1528860"
  },
  {
    "text": "area starting at offset four and of course that is the architecture",
    "start": "1528860",
    "end": "1534320"
  },
  {
    "text": "number that those bytes um some other examples then of",
    "start": "1534320",
    "end": "1540200"
  },
  {
    "text": "instructions again here uh well this time sorry a BPF jump uh we've got an OP",
    "start": "1540200",
    "end": "1547279"
  },
  {
    "text": "code the op code says BPF jump It's jump instruction jump equal it's a",
    "start": "1547279",
    "end": "1552320"
  },
  {
    "text": "conditional jump testing on equality in the accumulator what are we going to compare the accumulator against BPF cases the value",
    "start": "1552320",
    "end": "1560419"
  },
  {
    "text": "in the operand what value do we have in the operand this number here this is just straight",
    "start": "1560419",
    "end": "1565520"
  },
  {
    "text": "from a kernel header file it's a certain constant that says um this constant that identifies the",
    "start": "1565520",
    "end": "1572299"
  },
  {
    "text": "machine architecture x8664. now if the test is true we're",
    "start": "1572299",
    "end": "1578779"
  },
  {
    "text": "going to jump forward one instruction which means we skip the very next BPF",
    "start": "1578779",
    "end": "1583820"
  },
  {
    "text": "instruction otherwise we're going to jump forward zero instructions which means we",
    "start": "1583820",
    "end": "1590240"
  },
  {
    "text": "we'll execute the very next instruction",
    "start": "1590240",
    "end": "1594640"
  },
  {
    "text": "some other examples this time a BPF statement here the",
    "start": "1596600",
    "end": "1602539"
  },
  {
    "text": "op code says it's a return instruction we're going to return a value to the kernel BPF case is the value we're going",
    "start": "1602539",
    "end": "1609020"
  },
  {
    "text": "to return is whatever is expressed in the operand and the value in the Op brand is this constant SEC comp rat kill",
    "start": "1609020",
    "end": "1615740"
  },
  {
    "text": "process and this is a value that says to the kernel hey kill the process in other",
    "start": "1615740",
    "end": "1622100"
  },
  {
    "text": "words the fillers made a decision that we don't like the system pool we dislike it so much that we actually want the",
    "start": "1622100",
    "end": "1629240"
  },
  {
    "text": "kernel to kill the process other examples here another",
    "start": "1629240",
    "end": "1635659"
  },
  {
    "text": "um statement this time this time in arithmetic logic instruction add value to the accumulator the value",
    "start": "1635659",
    "end": "1643279"
  },
  {
    "text": "comes from the operand bpfk and the value in the operand is one add one to the accumulator or",
    "start": "1643279",
    "end": "1651559"
  },
  {
    "text": "following straight on from that this time and right shift right shift the accumulator 12 bits",
    "start": "1651620",
    "end": "1659080"
  },
  {
    "text": "now we've got this idea then that each filter well I'll refresh that each time the filter is executed it returns a",
    "start": "1660620",
    "end": "1666620"
  },
  {
    "text": "value to the kernel giving a decision to the kernel about",
    "start": "1666620",
    "end": "1671740"
  },
  {
    "text": "whether the what the kernel should do about the particular system call",
    "start": "1671740",
    "end": "1677659"
  },
  {
    "text": "and the point is that once the filter is installed every time the process makes a",
    "start": "1677659",
    "end": "1682700"
  },
  {
    "text": "system call this filter gets executed and it makes the decision",
    "start": "1682700",
    "end": "1688419"
  },
  {
    "text": "now the decision takes the form of a return value and the return value is a",
    "start": "1688880",
    "end": "1694580"
  },
  {
    "text": "32-bit value that is in two parts the most significant two bytes say what",
    "start": "1694580",
    "end": "1700640"
  },
  {
    "text": "general action should the kernel perform and the least significant two bytes are",
    "start": "1700640",
    "end": "1706640"
  },
  {
    "text": "some possibly some value that is associated with the action some of the actions have Associated values",
    "start": "1706640",
    "end": "1714580"
  },
  {
    "text": "examples of the kinds of things that the kernel might sorry that the filter might return to the kernel set comp rent allow",
    "start": "1716140",
    "end": "1724039"
  },
  {
    "text": "the filter saying the kernel yep the system called is fine the kernel can just execute that system call",
    "start": "1724039",
    "end": "1731840"
  },
  {
    "text": "process the filter saying um we don't like this",
    "start": "1731840",
    "end": "1737539"
  },
  {
    "text": "system coal we dislike it so much that the kernel should kill the process if",
    "start": "1737539",
    "end": "1742940"
  },
  {
    "text": "it's a multi-threaded process all the threads get killed um the process is killed as though by a",
    "start": "1742940",
    "end": "1750799"
  },
  {
    "text": "success signal there is actually no signal the process is simply killed but",
    "start": "1750799",
    "end": "1756020"
  },
  {
    "text": "to something that was observing that process like a parent process for example it would look like the process",
    "start": "1756020",
    "end": "1763340"
  },
  {
    "text": "was killed by a success signal another possibility sick comp rate kill",
    "start": "1763340",
    "end": "1770539"
  },
  {
    "text": "three we don't like the system call and we're telling the kernel kill the thread that made that system call so it might",
    "start": "1770539",
    "end": "1777559"
  },
  {
    "text": "be a multi-threaded process we're saying just kill that thread which I think in many cases are the kind of weird because",
    "start": "1777559",
    "end": "1784220"
  },
  {
    "text": "we're going to kill one thread and hope that the rest of them hobble along okay probably not in many cases",
    "start": "1784220",
    "end": "1792399"
  },
  {
    "text": "what we're saying here to the kernel is um the kernel should not execute the",
    "start": "1794539",
    "end": "1801260"
  },
  {
    "text": "system call but instead make it look like a system called was executed and returned an error",
    "start": "1801260",
    "end": "1807320"
  },
  {
    "text": "and we express the erno value that should be returned for the system call for the for the failed system call in",
    "start": "1807320",
    "end": "1815240"
  },
  {
    "text": "the data component of the um return value there are some other possible return",
    "start": "1815240",
    "end": "1821840"
  },
  {
    "text": "values as well but I won't try and go into them now",
    "start": "1821840",
    "end": "1827120"
  },
  {
    "text": "if we want to install a BPF program we use one of these two system calls to",
    "start": "1827120",
    "end": "1833120"
  },
  {
    "text": "do the job the modern way is to use the setcom system call which has been around for a few years now the older way is to",
    "start": "1833120",
    "end": "1841159"
  },
  {
    "text": "use PR CTL if we I'll Focus just on setcom so we say we want to install a",
    "start": "1841159",
    "end": "1846559"
  },
  {
    "text": "filter program we there's a Flags argument which can be used to modify the",
    "start": "1846559",
    "end": "1852320"
  },
  {
    "text": "behavior of the system core but the last argument is appointed to the filter program that is going to be installed",
    "start": "1852320",
    "end": "1858500"
  },
  {
    "text": "now that filter program is a pointer to a",
    "start": "1858500",
    "end": "1863539"
  },
  {
    "text": "structure like this struct sock F prog and this is reminding Us by the way of",
    "start": "1863539",
    "end": "1868640"
  },
  {
    "text": "the networking origins of BPF a socket filter program",
    "start": "1868640",
    "end": "1873679"
  },
  {
    "text": "that structure contains two Fields one is the size of the program and the other one is a pointer to the program",
    "start": "1873679",
    "end": "1880600"
  },
  {
    "text": "appointed to an array of struck sock filter elements that are the actual code of the",
    "start": "1880600",
    "end": "1888140"
  },
  {
    "text": "vpf program foreign",
    "start": "1888140",
    "end": "1893620"
  },
  {
    "text": "I'll turn the slides off for a moment suppose you're an attacker",
    "start": "1895340",
    "end": "1902600"
  },
  {
    "text": "and you're an attacker and you know a couple of things one is that people who write privileged",
    "start": "1902600",
    "end": "1909080"
  },
  {
    "text": "programs things like set uid route programs sometimes are sloppy you know this",
    "start": "1909080",
    "end": "1916159"
  },
  {
    "text": "because there's been many examples in the past people who write set your ID root programs for instance where they",
    "start": "1916159",
    "end": "1922700"
  },
  {
    "text": "say oh I'm going to make the system call and because I'm super user it will always succeed because I'm privileged",
    "start": "1922700",
    "end": "1931000"
  },
  {
    "text": "okay now you know you and maybe even you've even found a program that does",
    "start": "1931580",
    "end": "1937460"
  },
  {
    "text": "exactly that a Mexican core but the program doesn't check the return value you think as an attacker great here's",
    "start": "1937460",
    "end": "1943760"
  },
  {
    "text": "something that I can attack what I'm going to do is install a set comp filter",
    "start": "1943760",
    "end": "1949399"
  },
  {
    "text": "then run that program and the filter is going to make that system call fail",
    "start": "1949399",
    "end": "1955940"
  },
  {
    "text": "and your hypothesis is an attacker okay the previous program is going to make that system called the system call fails but",
    "start": "1955940",
    "end": "1962600"
  },
  {
    "text": "because the program didn't check the return value it's going to keep going and of course that's in a situation that",
    "start": "1962600",
    "end": "1969320"
  },
  {
    "text": "an attacker loves privileged program in an unexpected place",
    "start": "1969320",
    "end": "1976840"
  },
  {
    "text": "this is not possible okay it's not possible because there is a restriction around the use of SEC comp either",
    "start": "1977480",
    "end": "1985760"
  },
  {
    "text": "to install a BPF filter either the process must be privileged already or",
    "start": "1985760",
    "end": "1992659"
  },
  {
    "text": "if you're not privileged you need to make this call here a PR CTL call that sets something called the no new",
    "start": "1992659",
    "end": "1998960"
  },
  {
    "text": "previous attribute and the effect of that attribute is that if the process now executes a privileged",
    "start": "1998960",
    "end": "2006159"
  },
  {
    "text": "program a cuid program a set GID program or a binary that has cables the program",
    "start": "2006159",
    "end": "2011380"
  },
  {
    "text": "won't do the privileged thing it won't give the process a different ID or give",
    "start": "2011380",
    "end": "2017200"
  },
  {
    "text": "it capabilities so this sort of removes that pathway for the attacker to try and use SEC comp to",
    "start": "2017200",
    "end": "2025500"
  },
  {
    "text": "compromise a privileged program if you try and install a BPA filter and",
    "start": "2025500",
    "end": "2032200"
  },
  {
    "text": "you are not privileged and you have all and you haven't set that in a new project the kernel says here have an",
    "start": "2032200",
    "end": "2037960"
  },
  {
    "text": "error okay let's look at an example",
    "start": "2037960",
    "end": "2044440"
  },
  {
    "text": "now what this program is going to do what this BPF program is going to do is",
    "start": "2044440",
    "end": "2051158"
  },
  {
    "text": "filter for open and open at system calls and",
    "start": "2051159",
    "end": "2057040"
  },
  {
    "text": "kill the process if it tries to make either one of those system calls so my steps first of all here I'm setting the",
    "start": "2057040",
    "end": "2063820"
  },
  {
    "text": "no new proves attributes then I install my BPF filter we'll look",
    "start": "2063820",
    "end": "2069460"
  },
  {
    "text": "at that code in a moment but then I make a call to open and of course the",
    "start": "2069460",
    "end": "2077500"
  },
  {
    "text": "printf statement a bit lower down gives us a clue about what's going to happen we're not going to get that far because",
    "start": "2077500",
    "end": "2083800"
  },
  {
    "text": "the BPF filter is going to kill the process when it tries to make that",
    "start": "2083800",
    "end": "2089020"
  },
  {
    "text": "system call now here's the function that installs my",
    "start": "2089020",
    "end": "2095980"
  },
  {
    "text": "filter and primarily it consists of a struct sock filter array which is you",
    "start": "2095980",
    "end": "2103839"
  },
  {
    "text": "know the set of my BPF instructions now for the moment I'm going to leave some instructions out but let's go down a bit",
    "start": "2103839",
    "end": "2111400"
  },
  {
    "text": "further here's my first instruction that we're going to look at load a word from",
    "start": "2111400",
    "end": "2117880"
  },
  {
    "text": "the data area into the accumulator which word am I loading the word at offset of",
    "start": "2117880",
    "end": "2124060"
  },
  {
    "text": "in our field in the setcom data structure and this yeah in the set comp data structure in other words load the",
    "start": "2124060",
    "end": "2130599"
  },
  {
    "text": "system call number into the accumulator then",
    "start": "2130599",
    "end": "2136660"
  },
  {
    "text": "I have a BPF jump instruction a conditional jump",
    "start": "2136660",
    "end": "2142839"
  },
  {
    "text": "do a jump on equality is the word in the accumulator equal",
    "start": "2142839",
    "end": "2148300"
  },
  {
    "text": "to the system call number for the open system portal this constant here this is",
    "start": "2148300",
    "end": "2154180"
  },
  {
    "text": "just defined in a header file okay it's the number of the open system call if it is if the value in the cumulative is",
    "start": "2154180",
    "end": "2161140"
  },
  {
    "text": "equal to these open system call number I'm going to jump forward two instructions now that means",
    "start": "2161140",
    "end": "2168339"
  },
  {
    "text": "0 1 2 I'm going to land here",
    "start": "2168339",
    "end": "2174640"
  },
  {
    "text": "where the filter returns to the kernel saying kill the process",
    "start": "2174640",
    "end": "2179859"
  },
  {
    "text": "now if if the system call number was not equal to the open system pull number I'm",
    "start": "2179859",
    "end": "2185140"
  },
  {
    "text": "going to jump forward zero instructions which means I will land here",
    "start": "2185140",
    "end": "2190780"
  },
  {
    "text": "where I do another conditional jump where I ask is the word in the",
    "start": "2190780",
    "end": "2195820"
  },
  {
    "text": "accumulator equal to the open at system call number and if it is then I'm going to jump",
    "start": "2195820",
    "end": "2201820"
  },
  {
    "text": "forward one instruction which of course will bring me back down here again",
    "start": "2201820",
    "end": "2207700"
  },
  {
    "text": "kill the process if the system call number is not the open net system call number then I'm",
    "start": "2207700",
    "end": "2214420"
  },
  {
    "text": "going to jump forward zero instructions which will bring me here which says",
    "start": "2214420",
    "end": "2220079"
  },
  {
    "text": "allow the system call so every other system calls allowed",
    "start": "2220079",
    "end": "2225660"
  },
  {
    "text": "the rest of that function well here I'm initializing that structure which sort of dumb",
    "start": "2228540",
    "end": "2234460"
  },
  {
    "text": "specifies the the filter program and then I make the sec.com call to actually",
    "start": "2234460",
    "end": "2239560"
  },
  {
    "text": "install filter into the kernel now if I run the program",
    "start": "2239560",
    "end": "2248020"
  },
  {
    "text": "let's just do it in practice",
    "start": "2248020",
    "end": "2251640"
  },
  {
    "text": "first of all I'll touch the file that the program is supposed to open which was that path name there temp a",
    "start": "2253599",
    "end": "2261400"
  },
  {
    "text": "and then if I say set comp deny open",
    "start": "2261400",
    "end": "2268780"
  },
  {
    "text": "then what happened was the program tried to make the open system call the filter got",
    "start": "2268780",
    "end": "2276520"
  },
  {
    "text": "invoked the filter said to the colonel SEC comprat kill",
    "start": "2276520",
    "end": "2281619"
  },
  {
    "text": "process the kernel then killed the process as so",
    "start": "2281619",
    "end": "2287380"
  },
  {
    "text": "with the success signal and the shell said oh it looks like my child was killed by a Sig sis signal and",
    "start": "2287380",
    "end": "2295300"
  },
  {
    "text": "it printed out the standard textual description of that signal which is the string bad system call",
    "start": "2295300",
    "end": "2303180"
  },
  {
    "text": "okay we can be a bit more sophisticated than our examples this time a filter",
    "start": "2308619",
    "end": "2316599"
  },
  {
    "text": "based not just on the system call numbers but actually the system call",
    "start": "2316599",
    "end": "2322900"
  },
  {
    "text": "arguments or in this case one argument so",
    "start": "2322900",
    "end": "2328119"
  },
  {
    "text": "um I'm gonna again do filtering for open and open at the both of these",
    "start": "2328119",
    "end": "2334420"
  },
  {
    "text": "system calls which are both about opening files they both have a Flags argument the flags argument does the",
    "start": "2334420",
    "end": "2340660"
  },
  {
    "text": "same thing for both system calls and I'm going to be looking for a couple of a couple of different flags oh create in",
    "start": "2340660",
    "end": "2347260"
  },
  {
    "text": "other words if I'm trying to create a file I want to kill the process if it tries to create a file if the process",
    "start": "2347260",
    "end": "2353500"
  },
  {
    "text": "tries to open a file for reading or writing then I'm simply going to make the call",
    "start": "2353500",
    "end": "2359579"
  },
  {
    "text": "fail with the error E naught sup now aside from that the only thing we need to know is that the flags argument is in",
    "start": "2359579",
    "end": "2367540"
  },
  {
    "text": "a it's a different argument for the two system calls for open it's the second argument for open at it's the third",
    "start": "2367540",
    "end": "2374020"
  },
  {
    "text": "argument but other than that the flags argument is the same for the two calls",
    "start": "2374020",
    "end": "2380520"
  },
  {
    "text": "whoops I've jumped too far there okay now what I'm first of all doing",
    "start": "2380859",
    "end": "2386320"
  },
  {
    "text": "again I've left out some code this architect architecture checking code but the first argument or first instruction",
    "start": "2386320",
    "end": "2391660"
  },
  {
    "text": "that I'm interested in looking at the system call number I'm loading here a word from the data",
    "start": "2391660",
    "end": "2398740"
  },
  {
    "text": "into the accumulator it's the system call number and then",
    "start": "2398740",
    "end": "2407040"
  },
  {
    "text": "I do an equality check is the word in the accumulator equal to the open sister",
    "start": "2407099",
    "end": "2412540"
  },
  {
    "text": "pull number if it is I'm going to jump forward zero instructions if it's not",
    "start": "2412540",
    "end": "2418180"
  },
  {
    "text": "I'm going to jump forward two instructions which will take me here's zero one it'll take me on to the next",
    "start": "2418180",
    "end": "2424900"
  },
  {
    "text": "slide okay but if this is an open system call then what I'm going to do is another",
    "start": "2424900",
    "end": "2430359"
  },
  {
    "text": "load instruction load a word into the accumulator from the dart area which",
    "start": "2430359",
    "end": "2435520"
  },
  {
    "text": "word the word at offset of args one in the set comp data field and set comp",
    "start": "2435520",
    "end": "2442839"
  },
  {
    "text": "data structure I should say of course that's the second argument of the open call the flags argument so I'm loading",
    "start": "2442839",
    "end": "2448839"
  },
  {
    "text": "the flags argument into the accumulator and then I just do an unconditional jump",
    "start": "2448839",
    "end": "2456160"
  },
  {
    "text": "saying jump forward three instructions so it's going to take me further into",
    "start": "2456160",
    "end": "2461800"
  },
  {
    "text": "the next slide now remember if the system call was not open",
    "start": "2461800",
    "end": "2467560"
  },
  {
    "text": "I jumped forward two instructions which means I'm going to land here",
    "start": "2467560",
    "end": "2474099"
  },
  {
    "text": "and there you see I do a another conditional jump I'm asking is the word in the accumulator remember the word in",
    "start": "2474099",
    "end": "2479800"
  },
  {
    "text": "the accumulator at the moment is the system pull number is it equal to the open app system core if it is I'm going",
    "start": "2479800",
    "end": "2484960"
  },
  {
    "text": "to jump forward one instruction which means I'll land down here where I",
    "start": "2484960",
    "end": "2491859"
  },
  {
    "text": "say load a different word into the accumulator which word am I loading offset of struct set comp data rx2",
    "start": "2491859",
    "end": "2499780"
  },
  {
    "text": "third argument of the system will again the flags argument now remember when I if I just had the",
    "start": "2499780",
    "end": "2506320"
  },
  {
    "text": "open call I jumped for three instructions that's actually jumped me right past these three instructions onto",
    "start": "2506320",
    "end": "2512140"
  },
  {
    "text": "the next page and when I get to this instruction here with the open app processing of course also the next",
    "start": "2512140",
    "end": "2517720"
  },
  {
    "text": "instruction is on the next slide now if the system call number was not",
    "start": "2517720",
    "end": "2523780"
  },
  {
    "text": "open at I'm going to jump forward zero instructions where I say",
    "start": "2523780",
    "end": "2529119"
  },
  {
    "text": "every other system calls allowed",
    "start": "2529119",
    "end": "2532680"
  },
  {
    "text": "now whether we had open or open at either way we end up at the first instruction",
    "start": "2534400",
    "end": "2541420"
  },
  {
    "text": "on this slide what am I doing now this time it's a conditional jump",
    "start": "2541420",
    "end": "2547060"
  },
  {
    "text": "with a bit set test I'm asking in in the accumulator remember in the accumulator",
    "start": "2547060",
    "end": "2552099"
  },
  {
    "text": "by now I have the flags argument is the O creampit set if it is",
    "start": "2552099",
    "end": "2558040"
  },
  {
    "text": "jump forward zero instructions where I say return control of the kernel kill",
    "start": "2558040",
    "end": "2564700"
  },
  {
    "text": "the process if the create bit is not set then I'm going",
    "start": "2564700",
    "end": "2572020"
  },
  {
    "text": "to say JUMP forward one instruction which of course brings me here where I",
    "start": "2572020",
    "end": "2577240"
  },
  {
    "text": "have another bit set test where I ask is the word in the accumulator is either",
    "start": "2577240",
    "end": "2582880"
  },
  {
    "text": "the O right only but set or the O read write bit set if that's the case I'm going to jump",
    "start": "2582880",
    "end": "2589240"
  },
  {
    "text": "forward zero instructions where again over return instructions there's return control of the kernel this time saying",
    "start": "2589240",
    "end": "2595660"
  },
  {
    "text": "SEC comp rent erno this is telling the kernel don't execute the system call but",
    "start": "2595660",
    "end": "2600940"
  },
  {
    "text": "make it look like the system call had been executed and failed and return an error and the error I'm",
    "start": "2600940",
    "end": "2607660"
  },
  {
    "text": "expressing in the bottom bytes of the return value is enots up operation not",
    "start": "2607660",
    "end": "2614680"
  },
  {
    "text": "supported and then if if neither of those bits was",
    "start": "2614680",
    "end": "2621579"
  },
  {
    "text": "specified in the Flags argument I'm going to jump forward one instruction",
    "start": "2621579",
    "end": "2628720"
  },
  {
    "text": "which means I would land down here any other kind of open call is allowed",
    "start": "2628720",
    "end": "2634420"
  },
  {
    "text": "any kind of other kind of open or open app call is allowed now",
    "start": "2634420",
    "end": "2640119"
  },
  {
    "text": "then in my main program things like look like this I set the new preset boot is",
    "start": "2640119",
    "end": "2645339"
  },
  {
    "text": "set install the filter and then got a series of open calls first of all an open for reading and open for writing",
    "start": "2645339",
    "end": "2651760"
  },
  {
    "text": "and open for reading or writing or reading and writing I should say and then an open with the oh create flag",
    "start": "2651760",
    "end": "2659200"
  },
  {
    "text": "now when I run the program",
    "start": "2659200",
    "end": "2662760"
  },
  {
    "text": "when I run the program what happened was the first open succeeded",
    "start": "2672700",
    "end": "2678520"
  },
  {
    "text": "the second open failed and my program printed at the corresponding Aramis which was Operation not supported that",
    "start": "2678520",
    "end": "2685180"
  },
  {
    "text": "was the open for with writing only the open with oh read write same thing happened the fourth called open",
    "start": "2685180",
    "end": "2691420"
  },
  {
    "text": "specified oh create and the BPF filter told the kernel kill the process and",
    "start": "2691420",
    "end": "2697960"
  },
  {
    "text": "again the shell said oh looks like my child was killed with a Sig sis signal",
    "start": "2697960",
    "end": "2704700"
  },
  {
    "text": "okay now the I've missed out one or two important",
    "start": "2709300",
    "end": "2716800"
  },
  {
    "text": "pieces so far and the the one of the the piece that's important that I've missed out is uh",
    "start": "2716800",
    "end": "2723339"
  },
  {
    "text": "checking the architecture now this should normally opinions differ",
    "start": "2723339",
    "end": "2731380"
  },
  {
    "text": "um but you know this should normally be the first step in every BPF program",
    "start": "2731380",
    "end": "2737079"
  },
  {
    "text": "um why is this necessary system call numbers are different on",
    "start": "2737079",
    "end": "2744819"
  },
  {
    "text": "different architectures I mean Linux runs on many different hardware architectures and on those different",
    "start": "2744819",
    "end": "2750220"
  },
  {
    "text": "archanges some system calls have different numbers just an unfortunate result of History",
    "start": "2750220",
    "end": "2757720"
  },
  {
    "text": "and that means that if you write a BPA filter that filters on certain system call numbers for a certain architecture",
    "start": "2757720",
    "end": "2763780"
  },
  {
    "text": "and you happen to try and use that filter in a program that was running on a different architecture it would",
    "start": "2763780",
    "end": "2769240"
  },
  {
    "text": "potentially make wrong decisions because the system call numbers are different",
    "start": "2769240",
    "end": "2774400"
  },
  {
    "text": "so the very first thing that you should do and you know there's a couple of reasons why this might happen for instance you you generated the BPF blob",
    "start": "2774400",
    "end": "2781300"
  },
  {
    "text": "in advance you store it in your configuration management system and it was a blob for say x8664 but you had a",
    "start": "2781300",
    "end": "2788079"
  },
  {
    "text": "mistake in your configuration management system and at runtime you happen to try and use this on an arm system uh loaded",
    "start": "2788079",
    "end": "2795700"
  },
  {
    "text": "that blob into the um arm program as the BPF filter for that arm program and of course the",
    "start": "2795700",
    "end": "2801700"
  },
  {
    "text": "filter makes the wrong decisions because the system call numbers are different",
    "start": "2801700",
    "end": "2807300"
  },
  {
    "text": "um you might say what I would never be stupid enough to do that you might be right you might be right",
    "start": "2808240",
    "end": "2815140"
  },
  {
    "text": "okay there's something else though that matters there are some pieces of Hardware in",
    "start": "2815140",
    "end": "2820660"
  },
  {
    "text": "fact they're even very frequent these days some pieces of architecture some piece of Hardware that support multiple",
    "start": "2820660",
    "end": "2828220"
  },
  {
    "text": "system call apis notable is x86 which supports three",
    "start": "2828220",
    "end": "2835359"
  },
  {
    "text": "different abis modern x8664 ancient i386",
    "start": "2835359",
    "end": "2841420"
  },
  {
    "text": "uh you know the old 32-bit stuff and a funny funny architecture sort of sits in",
    "start": "2841420",
    "end": "2846579"
  },
  {
    "text": "between which was invented by the Linux kernel developers about 10 years ago and each one of these different",
    "start": "2846579",
    "end": "2852579"
  },
  {
    "text": "architectures potentially has different system call numbers now",
    "start": "2852579",
    "end": "2858760"
  },
  {
    "text": "and the same thing can happen with um arm 64 for example m64 has a",
    "start": "2858760",
    "end": "2864099"
  },
  {
    "text": "backwards compatibility emulation mode for 32-bit arm instructions and for each",
    "start": "2864099",
    "end": "2870339"
  },
  {
    "text": "of these different sort of Hardware type combinations that there",
    "start": "2870339",
    "end": "2875680"
  },
  {
    "text": "are different system call numbers um",
    "start": "2875680",
    "end": "2881040"
  },
  {
    "text": "okay now",
    "start": "2881520",
    "end": "2885520"
  },
  {
    "text": "there's some details there but I won't try and go into the details my point though is this",
    "start": "2887680",
    "end": "2894480"
  },
  {
    "text": "when you install a filter for a process a BPF filter for a process the lifetime",
    "start": "2895000",
    "end": "2900160"
  },
  {
    "text": "of that filter is the lifetime of the process you can't remove the filter",
    "start": "2900160",
    "end": "2905800"
  },
  {
    "text": "but but by Design but during its life a process might",
    "start": "2905800",
    "end": "2911200"
  },
  {
    "text": "execute different programs using exact V if the filter allows calls to exec ve",
    "start": "2911200",
    "end": "2917980"
  },
  {
    "text": "and the program might start off executing or sorry I misspoke that the process might start off executing let's",
    "start": "2917980",
    "end": "2924940"
  },
  {
    "text": "say a 64-bit program but then at a certain point there's an exec ve where it loads a 32-bit program",
    "start": "2924940",
    "end": "2931540"
  },
  {
    "text": "into the address space instead and of course the system call numbers are different on 32-bit and then therefore",
    "start": "2931540",
    "end": "2938260"
  },
  {
    "text": "the decisions the filter would make don't correspond to the system call",
    "start": "2938260",
    "end": "2944140"
  },
  {
    "text": "numbers that the program is actually using",
    "start": "2944140",
    "end": "2947819"
  },
  {
    "text": "okay now this is what for example the architecture check would look like on",
    "start": "2951220",
    "end": "2959640"
  },
  {
    "text": "x8664 we've got here first of all a load instruction that says load the",
    "start": "2959640",
    "end": "2965859"
  },
  {
    "text": "architecture into the accumulator and then do a check is the word in the accumulator equal to",
    "start": "2965859",
    "end": "2973300"
  },
  {
    "text": "the value ordered Arch x8664. are we running on an X8 are we",
    "start": "2973300",
    "end": "2978460"
  },
  {
    "text": "actually running on an x8664 system if we are we're going to jump forward",
    "start": "2978460",
    "end": "2984240"
  },
  {
    "text": "zero instructions but if we're not we're going to jump forward two instructions which brings us here where we simply say",
    "start": "2984240",
    "end": "2991720"
  },
  {
    "text": "kill the process we're not running on the architecture we expected for with this filter don't try and get clever",
    "start": "2991720",
    "end": "2997480"
  },
  {
    "text": "simply kill the process but if we are on",
    "start": "2997480",
    "end": "3003200"
  },
  {
    "text": "x8664 then the next step I do is to load the system call number into the",
    "start": "3003200",
    "end": "3009359"
  },
  {
    "text": "accumulator and then I do another check now the reason for this check",
    "start": "3009359",
    "end": "3015480"
  },
  {
    "text": "going back a slide I mentioned you know there's a there's a few different 30 sorry a few different",
    "start": "3015480",
    "end": "3021060"
  },
  {
    "text": "um x86 architectures on Linux and in particular there is the modern",
    "start": "3021060",
    "end": "3027440"
  },
  {
    "text": "xh664 but there's another funny thing called X32 and X32 is an architecture",
    "start": "3027440",
    "end": "3034560"
  },
  {
    "text": "that uses the same 64-bit instructions but it uses four byte pointers and four",
    "start": "3034560",
    "end": "3039780"
  },
  {
    "text": "byte Longs and because of that it has to even though it's using you know 64-bit",
    "start": "3039780",
    "end": "3045540"
  },
  {
    "text": "instructions the system calls are different because the size of the arguments is different so necessary the",
    "start": "3045540",
    "end": "3052020"
  },
  {
    "text": "system call numbers are different the the thing that distinguishes the",
    "start": "3052020",
    "end": "3058940"
  },
  {
    "text": "64-bit system calls from these X32 system calls is that in the X32 system",
    "start": "3058940",
    "end": "3064020"
  },
  {
    "text": "calls bit 30 is set and so I'm going to do one more step in",
    "start": "3064020",
    "end": "3070800"
  },
  {
    "text": "this architecture check where I say is the system call number greater than or equal to the constant with bit 30C you",
    "start": "3070800",
    "end": "3078720"
  },
  {
    "text": "can see there that constant X32 CIS called bit there it's just a bit 30. so",
    "start": "3078720",
    "end": "3085140"
  },
  {
    "text": "I'm saying if the system call number is is greater than or equal to that value this means it's a one of these X32",
    "start": "3085140",
    "end": "3090960"
  },
  {
    "text": "system calls and there if that's the case again what I do is jump forward zero instructions and kill the process",
    "start": "3090960",
    "end": "3101720"
  },
  {
    "text": "foreign you might have had enough of the 1960s",
    "start": "3104520",
    "end": "3110040"
  },
  {
    "text": "by now okay it's not a fun way to code up your BPF programs",
    "start": "3110040",
    "end": "3116579"
  },
  {
    "text": "if you're going to write a BPF program of any sort of complexity so you probably want some sort of productivity",
    "start": "3116579",
    "end": "3122520"
  },
  {
    "text": "Aid instead and there are a few productivity AIDS the the tool of choice for many years",
    "start": "3122520",
    "end": "3131099"
  },
  {
    "text": "now has been a library called libsec comp see there was first reason 2012",
    "start": "3131099",
    "end": "3137640"
  },
  {
    "text": "same here that set comp2 came out someone pretty smartly work out hey",
    "start": "3137640",
    "end": "3143220"
  },
  {
    "text": "doing the stuff by hand is painful let's automate it",
    "start": "3143220",
    "end": "3148680"
  },
  {
    "text": "and the whole point is it's it's a kind of Library API and it generates code for",
    "start": "3148680",
    "end": "3156540"
  },
  {
    "text": "you BPF code for you uh it means you'd have to do things like counting instruction offsets the library will",
    "start": "3156540",
    "end": "3162839"
  },
  {
    "text": "even do things like generating the architecture check for you generated codes you don't have full",
    "start": "3162839",
    "end": "3169500"
  },
  {
    "text": "control over the shape of the generated code but you can do things like saying well I want a check that does this and",
    "start": "3169500",
    "end": "3176280"
  },
  {
    "text": "this should be done high priority until it's early in the generated code",
    "start": "3176280",
    "end": "3182599"
  },
  {
    "text": "documentation I had nothing to do with this there's a full set of documentation manual pages all with examples",
    "start": "3184800",
    "end": "3191160"
  },
  {
    "text": "it's almost like the developer of the library wanted people to use the library",
    "start": "3191160",
    "end": "3198859"
  },
  {
    "text": "okay but to give you an idea of what you know one of these uh a program that uses",
    "start": "3200520",
    "end": "3206160"
  },
  {
    "text": "these apis looks like here the core concept of set comp is is this",
    "start": "3206160",
    "end": "3214680"
  },
  {
    "text": "a set comp filter context basically it's the hook on which you hang your list of",
    "start": "3214680",
    "end": "3220740"
  },
  {
    "text": "requests for rules and you initialize it in this case I've",
    "start": "3220740",
    "end": "3226200"
  },
  {
    "text": "said initialize it with the default rule that system calls are allowed so everything that is not explicitly",
    "start": "3226200",
    "end": "3232020"
  },
  {
    "text": "treated is allowed but then I add a couple of rules here",
    "start": "3232020",
    "end": "3237839"
  },
  {
    "text": "where I say give me a rule for the Clone system call which makes the Clone system",
    "start": "3237839",
    "end": "3243000"
  },
  {
    "text": "call fair with the error e-perm give me another rule for the fork system call that makes the fork system call fail",
    "start": "3243000",
    "end": "3249480"
  },
  {
    "text": "with the error E naught sup then I say",
    "start": "3249480",
    "end": "3256319"
  },
  {
    "text": "generate the code and load it into the kernel and this installs the filter generates the filler installs into the",
    "start": "3256319",
    "end": "3262980"
  },
  {
    "text": "kernel and from that point on the the system calls that the process",
    "start": "3262980",
    "end": "3268440"
  },
  {
    "text": "makes are going to be checked by the filter",
    "start": "3268440",
    "end": "3273839"
  },
  {
    "text": "at this point I don't need the filter context anymore it's consuming some memory so I free that memory that's what",
    "start": "3273839",
    "end": "3280380"
  },
  {
    "text": "that API does and then I make a call to fork and of course the filter at that",
    "start": "3280380",
    "end": "3287819"
  },
  {
    "text": "point is going to cause the system call to fail",
    "start": "3287819",
    "end": "3293119"
  },
  {
    "text": "if I run that program something slightly surprising happens yes the fork call",
    "start": "3293819",
    "end": "3299700"
  },
  {
    "text": "does fail it fails with the error operation not permitted now let me go back just a moment the error for fork",
    "start": "3299700",
    "end": "3307619"
  },
  {
    "text": "was supposed to be e naught sup operation not supported but instead I see the error E perm operation",
    "start": "3307619",
    "end": "3316819"
  },
  {
    "text": "permissioned oh sorry I've misspoken operation not supported and operation not permitted the reason is that the",
    "start": "3316819",
    "end": "3324780"
  },
  {
    "text": "fork rapid function in g-lib C underneath actually calls clone",
    "start": "3324780",
    "end": "3329839"
  },
  {
    "text": "okay now there are some other tools as well out there there's a thing that's appeared in recent times called easy",
    "start": "3331500",
    "end": "3336660"
  },
  {
    "text": "sec.com it's a DSL type Arrangement a domain specific language for writing",
    "start": "3336660",
    "end": "3343500"
  },
  {
    "text": "your set comp filters came out just over a year ago um",
    "start": "3343500",
    "end": "3349380"
  },
  {
    "text": "I'm not sure what the state of that project is there's not a lot of commits in the project lately but it seems to be",
    "start": "3349380",
    "end": "3355619"
  },
  {
    "text": "an idea that it's worth watching maybe they feel like they've already got the working tool they need and they're not doing further development there's a BPF",
    "start": "3355619",
    "end": "3364160"
  },
  {
    "text": "compiler this lets you write your BPA fillers in a kind of uh assembler-like",
    "start": "3364160",
    "end": "3370319"
  },
  {
    "text": "notation but you can use things like labels so you'd have to count offsets in",
    "start": "3370319",
    "end": "3375599"
  },
  {
    "text": "your assembler code okay",
    "start": "3375599",
    "end": "3383040"
  },
  {
    "text": "I knew I need now um",
    "start": "3383040",
    "end": "3388039"
  },
  {
    "text": "just jump forward a little bit now the point is that when you install a BPF filter every system called",
    "start": "3389700",
    "end": "3397920"
  },
  {
    "text": "the process then makes is going to be checked by the filter there obviously must be some cost to this",
    "start": "3397920",
    "end": "3405180"
  },
  {
    "text": "but you're prepared to pay the cost because you want this sort of security guarantee",
    "start": "3405180",
    "end": "3410460"
  },
  {
    "text": "um just an example of a program that I have in a source code the source code is all available on my website a program",
    "start": "3410460",
    "end": "3417059"
  },
  {
    "text": "that installs a b care filter that executes six instructions for every system called it six BPF instructions",
    "start": "3417059",
    "end": "3423420"
  },
  {
    "text": "and the program what it does is in the main Loop it tightly Loops calling the get ppid system which is a really simple",
    "start": "3423420",
    "end": "3429780"
  },
  {
    "text": "system call if I install the filter and then do that Loop",
    "start": "3429780",
    "end": "3435480"
  },
  {
    "text": "the the program is about 20 slower okay than it would otherwise have been",
    "start": "3435480",
    "end": "3441079"
  },
  {
    "text": "assuming the jit compiler is enabled which is which it is by default nowadays",
    "start": "3441079",
    "end": "3446099"
  },
  {
    "text": "in fact it's immutably enabled by default nowadays there is a jit compiler",
    "start": "3446099",
    "end": "3451140"
  },
  {
    "text": "for BPF in the kernel that converts the BPF byte code into native code so it",
    "start": "3451140",
    "end": "3458220"
  },
  {
    "text": "executes faster this seems expensive but there's a couple things to remember get ppid is a",
    "start": "3458220",
    "end": "3465660"
  },
  {
    "text": "cheap system calls so the relative cost looks great but also programs don't spend all their time making system calls",
    "start": "3465660",
    "end": "3471660"
  },
  {
    "text": "my programs very artificial it's trying to make certain rules constantly so it seems expensive",
    "start": "3471660",
    "end": "3478818"
  },
  {
    "text": "if you want to do I won't say more on this slide but if you want to do your own experiments in terms of measuring the cost of BPF filters I've even",
    "start": "3482160",
    "end": "3490260"
  },
  {
    "text": "written a small program that you just used to do to to sort of do some measurement experiments",
    "start": "3490260",
    "end": "3497059"
  },
  {
    "text": "I think really then I just want to finish off with some caveats",
    "start": "3497339",
    "end": "3502280"
  },
  {
    "text": "one of the problems that you have with writing a BPF filter is like I want to filter my program to say you know these",
    "start": "3504480",
    "end": "3510540"
  },
  {
    "text": "system calls are allowed the other system calls are disallowed but actually which system calls this my program make",
    "start": "3510540",
    "end": "3517500"
  },
  {
    "text": "how do I know what my filter should allow and disallow this is not an easy",
    "start": "3517500",
    "end": "3522720"
  },
  {
    "text": "question to answer um there are there are ways that you might try and work this out but they're",
    "start": "3522720",
    "end": "3528960"
  },
  {
    "text": "not necessarily foolproof and what if you write a filter where you get it wrong in other words you you did a lot",
    "start": "3528960",
    "end": "3536280"
  },
  {
    "text": "of testing of your code with the BPA filter you found that you know everything worked fine but then one day in production your code took a path Less",
    "start": "3536280",
    "end": "3545220"
  },
  {
    "text": "Traveled and executed the system called you didn't know about and the BPF filter",
    "start": "3545220",
    "end": "3550920"
  },
  {
    "text": "kicked in and said no sorry kill the process",
    "start": "3550920",
    "end": "3556380"
  },
  {
    "text": "okay you've successfully used the BPF filter to inject a bug into your",
    "start": "3556380",
    "end": "3562619"
  },
  {
    "text": "application it's a risk now filtering is based on system call",
    "start": "3562619",
    "end": "3568619"
  },
  {
    "text": "numbers but applications don't invoke system calls",
    "start": "3568619",
    "end": "3573839"
  },
  {
    "text": "directly they invoke them using wrapper functions in the C library and this has a few implications for instance some",
    "start": "3573839",
    "end": "3580799"
  },
  {
    "text": "wrapper functions underneath call call of a different name a different like Fork wrapper function calls clone",
    "start": "3580799",
    "end": "3587819"
  },
  {
    "text": "underneath you need to know that sort of thing if you're writing filters potentially",
    "start": "3587819",
    "end": "3593400"
  },
  {
    "text": "the manual pages help by the way um gelib C Behavior changes over time",
    "start": "3593400",
    "end": "3601559"
  },
  {
    "text": "Once Upon a Time the open wrapper function in gwc called the open system call but at a certain point they switch",
    "start": "3601559",
    "end": "3607260"
  },
  {
    "text": "over to calling open at underneath um you need if you're going to do a",
    "start": "3607260",
    "end": "3613859"
  },
  {
    "text": "filtering for a certain kind of system pool you want to probably filter for all of the related system calls and treat",
    "start": "3613859",
    "end": "3619500"
  },
  {
    "text": "them all the same there's a few different ways that you can open a file for example",
    "start": "3619500",
    "end": "3626240"
  },
  {
    "text": "um so what I'm really trying to say there is you know BPF code it's just like any other piece of code it's not",
    "start": "3628799",
    "end": "3636420"
  },
  {
    "text": "something you create once and then forget about it's just like any other piece of code you need unit tests you",
    "start": "3636420",
    "end": "3642119"
  },
  {
    "text": "probably need continuous integration testing yeah when you change when you're going to migrate to a new operating",
    "start": "3642119",
    "end": "3648599"
  },
  {
    "text": "system environment new platform you need to have all of that testing in place",
    "start": "3648599",
    "end": "3654079"
  },
  {
    "text": "also for your BPF filters and I don't",
    "start": "3654079",
    "end": "3660140"
  },
  {
    "text": "want to suggest at all that that is easy of course it is hard the last link there",
    "start": "3660140",
    "end": "3666480"
  },
  {
    "text": "is sort of a war story of someone who tried to do all of this and then gave up",
    "start": "3666480",
    "end": "3672240"
  },
  {
    "text": "because it was just too hard but it was one person working on their own trying to do something that was quite",
    "start": "3672240",
    "end": "3678720"
  },
  {
    "text": "ambitious but you know it's not easy",
    "start": "3678720",
    "end": "3683599"
  },
  {
    "text": "okay now this is just you know a slide here with some places where you might go for some further information",
    "start": "3684780",
    "end": "3691079"
  },
  {
    "text": "but other than that I am done foreign",
    "start": "3691079",
    "end": "3698180"
  },
  {
    "text": "there's not really time for questions but who knows maybe it's a quick question uh Eric",
    "start": "3702599",
    "end": "3709700"
  },
  {
    "text": "um yes",
    "start": "3709799",
    "end": "3712799"
  },
  {
    "text": "it's a good question are SEC comp filters inherited by child processes and",
    "start": "3717599",
    "end": "3724020"
  },
  {
    "text": "I'll back up a second because you said you know set comforters are connected to that are they connected to the process more precisely filters are per thread",
    "start": "3724020",
    "end": "3732480"
  },
  {
    "text": "but the point is that if you do create a channel process using Fork the child process and here it's the filters so you",
    "start": "3732480",
    "end": "3738660"
  },
  {
    "text": "can't use fork for example to escape filtering",
    "start": "3738660",
    "end": "3744078"
  },
  {
    "text": "other questions okay thank you very much",
    "start": "3745559",
    "end": "3754400"
  }
]