[
  {
    "start": "0",
    "end": "108000"
  },
  {
    "text": "uh yeah welcome everyone my name is push and today we are going to talk about a",
    "start": "320",
    "end": "5600"
  },
  {
    "text": "project that i'm um hosting managing for for some time i'm",
    "start": "5600",
    "end": "10800"
  },
  {
    "text": "not i'm not the only author so i don't i don't want to say this is my project because this is not the true not the",
    "start": "10800",
    "end": "17840"
  },
  {
    "text": "case anymore this is about physical use library for the next class plus",
    "start": "17840",
    "end": "24880"
  },
  {
    "text": "basically we are trying to create something that will improve the safety of",
    "start": "25519",
    "end": "31519"
  },
  {
    "text": "applications that we that that that we basically provide in our production in our companies",
    "start": "31519",
    "end": "36880"
  },
  {
    "text": "and we believe this is a really important subject to cover um",
    "start": "36880",
    "end": "42320"
  },
  {
    "text": "especially for i think that's especially true for for life critical software for um",
    "start": "42320",
    "end": "47760"
  },
  {
    "text": "autonomous driving for for aviation for space even for space and everywhere where actually people's",
    "start": "47760",
    "end": "55039"
  },
  {
    "text": "lives matter right maybe it's not the case today because we are not allowed to sleep in tesla while driving but probably five",
    "start": "55039",
    "end": "62160"
  },
  {
    "text": "years from now it will be the case for every one of us and we want to make sure that we can depend on the software that",
    "start": "62160",
    "end": "67920"
  },
  {
    "text": "is working for us right without any bugs and so",
    "start": "67920",
    "end": "73200"
  },
  {
    "text": "and that yeah that's why i think that this library is needed and that's why i also think and there's also some",
    "start": "73200",
    "end": "78640"
  },
  {
    "text": "understanding of some people at least here that possibly it could be a part of the standards maybe cbs 26 because this",
    "start": "78640",
    "end": "85360"
  },
  {
    "text": "life critical products often cannot use any external libraries rather than standard",
    "start": "85360",
    "end": "91600"
  },
  {
    "text": "library in the compiler so this is why i mentioned here next because it might",
    "start": "91600",
    "end": "97680"
  },
  {
    "text": "be a part of class plus in the future if not it still will be a nice library on github or conan vc package too so",
    "start": "97680",
    "end": "106000"
  },
  {
    "text": "you can still use it i will not talk much about motivation existing practice challenges here because i already covered this a few set",
    "start": "106000",
    "end": "113200"
  },
  {
    "start": "108000",
    "end": "184000"
  },
  {
    "text": "them ago on cfpcon so please go and and see that if you are interested in the",
    "start": "113200",
    "end": "119119"
  },
  {
    "text": "subject we are going to talk more about the use cases and other stuff today so",
    "start": "119119",
    "end": "125439"
  },
  {
    "text": "um we're going to talk about stock interfaces about the performance user",
    "start": "125439",
    "end": "131680"
  },
  {
    "text": "experience some introduction to the framework basics of my library and",
    "start": "131680",
    "end": "136720"
  },
  {
    "text": "basically compatibility environment that's needed to make it work",
    "start": "136720",
    "end": "143840"
  },
  {
    "text": "there is a lot of material to cover so if there will be time i will take questions at the end so please note",
    "start": "143920",
    "end": "149280"
  },
  {
    "text": "slides if you'd like to refer to some specific maybe code sample",
    "start": "149280",
    "end": "154959"
  },
  {
    "text": "and also talk about the samples some of the code samples will be not meant for you to read at full just to grasp",
    "start": "154959",
    "end": "161360"
  },
  {
    "text": "general idea for example how much code is needed or how many include files you have to import rather than reading every",
    "start": "161360",
    "end": "167519"
  },
  {
    "text": "one of them by hand because we have like 90 slides for 60 minutes which is a lot",
    "start": "167519",
    "end": "173519"
  },
  {
    "text": "uh sets will be available after the presentation so you'll be able to read them in detail if needed also i provide",
    "start": "173519",
    "end": "178640"
  },
  {
    "text": "the godbolt links for nearly every code sample so you can also play with it in godbolt",
    "start": "178640",
    "end": "184400"
  },
  {
    "text": "so let's start first of all what is this about physical inspiratory is about managing",
    "start": "184400",
    "end": "190400"
  },
  {
    "text": "the quantities of some physical dimensions with some units right",
    "start": "190400",
    "end": "196159"
  },
  {
    "text": "we know this already because we have chrono in the standard chrono is only one of the quantity types one dimension",
    "start": "196159",
    "end": "201599"
  },
  {
    "text": "time right so this is similar this is something that we always did 30 kilometers divided by two should give",
    "start": "201599",
    "end": "207200"
  },
  {
    "text": "five kilometers this is simple but we also want to do unique conversions like in chrono",
    "start": "207200",
    "end": "213200"
  },
  {
    "text": "but also for other dimensions and we want to be able to convert",
    "start": "213200",
    "end": "219360"
  },
  {
    "text": "between different dimensions easily right one divide one kilometer divided by second it's 1000 meter per second right",
    "start": "219360",
    "end": "227440"
  },
  {
    "text": "and so on also notice that dividing a scalar by",
    "start": "227440",
    "end": "235599"
  },
  {
    "text": "a quantity gives a quantity of a different type right so you don't have to divide two different quantities it's enough to make",
    "start": "235599",
    "end": "241840"
  },
  {
    "text": "an inverse and you end up with a different quantity",
    "start": "241840",
    "end": "246000"
  },
  {
    "text": "and in my library actually have more than one way to do it in terms of the construction of those quantities we had",
    "start": "247040",
    "end": "254239"
  },
  {
    "text": "a vote yesterday about which one is the most um basically favorite one for this",
    "start": "254239",
    "end": "260320"
  },
  {
    "text": "audience so uh this one was not this is didn't this is udl this is what what chromo",
    "start": "260320",
    "end": "266720"
  },
  {
    "text": "does this one was not also this is boost like syntax",
    "start": "266720",
    "end": "272400"
  },
  {
    "text": "with multiply and sorry this is literally yeah this one is not this is boost leg syntax",
    "start": "272400",
    "end": "278880"
  },
  {
    "text": "and in order to make it work you have to provide all of those parentheses to basically not have mistakes",
    "start": "278880",
    "end": "285759"
  },
  {
    "text": "this one was the one that won yesterday the first one and i promised that all the rest of the slides in my talk today",
    "start": "287360",
    "end": "292880"
  },
  {
    "text": "will be basing on this one so i spent an entire evening yesterday fixing my slides to reflect what you voted",
    "start": "292880",
    "end": "298479"
  },
  {
    "text": "yesterday so this is the version of so-called aliases for units",
    "start": "298479",
    "end": "305199"
  },
  {
    "text": "and um yeah they work with either the thirst version or a longer",
    "start": "305199",
    "end": "310560"
  },
  {
    "text": "version both of them are supported by the same solution so if you want to biters you can be terrors if you want to be",
    "start": "310560",
    "end": "315840"
  },
  {
    "text": "more detailed if you want to say exactly what this m means because in some context m may not have specific meaning",
    "start": "315840",
    "end": "321280"
  },
  {
    "text": "you can always provide that this is meter of quantity length",
    "start": "321280",
    "end": "327280"
  },
  {
    "text": "which depends on the context right so it's useful so this is these are the results from",
    "start": "327280",
    "end": "333280"
  },
  {
    "start": "332000",
    "end": "340000"
  },
  {
    "text": "yesterday so as you can see there was strong preference to use this approach",
    "start": "333280",
    "end": "339080"
  },
  {
    "start": "340000",
    "end": "410000"
  },
  {
    "text": "talking point about the project we i think that you have pretty nice documentation you can judge it by",
    "start": "341199",
    "end": "346639"
  },
  {
    "text": "yourself going to this link so there is quite a lot of chapters quite a lot of things there i",
    "start": "346639",
    "end": "353280"
  },
  {
    "text": "spent quite a lot of time making it right and detailed you can also try it on compiler explorer",
    "start": "353280",
    "end": "361440"
  },
  {
    "text": "we have several releases there 7070 is the latest series but we also have trunk version",
    "start": "361440",
    "end": "368000"
  },
  {
    "text": "and two weeks ago or three weeks ago i added this also to gridbot",
    "start": "368000",
    "end": "373039"
  },
  {
    "text": "there is a big button on github static open in gitpod if you click it in a few seconds you will end up in an",
    "start": "373039",
    "end": "379199"
  },
  {
    "text": "environment ready to work with all of the dependencies being installed with all of the",
    "start": "379199",
    "end": "384800"
  },
  {
    "text": "targets being pre-compiled for gcc 10 gcc 11 clank 13",
    "start": "384800",
    "end": "390960"
  },
  {
    "text": "and all the communication bit so if you just want to build it in the visual studio code you will just get",
    "start": "390960",
    "end": "396800"
  },
  {
    "text": "information that nothing has to be done because already everything is pre-built so if you do any changes only your changes will be built and it will be",
    "start": "396800",
    "end": "402960"
  },
  {
    "text": "pretty fast for you to contribute possibly to my project",
    "start": "402960",
    "end": "408520"
  },
  {
    "text": "our project sorry uh also we are in conan uh we have the",
    "start": "408880",
    "end": "414400"
  },
  {
    "text": "latest official version on official server zero seven zero so you can use it with with conan and",
    "start": "414400",
    "end": "420479"
  },
  {
    "text": "you can also used this specific language version 20 for this one to not have any problems we just discussed this problem",
    "start": "420479",
    "end": "426800"
  },
  {
    "text": "and on the previous lecture and also you can use the latest version from",
    "start": "426800",
    "end": "432479"
  },
  {
    "text": "the head for this you have to add the remote on my j5 artifactory where i host",
    "start": "432479",
    "end": "437759"
  },
  {
    "text": "the latest builds all the time",
    "start": "437759",
    "end": "441680"
  },
  {
    "text": "requirements for the project we want to be compiling compile time save wherever possible right we have to",
    "start": "443680",
    "end": "450400"
  },
  {
    "text": "provide the best user experience uh in terms of compiler errors and debugging and this is really important here",
    "start": "450400",
    "end": "456160"
  },
  {
    "text": "because basically the main purpose of this library to exist is to generate errors every day for every",
    "start": "456160",
    "end": "463120"
  },
  {
    "text": "engineer if you if basically if people will not make any problems and errors and mistakes in",
    "start": "463120",
    "end": "468400"
  },
  {
    "text": "their code this library is useless right because if you know how to divide",
    "start": "468400",
    "end": "473919"
  },
  {
    "text": "units how do they divide uh quantities you don't need any compiling checks",
    "start": "473919",
    "end": "479120"
  },
  {
    "text": "but it is hard and we make a lot of mistakes that's why this library is really important and that's why we need to make",
    "start": "479120",
    "end": "485680"
  },
  {
    "text": "those compiler errors easy to work with for people that are also not experts in c plus plus template meta programming",
    "start": "485680",
    "end": "493440"
  },
  {
    "text": "because in most cases this is used by engineers that even don't know exactly how to code in c plus",
    "start": "493440",
    "end": "500000"
  },
  {
    "text": "it should be as fast as double because if double will be faster people will not use this library",
    "start": "501360",
    "end": "507840"
  },
  {
    "text": "it should be easy to extend because you are working in many different fields",
    "start": "508160",
    "end": "513680"
  },
  {
    "text": "maybe on my library i can provide some specific support for your specific domain but in the standard standard for",
    "start": "513680",
    "end": "520320"
  },
  {
    "text": "sure will not be able to cover all of the grounds we'll cover only the most important ones like si system but will not cover maybe",
    "start": "520320",
    "end": "526800"
  },
  {
    "text": "i don't know natural not natural linux or other different uh points of of um",
    "start": "526800",
    "end": "532880"
  },
  {
    "text": "quantum physics for example right there cannot be macros in the interface",
    "start": "532880",
    "end": "540480"
  },
  {
    "text": "uh basically for library on github probably does it matter but committee will never agree to have macros in the",
    "start": "540480",
    "end": "545920"
  },
  {
    "text": "interface so if i'm dreaming about the synthesization of this in the future i cannot use macros",
    "start": "545920",
    "end": "552640"
  },
  {
    "text": "and there should be no external dependencies rather other than the standard ones right",
    "start": "552640",
    "end": "558080"
  },
  {
    "text": "also it should be possible to be standardized as freestanding part of the standard library so it can be used in embedded domain for example without any",
    "start": "558080",
    "end": "564320"
  },
  {
    "text": "any issues right so for example no exceptions no dynamic locations and so on",
    "start": "564320",
    "end": "570160"
  },
  {
    "text": "okay so let's talk about the interfaces",
    "start": "572959",
    "end": "577079"
  },
  {
    "start": "579000",
    "end": "625000"
  },
  {
    "text": "this is my toy example that i would like to use today for our lecture i have some",
    "start": "579200",
    "end": "584240"
  },
  {
    "text": "average speed function that takes some length some time divided return speed right",
    "start": "584240",
    "end": "591680"
  },
  {
    "text": "and then i want to pass kilometers hours get speed in kilometers per hour print",
    "start": "591680",
    "end": "597680"
  },
  {
    "text": "it as kilometers per hour because this is what user is working on right",
    "start": "597680",
    "end": "602800"
  },
  {
    "text": "and the same for miles because we have we may want to have support for different locations",
    "start": "602800",
    "end": "610240"
  },
  {
    "text": "what is important is compare time safety support for multiple units and unique prefixes and there should be no runtime",
    "start": "612079",
    "end": "619040"
  },
  {
    "text": "overhead comparing to double",
    "start": "619040",
    "end": "622560"
  },
  {
    "text": "of course you can do everything on doubles right actually this is true for many projects",
    "start": "624240",
    "end": "629360"
  },
  {
    "start": "625000",
    "end": "687000"
  },
  {
    "text": "i've seen in production",
    "start": "629360",
    "end": "633399"
  },
  {
    "text": "this is quite fast this is efficient of course right",
    "start": "634640",
    "end": "640320"
  },
  {
    "text": "what's the problem here basically is that even in this case of double what you are doing in here you are",
    "start": "640320",
    "end": "649440"
  },
  {
    "text": "converting every time two meters and back right kilometer to meter hours to",
    "start": "651600",
    "end": "658160"
  },
  {
    "text": "seconds results in meters per second then meters per second to 2 kilometer per",
    "start": "658160",
    "end": "663920"
  },
  {
    "text": "hour this is slow in case of additional operation that you don't need in this case this is also how many existing",
    "start": "663920",
    "end": "671120"
  },
  {
    "text": "libraries work right now today they work on the coherent so-called coherent units of the of the system",
    "start": "671120",
    "end": "679279"
  },
  {
    "text": "but it works right assuming that there are no floating",
    "start": "679519",
    "end": "684640"
  },
  {
    "text": "point problems here if you want to use boost units first of all you have to include a bunch of",
    "start": "684640",
    "end": "690720"
  },
  {
    "start": "687000",
    "end": "741000"
  },
  {
    "text": "headers and it's not trivial which have which headers actually tool to include so so i found it",
    "start": "690720",
    "end": "696800"
  },
  {
    "text": "pretty frustrating that something doesn't link doesn't compile even though it looks like a correct code and they have to figure out which header is",
    "start": "696800",
    "end": "702320"
  },
  {
    "text": "missing but but the function is declared really nicely with nice interface",
    "start": "702320",
    "end": "708640"
  },
  {
    "text": "and that's what it basically should do however if you would like to provide",
    "start": "708640",
    "end": "713920"
  },
  {
    "text": "things like kilometer our uh even though boost units is a great laboratory with a lot of units and quantities it turns out",
    "start": "713920",
    "end": "720160"
  },
  {
    "text": "that it doesn't cover those um by by itself because it also only covers the ones",
    "start": "720160",
    "end": "726560"
  },
  {
    "text": "that are um basically the coherent needs of specific systems and",
    "start": "726560",
    "end": "732959"
  },
  {
    "text": "prefix ones",
    "start": "732959",
    "end": "735680"
  },
  {
    "text": "so i have to define this by myself and also there are no implicit",
    "start": "738880",
    "end": "744639"
  },
  {
    "start": "741000",
    "end": "813000"
  },
  {
    "text": "conversions in both units even in the correct com in the correct direction so if you are having the",
    "start": "744639",
    "end": "751440"
  },
  {
    "text": "experience with with chrono you know that you can always convert hours to seconds because this is always",
    "start": "751440",
    "end": "758240"
  },
  {
    "text": "a non-truncating conversion vice versa of course is bad right because seconds to hours is a truncating operation but",
    "start": "758240",
    "end": "764320"
  },
  {
    "text": "in one direction it's safe and this is what we are used to this is something that we expect to do in this case but in case of boot units there are",
    "start": "764320",
    "end": "770720"
  },
  {
    "text": "no implicit conversions at all you can we have to always implicit explicitly cast to every new unit",
    "start": "770720",
    "end": "777360"
  },
  {
    "text": "and which is quite verbal and surprising sometimes because error locks are not that easy to understand that actually",
    "start": "777360",
    "end": "783200"
  },
  {
    "text": "it's about the conversion problem",
    "start": "783200",
    "end": "787240"
  },
  {
    "text": "moreover if you provide this example provide the 220 kilometers to hours miles hours",
    "start": "792399",
    "end": "801040"
  },
  {
    "text": "this is the reason that will be printed probably it's not the best result that",
    "start": "801040",
    "end": "806079"
  },
  {
    "text": "we can expect but still it works in at least in the unit that we did that we wanted",
    "start": "806079",
    "end": "812839"
  },
  {
    "start": "813000",
    "end": "850000"
  },
  {
    "text": "i would also like to compare with other labor that's a really popular one and you can written by nick hallhouse",
    "start": "814000",
    "end": "820320"
  },
  {
    "text": "you can find it on github it's quite dirt it has only one header so it's nice to include",
    "start": "820320",
    "end": "827600"
  },
  {
    "text": "it has really short types so actually entire implementation fits",
    "start": "827600",
    "end": "832720"
  },
  {
    "text": "in one slide with the use case it uses udls",
    "start": "832720",
    "end": "838720"
  },
  {
    "text": "but prints only the coherent units of the system rather than the ones provided by the user or the one that was returned",
    "start": "838720",
    "end": "845279"
  },
  {
    "text": "from this as a type",
    "start": "845279",
    "end": "848320"
  },
  {
    "text": "the pair that we wrote basically has the same support we are",
    "start": "850480",
    "end": "856000"
  },
  {
    "text": "still in the uh coherent unit um domain so we are still converting from",
    "start": "856000",
    "end": "862240"
  },
  {
    "text": "kilometers to meters and then from meter kilometer meters per second to kilometers per hour but this is the use case this use case",
    "start": "862240",
    "end": "869440"
  },
  {
    "text": "covered by the library i'm talking about with the exactly with the",
    "start": "869440",
    "end": "876000"
  },
  {
    "text": "nami convention that we chose yesterday",
    "start": "876000",
    "end": "879600"
  },
  {
    "text": "and it prints what's expected",
    "start": "883360",
    "end": "886639"
  },
  {
    "start": "893000",
    "end": "957000"
  },
  {
    "text": "but we don't want to pay for this conversion if you don't need it right if the user provides us kilometer per hour",
    "start": "894240",
    "end": "900320"
  },
  {
    "text": "and this is the only unit the user is using in entire application why we do have to convert two meters to",
    "start": "900320",
    "end": "906880"
  },
  {
    "text": "seconds and back even the user never actually talks to us in meters and seconds the user doesn't care",
    "start": "906880",
    "end": "912720"
  },
  {
    "text": "there's a performance hit here right also possible problem with",
    "start": "912720",
    "end": "917839"
  },
  {
    "text": "with floating point precision if you are defining multiplying values all the time just to get the same",
    "start": "917839",
    "end": "924639"
  },
  {
    "text": "unit again or the right unit of this unit right so if user provides us kilometers",
    "start": "924639",
    "end": "929920"
  },
  {
    "text": "per hour we should return this in kilometer per hour right away and just divide the values and don't play",
    "start": "929920",
    "end": "935199"
  },
  {
    "text": "with the ratios of units at all so we are we need to have some some generic code here",
    "start": "935199",
    "end": "942880"
  },
  {
    "text": "of course we can do everything with double right it's as fast as it gets you just divide them and you have a",
    "start": "944560",
    "end": "950079"
  },
  {
    "text": "correct result right but it's not a type save",
    "start": "950079",
    "end": "957680"
  },
  {
    "start": "957000",
    "end": "999000"
  },
  {
    "text": "so if you want to make it in boost it's even harder because you have to a partially specialized template a certain",
    "start": "957680",
    "end": "964480"
  },
  {
    "text": "template with with with this signature and there's a problem what should be a return type you can of course write an auto",
    "start": "964480",
    "end": "970959"
  },
  {
    "text": "but if you want to be more verbs what it actually returns there is no easy helper for that",
    "start": "970959",
    "end": "976399"
  },
  {
    "text": "and notice that here i had to divide the length by time so basically i have to repeat the logic of the library",
    "start": "976399",
    "end": "983600"
  },
  {
    "text": "so i have to know that speed is is a division of those two",
    "start": "983600",
    "end": "988639"
  },
  {
    "text": "notice that i will start talking about some energy or something more complicated then this return type will",
    "start": "988639",
    "end": "994240"
  },
  {
    "text": "be huge and possible to make mistakes",
    "start": "994240",
    "end": "999199"
  },
  {
    "start": "999000",
    "end": "1032000"
  },
  {
    "text": "with nick library with nyx library [Music]",
    "start": "1000800",
    "end": "1006000"
  },
  {
    "text": "it's even harder because we cannot provide those templates here because some reasons i spoke about this on my",
    "start": "1006000",
    "end": "1012000"
  },
  {
    "text": "previous stocks so i have to basically use enable leaf with some type trades",
    "start": "1012000",
    "end": "1018560"
  },
  {
    "text": "to make sure that those arguments have a correct way and i didn't find any way to say this is speed as a return so i just",
    "start": "1018560",
    "end": "1024480"
  },
  {
    "text": "checked with static assert if it's actually velocity",
    "start": "1024480",
    "end": "1029280"
  },
  {
    "start": "1032000",
    "end": "1060000"
  },
  {
    "text": "actually we can improve this this solution here with those libraries using concepts c plus 20",
    "start": "1034799",
    "end": "1040720"
  },
  {
    "text": "concepts we can define quantity of we can define length as quantity of",
    "start": "1040720",
    "end": "1046079"
  },
  {
    "text": "length dimension time velocity and specified this way and the stars to work correctly so concepts even for",
    "start": "1046079",
    "end": "1053200"
  },
  {
    "text": "those legacy libraries make a huge difference so for for the interfaces",
    "start": "1053200",
    "end": "1059360"
  },
  {
    "start": "1060000",
    "end": "1071000"
  },
  {
    "text": "the same for the other library and your handicap exactly with the same",
    "start": "1060559",
    "end": "1065760"
  },
  {
    "text": "signature",
    "start": "1065760",
    "end": "1068320"
  },
  {
    "start": "1071000",
    "end": "1155000"
  },
  {
    "text": "in the library i provided actually this is the default so i don't have to make any",
    "start": "1071679",
    "end": "1078960"
  },
  {
    "text": "any helpers this is the default case and this is actually the suggested use case for generic code if you want to have",
    "start": "1078960",
    "end": "1084160"
  },
  {
    "text": "generic code this is what you should write this is template even though it doesn't look like a template but it is because",
    "start": "1084160",
    "end": "1090320"
  },
  {
    "text": "you have auto here as function arguments right and it takes time length return speed",
    "start": "1090320",
    "end": "1096480"
  },
  {
    "text": "it's clear to the user what it does and it is easy to use",
    "start": "1096480",
    "end": "1102160"
  },
  {
    "text": "so if you provide kilometers per hours you get speed also here you can",
    "start": "1102160",
    "end": "1109200"
  },
  {
    "text": "if and you can print it another one with miles an hour and this is the result",
    "start": "1109200",
    "end": "1116240"
  },
  {
    "text": "and this is not only about generosity here it's not only about having different units for specific quantities of length it's also about",
    "start": "1118240",
    "end": "1124640"
  },
  {
    "text": "having different representation types if i pass here linear algebra proposal",
    "start": "1124640",
    "end": "1131280"
  },
  {
    "text": "as units as values the same it will work",
    "start": "1131280",
    "end": "1136400"
  },
  {
    "text": "i will get the result as a vector",
    "start": "1136400",
    "end": "1141280"
  },
  {
    "text": "right because division works for the velocities",
    "start": "1143280",
    "end": "1148600"
  },
  {
    "text": "thank you guys",
    "start": "1150799",
    "end": "1153360"
  },
  {
    "start": "1155000",
    "end": "1212000"
  },
  {
    "text": "okay so let's talk about performance um dividing coherent units of double",
    "start": "1156240",
    "end": "1162720"
  },
  {
    "text": "requires us to do some multiplications and divisions we have three multiplications two divisions and this is the code you've seen already so it's",
    "start": "1162720",
    "end": "1168960"
  },
  {
    "text": "just grayed out so you don't spend time on looking into it for boost units free multiplication one",
    "start": "1168960",
    "end": "1175280"
  },
  {
    "text": "division nichols house i have seen free multiplication two divisions for my",
    "start": "1175280",
    "end": "1181919"
  },
  {
    "text": "library free multiplication one division so it turns out that actually strong type library can be faster",
    "start": "1181919",
    "end": "1188400"
  },
  {
    "text": "than double because double had two divisions it may because the fact that maybe there is",
    "start": "1188400",
    "end": "1194320"
  },
  {
    "text": "there are some potential for aliasing because the compiler doesn't know that those are different types and and those",
    "start": "1194320",
    "end": "1200640"
  },
  {
    "text": "doesn't know that those are not the same values or different values right but it turns",
    "start": "1200640",
    "end": "1206400"
  },
  {
    "text": "out that strong typing can be faster than using fundamental types",
    "start": "1206400",
    "end": "1212240"
  },
  {
    "start": "1212000",
    "end": "1236000"
  },
  {
    "text": "but we are interested in this code we don't want to pay for any other other overhead right we are just dividing",
    "start": "1212320",
    "end": "1218840"
  },
  {
    "text": "doubles quantities and boost units nick hall house",
    "start": "1218840",
    "end": "1224559"
  },
  {
    "text": "and mine",
    "start": "1224559",
    "end": "1226960"
  },
  {
    "text": "so there's no run time overhead over working on fundamental fundamental types",
    "start": "1229760",
    "end": "1236240"
  },
  {
    "start": "1236000",
    "end": "1244000"
  },
  {
    "text": "user experience doing physical units is hard",
    "start": "1237280",
    "end": "1243840"
  },
  {
    "start": "1244000",
    "end": "1428000"
  },
  {
    "text": "maybe not not in this case it's a trigger bug but consider having a function of 100",
    "start": "1244799",
    "end": "1250080"
  },
  {
    "text": "lines with many temporary calculations and then some result it may not be speed anymore",
    "start": "1250080",
    "end": "1258158"
  },
  {
    "text": "right this is what you will see in both units",
    "start": "1258720",
    "end": "1265679"
  },
  {
    "text": "notice three dots at the end because this is not the end we are continuing this was the first line this is the",
    "start": "1265760",
    "end": "1271360"
  },
  {
    "text": "second line of the lock because this was just in function now you're having the error actual error",
    "start": "1271360",
    "end": "1279760"
  },
  {
    "text": "and it continues and yeah and from on the dots here",
    "start": "1279760",
    "end": "1286000"
  },
  {
    "text": "do you know what was the issue",
    "start": "1286000",
    "end": "1289799"
  },
  {
    "text": "with other library it's much shorter",
    "start": "1293039",
    "end": "1298240"
  },
  {
    "text": "because we have static assets i think that units are not compatible so it's better right but on the other hand do you know",
    "start": "1298400",
    "end": "1304400"
  },
  {
    "text": "what a unit is here to compare why they are not compatible let's do the ratio once to the ratio",
    "start": "1304400",
    "end": "1310720"
  },
  {
    "text": "zero one is to the ratio once to the ratio zero one and it follows what is the problem what are the units",
    "start": "1310720",
    "end": "1316640"
  },
  {
    "text": "here as you can see static assets sometimes",
    "start": "1316640",
    "end": "1322559"
  },
  {
    "text": "it's not that helpful it's just shorter",
    "start": "1322559",
    "end": "1327360"
  },
  {
    "text": "and with my library you actually have this is entire error lock and you have information that e-function",
    "start": "1329840",
    "end": "1336240"
  },
  {
    "text": "you could not convert from to and actually you have all the information regarding the",
    "start": "1336240",
    "end": "1344000"
  },
  {
    "text": "quantities that are provided right notice that in this case we are stating that we have",
    "start": "1344000",
    "end": "1350880"
  },
  {
    "text": "here length type as an input and",
    "start": "1350880",
    "end": "1357440"
  },
  {
    "text": "basically we are having here unknown dimension of exponent of dim length one",
    "start": "1359760",
    "end": "1364799"
  },
  {
    "text": "and exponent time one so basically it means that those are multiplied rather than divided if it was divided it was b",
    "start": "1364799",
    "end": "1370799"
  },
  {
    "text": "minus one and it will actually be converted to speed so it's easier to understand what",
    "start": "1370799",
    "end": "1376000"
  },
  {
    "text": "happens those basically the fact that we are",
    "start": "1376000",
    "end": "1382480"
  },
  {
    "text": "having syncing name time unknown dimension is the fact is caused by the fact that i'm using structure the strong",
    "start": "1382480",
    "end": "1388960"
  },
  {
    "text": "types in my code rather than template aliases if you're doing template alias for the same it will just decay during the",
    "start": "1388960",
    "end": "1394960"
  },
  {
    "text": "programming during the compilation stage compiler do not play with aliases is",
    "start": "1394960",
    "end": "1400159"
  },
  {
    "text": "only for humans to write code right and that's why those errors are so so huge here because this is an alias that's",
    "start": "1400159",
    "end": "1406880"
  },
  {
    "text": "user friendly this is an alias right but then when it's extended by the",
    "start": "1406880",
    "end": "1412480"
  },
  {
    "text": "compiler it looks like this one that's why strong typing is really important and that's why it's a pity",
    "start": "1412480",
    "end": "1417919"
  },
  {
    "text": "that we don't have strong type aliases in our language",
    "start": "1417919",
    "end": "1423279"
  },
  {
    "start": "1428000",
    "end": "1485000"
  },
  {
    "text": "okay so let's maybe look into another kind of of problem",
    "start": "1428720",
    "end": "1433760"
  },
  {
    "text": "we have dimension mismatch here we are basically dividing meters by seconds and we want to assign this to",
    "start": "1433760",
    "end": "1439919"
  },
  {
    "text": "acceleration this is short error this time",
    "start": "1439919",
    "end": "1445840"
  },
  {
    "text": "but you have information that conversion from dots to non scalar dot dot dots",
    "start": "1445840",
    "end": "1451600"
  },
  {
    "text": "requested and really again we don't know what happened",
    "start": "1451600",
    "end": "1458760"
  },
  {
    "text": "because everything is hidden behind dots you just see difference here but basically don't know",
    "start": "1460559",
    "end": "1466400"
  },
  {
    "text": "what you're working with",
    "start": "1466400",
    "end": "1469200"
  },
  {
    "text": "another library it's quite similar maybe a bit longer",
    "start": "1471520",
    "end": "1476720"
  },
  {
    "text": "a long list of ratios again and static assert units are not compatible",
    "start": "1476720",
    "end": "1483559"
  },
  {
    "start": "1485000",
    "end": "1579000"
  },
  {
    "text": "and library that we are writing we have so called the doncasting facility we're",
    "start": "1486080",
    "end": "1491600"
  },
  {
    "text": "also voting on this one yesterday actually this one this vote actually was funny yesterday",
    "start": "1491600",
    "end": "1496720"
  },
  {
    "text": "but people basically like this feature and we basically voted that it should stay there",
    "start": "1496720",
    "end": "1504000"
  },
  {
    "text": "uh if you're interested they didn't it would be in the other talk that i provided yesterday so it should be also",
    "start": "1505600",
    "end": "1510960"
  },
  {
    "text": "visible provided on youtube some in some time probably from now",
    "start": "1510960",
    "end": "1518400"
  },
  {
    "text": "so this is the the result conversion from dimension speed meter per second to non-scalar type",
    "start": "1518400",
    "end": "1524720"
  },
  {
    "text": "dimension acceleration meter per second all of the information is provided and the fact that dividing length by",
    "start": "1524720",
    "end": "1532400"
  },
  {
    "text": "time gives us nicely named speed with meter per second",
    "start": "1532400",
    "end": "1537520"
  },
  {
    "text": "type is the benefit of this democratic facility because",
    "start": "1537520",
    "end": "1542640"
  },
  {
    "text": "typically you will not be able to find a user provided type",
    "start": "1542640",
    "end": "1547840"
  },
  {
    "text": "from the base class right because this actually is exponent one",
    "start": "1547840",
    "end": "1554640"
  },
  {
    "text": "exponent -1 some meta programming monster but we are able to find out that user",
    "start": "1554640",
    "end": "1561679"
  },
  {
    "text": "provided a type that exactly somehow renames this monster",
    "start": "1561679",
    "end": "1568640"
  },
  {
    "text": "to those nicely named types by the user and this is what the doncaster ducati",
    "start": "1568640",
    "end": "1573760"
  },
  {
    "text": "facility is about to provide nice to work with error messages and debugging experience",
    "start": "1573760",
    "end": "1579600"
  },
  {
    "start": "1579000",
    "end": "1658000"
  },
  {
    "text": "so talking about the debugging experience boost units",
    "start": "1579600",
    "end": "1585760"
  },
  {
    "text": "you are going to debugger and this is a breakpoint as you're working with generic code you",
    "start": "1585760",
    "end": "1592400"
  },
  {
    "text": "would like to know what is the type you're working with right",
    "start": "1592400",
    "end": "1599840"
  },
  {
    "text": "without the library again a bunch of ratios",
    "start": "1600640",
    "end": "1605440"
  },
  {
    "text": "when you break in our library again you have information the one that you expect",
    "start": "1606960",
    "end": "1613840"
  },
  {
    "text": "dim length in kilometer dim time in hour",
    "start": "1613840",
    "end": "1619440"
  },
  {
    "text": "i think that's really important for physical use library and maybe other libraries but physically unity is probably one of the most",
    "start": "1622880",
    "end": "1629520"
  },
  {
    "text": "important here to provide good user experience for the users because as i said the main purpose of",
    "start": "1629520",
    "end": "1635840"
  },
  {
    "text": "this existence is actually to produce those errors",
    "start": "1635840",
    "end": "1640919"
  },
  {
    "text": "and an engineer will be faced with those errors many times a day",
    "start": "1640960",
    "end": "1645919"
  },
  {
    "text": "so it should be easy to analyze",
    "start": "1647919",
    "end": "1651120"
  },
  {
    "text": "so what are the framework basics here let's talk about strong interfaces",
    "start": "1653520",
    "end": "1659919"
  },
  {
    "start": "1658000",
    "end": "1763000"
  },
  {
    "text": "how do you like this code i see people laughing for people on",
    "start": "1659919",
    "end": "1666720"
  },
  {
    "text": "youtube there is some love here yeah we don't like this interface right this is c like we can provide every",
    "start": "1666720",
    "end": "1672880"
  },
  {
    "text": "everything there we are doing better we are c plus programmers we are having strong types right",
    "start": "1672880",
    "end": "1678640"
  },
  {
    "text": "so we write this one or this one",
    "start": "1678640",
    "end": "1685039"
  },
  {
    "text": "which actually in class 20 looks like that or maybe this one",
    "start": "1685039",
    "end": "1691760"
  },
  {
    "text": "how we are better is it really so bad so much nicer",
    "start": "1691760",
    "end": "1697760"
  },
  {
    "text": "of course this one will fail at runtime this one will fail at compile time with huge error lock",
    "start": "1697760",
    "end": "1703200"
  },
  {
    "text": "right but consider cpreference.com or the oxygen or any other documentation provided for",
    "start": "1703200",
    "end": "1709360"
  },
  {
    "text": "the user where you provide such an interface and say please comply to the requirements provided by the interface",
    "start": "1709360",
    "end": "1716480"
  },
  {
    "text": "how come can you provide anything and know how to use this what to provide what to expect as a return type if you type like this one in",
    "start": "1716799",
    "end": "1724000"
  },
  {
    "text": "our code i claim that unconstrained template",
    "start": "1724000",
    "end": "1729440"
  },
  {
    "text": "parameters are the void star of c plus and this is something that we should",
    "start": "1729440",
    "end": "1734880"
  },
  {
    "text": "change with c plus 20. i know that it's hard i know that there's a lot of to learn to learn",
    "start": "1734880",
    "end": "1740960"
  },
  {
    "text": "please open the concepts iterators and ranges library in cpreference.com you fight you'll find a lot of concepts",
    "start": "1740960",
    "end": "1746159"
  },
  {
    "text": "there but you have to start practice and practice and practice and with this",
    "start": "1746159",
    "end": "1751200"
  },
  {
    "text": "we'll learn how to use it we just have to use it get used to it",
    "start": "1751200",
    "end": "1756240"
  },
  {
    "text": "and know what's there in order to not reinvent the wheel",
    "start": "1756240",
    "end": "1761440"
  },
  {
    "text": "so we have concepts in our library this is basically the three of concepts we have we have unit dimension quantity quantity",
    "start": "1762559",
    "end": "1770399"
  },
  {
    "start": "1763000",
    "end": "2153000"
  },
  {
    "text": "point quantity kind and quantity point kind right now and some other concepts of course but those are the most important ones",
    "start": "1770399",
    "end": "1777360"
  },
  {
    "text": "unit is a basic building block of the library everything depends on unit",
    "start": "1777360",
    "end": "1782880"
  },
  {
    "text": "every unit can be scaled against its reference unit right as for example you can have kilometers a scaled version of meter",
    "start": "1783200",
    "end": "1789279"
  },
  {
    "text": "right and every dimension has a coherent unit assigned so we know that length in sa system is measured in meters length in",
    "start": "1789279",
    "end": "1797039"
  },
  {
    "text": "cgs system is measured in centimeters and so on",
    "start": "1797039",
    "end": "1801840"
  },
  {
    "text": "and this is how we defined it struck meter thanks to 0x20 you can provide an",
    "start": "1802399",
    "end": "1809279"
  },
  {
    "text": "identifier right away in the definition and the prefix which basically means that this is a prefix supported for this",
    "start": "1809279",
    "end": "1816480"
  },
  {
    "text": "for this unit so then you can specify kilometer as the prefixed one this is crtp design pattern",
    "start": "1816480",
    "end": "1823360"
  },
  {
    "text": "that's why it's repeated i hope it will be possible to get rid of it with the new um inclusion of the",
    "start": "1823360",
    "end": "1830080"
  },
  {
    "text": "language called uh i don't remember what's official name but there was a talk my little deduction",
    "start": "1830080",
    "end": "1836880"
  },
  {
    "text": "uh so we will be able to pass this and and to the functions and basically maybe ctp will be not needed in this",
    "start": "1836880",
    "end": "1843600"
  },
  {
    "text": "case do you remember what was the proposal actually but we voted this in on last honest meeting",
    "start": "1843600",
    "end": "1851520"
  },
  {
    "text": "reducing this yeah this is the officially official name of the paper right",
    "start": "1851520",
    "end": "1856480"
  },
  {
    "text": "yep so you can define also second minute hour with a scaled units those are prefix",
    "start": "1858799",
    "end": "1865760"
  },
  {
    "text": "because those are using prefixes minute doesn't use a prefix just use this ratio 60 of second",
    "start": "1865760",
    "end": "1872159"
  },
  {
    "text": "and hour is 60 minutes so these are units",
    "start": "1872159",
    "end": "1878200"
  },
  {
    "text": "also there can be derived units four meter per second kilometer per hour what's nice is that we can say that",
    "start": "1878640",
    "end": "1884880"
  },
  {
    "text": "there's a deduced unit and you just provide that this is deduced for speed so we know what speed",
    "start": "1884880",
    "end": "1890559"
  },
  {
    "text": "equation dimensional equation is and say we provide kilometer for length and hour for time and basically the framework",
    "start": "1890559",
    "end": "1897440"
  },
  {
    "text": "will divide those for us with correct ratios and provide the unit so we don't have to divide unit again if you already",
    "start": "1897440",
    "end": "1903360"
  },
  {
    "text": "specified that speed is the division of those two dimensions so it's safer and ratios are always",
    "start": "1903360",
    "end": "1911279"
  },
  {
    "text": "correct so talking about dimensions dimension concept matches either the",
    "start": "1911279",
    "end": "1917200"
  },
  {
    "text": "dimension of a so-called base or direct quantity we have seven base quantities in si system and all the rest are",
    "start": "1917200",
    "end": "1923039"
  },
  {
    "text": "derived from those base dimension is a suggestion of a unique symbol identifier like length",
    "start": "1923039",
    "end": "1930240"
  },
  {
    "text": "time those are official symbols provided by si and base unit for the specific system",
    "start": "1930240",
    "end": "1936399"
  },
  {
    "text": "because each system has different units for base base units base dimensions",
    "start": "1936399",
    "end": "1943120"
  },
  {
    "text": "direct dimension is a list of exponents of base or derived dimensions",
    "start": "1943120",
    "end": "1948640"
  },
  {
    "text": "so for example speed is provided in meter per second",
    "start": "1948640",
    "end": "1953919"
  },
  {
    "text": "and this is exponent one of time of the length sorry and exponent minus one of time",
    "start": "1953919",
    "end": "1961720"
  },
  {
    "text": "and finally we are coming to quantity there's a concrete amount of unit of a",
    "start": "1962960",
    "end": "1968000"
  },
  {
    "text": "for a specified dimension with a specific representation so a length is a quantity of length with",
    "start": "1968000",
    "end": "1974640"
  },
  {
    "text": "some unit as some representation so you can specify length in kilometer with representation in value free",
    "start": "1974640",
    "end": "1982880"
  },
  {
    "text": "right also with the constructor hyper that we voted",
    "start": "1982880",
    "end": "1987919"
  },
  {
    "text": "yesterday this is how you implement them and this is what you can type in the",
    "start": "1987919",
    "end": "1993120"
  },
  {
    "text": "library let's say length kilometer d3 which is quite more third",
    "start": "1993120",
    "end": "1999760"
  },
  {
    "text": "and nice okay so those are the quantities we are here",
    "start": "1999760",
    "end": "2005279"
  },
  {
    "text": "but what about the rest probably you wonder quantity kite quantity is a more",
    "start": "2005279",
    "end": "2010720"
  },
  {
    "text": "specific usage of a quantity for example imagine that you are implementing a packaging",
    "start": "2010720",
    "end": "2017760"
  },
  {
    "text": "system for some i don't know um shipping company or whatever they want to",
    "start": "2017760",
    "end": "2024799"
  },
  {
    "text": "provide all of the dimensions of the package with height and length of the package right",
    "start": "2024799",
    "end": "2031039"
  },
  {
    "text": "and there's always like arrow pointing up this way right so you don't want to put the package on wrong side",
    "start": "2031039",
    "end": "2038880"
  },
  {
    "text": "that's why you should for example be able to discriminate that something is a horizontal plane and something has a vertical plane and make",
    "start": "2038880",
    "end": "2045120"
  },
  {
    "text": "them separate even though they are still lens right so those are kinds of length",
    "start": "2045120",
    "end": "2051040"
  },
  {
    "text": "those are separate concerns and should not be possible to mix with each other",
    "start": "2051040",
    "end": "2056319"
  },
  {
    "text": "for example we may have a vertical kind and horizontal kind this is how you define those and you can say for example this is this",
    "start": "2056639",
    "end": "2062079"
  },
  {
    "text": "distance and height imagine flying a plane that will mix",
    "start": "2062079",
    "end": "2067200"
  },
  {
    "text": "those during calculations would it bother you",
    "start": "2067200",
    "end": "2074280"
  },
  {
    "text": "yeah this depends how short you're going here yeah and with this you can for example also have",
    "start": "2079520",
    "end": "2085599"
  },
  {
    "text": "safety like structures saying that this is height minimum um",
    "start": "2085599",
    "end": "2091118"
  },
  {
    "text": "basically altitude above gland level for below for example clouds",
    "start": "2091119",
    "end": "2097680"
  },
  {
    "text": "or distance separation from from the from from the ground right because this",
    "start": "2097680",
    "end": "2103040"
  },
  {
    "text": "is vertical plane quantity point probably you know what it is about it's like time point in chrono",
    "start": "2103040",
    "end": "2111119"
  },
  {
    "text": "and actually we can we are working with chrono really nicely you can define the time timestamp",
    "start": "2111119",
    "end": "2118400"
  },
  {
    "text": "and then initialize it this way",
    "start": "2118400",
    "end": "2122078"
  },
  {
    "text": "and quantity point kind basically is a quantity point for specific kind",
    "start": "2124400",
    "end": "2129440"
  },
  {
    "text": "like we can define vertical point kind specify this this is altitude in international foot for example",
    "start": "2129520",
    "end": "2136240"
  },
  {
    "text": "and then specify that we have some flight point in our vector off point where you have a timestamp altitude and distance",
    "start": "2136240",
    "end": "2144320"
  },
  {
    "text": "right and all of this is type safe",
    "start": "2144320",
    "end": "2147839"
  },
  {
    "text": "so concepts are nice and there are a lot of concepts for example imagine a function calculate",
    "start": "2149920",
    "end": "2156160"
  },
  {
    "start": "2153000",
    "end": "2251000"
  },
  {
    "text": "find for speeding with return price right what's speed speed is the quantity of",
    "start": "2156160",
    "end": "2162320"
  },
  {
    "text": "dimension speed quantity of is either quantity",
    "start": "2162320",
    "end": "2167680"
  },
  {
    "text": "is a quantity and d is the dimension of that we want to check",
    "start": "2167680",
    "end": "2173839"
  },
  {
    "text": "and we check if basically the dimension of this this one dimension is equivalent to dimensions stored in",
    "start": "2173839",
    "end": "2180480"
  },
  {
    "text": "this quantity quantity is a specialization of our class quantity",
    "start": "2180480",
    "end": "2186400"
  },
  {
    "text": "dimensions either base dimension or derived dimension derived dimension is direct from specialization of our class",
    "start": "2186400",
    "end": "2193680"
  },
  {
    "text": "base dimension is the right hospitalization of our class as well",
    "start": "2193680",
    "end": "2198559"
  },
  {
    "text": "so those are all concepts they are pretty nicely defined we still miss a nice feature to make",
    "start": "2198960",
    "end": "2205280"
  },
  {
    "text": "this uniform to have only one type trait for for for those uh we actually have a proposal for 23",
    "start": "2205280",
    "end": "2211599"
  },
  {
    "text": "for that called universal template parameter that we can match any kind in a in a",
    "start": "2211599",
    "end": "2217520"
  },
  {
    "text": "templated definition because right now it's not it's not possible you cannot much easily for example something for vector and right",
    "start": "2217520",
    "end": "2223520"
  },
  {
    "text": "because array has additional multiple parameter at the end so you cannot say this is a class that",
    "start": "2223520",
    "end": "2229520"
  },
  {
    "text": "has any type of parameters because you only can provide this is any",
    "start": "2229520",
    "end": "2234640"
  },
  {
    "text": "type of any kind of type parameters or any kind of value parameters and you cannot mix much",
    "start": "2234640",
    "end": "2240480"
  },
  {
    "text": "of those so missing one feature in the language hopefully we'll be able even to improve",
    "start": "2240480",
    "end": "2246400"
  },
  {
    "text": "that in the future conversions conversions are similar to",
    "start": "2246400",
    "end": "2253359"
  },
  {
    "start": "2251000",
    "end": "2314000"
  },
  {
    "text": "one that you know from chrono you have quantity cost so something similar to duration cast but actually it's on",
    "start": "2253359",
    "end": "2259599"
  },
  {
    "text": "steroids thanks to concepts of course you can provide entire quantity as a result this is the case for chrono",
    "start": "2259599",
    "end": "2265280"
  },
  {
    "text": "but thanks to concepts we can say that you want only cast dimension and leave the rest intact",
    "start": "2265280",
    "end": "2270640"
  },
  {
    "text": "or we can cast unit only rest leave the rest intact or change the repetition only and leave",
    "start": "2270640",
    "end": "2277520"
  },
  {
    "text": "the rest intact which is not the case in case of duration right now",
    "start": "2277520",
    "end": "2283440"
  },
  {
    "text": "and it's really easy to do with concepts and fast because concepts are fast to",
    "start": "2283440",
    "end": "2288880"
  },
  {
    "text": "compile much faster than what we had before using the thing that we voted yesterday",
    "start": "2288880",
    "end": "2295760"
  },
  {
    "text": "actually we can actually you can actually no no we don't need to provide quantity cast here we can just write a",
    "start": "2295760",
    "end": "2301599"
  },
  {
    "text": "construction and what we wanted yesterday it can be even shorter",
    "start": "2301599",
    "end": "2306720"
  },
  {
    "text": "for this first case but for our other you quantity cast is your friend",
    "start": "2306720",
    "end": "2313680"
  },
  {
    "text": "so i would like to just mention here that concepts is not just a",
    "start": "2313680",
    "end": "2319599"
  },
  {
    "start": "2314000",
    "end": "2376000"
  },
  {
    "text": "syntactic sugar over the um enabling voidt",
    "start": "2319599",
    "end": "2324960"
  },
  {
    "text": "or other tablet meta programming tricks how would you constrain a writing type from the function with",
    "start": "2324960",
    "end": "2331599"
  },
  {
    "text": "the type of programming within i believe i don't think it's possible",
    "start": "2331599",
    "end": "2337839"
  },
  {
    "text": "how would you constrain a variable on the stack with template meta programming tricks",
    "start": "2337839",
    "end": "2344079"
  },
  {
    "text": "right so concepts are provide more use cases better use cases for for",
    "start": "2345359",
    "end": "2350960"
  },
  {
    "text": "us also constraining cluster parameters is much much easier with concepts than what we had before",
    "start": "2350960",
    "end": "2356640"
  },
  {
    "text": "because before you had to provide primary temperament definition with one additional helper",
    "start": "2356640",
    "end": "2363359"
  },
  {
    "text": "parameter and then provide specializations for cases that much which basically",
    "start": "2363359",
    "end": "2368560"
  },
  {
    "text": "confuses all your fellow guys in in at work with such a design probably it will not pass code reviews",
    "start": "2368560",
    "end": "2376480"
  },
  {
    "start": "2376000",
    "end": "2440000"
  },
  {
    "text": "so benefits of using concepts they clearly state the disa intent right concept is embedded in the",
    "start": "2377200",
    "end": "2383280"
  },
  {
    "text": "template signature which means if you generate a documentation from the code it the information about the interface",
    "start": "2383280",
    "end": "2389359"
  },
  {
    "text": "will be there simplify and extend fina",
    "start": "2389359",
    "end": "2394800"
  },
  {
    "text": "it's much easier to work than i believe voity much faster to compile and we have additional use cases",
    "start": "2394800",
    "end": "2401359"
  },
  {
    "text": "and greatly greatly improved error messages right",
    "start": "2401359",
    "end": "2407359"
  },
  {
    "text": "compilation errors are better shorter provide more information we",
    "start": "2409280",
    "end": "2415119"
  },
  {
    "text": "never instantly basically instantiate our um our functions that we want to want to run",
    "start": "2415119",
    "end": "2420880"
  },
  {
    "text": "so you don't find yourself somewhere deeply nested in the implementation of the function of some error log that some something couldn't compile",
    "start": "2420880",
    "end": "2428880"
  },
  {
    "text": "okay so now let's see how we can define the new",
    "start": "2433440",
    "end": "2438720"
  },
  {
    "text": "you've seen some definitions already but i would like just to make it straight um before c plus plus 20 this is the",
    "start": "2438720",
    "end": "2445680"
  },
  {
    "start": "2440000",
    "end": "2546000"
  },
  {
    "text": "state of art macros to make a unique definition in nearly",
    "start": "2445680",
    "end": "2451200"
  },
  {
    "text": "every project i know or you can separately provide five lines of different specifications if you don't",
    "start": "2451200",
    "end": "2457760"
  },
  {
    "text": "want to use macros because you have to provide structures customization points function to print to string and so on",
    "start": "2457760",
    "end": "2466200"
  },
  {
    "text": "and then you basically provide things like that",
    "start": "2466960",
    "end": "2472160"
  },
  {
    "text": "and even more right to provide all of the information needed",
    "start": "2472400",
    "end": "2477599"
  },
  {
    "text": "cp20 opened us the doors to make it better we can use ratio",
    "start": "2477599",
    "end": "2484240"
  },
  {
    "text": "as a value we can use identifier as a value right away in the definition",
    "start": "2484240",
    "end": "2490319"
  },
  {
    "text": "of our unit which allowed us to basically skip macros because they were used for",
    "start": "2490319",
    "end": "2495920"
  },
  {
    "text": "convenience in one line of simple pass code you can define all of the information needed to declare a new unit",
    "start": "2495920",
    "end": "2503880"
  },
  {
    "text": "and then then those are used as non-temperamenters you can store them",
    "start": "2508000",
    "end": "2513040"
  },
  {
    "text": "and what's important here you can work on them like on values we don't have to instantiate class",
    "start": "2514079",
    "end": "2519839"
  },
  {
    "text": "template ratio multiply like it is the case with chrono which is strange and it's really slow to",
    "start": "2519839",
    "end": "2526400"
  },
  {
    "text": "compile we don't have to basically instantiate the parameter stating symbols add",
    "start": "2526400",
    "end": "2533280"
  },
  {
    "text": "because we are just using operators provided by those classes",
    "start": "2533280",
    "end": "2537838"
  },
  {
    "text": "which makes the code easier to maintain easier to write and faster to compile",
    "start": "2538720",
    "end": "2544640"
  },
  {
    "text": "to convince you this is the case we have this exponent longly exponent long list of exponents of dimensions",
    "start": "2544640",
    "end": "2551440"
  },
  {
    "start": "2546000",
    "end": "2589000"
  },
  {
    "text": "right that we've seen for for example for speed is just two but for some will be longer and they want to multiply them",
    "start": "2551440",
    "end": "2558560"
  },
  {
    "text": "you want to multiply them in an old way with ratio being a type",
    "start": "2558560",
    "end": "2564400"
  },
  {
    "text": "i basically have to do it iteratively with concept specializations",
    "start": "2564400",
    "end": "2569760"
  },
  {
    "text": "switching to ratio that's a value you can just write one function template to fold expression",
    "start": "2569760",
    "end": "2576319"
  },
  {
    "text": "and multiply those it's much easier to work with",
    "start": "2576319",
    "end": "2583040"
  },
  {
    "text": "much faster to define much faster to compile",
    "start": "2583040",
    "end": "2587279"
  },
  {
    "start": "2589000",
    "end": "2639000"
  },
  {
    "text": "i would say that class time types as non-type parameters opens are opened up a door for many new use cases",
    "start": "2589680",
    "end": "2596960"
  },
  {
    "text": "it might be one of the most important improvements in temperamental programming in last decade",
    "start": "2596960",
    "end": "2602480"
  },
  {
    "text": "wait well maybe besides concepts of course right",
    "start": "2602480",
    "end": "2607839"
  },
  {
    "text": "but this is huge we'll see many new use cases i'm pretty sure about it using this feature",
    "start": "2607839",
    "end": "2616240"
  },
  {
    "text": "so if something behaves like a value in your templates probably it should be a value not a type",
    "start": "2618160",
    "end": "2625119"
  },
  {
    "text": "maybe make it a type and you will find that it actually opens more than actually you expected i didn't expect",
    "start": "2625119",
    "end": "2630640"
  },
  {
    "text": "that i would be able to write full expression it just happened when i refactored the code",
    "start": "2630640",
    "end": "2636160"
  },
  {
    "start": "2639000",
    "end": "2672000"
  },
  {
    "text": "text output of course we support streams as you've seen for entire front for entire",
    "start": "2640000",
    "end": "2646079"
  },
  {
    "text": "presentation here we have the streams are aware of the steam support is aware of the units and",
    "start": "2646079",
    "end": "2652079"
  },
  {
    "text": "thanks to the to the donecasting facility even with such definition we always",
    "start": "2652079",
    "end": "2657280"
  },
  {
    "text": "provide correct result but you also support student format",
    "start": "2657280",
    "end": "2663839"
  },
  {
    "text": "and we have some custom format specification that you can use that you can actually tune to your needs",
    "start": "2665119",
    "end": "2671839"
  },
  {
    "text": "this is the official definition i don't want you to go through it there are some parts that are standard compliant feel",
    "start": "2671839",
    "end": "2677119"
  },
  {
    "start": "2672000",
    "end": "2725000"
  },
  {
    "text": "and align with units sorry means are ours but those are standard spec",
    "start": "2677119",
    "end": "2682240"
  },
  {
    "text": "and there are others also from the standard sign this precision all of those are standard stuff with our",
    "start": "2682240",
    "end": "2688480"
  },
  {
    "text": "additions to the format important one and interesting may be the ascii one because by default we chose to",
    "start": "2688480",
    "end": "2696000"
  },
  {
    "text": "use unicode this was what was suggested also by unigroup group in unicode group in iso committee",
    "start": "2696000",
    "end": "2702480"
  },
  {
    "text": "to be unicode by default but with a modifier",
    "start": "2702480",
    "end": "2708319"
  },
  {
    "text": "you can type ascii output if needed",
    "start": "2708319",
    "end": "2715440"
  },
  {
    "text": "for embedded domains for printers whatever right",
    "start": "2717359",
    "end": "2722560"
  },
  {
    "text": "also as you've seen already we can actually work together in the committee",
    "start": "2725520",
    "end": "2731920"
  },
  {
    "text": "right we try to make our proposals to work with each other so",
    "start": "2731920",
    "end": "2737839"
  },
  {
    "text": "this library also works nicely with the linear jbl proposal in order to create some vectors and matrices of",
    "start": "2737839",
    "end": "2744640"
  },
  {
    "text": "values then you can easily add them multiply and get results",
    "start": "2744640",
    "end": "2752240"
  },
  {
    "text": "and you can have two approaches either you may have vectors of quantities or quantities of",
    "start": "2754160",
    "end": "2761359"
  },
  {
    "text": "vectors both directions are possible with this",
    "start": "2761359",
    "end": "2768480"
  },
  {
    "text": "use case",
    "start": "2768480",
    "end": "2771640"
  },
  {
    "start": "2777000",
    "end": "2848000"
  },
  {
    "text": "so the last chapter actually are moving faster than expected",
    "start": "2778000",
    "end": "2783119"
  },
  {
    "text": "with a lot of slides environment compatibility next steps",
    "start": "2783520",
    "end": "2790400"
  },
  {
    "text": "this library is is full of c plus 20. this is why i cannot provide support to",
    "start": "2791280",
    "end": "2796560"
  },
  {
    "text": "anything before 20. it will just not work so sorry for those that actually cannot",
    "start": "2796560",
    "end": "2802560"
  },
  {
    "text": "use c plus 20 compilers for now i know what are the realities i'm a consultant and an engineer so i know how",
    "start": "2802560",
    "end": "2809680"
  },
  {
    "text": "it works but still if you want to play with it it's in god board you can play with within your own project do some proof of",
    "start": "2809680",
    "end": "2816240"
  },
  {
    "text": "concept maybe actually it will be a good case to show them to write some short proof",
    "start": "2816240",
    "end": "2822319"
  },
  {
    "text": "concepts go to your management and say see with this we can spend that we can basically save a lot of errors time and",
    "start": "2822319",
    "end": "2829839"
  },
  {
    "text": "basically and money if we just move to class 20 please right",
    "start": "2829839",
    "end": "2836319"
  },
  {
    "text": "so actually it may be a good argument to upgrade your system if you are in this domain",
    "start": "2836319",
    "end": "2844200"
  },
  {
    "text": "but please provide us the feedback compilers gc10 clank 12 visual studio",
    "start": "2846480",
    "end": "2854000"
  },
  {
    "text": "all of the majors compilers are supported starting from this gc10 so yeah here",
    "start": "2854000",
    "end": "2860400"
  },
  {
    "text": "euros compiler is enough some features of course will better work on 11",
    "start": "2860400",
    "end": "2866559"
  },
  {
    "text": "but those are officially supported right now",
    "start": "2866559",
    "end": "2872599"
  },
  {
    "text": "as i said um we are thinking about standardizing this one it's not my ultimate goal",
    "start": "2874800",
    "end": "2881680"
  },
  {
    "text": "i will not cry if it doesn't basically go there well maybe i will cry but will not do anything worse",
    "start": "2881680",
    "end": "2887920"
  },
  {
    "text": "to myself right because it shouldn't be a point by itself",
    "start": "2887920",
    "end": "2894559"
  },
  {
    "text": "i basically care about this domain i would like to help me others and i",
    "start": "2894559",
    "end": "2900880"
  },
  {
    "text": "would like to feel safer when i'm in tesla sleeping right sleeping in the car with the drive from drives for me",
    "start": "2900880",
    "end": "2907280"
  },
  {
    "text": "i just want to make in this case my contribution to the community and and and make it safer world",
    "start": "2907280",
    "end": "2914800"
  },
  {
    "text": "if it happens that the committee agrees that that's a good thing to be in the library we are trying to basically do that we",
    "start": "2914800",
    "end": "2921839"
  },
  {
    "text": "already spent quite a lot of time and hours in the committee discussing this it seems that people are interested",
    "start": "2921839",
    "end": "2927280"
  },
  {
    "text": "both in the committee and in the industry to make it happen we have really nice positive feedback so",
    "start": "2927280",
    "end": "2932319"
  },
  {
    "text": "far and yep a few users quite a few users that actually use it in the production",
    "start": "2932319",
    "end": "2937760"
  },
  {
    "text": "already class 23 train is gone already",
    "start": "2937760",
    "end": "2943040"
  },
  {
    "text": "kobe times hard times we were not able to catch it but 26 train arrives soon and hopefully",
    "start": "2943040",
    "end": "2950400"
  },
  {
    "text": "we'll start the process then but in order to start anything before i",
    "start": "2950400",
    "end": "2956240"
  },
  {
    "text": "will write first paper i need more feedback i want to make sure that this is right",
    "start": "2956240",
    "end": "2961359"
  },
  {
    "text": "i don't want to be a person that in 20 years from now will be we will be spoken like this is the guy",
    "start": "2961359",
    "end": "2966640"
  },
  {
    "text": "that put this piece of crap to the standard right so i want to make sure that that's",
    "start": "2966640",
    "end": "2972559"
  },
  {
    "text": "correct before i i will even start the standardization process this is not this is not my ultimate goal to be in the standard",
    "start": "2972559",
    "end": "2979920"
  },
  {
    "text": "so please try this one right do a proof of concept",
    "start": "2983200",
    "end": "2989040"
  },
  {
    "text": "maybe read the documentation provide feedback requirements concerns if you have any right you want to be able to",
    "start": "2989040",
    "end": "2995839"
  },
  {
    "text": "resolve them before we start the process because on github i can always release",
    "start": "2995839",
    "end": "3001839"
  },
  {
    "text": "version 3.0 or 4.0 that will fix your problems in standard we are really bad in fixing",
    "start": "3001839",
    "end": "3007760"
  },
  {
    "text": "our mistakes if we standardize something we cannot fix it in the future",
    "start": "3007760",
    "end": "3013839"
  },
  {
    "text": "even if it's about api only i will not start discussion here but we can discuss this later on",
    "start": "3014319",
    "end": "3022078"
  },
  {
    "text": "so fixing our mistakes in the committee is really hard that's why sometimes even it's better to be in the library because",
    "start": "3022480",
    "end": "3028720"
  },
  {
    "text": "then you can fix stuff easier",
    "start": "3028720",
    "end": "3032400"
  },
  {
    "text": "right so please experiment with this one also",
    "start": "3036880",
    "end": "3042480"
  },
  {
    "text": "github issues are not only to complain about the problems with library if you're a happy user please write an",
    "start": "3042480",
    "end": "3048319"
  },
  {
    "text": "issue for me we are using this in production thank you but don't have to provide anything more",
    "start": "3048319",
    "end": "3054480"
  },
  {
    "text": "right because actually i don't know how many happy users i have i know how many other users i have but i don't know the",
    "start": "3054480",
    "end": "3060400"
  },
  {
    "text": "other part of the of the story right i need some feedback to to save the",
    "start": "3060400",
    "end": "3066720"
  },
  {
    "text": "committee i know at least 100 companies that use it and they're happy then it'll be much easier to standardize",
    "start": "3066720",
    "end": "3072559"
  },
  {
    "text": "it",
    "start": "3072559",
    "end": "3074720"
  },
  {
    "start": "3078000",
    "end": "3175000"
  },
  {
    "text": "um please provide us on our on our issues on github it's really active we have",
    "start": "3081599",
    "end": "3086800"
  },
  {
    "text": "both issues and discussions actually it's probably an old screenshot there's a discussion section a new feature on",
    "start": "3086800",
    "end": "3092880"
  },
  {
    "text": "github when we discuss stuff it's really active community will you'll probably get help in like 24 hours from us if you",
    "start": "3092880",
    "end": "3099839"
  },
  {
    "text": "have any problems so so please provide your support provide your issues provide your feedback there",
    "start": "3099839",
    "end": "3107680"
  },
  {
    "text": "and also i would just would like to start to state that it's not my library that you should",
    "start": "3108480",
    "end": "3114400"
  },
  {
    "text": "provide feedback there are others like like guys library here and then and bob's about the linear libra and others",
    "start": "3114400",
    "end": "3121839"
  },
  {
    "text": "right they're on the same in the same train on this um in the same in the same situation",
    "start": "3121839",
    "end": "3128240"
  },
  {
    "text": "if you want to standardize something as a part of the library we need users we need feedback don't wait for it until it will be in the standard then i will use",
    "start": "3128240",
    "end": "3134480"
  },
  {
    "text": "in my project it will be too late right",
    "start": "3134480",
    "end": "3139680"
  },
  {
    "text": "if something is broken we have to know it up front not after the fact",
    "start": "3139680",
    "end": "3145520"
  },
  {
    "text": "we are doing our best to make it as good as possible but we are just humans we have our regular",
    "start": "3146480",
    "end": "3152160"
  },
  {
    "text": "jobs this is not our job to do it we are doing some in our free time right spending our custom resources our own",
    "start": "3152160",
    "end": "3158559"
  },
  {
    "text": "resources private resources and yeah",
    "start": "3158559",
    "end": "3164000"
  },
  {
    "text": "we are just trying to make things better but we need feedback we need users in order to",
    "start": "3164000",
    "end": "3169760"
  },
  {
    "text": "make sure that it's ready to be provided to everyone with a standard",
    "start": "3169760",
    "end": "3175920"
  },
  {
    "start": "3175000",
    "end": "3257000"
  },
  {
    "text": "and it's not just me it's not just my libraries i said right",
    "start": "3177599",
    "end": "3183040"
  },
  {
    "text": "so i'd like to basically help everyone that actually was involved in standardizing those those patterns in",
    "start": "3183040",
    "end": "3189680"
  },
  {
    "text": "the community because it's nothing new we are doing physically library for many years right now so this is existing",
    "start": "3189680",
    "end": "3196400"
  },
  {
    "text": "practice right we have boost units nick house has great",
    "start": "3196400",
    "end": "3201920"
  },
  {
    "text": "library martin manner jan sander and others",
    "start": "3201920",
    "end": "3208400"
  },
  {
    "text": "it's nothing new it's i don't i didn't discover a new ground i'm just taking from their learnings",
    "start": "3208400",
    "end": "3213520"
  },
  {
    "text": "from their experience and trying to encapsulate it with having new tools in my head because they",
    "start": "3213520",
    "end": "3219760"
  },
  {
    "text": "started earlier they didn't have those tools at that time you also have a lot of contributors",
    "start": "3219760",
    "end": "3227920"
  },
  {
    "text": "and in order actually to be contributor you don't have to actually code if you don't like",
    "start": "3229200",
    "end": "3236559"
  },
  {
    "text": "being an active member just providing discussions feedback answering questions",
    "start": "3236559",
    "end": "3242400"
  },
  {
    "text": "it's enough to contribute if you're not feeling experienced enough basically to",
    "start": "3242400",
    "end": "3248319"
  },
  {
    "text": "implement code you don't have to but you can help in other ways right",
    "start": "3248319",
    "end": "3255040"
  },
  {
    "text": "i also like to provide special thanks to walter brown which was a committee member for a long",
    "start": "3257119",
    "end": "3262400"
  },
  {
    "text": "time right now he's retired he started to talk about this in i don't see the date here but it was 98",
    "start": "3262400",
    "end": "3269359"
  },
  {
    "text": "right basically correctly he started to provide first paper then",
    "start": "3269359",
    "end": "3275440"
  },
  {
    "text": "or is it 88 i don't see it my screen 88 right 98 yeah so anyway it was a long time ago",
    "start": "3275440",
    "end": "3282400"
  },
  {
    "text": "when he started to write first papers that we should think about it",
    "start": "3282400",
    "end": "3287599"
  },
  {
    "text": "even though we didn't agree with walter on many grounds i really appreciate his his feedback and",
    "start": "3287760",
    "end": "3293440"
  },
  {
    "text": "basically his efforts to make it standardized also of course howard's hind for his",
    "start": "3293440",
    "end": "3298480"
  },
  {
    "text": "chrome library it's inspiration for all of us how to write correct modern code",
    "start": "3298480",
    "end": "3304319"
  },
  {
    "text": "and especially for me because i'm doing something similar and last but not least",
    "start": "3304319",
    "end": "3310799"
  },
  {
    "text": "all of the gcc developers that actually allowed me to make this library happen providing like concept cs and gc7 four",
    "start": "3310799",
    "end": "3318960"
  },
  {
    "text": "years ago when no one else cared about cs at that point",
    "start": "3318960",
    "end": "3324400"
  },
  {
    "text": "with that i am done and ready for questions thank you",
    "start": "3328000",
    "end": "3333070"
  },
  {
    "text": "[Applause]",
    "start": "3333070",
    "end": "3338830"
  },
  {
    "text": "yeah so the so the question here is that what are the compile times because boost is known to basically slow down your",
    "start": "3358480",
    "end": "3364000"
  },
  {
    "text": "compile times a lot right um [Music]",
    "start": "3364000",
    "end": "3369680"
  },
  {
    "text": "i compared how sphyna tricks and how basically concepts compare in compile",
    "start": "3369680",
    "end": "3376960"
  },
  {
    "text": "times but also some syntactic takes test of course you cannot just refactor a huge project from both units to this one",
    "start": "3376960",
    "end": "3383040"
  },
  {
    "text": "and find out what's the improvement i even don't have such a product to do three factor but in my opinion and what",
    "start": "3383040",
    "end": "3388799"
  },
  {
    "text": "i measured is that concepts basically are the linear progress and are a lot faster and and svena is this",
    "start": "3388799",
    "end": "3394880"
  },
  {
    "text": "logarithmic one and then this one basically that's why basically the compiler is choking on sfeena and make it much more slower i expect this one to",
    "start": "3394880",
    "end": "3401680"
  },
  {
    "text": "be much faster but i don't have any numbers yet i would have to make an experiment take some",
    "start": "3401680",
    "end": "3407119"
  },
  {
    "text": "project refactor it measure and then provide some results but first i have to find this project that will have",
    "start": "3407119",
    "end": "3412480"
  },
  {
    "text": "those boost units used there i have time for it",
    "start": "3412480",
    "end": "3419640"
  },
  {
    "text": "um yeah so how my tests work this is also a bit complicated stuff i",
    "start": "3427040",
    "end": "3433920"
  },
  {
    "text": "discussed this with dany yesterday actually that our library is designed with modules in",
    "start": "3433920",
    "end": "3441040"
  },
  {
    "text": "mind so we would like to pre-compile whatever possible provide this as a module and",
    "start": "3441040",
    "end": "3446720"
  },
  {
    "text": "then you will just use it as a pre-compiled stuff as we install it a lot of templates in order to provide you every single unit",
    "start": "3446720",
    "end": "3452640"
  },
  {
    "text": "in si system if you include an si header with all of the definitions you will suffer",
    "start": "3452640",
    "end": "3458880"
  },
  {
    "text": "especially in advertising you need right so for now please just include what you need like speed time",
    "start": "3458880",
    "end": "3465680"
  },
  {
    "text": "distance not si header but with modulus world we expect that we'll be just pre-compiling an sa module",
    "start": "3465680",
    "end": "3472319"
  },
  {
    "text": "and providing it to everyone and it would be much faster than than than any others right now",
    "start": "3472319",
    "end": "3478640"
  },
  {
    "text": "but as modules are still not there it at least this is my opinion because cmake doesn't support it",
    "start": "3478640",
    "end": "3483760"
  },
  {
    "text": "and then i don't have any numbers and there are no modules yet but as soon as cmake will start support them we are",
    "start": "3483760",
    "end": "3489119"
  },
  {
    "text": "going to provide more use yes you have a question i know",
    "start": "3489119",
    "end": "3495040"
  },
  {
    "text": "i presume that comparison works",
    "start": "3495040",
    "end": "3500480"
  },
  {
    "text": "to for instance let's say you have uh you're measuring things in millimeter",
    "start": "3500480",
    "end": "3506000"
  },
  {
    "text": "and then you have a customer from a funny part of the world which uses inches",
    "start": "3506000",
    "end": "3511760"
  },
  {
    "text": "can you compare inches to millimeter out of the so the question is can i compare",
    "start": "3511760",
    "end": "3516960"
  },
  {
    "text": "interest to me meters out of the box and the answer is yes that's yeah that's one of the most common use cases right",
    "start": "3516960",
    "end": "3522960"
  },
  {
    "text": "libraries unit aware and basically you can mix and match different units and the bar does the conversions for you in",
    "start": "3522960",
    "end": "3528720"
  },
  {
    "text": "a safe way",
    "start": "3528720",
    "end": "3531838"
  },
  {
    "text": "so yeah so regarding the logarithmic units like decibels right",
    "start": "3540480",
    "end": "3546559"
  },
  {
    "text": "that's a hard question and a good question actually but",
    "start": "3546559",
    "end": "3551599"
  },
  {
    "text": "we discussed this and we think that this should be handled by logarithmic representation type rather",
    "start": "3551599",
    "end": "3558319"
  },
  {
    "text": "than than a unit or labor that's logarithmic aware so for decibels you should provide a",
    "start": "3558319",
    "end": "3564160"
  },
  {
    "text": "representation type that basically is aware of logarithmic scale so scale should be represented by represented by",
    "start": "3564160",
    "end": "3570319"
  },
  {
    "text": "the presentation type provided for specific quantity and with this it will be supported",
    "start": "3570319",
    "end": "3575599"
  },
  {
    "text": "but we don't have such representation type yet provided as a for our users so you have to find one that basically",
    "start": "3575599",
    "end": "3580720"
  },
  {
    "text": "works on a logarithmic scale yeah but that's a great concern",
    "start": "3580720",
    "end": "3587920"
  },
  {
    "text": "there are still some things that we have to work on and but probably this one actually just",
    "start": "3587920",
    "end": "3593200"
  },
  {
    "text": "requires a representation type if you ask me about the recent radiance the answer will be harder so don't ask",
    "start": "3593200",
    "end": "3598880"
  },
  {
    "text": "me please but we are going to fix it after cpcon oh don't fix it provide the new feature support because we still are",
    "start": "3598880",
    "end": "3605200"
  },
  {
    "text": "discussing this and didn't have time to address this properly problem is that basically uh",
    "start": "3605200",
    "end": "3610400"
  },
  {
    "text": "converting from radians to uh to the two degrees at compile time requires us to have pi at compile time",
    "start": "3610400",
    "end": "3617040"
  },
  {
    "text": "somewhere you can of course describe pi as ratio",
    "start": "3617040",
    "end": "3622079"
  },
  {
    "text": "as big ratio as possible but then consider having pi squared or pi cubed",
    "start": "3622079",
    "end": "3627680"
  },
  {
    "text": "and you right away overflown the ratio so it's not a good solution",
    "start": "3627680",
    "end": "3633119"
  },
  {
    "text": "so we have to find some solution but the better solution we know what it is unfortunately it will impact the those",
    "start": "3633119",
    "end": "3638480"
  },
  {
    "text": "uh expanded unknown dimension errors because ratio will not be just a ratio",
    "start": "3638480",
    "end": "3645119"
  },
  {
    "text": "it will have to have some some more logic to be a type list but it's useful and needed we cannot",
    "start": "3645119",
    "end": "3650960"
  },
  {
    "text": "just have this without degrees and are in the radius support",
    "start": "3650960",
    "end": "3657400"
  },
  {
    "text": "are there any other questions",
    "start": "3658640",
    "end": "3661920"
  },
  {
    "text": "if not then thank you oh sorry there's a question on the back",
    "start": "3664400",
    "end": "3670920"
  },
  {
    "text": "yeah so there's a comment that having a lot of angry users this means that we have to use something right because",
    "start": "3678799",
    "end": "3684000"
  },
  {
    "text": "actually you have some users but but actually actually maybe we are not doing something right because we",
    "start": "3684000",
    "end": "3689599"
  },
  {
    "text": "don't have that much of angry users so either we're doing really good or we don't have users at all",
    "start": "3689599",
    "end": "3696480"
  },
  {
    "text": "so please try it please try it provide feedback and the more we have the better we we can ensure that we are not going",
    "start": "3697119",
    "end": "3703680"
  },
  {
    "text": "to to suffer in 10 years from now when it will be a part of standard thank you very much and see you later",
    "start": "3703680",
    "end": "3713079"
  }
]