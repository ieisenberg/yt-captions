[
  {
    "text": "welcome everyone it's more people coming perfect have a",
    "start": "4580",
    "end": "11519"
  },
  {
    "text": "seat this talk is going to be about what's new in c-sharp everything that's been excited about exciting about c-sharp 8 9",
    "start": "11519",
    "end": "18600"
  },
  {
    "text": "10 maybe we'll have some time for 11 and the next year if I'm invited back to do this this talk is going to be what used",
    "start": "18600",
    "end": "24420"
  },
  {
    "text": "to be c-sharp and what's now F sharp because most features in c-sharp originate from from F sharp",
    "start": "24420",
    "end": "31140"
  },
  {
    "text": "this is funny but true my name is Philip eckberg it's amazing to be back here if you have any questions after this",
    "start": "31140",
    "end": "37380"
  },
  {
    "text": "talk feel free to ping me on Twitter send me an email have a look at my plural side courses I do quite a bit of",
    "start": "37380",
    "end": "43800"
  },
  {
    "text": "talks on c-sharp and try to stay up to date with the language it's definitely my favorite language on",
    "start": "43800",
    "end": "50160"
  },
  {
    "text": "the market and one of the reasons for it being my favorite language the favorite language that I've ever",
    "start": "50160",
    "end": "56699"
  },
  {
    "text": "worked with is because it has so many great language features that let me express myself in ways that some other",
    "start": "56699",
    "end": "62879"
  },
  {
    "text": "programming languages don't really like me do and what's interesting with c-sharp is that quite a few years ago now they",
    "start": "62879",
    "end": "69180"
  },
  {
    "text": "decided to open source the compilers all the work of the new language features everything that's happening in.net and",
    "start": "69180",
    "end": "75600"
  },
  {
    "text": "c-sharp is being worked on in the open this means that anyone in here could participate in discussions around",
    "start": "75600",
    "end": "81900"
  },
  {
    "text": "language features that are coming in newer versions of c-sharp or even F sharp",
    "start": "81900",
    "end": "87299"
  },
  {
    "text": "or things that are happening with the runtime so over the years there's been some changes to c-sharp as a programming",
    "start": "87299",
    "end": "93420"
  },
  {
    "text": "language that fundamentally change how we look at architecting our applications",
    "start": "93420",
    "end": "98520"
  },
  {
    "text": "how we look at expressing ourselves things such as generics is an obvious",
    "start": "98520",
    "end": "103860"
  },
  {
    "text": "one that before generics in c-sharp we had quite nasty code to achieve the same",
    "start": "103860",
    "end": "109140"
  },
  {
    "text": "things but now we have a language feature that allows us to more easily express ourselves",
    "start": "109140",
    "end": "114659"
  },
  {
    "text": "and another bigger one is async and the weight so there's a few of these language features that change how we",
    "start": "114659",
    "end": "120540"
  },
  {
    "text": "construct our applications and write code to solve our program solve our",
    "start": "120540",
    "end": "126119"
  },
  {
    "text": "problems faster with less code and hopefully the compiler lets us write code that is less",
    "start": "126119",
    "end": "132599"
  },
  {
    "text": "error prone and ultimately makes our applications better",
    "start": "132599",
    "end": "137879"
  },
  {
    "text": "all right so if we're going to participate in the discussions we can head over to GitHub and check out some of the language features that are coming",
    "start": "137879",
    "end": "144300"
  },
  {
    "text": "in c-sharp this here is a snapshot of features that have already been added to the language some of them have been",
    "start": "144300",
    "end": "150060"
  },
  {
    "text": "scratched from the language which is ultimately a good thing because if you participate in the discussion on GitHub",
    "start": "150060",
    "end": "155520"
  },
  {
    "text": "why wouldn't it also mean that language features that could potentially make it into language could also be dropped out",
    "start": "155520",
    "end": "161819"
  },
  {
    "text": "of it I'm not saying that Microsoft would ever remove a language feature but if it",
    "start": "161819",
    "end": "166980"
  },
  {
    "text": "hasn't been added yet you might still have time to give your thoughts on that feature",
    "start": "166980",
    "end": "172739"
  },
  {
    "text": "give an example of that later on so before we get into everything that's new in C sharp eight there's a few",
    "start": "172739",
    "end": "177959"
  },
  {
    "text": "highlights from C sharp seven that kind of sets the base for what what is now a",
    "start": "177959",
    "end": "183300"
  },
  {
    "text": "really good programming language so in C sharp seven two seven point three this was the first version of C sharp that",
    "start": "183300",
    "end": "189480"
  },
  {
    "text": "introduced a point release and I believe this was kind of a proof of concept that they could release a minor version of",
    "start": "189480",
    "end": "196739"
  },
  {
    "text": "the programming language without relying heavily on Visual Studio or relying on a",
    "start": "196739",
    "end": "201780"
  },
  {
    "text": "release of the.net framework or net core or net or whatever they want to call it now so",
    "start": "201780",
    "end": "208140"
  },
  {
    "text": "in C sharp seven they introduced this thing called topples or tuples and before c sharp seven it was kind of",
    "start": "208140",
    "end": "213480"
  },
  {
    "text": "tedious to have to work with with tuples this is just a container of of data",
    "start": "213480",
    "end": "218580"
  },
  {
    "text": "container of elements now it's not obvious what item one two three and four and five would be in this case here so",
    "start": "218580",
    "end": "225659"
  },
  {
    "text": "instead as many other programming languages why not introduce this as a first-class citizen so in c-sharp 7",
    "start": "225659",
    "end": "233220"
  },
  {
    "text": "we have this this language feature which is called tuples or tuples depending on how you like to pronounce that",
    "start": "233220",
    "end": "241080"
  },
  {
    "text": "this here constructs a container of or it uses internally it's a struct that",
    "start": "241080",
    "end": "246540"
  },
  {
    "text": "has some fields on it but it lets you specify one of these inline types that you can use as a return type as an input",
    "start": "246540",
    "end": "253560"
  },
  {
    "text": "parameter unless it's past this container of elements around and you can even access the fields on that type as",
    "start": "253560",
    "end": "261000"
  },
  {
    "text": "what's their what their names are which is nice so now we have this first class first class citizen in the language",
    "start": "261000",
    "end": "266699"
  },
  {
    "text": "allows us to work with a minimal type of of not an anonymous type but it's a type",
    "start": "266699",
    "end": "272040"
  },
  {
    "text": "built for us using an a generic value Tuple behind the scenes",
    "start": "272040",
    "end": "277080"
  },
  {
    "text": "so this here alone in C sharp seven wouldn't make much sense to use it would let you return multiple return types or",
    "start": "277080",
    "end": "283860"
  },
  {
    "text": "return values but in conjunction with another language feature called pattern matching this became quite useful",
    "start": "283860",
    "end": "291780"
  },
  {
    "text": "we'll look at that as well soon in C sharp 7 they also introduce a concept of deconstructing an object",
    "start": "291780",
    "end": "298800"
  },
  {
    "text": "if I add this very magic method signature to my class it allows me to",
    "start": "298800",
    "end": "304500"
  },
  {
    "text": "take an instance of this class and assign it into local variables",
    "start": "304500",
    "end": "310080"
  },
  {
    "text": "the left hand side look very much like a tuple but it's not what happens here is that it takes an",
    "start": "310080",
    "end": "315840"
  },
  {
    "text": "instance of my person and it deconstructs that into these two local variables",
    "start": "315840",
    "end": "321479"
  },
  {
    "text": "which I can then access this again in C sharp 7 wasn't something that you'd use",
    "start": "321479",
    "end": "326759"
  },
  {
    "text": "at your in your everyday work but together with pattern matching this again is a really nice language feature",
    "start": "326759",
    "end": "332940"
  },
  {
    "text": "to get so even though we didn't have pattern matching at this point in the language we could look at different types of",
    "start": "332940",
    "end": "339840"
  },
  {
    "text": "other programming languages that did pattern matching really well and we could get that into c-sharp as a",
    "start": "339840",
    "end": "345960"
  },
  {
    "text": "programming language as well if we look at these two together they look a little bit similar so here we",
    "start": "345960",
    "end": "351180"
  },
  {
    "text": "have a tuple that's assigned into a a local variable called coordinates on the right",
    "start": "351180",
    "end": "357419"
  },
  {
    "text": "hand side there's just two values in a container of two things assigned into a",
    "start": "357419",
    "end": "363240"
  },
  {
    "text": "variable that has these two fields on it we could access them as you'd imagine",
    "start": "363240",
    "end": "369780"
  },
  {
    "text": "now where deconstruction comes into play here and it looks a little bit different is if I take an instance of a similar",
    "start": "369780",
    "end": "375960"
  },
  {
    "text": "class that has this very magic method on it I could deconstruct that into two local variables of X and Y in this case",
    "start": "375960",
    "end": "384240"
  },
  {
    "text": "this is all due to to this interesting method called here or this adding this method to the type",
    "start": "384240",
    "end": "390900"
  },
  {
    "text": "so these two features are quite handy and they set the base for an important feature an important improvements made",
    "start": "390900",
    "end": "397440"
  },
  {
    "text": "in c-sharp 8 and Beyond so with C sharp eight the eighth iteration of the language you would",
    "start": "397440",
    "end": "403680"
  },
  {
    "text": "imagine that C sharp at this point was done or that you couldn't add more things but as we see with other",
    "start": "403680",
    "end": "409800"
  },
  {
    "text": "programming languages we do get more and more language feature that adapt to the type of applications that we are",
    "start": "409800",
    "end": "416100"
  },
  {
    "text": "building more Mobility means that we want to make it easier to work with asynchronous apis file system I O",
    "start": "416100",
    "end": "422819"
  },
  {
    "text": "Network and all of that pattern matching lets us express ourselves in different ways that we",
    "start": "422819",
    "end": "428759"
  },
  {
    "text": "might not have been able to do before so if we keep the topples and deconstruction and all of that in the",
    "start": "428759",
    "end": "435000"
  },
  {
    "text": "back of our heads and now jump over to look at c-sharp eight there's quite a few things happening in this language",
    "start": "435000",
    "end": "440819"
  },
  {
    "text": "version there are some minor features like read-only members and another one called default interface methods or default",
    "start": "440819",
    "end": "448259"
  },
  {
    "text": "interface implementations depending on when you looked at the GitHub page the last time",
    "start": "448259",
    "end": "453479"
  },
  {
    "text": "this is also the first language of C sharp or the first version of C sharp where it made sense to use pattern",
    "start": "453479",
    "end": "459120"
  },
  {
    "text": "matching while they introduced a variety of pattern matching in c-sharp 7 and built the components in the compiler to",
    "start": "459120",
    "end": "466080"
  },
  {
    "text": "make it usable they introduced a language feature in C sharp 8 called switch Expressions which we're going to",
    "start": "466080",
    "end": "472979"
  },
  {
    "text": "look at something called using declarations static local functions there's quite a few things here another",
    "start": "472979",
    "end": "478740"
  },
  {
    "text": "one that's going to change the way that we build our software is nullable reference types completely new way of looking at reference types in c-sharp",
    "start": "478740",
    "end": "486599"
  },
  {
    "text": "we'll spend some time doing that as well and we'll look at asynchronous streams can dispose of things asynchronously",
    "start": "486599",
    "end": "492120"
  },
  {
    "text": "there's ranges and indexes so all of this here was introduced in a pretty late version of c-sharp",
    "start": "492120",
    "end": "499259"
  },
  {
    "text": "and when we look at c-sharp 9 10 11 12 it's going to be just as many language",
    "start": "499259",
    "end": "504300"
  },
  {
    "text": "features which is because many developers come from other programming languages and we",
    "start": "504300",
    "end": "510900"
  },
  {
    "text": "can take the best part out of that and make it a part of c-sharp and make it feel like a c-sharp feature",
    "start": "510900",
    "end": "517320"
  },
  {
    "text": "so if you want to use these then we're going to experiment with this what do we do up until c-sharp 8 the language wasn't",
    "start": "517320",
    "end": "523860"
  },
  {
    "text": "heavily dependent on which framework version you used but there are some changes in C sharp a that do require",
    "start": "523860",
    "end": "530040"
  },
  {
    "text": "that you use one specific version of.net so if you want to use C sharp eight",
    "start": "530040",
    "end": "535800"
  },
  {
    "text": "you'd use dotnet core 3.0 if you want to use C sharp 9 you use dotnet 5 and so",
    "start": "535800",
    "end": "541560"
  },
  {
    "text": "forth so this means that if the runtime and language depend on each other",
    "start": "541560",
    "end": "548820"
  },
  {
    "text": "they could then introduce language features that would depend on things added to the runtime which changed the",
    "start": "548820",
    "end": "555540"
  },
  {
    "text": "language a little bit more one of these features in c-sharp a is default interface implementations",
    "start": "555540",
    "end": "562560"
  },
  {
    "text": "as a way to add a method body to an interface which requires the runtime to understand what a implementation on a",
    "start": "562560",
    "end": "569220"
  },
  {
    "text": "method means correct so quite a few things to keep in mind here but this is the supported",
    "start": "569220",
    "end": "575540"
  },
  {
    "text": "structure so it's supported to run C sharp 10 on.net 6. but I've had a Net",
    "start": "575540",
    "end": "581880"
  },
  {
    "text": "Framework project where I just enable a newer version of the language and as long as I don't use any runtime",
    "start": "581880",
    "end": "587940"
  },
  {
    "text": "components the compiler will still compile code that would have worked with c-sharp one",
    "start": "587940",
    "end": "593339"
  },
  {
    "text": "it's just all compiler magic unless it depends on a newer version of the runtime and if it does the compiler will",
    "start": "593339",
    "end": "600120"
  },
  {
    "text": "tell you so that being said we can go ahead and create different projects depending on",
    "start": "600120",
    "end": "606000"
  },
  {
    "text": "which type of runtime we're using since for example here I have a dotnet framework project for WPF but I can also",
    "start": "606000",
    "end": "613440"
  },
  {
    "text": "create a WPF application which is now targeting.net6 that doesn't mean that",
    "start": "613440",
    "end": "619980"
  },
  {
    "text": "it's now cross-platform everything that's happening in.net and with framework core the new.net and all",
    "start": "619980",
    "end": "626160"
  },
  {
    "text": "of that it's a totally different topic on its own but going forward it's one thing",
    "start": "626160",
    "end": "632100"
  },
  {
    "text": "so I can use the language features of c-sharp 8 9 10 11 and all of that in in",
    "start": "632100",
    "end": "637500"
  },
  {
    "text": "winforms and WPF it just means that I have to Port that over to this new project structure but doesn't mean that",
    "start": "637500",
    "end": "643680"
  },
  {
    "text": "WPF and Wim forms is now cross-platform there's other projects to allow you to do that",
    "start": "643680",
    "end": "649740"
  },
  {
    "text": "so if we create a shared library or if we enable a newer version of the",
    "start": "649740",
    "end": "655079"
  },
  {
    "text": "language in an older project and the compiler deems that well you're targeting a runtime where this doesn't",
    "start": "655079",
    "end": "661320"
  },
  {
    "text": "work it will tell you it will tell you that you're targeting something that's not allowed",
    "start": "661320",
    "end": "667019"
  },
  {
    "text": "so even though I can use some c-sharp 8 features in.net framework 2.0 for",
    "start": "667019",
    "end": "672839"
  },
  {
    "text": "example it will tell you if you're doing something you shouldn't this particular example here is using",
    "start": "672839",
    "end": "678959"
  },
  {
    "text": "something called default interface methods or implementations",
    "start": "678959",
    "end": "684420"
  },
  {
    "text": "this language feature depending on who you are either you really hate this language feature or you",
    "start": "684420",
    "end": "691920"
  },
  {
    "text": "just don't like it sorry so this is interesting let's say we have",
    "start": "691920",
    "end": "698880"
  },
  {
    "text": "this interface we have this I cache here super simple it exposes a non-generic version of",
    "start": "698880",
    "end": "704220"
  },
  {
    "text": "grabbing something out of a cache let's say that I want to update this this is a very popular nuget package someone pulls",
    "start": "704220",
    "end": "710220"
  },
  {
    "text": "this down all the time and uses this and what happens if I want to add a method to this that means I'm going to piss",
    "start": "710220",
    "end": "715920"
  },
  {
    "text": "everyone off that uses this interface because now they have to implement this",
    "start": "715920",
    "end": "721440"
  },
  {
    "text": "that means I can now introduce a method body on my interfaces so I don't have to",
    "start": "721440",
    "end": "727260"
  },
  {
    "text": "force anyone to implement this which can be seen as a good thing for",
    "start": "727260",
    "end": "732360"
  },
  {
    "text": "Library developers this is really useful it means that I can update my libraries I can update my interfaces which I use",
    "start": "732360",
    "end": "739260"
  },
  {
    "text": "internally myself but I don't have to force anyone else to actually implement this themselves",
    "start": "739260",
    "end": "746339"
  },
  {
    "text": "but the problem here is that the compiler and visual studio won't tell you that you you have to implement",
    "start": "746339",
    "end": "752339"
  },
  {
    "text": "this yourself the compilers and and all of that will will see that there's already an implementation in the interface so if",
    "start": "752339",
    "end": "759420"
  },
  {
    "text": "you update to the newer version of the interface there's no warning or anything like that which would be very handy",
    "start": "759420",
    "end": "766019"
  },
  {
    "text": "so I wouldn't know that I have to do this so anyone going to use this",
    "start": "766019",
    "end": "771060"
  },
  {
    "text": "one person excellent we'll have a talk later I want to know why maybe you're a library developer it's",
    "start": "771060",
    "end": "777720"
  },
  {
    "text": "really good if you're doing libraries now another feature introducing c-sharp eight which again is useful this here",
    "start": "777720",
    "end": "785339"
  },
  {
    "text": "you could use this if you want to if you're a library developer but where C sharp 8 introduce something that will change how we look at building software",
    "start": "785339",
    "end": "791760"
  },
  {
    "text": "is is nullable reference types so up until now everyone that's used c-sharp notes that a reference type a string a",
    "start": "791760",
    "end": "799860"
  },
  {
    "text": "class an instance of a class it's a reference it can be set to null which makes sense",
    "start": "799860",
    "end": "805440"
  },
  {
    "text": "but how about we would like to remove nulls from the language because nulls is a a problem",
    "start": "805440",
    "end": "813560"
  },
  {
    "text": "who hasn't gotten a null reference exception you're lying I know you're",
    "start": "813720",
    "end": "820019"
  },
  {
    "text": "everyone's going to experience this at one point or another so nullability is a problem for quite a",
    "start": "820019",
    "end": "826139"
  },
  {
    "text": "few reasons and how about we tell the compiler to look at nulls in c-sharp a little bit differently how about we",
    "start": "826139",
    "end": "832680"
  },
  {
    "text": "indicate that I really don't want to use nulls anywhere and if I do you're going to smack me on my fingers and I have to",
    "start": "832680",
    "end": "839639"
  },
  {
    "text": "be explicit about the places where I'd like to use this now before we look at how to enable this",
    "start": "839639",
    "end": "845339"
  },
  {
    "text": "the problem with null ability is that it clutters my code with a lot of null checks all over the place",
    "start": "845339",
    "end": "851459"
  },
  {
    "text": "and another issue with that is because there's many different ways to perform null checks we can use null conditional",
    "start": "851459",
    "end": "857519"
  },
  {
    "text": "operators there's if statements there's uh argument and all argument null",
    "start": "857519",
    "end": "862560"
  },
  {
    "text": "exception or throw if null there's a lot of different ways to to throw an exception or or finals",
    "start": "862560",
    "end": "869459"
  },
  {
    "text": "so that's going to make the code harder to read but it also it's ambiguous what does it actually mean to return null out",
    "start": "869459",
    "end": "875880"
  },
  {
    "text": "of a method let's say that I have a repository to find a person or find a user if that",
    "start": "875880",
    "end": "881279"
  },
  {
    "text": "returns null does that mean that the database connection was closed does it mean that I couldn't find a user",
    "start": "881279",
    "end": "888120"
  },
  {
    "text": "I know that personally I do a Pokemon try catch all and I just return all out of all of my",
    "start": "888120",
    "end": "893940"
  },
  {
    "text": "methods and then no one knows what actually happens there's better ways to architecture software so don't don't do that",
    "start": "893940",
    "end": "900720"
  },
  {
    "text": "it also encourages mutability which is a problem for multi-threaded applications",
    "start": "900720",
    "end": "905940"
  },
  {
    "text": "if we can set things to null that means that at one point or another we'd like to change that to an actual value and in",
    "start": "905940",
    "end": "913260"
  },
  {
    "text": "multi-threaded applications that's a problem because you don't want to be able to touch objects from different threads",
    "start": "913260",
    "end": "919620"
  },
  {
    "text": "so how do we solve this this here is quite ugly and I know",
    "start": "919620",
    "end": "926399"
  },
  {
    "text": "someone here is going to say you can write this in many different ways sure enough we could simplify this a bit but",
    "start": "926399",
    "end": "931680"
  },
  {
    "text": "still I'm not particularly fond of having to add this if this would never have been an issue",
    "start": "931680",
    "end": "938339"
  },
  {
    "text": "instead of having to perform these null checks all over the place how about I tell the compiler to let me know if this",
    "start": "938339",
    "end": "944820"
  },
  {
    "text": "could have been a problem and I can do that by enabling a feature called nullable reference types",
    "start": "944820",
    "end": "950760"
  },
  {
    "text": "this is the default in dotnet 6 and going forward so if you create a new project this is going to be enabled",
    "start": "950760",
    "end": "957720"
  },
  {
    "text": "you can enable this for a method you can enable it for one line of code for a class for a namespace you can enable it",
    "start": "957720",
    "end": "963180"
  },
  {
    "text": "for entire project I don't believe there's a setting for entire solution but you'll just enable",
    "start": "963180",
    "end": "968279"
  },
  {
    "text": "it per project what this here is going to do now it's going to change how the compiler looks",
    "start": "968279",
    "end": "973740"
  },
  {
    "text": "at these different reference types so in this case here we well it's obvious that it's null here",
    "start": "973740",
    "end": "979560"
  },
  {
    "text": "but we get a little bit of squiggly here telling us that name maybe null which is really handy",
    "start": "979560",
    "end": "987540"
  },
  {
    "text": "and together with this there's another thing that we also can do because this is just a warning the compiler is going",
    "start": "987540",
    "end": "993060"
  },
  {
    "text": "to tell us as well you should probably attend to this and fix this how many of you are actually looking at",
    "start": "993060",
    "end": "999000"
  },
  {
    "text": "the warnings initial Studio I bet you're lying I'm just kidding so 50 50.",
    "start": "999000",
    "end": "1006860"
  },
  {
    "text": "I'm one of those developers that have a million warnings in my Solutions and I'm like oh I'll just look at that later a",
    "start": "1006860",
    "end": "1012500"
  },
  {
    "text": "lot of to-do here I'll fix this tomorrow and then I never do so the problem here is that if this is",
    "start": "1012500",
    "end": "1018380"
  },
  {
    "text": "just a warning 50 of the developers might not actually fix this and 50 will",
    "start": "1018380",
    "end": "1024319"
  },
  {
    "text": "so what do we do then we turn on warnings as errors which is a great feature we can then say",
    "start": "1024319",
    "end": "1030740"
  },
  {
    "text": "that whenever there's a potential null reference exception we're going to have a compiler error instead",
    "start": "1030740",
    "end": "1037579"
  },
  {
    "text": "so what I suggest is that we go into visual studio and we have a look at how we enable this",
    "start": "1037579",
    "end": "1045040"
  },
  {
    "text": "I'll go in here and this solution here I haven't enabled this feature yet but what this what this is here",
    "start": "1045559",
    "end": "1051440"
  },
  {
    "text": "just full screen this there's no warnings there's no errors there's nothing like that there's nothing here that looks like",
    "start": "1051440",
    "end": "1057260"
  },
  {
    "text": "it's potentially a problem just normal classes and inside my program here I'm just using these",
    "start": "1057260",
    "end": "1062720"
  },
  {
    "text": "different things but I know that if I run this application I'm going to run into a null reference exception",
    "start": "1062720",
    "end": "1069080"
  },
  {
    "text": "but I'd like the compiler to tell me that this could be a problem so I'm going to go over to either we do this from the normal project properties we",
    "start": "1069080",
    "end": "1077179"
  },
  {
    "text": "could do that or we can go into the Cs proj and we can indicate here that we want to",
    "start": "1077179",
    "end": "1082760"
  },
  {
    "text": "enable nullable reference types there we go",
    "start": "1082760",
    "end": "1088899"
  },
  {
    "text": "and I'm also going to turn on create warnings as errors so I suggest that everyone here",
    "start": "1089419",
    "end": "1095059"
  },
  {
    "text": "enables enable there we go I suggest that everyone go ahead and go",
    "start": "1095059",
    "end": "1100940"
  },
  {
    "text": "back to your work enable nullable reference types and also treat warnings as errors and then you're checking the",
    "start": "1100940",
    "end": "1106640"
  },
  {
    "text": "code and then you go home let someone else fix the problems",
    "start": "1106640",
    "end": "1113660"
  },
  {
    "text": "don't do that don't tell anyone I said that so now I can click down here and see",
    "start": "1113660",
    "end": "1119179"
  },
  {
    "text": "that well now I have a few different problems now I have four errors that I I should",
    "start": "1119179",
    "end": "1124400"
  },
  {
    "text": "probably attend to and if I scroll through the code here I'll see here that there's a warning",
    "start": "1124400",
    "end": "1130100"
  },
  {
    "text": "here or an error in this case it's telling me that this property should be set to a value it's not initialized",
    "start": "1130100",
    "end": "1138320"
  },
  {
    "text": "I could fix this there's multiple ways to do this I could introduce a Constructor if I",
    "start": "1138320",
    "end": "1144200"
  },
  {
    "text": "introduce a Constructor the the error moves from the properties to the constructors because now",
    "start": "1144200",
    "end": "1150200"
  },
  {
    "text": "it should be the Constructor that is in charge of setting these to a proper value",
    "start": "1150200",
    "end": "1155480"
  },
  {
    "text": "this means that I should probably take first first name and string last name as a",
    "start": "1155480",
    "end": "1161360"
  },
  {
    "text": "parameter here and I should set these to their appropriate values",
    "start": "1161360",
    "end": "1167059"
  },
  {
    "text": "and if I do the warning is now where the error is now disappearing the problem here is that I've now changed the",
    "start": "1167059",
    "end": "1172460"
  },
  {
    "text": "contract of my class everyone that's Now using this here if you were to do this at work you would change how everyone",
    "start": "1172460",
    "end": "1178820"
  },
  {
    "text": "instantiates this class which is again not really a good thing",
    "start": "1178820",
    "end": "1184160"
  },
  {
    "text": "but if we remove that again there's another way that we can approach this this is not really where the null",
    "start": "1184160",
    "end": "1190100"
  },
  {
    "text": "reference exception would have occurred right there's nothing in here that accesses a property the null reference",
    "start": "1190100",
    "end": "1195500"
  },
  {
    "text": "exception would have occurred where the first name and last name is being used so to figure out where that would be a",
    "start": "1195500",
    "end": "1201559"
  },
  {
    "text": "problem I could indicate that this is a nullable string and the this question marks work with everything you've seen",
    "start": "1201559",
    "end": "1207500"
  },
  {
    "text": "this with nullable value types before but now we have a nullable reference type so I can say here that well now",
    "start": "1207500",
    "end": "1213860"
  },
  {
    "text": "string can be set to null which is fine and I'll do the same in my person class which is using this reference type",
    "start": "1213860",
    "end": "1221419"
  },
  {
    "text": "so now these are these no longer have any warnings",
    "start": "1221419",
    "end": "1226700"
  },
  {
    "text": "all right so then hopefully somewhere else in the application there's now an error or",
    "start": "1226700",
    "end": "1233120"
  },
  {
    "text": "a problem where I would use this and look at that the compiler now figures out",
    "start": "1233120",
    "end": "1238460"
  },
  {
    "text": "that person.details here might not be set to an instance because I've indicated to the compiler that this",
    "start": "1238460",
    "end": "1244280"
  },
  {
    "text": "might be null this means I'd have to perform a null check so if person is an object",
    "start": "1244280",
    "end": "1251960"
  },
  {
    "text": "we can do this",
    "start": "1251960",
    "end": "1254740"
  },
  {
    "text": "or it's not null oh sorry",
    "start": "1257660",
    "end": "1262419"
  },
  {
    "text": "I'm going to write this as confusing as possible just to show you how pattern matching works",
    "start": "1263840",
    "end": "1269120"
  },
  {
    "text": "so don't do that instead do person dot details it's not no",
    "start": "1269120",
    "end": "1276580"
  },
  {
    "text": "and that would also work so the compiler figures out that I've now performed and I'll check this is called null State",
    "start": "1277460",
    "end": "1283460"
  },
  {
    "text": "static analysis and it is smarter as well because I",
    "start": "1283460",
    "end": "1289159"
  },
  {
    "text": "could also say if this is null I'm going to return",
    "start": "1289159",
    "end": "1294880"
  },
  {
    "text": "or continue to the next one and it just knows that I've performed the null check one",
    "start": "1295340",
    "end": "1301039"
  },
  {
    "text": "uh One Step Above So it tracks that I've actually checked this right so this is",
    "start": "1301039",
    "end": "1306500"
  },
  {
    "text": "cool it works very well with pattern matching it's going to work with normal it's not or it's not equal to null as",
    "start": "1306500",
    "end": "1313580"
  },
  {
    "text": "well but it also works with things like like we all normally use string.s null",
    "start": "1313580",
    "end": "1319820"
  },
  {
    "text": "or empty",
    "start": "1319820",
    "end": "1322419"
  },
  {
    "text": "oh sorry if we do this",
    "start": "1326600",
    "end": "1330759"
  },
  {
    "text": "it would have worked with that just trust me I'll show you",
    "start": "1331700",
    "end": "1337460"
  },
  {
    "text": "so let's say we access length here on on that and we do first name",
    "start": "1337460",
    "end": "1343280"
  },
  {
    "text": "it would be smart enough to understand that I performed a null check on that entire expression as well because it's",
    "start": "1343280",
    "end": "1348320"
  },
  {
    "text": "null or empty has some magic attributes set on it so it understands that I've performed a null check on the variable",
    "start": "1348320",
    "end": "1354140"
  },
  {
    "text": "that I passed into the method call so the compiler is doing a lot of really clever things here to try and track the",
    "start": "1354140",
    "end": "1360559"
  },
  {
    "text": "null state of our variables this is super handy but then again this here doesn't look very beautiful so I'm not going to do",
    "start": "1360559",
    "end": "1366559"
  },
  {
    "text": "that but this here is showing you that we could track that this would be a problem but",
    "start": "1366559",
    "end": "1372200"
  },
  {
    "text": "in this case maybe I don't just want to perform a null check I can do the null conditional operator to check that well",
    "start": "1372200",
    "end": "1378320"
  },
  {
    "text": "maybe we just want to get that value if it's not null what I can also do if I remove that",
    "start": "1378320",
    "end": "1383780"
  },
  {
    "text": "again you'll see that we have a warning I could also use a null for giving operator or the damage operator to say",
    "start": "1383780",
    "end": "1390380"
  },
  {
    "text": "well I've performed a null check the compiler is just stupid enough to don't understand what I what I want",
    "start": "1390380",
    "end": "1397039"
  },
  {
    "text": "this is rarely a good idea because the compiler is not stupid",
    "start": "1397039",
    "end": "1402200"
  },
  {
    "text": "I'll show you why so let's say that I have a person here person is equal to null",
    "start": "1402200",
    "end": "1407600"
  },
  {
    "text": "person two is equal to null it's going to give me a word in here or an error saying that this is is null but",
    "start": "1407600",
    "end": "1414140"
  },
  {
    "text": "I can tell the compiler that I'm smarter than you and well it's also",
    "start": "1414140",
    "end": "1420700"
  },
  {
    "text": "just get rid of L1 as well person two DOT first name",
    "start": "1421640",
    "end": "1427840"
  },
  {
    "text": "here we go so I could have told the compiler just complained that I didn't use the variable",
    "start": "1430520",
    "end": "1435559"
  },
  {
    "text": "so I could have told the compiler that I know better than you I know that I've performed a null check on null and it's not null",
    "start": "1435559",
    "end": "1441620"
  },
  {
    "text": "this isn't going to throw any exceptions it's not going to be a problem during run time unless you actually try to",
    "start": "1441620",
    "end": "1447679"
  },
  {
    "text": "access something unless I try to do this this here would blow up right because this here is now a null reference",
    "start": "1447679",
    "end": "1454460"
  },
  {
    "text": "exception we can obviously see that so we are not smarter than the compiler the only reason you'd ever do this is if you are",
    "start": "1454460",
    "end": "1461299"
  },
  {
    "text": "setting something to a default value down here at the bottom for example if I were to do this and I",
    "start": "1461299",
    "end": "1469159"
  },
  {
    "text": "want to set this to a default value and I want to promise or just say that I forgive that this is is set then the",
    "start": "1469159",
    "end": "1476120"
  },
  {
    "text": "warning goes away again and whenever someone sets this property to a value it cannot be null but I'm going to default",
    "start": "1476120",
    "end": "1482659"
  },
  {
    "text": "it to null if you haven't set it so it's a little bit confusing but the only place you'd ever use the null for giving operator is with the default keyword",
    "start": "1482659",
    "end": "1489679"
  },
  {
    "text": "just keep that in the back of your head so again this here was quite clever and this here",
    "start": "1489679",
    "end": "1495620"
  },
  {
    "text": "is a really great language feature but there's one more place where this is is um it's a problem in this case here I'm",
    "start": "1495620",
    "end": "1502280"
  },
  {
    "text": "returning a nullable list or I'm saying that I want to return null where I have an innumerable I could say that I I",
    "start": "1502280",
    "end": "1508640"
  },
  {
    "text": "could return a null list or a not a list of potentially null people as well so",
    "start": "1508640",
    "end": "1515780"
  },
  {
    "text": "you get the idea you can use the question marks to indicate to the compiler that something could be no or not null",
    "start": "1515780",
    "end": "1521360"
  },
  {
    "text": "but in this case here I'm going to show you a little bit of a trick because what we want to do here is that we want to yield return",
    "start": "1521360",
    "end": "1527059"
  },
  {
    "text": "a new person and we want to set the details to a new",
    "start": "1527059",
    "end": "1532940"
  },
  {
    "text": "object with some first name said to Philip for example",
    "start": "1532940",
    "end": "1539659"
  },
  {
    "text": "this here is called the target type new expression I don't have to explicitly say which type I'm creating and everything yield return to just build a",
    "start": "1539659",
    "end": "1546740"
  },
  {
    "text": "list for me so whenever someone's trying to iterate this it's going to allow me to do that very nicely",
    "start": "1546740",
    "end": "1553220"
  },
  {
    "text": "so this here is quite handy and it's a it's a really nice language feature in my opinion to be able to find these",
    "start": "1553220",
    "end": "1560539"
  },
  {
    "text": "potential null reference exceptions before they occur the whole idea is that it gives us a little bit of help it's",
    "start": "1560539",
    "end": "1566000"
  },
  {
    "text": "not going to just magically solve all your problems but it is going to let you now find",
    "start": "1566000",
    "end": "1573799"
  },
  {
    "text": "things that could potentially throw an exception all right",
    "start": "1573799",
    "end": "1579380"
  },
  {
    "text": "so in my opinion this here is uh is truly a great thing to enable at least for new projects",
    "start": "1579380",
    "end": "1587179"
  },
  {
    "text": "so do this only enable tweet warnings as errors if it's a really completely new project or you you know that you don't",
    "start": "1587179",
    "end": "1593659"
  },
  {
    "text": "have any warnings because doing this enabling this on a large solution solution can can be",
    "start": "1593659",
    "end": "1600320"
  },
  {
    "text": "a little bit annoying people we get pissed off so with that being said let's talk about",
    "start": "1600320",
    "end": "1606140"
  },
  {
    "text": "another important language feature that was introduced in c-sharp it's called asynchronous streams and this requires",
    "start": "1606140",
    "end": "1611240"
  },
  {
    "text": "that you understand a little bit of asynchronous programming so imagine that we want to fetch some data and we want",
    "start": "1611240",
    "end": "1618140"
  },
  {
    "text": "to get item by item each item is retrieved asynchronously so it could be",
    "start": "1618140",
    "end": "1623179"
  },
  {
    "text": "something that's loaded from disk it could be a buffer that we're loading something from but we want to grab the",
    "start": "1623179",
    "end": "1628400"
  },
  {
    "text": "element process that before we go ahead and get the next one to produce one of these streams of data",
    "start": "1628400",
    "end": "1635419"
  },
  {
    "text": "we introduce the async keyword together with something called an iasync enumerable this here indicates what type",
    "start": "1635419",
    "end": "1642200"
  },
  {
    "text": "of data will be streamed back to whoever is consuming this this stream of elements so I could say that this here",
    "start": "1642200",
    "end": "1648679"
  },
  {
    "text": "is going to produce strings as it goes on all right and where the magic happens is",
    "start": "1648679",
    "end": "1653900"
  },
  {
    "text": "with the yield cure that I just just showed you so this here will now indicate to whoever's iterating through",
    "start": "1653900",
    "end": "1660020"
  },
  {
    "text": "this um a synchronous list of items that there's a new element to process each",
    "start": "1660020",
    "end": "1665059"
  },
  {
    "text": "element is going to be retrieved using the async no8 keywords here I'm opening a stream to a file and",
    "start": "1665059",
    "end": "1672080"
  },
  {
    "text": "disk and then what I'm doing is that I have the await keyword here to say that I'm going to retrieve this asynchronously",
    "start": "1672080",
    "end": "1677779"
  },
  {
    "text": "while my file system is very fast I'm going to say that hey I'm doing some processing using task.delay and then I",
    "start": "1677779",
    "end": "1684860"
  },
  {
    "text": "can consume this very easily using it for each Loop let me go into Visual Studio code and",
    "start": "1684860",
    "end": "1690799"
  },
  {
    "text": "show you how this works so we're going to sort of do the same thing here I have a method",
    "start": "1690799",
    "end": "1698659"
  },
  {
    "text": "marked as async using the IAC numerable this here is going to produce strings",
    "start": "1698659",
    "end": "1704120"
  },
  {
    "text": "each string is going to be retrieved in some asynchronous manner imagine this could have been listening",
    "start": "1704120",
    "end": "1710360"
  },
  {
    "text": "for items or producing items from a queue in Azure for example but here I just have a using declaration",
    "start": "1710360",
    "end": "1717919"
  },
  {
    "text": "what's interesting here as well is that this screen will be disposed of when the stream no longer produces any more items",
    "start": "1717919",
    "end": "1725179"
  },
  {
    "text": "so after this entire stream has been processed could be forever right so this here",
    "start": "1725179",
    "end": "1730580"
  },
  {
    "text": "could hold on to the file until the application terminates and then what I have here is that I have a while loop to say that I want you to",
    "start": "1730580",
    "end": "1737059"
  },
  {
    "text": "read the next line of the file as long as that is an instance of a string it's using pattern matching to ensure that",
    "start": "1737059",
    "end": "1743480"
  },
  {
    "text": "it's actually set to a not it's not null and then I'm going to declare that into",
    "start": "1743480",
    "end": "1748700"
  },
  {
    "text": "a local variable which I can use inside my while loop and then I would test a delay and I",
    "start": "1748700",
    "end": "1755419"
  },
  {
    "text": "returned this line of text back to whoever's consuming this rather simple this here is just",
    "start": "1755419",
    "end": "1761840"
  },
  {
    "text": "illustrating how we could produce one of these streams of data what you most of the time do is you're",
    "start": "1761840",
    "end": "1767480"
  },
  {
    "text": "the con on the consumer side of things look at that we have the await keyword inside in front of a for each Loop",
    "start": "1767480",
    "end": "1773120"
  },
  {
    "text": "normally when you use async in a weight you'll you have something that looks like this here but what this indicates is that we",
    "start": "1773120",
    "end": "1779480"
  },
  {
    "text": "are going to get this entire chunk of data in one go and then we're going to run through that what this means a",
    "start": "1779480",
    "end": "1786080"
  },
  {
    "text": "weight for each means that each item is we're going to go into this this body one by one as you've retrieved an item",
    "start": "1786080",
    "end": "1794659"
  },
  {
    "text": "this here is what you would most of the time use maybe you don't produce a stream of data",
    "start": "1794659",
    "end": "1800419"
  },
  {
    "text": "as frequently as you use one another good example of use case here is that I could be listening for items on a queue",
    "start": "1800419",
    "end": "1808399"
  },
  {
    "text": "there's a service bus client for Azure so you could say that hey I want to listen for the next item available in a",
    "start": "1808399",
    "end": "1815000"
  },
  {
    "text": "service queue and and that would use this stream of data as well or this a synchronous stream",
    "start": "1815000",
    "end": "1820220"
  },
  {
    "text": "so now each line will be retrieved asynchronously so if I run this let's zoom in here",
    "start": "1820220",
    "end": "1826880"
  },
  {
    "text": "and do a DOT net run it's going to read a file and then print out each line one by one of my favorite",
    "start": "1826880",
    "end": "1833720"
  },
  {
    "text": "song hopefully this works if you don't know the song Welcome to",
    "start": "1833720",
    "end": "1838820"
  },
  {
    "text": "the internet all right so this is pretty cool this could have been then streaming data from",
    "start": "1838820",
    "end": "1844640"
  },
  {
    "text": "pretty much any place it's a very nice way of of consuming data that where you don't have to load",
    "start": "1844640",
    "end": "1851000"
  },
  {
    "text": "the whole chunk into memory at once but one by one you're retrieving them right so it won't call",
    "start": "1851000",
    "end": "1857360"
  },
  {
    "text": "this line of code here on La until the for each Loop has processed the previous element so it calls get next on the",
    "start": "1857360",
    "end": "1864679"
  },
  {
    "text": "iterator and then it goes ahead and queries for the next one pretty simple",
    "start": "1864679",
    "end": "1870200"
  },
  {
    "text": "but very useful all right so again we could have used this to to",
    "start": "1870200",
    "end": "1876260"
  },
  {
    "text": "very easily consume an iasync enumerable and while many apis haven't adapted this",
    "start": "1876260",
    "end": "1882380"
  },
  {
    "text": "yet it's going to be be very much adopted in the next few years I do believe",
    "start": "1882380",
    "end": "1888440"
  },
  {
    "text": "just as async and a way to steal something that a lot of developers struggle with and haven't really added to their Solutions all over the place I",
    "start": "1888440",
    "end": "1895640"
  },
  {
    "text": "do believe this is also going to take some some time to get traction so that being said c-sharp 8 introduces",
    "start": "1895640",
    "end": "1901360"
  },
  {
    "text": "introduces a lot of interesting Concepts but c-sharp 9 did so too there's a thing",
    "start": "1901360",
    "end": "1907159"
  },
  {
    "text": "called records which was they talked about this even way back with C sharp six and proof of concept A",
    "start": "1907159",
    "end": "1913640"
  },
  {
    "text": "Thing Called primary Constructors but that was a long time ago and took a while to get around building this",
    "start": "1913640",
    "end": "1919520"
  },
  {
    "text": "feature records is a a shorthand way of creating a reference type that gives you value-based equality",
    "start": "1919520",
    "end": "1927140"
  },
  {
    "text": "and gives you immutability out of the box it's coupled with something called an init only Setter so you get a true",
    "start": "1927140",
    "end": "1933980"
  },
  {
    "text": "read-only Auto property top level statements it's what I just used inside my program.cs it's a completely new way",
    "start": "1933980",
    "end": "1940039"
  },
  {
    "text": "of producing small applications you can use it to create apis to do an asp.net",
    "start": "1940039",
    "end": "1945799"
  },
  {
    "text": "core website with just 10 lines of code for example it's a very very very powerful and we're",
    "start": "1945799",
    "end": "1951260"
  },
  {
    "text": "going to look at all of the pattern matching enhancements as well both in c-sharp 8 9 and some of them in 10.",
    "start": "1951260",
    "end": "1957020"
  },
  {
    "text": "Target type new expression I showed you that's from C sharp nine and there's a whole lot of features in C sharp 9 that",
    "start": "1957020",
    "end": "1963559"
  },
  {
    "text": "was also introduced like it's it's kind of interesting how you can add so many features into a ninth iteration of a",
    "start": "1963559",
    "end": "1970220"
  },
  {
    "text": "language right some of these are targeting very high performance applications lower level",
    "start": "1970220",
    "end": "1976520"
  },
  {
    "text": "programming but again it's it's interesting to see that because of the the open source of the",
    "start": "1976520",
    "end": "1983659"
  },
  {
    "text": "compilers I believe that it was easier to add more feature to the language I'm not saying that every project should",
    "start": "1983659",
    "end": "1989779"
  },
  {
    "text": "be rebuilt every 20 years even though we all probably want to this proved that",
    "start": "1989779",
    "end": "1995179"
  },
  {
    "text": "that was a really good choice so with that being said we're going to spend some time talking about the",
    "start": "1995179",
    "end": "2000399"
  },
  {
    "text": "pattern matching in c-sharp 8 C sharp 9 C sharp 10 and going forward as well",
    "start": "2000399",
    "end": "2006220"
  },
  {
    "text": "pattern matching is all about being able to in this case here look at different traits of an object for example I have a",
    "start": "2006220",
    "end": "2013059"
  },
  {
    "text": "puzzle piece I have this Ikea poster I could be looking at colors shapes I could be asking is this fruit edible",
    "start": "2013059",
    "end": "2019360"
  },
  {
    "text": "there's many things that we could check on an instance of an object or what a thing is I I talk about matching on the",
    "start": "2019360",
    "end": "2026260"
  },
  {
    "text": "type as well as the attribute of the object not not in terms of the attribute you put in in the brackets atop a method",
    "start": "2026260",
    "end": "2033399"
  },
  {
    "text": "call or a class but in terms of what color is it edible and those types of attributes",
    "start": "2033399",
    "end": "2039100"
  },
  {
    "text": "we've always been able to do this in C sharp one to C sharp six for example you",
    "start": "2039100",
    "end": "2044320"
  },
  {
    "text": "would have written some code that looks like this here if the fruit is of a particular type",
    "start": "2044320",
    "end": "2049358"
  },
  {
    "text": "and the color is what we're looking for imagine if we had to if the color was actually on the subtype this would have",
    "start": "2049359",
    "end": "2055898"
  },
  {
    "text": "been much more complex and we've all written code like this here it's it's nothing wrong with this",
    "start": "2055899",
    "end": "2061419"
  },
  {
    "text": "it's just a little bit more more noisy than it has to be so that's why in C sharp 7 they",
    "start": "2061419",
    "end": "2066520"
  },
  {
    "text": "introduce pattern matching which makes this a whole lot easier which is a lot more noisier than the",
    "start": "2066520",
    "end": "2072099"
  },
  {
    "text": "first one so the reason that we didn't see a lot of pattern matching in c-sharp 7 is",
    "start": "2072099",
    "end": "2078339"
  },
  {
    "text": "because it relied on using the switch we could have used it a little bit with the with the if statement as well but no",
    "start": "2078339",
    "end": "2085060"
  },
  {
    "text": "one did at this point so this is sort of doing the same thing it's it's grabbing the the instance of",
    "start": "2085060",
    "end": "2091540"
  },
  {
    "text": "our type it's matching a particular type and then over here when we put on the laser pointer here",
    "start": "2091540",
    "end": "2097660"
  },
  {
    "text": "then over here it's actually capturing this instance as the correct type so inside inside this when class here where",
    "start": "2097660",
    "end": "2103960"
  },
  {
    "text": "I could look at properties with computed values it would be able to use this as the concrete type I don't have to do any",
    "start": "2103960",
    "end": "2110800"
  },
  {
    "text": "casting myself it all just it's done by the compiler which you would expect as well",
    "start": "2110800",
    "end": "2117460"
  },
  {
    "text": "so now in C sharp a they introduced the switch expression and in C sharp 9 they added a whole lot of Expressions that we",
    "start": "2117460",
    "end": "2124180"
  },
  {
    "text": "could use or a whole lot of patterns that we can use with this here this looks a little bit different but if you've ever done kotlin Swift or other",
    "start": "2124180",
    "end": "2131200"
  },
  {
    "text": "programming languages that have had pattern matching for a long time you'll be familiar with this or if you've done",
    "start": "2131200",
    "end": "2137380"
  },
  {
    "text": "F sharp so what this is doing here is that saying I want you to create patterns for",
    "start": "2137380",
    "end": "2142839"
  },
  {
    "text": "this object so the based on the input I want to produce a result on the left hand side we have what's what's produced out of",
    "start": "2142839",
    "end": "2149619"
  },
  {
    "text": "this here we can fill this with expressions together with patterns so here's a",
    "start": "2149619",
    "end": "2154839"
  },
  {
    "text": "concrete example of that I can say that based on a fruit if it's an apple we return a string this here is the same as",
    "start": "2154839",
    "end": "2161980"
  },
  {
    "text": "doing an expression body member it returns that data this hair is a Discord it means that I",
    "start": "2161980",
    "end": "2169180"
  },
  {
    "text": "don't care it could be null it could be any object as long as as long as they're all",
    "start": "2169180",
    "end": "2175540"
  },
  {
    "text": "relatable if this here was an object as in the",
    "start": "2175540",
    "end": "2180820"
  },
  {
    "text": "type object you could have matched on pretty much anything here",
    "start": "2180820",
    "end": "2185859"
  },
  {
    "text": "so again this is what's returned out of this this this switch expression and we're going to spend some time",
    "start": "2185859",
    "end": "2191140"
  },
  {
    "text": "looking at we've seen the type pattern I use this in the in the while loop where I said it has to be a string there's",
    "start": "2191140",
    "end": "2196540"
  },
  {
    "text": "also a positional pattern which we're going to look at as well which is used with this deconstruct method as well as",
    "start": "2196540",
    "end": "2201579"
  },
  {
    "text": "tuples there's property patterns Tuple patterns relational patterns you can append them together with an and or",
    "start": "2201579",
    "end": "2208240"
  },
  {
    "text": "conjunctive end pattern there's the disjunctive or pattern parenthesized pattern negative patterns recursive patterns it's a whole lot of patterns",
    "start": "2208240",
    "end": "2215440"
  },
  {
    "text": "right instead of just talking about them let's go into visual studio and have a look",
    "start": "2215440",
    "end": "2221880"
  },
  {
    "text": "and you'll notice that as C sharp is evolving there's going to be more patterns added to the language and the",
    "start": "2223720",
    "end": "2229540"
  },
  {
    "text": "whole reason is that we want to make it easier or the language designers do want to make",
    "start": "2229540",
    "end": "2235720"
  },
  {
    "text": "it easier for us to express ourselves in ways that was maybe a little bit more tedious before so let's say that I have",
    "start": "2235720",
    "end": "2241960"
  },
  {
    "text": "an instance of I have a type here or rather it's a record there's a few things happening in this",
    "start": "2241960",
    "end": "2247420"
  },
  {
    "text": "class here or this file I have three record types now these are all reference types they are generating classes behind",
    "start": "2247420",
    "end": "2254920"
  },
  {
    "text": "the scenes they give me value-based equality they give me some deconstruct methods out of the box and they also",
    "start": "2254920",
    "end": "2262180"
  },
  {
    "text": "come with something called a primary Constructor so here for a failed test it takes the",
    "start": "2262180",
    "end": "2269560"
  },
  {
    "text": "amount of tests or amount of attempts the date that I performed my University test for example or a computer test and",
    "start": "2269560",
    "end": "2276099"
  },
  {
    "text": "passed these up to a default or the Constructor of the of the base class",
    "start": "2276099",
    "end": "2281680"
  },
  {
    "text": "the base class looks like this so it has a primary Constructor again",
    "start": "2281680",
    "end": "2288579"
  },
  {
    "text": "that has these required parameters when I create a test result I'm required to pass these parameters",
    "start": "2288579",
    "end": "2295060"
  },
  {
    "text": "which is quite handy another example of a record before we look at the pattern matching",
    "start": "2295060",
    "end": "2300099"
  },
  {
    "text": "is if I can run this here I've simply Built This Record of a person has a",
    "start": "2300099",
    "end": "2306940"
  },
  {
    "text": "first name and last name I'm instantiating that here the Constructor requires me to pass these parameters and",
    "start": "2306940",
    "end": "2312400"
  },
  {
    "text": "after that it's immutable I can't do any changes to this object at all and this here on the left hand side I'll zoom out",
    "start": "2312400",
    "end": "2319180"
  },
  {
    "text": "a little bit just to give you an idea of all the code that's generated so we have the backing fields",
    "start": "2319180",
    "end": "2324700"
  },
  {
    "text": "and then if we scroll down a bit there's quite a bit of code generated out of this here it's a class it has a nice two",
    "start": "2324700",
    "end": "2330099"
  },
  {
    "text": "string method it lets you print this as a it's a nice representation it overrides a quality check to give you",
    "start": "2330099",
    "end": "2335859"
  },
  {
    "text": "value-based equality value-based equality is where it compares the properties instead of the instance or",
    "start": "2335859",
    "end": "2342579"
  },
  {
    "text": "the reference which is why you cannot use this with Entity framework because Entity framework relies on reference based",
    "start": "2342579",
    "end": "2349060"
  },
  {
    "text": "equality checks with that being said it also comes with a deconstruct method down here at the",
    "start": "2349060",
    "end": "2355060"
  },
  {
    "text": "bottom this will deconstruct it into whatever you want with the these um with",
    "start": "2355060",
    "end": "2362079"
  },
  {
    "text": "these properties that you require on the record so with that being said I've also added my own so you can have a",
    "start": "2362079",
    "end": "2368619"
  },
  {
    "text": "record here with a body so I've introduced a primary Constructor it generates sort of the same code we just",
    "start": "2368619",
    "end": "2373900"
  },
  {
    "text": "saw in sharp lab but I've also added my own deconstruct method so it doesn't have to give you the same properties",
    "start": "2373900",
    "end": "2380200"
  },
  {
    "text": "that you have on your type it can be computed values can do be whatever you want",
    "start": "2380200",
    "end": "2385660"
  },
  {
    "text": "so why is this important now let's create an instance of this test result",
    "start": "2385660",
    "end": "2393059"
  },
  {
    "text": "regard to bring in my name space and I'll say result",
    "start": "2394000",
    "end": "2399460"
  },
  {
    "text": "or test result rather is equal to a new failed now this here",
    "start": "2399460",
    "end": "2406000"
  },
  {
    "text": "requires me to pass the number of attempts and the daytime offset let's just say now",
    "start": "2406000",
    "end": "2412480"
  },
  {
    "text": "perfect looks like a normal normal instantiation now what I can do here is that I can I want to get a string",
    "start": "2412480",
    "end": "2417520"
  },
  {
    "text": "representation of this or it could be that I want to return a user to a specific place but depending on what",
    "start": "2417520",
    "end": "2423940"
  },
  {
    "text": "type of result they got so it doesn't have to be a string that you return out of your switch expression but I'm going",
    "start": "2423940",
    "end": "2430000"
  },
  {
    "text": "to so I'm going to say whatever outcome rather outcome is equal to based on this test result",
    "start": "2430000",
    "end": "2435760"
  },
  {
    "text": "I'll create one of these switch expressions this here is now filled with with um",
    "start": "2435760",
    "end": "2441099"
  },
  {
    "text": "with Expressions now it's going to complain that I haven't added any yet so I can start off with um",
    "start": "2441099",
    "end": "2447099"
  },
  {
    "text": "if I can spell incon nope",
    "start": "2447099",
    "end": "2452440"
  },
  {
    "text": "can't Spell inconclusive so let's just nope here so that's where all other tests than the ones that I'm looking for",
    "start": "2452440",
    "end": "2458079"
  },
  {
    "text": "this here is a default pattern or a Discord so so it grabs everything",
    "start": "2458079",
    "end": "2464020"
  },
  {
    "text": "I could also say that I want to grab the result let's do result here that this will do",
    "start": "2464020",
    "end": "2470980"
  },
  {
    "text": "the exact same thing so if you use the Vore pattern which this is called it would match on nulls so I could use",
    "start": "2470980",
    "end": "2478119"
  },
  {
    "text": "I could use this over here it wouldn't be useful if it actually gives me null but I could access this as",
    "start": "2478119",
    "end": "2485140"
  },
  {
    "text": "a test result because it could be any other test results than the ones that I'm looking for so let's say that I want to get the",
    "start": "2485140",
    "end": "2492160"
  },
  {
    "text": "test date here but again this here will match on anything it could be a null so I would have to do my null checks",
    "start": "2492160",
    "end": "2498760"
  },
  {
    "text": "here as well all right so we have that now I mentioned the deconstructed quite",
    "start": "2498760",
    "end": "2503980"
  },
  {
    "text": "a few times and I could use that here as well so the deconstruct can be used together with what's known as a",
    "start": "2503980",
    "end": "2509560"
  },
  {
    "text": "positional pattern I know that one of these test results it has an a deconstruct that gives me three",
    "start": "2509560",
    "end": "2517119"
  },
  {
    "text": "values the data tests how many days ago this was and if the test is now archived",
    "start": "2517119",
    "end": "2522520"
  },
  {
    "text": "for some reason so I'd like to write a pattern that looks at what this object can be deconstructed into",
    "start": "2522520",
    "end": "2528940"
  },
  {
    "text": "I can say that I don't care about the first value and the second one this is why it's hard because I have to go back and forth",
    "start": "2528940",
    "end": "2535000"
  },
  {
    "text": "between the code when I write these tests so let's say it's more more than 10 days ago and I don't care about if",
    "start": "2535000",
    "end": "2540940"
  },
  {
    "text": "it's archived how many of you think this makes sense",
    "start": "2540940",
    "end": "2547260"
  },
  {
    "text": "a couple wow so when you go come back to this code tomorrow you'll have no idea what this",
    "start": "2548619",
    "end": "2553960"
  },
  {
    "text": "actually means right this here is a relational pattern it's saying that whatever this object was",
    "start": "2553960",
    "end": "2559900"
  },
  {
    "text": "deconstructed to the second position of that deconstruct has to be more than 10.",
    "start": "2559900",
    "end": "2565060"
  },
  {
    "text": "I have no idea what that was I'll have to go back again I could use a name parameter here but",
    "start": "2565060",
    "end": "2571900"
  },
  {
    "text": "again I'd very much like it official Studio told me what it deconstructed into by looking at the the parameters",
    "start": "2571900",
    "end": "2580720"
  },
  {
    "text": "maybe it's really in a future version this makes more sense but I still don't know what it is that I",
    "start": "2580720",
    "end": "2586480"
  },
  {
    "text": "don't care about so I'd have to add that here as well what's interesting here is that this",
    "start": "2586480",
    "end": "2591520"
  },
  {
    "text": "here will look at all of the different subclasses as well because this lives on the base class so as long as any",
    "start": "2591520",
    "end": "2598720"
  },
  {
    "text": "subclass can be deconstructed into this this will be a match",
    "start": "2598720",
    "end": "2604359"
  },
  {
    "text": "but I could also say that I wouldn't be more specific because since I don't believe this makes a lot of sense",
    "start": "2604359",
    "end": "2609520"
  },
  {
    "text": "because you have to go back and forth and actually own the code and look at it or inspect the code with something else",
    "start": "2609520",
    "end": "2615220"
  },
  {
    "text": "or go into the definition I'd much rather say well if it's failed and I can capture this inside my switch",
    "start": "2615220",
    "end": "2622780"
  },
  {
    "text": "here or inside my block here and say sorry you failed",
    "start": "2622780",
    "end": "2628359"
  },
  {
    "text": "and I can use this with a string interpolation if I want to and I can access this here as you'll see",
    "start": "2628359",
    "end": "2634180"
  },
  {
    "text": "as the concrete type as well if I could capture this into this",
    "start": "2634180",
    "end": "2639660"
  },
  {
    "text": "the right hand side of my expression here I could also say that well I want to",
    "start": "2640720",
    "end": "2646000"
  },
  {
    "text": "only get failed tests that have a number of attempts more than",
    "start": "2646000",
    "end": "2652359"
  },
  {
    "text": "two right so this here starting to make a little bit more sense",
    "start": "2652359",
    "end": "2657640"
  },
  {
    "text": "if I were to remove the type here that would mean any test result so the",
    "start": "2657640",
    "end": "2663220"
  },
  {
    "text": "Base Class positive and negative but I can say that it has to be failed and it has to have a property this here is a",
    "start": "2663220",
    "end": "2669760"
  },
  {
    "text": "property pattern it's these are the curly braces or a cooler bracket so I can say that I want to look at one of the properties",
    "start": "2669760",
    "end": "2676960"
  },
  {
    "text": "again using this relational pattern it has to be more than two and less than",
    "start": "2676960",
    "end": "2682839"
  },
  {
    "text": "10 for example so these conjunctive ants to put different types of requirements together",
    "start": "2682839",
    "end": "2689200"
  },
  {
    "text": "this here allows me to Now define a range of allowed values for example",
    "start": "2689200",
    "end": "2695079"
  },
  {
    "text": "this isn't only useful inside a switch expression so we could fill this up with a lot of other ones as well right so",
    "start": "2695079",
    "end": "2701380"
  },
  {
    "text": "it's passed I could do that as well so you get the idea you can use this all of these",
    "start": "2701380",
    "end": "2706660"
  },
  {
    "text": "different patterns together it doesn't have to have the same type of patterns so here's a type pattern",
    "start": "2706660",
    "end": "2712240"
  },
  {
    "text": "here's a type pattern type pattern with a property pattern with a conjunctive end pattern since it's using more than",
    "start": "2712240",
    "end": "2717940"
  },
  {
    "text": "more than one it's going to be recursive and then it's using the deconstruct so you can you can combine these together",
    "start": "2717940",
    "end": "2724000"
  },
  {
    "text": "to write very hard to understand code or you use it to write understandable",
    "start": "2724000",
    "end": "2730180"
  },
  {
    "text": "code so you can use this with the switch the switch expression but you can also use",
    "start": "2730180",
    "end": "2735460"
  },
  {
    "text": "it with a normal if so I could say well if the test result is passed and it has a test day or let's",
    "start": "2735460",
    "end": "2744760"
  },
  {
    "text": "number of tests is probably easier and we can relate that to let's say more than 10. then I could use that inside this here",
    "start": "2744760",
    "end": "2751420"
  },
  {
    "text": "and if I want to grab this before I do that what do you think",
    "start": "2751420",
    "end": "2756460"
  },
  {
    "text": "happens if I negate this entire thing",
    "start": "2756460",
    "end": "2760200"
  },
  {
    "text": "again it's very confusing right I have no idea actually without running the code or running tests for it",
    "start": "2761500",
    "end": "2767260"
  },
  {
    "text": "be careful when using not not is is really good for negating an entire pattern but it's mostly useful with",
    "start": "2767260",
    "end": "2776140"
  },
  {
    "text": "not no for example where you negate that it's null all right let me just go back here",
    "start": "2776140",
    "end": "2782560"
  },
  {
    "text": "if I want to capture this here inside this this if statement normally what you'd have to do is say War passed is",
    "start": "2782560",
    "end": "2788920"
  },
  {
    "text": "equal to test is equal to test result as a past test now we don't have to do this we can take",
    "start": "2788920",
    "end": "2795700"
  },
  {
    "text": "this variable declaration and put it over here at the end of the if and we'll have this inside our if statement",
    "start": "2795700",
    "end": "2802300"
  },
  {
    "text": "extremely useful and I don't have to do any casting myself it's now the concrete type of",
    "start": "2802300",
    "end": "2808060"
  },
  {
    "text": "what I'm expecting so pattern matching and the record types are extremely useful and it's being",
    "start": "2808060",
    "end": "2814839"
  },
  {
    "text": "continuously worked on by adding more patterns more ways of looking at instances properties lists contents and",
    "start": "2814839",
    "end": "2822099"
  },
  {
    "text": "all of that just to make it easier to uh to express ourselves one way to look at this is using for",
    "start": "2822099",
    "end": "2827859"
  },
  {
    "text": "example an option or a maybe to say that maybe this returns an object or maybe it",
    "start": "2827859",
    "end": "2833079"
  },
  {
    "text": "returns a positive result maybe it was unauthorized maybe it was a successful attempt and you can use this to",
    "start": "2833079",
    "end": "2839079"
  },
  {
    "text": "determine where you want a user to be passed on to for a website example",
    "start": "2839079",
    "end": "2844780"
  },
  {
    "text": "all right so we have a few more things that I want to go through before I'm actually done so this is all the patterns that we have",
    "start": "2844780",
    "end": "2850960"
  },
  {
    "text": "in c-sharp so far which is quite a lot whoops and I'm not going to suggest that you just know all",
    "start": "2850960",
    "end": "2856780"
  },
  {
    "text": "of them from the top top of your head the Tuple pattern looks very similar to the positional pattern it's just that",
    "start": "2856780",
    "end": "2863079"
  },
  {
    "text": "instead of us having an object that is deconstructed it looks at a tuple as an",
    "start": "2863079",
    "end": "2868180"
  },
  {
    "text": "input but you can experiment with that on your own so C sharp 10 introduces another way of",
    "start": "2868180",
    "end": "2874540"
  },
  {
    "text": "producing a record you can use a record struct depending on where you want that to be located",
    "start": "2874540",
    "end": "2880839"
  },
  {
    "text": "now I said that record classes are are mutable record structs or not you",
    "start": "2880839",
    "end": "2887319"
  },
  {
    "text": "have to append the read-only keyword if you're doing a record struct otherwise it won't be read only or",
    "start": "2887319",
    "end": "2893079"
  },
  {
    "text": "otherwise it won't be immutable producing improvements they have Global using directives so we could say that we",
    "start": "2893079",
    "end": "2898359"
  },
  {
    "text": "have globally introduces something that we're using in in our entire application it's a file scope namespace extending",
    "start": "2898359",
    "end": "2905740"
  },
  {
    "text": "the property patterns that are improving the Lambda expressions or have done constant uh in interpolated strings and",
    "start": "2905740",
    "end": "2912819"
  },
  {
    "text": "there's quite a few things happening in here let me actually show you that file scope namespace declaration",
    "start": "2912819",
    "end": "2918220"
  },
  {
    "text": "I've used it in the example that I had here but it might have been subtle so at the top here I have this namespace",
    "start": "2918220",
    "end": "2924280"
  },
  {
    "text": "declaration this here says that this entire class now lives inside this namespace called NDC",
    "start": "2924280",
    "end": "2931000"
  },
  {
    "text": "it might seem silly why can't we just have it inside this nested block here but",
    "start": "2931000",
    "end": "2936940"
  },
  {
    "text": "you know unnecessary characters passed into code base or into GitHub is a little bit unnecessary",
    "start": "2936940",
    "end": "2943119"
  },
  {
    "text": "all that white space is annoying so we can just do a semicolon here and it should just figure that out",
    "start": "2943119",
    "end": "2949000"
  },
  {
    "text": "and remove it or remove that level of indentation and the record structs would",
    "start": "2949000",
    "end": "2954339"
  },
  {
    "text": "look like this so instead of having a record class the record keyword defaults to record class but we could do record",
    "start": "2954339",
    "end": "2960220"
  },
  {
    "text": "struct if wanted read only we'd do read only",
    "start": "2960220",
    "end": "2966099"
  },
  {
    "text": "actually read only record struct like this might look a little bit confusing but",
    "start": "2966099",
    "end": "2972040"
  },
  {
    "text": "for those of you that do need value types this is this is very very handy",
    "start": "2972040",
    "end": "2977980"
  },
  {
    "text": "all right so C sharp 10 Again introduces quite a",
    "start": "2977980",
    "end": "2983800"
  },
  {
    "text": "few things and one of these is of course I mentioned this quickly it's a constant",
    "start": "2983800",
    "end": "2990339"
  },
  {
    "text": "and interpolated strings what this allows us to do is then use constant values in interpolated strings which we",
    "start": "2990339",
    "end": "2995500"
  },
  {
    "text": "couldn't do before but more useful um I'd use this but another more useful",
    "start": "2995500",
    "end": "3000599"
  },
  {
    "text": "feature is inferring the delegate types of a Lambda so this here this is C Sharp 9 and this",
    "start": "3000599",
    "end": "3007560"
  },
  {
    "text": "here requires us to explicitly tell it which type of Lambda this is or delegate",
    "start": "3007560",
    "end": "3012720"
  },
  {
    "text": "this is which seems unnecessary because the compiler should be able to figure this out and it can in C sharp 10 we we do",
    "start": "3012720",
    "end": "3019500"
  },
  {
    "text": "get this out of the box so it tries its best to figure it out but depending on the input or what what it has on the",
    "start": "3019500",
    "end": "3025740"
  },
  {
    "text": "right hand side but it would also be able to figure out for example if we had the funk string of int parse we could",
    "start": "3025740",
    "end": "3033540"
  },
  {
    "text": "remove the string from the from the anonymous method makes sense it's it's a handy feature it",
    "start": "3033540",
    "end": "3039780"
  },
  {
    "text": "tries its best to figure things out for us probably one of of my favorite features",
    "start": "3039780",
    "end": "3045660"
  },
  {
    "text": "is with these top level statements is to build minimal apis and a minimal API can",
    "start": "3045660",
    "end": "3051420"
  },
  {
    "text": "look like this here this here Maps the the path slash ID",
    "start": "3051420",
    "end": "3056520"
  },
  {
    "text": "to whatever this Anonymous method returns and now with C sharp 10 we can",
    "start": "3056520",
    "end": "3062640"
  },
  {
    "text": "have attributes in our lambdas which again is quite handy it means that we can produce pretty",
    "start": "3062640",
    "end": "3069900"
  },
  {
    "text": "powerful minimalistic apis that we can pass as a part of a larger application",
    "start": "3069900",
    "end": "3075720"
  },
  {
    "text": "or we can do it as a very much smaller Standalone application as well",
    "start": "3075720",
    "end": "3081839"
  },
  {
    "text": "so we all know that minimal apis or microservices has been a thing for a very long time but now with this concept",
    "start": "3081839",
    "end": "3087839"
  },
  {
    "text": "hopefully the micro is actually going to stay micro and not grow out of proportion like it normally does in a",
    "start": "3087839",
    "end": "3094380"
  },
  {
    "text": "microservice all right so what's next we're about eight minutes to cover everything else that's happening in c-sharp for the next",
    "start": "3094380",
    "end": "3100980"
  },
  {
    "text": "10 years I'm kidding there's quite a lot happening to to C sharp",
    "start": "3100980",
    "end": "3106380"
  },
  {
    "text": "um the reason I still love C sharp and still talk about c-sharp is because the language is evolving and it's evolving",
    "start": "3106380",
    "end": "3113220"
  },
  {
    "text": "in a way that it feels like every feature in the language is still something that could have been",
    "start": "3113220",
    "end": "3119220"
  },
  {
    "text": "a part of c-sharp from day one it feels like it belongs in the language and it makes it easier for anyone that's",
    "start": "3119220",
    "end": "3125040"
  },
  {
    "text": "starting with c-sharp to understand how all of the features work but then again they're going to add more",
    "start": "3125040",
    "end": "3130319"
  },
  {
    "text": "things and and hopefully all of these are going to feel like um they belong in c-sharp as well so",
    "start": "3130319",
    "end": "3135420"
  },
  {
    "text": "with C sharp 11 was a whole talk yesterday I believe on on c-sharp 11 and all of its features so",
    "start": "3135420",
    "end": "3140700"
  },
  {
    "text": "there's quite a lot happening in the language and it's going to continue that way as well there's going to be more patterns a pattern of C sharp is to and",
    "start": "3140700",
    "end": "3147780"
  },
  {
    "text": "produce more patterns it's going to be a way for you to look at the contents of a list for example to match on the content",
    "start": "3147780",
    "end": "3154020"
  },
  {
    "text": "that you expect to what you get the name of operator",
    "start": "3154020",
    "end": "3159059"
  },
  {
    "text": "is you you can be able to say name of parameter instead of passing the the type",
    "start": "3159059",
    "end": "3164940"
  },
  {
    "text": "it's finally going to Cache the delegates for static method groups which is a huge performance Improvement",
    "start": "3164940",
    "end": "3171599"
  },
  {
    "text": "there's this thing called required properties so before I had to write some some quite",
    "start": "3171599",
    "end": "3177420"
  },
  {
    "text": "nasty code to get around the the problem of I didn't want to introduce a Constructor when I enable the nullable",
    "start": "3177420",
    "end": "3183059"
  },
  {
    "text": "reference types but I still want to require people to set my properties to a value that's why we could say I require",
    "start": "3183059",
    "end": "3190200"
  },
  {
    "text": "you to set this property called name here it shouldn't be null but you're required to set it and you do that in",
    "start": "3190200",
    "end": "3196800"
  },
  {
    "text": "the object initializer and here you see the init only keyword that makes it immutable or it makes it",
    "start": "3196800",
    "end": "3203819"
  },
  {
    "text": "you can only set it once right so after you're required to set it you cannot change it without getting a",
    "start": "3203819",
    "end": "3209819"
  },
  {
    "text": "new instance all right then we have something called raw string literals",
    "start": "3209819",
    "end": "3216000"
  },
  {
    "text": "static members and interfaces I believe I have a slide on that soon and then utf-8 string literals this is a",
    "start": "3216000",
    "end": "3223319"
  },
  {
    "text": "really nice language feature it allows you to say that I have a string and I want to use that as a span of bytes",
    "start": "3223319",
    "end": "3230400"
  },
  {
    "text": "working with spans is a whole topic on its own it's a really interesting type that lets you work with unmanaged",
    "start": "3230400",
    "end": "3236880"
  },
  {
    "text": "managed and all types of different memory memory in in your applications so",
    "start": "3236880",
    "end": "3242220"
  },
  {
    "text": "here I can say that I have this string here it's allocated in memory and I'm going to use this span to say that I can",
    "start": "3242220",
    "end": "3248280"
  },
  {
    "text": "substring this I can find portions in it I can slice it off without having to do any extra allocations",
    "start": "3248280",
    "end": "3255420"
  },
  {
    "text": "and they've done a lot of work with this and used it internally in.net and it's speeding things up quite heavily",
    "start": "3255420",
    "end": "3262260"
  },
  {
    "text": "an oasp.net uses this a lot and there's some performance benchmarks on how how great it is to to do this because you",
    "start": "3262260",
    "end": "3269040"
  },
  {
    "text": "can pass memory around and you can slice it off and work with portions without having to allocate any extra memory at",
    "start": "3269040",
    "end": "3275099"
  },
  {
    "text": "all it's like working with pointers in Old C and C plus plus super useful but without the problems of",
    "start": "3275099",
    "end": "3281460"
  },
  {
    "text": "pointer studies well it's going to get generic attributes which is a very nice addition",
    "start": "3281460",
    "end": "3286800"
  },
  {
    "text": "I've been wanting this since probably the day I started using asp.net being able to do a generic attribute on a",
    "start": "3286800",
    "end": "3292559"
  },
  {
    "text": "controller for example super handy I have no idea why it took 20 years to",
    "start": "3292559",
    "end": "3298500"
  },
  {
    "text": "build this because it's an amazing well since C sharp two that is now",
    "start": "3298500",
    "end": "3304500"
  },
  {
    "text": "there's another language feature called perimeter null checking it's a double bangs so if we were to add double bangs",
    "start": "3304500",
    "end": "3311040"
  },
  {
    "text": "to a parameter on a method it would automatically add argument null",
    "start": "3311040",
    "end": "3317480"
  },
  {
    "text": "exception.throw if null but it seems like no one liked that",
    "start": "3317480",
    "end": "3324599"
  },
  {
    "text": "let's see here so apparently some auto-generated code is fine but others isn't so what the feature was was I",
    "start": "3324599",
    "end": "3331619"
  },
  {
    "text": "believe double Banks like this here and it would automatically null check this for you and throw an exception if the",
    "start": "3331619",
    "end": "3336839"
  },
  {
    "text": "input was null unfortunately no one liked it",
    "start": "3336839",
    "end": "3343559"
  },
  {
    "text": "I did I liked it but then of course they remove it from the language",
    "start": "3343559",
    "end": "3350420"
  },
  {
    "text": "based on community feedback that is let's go back here so there was a lot of backlash on that feature so they removed",
    "start": "3350700",
    "end": "3356819"
  },
  {
    "text": "it out of the language which proves that doing this open source and getting some feedback from the community is great",
    "start": "3356819",
    "end": "3362280"
  },
  {
    "text": "because we can all participate and give them our opinion we all love opinions",
    "start": "3362280",
    "end": "3367920"
  },
  {
    "text": "when working with software now what's unfortunate with this is that",
    "start": "3367920",
    "end": "3373140"
  },
  {
    "text": "some teams uh also doing open source uh in my in Microsoft like the asp.net team",
    "start": "3373140",
    "end": "3379079"
  },
  {
    "text": "they had already refactored their entire code base to use this hmm",
    "start": "3379079",
    "end": "3384960"
  },
  {
    "text": "I do feel for them like that must have been quite quite quite bad anyways here's another one",
    "start": "3384960",
    "end": "3392160"
  },
  {
    "text": "before we end this there's this thing called Static abstract members in interfaces",
    "start": "3392160",
    "end": "3397380"
  },
  {
    "text": "we work to do this today there wouldn't be any compiler problems it wouldn't tell us that I had this static t on my",
    "start": "3397380",
    "end": "3403920"
  },
  {
    "text": "my interface I Singleton we all love Singletons and if you're from java we we",
    "start": "3403920",
    "end": "3410099"
  },
  {
    "text": "all love this so but it's not telling me that my actual person class here should",
    "start": "3410099",
    "end": "3416460"
  },
  {
    "text": "Implement that right which is a little bit problematic so now it's C sharp 11",
    "start": "3416460",
    "end": "3422520"
  },
  {
    "text": "this here's a preview feature but if we do static abstract it would then indicate that the person class actually",
    "start": "3422520",
    "end": "3429119"
  },
  {
    "text": "has to implement the interface which I would have thought it would do without that abstract keyword but this",
    "start": "3429119",
    "end": "3436200"
  },
  {
    "text": "is a preview feature and hopefully it's uh it's going to make it into the language not all of us does uh does I",
    "start": "3436200",
    "end": "3443280"
  },
  {
    "text": "Singletons or single tones but this here does going to tell us that this doesn't Implement that so with that being said there's quite a",
    "start": "3443280",
    "end": "3450180"
  },
  {
    "text": "lot happening with c-sharp as a programming language and going forward I do believe that there's going to be much",
    "start": "3450180",
    "end": "3455220"
  },
  {
    "text": "more features added to the language which has developers that have been working with c-sharp for a long time can",
    "start": "3455220",
    "end": "3461040"
  },
  {
    "text": "be a little bit confusing and can be hard to keep up with all of the language features that are added",
    "start": "3461040",
    "end": "3466500"
  },
  {
    "text": "but tools like resharper and tools like Rider and tools like everything else that comes to visual studio in terms of",
    "start": "3466500",
    "end": "3472980"
  },
  {
    "text": "refactoring is going to try and help us to write our code more effectively and efficiently to make it also more",
    "start": "3472980",
    "end": "3479760"
  },
  {
    "text": "readable like we want the compiler to help us write better code not just write code that's faster like we saw with",
    "start": "3479760",
    "end": "3486480"
  },
  {
    "text": "pattern matching we can write code that's really hard to understand and read but ultimately we want to write",
    "start": "3486480",
    "end": "3491700"
  },
  {
    "text": "code that's easier to maybe show someone in the business because we all want opinions on our code from the business",
    "start": "3491700",
    "end": "3497460"
  },
  {
    "text": "side of things but if we can show them that hey I translated this criteria into a pattern",
    "start": "3497460",
    "end": "3503400"
  },
  {
    "text": "it makes it easier to talk the same language and I think that's important so with that being said I have a lot of",
    "start": "3503400",
    "end": "3509460"
  },
  {
    "text": "things on plural side I have a lot of courses on c-sharp and Python and all all kinds of things check",
    "start": "3509460",
    "end": "3515460"
  },
  {
    "text": "that out if you like my stuff and it's been a pleasure being back I hope to see you again next year so thank you so much for for coming along",
    "start": "3515460",
    "end": "3521870"
  },
  {
    "text": "[Applause]",
    "start": "3521870",
    "end": "3530179"
  }
]