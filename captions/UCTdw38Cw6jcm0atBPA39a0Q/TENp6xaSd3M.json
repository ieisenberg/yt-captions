[
  {
    "text": "hi everyone my name is braniuslav and the title of this talk is desired state how react kubernetes",
    "start": "8080",
    "end": "15679"
  },
  {
    "text": "and control theory have lots in common it's a talk where i simply want to share with you a certain type of abstraction",
    "start": "15679",
    "end": "23439"
  },
  {
    "text": "that i've come across working across the stack it's a model that comes up again and",
    "start": "23439",
    "end": "29519"
  },
  {
    "text": "again in various areas of computing from ui engineering to infrastructure",
    "start": "29519",
    "end": "35280"
  },
  {
    "text": "management databases programming language theory and elsewhere",
    "start": "35280",
    "end": "41360"
  },
  {
    "text": "for lack of a better term we could call that abstraction desired state",
    "start": "41360",
    "end": "46399"
  },
  {
    "text": "but that name only describes a part of it i'll go through some of the ways that we",
    "start": "46399",
    "end": "51760"
  },
  {
    "text": "can look at this abstraction and show some examples of where it's used",
    "start": "51760",
    "end": "57440"
  },
  {
    "text": "my hope is that by the end of this talk you'll be able to not only spot this",
    "start": "57440",
    "end": "62480"
  },
  {
    "text": "abstraction in the tools and apis that you encounter but also be able to assess whether it's",
    "start": "62480",
    "end": "69200"
  },
  {
    "text": "worth using in your projects and products this talk has eight parts",
    "start": "69200",
    "end": "75119"
  },
  {
    "text": "i will start with some general motivation and go through a simple example of how we can look at systems which are",
    "start": "75119",
    "end": "82320"
  },
  {
    "text": "even outside of our domain with this abstraction in mind this will give us some general",
    "start": "82320",
    "end": "88240"
  },
  {
    "text": "principles that underlie this model then i'll present several different",
    "start": "88240",
    "end": "93520"
  },
  {
    "text": "angles from which we can look at this abstraction with examples from well-known tools like",
    "start": "93520",
    "end": "100000"
  },
  {
    "text": "react kubernetes and terraform at the end at the end i'll talk about",
    "start": "100000",
    "end": "105280"
  },
  {
    "text": "the things you should think about when applying this abstraction yourself and will of course have time for some",
    "start": "105280",
    "end": "110799"
  },
  {
    "text": "questions like i mentioned my name is branislav",
    "start": "110799",
    "end": "115920"
  },
  {
    "text": "and you can find me on github over here i work for a company called sezam here in oslo where we create a product which",
    "start": "115920",
    "end": "123280"
  },
  {
    "text": "helps companies make their siloed systems talk to each other merge and transform data",
    "start": "123280",
    "end": "129759"
  },
  {
    "text": "and manage their master data we are also hiring so if that sounds",
    "start": "129759",
    "end": "134800"
  },
  {
    "text": "like something that would interest you don't hesitate to come by after a talk or go to our website",
    "start": "134800",
    "end": "142800"
  },
  {
    "text": "let me start by talking a little bit about why it's sometimes useful to try and zoom out and evaluate the tools that",
    "start": "142800",
    "end": "149840"
  },
  {
    "text": "you encounter and examine why they work the way they do",
    "start": "149840",
    "end": "155680"
  },
  {
    "text": "it is said that all models are wrong but some are useful we as developers constantly deal with",
    "start": "155680",
    "end": "162560"
  },
  {
    "text": "models most intimately in the case of our own internal mental models of how things",
    "start": "162560",
    "end": "168720"
  },
  {
    "text": "work i think it can be really useful to look at different fields industries",
    "start": "168720",
    "end": "175200"
  },
  {
    "text": "or areas within and try to spot connections between concepts across them",
    "start": "175200",
    "end": "181120"
  },
  {
    "text": "and find common models sometimes you find seemingly unread things which rhyme with each other",
    "start": "181120",
    "end": "188239"
  },
  {
    "text": "your models will never be perfect but that's not the point they help a lot with learning as new",
    "start": "188239",
    "end": "194400"
  },
  {
    "text": "things can be quickly mapped to your existing mental models kind of like when learning new languages",
    "start": "194400",
    "end": "201599"
  },
  {
    "text": "the more languages you know the easier it gets whether that is human languages or programming languages",
    "start": "201599",
    "end": "208959"
  },
  {
    "text": "the syntax might change but the underlying model often doesn't",
    "start": "208959",
    "end": "214560"
  },
  {
    "text": "it allows one to think a bit more clearly about things especially when the brain fog sets in in a particularly long",
    "start": "214560",
    "end": "221360"
  },
  {
    "text": "teams meeting the desired state model i want to describe in this talk",
    "start": "221360",
    "end": "227440"
  },
  {
    "text": "can be found in common tools and libraries within front-end web development back in the web development",
    "start": "227440",
    "end": "233280"
  },
  {
    "text": "databases infrastructure graphical user interfaces and others",
    "start": "233280",
    "end": "238480"
  },
  {
    "text": "it's a model of an abstraction but it's closely tied to the notion of an interface",
    "start": "238480",
    "end": "244159"
  },
  {
    "text": "as the abstraction fundamentally changes how we as developers or our users or",
    "start": "244159",
    "end": "250159"
  },
  {
    "text": "other systems interact with the system but what even",
    "start": "250159",
    "end": "255200"
  },
  {
    "text": "is an abstraction the authors of this wonderful book concepts techniques and models of",
    "start": "255200",
    "end": "261040"
  },
  {
    "text": "computer programming define it as any tool or device which solves a",
    "start": "261040",
    "end": "267040"
  },
  {
    "text": "particular problem that's a very general and correct definition but i especially like the take of joel",
    "start": "267040",
    "end": "274160"
  },
  {
    "text": "spalsky who simply states that abstractions are pretending",
    "start": "274160",
    "end": "279199"
  },
  {
    "text": "he says what's a string library it's a way to pretend that computers can",
    "start": "279199",
    "end": "284479"
  },
  {
    "text": "manipulate strings just as easily as they can manipulate numbers",
    "start": "284479",
    "end": "289600"
  },
  {
    "text": "what is a file system it's a way to pretend that the hard drive isn't really a bunch of spinning",
    "start": "289600",
    "end": "296160"
  },
  {
    "text": "magnetic platters which can store bits at certain locations but rather",
    "start": "296160",
    "end": "302160"
  },
  {
    "text": "a hierarchical system of folders within folders containing individual files",
    "start": "302160",
    "end": "308320"
  },
  {
    "text": "which consist of strings of bytes abstractions are central to what we do",
    "start": "308320",
    "end": "314800"
  },
  {
    "text": "i find that the most difficult work for me but also the most rewarding is not",
    "start": "314800",
    "end": "320320"
  },
  {
    "text": "writing programs but rather designing abstractions programming a computer",
    "start": "320320",
    "end": "326080"
  },
  {
    "text": "is primarily designing and using abstractions to achieve new goals",
    "start": "326080",
    "end": "331759"
  },
  {
    "text": "it's exciting when you can build something which hides away some of the underlying complexity",
    "start": "331759",
    "end": "337280"
  },
  {
    "text": "and presents a simpler interface for whoever or whatever is using your system",
    "start": "337280",
    "end": "343600"
  },
  {
    "text": "this was all rather abstract so let's get to an example from everyday life",
    "start": "343600",
    "end": "349360"
  },
  {
    "text": "consider an ordinary elevator you come up to it and you see two",
    "start": "349360",
    "end": "354880"
  },
  {
    "text": "buttons with arrows pointing up and down i don't know about you but growing up my",
    "start": "354880",
    "end": "360800"
  },
  {
    "text": "brain always interpreted the up and down arrows as i want the elevator to go up",
    "start": "360800",
    "end": "366639"
  },
  {
    "text": "and i want the elevator to go down instead of i want to go up and i want to go down once i get on the elevator",
    "start": "366639",
    "end": "374240"
  },
  {
    "text": "in other words i wanted to directly control the cabin",
    "start": "374240",
    "end": "379280"
  },
  {
    "text": "to this day it sometimes takes a little bit of my mental capacity to remember this",
    "start": "379280",
    "end": "385120"
  },
  {
    "text": "to a person coming to an elevator what do these buttons represent they are the elevator's interface",
    "start": "385120",
    "end": "392240"
  },
  {
    "text": "a device which allows the user to communicate with the system we could also think of a user as just",
    "start": "392240",
    "end": "399120"
  },
  {
    "text": "another system and thus arrive at a generalized definition of an interface as",
    "start": "399120",
    "end": "404960"
  },
  {
    "text": "any point where two systems interact now my possible confusion could stem from",
    "start": "404960",
    "end": "410479"
  },
  {
    "text": "the fact that an arrow pointing somewhere can both mean i want to go there and i want this thing to go there",
    "start": "410479",
    "end": "418319"
  },
  {
    "text": "and there's probably not many people who share this confusion but let's ignore the question of",
    "start": "418319",
    "end": "424800"
  },
  {
    "text": "interpreting the user interface and try to compare the two approaches as if they were both entirely valid",
    "start": "424800",
    "end": "432960"
  },
  {
    "text": "what could we call these two approaches in my kid brain approach um i wanted to",
    "start": "435440",
    "end": "441280"
  },
  {
    "text": "tell the machine exactly what to do in other words how to achieve what i wanted to do",
    "start": "441280",
    "end": "447840"
  },
  {
    "text": "i wanted to give it commands someone with knowledge of latin would then maybe suggest we call this an imperative",
    "start": "447840",
    "end": "454560"
  },
  {
    "text": "approach in the other approach we simply tell the machine what we want to do and we let it figure",
    "start": "454560",
    "end": "461280"
  },
  {
    "text": "it out we declare what we want so maybe we could call it a declarative",
    "start": "461280",
    "end": "467039"
  },
  {
    "text": "approach using an imperative interface we tell the machine exactly how to do",
    "start": "467039",
    "end": "473599"
  },
  {
    "text": "what we want how to get to our floor using a declarative interface we just",
    "start": "473599",
    "end": "479199"
  },
  {
    "text": "tell it what we want to do it then runs a small piece of logic that",
    "start": "479199",
    "end": "484960"
  },
  {
    "text": "determines how to actually move the elevator that piece of logic has to account for",
    "start": "484960",
    "end": "490639"
  },
  {
    "text": "several things such as where the elevator is right now which floor the caller is on and so on",
    "start": "490639",
    "end": "498000"
  },
  {
    "text": "if the elevator is above us it needs to go down if it's below us it needs to go up",
    "start": "498000",
    "end": "504960"
  },
  {
    "text": "using an imperative interface it's actually us who would be responsible for figuring",
    "start": "504960",
    "end": "510639"
  },
  {
    "text": "this out to do that we need to be able to obtain the information about where the elevator",
    "start": "510639",
    "end": "516800"
  },
  {
    "text": "is which might be potentially provided for us with a display",
    "start": "516800",
    "end": "522080"
  },
  {
    "text": "though that's not always the case which quickly disproves the validity of my kid brain approach",
    "start": "522080",
    "end": "527839"
  },
  {
    "text": "only having this piece of state in mind can we decide what command we give to",
    "start": "527839",
    "end": "533200"
  },
  {
    "text": "the machine in the declarative approach we don't need to know anything about the current",
    "start": "533200",
    "end": "539600"
  },
  {
    "text": "state of the elevator note that in my example when using a",
    "start": "539600",
    "end": "546000"
  },
  {
    "text": "declarative interface we are actually providing the elevator with two pieces of information",
    "start": "546000",
    "end": "551760"
  },
  {
    "text": "we want to get on the elevator wherever it is right now and also that we want to go up or go",
    "start": "551760",
    "end": "557440"
  },
  {
    "text": "down once we get on it let's simplify our example for a second",
    "start": "557440",
    "end": "563839"
  },
  {
    "text": "by separating these two concerns and focus only on the first one",
    "start": "563839",
    "end": "569279"
  },
  {
    "text": "we signal that we want to get on the elevator in such a case all we need is a single",
    "start": "569279",
    "end": "574959"
  },
  {
    "text": "button right and simple elevators like that of course exist we went from two buttons to a single one",
    "start": "574959",
    "end": "582640"
  },
  {
    "text": "what does that imply it implies we have less control",
    "start": "582640",
    "end": "587920"
  },
  {
    "text": "counter to that the imperative interface gives you a higher degree of control you",
    "start": "587920",
    "end": "593360"
  },
  {
    "text": "can make the elevator go up or go down regardless of where you currently stand",
    "start": "593360",
    "end": "599440"
  },
  {
    "text": "again not that it makes that much of a sense in the context of normal everyday",
    "start": "599440",
    "end": "604800"
  },
  {
    "text": "elevators but you could conceivably do it the declarative approach gives you in a",
    "start": "604800",
    "end": "610240"
  },
  {
    "text": "certain way less control the elevator always just goes to us",
    "start": "610240",
    "end": "616000"
  },
  {
    "text": "however you probably see that that's not the full picture",
    "start": "616000",
    "end": "621120"
  },
  {
    "text": "what my kid brain didn't really think about at all when seeing the elevator buttons is that",
    "start": "621200",
    "end": "626880"
  },
  {
    "text": "the entire point of an elevator is that it can service multiple floors",
    "start": "626880",
    "end": "632640"
  },
  {
    "text": "the elevator interface isn't just the buttons on our floor it's buttons on all the floors and also",
    "start": "632640",
    "end": "638720"
  },
  {
    "text": "the buttons inside the actual elevator cabin once you have the full picture",
    "start": "638720",
    "end": "645040"
  },
  {
    "text": "you see that the imperative approach would never work how would you deal with multiple people",
    "start": "645040",
    "end": "650399"
  },
  {
    "text": "controlling the cabin at the same time concurrently what if you weren't quick enough and",
    "start": "650399",
    "end": "656320"
  },
  {
    "text": "from the time you looked on the screen to pushing the button the elevator just",
    "start": "656320",
    "end": "661360"
  },
  {
    "text": "whisked by you and you sent it further away well if two people on different floors",
    "start": "661360",
    "end": "666880"
  },
  {
    "text": "just kept mashing opposite inputs making the elevator essentially oscillate in place",
    "start": "666880",
    "end": "673040"
  },
  {
    "text": "what the declarative approach takes away in control it gives back in being able to fix these",
    "start": "673040",
    "end": "679839"
  },
  {
    "text": "kinds of problems for example we can simply use a first come first",
    "start": "679839",
    "end": "686240"
  },
  {
    "text": "serve principle to eventually handle all the people on the different floors",
    "start": "686240",
    "end": "691519"
  },
  {
    "text": "based on the time when they press the button but this isn't very efficient",
    "start": "691519",
    "end": "698560"
  },
  {
    "text": "we know that if people from multiple floors want to go in the same direction",
    "start": "698560",
    "end": "703600"
  },
  {
    "text": "we should just stop on the way well what if the user told us beforehand",
    "start": "703600",
    "end": "708959"
  },
  {
    "text": "where they want to go then we can optimize the operation of the elevator",
    "start": "708959",
    "end": "714399"
  },
  {
    "text": "and take on more people that need to go down when the cabin is going down and vice versa",
    "start": "714399",
    "end": "720240"
  },
  {
    "text": "you could call this piece of information a domain specific parameter or something like that",
    "start": "720240",
    "end": "726079"
  },
  {
    "text": "in the end that's why there are two buttons and that's why they symbolize where we want to go",
    "start": "726079",
    "end": "732800"
  },
  {
    "text": "and not where we want to go and not where we want the cabin to go right now",
    "start": "732800",
    "end": "737839"
  },
  {
    "text": "in some very tall buildings you can even choose the exact floor you want to go to before even boarding",
    "start": "737839",
    "end": "744000"
  },
  {
    "text": "the cabin which allows for further optimization of the operation",
    "start": "744000",
    "end": "749839"
  },
  {
    "text": "the point is that by taking away imperative control and adding domain specific parameters",
    "start": "750160",
    "end": "756880"
  },
  {
    "text": "we are able to optimize the operation quite a lot the commands to the electric motor can",
    "start": "756880",
    "end": "762959"
  },
  {
    "text": "be cued reordered and so on it gives us the ability to make the",
    "start": "762959",
    "end": "768079"
  },
  {
    "text": "elevator work from multiple floors and multiple people using it concurrently",
    "start": "768079",
    "end": "774880"
  },
  {
    "text": "it allows us to build better and better optimizations and completely hide the mechanics of the",
    "start": "774880",
    "end": "780399"
  },
  {
    "text": "underlying system note that the elevator is just keeping",
    "start": "780399",
    "end": "786639"
  },
  {
    "text": "on doing the same thing it's going up or going down stopping at this or that floor",
    "start": "786639",
    "end": "793040"
  },
  {
    "text": "so something inside has to have direct imperative control of the elevator",
    "start": "793040",
    "end": "798560"
  },
  {
    "text": "otherwise it wouldn't matter that we want to go somewhere it just wouldn't move",
    "start": "798560",
    "end": "803839"
  },
  {
    "text": "a way i like to think about this is that the declarative interface in a way wraps around the imperative",
    "start": "803839",
    "end": "810160"
  },
  {
    "text": "interface this wrapping is just really another word for abstraction",
    "start": "810160",
    "end": "816639"
  },
  {
    "text": "it is this type of abstraction that i see everywhere around me we could call this abstraction desired",
    "start": "816639",
    "end": "823120"
  },
  {
    "text": "state we give the system our desired state we want the elevator on our floor",
    "start": "823120",
    "end": "829120"
  },
  {
    "text": "and let the system take care of the process of bringing the actual state of the elevator in line",
    "start": "829120",
    "end": "835519"
  },
  {
    "text": "with our desired state in order to do so it must be able to",
    "start": "835519",
    "end": "840560"
  },
  {
    "text": "query the underlying system to obtain the current state compare or diff it to",
    "start": "840560",
    "end": "846480"
  },
  {
    "text": "the desired state and issue commands to it which updates the actual state accordingly",
    "start": "846480",
    "end": "854320"
  },
  {
    "text": "in order to differentiate between the various words let's use the verb apply",
    "start": "854399",
    "end": "859519"
  },
  {
    "text": "for the act of giving the desired state to our system let's now generalize these principles",
    "start": "859519",
    "end": "868000"
  },
  {
    "text": "a desired state system wraps an underlying api or system which has an",
    "start": "868000",
    "end": "873680"
  },
  {
    "text": "imperative mutable interface and allows its user to specify a desired",
    "start": "873680",
    "end": "878959"
  },
  {
    "text": "state for this underlying system the wrapper is then responsible",
    "start": "878959",
    "end": "884480"
  },
  {
    "text": "for figuring out the actual state of the underlying system comparing it to the desired one",
    "start": "884480",
    "end": "892000"
  },
  {
    "text": "that is given by the user and figuring out how to apply the necessary changes to bring the actual",
    "start": "892000",
    "end": "898480"
  },
  {
    "text": "state in line with the desired one the part in the middle of this diagram",
    "start": "898480",
    "end": "906160"
  },
  {
    "text": "where it goes through this loop of observing the underlying system comparing its actual state and acting on",
    "start": "906160",
    "end": "912720"
  },
  {
    "text": "it accordingly is called reconciliation",
    "start": "912720",
    "end": "917360"
  },
  {
    "text": "as i mentioned in the example we can think of this abstraction in several different ways",
    "start": "917760",
    "end": "925240"
  },
  {
    "text": "for one as a declarative interface wrapping over an imperative interface",
    "start": "927440",
    "end": "932880"
  },
  {
    "text": "an interface where the user simply states what they want to do is going to be simpler",
    "start": "932880",
    "end": "938880"
  },
  {
    "text": "it can also be beneficial by restricting the surface of the api and steering the user",
    "start": "938880",
    "end": "945519"
  },
  {
    "text": "into some wanted patterns of usage many tools also utilize the fact that",
    "start": "945519",
    "end": "951360"
  },
  {
    "text": "desired state can be version controlled which aids in testability and auditability",
    "start": "951360",
    "end": "958720"
  },
  {
    "text": "we can also think of it as a stateless interface wrapping over a stateful interface",
    "start": "958720",
    "end": "966399"
  },
  {
    "text": "but why do we even want to minimize having to keep track of state it makes systems more understandable and",
    "start": "966399",
    "end": "973199"
  },
  {
    "text": "testable the api becomes simpler and easier to maintain which means it becomes more reliable",
    "start": "973199",
    "end": "980880"
  },
  {
    "text": "being able to reason about effects of changes to a particular system",
    "start": "980880",
    "end": "986079"
  },
  {
    "text": "is extremely important particularly when dealing with concurrency",
    "start": "986079",
    "end": "991920"
  },
  {
    "text": "another way of looking at it is that we are wrapping an api with mutable semantics",
    "start": "992160",
    "end": "998160"
  },
  {
    "text": "with an api with immutable semantics in some cases this abstraction gives us",
    "start": "998160",
    "end": "1004560"
  },
  {
    "text": "the ability to treat our underlying system as an immutable object which",
    "start": "1004560",
    "end": "1010160"
  },
  {
    "text": "cannot change if something has indeed changed we can think of it just as an entirely new",
    "start": "1010160",
    "end": "1015920"
  },
  {
    "text": "object this again helps with reasoning about effects of changes",
    "start": "1015920",
    "end": "1022880"
  },
  {
    "text": "these are just three of the many possible axes that we can use to analyze a desired state system",
    "start": "1022959",
    "end": "1030319"
  },
  {
    "text": "and it's useful to keep them in mind as we go through some of these examples",
    "start": "1030319",
    "end": "1036480"
  },
  {
    "text": "let's first look at react which uses a somewhat simplified version of a desired",
    "start": "1037120",
    "end": "1042319"
  },
  {
    "text": "state system react is a popular javascript library for building user interfaces",
    "start": "1042319",
    "end": "1049039"
  },
  {
    "text": "it lets you define how you want your application to look and behave all within javascript",
    "start": "1049039",
    "end": "1055679"
  },
  {
    "text": "you define your app as a tree of composable components which serve as the input to react",
    "start": "1055679",
    "end": "1062400"
  },
  {
    "text": "the tree defines the structure of the application while the look",
    "start": "1062400",
    "end": "1067840"
  },
  {
    "text": "is controlled by the various properties applied to the components of the tree and the behavior might be controlled by",
    "start": "1067840",
    "end": "1074400"
  },
  {
    "text": "various callback functions which trigger on user inputs or some phase of the component life cycle",
    "start": "1074400",
    "end": "1081360"
  },
  {
    "text": "the leaves of this tree represent the actual html elements to be displayed",
    "start": "1081360",
    "end": "1087520"
  },
  {
    "text": "the tree is essentially just a giant nested call of react's create element function the first argument to this",
    "start": "1087520",
    "end": "1094000"
  },
  {
    "text": "function is the type of the node that we want to use this can either be a component which was",
    "start": "1094000",
    "end": "1099919"
  },
  {
    "text": "defined by us or a leaf node with a specific html element",
    "start": "1099919",
    "end": "1105440"
  },
  {
    "text": "the second argument are the properties we want to send down to this component and the third argument specifies the",
    "start": "1105440",
    "end": "1112160"
  },
  {
    "text": "children that the component node in the tree should have",
    "start": "1112160",
    "end": "1117600"
  },
  {
    "text": "this interface makes components very composable as you are able to quite",
    "start": "1117919",
    "end": "1123280"
  },
  {
    "text": "dynamically pass data callbacks and even other components from a parent component to a child",
    "start": "1123280",
    "end": "1129520"
  },
  {
    "text": "component in the tree this allows react to express many useful design patterns",
    "start": "1129520",
    "end": "1136960"
  },
  {
    "text": "in order to save typing and brings the syntax a bit more in line to actual html",
    "start": "1136960",
    "end": "1142480"
  },
  {
    "text": "many people use a syntactic sugar called jsx which just makes the function calls",
    "start": "1142480",
    "end": "1147600"
  },
  {
    "text": "a bit more compact",
    "start": "1147600",
    "end": "1151160"
  },
  {
    "text": "react wraps around the browser document object model or dom which is a deeply",
    "start": "1152799",
    "end": "1159440"
  },
  {
    "text": "imperative api present in all web browsers this api lets us programmatically alter",
    "start": "1159440",
    "end": "1165679"
  },
  {
    "text": "the contents of the page it represents the html page as a tree of nodes with attributes properties event",
    "start": "1165679",
    "end": "1172720"
  },
  {
    "text": "handlers and offers methods for querying creating new elements",
    "start": "1172720",
    "end": "1177760"
  },
  {
    "text": "appending new children in the tree and so on react's component 3 has a similar",
    "start": "1177760",
    "end": "1183200"
  },
  {
    "text": "structure let's now look at react through the lens of a desired state system",
    "start": "1183200",
    "end": "1190880"
  },
  {
    "text": "when the page loads some initial desired state in the form of a component tree is",
    "start": "1190880",
    "end": "1196080"
  },
  {
    "text": "given to react to be rendered internally react keeps a representation",
    "start": "1196080",
    "end": "1201840"
  },
  {
    "text": "of this tree in memory and whenever the desired state changes",
    "start": "1201840",
    "end": "1207280"
  },
  {
    "text": "based on the user input or some other triggers it compares the old state to the new",
    "start": "1207280",
    "end": "1212880"
  },
  {
    "text": "state this internal representation used to be called virtual dom though that name isn't used much anymore",
    "start": "1212880",
    "end": "1221840"
  },
  {
    "text": "the comparison of states generates a sequence of operations that need to be performed on the actual browser dom",
    "start": "1221840",
    "end": "1229440"
  },
  {
    "text": "generic algorithms for generating the minimum number of operations needed to",
    "start": "1229440",
    "end": "1234720"
  },
  {
    "text": "transform one tree into another have the complexity on the in the order of o n cubed",
    "start": "1234720",
    "end": "1241120"
  },
  {
    "text": "where n is the number of elements in the tree however that's way too slow for react",
    "start": "1241120",
    "end": "1248000"
  },
  {
    "text": "react has to do the stiffing really fast and so it uses a series of heuristics to",
    "start": "1248000",
    "end": "1254240"
  },
  {
    "text": "compute the least number of operations necessary this brings the time complexity down to",
    "start": "1254240",
    "end": "1260960"
  },
  {
    "text": "on these heuristics rely heavily on two assumptions first",
    "start": "1260960",
    "end": "1266799"
  },
  {
    "text": "two elements of different types will produce different subtrees and second",
    "start": "1266799",
    "end": "1272720"
  },
  {
    "text": "the developer can hint at which child elements might not change across different renders with a specific",
    "start": "1272720",
    "end": "1279760"
  },
  {
    "text": "specific property called a key this is needed for lists and other",
    "start": "1279760",
    "end": "1284880"
  },
  {
    "text": "places where ordering is important react also relies on the fact",
    "start": "1284880",
    "end": "1290400"
  },
  {
    "text": "that the properties passed down to the children in the tree are immutable",
    "start": "1290400",
    "end": "1295679"
  },
  {
    "text": "it assumes that when an object's contents change so does the reference to this object",
    "start": "1295679",
    "end": "1302320"
  },
  {
    "text": "react can then do some simple reference comparisons without doing deep diffing and",
    "start": "1302320",
    "end": "1307760"
  },
  {
    "text": "re-rendering components when their properties change this keeps the ui responsive",
    "start": "1307760",
    "end": "1314799"
  },
  {
    "text": "the reason i stress this is because the structure of your state and how difficult it is to figure out",
    "start": "1314799",
    "end": "1321600"
  },
  {
    "text": "how to change it when two versions of it are compared can be one of the crucial parts when",
    "start": "1321600",
    "end": "1327039"
  },
  {
    "text": "building a desired state system the reason react computes the minimal",
    "start": "1327039",
    "end": "1332720"
  },
  {
    "text": "operations necessary is because operations on the dom are really slow",
    "start": "1332720",
    "end": "1337760"
  },
  {
    "text": "however the entire diffic mechanism is really an implementation detail",
    "start": "1337760",
    "end": "1342960"
  },
  {
    "text": "and the react could just choose to reconstruct your entire tree from scratch on every render",
    "start": "1342960",
    "end": "1349200"
  },
  {
    "text": "if it was performant now i want to get to the point that react is a simplified desired state",
    "start": "1349200",
    "end": "1357280"
  },
  {
    "text": "system according to our model let me therefore digress for a second to",
    "start": "1357280",
    "end": "1362640"
  },
  {
    "text": "some basics of control theory we say that a closed loop system is one",
    "start": "1362640",
    "end": "1370080"
  },
  {
    "text": "that is interconnected in a cycle if system one gives signals to system two",
    "start": "1370080",
    "end": "1376640"
  },
  {
    "text": "the outputs of system two are in some way a part of the input to system one",
    "start": "1376640",
    "end": "1382880"
  },
  {
    "text": "this you might know is called feedback a key feature of feedback",
    "start": "1382880",
    "end": "1389120"
  },
  {
    "text": "is that it provides robustness to uncertainty closed-loop systems automatically",
    "start": "1389120",
    "end": "1395039"
  },
  {
    "text": "achieve and maintain the desired output condition by comparing it with the",
    "start": "1395039",
    "end": "1400080"
  },
  {
    "text": "desired with the actual condition while feedback has many advantages",
    "start": "1400080",
    "end": "1406320"
  },
  {
    "text": "it also brings a set of drawbacks if not designed properly the system",
    "start": "1406320",
    "end": "1411919"
  },
  {
    "text": "could exhibit instability this could be in the form of positive feedback like when a microphone's",
    "start": "1411919",
    "end": "1418799"
  },
  {
    "text": "amplifier is turned up way too high in a room furthermore feedback inherently couples",
    "start": "1418799",
    "end": "1424960"
  },
  {
    "text": "different parts of the system on the other hand in an open loop system",
    "start": "1424960",
    "end": "1431919"
  },
  {
    "text": "this interconnection is severed while react is a desired state system",
    "start": "1431919",
    "end": "1436960"
  },
  {
    "text": "within our model it's actually an open loop system react does not keep rechecking the",
    "start": "1436960",
    "end": "1443840"
  },
  {
    "text": "current state of the browser dom to see if it's in the correct shape",
    "start": "1443840",
    "end": "1449279"
  },
  {
    "text": "for one that would probably be prohibitively slow it also just doesn't need to",
    "start": "1449279",
    "end": "1455600"
  },
  {
    "text": "unlike many other desired state systems react operates with the assumption that it's the only thing",
    "start": "1455600",
    "end": "1462400"
  },
  {
    "text": "touching its domain it generally assumes that there is no other library or person",
    "start": "1462400",
    "end": "1469520"
  },
  {
    "text": "modifying the page under its feet you can test this yourself using",
    "start": "1469520",
    "end": "1474640"
  },
  {
    "text": "developer tools in the browser if you modify an html element controlled",
    "start": "1474640",
    "end": "1480240"
  },
  {
    "text": "by react the library will not try to overwrite your modification",
    "start": "1480240",
    "end": "1485360"
  },
  {
    "text": "unless a parent of the changed element gets re-rendered and the entire subtree gets destroyed",
    "start": "1485360",
    "end": "1493039"
  },
  {
    "text": "a nice thing about react is that it's built in a modular fashion the part which talks to the dom itself",
    "start": "1493919",
    "end": "1500320"
  },
  {
    "text": "is a separate module called react dom and can be replaced with different rendering targets which react called",
    "start": "1500320",
    "end": "1507200"
  },
  {
    "text": "hosts a different host is used for example in the mobile application framework react",
    "start": "1507200",
    "end": "1513760"
  },
  {
    "text": "native when writing react native you still specify the user interface of your app",
    "start": "1513760",
    "end": "1519679"
  },
  {
    "text": "as a tree of components however instead of talking directly to the dom",
    "start": "1519679",
    "end": "1525600"
  },
  {
    "text": "react talks to the native apis of mobile operating systems",
    "start": "1525600",
    "end": "1530799"
  },
  {
    "text": "it's also relatively easy to extend react with custom rendering targets yourself",
    "start": "1530799",
    "end": "1538000"
  },
  {
    "text": "a more recent addition to react's api are hooks they are an interesting design pattern",
    "start": "1538320",
    "end": "1544720"
  },
  {
    "text": "that allows developers to manage state and also side effects within the components in a declarative",
    "start": "1544720",
    "end": "1550880"
  },
  {
    "text": "way i really recommend reading this blog post by dan abramov",
    "start": "1550880",
    "end": "1556799"
  },
  {
    "text": "who works on the react team where he wraps an inherently imperative api namely the browser's set interval method",
    "start": "1556799",
    "end": "1564400"
  },
  {
    "text": "with a declarative hook let's now go a bit further up the stack",
    "start": "1564400",
    "end": "1571840"
  },
  {
    "text": "terraform terraform is an open source infrastructure as code tool",
    "start": "1575520",
    "end": "1580799"
  },
  {
    "text": "which has the goal of providing one workflow to provision all of your infrastructure",
    "start": "1580799",
    "end": "1585919"
  },
  {
    "text": "it lets you specify parts of your infrastructure most often that means the different",
    "start": "1585919",
    "end": "1590960"
  },
  {
    "text": "types and instances of resources in your cloud provider plus their configuration",
    "start": "1590960",
    "end": "1597279"
  },
  {
    "text": "as text files written in terraform's native language called hcl",
    "start": "1597279",
    "end": "1605600"
  },
  {
    "text": "with these configuration files you can perform what's called a terraform plan which lets you check whether the",
    "start": "1605600",
    "end": "1612159"
  },
  {
    "text": "execution plan for a configuration matches your expectations before",
    "start": "1612159",
    "end": "1618559"
  },
  {
    "text": "you start provisioning or changing your actual infrastructure when you first run terraform",
    "start": "1618559",
    "end": "1624960"
  },
  {
    "text": "it creates a file called tf state which stores the current state of your resources",
    "start": "1624960",
    "end": "1631840"
  },
  {
    "text": "every time you want to make changes to it terraform will go and obtain the current state of your actual resources",
    "start": "1631840",
    "end": "1639039"
  },
  {
    "text": "and report the changes your new plan will make you can then check if your changes are",
    "start": "1639039",
    "end": "1644640"
  },
  {
    "text": "correct and apply them in the resulting diff",
    "start": "1644640",
    "end": "1650480"
  },
  {
    "text": "you can then see what changes your new plan would make but also whether your",
    "start": "1650480",
    "end": "1656000"
  },
  {
    "text": "actual state has drifted from your saved tf state in other words unlike react",
    "start": "1656000",
    "end": "1663120"
  },
  {
    "text": "terraform is a closed loop system ultimately this is because it's optimizing for an entirely different",
    "start": "1663120",
    "end": "1669279"
  },
  {
    "text": "problem while react needs to have fast updates and can",
    "start": "1669279",
    "end": "1674799"
  },
  {
    "text": "assume that no one else touches its domain terraform can spend much more time and",
    "start": "1674799",
    "end": "1680240"
  },
  {
    "text": "often does figuring out the difference to the actual state it crucially cannot assume",
    "start": "1680240",
    "end": "1687200"
  },
  {
    "text": "that the resources it manages are left untouched",
    "start": "1687200",
    "end": "1691919"
  },
  {
    "text": "much like you can extend react with different hosts terraform has a collection of plugins called providers",
    "start": "1692399",
    "end": "1699279"
  },
  {
    "text": "that you can use a provider is responsible for understanding the api",
    "start": "1699279",
    "end": "1705600"
  },
  {
    "text": "and the interactions with some kind of service and exposing the resources based on that",
    "start": "1705600",
    "end": "1710720"
  },
  {
    "text": "api and of course you can create your own unlike react terraform has an added",
    "start": "1710720",
    "end": "1717520"
  },
  {
    "text": "complication of how to define what actually is a resource and what is its configuration",
    "start": "1717520",
    "end": "1724559"
  },
  {
    "text": "a configuration could be specified as its own resource or it can be just a part of the parent",
    "start": "1724559",
    "end": "1731440"
  },
  {
    "text": "this can vary between providers and the many resource types even support both",
    "start": "1731440",
    "end": "1737520"
  },
  {
    "text": "one of the harder parts of terraform is managing this coupling",
    "start": "1737520",
    "end": "1742880"
  },
  {
    "text": "compared to some other compared to some configuration management tools like chef or salt stack",
    "start": "1743520",
    "end": "1750559"
  },
  {
    "text": "terraform works on the principle of immutable deployments when you change your plan",
    "start": "1750559",
    "end": "1755919"
  },
  {
    "text": "your resources get recreated with the correct state applied this means that",
    "start": "1755919",
    "end": "1761600"
  },
  {
    "text": "operations can be inherently destructive making a configuration change on a",
    "start": "1761600",
    "end": "1766960"
  },
  {
    "text": "virtual machine could mean destroying the original vm and just creating an entirely new one",
    "start": "1766960",
    "end": "1773440"
  },
  {
    "text": "which operations are destructive and which are not are defined by the",
    "start": "1773440",
    "end": "1778840"
  },
  {
    "text": "provider on the other hand with mutable deployments you are much more likely to get into a",
    "start": "1778840",
    "end": "1785360"
  },
  {
    "text": "situation where your actual state starts to drift away from your desired state",
    "start": "1785360",
    "end": "1790960"
  },
  {
    "text": "in other words changes to terraform state are idempotent if you keep reapplying the same state",
    "start": "1790960",
    "end": "1798080"
  },
  {
    "text": "again and again you just have the same state if you keep",
    "start": "1798080",
    "end": "1803679"
  },
  {
    "text": "having to if you keep applying a state which creates 10 virtual machine you always just end up with 10 virtual",
    "start": "1803679",
    "end": "1810159"
  },
  {
    "text": "machines item potency is a crucial property of a desired state system",
    "start": "1810159",
    "end": "1816960"
  },
  {
    "text": "let's now shift gears a little bit from provisioning to container orchestration",
    "start": "1816960",
    "end": "1822880"
  },
  {
    "text": "you've probably all heard of kubernetes it's an open source system created by google",
    "start": "1822880",
    "end": "1828320"
  },
  {
    "text": "which is used for automating the deployment scaling and management of containerized applications",
    "start": "1828320",
    "end": "1835200"
  },
  {
    "text": "in order to achieve its promise it arguably takes the idea of a desired state system to its highest level",
    "start": "1835200",
    "end": "1843919"
  },
  {
    "text": "kubernetes manages containerized workflows inside a cluster of machines",
    "start": "1844480",
    "end": "1849840"
  },
  {
    "text": "which are called nodes these can be physical or virtual machines the smallest units of work in the system",
    "start": "1849840",
    "end": "1857519"
  },
  {
    "text": "are called pods and they can be scheduled to run on these nodes ultimately a particular container with",
    "start": "1857519",
    "end": "1864559"
  },
  {
    "text": "our code is going to be running somewhere on one of these pots",
    "start": "1864559",
    "end": "1869840"
  },
  {
    "text": "pods are organized in several different kinds of resources most often the kind called deployments",
    "start": "1869840",
    "end": "1876000"
  },
  {
    "text": "but their networking can be defined in a different type of resource called a service and many other types exist as well",
    "start": "1876000",
    "end": "1883679"
  },
  {
    "text": "custom ones can also be defined kubernetes itself runs on the side of",
    "start": "1883679",
    "end": "1889120"
  },
  {
    "text": "the nodes as a collection of services called the control plane the control plane is responsible for",
    "start": "1889120",
    "end": "1896080"
  },
  {
    "text": "serving the api keeping track of resources and other tasks which are necessary to",
    "start": "1896080",
    "end": "1901760"
  },
  {
    "text": "keep the system running the cluster can be controlled by a",
    "start": "1901760",
    "end": "1907200"
  },
  {
    "text": "command line tool called cubectl which serves as the interface for kubernetes",
    "start": "1907200",
    "end": "1914080"
  },
  {
    "text": "while it also offers a sort of imperative like api the core of its use",
    "start": "1914080",
    "end": "1919600"
  },
  {
    "text": "is done using yaml configuration files which are then applied as a desired",
    "start": "1919600",
    "end": "1924960"
  },
  {
    "text": "state to the cluster we can then look at kubernetes through",
    "start": "1924960",
    "end": "1930799"
  },
  {
    "text": "the lens of our model similarly to terraform you give the system the desired state of",
    "start": "1930799",
    "end": "1936960"
  },
  {
    "text": "a particular resource in the cluster this time in the form of a yaml file",
    "start": "1936960",
    "end": "1942480"
  },
  {
    "text": "a component called a controller inside kubernetes then has the responsibility to bring the",
    "start": "1942480",
    "end": "1949600"
  },
  {
    "text": "actual state of the given resource in line with the desired state",
    "start": "1949600",
    "end": "1955840"
  },
  {
    "text": "unlike terraform this happens continuously if you try to delete one of the pod",
    "start": "1955840",
    "end": "1962960"
  },
  {
    "text": "replicas in a deployment which has three desired replicas stated kubernetes will",
    "start": "1962960",
    "end": "1969039"
  },
  {
    "text": "immediately try to spin up a new one likewise if a pod keeps just crashing",
    "start": "1969039",
    "end": "1974480"
  },
  {
    "text": "kubernetes is going to keep trying to run it as it tries to keep the actual state in line with the desired state",
    "start": "1974480",
    "end": "1983518"
  },
  {
    "text": "another interesting concept from control theory which comes up in a system like",
    "start": "1984080",
    "end": "1989440"
  },
  {
    "text": "this with continual desired state reconciliation is called hysteresis",
    "start": "1989440",
    "end": "1996000"
  },
  {
    "text": "hysteresis characterizes a system whose behavior does not only depend",
    "start": "1996000",
    "end": "2001760"
  },
  {
    "text": "on some input in time t but also on the history of this input",
    "start": "2001760",
    "end": "2007360"
  },
  {
    "text": "you can also think of it as adding some sort of artificial lag",
    "start": "2007360",
    "end": "2012399"
  },
  {
    "text": "to the dynamics of the system a widely used example of this is a",
    "start": "2012399",
    "end": "2017519"
  },
  {
    "text": "thermostat let's say that we want to set the thermostat",
    "start": "2017519",
    "end": "2022559"
  },
  {
    "text": "temperature to 20 degrees without hysteresis as soon as the temperature hits the desired state the",
    "start": "2022559",
    "end": "2029519"
  },
  {
    "text": "heating turns off but that means that very quickly the temperature goes back below 20 degrees",
    "start": "2029519",
    "end": "2037039"
  },
  {
    "text": "turning the heating back on the thermostat system starts oscillating and quickly turning the heating on and",
    "start": "2037039",
    "end": "2044159"
  },
  {
    "text": "off when we add hysteresis the thermostats wait until the",
    "start": "2044159",
    "end": "2049919"
  },
  {
    "text": "temperature is above let's say 22 degrees before turning the heating off",
    "start": "2049919",
    "end": "2055679"
  },
  {
    "text": "likewise the thermostat will wait until the temperature hits less than let's say 18 degrees",
    "start": "2055679",
    "end": "2061839"
  },
  {
    "text": "before turning the heating back on this ensures smoother operation and also",
    "start": "2061839",
    "end": "2067919"
  },
  {
    "text": "more reliable operation in kubernetes this co this concept comes",
    "start": "2067919",
    "end": "2073280"
  },
  {
    "text": "into play when it has to decide whether to move some workloads",
    "start": "2073280",
    "end": "2078560"
  },
  {
    "text": "away from a node whose computational resources are dwindling so called pod eviction",
    "start": "2078560",
    "end": "2084800"
  },
  {
    "text": "a soft grace period can be specified which means that kubernetes will wait",
    "start": "2084800",
    "end": "2090320"
  },
  {
    "text": "for a while before scheduling the pod away from the node because the resource constraints",
    "start": "2090320",
    "end": "2096800"
  },
  {
    "text": "might be a temporary situation this ensures that the state of the cluster is more predictable",
    "start": "2096800",
    "end": "2103440"
  },
  {
    "text": "and allows for smoother scheduling kubernetes is actually made up of many",
    "start": "2103440",
    "end": "2110720"
  },
  {
    "text": "of these controllers working together to bring the actual state close to the desired one",
    "start": "2110720",
    "end": "2119039"
  },
  {
    "text": "each controller can act upon one or more resource types",
    "start": "2120320",
    "end": "2125680"
  },
  {
    "text": "these controllers are actually often nested in a way a particular control loop that which runs inside this",
    "start": "2126000",
    "end": "2133599"
  },
  {
    "text": "component called the controller uses one kind of resource as its desired state",
    "start": "2133599",
    "end": "2139200"
  },
  {
    "text": "and has a different kind of resource which it manages to make that desired state happen",
    "start": "2139200",
    "end": "2146640"
  },
  {
    "text": "allow me now one more digression into the basics of control theory this one comes from circuit design and",
    "start": "2147040",
    "end": "2153440"
  },
  {
    "text": "cpu interrupts when one system needs to give another system some information over the wire",
    "start": "2153440",
    "end": "2160480"
  },
  {
    "text": "there are two options the first one is called edge triggered logic where system one simply pulses the",
    "start": "2160480",
    "end": "2167040"
  },
  {
    "text": "line with a brief high voltage spike the problem with this approach is that",
    "start": "2167040",
    "end": "2172400"
  },
  {
    "text": "system two might miss the signal if it's not listening at the time",
    "start": "2172400",
    "end": "2177680"
  },
  {
    "text": "the second option is what we call level triggered logic in this case system one brings the",
    "start": "2178079",
    "end": "2183680"
  },
  {
    "text": "voltage up and keeps it there until it's sure it's been registered by system 2.",
    "start": "2183680",
    "end": "2189119"
  },
  {
    "text": "this approach is more robust as system 2 can just check the state of the wire at any time",
    "start": "2189119",
    "end": "2196320"
  },
  {
    "text": "you can maybe see some parallels between this and something like event driven communication versus polling for changes",
    "start": "2196400",
    "end": "2204079"
  },
  {
    "text": "but let's get back to kubernetes controllers where react needs to optimize for fast",
    "start": "2204079",
    "end": "2210320"
  },
  {
    "text": "updates the browser dom kubernetes needs to optimize the observed part of our reconciliation loop",
    "start": "2210320",
    "end": "2219680"
  },
  {
    "text": "this is because at any point a huge number of controllers might need to ask for the state of",
    "start": "2219680",
    "end": "2226160"
  },
  {
    "text": "particular resources to continuously fall for this information in a distributed system",
    "start": "2226160",
    "end": "2233040"
  },
  {
    "text": "would be inefficient at scale therefore most controllers use a hybrid",
    "start": "2233040",
    "end": "2238079"
  },
  {
    "text": "approach between edge and level triggered logic called the list watch pattern",
    "start": "2238079",
    "end": "2244720"
  },
  {
    "text": "in this pattern the controllers first ask for the current state then they cache it",
    "start": "2244720",
    "end": "2251040"
  },
  {
    "text": "and they keep a stream of events open for immediate updates their cache",
    "start": "2251040",
    "end": "2257359"
  },
  {
    "text": "unlike a pure event stream this system is more robust to crashes and networking issues",
    "start": "2257359",
    "end": "2263599"
  },
  {
    "text": "as controllers can just reassert the state again at any time",
    "start": "2263599",
    "end": "2270200"
  },
  {
    "text": "now let's look at one more way of how we could describe the desired state model",
    "start": "2270720",
    "end": "2276400"
  },
  {
    "text": "which is a little bit different to the ones i mentioned so far we could think of it as wrapping",
    "start": "2276400",
    "end": "2284480"
  },
  {
    "text": "an interface of reference semantics with an interface which uses value",
    "start": "2284480",
    "end": "2290640"
  },
  {
    "text": "semantics what do i mean by that when we treat objects as values we",
    "start": "2290640",
    "end": "2296720"
  },
  {
    "text": "assume they cannot be changed we assume that they are immutable",
    "start": "2296720",
    "end": "2301839"
  },
  {
    "text": "by object in this case i mean just generally anything we work with some piece of data for",
    "start": "2301839",
    "end": "2308480"
  },
  {
    "text": "example when programming we don't have to worry about",
    "start": "2308480",
    "end": "2313920"
  },
  {
    "text": "the difference between the integer five and the integer four to which we added the integer one a bit",
    "start": "2313920",
    "end": "2320800"
  },
  {
    "text": "later five equals five either way it's the contents of the object in a way",
    "start": "2320800",
    "end": "2326960"
  },
  {
    "text": "which provide the object identity and not our reference to it",
    "start": "2326960",
    "end": "2332800"
  },
  {
    "text": "a desired state system you could think of it as just a collection of values which we",
    "start": "2332800",
    "end": "2338640"
  },
  {
    "text": "want to exist in the world instead of keeping track of the references to some browser dom objects",
    "start": "2338640",
    "end": "2345839"
  },
  {
    "text": "in react or containers in kubernetes or virtual machines in terraform",
    "start": "2345839",
    "end": "2351760"
  },
  {
    "text": "we can simply treat them as values values can't be changed so if we need",
    "start": "2351760",
    "end": "2357920"
  },
  {
    "text": "another one or make a change to one we simply create a new one",
    "start": "2357920",
    "end": "2363040"
  },
  {
    "text": "the underlying system ideally takes care of all the mutable logic underneath",
    "start": "2363040",
    "end": "2369839"
  },
  {
    "text": "in some way for example immutable strings in in a programming language",
    "start": "2369920",
    "end": "2375440"
  },
  {
    "text": "can just be thought of off as a desired state system where the compiler or the interpreter",
    "start": "2375440",
    "end": "2381599"
  },
  {
    "text": "makes sure to reconcile the value semantics with the underlying memory references in a performant way",
    "start": "2381599",
    "end": "2389839"
  },
  {
    "text": "doing this for complex objects of course is not easy at all and often it's not even possible",
    "start": "2389839",
    "end": "2397200"
  },
  {
    "text": "however myself i find it pretty fascinating trying to think about how we could treat something",
    "start": "2397200",
    "end": "2404319"
  },
  {
    "text": "like let's say a networking socket or a database or other inherently stateful",
    "start": "2404319",
    "end": "2409520"
  },
  {
    "text": "objects simply as a value let's finish off by listing some of the",
    "start": "2409520",
    "end": "2416400"
  },
  {
    "text": "considerations which you should keep in mind when designing a system like",
    "start": "2416400",
    "end": "2422839"
  },
  {
    "text": "this first of all you have to ask yourself the question",
    "start": "2422839",
    "end": "2428079"
  },
  {
    "text": "of whether it's necessary does it solve an actual real problem",
    "start": "2428079",
    "end": "2433680"
  },
  {
    "text": "adding abstractions always leads to more complexity under the hood and it's important to make the cost",
    "start": "2433680",
    "end": "2440640"
  },
  {
    "text": "benefit analysis of whether this extra complexity is worth it",
    "start": "2440640",
    "end": "2446319"
  },
  {
    "text": "a declarative api wrapping over an imperative api might seem a lot simpler to the people",
    "start": "2446319",
    "end": "2452800"
  },
  {
    "text": "using it but its internal complexity will always be higher",
    "start": "2452800",
    "end": "2458880"
  },
  {
    "text": "secondly is it useful for us to constrain what the user of our interface can and",
    "start": "2459200",
    "end": "2464800"
  },
  {
    "text": "cannot do in this way are we sure we want to give the user less control",
    "start": "2464800",
    "end": "2470640"
  },
  {
    "text": "and do we know exactly how we want to steer the api",
    "start": "2470640",
    "end": "2475599"
  },
  {
    "text": "third do we need an open or closed loop system in other words are we the only people in the sandbox",
    "start": "2475760",
    "end": "2483520"
  },
  {
    "text": "can we be sure that we are the only ones controlling the underlying api and that no one else is stepping on our",
    "start": "2483520",
    "end": "2489760"
  },
  {
    "text": "toes four do we need to solve",
    "start": "2489760",
    "end": "2495599"
  },
  {
    "text": "the situation that um there can be multiple concurrent updates happening to our interface",
    "start": "2495599",
    "end": "2501920"
  },
  {
    "text": "that might be from multiple users or multiple updates from the same user",
    "start": "2501920",
    "end": "2508079"
  },
  {
    "text": "how can we reconcile multiple conflicting desired states",
    "start": "2508079",
    "end": "2513760"
  },
  {
    "text": "five can a stateless interface and constraining the surface of the api",
    "start": "2514480",
    "end": "2519839"
  },
  {
    "text": "help us optimize the system in any way just like it allowed us to do that with",
    "start": "2519839",
    "end": "2525040"
  },
  {
    "text": "an elevator how do we deal with the fact that things",
    "start": "2525040",
    "end": "2530560"
  },
  {
    "text": "take time while our api may treat some object or resource as a",
    "start": "2530560",
    "end": "2536560"
  },
  {
    "text": "value inside of our system we might need to wait in order to create",
    "start": "2536560",
    "end": "2542480"
  },
  {
    "text": "it destroy it update it how is this communicated to the user and",
    "start": "2542480",
    "end": "2548640"
  },
  {
    "text": "does it need to be what's the structure of our states and",
    "start": "2548640",
    "end": "2554480"
  },
  {
    "text": "how quickly can we compare them this might or might not be a bottleneck depending on the structure",
    "start": "2554480",
    "end": "2560960"
  },
  {
    "text": "and the nature of the underlying api in the example of react this is definitely one of the",
    "start": "2560960",
    "end": "2566960"
  },
  {
    "text": "bottlenecks how fast is the underlying api itself",
    "start": "2566960",
    "end": "2573359"
  },
  {
    "text": "whether that's the observed part or the update part generally a desired state system is",
    "start": "2573359",
    "end": "2579839"
  },
  {
    "text": "always going to be in some way slower than just directly operating on the underlying imperative api",
    "start": "2579839",
    "end": "2587760"
  },
  {
    "text": "you will always need to weigh the performance hit against the benefits of using such an abstraction",
    "start": "2587760",
    "end": "2595280"
  },
  {
    "text": "how can we keep track which of the resources in the underlying api we control",
    "start": "2595760",
    "end": "2602079"
  },
  {
    "text": "this is especially important in a distributed system like kubernetes where many control loops run at the same",
    "start": "2602079",
    "end": "2609200"
  },
  {
    "text": "time and finally do we need to add any escape hatches to our interface",
    "start": "2609200",
    "end": "2616800"
  },
  {
    "text": "so that the user could potentially drop down to the imperative interface underneath if if they need",
    "start": "2616800",
    "end": "2623760"
  },
  {
    "text": "this might be for example for some performance reasons or simply for allowing the user higher",
    "start": "2623760",
    "end": "2629839"
  },
  {
    "text": "flexibility when using our api for example react",
    "start": "2629839",
    "end": "2634880"
  },
  {
    "text": "allows you to directly talk to the browser dom if you need to even though it's discouraged",
    "start": "2634880",
    "end": "2640240"
  },
  {
    "text": "occasionally it's necessary similarly kubernetes lets you drop down",
    "start": "2640240",
    "end": "2645359"
  },
  {
    "text": "directly into the shell of a running application inside the pod if you need to do something in there",
    "start": "2645359",
    "end": "2652640"
  },
  {
    "text": "to conclude in this talk i went through my view of what a desired",
    "start": "2656079",
    "end": "2661599"
  },
  {
    "text": "state system is and what are its central principles i showed you some examples of where it's",
    "start": "2661599",
    "end": "2667359"
  },
  {
    "text": "used and presented what i find are the important considerations you should keep in mind",
    "start": "2667359",
    "end": "2673760"
  },
  {
    "text": "when using this abstraction the ideas i presented in this talk are nothing new",
    "start": "2673760",
    "end": "2680560"
  },
  {
    "text": "and most of you have probably thought about these ideas in some capacity before",
    "start": "2680560",
    "end": "2685920"
  },
  {
    "text": "i hoped that by going through it in a bit more of a structured manner you now have a clear picture or mental model",
    "start": "2685920",
    "end": "2693920"
  },
  {
    "text": "which helps you in your work at the end of the day",
    "start": "2693920",
    "end": "2699040"
  },
  {
    "text": "the world around us presents us with a stateful interface we are limited by the fact that at the",
    "start": "2699040",
    "end": "2705040"
  },
  {
    "text": "bottom of all our programs sits a simple von neumann computer with a central processing unit a data store",
    "start": "2705040",
    "end": "2712319"
  },
  {
    "text": "and a connecting tube which can transmit a single word between cpu and the store",
    "start": "2712319",
    "end": "2718000"
  },
  {
    "text": "that's an inherently mutable and imperative interface but thanks to some of these abstractions",
    "start": "2718000",
    "end": "2724400"
  },
  {
    "text": "sometimes and in limited scope we can just pretend that's not the case to simplify our interfaces",
    "start": "2724400",
    "end": "2732560"
  },
  {
    "text": "thank you for having me and don't hesitate to ask any questions either now or later thank you",
    "start": "2732560",
    "end": "2741079"
  },
  {
    "text": "you",
    "start": "2753920",
    "end": "2756000"
  }
]