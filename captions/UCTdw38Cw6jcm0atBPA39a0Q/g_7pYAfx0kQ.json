[
  {
    "start": "0",
    "end": "130000"
  },
  {
    "text": "all right well my name is Spencer and to talk I'm going to talk to you about using immutable data structures in C",
    "start": "5840",
    "end": "11820"
  },
  {
    "text": "sharp and dotnet in general also applicable how many vb.net developers in here okay how many people just don't",
    "start": "11820",
    "end": "18029"
  },
  {
    "text": "want to admit it alright so talk about",
    "start": "18029",
    "end": "23880"
  },
  {
    "text": "real quick objective you double it which is just an adjective to describe something that cannot change right and",
    "start": "23880",
    "end": "31919"
  },
  {
    "text": "immutability really in our world in the world of programming just refers to a data structure of some kind that once",
    "start": "31919",
    "end": "39090"
  },
  {
    "text": "it's in stanch eiated and put in memory it can't be changed at all or put in something permanent storage if it's",
    "start": "39090",
    "end": "44550"
  },
  {
    "text": "immutable cannot change the properties can't change right and I think it's really beautiful it's really impacted my",
    "start": "44550",
    "end": "52890"
  },
  {
    "text": "programming career for the better at least thinking about it not only on the dotnet you know it's c-sharp level but",
    "start": "52890",
    "end": "59010"
  },
  {
    "text": "also thinking about architecture which I'll talk about a little later and I think that it's really important to talk about if you're gonna do an immutable",
    "start": "59010",
    "end": "64978"
  },
  {
    "text": "talk you at least have to mention functional programming right and functional programming is one of those",
    "start": "64979",
    "end": "71220"
  },
  {
    "text": "things that I don't do on a day-to-day basis my main language is dotnet or sorry c-sharp occasional vb.net which",
    "start": "71220",
    "end": "78810"
  },
  {
    "text": "I'm proud of I'm proud of it even if the people who chose it weren't and really",
    "start": "78810",
    "end": "85200"
  },
  {
    "text": "functional programming is for me has been a thought exercise and really kind of introspecting about how I develop",
    "start": "85200",
    "end": "92820"
  },
  {
    "text": "software and how I can develop software better right because in an imperative language like C sharp they the languages",
    "start": "92820",
    "end": "98760"
  },
  {
    "text": "themselves have different priorities and different principles about how they operate functional programming doesn't",
    "start": "98760",
    "end": "103770"
  },
  {
    "text": "doesn't necessarily like null it has a very mutability is usually on by default",
    "start": "103770",
    "end": "109049"
  },
  {
    "text": "and it has a functional first kind of mindset with data structures with a very",
    "start": "109049",
    "end": "114510"
  },
  {
    "text": "strong type system which I'm not gonna get into the specifics of course we're cheered us focus on immutability and I",
    "start": "114510",
    "end": "119970"
  },
  {
    "text": "think that really you can do an entire talk in a day a very good talk on just immutability in an hour anyways and",
    "start": "119970",
    "end": "127500"
  },
  {
    "text": "still touch on those other things and in the way they inspire me so let's talk about f sharp for a little bit so this",
    "start": "127500",
    "end": "133950"
  },
  {
    "start": "130000",
    "end": "210000"
  },
  {
    "text": "is a little bit of F sharp how many F sharp developers in the room okay all right one in the front row and this is",
    "start": "133950",
    "end": "139650"
  },
  {
    "text": "the guy that's going to be challenging me time like I don't know why you do that but so this is a little F sharp for you",
    "start": "139650",
    "end": "145080"
  },
  {
    "text": "this is what's referred to as a record type so record types have special properties and that they boiled down to",
    "start": "145080",
    "end": "150510"
  },
  {
    "text": "essentially c-sharp classes or classes in net and have a few a couple of",
    "start": "150510",
    "end": "155700"
  },
  {
    "text": "properties about them which is that they are you have structural equality on by default which means they're not compared",
    "start": "155700",
    "end": "161190"
  },
  {
    "text": "by reference they're compared by the values of the properties and this thing is immutable once you declare an",
    "start": "161190",
    "end": "167069"
  },
  {
    "text": "instance of it you can't change it really that's and so that's a really important concept for the for f-sharp in",
    "start": "167069",
    "end": "175260"
  },
  {
    "text": "general it's one of the things that it kind of embraces you can actually make a property on here mutable by putting in a",
    "start": "175260",
    "end": "182099"
  },
  {
    "text": "key word right here in front of a count number called mutable but I think that that really illustrates one of the",
    "start": "182099",
    "end": "187440"
  },
  {
    "text": "priorities and differences that f-sharp has over C sharp F sharp really prioritizes and really pushes you",
    "start": "187440",
    "end": "193859"
  },
  {
    "text": "towards immutability making mutability an opt-in thing whereas c-sharp really",
    "start": "193859",
    "end": "199829"
  },
  {
    "text": "pushes you towards mutability as a first class as a first class thing right and",
    "start": "199829",
    "end": "205980"
  },
  {
    "text": "really asks you to opt into mutability right with extra code so quick question",
    "start": "205980",
    "end": "212069"
  },
  {
    "start": "210000",
    "end": "224000"
  },
  {
    "text": "how do you know if somebody is a functional programmer that's easy it's",
    "start": "212069",
    "end": "217560"
  },
  {
    "text": "like somebody who does CrossFit if they if they they're functional programmer they'll let you know they won't shut up about it and it's really important to",
    "start": "217560",
    "end": "226440"
  },
  {
    "start": "224000",
    "end": "254000"
  },
  {
    "text": "understand that c-sharp is something that is Bill I've built a career on c-sharp I loved c-sharp I think it's a",
    "start": "226440",
    "end": "232379"
  },
  {
    "text": "great language I can take functional paradigms and principles from other languages or at least other ways of",
    "start": "232379",
    "end": "238500"
  },
  {
    "text": "programming and apply them to c-sharp but at its core I cannot change dot I cannot change the CLR right the CLR was",
    "start": "238500",
    "end": "245400"
  },
  {
    "text": "built in an imperative style right I can't change c-sharp that's not that's not possible but what I can change maybe",
    "start": "245400",
    "end": "252629"
  },
  {
    "text": "is your mind and I gotta warn you that there's a lot of bad immutability jokes",
    "start": "252629",
    "end": "258479"
  },
  {
    "start": "254000",
    "end": "264000"
  },
  {
    "text": "in this slide deck which just goes to show you show you that some things really do never change I want to",
    "start": "258479",
    "end": "265260"
  },
  {
    "start": "264000",
    "end": "356000"
  },
  {
    "text": "illustrate a me the idea of immutability with an example that I think we can kind of all understand how many people know",
    "start": "265260",
    "end": "270840"
  },
  {
    "text": "who Scott Hanselman is fair amount of you that's a fairy that does it easy one right so it Scott Hanselman if",
    "start": "270840",
    "end": "276780"
  },
  {
    "text": "you ever fall if you follow him on Twitter about once a month or once every week I don't know frequently it seems he",
    "start": "276780",
    "end": "282120"
  },
  {
    "text": "often complains about Twitter's lack of an edit button inside of tweets and I",
    "start": "282120",
    "end": "287700"
  },
  {
    "text": "look at that and I say okay that's that's kind of a thing but like typos are on you is it really that hard to delete a tweet but it really goes a",
    "start": "287700",
    "end": "294750"
  },
  {
    "text": "little bit deeper than that and let's use our friend elan as an example so this is a real elan tweet tweet where he",
    "start": "294750",
    "end": "300120"
  },
  {
    "text": "says defeating traffic is the ultimate boss battle it's kind of funny it's kind of quirky it's elan being elan whatever",
    "start": "300120",
    "end": "305640"
  },
  {
    "text": "so you look at that and if you're a twitter user you might go ahead and give that an rtii you might give that a retweet and put that publish that to",
    "start": "305640",
    "end": "312120"
  },
  {
    "text": "your feet and say yes I agree with this so then one day Twitter goes ahead and",
    "start": "312120",
    "end": "319860"
  },
  {
    "text": "publishes an edit button and suddenly this innocuous tweet about defeating boss battle or defeating traffic turns",
    "start": "319860",
    "end": "325410"
  },
  {
    "text": "into something like this okay that's a kind of an American joke right so I'll make it a little bit more topical for",
    "start": "325410",
    "end": "331380"
  },
  {
    "text": "you and I really and this really goes",
    "start": "331380",
    "end": "337260"
  },
  {
    "text": "back to a quote that John Carmack said which is the large part of the flaws of software development are due to",
    "start": "337260",
    "end": "343680"
  },
  {
    "text": "programmers not fully understanding the state of the the state of execution of that program and I think really",
    "start": "343680",
    "end": "350100"
  },
  {
    "text": "understand understanding and embracing this is one of the first steps to really kind of thinking about immutability in",
    "start": "350100",
    "end": "355170"
  },
  {
    "text": "your day to day programming lives when you have something like an edit button on Twitter you have to have you have to",
    "start": "355170",
    "end": "361170"
  },
  {
    "text": "ask all of these questions well if I allow somebody to edit that tweet let's may do I time box it within like",
    "start": "361170",
    "end": "366930"
  },
  {
    "text": "maybe the first 60 seconds what if somebody's liked that tweet or what if somebody's retweeted it published it to",
    "start": "366930",
    "end": "372630"
  },
  {
    "text": "their own feed for other people to consume do I change am I able to change the idea of the tweet suddenly you have",
    "start": "372630",
    "end": "379830"
  },
  {
    "text": "to think about all of these different things that allow you to mutate that tweet right now they're immutable died",
    "start": "379830",
    "end": "385620"
  },
  {
    "text": "up by default and that's a good thing because you don't have to think about any of that if you're on Twitter and",
    "start": "385620",
    "end": "391620"
  },
  {
    "text": "you're you and if you're a twitter user or if your Twitter themselves and you're and believe me people ask for the edit",
    "start": "391620",
    "end": "397140"
  },
  {
    "text": "button all the time but your when your Twitter you have to think about things like this with no edit button you don't",
    "start": "397140",
    "end": "402690"
  },
  {
    "text": "have to worry about people changing the intent of the tweet it's immutable it to change and therefore because it can't",
    "start": "402690",
    "end": "409770"
  },
  {
    "text": "change the idea can't change and you don't have to consider all of this other gobbledygook somebody pointed out when I",
    "start": "409770",
    "end": "415229"
  },
  {
    "text": "was talking about this concept is that while also this will help simplify Twitter's architecture because suddenly they're not having to push edits from",
    "start": "415229",
    "end": "422520"
  },
  {
    "text": "edits now go straight from your phone or straight from the Twitter servers up to your phone or whatever device you're",
    "start": "422520",
    "end": "428430"
  },
  {
    "text": "using Twitter on which I thought was a good point right I mean not that Twitter's not good they have a great architecture you can see as people like",
    "start": "428430",
    "end": "434520"
  },
  {
    "text": "your tweet you can see the little numbers increment yay but if you're if you're if you're a NASA and organization",
    "start": "434520",
    "end": "441599"
  },
  {
    "text": "where things like this have to be taken into account suddenly you have to change your architecture so I thought that was a really interesting point I thought",
    "start": "441599",
    "end": "447659"
  },
  {
    "text": "worth mentioning here's another example a little more closer to our world so we have here an innocuous method and when",
    "start": "447659",
    "end": "455130"
  },
  {
    "start": "448000",
    "end": "530000"
  },
  {
    "text": "new dotnet developers kind of start to you know they get past array and they",
    "start": "455130",
    "end": "460590"
  },
  {
    "text": "start to understand the power of lists a lot of times I see do develop new developers do dot to list all the things",
    "start": "460590",
    "end": "467099"
  },
  {
    "text": "right and it's it's a pretty easy habit to get into it really doesn't really hurt very often but then you look at",
    "start": "467099",
    "end": "473849"
  },
  {
    "text": "this method and me as I am looking at this method I'm like well normally if I create a method I with a list that takes",
    "start": "473849",
    "end": "480270"
  },
  {
    "text": "in a list I suddenly have to ask to my ID like I'm usually usually intending to mutate that list and when you present",
    "start": "480270",
    "end": "486479"
  },
  {
    "text": "somebody something like a method like this where you're giving them a list which a list has add removed methods",
    "start": "486479",
    "end": "492479"
  },
  {
    "text": "right suddenly am I supposed to under am I supposed to expect that this method whatever it does is supposed to be able",
    "start": "492479",
    "end": "498900"
  },
  {
    "text": "to add to this list is it supposed to be able to remove from it is it supposed to be why am I getting a list versus an",
    "start": "498900",
    "end": "504810"
  },
  {
    "text": "ienumerable which is just a forward only read right so those kinds of questions come have to come into account and maybe",
    "start": "504810",
    "end": "511380"
  },
  {
    "text": "I'm overthinking it a little bit but there are plenty of instances in the.net framework where the mutation recursion",
    "start": "511380",
    "end": "517110"
  },
  {
    "text": "is a great example of where you take a list and you're building up a bit of data or you're building up data and",
    "start": "517110",
    "end": "522120"
  },
  {
    "text": "possibly recursing over some other data structure in order to build that data up you might pass in a list intending for",
    "start": "522120",
    "end": "527880"
  },
  {
    "text": "that list to grow and mutate right and this is really a function of just like thinking now I have to think about all",
    "start": "527880",
    "end": "535020"
  },
  {
    "start": "530000",
    "end": "547000"
  },
  {
    "text": "the different states of mice that my software is operating in right that goes to the back to the John Carmack",
    "start": "535020",
    "end": "540120"
  },
  {
    "text": "now I have to interpret this method I have to look at that and I have to think well okay now I have to really do a lot",
    "start": "540120",
    "end": "545699"
  },
  {
    "text": "of thinking so there's a guy keval and Henny did a who did this this slide",
    "start": "545699",
    "end": "551879"
  },
  {
    "start": "547000",
    "end": "612000"
  },
  {
    "text": "comes straight from a talk that he did a couple of years ago that actually inspired this talk and he talked about",
    "start": "551879",
    "end": "558149"
  },
  {
    "text": "this thing this this quad this uh this graph and he talks about the the the the",
    "start": "558149",
    "end": "565139"
  },
  {
    "text": "quadrant at the top right he calls it the synchronization quadrant which says that if you have data that is shared",
    "start": "565139",
    "end": "570600"
  },
  {
    "text": "amongst multiple things right threads or possibly just consumers in general and",
    "start": "570600",
    "end": "575939"
  },
  {
    "text": "that data is mutable when that mutate when that data is mutated and consumed when that data is mutated the suddenly",
    "start": "575939",
    "end": "583709"
  },
  {
    "text": "all of the other threads have to be aware of that someway there has to be some kind of synchronization process",
    "start": "583709",
    "end": "588990"
  },
  {
    "text": "that gets them that gets that memory space all the way to the other threads to consuming it right and this is really",
    "start": "588990",
    "end": "596579"
  },
  {
    "text": "an important thing when you're talking about something like data that you when",
    "start": "596579",
    "end": "601620"
  },
  {
    "text": "you when you're processing a large amount of data and you want to make a guarantee you want to expectation that that data is not going to change that",
    "start": "601620",
    "end": "608220"
  },
  {
    "text": "greatly simplifies the amount of thinking and amount of architecture that you have to have and this goes back to",
    "start": "608220",
    "end": "613980"
  },
  {
    "start": "612000",
    "end": "696000"
  },
  {
    "text": "Moore's Law right Moore's law I think is important to bring up because a long time ago",
    "start": "613980",
    "end": "619350"
  },
  {
    "text": "wellbut why I don't know a long time ago 20 years ago or so Intel and AMD and",
    "start": "619350",
    "end": "624360"
  },
  {
    "text": "other chip makers were locked in what was called the gigahertz race where they were just trying to make Giga processors with the highest gigahertz they were",
    "start": "624360",
    "end": "630509"
  },
  {
    "text": "trying to make them faster and faster right and eventually you know they they",
    "start": "630509",
    "end": "635519"
  },
  {
    "text": "hit a ceiling right they tried to make what was essentially a super processor the thing looks familiar",
    "start": "635519",
    "end": "641839"
  },
  {
    "text": "anyways when you're talking when when you when you when you hit a physical",
    "start": "641839",
    "end": "648389"
  },
  {
    "text": "limit right like you are with the gigahertz race and you suddenly can't make process individual processors",
    "start": "648389",
    "end": "654660"
  },
  {
    "text": "faster suddenly you're having to distribute workloads distributed computing is something that we talk about a lot right or at least we're",
    "start": "654660",
    "end": "661949"
  },
  {
    "text": "talking about it more as we've sort of reached that limit and as a and as of course the data need the needs for our programs have risen so thus being able",
    "start": "661949",
    "end": "670110"
  },
  {
    "text": "to process data amongst multiple assessors that amongst multiple processors in a way that makes it that",
    "start": "670110",
    "end": "677890"
  },
  {
    "text": "ensures that you don't change that data right if you're able to operate in an assumption and you operate under the",
    "start": "677890",
    "end": "683980"
  },
  {
    "text": "assumption that the data is not going to change suddenly you're Simplot your architecture simplifies and you can make",
    "start": "683980",
    "end": "689920"
  },
  {
    "text": "you could often gain more performance by making sure my not having to have any synchronization process so let's talk",
    "start": "689920",
    "end": "697630"
  },
  {
    "start": "696000",
    "end": "755000"
  },
  {
    "text": "about the history of immutability and dotnet I there's there is a little bit",
    "start": "697630",
    "end": "703060"
  },
  {
    "text": "of immutability just even baked into the 1.0 release right so we've all had this",
    "start": "703060",
    "end": "708339"
  },
  {
    "text": "right of passage as dotnet developers where we've declared a string and then we call dot replace on it and we",
    "start": "708339",
    "end": "713709"
  },
  {
    "text": "expected this question mark to turn into that exclamation point and then you wrote it to the console and suddenly are disappointed and wondering why the heck",
    "start": "713709",
    "end": "719680"
  },
  {
    "text": "it just says replaceable as opposed to replaceable everybody's had this right of passage eventually you come to the realization",
    "start": "719680",
    "end": "725980"
  },
  {
    "text": "that actually string dot replace returns a new string instance of a string is immutable if you change it a new",
    "start": "725980",
    "end": "732010"
  },
  {
    "text": "instance of a string is created date/time operates in a very in a very similar way right in order if if you",
    "start": "732010",
    "end": "739930"
  },
  {
    "text": "declare something that wraps date/time dot now you're getting a new instance of that and if you call add hours on it",
    "start": "739930",
    "end": "745390"
  },
  {
    "text": "you're not mutating the original instance of that date/time you're actually creating a new instance so immutability in certain structures has",
    "start": "745390",
    "end": "752860"
  },
  {
    "text": "been a thing in dotnet for a little while and this is how immutable classes used to look right where we have a",
    "start": "752860",
    "end": "758980"
  },
  {
    "start": "755000",
    "end": "776000"
  },
  {
    "text": "read-only field and we just had a property without a getter or without a setter and then we just declared you",
    "start": "758980",
    "end": "764980"
  },
  {
    "text": "know public person and then just pass in the first name right we don't need to go over this this is old this is old stuff",
    "start": "764980",
    "end": "770709"
  },
  {
    "text": "and most of the time unless we're looking at old code we probably don't have to see this anymore certainly we don't write it and then eventually we",
    "start": "770709",
    "end": "778029"
  },
  {
    "start": "776000",
    "end": "801000"
  },
  {
    "text": "got these auto properties where we could also declare the accessibility modifier on that auto property and this is pretty",
    "start": "778029",
    "end": "785380"
  },
  {
    "text": "close this was closed for a while but it didn't quite hit the mark because technically speaking the first name and",
    "start": "785380",
    "end": "791320"
  },
  {
    "text": "last name were still mutable till c-sharp six came along and ah we got these getter properties that can only be",
    "start": "791320",
    "end": "797680"
  },
  {
    "text": "set from the constructor that looks much better worth mentioning as well that c-sharp",
    "start": "797680",
    "end": "803470"
  },
  {
    "start": "801000",
    "end": "839000"
  },
  {
    "text": "7.2 and eight introduced well sharp 7.2 introduced a read-only struct",
    "start": "803470",
    "end": "809079"
  },
  {
    "text": "which is a struct that is guaranteed to be a read-only thing if you were this is becomes important in high performance at",
    "start": "809079",
    "end": "815800"
  },
  {
    "text": "c-sharp applications the system texts JSON API for example does declare",
    "start": "815800",
    "end": "821439"
  },
  {
    "text": "immutable or read-only structs to pass certain data structures down in certain",
    "start": "821439",
    "end": "826540"
  },
  {
    "text": "instances where you're having to do something special in system text jason and they do that for performance one of the reasons that library was rewritten",
    "start": "826540",
    "end": "832269"
  },
  {
    "text": "from newton written from the ground up was because it was much more performant than Newton soft up Jason",
    "start": "832269",
    "end": "839878"
  },
  {
    "text": "bottom line is is that this is how if I declare a mutable data if I declare mutable classes this is how I declare",
    "start": "839939",
    "end": "846160"
  },
  {
    "text": "them right it's very simple string first name string last name and then just",
    "start": "846160",
    "end": "851439"
  },
  {
    "text": "close the setters delete them like delete key click click it's all done I",
    "start": "851439",
    "end": "856629"
  },
  {
    "text": "understand that I think that there is a proposal out there to put like an accessibility modifier like right here",
    "start": "856629",
    "end": "862959"
  },
  {
    "text": "and just declare them and then you don't even have to have this or something like that I don't know if that's out I don't know if that proposal exists but that's",
    "start": "862959",
    "end": "868689"
  },
  {
    "text": "what they do in typescript I think there's a proposal out there but for now this is what we got and it's pretty good I think it's fine link is another",
    "start": "868689",
    "end": "875170"
  },
  {
    "start": "873000",
    "end": "925000"
  },
  {
    "text": "example of something that has embraced immutability kind of from the beginning and anonymous types one of the best",
    "start": "875170",
    "end": "880680"
  },
  {
    "text": "decisions that dotted that Microsoft made was making anonymous types the way",
    "start": "880680",
    "end": "886000"
  },
  {
    "text": "they made them we've all seen them if we've called if we've had some kind of list and we wanted to select certain",
    "start": "886000",
    "end": "891610"
  },
  {
    "text": "data from that list and we didn't want to create a whole new type for it we just said yeah forget it you know we'll just do we'll just create a new",
    "start": "891610",
    "end": "897670"
  },
  {
    "text": "anonymous type and just wrap a new object and that's really useful especially when you're doing grouping operations and you don't want to have to",
    "start": "897670",
    "end": "903579"
  },
  {
    "text": "declare type for all these different things and the cool thing about anonymous types is that they are not",
    "start": "903579",
    "end": "909790"
  },
  {
    "text": "only immutable you can't change their data they also embrace structural equality by default unless you're using",
    "start": "909790",
    "end": "915879"
  },
  {
    "text": "vb.net for gal I do not understand why they made that design decision that's outside the scope of this talk what can",
    "start": "915879",
    "end": "922209"
  },
  {
    "text": "I say I think it's they do a lot of weird stuff in VB bottom line is is that once you put this into memory you can't",
    "start": "922209",
    "end": "928720"
  },
  {
    "start": "925000",
    "end": "945000"
  },
  {
    "text": "touch it you can't change that data once it's there so immutability again link embracing it embracing immutability by",
    "start": "928720",
    "end": "935620"
  },
  {
    "text": "bringing it forward into anonymous types so brief history of mutation what about current day so let's",
    "start": "935620",
    "end": "942340"
  },
  {
    "text": "talk about some mutation anti patterns that I have seen things that I have",
    "start": "942340",
    "end": "948190"
  },
  {
    "start": "945000",
    "end": "972000"
  },
  {
    "text": "refined things that have been refactored or changed or just weird stuff that I've seen out in the wild that we're where we",
    "start": "948190",
    "end": "955240"
  },
  {
    "text": "know we can fix it by doing other things right so unnecessary setters is probably my favorite one because really when I",
    "start": "955240",
    "end": "962560"
  },
  {
    "text": "declare a property I almost always in most cases if and well if it's a specific type of case we'll get into why",
    "start": "962560",
    "end": "969520"
  },
  {
    "text": "but most of the time I delete those setters so I had this particular thing it's a true story where I had declared",
    "start": "969520",
    "end": "976390"
  },
  {
    "start": "972000",
    "end": "1019000"
  },
  {
    "text": "this thing and it had a lot more properties than this but essentially it was an interface I column which just declared that the thing that implemented",
    "start": "976390",
    "end": "982810"
  },
  {
    "text": "it had a column name and a column type pretty simple nothing really different or new and this was its implementation",
    "start": "982810",
    "end": "989440"
  },
  {
    "text": "right so it was just a this concrete it had a concrete implementation with a lot",
    "start": "989440",
    "end": "994660"
  },
  {
    "text": "more stuff in it but this one is the simplified one just looks like this again and a not ordered a immutable",
    "start": "994660",
    "end": "1001680"
  },
  {
    "text": "structure right I created something not a structured class technically but I created something that I didn't want to",
    "start": "1001680",
    "end": "1007140"
  },
  {
    "text": "mutate because I just wanted to say this column is a column there's no reason to have mutation here because they",
    "start": "1007140",
    "end": "1012600"
  },
  {
    "text": "shouldn't what do they expect they expect to like change the type of the column and then like hit save somewhere right I wanted to avoid that confusion",
    "start": "1012600",
    "end": "1019850"
  },
  {
    "start": "1019000",
    "end": "1037000"
  },
  {
    "text": "so we get this columns for table thing again this is real code where we numerate the columns for the table",
    "start": "1019850",
    "end": "1025920"
  },
  {
    "text": "usually by reading the schema table for the sequel server database or something right and then we were we'd give it a",
    "start": "1025920",
    "end": "1032250"
  },
  {
    "text": "table name and then we returned a set of columns in that table with some metadata about those columns and suddenly",
    "start": "1032250",
    "end": "1038339"
  },
  {
    "start": "1037000",
    "end": "1066000"
  },
  {
    "text": "somebody comes along and says well really Spencer weird all we're taking this column this grid column which is",
    "start": "1038339",
    "end": "1044069"
  },
  {
    "text": "unique identifier in sequel server we're using another and we're actually moving the data to another thing so we actually",
    "start": "1044070",
    "end": "1050730"
  },
  {
    "text": "want this thing to be a string not a gooood even though the ID is captured is a gooood we want to capture it a string",
    "start": "1050730",
    "end": "1056310"
  },
  {
    "text": "we want to call the column type string because we might declare it down the road you know we might create a new table on some other you know data data",
    "start": "1056310",
    "end": "1063000"
  },
  {
    "text": "sort a data system okay that's fine so they take this interface that ostensibly",
    "start": "1063000",
    "end": "1068850"
  },
  {
    "start": "1066000",
    "end": "1092000"
  },
  {
    "text": "didn't need to be changed and they added a setter to it and what they did was they iterated",
    "start": "1068850",
    "end": "1076150"
  },
  {
    "text": "through each of the columns and they said if the column type is type of gooood just change it to a column type",
    "start": "1076150",
    "end": "1081190"
  },
  {
    "text": "of string an innocuous refactor but I use that as a teaching moment to teach",
    "start": "1081190",
    "end": "1087309"
  },
  {
    "text": "the the developer the things of the the ideals of immutability right because I'm",
    "start": "1087309",
    "end": "1092440"
  },
  {
    "text": "looking at this code and I'm having now to reason about it again right I have my job's hard enough I don't want to think",
    "start": "1092440",
    "end": "1097600"
  },
  {
    "text": "too much I want to think just enough right I want to think about interesting problems so I said there's really no",
    "start": "1097600",
    "end": "1102760"
  },
  {
    "text": "reason to close that's there to open that Center because what you're doing is now intent telling the person who's",
    "start": "1102760",
    "end": "1107799"
  },
  {
    "text": "consuming that interface that it's okay to change the value of that data right that's what you're doing you're giving",
    "start": "1107799",
    "end": "1113770"
  },
  {
    "text": "them that contract and so what I do is I told them that projection should be",
    "start": "1113770",
    "end": "1119650"
  },
  {
    "start": "1116000",
    "end": "1144000"
  },
  {
    "text": "favored over mutation use link right you can do something like this where you just create a set of new columns and you",
    "start": "1119650",
    "end": "1125770"
  },
  {
    "text": "just say if the column type is a gooood you just return a string otherwise you return a column type so favor mutate",
    "start": "1125770",
    "end": "1132309"
  },
  {
    "text": "projection over mutation where it's possible and it's practical and you'll find the more you look at your collections the more you look at your",
    "start": "1132309",
    "end": "1138070"
  },
  {
    "text": "code that you will see that that there's actually lots of opportunities for this to be for this to be the case and it",
    "start": "1138070",
    "end": "1145240"
  },
  {
    "start": "1144000",
    "end": "1179000"
  },
  {
    "text": "goes down to my main principle again my man Kevin just because you have a getter doesn't mean you should have a matching",
    "start": "1145240",
    "end": "1150549"
  },
  {
    "text": "setter right we can leave those guys we can leave those guys single right they don't have to be they don't have to be",
    "start": "1150549",
    "end": "1156160"
  },
  {
    "text": "paired up when I do this and I do and if",
    "start": "1156160",
    "end": "1161169"
  },
  {
    "text": "if I do this on an interface I better have a good reason for doing it because again I'm not trying to I'm trying to",
    "start": "1161169",
    "end": "1167919"
  },
  {
    "text": "not complicate or make my co-workers lives harder I'm trying to make them",
    "start": "1167919",
    "end": "1173020"
  },
  {
    "text": "easier I'm trying to make it so that they're having to comprehend the code that I write that I make it as easy on them as possible because at the end of",
    "start": "1173020",
    "end": "1181570"
  },
  {
    "start": "1179000",
    "end": "1196000"
  },
  {
    "text": "the day if you're thinking about open setters is it open for a reason right beaten that horse to death we can move on when I and I and I've really come to",
    "start": "1181570",
    "end": "1189250"
  },
  {
    "text": "the conclusion that passing mutable data to methods is really giving that method permission to change that data as it see",
    "start": "1189250",
    "end": "1195280"
  },
  {
    "text": "fit and you see this sometimes in these things that I like to call setup methods I actually died this is an anti-pattern",
    "start": "1195280",
    "end": "1201309"
  },
  {
    "start": "1196000",
    "end": "1269000"
  },
  {
    "text": "that I there's a better name for somebody please tell me but it's essentially something like",
    "start": "1201309",
    "end": "1207130"
  },
  {
    "text": "we contracted with a firm that had a bunch of junior developers offshore and",
    "start": "1207130",
    "end": "1212890"
  },
  {
    "text": "we were we're and we were in a sprint and so you know I was managing another",
    "start": "1212890",
    "end": "1218110"
  },
  {
    "text": "part of the team and I saw a couple weeks worth commits my manager approved them and I saw this where they called",
    "start": "1218110",
    "end": "1226060"
  },
  {
    "text": "this where they declared something a repository or some kind of service or something and then they did this dot and",
    "start": "1226060",
    "end": "1232240"
  },
  {
    "text": "MIT thing where they're setting up the state of that data of the data inside of that object so this Amit method was",
    "start": "1232240",
    "end": "1239200"
  },
  {
    "text": "really just a method that all it did was mutate the state of that object in wine suddenly that suddenly to the chagrin of",
    "start": "1239200",
    "end": "1247390"
  },
  {
    "text": "any developer who then goes and uses this repository but doesn't call the init method this happens boom exceptions",
    "start": "1247390",
    "end": "1256690"
  },
  {
    "text": "are thrown odd behaviors are had and then we had to go back and to explain you know obviously you know there was an omit method and I had to go back to tell",
    "start": "1256690",
    "end": "1262240"
  },
  {
    "text": "my manager like you need to stop doing code reviews and focus on you know budgets or whatever it is that you're supposed to do and you know moved on and",
    "start": "1262240",
    "end": "1269650"
  },
  {
    "start": "1269000",
    "end": "1303000"
  },
  {
    "text": "so we had them refactor it and it was all good and the way we have them refactor it is to provide the factory pattern now this isn't Java right we",
    "start": "1269650",
    "end": "1276400"
  },
  {
    "text": "don't want a factory factory bean factory factory like you some people have seen those jokes online and it's a",
    "start": "1276400",
    "end": "1282460"
  },
  {
    "text": "real thing but like a factory wrapping you know an instance of a service like that one layer deep that's perfectly",
    "start": "1282460",
    "end": "1289180"
  },
  {
    "text": "okay so use the factory pattern in that case it's a good idea to refactor let that refactor factory pattern do all the",
    "start": "1289180",
    "end": "1296410"
  },
  {
    "text": "setup that it needs to do instantiate the object and then return it to the caller something like that right so in",
    "start": "1296410",
    "end": "1305560"
  },
  {
    "text": "order to talk about immutability we have to be pragmatic we are pragmatic developers by default and we have to",
    "start": "1305560",
    "end": "1310870"
  },
  {
    "text": "talk about library support because we have libraries we're not in a mutable language we're not in a mutable runtime",
    "start": "1310870",
    "end": "1316300"
  },
  {
    "text": "by default it's not what the it's not what the runtime coaxes us to it is c-sharp and VB Z met to default to",
    "start": "1316300",
    "end": "1322870"
  },
  {
    "text": "mutability so we have to kind of play by those rules by the data library developers who have considered that",
    "start": "1322870",
    "end": "1329200"
  },
  {
    "text": "immutability is a first-class citizen so the things that we have so this is Anu",
    "start": "1329200",
    "end": "1335560"
  },
  {
    "start": "1331000",
    "end": "1387000"
  },
  {
    "text": "this is a I wouldn't say it's relatively new it's been around for a while now but a system collections immutable and I do have a demo",
    "start": "1335560",
    "end": "1340760"
  },
  {
    "text": "is crazy I know but I really wanted to kind of show just a little bit about it",
    "start": "1340760",
    "end": "1346460"
  },
  {
    "text": "so I'm gonna declare what is called an immutable list and let's zoom that in make that that doesn't work",
    "start": "1346460",
    "end": "1352730"
  },
  {
    "text": "got it drag it over here we go that's better yeah there we go",
    "start": "1352730",
    "end": "1357980"
  },
  {
    "text": "zoom that in zoom zoom zoom my zoom",
    "start": "1357980",
    "end": "1363560"
  },
  {
    "text": "thing is not working all right well I'm gonna copy and paste it then because I don't really want to let's see yeah that",
    "start": "1363560",
    "end": "1371780"
  },
  {
    "text": "is not readable so here's what it looks like got this plus plus plus plus so I'm",
    "start": "1371780",
    "end": "1379340"
  },
  {
    "text": "gonna run this code by just describing it we're gonna just describe the pseudocode make this a little bigger there we go that looks good all right so",
    "start": "1379340",
    "end": "1388340"
  },
  {
    "start": "1387000",
    "end": "1441000"
  },
  {
    "text": "we have here what is the mutable list and it's got a static method called a mutable list create give it some strings",
    "start": "1388340",
    "end": "1393830"
  },
  {
    "text": "you can feed it anywhere from 0 to X number of strings right and this is an interesting behavior of this particular",
    "start": "1393830",
    "end": "1399950"
  },
  {
    "text": "immutable list of this particular construct when you call list dot add what it does is it actually creates a",
    "start": "1399950",
    "end": "1406340"
  },
  {
    "text": "second instance of a mutable array and appends the objects that you give that you gave to it and the add method such",
    "start": "1406340",
    "end": "1412010"
  },
  {
    "text": "that when you get this code when you when you when you run this code you get list account of one because that first",
    "start": "1412010",
    "end": "1418430"
  },
  {
    "text": "one has one element list dot count of two it has now two elements and then of course they're different instances right",
    "start": "1418430",
    "end": "1424210"
  },
  {
    "text": "so they return different instances of data that's it if you've never seen the",
    "start": "1424210",
    "end": "1430970"
  },
  {
    "text": "immune I mean everybody's everybody's probably seen the new get package it's it's used everywhere by the dotnet team",
    "start": "1430970",
    "end": "1436400"
  },
  {
    "text": "these days but interesting behavior right so it's a little bit different",
    "start": "1436400",
    "end": "1443420"
  },
  {
    "start": "1441000",
    "end": "1484000"
  },
  {
    "text": "than what we're used to you also have the list as read-only method which returns a read-only collection I would",
    "start": "1443420",
    "end": "1449090"
  },
  {
    "text": "argue that this thing while it is available is not as powerful or it's useful as a construct because you can't",
    "start": "1449090",
    "end": "1455170"
  },
  {
    "text": "you can't you can declare an immutable list and then add an element to it and get a second list but you cannot once",
    "start": "1455170",
    "end": "1460850"
  },
  {
    "text": "you have a read-only list you cannot add to it the add method from I collection is that it's actually made private and",
    "start": "1460850",
    "end": "1466880"
  },
  {
    "text": "the add color the add method on the I collection interface if you were able to if you cast it to that and then called",
    "start": "1466880",
    "end": "1473130"
  },
  {
    "text": "it it would throw and not support an exception and say you can't do that so I tend to use immutable lists when I",
    "start": "1473130",
    "end": "1478650"
  },
  {
    "text": "do use immutable lists so this this this",
    "start": "1478650",
    "end": "1484230"
  },
  {
    "start": "1484000",
    "end": "1536000"
  },
  {
    "text": "is my thing so Auto mapper how many people use autumn a per oh good amount of you okay so the good I've got good news you",
    "start": "1484230",
    "end": "1491460"
  },
  {
    "text": "declare your Auto mapper interface you declare your Auto mapper you think that you want to take a person that's in a",
    "start": "1491460",
    "end": "1498330"
  },
  {
    "text": "beautiful class and you have an employee that is a like maybe an entity framework class more on that later and you want to",
    "start": "1498330",
    "end": "1504420"
  },
  {
    "text": "create a map from that employee to that person and you do so and then you call",
    "start": "1504420",
    "end": "1509490"
  },
  {
    "text": "map or dot does it blow up does it call the constructor it calls the constructor it will do it will do matching by",
    "start": "1509490",
    "end": "1516810"
  },
  {
    "text": "convention which is what Auto mapper already does for us so it'll take this first and last name and here and try its",
    "start": "1516810",
    "end": "1522390"
  },
  {
    "text": "best to match them to the first-name and lastname parameters on the auto mapper on the on the on the target mat the",
    "start": "1522390",
    "end": "1530100"
  },
  {
    "text": "target object that's being mapped to Auto mapper has that behavior by default I mean if it doesn't you can always use",
    "start": "1530100",
    "end": "1537090"
  },
  {
    "start": "1536000",
    "end": "1545000"
  },
  {
    "text": "the constructor use it you can always declare your map with the construct using and then you know actually provide it a specific constructor to use which",
    "start": "1537090",
    "end": "1544890"
  },
  {
    "text": "is pretty useful Newton's soft ed Jason again the same thing what have we what are we going to get when we do serialize",
    "start": "1544890",
    "end": "1551100"
  },
  {
    "text": "this person object into our person class first name last name good news is that",
    "start": "1551100",
    "end": "1556950"
  },
  {
    "text": "Newton soft Jason does the exact same thing it does it will take those things it will map them by convention and we'll",
    "start": "1556950",
    "end": "1562440"
  },
  {
    "text": "put try to match them to the properties on your constructor if it can't find a valid constructor then it will throw an",
    "start": "1562440",
    "end": "1568290"
  },
  {
    "text": "exception so your contracts have to be really tight you know you can't just send I don't say I don't think it works",
    "start": "1568290",
    "end": "1573540"
  },
  {
    "text": "I've never tried it actually but if you sent if you needed an extra variable inside of your constructor and you",
    "start": "1573540",
    "end": "1578910"
  },
  {
    "text": "didn't pass it into your Jason body I think you get an exception if you have multiple constructors the only",
    "start": "1578910",
    "end": "1583950"
  },
  {
    "text": "limitation is you have to choose one and you choose one by annotating it with the Jason constructor constructor attribute",
    "start": "1583950",
    "end": "1591110"
  },
  {
    "start": "1591000",
    "end": "1667000"
  },
  {
    "text": "so I think it's worth mentioning system text Jason how many people are already on dotnet score three yeah so how many",
    "start": "1591110",
    "end": "1598200"
  },
  {
    "text": "people have you have looked much into the system text JSON API few of you how",
    "start": "1598200",
    "end": "1604620"
  },
  {
    "text": "many people have tried to use system text like Newton soft and gotten prot and had problems yeah a few of you my aunt",
    "start": "1604620",
    "end": "1611970"
  },
  {
    "text": "raised two I had the same thing so I dug into the behavior I actually have a youtube video I that you could it I did",
    "start": "1611970",
    "end": "1618810"
  },
  {
    "text": "a blog post you can find the link to my website on my Twitter profile I I did a",
    "start": "1618810",
    "end": "1624030"
  },
  {
    "text": "YouTube video explaining some of the differences between system text Jason and Newton sock Jason system text Jason",
    "start": "1624030",
    "end": "1629550"
  },
  {
    "text": "is just a completely different animal and it will it will not unlike Newton soft Jason it will not deceive it will",
    "start": "1629550",
    "end": "1638220"
  },
  {
    "text": "not just serialize immutable classes by default you have to actually declare a json converter a specific one specific",
    "start": "1638220",
    "end": "1645060"
  },
  {
    "text": "to that class is at the end of the world no not necessarily is it kind of annoying maybe it depends",
    "start": "1645060",
    "end": "1651930"
  },
  {
    "text": "I think it depends on your design goals I think for for most people that are making that aren't you know having to",
    "start": "1651930",
    "end": "1657480"
  },
  {
    "text": "need that high performance that system text Jason gives you sticking with Newton soft Jason is just fine so word",
    "start": "1657480",
    "end": "1663870"
  },
  {
    "text": "to the wise it's not apples to apples not even close here's another pattern that I use that I",
    "start": "1663870",
    "end": "1671160"
  },
  {
    "start": "1667000",
    "end": "1706000"
  },
  {
    "text": "find to be useful especially when I'm deep when I am creating kind of framework like libraries for other developers to consume which is the",
    "start": "1671160",
    "end": "1677700"
  },
  {
    "text": "Builder pattern so take an object that's meant to build upon an object how many people use auto FAQ lots of I think a",
    "start": "1677700",
    "end": "1685170"
  },
  {
    "text": "lot of auto facts mine my di container of choice and I think other ones do the",
    "start": "1685170",
    "end": "1690210"
  },
  {
    "text": "same thing where you have a container builder you register all your services then you call container dot the Builder",
    "start": "1690210",
    "end": "1696420"
  },
  {
    "text": "build or whatever the case may be and then you get an instance of your actual auto FAQ service resolver and that's the",
    "start": "1696420",
    "end": "1703890"
  },
  {
    "text": "Builder pattern in effect if you've ever done something like add dbcontext inside",
    "start": "1703890",
    "end": "1709590"
  },
  {
    "start": "1706000",
    "end": "1755000"
  },
  {
    "text": "of a dotnet or an asp net court application you probably saw this class at some point which is like they I",
    "start": "1709590",
    "end": "1716600"
  },
  {
    "text": "boiled it down to just a couple of properties right but the DV context options builder which provides open",
    "start": "1716600",
    "end": "1723050"
  },
  {
    "text": "setters for properties that you can set and what I see a lot is they will say",
    "start": "1723050",
    "end": "1728730"
  },
  {
    "text": "use DB context and behind the scenes this options builder allows you to set the things inside the the configuration",
    "start": "1728730",
    "end": "1736620"
  },
  {
    "text": "options inside of you or options builder and at the end the use dbcontext wraps over that it calls",
    "start": "1736620",
    "end": "1742919"
  },
  {
    "text": "builder build and now you have an immutable config object so now you can't change the connection string of your DB",
    "start": "1742919",
    "end": "1749639"
  },
  {
    "text": "can't be context options in the middle of the runtime you can't change it now",
    "start": "1749639",
    "end": "1755450"
  },
  {
    "start": "1755000",
    "end": "1770000"
  },
  {
    "text": "again you get this right you get this dbcontext options look ma no open setters and obviously a for brevity I",
    "start": "1755450",
    "end": "1761759"
  },
  {
    "text": "eliminated all the other constructor stuff but you get the idea the parent object is the Builder it produces child",
    "start": "1761759",
    "end": "1767759"
  },
  {
    "text": "objects that are immutable useful so I think it's important to talk",
    "start": "1767759",
    "end": "1773369"
  },
  {
    "start": "1770000",
    "end": "1812000"
  },
  {
    "text": "about the kind of the yin and the yang with the good and with the good comes the bad and the bitter comes the sweet",
    "start": "1773369",
    "end": "1778919"
  },
  {
    "text": "and the bottom line is that mutability and functional ideas only work go so far",
    "start": "1778919",
    "end": "1785220"
  },
  {
    "text": "in c-sharp because c-sharp Wilko kicking and screaming in certain ways it's just not a language that's designed to be",
    "start": "1785220",
    "end": "1791909"
  },
  {
    "text": "functional up front and that's okay right c-sharp is really good at doing the things that c-sharp is good at but in",
    "start": "1791909",
    "end": "1799320"
  },
  {
    "text": "some ways mutability is a mutability as a requirement for different things and it",
    "start": "1799320",
    "end": "1806190"
  },
  {
    "text": "can feel it is immutability on objects by default is required for different libraries and it can feel sometimes like",
    "start": "1806190",
    "end": "1812070"
  },
  {
    "start": "1812000",
    "end": "1840000"
  },
  {
    "text": "you're putting lipstick on a pig because you're really trying like anybody who dogmatically says in c-sharp if you're",
    "start": "1812070",
    "end": "1818820"
  },
  {
    "text": "an architect if you're the lead developer and you say we are closing all setters all setters are closing we're",
    "start": "1818820",
    "end": "1824849"
  },
  {
    "text": "never mutating data again that sounds like a Haskell program or like not pragmatic right it just can't do that",
    "start": "1824849",
    "end": "1833729"
  },
  {
    "text": "it's you can do that but you're gonna have a lot of struggles along the way and you do have to evaluate the",
    "start": "1833729",
    "end": "1839519"
  },
  {
    "text": "trade-offs end of the framework is a great example of a library that just is just malign mutability at it's very core",
    "start": "1839519",
    "end": "1847919"
  },
  {
    "start": "1840000",
    "end": "1952000"
  },
  {
    "text": "right and that makes sense that kind of makes sense because entity framework is a abstraction over usually a sequel",
    "start": "1847919",
    "end": "1854519"
  },
  {
    "text": "database where we have rows and in those roads we have columns and those columns the data can change we just update the",
    "start": "1854519",
    "end": "1860639"
  },
  {
    "text": "data if that's the permanent data store that's the data is resting place and we move on with our lives so entity framework with those",
    "start": "1860639",
    "end": "1867720"
  },
  {
    "text": "principles with those principles in mind and c-sharp with it every entity class that I declare has an",
    "start": "1867720",
    "end": "1874130"
  },
  {
    "text": "open center because it's pragmatic it does what entity framework wants you to do you cannot get around that fact oh",
    "start": "1874130",
    "end": "1880340"
  },
  {
    "text": "I'm sorry you can get around that fact here's what it looks like so you can declare a class that has a constructor",
    "start": "1880340",
    "end": "1888050"
  },
  {
    "text": "that the real people use that's the non machine folks that develop and you can",
    "start": "1888050",
    "end": "1893510"
  },
  {
    "text": "declare it with a parameter list constructor that enemy framework can use but oh wait we got a market with",
    "start": "1893510",
    "end": "1899420"
  },
  {
    "text": "obsolete and we got to make sure it's true mob silly comment with the message comma true so that way it gives a compiler",
    "start": "1899420",
    "end": "1905090"
  },
  {
    "text": "error when you compile it and then you have to declare you have to declare an ID with an open Center anyways because",
    "start": "1905090",
    "end": "1911120"
  },
  {
    "text": "entity framework and then you have to declare your properties as getters over",
    "start": "1911120",
    "end": "1916630"
  },
  {
    "text": "fields and then you can go to the stack overflow this is the except I don't remember if this is the accepted answer",
    "start": "1916630",
    "end": "1923120"
  },
  {
    "text": "or not I swear - I hope it's not because now you can also do this right where you",
    "start": "1923120",
    "end": "1928520"
  },
  {
    "text": "have to we you also have to do this where you actually have to tell the DB context as you're creating your model as",
    "start": "1928520",
    "end": "1933590"
  },
  {
    "text": "you're creating the entities that are that you're creating these entities and creating a representation of these",
    "start": "1933590",
    "end": "1939800"
  },
  {
    "text": "entities you're having to go through and actually tell it for each of these properties you actually have to set",
    "start": "1939800",
    "end": "1945830"
  },
  {
    "text": "property access mode field which I can guess as to what that does but like I",
    "start": "1945830",
    "end": "1952520"
  },
  {
    "start": "1952000",
    "end": "1961000"
  },
  {
    "text": "feels like this like that code just feels like all you're doing is taking steps and you're hitting ranks right",
    "start": "1952520",
    "end": "1957740"
  },
  {
    "text": "you're just dislikes or slamming in your face you're not adding value in my opinion and that gets back to the",
    "start": "1957740",
    "end": "1963020"
  },
  {
    "start": "1961000",
    "end": "2017000"
  },
  {
    "text": "balancing act question because I am never ever just because I like mutability and use it pragmatically in",
    "start": "1963020",
    "end": "1969020"
  },
  {
    "text": "my C sharp application does not mean that I am going to enforce it throughout my developers would want to kill me my",
    "start": "1969020",
    "end": "1975140"
  },
  {
    "text": "boss would tell me no right it's just not it's not practical it's not pretty",
    "start": "1975140",
    "end": "1980660"
  },
  {
    "text": "it's not always practical another good example or a messaging framework our messaging frameworks that depending on",
    "start": "1980660",
    "end": "1987260"
  },
  {
    "text": "the serializer that you create like and service bus is one that we use and its default serializer cannot handle",
    "start": "1987260",
    "end": "1994070"
  },
  {
    "text": "immutable objects so what am I supposed to do I can either use the JSON serialize or which I do sometimes or I",
    "start": "1994070",
    "end": "1999140"
  },
  {
    "text": "can just treat it like a mutable object this treat it like an immutable object",
    "start": "1999140",
    "end": "2005620"
  },
  {
    "text": "don't like but don't mutate it right just enforce that and use code reviews and process to kind of enforce that because at the end of the day it's a",
    "start": "2005620",
    "end": "2012190"
  },
  {
    "text": "bigger struggle for end service bus and it's more code and it's more headache than we want there is a trade-off right",
    "start": "2012190",
    "end": "2020170"
  },
  {
    "start": "2017000",
    "end": "2136000"
  },
  {
    "text": "there is a trade-off not only in terms of comprehension for your employees for the developers that you work with",
    "start": "2020170",
    "end": "2026620"
  },
  {
    "text": "there's also a cost right and you have to establish whether or not that cost is worth the benefits in many cases it is",
    "start": "2026620",
    "end": "2033340"
  },
  {
    "text": "I declare mutable immutable services all the time I declare mutable data structures all the time usually what I",
    "start": "2033340",
    "end": "2040030"
  },
  {
    "text": "do is if I'm passing them to other methods I might take them instead of if I'm using entity framework with it I",
    "start": "2040030",
    "end": "2046210"
  },
  {
    "text": "might use Auto mapper and couple it with project two or something like that in order to then hydrate that model if I",
    "start": "2046210",
    "end": "2052720"
  },
  {
    "text": "even want to hydrate that immutable model if I even want to go that far most",
    "start": "2052720",
    "end": "2057730"
  },
  {
    "text": "of the time I defer to using immutable models inside of highly critical parts",
    "start": "2057730",
    "end": "2062888"
  },
  {
    "text": "of our system where I don't want the developers that come in and refactor that to break things by just saying",
    "start": "2062889",
    "end": "2068520"
  },
  {
    "text": "mutate mutate data in in this particular place to get this one shortcut oh I had",
    "start": "2068520",
    "end": "2074260"
  },
  {
    "text": "this oh we had the the the team that we were working with did this horrible thing once where they were we were using",
    "start": "2074260",
    "end": "2082060"
  },
  {
    "text": "CQRS and we were passing a message off to a request handler and they were passing it that so it was going through",
    "start": "2082060",
    "end": "2088450"
  },
  {
    "text": "a validator through a request handler and they didn't know what they were they didn't know how to just kind of keep",
    "start": "2088450",
    "end": "2094360"
  },
  {
    "text": "things pure and keep make sure that there wasn't a bunch of spaghetti code so what they did was they added to the message object they added a list of",
    "start": "2094360",
    "end": "2101320"
  },
  {
    "text": "error messages to the error out to the messaging object the object that's supposed to describe our intent not the",
    "start": "2101320",
    "end": "2107320"
  },
  {
    "text": "response object and they started appending messages to it and you know what the code is backed by unit tests",
    "start": "2107320",
    "end": "2112900"
  },
  {
    "text": "and I never refactored it because I just didn't feel like it it was one of those things but at the end of the day I was like the the intent of this has been",
    "start": "2112900",
    "end": "2119380"
  },
  {
    "text": "lost right you've made this code way more confusing by not defining a clean separation between your request your",
    "start": "2119380",
    "end": "2126070"
  },
  {
    "text": "validator your Handler and your response right that should go on a response object it should be some kind of Builder",
    "start": "2126070",
    "end": "2132850"
  },
  {
    "text": "pattern behind the scenes establishing that well I guess it's American currency so I guess this is probably more Pro",
    "start": "2132850",
    "end": "2139060"
  },
  {
    "start": "2136000",
    "end": "2144000"
  },
  {
    "text": "Britt and probably after tonight this is more appropriate so talking about our",
    "start": "2139060",
    "end": "2145660"
  },
  {
    "start": "2144000",
    "end": "2151000"
  },
  {
    "text": "main takeaway so what has again what has a immutability meant to me as a developer so the mutability has really",
    "start": "2145660",
    "end": "2153640"
  },
  {
    "start": "2151000",
    "end": "2266000"
  },
  {
    "text": "kind of helped me evaluate at a higher level right it's not just about like closing setters and just being done at a",
    "start": "2153640",
    "end": "2159400"
  },
  {
    "text": "higher level it's helped me evaluate the state of my application when I started embracing and sprinkling immutability",
    "start": "2159400",
    "end": "2165130"
  },
  {
    "text": "pragmatically throughout my codebase I started to kind of consider how I'd been programming in the past and once I",
    "start": "2165130",
    "end": "2171010"
  },
  {
    "text": "learned those functional concepts once I learn those functional ideals as it were I started looking at my code more",
    "start": "2171010",
    "end": "2177280"
  },
  {
    "text": "critically it made me think about my code differently and it helped make me a more defensive programmer so checking for null checking for empty string right",
    "start": "2177280",
    "end": "2184270"
  },
  {
    "text": "making sure that my validators are not only in place for my web requests for example but not not only just making",
    "start": "2184270",
    "end": "2190600"
  },
  {
    "text": "sure that they are well that they're well validating that object but that tests are really good at backing that",
    "start": "2190600",
    "end": "2196090"
  },
  {
    "text": "object so really defensively programming it's really just helped me change my mindset more when programming",
    "start": "2196090",
    "end": "2202240"
  },
  {
    "text": "defensively can include making things that are immutable optimum and making immutable objects right because if you",
    "start": "2202240",
    "end": "2208600"
  },
  {
    "text": "know that the state can't change you can make a lot of other assumptions about it like that well you can make that the",
    "start": "2208600",
    "end": "2214300"
  },
  {
    "text": "object that is passed from one method down to a hundred other methods will never change and that's a very powerful",
    "start": "2214300",
    "end": "2219490"
  },
  {
    "text": "assumption how many people have worked in web forms yeah how many people still",
    "start": "2219490",
    "end": "2224590"
  },
  {
    "text": "work in web forms no how many people don't want to admit it",
    "start": "2224590",
    "end": "2230100"
  },
  {
    "text": "so in web forms I inherited an application where that was the default behavior where we would just pass these",
    "start": "2230440",
    "end": "2235450"
  },
  {
    "text": "things we would pass an object that was represented like an active record sort so to speak and it was just passed",
    "start": "2235450",
    "end": "2242260"
  },
  {
    "text": "method to method to method and sometimes mutated along the way sometimes not and I'm not calling out this isn't a web",
    "start": "2242260",
    "end": "2247720"
  },
  {
    "text": "forms problem this was a problem kind of born of just the attitude of the time where web forms when web forms was",
    "start": "2247720",
    "end": "2254320"
  },
  {
    "text": "popular that was sort of a thing you did I'm saying that we can do better that's pretty much all I'm saying is so I look",
    "start": "2254320",
    "end": "2259870"
  },
  {
    "text": "for those opportunities to make sure that I close those setters and make sure that methods aren't mutating data at the",
    "start": "2259870",
    "end": "2265210"
  },
  {
    "text": "very least so mutate sparingly use it use it where it makes sense right use it",
    "start": "2265210",
    "end": "2271090"
  },
  {
    "text": "in your message or message fairy messaging frameworks where immutability the cost of immutability it's just like you're",
    "start": "2271090",
    "end": "2277460"
  },
  {
    "text": "having to add on or worker add-in workarounds to make things work fast or better or make it work with the library",
    "start": "2277460",
    "end": "2283400"
  },
  {
    "text": "you're trying to shoehorn it in you don't have to do that right you don't have to do that in any framework - you",
    "start": "2283400",
    "end": "2289760"
  },
  {
    "text": "can't do it at any framework I would argue that it makes your code it's actually a net negative right it makes your code harder to read",
    "start": "2289760",
    "end": "2295700"
  },
  {
    "text": "so mutate sparingly but pragmatically right aligned with your team and I think",
    "start": "2295700",
    "end": "2301220"
  },
  {
    "start": "2299000",
    "end": "2345000"
  },
  {
    "text": "this is a really important one I think that Inlet if your team is not on board with the idea of immutability if you're",
    "start": "2301220",
    "end": "2307309"
  },
  {
    "text": "if you're if you go back to your team and you say you know we we ought to start you know we ought to start taking a critical look at our application and",
    "start": "2307309",
    "end": "2314059"
  },
  {
    "text": "thinking about places where immutability can't change if nine out of ten of your co-workers say you know what this isn't",
    "start": "2314059",
    "end": "2320930"
  },
  {
    "text": "our problem I don't care to learn this I don't care to do things differently I'll actually you have a different problem",
    "start": "2320930",
    "end": "2326000"
  },
  {
    "text": "but at the bottom line is is if you try to chew horn immutability as a mindset",
    "start": "2326000",
    "end": "2331119"
  },
  {
    "text": "inside of your application inside of your co-workers and your and your team in general and it's not working then",
    "start": "2331119",
    "end": "2337849"
  },
  {
    "text": "that's just one of those things that you just kind of have to give up your team has to be in alignment and that's generally speaking true for most",
    "start": "2337849",
    "end": "2343700"
  },
  {
    "text": "technology adoption and I'm telling you that if you shoot horn immutability into dotnet and sacrifice readability or",
    "start": "2343700",
    "end": "2350180"
  },
  {
    "text": "maintaining you're not making you're not solving a problem you're just transferring a problem somewhere else",
    "start": "2350180",
    "end": "2355960"
  },
  {
    "text": "more more importantly immutable thinking has really gotten me thinking about the applications that I create not just the",
    "start": "2355960",
    "end": "2363410"
  },
  {
    "start": "2356000",
    "end": "2426000"
  },
  {
    "text": "C sharp and dotnet that I write but the architecture of those applications so for example the Twitter example was a",
    "start": "2363410",
    "end": "2369710"
  },
  {
    "text": "perfect it was was is a perfect way of expressing that right because we didn't have to worry about tweets having to be",
    "start": "2369710",
    "end": "2376220"
  },
  {
    "text": "edited or changed anyway except for retweets and lights which are additive right they we aren't we are able to",
    "start": "2376220",
    "end": "2384230"
  },
  {
    "text": "simplify our architecture by not making edits a first-class citizen and it's aren't a thing you can only delete make",
    "start": "2384230",
    "end": "2389240"
  },
  {
    "text": "the tweet disappear otherwise you can't do anything with it we didn't have to think about all of those different parts",
    "start": "2389240",
    "end": "2394549"
  },
  {
    "text": "of our architecture imagine if Twitter decided to add an edit button and what they did was when you retweeted a tweet",
    "start": "2394549",
    "end": "2401599"
  },
  {
    "text": "the person who retweeted that tweet that original copies but then when they edited the tweet it",
    "start": "2401599",
    "end": "2407390"
  },
  {
    "text": "stayed the same now you're having just take that tweet and spread it amongst you know save it to a hundred different",
    "start": "2407390",
    "end": "2413570"
  },
  {
    "text": "databases for a hundred different people who retweeted it who knows the problems are endless the problems get complicated",
    "start": "2413570",
    "end": "2418820"
  },
  {
    "text": "so mutable thinking has really kind of blown my mind in a way it just caused me to think about the applications that I",
    "start": "2418820",
    "end": "2425000"
  },
  {
    "text": "build a little differently persistent data structures are a great example persistent data structure is something",
    "start": "2425000",
    "end": "2431090"
  },
  {
    "start": "2426000",
    "end": "2443000"
  },
  {
    "text": "is a data structure that saves a copy of itself when it is changed so what you have essentially is a log kind of a of",
    "start": "2431090",
    "end": "2440000"
  },
  {
    "text": "all of the changes that were made to that object immutable list is a great example of one that is a first-class net",
    "start": "2440000",
    "end": "2446359"
  },
  {
    "start": "2443000",
    "end": "2498000"
  },
  {
    "text": "citizen is a it is a library that is written by the dotnet team too that",
    "start": "2446359",
    "end": "2451640"
  },
  {
    "text": "embraces the idea of a persistent data structure well then I didn't want to mention event sourcing but I think it's",
    "start": "2451640",
    "end": "2457369"
  },
  {
    "text": "worth mentioning because event sourcing really kind of takes that ideal to the extreme the problem with the event",
    "start": "2457369",
    "end": "2463220"
  },
  {
    "text": "sourcing is as many people miss apply it and that's another problem but that idea for example could have saved a situation",
    "start": "2463220",
    "end": "2470510"
  },
  {
    "text": "several years ago at a company that I worked for where suddenly we over wrote all sorts of customer data and we",
    "start": "2470510",
    "end": "2476600"
  },
  {
    "text": "figured out why but recovering from that was incredibly difficult because we had mutated the data in place and not kept a",
    "start": "2476600",
    "end": "2483140"
  },
  {
    "text": "history of the data mutation in this case it was accounting software and we were we were overwriting their vendors",
    "start": "2483140",
    "end": "2489260"
  },
  {
    "text": "and their customers and you can imagine their accountants probably wanted to kill us",
    "start": "2489260",
    "end": "2495340"
  },
  {
    "text": "Countians like don't don't like you messing with your system things like Redux how many people are",
    "start": "2495340",
    "end": "2500840"
  },
  {
    "start": "2498000",
    "end": "2561000"
  },
  {
    "text": "front-end developers in any way shape or form okay a few of you so Redux is a",
    "start": "2500840",
    "end": "2505880"
  },
  {
    "text": "state management application inside of inside it for react and it is it lives",
    "start": "2505880",
    "end": "2513080"
  },
  {
    "text": "on the front end so it's written in JavaScript so it stores it is an opinion about how data is stored and one of the things that it does is it doesn't mutate",
    "start": "2513080",
    "end": "2519890"
  },
  {
    "text": "state directly it actually creates a new copy of state which enables some useful behaviors like a time travel debugging",
    "start": "2519890",
    "end": "2527150"
  },
  {
    "text": "because you're able to see the chain this changes in state if you having to debug you can literally go back in time",
    "start": "2527150",
    "end": "2532280"
  },
  {
    "text": "to a point at which that before a certain mutation took place you're able",
    "start": "2532280",
    "end": "2537859"
  },
  {
    "text": "to go back and see that you're also able to possibly persist that data if you wanted",
    "start": "2537859",
    "end": "2543310"
  },
  {
    "text": "to and enable functions like undo redo like how easy would it be if you had a",
    "start": "2543310",
    "end": "2548560"
  },
  {
    "text": "copy of the previous state and you hit the undo button and you just replace the current state with the previous state",
    "start": "2548560",
    "end": "2553870"
  },
  {
    "text": "right you've not mutated in place you're not taking tracks of mutation you're taking copies of entire objects so it",
    "start": "2553870",
    "end": "2559450"
  },
  {
    "text": "becomes really simple to do and so in that way it's really expanded my mind in",
    "start": "2559450",
    "end": "2565570"
  },
  {
    "start": "2561000",
    "end": "2581000"
  },
  {
    "text": "terms of the in terms of how I think about systems and how I think about building systems and architecture in",
    "start": "2565570",
    "end": "2571900"
  },
  {
    "text": "general and at the end of the day if I can change your mind about immutability",
    "start": "2571900",
    "end": "2577740"
  },
  {
    "text": "might just be able to change the world she's the ending to thank you very much",
    "start": "2577740",
    "end": "2583330"
  },
  {
    "start": "2581000",
    "end": "2846000"
  },
  {
    "text": "I appreciate all you being here I've really got through that really quickly but yeah well it's just the way it goes",
    "start": "2583330",
    "end": "2590110"
  },
  {
    "text": "does anybody have any questions yes the",
    "start": "2590110",
    "end": "2634570"
  },
  {
    "text": "question is let me make sure I summed it up correctly was that was that you had a",
    "start": "2634570",
    "end": "2640120"
  },
  {
    "text": "method that took in an ienumerable and the question was like how do you know that that ienumerable won't be changed",
    "start": "2640120",
    "end": "2645550"
  },
  {
    "text": "by another thread why wouldn't you make it in a new mutable list in that case or something like that",
    "start": "2645550",
    "end": "2651550"
  },
  {
    "text": "the answer is is I thought that something was accessed by could be accessed by multiple threads and I",
    "start": "2651550",
    "end": "2656710"
  },
  {
    "text": "thought if I thought that at all I would defer to using an immutable array or an immutable list or something like that I wouldn't I'd probably go a mutable array",
    "start": "2656710",
    "end": "2663040"
  },
  {
    "text": "if I didn't expect those operations to be exposed because meetable array doesn't expose adds and removes to",
    "start": "2663040",
    "end": "2669640"
  },
  {
    "text": "create different lists so I would I would I would certainly choose to use",
    "start": "2669640",
    "end": "2675160"
  },
  {
    "text": "an immutable array so that way that guarantee is in place if the data is to change then then I want to make sure",
    "start": "2675160",
    "end": "2682480"
  },
  {
    "text": "that you know if I'm in numerating that ienumerable suddenly I get invalid operation exception anyway so you want",
    "start": "2682480",
    "end": "2688570"
  },
  {
    "text": "to protect against that but that's really a question of like that's a bigger question of like what did you write and how did you design what was",
    "start": "2688570",
    "end": "2694600"
  },
  {
    "text": "the design of the thing that you wrote I",
    "start": "2694600",
    "end": "2698160"
  },
  {
    "text": "got you I would I mean in that case like that sounds kind of like a data reader to me",
    "start": "2703410",
    "end": "2709750"
  },
  {
    "text": "but like I mean it to some degree are you is it forward only because you didn't want to like persistent in memory",
    "start": "2709750",
    "end": "2715720"
  },
  {
    "text": "or something like that or you didn't want to persist into memory necessarily or was it already a data structure that",
    "start": "2715720",
    "end": "2720940"
  },
  {
    "text": "was in memory",
    "start": "2720940",
    "end": "2723630"
  },
  {
    "text": "well I mean your question of like a forward only reader that's also immutable to me that's a perfect use of",
    "start": "2755189",
    "end": "2762429"
  },
  {
    "text": "like an iterator or something which uses you know the wheeled keyword inside of an enumerable or if you're talking about",
    "start": "2762429",
    "end": "2767859"
  },
  {
    "text": "async operations async enumerable which was just released in c-sharp eight huh if anybody doesn't isn't familiar with",
    "start": "2767859",
    "end": "2773529"
  },
  {
    "text": "async enumerable go to my website I have a blog post on it and why it's useful and why it's important but your your",
    "start": "2773529",
    "end": "2779559"
  },
  {
    "text": "question is like as it's reading from the database I assume that if it's in the middle of reading it and somebody adds an item to that that database like",
    "start": "2779559",
    "end": "2787329"
  },
  {
    "text": "that item isn't going to be returned but in the middle of a query so most of them",
    "start": "2787329",
    "end": "2793149"
  },
  {
    "text": "most of the time I think you're talking about kind of it's a little bit sounds like a little bit of an edge KC problem but good question you know the bottom",
    "start": "2793149",
    "end": "2800319"
  },
  {
    "text": "line is if you think that the data could mutate by and be mutated by another thread and you want to protect against",
    "start": "2800319",
    "end": "2805329"
  },
  {
    "text": "that immutable immutable collections are the way to go and there's any other",
    "start": "2805329",
    "end": "2810729"
  },
  {
    "text": "questions good question are we just ready to get out here in",
    "start": "2810729",
    "end": "2816999"
  },
  {
    "text": "party all right well listen my twitter handle is at Schneider Bach if you have",
    "start": "2816999",
    "end": "2822429"
  },
  {
    "text": "any other questions for me the conversation doesn't end because we leave here today hit me up on Twitter DM",
    "start": "2822429",
    "end": "2827649"
  },
  {
    "text": "me email me whatever I have lots of contact information on my website but thank you very much for coming to NDC",
    "start": "2827649",
    "end": "2833049"
  },
  {
    "text": "London I hope you had an amazing time and I hope to see you back here in 2021 thank you very much",
    "start": "2833049",
    "end": "2838919"
  },
  {
    "text": "you",
    "start": "2840440",
    "end": "2842500"
  }
]