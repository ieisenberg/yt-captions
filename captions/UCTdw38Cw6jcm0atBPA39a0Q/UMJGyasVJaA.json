[
  {
    "text": "hello everyone oh that's a little loud uh I'm Bryce idstein lb back uh very",
    "start": "3879",
    "end": "9639"
  },
  {
    "text": "glad to be here with you today uh we have come quite away my girlfriend and I came here from the galpagos islandss",
    "start": "9639",
    "end": "16400"
  },
  {
    "text": "because we were in vacation uh last week so we've been traveling for about 24 hours took like four flights across four",
    "start": "16400",
    "end": "24000"
  },
  {
    "text": "different countries but we're here and she took this picture while we were there these are uh blue foot boobies",
    "start": "24000",
    "end": "30599"
  },
  {
    "text": "there's two adult ones and one baby it has nothing to do with the talk it's just a a nice picture so here's another",
    "start": "30599",
    "end": "38120"
  },
  {
    "text": "nice picture so I've worked on programming languages and compilers for over a decade I've uh served as the",
    "start": "38120",
    "end": "44520"
  },
  {
    "text": "chair of the standard C++ Library Evolution Group which designs and",
    "start": "44520",
    "end": "49559"
  },
  {
    "text": "standardizes the C++ standard library but I'm uh I'm retired from that job now",
    "start": "49559",
    "end": "55440"
  },
  {
    "text": "I'm enjoying the easy life so I'm a principal architect at viia where I",
    "start": "55440",
    "end": "60920"
  },
  {
    "text": "drive our strategy for HBC programming models C++ compilers and C++ libraries",
    "start": "60920",
    "end": "66760"
  },
  {
    "text": "and now I do some python stuff too so C++ 20 was the largest release of",
    "start": "66760",
    "end": "74680"
  },
  {
    "text": "C++ in over a decade it delivered four major features modules co- routines Concepts and ranges and dozens of other",
    "start": "74680",
    "end": "81680"
  },
  {
    "text": "additions and improvements in C++ 20 is now pretty much widely available most implementations are shipping most of C++",
    "start": "81680",
    "end": "89439"
  },
  {
    "text": "20 in Productions and we're starting to see more and more adoption and more",
    "start": "89439",
    "end": "94680"
  },
  {
    "text": "projects and organizations switching to C++ 20 as their default and the next C++ standard C++ 23",
    "start": "94680",
    "end": "103159"
  },
  {
    "text": "uh has been out for about a year and there's a lot of exciting changes coming in C++ 23 to name a few there's a bunch",
    "start": "103159",
    "end": "109600"
  },
  {
    "text": "of enhancements and additions to ranges which were added in C++ 20 and there's",
    "start": "109600",
    "end": "114840"
  },
  {
    "text": "formatted output there's MD span which is a multi-dimensional array abstraction it's actually thing that I joined the",
    "start": "114840",
    "end": "120960"
  },
  {
    "text": "C++ committee to originally work on back like 10 years ago so that's about how",
    "start": "120960",
    "end": "126520"
  },
  {
    "text": "long it takes to get a thing into the standard 10 years there's expected a new error reporting Paradigm there's",
    "start": "126520",
    "end": "132520"
  },
  {
    "text": "standard Library modules inducing this and C++ 23 features will start to become",
    "start": "132520",
    "end": "137720"
  },
  {
    "text": "available in your compilers the next you know year or so you'll be able to start playing around with these things pretty",
    "start": "137720",
    "end": "142920"
  },
  {
    "text": "much anywhere so in the months leading up to a new release of C++ our focus is often",
    "start": "142920",
    "end": "149120"
  },
  {
    "text": "on what makes it that release and what doesn't and we tend to put longer term goals on the shelf and today I sort of",
    "start": "149120",
    "end": "154200"
  },
  {
    "text": "want to dust off some of those longer term goals and look Beyond C++ 23 at",
    "start": "154200",
    "end": "159599"
  },
  {
    "text": "what's next for uh C++ so I want to tell you about three features that we're working on features that I think will",
    "start": "159599",
    "end": "165959"
  },
  {
    "text": "revolutionize the way that we write C++ code and two of them are almost",
    "start": "165959",
    "end": "171280"
  },
  {
    "text": "certainly going to be in C++ 26 and those features are reflection which is",
    "start": "171280",
    "end": "176680"
  },
  {
    "text": "one of the ones that'll be in C++ 26 pattern map matching and senders which will also be",
    "start": "176680",
    "end": "183560"
  },
  {
    "text": "in C++ 26 so our exploration today is going to focus on what we can do with",
    "start": "183560",
    "end": "188640"
  },
  {
    "text": "these facilities not the specifics of the committee proposals or the merits of different design decisions this is",
    "start": "188640",
    "end": "195360"
  },
  {
    "text": "really a talk about possibilities not details now much of what I'll show you is tentative uh and in some places a",
    "start": "195360",
    "end": "202799"
  },
  {
    "text": "little speculative in places where the designs are uncertain I've just sort of chosen the option that makes the most",
    "start": "202799",
    "end": "208920"
  },
  {
    "text": "sense to me and ignored to the others and this talks represents my own views I do not speak for the C++ committee and",
    "start": "208920",
    "end": "215439"
  },
  {
    "text": "no single person really can so first we're going to talk about",
    "start": "215439",
    "end": "220959"
  },
  {
    "text": "reflection but to do that we first have to talk about metaprogramming so what is metaprogramming metaprogramming is the",
    "start": "220959",
    "end": "226519"
  },
  {
    "text": "craft of creating or modifying programs as the product of other programs and",
    "start": "226519",
    "end": "232239"
  },
  {
    "text": "reflective metaprogramming is metaprogramming that incorporates data from the program being modified and also",
    "start": "232239",
    "end": "238439"
  },
  {
    "text": "might modify the program itself so there's three components to",
    "start": "238439",
    "end": "243760"
  },
  {
    "text": "reflective metaprogramming first there's reflection extracting information from",
    "start": "243760",
    "end": "248799"
  },
  {
    "text": "the program about the program then you have some compile time programming facilities some tools for manipulating",
    "start": "248799",
    "end": "255640"
  },
  {
    "text": "that information and then finally you need a way to to injection to insert new programmatic entities based on that",
    "start": "255640",
    "end": "262600"
  },
  {
    "text": "compile time logic that executed so let's look at a very simple",
    "start": "262600",
    "end": "268560"
  },
  {
    "text": "example a a function that takes in a numerator and returns its name as a string and so we're using a few new C++",
    "start": "268560",
    "end": "276320"
  },
  {
    "text": "constructs here the rifi operator takes a C++",
    "start": "276320",
    "end": "282520"
  },
  {
    "text": "entity that could be a function a struct in a numerator a variable or even",
    "start": "282520",
    "end": "287919"
  },
  {
    "text": "something like a name space and produces a reflection now a reflection is a handle",
    "start": "287919",
    "end": "295080"
  },
  {
    "text": "to an internal compiler representation of that thing in this case",
    "start": "295080",
    "end": "300240"
  },
  {
    "text": "it's of the type T now stood meta info is the type for",
    "start": "300240",
    "end": "306600"
  },
  {
    "text": "all reflection objects so that carrot T will produce us",
    "start": "306600",
    "end": "311720"
  },
  {
    "text": "a stood meta info object Reflections can be manipulated",
    "start": "311720",
    "end": "317400"
  },
  {
    "text": "and transformed just like any C++ objects so here we pass the reflection",
    "start": "317400",
    "end": "323759"
  },
  {
    "text": "of the enum type t to the function meta members of and meta members of returns a",
    "start": "323759",
    "end": "330720"
  },
  {
    "text": "vector of meta infos that represent all of the enumerators of",
    "start": "330720",
    "end": "338360"
  },
  {
    "text": "T because it's a vector we can use a range based for Loop to iterate through",
    "start": "338560",
    "end": "343680"
  },
  {
    "text": "the elements and here we want to use the new compile time expanded for Loop",
    "start": "343680",
    "end": "349120"
  },
  {
    "text": "template 4 each element may be a different type which a normal for Loop",
    "start": "349120",
    "end": "354240"
  },
  {
    "text": "wouldn't allow in each iteration of this compile",
    "start": "354240",
    "end": "360639"
  },
  {
    "text": "time for Loop we want to check if the enum parameter of the function is equal to the value of the current",
    "start": "360639",
    "end": "367800"
  },
  {
    "text": "enumerator and to do that we need to take the reflection of the current enumerator and turn it back into a real",
    "start": "367800",
    "end": "375599"
  },
  {
    "text": "entity we can do this with the splice operator so the splice operator takes a",
    "start": "375599",
    "end": "381080"
  },
  {
    "text": "reflection value of stood meta info and turns it back into the entity that it",
    "start": "381080",
    "end": "386360"
  },
  {
    "text": "represents in this case the enumerator in question so if we had a you know a type",
    "start": "386360",
    "end": "393440"
  },
  {
    "text": "a reflection of a type turns into a type if we had an expression a reflection of an expression the rayi operator would",
    "start": "393440",
    "end": "400199"
  },
  {
    "text": "turn it into the value of that expression if the parameter is equal to",
    "start": "400199",
    "end": "406280"
  },
  {
    "text": "the current enumerator then we need to return its name and we can get that name",
    "start": "406280",
    "end": "411440"
  },
  {
    "text": "with another function that operates on Reflections met a name",
    "start": "411440",
    "end": "416400"
  },
  {
    "text": "of and that's it so here's another example hash append a",
    "start": "416919",
    "end": "423879"
  },
  {
    "text": "hash protocol that incrementally passes input to a hash",
    "start": "423879",
    "end": "429199"
  },
  {
    "text": "algorithm it takes a hasher object and an object to",
    "start": "429199",
    "end": "435240"
  },
  {
    "text": "Hash first we're going to reflect on the object that we're hashing and use the",
    "start": "435240",
    "end": "440280"
  },
  {
    "text": "members of function to get all of its members now the members of function",
    "start": "440280",
    "end": "446360"
  },
  {
    "text": "takes an optional parameter which filters for certain kind of of members in this case we don't actually want all",
    "start": "446360",
    "end": "452440"
  },
  {
    "text": "the members we just want the non-static data members we don't want any function members we don't want any static data",
    "start": "452440",
    "end": "460560"
  },
  {
    "text": "members next we're going to do a template four over all of those data",
    "start": "460560",
    "end": "466199"
  },
  {
    "text": "members and we use the splice operator to access the data",
    "start": "466199",
    "end": "471879"
  },
  {
    "text": "member and we recursively call Hash append on the member",
    "start": "471879",
    "end": "478639"
  },
  {
    "text": "make sense okay now's the fun",
    "start": "479599",
    "end": "484759"
  },
  {
    "text": "part thus far we've just been splicing Reflections but in many cases we need to",
    "start": "484759",
    "end": "490199"
  },
  {
    "text": "do more complex code injection like creating new identifiers for generated methods and",
    "start": "490199",
    "end": "496639"
  },
  {
    "text": "members we can do this with token sequences a token sequence is a series",
    "start": "496639",
    "end": "502520"
  },
  {
    "text": "of unpar C++ tokens that can be manipulated via metaprogramming and then",
    "start": "502520",
    "end": "508000"
  },
  {
    "text": "injected into a program and the type of a token sequence is stood meta info so a",
    "start": "508000",
    "end": "514200"
  },
  {
    "text": "token sequence does not have to be a valid C++ anything it just it's just a",
    "start": "514200",
    "end": "519599"
  },
  {
    "text": "string of tokens like right here we have a token sequence of C equals that's",
    "start": "519599",
    "end": "527120"
  },
  {
    "text": "fine so let's look at how we'd Implement stood topple with reflection using token",
    "start": "527800",
    "end": "533680"
  },
  {
    "text": "sequences historically topple has been very tricky to implement requiring",
    "start": "533680",
    "end": "538839"
  },
  {
    "text": "thousands of lines of code but with token sequences it's a lot simpler so when manipulating and",
    "start": "538839",
    "end": "546120"
  },
  {
    "text": "injecting token sequences we're often going to use conal blocks which is a new",
    "start": "546120",
    "end": "552480"
  },
  {
    "text": "construct that performs Conex per evaluation of some arbitrary code within",
    "start": "552480",
    "end": "558320"
  },
  {
    "text": "an arbitrary context like a class scope it's somewhat similar to static assert",
    "start": "558320",
    "end": "564680"
  },
  {
    "text": "uh where you know you give it some and it evaluates in it you can put a static assert at class scope or at namespace",
    "start": "564680",
    "end": "572079"
  },
  {
    "text": "scope so everything injected during this conext per block will be placed in the",
    "start": "572079",
    "end": "579959"
  },
  {
    "text": "current context in this case in the body of the class tupple and we'll get to how we do that",
    "start": "579959",
    "end": "586760"
  },
  {
    "text": "injection in a moment so first we get the reflections of all of the types in the tupple using",
    "start": "586760",
    "end": "593760"
  },
  {
    "text": "the rifi operator and we stick them into a vector of meta infos",
    "start": "593760",
    "end": "599720"
  },
  {
    "text": "then for each of those types we create a token sequence with the token capture",
    "start": "599720",
    "end": "606240"
  },
  {
    "text": "operator the token capture operator takes an arbitrary sequence of tokens",
    "start": "606240",
    "end": "611760"
  },
  {
    "text": "and produces a token sequence that's stored in a stood meta info the sequence",
    "start": "611760",
    "end": "617160"
  },
  {
    "text": "of tokens is arbitrary except that it must have balanced braces that that is",
    "start": "617160",
    "end": "622600"
  },
  {
    "text": "there must be as many left braces as there are right braces parentheses can be unbalanced but braces have to be",
    "start": "622600",
    "end": "628959"
  },
  {
    "text": "balanced otherwise we wouldn't be able to parse it so that token sequence will contain a",
    "start": "628959",
    "end": "636120"
  },
  {
    "text": "declaration for a data member we're we're trying to declare each of the data members of the tle and so a declaration",
    "start": "636120",
    "end": "642959"
  },
  {
    "text": "of a data member you have three parts you have the type which we have right",
    "start": "642959",
    "end": "648079"
  },
  {
    "text": "here we'll splice it in using reflection splicing and then we need to give the",
    "start": "648079",
    "end": "654480"
  },
  {
    "text": "Declaration a name so we're going to use this/ ID thing that I'll explain in moment to generate a name and that name",
    "start": "654480",
    "end": "661760"
  },
  {
    "text": "is going to be underscore I where I is its position in the temple so the first element will be underscore 0 then",
    "start": "661760",
    "end": "668600"
  },
  {
    "text": "underscore one then underscore 2 underscore 3 Etc and then finally we have the closing semicolon that is in",
    "start": "668600",
    "end": "676680"
  },
  {
    "text": "the token sequence there now we need to inject this token",
    "start": "676680",
    "end": "684320"
  },
  {
    "text": "sequence which we do with Q injection so Q injection takes a info object that",
    "start": "684320",
    "end": "690480"
  },
  {
    "text": "represents a token sequence and cues it for injection in the current context at",
    "start": "690480",
    "end": "696040"
  },
  {
    "text": "the end of the current constant evaluation and it has to work like this",
    "start": "696040",
    "end": "701399"
  },
  {
    "text": "with a queing model for reasons I don't want to get into just trust",
    "start": "701399",
    "end": "706760"
  },
  {
    "text": "me so let's look at a more complex example we're going to automate writing",
    "start": "707519",
    "end": "713120"
  },
  {
    "text": "properties which are members data members that have a getter and a Setter",
    "start": "713120",
    "end": "720440"
  },
  {
    "text": "method so our property function will take two parameters a reflection of the",
    "start": "720440",
    "end": "726079"
  },
  {
    "text": "type of the property and the name of the",
    "start": "726079",
    "end": "731680"
  },
  {
    "text": "property so first we'll create the name of the new data member in the token",
    "start": "731680",
    "end": "738320"
  },
  {
    "text": "sequence and we're going to just create a a meta info object in this local uh",
    "start": "738320",
    "end": "743959"
  },
  {
    "text": "context here with that name so token sequences can contain a",
    "start": "743959",
    "end": "750399"
  },
  {
    "text": "interpolations which produce tokens from strings expressions or token",
    "start": "750399",
    "end": "755880"
  },
  {
    "text": "sequences so identifier interpolations take strings concatenate them together",
    "start": "755880",
    "end": "761920"
  },
  {
    "text": "and produce a new identifier token in this case we are creating a token called",
    "start": "761920",
    "end": "768720"
  },
  {
    "text": "mcore named the new token is interpolated into a token sequence and",
    "start": "768720",
    "end": "773959"
  },
  {
    "text": "the member variable here will be a stood meta info object that represents the token sequence that contains this newly",
    "start": "773959",
    "end": "781880"
  },
  {
    "text": "generated name value interp interpolation creates",
    "start": "781880",
    "end": "788360"
  },
  {
    "text": "a token representing the value of a Conex per expression if the value is a",
    "start": "788360",
    "end": "794000"
  },
  {
    "text": "reflection then the tokens of the reflected entity are inserted in this",
    "start": "794000",
    "end": "799839"
  },
  {
    "text": "case we are building the Declaration of the data member for this property and so we want to insert the tokens",
    "start": "799839",
    "end": "807240"
  },
  {
    "text": "of the variable type here not the token type if we didn't use interpolation here",
    "start": "807240",
    "end": "814680"
  },
  {
    "text": "if we just typed type here then in the injected code it would just inject the word type instead of the the represented",
    "start": "814680",
    "end": "822839"
  },
  {
    "text": "type here sequence interpolation inserts the",
    "start": "822839",
    "end": "829680"
  },
  {
    "text": "tokens that are in a given token sequence so that means that its argument",
    "start": "829680",
    "end": "834959"
  },
  {
    "text": "has to be a stood meta info object and here we're using it to insert the name that we generated in the line",
    "start": "834959",
    "end": "843759"
  },
  {
    "text": "above and now we inject the whole declaration so the type of the declared",
    "start": "844880",
    "end": "850600"
  },
  {
    "text": "member the name of the declared member and finally a",
    "start": "850600",
    "end": "857079"
  },
  {
    "text": "semicolon okay next we're going to inject a method called git",
    "start": "858120",
    "end": "864320"
  },
  {
    "text": "name we generate the name here with a string Interpol",
    "start": "864320",
    "end": "871040"
  },
  {
    "text": "and this method is just going to return the data member that we've",
    "start": "871040",
    "end": "876639"
  },
  {
    "text": "generated and then next we'll inject a method called set name and it's going to take one",
    "start": "878399",
    "end": "885320"
  },
  {
    "text": "parameter of the properties type and then it will assign that",
    "start": "885320",
    "end": "892320"
  },
  {
    "text": "parameter to the data member so property doesn't return turn",
    "start": "892320",
    "end": "899320"
  },
  {
    "text": "anything it just cues up things for injection into the current context and you use it within one of these con ofal",
    "start": "899320",
    "end": "905800"
  },
  {
    "text": "blocks so let's take a look at how we'd use it so let's write a book class which has two properties title and author both",
    "start": "905800",
    "end": "913279"
  },
  {
    "text": "of which are strings so this first invocation of",
    "start": "913279",
    "end": "918839"
  },
  {
    "text": "property will add a string data member called title A git title function that",
    "start": "918839",
    "end": "924360"
  },
  {
    "text": "returns it and a set title function that sets",
    "start": "924360",
    "end": "930959"
  },
  {
    "text": "and this invocation of property will add an author member a getter and a",
    "start": "932199",
    "end": "939800"
  },
  {
    "text": "Setter I'm going to take questions at the end but there are slide numbers here so if you have a question you can write",
    "start": "939800",
    "end": "945360"
  },
  {
    "text": "down the slide number so reflection can be a powerful tool for automating data layout",
    "start": "945360",
    "end": "952199"
  },
  {
    "text": "Transformations and optimizations one common transformation that can have huge performance impacts",
    "start": "952199",
    "end": "959040"
  },
  {
    "text": "is switching between array of structs where data is stored as a single sequence of multicomponent elements and",
    "start": "959040",
    "end": "966720"
  },
  {
    "text": "struct of arrays where data is stored as one sequence for each separate",
    "start": "966720",
    "end": "973000"
  },
  {
    "text": "component now switching between these two usually requires structural code changes which makes it",
    "start": "973000",
    "end": "980160"
  },
  {
    "text": "harder array of structs is often more intuitive but stru of array usually",
    "start": "980160",
    "end": "985959"
  },
  {
    "text": "offers bettery memory access patterns which can be critical when paralyzing or vectorizing consider this code here",
    "start": "985959",
    "end": "993480"
  },
  {
    "text": "which implies an operation to just the red channel of a sequence of colors or pixels so this will have a strided",
    "start": "993480",
    "end": "1000880"
  },
  {
    "text": "memory access pattern which in some cases may have alignment issues or inhibit",
    "start": "1000880",
    "end": "1008079"
  },
  {
    "text": "vectorization so we can use reflection to write a wrapping type that automates",
    "start": "1008959",
    "end": "1015079"
  },
  {
    "text": "transforming from array of structs to struct of arrays",
    "start": "1015079",
    "end": "1020839"
  },
  {
    "text": "so we've got our reflection type sea which takes a single template parameter the thing that we're reflecting on and",
    "start": "1021199",
    "end": "1027520"
  },
  {
    "text": "the first thing we're going to do is we're going to get the non-static data members of the type that we're wrapping we did this earlier we just called metam",
    "start": "1027520",
    "end": "1035240"
  },
  {
    "text": "meta members of then we're going to inject a vector member for each of the data members of",
    "start": "1035240",
    "end": "1042720"
  },
  {
    "text": "the wrapped type so we have one stood Vector for each of the members of",
    "start": "1042720",
    "end": "1051600"
  },
  {
    "text": "T next we're going to write a Constructor for this class and it will",
    "start": "1051600",
    "end": "1056640"
  },
  {
    "text": "initialize the wrapper from a range of underlying uh structs a range of T's so",
    "start": "1056640",
    "end": "1063039"
  },
  {
    "text": "from array of struct data within that Constructor we have a",
    "start": "1063039",
    "end": "1069200"
  },
  {
    "text": "conel block where we're going to insert the code uh that will actually implement this Constructor so we iterate over each",
    "start": "1069200",
    "end": "1076280"
  },
  {
    "text": "of the component and vectors and inject code to initialize that",
    "start": "1076280",
    "end": "1082440"
  },
  {
    "text": "Vector so for each component Vector we're going to resize it and then we copy the applicable data",
    "start": "1082440",
    "end": "1090640"
  },
  {
    "text": "from the range of array of structs so what's happening here is that",
    "start": "1090640",
    "end": "1098679"
  },
  {
    "text": "this Con Val block happens at compile time and then inside of that con Val block we have a Q injection which",
    "start": "1098679",
    "end": "1105080"
  },
  {
    "text": "creates these token sequences that that can get inserted into this Con structor and those token sequences become real",
    "start": "1105080",
    "end": "1111400"
  },
  {
    "text": "C++ code that runs at runtime we can make our structive array",
    "start": "1111400",
    "end": "1117840"
  },
  {
    "text": "wrapper object act like a range of array of structs so that it can be iterated in",
    "start": "1117840",
    "end": "1123799"
  },
  {
    "text": "the same way as a range of the original type T so the elements of this range",
    "start": "1123799",
    "end": "1129520"
  },
  {
    "text": "would be tuples of references to the underlying components so for example to write an",
    "start": "1129520",
    "end": "1136640"
  },
  {
    "text": "indexing operator instead of a conal block we build up a uh comma separated",
    "start": "1136640",
    "end": "1143039"
  },
  {
    "text": "token and sorry inside of a conal block we build up a comma separated token sequence that will access the I element",
    "start": "1143039",
    "end": "1150080"
  },
  {
    "text": "of each of the component vectors and we're going to use this meta list Builder utility here which handles",
    "start": "1150080",
    "end": "1157760"
  },
  {
    "text": "the commas inserting the commas into this token sequence that we're going to build up and we can just use plus equals",
    "start": "1157760",
    "end": "1163919"
  },
  {
    "text": "to append um more stuff into this token sequence and then it will add the uh the comma",
    "start": "1163919",
    "end": "1170960"
  },
  {
    "text": "there then we use TI to return a topple of references to those elements and",
    "start": "1170960",
    "end": "1177440"
  },
  {
    "text": "we're using it in a token sequence which we're going to inject and notice how we inject a return statement here this",
    "start": "1177440",
    "end": "1184720"
  },
  {
    "text": "function wouldn't actually have a return statement otherwise now that this works because the conel block that we're injecting is",
    "start": "1184720",
    "end": "1191960"
  },
  {
    "text": "within the function body and so that's where this stuff will be injected not into the class body",
    "start": "1191960",
    "end": "1200519"
  },
  {
    "text": "so this same approach can be used to create actual iterators but in the interest of brevity we're not going to",
    "start": "1200720",
    "end": "1206799"
  },
  {
    "text": "look at that in detail I think that this is enough to illustrate the general",
    "start": "1206799",
    "end": "1212000"
  },
  {
    "text": "approach so now we can take our natural and intuitive array of Str",
    "start": "1212000",
    "end": "1217120"
  },
  {
    "text": "code and by simply changing the type of image from Vector to S SOA we've",
    "start": "1217120",
    "end": "1224159"
  },
  {
    "text": "switched the code from array of structs to struct of arrays this changes the",
    "start": "1224159",
    "end": "1229559"
  },
  {
    "text": "memory access pattern for our single Channel operation from strided access to",
    "start": "1229559",
    "end": "1234760"
  },
  {
    "text": "contiguous access which is more cache efficient and easier to vectorize so we go from this to",
    "start": "1234760",
    "end": "1244280"
  },
  {
    "text": "this so I believe that reflection will fundamentally change how we write C++",
    "start": "1245159",
    "end": "1251360"
  },
  {
    "text": "code reflection will help us solve problems that today often require boilerplate macros or external Cod",
    "start": "1251360",
    "end": "1259200"
  },
  {
    "text": "generation like serialization protocol and language bindings instrumentation",
    "start": "1259200",
    "end": "1264640"
  },
  {
    "text": "logging debugging dependency injection Etc it will change how we build and",
    "start": "1264640",
    "end": "1271240"
  },
  {
    "text": "design libraries and how we evolve the language",
    "start": "1271240",
    "end": "1276480"
  },
  {
    "text": "itself this is a giant tortoise and she moves very slowly unlike this talk which",
    "start": "1277360",
    "end": "1283960"
  },
  {
    "text": "is moving very quickly my girlfriend took this picture it's a really good picture",
    "start": "1283960",
    "end": "1289960"
  },
  {
    "text": "okay now let's move on to pattern matching C++ has two selection",
    "start": "1291039",
    "end": "1297080"
  },
  {
    "text": "mechanisms today switches operate on a single",
    "start": "1297080",
    "end": "1302480"
  },
  {
    "text": "integral value which is often too limited you can't use them with string literals or with",
    "start": "1302480",
    "end": "1309400"
  },
  {
    "text": "objects if statements on the other hand operate on arbitrary Boolean Expressions",
    "start": "1309400",
    "end": "1315679"
  },
  {
    "text": "they're powerful and it can express almost anything but they're often too complex and",
    "start": "1315679",
    "end": "1321520"
  },
  {
    "text": "verbose we need something in between the two a powerful but concise way to select",
    "start": "1321520",
    "end": "1326880"
  },
  {
    "text": "and decompose objects and that's what we'll be getting with inspect which is a new selection mechanism for C++ so",
    "start": "1326880",
    "end": "1334559"
  },
  {
    "text": "inspect matches values against patterns and then binds variables when those",
    "start": "1334559",
    "end": "1339799"
  },
  {
    "text": "matches are successful now inspect is an expression",
    "start": "1339799",
    "end": "1345440"
  },
  {
    "text": "not a statement and an expect expression ression takes a parameter the object to",
    "start": "1345440",
    "end": "1351320"
  },
  {
    "text": "select against and a series of patterns there's a variety of different patterns",
    "start": "1351320",
    "end": "1357799"
  },
  {
    "text": "available and I'll highlight a handful of them today each pattern is followed by a",
    "start": "1357799",
    "end": "1364880"
  },
  {
    "text": "statement which is taken if the pattern matches inspect stops at the first match",
    "start": "1364880",
    "end": "1371159"
  },
  {
    "text": "not the best match so it's the first lexical match constant patterns match if the",
    "start": "1371159",
    "end": "1378159"
  },
  {
    "text": "object object is equal to the constant and the Wild Card pattern which is just",
    "start": "1378159",
    "end": "1383760"
  },
  {
    "text": "two underscores will match against anything constant patterns aren't",
    "start": "1383760",
    "end": "1390279"
  },
  {
    "text": "limited to integrals or enums they can be strings or any arbitrary",
    "start": "1390279",
    "end": "1396799"
  },
  {
    "text": "object here's another example Fibonacci written with",
    "start": "1397799",
    "end": "1402880"
  },
  {
    "text": "inspect so here we use the identifier pattern which binds the value to a",
    "start": "1402880",
    "end": "1409799"
  },
  {
    "text": "name in this case a pattern guards can be used to perform",
    "start": "1409799",
    "end": "1416120"
  },
  {
    "text": "arbitary tests for a",
    "start": "1416120",
    "end": "1420120"
  },
  {
    "text": "match now since C++ 17 we've been able to destructure tupple like objects and",
    "start": "1421840",
    "end": "1428840"
  },
  {
    "text": "we can do that with inspect to with compound",
    "start": "1428840",
    "end": "1434320"
  },
  {
    "text": "patterns so this compound pattern consists of of three constant patterns",
    "start": "1434919",
    "end": "1440320"
  },
  {
    "text": "it will match if the object can be destructured into three components like a tupple and if each of those components",
    "start": "1440320",
    "end": "1446159"
  },
  {
    "text": "is equal to the corresponding constant on the other hand this compound",
    "start": "1446159",
    "end": "1451559"
  },
  {
    "text": "pattern consists of three variable patterns so it will match against anything that can be structured into",
    "start": "1451559",
    "end": "1457840"
  },
  {
    "text": "three components regardless of their",
    "start": "1457840",
    "end": "1461960"
  },
  {
    "text": "value alternative patterns can match different types in variant like object objects any like objects and polymorphic",
    "start": "1463520",
    "end": "1470880"
  },
  {
    "text": "objects they give us a much cleaner way to work with variants instead of writing",
    "start": "1470880",
    "end": "1476080"
  },
  {
    "text": "a visitor and calling stad visit which is usually unpleasant we can just inspect the variant and use alternative",
    "start": "1476080",
    "end": "1484720"
  },
  {
    "text": "patterns we can use alternatives to match a polymorphic object against different classes here we have a circle",
    "start": "1485080",
    "end": "1492520"
  },
  {
    "text": "class and a rectangle class both of which inherit from a shape class when",
    "start": "1492520",
    "end": "1497840"
  },
  {
    "text": "inspect a shape we can use a combination of the alternative pattern and the compound pattern to both determine",
    "start": "1497840",
    "end": "1504840"
  },
  {
    "text": "whether the shape is a circle or a rectangle and also decompose it at the same time into its defining",
    "start": "1504840",
    "end": "1511399"
  },
  {
    "text": "characteristics Alternatives can also be useful when working with dependent types in a template as we'll see a little",
    "start": "1511399",
    "end": "1520399"
  },
  {
    "text": "later extractor patterns allow us to completely customize matching and",
    "start": "1520399",
    "end": "1526000"
  },
  {
    "text": "decomposition by implementing our own extractor protocols an extractor is an object that",
    "start": "1526000",
    "end": "1533480"
  },
  {
    "text": "has either an extract or Tri extract method when an extractor pattern is used",
    "start": "1533480",
    "end": "1540320"
  },
  {
    "text": "this method is called with the value under inspection and then if the result of that call has a value it is matched",
    "start": "1540320",
    "end": "1547159"
  },
  {
    "text": "against the child pattern for example in the first pattern",
    "start": "1547159",
    "end": "1554039"
  },
  {
    "text": "in in in this inspect phone number. TR extract will be called and if it returns a",
    "start": "1554039",
    "end": "1560840"
  },
  {
    "text": "value that value will be matched against the compound pattern",
    "start": "1560840",
    "end": "1567278"
  },
  {
    "text": "here now let's look at a more detailed example that combines the power of",
    "start": "1568640",
    "end": "1573679"
  },
  {
    "text": "pattern matching with reflection we're going to write a simple function to serialize C++ objects to",
    "start": "1573679",
    "end": "1581799"
  },
  {
    "text": "Json so our function will take an object that we want to serialize and it will return a stood string",
    "start": "1581799",
    "end": "1589840"
  },
  {
    "text": "first we create the string that will fill with the Json we add an opening brace to it which will close at the end",
    "start": "1589840",
    "end": "1595840"
  },
  {
    "text": "of the function after we've filled it with content we'll get a vector of meta info",
    "start": "1595840",
    "end": "1603200"
  },
  {
    "text": "listing all of the non-static data members of the thing that we're reflecting",
    "start": "1603200",
    "end": "1608600"
  },
  {
    "text": "upon and we'll iterate through it with a template 4 and we'll output the name of each",
    "start": "1608600",
    "end": "1617000"
  },
  {
    "text": "member first using meta name of and then we inspect the member to",
    "start": "1617000",
    "end": "1624000"
  },
  {
    "text": "Output its value so if it's something that's convertible to a string then we output",
    "start": "1624000",
    "end": "1630559"
  },
  {
    "text": "it in quotes if it's a range we recursively",
    "start": "1630559",
    "end": "1636159"
  },
  {
    "text": "call Save Json on each element of the range and then use stood formats default",
    "start": "1636159",
    "end": "1641799"
  },
  {
    "text": "range formatting which happens to Output a Json list",
    "start": "1641799",
    "end": "1648440"
  },
  {
    "text": "if it's a pointer and that pointer is equal to null then we output null which is a Json",
    "start": "1648440",
    "end": "1654919"
  },
  {
    "text": "constant and if a non-null pointer we just output its",
    "start": "1654919",
    "end": "1660960"
  },
  {
    "text": "address if the member satisfies the numeric concept you can match on a concept as",
    "start": "1661080",
    "end": "1667679"
  },
  {
    "text": "well then we output it as a number using the default",
    "start": "1667679",
    "end": "1672760"
  },
  {
    "text": "formatting and if it's a bu we output either true or false as those are constants in",
    "start": "1672760",
    "end": "1679640"
  },
  {
    "text": "Json and then finally if the member is something else we just recursively call",
    "start": "1679640",
    "end": "1684760"
  },
  {
    "text": "Save Json on it and then we add a comma after the",
    "start": "1684760",
    "end": "1690840"
  },
  {
    "text": "member unless it's the last member and then finally after we've done",
    "start": "1690840",
    "end": "1697600"
  },
  {
    "text": "that for each of the members uh and added a closing brace we return the",
    "start": "1697600",
    "end": "1704399"
  },
  {
    "text": "string so that's it and just a few lines of code we've written a powerful and generic serialization function using",
    "start": "1704960",
    "end": "1712360"
  },
  {
    "text": "pattern matching and reflection now writing this today would be a lot more verbose and would likely",
    "start": "1712360",
    "end": "1718760"
  },
  {
    "text": "require each type to opt in and provide its own serialization",
    "start": "1718760",
    "end": "1724919"
  },
  {
    "text": "function so inspect gives us a powerful new way to select and decompose objects",
    "start": "1725519",
    "end": "1732080"
  },
  {
    "text": "it makes working with tupple like and variant like objects far more natural in C++ and I think think it will",
    "start": "1732080",
    "end": "1738519"
  },
  {
    "text": "revolutionize how we write C++ it'll make it a lot easier to express conditional logic and control",
    "start": "1738519",
    "end": "1746880"
  },
  {
    "text": "flow these are sea lions they're quite tired just like you",
    "start": "1747279",
    "end": "1753360"
  },
  {
    "text": "will probably be after this talk but don't worry we are nearing the",
    "start": "1753360",
    "end": "1759720"
  },
  {
    "text": "end I think there's four of them there so finally let's talk about",
    "start": "1759720",
    "end": "1766919"
  },
  {
    "text": "asynchrony in C++ today C++ has no standard model for",
    "start": "1766919",
    "end": "1774600"
  },
  {
    "text": "asynchrony and no standard way to express where things should",
    "start": "1774600",
    "end": "1780519"
  },
  {
    "text": "execute and that's why we're introducing senders a model for asynchronous execution in C++ and there are three key",
    "start": "1780519",
    "end": "1789039"
  },
  {
    "text": "Concepts in the senders model schedulers are lightweight non-owning handles to",
    "start": "1789039",
    "end": "1796440"
  },
  {
    "text": "execution contexts schedulers produce senders and senders represent",
    "start": "1796440",
    "end": "1803080"
  },
  {
    "text": "asynchronous work that will eventually send a signal now a signal is either",
    "start": "1803080",
    "end": "1808880"
  },
  {
    "text": "success and a set of values produced by the work failure and an error produced",
    "start": "1808880",
    "end": "1815320"
  },
  {
    "text": "by the work or cancellation senders can be composed",
    "start": "1815320",
    "end": "1820440"
  },
  {
    "text": "together with sender algorithms to form task graphs now receivers are connected to",
    "start": "1820440",
    "end": "1827679"
  },
  {
    "text": "send ERS and process their asynchronous signals so let's look at a simple",
    "start": "1827679",
    "end": "1835880"
  },
  {
    "text": "example first we need to get a scheduler from somewhere this could be a thread pool it could be some sort of",
    "start": "1835880",
    "end": "1842720"
  },
  {
    "text": "lightweight tasking system it could be a GPU driver",
    "start": "1842720",
    "end": "1847960"
  },
  {
    "text": "Etc to start a chain of work on the scheduler we call schedule on it which",
    "start": "1847960",
    "end": "1854039"
  },
  {
    "text": "returns a sender that sender will complete on the execution context",
    "start": "1854039",
    "end": "1859480"
  },
  {
    "text": "associated with the scheduler it doesn't do any work it's just a handle to start a chain of",
    "start": "1859480",
    "end": "1865960"
  },
  {
    "text": "work next we use a sender algorithm then to compose work onto the sender that we",
    "start": "1865960",
    "end": "1873000"
  },
  {
    "text": "got from the scheduler and this work will then be performed on that same execution",
    "start": "1873000",
    "end": "1880480"
  },
  {
    "text": "context the sender algorithm will return a new sender which we can use to add",
    "start": "1880480",
    "end": "1885960"
  },
  {
    "text": "more work onto the chain finally we wait until the chain of work",
    "start": "1885960",
    "end": "1893080"
  },
  {
    "text": "is completed using syn weight which will return the value sent by the final",
    "start": "1893080",
    "end": "1898639"
  },
  {
    "text": "sender in the chain now most sender operations are",
    "start": "1898639",
    "end": "1904399"
  },
  {
    "text": "pipeable just like range adapters so the semantics here are similar to Unix shells send pipe F pipe G is equivalent",
    "start": "1904399",
    "end": "1913519"
  },
  {
    "text": "to G of f of send so languages like hll APL called this point free style the",
    "start": "1913519",
    "end": "1921240"
  },
  {
    "text": "primary input argument is not explicitly named so this syntax is essential for",
    "start": "1921240",
    "end": "1928000"
  },
  {
    "text": "elegant composition of senders this pipe syntax gives us a clean way to compose",
    "start": "1928000",
    "end": "1933519"
  },
  {
    "text": "chains of senders together in the order that they will be",
    "start": "1933519",
    "end": "1939039"
  },
  {
    "text": "evaluated so let me show you some of the most important sender algorithms that you should know about sender adapters",
    "start": "1939120",
    "end": "1946880"
  },
  {
    "text": "are a type of sender algorithm that take one or more senders as parameters and",
    "start": "1946880",
    "end": "1952760"
  },
  {
    "text": "return a sender so they're the chainable part then takes an invocable f and calls",
    "start": "1952760",
    "end": "1960399"
  },
  {
    "text": "it with the values sent by the prior sender the sender returned from then",
    "start": "1960399",
    "end": "1965720"
  },
  {
    "text": "will send the results of the invocation of f so this is how you attach a",
    "start": "1965720",
    "end": "1970840"
  },
  {
    "text": "continuation to a sender bulk is similar to then it",
    "start": "1970840",
    "end": "1976480"
  },
  {
    "text": "evaluates the invocable once for every index up to n so this is how you do",
    "start": "1976480",
    "end": "1981840"
  },
  {
    "text": "parallel work for example parallel work that you might want to run on a GPU or on some set of",
    "start": "1981840",
    "end": "1987360"
  },
  {
    "text": "threads the sender returned from bulk will just pass along any sender signals",
    "start": "1987360",
    "end": "1993120"
  },
  {
    "text": "that were sent by the prior sender transfer changes the scheduler",
    "start": "1993120",
    "end": "1999000"
  },
  {
    "text": "that will be used for the next sender so it doesn't change anything about work before it in the chain but it says",
    "start": "1999000",
    "end": "2004960"
  },
  {
    "text": "switch to this schedu or for anything that gets added after after",
    "start": "2004960",
    "end": "2010000"
  },
  {
    "text": "me now some senders can only be connected to a single receiver for example because they move any values or",
    "start": "2010000",
    "end": "2017960"
  },
  {
    "text": "errors that they send instead of copying them and we call these oneshot senders",
    "start": "2017960",
    "end": "2023760"
  },
  {
    "text": "senders that can be connected multiple times are called multi-shot senders split will take any type of sender and",
    "start": "2023760",
    "end": "2031279"
  },
  {
    "text": "it will return a multi-shot sender that passes along the signal from the original sender so it will if needed it",
    "start": "2031279",
    "end": "2037399"
  },
  {
    "text": "will create some shared storage somewhere it'll have the original input",
    "start": "2037399",
    "end": "2042600"
  },
  {
    "text": "one shot sender right into that shared storage and then as many things as want to can connect to that shared storage so",
    "start": "2042600",
    "end": "2050200"
  },
  {
    "text": "split senders represent Forks in a sender task graph conversely win all takes multiple",
    "start": "2050200",
    "end": "2058800"
  },
  {
    "text": "input s senders and returns a single aggregate sender that will send the",
    "start": "2058800",
    "end": "2064200"
  },
  {
    "text": "signals from all of those inputs now a sender returned by winall do not have a",
    "start": "2064200",
    "end": "2069679"
  },
  {
    "text": "scheduler associated with them which means they do not promise where they complete whenn all senders represent",
    "start": "2069679",
    "end": "2077118"
  },
  {
    "text": "joins in a sender task Al algori in a sender task graph now when all is not a",
    "start": "2077119",
    "end": "2084878"
  },
  {
    "text": "pip sender adapter because it takes an arbitrary uh set of senders so if it was",
    "start": "2084879",
    "end": "2091320"
  },
  {
    "text": "pipeable it would be ambiguous about whether you meant for this to be a partially app applied form or whether",
    "start": "2091320",
    "end": "2097118"
  },
  {
    "text": "you meant for it to be just these set here now Ure started connects and starts",
    "start": "2097119",
    "end": "2105079"
  },
  {
    "text": "a sender returning a new sender that will pass the signal sent by the original if the input sender is a",
    "start": "2105079",
    "end": "2112160"
  },
  {
    "text": "composition containing other senders those senders will be connected and started as well the sender model is",
    "start": "2112160",
    "end": "2119320"
  },
  {
    "text": "default by lazy stuff doesn't start running until you have connected it",
    "start": "2119320",
    "end": "2124520"
  },
  {
    "text": "somewhere sender factories are another kind of sender algorithm they do not take senders as parameters but they do",
    "start": "2124520",
    "end": "2131960"
  },
  {
    "text": "return a sender so sender factories are used to start new chains and graphs the",
    "start": "2131960",
    "end": "2137560"
  },
  {
    "text": "senders they return are the root nodes and we've already seen one sender Factory which is schedule and that",
    "start": "2137560",
    "end": "2144839"
  },
  {
    "text": "returns a sender that will complete on the specified scheduler and that return sender doesn't send values or represent",
    "start": "2144839",
    "end": "2151480"
  },
  {
    "text": "any actual work as I said before it's just a handle that you can use to compose work on that schedule",
    "start": "2151480",
    "end": "2159640"
  },
  {
    "text": "just is another sender Factory it takes a set of values and produces a sender",
    "start": "2159960",
    "end": "2165400"
  },
  {
    "text": "that will send those values immediately when connected so just takes you know a",
    "start": "2165400",
    "end": "2171040"
  },
  {
    "text": "t and produces a sender of a t it's a way of going from the synchronous world to the asynchronous",
    "start": "2171040",
    "end": "2178079"
  },
  {
    "text": "world the last type of sender algorithm are sender consumers so these take senders but do",
    "start": "2178079",
    "end": "2184920"
  },
  {
    "text": "not return senders so they typically will launch a sender graph by connecting",
    "start": "2184920",
    "end": "2190119"
  },
  {
    "text": "and starting it so they are the leaf nodes of sender graphs syn we is a sender consumer and",
    "start": "2190119",
    "end": "2198400"
  },
  {
    "text": "synchronization primitive that blocks until a sender completes and then returns or throws whatever was",
    "start": "2198400",
    "end": "2206119"
  },
  {
    "text": "sent so we've developed a prototype of senders at Nvidia that supports uh CPU",
    "start": "2206200",
    "end": "2211640"
  },
  {
    "text": "schedulers GPU schedulers and distributed schedulers it's available in our Nvidia HPC compon ER and here's an",
    "start": "2211640",
    "end": "2219119"
  },
  {
    "text": "example uh from our implementation this is a simple electromagnetic wave simulation that solves Max walls",
    "start": "2219119",
    "end": "2225920"
  },
  {
    "text": "equations on a uniform grid this is the entire solver Loop which is expressed as",
    "start": "2225920",
    "end": "2231920"
  },
  {
    "text": "a graph of senders this repeat sender here is just sort of a looping",
    "start": "2231920",
    "end": "2239440"
  },
  {
    "text": "construct so this code can be run with a variety of different schedulers by changing just one line of code the kind",
    "start": "2239440",
    "end": "2246640"
  },
  {
    "text": "ofer pass to the solver we can go from running in line on a single CPU thread",
    "start": "2246640",
    "end": "2252720"
  },
  {
    "text": "to Running In Parallel on a CPU using openm p to running on a single",
    "start": "2252720",
    "end": "2259000"
  },
  {
    "text": "GPU to running on multiple gpus within a single node and to multiple nodes",
    "start": "2259000",
    "end": "2265319"
  },
  {
    "text": "scaling up 2 thousands of gpus all with standard C++ all in a portable",
    "start": "2265319",
    "end": "2273000"
  },
  {
    "text": "fashion so we've ported a simulation from the plos fluid DN framework two",
    "start": "2273000",
    "end": "2278680"
  },
  {
    "text": "senders this simulation models carbon sequestration techniques the porest",
    "start": "2278680",
    "end": "2283920"
  },
  {
    "text": "structure that you see is sandstone that is saturated in saltwater and the red",
    "start": "2283920",
    "end": "2289920"
  },
  {
    "text": "bubbles are liquid CO2 which is injected at the bottom it'll loop around in a moment or so and travels through the",
    "start": "2289920",
    "end": "2296520"
  },
  {
    "text": "Sandstone because of buoyancy forces using a distributed GPU scheduler we've",
    "start": "2296520",
    "end": "2301839"
  },
  {
    "text": "been able to run this application on up to 512 gpus with standard C++ senders you can",
    "start": "2301839",
    "end": "2309480"
  },
  {
    "text": "change one line of code and scale from a single CPU thread up to an entire cluster of",
    "start": "2309480",
    "end": "2316920"
  },
  {
    "text": "gpus a growing number of HPC projects have discovered the productivity and",
    "start": "2317040",
    "end": "2322280"
  },
  {
    "text": "performance advantages of using C++ standard Paralis and I could really only cover a handful of them in this talk if",
    "start": "2322280",
    "end": "2329319"
  },
  {
    "text": "you're interested in seeing more examples here are some excellent open source projects using C++ standard",
    "start": "2329319",
    "end": "2334760"
  },
  {
    "text": "parallelism that you can download and study today I've also given a number of talks on this with the conveniently easy",
    "start": "2334760",
    "end": "2341240"
  },
  {
    "text": "defined title C++ standard parallelism now let's look at an example",
    "start": "2341240",
    "end": "2348839"
  },
  {
    "text": "of senders from the networking world so we're going to do an asynchronous read of an array of data of unknown",
    "start": "2348839",
    "end": "2356960"
  },
  {
    "text": "length so we'll use this Dynamic buffer type to store the data we read in a",
    "start": "2356960",
    "end": "2362000"
  },
  {
    "text": "unique pointer uh as well as the size so our asynchronous read array",
    "start": "2362000",
    "end": "2368960"
  },
  {
    "text": "function will return a sender which will send one of these Dynamic buffer things it will take a handle to whatever",
    "start": "2368960",
    "end": "2376240"
  },
  {
    "text": "networking Library we are working with we'll start our sender Chain by",
    "start": "2376240",
    "end": "2382280"
  },
  {
    "text": "introducing a new Dynamic buffer object with",
    "start": "2382280",
    "end": "2387359"
  },
  {
    "text": "just next we'll use a let value sender adapter to create a scope which will",
    "start": "2388119",
    "end": "2393359"
  },
  {
    "text": "keep the buffer alive for as long as we need it now the first thing we need to do is",
    "start": "2393359",
    "end": "2400000"
  },
  {
    "text": "figure out how big the array will be we'll expect that sender will send a",
    "start": "2400000",
    "end": "2405520"
  },
  {
    "text": "size T that contains the size of the rest of the data so we'll need to read",
    "start": "2405520",
    "end": "2411200"
  },
  {
    "text": "that size T first so we get a span to the size member of this Dynamic buffer",
    "start": "2411200",
    "end": "2418400"
  },
  {
    "text": "uh object and then we call async read a sender adapter with that expects a span",
    "start": "2418400",
    "end": "2425480"
  },
  {
    "text": "and reads into it async re will send the number of bytes",
    "start": "2425480",
    "end": "2431800"
  },
  {
    "text": "that it read so we'll add a then which is going to do three things first we will make",
    "start": "2431800",
    "end": "2439400"
  },
  {
    "text": "sure that we read the number of bytes that we expected which is a size te's Worth next we will read the size and",
    "start": "2439400",
    "end": "2447240"
  },
  {
    "text": "allocate a buffer of the specified size storing it in the unique",
    "start": "2447240",
    "end": "2453000"
  },
  {
    "text": "Putter and finally we will return a span to that",
    "start": "2453000",
    "end": "2459680"
  },
  {
    "text": "storage now we're ready to do a second async read which will read the actual",
    "start": "2461000",
    "end": "2468160"
  },
  {
    "text": "data after that read we have a second then which will confirm that we read the",
    "start": "2468319",
    "end": "2473400"
  },
  {
    "text": "number of bytes that we expected which is the actual data of the array and then with that we are",
    "start": "2473400",
    "end": "2481240"
  },
  {
    "text": "done and we will return the buffer from this function via the sender and some",
    "start": "2481240",
    "end": "2487319"
  },
  {
    "text": "body else can go use it so let's look at another example a generic asynchronous and parallel",
    "start": "2487319",
    "end": "2494440"
  },
  {
    "text": "inclusive scan implemented with senders so it's going to take three",
    "start": "2494440",
    "end": "2499839"
  },
  {
    "text": "parameters a sender which we'll expect to send the input as a range an initial",
    "start": "2499839",
    "end": "2505760"
  },
  {
    "text": "value which will be an immediate and the uh number of tiles to split the input",
    "start": "2505760",
    "end": "2514680"
  },
  {
    "text": "into we're going to use the classic two pass parallel scan approach which is",
    "start": "2514920",
    "end": "2520480"
  },
  {
    "text": "work efficient but not the fastest but it is the simplest for us to show so",
    "start": "2520480",
    "end": "2526400"
  },
  {
    "text": "this requires temporary storage for partial results communicated between tiles so we need to allocate this",
    "start": "2526400",
    "end": "2533440"
  },
  {
    "text": "temporary storage asynchronously once the prior sender has sent us the input",
    "start": "2533440",
    "end": "2539680"
  },
  {
    "text": "the size of the temporary storage depends on the input so we can't do it before then so we'll chain a then sender",
    "start": "2539680",
    "end": "2545960"
  },
  {
    "text": "onto the prior sender in the body of this continuation we'll create a stood Vector to hold the",
    "start": "2545960",
    "end": "2552760"
  },
  {
    "text": "partial results and then we'll return both the input range and the vector that will be",
    "start": "2552760",
    "end": "2559720"
  },
  {
    "text": "sent on to the next thing in the chain next we need to do the first",
    "start": "2559720",
    "end": "2565079"
  },
  {
    "text": "parallel pass called the down sweep we'll use bulk to invoke the body of the",
    "start": "2565079",
    "end": "2570960"
  },
  {
    "text": "pass for each of the tiles the first thing we do for each",
    "start": "2570960",
    "end": "2576800"
  },
  {
    "text": "tile is calculate the range of elements that belong to the tile and then we take all of the",
    "start": "2576800",
    "end": "2583640"
  },
  {
    "text": "elements in each tile and we perform a local serial inclusive scan on",
    "start": "2583640",
    "end": "2591839"
  },
  {
    "text": "them which we do right here in the code next we need to propagate",
    "start": "2591839",
    "end": "2598440"
  },
  {
    "text": "information between the tiles so the sum of each tile needs to be added to the elements of all subsequent tiles",
    "start": "2598440",
    "end": "2608319"
  },
  {
    "text": "we've already computed that sum it's the last element of the local inclusive",
    "start": "2608319",
    "end": "2614880"
  },
  {
    "text": "scan we store that result into the partials",
    "start": "2614880",
    "end": "2619960"
  },
  {
    "text": "vector and assignments to partials from different tiles may happen concurrently but that's perfectly fine each tile uses",
    "start": "2619960",
    "end": "2626920"
  },
  {
    "text": "a different and unique slot in partials and no one reads from partials yet so",
    "start": "2626920",
    "end": "2632440"
  },
  {
    "text": "there's no data race here then after all the tiles have",
    "start": "2632440",
    "end": "2637920"
  },
  {
    "text": "completed their local inclusive scans and written to partials we need to have one execution agent do a Serial scan of",
    "start": "2637920",
    "end": "2646319"
  },
  {
    "text": "partials we do this by piping another then sender onto the chain which will perform the partials inclusive",
    "start": "2646319",
    "end": "2655119"
  },
  {
    "text": "scan this then sender will again pass along the input sequence and the partials",
    "start": "2655880",
    "end": "2663200"
  },
  {
    "text": "Vector the result of the scan over partials looks like this and as you can",
    "start": "2663200",
    "end": "2668720"
  },
  {
    "text": "see the information that each tile needs to add to its elements is in the",
    "start": "2668720",
    "end": "2673960"
  },
  {
    "text": "partials slot for the tile directly preceding it so now we need to go parallel again",
    "start": "2673960",
    "end": "2681680"
  },
  {
    "text": "to distribute that information within all of the tiles and this is called the upsweep pass so we'll P pipe another",
    "start": "2681680",
    "end": "2688839"
  },
  {
    "text": "bulk once again over all tiles and in the body of this bulk we'll need to",
    "start": "2688839",
    "end": "2694319"
  },
  {
    "text": "calculate which elements belong to the current tile just just as we did in the before in the downsweep",
    "start": "2694319",
    "end": "2699800"
  },
  {
    "text": "pass and then we use a Serial for each to increment each element in the tile by",
    "start": "2699800",
    "end": "2705480"
  },
  {
    "text": "the appropriate correction value from the partials vector and after that addition we'll",
    "start": "2705480",
    "end": "2711359"
  },
  {
    "text": "have the correct result so for every element of the output we have the partial sum up to",
    "start": "2711359",
    "end": "2718440"
  },
  {
    "text": "that element finally we want the sender",
    "start": "2718440",
    "end": "2724800"
  },
  {
    "text": "returned by our asynchronous exclusive scan to only send the input sequence not",
    "start": "2724800",
    "end": "2730640"
  },
  {
    "text": "the partials Vector so we add a final then sender which only passes along the input and",
    "start": "2730640",
    "end": "2737839"
  },
  {
    "text": "then the partials Vector will be destroyed when this then sender completes which is what we want because",
    "start": "2737839",
    "end": "2744040"
  },
  {
    "text": "it was temporary storage that we want to go away but we don't want it to go away too",
    "start": "2744040",
    "end": "2750520"
  },
  {
    "text": "early and that's it we are done we've got a generic asynchronous and parallel",
    "start": "2751000",
    "end": "2756480"
  },
  {
    "text": "inclusive scan that we can run on any scheduler we want and at any scale that we want from a small embedded device on",
    "start": "2756480",
    "end": "2763480"
  },
  {
    "text": "a single thread to thousands of gpus just by changing the schedule and",
    "start": "2763480",
    "end": "2770119"
  },
  {
    "text": "it's all standard C++ so",
    "start": "2770119",
    "end": "2775640"
  },
  {
    "text": "reflection pattern matching and senders I believe that these are the three most exciting uh C++ features that we're",
    "start": "2775640",
    "end": "2782520"
  },
  {
    "text": "working on and combined they'll radically improve how we express our ourselves in C++ and allow us to",
    "start": "2782520",
    "end": "2789040"
  },
  {
    "text": "elegantly solve problems that are challenging today and as I mentioned uh",
    "start": "2789040",
    "end": "2795200"
  },
  {
    "text": "senders has already been voted into to C++ 26 it will it's like",
    "start": "2795200",
    "end": "2801040"
  },
  {
    "text": "99.9% chance that it will make it in at this point for it to not be in C++ 26",
    "start": "2801040",
    "end": "2806079"
  },
  {
    "text": "the committee would have to agree to take it out which is very very rare",
    "start": "2806079",
    "end": "2811240"
  },
  {
    "text": "reflection has been design approved for C++ 26 which is really the part now we",
    "start": "2811240",
    "end": "2818079"
  },
  {
    "text": "just have to finalize the specification make sure that no new big",
    "start": "2818079",
    "end": "2824040"
  },
  {
    "text": "design questions arise in getting the specification uh completed and then",
    "start": "2824040",
    "end": "2829880"
  },
  {
    "text": "we'll vote it in probably sometime in the next 3 to six months the part of reflection that's going to be shipping",
    "start": "2829880",
    "end": "2835960"
  },
  {
    "text": "though is just a core proposal it does not include token sequences we're still",
    "start": "2835960",
    "end": "2841240"
  },
  {
    "text": "hopeful that we'll get token sequences uh and things like Q injection in but those may come",
    "start": "2841240",
    "end": "2849880"
  },
  {
    "text": "later so finally I'd like to thank everyone who's worked on the features that I've discussed in this talk or",
    "start": "2849880",
    "end": "2855520"
  },
  {
    "text": "otherwise helped me prepare this material and I'd like to thank all of",
    "start": "2855520",
    "end": "2860920"
  },
  {
    "text": "you for your time and attention and feel free to contact me if you want to learn more uh about standard C++ or get",
    "start": "2860920",
    "end": "2868680"
  },
  {
    "text": "involved uh in the development of C++ you can also check out uh my other talks",
    "start": "2868680",
    "end": "2874960"
  },
  {
    "text": "I neglected to mention earlier if you're interested in learning more about parallel algorithms like that inclusive scan that I showed I have a whole talk",
    "start": "2874960",
    "end": "2881680"
  },
  {
    "text": "on it called think parallel uh you should also check out uh my podcast",
    "start": "2881680",
    "end": "2887400"
  },
  {
    "text": "adsp available on all streaming platforms these are penguins Galapagos",
    "start": "2887400",
    "end": "2892520"
  },
  {
    "text": "penguins they live at the equator even though they're Penguins it's pretty cool these are albatrosses that are",
    "start": "2892520",
    "end": "2900040"
  },
  {
    "text": "performing their their mating dance which is how they know how to find their maate again when they reunite every year",
    "start": "2900040",
    "end": "2908359"
  },
  {
    "text": "so questions yeah I got one in the",
    "start": "2908359",
    "end": "2916119"
  },
  {
    "text": "back no the extractors the the for pattern matching the question is do the extractors need um extractor in the name",
    "start": "2920640",
    "end": "2928040"
  },
  {
    "text": "no an extractor can be called whatever you want it to be called the way that",
    "start": "2928040",
    "end": "2933720"
  },
  {
    "text": "that you know that it's an extractor is just that it it inherits from some type that indicates that it's",
    "start": "2933720",
    "end": "2941040"
  },
  {
    "text": "an extractor and then you use it um uh in in the extractor pattern syntax and",
    "start": "2941040",
    "end": "2947880"
  },
  {
    "text": "then then there's a protocol by which the pattern matching Machinery understands that this thing's an",
    "start": "2947880",
    "end": "2954119"
  },
  {
    "text": "extractor uh we can take a look um",
    "start": "2962640",
    "end": "2968000"
  },
  {
    "text": "so yeah we have phone number extractor here the struct and then we we we create",
    "start": "2968000",
    "end": "2973160"
  },
  {
    "text": "a um an instance of it a con exper instance of it um and then it's the",
    "start": "2973160",
    "end": "2980000"
  },
  {
    "text": "question mark tells says this thing's an extractor and no I I guess I was wrong",
    "start": "2980000",
    "end": "2985280"
  },
  {
    "text": "that there's not actually you just have to implement the protocol you don't have to actually inherit from any class or anything it knows that it's an extractor",
    "start": "2985280",
    "end": "2992319"
  },
  {
    "text": "because you use it with the special extractor pattern any other question",
    "start": "2992319",
    "end": "2998000"
  },
  {
    "text": "questions",
    "start": "2998000",
    "end": "3001000"
  },
  {
    "text": "yeah nobody's nobody's working on it for standardization so that's why it's not",
    "start": "3012040",
    "end": "3017119"
  },
  {
    "text": "making",
    "start": "3017119",
    "end": "3019440"
  },
  {
    "text": "progress um I don't know uh because nobody's currently working on it there",
    "start": "3023079",
    "end": "3029440"
  },
  {
    "text": "there haven't been like to my knowledge there haven't been updates in the last couple committee meetings um whereas",
    "start": "3029440",
    "end": "3035599"
  },
  {
    "text": "things like reflection and senders are things that there's people driving it",
    "start": "3035599",
    "end": "3041480"
  },
  {
    "text": "and there's progress being made on every meeting right now there's not people championing uh pattern matching um or",
    "start": "3041480",
    "end": "3048240"
  },
  {
    "text": "the people who are championing it don't have the Cycles to be able to do big major updates every meeting which is why",
    "start": "3048240",
    "end": "3054040"
  },
  {
    "text": "it's not progressing",
    "start": "3054040",
    "end": "3057359"
  },
  {
    "text": "um I mean circles a a different thing circle's great but it is not uh open",
    "start": "3062960",
    "end": "3069480"
  },
  {
    "text": "source um so I think it's very hard for Circle to get the sort of adoption that it would need um I think circle is a far",
    "start": "3069480",
    "end": "3076079"
  },
  {
    "text": "better compiler than most of the C++ compilers out there circle is like 10 years ahead of all the other compilers",
    "start": "3076079",
    "end": "3082839"
  },
  {
    "text": "and sha is able to move faster than all the other compilers um which is uh uh",
    "start": "3082839",
    "end": "3088880"
  },
  {
    "text": "both speaks to Sha's quality as a person and also is an indictment of the state",
    "start": "3088880",
    "end": "3094680"
  },
  {
    "text": "of C++ compilers however the the path forward for something like circle is",
    "start": "3094680",
    "end": "3100480"
  },
  {
    "text": "unclear uh because we don't have somebody proposing uh to put the circle",
    "start": "3100480",
    "end": "3105799"
  },
  {
    "text": "features into the standard um and the implementation is an open source so",
    "start": "3105799",
    "end": "3112400"
  },
  {
    "text": "people aren't willing to adopt it uh so for right now it remains an an amazing",
    "start": "3112400",
    "end": "3117720"
  },
  {
    "text": "technology that nobody's going to put into",
    "start": "3117720",
    "end": "3121280"
  },
  {
    "text": "production other",
    "start": "3123040",
    "end": "3126400"
  },
  {
    "text": "questions cool everybody asked questions about the the the middle feature the one",
    "start": "3128799",
    "end": "3134480"
  },
  {
    "text": "that we're not we're least likely to get all",
    "start": "3134480",
    "end": "3140359"
  },
  {
    "text": "right it it is probably the most easy to comprehend uh reflection used to be a",
    "start": "3140359",
    "end": "3146079"
  },
  {
    "text": "little bit simpler but now it's now it's not okay all right I'll be around uh the",
    "start": "3146079",
    "end": "3153040"
  },
  {
    "text": "rest of the day and uh tomorrow come find me if you're to shot ask questions during the during the session itself",
    "start": "3153040",
    "end": "3159440"
  },
  {
    "text": "thank y'all [Applause]",
    "start": "3159440",
    "end": "3167310"
  }
]