[
  {
    "text": "so let's get started and let's start with the boring stuff so",
    "start": "1020",
    "end": "6720"
  },
  {
    "text": "my name is Vlad of vladi kananov I am a software architect and a cloud architect I specialize primarily in distributed",
    "start": "6720",
    "end": "14340"
  },
  {
    "text": "systems and domain driven design speaking of which does anyone here already have my latest",
    "start": "14340",
    "end": "21300"
  },
  {
    "text": "book learning to my German design awesome I see a few hands the rest of",
    "start": "21300",
    "end": "26580"
  },
  {
    "text": "you you know what to do right I don't have to say it aloud",
    "start": "26580",
    "end": "30800"
  },
  {
    "text": "now today I'm not going to talk about domain driven designs I really love this subject but today I want to talk about",
    "start": "31619",
    "end": "39140"
  },
  {
    "text": "the material from my upcoming book balancing coupling in software design",
    "start": "39140",
    "end": "46079"
  },
  {
    "text": "to be honest it was supposed to be published like a year and a half or even two years ago but you know I'm a",
    "start": "46079",
    "end": "53039"
  },
  {
    "text": "software engineer so I have to be bad at estimates so don't blame me for that",
    "start": "53039",
    "end": "58199"
  },
  {
    "text": "part of our job so anyway I want to give you a preview of this book today now",
    "start": "58199",
    "end": "64320"
  },
  {
    "text": "this is not going to be a teaser like to advertise against to raise some interest in the book no you'll get some practical",
    "start": "64320",
    "end": "70860"
  },
  {
    "text": "tools that you can use right away if one day",
    "start": "70860",
    "end": "76560"
  },
  {
    "text": "I finished this book before it finishes me then you already know the basic stuff",
    "start": "76560",
    "end": "82680"
  },
  {
    "text": "from it so let's get started there is one quote that lately I've been",
    "start": "82680",
    "end": "89400"
  },
  {
    "text": "using almost all of my presentations so this time in this one I said hey why",
    "start": "89400",
    "end": "94500"
  },
  {
    "text": "should we wait for the middle or the end I'll I'm going to put it right there on the first slide and this is quote by",
    "start": "94500",
    "end": "101040"
  },
  {
    "text": "Ruth Milan she says system design is inherently about boundaries what's in what's out what",
    "start": "101040",
    "end": "107820"
  },
  {
    "text": "spends what moves between and it's about trade-offs it reshapes what is outside",
    "start": "107820",
    "end": "113119"
  },
  {
    "text": "just as it shapes what is inside and I wanted that quote right there on the",
    "start": "113119",
    "end": "119579"
  },
  {
    "text": "first slide because it outlines the overall subject of this talk system",
    "start": "119579",
    "end": "124680"
  },
  {
    "text": "design and more specifically the relationships that span across",
    "start": "124680",
    "end": "130140"
  },
  {
    "text": "boundaries involving the thing that we fear the most coupling",
    "start": "130140",
    "end": "136440"
  },
  {
    "text": "and you know we've always been told that coupling is bad it's evil coupling slows",
    "start": "136440",
    "end": "142800"
  },
  {
    "text": "us down it cripples our systems when working on a code base that doesn't",
    "start": "142800",
    "end": "148020"
  },
  {
    "text": "cooperate with us a code base that resists any changes you want to make",
    "start": "148020",
    "end": "153180"
  },
  {
    "text": "of course you're going to blame it on coupling so as a result not surprisingly what do",
    "start": "153180",
    "end": "159660"
  },
  {
    "text": "we want to do about it well of course we want to decouple everything",
    "start": "159660",
    "end": "165060"
  },
  {
    "text": "we have to break everything apart into those tiny tiny classes objects",
    "start": "165060",
    "end": "170700"
  },
  {
    "text": "microservices to dates or rather yesterday these were serverless functions",
    "start": "170700",
    "end": "177360"
  },
  {
    "text": "whatever the motivation is always the same we want to be able to change every",
    "start": "177360",
    "end": "182640"
  },
  {
    "text": "one of those little boxes independently however what your results are we getting",
    "start": "182640",
    "end": "188700"
  },
  {
    "text": "by focusing on the size of those entities",
    "start": "188700",
    "end": "195060"
  },
  {
    "text": "in many cases we go from coupled piles of code",
    "start": "195060",
    "end": "201300"
  },
  {
    "text": "to distributed piles of code and in a sense that's not surprising as",
    "start": "201300",
    "end": "208620"
  },
  {
    "text": "my friend Matia says here going for as small as possible is almost universally",
    "start": "208620",
    "end": "213959"
  },
  {
    "text": "a bad advice in software design also as Neptune puts it there are many useful",
    "start": "213959",
    "end": "220500"
  },
  {
    "text": "and revealing heuristics for defining the boundaries of a service but size is",
    "start": "220500",
    "end": "226140"
  },
  {
    "text": "one of the least useful and yet we keep on doing that so I know in a sense it's going to sound",
    "start": "226140",
    "end": "234120"
  },
  {
    "text": "somewhat controversial but instead of fighting coupling in this talk I want to",
    "start": "234120",
    "end": "240000"
  },
  {
    "text": "show you a different way of thinking about it and I will even try to convince you that we can use coupling as a tool",
    "start": "240000",
    "end": "247680"
  },
  {
    "text": "for Designing modular systems that's our agenda in the next 40 minutes",
    "start": "247680",
    "end": "253439"
  },
  {
    "text": "or so we are going to explore the nature of that scary Beast that we call coupling we'll start by analyzing what",
    "start": "253439",
    "end": "260280"
  },
  {
    "text": "coupling is exactly sorry we are going to analyze how coupling",
    "start": "260280",
    "end": "265680"
  },
  {
    "text": "manifests itself in different dimensions and ultimately how we can use all that",
    "start": "265680",
    "end": "271740"
  },
  {
    "text": "knowledge to design modular systems so first what is coupling",
    "start": "271740",
    "end": "279300"
  },
  {
    "text": "if we go to the lexical origins of this word it will take us all the way back to Latin where it was composed of two words",
    "start": "279300",
    "end": "287840"
  },
  {
    "text": "meaning fasting together in other words if two things are coupled",
    "start": "287840",
    "end": "294060"
  },
  {
    "text": "it means that they are connected that makes coupling ubiquitous",
    "start": "294060",
    "end": "300300"
  },
  {
    "text": "phenomenal it is everywhere this clicker right here it is coupled to my computer",
    "start": "300300",
    "end": "306080"
  },
  {
    "text": "organs in our bodies are coupled to form us living organisms producing code",
    "start": "306080",
    "end": "314100"
  },
  {
    "text": "or in my case right now insane amount of stress hormones",
    "start": "314100",
    "end": "319620"
  },
  {
    "text": "anyway cars computers cities organisms for that matter any kind of system is",
    "start": "319620",
    "end": "325560"
  },
  {
    "text": "held together by coupling you cannot build a system if all of its components",
    "start": "325560",
    "end": "330660"
  },
  {
    "text": "are going to be disconnected this is just collection of some parts simply grouping them together in some",
    "start": "330660",
    "end": "337919"
  },
  {
    "text": "boundary without making sure that they are able to work together without connecting them",
    "start": "337919",
    "end": "343320"
  },
  {
    "text": "in just a bunch of a fully independent and fully decoupled entities but that's",
    "start": "343320",
    "end": "349919"
  },
  {
    "text": "not a system for a system we need these relationships these connections between the components",
    "start": "349919",
    "end": "357539"
  },
  {
    "text": "so couplings coupling makes the overarching system it makes its value greater than the sum",
    "start": "357539",
    "end": "364320"
  },
  {
    "text": "of its parts therefore makes no sense to try and decouple everything",
    "start": "364320",
    "end": "370500"
  },
  {
    "text": "because coupling is an important part of system design we cannot design a system without those",
    "start": "370500",
    "end": "377039"
  },
  {
    "text": "interactions so in my opinion it makes more sense to",
    "start": "377039",
    "end": "382319"
  },
  {
    "text": "evaluate those inner component relationships that we have in a system and evaluate whether they're working for",
    "start": "382319",
    "end": "389400"
  },
  {
    "text": "us or against us for example say we have these two coupled components the",
    "start": "389400",
    "end": "397620"
  },
  {
    "text": "downstream references and thus depends on the Upstream component",
    "start": "397620",
    "end": "403199"
  },
  {
    "text": "the arrow between them that relationship it defines how these components are integrated it defines how change in the",
    "start": "403199",
    "end": "411120"
  },
  {
    "text": "Upstream is going to whether it's likely or not to break the",
    "start": "411120",
    "end": "417600"
  },
  {
    "text": "integration and require cascading changes in other parts of the system in",
    "start": "417600",
    "end": "423120"
  },
  {
    "text": "Downstream components that are referencing it as Michael lagard says coupling defines",
    "start": "423120",
    "end": "430380"
  },
  {
    "text": "the component's degrees of freedom how freely the components are able to change without affecting the rest of the system",
    "start": "430380",
    "end": "437400"
  },
  {
    "text": "or in other words the way the components are integrated it defines what changes can we make to the",
    "start": "437400",
    "end": "444720"
  },
  {
    "text": "Upstream here without being afraid to break the Integrations and break the the",
    "start": "444720",
    "end": "451319"
  },
  {
    "text": "system and require cascading changes in other components of that system",
    "start": "451319",
    "end": "457740"
  },
  {
    "text": "the interfaces that are used for integration they have to enable some movements or changes but they also have",
    "start": "457740",
    "end": "465300"
  },
  {
    "text": "to prohibit others now this prohibits others part I know it",
    "start": "465300",
    "end": "470580"
  },
  {
    "text": "may sound limiting but actually we don't want unlimited degrees of freedom that would render any system overly",
    "start": "470580",
    "end": "477539"
  },
  {
    "text": "complex and simply unusable for example I don't want this clicker to be coupled to my phone a car or that share for that",
    "start": "477539",
    "end": "485220"
  },
  {
    "text": "matter it makes no sense unlimited degrees of freedom is chaos",
    "start": "485220",
    "end": "490560"
  },
  {
    "text": "instead we want to make some Integrations and changes safe while restraining those that we are not",
    "start": "490560",
    "end": "497099"
  },
  {
    "text": "interested in in other words the design of cross-component interactions should",
    "start": "497099",
    "end": "502620"
  },
  {
    "text": "align the allowed degrees of freedom with our needs and expectations of",
    "start": "502620",
    "end": "508080"
  },
  {
    "text": "future changes in the system we are designing and that makes coupling a first-class",
    "start": "508080",
    "end": "514919"
  },
  {
    "text": "design decision going back to Ruth Milan's quote you want to design what spans and what moves",
    "start": "514919",
    "end": "522419"
  },
  {
    "text": "between the boundaries in a way that enables only the changes and movements",
    "start": "522419",
    "end": "527640"
  },
  {
    "text": "that we actually need to do that we have to understand the",
    "start": "527640",
    "end": "534420"
  },
  {
    "text": "Dynamics of coupling how it works and how it manifests itself the thing is",
    "start": "534420",
    "end": "539940"
  },
  {
    "text": "coupling is not some unidimensional phenomena like it's there or not now it's more complicated it affects a",
    "start": "539940",
    "end": "547440"
  },
  {
    "text": "system or the whole system design in multiple dimensions and the dimensions",
    "start": "547440",
    "end": "552720"
  },
  {
    "text": "of space time and the combination of these two gravitational force if you",
    "start": "552720",
    "end": "558480"
  },
  {
    "text": "will let's go over these dimensions I'm going to start with strength because",
    "start": "558480",
    "end": "564420"
  },
  {
    "text": "that's where we're going to spend the most of our time today that's going to be the heavy one",
    "start": "564420",
    "end": "571200"
  },
  {
    "text": "so the effect of strength is probably the most obvious hflex sort of",
    "start": "571200",
    "end": "576540"
  },
  {
    "text": "gravitational force that pulls components together it defines what is",
    "start": "576540",
    "end": "582360"
  },
  {
    "text": "the impact of a change in one place of a system is going to be on its other",
    "start": "582360",
    "end": "587519"
  },
  {
    "text": "components the harder the strength the more cascading changes will follow and as our industry evolved a number of",
    "start": "587519",
    "end": "594600"
  },
  {
    "text": "models were introduced for evaluating strength of coupling namely coupling in",
    "start": "594600",
    "end": "600060"
  },
  {
    "text": "the structural design methodology and a model called kinesins who here is familiar with structure",
    "start": "600060",
    "end": "606720"
  },
  {
    "text": "design one hand can essence two hands three three hands okay so for",
    "start": "606720",
    "end": "615779"
  },
  {
    "text": "the rest of you let's go briefly over these models now try to focus on the different levels of",
    "start": "615779",
    "end": "623040"
  },
  {
    "text": "these models what they're communicating to us in terms of complexity in terms of",
    "start": "623040",
    "end": "628560"
  },
  {
    "text": "explicitness or implicitness of the interfaces and overall the amount of",
    "start": "628560",
    "end": "633600"
  },
  {
    "text": "knowledge that is being shared across the boundaries of the coupled components",
    "start": "633600",
    "end": "639899"
  },
  {
    "text": "so let's start with structure Design This methodology was introduced",
    "start": "639899",
    "end": "645600"
  },
  {
    "text": "in late 60s early 70s these books you're probably not going to find them on Kindle however if you do",
    "start": "645600",
    "end": "652740"
  },
  {
    "text": "manage to find them especially the red one and you read it without noticing the",
    "start": "652740",
    "end": "659339"
  },
  {
    "text": "publishing date it will sound like the software engineers in that that time were struggling with exactly the same",
    "start": "659339",
    "end": "666000"
  },
  {
    "text": "issues as we do today so it's fascinating so back then to evaluate coupling they",
    "start": "666000",
    "end": "673680"
  },
  {
    "text": "proposed six levels of interconnectedness content common external control stamp and data coupling",
    "start": "673680",
    "end": "680399"
  },
  {
    "text": "this terminology it may sound weird and we are lucky that it sounds weird",
    "start": "680399",
    "end": "687480"
  },
  {
    "text": "because it is based on languages such as Kobo and Fortran so let's see what they mean",
    "start": "687480",
    "end": "694140"
  },
  {
    "text": "the first and the strongest one is content coupling the idea here is simple a module uses private interfaces or in",
    "start": "694140",
    "end": "703200"
  },
  {
    "text": "other words implementation details to communicate with another module",
    "start": "703200",
    "end": "708839"
  },
  {
    "text": "back in those days a typical example of content coupling would be go to state",
    "start": "708839",
    "end": "714540"
  },
  {
    "text": "statement go to line something so whoever writes that they know exactly what happens on that specific line and",
    "start": "714540",
    "end": "722100"
  },
  {
    "text": "if something changes for example another line is added the integration is going to break",
    "start": "722100",
    "end": "728880"
  },
  {
    "text": "now nowadays luckily we are not doing such death defined stunts anymore but we",
    "start": "728880",
    "end": "736500"
  },
  {
    "text": "do have our ways for example reflection we can use reflection to read the value",
    "start": "736500",
    "end": "741540"
  },
  {
    "text": "of a private field or call a private method that's content coupling we are",
    "start": "741540",
    "end": "747899"
  },
  {
    "text": "referencing the contents of the module instead of its public interface",
    "start": "747899",
    "end": "754220"
  },
  {
    "text": "modules are common coupled when they communicate through a globally accessible memory space",
    "start": "754320",
    "end": "760860"
  },
  {
    "text": "this shared memory space is unstructured global binary both modules have to",
    "start": "760860",
    "end": "766860"
  },
  {
    "text": "duplicate the knowledge of how that data in that memory space is structured now",
    "start": "766860",
    "end": "772200"
  },
  {
    "text": "it is not really documented it naturally enforced by that memory space so if one of the modules decides to",
    "start": "772200",
    "end": "779220"
  },
  {
    "text": "change the structure well they better communicate communicate the change to all other modules that are sharing that",
    "start": "779220",
    "end": "786060"
  },
  {
    "text": "knowledge and if they are going to forget a module well the integration is going to break and",
    "start": "786060",
    "end": "792180"
  },
  {
    "text": "the system won't work anymore slightly lighter is the external",
    "start": "792180",
    "end": "797519"
  },
  {
    "text": "coupling here instead of unstructured memory space the modules are using a",
    "start": "797519",
    "end": "803040"
  },
  {
    "text": "global variable this variable can be a primitive or array of Primitives it's still shared",
    "start": "803040",
    "end": "809459"
  },
  {
    "text": "memory but at least this time the interface is somewhat better documented and it's somehow enforced by that shared",
    "start": "809459",
    "end": "817800"
  },
  {
    "text": "memory space now to draw examples from our time let's",
    "start": "817800",
    "end": "822839"
  },
  {
    "text": "say that for common coupling it would be two modules to communicate by reading and",
    "start": "822839",
    "end": "829200"
  },
  {
    "text": "writing to the same file in S3 well that's just binaries binary data",
    "start": "829200",
    "end": "836100"
  },
  {
    "text": "there and they both have to hold that knowledge how to format that data external coupling would be let's say two",
    "start": "836100",
    "end": "842940"
  },
  {
    "text": "modules have to work with the same database yeah it's not really a variable or an",
    "start": "842940",
    "end": "848399"
  },
  {
    "text": "array of variables but the idea is the same we have a shared memory and",
    "start": "848399",
    "end": "854040"
  },
  {
    "text": "the database enforce the format it makes it easier to see if you're going to break the integration or not",
    "start": "854040",
    "end": "860060"
  },
  {
    "text": "unlike the previous case control coupling happens when one module",
    "start": "860060",
    "end": "866760"
  },
  {
    "text": "dictates to another one how to do its job now when this terminology was introduced",
    "start": "866760",
    "end": "873300"
  },
  {
    "text": "the example that was you used pretty much everywhere is a module that passes",
    "start": "873300",
    "end": "879660"
  },
  {
    "text": "some flags that control the execution flow of another module",
    "start": "879660",
    "end": "885720"
  },
  {
    "text": "and in my opinion a more clear way of explaining this level is your business",
    "start": "885720",
    "end": "891660"
  },
  {
    "text": "logic is simply not encapsulated in one module instead it's been split across multiple modules there is a functional",
    "start": "891660",
    "end": "898560"
  },
  {
    "text": "dependency between the two modules if the functionality of the Upstream module will change it will",
    "start": "898560",
    "end": "905880"
  },
  {
    "text": "necessarily affect the downstream module as well",
    "start": "905880",
    "end": "910880"
  },
  {
    "text": "stamped coupled modules are communicating by exchanging data records",
    "start": "911760",
    "end": "916980"
  },
  {
    "text": "these data records are data structures that contain way more information than",
    "start": "916980",
    "end": "922920"
  },
  {
    "text": "is actually needed for integration say for example I'm communicating with a",
    "start": "922920",
    "end": "927959"
  },
  {
    "text": "CRM module and I'm asking for an email address of a certain customer instead",
    "start": "927959",
    "end": "933000"
  },
  {
    "text": "I'm getting a whole data structure containing like tens of hundreds of other fields well I will find the email",
    "start": "933000",
    "end": "941040"
  },
  {
    "text": "that field that I actually need there however sharing that extraneous information makes the consumers more",
    "start": "941040",
    "end": "948060"
  },
  {
    "text": "sensitive to the changes in those data structures of the Upstream module and",
    "start": "948060",
    "end": "953820"
  },
  {
    "text": "overall it doesn't really reflect what data is actually needed for integration",
    "start": "953820",
    "end": "958860"
  },
  {
    "text": "the public interface of the Upstream is wider than it really should be",
    "start": "958860",
    "end": "965399"
  },
  {
    "text": "and finally data coupling this is the lowest and most desirable level in",
    "start": "965399",
    "end": "970800"
  },
  {
    "text": "structure design here the modules are communicating by passing arguments with",
    "start": "970800",
    "end": "975860"
  },
  {
    "text": "integration related data only only the smallest possible subset of data that is",
    "start": "975860",
    "end": "983100"
  },
  {
    "text": "needed for the integration to work in other words this level maximizes",
    "start": "983100",
    "end": "988860"
  },
  {
    "text": "encapsulation of the knowledge by the Upstream module",
    "start": "988860",
    "end": "994079"
  },
  {
    "text": "so overall these these levels reflect how much implementation details are",
    "start": "994079",
    "end": "1000500"
  },
  {
    "text": "shared across boundaries starting from content coupling where almost all",
    "start": "1000500",
    "end": "1005680"
  },
  {
    "text": "implementation details are being shared all the way down to data coupling where",
    "start": "1005680",
    "end": "1010759"
  },
  {
    "text": "the integration interface is both minimized and it is as explicit as",
    "start": "1010759",
    "end": "1016699"
  },
  {
    "text": "possible now these levels of coupling were defined in late 60s early 70s",
    "start": "1016699",
    "end": "1023360"
  },
  {
    "text": "and in 90s Miller pay Jones proposed a different model of measuring coupling",
    "start": "1023360",
    "end": "1029120"
  },
  {
    "text": "this one is more adapted to the object-oriented programming Paradigm and",
    "start": "1029120",
    "end": "1034400"
  },
  {
    "text": "he called it conesance this word again comes from leading and it means having been born together",
    "start": "1034400",
    "end": "1041240"
  },
  {
    "text": "according to Miller components are defined as born together if a change in",
    "start": "1041240",
    "end": "1047418"
  },
  {
    "text": "one component requires a change in another component or if you can",
    "start": "1047419",
    "end": "1053000"
  },
  {
    "text": "postulate a reasonable change that would require both components to change now",
    "start": "1053000",
    "end": "1058400"
  },
  {
    "text": "reasonable is key word here if you have a module that implements a CRM system and you're thinking about well what if",
    "start": "1058400",
    "end": "1065780"
  },
  {
    "text": "tomorrow is going to implement an SMTP server that's not a reasonable change it",
    "start": "1065780",
    "end": "1071000"
  },
  {
    "text": "should be more connected to the real business domain now compared to structure Design This",
    "start": "1071000",
    "end": "1078320"
  },
  {
    "text": "model is more detailed here we have a overall nine levels of",
    "start": "1078320",
    "end": "1083860"
  },
  {
    "text": "interconnectedness and there they're divided into two types static in essence",
    "start": "1083860",
    "end": "1090260"
  },
  {
    "text": "and dynamic Nations the aesthetic levels they can be analyzed just by reading the code they",
    "start": "1090260",
    "end": "1098419"
  },
  {
    "text": "are simply reflecting some compile time dependencies between the components of a system let's start with static in",
    "start": "1098419",
    "end": "1105559"
  },
  {
    "text": "essence and the lowest level here is kinescence of name which means two",
    "start": "1105559",
    "end": "1111860"
  },
  {
    "text": "variables need to have the same name in order to reference the same thing for",
    "start": "1111860",
    "end": "1116960"
  },
  {
    "text": "example person named arguments or simply reading a value from some other variable",
    "start": "1116960",
    "end": "1122059"
  },
  {
    "text": "if you need to know its name you have connections of name",
    "start": "1122059",
    "end": "1127400"
  },
  {
    "text": "a very related type of connections is can essence of type usually they come together this one means that in order to",
    "start": "1127400",
    "end": "1134720"
  },
  {
    "text": "reference something you need to know its type so it doesn't really make a lot of sense",
    "start": "1134720",
    "end": "1142039"
  },
  {
    "text": "today to try to um treat treat them as separate levels usually they come together they both are",
    "start": "1142039",
    "end": "1150080"
  },
  {
    "text": "pretty low on knessing scale they're the lower spots so here we need to know the",
    "start": "1150080",
    "end": "1155480"
  },
  {
    "text": "type for example whether it's a string or an integer can essence of meaning happens when",
    "start": "1155480",
    "end": "1162980"
  },
  {
    "text": "conventions are used to assign meanings to values an a trivial example here is",
    "start": "1162980",
    "end": "1169100"
  },
  {
    "text": "the one on your right status equals seven that magic value seven what does",
    "start": "1169100",
    "end": "1176240"
  },
  {
    "text": "it mean well that knowledge has to be duplicated by whoever is going to use it the upstream and the downstream modules",
    "start": "1176240",
    "end": "1183620"
  },
  {
    "text": "they have to agree on the meaning of seven they have to duplicate that knowledge",
    "start": "1183620",
    "end": "1189380"
  },
  {
    "text": "and that makes them can accent by meaning next one is kinescence of algorithms and",
    "start": "1189380",
    "end": "1196820"
  },
  {
    "text": "this one happens when two modules have to agree on a use of a specific algorithm in order to understand each",
    "start": "1196820",
    "end": "1203480"
  },
  {
    "text": "other typical example here let's say you have two modules that are communicating by",
    "start": "1203480",
    "end": "1209120"
  },
  {
    "text": "exchanging encrypted data well they better use the same algorithm to encrypt",
    "start": "1209120",
    "end": "1214340"
  },
  {
    "text": "and decrypt the data because if they don't the integration is not going to work so",
    "start": "1214340",
    "end": "1220460"
  },
  {
    "text": "they have that knowledge of how the data is encrypted decrypted the use of the",
    "start": "1220460",
    "end": "1227120"
  },
  {
    "text": "algorithm they they need to agree on the use of a specific algorithm makes them",
    "start": "1227120",
    "end": "1232880"
  },
  {
    "text": "kinescent by algorithm now I want to stop here because this name in",
    "start": "1232880",
    "end": "1240740"
  },
  {
    "text": "essence of algorithm makes it sound as if these two modules implement the same",
    "start": "1240740",
    "end": "1246620"
  },
  {
    "text": "algorithm and if they were to implement the same business logic in two places",
    "start": "1246620",
    "end": "1253280"
  },
  {
    "text": "I would put that level of interconnectedness way way above four",
    "start": "1253280",
    "end": "1258500"
  },
  {
    "text": "out of nine I would put it like 9 or 10 or 11 but that's not the case they only",
    "start": "1258500",
    "end": "1263720"
  },
  {
    "text": "have to agree on the use of a specific algorithm to understand each other",
    "start": "1263720",
    "end": "1269240"
  },
  {
    "text": "and then finally we have the knessence of position and this one means that instead of",
    "start": "1269240",
    "end": "1276140"
  },
  {
    "text": "passing values by names they are communicated as an array whereas the",
    "start": "1276140",
    "end": "1282559"
  },
  {
    "text": "meaning of each value is defined by its position in that array now this one",
    "start": "1282559",
    "end": "1288740"
  },
  {
    "text": "again it's we're lucky that it's not really common nowadays but the closest example I can think of",
    "start": "1288740",
    "end": "1295460"
  },
  {
    "text": "is let's say we have a send email method and it receives four strings two from",
    "start": "1295460",
    "end": "1300620"
  },
  {
    "text": "subject and body all fields of the same type string and it makes it really easy",
    "start": "1300620",
    "end": "1306200"
  },
  {
    "text": "to make a mistake for example to start with from and then put the two address",
    "start": "1306200",
    "end": "1312200"
  },
  {
    "text": "and it will cause the system to behave in unintended way so that's an example",
    "start": "1312200",
    "end": "1318080"
  },
  {
    "text": "of kinescence of position so these are the levels of static in",
    "start": "1318080",
    "end": "1324679"
  },
  {
    "text": "essence five five compile time dependencies that reflect how explicit or implicit and integration interface is",
    "start": "1324679",
    "end": "1332299"
  },
  {
    "text": "again in essence of name and type that's the most explicit and conditions of position it makes it",
    "start": "1332299",
    "end": "1339559"
  },
  {
    "text": "really easy to make a mistake in the way you're communicating with the Upstream module",
    "start": "1339559",
    "end": "1346580"
  },
  {
    "text": "second type of connections is kinescence is the dynamic in essence and this one",
    "start": "1346580",
    "end": "1352940"
  },
  {
    "text": "these levels can be identified by examining the runtime behavior of a",
    "start": "1352940",
    "end": "1358159"
  },
  {
    "text": "system in other words these levels reflect runtime dependencies between different",
    "start": "1358159",
    "end": "1363320"
  },
  {
    "text": "components of a system the first level here is",
    "start": "1363320",
    "end": "1368600"
  },
  {
    "text": "kneescence of execution and here what we have a number of operations",
    "start": "1368600",
    "end": "1374780"
  },
  {
    "text": "that have to be executed in a specific order let's say you're working with a database so first we have to open a",
    "start": "1374780",
    "end": "1381440"
  },
  {
    "text": "connection then begin a transaction then execute a query then we're going to commit or roll back the transaction and",
    "start": "1381440",
    "end": "1388520"
  },
  {
    "text": "finally close that transaction these five methods have to be executed in this order and that makes them listened by",
    "start": "1388520",
    "end": "1396320"
  },
  {
    "text": "execution if we start by closing the connection and then opening it well",
    "start": "1396320",
    "end": "1401720"
  },
  {
    "text": "maybe something will happen but not necessarily something that was intended",
    "start": "1401720",
    "end": "1408158"
  },
  {
    "text": "closely related level is conditions of timing and here we have two operations",
    "start": "1408320",
    "end": "1413780"
  },
  {
    "text": "that should be executed in a set period of time after",
    "start": "1413780",
    "end": "1419120"
  },
  {
    "text": "if the first of the the first is being executed going back to the example of a database",
    "start": "1419120",
    "end": "1424700"
  },
  {
    "text": "let's say we have open connection and then if nothing happens for 30 seconds",
    "start": "1424700",
    "end": "1429740"
  },
  {
    "text": "we have to time it out and that makes open connection and timeout connection",
    "start": "1429740",
    "end": "1435380"
  },
  {
    "text": "can Essen by timing we have that set period of time that connects them",
    "start": "1435380",
    "end": "1442059"
  },
  {
    "text": "almost the strongest level is the in essence of value and here we have values",
    "start": "1442580",
    "end": "1448400"
  },
  {
    "text": "that have to change together meaning that there's business invariant or a constraint or business rule that",
    "start": "1448400",
    "end": "1456880"
  },
  {
    "text": "dictates that these values they have to change atomically as one big Atomic",
    "start": "1456880",
    "end": "1464059"
  },
  {
    "text": "transaction or otherwise the system is going to be an incorrect State and a",
    "start": "1464059",
    "end": "1470360"
  },
  {
    "text": "typical example here is let's say we have this data structure that represents three edges of a",
    "start": "1470360",
    "end": "1477860"
  },
  {
    "text": "triangle if we change one of the values in order for that triangle to be mathematically correct we have to change",
    "start": "1477860",
    "end": "1485059"
  },
  {
    "text": "the other two values as well and that makes this data structure",
    "start": "1485059",
    "end": "1490159"
  },
  {
    "text": "Connection by value the its data these three Fields they're",
    "start": "1490159",
    "end": "1495380"
  },
  {
    "text": "recognition by value and finally the highest level is the",
    "start": "1495380",
    "end": "1501980"
  },
  {
    "text": "connections of identity and here we have two objects that must",
    "start": "1501980",
    "end": "1507320"
  },
  {
    "text": "reference the same instance of another object in order to function properly a",
    "start": "1507320",
    "end": "1513020"
  },
  {
    "text": "trivial example here would be two modules managing the same set of data in shared database",
    "start": "1513020",
    "end": "1519740"
  },
  {
    "text": "If instead of sharing the database each module is going to have its own instance of the data and the data is not going to",
    "start": "1519740",
    "end": "1526580"
  },
  {
    "text": "be synchronized between them again the system will end up in an incorrect state so they absolutely must reference the",
    "start": "1526580",
    "end": "1533600"
  },
  {
    "text": "same set of data in order to function properly and that makes them can accent by identity",
    "start": "1533600",
    "end": "1539960"
  },
  {
    "text": "so these are the levels of dynamic in essence the lowest is execution where we",
    "start": "1539960",
    "end": "1545000"
  },
  {
    "text": "have to execute different methods in a specific order and the highest one is identity where a third object is",
    "start": "1545000",
    "end": "1551960"
  },
  {
    "text": "introduced and it's used as a shared memory or shared memory space",
    "start": "1551960",
    "end": "1557659"
  },
  {
    "text": "and and it has been used by the two connected modules",
    "start": "1557659",
    "end": "1562880"
  },
  {
    "text": "now in a sense it sounds like we can combine the draw",
    "start": "1562880",
    "end": "1567919"
  },
  {
    "text": "some parallels between these two models because there are some um",
    "start": "1567919",
    "end": "1573500"
  },
  {
    "text": "some common aspects of the design that are reflected by the two modules however they're quite different for example",
    "start": "1573500",
    "end": "1579860"
  },
  {
    "text": "there are things that are reflected in structure design but are not reflected in connections and vice versa in both",
    "start": "1579860",
    "end": "1587779"
  },
  {
    "text": "models they have some blind spots for example let's say I'm using reflection",
    "start": "1587779",
    "end": "1593000"
  },
  {
    "text": "to read the value of a private field where does it put me on the",
    "start": "1593000",
    "end": "1599720"
  },
  {
    "text": "structure design scale what do you think",
    "start": "1599720",
    "end": "1605620"
  },
  {
    "text": "come on quiz time up up yep content coupling because we",
    "start": "1607520",
    "end": "1614840"
  },
  {
    "text": "are accessing something that wasn't intended for integration the worst level",
    "start": "1614840",
    "end": "1619880"
  },
  {
    "text": "to use reflection to read the value of a private field what do I need to know where does it put me on the connection",
    "start": "1619880",
    "end": "1626419"
  },
  {
    "text": "scale",
    "start": "1626419",
    "end": "1629019"
  },
  {
    "text": "down yep lowest level I need to know its name and type so one model says your code sucks",
    "start": "1631700",
    "end": "1638840"
  },
  {
    "text": "the second says your code is awesome go figure",
    "start": "1638840",
    "end": "1643900"
  },
  {
    "text": "also using the terminology from structure design can be somewhat challenging today if you want to sound",
    "start": "1644240",
    "end": "1650240"
  },
  {
    "text": "smart you can use that terminology you can say well that microservice introduces control coupling",
    "start": "1650240",
    "end": "1656539"
  },
  {
    "text": "you will sound super smart nobody is going to understand what you want but",
    "start": "1656539",
    "end": "1661580"
  },
  {
    "text": "if that's what you need it will work anyway uh",
    "start": "1661580",
    "end": "1669220"
  },
  {
    "text": "so these two models one was introduced in the late 60s another one in the late",
    "start": "1669260",
    "end": "1675679"
  },
  {
    "text": "a or early 90s and this Cadence of 30 years between",
    "start": "1675679",
    "end": "1680900"
  },
  {
    "text": "them makes now a perfect time to start thinking about another way of evaluating strength between a coupled components",
    "start": "1680900",
    "end": "1690500"
  },
  {
    "text": "now I want to show you a model that I call integration strength it's something that I've been using for quite some time",
    "start": "1690500",
    "end": "1696620"
  },
  {
    "text": "now and I find it way more practical and simply more useful more approachable",
    "start": "1696620",
    "end": "1703760"
  },
  {
    "text": "easy to use Easy to implement and I want to show it to you basically what it does it simply combines the previous two",
    "start": "1703760",
    "end": "1710659"
  },
  {
    "text": "models in another with another terminology that is more a",
    "start": "1710659",
    "end": "1717020"
  },
  {
    "text": "easy to understand so here we have only four levels",
    "start": "1717020",
    "end": "1722539"
  },
  {
    "text": "first one is intrusive then functional model and contract coupling",
    "start": "1722539",
    "end": "1727880"
  },
  {
    "text": "as the name suggests intrusive coupling is the highest level and it's synonymous to structure designs content coupling",
    "start": "1727880",
    "end": "1735559"
  },
  {
    "text": "there is something intrusive that that is happening something that was not supposed to happen",
    "start": "1735559",
    "end": "1741559"
  },
  {
    "text": "so modules are integrated through private interfaces they are using something that wasn't intended for",
    "start": "1741559",
    "end": "1746840"
  },
  {
    "text": "integration just as in content coupling in structured design again needless to",
    "start": "1746840",
    "end": "1752840"
  },
  {
    "text": "say that such integration method is fragile and implicit whoever is in charge of that Upstream",
    "start": "1752840",
    "end": "1759260"
  },
  {
    "text": "module they have they have no idea that integration is even taking place so any change they're",
    "start": "1759260",
    "end": "1765500"
  },
  {
    "text": "going to make to their implementation details it it has the potential to break the integration so here we are assuming",
    "start": "1765500",
    "end": "1772700"
  },
  {
    "text": "as if all knowledge is being shared across the boundary of the Upstream module whether it was it was intentional",
    "start": "1772700",
    "end": "1780140"
  },
  {
    "text": "or unintentional the end result is the same next functional coupling",
    "start": "1780140",
    "end": "1788120"
  },
  {
    "text": "this one happens when connected modules are implemented",
    "start": "1788120",
    "end": "1793220"
  },
  {
    "text": "implementing closely related business functionality its practical implication is that the",
    "start": "1793220",
    "end": "1799760"
  },
  {
    "text": "same business requirements are going to trigger simultaneous changes in both components in a sense the levels of",
    "start": "1799760",
    "end": "1808159"
  },
  {
    "text": "dynamic in essence they all reflect this kind of relationship",
    "start": "1808159",
    "end": "1813380"
  },
  {
    "text": "functional coupling also in addition to the the levels of dynamic in essence an",
    "start": "1813380",
    "end": "1820279"
  },
  {
    "text": "extreme example here would be two modules duplicating the same business logic",
    "start": "1820279",
    "end": "1825799"
  },
  {
    "text": "if that duplicated business logic has to change simultaneously by the two modules",
    "start": "1825799",
    "end": "1831679"
  },
  {
    "text": "that's the extreme case of functional coupling and to make it even more",
    "start": "1831679",
    "end": "1836720"
  },
  {
    "text": "implicit they don't have to be connected this can be totally decoupled components",
    "start": "1836720",
    "end": "1843140"
  },
  {
    "text": "of a system that are not working together in any way they just have to",
    "start": "1843140",
    "end": "1848179"
  },
  {
    "text": "change together and whoever is going to implement the change they have to keep that in mind that we have to change that",
    "start": "1848179",
    "end": "1854899"
  },
  {
    "text": "logic in multiple places a lower level of integration strength is",
    "start": "1854899",
    "end": "1861620"
  },
  {
    "text": "model coupling this one means that the components are based on the same model of the business",
    "start": "1861620",
    "end": "1867919"
  },
  {
    "text": "domain this level is somewhat similar to structure design stamp coupling where",
    "start": "1867919",
    "end": "1873679"
  },
  {
    "text": "the Upstream modules module shares way more information about its internal",
    "start": "1873679",
    "end": "1879559"
  },
  {
    "text": "structure than is actually needed for integration having to change that model in multiple",
    "start": "1879559",
    "end": "1887240"
  },
  {
    "text": "places as in the previous case it makes it more difficult to improve that model to evolve it and to change it over time",
    "start": "1887240",
    "end": "1894260"
  },
  {
    "text": "again we are sharing way more knowledge than is needed for integration and it makes the system more prone to cascading",
    "start": "1894260",
    "end": "1902360"
  },
  {
    "text": "changes now in a sense we can say that the",
    "start": "1902360",
    "end": "1907580"
  },
  {
    "text": "levels of static in essence in essence of name type all the way to position they reflect this kind of relationship",
    "start": "1907580",
    "end": "1916700"
  },
  {
    "text": "and finally the lowest level of integration strength is contract coupling here the components are",
    "start": "1916700",
    "end": "1922760"
  },
  {
    "text": "integrated through an explicit integration specific model that is decoupled as much as possible from their",
    "start": "1922760",
    "end": "1929299"
  },
  {
    "text": "implementation model meaning that the implementation can evolve independently of that integration",
    "start": "1929299",
    "end": "1935539"
  },
  {
    "text": "contract if you are familiar with domain driven design then openhost service",
    "start": "1935539",
    "end": "1940580"
  },
  {
    "text": "publish language and the corruption layer all these patterns reflect this kind of relationship relationship that",
    "start": "1940580",
    "end": "1947360"
  },
  {
    "text": "encapsulates as much knowledge as possible about the upstream and exposes",
    "start": "1947360",
    "end": "1952399"
  },
  {
    "text": "another model which is more oriented towards integration",
    "start": "1952399",
    "end": "1957799"
  },
  {
    "text": "that model is intended to contain all changes to the implementation model and",
    "start": "1957799",
    "end": "1963440"
  },
  {
    "text": "avoid cascading changes as much as possible so these are the four levels of",
    "start": "1963440",
    "end": "1969140"
  },
  {
    "text": "integration strength they reflect the amount of knowledge that is shared across components boundaries and how",
    "start": "1969140",
    "end": "1975559"
  },
  {
    "text": "implicit or explicit the integration interfaces are intrusive coupling shares the most",
    "start": "1975559",
    "end": "1981799"
  },
  {
    "text": "knowledge about how that Upstream module is implemented functional coupling reduces the knowledge from how to what",
    "start": "1981799",
    "end": "1988880"
  },
  {
    "text": "what has been implemented and",
    "start": "1988880",
    "end": "1995000"
  },
  {
    "text": "model coupling reduces it further it reduces the knowledge to the knowledge of the business domain that is being",
    "start": "1995000",
    "end": "2001840"
  },
  {
    "text": "used by the Upstream module and finally Contra coupling minimizes the shared",
    "start": "2001840",
    "end": "2007600"
  },
  {
    "text": "knowledge to the knowledge of integration interfaces the bare minimum that is needed for integration to work",
    "start": "2007600",
    "end": "2016299"
  },
  {
    "text": "now let's say that we have two components integrated through intrusive",
    "start": "2016299",
    "end": "2022000"
  },
  {
    "text": "coupling does it mean that this design is necessarily good or bad what do you",
    "start": "2022000",
    "end": "2028240"
  },
  {
    "text": "think quiz time",
    "start": "2028240",
    "end": "2034740"
  },
  {
    "text": "sorry bad okay other opinions",
    "start": "2035200",
    "end": "2040960"
  },
  {
    "text": "oh hello fellow Consultants",
    "start": "2040960",
    "end": "2047159"
  },
  {
    "text": "yeah it depends so let's continue the next Dimension is the dimension of",
    "start": "2047200",
    "end": "2054220"
  },
  {
    "text": "space or a distance and turns out the physical location of components it also",
    "start": "2054220",
    "end": "2059740"
  },
  {
    "text": "affects their level of coupling and the thing is the connections between a systems components they can span",
    "start": "2059740",
    "end": "2065560"
  },
  {
    "text": "different distances these distances can are they're closely related to what we usually call levels of abstraction we",
    "start": "2065560",
    "end": "2073300"
  },
  {
    "text": "can have coupling between individual statements between methods classes namespaces components microservices or",
    "start": "2073300",
    "end": "2080320"
  },
  {
    "text": "whole systems now the question is what do we have on",
    "start": "2080320",
    "end": "2085780"
  },
  {
    "text": "that vertical axis what do you think sorry",
    "start": "2085780",
    "end": "2091599"
  },
  {
    "text": "time yes Yes actually yeah",
    "start": "2091599",
    "end": "2097660"
  },
  {
    "text": "that's the first time getting the answer right away so first of all it represents the",
    "start": "2097660",
    "end": "2105700"
  },
  {
    "text": "coordination effort that is required to implement a change or in other words how long will it take to implement the",
    "start": "2105700",
    "end": "2111280"
  },
  {
    "text": "change the time or the effort that is required the longer the distance between",
    "start": "2111280",
    "end": "2116680"
  },
  {
    "text": "the elements that have to be changed together the more coordination effort is required to actually make the change in",
    "start": "2116680",
    "end": "2123640"
  },
  {
    "text": "other words the cost of change is proportional to the distance between the affected components the further they are",
    "start": "2123640",
    "end": "2130660"
  },
  {
    "text": "apart the harder it's going to be to coordinate the change let's say you have to change two lines in the same method",
    "start": "2130660",
    "end": "2136960"
  },
  {
    "text": "that's going to be orders of magnitude easier than to change two microservices",
    "start": "2136960",
    "end": "2143079"
  },
  {
    "text": "simultaneously which by definition shouldn't be changed simultaneously",
    "start": "2143079",
    "end": "2149020"
  },
  {
    "text": "but that's not the only effect of distance it also affects the component's life",
    "start": "2149020",
    "end": "2155380"
  },
  {
    "text": "cycle coupling in other words how in related are their life cycles as the",
    "start": "2155380",
    "end": "2161320"
  },
  {
    "text": "components are located closer to each other the higher the chances that changing one of them will inadvertently",
    "start": "2161320",
    "end": "2168339"
  },
  {
    "text": "inadvertently affect other components as well for example if you are changing a",
    "start": "2168339",
    "end": "2173680"
  },
  {
    "text": "method of a class chances are that you will also have to change other methods",
    "start": "2173680",
    "end": "2179560"
  },
  {
    "text": "in the same class and the closer these elements are to each other the harder probability for",
    "start": "2179560",
    "end": "2184839"
  },
  {
    "text": "such cascading changes and what's interesting is that",
    "start": "2184839",
    "end": "2191880"
  },
  {
    "text": "the distance between components it defined not only by their physical uh",
    "start": "2192880",
    "end": "2199420"
  },
  {
    "text": "physical location in the code base but also by the organizational structure let's say that we have that extreme",
    "start": "2199420",
    "end": "2206859"
  },
  {
    "text": "example on the right here of two microservices now we can talk about two cases the",
    "start": "2206859",
    "end": "2212859"
  },
  {
    "text": "first one is two microservices that have to change together and they're implemented by the same team versus two",
    "start": "2212859",
    "end": "2220240"
  },
  {
    "text": "microservices implemented by different teams in the latter case we need more integration am",
    "start": "2220240",
    "end": "2226320"
  },
  {
    "text": "more communication and more coordination effort to make that change happen",
    "start": "2226320",
    "end": "2231839"
  },
  {
    "text": "despite the fact that in terms of levels of abstraction we're on the same level",
    "start": "2231839",
    "end": "2238060"
  },
  {
    "text": "but still in that case of multiple teams we have higher distance",
    "start": "2238060",
    "end": "2244800"
  },
  {
    "text": "now let's say that we have some high level of integration strength",
    "start": "2244960",
    "end": "2251260"
  },
  {
    "text": "functional between two systems which means that the",
    "start": "2251260",
    "end": "2256420"
  },
  {
    "text": "distance between them is almost extremely high the integration strength",
    "start": "2256420",
    "end": "2261820"
  },
  {
    "text": "is high as well but I want to ask you the same question is this design necessarily bad",
    "start": "2261820",
    "end": "2270000"
  },
  {
    "text": "or what yeah it depends and sorry",
    "start": "2271900",
    "end": "2278500"
  },
  {
    "text": "could it be better yeah let's see huh so to answer this question we can also",
    "start": "2278500",
    "end": "2285520"
  },
  {
    "text": "ask another question if a tree falls in a forest and nobody is around to hear it fall does it make a sound",
    "start": "2285520",
    "end": "2292540"
  },
  {
    "text": "so if strongly connected components over a large distance never change",
    "start": "2292540",
    "end": "2299079"
  },
  {
    "text": "how the coupling is going to affect us so let's talk about the Third Dimension",
    "start": "2299079",
    "end": "2304540"
  },
  {
    "text": "the dimension of time or volatility and the main question that we have to",
    "start": "2304540",
    "end": "2310180"
  },
  {
    "text": "ask here is how often do we expect that Upstream component to change",
    "start": "2310180",
    "end": "2315220"
  },
  {
    "text": "now it's difficult to make predictions especially about the future as they say however we can use some tools from",
    "start": "2315220",
    "end": "2323460"
  },
  {
    "text": "existing methodologies to evaluate a where should we expect the high stress",
    "start": "2323460",
    "end": "2329320"
  },
  {
    "text": "rate of changes in a system and as a domain driven design Fanboy guess what",
    "start": "2329320",
    "end": "2336220"
  },
  {
    "text": "methodology I'm going to use the management design and the part of domain driven design",
    "start": "2336220",
    "end": "2342579"
  },
  {
    "text": "that can help us here is subdomains so according to domain driven design",
    "start": "2342579",
    "end": "2347700"
  },
  {
    "text": "your business domain is composed of individual business building blocks",
    "start": "2347700",
    "end": "2353920"
  },
  {
    "text": "subdomains a subdomain it defines a fine grade functionality",
    "start": "2353920",
    "end": "2360520"
  },
  {
    "text": "that required for a business to succeed in a more technical language it's a set",
    "start": "2360520",
    "end": "2365859"
  },
  {
    "text": "of cohere in strongly interrelated use cases use cases that work on the same",
    "start": "2365859",
    "end": "2371800"
  },
  {
    "text": "set of data for example or simply use cases that are going to be affected by the same changes in the business",
    "start": "2371800",
    "end": "2378520"
  },
  {
    "text": "requirements what's interesting for us is not all subdomains are the same we have three",
    "start": "2378520",
    "end": "2385540"
  },
  {
    "text": "types core supporting and generic core is all about the company's",
    "start": "2385540",
    "end": "2391480"
  },
  {
    "text": "competitive Advantage these are inventions optimizations intellectual",
    "start": "2391480",
    "end": "2396640"
  },
  {
    "text": "properties everything that differentiates the company from its competitors eventually this is how the",
    "start": "2396640",
    "end": "2404079"
  },
  {
    "text": "company plans to make profits generic subdomains are the opposite",
    "start": "2404079",
    "end": "2409839"
  },
  {
    "text": "these are the solved problems these are the problems that already have accepted Solutions in form of of the Shelf",
    "start": "2409839",
    "end": "2417099"
  },
  {
    "text": "products or open source projects that you can buy or adopt and",
    "start": "2417099",
    "end": "2422140"
  },
  {
    "text": "and use that and forget about that problem overall for example",
    "start": "2422140",
    "end": "2428440"
  },
  {
    "text": "um identity in Access it may be interesting to implement identity and access solution but if you",
    "start": "2428440",
    "end": "2435880"
  },
  {
    "text": "have limited budget then probably you shouldn't do it also encryption algorithm very interesting problem to",
    "start": "2435880",
    "end": "2442000"
  },
  {
    "text": "solve but only if that's your core business otherwise it's going to be an expensive",
    "start": "2442000",
    "end": "2447460"
  },
  {
    "text": "problem to solve so that's a generic subdomain and finally we have supporting",
    "start": "2447460",
    "end": "2453040"
  },
  {
    "text": "subdomains which are somewhere in the middle no ready-made solution exists as in the",
    "start": "2453040",
    "end": "2459280"
  },
  {
    "text": "case of core sub domains however they are not really providing any competitive",
    "start": "2459280",
    "end": "2464380"
  },
  {
    "text": "Advantage for the company the company has to implement them but if",
    "start": "2464380",
    "end": "2470020"
  },
  {
    "text": "there would be an existing solution they would jump on it they would use it because that would allow them to save",
    "start": "2470020",
    "end": "2476440"
  },
  {
    "text": "some time and work on something more important so usually these areas",
    "start": "2476440",
    "end": "2482680"
  },
  {
    "text": "supporting subdomains they are simple there is no complexity here usually these are crowd data entry interfaces",
    "start": "2482680",
    "end": "2489700"
  },
  {
    "text": "ETL jobs stuff that you either want to Outsource or you",
    "start": "2489700",
    "end": "2495220"
  },
  {
    "text": "would be happy to use an existing solution for so overall that makes core subdomains",
    "start": "2495220",
    "end": "2503560"
  },
  {
    "text": "the most volatile business is interested in changing them as frequently as they",
    "start": "2503560",
    "end": "2509740"
  },
  {
    "text": "can because they wanted to optimize them they wanted to increase the competitive advantage that they can gain by",
    "start": "2509740",
    "end": "2517119"
  },
  {
    "text": "implementing a core subdomain in a unique and in a competitive way",
    "start": "2517119",
    "end": "2523240"
  },
  {
    "text": "so when evaluating coupling between components we can ask that question what sub domain",
    "start": "2523240",
    "end": "2530440"
  },
  {
    "text": "of the option component are we looking at is it a core or supporting or generic",
    "start": "2530440",
    "end": "2536200"
  },
  {
    "text": "if it's core then we should expect very high volatility there",
    "start": "2536200",
    "end": "2543040"
  },
  {
    "text": "so these are the three dimensions of coupling that describe the nature of the",
    "start": "2543040",
    "end": "2548440"
  },
  {
    "text": "relationship between two connected components now let's see what insights can we get by combining them so first",
    "start": "2548440",
    "end": "2556119"
  },
  {
    "text": "strength and volatility the higher the strength the higher the probability of cascading changes they are the",
    "start": "2556119",
    "end": "2562900"
  },
  {
    "text": "volatility the more often we will have to take care of those cascading changes so when both are high we get high",
    "start": "2562900",
    "end": "2570220"
  },
  {
    "text": "maintenance effort strength and distance in the components physically increases",
    "start": "2570220",
    "end": "2577060"
  },
  {
    "text": "the coordination effort that is needed to implement a change that affects multiple components",
    "start": "2577060",
    "end": "2583660"
  },
  {
    "text": "High integration strength makes those cascading changes frequent",
    "start": "2583660",
    "end": "2589240"
  },
  {
    "text": "so overall High distance over High a high strength over High distance is",
    "start": "2589240",
    "end": "2595599"
  },
  {
    "text": "going to be a challenging challenging to maintain",
    "start": "2595599",
    "end": "2602020"
  },
  {
    "text": "and finally distance and volatility these two reflect the coordination",
    "start": "2602020",
    "end": "2607480"
  },
  {
    "text": "effort that is needed to evolve that system if both are high expect communication overload",
    "start": "2607480",
    "end": "2614440"
  },
  {
    "text": "frequent communication between different teams or different organization units",
    "start": "2614440",
    "end": "2619540"
  },
  {
    "text": "that Implement those two modules now that's not the whole picture",
    "start": "2619540",
    "end": "2626380"
  },
  {
    "text": "to get the whole picture we need to combine the three dimensions together and combining them together allows us to",
    "start": "2626380",
    "end": "2633819"
  },
  {
    "text": "estimate the pain we are going to endure by maintaining that relationship over",
    "start": "2633819",
    "end": "2639040"
  },
  {
    "text": "time now we can evaluate that Pain by simply",
    "start": "2639040",
    "end": "2646980"
  },
  {
    "text": "multiplying the values of the three dimensions pain maintenance pain is the strength of",
    "start": "2647220",
    "end": "2653859"
  },
  {
    "text": "the relationship times the volatility of the relationship times the distance",
    "start": "2653859",
    "end": "2658960"
  },
  {
    "text": "between the components meaning that if all three are high the pain you are going to suffer is going to",
    "start": "2658960",
    "end": "2665740"
  },
  {
    "text": "be high as well now following this mathematical reasoning let's say that",
    "start": "2665740",
    "end": "2672640"
  },
  {
    "text": "we're dealing with a simple scale here low or high so low will be zero how is going to be one if we wanna to ensure",
    "start": "2672640",
    "end": "2680140"
  },
  {
    "text": "that the pain is minimal it's zero what should we do",
    "start": "2680140",
    "end": "2685319"
  },
  {
    "text": "yes multiply by zero all we need is to make one of them zero and overall the",
    "start": "2687060",
    "end": "2692500"
  },
  {
    "text": "pain is going to be zero as well if we can reduce the integration strength to the minimum",
    "start": "2692500",
    "end": "2698500"
  },
  {
    "text": "or contract coupling it's okay to have high volatility over High distance cascading changes will require lots of",
    "start": "2698500",
    "end": "2705940"
  },
  {
    "text": "collaboration efforts but that minimal strength it also minimizes the number of",
    "start": "2705940",
    "end": "2711400"
  },
  {
    "text": "such cascading changes that are going to happen if both integration strengths and",
    "start": "2711400",
    "end": "2717280"
  },
  {
    "text": "volatility are high and there is nothing you can do about it for example you have two modules that",
    "start": "2717280",
    "end": "2724359"
  },
  {
    "text": "implement the same functionality they're going to be affected by the same",
    "start": "2724359",
    "end": "2729400"
  },
  {
    "text": "changes in the business requirements no matter what you do you will be stuck with that functional",
    "start": "2729400",
    "end": "2735339"
  },
  {
    "text": "dependency so that's going to be a functional coupling so to balance this relationship what we can",
    "start": "2735339",
    "end": "2742060"
  },
  {
    "text": "do is to minimize the distance so that those cascading changes when they are",
    "start": "2742060",
    "end": "2747220"
  },
  {
    "text": "going to happen they won't require High coordination efforts so it's going to be simpler in other words this relationship",
    "start": "2747220",
    "end": "2754660"
  },
  {
    "text": "represents what we usually call High cohesion we are putting in related things close to each other",
    "start": "2754660",
    "end": "2762540"
  },
  {
    "text": "and finally if the volatility is zero sometimes high strength over High",
    "start": "2762640",
    "end": "2768339"
  },
  {
    "text": "distance is acceptable let's say you are integrating with a legacy system",
    "start": "2768339",
    "end": "2773560"
  },
  {
    "text": "by definition you know that it's a legacy system it's not going to change they're not going to be new",
    "start": "2773560",
    "end": "2780220"
  },
  {
    "text": "functionalities added to it it's not going to be refactored so it's okay for",
    "start": "2780220",
    "end": "2785920"
  },
  {
    "text": "example to fetch its database directly from its its data directly from its",
    "start": "2785920",
    "end": "2791079"
  },
  {
    "text": "database so in a sense you introduce an intrusive coupling here but it's balanced by",
    "start": "2791079",
    "end": "2797440"
  },
  {
    "text": "minimal volatility so to sum it up the algorithm to",
    "start": "2797440",
    "end": "2802540"
  },
  {
    "text": "minimize the pain is to estimate or is to eliminate all accidental coupling",
    "start": "2802540",
    "end": "2809560"
  },
  {
    "text": "meaning that if you have high strength see if you can lower it or reduce it not always you can do it",
    "start": "2809560",
    "end": "2817300"
  },
  {
    "text": "sometimes that um integration strength is essential",
    "start": "2817300",
    "end": "2822700"
  },
  {
    "text": "sometimes you need High functional dependency between the connected components or you simply need that",
    "start": "2822700",
    "end": "2830440"
  },
  {
    "text": "model to be shared between the two components for example again I'm wearing my DDD hat bounded context reduces the",
    "start": "2830440",
    "end": "2837760"
  },
  {
    "text": "distance because they have to work with the same model that's the definition of a bounded context a boundary of a model",
    "start": "2837760",
    "end": "2844000"
  },
  {
    "text": "so in a sense it reduces The Distance by separating the usage of that model from",
    "start": "2844000",
    "end": "2849579"
  },
  {
    "text": "other bounded contexts so reduce that integration strength as",
    "start": "2849579",
    "end": "2855940"
  },
  {
    "text": "much as possible and if all fails if you are stuck with high volatility",
    "start": "2855940",
    "end": "2862900"
  },
  {
    "text": "and high strength you can balance it by reducing the distance by",
    "start": "2862900",
    "end": "2868960"
  },
  {
    "text": "by putting those in related components closer to each other",
    "start": "2868960",
    "end": "2874540"
  },
  {
    "text": "we have time for a few examples so let's see",
    "start": "2874540",
    "end": "2880799"
  },
  {
    "text": "we know that referencing let's say we're building a microservices based system and we know that using another",
    "start": "2881319",
    "end": "2888359"
  },
  {
    "text": "microservices database directly is a big No-No we should not do it so let's",
    "start": "2888359",
    "end": "2893380"
  },
  {
    "text": "analyze this scenario of using another Services a database directly and where",
    "start": "2893380",
    "end": "2899980"
  },
  {
    "text": "it puts us on this scale of integration strength integration strength",
    "start": "2899980",
    "end": "2905020"
  },
  {
    "text": "so the first case is let's say that the database was never intended to be shared",
    "start": "2905020",
    "end": "2912400"
  },
  {
    "text": "meaning that the Upstream module doesn't even know that somebody reads that data",
    "start": "2912400",
    "end": "2918220"
  },
  {
    "text": "that makes this relationship intrusive the highest level of integration strength",
    "start": "2918220",
    "end": "2924460"
  },
  {
    "text": "however the authors of the two modules or two components they might have agreed to use that data",
    "start": "2924460",
    "end": "2933040"
  },
  {
    "text": "for some reason whether good or bad but they're aware of it it's not",
    "start": "2933040",
    "end": "2939400"
  },
  {
    "text": "the sum module doing it without the Upstream even know knowing about it or",
    "start": "2939400",
    "end": "2945579"
  },
  {
    "text": "without exiting its private interfaces it was agreed that that database is going to be used by the two modules or",
    "start": "2945579",
    "end": "2952420"
  },
  {
    "text": "the two com should kind of so that's puts us on the functional",
    "start": "2952420",
    "end": "2958300"
  },
  {
    "text": "coupling level another example let's say we have bi",
    "start": "2958300",
    "end": "2963940"
  },
  {
    "text": "department and what do they love to do they love to take our data from",
    "start": "2963940",
    "end": "2969040"
  },
  {
    "text": "operational systems just copy it and then analyze it and then if there is",
    "start": "2969040",
    "end": "2974980"
  },
  {
    "text": "a change in the operational system schema that produces some noise that comes from the bi side",
    "start": "2974980",
    "end": "2982000"
  },
  {
    "text": "thus by doing that they introduced model coupling",
    "start": "2982000",
    "end": "2987579"
  },
  {
    "text": "and finally that database might be there because it contains data that is",
    "start": "2987579",
    "end": "2993400"
  },
  {
    "text": "intended for integration it is meant to be shared for example",
    "start": "2993400",
    "end": "2998440"
  },
  {
    "text": "data mesh sorry the data mesh approach it assumes that",
    "start": "2998440",
    "end": "3005579"
  },
  {
    "text": "you are going to share integration specific data by sharing a database so",
    "start": "3005579",
    "end": "3011280"
  },
  {
    "text": "in that case it's going to be contract coupling next example microservices",
    "start": "3011280",
    "end": "3020280"
  },
  {
    "text": "now don't know about you but and I encountered many situations in which companies looked at their monolith and",
    "start": "3021000",
    "end": "3028200"
  },
  {
    "text": "decided that it's not fashionable anymore they need microservices what should what should we do first",
    "start": "3028200",
    "end": "3034200"
  },
  {
    "text": "let's do a POC let's extract some functionality and let's use some interesting strategy",
    "start": "3034200",
    "end": "3041400"
  },
  {
    "text": "for decomposing that monolith into microservices like saying that a microservice should be no longer than",
    "start": "3041400",
    "end": "3048660"
  },
  {
    "text": "20 lines of code and they're doing it and it works",
    "start": "3048660",
    "end": "3055940"
  },
  {
    "text": "and they're happy about it and they say okay this microservices approach it's awesome so next what we are going to do",
    "start": "3056160",
    "end": "3063540"
  },
  {
    "text": "is to decompose all of our business logic following with the same reasoning",
    "start": "3063540",
    "end": "3069540"
  },
  {
    "text": "and then they end up with a distributed monolith what usually happens is when they're",
    "start": "3069540",
    "end": "3075660"
  },
  {
    "text": "doing a POC they're not going to do it with business critical functionality right they're going to start with",
    "start": "3075660",
    "end": "3081900"
  },
  {
    "text": "supporting or generic subdomains so they have high strength over a high",
    "start": "3081900",
    "end": "3087599"
  },
  {
    "text": "distance that is balanced by low volatility but they continue with the",
    "start": "3087599",
    "end": "3092760"
  },
  {
    "text": "same approach and decompose their core sub domains then they have the three of",
    "start": "3092760",
    "end": "3099420"
  },
  {
    "text": "them high high strength High distance High volatility High pain and then they",
    "start": "3099420",
    "end": "3104819"
  },
  {
    "text": "block that microservices are evil um or serverless functions",
    "start": "3104819",
    "end": "3112880"
  },
  {
    "text": "okay we have more time so I will quickly go over the my German",
    "start": "3113700",
    "end": "3119160"
  },
  {
    "text": "design because you know I am a deadly guy so aggregates",
    "start": "3119160",
    "end": "3124740"
  },
  {
    "text": "the strength is high by definition if you have an aggregate the strength this High volatility is high as well because",
    "start": "3124740",
    "end": "3130380"
  },
  {
    "text": "usually these are core subdomains so what we are doing DDD says bring them",
    "start": "3130380",
    "end": "3135540"
  },
  {
    "text": "close to each other put them in the same boundary reduce the distance",
    "start": "3135540",
    "end": "3141480"
  },
  {
    "text": "supporting subdomains according to DDD this is where you can run some Corners this is where you can use some rapid",
    "start": "3141480",
    "end": "3147180"
  },
  {
    "text": "application development framework and not get crazy with Event Source and Aggregates all that stuff this is where",
    "start": "3147180",
    "end": "3154079"
  },
  {
    "text": "you can do the simplest thing that is going to work why because the volatility is low so it balances the high strength",
    "start": "3154079",
    "end": "3161940"
  },
  {
    "text": "that you may introduce by using those simpler implementation techniques",
    "start": "3161940",
    "end": "3167579"
  },
  {
    "text": "finally as I mentioned before anti-corruption layer open hot service published language these patterns for",
    "start": "3167579",
    "end": "3175500"
  },
  {
    "text": "defining the integration between bounded contexts their goal is to minimize the strength",
    "start": "3175500",
    "end": "3181440"
  },
  {
    "text": "to encapsulate as much knowledge as possible about the implementation details of each bounded context and",
    "start": "3181440",
    "end": "3187920"
  },
  {
    "text": "share an integration specific model and with that we can wrap this whole",
    "start": "3187920",
    "end": "3194099"
  },
  {
    "text": "thing up so again coupling it's an inherent part of system design",
    "start": "3194099",
    "end": "3201960"
  },
  {
    "text": "we cannot avoid it it's always going to be there and it happens in three dimensions we can use different models",
    "start": "3201960",
    "end": "3209280"
  },
  {
    "text": "for evaluating the strength of the relationship this is the one I love because",
    "start": "3209280",
    "end": "3215099"
  },
  {
    "text": "it combines two models connections and structured design it reflects how much knowledge is shared",
    "start": "3215099",
    "end": "3221880"
  },
  {
    "text": "across components boundaries then we have the distance the relationship across physical distances",
    "start": "3221880",
    "end": "3228359"
  },
  {
    "text": "between the connected components the closer there are to each other the higher the life cycle coupling they have",
    "start": "3228359",
    "end": "3234900"
  },
  {
    "text": "to be tested deployed together and the further they are apart the",
    "start": "3234900",
    "end": "3240900"
  },
  {
    "text": "harder it's going to be to change them simultaneously if you have to it will require a higher coordination effort",
    "start": "3240900",
    "end": "3247380"
  },
  {
    "text": "and we have volatility and the question we're asking here the option module that shares that knowledge",
    "start": "3247380",
    "end": "3254400"
  },
  {
    "text": "across its boundary how often it is going to change and we can use the management designs",
    "start": "3254400",
    "end": "3260880"
  },
  {
    "text": "subdomains to evaluate that rate of change we can also use Conway's map to",
    "start": "3260880",
    "end": "3267300"
  },
  {
    "text": "evaluate that and I'm sure there are other techniques overall if we combine the three",
    "start": "3267300",
    "end": "3273119"
  },
  {
    "text": "dimensions together we can get maintenance pain if the three values are high",
    "start": "3273119",
    "end": "3279059"
  },
  {
    "text": "your life is not going to be pretty in the future when you will have to implement",
    "start": "3279059",
    "end": "3285000"
  },
  {
    "text": "Cascadian changes now I said in the beginning that",
    "start": "3285000",
    "end": "3291180"
  },
  {
    "text": "it's not going to be a sales pitch it's not you can use that model however if",
    "start": "3291180",
    "end": "3296940"
  },
  {
    "text": "one day this book will be published you will find a more elaborate a formula there that takes into account",
    "start": "3296940",
    "end": "3304380"
  },
  {
    "text": "some other Concepts like complexity to introduce them here I would need another two hours so yeah",
    "start": "3304380",
    "end": "3313079"
  },
  {
    "text": "what we have here is maintenance pain right now so again I hope that I will finish this",
    "start": "3313079",
    "end": "3321300"
  },
  {
    "text": "book before it finishes me hopefully it's going to happen this year cannot promise anything at this point of time",
    "start": "3321300",
    "end": "3328020"
  },
  {
    "text": "but thank you do we have any questions",
    "start": "3328020",
    "end": "3335700"
  },
  {
    "text": "we still have four and a half minutes",
    "start": "3335700",
    "end": "3340280"
  },
  {
    "text": "yeah any questions one any questions two three four five no questions that means",
    "start": "3343559",
    "end": "3351480"
  },
  {
    "text": "we still have a few more minutes so I'm not going to waste it sorry",
    "start": "3351480",
    "end": "3356480"
  },
  {
    "text": "we are going to take a selfie here",
    "start": "3357240",
    "end": "3360800"
  },
  {
    "text": "say hi thank you",
    "start": "3362760",
    "end": "3369359"
  },
  {
    "text": "thank you",
    "start": "3369359",
    "end": "3371480"
  }
]