[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "welcome to the post JavaScript apocalypse so what I'd like to do with",
    "start": "8880",
    "end": "14320"
  },
  {
    "text": "you today is to share some ideas about what should be in the next language the language that replaces JavaScript being",
    "start": "14320",
    "end": "21800"
  },
  {
    "text": "an optimist I believe there's got to be a next language it doesn't stop here",
    "start": "21800",
    "end": "26840"
  },
  {
    "text": "that that would just be sad for a children right we need to to figure out",
    "start": "26840",
    "end": "32920"
  },
  {
    "text": "a so the title of this talk is actually quite controversial there are some",
    "start": "32920",
    "end": "38040"
  },
  {
    "text": "experts who who say that it it should be the put Javascript apocalypse and others who say no no it's",
    "start": "38040",
    "end": "45320"
  },
  {
    "text": "the patch JavaScript apocalypse and this confusion postp put and Patch is due to http the hypertex",
    "start": "45320",
    "end": "53680"
  },
  {
    "text": "transport protocol it contains three commands for moving some information from one machine to another",
    "start": "53680",
    "end": "60960"
  },
  {
    "text": "and they are almost identical but there are concerns that in",
    "start": "60960",
    "end": "67280"
  },
  {
    "text": "some cases it makes a tremendous difference which one you use that disaster could occur if you're using the",
    "start": "67280",
    "end": "73680"
  },
  {
    "text": "wrong one but it's not clear from looking at the names which one that should be and in what situations so I",
    "start": "73680",
    "end": "80479"
  },
  {
    "text": "see this as a problem I think in a well-designed system it should be",
    "start": "80479",
    "end": "85920"
  },
  {
    "text": "obvious what the correct thing to do is and you shouldn't have to struggle with these sorts of confusion using things so",
    "start": "85920",
    "end": "91479"
  },
  {
    "text": "I look on this as a source of clutter and clutter messes things up and",
    "start": "91479",
    "end": "97640"
  },
  {
    "text": "actually makes things worse for us we spend our Our Lives accumulating",
    "start": "97640",
    "end": "103399"
  },
  {
    "text": "stuff it's been said that the the one who dies with the most tool most toys",
    "start": "103399",
    "end": "109159"
  },
  {
    "text": "wins and so we accumulate all this stuff and we think the stuff that we have has value we think of it in terms of its",
    "start": "109159",
    "end": "115560"
  },
  {
    "text": "cost of acquisition or maybe its cost of replacement but actually the more stuff you have the more likely that the stuff",
    "start": "115560",
    "end": "123240"
  },
  {
    "text": "is going to have negative value to you that it's getting in the way it's actually degrading the quality of your",
    "start": "123240",
    "end": "129560"
  },
  {
    "text": "life in some cases you're looking for something that you know is in your stuff",
    "start": "129560",
    "end": "135200"
  },
  {
    "text": "and you cannot find it because there's all this other stuff in the way so that that extra stuff is reducing the value",
    "start": "135200",
    "end": "142400"
  },
  {
    "text": "of the valuable stuff to zero while adding no value of its own in some cases",
    "start": "142400",
    "end": "148000"
  },
  {
    "text": "some of your stuff is literally destroying other stuff like you might have a pile of stuff and it's the weight",
    "start": "148000",
    "end": "154560"
  },
  {
    "text": "is destroying the stuff that's on the bottom or maybe the stuff on the top is leaking down into the bottom and it's",
    "start": "154560",
    "end": "161920"
  },
  {
    "text": "making stuff worse so uh there's this idea that you can improve the quality of your life by getting rid of some of your",
    "start": "161920",
    "end": "168400"
  },
  {
    "text": "stuff you identify the stuff that you don't need and then you put it on eBay or you sell it or recycle it or you know",
    "start": "168400",
    "end": "175800"
  },
  {
    "text": "if it's worthless you can get rid of it if it's worthless Why did no never mind",
    "start": "175800",
    "end": "181159"
  },
  {
    "text": "anyway thinking about clutter it's a difficult thing to deal with so I Look",
    "start": "181159",
    "end": "186680"
  },
  {
    "text": "to in Authority this is Kari or uh Marie condo a brilliant Japanese woman maybe",
    "start": "186680",
    "end": "193599"
  },
  {
    "start": "187000",
    "end": "226000"
  },
  {
    "text": "the world's biggest Authority on organization she teaches people how to",
    "start": "193599",
    "end": "199360"
  },
  {
    "text": "organize their homes and places so that they can enjoy them better and she",
    "start": "199360",
    "end": "205400"
  },
  {
    "text": "teaches how to store and organize and fold and",
    "start": "205400",
    "end": "210560"
  },
  {
    "text": "get rid of stuff so one of the things she teaches is you go into a room and you",
    "start": "210560",
    "end": "217560"
  },
  {
    "text": "take everything in the room out of the drawers off the shelves and put it in the middle of the floor and then you",
    "start": "217560",
    "end": "223799"
  },
  {
    "text": "pick up each item and you ask a question of each item you",
    "start": "223799",
    "end": "229599"
  },
  {
    "text": "say uh toim which means do you throb do you",
    "start": "229599",
    "end": "236840"
  },
  {
    "text": "vibrate and if the thing speaks to you you then you keep it there's some",
    "start": "236840",
    "end": "242360"
  },
  {
    "text": "emotional connection with that thing that this is something you keep and if it doesn't then you think about getting",
    "start": "242360",
    "end": "250159"
  },
  {
    "text": "rid of it now when she teaches in English she doesn't say throb or vibrate",
    "start": "250159",
    "end": "255920"
  },
  {
    "text": "because it makes some people giggle like that guy uh so instead she",
    "start": "255920",
    "end": "262800"
  },
  {
    "text": "says does it spark Joy which is just delightful so you pick up the thing you",
    "start": "262800",
    "end": "268000"
  },
  {
    "text": "ask does this spark Joy and if it does then you definitely keep it and if not you should consider getting rid of it so",
    "start": "268000",
    "end": "274880"
  },
  {
    "text": "I would like to apply her methodology to our programming systems to our you know",
    "start": "274880",
    "end": "280160"
  },
  {
    "text": "particularly to our programming languages but spark Joy doesn't work for us because everything Sparks joy we love",
    "start": "280160",
    "end": "287800"
  },
  {
    "text": "all the clutter in our languages and we we can't get rid of it and so sparking",
    "start": "287800",
    "end": "293240"
  },
  {
    "text": "Joy is not a sufficient criteria to get rid of the clutter in programming much",
    "start": "293240",
    "end": "298720"
  },
  {
    "start": "294000",
    "end": "315000"
  },
  {
    "text": "as we need to so I want to show you some examples of clutter um things that we've",
    "start": "298720",
    "end": "304479"
  },
  {
    "text": "lived with for a long time perhaps so long that we can't even recognize that they're cluttered and look at what we",
    "start": "304479",
    "end": "310840"
  },
  {
    "text": "might do to clean them up I'm going to start with ASI the",
    "start": "310840",
    "end": "318199"
  },
  {
    "start": "315000",
    "end": "342000"
  },
  {
    "text": "American Standard code for information interchange ASI is a a really important",
    "start": "318199",
    "end": "324520"
  },
  {
    "text": "code U it was for a long time that the standard character set in the United States it is still the first 128",
    "start": "324520",
    "end": "332560"
  },
  {
    "text": "characters of the Unicode set so ASI is still in use everywhere in the",
    "start": "332560",
    "end": "338319"
  },
  {
    "text": "world it contains two characters which are problematic and they were both borrowed",
    "start": "338319",
    "end": "344120"
  },
  {
    "start": "342000",
    "end": "408000"
  },
  {
    "text": "from typewriters space is from the space bar it's a thing that allows the carriage on",
    "start": "344120",
    "end": "350680"
  },
  {
    "text": "the typewriter to move forward one character space and the other is tab tab",
    "start": "350680",
    "end": "355800"
  },
  {
    "text": "was short for tabulator or tabulation it was a key that when you pressed it would",
    "start": "355800",
    "end": "361120"
  },
  {
    "text": "release the carriage allowing it to move freely until it hit a mechanical obstruction called a tab",
    "start": "361120",
    "end": "367440"
  },
  {
    "text": "stop and the purpose of tab was to make it easier to type in Columns of",
    "start": "367440",
    "end": "373240"
  },
  {
    "text": "numbers so we have both of these characters and they can both be used in",
    "start": "373240",
    "end": "379360"
  },
  {
    "text": "the preparation of computer programs and it's not obvious which is better than",
    "start": "379360",
    "end": "384599"
  },
  {
    "text": "the other and so we use them both which is itself a problem because",
    "start": "384599",
    "end": "389759"
  },
  {
    "text": "there's some coding standards which are hostile to one another it makes interoperability more difficult sometimes makes formatting more",
    "start": "389759",
    "end": "395800"
  },
  {
    "text": "difficult but more than that it's just a colossal waste of time that this argument about tabs versus spaces just",
    "start": "395800",
    "end": "402280"
  },
  {
    "text": "goes on and there's no end because it doesn't appear that anybody's right so um there is a brilliant show on HBO",
    "start": "402280",
    "end": "410440"
  },
  {
    "start": "408000",
    "end": "438000"
  },
  {
    "text": "called Silicon Valley has anybody seen Silicon Valley it's the best show ever made about",
    "start": "410440",
    "end": "416960"
  },
  {
    "text": "programming you should all go out and buy why HBO because HBO deserves to be",
    "start": "416960",
    "end": "422639"
  },
  {
    "text": "compensated for making such a good show about what we do no one else has done that so you know you also get if you buy",
    "start": "422639",
    "end": "430440"
  },
  {
    "text": "silk and Valley you also get Game of Thrones and westw world and stuff like that but this is the show you want this",
    "start": "430440",
    "end": "435800"
  },
  {
    "text": "is the good stuff so it's about Richard Hendrick who is a brilliant programmer",
    "start": "435800",
    "end": "441639"
  },
  {
    "start": "438000",
    "end": "458000"
  },
  {
    "text": "and his adventures in trying to start a software company in California he's a brilliant guy he works",
    "start": "441639",
    "end": "448440"
  },
  {
    "text": "really hard he's spending so much time trying to start his company that he doesn't have time to find a",
    "start": "448440",
    "end": "453639"
  },
  {
    "text": "girlfriend you might know the type or you might be the type anyway in season 3 he finally finds",
    "start": "453639",
    "end": "460720"
  },
  {
    "text": "someone and she's perfect for him she's nice she's smart she's a programmer she",
    "start": "460720",
    "end": "466919"
  },
  {
    "text": "seems to like him for some reason but she uses spaces instead of",
    "start": "466919",
    "end": "473360"
  },
  {
    "text": "tabs and it makes him crazy and it turns out his affection for an invisible",
    "start": "473360",
    "end": "478639"
  },
  {
    "text": "control character is greater than anything he could feel for another human being and so he ends up destroying their",
    "start": "478639",
    "end": "486400"
  },
  {
    "text": "relationship because he uses tabs he just so you know all the human misery",
    "start": "486400",
    "end": "492159"
  },
  {
    "start": "490000",
    "end": "521000"
  },
  {
    "text": "that's caused by this this conflict tabs spaces what to do so this is clutter",
    "start": "492159",
    "end": "499479"
  },
  {
    "text": "right the two ways of doing things I want to get uncluttered I want to do it one way so I want to get rid of one just",
    "start": "499479",
    "end": "505759"
  },
  {
    "text": "so that we stop all of the waste and all the confusion all the craziness which one do you get rid of there's only",
    "start": "505759",
    "end": "512839"
  },
  {
    "text": "one that I can get rid of um I need the space space is an essential thing it does things besides put things into",
    "start": "512839",
    "end": "520000"
  },
  {
    "text": "columns so I got to get rid of tab I don't need Tab and I know that's going",
    "start": "520000",
    "end": "525680"
  },
  {
    "start": "521000",
    "end": "534000"
  },
  {
    "text": "to make some of you cry but that's just how it is turns out tab does not spark",
    "start": "525680",
    "end": "531760"
  },
  {
    "text": "Joy so now we [Laughter]",
    "start": "531760",
    "end": "537920"
  },
  {
    "start": "534000",
    "end": "580000"
  },
  {
    "text": "know so ask I also provided two characters for quoting things the single",
    "start": "537920",
    "end": "544320"
  },
  {
    "text": "quote and the double quote and JavaScript employs both so in JavaScript you can make a string with double quotes",
    "start": "544320",
    "end": "551120"
  },
  {
    "text": "or single quotes and they work exactly the same way they just look different and for a long time I tried to figure",
    "start": "551120",
    "end": "557519"
  },
  {
    "text": "out how to make sense out of that that you know for some purposes I want to use a single quote for other purposes I want",
    "start": "557519",
    "end": "563480"
  },
  {
    "text": "to use the double quote and I thought it made sense but I saw other people who had different conventions which also",
    "start": "563480",
    "end": "569600"
  },
  {
    "text": "made equally as much sense and they were incompatible and it's like there's no way to resolve this so ultimately I",
    "start": "569600",
    "end": "576560"
  },
  {
    "text": "think we have to get rid of one and the the one that makes sense to get rid of",
    "start": "576560",
    "end": "581959"
  },
  {
    "start": "580000",
    "end": "607000"
  },
  {
    "text": "is the single quote and that's because it it's also well no it's because it's overloaded as the apostrophe and so",
    "start": "581959",
    "end": "590279"
  },
  {
    "text": "there are you're more likely to make mistakes using single quote then double",
    "start": "590279",
    "end": "595519"
  },
  {
    "text": "quote and I'm really down on mistakes I'm trying to figure out how to error free as much as possible",
    "start": "595519",
    "end": "602640"
  },
  {
    "text": "so single quote does not spark Joy one of the the most important things",
    "start": "602640",
    "end": "609760"
  },
  {
    "text": "that ASI did was come up with the way that we encode uppercase and lower",
    "start": "609760",
    "end": "617000"
  },
  {
    "text": "case the original plan for Asi was it was going to be a six-bit character set",
    "start": "617000",
    "end": "622399"
  },
  {
    "text": "that would give you 64 codes which isn't very much",
    "start": "622399",
    "end": "628079"
  },
  {
    "text": "and and in order to support a lowercase they're going to add two control",
    "start": "628079",
    "end": "634120"
  },
  {
    "text": "characters for doing shifting so you could shift one way and you get lowercase characters and shift the other",
    "start": "634120",
    "end": "640200"
  },
  {
    "text": "way and get uppercase characters if they had followed through on this then everything would be just a",
    "start": "640200",
    "end": "648920"
  },
  {
    "text": "you know we teach our kids that's an A and there are two ways a can look but they're both a and that's how it would",
    "start": "648920",
    "end": "655800"
  },
  {
    "text": "work so we would distinguish uppercase and lowercase the same way we distinguish bold and weight or italics",
    "start": "655800",
    "end": "663480"
  },
  {
    "text": "or underlining or color or anything else but we didn't do that and the reason we",
    "start": "663480",
    "end": "669880"
  },
  {
    "text": "didn't was at that time they were shipping these character codes over uh",
    "start": "669880",
    "end": "675519"
  },
  {
    "text": "teletype lines and those lines were very noisy and so it was not uncommon for a",
    "start": "675519",
    "end": "680760"
  },
  {
    "text": "character to get a bit or more damaged and would arrive garbled and their",
    "start": "680760",
    "end": "687440"
  },
  {
    "text": "concern was that if a shift car gets garbled then the rest of the message is going to look stupid you know it turns",
    "start": "687440",
    "end": "694320"
  },
  {
    "text": "into shouting and stuff and they didn't want to do that so to avoid that particular error they decided to",
    "start": "694320",
    "end": "700480"
  },
  {
    "text": "increase the size of asy to seven bits that gave him 128 characters and then it",
    "start": "700480",
    "end": "706000"
  },
  {
    "text": "became possible to give each of the lowercase characters a unique",
    "start": "706000",
    "end": "712279"
  },
  {
    "text": "code and in doing so they invented case sensitivity which had never existed",
    "start": "712279",
    "end": "718000"
  },
  {
    "start": "713000",
    "end": "738000"
  },
  {
    "text": "prior to that as a concept cep and that is a source of bugs for us today you know some things want to be K sensitive",
    "start": "718000",
    "end": "724639"
  },
  {
    "text": "because it's faster and some things want to be case insensitive because it's correct",
    "start": "724639",
    "end": "731360"
  },
  {
    "text": "and boom you know so that happened I can't fix that it's too late for that",
    "start": "731360",
    "end": "737519"
  },
  {
    "text": "one JavaScript gives us let and VAR at",
    "start": "737519",
    "end": "742720"
  },
  {
    "start": "738000",
    "end": "806000"
  },
  {
    "text": "least since es6 they both do the same thing they both declare a variable and a",
    "start": "742720",
    "end": "747959"
  },
  {
    "text": "function which you definitely want to be doing U but it's confusing having two of",
    "start": "747959",
    "end": "753360"
  },
  {
    "text": "them and I've seen people argue well you should use VAR in this case and let in that case and go no no no you don't want",
    "start": "753360",
    "end": "760560"
  },
  {
    "text": "to be doing that it's just confusing so we want to be using just one of them and",
    "start": "760560",
    "end": "766000"
  },
  {
    "text": "I think the one we want to be using is let and the reason I prefer let is the Java guys don't get as confused if",
    "start": "766000",
    "end": "773279"
  },
  {
    "text": "you're using let because let respects block scope we don't need block scope",
    "start": "773279",
    "end": "778399"
  },
  {
    "text": "but the Java got don't understand function scope and so",
    "start": "778399",
    "end": "784120"
  },
  {
    "text": "we should do that now the problem with this recommendation is it does not work for IE because an ie let doesn't exist",
    "start": "784120",
    "end": "792160"
  },
  {
    "text": "so it's a syntax error so my advice is stop IE right no more IE even Microsoft",
    "start": "792160",
    "end": "800079"
  },
  {
    "text": "doesn't want anymore they want us to move to Edge I think they're exactly right let's stop doing",
    "start": "800079",
    "end": "805360"
  },
  {
    "text": "that es6 also introduced const which is like let except you cannot modify that",
    "start": "805360",
    "end": "812800"
  },
  {
    "start": "806000",
    "end": "823000"
  },
  {
    "text": "variable anymore or you can't replace that variable with another value which is a good thing so generally when given",
    "start": "812800",
    "end": "819279"
  },
  {
    "text": "a choice I would prefer to use const than let JavaScript gives us two bottom",
    "start": "819279",
    "end": "825920"
  },
  {
    "start": "823000",
    "end": "867000"
  },
  {
    "text": "values null and undefined there's an argument in the language design Community should a language even have",
    "start": "825920",
    "end": "832639"
  },
  {
    "text": "bottom values but there's nobody who thinks you should have two of",
    "start": "832639",
    "end": "838040"
  },
  {
    "text": "them and you know due to some accident JavaScript has two of them and they are",
    "start": "838040",
    "end": "845639"
  },
  {
    "text": "not interchangeable for many purposes they work the same but there are some specific cases where they're not and",
    "start": "845639",
    "end": "852000"
  },
  {
    "text": "when you have things which look to be the same but aren't actually the same for no good reason that creates",
    "start": "852000",
    "end": "857920"
  },
  {
    "text": "confusion and bugs and that's bad so I want to get rid of one of them and usually when I have a choice between two",
    "start": "857920",
    "end": "863399"
  },
  {
    "text": "words I want to go with a shorter one but not this time this time I'm going",
    "start": "863399",
    "end": "869160"
  },
  {
    "start": "867000",
    "end": "901000"
  },
  {
    "text": "with undefined and getting rid of null for for one thing null has the the type",
    "start": "869160",
    "end": "874320"
  },
  {
    "text": "of problem type of null is not null it's object which is horribly wrong and if",
    "start": "874320",
    "end": "880600"
  },
  {
    "text": "you never use null then you don't care so that that can stay broken and and nothing",
    "start": "880600",
    "end": "887000"
  },
  {
    "text": "breaks undefined is a is not a good word it's really confusing but you know we're",
    "start": "887000",
    "end": "892680"
  },
  {
    "text": "kind of stuck with that now the idea of null as a special kind of pointer as a",
    "start": "892680",
    "end": "899639"
  },
  {
    "text": "standard feature of programming languages is due to Tony who's a brilliant British programmer everybody",
    "start": "899639",
    "end": "905360"
  },
  {
    "start": "901000",
    "end": "915000"
  },
  {
    "text": "know  yeah they should teach history here it's important stuff anyway uh he",
    "start": "905360",
    "end": "913199"
  },
  {
    "text": "came up with that idea and he now regrets it he calls it a billion dooll",
    "start": "913199",
    "end": "918519"
  },
  {
    "text": "mistake I don't know why he didn't call it a billion pound mistake but he called it a billion doll mistake and he came up",
    "start": "918519",
    "end": "924600"
  },
  {
    "text": "with that figure by estimating the accumulated cost of all of the null pointer exceptions that he cost",
    "start": "924600",
    "end": "930959"
  },
  {
    "text": "so you know it shouldn't be a special kind of pointer that fails it should have been something else and what I think it should have been is an",
    "start": "932000",
    "end": "938880"
  },
  {
    "text": "immutable empty object in the sense of a JavaScript object where it's a thing and",
    "start": "938880",
    "end": "945319"
  },
  {
    "text": "you can't store anything into it if you try to store anything into it that'll throw an exception and if you try to",
    "start": "945319",
    "end": "950560"
  },
  {
    "text": "extract anything from it you'll just get null again which would be fine and it",
    "start": "950560",
    "end": "956519"
  },
  {
    "text": "could be implemented in a JavaScript like language very simply we just create a constant which contains a frozen empty",
    "start": "956519",
    "end": "964480"
  },
  {
    "text": "object that doesn't inherit anything so um in in fact for some purposes instead",
    "start": "964480",
    "end": "970519"
  },
  {
    "text": "of using undefined you might actually want to create your own thing give it another similar confusing name like",
    "start": "970519",
    "end": "976959"
  },
  {
    "text": "maybe nil or none or something like that or even empty and do that with",
    "start": "976959",
    "end": "982759"
  },
  {
    "text": "it now functional programming is becoming really really important now finally after well we started doing",
    "start": "982759",
    "end": "989759"
  },
  {
    "start": "983000",
    "end": "1313000"
  },
  {
    "text": "functional programming in the very late 40s early 50s and it's just kind of now getting to",
    "start": "989759",
    "end": "996759"
  },
  {
    "text": "the mainstream um JavaScript is a or they're two senses of a functional language a",
    "start": "996759",
    "end": "1003519"
  },
  {
    "text": "functional language is a language that uses functions there are two senses of what functions mean um there's functions",
    "start": "1003519",
    "end": "1011639"
  },
  {
    "text": "as what we do in programming you know like a JavaScript function there's also the idea of a mathematical function",
    "start": "1011639",
    "end": "1019560"
  },
  {
    "text": "and that's sometimes called Pure functional programming a mathematical function isn't really about computation",
    "start": "1019560",
    "end": "1026160"
  },
  {
    "text": "it's about mapping a pure function will map values from one thing to another and",
    "start": "1026160",
    "end": "1031520"
  },
  {
    "text": "the process of mapping doesn't allow for side effects or any other stuff going on it's just one thing so",
    "start": "1031520",
    "end": "1039038"
  },
  {
    "text": "um in a mathematical function in a pure function a given input will always yield",
    "start": "1039039",
    "end": "1044558"
  },
  {
    "text": "exactly the same output and they allow for no mutation no",
    "start": "1044559",
    "end": "1050160"
  },
  {
    "text": "side effects nothing else is going on just the mapping of one value to another and that turns out to be a really cool",
    "start": "1050160",
    "end": "1056480"
  },
  {
    "text": "thing and you get some nice benefits from that one of them is testability",
    "start": "1056480",
    "end": "1061720"
  },
  {
    "text": "programs written this way become much easier to test because once you've shown that a function Returns the correct",
    "start": "1061720",
    "end": "1068520"
  },
  {
    "text": "value you're done nothing else can ever cause that function to now misfire or",
    "start": "1068520",
    "end": "1073679"
  },
  {
    "text": "behave incorrectly so that significantly simplifies the process of testing",
    "start": "1073679",
    "end": "1079880"
  },
  {
    "text": "um an even better benefit is incomp posibility that when functions are pure",
    "start": "1079880",
    "end": "1085080"
  },
  {
    "text": "you can string them together and compose them in really interesting ways and that",
    "start": "1085080",
    "end": "1090880"
  },
  {
    "text": "becomes a very very effective way of of programming much more efficient maybe the best benefit is",
    "start": "1090880",
    "end": "1098520"
  },
  {
    "text": "parallelism the problem we have with threads in in a crappy language like Java is that we're trying to do read",
    "start": "1098520",
    "end": "1104640"
  },
  {
    "text": "modify WR of shared memory and that is an inherently dangerous thing if you do",
    "start": "1104640",
    "end": "1110039"
  },
  {
    "text": "it incorrectly it means you get races which are horrendously difficult bugs to find and and correct the way you",
    "start": "1110039",
    "end": "1116600"
  },
  {
    "text": "mitigate that is by locking which slows programs down",
    "start": "1116600",
    "end": "1121840"
  },
  {
    "text": "profoundly and if you're just doing stuff with pure functions you can run",
    "start": "1121840",
    "end": "1126960"
  },
  {
    "text": "full speed that the functions never read modify right because they're not allowed",
    "start": "1126960",
    "end": "1132360"
  },
  {
    "text": "to mutate they can't have side effects so they just run and run and run and there's nothing to slow them down so the",
    "start": "1132360",
    "end": "1139520"
  },
  {
    "text": "fastest programs that we can write are probably going to be functions that are pure which is again a really good reason",
    "start": "1139520",
    "end": "1146880"
  },
  {
    "text": "for doing it so we can convert JavaScript into a pure functional",
    "start": "1146880",
    "end": "1152120"
  },
  {
    "text": "programming language and the way we do that is by removing the impurities so we'll start by removing",
    "start": "1152120",
    "end": "1159480"
  },
  {
    "text": "the date function because every time you get you call the date function you get a",
    "start": "1159480",
    "end": "1165280"
  },
  {
    "text": "different value and that's not a mathematically pure function so we're going to get rid of that we have to get",
    "start": "1165280",
    "end": "1171559"
  },
  {
    "text": "rid of the random function same reason every time you call random you get a different number that's not pure so that's got to",
    "start": "1171559",
    "end": "1177640"
  },
  {
    "text": "go we have to take out the delete operator because it can modify an object",
    "start": "1177640",
    "end": "1182919"
  },
  {
    "text": "we have to take out object. assign and in similar functions because they will attempt to modify an object we can't",
    "start": "1182919",
    "end": "1189480"
  },
  {
    "text": "allow for modification array. splice and and all the other array methods we have to take",
    "start": "1189480",
    "end": "1195720"
  },
  {
    "text": "those out as well we can keep slice because it makes a copy of an array so that one's good but the ones that modify",
    "start": "1195720",
    "end": "1201799"
  },
  {
    "text": "an array we have to get rid of array. sort could have been a pure function but",
    "start": "1201799",
    "end": "1207400"
  },
  {
    "text": "it was implemented incorrectly and it is not so sadly we have to get rid of that one uh uh the regular expression exec",
    "start": "1207400",
    "end": "1215760"
  },
  {
    "text": "function wants to modify the regular expression object so sadly that's got to go assignment right uh the equal sign",
    "start": "1215760",
    "end": "1223880"
  },
  {
    "text": "that that goes uh the VAR statement if you don't if you don't have assignment you don't",
    "start": "1223880",
    "end": "1230200"
  },
  {
    "text": "need variables um we have to get rid of let as well but we can keep const const",
    "start": "1230200",
    "end": "1235320"
  },
  {
    "text": "still has a role so we could call a function and put its return value in a const and then we",
    "start": "1235320",
    "end": "1242640"
  },
  {
    "text": "could use that value in multiple places in the remainder of the function that's that's cool that's pure we can do that",
    "start": "1242640",
    "end": "1249559"
  },
  {
    "text": "four statement that wants to modify an induction variable we can't be modifying",
    "start": "1249559",
    "end": "1254679"
  },
  {
    "text": "so Four's got to go in fact probably Loops in general are probably going to go",
    "start": "1254679",
    "end": "1260600"
  },
  {
    "text": "users turns out every time the user does something",
    "start": "1260840",
    "end": "1266880"
  },
  {
    "text": "it could be different users are surprisingly non-mathematical so they're going to have to go and the network yeah",
    "start": "1266880",
    "end": "1276000"
  },
  {
    "text": "every time you get something from the network you could get something else so that's not pure so Network's got to go",
    "start": "1276000",
    "end": "1282559"
  },
  {
    "text": "so a absolutely pure functional programming model doesn't make any sense",
    "start": "1282559",
    "end": "1288000"
  },
  {
    "text": "because the universe is mutating and unless our programs can deal with the",
    "start": "1288000",
    "end": "1293760"
  },
  {
    "text": "mutation of the universe they're Limited in how useful they can be but Purity is",
    "start": "1293760",
    "end": "1300200"
  },
  {
    "text": "still really valuable and so we need to figure out the models which allow us to be as pure as we can while still",
    "start": "1300200",
    "end": "1307520"
  },
  {
    "text": "permitting enough impurity to actually allow us to get work",
    "start": "1307520",
    "end": "1313679"
  },
  {
    "start": "1313000",
    "end": "1376000"
  },
  {
    "text": "done one of the new features in es6 is generators something that I think shouldn't have happened just because",
    "start": "1313720",
    "end": "1320600"
  },
  {
    "text": "it's unnecessary a generator is a function which every time you call it will return",
    "start": "1320600",
    "end": "1326080"
  },
  {
    "text": "a new value so generators are not pure but they're still very useful and it turns out using higher",
    "start": "1326080",
    "end": "1332440"
  },
  {
    "text": "order functions you can get generators without the weird special syntax with the yield and the the asterisk so this",
    "start": "1332440",
    "end": "1340720"
  },
  {
    "text": "if you need generators this is how I think you should make them so we've got",
    "start": "1340720",
    "end": "1345919"
  },
  {
    "text": "a factory function which is the thing that makes gener ators and it can take uh",
    "start": "1345919",
    "end": "1351159"
  },
  {
    "text": "arguments and the variables of the factory function become the state",
    "start": "1351159",
    "end": "1356600"
  },
  {
    "text": "variables of the generator then the factory returns a function which is the generator function",
    "start": "1356600",
    "end": "1363080"
  },
  {
    "text": "and each time it's called it will compute a new value and update the state variables that are in the closure of the",
    "start": "1363080",
    "end": "1369279"
  },
  {
    "text": "outer function and return the value this is a really straightforward pattern it's",
    "start": "1369279",
    "end": "1375360"
  },
  {
    "text": "really easy to write so here's a an example this is the element generator",
    "start": "1375360",
    "end": "1382039"
  },
  {
    "start": "1376000",
    "end": "1399000"
  },
  {
    "text": "which will receive an array and return a generator which will return each",
    "start": "1382039",
    "end": "1387559"
  },
  {
    "text": "individual element of that array really straightforward I I like",
    "start": "1387559",
    "end": "1392720"
  },
  {
    "text": "this better than the equivalent thing you would get by using the uh function star",
    "start": "1392720",
    "end": "1399000"
  },
  {
    "start": "1399000",
    "end": "1426000"
  },
  {
    "text": "syntax callbacks are a really important mechanism for dealing with asynchronicity and and other",
    "start": "1399000",
    "end": "1405720"
  },
  {
    "text": "patterns and there's a question are callbacks are also used in continuation",
    "start": "1405720",
    "end": "1410960"
  },
  {
    "text": "passing style it's a a really powerful way of expressing programs and so it means that a function",
    "start": "1410960",
    "end": "1419440"
  },
  {
    "text": "not only gets its normal arguments it also gets a special argument which is the function to call with",
    "start": "1419440",
    "end": "1425840"
  },
  {
    "text": "result and there are two places where you could put it you could make it the first parameter or you could make it the",
    "start": "1425840",
    "end": "1432480"
  },
  {
    "text": "last parameter and up until now it's been up to you you want to put it in the first",
    "start": "1432480",
    "end": "1439880"
  },
  {
    "text": "position or you want to put in the last position and since you have a choice we will apparently at random choose one and",
    "start": "1439880",
    "end": "1447120"
  },
  {
    "text": "then we will argue about it and that makes interoperability much harder",
    "start": "1447120",
    "end": "1452480"
  },
  {
    "text": "because if I'm putting them first and you're putting them last and our code has to work together it's just annoying",
    "start": "1452480",
    "end": "1457559"
  },
  {
    "text": "so it'd be good if we could figure out what the right answer is and it turns out es6 tells us what the right answer",
    "start": "1457559",
    "end": "1463240"
  },
  {
    "text": "is that they want to be first and the reason they want to be first is we now have the ellipses operator which is my",
    "start": "1463240",
    "end": "1469559"
  },
  {
    "text": "second most favorite feature in es6 which says take all of the rest of",
    "start": "1469559",
    "end": "1475120"
  },
  {
    "text": "the arguments and make an array and stick them in there and pass that as the last",
    "start": "1475120",
    "end": "1481559"
  },
  {
    "text": "argument and that only works in the last position which means if we want a call",
    "start": "1481559",
    "end": "1486840"
  },
  {
    "text": "back the call back really needs to be in the first position so those of you are putting it in the last yeah you got some",
    "start": "1486840",
    "end": "1493200"
  },
  {
    "text": "work to do uh promises were were added in the",
    "start": "1493200",
    "end": "1498760"
  },
  {
    "start": "1495000",
    "end": "1538000"
  },
  {
    "text": "six because es because w3c was was threatening to standardize them and ecus",
    "start": "1498760",
    "end": "1506320"
  },
  {
    "text": "said you can't do that you're going to screw it all up so uh basically ecma",
    "start": "1506320",
    "end": "1511440"
  },
  {
    "text": "took W3 w3c's spec and published it like",
    "start": "1511440",
    "end": "1517279"
  },
  {
    "text": "which didn't really prevent anything from getting screwed up so we got that um the original purpose of promises was",
    "start": "1517279",
    "end": "1524919"
  },
  {
    "text": "not to provide for asynchronicity but that's the the major function for it now and I don't think they do all that good",
    "start": "1524919",
    "end": "1531360"
  },
  {
    "text": "a job they they actually do work and they're much better than doing nested callbacks but I think we could do better",
    "start": "1531360",
    "end": "1538600"
  },
  {
    "start": "1538000",
    "end": "1571000"
  },
  {
    "text": "for example I developed a library called RQ which is sort of a cryptic name I",
    "start": "1538600",
    "end": "1544559"
  },
  {
    "text": "kind of regret that now but I was feeling very tur the day I named it",
    "start": "1544559",
    "end": "1549960"
  },
  {
    "text": "which provides for a much nicer composable way of dealing with asynchronicity particularly for the",
    "start": "1549960",
    "end": "1555480"
  },
  {
    "text": "kinds of things you would do in a server where I want to do the these things in as a sequence and I want to do these",
    "start": "1555480",
    "end": "1561080"
  },
  {
    "text": "things in parallel and I want them to all compose together and be good in an",
    "start": "1561080",
    "end": "1566120"
  },
  {
    "text": "asynchronous way RQ does that so we get really emotional about",
    "start": "1566120",
    "end": "1572640"
  },
  {
    "start": "1571000",
    "end": "1593000"
  },
  {
    "text": "our syntax we love the syntax and it turns out syntax really doesn't matter",
    "start": "1572640",
    "end": "1579559"
  },
  {
    "text": "but we don't know that we we love it and and it syntax has more to do with",
    "start": "1579559",
    "end": "1584880"
  },
  {
    "text": "fashion than with functionality and so I want to look at a",
    "start": "1584880",
    "end": "1590360"
  },
  {
    "text": "few examples of syntax Through the Ages so we'll start with Fortran foran 4 was",
    "start": "1590360",
    "end": "1596880"
  },
  {
    "start": "1593000",
    "end": "1731000"
  },
  {
    "text": "my first language and this is how we wrote an if statement in Fortran in in",
    "start": "1596880",
    "end": "1603960"
  },
  {
    "text": "Fortran um well lowercase hadn't been discovered yet when when Fortran was made so everything was all in",
    "start": "1603960",
    "end": "1611520"
  },
  {
    "text": "uppercase in Fortran spaces were not significant so that if you said",
    "start": "1611520",
    "end": "1618960"
  },
  {
    "text": "if space a that looked exactly the same to the compiler as",
    "start": "1618960",
    "end": "1625480"
  },
  {
    "text": "epha and so when they designed the if statement they came up with the idea of using the parentheses to separate the uh",
    "start": "1625480",
    "end": "1634399"
  },
  {
    "text": "keyword from the condition because spaces couldn't do that in",
    "start": "1634399",
    "end": "1640559"
  },
  {
    "text": "Fortran and similarly they used the closing parin to separate the end of the",
    "start": "1640559",
    "end": "1646080"
  },
  {
    "text": "condition from the consequence uh bcpl was one of the first good parts",
    "start": "1646080",
    "end": "1652520"
  },
  {
    "text": "languages it was modeled after an earlier language called CPL which I think was designed not too",
    "start": "1652520",
    "end": "1658559"
  },
  {
    "text": "far from here and it's the first curly brace language really uh nice looking",
    "start": "1658559",
    "end": "1665080"
  },
  {
    "text": "language and I think they got it basically right so in bcpl the parentheses around the condition were",
    "start": "1665080",
    "end": "1672279"
  },
  {
    "text": "optional and the curly braces around the consequence were required which is really really smart",
    "start": "1672279",
    "end": "1679159"
  },
  {
    "text": "unfortunately when the B language and then C and then Java and then JavaScript in all of those languages they got it",
    "start": "1679159",
    "end": "1686880"
  },
  {
    "text": "wrong again they went back to the Fortran convention so they required the parentheses around the condition which",
    "start": "1686880",
    "end": "1693039"
  },
  {
    "text": "really doesn't accomplish anything and they allowed for leaving the curly braces off of the consequence which",
    "start": "1693039",
    "end": "1698760"
  },
  {
    "text": "turns out to be a problem that it's really easy to write an if statement which appears to to control several",
    "start": "1698760",
    "end": "1706679"
  },
  {
    "text": "statements but it only controls R the first very common source of errors and because of that I recommend always put",
    "start": "1706679",
    "end": "1714480"
  },
  {
    "text": "the curly braces in every time on every if and every else always put the girly",
    "start": "1714480",
    "end": "1720000"
  },
  {
    "text": "braces in because it increases the likelihood that somebody including future you can improve that program",
    "start": "1720000",
    "end": "1727760"
  },
  {
    "text": "without breaking it um alol 60 was a brilliant language",
    "start": "1727760",
    "end": "1735000"
  },
  {
    "start": "1731000",
    "end": "1809000"
  },
  {
    "text": "uh designed by committee it's very rare for a good language to be designed by a committee and that was the one example",
    "start": "1735000",
    "end": "1741120"
  },
  {
    "text": "and they did such a brilliant job they decided let's do it again so they convened a second committee and they de",
    "start": "1741120",
    "end": "1748240"
  },
  {
    "text": "developed alol 68 which unfortunately was a mess and very cluttered and and uh",
    "start": "1748240",
    "end": "1756200"
  },
  {
    "text": "didn't get well adopted but I really liked their if statement I think uh Dy suggested the",
    "start": "1756200",
    "end": "1762960"
  },
  {
    "text": "syntax and I think it's just lovely so instead of having the curly braces or blocks or anything like that they just",
    "start": "1762960",
    "end": "1768880"
  },
  {
    "text": "have a f statement which balances the if and the nice thing about this is that",
    "start": "1768880",
    "end": "1775720"
  },
  {
    "text": "when you look at a a program you've got lots of curly braces and the curly braces represent the end of blocks the",
    "start": "1775720",
    "end": "1782880"
  },
  {
    "text": "end of functions the end of uh object literals and sometimes it's hard to know",
    "start": "1782880",
    "end": "1790240"
  },
  {
    "text": "when you look at a curly brace who are you closing and a lot of what we're",
    "start": "1790240",
    "end": "1795679"
  },
  {
    "text": "closing is ifs and if the if is using a different convention then it's much easier to read the program it's much",
    "start": "1795679",
    "end": "1802000"
  },
  {
    "text": "clearer what's being delimited and it's easier to write programs that are correct which is really nice but I think",
    "start": "1802000",
    "end": "1807880"
  },
  {
    "text": "we can improve a little bit on this one so this is my suggestion for if there are any language designers in the",
    "start": "1807880",
    "end": "1814799"
  },
  {
    "start": "1809000",
    "end": "1875000"
  },
  {
    "text": "house I I would like to see this in the next language so um I think uh python had the",
    "start": "1814799",
    "end": "1822159"
  },
  {
    "text": "right idea about um respecting line break",
    "start": "1822159",
    "end": "1828600"
  },
  {
    "text": "that where a line break is significant it's probably significant to us as well as to the compiler so let's just hard",
    "start": "1828600",
    "end": "1835039"
  },
  {
    "text": "code that into the language that being the case I don't need the then so we can take that out",
    "start": "1835039",
    "end": "1841480"
  },
  {
    "text": "and there's a lovely little language called Rebel which uses colon as its assignment",
    "start": "1841480",
    "end": "1847799"
  },
  {
    "text": "operator which I think is just so nice so I I would shorten it a little bit",
    "start": "1847799",
    "end": "1853399"
  },
  {
    "text": "more I don't think I'd want to go much farther than that because",
    "start": "1853399",
    "end": "1858480"
  },
  {
    "text": "you know if you get too cryptic then you start to be APL and and we don't want to go there but I like the idea of trying",
    "start": "1858480",
    "end": "1864720"
  },
  {
    "text": "to be as minimal as we can in our syntax without losing Clarity and I I think",
    "start": "1864720",
    "end": "1870120"
  },
  {
    "text": "this might be a way to go so uh talking about not Clarity so",
    "start": "1870120",
    "end": "1877639"
  },
  {
    "start": "1875000",
    "end": "1922000"
  },
  {
    "text": "we've got the try statement exception handling is an important idea because we don't want to have after every function",
    "start": "1877639",
    "end": "1884120"
  },
  {
    "text": "called to query the result and ask did you fail or not because that really slows things down so the idea was we'll",
    "start": "1884120",
    "end": "1891840"
  },
  {
    "text": "have exception handling so that we don't have to do that testing so this is the uh the way you",
    "start": "1891840",
    "end": "1899559"
  },
  {
    "text": "would write a TR catch statement in Java or some other",
    "start": "1899559",
    "end": "1905000"
  },
  {
    "text": "crappy language you know they they look like this and it's big there's a lot of stuff in it so the interesting bit is",
    "start": "1905000",
    "end": "1912799"
  },
  {
    "text": "the the code that might fail that's the stuff that we're trying to protect that we uh don't want to have to query",
    "start": "1912799",
    "end": "1918399"
  },
  {
    "text": "everything that happens within that block and then there's everything else so the finally bit is there because Java",
    "start": "1918399",
    "end": "1926559"
  },
  {
    "start": "1922000",
    "end": "1966000"
  },
  {
    "text": "did not have functions and basically what finally wants to do",
    "start": "1926559",
    "end": "1932960"
  },
  {
    "text": "is do this stuff no matter how we exit from the try and the way the Java virtual machine",
    "start": "1932960",
    "end": "1940000"
  },
  {
    "text": "implements finally is with a subverting call there's a a subverting call in",
    "start": "1940000",
    "end": "1946080"
  },
  {
    "text": "return which is in the language specifically for tri catch for for for",
    "start": "1946080",
    "end": "1951960"
  },
  {
    "text": "finally and they did it that way because they didn't have functions which would have been the correct way to do it and",
    "start": "1951960",
    "end": "1957919"
  },
  {
    "text": "so since we have functions in JavaScript we don't need finely so I",
    "start": "1957919",
    "end": "1963480"
  },
  {
    "text": "think I see finally it's just big noise then we've got all of these catch Clauses so what's going on there the",
    "start": "1963480",
    "end": "1970679"
  },
  {
    "start": "1966000",
    "end": "2060000"
  },
  {
    "text": "catch Clauses are all there because of a failure in the type system",
    "start": "1970679",
    "end": "1976120"
  },
  {
    "text": "so often a particular function or method might have multiple kinds of things that",
    "start": "1976120",
    "end": "1982480"
  },
  {
    "text": "might happen there's one that is most likely to happen but there's another",
    "start": "1982480",
    "end": "1987559"
  },
  {
    "text": "thing which is expected to happen sometimes you know like maybe you get to the end of something and that's going to",
    "start": "1987559",
    "end": "1993440"
  },
  {
    "text": "be a different kind of response but that's not the same as failure which is what exceptions were",
    "start": "1993440",
    "end": "2000399"
  },
  {
    "text": "intended to catch and so because the type system doesn't allow a single",
    "start": "2000399",
    "end": "2006360"
  },
  {
    "text": "method to return things of multiple types it will instead",
    "start": "2006360",
    "end": "2012399"
  },
  {
    "text": "use the catch Clause as an alternate control flow in order to sneak stuff",
    "start": "2012399",
    "end": "2020320"
  },
  {
    "text": "through so it's a misuse of the exception system again motivated by",
    "start": "2020320",
    "end": "2026799"
  },
  {
    "text": "problems in the type system and so basically what you get is code that looks like the Fortran",
    "start": "2026799",
    "end": "2033039"
  },
  {
    "text": "assigned goto which is quite an awful thing where some other piece of code",
    "start": "2033039",
    "end": "2038840"
  },
  {
    "text": "will determine what our path is going to be through this stuff which is quite",
    "start": "2038840",
    "end": "2043919"
  },
  {
    "text": "awful now JavaScript because it has a superior type system basically it doesn't care allows you to send whatever",
    "start": "2043919",
    "end": "2052679"
  },
  {
    "text": "you need back and so you don't need to overload the exception system to handle",
    "start": "2052679",
    "end": "2058158"
  },
  {
    "text": "your correct result so in JavaScript it gets much easier so basically you try",
    "start": "2058159",
    "end": "2066158"
  },
  {
    "text": "plan a and and if that works You're great and if it doesn't then you'll go",
    "start": "2066159",
    "end": "2071320"
  },
  {
    "text": "to plan B you don't even care why it failed it shouldn't matter why it failed you just know it didn't work so let's do",
    "start": "2071320",
    "end": "2077919"
  },
  {
    "text": "the other thing and so that's much better so this is an example of how",
    "start": "2077919",
    "end": "2083480"
  },
  {
    "text": "having a loose type system allows you to write better code um another example of Java's",
    "start": "2083480",
    "end": "2091560"
  },
  {
    "start": "2088000",
    "end": "2327000"
  },
  {
    "text": "dilemma with with types is in the index of operator or index of method",
    "start": "2091560",
    "end": "2098320"
  },
  {
    "text": "so it wants to return the character position at which we find a particular substring but there's a chance that it",
    "start": "2098320",
    "end": "2105240"
  },
  {
    "text": "might not find it and so what they should have returned would have been",
    "start": "2105240",
    "end": "2110359"
  },
  {
    "text": "null or something which indicates whatever we wanted to return we got this instead but they couldn't because null",
    "start": "2110359",
    "end": "2118280"
  },
  {
    "text": "was not compatible with int so instead they came up with",
    "start": "2118280",
    "end": "2123960"
  },
  {
    "text": "minus1 um and the expectation is you have to remember that minus one is this",
    "start": "2123960",
    "end": "2129079"
  },
  {
    "text": "weird thing the problem is that for some of",
    "start": "2129079",
    "end": "2134119"
  },
  {
    "text": "the string Methods minus one is Meaningful like on slice it means the",
    "start": "2134119",
    "end": "2139200"
  },
  {
    "text": "last character of the string and so you can get into trouble if you're not aware of this weird stuff that's going to",
    "start": "2139200",
    "end": "2146000"
  },
  {
    "text": "happen so let's talk some more about types and inss so what is the type of",
    "start": "2146000",
    "end": "2153760"
  },
  {
    "text": "the result of adding two in 32 together anybody",
    "start": "2153760",
    "end": "2161119"
  },
  {
    "text": "know language in",
    "start": "2162000",
    "end": "2167240"
  },
  {
    "text": "truth what is the true",
    "start": "2167240",
    "end": "2171040"
  },
  {
    "text": "answer well I I didn't think that would stump everybody but the answer is int",
    "start": "2172400",
    "end": "2178319"
  },
  {
    "text": "33 in 33 because the result of adding two 32-bit ins together is you could get",
    "start": "2178319",
    "end": "2184920"
  },
  {
    "text": "one that's one bit more um Java and many other languages get this wrong they",
    "start": "2184920",
    "end": "2190839"
  },
  {
    "text": "think it's in32 which means that if that happens if you get an in 33 answer the",
    "start": "2190839",
    "end": "2197119"
  },
  {
    "text": "most important of all of those bits gets thrown away without any notification and programs go wildly",
    "start": "2197119",
    "end": "2205000"
  },
  {
    "text": "wrong so let's look at another one what is the type of int32 times into",
    "start": "2205000",
    "end": "2213480"
  },
  {
    "text": "32 any guesses",
    "start": "2213480",
    "end": "2219520"
  },
  {
    "text": "well well okay the answer is in 63 in",
    "start": "2220599",
    "end": "2227560"
  },
  {
    "text": "63 but Java thinks it's in 32 so it's wildly wrong it's going to throw away a",
    "start": "2227560",
    "end": "2233200"
  },
  {
    "text": "whole lot of bits which again is a source of of terrible errors so there's",
    "start": "2233200",
    "end": "2238319"
  },
  {
    "text": "this idea that our type systems are helping us that they're preventing us from making mistakes but in fact we can",
    "start": "2238319",
    "end": "2244800"
  },
  {
    "text": "show that the type system is causing mistakes",
    "start": "2244800",
    "end": "2249519"
  },
  {
    "text": "um here's a famous example and um this is true of almost all of our modern languages today 0.1 plus 2 is not equal",
    "start": "2249960",
    "end": "2258280"
  },
  {
    "text": "to. 3 and I think this is shocking I think this is inexcusable but it gets worse than that it breaks the",
    "start": "2258280",
    "end": "2265040"
  },
  {
    "text": "associativity you know so 0.1 + 2 plus3",
    "start": "2265040",
    "end": "2270160"
  },
  {
    "text": "is not equal to 0.1 plus2 plus. 3 you know it associativity works if in",
    "start": "2270160",
    "end": "2278880"
  },
  {
    "text": "in computer arithmetic if the up if the two operands are represented exactly and",
    "start": "2278880",
    "end": "2285560"
  },
  {
    "text": "if their result can be represented exactly and if not",
    "start": "2285560",
    "end": "2291440"
  },
  {
    "text": "then then associativity will give you different an will",
    "start": "2291440",
    "end": "2296680"
  },
  {
    "text": "break and the problem is in these languages including JavaScript 01 cannot",
    "start": "2296680",
    "end": "2303359"
  },
  {
    "text": "be represented exactly even though it has a very simple trivial decimal",
    "start": "2303359",
    "end": "2310000"
  },
  {
    "text": "representation and it's because we're using binary floating point and binary floating point was something that made a",
    "start": "2310000",
    "end": "2315920"
  },
  {
    "text": "lot of sense in the 50s but doesn't make sense anymore but we can't stop doing it",
    "start": "2315920",
    "end": "2322000"
  },
  {
    "text": "so I recommend that we stop doing it and this is how I recommend that we do it",
    "start": "2322000",
    "end": "2327960"
  },
  {
    "start": "2327000",
    "end": "2418000"
  },
  {
    "text": "this is a new number type called deck 64 it stored in a 64-bit word it contains",
    "start": "2327960",
    "end": "2334720"
  },
  {
    "text": "two portions a 50 6bit coefficient which is just an integer that's shifted over",
    "start": "2334720",
    "end": "2341400"
  },
  {
    "text": "eight spots and an 8bit exponent and the value of the number is the coefficient",
    "start": "2341400",
    "end": "2346680"
  },
  {
    "text": "times 10 raised to the exponent this was inspired by a representation that was",
    "start": "2346680",
    "end": "2351720"
  },
  {
    "text": "used in the Ed saac anybody know",
    "start": "2351720",
    "end": "2357200"
  },
  {
    "text": "edsac they they should teach you guys more history edsac was one of the first F England machines it was built not far",
    "start": "2357560",
    "end": "2364480"
  },
  {
    "text": "from here it was brilliant and wonderful and and you should know this this is",
    "start": "2364480",
    "end": "2369880"
  },
  {
    "text": "important stuff anyway um I I propose modernizing that idea and bringing it",
    "start": "2369880",
    "end": "2376079"
  },
  {
    "text": "back and when we do this then 0.1 plus 2 will be3 one of the nice things about",
    "start": "2376079",
    "end": "2381800"
  },
  {
    "text": "this representation is that in a hardware implementation adding any two numbers",
    "start": "2381800",
    "end": "2388319"
  },
  {
    "text": "with the same exponent for example integers will execute in one",
    "start": "2388319",
    "end": "2394240"
  },
  {
    "text": "cycle and being able to do that means the advance for having ins goes away and so there's",
    "start": "2394240",
    "end": "2400760"
  },
  {
    "text": "no reason to have ins anymore that I propose that all future languages or all future application languages use only",
    "start": "2400760",
    "end": "2408160"
  },
  {
    "text": "this number type that having a single number type in the system means that you cannot make a bug by choosing the wrong",
    "start": "2408160",
    "end": "2415400"
  },
  {
    "text": "number type which is a good thing to have so if if you're curious about it",
    "start": "2415400",
    "end": "2420880"
  },
  {
    "start": "2418000",
    "end": "2434000"
  },
  {
    "text": "for example if you're an amateur language designer and you'd like to try it out there's a reference implementation in x64 Assembly Language",
    "start": "2420880",
    "end": "2428599"
  },
  {
    "text": "it's on GitHub you can go get that so let's talk some more about",
    "start": "2428599",
    "end": "2433680"
  },
  {
    "text": "numbers what is 0 /",
    "start": "2433680",
    "end": "2438599"
  },
  {
    "start": "2434000",
    "end": "2445000"
  },
  {
    "text": "0o so it's actually a very complicated question there there are a lot of answers to this question most",
    "start": "2439000",
    "end": "2445599"
  },
  {
    "start": "2445000",
    "end": "2477000"
  },
  {
    "text": "mathematicians would say it's undefined not in the crazy sense of javascript's undefined meaning it's",
    "start": "2445599",
    "end": "2452880"
  },
  {
    "text": "meaningless it it doesn't make sense to talk about 0 divided by0 it's just not",
    "start": "2452880",
    "end": "2459079"
  },
  {
    "text": "possible you know don't don't say that anymore just it's not a",
    "start": "2459079",
    "end": "2465000"
  },
  {
    "text": "thing except in computation things will happen because",
    "start": "2465000",
    "end": "2470760"
  },
  {
    "text": "someone will divide Z by zero anyway so the machine has to have some defined Behavior so one possible answer is the",
    "start": "2470760",
    "end": "2478560"
  },
  {
    "start": "2477000",
    "end": "2645000"
  },
  {
    "text": "machine should catch fire because it's it shouldn't happen so it shouldn't matter that the machine",
    "start": "2478560",
    "end": "2484920"
  },
  {
    "text": "catches fire we know that that's actually not a good thing to do another",
    "start": "2484920",
    "end": "2490280"
  },
  {
    "text": "possibility is it should be Nan because that's a representation of",
    "start": "2490280",
    "end": "2495800"
  },
  {
    "text": "something that's meaningless although Nan has much more meaning than meaningless has but that that's",
    "start": "2495800",
    "end": "2501000"
  },
  {
    "text": "something we could say another answer is it should be zero because Z divided by",
    "start": "2501000",
    "end": "2506720"
  },
  {
    "text": "anything should be zero and in fact for a lot of business applications that is the preferred",
    "start": "2506720",
    "end": "2513119"
  },
  {
    "text": "answer or it could be one because n / n is one one",
    "start": "2513119",
    "end": "2519119"
  },
  {
    "text": "right sometimes um I once programmed a",
    "start": "2519119",
    "end": "2525160"
  },
  {
    "text": "Mainframe where the answer was two it was exactly two it was a machine designed by Seymour cray who is the",
    "start": "2525160",
    "end": "2532359"
  },
  {
    "text": "greatest computer maker whoever lived and when you divided the Zero by zero",
    "start": "2532359",
    "end": "2537440"
  },
  {
    "text": "with a floating Point divide you got two and I'm sure somebody at Control Data",
    "start": "2537440",
    "end": "2542640"
  },
  {
    "text": "said hey Seymour uh we check this out and we get a two here and he said I'm not going to fix it",
    "start": "2542640",
    "end": "2549839"
  },
  {
    "text": "because if I fix it it means it's going to add more circuitry to it it's already a very complex circuit and I don't want",
    "start": "2549839",
    "end": "2556520"
  },
  {
    "text": "to do that because it's going to make it more expensive and it's going to add one cycle to the divide time which will",
    "start": "2556520",
    "end": "2564880"
  },
  {
    "text": "penalize all of the correct uses of division and I want the machine to be",
    "start": "2564880",
    "end": "2570920"
  },
  {
    "text": "very fast for doing the correct things and only an idiot would try to divide Z by zero so",
    "start": "2570920",
    "end": "2578280"
  },
  {
    "text": "I'm not going to fix it and they got away with it and as far as I know I'm the only person who ever divided Zero by",
    "start": "2578280",
    "end": "2585280"
  },
  {
    "text": "zero on that machine and you know I survived it didn't catch fire or anything it was good so the reason I",
    "start": "2585280",
    "end": "2592839"
  },
  {
    "text": "went through that was I'm actually more concerned with this case what happens when you multiply Z by n what should the",
    "start": "2592839",
    "end": "2600000"
  },
  {
    "text": "answer to that be I think the answer should be zero",
    "start": "2600000",
    "end": "2605839"
  },
  {
    "text": "regardless of the value of n and it and compiler writers used to",
    "start": "2605839",
    "end": "2611319"
  },
  {
    "text": "think so too so if a if a compiler saw that zero is going to be one of the",
    "start": "2611319",
    "end": "2616640"
  },
  {
    "text": "factors of a multiply and if the other oper end is",
    "start": "2616640",
    "end": "2622160"
  },
  {
    "text": "pure meaning it has no side effects we do not even need to evaluate it we don't",
    "start": "2622160",
    "end": "2627440"
  },
  {
    "text": "even need to generate the code for for looking at it we just return zero we're",
    "start": "2627440",
    "end": "2633480"
  },
  {
    "text": "done and so the compiler goes faster and the program runs faster and everything is great that turned out to be an error",
    "start": "2633480",
    "end": "2641839"
  },
  {
    "text": "when the new i e floating Point standard came out because it said that if n is",
    "start": "2641839",
    "end": "2646960"
  },
  {
    "start": "2645000",
    "end": "2672000"
  },
  {
    "text": "Nan then the answer has to be Nan I think this was a",
    "start": "2646960",
    "end": "2652319"
  },
  {
    "text": "mistake that it made things go slower in all cases to protect us from something",
    "start": "2652319",
    "end": "2659359"
  },
  {
    "text": "that shouldn't have mattered and in fact there's some programs that really want to be",
    "start": "2659359",
    "end": "2666040"
  },
  {
    "text": "using * n in a meaningful way so who writes code like that generally not",
    "start": "2666040",
    "end": "2672200"
  },
  {
    "start": "2672000",
    "end": "2733000"
  },
  {
    "text": "humans but um code generators do and macro processors partial evaluators",
    "start": "2672200",
    "end": "2678079"
  },
  {
    "text": "those sorts of programs can make very good use of zero times n also on Modern",
    "start": "2678079",
    "end": "2685079"
  },
  {
    "text": "CPUs one of the slowest things we can do now is a conditional jump and sometimes instead of coding a",
    "start": "2685079",
    "end": "2692040"
  },
  {
    "text": "conditional jump we can encode multiply something by something that might be a zero or a one one and that",
    "start": "2692040",
    "end": "2698559"
  },
  {
    "text": "multiplication can be significantly faster in some cases doing two multiplications and an add of of either",
    "start": "2698559",
    "end": "2705920"
  },
  {
    "text": "zero or one or one and zero that's faster than doing the uh conditional jump and I don't see any benefit that",
    "start": "2705920",
    "end": "2713240"
  },
  {
    "text": "comes from getting a nan out of that so I would propose in the next language",
    "start": "2713240",
    "end": "2718960"
  },
  {
    "text": "that all of these forms return zero just because they allow us to get a little bit more performance",
    "start": "2718960",
    "end": "2725760"
  },
  {
    "text": "and you we really don't benefit at all from getting n from any of",
    "start": "2725760",
    "end": "2732400"
  },
  {
    "text": "these so modern languages have reserved words and",
    "start": "2732400",
    "end": "2739079"
  },
  {
    "start": "2733000",
    "end": "2927000"
  },
  {
    "text": "the reason they have reserved words is it made it easier for compiler writers at a time when memories were very small",
    "start": "2739079",
    "end": "2746480"
  },
  {
    "text": "for example a lot of the early Unix work the Early B and C work was done on a I",
    "start": "2746480",
    "end": "2751839"
  },
  {
    "text": "think it was a PDP 7 that had like 16k of ram really tiny machine",
    "start": "2751839",
    "end": "2758520"
  },
  {
    "text": "and I got a compiler to run in there which is pretty amazing and one of the",
    "start": "2758520",
    "end": "2763720"
  },
  {
    "text": "tricks they used in order to get that to happen was they reserved a lot of words in the language so that the compiler",
    "start": "2763720",
    "end": "2770000"
  },
  {
    "text": "didn't have to figure out does this if mean a variable name or does it if mean something that's a",
    "start": "2770000",
    "end": "2777559"
  },
  {
    "text": "statement form and we're still doing that you our",
    "start": "2777559",
    "end": "2782599"
  },
  {
    "text": "memories have gotten much bigger we have much better tools for writing compilers but we're still using this",
    "start": "2782599",
    "end": "2788640"
  },
  {
    "text": "constraint um the reason it matters is it's a hazard for programmers because it means you need to be aware of all the",
    "start": "2788640",
    "end": "2795480"
  },
  {
    "text": "reserved words in the language even if you don't use those words because if you name a a parameter or a variable after",
    "start": "2795480",
    "end": "2801839"
  },
  {
    "text": "one of those then your program is going to fail and that's a bad thing and it's bad for language maintainers because",
    "start": "2801839",
    "end": "2808240"
  },
  {
    "text": "they want to introduce new features into the language but if there's a likelihood that anybody else has ever created a",
    "start": "2808240",
    "end": "2815800"
  },
  {
    "text": "variable with that name then they're going to create failure and and they're trying hard not to cause",
    "start": "2815800",
    "end": "2821880"
  },
  {
    "text": "things to fail um so often what they'll do is",
    "start": "2821880",
    "end": "2827079"
  },
  {
    "text": "they'll come up with the with unpopular names for example when exception",
    "start": "2827079",
    "end": "2834720"
  },
  {
    "text": "handling was first being proposed the way we would cause an",
    "start": "2834720",
    "end": "2840000"
  },
  {
    "text": "exception to happen was through a raise command we're going to raise an exception the way you might want to uh",
    "start": "2840000",
    "end": "2848400"
  },
  {
    "text": "raise an issue or something we will raise an exception also has sort of a hardware connotation we're going to raise the the exception line but they",
    "start": "2848400",
    "end": "2855920"
  },
  {
    "text": "couldn't use the word raise because someone had used it to raise something to a power and that would cause breakage",
    "start": "2855920",
    "end": "2861640"
  },
  {
    "text": "so they looked for a word that means something like rays that nobody was using and in desperation they came up",
    "start": "2861640",
    "end": "2869359"
  },
  {
    "text": "with throw now most of you have never seen anything except throw so it probably",
    "start": "2869359",
    "end": "2875079"
  },
  {
    "text": "looks natural to you now because you've never never experiencing anything else but it was a it was not the ideal choice",
    "start": "2875079",
    "end": "2883280"
  },
  {
    "text": "so I propose that in the next language we do it better so in any function a",
    "start": "2883280",
    "end": "2888680"
  },
  {
    "text": "word may be used as a language keyword or as the name of a variable or a parameter something but not both so the",
    "start": "2888680",
    "end": "2896359"
  },
  {
    "text": "programmer gets to decide so if you want a variable called if you can have a variable called if but you can't also",
    "start": "2896359",
    "end": "2903200"
  },
  {
    "text": "have an if in that function so this is good for programmers is because you won't trip over features",
    "start": "2903200",
    "end": "2908800"
  },
  {
    "text": "you don't use if you're not aware that double for example is reserved word doesn't matter and it's good for",
    "start": "2908800",
    "end": "2915040"
  },
  {
    "text": "language maintainers because they can introduce new features without breaking existing programs existing programs will",
    "start": "2915040",
    "end": "2921319"
  },
  {
    "text": "be using the new feature already as a variable they're not going to be using the new feature nothing",
    "start": "2921319",
    "end": "2927839"
  },
  {
    "start": "2927000",
    "end": "2993000"
  },
  {
    "text": "breaks another thing we argue about a lot is how do we represent",
    "start": "2927839",
    "end": "2933559"
  },
  {
    "text": "variables or identifiers that contain more than one word and we do this a lot",
    "start": "2933559",
    "end": "2939960"
  },
  {
    "text": "and we have two conventions for how you do that we've got camel case and we've got",
    "start": "2939960",
    "end": "2945599"
  },
  {
    "text": "underbar and we argue about it all the time and",
    "start": "2945599",
    "end": "2951319"
  },
  {
    "text": "there's one argument that says use whichever one makes you happy which is not good because when code is written",
    "start": "2951319",
    "end": "2958559"
  },
  {
    "text": "using both conventions it just looks stupid and so we don't want to do that but we can't agree on what the correct",
    "start": "2958559",
    "end": "2965040"
  },
  {
    "text": "thing is and so we just argue argue and I I've heard really ridiculous",
    "start": "2965040",
    "end": "2971319"
  },
  {
    "text": "arguments on both sides of it uh for example i' I heard really smart people",
    "start": "2971319",
    "end": "2976400"
  },
  {
    "text": "say camel case is better because it wastes so much time when you have to go shift up to the",
    "start": "2976400",
    "end": "2983359"
  },
  {
    "text": "underbar which is just nuts so the reason we can't agree is because",
    "start": "2983359",
    "end": "2989480"
  },
  {
    "text": "everybody is wrong the correct answer is names with",
    "start": "2989480",
    "end": "2994640"
  },
  {
    "start": "2993000",
    "end": "3014000"
  },
  {
    "text": "spaces that's the correct way to do it and we didn't do this in the old days again because there was only a tiny",
    "start": "2994640",
    "end": "3001079"
  },
  {
    "text": "amount of memory and it made it harder to write the compilers but those",
    "start": "3001079",
    "end": "3007440"
  },
  {
    "text": "constraints have been gone for many decades now so I think it's time to reconsider how we write our",
    "start": "3007440",
    "end": "3013440"
  },
  {
    "text": "programs so I propose this rule in the next language a name is composed of one",
    "start": "3013440",
    "end": "3018599"
  },
  {
    "text": "or more text atoms which are separated by spaces and starting with an initial text atom we combine them to make the",
    "start": "3018599",
    "end": "3025079"
  },
  {
    "text": "longest name that makes sense that matches something that's been defined in the scope and if uh a name makes sense if",
    "start": "3025079",
    "end": "3033839"
  },
  {
    "text": "yeah and if it doesn't make sense then we just take the first token and then we start again on the next one really easy",
    "start": "3033839",
    "end": "3040799"
  },
  {
    "text": "to implement um and I think it'll give us much nicer looking programs uh something else I'd like to",
    "start": "3040799",
    "end": "3047799"
  },
  {
    "start": "3047000",
    "end": "3135000"
  },
  {
    "text": "see in the next language would be programming by contract this is something that the Eiffel language did",
    "start": "3047799",
    "end": "3053480"
  },
  {
    "text": "which was brilliant that uh you could have a function and in that function you",
    "start": "3053480",
    "end": "3059119"
  },
  {
    "text": "have a little Preamble or a requirement section which says these things must be",
    "start": "3059119",
    "end": "3064680"
  },
  {
    "text": "true when we start this function and it it could be just a a series of",
    "start": "3064680",
    "end": "3069880"
  },
  {
    "text": "conditions and and then at the end of the function you can also say",
    "start": "3069880",
    "end": "3075599"
  },
  {
    "text": "and when we leave this function these things must also be",
    "start": "3075599",
    "end": "3080880"
  },
  {
    "text": "true and you can get uh these preconditions and postconditions",
    "start": "3080880",
    "end": "3086200"
  },
  {
    "text": "provided very nice documentation for the thing it it makes it extremely explicit what the assumptions of the function are",
    "start": "3086200",
    "end": "3093400"
  },
  {
    "text": "so looking at that it's much easier to use it correctly even more important that stuff",
    "start": "3093400",
    "end": "3099079"
  },
  {
    "text": "can be executed automatically so we can turn on a mode which says that stuff turns into code and so we now have",
    "start": "3099079",
    "end": "3106599"
  },
  {
    "text": "diagnostic checking running in the program you know we can even leave it on in production because it's pretty fast",
    "start": "3106599",
    "end": "3113359"
  },
  {
    "text": "and and we get much higher reliability and it gives us much better information",
    "start": "3113359",
    "end": "3120520"
  },
  {
    "text": "than types do as to what the expectations of a function are so",
    "start": "3120520",
    "end": "3126680"
  },
  {
    "text": "unfortunately it fell out of fashion but it shouldn't have it's really good stuff I I hope we we have",
    "start": "3126680",
    "end": "3133160"
  },
  {
    "text": "that come back I hope that the next language does a much better job of security because as the world is",
    "start": "3133160",
    "end": "3140119"
  },
  {
    "start": "3135000",
    "end": "3176000"
  },
  {
    "text": "becoming more distributed and we've got programs running everywhere and more and",
    "start": "3140119",
    "end": "3145480"
  },
  {
    "text": "more of the value of Our Lives or online it's really important that our programming languages not undermine us",
    "start": "3145480",
    "end": "3152640"
  },
  {
    "text": "that uh they respect the importance of our relationships and help us to defend them so I don't have any specific",
    "start": "3152640",
    "end": "3162240"
  },
  {
    "text": "suggestions but I think it's something we need to be concerned with and when we look at the next language we should look",
    "start": "3162599",
    "end": "3169040"
  },
  {
    "text": "much harder at its security implications because in the past we have never done",
    "start": "3169040",
    "end": "3174960"
  },
  {
    "text": "that then finally we should be dealing with distribution because that's how we're programming now",
    "start": "3174960",
    "end": "3181839"
  },
  {
    "start": "3176000",
    "end": "3252000"
  },
  {
    "text": "going all the way back to Fortran we've been doing sequential programming where a program does one damn thing after",
    "start": "3181839",
    "end": "3188359"
  },
  {
    "text": "another and that's not how we do stuff anymore that we now have multicores and",
    "start": "3188359",
    "end": "3194200"
  },
  {
    "text": "we expect stuff to be running concurrently on all of the cores and even more than that we now have the",
    "start": "3194200",
    "end": "3199240"
  },
  {
    "text": "internet and the clouds and all of that other stuff and so a program is expected to run not just in one machine in one",
    "start": "3199240",
    "end": "3205240"
  },
  {
    "text": "memory space but in end memory spaces simultaneously and providing for the coordination and",
    "start": "3205240",
    "end": "3211760"
  },
  {
    "text": "distribution of all of that stuff that should be built into the next language because that stuff is really",
    "start": "3211760",
    "end": "3218119"
  },
  {
    "text": "important mostly what we get in our languages are new syntax on the Fortran",
    "start": "3218119",
    "end": "3224799"
  },
  {
    "text": "model which is nice but it's not sufficient the next language should take us much farther that there's another",
    "start": "3224799",
    "end": "3230599"
  },
  {
    "text": "Paradigm we need to move into and I'd like to find that in the language that replaces JavaScript",
    "start": "3230599",
    "end": "3238440"
  },
  {
    "text": "so um so that's the end so I just want to leave you with a warning be careful",
    "start": "3238599",
    "end": "3243720"
  },
  {
    "text": "out there because the web is cluttered and full of Errors thank",
    "start": "3243720",
    "end": "3250640"
  },
  {
    "text": "you",
    "start": "3251119",
    "end": "3254119"
  }
]