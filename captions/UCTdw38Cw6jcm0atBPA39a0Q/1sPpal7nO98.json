[
  {
    "text": "good morning everyone everyone excited to be back for another day fndc whoa so",
    "start": "9830",
    "end": "18170"
  },
  {
    "text": "to get the energy up I like your enthusiasm let's give the the conference a run of applause and some cheering to",
    "start": "18170",
    "end": "24710"
  },
  {
    "text": "make ourselves heard in here all right perfect all right so we're gonna talk",
    "start": "24710",
    "end": "31880"
  },
  {
    "text": "about c-sharp eight and Beyond my name is Phillip Ekberg and I'll be taking you towards the light of f-sharp so",
    "start": "31880",
    "end": "37970"
  },
  {
    "text": "everything that we're gonna learning here today is gonna make you all great f-sharp developers all joking aside c-sharp has over the years taking a lot",
    "start": "37970",
    "end": "44780"
  },
  {
    "text": "of great language features from different types of paradigms and other programming languages and we're going to",
    "start": "44780",
    "end": "50179"
  },
  {
    "text": "explore some of the things that are being added in c-sharp eighth as well as what's coming in the next versions of",
    "start": "50179",
    "end": "55999"
  },
  {
    "text": "c-sharp as well it'll be a big focus on the features adding the the current version of C",
    "start": "55999",
    "end": "61460"
  },
  {
    "text": "sharp which is now c-sharp age eight which was recently released and of course we're gonna discover some of the",
    "start": "61460",
    "end": "66590"
  },
  {
    "text": "really amazing things that we might or might not get over the years too sharp has had a lot of interesting features",
    "start": "66590",
    "end": "72890"
  },
  {
    "text": "added to the language now when we got generics in c-sharp - that kind of changed the way that we build software I",
    "start": "72890",
    "end": "79009"
  },
  {
    "text": "came from a Java world where we didn't have generics and we still don't so we kind of missed out on those amazing",
    "start": "79009",
    "end": "84710"
  },
  {
    "text": "features that make it easier for us to build more reliable applications and then you know we got things like async",
    "start": "84710",
    "end": "90110"
  },
  {
    "text": "and await in the language wood which again changed the way that we build software and even nowadays we we still learn a lot about async was programming",
    "start": "90110",
    "end": "97219"
  },
  {
    "text": "and the way that we can apply that in our applications and all these things change the way that we build our API the",
    "start": "97219",
    "end": "103219"
  },
  {
    "text": "way that we build the software as well as how we build our packages that people might download from you get so all these",
    "start": "103219",
    "end": "108500"
  },
  {
    "text": "amazing language features have been added to the language version prior to c-sharp aid the in c-sharp seven we've",
    "start": "108500",
    "end": "115100"
  },
  {
    "text": "got things like pattern matching which will quickly take a look at for those of you that haven't seen that as well and one of the really great things about",
    "start": "115100",
    "end": "121729"
  },
  {
    "text": "c-sharp is now that it's open source the compilers you can go ahead and help out with introducing language features in",
    "start": "121729",
    "end": "127850"
  },
  {
    "text": "the language if you so like to see if there's something that you want to see in the language you can always open a issue on github and tell them that I",
    "start": "127850",
    "end": "134450"
  },
  {
    "text": "want this feature added to the language and you're gonna have a long discussion about why that's not a good idea and",
    "start": "134450",
    "end": "139970"
  },
  {
    "text": "then eventually you'll give up so this here lists a few of the features",
    "start": "139970",
    "end": "145970"
  },
  {
    "text": "that are coming in c-sharp be next and we're gonna talk a little bit about those later on if you're really good eyes you can see that I have my little",
    "start": "145970",
    "end": "152180"
  },
  {
    "text": "avatar up here so I've actually contributed to the c-sharp compiler repository I'll fix the spelling mistake",
    "start": "152180",
    "end": "157790"
  },
  {
    "text": "in this document that's kind of the extent to my developer capabilities alright so we're gonna go through a few",
    "start": "157790",
    "end": "163790"
  },
  {
    "text": "of these cool features but there's also this other repository on github for the siege of language so the siege of language has its own repository the",
    "start": "163790",
    "end": "170960"
  },
  {
    "text": "compilers which is what used to be called Rosling's now these dotnet compiler platform it's all written in",
    "start": "170960",
    "end": "176750"
  },
  {
    "text": "c-sharp and this language repository lists the potential features they want to add to the language right so it's a",
    "start": "176750",
    "end": "183380"
  },
  {
    "text": "totally confusing why this is separate someone probably thought it was a good idea and the interesting thing here is",
    "start": "183380",
    "end": "189530"
  },
  {
    "text": "that this is the milestone for c-sharp aid C sharp F is going to be released somewhere around 2080 based on the",
    "start": "189530",
    "end": "196580"
  },
  {
    "text": "cadence of the developer features they're adding it right although c-sharp aid was released with",
    "start": "196580",
    "end": "202370"
  },
  {
    "text": "dot import we point out which was supposed to be a part of Visual Studio 2019 although when visuals - to 2019",
    "start": "202370",
    "end": "209510"
  },
  {
    "text": "came out dotted core wasn't really there and the features for c-sharp ate require you to be running dotnet course people",
    "start": "209510",
    "end": "215960"
  },
  {
    "text": "know right everyone doesn't know that but if you're on full framework you can't really use the c-sharp eight",
    "start": "215960",
    "end": "222110"
  },
  {
    "text": "features so that's a little sad but everyone should jump on the next version",
    "start": "222110",
    "end": "227450"
  },
  {
    "text": "of.net because that's the best thing right so let's go through a few of these c-sharp 8 features enough powerpoint for",
    "start": "227450",
    "end": "233780"
  },
  {
    "text": "a while we're gonna go through some of these really cool features that are coming in c-sharp 8 but before we do",
    "start": "233780",
    "end": "238850"
  },
  {
    "text": "that i want to go to go through two of the major features in c-sharp 7 in case you haven't seen those it's gonna be",
    "start": "238850",
    "end": "244130"
  },
  {
    "text": "very confusing when we start talking about c-sharp eight one of the things that added was an improvement to how we",
    "start": "244130",
    "end": "249200"
  },
  {
    "text": "work with tuples or tuples or whatever you want to call them so these this thing here which I'm gonna call double",
    "start": "249200",
    "end": "255020"
  },
  {
    "text": "is probably wrong we have this multiple values returned out of this method here",
    "start": "255020",
    "end": "260450"
  },
  {
    "text": "so I'm constructing this container of two fields which is going to have a",
    "start": "260450",
    "end": "265490"
  },
  {
    "text": "named integer of X and I named integer of Y and this constructs this type it's not anonymous because what I can do now",
    "start": "265490",
    "end": "272419"
  },
  {
    "text": "is that I can go ahead and call this method and this will now allow me to call px",
    "start": "272419",
    "end": "280460"
  },
  {
    "text": "and Peter by but assuming here so that's",
    "start": "280460",
    "end": "286550"
  },
  {
    "text": "useful and what we also can do is that this isn't limited to two values we can of course add even more things in here",
    "start": "286550",
    "end": "293589"
  },
  {
    "text": "so you're probably asking yourselves why do we do this because it's going to help",
    "start": "293589",
    "end": "298610"
  },
  {
    "text": "us when we introduce pattern matching and we'll get into those features in c-sharp aid now you can see here that",
    "start": "298610",
    "end": "304969"
  },
  {
    "text": "we're getting some squigglies here telling us that there's now a problem here this won't compile because we now aren't returning the same kind of",
    "start": "304969",
    "end": "311479"
  },
  {
    "text": "container values that we are returning out of that we were expecting up here so I'm gonna undo this here otherwise",
    "start": "311479",
    "end": "316939"
  },
  {
    "text": "everything else gonna fail and now what's happening here is that 100 is now mapped into my field X and 200 is mapped",
    "start": "316939",
    "end": "323509"
  },
  {
    "text": "into y now I can call this as I showed you just a moment ago that you can call",
    "start": "323509",
    "end": "328639"
  },
  {
    "text": "this method by just simply calling get point and this will map the tuple into this local variable and you get two",
    "start": "328639",
    "end": "335149"
  },
  {
    "text": "fields x and y cannot make sense but then we can also deconstruct this which means that we can take the topple and",
    "start": "335149",
    "end": "340699"
  },
  {
    "text": "deconstruct that into something else so I can say that I want this this tuple deconstructed into two new local fields",
    "start": "340699",
    "end": "349059"
  },
  {
    "text": "this here is also using the tuple syntax but now in this local local context here",
    "start": "349059",
    "end": "355279"
  },
  {
    "text": "I can now use x1 and y1 instead right but it's all about saving characters",
    "start": "355279",
    "end": "361249"
  },
  {
    "text": "over the years the c-sharp language design team have focused a lot of efforts into making it easier for us to",
    "start": "361249",
    "end": "366889"
  },
  {
    "text": "write less code so we can improve this a little bit by saying that instead of having to specify integer twice you just",
    "start": "366889",
    "end": "373849"
  },
  {
    "text": "infer that so we can say that I have two local variables they're deconstructed tuple it'll map X into X 2 and Y into y",
    "start": "373849",
    "end": "382459"
  },
  {
    "text": "2 now what happens if I do this how many of you think that X is going to be",
    "start": "382459",
    "end": "389119"
  },
  {
    "text": "mapped into x2 leading question it's not we now have a bug in the application because now what I'm doing here is that",
    "start": "389119",
    "end": "395389"
  },
  {
    "text": "I'm getting the X and mapping that into the first parameter here so it's doing positional matching right so it's taking",
    "start": "395389",
    "end": "402019"
  },
  {
    "text": "the first value and putting that into the first thing that is deconstructing",
    "start": "402019",
    "end": "406539"
  },
  {
    "text": "so this is helpful for some of us but it'll be more helpful in c-sharp 8 now",
    "start": "407889",
    "end": "413409"
  },
  {
    "text": "next up they added something in c-sharp 7 called pattern matching if you've ever experienced other programming languages",
    "start": "413409",
    "end": "418840"
  },
  {
    "text": "like Swift or Catalan or Haskell or F sharp you've probably seen pattern matching and how powerful that is to",
    "start": "418840",
    "end": "425259"
  },
  {
    "text": "leverage in our applications so the idea here is that I have a thing and I want to match based on the the traits of that",
    "start": "425259",
    "end": "432129"
  },
  {
    "text": "object it could be looking at the particular type it could be looking at particular properties and values but in",
    "start": "432129",
    "end": "438370"
  },
  {
    "text": "c-sharp 7 we kind of got a small version of pattern matching like the first version that's it's useful but it's not",
    "start": "438370",
    "end": "444939"
  },
  {
    "text": "as good as it could be so we're using the switch syntax so I'm saying here based on my shape that I have in my",
    "start": "444939",
    "end": "450189"
  },
  {
    "text": "application this here could be deriving from the same base type or this could be",
    "start": "450189",
    "end": "455319"
  },
  {
    "text": "an object it could be whatever it doesn't have to share the same same base",
    "start": "455319",
    "end": "460479"
  },
  {
    "text": "class basically so what I'm doing here is I'm saying well in the case of the shape being a triangle what I'm going to",
    "start": "460479",
    "end": "467169"
  },
  {
    "text": "do here is I'm going to cast this object to a local variable of T which is only available in this particular context of",
    "start": "467169",
    "end": "473710"
  },
  {
    "text": "that case block so then I can use this this filter here which we've seen with",
    "start": "473710",
    "end": "478990"
  },
  {
    "text": "exception filters to say when the the triangles side a and B are not equal we're gonna match on this case here and",
    "start": "478990",
    "end": "485680"
  },
  {
    "text": "run this block then for all other triangles that don't match that particular criteria we're gonna match on",
    "start": "485680",
    "end": "491919"
  },
  {
    "text": "the second one here and if it's a rectangle we're gonna match on this one here so that's kind of powerful but it's",
    "start": "491919",
    "end": "498400"
  },
  {
    "text": "pretty much like the the old way that we build after right so how do we improve",
    "start": "498400",
    "end": "503650"
  },
  {
    "text": "this and make it better for for everyone well let's jump over to c-sharp aid and talk a little bit about the recursive",
    "start": "503650",
    "end": "509560"
  },
  {
    "text": "patterns which has been introduced with the new version I believe that some of",
    "start": "509560",
    "end": "514750"
  },
  {
    "text": "these C sharp 8 features you can still enable them if you are running on full frame work but that's unsupported you",
    "start": "514750",
    "end": "520089"
  },
  {
    "text": "can set the language version to c-sharp 8 and it will do its best to compile that and work with full framework but",
    "start": "520089",
    "end": "525519"
  },
  {
    "text": "when you use things like asynchronous streams which we're gonna look at later that probably won't work because the classes aren't available in dotnet full",
    "start": "525519",
    "end": "531550"
  },
  {
    "text": "framework so now I have this application here I've translated the same switch",
    "start": "531550",
    "end": "537910"
  },
  {
    "text": "statement that I had into something called a switch expression so we have this new thing here that",
    "start": "537910",
    "end": "543610"
  },
  {
    "text": "looks really nice looks more like it's coming from a functional programming language so now I can say here based on",
    "start": "543610",
    "end": "550029"
  },
  {
    "text": "my shape here I want to run this switch block which is now not introducing the case and break and all of that we're now",
    "start": "550029",
    "end": "556449"
  },
  {
    "text": "leveraging the expressions instead so in case we've being a triangle again I'm",
    "start": "556449",
    "end": "561760"
  },
  {
    "text": "gonna capture that as this local variable of T and inside my my expression here I can leverage that",
    "start": "561760",
    "end": "566980"
  },
  {
    "text": "particular local variable so I can do t-today here and I can get all the other",
    "start": "566980",
    "end": "572740"
  },
  {
    "text": "ones and I get e intellisense we all know now that this is a triangle if we zoom in here that's really nice",
    "start": "572740",
    "end": "578589"
  },
  {
    "text": "and I can't use that outside of of that block right so I couldn't use it in the in the next in the next place it",
    "start": "578589",
    "end": "585760"
  },
  {
    "text": "wouldn't know that this exists makes sense right so in the case of it being a rectangle",
    "start": "585760",
    "end": "591070"
  },
  {
    "text": "we're gonna catch or we're gonna match this block here and then we have this this discord mutation here which is for",
    "start": "591070",
    "end": "598360"
  },
  {
    "text": "all other cases we're gonna match on this particular block down here now remember I said earlier that this",
    "start": "598360",
    "end": "604060"
  },
  {
    "text": "doesn't have to be inheriting the same base class so if you look at the triangle I could inherit from shape and",
    "start": "604060",
    "end": "609579"
  },
  {
    "text": "that would probably be a good pattern in my application but in this case here we have a triangle that doesn't hear it inherit from anything we have a",
    "start": "609579",
    "end": "616449"
  },
  {
    "text": "rectangle that doesn't inherit from anything but I can still use this switch expression to say based on that thing we",
    "start": "616449",
    "end": "622779"
  },
  {
    "text": "can still match on that it's pretty much like the old if it's you know get type and it's equal to type off whatever type",
    "start": "622779",
    "end": "628930"
  },
  {
    "text": "you have but this is a nicer syntax now the difference with this discord or this default statement here is that if we",
    "start": "628930",
    "end": "636880"
  },
  {
    "text": "compare this to the default keyword in the switch block this here will in fact match on nulls as well which I don't",
    "start": "636880",
    "end": "643120"
  },
  {
    "text": "believe it will with whether it would switch all right so now let's look at another example a little bit more added",
    "start": "643120",
    "end": "650620"
  },
  {
    "text": "to this switch expression so that kind of just looked like a translation of what we had in in c-sharp 7 but with a",
    "start": "650620",
    "end": "656199"
  },
  {
    "text": "little bit of a nicer syntax so in order for us to leverage the existence of tuples in the language we can now",
    "start": "656199",
    "end": "661930"
  },
  {
    "text": "introduce more patterns and of course as you see here we have the triangle we were matching that on capturing the",
    "start": "661930",
    "end": "667209"
  },
  {
    "text": "local variable we can still apply the same type of filter that which we did with the like we do with the exception",
    "start": "667209",
    "end": "672370"
  },
  {
    "text": "filters and we could do that in c-sharp 7 as well but now with the new patterns we have a few different things we have a tuple pattern",
    "start": "672370",
    "end": "678379"
  },
  {
    "text": "a positional pattern and a property pattern so the tuple pattern will all that was to say if this is a triangle",
    "start": "678379",
    "end": "684610"
  },
  {
    "text": "and then it's going to recursively break this down and say if I can deconstruct",
    "start": "684610",
    "end": "690019"
  },
  {
    "text": "the tuple linked to something that looks like this here we're going to match on this this particular block here so this",
    "start": "690019",
    "end": "696589"
  },
  {
    "text": "means that on our class triangle we now have a method called deconstruct this",
    "start": "696589",
    "end": "702139"
  },
  {
    "text": "will deconstruct this particular object into something looking like this here and I can deconstruct this out to a",
    "start": "702139",
    "end": "707899"
  },
  {
    "text": "tuple and I can use that in my pattern to match on this particular thing so what what what that really means is that",
    "start": "707899",
    "end": "713779"
  },
  {
    "text": "I can say for instance with this reference type here at the end which is my point for where the triangle is which is positioned on my screen here I can",
    "start": "713779",
    "end": "720980"
  },
  {
    "text": "say when I have a point or when I don't have a point I really don't care so we have this discard notion here as well so",
    "start": "720980",
    "end": "728689"
  },
  {
    "text": "I can say I'm gonna capture whatever is deconstructed for the first parameter the second and the third one and I don't",
    "start": "728689",
    "end": "734269"
  },
  {
    "text": "care if you have the fourth or not we could say that I require this this thing",
    "start": "734269",
    "end": "739310"
  },
  {
    "text": "to match on the particular tuple where the last one is null right but in this",
    "start": "739310",
    "end": "746420"
  },
  {
    "text": "case I don't care so that's pretty cool so we can deconstruct the triangle and match on that so this will use a",
    "start": "746420",
    "end": "751970"
  },
  {
    "text": "recursive pattern to first check it the type of the triangle and then match on the particular thing that is",
    "start": "751970",
    "end": "757009"
  },
  {
    "text": "deconstructing - next up we have something called a positional pattern which will also leverage to deconstruct",
    "start": "757009",
    "end": "763220"
  },
  {
    "text": "so the same thing with our try with our rectangle we're deconstructing the width of the rectangle the height and as well",
    "start": "763220",
    "end": "769490"
  },
  {
    "text": "as the point and in this case here what I can say is that if the width and the height are both zero and I don't really",
    "start": "769490",
    "end": "775730"
  },
  {
    "text": "care if you're trying to position this anywhere on my my screen here because it's not really a valid rectangle I'm",
    "start": "775730",
    "end": "781459"
  },
  {
    "text": "gonna capture that for this block here and this is going to return this this string here of course right so as you",
    "start": "781459",
    "end": "787639"
  },
  {
    "text": "see here as well this method returns a string and in this switch expression thing here all of the expressions are",
    "start": "787639",
    "end": "792860"
  },
  {
    "text": "just simply returning strings so this year of course uses this position based",
    "start": "792860",
    "end": "797959"
  },
  {
    "text": "on how its deconstructing the object so we could be saying that for all the rectangles that have the width and",
    "start": "797959",
    "end": "803540"
  },
  {
    "text": "height of 100 we're going to match on this particular block here if you want to say that the right",
    "start": "803540",
    "end": "809030"
  },
  {
    "text": "needs to have a width larger than 100 you would have to go up here and use this this one expression right then we",
    "start": "809030",
    "end": "818000"
  },
  {
    "text": "have something called the property pattern which allows us to do pretty much the same thing because you're probably wondering well in this case",
    "start": "818000",
    "end": "824480"
  },
  {
    "text": "here of the Deconstructor or a deconstruct I'm just gonna be able to add that to all the things that I'm not",
    "start": "824480",
    "end": "829760"
  },
  {
    "text": "in charge of if I'm using libraries from Newgate or whatever it might be impossible for me to add the deconstruct",
    "start": "829760",
    "end": "835550"
  },
  {
    "text": "and you know developers in the open-source community might not be focusing on that right now so what you",
    "start": "835550",
    "end": "841580"
  },
  {
    "text": "can do instead is that you can say well based on the list being a rectangle which will be the first thing that it's",
    "start": "841580",
    "end": "846830"
  },
  {
    "text": "matching on then it's going to say if it has a property called width error and",
    "start": "846830",
    "end": "851840"
  },
  {
    "text": "the value is 100 it's going to match on this particular pattern right then of course we can match on any rectangle and",
    "start": "851840",
    "end": "857600"
  },
  {
    "text": "we have this default pattern as well which uses this discard notion so that's",
    "start": "857600",
    "end": "863720"
  },
  {
    "text": "pretty powerful so of course we can abuse this which we pretty much can with any language feature so in some",
    "start": "863720",
    "end": "871280"
  },
  {
    "text": "situations you might be expecting a boolean here for instance I want you to based on the boolean being true or false",
    "start": "871280",
    "end": "877760"
  },
  {
    "text": "or null I want to do different things so if the boolean is true we're gonna have this item visible if it's false it's",
    "start": "877760",
    "end": "884330"
  },
  {
    "text": "gonna be hidden if it's it's something else it's gonna be blinking on my screen here but what's interesting of course is",
    "start": "884330",
    "end": "890000"
  },
  {
    "text": "that it changes to object and it would still match on that thing so this here will make sure that it's in fact a",
    "start": "890000",
    "end": "895310"
  },
  {
    "text": "boolean and then that the value is evaluating to true all right so that's pretty powerful as well another example",
    "start": "895310",
    "end": "903710"
  },
  {
    "text": "of using the tuples is in this case here I'm getting an HTTP response message and",
    "start": "903710",
    "end": "908780"
  },
  {
    "text": "based on two of the different properties on my HTTP response message we have these two properties the status code and",
    "start": "908780",
    "end": "914990"
  },
  {
    "text": "is successful status code I'm constructing this tuple here and based on the values inside this tuple I'm",
    "start": "914990",
    "end": "922070"
  },
  {
    "text": "running this switch expression so I can say here that if the first value in our new tuple is not modified as well as a",
    "start": "922070",
    "end": "929839"
  },
  {
    "text": "fruit that the successful status code is true we're gonna run this thing here we're gonna load everything from the cache and then if it's 200 okay and I",
    "start": "929839",
    "end": "938810"
  },
  {
    "text": "don't really care if the successful status code is set to 2 to true or 4 which is it's always gonna be true right",
    "start": "938810",
    "end": "944960"
  },
  {
    "text": "but it's gonna extract the shape out of the message and then for all other status codes where it's a successful",
    "start": "944960",
    "end": "951500"
  },
  {
    "text": "status code everything from you know 201 and upwards it's gonna extract that from from the shape but if it's a request",
    "start": "951500",
    "end": "958250"
  },
  {
    "text": "timeout and I don't care if the framework or whatever it's going to tell me that it's not a successful status code it's going to recursively run this",
    "start": "958250",
    "end": "965870"
  },
  {
    "text": "method in the real world we would probably implement some backing off from the API and so forth and build us",
    "start": "965870",
    "end": "971660"
  },
  {
    "text": "differently but it kind of illustrates how we can now leverage a tuple and construct a tuple like we do here and",
    "start": "971660",
    "end": "977720"
  },
  {
    "text": "then write some really nice switch expression here for matching on that particular trade of that object and then",
    "start": "977720",
    "end": "984230"
  },
  {
    "text": "of course we have this this final one which is saying for all of the other status codes we're going to say that",
    "start": "984230",
    "end": "989960"
  },
  {
    "text": "this is a network error and then of course we could introduce the the default or the discard one as well which",
    "start": "989960",
    "end": "995600"
  },
  {
    "text": "will throw another exception right whoops so that's pretty nice and of",
    "start": "995600",
    "end": "1006910"
  },
  {
    "text": "course this this you call this the same way so you would call any other method it's role in your application so that's",
    "start": "1006910",
    "end": "1012130"
  },
  {
    "text": "the switch expressions and the the recursive patterns that were introduced in c-sharp eight now let's have a look",
    "start": "1012130",
    "end": "1019420"
  },
  {
    "text": "at another interesting feature which was added recently and that's ranges so how",
    "start": "1019420",
    "end": "1024880"
  },
  {
    "text": "many of you have seen this span of T here so about half of you seen this",
    "start": "1024880",
    "end": "1030370"
  },
  {
    "text": "thing this span of T is a way for us to represent a collection of data without having to copy the array over or copy",
    "start": "1030370",
    "end": "1038110"
  },
  {
    "text": "the list over whenever we do try to get portions of that data when we do manipulations on the collection of data",
    "start": "1038110",
    "end": "1044800"
  },
  {
    "text": "itself we don't have to get the memory overhead of copying it over or or such",
    "start": "1044800",
    "end": "1050170"
  },
  {
    "text": "right so if I want to grab four to seven here for instance I can do that in memory and just point to that particular",
    "start": "1050170",
    "end": "1056110"
  },
  {
    "text": "set of data and it's super memory efficient so the way that we do that is now by we can slice this up to say I",
    "start": "1056110",
    "end": "1062560"
  },
  {
    "text": "want to grab the fifth element to one from the last this here is now introducing this new range syntax which",
    "start": "1062560",
    "end": "1069580"
  },
  {
    "text": "you can apply in all your different your your indexes right index yeah",
    "start": "1069580",
    "end": "1075750"
  },
  {
    "text": "so now we can say here I want to go one from the end so the Hat syntax is",
    "start": "1075750",
    "end": "1081000"
  },
  {
    "text": "telling us start off the end and then go one back so we're gonna get eight here hopefully and then it's going to give us",
    "start": "1081000",
    "end": "1086730"
  },
  {
    "text": "the v index so that will be five through eight I believe so now if we run this",
    "start": "1086730",
    "end": "1091980"
  },
  {
    "text": "here it should say five six seven and eight",
    "start": "1091980",
    "end": "1096080"
  },
  {
    "text": "for some reason when I did this demo when I built the demo I started off",
    "start": "1098090",
    "end": "1103980"
  },
  {
    "text": "writing one here but I got totally confused by myself because I write start to zero so I always say the wrong number",
    "start": "1103980",
    "end": "1109919"
  },
  {
    "text": "here but now it works right so we get the the the five six seven eight so this here allows us to slice up the",
    "start": "1109919",
    "end": "1116280"
  },
  {
    "text": "Arang get a new array out of that and we can run a for each loop of course on that particular slice and this here",
    "start": "1116280",
    "end": "1121710"
  },
  {
    "text": "didn't introduce a new array in memory it's simply pointing to those particular elements and of course we don't have to",
    "start": "1121710",
    "end": "1130500"
  },
  {
    "text": "initialize a new local variable we can do that inline error for each loop as well so we can say give us the elements",
    "start": "1130500",
    "end": "1135750"
  },
  {
    "text": "from index 1 through to the index number four but what's interesting is that this",
    "start": "1135750",
    "end": "1141120"
  },
  {
    "text": "here introduces something called an index this here is we can write this as",
    "start": "1141120",
    "end": "1146549"
  },
  {
    "text": "a what we call an index now which looks like this so we have our index and we",
    "start": "1146549",
    "end": "1152400"
  },
  {
    "text": "can say I want you to start from the v element of the end and I want you to",
    "start": "1152400",
    "end": "1157500"
  },
  {
    "text": "point to that particular thing so that would be which number that would be number five that kind of makes sense",
    "start": "1157500",
    "end": "1163770"
  },
  {
    "text": "right so how do we get the the last element well as you see in my comment",
    "start": "1163770",
    "end": "1168809"
  },
  {
    "text": "here we can say give me zero elements off the end that would make sense right",
    "start": "1168809",
    "end": "1173870"
  },
  {
    "text": "if you run this it's gonna tell us that we're index out of bounds for some reason if we say I want the the first",
    "start": "1173870",
    "end": "1182429"
  },
  {
    "text": "index off the end it's gonna give us the nine totally confusing right so we have",
    "start": "1182429",
    "end": "1188580"
  },
  {
    "text": "that number nine here I'm printing out a third thing here but if we go back to two this range syntax here what happens",
    "start": "1188580",
    "end": "1195419"
  },
  {
    "text": "if I say give me everything until the end how many of you believe this is",
    "start": "1195419",
    "end": "1201090"
  },
  {
    "text": "gonna work and no on it works so that'll actually give us the all the",
    "start": "1201090",
    "end": "1207690"
  },
  {
    "text": "numbers from 1 to 9 make sense right nope it's probably some common somewhere",
    "start": "1207690",
    "end": "1217530"
  },
  {
    "text": "in one of these language designs meetings where they talk about this and someone much smarter than me decided",
    "start": "1217530",
    "end": "1222840"
  },
  {
    "text": "that this is a really great thing to do alright so this hair is now pointing to",
    "start": "1222840",
    "end": "1229500"
  },
  {
    "text": "one off the end which is the last element so it's not really pointing to one off the of the end and we can do the",
    "start": "1229500",
    "end": "1236309"
  },
  {
    "text": "same thing we can create two of these indices in line here this is gonna end we can pass these along in here now it's",
    "start": "1236309",
    "end": "1244740"
  },
  {
    "text": "interesting is if we change this one here to zero see if that works that",
    "start": "1244740",
    "end": "1249809"
  },
  {
    "text": "works so it's totally different I guess if we do one here that'll give us 6 through 8 but if we do",
    "start": "1249809",
    "end": "1259980"
  },
  {
    "text": "this let's give us the same thing so",
    "start": "1259980",
    "end": "1266580"
  },
  {
    "text": "that will give us the correct thing so whenever we are using the collection with these indices right so when we were",
    "start": "1266580",
    "end": "1271650"
  },
  {
    "text": "now saying we're creating an index that's going to point to one off the end but if we're trying to use this on the",
    "start": "1271650",
    "end": "1278420"
  },
  {
    "text": "array like this here we would give a different element than when we use this range syntax it's pretty right yeah is",
    "start": "1278420",
    "end": "1292679"
  },
  {
    "text": "it",
    "start": "1292679",
    "end": "1295159"
  },
  {
    "text": "right yeah so you're saying that your it's correct because you're saying that you start off the N anyone to list all",
    "start": "1301160",
    "end": "1306990"
  },
  {
    "text": "the elements until that yeah all right",
    "start": "1306990",
    "end": "1312420"
  },
  {
    "text": "so even though it's correct I still think it's it's kind of confusing all",
    "start": "1312420",
    "end": "1318390"
  },
  {
    "text": "right so let's talk about something more that's confusing let's talk about Na level reference types so you know over",
    "start": "1318390",
    "end": "1325950"
  },
  {
    "text": "the years one of the most you know common problems with in building software is the nodal reference",
    "start": "1325950",
    "end": "1331830"
  },
  {
    "text": "exceptions and I believe someone once calculated on how much money has it cost the world so you have notes in the",
    "start": "1331830",
    "end": "1337920"
  },
  {
    "text": "language it's a lot of money right so now they finally decided that well it",
    "start": "1337920",
    "end": "1343710"
  },
  {
    "text": "was probably mistake adding Noel's in the language we shouldn't have nullable types so now we can opt in to say that I want",
    "start": "1343710",
    "end": "1349830"
  },
  {
    "text": "everything in my solution or in my method or in my class to be appeared as",
    "start": "1349830",
    "end": "1355050"
  },
  {
    "text": "it's non inaudible which means that we have to explicitly say that I want to opt in to have notes in my language",
    "start": "1355050",
    "end": "1361520"
  },
  {
    "text": "that's pretty cool right so how does that work well we have this very nice",
    "start": "1361520",
    "end": "1367140"
  },
  {
    "text": "new project structure and we can now say that I want nullable enabled which means that I can now introduce this nullable",
    "start": "1367140",
    "end": "1374460"
  },
  {
    "text": "types in my programming language and this is also very confusing but this is",
    "start": "1374460",
    "end": "1379890"
  },
  {
    "text": "telling us that it's not it's it's telling us that we're now going to interpret the nullable types not like we",
    "start": "1379890",
    "end": "1388530"
  },
  {
    "text": "did before but we're going to allow us to say that use this new nullable reference type syntax so let me show you",
    "start": "1388530",
    "end": "1395340"
  },
  {
    "text": "what that means so on my person here now I've enabled this new nullable reference",
    "start": "1395340",
    "end": "1402090"
  },
  {
    "text": "type feature and I now have a knowable string here so normally what you do is that you have your string name here and",
    "start": "1402090",
    "end": "1408450"
  },
  {
    "text": "we we know that this is a reference type so it's doable right makes sense but now that I've enabled this feature I have to",
    "start": "1408450",
    "end": "1415230"
  },
  {
    "text": "opt in to say that this here is now notable it still compiles but it's going to give me some warnings you see that",
    "start": "1415230",
    "end": "1421590"
  },
  {
    "text": "there's these green squiggles everywhere because this is now telling me that you have potential no reference exceptions",
    "start": "1421590",
    "end": "1427470"
  },
  {
    "text": "you should probably go ahead and fix all of these in some cases the compiler is correct",
    "start": "1427470",
    "end": "1433020"
  },
  {
    "text": "you know most of us know better than the compiler right so if I remove this and",
    "start": "1433020",
    "end": "1438059"
  },
  {
    "text": "say that well string my string name here is now not nullable which means that you have to initialize this the constructor",
    "start": "1438059",
    "end": "1444809"
  },
  {
    "text": "here is not going to tell us that well you should probably initialize that but what happens now is that if we just",
    "start": "1444809",
    "end": "1450570"
  },
  {
    "text": "apply this in our project or if especially if you're working with open source and we have you get packages that people download if we start just",
    "start": "1450570",
    "end": "1457320"
  },
  {
    "text": "changing the behavior of our applications and you know adding more parameters to the Constructors just to",
    "start": "1457320",
    "end": "1463500"
  },
  {
    "text": "make this work now of course my person here is now going to be insuring us that name will never be null",
    "start": "1463500",
    "end": "1470090"
  },
  {
    "text": "unless of course you explicitly Adonal to to the constructor but then you'll",
    "start": "1470090",
    "end": "1476520"
  },
  {
    "text": "get a warning somewhere else so this here now changes the contract off the application and that's not really what",
    "start": "1476520",
    "end": "1481590"
  },
  {
    "text": "you want so the first thing that you'll probably do let's undo this here to get rid of that warning inside this class",
    "start": "1481590",
    "end": "1487679"
  },
  {
    "text": "you will probably say that well I I'll have this as a knowable and I'll see wherever else in my application this",
    "start": "1487679",
    "end": "1493049"
  },
  {
    "text": "might be a problem so we can immediately see here that in this method called insert or update we are now getting a",
    "start": "1493049",
    "end": "1501149"
  },
  {
    "text": "squiggly here telling us that well you you have a problem here and this could potentially be referencing a null null",
    "start": "1501149",
    "end": "1507630"
  },
  {
    "text": "name right so we're trying to get the the length out of our name here and that's going to be null so I can say",
    "start": "1507630",
    "end": "1512640"
  },
  {
    "text": "well don't get the line if it's null then so we can use the same thing that we did earlier right but then we're going to start up having question marks",
    "start": "1512640",
    "end": "1518760"
  },
  {
    "text": "everywhere in the code and that's you know we're making up for the characters that we saved we can also do another",
    "start": "1518760",
    "end": "1525360"
  },
  {
    "text": "thing we can promise the compiler that name effect here isn't null so they",
    "start": "1525360",
    "end": "1531260"
  },
  {
    "text": "unofficially this is called the damage operator I think that's a great name I",
    "start": "1531260",
    "end": "1536279"
  },
  {
    "text": "don't know what the that's unofficial names I don't know what the official name is so now we are let's fix this by",
    "start": "1536279",
    "end": "1543779"
  },
  {
    "text": "saying question mark here to say that if this isn't if this is no don't care why to get length and of course person here",
    "start": "1543779",
    "end": "1550440"
  },
  {
    "text": "is a reference type and this here since I've enabled the nullable reference types this is now a non notable person",
    "start": "1550440",
    "end": "1557070"
  },
  {
    "text": "or we were trying to promise that this is never going to be null but I can say that well I want this to be able to be",
    "start": "1557070",
    "end": "1562350"
  },
  {
    "text": "null and now we're gonna get another squiggly down here telling us that person here is potential we know so let's not get the name and",
    "start": "1562350",
    "end": "1569399"
  },
  {
    "text": "then let's not get the length is if any of those are not starts to get pretty nasty let's undo that but you know what",
    "start": "1569399",
    "end": "1577409"
  },
  {
    "text": "happens if we now try to to call this insert or update method and an adding",
    "start": "1577409",
    "end": "1583619"
  },
  {
    "text": "null here now it's probably gonna tell us that well you have the same problem",
    "start": "1583619",
    "end": "1588779"
  },
  {
    "text": "that hit earlier you you can't really send null in here because this here expects a non inaudible type but you",
    "start": "1588779",
    "end": "1595289"
  },
  {
    "text": "know I know better than the compiler said this is not going to be a null object so the Ordnung goes away this",
    "start": "1595289",
    "end": "1603269"
  },
  {
    "text": "kind of illustrates one of the interesting problems with this now of",
    "start": "1603269",
    "end": "1610109"
  },
  {
    "text": "course this is very powerful especially if you turn on warnings as errors you're gonna blow up in or when you compile",
    "start": "1610109",
    "end": "1615779"
  },
  {
    "text": "this so one of the things that you can do is you can say well for this particular case here let's get rid of",
    "start": "1615779",
    "end": "1622619"
  },
  {
    "text": "that so we get the warning I can't say that I want no labels disabled and for",
    "start": "1622619",
    "end": "1629149"
  },
  {
    "text": "everything you know in that particular context or this in this case inside the method it's gonna disable that check for",
    "start": "1629149",
    "end": "1635999"
  },
  {
    "text": "the knowable reference times but we can also do this on the method level right we can do it on the class itself or we",
    "start": "1635999",
    "end": "1644940"
  },
  {
    "text": "can move this to the namespace we're outside that which will do it for this entire file so we don't have to go into",
    "start": "1644940",
    "end": "1651389"
  },
  {
    "text": "our project file and enable this for everywhere we can simply go ahead and disable it for the project and then go",
    "start": "1651389",
    "end": "1657029"
  },
  {
    "text": "ahead and enable this wherever we want to start refactoring code and make it a little bit better I think this is a",
    "start": "1657029",
    "end": "1665549"
  },
  {
    "text": "really great addition to the language especially having done a lot of kasnia Rieslings work recently where everything",
    "start": "1665549",
    "end": "1670859"
  },
  {
    "text": "is not a little by default you have to opt in to things being null and the compiler is gonna slap you really hard",
    "start": "1670859",
    "end": "1676139"
  },
  {
    "text": "on your fingers if you try to force it to do something that you're not supposed to so this is a great addition what",
    "start": "1676139",
    "end": "1682019"
  },
  {
    "text": "they've also added now is there's no coalescing assignment which will allow us to say if the person is null I want",
    "start": "1682019",
    "end": "1689009"
  },
  {
    "text": "you to do this thing here so instead of us having to write person is equal to a",
    "start": "1689009",
    "end": "1694499"
  },
  {
    "text": "person person right that's going to be a fuel character",
    "start": "1694499",
    "end": "1702530"
  },
  {
    "text": "slice and you know with the I'll show you a feature that's coming in the",
    "start": "1702530",
    "end": "1707840"
  },
  {
    "text": "future which won't compile you know I didn't have time to implement all the features myself and we have the",
    "start": "1707840",
    "end": "1713420"
  },
  {
    "text": "documents can be able to do this they'll be nasty but that requires a",
    "start": "1713420",
    "end": "1720890"
  },
  {
    "text": "runtime change its role and they haven't done any runtime changes for a very long time most of the things that we see our",
    "start": "1720890",
    "end": "1727670"
  },
  {
    "text": "compiler magic but since they're doing runtime changes they can add more and more interesting features to language so",
    "start": "1727670",
    "end": "1734990"
  },
  {
    "text": "that's not all reference types that's a kind of cool addition to the language question",
    "start": "1734990",
    "end": "1739990"
  },
  {
    "text": "so your question is how do we handle if we're using third-party libraries and that this can use the kind of a false",
    "start": "1756250",
    "end": "1763370"
  },
  {
    "text": "sense of security because it could tell you that you don't have a problem when you might have a problem well it's not",
    "start": "1763370",
    "end": "1768830"
  },
  {
    "text": "gonna be foolproof it's not gonna look through how everything works inside those libraries you have to trust the",
    "start": "1768830",
    "end": "1773960"
  },
  {
    "text": "library author to do this properly on their end but you know you can still at last I showed you like even if you have",
    "start": "1773960",
    "end": "1779510"
  },
  {
    "text": "a no object you can you can force this to to be null right so if we say person",
    "start": "1779510",
    "end": "1784700"
  },
  {
    "text": "here is going to be equal to null even though we we might not be allowed to do that it's gonna give us a warning but",
    "start": "1784700",
    "end": "1789860"
  },
  {
    "text": "you know I can promise that this is not going to be null and we'll still have a actually I can promise it down here and",
    "start": "1789860",
    "end": "1795290"
  },
  {
    "text": "we can promise that this is not going to be in home afterwards right so there we go sorry so even though that the",
    "start": "1795290",
    "end": "1802910"
  },
  {
    "text": "compiler is trying to give us a little bit of help of course it's not gonna find all the the cases and we still have",
    "start": "1802910",
    "end": "1808460"
  },
  {
    "text": "to write our tests has their code and we're still gonna end up having problems but it's kind of a first guard for",
    "start": "1808460",
    "end": "1814040"
  },
  {
    "text": "finding the null reference exceptions so you're right it can be a full sense of security about it's it's still better",
    "start": "1814040",
    "end": "1820220"
  },
  {
    "text": "than we what we had earlier please I reckon all right so that's the inaudible",
    "start": "1820220",
    "end": "1825950"
  },
  {
    "text": "reference types now let's talk about using declarations and I actually added",
    "start": "1825950",
    "end": "1831710"
  },
  {
    "text": "a demo in here from so that I saw on Twitter yesterday which is really interesting but we'll get to that after this first one so now with using",
    "start": "1831710",
    "end": "1839110"
  },
  {
    "text": "declarations or enhanced use things one of the things that we can do is that we can say I want to introduce the using",
    "start": "1839110",
    "end": "1845180"
  },
  {
    "text": "block that's disposed whenever the method now ends right whenever this method is completed it's kind of called",
    "start": "1845180",
    "end": "1851090"
  },
  {
    "text": "dispose on whatever we use using baran so I don't have to wrap this entire thing in a block looking like this here",
    "start": "1851090",
    "end": "1858490"
  },
  {
    "text": "because if we are we have multiple use things inside the method it's gonna end",
    "start": "1858490",
    "end": "1863900"
  },
  {
    "text": "up being nasty and not looking at that very nice so now we can say using var up",
    "start": "1863900",
    "end": "1869660"
  },
  {
    "text": "here at the top and this is now going to make sure that we dispose this HTTP client whenever the method is completed",
    "start": "1869660",
    "end": "1876760"
  },
  {
    "text": "so how do we abuse this other programming languages like go for",
    "start": "1876760",
    "end": "1882890"
  },
  {
    "text": "instance has an interesting notion of DD for keyword which means that we can now defer",
    "start": "1882890",
    "end": "1888650"
  },
  {
    "text": "execution of something until the method ends so this method here I'm simply",
    "start": "1888650",
    "end": "1894140"
  },
  {
    "text": "saying well I want to create a new thing here which I'm going to defer to execute",
    "start": "1894140",
    "end": "1899180"
  },
  {
    "text": "whenever the method ends and this comes from from this guy here Ruben he works for Microsoft totally",
    "start": "1899180",
    "end": "1905270"
  },
  {
    "text": "smart guy and you know this is this is interesting so what we're doing here is",
    "start": "1905270",
    "end": "1910430"
  },
  {
    "text": "that we are simply we have a struct here that's implementing I disposable which means that when this method here",
    "start": "1910430",
    "end": "1916130"
  },
  {
    "text": "disposes it's going to invoke the action that I passed to the constructor which means that this code here is going to be",
    "start": "1916130",
    "end": "1921920"
  },
  {
    "text": "executed when this method is done makes sense so if I run this here it's gonna",
    "start": "1921920",
    "end": "1928070"
  },
  {
    "text": "say hello and DC and then from Phillip right so we now deferred that execution",
    "start": "1928070",
    "end": "1934760"
  },
  {
    "text": "to the end of the method some other programming languages like go has this default in the language and this is an",
    "start": "1934760",
    "end": "1942320"
  },
  {
    "text": "interesting thing so let's see the using declarations small additions like that",
    "start": "1942320",
    "end": "1950480"
  },
  {
    "text": "are very welcome into language alright so another interesting thing is anyone",
    "start": "1950480",
    "end": "1956000"
  },
  {
    "text": "here we use local functions a few you Oh a lot of you so you know if you're using",
    "start": "1956000",
    "end": "1962570"
  },
  {
    "text": "local functions one of the drawbacks is that if you accidentally use a local variable in your class or in the context",
    "start": "1962570",
    "end": "1968960"
  },
  {
    "text": "or a property in your class is going to capture that entire context as a reference to that object you can change things and you know it becomes kind of",
    "start": "1968960",
    "end": "1975980"
  },
  {
    "text": "nasty so I have this over-engineering method here inside my computed which is now accessing my my name property inside",
    "start": "1975980",
    "end": "1983300"
  },
  {
    "text": "the class and that's not very nice right because now it has to capture that into this thing here and the generated code",
    "start": "1983300",
    "end": "1989150"
  },
  {
    "text": "for this gets rather ugly so what they've introduced is a way for us to have a static local function now what",
    "start": "1989150",
    "end": "1997340"
  },
  {
    "text": "that means is that I can no longer access things inside the class or inside this method itself which means that I",
    "start": "1997340",
    "end": "2006190"
  },
  {
    "text": "promised that the over-engineer method in this case is not going to have any implications whenever I call it so",
    "start": "2006190",
    "end": "2012130"
  },
  {
    "text": "you'll have to trust whatever you pass into it and what its returning and that's a nice addition especially if you use local functions quite a bit",
    "start": "2012130",
    "end": "2020290"
  },
  {
    "text": "alright one of my favorite features added to c-sharp 8 is going to be something called asynchronous dreams",
    "start": "2020290",
    "end": "2026090"
  },
  {
    "text": "which means that we can now work with streams of data in an asynchronous manner which has been you've been able",
    "start": "2026090",
    "end": "2031700"
  },
  {
    "text": "to do this before but now this syntax allows us to much more easily work with these streams of data so imagine in this",
    "start": "2031700",
    "end": "2038270"
  },
  {
    "text": "case here I call this method which is going to return me a collection of data but each element is going to be coming",
    "start": "2038270",
    "end": "2044750"
  },
  {
    "text": "to me asynchronously so we're able to handle each element as they arrive all right it could be reading lines from the",
    "start": "2044750",
    "end": "2051620"
  },
  {
    "text": "disk it could be fetching things from the web and you know reading chunks of bytes by byte by byte right so the way",
    "start": "2051620",
    "end": "2059628"
  },
  {
    "text": "that we do this is by applying the awake keyword inside of our foreach loop to say that this here is going to asynchronously loop over some data that",
    "start": "2059629",
    "end": "2067460"
  },
  {
    "text": "we get so if we check this implementation what we have here is we",
    "start": "2067460",
    "end": "2074120"
  },
  {
    "text": "now have a way for us to say for each element from 0 to 10 you know we're gonna go ahead and fetch some data we're",
    "start": "2074120",
    "end": "2079760"
  },
  {
    "text": "gonna load something from this we're gonna process some data and the key thing here is that we're using yield",
    "start": "2079760",
    "end": "2085128"
  },
  {
    "text": "return together with the I a synchronous I a sync enumerable this is going to do",
    "start": "2085129",
    "end": "2091280"
  },
  {
    "text": "all the magic forest it's going to set up this state machines and all of that all of those interesting things alright",
    "start": "2091280",
    "end": "2096648"
  },
  {
    "text": "so the yield return here we'll make sure that it notifies whoever is calling this method a synchronously that you can now",
    "start": "2096649",
    "end": "2101900"
  },
  {
    "text": "process this particular element so if we run this application it'll stream out",
    "start": "2101900",
    "end": "2106970"
  },
  {
    "text": "the numbers to the console here it's not blocking you know it's it's just processing this as it goes on a little",
    "start": "2106970",
    "end": "2114500"
  },
  {
    "text": "bit of a more real-world scenario is if we use the file system to load some data",
    "start": "2114500",
    "end": "2121130"
  },
  {
    "text": "and then we might process that now to make it easier I've just added some some",
    "start": "2121130",
    "end": "2127310"
  },
  {
    "text": "delay to make sure that you know it works so we have this method called get",
    "start": "2127310",
    "end": "2134120"
  },
  {
    "text": "lyrics it's going to use the new using declarations as well to open a stream to a file on my disk it'll dispose of that whenever this",
    "start": "2134120",
    "end": "2140480"
  },
  {
    "text": "method is done right even though we are synchronously returning elements as we go on it'll make sure that it disposes",
    "start": "2140480",
    "end": "2146780"
  },
  {
    "text": "that properly at the end of the method and then we're saying that we want to read each line asynchronously",
    "start": "2146780",
    "end": "2153050"
  },
  {
    "text": "as long as that doesn't return any nulls and then we want to do some processing on that data",
    "start": "2153050",
    "end": "2158900"
  },
  {
    "text": "maybe chunk it up maybe it's a large set of customer data or whatever you know and then we want to return that line",
    "start": "2158900",
    "end": "2164720"
  },
  {
    "text": "back to the caller before I run this there's gonna be another change in c-sharp 9 probably where you can do this",
    "start": "2164720",
    "end": "2170780"
  },
  {
    "text": "in line as well so you wouldn't have that line variable outside of that scope",
    "start": "2170780",
    "end": "2175940"
  },
  {
    "text": "as well but that's coming later on all right so now if we run this it should",
    "start": "2175940",
    "end": "2183170"
  },
  {
    "text": "asynchronously retrieve or return the data to our console right let's see if",
    "start": "2183170",
    "end": "2188720"
  },
  {
    "text": "you all know the song alright so you",
    "start": "2188720",
    "end": "2196190"
  },
  {
    "text": "were just rickrolled by the console app so that's pretty cool so this here is",
    "start": "2196190",
    "end": "2202010"
  },
  {
    "text": "now leveraging this newest synchronous reims with the async and avoid keywords so even though that the async and a",
    "start": "2202010",
    "end": "2207050"
  },
  {
    "text": "weight and all the asynchronous principles have been around for a long time they're still adding improvements to those language features and the way",
    "start": "2207050",
    "end": "2212930"
  },
  {
    "text": "that we integrate with api's and so forth it's interesting because even",
    "start": "2212930",
    "end": "2218000"
  },
  {
    "text": "before they release this feature I tried to do something similar like this I try to use the yield return in anything for",
    "start": "2218000",
    "end": "2223400"
  },
  {
    "text": "his context that I wanted to use down here for each loop and so forth but it just didn't work so this was a really",
    "start": "2223400",
    "end": "2228590"
  },
  {
    "text": "nice addition all right so the the final one that I really don't want to show you",
    "start": "2228590",
    "end": "2234220"
  },
  {
    "text": "because it's really nasty it's default interface methods I'm not really",
    "start": "2234220",
    "end": "2240080"
  },
  {
    "text": "particularly found of being able to introduce methods on my interfaces but let's go through the problem they're",
    "start": "2240080",
    "end": "2245600"
  },
  {
    "text": "trying to solve so we have this interface here called I cache I have my memory cache or in-memory cache that",
    "start": "2245600",
    "end": "2250820"
  },
  {
    "text": "implements this particular interface it allows me to in this case here just sets up the dictionary allows me to add and",
    "start": "2250820",
    "end": "2256880"
  },
  {
    "text": "get and retrieve a elements based on a particular key super simple it's just a",
    "start": "2256880",
    "end": "2262450"
  },
  {
    "text": "over-engineer solution for a dictionary right which I'm using anyways but I could be implementing this for readies",
    "start": "2262450",
    "end": "2268460"
  },
  {
    "text": "cache and whatnot now of course I can use this in my application in a rather",
    "start": "2268460",
    "end": "2274190"
  },
  {
    "text": "simple matter I can say well how about just add two elements I don't care about the particular types of those those",
    "start": "2274190",
    "end": "2280220"
  },
  {
    "text": "things but now I'm the library author of this interface and some default",
    "start": "2280220",
    "end": "2286280"
  },
  {
    "text": "implementation and I want to improve this interface I want to add generics right but if I were",
    "start": "2286280",
    "end": "2291559"
  },
  {
    "text": "to simply I don't want to add a generic interface which I could do this but I don't want to do that instead I want to",
    "start": "2291559",
    "end": "2297710"
  },
  {
    "text": "introduce I want to introduce two new methods that allows us to leverage the",
    "start": "2297710",
    "end": "2304760"
  },
  {
    "text": "get and add methods in a generic manner right",
    "start": "2304760",
    "end": "2309950"
  },
  {
    "text": "super simple I'm simply saying here this is going to be a generic method it takes the the the generic parameter here is",
    "start": "2309950",
    "end": "2315980"
  },
  {
    "text": "the key and that'll return turn a value pretty simple although the problem now",
    "start": "2315980",
    "end": "2321380"
  },
  {
    "text": "is that I have to implement this if I bring down this needed package all of the people that are used my package will now have to implement my new methods and",
    "start": "2321380",
    "end": "2328970"
  },
  {
    "text": "we might not want to do that because for library authors and open-source community workers you know they they get",
    "start": "2328970",
    "end": "2335599"
  },
  {
    "text": "a lot of hate for you know updating their interfaces and and so forth people get about upset about the most tiny",
    "start": "2335599",
    "end": "2343160"
  },
  {
    "text": "things so what I can do now is that I can say well I want to provide a default implementation for this so I can use the",
    "start": "2343160",
    "end": "2349849"
  },
  {
    "text": "the expression body remember to do that or I can use a normal normal method body",
    "start": "2349849",
    "end": "2357490"
  },
  {
    "text": "for this as well so now all of a sudden the the warning goes away on my class",
    "start": "2357490",
    "end": "2362660"
  },
  {
    "text": "here so I have no idea that I updated this package and I have no clue that I need to update this this particular",
    "start": "2362660",
    "end": "2369170"
  },
  {
    "text": "class because we were providing these default implementations right it's an",
    "start": "2369170",
    "end": "2376760"
  },
  {
    "text": "interesting addition to the language and you know if you look at this it kind of introduces multiple inheritance as well",
    "start": "2376760",
    "end": "2382670"
  },
  {
    "text": "because I can implement multiple interfaces if I have multiple interfaces that implement their own methods things",
    "start": "2382670",
    "end": "2389270"
  },
  {
    "text": "are going to break and blow up so how do we use these different methods now well I've implemented that my in-memory cache",
    "start": "2389270",
    "end": "2396740"
  },
  {
    "text": "implements the interface that has these default implementations but what's interesting here is that if we look at",
    "start": "2396740",
    "end": "2402619"
  },
  {
    "text": "the methods available on my end memory cache I don't have a generic version of AD so that's at least pretty good so how",
    "start": "2402619",
    "end": "2410869"
  },
  {
    "text": "do we leverage these things here I reckon that no one's gonna run into this scenario where are you not going to be",
    "start": "2410869",
    "end": "2416000"
  },
  {
    "text": "able to see this because everyone's injecting their interfaces right so if we force this be an eye cache and now we check which",
    "start": "2416000",
    "end": "2425600"
  },
  {
    "text": "methods we have available here we now have the generic versions so as long as I'm telling this here that I have the",
    "start": "2425600",
    "end": "2431600"
  },
  {
    "text": "interface it's going to allow us to use the generic versions and it's just gonna work and of course if I do this it's",
    "start": "2431600",
    "end": "2441020"
  },
  {
    "text": "gonna blow up because my whoops because",
    "start": "2441020",
    "end": "2446420"
  },
  {
    "text": "it's going to try and get hello world and Stack Overflow for some reason great",
    "start": "2446420",
    "end": "2452770"
  },
  {
    "text": "or tells me to go read Stack Overflow I don't know all right so that's I think",
    "start": "2452770",
    "end": "2460220"
  },
  {
    "text": "it's an interesting addition to the language but I see the problems with introducing this as well because it now",
    "start": "2460220",
    "end": "2465290"
  },
  {
    "text": "allows us to firstest do the multiple inheritance thing but the good thing is that you don't have access to two",
    "start": "2465290",
    "end": "2470630"
  },
  {
    "text": "particular instance of the object so there one of the problems if you're doing C++ there's many problems with",
    "start": "2470630",
    "end": "2476570"
  },
  {
    "text": "that but if you do C++ and you do multiple inheritance you know you have access to the instance of the object but",
    "start": "2476570",
    "end": "2483500"
  },
  {
    "text": "you don't have that here you can't magically access this here so this will not be available hopefully not all right",
    "start": "2483500",
    "end": "2492140"
  },
  {
    "text": "well you would battle to access the the static things or the things on the interface but you wouldn't be actually actually able to access the the instance",
    "start": "2492140",
    "end": "2499850"
  },
  {
    "text": "itself right so that's all of the",
    "start": "2499850",
    "end": "2504980"
  },
  {
    "text": "interesting features that I'm gonna show you in the C sharp 8 let's now talk a little bit about the things I didn't",
    "start": "2504980",
    "end": "2510740"
  },
  {
    "text": "show you in C sharp 8 so we went through a whole lot of interesting features everything from you know default",
    "start": "2510740",
    "end": "2517460"
  },
  {
    "text": "interface methods to you noble reference types the recursive pattern async streams and hence usings and ranges and",
    "start": "2517460",
    "end": "2523340"
  },
  {
    "text": "localizing assignment and Static local functions so what I think is interesting is that they have the capability of",
    "start": "2523340",
    "end": "2529250"
  },
  {
    "text": "adding all of these amazing language features still after after so many years of this language being on the planet",
    "start": "2529250",
    "end": "2536240"
  },
  {
    "text": "right they still find a way to improve it because you know building software in",
    "start": "2536240",
    "end": "2541550"
  },
  {
    "text": "in 2019 or 2020 it's not the same as building software 20 years ago so the language needs to evolve with the",
    "start": "2541550",
    "end": "2546770"
  },
  {
    "text": "community and with the people that use the language for the particular types of applications that we're building the",
    "start": "2546770",
    "end": "2552710"
  },
  {
    "text": "features that I didn't show you is read only members but that's only for struct so most of us probably don't use stock",
    "start": "2552710",
    "end": "2558859"
  },
  {
    "text": "structs on a daily basis but you can ensure that a member in your struct is read only which means that it doesn't",
    "start": "2558859",
    "end": "2565040"
  },
  {
    "text": "have any implications when you call it or when you use it on any of the other things on your particular struct we can",
    "start": "2565040",
    "end": "2571970"
  },
  {
    "text": "have alternative interpolated verbatim strings and stack alakina stood contexts as well as unmanaged eric starts right",
    "start": "2571970",
    "end": "2580099"
  },
  {
    "text": "now what's coming after c-sharp 8 I'm not sure what the version numbers gonna be",
    "start": "2580099",
    "end": "2586180"
  },
  {
    "text": "Microsoft tends to to skip a few numbers especially when it comes to 9 so we'll see if the next version is gonna be X or",
    "start": "2586180",
    "end": "2592700"
  },
  {
    "text": "10 or every one I call it one of the things I like to say is that you saw the the milestone for c-sharp aid had a lot",
    "start": "2592700",
    "end": "2599869"
  },
  {
    "text": "of features right 89% of the features they added in the milestone didn't getting to the language which means that",
    "start": "2599869",
    "end": "2605900"
  },
  {
    "text": "we shouldn't be sad if they cut the features so whatever I show you here some of the features have been on their",
    "start": "2605900",
    "end": "2611300"
  },
  {
    "text": "to-do list since c-sharp 6 and I bet that a lot of these language features that I recently added have been on their",
    "start": "2611300",
    "end": "2618109"
  },
  {
    "text": "to-do list even long before that you know the reason for them rewriting the compilers is because it's really hard to",
    "start": "2618109",
    "end": "2623569"
  },
  {
    "text": "add things to a very old code base we all know that just thrown code out and",
    "start": "2623569",
    "end": "2628640"
  },
  {
    "text": "rewriting it is the best approach so one thing that I showed you earlier is this target type new expression so instead of",
    "start": "2628640",
    "end": "2635329"
  },
  {
    "text": "having to specify the thing we're creating we're now moving the thing that we're creating over to this side we're",
    "start": "2635329",
    "end": "2643220"
  },
  {
    "text": "not really saving a lot of characters maybe three or four if we serve our keyword but where it becomes interesting is that in this case here I'm creating",
    "start": "2643220",
    "end": "2650390"
  },
  {
    "text": "this dictionary of string and list integers and I can simply say give me a new instance of this and in my",
    "start": "2650390",
    "end": "2656000"
  },
  {
    "text": "collection initializer I can say give me a new instance off you know whatever that thing is and it'll just figure that",
    "start": "2656000",
    "end": "2664910"
  },
  {
    "text": "out and this here requires a runtime change so they're probably gonna wait until a little I don't know dotnet 5 which is",
    "start": "2664910",
    "end": "2671270"
  },
  {
    "text": "going to be the the next version of.net where they moving everyone over to core",
    "start": "2671270",
    "end": "2676869"
  },
  {
    "text": "ok so one more thing I want to do is allow us to again write less characters",
    "start": "2676869",
    "end": "2682520"
  },
  {
    "text": "so instead of having to be very explicit about in this case here I'm creating this is tuple here with 2d file",
    "start": "2682520",
    "end": "2688670"
  },
  {
    "text": "values is going to give us a default of integer and default of string why not just allow us to say give me the default",
    "start": "2688670",
    "end": "2694670"
  },
  {
    "text": "of this tuple and it just figures that out simple compiler magic not really a major feature traged language so one of",
    "start": "2694670",
    "end": "2702170"
  },
  {
    "text": "the things I really enjoy and I hope this is going to get here soon because what's interesting as well with the way",
    "start": "2702170",
    "end": "2707960"
  },
  {
    "text": "they work with the compiler is that you know c-sharp 8 was released together with document core 3.0 which was",
    "start": "2707960",
    "end": "2712970"
  },
  {
    "text": "released what six months after Visual Studio 2019 so if you update Visual Studio today you will get the latest",
    "start": "2712970",
    "end": "2719059"
  },
  {
    "text": "version of the language and dotnet core right and the same thing goes for four new features like this here the generic",
    "start": "2719059",
    "end": "2725660"
  },
  {
    "text": "attributes if they just add that to the compiler they could ship that with the next version of Visual Studio this means",
    "start": "2725660",
    "end": "2731930"
  },
  {
    "text": "it can become very confusing if you were in large organizations where people tend to have different versions of Visual",
    "start": "2731930",
    "end": "2737599"
  },
  {
    "text": "Studio so how many of you have wanted to do generic attributes if you've done filters in asp.net and you know it's",
    "start": "2737599",
    "end": "2744380"
  },
  {
    "text": "kind of a few of you I've wanted to do that so now they're introducing the the way for us to do that previously you had",
    "start": "2744380",
    "end": "2750230"
  },
  {
    "text": "to inject you know the type in your constructor and you know that became a little bit ugly but no longer have to do",
    "start": "2750230",
    "end": "2756470"
  },
  {
    "text": "that we can now simply say we have this generic attribute don't know why it's taken them so long but apparently",
    "start": "2756470",
    "end": "2761990"
  },
  {
    "text": "there's maybe some some some hard things to solve when it comes to the attributes another nice addition to the language is",
    "start": "2761990",
    "end": "2770119"
  },
  {
    "text": "the color expression attributes which is a way for us to apply an attribute on one of these parameters to our method to",
    "start": "2770119",
    "end": "2777440"
  },
  {
    "text": "say well I want you to take the the argument or the the expression that was",
    "start": "2777440",
    "end": "2783019"
  },
  {
    "text": "passed in the condition here and inject that automatically as a string here so all that's doing is allowing us to skip",
    "start": "2783019",
    "end": "2789680"
  },
  {
    "text": "writing the message ourselves for debug assert here and the compiler will generate this code for us so if we have",
    "start": "2789680",
    "end": "2796009"
  },
  {
    "text": "a you know a logger or we have a test we can now get a little bit more better information out of this here so library",
    "start": "2796009",
    "end": "2802430"
  },
  {
    "text": "authors will be able to leverage this and make it a little bit easier okay so",
    "start": "2802430",
    "end": "2808539"
  },
  {
    "text": "we also want ways for us to check if types are equal to two null or they're",
    "start": "2808539",
    "end": "2814160"
  },
  {
    "text": "not nola or if there are particular things so of course I want to say for",
    "start": "2814160",
    "end": "2819589"
  },
  {
    "text": "all I could use pattern matching to solve the same thing but why not allow us to introduce something called negated condition of",
    "start": "2819589",
    "end": "2825140"
  },
  {
    "text": "statements so we can translate this thing here into maybe shape is not a triangle or if not shape is a triangle",
    "start": "2825140",
    "end": "2832789"
  },
  {
    "text": "or unless shape is a triangle I don't think they've really decided on which way to go here I'm not fond of adding",
    "start": "2832789",
    "end": "2839930"
  },
  {
    "text": "new new keywords for a thing like this here alright but you know maybe it's not",
    "start": "2839930",
    "end": "2846079"
  },
  {
    "text": "it's a great addition to language and of course improving the ways that we work with nulls no conditional awaits if you",
    "start": "2846079",
    "end": "2852049"
  },
  {
    "text": "were doing a lot of asynchronous work you might have seen this before where you check if the task is not equal to no",
    "start": "2852049",
    "end": "2857299"
  },
  {
    "text": "simply await the task otherwise just return all we can now say await the task if it's not null this here expect out to",
    "start": "2857299",
    "end": "2865309"
  },
  {
    "text": "be a little bit harder for them to implement because it's involved in the state machine and all of that",
    "start": "2865309",
    "end": "2870490"
  },
  {
    "text": "since the sharp six they wanted to introduce something called record types record types is a way for us to",
    "start": "2870490",
    "end": "2876289"
  },
  {
    "text": "introduce a DTO or a model if you so like so in this case here I have my",
    "start": "2876289",
    "end": "2882200"
  },
  {
    "text": "triangle of shape it has all of these we're very standard things right and a lot of us do this all the time we create",
    "start": "2882200",
    "end": "2887960"
  },
  {
    "text": "D tos for for all the things in our domain and it kind of gets tedious as well if you want to be able to introduce",
    "start": "2887960",
    "end": "2894319"
  },
  {
    "text": "equality checks for the properties and so forth so why not just allow us to say",
    "start": "2894319",
    "end": "2899750"
  },
  {
    "text": "I want a record of a triangle where I require a side of a B and C and then",
    "start": "2899750",
    "end": "2905630"
  },
  {
    "text": "this inherits from my particular type of shape here when I compile this here the idea is that it generates a whole bunch",
    "start": "2905630",
    "end": "2912500"
  },
  {
    "text": "of different things of course we get a constructor that shows us that this requires us to specify a B and C when we",
    "start": "2912500",
    "end": "2918589"
  },
  {
    "text": "instantiate this here it would introduce an equality check that if you compare",
    "start": "2918589",
    "end": "2923869"
  },
  {
    "text": "two triangles it will in fact compare the properties of that triangle and not compare the instance that's pretty cool",
    "start": "2923869",
    "end": "2931039"
  },
  {
    "text": "and then of course we want everything to be immutable which means that you shouldn't be able to change the triangle",
    "start": "2931039",
    "end": "2936950"
  },
  {
    "text": "once you've created it in order for you to create a new triangle or change the triangle you need to create a new one",
    "start": "2936950",
    "end": "2942079"
  },
  {
    "text": "and that's why we here at the end we have this thing here it's creating a new triangle based on what we're passing",
    "start": "2942079",
    "end": "2947869"
  },
  {
    "text": "into this width width method here it's a nice pattern then of course getting a",
    "start": "2947869",
    "end": "2953180"
  },
  {
    "text": "deconstruct out of this by default we can use pattern matching and use the tuple expressions and so forth so I",
    "start": "2953180",
    "end": "2960349"
  },
  {
    "text": "think this is one of the the better additions to to the language and hopefully this is going to come soon but",
    "start": "2960349",
    "end": "2966529"
  },
  {
    "text": "they promised this in c-sharp six I think they had a version of this in c-sharp six and it was just scratched",
    "start": "2966529",
    "end": "2971779"
  },
  {
    "text": "the tough thing to do here is to solve this for inheritance personally I think that they should just scratch the",
    "start": "2971779",
    "end": "2977900"
  },
  {
    "text": "capability of doing inheritance that's an easy way to fix it but maybe that's just the consulting consultant in me talking alright so I",
    "start": "2977900",
    "end": "2986599"
  },
  {
    "text": "showed you this as well the declaration expressions so why have having to write our character declared that at the line",
    "start": "2986599",
    "end": "2992329"
  },
  {
    "text": "above here when we're only using that inside our while loop here that means that we could use the character after the while loop becomes nasty why not",
    "start": "2992329",
    "end": "2999260"
  },
  {
    "text": "just allow us to do that in line with the while loop and only have it available in that particular context so",
    "start": "2999260",
    "end": "3005170"
  },
  {
    "text": "you can see a pattern with the feature state they add to the language it's about avoiding null ability or avoiding",
    "start": "3005170",
    "end": "3011859"
  },
  {
    "text": "us to do null reference exceptions it's allowing us to write more code that's easier for us to understand and in this",
    "start": "3011859",
    "end": "3018069"
  },
  {
    "text": "case it's going to be a little bit less error-prone right because we move that thing into that particular context and",
    "start": "3018069",
    "end": "3023710"
  },
  {
    "text": "you know no one can can use that outside of this method so if you're a lot of developers working on the same project",
    "start": "3023710",
    "end": "3029650"
  },
  {
    "text": "all these small features make up for some really nice addition to the language in it's kind of tedious for us",
    "start": "3029650",
    "end": "3036339"
  },
  {
    "text": "to instantiate dictionaries so why not introduce a syntax that allows us to to",
    "start": "3036339",
    "end": "3041470"
  },
  {
    "text": "make it a little bit better and you see here at the bottom of the slides I can share the slides that are on but I have references to the seizure of language",
    "start": "3041470",
    "end": "3048670"
  },
  {
    "text": "repository where they talk about all of these different things so this here is going to introduce a new syntax that",
    "start": "3048670",
    "end": "3054490"
  },
  {
    "text": "allows us to instantiate one of these dictionaries a little bit nicer and just figures out the types and so forth now",
    "start": "3054490",
    "end": "3062109"
  },
  {
    "text": "finally or one more feature that I want to talk about is extension everything so one of the problems with extension",
    "start": "3062109",
    "end": "3068680"
  },
  {
    "text": "methods in c-sharp is that we can can't really extend things like the integers or doubles or you know the things that",
    "start": "3068680",
    "end": "3075789"
  },
  {
    "text": "we don't really own that way so in this case here imagine that I have this interface that allows us to simply add",
    "start": "3075789",
    "end": "3082390"
  },
  {
    "text": "this bar property on something so whoever is implementing this interface will get the",
    "start": "3082390",
    "end": "3088280"
  },
  {
    "text": "the board property how about allowing me to add this to an integer wouldn't that be pretty cool I don't know why you",
    "start": "3088280",
    "end": "3094130"
  },
  {
    "text": "would but you can do it with extensions everything you can say well I want to create an extension for integer all",
    "start": "3094130",
    "end": "3100760"
  },
  {
    "text": "right so I'm saying create an extension for for integer that I call in few here it's going to implement my particular",
    "start": "3100760",
    "end": "3106640"
  },
  {
    "text": "interface and then inside the context of my application I can create a new integer and I can think call X dot bar",
    "start": "3106640",
    "end": "3113150"
  },
  {
    "text": "here and that will just work there are some really nice applications to this here but it's also very dangerous",
    "start": "3113150",
    "end": "3119150"
  },
  {
    "text": "because all of a sudden you end up having some really interesting extensions in your applications and",
    "start": "3119150",
    "end": "3124460"
  },
  {
    "text": "potential problems as well but if you do a lot of math it's nice to be able to extend in sand and doubles and decimals",
    "start": "3124460",
    "end": "3131450"
  },
  {
    "text": "and all of that and floats you know so I think it's a good addition for for some use cases but not for all of them it's",
    "start": "3131450",
    "end": "3137540"
  },
  {
    "text": "the same with the extension methods right they have their place in the applications but I've seen a lot of developers abusing that as well so you",
    "start": "3137540",
    "end": "3144020"
  },
  {
    "text": "know use all the language features with caution and you know think twice before you just apply things in the apps and",
    "start": "3144020",
    "end": "3149630"
  },
  {
    "text": "you'll be fine so it's interesting because that's not all of the features",
    "start": "3149630",
    "end": "3155450"
  },
  {
    "text": "that they're going to add but that's the ones that I'm smart enough to explain at least we're also getting at something",
    "start": "3155450",
    "end": "3161180"
  },
  {
    "text": "called type classes which I'm certainly not smart enough to explain I've read the the proposal for that language",
    "start": "3161180",
    "end": "3166220"
  },
  {
    "text": "feature probably ten times and I still don't get it so hopefully we're never gonna get the feature because that'll make a hard time",
    "start": "3166220",
    "end": "3172070"
  },
  {
    "text": "for me to make a talk about it so and they were also known as the lambo discard parameter parameter null",
    "start": "3172070",
    "end": "3178370"
  },
  {
    "text": "checking relax ordering of partial on ref modifiers native ends permits of span of int attributes on the local",
    "start": "3178370",
    "end": "3184820"
  },
  {
    "text": "functions function pointers and an and all those assignment operators so there's a bunch of features they want to",
    "start": "3184820",
    "end": "3190880"
  },
  {
    "text": "add to the language and I've pretty much gone through all the the champions and the things that they they might add to the language and our that's on their",
    "start": "3190880",
    "end": "3197180"
  },
  {
    "text": "to-do list but you know we never know which features are going to get into the language itself but hopefully some of",
    "start": "3197180",
    "end": "3203720"
  },
  {
    "text": "the ones that I've talked about here in the C sharp next part is going to make it into language so now if we look at",
    "start": "3203720",
    "end": "3210950"
  },
  {
    "text": "all the things that are happening in c-sharp from seizure of eight to c-sharp whatever the next verse is going to be",
    "start": "3210950",
    "end": "3217580"
  },
  {
    "text": "there's a whole bunch of interesting features coming to the language and I'm a highlighted a",
    "start": "3217580",
    "end": "3222590"
  },
  {
    "text": "few of them that I I like and not like I don't know why I highlighted the default interface methods because I really don't",
    "start": "3222590",
    "end": "3228500"
  },
  {
    "text": "like that oh well you can see her there's so many things coming to the",
    "start": "3228500",
    "end": "3233690"
  },
  {
    "text": "language you know they're not done yet so the language is evolving with all of",
    "start": "3233690",
    "end": "3239390"
  },
  {
    "text": "us that are building software they're adding things that make it easier for us to to work with the language they're",
    "start": "3239390",
    "end": "3245180"
  },
  {
    "text": "making it easier for people that are working in other types of paradigms to make the transition over to c-sharp if",
    "start": "3245180",
    "end": "3250849"
  },
  {
    "text": "you work with f-sharp you can pretty much write c-sharp like you would write F sharp or if you're coming from a Java",
    "start": "3250849",
    "end": "3256040"
  },
  {
    "text": "world you can probably do a little of c-sharp as well so you know there's a",
    "start": "3256040",
    "end": "3261650"
  },
  {
    "text": "lot of things that here that make it easier for us to to build software and I think it's a good addition to the language so you know looking through",
    "start": "3261650",
    "end": "3268520"
  },
  {
    "text": "whatever we got in c-sharp one through seven people might have thought that this language is now done there's not",
    "start": "3268520",
    "end": "3274400"
  },
  {
    "text": "much more things to add to the language but I reckon there's still a lot more to add to it and if we look at the heaps of",
    "start": "3274400",
    "end": "3280580"
  },
  {
    "text": "things they're doing improvements for in c-sharp ada onwards there's a whole bunch of things in here and they're probably not going to stop there and",
    "start": "3280580",
    "end": "3287200"
  },
  {
    "text": "what's interesting as well with the languages in the compilers being open source is that the languages doesn't",
    "start": "3287200",
    "end": "3292970"
  },
  {
    "text": "have they don't have to be you know have feature parity anymore so VB and c-sharp no longer have to have the exact same",
    "start": "3292970",
    "end": "3299330"
  },
  {
    "text": "features which means that if there's a lot of c-sharp language designers working on c-sharp they might ship the",
    "start": "3299330",
    "end": "3305240"
  },
  {
    "text": "feature for C sharp faster than for for VB so now the there's a lot of things",
    "start": "3305240",
    "end": "3310369"
  },
  {
    "text": "happening in the c-sharp world and it's a great time to be a c-sharp developer and I think all these additions are",
    "start": "3310369",
    "end": "3316099"
  },
  {
    "text": "awesome alright so that's it for for my talk I'm Philipp Ekberg it's been a",
    "start": "3316099",
    "end": "3321140"
  },
  {
    "text": "pleasure talking to you on your way out please leave a green thing in the box if you don't do that tell me why so I can",
    "start": "3321140",
    "end": "3327260"
  },
  {
    "text": "improve for next time and if you have any questions you can come up afterwards or just throw something in my face when",
    "start": "3327260",
    "end": "3332660"
  },
  {
    "text": "you see me in the hallway thank you so much",
    "start": "3332660",
    "end": "3336250"
  }
]