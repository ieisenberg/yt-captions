[
  {
    "text": "okay welcome everyone so I'm gonna be talking about Project Orleans is Orleans",
    "start": "3730",
    "end": "10130"
  },
  {
    "text": "framework is I've been dev lead since the beginning so it's very dear to my heart who in the audience ever played",
    "start": "10130",
    "end": "17780"
  },
  {
    "text": "the Halo game oh it's good so the",
    "start": "17780",
    "end": "24230"
  },
  {
    "text": "experience you're dealing with is very different from what's behind the scenes too so instead of explaining what I mean",
    "start": "24230",
    "end": "29570"
  },
  {
    "text": "by saying halo scale I have this video that I'd like to show you the beginning also to wake you up a little bit let's",
    "start": "29570",
    "end": "37249"
  },
  {
    "text": "see if it plays halo is a rich immersive",
    "start": "37249",
    "end": "43370"
  },
  {
    "text": "story with millions of loyal and dedicated fans we deliver an exciting",
    "start": "43370",
    "end": "48440"
  },
  {
    "text": "and engaging experience to these fans they need to know what the hot playlist is today they need to know what the",
    "start": "48440",
    "end": "53480"
  },
  {
    "text": "challenges are they need to know where their friends have been what their friends have been playing have their friends gotten more medals than them",
    "start": "53480",
    "end": "58699"
  },
  {
    "text": "they need to know all of this and they need to react to it and interact with their friends in real-time we need to",
    "start": "58699",
    "end": "63800"
  },
  {
    "text": "deliver hundreds of thousands of updates per second to millions of players across the Halo universe we need to get them",
    "start": "63800",
    "end": "69619"
  },
  {
    "text": "the right information to the right device at the right time there was nothing off-the-shelf that solved the problems we needed to solve",
    "start": "69619",
    "end": "75950"
  },
  {
    "text": "but the scale we needed to solve them so we turned to Microsoft's extreme computing group hundreds of thousands of requests per",
    "start": "75950",
    "end": "82340"
  },
  {
    "text": "second across thousands of servers in real time these guys are crazy but the",
    "start": "82340",
    "end": "87500"
  },
  {
    "text": "extreme computing those are the kind of challenges would like to tackle you can",
    "start": "87500",
    "end": "92509"
  },
  {
    "text": "probably tell that video was a couple years they made a couple years before so I was younger but I think the coop gives",
    "start": "92509",
    "end": "102079"
  },
  {
    "text": "a very good idea of what actually we're talking about we're talking not scale tailor and those kind of services so",
    "start": "102079",
    "end": "109729"
  },
  {
    "text": "we're going to be talking about the cloud obviously and people give these definitions of the cloud by the way we're also going to be playing the game",
    "start": "109729",
    "end": "116479"
  },
  {
    "text": "I'm gonna be playing the game name the tune who knows name the tune No",
    "start": "116479",
    "end": "122719"
  },
  {
    "text": "so when you see when this is in top right corner sentence in quotes if you",
    "start": "122719",
    "end": "129410"
  },
  {
    "text": "can if you know what song it's from or at least what the band that played it",
    "start": "129410",
    "end": "134599"
  },
  {
    "text": "just yell it and somebody who gets the most answers",
    "start": "134599",
    "end": "139610"
  },
  {
    "text": "right will get beer at the party so there is a price so just yell this one",
    "start": "139610",
    "end": "146090"
  },
  {
    "text": "the hardest one I promise you anybody knows anybody got the power no that's",
    "start": "146090",
    "end": "153140"
  },
  {
    "text": "actually from David Bowie actually it's also my test for the age of the audience just to get a sense well no no Justin Bieber no Taylor Swift",
    "start": "153140",
    "end": "160159"
  },
  {
    "text": "that Noah boy either I'm you don't want",
    "start": "160159",
    "end": "166280"
  },
  {
    "text": "me to sing on stage next time so when we",
    "start": "166280",
    "end": "171440"
  },
  {
    "text": "talk about the cloud really like the essence of the cloud is that you get this enormous resources available to you",
    "start": "171440",
    "end": "178099"
  },
  {
    "text": "to rent so that's why everyone's got the power to get almost infinite amount of",
    "start": "178099",
    "end": "183500"
  },
  {
    "text": "resources so you have a credit card that you can charge to pay for the services this power has been available to major",
    "start": "183500",
    "end": "190370"
  },
  {
    "text": "corporations or governments for a decade but now anybody can do it a small start-up can suddenly grow from nothing",
    "start": "190370",
    "end": "196370"
  },
  {
    "text": "to call unicorn I hate the term but they call them unicorn right but with great",
    "start": "196370",
    "end": "201650"
  },
  {
    "text": "power as they say comes great responsibility so you build systems at that scale you",
    "start": "201650",
    "end": "206840"
  },
  {
    "text": "you face new challenges or new all challenges in a new forum like for",
    "start": "206840",
    "end": "212900"
  },
  {
    "text": "example concurrency like who in the audience enjoys debugging multi-threaded code and data races and dead logs I",
    "start": "212900",
    "end": "219669"
  },
  {
    "text": "don't I'm just kidding but now who likes to do that on distributed setting when",
    "start": "219669",
    "end": "224989"
  },
  {
    "text": "you have a logs from say 20 machines and they try to figure out what happened that's you would have magnitude more",
    "start": "224989",
    "end": "231560"
  },
  {
    "text": "difficult than just attaching debugger in finding that dead log or the dead arrays so you have these issues of",
    "start": "231560",
    "end": "237769"
  },
  {
    "text": "distributing your computations concurrency scale failures are the norm right and in the cloud what used to be",
    "start": "237769",
    "end": "243919"
  },
  {
    "text": "happening maybe every few years in a few months now those failures happen every",
    "start": "243919",
    "end": "251060"
  },
  {
    "text": "day depend on your scale because machines get rebooted they get patched you see it as a failure often times see",
    "start": "251060",
    "end": "257359"
  },
  {
    "text": "there is a set of new challenges that we haven't seen before and then when",
    "start": "257359",
    "end": "263120"
  },
  {
    "text": "businesses look and try to figure out what to do with this all that glitters is gold name did you",
    "start": "263120",
    "end": "269430"
  },
  {
    "text": "thank you that's great one point so you",
    "start": "269430",
    "end": "274740"
  },
  {
    "text": "hear this cacophony of this analysts and consultants and Talking Heads saying",
    "start": "274740",
    "end": "283080"
  },
  {
    "text": "here's the solution like for example a few years ago people who are saying you see Facebook was built with PHP and",
    "start": "283080",
    "end": "289199"
  },
  {
    "text": "MySQL so if you use this technologies you can build anything right the build Facebook so even if you use even before",
    "start": "289199",
    "end": "295949"
  },
  {
    "text": "that web services and soap they were supposed to solve all the problems in the world all good technologies and",
    "start": "295949",
    "end": "301740"
  },
  {
    "text": "don't get me wrong these technologies are fine but when somebody says that this technology will help you build a cloud scale solution I",
    "start": "301740",
    "end": "308580"
  },
  {
    "text": "look at it as they trying to sell you this elevator or if you watched Willy Wonka and the Chocolate Factory like one",
    "start": "308580",
    "end": "314580"
  },
  {
    "text": "conveyor whether it is button and you go up and out that solves all the problem um like for example go right is the new",
    "start": "314580",
    "end": "322820"
  },
  {
    "text": "the hipster language programming language no wait",
    "start": "322820",
    "end": "328490"
  },
  {
    "text": "because docker is written in go so again if you write in go you need to learn and go inaudible solve your problem of",
    "start": "329660",
    "end": "334979"
  },
  {
    "text": "course not it's not the case and then you see other comments like oh you have to be stateless or observation that",
    "start": "334979",
    "end": "342539"
  },
  {
    "text": "micro source is a term a good term a good architectural term got abused too",
    "start": "342539",
    "end": "347970"
  },
  {
    "text": "fast and this is my favorites a manager Foley thanks Mary George she said that",
    "start": "347970",
    "end": "353370"
  },
  {
    "text": "the release would solve all the cloud problems back in 2010 that's my favorite one but then you see this picture who",
    "start": "353370",
    "end": "363150"
  },
  {
    "text": "has heard Kyle Kingsbury talking about Jepson called me baby great so if you",
    "start": "363150",
    "end": "368940"
  },
  {
    "text": "had never watched go to youtube search kyle Kingsbury Jepsen's call me maybe",
    "start": "368940",
    "end": "374180"
  },
  {
    "text": "you will not regret everyone who deals with the color has to watch this talk it's a brilliant guy he",
    "start": "374180",
    "end": "380610"
  },
  {
    "text": "just single-handedly showed that all this pretty much all open source distributed bases that are available",
    "start": "380610",
    "end": "386070"
  },
  {
    "text": "they all don't maintain their guarantees in case of network partitions he got his",
    "start": "386070",
    "end": "391979"
  },
  {
    "text": "beefy machine in his apartment and run all this commercially available open",
    "start": "391979",
    "end": "397289"
  },
  {
    "text": "source software in South EMS and he recorded reads and writes to this day",
    "start": "397289",
    "end": "403089"
  },
  {
    "text": "while he was partitioning connections between those VMs simulating actual network partitions and node fillers and",
    "start": "403089",
    "end": "409330"
  },
  {
    "text": "he shows that every single one that got a MongoDB read is elastic search all these",
    "start": "409330",
    "end": "416710"
  },
  {
    "text": "technologies break down and violate loose data violate their guarantees so he showed this picture of tire fire and he",
    "start": "416710",
    "end": "424870"
  },
  {
    "text": "explains that at the top of it the API level of the database you have this rainbows and unicorns everything is fine",
    "start": "424870",
    "end": "431110"
  },
  {
    "text": "from the API perspective but if you look underneath under the cover there's this tire fire of code that doesn't really",
    "start": "431110",
    "end": "437099"
  },
  {
    "text": "maintain its guarantees so you look at that and it's very hard to decide what",
    "start": "437099",
    "end": "443259"
  },
  {
    "text": "to do but that's the reality of our industry in my view if you stuck back",
    "start": "443259",
    "end": "448809"
  },
  {
    "text": "there is this triangle of really concerns you have compute you have state and you have connectivity and there are",
    "start": "448809",
    "end": "455169"
  },
  {
    "text": "many choices like you have to make these trade-offs who are you what have you sacrifice in the tune Jesus Christ",
    "start": "455169",
    "end": "463059"
  },
  {
    "text": "Superstar because you need to sacrifice something to get something for example a batch processing is very efficient if",
    "start": "463059",
    "end": "469689"
  },
  {
    "text": "you can afford high latency if you can process within minutes hours you can be",
    "start": "469689",
    "end": "474729"
  },
  {
    "text": "extremely efficient by putting a lot of data and processing in the MapReduce way with Hadoop but if you need sub-second",
    "start": "474729",
    "end": "481180"
  },
  {
    "text": "latency that doesn't work you have to sacrifice this efficiency for low latency and and this challenges and then",
    "start": "481180",
    "end": "487990"
  },
  {
    "text": "trade-offs going on and on the database the sequel is very good at transactions and guarantees but doesn't scale well",
    "start": "487990",
    "end": "493529"
  },
  {
    "text": "the key value stores are very good at partitioning scaling but they don't provide usually you secondary indexes",
    "start": "493529",
    "end": "499779"
  },
  {
    "text": "that sequel does it for you for free so again you need to get something you need to sacrifice something to get something",
    "start": "499779",
    "end": "505360"
  },
  {
    "text": "I just highlighted what we sort of were concerned with in the project Arleen's",
    "start": "505360",
    "end": "511120"
  },
  {
    "text": "but then if you've heard of a cap theorem I hope everyone heard of the cap theorem that says that you cannot get",
    "start": "511120",
    "end": "516818"
  },
  {
    "text": "consistency and availability at the same time in the distributed system that's pretty much the axiom so this is the the",
    "start": "516819",
    "end": "523029"
  },
  {
    "text": "real challenge we deal with when we talk about the cloud and the solutions are",
    "start": "523029",
    "end": "528810"
  },
  {
    "text": "different right so we have we can hire hero developers",
    "start": "528810",
    "end": "534150"
  },
  {
    "text": "in years ago at Microsoft and developer division had a different term with Einstein developers the category these",
    "start": "534150",
    "end": "541050"
  },
  {
    "text": "are people they can build very complex systems so somebody built Google somebody built Facebook somebody built",
    "start": "541050",
    "end": "547160"
  },
  {
    "text": "MSN and hotmail and those kind of systems so it is possible to tackle this",
    "start": "547160",
    "end": "552320"
  },
  {
    "text": "challenges and to build stuff but those developers are rare and they're",
    "start": "552320",
    "end": "557339"
  },
  {
    "text": "expensive and they're all happily employed so if you try to build business by hiring a bunch of hero developers",
    "start": "557339",
    "end": "563490"
  },
  {
    "text": "that can kind of solve all these problems you can run out of budget very fast but most likely you won't be able",
    "start": "563490",
    "end": "569850"
  },
  {
    "text": "to hire them because what's in for them to leave their job they like and join",
    "start": "569850",
    "end": "574980"
  },
  {
    "text": "your company so in reality when you try to hire people you need to look at the",
    "start": "574980",
    "end": "580260"
  },
  {
    "text": "available pool the cool here a program in Erlang ok there's a couple of people",
    "start": "580260",
    "end": "587730"
  },
  {
    "text": "yeah I know young did Scala yeah one",
    "start": "587730",
    "end": "595950"
  },
  {
    "text": "person two people f-sharp ok more but still a minority so I have really",
    "start": "595950",
    "end": "603150"
  },
  {
    "text": "sincere deep respect for people that master these technologies really like the joy I'm strong is good and giving a",
    "start": "603150",
    "end": "610920"
  },
  {
    "text": "talk I think about Erlang but if you look at reality you can hire people you cannot find people that have these",
    "start": "610920",
    "end": "616680"
  },
  {
    "text": "technologies to try to hire young to your company you'll fail but but also",
    "start": "616680",
    "end": "622230"
  },
  {
    "text": "even at the hero level these developers not Indian to make mistakes and and the",
    "start": "622230",
    "end": "628860"
  },
  {
    "text": "pattern of successful higher scale services if you look at Twitter if you look at LinkedIn if you look at Facebook",
    "start": "628860",
    "end": "634410"
  },
  {
    "text": "they have the same pattern where the rear key checked it and rewrote their system three or four times as their",
    "start": "634410",
    "end": "640410"
  },
  {
    "text": "usage grow so they had to throw away the whole solution essential not just incrementally improve not just refactor",
    "start": "640410",
    "end": "647220"
  },
  {
    "text": "but throw away the architecture in put a new solution in place at the most critical time where the business was",
    "start": "647220",
    "end": "652260"
  },
  {
    "text": "growing and some people some people argue that that was the failure of MySpace that the reason myspace lost",
    "start": "652260",
    "end": "658040"
  },
  {
    "text": "competition to Facebook is because they weren't moving fast enough they couldn't scale with their users and their",
    "start": "658040",
    "end": "664860"
  },
  {
    "text": "experience suffered there are too slow so I would argue it's not a scalable",
    "start": "664860",
    "end": "670060"
  },
  {
    "text": "solution to try to hire more than a handful of hero developers for a company but then we look at the problems as",
    "start": "670060",
    "end": "676750"
  },
  {
    "text": "engineers but if you talk to business people they look at it from very clear business lines like they see time to",
    "start": "676750",
    "end": "683260"
  },
  {
    "text": "market the return on investment those are the terminologies that they use which means I need to build systems fast",
    "start": "683260",
    "end": "690130"
  },
  {
    "text": "I need to build them cheap and they need to be reliable so that cheaper to operate it's a capital expenditure",
    "start": "690130",
    "end": "696190"
  },
  {
    "text": "versus operation expenditure that's fine mental picture is those people trying to",
    "start": "696190",
    "end": "702910"
  },
  {
    "text": "sell you this elevator wonkavator way push button and you up in the cloud which is not realistic it's just up",
    "start": "702910",
    "end": "708510"
  },
  {
    "text": "oftentimes a bunch of people that don't know what they're selling or the Charlatans that trying to sell you this",
    "start": "708510",
    "end": "714340"
  },
  {
    "text": "bridge to nowhere in reality it you need like a stairway where you can walk you can run because you're in a competition",
    "start": "714340",
    "end": "721780"
  },
  {
    "text": "if you if you work in your competition is is running then you'll lose any competition so you have to run to stay",
    "start": "721780",
    "end": "728200"
  },
  {
    "text": "in the competition that interesting quote from Alice in Wonderland but the Queen says it takes all the rain you can",
    "start": "728200",
    "end": "735250"
  },
  {
    "text": "do to keep in the same place if you want to get somewhere else you must run twist twice as fast as that which is I think",
    "start": "735250",
    "end": "742540"
  },
  {
    "text": "it was about other business it's not about Alice in Wonderland it's not for kids so that's my mental picture is we",
    "start": "742540",
    "end": "749080"
  },
  {
    "text": "need a stairway something realistic not climbing like with the ropes not magical",
    "start": "749080",
    "end": "754630"
  },
  {
    "text": "elevator but something real if we step back and see how we've been building",
    "start": "754630",
    "end": "759690"
  },
  {
    "text": "services we didn't call them cloud services a decade ago but for 15 to 20 years we've been building them as and",
    "start": "759690",
    "end": "765850"
  },
  {
    "text": "tier 3 tier architecture this picture must be familiar to everyone assume so",
    "start": "765850",
    "end": "771190"
  },
  {
    "text": "you have a stateless layer of front-end so the web server is a servers that terminate client connections the",
    "start": "771190",
    "end": "778090"
  },
  {
    "text": "authentication DDoS protection admission control and then forward requests to",
    "start": "778090",
    "end": "784690"
  },
  {
    "text": "middle tier or or several tiers but still it's the middle tier stateless again middle tier that goes and talked",
    "start": "784690",
    "end": "790090"
  },
  {
    "text": "to storage to pull data in perform an operation or not and potentially write",
    "start": "790090",
    "end": "796150"
  },
  {
    "text": "data back to storage so if the request comes for a user profile Milty or cold storage give me profile",
    "start": "796150",
    "end": "802530"
  },
  {
    "text": "for that user and then I do some update and right back to storage or maybe I don't even write update I return back to",
    "start": "802530",
    "end": "809220"
  },
  {
    "text": "the front and to render a webpage or respond to the mobile client so this",
    "start": "809220",
    "end": "814860"
  },
  {
    "text": "this is wonderful model it's beautiful it's very simple you can scale easily by adding more servers in the middle tier",
    "start": "814860",
    "end": "821070"
  },
  {
    "text": "more service in the front end the problem is storage is much more difficult to scale so you especially if you have a database like a sequel Oracle",
    "start": "821070",
    "end": "827370"
  },
  {
    "text": "database at some point you exceed its capacity and the turns out they cannot",
    "start": "827370",
    "end": "834630"
  },
  {
    "text": "scale and as the industry we realized that a long time ago so we put the solution a cache layer in front of it",
    "start": "834630",
    "end": "840600"
  },
  {
    "text": "memcache D read is all those solutions they reduced the load on the storage because now first time you really put",
    "start": "840600",
    "end": "847350"
  },
  {
    "text": "data in cache and then after that you read it from memory which is much faster you move data between memory and then",
    "start": "847350",
    "end": "853680"
  },
  {
    "text": "you only go to storage to update but in reality that complicated the solution so much now you talk to two storages you",
    "start": "853680",
    "end": "860280"
  },
  {
    "text": "have your cache storage and you have still your cold storage you need to coordinate that and you need to write",
    "start": "860280",
    "end": "865470"
  },
  {
    "text": "updates to both and as you probably know a cache invalidation problem is one of",
    "start": "865470",
    "end": "871230"
  },
  {
    "text": "the hardest problem in distributed systems fundamentally so programming is it is not really nice really I think",
    "start": "871230",
    "end": "880830"
  },
  {
    "text": "this is what we want we have we want to have a stateful middle tier where data would be cached but also the computer",
    "start": "880830",
    "end": "886320"
  },
  {
    "text": "would execute so this is what I call the stateful middle tier have benefits on a",
    "start": "886320",
    "end": "891390"
  },
  {
    "text": "bow instead of putting data in cache and Ryan compute somewhere else can we have them together then the tune anybody",
    "start": "891390",
    "end": "898290"
  },
  {
    "text": "knows these are good together no llores",
    "start": "898290",
    "end": "904130"
  },
  {
    "text": "so I would argue that's what we want and that's how we approached or least when we when we started working in our lives",
    "start": "904160",
    "end": "910320"
  },
  {
    "text": "we really check out this kind of two challenges we wanted to have a probability model which is easy and",
    "start": "910320",
    "end": "915930"
  },
  {
    "text": "attainable for a wide range of developers so you don't have to be here developer to understand and write",
    "start": "915930",
    "end": "922500"
  },
  {
    "text": "successful software with it but also we didn't want to turn away expert developers those heroes they should like",
    "start": "922500",
    "end": "928890"
  },
  {
    "text": "the model as well and the model needs to be flexible enough and powerful enough to empower",
    "start": "928890",
    "end": "934350"
  },
  {
    "text": "those developers as well so that's the trade-off between simplicity and power",
    "start": "934350",
    "end": "940790"
  },
  {
    "text": "but also we didn't want to make developers 20% or 30% more productive",
    "start": "940790",
    "end": "946710"
  },
  {
    "text": "wanted have qualitatively better productivity and which means 3 times 5",
    "start": "946710",
    "end": "953010"
  },
  {
    "text": "times ideally 10 times more productive and the main way we know how to make",
    "start": "953010",
    "end": "958200"
  },
  {
    "text": "developers more productive it to have them write less code because the best code you write is the code you don't",
    "start": "958200",
    "end": "963870"
  },
  {
    "text": "write because you don't have bugs there that's paradoxical but it's true right if we can eliminate code from our code",
    "start": "963870",
    "end": "969660"
  },
  {
    "text": "base we eliminate box that we didn't introduce there so that's what we target",
    "start": "969660",
    "end": "975030"
  },
  {
    "text": "our goal was to reduce the amount of code you write but also make it a code you write much simpler so you much less",
    "start": "975030",
    "end": "981000"
  },
  {
    "text": "error-prone and more productive in writing and debugging it in testing it",
    "start": "981000",
    "end": "986390"
  },
  {
    "text": "the second pillar of the project was to make this code scalable by default which",
    "start": "986390",
    "end": "991800"
  },
  {
    "text": "means if you write code following some simple guidelines there is a good chance you'll build it in such a way that it",
    "start": "991800",
    "end": "997530"
  },
  {
    "text": "will scale so if you have suddenly ten times more business ten times more customers or 100 times more customers",
    "start": "997530",
    "end": "1003620"
  },
  {
    "text": "your code will work you may need to tweak if you optimize a few places but you wouldn't have to go and really check",
    "start": "1003620",
    "end": "1009830"
  },
  {
    "text": "and throw away the whole thing like in those cases like with LinkedIn Twitter",
    "start": "1009830",
    "end": "1015320"
  },
  {
    "text": "and Facebook so there was a kind of conflicting goals in a way who has heard",
    "start": "1015320",
    "end": "1023480"
  },
  {
    "text": "about the actor model excellent so hope people attended yesterday's talk by",
    "start": "1023480",
    "end": "1029949"
  },
  {
    "text": "jorgensen for those who don't know you can think of actor model at just the",
    "start": "1029949",
    "end": "1035420"
  },
  {
    "text": "distributed object model so you have these isolated entities that do not have access direct access to each other's",
    "start": "1035420",
    "end": "1040790"
  },
  {
    "text": "memory they have to send messages to say hey do this from you know give me this value and of course they can create",
    "start": "1040790",
    "end": "1048380"
  },
  {
    "text": "other factors so the model was invented in 1973 by Carl Hewitt a long time ago",
    "start": "1048380",
    "end": "1055310"
  },
  {
    "text": "and you can imagine there was no cloud and was built for a very different purpose so cute invented it for is a",
    "start": "1055310",
    "end": "1062030"
  },
  {
    "text": "concurrency model for single machine single process systems for AI artificial intelligence application",
    "start": "1062030",
    "end": "1069340"
  },
  {
    "text": "but this often happens in our industry nothing is new Under the Sun so that the pros get rediscovered like in late 80s",
    "start": "1069340",
    "end": "1076179"
  },
  {
    "text": "and 90s by Joe Armstrong Carrick's on the bill Erlang in a new implementation of the",
    "start": "1076179",
    "end": "1084490"
  },
  {
    "text": "actor model that they built some control plane systems for up there telco equipment that later some distribution",
    "start": "1084490",
    "end": "1090670"
  },
  {
    "text": "features were added through OTP in the cloud space people rediscovered again",
    "start": "1090670",
    "end": "1098230"
  },
  {
    "text": "this model because if you think of it because you have these independent entities and they exchange messages they",
    "start": "1098230",
    "end": "1104140"
  },
  {
    "text": "don't have any assumption of locality so if I'm sending a message from actor a tractor B I don't assume that they're on",
    "start": "1104140",
    "end": "1110530"
  },
  {
    "text": "the same machine the implementation on the runtime could have been that it that's how its implemented but",
    "start": "1110530",
    "end": "1116140"
  },
  {
    "text": "fundamentally the model allows me to run this actors anywhere they want as long as they can so as I can deliver messages",
    "start": "1116140",
    "end": "1121540"
  },
  {
    "text": "between them so it's easy to distribute these models and these modules these",
    "start": "1121540",
    "end": "1127150"
  },
  {
    "text": "actors so that's what we took as kind of the base approach for project carlene's",
    "start": "1127150",
    "end": "1133740"
  },
  {
    "text": "namely tuned no also doors so we we",
    "start": "1133740",
    "end": "1143890"
  },
  {
    "text": "didn't want to just go blindly and look at the models we with sort of to key in",
    "start": "1143890",
    "end": "1149410"
  },
  {
    "text": "independent approach and we came up with this what we later called virtual accuracy as we work on the system as we",
    "start": "1149410",
    "end": "1156340"
  },
  {
    "text": "try it and different approaches and threw away some of earlier versions and work with early customers were utilizer",
    "start": "1156340",
    "end": "1163030"
  },
  {
    "text": "these challenges fundamental challenges in existing approaches in Erlang approach and akka is a sort of GBM clone",
    "start": "1163030",
    "end": "1170230"
  },
  {
    "text": "of her Lange the fundamental difficulty was that in the distributed highly concurrent system it's very expensive to",
    "start": "1170230",
    "end": "1177700"
  },
  {
    "text": "write code to coordinate this actors we need to create an actor for user use in",
    "start": "1177700",
    "end": "1183130"
  },
  {
    "text": "the front end receive requests for but what if your three protons receive requests for the same user first they",
    "start": "1183130",
    "end": "1189549"
  },
  {
    "text": "need to go check do we have an actor for this user in some registry so you do it concurrently indicator is response no we",
    "start": "1189549",
    "end": "1196120"
  },
  {
    "text": "don't all of them three independently realize I need to create a new actor for this user",
    "start": "1196120",
    "end": "1201820"
  },
  {
    "text": "and of course they in parallel try to create an actor and then they need to register in the registry and all of them",
    "start": "1201820",
    "end": "1209080"
  },
  {
    "text": "but one should fail and should handle this gracefully of course it's a lot of coordination to get right and of course",
    "start": "1209080",
    "end": "1214479"
  },
  {
    "text": "that kind of code works fine in the simple unit test but when you aren't scale suddenly they have this",
    "start": "1214479",
    "end": "1219759"
  },
  {
    "text": "concurrency in race conditions that's what we heard from Erlang developers later that that's actually indeed is one",
    "start": "1219759",
    "end": "1225970"
  },
  {
    "text": "of the biggest challenges to build distributed systems of Erlang so the idea behind a virtual actor is very",
    "start": "1225970",
    "end": "1233259"
  },
  {
    "text": "different so the analogy is like virtual memory when you write code to say touch",
    "start": "1233259",
    "end": "1238720"
  },
  {
    "text": "or update the value in the array but index X you never checked with the operating system is this memory page in",
    "start": "1238720",
    "end": "1245590"
  },
  {
    "text": "memory or is it in page file you don't write code you say load this page file from me and then I'll set the value you",
    "start": "1245590",
    "end": "1251769"
  },
  {
    "text": "just set the value and its operating system job do you realize oh this page was in the page file I'll bring it I let",
    "start": "1251769",
    "end": "1258129"
  },
  {
    "text": "you update the value and then once it gets cold I write it back to page file so it's the same basic idea so all",
    "start": "1258129",
    "end": "1264879"
  },
  {
    "text": "actors in Arlene's we call them grains instead of actors to differentiate that actors in Arlene's that very different",
    "start": "1264879",
    "end": "1271210"
  },
  {
    "text": "from what people used to think about actors that's we call them grains so there's grains they kind of always",
    "start": "1271210",
    "end": "1276849"
  },
  {
    "text": "exist virtually so you can always make a call to any actor in the system so long as you know identity of the actor and a",
    "start": "1276849",
    "end": "1283149"
  },
  {
    "text": "call generally will always succeed regardless of whether the actor is in memory or in storage or in the process",
    "start": "1283149",
    "end": "1289149"
  },
  {
    "text": "of being activated all this complexity of coordination is done by the runtime so earliest runtime really performs",
    "start": "1289149",
    "end": "1296190"
  },
  {
    "text": "behavior lifting it's interesting that",
    "start": "1296190",
    "end": "1301259"
  },
  {
    "text": "what we discover people equated erlangs approach with actor model save so when",
    "start": "1301259",
    "end": "1306820"
  },
  {
    "text": "we started talking about orderliness the first reaction was what you build is not an actor model because you don't have super vision trees so they thought I was",
    "start": "1306820",
    "end": "1314229"
  },
  {
    "text": "an axiom in in the actor model that you have to have a super vision tree to be an actor model which is actually not true which Carl Hewitt no less that no",
    "start": "1314229",
    "end": "1322119"
  },
  {
    "text": "that's not the case he's complaining about Erlang was kind of similar we",
    "start": "1322119",
    "end": "1327700"
  },
  {
    "text": "didn't know that - what release did eventually so you remove all all this",
    "start": "1327700",
    "end": "1332950"
  },
  {
    "text": "complexity of managing life cycles of of this actors give it to the runtime as",
    "start": "1332950",
    "end": "1338470"
  },
  {
    "text": "a result you write less code and you write simpler code so that's how we achieving the goal of developer",
    "start": "1338470",
    "end": "1344770"
  },
  {
    "text": "productivity so let's look how the code looks in reality when I'm asked to explain what",
    "start": "1344770",
    "end": "1352990"
  },
  {
    "text": "arline's is in one sentence I say distributed C sharp which is any kind of to two words or one sentence a 30-second",
    "start": "1352990",
    "end": "1360850"
  },
  {
    "text": "description is not accurate it's not about C sharp it's just distributed net but that that kind of",
    "start": "1360850",
    "end": "1367630"
  },
  {
    "text": "works for people because you program it with the same paradigm you have inner spaces and you have classes we start",
    "start": "1367630",
    "end": "1373180"
  },
  {
    "text": "with the unit phase so you define what we call a grain interface and you define it by extending one of the marker",
    "start": "1373180",
    "end": "1379960"
  },
  {
    "text": "interface in this case I use I grain with gooood key which says actors of this type grains they'll have good as",
    "start": "1379960",
    "end": "1388240"
  },
  {
    "text": "their identity and then within this interface you can have one or more methods one requirement for those",
    "start": "1388240",
    "end": "1394510"
  },
  {
    "text": "methods that the asynchronous the return task promised for a value who is familiar with TPL task is sink await",
    "start": "1394510",
    "end": "1402780"
  },
  {
    "text": "great so the majority that was that are not I think that's the best way in",
    "start": "1402780",
    "end": "1408970"
  },
  {
    "text": "c-sharp 500 that the best innovation we talk to JVM people when I first started",
    "start": "1408970",
    "end": "1414160"
  },
  {
    "text": "talking to them they didn't believe me that was true when I will see the code it's just brilliant how it works so",
    "start": "1414160",
    "end": "1420490"
  },
  {
    "text": "that's the requirement that all calls are asynchronous whenever we make a call to in this case like hello world say",
    "start": "1420490",
    "end": "1425500"
  },
  {
    "text": "hello the result you get you get right away before anything happened you get",
    "start": "1425500",
    "end": "1430630"
  },
  {
    "text": "his promise task of a string means the promise for a string that will arrive later maybe milliseconds later it may be",
    "start": "1430630",
    "end": "1436390"
  },
  {
    "text": "seconds later but later so you're not you're not blocking on this line that's",
    "start": "1436390",
    "end": "1442060"
  },
  {
    "text": "why one requirement is that everything is asynchronous so when we invoke the",
    "start": "1442060",
    "end": "1448870"
  },
  {
    "text": "grain this is an example I just need three lines I use static class a grain",
    "start": "1448870",
    "end": "1454330"
  },
  {
    "text": "factory and say give me a grain that implements this interface that we defined above for a user with this",
    "start": "1454330",
    "end": "1461350"
  },
  {
    "text": "identity so I pass through it and what I get back is it under the covers a proxy",
    "start": "1461350",
    "end": "1466570"
  },
  {
    "text": "object the variable user which implements the interface that I asked for its return immediately it's",
    "start": "1466570",
    "end": "1474460"
  },
  {
    "text": "constructed locally if there is no messages involved and then I can make a call and in this case you say hello",
    "start": "1474460",
    "end": "1480790"
  },
  {
    "text": "right away so the first two lines they will take probably in nanoseconds to execute because they do nothing you just",
    "start": "1480790",
    "end": "1486610"
  },
  {
    "text": "say okay here's the promise for a future result and then through the magic of a",
    "start": "1486610",
    "end": "1491770"
  },
  {
    "text": "wait keyword and in c-sharp 500 can say execute the rest of the method when that",
    "start": "1491770",
    "end": "1497260"
  },
  {
    "text": "the result comes back without blocking the thread so this is very simple the code looks straightforward in sequential",
    "start": "1497260",
    "end": "1503650"
  },
  {
    "text": "but in reality it executes very efficiently because we're not blocking a threat we're giving up under the covers",
    "start": "1503650",
    "end": "1509350"
  },
  {
    "text": "compiler reaps of briefs out there remain remainder of the method as the continuation and executed asynchronously",
    "start": "1509350",
    "end": "1515920"
  },
  {
    "text": "later so that's all I need to try to make a call to your grain and once I get",
    "start": "1515920",
    "end": "1522220"
  },
  {
    "text": "response back once the way its returns I can kind of do something with this value when I implement the grain class it's",
    "start": "1522220",
    "end": "1530800"
  },
  {
    "text": "also very simple I extend the base class grain that's in the library and then I implement one or more interfaces grain",
    "start": "1530800",
    "end": "1537430"
  },
  {
    "text": "interfaces that I defined again it looks just like your normal object oriented",
    "start": "1537430",
    "end": "1542770"
  },
  {
    "text": "programming unlike one way message passing state machine and things like that you just implement interfaces and",
    "start": "1542770",
    "end": "1549370"
  },
  {
    "text": "classes but notice also that this method say hello has a counter it increments",
    "start": "1549370",
    "end": "1555820"
  },
  {
    "text": "the counter does on the last line and the reason I can do this without any",
    "start": "1555820",
    "end": "1561670"
  },
  {
    "text": "logs any synchronization is because every method in in the grain executes in a single with a single thread guarantee",
    "start": "1561670",
    "end": "1568060"
  },
  {
    "text": "so the release runtime guarantees that your code never runs in parallel on more than one thread within a single grain so",
    "start": "1568060",
    "end": "1576130"
  },
  {
    "text": "you always have full control of your private State you can always assume that nothing else is touching it so you don't",
    "start": "1576130",
    "end": "1581350"
  },
  {
    "text": "need to put any in the locks semaphores any other synchronization mechanisms which simplifies the code and removes",
    "start": "1581350",
    "end": "1587440"
  },
  {
    "text": "lots of again the box that's the way in and that sort of the reflection of the",
    "start": "1587440",
    "end": "1592870"
  },
  {
    "text": "original idea of the concurrency model of actor mode that you can write safe code nobody else will go into variables",
    "start": "1592870",
    "end": "1599620"
  },
  {
    "text": "as you execute even your own methods will not touch because they only around one at a time",
    "start": "1599620",
    "end": "1604860"
  },
  {
    "text": "so what happens behind the scenes the grain is is kind of a logical contract it always exists but if the physical",
    "start": "1604860",
    "end": "1612040"
  },
  {
    "text": "incarnation of it goes through this lifecycle there can be in persistent storage and probably most of the time it's there not not in memory and only",
    "start": "1612040",
    "end": "1619300"
  },
  {
    "text": "when the call arrives for a particular grain the runtime gets and instantiates a physical incarnation of that logical",
    "start": "1619300",
    "end": "1626980"
  },
  {
    "text": "contract we called activation goes through initialization through activation process where if needed blows",
    "start": "1626980",
    "end": "1633070"
  },
  {
    "text": "it state and calls the method that is kind of like a constructor say hey I'm activating you do your initialization",
    "start": "1633070",
    "end": "1638680"
  },
  {
    "text": "and then delivers the request that triggered activation so for a while done",
    "start": "1638680",
    "end": "1644440"
  },
  {
    "text": "grain stays in memory and and the runtime checks what was the last time that a grain guy touched its activation",
    "start": "1644440",
    "end": "1649900"
  },
  {
    "text": "of McGregor touching a message to process if it hasn't been called for a while and by default is two hours but",
    "start": "1649900",
    "end": "1656500"
  },
  {
    "text": "it's configurable you can set one minute five minutes for different types so what's called nobody send a message with",
    "start": "1656500",
    "end": "1662500"
  },
  {
    "text": "grain there's no need to keep it in memory so release runtime garbage collects again we go to the activation process a a I'm about to deactivate you",
    "start": "1662500",
    "end": "1669880"
  },
  {
    "text": "if you want to do something gives you a chance and then removes it from memory so that's the model behind the scenes on",
    "start": "1669880",
    "end": "1676150"
  },
  {
    "text": "the programming on the caller side it you program as if it's always in memory but in reality runtime manages resources",
    "start": "1676150",
    "end": "1682870"
  },
  {
    "text": "and does this distributed asynchronous garbage collection of your resources and I will stress again with no code from",
    "start": "1682870",
    "end": "1688780"
  },
  {
    "text": "the application maybe configuration how how fast how aggressive you want this garbled garbage collection to happen so",
    "start": "1688780",
    "end": "1697030"
  },
  {
    "text": "if we go back to this picture with this actor based middle tier because of this",
    "start": "1697030",
    "end": "1703960"
  },
  {
    "text": "lifecycle what we're really getting is what in memory is just a sliding window",
    "start": "1703960",
    "end": "1709270"
  },
  {
    "text": "of all possible grains actors only those have reasonably used now or within that",
    "start": "1709270",
    "end": "1715330"
  },
  {
    "text": "period before they get garbage collected an example would be like a major game my Hale or Call of Duty they solve probably",
    "start": "1715330",
    "end": "1722410"
  },
  {
    "text": "3040 50 million copies that doesn't mean that all those users are in memory are",
    "start": "1722410",
    "end": "1727750"
  },
  {
    "text": "active in fact you can find very few days in the year when there is more than",
    "start": "1727750",
    "end": "1732880"
  },
  {
    "text": "1 million of them playing at the same time so the reason reason to keep state of 50 million of",
    "start": "1732880",
    "end": "1738040"
  },
  {
    "text": "the players in memory you can just have those automatically that they actually",
    "start": "1738040",
    "end": "1743080"
  },
  {
    "text": "turn on their console and then started the game and as they stopped playing the game or shut down their console there",
    "start": "1743080",
    "end": "1749710"
  },
  {
    "text": "their grain will be become cold and will get deactivated so the runtime does this resource management for you for free",
    "start": "1749710",
    "end": "1758280"
  },
  {
    "text": "again without right you write an application code for that so the early",
    "start": "1758280",
    "end": "1764140"
  },
  {
    "text": "neuron time it runs like in overlay our physical resources or virtual machines",
    "start": "1764140",
    "end": "1770200"
  },
  {
    "text": "so it on every virtual machine that you run in the cloud or in the physical",
    "start": "1770200",
    "end": "1775990"
  },
  {
    "text": "machine a few random premises there is one usually process of released runtime we called silo and those silos",
    "start": "1775990",
    "end": "1783490"
  },
  {
    "text": "they form a cluster automatically and they start pinning each other to see that who is up who is down if this silo",
    "start": "1783490",
    "end": "1791380"
  },
  {
    "text": "didn't respond to me three times I suspect it's probably dead so it it has all this magic of tracking Hardware",
    "start": "1791380",
    "end": "1799180"
  },
  {
    "text": "status essentially so if one of the machines balls-up the runtime",
    "start": "1799180",
    "end": "1804250"
  },
  {
    "text": "automatically detects it and understands what grains were running on that machine so they're gone they're lost because the",
    "start": "1804250",
    "end": "1809950"
  },
  {
    "text": "Machine disappeared maybe the physical hardware failure or network cable got cut there are many reasons why a machine",
    "start": "1809950",
    "end": "1816780"
  },
  {
    "text": "disappears what's important is that once the runtime this distributed logic",
    "start": "1816780",
    "end": "1822100"
  },
  {
    "text": "realizes we lost this machine it knows that grains Orion there are not running anywhere anymore so you can place them",
    "start": "1822100",
    "end": "1827800"
  },
  {
    "text": "when the new request arrives for a grain that used to be there to a different machine so you can operate with the",
    "start": "1827800",
    "end": "1833830"
  },
  {
    "text": "cluster without that machine for a while and then if that machine gets gets repaired or restarts and comes back he",
    "start": "1833830",
    "end": "1838960"
  },
  {
    "text": "joins the cluster again it becomes another resource to place these grains and executes Moore's all of that is done",
    "start": "1838960",
    "end": "1845410"
  },
  {
    "text": "by the runtime again so you don't need to write any code your individual request may fail so you make a call to",
    "start": "1845410",
    "end": "1850840"
  },
  {
    "text": "your grain and you may get an error back and you may get an error back for many different reasons that storage is",
    "start": "1850840",
    "end": "1856030"
  },
  {
    "text": "unavailable or or something else or the machine just died in this window before the runtime realized it's dead you may",
    "start": "1856030",
    "end": "1862990"
  },
  {
    "text": "get a failure but fundamentally you can keep repeating this request and eventually you'll succeed once all these",
    "start": "1862990",
    "end": "1868600"
  },
  {
    "text": "conditions recovered so you don't need to write code to understand where things run or",
    "start": "1868600",
    "end": "1873970"
  },
  {
    "text": "what stay there on you just write your code in this simple manner as if they always exist in always in memory so",
    "start": "1873970",
    "end": "1883330"
  },
  {
    "text": "besides Hillel world let's look at something more complicated than that",
    "start": "1883330",
    "end": "1889230"
  },
  {
    "text": "let's see see this is the a made up of social network example so have notion of",
    "start": "1889230",
    "end": "1897190"
  },
  {
    "text": "a friend they have this user interface but I have a method at the friend myself",
    "start": "1897190",
    "end": "1902710"
  },
  {
    "text": "so notice that in the method signature I can use I user as an argument type so",
    "start": "1902710",
    "end": "1910090"
  },
  {
    "text": "the runtime knows how to serialize these references on how to pass them around without you writing any code in fact the",
    "start": "1910090",
    "end": "1915850"
  },
  {
    "text": "compile time we generate serializers to efficiently pass data data types and",
    "start": "1915850",
    "end": "1921299"
  },
  {
    "text": "preserve them as if nothing happened if they're on the same machine so we define",
    "start": "1921299",
    "end": "1928269"
  },
  {
    "text": "the interface and then let's see how we implement executing this method so first",
    "start": "1928269",
    "end": "1935529"
  },
  {
    "text": "two lines get two references four four two grains for me and for my friend like in halo world example just say give me a",
    "start": "1935529",
    "end": "1942610"
  },
  {
    "text": "reference for for this grain with of this type for this identity and then what I do I just call mine grain say at",
    "start": "1942610",
    "end": "1949269"
  },
  {
    "text": "the friend and I'm passed directly this reference what's important to understand",
    "start": "1949269",
    "end": "1955059"
  },
  {
    "text": "here is that the reference is logical it's always valid it doesn't point to a physical machine physical IP address URL",
    "start": "1955059",
    "end": "1961360"
  },
  {
    "text": "nothing like that it just encapsulate the type and identity of the grain so it's always valid I can save it in a",
    "start": "1961360",
    "end": "1966730"
  },
  {
    "text": "database I can shut down my system I can restart it a week later I can read this record and make a call to this grade and",
    "start": "1966730",
    "end": "1972429"
  },
  {
    "text": "call will succeed because the runtime will activate grain with identity deliver my request and execute it and",
    "start": "1972429",
    "end": "1978370"
  },
  {
    "text": "deliver response to me so unlike physical references this a logical reference they're always valid",
    "start": "1978370",
    "end": "1985889"
  },
  {
    "text": "one thing here which is not so obvious is we're making horizontal calls so these grains they live in the same level",
    "start": "1985889",
    "end": "1992470"
  },
  {
    "text": "in this middle tier if you go back to the picture of three-tier architecture if I had the logic for one user to make",
    "start": "1992470",
    "end": "2001500"
  },
  {
    "text": "a call to another user to go all the way out to the web service and make a call to user service and pass",
    "start": "2001500",
    "end": "2007310"
  },
  {
    "text": "target user ID as one of the arguments go all the way through front ends to",
    "start": "2007310",
    "end": "2012660"
  },
  {
    "text": "another middle tier server to execute this request here the whole call happens",
    "start": "2012660",
    "end": "2018090"
  },
  {
    "text": "in the middle tier so just direct communication between the doing those grains on the same layer the other thing",
    "start": "2018090",
    "end": "2025950"
  },
  {
    "text": "that is interesting here we put try-catch but is you can imagine the",
    "start": "2025950",
    "end": "2033540"
  },
  {
    "text": "caller migraine and my friends grain can be on three different machines so how come we can catch an exception here so",
    "start": "2033540",
    "end": "2041040"
  },
  {
    "text": "here's the picture to demonstrate it a little bit better so say we have a",
    "start": "2041040",
    "end": "2046140"
  },
  {
    "text": "front-end receive request may recall to grain a to process this request it's part of this a logic of processing that",
    "start": "2046140",
    "end": "2053280"
  },
  {
    "text": "grain called another grain of a different type maybe on another machine which in each certain may call to the",
    "start": "2053280",
    "end": "2059820"
  },
  {
    "text": "grain see to do it's part of logic and imagine green see through an exception",
    "start": "2059820",
    "end": "2065520"
  },
  {
    "text": "for example the friend you pass to me is already in your friend list so you're",
    "start": "2065520",
    "end": "2071010"
  },
  {
    "text": "not allowed to hit him twice or this friend this person cannot be your friend",
    "start": "2071010",
    "end": "2076080"
  },
  {
    "text": "forever reason so traditionally what you have to do you have to analyze the",
    "start": "2076080",
    "end": "2081690"
  },
  {
    "text": "return result and then propagate it turns out back and then propagate it back again what happens in Orleans if",
    "start": "2081690",
    "end": "2088110"
  },
  {
    "text": "you write no code zero for error handling here that exception from C will",
    "start": "2088110",
    "end": "2093480"
  },
  {
    "text": "be delivered to color B and if B has no try catch it'll automatically propagate",
    "start": "2093480",
    "end": "2099600"
  },
  {
    "text": "to a and if a doesn't have try cache will propagate to the original color we call clients of code that runs on on a",
    "start": "2099600",
    "end": "2106530"
  },
  {
    "text": "front end not within the grain space and call them Orleans clients so this exception will be automatically",
    "start": "2106530",
    "end": "2112470"
  },
  {
    "text": "propagated all the way up with no code I can put try-catch anywhere I want for example I may decide to put it in C or",
    "start": "2112470",
    "end": "2118140"
  },
  {
    "text": "in B but by default it will be propagated if I put no code and as I",
    "start": "2118140",
    "end": "2123810"
  },
  {
    "text": "mentioned before the error handling code is the code that usually is the buggiest",
    "start": "2123810",
    "end": "2128970"
  },
  {
    "text": "because that's the codec hardest to test so we get here is essentially",
    "start": "2128970",
    "end": "2134310"
  },
  {
    "text": "distributed synchronous try catch semantics with the very powerful contract that I",
    "start": "2134310",
    "end": "2139770"
  },
  {
    "text": "can only boot code were actually needed in most of these cases I can do nothing",
    "start": "2139770",
    "end": "2144930"
  },
  {
    "text": "I cannot retry or or do anything to fix an error I just need to report you end user requests failing here is the error",
    "start": "2144930",
    "end": "2152070"
  },
  {
    "text": "code or description there you see from an exception so I can do that the front end player and just render a webpage or",
    "start": "2152070",
    "end": "2157950"
  },
  {
    "text": "a responsive mobile client so that's actually a very powerful feature up the",
    "start": "2157950",
    "end": "2164400"
  },
  {
    "text": "runtime so look another example still staying",
    "start": "2164400",
    "end": "2169440"
  },
  {
    "text": "within the social network sort of theme but when you say social network don't",
    "start": "2169440",
    "end": "2175260"
  },
  {
    "text": "think just Facebook or Twitter or those kind of things like gaming like a multiplayer game with a social network",
    "start": "2175260",
    "end": "2181290"
  },
  {
    "text": "just a much more fluid where these relations are forum for a multiplayer session and they dissolve and then user",
    "start": "2181290",
    "end": "2187650"
  },
  {
    "text": "during different session this is essentially social graph if you're talking about IOT devices it's kind of",
    "start": "2187650",
    "end": "2192750"
  },
  {
    "text": "the same but much more static you have sensors they have rooms you have buildings so you have this relations",
    "start": "2192750",
    "end": "2198270"
  },
  {
    "text": "social graph kind of relations so it's not limited to just a traditional notion",
    "start": "2198270",
    "end": "2203310"
  },
  {
    "text": "of social network so imagine I need a method to return status of all my",
    "start": "2203310",
    "end": "2209100"
  },
  {
    "text": "friends like for example my stupid UI wants to render a table with friend",
    "start": "2209100",
    "end": "2214290"
  },
  {
    "text": "status friend status friend status and let's say I'm very popular have a",
    "start": "2214290",
    "end": "2219840"
  },
  {
    "text": "thousand friends so if I were to do it neibling call one friend at a time get",
    "start": "2219840",
    "end": "2225150"
  },
  {
    "text": "response back then call another friend and get response back even if the latency of a single call is very short",
    "start": "2225150",
    "end": "2232440"
  },
  {
    "text": "if it's take 10 millisecond if I call a thousand friends see really the minimum",
    "start": "2232440",
    "end": "2238140"
  },
  {
    "text": "latency of the whole series of calls would be 10 seconds 10 millisecond the times thousand so of course I don't want",
    "start": "2238140",
    "end": "2245310"
  },
  {
    "text": "to do that do that I want to call them in parallel and that's what's very easy to do to fan our calls in our links and",
    "start": "2245310",
    "end": "2252180"
  },
  {
    "text": "this two lines of for each what we call friend get status and remember get status returns a promise a task for for",
    "start": "2252180",
    "end": "2259560"
  },
  {
    "text": "a result which we put in in list right away so this whole for each again we'll execute it within nanoseconds or",
    "start": "2259560",
    "end": "2265410"
  },
  {
    "text": "microsecond so it doesn't do anything just prepares those messages to be sent and then through the match",
    "start": "2265410",
    "end": "2270510"
  },
  {
    "text": "GPL and async/await we can join this in my example thousand promises into one",
    "start": "2270510",
    "end": "2276720"
  },
  {
    "text": "the chassis will result when all of them get responded to and then await it so",
    "start": "2276720",
    "end": "2281910"
  },
  {
    "text": "with this one line we wait all the responses and then once all the responses arrive we can process the",
    "start": "2281910",
    "end": "2287430"
  },
  {
    "text": "results and render my web page my stupid table with friends statuses so in the",
    "start": "2287430",
    "end": "2294900"
  },
  {
    "text": "few lines of code we find out requests and and the process results very easily",
    "start": "2294900",
    "end": "2300330"
  },
  {
    "text": "it's very easy to do these kind of patterns so in ideal case or ideal",
    "start": "2300330",
    "end": "2306180"
  },
  {
    "text": "latency is the latest every single call but also notice that again we didn't put",
    "start": "2306180",
    "end": "2311280"
  },
  {
    "text": "any multi-threaded code no blocking we do nothing here that would be out of the ordinary so we write is if it's a single",
    "start": "2311280",
    "end": "2317850"
  },
  {
    "text": "process code in the single application the writing on a single machine but we",
    "start": "2317850",
    "end": "2323730"
  },
  {
    "text": "get a lot of parallelism so you have enough course all this calls will be executed in parallel so it feels like a",
    "start": "2323730",
    "end": "2330060"
  },
  {
    "text": "desktop app but actually runs on the cluster who is familiar with MPI it's a",
    "start": "2330060",
    "end": "2336990"
  },
  {
    "text": "few people so that's a library for very efficient distributed computations so",
    "start": "2336990",
    "end": "2345000"
  },
  {
    "text": "there's this famous professor Dennis Gannon he told me a couple years ago said we don't want to teach your",
    "start": "2345000",
    "end": "2351540"
  },
  {
    "text": "students same ti anymore because it's very hard to get it right with the release is so much easier to do it you",
    "start": "2351540",
    "end": "2358110"
  },
  {
    "text": "can implement the same patterns but with much fewer lines of code with much simpler code and I was so happy when",
    "start": "2358110",
    "end": "2365660"
  },
  {
    "text": "Carl Hewitt the inventor of the actor/model wrote this thing last year",
    "start": "2365660",
    "end": "2370740"
  },
  {
    "text": "in his paper so he said in his orleans a couple paragraphs said that it's an",
    "start": "2370740",
    "end": "2375840"
  },
  {
    "text": "important step went further than the goal of the actor model that application program in need not be so concerned with",
    "start": "2375840",
    "end": "2381390"
  },
  {
    "text": "low-level system details so that's exactly we try to achieve to raise level of distraction to make developers more",
    "start": "2381390",
    "end": "2386910"
  },
  {
    "text": "productive and code the right simple and and I think I tweeted at the time that",
    "start": "2386910",
    "end": "2393360"
  },
  {
    "text": "I'm ready to retire and they check my savings account they decided to stay work not ready yet but interestingly",
    "start": "2393360",
    "end": "2401790"
  },
  {
    "text": "enough in another survey Kyle he pointed to Erlang's deficiencies",
    "start": "2401790",
    "end": "2407670"
  },
  {
    "text": "lack of error propagation which I showed you exactly what Putin only it's not knowing that that was his concern and",
    "start": "2407670",
    "end": "2414360"
  },
  {
    "text": "also lack of resource management these two complaints about Erlang you would",
    "start": "2414360",
    "end": "2419730"
  },
  {
    "text": "you see without knowing that we implemented exactly those things in or liens there are many features like I",
    "start": "2419730",
    "end": "2427950"
  },
  {
    "text": "just highlight a couple of them so it is declarative persistence you can you can declare a state for your grade in class",
    "start": "2427950",
    "end": "2434310"
  },
  {
    "text": "as a property back class just very",
    "start": "2434310",
    "end": "2439590"
  },
  {
    "text": "simple poco class and then you pass it as a type argument to the base class",
    "start": "2439590",
    "end": "2446130"
  },
  {
    "text": "grade and when you declare your user in this example use the grade in class and",
    "start": "2446130",
    "end": "2451170"
  },
  {
    "text": "then you get this method the state property of the type that we declared as",
    "start": "2451170",
    "end": "2457110"
  },
  {
    "text": "the poco class and you have this usually use a single method rights that is think this is where I say persist my state I",
    "start": "2457110",
    "end": "2463020"
  },
  {
    "text": "said my property is persisted to storage and how it works there is a plug-in model their persistence providers so you",
    "start": "2463020",
    "end": "2469710"
  },
  {
    "text": "don't have to write code against specific storage like at your blog or sequel or the s3 and a double yes you",
    "start": "2469710",
    "end": "2478350"
  },
  {
    "text": "just write a single line and then provider will know how to deliver this",
    "start": "2478350",
    "end": "2483360"
  },
  {
    "text": "state update to specific storage how you link them is through this this attribute",
    "start": "2483360",
    "end": "2490200"
  },
  {
    "text": "they say I want to use provider with this name and then in the config you can",
    "start": "2490200",
    "end": "2495570"
  },
  {
    "text": "declare that this name is for as your table storage so you can change your",
    "start": "2495570",
    "end": "2501180"
  },
  {
    "text": "storage and that you target that code without changing application code you may need to migrate your data if you",
    "start": "2501180",
    "end": "2507180"
  },
  {
    "text": "decided to move but you don't have to change your code at all you just change your config but this is an opt-in feature you don't have to use it can",
    "start": "2507180",
    "end": "2513360"
  },
  {
    "text": "just write code where you talk to storage directly yourself so it's up to you just a convenience feature so if we",
    "start": "2513360",
    "end": "2521310"
  },
  {
    "text": "included a few providers with the code base but there are others that are built in by the community for storages we",
    "start": "2521310",
    "end": "2528660"
  },
  {
    "text": "wouldn't even consider building ourselves another feature that we added",
    "start": "2528660",
    "end": "2533730"
  },
  {
    "text": "maybe a year ago slightly more came from this knee that when people used orleans and see",
    "start": "2533730",
    "end": "2540729"
  },
  {
    "text": "this RPC pattern when you call and you get a response to request request response remote procedure call a pattern",
    "start": "2540729",
    "end": "2547689"
  },
  {
    "text": "they say well i want to return a series of values or i want to subscribe to dallas that somebody will produce i want",
    "start": "2547689",
    "end": "2555969"
  },
  {
    "text": "to produce a series of values so you're talking about streams and we have a stream API which is a single API over",
    "start": "2555969",
    "end": "2562799"
  },
  {
    "text": "different delivery mechanisms so there are three categories there is direct TCP messaging where you just won't deliver",
    "start": "2562799",
    "end": "2569079"
  },
  {
    "text": "this is synchronous updates directly over these connections between silos",
    "start": "2569079",
    "end": "2574269"
  },
  {
    "text": "just by sending messages no persistence or you may do the same over durable queue is like a jerky or SQS event hub",
    "start": "2574269",
    "end": "2582269"
  },
  {
    "text": "like actually when happens if in the third category Kafka in the bed hub they're in a different category by",
    "start": "2582269",
    "end": "2587949"
  },
  {
    "text": "themselves because they're not really queues they're distributed the partition logs where you can say I want to go back",
    "start": "2587949",
    "end": "2594069"
  },
  {
    "text": "to this person this offset in the log and redeliver messages from that point",
    "start": "2594069",
    "end": "2599920"
  },
  {
    "text": "it's a very different very powerful model but we have a single API that works across all the three of them I",
    "start": "2599920",
    "end": "2606130"
  },
  {
    "text": "would say it's a controversial decision to have one API over a three because they have different enough semantics so",
    "start": "2606130",
    "end": "2613989"
  },
  {
    "text": "we questioned that decision but that's what we did we put a single API and if you look at how it works I call provider",
    "start": "2613989",
    "end": "2620890"
  },
  {
    "text": "again by name because it's driven config driven like with the persistent provider and I say give me a string upstream of",
    "start": "2620890",
    "end": "2626949"
  },
  {
    "text": "integers with this ID ID is a good so again like we took the virtual actor",
    "start": "2626949",
    "end": "2633819"
  },
  {
    "text": "model and made virtual streams so it's almost you know identity of the stream you can always produce a consume from it",
    "start": "2633819",
    "end": "2639729"
  },
  {
    "text": "you don't need to create it you don't need to find it just say I want to produce a stream with this ID or I want",
    "start": "2639729",
    "end": "2644739"
  },
  {
    "text": "to consume from a stream or this idea so you have GU it on the namespace it's easy to model things like user and the",
    "start": "2644739",
    "end": "2652089"
  },
  {
    "text": "user ID X or device and device ID Y and then produce or consume",
    "start": "2652089",
    "end": "2657989"
  },
  {
    "text": "messages and you produce by just calling on next they sync we model API on our X",
    "start": "2657989",
    "end": "2663880"
  },
  {
    "text": "or async version was supposed to be coming that's not a controversial",
    "start": "2663880",
    "end": "2669130"
  },
  {
    "text": "decision because we took Namie from murex which may not be obvious or the best choice for naming",
    "start": "2669130",
    "end": "2677349"
  },
  {
    "text": "we just try to be consistent when I Rex regardless you put the call on Nexus Inc",
    "start": "2677349",
    "end": "2682390"
  },
  {
    "text": "and produce a valley or you can produce a batch of values and on the consumer",
    "start": "2682390",
    "end": "2687460"
  },
  {
    "text": "side you define your handler which will be invoked and you subscribe say for that stream I want to subscribe my",
    "start": "2687460",
    "end": "2693339"
  },
  {
    "text": "handler so will be invoked on every value of every event on this stream",
    "start": "2693339",
    "end": "2698859"
  },
  {
    "text": "arrives and that's all and that's it it's very few lines of code and again those streams they're virtually exist",
    "start": "2698859",
    "end": "2706599"
  },
  {
    "text": "the whole time you don't have to do anything about managing them but also the streams work not just between grains",
    "start": "2706599",
    "end": "2711730"
  },
  {
    "text": "the work between the client like the front end and end grains in both directions a very symmetrical model so",
    "start": "2711730",
    "end": "2718390"
  },
  {
    "text": "if you have front-end that terminates WebSocket connections or nqp connections it's easy for that client to subscribe",
    "start": "2718390",
    "end": "2724059"
  },
  {
    "text": "to it event streams from grains and deliver updates and this low latency",
    "start": "2724059",
    "end": "2729160"
  },
  {
    "text": "interactive scenarios so that's what it was built for there is a lot of",
    "start": "2729160",
    "end": "2735400"
  },
  {
    "text": "complexity on the hood to make this work so this sort of fooling agent so you need to distribute work if you run a",
    "start": "2735400",
    "end": "2741339"
  },
  {
    "text": "cluster of a hundred nodes each no it needs to pull from queues if you're using a k'vin hub or Azure queues and if",
    "start": "2741339",
    "end": "2748900"
  },
  {
    "text": "machines go up and down you see but it's work you need to cache this to be efficient so there's a lot of complexity",
    "start": "2748900",
    "end": "2754930"
  },
  {
    "text": "there that you deal with that and again that complexity is done primarily by the runtime so the application code can stay",
    "start": "2754930",
    "end": "2761230"
  },
  {
    "text": "simple but the performance will still be powerful and robust and dealing with",
    "start": "2761230",
    "end": "2767319"
  },
  {
    "text": "failures and redistribution automatically for that will leverage a bunch of other orleans capabilities it's",
    "start": "2767319",
    "end": "2775150"
  },
  {
    "text": "running smoothly namely tuned everybody",
    "start": "2775150",
    "end": "2781119"
  },
  {
    "text": "knows when tomorrow comes no.you written x i'm gonna drink beer with myself so we when we built years",
    "start": "2781119",
    "end": "2790329"
  },
  {
    "text": "ago we built a first couple of applications on earliness and we started",
    "start": "2790329",
    "end": "2795369"
  },
  {
    "text": "talking internally to proto groups and saying look this thing seems to work but",
    "start": "2795369",
    "end": "2801010"
  },
  {
    "text": "there's usually like people in our users just skeptical they'll look at it and say it's simple is too good to be true if it's",
    "start": "2801010",
    "end": "2806319"
  },
  {
    "text": "that simple there's probably like a lot of things that cannot do there was like a lot of disbelief until this guy came",
    "start": "2806319",
    "end": "2813599"
  },
  {
    "text": "what happened the hoops Omar and those guys they came to us and say look we",
    "start": "2813599",
    "end": "2819429"
  },
  {
    "text": "build we designed this architecture for a future services but then we discover it or leans new paper and looks like you",
    "start": "2819429",
    "end": "2826390"
  },
  {
    "text": "implemented 80% of it and much better and deeper than we thought we would so why don't we join forces and work on the",
    "start": "2826390",
    "end": "2832239"
  },
  {
    "text": "remaining piece oh and by the way we need to be in production in three months and this is where like in the cordon",
    "start": "2832239",
    "end": "2838359"
  },
  {
    "text": "video is real true story I turned to my team and said once they left the room these guys are crazy if you want to take",
    "start": "2838359",
    "end": "2844479"
  },
  {
    "text": "technology from Microsoft Research input in production three months I don't know what they're thinking but let's drop",
    "start": "2844479",
    "end": "2849609"
  },
  {
    "text": "everything and help them be successful and we put this service in production the first service for thinking was Halo",
    "start": "2849609",
    "end": "2855489"
  },
  {
    "text": "Reach University Edition in three months and worked fine we work out a couple of",
    "start": "2855489",
    "end": "2862420"
  },
  {
    "text": "bugs after launch but nothing broke experience and they decided that this",
    "start": "2862420",
    "end": "2868119"
  },
  {
    "text": "far exceeded our expectations we're gonna standardize in Orleans for the next major release which was Halo 4 and",
    "start": "2868119",
    "end": "2874269"
  },
  {
    "text": "so Gila for all of these services for it were billing with their liens within six seven months with very small",
    "start": "2874269",
    "end": "2880299"
  },
  {
    "text": "team so it was very productive successful launch high scale all of that to prove that work so that removed very",
    "start": "2880299",
    "end": "2887619"
  },
  {
    "text": "much all concerns the release is a toy it's too simple people were saying if it",
    "start": "2887619",
    "end": "2892630"
  },
  {
    "text": "works with Halo it must work for me and because I'm smaller scale and then we had this other gamers came anybody",
    "start": "2892630",
    "end": "2900640"
  },
  {
    "text": "played Age of Empires halos Castle siege",
    "start": "2900640",
    "end": "2906809"
  },
  {
    "text": "so he the backend runs on Orleans and of course in the fall we had Halo 5 release",
    "start": "2906809",
    "end": "2912549"
  },
  {
    "text": "which was very smooth we were asked to be on call for the weekend and on Friday we said we're told",
    "start": "2912549",
    "end": "2918579"
  },
  {
    "text": "nobody needs to come it runs smoothly I think it's good and then came kind of non-gamers so we",
    "start": "2918579",
    "end": "2926799"
  },
  {
    "text": "have a couple of services reveal for Skype have several services in in Azure monitoring and security does fancy IOT",
    "start": "2926799",
    "end": "2935170"
  },
  {
    "text": "project were launching this device into stratospheric 40 kilometres and very high this application that you",
    "start": "2935170",
    "end": "2945700"
  },
  {
    "text": "have on windows or in Windows Phone if anybody has a Windows Phone still they may not look as sexy but they all have",
    "start": "2945700",
    "end": "2952750"
  },
  {
    "text": "like hundreds of millions of users behind them so it's still a lot of scale of data to deliver another game user war",
    "start": "2952750",
    "end": "2960160"
  },
  {
    "text": "it's going to be released this fall it's also using the same back-end",
    "start": "2960160",
    "end": "2965940"
  },
  {
    "text": "we never designed our links for gamers which is like paradoxical people keep asking oh you build for Halo no we",
    "start": "2965940",
    "end": "2972430"
  },
  {
    "text": "didn't tell it we didn't even have in mind they came to us when we already had the system but I think why why gamers",
    "start": "2972430",
    "end": "2979540"
  },
  {
    "text": "come first it's like typical in our industry because they have a very different environment they're always on the bleeding edge they're always under a",
    "start": "2979540",
    "end": "2985750"
  },
  {
    "text": "lot of pressure they always rewrite a lot of code for the next release and they're low is unforgiving so they have",
    "start": "2985750",
    "end": "2991750"
  },
  {
    "text": "this spike on the first few hours few days of launch which is very different from any other service whatever is you",
    "start": "2991750",
    "end": "2998200"
  },
  {
    "text": "hear about snapchats and whatnot they have the user base growing over time so they have time to fix things up things",
    "start": "2998200",
    "end": "3004710"
  },
  {
    "text": "don't scale if performance rubs down they have time months and years to improve and even react I checked if a",
    "start": "3004710",
    "end": "3011339"
  },
  {
    "text": "major game is released and it has a problem if you first few hours or a few days you lost the business and this this",
    "start": "3011339",
    "end": "3017819"
  },
  {
    "text": "users will just trash and it's just unforgivable so it's a very risky business and also",
    "start": "3017819",
    "end": "3023880"
  },
  {
    "text": "the economics is shifting to these business of selling DVDs were Best Buy",
    "start": "3023880",
    "end": "3029250"
  },
  {
    "text": "and other retailers it's slightly going away so they moving more towards virtual",
    "start": "3029250",
    "end": "3034410"
  },
  {
    "text": "goods virtual currency content deliver through cloud a lot of logic goes to the cloud so they need to be in the cloud to",
    "start": "3034410",
    "end": "3041130"
  },
  {
    "text": "stay in business they compatible they're competitive they're good customers to work with because they're very fast very",
    "start": "3041130",
    "end": "3047670"
  },
  {
    "text": "ambitious named attune great so when you talk to on read",
    "start": "3047670",
    "end": "3056330"
  },
  {
    "text": "analysts they talk about quadrants magic quadrants oh I thought why can't they have Serge's and magic quadrants and",
    "start": "3056330",
    "end": "3062260"
  },
  {
    "text": "define my own yes it's also a queen so",
    "start": "3062260",
    "end": "3067490"
  },
  {
    "text": "the interactive entertainment goes beyond gaming you have interactive TV other similar types of applications when",
    "start": "3067490",
    "end": "3074750"
  },
  {
    "text": "you have sub-second ladies and requirements and you have high skill you need to deliver things tailor to",
    "start": "3074750",
    "end": "3081530"
  },
  {
    "text": "specific user and analyze things on the fly which kind of bleeds into near real-time analytics has a different angle but",
    "start": "3081530",
    "end": "3089120"
  },
  {
    "text": "similar requirements of getting data and quickly making decisions and then find enough to look at fraud detection for",
    "start": "3089120",
    "end": "3095210"
  },
  {
    "text": "detection for credit cards is not the different actually from Qi detection games very similar approaches iut is the",
    "start": "3095210",
    "end": "3103220"
  },
  {
    "text": "hardest area so that's why I put us I think subconsciously as read and we have this project I'm most proud of that",
    "start": "3103220",
    "end": "3110330"
  },
  {
    "text": "people build already these thermostats for Honeywell RINO no liens or the project were literally build a system to",
    "start": "3110330",
    "end": "3117560"
  },
  {
    "text": "control up to 2 million of mouse traps because the company services are the businesses with mousetraps and they need",
    "start": "3117560",
    "end": "3124670"
  },
  {
    "text": "to know when they need to go and come when the mouse is there so it's funny IT project and the other one is this green",
    "start": "3124670",
    "end": "3132590"
  },
  {
    "text": "power storage facility in Hawaii on Oahu which soars up to half a gigawatt of",
    "start": "3132590",
    "end": "3138410"
  },
  {
    "text": "power which some some people wrote it's like a small nuclear power plant but",
    "start": "3138410",
    "end": "3144020"
  },
  {
    "text": "it's just storage for wind turbines and solar panels but there are many more",
    "start": "3144020",
    "end": "3150860"
  },
  {
    "text": "things are possible the showed with this patterns and I show you just the glimpse of it but it's much more that it's possible you can build all kinds of",
    "start": "3150860",
    "end": "3157460"
  },
  {
    "text": "scale out computer applications with Buddhist primitives we open source",
    "start": "3157460",
    "end": "3164240"
  },
  {
    "text": "release in January 2015 the experience",
    "start": "3164240",
    "end": "3169490"
  },
  {
    "text": "they exceeded far exceeded all our expectations so it's very different experiences",
    "start": "3169490",
    "end": "3176080"
  },
  {
    "text": "thank you it's yes it is from sting full of somebody set them free it's just a",
    "start": "3176080",
    "end": "3183050"
  },
  {
    "text": "great experience of dealing with all these people out there that collectively are much smarter than you are so you",
    "start": "3183050",
    "end": "3188180"
  },
  {
    "text": "have to be very humble once you go through the experience because you can never be as smart as all of them and and",
    "start": "3188180",
    "end": "3194420"
  },
  {
    "text": "they are all passionate they come there because they want you contribute not because somebody asked them to and that",
    "start": "3194420",
    "end": "3199609"
  },
  {
    "text": "helped hiring I had no problem hiring five people just last couple of months because they say look you'll be paid to",
    "start": "3199609",
    "end": "3205070"
  },
  {
    "text": "work an open source project and you'll be building your github profile for your future employees the best deal I think",
    "start": "3205070",
    "end": "3212810"
  },
  {
    "text": "in town that worked that also will help move our liens the Corps sealer and make",
    "start": "3212810",
    "end": "3219740"
  },
  {
    "text": "it cross-platform because there are people that want to do this work with us so we don't have to do all the work we",
    "start": "3219740",
    "end": "3225920"
  },
  {
    "text": "have to coordinated with the community below work can be done by the community itself one important thing about the",
    "start": "3225920",
    "end": "3233450"
  },
  {
    "text": "release is that it runs everywhere like we don't want to it's not locked into agile is this misconception that the",
    "start": "3233450",
    "end": "3239750"
  },
  {
    "text": "release is for Azure no it's not you know in anywhere you can run it in your closet and your garage on some hardware",
    "start": "3239750",
    "end": "3245720"
  },
  {
    "text": "that you purchased off eBay you're gonna need a little yes some people do that you can run anywhere and it's not tied",
    "start": "3245720",
    "end": "3252560"
  },
  {
    "text": "to anything so this can flexible configuration and provider models you're not constrained by words wrong and",
    "start": "3252560",
    "end": "3258760"
  },
  {
    "text": "usually Microsoft is viewed as fast follower and a lot of technology I'm proud to say that in this case JVM",
    "start": "3258760",
    "end": "3267290"
  },
  {
    "text": "people were fast followers so there's this orbit JVM clone of Arlen's and they told us very explicitly they wrote about",
    "start": "3267290",
    "end": "3273740"
  },
  {
    "text": "Arlene's the hardwood and they got blown away by the model but because they were GBM shop there by where is one of the",
    "start": "3273740",
    "end": "3280760"
  },
  {
    "text": "Electronic Arts companies just implemented the same model in JVM and they like it and Roger Johansson is",
    "start": "3280760",
    "end": "3289790"
  },
  {
    "text": "somewhere here he's trying to do something similar in go we moved out of",
    "start": "3289790",
    "end": "3295670"
  },
  {
    "text": "research great thank you people know it we moved out of",
    "start": "3295670",
    "end": "3301580"
  },
  {
    "text": "research what year-and-a-half ago but we continued to product group but we continued working with the research it's",
    "start": "3301580",
    "end": "3306830"
  },
  {
    "text": "just a couple of projects that we been recently one is do distribution so all",
    "start": "3306830",
    "end": "3311900"
  },
  {
    "text": "pictures I was showing there are about a single cluster of the Rhine Orleans service cluster of machines so we went",
    "start": "3311900",
    "end": "3319580"
  },
  {
    "text": "further from a single node single cluster multi clusters instead of one cluster Iran is kind of a constellation",
    "start": "3319580",
    "end": "3325100"
  },
  {
    "text": "of clusters and you can do distribute them you can put them in different geographies for locality but also for",
    "start": "3325100",
    "end": "3331220"
  },
  {
    "text": "availability so one of them goes down the model stays the same so you program again against this grades are always",
    "start": "3331220",
    "end": "3338300"
  },
  {
    "text": "available the fact that one datacenter went down that shouldn't be your concern application logic the code should work",
    "start": "3338300",
    "end": "3344300"
  },
  {
    "text": "and the grain will be reactivated somewhere else in a different geography if needed but he also can serve your",
    "start": "3344300",
    "end": "3350360"
  },
  {
    "text": "your local customers from the nearest datacenter automatically the famous",
    "start": "3350360",
    "end": "3356150"
  },
  {
    "text": "field Burstyn who co-invented acid transactions he's working on adding acid",
    "start": "3356150",
    "end": "3361270"
  },
  {
    "text": "cross grain transactions to your aleene's and they're very far enough project and have some very promising numbers we have other optimization paper",
    "start": "3361270",
    "end": "3369860"
  },
  {
    "text": "with neurosis this year in London a few months ago published in optimizations",
    "start": "3369860",
    "end": "3375100"
  },
  {
    "text": "but looking why I think why this model works I would say that there are just a",
    "start": "3375100",
    "end": "3382640"
  },
  {
    "text": "couple things that need to consider so one is this contextual orientation because you have at least model works",
    "start": "3382640",
    "end": "3390710"
  },
  {
    "text": "when they have lots and lots of independent context that's like users sessions devices if you have this kind",
    "start": "3390710",
    "end": "3396170"
  },
  {
    "text": "of application requirements this is where the model works if you want to build distribute database I would",
    "start": "3396170",
    "end": "3402260"
  },
  {
    "text": "advocate against user and release for it when you have lots of rows and you need to write operation it goes across and",
    "start": "3402260",
    "end": "3408620"
  },
  {
    "text": "that will not be efficient in Orleans but when you have this independent context that's easy to scale them out",
    "start": "3408620",
    "end": "3413930"
  },
  {
    "text": "it's easy to express the logic in this isolated manner of actors but also I",
    "start": "3413930",
    "end": "3420530"
  },
  {
    "text": "would argue that this approach brings object-oriented view back and I am",
    "start": "3420530",
    "end": "3427160"
  },
  {
    "text": "arguing that it's more natural the world is not service-oriented I use it example",
    "start": "3427160",
    "end": "3432320"
  },
  {
    "text": "when saying in African savanna and when the lion is talking to you gazelle through his clothes and teeth he's not",
    "start": "3432320",
    "end": "3438560"
  },
  {
    "text": "talking to you Cazale service idx these two actors interact in the penalty from other lions and other",
    "start": "3438560",
    "end": "3444540"
  },
  {
    "text": "gazelles in the Savannah so that's the reality of natural world where things are not service-oriented they're object",
    "start": "3444540",
    "end": "3450780"
  },
  {
    "text": "oriented distance oriented in this model fees as well in the people we have a graph that shows that we scale linearly",
    "start": "3450780",
    "end": "3458130"
  },
  {
    "text": "and actually numbers now are 50 percent higher but that's a graph from the paper",
    "start": "3458130",
    "end": "3463910"
  },
  {
    "text": "so if we get back to this business requirements picture of time to market",
    "start": "3463910",
    "end": "3472110"
  },
  {
    "text": "return on investment I would argue that more or less we we hit first three",
    "start": "3472110",
    "end": "3480480"
  },
  {
    "text": "requirements so I hope I demonstrated develop productivity linear scalability you can find details in the paper but I",
    "start": "3480480",
    "end": "3488070"
  },
  {
    "text": "also didn't touch a lot on high efficiency our links code is very efficient that's why we build our own",
    "start": "3488070",
    "end": "3494250"
  },
  {
    "text": "serialization layer one of the reasons so and people measured against some competition and found that's forgot",
    "start": "3494250",
    "end": "3500160"
  },
  {
    "text": "twenty three or twenty six times faster than something down there so we don't we",
    "start": "3500160",
    "end": "3505740"
  },
  {
    "text": "didn't sacrifice efficiency for simplicity that's why I think we begins",
    "start": "3505740",
    "end": "3511080"
  },
  {
    "text": "all the world problem but I think we give enough tools to address a class of applications in a very easy and very",
    "start": "3511080",
    "end": "3517950"
  },
  {
    "text": "powerful way that's my my claim to you and I would encourage you as a takeaway to take a look at our lanes take a look",
    "start": "3517950",
    "end": "3525120"
  },
  {
    "text": "at open source if you've never done that if you're a JVM look at orbit even if",
    "start": "3525120",
    "end": "3531870"
  },
  {
    "text": "you cannot apply it is kind of people technologies maybe the approach will resonate later in in your work and when",
    "start": "3531870",
    "end": "3537330"
  },
  {
    "text": "you're build your system kind of learn from our experience from our mistakes",
    "start": "3537330",
    "end": "3542430"
  },
  {
    "text": "but also learn that questioning established wisdom sometimes pays off so",
    "start": "3542430",
    "end": "3548100"
  },
  {
    "text": "you don't have to have supervision chase I would argue so that's all I have for",
    "start": "3548100",
    "end": "3553980"
  },
  {
    "text": "you thank you and if you have any questions I can answer now or later",
    "start": "3553980",
    "end": "3559970"
  },
  {
    "text": "the question is what the relations with service fabric actors and other related differences yeah so first of all the",
    "start": "3569079",
    "end": "3577510"
  },
  {
    "text": "service fabric the whole name conveys that service fabric is about service model about service about distributing",
    "start": "3577510",
    "end": "3584609"
  },
  {
    "text": "running services managing services that's the primary reason for a service fabric so it's release is about",
    "start": "3584609",
    "end": "3591880"
  },
  {
    "text": "implementing services so yes service fabric includes some libraries that got",
    "start": "3591880",
    "end": "3598599"
  },
  {
    "text": "a common probably models but more like libraries and one of them is act oriented but it even though the EPI is a",
    "start": "3598599",
    "end": "3605650"
  },
  {
    "text": "very similar act like the simple API is in reality and implementation is very different because it's built to",
    "start": "3605650",
    "end": "3612040"
  },
  {
    "text": "highlight are the features of service fabric for example replicated local attached storage well in Orleans it's",
    "start": "3612040",
    "end": "3618520"
  },
  {
    "text": "all remote partitioning story is different the placement is different there is a lot of differences there so",
    "start": "3618520",
    "end": "3625240"
  },
  {
    "text": "that that's why I would suggest you look at those differences and see which case works for you",
    "start": "3625240",
    "end": "3632940"
  },
  {
    "text": "insight in why the service fabric team chose to",
    "start": "3635850",
    "end": "3641849"
  },
  {
    "text": "the question is my insights into why service fabric team decides to build",
    "start": "3645589",
    "end": "3651470"
  },
  {
    "text": "reliable actors like like I said so the reliable actors highlight features in",
    "start": "3651470",
    "end": "3657690"
  },
  {
    "text": "his service fabric that are specific to service fabric work for example is replicated storage and in general in",
    "start": "3657690",
    "end": "3664200"
  },
  {
    "text": "memory replication so you have these features you have to to leverage these",
    "start": "3664200",
    "end": "3670230"
  },
  {
    "text": "features you need to write service code and they're different like they have stateless services and stateful services",
    "start": "3670230",
    "end": "3675599"
  },
  {
    "text": "they just added this third model that actually can leverage these features in different way so I think that that's the",
    "start": "3675599",
    "end": "3681300"
  },
  {
    "text": "biggest reason to kinda showcase the features of the underlying infrastructure any other questions",
    "start": "3681300",
    "end": "3692690"
  },
  {
    "text": "run this on premise",
    "start": "3697240",
    "end": "3700990"
  },
  {
    "text": "so the question about hosting your liens that can run it on premises on a single machine in the cloud the answer is yes",
    "start": "3705829",
    "end": "3713269"
  },
  {
    "text": "to all of this so yes you can run it on a single machine especially like a developer experience with f5 debugging",
    "start": "3713269",
    "end": "3719329"
  },
  {
    "text": "is very easy because you run two nodes within app domains of the same process where your client runs so that makes it",
    "start": "3719329",
    "end": "3725599"
  },
  {
    "text": "very easy to debug and develop so you can deploy a single machine because it's just the process you start at and the",
    "start": "3725599",
    "end": "3731359"
  },
  {
    "text": "configuration you give it you can run on premises in fact our nightly tests there",
    "start": "3731359",
    "end": "3736670"
  },
  {
    "text": "are performance measures and reliability as they run on the private cluster have some hardware that we inherited for some",
    "start": "3736670",
    "end": "3743929"
  },
  {
    "text": "reason it's no problem because it's",
    "start": "3743929",
    "end": "3751999"
  },
  {
    "text": "really about storing membership information which we recommend to use Azure table anyway because it's very",
    "start": "3751999",
    "end": "3758239"
  },
  {
    "text": "cheap we will write just a few lines there you'll pay pennies a month even if you run you can do it even if you run",
    "start": "3758239",
    "end": "3764029"
  },
  {
    "text": "on-premises that's that's how we run our tests so we run on private cluster but we store membership information in Azure",
    "start": "3764029",
    "end": "3769309"
  },
  {
    "text": "table so then moving this code to say a worker role or to scale that VM scale",
    "start": "3769309",
    "end": "3776029"
  },
  {
    "text": "set is very very easy because the whole mechanism stays the same any other",
    "start": "3776029",
    "end": "3783410"
  },
  {
    "text": "questions No",
    "start": "3783410",
    "end": "3788470"
  },
  {
    "text": "about the messaging between the actress",
    "start": "3788470",
    "end": "3793800"
  },
  {
    "text": "so instead of questions about thank you so instead of questions about the",
    "start": "3806200",
    "end": "3811750"
  },
  {
    "text": "messaging and delivery guarantees the messaging between actors is over TCP between two nodes where those grains run",
    "start": "3811750",
    "end": "3818230"
  },
  {
    "text": "or single note if they're together the guarantee is at least once but but we",
    "start": "3818230",
    "end": "3824620"
  },
  {
    "text": "don't we have to retry logic and it's there you can enable it but we turn it off by default because in case of",
    "start": "3824620",
    "end": "3830500"
  },
  {
    "text": "failures when they keep retrying and deliver messages that can get there you just exacerbate the problem so we",
    "start": "3830500",
    "end": "3836410"
  },
  {
    "text": "usually don't recommend to imply a retrial logic but there is also the one thing I didn't mention there is a",
    "start": "3836410",
    "end": "3842050"
  },
  {
    "text": "built-in timeout so when you make a call to a grain internally it timer starts",
    "start": "3842050",
    "end": "3847750"
  },
  {
    "text": "and when there is no response within the set period of time then you get a timeout exception so either your message",
    "start": "3847750",
    "end": "3853480"
  },
  {
    "text": "get delivered or you get a timeout exception that's the typical case so when there is no failure you get a",
    "start": "3853480",
    "end": "3859690"
  },
  {
    "text": "response or maybe an exception just fine but to retry we recommend living into",
    "start": "3859690",
    "end": "3865300"
  },
  {
    "text": "the application logic case and in many cases you don't want to retry you want to do it once and if it failed it's too late to retry for example so it's in",
    "start": "3865300",
    "end": "3873760"
  },
  {
    "text": "memory it's not Q does not persisted unless you use streams so streams can go work with system storage but messages",
    "start": "3873760",
    "end": "3880930"
  },
  {
    "text": "general messages then method calls go over TCP does the answer question",
    "start": "3880930",
    "end": "3889079"
  },
  {
    "text": "comparison with persistent queues I think it's the throughput question so",
    "start": "3898990",
    "end": "3905890"
  },
  {
    "text": "all persistent queues they they have limits on throughput and latency or both",
    "start": "3905890",
    "end": "3912080"
  },
  {
    "text": "right so this this model is the most performant because you don't write to any storage you just send it directly",
    "start": "3912080",
    "end": "3917690"
  },
  {
    "text": "but if you need to if you need to guarantees then you can use streams and go or persistent Q's as easily so that's",
    "start": "3917690",
    "end": "3924619"
  },
  {
    "text": "sort of one of the trade-offs you need to decide on early on but you can change it",
    "start": "3924619",
    "end": "3930880"
  },
  {
    "text": "excellent question about handlers that are attached to extreme only subscribe to see what happens with his handler if",
    "start": "3944250",
    "end": "3950620"
  },
  {
    "text": "Green goes out of memories persistent or not it is not persisted primarily",
    "start": "3950620",
    "end": "3955960"
  },
  {
    "text": "because we couldn't serialize delegates and we couldn't do the magic work with one at first but it was not possible to",
    "start": "3955960",
    "end": "3963400"
  },
  {
    "text": "do so the typical pattern is there's this method on activated sync which is",
    "start": "3963400",
    "end": "3968740"
  },
  {
    "text": "like a constructor of a grain what gets called when grain is activated so this is where you put the logic to resub",
    "start": "3968740",
    "end": "3974110"
  },
  {
    "text": "reattach your handler so when you grain when message arrives and the grain is",
    "start": "3974110",
    "end": "3979570"
  },
  {
    "text": "not a memory and get activated the method gets called you attach a handler and then the manner the event gets delivered",
    "start": "3979570",
    "end": "3985290"
  },
  {
    "text": "that's yeah you need to persist that you",
    "start": "3985290",
    "end": "3992140"
  },
  {
    "text": "subscribe to the stream and then retest your handler you have to do it unfortunately any other questions",
    "start": "3992140",
    "end": "4002780"
  },
  {
    "text": "well thank you then",
    "start": "4003839",
    "end": "4007380"
  }
]