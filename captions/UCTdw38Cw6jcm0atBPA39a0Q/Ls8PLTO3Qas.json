[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "okay good morning and uh I'm here for a second time at NBC",
    "start": "6960",
    "end": "13139"
  },
  {
    "text": "and first time I wasn't totally unprepared that you are not asking questions so feel free to ask question it's fine",
    "start": "13139",
    "end": "23240"
  },
  {
    "text": "um I'm Hannah uh I'm chair of traditional body and member of C plus",
    "start": "23820",
    "end": "29699"
  },
  {
    "start": "24000",
    "end": "108000"
  },
  {
    "text": "committee I'm sharing reflection study group there and also I'm author of",
    "start": "29699",
    "end": "35340"
  },
  {
    "text": "compile time ago expression Library I talk about it last time I was here so",
    "start": "35340",
    "end": "41520"
  },
  {
    "text": "and also I'm stop saying this on Avast which is Av company and this dialogue is about",
    "start": "41520",
    "end": "47579"
  },
  {
    "text": "something I did there okay good examples they're all C plus 23",
    "start": "47579",
    "end": "56460"
  },
  {
    "text": "with some few things and it's a slider error they are not correct",
    "start": "56460",
    "end": "62219"
  },
  {
    "text": "there is probably many errors in it and don't worry and also there is a lot of code I won't",
    "start": "62219",
    "end": "69540"
  },
  {
    "text": "be presenting oh it's a support code about crypto and whatever because that would be much bigger",
    "start": "69540",
    "end": "76380"
  },
  {
    "text": "and also all the code is in spanish-space Luna it's like lightning update and I'm using",
    "start": "76380",
    "end": "83580"
  },
  {
    "text": "filter code with registers don't be uh scared it's nice phone to use it it's",
    "start": "83580",
    "end": "89220"
  },
  {
    "text": "fun okay the problem I'm trying to solve is I",
    "start": "89220",
    "end": "94860"
  },
  {
    "text": "need to update an object on millions of clients every few minutes",
    "start": "94860",
    "end": "101340"
  },
  {
    "text": "every few minutes I mean like every three four or five minutes how I do that",
    "start": "101340",
    "end": "108840"
  },
  {
    "start": "108000",
    "end": "596000"
  },
  {
    "text": "okay lightning updates but can you update",
    "start": "108840",
    "end": "114780"
  },
  {
    "text": "it can be executable it can be a Content database",
    "start": "114780",
    "end": "120479"
  },
  {
    "text": "shares models every application needs an update okay",
    "start": "120479",
    "end": "126180"
  },
  {
    "text": "and but generally it's just a state of the application or part of it",
    "start": "126180",
    "end": "133280"
  },
  {
    "text": "the state is immutable because you don't want the state you are updating to be changed by the application itself it",
    "start": "133800",
    "end": "140640"
  },
  {
    "text": "should be invisible it should be consistent and secure so no",
    "start": "140640",
    "end": "146040"
  },
  {
    "text": "one will give you something which is not yours but maybe someone will use it as an attack surface for your application",
    "start": "146040",
    "end": "154800"
  },
  {
    "text": "the uh state is representable as a data structure everything is at a structure",
    "start": "154800",
    "end": "160560"
  },
  {
    "text": "factor of byte is at a structure array is data structure three is at a structure",
    "start": "160560",
    "end": "167099"
  },
  {
    "text": "so every other structure can be somehow represented as a file if you serialize",
    "start": "167099",
    "end": "172260"
  },
  {
    "text": "it into different format and it contains your data",
    "start": "172260",
    "end": "177540"
  },
  {
    "text": "it's a subject of the update system and I'm using term subject a lot during the in this talk so this is important",
    "start": "177540",
    "end": "186720"
  },
  {
    "text": "operating mechanisms in your applications can be replaced everything every time you update you just replace",
    "start": "186720",
    "end": "192300"
  },
  {
    "text": "everything and you are done it can be some overlay over your grand",
    "start": "192300",
    "end": "197940"
  },
  {
    "text": "data like this and also it's fine also it can be",
    "start": "197940",
    "end": "204180"
  },
  {
    "text": "differential update that you are applying patches every time you update you change what you have with something",
    "start": "204180",
    "end": "210000"
  },
  {
    "text": "to something new basically you have state n and plus",
    "start": "210000",
    "end": "215760"
  },
  {
    "text": "difference between two status and we will get new state and difference can be",
    "start": "215760",
    "end": "222840"
  },
  {
    "text": "it's just like a cell in a matrix of State",
    "start": "222840",
    "end": "228260"
  },
  {
    "text": "and Matrix can be an update graph like graph because same",
    "start": "228959",
    "end": "235440"
  },
  {
    "text": "so let's say we have state a and then later we will update to B",
    "start": "235440",
    "end": "241080"
  },
  {
    "text": "C D and E makes sense",
    "start": "241080",
    "end": "246120"
  },
  {
    "text": "but whatever what happen if your clients not they are not always on the latest version sometimes they are on older",
    "start": "246120",
    "end": "252959"
  },
  {
    "text": "version because they were on vacation Maybe so you need to have a shortcut in a graph",
    "start": "252959",
    "end": "259680"
  },
  {
    "text": "like this and it's obviously too easy to find a",
    "start": "259680",
    "end": "267060"
  },
  {
    "text": "path in your graph if you look at it so between A and E it's really easy to",
    "start": "267060",
    "end": "272880"
  },
  {
    "text": "find path because it's a simple Direct One what about A and D",
    "start": "272880",
    "end": "278639"
  },
  {
    "text": "you see it that's simple okay but",
    "start": "278639",
    "end": "284280"
  },
  {
    "text": "if you don't see the graph what do you do",
    "start": "284280",
    "end": "288680"
  },
  {
    "text": "from B you will look forward in the uh in time but actually you",
    "start": "290400",
    "end": "295500"
  },
  {
    "text": "cannot because B it was released in time when you",
    "start": "295500",
    "end": "301020"
  },
  {
    "text": "didn't know what you are going to release next so you cannot do that",
    "start": "301020",
    "end": "306419"
  },
  {
    "text": "but you can go forward backward from E back back in time",
    "start": "306419",
    "end": "311759"
  },
  {
    "text": "but what happened if there is no direct part from E to B you need to somehow find a path in the graph",
    "start": "311759",
    "end": "319380"
  },
  {
    "text": "maybe it's C to B asically the algorithm is easy you will",
    "start": "319380",
    "end": "324660"
  },
  {
    "text": "look for the closest next node or to you altered one you already have",
    "start": "324660",
    "end": "330960"
  },
  {
    "text": "and then you find a direct part apply the patch in a reverse order and you are",
    "start": "330960",
    "end": "336660"
  },
  {
    "text": "updated okay how do you represent a link in the graph",
    "start": "336660",
    "end": "343080"
  },
  {
    "text": "uh it can be the file name it can be a file name button version number or name of the release like",
    "start": "343080",
    "end": "351180"
  },
  {
    "text": "this is the latest latest latest final two like of our documents",
    "start": "351180",
    "end": "357419"
  },
  {
    "text": "or identifier of it content that's much better you can actually calculate a hash",
    "start": "357419",
    "end": "363780"
  },
  {
    "text": "unique hash of the content and use it as a name this will create a unique identifier",
    "start": "363780",
    "end": "370440"
  },
  {
    "text": "over content so you actually you can say that hash value of the content is a pointer for",
    "start": "370440",
    "end": "376620"
  },
  {
    "text": "the content and unique value for its content is can",
    "start": "376620",
    "end": "382259"
  },
  {
    "text": "be it's called content addressable so if you knew what's going to be there",
    "start": "382259",
    "end": "388800"
  },
  {
    "text": "only it hash you can actually download the file based on the name",
    "start": "388800",
    "end": "394919"
  },
  {
    "text": "from CDN which is like just a bunch of networks on uh around the internet",
    "start": "394919",
    "end": "400340"
  },
  {
    "text": "servers on internet and also if you know the hash it makes the data",
    "start": "400340",
    "end": "406620"
  },
  {
    "text": "immutable this file will never be changed because it file if you change it",
    "start": "406620",
    "end": "412919"
  },
  {
    "text": "actually it will should have new name okay and because it doesn't change it's",
    "start": "412919",
    "end": "418979"
  },
  {
    "text": "really easy to Cache because it will never change so caching problem",
    "start": "418979",
    "end": "424139"
  },
  {
    "text": "is suddenly much easier because you don't need to think about invalidation you will just add it into cache",
    "start": "424139",
    "end": "430979"
  },
  {
    "text": "for some time and some if people are if application is asking for it it's there",
    "start": "430979",
    "end": "436380"
  },
  {
    "text": "and some later you can just delete it and it's fine and if they ask you can just roll it",
    "start": "436380",
    "end": "442560"
  },
  {
    "text": "again and also if you uh store the hash",
    "start": "442560",
    "end": "448800"
  },
  {
    "text": "in the graph as part of the object if you knew hash of a",
    "start": "448800",
    "end": "454440"
  },
  {
    "text": "which contains H2 of B you actually can just also C because it's containing B so it's transitive Trust",
    "start": "454440",
    "end": "461819"
  },
  {
    "text": "so let's say we have graph BCE and uh it's not just like these states",
    "start": "461819",
    "end": "468300"
  },
  {
    "text": "we are updating there are just actually we need only metadata like description what's the data inside the graph",
    "start": "468300",
    "end": "475979"
  },
  {
    "text": "and the links between them are like just identifier of previous metadata so each better attack contains",
    "start": "475979",
    "end": "483180"
  },
  {
    "text": "description of the content you are supposed to be in",
    "start": "483180",
    "end": "488539"
  },
  {
    "text": "and between each metadata node there are a new node containing the actual batch",
    "start": "488880",
    "end": "496919"
  },
  {
    "text": "or div if you will and previous metadata so you just need to download a fetch",
    "start": "496919",
    "end": "503639"
  },
  {
    "text": "from previous metadata and it will give you previous metadata and also difference between a previous subject",
    "start": "503639",
    "end": "511020"
  },
  {
    "text": "and your subject and also some better attack can contain",
    "start": "511020",
    "end": "517860"
  },
  {
    "text": "a snapshot which is just realized uh subject",
    "start": "517860",
    "end": "523080"
  },
  {
    "text": "so you don't uh you sometimes somehow you need to start the graph because subject can be just unpacked",
    "start": "523080",
    "end": "530100"
  },
  {
    "text": "snapshot or subject can be subject Plus multiple of patches",
    "start": "530100",
    "end": "537060"
  },
  {
    "text": "and subject can be unpacked snapshot plus multiple patches so let's let's",
    "start": "537060",
    "end": "543720"
  },
  {
    "text": "that is a graph and let's say uh we want to update into C",
    "start": "543720",
    "end": "551779"
  },
  {
    "text": "but we don't have anything our application is clean slate I just got somehow did C and I want to",
    "start": "552180",
    "end": "560640"
  },
  {
    "text": "get full update from it I will just look on parts to correct or to close a",
    "start": "560640",
    "end": "566220"
  },
  {
    "text": "snapshot download by that I got the metadata of previous",
    "start": "566220",
    "end": "573000"
  },
  {
    "text": "node and then I will download another div but I will that will give me metadata of",
    "start": "573000",
    "end": "580200"
  },
  {
    "text": "another and then I will Download snapshot the serialize it get subject and another subject and subject and I'm",
    "start": "580200",
    "end": "586740"
  },
  {
    "text": "done my application is updated to from anything from nothing I got current",
    "start": "586740",
    "end": "594360"
  },
  {
    "text": "latest state okay and now when you actually kind of",
    "start": "594360",
    "end": "600540"
  },
  {
    "text": "understand what's going on with the update system we can model it",
    "start": "600540",
    "end": "607680"
  },
  {
    "text": "so I will start with the hash because it's a pointer and PRC plus plus so it's a pointer so we",
    "start": "607680",
    "end": "613680"
  },
  {
    "text": "need to model pointer and we can say that point hash is just array of bytes",
    "start": "613680",
    "end": "619440"
  },
  {
    "text": "but let's say 32 bytes if sh256",
    "start": "619440",
    "end": "624720"
  },
  {
    "text": "and hash view is just span of bytes immutable okay so I have uh but that's not working",
    "start": "624720",
    "end": "633959"
  },
  {
    "text": "because I like strong typing I don't want uh some random bytes to like be",
    "start": "633959",
    "end": "640140"
  },
  {
    "text": "interpreted as a hash so I need something which is more strong so",
    "start": "640140",
    "end": "646440"
  },
  {
    "text": "I can create my own type hash I need to write some Constructor there",
    "start": "646440",
    "end": "651899"
  },
  {
    "text": "is a array I need to implement some comparison we can default it",
    "start": "651899",
    "end": "657420"
  },
  {
    "text": "some iterators non-considerators then I need to do much more than hash view it's",
    "start": "657420",
    "end": "664980"
  },
  {
    "text": "same Constructors comparison we need to",
    "start": "664980",
    "end": "670980"
  },
  {
    "text": "implement our own because spend is not comparable also iterators but it's a lot of code",
    "start": "670980",
    "end": "678000"
  },
  {
    "text": "you need to write for just some something so simple as a hash",
    "start": "678000",
    "end": "683220"
  },
  {
    "text": "so I don't like it I like uh strong typing with via",
    "start": "683220",
    "end": "688560"
  },
  {
    "text": "inheritance I have type hash which is inheriting from State array",
    "start": "688560",
    "end": "694800"
  },
  {
    "text": "which will give me everything I need comparison iterators",
    "start": "694800",
    "end": "699839"
  },
  {
    "text": "and I just need to create a Constructor which will just from hash view create",
    "start": "699839",
    "end": "706620"
  },
  {
    "text": "new hash it's explicit and also I need to take the Constructor",
    "start": "706620",
    "end": "712440"
  },
  {
    "text": "of array and explicitly all the Constructor raised to same level",
    "start": "712440",
    "end": "717959"
  },
  {
    "text": "of priority let's say as my own Constructor nothing else needs to be written",
    "start": "717959",
    "end": "724200"
  },
  {
    "text": "that's the best code to code you don't need to write",
    "start": "724200",
    "end": "728660"
  },
  {
    "text": "and as you is same it's a span I will take its Constructor creates a implicit",
    "start": "729240",
    "end": "735420"
  },
  {
    "text": "Constructor from hash because it's a view and by comparison",
    "start": "735420",
    "end": "742320"
  },
  {
    "text": "and that's all I need to implement it's just few lines of code you don't need to",
    "start": "742320",
    "end": "747959"
  },
  {
    "text": "like you need to that's only free function and everything else is already there",
    "start": "747959",
    "end": "753839"
  },
  {
    "text": "and uh then I can create also hierarchy of types I can create a text hash which takes tag",
    "start": "753839",
    "end": "761220"
  },
  {
    "text": "do the same create a new Constructor for the attack View take this view it's just exactly the",
    "start": "761220",
    "end": "767880"
  },
  {
    "text": "same just another layer and then I can introduce text for my sh1",
    "start": "767880",
    "end": "774240"
  },
  {
    "text": "function sh256 function and now I can create a sh1 view shi256",
    "start": "774240",
    "end": "783060"
  },
  {
    "text": "view and they want to mix because they are different types so you can have a function yes Beyond",
    "start": "783060",
    "end": "791600"
  },
  {
    "text": "foreign",
    "start": "807899",
    "end": "810139"
  },
  {
    "text": "operator because uh yeah actually like maybe yes I will get to work because",
    "start": "814760",
    "end": "821579"
  },
  {
    "text": "there is like I'm uh I have something more about it so uh we have the types and now you can",
    "start": "821579",
    "end": "830040"
  },
  {
    "text": "see uh the graph what is a convertible array which owns data is comparable",
    "start": "830040",
    "end": "836339"
  },
  {
    "text": "convertible into spanner implicitly hash value is for convertible and HBO",
    "start": "836339",
    "end": "844019"
  },
  {
    "text": "and also hash value is convertible in Span and this is just implicit conversions",
    "start": "844019",
    "end": "850759"
  },
  {
    "text": "take value the same so you can actually take your uh if you want to take a bytes",
    "start": "851279",
    "end": "857160"
  },
  {
    "text": "from your text or hash and place it into function which expects expect span of",
    "start": "857160",
    "end": "863160"
  },
  {
    "text": "bytes it will work but not otherwise because otherwise you need explicit conversions",
    "start": "863160",
    "end": "870839"
  },
  {
    "text": "so uh downcast is over okay upcast must be explicit",
    "start": "870839",
    "end": "876980"
  },
  {
    "start": "877000",
    "end": "891000"
  },
  {
    "text": "okay uh as Tony said strong types create strong code because if you create all strong types in your application",
    "start": "877560",
    "end": "885720"
  },
  {
    "text": "your application will be much safer than if you can mix arguments or types so do",
    "start": "885720",
    "end": "891060"
  },
  {
    "start": "891000",
    "end": "1081000"
  },
  {
    "text": "that oh sick huh uh matter uh when we introduce the type",
    "start": "891060",
    "end": "899579"
  },
  {
    "text": "hash now we need to introduce type metadata like rundino describing our state",
    "start": "899579",
    "end": "906180"
  },
  {
    "text": "and a better attack contains hash of the con subject the data we are updating to",
    "start": "906180",
    "end": "914519"
  },
  {
    "text": "so when we finish the update we can actually check if we are incorrect uh State",
    "start": "914519",
    "end": "919699"
  },
  {
    "text": "also it contains color of the graph",
    "start": "919699",
    "end": "924720"
  },
  {
    "text": "to distinguish between multiple graphs or if you have multiple branches or a B testing",
    "start": "924720",
    "end": "930720"
  },
  {
    "text": "whatever and also each node has a timestamp when it was",
    "start": "930720",
    "end": "936360"
  },
  {
    "text": "created because I need them sorted actually ordered because you can you",
    "start": "936360",
    "end": "942839"
  },
  {
    "text": "cannot go back in time you need to go only forward and then",
    "start": "942839",
    "end": "948300"
  },
  {
    "text": "uh there is a list of links to previous or metadata I call them Delta links",
    "start": "948300",
    "end": "956820"
  },
  {
    "text": "and they are like actually link to a div or patch and also some of the metadata can",
    "start": "956820",
    "end": "963600"
  },
  {
    "text": "contain hash of the snapshot so you can download it",
    "start": "963600",
    "end": "969120"
  },
  {
    "text": "and unpack it and get all the subject itself immediately and there's like two member variables",
    "start": "969120",
    "end": "976680"
  },
  {
    "text": "which are not serialized later but you need you need to know them for the",
    "start": "976680",
    "end": "981720"
  },
  {
    "text": "algorithms the hash of the metadata itself so when you serialize it",
    "start": "981720",
    "end": "987600"
  },
  {
    "text": "and calculate the content then that's the uh and calculate the hash is the is this the hash",
    "start": "987600",
    "end": "994380"
  },
  {
    "text": "and also uh if you have the uh cellulite bytes available you need them later in",
    "start": "994380",
    "end": "1000800"
  },
  {
    "text": "algorithms too so when you download download the file download the metadata and centralize",
    "start": "1000800",
    "end": "1007459"
  },
  {
    "text": "them you need to store their identifier add their content in the object itself",
    "start": "1007459",
    "end": "1013639"
  },
  {
    "text": "but these two are not serialized maybe in future there will be like maybe",
    "start": "1013639",
    "end": "1019519"
  },
  {
    "text": "attribute to mark them that it is one uh be part of this realization process but",
    "start": "1019519",
    "end": "1026480"
  },
  {
    "text": "for now it's just like this and Delta link is uh",
    "start": "1026480",
    "end": "1031699"
  },
  {
    "text": "timestamp of the previous metadata and hash of the uh",
    "start": "1031699",
    "end": "1038540"
  },
  {
    "text": "Delta object which leads to previous metadata",
    "start": "1038540",
    "end": "1043699"
  },
  {
    "text": "and also distance to closest snapshot because this snapshot is not in each",
    "start": "1043699",
    "end": "1050020"
  },
  {
    "text": "metadata node but only in view maybe let's say once a week you will release a",
    "start": "1050020",
    "end": "1055460"
  },
  {
    "text": "snapshot so you need to this distance is needed",
    "start": "1055460",
    "end": "1060559"
  },
  {
    "text": "to find the closest the shortest path to find it and that is also comparison operators",
    "start": "1060559",
    "end": "1067340"
  },
  {
    "text": "which can be defaulted because actually I only I think I need is to order them",
    "start": "1067340",
    "end": "1073280"
  },
  {
    "text": "based on the time point so I'm will get there",
    "start": "1073280",
    "end": "1080440"
  },
  {
    "start": "1081000",
    "end": "1271000"
  },
  {
    "text": "Delta is much simpler object it's just a metadata of preview State because they",
    "start": "1081559",
    "end": "1088400"
  },
  {
    "text": "are contented there and bytes of the patch itself I don't need to understand it",
    "start": "1088400",
    "end": "1094640"
  },
  {
    "text": "but it's just some some sort of patch and snapshot is just byte of the",
    "start": "1094640",
    "end": "1099919"
  },
  {
    "text": "content of the serialized content",
    "start": "1099919",
    "end": "1104960"
  },
  {
    "text": "and actually I'm not using inheritance here because actually I don't need them access for all the functions",
    "start": "1104960",
    "end": "1111679"
  },
  {
    "text": "like iterators because no that's just like something inside and don't get cozy",
    "start": "1111679",
    "end": "1118340"
  },
  {
    "text": "and then I need actually identifier which is really helpful because I have multiple types of objects",
    "start": "1118340",
    "end": "1124760"
  },
  {
    "text": "so I have identifier or Suntec and which contains hash of the object",
    "start": "1124760",
    "end": "1129799"
  },
  {
    "text": "I'm pointing at and type and I can compare the identifier against",
    "start": "1129799",
    "end": "1136340"
  },
  {
    "text": "the type and also I can kind of sterilize the identifier into your own",
    "start": "1136340",
    "end": "1143059"
  },
  {
    "text": "by giving it prefix so if you have your server or CDN where",
    "start": "1143059",
    "end": "1148340"
  },
  {
    "text": "all the objects analyzed are stored you can just use it as a prefix operator",
    "start": "1148340",
    "end": "1153799"
  },
  {
    "text": "or divide an identifier and it will give you nice URL to download you can provide to some",
    "start": "1153799",
    "end": "1160820"
  },
  {
    "text": "Library which will download it for you so we have types metadata snapshot Delta",
    "start": "1160820",
    "end": "1165980"
  },
  {
    "text": "and we have alias Alias is something special it's actually",
    "start": "1165980",
    "end": "1171260"
  },
  {
    "text": "metadata but they are not stored in City on CDN under its under under its hash but under",
    "start": "1171260",
    "end": "1178160"
  },
  {
    "text": "its name let's say we have a graph and uh as we are releasing in time we mark this or",
    "start": "1178160",
    "end": "1185480"
  },
  {
    "text": "node c as a beta release and node B is stable",
    "start": "1185480",
    "end": "1192500"
  },
  {
    "text": "so users can change uh change if they are in like beta stream or stable stream",
    "start": "1192500",
    "end": "1198320"
  },
  {
    "text": "and then when we decide that our stable orbital is stable enough we just mark it",
    "start": "1198320",
    "end": "1204140"
  },
  {
    "text": "as a better and we can do it because we're actually storing the aliases as",
    "start": "1204140",
    "end": "1210679"
  },
  {
    "text": "under name of the Alias not under the name of the of the hash of the content",
    "start": "1210679",
    "end": "1217160"
  },
  {
    "text": "so we can actually change them and I'm using different uh identifiers as like different suffix to actually",
    "start": "1217160",
    "end": "1224120"
  },
  {
    "text": "change different or CDN caching rules so we have Alias it's just a copy of",
    "start": "1224120",
    "end": "1229460"
  },
  {
    "text": "metadata stored under name or it can be also hash of the name which",
    "start": "1229460",
    "end": "1237080"
  },
  {
    "text": "has nice property because you can actually see all hashes in your graph with identifier of your stream so you",
    "start": "1237080",
    "end": "1243320"
  },
  {
    "text": "can actually have multiple like components updated from same URL and they won't conflict there'll be no",
    "start": "1243320",
    "end": "1250760"
  },
  {
    "text": "conflict between them and because you have the uh file",
    "start": "1250760",
    "end": "1255860"
  },
  {
    "text": "extension different for based on the type you can actually Mark your server or CDN to Cache it differently",
    "start": "1255860",
    "end": "1263360"
  },
  {
    "text": "let's let's say for Alias it's great only to catch it only for five minutes but for everything else indefinitely",
    "start": "1263360",
    "end": "1271360"
  },
  {
    "text": "so how are you digitalize bytes into object I don't know why it's like use your",
    "start": "1271460",
    "end": "1278419"
  },
  {
    "text": "favorite Library but before before that I need uh",
    "start": "1278419",
    "end": "1284240"
  },
  {
    "text": "something I called any object which is just variant because you can inherit from variant",
    "start": "1284240",
    "end": "1290960"
  },
  {
    "text": "and take its Constructor so it will work nicely and then I have a function get metadata",
    "start": "1290960",
    "end": "1296900"
  },
  {
    "text": "which will give me metadata if there are any other pointer",
    "start": "1296900",
    "end": "1302860"
  },
  {
    "text": "and uh because I don't want to use a write const function and non-cons function I can use deduce this",
    "start": "1302960",
    "end": "1310220"
  },
  {
    "text": "explicit this argument which is C plus password feature it's cute",
    "start": "1310220",
    "end": "1315919"
  },
  {
    "text": "and uh same feeling for Delta same thing for snapshot and then I have a wrapper I'm using",
    "start": "1315919",
    "end": "1322159"
  },
  {
    "text": "protobuf how many of you use protobuf okay few hands uh Json",
    "start": "1322159",
    "end": "1330340"
  },
  {
    "text": "XML",
    "start": "1331280",
    "end": "1333880"
  },
  {
    "text": "oh okay so I have object type metadata patch snapshot and signature",
    "start": "1336440",
    "end": "1345679"
  },
  {
    "text": "signature will contain a cryptographical signature of OD hash of the content we'll get there",
    "start": "1345679",
    "end": "1354080"
  },
  {
    "text": "so you can actually have like some security in your update system anyway",
    "start": "1354080",
    "end": "1359720"
  },
  {
    "text": "first function I need to do is unwrap and validate I will take identifier of",
    "start": "1359720",
    "end": "1365960"
  },
  {
    "text": "object I just downloaded somehow and its contained as a bytes just view",
    "start": "1365960",
    "end": "1371120"
  },
  {
    "text": "to bytes and I will return any object which can be which is a variant it can be method at the snapshot bytes whatever",
    "start": "1371120",
    "end": "1380419"
  },
  {
    "text": "and I deserialize it with protobuf some Library tell us there's plenty of",
    "start": "1380419",
    "end": "1386059"
  },
  {
    "text": "them probably maybe you write your own it's a sin but everyone is doing it",
    "start": "1386059",
    "end": "1392860"
  },
  {
    "text": "or if in developer we know that the type is metadata",
    "start": "1392860",
    "end": "1398840"
  },
  {
    "text": "and actually it contains metadata and signature because every metadata needs to have a signature",
    "start": "1398840",
    "end": "1405559"
  },
  {
    "text": "we call function validate metadata with its ID metadata content signature and content",
    "start": "1405559",
    "end": "1411320"
  },
  {
    "text": "of whole object which has an outlet because we need it for later",
    "start": "1411320",
    "end": "1417440"
  },
  {
    "text": "and then if it's the delta we Delta needs to contain metadata of",
    "start": "1417440",
    "end": "1424280"
  },
  {
    "text": "previous state and also the patch and then we'll call function will validate for ID",
    "start": "1424280",
    "end": "1431419"
  },
  {
    "text": "metadata previous and patch and if it's snapshot it needs to have contained",
    "start": "1431419",
    "end": "1436460"
  },
  {
    "text": "snapshot and we call function validate otherwise we throw exception",
    "start": "1436460",
    "end": "1442179"
  },
  {
    "text": "it's not valid object so validate metadata looks like it's",
    "start": "1442179",
    "end": "1449000"
  },
  {
    "text": "quite simple function it will take identifier content of the metadata signature and",
    "start": "1449000",
    "end": "1455840"
  },
  {
    "text": "content of the whole wrapper an electron metadata so",
    "start": "1455840",
    "end": "1461720"
  },
  {
    "text": "if IDE we ask for is not metadata or alias",
    "start": "1461720",
    "end": "1468639"
  },
  {
    "text": "we ask for different objects and it's like condition or but we will throw up because this is like code which is",
    "start": "1468860",
    "end": "1475820"
  },
  {
    "text": "interacting with something getting from external so you need to check everything to be secure",
    "start": "1475820",
    "end": "1481700"
  },
  {
    "text": "then I calculate the hash of the content not developer content but the content of",
    "start": "1481700",
    "end": "1487580"
  },
  {
    "text": "metadata only and if the ID is Metallica because Alias",
    "start": "1487580",
    "end": "1492860"
  },
  {
    "text": "doesn't need to be a identified by hash We compare if the",
    "start": "1492860",
    "end": "1498620"
  },
  {
    "text": "hash is same as the hash we ask for if it's not be driven exception",
    "start": "1498620",
    "end": "1506000"
  },
  {
    "text": "and 10 we can validate a signature format even",
    "start": "1506000",
    "end": "1511400"
  },
  {
    "text": "for alleles with some trusted keys and a hash and signature we just got and if it's",
    "start": "1511400",
    "end": "1519140"
  },
  {
    "text": "invalidated with just true exception this is the code I'm not going to show you because it's just like",
    "start": "1519140",
    "end": "1524419"
  },
  {
    "text": "it's not trivial but it's not a scope of this talk and then",
    "start": "1524419",
    "end": "1529940"
  },
  {
    "text": "I digitalized the content of metadata itself because it's protobuf in protobuf",
    "start": "1529940",
    "end": "1535400"
  },
  {
    "text": "and then uh into result I store the hash I calculate",
    "start": "1535400",
    "end": "1540919"
  },
  {
    "text": "it and I copy the bytes of developer because I have only view with stutter energies 2 you can do",
    "start": "1540919",
    "end": "1549440"
  },
  {
    "text": "that into Vector of bytes and the return result for object as the",
    "start": "1549440",
    "end": "1555980"
  },
  {
    "text": "result yeah and Delta looks similar you take identifier with data bytes",
    "start": "1555980",
    "end": "1563059"
  },
  {
    "text": "touch byte and electron Delta if you didn't ask for Delta obviously",
    "start": "1563059",
    "end": "1570080"
  },
  {
    "text": "it's an error then you calculate a hash of metadata bytes concatenated with patch bytes",
    "start": "1570080",
    "end": "1576679"
  },
  {
    "text": "because you need to trust both of them and if the hash doesn't match with what",
    "start": "1576679",
    "end": "1582380"
  },
  {
    "text": "you ask for it's an error and then you ask for the civilization at",
    "start": "1582380",
    "end": "1587419"
  },
  {
    "text": "metadata and calculate hash every metadata these are not signed but",
    "start": "1587419",
    "end": "1594559"
  },
  {
    "text": "don't worry you don't need it and then you will return Delta with uh",
    "start": "1594559",
    "end": "1600140"
  },
  {
    "text": "metadata and again copy of the patch from The View",
    "start": "1600140",
    "end": "1606559"
  },
  {
    "text": "and uh you've got the Delta snapshot is the simplest one",
    "start": "1606559",
    "end": "1612080"
  },
  {
    "text": "you ask for identifier and some data you will get snapshot if",
    "start": "1612080",
    "end": "1617120"
  },
  {
    "text": "it doesn't match it's an error you will calculate the hash",
    "start": "1617120",
    "end": "1622820"
  },
  {
    "text": "if hash doesn't match it's an error then we will copy the data and a return",
    "start": "1622820",
    "end": "1627860"
  },
  {
    "text": "snapshot and we are fine so we have the verbs of",
    "start": "1627860",
    "end": "1634100"
  },
  {
    "text": "our algorithms we have a hash identifier metadata snapshot Delta all yours",
    "start": "1634100",
    "end": "1641840"
  },
  {
    "text": "and then we need to have some like uh sorry notes perhaps we will get no verbs",
    "start": "1641840",
    "end": "1648740"
  },
  {
    "text": "sorry so we have the graph we have some object in it and",
    "start": "1648740",
    "end": "1656900"
  },
  {
    "text": "let's say oh we want to go into State C",
    "start": "1656900",
    "end": "1662779"
  },
  {
    "text": "yeah and uh that is like the graph which is stored as a file",
    "start": "1662779",
    "end": "1668600"
  },
  {
    "text": "and our application is in state C which somehow points at the state C",
    "start": "1668600",
    "end": "1675279"
  },
  {
    "text": "and the pointer is actually a shared pointer but we will get there so we will we actually owned an application the",
    "start": "1675279",
    "end": "1681980"
  },
  {
    "text": "state and the subject and every time we update we just create",
    "start": "1681980",
    "end": "1687020"
  },
  {
    "text": "new one and release previous one a new one and previous funnel is released",
    "start": "1687020",
    "end": "1693080"
  },
  {
    "text": "okay so state of the application is constant uh constant metadata we",
    "start": "1693080",
    "end": "1701000"
  },
  {
    "text": "don't need to change them and our subject which is also constant because we are not going to change its",
    "start": "1701000",
    "end": "1707779"
  },
  {
    "text": "imitable and also some function of the hash color and uh timestamp but actually it cannot",
    "start": "1707779",
    "end": "1715940"
  },
  {
    "text": "be uh just our object because in update system you're actually",
    "start": "1715940",
    "end": "1721760"
  },
  {
    "text": "updating quite a lot of uh quite a big object like I would say",
    "start": "1721760",
    "end": "1727580"
  },
  {
    "text": "a few hundred megabytes so you don't want to copy every time you copy the object it's better to have shared pointer of",
    "start": "1727580",
    "end": "1733400"
  },
  {
    "text": "quantity how many of you think that sharepointer is terrible thing to do to use",
    "start": "1733400",
    "end": "1741039"
  },
  {
    "text": "foreign",
    "start": "1742100",
    "end": "1744640"
  },
  {
    "text": "ER of constiti is actually awesome thing because it cannot form a cycle of",
    "start": "1755020",
    "end": "1760820"
  },
  {
    "text": "dependencies so it will never leak so if you have big object and you know it will",
    "start": "1760820",
    "end": "1766279"
  },
  {
    "text": "never be changed it's a resource just use sharepointer you will be fine",
    "start": "1766279",
    "end": "1772120"
  },
  {
    "text": "and also or as it behaves as immutable value you don't need to uh for locking",
    "start": "1772120",
    "end": "1777620"
  },
  {
    "text": "when you access it because you just you can just read it it's uh cons correct",
    "start": "1777620",
    "end": "1786260"
  },
  {
    "text": "and also it's safe memory because you don't need to be create copies so",
    "start": "1786260",
    "end": "1791480"
  },
  {
    "text": "if you are in like embed development or anywhere it's a resource and if you don't know if you",
    "start": "1791480",
    "end": "1799279"
  },
  {
    "text": "like uh where you need to hold it shared pointer can help you and it's fine",
    "start": "1799279",
    "end": "1807159"
  },
  {
    "text": "so let's let's have another update graph we are in state B of the application",
    "start": "1807500",
    "end": "1813860"
  },
  {
    "text": "and we want to go into State G how do we get there",
    "start": "1813860",
    "end": "1820520"
  },
  {
    "text": "we download the metadata of State G and by downloading them we will get",
    "start": "1820520",
    "end": "1826520"
  },
  {
    "text": "links to some previews States",
    "start": "1826520",
    "end": "1832898"
  },
  {
    "text": "how do I select which I should download next",
    "start": "1834140",
    "end": "1839380"
  },
  {
    "text": "pick by random yeah I can do that but it's not effective enough actually uh the most",
    "start": "1841460",
    "end": "1848360"
  },
  {
    "text": "effective way is to look for the uh note",
    "start": "1848360",
    "end": "1853580"
  },
  {
    "text": "which is which has the lowest timestamp greater or equal as my current node",
    "start": "1853580",
    "end": "1862220"
  },
  {
    "text": "because the graph itself is like one requirements that there is always part minus one so you can always go back",
    "start": "1862220",
    "end": "1871460"
  },
  {
    "text": "so I will download e and we'll get C and D because the nodes are actually on the in the graphs sorted",
    "start": "1871460",
    "end": "1878480"
  },
  {
    "text": "by time obviously I will download C and from C I will get uh Delta to B I will download",
    "start": "1878480",
    "end": "1884779"
  },
  {
    "text": "it and I have passed from BC e g but the",
    "start": "1884779",
    "end": "1889880"
  },
  {
    "text": "graph actually is much more complex but I don't need to see it I just need",
    "start": "1889880",
    "end": "1895279"
  },
  {
    "text": "to see what is in my current note I'm downloading so let's implement it so we have",
    "start": "1895279",
    "end": "1902120"
  },
  {
    "text": "function select next which takes metadata and some current state",
    "start": "1902120",
    "end": "1908659"
  },
  {
    "text": "which is also shared pointer and it returns identifier of object",
    "start": "1908659",
    "end": "1914840"
  },
  {
    "text": "I need to download next first thing if I'm not in a grand state or uh",
    "start": "1914840",
    "end": "1923419"
  },
  {
    "text": "color of the graph is different so maybe I switch Branch between totally unrelated graphs",
    "start": "1923419",
    "end": "1931340"
  },
  {
    "text": "I Market uh that current state is empty and I will do full update and if I don't have current state so I'm",
    "start": "1931340",
    "end": "1939440"
  },
  {
    "text": "doing full update and timestamp of the note actually uh",
    "start": "1939440",
    "end": "1945320"
  },
  {
    "text": "I'm I'm supposed to like uh currently in and",
    "start": "1945320",
    "end": "1951380"
  },
  {
    "text": "current uh state is older than or I mark it as also full update",
    "start": "1951380",
    "end": "1959659"
  },
  {
    "text": "because uh limited data I just don't download are",
    "start": "1959659",
    "end": "1964820"
  },
  {
    "text": "sorry I'm just getting lost",
    "start": "1964820",
    "end": "1968440"
  },
  {
    "text": "I'm asked to download or update which is older than I'm currently in",
    "start": "1971860",
    "end": "1979159"
  },
  {
    "text": "then I need to do full update because there is this algorithm doesn't support going forward it is going only only",
    "start": "1979159",
    "end": "1985279"
  },
  {
    "text": "always backward and also uh all graphs needs to content or container",
    "start": "1985279",
    "end": "1993500"
  },
  {
    "text": "snapshot hash or at least one Delta link",
    "start": "1993500",
    "end": "1998659"
  },
  {
    "text": "otherwise the graph is wrong so if we are doing full update and",
    "start": "1998659",
    "end": "2007059"
  },
  {
    "text": "there are no Delta links and there is a snapshot or snapshot",
    "start": "2007059",
    "end": "2013779"
  },
  {
    "text": "we just uh tell our equally that uh",
    "start": "2013779",
    "end": "2019000"
  },
  {
    "text": "you just need to download a snapshot of this hash it will be fine",
    "start": "2019000",
    "end": "2024519"
  },
  {
    "text": "but if we do have current state we need to select uh the best link to go",
    "start": "2024519",
    "end": "2030220"
  },
  {
    "text": "so we will look at them filter filter them or pipe them into",
    "start": "2030220",
    "end": "2035380"
  },
  {
    "text": "filter and filter them by eligibility which is just the link timestamped must be",
    "start": "2035380",
    "end": "2044380"
  },
  {
    "text": "bigger or higher than uh my current state of I'm updating from",
    "start": "2044380",
    "end": "2052320"
  },
  {
    "text": "and then when we get only the filter one we look for the lowest value which is the closest to our",
    "start": "2052720",
    "end": "2059618"
  },
  {
    "text": "to our node and select it and build identifier from it of type",
    "start": "2059619",
    "end": "2065320"
  },
  {
    "text": "Delta so this is your Delta you need to download but",
    "start": "2065320",
    "end": "2070780"
  },
  {
    "text": "if we are if we are doing a snapshot update",
    "start": "2070780",
    "end": "2076898"
  },
  {
    "text": "but there is no snapshot like full update we look also into Delta links",
    "start": "2076899",
    "end": "2082839"
  },
  {
    "text": "we'll also look for the lowest value and but we are looking at the distance",
    "start": "2082839",
    "end": "2088898"
  },
  {
    "text": "to snapshot this is called projection and uh with this we will get the lowest",
    "start": "2088899",
    "end": "2096760"
  },
  {
    "text": "uh timestamp of Delta link oh shortest path to Delta link because",
    "start": "2096760",
    "end": "2104260"
  },
  {
    "text": "this is just like maybe maybe number of bytes you need to download",
    "start": "2104260",
    "end": "2110140"
  },
  {
    "text": "or number of jumps whatever you optimize for and then we will take hash and create a Delta identifier and I'll tell",
    "start": "2110140",
    "end": "2118780"
  },
  {
    "text": "our user to download Delta from this Delta link okay so you can actually represent",
    "start": "2118780",
    "end": "2126220"
  },
  {
    "start": "2122000",
    "end": "2476000"
  },
  {
    "text": "path to graph as a vector of any object",
    "start": "2126220",
    "end": "2131280"
  },
  {
    "text": "and then we need function which will text identifier",
    "start": "2132040",
    "end": "2138040"
  },
  {
    "text": "of your updates Target and give you part you need to go",
    "start": "2138040",
    "end": "2143740"
  },
  {
    "text": "to find paths from the uh object you are you are going update to",
    "start": "2143740",
    "end": "2150359"
  },
  {
    "text": "into a state you are updating from",
    "start": "2150359",
    "end": "2155819"
  },
  {
    "text": "so and now we need to do asynchronously because you are actually talking about downloading something from internet or",
    "start": "2156460",
    "end": "2163119"
  },
  {
    "text": "stock from storage at least so let's start like if function or convert to object which take identifier",
    "start": "2163119",
    "end": "2170200"
  },
  {
    "text": "and a function or which asynchronously",
    "start": "2170200",
    "end": "2175420"
  },
  {
    "text": "download bytes you provide it because that's not like uh that shouldn't be delivered by a library",
    "start": "2175420",
    "end": "2182079"
  },
  {
    "text": "that should be the developed by your application because your application on your platform needs your own function to",
    "start": "2182079",
    "end": "2187900"
  },
  {
    "text": "interact with IO and uh identifier the function and it",
    "start": "2187900",
    "end": "2193480"
  },
  {
    "text": "will return task which will return any object foreign",
    "start": "2193480",
    "end": "2200520"
  },
  {
    "text": "this will only like oh ask for downloading the object bitcovered then it will unwrap it and a",
    "start": "2201280",
    "end": "2209020"
  },
  {
    "text": "return or a result everything is asynchronous as in Spanish function needs to like be",
    "start": "2209020",
    "end": "2215920"
  },
  {
    "text": "invocable return or if you call it with identifier it would it's need to return available for",
    "start": "2215920",
    "end": "2223660"
  },
  {
    "text": "something this is not part of Korean standard library but there is multiple libraries you can use like CPP color",
    "start": "2223660",
    "end": "2232140"
  },
  {
    "text": "or um whatever anyway",
    "start": "2232140",
    "end": "2238480"
  },
  {
    "text": "and it will give you a return so you will fetch bites based on the identifier",
    "start": "2238480",
    "end": "2244320"
  },
  {
    "text": "so this uh clothing will pause until it's downloaded",
    "start": "2244320",
    "end": "2251079"
  },
  {
    "text": "and when it's done already it will be resumed it will be unwrapped and it will it will return the unwrapped object from",
    "start": "2251079",
    "end": "2257440"
  },
  {
    "text": "bias you will get the visualized object and validate it otherwise that can be exceptional also",
    "start": "2257440",
    "end": "2264880"
  },
  {
    "text": "and your dental function can be just calling Guru or calling uh",
    "start": "2264880",
    "end": "2270760"
  },
  {
    "text": "fetch on uh IELTS or whatever so fetch path is a function which will",
    "start": "2270760",
    "end": "2277660"
  },
  {
    "text": "take current state you are in which is like we are updating from",
    "start": "2277660",
    "end": "2284380"
  },
  {
    "text": "hash or name of the target can be hash of the state or it can be named of the",
    "start": "2284380",
    "end": "2289420"
  },
  {
    "text": "areas and it uh it will give it function which will download bytes for you nothing else",
    "start": "2289420",
    "end": "2297280"
  },
  {
    "text": "and it will give you part you are updating so the result part is just Vector of",
    "start": "2297280",
    "end": "2304420"
  },
  {
    "text": "object then uh there is a function which will uh",
    "start": "2304420",
    "end": "2309520"
  },
  {
    "text": "which returning is returning task but it's not cool routine it's just blink wrapping or",
    "start": "2309520",
    "end": "2315160"
  },
  {
    "text": "it creates a Lambda if you create if you ask for an identifier it will give you object",
    "start": "2315160",
    "end": "2321339"
  },
  {
    "text": "by using the your function to download an identifier it's just like small wrapper",
    "start": "2321339",
    "end": "2327900"
  },
  {
    "text": "so like blob download it and that's all and then",
    "start": "2328000",
    "end": "2333940"
  },
  {
    "text": "uh",
    "start": "2333940",
    "end": "2336720"
  },
  {
    "text": "if you're asking to download it to latest hash you already already in",
    "start": "2339339",
    "end": "2346140"
  },
  {
    "text": "nothing needs to be happened because you're already in so it will add to an empty path because",
    "start": "2346180",
    "end": "2352480"
  },
  {
    "text": "path from here to here is empty but if not then uh you need to convert",
    "start": "2352480",
    "end": "2359740"
  },
  {
    "text": "the identifier of the target if it's Alias it will or convert into",
    "start": "2359740",
    "end": "2365560"
  },
  {
    "text": "hash of the name if it's meta hash of the state it will convert into",
    "start": "2365560",
    "end": "2371740"
  },
  {
    "text": "hash of the metadata then download the object wait uh until",
    "start": "2371740",
    "end": "2377500"
  },
  {
    "text": "it's finished and then you place the object into path as the first step",
    "start": "2377500",
    "end": "2383800"
  },
  {
    "text": "and then you will repeat and you always look at the last piece like last part of the path",
    "start": "2383800",
    "end": "2391900"
  },
  {
    "text": "and if it's a metadata then uh and you have current state and",
    "start": "2391900",
    "end": "2398079"
  },
  {
    "text": "uh current state and metadata hash are same you are finished because you already found part",
    "start": "2398079",
    "end": "2404380"
  },
  {
    "text": "to your state but if not you need to select next with",
    "start": "2404380",
    "end": "2409720"
  },
  {
    "text": "function I showed before from current metadata and grandstate it will download the",
    "start": "2409720",
    "end": "2416680"
  },
  {
    "text": "object collaborate on it and place back into vector",
    "start": "2416680",
    "end": "2421839"
  },
  {
    "text": "and repeat but if you got Delta you will place a previous metadata from",
    "start": "2421839",
    "end": "2428680"
  },
  {
    "text": "the Delta itself on the apart you don't need to download anything because you already",
    "start": "2428680",
    "end": "2433839"
  },
  {
    "text": "have the metadata as part of the delta and continue if you get snapshot",
    "start": "2433839",
    "end": "2439780"
  },
  {
    "text": "snapshot is always about end of the part because that's all you need for the update then you return bad",
    "start": "2439780",
    "end": "2447280"
  },
  {
    "text": "that's all you finish your uh like you're iterating through it and you",
    "start": "2447280",
    "end": "2452320"
  },
  {
    "text": "found the path from the",
    "start": "2452320",
    "end": "2456180"
  },
  {
    "text": "you are updating from and you are doing uh backward in time",
    "start": "2458880",
    "end": "2464920"
  },
  {
    "text": "until you find the path so apart from nml is just State and blue",
    "start": "2464920",
    "end": "2471099"
  },
  {
    "text": "spot for mm and it's just Delta Delta Delta metadata and you are finished",
    "start": "2471099",
    "end": "2477099"
  },
  {
    "start": "2476000",
    "end": "2510000"
  },
  {
    "text": "but in in reverse anyway so we have application which is in some",
    "start": "2477099",
    "end": "2482560"
  },
  {
    "text": "state which is some subject if we download",
    "start": "2482560",
    "end": "2487960"
  },
  {
    "text": "we got bad and we need to apply it in reverse order to get another state and be applying",
    "start": "2487960",
    "end": "2495640"
  },
  {
    "text": "Delta we will get new subjects and we can apply another Delta we will",
    "start": "2495640",
    "end": "2501400"
  },
  {
    "text": "get another subject and when you are finished the state is Grand state of the",
    "start": "2501400",
    "end": "2507280"
  },
  {
    "text": "application the update State function",
    "start": "2507280",
    "end": "2513339"
  },
  {
    "start": "2510000",
    "end": "2625000"
  },
  {
    "text": "just takes the atomic sharep pointer",
    "start": "2513339",
    "end": "2518560"
  },
  {
    "text": "to current state because you want to be able to switch it atomically",
    "start": "2518560",
    "end": "2524380"
  },
  {
    "text": "Target of the update and fetch function which will download bytes",
    "start": "2524380",
    "end": "2530200"
  },
  {
    "text": "for you as I show you and it will return uh update results which is like information if update was",
    "start": "2530200",
    "end": "2536800"
  },
  {
    "text": "successful or not so you will load the atomic pointer of",
    "start": "2536800",
    "end": "2541960"
  },
  {
    "text": "current state so you will get copy of the sharepointer",
    "start": "2541960",
    "end": "2546599"
  },
  {
    "text": "10 you will fetch the path the function we did",
    "start": "2548140",
    "end": "2553359"
  },
  {
    "text": "wait until it's finished and our 10 when you are finished you",
    "start": "2553359",
    "end": "2559720"
  },
  {
    "text": "pipe it and fold it from right which is like a stud accumulator but from other from right not from left",
    "start": "2559720",
    "end": "2567400"
  },
  {
    "text": "and apply which is a new type apply update",
    "start": "2567400",
    "end": "2572800"
  },
  {
    "text": "Straight which is something which you're describing how to apply patch and that's how you will get new state",
    "start": "2572800",
    "end": "2580720"
  },
  {
    "text": "10. if alt state is uh not a null pointer so I mean we can check",
    "start": "2580720",
    "end": "2587500"
  },
  {
    "text": "and new state is actually the same as the old State we just tell user that if",
    "start": "2587500",
    "end": "2592839"
  },
  {
    "text": "we already update a VR on the latest version actually nothing happened maybe I got empty pal",
    "start": "2592839",
    "end": "2600099"
  },
  {
    "text": "but actually I didn't create any copy because everything is just shared pointer so I didn't create any copy it's",
    "start": "2600099",
    "end": "2606040"
  },
  {
    "text": "fine otherwise I will automatically store the new state and propagate I actually update you to",
    "start": "2606040",
    "end": "2613960"
  },
  {
    "text": "latest version and you can react on that maybe maybe",
    "start": "2613960",
    "end": "2619300"
  },
  {
    "text": "store or store the object into persistent storage Maybe",
    "start": "2619300",
    "end": "2626079"
  },
  {
    "start": "2625000",
    "end": "2749000"
  },
  {
    "text": "and apply uh functor let's say it's just uh some",
    "start": "2626079",
    "end": "2634359"
  },
  {
    "text": "template for update rates update rates is a trade of your or type you are updating",
    "start": "2634359",
    "end": "2640900"
  },
  {
    "text": "because this update system can work with any data structure you want it can be Vector of bytes it can be",
    "start": "2640900",
    "end": "2647020"
  },
  {
    "text": "three whatever you just need to describe how you update it",
    "start": "2647020",
    "end": "2653160"
  },
  {
    "text": "and uh if you get snapshot I can actually ignore the previous state",
    "start": "2653380",
    "end": "2659079"
  },
  {
    "text": "you will get in your state and it's just easy because you just visualize the snapshot by your provider",
    "start": "2659079",
    "end": "2665920"
  },
  {
    "text": "function because I don't know how you sterilize your snapshot and take uh empty metadata",
    "start": "2665920",
    "end": "2672400"
  },
  {
    "text": "and a return State you are in this is your new state",
    "start": "2672400",
    "end": "2677800"
  },
  {
    "text": "if you get Delta you need to have previous state",
    "start": "2677800",
    "end": "2682900"
  },
  {
    "text": "so you apply with from trades apply patch function to your subject",
    "start": "2682900",
    "end": "2689440"
  },
  {
    "text": "patch and create new state hit make sure",
    "start": "2689440",
    "end": "2695800"
  },
  {
    "text": "return it again with empty metadata because all the all parts because you when you",
    "start": "2695800",
    "end": "2701619"
  },
  {
    "text": "download it you first time you always download metadata objects so all parts if you",
    "start": "2701619",
    "end": "2707680"
  },
  {
    "text": "apply it in reverse order will end with metadata so you can actually check if you are in the latest state",
    "start": "2707680",
    "end": "2714819"
  },
  {
    "text": "so at the end of the path there must be always metadata you can check against",
    "start": "2714819",
    "end": "2720280"
  },
  {
    "text": "which means you can calculate hash of your subject and it needs to be equal to what you are",
    "start": "2720280",
    "end": "2727300"
  },
  {
    "text": "expecting if not it's exceptional it's Error otherwise",
    "start": "2727300",
    "end": "2733240"
  },
  {
    "text": "there is a new state which is which sharing the subject with previous one",
    "start": "2733240",
    "end": "2739180"
  },
  {
    "text": "but the metadata are checked and I know I can provide it to you",
    "start": "2739180",
    "end": "2745480"
  },
  {
    "text": "and that's all okay and update look like this it's just uh",
    "start": "2745480",
    "end": "2753099"
  },
  {
    "start": "2749000",
    "end": "2866000"
  },
  {
    "text": "some example you need to somehow calculate hash for consistency",
    "start": "2753099",
    "end": "2759280"
  },
  {
    "text": "you need an electron some hash you need to calculate difference between two states when you are building the graph",
    "start": "2759280",
    "end": "2766540"
  },
  {
    "text": "you actually share the code in producer and in consumer which is awesome another tune just blob of byte",
    "start": "2766540",
    "end": "2774819"
  },
  {
    "text": "and you you need to be able to apply the difference so you will take the subject and apply the difference from the",
    "start": "2774819",
    "end": "2781000"
  },
  {
    "text": "previous function and we will get new subjects and you also should be able to setralize",
    "start": "2781000",
    "end": "2786400"
  },
  {
    "text": "it and set analyze it so it can be stored okay",
    "start": "2786400",
    "end": "2792760"
  },
  {
    "text": "and user facing API how you use it again we have application",
    "start": "2792760",
    "end": "2799660"
  },
  {
    "text": "which is in some State and on some subject I start updating",
    "start": "2799660",
    "end": "2805720"
  },
  {
    "text": "asynchronously maybe in different thread and it starts updating so meanwhile I will get subject to but",
    "start": "2805720",
    "end": "2813040"
  },
  {
    "text": "uh suddenly you said do something and do something some process",
    "start": "2813040",
    "end": "2819460"
  },
  {
    "text": "needs the data I'm updating but I'm still in process so the user will get",
    "start": "2819460",
    "end": "2826240"
  },
  {
    "text": "reference to subject the old one and meanwhile I can do update",
    "start": "2826240",
    "end": "2832300"
  },
  {
    "text": "but when I will switch them I will get a dangling reference that's",
    "start": "2832300",
    "end": "2838359"
  },
  {
    "text": "the reason I'm using shared pointer so it will never happen",
    "start": "2838359",
    "end": "2843880"
  },
  {
    "text": "as long as you are holding the sharep pointer inside your process which is using the",
    "start": "2843880",
    "end": "2849460"
  },
  {
    "text": "data it will never dangle so when your task is finished",
    "start": "2849460",
    "end": "2856300"
  },
  {
    "text": "there can be another task which can start with the latest data meanwhile you can cancel the old one if you want",
    "start": "2856300",
    "end": "2862720"
  },
  {
    "text": "but it will never dangle so I call it stream",
    "start": "2862720",
    "end": "2868540"
  },
  {
    "start": "2866000",
    "end": "3041000"
  },
  {
    "text": "because it's like stream data and it's just class which contains",
    "start": "2868540",
    "end": "2874720"
  },
  {
    "text": "Atomic shared pointer of the state which is owning the type I'm updating",
    "start": "2874720",
    "end": "2881560"
  },
  {
    "text": "the function updates tool I showed you before then there is a function get which will",
    "start": "2881560",
    "end": "2887319"
  },
  {
    "text": "give you sharepointer of the subject itself if there if there is any if there is",
    "start": "2887319",
    "end": "2893380"
  },
  {
    "text": "none it will give you no pointer obviously and uh also you can ask it to serialize",
    "start": "2893380",
    "end": "2900460"
  },
  {
    "text": "current or state so the user can ask the components to",
    "start": "2900460",
    "end": "2905700"
  },
  {
    "text": "serialize it so it can be stored on persistent storage for if you want to",
    "start": "2905700",
    "end": "2911079"
  },
  {
    "text": "do restart or whatever and serialized State function is just",
    "start": "2911079",
    "end": "2916380"
  },
  {
    "text": "takes the grants some state if it's empty it's exception",
    "start": "2916380",
    "end": "2922660"
  },
  {
    "text": "it must own the original data of metadata so it must be it must be valid state",
    "start": "2922660",
    "end": "2929160"
  },
  {
    "text": "but it will always be a valid State and then you just concatenate somehow the metadata and the subject itself called",
    "start": "2929260",
    "end": "2937960"
  },
  {
    "text": "the trades to federalize it and you are done visualization is similar you will get",
    "start": "2937960",
    "end": "2944319"
  },
  {
    "text": "input if it's empty this resulting state will be null",
    "start": "2944319",
    "end": "2950440"
  },
  {
    "text": "pointer can you somehow split it uh create a path we will from displayed",
    "start": "2950440",
    "end": "2958839"
  },
  {
    "text": "from the content you will create a new snapshot just like ad hoc snapshot there",
    "start": "2958839",
    "end": "2965079"
  },
  {
    "text": "and uh it will unwrapy metadata because they are exactly the same as you",
    "start": "2965079",
    "end": "2971440"
  },
  {
    "text": "download them political create the evalid object so you get part and then you fold it",
    "start": "2971440",
    "end": "2978160"
  },
  {
    "text": "from the left to right exactly same as we are doing update against empty state",
    "start": "2978160",
    "end": "2985300"
  },
  {
    "text": "and a bit Grant update trades and you will get the latest uh State you are in",
    "start": "2985300",
    "end": "2990940"
  },
  {
    "text": "and your application will actually validate it for you so if someone will tamper with the data stored on disk you",
    "start": "2990940",
    "end": "2998200"
  },
  {
    "text": "will detect it it's using exactly the same code as the update mechanism",
    "start": "2998200",
    "end": "3004279"
  },
  {
    "text": "Constructor which is just default and that is the Constructor which will",
    "start": "3005780",
    "end": "3011099"
  },
  {
    "text": "take optional of span of bytes if you provide it",
    "start": "3011099",
    "end": "3016260"
  },
  {
    "text": "it will visualize them and create a run-in state you are supposed to be in",
    "start": "3016260",
    "end": "3021800"
  },
  {
    "text": "it's optional because you can provide new or new opt if maybe your function",
    "start": "3021800",
    "end": "3028400"
  },
  {
    "text": "let give me the latest uh store data won't download anything it will return",
    "start": "3028400",
    "end": "3033960"
  },
  {
    "text": "just move out because it's it's correct State it's not exception so you can just let's pass it through",
    "start": "3033960",
    "end": "3041240"
  },
  {
    "text": "okay and how you use it you have like you are in Main",
    "start": "3041760",
    "end": "3048000"
  },
  {
    "text": "you have this stream and in this case I'm updating map of string to strings with some traits to update them",
    "start": "3048000",
    "end": "3055380"
  },
  {
    "text": "it's like some sort of database maybe config database and either function which will download uh which will load",
    "start": "3055380",
    "end": "3062520"
  },
  {
    "text": "file config bin and provide it to me at the start then I",
    "start": "3062520",
    "end": "3068460"
  },
  {
    "text": "have a quality in which will do the update for me to the latest latest Alias or Tech if you want",
    "start": "3068460",
    "end": "3076220"
  },
  {
    "text": "and if you if actually I did update during the update and uh I'm not on the latest version I just store the file so",
    "start": "3076619",
    "end": "3084180"
  },
  {
    "text": "next time I'll run the application it will be on the latest version so it",
    "start": "3084180",
    "end": "3090000"
  },
  {
    "text": "at this start I will initialize a synchronous update I can wait for it",
    "start": "3090000",
    "end": "3095819"
  },
  {
    "text": "and also I with some scheduler I can plan uh the update to be checked every",
    "start": "3095819",
    "end": "3101400"
  },
  {
    "text": "10 minutes maybe maybe every five minutes and then whenever I do something with",
    "start": "3101400",
    "end": "3107760"
  },
  {
    "text": "the uh I want to do something with the uh subject I'm updating",
    "start": "3107760",
    "end": "3113040"
  },
  {
    "text": "I just uh need to get a Handler sharp pointer of",
    "start": "3113040",
    "end": "3118680"
  },
  {
    "text": "it and hold it as long as I need it and access it as a reference",
    "start": "3118680",
    "end": "3124380"
  },
  {
    "text": "and then I do the work so but the essential part for your application is actually",
    "start": "3124380",
    "end": "3131280"
  },
  {
    "text": "the stream of some object in this case Vector of bytes and Trace may be by as",
    "start": "3131280",
    "end": "3136380"
  },
  {
    "text": "diff and getting the handle everything else is not specific for your uh object so it",
    "start": "3136380",
    "end": "3144660"
  },
  {
    "text": "can be a one-time code for downloading one time code for storing uh persistent files and",
    "start": "3144660",
    "end": "3151020"
  },
  {
    "text": "nothing else that's only these two lines of code you need to use in your code in order to update it",
    "start": "3151020",
    "end": "3159780"
  },
  {
    "text": "yeah BS diff or it's just like the library so it's just wrapper so it calculates the",
    "start": "3159780",
    "end": "3166500"
  },
  {
    "text": "hash of the subject it calculate the difference of the two",
    "start": "3166500",
    "end": "3171780"
  },
  {
    "text": "states apply the difference serialize the satellites by just copying it and that's all",
    "start": "3171780",
    "end": "3177480"
  },
  {
    "text": "so I told you at the beginning I need to update an object whatever object",
    "start": "3177480",
    "end": "3183059"
  },
  {
    "text": "on tens of millions of clients every few minutes actually kind of light too I showed you",
    "start": "3183059",
    "end": "3189900"
  },
  {
    "text": "only part of it because everything can be done on client which is much cheaper and now the",
    "start": "3189900",
    "end": "3196020"
  },
  {
    "text": "problem is actually I just need to deliver hash value 32 bytes to author",
    "start": "3196020",
    "end": "3201720"
  },
  {
    "text": "which is just grab ahead to tens tens of millions of clients",
    "start": "3201720",
    "end": "3206760"
  },
  {
    "text": "which is much simple tasks to do actually",
    "start": "3206760",
    "end": "3210920"
  },
  {
    "text": "so I showed you today how you can model algorithm into code you have verb nouns",
    "start": "3212099",
    "end": "3219680"
  },
  {
    "text": "it's uh if you use strong types it's easy to reason about what you are doing",
    "start": "3220020",
    "end": "3225780"
  },
  {
    "text": "and you cannot actually usually do the wrong way because it won't allow you",
    "start": "3225780",
    "end": "3231000"
  },
  {
    "text": "also C plus can be fun I'm not saying it lightly on my Twitter because I start learning JavaScript but",
    "start": "3231000",
    "end": "3237839"
  },
  {
    "text": "yeah and uh use cases you can as I'm doing",
    "start": "3237839",
    "end": "3243359"
  },
  {
    "text": "distributed or AV signatures to our clients every few minutes",
    "start": "3243359",
    "end": "3249059"
  },
  {
    "text": "but you can also use it in small small scale to synchronize configuration",
    "start": "3249059",
    "end": "3254819"
  },
  {
    "text": "across the cluster of servers or you can distribute machine learning models to your application so it helps",
    "start": "3254819",
    "end": "3261900"
  },
  {
    "text": "run on clients privately you can actually update anything",
    "start": "3261900",
    "end": "3268400"
  },
  {
    "text": "structure anymore and some of you maybe guessed that but",
    "start": "3268400",
    "end": "3275099"
  },
  {
    "text": "let's say we have map of path and bytes",
    "start": "3275099",
    "end": "3283020"
  },
  {
    "text": "and this we need to like create update States for such uh virtual file system",
    "start": "3283020",
    "end": "3289920"
  },
  {
    "text": "which is just calculating hash of the file system is a hash of all names and contents and then hash of the all hashes",
    "start": "3289920",
    "end": "3299960"
  },
  {
    "text": "the difference is just like iterating over uh all additional removal and changes and creating batch of it",
    "start": "3300119",
    "end": "3308720"
  },
  {
    "text": "and somehow civilize it whatever that's not important and compressing it",
    "start": "3308720",
    "end": "3314220"
  },
  {
    "text": "applying difference is just visualizing the patch and uh",
    "start": "3314220",
    "end": "3320520"
  },
  {
    "text": "getting copy of current virtual file system I strongly recommend to use copy",
    "start": "3320520",
    "end": "3325619"
  },
  {
    "text": "and write data structure and applying the uh Difference by addition by just inserting into map",
    "start": "3325619",
    "end": "3333000"
  },
  {
    "text": "the removal is just a larger Erasure from the map change is just I got a key look for it and change the content of",
    "start": "3333000",
    "end": "3339720"
  },
  {
    "text": "the value and yeah and civilization is just I will",
    "start": "3339720",
    "end": "3345480"
  },
  {
    "text": "serialize and compress it personalization is exactly opposite",
    "start": "3345480",
    "end": "3352200"
  },
  {
    "text": "and that's how you will get make your own simple gate thank you",
    "start": "3352200",
    "end": "3358640"
  },
  {
    "text": "[Applause]",
    "start": "3358960",
    "end": "3364319"
  },
  {
    "text": "okay uh we have a bit of time so if you have any question",
    "start": "3364319",
    "end": "3369359"
  },
  {
    "text": "if you are afraid to ask publicly you can approach me",
    "start": "3369359",
    "end": "3374819"
  },
  {
    "text": "fine and otherwise thank you",
    "start": "3374819",
    "end": "3380780"
  }
]