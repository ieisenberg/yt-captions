[
  {
    "start": "0",
    "end": "58000"
  },
  {
    "text": "okay how we doing hey hazard ones first",
    "start": "5779",
    "end": "12090"
  },
  {
    "text": "day going good good first day of NDC I guess there were workshops but first full Dave in DC when you in the end of",
    "start": "12090",
    "end": "17640"
  },
  {
    "text": "the day everybody everybody having fun tired a lot of learning everything good all of the above good alright so my name",
    "start": "17640",
    "end": "25320"
  },
  {
    "text": "is Jeff Strauss I'm from st. Louis Missouri which is like right smack dab",
    "start": "25320",
    "end": "31289"
  },
  {
    "text": "in the middle of the United States I was just telling my two friends up here also",
    "start": "31289",
    "end": "36329"
  },
  {
    "text": "speakers lemon and and Jennifer are also from the Midwest and I was like oh it just was about 1:20 in the morning at",
    "start": "36329",
    "end": "42030"
  },
  {
    "text": "home right now I shouldn't have thought about that like right now but we're going to talk about JavaScript and kind",
    "start": "42030",
    "end": "49440"
  },
  {
    "text": "of where it is today where it's going in the future and kind of how we how we see",
    "start": "49440",
    "end": "55079"
  },
  {
    "text": "where we get there the the general theme of the talk is that JavaScript kind of keeps on expanding it just keeps growing",
    "start": "55079",
    "end": "62130"
  },
  {
    "start": "58000",
    "end": "87000"
  },
  {
    "text": "there seems to be new stuff all the time and it wasn't always this way right I mean for the for the most part",
    "start": "62130",
    "end": "69539"
  },
  {
    "text": "over the the course of like the lifespan of the language it seemed like there'd be leaps and bounds of like you know new",
    "start": "69539",
    "end": "74939"
  },
  {
    "text": "stuff for a while and then you know years of stagnancy right with the language and then all the sudden would",
    "start": "74939",
    "end": "80009"
  },
  {
    "text": "be maybe some more stuff but all of a sudden these days the language is expanding all the time so we're gonna do",
    "start": "80009",
    "end": "85439"
  },
  {
    "text": "over the next hour it's all about a few different things we're debates are gonna say you know what's happening right now",
    "start": "85439",
    "end": "91279"
  },
  {
    "start": "87000",
    "end": "110000"
  },
  {
    "text": "right what is the current state of the language and the spec what are some the new core language features we're not",
    "start": "91279",
    "end": "97289"
  },
  {
    "text": "talking about frameworks or anything like that just core JavaScript why is it",
    "start": "97289",
    "end": "102329"
  },
  {
    "text": "the way it is which is always kind of interesting question with JavaScript and then how do we see moving forward in the",
    "start": "102329",
    "end": "108450"
  },
  {
    "text": "future now before we do that a quick sort of a side we use these terms sort",
    "start": "108450",
    "end": "114810"
  },
  {
    "start": "110000",
    "end": "129000"
  },
  {
    "text": "of interchangeably I mean I do very frequently I talk about JavaScript the talk is called JavaScript futures but",
    "start": "114810",
    "end": "120329"
  },
  {
    "text": "really what we're talking about is Ekman script and they're not the same thing right ECMO script is the language",
    "start": "120329",
    "end": "125909"
  },
  {
    "text": "specification javascript is a language implementation so we talked about javascript what we're talking about is",
    "start": "125909",
    "end": "132090"
  },
  {
    "start": "129000",
    "end": "162000"
  },
  {
    "text": "not only even one implementation but many right it's an implementation of the standard and for those of us who have",
    "start": "132090",
    "end": "138030"
  },
  {
    "text": "been around you know a long time writing applications for the web especially with JavaScript we know that the JavaScript you write",
    "start": "138030",
    "end": "143970"
  },
  {
    "text": "for Chrome maybe doesn't work exactly the same way it does on mobile Safari or Firefox like it probably never had a",
    "start": "143970",
    "end": "150569"
  },
  {
    "text": "chance of working on Internet Explorer in the first place and so that's because all those different browsers and",
    "start": "150569",
    "end": "157920"
  },
  {
    "text": "environments have their own implementations of the language but what we're talking about is ECMO script there",
    "start": "157920",
    "end": "163620"
  },
  {
    "start": "162000",
    "end": "211000"
  },
  {
    "text": "are implementations of that standard now a lot of people didn't think about ECMO script or talked about it really until a",
    "start": "163620",
    "end": "168810"
  },
  {
    "text": "few years ago when es6 ACMA script 2015",
    "start": "168810",
    "end": "174420"
  },
  {
    "text": "was released it was a major jump forward at the language almost felt like something brand-new right there was all",
    "start": "174420",
    "end": "179730"
  },
  {
    "text": "sorts of stuff going on destructuring and classes the promises api a whole lot",
    "start": "179730",
    "end": "186569"
  },
  {
    "text": "of stuff that changed the way the road JavaScript happened just a few years ago there was a lot to sort of absorb a lot",
    "start": "186569",
    "end": "191970"
  },
  {
    "text": "to think about a lot of ways to think how we could improve our applications but then like the next year there was",
    "start": "191970",
    "end": "200099"
  },
  {
    "text": "more and the next year there's more and again this year there was more it keeps going this is kind of a new thing for us",
    "start": "200099",
    "end": "206549"
  },
  {
    "text": "than JavaScript land right and really what ends up happening is we spend a lot of time thinking about yes next right",
    "start": "206549",
    "end": "214079"
  },
  {
    "start": "211000",
    "end": "240000"
  },
  {
    "text": "what's what's coming how do we plan how do we know where we're going to go and build our web applications from like",
    "start": "214079",
    "end": "219870"
  },
  {
    "text": "Nick shows me something new that you know invalidates or changing the way we're doing things today and it's happening on a quick cycle yeah the good",
    "start": "219870",
    "end": "227459"
  },
  {
    "text": "news is and we're talking about how that happens and how these new features come into being but the good news is when we",
    "start": "227459",
    "end": "232470"
  },
  {
    "text": "think about es next unlike moving from a framework like an angular to react to a view we're not talking about that we're",
    "start": "232470",
    "end": "239549"
  },
  {
    "text": "talking about an evolution of the language it's just liking a new version to c-sharp and the people behind the",
    "start": "239549",
    "end": "246180"
  },
  {
    "start": "240000",
    "end": "271000"
  },
  {
    "text": "spec the people who are actually making the decisions about new features are very good about maybe they deprecated",
    "start": "246180",
    "end": "252629"
  },
  {
    "text": "something but they very rarely have breaking changes in the language so what that means is if you see something either in this talk or you see something",
    "start": "252629",
    "end": "260340"
  },
  {
    "text": "you're reading about new features are coming into JavaScript just play around pick something new and try it if it",
    "start": "260340",
    "end": "265560"
  },
  {
    "text": "works for you great if it doesn't fit don't use it okay now",
    "start": "265560",
    "end": "271030"
  },
  {
    "start": "271000",
    "end": "289000"
  },
  {
    "text": "we're not gonna go all the way back to es6 but we are going to talk about this year spec and last year's so a few of",
    "start": "271030",
    "end": "276979"
  },
  {
    "text": "the things that are new to JavaScript starting first with es 2017 which officially became the standard in June",
    "start": "276979",
    "end": "283340"
  },
  {
    "text": "of last year so some of these features have been around for a little while now and you may have seen them already but if not a couple new things first point",
    "start": "283340",
    "end": "291650"
  },
  {
    "start": "289000",
    "end": "302000"
  },
  {
    "text": "though and I already said this before right in 2015 had a ton of stuff right",
    "start": "291650",
    "end": "296719"
  },
  {
    "text": "ton of stuff a lot of new things like the classes and the promises and all that nice thing about having annual",
    "start": "296719",
    "end": "303169"
  },
  {
    "start": "302000",
    "end": "319000"
  },
  {
    "text": "releases is that there's much more bite-sized what happened in 16 17 and 18",
    "start": "303169",
    "end": "309680"
  },
  {
    "text": "is a handful of new things some of them are big changes but there's not all that many things to pay attention to because",
    "start": "309680",
    "end": "314870"
  },
  {
    "text": "since we know we have an annual cycle we only get a few features at a time first",
    "start": "314870",
    "end": "319939"
  },
  {
    "start": "319000",
    "end": "336000"
  },
  {
    "text": "thing object static methods so who's familiar with object ease does anyone use that before a lot of it",
    "start": "319939",
    "end": "326930"
  },
  {
    "text": "good alright so on Turkey's right we can take an object call object Aki's on it and we get what we get an array of the",
    "start": "326930",
    "end": "333319"
  },
  {
    "text": "string representation of all the property names of that object but we never had before was object out values which is the other half of that there",
    "start": "333319",
    "end": "340279"
  },
  {
    "start": "336000",
    "end": "386000"
  },
  {
    "text": "was no way to take a given object literal and pull out just the values of the things which at first glance may not seem that useful but we'll see in a",
    "start": "340279",
    "end": "346219"
  },
  {
    "text": "minute that it that it kind of enables some neat functionality so the way this works is very simple say we have I this",
    "start": "346219",
    "end": "352580"
  },
  {
    "text": "is I just remembered and fixed this like right before I came down my son is my son Kelly he turns 7 on Friday he's",
    "start": "352580",
    "end": "358969"
  },
  {
    "text": "actually seen this talk before and it used to say 6 and he saw it and then he complained and he said no dad I'm 6 and",
    "start": "358969",
    "end": "364279"
  },
  {
    "text": "a half so I so I had so I had to fix it and he turned 7 this week so you got a",
    "start": "364279",
    "end": "369860"
  },
  {
    "text": "boy you call object I'll use and you don't get the property names back at all we just get an array of the values of",
    "start": "369860",
    "end": "375949"
  },
  {
    "text": "those things and they're not string representations right like if it's a number we get the number it's the number 7 and his name Keller not earth",
    "start": "375949",
    "end": "383779"
  },
  {
    "text": "shattering right however we also have a new new functional object entries object",
    "start": "383779",
    "end": "390620"
  },
  {
    "start": "386000",
    "end": "397000"
  },
  {
    "text": "got entries isn't it take that object literal and give you an array of arrays and look kind of like this this my my",
    "start": "390620",
    "end": "399529"
  },
  {
    "start": "397000",
    "end": "444000"
  },
  {
    "text": "daughter Madeleine was three and a half you called object out entries and we get both things we get an array and each entry each",
    "start": "399529",
    "end": "407369"
  },
  {
    "text": "element at array is itself an array that has the string representation of the property name and the value itself note",
    "start": "407369",
    "end": "413309"
  },
  {
    "text": "it is it it's all arrays there's a reason for that there's a reason they do it this way consider consider we put the",
    "start": "413309",
    "end": "420479"
  },
  {
    "text": "whole family together arrays are iterable people familiar with the",
    "start": "420479",
    "end": "426389"
  },
  {
    "text": "concept of iterable of is the interval protocol is added with es2015 so things",
    "start": "426389",
    "end": "431789"
  },
  {
    "text": "like arrays maps and flat maps know that our iterable we can see you say the four",
    "start": "431789",
    "end": "436830"
  },
  {
    "text": "of loop on them you can't do that with an object we can't iterate easily over",
    "start": "436830",
    "end": "441839"
  },
  {
    "text": "an object but when we take object out entries that's an array which means that",
    "start": "441839",
    "end": "451020"
  },
  {
    "start": "444000",
    "end": "479000"
  },
  {
    "text": "when we serialize that thing out and flatten it now we have a known array that looks a certain way and we can loop",
    "start": "451020",
    "end": "457289"
  },
  {
    "text": "over that thing which is a for loop we D structure it right into K and V and now we have an instance variable a key and a",
    "start": "457289",
    "end": "463919"
  },
  {
    "text": "value in Caesarea belong every iteration over that loop and I can iterate over all the innumerable properties my object very easily without having to say like",
    "start": "463919",
    "end": "469830"
  },
  {
    "text": "say object out keys and go back and then use key based access to go back in and pull the thing out I can just iterate",
    "start": "469830",
    "end": "474930"
  },
  {
    "text": "over my object it's kind of a cool little construct has three string",
    "start": "474930",
    "end": "481529"
  },
  {
    "start": "479000",
    "end": "546000"
  },
  {
    "text": "padding who remembers left pad yeah for those who don't left pad was that",
    "start": "481529",
    "end": "489059"
  },
  {
    "text": "there's less so much about like less about a feature about a new feature cuz it's just string padding but it kind of",
    "start": "489059",
    "end": "494729"
  },
  {
    "text": "shows how the language of all things be reactionary to certain things right so a few years ago I think there's a little over two years ago now there was this",
    "start": "494729",
    "end": "500759"
  },
  {
    "text": "library left pad it still does exist but it was one of I don't know a hundred and something mazels that this one particular open source author maintained",
    "start": "500759",
    "end": "507029"
  },
  {
    "text": "on NPM he had a library called kick and so the kick messaging company wanted to",
    "start": "507029",
    "end": "513810"
  },
  {
    "text": "do something and they complained and he em there was some disagreements and next thing you know he took all of his toys and went home and unpublished everything",
    "start": "513810",
    "end": "520800"
  },
  {
    "text": "and the internet broke because left pad was 11 lines of JavaScript that just patted strings because you couldn't do",
    "start": "520800",
    "end": "526920"
  },
  {
    "text": "that by default in the language and things like react depended upon it which means things like Facebook depended upon",
    "start": "526920",
    "end": "532439"
  },
  {
    "text": "it and for a short period of time like nothing built and the the wise people",
    "start": "532439",
    "end": "537600"
  },
  {
    "text": "who to find the standard said oh and now we have string padding it was like the",
    "start": "537600",
    "end": "543399"
  },
  {
    "text": "fastest feature to ever go through the process again to the language it works very simply suppose we have a team I",
    "start": "543399",
    "end": "548860"
  },
  {
    "text": "want an event actually Beckett in Kansas City back in the States and so there's my team and and say we just have the",
    "start": "548860",
    "end": "555879"
  },
  {
    "text": "four of us and we want to loop through and and and list our names and string padding works exactly the way you would expect right we can call pad start but",
    "start": "555879",
    "end": "564579"
  },
  {
    "text": "the strings in there right put a string in and optionally a fill character or a film a score I can be a fill string and",
    "start": "564579",
    "end": "570480"
  },
  {
    "text": "it'll do exactly what you'd probably expect it to do you call pad start of eight and I'm basically like in this",
    "start": "570480",
    "end": "575740"
  },
  {
    "start": "571000",
    "end": "601000"
  },
  {
    "text": "example I'm right aligning my strings making them up to eight characters long if I don't provide that optional mask",
    "start": "575740",
    "end": "581860"
  },
  {
    "text": "it's white space if I provide something it's the character or the mask I want to",
    "start": "581860",
    "end": "586990"
  },
  {
    "text": "put in and again probably predictably if the if I said say pad start four or pad",
    "start": "586990",
    "end": "594100"
  },
  {
    "text": "start to like nothing would happen like it doesn't blow up it just it just wouldn't do anything I would ignore that",
    "start": "594100",
    "end": "599319"
  },
  {
    "text": "string also there is a pad end works the exact same way so we have equal length",
    "start": "599319",
    "end": "604360"
  },
  {
    "start": "601000",
    "end": "612000"
  },
  {
    "text": "strings and what's the opposite of padding strings anyone trimming strings",
    "start": "604360",
    "end": "610149"
  },
  {
    "text": "so obviously we have passed dart and Pat end and we have trim start and tremendous up we don't because we have",
    "start": "610149",
    "end": "620649"
  },
  {
    "start": "616000",
    "end": "659000"
  },
  {
    "text": "trim left and trim right which already existed and they haven't fixed it yet because it is still JavaScript we don't",
    "start": "620649",
    "end": "626319"
  },
  {
    "text": "really want it like to make sense so you trim left in your trim right because that's what was always there",
    "start": "626319",
    "end": "632230"
  },
  {
    "text": "we have pad start and pad end the rationale being that we have say right-to-left languages and rather than",
    "start": "632230",
    "end": "637360"
  },
  {
    "text": "having to have a developer worry about what is left and right we say start and end it semantically for localization",
    "start": "637360",
    "end": "642629"
  },
  {
    "text": "it'll figure it out whether it should be the left or right based on the start or the end there is a proposal to make trim",
    "start": "642629",
    "end": "649809"
  },
  {
    "text": "start and to amend it's been like two years we think it's coming soon but it's",
    "start": "649809",
    "end": "654850"
  },
  {
    "text": "not there yet sorry okay who's using async/await already in",
    "start": "654850",
    "end": "661930"
  },
  {
    "start": "659000",
    "end": "673000"
  },
  {
    "text": "JavaScript hopefully a lot of people but sweet okay cool so this was really one",
    "start": "661930",
    "end": "667329"
  },
  {
    "text": "of the biggest things that came out of 2017 and I think one of the most applicable that everyone can really benefit from so if",
    "start": "667329",
    "end": "674680"
  },
  {
    "start": "673000",
    "end": "729000"
  },
  {
    "text": "you haven't used async/await in JavaScript but if you are people here what people's backgrounds and other",
    "start": "674680",
    "end": "680350"
  },
  {
    "text": "technologies net developers and c-sharp people so this works similarly to the way async/await works with tasks based",
    "start": "680350",
    "end": "686019"
  },
  {
    "text": "programming principles in c-sharp practically the same so let's take sort",
    "start": "686019",
    "end": "692709"
  },
  {
    "text": "of what things used to look like who remembers like this callback hell right it's it's not pretty and there's a lot",
    "start": "692709",
    "end": "699100"
  },
  {
    "text": "of problems with it other than the ugliness and this was like simple right cuz I even actually really put anything",
    "start": "699100",
    "end": "704290"
  },
  {
    "text": "in these functions but if we actually started putting things in it gets very messy it's hard to maintain it's hard to",
    "start": "704290",
    "end": "711010"
  },
  {
    "text": "read it's all the weird indentation stuff going on also it's hard to debug also it's hard to handle errors there's",
    "start": "711010",
    "end": "718870"
  },
  {
    "text": "lots of problems with callbacks also there's the problem with this everyone's favorite javascript word and what on",
    "start": "718870",
    "end": "724209"
  },
  {
    "text": "earth this is at any point in time not easy so things got a lot better with the",
    "start": "724209",
    "end": "730750"
  },
  {
    "start": "729000",
    "end": "786000"
  },
  {
    "text": "promises API and in fact this isn't bad they're people who's using promises or",
    "start": "730750",
    "end": "736720"
  },
  {
    "text": "have has use promises in JavaScript most of you awesome so this is a lot better",
    "start": "736720",
    "end": "741940"
  },
  {
    "text": "it's certainly easier to read right but it's still not perfect error handling is",
    "start": "741940",
    "end": "749680"
  },
  {
    "text": "easier but not great this is still a single JavaScript statement like one",
    "start": "749680",
    "end": "756160"
  },
  {
    "text": "expression right does one semicolon this whole thing hasn't one so placing breakpoints in here can be difficult and you can't really do bugs the arrow",
    "start": "756160",
    "end": "762190"
  },
  {
    "text": "functions you can debug inside of each of these but something breaks it's hard to necessarily tell where happened so debugging is hard and let's say that",
    "start": "762190",
    "end": "769510"
  },
  {
    "text": "actually what happens if one unsaved data I needed a well a we're not a scope when",
    "start": "769510",
    "end": "774850"
  },
  {
    "text": "it's when it's error function ended so I have to do more work to hold on to and do things with a and B by the time I get",
    "start": "774850",
    "end": "780430"
  },
  {
    "text": "to see which becomes sort of a scoping problem depending what our needs are so async/await fixes all that like I said",
    "start": "780430",
    "end": "789190"
  },
  {
    "start": "786000",
    "end": "878000"
  },
  {
    "text": "if you've worked with with tasks for example a c-sharp it looks just like this for the most part right we have an",
    "start": "789190",
    "end": "794529"
  },
  {
    "text": "async function with the awake keyword a couple of key points you have to call the function async if you want to use",
    "start": "794529",
    "end": "801130"
  },
  {
    "text": "the awake keyword and the awake keyword effectively exactly what you would think there is no",
    "start": "801130",
    "end": "808450"
  },
  {
    "text": "callback it just sits there until load data is done or until save data is done processing the data's done and it",
    "start": "808450",
    "end": "815320"
  },
  {
    "text": "unwraps the promise so the assumption here is that load data returns a promise and when load data returns the promise",
    "start": "815320",
    "end": "821800"
  },
  {
    "text": "what happens as the promise not only is awaited but it is unwrapped and whatever that promise resolves to that's what's",
    "start": "821800",
    "end": "827200"
  },
  {
    "text": "stored in a a doesn't receive the promise a receives the promise the resolved value of the promise which is",
    "start": "827200",
    "end": "833140"
  },
  {
    "text": "also important to remember because you can get into trouble if you forget to put a wait because it won't blow up if I",
    "start": "833140",
    "end": "838300"
  },
  {
    "text": "forget to put a weight on one of those lines it'll work and now a will be the",
    "start": "838300",
    "end": "843490"
  },
  {
    "text": "promise it won't be resolved you have to do something with it to make sure you got to put it in there yeah one of the",
    "start": "843490",
    "end": "850480"
  },
  {
    "text": "things is aside from the obvious of hey I still have a the whole time is this looks just like synchronous code right",
    "start": "850480",
    "end": "856720"
  },
  {
    "text": "it works the same way you'd write any other code which means we can handle our error handling the same way we can place",
    "start": "856720",
    "end": "861910"
  },
  {
    "text": "breakpoints the same way it is just much easier to work in most paradigms there's a couple of points there let's say if I",
    "start": "861910",
    "end": "869470"
  },
  {
    "text": "go back one real quick notice on this one I'm just like logging out right I go through we're loading some data some more data processes save it output",
    "start": "869470",
    "end": "875710"
  },
  {
    "text": "something to the console that's fine but what if I want to return something back so asynchronous functions always will",
    "start": "875710",
    "end": "883210"
  },
  {
    "start": "878000",
    "end": "887000"
  },
  {
    "text": "wrap the result in a promise when it leaves so if I return D it doesn't",
    "start": "883210",
    "end": "888940"
  },
  {
    "text": "actually return d it returns a promise that resolves to D if for whatever reason there's an exception this",
    "start": "888940",
    "end": "894880"
  },
  {
    "text": "asynchronous function will throw with a promise that will resolve to that exception to that error if D was for",
    "start": "894880",
    "end": "901570"
  },
  {
    "text": "whatever reason already a promise it is smart enough to not double wrap the promise there won't be a promise that resolves to a promise that resolves a D",
    "start": "901570",
    "end": "907420"
  },
  {
    "text": "will check it was already a promise it returns that and if it isn't it will wrap it and send it back okay one way",
    "start": "907420",
    "end": "915220"
  },
  {
    "start": "914000",
    "end": "928000"
  },
  {
    "text": "that I use this is this idea of prerequisites anyone use promised at all",
    "start": "915220",
    "end": "920790"
  },
  {
    "text": "does anyone use promised out all and really love promised at all sweet yeah",
    "start": "920790",
    "end": "925960"
  },
  {
    "text": "right right so look at the example here is let's say I need to do something",
    "start": "925960",
    "end": "931870"
  },
  {
    "start": "928000",
    "end": "980000"
  },
  {
    "text": "right and I'm gonna process data but processing data requires that I get stuff from source a and stuff from",
    "start": "931870",
    "end": "937540"
  },
  {
    "text": "source B and both those things are needed to process I don't care which one gets done first I just want them both to go so I",
    "start": "937540",
    "end": "945639"
  },
  {
    "text": "say all right go low those two datasets and we call promised at all this is not new right there's how the promise API",
    "start": "945639",
    "end": "950889"
  },
  {
    "text": "works I can wait and as they promised out all on an array of promises and when they have all",
    "start": "950889",
    "end": "956949"
  },
  {
    "text": "successfully returned then my my callback hits and results is itself an",
    "start": "956949",
    "end": "963670"
  },
  {
    "text": "array that contains results that a result set B but then aside from kind of again getting back in sort of the",
    "start": "963670",
    "end": "969490"
  },
  {
    "text": "callback stuff we also have issues where process data probably doesn't expect an array so then you got to like somehow",
    "start": "969490",
    "end": "974829"
  },
  {
    "text": "splat out the results with the with the spread operator or something there's stuff you got to do to make all of this work async await I feel like I just feel",
    "start": "974829",
    "end": "981459"
  },
  {
    "start": "980000",
    "end": "1052000"
  },
  {
    "text": "like it looks better here because I can just await the whole thing and promise",
    "start": "981459",
    "end": "988089"
  },
  {
    "text": "out all itself returns a promise that results that array so I can await the entire thing so if I oh wait promised at",
    "start": "988089",
    "end": "994749"
  },
  {
    "text": "all I'm going to get back that array I'm gonna get back what was results on the pre or probably a previous slide and I",
    "start": "994749",
    "end": "1001230"
  },
  {
    "text": "can just be structure it again into a and B and now again I have a and B in scope I can continue to use a and B",
    "start": "1001230",
    "end": "1007860"
  },
  {
    "text": "after the next line in case I want to go back to it right and I can easily call process data do whatever I want with it",
    "start": "1007860",
    "end": "1013529"
  },
  {
    "text": "cleans it up there's a catch is this",
    "start": "1013529",
    "end": "1019559"
  },
  {
    "text": "idea of a waiting at the top you can't you can't do that and what I mean by that is say this is my entire",
    "start": "1019559",
    "end": "1027240"
  },
  {
    "text": "application that will fail because the",
    "start": "1027240",
    "end": "1032308"
  },
  {
    "text": "global scope is that asynchronous remember you can't use the await keyword unless you are in an async scope I'm not",
    "start": "1032309",
    "end": "1040079"
  },
  {
    "text": "in an async scope you try to call await and it blows up at runtime as you can't you can't do that now the fix for that",
    "start": "1040079",
    "end": "1045510"
  },
  {
    "text": "they're working on that there is a proposal where that will happen we think eventually but if you really have to do",
    "start": "1045510",
    "end": "1053190"
  },
  {
    "start": "1052000",
    "end": "1077000"
  },
  {
    "text": "this and I'm not necessarily recommending that you do this because I don't think you should always be in an asynchronous scope all the time but you",
    "start": "1053190",
    "end": "1058289"
  },
  {
    "text": "can create an asynchronous if e so you can actually create an iffy and call it",
    "start": "1058289",
    "end": "1063510"
  },
  {
    "text": "a sing from the outset and now everything inside that file is async and you can use a weight wherever you want inside to your entire scope it's no",
    "start": "1063510",
    "end": "1069929"
  },
  {
    "text": "longer really the global scope records things could happen out that if he but you can effectively wrap the whole thing if you really want to",
    "start": "1069929",
    "end": "1077480"
  },
  {
    "start": "1077000",
    "end": "1242000"
  },
  {
    "text": "any pressure about any of those things not just the async/await but anything if people have questions like feel free to",
    "start": "1077659",
    "end": "1083220"
  },
  {
    "text": "throw your hand up or whatnot yeah in in in in progress",
    "start": "1083220",
    "end": "1099630"
  },
  {
    "text": "cancellations yeah in progress and we'll talk about what in progress means the",
    "start": "1099630",
    "end": "1105390"
  },
  {
    "text": "question about cancellation tokus the things we will talk about what any process means in general for for in a",
    "start": "1105390",
    "end": "1110640"
  },
  {
    "text": "little bit later it's not necessary great answer right because it's like well it it's coming but not necessarily",
    "start": "1110640",
    "end": "1119179"
  },
  {
    "text": "in perfect kind of production form now any other questions",
    "start": "1119179",
    "end": "1124250"
  },
  {
    "text": "okay cool so if your other things that happened trailing comma none of these",
    "start": "1124250",
    "end": "1129690"
  },
  {
    "text": "are necessarily huge trailing commas is kind of a small change where you cannot",
    "start": "1129690",
    "end": "1139520"
  },
  {
    "text": "you can't necessarily have like a comma at the end of your argument list so you can't have a function definition that",
    "start": "1139520",
    "end": "1145890"
  },
  {
    "text": "expects a comma B comma C comma closed paren now you can I that's not a big deal for",
    "start": "1145890",
    "end": "1152100"
  },
  {
    "text": "me depending on your coding practice and your standards that where that becomes helpful is if you have you know if you",
    "start": "1152100",
    "end": "1158850"
  },
  {
    "text": "decide well you have to keep your elements on every line then when you make a change you don't necessarily have like extra lines and your change log if",
    "start": "1158850",
    "end": "1164610"
  },
  {
    "text": "you look at your commits and stuff because it's not deleting a line to re-edit just cuz a comma okay descriptors so there's a you can call",
    "start": "1164610",
    "end": "1172289"
  },
  {
    "text": "object dot get own just get on property descriptors there's always been one for a given property I know if anyone's ever",
    "start": "1172289",
    "end": "1177809"
  },
  {
    "text": "used that but you can call get on property descriptor on a property in an object there's now a get own property descriptors on an object motor will do",
    "start": "1177809",
    "end": "1185130"
  },
  {
    "text": "is that will return a a giant object of every enumerable property or every property of the object not only with its",
    "start": "1185130",
    "end": "1190799"
  },
  {
    "text": "property name and value but also whether is writable whether it's enumerable whether it's configurable the descriptors on that property so you can",
    "start": "1190799",
    "end": "1197130"
  },
  {
    "text": "kind of get a holistic picture of your entire object literal and the shared memory and Atomics is actually a fascinating space to be in if you are if",
    "start": "1197130",
    "end": "1205049"
  },
  {
    "text": "you do with a lot of concurrency in parallelism in JavaScript it does Allah stuff for like shared memory and things like that to handle better",
    "start": "1205049",
    "end": "1210360"
  },
  {
    "text": "parallelism the problem is right after they released it there were issues with specter and meltdown vulnerabilities and most browsers have completely disabled",
    "start": "1210360",
    "end": "1216900"
  },
  {
    "text": "it it was great that I have another talk that's on multi-threaded JavaScript and right after starting accepted all the",
    "start": "1216900",
    "end": "1222450"
  },
  {
    "text": "browser's started turning off the feature because of all the problems which is pretty awesome so they're working on fixing that but",
    "start": "1222450",
    "end": "1229049"
  },
  {
    "text": "most environments won't support it anymore all right 20:18 so that's stuff that is new to the",
    "start": "1229049",
    "end": "1237720"
  },
  {
    "text": "spec in the last couple months in terms of being officially set couple things rest and spread properties is actually",
    "start": "1237720",
    "end": "1244590"
  },
  {
    "start": "1242000",
    "end": "1260000"
  },
  {
    "text": "pretty cool the rest and spread operator people use it suite",
    "start": "1244590",
    "end": "1250440"
  },
  {
    "text": "ok the rest and spread operator works on arrays but it wasn't it didn't really",
    "start": "1250440",
    "end": "1255570"
  },
  {
    "text": "work on objects it didn't work for my property standpoint before so if you weren't using it just a quick refresher",
    "start": "1255570",
    "end": "1261390"
  },
  {
    "start": "1260000",
    "end": "1265000"
  },
  {
    "text": "right if we were talking about you know our three dots are ellipses it's funny I actually for a while I just called it",
    "start": "1261390",
    "end": "1267419"
  },
  {
    "start": "1265000",
    "end": "1383000"
  },
  {
    "text": "the splat operator because I feel either way you're just planting things out and it has multiple names but if we use it as an espresso syntax see if we didn't",
    "start": "1267419",
    "end": "1274470"
  },
  {
    "text": "use that here and we tried to just say array 2 3 4 5 6 we actually get an array with 4 objects in it right where the",
    "start": "1274470",
    "end": "1279990"
  },
  {
    "text": "first element is that whole array so we splat it out and same thing with rest parameters we can take all the stuff we",
    "start": "1279990",
    "end": "1285419"
  },
  {
    "text": "have and the rest of them get wrapped into an array that we can use say like the array prototype functions and stuff",
    "start": "1285419",
    "end": "1291179"
  },
  {
    "text": "like that on but now we can do stuff with object initializers and and it's",
    "start": "1291179",
    "end": "1300120"
  },
  {
    "text": "kind of neat so suppose I've got these two objects person and work person's me",
    "start": "1300120",
    "end": "1305340"
  },
  {
    "text": "work like world wide technology saint-louis whatever if I want to create a user and I use the spread operator on",
    "start": "1305340",
    "end": "1312419"
  },
  {
    "text": "person and work like this it actually pops off its kind of like object not a",
    "start": "1312419",
    "end": "1318990"
  },
  {
    "text": "sign right it's like really a syntactic sugar around object Auto sign or I can take all but I can do all at once where",
    "start": "1318990",
    "end": "1325470"
  },
  {
    "text": "I can take each one of these properties spread all the properties from them and put them into a resulting object and the",
    "start": "1325470",
    "end": "1330990"
  },
  {
    "text": "end of the day what user looks like doesn't have a property called person or work what it really has is first and",
    "start": "1330990",
    "end": "1336390"
  },
  {
    "text": "last and company and location and anything else I wanted to add to it in a single object conversely we're talk",
    "start": "1336390",
    "end": "1345750"
  },
  {
    "text": "about when it's the rest operator so the spread operator you're the same thing let's say I want to take person and I",
    "start": "1345750",
    "end": "1351330"
  },
  {
    "text": "want to say D structure that object so I can D structure that into first last and",
    "start": "1351330",
    "end": "1356730"
  },
  {
    "text": "the rest and I'm going to end up with three new variables first and last we'll have Jeff and Strauss info we'll have",
    "start": "1356730",
    "end": "1364080"
  },
  {
    "text": "the rest of them packaged with those others removed it's pretty neat",
    "start": "1364080",
    "end": "1371180"
  },
  {
    "text": "also with noticing you can do the same thing you could always do this in D structuring but the same stuff works so",
    "start": "1371180",
    "end": "1376650"
  },
  {
    "text": "you can use the colon syntax they don't have to be called first and last I can call them whatever write whatever I want to call them okay so other thing async",
    "start": "1376650",
    "end": "1385410"
  },
  {
    "start": "1383000",
    "end": "1399000"
  },
  {
    "text": "iteration for of loop talked about we've seen the for of loop already for of",
    "start": "1385410",
    "end": "1390570"
  },
  {
    "text": "loops not new right that's the thing with the iterables where I've got an array and we iterate over an iterable thing you couldn't do",
    "start": "1390570",
    "end": "1397650"
  },
  {
    "text": "it asynchronously before this is pretty powerful so let's say we got a traditional loop I've got some",
    "start": "1397650",
    "end": "1405060"
  },
  {
    "start": "1399000",
    "end": "1412000"
  },
  {
    "text": "collection of values this iterable and loop over them I log them out no big deal easy Oh what if instead of values",
    "start": "1405060",
    "end": "1412910"
  },
  {
    "start": "1412000",
    "end": "1441000"
  },
  {
    "text": "I've got some function that is asynchrony generating and yielding something back this doesn't this doesn't",
    "start": "1412910",
    "end": "1421770"
  },
  {
    "text": "work get values now as a generator or some sort of a synchronous deal that's returning a promise or who knows what",
    "start": "1421770",
    "end": "1427710"
  },
  {
    "text": "it's doing but what it's not is an array right it's not some sort of interval thing so it blows up we fixed that well",
    "start": "1427710",
    "end": "1436800"
  },
  {
    "text": "you know and there's a lot of cases for this right like file i/o streams and things like that but we fix it with a",
    "start": "1436800",
    "end": "1441900"
  },
  {
    "start": "1441000",
    "end": "1451000"
  },
  {
    "text": "new loop the for a weight of loop okay",
    "start": "1441900",
    "end": "1447590"
  },
  {
    "text": "right I know it's really really creative but the way it works is we don't await",
    "start": "1447590",
    "end": "1453750"
  },
  {
    "start": "1451000",
    "end": "1505000"
  },
  {
    "text": "the thing inside and I think there's an important distinction okay so I don't mean that get values is just an async",
    "start": "1453750",
    "end": "1458820"
  },
  {
    "text": "function that does something once let's say synchronous and you wait a little bit and then it comes back you could",
    "start": "1458820",
    "end": "1464640"
  },
  {
    "text": "have done that already you could have said for let item of a weight get values",
    "start": "1464640",
    "end": "1470340"
  },
  {
    "text": "it'll do the thing once you await it and you had your thing back that's not a big deal",
    "start": "1470340",
    "end": "1476429"
  },
  {
    "text": "that's long as the thing that comes back as an array or something iterable right but I'm not about things that are generators and that sort of do where or",
    "start": "1476429",
    "end": "1483299"
  },
  {
    "text": "streams where every time I go out I'm yielding a value and I have to wait every time on every pass of the loop I",
    "start": "1483299",
    "end": "1488850"
  },
  {
    "text": "might be waiting for a thing to come back each time through so you put on what a wait outside that privacy's the",
    "start": "1488850",
    "end": "1495630"
  },
  {
    "text": "for weight of loop and now what happens is every single time I go and get a value it runs I'm gonna gets back to the",
    "start": "1495630",
    "end": "1501600"
  },
  {
    "text": "top of the loop it will wait again for the next value to be yielded so that works and you can build your own of",
    "start": "1501600",
    "end": "1508380"
  },
  {
    "start": "1505000",
    "end": "1535000"
  },
  {
    "text": "these right because you just build generators so the same way that something interval worked before",
    "start": "1508380",
    "end": "1513990"
  },
  {
    "text": "if you've ever built your own iterable object in JavaScript where the thing basically returns a this object of value",
    "start": "1513990",
    "end": "1519720"
  },
  {
    "text": "and done so either you get a value back and done is false or it is done done is",
    "start": "1519720",
    "end": "1525419"
  },
  {
    "text": "true and value is no so by the same token we we just have it return a",
    "start": "1525419",
    "end": "1530700"
  },
  {
    "text": "promise that results with that thing and that's it and if you just create basically like a func like a generator",
    "start": "1530700",
    "end": "1536790"
  },
  {
    "start": "1535000",
    "end": "1549000"
  },
  {
    "text": "function but now you can call that generator function itself async now use",
    "start": "1536790",
    "end": "1541980"
  },
  {
    "text": "the for weight of loop and you can loop over those things questions make sense",
    "start": "1541980",
    "end": "1547850"
  },
  {
    "text": "cool yeah",
    "start": "1547850",
    "end": "1551600"
  },
  {
    "start": "1549000",
    "end": "1648000"
  },
  {
    "text": "is-isn't is the four way to of Lupin type script I'm not I'm not a tight script I'm afraid of type script so I",
    "start": "1556970",
    "end": "1565140"
  },
  {
    "text": "don't know someone may know the answer to that I do not does anyone know if this isn't typescript believe it is I I",
    "start": "1565140",
    "end": "1572970"
  },
  {
    "text": "have this weird I know that typescript is the way things go I have this thing we're like I feel like everything C",
    "start": "1572970",
    "end": "1578010"
  },
  {
    "text": "sharps all the things I feel like to ice cream I know it's like a whole argument we had there but no okay",
    "start": "1578010",
    "end": "1584220"
  },
  {
    "text": "so few other things from 2018 and these really are like little smaller things is",
    "start": "1584220",
    "end": "1589669"
  },
  {
    "text": "the promise API didn't have a finally before to be honest with you I didn't even realize that which I don't that means I'm a bad programmer and I just",
    "start": "1589669",
    "end": "1595860"
  },
  {
    "text": "never really used final ease and my trycatch stuff or what but it wasn't there so now now it is template literals",
    "start": "1595860",
    "end": "1603090"
  },
  {
    "text": "there were some restrictions on hex and octal and like Unicode type things and ten-member template literals are like",
    "start": "1603090",
    "end": "1608190"
  },
  {
    "text": "the dollar sign back takes sort of stuff where you can tokenize your strings there restrictions there they've been removed",
    "start": "1608190",
    "end": "1613559"
  },
  {
    "text": "there's a lot of regex stuff with look by look behind assertions and some more unicode things and a handful of cool",
    "start": "1613559",
    "end": "1619260"
  },
  {
    "text": "regular expression updates I know regular expressions are like either you love them or you hate them I really like them a lot but if you hate them you",
    "start": "1619260",
    "end": "1625080"
  },
  {
    "text": "probably hate me for even talking about them and then another thing that I actually I'm not sure I realized until I",
    "start": "1625080",
    "end": "1632190"
  },
  {
    "text": "saw is like oh yeah you can't have a catch that just is a catch you have to",
    "start": "1632190",
    "end": "1637290"
  },
  {
    "text": "define the exception that comes in the catch block and you don't have to anymore you can just generally have a global cache that doesn't actually",
    "start": "1637290",
    "end": "1642570"
  },
  {
    "text": "define like an exception variable in it and that's now okay so hopefully not",
    "start": "1642570",
    "end": "1651870"
  },
  {
    "text": "feel bad at the camera I keep walking this way but it's gonna fall off I put it there so yes next yes next so that's",
    "start": "1651870",
    "end": "1659820"
  },
  {
    "text": "kind of like what of where things are right now and some of the new stuff that's going on but like okay that stuff's really cool but man Jeff you've",
    "start": "1659820",
    "end": "1667650"
  },
  {
    "start": "1663000",
    "end": "1673000"
  },
  {
    "text": "mentioned a few things like like the cancellation tokens or like the something other stuff that's coming up",
    "start": "1667650",
    "end": "1673230"
  },
  {
    "start": "1673000",
    "end": "1681000"
  },
  {
    "text": "when's all that coming I mean it's like there's a lot of stuff and it's coming I promise at some point and what are those things",
    "start": "1673230",
    "end": "1682080"
  },
  {
    "start": "1681000",
    "end": "1691000"
  },
  {
    "text": "like the top level of wait well I mentioned this right you can't you can't have a no wait in the global scope and you have to be like the a",
    "start": "1682080",
    "end": "1688020"
  },
  {
    "text": "syncope they're working on that top level oh wait there's gonna be like a function style import to try to actually",
    "start": "1688020",
    "end": "1695630"
  },
  {
    "start": "1691000",
    "end": "1705000"
  },
  {
    "text": "standardize like a model a module loader in standardize across all different frameworks it's already decided how they",
    "start": "1695630",
    "end": "1701280"
  },
  {
    "text": "want to do this thing but they're all kind of different looking to standardize that through a function style import all sorts of stuff with classes I have a",
    "start": "1701280",
    "end": "1707250"
  },
  {
    "start": "1705000",
    "end": "1742000"
  },
  {
    "text": "giant soapbox speaking the typescript thing like I have a thing about classes in JavaScript I would say like you keep",
    "start": "1707250",
    "end": "1714600"
  },
  {
    "text": "using that word I don't think it means it what you think that it means but some of the problems are things like access",
    "start": "1714600",
    "end": "1720600"
  },
  {
    "text": "modifiers so there's been a raging debate for like over a year among the",
    "start": "1720600",
    "end": "1726690"
  },
  {
    "text": "the committee about private and public access modifiers for instance instance method variable or instance variables",
    "start": "1726690",
    "end": "1732450"
  },
  {
    "text": "and functions and objects and addition that they're looking at being able to add static methods and even following on",
    "start": "1732450",
    "end": "1737520"
  },
  {
    "text": "from that things like a decorator pattern like there's some really cool stuff that's coming into JavaScript so when is all that stuff coming I don't",
    "start": "1737520",
    "end": "1743550"
  },
  {
    "start": "1742000",
    "end": "1769000"
  },
  {
    "text": "know and I'm sorry and I was feel like if I said that right off the bat people just",
    "start": "1743550",
    "end": "1750690"
  },
  {
    "text": "all get up and leave the talk is like he doesn't know what's coming but here's the thing you we kind of know we can make educated",
    "start": "1750690",
    "end": "1757950"
  },
  {
    "text": "guesses we could have a decent idea of what's happening but to understand how",
    "start": "1757950",
    "end": "1763260"
  },
  {
    "text": "to do that like first I what I want to do is kind of take a take a little stroll through the way back time machine and kind of talk about why Java is the",
    "start": "1763260",
    "end": "1770850"
  },
  {
    "start": "1769000",
    "end": "1844000"
  },
  {
    "text": "way it is who is this guy anyone know yes sir Brendan Eich I'd give you a t-shirt if I had one",
    "start": "1770850",
    "end": "1778250"
  },
  {
    "text": "that's Brendan Eich Brendan Eich back in",
    "start": "1778250",
    "end": "1783420"
  },
  {
    "text": "May of 1995 was hired by these guys",
    "start": "1783420",
    "end": "1788870"
  },
  {
    "text": "remember then so he was hired to create",
    "start": "1788870",
    "end": "1794160"
  },
  {
    "text": "a scripting style language that was somewhat Java like to support the",
    "start": "1794160",
    "end": "1801240"
  },
  {
    "text": "burgeoning world wide web and famously or infamously many of you probably",
    "start": "1801240",
    "end": "1807090"
  },
  {
    "text": "already knows over the story like in ten caffeine filled like fever dream fever dream days he produced JavaScript if you",
    "start": "1807090",
    "end": "1815040"
  },
  {
    "text": "ever want to know more than any other reason why javascript is weird remember he did in ten days when we've been fixing it",
    "start": "1815040",
    "end": "1821790"
  },
  {
    "text": "ever since so for Netscape Navigator I think was",
    "start": "1821790",
    "end": "1826980"
  },
  {
    "text": "like 2.0 beta 3 in November 95 JavaScript 1 was released not beckham a",
    "start": "1826980",
    "end": "1834120"
  },
  {
    "text": "script javascript version 1 now it had",
    "start": "1834120",
    "end": "1839970"
  },
  {
    "text": "problems it still has problems but one of the things that came in from that is that",
    "start": "1839970",
    "end": "1845370"
  },
  {
    "text": "these guys came along and I don't want to say they reverse engineered it but",
    "start": "1845370",
    "end": "1850530"
  },
  {
    "text": "but they did and by like August of the next year they released jscript with IE",
    "start": "1850530",
    "end": "1859260"
  },
  {
    "text": "3 which was like javascript except that it wasn't and a few things happen",
    "start": "1859260",
    "end": "1865890"
  },
  {
    "text": "because of jscript like important things happen because of like the horror that was jscript is",
    "start": "1865890",
    "end": "1871100"
  },
  {
    "text": "aside from the fact that was kind of the beginning of like the browser wars that started then and kind of continue by",
    "start": "1871100",
    "end": "1879120"
  },
  {
    "text": "this point like netscape has kind of folded in become part of mozilla but in likes moved mozilla i took a step back they said gosh you know when you reach",
    "start": "1879120",
    "end": "1885330"
  },
  {
    "text": "the point that microsoft is stealing your stuff and doing something with it like you've probably hit the nail on the head really well like we got something going on here but also there was this",
    "start": "1885330",
    "end": "1894390"
  },
  {
    "text": "idea of jacob didn't really work we can all laugh about how nothing works in IE but not that IE was a bad browser is",
    "start": "1894390",
    "end": "1901860"
  },
  {
    "text": "that we had all these different implementations so what they did is they submitted mozilla brennan I cannot and",
    "start": "1901860",
    "end": "1908100"
  },
  {
    "start": "1906000",
    "end": "1956000"
  },
  {
    "text": "submitted JavaScript to ECMO which is actually not the European computer manufacturers Association but because",
    "start": "1908100",
    "end": "1913680"
  },
  {
    "text": "ECMO so weird word I always that's that's what it once was when it became a global organization they just sort of",
    "start": "1913680",
    "end": "1919320"
  },
  {
    "text": "ditch this and now they're just like come on and they've submitted the language to ECMO and said please help",
    "start": "1919320",
    "end": "1925860"
  },
  {
    "text": "please fix so ACMA did that and in a june of 97",
    "start": "1925860",
    "end": "1932310"
  },
  {
    "text": "they released ECMO - 6 - that is ECMO",
    "start": "1932310",
    "end": "1937800"
  },
  {
    "text": "script version 1 this is 1997 ECMO 1 now",
    "start": "1937800",
    "end": "1946220"
  },
  {
    "text": "seem like everything's going great the next year they had an ECMO released like that conversion to was in 98 that",
    "start": "1946220",
    "end": "1952190"
  },
  {
    "text": "conversion 3 was in 99 and then like it just stopped why did it stop because the people and this is still true today the",
    "start": "1952190",
    "end": "1958370"
  },
  {
    "start": "1956000",
    "end": "1988000"
  },
  {
    "text": "PETA people who are tc39 and when Miller with this term tc39 is the group of",
    "start": "1958370",
    "end": "1963950"
  },
  {
    "text": "people organizations what-have-you that decide what features do and don't make",
    "start": "1963950",
    "end": "1969049"
  },
  {
    "text": "it into the egg no script standard its technical committee 39 some people say tc39 committee please don't do that the",
    "start": "1969049",
    "end": "1975679"
  },
  {
    "text": "C stands for committee it like makes me cranes it's like the technical committee 39 committee don't don't don't do that the tc39 is",
    "start": "1975679",
    "end": "1982940"
  },
  {
    "text": "this group people they meet all the time and they decide what to do but the trouble is tc39 is composed of representatives from companies like like",
    "start": "1982940",
    "end": "1990169"
  },
  {
    "start": "1988000",
    "end": "2068000"
  },
  {
    "text": "this big companies major stakeholders in the web don't always get along don't",
    "start": "1990169",
    "end": "1998179"
  },
  {
    "text": "always have the same ideas conflicts fights so right after Equus script 3",
    "start": "1998179",
    "end": "2004659"
  },
  {
    "text": "happened in 99 the IE team and like the Mozilla Brendan Eich teams a stopped",
    "start": "2004659",
    "end": "2010059"
  },
  {
    "text": "playing nice like they did they just they had disagreements they weren't really coming to the table and cooperating and everything stalled",
    "start": "2010059",
    "end": "2015720"
  },
  {
    "text": "completely like ekam afore was supposed to come out it never did then it kind of",
    "start": "2015720",
    "end": "2021429"
  },
  {
    "text": "was relabeled you know act my 3.1 it still never did eventually like in 2009",
    "start": "2021429",
    "end": "2028690"
  },
  {
    "text": "10 years later yes 5 came out which was",
    "start": "2028690",
    "end": "2036700"
  },
  {
    "text": "sometimes called es harmony if you remember that term from several years back so it took 10 years to get anything",
    "start": "2036700",
    "end": "2041980"
  },
  {
    "text": "done and then there was like a small upgrade in 5.1 but then again nothing happened till we had es6 right in 2015",
    "start": "2041980",
    "end": "2047830"
  },
  {
    "text": "which is what started the whole ECMO 2015 es 2016 es 2017 and the reason that's happened is because by the time",
    "start": "2047830",
    "end": "2054010"
  },
  {
    "text": "we got to 2015 they started realizing that the committee is nice but design by committee doesn't work because there are",
    "start": "2054010",
    "end": "2061270"
  },
  {
    "text": "too many conflicts of interest 20 different opinions and so they grind to like like a stalemate and we were going",
    "start": "2061270",
    "end": "2066608"
  },
  {
    "text": "nowhere and as a result we now have what is literally just called the tc39 process which is where we are today and",
    "start": "2066609",
    "end": "2073720"
  },
  {
    "start": "2068000",
    "end": "2103000"
  },
  {
    "text": "how the language grows today the way they handle it",
    "start": "2073720",
    "end": "2078770"
  },
  {
    "text": "is proposals go through a series of stages every single proposal everyone",
    "start": "2078770",
    "end": "2085970"
  },
  {
    "text": "goes through the same series of stages it doesn't matter if it is fixing the",
    "start": "2085970",
    "end": "2091129"
  },
  {
    "text": "problem of left pad or building a sink iteration or designing an entire flawed",
    "start": "2091130",
    "end": "2096648"
  },
  {
    "text": "class system for for javascript whatever it is they all go through the same steps",
    "start": "2096649",
    "end": "2101780"
  },
  {
    "text": "in order to make it enlist into the spec or talk real quickly about what those are and this is how we start to figure",
    "start": "2101780",
    "end": "2107780"
  },
  {
    "start": "2103000",
    "end": "2258000"
  },
  {
    "text": "out where things are going and why so",
    "start": "2107780",
    "end": "2113450"
  },
  {
    "text": "stage zero because we're engineers and everything has to be zero based we can't start at one stage zero is called the",
    "start": "2113450",
    "end": "2121880"
  },
  {
    "text": "strawman stage it's actually okay that we call it stage zero because it really isn't anything at all a proposal goes into stage zero like",
    "start": "2121880",
    "end": "2129140"
  },
  {
    "text": "anyone with any vested interest or any stakeholder in ECMO can basically say here as a thing and like throw it over",
    "start": "2129140",
    "end": "2135410"
  },
  {
    "text": "the wall and see what happens lots of proposals are thrown in there as stage zero that never go anywhere at all the",
    "start": "2135410",
    "end": "2143750"
  },
  {
    "text": "idea is just provide some sort of input to the process because we all have to start somewhere so it sort of I see this",
    "start": "2143750",
    "end": "2149180"
  },
  {
    "text": "thing I have this thought I had a dream last night I think we should add this to JavaScript and it's and it shows up it",
    "start": "2149180",
    "end": "2155810"
  },
  {
    "text": "doesn't mean anything's happening with it if we get to stage one it's important",
    "start": "2155810",
    "end": "2161500"
  },
  {
    "text": "it's an important step because even though we're nowhere when you take on when you reach stage one this proposal",
    "start": "2161500",
    "end": "2168020"
  },
  {
    "text": "stage what it means is that this thing has at least been discussed by tc39 they've looked at it they've said we see",
    "start": "2168020",
    "end": "2176750"
  },
  {
    "text": "a problem here we're going to invest our time in at least thinking about it right which is a major step given the number",
    "start": "2176750",
    "end": "2184010"
  },
  {
    "text": "of things that are proposed in the first place and so a few things happen when it proposals a stage one we start talking",
    "start": "2184010",
    "end": "2189470"
  },
  {
    "text": "about things like what is the problem what's going on why do we need this well because there's this thing with left pad the internet broke and like we really",
    "start": "2189470",
    "end": "2195440"
  },
  {
    "text": "need to fix this problem how we're gonna fix it we're gonna do the exact same thing in the language right and talk",
    "start": "2195440",
    "end": "2202220"
  },
  {
    "text": "about maybe some of the technical challenges and the hurdles other things that happened during stage one are you start that like like polyfills the",
    "start": "2202220",
    "end": "2209270"
  },
  {
    "text": "feature itself doesn't start getting built but you'll see little polyfills snippets of code like here's how the thing will work if you call this this is sort of",
    "start": "2209270",
    "end": "2216080"
  },
  {
    "text": "the behavior that we expect and they start playing around with that a little bit at a certain point oh and one other",
    "start": "2216080",
    "end": "2221780"
  },
  {
    "text": "thing about stage one is not only has tc39 talked about it but and this is key",
    "start": "2221780",
    "end": "2227690"
  },
  {
    "text": "Ashley since designed by committee was a problem someone or maybe a couple of",
    "start": "2227690",
    "end": "2234140"
  },
  {
    "text": "someone's but usually it's like one prime key person running point says I'll",
    "start": "2234140",
    "end": "2239840"
  },
  {
    "text": "take it someone claims it and is responsible for making the argument for",
    "start": "2239840",
    "end": "2245660"
  },
  {
    "text": "it for shepherding it through the process for answering questions for acknowledging if those flaws but making",
    "start": "2245660",
    "end": "2251450"
  },
  {
    "text": "sure thing marches ahead so there's someone always watching it and hopefully we avoid getting stalled okay Stage two",
    "start": "2251450",
    "end": "2259220"
  },
  {
    "start": "2258000",
    "end": "2412000"
  },
  {
    "text": "is the draft stage Stage two means all right we get the idea we understand what the problem is we see some polyfills stuff that needs sort of works but we're",
    "start": "2259220",
    "end": "2265100"
  },
  {
    "text": "still talking out of spec here we're still creating something that if you ever like the ECMO script standard",
    "start": "2265100",
    "end": "2272570"
  },
  {
    "text": "itself is still a formal specification like it's like a big giant technical document I wouldn't have said I",
    "start": "2272570",
    "end": "2278990"
  },
  {
    "text": "recommend reading it because it's really not particularly interesting but it is a spec and so during stage 2 we start",
    "start": "2278990",
    "end": "2285500"
  },
  {
    "text": "draft with that spec looks like we start talking about the real syntax semantics are gonna be around this thing",
    "start": "2285500",
    "end": "2290900"
  },
  {
    "text": "not just through polyfill but start actually looking at how would this thing work and how would you know cuz member write like a browser I'm Google Chrome",
    "start": "2290900",
    "end": "2296780"
  },
  {
    "text": "I've got the v8 engine or I've got spider monkey I've got chakra for edge whatever it is I've got to build the",
    "start": "2296780",
    "end": "2302150"
  },
  {
    "text": "speeches eventually in my implementation of JavaScript so we start working on what that might look like how it should",
    "start": "2302150",
    "end": "2307670"
  },
  {
    "text": "work start defining it we get to stage three things looking really good I used",
    "start": "2307670",
    "end": "2312860"
  },
  {
    "text": "to tell people up until about a year ago that if things hit Stage three is just a matter of time and it's coming until I",
    "start": "2312860",
    "end": "2321140"
  },
  {
    "text": "decided that wasn't her anymore I didn't decide but until I started seeing a couple of things that made to stage three they've been in discussion for a",
    "start": "2321140",
    "end": "2326510"
  },
  {
    "text": "long time fall flat till I'd never be heard of again so even after something it seems so close it does not mean to be part of",
    "start": "2326510",
    "end": "2332540"
  },
  {
    "text": "the language and that can be a little tricky and dangerous if you're trying to plan ahead for the future because when",
    "start": "2332540",
    "end": "2337670"
  },
  {
    "text": "we're in a candidate stage what that means is we've only gone we can go so far writing our own little condiment",
    "start": "2337670",
    "end": "2343370"
  },
  {
    "text": "ations but what tc39 okay we're ready to move forward we",
    "start": "2343370",
    "end": "2350730"
  },
  {
    "text": "aren't going to publish this thing and say it's real until we have at least two real-world implementations in real world",
    "start": "2350730",
    "end": "2358380"
  },
  {
    "text": "environments that have built this thing where you can use it where someone could write application using the feature and",
    "start": "2358380",
    "end": "2364170"
  },
  {
    "text": "you can actually run it natively in those environments you have to have a successful implantation and at least two",
    "start": "2364170",
    "end": "2370080"
  },
  {
    "text": "environments and get the feedback and see where that goes outside of like the ivory tower of tc39 just saying well this sounds nice you have to actually",
    "start": "2370080",
    "end": "2376350"
  },
  {
    "text": "see it go out in the real world and work the problem is so I guess a couple years ago there was a year and half ago maybe",
    "start": "2376350",
    "end": "2382590"
  },
  {
    "text": "there's thing called like sim D single instruction multiple data type instructions it didn't work like in the",
    "start": "2382590",
    "end": "2388230"
  },
  {
    "text": "real world there was more headache and hassle when it was worth and it dropped and after all this discussions just sort",
    "start": "2388230",
    "end": "2393600"
  },
  {
    "text": "of went away yeah sometimes when I see something that it kind of stalls in stage 3 I get nervous actually about it",
    "start": "2393600",
    "end": "2398880"
  },
  {
    "text": "because it look like for example the private and public classes thing methods has stalled for a long time in stage 3",
    "start": "2398880",
    "end": "2404370"
  },
  {
    "text": "and it kind of gets me anxious because I want them to fix classes so point is though we don't know what will happen",
    "start": "2404370",
    "end": "2410400"
  },
  {
    "text": "until we see it now if we're successful then it's stage one is done if it's not",
    "start": "2410400",
    "end": "2418110"
  },
  {
    "text": "successful it gets dumped the reason I say it's dangerous is because now you actually happen to be a feature that is fully native in say Chrome or in Safari",
    "start": "2418110",
    "end": "2424680"
  },
  {
    "text": "or whatever that is actually not going to be a standardized thing and whether or not they ever actually deprecated",
    "start": "2424680",
    "end": "2429780"
  },
  {
    "text": "remove it back out of say the v8 maybe they do maybe they don't so you see a feature that works like all",
    "start": "2429780",
    "end": "2435090"
  },
  {
    "text": "at least it's in chrome now our users use Chrome that's great because you're planning ahead but you got to be careful because maybe it will never ever end up",
    "start": "2435090",
    "end": "2440670"
  },
  {
    "text": "in all the other environments so you got to look out but if it hit stage 4 it is truly done and stage 4 means we've tested it we're happy and at the next",
    "start": "2440670",
    "end": "2447900"
  },
  {
    "text": "release you'll become part of the spec which is in January of every year then it's ratified like in June and then it's",
    "start": "2447900",
    "end": "2453360"
  },
  {
    "text": "done so it's all the standard stuff so that every proposal works that way every",
    "start": "2453360",
    "end": "2462120"
  },
  {
    "text": "single proposal now what do we do with that because there's a bunch right like",
    "start": "2462120",
    "end": "2467700"
  },
  {
    "text": "there's a there's a bunch and it's hard to keep track of things and it's hard to",
    "start": "2467700",
    "end": "2474090"
  },
  {
    "text": "know how to plan and the whole point of this is the reason I talk about this is because there will be new features next year in the year after that",
    "start": "2474090",
    "end": "2480059"
  },
  {
    "text": "and so you don't necessarily want to be reactionary it's nice to be proactive about our about our development so the",
    "start": "2480059",
    "end": "2486839"
  },
  {
    "text": "good news is like github actually helps here because all of this all of it is",
    "start": "2486839",
    "end": "2493380"
  },
  {
    "start": "2487000",
    "end": "2502000"
  },
  {
    "text": "done in the open the entire process is done on the open every proposal every",
    "start": "2493380",
    "end": "2498630"
  },
  {
    "text": "discussion every meeting it's all in github tc39 has an organization in github with a whole bunch of repos and",
    "start": "2498630",
    "end": "2505709"
  },
  {
    "start": "2502000",
    "end": "2604000"
  },
  {
    "text": "there's an ECMO - six - thats actually the formal name of ECMO script there's an ECMO - six - repo that's sort of a",
    "start": "2505709",
    "end": "2512400"
  },
  {
    "text": "launching point for everything they do and it's kind of you know the the the readme for that repo is larger this kind",
    "start": "2512400",
    "end": "2518819"
  },
  {
    "text": "of talk about the process a link to like here's how the process works and also links to all these other things so for",
    "start": "2518819",
    "end": "2524609"
  },
  {
    "text": "example there's a link from that main repo into another one that has all the finish stuff everything a stage for",
    "start": "2524609",
    "end": "2530339"
  },
  {
    "text": "everything that's going on which is one through three stage zero stuff and even things I get dropped so the 7d proposal which has never been",
    "start": "2530339",
    "end": "2536160"
  },
  {
    "text": "completed and will never be completed still exists you can still see what happened find out why see the progress that was",
    "start": "2536160",
    "end": "2542549"
  },
  {
    "text": "made it just becomes inactive so you can track and see what's happening with every single one of them and every",
    "start": "2542549",
    "end": "2547650"
  },
  {
    "text": "single feature gets its own repository its own polyfills its own texts its own",
    "start": "2547650",
    "end": "2554519"
  },
  {
    "text": "discussion its own issues because aside from the ACMA script standard being a standard it is actually treated like a",
    "start": "2554519",
    "end": "2560609"
  },
  {
    "text": "real repo so the standard itself takes pull requests and so that proposal sits out somewhere else in another repo and",
    "start": "2560609",
    "end": "2566579"
  },
  {
    "text": "when it becomes stage 4 when the time is right then that proposal whatever it is you know async iteration or private",
    "start": "2566579",
    "end": "2573630"
  },
  {
    "text": "instance fields gets a pull request back in the main equity to six to repo and becomes part of the spec that way so",
    "start": "2573630",
    "end": "2579630"
  },
  {
    "text": "each different proposal has his own thing the nice thing there aside from being you know it's a whole lot of repositories attract maybe never",
    "start": "2579630",
    "end": "2585630"
  },
  {
    "text": "something you really care about like you can star or watch just that one I get way too many even sometimes I wish I",
    "start": "2585630",
    "end": "2591660"
  },
  {
    "text": "didn't do is I get so many emails like every day with the discussion what's going on with the public and private field stuff in classes but it's a very",
    "start": "2591660",
    "end": "2598170"
  },
  {
    "text": "active discussion and I just I just watched that repo and I could ignore all the other stuff if I don't care about it",
    "start": "2598170",
    "end": "2604039"
  },
  {
    "start": "2604000",
    "end": "2716000"
  },
  {
    "text": "now additional that there's a couple other repos that are kind of interesting there's this test - six - so there's a",
    "start": "2604039",
    "end": "2610829"
  },
  {
    "text": "giant suite of tests not only tests that exist across with whole spec but then one of the things you have to do when we create a",
    "start": "2610829",
    "end": "2616920"
  },
  {
    "text": "new proposal is we have to have tests around that so you can actually download",
    "start": "2616920",
    "end": "2622470"
  },
  {
    "text": "these things and I haven't done this in a long time but you can run these tests in your environment and find out again not to harp on the IE thing but so it's",
    "start": "2622470",
    "end": "2629369"
  },
  {
    "text": "kind of funny is IE for a long time it",
    "start": "2629369",
    "end": "2634980"
  },
  {
    "text": "wasn't actually more compliant with the atmospheric script standard then like",
    "start": "2634980",
    "end": "2639990"
  },
  {
    "text": "Chrome and Firefox were because Chrome and Firefox actually are doing some things where they build a lot more of like the experimental stuff stage 3",
    "start": "2639990",
    "end": "2646109"
  },
  {
    "text": "stuff and ie was like it maybe didn't work the way we wanted it to work but it worked the way it was supposed to work but you can do that in test your",
    "start": "2646109",
    "end": "2652920"
  },
  {
    "text": "environments through this test suite there's been kind of an interesting exercise in addition this is not really",
    "start": "2652920",
    "end": "2659760"
  },
  {
    "text": "part of tc39 s repo but as this guy Rick Waldron Rick Waldron is a as a",
    "start": "2659760",
    "end": "2664920"
  },
  {
    "text": "representative member to the committee but what he does is I don't know if he's",
    "start": "2664920",
    "end": "2670650"
  },
  {
    "text": "officially the secretary for tc39 or not but he takes incredibly detailed notes of everything that happens cuz tc39",
    "start": "2670650",
    "end": "2677880"
  },
  {
    "text": "every other month all year round every year every other month they all get",
    "start": "2677880",
    "end": "2683339"
  },
  {
    "text": "together in person somewhere and they meet and they talk about these things",
    "start": "2683339",
    "end": "2688380"
  },
  {
    "text": "and everything that's discussed about every proposal whether it's moved up or why not what's going on all those notes",
    "start": "2688380",
    "end": "2694380"
  },
  {
    "text": "are they're readily available so you can kind of see what's happening with your favorite features that matter to you ok",
    "start": "2694380",
    "end": "2703470"
  },
  {
    "text": "I used to have a talk where I refer to this next slide as the worst slide in the history of slides ever ever made and",
    "start": "2703470",
    "end": "2710460"
  },
  {
    "text": "it's and it still is but there's a purpose to it now so that guy has anyone",
    "start": "2710460",
    "end": "2719640"
  },
  {
    "text": "ever seen this page before anyone familiar with it I see a handful of people this thing is maintained by a guy out of",
    "start": "2719640",
    "end": "2728430"
  },
  {
    "text": "New York I think is where he lives and this is yeah if we actually showed the whole thing it would go down like you",
    "start": "2728430",
    "end": "2734490"
  },
  {
    "text": "know somewhere down there in the lobby the hotel it's like a huge page that shows all these different features and proposals and things that are going on",
    "start": "2734490",
    "end": "2740280"
  },
  {
    "text": "and also shows across you know it goes way down to there every single environment that might exist and",
    "start": "2740280",
    "end": "2747210"
  },
  {
    "text": "that feature has been implemented natively in that environment or not now setting aside the sore spot was like polyfill stuff you'll notice this page",
    "start": "2747210",
    "end": "2755330"
  },
  {
    "text": "for 2016 features from a 17 features I just took a new snapshot this is this morning a lot of green that's good news",
    "start": "2755330",
    "end": "2763920"
  },
  {
    "text": "because something to keep in mind is just because something become stage form becomes part of the spec doesn't mean",
    "start": "2763920",
    "end": "2769530"
  },
  {
    "text": "that it actually bless you it doesn't mean that it actually exists in every single browser or every single",
    "start": "2769530",
    "end": "2775260"
  },
  {
    "text": "environment because they do stuff to go out and build that thing and make it work so these features since this 2016",
    "start": "2775260",
    "end": "2781950"
  },
  {
    "text": "it's a good thing it's all green but shows you whether in the browser or the environment you care about where that feature works now it's an interactive",
    "start": "2781950",
    "end": "2787770"
  },
  {
    "text": "page so if you haven't been to this page before or even if you have you should play around with it if you click Next it looks more like that that's not as good",
    "start": "2787770",
    "end": "2796250"
  },
  {
    "start": "2793000",
    "end": "2864000"
  },
  {
    "text": "but there's some light light here so let's look like over here right object",
    "start": "2796250",
    "end": "2803250"
  },
  {
    "text": "out from entries just a proposal is going on right now actually that'll be the thing we're when we looked how about algae got entries about the stuff from",
    "start": "2803250",
    "end": "2808500"
  },
  {
    "text": "2017 that took that was my whole family and we could iterate over the object this is a proposal to take that same",
    "start": "2808500",
    "end": "2813810"
  },
  {
    "text": "thing if you have that array of key value pairs to serialize that back into",
    "start": "2813810",
    "end": "2819150"
  },
  {
    "text": "an object literal that is its bill here in these Firefox Knightley's right",
    "start": "2819150",
    "end": "2825660"
  },
  {
    "text": "chrome has got something going on with a big int type that's here because these things are at stage 3 this is helpful",
    "start": "2825660",
    "end": "2832609"
  },
  {
    "text": "they were trying to plan because what you can see is things are happening with it not only is it in stage 3 but you can",
    "start": "2832609",
    "end": "2839040"
  },
  {
    "text": "see the ones have more activity like the string prototype match all I don't know how easiest is to read that like the third one down and these guys like",
    "start": "2839040",
    "end": "2844890"
  },
  {
    "text": "there's a lot of red here now it's possible that somewhere over here there's green right but it may well be",
    "start": "2844890",
    "end": "2849990"
  },
  {
    "text": "it something stage 3 but no one's built anything for it yet which tells us well asking me a while isn't stage 3 but it's",
    "start": "2849990",
    "end": "2855119"
  },
  {
    "text": "it's probably gonna be a while that doesn't mean it's coming like next week so you can kind of plan and think about",
    "start": "2855119",
    "end": "2860160"
  },
  {
    "text": "what's happening feature by feature which is nice oh there's a bitly for that so if you",
    "start": "2860160",
    "end": "2867000"
  },
  {
    "start": "2864000",
    "end": "2872000"
  },
  {
    "text": "just do like ECMO - compat that'll take you to that just to that page ok",
    "start": "2867000",
    "end": "2872190"
  },
  {
    "start": "2872000",
    "end": "2936000"
  },
  {
    "text": "and then one other thing is this es discuss this is if you really want to",
    "start": "2872190",
    "end": "2877950"
  },
  {
    "text": "like get into the weeds and really want to geek out on this stuff but not only are there all the repos and",
    "start": "2877950",
    "end": "2883619"
  },
  {
    "text": "all the issues and get up and things you can track there's a long-running mailing distribution list for the ACMA standard",
    "start": "2883619",
    "end": "2889970"
  },
  {
    "text": "that's been around forever this was kind of a nice indexed site that lets you",
    "start": "2889970",
    "end": "2895550"
  },
  {
    "text": "track all that stuff and there's a lot of historical stuff there too which can be interesting if you just if if you",
    "start": "2895550",
    "end": "2901710"
  },
  {
    "text": "care about the stuff even more than it really is reasonable but even current stuff is here so not only have links to",
    "start": "2901710",
    "end": "2906750"
  },
  {
    "text": "like say the notes that Rick Waldron does but there are links actively update all the time.i what's going on the",
    "start": "2906750",
    "end": "2912330"
  },
  {
    "text": "mailing list so you can see not only the discussion that's happening in github but everything that's going back as we",
    "start": "2912330",
    "end": "2917490"
  },
  {
    "text": "track like what's the hang-up why can we figure out how to create private fields and classes well there's a lot of discussion there and it's sorted not",
    "start": "2917490",
    "end": "2923640"
  },
  {
    "text": "only by day but by topic also by proposals so it's very easy to navigate and find a lot of information about the things that you care about okay",
    "start": "2923640",
    "end": "2931550"
  },
  {
    "text": "questions about any of this awesome so what does that mean and why do we care",
    "start": "2931550",
    "end": "2938430"
  },
  {
    "start": "2936000",
    "end": "2963000"
  },
  {
    "text": "where do we go really what I just want",
    "start": "2938430",
    "end": "2943470"
  },
  {
    "text": "people to do is just like is think about this stuff right you don't have to think",
    "start": "2943470",
    "end": "2948780"
  },
  {
    "text": "about it every day don't like spend entire like work weeks like obsessing",
    "start": "2948780",
    "end": "2953820"
  },
  {
    "text": "over one feature or the next unless you hate JavaScript classes but",
    "start": "2953820",
    "end": "2959540"
  },
  {
    "text": "invest time to understand how it works right educate yourself about the things that",
    "start": "2959540",
    "end": "2964800"
  },
  {
    "start": "2963000",
    "end": "2997000"
  },
  {
    "text": "matter because if there's something you don't like in the language today it might be getting worked on or if not you",
    "start": "2964800",
    "end": "2970200"
  },
  {
    "text": "might be able to propose or somehow and maybe not directly but throw something out there right fine these people it's",
    "start": "2970200",
    "end": "2975750"
  },
  {
    "text": "easy to even see who's on these committees there are people who I don't there's anyone here at NDC but they're I mean I've been at conferences where",
    "start": "2975750",
    "end": "2982619"
  },
  {
    "text": "there are speakers who are actually part of tc39 you go to an event like this they're you literally might build and walk up someone say hey I've been having",
    "start": "2982619",
    "end": "2988050"
  },
  {
    "text": "this thought and you can have a direct impact on that and just sort of educate how this thing works maybe you can be",
    "start": "2988050",
    "end": "2993270"
  },
  {
    "text": "part of the fix and at the very least you can have a better sense of what's coming and then discuss all that stuff",
    "start": "2993270",
    "end": "2998550"
  },
  {
    "start": "2997000",
    "end": "3028000"
  },
  {
    "text": "with your teams don't just let it be you go back and talk to your team matter because then what you can do is you can really empower everybody everyone on",
    "start": "2998550",
    "end": "3004700"
  },
  {
    "text": "your team to really plan ahead better safer maybe a little bit more foolproof you still have the big purple question",
    "start": "3004700",
    "end": "3010340"
  },
  {
    "text": "mark like you don't know for sure and in truth you know but even things like the Atomics and the",
    "start": "3010340",
    "end": "3015890"
  },
  {
    "text": "shared memory buffers was even when I made the stage for then we had like the meltdown Specter problems so you nothing's perfect but the more you know",
    "start": "3015890",
    "end": "3021890"
  },
  {
    "text": "right so empower your teams plan better for the future that's all questions on anything at all",
    "start": "3021890",
    "end": "3030160"
  },
  {
    "start": "3028000",
    "end": "3118000"
  },
  {
    "text": "yes sir what's the babbles role watch I don't",
    "start": "3030160",
    "end": "3037490"
  },
  {
    "text": "think babble is going away and babble kind of plays in this space I don't know if they have anyone on tc39 but it looks",
    "start": "3037490",
    "end": "3044990"
  },
  {
    "text": "like on that on The Keg acts like that you know on the big feature compatibility the side like babble and tracer those things are all listed as",
    "start": "3044990",
    "end": "3050569"
  },
  {
    "text": "well when es6 was new I had to talk on that",
    "start": "3050569",
    "end": "3058579"
  },
  {
    "text": "when it cuz that was like when all the big stuff happened at once and I get frequent ly other question so we have to",
    "start": "3058579",
    "end": "3064819"
  },
  {
    "text": "use babble now when does that go away and I just have like I'd I don't I don't think it does I could be wrong but I",
    "start": "3064819",
    "end": "3073910"
  },
  {
    "text": "think that babble is just an import price has become one of our build tools right it's just it's just harder how we do things it used to be just wrote some",
    "start": "3073910",
    "end": "3079970"
  },
  {
    "text": "JavaScript and just worked or didn't or worked here and here and here but not there and there and she's become like we",
    "start": "3079970",
    "end": "3085099"
  },
  {
    "text": "in a lot of ways I think of Java as having matured as a language immature as an ecosystem through sheer force of will",
    "start": "3085099",
    "end": "3090559"
  },
  {
    "text": "because it seems to be like the one language to rule them all like it or not you know and so I think that in in that",
    "start": "3090559",
    "end": "3097490"
  },
  {
    "text": "respect I don't think it's going away I think there's just an important player like anybody else I think that just",
    "start": "3097490",
    "end": "3105410"
  },
  {
    "text": "probably do I don't know I mean I don't know if you're if that's really what you're asking or if you think the babble",
    "start": "3105410",
    "end": "3110690"
  },
  {
    "text": "is going to sort of like sunset at some point",
    "start": "3110690",
    "end": "3114309"
  },
  {
    "start": "3118000",
    "end": "3324000"
  },
  {
    "text": "oh I see I see I see me so so the",
    "start": "3118090",
    "end": "3126670"
  },
  {
    "text": "question was there's a right is this bad does all this stuff really even matter doesn't matter what's really formally in",
    "start": "3126670",
    "end": "3132190"
  },
  {
    "text": "the spec or whether anything makes it a stage forward because we have babel to fix that problem anyway but that's I",
    "start": "3132190",
    "end": "3137740"
  },
  {
    "text": "think only true to a point Babel isn't",
    "start": "3137740",
    "end": "3143680"
  },
  {
    "text": "standardized or govern the same way that ecchymosis standards are there's no guarantee that they won't sunset or",
    "start": "3143680",
    "end": "3149020"
  },
  {
    "text": "deprecated something so there's no guarantees just because Babel was working on say say an implementation in stage 3 something drops that they won't",
    "start": "3149020",
    "end": "3156040"
  },
  {
    "text": "get rid of it or that they'll do it the same way and for that matter you know one of these like like briefly",
    "start": "3156040",
    "end": "3161350"
  },
  {
    "text": "mint on the stuff that's coming up in the es next like the import the function style import the module loaders that's",
    "start": "3161350",
    "end": "3166840"
  },
  {
    "text": "gonna be a challenge maybe for a Babel I mean that because a lot of stuff when you look at how no does it or how reactor is doing it you know there's",
    "start": "3166840",
    "end": "3173350"
  },
  {
    "text": "since there wasn't a standard they all started deciding how they want to do it themselves that is actually difficult for a Babylon the I mean the import and",
    "start": "3173350",
    "end": "3179800"
  },
  {
    "text": "particularly maybe one of the hardest things mammal has to deal with because they've already found ways to solve like",
    "start": "3179800",
    "end": "3185680"
  },
  {
    "text": "the problem and now there isn't consistent across the board so so yes in a way Babel solve some of our problems",
    "start": "3185680",
    "end": "3191790"
  },
  {
    "text": "but but it's not a single point of truth it's more like a fix because at any",
    "start": "3191790",
    "end": "3197620"
  },
  {
    "text": "given point in time that point of truth is a moving target and so I think it and the I and the idea should be that over",
    "start": "3197620",
    "end": "3203440"
  },
  {
    "text": "time like Babel shouldn't necessarily be down converting your arrow functions",
    "start": "3203440",
    "end": "3209380"
  },
  {
    "text": "back into like the horribly hideous looking stuff that arrow functions get turned into when you actually see it in es5 and earlier code and if you ever",
    "start": "3209380",
    "end": "3215500"
  },
  {
    "text": "really look at what Babel turns then I'm sure you have like if you really look at this stuff that is output from Babel like that's not necessarily what we",
    "start": "3215500",
    "end": "3221830"
  },
  {
    "text": "really want run in our brain in our browsers natively forever right where we want our features that because they're built natively over time we stop",
    "start": "3221830",
    "end": "3228940"
  },
  {
    "text": "transpiling those things and let the native environments to run them in the way that they're built to be optimized to run it's kind of a long-winded answer",
    "start": "3228940",
    "end": "3236620"
  },
  {
    "text": "I guess because it's like more of a philosophical thing I guess but but but I don't think it solves all the problems I think that it's it's an important tool",
    "start": "3236620",
    "end": "3243100"
  },
  {
    "text": "as the problems continue to be solved I suppose it's interesting conversation though hey yeah",
    "start": "3243100",
    "end": "3251880"
  },
  {
    "text": "no Jason plays in the same space so again like node has a whole section on that and on the compatibility chart the",
    "start": "3253780",
    "end": "3259910"
  },
  {
    "text": "same node doesn't know it run on v8 I think right so so in a lot of specs like",
    "start": "3259910",
    "end": "3267710"
  },
  {
    "text": "know does it part like anything else I talked a lot about browsers because you know a lot of our historic pain with JavaScript was you know why isn't this",
    "start": "3267710",
    "end": "3274460"
  },
  {
    "text": "thing working in my mobile browser the way I expect and so things are standardized but the same rules apply like node node runs on v8 v8 is an",
    "start": "3274460",
    "end": "3281900"
  },
  {
    "text": "implementation of the ACMA script standard and so as these things which you were involving new features come in the same things going to note now node",
    "start": "3281900",
    "end": "3289360"
  },
  {
    "text": "seems to sometimes prioritize different things in a different order because the needs are different you know the the",
    "start": "3289360",
    "end": "3296000"
  },
  {
    "text": "problems that node is solving or differing from the problems maybe that we're solving in a web space but it's",
    "start": "3296000",
    "end": "3301730"
  },
  {
    "text": "still you know it's it's still kind of one standard and that's why I talk to the joke of the very beginning with with",
    "start": "3301730",
    "end": "3307010"
  },
  {
    "text": "the jobs and all the different browsers right which is they're all just stakeholders and no the node.js",
    "start": "3307010",
    "end": "3312860"
  },
  {
    "text": "community is just another stakeholder and what happens to the future the language do I do I think that we will",
    "start": "3312860",
    "end": "3332660"
  },
  {
    "start": "3324000",
    "end": "3600000"
  },
  {
    "text": "ever be satisfied with the state of JavaScript it's such a loaded question I",
    "start": "3332660",
    "end": "3346150"
  },
  {
    "text": "answer yes that'd be nice [Music]",
    "start": "3346150",
    "end": "3352150"
  },
  {
    "text": "no no because we're fickle and no because we're demanding and no because",
    "start": "3352150",
    "end": "3357170"
  },
  {
    "text": "like all of us yeah it's like hey shiny new object that's nice I want the next not shiny new object and we've come to a",
    "start": "3357170",
    "end": "3363920"
  },
  {
    "text": "point we've gotten used to that and now especially because of the month a year by year releases like oh this is nice let's get the next thing I'm part of",
    "start": "3363920",
    "end": "3369710"
  },
  {
    "text": "that I think again just like the question of node I think it comes out of the same situation that we which is that",
    "start": "3369710",
    "end": "3374750"
  },
  {
    "text": "javascript was this like scripting thing for the web which sort of the scripting thing everywhere which turned into mobile stuff and electron and node and",
    "start": "3374750",
    "end": "3381380"
  },
  {
    "text": "like the and and because even you know when I say jobs the one language to rule them all I don't really",
    "start": "3381380",
    "end": "3386900"
  },
  {
    "text": "mean that like it's kind of tongue-in-cheek but like from a globalist standpoint like it sort of is",
    "start": "3386900",
    "end": "3392750"
  },
  {
    "text": "being treated that way and because we try to use JavaScript in so many place in some of different ways we keep finding new ways to do it and because of",
    "start": "3392750",
    "end": "3399560"
  },
  {
    "text": "that we're gonna keep finding new things to do to change the language and it's like this weird cycle thing so do I really think that I mean have you ever",
    "start": "3399560",
    "end": "3406849"
  },
  {
    "text": "have ever really met it like a developer that it's actually truly satisfied with anything including their own code I mean",
    "start": "3406849",
    "end": "3413329"
  },
  {
    "text": "it just isn't it isn't a thing I mean that may just be my experience but but I",
    "start": "3413329",
    "end": "3421099"
  },
  {
    "text": "do I think the things will change over time and there's other there's other stuff like some of the wet assembly things and sort of that's coming you",
    "start": "3421099",
    "end": "3426109"
  },
  {
    "text": "know if you in the.net space we look things like blazer and some of the cool stuff is happening there do I think those things are going to replace JavaScript you know as soon as you",
    "start": "3426109",
    "end": "3434150"
  },
  {
    "text": "racially honestly know now it's never going anywhere like this is the thing forever I'm obviously it's not gonna be the thing forever I don't I don't think",
    "start": "3434150",
    "end": "3439160"
  },
  {
    "text": "it's going away anytime soon and I don't think of the process and the evolution of the language is going to stop anytime soon it may become just one of a number",
    "start": "3439160",
    "end": "3446720"
  },
  {
    "text": "of things that's my completely like one person's to sense about you know but that's my",
    "start": "3446720",
    "end": "3453230"
  },
  {
    "text": "opinion of it yeah yep",
    "start": "3453230",
    "end": "3458109"
  },
  {
    "text": "well so I've sort of what feature my most excited about so all the stuff going on with classes and which I kind",
    "start": "3463710",
    "end": "3470130"
  },
  {
    "text": "of hinted at I get and I'm going to avoid the soapbox about them I think but",
    "start": "3470130",
    "end": "3476550"
  },
  {
    "text": "I saw but I really don't like them and of course the reason is because here's",
    "start": "3476550",
    "end": "3482340"
  },
  {
    "text": "the thing with it it couldn't we've called it something else but we call them classes and the trouble is",
    "start": "3482340",
    "end": "3487380"
  },
  {
    "text": "javascript is like a prototype based language right and prototypal inheritance is not classical inheritance they're not the same they don't work the",
    "start": "3487380",
    "end": "3492780"
  },
  {
    "text": "same way and so when people who aren't just JavaScript developers but our dot and developers or Java developers or",
    "start": "3492780",
    "end": "3497790"
  },
  {
    "text": "whatever else who also have to do JavaScript now because we all do we hear owners classes now but they don't work",
    "start": "3497790",
    "end": "3504180"
  },
  {
    "text": "the way you think and so the reason I like is because I think they may become",
    "start": "3504180",
    "end": "3510120"
  },
  {
    "text": "more palatable and originally it was this idea of just like private fields and then there are private and public",
    "start": "3510120",
    "end": "3516000"
  },
  {
    "text": "fields and static stuff and it's so it's not just about the one proposal what's interesting is it used to be just one proposal it was like private instance",
    "start": "3516000",
    "end": "3521850"
  },
  {
    "text": "methods and now it's split and then split again and there's the static stuff",
    "start": "3521850",
    "end": "3527250"
  },
  {
    "text": "and the public and the private stuff and the decorator stuff and there's a lot of really cool things so if we're going to accept the classes or a thing and that's",
    "start": "3527250",
    "end": "3532890"
  },
  {
    "text": "how we're gonna and especially with things like typescript like the sooner that we can get truly effective classes",
    "start": "3532890",
    "end": "3538320"
  },
  {
    "text": "in place the sooner that typescript can be like a sensible paradigm that sits on top of JavaScript instead of a thing that really doesn't work like JavaScript",
    "start": "3538320",
    "end": "3544560"
  },
  {
    "text": "at all so I think all those features coming together as a group are great",
    "start": "3544560",
    "end": "3549710"
  },
  {
    "text": "because I think that they will make something that at least for me personally I find to be horribly like not palpable palatable become more so",
    "start": "3549710",
    "end": "3557160"
  },
  {
    "text": "and I think make them at least feel a lot more like like what a lot of us will expect them to be in the first place but",
    "start": "3557160",
    "end": "3563250"
  },
  {
    "text": "again like I think that I think it's been stage 3 I think for two years now",
    "start": "3563250",
    "end": "3570170"
  },
  {
    "text": "and it's still very after discussion and it's not there's so much going on but",
    "start": "3570170",
    "end": "3577290"
  },
  {
    "text": "and a lot of his technical details right because it's well how are we going to do that what should this syntax look at how do we have sensible syntax that won't",
    "start": "3577290",
    "end": "3583080"
  },
  {
    "text": "like step on top of something else there's already there so there's all I mean and some of the syntax is actually I think it's still thing kind of weird",
    "start": "3583080",
    "end": "3588570"
  },
  {
    "text": "but I look at those because that because if you use classes in your JavaScript today those will fundamentally change the way you are building your classes",
    "start": "3588570",
    "end": "3595589"
  },
  {
    "text": "and there'll be a lot of new syntax lost if it goes around and so if you're gonna have a look at one thing or a group of things I'd look at those yeah because I",
    "start": "3595589",
    "end": "3603239"
  },
  {
    "text": "I don't think I do think they are gonna make it to stage 4 hopefully soon I have",
    "start": "3603239",
    "end": "3608309"
  },
  {
    "text": "no idea where we are in time the questions a great are we there are we out of time yeah okay cool thank you",
    "start": "3608309",
    "end": "3615329"
  },
  {
    "text": "guys enjoy the rest your evening and enjoy the rest NBC [Applause]",
    "start": "3615329",
    "end": "3621250"
  }
]