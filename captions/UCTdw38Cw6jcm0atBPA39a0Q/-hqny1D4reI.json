[
  {
    "text": "hello everyone.welcome cool to see that that many people found their way to the",
    "start": "230",
    "end": "5879"
  },
  {
    "text": "dungeon that is room five I had not been up here before I ended up on floor three",
    "start": "5879",
    "end": "11219"
  },
  {
    "text": "and then two and then four and then had to walk to basically Scotland to get",
    "start": "11219",
    "end": "16440"
  },
  {
    "text": "here um anyhow so I'm going to talk about",
    "start": "16440",
    "end": "21600"
  },
  {
    "text": "parents and now or software powers in general but I'll be using c-sharp and",
    "start": "21600",
    "end": "26640"
  },
  {
    "text": "net to show show some samples if you're not here to listen about patterns you're",
    "start": "26640",
    "end": "31650"
  },
  {
    "text": "probably in the wrong room it's early I know but hopefully you're all here to listen to this so my name is",
    "start": "31650",
    "end": "39809"
  },
  {
    "text": "Chris Klug I work as a software developer / architect / public speaker",
    "start": "39809",
    "end": "45750"
  },
  {
    "text": "so I have a weird employment situation where a substantial part of my life is",
    "start": "45750",
    "end": "52770"
  },
  {
    "text": "spent going to conferences and talking about different things I feel interesting to talk about my boss",
    "start": "52770",
    "end": "58500"
  },
  {
    "text": "thinks that's a really crap idea but his boss thinks that is a really good idea for my company to go around and share",
    "start": "58500",
    "end": "64470"
  },
  {
    "text": "knowledge so he prompts my boss yeah and",
    "start": "64470",
    "end": "70290"
  },
  {
    "text": "I've done some florals and stuff and things like that but nothing on patterns patterns is kind of a new thing for me",
    "start": "70290",
    "end": "75360"
  },
  {
    "text": "to go around to talk about it's actually my first time ever doing this presentation so hopefully it I don't go",
    "start": "75360",
    "end": "80549"
  },
  {
    "text": "too much over I assume if I just use up about 15 minutes of your break after",
    "start": "80549",
    "end": "86040"
  },
  {
    "text": "this session that's fine right okay okay good um so what are software patterns I",
    "start": "86040",
    "end": "94850"
  },
  {
    "text": "thought before we started we're gonna have a little look at what software patterns are and basically I went to",
    "start": "94850",
    "end": "102210"
  },
  {
    "text": "Wikipedia to figure out what that was you know you send in an abstract for a conference and then when you get the",
    "start": "102210",
    "end": "107340"
  },
  {
    "text": "talk you go to Wikipedia and you figure out what you can talk about that's how I do my talks and it says that it's a",
    "start": "107340",
    "end": "113250"
  },
  {
    "text": "software software design pattern is a general reusable solution to a commonly",
    "start": "113250",
    "end": "118409"
  },
  {
    "text": "occurring problem within a given context in software design makes sense right",
    "start": "118409",
    "end": "124640"
  },
  {
    "text": "interesting part here out of all of that that was also part of a whole page but I",
    "start": "124640",
    "end": "130080"
  },
  {
    "text": "took that out because I thought that was the best part of it it's like okay so it's a general",
    "start": "130080",
    "end": "135140"
  },
  {
    "text": "reusable solution which is what everybody gets stuck on that's software",
    "start": "135140",
    "end": "140190"
  },
  {
    "text": "powders awesome because we can reuse them and their general and we can do everything with them but they generally",
    "start": "140190",
    "end": "145380"
  },
  {
    "text": "missed a little part that says within a given context we don't go ahead and find",
    "start": "145380",
    "end": "153600"
  },
  {
    "text": "a software pattern we like and then try and find a problem we can solve with it",
    "start": "153600",
    "end": "158610"
  },
  {
    "text": "okay it's the other way around we have software patterns because you are probably running into problems while",
    "start": "158610",
    "end": "165870"
  },
  {
    "text": "doing your job that other developers have run into previously likely you're",
    "start": "165870",
    "end": "172140"
  },
  {
    "text": "running into problems every day that developers have been running into since the beginning of coding in general so",
    "start": "172140",
    "end": "179400"
  },
  {
    "text": "we're looking at really old things if you start looking up at looking at software patterns if you google that",
    "start": "179400",
    "end": "186450"
  },
  {
    "text": "it's interesting because you're always just going to find I think it's 24 patterns it's the gold standard there",
    "start": "186450",
    "end": "192480"
  },
  {
    "text": "are 24 patterns no one else really counts and that's because there was a book released like the Gang of Four that",
    "start": "192480",
    "end": "199320"
  },
  {
    "text": "covered 24 design patterns I'm going to show you some of those but I'm also",
    "start": "199320",
    "end": "204780"
  },
  {
    "text": "going to look at some other ones but the interesting thing about those design patterns which are pretty much the the well-known ones that most people have",
    "start": "204780",
    "end": "211560"
  },
  {
    "text": "heard of at some point the book was released in I think 1994 so we're",
    "start": "211560",
    "end": "218370"
  },
  {
    "text": "talking about really old things here but they're still kind of valid to what we're doing today we can make some changes to them we can update them we",
    "start": "218370",
    "end": "224610"
  },
  {
    "text": "can bring them in to the 21st century because we've got new features in our code we can do things in c-sharp that",
    "start": "224610",
    "end": "231510"
  },
  {
    "text": "wasn't possible to do with code in 94 so we can we can update them and I have",
    "start": "231510",
    "end": "237900"
  },
  {
    "text": "done that to some of the demos I've written my own version of them and not a proper copy of what they decided on so",
    "start": "237900",
    "end": "245760"
  },
  {
    "text": "it is not a solution to everything keep that in mind it's a specific thing and",
    "start": "245760",
    "end": "252380"
  },
  {
    "text": "not something where you go this thing I've now learned the visitor pattern that is going to solve every problem",
    "start": "252380",
    "end": "258390"
  },
  {
    "text": "I've ever had doesn't work like that so",
    "start": "258390",
    "end": "263810"
  },
  {
    "text": "I'm gonna look at some cutting some parents and when I got this talked about rather when I came up with this talk I",
    "start": "263810",
    "end": "269009"
  },
  {
    "text": "decided that I'm gonna be cover a bunch of different patterns in an hour I'm just gonna go through like a hundred",
    "start": "269009",
    "end": "274470"
  },
  {
    "text": "different patterns to show why they're really cool and then I realized I've got an hour and if you want to spend a",
    "start": "274470",
    "end": "280979"
  },
  {
    "text": "little bit of time on every pattern you can't really do a hundred powers in an hour it would be really really brief and really boring so I had to scale it down",
    "start": "280979",
    "end": "288979"
  },
  {
    "text": "and I I've scaled it down to the bare minimum there is source code available",
    "start": "288979",
    "end": "297000"
  },
  {
    "text": "after the the session on on github I just uploaded it about seven minutes ago",
    "start": "297000",
    "end": "302550"
  },
  {
    "text": "so you can go and find it it will contain other things than what I'm talking about it contains all the code",
    "start": "302550",
    "end": "308280"
  },
  {
    "text": "you'll see but it will also contain some other patterns because I decided I'm going to do all of these really cool patterns and then they kind of got",
    "start": "308280",
    "end": "314219"
  },
  {
    "text": "killed off while doing the presentation so you'll get a bit more source code but I did decide that I want to go and look",
    "start": "314219",
    "end": "319830"
  },
  {
    "text": "at some patterns that are kind of confusing I want to look at some really cool patterns there is in particular one",
    "start": "319830",
    "end": "328979"
  },
  {
    "text": "pattern that is very very well used all over the world and is very misunderstood",
    "start": "328979",
    "end": "334800"
  },
  {
    "text": "that I want to cover and there are a couple of little useful ones as well it's like little nuggets that aren't",
    "start": "334800",
    "end": "341190"
  },
  {
    "text": "really that impressive they're pretty simple but they do make your life a little bit easier which is kind of what",
    "start": "341190",
    "end": "346440"
  },
  {
    "text": "you want to do with patterns so I've got them grouped into this and I said I've kept them as small as I can or the",
    "start": "346440",
    "end": "352979"
  },
  {
    "text": "number is as low as I can yeah as I",
    "start": "352979",
    "end": "358560"
  },
  {
    "text": "mentioned before if you go and look at the original design patterns they're often really old most of the parents are",
    "start": "358560",
    "end": "364349"
  },
  {
    "text": "old how many of you were even building software professionally in 1994 is one",
    "start": "364349",
    "end": "372750"
  },
  {
    "text": "hand so just imagine that these patterns on top of that they weren't conceived in",
    "start": "372750",
    "end": "378779"
  },
  {
    "text": "1994 they were conceived earlier than that so I was barely a teenager by the",
    "start": "378779",
    "end": "387509"
  },
  {
    "text": "time that they wrote those patterns but they're still interesting but as I said code has changed c-sharp is much more",
    "start": "387509",
    "end": "394469"
  },
  {
    "text": "modern has a bunch of features that they don't have so it's often based around bass classes and",
    "start": "394469",
    "end": "399690"
  },
  {
    "text": "inheritance and I've decided not to use a bunch of bass classes and inheritance because I personally don't like",
    "start": "399690",
    "end": "407300"
  },
  {
    "text": "inheritance I I prefer composition over",
    "start": "407300",
    "end": "413040"
  },
  {
    "text": "inheritance so basically my samples are a little bit different the first time is",
    "start": "413040",
    "end": "420570"
  },
  {
    "text": "I want to call cover or a group of patterns and that's why I put them into the confusing group can anybody explain",
    "start": "420570",
    "end": "427080"
  },
  {
    "text": "to me the difference between these five patterns",
    "start": "427080",
    "end": "432290"
  },
  {
    "text": "not a single person might be while you're in the room listening to me talk about patterns but okay how many of you",
    "start": "432770",
    "end": "439410"
  },
  {
    "text": "have heard of all these five patterns okay so most of you have heard about all the five patterns but most non of you",
    "start": "439410",
    "end": "445710"
  },
  {
    "text": "would say that you can explain what they are and actually you are probably using every single one of these or have done",
    "start": "445710",
    "end": "453750"
  },
  {
    "text": "at some point but they are sort of lumped together and they're really hard to get a grasp on which one is decorator",
    "start": "453750",
    "end": "459750"
  },
  {
    "text": "and what is an adapter and what's the difference between an adapter and the facade and things like that so I thought I'll start out here and I'll start out",
    "start": "459750",
    "end": "466410"
  },
  {
    "text": "with the adapter pattern so we can see what that is now basically go through each one of them and you can see the differences once again I went to",
    "start": "466410",
    "end": "474480"
  },
  {
    "text": "Wikipedia the the source of all knowledge in the world wikipedia says the adapter pattern is a software design",
    "start": "474480",
    "end": "481440"
  },
  {
    "text": "pattern that allows the interface of an existing class to be used as another interface okay so what is the problem",
    "start": "481440",
    "end": "490350"
  },
  {
    "text": "we're trying to solve well say that you have a class that all I'd rather you",
    "start": "490350",
    "end": "496650"
  },
  {
    "text": "have an interface I've turn it around but I would say you have an implementation that you want to use but the interface for that implementation is",
    "start": "496650",
    "end": "502680"
  },
  {
    "text": "wrong so you want to write a logger so you're writing an asp.net core application you need your logger to",
    "start": "502680",
    "end": "510270"
  },
  {
    "text": "implement the AI logger interface for that to work right but you want to use",
    "start": "510270",
    "end": "515930"
  },
  {
    "text": "some logger that you've written before you want a log use log for net or whatever so what you create is an",
    "start": "515930",
    "end": "522120"
  },
  {
    "text": "adapter you create a class that internally has an instance of the implementation that you won't use but",
    "start": "522120",
    "end": "528480"
  },
  {
    "text": "externally has an API an interface that looks like the interface that you want to use so all is",
    "start": "528480",
    "end": "533960"
  },
  {
    "text": "doing is basically adapting calls so when the eye logger dot worn is called",
    "start": "533960",
    "end": "539060"
  },
  {
    "text": "or whatever the interfaces you might just have a simple one-liner that goes log4net dot log and then passing in worn",
    "start": "539060",
    "end": "547040"
  },
  {
    "text": "as a enum instead because that's the interface that they are using instead so it's basically just a wrapper class that",
    "start": "547040",
    "end": "553220"
  },
  {
    "text": "doesn't make any changes at all it doesn't change the functionality it doesn't do anything all it does is",
    "start": "553220",
    "end": "559280"
  },
  {
    "text": "mapping an interface that you need to an implementation that has the wrong API or",
    "start": "559280",
    "end": "564500"
  },
  {
    "text": "the wrong interface so if you look at this basically you have an intern a client app that needs an ilogger cause",
    "start": "564500",
    "end": "571160"
  },
  {
    "text": "log on the ilogger interface actual implementation is the log4net",
    "start": "571160",
    "end": "577070"
  },
  {
    "text": "adapter the log4net internally has an instance of some form of log4net logger",
    "start": "577070",
    "end": "583100"
  },
  {
    "text": "thingy and adapts the log method method from the eye logger interface to an info",
    "start": "583100",
    "end": "589700"
  },
  {
    "text": "call on the log Fernet instance instead so it's just adapting calls very very thin very simple class I assume that",
    "start": "589700",
    "end": "597470"
  },
  {
    "text": "most do you have written this at some point okay which then takes us to the",
    "start": "597470",
    "end": "604550"
  },
  {
    "text": "decorator the decorator is interesting because it's very very similar and that's where people's that's why I've",
    "start": "604550",
    "end": "610850"
  },
  {
    "text": "grouped them together because they kind of do the same thing they're all code wise kind of similar so the decorator",
    "start": "610850",
    "end": "617390"
  },
  {
    "text": "says the decorator pattern allows allows behavior to be added to an individual object dynamically so the description of",
    "start": "617390",
    "end": "625610"
  },
  {
    "text": "what the pattern does is very very different but the actual implementation looks very similar which is why people",
    "start": "625610",
    "end": "632990"
  },
  {
    "text": "get tripped up when you sit down you're coding it you go oh this is an adapter no it's actually decorator so the",
    "start": "632990",
    "end": "642290"
  },
  {
    "text": "problem that we're trying to solve with the decorator is that you have an implementation of something that does",
    "start": "642290",
    "end": "647570"
  },
  {
    "text": "most of what you need and you want to use that you don't want to rewrite that because you need to add some new",
    "start": "647570",
    "end": "652880"
  },
  {
    "text": "functionality so you need what you've got and then some more you need to",
    "start": "652880",
    "end": "659150"
  },
  {
    "text": "decorate your existing class with more functionality an example would be I've used it for",
    "start": "659150",
    "end": "666210"
  },
  {
    "text": "caching for example so you have a caching decorator the caching decorator",
    "start": "666210",
    "end": "671320"
  },
  {
    "text": "has the same interface as my whatever repository or whatever I'm using but",
    "start": "671320",
    "end": "677710"
  },
  {
    "text": "internally it has an instance of the thing that I want to use so say that I want to do let's ignore caching let's do",
    "start": "677710",
    "end": "683440"
  },
  {
    "text": "it batching I want to batch my log writes so I want to be able to just pump things into my log log system but I want",
    "start": "683440",
    "end": "689980"
  },
  {
    "text": "to batch my log logging so basically it just writes every ten messages forever so it doesn't become to chat into the",
    "start": "689980",
    "end": "695440"
  },
  {
    "text": "database I already have my log implementation that logs to the database what I do is I create a log adapter or a",
    "start": "695440",
    "end": "703750"
  },
  {
    "text": "decorator which is like the batching log decorator it has the batching logic it",
    "start": "703750",
    "end": "709330"
  },
  {
    "text": "looks like an ilogger and all it does it has the batching logic but whenever it",
    "start": "709330",
    "end": "714760"
  },
  {
    "text": "needs to write the stuff their database it has an instance of a logger internally so basically it wraps an",
    "start": "714760",
    "end": "720700"
  },
  {
    "text": "instance of a logger but add some functionality on top of it so it's the same API but adds functionality to it",
    "start": "720700",
    "end": "727960"
  },
  {
    "text": "and then you can wrap many of them so you can have a decorator that reference is an ilogger which actually is another decorator that",
    "start": "727960",
    "end": "734860"
  },
  {
    "text": "references another eye logger which could be another decorator that references another eye logger and you",
    "start": "734860",
    "end": "739960"
  },
  {
    "text": "can create these chains of objects without inheritance which means that I can have an ilogger and then I can add",
    "start": "739960",
    "end": "745660"
  },
  {
    "text": "oh it would be cool to have batching in this project so I'm gonna add batching to it oh by the way it would be kind of",
    "start": "745660",
    "end": "750850"
  },
  {
    "text": "cool if I could add environment information to the log system automatically so I didn't have to pass",
    "start": "750850",
    "end": "755980"
  },
  {
    "text": "in local environment information all the time I'll have an environment or decorator that does that for me and we",
    "start": "755980",
    "end": "762340"
  },
  {
    "text": "can use kind of build these layers on top of what we've got with new functionality so if we look at that the",
    "start": "762340",
    "end": "768970"
  },
  {
    "text": "logger implementation here once again client app has an ilogger cause log on the ilogger but what it's",
    "start": "768970",
    "end": "776440"
  },
  {
    "text": "actually got as the implementation is a batch decorator the batch decorator",
    "start": "776440",
    "end": "781770"
  },
  {
    "text": "wraps an instance of log4net logger but it doesn't wrap it doesn't say inside of",
    "start": "781770",
    "end": "788440"
  },
  {
    "text": "the batch decorator new log4net logger because in that case we're talking about an adapter the decorate",
    "start": "788440",
    "end": "796700"
  },
  {
    "text": "has an internal instance of ilogger so it's agnostic towards what it's actually wrapping its wrapping an abstract thing",
    "start": "796700",
    "end": "803450"
  },
  {
    "text": "which means that this thing will write out the log thing to look for net but",
    "start": "803450",
    "end": "809270"
  },
  {
    "text": "the batch decorator will make sure that it only makes those calls every X amount of time wherever the X amount of log",
    "start": "809270",
    "end": "816110"
  },
  {
    "text": "increase or something like that and then you can go ahead and you can basically decorate your batch decorator with an M",
    "start": "816110",
    "end": "823970"
  },
  {
    "text": "info decorator in this case that adds environment information same sample as I",
    "start": "823970",
    "end": "829130"
  },
  {
    "text": "had before client app is none the wiser it just goes I have an ilogger that works the environment info decorator has",
    "start": "829130",
    "end": "836060"
  },
  {
    "text": "no idea what's actually happening underneath I've just got an eye info or NSRI logger and we can build as I said",
    "start": "836060",
    "end": "842150"
  },
  {
    "text": "these chains of functionality to it very common scenarios as I said would be for",
    "start": "842150",
    "end": "847250"
  },
  {
    "text": "example caching you have a repository where you can go and get data and that",
    "start": "847250",
    "end": "852260"
  },
  {
    "text": "has no caching built in because that's not its concern and then you add a decorator on top of your repository that",
    "start": "852260",
    "end": "858680"
  },
  {
    "text": "has caching built in so that you get a cache layer on top of it which is kind of neat because it means that you can",
    "start": "858680",
    "end": "863930"
  },
  {
    "text": "add and remove the caches you feel like so it's a wrapping thing just like the",
    "start": "863930",
    "end": "870260"
  },
  {
    "text": "adapter but instead of just adapting from one API one interface to another it",
    "start": "870260",
    "end": "875360"
  },
  {
    "text": "has the same interface as the thing it wraps but it adds functionality on top of it make sense anyone ever try it very",
    "start": "875360",
    "end": "885680"
  },
  {
    "text": "few it's actually quite a neat power it's very simple but it does offer a lot of flexibility and facade another one of",
    "start": "885680",
    "end": "894710"
  },
  {
    "text": "these kind of does the same thing but no role definition of a facade is an object",
    "start": "894710",
    "end": "900230"
  },
  {
    "text": "that serves as a front-facing interface masking more complex underlying or structural code okay this is actually",
    "start": "900230",
    "end": "909260"
  },
  {
    "text": "quite a neat thing once again they're the patterns I've chosen are things I like because they make my life easier so",
    "start": "909260",
    "end": "915380"
  },
  {
    "text": "the problem we're facing in this case is that you're interfacing with a system that is really complex it needs you to",
    "start": "915380",
    "end": "922850"
  },
  {
    "text": "know a whole bunch of how that system works and it's really complex and to perfectly honest I've been on a ton of",
    "start": "922850",
    "end": "928850"
  },
  {
    "text": "projects where we're interfacing towards a third party system which is really complicated and",
    "start": "928850",
    "end": "934610"
  },
  {
    "text": "there's like one developer on the team that has all the knowledge of how to talk to that system and we can't really",
    "start": "934610",
    "end": "940610"
  },
  {
    "text": "get that throughout the team so what you do is you put in a facade you let that developer who knows how that system",
    "start": "940610",
    "end": "946430"
  },
  {
    "text": "works put in what is called a facade so the facade solves this by simplifying",
    "start": "946430",
    "end": "953269"
  },
  {
    "text": "the API say that you have a car car has all of these things to be able to start",
    "start": "953269",
    "end": "959240"
  },
  {
    "text": "the car you actually need to insert the key and you have to press the clutch and you have to turn the key right we'll do",
    "start": "959240",
    "end": "964490"
  },
  {
    "text": "that simply but it was a simplest example I could come up with instead of",
    "start": "964490",
    "end": "969500"
  },
  {
    "text": "having to figure out that to be able to use this car thingy I'm gonna have to",
    "start": "969500",
    "end": "974720"
  },
  {
    "text": "call insert key press clutch turn key what I want to do is start right so it",
    "start": "974720",
    "end": "980180"
  },
  {
    "text": "would be much nicer if I could just do start so you put in a facade that basically has the method start and then",
    "start": "980180",
    "end": "987709"
  },
  {
    "text": "that makes sure to handle all of the complexities underneath this is a very simple sample but there could be way",
    "start": "987709",
    "end": "993410"
  },
  {
    "text": "more complicated things there could be default values that you might want to fill in or several calls that needs to",
    "start": "993410",
    "end": "999199"
  },
  {
    "text": "be made to different systems to get something to work but in the end the facade will basically take this big",
    "start": "999199",
    "end": "1005529"
  },
  {
    "text": "complex system with all of its details and simple down to an interface that you",
    "start": "1005529",
    "end": "1010779"
  },
  {
    "text": "know how to use it often very very often means that you take a very big complex",
    "start": "1010779",
    "end": "1016779"
  },
  {
    "text": "system that can do a ton of things and you basically cut off all those features you go and say we don't need faith",
    "start": "1016779",
    "end": "1023320"
  },
  {
    "text": "features abcdefg but this little feature over here that would be kind of cool to",
    "start": "1023320",
    "end": "1029290"
  },
  {
    "text": "house will do facade cuts of all the other things gives the user the ability to use this little part of the system so",
    "start": "1029290",
    "end": "1034660"
  },
  {
    "text": "we don't have to get this big thing anybody use a facade look at that most",
    "start": "1034660",
    "end": "1041319"
  },
  {
    "text": "of you have used these patterns nobody wanted to explain them um proxy proxy",
    "start": "1041319",
    "end": "1048160"
  },
  {
    "text": "pretty similar again so a proxy is a wrapper or an agent object that is being",
    "start": "1048160",
    "end": "1054040"
  },
  {
    "text": "called by the client to access the real serving objects once again is a kind of",
    "start": "1054040",
    "end": "1060370"
  },
  {
    "text": "a thing that you build to be able to hide something also wrap something else or basically",
    "start": "1060370",
    "end": "1065710"
  },
  {
    "text": "make something disappear for you so what the proxy does is basically you",
    "start": "1065710",
    "end": "1070840"
  },
  {
    "text": "have a system part of your system that you need to talk to but it's not part of",
    "start": "1070840",
    "end": "1077740"
  },
  {
    "text": "your process for example it's not part of your system it's something running somewhere else potentially but you need",
    "start": "1077740",
    "end": "1083650"
  },
  {
    "text": "to call it as if it was a part of your program you all done this how many of",
    "start": "1083650",
    "end": "1089110"
  },
  {
    "text": "you have ever called a web service all of you who do not raise your hands what",
    "start": "1089110",
    "end": "1095470"
  },
  {
    "text": "do you do for a living because I thought that was kind of ubiquitous we all do web services just as way it works it",
    "start": "1095470",
    "end": "1101380"
  },
  {
    "text": "used to be WCF and now it's all rest but it's kind of same thing and what we do with these",
    "start": "1101380",
    "end": "1108490"
  },
  {
    "text": "services that we need to call is we create a client object right we create a version of that object that runs inside",
    "start": "1108490",
    "end": "1114580"
  },
  {
    "text": "of our program so that when we call a method on that object it's just as if we are calling that object the only",
    "start": "1114580",
    "end": "1121419"
  },
  {
    "text": "difference is that when we're calling that object it actually sends off the thing and calls that somewhere else and",
    "start": "1121419",
    "end": "1126700"
  },
  {
    "text": "in most cases when it comes to web services they're probably on a different machine anybody try also thought that",
    "start": "1126700",
    "end": "1135970"
  },
  {
    "text": "had a rim remoting thing that was really cool that did the same thing for you but you could call objects in other",
    "start": "1135970",
    "end": "1141820"
  },
  {
    "text": "processes I'd forgotten name right now there are lots of these round um how many went to Damion Edwards and",
    "start": "1141820",
    "end": "1150010"
  },
  {
    "text": "David Fowler's talk yesterday about dotnet core 2.2 you remember that they",
    "start": "1150010",
    "end": "1155620"
  },
  {
    "text": "said that they were going to add the ability to right-click and add reference to a swagger file or yeah that is",
    "start": "1155620",
    "end": "1164080"
  },
  {
    "text": "creating basically a proxy object for you it's just that you don't have to do it yourself you just say my service is",
    "start": "1164080",
    "end": "1169090"
  },
  {
    "text": "over there here's a definition of my service just as whistle was for WCF and it generates code for you for an object",
    "start": "1169090",
    "end": "1175840"
  },
  {
    "text": "that looks like you're calling it locally but it's actually being closed somewhere else it can be other things I",
    "start": "1175840",
    "end": "1183789"
  },
  {
    "text": "want to mention that it doesn't necessarily need to be crossing the internet or things like that but it's a way for you to call objects that are not",
    "start": "1183789",
    "end": "1189850"
  },
  {
    "text": "locally local to your application so the client says I switch in this case the I",
    "start": "1189850",
    "end": "1196149"
  },
  {
    "text": "switch is implemented by this way proxy and it calls just toggle and it doesn't actually know what's happening",
    "start": "1196149",
    "end": "1202059"
  },
  {
    "text": "it just assumes that I'm calling some piece of code but in the real world it's actually going across my weird network",
    "start": "1202059",
    "end": "1207309"
  },
  {
    "text": "at home maybe I'm turning on the lights in the ceiling it's really weird that we are literally turning on lights",
    "start": "1207309",
    "end": "1212559"
  },
  {
    "text": "wirelessly now but that's why it works so proxies are kind of useful and then",
    "start": "1212559",
    "end": "1221830"
  },
  {
    "text": "the last one which is the odd one out it doesn't quite fit in here but it kind of does fit in here does anybody know what",
    "start": "1221830",
    "end": "1229000"
  },
  {
    "text": "a bridge is not a single person okay the",
    "start": "1229000",
    "end": "1235929"
  },
  {
    "text": "bridge pattern is interesting and you've all done it I promise you you have all done this at some point the bridge",
    "start": "1235929",
    "end": "1242200"
  },
  {
    "text": "pattern blah blah blah is meant to decouple an abstraction from its implementation so that the two can vary",
    "start": "1242200",
    "end": "1248260"
  },
  {
    "text": "independently did that make you smarter did you mean that that did that make you",
    "start": "1248260",
    "end": "1254020"
  },
  {
    "text": "understand what the bridge is no because that's the thing I keep I keep going to",
    "start": "1254020",
    "end": "1260320"
  },
  {
    "text": "places on the internet and I read about software development and I read stuff like that and I go I have no idea what",
    "start": "1260320",
    "end": "1265779"
  },
  {
    "text": "that meant and I'm like thinking I must be the only one I must be the only one that raised this and don't get it at all",
    "start": "1265779",
    "end": "1271450"
  },
  {
    "text": "because it's still being written like this but apparently I'm not alone at least so say that you have an",
    "start": "1271450",
    "end": "1279309"
  },
  {
    "text": "abstraction that basically is dependent on two different dimensions so you've got two things that will vary your",
    "start": "1279309",
    "end": "1285279"
  },
  {
    "text": "abstraction which might end up being a lot of different implementations so for",
    "start": "1285279",
    "end": "1291970"
  },
  {
    "text": "example say that you have a shape renderer it renders shapes the",
    "start": "1291970",
    "end": "1299880"
  },
  {
    "text": "implementation of that is default and high contrast so I have two different versions of that so I want to be able to",
    "start": "1299880",
    "end": "1305200"
  },
  {
    "text": "render my shapes in a default version but I also want to be able to have logic in order to do high contrast for people",
    "start": "1305200",
    "end": "1311559"
  },
  {
    "text": "with poor eyesight but then that implementation also needs to support both WinForms and WPF right so I've got",
    "start": "1311559",
    "end": "1319960"
  },
  {
    "text": "two different axes I've got the default versus high contrast and I got the platform there I'm running on which is",
    "start": "1319960",
    "end": "1325539"
  },
  {
    "text": "WinForms and WPF so I end up having to do four classes here right",
    "start": "1325539",
    "end": "1331100"
  },
  {
    "text": "I need to do the default WinForms default WPF hai contracts winform",
    "start": "1331100",
    "end": "1336110"
  },
  {
    "text": "high-contrast WPF we can all agree on that right and then your boss comes and",
    "start": "1336110",
    "end": "1341840"
  },
  {
    "text": "says hey grayscale would be cool damn it okay so I need to create",
    "start": "1341840",
    "end": "1347210"
  },
  {
    "text": "grayscale WinForms grayscale WPF now we're up to six different implementations that we have to choose from and then somebody comes to says hey",
    "start": "1347210",
    "end": "1354919"
  },
  {
    "text": "dude's a Marine is kind of cool oh so we end up having to do as a marine version",
    "start": "1354919",
    "end": "1361909"
  },
  {
    "text": "arey front of these so with just three options in each axis you end up with",
    "start": "1361909",
    "end": "1367100"
  },
  {
    "text": "nine different implementations does that seem like a useful solution it's gonna",
    "start": "1367100",
    "end": "1373279"
  },
  {
    "text": "end up with just blowing up and having many many many many implementations and you having to figure out which one to",
    "start": "1373279",
    "end": "1378889"
  },
  {
    "text": "use so what the bridge pattern says is let's split it let's split the two axis",
    "start": "1378889",
    "end": "1385129"
  },
  {
    "text": "into two different things and basically say we'll have an eye shape renderer which is implemented by the default and",
    "start": "1385129",
    "end": "1391700"
  },
  {
    "text": "the high contrast thing that implementation is in turn dependent on eye renderer which can then be WinForms",
    "start": "1391700",
    "end": "1399529"
  },
  {
    "text": "and WPF so I can just go ahead and implement these things so the default",
    "start": "1399529",
    "end": "1405340"
  },
  {
    "text": "implemented deep default shape renderer takes an instance of I renderer to do",
    "start": "1405340",
    "end": "1410990"
  },
  {
    "text": "the actual rendering so it does a part of its logic about what it needs to do and then cause the renderer to do the",
    "start": "1410990",
    "end": "1416870"
  },
  {
    "text": "actual rendering and the high contrast one will basically change the colors of the shape and then send the shape to the renderer to do the actual rendering so",
    "start": "1416870",
    "end": "1423379"
  },
  {
    "text": "we end up having to do less code and if we then go ahead and we add high contra or grayscale and WPF we just add on each",
    "start": "1423379",
    "end": "1430879"
  },
  {
    "text": "layer we add a new implementation and we combine them so we kind of end up or",
    "start": "1430879",
    "end": "1436279"
  },
  {
    "text": "kind of we end up with a double abstraction so you get one thing that abstracts the whole thing but that",
    "start": "1436279",
    "end": "1442100"
  },
  {
    "text": "abstraction in turn takes a dependency on another abstraction to do some of its work I can see that this is the kind of",
    "start": "1442100",
    "end": "1449629"
  },
  {
    "text": "cool pattern and I'm pretty sure have you ever anyone done this before yeah we kind of do this we just didn't",
    "start": "1449629",
    "end": "1455570"
  },
  {
    "text": "know that was called a bridge but I must admit I very often take this way further",
    "start": "1455570",
    "end": "1461179"
  },
  {
    "text": "because basically we've talked about composition over inheritance software programming for a while now and",
    "start": "1461179",
    "end": "1466430"
  },
  {
    "text": "it's kind of this we keep moving things apart and also we're not just doing two levels anymore we're passing in and",
    "start": "1466430",
    "end": "1472880"
  },
  {
    "text": "composing our objects in a way different ways so this might not be as important",
    "start": "1472880",
    "end": "1477980"
  },
  {
    "text": "today as it was previously and if we look at the comparison between the",
    "start": "1477980",
    "end": "1483860"
  },
  {
    "text": "different different patterns so what we've got with the adapter which wraps an implementation of something but it",
    "start": "1483860",
    "end": "1490340"
  },
  {
    "text": "changes to interface and keeps the functionality the same right that correct wraps an implementation of",
    "start": "1490340",
    "end": "1496040"
  },
  {
    "text": "something it uses the same interface as the thing that it wraps but it adds",
    "start": "1496040",
    "end": "1502340"
  },
  {
    "text": "functionality so they are different even though they look from code very similar the facade doesn't wrap anything it",
    "start": "1502340",
    "end": "1510020"
  },
  {
    "text": "basically creates a brand new interface for you to use but the functionality behind that interface is going to be",
    "start": "1510020",
    "end": "1515840"
  },
  {
    "text": "something that's already there so we're not changing the functionality we're just cutting down the API or changing the interface that we won't use without",
    "start": "1515840",
    "end": "1521870"
  },
  {
    "text": "wrapping it proxy new implementation so it doesn't wrap anything some form of it",
    "start": "1521870",
    "end": "1529730"
  },
  {
    "text": "uses the same interface as the other thing that you're calling it's just you're calling it locally and that's being called over there and the function",
    "start": "1529730",
    "end": "1536870"
  },
  {
    "text": "it doesn't change the functionality and the bridge is kind of hard to put into this thing because it's kind of two",
    "start": "1536870",
    "end": "1542630"
  },
  {
    "text": "layer abstraction thingies so it partly wraps some of the functionality is wrapped and some of it is implemented by",
    "start": "1542630",
    "end": "1548600"
  },
  {
    "text": "the same thing it can use an existing interface and adding or removing",
    "start": "1548600",
    "end": "1554360"
  },
  {
    "text": "functionality can depends on what you're doing with it so let's have a look at some code and I love the person who put",
    "start": "1554360",
    "end": "1560870"
  },
  {
    "text": "up a podium for Smurfs so what we're",
    "start": "1560870",
    "end": "1567620"
  },
  {
    "text": "gonna do here is we're gonna have a look at so this is the source code that I said it's on it's on github so I'm just",
    "start": "1567620",
    "end": "1573530"
  },
  {
    "text": "gonna have a quick look at how these look so we start with the adapter and I have a very very simple implementation",
    "start": "1573530",
    "end": "1578660"
  },
  {
    "text": "here writing everything in one class",
    "start": "1578660",
    "end": "1583760"
  },
  {
    "text": "seems like a really good idea when I have a lot of screen real estate when you go to font size 25 that comes really",
    "start": "1583760",
    "end": "1589760"
  },
  {
    "text": "small so basically I've got my logger my logger implementation here it takes a log level and a message log level is",
    "start": "1589760",
    "end": "1597530"
  },
  {
    "text": "just an and then I have a an ilogger implementation called log4net logger so",
    "start": "1597530",
    "end": "1604320"
  },
  {
    "text": "basically it wraps log the log for net logger creates the interface that I need",
    "start": "1604320",
    "end": "1611610"
  },
  {
    "text": "and translates all each one of these calls to that interface - cools that",
    "start": "1611610",
    "end": "1616860"
  },
  {
    "text": "correspond to what log4net expects so that's that after if we have a look at",
    "start": "1616860",
    "end": "1624570"
  },
  {
    "text": "next one which is decorator we have the actually the same sample as I showed you before don't look at what I'm actually",
    "start": "1624570",
    "end": "1631560"
  },
  {
    "text": "doing in the main here I've really stupid code but I want to show you the patterns not the code so it's all about is it Friday service and longer and",
    "start": "1631560",
    "end": "1637590"
  },
  {
    "text": "longer stuff so I've gotten is it Friday service we all need one of those in our",
    "start": "1637590",
    "end": "1643320"
  },
  {
    "text": "projects then I have an implementation of I is it Friday service which you called is it Friday service which",
    "start": "1643320",
    "end": "1650190"
  },
  {
    "text": "basically returns whether or not is Friday and then I have a caching version",
    "start": "1650190",
    "end": "1655650"
  },
  {
    "text": "of the is it Friday service because obviously they call to this this call",
    "start": "1655650",
    "end": "1661770"
  },
  {
    "text": "here is so heavy that we need to cache the result right can't keep running that over and over so what the caching thing",
    "start": "1661770",
    "end": "1668550"
  },
  {
    "text": "does it basically takes an implementation of I is it Friday service and the cache configuration that it",
    "start": "1668550",
    "end": "1674070"
  },
  {
    "text": "needs and whenever we call and implements is a Friday service and whenever it's being implemented called",
    "start": "1674070",
    "end": "1680040"
  },
  {
    "text": "the interface being called is a Friday it basically looks at can I do something else do I have a cache value no I don't",
    "start": "1680040",
    "end": "1687480"
  },
  {
    "text": "then I use the internal version otherwise I return the cash value so I added caching to my is the Friday",
    "start": "1687480",
    "end": "1692940"
  },
  {
    "text": "service and then I have a login version of it as well so basically every time this thing takes in I is it Friday",
    "start": "1692940",
    "end": "1698580"
  },
  {
    "text": "service whenever it's being called it calls the service but it also Lord logs",
    "start": "1698580",
    "end": "1703710"
  },
  {
    "text": "out the coals I can see what's going on so decorators are canonize is a nice way",
    "start": "1703710",
    "end": "1709860"
  },
  {
    "text": "of basically adding functionality without doing composition and without doing inheritance we have the facade in",
    "start": "1709860",
    "end": "1719630"
  },
  {
    "text": "this case the facade is",
    "start": "1719630",
    "end": "1724220"
  },
  {
    "text": "basically a it does a login facade here and it sorry I got the logger up here I",
    "start": "1725270",
    "end": "1734520"
  },
  {
    "text": "logger and then I my logging facade logging facade here that basically takes",
    "start": "1734520",
    "end": "1739860"
  },
  {
    "text": "the logger and goes and sorry I need to",
    "start": "1739860",
    "end": "1745320"
  },
  {
    "text": "go down here so you can see the the logger here so the implementation that I have is the console logger here and the",
    "start": "1745320",
    "end": "1750720"
  },
  {
    "text": "console logger takes in a type and a console color and a format and a log",
    "start": "1750720",
    "end": "1756150"
  },
  {
    "text": "level and a bunch of different things here and the message and writes that out to the foreground order to the console",
    "start": "1756150",
    "end": "1762510"
  },
  {
    "text": "so my facade here to make it simpler for the user to use this thing I've created a facade called high logger which has a",
    "start": "1762510",
    "end": "1769140"
  },
  {
    "text": "simple log method and what that does it basically makes it very very simple to call log passing a level and message and",
    "start": "1769140",
    "end": "1775590"
  },
  {
    "text": "then this thing the facade takes away all the pain of having to figure out the type and the color and all other things",
    "start": "1775590",
    "end": "1781950"
  },
  {
    "text": "that's needed by the system behind not that I'm saying that that's a complicated back-end but it's it's kind",
    "start": "1781950",
    "end": "1787200"
  },
  {
    "text": "of assaulting it at least and finally I have a proxy here which is once again",
    "start": "1787200",
    "end": "1794070"
  },
  {
    "text": "and and is it Friday service and yeah",
    "start": "1794070",
    "end": "1805290"
  },
  {
    "text": "okay so in this case I'm sorry well since I wrote this specific one and this thing isn't actually calling anything",
    "start": "1805290",
    "end": "1811680"
  },
  {
    "text": "off in somewhere else it's just creating",
    "start": "1811680",
    "end": "1817080"
  },
  {
    "text": "an instance for me so it basically creates a proxy for an object that's in memory because I didn't want to go ahead",
    "start": "1817080",
    "end": "1822750"
  },
  {
    "text": "and build a web service mode that stuff but what it does it it basically goes ahead and check some user name",
    "start": "1822750",
    "end": "1828840"
  },
  {
    "text": "information and then calls the instance as though it's local so you could imagine this thing actually calling off",
    "start": "1828840",
    "end": "1835440"
  },
  {
    "text": "to a web service it was just too much work to write that having that said your proxy object doesn't necessarily have to",
    "start": "1835440",
    "end": "1842400"
  },
  {
    "text": "be remote the definition of a proxy object is a proxy is actually just talking to an object which could be",
    "start": "1842400",
    "end": "1849420"
  },
  {
    "text": "something simple as what I'm doing here we're just creating an instance of it it doesn't necessarily need to be somewhere",
    "start": "1849420",
    "end": "1854460"
  },
  {
    "text": "else it could be a proxy to an object that is too complicated to create it kind of becomes a single tongue",
    "start": "1854460",
    "end": "1859860"
  },
  {
    "text": "through the proxy so very code-wise I'm",
    "start": "1859860",
    "end": "1865140"
  },
  {
    "text": "going through them quite fast I know but you've got all the code to play around with and I do believe that most of them you can actually go in and press f5 and",
    "start": "1865140",
    "end": "1871500"
  },
  {
    "text": "it runs which is not what my code normally does yes oh did I miss the",
    "start": "1871500",
    "end": "1878429"
  },
  {
    "text": "ridge yes I did thank you for that bridge to show off the bridge",
    "start": "1878429",
    "end": "1884130"
  },
  {
    "text": "I wrote let's kill the main here because I don't want to show that so once again I've got a logger but I've taken my eye",
    "start": "1884130",
    "end": "1892230"
  },
  {
    "text": "logger which has a log method and I've broken it into a logger and the log",
    "start": "1892230",
    "end": "1897990"
  },
  {
    "text": "writer sigh but one part that does the logging in one part that actually writes it out to the console or to whatever I",
    "start": "1897990",
    "end": "1903330"
  },
  {
    "text": "want sorry not not the console specifically and then I've created the implementation here so the",
    "start": "1903330",
    "end": "1908940"
  },
  {
    "text": "implementation here is a simple logger the simple logger takes an I log writer and creates a very simple log entry for",
    "start": "1908940",
    "end": "1915840"
  },
  {
    "text": "me thus simple log write simple logger the advanced one is a bit more",
    "start": "1915840",
    "end": "1922620"
  },
  {
    "text": "complicated because it rise advanced ahead of it and also writes out some time and a few little other things so it",
    "start": "1922620",
    "end": "1928440"
  },
  {
    "text": "basically adds a bit more to the logging statement but once again depends on the log writer to do the actual work it just",
    "start": "1928440",
    "end": "1933809"
  },
  {
    "text": "formats it and then I have a configurable thing here where not only does it take it alot log writer but it",
    "start": "1933809",
    "end": "1939870"
  },
  {
    "text": "also takes a format that I can use to basically create my own log system or log entries and but all of these are",
    "start": "1939870",
    "end": "1947730"
  },
  {
    "text": "dependent on an implementation of log writer a log writer so I have a console",
    "start": "1947730",
    "end": "1952799"
  },
  {
    "text": "log writer and the log4net log writer so I can basically combine these so today I want to have the advanced logger with",
    "start": "1952799",
    "end": "1959820"
  },
  {
    "text": "with log4net and I can combine those so during development maybe I do a lot of logging but I want to have more",
    "start": "1959820",
    "end": "1965549"
  },
  {
    "text": "information so I might do a configurable logger with some extra information and just a console logger for my local",
    "start": "1965549",
    "end": "1970649"
  },
  {
    "text": "machine so we can combine this that's the bridge thank you for reminding me or that did all of these makes sort of",
    "start": "1970649",
    "end": "1977789"
  },
  {
    "text": "sense cool so visitor pattern this is cool but",
    "start": "1977789",
    "end": "1988610"
  },
  {
    "text": "really hard to explain why it's cool it's just one of these you read about it and you start playing with it and you",
    "start": "1988610",
    "end": "1993650"
  },
  {
    "text": "saw this it's light bulb lights up and you go oh that is smart that is really",
    "start": "1993650",
    "end": "1998810"
  },
  {
    "text": "smart and then think it's really cool than that one more and you're in the shower and you're going why is that really smart",
    "start": "1998810",
    "end": "2004480"
  },
  {
    "text": "I'm sorry questioning this pattern it looks really cool but it's it's I'm coming into there are other ways of",
    "start": "2004480",
    "end": "2009820"
  },
  {
    "text": "doing that today but I thought I'd show it so this the visitor pattern is a way",
    "start": "2009820",
    "end": "2015760"
  },
  {
    "text": "of separating algorithm from an object structure which is operated which it operates so you need to add new",
    "start": "2015760",
    "end": "2022980"
  },
  {
    "text": "algorithms to an object without modifying them so you might need to say that you have a shape which happens to",
    "start": "2022980",
    "end": "2028990"
  },
  {
    "text": "be my example and you need to have a way of calculating the area of that shape okay cool I'll add a get area method oh",
    "start": "2028990",
    "end": "2035790"
  },
  {
    "text": "by the way we're kind of cool if we're rendering this on screen that you could also tell me x and y coordinates or you",
    "start": "2035790",
    "end": "2043210"
  },
  {
    "text": "have an x and y and you want to be able to figure out where it's positioned on the screen so I need another algorithm to that and oh it would be kind of cool",
    "start": "2043210",
    "end": "2049060"
  },
  {
    "text": "if we also somehow could build a way of saying I have multiple shapes please tell me the size of the area I need to",
    "start": "2049060",
    "end": "2055750"
  },
  {
    "text": "create to be able to render all this shape and they still fit in and things like that all of these are new sort of",
    "start": "2055750",
    "end": "2061060"
  },
  {
    "text": "things that come along the way so often we go back and we change your objects we add new functionality to them to support",
    "start": "2061060",
    "end": "2066550"
  },
  {
    "text": "these new calculations the visitor pattern basically says no you shouldn't go and change your object I'll give you",
    "start": "2066550",
    "end": "2072429"
  },
  {
    "text": "a generic way of adding new features to your object without having to change the object so the way that they do it is",
    "start": "2072429",
    "end": "2080158"
  },
  {
    "text": "item a and item B both explose",
    "start": "2080159",
    "end": "2085179"
  },
  {
    "text": "a method called except this is generally named except it's just a method on each",
    "start": "2085179",
    "end": "2090730"
  },
  {
    "text": "one of these items that takes in a visitor thus the visitor part the",
    "start": "2090730",
    "end": "2097240"
  },
  {
    "text": "visitor intern has a method called visit element which is basically takes an",
    "start": "2097240",
    "end": "2105040"
  },
  {
    "text": "instance of either item a or item B they don't need to implement the same interface they they it's just that the",
    "start": "2105040",
    "end": "2111520"
  },
  {
    "text": "visitor needs to have a visit element method that takes in either and I a or an item V so you can have many many",
    "start": "2111520",
    "end": "2118550"
  },
  {
    "text": "overloads of the visit element function so you can do different things for different elements and what happens is",
    "start": "2118550",
    "end": "2125070"
  },
  {
    "text": "that the client creates a visitor and then it tells the item a in this case",
    "start": "2125070",
    "end": "2130680"
  },
  {
    "text": "that can you please accept this visitor item A's goes yep I can accept that",
    "start": "2130680",
    "end": "2137040"
  },
  {
    "text": "visitor so it calls visit element on the visitor passing itself into the visitor",
    "start": "2137040",
    "end": "2142500"
  },
  {
    "text": "and then the visitor can go and do stuff and calculate things and do things to",
    "start": "2142500",
    "end": "2149490"
  },
  {
    "text": "item a and then you we can use the visitor to figure out what he came up",
    "start": "2149490",
    "end": "2155190"
  },
  {
    "text": "with and then I can go and take the same visitor and pass it in to item B's visit",
    "start": "2155190",
    "end": "2160440"
  },
  {
    "text": "element and the item B passes itself into the visitor that then comes back and uses the item B to do whatever it",
    "start": "2160440",
    "end": "2167280"
  },
  {
    "text": "needs to do this makes no sense at all right okay",
    "start": "2167280",
    "end": "2175970"
  },
  {
    "text": "little caveat here as we're passing if you go back here as its passing visit",
    "start": "2176000",
    "end": "2183810"
  },
  {
    "text": "element this the visitor can only use public things on item B so you cannot go",
    "start": "2183810",
    "end": "2191190"
  },
  {
    "text": "in and do private things and make changes to private things but you can use all of the public API so this makes",
    "start": "2191190",
    "end": "2197760"
  },
  {
    "text": "more sense if I show you and it is down here this whole thing of having it in",
    "start": "2197760",
    "end": "2205830"
  },
  {
    "text": "alphabetical order is complicated so I have created its I have created a couple",
    "start": "2205830",
    "end": "2219930"
  },
  {
    "text": "of shapes I've created a square and a circle and a text object these are",
    "start": "2219930",
    "end": "2229050"
  },
  {
    "text": "basically things we could render on the screen they all in this case happen to implement I am visible you don't need to",
    "start": "2229050",
    "end": "2235619"
  },
  {
    "text": "do that it just needs to have a method in this case called accept that accepts an eye visitor an implementation of",
    "start": "2235619",
    "end": "2243150"
  },
  {
    "text": "accept is literally visitor visit this to basically inject itself back into",
    "start": "2243150",
    "end": "2249640"
  },
  {
    "text": "the visitor the I visitor pattern we go",
    "start": "2249640",
    "end": "2255819"
  },
  {
    "text": "up here the I visitor pattern is visit",
    "start": "2255819",
    "end": "2261760"
  },
  {
    "text": "square circle and text so it has for three different methods each for one tie each type so it means that when you need",
    "start": "2261760",
    "end": "2267730"
  },
  {
    "text": "more things that can be visited by this visitor you need to add another function which is kind of cool because it doesn't",
    "start": "2267730",
    "end": "2274510"
  },
  {
    "text": "break open close principle because you're just adding new things to it and",
    "start": "2274510",
    "end": "2279690"
  },
  {
    "text": "implementation here I have an area calculation visitor and if we look at square here it has the algorithm to",
    "start": "2279690",
    "end": "2286539"
  },
  {
    "text": "figure out the area for s square area for a circle and area for a text which",
    "start": "2286539",
    "end": "2298180"
  },
  {
    "text": "in which case it uses a font size and some made-up values and this is where",
    "start": "2298180",
    "end": "2303279"
  },
  {
    "text": "you realize that I'm almost four years old and I'm happy that my dad is a math teacher because I could not figure out",
    "start": "2303279",
    "end": "2308440"
  },
  {
    "text": "how to do a area calculation of a circle that's that kind of explain house much I suck at math I learned that over the",
    "start": "2308440",
    "end": "2315220"
  },
  {
    "text": "Christmas I have a drawing area calculation visitor so what this oh yeah",
    "start": "2315220",
    "end": "2320950"
  },
  {
    "text": "so one thing also it's the visitor never returns the value it's always void but",
    "start": "2320950",
    "end": "2326380"
  },
  {
    "text": "it can expose the result using a property so the area calculation visitor",
    "start": "2326380",
    "end": "2332559"
  },
  {
    "text": "just goes and calculates for one thing the drawing area calculation visitor actually goes ahead and adds to the",
    "start": "2332559",
    "end": "2339789"
  },
  {
    "text": "drawing area to figure out what rectangle do I need to be able to draw this thing and if you call that passing",
    "start": "2339789",
    "end": "2346539"
  },
  {
    "text": "in three different squares and four different circles and maybe a text area it will basically figure out how much",
    "start": "2346539",
    "end": "2352660"
  },
  {
    "text": "space do I need to render all these things things that I didn't know when I created the the square and the circle",
    "start": "2352660",
    "end": "2358630"
  },
  {
    "text": "and the text and then I have a scale by which actually modifies two objects so I can go and say I want you to scale by",
    "start": "2358630",
    "end": "2366420"
  },
  {
    "text": "one point two so basically make it twenty percent bigger I can pass in a square and it will make sure that this",
    "start": "2366420",
    "end": "2372640"
  },
  {
    "text": "square becomes 1.20 twenty percent bigger area wise same thing with circle it figures out there's actually math in",
    "start": "2372640",
    "end": "2379119"
  },
  {
    "text": "here as well that figures out how to scale your air a circle to make it bigger in 2020 for a",
    "start": "2379119",
    "end": "2386430"
  },
  {
    "text": "bigger area and then in my method up here we can see how it basically calculate area for example basic girls",
    "start": "2386430",
    "end": "2393900"
  },
  {
    "text": "creates an error area calculation visitor takes the visitor visit able object passes in the area and then on my",
    "start": "2393900",
    "end": "2400680"
  },
  {
    "text": "area I can figure out my own my visitor I can figure out the area and I can also go and say here that one calculates",
    "start": "2400680",
    "end": "2410280"
  },
  {
    "text": "total drawing area it takes an ienumerable of I am visible creates a drawing area calculated visitor goes",
    "start": "2410280",
    "end": "2417420"
  },
  {
    "text": "through each one of the vegetables passing in the visitor the visitor just goes ahead and ads and ads and ads and",
    "start": "2417420",
    "end": "2422550"
  },
  {
    "text": "at the end here I can go and figure out this is the rectangle that I need to be able to draw all of these shapes it's",
    "start": "2422550",
    "end": "2429930"
  },
  {
    "text": "kind of a cool way of doing it and but as I said I I go back and forth between why didn't I just do a why don't you",
    "start": "2429930",
    "end": "2436710"
  },
  {
    "text": "just create an instance of it and pass it in without having to do the whole passing back and forth why have Y take",
    "start": "2436710",
    "end": "2443040"
  },
  {
    "text": "an object and pass in a visitor and then have the thing called the visitor versus just taking the visitor object and",
    "start": "2443040",
    "end": "2449460"
  },
  {
    "text": "passing the freaking thing straight in but there are some some architectural interesting ideas that means that you",
    "start": "2449460",
    "end": "2455130"
  },
  {
    "text": "don't cause problems with open closed principle and some other things with the visitor pattern so the desert batter is",
    "start": "2455130",
    "end": "2461100"
  },
  {
    "text": "interesting I do suggest that you have a look at it I am almost 99% sure that you",
    "start": "2461100",
    "end": "2466560"
  },
  {
    "text": "will probably never use it but it's kind of cool circuit breaker that's a new one",
    "start": "2466560",
    "end": "2472950"
  },
  {
    "text": "has anybody heard of the circuit breaker pattern ooh ok that was ok there's a lot of people",
    "start": "2472950",
    "end": "2480030"
  },
  {
    "text": "and so the circuit breaker breaker pattern is is something we use with micro-services with all our cases so",
    "start": "2480030",
    "end": "2486540"
  },
  {
    "text": "it's used to detect failures and encapsulate the logic of preventing a failure from constantly recurring so",
    "start": "2486540",
    "end": "2492780"
  },
  {
    "text": "what we do here in for example in a micro service or architecture where we're dependent on calling other systems",
    "start": "2492780",
    "end": "2498480"
  },
  {
    "text": "all the time and we're doing it probably a cloud environment and cloud if you if you're building cloud you know that you",
    "start": "2498480",
    "end": "2504180"
  },
  {
    "text": "always have to take into account that stuff might not be available right stuff goes up and down and it's being moved",
    "start": "2504180",
    "end": "2510390"
  },
  {
    "text": "around and there might be temporary outages and if you're working with a database for example",
    "start": "2510390",
    "end": "2515890"
  },
  {
    "text": "ah sure which I know more than AWS I know that in Asher for example if you talk to sequel sequels responsibility in",
    "start": "2515890",
    "end": "2522910"
  },
  {
    "text": "a series to protect itself so if you start hammering your database sequel",
    "start": "2522910",
    "end": "2528249"
  },
  {
    "text": "server will actually start returning air errors going saying I'm not I'm not doing that because my main priority is",
    "start": "2528249",
    "end": "2534789"
  },
  {
    "text": "to survive if you try to kill me by overloading me I'm gonna stop responding so we need to take into account that we",
    "start": "2534789",
    "end": "2541900"
  },
  {
    "text": "have what is called transient failures in the cloud in a lot of cases and that's where the circuit breaker comes in so the first problem we're trying to",
    "start": "2541900",
    "end": "2549640"
  },
  {
    "text": "solve are just a transient failures so you're dependent on other services but",
    "start": "2549640",
    "end": "2555460"
  },
  {
    "text": "they might be in a state where they are potentially failing or they're really",
    "start": "2555460",
    "end": "2560619"
  },
  {
    "text": "really slow but the problem is that when you for example call a web service that is failing you might have a timeout so",
    "start": "2560619",
    "end": "2566559"
  },
  {
    "text": "you might be waiting for that thing to respond for maybe 20 seconds if you have a heavy load system and you keep sending",
    "start": "2566559",
    "end": "2573549"
  },
  {
    "text": "requests to that and each one of those requests have to wait 20 seconds your system is going to get really slow bad",
    "start": "2573549",
    "end": "2580210"
  },
  {
    "text": "problem and it's basically once again it has to be a transient fault because what you want to do is you want to make sure",
    "start": "2580210",
    "end": "2586299"
  },
  {
    "text": "that you don't have to wait for 20 seconds all the time but you don't want to go and say that thing is broken we have to redeploy the system or we need to solve it because it",
    "start": "2586299",
    "end": "2593019"
  },
  {
    "text": "might be a transient thing that disappears and the second problem is that that thing that is having the",
    "start": "2593019",
    "end": "2598749"
  },
  {
    "text": "problems it might be stuck on something else and it's trying to survive and it's",
    "start": "2598749",
    "end": "2603910"
  },
  {
    "text": "trying to get over its own problem it's trying to heal from something else but at the same time you're hammering it",
    "start": "2603910",
    "end": "2609940"
  },
  {
    "text": "with requests continuously using up a bunch of its resources so while it's trying to survive of a failure somewhere",
    "start": "2609940",
    "end": "2616329"
  },
  {
    "text": "else potentially you're adding more load to it basically crushing the service so you might end up with a cascading",
    "start": "2616329",
    "end": "2622210"
  },
  {
    "text": "failure situation so what you've got with the circuit breaker is that you wrap that logic so you take a thing you",
    "start": "2622210",
    "end": "2629200"
  },
  {
    "text": "take your request and you wrap it into piece an object and then that object basically keeps track of failing",
    "start": "2629200",
    "end": "2635829"
  },
  {
    "text": "requests and then you can have a trip on it so basically saying once you've done this call and it has failed for more",
    "start": "2635829",
    "end": "2641289"
  },
  {
    "text": "than five times in a row I want you to kill it so whenever somebody tries to make that request again just throw an",
    "start": "2641289",
    "end": "2648220"
  },
  {
    "text": "exception straight off don't wait 20 seconds don't make the request don't load the other server just kill it just",
    "start": "2648220",
    "end": "2653869"
  },
  {
    "text": "whenever somebody calls it just kill it because it's offline and then maybe after 20 seconds or after at set amount",
    "start": "2653869",
    "end": "2660230"
  },
  {
    "text": "of time it might say I'm gonna let one call through and then it makes the throws for everything else but let's one",
    "start": "2660230",
    "end": "2666530"
  },
  {
    "text": "call through if that call succeeds it will then go and say I might load up some more calls and let some more",
    "start": "2666530",
    "end": "2672830"
  },
  {
    "text": "traffic go through and then once the thing comes back online in full power it will basically just back off and say you",
    "start": "2672830",
    "end": "2678740"
  },
  {
    "text": "can now do your calls as you wish so the logic of being able to do backups and basically canceling things like that go",
    "start": "2678740",
    "end": "2684350"
  },
  {
    "text": "since your circuit breaker so if we look at the circuit breaker here I have a very simple implementation of it so the",
    "start": "2684350",
    "end": "2696380"
  },
  {
    "text": "circuit breaker here it's basically an HTP circuit breaker what it does it has a max failure in the retry count and",
    "start": "2696380",
    "end": "2702850"
  },
  {
    "text": "when you do call execute on it with the thing that it's a generic thing that I",
    "start": "2702850",
    "end": "2708710"
  },
  {
    "text": "built it uses a callback function so basically it's if it's a takes a func that returns a task of HTTP response",
    "start": "2708710",
    "end": "2715160"
  },
  {
    "text": "message and it basically wraps that and checks to see is the current state of the circuit breaker open basically it's",
    "start": "2715160",
    "end": "2722090"
  },
  {
    "text": "it's turned off then ad failure count and return null basically just go and",
    "start": "2722090",
    "end": "2727369"
  },
  {
    "text": "say don't don't make the call because it's not broken otherwise make the request and then it makes requests and",
    "start": "2727369",
    "end": "2735020"
  },
  {
    "text": "it basically puts in a try-catch if it fails it as a failure count to it and then we could have things like so",
    "start": "2735020",
    "end": "2742460"
  },
  {
    "text": "failure count here has logic to say that if the current state is open and failure count blah blah blah and re crunch our",
    "start": "2742460",
    "end": "2749180"
  },
  {
    "text": "account it could have it trying to close things so basically let's something through let's one thing through and then",
    "start": "2749180",
    "end": "2754700"
  },
  {
    "text": "nothing else and it can be open and closed so you call this thing I wouldn't",
    "start": "2754700",
    "end": "2760460"
  },
  {
    "text": "use this code it's just a sample but what you do here is you go request helper don't make requests it takes a",
    "start": "2760460",
    "end": "2766609"
  },
  {
    "text": "circuit breaker and a client and it makes the call for me and the circuit breaker is being passed in there's a",
    "start": "2766609",
    "end": "2772760"
  },
  {
    "text": "generic thing that I can have I could have more of those four different calls for example but the idea is keeping",
    "start": "2772760",
    "end": "2778280"
  },
  {
    "text": "track of failed calls for example and basically be able to short-circuit",
    "start": "2778280",
    "end": "2783380"
  },
  {
    "text": "the whole thing and say I you have failed now so for a while now I'm not going to let you go ahead and do that anymore",
    "start": "2783380",
    "end": "2788809"
  },
  {
    "text": "you can also do that not just for failures you could go and have a circuit breaker that says if these calls starts",
    "start": "2788809",
    "end": "2794269"
  },
  {
    "text": "take you start taking more than X amount of time we might want to back off and not let all of them through and let the",
    "start": "2794269",
    "end": "2800329"
  },
  {
    "text": "service that we're calling heal up the circuit breaker is kind of cool and it's",
    "start": "2800329",
    "end": "2805460"
  },
  {
    "text": "one of those things that you can do in a fairly generic way if you know what you're doing and it can help you out",
    "start": "2805460",
    "end": "2810890"
  },
  {
    "text": "quite a lot when it comes to depending on a bunch of other services make sense",
    "start": "2810890",
    "end": "2816430"
  },
  {
    "text": "cool and then we have the one that everybody uses and nobody knows how to",
    "start": "2816430",
    "end": "2821990"
  },
  {
    "text": "use the repository pattern how many of you have not implemented a repository at",
    "start": "2821990",
    "end": "2827210"
  },
  {
    "text": "some point you are lucky because that means I can't yell at you the repository",
    "start": "2827210",
    "end": "2834200"
  },
  {
    "text": "pattern is very very common we use that all over the place everybody goes we need a repo it needs to be repository we need okay a",
    "start": "2834200",
    "end": "2840579"
  },
  {
    "text": "repository abstracts away the data layer and centralizes the retrieval of domain objects that's me",
    "start": "2840579",
    "end": "2847309"
  },
  {
    "text": "it was not me APD I couldn't find repository pattern on Wikipedia with a nice definition so I brought my own and",
    "start": "2847309",
    "end": "2852710"
  },
  {
    "text": "it basically it's just a layer on top of your data access that gives you a way of",
    "start": "2852710",
    "end": "2858079"
  },
  {
    "text": "getting domain objects so the problem that you have is you need to get domain objects because domain objects are",
    "start": "2858079",
    "end": "2864200"
  },
  {
    "text": "persistent ignorant in a domain driven development environment there they are there but persistence is a different",
    "start": "2864200",
    "end": "2870829"
  },
  {
    "text": "thing right so we create a repo or repository and it gives us the ability",
    "start": "2870829",
    "end": "2876440"
  },
  {
    "text": "to go and say can I get a user with this ID and it hides all the database logic",
    "start": "2876440",
    "end": "2882109"
  },
  {
    "text": "and it goes and gets me a fully working user object that I can use in my domain model suite very very simple demo that",
    "start": "2882109",
    "end": "2892160"
  },
  {
    "text": "is very very short presentation I'm going to tell you why it doesn't work repository I have a very simple sample",
    "start": "2892160",
    "end": "2899000"
  },
  {
    "text": "here I use entity framework and my repo down here is I used repository",
    "start": "2899000",
    "end": "2906519"
  },
  {
    "text": "implemented by use repository and I actually love this syntax here and I want to talk thank a guy called Jimmy",
    "start": "2906519",
    "end": "2913160"
  },
  {
    "text": "Anderson in Sweden for that he made me change the way there my repos so these method names are quite",
    "start": "2913160",
    "end": "2919310"
  },
  {
    "text": "odd right normally you have where user is admin aware or sorry and by ID or",
    "start": "2919310",
    "end": "2929000"
  },
  {
    "text": "admins or whatever but adding methods like this called who are admins and that have been deleted whose first name",
    "start": "2929000",
    "end": "2935060"
  },
  {
    "text": "starts with look kind of odd light here but if you go up in here and read it it's very readable VAR users in users",
    "start": "2935060",
    "end": "2942230"
  },
  {
    "text": "whose first name starts with C makes it a bit read it more readable than get by",
    "start": "2942230",
    "end": "2947330"
  },
  {
    "text": "ID get by admin get by blah blah blah anyhow this is all it does it has a",
    "start": "2947330",
    "end": "2954350"
  },
  {
    "text": "user's context in this case which is an entity framework thing it has two implementation here I do not and you",
    "start": "2954350",
    "end": "2961610"
  },
  {
    "text": "should not here are a couple of things that I dislike about people doing with repositories one I don't like people who",
    "start": "2961610",
    "end": "2968600"
  },
  {
    "text": "expose iqueryable the idea behind a repo is to hide database access and make sure",
    "start": "2968600",
    "end": "2976550"
  },
  {
    "text": "that people get objects based on defined queries it's supposed to hide the query",
    "start": "2976550",
    "end": "2982130"
  },
  {
    "text": "logic of how to get your object if you start exposing iqueryable here then",
    "start": "2982130",
    "end": "2987320"
  },
  {
    "text": "you're spreading that logic of how to find an object throughout your entire system so the data access logic is",
    "start": "2987320",
    "end": "2993290"
  },
  {
    "text": "spread out throughout the system and then somebody comes and says let's add soft deletes to this so you're never is",
    "start": "2993290",
    "end": "2998660"
  },
  {
    "text": "supposed to get something that has this the delete that flag equals true ah crap you have to go around and rewrite all of",
    "start": "2998660",
    "end": "3005860"
  },
  {
    "text": "your access logic because it's spread out across your application because you haven't iqueryable there should be",
    "start": "3005860",
    "end": "3011680"
  },
  {
    "text": "predefined methods giving you specific things hiding query logic next thing",
    "start": "3011680",
    "end": "3017260"
  },
  {
    "text": "here you can see that I have an add and a delete method what is missing a save",
    "start": "3017260",
    "end": "3024970"
  },
  {
    "text": "method the repository should not be responsible for saving things the",
    "start": "3024970",
    "end": "3032320"
  },
  {
    "text": "repository isn't there to retrieve objects not save them there should be",
    "start": "3032320",
    "end": "3039250"
  },
  {
    "text": "other logic that figures out that once you've retrieved the object if you change that object and you call save on",
    "start": "3039250",
    "end": "3045130"
  },
  {
    "text": "something it should be saved so if you're using entity framework here for example entity frameworks con",
    "start": "3045130",
    "end": "3050680"
  },
  {
    "text": "we'll internally keep track of that object so the context will know whether or not Knoblauch needs to be saved so",
    "start": "3050680",
    "end": "3056980"
  },
  {
    "text": "the context has the ability to save and save objects from many different repositories in the same transaction if",
    "start": "3056980",
    "end": "3065260"
  },
  {
    "text": "you add a save method to your repository that is dangerous when it comes to",
    "start": "3065260",
    "end": "3070420"
  },
  {
    "text": "entity framework because if you add a safe method to the user repository and you call save and you go user context",
    "start": "3070420",
    "end": "3077230"
  },
  {
    "text": "dot save you're actually saving every changed object in that context not just users so you're not saving that stuff",
    "start": "3077230",
    "end": "3085930"
  },
  {
    "text": "from the user repository you're saving objects from any kind of repository that has ever retrieved",
    "start": "3085930",
    "end": "3091240"
  },
  {
    "text": "anything from that context in that process so don't add a save save is",
    "start": "3091240",
    "end": "3099580"
  },
  {
    "text": "something else because you might be reading stuff from different repos so you need to make sure that changes from objects in different repositories should",
    "start": "3099580",
    "end": "3106780"
  },
  {
    "text": "be saved in one single transaction no saves but Chris how the hell are we",
    "start": "3106780",
    "end": "3113740"
  },
  {
    "text": "gonna do saves them I will show you so saves do not go into your repository",
    "start": "3113740",
    "end": "3120820"
  },
  {
    "text": "it's for retrieval which is why unity work comes up unit of work is according",
    "start": "3120820",
    "end": "3128890"
  },
  {
    "text": "to Martin Fowler maintains a list of objects affected by a business transaction and coordinates the writing",
    "start": "3128890",
    "end": "3134350"
  },
  {
    "text": "of changes and the resolution of concurrency problems that sounds like saving stuff so what we do is that we",
    "start": "3134350",
    "end": "3143250"
  },
  {
    "text": "basically have something that keeps track of all of our modified entities and makes it possible for us to persist",
    "start": "3143250",
    "end": "3150040"
  },
  {
    "text": "it as one atomic thing like a transaction so if you have an entity framework for example their context is a",
    "start": "3150040",
    "end": "3156670"
  },
  {
    "text": "unit of work you create a context you get stuff out of the context you modify",
    "start": "3156670",
    "end": "3162100"
  },
  {
    "text": "objects on that context and you call save on that context and the context is your unit of work because once you call",
    "start": "3162100",
    "end": "3168280"
  },
  {
    "text": "save on the context it will save all changed objects in that context however",
    "start": "3168280",
    "end": "3174850"
  },
  {
    "text": "you do not want to go ahead and spread your your entity framework context around and have them spread out because",
    "start": "3174850",
    "end": "3180460"
  },
  {
    "text": "you hide them in the repository so how do we go about hiding the context while still used and",
    "start": "3180460",
    "end": "3187630"
  },
  {
    "text": "using by using repositories but not exposing a safe method in the repository",
    "start": "3187630",
    "end": "3192850"
  },
  {
    "text": "well I have a very very simple demo of that there are other ways of doing this",
    "start": "3192850",
    "end": "3198580"
  },
  {
    "text": "but imagine I do think no actually I don't have an entity framework worst version I'm sorry about that what I've",
    "start": "3198580",
    "end": "3204670"
  },
  {
    "text": "got is an in-memory store in this case but what we do is we well actually this",
    "start": "3204670",
    "end": "3212230"
  },
  {
    "text": "does what you could have done so the interface are I support unit of work has a complete method my implementation",
    "start": "3212230",
    "end": "3220840"
  },
  {
    "text": "which is my repository in this case it's just in memory implements I support unit of work but it implements it explicitly",
    "start": "3220840",
    "end": "3228580"
  },
  {
    "text": "so if I use this thing as an in-memory store I'm not going to see the complete",
    "start": "3228580",
    "end": "3233650"
  },
  {
    "text": "method I need to cast it to that interface to actually get access to it and then I have my unit of work which",
    "start": "3233650",
    "end": "3241600"
  },
  {
    "text": "takes a I support unit work item and calls complete on it when you complete",
    "start": "3241600",
    "end": "3247030"
  },
  {
    "text": "the unit work so I could go ahead and register multiple I support unit work in this unit of this unit of work class and",
    "start": "3247030",
    "end": "3253630"
  },
  {
    "text": "then what you do is up here I create a",
    "start": "3253630",
    "end": "3259480"
  },
  {
    "text": "unit of work I go ahead and make some changes to it and then I call unit of",
    "start": "3259480",
    "end": "3264940"
  },
  {
    "text": "work complete to basically do the save and then the unit of work is the thing that basically wraps everything up and",
    "start": "3264940",
    "end": "3270370"
  },
  {
    "text": "makes sure it's being persisted I would recommend that you you do something like",
    "start": "3270370",
    "end": "3275920"
  },
  {
    "text": "this and figure out a way to handle this if you're doing repositories and I also recommend that your unit of work thing",
    "start": "3275920",
    "end": "3281200"
  },
  {
    "text": "implements I disposable so that you can basically base in wrap it in a using statement for example and roll back",
    "start": "3281200",
    "end": "3286540"
  },
  {
    "text": "stuff that you don't want to have so within the using statement unless you call complete on it it rolls back stuff",
    "start": "3286540",
    "end": "3292450"
  },
  {
    "text": "if you don't have that then entity framework you might after your unit of work there are actually changes left in",
    "start": "3292450",
    "end": "3298120"
  },
  {
    "text": "memory that shouldn't be there for example so unit of work is where your safe method should be and it should not",
    "start": "3298120",
    "end": "3304600"
  },
  {
    "text": "be part of your repository and that's where I'm saying a lot of people are doing it in quotes wrong because they",
    "start": "3304600",
    "end": "3310150"
  },
  {
    "text": "expose iqueryable spreading out query logics throughout the application and they have a safe method on each one of",
    "start": "3310150",
    "end": "3316210"
  },
  {
    "text": "their and repository which means that you're actually potentially saving way more than you're supposed to yes no yes no no you could I",
    "start": "3316210",
    "end": "3343630"
  },
  {
    "text": "in this case I'm limiting it to entity framework because entry framework happens to believe have an",
    "start": "3343630",
    "end": "3348819"
  },
  {
    "text": "implementation of unit of work in already",
    "start": "3348819",
    "end": "3352950"
  },
  {
    "text": "yeah so you don't want yeah so that's the thing the pattern repository shouldn't have a safe method so I'm not",
    "start": "3364170",
    "end": "3370859"
  },
  {
    "text": "they're all a part of different things so basically each pattern is its own thing for its own specific problem where",
    "start": "3370859",
    "end": "3376450"
  },
  {
    "text": "the repository already the repository pattern is retrieval of objects you could go and say that your unit of work",
    "start": "3376450",
    "end": "3383200"
  },
  {
    "text": "was your repository as well if you wanted to but it kind of in that case you should know that your unit of work",
    "start": "3383200",
    "end": "3389799"
  },
  {
    "text": "is your repository and the way we're having a unit of work as a defined thing you you know that a unit of work is this",
    "start": "3389799",
    "end": "3397990"
  },
  {
    "text": "the problem with repositories that don't the unit of work is if you go and save",
    "start": "3397990",
    "end": "3403089"
  },
  {
    "text": "you as I said your entity framework context or you're in hybrid context or your other thing you might actually be saving things that you didn't intend to",
    "start": "3403089",
    "end": "3408849"
  },
  {
    "text": "say because you don't really know what the unit of work is for example if you do entity framework for example or you",
    "start": "3408849",
    "end": "3414430"
  },
  {
    "text": "do any form of over ms in asp net core and you put it into your idea your ioc container and you leave it in the ioc",
    "start": "3414430",
    "end": "3420910"
  },
  {
    "text": "container for the entire request you might be doing things in the ioc container in the the repository sorry in",
    "start": "3420910",
    "end": "3427480"
  },
  {
    "text": "the context your unit work in different areas and then at the end of it you save and you don't actually know what you're",
    "start": "3427480",
    "end": "3433000"
  },
  {
    "text": "saving but yes it is it some things do limit other things um and then I got",
    "start": "3433000",
    "end": "3439480"
  },
  {
    "text": "factories another one of my favorites when do this very very fast so and a",
    "start": "3439480",
    "end": "3444520"
  },
  {
    "text": "factory is an object for creating other objects or basically it returns",
    "start": "3444520",
    "end": "3451190"
  },
  {
    "text": "an object or a subclass of that object the problem that you have is that you",
    "start": "3451190",
    "end": "3456920"
  },
  {
    "text": "don't want to use new if you start mooing up objects in your code you're coupling your class to that other class",
    "start": "3456920",
    "end": "3463520"
  },
  {
    "text": "so by using a factory you can go and get an instance of that type but you don't",
    "start": "3463520",
    "end": "3470359"
  },
  {
    "text": "tie yourself to specific implementations new is really not a great keyword demo",
    "start": "3470359",
    "end": "3476780"
  },
  {
    "text": "for that actually sorry I'm a little bit short there is code in there it's basically just factory function so you",
    "start": "3476780",
    "end": "3481790"
  },
  {
    "text": "call get a new object here are the parameters I need like basically like a constructor but you do it on a different",
    "start": "3481790",
    "end": "3487250"
  },
  {
    "text": "object that then returns not a specific instance but something that implements I did that instance or a subclass or an",
    "start": "3487250",
    "end": "3493849"
  },
  {
    "text": "interface whatever but basically it allows you to vary the objects that you're getting back it also allows you",
    "start": "3493849",
    "end": "3500329"
  },
  {
    "text": "to get away from the fact that if you have constructor parameters you have multiple constructors for a method and they overlap in the type of types you",
    "start": "3500329",
    "end": "3508400"
  },
  {
    "text": "can't have two constructor parameters type that hate string for example or two constructors that both just take a",
    "start": "3508400",
    "end": "3513829"
  },
  {
    "text": "string as a parameter using a factory you can actually have multiple constructors that just take a string and",
    "start": "3513829",
    "end": "3520970"
  },
  {
    "text": "then it completely configures the object for you before it's being returned back and my final pattern which is really not",
    "start": "3520970",
    "end": "3528470"
  },
  {
    "text": "that big is just I love this and people miss it null object a null object is an object",
    "start": "3528470",
    "end": "3533900"
  },
  {
    "text": "with no referenced value or with define neutral or null behavior so it's about",
    "start": "3533900",
    "end": "3541010"
  },
  {
    "text": "having null checks all over the place I hate having the if blah blah blah equals null then do this otherwise do that or",
    "start": "3541010",
    "end": "3548630"
  },
  {
    "text": "rather often you end up writing this right if flog is not equal to null right",
    "start": "3548630",
    "end": "3554000"
  },
  {
    "text": "out this but you end up having these if log not equals to null all over your code because you don't know if it's null",
    "start": "3554000",
    "end": "3560599"
  },
  {
    "text": "so you don't want to call it and c-sharp doesn't have a handle not very well it would be kind of nice if we just wrote that right so what we do is we create a",
    "start": "3560599",
    "end": "3568550"
  },
  {
    "text": "null logger which implements the I log interface but it doesn't do anything",
    "start": "3568550",
    "end": "3573650"
  },
  {
    "text": "it's just an empty class it does it has empty methods it just doesn't do anything and we have a logger instead of",
    "start": "3573650",
    "end": "3579710"
  },
  {
    "text": "setting it to null you pass in a null logger so you can call it but it doesn't you do anything so",
    "start": "3579710",
    "end": "3585080"
  },
  {
    "text": "you get rid of all these if statements or for this for example you call users dot admins to get all of your admins and",
    "start": "3585080",
    "end": "3590600"
  },
  {
    "text": "then you do if admins not equals to null or say if I didn't find any admins I get a null back but if I did and admins I",
    "start": "3590600",
    "end": "3597020"
  },
  {
    "text": "get an array why not just return an array all the time but return as an empty array so I don't have to do the",
    "start": "3597020",
    "end": "3603890"
  },
  {
    "text": "check for if admins equals null I can go and check I always get an object back whether or not there anything in there",
    "start": "3603890",
    "end": "3610400"
  },
  {
    "text": "ray that's a whole different story but you get away from all of these null checks by having what is like an object",
    "start": "3610400",
    "end": "3616400"
  },
  {
    "text": "but it's still an empty object it doesn't exist but you don't have to check for it demo for that it's also",
    "start": "3616400",
    "end": "3623300"
  },
  {
    "text": "really stupid basically I'm doing this I'm just making sure that returns objects for you sorry I'm right at time",
    "start": "3623300",
    "end": "3630440"
  },
  {
    "text": "that's why I didn't do it big code you've got all of my code down here at",
    "start": "3630440",
    "end": "3636560"
  },
  {
    "text": "that address there is more stuff in there I wrote some other things with object pools and some other patterns and",
    "start": "3636560",
    "end": "3641870"
  },
  {
    "text": "I thought were really cool that you can have a look at other than that thank you so much for listening and don't forget",
    "start": "3641870",
    "end": "3647030"
  },
  {
    "text": "to do the evals if you liked the session do a green note if you didn't like the session come up and tell me why I'll",
    "start": "3647030",
    "end": "3652880"
  },
  {
    "text": "make it better and then explain why it was awesome and then you do a green on the way out afterwards okay great",
    "start": "3652880",
    "end": "3658580"
  },
  {
    "text": "[Applause]",
    "start": "3658580",
    "end": "3665800"
  }
]