[
  {
    "text": "welcome everybody this is after the break this is a tough",
    "start": "2110",
    "end": "8019"
  },
  {
    "text": "part for you to stay waiting after",
    "start": "8019",
    "end": "16720"
  },
  {
    "text": "talking this morning about the new C++ standard and it's coffee features I want",
    "start": "16720",
    "end": "25359"
  },
  {
    "text": "to talk this afternoon about the new library features we have in C++ 17 again",
    "start": "25359",
    "end": "32770"
  },
  {
    "text": "for those who are just joining and didn't hear the first talk this morning",
    "start": "32770",
    "end": "39480"
  },
  {
    "text": "my name is Nicola azusa's I'm self-employed I'm part of the standardization",
    "start": "39480",
    "end": "44800"
  },
  {
    "text": "committee for 20 years now and so partially it's all my fault but",
    "start": "44800",
    "end": "52359"
  },
  {
    "text": "partially it's your fault if you don't like anything you were not there we are community driven and everybody who's",
    "start": "52359",
    "end": "58539"
  },
  {
    "text": "there has influenced so I will usually say that your fault not my fault if you",
    "start": "58539",
    "end": "64960"
  },
  {
    "text": "ask them for something and yeah memory",
    "start": "64960",
    "end": "71520"
  },
  {
    "text": "maybe that's it for the moment most interesting things I want to tell you so",
    "start": "71520",
    "end": "77860"
  },
  {
    "text": "we talk again about C+ for 17 and a set before we have a three year schedule",
    "start": "77860",
    "end": "84340"
  },
  {
    "text": "right now to come up with new supastarz versions after c plus 11 was a big",
    "start": "84340",
    "end": "92260"
  },
  {
    "text": "improvement and gained a lot of momentum we now have sleeper for 14 which had",
    "start": "92260",
    "end": "98500"
  },
  {
    "text": "only some minor extensions and now after expecting more we have Cetus or 17 which I would",
    "start": "98500",
    "end": "105180"
  },
  {
    "text": "categorize as a medium improvement and the next improvement is already are",
    "start": "105180",
    "end": "111510"
  },
  {
    "text": "there we are already working on C++ 20 which will hopefully and probably be",
    "start": "111510",
    "end": "119290"
  },
  {
    "text": "again and major improvement it might be even become bigger than C++ 11 because",
    "start": "119290",
    "end": "125350"
  },
  {
    "text": "it it will really change the way people program in CSS",
    "start": "125350",
    "end": "131440"
  },
  {
    "text": "um so and again the hint that there is",
    "start": "131440",
    "end": "137560"
  },
  {
    "text": "already support four-seater 417 we have support in GCC and C++ in especially in",
    "start": "137560",
    "end": "144220"
  },
  {
    "text": "version 7.1 which came out some weeks ago and claim for also supported and",
    "start": "144220",
    "end": "150100"
  },
  {
    "text": "then we also have would wish to use 17 which also supports some of the features",
    "start": "150100",
    "end": "156690"
  },
  {
    "text": "and will have updates also this year so at the end of this year I expect that",
    "start": "156690",
    "end": "163600"
  },
  {
    "text": "you are will find on all major platforms more or less support for C++ 17 maybe",
    "start": "163600",
    "end": "172180"
  },
  {
    "text": "not completely but for the main cases so here we talk about the library and the",
    "start": "172180",
    "end": "179590"
  },
  {
    "text": "library means of course new data types but not data types which fundamental",
    "start": "179590",
    "end": "185230"
  },
  {
    "text": "data types data types we define in the standard in the standard library as an",
    "start": "185230",
    "end": "190660"
  },
  {
    "text": "application of the language and the funny thing is that the library in C++ always are pretty often extends core",
    "start": "190660",
    "end": "199870"
  },
  {
    "text": "features which we for some reason things should not be come coffee just but",
    "start": "199870",
    "end": "205840"
  },
  {
    "text": "library features although you can could argue that they should be coffee",
    "start": "205840",
    "end": "211690"
  },
  {
    "text": "features so some of these basic data types we also started to standardize in",
    "start": "211690",
    "end": "218650"
  },
  {
    "text": "C++ 17 so the first thing is string view",
    "start": "218650",
    "end": "224430"
  },
  {
    "text": "we have now a new string class so after STD string which owns the memory for the",
    "start": "224430",
    "end": "233680"
  },
  {
    "text": "data it holds either by arm allocating memory on the heap or maybe for short",
    "start": "233680",
    "end": "240610"
  },
  {
    "text": "Springs with some optimization implementations use their own memory they have on the stack now we have a",
    "start": "240610",
    "end": "248620"
  },
  {
    "text": "data type representing strings but not owning the memory owning the memory they",
    "start": "248620",
    "end": "254680"
  },
  {
    "text": "refer to which is of course a dangerous string to some extent this is a string",
    "start": "254680",
    "end": "260200"
  },
  {
    "text": "reference but with an API of the string and it should be cheap to copy but as I",
    "start": "260200",
    "end": "268659"
  },
  {
    "text": "said pretty date pretty dangerous but there are enough application of that for",
    "start": "268659",
    "end": "273970"
  },
  {
    "text": "example I was working at a company which created a new database which should be",
    "start": "273970",
    "end": "280330"
  },
  {
    "text": "filled with big data so you couldn't keep all the data in memory so you had",
    "start": "280330",
    "end": "286569"
  },
  {
    "text": "to keep it on a file system and what you usually do is then you map just the file",
    "start": "286569",
    "end": "291970"
  },
  {
    "text": "system into your database with a map calls or something like that and then",
    "start": "291970",
    "end": "298060"
  },
  {
    "text": "instead it would be far too expensive to copy all the strings in the map just",
    "start": "298060",
    "end": "303490"
  },
  {
    "text": "refer to them and use them as strings that means that string views have not",
    "start": "303490",
    "end": "310419"
  },
  {
    "text": "all guarantees normal strings have the most important guarantee which is",
    "start": "310419",
    "end": "316690"
  },
  {
    "text": "missing is the string does not necessary end with null termination so with a null",
    "start": "316690",
    "end": "322690"
  },
  {
    "text": "terminator because here you see on the right side we refer to data in some memory and after data there might not be",
    "start": "322690",
    "end": "330819"
  },
  {
    "text": "a 0 of excellent 0 character it could be but then it's organized that way by",
    "start": "330819",
    "end": "337270"
  },
  {
    "text": "those who provide the data for the string and it might also happen that",
    "start": "337270",
    "end": "343150"
  },
  {
    "text": "that such a string suddenly has a value which is not pointer which is nothing referring to nothing that's also",
    "start": "343150",
    "end": "349360"
  },
  {
    "text": "different from traditional strings traditional strings don't have this state they have then if you don't pass",
    "start": "349360",
    "end": "356080"
  },
  {
    "text": "anything for initialization they represent an empty string which is a different thing so that means always use",
    "start": "356080",
    "end": "364659"
  },
  {
    "text": "size and check the size before you access element or the data or pass the",
    "start": "364659",
    "end": "370629"
  },
  {
    "text": "data around there's some support but not",
    "start": "370629",
    "end": "376319"
  },
  {
    "text": "support in every direction regarding string view it came in pretty late for",
    "start": "376319",
    "end": "381430"
  },
  {
    "text": "CTF 1217 so we have something like spring view for different character",
    "start": "381430",
    "end": "387550"
  },
  {
    "text": "types but we for example have no support for the interface reg X interface to",
    "start": "387550",
    "end": "395589"
  },
  {
    "text": "also deal with string use and we have a literal now allowing",
    "start": "395589",
    "end": "400780"
  },
  {
    "text": "easily to create a spring view just by",
    "start": "400780",
    "end": "405990"
  },
  {
    "text": "adding the suffix sv after spring literal spring these are cheaper than",
    "start": "405990",
    "end": "413380"
  },
  {
    "text": "strings and a pretty easy example is if you declare a function to take a spring",
    "start": "413380",
    "end": "419170"
  },
  {
    "text": "a traditional string of traditional in the sense of C++ and so an STD string",
    "start": "419170",
    "end": "425560"
  },
  {
    "text": "and and now if we now declare something to take a string view it becomes cheaper",
    "start": "425560",
    "end": "430720"
  },
  {
    "text": "to pass a string literal because in the first version you have to allocate",
    "start": "430720",
    "end": "437230"
  },
  {
    "text": "memory for the string holding the data and in the second version taking a string view you have no allocation at",
    "start": "437230",
    "end": "444100"
  },
  {
    "text": "all you only have to compute the length of the string so that makes passing",
    "start": "444100",
    "end": "450780"
  },
  {
    "text": "string little cheap and that in general raises the question a string views the",
    "start": "450780",
    "end": "456880"
  },
  {
    "text": "better string API that so should what should we do with the existing code should we expect to have a string or",
    "start": "456880",
    "end": "464350"
  },
  {
    "text": "should we expect or to have a spring view and the answer is it depends the",
    "start": "464350",
    "end": "470380"
  },
  {
    "text": "point is if you for example pass your string to a c function expecting a null",
    "start": "470380",
    "end": "476500"
  },
  {
    "text": "at the end then you anyway need an SE d string so it's probably not worth it to",
    "start": "476500",
    "end": "482140"
  },
  {
    "text": "change it but there are other examples for example here you see an example where we have two string method taking a",
    "start": "482140",
    "end": "491020"
  },
  {
    "text": "perfect and a time point and a time point is part of the sibyl's of 11",
    "start": "491020",
    "end": "496810"
  },
  {
    "text": "library to compute x and there's a conversion function taking this time",
    "start": "496810",
    "end": "502300"
  },
  {
    "text": "point converting it to a time T and then with C time converting it to a visible",
    "start": "502300",
    "end": "507370"
  },
  {
    "text": "string and then because this string contains a new line at the end when you",
    "start": "507370",
    "end": "513789"
  },
  {
    "text": "call it created with C time then we remove the new line and then we return the prefix plus the string if you take",
    "start": "513789",
    "end": "521620"
  },
  {
    "text": "this provisional code for additional since see the source 11 then you can",
    "start": "521620",
    "end": "529330"
  },
  {
    "text": "think about taking a string view because you don't need a zero terminator",
    "start": "529330",
    "end": "535940"
  },
  {
    "text": "at the incoming string and note by the way that string views are usually passed by value not by reference because it's",
    "start": "535940",
    "end": "544190"
  },
  {
    "text": "cheap to pass them and we can even inside take see time takes a string view",
    "start": "544190",
    "end": "551870"
  },
  {
    "text": "which also saves some some memory because the see time value is available until the next time see time is called",
    "start": "551870",
    "end": "559250"
  },
  {
    "text": "which by the way is not not concurrent safes or thread safe but it's anyway not",
    "start": "559250",
    "end": "565340"
  },
  {
    "text": "thread safe to call see time so so it's a little bit less thread safe than",
    "start": "565340",
    "end": "570680"
  },
  {
    "text": "before so in commercial code with multiple threads view anyway needed mutex is here and then there's a the",
    "start": "570680",
    "end": "577340"
  },
  {
    "text": "spring view is a read-only string but by definition you can change the size well",
    "start": "577340",
    "end": "583400"
  },
  {
    "text": "you can reduce the size you cannot extend it but you can reduce it and therefore there are some methods saying",
    "start": "583400",
    "end": "590240"
  },
  {
    "text": "I want to skip the last character or the first character because then we just refer to a different location to a",
    "start": "590240",
    "end": "597470"
  },
  {
    "text": "substring of the string we had before which we do here so there are some ways",
    "start": "597470",
    "end": "602920"
  },
  {
    "text": "now to change your API to the modern modern style but beware we are ourselves",
    "start": "602920",
    "end": "611680"
  },
  {
    "text": "still trying to find out what exactly the guideline is to switch to string you",
    "start": "611680",
    "end": "617260"
  },
  {
    "text": "said it's a cheaper API but it has some",
    "start": "617260",
    "end": "622370"
  },
  {
    "text": "constraints so be careful to use it in general we will find out over the next year then we have some data types in the",
    "start": "622370",
    "end": "632090"
  },
  {
    "text": "standard already which more or less counters core database called data types",
    "start": "632090",
    "end": "638150"
  },
  {
    "text": "like pair for example and we have now a few other more or less card types which",
    "start": "638150",
    "end": "648170"
  },
  {
    "text": "are able to hold the value and if you see the terms and you know booth you",
    "start": "648170",
    "end": "653870"
  },
  {
    "text": "might know them already but we were they are slightly or significant different so they have the same idea but we were a",
    "start": "653870",
    "end": "661160"
  },
  {
    "text": "little bit so we have optional variant and any and all of them solve a specific problem",
    "start": "661160",
    "end": "668440"
  },
  {
    "text": "you want to get you might have if you deal with values in general so the first",
    "start": "668440",
    "end": "674450"
  },
  {
    "text": "problem sort of the first solution is optional and optionally it's just resolving the problem that you might",
    "start": "674450",
    "end": "681650"
  },
  {
    "text": "have a value of a certain type but you might also have no value of that type",
    "start": "681650",
    "end": "688100"
  },
  {
    "text": "which is different from a special value so that for example for STD string",
    "start": "688100",
    "end": "693560"
  },
  {
    "text": "beside the empty string you also have no string and which means semantically you",
    "start": "693560",
    "end": "700370"
  },
  {
    "text": "you give this value type a reference API and that's that's optional of int and",
    "start": "700370",
    "end": "707410"
  },
  {
    "text": "here's the example that explains how to do that optional just take the type it",
    "start": "707410",
    "end": "712790"
  },
  {
    "text": "represents and it adds an additional state you can set and you can check so",
    "start": "712790",
    "end": "718279"
  },
  {
    "text": "here for example we take a string and we try to convert the string to an integer but if the string is not convertible to",
    "start": "718279",
    "end": "725810"
  },
  {
    "text": "an integer as 2i throws an exception and in this in that case we return a null",
    "start": "725810",
    "end": "731839"
  },
  {
    "text": "optin and I love is saying well I don't have a string and I don't have an integer here so I we return either the",
    "start": "731839",
    "end": "738740"
  },
  {
    "text": "integer or no integer at all and that means we don't have to to take one",
    "start": "738740",
    "end": "744110"
  },
  {
    "text": "special value like like minus 1 as the value representing no integer which is usually a bad interface so here's the",
    "start": "744110",
    "end": "752900"
  },
  {
    "text": "loop then taking and calling this as in function and for different values and here you see how you test it if it",
    "start": "752900",
    "end": "760490"
  },
  {
    "text": "converts to true then you have a value of that type and you can access it by",
    "start": "760490",
    "end": "766250"
  },
  {
    "text": "the star Baretta otherwise you can do whatever you want if you do have no type",
    "start": "766250",
    "end": "772360"
  },
  {
    "text": "helpful in a couple of places this is pretty by the way this is pretty near to",
    "start": "772360",
    "end": "779270"
  },
  {
    "text": "the existing boost interface of boost optional then we have a second type",
    "start": "779270",
    "end": "786140"
  },
  {
    "text": "taking which is a variant variant is a kind of the Union so that means an",
    "start": "786140",
    "end": "793790"
  },
  {
    "text": "object that can have multiple types no it's a it's a fee",
    "start": "793790",
    "end": "806120"
  },
  {
    "text": "need amount of types it can take when you declare very and you declare what",
    "start": "806120",
    "end": "811220"
  },
  {
    "text": "kind of types the object might take and if you know C and C++ then we have this",
    "start": "811220",
    "end": "817700"
  },
  {
    "text": "language keyboard Union which allows to say I have I can use my my bytes in my",
    "start": "817700",
    "end": "824209"
  },
  {
    "text": "object as an integer as a character array and some people even use that to",
    "start": "824209",
    "end": "829279"
  },
  {
    "text": "convert integers to byte sequences this is not the same this is different in a",
    "start": "829279",
    "end": "836930"
  },
  {
    "text": "way that there is no different interpretation of the of the bytes it",
    "start": "836930",
    "end": "842540"
  },
  {
    "text": "has this object knows which type it has and only allies loves to deal with the",
    "start": "842540",
    "end": "849560"
  },
  {
    "text": "type it currently holds so either the object holds an integer or the holds of",
    "start": "849560",
    "end": "854959"
  },
  {
    "text": "string but if it holds a string you can't ask for the interval it's integer value of this object that will result in",
    "start": "854959",
    "end": "863060"
  },
  {
    "text": "a runtime exception so this object knows what it holds and it's type safe but it",
    "start": "863060",
    "end": "869540"
  },
  {
    "text": "only needs memory for the maximum of the size of in and the size of string that's",
    "start": "869540",
    "end": "875750"
  },
  {
    "text": "a big advantage it has so we have here variable taking on being either an end",
    "start": "875750",
    "end": "881899"
  },
  {
    "text": "of an LCD string it is initialized by 42 so that means that the compiler can find",
    "start": "881899",
    "end": "889010"
  },
  {
    "text": "out because 42 is an end that it's initialized as an int but later on we",
    "start": "889010",
    "end": "894200"
  },
  {
    "text": "can assign a string or something that converts the string which of course has to be not non-ambiguous so if there are",
    "start": "894200",
    "end": "902180"
  },
  {
    "text": "two types where a string literal could convert to this would not compile and then we can access the data with get you",
    "start": "902180",
    "end": "911120"
  },
  {
    "text": "can access the data knowing the type and then you can can have to pass a type",
    "start": "911120",
    "end": "917769"
  },
  {
    "text": "alternatively you can pass the index so the the type interpretation you want to",
    "start": "917769",
    "end": "923600"
  },
  {
    "text": "have so because if you say get 0 you get the first type which is an int it",
    "start": "923600",
    "end": "929170"
  },
  {
    "text": "if this if this is detectable at compile time that there's an error so if you",
    "start": "929170",
    "end": "934540"
  },
  {
    "text": "pass in an unknown type or if you pass an unknown index that's a compile time",
    "start": "934540",
    "end": "940629"
  },
  {
    "text": "error but if you don't know what it holds currently and both is valid this",
    "start": "940629",
    "end": "946059"
  },
  {
    "text": "might result in an runtime error so in an exception a couple of interesting",
    "start": "946059",
    "end": "952449"
  },
  {
    "text": "things here the first thing is this is this allows to hold a types several",
    "start": "952449",
    "end": "960100"
  },
  {
    "text": "times that means semantically we can hold two different integers one integer",
    "start": "960100",
    "end": "967379"
  },
  {
    "text": "representing some semantics and some integer representing other semantics so",
    "start": "967379",
    "end": "973419"
  },
  {
    "text": "if you have different situation you want to represent different situations the first in might have 42 and or the second",
    "start": "973419",
    "end": "981850"
  },
  {
    "text": "end might have 42 but they might represent different situations different states and of course then it's not",
    "start": "981850",
    "end": "989350"
  },
  {
    "text": "possible to say I want to get the end because that's ambiguous then you have to use index to clearly say which in you",
    "start": "989350",
    "end": "997929"
  },
  {
    "text": "want to have at everything else's as before and if you're no boost and boost",
    "start": "997929",
    "end": "1006089"
  },
  {
    "text": "variant there is a significant difference in boost variant such an variant can become our empty end because",
    "start": "1006089",
    "end": "1016829"
  },
  {
    "text": "it can become an T you need heap allocation heap memory to be exception",
    "start": "1016829",
    "end": "1023999"
  },
  {
    "text": "safe and this drawback was fixed or boss well this we discussed when we",
    "start": "1023999",
    "end": "1030449"
  },
  {
    "text": "standardized variant for C++ 17 so now we have a situation where we say this",
    "start": "1030449",
    "end": "1037380"
  },
  {
    "text": "type that's no longer need heap memory so it simply allocates again the maximum",
    "start": "1037380",
    "end": "1043500"
  },
  {
    "text": "of the possible types and said before in boost you couldn't do you also could do",
    "start": "1043500",
    "end": "1050070"
  },
  {
    "text": "that but to keep a copy of your current data if an exception falls then you did",
    "start": "1050070",
    "end": "1058500"
  },
  {
    "text": "the data type still needed heap memory and that's gone now but the prices that you might come in an interesting",
    "start": "1058500",
    "end": "1065430"
  },
  {
    "text": "state the status I'm not really empty more or less I I don't hold a valid",
    "start": "1065430",
    "end": "1072270"
  },
  {
    "text": "state because an exception happened during setting a new value with a new",
    "start": "1072270",
    "end": "1078630"
  },
  {
    "text": "type and that's a very rare case that can happen but it can happen so we have no November function calling type the",
    "start": "1078630",
    "end": "1086400"
  },
  {
    "text": "member function is called valueless by exception and you created by saying by",
    "start": "1086400",
    "end": "1091590"
  },
  {
    "text": "doing something like this you see here I have a variant aching afloat on end and",
    "start": "1091590",
    "end": "1096740"
  },
  {
    "text": "I have it it can't be has a float and I in place inside the variant and in but",
    "start": "1096740",
    "end": "1106650"
  },
  {
    "text": "with a conversion to an end so I changed the value but while I assign the integer",
    "start": "1106650",
    "end": "1113310"
  },
  {
    "text": "this conversion throws an exception and then this object is in this strange",
    "start": "1113310",
    "end": "1119610"
  },
  {
    "text": "state which usually is anyway a state where you would not use the object but if you ask the object you have this",
    "start": "1119610",
    "end": "1126720"
  },
  {
    "text": "strange state very less by exception and as set again the goal the benefit we",
    "start": "1126720",
    "end": "1132450"
  },
  {
    "text": "have we don't need heap allocation for this type and that makes it pretty cheap compared to boost variant and there's a",
    "start": "1132450",
    "end": "1141990"
  },
  {
    "text": "visitor interface if you have different types and it's tedious to check for for which type it holds and then have",
    "start": "1141990",
    "end": "1148500"
  },
  {
    "text": "different functions called there's a general way to provide an operator a",
    "start": "1148500",
    "end": "1153720"
  },
  {
    "text": "function call operator for each and every type and then you can simply pass this visitor to a variant and that means",
    "start": "1153720",
    "end": "1162870"
  },
  {
    "text": "if it count Li holds the double it calls the first function if it holds an",
    "start": "1162870",
    "end": "1168210"
  },
  {
    "text": "integer it calls the second function etc which might also be generic template called or lambda or something like that",
    "start": "1168210",
    "end": "1174240"
  },
  {
    "text": "so it can be pretty flexible okay the third type we have is any-any is also a",
    "start": "1174240",
    "end": "1184500"
  },
  {
    "text": "new way to hold it type a value um the",
    "start": "1184500",
    "end": "1189750"
  },
  {
    "text": "first thing was to make the very optional the second boss that the value might have different but a Phoenix",
    "start": "1189750",
    "end": "1197159"
  },
  {
    "text": "any number of types and now we have type saying my value might be any type at all",
    "start": "1197159",
    "end": "1204149"
  },
  {
    "text": "I have no limits it can be any type even a type not known when I compile this",
    "start": "1204149",
    "end": "1210840"
  },
  {
    "text": "code or when I use a template in a header file it is compiled when the",
    "start": "1210840",
    "end": "1216479"
  },
  {
    "text": "types are clear which are used and this is the trickiest that any takes the",
    "start": "1216479",
    "end": "1224999"
  },
  {
    "text": "value and remembers the type of the value so if I assign 42 it remembers",
    "start": "1224999",
    "end": "1233940"
  },
  {
    "text": "inside the type idea of 42 which is an int I PI D if I later assigns a string",
    "start": "1233940",
    "end": "1239789"
  },
  {
    "text": "it remembers the type idea of the string etc so it simply saw the type ID of what",
    "start": "1239789",
    "end": "1245309"
  },
  {
    "text": "was assigned there and then later when you want to access the object you can",
    "start": "1245309",
    "end": "1250679"
  },
  {
    "text": "only access as if you double check that the type idea is wrong or you might get undefined behavior so here you see some",
    "start": "1250679",
    "end": "1258090"
  },
  {
    "text": "examples I can ask do I have aware you so this type can be empty or the the",
    "start": "1258090",
    "end": "1263340"
  },
  {
    "text": "values of this step can be empty and then I can ask is the current type as",
    "start": "1263340",
    "end": "1268710"
  },
  {
    "text": "doing as an STD string so that's the type has a type idea of the string and then I can any Casa cast it to the",
    "start": "1268710",
    "end": "1276629"
  },
  {
    "text": "corresponding type and use it and as set this will work with any type even with",
    "start": "1276629",
    "end": "1281639"
  },
  {
    "text": "types that later come from any other source or any other library you have so",
    "start": "1281639",
    "end": "1287820"
  },
  {
    "text": "but of course this because you don't know how how big data might grow this",
    "start": "1287820",
    "end": "1293249"
  },
  {
    "text": "needs a heap memory to allocate corresponding storage a feature we have",
    "start": "1293249",
    "end": "1302909"
  },
  {
    "text": "here is you have boost semantics would be any type which was not supported yet",
    "start": "1302909",
    "end": "1308460"
  },
  {
    "text": "in boost with the any type I think as far as I know but I might be wrong here arm so we have some semantics from them",
    "start": "1308460",
    "end": "1316649"
  },
  {
    "text": "I recently tried to compile it it didn't work this code didn't work so I have to double check it so there's a question",
    "start": "1316649",
    "end": "1324479"
  },
  {
    "text": "mark on this slide currently yeah and we have a fourth basic data",
    "start": "1324479",
    "end": "1332310"
  },
  {
    "text": "type which is a totally different type this is a type called STD bite and it's",
    "start": "1332310",
    "end": "1337950"
  },
  {
    "text": "representing a bike by definition a bite has the size of one so that means it has",
    "start": "1337950",
    "end": "1346620"
  },
  {
    "text": "a size of character so that means that it's open how many bits it has it",
    "start": "1346620",
    "end": "1352650"
  },
  {
    "text": "depends on the platform there are platforms that have 64 bits so where the character has the size of 64 bits so a",
    "start": "1352650",
    "end": "1360690"
  },
  {
    "text": "size of 8 and on that platform the bytes would also be 8's I would it would also",
    "start": "1360690",
    "end": "1368190"
  },
  {
    "text": "be 64 bits have 64 bits so the idea here",
    "start": "1368190",
    "end": "1374220"
  },
  {
    "text": "is and there was a lot of fight when we standardized it the idea was that that",
    "start": "1374220",
    "end": "1382560"
  },
  {
    "text": "that got the interface was to say a byte",
    "start": "1382560",
    "end": "1387720"
  },
  {
    "text": "is not an integral data type so you can",
    "start": "1387720",
    "end": "1393660"
  },
  {
    "text": "use it as an interval data type but it isn't it's just a bite and that means we",
    "start": "1393660",
    "end": "1399600"
  },
  {
    "text": "have operations like bit operations like",
    "start": "1399600",
    "end": "1405050"
  },
  {
    "text": "left shift right shift exclusive or or etc so all the bit operations but we",
    "start": "1405050",
    "end": "1412620"
  },
  {
    "text": "don't have plus or minus or something like that so this should not be yet",
    "start": "1412620",
    "end": "1418020"
  },
  {
    "text": "another character type or something like that and the idea is to make clear if",
    "start": "1418020",
    "end": "1423570"
  },
  {
    "text": "you use it in your program that this you don't use here this type as a very small",
    "start": "1423570",
    "end": "1430500"
  },
  {
    "text": "integral value but you use it as a byte as a representation of eight bits",
    "start": "1430500",
    "end": "1435780"
  },
  {
    "text": "usually so that that's the design of the API and in the interface note that the",
    "start": "1435780",
    "end": "1444780"
  },
  {
    "text": "definition of byte is just an enum so we have extended the language that now we",
    "start": "1444780",
    "end": "1452040"
  },
  {
    "text": "can initialize such an enum with the curly braces which was not possible",
    "start": "1452040",
    "end": "1457580"
  },
  {
    "text": "before with some conditions and but any other initialization is not",
    "start": "1457580",
    "end": "1464019"
  },
  {
    "text": "possible and there is no implicit conversion to buoy so you can't test",
    "start": "1464019",
    "end": "1469659"
  },
  {
    "text": "whether the bite is true yeah a bite is not an integral type it's also not a",
    "start": "1469659",
    "end": "1475120"
  },
  {
    "text": "boolean type it's just representing bits so you have to convert it to the corresponding idea",
    "start": "1475120",
    "end": "1481539"
  },
  {
    "text": "or you can't have to compare it with a bite with full of zeroes so that's",
    "start": "1481539",
    "end": "1486789"
  },
  {
    "text": "possible so there is a function to integer for bool and then two inches",
    "start": "1486789",
    "end": "1493120"
  },
  {
    "text": "that you pass the type you want to convert this the integral type you want to convert this by two and that way you",
    "start": "1493120",
    "end": "1499480"
  },
  {
    "text": "can use in an integer expression or you can assign it to any integer or some",
    "start": "1499480",
    "end": "1505059"
  },
  {
    "text": "other types okay that's a fundamental",
    "start": "1505059",
    "end": "1510759"
  },
  {
    "text": "data types we have what else do we have we have a really new library it's called",
    "start": "1510759",
    "end": "1516429"
  },
  {
    "text": "the file system library the file system library comes from booth also also it",
    "start": "1516429",
    "end": "1526929"
  },
  {
    "text": "has some modifications so the idea of a file system library is to be able to",
    "start": "1526929",
    "end": "1535019"
  },
  {
    "text": "portable program with file systems it's not creating fights we have that already",
    "start": "1535019",
    "end": "1542379"
  },
  {
    "text": "but it's more something like creating a directory or iterating over a directory",
    "start": "1542379",
    "end": "1548799"
  },
  {
    "text": "recursively go through a directory find out whether a path is a root something",
    "start": "1548799",
    "end": "1555850"
  },
  {
    "text": "like that so all these sizes and operations I think the best example is if you just see code and you see here",
    "start": "1555850",
    "end": "1562240"
  },
  {
    "text": "the the general idea if you include file system then you have the data type file",
    "start": "1562240",
    "end": "1568809"
  },
  {
    "text": "system path with represents a path in your file system you can check whether",
    "start": "1568809",
    "end": "1573820"
  },
  {
    "text": "this exists so whether there is something and if this something exists",
    "start": "1573820",
    "end": "1579370"
  },
  {
    "text": "you can double check about it this is it a regular hire and you can ask for its",
    "start": "1579370",
    "end": "1585129"
  },
  {
    "text": "size you is it a directory then you can use the directory iterator to iterate",
    "start": "1585129",
    "end": "1590559"
  },
  {
    "text": "over this directory and you can do other things a couple of other things",
    "start": "1590559",
    "end": "1596160"
  },
  {
    "text": "including printing out the path this more or less has no change to boost I",
    "start": "1596160",
    "end": "1602200"
  },
  {
    "text": "just had to change the the the namespace from boost to STD and the include",
    "start": "1602200",
    "end": "1608800"
  },
  {
    "text": "statement and it did recompile here's another example which shows a little bit",
    "start": "1608800",
    "end": "1615190"
  },
  {
    "text": "that you can create things so you can create a directory you can create a symbolic link you can concatenate paths",
    "start": "1615190",
    "end": "1622540"
  },
  {
    "text": "with the slash operator or flesh equal yeah things like that are supported the",
    "start": "1622540",
    "end": "1630630"
  },
  {
    "text": "specification says that in case there is no equivalent upper operating system",
    "start": "1630630",
    "end": "1638680"
  },
  {
    "text": "support for example if your operating system does not have symbolic links you",
    "start": "1638680",
    "end": "1644560"
  },
  {
    "text": "have to do do things as somebody providing this library on your platform you have to document what happens",
    "start": "1644560",
    "end": "1651190"
  },
  {
    "text": "instead and you have to be as close as possible so if there is no symbolic link",
    "start": "1651190",
    "end": "1656950"
  },
  {
    "text": "you have to double check on your platform what this call means and just",
    "start": "1656950",
    "end": "1662590"
  },
  {
    "text": "to ensure in Windows we have symbolic links some people don't know that again",
    "start": "1662590",
    "end": "1669610"
  },
  {
    "text": "no change in API we try to abstract operating system that's that's a",
    "start": "1669610",
    "end": "1676660"
  },
  {
    "text": "nightmare I can tell you I learned so much I had learned a lot of a lot about symbolic links and where and where am I",
    "start": "1676660",
    "end": "1684850"
  },
  {
    "text": "when I traverse through symbolic links it's really a nightmare and so we",
    "start": "1684850",
    "end": "1692260"
  },
  {
    "text": "abstract something so we say a path can have a root name can have a root directory a directory separator and then",
    "start": "1692260",
    "end": "1699580"
  },
  {
    "text": "a file name and the file name connects connects can exists of a stem and it's",
    "start": "1699580",
    "end": "1704800"
  },
  {
    "text": "extension so stem is the part without the extension and then we have try to",
    "start": "1704800",
    "end": "1710530"
  },
  {
    "text": "map this on different operating systems so here is another example and you see",
    "start": "1710530",
    "end": "1715900"
  },
  {
    "text": "how it behaves under UNIX and Windows we have a path declared there in the middle",
    "start": "1715900",
    "end": "1722020"
  },
  {
    "text": "fubar data.txt and then if we print it out we use we have the",
    "start": "1722020",
    "end": "1728909"
  },
  {
    "text": "general format the general POSIX format and but if we make it preferred as a preferred syntax of the operating system",
    "start": "1728909",
    "end": "1736259"
  },
  {
    "text": "you see that on Windows the slashes are replaced by back slashes and then we",
    "start": "1736259",
    "end": "1742200"
  },
  {
    "text": "have again api's to get a lot of information about this path look at the",
    "start": "1742200",
    "end": "1749159"
  },
  {
    "text": "last line here if we ask is this an absolute path or not it depends on the",
    "start": "1749159",
    "end": "1756210"
  },
  {
    "text": "operating system because UNIX in UNIX this is an absolute path because we",
    "start": "1756210",
    "end": "1763080"
  },
  {
    "text": "always start with root but in Windows we have the drive so C colon or something",
    "start": "1763080",
    "end": "1770669"
  },
  {
    "text": "like that so in Windows this is not an absolute path so so we are not we are not standardizing more than we can so",
    "start": "1770669",
    "end": "1778679"
  },
  {
    "text": "this there will be differences and you have to deal with the differences if you deal with a different operating systems",
    "start": "1778679",
    "end": "1786799"
  },
  {
    "text": "and said this is a library we had in in",
    "start": "1786799",
    "end": "1793129"
  },
  {
    "text": "in boost but we made some some changes and sorry I have to I disabled showing",
    "start": "1793129",
    "end": "1806249"
  },
  {
    "text": "those users slides I wanted to show now so I have to enable them again where is",
    "start": "1806249",
    "end": "1812669"
  },
  {
    "text": "it then this gives me a movement so",
    "start": "1812669",
    "end": "1821090"
  },
  {
    "text": "so yeah sorry so I give you some",
    "start": "1828120",
    "end": "1834090"
  },
  {
    "text": "examples what we would change for example in boost we have defined that an",
    "start": "1834090",
    "end": "1841770"
  },
  {
    "text": "extension always starts with the last dot so if you have a fi called dot git",
    "start": "1841770",
    "end": "1851900"
  },
  {
    "text": "and you ask about the the attributes of this fire the answer is this file has no",
    "start": "1851900",
    "end": "1861500"
  },
  {
    "text": "SS only the extension and no file name no raw file in which we call a stem",
    "start": "1861500",
    "end": "1868640"
  },
  {
    "text": "which we think is not valid I mean dot dot git is f it has a dot to",
    "start": "1868640",
    "end": "1875039"
  },
  {
    "text": "not be visible by default but it's not a file without the name and with the extension dot git so that's that's not",
    "start": "1875039",
    "end": "1882480"
  },
  {
    "text": "the right semantics we think but you can have C different solutions for this problems in different fibers and",
    "start": "1882480",
    "end": "1888059"
  },
  {
    "text": "libraries and different languages so we change that behavior for example and we",
    "start": "1888059",
    "end": "1894600"
  },
  {
    "text": "change a couple of other minor things there yeah I think I said that already",
    "start": "1894600",
    "end": "1903240"
  },
  {
    "text": "there and that has consequences just this little this little tweak my chains",
    "start": "1903240",
    "end": "1909899"
  },
  {
    "text": "and I guess there was another thing saying that if you have food bar slash",
    "start": "1909899",
    "end": "1915690"
  },
  {
    "text": "dot it was more or less the same as foo bar slash so it's right in the middle",
    "start": "1915690",
    "end": "1922080"
  },
  {
    "text": "there of the slide and so foo bar slash",
    "start": "1922080",
    "end": "1928130"
  },
  {
    "text": "without a following file name was implicitly converted into foo bar slash",
    "start": "1928130",
    "end": "1934230"
  },
  {
    "text": "dot so if you ask is there file name yes there was a file name and the file name was dot which we also changed now and so",
    "start": "1934230",
    "end": "1943620"
  },
  {
    "text": "we said no no there's a difference and we have different behavior if there is a",
    "start": "1943620",
    "end": "1949140"
  },
  {
    "text": "dot after the after the path separator or not that will change the API so a",
    "start": "1949140",
    "end": "1955049"
  },
  {
    "text": "little bit so if you if you convert from boost to SC d Phi system",
    "start": "1955049",
    "end": "1961720"
  },
  {
    "text": "please adopt your code it will not behave exactly like before and we decided not to not to change not to",
    "start": "1961720",
    "end": "1969550"
  },
  {
    "text": "provide a new API there are different API so you will see that the code no",
    "start": "1969550",
    "end": "1975790"
  },
  {
    "text": "longer compiled we use it used because it uses a different header file but don't just change the header file",
    "start": "1975790",
    "end": "1983020"
  },
  {
    "text": "and expect everything to work and there is a third thing that drove us crazy",
    "start": "1983020",
    "end": "1991200"
  },
  {
    "text": "like nuts it's it's symbolic links so",
    "start": "1991200",
    "end": "1997060"
  },
  {
    "text": "look at look at the example here you have here part and every red arrow is a symbolic link so this refers to another",
    "start": "1997060",
    "end": "2004230"
  },
  {
    "text": "location in your file system and if you go to a de look at that where you are a",
    "start": "2004230",
    "end": "2012480"
  },
  {
    "text": "de refers to a B so if you if you go to",
    "start": "2012480",
    "end": "2017850"
  },
  {
    "text": "the directory a de you are actually in a B now things get worse if you have a",
    "start": "2017850",
    "end": "2025320"
  },
  {
    "text": "UNIX shell and ask where you are the UNIX shell will tell you you are an a de",
    "start": "2025320",
    "end": "2031550"
  },
  {
    "text": "that's a lie that's all convenient function of your shell you are not there",
    "start": "2031550",
    "end": "2038760"
  },
  {
    "text": "you can find it out if you ask PWD so print working directory - capital P then",
    "start": "2038760",
    "end": "2046230"
  },
  {
    "text": "you get the real place you are in and if you go up with CD : : in a shell you are",
    "start": "2046230",
    "end": "2053610"
  },
  {
    "text": "back in ad but if physically you are really in a B then you are then : :",
    "start": "2053610",
    "end": "2062070"
  },
  {
    "text": "would move you to a so we had to deal with these problems and to standardize",
    "start": "2062070",
    "end": "2067649"
  },
  {
    "text": "here something yeah so here are some rules and why did we need that because we decided that we could provide a",
    "start": "2067650",
    "end": "2075000"
  },
  {
    "text": "function computing the relative path between two paths and that become incredible crazy if you if you have to",
    "start": "2075000",
    "end": "2082770"
  },
  {
    "text": "deal with these situations so the outcome is we have a physical relative",
    "start": "2082770",
    "end": "2088740"
  },
  {
    "text": "path and electrical relative path so electrical relative path doesn't take the operating system into a",
    "start": "2088740",
    "end": "2095618"
  },
  {
    "text": "count so not dealing with any symbolic links but but the relative of not not",
    "start": "2095619",
    "end": "2102579"
  },
  {
    "text": "lexically might consider symbolic links so we have not just one API to compute",
    "start": "2102579",
    "end": "2108730"
  },
  {
    "text": "relative path we have multiple API to do that and yeah now you know why booth",
    "start": "2108730",
    "end": "2114220"
  },
  {
    "text": "didn't have a support for something like for the computer relative path between files because it was very tricky to do",
    "start": "2114220",
    "end": "2121180"
  },
  {
    "text": "that but with it and that's it that's a good news so what else let me talk about some",
    "start": "2121180",
    "end": "2129369"
  },
  {
    "text": "other libraries so minor libraries file system is certainly a big library in a very helpful library the first thing I",
    "start": "2129369",
    "end": "2137529"
  },
  {
    "text": "want to show you is that we paralyze the existing STL algorithms so that means",
    "start": "2137529",
    "end": "2145089"
  },
  {
    "text": "whenever you do something for each and every element in your container for",
    "start": "2145089",
    "end": "2151210"
  },
  {
    "text": "example transforming it or computing I don't know the square of the elements",
    "start": "2151210",
    "end": "2156999"
  },
  {
    "text": "etc you can now benefit from the fact that we have multiple CPUs or multiple",
    "start": "2156999",
    "end": "2164549"
  },
  {
    "text": "costs multiple threats available so we",
    "start": "2164549",
    "end": "2169720"
  },
  {
    "text": "have threat multi parallel support for the implemented algorithm and for more or less every others and we have",
    "start": "2169720",
    "end": "2177390"
  },
  {
    "text": "unfortunately things become tricky sometimes then so you have to beware what what is possible and what not so we",
    "start": "2177390",
    "end": "2184480"
  },
  {
    "text": "have to ask for some guarantees for example if we process with multiple threats three different elements of a",
    "start": "2184480",
    "end": "2192999"
  },
  {
    "text": "vector and the first step is to acquire a global lock then you run into a big",
    "start": "2192999",
    "end": "2201249"
  },
  {
    "text": "problem because the first threat gets a lock and then the next threat is blocked",
    "start": "2201249",
    "end": "2206339"
  },
  {
    "text": "etc so so we have to deal with some ideas of how to be how much guarantees",
    "start": "2206339",
    "end": "2212259"
  },
  {
    "text": "we give and here you see the a general try to explain what we what we guarantee",
    "start": "2212259",
    "end": "2217269"
  },
  {
    "text": "we have different policies you can apply them to the to the algorithms the first",
    "start": "2217269",
    "end": "2222279"
  },
  {
    "text": "policy is sequential execution that's the way things are handled now you have one threat do we",
    "start": "2222279",
    "end": "2228740"
  },
  {
    "text": "all the steps for the first element then all the steps for the second element and all the steps for the third element so",
    "start": "2228740",
    "end": "2234950"
  },
  {
    "text": "the steps would here ABC for example parallel execution means that you can",
    "start": "2234950",
    "end": "2241400"
  },
  {
    "text": "use multiple threats but each thread is sequentially processing one element so",
    "start": "2241400",
    "end": "2248740"
  },
  {
    "text": "three different threats might take three different elements but for each element they for example in a lock something do",
    "start": "2248740",
    "end": "2256460"
  },
  {
    "text": "something and then unlock something and the third thing is to say well we have",
    "start": "2256460",
    "end": "2263540"
  },
  {
    "text": "even not a guarantee that the elements if they are taking are sequentially",
    "start": "2263540",
    "end": "2269410"
  },
  {
    "text": "sequentially are possessed so a threat might take first do the first step of of",
    "start": "2269410",
    "end": "2276350"
  },
  {
    "text": "the first element which is a for the left part then do the first step of another element and if this step is the",
    "start": "2276350",
    "end": "2283910"
  },
  {
    "text": "good is taking a lock then you have a problem then you have a deadlock then",
    "start": "2283910",
    "end": "2288920"
  },
  {
    "text": "you are out of order so you need some additional guarantees to be able to do",
    "start": "2288920",
    "end": "2294230"
  },
  {
    "text": "that but if it if it helps it can be even better which is usually called",
    "start": "2294230",
    "end": "2299270"
  },
  {
    "text": "vectorization in big crane machines etcetera say well we come in parallel do",
    "start": "2299270",
    "end": "2304430"
  },
  {
    "text": "with threats the first step of some computation of the elements but you need some guarantees so here's how you do",
    "start": "2304430",
    "end": "2312350"
  },
  {
    "text": "that how you deal with that each and every STL algorithm has now a new first",
    "start": "2312350",
    "end": "2317540"
  },
  {
    "text": "argument and here you select the policy you say you are not allowed to use",
    "start": "2317540",
    "end": "2322880"
  },
  {
    "text": "multiple threats that's on the bottom execution sequentially that's what we",
    "start": "2322880",
    "end": "2329090"
  },
  {
    "text": "had before only it's only option and the other two options I explained already so parallel",
    "start": "2329090",
    "end": "2336290"
  },
  {
    "text": "or powers even not sequenced and no guarantees at all which is usually fine",
    "start": "2336290",
    "end": "2342050"
  },
  {
    "text": "if you only do local processing like here but at the moment you have a lock",
    "start": "2342050",
    "end": "2348230"
  },
  {
    "text": "got used which is shared among the different elements you can't you see the",
    "start": "2348230",
    "end": "2354530"
  },
  {
    "text": "flexible policy on top here when we did",
    "start": "2354530",
    "end": "2359540"
  },
  {
    "text": "that we added new STL algorithms because it turned out that we get some drawbacks or",
    "start": "2359540",
    "end": "2366619"
  },
  {
    "text": "some things we're missing for example and accumulate accumulate the element of",
    "start": "2366619",
    "end": "2374059"
  },
  {
    "text": "a container but we guarantee the order and that's that's a certain a big",
    "start": "2374059",
    "end": "2381920"
  },
  {
    "text": "drawback when making this parallel because then to keep the aura you have to compute the order of the results the",
    "start": "2381920",
    "end": "2389930"
  },
  {
    "text": "different threads give you and to to deal with it with the order so we introduced a new algorithm reduce which",
    "start": "2389930",
    "end": "2397040"
  },
  {
    "text": "that's no longer guarantee about the order the the operation like plus also",
    "start": "2397040",
    "end": "2403670"
  },
  {
    "text": "is applied which means that for example you can't do that for floating-point values because different results might",
    "start": "2403670",
    "end": "2410930"
  },
  {
    "text": "might occur but it's fine for adding integers for example it doesn't matter how in which order they are added you",
    "start": "2410930",
    "end": "2419990"
  },
  {
    "text": "compute the Sun and we have other examples like that way where we do to",
    "start": "2419990",
    "end": "2425210"
  },
  {
    "text": "the parallelization introduce some tweaks of the existing algorithms with a",
    "start": "2425210",
    "end": "2430910"
  },
  {
    "text": "new name and we have a two or three other things so clamp is just combining",
    "start": "2430910",
    "end": "2439069"
  },
  {
    "text": "a minute the max call to say I want to I want to constrain a value between the",
    "start": "2439069",
    "end": "2445160"
  },
  {
    "text": "lowest variance also and the highest various also and we have sample samples also interesting so for people who do",
    "start": "2445160",
    "end": "2452829"
  },
  {
    "text": "need random numbers or random sub subsets of set it's a it's the ideas if",
    "start": "2452829",
    "end": "2460400"
  },
  {
    "text": "you have a set say of 1 million values of 1 million customers or 1 million",
    "start": "2460400",
    "end": "2466329"
  },
  {
    "text": "objects of certain data and you need just random extraction from that so for",
    "start": "2466329",
    "end": "2472790"
  },
  {
    "text": "example 100 of them but you want to you want to have it randomly computed which",
    "start": "2472790",
    "end": "2479240"
  },
  {
    "text": "hundred you extract from them this is called sample this interfaces that using",
    "start": "2479240",
    "end": "2485240"
  },
  {
    "text": "one of the in the standard predefined random number generators",
    "start": "2485240",
    "end": "2493150"
  },
  {
    "text": "and we also have new searches hoya",
    "start": "2493150",
    "end": "2498530"
  },
  {
    "text": "mobile mu and hospital circuits I am no clue about the details here in the fact",
    "start": "2498530",
    "end": "2504830"
  },
  {
    "text": "what they are doing better than before I'm not an expert in that area but the",
    "start": "2504830",
    "end": "2510380"
  },
  {
    "text": "whole idea is if you have a large string so it's not like this example it's if",
    "start": "2510380",
    "end": "2515990"
  },
  {
    "text": "you're if you really have a lot of string say a complete book or even more and you want a fast search sub strings",
    "start": "2515990",
    "end": "2524420"
  },
  {
    "text": "then they they internally create hash values etc and by this trick which you",
    "start": "2524420",
    "end": "2530540"
  },
  {
    "text": "can find if you search for these three names there are three different names of authors of these algorithms you can a",
    "start": "2530540",
    "end": "2537230"
  },
  {
    "text": "lot faster find sub strings in such a string so for those people who do text",
    "start": "2537230",
    "end": "2542750"
  },
  {
    "text": "processing of large strings this is a significant improvement couple of other",
    "start": "2542750",
    "end": "2551240"
  },
  {
    "text": "things we fix some gaps we had in some containers are tryin place was missing",
    "start": "2551240",
    "end": "2559100"
  },
  {
    "text": "fourth for maps and place back in front was missing or it's now returning",
    "start": "2559100",
    "end": "2564140"
  },
  {
    "text": "something we added data a non-count data for Strings and etc and said other I",
    "start": "2564140",
    "end": "2570470"
  },
  {
    "text": "think the vectors and forwards lists now support incomplete types by the way you",
    "start": "2570470",
    "end": "2577040"
  },
  {
    "text": "see on the right side a so-called paper number every proposal we have in C++ is",
    "start": "2577040",
    "end": "2582680"
  },
  {
    "text": "driven by a paper and these papers have different numbers you can see that the",
    "start": "2582680",
    "end": "2588320"
  },
  {
    "text": "scheme of the paper numbers change over time so in the past we had n numbers now",
    "start": "2588320",
    "end": "2594200"
  },
  {
    "text": "we have P numbers if you look in the internet at the Internet to these numbers you will find the original paper",
    "start": "2594200",
    "end": "2600020"
  },
  {
    "text": "I'm saying what was the intention and and what should change understand that",
    "start": "2600020",
    "end": "2605950"
  },
  {
    "text": "so here's one example which was a point here close to the end we we extended the",
    "start": "2605950",
    "end": "2615160"
  },
  {
    "text": "interface of associative containers to make it cheap to move the elements into",
    "start": "2615160",
    "end": "2622520"
  },
  {
    "text": "another container of the same category I should say or to modify it somehow",
    "start": "2622520",
    "end": "2628880"
  },
  {
    "text": "here's a example that explains it if you have a map of three elements and each",
    "start": "2628880",
    "end": "2636230"
  },
  {
    "text": "element has a key one two three and then a fruit so mango papaya and guava and",
    "start": "2636230",
    "end": "2641569"
  },
  {
    "text": "you probably have the situation like here listed so now you want to change",
    "start": "2641569",
    "end": "2647839"
  },
  {
    "text": "the value of one of the elements namely the one with index two and the problem",
    "start": "2647839",
    "end": "2655910"
  },
  {
    "text": "is normally you have to remove it and then change the value and then you add",
    "start": "2655910",
    "end": "2661760"
  },
  {
    "text": "it again and removing Freesat memory and editing it again allocates memory again",
    "start": "2661760",
    "end": "2667430"
  },
  {
    "text": "and that's expensive of course so here we have a cheaper way we can extract",
    "start": "2667430",
    "end": "2673700"
  },
  {
    "text": "this this note this value from the container and we get a handle which",
    "start": "2673700",
    "end": "2681200"
  },
  {
    "text": "still reserves the memory for this data then we can in this handle we can change",
    "start": "2681200",
    "end": "2687440"
  },
  {
    "text": "the key to four and then we can move this back into the container and this",
    "start": "2687440",
    "end": "2694069"
  },
  {
    "text": "all happens without any memory allocation or the allocation which of course makes it cheaper to handle things",
    "start": "2694069",
    "end": "2700730"
  },
  {
    "text": "so this is just this is not only to to be able to change the key of a value in",
    "start": "2700730",
    "end": "2706880"
  },
  {
    "text": "such a map it's also possible to move for example a value cheaply from one map",
    "start": "2706880",
    "end": "2713780"
  },
  {
    "text": "into another or even into a multi map and yeah that's supported now oh yeah",
    "start": "2713780",
    "end": "2723319"
  },
  {
    "text": "here's another example we have a soft value a map of one two three and in the",
    "start": "2723319",
    "end": "2731240"
  },
  {
    "text": "destination value and then we want to insert this new value into the",
    "start": "2731240",
    "end": "2737960"
  },
  {
    "text": "destination map which we extracted and here we can for example we get again we",
    "start": "2737960",
    "end": "2745910"
  },
  {
    "text": "get the note handle to find out if it's fair what was wrong what went wrong I need some clarifying graphics here for",
    "start": "2745910",
    "end": "2754130"
  },
  {
    "text": "this slight bubbling so a few minutes left let's see we still",
    "start": "2754130",
    "end": "2760040"
  },
  {
    "text": "have some things the first thing is the scope block this is the third lock god",
    "start": "2760040",
    "end": "2766250"
  },
  {
    "text": "we have in C++ I apologize for that we have laka which is a simple guard",
    "start": "2766250",
    "end": "2774220"
  },
  {
    "text": "it's not the underlying mutex it's just an object that uses the mutex so that",
    "start": "2774220",
    "end": "2779630"
  },
  {
    "text": "the constructor locks and the destructor unlocks and the first thing the first",
    "start": "2779630",
    "end": "2786110"
  },
  {
    "text": "inter API was a la la carte which could only lock in the constructor and unlock",
    "start": "2786110",
    "end": "2792710"
  },
  {
    "text": "in the destructor then the second one was eunuch lock unig lock and lock guard came together with C+ or 711 and the the",
    "start": "2792710",
    "end": "2802850"
  },
  {
    "text": "second one is can more than just constructor and destructor lock they can",
    "start": "2802850",
    "end": "2809180"
  },
  {
    "text": "in the middle they can do even during its lifetime unlock and lock on you need",
    "start": "2809180",
    "end": "2814520"
  },
  {
    "text": "it in some places it turned out that we made a mistake or something unfortunate",
    "start": "2814520",
    "end": "2821420"
  },
  {
    "text": "and the point is sometimes it's it's necessary to lock multiple mutexes and",
    "start": "2821420",
    "end": "2827560"
  },
  {
    "text": "if we do that we have a function called",
    "start": "2827560",
    "end": "2833390"
  },
  {
    "text": "lock that's coming from C++ 11 this is not an object this is not a constructor",
    "start": "2833390",
    "end": "2839570"
  },
  {
    "text": "call this is a function called lock and it locks to Moo Texas with a deadline",
    "start": "2839570",
    "end": "2845900"
  },
  {
    "text": "deadlock avoidance mechanism so it means instead of guaranteeing how the mutex is",
    "start": "2845900",
    "end": "2852200"
  },
  {
    "text": "are locked it finds out which is the right order to lock the mutex is to avoid a deadlock not in general your",
    "start": "2852200",
    "end": "2859010"
  },
  {
    "text": "program can still have deadlocks but not in this place that's the point and so",
    "start": "2859010",
    "end": "2865930"
  },
  {
    "text": "the problem was we had to unlock both Moo Texas and for that case we had to",
    "start": "2865930",
    "end": "2872660"
  },
  {
    "text": "adopt the lock mutexes by a la carte that was interface we had to use and",
    "start": "2872660",
    "end": "2879320"
  },
  {
    "text": "this this all became because the scope lock the the trivial lock guard was not",
    "start": "2879320",
    "end": "2887330"
  },
  {
    "text": "very attic so was not able Tulloch more than one mutex and be fixed",
    "start": "2887330",
    "end": "2892700"
  },
  {
    "text": "set which we you might ask why didn't we succeed in lockhart the point what would",
    "start": "2892700",
    "end": "2899509"
  },
  {
    "text": "have been it would break binary compatibility so it would mean that you",
    "start": "2899509",
    "end": "2907279"
  },
  {
    "text": "have to recompile your whole program and your whole source code with using lockers",
    "start": "2907279",
    "end": "2912349"
  },
  {
    "text": "when switching to c++ 17 and that was not acceptable and so we introduced too",
    "start": "2912349",
    "end": "2920089"
  },
  {
    "text": "bad but we introduced the new class goal block which can take multiple move texas you see also how we work we have",
    "start": "2920089",
    "end": "2927799"
  },
  {
    "text": "compiler vendors there we have people from from every major platform compilers",
    "start": "2927799",
    "end": "2933710"
  },
  {
    "text": "and also those who write libraries and we discuss things like that very seriously binary compatibility is is",
    "start": "2933710",
    "end": "2941559"
  },
  {
    "text": "it's a good thing sometimes we we don't support it if there are some workarounds",
    "start": "2941559",
    "end": "2948980"
  },
  {
    "text": "but for example i can tell you that visual c++ 17 is the first visual c++",
    "start": "2948980",
    "end": "2958489"
  },
  {
    "text": "version with business civil platform which was studio 17 so the newest visual",
    "start": "2958489",
    "end": "2964849"
  },
  {
    "text": "studio compiler has a compiler number called 19 dot 10 because it's a binary",
    "start": "2964849",
    "end": "2974660"
  },
  {
    "text": "compatible to the code from Visual Studio 15 this has never happened before",
    "start": "2974660",
    "end": "2980029"
  },
  {
    "text": "in the past from switching from visual studio 13 through 15 was not binary",
    "start": "2980029",
    "end": "2985869"
  },
  {
    "text": "compatible in any sense so but now they have it so and one reason is that",
    "start": "2985869",
    "end": "2992269"
  },
  {
    "text": "compiler vendors fight for things like that but you see you pay the price we have the problem of being backward",
    "start": "2992269",
    "end": "2999319"
  },
  {
    "text": "compatible a problem you all know and we have the same problems like you we have to support staff we standardized 20",
    "start": "2999319",
    "end": "3007749"
  },
  {
    "text": "years ago and we really would like to to change things looking back that that's",
    "start": "3007749",
    "end": "3014079"
  },
  {
    "text": "the way it is so a few other things for",
    "start": "3014079",
    "end": "3020160"
  },
  {
    "text": "Atomics we now have support to find out how to deal with your",
    "start": "3020160",
    "end": "3025599"
  },
  {
    "text": "caching I'm not an expert in that area and how how locks are used in the",
    "start": "3025599",
    "end": "3032320"
  },
  {
    "text": "platform so the first thing is for any atomic data type you can find out with",
    "start": "3032320",
    "end": "3037720"
  },
  {
    "text": "C++ API whether it's locked free or not block free implemented so if you have a an",
    "start": "3037720",
    "end": "3045490"
  },
  {
    "text": "integer or your own data type which is possible in C++ and use it as an atomic",
    "start": "3045490",
    "end": "3051010"
  },
  {
    "text": "data type you can find out whether if the code generated will use lock so",
    "start": "3051010",
    "end": "3056440"
  },
  {
    "text": "create its own mutexes or will be pretty cheap by the underlying CPU and that's",
    "start": "3056440",
    "end": "3063099"
  },
  {
    "text": "that in the past you had to use a C interface there too bad and now we have C plus off interface for that and we",
    "start": "3063099",
    "end": "3070210"
  },
  {
    "text": "have some portable information to have",
    "start": "3070210",
    "end": "3076329"
  },
  {
    "text": "to deal with the wizard with a cache line size of the level 1 data in your",
    "start": "3076329",
    "end": "3082510"
  },
  {
    "text": "platforms if you know what that means you can probably explain it to me I can't explain it to you what it is",
    "start": "3082510",
    "end": "3088810"
  },
  {
    "text": "determines some new mathematical features we have we have adopted a whole",
    "start": "3088810",
    "end": "3096099"
  },
  {
    "text": "sub library for mathematical purposes dealing with elliptic elliptic integrals",
    "start": "3096099",
    "end": "3102849"
  },
  {
    "text": "polynomials Bessel functions etc arm and we have greatest common divisor and",
    "start": "3102849",
    "end": "3109810"
  },
  {
    "text": "least common what is M I only know the",
    "start": "3109810",
    "end": "3116500"
  },
  {
    "text": "German words for that so and we have a three argument who put into this for",
    "start": "3116500",
    "end": "3122560"
  },
  {
    "text": "whatever purpose you need that if you are mathematic fishing you know that and",
    "start": "3122560",
    "end": "3127619"
  },
  {
    "text": "again yet again we have another API to convert integers to integral values N",
    "start": "3127619",
    "end": "3134079"
  },
  {
    "text": "and numeric values and the otherwise we have had a lot of approaches the highest",
    "start": "3134079",
    "end": "3140020"
  },
  {
    "text": "that the most cost the approach which it costs the most was to use string streams",
    "start": "3140020",
    "end": "3146859"
  },
  {
    "text": "which is very very extensive so for that reasons a lot of people still were using",
    "start": "3146859",
    "end": "3152619"
  },
  {
    "text": "printf and scanf and then the next approach in c++ eleven boss to use to string on",
    "start": "3152619",
    "end": "3161010"
  },
  {
    "text": "functions like s to ll for example to convert a string into a long long but",
    "start": "3161010",
    "end": "3168250"
  },
  {
    "text": "they were still dealing with for example",
    "start": "3168250",
    "end": "3174150"
  },
  {
    "text": "internationalization so with located etc so this was also pretty expensive if you",
    "start": "3174150",
    "end": "3179770"
  },
  {
    "text": "didn't meet localization so now we have a low-level interface locally",
    "start": "3179770",
    "end": "3186069"
  },
  {
    "text": "independent simple and fast which does convert an integral number to a sequence",
    "start": "3186069",
    "end": "3193059"
  },
  {
    "text": "of characters you have to provide the buffer where this function writes in and the other way around and the interesting",
    "start": "3193059",
    "end": "3199750"
  },
  {
    "text": "thing is as a single single side-effect we have the following we can convert we",
    "start": "3199750",
    "end": "3206980"
  },
  {
    "text": "can guarantee round-trip ability for floating-point numbers here which is not",
    "start": "3206980",
    "end": "3212170"
  },
  {
    "text": "a trivial case floating point numbers to",
    "start": "3212170",
    "end": "3217510"
  },
  {
    "text": "become rounded tables they these floating point numbers can have hundreds of digits if you write them out and then",
    "start": "3217510",
    "end": "3223869"
  },
  {
    "text": "read them in portable so that's now supported here with this API so a",
    "start": "3223869",
    "end": "3229240"
  },
  {
    "text": "low-level really something for usually library writers but which really now",
    "start": "3229240",
    "end": "3234970"
  },
  {
    "text": "finally replaces printf and scanf for the different formats like % s & % e so",
    "start": "3234970",
    "end": "3245079"
  },
  {
    "text": "I think that's it we have a couple of bug fixes of course maybe one",
    "start": "3245079",
    "end": "3251470"
  },
  {
    "text": "interesting thing cons expert everywhere chrono",
    "start": "3251470",
    "end": "3256599"
  },
  {
    "text": "the the library to deal with timers and time points and durations is now a",
    "start": "3256599",
    "end": "3265119"
  },
  {
    "text": "complete library of constant except one or three chords so every computation can",
    "start": "3265119",
    "end": "3273250"
  },
  {
    "text": "happen if needed at compile time and the only thing that's not possible in compiler is to ask operating system",
    "start": "3273250",
    "end": "3280660"
  },
  {
    "text": "which time is it and to convert to tour from time T everything else can have met",
    "start": "3280660",
    "end": "3286240"
  },
  {
    "text": "compile time which makes programming sometimes pretty fast",
    "start": "3286240",
    "end": "3292320"
  },
  {
    "text": "okay new type traits for those who deal with template code and do fundamental",
    "start": "3292320",
    "end": "3299320"
  },
  {
    "text": "programming with template code there are also new things provided I think I don't",
    "start": "3299320",
    "end": "3304690"
  },
  {
    "text": "go into details here now and we also removed some things we remove for",
    "start": "3304690",
    "end": "3311349"
  },
  {
    "text": "example operator plus plus for bool yes this existed when we introduced this in C++ people thought this is a cool idea",
    "start": "3311349",
    "end": "3318700"
  },
  {
    "text": "it turned out it's not a cool idea and we remove the keyword register so we",
    "start": "3318700",
    "end": "3325960"
  },
  {
    "text": "don't longer support it but it's kept reserved for future use so like Auto we",
    "start": "3325960",
    "end": "3332740"
  },
  {
    "text": "might in future give register a new semantics and we changed exception",
    "start": "3332740",
    "end": "3339550"
  },
  {
    "text": "specifications so the deprecated exception specifications without no",
    "start": "3339550",
    "end": "3344920"
  },
  {
    "text": "accept are no longer supported but beware there's one thing what we",
    "start": "3344920",
    "end": "3350710"
  },
  {
    "text": "deprecated or remove in the library or in the under standard in general the other things is when compilers no longer",
    "start": "3350710",
    "end": "3357460"
  },
  {
    "text": "support that day we usually care to be backward compatible even more than we in",
    "start": "3357460",
    "end": "3362890"
  },
  {
    "text": "the standardization and sometimes we do crazy things for example code convert",
    "start": "3362890",
    "end": "3368980"
  },
  {
    "text": "which is a code conversion of Springs and characters according to different",
    "start": "3368980",
    "end": "3375819"
  },
  {
    "text": "code sets or character sets was just introduced in C++ 11 it didn't work well",
    "start": "3375819",
    "end": "3381700"
  },
  {
    "text": "to be honest we have nobody caring about it and knowing enough to do with it so we removed it already and we still are",
    "start": "3381700",
    "end": "3389619"
  },
  {
    "text": "looking for people proposing a very useful thing for example to convert utf-16 to UTS 32 which is very common in",
    "start": "3389619",
    "end": "3397869"
  },
  {
    "text": "java but we have no api for that and as I said before it's your fault that it's",
    "start": "3397869",
    "end": "3403240"
  },
  {
    "text": "not there because you were not there proposing a corresponding library for the standard and we temporarily",
    "start": "3403240",
    "end": "3411450"
  },
  {
    "text": "discourage things and it's it's for memory reordering that's it's very low",
    "start": "3411450",
    "end": "3417579"
  },
  {
    "text": "level where CPUs has guarantees when they can reorder statements and cache",
    "start": "3417579",
    "end": "3424300"
  },
  {
    "text": "line we we have we had a value there that really didn't work so we really have",
    "start": "3424300",
    "end": "3430180"
  },
  {
    "text": "something like temporarily discouraged so for the moment it should not be used",
    "start": "3430180",
    "end": "3435490"
  },
  {
    "text": "become beg later when we find out more details so so that's it the highlights",
    "start": "3435490",
    "end": "3443320"
  },
  {
    "text": "of C++ in general even combined with the part 1 features are a lot of new",
    "start": "3443320",
    "end": "3450570"
  },
  {
    "text": "language features and libraries and as a significant part I list here everything",
    "start": "3450570",
    "end": "3456970"
  },
  {
    "text": "with the structured bindings fold expressions in line variable compile time is class template argument",
    "start": "3456970",
    "end": "3462520"
  },
  {
    "text": "deduction and that's probably not complete and you now saw the the",
    "start": "3462520",
    "end": "3467670"
  },
  {
    "text": "libraries in new libraries and help us we got and of course have each and every",
    "start": "3467670",
    "end": "3473920"
  },
  {
    "text": "where we added concepts but wherever it is possible so to be able to support the",
    "start": "3473920",
    "end": "3480160"
  },
  {
    "text": "wish to move runtime computation to",
    "start": "3480160",
    "end": "3485560"
  },
  {
    "text": "compile time computation just if you don't know where it's good for this is",
    "start": "3485560",
    "end": "3493210"
  },
  {
    "text": "using the chrono library to to compute with different ratios which are the",
    "start": "3493210",
    "end": "3499150"
  },
  {
    "text": "units like seconds and milliseconds also and there we do compile time ratio",
    "start": "3499150",
    "end": "3506490"
  },
  {
    "text": "computation to find out without in units and which otherwise would have to be",
    "start": "3506490",
    "end": "3512260"
  },
  {
    "text": "done at runtime and would cost time what was not voted in C++ modules modules as",
    "start": "3512260",
    "end": "3520540"
  },
  {
    "text": "a lot of people wait for modules because this will solve the problem of large",
    "start": "3520540",
    "end": "3526060"
  },
  {
    "text": "code bases taking a lot of time to compile because each and every time with",
    "start": "3526060",
    "end": "3532000"
  },
  {
    "text": "every translation unit you again insert header files even if you have",
    "start": "3532000",
    "end": "3537100"
  },
  {
    "text": "precompiled headers which go a little bit along the staff it takes a lot of time and we are working on the new",
    "start": "3537100",
    "end": "3545530"
  },
  {
    "text": "console and a new strategy and to deal with that I didn't want to say the word concept here because concept is a",
    "start": "3545530",
    "end": "3551920"
  },
  {
    "text": "concept we have in C++ so concepts which is a way to specify template api's",
    "start": "3551920",
    "end": "3559080"
  },
  {
    "text": "let's see what happens that it's a long story what happens here a lot of people",
    "start": "3559080",
    "end": "3564400"
  },
  {
    "text": "are frustrated a lot of people are not happy with what is currently provided anyway they might mean sooner or later",
    "start": "3564400",
    "end": "3572020"
  },
  {
    "text": "hopefully come something useful ranges is a library you can in betar test",
    "start": "3572020",
    "end": "3579160"
  },
  {
    "text": "already it's a solution of coming from the begin end nightmare to something",
    "start": "3579160",
    "end": "3586960"
  },
  {
    "text": "more useful in more modern so in when it comes in sequence of 20 we will no",
    "start": "3586960",
    "end": "3593200"
  },
  {
    "text": "longer pass begin and end of containers we will pass the containers or sub",
    "start": "3593200",
    "end": "3598510"
  },
  {
    "text": "ranges of it and we will have to deal with them like in UNIX pipes so where",
    "start": "3598510",
    "end": "3604090"
  },
  {
    "text": "you can say in parallel we can compute that we take all the elements of water",
    "start": "3604090",
    "end": "3610180"
  },
  {
    "text": "container do one transformation the other transformation the other transformation and then in parallel by",
    "start": "3610180",
    "end": "3615520"
  },
  {
    "text": "multiple threads the elements will be computed one after the other if that's possible so we can pipeline computations",
    "start": "3615520",
    "end": "3623140"
  },
  {
    "text": "and not using beginning and anymore this will change see this was dramatically",
    "start": "3623140",
    "end": "3629940"
  },
  {
    "text": "let's see whether it comes in C does plus 10t coroutines is in threat environment to define what shall happen",
    "start": "3629940",
    "end": "3636850"
  },
  {
    "text": "under which circumstances when something is ready the problem here is we have two",
    "start": "3636850",
    "end": "3642550"
  },
  {
    "text": "different companies proposing api's Google and Microsoft and they still",
    "start": "3642550",
    "end": "3647830"
  },
  {
    "text": "fight hopefully there is something they can both think about and agree about in",
    "start": "3647830",
    "end": "3654820"
  },
  {
    "text": "near future and reflection you might know from Java etc so that we at runtime",
    "start": "3654820",
    "end": "3660400"
  },
  {
    "text": "kind sign out what members for example the data type has and then deal with",
    "start": "3660400",
    "end": "3665920"
  },
  {
    "text": "that so we could provide serialization etc like that so that that will be a big",
    "start": "3665920",
    "end": "3671110"
  },
  {
    "text": "change and a few minor things so again a",
    "start": "3671110",
    "end": "3677080"
  },
  {
    "text": "summary here I'm a little bit over time two minutes so it's time to finish I",
    "start": "3677080",
    "end": "3682240"
  },
  {
    "text": "think C++ 17 is a significant improvement I now had two hours to",
    "start": "3682240",
    "end": "3687730"
  },
  {
    "text": "explain to show you what is coming still the need to explain all the",
    "start": "3687730",
    "end": "3694070"
  },
  {
    "text": "details and they are a lot of details we still find out what we standardized this to some extent and we have the compiler",
    "start": "3694070",
    "end": "3702410"
  },
  {
    "text": "cut support so I would say there's some data this is a medium new version it's a",
    "start": "3702410",
    "end": "3707630"
  },
  {
    "text": "pretty helpful version but not a revolution and there will be books coming out and one book I can announce",
    "start": "3707630",
    "end": "3715970"
  },
  {
    "text": "here again is a book the next edition of C++ templates which was written 15 years",
    "start": "3715970",
    "end": "3721610"
  },
  {
    "text": "ago explaining all the details of C++ templates and now we revised it after",
    "start": "3721610",
    "end": "3727670"
  },
  {
    "text": "three years work we always propose postpone it because we had better things to do but now it's almost done we'll be",
    "start": "3727670",
    "end": "3734150"
  },
  {
    "text": "out in September it will have 800 pages only explaining the template features of",
    "start": "3734150",
    "end": "3739700"
  },
  {
    "text": "Cetus plus 11 14 and 17 and that's a lot that's all I'm here around only one hour",
    "start": "3739700",
    "end": "3746720"
  },
  {
    "text": "more then I have to go back and go to vacation haha so I can't stay here",
    "start": "3746720",
    "end": "3752540"
  },
  {
    "text": "and so please contact me if you want here or just via email and looking",
    "start": "3752540",
    "end": "3759290"
  },
  {
    "text": "forward to see you somewhere else and I thank you for attention and have a good",
    "start": "3759290",
    "end": "3765980"
  },
  {
    "text": "conference thank you very much",
    "start": "3765980",
    "end": "3769390"
  }
]