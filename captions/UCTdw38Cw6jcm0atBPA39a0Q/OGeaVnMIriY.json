[
  {
    "text": "welcome come on come all to an Adventure my name is Jason mcginness",
    "start": "6439",
    "end": "11920"
  },
  {
    "text": "I've been working in the city for uh of London in finance",
    "start": "11920",
    "end": "17359"
  },
  {
    "text": "for 20 years um I've seen most of the",
    "start": "17359",
    "end": "22519"
  },
  {
    "text": "most outrageous programming errors and some of the less so I've seen some of",
    "start": "22519",
    "end": "27800"
  },
  {
    "text": "the more Curious coding and some of the less so uh here you're going to see some",
    "start": "27800",
    "end": "32960"
  },
  {
    "text": "rather curious coding um we're going to have to skip through it a bit because uh",
    "start": "32960",
    "end": "39280"
  },
  {
    "text": "time but I've basically stmed out I thought I wanted to focus on the",
    "start": "39280",
    "end": "44680"
  },
  {
    "text": "template meta programming rather than necessarily the results so what we're going to do is we the results section is",
    "start": "44680",
    "end": "51879"
  },
  {
    "text": "a few results more in the detail cuz frankly let's go for the",
    "start": "51879",
    "end": "58559"
  },
  {
    "text": "pain we came for template meta programming Madness yes let's do it okay",
    "start": "58559",
    "end": "66200"
  },
  {
    "text": "uh right um template Med estate machines shanon Madness what does this all",
    "start": "66200",
    "end": "73680"
  },
  {
    "text": "mean uh well what happened is I created many years ago a fix to MIT translator",
    "start": "73680",
    "end": "79159"
  },
  {
    "text": "these are two protocols that are used in the city uh fix is a binary pair value",
    "start": "79159",
    "end": "84920"
  },
  {
    "text": "protocol asy based utterly terrible because of course doubles don't round trip in strength",
    "start": "84920",
    "end": "90799"
  },
  {
    "text": "so why on Earth you do do this in the city when Finance is important and money",
    "start": "90799",
    "end": "96200"
  },
  {
    "text": "is important Madness uh theoretical physicists did it it's their",
    "start": "96200",
    "end": "101399"
  },
  {
    "text": "fault uh stupid uh MIT binary based protocol um",
    "start": "101399",
    "end": "107280"
  },
  {
    "text": "basically uh structs so obviously much better uh of limited sense anyway um so",
    "start": "107280",
    "end": "115320"
  },
  {
    "text": "what we do is I'm going to have some Reflections on what computed goto is because why why computer Goto you see the point of all this is I decided a",
    "start": "115320",
    "end": "122039"
  },
  {
    "text": "while ago I wanted to create attempt to create the world's fastest meta State machine possible using C++ no effort",
    "start": "122039",
    "end": "131200"
  },
  {
    "text": "would be spared to save a clock cycle um hence the madness but the point",
    "start": "131200",
    "end": "139920"
  },
  {
    "text": "is is if we've got a computed goto right then we've got base plus stride",
    "start": "139920",
    "end": "146239"
  },
  {
    "text": "and offset uh well okay what",
    "start": "146239",
    "end": "151720"
  },
  {
    "text": "about the offset the multip multipliers so these are the hashes we need to Hash some kind of input order type because",
    "start": "151720",
    "end": "159000"
  },
  {
    "text": "we'll send an input order we've got a state machine we want to know what is do is a new order a cancel a modify blah blah blah and so we want to Hash",
    "start": "159000",
    "end": "166920"
  },
  {
    "text": "them lots of details I'm going to go to some methodology and then we'll have a look at the results some histograms I'm",
    "start": "166920",
    "end": "174440"
  },
  {
    "text": "quite keen on stats if you can't measure it it doesn't exist my backg ground is maybe",
    "start": "174440",
    "end": "180560"
  },
  {
    "text": "theoretical physics but um uh guilty party shall we say but the point is is",
    "start": "180560",
    "end": "185640"
  },
  {
    "text": "that if you can't measure it it don't exist so let's get the stats right",
    "start": "185640",
    "end": "191480"
  },
  {
    "text": "um yes so I don't run something once and claim it went that fast that's BS and anyone who presents",
    "start": "191480",
    "end": "200280"
  },
  {
    "text": "such results I do hope are ashamed I hope they run it more than 10 times CU 10 times gives you a standard deviation",
    "start": "200280",
    "end": "206440"
  },
  {
    "text": "of 10% yes so that means if you want to have a difference in performance you got to have about a 20% difference in",
    "start": "206440",
    "end": "212400"
  },
  {
    "text": "performance because of course the two histograms you mustn't overlap okay you",
    "start": "212400",
    "end": "217480"
  },
  {
    "text": "know that's what they talk about the higs bosons and 59 probability and all that right okay",
    "start": "217480",
    "end": "226239"
  },
  {
    "text": "uh why is this so interesting you see we've heard about calls before from uh",
    "start": "226239",
    "end": "232040"
  },
  {
    "text": "um Robert here and what you can do with it by the way uh I make no claims for",
    "start": "232040",
    "end": "237640"
  },
  {
    "text": "any safety in this code remember remember performance is Paramount but most this code runs on hosted servers",
    "start": "237640",
    "end": "244959"
  },
  {
    "text": "inside big data centers with large people Burly people stopping you getting in and you pay lots of money to put your",
    "start": "244959",
    "end": "251879"
  },
  {
    "text": "computer there and there's lots of legal ease around it so we not really to you mean they're not open to the public",
    "start": "251879",
    "end": "257320"
  },
  {
    "text": "internet and so forth so we're not it to it concerned about buffer overloads overruns and so",
    "start": "257320",
    "end": "264080"
  },
  {
    "text": "forth of course fix messages this great fun streams and so forth uh anyway so",
    "start": "264080",
    "end": "269880"
  },
  {
    "text": "why are we interested it's the heart of a state machine because a state machine does what's my state where's my transition what's my state where's my",
    "start": "269880",
    "end": "276639"
  },
  {
    "text": "transition and we could implement it with if else you know if state is New Order call the new order transition else",
    "start": "276639",
    "end": "283000"
  },
  {
    "text": "blah blah blah and of course we could do some template meta programming to unroll that jolly good but the point is is it's",
    "start": "283000",
    "end": "288680"
  },
  {
    "text": "an if else chain Branch predictor remember we're all on supercal of processes here not embedded I mean even",
    "start": "288680",
    "end": "295240"
  },
  {
    "text": "many embedded processes are super scaler but branch predictor fear of the branch",
    "start": "295240",
    "end": "303199"
  },
  {
    "text": "predictor the instruction timing of computed go-tos are excellent versus mixed prediction of a branch about about",
    "start": "303320",
    "end": "310360"
  },
  {
    "text": "one or two clock Cycles versus order 20 for roll back on a supercal processor for a mispredicted branch so you know",
    "start": "310360",
    "end": "316720"
  },
  {
    "text": "hey know I'm looking can I beat 20 clock Cycles yeah cost of a pipeline restart",
    "start": "316720",
    "end": "324800"
  },
  {
    "text": "so that means is we've got very tight performance constraints",
    "start": "324800",
    "end": "330680"
  },
  {
    "text": "so we're going to comp generate these computed gotic with absolutely no effort",
    "start": "330680",
    "end": "336520"
  },
  {
    "text": "Spar I chose this fix to MIT translator basically because it's a fairly large code base and I've got performance test",
    "start": "336520",
    "end": "343160"
  },
  {
    "text": "before and blah blah blah because it's there um computed go-to versus a naive",
    "start": "343160",
    "end": "348360"
  },
  {
    "text": "metastate machine with IFL change I compared the two do I get a performance difference is it",
    "start": "348360",
    "end": "355280"
  },
  {
    "text": "measurable the Bas and stride are actually we'll leave that to one side because they're relative ly easy to compute it's the state the input state",
    "start": "355280",
    "end": "364120"
  },
  {
    "text": "New Order cancel order uh modify",
    "start": "364120",
    "end": "369599"
  },
  {
    "text": "Etc they're more complex they may be random because of course you know meet",
    "start": "369599",
    "end": "375599"
  },
  {
    "text": "sacks alos send orders right so as far as I'm concerned they're effectively",
    "start": "375599",
    "end": "380720"
  },
  {
    "text": "random um so we could in principle have a per",
    "start": "380720",
    "end": "387240"
  },
  {
    "text": "preferably minimal hash generated of of course Shannon there's no General solution to",
    "start": "387240",
    "end": "394639"
  },
  {
    "text": "this problem if you give me enough States I'll give up creating the hash",
    "start": "394639",
    "end": "400880"
  },
  {
    "text": "more on that later Yes sounds a bit worrying should be um so I'm going to",
    "start": "400880",
    "end": "407039"
  },
  {
    "text": "present results as well this is very much in terms of kind of a phys you know an experiment you know method results",
    "start": "407039",
    "end": "413280"
  },
  {
    "text": "conclusion kind of thing and I quite like that proposal also it's a bit of an",
    "start": "413280",
    "end": "418759"
  },
  {
    "text": "adventure in to some Wilds um we're going to see some histograms",
    "start": "418759",
    "end": "424560"
  },
  {
    "text": "here I'm going to discuss them I'm going to give you a subjective review of the code obviously it's not objective",
    "start": "424560",
    "end": "431160"
  },
  {
    "text": "because I wrote it um yeah maintainability comprehensibility yeah",
    "start": "431160",
    "end": "436599"
  },
  {
    "text": "template meta programming H somebody wrote something about template meta programming um uh oh whoopsy sorry uh",
    "start": "436599",
    "end": "445440"
  },
  {
    "text": "was it Kevin Henny henn's Maxim add a temp argument half the number of",
    "start": "445440",
    "end": "451720"
  },
  {
    "text": "programmers who can comprehend the code fair enough uh right so we I said State",
    "start": "451720",
    "end": "457479"
  },
  {
    "text": "machine sends messages from a client to an exchange and then we get messages sent back from an exchange to a client",
    "start": "457479",
    "end": "463639"
  },
  {
    "text": "they're both on the hot path these metastate machines uh I created a little simulator to pretend to be an exchange I",
    "start": "463639",
    "end": "470080"
  },
  {
    "text": "don't connect to the lsse or B Italia um I've presented",
    "start": "470080",
    "end": "475680"
  },
  {
    "text": "certain areas of this in the past but as I said this particular focuses on writing the Fest metastate machine",
    "start": "475680",
    "end": "484720"
  },
  {
    "text": "possible so that I can no longer statistically measure the performance difference with Branch prediction or",
    "start": "484720",
    "end": "491080"
  },
  {
    "text": "demonstrate I'm better I want to get to The Logical conclusion the ultimate the",
    "start": "491080",
    "end": "497759"
  },
  {
    "text": "end y why the Manion was there why not climb",
    "start": "497759",
    "end": "503919"
  },
  {
    "text": "it it looks interesting keeps me off the streets and annoying Granny's uh Beware yes",
    "start": "503919",
    "end": "510599"
  },
  {
    "text": "premature optimization is the root of all evil please",
    "start": "510599",
    "end": "517159"
  },
  {
    "text": "beware jra's Maxim uh perhaps I'm verging on a few",
    "start": "517159",
    "end": "522560"
  },
  {
    "text": "mjra in terms of pretentiousness here but it's very important to be aware run",
    "start": "522560",
    "end": "528600"
  },
  {
    "text": "your profiler first heed amal's law yes",
    "start": "528600",
    "end": "534240"
  },
  {
    "text": "10% of your code takes 90% of the runtime use your profiler first do not",
    "start": "534240",
    "end": "539360"
  },
  {
    "text": "do this until you've used your profiler and sweated that",
    "start": "539360",
    "end": "545240"
  },
  {
    "text": "code yes exactly this talk obviously fails these two because I've jumped ahead because I already did that and you",
    "start": "545240",
    "end": "552040"
  },
  {
    "text": "haven't seen the results of that fair enough um right so we're going to delve",
    "start": "552040",
    "end": "559079"
  },
  {
    "text": "into a few types here CC type constrained override",
    "start": "559079",
    "end": "565480"
  },
  {
    "text": "type constrained and it overrides things and it's a type right so okay it's got closed",
    "start": "565480",
    "end": "573880"
  },
  {
    "text": "set not open why you see the runtime state will cause a jump",
    "start": "573880",
    "end": "581480"
  },
  {
    "text": "to something called a transition and the process function we'll call it process Okay the reason I use process and not",
    "start": "581480",
    "end": "586720"
  },
  {
    "text": "the function overload operat the function call Operator it's easy to grap for process hard to GP for PR lots of",
    "start": "586720",
    "end": "593519"
  },
  {
    "text": "Pars in C++ um I want to do it in a generic manner",
    "start": "593519",
    "end": "600839"
  },
  {
    "text": "but the problem is is the target address is all I know about the destination remember it's a computed goto it's a jump to an",
    "start": "600839",
    "end": "606680"
  },
  {
    "text": "address there's no type there it doesn't say hey the address has this type you know with these parameters corol",
    "start": "606680",
    "end": "613040"
  },
  {
    "text": "remember it's not an if statement if state is New Order run the new order",
    "start": "613040",
    "end": "619959"
  },
  {
    "text": "transition pass the parameters in new order transition do process open Parn",
    "start": "619959",
    "end": "625279"
  },
  {
    "text": "yeah yeah I know the types a posterior",
    "start": "625279",
    "end": "630399"
  },
  {
    "text": "now I don't all I know is the target address so I need to kind of generate",
    "start": "630399",
    "end": "635800"
  },
  {
    "text": "something some rappers to give me back rather than using void stars because obviously we hate void Stars uh because",
    "start": "635800",
    "end": "642680"
  },
  {
    "text": "we're C++ and why not it'd be much easier I tried actually with void star to start with and I was dissatisfied with that and I thought I can go better",
    "start": "642680",
    "end": "649279"
  },
  {
    "text": "with a little bit of angle brackets not a little bit uh a",
    "start": "649279",
    "end": "655440"
  },
  {
    "text": "lot this state will index into this collection of trans transitions because it's a computed goto um by the way the",
    "start": "655440",
    "end": "662200"
  },
  {
    "text": "state machine I've used it's based years ago it was based on Boost meta State machines it's kind of morphed into this",
    "start": "662200",
    "end": "669079"
  },
  {
    "text": "thing thing and you'll see how it's morphed um so jolly good um we've got",
    "start": "669079",
    "end": "677360"
  },
  {
    "text": "this collection because we've got all these transitions right and we need to bung them somewhere into some kind of",
    "start": "677360",
    "end": "682760"
  },
  {
    "text": "array don't we and obviously memory allocation is evil and I want to use the stack everywhere because of course I",
    "start": "682760",
    "end": "688240"
  },
  {
    "text": "don't do poage chasing because poter chasing is bad and that'll break that call statement CU I want remember the",
    "start": "688240",
    "end": "693480"
  },
  {
    "text": "number of instructions I've got is about 20 I need to be in around five to make",
    "start": "693480",
    "end": "700079"
  },
  {
    "text": "sure I've got sta statistical difference roughly",
    "start": "700079",
    "end": "705959"
  },
  {
    "text": "so standard array is our friend I love standard array there so many ways you",
    "start": "705959",
    "end": "711000"
  },
  {
    "text": "can abuse the poor thing yes you could cry and try and create a structure as a jump table with",
    "start": "711000",
    "end": "716120"
  },
  {
    "text": "standard array I did that uh the problem is is that's in the data cache it has to be fetched and data cache fetches take",
    "start": "716120",
    "end": "722079"
  },
  {
    "text": "about 10 clock Cycles into a register uh right I've just burnt half my 20 clock Cycles bye-bye so no uh don't do that do",
    "start": "722079",
    "end": "730440"
  },
  {
    "text": "it another way so okay now you can see how we can compute the Bas and stride because of course all I do is say hey",
    "start": "730440",
    "end": "736120"
  },
  {
    "text": "you pass in all these transitions I find the largest transition find the appropriate alignment blah blah blah so",
    "start": "736120",
    "end": "741160"
  },
  {
    "text": "there we are Bas and offset done hand waving over there few okay we want to",
    "start": "741160",
    "end": "746920"
  },
  {
    "text": "kind of index into it because we like over loading and you know use an index operator so it kind of looks nice but of",
    "start": "746920",
    "end": "753160"
  },
  {
    "text": "course we need to pass a parameter the index parameter which is of course the hashed",
    "start": "753160",
    "end": "758399"
  },
  {
    "text": "state hello Mr Shannon hello entropy so I'm going to give you a kind",
    "start": "758399",
    "end": "765120"
  },
  {
    "text": "of schematic diagram of what these types are before I plunge into them to try and",
    "start": "765120",
    "end": "770839"
  },
  {
    "text": "give you a kind of overhead okay moment uh more caffeine but by the",
    "start": "770839",
    "end": "778959"
  },
  {
    "text": "way this is the dead man slot after lunch so I will be talking loudly I will be waving my hands and I will be",
    "start": "778959",
    "end": "784600"
  },
  {
    "text": "pointing out to people okay to try and keep you",
    "start": "784600",
    "end": "789040"
  },
  {
    "text": "awake cheers so",
    "start": "790120",
    "end": "796519"
  },
  {
    "text": "okay this is my computed go-to meta State machine instance thereof or type",
    "start": "797199",
    "end": "802440"
  },
  {
    "text": "if you so will right so we've got State transition table you want to know about the state",
    "start": "802440",
    "end": "808360"
  },
  {
    "text": "transition table right so we've got this unordered Tuple I said which can holds all of the transitions yeah that",
    "start": "808360",
    "end": "814600"
  },
  {
    "text": "placement nude into there blah blah um and then we've got some kind of index",
    "start": "814600",
    "end": "820240"
  },
  {
    "text": "operator and we have a perfect hash right but what we do is we have to kind",
    "start": "820240",
    "end": "826880"
  },
  {
    "text": "of call a function don't we this process function so we got to provide it somehow and remember I've all I've got it's a",
    "start": "826880",
    "end": "832199"
  },
  {
    "text": "pointer so this sounds like classic o doesn't it so I've got a base class process method pure virtual I inherit",
    "start": "832199",
    "end": "839120"
  },
  {
    "text": "from it and somehow you know inherit from the transition as well and you know vunderbar I can now call the transition",
    "start": "839120",
    "end": "844839"
  },
  {
    "text": "process brilliant so this is how we do it what we do is we go through each in",
    "start": "844839",
    "end": "851800"
  },
  {
    "text": "our transition each process overload method and what we do is we wrap that with an abstract base type process",
    "start": "851800",
    "end": "858880"
  },
  {
    "text": "because what we do is we identify the methods in it the process methods and then what we",
    "start": "858880",
    "end": "864920"
  },
  {
    "text": "do is iterate over those with template meta programming to generate an abstract Base Class that has that method",
    "start": "864920",
    "end": "870519"
  },
  {
    "text": "signature in it as a pure virtual method and then what we do is daisy chain those all together inheriting from each other",
    "start": "870519",
    "end": "876880"
  },
  {
    "text": "until we eventually come up with a type called abstract base type that collects them all together",
    "start": "876880",
    "end": "882880"
  },
  {
    "text": "yay cool so I've got the pure virtual functions but the point is of course is I now need to actually call the",
    "start": "882880",
    "end": "887959"
  },
  {
    "text": "transition process so now I need some concrete types yes so what we do is we have this final concrete type that uses",
    "start": "887959",
    "end": "894360"
  },
  {
    "text": "the final keyword to finalize everything and get rid of all the uh virtualization",
    "start": "894360",
    "end": "900680"
  },
  {
    "text": "and um more later and then what we'll do is we'll then call the transition",
    "start": "901560",
    "end": "907000"
  },
  {
    "text": "process via the overridden",
    "start": "907000",
    "end": "911880"
  },
  {
    "text": "method yeah so what we do is we do this repeatedly and then what we've got is this is this type unroller which goes",
    "start": "912480",
    "end": "919120"
  },
  {
    "text": "through the signature types because of course we've got no reflection so we need to say return type and argument",
    "start": "919120",
    "end": "924560"
  },
  {
    "text": "types and then we have a tuple of those la la la and we can go through that using our nice template meta",
    "start": "924560",
    "end": "931360"
  },
  {
    "text": "programming and then we have the Bas top the ultimate base top because we want to",
    "start": "931360",
    "end": "936440"
  },
  {
    "text": "kind of TI a nice little bow and that's just one row one",
    "start": "936440",
    "end": "943240"
  },
  {
    "text": "transition more transitions more of this n s",
    "start": "943240",
    "end": "950800"
  },
  {
    "text": "algorithm yep not very quick e well fortunately",
    "start": "950800",
    "end": "955839"
  },
  {
    "text": "the number of states we have is relatively small so that's okay PE right so okay what's this unordered tour the",
    "start": "955839",
    "end": "963360"
  },
  {
    "text": "heart of it all we've got this transition base right which is",
    "start": "963360",
    "end": "971639"
  },
  {
    "text": "click that one that's collected together all of those pure virtual functions for",
    "start": "972519",
    "end": "979279"
  },
  {
    "text": "a transition because of course you may have more than one process method might you because we like overload loading",
    "start": "979279",
    "end": "985319"
  },
  {
    "text": "stuff in C++ don't we come on why don't hey we could do",
    "start": "985319",
    "end": "990519"
  },
  {
    "text": "it we're all about genericity aren't we so here we have a Max size which we can",
    "start": "990519",
    "end": "996759"
  },
  {
    "text": "compute using all these transitions you know size off and all that lovely lovely uh by the way I actually don't use",
    "start": "996759",
    "end": "1003480"
  },
  {
    "text": "constexpr I love enums because enums guarantee it's in the",
    "start": "1003480",
    "end": "1008680"
  },
  {
    "text": "iach which means I have no fetch from the data cach and I have less data cach pressure iach is also 64k in size rather",
    "start": "1008680",
    "end": "1015560"
  },
  {
    "text": "than 32 nice um so blah we compute the",
    "start": "1015560",
    "end": "1021959"
  },
  {
    "text": "stride and here we have the index operator right where we see we've got",
    "start": "1021959",
    "end": "1027760"
  },
  {
    "text": "some kind of the WRA transitions we get some kind of base of this collection of transitions this standard array you see",
    "start": "1027760",
    "end": "1034839"
  },
  {
    "text": "and then we get a hold of the data and then we compute an offset into it right and then we yes so I know reinterpret",
    "start": "1034839",
    "end": "1041400"
  },
  {
    "text": "cost doesn't work in C++ but apparently I've been told that if this doesn't work I should raise a compiler",
    "start": "1041400",
    "end": "1047400"
  },
  {
    "text": "bug so I'm okay good Bas plus offset jolly good and by the way yes I did use",
    "start": "1047400",
    "end": "1053440"
  },
  {
    "text": "standard bites so technically yes that's all fine and dandy great uh one of those",
    "start": "1053440",
    "end": "1059400"
  },
  {
    "text": "blessed types good good good um so here we go as I was saying transition base it's the",
    "start": "1059400",
    "end": "1066600"
  },
  {
    "text": "Base Class of all transition The Base Class of all transitions because remember we've got",
    "start": "1066600",
    "end": "1072640"
  },
  {
    "text": "multiple transitions right and I need to call boink",
    "start": "1072640",
    "end": "1080159"
  },
  {
    "text": "this table data that's all of them right so now each every single transition has",
    "start": "1080159",
    "end": "1085440"
  },
  {
    "text": "to be collected together and I've got to aggregate together all those abstract base classes into one master abstract",
    "start": "1085440",
    "end": "1091200"
  },
  {
    "text": "Base Class that is the one that does that reinterpret cast because of course now you can see because I got transition",
    "start": "1091200",
    "end": "1096960"
  },
  {
    "text": "base I can now call process on it and pass the parameters because I've recovered the",
    "start": "1096960",
    "end": "1103760"
  },
  {
    "text": "type there'll be more code later for you to have a look at to see how roughly how that's done so we've got the hashing",
    "start": "1105200",
    "end": "1111840"
  },
  {
    "text": "algorithm so we turn the state into an index because the state might be J",
    "start": "1111840",
    "end": "1119840"
  },
  {
    "text": "B letters characters it might be",
    "start": "1119840",
    "end": "1124960"
  },
  {
    "text": "AF not one character but two roughly random so it's uh rally",
    "start": "1124960",
    "end": "1131280"
  },
  {
    "text": "unconstrained and I need to constrain that obviously and of course my transitions have the state and",
    "start": "1131280",
    "end": "1137200"
  },
  {
    "text": "transition pairs cuz of course I want to check the state just to make sure I didn't get it wrong the hash right and",
    "start": "1137200",
    "end": "1145559"
  },
  {
    "text": "then I R each transition as I said is wrapped by this constrained over Road type as you saw from the table",
    "start": "1145559",
    "end": "1151400"
  },
  {
    "text": "earlier which is contained within the metastate machine because I make all these things nice and handy for me is um",
    "start": "1151400",
    "end": "1158200"
  },
  {
    "text": "and then of course these WRA transitions that's the buffer in which I place them obviously there's a certain amount of",
    "start": "1158200",
    "end": "1164520"
  },
  {
    "text": "placement new fold expressions and so forth for the placement deleters as well yeah it gets exciting the code",
    "start": "1164520",
    "end": "1172840"
  },
  {
    "text": "anyway so if we consider a naive if else implementation just to reflect again and",
    "start": "1172840",
    "end": "1178480"
  },
  {
    "text": "help try and get your head around this right here we've got my metastate machine process method yeah New Order",
    "start": "1178480",
    "end": "1183960"
  },
  {
    "text": "comes in right I want to pass some parameters lovely so if my state is New",
    "start": "1183960",
    "end": "1189080"
  },
  {
    "text": "Order I'll call the new order transition but you see template matching I know the types here great",
    "start": "1189080",
    "end": "1198520"
  },
  {
    "text": "blah blah blah here on the other hand you can see there I've done my index",
    "start": "1198520",
    "end": "1203600"
  },
  {
    "text": "I've got my transitions base now I call Process now you understand the virtualization that's used and the fact",
    "start": "1203600",
    "end": "1210080"
  },
  {
    "text": "that I had to aggregate together all of the Transitions and all of the abstract",
    "start": "1210080",
    "end": "1216360"
  },
  {
    "text": "based types where I generated all the overloads sorry all the pure virtual functions and all the over rides for all",
    "start": "1216360",
    "end": "1223840"
  },
  {
    "text": "the process methods of each transition sorry",
    "start": "1223840",
    "end": "1230158"
  },
  {
    "text": "I promise you it's only Coca-Cola in there unless they did something um so you can see here the problem is this",
    "start": "1233960",
    "end": "1240960"
  },
  {
    "text": "method yeah these the types of these params I've got to somehow pass them in here which is why I went to all that",
    "start": "1240960",
    "end": "1247039"
  },
  {
    "text": "funky stuff because of course now I've got a set of overridden and overloaded process",
    "start": "1247039",
    "end": "1253919"
  },
  {
    "text": "methods in my constrained override type so this match",
    "start": "1253919",
    "end": "1259880"
  },
  {
    "text": "is and if you call it with the wrong parameters it'll buff because all the",
    "start": "1259880",
    "end": "1265200"
  },
  {
    "text": "generation from the transitions will say there's no match out of all these",
    "start": "1265200",
    "end": "1270400"
  },
  {
    "text": "overloads you can imagine the size of the error messages can't you gigabytes gigabytes it takes",
    "start": "1270400",
    "end": "1280039"
  },
  {
    "text": "minutes I've got a 4 gigz processor in there it takes minutes to cut and paste it into a text",
    "start": "1280039",
    "end": "1286000"
  },
  {
    "text": "document yeah practicality anyway um remember I said",
    "start": "1286000",
    "end": "1293360"
  },
  {
    "text": "this is an experiment it does not need to be practical so as I said if else we know",
    "start": "1293360",
    "end": "1300279"
  },
  {
    "text": "there are types here we have to infer the type via the interface class blah and it's provided by the base class so",
    "start": "1300279",
    "end": "1306000"
  },
  {
    "text": "here we see yes there we are right the big problem is is C++ does not support virtual template meta functions you",
    "start": "1306000",
    "end": "1313200"
  },
  {
    "text": "can't write this no",
    "start": "1313200",
    "end": "1319640"
  },
  {
    "text": "why because V tables have to be closed when the translation U is",
    "start": "1319640",
    "end": "1325279"
  },
  {
    "text": "generated and that V table is open so impossible at the moment maybe in the",
    "start": "1325279",
    "end": "1332159"
  },
  {
    "text": "future the standards committee will change it I'm a member of the stand committee I probably vote against",
    "start": "1332159",
    "end": "1338559"
  },
  {
    "text": "that um okay so as I said constrained override",
    "start": "1339480",
    "end": "1346080"
  },
  {
    "text": "type it supplies a BAS class for each transition with these Declarations of",
    "start": "1346080",
    "end": "1351279"
  },
  {
    "text": "the pure virtual process that I got out of it using those signatures types where",
    "start": "1351279",
    "end": "1356640"
  },
  {
    "text": "I've basically got a using signatures types equals standard Tuple of a",
    "start": "1356640",
    "end": "1361960"
  },
  {
    "text": "standard Tuple of a return type plus standard tle of the argument types and repeat those for each method because",
    "start": "1361960",
    "end": "1368120"
  },
  {
    "text": "we've got no reflection yes it's a bit ugly there is intrusiveness of course there will",
    "start": "1368120",
    "end": "1373720"
  },
  {
    "text": "be as I said we aggregate these base classes into an inheritance",
    "start": "1373720",
    "end": "1379520"
  },
  {
    "text": "chain and we create the rapper that's how we can do the process",
    "start": "1379520",
    "end": "1385279"
  },
  {
    "text": "call and we can guarantee type safety pretty cool huh so here for",
    "start": "1385279",
    "end": "1392080"
  },
  {
    "text": "example I've got my abstract type unroller okay by the way if you look at the code the code is more generic than",
    "start": "1392080",
    "end": "1399080"
  },
  {
    "text": "this so I don't talk about transitions I talk about thing my Bobs um I talked about transitions here",
    "start": "1399080",
    "end": "1405360"
  },
  {
    "text": "because it just makes more sense you let specialize a little um so",
    "start": "1405360",
    "end": "1411039"
  },
  {
    "text": "what we can do is we can see here right my ultimate base type as I mentioned because I want to put a little bow on it I've got to start from somewhere",
    "start": "1411039",
    "end": "1418000"
  },
  {
    "text": "termination got to stop right in generating this because now if you squint at this you can see this is",
    "start": "1418000",
    "end": "1424320"
  },
  {
    "text": "essentially that's the terminal abstract type for each process",
    "start": "1424320",
    "end": "1430240"
  },
  {
    "text": "member function of a transition and here I've used the signatures within the",
    "start": "1430240",
    "end": "1436400"
  },
  {
    "text": "transition right to generate these functions and I can pass the parameters",
    "start": "1436400",
    "end": "1441520"
  },
  {
    "text": "as a type to the class which permits me to have these overrides sorry overloads of virtual",
    "start": "1441520",
    "end": "1449279"
  },
  {
    "text": "functions and of course I do the const and no non const just in case you want to do Cony things and so forth and be",
    "start": "1449279",
    "end": "1455240"
  },
  {
    "text": "nice to you I like const a lot um so now we go to the abstract typon",
    "start": "1455240",
    "end": "1462799"
  },
  {
    "text": "roller we need to generate the rest we've gone to the base and now if you got two methods two process methods well",
    "start": "1462799",
    "end": "1468240"
  },
  {
    "text": "we're going to have to do it again aren't we for the second method and here we do it for the second method look there's abstract type",
    "start": "1468240",
    "end": "1474880"
  },
  {
    "text": "unroller recursive calls and as you can see parameter's been dropped and",
    "start": "1474880",
    "end": "1479919"
  },
  {
    "text": "therefore of course we can see termination will occur is guaranteed to occur eventually we need to introduce",
    "start": "1479919",
    "end": "1486000"
  },
  {
    "text": "the base process functions to make sure we've not hidden anything and introduce more",
    "start": "1486000",
    "end": "1493760"
  },
  {
    "text": "methods appropriate to the second process method in the",
    "start": "1493760",
    "end": "1499679"
  },
  {
    "text": "transition now the end result of this we collect",
    "start": "1499679",
    "end": "1505240"
  },
  {
    "text": "together into here so that then I can call it easily and I can give it a relatively easy name that I can type",
    "start": "1505240",
    "end": "1511480"
  },
  {
    "text": "with some sense and not go insane",
    "start": "1511480",
    "end": "1516240"
  },
  {
    "text": "um yeah I know my terminology is a little bit hey forgive me",
    "start": "1516799",
    "end": "1522559"
  },
  {
    "text": "uh so we need a class that an iser transition for which I mean lisos",
    "start": "1522559",
    "end": "1528600"
  },
  {
    "text": "substitutability principle is a for which these process functions may be called so this is why the concrete type",
    "start": "1528600",
    "end": "1535039"
  },
  {
    "text": "appears remember we somehow call the transition so here you can see it's",
    "start": "1535039",
    "end": "1540880"
  },
  {
    "text": "override abstract base type yep yep yep so what we've done is we've overridden a",
    "start": "1540880",
    "end": "1546120"
  },
  {
    "text": "particular method and there you can see Call Transition process because there we",
    "start": "1546120",
    "end": "1551399"
  },
  {
    "text": "are where is it struck blah blah blah we've inherited from where's the colon gone I can't see the colon there we go",
    "start": "1551399",
    "end": "1558799"
  },
  {
    "text": "there colon there right we've inherited from transition and the ABS base types",
    "start": "1558799",
    "end": "1564159"
  },
  {
    "text": "it's all public right so what we've got now is we can then Call Transition process forwarding the parameters",
    "start": "1564159",
    "end": "1570720"
  },
  {
    "text": "because we like to perfect forwarding um attempt to at least and we can see there's the transition instance",
    "start": "1570720",
    "end": "1576960"
  },
  {
    "text": "thereof constructure of course can construct it nicely um nonconst obviously as",
    "start": "1576960",
    "end": "1586039"
  },
  {
    "text": "well that was the base type this of course we need to do it recursively because we've",
    "start": "1586600",
    "end": "1592760"
  },
  {
    "text": "only overwritten one of the methods we need to over ride the other method in that chain of Base types",
    "start": "1592760",
    "end": "1599159"
  },
  {
    "text": "otherwise it'll say you can't instantiate abstract object fair",
    "start": "1599159",
    "end": "1604679"
  },
  {
    "text": "enough same sort of thing but notes Here inherit from concrete type instead so",
    "start": "1604679",
    "end": "1610840"
  },
  {
    "text": "you can see recursion occurring this is all of course",
    "start": "1610840",
    "end": "1616880"
  },
  {
    "text": "collected together together into a",
    "start": "1616880",
    "end": "1622919"
  },
  {
    "text": "finalizer I just do this simple trick to introduce final so I can try and get rid",
    "start": "1622919",
    "end": "1628000"
  },
  {
    "text": "of all that virtual function calls all those virtual function calls collapse at all and now you can kind of see that",
    "start": "1628000",
    "end": "1634880"
  },
  {
    "text": "computed goto if you squimp really hard",
    "start": "1634880",
    "end": "1639840"
  },
  {
    "text": "because base offset yeah wink wink",
    "start": "1640600",
    "end": "1649520"
  },
  {
    "text": "we're really hoping of course that the optimizer does a really good job uh",
    "start": "1649640",
    "end": "1655360"
  },
  {
    "text": "Robert I believe uh mentioned about the the hopes of optimizers in C++ and the",
    "start": "1655360",
    "end": "1661039"
  },
  {
    "text": "varying degrees are our hopes desires and wishes are",
    "start": "1661039",
    "end": "1666039"
  },
  {
    "text": "fulfilled so final concrete",
    "start": "1666880",
    "end": "1673519"
  },
  {
    "text": "type that's used by Honor Tuple and it's supplies the process method so yes as I",
    "start": "1673519",
    "end": "1680080"
  },
  {
    "text": "said hopefully the final will get rid of all the virtualization so we'll get the performance lovely lovely and we'll get",
    "start": "1680080",
    "end": "1685720"
  },
  {
    "text": "you see all all the type information for transition process methods has been",
    "start": "1685720",
    "end": "1691679"
  },
  {
    "text": "recovered by a lot of template angle brackets we have to introduce the",
    "start": "1691679",
    "end": "1698399"
  },
  {
    "text": "signature types into each transition because of no reflection you know I could try you know",
    "start": "1698399",
    "end": "1705720"
  },
  {
    "text": "standard has member function yeah what parameters do I use I don't know because you might have just decided",
    "start": "1705720",
    "end": "1711840"
  },
  {
    "text": "to make your process method in the transition of template function this copes it's all cool no",
    "start": "1711840",
    "end": "1720759"
  },
  {
    "text": "problem uh so here we go signatures type we can see a pair we've got a return type",
    "start": "1721240",
    "end": "1726600"
  },
  {
    "text": "remember uh yeah all the process methods should return the same type simplification so what I do is I",
    "start": "1726600",
    "end": "1733919"
  },
  {
    "text": "those are the arguments that's the assumed return type and we we repeat this for the same return time why uh",
    "start": "1733919",
    "end": "1741120"
  },
  {
    "text": "it's a state transition table process Returns the next state surely and if it doesn't you've",
    "start": "1741120",
    "end": "1747880"
  },
  {
    "text": "broken the idea of a state transition table so I think that's not an unreasonable",
    "start": "1747880",
    "end": "1753360"
  },
  {
    "text": "simplification um the code itself doesn't do that it's a bit more",
    "start": "1753360",
    "end": "1760480"
  },
  {
    "text": "General so we can see I mentioned the metastate machine so here we have the",
    "start": "1760640",
    "end": "1765720"
  },
  {
    "text": "metastate machine and we've got all our",
    "start": "1765720",
    "end": "1771159"
  },
  {
    "text": "states and we've got what here Constructor which somehow makes it uh",
    "start": "1771159",
    "end": "1776760"
  },
  {
    "text": "but most interestingly we've got the process method on it which there we have table State our index operator hashing",
    "start": "1776760",
    "end": "1784760"
  },
  {
    "text": "occurring do process yeah that's that virtual call so now here look base",
    "start": "1784760",
    "end": "1793398"
  },
  {
    "text": "offset well Bas stride offset likewise for nonconst and there's our",
    "start": "1794159",
    "end": "1800399"
  },
  {
    "text": "table obviously this was a class this is private blah blah blah I kept it more simple for explication none of this code",
    "start": "1800399",
    "end": "1806200"
  },
  {
    "text": "on these screens is guaranteed to compile because of the triple dots that you'll see lurking around that's the",
    "start": "1806200",
    "end": "1811519"
  },
  {
    "text": "point if I showed you the real code it wouldn't fit on a slide it wouldn't fit on many slides there are links in the uh",
    "start": "1811519",
    "end": "1820000"
  },
  {
    "text": "this slide deck to the actual source code you can have a look at it if you",
    "start": "1820000",
    "end": "1825279"
  },
  {
    "text": "like the chief item is interest is a state transition table here you see because what it's done is it's combined",
    "start": "1825399",
    "end": "1831840"
  },
  {
    "text": "the unordered tupal and the constrained override types to permit that dot to",
    "start": "1831840",
    "end": "1838080"
  },
  {
    "text": "work and this call to work and that forwarding to work these parameter types",
    "start": "1838080",
    "end": "1843320"
  },
  {
    "text": "to match one of the pure virtual methods that we've",
    "start": "1843320",
    "end": "1849399"
  },
  {
    "text": "provided of course we could have a very large V table lurking around but in principle final got rid of it for",
    "start": "1849399",
    "end": "1856240"
  },
  {
    "text": "us of course if you call the wrong",
    "start": "1856240",
    "end": "1861919"
  },
  {
    "text": "transition via a valid but miscomputation",
    "start": "1861919",
    "end": "1867320"
  },
  {
    "text": "wo beti you because of course what I've just",
    "start": "1867639",
    "end": "1873679"
  },
  {
    "text": "done is I've said New Order no I'm going to call cancel instead",
    "start": "1873679",
    "end": "1878919"
  },
  {
    "text": "whoopsie whoopsie okay what is this state",
    "start": "1878919",
    "end": "1885320"
  },
  {
    "text": "transition table that I said it collects all these things together here we go we've got the unordered Tuple it's going",
    "start": "1885320",
    "end": "1891399"
  },
  {
    "text": "to need the states the types of the states it's got how you index it it's",
    "start": "1891399",
    "end": "1897039"
  },
  {
    "text": "going to want to know how to call the process method so that hints the abstract base type because that's got all those pure virtual methods in it",
    "start": "1897039",
    "end": "1903720"
  },
  {
    "text": "collected together from all the transitions from all the process methods in each transition then we're going to go",
    "start": "1903720",
    "end": "1912080"
  },
  {
    "text": "perfect hash right so we want to get the state from the transition",
    "start": "1912080",
    "end": "1918960"
  },
  {
    "text": "remember the transitions in this with the state right and I want to get the value of it and then I want to be able",
    "start": "1918960",
    "end": "1924000"
  },
  {
    "text": "to compute the hash of those types right yeah compile time too",
    "start": "1924000",
    "end": "1930799"
  },
  {
    "text": "um cheat warning cheat warning you know I said",
    "start": "1930799",
    "end": "1936240"
  },
  {
    "text": "collecting together all those abstract base types all those Transitions and so forth yeah I could have done it twice I",
    "start": "1936240",
    "end": "1944159"
  },
  {
    "text": "got lazy and I just collected them into the first transition",
    "start": "1944159",
    "end": "1949679"
  },
  {
    "text": "instead rather than going across all the transitions because it turns out most of the transitions have pretty much similar",
    "start": "1949679",
    "end": "1954880"
  },
  {
    "text": "functions and you can just throw them in the first one and it kind of works you could do it all again it's",
    "start": "1954880",
    "end": "1960799"
  },
  {
    "text": "just very boring um and then we've got something called D2 micros which is just",
    "start": "1960799",
    "end": "1966240"
  },
  {
    "text": "a meta function that does some magic uh to turn these Transitions and make the row wrapper you see this row wrapper",
    "start": "1966240",
    "end": "1973039"
  },
  {
    "text": "here that does all that constrained override type thingy for the signature types you see to",
    "start": "1973039",
    "end": "1979960"
  },
  {
    "text": "generate all of those process method overrides and overloads right type of",
    "start": "1979960",
    "end": "1985960"
  },
  {
    "text": "course and we do it lots because there's many transitions so this is how we create our",
    "start": "1985960",
    "end": "1992480"
  },
  {
    "text": "an tle because we've got all the transitions bang bang bang bang bang",
    "start": "1992480",
    "end": "1997960"
  },
  {
    "text": "right and it can therefore go oh standard array needs to be this big with",
    "start": "1997960",
    "end": "2004080"
  },
  {
    "text": "that alignment and so on and so forth so now you can see how I wave my hands with the",
    "start": "2004080",
    "end": "2009399"
  },
  {
    "text": "Bas and the stride because it's I can compute it here relatively",
    "start": "2009399",
    "end": "2016559"
  },
  {
    "text": "easily I think I just said all this uh yeah abstract base type Dar hasher we're",
    "start": "2017200",
    "end": "2022679"
  },
  {
    "text": "going to discuss that in the next section A meta function it's not really",
    "start": "2022679",
    "end": "2027760"
  },
  {
    "text": "very clever The Meta function it just basically does the old apply thing and so on and so forth and tral la la um yes",
    "start": "2027760",
    "end": "2033679"
  },
  {
    "text": "I know I'm waving my hands and D Tuple make Ros as well it does the same sort of thing and generates the constrained",
    "start": "2033679",
    "end": "2039519"
  },
  {
    "text": "override type it's just how to call it and get all of that template metastate machine Machinery going um oh yeah you",
    "start": "2039519",
    "end": "2048440"
  },
  {
    "text": "see D2 make R constrainted override type result type just passing the transition Tada it's that",
    "start": "2048440",
    "end": "2055679"
  },
  {
    "text": "easy so okay what was here ah yes yes yes here",
    "start": "2057000",
    "end": "2064599"
  },
  {
    "text": "we have here's our state transition table you want to declare a state transition table don't",
    "start": "2064599",
    "end": "2070200"
  },
  {
    "text": "you so what you want to do is say for example we've got a transition a row I",
    "start": "2070200",
    "end": "2076200"
  },
  {
    "text": "think boost metastate machine another row another row these are transitions right and we've got a server heartbeat",
    "start": "2076200",
    "end": "2082720"
  },
  {
    "text": "and what we do is we just send to the client a client's heartbeat and our result is client",
    "start": "2082720",
    "end": "2089960"
  },
  {
    "text": "heartbeat Tada now we get an execution report back",
    "start": "2089960",
    "end": "2095638"
  },
  {
    "text": "from The Exchange an order was filled an execution report so what do we do we send an execution report",
    "start": "2095639",
    "end": "2103800"
  },
  {
    "text": "response if we fail to match anything we've got the match all and we reject it send a reject message to the client",
    "start": "2103839",
    "end": "2112320"
  },
  {
    "text": "easy right so that's how we get our rows each row each transition to plug",
    "start": "2112320",
    "end": "2119960"
  },
  {
    "text": "into the unordered Tuple and the D Tuple makr and the blah blah blah blah blah",
    "start": "2119960",
    "end": "2125280"
  },
  {
    "text": "blah blah I've omitted the definitions of row and rows for brevity because basically it's",
    "start": "2125280",
    "end": "2132560"
  },
  {
    "text": "just a bit of template relatively simple template framework um if you're familiar with Boost metastate machine you'll be",
    "start": "2132560",
    "end": "2138839"
  },
  {
    "text": "very familiar with that okay the hashing algorithm requirements",
    "start": "2138839",
    "end": "2144960"
  },
  {
    "text": "on the hashing algorithm right okay we've got to move on a bit uh how far am i through I don't",
    "start": "2144960",
    "end": "2150640"
  },
  {
    "text": "know doesn't say where's the page numbers oh TRS anyway right we've got a",
    "start": "2150640",
    "end": "2156200"
  },
  {
    "text": "discret set of States we know a posteriori not a priori we're using",
    "start": "2156200",
    "end": "2161760"
  },
  {
    "text": "prior knowledge the fact that there are specifications out there that you can download that tell you what the states are yes a posteriori we make use of that",
    "start": "2161760",
    "end": "2171200"
  },
  {
    "text": "knowledge we'd like to create a perfect hash preferably",
    "start": "2171200",
    "end": "2176720"
  },
  {
    "text": "minimal why don't I use G Perth remember less than 20 instructions",
    "start": "2176720",
    "end": "2185520"
  },
  {
    "text": "Jeep Perth too big not good enough sorry GF you are a very good hash fun",
    "start": "2185520",
    "end": "2192560"
  },
  {
    "text": "generator but you don't quite do what I want so we create a hash generator for",
    "start": "2192560",
    "end": "2199960"
  },
  {
    "text": "it obviously because we're C++ and we could do these things can't we I've got a few simplifications I can",
    "start": "2199960",
    "end": "2206839"
  },
  {
    "text": "do for example the hashing needn't be stable in the sense of the order of States so if I have a States say imagine my states are",
    "start": "2206839",
    "end": "2214119"
  },
  {
    "text": "15098 the hash can be not 0123 but it could be",
    "start": "2214119",
    "end": "2221560"
  },
  {
    "text": "321 I don't care it's okay it's got to be Jour guaranteed to",
    "start": "2221599",
    "end": "2228000"
  },
  {
    "text": "be Collision free collisions are evil hence Perfection is required preferably",
    "start": "2228000",
    "end": "2235599"
  },
  {
    "text": "minimality so after discussing with Dr Richard",
    "start": "2236079",
    "end": "2241240"
  },
  {
    "text": "Harris we came up with the idea of the exor modulo hash",
    "start": "2241240",
    "end": "2247800"
  },
  {
    "text": "exor modulo modulo of course gives me the minimality or near",
    "start": "2247800",
    "end": "2255440"
  },
  {
    "text": "minimality this adds a bit of Randomness a bit of entropy so then I had to write because",
    "start": "2255440",
    "end": "2262640"
  },
  {
    "text": "this is rather slow to search through uh all uh 2 to 32 ins well unsigned",
    "start": "2262640",
    "end": "2269920"
  },
  {
    "text": "ins thank you um it takes a little while so I had to",
    "start": "2269920",
    "end": "2276079"
  },
  {
    "text": "create a parallel algorithm to do it because it took well in release mode it",
    "start": "2276079",
    "end": "2281160"
  },
  {
    "text": "took many it took about an hour on my lap brick um and that's boring in your",
    "start": "2281160",
    "end": "2286480"
  },
  {
    "text": "build time so I parallelized it and I created a data parallel algorithm for this uh using parallel pixie dust a",
    "start": "2286480",
    "end": "2293560"
  },
  {
    "text": "parallel uh data parallel Library I have and it was quite a laugh yes hang on I'm",
    "start": "2293560",
    "end": "2299720"
  },
  {
    "text": "just trying to create a metastate machine and now I'm look wandering off integrating parallel algorithms what the",
    "start": "2299720",
    "end": "2305599"
  },
  {
    "text": "heck where are am I stack Overflow anybody okay percent operation you see",
    "start": "2305599",
    "end": "2311960"
  },
  {
    "text": "as I said it constrains the output to zero to the denominator yeah don't worry about percent operator strength",
    "start": "2311960",
    "end": "2317400"
  },
  {
    "text": "reductions your friend I checked how minimal the hash shall",
    "start": "2317400",
    "end": "2324119"
  },
  {
    "text": "be and once we've discovered our seed and our denominator we can now",
    "start": "2324119",
    "end": "2330119"
  },
  {
    "text": "instantiate generate a header file which has these in it and of course if the seed is zero yeah that's optimized out",
    "start": "2330119",
    "end": "2337280"
  },
  {
    "text": "the EXO so we can even optimize further woohoo I like",
    "start": "2337280",
    "end": "2342560"
  },
  {
    "text": "optimizations optimizations by you see as I said the problem is is",
    "start": "2342560",
    "end": "2349119"
  },
  {
    "text": "that there ain't no such thing as a perfect minimal hash in general is there you the elephant in the room it does not",
    "start": "2349119",
    "end": "2356400"
  },
  {
    "text": "exist you give me the right States and in general I can't do this",
    "start": "2356400",
    "end": "2363079"
  },
  {
    "text": "you give me a random collection of states in general this will fail",
    "start": "2363079",
    "end": "2368440"
  },
  {
    "text": "uh can't deliver to production sorry boss we can't handle the New Order",
    "start": "2370680",
    "end": "2377800"
  },
  {
    "text": "message CU you added a modify two stat and we can't do it build",
    "start": "2377800",
    "end": "2384480"
  },
  {
    "text": "broken practicality yeah hello but remember this is an experiment a thought",
    "start": "2384480",
    "end": "2389640"
  },
  {
    "text": "it's an experiment we we we're going on an adventure here how far can we",
    "start": "2389640",
    "end": "2395400"
  },
  {
    "text": "get so experimentation denominators must be odd even denominators never work you",
    "start": "2395400",
    "end": "2401680"
  },
  {
    "text": "have to increment it by one uh if you're lucky with an odd set of States then that's cool so in other words minimality",
    "start": "2401680",
    "end": "2408520"
  },
  {
    "text": "is dropped but we still got Perfection which is good Perfection is basically 0",
    "start": "2408520",
    "end": "2413560"
  },
  {
    "text": "1 2 3 4 5 6 7 8 9ine 10 uh incrementing monotonically incrementing set of digits",
    "start": "2413560",
    "end": "2418800"
  },
  {
    "text": "uh natural numbers including zero",
    "start": "2418800",
    "end": "2425000"
  },
  {
    "text": "uh the algorithm that generates searches for the seed in the denominator it",
    "start": "2425359",
    "end": "2430839"
  },
  {
    "text": "checks for no collisions and won't generate the H ofile if it gets collisions because I've got to guarantee",
    "start": "2430839",
    "end": "2437280"
  },
  {
    "text": "that because unordered tupor has no collision avoidance",
    "start": "2437280",
    "end": "2443240"
  },
  {
    "text": "mechanism premature optimization is the root of all evil yes removed to make it",
    "start": "2443240",
    "end": "2451440"
  },
  {
    "text": "faster bad possibly okay why not let the compiler generate it hey you know we've all seen",
    "start": "2451440",
    "end": "2457599"
  },
  {
    "text": "what happens with switch statements yeah if you have F's chains sometimes they converted into switch statements and",
    "start": "2457599",
    "end": "2463440"
  },
  {
    "text": "sometimes those switch statements really funky things happen and you can even get hashes generated for them problem is",
    "start": "2463440",
    "end": "2470720"
  },
  {
    "text": "these states whoever invented the MIT protocols was a",
    "start": "2470720",
    "end": "2476079"
  },
  {
    "text": " and I've said this to them and uh why do they choose such dumbass States",
    "start": "2476079",
    "end": "2481560"
  },
  {
    "text": "why do they just choose natural numbers instead all of this monkeying around throw away but",
    "start": "2481560",
    "end": "2489000"
  },
  {
    "text": "no thank you theoretical physicists H anyway so compilers are",
    "start": "2489000",
    "end": "2494920"
  },
  {
    "text": "unlikely to generate it for us which is why we went to all this ethet in the first place oky doie uh",
    "start": "2494920",
    "end": "2501880"
  },
  {
    "text": "yep a bit of detail about my results wow we're doing well good good",
    "start": "2501880",
    "end": "2508920"
  },
  {
    "text": "good good good um so what is a fix to MIT bit translator to people who don't",
    "start": "2508920",
    "end": "2515560"
  },
  {
    "text": "work in the city of London and don't work in finance who how many people here work in finance how many people have ever heard",
    "start": "2515560",
    "end": "2522680"
  },
  {
    "text": "of fix before good okay as I mentioned fix it's",
    "start": "2522680",
    "end": "2529440"
  },
  {
    "text": "this asy format of string value it's basically New Order is",
    "start": "2529440",
    "end": "2535640"
  },
  {
    "text": "something like what 38 equals tag number 38 equals blah price tag number 97",
    "start": "2535640",
    "end": "2543160"
  },
  {
    "text": "equals 9.86 753 yes doubles are bad of course uh they don't round trip in",
    "start": "2543160",
    "end": "2550760"
  },
  {
    "text": "strings right so what we do is we listen to a client that sends us these fixed format messages we're going to translate",
    "start": "2550760",
    "end": "2557520"
  },
  {
    "text": "them into these MIT bit format bit is boralia there's an Italian exchange",
    "start": "2557520",
    "end": "2563160"
  },
  {
    "text": "called boss Italia it's quite large in Europe and the reason why I didn't choose LSC is BB comes before",
    "start": "2563160",
    "end": "2570480"
  },
  {
    "text": "L I'm lazy alphabetical order list of them that one it was first",
    "start": "2570480",
    "end": "2576760"
  },
  {
    "text": "don't carean they say they're just binary protocols and I send messages via a service side socket to my simulator",
    "start": "2576760",
    "end": "2584880"
  },
  {
    "text": "and what I do is I send a message and receive a message and time it okay uh I",
    "start": "2584880",
    "end": "2590480"
  },
  {
    "text": "use boost AIO people go oh my God boost AIO is so slow I've tried to beat boost AIO Chris",
    "start": "2590480",
    "end": "2597520"
  },
  {
    "text": "coff and Co did a great job deep respect um very fast for what I use it for which",
    "start": "2597520",
    "end": "2604960"
  },
  {
    "text": "is basically collect a message and pass it on collect a message and pass it on no streaming here uh uh uh uh uh uh uh",
    "start": "2604960",
    "end": "2610040"
  },
  {
    "text": "no way remember supercal processor that pipeline is God or the Flying Spaghetti Monster and",
    "start": "2610040",
    "end": "2617480"
  },
  {
    "text": "all hail his nudely",
    "start": "2617480",
    "end": "2620559"
  },
  {
    "text": "appendage um yeah I didn't use solar flare open onload drivers they would have reduced contact switches TR la la",
    "start": "2623200",
    "end": "2629800"
  },
  {
    "text": "I've got some other presentations in the past regarding greater details of how",
    "start": "2629800",
    "end": "2634839"
  },
  {
    "text": "the translator works if you want more details and the ugliness so the test was",
    "start": "2634839",
    "end": "2641160"
  },
  {
    "text": "I'm going to receive a message right yeah oh and then what happens is",
    "start": "2641160",
    "end": "2648240"
  },
  {
    "text": "we send get the message back right from the simulator that's it and then we're going to respond with a fill from the",
    "start": "2648240",
    "end": "2653880"
  },
  {
    "text": "simulator and translate it back to a fixed fill message so there's quite a bit of work going on mainly double to in",
    "start": "2653880",
    "end": "2660720"
  },
  {
    "text": "uh double to string conversions and string to double conversions a few string searches and uh some copies the",
    "start": "2660720",
    "end": "2668400"
  },
  {
    "text": "string searches are heavily optimized the copies are also ridiculously heavily",
    "start": "2668400",
    "end": "2673960"
  },
  {
    "text": "optimized um yes I have my own mem copy implementations and then we send that",
    "start": "2673960",
    "end": "2679559"
  },
  {
    "text": "back to the client lovely the client being of course the little bit of program that goes You ping and Order wait for a response ping and Order wait",
    "start": "2679559",
    "end": "2686000"
  },
  {
    "text": "for response yeah I my computer was crecent well my computer was",
    "start": "2686000",
    "end": "2692359"
  },
  {
    "text": "quiescent I didn't bother to use num control because there's one processor",
    "start": "2692359",
    "end": "2697960"
  },
  {
    "text": "uh but I did pin threads 24 course um g++ 1310 and clang",
    "start": "2698599",
    "end": "2705839"
  },
  {
    "text": "1606 I hate clang 1606 by the way and if you ever wanted to get your",
    "start": "2705839",
    "end": "2712040"
  },
  {
    "text": "code to compile with GCC and clang stab your eyes out yeah everyone oh yeah I'll compile",
    "start": "2712040",
    "end": "2718440"
  },
  {
    "text": "it with both compilers yeah yeah yeah yeah yeah yeah uh last night I had to rip out Rangers cuz clang won't compile",
    "start": "2718440",
    "end": "2725559"
  },
  {
    "text": "G implementation of Rangers just says",
    "start": "2725559",
    "end": "2730280"
  },
  {
    "text": "no byebye Rangers um right yeah I I'm I'm I'm a",
    "start": "2731400",
    "end": "2738680"
  },
  {
    "text": "grade A type one personality Gen 2 Linux Uh custom ABI yes I do use all the command line",
    "start": "2738680",
    "end": "2745920"
  },
  {
    "text": "options in my make.com uh yep I do use regram and all of that so in fact the AI on there is",
    "start": "2745920",
    "end": "2753839"
  },
  {
    "text": "nonstandard to be faster save those clock",
    "start": "2753839",
    "end": "2759160"
  },
  {
    "text": "Cycles um yeah ryzen 9 3,900 DDR full Ram 64 gigs two cards of",
    "start": "2759160",
    "end": "2768200"
  },
  {
    "text": "course always two cards why pipeline fletches we like nvme storage I love",
    "start": "2768200",
    "end": "2775240"
  },
  {
    "text": "mvme storage the the the nvme drives in these as fast as the ddr4 ram you don't",
    "start": "2775240",
    "end": "2781520"
  },
  {
    "text": "notice it's paging apart from when the processor goes into overload mode stop",
    "start": "2781520",
    "end": "2787440"
  },
  {
    "text": "clock when it gets too hot thermal dissipation is a problem it slows down",
    "start": "2787440",
    "end": "2792520"
  },
  {
    "text": "when it gets too hot and that's nothing to do with C States you can turn off the C States it's still going to slow itself",
    "start": "2792520",
    "end": "2799160"
  },
  {
    "text": "down because of electron migration in the processor um right so what I'm going to do is in my",
    "start": "2799160",
    "end": "2807119"
  },
  {
    "text": "test right I had to look at the assembly because I",
    "start": "2807119",
    "end": "2812920"
  },
  {
    "text": "thought how far did I get well I've admitted the assembly because",
    "start": "2812920",
    "end": "2818520"
  },
  {
    "text": "we've only got finite time here the assembly is available",
    "start": "2818520",
    "end": "2824480"
  },
  {
    "text": "online you can try and use OB Jun OBS dump uh godbolt",
    "start": "2824520",
    "end": "2831720"
  },
  {
    "text": "failed it's a bit unfair on poor Matt to cut and paste about you know a 100,000",
    "start": "2831720",
    "end": "2836960"
  },
  {
    "text": "lines of hideous template meta programming into his website and hope it'll you know generate stuff whilst the",
    "start": "2836960",
    "end": "2844079"
  },
  {
    "text": "poor thing takes about 10 minutes to compile on that",
    "start": "2844079",
    "end": "2849359"
  },
  {
    "text": "yeah I I don't wish to cause him that much pain and and then it get nasty emails from him saying please cease and",
    "start": "2849359",
    "end": "2855440"
  },
  {
    "text": "desist you Mr dosser you",
    "start": "2855440",
    "end": "2860160"
  },
  {
    "text": "uh the code generation was poor lots of Lea instructions uh what",
    "start": "2862800",
    "end": "2869240"
  },
  {
    "text": "are Lea instructions it's probably uh these leas were probably a Gest gen",
    "start": "2869240",
    "end": "2874720"
  },
  {
    "text": "creating address generation interlocks address generation interlocks if you",
    "start": "2874720",
    "end": "2879839"
  },
  {
    "text": "happen to know the xx6 architecture are to be feared they are",
    "start": "2879839",
    "end": "2885880"
  },
  {
    "text": "hell why because what you've done is you've just overloaded your pipeline what you've said is that address computer right okay pipelines in",
    "start": "2885880",
    "end": "2893040"
  },
  {
    "text": "supercal processes when I do instruction Fetch and I do an instruction fetch on the call instruction or a jump instruction the uh multiply and the add",
    "start": "2893040",
    "end": "2900880"
  },
  {
    "text": "exist in the uh fetch stage there's actually adders and multipliers put in",
    "start": "2900880",
    "end": "2906200"
  },
  {
    "text": "there it takes lots of transistors they run in one clock cycle",
    "start": "2906200",
    "end": "2911839"
  },
  {
    "text": "holy moly you could do multiply one clock cycle yeah Ripple carry ad yeah",
    "start": "2911839",
    "end": "2917559"
  },
  {
    "text": "takes lots and lots and lots and lots and lots and lots and lots and lots and lots of chain adders and that's what they put in there and that's why you got",
    "start": "2917559",
    "end": "2923839"
  },
  {
    "text": "you know a trillion transistors in these chips right and that's why they run so hot so what you can do is if you're",
    "start": "2923839",
    "end": "2929480"
  },
  {
    "text": "really lucky and those um the multiply and the add you can make them you can",
    "start": "2929480",
    "end": "2934880"
  },
  {
    "text": "put them into either they're already fetched into a register and they're the right registers because register spill",
    "start": "2934880",
    "end": "2940559"
  },
  {
    "text": "is a problem um and also better still immediates and that's",
    "start": "2940559",
    "end": "2946040"
  },
  {
    "text": "why I was paranoid about the immediates because if I can put immediates in there I'm more likely to avoid an address",
    "start": "2946040",
    "end": "2951559"
  },
  {
    "text": "generation interlock because what happens is that you don't use the bit at instruction fetch you have to wait until",
    "start": "2951559",
    "end": "2956640"
  },
  {
    "text": "it gets to issued to the pipeline and then you take up an adder and you have to wait for the result for the adder",
    "start": "2956640",
    "end": "2962559"
  },
  {
    "text": "sorry you do a multiply and then you have to wait for the result for the multiply yes there are bypass buses on uh x86 Intel and AMD implementations of",
    "start": "2962559",
    "end": "2971119"
  },
  {
    "text": "x86 32 and 64 uh which will root it faster to the adder that you need but",
    "start": "2971119",
    "end": "2977000"
  },
  {
    "text": "the problem is is that the result still occurs pretty much at the end of the pipeline takes about 10 clock Cycles",
    "start": "2977000",
    "end": "2982960"
  },
  {
    "text": "just to compute the Target and I've got less than 20 clock",
    "start": "2982960",
    "end": "2991760"
  },
  {
    "text": "cyes ouch Cen generation was",
    "start": "2991760",
    "end": "2997119"
  },
  {
    "text": "poor uh yeah an object OBG dump was terrible really you don't want to look at OB dump in this it takes a about half",
    "start": "2997119",
    "end": "3004040"
  },
  {
    "text": "a day of editing the output to try and work out what the hell's going",
    "start": "3004040",
    "end": "3009000"
  },
  {
    "text": "on okay here's some results okay what is mean average deviation mad some people",
    "start": "3009400",
    "end": "3015400"
  },
  {
    "text": "call me it yes I agree uh five mean average",
    "start": "3015400",
    "end": "3023319"
  },
  {
    "text": "deviation is similar to standard deviation apart from this no one over rooten Factor so it doesn't",
    "start": "3023319",
    "end": "3028480"
  },
  {
    "text": "damp so it takes much longer for it to converge um it's you use it because",
    "start": "3028480",
    "end": "3036119"
  },
  {
    "text": "uh that's not a standard deviation a normal distribution is it right where's the normal",
    "start": "3036119",
    "end": "3044440"
  },
  {
    "text": "distribution well it doesn't even go negative for starters right because you don't get",
    "start": "3044440",
    "end": "3050119"
  },
  {
    "text": "Negative latencies do you H well notless you break the speed of you know tach on",
    "start": "3050119",
    "end": "3055480"
  },
  {
    "text": "and so forth and if You' got negative latencies frankly that means you can stiff the city right because you have",
    "start": "3055480",
    "end": "3061040"
  },
  {
    "text": "prior knowledge marvelous of course inside of trading is illegal so no we can't have negative latency it's more",
    "start": "3061040",
    "end": "3066559"
  },
  {
    "text": "like a Pon distribution but it's not even like a Pon distribution I suppose you can sort of thing but oh yes and right",
    "start": "3066559",
    "end": "3075119"
  },
  {
    "text": "histograms yes there's my residual yeah so you can see these are the outliers",
    "start": "3075119",
    "end": "3080480"
  },
  {
    "text": "collected into this last bucket because I don't lie in my histograms like many people",
    "start": "3080480",
    "end": "3086319"
  },
  {
    "text": "and I'm also very careful to get my bucket size right so I don't get harmonics between the",
    "start": "3086319",
    "end": "3092520"
  },
  {
    "text": "Peaks and the actual sampling to avoid nikist",
    "start": "3092520",
    "end": "3098319"
  },
  {
    "text": "issues uh we can see what's this GCC if else and computed go-to right so",
    "start": "3098319",
    "end": "3106720"
  },
  {
    "text": "computed goto is the kind of uh purpley color and the other ones if",
    "start": "3106720",
    "end": "3112640"
  },
  {
    "text": "else and if we squint at it they look pretty the much the the same I mean look there's the standard deviations that g",
    "start": "3112640",
    "end": "3117960"
  },
  {
    "text": "plot estimated and even thought the the standard deviation for um the the the uh",
    "start": "3117960",
    "end": "3123640"
  },
  {
    "text": "uh uh if else was better but if we look at this and squint a bit because remember the histograms is",
    "start": "3123640",
    "end": "3129680"
  },
  {
    "text": "what it's all about the standard deviation and the mean on mode is it's just all it is is a",
    "start": "3129680",
    "end": "3135920"
  },
  {
    "text": "Shand for the histogram it's all about the histogram",
    "start": "3135920",
    "end": "3141160"
  },
  {
    "text": "here if we look at it in squint it looks like our computed go-to managed to",
    "start": "3143040",
    "end": "3149838"
  },
  {
    "text": "beat approximately 30 years of research in Branch prediction in that ryzen 3,900",
    "start": "3149960",
    "end": "3158880"
  },
  {
    "text": "AMD processor of which AMD were pretty proud of when they produced it yeah their Branch predictor is about 96 to",
    "start": "3158880",
    "end": "3165440"
  },
  {
    "text": "97% accurate they're very very quiet about accuracy rates on Branch predictors because it's absolutely key I",
    "start": "3165440",
    "end": "3172319"
  },
  {
    "text": "mean if my Branch predictor is 0.1% better than yours I can beat you in a data center I've got the market it's",
    "start": "3172319",
    "end": "3178960"
  },
  {
    "text": "absolutely key it's very proprietary uh latencies",
    "start": "3178960",
    "end": "3184400"
  },
  {
    "text": "obviously slower that way binning yes 10 to the",
    "start": "3184400",
    "end": "3190799"
  },
  {
    "text": "14 sorry uh 10 to the 7 that's over 10",
    "start": "3190799",
    "end": "3195839"
  },
  {
    "text": "million orders sent yeah there's a a lot hours on this",
    "start": "3195839",
    "end": "3205280"
  },
  {
    "text": "you don't generate these results quickly but we can see yeah despite the Curious",
    "start": "3205280",
    "end": "3210720"
  },
  {
    "text": "assembly generated and the fact that GCC is a bit regarding its code generation um",
    "start": "3210720",
    "end": "3217240"
  },
  {
    "text": "yeah we kind of got better we're certainly hitting the noise",
    "start": "3217240",
    "end": "3222480"
  },
  {
    "text": "Flor which is what I aimed to do I aimed to get as close as possible if not beat",
    "start": "3222480",
    "end": "3229319"
  },
  {
    "text": "Branch prediction here might have even got faster and it it might be just the",
    "start": "3229319",
    "end": "3235960"
  },
  {
    "text": "optimizer in GCC that's failing me because of the poor poorer code",
    "start": "3235960",
    "end": "3242839"
  },
  {
    "text": "generation okay how about clang me and clang and GCC if you know",
    "start": "3242839",
    "end": "3249680"
  },
  {
    "text": "me from history we've had a bit of a kind of bouncing around because clang um",
    "start": "3249680",
    "end": "3255200"
  },
  {
    "text": "in the past used to generate code that was about 20 to 30% slower than GCC so if you wanted to speed up your code just",
    "start": "3255200",
    "end": "3261920"
  },
  {
    "text": "compile it with GCC and it' be faster way but then back in the day GCC decided",
    "start": "3261920",
    "end": "3267359"
  },
  {
    "text": "you know what we don't like this poor clang so they slowed down their code Generation by about 20 generated Cod by",
    "start": "3267359",
    "end": "3273599"
  },
  {
    "text": "about 20% clang sped up by about 10% so now they're about the same speed yeah",
    "start": "3273599",
    "end": "3278960"
  },
  {
    "text": "20% slower than they were uh don't tell your bosses older compilers are faster",
    "start": "3278960",
    "end": "3285079"
  },
  {
    "text": "I've got other graphs where it shows canonical decrease in performance if you want to go for the fastest performance GCC",
    "start": "3285079",
    "end": "3291240"
  },
  {
    "text": "4.1 yeah yeah it'll run twice the speed generator code will be about twice as",
    "start": "3291240",
    "end": "3296680"
  },
  {
    "text": "fast go to GC 4.1 throw away all that garbage standards committee three-year",
    "start": "3296680",
    "end": "3304160"
  },
  {
    "text": "Cadence maybe the poor programmers who write the compilers don't have time to implement it properly and optimize it",
    "start": "3304160",
    "end": "3310000"
  },
  {
    "text": "all and smooth it and make it all pretty and put a bow on it because we keep on shoving new stuff at",
    "start": "3310000",
    "end": "3316160"
  },
  {
    "text": "them just saying so glang how did you do you see",
    "start": "3316160",
    "end": "3325359"
  },
  {
    "text": "my convergences are pretty good actually you know 5% 4% this is actually statistically significant this stuff",
    "start": "3325359",
    "end": "3332640"
  },
  {
    "text": "again massive numbers of orders we look at the outliers",
    "start": "3332640",
    "end": "3339520"
  },
  {
    "text": "fewer but higher yeah order of magnitude higher in the outliers clang seems to",
    "start": "3340200",
    "end": "3349640"
  },
  {
    "text": "beat it's if else code generation seems to be better than the computed goto so again",
    "start": "3352039",
    "end": "3360400"
  },
  {
    "text": "depends on your compiler don't trust your performance figures unless you really know what",
    "start": "3360400",
    "end": "3368680"
  },
  {
    "text": "you're doing you've got to have a lot of test cases for this because remember what you're doing is removing instructions to go faster removing",
    "start": "3368680",
    "end": "3376240"
  },
  {
    "text": "instructions means you're not doing stuff now that stuff may be irrelevant maybe it was really really",
    "start": "3376240",
    "end": "3384440"
  },
  {
    "text": "important and you just broke a test case maybe you just broke the test case that said the Cancel message will",
    "start": "3384440",
    "end": "3391680"
  },
  {
    "text": "work why is a Cancel message important fat finger whoopsie I just",
    "start": "3391799",
    "end": "3397559"
  },
  {
    "text": "said I'm going to buy a 100 million shares of IBM for a million each hello night",
    "start": "3397559",
    "end": "3403599"
  },
  {
    "text": "Capital yeah you really want to be able to set that a Cancel message very fast",
    "start": "3403599",
    "end": "3410039"
  },
  {
    "text": "please so performance is critical and knowing your test cases is vital number",
    "start": "3410039",
    "end": "3415440"
  },
  {
    "text": "of samples is vital this reson these resonances here that we see at about one",
    "start": "3415440",
    "end": "3421200"
  },
  {
    "text": "microc uh intervals that's roughly going to be about what thousand clock Cycles thousand instructions right",
    "start": "3421200",
    "end": "3430039"
  },
  {
    "text": "odd uh a friend of mine Vlad suggested it might actually be to do with um I use",
    "start": "3430039",
    "end": "3435720"
  },
  {
    "text": "uh s instructions for my mem copies and searches in strings and what happens in",
    "start": "3435720",
    "end": "3441280"
  },
  {
    "text": "modern processes is commonly the uh Vector unit is actually underclocked",
    "start": "3441280",
    "end": "3446359"
  },
  {
    "text": "powered down because it consumes so many resources and heat dissipation so it's",
    "start": "3446359",
    "end": "3451559"
  },
  {
    "text": "not always powered on so when you start to do a MMX instruction S S 4 whatever",
    "start": "3451559",
    "end": "3456599"
  },
  {
    "text": "blah blah blah right what it does is it has to go hang on Power It Up wind up there a bandom off we go and so you get",
    "start": "3456599",
    "end": "3466720"
  },
  {
    "text": "pauses it's possible the reason I use them is because I want to get off the",
    "start": "3466720",
    "end": "3472480"
  },
  {
    "text": "integer pipelines in the precious core and use those for the things that are really important to spread the heat out",
    "start": "3472480",
    "end": "3479440"
  },
  {
    "text": "so I don't get thermal dissipation Maxima effects in certain areas of the",
    "start": "3479440",
    "end": "3484520"
  },
  {
    "text": "pipeline that cause it to underclock micro optimization by heat",
    "start": "3484520",
    "end": "3489599"
  },
  {
    "text": "dissipation you heard it here first",
    "start": "3489599",
    "end": "3495400"
  },
  {
    "text": "so very small improvements we've hit the noise floor that's what I wanted to do remember my experiment was to go as fast",
    "start": "3495400",
    "end": "3502520"
  },
  {
    "text": "as possible and try and beat if house and I've got some evidence to demonstrate that is certainly",
    "start": "3502520",
    "end": "3510079"
  },
  {
    "text": "possible because I use the same input States my Branch predictor was",
    "start": "3510520",
    "end": "3516079"
  },
  {
    "text": "hot burning hot so it wasn't taking 20 clock Cycles it was just going bang so I",
    "start": "3516079",
    "end": "3522119"
  },
  {
    "text": "was going for literally the most conservative hardest to beat",
    "start": "3522119",
    "end": "3527680"
  },
  {
    "text": "case and I nearly beat it little old",
    "start": "3527680",
    "end": "3533240"
  },
  {
    "text": "me hi in hi AMD hi just saying",
    "start": "3533319",
    "end": "3540280"
  },
  {
    "text": "um yeah yeah object dump had issues the",
    "start": "3540280",
    "end": "3545520"
  },
  {
    "text": "compil she was compiling the code uh on on Monday night it wouldn't",
    "start": "3545520",
    "end": "3553039"
  },
  {
    "text": "compile despite the fact the day before it did uh a good stiff cleaning with seake",
    "start": "3555000",
    "end": "3562520"
  },
  {
    "text": "and so forth sorted that out",
    "start": "3562520",
    "end": "3568760"
  },
  {
    "text": "uh constrained override type abstrct base type yeah uned tupor H generating a",
    "start": "3568880",
    "end": "3578440"
  },
  {
    "text": "hash that may not even ever exist",
    "start": "3578440",
    "end": "3583839"
  },
  {
    "text": "really template meta programming main tellability is lost isn't",
    "start": "3583839",
    "end": "3589480"
  },
  {
    "text": "it no not very well magically mystically Godlike",
    "start": "3590799",
    "end": "3596720"
  },
  {
    "text": "well you cannot trust the compiler sometimes it compiles sometimes",
    "start": "3596720",
    "end": "3603960"
  },
  {
    "text": "it doesn't uh the compile time by adding all this garbage sorry lovely interesting code was not significantly",
    "start": "3603960",
    "end": "3610960"
  },
  {
    "text": "increased bizarrely because of course the compile times are so much longer because of all the other stuff I did um",
    "start": "3610960",
    "end": "3616599"
  },
  {
    "text": "less powerful computers I have one poor computer and it takes about half a day to compile the",
    "start": "3616599",
    "end": "3623559"
  },
  {
    "text": "code not exactly practical uh yet 10 gigs of RAM per translation unit so yeah oh I",
    "start": "3623559",
    "end": "3630640"
  },
  {
    "text": "know I'll use minus J yeah and Page bye uh I'll connect to the computer",
    "start": "3630640",
    "end": "3638000"
  },
  {
    "text": "next week yeah limits the paralyzation of the",
    "start": "3638000",
    "end": "3643039"
  },
  {
    "text": "build if you got six gigs of 60 gigs of RAM that's minus j6 uh no space for the OS no space for anything",
    "start": "3643039",
    "end": "3648839"
  },
  {
    "text": "else back away from the keyboard um yeah see make build",
    "start": "3648839",
    "end": "3656880"
  },
  {
    "text": "scripts yes let's compile let's compile some code to generate a head a file that's dep this library is dependent",
    "start": "3658400",
    "end": "3667039"
  },
  {
    "text": "on um you see you've got to generate the",
    "start": "3669160",
    "end": "3675039"
  },
  {
    "text": "hash function first because that's a he ofile isn't it which means I can't go compiling any part of the library until",
    "start": "3675039",
    "end": "3681680"
  },
  {
    "text": "I've got the hash function generated all stop please for the hash",
    "start": "3681680",
    "end": "3687240"
  },
  {
    "text": "function all because they couldn't be bothered to use 0 1 2 3 four five in the",
    "start": "3687240",
    "end": "3695079"
  },
  {
    "text": "specs for MIT all those Geniuses yeah really Geniuses hello um",
    "start": "3695079",
    "end": "3705079"
  },
  {
    "text": "sorry I now work for a different company so I can get away with this and I've always done it anyway um yeah really",
    "start": "3705079",
    "end": "3712319"
  },
  {
    "text": "should you rely on luck to compile your code",
    "start": "3712319",
    "end": "3716440"
  },
  {
    "text": "really uh standard hash S murma 2 far too slow I I do have other slides on",
    "start": "3717400",
    "end": "3725559"
  },
  {
    "text": "performance of hash functions obviously I even have slides on performance of how to measure",
    "start": "3725559",
    "end": "3731119"
  },
  {
    "text": "time yeah and which is the better what better instructions to use did you notice it said in order for the timing",
    "start": "3731119",
    "end": "3739319"
  },
  {
    "text": "yeah that's rdts CPU ID rdtsc at the start which can serialize the processor",
    "start": "3739319",
    "end": "3746400"
  },
  {
    "text": "and then at the end of it Rd tscp that's the canonical way to do it okay got that",
    "start": "3746400",
    "end": "3752680"
  },
  {
    "text": "people good right you don't use rdtsc unless you prefix it with CPU ID",
    "start": "3752680",
    "end": "3759200"
  },
  {
    "text": "to serialize your processor I've also got performance tests of the relative performance of measuring just using AUD TSC versus",
    "start": "3759200",
    "end": "3766839"
  },
  {
    "text": "doing it the correct way out of order versus in order and um there is actually",
    "start": "3766839",
    "end": "3772319"
  },
  {
    "text": "a difference in the performance measurement but there's no statistically significant difference in cost to",
    "start": "3772319",
    "end": "3780440"
  },
  {
    "text": "Performance given these slides and the fact that I think I've now demonstrated I am a insane mad micro",
    "start": "3780760",
    "end": "3788760"
  },
  {
    "text": "Optimizer what was it Madness template met Madness yes perhaps uh I've",
    "start": "3788760",
    "end": "3796319"
  },
  {
    "text": "demonstrated via hand waving and like there are slides elsewhere have a look and uh which will demonstrate this also",
    "start": "3796319",
    "end": "3802480"
  },
  {
    "text": "currently I've got less than or equal to seven states so I managed in every case",
    "start": "3802480",
    "end": "3807839"
  },
  {
    "text": "to generate the um the hash",
    "start": "3807839",
    "end": "3813798"
  },
  {
    "text": "function uh yeah sort of uh one of the cases it",
    "start": "3814200",
    "end": "3823200"
  },
  {
    "text": "failed yeah it was that was only with four just the numbers were wrong so I added an extra State and then",
    "start": "3823200",
    "end": "3830680"
  },
  {
    "text": "it worked",
    "start": "3830680",
    "end": "3836279"
  },
  {
    "text": "um exorbitant eff to achieve little result yeah well okay you could argue that but that wasn't the",
    "start": "3836720",
    "end": "3843559"
  },
  {
    "text": "experiment that's an outcome and an observation of it the experiment was remember no effort shall be spared to",
    "start": "3843559",
    "end": "3851880"
  },
  {
    "text": "try and achieve the fastest Metate machine that is possible with C++ without descending into assembler",
    "start": "3851880",
    "end": "3859599"
  },
  {
    "text": "uh there were talks about that with people and I I thought along hard along those lines and I thought no I'm going",
    "start": "3859599",
    "end": "3865520"
  },
  {
    "text": "to constrain myself to C++ here why maybe I like angle brackets too",
    "start": "3865520",
    "end": "3873960"
  },
  {
    "text": "much because the mountain was there to be",
    "start": "3873960",
    "end": "3878960"
  },
  {
    "text": "climbed I think it's not unreasonable to say that heroic effort was required and perhaps I'm",
    "start": "3879559",
    "end": "3886839"
  },
  {
    "text": "getting to uh you know perhaps 10 mjes are there in pretentiousness but hey",
    "start": "3886839",
    "end": "3892599"
  },
  {
    "text": "look I'm wearing a t-shirt like this come on um a heroic effort but we did manage to",
    "start": "3892599",
    "end": "3900119"
  },
  {
    "text": "recover the type information with minimal intrusiveness uh would I say immediately run off and go and use",
    "start": "3900119",
    "end": "3906279"
  },
  {
    "text": "constrained override type uh consider your use case very carefully",
    "start": "3906279",
    "end": "3912400"
  },
  {
    "text": "and your career very carefully and your compile times and",
    "start": "3912400",
    "end": "3917880"
  },
  {
    "text": "life having to attempt to implement a data par yet and prove that the power algorithm will terminate is correct tral",
    "start": "3919559",
    "end": "3926559"
  },
  {
    "text": "la la you know we'll load balance correctly and so forth yep early out",
    "start": "3926559",
    "end": "3932799"
  },
  {
    "text": "reasonably and so on Not Crash uh yeah uh I managed to find a a bug that",
    "start": "3932799",
    "end": "3938760"
  },
  {
    "text": "existed for 10 years in my Atomic shared pointer why do I have an atomic shared pointer because I've got a singly link",
    "start": "3938760",
    "end": "3946400"
  },
  {
    "text": "list that's Atomic and how do I get around the ABA problem reference count I don't have a retire list I reference",
    "start": "3946400",
    "end": "3952319"
  },
  {
    "text": "count instead so therefore where I need an atomic shared pointer and then when I say it's Atomic if two threads take a",
    "start": "3952319",
    "end": "3959319"
  },
  {
    "text": "reference to the shame shared pointer this is absolutely fine they can both reset or assign randomly as they desire",
    "start": "3959319",
    "end": "3967039"
  },
  {
    "text": "and it will work don't do it don't write that shared",
    "start": "3967039",
    "end": "3973079"
  },
  {
    "text": "pointer it's slower than a normal shared pointer trust me I've got the performance test for it to demonstrate it um other talks",
    "start": "3973079",
    "end": "3982240"
  },
  {
    "text": "uh but we have got a blisteringly fast template meta",
    "start": "3982240",
    "end": "3988799"
  },
  {
    "text": "programs metastate machine implemented as a library for your",
    "start": "3988799",
    "end": "3995400"
  },
  {
    "text": "delectation choice of micro optimizations investigating is vital premature optimization is the root of",
    "start": "3997799",
    "end": "4004319"
  },
  {
    "text": "all evil this is premature optimization make no bones about it hopefully the",
    "start": "4004319",
    "end": "4011520"
  },
  {
    "text": "techniques here will serve as a warning to",
    "start": "4011520",
    "end": "4016319"
  },
  {
    "text": "others maybe you should think about going this far Maybe not maybe you",
    "start": "4017079",
    "end": "4022359"
  },
  {
    "text": "should just you",
    "start": "4022359",
    "end": "4025640"
  },
  {
    "text": "know See's good enough perhaps",
    "start": "4027599",
    "end": "4033359"
  },
  {
    "text": "rust I did it so you would not have to yeah you know somebody says to you hey",
    "start": "4036119",
    "end": "4043279"
  },
  {
    "text": "met State machine let's go for it man you can go look at this we don't have to",
    "start": "4043279",
    "end": "4048319"
  },
  {
    "text": "he's done it and swe it for us uh and finally I know I've overrun a",
    "start": "4048319",
    "end": "4054599"
  },
  {
    "text": "smidge I apologize my sincere thanks to John Chesterfield who listened to me talk",
    "start": "4054599",
    "end": "4059680"
  },
  {
    "text": "about this is 2017 uh he was uh saying why not just use",
    "start": "4059680",
    "end": "4065160"
  },
  {
    "text": "assembler I think yes um most Chief Paul Evans and Vlad for uh reviewing the uh",
    "start": "4065160",
    "end": "4072520"
  },
  {
    "text": "these slides who I'm most sincerely grateful for too uh for any more information methodology Etc there's my",
    "start": "4072520",
    "end": "4080680"
  },
  {
    "text": "email the slides will be given to the uh NDC Tech town so you can get them and I",
    "start": "4080680",
    "end": "4086799"
  },
  {
    "text": "have a number of references as you can see uh so we'll leave it there uh I know",
    "start": "4086799",
    "end": "4093000"
  },
  {
    "text": "I've overrun slightly I do apologize about about 9 Minutes hopefully we have time for a few",
    "start": "4093000",
    "end": "4099960"
  },
  {
    "text": "questions otherwise tea and coffee awaits",
    "start": "4099960",
    "end": "4105838"
  }
]