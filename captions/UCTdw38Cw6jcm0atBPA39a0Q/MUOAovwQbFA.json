[
  {
    "text": "hey it looks like I'm live all right uh hopefully this is the talk you intended to be in how to use const expert in C+",
    "start": "6960",
    "end": "14839"
  },
  {
    "text": "plus 23 you know this this is I left this slide",
    "start": "14839",
    "end": "21039"
  },
  {
    "text": "intentionally poorly done um I of course I wrote C++ 23 but it's this is just my",
    "start": "21039",
    "end": "28840"
  },
  {
    "text": "chance to rant that if you do anything with like line breaks and type setting",
    "start": "28840",
    "end": "35399"
  },
  {
    "text": "and layouts and stuff C++ is a thing right it's not wa there shouldn't be a",
    "start": "35399",
    "end": "42680"
  },
  {
    "text": "break between those two pluses that's all right my random rant okay um so my",
    "start": "42680",
    "end": "49680"
  },
  {
    "text": "name is Jason Turner I am whoa I accidentally clicked on the wrong thing",
    "start": "49680",
    "end": "55320"
  },
  {
    "text": "there oh yes I well yes that well that is the",
    "start": "55320",
    "end": "61160"
  },
  {
    "text": "point that's the QR code but it's a new feature of my slides QR code you can take a picture it'll take you to the thing apparently if I click on it",
    "start": "61160",
    "end": "67960"
  },
  {
    "text": "anywhere near it it'll also take me to the thing so um C++ weekly I've been",
    "start": "67960",
    "end": "73360"
  },
  {
    "text": "doing this since 2016 um and that's a link if you haven't heard of the YouTube channel and I have",
    "start": "73360",
    "end": "78759"
  },
  {
    "text": "stickers for anyone who might want stickers so don't let me go home with those I also do have written a few books",
    "start": "78759",
    "end": "86840"
  },
  {
    "text": "and I do training and I am a developer so if you like the way I do things you",
    "start": "86840",
    "end": "94560"
  },
  {
    "text": "know consider having me on site for training at your company and there's a few people here who have had me on site for training at their company so I",
    "start": "94560",
    "end": "101720"
  },
  {
    "text": "appreciate that I I like to say avoid sitting in the back or S towards the front but with this room that's",
    "start": "101720",
    "end": "107159"
  },
  {
    "text": "irrelevant but I do want you to interrupt me and ask questions and I'll be asking you",
    "start": "107159",
    "end": "112880"
  },
  {
    "text": "questions so hopefully we'll be able to interact with each other okay uh who to hand us talk",
    "start": "112880",
    "end": "122520"
  },
  {
    "text": "yesterday I'm glad you were there okay Hannah talked a lot about",
    "start": "123479",
    "end": "129920"
  },
  {
    "text": "coner and how what is possible in coner with what versions in general it is",
    "start": "129920",
    "end": "135959"
  },
  {
    "text": "easier today to say what is not allowed with coner than to say what is allowed",
    "start": "135959",
    "end": "143480"
  },
  {
    "text": "is that fair okay um and the things that we're going",
    "start": "143480",
    "end": "149120"
  },
  {
    "text": "to talk about the rules about what are and are not allowed in Conex for come",
    "start": "149120",
    "end": "154800"
  },
  {
    "text": "down to when things are actually being constant evaluated so I don't just mean what's",
    "start": "154800",
    "end": "160959"
  },
  {
    "text": "not allowed in a Conex per function necessarily so the first uh rule that I",
    "start": "160959",
    "end": "167319"
  },
  {
    "text": "wanted to highlight which I thought this was interesting because I was just rereading the rules is that you cannot deallocate memory that was not allocated",
    "start": "167319",
    "end": "174360"
  },
  {
    "text": "during constant evaluation the more I think about that I wonder how in the world you were supposed to ever get get a pointer to",
    "start": "174360",
    "end": "180599"
  },
  {
    "text": "memory that was not allocated during constant evaluation during constant evaluation but that's one of the things that was listed we cannot use",
    "start": "180599",
    "end": "187519"
  },
  {
    "text": "reinterpret cast you cannot use or be a co- routine",
    "start": "187519",
    "end": "193640"
  },
  {
    "text": "yet yet um you cannot execute an assembly block so to be clear you can",
    "start": "193640",
    "end": "200480"
  },
  {
    "text": "have one in your constant uh constant eval or Conex per function you're just not allowed to actually use it you",
    "start": "200480",
    "end": "209000"
  },
  {
    "text": "cannot execute a ghost to statement it can be in your function you're just not",
    "start": "209000",
    "end": "214920"
  },
  {
    "text": "allowed to actually execute it during constant evaluation I find that rule particularly interesting uh because",
    "start": "214920",
    "end": "220799"
  },
  {
    "text": "we're allowed to have switch statements with cases and labels and such and those",
    "start": "220799",
    "end": "226080"
  },
  {
    "text": "are allowed to be executed during constant evaluation why are goto statements not",
    "start": "226080",
    "end": "231959"
  },
  {
    "text": "allowed no it's you you can't jump out of scope can you I don't think you can",
    "start": "232400",
    "end": "239680"
  },
  {
    "text": "function scope you can't jump out of function scope right and if you do jump out of scope then destructors still have",
    "start": "240120",
    "end": "246000"
  },
  {
    "text": "to be called correctly I did an episode on this someone should watch it and remind me what it",
    "start": "246000",
    "end": "253680"
  },
  {
    "text": "said um you cannot have virtual inheritance you cannot throw yet yet",
    "start": "254280",
    "end": "262360"
  },
  {
    "text": "says Hannah um you cannot invoke a non-c Conex per function during constant",
    "start": "262360",
    "end": "269160"
  },
  {
    "text": "evaluation you cannot invoke undefined",
    "start": "269160",
    "end": "275280"
  },
  {
    "text": "Behavior asteris I guess because that's kind of up to implementation quality a",
    "start": "275280",
    "end": "280560"
  },
  {
    "text": "little bit too you cannot invoke a VA start",
    "start": "280560",
    "end": "285720"
  },
  {
    "text": "macro I that was interesting I thought conext for functions just couldn't be C vartic functions but apparently maybe",
    "start": "285720",
    "end": "292919"
  },
  {
    "text": "they can be or just not allowed to actually use any of the arguments to it I don't know",
    "start": "292919",
    "end": "300280"
  },
  {
    "text": "plus any memory allocated at compile time during constant evaluation must be freed At Con at compile time during",
    "start": "301840",
    "end": "308440"
  },
  {
    "text": "constant evaluation for now for [Laughter]",
    "start": "308440",
    "end": "313800"
  },
  {
    "text": "now uh okay so I have a Conex per function",
    "start": "313800",
    "end": "319479"
  },
  {
    "text": "that unconditionally throws 42 on line8 am I executing this code at",
    "start": "319479",
    "end": "328360"
  },
  {
    "text": "constant evaluation at compile time I am not this code is fine this",
    "start": "328360",
    "end": "334000"
  },
  {
    "text": "code compiles it's not a very smart use of con xer but it does compile",
    "start": "334000",
    "end": "341039"
  },
  {
    "text": "today this however does not compile because I am in fact foring evaluation",
    "start": "341039",
    "end": "346720"
  },
  {
    "text": "of this function at compile time by assigning the result to a conext per",
    "start": "346720",
    "end": "351918"
  },
  {
    "text": "variable so some of these things only matter like I said during constant evaluation",
    "start": "352840",
    "end": "360080"
  },
  {
    "text": "so this is a a pro tip make sure you test your Conex for functions both in",
    "start": "361639",
    "end": "367880"
  },
  {
    "text": "Conex per context and in non-c Conex per context actually just had a conversation",
    "start": "367880",
    "end": "373440"
  },
  {
    "text": "with someone yesterday afternoon about that who was it are you here not here well anyhow so uh I don't",
    "start": "373440",
    "end": "381919"
  },
  {
    "text": "have any slides on this or anything um but if you do have a bunch of conexs per code you should I say ideally compile",
    "start": "381919",
    "end": "390599"
  },
  {
    "text": "twice you want to compile once with uh all of those tests being executed at",
    "start": "390599",
    "end": "395680"
  },
  {
    "text": "compile time some sort of macro that like makes the variables Conex per and some that make the variables not Conex",
    "start": "395680",
    "end": "402800"
  },
  {
    "text": "per so for two reasons one is to make sure your code does the same thing whether it's being executed at compile",
    "start": "402800",
    "end": "409280"
  },
  {
    "text": "time or not at compil time and for the other reason to be if your code fails to",
    "start": "409280",
    "end": "415479"
  },
  {
    "text": "compile um because you did something you weren't supposed to do during con evaluation that is extraordinarily hard",
    "start": "415479",
    "end": "421960"
  },
  {
    "text": "to debug yes which test are you using which I use catch 2 and I use the static",
    "start": "421960",
    "end": "428479"
  },
  {
    "text": "require macro and then I compile once normal and the second time I compile I",
    "start": "428479",
    "end": "434360"
  },
  {
    "text": "pass the Dash D runtime static require I",
    "start": "434360",
    "end": "439560"
  },
  {
    "text": "think that's what it's called where's Martin St Oh that's oh okay yeah uh but",
    "start": "439560",
    "end": "448120"
  },
  {
    "text": "whatever it is runtime static requ yeah to to put it force it back into uh into runtime mode and then I compile my full",
    "start": "448120",
    "end": "455000"
  },
  {
    "text": "test Suite twice and then run them both on CI and the ones that were compiled with normal static require running them",
    "start": "455000",
    "end": "462120"
  },
  {
    "text": "at runtime running the test that were compiled time checked at runtime just",
    "start": "462120",
    "end": "467680"
  },
  {
    "text": "gives you a bunch of print statements basically it doesn't actually do any work right and then when you run the",
    "start": "467680",
    "end": "473680"
  },
  {
    "text": "regular runtime ones at runtime then you can actually step into the debug or whatever if you need to",
    "start": "473680",
    "end": "480560"
  },
  {
    "text": "all right a little bit of context for how I got here",
    "start": "480599",
    "end": "486080"
  },
  {
    "text": "today C+ 11 simple conext for usage not very",
    "start": "486080",
    "end": "492479"
  },
  {
    "text": "useful C++ 14 we actually got control flow variables and some usable Conex",
    "start": "493479",
    "end": "499879"
  },
  {
    "text": "where I would say it starts to become usable 2016 I gave a talk called",
    "start": "499879",
    "end": "505360"
  },
  {
    "text": "practical performance practices at C++ now um",
    "start": "505360",
    "end": "510919"
  },
  {
    "text": "and that talk it's actually kind of funny because I'm like yeah I don't trust coner made my code worse somehow I",
    "start": "510919",
    "end": "518120"
  },
  {
    "text": "didn't trust the compiler on this stuff then 2016 I gave a talk Rich code for",
    "start": "518120",
    "end": "523399"
  },
  {
    "text": "tiny computers which everyone thinks was about con exper but I don't actually use",
    "start": "523399",
    "end": "528600"
  },
  {
    "text": "Con exper in that talk at all I use const just plain old",
    "start": "528600",
    "end": "534800"
  },
  {
    "text": "const 2017 Conex for lambas much better array",
    "start": "534800",
    "end": "541880"
  },
  {
    "text": "support like trivia time uh when did standard array actually get full Conex",
    "start": "542640",
    "end": "550399"
  },
  {
    "text": "per support 20 20 and what was the last",
    "start": "550399",
    "end": "555600"
  },
  {
    "text": "thing lagging do you recall no what no not begin know begin",
    "start": "555600",
    "end": "563959"
  },
  {
    "text": "end we got fully and 17 read and WR versions",
    "start": "563959",
    "end": "570079"
  },
  {
    "text": "no no not that it was Phil and my understanding is because Phil REI it was",
    "start": "570160",
    "end": "576040"
  },
  {
    "text": "defined in terms of standard fill the algorithm and standard fill the algorithm didn't become Conex until C++",
    "start": "576040",
    "end": "582000"
  },
  {
    "text": "20 well random things 2017 coner all the things talk that I gave with Ben Dean",
    "start": "582000",
    "end": "587959"
  },
  {
    "text": "that was definitely about coner in 2017 practical coner again that was at meeting",
    "start": "587959",
    "end": "595120"
  },
  {
    "text": "C++ and 2018 I gave this talk applied best practices I tried to write a new",
    "start": "595120",
    "end": "600800"
  },
  {
    "text": "Green Field project from scratch applying all the things that I say are best practices and I accidentally made a",
    "start": "600800",
    "end": "607360"
  },
  {
    "text": "fully Conex for capable arm emulator you can execute a bunch of arm instructions at compile time if you",
    "start": "607360",
    "end": "613560"
  },
  {
    "text": "choose to and C++ 20 most of the algorithms",
    "start": "613560",
    "end": "619360"
  },
  {
    "text": "better standard Library Vector string new Cony Val was added conel is going to come up in a minute in this",
    "start": "619360",
    "end": "627480"
  },
  {
    "text": "talk and 202 21 your new mental model for con exper another one of my talks",
    "start": "627680",
    "end": "633200"
  },
  {
    "text": "and then the power of compile time resources in 2022 and 20 C++ 23 we get Conex per",
    "start": "633200",
    "end": "639519"
  },
  {
    "text": "cmath except for the trigonometric functions and even more relaxation of",
    "start": "639519",
    "end": "644800"
  },
  {
    "text": "the rules in 26 have we gotten fully accepted the uh trigonometric functions",
    "start": "644800",
    "end": "651480"
  },
  {
    "text": "for coner I think so um in 23 I was again playing around",
    "start": "651480",
    "end": "657959"
  },
  {
    "text": "with this stuff and I made a scripting an embedded scripting engine called cons xer which is a fully uh compiled time",
    "start": "657959",
    "end": "665600"
  },
  {
    "text": "capable scripting engine that's not allocating non-throwing you can configure it size at compile time for",
    "start": "665600",
    "end": "671959"
  },
  {
    "text": "like its actual memory size and whatever you can execute script at runtime or compile",
    "start": "671959",
    "end": "678720"
  },
  {
    "text": "time and then a talk I just gave At cbpc Con and it uh not CBP conon CBP con's in",
    "start": "678720",
    "end": "685560"
  },
  {
    "text": "next week sorry I've been traveling too much I gave it C++ on C called",
    "start": "685560",
    "end": "691600"
  },
  {
    "text": "understanding the Conex for twostep that talk is Live on YouTube I do recommend it I think it came out pretty well so if",
    "start": "691600",
    "end": "697720"
  },
  {
    "text": "you want to watch that one and then here we are okay how to use Con exper in C++ 23 all right C++ 26 Conex repl placement",
    "start": "697720",
    "end": "707079"
  },
  {
    "text": "new has been accepted I think we have the rest of the trigonometric functions",
    "start": "707079",
    "end": "712480"
  },
  {
    "text": "from cmath and C++ 26 as well and if you were in Hannah's talk she has plans",
    "start": "712480",
    "end": "721240"
  },
  {
    "text": "okay so why coner uh work done at compile time",
    "start": "721639",
    "end": "726920"
  },
  {
    "text": "doesn't happen at runtime is that a compelling enough",
    "start": "726920",
    "end": "732760"
  },
  {
    "text": "reason by itself if you can do work at compile time would you rather do work at compile",
    "start": "732760",
    "end": "739440"
  },
  {
    "text": "time who says no I prefer doing as much possible with work is at runtime no one",
    "start": "739440",
    "end": "745959"
  },
  {
    "text": "oh [Laughter] okay so compile time work is is paid",
    "start": "745959",
    "end": "752320"
  },
  {
    "text": "once at compile time not at runtime I do have people who push back and say you",
    "start": "752320",
    "end": "757800"
  },
  {
    "text": "know oh but that conext for stuff is going to slow down my builds too much it tends to be people who haven't actually",
    "start": "757800",
    "end": "764199"
  },
  {
    "text": "tried to use Conex for that much who have this complaint uh and then there's those of us who actually have done",
    "start": "764199",
    "end": "770839"
  },
  {
    "text": "projects where you have to do like uh pass command line parameters to your compiler to increase the number of Conex",
    "start": "770839",
    "end": "776839"
  },
  {
    "text": "per steps it's allowed to execute but a different problem is your code executed more times",
    "start": "776839",
    "end": "784480"
  },
  {
    "text": "than it is compiled you really hope",
    "start": "784480",
    "end": "790160"
  },
  {
    "text": "right if your code's executed exactly once then none of this Matters by definition Conex spur code",
    "start": "790160",
    "end": "798760"
  },
  {
    "text": "that is executed at compile time cannot have security vulnerabilities this the code simply doesn't",
    "start": "798760",
    "end": "804800"
  },
  {
    "text": "persist all right Hannah go ahead and make your argument no all fine you're",
    "start": "804800",
    "end": "812160"
  },
  {
    "text": "the who wants to make an argument that code that is executed at compiled time can have security",
    "start": "812160",
    "end": "819360"
  },
  {
    "text": "vulnerabilities you want to later that's is important Martin yeah",
    "start": "819360",
    "end": "825279"
  },
  {
    "text": "go",
    "start": "825279",
    "end": "827360"
  },
  {
    "text": "ahead okay okay so if the compile time code",
    "start": "832639",
    "end": "838440"
  },
  {
    "text": "generates something that would be like a bad hash then you're going to have that",
    "start": "838440",
    "end": "843720"
  },
  {
    "text": "bad hash into your runtime code that's a fair",
    "start": "843720",
    "end": "848720"
  },
  {
    "text": "statement um concept exper or code executed compil time uh quote cannot",
    "start": "848759",
    "end": "854800"
  },
  {
    "text": "have undefined Behavior as I already said that's implementation quality not that's it's",
    "start": "854800",
    "end": "861199"
  },
  {
    "text": "not 100% enforced by all compilers but it's pretty",
    "start": "861199",
    "end": "866680"
  },
  {
    "text": "good okay let's build a unique pointer",
    "start": "866880",
    "end": "872240"
  },
  {
    "text": "do you see my unique pointer implementation and the set of tests that I",
    "start": "872240",
    "end": "877759"
  },
  {
    "text": "have go ahead and stare at this for a moment see if you find any bugs in",
    "start": "877800",
    "end": "885759"
  },
  {
    "text": "it see if you think it has a full test",
    "start": "885759",
    "end": "891480"
  },
  {
    "text": "Suite okay so Bryce says we're we're leaking memory yes I'm expecting you to",
    "start": "895880",
    "end": "901160"
  },
  {
    "text": "find bugs anything",
    "start": "901160",
    "end": "908440"
  },
  {
    "text": "else operations don't do what you you expect the move operations don't do what",
    "start": "908440",
    "end": "913519"
  },
  {
    "text": "I expect okay I mean uh but I mean I'm following all my best",
    "start": "913519",
    "end": "920199"
  },
  {
    "text": "practices right I didn't Implement any of the other special member function so I'm good rule of zero",
    "start": "920199",
    "end": "926610"
  },
  {
    "text": "[Laughter]",
    "start": "926610",
    "end": "932029"
  },
  {
    "text": "Oh by by default pointer is uninitialized yeah all",
    "start": "933560",
    "end": "940920"
  },
  {
    "text": "right anything",
    "start": "940920",
    "end": "944319"
  },
  {
    "text": "else uh yeah that's oh that's a good question whether that's a bug or just poor implementation the comment was the",
    "start": "947279",
    "end": "954639"
  },
  {
    "text": "single parameter Constructor is not explicit you probably wanted explicit here yeah no make unique uh no make",
    "start": "954639",
    "end": "962800"
  },
  {
    "text": "unique uh let's call that a uh not part of this problem at the moment it's",
    "start": "962800",
    "end": "969839"
  },
  {
    "text": "incomplete but not broken yeah refering operator check",
    "start": "969839",
    "end": "976480"
  },
  {
    "text": "the oh that's interesting the D referencing operator does not po check if the pointer is initialized um if we",
    "start": "976480",
    "end": "983240"
  },
  {
    "text": "want to pick on the standard library and say that I'm trying to implement a stood",
    "start": "983240",
    "end": "989959"
  },
  {
    "text": "if you will unique pointer does its dfference operator check it does not",
    "start": "989959",
    "end": "995560"
  },
  {
    "text": "that might not be the best choice but it does not check uh but then people would complain that hey Unique pointer is",
    "start": "995560",
    "end": "1002880"
  },
  {
    "text": "slower because it has these branches every time I go to access it so you know",
    "start": "1002880",
    "end": "1008000"
  },
  {
    "text": "that's a thing okay so but if I were to actually compile and execute my test Suite I",
    "start": "1008000",
    "end": "1015000"
  },
  {
    "text": "would get pretty good code coverage and no bugs right",
    "start": "1015000",
    "end": "1020839"
  },
  {
    "text": "all right how would I go about making unique pointer Conex",
    "start": "1023800",
    "end": "1030600"
  },
  {
    "text": "per just just kind of see what I'm doing right",
    "start": "1032520",
    "end": "1039079"
  },
  {
    "text": "there sprinkling some Conex spur around my code like",
    "start": "1039079",
    "end": "1044558"
  },
  {
    "text": "that okay so how do I now test my coner enabled version of unique",
    "start": "1044559",
    "end": "1051799"
  },
  {
    "text": "pointer uh you can follow along if you would like QR code this will take you to compile",
    "start": "1052520",
    "end": "1059880"
  },
  {
    "text": "explore you know that is fair and I'm not going to repeat it for the video no",
    "start": "1063559",
    "end": "1069760"
  },
  {
    "text": "uh it's true yes compiler Explorer famously not great on mobile but it is",
    "start": "1069760",
    "end": "1075400"
  },
  {
    "text": "better it does Reflow the layout you can look at the code you can follow along a little bit things that were separate",
    "start": "1075400",
    "end": "1081000"
  },
  {
    "text": "windows are tabs should be if you scan that but I thought some people might want to it's an experiment give me a",
    "start": "1081000",
    "end": "1087360"
  },
  {
    "text": "break all right so this is what that's going to take you to I have unique",
    "start": "1087360",
    "end": "1093080"
  },
  {
    "text": "pointer with some Conex per sprinkled upon it and then I have a bunch of const Evel",
    "start": "1093080",
    "end": "1100000"
  },
  {
    "text": "tests so by simply wrapping these operations I admit this is going to look",
    "start": "1100000",
    "end": "1105720"
  },
  {
    "text": "weird but it's also awesome at the same time I have immediately invoked const",
    "start": "1105720",
    "end": "1111640"
  },
  {
    "text": "Evel lambdas that's what every one of these lambdas is if you're not familiar with the syntax Open Bracket although I",
    "start": "1111640",
    "end": "1118840"
  },
  {
    "text": "think you all are Lambda introducer and then I'm explicitly making it a conal Lambda and then I have my test case in",
    "start": "1118840",
    "end": "1125640"
  },
  {
    "text": "there it's smooshed up a little bit more than I would prefer for the sake of getting it to fit on one slide and then",
    "start": "1125640",
    "end": "1131919"
  },
  {
    "text": "at the end of each one of these statements like a line 15 empty braces",
    "start": "1131919",
    "end": "1136960"
  },
  {
    "text": "semicolon excuse me empty Rens semicolon to uh to immediately invoke that Lambda",
    "start": "1136960",
    "end": "1143280"
  },
  {
    "text": "so I'm forcing this test case to be executed at compile time is anyone done immediately invoked",
    "start": "1143280",
    "end": "1149320"
  },
  {
    "text": "Conant con Val lambdas to force work at compile time oh come on you have to try this",
    "start": "1149320",
    "end": "1156159"
  },
  {
    "text": "it's really fun",
    "start": "1156159",
    "end": "1159440"
  },
  {
    "text": "okay this is what we have so you will note that my con steeve",
    "start": "1164120",
    "end": "1169240"
  },
  {
    "text": "immediately invoked test case fails to compile it says call to const evl",
    "start": "1169240",
    "end": "1175280"
  },
  {
    "text": "function looking at the top one here blah blah blah is not a constant expression and constant expansion of",
    "start": "1175280",
    "end": "1182280"
  },
  {
    "text": "whatever accessing uninitialized member PTR one of you called that out you're",
    "start": "1182280",
    "end": "1188640"
  },
  {
    "text": "right the default Constructor of my unique pointer in fact does not default",
    "start": "1188640",
    "end": "1194280"
  },
  {
    "text": "initialize PTR and the compiler caught that form me because I tested this at",
    "start": "1194280",
    "end": "1200120"
  },
  {
    "text": "compile time so let's go ahead and initialize",
    "start": "1200120",
    "end": "1206159"
  },
  {
    "text": "that with NP pointer and now we can see because the squiggles went away that the first test case now",
    "start": "1206159",
    "end": "1213280"
  },
  {
    "text": "passes my second test case is very simple I'm just initializing a unique",
    "start": "1215120",
    "end": "1220520"
  },
  {
    "text": "pointer with uh with a with a with a pointer with a new int and this test",
    "start": "1220520",
    "end": "1226480"
  },
  {
    "text": "case is not passing at compile time it's failing to compile why is it failing to",
    "start": "1226480",
    "end": "1233399"
  },
  {
    "text": "compile because I'm not deallocating and if we were to try the problem is",
    "start": "1233880",
    "end": "1240080"
  },
  {
    "text": "some of this can be difficult to read uh is not a constant evaluation",
    "start": "1240080",
    "end": "1246880"
  },
  {
    "text": "blah blah [Music] blah because allocated storage has not",
    "start": "1246880",
    "end": "1254440"
  },
  {
    "text": "been deallocated well thank you very much for compiler for letting me know that so I now need to provide a",
    "start": "1254440",
    "end": "1265679"
  },
  {
    "text": "Destructor does that seem like a reasonable Destructor here it's either going to be null",
    "start": "1265799",
    "end": "1272159"
  },
  {
    "text": "pointer or it's going to have a value I don't have any way to check to see if it's an actually a valid pointer it",
    "start": "1272159",
    "end": "1277440"
  },
  {
    "text": "should be all right maybe delocation of el already",
    "start": "1277440",
    "end": "1283360"
  },
  {
    "text": "deallocated storage what is that about okay so this test",
    "start": "1283360",
    "end": "1289159"
  },
  {
    "text": "passed these two tests passed and now my next test case where I'm attempting to",
    "start": "1289159",
    "end": "1294960"
  },
  {
    "text": "move my unique pointer to another unique pointer that test case now fails at",
    "start": "1294960",
    "end": "1301279"
  },
  {
    "text": "compile time what do I",
    "start": "1301279",
    "end": "1304799"
  },
  {
    "text": "need uh the move",
    "start": "1307559",
    "end": "1311278"
  },
  {
    "text": "Constructor here's a fun trick by the way if you're not familiar with this one it's one of my favorite use cases for",
    "start": "1313559",
    "end": "1319000"
  },
  {
    "text": "this tool I am going to initialize pointer with the result of the exchange",
    "start": "1319000",
    "end": "1327600"
  },
  {
    "text": "of others pointer and null",
    "start": "1327600",
    "end": "1332640"
  },
  {
    "text": "pointer so what I'm doing is assigning others pointer to null pointer and I'm assigning my pointer to um to others",
    "start": "1332799",
    "end": "1343000"
  },
  {
    "text": "pointer all right now I have another test case",
    "start": "1343880",
    "end": "1349120"
  },
  {
    "text": "that is failing use of deleted function operator equals so it's telling me that",
    "start": "1349120",
    "end": "1355440"
  },
  {
    "text": "the uh the copy assignment operator has been deleted which yes thank you",
    "start": "1355440",
    "end": "1361559"
  },
  {
    "text": "compiler for deleting the copy assignment operator that's actually the right thing to do",
    "start": "1361559",
    "end": "1366799"
  },
  {
    "text": "here so I'm going to go ahead and provide my own",
    "start": "1366799",
    "end": "1373600"
  },
  {
    "text": "move assignment operator that looks mostly right",
    "start": "1381080",
    "end": "1385679"
  },
  {
    "text": "right is there oh",
    "start": "1393919",
    "end": "1400440"
  },
  {
    "text": "okay now this is the part of the story where we show that you still have to have reasonable test cases right this is",
    "start": "1403000",
    "end": "1411000"
  },
  {
    "text": "not a perfect implementation of my move assignment operator it is missing",
    "start": "1411000",
    "end": "1419080"
  },
  {
    "text": "something it's using",
    "start": "1419760",
    "end": "1423279"
  },
  {
    "text": "what I need to return something oh right so I actually do have a compile error",
    "start": "1426640",
    "end": "1433080"
  },
  {
    "text": "there look at this no return statement in Conex per function that's a hard compile error otherwise it's a warning",
    "start": "1433080",
    "end": "1439760"
  },
  {
    "text": "and you hope that you have warnings as errors but in Conex per evaluation it must be",
    "start": "1439760",
    "end": "1447240"
  },
  {
    "text": "so that's not even the thing I was going for though the problem is if well let's go",
    "start": "1447240",
    "end": "1454600"
  },
  {
    "text": "ahead and finish this and then we can look at the other things oh no wait actually there we go sorry yeah um is",
    "start": "1454600",
    "end": "1461039"
  },
  {
    "text": "not a constant expression because allocated storage has not been deallocated so now my very last test case fails because",
    "start": "1461039",
    "end": "1469880"
  },
  {
    "text": "yes I have to make sure I clean up my own storage and now my code compiles so",
    "start": "1471799",
    "end": "1479520"
  },
  {
    "text": "by enabling this for Conex per usage and making Conex per test of the things I",
    "start": "1479520",
    "end": "1486919"
  },
  {
    "text": "know that if this code compiles it is correct and it doesn't have undefined",
    "start": "1486919",
    "end": "1494399"
  },
  {
    "text": "behavior my Destructor can",
    "start": "1497120",
    "end": "1501039"
  },
  {
    "text": "throw that's an interesting point so uh do I just uh do I just mark",
    "start": "1505720",
    "end": "1511559"
  },
  {
    "text": "this no except so my",
    "start": "1511559",
    "end": "1515640"
  },
  {
    "text": "Destructor yes right so delete of the contained",
    "start": "1518480",
    "end": "1526440"
  },
  {
    "text": "thing might throw so how do I I Implement my conditional no",
    "start": "1526440",
    "end": "1532679"
  },
  {
    "text": "accept that's I if I'm getting where you're going with",
    "start": "1532799",
    "end": "1537759"
  },
  {
    "text": "this I believe that's right uh no accept of no accept of the delete of the",
    "start": "1538240",
    "end": "1545720"
  },
  {
    "text": "pointer it's correct though it's don't do this okay it's",
    "start": "1545720",
    "end": "1552120"
  },
  {
    "text": "it's is unique pointer unconditionally marked to no accept or is it conditionally no accept",
    "start": "1552120",
    "end": "1558919"
  },
  {
    "text": "no accept Okay SCD classes don't do the no except no accept thing this is yeah",
    "start": "1558919",
    "end": "1564360"
  },
  {
    "text": "it's ugly but what it says is um my Destructor is no accept if deleting the",
    "start": "1564360",
    "end": "1572080"
  },
  {
    "text": "contained thing is itself no accept it's ugly it's not the best way to do this",
    "start": "1572080",
    "end": "1578039"
  },
  {
    "text": "but it technically met the requirements okay um there are other",
    "start": "1578039",
    "end": "1584399"
  },
  {
    "text": "things in here that I'm not fully testing of course so you do still have to have good test and there's a little bit of a problem of",
    "start": "1584399",
    "end": "1590520"
  },
  {
    "text": "trying to figure out what your test code coverage looks like if you're doing this 100% at compile time so it's another",
    "start": "1590520",
    "end": "1596640"
  },
  {
    "text": "reason to compile your compile time test at runtime basically all right well is there any",
    "start": "1596640",
    "end": "1605200"
  },
  {
    "text": "other questions or anything anyone had",
    "start": "1605200",
    "end": "1609200"
  },
  {
    "text": "here all right I saw a picture being taken so I stood back all right what version of C++ was required for",
    "start": "1612960",
    "end": "1620520"
  },
  {
    "text": "that 20 yes 20 20 was required so I'm",
    "start": "1621960",
    "end": "1628159"
  },
  {
    "text": "going to play a little game this is all of from the C++ uh it's an",
    "start": "1628159",
    "end": "1633720"
  },
  {
    "text": "implementation of stood all of from the C++ standard Library what would it take",
    "start": "1633720",
    "end": "1640000"
  },
  {
    "text": "to make this",
    "start": "1640000",
    "end": "1643200"
  },
  {
    "text": "coner I'm going to get you all acting this out in a minute what do I need to do to make this",
    "start": "1646039",
    "end": "1652919"
  },
  {
    "text": "algorithm Conex what do I need to change it's like this right just a",
    "start": "1652919",
    "end": "1660559"
  },
  {
    "text": "little bit of sprinkling just add coner to the front of that it's coner what",
    "start": "1660559",
    "end": "1665640"
  },
  {
    "text": "version of C++ would be required to sprinkle coner on all",
    "start": "1665640",
    "end": "1670880"
  },
  {
    "text": "of 14 10 years ago if I have my year correct I regularly have to ask what",
    "start": "1670880",
    "end": "1677799"
  },
  {
    "text": "year it is is so we sprinkle Conex perur all",
    "start": "1677799",
    "end": "1684919"
  },
  {
    "text": "right there's this book that I recently recently I bought it five years ago I",
    "start": "1684919",
    "end": "1690120"
  },
  {
    "text": "bought it five years ago I recently opened it and looked at it called scientific and Engineering C++ by Barton",
    "start": "1690120",
    "end": "1697279"
  },
  {
    "text": "and uh nackman from 1994 this is a classic in some worlds I",
    "start": "1697279",
    "end": "1703159"
  },
  {
    "text": "also have you have this book and I guess that's probably because I know something about your history with National Labs",
    "start": "1703159",
    "end": "1709000"
  },
  {
    "text": "and such is why you have this book does anyone else know this book oh so I'm flipping through the",
    "start": "1709000",
    "end": "1715519"
  },
  {
    "text": "examples just for the record they're shockingly well written for pre-standard",
    "start": "1715519",
    "end": "1722799"
  },
  {
    "text": "C++ so I found this example in scientific engineering",
    "start": "1722799",
    "end": "1728240"
  },
  {
    "text": "C++ take a minute look at this see if it reminds you of",
    "start": "1728240",
    "end": "1734919"
  },
  {
    "text": "something does that seem familiar to anyone expected yeah it looks an awful lot like",
    "start": "1734919",
    "end": "1742080"
  },
  {
    "text": "standard expected it's something that either is an error or holds a value a valid object",
    "start": "1742080",
    "end": "1751240"
  },
  {
    "text": "it's intended for returning from functions like these people were 30",
    "start": "1751240",
    "end": "1756720"
  },
  {
    "text": "years ahead of their time pretty much here okay so what would it take to make this piece of 1994 pre-standard code",
    "start": "1756720",
    "end": "1766120"
  },
  {
    "text": "Conex spur",
    "start": "1766120",
    "end": "1769760"
  },
  {
    "text": "um you don't have to have",
    "start": "1775080",
    "end": "1780600"
  },
  {
    "text": "Union uh Hannah said Union which would imply C++ 14 we're allowed to use 17",
    "start": "1781039",
    "end": "1788640"
  },
  {
    "text": "we're allowed to use 17 no no no no in 17 you're allowed to use unions you're",
    "start": "1788640",
    "end": "1794000"
  },
  {
    "text": "just not allowed to change the active member of a union until C++ 20 doesn't",
    "start": "1794000",
    "end": "1799120"
  },
  {
    "text": "right the code on the screen doesn't use the union so this code would a as it stands for full complete Conex per usage",
    "start": "1799120",
    "end": "1807600"
  },
  {
    "text": "would require that the contained type be Conex per default",
    "start": "1807600",
    "end": "1813360"
  },
  {
    "text": "constructible uh otherwise you couldn't really use it in conext for usage oh no that's not true just as long as you",
    "start": "1813360",
    "end": "1819480"
  },
  {
    "text": "never called the default Constructor of this one at compile time it would still",
    "start": "1819480",
    "end": "1824679"
  },
  {
    "text": "be good all right so we sprinkle Conex and it would work",
    "start": "1824679",
    "end": "1830440"
  },
  {
    "text": "in in 14 right okay here's another example from",
    "start": "1830440",
    "end": "1837360"
  },
  {
    "text": "scientific engineering C++ this is their interval type it's kind of like a range",
    "start": "1837360",
    "end": "1844399"
  },
  {
    "text": "but it's just num numeric range uh or span kind of thing um so they've got uh",
    "start": "1844399",
    "end": "1853120"
  },
  {
    "text": "yeah the interval class with high and low and uh yeah Constructors and const",
    "start": "1853120",
    "end": "1858519"
  },
  {
    "text": "and nonconst um and but this was separated between header file and C++ file in their",
    "start": "1858519",
    "end": "1865159"
  },
  {
    "text": "example what would it take to make this Con exper what's",
    "start": "1865159",
    "end": "1872639"
  },
  {
    "text": "that oh oh Bryce made a really good point just for the record yeah this as it stands could be C++ 11 Conex per I",
    "start": "1875919",
    "end": "1884440"
  },
  {
    "text": "had not thought about that now the problem just since I didn't put anything on a",
    "start": "1884440",
    "end": "1890360"
  },
  {
    "text": "slide here in C++ 11 a const exper member function is itself implicitly",
    "start": "1890360",
    "end": "1896559"
  },
  {
    "text": "const that was removed in C++ 14 so but this doesn't have any mutating member",
    "start": "1896559",
    "end": "1902639"
  },
  {
    "text": "functions so yeah we could have made this Conex in C++ 11 but someone else pointed out move the C++ implementation",
    "start": "1902639",
    "end": "1909880"
  },
  {
    "text": "up into the header is that technically required",
    "start": "1909880",
    "end": "1916840"
  },
  {
    "text": "yeah well head out yes yes exactly having it",
    "start": "1929200",
    "end": "1936159"
  },
  {
    "text": "in the header versus can it be out of line I believe it can be out of line in C++ 11 a definition must be available",
    "start": "1936159",
    "end": "1943399"
  },
  {
    "text": "when you go to uh executed at compile time technically you could move this",
    "start": "1943399",
    "end": "1948559"
  },
  {
    "text": "into a imple file or something but practically speaking what are we doing with this code lifting it into the",
    "start": "1948559",
    "end": "1955960"
  },
  {
    "text": "header and then sprinkling and we're all going to be acting by the end of this",
    "start": "1955960",
    "end": "1961120"
  },
  {
    "text": "I've got 20 more minutes to get you acting okay 27 more minutes okay so like",
    "start": "1961120",
    "end": "1966440"
  },
  {
    "text": "that and this would be valid in C++ 11 but I think you might get an actual",
    "start": "1966440",
    "end": "1973840"
  },
  {
    "text": "warning with older compilers because you marked a Conex per",
    "start": "1973840",
    "end": "1978880"
  },
  {
    "text": "function constant it was already implicitly const yeah practically speaking C++",
    "start": "1978880",
    "end": "1986000"
  },
  {
    "text": "14 all",
    "start": "1986679",
    "end": "1989880"
  },
  {
    "text": "right this is also from scientific engineering C+ and Engineering",
    "start": "1992519",
    "end": "1998679"
  },
  {
    "text": "C++ this is their array shape struct virtual member functions virtual",
    "start": "1998679",
    "end": "2006440"
  },
  {
    "text": "Destructor and then some inheritance going",
    "start": "2006440",
    "end": "2012210"
  },
  {
    "text": "[Music] on why not I cannot make this coner because I",
    "start": "2012210",
    "end": "2019880"
  },
  {
    "text": "have virtual inheritance I have a virtual base class uh and um my pointer is not doing",
    "start": "2019880",
    "end": "2027440"
  },
  {
    "text": "what I wanted to do I'll do your job okay um a lot of people do confuse these",
    "start": "2027440",
    "end": "2032720"
  },
  {
    "text": "two topics so I'll take just a second on here these are virtual functions right",
    "start": "2032720",
    "end": "2038159"
  },
  {
    "text": "this is virtual inheritance it is a base class specified with the virtual keyword",
    "start": "2038159",
    "end": "2044679"
  },
  {
    "text": "why does that feature exist diamond the diamond problem yes so",
    "start": "2044679",
    "end": "2051760"
  },
  {
    "text": "if I've got some Base Class another derived another derived and then a down here that inherits from both of these",
    "start": "2051760",
    "end": "2058560"
  },
  {
    "text": "two things if I don't have virtual then actually have two instances of that shared Base Class if I have virtual then",
    "start": "2058560",
    "end": "2065839"
  },
  {
    "text": "those two instances get merged into a single instance C++ still does not allow",
    "start": "2065839",
    "end": "2072280"
  },
  {
    "text": "virtual inheritance did is that one of the papers that you had mentioned or not okay so there's no even any plans to",
    "start": "2072280",
    "end": "2079878"
  },
  {
    "text": "allow virtual inheritance so if I wanted to make this conext for capable what",
    "start": "2079879",
    "end": "2084919"
  },
  {
    "text": "would I need to do I I like I legitimately have to re",
    "start": "2084919",
    "end": "2091358"
  },
  {
    "text": "architect this thing right because it's relying on this diamond inheritance",
    "start": "2091359",
    "end": "2097000"
  },
  {
    "text": "thing although um I I didn't actually play with it given that the thing that",
    "start": "2097000",
    "end": "2102440"
  },
  {
    "text": "is being inherited by virtual inheritance is itself a a",
    "start": "2102440",
    "end": "2108160"
  },
  {
    "text": "uh it's pure virtual uh it's an abstract based class I was like e do I really do",
    "start": "2108160",
    "end": "2115240"
  },
  {
    "text": "I really need virtual inheritance is it okay to have two separate instances of",
    "start": "2115240",
    "end": "2122520"
  },
  {
    "text": "that array shape I know it sounds unwise anyhow",
    "start": "2122520",
    "end": "2129480"
  },
  {
    "text": "okay so I asked Twitter for code that I could use in this",
    "start": "2130000",
    "end": "2135280"
  },
  {
    "text": "talk but I didn't actually tell them why I thought about I should have a slide",
    "start": "2135280",
    "end": "2140359"
  },
  {
    "text": "that says Twitter forly known as Twitter if you're still on Twitter you",
    "start": "2140359",
    "end": "2147000"
  },
  {
    "text": "know what I'm talking about um again codes you can scan them these take you",
    "start": "2147000",
    "end": "2152960"
  },
  {
    "text": "to GitHub you can look through the code with me if you would like to or you can just stare at the screen",
    "start": "2152960",
    "end": "2159640"
  },
  {
    "text": "screen this is a library for uh generic",
    "start": "2160800",
    "end": "2166800"
  },
  {
    "text": "nonlinear undo redo functionality so you can register um uh events and then you",
    "start": "2166800",
    "end": "2173240"
  },
  {
    "text": "have an undo history and undo things so I started clicking through",
    "start": "2173240",
    "end": "2178359"
  },
  {
    "text": "this I've got undo state. let's",
    "start": "2178359",
    "end": "2185440"
  },
  {
    "text": "see what would it take to make this header file Conex",
    "start": "2185440",
    "end": "2191480"
  },
  {
    "text": "spur do anyone see anything sus in it that's the whole header",
    "start": "2200160",
    "end": "2206800"
  },
  {
    "text": "file seems fine I can probably just sprinkle some coner it's a couple people",
    "start": "2207880",
    "end": "2214200"
  },
  {
    "text": "playing along thank you too bad I didn't bring any extra swag give it out okay undo history.",
    "start": "2214200",
    "end": "2223440"
  },
  {
    "text": "let's see Nam space undo virtual Destructor uh virtual",
    "start": "2223440",
    "end": "2229720"
  },
  {
    "text": "void um Constructor yeah yeah okay so",
    "start": "2229720",
    "end": "2234880"
  },
  {
    "text": "those are declared out of line or defined out of line the add can undo can",
    "start": "2234880",
    "end": "2239920"
  },
  {
    "text": "redo undo redo functions um clear redo these things are out of line delete",
    "start": "2239920",
    "end": "2246760"
  },
  {
    "text": "first okay move move to all right does anyone does it look like I can for the most part so far I can just sprinkle",
    "start": "2246760",
    "end": "2252480"
  },
  {
    "text": "some more Conex bur in here sprinkle yeah we're gonna get everyone doing this",
    "start": "2252480",
    "end": "2259240"
  },
  {
    "text": "yes all right undo command lots of virtual in these things but whatever um",
    "start": "2259240",
    "end": "2267720"
  },
  {
    "text": "well that's definitely sprinkle some Conex per although I would do one minor",
    "start": "2267720",
    "end": "2273480"
  },
  {
    "text": "code review on this does anyone see it since you know I do best practice say and I have your attention right",
    "start": "2273480",
    "end": "2280920"
  },
  {
    "text": "now equals default is great don't uh don't put those empty braces on our",
    "start": "2280920",
    "end": "2286800"
  },
  {
    "text": "destructors I mean it's practically speaking since it's virtual it's not going to make a difference but just let",
    "start": "2286800",
    "end": "2292160"
  },
  {
    "text": "the compiler do its job equals default yeah all right so then that leaves undo",
    "start": "2292160",
    "end": "2299480"
  },
  {
    "text": "history. cppp",
    "start": "2299480",
    "end": "2303000"
  },
  {
    "text": "oh you're actually following along are you yeah uh so most of this looks pretty",
    "start": "2309880",
    "end": "2315359"
  },
  {
    "text": "good there's some assert we're going to have uh this some Trace",
    "start": "2315359",
    "end": "2324799"
  },
  {
    "text": "logging yes I did see that yeah I didn't see that when I've looked through it before but it does have just an empty",
    "start": "2327440",
    "end": "2334079"
  },
  {
    "text": "maker macro right there so I guess it doesn't matter",
    "start": "2334079",
    "end": "2342079"
  },
  {
    "text": "um comp right so the comment that Bryce just made was the error handling",
    "start": "2345680",
    "end": "2350720"
  },
  {
    "text": "generally doesn't matter during constant evaluation because if it were to hit that path they certain were to fail or",
    "start": "2350720",
    "end": "2355839"
  },
  {
    "text": "whatever then you're going to get a compile time error anyhow but if you have logging macros like this in here",
    "start": "2355839",
    "end": "2362280"
  },
  {
    "text": "that actually do something you might need to do something like wrap your logger in a like",
    "start": "2362280",
    "end": "2368079"
  },
  {
    "text": "if not conel or if not is constant evaluated depending on your uh version",
    "start": "2368079",
    "end": "2375480"
  },
  {
    "text": "of C++ you might have to deal with that in some place",
    "start": "2375480",
    "end": "2382400"
  },
  {
    "text": "uh raw new whatever where was that it was down here somewhere I know you already saw it Bryce because you",
    "start": "2382400",
    "end": "2388119"
  },
  {
    "text": "mentioned it oh uh oh uh",
    "start": "2388119",
    "end": "2394599"
  },
  {
    "text": "oh standard stack is that conexs were capable not yet not",
    "start": "2394599",
    "end": "2402000"
  },
  {
    "text": "yet sorry I just pointed at the uh the person I know we'll get there and then",
    "start": "2402000",
    "end": "2408440"
  },
  {
    "text": "there's this can I",
    "start": "2408440",
    "end": "2413680"
  },
  {
    "text": "concast at compile time I think yes I'm pretty sure yes",
    "start": "2413680",
    "end": "2420560"
  },
  {
    "text": "it's not in the list of things that are explicitly verboten like reinterpret cast um and I meant to test this but can",
    "start": "2420560",
    "end": "2430400"
  },
  {
    "text": "I modify a const object no so definitely 100% if this",
    "start": "2430400",
    "end": "2439319"
  },
  {
    "text": "code actually invokes undefined Behavior by mutating an object that was",
    "start": "2439319",
    "end": "2444800"
  },
  {
    "text": "originally created as const now I've just opened up an entire new pathway for",
    "start": "2444800",
    "end": "2449880"
  },
  {
    "text": "the compiler to find undefined behavior for me I just have to execute the test and find out if I am evoking undefined",
    "start": "2449880",
    "end": "2455760"
  },
  {
    "text": "Behavior by modifying a const object spectacular all right uh yeah and then a",
    "start": "2455760",
    "end": "2462560"
  },
  {
    "text": "delete okay so we have let's see um most of the code's already in",
    "start": "2462560",
    "end": "2467880"
  },
  {
    "text": "headers some questional concast we think that should be conext for capable would",
    "start": "2467880",
    "end": "2473440"
  },
  {
    "text": "you ever use an undo framework at compile time probably",
    "start": "2473440",
    "end": "2479480"
  },
  {
    "text": "not probably not but it enables this new range of Tes and possibilities you don't",
    "start": "2479480",
    "end": "2485040"
  },
  {
    "text": "know how the users of your library might want use it this is from the same developer they",
    "start": "2485040",
    "end": "2491880"
  },
  {
    "text": "were eager to send me examples on uh Twitter so this is a",
    "start": "2491880",
    "end": "2499720"
  },
  {
    "text": "minimalist string tokenizer um interestingly their comment to me on Twitter was that you probably",
    "start": "2499720",
    "end": "2506760"
  },
  {
    "text": "don't need string tokenizing at compile",
    "start": "2506760",
    "end": "2510760"
  },
  {
    "text": "time said that just for Hannah's sake um yeah so string",
    "start": "2512000",
    "end": "2518319"
  },
  {
    "text": "tokenizer uh let's see this is 100% header code just let me",
    "start": "2518319",
    "end": "2526160"
  },
  {
    "text": "know if you see anything that concerns",
    "start": "2526160",
    "end": "2531000"
  },
  {
    "text": "you that's a pretty small header do anything I don't even see a standard Library call at all except for",
    "start": "2534119",
    "end": "2540960"
  },
  {
    "text": "into standard string so what do we think how do I make",
    "start": "2540960",
    "end": "2546240"
  },
  {
    "text": "this Conex per sprinkle some coner on it it's all it's",
    "start": "2546240",
    "end": "2551800"
  },
  {
    "text": "going to take 100% headers let's sprinkle some",
    "start": "2551800",
    "end": "2556960"
  },
  {
    "text": "coner around um this is",
    "start": "2556960",
    "end": "2563040"
  },
  {
    "text": "from Joel task sync this is an interesting",
    "start": "2563040",
    "end": "2568839"
  },
  {
    "text": "one task",
    "start": "2568839",
    "end": "2572520"
  },
  {
    "text": "sync let's let go ahead and just drop into one of these header files Atomic string C assert",
    "start": "2575880",
    "end": "2586079"
  },
  {
    "text": "thread mutex which of these things can be used",
    "start": "2586079",
    "end": "2591400"
  },
  {
    "text": "at compile time right now like none of them right like we",
    "start": "2591400",
    "end": "2597839"
  },
  {
    "text": "can't do multi-threaded programming at compile time we can't attempt to right",
    "start": "2597839",
    "end": "2604160"
  },
  {
    "text": "now we can't standard thread is not Conex per mutex is not Conex per Atomic",
    "start": "2604160",
    "end": "2609440"
  },
  {
    "text": "is not Conex perur yet",
    "start": "2609440",
    "end": "2614440"
  },
  {
    "text": "um shared partner is not coner as well",
    "start": "2615240",
    "end": "2621839"
  },
  {
    "text": "yet um but uh I don't know so okay so that this is 100% headers and module",
    "start": "2623319",
    "end": "2630960"
  },
  {
    "text": "interface files stuff from thread and mutex and whatever do Conex per threads",
    "start": "2630960",
    "end": "2637200"
  },
  {
    "text": "make sense yes says Hannah who says yes I want to be able to do con exper",
    "start": "2637200",
    "end": "2644920"
  },
  {
    "text": "threads all right all right so uh interestingly and this just",
    "start": "2644920",
    "end": "2651760"
  },
  {
    "text": "for the record to coming straight from Hannah here uh because of chats that we had before if we have Conex for Threads",
    "start": "2651760",
    "end": "2659720"
  },
  {
    "text": "there's some possibility because Deadlocks and races are UB and we're not allowed to execute",
    "start": "2659720",
    "end": "2668000"
  },
  {
    "text": "UB at compile time that we could for some definition of prove prove our",
    "start": "2668000",
    "end": "2674200"
  },
  {
    "text": "multi-threaded code correct at compile time if we were allowed to do these things at compile time that's kind of",
    "start": "2674200",
    "end": "2680720"
  },
  {
    "text": "like a for some definition of probably maybe but that's not the point the possibility is",
    "start": "2680720",
    "end": "2687119"
  },
  {
    "text": "there all right um oops well",
    "start": "2687119",
    "end": "2694800"
  },
  {
    "text": "whatever you UK CML tools oh I didn't leave the link up long",
    "start": "2695800",
    "end": "2703119"
  },
  {
    "text": "enough this is linked to the wrong place that's not helpful is it oh no here we",
    "start": "2704720",
    "end": "2712760"
  },
  {
    "text": "go actually I should probably start moving a little faster um yeah okay well no let's just stop",
    "start": "2712880",
    "end": "2720280"
  },
  {
    "text": "here this is great all right I jumped into the first piece of source code that I found can I sprinkle Con exper on this",
    "start": "2720280",
    "end": "2730079"
  },
  {
    "text": "code no why because of",
    "start": "2731400",
    "end": "2736480"
  },
  {
    "text": "map at least not yet right if we got conext per map then this header file at",
    "start": "2736480",
    "end": "2741800"
  },
  {
    "text": "the very least would be good all right uh this actually does",
    "start": "2741800",
    "end": "2747280"
  },
  {
    "text": "have a lot of code in C++ files but let's not dig into that uh ultimately after my going",
    "start": "2747280",
    "end": "2754880"
  },
  {
    "text": "through it we would need Conex for un ordered set Conex per map and Conex per",
    "start": "2754880",
    "end": "2762720"
  },
  {
    "text": "ostream do you want Conex per o stream oh well that was easy sell",
    "start": "2762720",
    "end": "2768960"
  },
  {
    "text": "everyone said yesal you need virtual base classes for this to be implemented it's one of the",
    "start": "2768960",
    "end": "2774400"
  },
  {
    "text": "few places in the standard library that actually does this diamond thing and just for the record for those of you who",
    "start": "2774400",
    "end": "2779960"
  },
  {
    "text": "might be a little confused about this ostream is not just used for file IO",
    "start": "2779960",
    "end": "2785960"
  },
  {
    "text": "right it's also the base for string stream which might then give us compile time string",
    "start": "2785960",
    "end": "2792839"
  },
  {
    "text": "formatting yeah I'm okay with this H I don't remember this one um this",
    "start": "2792839",
    "end": "2801520"
  },
  {
    "text": "one relies on C satat solvers so that's",
    "start": "2801520",
    "end": "2806920"
  },
  {
    "text": "a problem you can't uh really so much call C libraries at compile",
    "start": "2806920",
    "end": "2815319"
  },
  {
    "text": "time is that a am I gonna get a yet on that one",
    "start": "2815319",
    "end": "2820720"
  },
  {
    "text": "Robert con con object yes Conex for objects only the probability of C",
    "start": "2820720",
    "end": "2827640"
  },
  {
    "text": "getting Conex for for function declarations in our",
    "start": "2827640",
    "end": "2832520"
  },
  {
    "text": "lifetimes okay yeah the hardest part is that the keyword exists in C now so it's",
    "start": "2833760",
    "end": "2841559"
  },
  {
    "text": "possible um the high L high level interface itself can be conext",
    "start": "2841559",
    "end": "2848079"
  },
  {
    "text": "um and just as an aside this thing does rely on throw and catch does it make sense to be able to throw and catch",
    "start": "2848079",
    "end": "2853480"
  },
  {
    "text": "exceptions at compile",
    "start": "2853480",
    "end": "2856800"
  },
  {
    "text": "time uh one answer says yes um I I think the the real takeaway here is like",
    "start": "2860040",
    "end": "2866880"
  },
  {
    "text": "besides the fact that it opens up a whole new way of testing our code when we have Conex enabled for our libraries",
    "start": "2866880",
    "end": "2873040"
  },
  {
    "text": "and ways for users of our library to use our libraries in ways that we never imagined um it it's it's like uh well in",
    "start": "2873040",
    "end": "2882559"
  },
  {
    "text": "Hannah's talk when she was talking about Conex for co-routines if a co-routine is the best",
    "start": "2882559",
    "end": "2888559"
  },
  {
    "text": "way to represent that problem then I want to be able to represent that problem with co-routines at compile time",
    "start": "2888559",
    "end": "2894960"
  },
  {
    "text": "or at runtime like why limit that capability if the best way to solve your problem means using throw and catch for",
    "start": "2894960",
    "end": "2902280"
  },
  {
    "text": "exception handling then why not be able to do that at compile time as well",
    "start": "2902280",
    "end": "2907920"
  },
  {
    "text": "well I had a lot of these didn't",
    "start": "2907920",
    "end": "2911119"
  },
  {
    "text": "I all right this one is interesting I'm going to go ahead and dig into it find",
    "start": "2913680",
    "end": "2919559"
  },
  {
    "text": "devices let's uh actually look back at it audio device and serial Port search",
    "start": "2919559",
    "end": "2926359"
  },
  {
    "text": "utility does that immediately scream like I definitely want to look for audio",
    "start": "2926359",
    "end": "2931559"
  },
  {
    "text": "devices and serial ports at compile time I'm getting some nods Yes actually",
    "start": "2931559",
    "end": "2938119"
  },
  {
    "text": "are you hoping at compile time to have your compiler be like warning or",
    "start": "2938119",
    "end": "2944200"
  },
  {
    "text": "something that that would be pretty cool um this is the kind of thing that's got a lot of Hardware specific uh operating",
    "start": "2944599",
    "end": "2952119"
  },
  {
    "text": "system kinds of things should it be coner just as a general",
    "start": "2952119",
    "end": "2958240"
  },
  {
    "text": "no yeah what Bryce says yes all right you're on the record",
    "start": "2958240",
    "end": "2964000"
  },
  {
    "text": "now fake AIO device right so you could have an emulated or",
    "start": "2965720",
    "end": "2972319"
  },
  {
    "text": "fake or dummy device or uh what's the word I'm looking for mock yeah mock",
    "start": "2972319",
    "end": "2978280"
  },
  {
    "text": "thank you uh mock device or something like that that you could actually test the rest of the interface at compile",
    "start": "2978280",
    "end": "2983640"
  },
  {
    "text": "time and see if the rest of the interface is good so this is where I ask maybe if this is the kind of project",
    "start": "2983640",
    "end": "2989599"
  },
  {
    "text": "you're working on you should ask what portion of this project actually can be const xer to think that you're entire",
    "start": "2989599",
    "end": "2997400"
  },
  {
    "text": "project can be const exper is probably unrealistic for most problem domains but",
    "start": "2997400",
    "end": "3004240"
  },
  {
    "text": "considerable portions of things can",
    "start": "3004240",
    "end": "3008359"
  },
  {
    "text": "be 9 minutes and 55 seconds let's see what the next one",
    "start": "3009280",
    "end": "3015078"
  },
  {
    "text": "is different implementations for finding robust random member minimizers and",
    "start": "3018720",
    "end": "3024520"
  },
  {
    "text": "genomic data does anyone know what that means",
    "start": "3024520",
    "end": "3030559"
  },
  {
    "text": "no genomes are cool why not",
    "start": "3030559",
    "end": "3035680"
  },
  {
    "text": "um so vectors lots of vectors vectors vectors that's",
    "start": "3035680",
    "end": "3041920"
  },
  {
    "text": "easy oh already's got some inline Conex per arrays of things whenn",
    "start": "3043160",
    "end": "3048839"
  },
  {
    "text": "whenn ganu always in line",
    "start": "3048839",
    "end": "3054319"
  },
  {
    "text": "accept most most of this looks pretty straightforward just looking at the header files right like I should be able",
    "start": "3055359",
    "end": "3060760"
  },
  {
    "text": "to just sprinkle the Conex spur",
    "start": "3060760",
    "end": "3066680"
  },
  {
    "text": "around what's that they are already sprinkling Conex",
    "start": "3066680",
    "end": "3072280"
  },
  {
    "text": "spur but not on all the member oh uh",
    "start": "3072280",
    "end": "3077359"
  },
  {
    "text": "oh no what's the prognosis for reinterpret cast at compile",
    "start": "3077359",
    "end": "3085280"
  },
  {
    "text": "time never happen oh well never mind then",
    "start": "3085280",
    "end": "3092160"
  },
  {
    "text": "um they're probably is a manager overblow overflow shifting stuff um but",
    "start": "3095079",
    "end": "3101559"
  },
  {
    "text": "yes that's also a good point if you invoke um unfined behavior for like integer",
    "start": "3101559",
    "end": "3108280"
  },
  {
    "text": "overflow shifting too far that kind of thing that's also a failure to compile so this is would be possibly opening up",
    "start": "3108280",
    "end": "3115400"
  },
  {
    "text": "a whole other way of of testing this code oh there we",
    "start": "3115400",
    "end": "3120680"
  },
  {
    "text": "go yes is bit yes bit cast is coner bit",
    "start": "3121119",
    "end": "3127160"
  },
  {
    "text": "cast doesn't let you reinterpret cast a pointer you would need to do the whole like like bit cast it into a new object",
    "start": "3127160",
    "end": "3134160"
  },
  {
    "text": "and then evaluate work on that thing which is great that's a good you I mean you know then then there's also",
    "start": "3134160",
    "end": "3141040"
  },
  {
    "text": "um uh begin lifetime as which is a C++ 23",
    "start": "3141040",
    "end": "3146880"
  },
  {
    "text": "feature isn't not con for pointers yes that's what I yeah that's my point it's",
    "start": "3146880",
    "end": "3152119"
  },
  {
    "text": "not con expert for pointers so there would be like we can't do that yeah yeah but you can you could bit cast the",
    "start": "3152119",
    "end": "3158319"
  },
  {
    "text": "underlying objects yeah um and then so start lifetime as C++ 23 that Zero",
    "start": "3158319",
    "end": "3165680"
  },
  {
    "text": "compilers have implemented so far that is not Conex per but it I think I'm",
    "start": "3165680",
    "end": "3171000"
  },
  {
    "text": "going to Hannah's going to work on a proposal to make that con exper as well all right",
    "start": "3171000",
    "end": "3179559"
  },
  {
    "text": "so we would need deck to be con exper uh is yeah is deck con",
    "start": "3179559",
    "end": "3184760"
  },
  {
    "text": "exper not yet um at least half of that code's already in headers so the standard Library what parts of the",
    "start": "3184760",
    "end": "3191160"
  },
  {
    "text": "standard Library are not currently coner if you're in Hannah's talk you've",
    "start": "3191160",
    "end": "3196480"
  },
  {
    "text": "already got a pretty good handle on this everything um it's a lot of",
    "start": "3196480",
    "end": "3203079"
  },
  {
    "text": "standard library and stuff I'm going to go ahead and [Music]",
    "start": "3203079",
    "end": "3208119"
  },
  {
    "text": "uh congratulate Hannah here on this work this is her uh commit for the llvm",
    "start": "3208119",
    "end": "3218920"
  },
  {
    "text": "project the standard Library",
    "start": "3218920",
    "end": "3224880"
  },
  {
    "text": "um this is making how much of the standard Library",
    "start": "3224880",
    "end": "3230240"
  },
  {
    "text": "coner only containers but a lot of containers deck list for forward list",
    "start": "3230240",
    "end": "3237799"
  },
  {
    "text": "map unordered map unordered set set flat map flat",
    "start": "3237799",
    "end": "3243720"
  },
  {
    "text": "set oh uh but the other adapters are stack um okay notice if I scroll through",
    "start": "3243720",
    "end": "3252760"
  },
  {
    "text": "Hannah's commit for making the standard Library con exper what do you",
    "start": "3252760",
    "end": "3258640"
  },
  {
    "text": "see it's like this right let's go ahead and zoom out a little bit",
    "start": "3259720",
    "end": "3266720"
  },
  {
    "text": "for like thousands of lines of code just add",
    "start": "3267520",
    "end": "3274760"
  },
  {
    "text": "coner and and oh wait before that uh Hannah I I have another link to that",
    "start": "3277720",
    "end": "3284520"
  },
  {
    "text": "paper as well uh Hannah's uh implementation experience with this is",
    "start": "3284520",
    "end": "3289559"
  },
  {
    "text": "um and her effort to make all these con expers she actually found undefined behavior and bugs across the standard",
    "start": "3289559",
    "end": "3295799"
  },
  {
    "text": "library and fixed them in the process yes can you top go back to the top for a",
    "start": "3295799",
    "end": "3303880"
  },
  {
    "text": "second yes me become when did me copy become",
    "start": "3304480",
    "end": "3313319"
  },
  {
    "text": "coner Hannah says a long time ago the initial set of algorithms says",
    "start": "3314480",
    "end": "3321280"
  },
  {
    "text": "Bryce",
    "start": "3321280",
    "end": "3324280"
  },
  {
    "text": "uhuh that's actually I was like I don't I didn't have an answer for that one um",
    "start": "3326559",
    "end": "3331640"
  },
  {
    "text": "although good IID do have caught that yeah so I mean look Conex for sprinkled",
    "start": "3331640",
    "end": "3337520"
  },
  {
    "text": "everywhere all right uh this is Hannah's implementation experience yes thank you",
    "start": "3337520",
    "end": "3344280"
  },
  {
    "text": "Hannah this is Hannah's implementation experience if you want that link and it's that paper it's that paper with all",
    "start": "3347799",
    "end": "3354920"
  },
  {
    "text": "those changes plus um the bugs that she found in the process oh sorry yes there",
    "start": "3354920",
    "end": "3362319"
  },
  {
    "text": "you go and um oh",
    "start": "3362319",
    "end": "3369480"
  },
  {
    "text": "no well that doesn't help there change the Ural from D to B to",
    "start": "3376520",
    "end": "3382880"
  },
  {
    "text": "P oh no it link was taken",
    "start": "3382880",
    "end": "3388200"
  },
  {
    "text": "down all right um You can see her actual uh paper is literally thousands of lines",
    "start": "3388200",
    "end": "3395119"
  },
  {
    "text": "of adding Conex per all right so change the D to a p should have checked that",
    "start": "3395119",
    "end": "3401119"
  },
  {
    "text": "link before I came here that's all right so how to use Con exper in C++ 23 avoid",
    "start": "3401119",
    "end": "3407359"
  },
  {
    "text": "the standard Library functions that are not yet con xer step one avoid throwing",
    "start": "3407359",
    "end": "3413000"
  },
  {
    "text": "and catching exceptions at compile time this is 23 keep in mind mind we might get these things in 26 if it's already",
    "start": "3413000",
    "end": "3419680"
  },
  {
    "text": "in a header or interface it should already be coner if it's already in your",
    "start": "3419680",
    "end": "3425000"
  },
  {
    "text": "header or in your interface file there's a very good chance you can sprinkle coner on",
    "start": "3425000",
    "end": "3430319"
  },
  {
    "text": "it you might have to move code from Mod into module interface files or into header files and if you move them into",
    "start": "3430319",
    "end": "3436920"
  },
  {
    "text": "module interface files let just say it's fine they're just like really good pre-compiled headers so you don't have",
    "start": "3436920",
    "end": "3443000"
  },
  {
    "text": "to worry about reprocessing this uh reparsing this stuff every time is Daniel in here no",
    "start": "3443000",
    "end": "3448760"
  },
  {
    "text": "okay uh and then Mark them coner sprinkle some Conex per you might have to do things like put loggers and con",
    "start": "3448760",
    "end": "3455720"
  },
  {
    "text": "Val blocks or put those inside your logging macros what if not Conant expert yes and not if",
    "start": "3455720",
    "end": "3462640"
  },
  {
    "text": "if not conel or if not is constant evaluated but if we're in 23 then if not",
    "start": "3462640",
    "end": "3469200"
  },
  {
    "text": "conel which looks really weird if you've never seen that by the way it's literally if exclamation point conel",
    "start": "3469200",
    "end": "3476400"
  },
  {
    "text": "brace so it's an if statement that doesn't have a conditional because the conditional is implied in the if statement it looks",
    "start": "3476400",
    "end": "3483640"
  },
  {
    "text": "strange like that um both uh test both at compile time and at runtime and",
    "start": "3483640",
    "end": "3490599"
  },
  {
    "text": "then profit uh from better flexibility and better testing with your code because",
    "start": "3490599",
    "end": "3496000"
  },
  {
    "text": "you don't know how people are going to use that um I'm going to wrap up here",
    "start": "3496000",
    "end": "3501359"
  },
  {
    "text": "but uh Ashley roll I'm not going to click on it Ashley May made a compile",
    "start": "3501359",
    "end": "3507599"
  },
  {
    "text": "time music sequencer so it's got a DSL",
    "start": "3507599",
    "end": "3512720"
  },
  {
    "text": "oh what you know what the heck I'll try to click on it because I do have a",
    "start": "3512720",
    "end": "3517318"
  },
  {
    "text": "minute oh that's the implementation not the example",
    "start": "3518280",
    "end": "3524119"
  },
  {
    "text": "uh it's fun it's not a practical thing but it the point is that it wouldn't be",
    "start": "3524119",
    "end": "3532039"
  },
  {
    "text": "possible to do these fun or Necessary Things without having there we",
    "start": "3532039",
    "end": "3538520"
  },
  {
    "text": "go that's a it's a DSL that Ashley made that parses that music sequencer for the",
    "start": "3538520",
    "end": "3545039"
  },
  {
    "text": "notes and everything at compile time and then it generates a wave file it's fun U but it relies on using things like",
    "start": "3545039",
    "end": "3551400"
  },
  {
    "text": "vector and string internally things that you wouldn't have necessarily thought needed to be available for conexs for",
    "start": "3551400",
    "end": "3556680"
  },
  {
    "text": "use all right I am out of time but uh this is who I am again and if you have",
    "start": "3556680",
    "end": "3563240"
  },
  {
    "text": "any interest in having me for training or anything please Conta contct me um and you can come up and ask questions",
    "start": "3563240",
    "end": "3569839"
  },
  {
    "text": "afterward uh and I have stickers otherwise thank you very much",
    "start": "3569839",
    "end": "3576319"
  }
]