[
  {
    "start": "0",
    "end": "74000"
  },
  {
    "text": "hello everybody cool to see so many people here I've got some fierce competition from John skeet now so",
    "start": "3690",
    "end": "10030"
  },
  {
    "text": "lovely to see all of your hair like to introduce was our first my name is Frances Paulin work a web step I'm a",
    "start": "10030",
    "end": "17500"
  },
  {
    "text": "full-stack developer and I'd like to get started by showing the reason that I got",
    "start": "17500",
    "end": "25359"
  },
  {
    "text": "into hacker and and the things that I'm going to talk about in the first place so I work at ABB they've been my my",
    "start": "25359",
    "end": "33100"
  },
  {
    "text": "client for the last two and a half years worked on various different projects there and the most recent project that",
    "start": "33100",
    "end": "38530"
  },
  {
    "text": "I've been said to work on is to build the front end for an electrical",
    "start": "38530",
    "end": "44890"
  },
  {
    "text": "simulator so that's basically a simulator that simulates electrical circuits or but rather large ones so",
    "start": "44890",
    "end": "52770"
  },
  {
    "text": "huge generators and motors and things in in factories or oil rigs things like",
    "start": "52770",
    "end": "59920"
  },
  {
    "text": "that and they've been so kind as to let me let me demonstrate this so I'll show",
    "start": "59920",
    "end": "66760"
  },
  {
    "text": "you what we've built and then I'll go through some of the technology and how",
    "start": "66760",
    "end": "72100"
  },
  {
    "text": "we got there but with a slightly simpler coding example towards the end so put this in",
    "start": "72100",
    "end": "81540"
  },
  {
    "start": "74000",
    "end": "263000"
  },
  {
    "text": "you'll see so what we're looking at here",
    "start": "85440",
    "end": "90970"
  },
  {
    "text": "is an electrical system that is being",
    "start": "90970",
    "end": "96940"
  },
  {
    "text": "simulated off to the side here you can see all the changes that are going on so that would be voltages that are changing",
    "start": "96940",
    "end": "103120"
  },
  {
    "text": "currents that are changing changes in the frequency and these changes then get",
    "start": "103120",
    "end": "108640"
  },
  {
    "text": "pushed to us every 10 milliseconds so there's not a lot of time between each tick to actually render stuff out so",
    "start": "108640",
    "end": "116650"
  },
  {
    "text": "this then gets piped into the into the active system as messages and then we do",
    "start": "116650",
    "end": "123610"
  },
  {
    "text": "some do some things with the messages and then we send them up via signal our",
    "start": "123610",
    "end": "130030"
  },
  {
    "text": "to our redux and then then it gets rendered with with react so what this is",
    "start": "130030",
    "end": "135700"
  },
  {
    "text": "really useful for is for example if you want to do training to see how a system",
    "start": "135700",
    "end": "140800"
  },
  {
    "text": "will react to different user inputs or for example if you need to take out a",
    "start": "140800",
    "end": "145810"
  },
  {
    "text": "generator for some plan maintenance you can see what will happen if I just disconnect this generator on the spot so",
    "start": "145810",
    "end": "153010"
  },
  {
    "text": "we can try and do that now so we've got three generators that are connected and",
    "start": "153010",
    "end": "159690"
  },
  {
    "text": "we can see what's going on here and you",
    "start": "159690",
    "end": "167920"
  },
  {
    "text": "can see that they're all within within the specified load that they're rated to",
    "start": "167920",
    "end": "177250"
  },
  {
    "text": "but if we then if we close this switch here you can see that immediately the",
    "start": "177250",
    "end": "186940"
  },
  {
    "text": "load becomes too high for the generators and they're starting to struggle so then you could you could you could then find",
    "start": "186940",
    "end": "194590"
  },
  {
    "text": "out that if we then take out what I have to know is a very high load and then",
    "start": "194590",
    "end": "204930"
  },
  {
    "text": "disconnect the generator then we'll still be fine and I can also be used to test systems that do this automatically",
    "start": "204930",
    "end": "211480"
  },
  {
    "text": "it's also called load shedding load shedding systems so that you can you can program that these motors aren't",
    "start": "211480",
    "end": "216700"
  },
  {
    "text": "particularly important so if we haven't got enough power then just cut them out so so it's quite cool it's almost like a",
    "start": "216700",
    "end": "225159"
  },
  {
    "text": "game so it's been really fun to fun to work with so that's that's what we've",
    "start": "225159",
    "end": "230950"
  },
  {
    "text": "built and now I'd like to show you how we built it",
    "start": "230950",
    "end": "238079"
  },
  {
    "text": "could you see the presentation now you can see my desktop",
    "start": "248290",
    "end": "253090"
  },
  {
    "text": "but better so some statements to get us",
    "start": "259720",
    "end": "265129"
  },
  {
    "start": "263000",
    "end": "403000"
  },
  {
    "text": "started distributed systems are hard writing applications that scale on",
    "start": "265129",
    "end": "270830"
  },
  {
    "text": "demand is hard and threading and shared state can be nothing short of a",
    "start": "270830",
    "end": "275960"
  },
  {
    "text": "nightmare some of you are probably good at this and don't think it's hard but I find it incredibly difficult so I appreciate",
    "start": "275960",
    "end": "281900"
  },
  {
    "text": "having frameworks to help me do this kind of stuff so that leads us to a",
    "start": "281900",
    "end": "287120"
  },
  {
    "text": "cadet net and as we were researching technology to use to make this simulator I was listening to Donna crocks and then",
    "start": "287120",
    "end": "294050"
  },
  {
    "text": "interview with Erin standard and we were talking about a cadet net and he's one of the core contributors and I thought",
    "start": "294050",
    "end": "301729"
  },
  {
    "text": "what this sounds really cool and it sounds like it could be useful for for the thing that we're building so I",
    "start": "301729",
    "end": "307370"
  },
  {
    "text": "looked into that and turns out it was a good fit and if you look at the website",
    "start": "307370",
    "end": "315229"
  },
  {
    "text": "you have this little thing up there that says we are reactive and what does that actually mean well if we click on that",
    "start": "315229",
    "end": "322639"
  },
  {
    "text": "we get sent to the reactive manifesto and that is four principles or traits",
    "start": "322639",
    "end": "328699"
  },
  {
    "text": "that define a reactive system so the system should be responsive so that",
    "start": "328699",
    "end": "334520"
  },
  {
    "text": "means that if a user so a user could be a person it could be a machine there could be anything asks the system",
    "start": "334520",
    "end": "342560"
  },
  {
    "text": "something it should get an answer it might not necessarily be the answer that you wanted so it could be that the",
    "start": "342560",
    "end": "348979"
  },
  {
    "text": "database is down or something like that but you should least get an answer and also the system should be elastic",
    "start": "348979",
    "end": "355900"
  },
  {
    "text": "meaning that in response to high load the system should be able to scale itself so that you can you can continue",
    "start": "355900",
    "end": "363919"
  },
  {
    "text": "to serve your customers the system should be resilient it errors happen we",
    "start": "363919",
    "end": "369500"
  },
  {
    "text": "all know that it's impossible to make a completely failsafe system but the system should be able to heal itself and",
    "start": "369500",
    "end": "376069"
  },
  {
    "text": "deal with that and not just throw its items in the air and give up and also it",
    "start": "376069",
    "end": "381259"
  },
  {
    "text": "should be message driven so that basically means that we send send",
    "start": "381259",
    "end": "386719"
  },
  {
    "text": "messages to each other and that allows us to do some interesting things such",
    "start": "386719",
    "end": "391960"
  },
  {
    "text": "having location transparency for our code in terms of that it can be running in different places but we'll get more",
    "start": "391960",
    "end": "399340"
  },
  {
    "text": "into that a bit later so what exactly is the actor model it's a conceptual model",
    "start": "399340",
    "end": "407440"
  },
  {
    "start": "403000",
    "end": "455000"
  },
  {
    "text": "to deal with concurrent computation and a method of concurrency in which the universal primitive is an actor and that",
    "start": "407440",
    "end": "415090"
  },
  {
    "text": "might all sound a bit fluffy but just as in object-oriented programming where the class could be seen as the as the",
    "start": "415090",
    "end": "422800"
  },
  {
    "text": "universal primitive then in in actors then it's the actor bits the universal",
    "start": "422800",
    "end": "428470"
  },
  {
    "text": "primitive and there are any similarities in terms of like if you would in if you were coding object-oriented style you",
    "start": "428470",
    "end": "435250"
  },
  {
    "text": "would you would make a class for things and in many cases you would make a corresponding actor and it's not a new",
    "start": "435250",
    "end": "443020"
  },
  {
    "text": "idea it was first published in the early 70s so along with many things in",
    "start": "443020",
    "end": "449169"
  },
  {
    "text": "computer science the things things come back again much later so what exactly is",
    "start": "449169",
    "end": "456880"
  },
  {
    "text": "an actor when an actor can be pretty much anything you want it to be an actor",
    "start": "456880",
    "end": "463360"
  },
  {
    "text": "is persistent so it's not like a thread that when it's done this thing it just like disappears off it the actor will",
    "start": "463360",
    "end": "469479"
  },
  {
    "text": "hang around and wait for messages unless you kill it or it dies in other ways and",
    "start": "469479",
    "end": "475020"
  },
  {
    "text": "actors can have internal state which is which is very useful and an actor has an",
    "start": "475020",
    "end": "482289"
  },
  {
    "text": "address so like like you will have a",
    "start": "482289",
    "end": "487599"
  },
  {
    "text": "reference to a to an object here you have an address to an actor and an actor",
    "start": "487599",
    "end": "493509"
  },
  {
    "text": "has also has a mailbox so if you send a message to an actor's address it will end up in the mailbox and the mailbox is",
    "start": "493509",
    "end": "499210"
  },
  {
    "text": "basically just a queue so each actor has its own queue and then handles those",
    "start": "499210",
    "end": "504969"
  },
  {
    "text": "messages so what can an actor do actors will then react to messages that are",
    "start": "504969",
    "end": "512500"
  },
  {
    "text": "sent to the mailbox and actor can send messages to other actors but also to",
    "start": "512500",
    "end": "519130"
  },
  {
    "text": "itself an actor can create new actors child actors",
    "start": "519130",
    "end": "525130"
  },
  {
    "text": "and an actor can decide what to do with the next message so an actor can has",
    "start": "525130",
    "end": "530710"
  },
  {
    "text": "this notion of behaviors so that you can put it in put it in a different state",
    "start": "530710",
    "end": "535960"
  },
  {
    "text": "and then instead of having lots of ghastly conditional logic so if this",
    "start": "535960",
    "end": "541720"
  },
  {
    "text": "then that then you can just put it in put it in a state and then it will do what you've decided to do in that",
    "start": "541720",
    "end": "548650"
  },
  {
    "text": "particular state so that may allow you to have much cleaner cleaner code some",
    "start": "548650",
    "end": "557110"
  },
  {
    "start": "556000",
    "end": "644000"
  },
  {
    "text": "very important principles that I like to observe as always the single",
    "start": "557110",
    "end": "562360"
  },
  {
    "text": "responsibility principle you don't want to have some kind of god actor that that does everything just like you don't want",
    "start": "562360",
    "end": "568030"
  },
  {
    "text": "some kind of God object that does everything only interact with an actor",
    "start": "568030",
    "end": "573580"
  },
  {
    "text": "through messages if you start mixing in other ways of communicating to the actor",
    "start": "573580",
    "end": "580090"
  },
  {
    "text": "and there are exceptions but only in rare cases then then all of the",
    "start": "580090",
    "end": "586660"
  },
  {
    "text": "guarantees that the actor system provides you and go out the window so you don't want to be doing that because",
    "start": "586660",
    "end": "591790"
  },
  {
    "text": "because that can lead to unsafe things happening and exactly one message is",
    "start": "591790",
    "end": "597640"
  },
  {
    "text": "processed at once and that's one of the most important than useful traits that you have with an actor system because that means that",
    "start": "597640",
    "end": "604030"
  },
  {
    "text": "when you send a message to an actor when that's processed you can view that actor",
    "start": "604030",
    "end": "609160"
  },
  {
    "text": "as a single-threaded program even though you may have multiple things going on at the same time and different actors and",
    "start": "609160",
    "end": "615790"
  },
  {
    "text": "you will never then have to be worried about race conditions in your actor unless you do weird things that because",
    "start": "615790",
    "end": "623470"
  },
  {
    "text": "you because it is breakable you can shoot yourself in the foot but if you follow these principles then you should",
    "start": "623470",
    "end": "630520"
  },
  {
    "text": "be okay and along with that messages must be immutable you don't want",
    "start": "630520",
    "end": "636670"
  },
  {
    "text": "messages suddenly changing in transit time because then also you can have unexpected side effects actors live in a",
    "start": "636670",
    "end": "645970"
  },
  {
    "text": "hierarchy so all actors have a parent that supervise them and that also goes",
    "start": "645970",
    "end": "651850"
  },
  {
    "text": "for when you make an an actor at the root level there will be system actors that supervise them again so",
    "start": "651850",
    "end": "658690"
  },
  {
    "text": "there will always be supervision and an actor can send a message to any actor",
    "start": "658690",
    "end": "664380"
  },
  {
    "text": "independent of its hierarchy and that doesn't necessarily mean that you should",
    "start": "664380",
    "end": "669850"
  },
  {
    "text": "do that but you can and it can be it can be very useful and you should let children do dangerous things and from a",
    "start": "669850",
    "end": "677560"
  },
  {
    "text": "parenting point of view that might sound a bit scary but you want to send scary",
    "start": "677560",
    "end": "686920"
  },
  {
    "text": "things further down the chain and I've got a picture here that we can use to",
    "start": "686920",
    "end": "692620"
  },
  {
    "text": "throw because if actor one sends a",
    "start": "692620",
    "end": "698350"
  },
  {
    "text": "message to tag to be one and what it wants to do with that message could",
    "start": "698350",
    "end": "704710"
  },
  {
    "text": "could potentially be dangerous for example it might do something over a flaky network connection it might be",
    "start": "704710",
    "end": "711340"
  },
  {
    "text": "doing some computation down here from data that you know might not be quite",
    "start": "711340",
    "end": "716380"
  },
  {
    "text": "all right so instead of doing everything in there and then risking that one",
    "start": "716380",
    "end": "722170"
  },
  {
    "text": "blowing up what you can do is that you can delegate it to a child and then if something goes wrong then the mess the",
    "start": "722170",
    "end": "729070"
  },
  {
    "text": "exception is sent back here and then you can decide in B one what do you want to",
    "start": "729070",
    "end": "734260"
  },
  {
    "text": "do if something goes wrong so you could then choose to restart C one or you",
    "start": "734260",
    "end": "740140"
  },
  {
    "text": "might choose to restart C 1 and C 2 because there's some connection there or if B one has no idea what to do with",
    "start": "740140",
    "end": "746800"
  },
  {
    "text": "that exception they can just send it further up the chain and then for example up here you might decide to",
    "start": "746800",
    "end": "751900"
  },
  {
    "text": "restart the whole lot here because I could be seeing this scene as one unit it depends but that's also very useful",
    "start": "751900",
    "end": "758440"
  },
  {
    "text": "and that's how we we create systems that can heal in the event of things going wrong so to create the active system",
    "start": "758440",
    "end": "767710"
  },
  {
    "start": "765000",
    "end": "814000"
  },
  {
    "text": "itself innaka use the static great method on actor system and you notice here that",
    "start": "767710",
    "end": "773530"
  },
  {
    "text": "I've got two different variants of that we have one that takes in the configuration and then we have one that doesn't and they're both the same really",
    "start": "773530",
    "end": "780970"
  },
  {
    "text": "it's just that the with the one that doesn't take in an explicit configuration object that will then read the configuration from your app config",
    "start": "780970",
    "end": "788140"
  },
  {
    "text": "or web config or or other places that you could even put",
    "start": "788140",
    "end": "793630"
  },
  {
    "text": "it you can you can use the application settings of Jason if using s banette",
    "start": "793630",
    "end": "800140"
  },
  {
    "text": "core but you'll have to write a little thing in between there which we've done",
    "start": "800140",
    "end": "805330"
  },
  {
    "text": "in our project to get it to work because that isn't supported out of the box but I'm sure that will come in in due time",
    "start": "805330",
    "end": "813839"
  },
  {
    "text": "so if we look at this piece of code here it's a very simple bank account so if we",
    "start": "813930",
    "end": "823300"
  },
  {
    "start": "814000",
    "end": "886000"
  },
  {
    "text": "look at that then we can see that if multiple threads try and do this you",
    "start": "823300",
    "end": "828970"
  },
  {
    "text": "could end up over drawing the account because two people could be mutating the",
    "start": "828970",
    "end": "835360"
  },
  {
    "text": "balance at the same time and what would be pretty bad",
    "start": "835360",
    "end": "840390"
  },
  {
    "text": "so you could stick a lock around it but in my opinion that's quite ugly and the",
    "start": "840390",
    "end": "846880"
  },
  {
    "text": "lock of course isn't part of your your logic it's not it's not interesting that's just because it has to be there",
    "start": "846880",
    "end": "854980"
  },
  {
    "text": "so it it just clutters so what we can do instead if we implement this as an actor",
    "start": "854980",
    "end": "861130"
  },
  {
    "text": "we have the exact same algorithm but instead of a method we receive a message",
    "start": "861130",
    "end": "866350"
  },
  {
    "text": "which in this case it's just a simple int and the beauty of this is that",
    "start": "866350",
    "end": "872920"
  },
  {
    "text": "because only one message is processed at a time that means that you will never be able to send in two things",
    "start": "872920",
    "end": "881560"
  },
  {
    "text": "simultaneously and overdraw the account so to create an actor though Tuesday and",
    "start": "881560",
    "end": "890110"
  },
  {
    "start": "886000",
    "end": "961000"
  },
  {
    "text": "it might seem a bit involved but you get used to it after a while first you need to create what's called props and props",
    "start": "890110",
    "end": "898090"
  },
  {
    "text": "are like a blueprint or a factory for the actor but it doesn't have to create",
    "start": "898090",
    "end": "903340"
  },
  {
    "text": "the actor so you send in a send in the lambda that is run every time the actor",
    "start": "903340",
    "end": "910020"
  },
  {
    "text": "actor starts and then it calls new client bridge actor and then sends in any dependencies that that might have",
    "start": "910020",
    "end": "917080"
  },
  {
    "text": "and then the actor is actually created by using the actor system or the context",
    "start": "917080",
    "end": "923860"
  },
  {
    "text": "actor of sending the props and then you pass in a name and the name here is",
    "start": "923860",
    "end": "931540"
  },
  {
    "text": "optional it will be assigned a name if you don't give one but if you don't give one it will be some name that is if it",
    "start": "931540",
    "end": "940589"
  },
  {
    "text": "is not as obvious as it might be and it can be useful to have have names if you",
    "start": "940589",
    "end": "946450"
  },
  {
    "text": "want to do routing for example because then you can have that one under that one and if you have some kind of",
    "start": "946450",
    "end": "951880"
  },
  {
    "text": "gibberish name then you won't be able to do that so when possible always always",
    "start": "951880",
    "end": "957550"
  },
  {
    "text": "give a name we talked about the actors",
    "start": "957550",
    "end": "963550"
  },
  {
    "start": "961000",
    "end": "1053000"
  },
  {
    "text": "have addresses and the address may be to a specific actor but it could also be to",
    "start": "963550",
    "end": "972220"
  },
  {
    "text": "a load balancer slash proxy kind of kind of object or note sorry actor so for",
    "start": "972220",
    "end": "980470"
  },
  {
    "text": "example if you're doing clustering and you say that you want to deploy five",
    "start": "980470",
    "end": "985600"
  },
  {
    "text": "actors of such-and-such on a remote machine then you would have one address",
    "start": "985600",
    "end": "990790"
  },
  {
    "text": "to all of that and then you could choose what kind of distribution you want do you want to round-robin or do you want",
    "start": "990790",
    "end": "995920"
  },
  {
    "text": "to send your messages to the actors that have the shortest queues that there are",
    "start": "995920",
    "end": "1001350"
  },
  {
    "text": "many options that you can you can use them but just be aware of that the address might not always be to a",
    "start": "1001350",
    "end": "1006959"
  },
  {
    "text": "specific actor and the address looks something like that in its simplest form",
    "start": "1006959",
    "end": "1012329"
  },
  {
    "text": "so it's the protocol and then the the name of the actor system and then slash",
    "start": "1012329",
    "end": "1019260"
  },
  {
    "text": "user like we saw on the picture of the hierarchy previously and then the name",
    "start": "1019260",
    "end": "1024390"
  },
  {
    "text": "of the actor and that will be more complicated if you're doing remoting because then you will have demo actor",
    "start": "1024390",
    "end": "1030720"
  },
  {
    "text": "system at that the host name and we'll look at that a bit later and this is",
    "start": "1030720",
    "end": "1038970"
  },
  {
    "text": "what provides us with with location transparency so your code doesn't necessarily show at all that things can",
    "start": "1038970",
    "end": "1047428"
  },
  {
    "text": "be in different places are deployed on different machines but you can change it through configuration afterwards so",
    "start": "1047429",
    "end": "1053900"
  },
  {
    "start": "1053000",
    "end": "1130000"
  },
  {
    "text": "sending messages to actors there are two ways that you can do either you can use tell to send a",
    "start": "1053900",
    "end": "1062890"
  },
  {
    "text": "message or you can use for word or you can use ask and when you tell an actor",
    "start": "1062890",
    "end": "1071919"
  },
  {
    "text": "you send the message and then you send in the context here and self is the",
    "start": "1071919",
    "end": "1080049"
  },
  {
    "text": "default so you don't actually have to specify it if you would want it to be yourself but you could want to send a",
    "start": "1080049",
    "end": "1086380"
  },
  {
    "text": "message on behalf of somebody else and that is basically what forward does forward is the same as saying who acted",
    "start": "1086380",
    "end": "1095950"
  },
  {
    "text": "on tail message and then sender as the second parameter here so it's just shorthand for that but you can also use",
    "start": "1095950",
    "end": "1103000"
  },
  {
    "text": "ask which can be useful in some cases but when you use ask then you say I would like you to give me something",
    "start": "1103000",
    "end": "1113940"
  },
  {
    "text": "within this time span here but that also means that the actor can't do anything in respond to other messages during that",
    "start": "1113940",
    "end": "1120039"
  },
  {
    "text": "periods you are basically locking the actor so you lose some of the benefits of the model itself by doing that so",
    "start": "1120039",
    "end": "1126460"
  },
  {
    "text": "only only do that when you absolutely have to parents know about their",
    "start": "1126460",
    "end": "1133600"
  },
  {
    "start": "1130000",
    "end": "1207000"
  },
  {
    "text": "children as one would hope seeing as they made them and they can also of",
    "start": "1133600",
    "end": "1140110"
  },
  {
    "text": "course communicating with each other but you should limit knowledge between",
    "start": "1140110",
    "end": "1146020"
  },
  {
    "text": "cousins and below and the reason you want to do that is because if this",
    "start": "1146020",
    "end": "1152110"
  },
  {
    "text": "cousin one here would like to speak to cousin two then you you have you have to",
    "start": "1152110",
    "end": "1159280"
  },
  {
    "text": "have a dependency between them here and it also means that you would be harder to refactor if you for example wanted to",
    "start": "1159280",
    "end": "1164799"
  },
  {
    "text": "change this and you wanted to put whatever cousin was doing in - child -",
    "start": "1164799",
    "end": "1170260"
  },
  {
    "text": "then you'd sudden you would have to go into here and change and it would be a lot more work than it would have to be",
    "start": "1170260",
    "end": "1175299"
  },
  {
    "text": "so what you could do that instead is that this one here could send a child one which could then Ford to parent that",
    "start": "1175299",
    "end": "1183909"
  },
  {
    "text": "could forward to child two that could forward to cousin and that might seem a bit involved but what school then",
    "start": "1183909",
    "end": "1189970"
  },
  {
    "text": "because you forward it all the way over there then when this one wants to respond you can just say send adopt l",
    "start": "1189970",
    "end": "1196060"
  },
  {
    "text": "and it will go straight back there because it's been forwarded all the way around and it's the sender has been",
    "start": "1196060",
    "end": "1201850"
  },
  {
    "text": "passed on all the way and you also have",
    "start": "1201850",
    "end": "1209230"
  },
  {
    "start": "1207000",
    "end": "1261000"
  },
  {
    "text": "some lifecycle hooks in an actor which you don't have to use but you can use if you want to for example do some cleanup",
    "start": "1209230",
    "end": "1215910"
  },
  {
    "text": "before an actor is shut down and then you have the pre-start method which is a",
    "start": "1215910",
    "end": "1221560"
  },
  {
    "text": "bit special so it's almost like a constructor but it's only run the first time an actor is created so if an actor",
    "start": "1221560",
    "end": "1228040"
  },
  {
    "text": "restarts that will get run as well but you can see that in post restarts the",
    "start": "1228040",
    "end": "1235630"
  },
  {
    "text": "way it's run is that post restart called pre start so if you have something that",
    "start": "1235630",
    "end": "1241840"
  },
  {
    "text": "needs initializing once but you don't want to initialize it on subsequent actor restarts for whatever reason the",
    "start": "1241840",
    "end": "1249160"
  },
  {
    "text": "actor has to restart then you can just override that and then take away the pre-start call and then it will only get",
    "start": "1249160",
    "end": "1255790"
  },
  {
    "text": "run the first the first time by the by the accent actor system switchable",
    "start": "1255790",
    "end": "1263470"
  },
  {
    "start": "1261000",
    "end": "1352000"
  },
  {
    "text": "behaviors that we mentioned slightly before they are really cool and super useful so in this case here we have an",
    "start": "1263470",
    "end": "1272500"
  },
  {
    "text": "actor that has two behaviors it has a behavior and B behavior and it starts",
    "start": "1272500",
    "end": "1278500"
  },
  {
    "text": "off by you say become a behavior and become just takes a function that has no",
    "start": "1278500",
    "end": "1283780"
  },
  {
    "text": "parameters just a void method and it will then do its thing when it receives",
    "start": "1283780",
    "end": "1289600"
  },
  {
    "text": "a string and it will print out from a behavior but then it says become B behavior so next time a string has been",
    "start": "1289600",
    "end": "1298150"
  },
  {
    "text": "told to this actor then this code will run so that means that you can build quite complicated state machines like",
    "start": "1298150",
    "end": "1304600"
  },
  {
    "text": "that but without any ifs and buts at all which is really really useful and there",
    "start": "1304600",
    "end": "1311530"
  },
  {
    "text": "is also a version of this called become stacked so if you for example connect to",
    "start": "1311530",
    "end": "1320140"
  },
  {
    "text": "something but then you want to go back into the disconnected state then you could say the some stacked and then in the connected",
    "start": "1320140",
    "end": "1326730"
  },
  {
    "text": "State and then if it somehow disconnects you could just say become unstacked and then it will go back to the previous",
    "start": "1326730",
    "end": "1332520"
  },
  {
    "text": "state so that you don't have to keep track yourself of what state you're in before everyone you can pop that onto",
    "start": "1332520",
    "end": "1339960"
  },
  {
    "text": "the stack onto the behavior stack and then use that to navigate backwards and",
    "start": "1339960",
    "end": "1345090"
  },
  {
    "text": "forwards and we use that quite a lot in the in the simulator and it's been very very useful remoting so I've mentioned",
    "start": "1345090",
    "end": "1359040"
  },
  {
    "start": "1352000",
    "end": "1435000"
  },
  {
    "text": "this a couple of times now that but in in academic an run our actors on any",
    "start": "1359040",
    "end": "1366510"
  },
  {
    "text": "machine not just local machines it could be a machine on the other side of the world for example if you have a actor",
    "start": "1366510",
    "end": "1375510"
  },
  {
    "text": "model running on a little computer that doesn't it doesn't normally consume many resources but sometimes you need to do",
    "start": "1375510",
    "end": "1381480"
  },
  {
    "text": "this massive job or something like that that needs lots of CPU power that you could just offload that onto a different",
    "start": "1381480",
    "end": "1387630"
  },
  {
    "text": "machine do its thing and then you could kill the actor afterwards if you wanted to security up until acha 1.2 there was",
    "start": "1387630",
    "end": "1397500"
  },
  {
    "text": "no security when you send messages back and so forth so that was all in plain text that changes in echo 1.2 so you now",
    "start": "1397500",
    "end": "1406770"
  },
  {
    "text": "have TLS and one thing that you need to be aware of when you're doing remoting",
    "start": "1406770",
    "end": "1411780"
  },
  {
    "text": "is that your message needs to be serializable because otherwise it of course isn't going to work across across",
    "start": "1411780",
    "end": "1417570"
  },
  {
    "text": "the network and mentioned it slightly before you can do clustering so not just",
    "start": "1417570",
    "end": "1422790"
  },
  {
    "text": "deploy one actor but you can make clusters of actors that will then appear",
    "start": "1422790",
    "end": "1427800"
  },
  {
    "text": "as as one actor but actually be absolutely many more so which leads us",
    "start": "1427800",
    "end": "1436230"
  },
  {
    "start": "1435000",
    "end": "1547000"
  },
  {
    "text": "to our demo and I'm terrible at drawing things on the computer so I just drew a",
    "start": "1436230",
    "end": "1442110"
  },
  {
    "text": "little sketch here I hope you can read it so we're making something that's quite similar to the simulator system in",
    "start": "1442110",
    "end": "1451200"
  },
  {
    "text": "that we have a message producer here which is just a console application that produces messages containing the numbers",
    "start": "1451200",
    "end": "1458390"
  },
  {
    "text": "- 1 - 16 I think it puts them onto a queue and then an event is raised on the",
    "start": "1458390",
    "end": "1466940"
  },
  {
    "text": "other end to the listener which is a queue actor that then receives it or it",
    "start": "1466940",
    "end": "1472700"
  },
  {
    "text": "starts publishing messages up to the Fibonacci actor so that that then just",
    "start": "1472700",
    "end": "1477830"
  },
  {
    "text": "gets the numbers 1 2 or minus 1 2 to 16 and then I actually have to compute the",
    "start": "1477830",
    "end": "1484250"
  },
  {
    "text": "Fibonacci series for that number and that is of course a very scary operation",
    "start": "1484250",
    "end": "1490810"
  },
  {
    "text": "because if we get in - one that is invalid so that will then cause our",
    "start": "1490810",
    "end": "1496310"
  },
  {
    "text": "actor to to throw an exception so we've set up the Fibonacci actor here to",
    "start": "1496310",
    "end": "1503380"
  },
  {
    "text": "observe this one here and look after it and restart it when it needs to need",
    "start": "1503380",
    "end": "1509330"
  },
  {
    "text": "needs restarting and afterwards that then pushes its messages to the client",
    "start": "1509330",
    "end": "1515810"
  },
  {
    "text": "bridge actor which serves as our bridge between our back ends over signal are up",
    "start": "1515810",
    "end": "1521690"
  },
  {
    "text": "to the client where you can then have n clients that sit and watch Fibonacci series being computed so this is",
    "start": "1521690",
    "end": "1528740"
  },
  {
    "text": "probably the world's most over-engineered Fibonacci program but it",
    "start": "1528740",
    "end": "1534350"
  },
  {
    "text": "is what is so let's look at some code to",
    "start": "1534350",
    "end": "1542440"
  },
  {
    "text": "change to duplicate",
    "start": "1542440",
    "end": "1548649"
  },
  {
    "start": "1547000",
    "end": "2028000"
  },
  {
    "text": "can you see is it okay on a black background or fly change it to white",
    "start": "1549410",
    "end": "1555050"
  },
  {
    "text": "background yeah",
    "start": "1555050",
    "end": "1559390"
  },
  {
    "text": "I'm completely lost now tools hi there we are thank you though this",
    "start": "1569070",
    "end": "1575770"
  },
  {
    "text": "doesn't look I am I actually running some code",
    "start": "1575770",
    "end": "1580230"
  },
  {
    "text": "this doesn't look like it normally does",
    "start": "1590540",
    "end": "1594950"
  },
  {
    "text": "options there we are that looks more light",
    "start": "1602650",
    "end": "1608520"
  },
  {
    "text": "Tepera Oh oops",
    "start": "1615490",
    "end": "1621450"
  },
  {
    "text": "anyway so we have our message producer here",
    "start": "1624750",
    "end": "1634040"
  },
  {
    "text": "that uses a very secure cryptographic stuff that I don't understand to",
    "start": "1634040",
    "end": "1640260"
  },
  {
    "text": "generate these numbers and then it pushes them onto the queue and that is",
    "start": "1640260",
    "end": "1647160"
  },
  {
    "text": "all this program does so if we then move to the web application we go to the",
    "start": "1647160",
    "end": "1655260"
  },
  {
    "text": "startup class this is an Mayer's banette core app and we go to the configure",
    "start": "1655260",
    "end": "1664830"
  },
  {
    "text": "services so we need to add two things here we need to add a service here that",
    "start": "1664830",
    "end": "1673110"
  },
  {
    "text": "can do that can get hold of our signal our hub because the akka system will",
    "start": "1673110",
    "end": "1678270"
  },
  {
    "text": "need some way to get hold of that and that is then used by the iHub context",
    "start": "1678270",
    "end": "1684360"
  },
  {
    "text": "accessor that will actually provide us without with our hub and we need to",
    "start": "1684360",
    "end": "1694620"
  },
  {
    "text": "enable signal ah and down here we then",
    "start": "1694620",
    "end": "1702300"
  },
  {
    "text": "pass in a function that we can use to then get this single our hub and then we",
    "start": "1702300",
    "end": "1712320"
  },
  {
    "text": "say demo actor system dot create and if we then we can just look at this quickly",
    "start": "1712320",
    "end": "1719000"
  },
  {
    "text": "all it does is just give you give you the give you the hub and we can look at",
    "start": "1719000",
    "end": "1724710"
  },
  {
    "text": "that quickly the hub here does nothing in because we're only pushing data from",
    "start": "1724710",
    "end": "1730500"
  },
  {
    "text": "the server to the client excuse me there are no methods in here that can be",
    "start": "1730500",
    "end": "1735990"
  },
  {
    "text": "called from the client but if we were doing doing this both ways then of course there would be methods here then",
    "start": "1735990",
    "end": "1741080"
  },
  {
    "text": "that we could call so if we go into our demo actor system here then we send in",
    "start": "1741080",
    "end": "1752220"
  },
  {
    "text": "how hub context accesses that we just just made and then we take in some",
    "start": "1752220",
    "end": "1757470"
  },
  {
    "text": "configuration but actually at the moment we don't because we haven't made any",
    "start": "1757470",
    "end": "1762720"
  },
  {
    "text": "but we'll get to that a bit later so we're building buildings three-act or",
    "start": "1762720",
    "end": "1770159"
  },
  {
    "text": "making three actors we've got the client bridge actor which is the one that does the the single a stuff so we're going to",
    "start": "1770159",
    "end": "1777360"
  },
  {
    "text": "look at that if I got it open yes we have that receives a Fibonacci series",
    "start": "1777360",
    "end": "1783870"
  },
  {
    "text": "message so that's when it's been computed and then we'll just push it up through the sing sing the live event",
    "start": "1783870",
    "end": "1790020"
  },
  {
    "text": "pusher which then pushes it to all connected clients and we have our",
    "start": "1790020",
    "end": "1797370"
  },
  {
    "text": "Fibonacci actor which is like a parent actor so that takes in a reference to",
    "start": "1797370",
    "end": "1805260"
  },
  {
    "text": "the client bridge actor when the actor riff and what's important to note that the AI actor if that is not a reference",
    "start": "1805260",
    "end": "1813539"
  },
  {
    "text": "as in a dotnet reference to an object that's just basically the address to",
    "start": "1813539",
    "end": "1820049"
  },
  {
    "text": "which we can send messages and that then",
    "start": "1820049",
    "end": "1825659"
  },
  {
    "text": "creates the Fibonacci series actor which is the one that does the answer of computation and it will receive the",
    "start": "1825659",
    "end": "1835710"
  },
  {
    "text": "Fibonacci series message once it's been computed oops",
    "start": "1835710",
    "end": "1843260"
  },
  {
    "text": "which just lit just looks like this immutable and it takes the source",
    "start": "1843970",
    "end": "1853990"
  },
  {
    "text": "message which it got from the cue which just contains a number and this is our",
    "start": "1853990",
    "end": "1862860"
  },
  {
    "text": "supervisory strategy so this is where we decide what happens when things blow up",
    "start": "1862860",
    "end": "1868830"
  },
  {
    "text": "so if it's an argument out of range exception for example - one that will",
    "start": "1868830",
    "end": "1876250"
  },
  {
    "text": "trigger that it will cause the actor to restart otherwise if it doesn't know",
    "start": "1876250",
    "end": "1882039"
  },
  {
    "text": "what to do with it then it will just stop it just for sake of demo and if we",
    "start": "1882039",
    "end": "1889090"
  },
  {
    "text": "look in our series actor that receives",
    "start": "1889090",
    "end": "1894879"
  },
  {
    "text": "the Fibonacci source message with our number and then it computes the",
    "start": "1894879",
    "end": "1900309"
  },
  {
    "text": "Fibonacci series and then when it's done it tells back to its sender our series",
    "start": "1900309",
    "end": "1909419"
  },
  {
    "text": "and also note here that we've got a log so that the log provider that you can",
    "start": "1909419",
    "end": "1914559"
  },
  {
    "text": "order several logging providers that you can you can use this one just logs out to the console but there are lots of",
    "start": "1914559",
    "end": "1920799"
  },
  {
    "text": "different ones that you can use if you want to have something else so if we if",
    "start": "1920799",
    "end": "1927549"
  },
  {
    "text": "we were to run this or we can we can do that first then we can see what it looks",
    "start": "1927549",
    "end": "1934600"
  },
  {
    "text": "like and",
    "start": "1934600",
    "end": "1938669"
  },
  {
    "text": "then we can see",
    "start": "1939690",
    "end": "1943008"
  },
  {
    "text": "so you can see that this is now pushing stuff to the queue and you can see that",
    "start": "1947440",
    "end": "1955840"
  },
  {
    "text": "they're being received and they're being computed at the same time and hopefully a minus one will appear soon as luck",
    "start": "1955840",
    "end": "1968840"
  },
  {
    "text": "would have it this is seem to take a while but the joy of random numbers but",
    "start": "1968840",
    "end": "1974540"
  },
  {
    "text": "if we wait a little while and we then we should see that there are some error",
    "start": "1974540",
    "end": "1981530"
  },
  {
    "text": "messages that turn up off to the left here and this isn't going very well",
    "start": "1981530",
    "end": "1990070"
  },
  {
    "text": "now there's one and then you can see that it restarted but the system just carries on doing its thing so it",
    "start": "1992800",
    "end": "1999380"
  },
  {
    "text": "survived that nicely so instead of riddling your code with prior CAPTCHAs and then trying to get back into a good",
    "start": "1999380",
    "end": "2006370"
  },
  {
    "text": "state it's really nice to just to be able to restart things start at a clean slate and then just get back to work",
    "start": "2006370",
    "end": "2012580"
  },
  {
    "text": "again so we can then have a look at the the",
    "start": "2012580",
    "end": "2021100"
  },
  {
    "text": "front-end for this because that's quite fun as well",
    "start": "2021100",
    "end": "2025710"
  },
  {
    "start": "2028000",
    "end": "2218000"
  },
  {
    "text": "so we have how many people here have",
    "start": "2029510",
    "end": "2034650"
  },
  {
    "text": "used react and redux before and have some knowledge of so a couple of you so",
    "start": "2034650",
    "end": "2043140"
  },
  {
    "text": "basically you have you have a store that has your states no no do not take survey",
    "start": "2043140",
    "end": "2052169"
  },
  {
    "text": "and you then update the state and then",
    "start": "2052169",
    "end": "2059600"
  },
  {
    "text": "based on that then your your components are are rear-ended so we have a store",
    "start": "2059600",
    "end": "2065370"
  },
  {
    "text": "here that keeps our state and that takes",
    "start": "2065370",
    "end": "2070980"
  },
  {
    "text": "in that's about previously the Fibonacci",
    "start": "2070980",
    "end": "2076740"
  },
  {
    "text": "series array and then it takes in an action which is of type ad series action",
    "start": "2076740",
    "end": "2082260"
  },
  {
    "text": "which just has has one of these series with it and also here it's important",
    "start": "2082260",
    "end": "2092128"
  },
  {
    "text": "with the principle of immutability so instead of mutating the state what we do here this is of course very naive and",
    "start": "2092129",
    "end": "2099600"
  },
  {
    "text": "not the most efficient way of doing things but it's okay for demo purposes we return a new array put the new value",
    "start": "2099600",
    "end": "2107820"
  },
  {
    "text": "of the topic at the beginning of the array and then we spread our previous state over the rest and then we have a",
    "start": "2107820",
    "end": "2116040"
  },
  {
    "text": "component that just renders this which",
    "start": "2116040",
    "end": "2121590"
  },
  {
    "text": "is what we saw before with the numbers coming out but the really fun part here",
    "start": "2121590",
    "end": "2126690"
  },
  {
    "text": "is this piece of middleware which is what allows us to have a message driven",
    "start": "2126690",
    "end": "2132060"
  },
  {
    "text": "architecture from end to end all the way up to the client so this this little",
    "start": "2132060",
    "end": "2139860"
  },
  {
    "text": "piece of middleware here we then I'll show you where it's registered afterwards but we connect to our hub and",
    "start": "2139860",
    "end": "2148440"
  },
  {
    "text": "do all of that the signal our thing so if you were using a different WebSocket",
    "start": "2148440",
    "end": "2153810"
  },
  {
    "text": "framework or server sent events or something it would be slightly different but the principle would be the same you",
    "start": "2153810",
    "end": "2159930"
  },
  {
    "text": "connect to that and then when you when your mess is a pushed then you dispatch an event",
    "start": "2159930",
    "end": "2167180"
  },
  {
    "text": "or just more dispatch an action and then that gets it will then appear in your in",
    "start": "2167180",
    "end": "2174060"
  },
  {
    "text": "your reducer that we just looked at just like any other action that was dispatched for example if you click the",
    "start": "2174060",
    "end": "2180420"
  },
  {
    "text": "button though or what have you and then going the other way any action that you trigger you can then",
    "start": "2180420",
    "end": "2188850"
  },
  {
    "text": "you can then intercept here for example if you if you remember in the in the",
    "start": "2188850",
    "end": "2195270"
  },
  {
    "text": "simulator every time you press a button to open or close a switch for example that triggered an action in redux which",
    "start": "2195270",
    "end": "2202020"
  },
  {
    "text": "was then intercepted in the middle where and then it gone that got them pushed to",
    "start": "2202020",
    "end": "2207330"
  },
  {
    "text": "the server and then that did its thing and then it pushed new messages back again so you have this two-way two-way",
    "start": "2207330",
    "end": "2213660"
  },
  {
    "text": "thing which is really nice and that's pretty much it so what else can we do",
    "start": "2213660",
    "end": "2220920"
  },
  {
    "start": "2218000",
    "end": "2607000"
  },
  {
    "text": "here that's fun so we've now got everything running on one machine which",
    "start": "2220920",
    "end": "2226980"
  },
  {
    "text": "is cool but what if we wanted to do our computation in a different process we",
    "start": "2226980",
    "end": "2233970"
  },
  {
    "text": "can start by doing in a different process on the same machine so if we then look at this acha console here",
    "start": "2233970",
    "end": "2240180"
  },
  {
    "text": "which is what we'll use to host the process then all that we're doing is",
    "start": "2240180",
    "end": "2246510"
  },
  {
    "text": "that we're making an actor system and note that it's not good demo actor system this is PI actors is to make but it could be demo active system but I've",
    "start": "2246510",
    "end": "2255000"
  },
  {
    "text": "given it a different name so you set up an actor system somewhere this one",
    "start": "2255000",
    "end": "2260310"
  },
  {
    "text": "happens to then be on the same machine and you say you give it a port and you",
    "start": "2260310",
    "end": "2267480"
  },
  {
    "text": "configure the serializers if you thought very briefly there was a yellow message",
    "start": "2267480",
    "end": "2273060"
  },
  {
    "text": "as soon as we started the demo previously in the console that's an error message saying that the Jason net",
    "start": "2273060",
    "end": "2279780"
  },
  {
    "text": "serializer is deprecated and that you should use the Hyperion serializer instead so this is what we've configured here now and note that we're not",
    "start": "2279780",
    "end": "2289800"
  },
  {
    "text": "creating any actors all that we've done is that we've got a program that has a reference to the same project",
    "start": "2289800",
    "end": "2296710"
  },
  {
    "text": "has the actors and the messages that are being sent but that's all that we need to be able to deploy actors to it so if",
    "start": "2296710",
    "end": "2304780"
  },
  {
    "text": "we set the start up project to contain a",
    "start": "2304780",
    "end": "2310020"
  },
  {
    "text": "co console as well and we start",
    "start": "2310020",
    "end": "2315369"
  },
  {
    "text": "everything we then get a third window ah",
    "start": "2315369",
    "end": "2321569"
  },
  {
    "text": "and we can now see Oh No sorry I forgot",
    "start": "2329790",
    "end": "2339210"
  },
  {
    "text": "to check out the right branch [Music]",
    "start": "2339210",
    "end": "2347059"
  },
  {
    "text": "you so now it's listening on and now we can",
    "start": "2363180",
    "end": "2369369"
  },
  {
    "text": "see here that the message is that previously we're in this one here are now being printed out in this window",
    "start": "2369369",
    "end": "2376630"
  },
  {
    "text": "instead so the actors then being deployed now this went wrong so we just continue because as luck would have it",
    "start": "2376630",
    "end": "2383980"
  },
  {
    "text": "we now have lots of minus ones and if we refresh here we'll see that the same",
    "start": "2383980",
    "end": "2395289"
  },
  {
    "text": "thing is is happening as before but if",
    "start": "2395289",
    "end": "2400990"
  },
  {
    "text": "we want to do something that's even more fun I've got this little thing here connected and I have just copied over",
    "start": "2400990",
    "end": "2411009"
  },
  {
    "text": "the same console app that I built on my machine and you can see here then I'm",
    "start": "2411009",
    "end": "2419950"
  },
  {
    "text": "just running it in mono and now it's",
    "start": "2419950",
    "end": "2425380"
  },
  {
    "text": "waiting for for things to be deployed to it so if we then remove and this time I",
    "start": "2425380",
    "end": "2436029"
  },
  {
    "text": "will remember to check out the right branch",
    "start": "2436029",
    "end": "2439650"
  },
  {
    "text": "[Music] and start things again you will then see",
    "start": "2456170",
    "end": "2465920"
  },
  {
    "text": "takes a little while now the message or the actor has now been deployed to the raspberry pi and that could of course be",
    "start": "2471150",
    "end": "2478080"
  },
  {
    "text": "any machine anywhere in the world and the system is still doing its thing we",
    "start": "2478080",
    "end": "2484740"
  },
  {
    "text": "can refresh it and watch it compute and",
    "start": "2484740",
    "end": "2490400"
  },
  {
    "text": "as soon as we can see the minus one here it will supervise and restart and",
    "start": "2490400",
    "end": "2499130"
  },
  {
    "text": "recover just as it was doing before",
    "start": "2499130",
    "end": "2502970"
  },
  {
    "text": "so that more or less concludes the demo so what",
    "start": "2524150",
    "end": "2531110"
  },
  {
    "text": "we learnt that we can use a system or and we can create an actor/model that is",
    "start": "2531110",
    "end": "2538460"
  },
  {
    "text": "distributed over different machines and it is very useful for making processing",
    "start": "2538460",
    "end": "2544520"
  },
  {
    "text": "pipelines so you have messages in you need to process them somehow send the",
    "start": "2544520",
    "end": "2549710"
  },
  {
    "text": "result on and it lends itself well to scaling both vertically and horizontally",
    "start": "2549710",
    "end": "2556090"
  },
  {
    "text": "or you can deploy many actors horizontally or you can deploy to a",
    "start": "2556090",
    "end": "2561170"
  },
  {
    "text": "machine that has more oops we make systems that can stay available even",
    "start": "2561170",
    "end": "2567290"
  },
  {
    "text": "though things go wrong and yeah there are some resources here the Gita",
    "start": "2567290",
    "end": "2573370"
  },
  {
    "text": "is really really good the core contributors are active there and there",
    "start": "2573370",
    "end": "2580370"
  },
  {
    "text": "is a good free bootcamp on Peter bridge comm which is the company that actively",
    "start": "2580370",
    "end": "2585980"
  },
  {
    "text": "supports hacker and then I'm not even going to try and pronounce that name",
    "start": "2585980",
    "end": "2591740"
  },
  {
    "text": "I'll just butcher it but he has a very very good blog on Acker with both",
    "start": "2591740",
    "end": "2596900"
  },
  {
    "text": "examples in c-sharp and in F sharp and then there are also some nice Pluralsight courses so it's",
    "start": "2596900",
    "end": "2603740"
  },
  {
    "text": "pretty much it any questions",
    "start": "2603740",
    "end": "2607480"
  }
]