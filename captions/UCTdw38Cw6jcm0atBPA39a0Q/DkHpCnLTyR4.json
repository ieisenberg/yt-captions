[
  {
    "text": "my name is Aaron harvat today I will show you a few tricks coding tricks with",
    "start": "2820",
    "end": "9420"
  },
  {
    "text": "the that are using the latest c-sharp syntax switch means c-sharp version 7 8 9 10. the uh",
    "start": "9420",
    "end": "19320"
  },
  {
    "text": "if you followed the new pieces of syntax you must have noticed that there is a",
    "start": "19320",
    "end": "25380"
  },
  {
    "text": "steady stream of functional syntactical construct in c-sharp that are being",
    "start": "25380",
    "end": "31800"
  },
  {
    "text": "added and improved version to version so now we have a very powerful language in",
    "start": "31800",
    "end": "40079"
  },
  {
    "text": "which we can freely mix paradigms and that is what I will show you today not",
    "start": "40079",
    "end": "45960"
  },
  {
    "text": "not exactly the syntax but the Mind process the",
    "start": "45960",
    "end": "51020"
  },
  {
    "text": "designing and coding process that is mixing functional modeling with object",
    "start": "51020",
    "end": "56879"
  },
  {
    "text": "oriented modeling with the a touch of procedural when needed so that you can",
    "start": "56879",
    "end": "63660"
  },
  {
    "text": "write code quickly and make powerful and",
    "start": "63660",
    "end": "68820"
  },
  {
    "text": "flexible designs that is what what new c-sharp additions are letting us do",
    "start": "68820",
    "end": "78500"
  },
  {
    "text": "you can download source code there will be a bit of source codes to to read if you",
    "start": "79140",
    "end": "85320"
  },
  {
    "text": "like this is the address and while it take a photo of this code",
    "start": "85320",
    "end": "93920"
  },
  {
    "text": "these are all the slides I I prepared for you sorry for this everything else",
    "start": "93920",
    "end": "99240"
  },
  {
    "text": "will be called",
    "start": "99240",
    "end": "101840"
  },
  {
    "text": "foreign",
    "start": "104340",
    "end": "107060"
  },
  {
    "text": "I will be demonstrating designing with C sharp and if you want",
    "start": "110520",
    "end": "116640"
  },
  {
    "text": "to show off a language feature or a bunch of them what you normally do is is",
    "start": "116640",
    "end": "122280"
  },
  {
    "text": "not to take a business application because everybody would fall asleep by the end of this demo and half of the",
    "start": "122280",
    "end": "129899"
  },
  {
    "text": "demo would take introducing you to whatever business I I had in mind for",
    "start": "129899",
    "end": "135599"
  },
  {
    "text": "demonstration purposes when you want to show the language the best way to do that is I found is to is to use a",
    "start": "135599",
    "end": "144300"
  },
  {
    "text": "board game any board game because everybody understand them and the trick with this",
    "start": "144300",
    "end": "150239"
  },
  {
    "text": "approach is that if you ever wanted to uh to program a board game you would not",
    "start": "150239",
    "end": "156900"
  },
  {
    "text": "do it the way I will show you here but anyway that will show you the power",
    "start": "156900",
    "end": "162360"
  },
  {
    "text": "of C sharp features that we have today",
    "start": "162360",
    "end": "168480"
  },
  {
    "text": "this is the view component of a",
    "start": "168480",
    "end": "174560"
  },
  {
    "text": "Blazer webassembly application you don't need to to know any of those but it",
    "start": "174560",
    "end": "179700"
  },
  {
    "text": "would probably amuse you to see what they can do in only a few lines of code",
    "start": "179700",
    "end": "185120"
  },
  {
    "text": "if you haven't had the opportunity to work with them anyway uh what you saw in",
    "start": "185120",
    "end": "192360"
  },
  {
    "text": "this board are UI elements that will need to have a backing model these axes and O's and you",
    "start": "192360",
    "end": "201120"
  },
  {
    "text": "will see these two bluish",
    "start": "201120",
    "end": "205140"
  },
  {
    "text": "cells that can be clicked they shouldn't be a here present but I have added them",
    "start": "207260",
    "end": "213420"
  },
  {
    "text": "for you to see so that is the third element and we have a line we have four elements that need to be modeled in the",
    "start": "213420",
    "end": "220440"
  },
  {
    "text": "backing code so this is the home and the way cell",
    "start": "220440",
    "end": "226019"
  },
  {
    "text": "component we will need the row and column where to draw them",
    "start": "226019",
    "end": "231080"
  },
  {
    "text": "then the winning line where to draw from and two four parameters and those blue",
    "start": "231080",
    "end": "239040"
  },
  {
    "text": "cells that are clickable they have a Lambda what to do when somebody clicks them",
    "start": "239040",
    "end": "244379"
  },
  {
    "text": "so we need a backing model which does all this I have just removed those",
    "start": "244379",
    "end": "250799"
  },
  {
    "text": "clickable cells because the game is over and nothing should be clicked we need something that will generate UI",
    "start": "250799",
    "end": "258000"
  },
  {
    "text": "code like this and then how do we do that this is the backing model the board that",
    "start": "258000",
    "end": "264780"
  },
  {
    "text": "will do all this and allow us to play the game",
    "start": "264780",
    "end": "270419"
  },
  {
    "text": "and this is the UI backing code this is effectively The",
    "start": "270419",
    "end": "276960"
  },
  {
    "text": "View model which will hold a reference to the board model and do things to that display it",
    "start": "276960",
    "end": "284639"
  },
  {
    "text": "that is where webassembly will take over and simply display all the changes we",
    "start": "284639",
    "end": "290699"
  },
  {
    "text": "make to the board on the screen but we also need commands to restart the game and to make a move",
    "start": "290699",
    "end": "297600"
  },
  {
    "text": "so how do we implement this backing model",
    "start": "297600",
    "end": "304038"
  },
  {
    "text": "the Crux of this presentation will be on designing on a designing method which is",
    "start": "304680",
    "end": "313259"
  },
  {
    "text": "trying to quickly prototype a domain model",
    "start": "313259",
    "end": "319380"
  },
  {
    "text": "you need a quick prototype to see that everything works that everything you had in mind",
    "start": "319380",
    "end": "326340"
  },
  {
    "text": "can be done that it can be tied to that view model seen on the screen",
    "start": "326340",
    "end": "333060"
  },
  {
    "text": "and when I do quick prototyping and I do it all the time",
    "start": "333060",
    "end": "340580"
  },
  {
    "text": "I constantly use tuples which have been around for",
    "start": "340620",
    "end": "346320"
  },
  {
    "text": "quite a few years already you can organize your data into tuples So to",
    "start": "346320",
    "end": "353460"
  },
  {
    "text": "avoid into introducing new classes one problem we have you know strongly",
    "start": "353460",
    "end": "359880"
  },
  {
    "text": "typed languages is proliferation of classes in a normal project we would",
    "start": "359880",
    "end": "365520"
  },
  {
    "text": "have thousands of classes and on every 1000 classes maybe 800 of them will be",
    "start": "365520",
    "end": "372360"
  },
  {
    "text": "this large and when you start designing a model you",
    "start": "372360",
    "end": "377819"
  },
  {
    "text": "you don't want to design I don't know five or ten classes just to show those four elements on the screen use tuples",
    "start": "377819",
    "end": "385259"
  },
  {
    "text": "and draw them here in the view model or in the view",
    "start": "385259",
    "end": "390300"
  },
  {
    "text": "that is look what I can do",
    "start": "390300",
    "end": "395120"
  },
  {
    "text": "I can iterate through variable variables of type Tuple",
    "start": "395520",
    "end": "404340"
  },
  {
    "text": "home and then reference home.rowhome.com do you know how it is",
    "start": "404340",
    "end": "409800"
  },
  {
    "text": "row and call symbols are resolved when you assign a variable or return a",
    "start": "409800",
    "end": "417240"
  },
  {
    "text": "value that is a tuple Tuple is",
    "start": "417240",
    "end": "423180"
  },
  {
    "text": "very close to a read-only array",
    "start": "423180",
    "end": "429780"
  },
  {
    "text": "it has it is implementing i2uple interface which is only giving you the",
    "start": "429780",
    "end": "436020"
  },
  {
    "text": "indexer and the count nothing more and the the information about names is lost",
    "start": "436020",
    "end": "441660"
  },
  {
    "text": "in the process so how does the compiler know component",
    "start": "441660",
    "end": "446759"
  },
  {
    "text": "names later it knows no those through metadata whenever you assign a variable",
    "start": "446759",
    "end": "453060"
  },
  {
    "text": "or return a value that is Tuple metadata remember the names of its components",
    "start": "453060",
    "end": "460979"
  },
  {
    "text": "and so you can refer back to them but you don't have to assign any",
    "start": "460979",
    "end": "466620"
  },
  {
    "text": "variable you can use what is called Tuple",
    "start": "466620",
    "end": "471860"
  },
  {
    "text": "deconstruction you can assign a tuple",
    "start": "471860",
    "end": "477660"
  },
  {
    "text": "into something that looks like a tuple but it's effectively two variables two separate variables that have been uh",
    "start": "477660",
    "end": "485099"
  },
  {
    "text": "declared and assigned in this line so in the line below you don't need anything",
    "start": "485099",
    "end": "491160"
  },
  {
    "text": "from dot anything you know you just have two variables low and calm and",
    "start": "491160",
    "end": "499139"
  },
  {
    "text": "if you want to spare yourself some three four four",
    "start": "499139",
    "end": "504960"
  },
  {
    "text": "letters you can use their keyword in front of the Tuple and again both",
    "start": "504960",
    "end": "511680"
  },
  {
    "text": "variables will be declared and set in every iteration",
    "start": "511680",
    "end": "517760"
  },
  {
    "text": "then this is not where",
    "start": "518099",
    "end": "523560"
  },
  {
    "text": "the construction into tuple's ends anything that can be deconstructed into",
    "start": "523560",
    "end": "529800"
  },
  {
    "text": "a tuple can be used as a source for multiple variables that you can",
    "start": "529800",
    "end": "536700"
  },
  {
    "text": "assign then and we will meet the constructors in in just a minute",
    "start": "536700",
    "end": "543079"
  },
  {
    "text": "also notice what I told you I have named components row and call",
    "start": "544320",
    "end": "550140"
  },
  {
    "text": "here and row and column here those two are separate so you can assign to whatever you need over there and produce",
    "start": "550140",
    "end": "558360"
  },
  {
    "text": "whatever you can over here and those two things will work very well",
    "start": "558360",
    "end": "563880"
  },
  {
    "text": "okay I'll do the same for away moves add a",
    "start": "563880",
    "end": "570420"
  },
  {
    "text": "a loop and then",
    "start": "570420",
    "end": "574040"
  },
  {
    "text": "by the way I have started",
    "start": "576660",
    "end": "580699"
  },
  {
    "text": "uh dot net watch run so that whenever I save",
    "start": "581779",
    "end": "587519"
  },
  {
    "text": "code this page will refresh which didn't happen yet",
    "start": "587519",
    "end": "593339"
  },
  {
    "text": "or I missed something maybe I missed it so whatever we add to code will uh in",
    "start": "593339",
    "end": "599339"
  },
  {
    "text": "only a few seconds show up in in the browser as well so",
    "start": "599339",
    "end": "605480"
  },
  {
    "text": "the next thing is this look at this I will have to de-zoom a little",
    "start": "607260",
    "end": "615540"
  },
  {
    "text": "can you see this code this is very important part",
    "start": "615540",
    "end": "621320"
  },
  {
    "text": "multi-level Tuple deconstruction you can deconstruct a tuple of tuples",
    "start": "621320",
    "end": "628980"
  },
  {
    "text": "if that's what you like and it will work because any component can also be a",
    "start": "628980",
    "end": "635880"
  },
  {
    "text": "tuple recursively and the result of assigning this Tuple of tuples is the appearance",
    "start": "635880",
    "end": "643980"
  },
  {
    "text": "of four independent variables that I can use inside the loop",
    "start": "643980",
    "end": "649820"
  },
  {
    "text": "and back here I will have to the zoom again",
    "start": "651839",
    "end": "660320"
  },
  {
    "text": "now look at this terrible terrible signature an eye innumerable of tuples of tuples",
    "start": "662040",
    "end": "669959"
  },
  {
    "text": "now this is the result of quick prototyping uh when you start using tuples and Funk",
    "start": "669959",
    "end": "677700"
  },
  {
    "text": "delegates to write let's say for the first time this is the",
    "start": "677700",
    "end": "682740"
  },
  {
    "text": "functional piece of code to write functional code",
    "start": "682740",
    "end": "687560"
  },
  {
    "text": "ugliness will sneak in very quickly your code will start to inflate in signatures",
    "start": "689339",
    "end": "699260"
  },
  {
    "text": "and all that for the sake of shrinking on a number of classes so you",
    "start": "699720",
    "end": "706440"
  },
  {
    "text": "have to think which one of those goals is is more important to you in the quick prototyping phase I",
    "start": "706440",
    "end": "714300"
  },
  {
    "text": "normally sustain this I say all right I will survive this 80 characters of a",
    "start": "714300",
    "end": "721380"
  },
  {
    "text": "declaration of a single variable I'll survive that but later",
    "start": "721380",
    "end": "727019"
  },
  {
    "text": "I will surely add a class which wraps these four variables in into an object",
    "start": "727019",
    "end": "733500"
  },
  {
    "text": "so to reduce the size of this signature",
    "start": "733500",
    "end": "738600"
  },
  {
    "text": "anyway uh this will work",
    "start": "738600",
    "end": "745500"
  },
  {
    "text": "if you observed there was a compile time error at the end of this line but now",
    "start": "745500",
    "end": "750779"
  },
  {
    "text": "it's gone everything compiles fine which means that the multi-level deconstruction of tuples works well and compiler knows",
    "start": "750779",
    "end": "758760"
  },
  {
    "text": "very well what I meant with this code",
    "start": "758760",
    "end": "763880"
  },
  {
    "text": "Plus playable cells",
    "start": "765000",
    "end": "769399"
  },
  {
    "text": "there will be none there will be an empty sequence of those so right now",
    "start": "770040",
    "end": "775260"
  },
  {
    "text": "we have",
    "start": "775260",
    "end": "778339"
  },
  {
    "text": "a complete here is the UI which is simply drawing those clickable cells tying them with",
    "start": "780480",
    "end": "786959"
  },
  {
    "text": "that Lambda that makes a move we have an entire query model",
    "start": "786959",
    "end": "792959"
  },
  {
    "text": "in only 20 lines of code I've I have covered all the queries",
    "start": "792959",
    "end": "798899"
  },
  {
    "text": "for the UI without defining any class except the",
    "start": "798899",
    "end": "804420"
  },
  {
    "text": "the core model class we can add",
    "start": "804420",
    "end": "810240"
  },
  {
    "text": "commands now and already as I said it there is a clear separation between uh",
    "start": "810240",
    "end": "817740"
  },
  {
    "text": "queries and commands in this model if you want to",
    "start": "817740",
    "end": "823639"
  },
  {
    "text": "design functional models which are quick to design and they will save you a",
    "start": "823820",
    "end": "831899"
  },
  {
    "text": "lot of troubles later then you will probably wish to separate",
    "start": "831899",
    "end": "837540"
  },
  {
    "text": "queries which turn out to be just Expressions that calculate the result",
    "start": "837540",
    "end": "842699"
  },
  {
    "text": "from from the backing state from commands which will in fact return a new",
    "start": "842699",
    "end": "848880"
  },
  {
    "text": "instance of the model so right now we are all the way into into functional design",
    "start": "848880",
    "end": "857100"
  },
  {
    "text": "how many of you are acquainted with the functional design",
    "start": "857100",
    "end": "862920"
  },
  {
    "text": "one two and a half two and a half well uh what I'm trying",
    "start": "862920",
    "end": "869160"
  },
  {
    "text": "to show you here is how how easy it is to design a class which is separating",
    "start": "869160",
    "end": "877339"
  },
  {
    "text": "Expressions that return values from the backing state so that nobody knows what",
    "start": "877339",
    "end": "882480"
  },
  {
    "text": "that backing state is and currently I don't even have a backend state from commands that you are issuing and all",
    "start": "882480",
    "end": "890040"
  },
  {
    "text": "those commands must correspond to some action that triggers them like there are",
    "start": "890040",
    "end": "897360"
  },
  {
    "text": "buttons on the screen to play on this or on that position or to restart the game",
    "start": "897360",
    "end": "902940"
  },
  {
    "text": "or to initially load it this is the initial loading of the game there will",
    "start": "902940",
    "end": "907980"
  },
  {
    "text": "be uh restart of the game and making the move",
    "start": "907980",
    "end": "914399"
  },
  {
    "text": "those are the actions that we do on our on our Board model so here I will just",
    "start": "914399",
    "end": "922079"
  },
  {
    "text": "expose a static initialize method which is hiding away the construction which",
    "start": "922079",
    "end": "927540"
  },
  {
    "text": "currently has nothing to do and",
    "start": "927540",
    "end": "931759"
  },
  {
    "text": "these are the restart and make move actions on the UI which must have",
    "start": "933300",
    "end": "938519"
  },
  {
    "text": "something that corresponds to them in the model and functional design is to make the board immutable and when",
    "start": "938519",
    "end": "948300"
  },
  {
    "text": "restarting just create a new board that is sufficient in this situation and",
    "start": "948300",
    "end": "956579"
  },
  {
    "text": "playing would also create a new board right now I don't have any implementation for playing the moves but",
    "start": "956579",
    "end": "963720"
  },
  {
    "text": "I will add them in the prototyping phase I will say whatever somebody clicked on the screen",
    "start": "963720",
    "end": "969959"
  },
  {
    "text": "let's do nothing just avoid throwing exceptions and things like that and we",
    "start": "969959",
    "end": "976680"
  },
  {
    "text": "have an empty prototype for a class which allows all queries and",
    "start": "976680",
    "end": "982500"
  },
  {
    "text": "all commands for the tic-tac-toe game played on on the screen",
    "start": "982500",
    "end": "988579"
  },
  {
    "text": "these this is the view model it will initialize using the static Constructor",
    "start": "990660",
    "end": "997079"
  },
  {
    "text": "it will restart the board by setting the new board in the UI so this is the view",
    "start": "997079",
    "end": "1005420"
  },
  {
    "text": "model it is mutable but the domain model is immutable",
    "start": "1005420",
    "end": "1012560"
  },
  {
    "text": "I may say I am at that disappointed that there are so few of you who are using uh",
    "start": "1012560",
    "end": "1021199"
  },
  {
    "text": "functional modeling in the domain I think at least that you should investigate that and read a bit because",
    "start": "1021199",
    "end": "1029058"
  },
  {
    "text": "when applied to more complex applications than this toy",
    "start": "1029059",
    "end": "1035798"
  },
  {
    "text": "they pay back a lot they are making many typical",
    "start": "1035799",
    "end": "1044260"
  },
  {
    "text": "mistakes impossible many typical bugs cannot even be made",
    "start": "1044260",
    "end": "1050900"
  },
  {
    "text": "and I have uh if I don't forget I will give you a",
    "start": "1050900",
    "end": "1057860"
  },
  {
    "text": "hint what can be done with a with an immutable domain model in this toy demo",
    "start": "1057860",
    "end": "1065120"
  },
  {
    "text": "that can be done with mutable uh",
    "start": "1065120",
    "end": "1070400"
  },
  {
    "text": "implementation of this same board but with codes that is this large and",
    "start": "1070400",
    "end": "1076340"
  },
  {
    "text": "requires hours of debugging and it is like three minutes of coding with immutable uh domain model",
    "start": "1076340",
    "end": "1085640"
  },
  {
    "text": "making a move will delegate to the play method that observe every method is",
    "start": "1085640",
    "end": "1091700"
  },
  {
    "text": "returning a new board object and UI is the only mutable component here",
    "start": "1091700",
    "end": "1097820"
  },
  {
    "text": "so this completes the entire prototype",
    "start": "1097820",
    "end": "1105340"
  },
  {
    "text": "if you watched me work on a business application I would do the same thing",
    "start": "1106039",
    "end": "1111799"
  },
  {
    "text": "really because it is so simple and it lets me see the effects of my",
    "start": "1111799",
    "end": "1119059"
  },
  {
    "text": "actions on the screen I have saved everything this should be",
    "start": "1119059",
    "end": "1125360"
  },
  {
    "text": "this is not refreshed what is this yes the blue squares are",
    "start": "1125360",
    "end": "1133120"
  },
  {
    "text": "the blue squares are away because the game is over they should not appear and",
    "start": "1134299",
    "end": "1139460"
  },
  {
    "text": "they are not appearing so my prototype is currently working fine",
    "start": "1139460",
    "end": "1144740"
  },
  {
    "text": "and now comes the second phase where we discover the new classes so that we can",
    "start": "1144740",
    "end": "1151820"
  },
  {
    "text": "enhance our domain model so the result is the immutable class",
    "start": "1151820",
    "end": "1158080"
  },
  {
    "text": "which is using sequences in tuples which are 100",
    "start": "1158080",
    "end": "1164260"
  },
  {
    "text": "functional programming uh artifacts",
    "start": "1164260",
    "end": "1169760"
  },
  {
    "text": "everything I use here is functional and still the whole application is object",
    "start": "1169760",
    "end": "1175340"
  },
  {
    "text": "oriented clearly because it's using the object-oriented view model over there that is consuming a functional domain",
    "start": "1175340",
    "end": "1182240"
  },
  {
    "text": "model from from this place let's start introducing classes then",
    "start": "1182240",
    "end": "1189620"
  },
  {
    "text": "we see the drawing column always uh operate together",
    "start": "1189620",
    "end": "1195740"
  },
  {
    "text": "how many of you have used record types so far",
    "start": "1195740",
    "end": "1200740"
  },
  {
    "text": "two so from 2.5 we are down to two record types are an excellent tool and",
    "start": "1202100",
    "end": "1210500"
  },
  {
    "text": "you will see instead of saying a class you would say a record uh record is",
    "start": "1210500",
    "end": "1217179"
  },
  {
    "text": "implementing value typed equality for us and it is implementing",
    "start": "1217179",
    "end": "1223760"
  },
  {
    "text": "properties for us you will see that in just a minute",
    "start": "1223760",
    "end": "1230659"
  },
  {
    "text": "so instead of using a tuple you would probably choose to use an object of a",
    "start": "1230659",
    "end": "1235880"
  },
  {
    "text": "class which at least carries strong typing requirements so uh",
    "start": "1235880",
    "end": "1242480"
  },
  {
    "text": "tuples are have the same problem as Funk delegates in C sharp and actions uh you",
    "start": "1242480",
    "end": "1249080"
  },
  {
    "text": "can assign them to anything that corresponds to the same signature which means that you can for example in",
    "start": "1249080",
    "end": "1256640"
  },
  {
    "text": "in this game you can make a terrible mistake by assigning X Y coordinates to",
    "start": "1256640",
    "end": "1262220"
  },
  {
    "text": "row and column coordinates the problem in that is that X and Y should be",
    "start": "1262220",
    "end": "1268299"
  },
  {
    "text": "switched you know and that is a bug if you forget to do that and if you do",
    "start": "1268299",
    "end": "1274820"
  },
  {
    "text": "forget to do that compiler is not going to see it for you a tuple assignment and fund delegate",
    "start": "1274820",
    "end": "1281480"
  },
  {
    "text": "assignment and action uh delegate assignment except anything that satisfies the the signature",
    "start": "1281480",
    "end": "1290179"
  },
  {
    "text": "and we already have a strongly typed language C sharp which has a static code analysis",
    "start": "1290179",
    "end": "1298000"
  },
  {
    "text": "the best one that exists a compiler and we should use that power",
    "start": "1298000",
    "end": "1304940"
  },
  {
    "text": "after the prototyping phase to introduce strong names that is classes to Concepts",
    "start": "1304940",
    "end": "1311240"
  },
  {
    "text": "that will control assignment for us and let us avoid bugs but now I have a",
    "start": "1311240",
    "end": "1318440"
  },
  {
    "text": "problem I cannot create a in this prototype and still showing a",
    "start": "1318440",
    "end": "1324520"
  },
  {
    "text": "displaying a fixed content on this on the screen but I cannot do that uh here",
    "start": "1324520",
    "end": "1329600"
  },
  {
    "text": "because I cannot assign tuples to cells",
    "start": "1329600",
    "end": "1334120"
  },
  {
    "text": "there's another concept that can help us",
    "start": "1334820",
    "end": "1340220"
  },
  {
    "text": "how many of you recognize distinction between subclassing and subtyping",
    "start": "1340220",
    "end": "1348400"
  },
  {
    "text": "this is a trick question foreign",
    "start": "1350900",
    "end": "1357580"
  },
  {
    "text": "and even if you implement an interface they are but look at this if you",
    "start": "1362480",
    "end": "1369679"
  },
  {
    "text": "for example Define an implicit or explicit operator",
    "start": "1369679",
    "end": "1375640"
  },
  {
    "text": "then you can turn you can turn a tuple",
    "start": "1375980",
    "end": "1382400"
  },
  {
    "text": "into an object of a class and then what is",
    "start": "1382400",
    "end": "1388460"
  },
  {
    "text": "the subtyping relationship between tuples and this class if you can assign",
    "start": "1388460",
    "end": "1395960"
  },
  {
    "text": "a tuple of two integers to sell it means the Tuple of three integers is a subtype of",
    "start": "1395960",
    "end": "1403940"
  },
  {
    "text": "cell right subtyping is a set",
    "start": "1403940",
    "end": "1410840"
  },
  {
    "text": "relationship when talking about types types will",
    "start": "1410840",
    "end": "1415940"
  },
  {
    "text": "Define a set of objects of that type",
    "start": "1415940",
    "end": "1421779"
  },
  {
    "text": "and then a subtype is a subset of that set",
    "start": "1421840",
    "end": "1427520"
  },
  {
    "text": "so subtype are special objects that are also uh part of that larger type",
    "start": "1427520",
    "end": "1436059"
  },
  {
    "text": "subclassing is subtyping obviously",
    "start": "1436059",
    "end": "1441200"
  },
  {
    "text": "but subclassing is more about",
    "start": "1441200",
    "end": "1446679"
  },
  {
    "text": "inheritance and I like to say that subclassing is an inheritance relationship and I'm not",
    "start": "1447559",
    "end": "1454520"
  },
  {
    "text": "sure that I invented that sentence and subtyping is a set relationship",
    "start": "1454520",
    "end": "1461419"
  },
  {
    "text": "and I like to think in terms of types because",
    "start": "1461419",
    "end": "1467960"
  },
  {
    "text": "I tend to avoid inheritance",
    "start": "1467960",
    "end": "1473779"
  },
  {
    "text": "because when you inherit implementation that's it that's what you get",
    "start": "1474260",
    "end": "1480200"
  },
  {
    "text": "it is much easier for you to use behavior that you need as a component",
    "start": "1480200",
    "end": "1486559"
  },
  {
    "text": "and that is that old principle favor object composition over class",
    "start": "1486559",
    "end": "1491659"
  },
  {
    "text": "inheritance you can always you can always pack a few components of",
    "start": "1491659",
    "end": "1499100"
  },
  {
    "text": "certain types and those types can Implement certain interfaces so that you can pick concrete classes which you will",
    "start": "1499100",
    "end": "1506720"
  },
  {
    "text": "use to to construct an object at the runtime with subclassing you cannot do that it",
    "start": "1506720",
    "end": "1514279"
  },
  {
    "text": "is fixed at compile time and you cannot change the structure of of a class",
    "start": "1514279",
    "end": "1520760"
  },
  {
    "text": "so this was a long uh piece of talk about types but",
    "start": "1520760",
    "end": "1527840"
  },
  {
    "text": "implicit operators are a typical syntactic syntax that helps you",
    "start": "1527840",
    "end": "1535460"
  },
  {
    "text": "implement subtyping without subclassing",
    "start": "1535460",
    "end": "1542299"
  },
  {
    "text": "and you see this is compiling fine now and please don't do this in your code",
    "start": "1542299",
    "end": "1549559"
  },
  {
    "text": "this is very dangerous because now any Tuple of two integers is",
    "start": "1549559",
    "end": "1555440"
  },
  {
    "text": "assignable to sell and it will silently convert to cell and",
    "start": "1555440",
    "end": "1561200"
  },
  {
    "text": "you might not be aware of that I have seen a library",
    "start": "1561200",
    "end": "1566559"
  },
  {
    "text": "that that had to do with some networking which",
    "start": "1566559",
    "end": "1572960"
  },
  {
    "text": "had an implicit conversion to string which was not to string but an implicit",
    "start": "1572960",
    "end": "1579919"
  },
  {
    "text": "operator because they wanted to push anything Through the Wire",
    "start": "1579919",
    "end": "1585679"
  },
  {
    "text": "and what happened in one place was that somehow I cannot",
    "start": "1585679",
    "end": "1593120"
  },
  {
    "text": "now I cannot remember the exact code what happened but somehow tostring was",
    "start": "1593120",
    "end": "1598220"
  },
  {
    "text": "invoked and the element which expected string coming",
    "start": "1598220",
    "end": "1604159"
  },
  {
    "text": "from an implicit operator which did the whole bunch of",
    "start": "1604159",
    "end": "1610299"
  },
  {
    "text": "constructed the entire message from an object now it",
    "start": "1610299",
    "end": "1616340"
  },
  {
    "text": "was just the name of the type and the software uh broke down and they",
    "start": "1616340",
    "end": "1624919"
  },
  {
    "text": "they were looking for bug for about two days",
    "start": "1624919",
    "end": "1630559"
  },
  {
    "text": "because nobody knew that tostring was invoked and nobody even knew that there",
    "start": "1630559",
    "end": "1635659"
  },
  {
    "text": "is an implicit to string operator so",
    "start": "1635659",
    "end": "1640820"
  },
  {
    "text": "be very careful about feature like this I am using a feature",
    "start": "1640820",
    "end": "1647059"
  },
  {
    "text": "like this in testing where as you can witness it takes no time to construct a testing",
    "start": "1647059",
    "end": "1655700"
  },
  {
    "text": "set for example but since you cannot Define an operator in a piece of code which",
    "start": "1655700",
    "end": "1663020"
  },
  {
    "text": "does not belong to either of these two types you cannot create a third type and",
    "start": "1663020",
    "end": "1669620"
  },
  {
    "text": "Define this implicit operator on that one I'm usually doing the same thing using",
    "start": "1669620",
    "end": "1677080"
  },
  {
    "text": "an extension method like to sell which is applied to the Tuple",
    "start": "1677080",
    "end": "1682520"
  },
  {
    "text": "and then again if you tried functional programming with c-sharp if",
    "start": "1682520",
    "end": "1691220"
  },
  {
    "text": "you gave it a try you would see that that many operations there are implemented as extension methods that",
    "start": "1691220",
    "end": "1698179"
  },
  {
    "text": "are applied to a certain type and that technique which I am",
    "start": "1698179",
    "end": "1703880"
  },
  {
    "text": "intensively using in testing but not in in production code is again making my code very readable very short and",
    "start": "1703880",
    "end": "1711080"
  },
  {
    "text": "effective so I can make a sequence of tuples and then say just convert this to",
    "start": "1711080",
    "end": "1716600"
  },
  {
    "text": "cells and I have a test case and now comes",
    "start": "1716600",
    "end": "1723860"
  },
  {
    "text": "the trick question why does this compile",
    "start": "1723860",
    "end": "1728559"
  },
  {
    "text": "over here I have returned a sequence of cell objects",
    "start": "1730520",
    "end": "1736460"
  },
  {
    "text": "and over there I'm consuming a sequence of integer integer tools",
    "start": "1736460",
    "end": "1744760"
  },
  {
    "text": "yes because cell here is a record",
    "start": "1746539",
    "end": "1752000"
  },
  {
    "text": "and so we come to the question what the record type is",
    "start": "1752000",
    "end": "1757880"
  },
  {
    "text": "and why you should use it if I wanted to use a class",
    "start": "1757880",
    "end": "1764899"
  },
  {
    "text": "they would immediately appear a couple of compiled time errors",
    "start": "1764899",
    "end": "1771080"
  },
  {
    "text": "because for one thing I'm missing",
    "start": "1771080",
    "end": "1775778"
  },
  {
    "text": "properties record is declaring public read-only properties for us it is declaring a",
    "start": "1776539",
    "end": "1783980"
  },
  {
    "text": "public Constructor which accepts two components and sets those the properties in the order of appearance",
    "start": "1783980",
    "end": "1792519"
  },
  {
    "text": "then the other thing it implements I Equitable of cell",
    "start": "1792559",
    "end": "1799100"
  },
  {
    "text": "strongly typed I equal trouble you know that it is good if you need equality tests it is good to implement this",
    "start": "1799100",
    "end": "1805940"
  },
  {
    "text": "interface because it is uh avoiding uh type check",
    "start": "1805940",
    "end": "1812960"
  },
  {
    "text": "the general equals from a system.object is accepting",
    "start": "1812960",
    "end": "1819200"
  },
  {
    "text": "an object and then it must check its type so it has a get hash code this is",
    "start": "1819200",
    "end": "1826279"
  },
  {
    "text": "fairly new hash code static class with combine static method",
    "start": "1826279",
    "end": "1833419"
  },
  {
    "text": "how many of you have been using this in practice how many of you won so we are down to",
    "start": "1833419",
    "end": "1840860"
  },
  {
    "text": "one",
    "start": "1840860",
    "end": "1843220"
  },
  {
    "text": "and how many of you had the opportunity to implement to override getcash code",
    "start": "1846200",
    "end": "1852740"
  },
  {
    "text": "in practice I suppose many yes at least half of you",
    "start": "1852740",
    "end": "1858620"
  },
  {
    "text": "so this is common and you know about",
    "start": "1858620",
    "end": "1864220"
  },
  {
    "text": "xoring about multiplying integers by 17",
    "start": "1864220",
    "end": "1870039"
  },
  {
    "text": "removing overflow checks and things like that forget that start using this",
    "start": "1870039",
    "end": "1878360"
  },
  {
    "text": "because this this static method is doing that",
    "start": "1878360",
    "end": "1885279"
  },
  {
    "text": "better than any of us here can do in most occasions they know what they're",
    "start": "1885279",
    "end": "1891320"
  },
  {
    "text": "doing I for example have no idea what I'm doing when I create my own hash",
    "start": "1891320",
    "end": "1896779"
  },
  {
    "text": "functions then what does the record do it",
    "start": "1896779",
    "end": "1903200"
  },
  {
    "text": "implements General equals and it implements strongly typed equals",
    "start": "1903200",
    "end": "1910820"
  },
  {
    "text": "in C sharp 10 you can",
    "start": "1910820",
    "end": "1916880"
  },
  {
    "text": "create record structs",
    "start": "1916880",
    "end": "1924019"
  },
  {
    "text": "in C sharp nine and eight uh only reference types",
    "start": "1924019",
    "end": "1929799"
  },
  {
    "text": "records are supported when you declare a record struck",
    "start": "1929799",
    "end": "1935600"
  },
  {
    "text": "you will get something that is almost identical to a common struct because you know the struct also has value type",
    "start": "1935600",
    "end": "1942919"
  },
  {
    "text": "equality implemented but instructs it is implemented via",
    "start": "1942919",
    "end": "1948580"
  },
  {
    "text": "reflection which is slow and if you declared the same thing as",
    "start": "1948580",
    "end": "1955039"
  },
  {
    "text": "records fact compiler would jump in and generate specific members for you",
    "start": "1955039",
    "end": "1962659"
  },
  {
    "text": "which are as fast as one can get there's no faster method than that",
    "start": "1962659",
    "end": "1968779"
  },
  {
    "text": "so this is what record means except one thing if you notice",
    "start": "1968779",
    "end": "1977960"
  },
  {
    "text": "this should not compile yes there is a compile time error deconstruction into a",
    "start": "1977960",
    "end": "1983960"
  },
  {
    "text": "tuple does not work you must Implement your own",
    "start": "1983960",
    "end": "1989320"
  },
  {
    "text": "deconstructor in your custom class which is doing the opposite process from The",
    "start": "1989320",
    "end": "1996559"
  },
  {
    "text": "Constructor it uh it sets output variables",
    "start": "1996559",
    "end": "2003700"
  },
  {
    "text": "and now you have it all the constructors appeared a couple of years ago but I",
    "start": "2003700",
    "end": "2009220"
  },
  {
    "text": "actually never wrote a single deconstructor ever what I did",
    "start": "2009220",
    "end": "2016140"
  },
  {
    "text": "was to start records when they appeared and then to use this",
    "start": "2017080",
    "end": "2023440"
  },
  {
    "text": "because record is looking like a tuple but it has a name a class name so there",
    "start": "2023440",
    "end": "2029200"
  },
  {
    "text": "is no room for questions did I assign the",
    "start": "2029200",
    "end": "2034240"
  },
  {
    "text": "right thing yes if it compiles yes uh and it also has deconstruction",
    "start": "2034240",
    "end": "2041380"
  },
  {
    "text": "so that if I wanted to use it in a functional style like in UI",
    "start": "2041380",
    "end": "2049358"
  },
  {
    "text": "I don't want to bother with classes or anything and I just need drawing column I can do that as well",
    "start": "2049359",
    "end": "2056520"
  },
  {
    "text": "simply said okay this works now",
    "start": "2057820",
    "end": "2063579"
  },
  {
    "text": "all right all this code all this from line 5 to 33 that's some",
    "start": "2063579",
    "end": "2071200"
  },
  {
    "text": "27 8 lines of code no the two 31 25 lines of code is a word bracket",
    "start": "2071200",
    "end": "2079898"
  },
  {
    "text": "and that is the reason why you should use records yes",
    "start": "2079899",
    "end": "2086820"
  },
  {
    "text": "sorry yes it is immutable you can make it",
    "start": "2087159",
    "end": "2092320"
  },
  {
    "text": "mutable if you want uh I also think it has a",
    "start": "2092320",
    "end": "2098619"
  },
  {
    "text": "init settings so that you can initialize uh once with curly brackets",
    "start": "2098619",
    "end": "2106800"
  },
  {
    "text": "but not change later so it is uh immutable after Construction",
    "start": "2106800",
    "end": "2113400"
  },
  {
    "text": "so I can use the cell here nope",
    "start": "2115800",
    "end": "2122520"
  },
  {
    "text": "all right what about this a tuple of topos",
    "start": "2125020",
    "end": "2131320"
  },
  {
    "text": "let's define a class which is the line which has two components two cells line from and two cell",
    "start": "2131320",
    "end": "2140520"
  },
  {
    "text": "and you will see that line is also declared as a record",
    "start": "2143380",
    "end": "2149500"
  },
  {
    "text": "as well it has two components therefore it is decomposable into",
    "start": "2149500",
    "end": "2158440"
  },
  {
    "text": "a tuple of tuples here it is recursively decomposable deconstructable not decomposable",
    "start": "2158440",
    "end": "2167800"
  },
  {
    "text": "but then we have a problem in this design",
    "start": "2169240",
    "end": "2175380"
  },
  {
    "text": "cells are not really constrained except that I forgot to check bounce",
    "start": "2176220",
    "end": "2183160"
  },
  {
    "text": "but we can do that lines have a more strict constraint if",
    "start": "2183160",
    "end": "2190000"
  },
  {
    "text": "you look at the board you cannot draw a line which goes",
    "start": "2190000",
    "end": "2195700"
  },
  {
    "text": "from the bottom left corner to the middle cell that line is is invalid so",
    "start": "2195700",
    "end": "2203800"
  },
  {
    "text": "this is the example where we have where what record or what what a",
    "start": "2203800",
    "end": "2211000"
  },
  {
    "text": "compiler generates for us is not what we need",
    "start": "2211000",
    "end": "2216119"
  },
  {
    "text": "we need a custom Constructor even better I have a better idea we we",
    "start": "2216339",
    "end": "2222220"
  },
  {
    "text": "might introduce static Factory functions and hide the Constructor away",
    "start": "2222220",
    "end": "2229480"
  },
  {
    "text": "so that nobody can just generate a line no tell us what row column diagonal",
    "start": "2229480",
    "end": "2235839"
  },
  {
    "text": "anti-diagonal there are four kinds of them so we need effectively four distinct Constructors",
    "start": "2235839",
    "end": "2242200"
  },
  {
    "text": "what do you do with the record you are free to implement anything you",
    "start": "2242200",
    "end": "2248500"
  },
  {
    "text": "want from those standard elements of a class and still call it a record you see",
    "start": "2248500",
    "end": "2254380"
  },
  {
    "text": "it is still a record compiler will notice your members and",
    "start": "2254380",
    "end": "2260140"
  },
  {
    "text": "just don't do anything about those however what I did here is to implement",
    "start": "2260140",
    "end": "2266200"
  },
  {
    "text": "a private Constructor and public deconstructor so you can always read but",
    "start": "2266200",
    "end": "2271480"
  },
  {
    "text": "you cannot write whatever you like in here please observe that there are no",
    "start": "2271480",
    "end": "2277720"
  },
  {
    "text": "exceptions anywhere here I'm plugging all the holes for invalid objects except",
    "start": "2277720",
    "end": "2283780"
  },
  {
    "text": "testing boundaries and I'm creating",
    "start": "2283780",
    "end": "2290380"
  },
  {
    "text": "a functional design which is uh which leaves no room for a Target I have",
    "start": "2290380",
    "end": "2298240"
  },
  {
    "text": "no other way to tell you this if you create this if you create classes",
    "start": "2298240",
    "end": "2303820"
  },
  {
    "text": "in this style there will be no place to plant a duck I had a colleague in in the office who",
    "start": "2303820",
    "end": "2311740"
  },
  {
    "text": "came one day said that his daughter asked him what he was doing so late at",
    "start": "2311740",
    "end": "2319000"
  },
  {
    "text": "work and he said I was I was removing bugs from code and she said why did you",
    "start": "2319000",
    "end": "2324160"
  },
  {
    "text": "put bugs there so that's the point functional design is",
    "start": "2324160",
    "end": "2329859"
  },
  {
    "text": "reducing bug count at least in my case from my experience by an order of",
    "start": "2329859",
    "end": "2336640"
  },
  {
    "text": "magnitude so back to records I had to implement",
    "start": "2336640",
    "end": "2343619"
  },
  {
    "text": "deconstructor because once I took over the Constructor compiler moves away and",
    "start": "2343619",
    "end": "2350560"
  },
  {
    "text": "says okay your job I don't know what properties you mean to expose",
    "start": "2350560",
    "end": "2357700"
  },
  {
    "text": "I have exposed properties I have initialized them in the Constructor so it's also my job to expose a",
    "start": "2357700",
    "end": "2363880"
  },
  {
    "text": "deconstructor however equality members and I Equitable offline",
    "start": "2363880",
    "end": "2372160"
  },
  {
    "text": "and everything is still generated by the compiler here",
    "start": "2372160",
    "end": "2378180"
  },
  {
    "text": "and then comes the Crux of this the Pinnacle of this design I want to have",
    "start": "2379599",
    "end": "2385300"
  },
  {
    "text": "static Factory functions for a row which is calculating correct values for all those",
    "start": "2385300",
    "end": "2394060"
  },
  {
    "text": "four variables then for the column then for the diagonal and anti-diagonal",
    "start": "2394060",
    "end": "2401859"
  },
  {
    "text": "to agree and complicated ones where you have plus minus one bug opportunity",
    "start": "2401859",
    "end": "2408819"
  },
  {
    "text": "so we have four static Factory functions as you can see you can add anything you",
    "start": "2408819",
    "end": "2415060"
  },
  {
    "text": "like into a record it is a class like any other you can add your own methods you can add methods that are calculating",
    "start": "2415060",
    "end": "2422500"
  },
  {
    "text": "something that are changing or not changing by creating uh a new record",
    "start": "2422500",
    "end": "2427660"
  },
  {
    "text": "object it is just a regular class into which compiler will inject some 20 30 lines of",
    "start": "2427660",
    "end": "2435700"
  },
  {
    "text": "code for you and so look at this",
    "start": "2435700",
    "end": "2442420"
  },
  {
    "text": "do you remember the Prototype look disgusting",
    "start": "2442420",
    "end": "2447520"
  },
  {
    "text": "nice that's the difference so you will use",
    "start": "2447520",
    "end": "2452740"
  },
  {
    "text": "all those syntactic elements functional syntactic",
    "start": "2452740",
    "end": "2457839"
  },
  {
    "text": "elements to prove that you're that your ideas work but after that before you commit and",
    "start": "2457839",
    "end": "2469240"
  },
  {
    "text": "head for the bar while your code is traveling towards production you'll",
    "start": "2469240",
    "end": "2474460"
  },
  {
    "text": "probably want to make sure that your classes are statically typed in the",
    "start": "2474460",
    "end": "2479800"
  },
  {
    "text": "verifiable you will introduce proper domain models for for all those tiny",
    "start": "2479800",
    "end": "2485920"
  },
  {
    "text": "elements that were missing okay",
    "start": "2485920",
    "end": "2491619"
  },
  {
    "text": "this still works there should be no compile time error",
    "start": "2491619",
    "end": "2497619"
  },
  {
    "text": "and I cannot use a mouse on this class no",
    "start": "2497619",
    "end": "2502900"
  },
  {
    "text": "okay no compile time error multi-level deconstruction works very",
    "start": "2502900",
    "end": "2508960"
  },
  {
    "text": "well even with your record classes",
    "start": "2508960",
    "end": "2515339"
  },
  {
    "text": "but now maybe I wanted to use proper domain",
    "start": "2516640",
    "end": "2521680"
  },
  {
    "text": "models here to avoid confusion in the UI again everything has assumed a strong",
    "start": "2521680",
    "end": "2528460"
  },
  {
    "text": "name that is Again verifiable by the compiler so you have",
    "start": "2528460",
    "end": "2534099"
  },
  {
    "text": "an opportunity to move your design in small steps and to improve it",
    "start": "2534099",
    "end": "2539680"
  },
  {
    "text": "but still all the time since the very beginning this is the same design I changed very little in the way it it",
    "start": "2539680",
    "end": "2546220"
  },
  {
    "text": "operates all right what about this",
    "start": "2546220",
    "end": "2553060"
  },
  {
    "text": "uh yes playable cells are in the board",
    "start": "2554099",
    "end": "2559300"
  },
  {
    "text": "playable cells are tuples my implicit operator is",
    "start": "2559300",
    "end": "2565359"
  },
  {
    "text": "has jumped in and this is the moment when I start",
    "start": "2565359",
    "end": "2570520"
  },
  {
    "text": "fearing for my safety because I'm not sure that I expected that to happen so",
    "start": "2570520",
    "end": "2576040"
  },
  {
    "text": "this is probably the moment when you will go to this prototype and tell all",
    "start": "2576040",
    "end": "2581800"
  },
  {
    "text": "right thank you very much and at least comment it out or delete it",
    "start": "2581800",
    "end": "2588280"
  },
  {
    "text": "yes but",
    "start": "2588280",
    "end": "2594160"
  },
  {
    "text": "in line what oh",
    "start": "2594160",
    "end": "2600640"
  },
  {
    "text": "I don't know and I'm not sure that I would like to have it I don't know I",
    "start": "2600640",
    "end": "2606819"
  },
  {
    "text": "mean that that means that um one thing is applied in in multiple places",
    "start": "2606819",
    "end": "2613680"
  },
  {
    "text": "yes but uh I mean I would prefer uh an",
    "start": "2618960",
    "end": "2624099"
  },
  {
    "text": "extension method or an explicit operator in place of uh that so that all those",
    "start": "2624099",
    "end": "2630280"
  },
  {
    "text": "places that need it uh would refer to that single implementation rather than",
    "start": "2630280",
    "end": "2636040"
  },
  {
    "text": "copy its body over there if you know what I mean",
    "start": "2636040",
    "end": "2642900"
  },
  {
    "text": "okay so now I have to fix this and",
    "start": "2644020",
    "end": "2650980"
  },
  {
    "text": "okay now we come to a more advanced",
    "start": "2650980",
    "end": "2658318"
  },
  {
    "text": "all right I will I will return this because I still haven't",
    "start": "2658359",
    "end": "2663960"
  },
  {
    "text": "removed these prototyping elements from here so and still need it but in five",
    "start": "2663960",
    "end": "2669880"
  },
  {
    "text": "minutes time we should remove this definitely okay",
    "start": "2669880",
    "end": "2675540"
  },
  {
    "text": "now this is functional programmer in me showing all that I",
    "start": "2675640",
    "end": "2681640"
  },
  {
    "text": "know on this piece of code what are the playable cells",
    "start": "2681640",
    "end": "2688180"
  },
  {
    "text": "now you start thinking about Expressions how do we calculate playable cells",
    "start": "2688180",
    "end": "2695020"
  },
  {
    "text": "if there are any winning lines then there are no playable cells empty",
    "start": "2695020",
    "end": "2701920"
  },
  {
    "text": "otherwise take the full board nine cell elements",
    "start": "2701920",
    "end": "2707740"
  },
  {
    "text": "this will be an innumerable of cell I don't have it yet but I see the design",
    "start": "2707740",
    "end": "2714839"
  },
  {
    "text": "I will put them here so this is just an ugly expression",
    "start": "2715960",
    "end": "2721780"
  },
  {
    "text": "that returns nine cell objects with unique coordinates",
    "start": "2721780",
    "end": "2728220"
  },
  {
    "text": "if you never saw functional c-sharp I don't know what to tell you how to",
    "start": "2731500",
    "end": "2738160"
  },
  {
    "text": "make it easy for you but anyway if you take an innumerable of cell",
    "start": "2738160",
    "end": "2744040"
  },
  {
    "text": "representing the entire board then just say accept moves",
    "start": "2744040",
    "end": "2750040"
  },
  {
    "text": "these are the cells that were never played and the user should be able to click them I don't have the move",
    "start": "2750040",
    "end": "2756819"
  },
  {
    "text": "sequence yet but listen why will this work",
    "start": "2756819",
    "end": "2763780"
  },
  {
    "text": "because of equality testing operators that were implemented for me",
    "start": "2763780",
    "end": "2771060"
  },
  {
    "text": "that's the point and I'm using records all the time because all those dislarge",
    "start": "2772720",
    "end": "2778960"
  },
  {
    "text": "classes those hundreds of these large classes in my code they're all testable",
    "start": "2778960",
    "end": "2784599"
  },
  {
    "text": "for equality and I can use them in collections as keys to dictionaries in here sets I can I can check whether",
    "start": "2784599",
    "end": "2791200"
  },
  {
    "text": "there are duplicates anything I need When developing a complex domain model I",
    "start": "2791200",
    "end": "2796240"
  },
  {
    "text": "can do because equality testing becomes a native feature of my objects",
    "start": "2796240",
    "end": "2801940"
  },
  {
    "text": "and I can write one line of code like this and it will do a complicated",
    "start": "2801940",
    "end": "2807359"
  },
  {
    "text": "operation then what are these moves",
    "start": "2807359",
    "end": "2814300"
  },
  {
    "text": "if you are developing an immutable model then you will probably need immutable collections",
    "start": "2814300",
    "end": "2820780"
  },
  {
    "text": "how many of you have been working with immutable collections oh that's better",
    "start": "2820780",
    "end": "2827260"
  },
  {
    "text": "okay immutable collections come with a cost and added cost they have logarithmic uh",
    "start": "2827260",
    "end": "2834339"
  },
  {
    "text": "added logarithmic time on everything where common collections have uh unit",
    "start": "2834339",
    "end": "2840339"
  },
  {
    "text": "time so it is and logarithm and time to add",
    "start": "2840339",
    "end": "2845619"
  },
  {
    "text": "an element to a list not all fan so these collections have a cost",
    "start": "2845619",
    "end": "2853240"
  },
  {
    "text": "so you will avoid creating huge immutable objects like thousands of",
    "start": "2853240",
    "end": "2859660"
  },
  {
    "text": "items inside but if you have nine items inside performance penalty will be negligible",
    "start": "2859660",
    "end": "2865599"
  },
  {
    "text": "but design uh effects will be great I will have an immutable domain",
    "start": "2865599",
    "end": "2873579"
  },
  {
    "text": "model all the way through so when you",
    "start": "2873579",
    "end": "2879339"
  },
  {
    "text": "design an immutable class functional style which includes a collection it",
    "start": "2879339",
    "end": "2885400"
  },
  {
    "text": "will this will become your muscle memory then create a private Constructor which",
    "start": "2885400",
    "end": "2892480"
  },
  {
    "text": "receives an immutable collection of all the content then initialize it to an",
    "start": "2892480",
    "end": "2899680"
  },
  {
    "text": "empty immutable collection the first time and whenever you want okay just",
    "start": "2899680",
    "end": "2905260"
  },
  {
    "text": "repeat that whenever you want to add to that collection create a new",
    "start": "2905260",
    "end": "2912819"
  },
  {
    "text": "that will be this helper method below use the collection to add con oh no no",
    "start": "2912819",
    "end": "2921040"
  },
  {
    "text": "this is something totally dispute forget this is the line I want I was talking to",
    "start": "2921040",
    "end": "2926559"
  },
  {
    "text": "you I was telling uh create new collection by adding an element to",
    "start": "2926559",
    "end": "2934300"
  },
  {
    "text": "it immutable collections return a new collection with one element added and",
    "start": "2934300",
    "end": "2939520"
  },
  {
    "text": "the old reference remains intact nothing changes in depth",
    "start": "2939520",
    "end": "2945339"
  },
  {
    "text": "and then create a new instance of your object with the new collection inside of",
    "start": "2945339",
    "end": "2950440"
  },
  {
    "text": "it and this expression which I'm constructing here do you know what it's",
    "start": "2950440",
    "end": "2956380"
  },
  {
    "text": "doing if I wanted to play on this cell that",
    "start": "2956380",
    "end": "2962200"
  },
  {
    "text": "cell might be occupied so what I'm doing or better yet functional programming",
    "start": "2962200",
    "end": "2969339"
  },
  {
    "text": "tiny uh functional programming in me is searching through all the playable",
    "start": "2969339",
    "end": "2975819"
  },
  {
    "text": "cells which are equal to this one and there can be only one such uh",
    "start": "2975819",
    "end": "2982119"
  },
  {
    "text": "cell converting that one into a new board otherwise rejecting the move by",
    "start": "2982119",
    "end": "2988480"
  },
  {
    "text": "doing nothing this is homework for you for those of",
    "start": "2988480",
    "end": "2994540"
  },
  {
    "text": "you who never saw functional expressions and just return the first one of these it's either a played board or the same",
    "start": "2994540",
    "end": "3002040"
  },
  {
    "text": "board as this one so it either accepted or rejecting the rejected the move you can even choose to throw exceptions from",
    "start": "3002040",
    "end": "3008700"
  },
  {
    "text": "from this operator but there is no default eventually operator that accepts",
    "start": "3008700",
    "end": "3014579"
  },
  {
    "text": "a Lambda yet so you cannot just throw an exception here okay this is Advanced functional",
    "start": "3014579",
    "end": "3021599"
  },
  {
    "text": "programming in c sharp if you like start thinking about it",
    "start": "3021599",
    "end": "3028619"
  },
  {
    "text": "we only need to implement home and the way it moves and the game will work",
    "start": "3028619",
    "end": "3034099"
  },
  {
    "text": "this picks all moves that have an even",
    "start": "3037200",
    "end": "3045960"
  },
  {
    "text": "offset those are the moves made by the Home player but",
    "start": "3045960",
    "end": "3051480"
  },
  {
    "text": "this is ugly This is complicated this is error prone and I will have to duplicate",
    "start": "3051480",
    "end": "3056880"
  },
  {
    "text": "it here with only a single this zero switch to one",
    "start": "3056880",
    "end": "3062540"
  },
  {
    "text": "if you already have a functional model which is based on uh",
    "start": "3063960",
    "end": "3070940"
  },
  {
    "text": "sequences equal terrible objects things like that you can start designing",
    "start": "3071460",
    "end": "3078480"
  },
  {
    "text": "your own link extensions like that default event that receives a Lambda a",
    "start": "3078480",
    "end": "3083640"
  },
  {
    "text": "lazy default if empty which does not exist in.net yet",
    "start": "3083640",
    "end": "3089359"
  },
  {
    "text": "how do you do that and why do you do that one is to move all the ugly code under",
    "start": "3091140",
    "end": "3098400"
  },
  {
    "text": "the rack so you just create an extension method put it somewhere else and put all",
    "start": "3098400",
    "end": "3103619"
  },
  {
    "text": "the ugly code in there and just hide it behind a nice name",
    "start": "3103619",
    "end": "3110160"
  },
  {
    "text": "that is one reason the other reason is that if you placed",
    "start": "3110160",
    "end": "3117720"
  },
  {
    "text": "this code somewhere else then you start asking why am I using link to implement",
    "start": "3117720",
    "end": "3123300"
  },
  {
    "text": "this when it is not efficient enough link is semi nicely looking it is",
    "start": "3123300",
    "end": "3132780"
  },
  {
    "text": "I don't know if you if I had names if I had methods for these operations this",
    "start": "3132780",
    "end": "3139920"
  },
  {
    "text": "expression would really look nice it would be a select uh this method",
    "start": "3139920",
    "end": "3145740"
  },
  {
    "text": "where that that method that returns Boolean select",
    "start": "3145740",
    "end": "3151020"
  },
  {
    "text": "disk conversion you know and it would be a really nice expression a chain of of",
    "start": "3151020",
    "end": "3158940"
  },
  {
    "text": "Link operators with all the alarm does it is ugly and it is not really",
    "start": "3158940",
    "end": "3164579"
  },
  {
    "text": "efficient so this is better",
    "start": "3164579",
    "end": "3169980"
  },
  {
    "text": "and this is procedural take the enumerator if parity is greater than zero which is one more skip the",
    "start": "3169980",
    "end": "3178200"
  },
  {
    "text": "first element then skip twice per iteration job done and this is the most efficient way to do",
    "start": "3178200",
    "end": "3185220"
  },
  {
    "text": "that however this method",
    "start": "3185220",
    "end": "3191099"
  },
  {
    "text": "is accepting parity so I can say",
    "start": "3191099",
    "end": "3197720"
  },
  {
    "text": "Prosperity 1000 here which is not valid so what you do",
    "start": "3197720",
    "end": "3203579"
  },
  {
    "text": "in a design which is safe from Bugs",
    "start": "3203579",
    "end": "3209460"
  },
  {
    "text": "you would create a private extension method which is very efficient",
    "start": "3209460",
    "end": "3214740"
  },
  {
    "text": "and exposed to static public methods that are giving a name to those",
    "start": "3214740",
    "end": "3220740"
  },
  {
    "text": "parameters like where even offset where odd offset and you would fix the parameter",
    "start": "3220740",
    "end": "3226740"
  },
  {
    "text": "and this is good now you go",
    "start": "3226740",
    "end": "3232200"
  },
  {
    "text": "back to this code and implement it this way and what do you say now",
    "start": "3232200",
    "end": "3239040"
  },
  {
    "text": "all that ugliness has been moved away turned into a better implementation and",
    "start": "3239040",
    "end": "3244680"
  },
  {
    "text": "hidden away from everyone so that nobody can make a mistake",
    "start": "3244680",
    "end": "3249859"
  },
  {
    "text": "winning lines Advanced plus level",
    "start": "3252359",
    "end": "3257700"
  },
  {
    "text": "look at this I could",
    "start": "3257700",
    "end": "3262740"
  },
  {
    "text": "use a line to expose some helper method which tells me",
    "start": "3262740",
    "end": "3269660"
  },
  {
    "text": "lines formed by these cells and whenever",
    "start": "3269660",
    "end": "3276359"
  },
  {
    "text": "cells form a line of free that is the winning line all right so I",
    "start": "3276359",
    "end": "3281400"
  },
  {
    "text": "need home players winning lines away players winning lines this is the expression that calculates",
    "start": "3281400",
    "end": "3287940"
  },
  {
    "text": "that so another ugly",
    "start": "3287940",
    "end": "3292940"
  },
  {
    "text": "expression in the line which is doing a very complicated",
    "start": "3293940",
    "end": "3300540"
  },
  {
    "text": "deliberation by grouping lines which are Equitable so they they can be",
    "start": "3300540",
    "end": "3306960"
  },
  {
    "text": "grouped by themselves and every cell should tell us two which lies it belongs",
    "start": "3306960",
    "end": "3313859"
  },
  {
    "text": "can you follow this does anybody can follow this Maybe",
    "start": "3313859",
    "end": "3320780"
  },
  {
    "text": "but if you started thinking this way if you start thinking like my entire",
    "start": "3321240",
    "end": "3328319"
  },
  {
    "text": "domain model splits into querying and commanding to it so forget",
    "start": "3328319",
    "end": "3335280"
  },
  {
    "text": "commands querying is a bunch of expressions",
    "start": "3335280",
    "end": "3340980"
  },
  {
    "text": "there are no Loops there are no nothing just an expression what is the formula",
    "start": "3340980",
    "end": "3347160"
  },
  {
    "text": "for what this function says it will return use expression body syntax all the way",
    "start": "3347160",
    "end": "3354839"
  },
  {
    "text": "through never see acrylic braces I'm not sure that there",
    "start": "3354839",
    "end": "3360420"
  },
  {
    "text": "are any curly braces in this code except in that extension method and over there maybe in the in the UI in the domain",
    "start": "3360420",
    "end": "3368819"
  },
  {
    "text": "model it's all arrows expression body syntax so the idea is to",
    "start": "3368819",
    "end": "3377099"
  },
  {
    "text": "ask every single cell to which lines it belongs then to group those lines and",
    "start": "3377099",
    "end": "3384000"
  },
  {
    "text": "count all the groups that have free elements those are the winning lines you see that is the expression",
    "start": "3384000",
    "end": "3390720"
  },
  {
    "text": "for winning lines and all I need is the cell this is the cell class to",
    "start": "3390720",
    "end": "3398640"
  },
  {
    "text": "tell me that it belongs to this row to this column maybe to this diagonal and",
    "start": "3398640",
    "end": "3404819"
  },
  {
    "text": "maybe to this anti-diagonal so it returns two three or four elements and that expression over there once I",
    "start": "3404819",
    "end": "3412020"
  },
  {
    "text": "add a link will compile and work fine I will save this",
    "start": "3412020",
    "end": "3419900"
  },
  {
    "text": "these are the elements I think that everything is in place",
    "start": "3421619",
    "end": "3429420"
  },
  {
    "text": "but I cannot use this mouse on this glass",
    "start": "3429420",
    "end": "3434660"
  },
  {
    "text": "so where are you I can play",
    "start": "3435119",
    "end": "3441900"
  },
  {
    "text": "I have already made a mistake the fork attack and while I'm winning",
    "start": "3441900",
    "end": "3449720"
  },
  {
    "text": "the the last element which I promised to you what can be done with this immutable",
    "start": "3449720",
    "end": "3456240"
  },
  {
    "text": "domain model that is very hard to be implemented if Board model were mutable",
    "start": "3456240",
    "end": "3462599"
  },
  {
    "text": "yes undo very good idea and much simpler",
    "start": "3462599",
    "end": "3468059"
  },
  {
    "text": "than my idea yes undo you would just show the",
    "start": "3468059",
    "end": "3473280"
  },
  {
    "text": "previous version of the board and you're done and there is there is the whole bunch of",
    "start": "3473280",
    "end": "3479220"
  },
  {
    "text": "algorithms that are based on that same ability for example",
    "start": "3479220",
    "end": "3485700"
  },
  {
    "text": "if I wanted to play against the computer I would have to search for States now",
    "start": "3485700",
    "end": "3491400"
  },
  {
    "text": "every state is a single board object you see with",
    "start": "3491400",
    "end": "3497160"
  },
  {
    "text": "mutable board if any of you ever implemented a board game with a mutable",
    "start": "3497160",
    "end": "3502740"
  },
  {
    "text": "domain model I did that on a much more complicated board game than this and it",
    "start": "3502740",
    "end": "3508799"
  },
  {
    "text": "was yeah with this it is two lines of code",
    "start": "3508799",
    "end": "3515040"
  },
  {
    "text": "literally so I hope you enjoyed this I have won",
    "start": "3515040",
    "end": "3521160"
  },
  {
    "text": "the game if you have any questions you can ask them now",
    "start": "3521160",
    "end": "3528500"
  },
  {
    "text": "yes",
    "start": "3531299",
    "end": "3533839"
  },
  {
    "text": "there is the with expression where where you say with this object open curly",
    "start": "3540020",
    "end": "3546780"
  },
  {
    "text": "braces and just set that one property that will construct a new object with",
    "start": "3546780",
    "end": "3553380"
  },
  {
    "text": "the modified that single value and everything else just copied that's",
    "start": "3553380",
    "end": "3559099"
  },
  {
    "text": "with records yes you can Implement that on your own within its syntax and",
    "start": "3559099",
    "end": "3565619"
  },
  {
    "text": "there is a lot of complicate complexity in that and doing that manually but it",
    "start": "3565619",
    "end": "3570960"
  },
  {
    "text": "works out of the box with records yes",
    "start": "3570960",
    "end": "3577220"
  },
  {
    "text": "my experience is that it that it is probably best to start small you can",
    "start": "3589500",
    "end": "3596339"
  },
  {
    "text": "always create one small class that is functional that is immutable that",
    "start": "3596339",
    "end": "3601859"
  },
  {
    "text": "separates commands from queries and works in this way it will not make any",
    "start": "3601859",
    "end": "3608099"
  },
  {
    "text": "troubles to all other classes in the domain and then you build from that and keep a building",
    "start": "3608099",
    "end": "3614220"
  },
  {
    "text": "you will see that there are more and more things that you can do that work",
    "start": "3614220",
    "end": "3620940"
  },
  {
    "text": "very hard without that for example multi-threading task parallelism this is Task parallel",
    "start": "3620940",
    "end": "3628200"
  },
  {
    "text": "ready with no no zero lines of code to use it in in task parallelism if I made",
    "start": "3628200",
    "end": "3634380"
  },
  {
    "text": "this not only mutable but if I use a mutable list inside it does not",
    "start": "3634380",
    "end": "3640380"
  },
  {
    "text": "guarantee that every single bit will remain intact even if nobody is changing",
    "start": "3640380",
    "end": "3645540"
  },
  {
    "text": "it it does not it explicitly says that they don't guarantee it",
    "start": "3645540",
    "end": "3651480"
  },
  {
    "text": "if I use it in task parallel expression would it work will it explode later I",
    "start": "3651480",
    "end": "3657960"
  },
  {
    "text": "don't know with if I had a bunch of classes that were designed in this way months ago I",
    "start": "3657960",
    "end": "3666720"
  },
  {
    "text": "would just say yes everything is safe I don't have to think",
    "start": "3666720",
    "end": "3671780"
  },
  {
    "text": "yes",
    "start": "3671819",
    "end": "3674359"
  },
  {
    "text": "yes that is a good question what about memory we are using many small objects",
    "start": "3677460",
    "end": "3684059"
  },
  {
    "text": "many many many small objects that is not a problem for garbage",
    "start": "3684059",
    "end": "3689339"
  },
  {
    "text": "collected languages because garbage collection is very efficient in that mode if it has many small objects it do",
    "start": "3689339",
    "end": "3698760"
  },
  {
    "text": "know how it works it has a pointer to to the free location and it adds new objects on at the end when the garbage",
    "start": "3698760",
    "end": "3706500"
  },
  {
    "text": "collection happens none of these will be visited because there are no references to them they are all forgotten except a",
    "start": "3706500",
    "end": "3713880"
  },
  {
    "text": "couple of those that are still alive those that are alive will be copied to the beginning",
    "start": "3713880",
    "end": "3719000"
  },
  {
    "text": "compacted and everything else remains just to move the pointer that is",
    "start": "3719000",
    "end": "3724260"
  },
  {
    "text": "a single assignment operation so all the other objects all the other short living objects are just skipped the cost is",
    "start": "3724260",
    "end": "3731640"
  },
  {
    "text": "zero to garbage collect them",
    "start": "3731640",
    "end": "3735859"
  },
  {
    "text": "all right if you have anything else I will be around uh we can talk",
    "start": "3738359",
    "end": "3744359"
  },
  {
    "text": "I would also like to hear your your experience thank you for coming and",
    "start": "3744359",
    "end": "3750359"
  },
  {
    "text": "enjoy the rest of the conference",
    "start": "3750359",
    "end": "3753558"
  }
]