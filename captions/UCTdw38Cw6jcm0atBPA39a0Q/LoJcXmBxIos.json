[
  {
    "start": "0",
    "end": "93000"
  },
  {
    "text": "all right welcome everyone I'm Oliver lawless and I work as a security researcher here at now secure where",
    "start": "3200",
    "end": "10050"
  },
  {
    "text": "we're using frida for security testing and mobile apps and today I'm going to talk about frida in the context of",
    "start": "10050",
    "end": "15990"
  },
  {
    "text": "testing yesterday I did talk on Frida in a more generic sense or actually reverse",
    "start": "15990",
    "end": "21060"
  },
  {
    "text": "engineering sense but it also has applications in software testing and",
    "start": "21060",
    "end": "28460"
  },
  {
    "text": "basically for those not familiar with freedom before probably most we are not",
    "start": "28460",
    "end": "33960"
  },
  {
    "text": "it's a dynamic instrumentation toolkit in technical terms that just means it's a way to observe software as it's",
    "start": "33960",
    "end": "40500"
  },
  {
    "text": "running and manipulate it and it's but one of the traits of Frida is that it's",
    "start": "40500",
    "end": "46500"
  },
  {
    "text": "scriptable so you can actually have a short feedback loop and quickly adapt",
    "start": "46500",
    "end": "51629"
  },
  {
    "text": "instrumentation to observe the software or manipulate the software that you're running and it's multi-platform so it",
    "start": "51629",
    "end": "58800"
  },
  {
    "text": "works on the major OSS and that's in continuous expansion as people",
    "start": "58800",
    "end": "67310"
  },
  {
    "text": "contribute improvements so like UNIX was an outside improvement for example and",
    "start": "67310",
    "end": "73490"
  },
  {
    "text": "it's built highly modular in in the sense that while we use JavaScript for",
    "start": "73490",
    "end": "80490"
  },
  {
    "text": "scripting but you don't have to use the high level API you can also use the different components even from C C++ you",
    "start": "80490",
    "end": "87030"
  },
  {
    "text": "can use just a low level instrumentation yourself in tests and so on little touch",
    "start": "87030",
    "end": "92159"
  },
  {
    "text": "them so to give you a sense of what free that I can do we'll start with something",
    "start": "92159",
    "end": "99329"
  },
  {
    "start": "93000",
    "end": "375000"
  },
  {
    "text": "really simple and that is you have an application that's running and you want",
    "start": "99329",
    "end": "106619"
  },
  {
    "text": "to make inject on network failures so instead of mocking that out you could",
    "start": "106619",
    "end": "113159"
  },
  {
    "text": "actually do it at the API level so you can make the application believe that it's failing to connect to establish a",
    "start": "113159",
    "end": "119820"
  },
  {
    "text": "TCP connection so for this demo I'm going to use",
    "start": "119820",
    "end": "125310"
  },
  {
    "text": "let's see here I'm going to use NC FTP and just gonna do like this say open FTP",
    "start": "125310",
    "end": "136920"
  },
  {
    "text": "you I dunno and I was connecting I was",
    "start": "136920",
    "end": "142590"
  },
  {
    "text": "logged in however now we could use Frida and and what we're going to do is that",
    "start": "142590",
    "end": "154950"
  },
  {
    "text": "we're going to inject some code into this process and say FTP process here so that when it calls connect that connect",
    "start": "154950",
    "end": "162630"
  },
  {
    "text": "operation is going to fail and we are going to so we're going to use a 3d API here this is JavaScript we're writing",
    "start": "162630",
    "end": "170010"
  },
  {
    "text": "and we're going to inject that into they're afraid of takes care of the logistics of what's happening there so we do interceptor replace to replace",
    "start": "170010",
    "end": "178100"
  },
  {
    "text": "an implementation of a function in memory and then to find the function",
    "start": "178100",
    "end": "183810"
  },
  {
    "text": "we'll use module file export by name and",
    "start": "183810",
    "end": "189590"
  },
  {
    "text": "then the name of the function is connect and we're going to use and the",
    "start": "189590",
    "end": "197670"
  },
  {
    "text": "replacement will be a native callback so we'll get callback from native code and",
    "start": "197670",
    "end": "205100"
  },
  {
    "text": "their return type is int and your argument is our int pointer and you int",
    "start": "205100",
    "end": "212000"
  },
  {
    "text": "that's what I'd find by looking at the man page of connect basically so here we",
    "start": "212000",
    "end": "219239"
  },
  {
    "text": "are inside we have replaced implementation connect called making it",
    "start": "219239",
    "end": "227700"
  },
  {
    "text": "fail for example and here we could now return -1 meaning it fails but to not",
    "start": "227700",
    "end": "235920"
  },
  {
    "text": "confuse the application we should set or no to the the error that we want to make",
    "start": "235920",
    "end": "241680"
  },
  {
    "text": "it believe happened so we're going to define an econ refused which is 61 on",
    "start": "241680",
    "end": "249540"
  },
  {
    "text": "this operating system and set that and",
    "start": "249540",
    "end": "255720"
  },
  {
    "text": "then we're going to load this into the other process",
    "start": "255720",
    "end": "260030"
  },
  {
    "text": "so we're gonna use freedom so if you do pip install Freda tools you get some command-line tools written Python using",
    "start": "261890",
    "end": "269430"
  },
  {
    "text": "the Python bindings Ephrata so we can do it like and see Freda and safety P or process ID - l to load a script whoops",
    "start": "269430",
    "end": "282650"
  },
  {
    "text": "we're gonna save this ah okay so Freda",
    "start": "283730",
    "end": "293760"
  },
  {
    "text": "and 60p - L agent GS [Music]",
    "start": "293760",
    "end": "299390"
  },
  {
    "text": "oops yeah oh yeah it X's it so we're",
    "start": "299390",
    "end": "308820"
  },
  {
    "text": "just gonna start it again and now we're gonna inject that script and now when we",
    "start": "308820",
    "end": "314250"
  },
  {
    "text": "do open FTP you Ino it should hopefully fail and it does could not connect",
    "start": "314250",
    "end": "320490"
  },
  {
    "text": "connection refused and you can see here that connect failed making it fail so",
    "start": "320490",
    "end": "326520"
  },
  {
    "text": "the logging happen here so when we do console log in the agent we inject it's",
    "start": "326520",
    "end": "332250"
  },
  {
    "text": "printed there in the console so this way",
    "start": "332250",
    "end": "338000"
  },
  {
    "text": "you can inject errors our make a pee ice fail operating system api's or internal",
    "start": "338000",
    "end": "344700"
  },
  {
    "text": "API so the application and so on so you don't even have to recompile the software and you don't need the source code in all situations either so that's",
    "start": "344700",
    "end": "354300"
  },
  {
    "text": "basically the really basics of Freda you",
    "start": "354300",
    "end": "359460"
  },
  {
    "text": "can replace functions you can observe them getting cold without actually we're plate changing their behavior and so",
    "start": "359460",
    "end": "366300"
  },
  {
    "text": "forth okay so we're now going to build",
    "start": "366300",
    "end": "372120"
  },
  {
    "text": "us something a bit more crazy so hopefully it'll get through this is it the first time going through this demo",
    "start": "372120",
    "end": "378000"
  },
  {
    "start": "375000",
    "end": "395000"
  },
  {
    "text": "so let's hope Murphy is not gonna intervene too much so yeah we have an",
    "start": "378000",
    "end": "387390"
  },
  {
    "text": "existing application that we want to add some testing API stew and well we are let's pretend we are the",
    "start": "387390",
    "end": "398000"
  },
  {
    "start": "395000",
    "end": "450000"
  },
  {
    "text": "developers of quake so question is can we make it expose some api's for testing",
    "start": "398000",
    "end": "405910"
  },
  {
    "text": "so we're gonna turn down the volume",
    "start": "405910",
    "end": "440720"
  },
  {
    "text": "while we're okay so so what we're going",
    "start": "440720",
    "end": "448340"
  },
  {
    "text": "to do now we have quake running that's our test application we're going to make it exposed a REST API so we can interact",
    "start": "448340",
    "end": "455480"
  },
  {
    "start": "450000",
    "end": "485000"
  },
  {
    "text": "with it so she can do HTTP GET towards",
    "start": "455480",
    "end": "464120"
  },
  {
    "text": "it to like a that's you out to get stuff or post to modify things yeah and it's",
    "start": "464120",
    "end": "471830"
  },
  {
    "text": "just like a server on the Internet's basically a web server on the Internet that's just an example it could also",
    "start": "471830",
    "end": "477470"
  },
  {
    "text": "work with other things but so it's a",
    "start": "477470",
    "end": "484580"
  },
  {
    "text": "different editor for this so what I have set up here we're gonna write a free agent not in JavaScript this time but in",
    "start": "484580",
    "end": "491150"
  },
  {
    "start": "485000",
    "end": "605000"
  },
  {
    "text": "higher level language we're gonna use typescript so I have just some built system set up here we're using something",
    "start": "491150",
    "end": "497840"
  },
  {
    "text": "called free to compile to turn the typescript into JavaScript and bundle it up into one script oh yeah yeah",
    "start": "497840",
    "end": "504790"
  },
  {
    "text": "it's that readable I think the color scheme is not that great here actually",
    "start": "504790",
    "end": "510620"
  },
  {
    "text": "but we're not gonna use that much so we yeah we run the compiler to",
    "start": "510620",
    "end": "515990"
  },
  {
    "text": "compile it and this is like nodejs stuff what's cool is that you can reuse",
    "start": "515990",
    "end": "521840"
  },
  {
    "text": "existing modules from ogs in your Frieda age so you have a whole ecosystem of modules",
    "start": "521840",
    "end": "528160"
  },
  {
    "text": "that can be used unmodified yeah let's",
    "start": "528160",
    "end": "554720"
  },
  {
    "text": "try let's try a different color scheme here hopefully that's gonna be readable",
    "start": "554720",
    "end": "567610"
  },
  {
    "text": "okay okay so we're gonna use we're gonna",
    "start": "567610",
    "end": "597710"
  },
  {
    "text": "use koa which is an off-the-shelf module from NPM which allows us to to implement",
    "start": "597710",
    "end": "606320"
  },
  {
    "start": "605000",
    "end": "655000"
  },
  {
    "text": "the rest api very easily so let's instantiate the application Co",
    "start": "606320",
    "end": "612980"
  },
  {
    "text": "application will instantiate the router to take care of the route HTP rounds and then we're gonna do define the routes",
    "start": "612980",
    "end": "620440"
  },
  {
    "text": "and then define a get status and it's gonna have these two arguments and a",
    "start": "620440",
    "end": "627050"
  },
  {
    "text": "function here call back whenever someone does an HTP get on status and we're",
    "start": "627050",
    "end": "632750"
  },
  {
    "text": "going to reply with the body of message hello NDC okay and we're gonna do app",
    "start": "632750",
    "end": "643030"
  },
  {
    "text": "use router routes use router allowed",
    "start": "643030",
    "end": "649160"
  },
  {
    "text": "methods and listen 13:37 that port we save that",
    "start": "649160",
    "end": "656130"
  },
  {
    "text": "and hopefully yeah how it continues is a compilation process running here so now",
    "start": "656130",
    "end": "663180"
  },
  {
    "text": "there will be a underscore agent ojs here so we can do freedom quakes passing",
    "start": "663180",
    "end": "669660"
  },
  {
    "text": "which is name of that process quake and can have a side by side I can load that",
    "start": "669660",
    "end": "680090"
  },
  {
    "text": "compiled agent and we should enable JIT to use the afraid as v8 runtime which",
    "start": "680090",
    "end": "687300"
  },
  {
    "text": "supports the latest feature so I'm going to use the earth free has to JavaScript runtimes one duct tape is a default it's",
    "start": "687300",
    "end": "695520"
  },
  {
    "text": "an interpreter that runs even on microcontroller so it's really not",
    "start": "695520",
    "end": "701070"
  },
  {
    "text": "resource-hungry at all v8 on the other hand is real fast but it used a lot more memory and but it has the latest Java",
    "start": "701070",
    "end": "707160"
  },
  {
    "text": "screechers and I'm gonna use that for this demo so it's it's simplify things a bit so it's we loaded that script into",
    "start": "707160",
    "end": "715170"
  },
  {
    "text": "quake so now we can try with the curl so",
    "start": "715170",
    "end": "724340"
  },
  {
    "text": "localhost in 37 slash status and could",
    "start": "724340",
    "end": "729540"
  },
  {
    "text": "pipe that to JQ to a pretty point to JSON and silent and here we go so it's",
    "start": "729540",
    "end": "737610"
  },
  {
    "text": "responded with a message hello and you see okay this is still running let's add",
    "start": "737610",
    "end": "744030"
  },
  {
    "text": "some more code here so for example hit",
    "start": "744030",
    "end": "749820"
  },
  {
    "start": "745000",
    "end": "820000"
  },
  {
    "text": "the process ID this process the program could be like process enumerate module",
    "start": "749820",
    "end": "757560"
  },
  {
    "text": "sink the list of load libraries and then pick the first one say that it auto",
    "start": "757560",
    "end": "763740"
  },
  {
    "text": "compass here I can just and the rattle here will actually reload the script so",
    "start": "763740",
    "end": "769230"
  },
  {
    "text": "we can just retry the request here you see the the new output so this way we",
    "start": "769230",
    "end": "776040"
  },
  {
    "text": "can continuously expand our agent while is running without actually restarting the application or even doing anything",
    "start": "776040",
    "end": "783210"
  },
  {
    "text": "just iterating okay so let's perhaps rates on expose",
    "start": "783210",
    "end": "793380"
  },
  {
    "text": "something useful like perhaps the state of this application like the health and",
    "start": "793380",
    "end": "799290"
  },
  {
    "text": "so on okay so I know this application a",
    "start": "799290",
    "end": "804570"
  },
  {
    "text": "bit so I know it has a global variable",
    "start": "804570",
    "end": "809990"
  },
  {
    "text": "called CL which is the client state actually now I'm jumping ahead a bit so",
    "start": "812029",
    "end": "820800"
  },
  {
    "start": "820000",
    "end": "995000"
  },
  {
    "text": "this is what it looks like in the code there's a client state global here and",
    "start": "820800",
    "end": "826170"
  },
  {
    "text": "the struck looks like this and here the third field there's a stats and that's",
    "start": "826170",
    "end": "832920"
  },
  {
    "text": "all the different stats like your health shells nails rockets so on so we could",
    "start": "832920",
    "end": "838830"
  },
  {
    "text": "go and read that and expose that as a REST API okay so we get a pointer to the",
    "start": "838830",
    "end": "847860"
  },
  {
    "text": "CL structure here and it happens to be exported by this application it might",
    "start": "847860",
    "end": "853350"
  },
  {
    "text": "not be in all cases when that case you can use debug symbols or other mechanisms um and we'll define a",
    "start": "853350",
    "end": "860610"
  },
  {
    "text": "function reads that and you give it a stat okay so we should define a type",
    "start": "860610",
    "end": "865890"
  },
  {
    "text": "stat that's an enum start health is zero as",
    "start": "865890",
    "end": "872070"
  },
  {
    "text": "we saw in the code shells is six okay",
    "start": "872070",
    "end": "877620"
  },
  {
    "text": "and it returns a number so it's actually going to do client state so that points",
    "start": "877620",
    "end": "886770"
  },
  {
    "text": "you start the structure and we're going to add 28 which is the first fields plus a status index times four because each",
    "start": "886770",
    "end": "895170"
  },
  {
    "text": "is the size in which is four right and",
    "start": "895170",
    "end": "902160"
  },
  {
    "text": "then we're going to that's a pointer so we need to dereference it so we're going to memory read int and like this so now",
    "start": "902160",
    "end": "910560"
  },
  {
    "text": "we have implement that reads that and here in the body",
    "start": "910560",
    "end": "916610"
  },
  {
    "text": "perhaps we can just reply with health read stat stat health shells rates that",
    "start": "916800",
    "end": "929060"
  },
  {
    "text": "stat shells okay so if we try that now",
    "start": "929060",
    "end": "938600"
  },
  {
    "text": "you go health is hundred and shells is 25 and if you go here and fires and",
    "start": "938600",
    "end": "946589"
  },
  {
    "text": "bullets like to this should be shells should be reduced by 2 so it's 23 so now",
    "start": "946589",
    "end": "954540"
  },
  {
    "text": "we're able to read out the states the application for an HDPE gift okay sorry",
    "start": "954540",
    "end": "966620"
  },
  {
    "text": "what equals 1 all right yeah I'm not",
    "start": "969290",
    "end": "976589"
  },
  {
    "text": "actually sure how at the console I'm not sure how it's keyed bound in this client",
    "start": "976589",
    "end": "981720"
  },
  {
    "text": "but uh okay right so actually we're",
    "start": "981720",
    "end": "996180"
  },
  {
    "text": "cheating a bit now because we're just reading this state from an arbitrary thread or from frieza's JavaScript thread so it's not that great",
    "start": "996180",
    "end": "1003910"
  },
  {
    "text": "potentially you could be reading out the health and then on the net while the other thread the main thread is",
    "start": "1003910",
    "end": "1009380"
  },
  {
    "text": "rendering the next frame and then it updates the next variable so you get that knot in it like a snapshot that's",
    "start": "1009380",
    "end": "1015490"
  },
  {
    "text": "inconsistent it's not that important for this but it will be important for the",
    "start": "1015490",
    "end": "1020720"
  },
  {
    "text": "next thing so we're going to do so now let's just implement it so that it does read these stats on the right thread",
    "start": "1020720",
    "end": "1027459"
  },
  {
    "text": "because we need that for the next part okay so this will be a bit more code but",
    "start": "1027459",
    "end": "1035900"
  },
  {
    "text": "we know that this application has a function called a.m. or it as an input send key event",
    "start": "1035900",
    "end": "1043100"
  },
  {
    "text": "and that's called on every frame to make the that the integration with STL or",
    "start": "1043100",
    "end": "1049669"
  },
  {
    "text": "whatever load any events it has cute like keyboard input zone so that's a good",
    "start": "1049669",
    "end": "1055460"
  },
  {
    "text": "point to actually run around code so we're going to hijack that function when",
    "start": "1055460",
    "end": "1061519"
  },
  {
    "text": "it's called or hook it so we're gonna use intercept or attach and actually now",
    "start": "1061519",
    "end": "1068029"
  },
  {
    "text": "it's probably a good idea to do have a function import symbol name with a",
    "start": "1068029",
    "end": "1073879"
  },
  {
    "text": "string and then Trust native pointer and that's just gonna do module find export",
    "start": "1073879",
    "end": "1079970"
  },
  {
    "text": "by name like we did earlier and the name so we don't have to repeat that so and",
    "start": "1079970",
    "end": "1086679"
  },
  {
    "text": "we should be using that here to make",
    "start": "1086679",
    "end": "1092269"
  },
  {
    "text": "that a bit more elegant okay right yeah",
    "start": "1092269",
    "end": "1101179"
  },
  {
    "text": "so I said we're going to intercept calls to this function so interceptor attach",
    "start": "1101179",
    "end": "1109119"
  },
  {
    "text": "import symbol I am some key events and",
    "start": "1109119",
    "end": "1116480"
  },
  {
    "text": "we're going to give it an under and on enter is the callback called when this function is being called it's called",
    "start": "1116480",
    "end": "1123739"
  },
  {
    "text": "synchronously so here we can do whatever we want like read arguments change arguments on but we're going to define a",
    "start": "1123739",
    "end": "1134019"
  },
  {
    "text": "pending here that has some pending work to do and we defined pending work as a",
    "start": "1134019",
    "end": "1142639"
  },
  {
    "text": "function or trans anything and here when this I on send key events gets called",
    "start": "1142639",
    "end": "1150340"
  },
  {
    "text": "will just drain that's a while pending length greater than 0 no Afric handling",
    "start": "1150340",
    "end": "1167149"
  },
  {
    "text": "shift grab the first one the oldest one and we'll call it so we'll just iterate",
    "start": "1167149",
    "end": "1174080"
  },
  {
    "text": "over or drain this array of pending work to do and call this function okay",
    "start": "1174080",
    "end": "1181340"
  },
  {
    "text": "and then we're going to create a function to actually schedule some work there so you're gonna cue a function",
    "start": "1181340",
    "end": "1192420"
  },
  {
    "text": "that turns a promise so it's an asynchronous operation and",
    "start": "1192420",
    "end": "1199190"
  },
  {
    "text": "return new promise or solve reject and",
    "start": "1199190",
    "end": "1207470"
  },
  {
    "text": "then we're going to do pending push to push a closure on this pending so that",
    "start": "1208130",
    "end": "1214110"
  },
  {
    "text": "on the next frame when this gets called it's going to run this code here and",
    "start": "1214110",
    "end": "1223760"
  },
  {
    "text": "that's going to try calling the function",
    "start": "1223760",
    "end": "1228780"
  },
  {
    "text": "and that it's going to resolve with the result or solve the promise and if",
    "start": "1228780",
    "end": "1234840"
  },
  {
    "text": "something goes wrong there we're going to reject the promise with a favor",
    "start": "1234840",
    "end": "1240300"
  },
  {
    "text": "[Music] forget something okay so far so good and",
    "start": "1240300",
    "end": "1248060"
  },
  {
    "text": "then we're going to work on our read stuff here or actually we're gonna create a read stats to read all of them",
    "start": "1248060",
    "end": "1258260"
  },
  {
    "text": "it returns a promise with the stats and now we should probably describe it stats",
    "start": "1258260",
    "end": "1264270"
  },
  {
    "text": "yes say that stats has a health which is",
    "start": "1264270",
    "end": "1272640"
  },
  {
    "text": "a number it has shells which is a number two okay and here and read stats we're",
    "start": "1272640",
    "end": "1281880"
  },
  {
    "text": "going to return perform the closure here",
    "start": "1281880",
    "end": "1290180"
  },
  {
    "text": "so this code here is run on the right thread and yeah we're gonna do what we",
    "start": "1290180",
    "end": "1297380"
  },
  {
    "text": "did earlier read so health reads that so we can just copy this code here okay so",
    "start": "1297380",
    "end": "1308600"
  },
  {
    "text": "we have implemented read stats that uses the scheduling thing we added here to",
    "start": "1308600",
    "end": "1313970"
  },
  {
    "text": "run things on the right thread and that returns that okay so can now go off to",
    "start": "1313970",
    "end": "1320720"
  },
  {
    "text": "our rest handler here at async this is now going to be an asynchronous function",
    "start": "1320720",
    "end": "1326200"
  },
  {
    "text": "and we can do a weight read stats so",
    "start": "1326200",
    "end": "1335240"
  },
  {
    "text": "that will complete the HTTP GET when it gets the result from read stuff okay",
    "start": "1335240",
    "end": "1340850"
  },
  {
    "text": "let's try that hopefully it will still work",
    "start": "1340850",
    "end": "1345160"
  },
  {
    "text": "yep okay so let's get to the more exciting stuff how about if we had a a",
    "start": "1347320",
    "end": "1358400"
  },
  {
    "start": "1355000",
    "end": "1625000"
  },
  {
    "text": "post endpoint for attacking like for firing a bullet so yeah we have some",
    "start": "1358400",
    "end": "1370400"
  },
  {
    "text": "internal functions we can use so we'll",
    "start": "1370400",
    "end": "1375860"
  },
  {
    "text": "use I n attack down and I n attack up which are called to start attacking and",
    "start": "1375860",
    "end": "1383120"
  },
  {
    "text": "when you release the mouse button to really stop attacking so down and up so",
    "start": "1383120",
    "end": "1388280"
  },
  {
    "text": "attack down will say new native",
    "start": "1388280",
    "end": "1393350"
  },
  {
    "text": "functions and now we're going to call a function in this process we need to",
    "start": "1393350",
    "end": "1398900"
  },
  {
    "text": "import the symbol or get the address of the function to call and that's high n attack down and return type is void and",
    "start": "1398900",
    "end": "1408110"
  },
  {
    "text": "it has no arguments attack up is the same just",
    "start": "1408110",
    "end": "1415179"
  },
  {
    "text": "okay and now it's at an attack function",
    "start": "1417170",
    "end": "1424140"
  },
  {
    "text": "here attack returns of promise void",
    "start": "1424140",
    "end": "1431610"
  },
  {
    "text": "so we're not going to return anything but it's an asynchronous operation and then we're going to use the away at the",
    "start": "1431610",
    "end": "1437820"
  },
  {
    "text": "perform primitive we built earlier to run this code on the right thread so",
    "start": "1437820",
    "end": "1444090"
  },
  {
    "text": "we're going to run attack down and then we're going to attack up afterwards but",
    "start": "1444090",
    "end": "1455460"
  },
  {
    "text": "we should also keep holding the button pressed a little bit so between these two we're going to do a sleep 50 just",
    "start": "1455460",
    "end": "1462540"
  },
  {
    "text": "leave for 50 milliseconds the code completion is not helping me right now okay now import is something for me so",
    "start": "1462540",
    "end": "1474540"
  },
  {
    "text": "when you need to implement sleep so that's a duration of the number returns",
    "start": "1474540",
    "end": "1482940"
  },
  {
    "text": "a promise void promise resolved and we're just",
    "start": "1482940",
    "end": "1489630"
  },
  {
    "text": "going to use set timeout just like in the browser you have set timeout available the scheduled work so I'm",
    "start": "1489630",
    "end": "1495600"
  },
  {
    "text": "going to resolve the promise after the",
    "start": "1495600",
    "end": "1503010"
  },
  {
    "text": "duration has passed okay so okay now what did I yeah so we",
    "start": "1503010",
    "end": "1513320"
  },
  {
    "text": "have obviously made need to make the tag function async to be able to await so a weight perform to attack to press the",
    "start": "1513320",
    "end": "1519230"
  },
  {
    "text": "button then we wait for 50 milliseconds and then we release the button okay and",
    "start": "1519230",
    "end": "1527870"
  },
  {
    "text": "now we need to expose this so we're going to do a post slash attack",
    "start": "1527870",
    "end": "1533560"
  },
  {
    "text": "maybe you should rename the status want to just that's just kind of what it is",
    "start": "1533560",
    "end": "1539980"
  },
  {
    "text": "same signature and this is gonna wait",
    "start": "1541510",
    "end": "1547150"
  },
  {
    "text": "attack and then respond with an empty body okay so our rest handler for attack",
    "start": "1547150",
    "end": "1559250"
  },
  {
    "text": "it calls attack and that's an empty response attack we'll schedule on the",
    "start": "1559250",
    "end": "1566120"
  },
  {
    "text": "right thread on a rendering thread as you press the button then when I finishes it will wait for 50",
    "start": "1566120",
    "end": "1571790"
  },
  {
    "text": "milliseconds and then schedule again and attack up to release the button",
    "start": "1571790",
    "end": "1576970"
  },
  {
    "text": "hopefully it'll still work here oh yeah I rename it to STATS",
    "start": "1580360",
    "end": "1585670"
  },
  {
    "text": "okay so now we can try attack",
    "start": "1585670",
    "end": "1590320"
  },
  {
    "text": "eighteen shells 1716 so it's working",
    "start": "1601769",
    "end": "1610619"
  },
  {
    "text": "okay now we did expose a REST API but",
    "start": "1612149",
    "end": "1628029"
  },
  {
    "start": "1625000",
    "end": "1932000"
  },
  {
    "text": "you might want the Python API instead or you could also use an off-the-shelf",
    "start": "1628029",
    "end": "1633639"
  },
  {
    "text": "module from NPM to have an IRC client or an FTP server or any kind of thing you",
    "start": "1633639",
    "end": "1638739"
  },
  {
    "text": "want but you can also just have a Python API oh I'm out of time soon",
    "start": "1638739",
    "end": "1655269"
  },
  {
    "text": "so I'll just be really quick on this one",
    "start": "1655269",
    "end": "1662999"
  },
  {
    "text": "oh I do",
    "start": "1667610",
    "end": "1672680"
  },
  {
    "text": "oh yeah right right yeah yeah yeah it's",
    "start": "1672680",
    "end": "1678800"
  },
  {
    "text": "early tells you a lot about my sleeping",
    "start": "1678800",
    "end": "1685100"
  },
  {
    "text": "patterns okay",
    "start": "1685100",
    "end": "1703280"
  },
  {
    "text": "so we're gonna use free does Python API so instead of using the raffle that we used here - - I'll load the script we're",
    "start": "1703280",
    "end": "1709910"
  },
  {
    "text": "going to do it by hand using the freighter five night guy which is what happens under the behind the scenes when",
    "start": "1709910",
    "end": "1715040"
  },
  {
    "text": "you use the raffle that we used so we do free to attach to this process here by",
    "start": "1715040",
    "end": "1720140"
  },
  {
    "text": "name we'll do enable JIT so we use v8 as the Java Runtime and then we're going to",
    "start": "1720140",
    "end": "1726170"
  },
  {
    "text": "do with codecs open oh yeah thanks",
    "start": "1726170",
    "end": "1732500"
  },
  {
    "text": "agent yes actually underscore jet engine",
    "start": "1732500",
    "end": "1737570"
  },
  {
    "text": "yes cut some corners here source afraid",
    "start": "1737570",
    "end": "1744950"
  },
  {
    "text": "we're gonna read the whole script and then we're going to instantiate the script so with the session create script",
    "start": "1744950",
    "end": "1751550"
  },
  {
    "text": "with the source code and then with the script load and now we're going to go",
    "start": "1751550",
    "end": "1758300"
  },
  {
    "text": "jump over to the scripts and we're gonna throw away the whole rest API so I'll",
    "start": "1758300",
    "end": "1767000"
  },
  {
    "text": "just delete this and instead we're going to use RPC dot exports so now this",
    "start": "1767000",
    "end": "1776210"
  },
  {
    "text": "script is going to expose an API that the other side can call so we'll expose",
    "start": "1776210",
    "end": "1784420"
  },
  {
    "text": "great stats and that's an async function",
    "start": "1784420",
    "end": "1790249"
  },
  {
    "text": "we're turning a promise with the stats and just the weight rates that's",
    "start": "1790249",
    "end": "1797929"
  },
  {
    "text": "actually good job just now doing an explicit basic attack promise void and",
    "start": "1797929",
    "end": "1809570"
  },
  {
    "text": "await attack okay so we expose this API",
    "start": "1810049",
    "end": "1821779"
  },
  {
    "text": "read stats on attack and then we jump over here and we do agent equal script",
    "start": "1821779",
    "end": "1827999"
  },
  {
    "text": "exports so script exports is a magical objects or whatever you access on it",
    "start": "1827999",
    "end": "1833489"
  },
  {
    "text": "will be turned into a function you can call so you can now do agent yeah we",
    "start": "1833489",
    "end": "1840389"
  },
  {
    "text": "could like print stats before agent read stats and we could do agent attack and",
    "start": "1840389",
    "end": "1848869"
  },
  {
    "text": "we can do stats after and that's it now",
    "start": "1848869",
    "end": "1855029"
  },
  {
    "text": "we'll get the stats will attack and then we'll read the stats again so now we can",
    "start": "1855029",
    "end": "1863609"
  },
  {
    "text": "stop this and Python three explorative pi and hopefully",
    "start": "1863609",
    "end": "1871460"
  },
  {
    "text": "[Music]",
    "start": "1873900",
    "end": "1880510"
  },
  {
    "text": "oh forget I put it in the wrong place so",
    "start": "1880510",
    "end": "1887850"
  },
  {
    "text": "I was read it it tired and then read it again and it decreased by one as you can see so now we have a Python API to",
    "start": "1893490",
    "end": "1909790"
  },
  {
    "text": "communicate with the agent we have running inside this process which is a lot easier to test than the rest API",
    "start": "1909790",
    "end": "1916360"
  },
  {
    "text": "probably but you can do yeah you can integrate the way you want okay so next",
    "start": "1916360",
    "end": "1929429"
  },
  {
    "text": "I want to show something else very different so how about detecting memory",
    "start": "1929429",
    "end": "1935500"
  },
  {
    "text": "leaks in C C++ code you can already do that with a Sun and Valley green etc but you can only do it at the whole process",
    "start": "1935500",
    "end": "1942010"
  },
  {
    "text": "lifetime level with with Frieda you can actually do it on a really tiny scope so",
    "start": "1942010",
    "end": "1948340"
  },
  {
    "text": "just a few lines of code you can have a guard checks from here to here to you how many leaks",
    "start": "1948340",
    "end": "1954570"
  },
  {
    "text": "okay so we're gonna use so Freda has the instrumentation engine of Freda is",
    "start": "1962910",
    "end": "1968710"
  },
  {
    "text": "called gum and I'm going to stop this because it's a bit distracting and the",
    "start": "1968710",
    "end": "1975190"
  },
  {
    "text": "gum is has C++ bindings and JavaScript bindings that you just saw that we used",
    "start": "1975190",
    "end": "1981190"
  },
  {
    "text": "it also has C++ bindings to C++ panics don't cover a lot of the API yet and you'll have to forgive me for not",
    "start": "1981190",
    "end": "1989200"
  },
  {
    "text": "updating the API in some year so the c++ looks antique but the that's something I",
    "start": "1989200",
    "end": "1994840"
  },
  {
    "text": "want to fix very soon I tried to fix it last night but I was too tired so I gave up right do we have time to write this",
    "start": "1994840",
    "end": "2007170"
  },
  {
    "text": "code so we have something called sanity",
    "start": "2007170",
    "end": "2012330"
  },
  {
    "text": "checker so I'll just create a ref",
    "start": "2012330",
    "end": "2019500"
  },
  {
    "text": "pointer this is a reference counted thing",
    "start": "2019500",
    "end": "2023390"
  },
  {
    "text": "and the reason we're using a plane see export function here is legacy",
    "start": "2029630",
    "end": "2036190"
  },
  {
    "text": "basically this library was built with a different C++ runtime and it had to hide",
    "start": "2036190",
    "end": "2041240"
  },
  {
    "text": "the differences between so avoid mangling and avoid exposing the memory",
    "start": "2041240",
    "end": "2047150"
  },
  {
    "text": "allocation stuff so some legacy there should be fixed but yeah you can now",
    "start": "2047150",
    "end": "2055030"
  },
  {
    "text": "begin checking for block leaks and then",
    "start": "2055030",
    "end": "2064940"
  },
  {
    "text": "when you're done you can do check your end returns true if it's exceeded",
    "start": "2064940",
    "end": "2079608"
  },
  {
    "text": "there's no leaks you take a leave wrap this up into a helper class and you just",
    "start": "2079609",
    "end": "2085070"
  },
  {
    "text": "put that in your scope whether yeah we",
    "start": "2085070",
    "end": "2090290"
  },
  {
    "text": "should fix this API okay so this",
    "start": "2090290",
    "end": "2103820"
  },
  {
    "text": "this so it doesn't actually do anything yet well doesn't do any mistakes make any mistakes yet but we could make it do",
    "start": "2103820",
    "end": "2111650"
  },
  {
    "text": "something silly like do a mile walk and not do it free and we need include a",
    "start": "2111650",
    "end": "2119710"
  },
  {
    "text": "city yeah because here we have some legacy code",
    "start": "2119710",
    "end": "2125920"
  },
  {
    "text": "that's using malloc and free and it's not cleaning up after itself",
    "start": "2125920",
    "end": "2132340"
  },
  {
    "text": "of course yeah thanks thanks",
    "start": "2135870",
    "end": "2143190"
  },
  {
    "text": "okay so let's run this so it tells us",
    "start": "2146760",
    "end": "2151840"
  },
  {
    "text": "blocks block leaks detected one block of six bytes and it's at this address",
    "start": "2151840",
    "end": "2157890"
  },
  {
    "text": "okay so to make this a bit more useful we can now do check your enable back",
    "start": "2157890",
    "end": "2166150"
  },
  {
    "text": "traces for blocks of all sizes and here",
    "start": "2166150",
    "end": "2177340"
  },
  {
    "text": "we go you see the block and the line number and where this was called from",
    "start": "2177340",
    "end": "2184950"
  },
  {
    "text": "and we can add a few more yeah see that",
    "start": "2185160",
    "end": "2194710"
  },
  {
    "text": "there's two of size six and one of size three and if this slows down the",
    "start": "2194710",
    "end": "2200620"
  },
  {
    "text": "application too much you can also do enable back traces for blocks of size and just say three for example at only",
    "start": "2200620",
    "end": "2208690"
  },
  {
    "text": "one block back traces for the blocks that are size three so you can run it without back braces first you get a",
    "start": "2208690",
    "end": "2215230"
  },
  {
    "text": "because that's very cheap overhead wise and then you see that I'm leaking a",
    "start": "2215230",
    "end": "2220690"
  },
  {
    "text": "block of 140 bytes every time okay I can enable back traces just for that blocks I don't change the behavior of the",
    "start": "2220690",
    "end": "2226360"
  },
  {
    "text": "application or the timing of the application timings of the application too much so here from this now you see",
    "start": "2226360",
    "end": "2235180"
  },
  {
    "text": "there's no back trace for these two but there's four this one that we care about",
    "start": "2235180",
    "end": "2241619"
  },
  {
    "text": "yeah so we have some other things in this API I won't have time to actually",
    "start": "2245710",
    "end": "2251839"
  },
  {
    "text": "show them but you have interceptor to intercept function calls like you saw earlier attach and replace and so on so",
    "start": "2251839",
    "end": "2257960"
  },
  {
    "text": "you can do that in tests and there's also the back tracers are exposed you",
    "start": "2257960",
    "end": "2265250"
  },
  {
    "text": "can look up debug symbols this is sanity checker that we just used there's also samplers so you can sample",
    "start": "2265250",
    "end": "2271819"
  },
  {
    "text": "things like malloc count like how many times was malloc old and then you can have your tests check that malloc was",
    "start": "2271819",
    "end": "2278960"
  },
  {
    "text": "not called at all when these functions were called so you could have okay this is part of my code base is not supposed",
    "start": "2278960",
    "end": "2284630"
  },
  {
    "text": "to call malloc ever or I use any memory allocation and then you can use such a",
    "start": "2284630",
    "end": "2291349"
  },
  {
    "text": "guard or a counter a sampler and then you can peek the total count so you can",
    "start": "2291349",
    "end": "2298970"
  },
  {
    "text": "have a there's also a call count sampler which you can give it any functions and it will count the number of calls to",
    "start": "2298970",
    "end": "2304940"
  },
  {
    "text": "those functions so that way you could also hook it kids like count how many times certain internal functions in your",
    "start": "2304940",
    "end": "2312349"
  },
  {
    "text": "application are called and at cert that they're not called or that they are called or how many times",
    "start": "2312349",
    "end": "2318230"
  },
  {
    "text": "they're called and if you're optimizing something maybe you're sorry with asserting that malloc is called less",
    "start": "2318230",
    "end": "2324230"
  },
  {
    "text": "than thousand times and then you start off with a million times and you get towards your goal and you have a passing",
    "start": "2324230",
    "end": "2330859"
  },
  {
    "text": "test at the end and you'll have a regression coverage if you start using a",
    "start": "2330859",
    "end": "2335990"
  },
  {
    "text": "lot more calling malloc a lot more again so you also have a profiler there's all",
    "start": "2335990",
    "end": "2343700"
  },
  {
    "text": "these things are building on the interceptors you saw earlier so you can also build such building blocks yourself the profiler",
    "start": "2343700",
    "end": "2350920"
  },
  {
    "text": "unlike traditional profilers this one lets you put an inspector so that",
    "start": "2350920",
    "end": "2358309"
  },
  {
    "text": "whenever a new worst case is detected it can actually look at the argument list",
    "start": "2358309",
    "end": "2363410"
  },
  {
    "text": "and and you can store stow away some context so say you have a function",
    "start": "2363410",
    "end": "2369170"
  },
  {
    "text": "that's quite generic in nature like in the media processing framework you're pushing a buffer so there's a push",
    "start": "2369170",
    "end": "2375260"
  },
  {
    "text": "buffer function and this happens to be slow just one in a million times but then it's",
    "start": "2375260",
    "end": "2380450"
  },
  {
    "text": "really slow so you're looking at the profiling data and you see oh it's really slow but I don't know what it was",
    "start": "2380450",
    "end": "2388250"
  },
  {
    "text": "called with like what was the argument was it audio or video or what it was it and this way you can add I can inspect",
    "start": "2388250",
    "end": "2395330"
  },
  {
    "text": "your call back you can add can snap shots on into string a summary of the",
    "start": "2395330",
    "end": "2402440"
  },
  {
    "text": "call that happened by looking at the argument list and that way you have more context when looking at the report at the end okay so let's taste of that and",
    "start": "2402440",
    "end": "2417010"
  },
  {
    "start": "2415000",
    "end": "2475000"
  },
  {
    "text": "yeah so I just mentioned these other use cases good since I won't have time to cover more but other things you could do",
    "start": "2417010",
    "end": "2424220"
  },
  {
    "text": "is interceptor and you could attach to certain functions that you know what we",
    "start": "2424220",
    "end": "2429800"
  },
  {
    "text": "called from different threats and you could add a random sleeps and that way you could",
    "start": "2429800",
    "end": "2436160"
  },
  {
    "text": "add gesture to the thread scheduling and maybe shake out more bugs that way another thing is fussing mostly you can",
    "start": "2436160",
    "end": "2443450"
  },
  {
    "text": "hit your functions with internal functions with a with untrusted data for",
    "start": "2443450",
    "end": "2449510"
  },
  {
    "text": "example if they're supposed to parse network data and to test them from the inside so you don't have to actually add",
    "start": "2449510",
    "end": "2456830"
  },
  {
    "text": "a lot of code just for testing so so in some cases you can avoid premature",
    "start": "2456830",
    "end": "2462980"
  },
  {
    "text": "architecture by using frida since you don't have to necessarily make everything stub a block will replace",
    "start": "2462980",
    "end": "2470180"
  },
  {
    "text": "different things of your code parts of your code just for testing so and I made",
    "start": "2470180",
    "end": "2478520"
  },
  {
    "start": "2475000",
    "end": "2563000"
  },
  {
    "text": "a note somewhere oh yeah I forgot to show you",
    "start": "2478520",
    "end": "2486980"
  },
  {
    "text": "I still have four minutes",
    "start": "2486980",
    "end": "2490660"
  },
  {
    "text": "I'll just use been cut Freda kept able",
    "start": "2501059",
    "end": "2510119"
  },
  {
    "text": "just enable the debug I think so you",
    "start": "2510119",
    "end": "2519119"
  },
  {
    "text": "actually have a debugger so here if you go in chrome here we're actually",
    "start": "2519119",
    "end": "2526409"
  },
  {
    "text": "attached now to the Frieda JavaScript agent so you can use the chrome",
    "start": "2526409",
    "end": "2532679"
  },
  {
    "text": "inspector to debug your free agents just like just like nodejs process the same",
    "start": "2532679",
    "end": "2539179"
  },
  {
    "text": "inspector API anyway I'm at a time I",
    "start": "2539179",
    "end": "2544529"
  },
  {
    "text": "think but I haven't maybe were for one question",
    "start": "2544529",
    "end": "2548900"
  },
  {
    "text": "okay thank you [Applause]",
    "start": "2555599",
    "end": "2565309"
  }
]