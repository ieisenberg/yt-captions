[
  {
    "text": "hi and thank you for coming here and not the Scots talk okay so first of all",
    "start": "7360",
    "end": "14080"
  },
  {
    "text": "this is going to be the talk with the most code that I've ever done and I've",
    "start": "14080",
    "end": "20020"
  },
  {
    "text": "never done it before so this is gonna be the first time so how many of you would be comfortable looking at C good because",
    "start": "20020",
    "end": "29080"
  },
  {
    "text": "you will and at any point if you feel there's too much C you can just like",
    "start": "29080",
    "end": "34570"
  },
  {
    "text": "sneak out the back line okay this is on the grown-up title and then I realized when I came here that",
    "start": "34570",
    "end": "40930"
  },
  {
    "text": "having a grown-up title was not the norm but my grown-up title when I pitched was",
    "start": "40930",
    "end": "46870"
  },
  {
    "text": "secure programming practices in C++ but then I realized that that was wrong so I",
    "start": "46870",
    "end": "53440"
  },
  {
    "text": "asked somebody on Twitter to suggest and I got a new title so how to avoid",
    "start": "53440",
    "end": "59619"
  },
  {
    "text": "blowing your leg off with C++ C that's more like in tune with the thing okay so",
    "start": "59619",
    "end": "66670"
  },
  {
    "text": "Who am I I am Patricia oz I work as a programmer I programmed my and C++ I've",
    "start": "66670",
    "end": "73240"
  },
  {
    "text": "done so for about 12 years and I've worked on two browsers I've worked on",
    "start": "73240",
    "end": "78970"
  },
  {
    "text": "the original opera browser and I am currently working on the Vivaldi browser and all my slides are on my Twitter than",
    "start": "78970",
    "end": "87220"
  },
  {
    "text": "my pin tweet so you can get them from there and all my photos are from pixabay",
    "start": "87220",
    "end": "92850"
  },
  {
    "text": "okay so we're gonna start with the two quotes from Vienna that were in the intro scene makes it easy to shoot",
    "start": "92850",
    "end": "100240"
  },
  {
    "text": "yourself in the foot C++ makes it harder but when you do it blows your whole leg off see that's what I the title came",
    "start": "100240",
    "end": "107470"
  },
  {
    "text": "from yeah so this is this is this is",
    "start": "107470",
    "end": "113710"
  },
  {
    "text": "like the the feeling most people have when when seeing C or C++ and I'd like",
    "start": "113710",
    "end": "120040"
  },
  {
    "text": "you to not get there so then we'll go and go with me on a second quote with in",
    "start": "120040",
    "end": "125770"
  },
  {
    "text": "C++ there's a much smaller and cleaner language struggling to get out and and that is the goal of this talk but first",
    "start": "125770",
    "end": "133239"
  },
  {
    "text": "we're going to go through all the pitfalls well not all of them but a",
    "start": "133239",
    "end": "138459"
  },
  {
    "text": "bunch okay so the first question when I was preparing this talk is what kind of specs exists in this base because we're",
    "start": "138459",
    "end": "144790"
  },
  {
    "text": "talking about how to do secure programming and there are certain resources and I ended",
    "start": "144790",
    "end": "151909"
  },
  {
    "text": "up landing on three that I wanted to mention so the first one is not that",
    "start": "151909",
    "end": "157670"
  },
  {
    "text": "famous even for C++ developers and there's only a few years old and it's called a C++ core guidelines basically",
    "start": "157670",
    "end": "164659"
  },
  {
    "text": "it's an outlining of how the top people in C++ feel that good C++ should be and",
    "start": "164659",
    "end": "172579"
  },
  {
    "text": "it is worth browsing but it is quite big",
    "start": "172579",
    "end": "177739"
  },
  {
    "text": "and the thing is that's what you will see from all these specs they're huge this is actually the smallest one so it",
    "start": "177739",
    "end": "185510"
  },
  {
    "text": "doesn't really lend itself to reading but this is a very important one",
    "start": "185510",
    "end": "192349"
  },
  {
    "text": "and it has to do with that with coding standards so secure coding standards almost many languages you'll find a",
    "start": "192349",
    "end": "198620"
  },
  {
    "text": "section for that language like Java has one this is the one for C++ it's 435",
    "start": "198620",
    "end": "204560"
  },
  {
    "text": "pages but in addition to this one of course you get to see one as well so it's a it's big and then you have this",
    "start": "204560",
    "end": "214010"
  },
  {
    "text": "one this is the common weakness enumeration I'm going to use it a lot throughout the presentation but it's",
    "start": "214010",
    "end": "220970"
  },
  {
    "text": "huge so but it's also worth browsing maybe III tweeted a link to the C slice",
    "start": "220970",
    "end": "228829"
  },
  {
    "text": "of it and and quite a few of the ones that are there I'm going to talk about today so the the whole idea is that",
    "start": "228829",
    "end": "237500"
  },
  {
    "text": "going programming C C++ it's basically there are a lot of dragonss",
    "start": "237500",
    "end": "243069"
  },
  {
    "text": "so this is the slide with the most text and I'm going to read it but it's very important so I'm going to read it",
    "start": "243069",
    "end": "249500"
  },
  {
    "text": "it's about undefined behavior which is a very important term in C++ examples of",
    "start": "249500",
    "end": "255470"
  },
  {
    "text": "undefined behavior are memory accesses outside of array bounds signed integer",
    "start": "255470",
    "end": "261289"
  },
  {
    "text": "overflow null pointer dereference modification of the same scalar more than once in an expression without",
    "start": "261289",
    "end": "267440"
  },
  {
    "text": "sequence points access to an object through a pointer of a different type etc",
    "start": "267440",
    "end": "273400"
  },
  {
    "text": "compilers are not required to diagnose undefined behavior although many simple",
    "start": "273400",
    "end": "279110"
  },
  {
    "text": "situations are diagnosed the compiled program is not required to",
    "start": "279110",
    "end": "284630"
  },
  {
    "text": "do anything meaningful okay and this is",
    "start": "284630",
    "end": "290570"
  },
  {
    "text": "the most important thing coming from a managed language and moving into the c c++ space this is a thing this is this",
    "start": "290570",
    "end": "301190"
  },
  {
    "text": "is in this is in the specification there are parts that are just considered to be",
    "start": "301190",
    "end": "307040"
  },
  {
    "text": "dragons and it's your your skill that is supposed to avoid these dragons so the",
    "start": "307040",
    "end": "315110"
  },
  {
    "text": "most important things there are three things that you should internalize with undefined behavior first of all don't",
    "start": "315110",
    "end": "320690"
  },
  {
    "text": "try to reason about it it's very it's it's the thing the programmers often do when they try to be cool they try to",
    "start": "320690",
    "end": "327170"
  },
  {
    "text": "think like yeah this is undefined behavior but and then they try to reason about it don't because it's getting",
    "start": "327170",
    "end": "333650"
  },
  {
    "text": "progressively difficult to do that and we'll get into why a little bit you can",
    "start": "333650",
    "end": "340010"
  },
  {
    "text": "just assume it crashes or it's never executed because that is allowed you can just skip it changing your compiler or",
    "start": "340010",
    "end": "347030"
  },
  {
    "text": "changing your compiler version or you're off to my station line level can break your application if you depend on",
    "start": "347030",
    "end": "352970"
  },
  {
    "text": "undefined behavior and this is very common and often how people discover",
    "start": "352970",
    "end": "358460"
  },
  {
    "text": "that they are depending on all an undefined behavior is that they changed out after my station level and suddenly",
    "start": "358460",
    "end": "364040"
  },
  {
    "text": "parts of their application don't work or it crashes and we're going to talk about",
    "start": "364040",
    "end": "370130"
  },
  {
    "text": "one of those cases now this is not undefined behavior what I'm going to talk about here it's basically in line",
    "start": "370130",
    "end": "375440"
  },
  {
    "text": "with specification and it's very famous in C++ see and it's caught it's the case",
    "start": "375440",
    "end": "381860"
  },
  {
    "text": "of the disappearing memset that's a very pretty picture oh sorry I'll go back you",
    "start": "381860",
    "end": "388430"
  },
  {
    "text": "can take oh no wrong way there you go take a picture it's pretty is one of my",
    "start": "388430",
    "end": "395720"
  },
  {
    "text": "favorite slides yes this is this is the perfect reading up sign okay so this is",
    "start": "395720",
    "end": "407590"
  },
  {
    "text": "the code from from this and they are enumerated these common vulnerabilities",
    "start": "407590",
    "end": "413240"
  },
  {
    "text": "things so you have C w/e 14 and it has actually this code",
    "start": "413240",
    "end": "420080"
  },
  {
    "text": "example in the text it's compiler removal of code to clear buffers and the reason why this became",
    "start": "420080",
    "end": "427460"
  },
  {
    "text": "very famous is that suddenly this is something that hit a lot of applications and the idea is you can see from the",
    "start": "427460",
    "end": "434060"
  },
  {
    "text": "code is that basically you are getting you're storing a password on the stack",
    "start": "434060",
    "end": "439400"
  },
  {
    "text": "but it could be anywhere and you're getting add the password from the user storing it in this PWD and then you're",
    "start": "439400",
    "end": "447380"
  },
  {
    "text": "doing a thing and when you're done doing the thing and using the password you are returning blah blah blah",
    "start": "447380",
    "end": "453110"
  },
  {
    "text": "and at the bottom you want to to zero out this part of memory that has the",
    "start": "453110",
    "end": "458330"
  },
  {
    "text": "password the reason for that is if you in any way somebody can get access to your memory in different kinds of ways",
    "start": "458330",
    "end": "464360"
  },
  {
    "text": "you don't want this to be lying around in your memory in plain text so basically you want to keep it as short",
    "start": "464360",
    "end": "470150"
  },
  {
    "text": "of a time as possible in memory but what happened was that with a modern",
    "start": "470150",
    "end": "476720"
  },
  {
    "text": "optimizers this was considered to be a dead store dead store meaning it is trying to write to memory that is never",
    "start": "476720",
    "end": "483170"
  },
  {
    "text": "read again a dead store is allowed to be optimized away and so what happened was",
    "start": "483170",
    "end": "491570"
  },
  {
    "text": "that programmers in good faith said okay I'm going to zero out this memory but the optimizer decided we don't have to",
    "start": "491570",
    "end": "498080"
  },
  {
    "text": "do this memset because nobody's going to read this and a lot of things were left",
    "start": "498080",
    "end": "503840"
  },
  {
    "text": "in memory that was never intended to be left in memory so the solution the the",
    "start": "503840",
    "end": "510980"
  },
  {
    "text": "solution that I hope will be the standard and is currently the standard in most platforms is the first one here",
    "start": "510980",
    "end": "516770"
  },
  {
    "text": "so it's basically exactly the same as mem said except as this underscore s and",
    "start": "516770",
    "end": "522380"
  },
  {
    "text": "it's guaranteed not to be optimized out so that was the solution that Windows had I had another solution from",
    "start": "522380",
    "end": "529220"
  },
  {
    "text": "previously secure zero memory and it's basically the same thing if you are in this",
    "start": "529220",
    "end": "536630"
  },
  {
    "text": "scenario if you have code like this in your application go read these pages ok",
    "start": "536630",
    "end": "542840"
  },
  {
    "text": "before don't don't take my word for it it has different it depends on which version of C you're in and all sorts of",
    "start": "542840",
    "end": "548540"
  },
  {
    "text": "things with platform you're on make sure you study this okay but this is the fun part so",
    "start": "548540",
    "end": "556950"
  },
  {
    "text": "we're gonna go through ten normal or common famous vulnerabilities and and",
    "start": "556950",
    "end": "564720"
  },
  {
    "text": "show you how they can appear in the code okay so the first ones are around",
    "start": "564720",
    "end": "570720"
  },
  {
    "text": "integers Oh was I too fast again see but it's my slides are up okay so",
    "start": "570720",
    "end": "577680"
  },
  {
    "text": "we're gonna do this go through unsigned integer wraparound sign integer overflow and numeric truncation error",
    "start": "577680",
    "end": "584960"
  },
  {
    "text": "so first unsigned integer wraparound and again you can see that I have the number for it for so you can go look it up",
    "start": "584960",
    "end": "591420"
  },
  {
    "text": "again but basically this code it looks like a lot but we're gonna see it several times so just pay attention the",
    "start": "591420",
    "end": "597300"
  },
  {
    "text": "first time and let you get it next time basically what it's trying to do is concatenate two strings it's not very",
    "start": "597300",
    "end": "603360"
  },
  {
    "text": "easy to see because the code is very big for this is C so there you go so basically here what you should pay",
    "start": "603360",
    "end": "609600"
  },
  {
    "text": "attention to is the first leg and the second leg the first leg is set to you int max which is the biggest number that",
    "start": "609600",
    "end": "618290"
  },
  {
    "text": "there's room for in an unsigned int the other one is 256 because it's a nice",
    "start": "618290",
    "end": "624120"
  },
  {
    "text": "number so and then you have the buffer that we're going to copy these two because basically we're gonna try to put",
    "start": "624120",
    "end": "630210"
  },
  {
    "text": "first and second inside a buff after each other so we're concatenate two strings we have a new string but the",
    "start": "630210",
    "end": "638160"
  },
  {
    "text": "buff is only 256 so we want to make sure that these two strings that we're gonna put together this is a this is a",
    "start": "638160",
    "end": "644910"
  },
  {
    "text": "contrived example but if it's on the slide right so we're gonna make sure and like if that you know if you add the",
    "start": "644910",
    "end": "650790"
  },
  {
    "text": "first length to the second length and it has to be less than or equal to 256 that",
    "start": "650790",
    "end": "657240"
  },
  {
    "text": "is our garden to make sure that we don't write outside above the problem is that",
    "start": "657240",
    "end": "663480"
  },
  {
    "text": "unsigned integer in c and c++ wraps this is not undefined behavior this is",
    "start": "663480",
    "end": "669570"
  },
  {
    "text": "defined behavior it wraps so if you have a first length then you add to the",
    "start": "669570",
    "end": "674910"
  },
  {
    "text": "second line then it actually turns out to be 255 which is less and",
    "start": "674910",
    "end": "682600"
  },
  {
    "text": "you go straight in and you copy woohoo way past so then we go to the next one",
    "start": "682600",
    "end": "690540"
  },
  {
    "text": "silent it overflow look the code very simple similar here and now we have an",
    "start": "690540",
    "end": "697630"
  },
  {
    "text": "integers and now we're using integers integer overflow in C and C++ is",
    "start": "697630",
    "end": "703240"
  },
  {
    "text": "undefined behavior remember undefined behavior is you have no idea what's going to happen and",
    "start": "703240",
    "end": "709089"
  },
  {
    "text": "basically this will be different on different compilers different platforms",
    "start": "709089",
    "end": "714310"
  },
  {
    "text": "you will see different results the actual number you get will be different when you overflow and also can n it also",
    "start": "714310",
    "end": "721720"
  },
  {
    "text": "depends on after my station level so this is like definitely undefined behavior territory but you have the same",
    "start": "721720",
    "end": "728500"
  },
  {
    "text": "idea we're trying to make sure that we're not writing over so we're checking",
    "start": "728500",
    "end": "733839"
  },
  {
    "text": "that first length and second length is less than 256 but unfortunately when the",
    "start": "733839",
    "end": "740170"
  },
  {
    "text": "sign enters your overflows it often overflows into negative numbers so this",
    "start": "740170",
    "end": "745480"
  },
  {
    "text": "will be a negative number which is less than 256 and we still go in and poof we write over lots of memory then we have",
    "start": "745480",
    "end": "753899"
  },
  {
    "text": "numeric truncation error in this case you're trying to put a number that is",
    "start": "753899",
    "end": "759339"
  },
  {
    "text": "too big into a into an integer that is too small basically 1 is so in this case an",
    "start": "759339",
    "end": "767680"
  },
  {
    "text": "unsigned integer you're trying to put an unsigned integer into an integer and you can see that in that line which says int",
    "start": "767680",
    "end": "773860"
  },
  {
    "text": "newland so in this case we're just putting the the expression into a",
    "start": "773860",
    "end": "780250"
  },
  {
    "text": "temporary variable because it makes it more readable right and the problem here",
    "start": "780250",
    "end": "785529"
  },
  {
    "text": "is that first line plus second line still fits in an unsigned int it will be you in max but unfortunately you're",
    "start": "785529",
    "end": "792279"
  },
  {
    "text": "putting it into an INT where it doesn't fit and this is not undefined behavior",
    "start": "792279",
    "end": "799139"
  },
  {
    "text": "this is implementation dependent behavior which basically is the same",
    "start": "799139",
    "end": "806079"
  },
  {
    "text": "problem it just means that this time the actual compiler will have to tell you what happens but it can depend between",
    "start": "806079",
    "end": "812110"
  },
  {
    "text": "implementations or compiler so for you it does really matter in an clang on Linux I get minus 1 and",
    "start": "812110",
    "end": "820550"
  },
  {
    "text": "minus 1 is less than 256 uh poof I'm we're back okay so then we're gonna do",
    "start": "820550",
    "end": "828930"
  },
  {
    "text": "stack place buffer overflow and heat base buffer overflow and buffer underwrite slash overflow underflow okay",
    "start": "828930",
    "end": "837030"
  },
  {
    "text": "this one's much shorter this is much easier yes so this is our main we have",
    "start": "837030",
    "end": "842670"
  },
  {
    "text": "our stack allocated buffer and then we just do a guess which reads from the",
    "start": "842670",
    "end": "848040"
  },
  {
    "text": "terminal and then you can just write something that's bigger and it will overwrite your stack okay today you",
    "start": "848040",
    "end": "855300"
  },
  {
    "text": "mostly get a warning if you use gets but you can use other things to achieve the exact same thing I just wanted to put",
    "start": "855300",
    "end": "860910"
  },
  {
    "text": "gets on one slide so there you go that's a good slide okay and then we're gonna",
    "start": "860910",
    "end": "867030"
  },
  {
    "text": "do a heap base buffer overflow so if your allocated memory on the heap and here since mine see we're doing it with",
    "start": "867030",
    "end": "872640"
  },
  {
    "text": "malloc and so allocating our tiny little buffer and then we're copying in one of",
    "start": "872640",
    "end": "880440"
  },
  {
    "text": "our command-line arguments again untrusted input when we're just writing it to a random place in memory and we're",
    "start": "880440",
    "end": "888570"
  },
  {
    "text": "writing outside again and this isn't the most important thing I think to know from both C and C++ is that you can do",
    "start": "888570",
    "end": "894240"
  },
  {
    "text": "this it is possible to write outside of your your specified region and you don't",
    "start": "894240",
    "end": "901050"
  },
  {
    "text": "have to get any kind of exception or or a segmentation fault you could get a segmentation fault especially in this",
    "start": "901050",
    "end": "907050"
  },
  {
    "text": "case you probably will get a segmentation fault but if there is valid memory right next to this and that's what they do when",
    "start": "907050",
    "end": "913080"
  },
  {
    "text": "they make an exploit using this technique they make sure that there is valid memory right next to it and then",
    "start": "913080",
    "end": "919560"
  },
  {
    "text": "they write into that okay but for under-ripe underflow and here we",
    "start": "919560",
    "end": "927690"
  },
  {
    "text": "have our fabulous low world now this code and I'll do a another version of",
    "start": "927690",
    "end": "933870"
  },
  {
    "text": "this code later it's not very interesting but basically the idea is to remove all trailing exes this case we",
    "start": "933870",
    "end": "940740"
  },
  {
    "text": "don't have any trailing exes which is very unfortunate because if you look at",
    "start": "940740",
    "end": "946140"
  },
  {
    "text": "the while loop it says we go in here as long as the current character isn't an ex and when you find an ex I want you",
    "start": "946140",
    "end": "954000"
  },
  {
    "text": "to put a zero there instead the problem is there are no X's in hello world and so this one will instead of writing past",
    "start": "954000",
    "end": "961920"
  },
  {
    "text": "the end this will go past the beginning",
    "start": "961920",
    "end": "966589"
  },
  {
    "text": "okay so let me go to use after free or double free these are pretty easy to to",
    "start": "967880",
    "end": "975660"
  },
  {
    "text": "write but it's not very easy to understand how you would end up that way so and I use after free you freed it and",
    "start": "975660",
    "end": "984030"
  },
  {
    "text": "then later you use it and generally this the the code that you will see will look",
    "start": "984030",
    "end": "989670"
  },
  {
    "text": "something like this because there's not something that will happen all the time it will generally happen in some kind of",
    "start": "989670",
    "end": "994710"
  },
  {
    "text": "weird branch in your code but generally in this case you're having some kind of error and so in the error handling code",
    "start": "994710",
    "end": "1001970"
  },
  {
    "text": "you're freeing the buffer and blah blah blah but you will often see is that people don't have proper testing for their error branches and so you will see",
    "start": "1001970",
    "end": "1010760"
  },
  {
    "text": "serious mistakes being only executed if you end up in an error situation so here",
    "start": "1010760",
    "end": "1017510"
  },
  {
    "text": "the buffer is used after free and double free is the same thing because generally",
    "start": "1017510",
    "end": "1023420"
  },
  {
    "text": "it's like somebody had looked at this code and then they ran it through some kind of memory analyzer thing and they",
    "start": "1023420",
    "end": "1028699"
  },
  {
    "text": "say oh no it says the buffer is leaked so somebody just puts up this free",
    "start": "1028699",
    "end": "1033800"
  },
  {
    "text": "buffer at the bottom but unfortunately somebody before way up in the code had",
    "start": "1033800",
    "end": "1038959"
  },
  {
    "text": "already freed the buffer in an error again it's very common that this is the these are the kinds of cases where you",
    "start": "1038959",
    "end": "1045110"
  },
  {
    "text": "have this okay and the last two is incorrect type conversion /cast and use",
    "start": "1045110",
    "end": "1052280"
  },
  {
    "text": "of external format string so this is",
    "start": "1052280",
    "end": "1058210"
  },
  {
    "text": "very recognizable to people where it's and C and C++ was very weird for people coming from other kinds of languages in",
    "start": "1058210",
    "end": "1066430"
  },
  {
    "text": "C and C++ you can hard cast something to something it's not it's a feature",
    "start": "1066430",
    "end": "1075669"
  },
  {
    "text": "so and we call this in C++ we call it a seat cast or a hard cast and you can see",
    "start": "1078030",
    "end": "1085950"
  },
  {
    "text": "here on the bottom line that a is being cast to a B when a is clearly not a B in",
    "start": "1085950",
    "end": "1093090"
  },
  {
    "text": "any sense and this can this can be used",
    "start": "1093090",
    "end": "1098580"
  },
  {
    "text": "for many different things because you know that the pointer to a is a valid pointer pointing to valid memory and so",
    "start": "1098580",
    "end": "1105180"
  },
  {
    "text": "so you have it is allocated and and now you can you can manipulate it in",
    "start": "1105180",
    "end": "1110790"
  },
  {
    "text": "different ways by pointing a B at it instead it's very useful okay and then",
    "start": "1110790",
    "end": "1118740"
  },
  {
    "text": "the last one of these common vulnerabilities is the use of an external format string and this was a",
    "start": "1118740",
    "end": "1123960"
  },
  {
    "text": "very popular exploit and it is a little",
    "start": "1123960",
    "end": "1130380"
  },
  {
    "text": "bit similar to a sequel injection the idea is that you are taking in some kind",
    "start": "1130380",
    "end": "1136950"
  },
  {
    "text": "of string from the user and then you are actually treating it like safe data in",
    "start": "1136950",
    "end": "1143330"
  },
  {
    "text": "this case here I I'm running this application here it takes the format",
    "start": "1143330",
    "end": "1149130"
  },
  {
    "text": "string is the first argument and some kind of other string as the second argument and then it's supposed to print that string with that format sounds very",
    "start": "1149130",
    "end": "1157140"
  },
  {
    "text": "useful so basically I just pass in % as yes great I want to say hello world that",
    "start": "1157140",
    "end": "1163410"
  },
  {
    "text": "also want to present and do % D and then I'm printing random memory it's great",
    "start": "1163410",
    "end": "1171140"
  },
  {
    "text": "you can do all sorts of things here anyway so that was that was the danger",
    "start": "1171140",
    "end": "1177270"
  },
  {
    "text": "the Dragons right and this is this is my opinionated part of the talk and it's",
    "start": "1177270",
    "end": "1182910"
  },
  {
    "text": "called the eight I'd really rather you didn't and for people don't know sperm",
    "start": "1182910",
    "end": "1189150"
  },
  {
    "text": "test affair you know someone is really great so you should look it up it's also",
    "start": "1189150",
    "end": "1194580"
  },
  {
    "text": "it's another word for it is the eight condiments and yes anyway so we're gonna",
    "start": "1194580",
    "end": "1201360"
  },
  {
    "text": "go through but before I do because I know this is going to go home video and",
    "start": "1201360",
    "end": "1206429"
  },
  {
    "text": "C++ programmers are very opinionated fearful that so don't take me too seriously but",
    "start": "1206429",
    "end": "1211470"
  },
  {
    "text": "seriously think about it okay so these",
    "start": "1211470",
    "end": "1216539"
  },
  {
    "text": "are my eight and I'm going to go through for them more in detail and for them not",
    "start": "1216539",
    "end": "1221640"
  },
  {
    "text": "so much so the first four is I'd really rather you didn't you see I'd really",
    "start": "1221640",
    "end": "1230640"
  },
  {
    "text": "rather you didn't allocate with new I'd really rather you didn't do math a lot",
    "start": "1230640",
    "end": "1236419"
  },
  {
    "text": "I'd really rather you didn't trust your external input the other ones were write",
    "start": "1236419",
    "end": "1242850"
  },
  {
    "text": "clever code use pointers a lot you shared pointer a lot and use threads",
    "start": "1242850",
    "end": "1248429"
  },
  {
    "text": "a lot okay so the first one and this is going to be the longest one I'd really",
    "start": "1248429",
    "end": "1254520"
  },
  {
    "text": "rather you didn't use C and you saw all",
    "start": "1254520",
    "end": "1259590"
  },
  {
    "text": "of the problems that I went through and those are all of those programs are C",
    "start": "1259590",
    "end": "1264960"
  },
  {
    "text": "programs and I wrote them intentionally as C because yes you can write C and C++",
    "start": "1264960",
    "end": "1270690"
  },
  {
    "text": "but I'd really rather you didn't if you're going to concatenate strings this",
    "start": "1270690",
    "end": "1277440"
  },
  {
    "text": "is how it's done do it with C++ you do it with A+ you",
    "start": "1277440",
    "end": "1283919"
  },
  {
    "text": "take first plus second it's really not",
    "start": "1283919",
    "end": "1289650"
  },
  {
    "text": "harder than this this is how you're concatenate two strings in C++ if you're",
    "start": "1289650",
    "end": "1297090"
  },
  {
    "text": "going to read from the command line into a string or from a string and out you do",
    "start": "1297090",
    "end": "1304770"
  },
  {
    "text": "it like this don't be allocating all sorts of buffers don't be reading stuff into stuff that's",
    "start": "1304770",
    "end": "1310049"
  },
  {
    "text": "too small this will size itself properly this is how we do it in C++ you can see",
    "start": "1310049",
    "end": "1317940"
  },
  {
    "text": "that we're we're making an STD string first by just setting it equal to our v1",
    "start": "1317940",
    "end": "1324809"
  },
  {
    "text": "that will make a string of the proper size you don't have to make stuff up",
    "start": "1324809",
    "end": "1332480"
  },
  {
    "text": "okay and use algorithms so this is this is the really modern C++ way of removing",
    "start": "1334780",
    "end": "1342790"
  },
  {
    "text": "the exes at the end of a string so first here in the first line we have lambda we",
    "start": "1342790",
    "end": "1349780"
  },
  {
    "text": "can do lambdas in c++ use lambdas and suppose plus second one is we're using",
    "start": "1349780",
    "end": "1355120"
  },
  {
    "text": "that land lambda in our find if and we're searching from the end and we're",
    "start": "1355120",
    "end": "1361930"
  },
  {
    "text": "stopping when the character is not an X then we're using erase on our string",
    "start": "1361930",
    "end": "1370830"
  },
  {
    "text": "from that point until the end notice one thing that's very important here there's",
    "start": "1370830",
    "end": "1377020"
  },
  {
    "text": "no math there's no integers anywhere here and then you have C++ casts we",
    "start": "1377020",
    "end": "1386740"
  },
  {
    "text": "heard of our C cast and C and hard cats well this is how if you really really really really have to and I'd really",
    "start": "1386740",
    "end": "1393910"
  },
  {
    "text": "rather you didn't have pointers I'd really rather you didn't allocate with",
    "start": "1393910",
    "end": "1399640"
  },
  {
    "text": "new but if you have and you are then this is how it's done so in this case we",
    "start": "1399640",
    "end": "1407500"
  },
  {
    "text": "have a spider-man and we have an Ironman and we're allocating a spider-man and then we want our Ironman to point to our",
    "start": "1407500",
    "end": "1415900"
  },
  {
    "text": "spider-man but that's not right because a spider - not an Ironman and if you",
    "start": "1415900",
    "end": "1422200"
  },
  {
    "text": "compile this you will have a compile time error saying that a static Astros",
    "start": "1422200",
    "end": "1428200"
  },
  {
    "text": "but this is with clang static cast from spider-man to Ironman is an error which",
    "start": "1428200",
    "end": "1435280"
  },
  {
    "text": "and these are which are not related by inheritance is not alone and then it shows exactly where this is the thing",
    "start": "1435280",
    "end": "1443080"
  },
  {
    "text": "that I love like lying they have this like really really pretty little arrows it's like ah I love it",
    "start": "1443080",
    "end": "1450130"
  },
  {
    "text": "anyway okay so if you have to do a cast and you're thinking you're doing some",
    "start": "1450130",
    "end": "1456760"
  },
  {
    "text": "kind of relatable things then use the static cast you will get a compile time error if it's not okay",
    "start": "1456760",
    "end": "1465490"
  },
  {
    "text": "the second one I'd really rather you didn't allocate with new now the ones that you see next to",
    "start": "1465490",
    "end": "1470789"
  },
  {
    "text": "here there are references to to the core guidelines and I'm doing that mostly because that's works really effectively",
    "start": "1470789",
    "end": "1476669"
  },
  {
    "text": "with C++ developers if we refer to the court guidelines because it's like the law but anyway so you can look them up so",
    "start": "1476669",
    "end": "1486209"
  },
  {
    "text": "this is actually these next couple of slides are from a talk that I did earlier this fall which is online you",
    "start": "1486209",
    "end": "1491700"
  },
  {
    "text": "can watch it it's C++ for Java developers but basically this section is",
    "start": "1491700",
    "end": "1498239"
  },
  {
    "text": "that I don't want you to to allocate using new and the reason for that is that if you have new you get a pointer",
    "start": "1498239",
    "end": "1503629"
  },
  {
    "text": "on a pointer is something that points to 2 somewhere in memory and this is not like a pointer in any kind of other",
    "start": "1503629",
    "end": "1510209"
  },
  {
    "text": "language this is a raw memory address and it is dangerous to have a raw memory",
    "start": "1510209",
    "end": "1517440"
  },
  {
    "text": "address because you don't really know anything about the memory it points to all you know is what kind of pointer",
    "start": "1517440",
    "end": "1523950"
  },
  {
    "text": "you're holding but this object could have been deleted by somebody else this pointer can",
    "start": "1523950",
    "end": "1529950"
  },
  {
    "text": "actually be pointing to totally different type of object you don't know anything about your pointers so I'd",
    "start": "1529950",
    "end": "1535049"
  },
  {
    "text": "really rather you didn't have pointers and how you get pointers with with new so what I would like you to do is use",
    "start": "1535049",
    "end": "1540899"
  },
  {
    "text": "the stack so you can allocate on the stack here Oh H semicolon gives you a",
    "start": "1540899",
    "end": "1547919"
  },
  {
    "text": "hero it's on the stack and I'd like you to use this back so first of all here",
    "start": "1547919",
    "end": "1555690"
  },
  {
    "text": "you have this hero and it's a stack hero because it lives on the stack but you might also need to allocate something on",
    "start": "1555690",
    "end": "1561629"
  },
  {
    "text": "the heap on the bottom you see a normal normal new where you getting a pointer",
    "start": "1561629",
    "end": "1568649"
  },
  {
    "text": "back and I'd rather you didn't do that so then you have the one above so if you have to allocate memory on the heap then",
    "start": "1568649",
    "end": "1576179"
  },
  {
    "text": "do it with a unique pointer and hold the unique pointer on the stack or transitively on the stack so something",
    "start": "1576179",
    "end": "1583679"
  },
  {
    "text": "on your stack is holding something that's holding something that's so that",
    "start": "1583679",
    "end": "1588869"
  },
  {
    "text": "when the thing on the stack goes out of scope transitively all of these objects are deleted this will avoid both double",
    "start": "1588869",
    "end": "1598139"
  },
  {
    "text": "deletion and will also avoid memory leaks and it will also avoid use",
    "start": "1598139",
    "end": "1605549"
  },
  {
    "text": "after free because these things are owned and nobody holds a pointer to",
    "start": "1605549",
    "end": "1611940"
  },
  {
    "text": "random memory so here you have and this",
    "start": "1611940",
    "end": "1618119"
  },
  {
    "text": "is some people like to say that this is a deterministic garbage collection where",
    "start": "1618119",
    "end": "1624809"
  },
  {
    "text": "the garbage collection happens at the curly bracket so basically when the string goes out of",
    "start": "1624809",
    "end": "1630480"
  },
  {
    "text": "scope its destructor will be called when it hits the curly bracket and the object is the allocated so using this is how",
    "start": "1630480",
    "end": "1640080"
  },
  {
    "text": "you control memory lifetimes and that's what it says here so using the stack to",
    "start": "1640080",
    "end": "1645869"
  },
  {
    "text": "manage resource lifetimes and does not only have to be memory it could be any kinds of different kinds of resources",
    "start": "1645869",
    "end": "1650940"
  },
  {
    "text": "like locks you want to release or file handles so you want to release any kind",
    "start": "1650940",
    "end": "1656730"
  },
  {
    "text": "of resource can be used in the same way and this is how it's done so in this",
    "start": "1656730",
    "end": "1663570"
  },
  {
    "text": "case you have two different types of pointers you have the unique pointer which is how I would like you to",
    "start": "1663570",
    "end": "1670009"
  },
  {
    "text": "allocate a heap memory but you also have the possibility of using shared pointer",
    "start": "1670009",
    "end": "1675299"
  },
  {
    "text": "now if you're coming from managed language that is very appealing that's why it's it's a separate point on my",
    "start": "1675299",
    "end": "1681629"
  },
  {
    "text": "list I'd read the rather you didn't you share pointers a lot and the reason for that is in C++ on + C we are we are it",
    "start": "1681629",
    "end": "1691799"
  },
  {
    "text": "is a culture of managing your own memory you have to somebody owns this memory somebody's in charge of this memory we",
    "start": "1691799",
    "end": "1697019"
  },
  {
    "text": "are like this is like a thing if you want to program like a C++ programmer you have to have control of your memory",
    "start": "1697019",
    "end": "1703440"
  },
  {
    "text": "and know who has it and how long it lives and share pointers have all the",
    "start": "1703440",
    "end": "1711289"
  },
  {
    "text": "problems of reference counting and that it you could have circular ownership and",
    "start": "1711289",
    "end": "1719850"
  },
  {
    "text": "it will never disappear ok so those were",
    "start": "1719850",
    "end": "1726299"
  },
  {
    "text": "my two longest ones and this is probably my most controversial one I'd really",
    "start": "1726299",
    "end": "1733200"
  },
  {
    "text": "rather you didn't to math a lot now you saw from from all",
    "start": "1733200",
    "end": "1738780"
  },
  {
    "text": "of the vulnerability sites right that was that was a problem all of that all of the wrapping and overflowing and all",
    "start": "1738780",
    "end": "1746010"
  },
  {
    "text": "of these things ends up in a bad place and most of the time and you use these",
    "start": "1746010",
    "end": "1751920"
  },
  {
    "text": "things for things like copying strings and copying buffers and copying arrays",
    "start": "1751920",
    "end": "1757380"
  },
  {
    "text": "and then you have to have pointers and all sorts of things I think you shouldn't be doing and the reason for",
    "start": "1757380",
    "end": "1764250"
  },
  {
    "text": "that and this is true in even in managed languages primitive types have no",
    "start": "1764250",
    "end": "1769980"
  },
  {
    "text": "semantics they don't tell you anything if you have an int it isn't a thing it's",
    "start": "1769980",
    "end": "1775440"
  },
  {
    "text": "just an int it doesn't tell you what it is and it doesn't have any kind of of",
    "start": "1775440",
    "end": "1780560"
  },
  {
    "text": "semantics to it so if you have an int and you say that as somebody's age an int can be negative it doesn't make",
    "start": "1780560",
    "end": "1787230"
  },
  {
    "text": "sense somebody's age cannot be negative but what it does have so it has no semantics",
    "start": "1787230",
    "end": "1793110"
  },
  {
    "text": "but it has limits normal people are used to you can count to infinity you can't counter an infinity with a primitive",
    "start": "1793110",
    "end": "1799110"
  },
  {
    "text": "type it's not possible so it's actually quite a bad representation for the",
    "start": "1799110",
    "end": "1804960"
  },
  {
    "text": "things that were using it for so what I would like you to do is to reduce the",
    "start": "1804960",
    "end": "1811860"
  },
  {
    "text": "value space of what is correct values to keep and also to keep within defined",
    "start": "1811860",
    "end": "1817590"
  },
  {
    "text": "behavior to make sure if you are using an int and you are incrementing it or if",
    "start": "1817590",
    "end": "1822720"
  },
  {
    "text": "you're using an int and you're getting that number from somebody else you are very quickly landing in",
    "start": "1822720",
    "end": "1829920"
  },
  {
    "text": "undefined behavior so I'd rather really rather you didn't so we're going to look",
    "start": "1829920",
    "end": "1836550"
  },
  {
    "text": "at a couple a couple of different things in C++ around this that I'd rather use",
    "start": "1836550",
    "end": "1843660"
  },
  {
    "text": "the first one is enum class and it's quite recent in the newer versions of",
    "start": "1843660",
    "end": "1850950"
  },
  {
    "text": "C++ um so most of you are probably used to eat UM's and C and it's C + bus and",
    "start": "1850950",
    "end": "1859200"
  },
  {
    "text": "those are basically implicitly converted to int again I'd really rather you",
    "start": "1859200",
    "end": "1864600"
  },
  {
    "text": "didn't have any it's enum class has no implicit conversion to int it's a",
    "start": "1864600",
    "end": "1870630"
  },
  {
    "text": "thing it's a thing and it can be many you can have it have many things so in",
    "start": "1870630",
    "end": "1877800"
  },
  {
    "text": "this case normally you could just write enum class direction but in this case I've been creative so I'm doing enum",
    "start": "1877800",
    "end": "1883200"
  },
  {
    "text": "class direction : car and then I can actually assign a specific character to",
    "start": "1883200",
    "end": "1889470"
  },
  {
    "text": "each of my directions so north east west and south and if I were trying if you",
    "start": "1889470",
    "end": "1895380"
  },
  {
    "text": "skip the middle part and if I tried to print it it wouldn't print anything I",
    "start": "1895380",
    "end": "1901520"
  },
  {
    "text": "actually have to provide a function to show what I would like to be printed if",
    "start": "1901520",
    "end": "1907560"
  },
  {
    "text": "you try to print this enum there is no implicit conversion of an",
    "start": "1907560",
    "end": "1913440"
  },
  {
    "text": "enum class you know to anything this is",
    "start": "1913440",
    "end": "1919110"
  },
  {
    "text": "type safe so two different ones then that's a problem from C if you have an",
    "start": "1919110",
    "end": "1924210"
  },
  {
    "text": "enum a and an enum B and they are both implicitly converted to one if you",
    "start": "1924210",
    "end": "1930810"
  },
  {
    "text": "compare them they will be the same because you have an implicit conversion to int in this case that will not happen",
    "start": "1930810",
    "end": "1937410"
  },
  {
    "text": "they will be different even if you have explicitly said that North is more than",
    "start": "1937410",
    "end": "1942690"
  },
  {
    "text": "East is two there these are type safe enums this one is not so famous but i",
    "start": "1942690",
    "end": "1951570"
  },
  {
    "text": "like it because it's kind of pretty yeah so this is string literals what",
    "start": "1951570",
    "end": "1957060"
  },
  {
    "text": "you'll see here is i'm and we're using also auto because c++ as auto auto",
    "start": "1957060",
    "end": "1963030"
  },
  {
    "text": "heroes and then you have spiderman and you have this like lowercase s Ahriman",
    "start": "1963030",
    "end": "1968280"
  },
  {
    "text": "lowercase s and when a woman lowercase s and this creates an object which is a",
    "start": "1968280",
    "end": "1974190"
  },
  {
    "text": "string little and we're getting it from this using namespace thing on top and in",
    "start": "1974190",
    "end": "1981960"
  },
  {
    "text": "my for loop I'm looping through all my hairs of course you can have this curly bracket thing in my for loop and that's",
    "start": "1981960",
    "end": "1988520"
  },
  {
    "text": "what I did in the beginning but it didn't look good on the slide so I got it's on line but basically it means that",
    "start": "1988520",
    "end": "1995250"
  },
  {
    "text": "you can put as this list of strings and loops through them and these",
    "start": "1995250",
    "end": "2000550"
  },
  {
    "text": "kinds of constructs are useful usually in tests where you know what you're going to be looking through in like",
    "start": "2000550",
    "end": "2006700"
  },
  {
    "text": "production code I in my experience you don't have a lot of this but in tests you generally have a lot so that's",
    "start": "2006700",
    "end": "2013150"
  },
  {
    "text": "string literals there are no int there are no numbers here and then okay let's",
    "start": "2013150",
    "end": "2020830"
  },
  {
    "text": "say you have to have some numbers now I'd like you to make those numbers a little bit more type safe so here you",
    "start": "2020830",
    "end": "2029890"
  },
  {
    "text": "have an H which is 24 underscore hours and then you have a D which is seven",
    "start": "2029890",
    "end": "2036400"
  },
  {
    "text": "underscore days and then I try to add h2 D and I get an error from clanging again",
    "start": "2036400",
    "end": "2044590"
  },
  {
    "text": "fabulous error saying that you can't add hours to days remember what I said that",
    "start": "2044590",
    "end": "2051700"
  },
  {
    "text": "integers have and and and primitive types have no semantics what I've done",
    "start": "2051700",
    "end": "2057340"
  },
  {
    "text": "here is I've added semantics and I'll show you the code to make this right now",
    "start": "2057340",
    "end": "2063780"
  },
  {
    "text": "okay so first of all we're making two types of structs they have both of them",
    "start": "2063780",
    "end": "2069100"
  },
  {
    "text": "are the same you have an hour's it has takes an unsigned long long and it",
    "start": "2069100",
    "end": "2074350"
  },
  {
    "text": "basically just stores it this is a structure all of this is public and days",
    "start": "2074350",
    "end": "2079720"
  },
  {
    "text": "the same so no magic then I make a",
    "start": "2079720",
    "end": "2087720"
  },
  {
    "text": "operator quote unquote the operator",
    "start": "2087900",
    "end": "2095169"
  },
  {
    "text": "quote unquote I put this this suffix that I would like to have to my number so underscore hours or underscore days",
    "start": "2095169",
    "end": "2103570"
  },
  {
    "text": "and this is a kind of a builder it calls",
    "start": "2103570",
    "end": "2108580"
  },
  {
    "text": "the constructor for the different kinds of classes or instructs in this case and",
    "start": "2108580",
    "end": "2114420"
  },
  {
    "text": "so that the things that you get back if we go back a bit so 24 underscore hours",
    "start": "2114420",
    "end": "2121600"
  },
  {
    "text": "will make an object of type of type",
    "start": "2121600",
    "end": "2127030"
  },
  {
    "text": "hours with a passing 24 as the constructor argument which means that",
    "start": "2127030",
    "end": "2133750"
  },
  {
    "text": "later when you try to invoke operator plus on these two things these are two objects",
    "start": "2133750",
    "end": "2139720"
  },
  {
    "text": "of two different classes so unless you have made an operator that makes it possible to add hours to days this will",
    "start": "2139720",
    "end": "2147100"
  },
  {
    "text": "fail compile time let's see okay and",
    "start": "2147100",
    "end": "2154590"
  },
  {
    "text": "then you have size T and if there is something in my talk that I'm most kind",
    "start": "2154590",
    "end": "2161620"
  },
  {
    "text": "of like I'm not totally sure about it's this I would like to say that you should",
    "start": "2161620",
    "end": "2167140"
  },
  {
    "text": "use size T for all your sizes and I'm pretty close to that in my head which",
    "start": "2167140",
    "end": "2172180"
  },
  {
    "text": "means 95% basically size T is the result",
    "start": "2172180",
    "end": "2180160"
  },
  {
    "text": "of doing a size up it's also often now the result that you will get from all of you lengths or sizes of any kind of",
    "start": "2180160",
    "end": "2186760"
  },
  {
    "text": "container the one problem that I have with size T",
    "start": "2186760",
    "end": "2193000"
  },
  {
    "text": "is that it is platform-specific and it is also 60 to 32 bit specific which",
    "start": "2193000",
    "end": "2201160"
  },
  {
    "text": "means if you're going to pass a size T from a 32-bit application to a 64-bit application if you have that they are",
    "start": "2201160",
    "end": "2208690"
  },
  {
    "text": "not going to be the same size so it's I would have liked them to both be the",
    "start": "2208690",
    "end": "2215290"
  },
  {
    "text": "same size but but that's how it is but within your own application using size T for size T for all of your sizes is good",
    "start": "2215290",
    "end": "2221800"
  },
  {
    "text": "it is an unsigned integer type so you will have well-defined wrap it's the",
    "start": "2221800",
    "end": "2230230"
  },
  {
    "text": "best you can do you will wrap you won't wrap two to two negative numbers but you will wrap again it's only if you have to",
    "start": "2230230",
    "end": "2238210"
  },
  {
    "text": "use a number right okay and this is my last big one it's not that big and it's",
    "start": "2238210",
    "end": "2246730"
  },
  {
    "text": "quite famous so I'm not going to talk so much about it and it is I really rather you didn't trust your external input and",
    "start": "2246730",
    "end": "2255310"
  },
  {
    "text": "this is the concept of taint which a lot of and which is quite famous a lot of",
    "start": "2255310",
    "end": "2262960"
  },
  {
    "text": "static analysis but is basically if this number is coming from or this input is coming from an untrusted source it",
    "start": "2262960",
    "end": "2270110"
  },
  {
    "text": "should take everything it touches so to stop this you have to validate it",
    "start": "2270110",
    "end": "2277670"
  },
  {
    "text": "you have to analyze it you have to sanitize it before you pass it in so you just stop the taint as fast as you can",
    "start": "2277670",
    "end": "2283820"
  },
  {
    "text": "and this is true for any kind of input in any kind of application it's not C++ specific but you saw me doing it so like",
    "start": "2283820",
    "end": "2290750"
  },
  {
    "text": "not doing this several times I was taking command-line arguments I was",
    "start": "2290750",
    "end": "2295970"
  },
  {
    "text": "reading things from from from the user I and but this could be many different",
    "start": "2295970",
    "end": "2302240"
  },
  {
    "text": "things it could be in media files you will have or any kind of packet which gives you like a length field or",
    "start": "2302240",
    "end": "2308600"
  },
  {
    "text": "anything that you use when you parse these are very often used in",
    "start": "2308600",
    "end": "2315320"
  },
  {
    "text": "vulnerabilities especially like these types of header things are used very much in vulnerabilities against media",
    "start": "2315320",
    "end": "2321760"
  },
  {
    "text": "applications because it is it is external input you're getting in if",
    "start": "2321760",
    "end": "2327080"
  },
  {
    "text": "you're parsing it and you're treating it as true then you're vulnerable so basically here is look at all your input",
    "start": "2327080",
    "end": "2334360"
  },
  {
    "text": "and the last these last four are there",
    "start": "2334360",
    "end": "2340550"
  },
  {
    "text": "there are more general high-level things I'd really rather you didn't write clever code and the reason for that and",
    "start": "2340550",
    "end": "2349310"
  },
  {
    "text": "and it's true there's a quote I don't remember who said it but basically it says that if you write code that is the",
    "start": "2349310",
    "end": "2357710"
  },
  {
    "text": "most advanced code you can write something like that I don't remember the exact quote and then you are not capable of debugging it because debugging is",
    "start": "2357710",
    "end": "2365030"
  },
  {
    "text": "harder than coding the idea here is try to write code which is as simple as you",
    "start": "2365030",
    "end": "2371630"
  },
  {
    "text": "can it might not look impressive but the thing is code is more is read more than",
    "start": "2371630",
    "end": "2378050"
  },
  {
    "text": "it's written in general almost every line of code in your application is read",
    "start": "2378050",
    "end": "2383270"
  },
  {
    "text": "many many more times than it is written so don't try to be clever because you might think oh but it's perfectly",
    "start": "2383270",
    "end": "2389480"
  },
  {
    "text": "understandable I understand all right now okay for it you can start with thinking of your colleague will your colleague understand it right away and",
    "start": "2389480",
    "end": "2396250"
  },
  {
    "text": "then will your future self understand so don't be clever I'd really rather you",
    "start": "2396250",
    "end": "2405690"
  },
  {
    "text": "didn't use pointers a lot and I go through this a lot in my talk for the C++ for Java developers because this is",
    "start": "2405690",
    "end": "2412380"
  },
  {
    "text": "a problem that they end up in often it is because like I said before it's dangerous territory almost all of the",
    "start": "2412380",
    "end": "2420060"
  },
  {
    "text": "vulnerabilities and the hard core bugs that you get in C++ are because you're",
    "start": "2420060",
    "end": "2426270"
  },
  {
    "text": "using pointers this is where you get all of your weird stuff of double freeze and",
    "start": "2426270",
    "end": "2432060"
  },
  {
    "text": "use after free and memory leaks and all of the really horrible segmentation",
    "start": "2432060",
    "end": "2437520"
  },
  {
    "text": "faulty stuff is because you're using pointers so try to eliminate using pointers and the best way to do that is",
    "start": "2437520",
    "end": "2444060"
  },
  {
    "text": "start by saying I'm not gonna free I'm not gonna new anything try you might not",
    "start": "2444060",
    "end": "2450690"
  },
  {
    "text": "be able to pull it off but you might be able to isolate the code that does the new in very few places in your code this",
    "start": "2450690",
    "end": "2460710"
  },
  {
    "text": "I said before I'd really rather you didn't use shared pointer a lot and and the thing is a lot of people feel like",
    "start": "2460710",
    "end": "2466020"
  },
  {
    "text": "this is very appealing and I've talked a lot about it with other C++ programmers and I would say I would like you to use",
    "start": "2466020",
    "end": "2473220"
  },
  {
    "text": "stack allocated memory either using the memory on the stack or using some kind",
    "start": "2473220",
    "end": "2478619"
  },
  {
    "text": "of container which is has a handle on the stack which most containers have in the standard library so I say use that",
    "start": "2478619",
    "end": "2485700"
  },
  {
    "text": "for 95% of your memory 95% in your",
    "start": "2485700",
    "end": "2490890"
  },
  {
    "text": "memory should be standard containers that you have in the stack or your own",
    "start": "2490890",
    "end": "2496200"
  },
  {
    "text": "memory on the stack basically your stack don't do anything fancy don't make your own containers 95% to",
    "start": "2496200",
    "end": "2503640"
  },
  {
    "text": "remember she'd be here and then when you have to implement your own thing then",
    "start": "2503640",
    "end": "2509790"
  },
  {
    "text": "use unique pointer for the next X number percent I'm not sure well you can adjust",
    "start": "2509790",
    "end": "2516840"
  },
  {
    "text": "a little bit but not much but then when you come to shared pointers I'd really rather you didn't use shared porter's at",
    "start": "2516840",
    "end": "2522869"
  },
  {
    "text": "all but there is a case where where share pointers is in use often and it is",
    "start": "2522869",
    "end": "2529710"
  },
  {
    "text": "for objects that you you pass but you don't really know when",
    "start": "2529710",
    "end": "2535260"
  },
  {
    "text": "everybody's finished with it generally that will be stuff like buffers buffers with input that you give to your",
    "start": "2535260",
    "end": "2542550"
  },
  {
    "text": "consumers they might have different kinds of threads and different kinds there might be in different applications",
    "start": "2542550",
    "end": "2547680"
  },
  {
    "text": "so there there is very unsure life time that's the only case really I see",
    "start": "2547680",
    "end": "2554910"
  },
  {
    "text": "they're using shared pointers is good but there might be others but basically I saying don't you share pointers at",
    "start": "2554910",
    "end": "2560130"
  },
  {
    "text": "least not a lot I'd really rather you didn't use threads a lot now this is",
    "start": "2560130",
    "end": "2565500"
  },
  {
    "text": "controversial in many languages and and there are basically two reasons first of",
    "start": "2565500",
    "end": "2573240"
  },
  {
    "text": "all threading is hard using threading and shared resources is",
    "start": "2573240",
    "end": "2578250"
  },
  {
    "text": "difficult if yes",
    "start": "2578250",
    "end": "2582920"
  },
  {
    "text": "yeah there are you know and he said that there dotnet Oracle let's calm that says",
    "start": "2602950",
    "end": "2611900"
  },
  {
    "text": "there to people just to do threading in the world and I would say you can do",
    "start": "2611900",
    "end": "2618349"
  },
  {
    "text": "threading if you don't have shared state",
    "start": "2618349",
    "end": "2623260"
  },
  {
    "text": "the thing is very often shared state will slip in later that that's the thing",
    "start": "2623560",
    "end": "2633109"
  },
  {
    "text": "you you start off as like I have made this fabulous architecture these things will never touch but the thing is they",
    "start": "2633109",
    "end": "2638780"
  },
  {
    "text": "are in the same memory address space then some intern let's call them that",
    "start": "2638780",
    "end": "2647830"
  },
  {
    "text": "figures out what the thing is this like I'm not saying it's his fault and then",
    "start": "2647830",
    "end": "2654349"
  },
  {
    "text": "you know accidents happen no I don't",
    "start": "2654349",
    "end": "2664640"
  },
  {
    "text": "have any person in mind um okay so so basically I'd really rather you didn't use threads a lot and that first reason",
    "start": "2664640",
    "end": "2671180"
  },
  {
    "text": "this is very difficult to do well a second reason is if you really need concurrency today because threads were",
    "start": "2671180",
    "end": "2679010"
  },
  {
    "text": "really fashionable in the early 2000s where we had hyper threading and it was very cool um today if you really need",
    "start": "2679010",
    "end": "2687260"
  },
  {
    "text": "concurrency i'd say makes us do the job for you and separate those address spaces make processes instead there's no",
    "start": "2687260",
    "end": "2697130"
  },
  {
    "text": "shared state make processes communicate override PC you still had to have some",
    "start": "2697130",
    "end": "2704210"
  },
  {
    "text": "sort of communication if you had to communicate now make it explicit make it non accidental if somebody's going to",
    "start": "2704210",
    "end": "2711320"
  },
  {
    "text": "try to share state it's going to they are gonna have to work for it so and and this beacon can easily be",
    "start": "2711320",
    "end": "2718670"
  },
  {
    "text": "scheduled on different kinds of CPUs even on bad architectures this can be scheduled really well and there are",
    "start": "2718670",
    "end": "2724580"
  },
  {
    "text": "really good IPC mechanisms out there so I'd really rather you didn't use",
    "start": "2724580",
    "end": "2729830"
  },
  {
    "text": "threads use processes if you need concurrency so that's the meat of my",
    "start": "2729830",
    "end": "2737630"
  },
  {
    "text": "talk is done and this is the one where it's very short but it's very important so let's do it",
    "start": "2737630",
    "end": "2743420"
  },
  {
    "text": "use your tools specifically anything you",
    "start": "2743420",
    "end": "2749480"
  },
  {
    "text": "can get your hands on so basically turn up all your warnings as far as you can make warnings errors",
    "start": "2749480",
    "end": "2757010"
  },
  {
    "text": "as much as you can use all your instrumentation your static analysis your automated tools your fuzzing your",
    "start": "2757010",
    "end": "2762830"
  },
  {
    "text": "continuous integration your libraries throw everything you can at it turn your",
    "start": "2762830",
    "end": "2768590"
  },
  {
    "text": "your your compilers on max optimization and push it through all of your automated testing because some stuff",
    "start": "2768590",
    "end": "2776900"
  },
  {
    "text": "disappears when you do full off to my session and suddenly undefined behavior",
    "start": "2776900",
    "end": "2783020"
  },
  {
    "text": "becomes very apparent so use your tools and resources and set them up into your",
    "start": "2783020",
    "end": "2788150"
  },
  {
    "text": "integration pipeline so if you're gonna go away with one thing from my talk as",
    "start": "2788150",
    "end": "2794750"
  },
  {
    "text": "I've heard that's really important then it's this I'd really rather you didn't",
    "start": "2794750",
    "end": "2800180"
  },
  {
    "text": "you see if you go into program C++ make use of the language make use of the",
    "start": "2800180",
    "end": "2807710"
  },
  {
    "text": "facilities in the language and in the libraries to program more safely don't write C learn some modern C++",
    "start": "2807710",
    "end": "2817370"
  },
  {
    "text": "instead and that's my talk thank you so",
    "start": "2817370",
    "end": "2827090"
  },
  {
    "text": "are there any questions yes",
    "start": "2827090",
    "end": "2831880"
  },
  {
    "text": "I will repeat the question see I can",
    "start": "2837000",
    "end": "2847890"
  },
  {
    "text": "think well I repeat the question dear do you know any public repository with you know good examples of good C++",
    "start": "2847890",
    "end": "2854970"
  },
  {
    "text": "programs or a code superfast code I would say probably if you want to look",
    "start": "2854970",
    "end": "2860700"
  },
  {
    "text": "at what is considered in the in the community to be the best code then",
    "start": "2860700",
    "end": "2866460"
  },
  {
    "text": "browsing the core guidelines is very good it will show you code examples of different kinds of things and you can go and look at things I would never ever",
    "start": "2866460",
    "end": "2875070"
  },
  {
    "text": "ever expect anyone to look at the standard library it is the most advanced C++ you've ever seen and you should",
    "start": "2875070",
    "end": "2881610"
  },
  {
    "text": "never ever program like that they're like two percent of the C++",
    "start": "2881610",
    "end": "2890190"
  },
  {
    "text": "developers in the world who feel comfortable reading the the standard libraries so don't do that",
    "start": "2890190",
    "end": "2897050"
  },
  {
    "text": "so look at the core guidelines I think is a very good place to try to see what people today consider to be good C++",
    "start": "2897050",
    "end": "2907010"
  },
  {
    "text": "I don't know of any like okay there are",
    "start": "2921970",
    "end": "2932290"
  },
  {
    "text": "probably tons the thing is I usually work in code bases that are quite old that have been in been shipping for a",
    "start": "2932290",
    "end": "2939670"
  },
  {
    "text": "long time like when I worked in Opera the Code West had had been developed since 1994 when I was now in chromium",
    "start": "2939670",
    "end": "2948160"
  },
  {
    "text": "that is also an equally old code from the mid 90s if you think of the full history of it and and when I worked in",
    "start": "2948160",
    "end": "2955090"
  },
  {
    "text": "an embedded sector were basically doing a Linux distribution which again has quite an age range right so what you",
    "start": "2955090",
    "end": "2961930"
  },
  {
    "text": "will see in older code bases that you will see a mix of styles so an older types parts of the code you will see a",
    "start": "2961930",
    "end": "2967840"
  },
  {
    "text": "lot of new or delete and pointers and in newer aparts of the code you won't see that and so it's very difficult to say",
    "start": "2967840",
    "end": "2974770"
  },
  {
    "text": "this project is great I've had like I've had like a class I'd found here and",
    "start": "2974770",
    "end": "2980080"
  },
  {
    "text": "there where I go like oh my god but more",
    "start": "2980080",
    "end": "2985750"
  },
  {
    "text": "often it's just like one Island right it's one developers vision in the middle of lots of other things so yeah I I'm",
    "start": "2985750",
    "end": "2993369"
  },
  {
    "text": "not sure I'm comfortable saying this is great but yeah sorry most actually that",
    "start": "2993369",
    "end": "3008460"
  },
  {
    "text": "the the common vulnerability is enumeration was made for static analysis",
    "start": "3008460",
    "end": "3014369"
  },
  {
    "text": "so basically they have test Suites for our static analysis tools and so a lot",
    "start": "3014369",
    "end": "3021000"
  },
  {
    "text": "of these things were made specifically for that and also the core guidelines has also been specifically made for",
    "start": "3021000",
    "end": "3026839"
  },
  {
    "text": "automating things for linting and things like that so yeah so that's that's sort",
    "start": "3026839",
    "end": "3033000"
  },
  {
    "text": "of where these things go yes",
    "start": "3033000",
    "end": "3039560"
  },
  {
    "text": "it's a good one no I try no I I try and",
    "start": "3042849",
    "end": "3050299"
  },
  {
    "text": "I try to do better and that's that's I think that's hopefully true for all of us is that if you look at code you were",
    "start": "3050299",
    "end": "3056479"
  },
  {
    "text": "three years ago you go like oh my god and that only means we're getting better",
    "start": "3056479",
    "end": "3061759"
  },
  {
    "text": "all the time right so yes this is my goal to write code like this um doesn't",
    "start": "3061759",
    "end": "3067339"
  },
  {
    "text": "mean I'm always very good at it and it doesn't mean my first version is like this but hopefully before I push to",
    "start": "3067339",
    "end": "3074119"
  },
  {
    "text": "master it looks more like this um so yeah I hope I hope yeah that's my goal",
    "start": "3074119",
    "end": "3083239"
  },
  {
    "text": "that it will look like this any more question is no then thank you so much",
    "start": "3083239",
    "end": "3091039"
  },
  {
    "text": "for coming [Applause]",
    "start": "3091039",
    "end": "3096319"
  }
]