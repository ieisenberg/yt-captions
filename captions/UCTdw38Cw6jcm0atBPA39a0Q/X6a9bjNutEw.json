[
  {
    "start": "0",
    "end": "103000"
  },
  {
    "text": "all right good morning everyone my name's Rob Moore uh my name is Matt Davies and we're principal Consultants",
    "start": "7439",
    "end": "12519"
  },
  {
    "text": "at reify um so we're here today to talk to you about contemporary authentication so uh authentication is obviously a",
    "start": "12519",
    "end": "19640"
  },
  {
    "text": "pretty Hot Topic in the last couple of years there's password breaches um every week There's um people getting hacked",
    "start": "19640",
    "end": "25560"
  },
  {
    "text": "left right and Center there's a lot of examples of people doing things in ways that could definitely be approved so um",
    "start": "25560",
    "end": "31279"
  },
  {
    "text": "that's something that we really want to talk to you a bit about today um but what we found when we started researching some of this stuff is that",
    "start": "31279",
    "end": "37719"
  },
  {
    "text": "it's really really difficult to understand exactly what's going on uh every time you do any searching for what",
    "start": "37719",
    "end": "44079"
  },
  {
    "text": "how how anything works you come up with pretty complicated spec documents you come up with all sorts of all sorts of",
    "start": "44079",
    "end": "50760"
  },
  {
    "text": "crazy definitions all sorts of stuff that's that's really really difficult to follow so one of the things that we",
    "start": "50760",
    "end": "56000"
  },
  {
    "text": "wanted to do especially on a morning right after a crazy boat cruise is come up with some really really simple",
    "start": "56000",
    "end": "61239"
  },
  {
    "text": "explanations of what's going on and try to use some consistent terminology so that it's hopefully reasonably easy to follow uh so we've broken this talk up",
    "start": "61239",
    "end": "68799"
  },
  {
    "text": "into four parts um we've got the why of authentication uh why do we even care about this stuff we've got the what so",
    "start": "68799",
    "end": "74720"
  },
  {
    "text": "some of the different terminology that goes on some of the different like basic concepts that we really need to be aware of uh we've got the how so what are some",
    "start": "74720",
    "end": "82240"
  },
  {
    "text": "of the different protocols and standards that are involved in some of this stuff and then we're going to Deep dive into one of those standards in particular",
    "start": "82240",
    "end": "88479"
  },
  {
    "text": "which is called open ID connect which we really believe is one of the fundamentally important ones to be across at the moment cuz it's basically",
    "start": "88479",
    "end": "95960"
  },
  {
    "text": "everywhere cool so let's start with the why why are we standing here talking to you now if we start by looking at a",
    "start": "95960",
    "end": "103560"
  },
  {
    "start": "103000",
    "end": "103000"
  },
  {
    "text": "traditional application month um pretty much everything within the application is within the bounds of",
    "start": "103560",
    "end": "109920"
  },
  {
    "text": "a single application right so you've got your you know UI business logic data layer the UI is going to take",
    "start": "109920",
    "end": "115119"
  },
  {
    "text": "credentials from the user pass it across to some sort of authentication source and check the cred itself and then it",
    "start": "115119",
    "end": "121240"
  },
  {
    "text": "will do some sort of look up to check authorization cool so if we look at more",
    "start": "121240",
    "end": "126719"
  },
  {
    "start": "125000",
    "end": "125000"
  },
  {
    "text": "modern application we're seeing today a couple of different things the first thing that we're seeing is that people",
    "start": "126719",
    "end": "131800"
  },
  {
    "text": "are quite often externalizing their identity um off somewhere else outside of their application and that's really",
    "start": "131800",
    "end": "137599"
  },
  {
    "text": "useful for a couple of reasons the first is that it means we can really leverage um thirdparty single sign on providers",
    "start": "137599",
    "end": "143959"
  },
  {
    "text": "we can use um like for example like um Google Facebook so on um and these guys",
    "start": "143959",
    "end": "150080"
  },
  {
    "text": "have invested a lot of time and money and effort into coming up with really really secure implementations of this",
    "start": "150080",
    "end": "155800"
  },
  {
    "text": "stuff and frankly there's some um really really clever people who come up with this stuff and they make sure that it",
    "start": "155800",
    "end": "161640"
  },
  {
    "text": "works really really well and we get all all of that for free the second thing that we get out of this is really easy",
    "start": "161640",
    "end": "167599"
  },
  {
    "text": "single sign on so users just have to maintain one identity they can go use it in a bunch of different places they",
    "start": "167599",
    "end": "173000"
  },
  {
    "text": "don't have to remember a bunch of different passwords um it creates a really good experience for them so that's the first thing that we're seeing",
    "start": "173000",
    "end": "178760"
  },
  {
    "text": "the second thing that we're seeing is that people are building applications in quite different ways nowadays they're",
    "start": "178760",
    "end": "184640"
  },
  {
    "text": "coming up with applications which are much more distributed than they used microservices much more distributed than",
    "start": "184640",
    "end": "190599"
  },
  {
    "text": "they used to be in the past um and what we send tend to find is that you use a",
    "start": "190599",
    "end": "195920"
  },
  {
    "text": "lot of different apis a lot of different Services you might not own these services and apis anymore they might be",
    "start": "195920",
    "end": "201599"
  },
  {
    "text": "owned by Third parties and so you can no longer trust just giving them your users passwords you need some secure way to",
    "start": "201599",
    "end": "207799"
  },
  {
    "text": "pass around the identity that's being used um so it creates some interesting challenges and this is what we want to",
    "start": "207799",
    "end": "213840"
  },
  {
    "text": "talk a little bit about today on how to solve now certainly these in particular two things that we're noticing change",
    "start": "213840",
    "end": "220400"
  },
  {
    "text": "the dynamic of how you perform authentication compared to what we do traditionally but there's something else that's also really important and it's",
    "start": "220400",
    "end": "227680"
  },
  {
    "text": "pretty much epitomized by this website so most of you probably know about Troy hunt he runs this website have been.com",
    "start": "227680",
    "end": "234519"
  },
  {
    "text": "um I encourage everyone to go there and put your email address in put your friend email in put your friend em",
    "start": "234519",
    "end": "240000"
  },
  {
    "text": "addresses in um after the talk of course and check out you know whether or not you've been in a breach but what this",
    "start": "240000",
    "end": "245959"
  },
  {
    "text": "website makes abundantly clear very quickly is there is a lot of breached",
    "start": "245959",
    "end": "251599"
  },
  {
    "text": "passwords out there millions and millions of them but more than that this",
    "start": "251599",
    "end": "256639"
  },
  {
    "text": "isn't something that just happens a couple of times a year this is literally happening every other week and all you need to do to see that is just say",
    "start": "256639",
    "end": "262720"
  },
  {
    "text": "follow Troy on Twitter and look at all the breaches he talks about so often it's frankly scary being a web developer",
    "start": "262720",
    "end": "269759"
  },
  {
    "text": "and seeing that stuff absolutely y this is why this stuff is important if your application doesn't take a password it",
    "start": "269759",
    "end": "276080"
  },
  {
    "text": "doesn't need to store it and you can't breach it and you've completely removed a whole set of",
    "start": "276080",
    "end": "281240"
  },
  {
    "text": "risks cool so that's why we're here talking to about this stuff let's talk about what modern authentication",
    "start": "281240",
    "end": "287000"
  },
  {
    "text": "actually is we find that there's a number of um terms and Concepts that are",
    "start": "287000",
    "end": "293039"
  },
  {
    "text": "kind of important to understand to be able to kind of get the whole picture so we're going to dive into a few of these and hopefully try to explain them",
    "start": "293039",
    "end": "300160"
  },
  {
    "start": "300000",
    "end": "300000"
  },
  {
    "text": "the first one is the difference between identity authentication and authorization now we've actually got a a",
    "start": "300160",
    "end": "307320"
  },
  {
    "text": "nice physical example of this so say I'm going out on a Saturday night um I",
    "start": "307320",
    "end": "312520"
  },
  {
    "text": "decide I want to go to a pub or a bar or something like that and have a drink so I walk up to the entrance and then",
    "start": "312520",
    "end": "317600"
  },
  {
    "text": "there's a bouncer let's say his name's Matt he's actually a little bit imposing and um what I do at that point is I say",
    "start": "317600",
    "end": "324479"
  },
  {
    "text": "hi oh where's all my that's a bit of a fail isn't it",
    "start": "324479",
    "end": "330080"
  },
  {
    "text": "that's all right I'll do it anyone going to click her on them it's cool all right so I walk up and I say hi",
    "start": "330080",
    "end": "337560"
  },
  {
    "text": "I'm Rob this is not going to work unless you're like yeah all",
    "start": "337560",
    "end": "342280"
  },
  {
    "text": "right um anyway so hi I'm Rob that's my identity now I could say anything I want",
    "start": "343360",
    "end": "349000"
  },
  {
    "text": "to him I could say hi I'm Jim or or Bob or or whatever he's not going to know that I am in fact Rob until I prove",
    "start": "349000",
    "end": "355520"
  },
  {
    "text": "myself until I authenticate myself now in this instance that means I give him my driver's",
    "start": "355520",
    "end": "362280"
  },
  {
    "text": "license and um at that point I've authenticated myself he knows I am now Rob I've proven my identity now at that",
    "start": "362280",
    "end": "369039"
  },
  {
    "text": "point he's still not going to let me in because he needs to authorize me to make sure that I'm allowed to come in at that",
    "start": "369039",
    "end": "374800"
  },
  {
    "text": "point he needs to in this instance check my driver's license for my date of",
    "start": "374800",
    "end": "380639"
  },
  {
    "text": "birth oh thank you and check that I am in fact over the age of 18 not actually",
    "start": "380639",
    "end": "386319"
  },
  {
    "text": "sure you are it might be a bit of an old photo so um once he's checked that and checked that I'm over 18 I've been",
    "start": "386319",
    "end": "392000"
  },
  {
    "text": "authenticated authorized I'm allowed access to the resource that I wanted to so maybe a beer in this case",
    "start": "392000",
    "end": "399319"
  },
  {
    "text": "cool now this situation plays itself out in pretty much every modern",
    "start": "399319",
    "end": "404639"
  },
  {
    "text": "authentication that's doing um sorry modern application that's doing authentication so this this is just a",
    "start": "404639",
    "end": "410039"
  },
  {
    "text": "physical example of it the other thing that's incredibly important to understand is something called claims",
    "start": "410039",
    "end": "415199"
  },
  {
    "start": "412000",
    "end": "412000"
  },
  {
    "text": "based authentication this is the underpinning of basically every modern Authentication protocol we find that",
    "start": "415199",
    "end": "421120"
  },
  {
    "text": "it's like I mean we got really confused we're trying to figure out what this thing is and being developers the first thing we turn to to try to figure out",
    "start": "421120",
    "end": "427199"
  },
  {
    "text": "what it was is of course we went stuck overflow now this is pretty much the simplest definition we've been able to",
    "start": "427199",
    "end": "433560"
  },
  {
    "text": "find on what claims space off is so this guy says claims based authentication is about defining who you trust to give you",
    "start": "433560",
    "end": "439520"
  },
  {
    "text": "accurate information about identity and only ever using that information provided but let's dive in a little bit",
    "start": "439520",
    "end": "446560"
  },
  {
    "text": "deeper and try to explain it a bit better again we've actually got a nice physical example for this if you think",
    "start": "446560",
    "end": "453000"
  },
  {
    "text": "about the government and more specifically the licensing department in the government seem be some sort of",
    "start": "453000",
    "end": "458280"
  },
  {
    "text": "interference here might be me the licensing department issues driver's licenses like in the example we just",
    "start": "458280",
    "end": "463720"
  },
  {
    "text": "showed with the bouncer this is actually a real world example of claims based authentication",
    "start": "463720",
    "end": "469759"
  },
  {
    "text": "in this instance the driver's license is the identity token or security token the bits of information on the driver's",
    "start": "469759",
    "end": "475960"
  },
  {
    "text": "license like your name address date of birth they're the claims claims and claims based or is basically",
    "start": "475960",
    "end": "482319"
  },
  {
    "text": "just properties attached to your identity now in this instance the government is the identity provider if",
    "start": "482319",
    "end": "488360"
  },
  {
    "text": "we go back to that stack Overflow quote that's the thing that you trust you trust that the government can identify",
    "start": "488360",
    "end": "494280"
  },
  {
    "text": "someone so you trust information provided by the government in this example the identity um sorry the",
    "start": "494280",
    "end": "500560"
  },
  {
    "text": "licensing department is the secure token service that issues the token now there's one other fundamental piece",
    "start": "500560",
    "end": "507520"
  },
  {
    "text": "that's missing from this that makes up claims based authentication it's the most important part because if you think",
    "start": "507520",
    "end": "513719"
  },
  {
    "text": "about the instance where I walk up to the bouncer and I give the driver's license he needs to check it to make",
    "start": "513719",
    "end": "518839"
  },
  {
    "text": "sure that it's valid that it's actually been issued by the government otherwise he's not going to trust it he needs to",
    "start": "518839",
    "end": "523919"
  },
  {
    "text": "make sure that it hasn't been it's not a fake ID basically and that's the act of token validation now in the case of the",
    "start": "523919",
    "end": "529320"
  },
  {
    "text": "physical example there's all these cool holographic logos and that sort of thing on the driver's license that you can look at to make sure that it's it's real",
    "start": "529320",
    "end": "536000"
  },
  {
    "text": "um in a electronic example all of this plays out and all of the modern protocols that we're going to be looking",
    "start": "536000",
    "end": "541720"
  },
  {
    "text": "at in this talk and for instance say token validation is usually done as a cryptographically signed",
    "start": "541720",
    "end": "548560"
  },
  {
    "text": "hash so one of the things that you might have noticed if you've done a lot of research into this stuff yourself is",
    "start": "548560",
    "end": "554320"
  },
  {
    "start": "549000",
    "end": "549000"
  },
  {
    "text": "that there's a lot of different terms out there to basically describe the same thing um you can you can have names that",
    "start": "554320",
    "end": "561560"
  },
  {
    "text": "mean all sorts of things so one of the things that we really want to do as a part of this talk is try and use fairly",
    "start": "561560",
    "end": "567160"
  },
  {
    "text": "consistent terminology so when we refer to a relying party we mean the application that's actually trying to",
    "start": "567160",
    "end": "573440"
  },
  {
    "text": "perform authentication when we refer to a user we mean the actual end user that's trying to authenticate and when",
    "start": "573440",
    "end": "579800"
  },
  {
    "text": "we refer to an identity provider we mean the source of Truth The Entity that's actually validating whether or not an",
    "start": "579800",
    "end": "585600"
  },
  {
    "text": "identity is correct um now if you if you look into this a bit you might see that there's all sorts of names for this",
    "start": "585600",
    "end": "591600"
  },
  {
    "text": "stuff um confusingly for example a relying party in oo is called a client",
    "start": "591600",
    "end": "597480"
  },
  {
    "text": "but in open ID connect which is based on ooth it's called a relying party so it's it's easy to get a bit tripped up um a",
    "start": "597480",
    "end": "603880"
  },
  {
    "text": "user can kind of confusingly be called a subject um such a weird term pretty it's",
    "start": "603880",
    "end": "608920"
  },
  {
    "text": "pretty weird one um identity providers can be called all sorts of things so um this can be um a bit of a useful like",
    "start": "608920",
    "end": "614760"
  },
  {
    "text": "reference I guess for um when you're looking into this a bit absolutely feel free to print the slide out and pin it",
    "start": "614760",
    "end": "620120"
  },
  {
    "text": "up on your will so that when you're looking at the O spec at like 2 a.m. and you're not getting too confused you know how much you like doing that",
    "start": "620120",
    "end": "626200"
  },
  {
    "text": "yeah um so um when you think of traditional authentication um you you",
    "start": "626200",
    "end": "631240"
  },
  {
    "start": "627000",
    "end": "627000"
  },
  {
    "text": "might first think about password authentication obviously the most common one out there um when we say password",
    "start": "631240",
    "end": "636320"
  },
  {
    "text": "authentication what we mean is that um the user will directly provide um their",
    "start": "636320",
    "end": "641600"
  },
  {
    "text": "password to the identity provider um the to the sorry to the relying party um the",
    "start": "641600",
    "end": "647839"
  },
  {
    "text": "relying party will then pass that password onto the identity provider and um verify it um usually that's against",
    "start": "647839",
    "end": "654240"
  },
  {
    "text": "like some sort of like internal database or something like that this is a a pretty common setup and it's a pretty",
    "start": "654240",
    "end": "659880"
  },
  {
    "text": "big problem for a couple of reasons the first is that that password is now shared across some kind of potentially",
    "start": "659880",
    "end": "666040"
  },
  {
    "text": "like Network environment in a couple of different places and could be intercepted so um we've got that password in places it doesn't",
    "start": "666040",
    "end": "672120"
  },
  {
    "text": "necessarily need to be the second is that this doesn't really support a scenario where that relying party isn't",
    "start": "672120",
    "end": "678639"
  },
  {
    "text": "um isn't the owner of those passwords and credentials because you don't necessarily know like how it's going to handle them or what it's going to do",
    "start": "678639",
    "end": "684680"
  },
  {
    "text": "with it so um there's a couple of things that we can do about this to try and um sort this out cool spoiler alert um so",
    "start": "684680",
    "end": "691519"
  },
  {
    "text": "that's where tokens come in right so we just talked about tokens with claims based authentication with the driver's license example um and there's actually",
    "start": "691519",
    "end": "699040"
  },
  {
    "text": "two different types of tokens so there's reference tokens and self-contained tokens reference tokens are basically",
    "start": "699040",
    "end": "704519"
  },
  {
    "text": "just a random string of you know numbers and letters and whatever it is it's just essentially a lookup the way that that",
    "start": "704519",
    "end": "709920"
  },
  {
    "text": "works is that the user will provide their password directly to the identity provider so that the relying party never",
    "start": "709920",
    "end": "715600"
  },
  {
    "text": "sees it the identity provider will then issue a reference token to the user which they will pass on to the relying",
    "start": "715600",
    "end": "722200"
  },
  {
    "text": "party and at that point the relying party will exchange that with the identity provider in return for that",
    "start": "722200",
    "end": "727760"
  },
  {
    "text": "user's identity and claims now because they've talked directly to that identity provider where there's some trust they",
    "start": "727760",
    "end": "734160"
  },
  {
    "text": "know that they can trust those identity and claims self-contained tokens are a little bit different so again the user",
    "start": "734160",
    "end": "740920"
  },
  {
    "text": "passes their password or credentials directly to the identity provider but in return they get this self-contained",
    "start": "740920",
    "end": "747720"
  },
  {
    "text": "token so we um and that token actually contains the",
    "start": "747720",
    "end": "752839"
  },
  {
    "text": "identity and claim information inside of it so when that token is then passed onto the um relying party then the",
    "start": "752839",
    "end": "760600"
  },
  {
    "text": "relying party has everything that they need to do authentication and authorization for that user now there's",
    "start": "760600",
    "end": "766000"
  },
  {
    "text": "that important step of token validation that's missing here as well so weird it's like not clicking um",
    "start": "766000",
    "end": "774120"
  },
  {
    "text": "and uh and that's so that the relying party can make sure that the token hasn't been tampered with so for",
    "start": "774120",
    "end": "779880"
  },
  {
    "text": "instance the user hasn't gone and added a claim saying that they're an admin user or something like that that way",
    "start": "779880",
    "end": "786000"
  },
  {
    "text": "they relying party can make sure that the token is as it was issued from the identity provider which of course it",
    "start": "786000",
    "end": "791639"
  },
  {
    "text": "trusts and that's the most important part of claims based or as we said cool",
    "start": "791639",
    "end": "796800"
  },
  {
    "text": "um so something else that we wanted to talk about a little bit at this point is multiactor authentication um we've got a definition up there but basically",
    "start": "796800",
    "end": "803519"
  },
  {
    "text": "multiactor authentication if you haven't come across it before is essentially trying to use more than one proof proof",
    "start": "803519",
    "end": "809360"
  },
  {
    "text": "of proof of verification that the user is who they say they are so typically that's by combining um two different",
    "start": "809360",
    "end": "815560"
  },
  {
    "text": "things um one of those things is something that the user knows which is usually like some kind of static password something that the user has so",
    "start": "815560",
    "end": "823320"
  },
  {
    "text": "um quite typically like a mobile phone or some kind of device that you can't really like clone or duplicate and",
    "start": "823320",
    "end": "829120"
  },
  {
    "text": "lastly you can sometimes combine in Biometrics so that's like your thumb print or something like that um and",
    "start": "829120",
    "end": "835199"
  },
  {
    "text": "multiactor authentication is really really important because it gives us um such such a guarantee that the user is",
    "start": "835199",
    "end": "841680"
  },
  {
    "text": "who they are as compared to just a password which is really easily linked out and really easily reused uh where",
    "start": "841680",
    "end": "847320"
  },
  {
    "text": "this kind of started is commonly mobile numbers commonly phones sort of evolved from there into um tokens so software",
    "start": "847320",
    "end": "853600"
  },
  {
    "text": "and Hardware tokens which are essentially just um things that the user has which generate to tokens or codes",
    "start": "853600",
    "end": "860279"
  },
  {
    "text": "According to some predefined algorithm which the server also knows about so it can essentially verify that the user has",
    "start": "860279",
    "end": "866560"
  },
  {
    "text": "the same token that they should um that's evolved even further from here into using machine learning to actually",
    "start": "866560",
    "end": "872720"
  },
  {
    "text": "analyze the user's network activity and login pattern and location and things like that to verify they are who they",
    "start": "872720",
    "end": "878639"
  },
  {
    "text": "say they are um which gives us even more certainty so um this is this is evolving very quickly but it's becoming",
    "start": "878639",
    "end": "885240"
  },
  {
    "text": "increasingly more important to start taking advantage of some of this stuff as opposed to just using passwords and",
    "start": "885240",
    "end": "891279"
  },
  {
    "text": "it's really easily really easy um software as a service providers make this super simple um if you're using for",
    "start": "891279",
    "end": "897959"
  },
  {
    "text": "example um micros soft's aor a you can get all this multiactor authentication",
    "start": "897959",
    "end": "903560"
  },
  {
    "text": "and the Machine learning side just out of the box um and the user just automatically gets to opt in and take",
    "start": "903560",
    "end": "909240"
  },
  {
    "text": "advantage of this so um it's kind of cool and it's pretty easy and not many excuses left to not start taking",
    "start": "909240",
    "end": "914399"
  },
  {
    "text": "advantage of some of this stuff if you want to know a bit more about that machine learning stuff it's something called risk-based multiactor",
    "start": "914399",
    "end": "920160"
  },
  {
    "text": "authentication um feel free to hit up our cioo teth mod and he'll talk your ear off about it for like an hour it is",
    "start": "920160",
    "end": "926199"
  },
  {
    "text": "pretty cool though yeah um so we want to talk jump now and talk a little bit about um the house some of the standards",
    "start": "926199",
    "end": "932399"
  },
  {
    "text": "that are involved here uh we're going to talk a little bit about um token standards and the actual authentication",
    "start": "932399",
    "end": "938360"
  },
  {
    "text": "protocols that are used but um I guess it's really important to note that standards are super important here um",
    "start": "938360",
    "end": "944600"
  },
  {
    "text": "they give you huge interoperability out of the box if your relying party your application is talking to an identity",
    "start": "944600",
    "end": "950360"
  },
  {
    "text": "provider that follows some certain standard you can just drop a library into your application and instantly be",
    "start": "950360",
    "end": "956120"
  },
  {
    "text": "guaranteed that it's all just going to work um and that lets you take advantage of peer review and things like that",
    "start": "956120",
    "end": "962160"
  },
  {
    "text": "where really really clever people have looked at this stuff and come up with implementations that are really really",
    "start": "962160",
    "end": "967319"
  },
  {
    "text": "secure and you're at less risk of making mistakes let's be honest these people are like way smarter than us yeah way",
    "start": "967319",
    "end": "972600"
  },
  {
    "text": "way smarter than us um and I guess like following on from that point the security um becomes a lot simpler in",
    "start": "972600",
    "end": "979639"
  },
  {
    "text": "this case because you're again taking advantage of really large standards bodies that have figured this stuff out",
    "start": "979639",
    "end": "984759"
  },
  {
    "text": "they're usually backed by organizations with a lot of money and resources and time who who've put a lot of effort into",
    "start": "984759",
    "end": "990440"
  },
  {
    "text": "making these things really solid so um you get a lot out of just using them um so the first thing that's worth talking",
    "start": "990440",
    "end": "996560"
  },
  {
    "start": "994000",
    "end": "994000"
  },
  {
    "text": "about is token formats so we're going to talk mainly about saml and JWT tokens",
    "start": "996560",
    "end": "1001880"
  },
  {
    "text": "there's a few different token formats out there but we're just going to mainly focus on those two so let's start by",
    "start": "1001880",
    "end": "1007639"
  },
  {
    "text": "looking at s tokens this is the incredibly boring frankly definition of what a s token is um essentially it just",
    "start": "1007639",
    "end": "1013759"
  },
  {
    "text": "boils down to it's a standard that's an XML format it has the ability to have attributes so that you can have claim",
    "start": "1013759",
    "end": "1020120"
  },
  {
    "text": "information and it's cryptographically secure this is what assemble token looks like it's pretty crazy it's just gross",
    "start": "1020120",
    "end": "1027400"
  },
  {
    "start": "1024000",
    "end": "1024000"
  },
  {
    "text": "it's it's ugly it's fose it's exactly what you expect and always wanted from XML um but but but um to be fair to the",
    "start": "1027400",
    "end": "1036360"
  },
  {
    "text": "Sams um token format standard it's been around for a long time it's incredibly robust and it has a lot of support so",
    "start": "1036360",
    "end": "1043839"
  },
  {
    "text": "like 99% of the time you don't have to know anything about that you just pull in a li and it kind of works so it's",
    "start": "1043839",
    "end": "1050679"
  },
  {
    "text": "it's actually pretty useful now to be even fair to the sample token standard if you add a bit of kind",
    "start": "1050679",
    "end": "1056640"
  },
  {
    "text": "of sytax highlighting a bit of formatting get rid of some of the crazi XML stuff in there then it actually ends",
    "start": "1056640",
    "end": "1061840"
  },
  {
    "text": "up being quite simple if you look at it there's essentially a header which has a um the the actual issuer that issued the",
    "start": "1061840",
    "end": "1068760"
  },
  {
    "text": "token and the signature so that you can verify that it's intact it's got a subject statement talking about who was",
    "start": "1068760",
    "end": "1073960"
  },
  {
    "text": "authenticating it's got an authentication statement talking about the properties of the actual Act of authenticating and then it's got a bunch",
    "start": "1073960",
    "end": "1080240"
  },
  {
    "text": "of attributes which is that claim information that we've been talking about so JWT so we've got a definition",
    "start": "1080240",
    "end": "1087320"
  },
  {
    "text": "up here for Json web tokens um but essentially JWT is are an attempt to try",
    "start": "1087320",
    "end": "1093360"
  },
  {
    "text": "and um make this stuff a little bit more compact try and make it such that a real person who's looking at this stuff can",
    "start": "1093360",
    "end": "1099360"
  },
  {
    "text": "basically understand what's getting transmitted back and forth and and and delve into it a bit uh they're",
    "start": "1099360",
    "end": "1104520"
  },
  {
    "text": "JavaScript tokens so obviously you get the advantage of really strong interoperability with JavaScript but",
    "start": "1104520",
    "end": "1110039"
  },
  {
    "text": "also with just about every other language out there so um really really easy to use and they start to get a lot",
    "start": "1110039",
    "end": "1115360"
  },
  {
    "text": "simpler than S tokens did um so we've got an example of Jason whoa whoa whoa whoa Matt yeah Matt don't mess with this",
    "start": "1115360",
    "end": "1122000"
  },
  {
    "start": "1117000",
    "end": "1117000"
  },
  {
    "text": "Mt that's not J you said it was going to be Jason man right okay don't with this I'm only half messing with you so this",
    "start": "1122000",
    "end": "1127480"
  },
  {
    "text": "is base 64 encoded so what we've got here is a base 64 encoded header",
    "start": "1127480",
    "end": "1132760"
  },
  {
    "text": "followed by a base 64 encoded payload followed by a hash of those two things and if we perform some magic and we base",
    "start": "1132760",
    "end": "1139679"
  },
  {
    "text": "64 decode this stuff we get something looks like this um so adjacent web token",
    "start": "1139679",
    "end": "1145600"
  },
  {
    "text": "um has a header in it so that's going to start with type equals JWT that's always going to be the case that's going to be",
    "start": "1145600",
    "end": "1151440"
  },
  {
    "text": "followed by a hashing algorithm that can be rs256 or hs256 if it's rs256 it means",
    "start": "1151440",
    "end": "1158280"
  },
  {
    "text": "it's certificate based hashing so you'll also get the um thumbprint of that x509 certificate that's being used um",
    "start": "1158280",
    "end": "1165120"
  },
  {
    "text": "followed by that in the actual body of the token itself um you've got a number of fields that are reserved um we",
    "start": "1165120",
    "end": "1171280"
  },
  {
    "text": "haven't put the complete list up here by any means but these fields are basically um if they're in the token you can be",
    "start": "1171280",
    "end": "1177760"
  },
  {
    "text": "assured of what they mean they're very well defined uh if you you've got followed by that a number of public",
    "start": "1177760",
    "end": "1183360"
  },
  {
    "text": "claims so these public claims are also well defined but they're defined in a",
    "start": "1183360",
    "end": "1188480"
  },
  {
    "text": "separate registry they're defined in the Ia registry for jwt's uh if you see these you know what they mean but you",
    "start": "1188480",
    "end": "1195000"
  },
  {
    "text": "don't necessarily um they're not necessarily locked down over time they can be changed and lastly we've got a",
    "start": "1195000",
    "end": "1201240"
  },
  {
    "text": "number of private claims these are totally custom claims that you basically make up so you can put whatever you want",
    "start": "1201240",
    "end": "1208200"
  },
  {
    "text": "here you just need to Define their meaning on both your relying party side and on the identity provider side and",
    "start": "1208200",
    "end": "1213400"
  },
  {
    "text": "make sure that they agree on what they mean and you're not going to get great interoperability with other third party services that you don't own by using",
    "start": "1213400",
    "end": "1219360"
  },
  {
    "text": "them but they can be pretty handy in certain situations there's a couple other things to note here so you can see",
    "start": "1219360",
    "end": "1224640"
  },
  {
    "text": "that there's a whole bunch of these really cryptic three-letter sort of claim names um which on first inspection",
    "start": "1224640",
    "end": "1229880"
  },
  {
    "text": "is a little bit confusing but the reason why they did that was very deliberate the definition on the last slide talked",
    "start": "1229880",
    "end": "1235120"
  },
  {
    "text": "about the fact that jwt's are meant to be compact this is very deliberate to make them smaller because they're",
    "start": "1235120",
    "end": "1241000"
  },
  {
    "text": "deliberately um designed to be passed around in HTTP headers so you kind of want them to not be too big right um and",
    "start": "1241000",
    "end": "1247440"
  },
  {
    "text": "that's actually also the reason why they're base 64 encoded so there isn't any weird characters in there that mess with uh",
    "start": "1247440",
    "end": "1254200"
  },
  {
    "text": "HTTP cool so now that we've talked about token formats we're going to talk about authentication protocols arguably these",
    "start": "1254200",
    "end": "1262039"
  },
  {
    "start": "1255000",
    "end": "1255000"
  },
  {
    "text": "are even more important to have standards for from a security point of view because the protocols are",
    "start": "1262039",
    "end": "1268039"
  },
  {
    "text": "determines like what information gets passed around who authenticates where these are the ones where it's even more",
    "start": "1268039",
    "end": "1273640"
  },
  {
    "text": "likely to have those little security holes so for instance for a period of time there people were using a 2 uh and",
    "start": "1273640",
    "end": "1280200"
  },
  {
    "text": "actually had something called an open redirect attack in there so we've got a bit of a timeline",
    "start": "1280200",
    "end": "1286080"
  },
  {
    "text": "of the different authentication protocols it's really not important to remember what all of these are exactly",
    "start": "1286080",
    "end": "1291320"
  },
  {
    "text": "the important thing to note is that we we started in around like early 2000s and these protocols um Sam WS Federation",
    "start": "1291320",
    "end": "1299320"
  },
  {
    "text": "came around in an effort for organizations trying to figure out okay we've got an application we want that",
    "start": "1299320",
    "end": "1305039"
  },
  {
    "text": "application to talk to an application owned by some other organization but we don't want just want to give them all our passwords we need to do something",
    "start": "1305039",
    "end": "1311320"
  },
  {
    "text": "smarter than that so that was Federation that was an attempt to solve that problem they were also trying to figure",
    "start": "1311320",
    "end": "1316559"
  },
  {
    "text": "out really early days how do we do single sign on effectively how do we try and make sure our users don't have to log into the 10 apps that we own as a",
    "start": "1316559",
    "end": "1323240"
  },
  {
    "text": "part of our org so that's what they were trying to do there in the mid 2000s we had protocols like open ID come along",
    "start": "1323240",
    "end": "1330039"
  },
  {
    "text": "and open ID was essentially um an attempt by the social networks to try and figure out okay well we've got a",
    "start": "1330039",
    "end": "1336480"
  },
  {
    "text": "huge number of user identities how do we like start leveraging our brand a bit better and getting developers to start",
    "start": "1336480",
    "end": "1342000"
  },
  {
    "text": "using those identities and and spread them out a bit wider without compromising the security of our users",
    "start": "1342000",
    "end": "1347360"
  },
  {
    "text": "so they were trying to make make it a lot simpler for developers to integrate this stuff in the hopes that that would start pushing that out and they were",
    "start": "1347360",
    "end": "1353440"
  },
  {
    "text": "obviously pretty successful as per what we see today so that was all followed by",
    "start": "1353440",
    "end": "1358480"
  },
  {
    "text": "I guess more modern protocols like open ID connect which we'll talk a bit about a bit more in a bit in um in a bit but",
    "start": "1358480",
    "end": "1364600"
  },
  {
    "text": "basically open ID connect was an attempt to start simplifying this even further and really learn a lot of lessons um",
    "start": "1364600",
    "end": "1371120"
  },
  {
    "text": "from the past especially around um filling in some of the gaps that previous protocols didn't really",
    "start": "1371120",
    "end": "1376159"
  },
  {
    "text": "standardize very well so pretty much every protocol on the last slide follows this basic flow what",
    "start": "1376159",
    "end": "1384279"
  },
  {
    "start": "1378000",
    "end": "1378000"
  },
  {
    "text": "will happen is the ring party will generate a redirect URL they'll send the user on that URL and it will take them",
    "start": "1384279",
    "end": "1390360"
  },
  {
    "text": "to the identity provider at which point they're going to authenticate and then the identity provider will come up with",
    "start": "1390360",
    "end": "1396600"
  },
  {
    "text": "a response and a redirect URL back to the relying party at which point it can",
    "start": "1396600",
    "end": "1402320"
  },
  {
    "text": "process that response pretty much every protocol follows this basic flow so what we're going to look at is just a couple",
    "start": "1402320",
    "end": "1408279"
  },
  {
    "text": "of the protocols we saw in the last slide to give an example in particular of this first redirect",
    "start": "1408279",
    "end": "1414760"
  },
  {
    "text": "URL this is what WS Federation looks like it's actually not too complex um",
    "start": "1414760",
    "end": "1420159"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "it's got uh an instruction to the server in this case signin 1.0 uh it's got this",
    "start": "1420159",
    "end": "1425360"
  },
  {
    "text": "WT realm parameter I don't know why it's called that but um that basically identifies the relying party and as part",
    "start": "1425360",
    "end": "1431720"
  },
  {
    "text": "of the registration the relying party has with the Ws Federation server then the server will know where to redir them",
    "start": "1431720",
    "end": "1437559"
  },
  {
    "text": "back to and we've also got some context information which is just transparent information that's passed back on that",
    "start": "1437559",
    "end": "1443200"
  },
  {
    "text": "redirect back to the relying party uh WS Federation uses saml tokens as its token",
    "start": "1443200",
    "end": "1449039"
  },
  {
    "text": "format now confusingly saml is not only a token format but also an Authentication Protocol and much like",
    "start": "1449039",
    "end": "1455960"
  },
  {
    "text": "the uh token format the I mean look at that URL that's just nasty right the um",
    "start": "1455960",
    "end": "1461799"
  },
  {
    "text": "reason why it's so crazy is that the request itself is a b 64 encoded Sam",
    "start": "1461799",
    "end": "1467320"
  },
  {
    "text": "token and the whole request gets signed um it's a bit weird but it means that",
    "start": "1467320",
    "end": "1473559"
  },
  {
    "text": "there's bidirectional trust between the relying party and the identity provider so it's incredibly robust and like I",
    "start": "1473559",
    "end": "1480000"
  },
  {
    "text": "said earlier it's got a lot of support if you are trying to integrate some sort of off the shelf or software as a",
    "start": "1480000",
    "end": "1486159"
  },
  {
    "text": "service provider with your corporate identity nine times out of 10 you're probably going to be using Sam to do it",
    "start": "1486159",
    "end": "1492840"
  },
  {
    "text": "so it's a very powerful and well supported standard and then that leads us to a bit",
    "start": "1492840",
    "end": "1497919"
  },
  {
    "text": "more of a modern protocol in a 2 this is much nicer and cleaner it's",
    "start": "1497919",
    "end": "1504600"
  },
  {
    "text": "got an instruction again to the server in this case response type we've got a client ID which identifies the relying",
    "start": "1504600",
    "end": "1510600"
  },
  {
    "text": "party and in this case we've actually also got a redirect URI where the user should be sent to after they",
    "start": "1510600",
    "end": "1515799"
  },
  {
    "text": "authenticate that's actually the source of that um open redirect bug that I mentioned if the server doesn't verify",
    "start": "1515799",
    "end": "1521480"
  },
  {
    "text": "that that redirect Ur is like okay in a white list then you're kind of in a world of",
    "start": "1521480",
    "end": "1526840"
  },
  {
    "text": "hurt cool so that leads us to open ID connect so one of the really interesting",
    "start": "1526840",
    "end": "1532279"
  },
  {
    "text": "things about oo 2 is it was actually just an authorization protocol it was never an Authentication Protocol but",
    "start": "1532279",
    "end": "1538880"
  },
  {
    "text": "that doesn't mean that people didn't use it as an Authentication Protocol they all just implemented it in slightly different ways so um Facebook Google",
    "start": "1538880",
    "end": "1545559"
  },
  {
    "text": "Microsoft all had slightly different ways of doing this originally uh so what what open ID connect attempts to do is",
    "start": "1545559",
    "end": "1552279"
  },
  {
    "text": "fill in the gaps it it actually standardizes authentication as well it uses jwt's as the token type um it",
    "start": "1552279",
    "end": "1559240"
  },
  {
    "text": "supports multiple different relying um party types so um you can use like web apps you can use desktop apps server to",
    "start": "1559240",
    "end": "1565480"
  },
  {
    "text": "server you can also use um JavaScript running on a web browser which is pretty cool you can um so there's there's a",
    "start": "1565480",
    "end": "1572039"
  },
  {
    "text": "whole heap of different um client types there depending on your um implementation of open ID connect uh",
    "start": "1572039",
    "end": "1577520"
  },
  {
    "text": "there's a whole heap of other different things that it can provide you can get token encryption you can dynamically",
    "start": "1577520",
    "end": "1583200"
  },
  {
    "text": "register your clients so you don't actually have to configure them all in the app they can register themselves if that's what you want um you can do",
    "start": "1583200",
    "end": "1589679"
  },
  {
    "text": "Dynamic discovery of all of the information about the openid connect server by your client relying party",
    "start": "1589679",
    "end": "1596000"
  },
  {
    "text": "application just dynamically which we'll talk about a bit more in a bit um Dynamic session management there's all sorts of really really cool and useful",
    "start": "1596000",
    "end": "1602440"
  },
  {
    "text": "features that simplify the whole experience for developers as part of this cool so now that we've covered the",
    "start": "1602440",
    "end": "1610440"
  },
  {
    "text": "kind of Basics behind token formats and and authentication protocols as we said we wanted to do a deep dive specifically",
    "start": "1610440",
    "end": "1616320"
  },
  {
    "text": "into open ID connect because it's become BEC increasingly prevalent and important",
    "start": "1616320",
    "end": "1621360"
  },
  {
    "text": "um and and in our mind is probably the most important protocol to have some of an understanding of these",
    "start": "1621360",
    "end": "1627279"
  },
  {
    "text": "days so to what we're going to do is break this up into a few parts because I mean we are talking it is very simple",
    "start": "1627279",
    "end": "1632880"
  },
  {
    "start": "1628000",
    "end": "1628000"
  },
  {
    "text": "specification but it's still a spec right so we're going to try to to break it in easy for you um because I mean frankly when we learned this stuff like",
    "start": "1632880",
    "end": "1639200"
  },
  {
    "text": "it melted our brain um so firstly we're going to talk about some fundamentals these are the things that you really",
    "start": "1639200",
    "end": "1644399"
  },
  {
    "text": "need to understand in order to kind of get what's going on in the rest of the protocol starting with relying parties now as me",
    "start": "1644399",
    "end": "1651200"
  },
  {
    "text": "Matt mentioned before one of the things about open ID connect that just confuses me is that it's literally an extension",
    "start": "1651200",
    "end": "1656840"
  },
  {
    "text": "of oor 2 but it uses a different word for the relying party in the spec it's just really weird but um one of the",
    "start": "1656840",
    "end": "1663200"
  },
  {
    "text": "important things to think about with relying parties is registration this is important from two perspectives the ring",
    "start": "1663200",
    "end": "1669200"
  },
  {
    "text": "party itself needs to have some information about the identity provider that it's talking to so it needs to know",
    "start": "1669200",
    "end": "1675320"
  },
  {
    "text": "for instance the public key of the um CER ific that's been used to sign the JWT so it can do token validation it",
    "start": "1675320",
    "end": "1681720"
  },
  {
    "text": "needs to know a bunch of URLs so it knows how and where to talk to that um identity provider and then on the other",
    "start": "1681720",
    "end": "1687720"
  },
  {
    "text": "side of things the identity provider itself also needs to know about the relying party so that when it gets a",
    "start": "1687720",
    "end": "1693440"
  },
  {
    "text": "request from that relying party it knows that it can trust it it's not some random app trying to hack in in terms of",
    "start": "1693440",
    "end": "1700240"
  },
  {
    "text": "the um responsibility of a relying party in open ID connect it's basically very",
    "start": "1700240",
    "end": "1705600"
  },
  {
    "text": "simple it comes down to that basic flow that we looked at out before the relying party needs to be able to construct a",
    "start": "1705600",
    "end": "1711120"
  },
  {
    "text": "request send the user on its way and then deal with the response that comes back from the open ID connect server in",
    "start": "1711120",
    "end": "1717760"
  },
  {
    "text": "terms of dealing with a response it needs to be able to verify the signature of any tokens in that response and look at the time stamp and the lifetime of",
    "start": "1717760",
    "end": "1725159"
  },
  {
    "text": "those tokens to make sure that they're still valid and they haven't expired they're identified by a client",
    "start": "1725159",
    "end": "1731960"
  },
  {
    "text": "ID again confusing right it's called a client ID but it's a reling party it's just crazy anyway there's two types of",
    "start": "1731960",
    "end": "1737600"
  },
  {
    "text": "Rel part is confidential relying parties and public relying parties confidential relying parties can keep a secret so",
    "start": "1737600",
    "end": "1744600"
  },
  {
    "text": "typically it's something running on a server whereas public relying parties can't so typically that's going to be",
    "start": "1744600",
    "end": "1750640"
  },
  {
    "text": "either JavaScript running in a web browser or it's going to be a mobile application but it supports both cool so",
    "start": "1750640",
    "end": "1758600"
  },
  {
    "text": "one of the um really really cool things that open ID connect mandates is that you put up a metad data end point about",
    "start": "1758600",
    "end": "1764480"
  },
  {
    "text": "your open ID connect server so you put that up atw dn/ open id- configuration",
    "start": "1764480",
    "end": "1769919"
  },
  {
    "text": "that contains all of the information that your relying parties could possibly need to know in order to authenticate to",
    "start": "1769919",
    "end": "1776320"
  },
  {
    "text": "your server um so that's things like all of the different API endpoints that you can hit for different information um the",
    "start": "1776320",
    "end": "1782440"
  },
  {
    "text": "um public key of your signing certificate the different like token types and claim types and Scopes that you support Etc so this lets us do some",
    "start": "1782440",
    "end": "1790440"
  },
  {
    "text": "really cool things that we previously haven't really been a to do easily we can for example uh we could change the",
    "start": "1790440",
    "end": "1796519"
  },
  {
    "text": "signing certificate that we use for for our server and one of the things that the spec mandates is that you only case",
    "start": "1796519",
    "end": "1802320"
  },
  {
    "text": "that information from this metadata endpoint for a certain amount of time which remains that we can change the certificate and we can guarantee that",
    "start": "1802320",
    "end": "1809240"
  },
  {
    "text": "all of our clients can go update against that new signing certificate within a certain amount of time um previously",
    "start": "1809240",
    "end": "1815480"
  },
  {
    "text": "that's something that's been quite difficult you don't necessarily own all the different relying parties subscribing to you so um it's it's kind",
    "start": "1815480",
    "end": "1821320"
  },
  {
    "text": "of cool and it gives us a lot of power and flexibility one of the things that I think is probably the most exciting bit",
    "start": "1821320",
    "end": "1826600"
  },
  {
    "text": "about open ID connect for me can be summarized by this bit of code all you",
    "start": "1826600",
    "end": "1831679"
  },
  {
    "text": "need to do to use open ID connect at the bare minimum is something like this you need one URL to the identity um provider",
    "start": "1831679",
    "end": "1840480"
  },
  {
    "text": "server that's it you pull in a library you pass it the URL it goes to that endpoint it figures everything out and",
    "start": "1840480",
    "end": "1846799"
  },
  {
    "text": "you're good to go that is just crazy convenient and this is this is obviously C and Owen but there's examples for",
    "start": "1846799",
    "end": "1853159"
  },
  {
    "text": "basically every programming language out there and they all look something like this at they simplest just one URL",
    "start": "1853159",
    "end": "1859399"
  },
  {
    "text": "cool so the next thing to talk about is Scopes now for those of you familiar with aor 2 it's exactly the same as in",
    "start": "1859399",
    "end": "1865399"
  },
  {
    "text": "aor 2 so Scopes allow you to tailor authorization in order for me to try to",
    "start": "1865399",
    "end": "1870880"
  },
  {
    "text": "explain what that means I'll use an example say that you've got some sort of application XYZ over here that's trying",
    "start": "1870880",
    "end": "1877320"
  },
  {
    "text": "to get you to log in to your Twitter account via that application and then it",
    "start": "1877320",
    "end": "1883559"
  },
  {
    "text": "asks for permission to read your tweets and also read your dire direct",
    "start": "1883559",
    "end": "1889320"
  },
  {
    "text": "messages now there's two types of Scopes there's required and optional so the application over here can say hey you",
    "start": "1889320",
    "end": "1896600"
  },
  {
    "text": "know what for me to be a to function my core functionality is that I can read your tweets if you don't grant me that just don't bother but direct messages",
    "start": "1896600",
    "end": "1904120"
  },
  {
    "text": "there's this kind of sidebar kind of cool nice to have functionality um you know if you don't give me that I will",
    "start": "1904120",
    "end": "1910919"
  },
  {
    "text": "just adapt and hide that bit of the app what this would look like in the UI is",
    "start": "1910919",
    "end": "1916000"
  },
  {
    "text": "that it'll be like hi um log in with your Twitter account to application XYZ you will be by doing",
    "start": "1916000",
    "end": "1923159"
  },
  {
    "text": "this you will be granting application XYZ the ability to read your tweets and checkbox read your direct messages and",
    "start": "1923159",
    "end": "1929720"
  },
  {
    "text": "you can basically tick or untick that checkbox depending on whether or not you want to grant that permission that act",
    "start": "1929720",
    "end": "1935000"
  },
  {
    "text": "of ticking or unticking is called consent it's basically how it works the",
    "start": "1935000",
    "end": "1940519"
  },
  {
    "text": "one thing that's kind of different in open ID connect is open ID connect actually defines a set of standard",
    "start": "1940519",
    "end": "1946440"
  },
  {
    "text": "Scopes and then you can also use whatever custom ones that you want as well the standard scopes of this list",
    "start": "1946440",
    "end": "1953039"
  },
  {
    "start": "1952000",
    "end": "1952000"
  },
  {
    "text": "here the one at the top open ID is required if you're using open ID connect",
    "start": "1953039",
    "end": "1958559"
  },
  {
    "text": "to authenticate a user you have to request the open ID scope it's just part of the spec the four Scopes underneath",
    "start": "1958559",
    "end": "1966240"
  },
  {
    "text": "that will grant you a subset of information about that user and we'll look at what the subsets are in a bit",
    "start": "1966240",
    "end": "1973519"
  },
  {
    "text": "the last one's kind of interesting offline access if you request the offline access scope and it's granted",
    "start": "1973519",
    "end": "1980000"
  },
  {
    "text": "then you will be able to generate something called refresh tokens and we'll explain what they are in a second so these are the um these are the",
    "start": "1980000",
    "end": "1987440"
  },
  {
    "text": "four main tokens you get out of open ID connect um you get an ID token so um this is just the user's identity um",
    "start": "1987440",
    "end": "1994480"
  },
  {
    "text": "fairly self-explanatory this is the JWT we were talking about before um we've got an access token so an access token",
    "start": "1994480",
    "end": "2000399"
  },
  {
    "text": "is just a representation of the fact that you've got permission to access something on behalf of a user um also",
    "start": "2000399",
    "end": "2006799"
  },
  {
    "text": "JWT now you can also have something called a refresh token um so refresh tokens basically just the ability to get",
    "start": "2006799",
    "end": "2014039"
  },
  {
    "text": "another access token when yours expires and you might want to do that in certain types of applications and the last type",
    "start": "2014039",
    "end": "2019600"
  },
  {
    "text": "of token is a code and this is just a shortlived code that you can um exchange for a token in certain types of",
    "start": "2019600",
    "end": "2025159"
  },
  {
    "text": "scenarios which we'll cover a little bit later in terms of the scenarios where you might want to use refresh tokens typically boils down to two scenarios",
    "start": "2025159",
    "end": "2032440"
  },
  {
    "text": "one would be where say you're in like a a um a JavaScript running on a web browser it's a public relying party so",
    "start": "2032440",
    "end": "2040399"
  },
  {
    "text": "the tokens are like visible there now from a security perspective that means that there's a higher likelihood those",
    "start": "2040399",
    "end": "2045799"
  },
  {
    "text": "tokens might be compromised which means you probably want to shorten the lifetime of them but what you can then",
    "start": "2045799",
    "end": "2051720"
  },
  {
    "text": "do is have the access tokens be shorter Lifetime and then have a refresh token with a longer lifetime that you can use",
    "start": "2051720",
    "end": "2057599"
  },
  {
    "text": "to get new access tokens whenever you need",
    "start": "2057599",
    "end": "2061800"
  },
  {
    "text": "them cool so this is what an open ID connect JWT looks like uh one of the",
    "start": "2062679",
    "end": "2068760"
  },
  {
    "start": "2063000",
    "end": "2063000"
  },
  {
    "text": "first things to point out here is that unlike in regular jwt's there are actually required Fields here that you",
    "start": "2068760",
    "end": "2074440"
  },
  {
    "text": "do have to specify uh so we've got the required ones up here um those required",
    "start": "2074440",
    "end": "2080118"
  },
  {
    "text": "ones are basically just well-defined fields which always will have to be in the token if you see them you know",
    "start": "2080119",
    "end": "2085720"
  },
  {
    "text": "exactly what they mean you've got some optional Fields here as well um which are just next on here um those optional",
    "start": "2085720",
    "end": "2091800"
  },
  {
    "text": "Fields again they're well defined if you see them in your token you can be assured of what they mean but you don't",
    "start": "2091800",
    "end": "2097960"
  },
  {
    "text": "have to specify these and then that's all followed by a number of custom um claims as well and these custom ones are",
    "start": "2097960",
    "end": "2105400"
  },
  {
    "text": "basically again you can make these up you can do whatever you want with these but you're just um then Limited in your",
    "start": "2105400",
    "end": "2110560"
  },
  {
    "text": "interoperability and you just have to specify exactly what they mean in yourself cool so now that we've covered",
    "start": "2110560",
    "end": "2117680"
  },
  {
    "start": "2115000",
    "end": "2115000"
  },
  {
    "text": "the fundamentals the next thing to talk about is end points there's a number of different endpoints that you can",
    "start": "2117680",
    "end": "2122760"
  },
  {
    "text": "communicate with with open ID connect these three here are the required endpoints they will be in every",
    "start": "2122760",
    "end": "2128599"
  },
  {
    "text": "implementation of open ID connect server there are also a bunch of other optional ones that we're not going to",
    "start": "2128599",
    "end": "2134040"
  },
  {
    "text": "cover the first endpoint to talk about is the authorization endpoint this is",
    "start": "2134040",
    "end": "2139359"
  },
  {
    "start": "2137000",
    "end": "2137000"
  },
  {
    "text": "the endpoint that you send users to to log in this endpoint will give the users some sort of UI for them to provide",
    "start": "2139359",
    "end": "2145839"
  },
  {
    "text": "their credentials now the endpoint will either return a code or an ID token access",
    "start": "2145839",
    "end": "2154280"
  },
  {
    "text": "token and or refresh token depending on which flow you use and cover that in in a little bit the initial redirect that",
    "start": "2154280",
    "end": "2161359"
  },
  {
    "text": "the relying party sends the user on to the identity provider will look something like this you'll have whatever",
    "start": "2161359",
    "end": "2167440"
  },
  {
    "text": "the URL is for the authorized endpoint and then there's four required parameters there's response type client",
    "start": "2167440",
    "end": "2173079"
  },
  {
    "text": "ID redirect URI and scope the response type we'll cover when we look at flows",
    "start": "2173079",
    "end": "2178440"
  },
  {
    "text": "the client ID identifies that relying party the redirect URI is where the user",
    "start": "2178440",
    "end": "2183520"
  },
  {
    "text": "should be sent to afterwards and the server will check that against a white list and the scope as I said has to at",
    "start": "2183520",
    "end": "2189880"
  },
  {
    "text": "least have open ID it's space Del limited and then you can have any other Scopes that the ring party wants to try",
    "start": "2189880",
    "end": "2195160"
  },
  {
    "text": "to request optionally you can also have a Nots to prevent replay attacks and a",
    "start": "2195160",
    "end": "2200359"
  },
  {
    "text": "state that gets transparently passed back on the other end once the user is authenticated the redirect back to the",
    "start": "2200359",
    "end": "2207079"
  },
  {
    "text": "relying party might look something like this you can see that redirect URI we had there will appear there and then we",
    "start": "2207079",
    "end": "2213720"
  },
  {
    "text": "in this case because we were asking for a code we'll have a code passed to us and then in this casee because we had",
    "start": "2213720",
    "end": "2219040"
  },
  {
    "text": "some State that'll be passed back transparently that's basically it so we mentioned MFA before if you're",
    "start": "2219040",
    "end": "2227040"
  },
  {
    "text": "using open ID connect this is a really really cool place to do it because you can do essentially anything you want at",
    "start": "2227040",
    "end": "2232960"
  },
  {
    "text": "this authorization endpoint between the user getting redirected to your endpoint and then that getting redirected back to",
    "start": "2232960",
    "end": "2239079"
  },
  {
    "text": "the relying party so if you want to use this um use this time you can also trigger an MFA challenge at this point",
    "start": "2239079",
    "end": "2246040"
  },
  {
    "text": "before that redirect happens um and that makes it really really simple to integrate this",
    "start": "2246040",
    "end": "2251359"
  },
  {
    "text": "stuff so the next endpoint to talk about is the token endpoint this is an O or2",
    "start": "2251359",
    "end": "2257880"
  },
  {
    "text": "compatible endpoint unlike the authorization endpoint where real users hit and it has a UI this is just for",
    "start": "2257880",
    "end": "2264680"
  },
  {
    "text": "server to server Communications so it's basically just an API endpoint what this would do is perform",
    "start": "2264680",
    "end": "2271000"
  },
  {
    "text": "authentication of a relying party the relying party when it hits this endpoint always has to authenticate itself and",
    "start": "2271000",
    "end": "2277480"
  },
  {
    "text": "and then it will return some tokens now there's a few different um exchanges that can happen at this end point but",
    "start": "2277480",
    "end": "2284400"
  },
  {
    "text": "the three main ones are it will either exchange a code for an ID token access token and or refresh token or you can",
    "start": "2284400",
    "end": "2292119"
  },
  {
    "text": "exchange a refresh token for an access token and a new refresh token to use next time or you can exchange some sort",
    "start": "2292119",
    "end": "2298680"
  },
  {
    "text": "of set of credentials for an ID token and or an access token and this will make a bit more",
    "start": "2298680",
    "end": "2305480"
  },
  {
    "text": "sense when we look at the flows here's an example of what the HTTP request might look like in this case",
    "start": "2305480",
    "end": "2311680"
  },
  {
    "start": "2308000",
    "end": "2308000"
  },
  {
    "text": "we've taken the refresh token example so you'll do a post HTTP post",
    "start": "2311680",
    "end": "2319119"
  },
  {
    "text": "you will perform some sort of authorization to identify yourself as a relying party in this case we've got",
    "start": "2319119",
    "end": "2324200"
  },
  {
    "text": "basic authentication so it'll probably be the client ID along with some sort of shared",
    "start": "2324200",
    "end": "2330240"
  },
  {
    "text": "secret but there's other mechanisms that can be used as well like client certificates the grant type is a",
    "start": "2330240",
    "end": "2337480"
  },
  {
    "text": "required field that always has to get passed through in this case it's refresh token and for the refresh token Grant",
    "start": "2337480",
    "end": "2344160"
  },
  {
    "text": "type you have to pass the refresh token and you can also optionally pass in a scope if you want to vary the authorization for this particular access",
    "start": "2344160",
    "end": "2350839"
  },
  {
    "text": "token that you're generating the response will look something like this it's just Json you'll get in this case an access token",
    "start": "2350839",
    "end": "2357480"
  },
  {
    "text": "and a refresh token it's pretty simple um so we've got an even simpler",
    "start": "2357480",
    "end": "2363720"
  },
  {
    "text": "endpoint up here which is the user info endpoint so there's a lot of scenarios when you're building applications where",
    "start": "2363720",
    "end": "2368800"
  },
  {
    "text": "you obviously need to know exactly who's logged in and what permissions you have so this user info endpoint will return",
    "start": "2368800",
    "end": "2375720"
  },
  {
    "text": "the claims that your particular relying party is authorized to see so um you'll",
    "start": "2375720",
    "end": "2381240"
  },
  {
    "text": "get a subset basically of um of claims based on the subset of Scopes that are",
    "start": "2381240",
    "end": "2387160"
  },
  {
    "text": "requested um and we've got those standard claims up here if you want have a look at that later so those standard",
    "start": "2387160",
    "end": "2392200"
  },
  {
    "text": "Scopes we looked at before depending on which ones of those that you have will give a subset of the stand claims that",
    "start": "2392200",
    "end": "2398119"
  },
  {
    "text": "are here and that's defined in the spec okay so the last thing to talk",
    "start": "2398119",
    "end": "2403720"
  },
  {
    "text": "about with open ID connect are the different flows so when you're choosing a flow",
    "start": "2403720",
    "end": "2411000"
  },
  {
    "text": "there's a few different things you need to make decisions on um you need to figure out if you want an interactive or",
    "start": "2411000",
    "end": "2416240"
  },
  {
    "text": "non-interactive flow so that's basically is the user involved or is it some kind of server to server communication you",
    "start": "2416240",
    "end": "2422079"
  },
  {
    "text": "need to figure out if you need a confidential versus um a public relying party um a conf confidential relying",
    "start": "2422079",
    "end": "2428400"
  },
  {
    "text": "party being as we said someone who can be or something that can be trusted with a secret so some kind of server",
    "start": "2428400",
    "end": "2433520"
  },
  {
    "text": "typically uh you need to figure out what credentials are being used and um who who should see them exactly and you need",
    "start": "2433520",
    "end": "2440200"
  },
  {
    "text": "to figure out what types of tokens do you need do you need a refresh token for example in this type of scenario because",
    "start": "2440200",
    "end": "2445839"
  },
  {
    "text": "you don't want a very longlived access token being held by a client okay let's start by looking at",
    "start": "2445839",
    "end": "2452599"
  },
  {
    "start": "2450000",
    "end": "2450000"
  },
  {
    "text": "the interactive flows these are the flows that involve an enduser logging in at that authorization endpoint we talked",
    "start": "2452599",
    "end": "2459040"
  },
  {
    "text": "about now there's two different things that determine which flow you would probably use and there's actually three",
    "start": "2459040",
    "end": "2465960"
  },
  {
    "text": "flows so we've got the authorization code flow the implicit flow and the hybrid flow now it's worth pointing out",
    "start": "2465960",
    "end": "2472040"
  },
  {
    "text": "not all of these flows are going to be available in every implementation of an open ID connect server that you have the",
    "start": "2472040",
    "end": "2478520"
  },
  {
    "text": "authorization code flow does not reveal any tokens to the",
    "start": "2478520",
    "end": "2484400"
  },
  {
    "text": "user agent that the end user is using so say a browser or something like that the tokens are only existing in the",
    "start": "2484400",
    "end": "2491160"
  },
  {
    "text": "confidential relying party so they're kept secret that's an important thing to think about um it is possible to use",
    "start": "2491160",
    "end": "2497359"
  },
  {
    "text": "refresh tokens with that flow whereas conversely in the implicit flow you",
    "start": "2497359",
    "end": "2502480"
  },
  {
    "text": "can't use refresh tokens and the user agent that the client that sorry that",
    "start": "2502480",
    "end": "2507800"
  },
  {
    "text": "the user is using will see the tokens and we'll show you a diagram of that in a second the hybrid flow is basically",
    "start": "2507800",
    "end": "2515040"
  },
  {
    "text": "the combination of the two in the hybrid flow the user agent can see the tokens",
    "start": "2515040",
    "end": "2520079"
  },
  {
    "text": "but you can also use refresh tokens now if you cast your mind back to when we showed the authorization endpoint there",
    "start": "2520079",
    "end": "2526760"
  },
  {
    "text": "was one parameter that we had to pass in that initial redirect called come on response type the",
    "start": "2526760",
    "end": "2533599"
  },
  {
    "text": "response type value determines which flow that you're using so if the value is code you're using the authorization",
    "start": "2533599",
    "end": "2539920"
  },
  {
    "text": "code flow if the value is ID token or ID token and token you're using the implicit flow and if it's a combination",
    "start": "2539920",
    "end": "2546400"
  },
  {
    "text": "then you're using the hybrid flow so we thought we'd show you",
    "start": "2546400",
    "end": "2551920"
  },
  {
    "start": "2550000",
    "end": "2550000"
  },
  {
    "text": "visually what the authorization code flow looks like basically in this scenario the confidential relying party",
    "start": "2551920",
    "end": "2557760"
  },
  {
    "text": "will redirect the user through to the authorization endpoint on the identity provider um the identity provider will",
    "start": "2557760",
    "end": "2565319"
  },
  {
    "text": "then redirect the user back um with an authorization code and the um",
    "start": "2565319",
    "end": "2571640"
  },
  {
    "text": "confidential relying party will then check that code at the token endpoint with the identity provider in response",
    "start": "2571640",
    "end": "2577680"
  },
  {
    "text": "for um in response for the actual tokens that are being used so this flow um is",
    "start": "2577680",
    "end": "2582839"
  },
  {
    "text": "really really useful in a number of different scenarios oh there we go let's do it",
    "start": "2582839",
    "end": "2590960"
  },
  {
    "text": "manually um so we've got here an example of what the HTP request looks like so it's pretty much exactly the same as",
    "start": "2590960",
    "end": "2596640"
  },
  {
    "start": "2592000",
    "end": "2592000"
  },
  {
    "text": "what we showed for the refresh token example the relying party needs to authorize itself in whatever way the",
    "start": "2596640",
    "end": "2603200"
  },
  {
    "text": "grant type in this case is authorization code and for that one we pass through",
    "start": "2603200",
    "end": "2608319"
  },
  {
    "text": "the code parameter and in return we get the access token the ID token and if we",
    "start": "2608319",
    "end": "2615280"
  },
  {
    "text": "requested it using that offline access scope the refresh token cool so we're",
    "start": "2615280",
    "end": "2621200"
  },
  {
    "start": "2620000",
    "end": "2620000"
  },
  {
    "text": "going to show you now what the implicit flow looks like it's also called two-legged Ola um in this particular",
    "start": "2621200",
    "end": "2626559"
  },
  {
    "text": "flow this is exactly the same as what we just had except that um the relying",
    "start": "2626559",
    "end": "2631760"
  },
  {
    "text": "party um doesn't necessarily um do the same thing the authorization endpoint will in this case return exactly the",
    "start": "2631760",
    "end": "2638440"
  },
  {
    "text": "same tokens to the user as um as in the previous example you would have needed the relying party to go get so the user",
    "start": "2638440",
    "end": "2644720"
  },
  {
    "text": "themselves will own the tokens that are involved um so you can see here that user still provides proof of identity",
    "start": "2644720",
    "end": "2651359"
  },
  {
    "text": "they get back the access and the ID tokens directly and then they just provide that straight to the relying",
    "start": "2651359",
    "end": "2656440"
  },
  {
    "text": "party um in this case everyone knows about the tokens there's cases where you might not have a choice you actually",
    "start": "2656440",
    "end": "2662319"
  },
  {
    "text": "might need to use this flow um for example in JavaScript applications it's really common",
    "start": "2662319",
    "end": "2668960"
  },
  {
    "text": "um we've got here an example of what HTP request looks like the important thing to note here is that um you can see the",
    "start": "2668960",
    "end": "2675119"
  },
  {
    "text": "hash in the URL that basically means that the server doesn't ever um have to see this particular ID token it's all",
    "start": "2675119",
    "end": "2681880"
  },
  {
    "text": "held purely on the client cool um we've got um we've got",
    "start": "2681880",
    "end": "2688440"
  },
  {
    "text": "the hybrid flow up here this is the third flow that we want to talk about the hybrid flow is exactly the same as",
    "start": "2688440",
    "end": "2693760"
  },
  {
    "text": "the implicit flow but you also have refresh tokens and you might need this in certain scenarios or again you don't",
    "start": "2693760",
    "end": "2699640"
  },
  {
    "text": "want a particularly longlived access token to be held uh in this case you pass an authorization code as well and",
    "start": "2699640",
    "end": "2707319"
  },
  {
    "text": "you can exchange that as at the relying party um on the identity server in",
    "start": "2707319",
    "end": "2712359"
  },
  {
    "text": "exchange for um a refresh token and then use that from there cool so now that we've looked at",
    "start": "2712359",
    "end": "2718319"
  },
  {
    "text": "the interactive flows that involve real users you can look at the non-interactive flows now these only",
    "start": "2718319",
    "end": "2724559"
  },
  {
    "text": "involve server to server Communications kind of as you'll see in a second um now the first one that we're going to look",
    "start": "2724559",
    "end": "2730240"
  },
  {
    "text": "at is something called client credentials flow so can you just hit yeah sure um so in this flow uh the",
    "start": "2730240",
    "end": "2737839"
  },
  {
    "text": "relying party will pass its credentials to the Token endpoint with a grant type of client credentials and in return it",
    "start": "2737839",
    "end": "2744200"
  },
  {
    "text": "will get an ID token access token and or refresh token that identifies that",
    "start": "2744200",
    "end": "2749440"
  },
  {
    "text": "relying party this is useful for server to server Communications where you want Services calling other services in the",
    "start": "2749440",
    "end": "2755880"
  },
  {
    "text": "background asynchronous and that kind of thing the cool thing about this is this means you can use your identity provider",
    "start": "2755880",
    "end": "2761280"
  },
  {
    "text": "not only to identify your users but also to identify all of your servers so you",
    "start": "2761280",
    "end": "2766319"
  },
  {
    "text": "kind of get this added benefit it's quite powerful yeah um so the next one is",
    "start": "2766319",
    "end": "2772960"
  },
  {
    "text": "called resource owner credentials flow say that 10 times fast um now in this",
    "start": "2772960",
    "end": "2779599"
  },
  {
    "text": "flow the relying party actually takes the credentials from the user now we've",
    "start": "2779599",
    "end": "2784800"
  },
  {
    "text": "obviously been talking about how that's a really bad idea throughout this presentation but there are some",
    "start": "2784800",
    "end": "2790440"
  },
  {
    "text": "circumstances in which it's still a reasonable thing to do so for instance say you've got",
    "start": "2790440",
    "end": "2796960"
  },
  {
    "text": "Facebook they've created their own mobile app if you go and look at it you'll see that the username and",
    "start": "2796960",
    "end": "2802200"
  },
  {
    "text": "password fields are part of a native experience is not popping up a web browser so they're not using one of the",
    "start": "2802200",
    "end": "2807440"
  },
  {
    "text": "other flows they're doing something like this the reason for that is because they want to control the experience of the",
    "start": "2807440",
    "end": "2812720"
  },
  {
    "text": "app and make it nice and Native and they can do that because they're the ones that built the app so they how the app handles the password doesn't siphon it",
    "start": "2812720",
    "end": "2819760"
  },
  {
    "text": "off somewhere or do something dodgy and they obviously also control the identity provider on the other side however if",
    "start": "2819760",
    "end": "2825280"
  },
  {
    "text": "you think about uh a third party company creating a mobile app that you get",
    "start": "2825280",
    "end": "2830520"
  },
  {
    "text": "people to log in on behalf of their Facebook user identity there's no way Facebook is going to let you create that",
    "start": "2830520",
    "end": "2838000"
  },
  {
    "text": "kind of experience so in that case that's where you have to pop up that web browser and use the other flows where you're only ever entering the",
    "start": "2838000",
    "end": "2844000"
  },
  {
    "text": "credentials into the Facebook website this is an example of what the client",
    "start": "2844000",
    "end": "2850280"
  },
  {
    "start": "2848000",
    "end": "2848000"
  },
  {
    "text": "credentials flow looks like from a HTTP point of view very similar to the other two examples we showed and really basic",
    "start": "2850280",
    "end": "2857040"
  },
  {
    "text": "you just pass C Grant type of client uncore credentials and then for the resource",
    "start": "2857040",
    "end": "2862280"
  },
  {
    "start": "2861000",
    "end": "2861000"
  },
  {
    "text": "owner credentials flow very similar Grant type of password and then you pass in the username and the",
    "start": "2862280",
    "end": "2869119"
  },
  {
    "text": "password so as we said before trying to get our",
    "start": "2869119",
    "end": "2875000"
  },
  {
    "text": "heads around the open ID connect spec you know it's it's it's brain melting it's a very simple spec but it's still a",
    "start": "2875000",
    "end": "2881520"
  },
  {
    "text": "spec there's still a lot of little aspects to it but you don't really need to know it in real depth as we said you",
    "start": "2881520",
    "end": "2888040"
  },
  {
    "text": "can just pull in a library so I guess the takeaways that we'd want people to get from this talk would be um you know",
    "start": "2888040",
    "end": "2894800"
  },
  {
    "text": "an understanding of claims based authentication knowledge about say JWT",
    "start": "2894800",
    "end": "2900200"
  },
  {
    "text": "tokens understanding that open ID connect is a thing and that you should use it for authentication rather than",
    "start": "2900200",
    "end": "2905760"
  },
  {
    "text": "allor 2 understanding that open ID connect has a bunch of different flows and there's a",
    "start": "2905760",
    "end": "2911040"
  },
  {
    "text": "few just different decision points to choose which one that's pretty much all you need to know because from there you can probably go and have a glimpse",
    "start": "2911040",
    "end": "2917760"
  },
  {
    "text": "through parts of the spec it's actually reasonably well written it's quite simple and sort of from there figure out",
    "start": "2917760",
    "end": "2923319"
  },
  {
    "text": "okay in this scenario this is probably what I want to do so what we're going to try to do is",
    "start": "2923319",
    "end": "2928400"
  },
  {
    "text": "to just a slight a small sorry demo of an open ID connect server just",
    "start": "2928400",
    "end": "2933960"
  },
  {
    "text": "to illustrate a couple of the concepts that we just talked",
    "start": "2933960",
    "end": "2939200"
  },
  {
    "text": "about cool so so what we've got here is on this",
    "start": "2942880",
    "end": "2950520"
  },
  {
    "text": "computer we've created an identity server at localhost",
    "start": "2950520",
    "end": "2956720"
  },
  {
    "text": "44399 identity and if you remember from the metad data slide that Matt talked about",
    "start": "2956720",
    "end": "2963839"
  },
  {
    "text": "why did that move oh that's why um there's that dot move",
    "start": "2963839",
    "end": "2970280"
  },
  {
    "text": "up up well-known open-configuration",
    "start": "2970280",
    "end": "2975920"
  },
  {
    "text": "now some of the things that we see in here things like the issuer we've got the authorization endpoint the token",
    "start": "2978520",
    "end": "2984359"
  },
  {
    "text": "endpoint the user INF endpoint that we talked about we've got a whole bunch of other things like the supported Scopes",
    "start": "2984359",
    "end": "2989520"
  },
  {
    "text": "and you've got things like the supported response types so these are all those flows we talked about like I said not",
    "start": "2989520",
    "end": "2996240"
  },
  {
    "text": "all open ID connect servers will support all of the flows this one does um if",
    "start": "2996240",
    "end": "3001599"
  },
  {
    "text": "you're curious this is using um identity server 3 on net a really important URI in here is",
    "start": "3001599",
    "end": "3009440"
  },
  {
    "text": "this jwks URI there so if we click through on that jwks stands for Json web",
    "start": "3009440",
    "end": "3015920"
  },
  {
    "text": "key it's basically a format that allows you to um uh describe I guess a a public",
    "start": "3015920",
    "end": "3022799"
  },
  {
    "text": "certificate in Json format so all of these values here represent the public",
    "start": "3022799",
    "end": "3029359"
  },
  {
    "text": "certificate of the signing certificate that this identity server uses to sign",
    "start": "3029359",
    "end": "3034920"
  },
  {
    "text": "jwt's so the relying party that pulls in an open ID connect Library can go and",
    "start": "3034920",
    "end": "3040319"
  },
  {
    "text": "hit this endpoint hit this particular URL from the endpoint grab this information and it's got everything it",
    "start": "3040319",
    "end": "3046119"
  },
  {
    "text": "needs to be able to verify whether a token is intact as I said really powerful",
    "start": "3046119",
    "end": "3052838"
  },
  {
    "text": "stuff so what we've got here is a JavaScript",
    "start": "3053240",
    "end": "3059160"
  },
  {
    "text": "client that's going to be using implicit orth against that open ID connect server that we had so we're just going to go to",
    "start": "3059160",
    "end": "3065920"
  },
  {
    "text": "the network tab here and we're going to click",
    "start": "3065920",
    "end": "3071200"
  },
  {
    "text": "login cool oops so as we can as we can see",
    "start": "3072480",
    "end": "3079359"
  },
  {
    "text": "here when it loads oh yeah control one yeah it's taking ages to refresh for",
    "start": "3079359",
    "end": "3085440"
  },
  {
    "text": "some reason as we can here we're actually on that identity server now this is um based off hitting the",
    "start": "3085440",
    "end": "3091200"
  },
  {
    "text": "authorization endpoint we talked about and we've got a UI here to put a username and password in now before we",
    "start": "3091200",
    "end": "3096760"
  },
  {
    "text": "do that if we just go to F12 where's F12 it again okay cool",
    "start": "3096760",
    "end": "3103640"
  },
  {
    "text": "here we go so here's an example",
    "start": "3103640",
    "end": "3110760"
  },
  {
    "text": "of move the thing right here's an example of hitting that authorization",
    "start": "3110760",
    "end": "3116280"
  },
  {
    "text": "and maybe just zoom out cu that's crazy so it's probably a bit hard to see now but we we hit that authorized endpoint",
    "start": "3116280",
    "end": "3122359"
  },
  {
    "text": "we pass through a state a NS we pass through a client ID in this case javascriptcore implicit we passed to",
    "start": "3122359",
    "end": "3128160"
  },
  {
    "text": "redirect URI which is HTTP Local Host Port 21500 index.html um we also passed",
    "start": "3128160",
    "end": "3134839"
  },
  {
    "text": "a response type of ID token so we're just asking for an ID token um and we're using the implicit flow uh and we also",
    "start": "3134839",
    "end": "3141440"
  },
  {
    "text": "pass through that required scope of open ID so this all the stuff that we were talking about and then this particular",
    "start": "3141440",
    "end": "3147040"
  },
  {
    "text": "identity server has given us this login page if we log",
    "start": "3147040",
    "end": "3152880"
  },
  {
    "text": "in oh got it wrong dude do you want me to type it yeah go for it all right hold",
    "start": "3156960",
    "end": "3164880"
  },
  {
    "text": "that be awkward if I got it wrong too there you yeah is it working yeah okay",
    "start": "3166200",
    "end": "3171520"
  },
  {
    "text": "it's a bit slow um so now we can see we got taken back to that index.htm on",
    "start": "3171520",
    "end": "3176880"
  },
  {
    "text": "Local Host 21500 and we got the hash there so the server would never have seen this we've got the idore token",
    "start": "3176880",
    "end": "3183200"
  },
  {
    "text": "value there and then a whole bunch of other stuff the javascript's basically just shown us the parameters that were",
    "start": "3183200",
    "end": "3188240"
  },
  {
    "text": "passed here so you can see we also got the scope and the state and stuff like that now that ID token if we grab that",
    "start": "3188240",
    "end": "3194680"
  },
  {
    "text": "value do you want me to do it or it's quite",
    "start": "3194680",
    "end": "3202960"
  },
  {
    "text": "long all and we go to This brilliant site called jw. if you want to take any takeaways",
    "start": "3205200",
    "end": "3212280"
  },
  {
    "text": "from this talk if you're working with jwt's remember that site because it's awesome you can paste in on the left",
    "start": "3212280",
    "end": "3217440"
  },
  {
    "text": "hand side and on the right here it's decoded it for us so on the header there you can see that type we talked about",
    "start": "3217440",
    "end": "3222799"
  },
  {
    "text": "we've got the x509 thumb print and then here we've got all of our claims so we've got that issuer Local Host 44399",
    "start": "3222799",
    "end": "3229040"
  },
  {
    "text": "we've got the audience which is our client ID we've got the expiry time in Unix format the kns we had the time it",
    "start": "3229040",
    "end": "3235559"
  },
  {
    "text": "was issued and the subject so that's the username that I typed in username um one other thing I'd point",
    "start": "3235559",
    "end": "3242640"
  },
  {
    "text": "out about jts just scroll out you pretty much know you're dealing with a JWT if you've got ey followed by",
    "start": "3242640",
    "end": "3250040"
  },
  {
    "text": "a bunch of stuff followed by dot followed by ey followed by bunch of stuff followed by dot followed by a",
    "start": "3250040",
    "end": "3255720"
  },
  {
    "text": "bunch of stuff um so you pretty much look for ey and then a whole heap of stuff and you typically got a JWT the",
    "start": "3255720",
    "end": "3260960"
  },
  {
    "text": "reason why is because the B 64 encoded version of squiggly bracket followed by a a um quote is",
    "start": "3260960",
    "end": "3269838"
  },
  {
    "text": "e cool um so we've got here um a few examples of um of links that you might",
    "start": "3284359",
    "end": "3290359"
  },
  {
    "start": "3286000",
    "end": "3286000"
  },
  {
    "text": "want to go have a look at these two Links at the top are um a pretty complete list pretty comprehensive list",
    "start": "3290359",
    "end": "3296160"
  },
  {
    "text": "of all the different implementations of open ID connect that you can go and have a look at um you've got a few different",
    "start": "3296160",
    "end": "3301559"
  },
  {
    "text": "software as of service ones a few different selfhosted ones which are basically offthe shelf ones that you'll",
    "start": "3301559",
    "end": "3306839"
  },
  {
    "text": "just set up and go with and then we've got a few examples at the bottom identity server 3 being one of them of",
    "start": "3306839",
    "end": "3313079"
  },
  {
    "text": "um servers that you can set up and really customize yourself um which are really really useful to have a look at",
    "start": "3313079",
    "end": "3318680"
  },
  {
    "text": "it's useful when you want to do like a lot of custom Scopes and and claims and and and authentication kind of calls and",
    "start": "3318680",
    "end": "3324960"
  },
  {
    "text": "stuff like that and that's it thank you thank",
    "start": "3324960",
    "end": "3332680"
  },
  {
    "text": "you if you want to get the slides you can go to bit. leod off that'll pop you",
    "start": "3333799",
    "end": "3339480"
  },
  {
    "text": "off to the GitHub where we've got the slides cool any questions hello hey",
    "start": "3339480",
    "end": "3347559"
  },
  {
    "text": "um after kind of suffering through heal",
    "start": "3347559",
    "end": "3353160"
  },
  {
    "text": "so you know after suffering to H to do all two with GitHub Dropbox Google Facebook and bunch",
    "start": "3356359",
    "end": "3364160"
  },
  {
    "text": "uh and that's kind of done so what would be the key benefit of I don't know re",
    "start": "3364160",
    "end": "3371119"
  },
  {
    "text": "redeveloping that using open idect is is there is there a benefit of going through the",
    "start": "3371119",
    "end": "3377720"
  },
  {
    "text": "exercise again and yeah so the the question was we've got an existing site it's done all the different libraries",
    "start": "3377720",
    "end": "3384359"
  },
  {
    "text": "for Dropbox Google and Facebook or whatever it is um all using all 2 rather than open ID connect should you move",
    "start": "3384359",
    "end": "3391240"
  },
  {
    "text": "across I guess it depends on whether you trust that all of those different libraries that you've pulled in don't",
    "start": "3391240",
    "end": "3396400"
  },
  {
    "text": "have any security holes right because obviously there's quite a few so that every any single one of those could have a hole that the others might not have",
    "start": "3396400",
    "end": "3403000"
  },
  {
    "text": "right um to be fair those companies are pretty big they're probably pretty robust they've been used a lot if it's",
    "start": "3403000",
    "end": "3408200"
  },
  {
    "text": "working you probably don't need to touch it right but like going forward you can potentially use something like this",
    "start": "3408200",
    "end": "3413720"
  },
  {
    "text": "because it's an easier standard next time you don't have to pull in five libraries you just pull in one and you're good to go",
    "start": "3413720",
    "end": "3420359"
  },
  {
    "text": "right the JWT one or the sum one yeah oh",
    "start": "3425480",
    "end": "3430960"
  },
  {
    "text": "yeah cool yeah laptop's a bit slow so might take a",
    "start": "3430960",
    "end": "3439440"
  },
  {
    "text": "sec so the um the slides where we were showing the flows by the way like the clicker wasn't working so to get the",
    "start": "3439440",
    "end": "3445880"
  },
  {
    "text": "full fact it's probably better to download the deck and make sure you look through because it's a lot easier to understand when you see it bit by",
    "start": "3445880",
    "end": "3453760"
  },
  {
    "text": "bit",
    "start": "3464839",
    "end": "3467839"
  },
  {
    "text": "yeah sure yeah good question",
    "start": "3471039",
    "end": "3476319"
  },
  {
    "text": "Y Cool really good question so the question was in the self-contained token",
    "start": "3479920",
    "end": "3485839"
  },
  {
    "text": "oops if I turn it on in the self-contained token example here how can the relying party know that this",
    "start": "3485839",
    "end": "3491680"
  },
  {
    "text": "token is valid if it's not communicating directly to the identity provider the reason being that this this step here is",
    "start": "3491680",
    "end": "3498280"
  },
  {
    "text": "what does it the token validation so the token formats we looked at both samel and JWT both have a component inside of",
    "start": "3498280",
    "end": "3505280"
  },
  {
    "text": "them with a cryptographic graic signature that cryptographic signature is signed by either a secret",
    "start": "3505280",
    "end": "3513520"
  },
  {
    "text": "key that you've exchanged previously with the identity provider or by a public private key pair where you know",
    "start": "3513520",
    "end": "3520400"
  },
  {
    "text": "what the public key is so that jwks URL that we looked at for our um open ID",
    "start": "3520400",
    "end": "3525839"
  },
  {
    "text": "connect that's the public key of the certificate it's using that it has a private key for that ass signs the",
    "start": "3525839",
    "end": "3531799"
  },
  {
    "text": "certificates so what you can do is you do the cryptographic hashing algorithm on the contents and then you can tell if",
    "start": "3531799",
    "end": "3539400"
  },
  {
    "text": "the signature is different so the signature is different the token's been tampered with and thus it's not it's not",
    "start": "3539400",
    "end": "3546359"
  },
  {
    "text": "safe to",
    "start": "3546359",
    "end": "3548720"
  },
  {
    "text": "use right yeah so you would know if the key used to sign the token is the same",
    "start": "3553319",
    "end": "3559880"
  },
  {
    "text": "key based on that registration step I talked about right that might involve exchanging a SE a pre-shared secret key",
    "start": "3559880",
    "end": "3567359"
  },
  {
    "text": "or it might involv in the case of open ID connect going to that well-known Discovery end point pulling out the",
    "start": "3567359",
    "end": "3573680"
  },
  {
    "text": "public key and then using that key sure that's that's a fair point um",
    "start": "3573680",
    "end": "3582280"
  },
  {
    "text": "but that would happen like once only or in the background asynchronously if in the actual authentication flow this is",
    "start": "3582280",
    "end": "3588359"
  },
  {
    "text": "it it doesn't need to talk to the identity provider because it's previously exchanged information so it knows how to verify the token",
    "start": "3588359",
    "end": "3597000"
  },
  {
    "text": "absolutely cont I",
    "start": "3621720",
    "end": "3627000"
  },
  {
    "text": "M so so the question was um the token you know you don't know how it's been",
    "start": "3627480",
    "end": "3632640"
  },
  {
    "text": "obtained you just get this token this is actually the concept called Bearer tokens so Bearer tokens means the person",
    "start": "3632640",
    "end": "3638400"
  },
  {
    "text": "holding it just by the nature of the fact that they're holding it you can you just you have to trust it if that makes",
    "start": "3638400",
    "end": "3644280"
  },
  {
    "text": "sense now obviously there's circumstances where tokens might get compromised and that's where you do things like lower the um lifetimes of",
    "start": "3644280",
    "end": "3651880"
  },
  {
    "text": "access tokens and stuff like that so that if they do get compromised they can only be used for a certain amount of time then they're not useful anymore if",
    "start": "3651880",
    "end": "3658240"
  },
  {
    "text": "that makes sense so okay",
    "start": "3658240",
    "end": "3665760"
  },
  {
    "text": "so sure yeah so depending on what protocols you use there may be some",
    "start": "3668079",
    "end": "3673720"
  },
  {
    "text": "protocols that allow you to use certificates in a slightly different way like potentially you present a certificate at this point and that",
    "start": "3673720",
    "end": "3680079"
  },
  {
    "text": "somehow gets encoded in the token in terms of open ID connect what you're relying on is that it's always over HT",
    "start": "3680079",
    "end": "3685960"
  },
  {
    "text": "tdps and you so you trust that the token is it's very unlikely that the tokens have been compromised if that makes",
    "start": "3685960",
    "end": "3692160"
  },
  {
    "text": "sense so the combination of htps combined with token validation means that you generally can just trust the",
    "start": "3692160",
    "end": "3699599"
  },
  {
    "text": "tokens any other",
    "start": "3699599",
    "end": "3703000"
  },
  {
    "text": "questions yep so the question was do the major identity providers support this um pretty much yeah I don't know the top",
    "start": "3712160",
    "end": "3718640"
  },
  {
    "text": "of my head if Google does but I'd be damn surprised if they don't Microsoft definitely do um so pretty much yeah um",
    "start": "3718640",
    "end": "3725640"
  },
  {
    "text": "so it's probably all we got time for feel free to hit us up later and we can answer any questions thanks guys",
    "start": "3725640",
    "end": "3731540"
  },
  {
    "text": "[Applause]",
    "start": "3731540",
    "end": "3734659"
  }
]