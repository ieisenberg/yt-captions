[
  {
    "start": "0",
    "end": "170000"
  },
  {
    "text": "okay hi everyone",
    "start": "420",
    "end": "7740"
  },
  {
    "text": "so today we are going to talk about a graphql and serverless what graphql is",
    "start": "7740",
    "end": "13620"
  },
  {
    "text": "and why it goes well together with serverless approaches",
    "start": "13620",
    "end": "19920"
  },
  {
    "text": "so before I start let me take a quick temperature of the room where you all",
    "start": "19920",
    "end": "25560"
  },
  {
    "text": "are regarding to graphql and if you take your phone",
    "start": "25560",
    "end": "31859"
  },
  {
    "text": "go to this QR code and then we can",
    "start": "31859",
    "end": "37140"
  },
  {
    "text": "have a quick check just two questions",
    "start": "37140",
    "end": "43039"
  },
  {
    "text": "awesome",
    "start": "54600",
    "end": "57140"
  },
  {
    "text": "okay I think let's start",
    "start": "60539",
    "end": "65420"
  },
  {
    "text": "so first question have you heard about graphql before are you using it",
    "start": "66479",
    "end": "73200"
  },
  {
    "text": "do you have it in production experimenting with it",
    "start": "73200",
    "end": "77960"
  },
  {
    "text": "awesome that's by the way the typical.net",
    "start": "84479",
    "end": "89700"
  },
  {
    "text": "um result for this if I do that add a JavaScript conference you would see the green and the pink bar",
    "start": "89700",
    "end": "98700"
  },
  {
    "text": "and much higher okay second question",
    "start": "98700",
    "end": "104960"
  },
  {
    "text": "how long do you think is Grafton already alive",
    "start": "107280",
    "end": "112159"
  },
  {
    "text": "interesting",
    "start": "117479",
    "end": "120078"
  },
  {
    "text": "awesome that's also a typical uh",
    "start": "128759",
    "end": "135540"
  },
  {
    "text": "result of this not only in graphql in general people think graphq is around",
    "start": "135540",
    "end": "140879"
  },
  {
    "text": "five years old but actually it was created back in 2012",
    "start": "140879",
    "end": "148620"
  },
  {
    "text": "by Facebook and they initially called it super graph",
    "start": "148620",
    "end": "155580"
  },
  {
    "text": "for lack of a better name it was created by three people that were in charge of figuring",
    "start": "155580",
    "end": "163080"
  },
  {
    "text": "out what is wrong with their mobile applications back then it was Nick's Rock Lee Byron and Dan schoffner",
    "start": "163080",
    "end": "171540"
  },
  {
    "start": "170000",
    "end": "427000"
  },
  {
    "text": "so what is graphql or better why is graphql",
    "start": "171540",
    "end": "177780"
  },
  {
    "text": "and to answer that we have to look a bit at what problems Facebook was facing",
    "start": "177780",
    "end": "185280"
  },
  {
    "text": "back in 2012. so back in 2012 maybe somebody remembers",
    "start": "185280",
    "end": "191879"
  },
  {
    "text": "they were introducing a new mobile application and this mobile application actually",
    "start": "191879",
    "end": "198659"
  },
  {
    "text": "didn't look like this it looked more like this faced a lot of backlash because it has",
    "start": "198659",
    "end": "205860"
  },
  {
    "text": "had several issues and these issues were around that the app startup times were",
    "start": "205860",
    "end": "211800"
  },
  {
    "text": "very slow and that it used a lot of data and back then we didn't have these",
    "start": "211800",
    "end": "216840"
  },
  {
    "text": "generous data plans with gigabytes it was more like maybe 500 megabytes or so and on top of that it drained the",
    "start": "216840",
    "end": "224099"
  },
  {
    "text": "batteries very quickly so the Facebook team by the way this is",
    "start": "224099",
    "end": "230879"
  },
  {
    "text": "how the news feed looked back then also a nice ugly application",
    "start": "230879",
    "end": "237900"
  },
  {
    "text": "so the team back then analyzed what is the problem and what they found out is",
    "start": "238379",
    "end": "244260"
  },
  {
    "text": "that they actually used all the techniques that they used for their",
    "start": "244260",
    "end": "249599"
  },
  {
    "text": "Facebook web application and applied them to their mobile application so they",
    "start": "249599",
    "end": "254939"
  },
  {
    "text": "used HTML because they were expecting HTML5 already back then and the HTML5",
    "start": "254939",
    "end": "260940"
  },
  {
    "text": "features and they were like hyped about that you could use HTML to build mobile",
    "start": "260940",
    "end": "266100"
  },
  {
    "text": "applications things that we do today but they didn't work out back then",
    "start": "266100",
    "end": "272340"
  },
  {
    "text": "and also they're used in the back end rest and that was a major problem for",
    "start": "272340",
    "end": "277620"
  },
  {
    "text": "them because rest was not optimized for this mobile needs so when they looked at the requests that",
    "start": "277620",
    "end": "286500"
  },
  {
    "text": "they were doing so when they basically started up the application that would maybe fetch the current user that they",
    "start": "286500",
    "end": "293040"
  },
  {
    "text": "signed in and they would get the same response back that the desktop application Got Back",
    "start": "293040",
    "end": "299400"
  },
  {
    "text": "so actually the mobile application just needed three properties but this request actually had over 60 properties so a lot",
    "start": "299400",
    "end": "307500"
  },
  {
    "text": "of data that we had to consume because at some point the back-end Engineers defined that this is what you need when",
    "start": "307500",
    "end": "315419"
  },
  {
    "text": "you log on right and the second thing here is",
    "start": "315419",
    "end": "320460"
  },
  {
    "text": "that they actually needed more data they don't just want a user name and they use",
    "start": "320460",
    "end": "326220"
  },
  {
    "text": "a picture they actually wanted the news feed so they had to first get this first",
    "start": "326220",
    "end": "331740"
  },
  {
    "text": "request grab from that in a some ID pass that in the second request and then",
    "start": "331740",
    "end": "338400"
  },
  {
    "text": "fetch the news feed and for the new suite we had the same problem for the mobile application we",
    "start": "338400",
    "end": "344160"
  },
  {
    "text": "had a very small viewport so we maybe wanted the story The text of the news",
    "start": "344160",
    "end": "350340"
  },
  {
    "text": "and then we might want to have a picture or the author who wrote that a picture",
    "start": "350340",
    "end": "355860"
  },
  {
    "text": "of that author but the news endpoint just provided us with news data",
    "start": "355860",
    "end": "363240"
  },
  {
    "text": "so we had to grab some IDs here from the author and feed that into the next",
    "start": "363240",
    "end": "369180"
  },
  {
    "text": "request and again this request was also not optimized on mobile applications and",
    "start": "369180",
    "end": "376440"
  },
  {
    "text": "gave us a lot of property that properties that we didn't need um and we actually just again needed",
    "start": "376440",
    "end": "382860"
  },
  {
    "text": "three properties to get the profile picture and the name such a thing looked probably like this",
    "start": "382860",
    "end": "390060"
  },
  {
    "text": "it's not from Facebook I just re-engineered this data waterfall this is how we call",
    "start": "390060",
    "end": "397440"
  },
  {
    "text": "that there are a lot of consecutive requests that you are actually doing because rest is designed around the",
    "start": "397440",
    "end": "404580"
  },
  {
    "text": "concept of resources where you have a user resource a news resource and",
    "start": "404580",
    "end": "409620"
  },
  {
    "text": "everything is nice and capsulated and the problem here is that you cannot paralyze these requests you have to",
    "start": "409620",
    "end": "416520"
  },
  {
    "text": "always wait for the previous request to get some ID from it to feed that in the next request and that slows your apis",
    "start": "416520",
    "end": "423900"
  },
  {
    "text": "really down so the three people at Facebook sat down",
    "start": "423900",
    "end": "429780"
  },
  {
    "start": "427000",
    "end": "562000"
  },
  {
    "text": "and rethought the concept and said we need to reverse the responsibility and",
    "start": "429780",
    "end": "435840"
  },
  {
    "text": "give the client the power to ask for what it needs",
    "start": "435840",
    "end": "442560"
  },
  {
    "text": "so this is a graphql query you could say the hello world of graphql",
    "start": "442560",
    "end": "447660"
  },
  {
    "text": "in this query we are asking for the currently signed in user and for the name and if we send that to our server",
    "start": "447660",
    "end": "454620"
  },
  {
    "text": "we get exactly that Json that closely aligns to our request",
    "start": "454620",
    "end": "461460"
  },
  {
    "text": "structure and gives us exactly the data we asked for not more and also not in a",
    "start": "461460",
    "end": "466800"
  },
  {
    "text": "different shape and as our components change or our use cases change or the devices we can ask",
    "start": "466800",
    "end": "474300"
  },
  {
    "text": "for more or less data in this instance we are also asking for the profile picture and some details around that",
    "start": "474300",
    "end": "481259"
  },
  {
    "text": "and as we might already expect if we send that to our server it will respond",
    "start": "481259",
    "end": "486599"
  },
  {
    "text": "with exactly the data in the shape and structure we want it",
    "start": "486599",
    "end": "493080"
  },
  {
    "text": "and if we look at that we actually think that's actually great for",
    "start": "493080",
    "end": "498240"
  },
  {
    "text": "relations so if we have related data connected data in our graph like the",
    "start": "498240",
    "end": "503639"
  },
  {
    "text": "news or the friends like think about the Facebook application we have these friends lists we could fetch that in one",
    "start": "503639",
    "end": "509819"
  },
  {
    "text": "go when our application starts we do a single HTTP request to our backend and",
    "start": "509819",
    "end": "516000"
  },
  {
    "text": "fetch all the data we need but we also see some repetition here",
    "start": "516000",
    "end": "521219"
  },
  {
    "text": "like name and last scene is used duplicate times and we actually could use something in",
    "start": "521219",
    "end": "527880"
  },
  {
    "text": "graphql that is called a fragment and that is our primitive for composition in our client component it's",
    "start": "527880",
    "end": "535260"
  },
  {
    "text": "essentially the client contract for your react component or for your Blazer",
    "start": "535260",
    "end": "540720"
  },
  {
    "text": "component or whatever you are using we are not talking about the client side",
    "start": "540720",
    "end": "546240"
  },
  {
    "text": "so much so let's move on so the main concept here is graphql",
    "start": "546240",
    "end": "553260"
  },
  {
    "text": "gives the consumer the power to ask for what it needs and you get nothing more",
    "start": "553260",
    "end": "560100"
  },
  {
    "text": "exactly what you need so what is graphql graphql is a very",
    "start": "560100",
    "end": "565860"
  },
  {
    "start": "562000",
    "end": "716000"
  },
  {
    "text": "language for your API it doesn't have to do anything with graph databases nothing",
    "start": "565860",
    "end": "571680"
  },
  {
    "text": "to do with databases actually it's a query language on top of your API and",
    "start": "571680",
    "end": "577320"
  },
  {
    "text": "runtime to execute those queries and it allows you to expose your business layer",
    "start": "577320",
    "end": "582720"
  },
  {
    "text": "in a much richer way with interfaces unions so you have a no compromise way",
    "start": "582720",
    "end": "589260"
  },
  {
    "text": "to expose your business layer to other people",
    "start": "589260",
    "end": "594360"
  },
  {
    "text": "so with graphql we have a single endpoint because we are telling that endpoint what we need so we don't need",
    "start": "594360",
    "end": "600480"
  },
  {
    "text": "all these multiple endpoints and we can fetch all the data that we need in one request",
    "start": "600480",
    "end": "607200"
  },
  {
    "text": "and that is very powerful this allows for no over fetching or",
    "start": "607200",
    "end": "612720"
  },
  {
    "text": "under fetching this overfetching was when I had to consume the properties",
    "start": "612720",
    "end": "618000"
  },
  {
    "text": "from a request from an endpoint that somebody designed for a complete different use case so I had to swallow",
    "start": "618000",
    "end": "624240"
  },
  {
    "text": "all that data that I didn't need and under fetching is when I don't get",
    "start": "624240",
    "end": "629580"
  },
  {
    "text": "enough data all those IDs in these requests that are points connection points that I actually wanted to have I",
    "start": "629580",
    "end": "636180"
  },
  {
    "text": "don't want this ID I want the freaking name of this username of this user",
    "start": "636180",
    "end": "642959"
  },
  {
    "text": "and on top of that graphql is built on a strong type system that allows you to",
    "start": "642959",
    "end": "648240"
  },
  {
    "text": "have a real much richer way to expose your business layer",
    "start": "648240",
    "end": "653700"
  },
  {
    "text": "and that makes graphql really predictable to use and on top of that it's real time",
    "start": "653700",
    "end": "659279"
  },
  {
    "text": "and we will have a look at how we can make it real time with serverless today",
    "start": "659279",
    "end": "664860"
  },
  {
    "text": "okay so before we look at the first piece of code this is the basic",
    "start": "664860",
    "end": "672300"
  },
  {
    "text": "three operations that you can do with graphql we have read operations we call them query in graphql and it is",
    "start": "672300",
    "end": "679620"
  },
  {
    "text": "basically the get in rest if you design your rest API well then we also have",
    "start": "679620",
    "end": "685680"
  },
  {
    "text": "mutations that our write operations causing side effects to our system and it's basically the put post patch delete",
    "start": "685680",
    "end": "693000"
  },
  {
    "text": "in rest last we have events or we call them subscriptions in graphql and you don't",
    "start": "693000",
    "end": "700140"
  },
  {
    "text": "have them in rest you maybe have them in by using signal r or or web sockets or",
    "start": "700140",
    "end": "706860"
  },
  {
    "text": "so but in graphql they're integrated so writing a query is no different from writing a reactive subscription",
    "start": "706860",
    "end": "716399"
  },
  {
    "start": "716000",
    "end": "964000"
  },
  {
    "text": "okay let's have a quick look how graphql works and this first example we are just",
    "start": "716579",
    "end": "723240"
  },
  {
    "text": "doing with simple asp.net core so if we wanted to create a graphql",
    "start": "723240",
    "end": "730680"
  },
  {
    "text": "server we could start just by creating a new web application so I could say",
    "start": "730680",
    "end": "736260"
  },
  {
    "text": "dotnet new web and then I need a single package to add graphql to it so I would do hot",
    "start": "736260",
    "end": "745140"
  },
  {
    "text": "chocolate add hot chocolate and let's take a preview",
    "start": "745140",
    "end": "751160"
  },
  {
    "text": "and now I have everything ready to build a graphql server so I set we have this",
    "start": "751740",
    "end": "758880"
  },
  {
    "text": "query type a query root operation type or these root operation types and that's actually how I built a graphql server so",
    "start": "758880",
    "end": "766139"
  },
  {
    "text": "I would start maybe with a class query here and let me just um put in a simple query",
    "start": "766139",
    "end": "773880"
  },
  {
    "text": "here so it's a simple class we call that query",
    "start": "773880",
    "end": "779100"
  },
  {
    "text": "and maybe start with the hello world here so we do public string and then we say hello",
    "start": "779100",
    "end": "787560"
  },
  {
    "text": "and that maybe has an argument here that we call a name and um",
    "start": "787560",
    "end": "794220"
  },
  {
    "text": "has maybe a default called world and then we do some string concatenation",
    "start": "794220",
    "end": "800519"
  },
  {
    "text": "here hello and then put in the name here okay",
    "start": "800519",
    "end": "807899"
  },
  {
    "text": "that's a good start this is actually all we need for a graphql server there's now",
    "start": "807899",
    "end": "813300"
  },
  {
    "text": "just some configuration needed so we go here to our program CS like every other",
    "start": "813300",
    "end": "818880"
  },
  {
    "text": "web application application and then we configure our graphql server and we're",
    "start": "818880",
    "end": "824579"
  },
  {
    "text": "using the Builder here and the services and then we just say at",
    "start": "824579",
    "end": "830660"
  },
  {
    "text": "graphql server and then add query type",
    "start": "830660",
    "end": "835800"
  },
  {
    "text": "and then we're just pointing through the to that type that we just created there's one more thing needed here and",
    "start": "835800",
    "end": "843660"
  },
  {
    "text": "that is mapping the transport so we go down here and say map graphql",
    "start": "843660",
    "end": "849420"
  },
  {
    "text": "and then we are actually done we can run that thing",
    "start": "849420",
    "end": "854899"
  },
  {
    "text": "oh password unexpected yes hello okay so my endpoint",
    "start": "858120",
    "end": "867180"
  },
  {
    "text": "is up I kind of just grab it here ah no then let's take the http",
    "start": "867180",
    "end": "874079"
  },
  {
    "text": "and you see it's a 4-4 there's nothing there because graphql is always or by",
    "start": "874079",
    "end": "879720"
  },
  {
    "text": "default hosted on the graphql route and now I'm greeted here with banana cake",
    "start": "879720",
    "end": "885120"
  },
  {
    "text": "pop that's our graphql IDE let me Zoom that in a bit",
    "start": "885120",
    "end": "890579"
  },
  {
    "text": "so that we can all see better and the most important feature here is",
    "start": "890579",
    "end": "897959"
  },
  {
    "text": "that it can raise down the glasses uh no worries okay so I can open here a",
    "start": "897959",
    "end": "906000"
  },
  {
    "text": "new tab and now I have my graphical schema which I can look at and what I",
    "start": "906000",
    "end": "911220"
  },
  {
    "text": "meant with exposing our AP in a much richer way is that our C sharp chord just translated one to one to graphql",
    "start": "911220",
    "end": "919019"
  },
  {
    "text": "types so you can see I have a c I say hello here with a string that is",
    "start": "919019",
    "end": "924060"
  },
  {
    "text": "returned it's a non-nullable string so the null ability is correctly inferred and I also have human argument and even",
    "start": "924060",
    "end": "931220"
  },
  {
    "text": "my default value so if I use that now I can ask my server to say hello to me",
    "start": "931220",
    "end": "939060"
  },
  {
    "text": "and it would say hello world and I have an argument so I could overwrite the default value here and say",
    "start": "939060",
    "end": "946500"
  },
  {
    "text": "hello Michael and it works and this is very clean let's see",
    "start": "946500",
    "end": "954720"
  },
  {
    "text": "um it's very clean to use okay let's go back to the slides",
    "start": "954720",
    "end": "960839"
  },
  {
    "text": "you just get rid of that and come back to the slides and recap",
    "start": "960839",
    "end": "966360"
  },
  {
    "text": "that a bit so we created a simple class in C sharp that we called query and we",
    "start": "966360",
    "end": "972120"
  },
  {
    "text": "just said as our query root type so this is the entry point for our graphql server from there we can expose",
    "start": "972120",
    "end": "978720"
  },
  {
    "text": "everything we want and it will be inferred as graphql",
    "start": "978720",
    "end": "984079"
  },
  {
    "text": "we call this method in our query class resolver",
    "start": "984079",
    "end": "990180"
  },
  {
    "text": "and from that resolver we infer actually the graphql type",
    "start": "990180",
    "end": "995880"
  },
  {
    "text": "and we call that The annotation based approach this is the original graphql approach that Facebook came up with they",
    "start": "995880",
    "end": "1002959"
  },
  {
    "text": "didn't want to have a second specification language they",
    "start": "1002959",
    "end": "1008060"
  },
  {
    "text": "wanted their developers to write code and this code exposes your service layer",
    "start": "1008060",
    "end": "1015139"
  },
  {
    "text": "so okay and if we look at the graphical type here the hello we call that the",
    "start": "1015139",
    "end": "1022759"
  },
  {
    "text": "field on the graphql type and the field is like a method or function in C sharp",
    "start": "1022759",
    "end": "1029839"
  },
  {
    "text": "and Fields can have arguments just like methods and also default values in fact",
    "start": "1029839",
    "end": "1036740"
  },
  {
    "text": "graphql even can have objects as default values so it can do more than C sharp in",
    "start": "1036740",
    "end": "1042260"
  },
  {
    "text": "that regard and also one important aspect with graphql",
    "start": "1042260",
    "end": "1047600"
  },
  {
    "text": "types are nullable by default and they are not valuable if we put an",
    "start": "1047600",
    "end": "1052880"
  },
  {
    "text": "exclamation mark on that so this is not a non non-null forgiving operator",
    "start": "1052880",
    "end": "1059299"
  },
  {
    "text": "that is different in c-sharp where we put a question mark on a type to make it",
    "start": "1059299",
    "end": "1064460"
  },
  {
    "text": "nullable so it's reverse okay so graphql is transport agnostic",
    "start": "1064460",
    "end": "1070880"
  },
  {
    "start": "1068000",
    "end": "1105000"
  },
  {
    "text": "that's important to know you could write the request in the file read it",
    "start": "1070880",
    "end": "1076039"
  },
  {
    "text": "and then output it in a file um in general we have HTTP websockets",
    "start": "1076039",
    "end": "1083179"
  },
  {
    "text": "server-side events or grpc asset transport the most common case is HTTP",
    "start": "1083179",
    "end": "1088940"
  },
  {
    "text": "post and that works very well with our serverless functions",
    "start": "1088940",
    "end": "1094760"
  },
  {
    "text": "but we also can use server-side events for subscriptions and we will use that",
    "start": "1094760",
    "end": "1100940"
  },
  {
    "text": "in our Azure function later okay let's talk a bit about serverless",
    "start": "1100940",
    "end": "1106820"
  },
  {
    "start": "1105000",
    "end": "1232000"
  },
  {
    "text": "what is serverless so first thing serverless still has",
    "start": "1106820",
    "end": "1112820"
  },
  {
    "text": "servers so it runs on servers but the concept is that we don't think about",
    "start": "1112820",
    "end": "1119059"
  },
  {
    "text": "servers anymore so we don't have to manage or provision",
    "start": "1119059",
    "end": "1124160"
  },
  {
    "text": "any servers we don't we just think about our application logic and that means we",
    "start": "1124160",
    "end": "1131000"
  },
  {
    "text": "also don't have to think about scaling this thing because it scales automatically if there is more demand we",
    "start": "1131000",
    "end": "1136880"
  },
  {
    "text": "just get another function instance and also we don't have to care about high availability and this stuff because",
    "start": "1136880",
    "end": "1143900"
  },
  {
    "text": "it's abstracted from us so the serverless solution will handle method",
    "start": "1143900",
    "end": "1149299"
  },
  {
    "text": "for us and we don't have to pay for either and that's why it's very attractive for",
    "start": "1149299",
    "end": "1155900"
  },
  {
    "text": "startups or people who have the small side project but then",
    "start": "1155900",
    "end": "1160940"
  },
  {
    "text": "scales also all the way to very heavy load so it's very easy and very tempting",
    "start": "1160940",
    "end": "1168200"
  },
  {
    "text": "to start with serverless and I don't know who here",
    "start": "1168200",
    "end": "1174220"
  },
  {
    "text": "worked already with uh well still worked with boxes at the office so when I",
    "start": "1174220",
    "end": "1179480"
  },
  {
    "text": "started my career at a web agency we actually hosted for our customers the",
    "start": "1179480",
    "end": "1185900"
  },
  {
    "text": "stuff in our office so next to my office was a server rack I don't know if that",
    "start": "1185900",
    "end": "1192200"
  },
  {
    "text": "was that secure and like today in Asia but we did all this stuff",
    "start": "1192200",
    "end": "1197600"
  },
  {
    "text": "on our own so with the dawn of AWS and",
    "start": "1197600",
    "end": "1203000"
  },
  {
    "text": "Azure we actually got um infrastructure as a service and platform as a service",
    "start": "1203000",
    "end": "1208580"
  },
  {
    "text": "and gradually had to manage less and less of our infrastructure",
    "start": "1208580",
    "end": "1214460"
  },
  {
    "text": "with serverless we now really focus on our application logic and even that is",
    "start": "1214460",
    "end": "1221539"
  },
  {
    "text": "simplified there's only one thing that could be more simple and that is SAS Solutions",
    "start": "1221539",
    "end": "1228559"
  },
  {
    "text": "but then we don't have to write anymore coat so with serverless we are abstracting",
    "start": "1228559",
    "end": "1235460"
  },
  {
    "start": "1232000",
    "end": "1340000"
  },
  {
    "text": "our are we simplifying our application logic to a function so a function",
    "start": "1235460",
    "end": "1240620"
  },
  {
    "text": "doesn't mean that there is only one function it could be a whole server in there but the form of abstraction is a",
    "start": "1240620",
    "end": "1248000"
  },
  {
    "text": "function there are a couple of Frameworks out there and these are the four more",
    "start": "1248000",
    "end": "1253820"
  },
  {
    "text": "popular four most popular things so they're serverless which is a huge open",
    "start": "1253820",
    "end": "1259100"
  },
  {
    "text": "source framework which works on AWS there's AWS lambdas and they are really",
    "start": "1259100",
    "end": "1265400"
  },
  {
    "text": "easy to use you essentially can just throw your asp.net core server at them and they will work but what we are",
    "start": "1265400",
    "end": "1272720"
  },
  {
    "text": "looking to do today at is the Azure functions Okay Google Cloud I never used",
    "start": "1272720",
    "end": "1278120"
  },
  {
    "text": "they have it but um I don't know",
    "start": "1278120",
    "end": "1283000"
  },
  {
    "text": "so who is using serverless I said startups or things like that but it's",
    "start": "1284600",
    "end": "1289880"
  },
  {
    "text": "not just small things more companies that try to save money it's also big",
    "start": "1289880",
    "end": "1294980"
  },
  {
    "text": "companies like Netflix that have huge requests and want to have this Dynamic",
    "start": "1294980",
    "end": "1300620"
  },
  {
    "text": "scale and that is the reason to have that so Netflix for instance uses it to encode",
    "start": "1300620",
    "end": "1306380"
  },
  {
    "text": "their films or that is their movies and that's where they started so if someone",
    "start": "1306380",
    "end": "1311900"
  },
  {
    "text": "like Disney uploaded video Metro material to them they would use serverless functions to encode them",
    "start": "1311900",
    "end": "1318520"
  },
  {
    "text": "nowadays they are using serverless more and more and they are also one of the",
    "start": "1318520",
    "end": "1323539"
  },
  {
    "text": "biggest graphql users so if you're using Netflix you're actually using graphql in",
    "start": "1323539",
    "end": "1329120"
  },
  {
    "text": "the back end another company in this regard is Coca-Cola I haven't looked in what they are doing",
    "start": "1329120",
    "end": "1336260"
  },
  {
    "text": "with it but there are a lot of big companies that are investing in serverless okay let's have a look at Azure",
    "start": "1336260",
    "end": "1342980"
  },
  {
    "start": "1340000",
    "end": "1417000"
  },
  {
    "text": "functions and before we run into the next code example um just let's reflect a bit on their",
    "start": "1342980",
    "end": "1349100"
  },
  {
    "text": "plans because that is about payment and scale so they have actually Four plans",
    "start": "1349100",
    "end": "1354940"
  },
  {
    "text": "and the consumption plan is if you want to start cheap because you don't have to pay when nothing runs there but they",
    "start": "1354940",
    "end": "1362120"
  },
  {
    "text": "also come with a little um a little detail that if there is nothing",
    "start": "1362120",
    "end": "1367940"
  },
  {
    "text": "running and the first few requests come in you have a longer startup time so we call that a cold start for this Azure",
    "start": "1367940",
    "end": "1374780"
  },
  {
    "text": "function you can also go for the Premium plan and that has pre-warmed instances",
    "start": "1374780",
    "end": "1380480"
  },
  {
    "text": "but then you pay also for the pre-warmed instances all the time last but not least you could just use",
    "start": "1380480",
    "end": "1387620"
  },
  {
    "text": "the model of azure functions in your service plan maybe you have also already web applications so you could just run a",
    "start": "1387620",
    "end": "1394760"
  },
  {
    "text": "function in your app service plan and then you just pay your app service plan it's more about then that you don't that",
    "start": "1394760",
    "end": "1402140"
  },
  {
    "text": "it's simpler to program these last but not least and that wasn't",
    "start": "1402140",
    "end": "1407539"
  },
  {
    "text": "premium I didn't look up if it's out of preview it's function for kubernetes so if you have an AKs on Azure you could",
    "start": "1407539",
    "end": "1413659"
  },
  {
    "text": "use them in there as well last but not least there are two hosting",
    "start": "1413659",
    "end": "1419600"
  },
  {
    "start": "1417000",
    "end": "1489000"
  },
  {
    "text": "models and they're a bit confusing in.net that's why I cleared up for you so there's in-process model so the",
    "start": "1419600",
    "end": "1426980"
  },
  {
    "text": "in-process model is essentially the Legacy model but it has some benefits to use that so",
    "start": "1426980",
    "end": "1434240"
  },
  {
    "text": "the the drawbacks are you are running in the same host of the Azure function and",
    "start": "1434240",
    "end": "1439820"
  },
  {
    "text": "that means you have to be a bit more careful at what assemblies you're using and the DI is actually dry lock and not",
    "start": "1439820",
    "end": "1447500"
  },
  {
    "text": "the standard di that we use in asp.net core but it uses the HTTP request so you",
    "start": "1447500",
    "end": "1454280"
  },
  {
    "text": "have direct access to the transport and also you have to you have access to the",
    "start": "1454280",
    "end": "1460159"
  },
  {
    "text": "cancellation tokens and that means you can cancel long-running request this is good for real time",
    "start": "1460159",
    "end": "1467620"
  },
  {
    "text": "whereas the hosting models you are free of what to use you can use any new asp.net any new.net version but you",
    "start": "1467620",
    "end": "1476480"
  },
  {
    "text": "don't have cancellations and all the request responses are actually marshalled that means you cannot use",
    "start": "1476480",
    "end": "1483620"
  },
  {
    "text": "streaming Solutions here but you have your standard Di",
    "start": "1483620",
    "end": "1489080"
  },
  {
    "start": "1489000",
    "end": "1730000"
  },
  {
    "text": "okay let's have a look and how we can bring that in so there is",
    "start": "1489080",
    "end": "1494720"
  },
  {
    "text": "ah let me Notch that up a bit okay",
    "start": "1494720",
    "end": "1501520"
  },
  {
    "text": "and let's go to demo two so how to get started with with Azure",
    "start": "1501559",
    "end": "1506780"
  },
  {
    "text": "function you can install the hot chocolate templates here so that",
    "start": "1506780",
    "end": "1512120"
  },
  {
    "text": "um in order to get the Azure functions templates and it's um quite simple you do do.net Dash I and then hot chocolate",
    "start": "1512120",
    "end": "1520960"
  },
  {
    "text": "templates and then you just install them I already have them installed",
    "start": "1520960",
    "end": "1527000"
  },
  {
    "text": "um but we could just let me fix that so we",
    "start": "1527000",
    "end": "1532460"
  },
  {
    "text": "see that just delete them and hopefully I have",
    "start": "1532460",
    "end": "1537500"
  },
  {
    "text": "internet to get them back so we have three templates here two for",
    "start": "1537500",
    "end": "1543740"
  },
  {
    "text": "Azure functions one is for the uh in in process model and one is for the",
    "start": "1543740",
    "end": "1549620"
  },
  {
    "text": "isolated model and then you also have the graphql for asp.net core so what we're going to do",
    "start": "1549620",
    "end": "1556520"
  },
  {
    "text": "is use this first model here and just quickly",
    "start": "1556520",
    "end": "1563500"
  },
  {
    "text": "craft a simple Azure functions and have a look at it so I'm doing just",
    "start": "1563500",
    "end": "1569600"
  },
  {
    "text": "this simple thing here and then we go with Visual Studio code into it",
    "start": "1569600",
    "end": "1575120"
  },
  {
    "text": "and have a look at it so this is my Azure function and you can already see it looks a bit",
    "start": "1575120",
    "end": "1580520"
  },
  {
    "text": "different we have still a program CS here and they all aligned now the the",
    "start": "1580520",
    "end": "1587120"
  },
  {
    "text": "way you configure configure.net consoles so",
    "start": "1587120",
    "end": "1592520"
  },
  {
    "text": "there's a console Builder there's a host builder in Azure functions there's a builder in asp.net core so",
    "start": "1592520",
    "end": "1600380"
  },
  {
    "text": "they have a very similar concept everywhere even in Maui if you try out Maui they have a builder there so it's",
    "start": "1600380",
    "end": "1606500"
  },
  {
    "text": "very similar how we configure our startup now let me just restore that",
    "start": "1606500",
    "end": "1613480"
  },
  {
    "text": "okay so this should work the second thing here is my configuration is actually the",
    "start": "1615140",
    "end": "1622220"
  },
  {
    "text": "same the HP so the graphql configuration is actually the same like in asp.n core",
    "start": "1622220",
    "end": "1627980"
  },
  {
    "text": "I just have to chain in here my configuration Logic for graphql and then",
    "start": "1627980",
    "end": "1633740"
  },
  {
    "text": "I can write my stuff like before but I don't have to deal with all the",
    "start": "1633740",
    "end": "1638840"
  },
  {
    "text": "transport logic there's a lot more with middlewares to deal with in asp.net core so I'm really focusing here on my graph",
    "start": "1638840",
    "end": "1645559"
  },
  {
    "text": "logic so I'm just building up my graph and putting in my business logic the",
    "start": "1645559",
    "end": "1651620"
  },
  {
    "text": "function we have already pre-configured and pre-generated here so we're just calling the graphql executor and let me",
    "start": "1651620",
    "end": "1659539"
  },
  {
    "text": "just quickly run that so we do Funk start that is the way to run your functions",
    "start": "1659539",
    "end": "1666440"
  },
  {
    "text": "you can also debug them there is an emulator locally and then I can just",
    "start": "1666440",
    "end": "1672260"
  },
  {
    "text": "call that up here and",
    "start": "1672260",
    "end": "1677600"
  },
  {
    "text": "I even have banana cake pop in here and that's awesome because when I thought about functions I only thought about",
    "start": "1677600",
    "end": "1684799"
  },
  {
    "text": "these simple things where I can process something okay there's a function that fetches a message from Air from",
    "start": "1684799",
    "end": "1691700"
  },
  {
    "text": "somewhere from and processes this and then gives me a result but actually you",
    "start": "1691700",
    "end": "1697460"
  },
  {
    "text": "can host a whole web server in Azure functions and get away from this",
    "start": "1697460",
    "end": "1704179"
  },
  {
    "text": "complexity around hosting it okay so I could query that works nice let's",
    "start": "1704179",
    "end": "1712460"
  },
  {
    "text": "move on because that is still lots to tell",
    "start": "1712460",
    "end": "1719659"
  },
  {
    "text": "let me just get back to my slides here",
    "start": "1719659",
    "end": "1724360"
  },
  {
    "text": "we've got okay so the goals here from combining",
    "start": "1728120",
    "end": "1734419"
  },
  {
    "start": "1730000",
    "end": "1822000"
  },
  {
    "text": "graphql and serverless is that we have a faster iteration speed faster iteration",
    "start": "1734419",
    "end": "1739820"
  },
  {
    "text": "speed because of graphql because it decouples the development of applications between my backend and",
    "start": "1739820",
    "end": "1745820"
  },
  {
    "text": "front-end developer so the back-end developer can expose the world",
    "start": "1745820",
    "end": "1750980"
  },
  {
    "text": "and the front-end developer cannot pick from that and it's a very strong contract that I",
    "start": "1750980",
    "end": "1758120"
  },
  {
    "text": "exposed with graphql and the client developer um",
    "start": "1758120",
    "end": "1763899"
  },
  {
    "text": "can use static typings to really know what's going on where so",
    "start": "1763899",
    "end": "1770059"
  },
  {
    "text": "when the client developer crafts queries it compiles to a very strong client",
    "start": "1770059",
    "end": "1776500"
  },
  {
    "text": "depending on where they are working with so in relay we have very strong clients",
    "start": "1776500",
    "end": "1782000"
  },
  {
    "text": "and also in net Client Solutions so last but not least I have a very",
    "start": "1782000",
    "end": "1788659"
  },
  {
    "text": "efficient way to now deploy my graphql server and scale it so if you think also",
    "start": "1788659",
    "end": "1794960"
  },
  {
    "text": "about large graphs like Facebook's graph which consists of over 10 000 types and",
    "start": "1794960",
    "end": "1801140"
  },
  {
    "text": "three hundred thousand thousand Fields I can scale that and decompose that in sub",
    "start": "1801140",
    "end": "1806659"
  },
  {
    "text": "graphs like I have a graphql Gateway and only pay for the parts of the graph that are really used",
    "start": "1806659",
    "end": "1813559"
  },
  {
    "text": "but what about real time because with that real time seems",
    "start": "1813559",
    "end": "1819200"
  },
  {
    "text": "difficult we will have a look at that but before we do that let's talk about",
    "start": "1819200",
    "end": "1825440"
  },
  {
    "start": "1822000",
    "end": "2055000"
  },
  {
    "text": "the data fetching",
    "start": "1825440",
    "end": "1828460"
  },
  {
    "text": "and for that let me jump into some more code so this was",
    "start": "1830720",
    "end": "1838039"
  },
  {
    "text": "our first examples let's go to demo three",
    "start": "1838039",
    "end": "1844159"
  },
  {
    "text": "okay so this is again a simple Azure function",
    "start": "1844159",
    "end": "1851480"
  },
  {
    "text": "and I'm using hip postgres I hope the internet works out because postgres is in azure",
    "start": "1851480",
    "end": "1857779"
  },
  {
    "text": "and you can see that I have here an empty query type so nothing there my",
    "start": "1857779",
    "end": "1863539"
  },
  {
    "text": "configuration is at the moment already set up like I have a pool DB context here and I'm using there my postgres",
    "start": "1863539",
    "end": "1870440"
  },
  {
    "text": "connection the graphql configuration is not there yet so how would I connect",
    "start": "1870440",
    "end": "1876140"
  },
  {
    "text": "something like that so I use Entity framework here so I have a DB context with two entities and I want to expose",
    "start": "1876140",
    "end": "1884059"
  },
  {
    "text": "them so I would go here and create my query type basic structure simple",
    "start": "1884059",
    "end": "1890419"
  },
  {
    "text": "c-sharp type and then I would just fetch introduce a",
    "start": "1890419",
    "end": "1895520"
  },
  {
    "text": "resolver here that fetches the assets from idb context",
    "start": "1895520",
    "end": "1902179"
  },
  {
    "text": "and just expose them so you can see that we are using in graphql something we call resolver",
    "start": "1902179",
    "end": "1908600"
  },
  {
    "text": "dependency injections so we are injecting into our resolver instead of injecting in our class and we are doing",
    "start": "1908600",
    "end": "1916340"
  },
  {
    "text": "that because these resolvers can be executed parallel graphql can",
    "start": "1916340",
    "end": "1921679"
  },
  {
    "text": "parallelize data fetching so there will be a data query plan created from your graphql request and then the engine",
    "start": "1921679",
    "end": "1928700"
  },
  {
    "text": "optimizes parallel data fetching from your data stores and that's why we",
    "start": "1928700",
    "end": "1934399"
  },
  {
    "text": "inject into our resolver so we can rent that DB context from our pool and use",
    "start": "1934399",
    "end": "1940940"
  },
  {
    "text": "multiple at once okay so we just did that now we",
    "start": "1940940",
    "end": "1946640"
  },
  {
    "text": "configure it so I'm going here and I'm just saying add query type",
    "start": "1946640",
    "end": "1953919"
  },
  {
    "text": "and then I'm telling my graphql server what kind of DB context we actually have",
    "start": "1955700",
    "end": "1961279"
  },
  {
    "text": "here so I can say register DB context then asset context",
    "start": "1961279",
    "end": "1966740"
  },
  {
    "text": "and then I'm telling it that this is actually a pool DB context so all the",
    "start": "1966740",
    "end": "1972200"
  },
  {
    "text": "renting and stuff is done by the graphical engine okay with that I'm actually done",
    "start": "1972200",
    "end": "1979700"
  },
  {
    "text": "and I can start this thing ah it's Punk start",
    "start": "1979700",
    "end": "1986299"
  },
  {
    "text": "I often do the mistake if you dot net run it will just fail",
    "start": "1986299",
    "end": "1992360"
  },
  {
    "text": "but Funk start will give us our graphql method here",
    "start": "1992360",
    "end": "1997640"
  },
  {
    "text": "let me just call that is it the same port here okay I refresh the schema and you can already see that I have the",
    "start": "1997640",
    "end": "2005019"
  },
  {
    "text": "asset type but I don't have just the asset type the graphql engine inspected My Graph and so",
    "start": "2005019",
    "end": "2011080"
  },
  {
    "text": "okay there's also a related object here and we could also query for that",
    "start": "2011080",
    "end": "2017019"
  },
  {
    "text": "so I can drill in the graph it's just one line of configuration and already I can use my complete sub graph here",
    "start": "2017019",
    "end": "2025059"
  },
  {
    "text": "and now I can just drill in and ask for the name and run that and if",
    "start": "2025059",
    "end": "2032080"
  },
  {
    "text": "the internet is good it's still slow because it's uh really running on azure",
    "start": "2032080",
    "end": "2038320"
  },
  {
    "text": "and you can see it's already fetching data here with just two lines of code that I had to write",
    "start": "2038320",
    "end": "2045700"
  },
  {
    "text": "but this is fetching the whole database and this is the right point",
    "start": "2045700",
    "end": "2051638"
  },
  {
    "text": "to talk about let me go there pagination",
    "start": "2051639",
    "end": "2057940"
  },
  {
    "start": "2055000",
    "end": "2194000"
  },
  {
    "text": "and um I'm doing it quickly so in Facebook looked at the pagination",
    "start": "2057940",
    "end": "2063520"
  },
  {
    "text": "concepts and when they looked at cursor-based pagination this guy here they said that never can work for us",
    "start": "2063520",
    "end": "2070240"
  },
  {
    "text": "because they have massive data loads where they get new",
    "start": "2070240",
    "end": "2075398"
  },
  {
    "text": "data every few seconds and if a user would page there the news feed Maybe",
    "start": "2075399",
    "end": "2082179"
  },
  {
    "text": "then it could happen that there's rapidly new data coming in and if I go from page 1 to page two that I have the",
    "start": "2082179",
    "end": "2088960"
  },
  {
    "text": "same data because it's moving in and that's why they came up with",
    "start": "2088960",
    "end": "2095020"
  },
  {
    "text": "something that we call cursor based pagination and that allows me to pin each item and as new data is coming in",
    "start": "2095020",
    "end": "2102760"
  },
  {
    "text": "I'm navigating relatively from my entities and that means as my new data",
    "start": "2102760",
    "end": "2109060"
  },
  {
    "text": "is coming in my pages as well shift so I have a consistent paging solution",
    "start": "2109060",
    "end": "2116380"
  },
  {
    "text": "so how would we Implement that with graphql let's have a quick look let me",
    "start": "2116380",
    "end": "2121900"
  },
  {
    "text": "stop that so I'm going here to query and then I'm saying",
    "start": "2121900",
    "end": "2127420"
  },
  {
    "text": "use paging and then we are done",
    "start": "2127420",
    "end": "2133660"
  },
  {
    "text": "it's more about the concept okay this is rebuilding I can already",
    "start": "2133660",
    "end": "2141940"
  },
  {
    "text": "go back here to my um graphql ID and now you can see that",
    "start": "2141940",
    "end": "2147040"
  },
  {
    "text": "my types actually changed and I have this new connection type here",
    "start": "2147040",
    "end": "2152380"
  },
  {
    "text": "where I have a page info like am I on the last page or or not what is the end cursor the start cursor so I can",
    "start": "2152380",
    "end": "2158680"
  },
  {
    "text": "navigate and I also have here my assets so I can now query",
    "start": "2158680",
    "end": "2164440"
  },
  {
    "text": "the nodes and then let's go again for the name",
    "start": "2164440",
    "end": "2170380"
  },
  {
    "text": "notes and we are taking the first two",
    "start": "2170380",
    "end": "2175980"
  },
  {
    "text": "and then again it's azure as expensive to query 2 as it's",
    "start": "2176980",
    "end": "2183520"
  },
  {
    "text": "expensive to query all of them and apparently but now I just have two items",
    "start": "2183520",
    "end": "2188680"
  },
  {
    "text": "here So This Is How We Do paging in graphql",
    "start": "2188680",
    "end": "2194859"
  },
  {
    "text": "okay let's go on and talk a bit how that actually works so I just put this",
    "start": "2194859",
    "end": "2200859"
  },
  {
    "text": "attribute on and that's actually a field middleware and how that works is so when I put that",
    "start": "2200859",
    "end": "2207220"
  },
  {
    "text": "on here I'm actually creating a field resolver pipeline and that here is a middleware up there",
    "start": "2207220",
    "end": "2216040"
  },
  {
    "text": "and our resolver is essentially first we call the middleware and then the",
    "start": "2216040",
    "end": "2221740"
  },
  {
    "text": "resolver is also a middleware so we are building a pipeline with this attribute and actually if we put more of these",
    "start": "2221740",
    "end": "2228040"
  },
  {
    "text": "data attributes on here like a projection attribute that allows us to go into the graph or filter attribute",
    "start": "2228040",
    "end": "2234220"
  },
  {
    "text": "that allows us to filter this stuff we are creating a pipeline for this async",
    "start": "2234220",
    "end": "2239500"
  },
  {
    "text": "field to fetch data and if you know about middleware in",
    "start": "2239500",
    "end": "2246520"
  },
  {
    "text": "asp.net core it's the same principle so it works that use paging is called and",
    "start": "2246520",
    "end": "2252339"
  },
  {
    "text": "that would await the next element in our pipeline until we get to our get assets",
    "start": "2252339",
    "end": "2258339"
  },
  {
    "text": "resolver which would return the queryable and then these data middlewares will apply",
    "start": "2258339",
    "end": "2264660"
  },
  {
    "text": "expression Logics our logic are on top of our query boom but it does not only",
    "start": "2264660",
    "end": "2270400"
  },
  {
    "text": "work with queryville it works actually with anything so you could throw and mongodb the native driver at us and",
    "start": "2270400",
    "end": "2277180"
  },
  {
    "text": "it will work so and that will allow us to also filter things we",
    "start": "2277180",
    "end": "2284680"
  },
  {
    "text": "should be very careful with that because we don't want to create another SQL here",
    "start": "2284680",
    "end": "2289960"
  },
  {
    "text": "but it's very useful if you have this view where you where you want to filter certain things or sort certain things so",
    "start": "2289960",
    "end": "2298000"
  },
  {
    "text": "we should be careful with what we allow to filter but it's a very easy way to",
    "start": "2298000",
    "end": "2305560"
  },
  {
    "text": "um very efficiently fetched from graphql to your data layer",
    "start": "2305560",
    "end": "2312040"
  },
  {
    "start": "2311000",
    "end": "2439000"
  },
  {
    "text": "that's quickly you do that so I'm adding just here a couple of",
    "start": "2312040",
    "end": "2318160"
  },
  {
    "text": "middlewares on top so with that a use projection and",
    "start": "2318160",
    "end": "2324460"
  },
  {
    "text": "use filtering and then I'm doing use sorting",
    "start": "2324460",
    "end": "2331740"
  },
  {
    "text": "and then by default these features are disabled so because we don't want to over expose",
    "start": "2332260",
    "end": "2339400"
  },
  {
    "text": "things so you can opt into them so I can say add projections",
    "start": "2339400",
    "end": "2345400"
  },
  {
    "text": "and filtering and then add sorting",
    "start": "2345400",
    "end": "2351339"
  },
  {
    "text": "and then we can just restart our function here",
    "start": "2351339",
    "end": "2355980"
  },
  {
    "text": "go back to our browser refresh that and now we have actually a couple more",
    "start": "2359560",
    "end": "2365320"
  },
  {
    "text": "properties on here let's have a quick look oh no I broke something",
    "start": "2365320",
    "end": "2372780"
  },
  {
    "text": "that will be difficult because it's so small the screen",
    "start": "2373240",
    "end": "2379680"
  },
  {
    "text": "where's my mouse I don't see my mom out there thank you",
    "start": "2381040",
    "end": "2389079"
  },
  {
    "text": "pun 44.",
    "start": "2389079",
    "end": "2395680"
  },
  {
    "text": "ah there's something not right let me just kill that",
    "start": "2395680",
    "end": "2401338"
  },
  {
    "text": "let's try that again it doesn't work",
    "start": "2404440",
    "end": "2410079"
  },
  {
    "text": "let's move on could be the Azure connection",
    "start": "2410079",
    "end": "2416820"
  },
  {
    "text": "executing an exception y function is executed every exception schema for more looks",
    "start": "2418540",
    "end": "2425680"
  },
  {
    "text": "errors property okay I'm",
    "start": "2425680",
    "end": "2431380"
  },
  {
    "text": "skipping that it would work I made a mistake but",
    "start": "2431380",
    "end": "2436540"
  },
  {
    "text": "it's too difficult on this small screen to fix okay so this would be data aggregations",
    "start": "2436540",
    "end": "2444220"
  },
  {
    "start": "2439000",
    "end": "2541000"
  },
  {
    "text": "let's move to real time because that's even more interesting to do",
    "start": "2444220",
    "end": "2450700"
  },
  {
    "text": "okay so that's something that we talked for so far about",
    "start": "2450700",
    "end": "2457540"
  },
  {
    "text": "fetching data visc queries now we are going to subscriptions and",
    "start": "2457540",
    "end": "2463900"
  },
  {
    "text": "this is something that was very difficult with Azure functions",
    "start": "2463900",
    "end": "2469660"
  },
  {
    "text": "and why this is so difficult um I explain you in a second",
    "start": "2469660",
    "end": "2475060"
  },
  {
    "text": "so such subscriptions have a different concept a concept in graphql so we are",
    "start": "2475060",
    "end": "2480640"
  },
  {
    "text": "not just executing a resolver and getting a single result we are actually subscribing to something that we call",
    "start": "2480640",
    "end": "2486760"
  },
  {
    "text": "the event stream and the event stream every time is triggered we run the graphql engine to",
    "start": "2486760",
    "end": "2493359"
  },
  {
    "text": "fetch data and aggregate data to you and send that down to you so typically we",
    "start": "2493359",
    "end": "2499060"
  },
  {
    "text": "would do that with um with web sockets",
    "start": "2499060",
    "end": "2504280"
  },
  {
    "text": "and that is very efficient if you use asp.nicore and then you could use something like Azure web pops up or so",
    "start": "2504280",
    "end": "2510460"
  },
  {
    "text": "if you want to go for real scale so typically when we look at something",
    "start": "2510460",
    "end": "2518320"
  },
  {
    "text": "like this an event stream will trigger and would produce events and on top of",
    "start": "2518320",
    "end": "2523480"
  },
  {
    "text": "that we put our executor and the graphql executed every time",
    "start": "2523480",
    "end": "2529660"
  },
  {
    "text": "there's an event it would run and then execute the query that is requested from",
    "start": "2529660",
    "end": "2535000"
  },
  {
    "text": "us and send that down to our user",
    "start": "2535000",
    "end": "2540780"
  },
  {
    "start": "2541000",
    "end": "3012000"
  },
  {
    "text": "okay let's have a look at how that actually works right",
    "start": "2541780",
    "end": "2549119"
  },
  {
    "text": "I'll fix that in a second",
    "start": "2550119",
    "end": "2553380"
  },
  {
    "text": "just get rid of that and then we go to example six",
    "start": "2555460",
    "end": "2562680"
  },
  {
    "text": "okay",
    "start": "2567820",
    "end": "2570359"
  },
  {
    "text": "good okay so this is again an Azure function this time I'm using the in",
    "start": "2573700",
    "end": "2580359"
  },
  {
    "text": "process mode because I want to have streams and I want to have control over cancellation it looks a bit different so",
    "start": "2580359",
    "end": "2586540"
  },
  {
    "text": "if I go here in the startup you can see it looks more like the old hp.net core",
    "start": "2586540",
    "end": "2592300"
  },
  {
    "text": "so we we actually have a builder we don't have a build up because in",
    "start": "2592300",
    "end": "2598420"
  },
  {
    "text": "process mode is essentially in dll so the difference between in-process mode",
    "start": "2598420",
    "end": "2603760"
  },
  {
    "text": "and out of process mode with out of process mode I actually have a console that I configure and that runs so how",
    "start": "2603760",
    "end": "2610780"
  },
  {
    "text": "that works is actually the function always starts and it starts a console and communicates between these two",
    "start": "2610780",
    "end": "2615819"
  },
  {
    "text": "processes so with in process mode I'm a dll that is loaded into the main process",
    "start": "2615819",
    "end": "2621940"
  },
  {
    "text": "and that gives me also more freedom to do things um let me just quickly restore that",
    "start": "2621940",
    "end": "2630099"
  },
  {
    "text": "restore okay",
    "start": "2630099",
    "end": "2635520"
  },
  {
    "text": "so I have so far query time that just says hello we are not interested in we are",
    "start": "2635619",
    "end": "2643359"
  },
  {
    "text": "doing the typical thing here for uh graphql subscription and that is we're",
    "start": "2643359",
    "end": "2649240"
  },
  {
    "text": "building first a mutation that does something and actually this mutation will trigger an event that I can listen",
    "start": "2649240",
    "end": "2655540"
  },
  {
    "text": "to in this example we have a mutation that is called publish book",
    "start": "2655540",
    "end": "2662200"
  },
  {
    "text": "so we essentially can't create a book or publish a book and then every time there's a book",
    "start": "2662200",
    "end": "2668560"
  },
  {
    "text": "published I want to subscribe to this event and get notified that there is a book published",
    "start": "2668560",
    "end": "2674859"
  },
  {
    "text": "so I would first put something else in here so this actually does nothing so usually you you",
    "start": "2674859",
    "end": "2682000"
  },
  {
    "text": "would have somewhere here your data layer that actually saves this book or does something with it",
    "start": "2682000",
    "end": "2688119"
  },
  {
    "text": "the next thing we would need is something to trigger an event and to recall that in hot chocolate the eye",
    "start": "2688119",
    "end": "2694480"
  },
  {
    "text": "topic Event Center so this is our abstraction to send in events to our",
    "start": "2694480",
    "end": "2700180"
  },
  {
    "text": "subscription system so let's call that event center and this is a service so I'm marking",
    "start": "2700180",
    "end": "2706720"
  },
  {
    "text": "this with the service attribute here so that the graphql engine knows that is actually not a standard argument it's",
    "start": "2706720",
    "end": "2714460"
  },
  {
    "text": "actually a service and next we can just publish here",
    "start": "2714460",
    "end": "2721180"
  },
  {
    "text": "so we are taking the Event Center and then we are using the name of the",
    "start": "2721180",
    "end": "2726339"
  },
  {
    "text": "method in this case as a topic you can use anything you can even use objects or ins as a topic",
    "start": "2726339",
    "end": "2732579"
  },
  {
    "text": "and then sending in the book in a real world application I wouldn't send the",
    "start": "2732579",
    "end": "2737859"
  },
  {
    "text": "full entity I would probably just send an ID because I don't want to overwhelm my Pub subsystem in this time I don't",
    "start": "2737859",
    "end": "2745420"
  },
  {
    "text": "care I'm just sending the whole entity okay so the mutation actually is now",
    "start": "2745420",
    "end": "2750520"
  },
  {
    "text": "done every time I publish a book I'm triggering this event stream",
    "start": "2750520",
    "end": "2755560"
  },
  {
    "text": "so now I can create the subscription here and the subscription essentially is this",
    "start": "2755560",
    "end": "2762339"
  },
  {
    "text": "thing that is triggered every time something goes on this event stream so I'm creating a new",
    "start": "2762339",
    "end": "2769000"
  },
  {
    "text": "method here called on published book so this is always triggered when the event",
    "start": "2769000",
    "end": "2776619"
  },
  {
    "text": "is triggered and somebody is actually subscribed to us otherwise we will just throw away the event",
    "start": "2776619",
    "end": "2782859"
  },
  {
    "text": "so in order to make that clear then this is a subscribe preserver we annotated with subscribe the next thing that we do",
    "start": "2782859",
    "end": "2790720"
  },
  {
    "text": "is introduce a topic here so we are saying that this subscribe",
    "start": "2790720",
    "end": "2796480"
  },
  {
    "text": "method listens to this topic and then we need one more thing and",
    "start": "2796480",
    "end": "2802839"
  },
  {
    "text": "that's our event message so we say we consume an event message here and this",
    "start": "2802839",
    "end": "2808300"
  },
  {
    "text": "event message is actually the book that we just created and then we just return it",
    "start": "2808300",
    "end": "2815020"
  },
  {
    "text": "so typically if you build real subscriptions they're actually a bit",
    "start": "2815020",
    "end": "2820240"
  },
  {
    "text": "more complex right foreign because let me just get that in",
    "start": "2820240",
    "end": "2827819"
  },
  {
    "text": "because typically you just get an ID and maybe you think about things like",
    "start": "2827859",
    "end": "2833440"
  },
  {
    "text": "replayability and then we can use something like an ISO innumerable as a",
    "start": "2833440",
    "end": "2839079"
  },
  {
    "text": "stream I can show that in a second after we get the basics right okay so this event is now set up",
    "start": "2839079",
    "end": "2846819"
  },
  {
    "text": "let's have a look at the startup again and I'll walk you through a bit so",
    "start": "2846819",
    "end": "2852099"
  },
  {
    "text": "we have the mutation type here and that is just my other root type you can see",
    "start": "2852099",
    "end": "2857619"
  },
  {
    "text": "we can have three root types and now we have all the three root types registered second thing is I'm using here the",
    "start": "2857619",
    "end": "2864280"
  },
  {
    "text": "mutation conventions that's just so I have a nice graphical early mutation",
    "start": "2864280",
    "end": "2869980"
  },
  {
    "text": "structure and last but not least I'm using here the add in memory subscription stream and that's my",
    "start": "2869980",
    "end": "2875740"
  },
  {
    "text": "in-memory pops up in a real world application I would use",
    "start": "2875740",
    "end": "2880780"
  },
  {
    "text": "something like nuts which is scalable and synchronizes my functions",
    "start": "2880780",
    "end": "2885940"
  },
  {
    "text": "or something like redis as a pub sub but it just for the demo this will work",
    "start": "2885940",
    "end": "2892540"
  },
  {
    "text": "okay and then it's not.net run it's Funk start",
    "start": "2892540",
    "end": "2898318"
  },
  {
    "text": "function is coming up and um is doing something and I actually",
    "start": "2900940",
    "end": "2906520"
  },
  {
    "text": "wrote a little.net tool here let me Notch this one up",
    "start": "2906520",
    "end": "2912540"
  },
  {
    "text": "it's nothing fancy it is just a console that we're now",
    "start": "2913119",
    "end": "2918520"
  },
  {
    "text": "subscribe it's connected actually it's now subscribed to our event stream",
    "start": "2918520",
    "end": "2923800"
  },
  {
    "text": "let me put that here and then we can take",
    "start": "2923800",
    "end": "2928900"
  },
  {
    "text": "actually banana cake pop again let me make that small",
    "start": "2928900",
    "end": "2934740"
  },
  {
    "text": "and rearrange that here a bit",
    "start": "2934780",
    "end": "2938220"
  },
  {
    "text": "and okay okay we online so I created a couple of",
    "start": "2940180",
    "end": "2947020"
  },
  {
    "text": "books here or a crevice to create books and let's just run them",
    "start": "2947020",
    "end": "2954640"
  },
  {
    "text": "and you can see the events are immediately coming in here and that is with Azure functions and graphql SSE",
    "start": "2954640",
    "end": "2963119"
  },
  {
    "text": "you can use graphql SSE just in your client applications and let me just show",
    "start": "2963119",
    "end": "2968920"
  },
  {
    "text": "you this foreign so if you're using JavaScript",
    "start": "2968920",
    "end": "2975480"
  },
  {
    "text": "yeah so it's this component actually",
    "start": "2980079",
    "end": "2985319"
  },
  {
    "text": "if they're bigger and this works well over HTTP 2 we don't",
    "start": "2985660",
    "end": "2992619"
  },
  {
    "text": "support the HTTP one version for this so if you are using HTTP 2 it will work well otherwise I would use a different",
    "start": "2992619",
    "end": "3000480"
  },
  {
    "text": "solution so there's graphql SSE standard component where hot chocolate is",
    "start": "3000480",
    "end": "3005700"
  },
  {
    "text": "implementing that we're also supporting graphql WS which is the websocket",
    "start": "3005700",
    "end": "3010920"
  },
  {
    "text": "variant let me just get back to my slides Here and Now onto this slide",
    "start": "3010920",
    "end": "3016380"
  },
  {
    "start": "3012000",
    "end": "3172000"
  },
  {
    "text": "because then I can walk you through",
    "start": "3016380",
    "end": "3022200"
  },
  {
    "text": "a couple of Tibbets here okay this one I want to have and then let's make that big",
    "start": "3022200",
    "end": "3030660"
  },
  {
    "text": "yeah we have seen that damn it I cannot abort it",
    "start": "3030660",
    "end": "3037160"
  },
  {
    "text": "okay so this is what we build so we use the graphical function and there when you",
    "start": "3037260",
    "end": "3043800"
  },
  {
    "text": "when you scale it there could be hundreds and then we use graphical SSE to",
    "start": "3043800",
    "end": "3049559"
  },
  {
    "text": "directly subscribe to the function that means all the some all the functions to which you are subscribed they cannot",
    "start": "3049559",
    "end": "3055460"
  },
  {
    "text": "retire anymore until all of the subscribers are gone from from this",
    "start": "3055460",
    "end": "3060900"
  },
  {
    "text": "particular function um so it might be that you have a lot of",
    "start": "3060900",
    "end": "3066119"
  },
  {
    "text": "functions after a while so maybe you have a routine to kick them off after after a while we have a we have an",
    "start": "3066119",
    "end": "3071700"
  },
  {
    "text": "interception point for that you could say maybe there's no subscription that is allowed to go beyond four hours and",
    "start": "3071700",
    "end": "3077760"
  },
  {
    "text": "then you have to reconnect or something like that there's a second thing here here I added",
    "start": "3077760",
    "end": "3083760"
  },
  {
    "text": "their nuts and redis so we would want a pub subsystem because if somebody is",
    "start": "3083760",
    "end": "3089640"
  },
  {
    "text": "running a mutation on this one system that causes on another Azure functions",
    "start": "3089640",
    "end": "3094740"
  },
  {
    "text": "instance an event we need to perhaps up that works between these functions and",
    "start": "3094740",
    "end": "3099900"
  },
  {
    "text": "that could be nuts or redis because they are a one two they have these fan out",
    "start": "3099900",
    "end": "3104940"
  },
  {
    "text": "modes where you have one too many we could also have a different setup",
    "start": "3104940",
    "end": "3110760"
  },
  {
    "text": "that is more complex but that would also work with the isolated mode and that is",
    "start": "3110760",
    "end": "3116040"
  },
  {
    "text": "by using Azure web pubs up and in this instance we still would have the nuts",
    "start": "3116040",
    "end": "3121859"
  },
  {
    "text": "and redis but we would offload all the websocket connections to Azure web Hub",
    "start": "3121859",
    "end": "3127140"
  },
  {
    "text": "sub and then your web consumer would actually connect to that endpoint from",
    "start": "3127140",
    "end": "3132660"
  },
  {
    "text": "Red from azure this could be interchanged with it's not",
    "start": "3132660",
    "end": "3137940"
  },
  {
    "text": "yet ready it's coming in some of our next previews with the Azure signal R",
    "start": "3137940",
    "end": "3143040"
  },
  {
    "text": "hub meaning you would use signal r instead of azure web pubs I actually",
    "start": "3143040",
    "end": "3149760"
  },
  {
    "text": "don't like that so much because we are now using graphql WS over",
    "start": "3149760",
    "end": "3154980"
  },
  {
    "text": "signal R but it has some benefits so if you're going for high performance then",
    "start": "3154980",
    "end": "3161940"
  },
  {
    "text": "use web pubs up if you're going more for compliance with older stuff like long",
    "start": "3161940",
    "end": "3167220"
  },
  {
    "text": "polling you want long polling in there then it's signal off and if you just want an HTTP graphical",
    "start": "3167220",
    "end": "3174900"
  },
  {
    "start": "3172000",
    "end": "3310000"
  },
  {
    "text": "SSE okay so there are a couple of problems that we face with",
    "start": "3174900",
    "end": "3180540"
  },
  {
    "text": "um with subscriptions it's scaling throttling and quality of service what that means",
    "start": "3180540",
    "end": "3187440"
  },
  {
    "text": "is so scaling with Azure functions we solve that we can scan and if we put",
    "start": "3187440",
    "end": "3193319"
  },
  {
    "text": "things like uh Azure web Hub Sub in we can also scale they can go up to one million subscribers so it's a massive",
    "start": "3193319",
    "end": "3201240"
  },
  {
    "text": "scale um but there is a thing about throttling so you don't want to send maybe every",
    "start": "3201240",
    "end": "3207540"
  },
  {
    "text": "event down if you have a high frequency event stream you don't want to send every event down to your client and",
    "start": "3207540",
    "end": "3213480"
  },
  {
    "text": "Trigger them and Trigger reloads of the UI you might want to throttle that and",
    "start": "3213480",
    "end": "3219420"
  },
  {
    "text": "sent them down in buckets so if you create an event stream you could use system reactive to essentially bucket",
    "start": "3219420",
    "end": "3226920"
  },
  {
    "text": "and throttle them down there's also the question of quality of service and there",
    "start": "3226920",
    "end": "3232440"
  },
  {
    "text": "we have to think about what about missed events should we replay events and that",
    "start": "3232440",
    "end": "3237540"
  },
  {
    "text": "works when you use event streams I quickly can show you how to implement",
    "start": "3237540",
    "end": "3243119"
  },
  {
    "text": "that so if we are here in our event we use now this construct but this is",
    "start": "3243119",
    "end": "3249240"
  },
  {
    "text": "not replayable we could also have a replayable event that would look a",
    "start": "3249240",
    "end": "3254760"
  },
  {
    "text": "little bit a little bit different so we would in this case use an is where we pass on the book",
    "start": "3254760",
    "end": "3262559"
  },
  {
    "text": "what because the same let's call it the same just with async",
    "start": "3262559",
    "end": "3268079"
  },
  {
    "text": "just to have a different name here and um then we could yield now",
    "start": "3268079",
    "end": "3273260"
  },
  {
    "text": "asynchronously data and typically I think",
    "start": "3273260",
    "end": "3279720"
  },
  {
    "text": "and typically we would in the first part now look in the database or look",
    "start": "3279720",
    "end": "3285119"
  },
  {
    "text": "somewhere up if there are missed events and replace them",
    "start": "3285119",
    "end": "3291980"
  },
  {
    "text": "and then in the second part subscribe to the real time part and then we'll yield",
    "start": "3292680",
    "end": "3298260"
  },
  {
    "text": "real-time events it works like an innumerable you can just yield return here right so this is a very good way to",
    "start": "3298260",
    "end": "3306960"
  },
  {
    "text": "do that okay let's have a look at something new in graphql and we actually Implement that for two years already the",
    "start": "3306960",
    "end": "3314220"
  },
  {
    "start": "3310000",
    "end": "3392000"
  },
  {
    "text": "earliest bits and that's a really cool feature because in graphql we have that",
    "start": "3314220",
    "end": "3320280"
  },
  {
    "text": "problem problem if we have expensive requests and we if you look at graph",
    "start": "3320280",
    "end": "3325440"
  },
  {
    "text": "Square clients we actually only want one request to the server for every View",
    "start": "3325440",
    "end": "3331040"
  },
  {
    "text": "do I have time okay let me just quickly see if I have a",
    "start": "3331040",
    "end": "3337740"
  },
  {
    "text": "a client somewhere deployed yeah that's our typical demo application and",
    "start": "3337740",
    "end": "3343800"
  },
  {
    "text": "it's really slow because of the internet connection here",
    "start": "3343800",
    "end": "3349760"
  },
  {
    "text": "and let's go here to our developer tools and Notch that quickly up",
    "start": "3350579",
    "end": "3358460"
  },
  {
    "text": "to maybe 200 okay that didn't notice this guy up",
    "start": "3358800",
    "end": "3366359"
  },
  {
    "text": "okay but the Queen the essence here is every time I reload I no matter where I",
    "start": "3366359",
    "end": "3373859"
  },
  {
    "text": "go in this application I always have one graph to a request here and that is very efficient for Network",
    "start": "3373859",
    "end": "3380460"
  },
  {
    "text": "right I get what I asked for and I only need one request no data waterfalls",
    "start": "3380460",
    "end": "3388140"
  },
  {
    "text": "and if I want to do that that means if I",
    "start": "3388140",
    "end": "3393660"
  },
  {
    "start": "3392000",
    "end": "3599000"
  },
  {
    "text": "have slow paths like let's say the price here is very expensive then this could Slow Me Down",
    "start": "3393660",
    "end": "3400440"
  },
  {
    "text": "and with the new graphql specification we allow now to defer or stream these",
    "start": "3400440",
    "end": "3407460"
  },
  {
    "text": "parts meaning we can put these inline fragments around them and say this part",
    "start": "3407460",
    "end": "3412800"
  },
  {
    "text": "is actually not so important sent me all the rest and then resolve this part later as it",
    "start": "3412800",
    "end": "3420599"
  },
  {
    "text": "becomes available and this is done over HTTP 1.1 and the same HTTP stream",
    "start": "3420599",
    "end": "3428280"
  },
  {
    "text": "and we also could do that in a fragment structure like this",
    "start": "3428280",
    "end": "3433338"
  },
  {
    "text": "and this allows us to break down the execution in the execution engine and",
    "start": "3433440",
    "end": "3439140"
  },
  {
    "text": "actually just send the initial payload first and then send septic and payloads",
    "start": "3439140",
    "end": "3445260"
  },
  {
    "text": "as they become available let me show you that",
    "start": "3445260",
    "end": "3451160"
  },
  {
    "text": "um so so this actually the server to the for",
    "start": "3451859",
    "end": "3457800"
  },
  {
    "text": "the application that I showed you and here's our request graph",
    "start": "3457800",
    "end": "3463020"
  },
  {
    "text": "and if I fire that I get a response here and I actually get",
    "start": "3463020",
    "end": "3468480"
  },
  {
    "text": "a single response let me make that big so I get a single response here",
    "start": "3468480",
    "end": "3475859"
  },
  {
    "text": "I can look at the locks here you can see I have one single response",
    "start": "3475859",
    "end": "3483319"
  },
  {
    "text": "and when I now introduce defer here",
    "start": "3484020",
    "end": "3488960"
  },
  {
    "text": "now this whole thing or let's just defer this part here",
    "start": "3489839",
    "end": "3495780"
  },
  {
    "text": "now we are deferring the most expensive part of our request it's actually this",
    "start": "3495780",
    "end": "3502260"
  },
  {
    "text": "guy is actually in the implementation resolved through rest in the back end and now the execution is split down but",
    "start": "3502260",
    "end": "3510480"
  },
  {
    "text": "I can go one further and say okay this actually is a list we could also stream",
    "start": "3510480",
    "end": "3515940"
  },
  {
    "text": "that at the same instant but send me down the first item I need one item to",
    "start": "3515940",
    "end": "3522119"
  },
  {
    "text": "display my client and all the rest data sent me as it",
    "start": "3522119",
    "end": "3527339"
  },
  {
    "text": "becomes available and now I can run that and you can see you saw for a second this flickering there let me do it again",
    "start": "3527339",
    "end": "3535619"
  },
  {
    "text": "let's flickers too fast but we luckily have this lock here I can jump",
    "start": "3535619",
    "end": "3541140"
  },
  {
    "text": "to the newest here and you can see that actually we sent down multiple parts so we initially just get this response with",
    "start": "3541140",
    "end": "3548280"
  },
  {
    "text": "this first item and then we get other parts from the",
    "start": "3548280",
    "end": "3554880"
  },
  {
    "text": "query like let's take the fourth part for instance is the fourth item from our list",
    "start": "3554880",
    "end": "3561299"
  },
  {
    "text": "and as we go along you can see that the most more expensive parts that are patched down and become one result and",
    "start": "3561299",
    "end": "3569339"
  },
  {
    "text": "that's actually what our application also does here it streams these data and let me show you one thing here because",
    "start": "3569339",
    "end": "3576180"
  },
  {
    "text": "when you design your web application look here there are multiple",
    "start": "3576180",
    "end": "3582180"
  },
  {
    "text": "uh graphs here and no matter no matter how I refresh this application",
    "start": "3582180",
    "end": "3589680"
  },
  {
    "text": "it's really slow but um they are immediately there although this is streamed this becomes",
    "start": "3589680",
    "end": "3597240"
  },
  {
    "text": "available later but for the human eye it's immediately there you don't know that it's actually there but as soon as",
    "start": "3597240",
    "end": "3604799"
  },
  {
    "text": "as you swipe it is there so you can analyze how your application needs data",
    "start": "3604799",
    "end": "3610740"
  },
  {
    "text": "and defer it and still use a single HTTP connection",
    "start": "3610740",
    "end": "3618380"
  },
  {
    "text": "okay let's go to the conclusion",
    "start": "3618540",
    "end": "3623660"
  },
  {
    "text": "so serverless simplifies your deployments simplifies how you think about",
    "start": "3624000",
    "end": "3630599"
  },
  {
    "text": "applications you essentially can now focus on your graph in graphql focus on your application logic and you don't",
    "start": "3630599",
    "end": "3638040"
  },
  {
    "text": "worry about scaling it just scales on top of that we can control our costs",
    "start": "3638040",
    "end": "3645180"
  },
  {
    "text": "and pay only what we use and with graphql rapidly evolving and getting new",
    "start": "3645180",
    "end": "3651540"
  },
  {
    "text": "features we are actually a good surf with graphql",
    "start": "3651540",
    "end": "3658319"
  },
  {
    "text": "so one more aspect so when I started with graphql internet.net it was nobody",
    "start": "3658319",
    "end": "3664740"
  },
  {
    "text": "knew about it but now it's rapidly adapted by companies Microsoft nougat internally now uses graphql hot",
    "start": "3664740",
    "end": "3671880"
  },
  {
    "text": "chocolate um Microsoft Office also starts using hot chocolate internally so there is a",
    "start": "3671880",
    "end": "3678720"
  },
  {
    "text": "lot of graph where coming out of Microsoft teams for instance uses graphql as a back-end publicly already",
    "start": "3678720",
    "end": "3685859"
  },
  {
    "text": "so you can see that in the.net ecosystem it's more more adapted and getting more",
    "start": "3685859",
    "end": "3691859"
  },
  {
    "text": "and more mainstream now so try play with it with it around it",
    "start": "3691859",
    "end": "3697140"
  },
  {
    "text": "will change your life it changed your mind so with that I'm done if you like our project start on GitHub",
    "start": "3697140",
    "end": "3705240"
  },
  {
    "text": "and if you have question you can shoot [Applause]",
    "start": "3705240",
    "end": "3715440"
  }
]