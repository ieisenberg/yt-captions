[
  {
    "text": "okay am I on hello is it working can you hear me",
    "start": "1360",
    "end": "6839"
  },
  {
    "text": "good perfect um I'm kicking off promptly just because I've got more than 60 Minutes of content to cram into 60",
    "start": "6839",
    "end": "12200"
  },
  {
    "text": "Minutes um the first thing you'll notice there's no slide up I don't have any slides I went completely zero slide I do",
    "start": "12200",
    "end": "18160"
  },
  {
    "text": "have of course I'm a net Dev I've got a little net program that tells you who I am and where to reach me so I'm mostly",
    "start": "18160",
    "end": "25080"
  },
  {
    "text": "on Blue Sky for social stuff now so posting content and things you'll find me over there uh you can also follow me",
    "start": "25080",
    "end": "30840"
  },
  {
    "text": "on LinkedIn um and get updates about the stuff that I'm putting out as well um I'm Steve I'm an engineer at elastic uh",
    "start": "30840",
    "end": "37559"
  },
  {
    "text": "PL offer and MVP and today we're going to be talking about unveiling net Secrets um so there's a lot of people",
    "start": "37559",
    "end": "43719"
  },
  {
    "text": "here which is great to see hopefully everyone's readly abstract and understands what you're in for this isn't a talk where on Monday you'll go",
    "start": "43719",
    "end": "50199"
  },
  {
    "text": "back to the office and there's a bunch of things that you'll suddenly start doing in your applications to make them better you're not going to learn you cop",
    "start": "50199",
    "end": "55680"
  },
  {
    "text": "features or uh performance tips for. net as such what we're going to be looking at is a little bit about under the",
    "start": "55680",
    "end": "61519"
  },
  {
    "text": "covers of net and how uh assemblies are actually produced and and then run by",
    "start": "61519",
    "end": "66680"
  },
  {
    "text": "the runtime um and it's mostly an excused to learn various tools that you may or may not have seen they're usually",
    "start": "66680",
    "end": "73280"
  },
  {
    "text": "more advanced tools um but to see how those get used in uh certain scenarios and give you ideas on when you can make",
    "start": "73280",
    "end": "80119"
  },
  {
    "text": "use of those so I'm going to jump straight over to a terminal here and uh first thing we'll do is make a",
    "start": "80119",
    "end": "88360"
  },
  {
    "text": "directory and in in there we're going to start by creating",
    "start": "88360",
    "end": "94720"
  },
  {
    "text": "uh a program file so I'm going to do this in notepad so if I can type on this Le",
    "start": "94720",
    "end": "100240"
  },
  {
    "text": "turn um wow it's going to be mostly you watching",
    "start": "100240",
    "end": "105560"
  },
  {
    "text": "me fumble typing U so we'll do this and then we're going to create a CS file now",
    "start": "105560",
    "end": "111040"
  },
  {
    "text": "I'm I'm not using an IDE here uh live coding on stage is inherently dangerous for speakers and um particularly",
    "start": "111040",
    "end": "117759"
  },
  {
    "text": "exciting for the audience so we're going to attempt to do this with ID safety net if you do spot any errors as we're going",
    "start": "117759",
    "end": "122960"
  },
  {
    "text": "through uh please tell me and we will try and correct it as we go but we'll give this a a shot so the first thing",
    "start": "122960",
    "end": "128479"
  },
  {
    "text": "we're going to do is we're going to use something that's been in net since Net 5 C 9 called top level statements and this",
    "start": "128479",
    "end": "134200"
  },
  {
    "text": "is basically the notion that in a in a one file within an assembly we don't have to create the traditional structure",
    "start": "134200",
    "end": "140640"
  },
  {
    "text": "the the rigal of having using sort of directives then having a namespace then having a type um with methods on it we",
    "start": "140640",
    "end": "147040"
  },
  {
    "text": "can actually just start putting statements directly into the file and this is part of all of the net templates today so if you do a new console app or",
    "start": "147040",
    "end": "153800"
  },
  {
    "text": "a new aspet core app unless you uncheck the box or tick the box I can't remember in visual studio um you'll get a top",
    "start": "153800",
    "end": "159239"
  },
  {
    "text": "level statements file and we'll use that just because it's Tura so I'm going to begin in a rather unusual Way by",
    "start": "159239",
    "end": "165080"
  },
  {
    "text": "starting with a open curly brace here let's zoom in a little open curly brace um so this is the beginning of a scope",
    "start": "165080",
    "end": "171360"
  },
  {
    "text": "in net um and uh the next bit gets a little bit more complex so bear with me",
    "start": "171360",
    "end": "176760"
  },
  {
    "text": "um we're then going to put a a close curly brace that is the live coding portion of this demo done I've succeeded",
    "start": "176760",
    "end": "182920"
  },
  {
    "text": "I've done two characters from memory and everyone's pretty impressed now it's not about the code this is as much code as",
    "start": "182920",
    "end": "188440"
  },
  {
    "text": "you're going to see today it's about all of the stuff that we then do um following that so we've created um this",
    "start": "188440",
    "end": "195959"
  },
  {
    "text": "program and then we need to obviously compile this so we've written some CSH code right um zoom out a little bit here",
    "start": "195959",
    "end": "202920"
  },
  {
    "text": "we've written CSH code at some point we need native assembly",
    "start": "202920",
    "end": "207959"
  },
  {
    "text": "code if I can spell assembly so we need that uh native code to run on",
    "start": "207959",
    "end": "213080"
  },
  {
    "text": "whatever platform we're going to run this application but when we compile a cop app at least by default uh with the",
    "start": "213080",
    "end": "219400"
  },
  {
    "text": "the the compiler we don't produce native code we produce uh a dll file an",
    "start": "219400",
    "end": "224519"
  },
  {
    "text": "assembly file that contains iil Intermediate Language seemed like a good idea to type",
    "start": "224519",
    "end": "231200"
  },
  {
    "text": "this all out but maybe a slide would have been quicker um so we get IL ilil",
    "start": "231200",
    "end": "236239"
  },
  {
    "text": "is a b code format it's part of a specification that's been around since donet framework days that defines a set",
    "start": "236239",
    "end": "241519"
  },
  {
    "text": "of operations uh that are as the name describes a kind of Intermediate Language um representation so it's",
    "start": "241519",
    "end": "248760"
  },
  {
    "text": "simpler uh sets of instructions than C the high level language we write in but the important thing about this is It's",
    "start": "248760",
    "end": "254799"
  },
  {
    "text": "platform independent so we can take this IL code that we've we've built and compiled on a Windows machine we can",
    "start": "254799",
    "end": "260600"
  },
  {
    "text": "deploy that onto a Linux box or a Mac Box and that code can still run because the piece of code that actually converts",
    "start": "260600",
    "end": "267199"
  },
  {
    "text": "this is theit in the runtime the in time compiler so the jit's job is to take",
    "start": "267199",
    "end": "272720"
  },
  {
    "text": "that Intermediate Language and turn it into the appropriate native instructions on the machine that you're running on of",
    "start": "272720",
    "end": "278440"
  },
  {
    "text": "course we need to get to the ilil in the first place and so to do that we need to compile from C and for that we use the",
    "start": "278440",
    "end": "284680"
  },
  {
    "text": "Roslin compiler platform and specifically CSC the C compiler which is",
    "start": "284680",
    "end": "290360"
  },
  {
    "text": "part of that platform that's what takes our C code and turns it into um the I",
    "start": "290360",
    "end": "296199"
  },
  {
    "text": "code that's in the file just a little note on um the jits so the um just in time compiler in",
    "start": "296199",
    "end": "304080"
  },
  {
    "text": "modern versions of net at least has been optimized in various ways and one of the things that's now enabled by default is",
    "start": "304080",
    "end": "309240"
  },
  {
    "text": "this notion of tiered compilation so tiered compilation is basically this notion that because this jit has to",
    "start": "309240",
    "end": "315039"
  },
  {
    "text": "happen the first time of methods ever invoked in an application um we want that to be reasonably quick we don't",
    "start": "315039",
    "end": "320400"
  },
  {
    "text": "want the jitting time to delay the actual execution of the code that we want to run and so in tiered compilation",
    "start": "320400",
    "end": "326639"
  },
  {
    "text": "there's a tier zero um which basically does the simplest thing it can it doesn't",
    "start": "326639",
    "end": "332240"
  },
  {
    "text": "doesn't do many optimizations it just says well what's the quickest way I can take this IL code and convert it to",
    "start": "332240",
    "end": "337759"
  },
  {
    "text": "instructions that will represent that on the platform where I'm running so tier Zero's job is about kind of quick",
    "start": "337759",
    "end": "343479"
  },
  {
    "text": "startup time um little sort of delay but the tiering uh continues so after method",
    "start": "343479",
    "end": "349680"
  },
  {
    "text": "gets invoked a certain number of times there not necessarily a specific number it's configurable I think in in environment variables uh we get this",
    "start": "349680",
    "end": "356479"
  },
  {
    "text": "tier one that might kick in so when a method's been invoked enough time the runtime says well this is a method",
    "start": "356479",
    "end": "361840"
  },
  {
    "text": "that's now being used often what I'm going to do is I'm going to recompile that in the background and do my best to",
    "start": "361840",
    "end": "368240"
  },
  {
    "text": "reoptimize that code to make it as efficient as possible normally that's about reducing the number of actual",
    "start": "368240",
    "end": "374479"
  },
  {
    "text": "native instructions that need to run so that the code runs a little bit quicker but there's another technology that's at",
    "start": "374479",
    "end": "379919"
  },
  {
    "text": "play here called um dynamic dynamic pgo",
    "start": "379919",
    "end": "385919"
  },
  {
    "text": "profile guided optimization and this plays into this tiered compilation model",
    "start": "385919",
    "end": "391199"
  },
  {
    "text": "because what it does is it at tier zero injects a bunch of instrumentation",
    "start": "391199",
    "end": "396680"
  },
  {
    "text": "instructions into that native code base so that it can track specific things about uh how that codee's actually being",
    "start": "396680",
    "end": "403840"
  },
  {
    "text": "used at runtime so for example it can actually tell which branches of an if else block for example are most",
    "start": "403840",
    "end": "410479"
  },
  {
    "text": "regularly taken and then later on at tier one that information can be used to actually optimize the instructions that",
    "start": "410479",
    "end": "417000"
  },
  {
    "text": "are written so that it can optimize for the common case so if for example you have an if and else but 99.9% of the",
    "start": "417000",
    "end": "423000"
  },
  {
    "text": "time the code flows through the else then it makes more sense to check that that condition first in the native code",
    "start": "423000",
    "end": "429919"
  },
  {
    "text": "and then immediately run the code that normally follows it and then the slow PA is for that sort of 0.1% that occurs",
    "start": "429919",
    "end": "435800"
  },
  {
    "text": "after it now there's one other point to mention here because we're sort of talking here about the common",
    "start": "435800",
    "end": "442080"
  },
  {
    "text": "compilation of net um but there's also sort of other modes today that we have so we have a head of time compilation",
    "start": "442080",
    "end": "448400"
  },
  {
    "text": "which is where we can actually compile piler application as the name suggests ahead of time directly into native",
    "start": "448400",
    "end": "453919"
  },
  {
    "text": "instructions um and this can be useful if you're in scenarios where you need very rapid startup then obviously if",
    "start": "453919",
    "end": "459639"
  },
  {
    "text": "you've got no jit NE needing to run as part of that codebase then things are going to run a little bit quicker",
    "start": "459639",
    "end": "465759"
  },
  {
    "text": "there's also kind of a middle ground um technology called ready to run that's also an option that you can do with net",
    "start": "465759",
    "end": "471800"
  },
  {
    "text": "um as a a switch when you're building and ready to run is kind of The Best of Both Worlds so it includes native",
    "start": "471800",
    "end": "477680"
  },
  {
    "text": "instructions um and those are the ones that run the first time those methods get invoked but behind the scenes the I",
    "start": "477680",
    "end": "483240"
  },
  {
    "text": "is still present in that file and that means that the jit compiler can still do its magic over time to try and optimize",
    "start": "483240",
    "end": "489960"
  },
  {
    "text": "based on uh how the application is being used and replace the",
    "start": "489960",
    "end": "494918"
  },
  {
    "text": "codebase so we've we've got our program here we need to turn this into uh a dll",
    "start": "497080",
    "end": "504520"
  },
  {
    "text": "basically and uh normally we'd use net build right if you're using the modern",
    "start": "504520",
    "end": "509639"
  },
  {
    "text": "you'd be using the net command line net build and then behind the scenes that will trigger Ms build um and then at as",
    "start": "509639",
    "end": "516360"
  },
  {
    "text": "at the end of that you will get your DL file and a few other um files alongside it we're going to do something that you",
    "start": "516360",
    "end": "522080"
  },
  {
    "text": "will never do uh in your day-to-day job and invoke um the the compiler directly can",
    "start": "522080",
    "end": "530040"
  },
  {
    "text": "everyone see that okay at the back hands up if you can't cool I've got a thumbs",
    "start": "530040",
    "end": "535240"
  },
  {
    "text": "up which confused me but that's fine okay so what I'm doing here is I'm using",
    "start": "535240",
    "end": "540360"
  },
  {
    "text": "the net executable and if you haven't sort of explored this is a Windows machine it will be different obviously",
    "start": "540360",
    "end": "546399"
  },
  {
    "text": "on Linux but on my Windows machine at cprogram files.net I have a donet x in the rout and this is the main entry",
    "start": "546399",
    "end": "554079"
  },
  {
    "text": "point for all things.net on a modern sort of net platform you can see it's not a big file it's 150k so it doesn't",
    "start": "554079",
    "end": "560000"
  },
  {
    "text": "actually have much knowledge in it and if you explore what it actually does it just has enough knowledge to go off and",
    "start": "560000",
    "end": "565360"
  },
  {
    "text": "do the right thing depending on the arguments you provide and that's why it's referred to internally is the mxer",
    "start": "565360",
    "end": "570519"
  },
  {
    "text": "or the multiplexer its job is just to figure out okay I need to root this here or I need to root this there so one of",
    "start": "570519",
    "end": "576440"
  },
  {
    "text": "its jobs might be to actually invoke the runtime to load an assembly and start executing but other jobs that it does is",
    "start": "576440",
    "end": "583040"
  },
  {
    "text": "also an entry point into running SDK commands from the net SDK um or or even",
    "start": "583040",
    "end": "588720"
  },
  {
    "text": "things like invoking Ms build directly so we're going to be doing that",
    "start": "588720",
    "end": "594160"
  },
  {
    "text": "and that's on my path so obviously I can just do net here and then the DL I'm actually going to execute here is here",
    "start": "594160",
    "end": "599760"
  },
  {
    "text": "and you can see this is in program files.net SDK it's in the version 9 of the SDK so I've got the the latest SDK",
    "start": "599760",
    "end": "606120"
  },
  {
    "text": "installed on my machine and under there there's a Roslin subdirectory and Roslin is that compiler platform for net and",
    "start": "606120",
    "end": "613040"
  },
  {
    "text": "one of the things it has in it is a CSC dll which is just a managed dll this is",
    "start": "613040",
    "end": "618880"
  },
  {
    "text": "a if you go and look at the source code in Roslin the C compiler is written in C which gets kind of incep um but that",
    "start": "618880",
    "end": "625560"
  },
  {
    "text": "just produces a managed dll which is the entry point to trigger the compilation process so what we're doing here is just",
    "start": "625560",
    "end": "632040"
  },
  {
    "text": "saying to net we just want you to launch that that executable directly now when we do a compilation um this is one of",
    "start": "632040",
    "end": "638320"
  },
  {
    "text": "the reasons you wouldn't do this at the command line typically is we have to give it a bunch of additional information now our application has two",
    "start": "638320",
    "end": "645040"
  },
  {
    "text": "characters right it's not particularly complicated but inherently we do need to actually reference some stuff from",
    "start": "645040",
    "end": "651120"
  },
  {
    "text": "system runtime just for the nature ofet because there's uh little attributes and",
    "start": "651120",
    "end": "656160"
  },
  {
    "text": "things in there there's the base type of like object for example that need be present and so when you compile your",
    "start": "656160",
    "end": "661320"
  },
  {
    "text": "code the compiler needs to be able to check anything that you're going to be referencing to see that any methods that",
    "start": "661320",
    "end": "666600"
  },
  {
    "text": "you're invoking for your code compile right that you you've used the correct signatures the correct set of arguments",
    "start": "666600",
    "end": "672000"
  },
  {
    "text": "Etc and so the compiler needs those references and you'll see that this is coming from net packs on my machine as",
    "start": "672000",
    "end": "678839"
  },
  {
    "text": "part of the uh the SDK installation and in there there's uh a folder here that's",
    "start": "678839",
    "end": "684360"
  },
  {
    "text": "microsoft. netref and this is the reference assemblies for net so there's kind of",
    "start": "684360",
    "end": "689600"
  },
  {
    "text": "two types of assembly the ones we normally create are the regular assemblies that include all of our code",
    "start": "689600",
    "end": "696360"
  },
  {
    "text": "all of our implementation details and the actual stuff that's going to get run but for compilation the net team as part",
    "start": "696360",
    "end": "702800"
  },
  {
    "text": "of the Base Class Library Shi these reference assemblies which you can think of as a very light uh assembly footprint",
    "start": "702800",
    "end": "708079"
  },
  {
    "text": "that just has the public signatures for the types and the methods uh that you can invoke on those types doesn't have",
    "start": "708079",
    "end": "714079"
  },
  {
    "text": "any implementation and that's all the compiler needs to compile code because it just needs to check that your calling",
    "start": "714079",
    "end": "719839"
  },
  {
    "text": "valid method signatures it doesn't need the implementation detail when you actually run your application later on",
    "start": "719839",
    "end": "725399"
  },
  {
    "text": "through the runtime then that's when the real assembly gets loaded as part of the assembly loading process and that's",
    "start": "725399",
    "end": "731360"
  },
  {
    "text": "where the implementation code gets run so it's typical to just compile against those reference assemblies because they're smaller I'm going to optimize",
    "start": "731360",
    "end": "738560"
  },
  {
    "text": "the code which basically means I want a release build I want the debug symbols so the pdb file which allows us to map",
    "start": "738560",
    "end": "744519"
  },
  {
    "text": "from high level C code down to the the code that's executing the a native level",
    "start": "744519",
    "end": "749959"
  },
  {
    "text": "when we're debugging later on for the output I just want a dll file and my input for this compilation is program CS",
    "start": "749959",
    "end": "757199"
  },
  {
    "text": "so for a single file there's there's quite a lot we have to type of this is obviously why we don't use the compiler",
    "start": "757199",
    "end": "762279"
  },
  {
    "text": "directory directly in our our usual day jobs we use Ms build which is much more",
    "start": "762279",
    "end": "767519"
  },
  {
    "text": "um convenient for such things but I'm going to run that and uh list what's in the directory here so we have our",
    "start": "767519",
    "end": "773399"
  },
  {
    "text": "program CSV two bytes not much in there we have a program dll now as the output which is uh the me the minimum default",
    "start": "773399",
    "end": "779760"
  },
  {
    "text": "side seemes to be 4K and then we have a pdb file with the the symbol mappings",
    "start": "779760",
    "end": "784839"
  },
  {
    "text": "and that's uh enough in theory to to run an application so what we might want to",
    "start": "784839",
    "end": "790480"
  },
  {
    "text": "do next is actually start uh the application and so I can again use um",
    "start": "790480",
    "end": "797079"
  },
  {
    "text": "net to say I want to invoke this dll and because it's an executable dll it should run right no um we get a big wall of",
    "start": "797079",
    "end": "805959"
  },
  {
    "text": "error but it actually tells us a lot of interesting stuff about what net does under the hood so yeah it's a fatal",
    "start": "805959",
    "end": "812639"
  },
  {
    "text": "error it's telling us the library host policy dll required to execute the application was not found in this",
    "start": "812639",
    "end": "818440"
  },
  {
    "text": "directory directory which is true yeah we didn't create that file um so let's",
    "start": "818440",
    "end": "823680"
  },
  {
    "text": "continue because it will tell us more so it's failed to run as a self-contained app the application was run as a",
    "start": "823680",
    "end": "829399"
  },
  {
    "text": "self-contained app because uh program. runtime comig dojon was not found now",
    "start": "829399",
    "end": "835680"
  },
  {
    "text": "again we didn't create that so that's fair enough um it's correct so far if you uh want to run this as a framework",
    "start": "835680",
    "end": "842199"
  },
  {
    "text": "dependent app add that file uh and specify the appropriate framework so the",
    "start": "842199",
    "end": "847680"
  },
  {
    "text": "two things here that are are particularly interesting is this notion of framework dependent and self-contained framework dependent means",
    "start": "847680",
    "end": "853720"
  },
  {
    "text": "that when you build your application from in the output directory you have your dll file for your assembly that",
    "start": "853720",
    "end": "859880"
  },
  {
    "text": "you're building and you also have any dlls that you reference that aren't part of the Base Class libraries maybe from net packages and that's all that you",
    "start": "859880",
    "end": "867360"
  },
  {
    "text": "produce and so in order for those to run they need the run time to be available somewhere on your machine and that in",
    "start": "867360",
    "end": "874040"
  },
  {
    "text": "modern. net is in that program files.net folder for net um on Windows and that",
    "start": "874040",
    "end": "879759"
  },
  {
    "text": "would include the runtime and the Base Class libraries uh for each of the versions so again we can hop over here",
    "start": "879759",
    "end": "885680"
  },
  {
    "text": "and we can see that we have the SDK folder but we also have this packed and this contains a bunch of the reference",
    "start": "885680",
    "end": "891120"
  },
  {
    "text": "assemblies and then there's this shared folder and here for the different sort of targets that might a be available we",
    "start": "891120",
    "end": "897120"
  },
  {
    "text": "have a bunch of the files that we'd expect so this includes all of the Base Class Library DLS and things but it will",
    "start": "897120",
    "end": "903920"
  },
  {
    "text": "also in another directory that we'll see later include all the runtime files as well and so framework dependent is the",
    "start": "903920",
    "end": "911800"
  },
  {
    "text": "common scenario um one of the advantages it's a small unit to deploy we only have to deploy generally a relatively small",
    "start": "911800",
    "end": "918800"
  },
  {
    "text": "number of files to wherever we want to run code obviously the downside is you need the runtime installed which is pretty trivial with modern net we can",
    "start": "918800",
    "end": "925240"
  },
  {
    "text": "have net versions side by side on the same machine and that all works nicely but the alternative is we could have a",
    "start": "925240",
    "end": "930720"
  },
  {
    "text": "self-contained app and that's where we build in a particular mode we put a flag on our build that says we want to be self-contained and in that mode we",
    "start": "930720",
    "end": "937199"
  },
  {
    "text": "expect to build not only our assembly but also we want a copy of all the Base",
    "start": "937199",
    "end": "942399"
  },
  {
    "text": "Class libraries that we need and also all of the actual runtime the native code for the core CLR the the common",
    "start": "942399",
    "end": "948199"
  },
  {
    "text": "language runtime of net and all of the relevant components like the garbage collector the um the jit for example and",
    "start": "948199",
    "end": "954279"
  },
  {
    "text": "so in selfcontain the expectation is we have all those files in our output directory and we can deploy that somewhere and run it without having had",
    "start": "954279",
    "end": "960519"
  },
  {
    "text": "to do a framework install on the machine it means a larger install footprint um it's not particularly",
    "start": "960519",
    "end": "967079"
  },
  {
    "text": "convenient for most people but it would be maybe useful in say an Enterprise environment if you've got to deploy an app to hundreds maybe thousands of",
    "start": "967079",
    "end": "973440"
  },
  {
    "text": "machines that's a windows.net application maybe you don't want to have to pre-install the runtime on all of",
    "start": "973440",
    "end": "979040"
  },
  {
    "text": "those machines through something like group policy and then manage the updates and things you just want to have to deploy the app and so that's that may be",
    "start": "979040",
    "end": "985800"
  },
  {
    "text": "a choice where you go self-contained so the other thing that's highlighted in here so not only is it",
    "start": "985800",
    "end": "991360"
  },
  {
    "text": "running self-contained because that file isn't present but it also hints at the the actual error is it can't find this",
    "start": "991360",
    "end": "996959"
  },
  {
    "text": "host policy dll and this is one of the critical dlls as part of net that's responsible for actually booting up the",
    "start": "996959",
    "end": "1004319"
  },
  {
    "text": "correct version of the runtime and loading our assemblies and actually getting things working and it expects",
    "start": "1004319",
    "end": "1009639"
  },
  {
    "text": "that to be present because it assumes itself contained so it's checking here to say well if it's self-contained I should have this critical file but I",
    "start": "1009639",
    "end": "1016079"
  },
  {
    "text": "don't so the way we're going to deal with this is that we're actually going for now make this a framework dependent",
    "start": "1016079",
    "end": "1021920"
  },
  {
    "text": "app and create this uh program. runtime config.js and I'm going to steal a snippet just to save typing I only snip",
    "start": "1021920",
    "end": "1030199"
  },
  {
    "text": "it hopefully over the session um and just put this code in so this is the minimum information we need in there and",
    "start": "1030199",
    "end": "1035558"
  },
  {
    "text": "it specifies that we want to be defining the framework that this app runs on uh we're using Microsoft netcore app which",
    "start": "1035559",
    "end": "1042000"
  },
  {
    "text": "is just sort of the Legacy name from the netcore era um and specifically we want to be on the runtime Version 9 or any of",
    "start": "1042000",
    "end": "1049160"
  },
  {
    "text": "its kind of patch versions so that should be enough now for us to run this",
    "start": "1049160",
    "end": "1055320"
  },
  {
    "text": "application and now we don't get the error and we can check uh with Last Exit code we get exit Code Zero so the app",
    "start": "1055320",
    "end": "1061360"
  },
  {
    "text": "ran to completion there were no errors obviously we don't actually have any code in our application so that's what",
    "start": "1061360",
    "end": "1067039"
  },
  {
    "text": "we'd kind of hope so the next thing I want to do is",
    "start": "1067039",
    "end": "1074720"
  },
  {
    "text": "have a little bit of a look at what's in a a dlll file and for that I'm going to use a decompiler from jet brains",
    "start": "1074720",
    "end": "1081760"
  },
  {
    "text": "Peak and I'm just going to drag in the dll that we've just",
    "start": "1081760",
    "end": "1088000"
  },
  {
    "text": "created into there and expand it down here so inside a net dll um the",
    "start": "1088000",
    "end": "1095280"
  },
  {
    "text": "structure of this file follows a convention from Windows days from back in sort of The NET Framework days where",
    "start": "1095280",
    "end": "1100799"
  },
  {
    "text": "the the the spec for NET Framework was defined which is the PE file format which is a very typical Windows file",
    "start": "1100799",
    "end": "1107000"
  },
  {
    "text": "format to use for executables and live lies um and most sort of executables",
    "start": "1107000",
    "end": "1112480"
  },
  {
    "text": "will follow this convention now although that's a Windows file format traditionally this doesn't mean this dll",
    "start": "1112480",
    "end": "1118080"
  },
  {
    "text": "can't be used and run on Linux because the thing that it's actually going to read this file is the net runtime and so",
    "start": "1118080",
    "end": "1124559"
  },
  {
    "text": "it just knows how to pause a PE file format finds the bits that it cares about for running net applications",
    "start": "1124559",
    "end": "1130760"
  },
  {
    "text": "within there and then actually launch your code but we can expand in uh do PE",
    "start": "1130760",
    "end": "1136880"
  },
  {
    "text": "we can expand this metadata folder and start to see try get these windows a little bit clearer uh start to see some",
    "start": "1136880",
    "end": "1142760"
  },
  {
    "text": "of the the content inside this file so if we expand headers you'll see some",
    "start": "1142760",
    "end": "1147840"
  },
  {
    "text": "stuff that's obviously Legacy Windows era naming there's a Dos header and ENT headers we're not interested in those um",
    "start": "1147840",
    "end": "1155480"
  },
  {
    "text": "within a PE file it defines sections and the section we're interested in is text and text will contain all of the",
    "start": "1155480",
    "end": "1161600"
  },
  {
    "text": "executable code inside this dll and we can see that there's another header here that we're getting to see which is um",
    "start": "1161600",
    "end": "1167880"
  },
  {
    "text": "being read in and this this is after inspecting that text section and finding this CLI header the common language",
    "start": "1167880",
    "end": "1174240"
  },
  {
    "text": "infrastructure which is the header defined in the original spec for NET Framework that defines the entry point",
    "start": "1174240",
    "end": "1180400"
  },
  {
    "text": "really into the net world within this file I'm going to expand that there's not much that we actually care about in here can everyone see that it's probably",
    "start": "1180400",
    "end": "1187360"
  },
  {
    "text": "a bit smaller at the back right yeah uh let me see if I can zoom this and not lose my place the only actual piece of",
    "start": "1187360",
    "end": "1194400"
  },
  {
    "text": "that that I care about is the fact that in there there's this thing called entry point token and that says to net when",
    "start": "1194400",
    "end": "1200760"
  },
  {
    "text": "you launch this assembly this is the token for the method you should invoke",
    "start": "1200760",
    "end": "1205960"
  },
  {
    "text": "and so that's encoded into that header now if I scroll down and come down to here uh we can see so I should tell show",
    "start": "1205960",
    "end": "1213520"
  },
  {
    "text": "you the numbers I suppose so it's saying within the metadata for net it's most of the metadata is organized into what they",
    "start": "1213520",
    "end": "1219720"
  },
  {
    "text": "call tables which are simple sort of data structures that represent all of the types and members that we have in the file and also those we reference and",
    "start": "1219720",
    "end": "1226760"
  },
  {
    "text": "so it's saying you can find the entry point in table six at Row one so I scroll down here we go to uh Table Six",
    "start": "1226760",
    "end": "1233320"
  },
  {
    "text": "which is listed here so that's the method death table the definitions all the methods within our assembly um and",
    "start": "1233320",
    "end": "1239120"
  },
  {
    "text": "we'll expand that and we can see that indeed there's two methods and Row one here is program main Main's got an",
    "start": "1239120",
    "end": "1246600"
  },
  {
    "text": "unusual name but don't worry about that for now so the first question some of you are probably and hopefully asking is",
    "start": "1246600",
    "end": "1252280"
  },
  {
    "text": "where did that come from we just created an open scope closed scope right we didn't create a main method or anything",
    "start": "1252280",
    "end": "1258159"
  },
  {
    "text": "let's um actually look at the code a bit further so if I come down here and expand the actual root name space here",
    "start": "1258159",
    "end": "1264640"
  },
  {
    "text": "we can see the types the classes and things defined inside this assembly and so we can see that indeed there is a",
    "start": "1264640",
    "end": "1270799"
  },
  {
    "text": "program type here with a main method and if I double click that and now I may have to zoom out if I double click that",
    "start": "1270799",
    "end": "1278279"
  },
  {
    "text": "there we go um on this side we get uh an example of what's in that",
    "start": "1278279",
    "end": "1284640"
  },
  {
    "text": "class what's in that method so we didn't create this um but the clue is the fact",
    "start": "1284640",
    "end": "1290679"
  },
  {
    "text": "that we've got this attribute here compiler generated so the compiler put this into this assembly on our behalf",
    "start": "1290679",
    "end": "1297000"
  },
  {
    "text": "and this is a process known as lowering in the compiler very common in all compilers you have these high level",
    "start": "1297000",
    "end": "1303679"
  },
  {
    "text": "language features that are available in C most of those will be converted into",
    "start": "1303679",
    "end": "1309080"
  },
  {
    "text": "simplified forms that still conform to C that the uh the runtime knows how to",
    "start": "1309080",
    "end": "1314400"
  },
  {
    "text": "execute and run and so this process happens all over the place in our code if if you use the VAR keyword in your uh",
    "start": "1314400",
    "end": "1321159"
  },
  {
    "text": "methods as everyone should um if you use the VAR keyword the actual compiled code will replace that with the actual type",
    "start": "1321159",
    "end": "1327840"
  },
  {
    "text": "name it's the convenience in C that we can use VAR instead of defining the type the type directly um but the compiler",
    "start": "1327840",
    "end": "1334200"
  },
  {
    "text": "actually converts it because VAR doesn't exist in the runtime it doesn't exist in the op codes for the I instructions it's",
    "start": "1334200",
    "end": "1340520"
  },
  {
    "text": "just a notion in C so every year mads in the team they bring out these great C",
    "start": "1340520",
    "end": "1345640"
  },
  {
    "text": "features um adding adding in things like top level statements or turny",
    "start": "1345640",
    "end": "1350720"
  },
  {
    "text": "conditional operators or all variety of those those things that are convenient Tera C code most of those nearly all of",
    "start": "1350720",
    "end": "1358279"
  },
  {
    "text": "them don't require changes in the runtime they just changes in the compiler to tell it how do I convert",
    "start": "1358279",
    "end": "1363679"
  },
  {
    "text": "this concept this New Concept you define for the language into a lower form of C",
    "start": "1363679",
    "end": "1369200"
  },
  {
    "text": "that uses older style syntax or simpler syntax even things like four each Loops will get expanded normally to something",
    "start": "1369200",
    "end": "1375240"
  },
  {
    "text": "like a while loop for example so we don't see this but what the decompiler has done here is it doesn't know that we",
    "start": "1375240",
    "end": "1381320"
  },
  {
    "text": "just wrote open curly brace closed curly brace it's taken the a instructions that it sees plus the metadata in the file",
    "start": "1381320",
    "end": "1387799"
  },
  {
    "text": "and reconstituted uh what it can see from that data so the main method here has a weird",
    "start": "1387799",
    "end": "1394120"
  },
  {
    "text": "name just to avoid kind of clashes with any main methods we might Define in our app and you can see it's empty because",
    "start": "1394120",
    "end": "1399360"
  },
  {
    "text": "what would happen with top level statements is any of the stuff that we write in that top level statements file would be put in as the method body for",
    "start": "1399360",
    "end": "1405799"
  },
  {
    "text": "main so it's just it's it's still a regular application that net knows how to execute so we got an idea now of the C",
    "start": "1405799",
    "end": "1414000"
  },
  {
    "text": "uh we got the main method and obviously there's a parameterless Constructor that's kind of implicitly there as well",
    "start": "1414000",
    "end": "1419880"
  },
  {
    "text": "if we now jump over to I uh we can look a bit further and so IL code semi-human",
    "start": "1419880",
    "end": "1426120"
  },
  {
    "text": "readable this form this is not how I code is represented in the file the file has a particular layout where I code",
    "start": "1426120",
    "end": "1432919"
  },
  {
    "text": "lives in one place metadata lives in another and what do peak's doing here is just joining the two bits together for",
    "start": "1432919",
    "end": "1438720"
  },
  {
    "text": "us so that we can see um in a semi-human readable form uh what's in that uh that",
    "start": "1438720",
    "end": "1444400"
  },
  {
    "text": "file so if you squint you can see there's a program class which is defined here extend system object as all classes",
    "start": "1444400",
    "end": "1450279"
  },
  {
    "text": "do um don't worry about all these weird keywords which are part of the kind of the the CLI spec that we don't have time",
    "start": "1450279",
    "end": "1456039"
  },
  {
    "text": "for today but the ones that we'll look at are these actual method definitions so this is the method definition of the",
    "start": "1456039",
    "end": "1462080"
  },
  {
    "text": "main method so we can see it's a method static void it's called main with these",
    "start": "1462080",
    "end": "1468039"
  },
  {
    "text": "uh characters around it it's got string array of arguments and it's c c common",
    "start": "1468039",
    "end": "1473320"
  },
  {
    "text": "Intermediate Language managed code it has the entry point token sort",
    "start": "1473320",
    "end": "1478640"
  },
  {
    "text": "of slapped on it here because that's present in that CLI header so we know that this is the entry point into the app uh the max stack again we don't",
    "start": "1478640",
    "end": "1485080"
  },
  {
    "text": "really have time to go into the stack frames and things but the stack the evaluation stack here but this is just",
    "start": "1485080",
    "end": "1490240"
  },
  {
    "text": "saying that the maximum this stack can grow to is eight um we're not using the stack really here we're not creating local variables or anything like that",
    "start": "1490240",
    "end": "1497520"
  },
  {
    "text": "the piece we care about is this IL instruction so this is the I instruction that that empty method uh turns into",
    "start": "1497520",
    "end": "1504279"
  },
  {
    "text": "which is just the r uh I instruction which means return from this method basically um potentially passing back a",
    "start": "1504279",
    "end": "1510559"
  },
  {
    "text": "return value but we're avoid returning so we've not got anything to return here and this here is just a logical label",
    "start": "1510559",
    "end": "1515840"
  },
  {
    "text": "this again isn't in the dll this is just telling us at offset zero in the bik code for this particular method you'll",
    "start": "1515840",
    "end": "1522720"
  },
  {
    "text": "find this uh instruction the Constructor code is a tiny bit more complex it's free argument",
    "start": "1522720",
    "end": "1529240"
  },
  {
    "text": "so it's saying here the first instruction is load AR zero which is a shortcut for loading the first argument",
    "start": "1529240",
    "end": "1535600"
  },
  {
    "text": "at index zero um off the evaluation stack for this method now you'll see",
    "start": "1535600",
    "end": "1540720"
  },
  {
    "text": "this is parameterless so why do we even have an argument the reason is that there's an implicit this argument which",
    "start": "1540720",
    "end": "1546679"
  },
  {
    "text": "is the object the instance of the thing that we're operating on that's passed into any instance method and that's",
    "start": "1546679",
    "end": "1551720"
  },
  {
    "text": "passed in in a kind of hidden way as index zero of the evaluation stack we then have a call instruction",
    "start": "1551720",
    "end": "1558880"
  },
  {
    "text": "and the call instruction is calling a particular method in this case the Constructor on system object so the base",
    "start": "1558880",
    "end": "1565480"
  },
  {
    "text": "Constructor now again this isn't what's in I it's not written in like UTF utf8",
    "start": "1565480",
    "end": "1570520"
  },
  {
    "text": "text or anything the call instruction is followed by four bytes that represent the token within the metadata of the",
    "start": "1570520",
    "end": "1576799"
  },
  {
    "text": "method that you want to invoke we'll look at that again in a bit more detail in a moment and then it returns we can",
    "start": "1576799",
    "end": "1582559"
  },
  {
    "text": "see that that call instruction is more than one bite because it starts offset zero in the bytes and then next instruction starts offset",
    "start": "1582559",
    "end": "1589559"
  },
  {
    "text": "six so dot peak's really useful for taking any assembly that you have even",
    "start": "1589559",
    "end": "1594720"
  },
  {
    "text": "if you don't have the original source and getting close to what the you know code is that you could write to re re",
    "start": "1594720",
    "end": "1600559"
  },
  {
    "text": "repesent that file the next thing we're going to do is um go a little bit deeper and what",
    "start": "1600559",
    "end": "1609880"
  },
  {
    "text": "I want to do for this is actually look at the bites in the dll file so the way I'm going to do this is",
    "start": "1609880",
    "end": "1616480"
  },
  {
    "text": "over here loaded in Visual Studio I've got a little tool um I've got links to",
    "start": "1616480",
    "end": "1621559"
  },
  {
    "text": "this in the resources for the talk um that I'll reshare the link just before you go this is a tool from someone",
    "start": "1621559",
    "end": "1627520"
  },
  {
    "text": "called kill lenov who works with Microsoft he works on the tooling team he's built a lot of kind of lower level",
    "start": "1627520",
    "end": "1633399"
  },
  {
    "text": "developer tools at Microsoft this is just a free open source thing that he put out actually just like a few weeks ago and I thought perfect this will be",
    "start": "1633399",
    "end": "1640080"
  },
  {
    "text": "nice thing to show today and what this does is it takes a managed DL file so I'm directly passing in my program dll",
    "start": "1640080",
    "end": "1646279"
  },
  {
    "text": "file that we just produced and it inspects that P file pauses it basically",
    "start": "1646279",
    "end": "1651919"
  },
  {
    "text": "and then pauses through the the net portion of the the data below that and",
    "start": "1651919",
    "end": "1657760"
  },
  {
    "text": "represents information to us so one of the things that we can do with that is say after we've got the P file paed I",
    "start": "1657760",
    "end": "1663720"
  },
  {
    "text": "want to access the text section of it and I want to find the first child that's labeled I and so logically it",
    "start": "1663720",
    "end": "1669640"
  },
  {
    "text": "would have gone through the metadata and the I instructions that it finds in that P file at the known locations based on",
    "start": "1669640",
    "end": "1675240"
  },
  {
    "text": "the spec and then it will label them so that I can then ask it for information about them in this case I just want to",
    "start": "1675240",
    "end": "1680480"
  },
  {
    "text": "know where does that code start and how long is it in the file so I'm going to run this and it does no output that's",
    "start": "1680480",
    "end": "1688200"
  },
  {
    "text": "interesting isn't it is",
    "start": "1688200",
    "end": "1694960"
  },
  {
    "text": "it uh did I call it the wrong name or no I'll template out I've used the wrong directory name okay thank you well done",
    "start": "1696880",
    "end": "1704159"
  },
  {
    "text": "that's super observant and I'll have to come up with a new name later on let's use the right path",
    "start": "1704159",
    "end": "1709720"
  },
  {
    "text": "and pray that this works hey thank you uh so the I code",
    "start": "1709720",
    "end": "1716760"
  },
  {
    "text": "starts this file at um 592 so offset 592 into the file it's 12 bytes so there's",
    "start": "1716760",
    "end": "1722559"
  },
  {
    "text": "only 12 bytes of I in here the only iil that's present in this file is the code that's for that program class anything",
    "start": "1722559",
    "end": "1728640"
  },
  {
    "text": "for like system runtime etc those live in at the other assembly so we'd find those in those dll files so if we",
    "start": "1728640",
    "end": "1735159"
  },
  {
    "text": "actually then open up a hex editor here I'm using hxd you can use whatever you fancy and uh we go in here and pull that",
    "start": "1735159",
    "end": "1741600"
  },
  {
    "text": "program file in and I go to offset it's the decimal offset that we got from that",
    "start": "1741600",
    "end": "1746840"
  },
  {
    "text": "file so 592 um and it jumps down to here let's",
    "start": "1746840",
    "end": "1752720"
  },
  {
    "text": "zoom in again so it jumps down to here and if I look at this so four bytes four bytes",
    "start": "1752720",
    "end": "1758840"
  },
  {
    "text": "four bytes so that's the IL code bytes in this file now there's two null byes",
    "start": "1758840",
    "end": "1764159"
  },
  {
    "text": "at the end here so these are padded to four by boundaries so actually the I we care about here is that and if I zoom",
    "start": "1764159",
    "end": "1770640"
  },
  {
    "text": "back out we pop into notepad and if I paste that in here",
    "start": "1770640",
    "end": "1776519"
  },
  {
    "text": "let's decode these bites and just double check how this kind of works so the",
    "start": "1776519",
    "end": "1781600"
  },
  {
    "text": "first thing we need to know is like how are these bites laid out and what do they mean and for that there's a if we",
    "start": "1781600",
    "end": "1787720"
  },
  {
    "text": "go to the spec files so these are available online if you search ecma 335 you'll find the original or the latest",
    "start": "1787720",
    "end": "1794559"
  },
  {
    "text": "version from like 2012 of The NET Framework spec for the common intermediate language um physical layout",
    "start": "1794559",
    "end": "1800279"
  },
  {
    "text": "and this still applies today for the most part and so the key bit here here is it's telling us a method consists of",
    "start": "1800279",
    "end": "1805519"
  },
  {
    "text": "a method header immediately followed by the body possibly followed by extra data sections um there are two flavors of",
    "start": "1805519",
    "end": "1812799"
  },
  {
    "text": "method header tiny and fat which not great naming um the least two significant bits in a method header",
    "start": "1812799",
    "end": "1818600"
  },
  {
    "text": "indicate which type we are dealing with and for a tiny header um the header is",
    "start": "1818600",
    "end": "1823880"
  },
  {
    "text": "one bite long and stores the method's code size in there so it's saying here a",
    "start": "1823880",
    "end": "1828960"
  },
  {
    "text": "method is a tiny header if there's no local variables involved the stack doesn't need to go above eight there's",
    "start": "1828960",
    "end": "1834320"
  },
  {
    "text": "no exceptions that this method deals with Etc and then it tells us a little bit further down that the um in the tiny",
    "start": "1834320",
    "end": "1842399"
  },
  {
    "text": "format here the size then is encoded in the remaining six bits so we can use",
    "start": "1842399",
    "end": "1847519"
  },
  {
    "text": "this and say well 006 is 000000 0 one one0 hopefully um and if I then look at",
    "start": "1847519",
    "end": "1853640"
  },
  {
    "text": "this so these are the least two significant bits a value of two here and if we check spec which I've lost there",
    "start": "1853640",
    "end": "1861519"
  },
  {
    "text": "um value of two means we're dealing with a tiny format so we know we're in a single bite header that represents uh",
    "start": "1861519",
    "end": "1868080"
  },
  {
    "text": "what's in this file the remaining bytes and we restart at zero here so the remaining bytes tell us how long it is",
    "start": "1868080",
    "end": "1873840"
  },
  {
    "text": "so we've got a value of one so our actual instructions here is just 2A and",
    "start": "1873840",
    "end": "1879120"
  },
  {
    "text": "2A is if we check in the spec again we can go to further down in the spec we can find all the op codes and so 2A down",
    "start": "1879120",
    "end": "1886639"
  },
  {
    "text": "here is right so this is what we saw in the decompiler it shouldn't be too surprising so this is our empty main",
    "start": "1886639",
    "end": "1893880"
  },
  {
    "text": "method represented as I just for fun we'll do the other one so we got one e",
    "start": "1893880",
    "end": "1899440"
  },
  {
    "text": "so 0 01 one one 1 0 hopefully um and again we check so this is still a tiny",
    "start": "1899440",
    "end": "1905919"
  },
  {
    "text": "header value of two here and now we've got 1 plus 2 plus 4 which is seven 1 2 3 4 5 six seven bites this is what we'd",
    "start": "1905919",
    "end": "1912519"
  },
  {
    "text": "expect we start at 02 which if we scroll up on here",
    "start": "1912519",
    "end": "1918720"
  },
  {
    "text": "O2 uh load AR zero again not surprising it was followed by I should have",
    "start": "1918720",
    "end": "1924120"
  },
  {
    "text": "memorized what the next one was 28 a call instruction and as I said",
    "start": "1924120",
    "end": "1930679"
  },
  {
    "text": "earlier and if you look further in the spec it will tell you that for a call instruction we then expect four bytes to tell us what we want to call and so if",
    "start": "1930679",
    "end": "1937279"
  },
  {
    "text": "we go back to this code and it's in little endian format so this is the four bytes that are the the token for what we",
    "start": "1937279",
    "end": "1942559"
  },
  {
    "text": "want to uh actually call and in this case the table is this bite here and",
    "start": "1942559",
    "end": "1947919"
  },
  {
    "text": "then we're row six of that table so Z 0 a is the table so if I expand the",
    "start": "1947919",
    "end": "1953279"
  },
  {
    "text": "metadata again scroll these windows a little",
    "start": "1953279",
    "end": "1958240"
  },
  {
    "text": "bit and probably Zoom that uh so z a is the member ref table so this is not not",
    "start": "1958399",
    "end": "1965600"
  },
  {
    "text": "members we Define in our application it's members from referenced assemblies and expand this row 6 the",
    "start": "1965600",
    "end": "1972679"
  },
  {
    "text": "Constructor for the object so this is how it knows by looking at the metadata now this is what you actually want to",
    "start": "1972679",
    "end": "1978039"
  },
  {
    "text": "call um and then if we go back to the file we have a r instruction at the end",
    "start": "1978039",
    "end": "1983720"
  },
  {
    "text": "so this is exactly what we saw in Peak we just gone really really low level with it",
    "start": "1983720",
    "end": "1989600"
  },
  {
    "text": "that uh right what do we want to do next let's go into wind",
    "start": "1989600",
    "end": "1994679"
  },
  {
    "text": "dbg so we're going to use wind dbg for the next bit just so we can debug through this code the reason I'm using wind dbg is it's a uh a more advanced",
    "start": "1994679",
    "end": "2002600"
  },
  {
    "text": "debugger than you would get maybe get in visual studio um and it lets us do Native and manage debugging in the same",
    "start": "2002600",
    "end": "2008880"
  },
  {
    "text": "logical session uh visual shud is actually pretty good for a lot of that now um but wind dbg is a tool that's",
    "start": "2008880",
    "end": "2014279"
  },
  {
    "text": "worth knowing about if you get into really gnarly situations it's a free tool it's",
    "start": "2014279",
    "end": "2020039"
  },
  {
    "text": "actually on the the Windows store now so you can just get the windows Store app and it's slightly better than it used to",
    "start": "2020039",
    "end": "2025120"
  },
  {
    "text": "be um and I'm going to use this um so typically you just use visual studio for manage code debugging uh so I'm going to",
    "start": "2025120",
    "end": "2031919"
  },
  {
    "text": "launch an executable and because I've screwed up my naming oh that's going to be template app now isn't it",
    "start": "2031919",
    "end": "2038600"
  },
  {
    "text": "make sure I run this in the right directory so I'm I'm using the um the launch mode here I'm saying Advanced",
    "start": "2038600",
    "end": "2044440"
  },
  {
    "text": "because I want to actually invoke doet XE with this argument the the dll that we want to run so that's just the same",
    "start": "2044440",
    "end": "2050480"
  },
  {
    "text": "as what we did over here when we did net program dll on the command line and this is the directory my working directory",
    "start": "2050480",
    "end": "2056118"
  },
  {
    "text": "that I want to start in and then we'll start debugging so the console loads because the app has launched but we'",
    "start": "2056119",
    "end": "2062200"
  },
  {
    "text": "it's paused really early uh pretty much just after the Fred creation for this process um so so the debugger is broken",
    "start": "2062200",
    "end": "2068599"
  },
  {
    "text": "in at that point and you can see we're we kind of pretty low level in the stack here we're in ntdll um in the native",
    "start": "2068599",
    "end": "2074839"
  },
  {
    "text": "code but you can see that Don XE was launched see if I can zoom this a little bit Don XE was launched and then",
    "start": "2074839",
    "end": "2081960"
  },
  {
    "text": "obviously to load a process on Windows there's various libraries involved ndl kernel 32 these are the things that can",
    "start": "2081960",
    "end": "2087960"
  },
  {
    "text": "can spawn the process and the threads and things so we've broken really early what we want to do is kind of move on a",
    "start": "2087960",
    "end": "2093280"
  },
  {
    "text": "little bit further into this app we want to know once the Run time's up and running and we want to be able to do debug further so what I'm going to do",
    "start": "2093280",
    "end": "2099359"
  },
  {
    "text": "here is a command that lets me say I want to break I want the debugger to break again when a particular module's",
    "start": "2099359",
    "end": "2105119"
  },
  {
    "text": "loaded and the module I care about is CLR jit CLR jit is the just in time",
    "start": "2105119",
    "end": "2110320"
  },
  {
    "text": "compiler so I know that by the time this module's loaded the run time is up and running it's already loaded our assembly",
    "start": "2110320",
    "end": "2116560"
  },
  {
    "text": "and started loading the types and things and it's now ready to invoke a method and in order to invoke that method the",
    "start": "2116560",
    "end": "2122040"
  },
  {
    "text": "first time it's going to call out to the jit and say right compile that I code into the native instructions please",
    "start": "2122040",
    "end": "2128240"
  },
  {
    "text": "so I do that and press G and that continues into the into the process and we see a whole bunch of additional",
    "start": "2128240",
    "end": "2134200"
  },
  {
    "text": "modules start to get loaded now the most crucial of these is",
    "start": "2134200",
    "end": "2140240"
  },
  {
    "text": "uh yeah it's here um is the host fixer D host framework resolver um and this has",
    "start": "2140240",
    "end": "2147240"
  },
  {
    "text": "been loaded from the the shared sort of runtime files on my machine under the net directory under this host FXR and",
    "start": "2147240",
    "end": "2154119"
  },
  {
    "text": "you'll see if I go into that directory there's not a whole heap in there there's one of these for each of the",
    "start": "2154119",
    "end": "2160000"
  },
  {
    "text": "runtimes I've got installed on this machine and in 901 it's just one dll and what this dll knows how to do is",
    "start": "2160000",
    "end": "2166920"
  },
  {
    "text": "actually locate uh the right version of the uh the runtime files to start",
    "start": "2166920",
    "end": "2172000"
  },
  {
    "text": "loading based on configuration for example that we've put in that runtime config.js file that sat next to our dll",
    "start": "2172000",
    "end": "2178720"
  },
  {
    "text": "so this just tells this is just sort of responsible for the early location of the runtime files and so don XE when it",
    "start": "2178720",
    "end": "2186560"
  },
  {
    "text": "gets past a d as the first argument basically just calls out to this library and it's a native Library you could use",
    "start": "2186560",
    "end": "2191760"
  },
  {
    "text": "this in your own native apps if you want to launchet Applications yourself you could actually call into this and follow",
    "start": "2191760",
    "end": "2197599"
  },
  {
    "text": "the calling conventions for this file host fixer does a bunch of stuff but eventually it loads host policy dll we",
    "start": "2197599",
    "end": "2204680"
  },
  {
    "text": "Rec call host policy dll from earlier when our error message host policy dll is the the main library that knows how",
    "start": "2204680",
    "end": "2211800"
  },
  {
    "text": "to actually sort of locate prepare um and actually launch the net runtime and pass our assembly into to it um and so",
    "start": "2211800",
    "end": "2218640"
  },
  {
    "text": "it does a lot of stuff about actually kind of kicking off the runtime itself so host framework resolver just locates",
    "start": "2218640",
    "end": "2224040"
  },
  {
    "text": "the right version of that to use and it's in this case resolved to the folder in Version 9 because our app targeted",
    "start": "2224040",
    "end": "2231119"
  },
  {
    "text": "net9 so in that Target framework we had in the runtime config we said we wanted Version 9 so it finds version nine of",
    "start": "2231119",
    "end": "2236599"
  },
  {
    "text": "the host policy again in my shared directory so the the shared runtime files are get installed with the runtime",
    "start": "2236599",
    "end": "2243440"
  },
  {
    "text": "and then host policy soon after calls into core CLR D so this is where we launch launch the common language",
    "start": "2243440",
    "end": "2248839"
  },
  {
    "text": "runtime of net itself bunch of stuff bunch of stuff bunch of stuff and then we get to here where we actually start",
    "start": "2248839",
    "end": "2254480"
  },
  {
    "text": "to see manage libraries are now being loaded into this application so system private corib which is the kind of Base",
    "start": "2254480",
    "end": "2260280"
  },
  {
    "text": "Class libraries um and then also system runtime because we took a reference on that for things like system object and",
    "start": "2260280",
    "end": "2266599"
  },
  {
    "text": "then it broke here where the the jit got called so at this point we are we just loaded the Jet and I'm going to run",
    "start": "2266599",
    "end": "2272880"
  },
  {
    "text": "another command here name to e uh program DL I'm going to say look",
    "start": "2272880",
    "end": "2278240"
  },
  {
    "text": "within the program dll module I want to inspect that main method using that",
    "start": "2278240",
    "end": "2284960"
  },
  {
    "text": "weird naming that they use I want to inspect the method information that's contained in that dll file for",
    "start": "2284960",
    "end": "2290760"
  },
  {
    "text": "that and so that gives us a bunch of stuff and it says okay here's the module the the module that exists is usually",
    "start": "2290760",
    "end": "2296280"
  },
  {
    "text": "one module per assembly um and here's uh the the name of that thing and",
    "start": "2296280",
    "end": "2302440"
  },
  {
    "text": "critically we can see not jitted yet so the justing time compiler has been loaded it hasn't yet run we haven't",
    "start": "2302440",
    "end": "2308040"
  },
  {
    "text": "converted our code that's in il to native code yet if we click on this link for method description we get a bit more",
    "start": "2308040",
    "end": "2314200"
  },
  {
    "text": "stuff and this just saves you writing these commands that you could do by hand yourself but these links make it a lot easier in modern uh in the modern",
    "start": "2314200",
    "end": "2320560"
  },
  {
    "text": "version I'll scroll this down a little bit and we can see here that uh gives us some other stuff so yeah not jitted",
    "start": "2320560",
    "end": "2326839"
  },
  {
    "text": "current code address is empty because it hasn't jitted native code yet but we can see where the I code lives and if I",
    "start": "2326839",
    "end": "2333200"
  },
  {
    "text": "click on this one we'll see indeed it can print out the instructions that live there and I I can even grab that address",
    "start": "2333200",
    "end": "2339760"
  },
  {
    "text": "come over to this memory dialogue here and load it in and down here it's a bit small we'll see this is the memory of",
    "start": "2339760",
    "end": "2347160"
  },
  {
    "text": "this process and we can see 062 a so that's that that method that we saw earlier in the dll file when we looked",
    "start": "2347160",
    "end": "2354240"
  },
  {
    "text": "at it in the hex editor now it's been loaded into memory so part of the assembly loading process is to load the I code into memory put it a particular",
    "start": "2354240",
    "end": "2361200"
  },
  {
    "text": "known location a particular offset in the memory and then that can be found um when the code runs uh through the",
    "start": "2361200",
    "end": "2366720"
  },
  {
    "text": "adjusting time sorry through the just in time compiler the other thing I'm going to click here is this other link to set",
    "start": "2366720",
    "end": "2371760"
  },
  {
    "text": "a breakpoint when the main method gets invoked in this application so it adds break points I'll press G to continue",
    "start": "2371760",
    "end": "2379000"
  },
  {
    "text": "and it goes a little further and now we can see some other output we can see the program's been jitted uh in that",
    "start": "2379000",
    "end": "2384599"
  },
  {
    "text": "particular method so we hit our breako and uh on the left hand side here because we have the symbol file the pdb",
    "start": "2384599",
    "end": "2391040"
  },
  {
    "text": "file it's able to load the symbols up and actually work out where in our actual code we are now in this empty",
    "start": "2391040",
    "end": "2397560"
  },
  {
    "text": "scope which is particularly unexciting um but what we can see here is that we",
    "start": "2397560",
    "end": "2402920"
  },
  {
    "text": "we have a jitted application and what I'm going to do here is I'm just going to rerun actually that uh where is it",
    "start": "2402920",
    "end": "2409040"
  },
  {
    "text": "name to here and now we can see that if we get the information about this method again now we get a jitted code address",
    "start": "2409040",
    "end": "2416960"
  },
  {
    "text": "so if I click this I can now see the assembly instructions that the just in time compiler has has produced to",
    "start": "2416960",
    "end": "2423640"
  },
  {
    "text": "actually execute that we're not going to go into assembly code you'll be probably be pleased to know this just pretty much",
    "start": "2423640",
    "end": "2428920"
  },
  {
    "text": "represents an empty function um and it's not the most efficient code so if we",
    "start": "2428920",
    "end": "2434400"
  },
  {
    "text": "actually look at the method description for this you'll see it now tells us the code address quick jitted what this is",
    "start": "2434400",
    "end": "2440160"
  },
  {
    "text": "short for is tier zero so the the the not optimized jit uh code if this",
    "start": "2440160",
    "end": "2445640"
  },
  {
    "text": "application was running and it was calling main often which it never would of course that code would eventually go",
    "start": "2445640",
    "end": "2450680"
  },
  {
    "text": "to the the tier one uh code and that might be optimized further for example it might choose to actually just make",
    "start": "2450680",
    "end": "2456200"
  },
  {
    "text": "that a r instruction in assembly code instead of dealing with things because it can see that the arguments that get",
    "start": "2456200",
    "end": "2461400"
  },
  {
    "text": "passed in the string array of args is never accessed so it could optimize away um the the code in that stack frame a",
    "start": "2461400",
    "end": "2467440"
  },
  {
    "text": "little bit um so yeah that's pretty much it in here the last thing I'll show you",
    "start": "2467440",
    "end": "2472599"
  },
  {
    "text": "just so you know it's there um so if you're doing this level of debugging and you're running into sort of um",
    "start": "2472599",
    "end": "2478119"
  },
  {
    "text": "applications where you want to explore them in this debugger what we can do is something like dump heap here and say",
    "start": "2478119",
    "end": "2484560"
  },
  {
    "text": "show me the managed Heap for this application it's all getting a bit small so let's um see if that's a bit better",
    "start": "2484560",
    "end": "2490560"
  },
  {
    "text": "um so what this does is dump literally all the objects currently on the Heap",
    "start": "2490560",
    "end": "2496000"
  },
  {
    "text": "for this app so it tells me their address I get a link to the mefa table for those and uh the size of them we can",
    "start": "2496000",
    "end": "2502520"
  },
  {
    "text": "also see it down here organized by sort of type so for example we can see at this point in the app there are 42",
    "start": "2502520",
    "end": "2508640"
  },
  {
    "text": "strings loaded into the Heap now we didn't load anything in our code of course but things like the runtime code",
    "start": "2508640",
    "end": "2513760"
  },
  {
    "text": "will be using strings as part of its code base um and those those are the strings that would have been loaded in there so we can even click on this if we",
    "start": "2513760",
    "end": "2520079"
  },
  {
    "text": "want to that lists all the strings in here and I'll pick one at random and hope it's a useful one uh not click the",
    "start": "2520079",
    "end": "2526440"
  },
  {
    "text": "link uh click the uh address here and so this actual string just represents well",
    "start": "2526440",
    "end": "2532400"
  },
  {
    "text": "it's PA to our app it just happens to be in there see if there's another more exciting one here that's just another",
    "start": "2532400",
    "end": "2537839"
  },
  {
    "text": "path you don't need to see click all these links but this is the actual value if these are long you wouldn't see it printed out here um but it even tells",
    "start": "2537839",
    "end": "2544160"
  },
  {
    "text": "you you can see the actual kind of makeup of that particular object in memory as well and what is it what's all",
    "start": "2544160",
    "end": "2549440"
  },
  {
    "text": "the offsets within that memory for that particular object so there's an advanced use case there for that kind of thing",
    "start": "2549440",
    "end": "2556680"
  },
  {
    "text": "last thing I'll show you in here if I can just pull this back up just so that we can see it because it gives us a",
    "start": "2556680",
    "end": "2562160"
  },
  {
    "text": "better picture of what actually happened when net Ran So net XE Got Loaded let me Zoom this",
    "start": "2562160",
    "end": "2569160"
  },
  {
    "text": "inet x got loaded and its invoke main method got invoked eventually goes through a few layers in net then it",
    "start": "2569559",
    "end": "2576240"
  },
  {
    "text": "found and located at Host FXR library and called into this host fixer main",
    "start": "2576240",
    "end": "2581960"
  },
  {
    "text": "startup info that then looked at for example the template file uh the runtime cix file s sorry uh to find out what",
    "start": "2581960",
    "end": "2589480"
  },
  {
    "text": "version of the runtime does this need then it located the correct host policy that does a bunch of stuff to start up",
    "start": "2589480",
    "end": "2595960"
  },
  {
    "text": "uh the app basically uh prepare and then launch into Corr and Corr says well I I",
    "start": "2595960",
    "end": "2601359"
  },
  {
    "text": "need to execute this assembly and eventually I need to run the main method that's within there or the entry point uh finds that token and then runs the",
    "start": "2601359",
    "end": "2607839"
  },
  {
    "text": "code so you can kind of see the the the native call stack if you will of the net execution there how are we doing on time",
    "start": "2607839",
    "end": "2615599"
  },
  {
    "text": "we have time so that's good um so the last bit that I'm going to or the last two bits I'm going to show are very",
    "start": "2615599",
    "end": "2621400"
  },
  {
    "text": "briefly this tool called procmon uh proon is assist internals tool it's free it's available on the Microsoft site if",
    "start": "2621400",
    "end": "2626680"
  },
  {
    "text": "you want to grab it and in this case we can we can monitor everything that a process does on this machine and in this",
    "start": "2626680",
    "end": "2632599"
  },
  {
    "text": "case I'm going to just monitor theet XC process and you could even see like registry access I'm not interested in",
    "start": "2632599",
    "end": "2638000"
  },
  {
    "text": "those for this demo and so I'm going to run that come over here rerun my",
    "start": "2638000",
    "end": "2643520"
  },
  {
    "text": "code and then drop back here stop monitoring and you'll see a whole heap",
    "start": "2643520",
    "end": "2649880"
  },
  {
    "text": "of stuff if I scroll down about this process when it ran and it's pretty pretty verbose this can be quite useful though",
    "start": "2649880",
    "end": "2656640"
  },
  {
    "text": "particularly if you ever run into like assembly load exceptions or you run into except things where you've maybe got the",
    "start": "2656640",
    "end": "2662520"
  },
  {
    "text": "wrong version of uh uh dependency seems to be being loaded this will show you every file access that's happening as",
    "start": "2662520",
    "end": "2668160"
  },
  {
    "text": "part of that process there's a lot of repeat stuff here because it lists every kind of like OS operation and and",
    "start": "2668160",
    "end": "2674200"
  },
  {
    "text": "there's a lot of stuff in reading a file that's more complex like checking it exists and checking the attributes on it",
    "start": "2674200",
    "end": "2679440"
  },
  {
    "text": "Etc but we can see if we kind of quickly scroll down that we've got obviously we go into Donna XE then those windows sort",
    "start": "2679440",
    "end": "2686240"
  },
  {
    "text": "of core files got used eventually though we start to see um can I zoom this no I",
    "start": "2686240",
    "end": "2691640"
  },
  {
    "text": "can't let's use Windows Zoom again eventually we see a bunch of stuff happening in this host FXR folder which",
    "start": "2691640",
    "end": "2698880"
  },
  {
    "text": "is that main container for those host fixer libraries and what this is actually doing is we're seeing where do",
    "start": "2698880",
    "end": "2705160"
  },
  {
    "text": "net here is basically in going through that directory that known location and saying well what's the most recent",
    "start": "2705160",
    "end": "2710599"
  },
  {
    "text": "version of the host fixer that I've got um for for for for this U application to",
    "start": "2710599",
    "end": "2715920"
  },
  {
    "text": "run and it's resolved the version 9 host fixer dll host fixer then does a bunch of stuff bunch of stuff much stuff",
    "start": "2715920",
    "end": "2722200"
  },
  {
    "text": "eventually starts reading our our DL and also critically that runtime config file to say what version of the runtime do",
    "start": "2722200",
    "end": "2728040"
  },
  {
    "text": "you want to run on um there's a bunch of additional shared files that get checked",
    "start": "2728040",
    "end": "2733599"
  },
  {
    "text": "but then we see host policy is starting to be accessed that DL is now being loaded into into the um process and",
    "start": "2733599",
    "end": "2740520"
  },
  {
    "text": "being used if we scroll down some more buch of stuff we don't care about we start to see yes it's loaded Corr so you",
    "start": "2740520",
    "end": "2747160"
  },
  {
    "text": "can see the actual Corr D version and where that lives that it's actually chosen um scroll some",
    "start": "2747160",
    "end": "2755240"
  },
  {
    "text": "more and now we start to see system private core lib again for the runtime of Version 9 being loaded from the",
    "start": "2755240",
    "end": "2761359"
  },
  {
    "text": "shared directory um down here then we should see our dll not now starts to be",
    "start": "2761359",
    "end": "2766599"
  },
  {
    "text": "accessed because now we're in a position of actually running the dll and somewhere down here we see the jit uh",
    "start": "2766599",
    "end": "2771720"
  },
  {
    "text": "kicking in so it's kind of the same information we saw in Wind dbg um and um",
    "start": "2771720",
    "end": "2777440"
  },
  {
    "text": "might be not that exciting right now but again if you ever run into an app that's not booting for some reason you actually want to just double check what actual D",
    "start": "2777440",
    "end": "2784480"
  },
  {
    "text": "were you loading from where um this could be really easy useful for those kind of lowlevel problem solving sort of",
    "start": "2784480",
    "end": "2791079"
  },
  {
    "text": "exercises uh so the last thing I'm going to do here and I'll have to come up with a new folder name is make uh let go back",
    "start": "2791079",
    "end": "2796839"
  },
  {
    "text": "a level and uh make a directory here called template app 2 just to be really exciting and CD into",
    "start": "2796839",
    "end": "2804319"
  },
  {
    "text": "that and what I'm going to do this time is uh this time we'll actually use net",
    "start": "2804319",
    "end": "2810359"
  },
  {
    "text": "new to create a console application hopefully most people have seen the the SDK commands that you can use at the for",
    "start": "2810359",
    "end": "2817440"
  },
  {
    "text": "net again we're using the net XE and what it's going to do this time is it's saying well I haven't been given a dll",
    "start": "2817440",
    "end": "2823160"
  },
  {
    "text": "as my first argument so I've been given other stuff uh how should I interpret that and in this case it's going to say well this is actually going to be",
    "start": "2823160",
    "end": "2829280"
  },
  {
    "text": "something I need to hand off to the SDK and if we jump back to my application uh sorry my net folder here within the SDK",
    "start": "2829280",
    "end": "2837680"
  },
  {
    "text": "Version 9 if I scroll down in here there's a file in here called net dll",
    "start": "2837680",
    "end": "2843319"
  },
  {
    "text": "it's about 2,800 um kilobytes and this is actually the SDK um the SDK for.net if you go to",
    "start": "2843319",
    "end": "2850839"
  },
  {
    "text": "the GitHub repository for it is mostly written in cop code it's another managed application uh that just knows how to",
    "start": "2850839",
    "end": "2857119"
  },
  {
    "text": "take arguments and do a bunch of stuff and that's compiled down to net DL and put into the SDK folder",
    "start": "2857119",
    "end": "2863119"
  },
  {
    "text": "here and so what that's going to then do is invoke that dll that net dll pass in",
    "start": "2863119",
    "end": "2869359"
  },
  {
    "text": "these arguments and then it's going to do whatever the SDK is told to do in this case create a new conso app I've done verbosity diag here because I want",
    "start": "2869359",
    "end": "2876400"
  },
  {
    "text": "to see the output so this basically gives us the log of what that command does behind the scenes not too",
    "start": "2876400",
    "end": "2881680"
  },
  {
    "text": "interesting we're not interested in much of this I'll scroll to the top which is quite a long with uh this font size um",
    "start": "2881680",
    "end": "2887240"
  },
  {
    "text": "and you can see that really what that's doing is loading into another part of that that file in that assembly where there's a whole template engine that",
    "start": "2887240",
    "end": "2893000"
  },
  {
    "text": "knows how to resolve what the template for console should look like for version 9 of of net and load up and create the",
    "start": "2893000",
    "end": "2900359"
  },
  {
    "text": "appropriate files in my directory so now if we go down here if I clear the screen and list what's in here see that indeed",
    "start": "2900359",
    "end": "2907359"
  },
  {
    "text": "we have a program CS file which just contains the typical hello world uh console right line of of a console app",
    "start": "2907359",
    "end": "2913480"
  },
  {
    "text": "in net we have a project file we have an obj folder the obj folder we're not",
    "start": "2913480",
    "end": "2918800"
  },
  {
    "text": "going to get too deep into it this is really like the temporary build area for that net uses so when we compile for",
    "start": "2918800",
    "end": "2924319"
  },
  {
    "text": "example each file gets compiled and pushed into this obj folder and that means that we get more advanced",
    "start": "2924319",
    "end": "2930319"
  },
  {
    "text": "compilation because later on if we only modify like one file and then rebuild an app we don't want to rebuild all or compile every file we just compile the",
    "start": "2930319",
    "end": "2937400"
  },
  {
    "text": "files that change and then those essentially get kind of linked together uh into the assembly that would then go",
    "start": "2937400",
    "end": "2943200"
  },
  {
    "text": "into the bin folder later on um so that's what that folder has in it we obviously have this project file here so",
    "start": "2943200",
    "end": "2950079"
  },
  {
    "text": "I'll open that up in notepad and um typical project file",
    "start": "2950079",
    "end": "2956079"
  },
  {
    "text": "there's a small Property Group here that tells us this is an nexe nit 9 no uh implicit usings are enabled as it's",
    "start": "2956079",
    "end": "2962359"
  },
  {
    "text": "nullable but there's not much in here and a project file is a file that's used by msbuild the build system for net to",
    "start": "2962359",
    "end": "2969440"
  },
  {
    "text": "obviously build our our codebase but there's not much there so how does Net so how does Ms build sorry know how to",
    "start": "2969440",
    "end": "2975680"
  },
  {
    "text": "take this project file and build it right the key thing is that we're using",
    "start": "2975680",
    "end": "2980960"
  },
  {
    "text": "um modern. net so it's an SDK style project format and what that means is that there's an SDK that's defined in",
    "start": "2980960",
    "end": "2987160"
  },
  {
    "text": "here that tells it okay the SDK you're using in this case is the net SDK",
    "start": "2987160",
    "end": "2992200"
  },
  {
    "text": "there's one SDK for like console apps and and sort of basic work processes and things then there's an aspet core one",
    "start": "2992200",
    "end": "2998280"
  },
  {
    "text": "that has additional information for building aspet core applications there's an Aspire One now as well I believe so",
    "start": "2998280",
    "end": "3004280"
  },
  {
    "text": "this just list the SDK so what actually happens here and",
    "start": "3004280",
    "end": "3009760"
  },
  {
    "text": "we're going to use another command here I'm actually going to invoke through net Ms build directly here and if you",
    "start": "3009760",
    "end": "3017760"
  },
  {
    "text": "actually jump back to this folder where we were in the SDK if I come down Ms build so Ms build D again is",
    "start": "3017760",
    "end": "3025000"
  },
  {
    "text": "another C file most of MS field is written in C just gets compiled down to a managed executable that's loaded",
    "start": "3025000",
    "end": "3031440"
  },
  {
    "text": "through the net runtime itself so Ms build is there and it's accessible as an",
    "start": "3031440",
    "end": "3036839"
  },
  {
    "text": "additional command that we can pass into net so that the mxer knows that in this mode I want to invoke Ms build and what",
    "start": "3036839",
    "end": "3043680"
  },
  {
    "text": "I'm saying to Ms build here is I'd like you to take this this project file and",
    "start": "3043680",
    "end": "3049280"
  },
  {
    "text": "pre-process it um which basically means expand it using the knowledge from the the base SDK about what's what this act",
    "start": "3049280",
    "end": "3056640"
  },
  {
    "text": "ual build file should look like for Ms build so I'm going to run",
    "start": "3056640",
    "end": "3061680"
  },
  {
    "text": "that I am thank you it's really nice having human co-pilots in the",
    "start": "3061680",
    "end": "3067200"
  },
  {
    "text": "room right we've we've pre-processed I'll clear the screen and list so we now have uh pre-process XML so we didn't",
    "start": "3067200",
    "end": "3075480"
  },
  {
    "text": "actually build here what we did is just say take a look at that project file and essentially expand it and so if I open",
    "start": "3075480",
    "end": "3081119"
  },
  {
    "text": "that in something like uh code and zoom this in a little",
    "start": "3081119",
    "end": "3088799"
  },
  {
    "text": "bit this is a full XML the MS Builder actually take in for when we build that",
    "start": "3088799",
    "end": "3094920"
  },
  {
    "text": "file and you can see it's like 16,000 lines of XML so no one wants to type that by hand hence why we have these",
    "start": "3094920",
    "end": "3101160"
  },
  {
    "text": "simplified project formats that make make our lives a lot easier but where has a lot of this come from if I search",
    "start": "3101160",
    "end": "3106440"
  },
  {
    "text": "for implicit using and go to there we'll find in here",
    "start": "3106440",
    "end": "3112839"
  },
  {
    "text": "our property group that was defined in our actual CS Pro file for this appli you can see that's in that template to",
    "start": "3112839",
    "end": "3119200"
  },
  {
    "text": "CS Pro there so that's what we put in everything else in this file and it's",
    "start": "3119200",
    "end": "3124799"
  },
  {
    "text": "kind of telling us here this import was added so this import to sdk. props was",
    "start": "3124799",
    "end": "3130440"
  },
  {
    "text": "added because the projects element SDK attribute specified Microsoft NET SDK so",
    "start": "3130440",
    "end": "3135760"
  },
  {
    "text": "the SDK directory as you can see from these paths includes these prop files Target",
    "start": "3135760",
    "end": "3143040"
  },
  {
    "text": "files all of the things that are the peripheral information about how to build these these net",
    "start": "3143040",
    "end": "3149000"
  },
  {
    "text": "applications so we're obviously not going to spend too much time pausing through this you can see a lot of these end up being um conditionals conditional",
    "start": "3149000",
    "end": "3156319"
  },
  {
    "text": "on the type of project we're building or various other properties we might set within the the project rather than",
    "start": "3156319",
    "end": "3163720"
  },
  {
    "text": "explore the XML which is not that exciting uh what I'm going to do",
    "start": "3163720",
    "end": "3169720"
  },
  {
    "text": "instead CS is uh do a build but this time I'm going to do net build",
    "start": "3169720",
    "end": "3176680"
  },
  {
    "text": "I'm going to do a release build of this and I'm going to pass in this additional argument at the end here and what this argument basically says is hey when",
    "start": "3176680",
    "end": "3183720"
  },
  {
    "text": "you're building log out everything you do into this binary log format um and so",
    "start": "3183720",
    "end": "3189000"
  },
  {
    "text": "we can run that it's going to compile and if we",
    "start": "3189000",
    "end": "3194240"
  },
  {
    "text": "check um indeed we now have a bin folder I could CD into",
    "start": "3194240",
    "end": "3199520"
  },
  {
    "text": "that and we can list what's in there and you you get what you'd expect in there the D the symbols file runtime config",
    "start": "3199520",
    "end": "3205040"
  },
  {
    "text": "etc those have all been created um for us but the thing we want to explore is that bin log right so to do that I'm",
    "start": "3205040",
    "end": "3211720"
  },
  {
    "text": "going to use another tool which I think also kenoff who did that PE tree tool that I used earlier I think he was",
    "start": "3211720",
    "end": "3217359"
  },
  {
    "text": "behind this at Microsoft this is the MS build structured log viewer and what this lets us do is open those log files",
    "start": "3217359",
    "end": "3223880"
  },
  {
    "text": "so if I go to NDC London template app 2 Ms build. binlog double click that and",
    "start": "3223880",
    "end": "3229359"
  },
  {
    "text": "it opens up this human readable um sort of format that we can actually explore",
    "start": "3229359",
    "end": "3234440"
  },
  {
    "text": "everything that happened as part of the build process again this could be quite useful if you have really complex builds",
    "start": "3234440",
    "end": "3240240"
  },
  {
    "text": "or more complex builds where weird things fail for some reason you can do a bin log dump and then explore it in this",
    "start": "3240240",
    "end": "3246200"
  },
  {
    "text": "file and actually just double check what actually happened and in what order uh to compile this application and build it",
    "start": "3246200",
    "end": "3253520"
  },
  {
    "text": "there's a whole bunch of stuff in here for example we can see if I expand environment we can see all the kind of net related environment variables that",
    "start": "3253520",
    "end": "3259280"
  },
  {
    "text": "were set at the point this Ram which can be really useful if you've done things like set a custom PA for the the SDK or",
    "start": "3259280",
    "end": "3264799"
  },
  {
    "text": "something um you could double check can hear why it's failing because you set the wrong environment variable Etc what",
    "start": "3264799",
    "end": "3271319"
  },
  {
    "text": "we're interested in though if I expand this node so this was the restore step up here but this is the actual build",
    "start": "3271319",
    "end": "3278000"
  },
  {
    "text": "step next and you'll see all of the targets then from that um XML file that actually got run so you can see a lot of",
    "start": "3278000",
    "end": "3283880"
  },
  {
    "text": "these are grayed out because they were conditional and those conditions weren't met but the other targets that are not",
    "start": "3283880",
    "end": "3289160"
  },
  {
    "text": "gray out give us examples everything that was done in order uh to to actually",
    "start": "3289160",
    "end": "3294319"
  },
  {
    "text": "build this through Ms build a more useful view uh just to help us get started is if we go to this tracing view",
    "start": "3294319",
    "end": "3301000"
  },
  {
    "text": "it's not particularly pretty um if you're used to open Telemetry tools or",
    "start": "3301000",
    "end": "3306280"
  },
  {
    "text": "something this is not nice but it gives us essentially this this TR this view of",
    "start": "3306280",
    "end": "3312559"
  },
  {
    "text": "what actually happened in the build and how long did it take so we can see that actually core compile took 1.6 seconds",
    "start": "3312559",
    "end": "3319200"
  },
  {
    "text": "and that was the main compilation of this code base and you can see that actually used CSC the C compiler so so",
    "start": "3319200",
    "end": "3326400"
  },
  {
    "text": "if I double click on core compile and why is it oh we go actually",
    "start": "3326400",
    "end": "3332160"
  },
  {
    "text": "I probably don't I'll keep it zoomed in just so you can see this properly at the back which is really horrible to work with um so if I expand this target this",
    "start": "3332160",
    "end": "3339359"
  },
  {
    "text": "cor compile Target that was defined within that um we can see that actually",
    "start": "3339359",
    "end": "3344960"
  },
  {
    "text": "it ran a task called um csse um and that's the the task that",
    "start": "3344960",
    "end": "3350640"
  },
  {
    "text": "defines to how to launch the C compiler and so if I expand that you can see that the actual code this is really difficult",
    "start": "3350640",
    "end": "3357720"
  },
  {
    "text": "um you can see the actual code for that task is defined in this assembly part of the rosling code base and again the task",
    "start": "3357720",
    "end": "3365480"
  },
  {
    "text": "that is actually invoked here by Ms build is another C uh project it's just a a format that",
    "start": "3365480",
    "end": "3372000"
  },
  {
    "text": "you can write tasks in for Ms build that conforms to a particular set of signatures and then Ms build can invoke",
    "start": "3372000",
    "end": "3377559"
  },
  {
    "text": "those for you from managed code and that comes from this code analysis dll if I",
    "start": "3377559",
    "end": "3383280"
  },
  {
    "text": "then look at the command line arguments that were passed in if I double click this you'll see that at the top here we",
    "start": "3383280",
    "end": "3388960"
  },
  {
    "text": "launched onc don't worry about the exec but it's another way of launching an app um but the the actual key thing here is",
    "start": "3388960",
    "end": "3394920"
  },
  {
    "text": "that we see that same command that we used earlier on that invokes the CSC dll but then we have a lot of other stuff",
    "start": "3394920",
    "end": "3400799"
  },
  {
    "text": "that we didn't put in our very simple example earlier on and this is why you never want to compile manually through",
    "start": "3400799",
    "end": "3405920"
  },
  {
    "text": "CSC because here's all the other references we might need this is just basically all the references for the Bas",
    "start": "3405920",
    "end": "3411119"
  },
  {
    "text": "glass libraries in case we use them um but there's a bunch of other flags and things that are set in there so",
    "start": "3411119",
    "end": "3416400"
  },
  {
    "text": "generally you won't want to um close on that uh you won't want to do",
    "start": "3416400",
    "end": "3421520"
  },
  {
    "text": "that by hand um but that then sort of lets us see what actually happened there um how am I doing for time have a look",
    "start": "3421520",
    "end": "3428280"
  },
  {
    "text": "three minutes three minutes we'll very very very briefly talk about apphost so this is one other thing I wanted to show",
    "start": "3428280",
    "end": "3434319"
  },
  {
    "text": "so in our bin folder here we have our dll we have the pdb ETC but we also have an executable a native executable that",
    "start": "3434319",
    "end": "3440720"
  },
  {
    "text": "gets built and where' that come from and what's its purpose this is just a shortcut into launching our app and the",
    "start": "3440720",
    "end": "3446319"
  },
  {
    "text": "way this works is there's the same codebase that actually compiles into that net XE can also compile into",
    "start": "3446319",
    "end": "3452359"
  },
  {
    "text": "something called apphost XE and app host.exe is there's a bit little bit",
    "start": "3452359",
    "end": "3457599"
  },
  {
    "text": "difference in the code but it's basically the same app host.exe knows how to load host FXR to load host policy",
    "start": "3457599",
    "end": "3463400"
  },
  {
    "text": "and launch the runtime and in the file that's produced that gets shipped with the sdks there's a kind of placeholder",
    "start": "3463400",
    "end": "3469680"
  },
  {
    "text": "section at a particular bite location in that file that would be replaced with the DL name that you should execute and",
    "start": "3469680",
    "end": "3476319"
  },
  {
    "text": "so what happens is the apphost gets copied as part of the the build process from the shared SDK folder a few of its",
    "start": "3476319",
    "end": "3482920"
  },
  {
    "text": "bites get modified to replace the DL that you should execute which basically would replace it with this DL name and",
    "start": "3482920",
    "end": "3488880"
  },
  {
    "text": "then this essentially just provides us a shortcut to do template app to. XE to run the application so it's just a",
    "start": "3488880",
    "end": "3495319"
  },
  {
    "text": "convenience really that means that when you're developing apps typically um I can then run this X on my Windows",
    "start": "3495319",
    "end": "3500680"
  },
  {
    "text": "machine to launch the code rather than having to type net and then the dll name obviously if you're deploying this you",
    "start": "3500680",
    "end": "3506319"
  },
  {
    "text": "can only deploy that to the same platform it's platform dependent it's an executable that runs on windows x64 in",
    "start": "3506319",
    "end": "3511680"
  },
  {
    "text": "my case so it's useful for usually in the developer experience for deployment you typically will ship the dll and then",
    "start": "3511680",
    "end": "3518200"
  },
  {
    "text": "use net to launch it um in your codebase that is pretty much our time so",
    "start": "3518200",
    "end": "3524799"
  },
  {
    "text": "if I jump back to my other window here just to highlight this link so there's a bitly link here to smallest s sheet C",
    "start": "3524799",
    "end": "3532400"
  },
  {
    "text": "this will include links to there's no actual slides obviously to share with you I didn't use any but the links take you to all of the",
    "start": "3532400",
    "end": "3538119"
  },
  {
    "text": "blog posts that I've used as references when I've researched this a few blog posts I've written during prepping this",
    "start": "3538119",
    "end": "3544319"
  },
  {
    "text": "talk um and all of the tools so things like the hex editor I've use the dot Peak tool Etc where you can go and find",
    "start": "3544319",
    "end": "3550760"
  },
  {
    "text": "those to download otherwise um I won't do questions here but I'm happy to take them afterwards um I hope you've enjoyed",
    "start": "3550760",
    "end": "3557799"
  },
  {
    "text": "that I hope it's been kind of interesting if not necessarily useful uh for your day-to-day job but just",
    "start": "3557799",
    "end": "3563039"
  },
  {
    "text": "remember those tools exist and uh they're there if you ever need to get into really lowlevel situations",
    "start": "3563039",
    "end": "3568440"
  },
  {
    "text": "otherwise thank you for coming [Applause]",
    "start": "3568440",
    "end": "3578599"
  }
]