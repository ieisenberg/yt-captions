[
  {
    "text": "I'm Dave Sanchar from Carmel Indiana with today we are going to talk about Elm I dabble in a few things myself",
    "start": "7580",
    "end": "16320"
  },
  {
    "text": "one of the things that really attracted me to the Elm language is that it is a derivative of ML just like F sharp so",
    "start": "16320",
    "end": "24720"
  },
  {
    "text": "for me having some background in f-sharp coming into Elm was a very easy",
    "start": "24720",
    "end": "32580"
  },
  {
    "text": "transition the type system the handling Miller type system is incredibly similar to the way that f-sharp works",
    "start": "32580",
    "end": "39090"
  },
  {
    "text": "there's pipelining and we have discriminated unions we have record types so all of those things translate",
    "start": "39090",
    "end": "45570"
  },
  {
    "text": "it very well now why would I be looking at Elm to begin with well for me coming",
    "start": "45570",
    "end": "55350"
  },
  {
    "text": "into Elm was one of those things like okay most of my work is on the back end but every once in a while I need to do",
    "start": "55350",
    "end": "60899"
  },
  {
    "text": "something on the front end and I really didn't want to work in JavaScript I'm sure you know a lot of you can relate to",
    "start": "60899",
    "end": "66450"
  },
  {
    "text": "that and I started going down being a Microsoft guy looking at typescript and don't get me wrong you know I like",
    "start": "66450",
    "end": "72780"
  },
  {
    "text": "typescript I think typescript has a lot of great things in it especially some of the later versions but what I started",
    "start": "72780",
    "end": "77880"
  },
  {
    "text": "realizing and started thinking about typescript was you know if this is really just a superset of JavaScript why",
    "start": "77880",
    "end": "83970"
  },
  {
    "text": "don't I just learn to write JavaScript the right way and do the things that the compiler is doing it's really not that hard to make the mental conversion from",
    "start": "83970",
    "end": "90780"
  },
  {
    "text": "using class in typescript to writing a function as a closure right so I don't",
    "start": "90780",
    "end": "98910"
  },
  {
    "text": "really need that extra level of complexity yeah as you can see there's a case to be made that that it's a little",
    "start": "98910",
    "end": "104520"
  },
  {
    "text": "bit more readable but if I'm going to write that code I might as well just",
    "start": "104520",
    "end": "109650"
  },
  {
    "text": "write it the JavaScript way and keep all of the typescript stuff out of it but then I'm still in JavaScript and I don't",
    "start": "109650",
    "end": "116400"
  },
  {
    "text": "get a lot of the assurances that other languages that I'm used to like F sharp",
    "start": "116400",
    "end": "121740"
  },
  {
    "text": "would give me but Elm being a derivative of ML makes it very easy to get some of",
    "start": "121740",
    "end": "130020"
  },
  {
    "text": "that safety that I've taken for granted in other languages so one of the things",
    "start": "130020",
    "end": "135239"
  },
  {
    "text": "being an ml language it's a purely functional language and it is intended primarily for",
    "start": "135239",
    "end": "140760"
  },
  {
    "text": "and development and we'll see at the sample application toward the end of this talk how what we call the Elm",
    "start": "140760",
    "end": "147000"
  },
  {
    "text": "architecture really facilitates front-end development for us already",
    "start": "147000",
    "end": "154290"
  },
  {
    "text": "mentioned that was derived from ml it's statically typed immunity in a handling",
    "start": "154290",
    "end": "159360"
  },
  {
    "text": "miller type system statically typed great type inference I do kind of like the way that it requires us to annotate",
    "start": "159360",
    "end": "166500"
  },
  {
    "text": "our functions with with the various types involved but it does do a lot of type inference as well so it's beautiful",
    "start": "166500",
    "end": "172799"
  },
  {
    "text": "on that front and as a functional language its expression based so",
    "start": "172799",
    "end": "179220"
  },
  {
    "text": "everything returns a van in put everything has an output and then because it's browser-based everything",
    "start": "179220",
    "end": "184859"
  },
  {
    "text": "compiles to JavaScript but elm is not like typescript a superset of JavaScript",
    "start": "184859",
    "end": "190230"
  },
  {
    "text": "it is its own independent unique language let's get the slides we talked",
    "start": "190230",
    "end": "200970"
  },
  {
    "text": "about it Wow sure one of the things that you'll find is you start digging into",
    "start": "200970",
    "end": "206190"
  },
  {
    "text": "Elm aside from it being a purely functional language as I mentioned",
    "start": "206190",
    "end": "212030"
  },
  {
    "text": "meaning immutability limited side effects actually there are no side effects because everything works through",
    "start": "212030",
    "end": "217709"
  },
  {
    "text": "essentially a message based system and my favorite part is you can tell from my license plate there are no nulls so I",
    "start": "217709",
    "end": "224280"
  },
  {
    "text": "didn't have to type from that yes oh yeah I Drive around Carmel Indiana with that license plate yeah every once in a",
    "start": "224280",
    "end": "229500"
  },
  {
    "text": "while I see it sweet hey I'm behind a fancy a cool oh and I don't mention it",
    "start": "229500",
    "end": "235950"
  },
  {
    "text": "on this slide much but you know just the compiler Fendley compiler errors I'm",
    "start": "235950",
    "end": "241950"
  },
  {
    "text": "sure as we're typing some of the sample code and a little bit later we will run across a few of those because",
    "start": "241950",
    "end": "247169"
  },
  {
    "text": "undoubtedly as I'm in the in the repple I'll forget a backslash or something and it'll tell me in a very friendly",
    "start": "247169",
    "end": "253280"
  },
  {
    "text": "consumable way not only that there was an error what the error was and most of",
    "start": "253280",
    "end": "259739"
  },
  {
    "text": "the time what to do to fix that error because the nature of the language is such that the compiler can have more",
    "start": "259739",
    "end": "266160"
  },
  {
    "text": "insight into what the code you're writing is trying to do it can give you more helpful error messages",
    "start": "266160",
    "end": "273420"
  },
  {
    "text": "I think that's something that we often lack in software development is error messages that actually tell us something",
    "start": "273420",
    "end": "280710"
  },
  {
    "text": "useful and finally it's cross-platform most of",
    "start": "280710",
    "end": "288180"
  },
  {
    "text": "my work is in Windows and dotnet but today I'm running on a Mac I don't have my VM running we will see that it works",
    "start": "288180",
    "end": "296940"
  },
  {
    "text": "really well I've had to install a few components I don't have those listed in",
    "start": "296940",
    "end": "302040"
  },
  {
    "text": "this talk the instructions on the elm language website are very thorough and",
    "start": "302040",
    "end": "308550"
  },
  {
    "text": "it's quite easy to get set up with if you want to install it failed on Windows",
    "start": "308550",
    "end": "315210"
  },
  {
    "text": "on Mac other platforms they have installers and get it from from node and",
    "start": "315210",
    "end": "320730"
  },
  {
    "text": "then you can always build from source because it's an open source project",
    "start": "320730",
    "end": "325789"
  },
  {
    "text": "editors choose your editor use what you want I choose vs code there's an extension",
    "start": "326120",
    "end": "332280"
  },
  {
    "text": "for elm that plugs right into vs code gives you access to the repple and a few",
    "start": "332280",
    "end": "338580"
  },
  {
    "text": "other utilities that are incredibly useful when developing an elm application and I can bring up the",
    "start": "338580",
    "end": "345440"
  },
  {
    "text": "extension list in code when we get to that so elm is really a platform of its",
    "start": "345440",
    "end": "354930"
  },
  {
    "text": "own yes there's this language called elm and we write this elm code but we have a",
    "start": "354930",
    "end": "361620"
  },
  {
    "text": "repple and all of these are console applications that we can use to either",
    "start": "361620",
    "end": "367260"
  },
  {
    "text": "test our code or build our code or package our code for distribution or get",
    "start": "367260",
    "end": "374310"
  },
  {
    "text": "third-party packages that we want to consume in our project what's really",
    "start": "374310",
    "end": "380460"
  },
  {
    "text": "nice about the repple is in working with with vs code is I don't have to jump back and forth to a terminal window",
    "start": "380460",
    "end": "386550"
  },
  {
    "text": "because it has the terminal built right into vs code and so I can go back and",
    "start": "386550",
    "end": "391830"
  },
  {
    "text": "forth between my code and the repple and do that testing of the code that I'm",
    "start": "391830",
    "end": "397260"
  },
  {
    "text": "trying to write at the time right inline no context switching and it's quite useful and then you can also send code",
    "start": "397260",
    "end": "403680"
  },
  {
    "text": "as you've written in in the editor window you can have it sent and directed down",
    "start": "403680",
    "end": "408900"
  },
  {
    "text": "to the repple window and have it evaluated on the fly it's really really nice so before we dive into a sample",
    "start": "408900",
    "end": "417780"
  },
  {
    "text": "application let's take a little look at the language itself like tille",
    "start": "417780",
    "end": "424500"
  },
  {
    "text": "powerpoint here because we should be done with that and let's go zoom this in",
    "start": "424500",
    "end": "433650"
  },
  {
    "text": "a little bit man I'm just going to open up a terminal window here in vs code",
    "start": "433650",
    "end": "441620"
  },
  {
    "text": "how's that look in the back good okay so",
    "start": "446330",
    "end": "454080"
  },
  {
    "text": "just like languages that were used to let's just do a little tour of some of the features of the language as with",
    "start": "454080",
    "end": "462270"
  },
  {
    "text": "most languages any language we have our ups P&L night notice I'm in Visual",
    "start": "462270",
    "end": "470729"
  },
  {
    "text": "Studio code I've got my terminal window open and I'm at a bash prompt and now I'm in my elm repple I've got the",
    "start": "470729",
    "end": "478320"
  },
  {
    "text": "interactive console window here so I can look at things like true and false we",
    "start": "478320",
    "end": "484530"
  },
  {
    "text": "can see these are evaluating notice we have our types though if this was JavaScript which behind the scenes",
    "start": "484530",
    "end": "490229"
  },
  {
    "text": "ultimately it is we have some limited types but they're all variants and whatnot this is going to be strongly",
    "start": "490229",
    "end": "497099"
  },
  {
    "text": "typed in the Elm sandbox",
    "start": "497099",
    "end": "501710"
  },
  {
    "text": "we have strings we have characters now",
    "start": "504169",
    "end": "512880"
  },
  {
    "text": "let's look at one of those messages oh goodness error message I forgot my",
    "start": "512880",
    "end": "518310"
  },
  {
    "text": "closing apostrophe for my my character ran into something unexpected when",
    "start": "518310",
    "end": "524820"
  },
  {
    "text": "parsing your code I'm looking for one of the following things that starts this list it only has one suggestion here a",
    "start": "524820",
    "end": "530870"
  },
  {
    "text": "closing quote like that's pretty helpful right as you get into other things like",
    "start": "530870",
    "end": "536579"
  },
  {
    "text": "like discriminated unions you oh I'm expecting a pipe or it's a white space or any of the other things that",
    "start": "536579",
    "end": "544360"
  },
  {
    "text": "may be syntactically wrong because it knows just what you're trying to do it in those the context of your code one of",
    "start": "544360",
    "end": "551950"
  },
  {
    "text": "the places where it really differs from JavaScript is 42 is a number that's the",
    "start": "551950",
    "end": "558940"
  },
  {
    "text": "type we would recognize from JavaScript but what about 42.0 that's a float so we",
    "start": "558940",
    "end": "566740"
  },
  {
    "text": "have that differentiation in elm where we can work with both integral data and",
    "start": "566740",
    "end": "571920"
  },
  {
    "text": "floating-point data and it makes the differentiation we can't just pass them around arbitrarily because we're working",
    "start": "571920",
    "end": "577750"
  },
  {
    "text": "in a tight safe type safe environment we do have lists we don't really have the",
    "start": "577750",
    "end": "584350"
  },
  {
    "text": "notion of an array but we do have lists they look like JavaScript arrays but",
    "start": "584350",
    "end": "591700"
  },
  {
    "text": "it's a list of number here I can do lists of strings but I can also do things like tack on 5 let's say 5 with",
    "start": "591700",
    "end": "600940"
  },
  {
    "text": "what we call the cons operator I'm going to tack that onto the front of the list right so we have that flexibility and",
    "start": "600940",
    "end": "611650"
  },
  {
    "text": "all of these lists like like lists here there's a module behind the scenes that we can work with to do things like",
    "start": "611650",
    "end": "617970"
  },
  {
    "text": "deciding whether a list is empty I'm going to define a name here it's going",
    "start": "617970",
    "end": "624400"
  },
  {
    "text": "to call it my list and it's going to get 1 2 3 4 5 so we can do things like list",
    "start": "624400",
    "end": "634780"
  },
  {
    "text": "dot is empty my list of course I've got",
    "start": "634780",
    "end": "641950"
  },
  {
    "text": "a number of elements in there I can do things like this reverse of my list and",
    "start": "641950",
    "end": "652500"
  },
  {
    "text": "so it's going to reverse the order of those items and I can do lists that sort notice these are all functional so it's",
    "start": "652500",
    "end": "658630"
  },
  {
    "text": "not something I don't have these properties or methods on the list I'm at working with them as individual",
    "start": "658630",
    "end": "665410"
  },
  {
    "text": "standalone module functions so if I sort I get 1 2 3 4 5",
    "start": "665410",
    "end": "671970"
  },
  {
    "text": "but none of these because we're working in an immutable environment none of these are actually changing the",
    "start": "671970",
    "end": "678160"
  },
  {
    "text": "underlying list so if I type my list here then sure enough I see the original",
    "start": "678160",
    "end": "684279"
  },
  {
    "text": "list now we get into some of the more",
    "start": "684279",
    "end": "694149"
  },
  {
    "text": "interesting types one of them I got really really excited when I started learning Elm where record types so I can",
    "start": "694149",
    "end": "702520"
  },
  {
    "text": "group data with names like I don't think of them as a lightweight class it's a",
    "start": "702520",
    "end": "708130"
  },
  {
    "text": "good way to think of them it's a series of names and values not not a dictionary it is actually like properties so I'm",
    "start": "708130",
    "end": "715300"
  },
  {
    "text": "just going to create a person here let's say first name Dave last name Fancher",
    "start": "715300",
    "end": "726750"
  },
  {
    "text": "and now I've created this type that has",
    "start": "728730",
    "end": "734290"
  },
  {
    "text": "a first name property and a last name property I'm going to create another one",
    "start": "734290",
    "end": "742330"
  },
  {
    "text": "of these but this one I'm going to make",
    "start": "742330",
    "end": "748270"
  },
  {
    "text": "after my daughter I don't need to start anew and say I have a more complex thing say I'm working with colors or anything",
    "start": "748270",
    "end": "754870"
  },
  {
    "text": "anything else that I have some one value that needs to change so I'm going to change the first name to my daughter's",
    "start": "754870",
    "end": "761620"
  },
  {
    "text": "name so I start like I did the previous line",
    "start": "761620",
    "end": "769839"
  },
  {
    "text": "I have the curly brace but instead of taking a property right here I'm going to take the original record type in this",
    "start": "769839",
    "end": "778839"
  },
  {
    "text": "case it's me and I'm going to specify a new value for first name",
    "start": "778839",
    "end": "784500"
  },
  {
    "text": "so I have the exact same structure with a value replaced and my original record",
    "start": "790930",
    "end": "800300"
  },
  {
    "text": "type is unchanged and we can work with those just like we would with a",
    "start": "800300",
    "end": "805670"
  },
  {
    "text": "JavaScript object for instance so like say me dot first name or me dot last",
    "start": "805670",
    "end": "817339"
  },
  {
    "text": "name we can pull those values up but we're in a functional language and",
    "start": "817339",
    "end": "823610"
  },
  {
    "text": "parsing things like properties isn't necessarily the way you'd want to do this what if one of the things that the",
    "start": "823610",
    "end": "830540"
  },
  {
    "text": "elm gives us is there's a notation that allows us to treat those individual",
    "start": "830540",
    "end": "835579"
  },
  {
    "text": "property names as functions I think this one's really cool so I get these two",
    "start": "835579",
    "end": "841240"
  },
  {
    "text": "people records for lack of a better description and I want to just pull the",
    "start": "841240",
    "end": "847490"
  },
  {
    "text": "first names out of that list I could say me that first name and me and and",
    "start": "847490",
    "end": "853519"
  },
  {
    "text": "daughter that first name or I can do this more functionally so I'm just going",
    "start": "853519",
    "end": "858620"
  },
  {
    "text": "to start off with list dot map people familiar with maps functional background okay so I'm going to just use the",
    "start": "858620",
    "end": "865279"
  },
  {
    "text": "built-in map function to go and pull out the first name from each of these these",
    "start": "865279",
    "end": "870730"
  },
  {
    "text": "person records I don't need to do anything beyond start with a dot and say",
    "start": "870730",
    "end": "878529"
  },
  {
    "text": "first name and now I want to give it the collection in the list that I'm working",
    "start": "878529",
    "end": "884630"
  },
  {
    "text": "with and that's me and daughter and that's executed that function against",
    "start": "884630",
    "end": "891500"
  },
  {
    "text": "every item in that list and just extracted that name so if you're trying to do list boxes or whatnot you have a",
    "start": "891500",
    "end": "898790"
  },
  {
    "text": "key value pair for instance and you want to extract the particular date a piece of data from that record to build up a",
    "start": "898790",
    "end": "906589"
  },
  {
    "text": "list box as you would probably do in Elm this is a very convenient way to go about doing that rather than defining a",
    "start": "906589",
    "end": "914740"
  },
  {
    "text": "lambda expression or something that does something that the language already knows how to do",
    "start": "914740",
    "end": "921519"
  },
  {
    "text": "one of the things that's interesting on record types before we move on is that",
    "start": "925450",
    "end": "930560"
  },
  {
    "text": "the property names do need to begin with a lowercase so if I was to come back up",
    "start": "930560",
    "end": "936380"
  },
  {
    "text": "here and let's say I'm just going to change the property name to begin with an L end of input and whitespace so it",
    "start": "936380",
    "end": "944870"
  },
  {
    "text": "doesn't recognize that structure there because I didn't start with a lowercase L this is one of those instances where",
    "start": "944870",
    "end": "951920"
  },
  {
    "text": "the use that the error message isn't as particularly helpful as where the rest",
    "start": "951920",
    "end": "957230"
  },
  {
    "text": "of the language comes in kind of shines but that is one of the little little quirks of this language okay so I didn't",
    "start": "957230",
    "end": "969200"
  },
  {
    "text": "ask before I asked how many people had some experience with with Elm but I didn't ask how many people have experience with the language like F",
    "start": "969200",
    "end": "974960"
  },
  {
    "text": "sharp anybody in here have F sharp a few okay so so it looks like we've got a crowd pretty pretty well-versed and",
    "start": "974960",
    "end": "981710"
  },
  {
    "text": "discriminated unions and guess what we have those in elm so one of the examples I like to use to show how the",
    "start": "981710",
    "end": "988730"
  },
  {
    "text": "discriminated unions in elm work is a suit of cards right you have a very",
    "start": "988730",
    "end": "994160"
  },
  {
    "text": "finite set of cards and a standard deck we have four suits 52 cards right we",
    "start": "994160",
    "end": "1001510"
  },
  {
    "text": "have certain certain values associated with each card well we can easily define",
    "start": "1001510",
    "end": "1008400"
  },
  {
    "text": "discriminated unions to represent a standard deck of cards one of the quirks",
    "start": "1008400",
    "end": "1016060"
  },
  {
    "text": "of the repple is going to show up here so I'm going to start defining this type",
    "start": "1016060",
    "end": "1022930"
  },
  {
    "text": "suit and to do multiple lines we need backslash this is where I will",
    "start": "1022930",
    "end": "1027970"
  },
  {
    "text": "undoubtedly miss a backslash we're typing this most of the time I'm working straight in the editor so we have hearts",
    "start": "1027970",
    "end": "1037390"
  },
  {
    "text": "this is one of the places that does deviate from what I'm used to in NF sharp as I'm working with discriminated",
    "start": "1037390",
    "end": "1043720"
  },
  {
    "text": "unions with f-sharp we have the first students at first Union case has the the",
    "start": "1043720",
    "end": "1052870"
  },
  {
    "text": "pipe sitting pipe is optional and I almost always put it in just to just keep it consistent and it does not work like",
    "start": "1052870",
    "end": "1061000"
  },
  {
    "text": "that in elm we have to remove that first pipe so that was a little quirky for me",
    "start": "1061000",
    "end": "1066970"
  },
  {
    "text": "I would prefer to have that there it just lines up much nicer when you're looking at it in the editor but that's",
    "start": "1066970",
    "end": "1072340"
  },
  {
    "text": "not the way that Elm works so I am going to continue defining this will have Hart",
    "start": "1072340",
    "end": "1077770"
  },
  {
    "text": "I wish I could scroll this up a little bit more one of the quirks of v/s code and we have diamond and spade and Club",
    "start": "1077770",
    "end": "1095310"
  },
  {
    "text": "right now we have defined those four values we don't we know that our cards",
    "start": "1095640",
    "end": "1103240"
  },
  {
    "text": "will only ever be hearts diamonds spades or clubs we can't suddenly toss in circle or some",
    "start": "1103240",
    "end": "1109630"
  },
  {
    "text": "other value the type system is going to enforce this and if I create an instance here I can just say heart and we see",
    "start": "1109630",
    "end": "1117220"
  },
  {
    "text": "it's returned that heart is of type rippled that suit and the same thing",
    "start": "1117220",
    "end": "1123100"
  },
  {
    "text": "with diamond and so on so how do we make a deck of cards from this we know what",
    "start": "1123100",
    "end": "1129670"
  },
  {
    "text": "our suit is let's define another discriminated union pretty easily type",
    "start": "1129670",
    "end": "1135340"
  },
  {
    "text": "card and that's going to be ace of suit",
    "start": "1135340",
    "end": "1145919"
  },
  {
    "text": "and we've got our king of suit clean",
    "start": "1148020",
    "end": "1161190"
  },
  {
    "text": "Jack and rank now the rank is a little",
    "start": "1163050",
    "end": "1171010"
  },
  {
    "text": "different and so far we've only associated a suit with each particular value card we're going to have a suit",
    "start": "1171010",
    "end": "1177300"
  },
  {
    "text": "but then we're also going to have an integer okay we're going to say it's a value two through ten right I'm not",
    "start": "1177300",
    "end": "1184390"
  },
  {
    "text": "going to go through the extent of enforcing two through ten on this simple example but now we've defined two",
    "start": "1184390",
    "end": "1191050"
  },
  {
    "text": "discriminated unions that allow us to easily represent a deck of cards if we",
    "start": "1191050",
    "end": "1198670"
  },
  {
    "text": "wanted to actually construct the deck it might look something like diamonds Spade",
    "start": "1198670",
    "end": "1210360"
  },
  {
    "text": "Club now we're all to see here is a little",
    "start": "1210360",
    "end": "1217320"
  },
  {
    "text": "deviation so functions in an elm work",
    "start": "1217320",
    "end": "1222570"
  },
  {
    "text": "just like they do in F sharp they're curried which means that we can easily construct function function pipelines so",
    "start": "1222570",
    "end": "1232740"
  },
  {
    "text": "here we're going to use the exact same operator that we would in F sharp a pipe",
    "start": "1232740",
    "end": "1237960"
  },
  {
    "text": "forward I'm going to take this list of my suits and pipe it to list dot map now",
    "start": "1237960",
    "end": "1247680"
  },
  {
    "text": "we don't have comprehensions in elm which is one of things I don't really",
    "start": "1247680",
    "end": "1253170"
  },
  {
    "text": "like about Elm it will be really convenient to have that but because it's purely functional and most of the",
    "start": "1253170",
    "end": "1258750"
  },
  {
    "text": "comprehension syntaxes would require some degree of side-effect we don't have comprehensions so we'll",
    "start": "1258750",
    "end": "1265830"
  },
  {
    "text": "have to do this the long way a little bit so I'm going to define a lambda expression right here and the lambda",
    "start": "1265830",
    "end": "1271860"
  },
  {
    "text": "expression syntax is a little bit wonky in my opinion because it starts with a backslash it's like we don't have fun we",
    "start": "1271860",
    "end": "1278070"
  },
  {
    "text": "don't just start with a variable or a parameter name it's a backslash with V",
    "start": "1278070",
    "end": "1283580"
  },
  {
    "text": "with a parameter so I'm just going to do this backslash s and that goes to and",
    "start": "1283580",
    "end": "1289860"
  },
  {
    "text": "I'm simply going to return a new list I'm not going to do all of these all of the cards what I was going to do ace of",
    "start": "1289860",
    "end": "1296730"
  },
  {
    "text": "s and king of s queen of s Jack of s and",
    "start": "1296730",
    "end": "1307580"
  },
  {
    "text": "rank of s and 10 that will get me",
    "start": "1307580",
    "end": "1315470"
  },
  {
    "text": "through the virtue of the map operation a list of Lists but I want to make it",
    "start": "1315470",
    "end": "1322470"
  },
  {
    "text": "just one list so I'll take the result of that and pipe that into another module",
    "start": "1322470",
    "end": "1328380"
  },
  {
    "text": "function conveniently called concat and",
    "start": "1328380",
    "end": "1333650"
  },
  {
    "text": "now we see our list ace of heart king of heart queen of heart jack of heart rank of heart 10 so that's our 10 of Hearts",
    "start": "1333650",
    "end": "1340770"
  },
  {
    "text": "and then we can see we switch into diamonds with the same pattern over and over he would be easy to extend this out",
    "start": "1340770",
    "end": "1346020"
  },
  {
    "text": "to define the full deck of cards and then we can do things like shuffle the deck and and work with the deck so",
    "start": "1346020",
    "end": "1353490"
  },
  {
    "text": "this is a very quick way if we were building a card game to get a constrained deck of cards very",
    "start": "1353490",
    "end": "1359460"
  },
  {
    "text": "convenient quickly and and so on so the expressiveness of the language I think",
    "start": "1359460",
    "end": "1365940"
  },
  {
    "text": "is really brought out in things like the record types and the discriminated",
    "start": "1365940",
    "end": "1371490"
  },
  {
    "text": "unions so let's look at how these pieces",
    "start": "1371490",
    "end": "1376500"
  },
  {
    "text": "going to flow together I'm going to close down this red bull window there",
    "start": "1376500",
    "end": "1383880"
  },
  {
    "text": "any questions before we move on nope okay so I'm going to close this rep hole",
    "start": "1383880",
    "end": "1389190"
  },
  {
    "text": "window and since I'm a TS code we have",
    "start": "1389190",
    "end": "1400380"
  },
  {
    "text": "the levy I can't remember what this",
    "start": "1400380",
    "end": "1405810"
  },
  {
    "text": "feature is called but we we have this this command list that we can access it to now I've installed the Elm extensions",
    "start": "1405810",
    "end": "1413270"
  },
  {
    "text": "so I have this one right here and this brings in the repple and we didn't talk",
    "start": "1413270",
    "end": "1421140"
  },
  {
    "text": "about we're going to see in a moment this thing called elm reactor so a very convenient way to just run your elm",
    "start": "1421140",
    "end": "1428190"
  },
  {
    "text": "applications this connects Elm reactor",
    "start": "1428190",
    "end": "1433470"
  },
  {
    "text": "and the repple and the other commands inside of vs code and to access them",
    "start": "1433470",
    "end": "1440760"
  },
  {
    "text": "I'll do my greater than and I'll start typing Elm and we can see the things that are built in so we got clean build",
    "start": "1440760",
    "end": "1448380"
  },
  {
    "text": "artifact actually that's yeah now install packages make make Warren reactors start and reactor stop so let",
    "start": "1448380",
    "end": "1456990"
  },
  {
    "text": "me going to hit this reactor start we now see that it started up a web server because this was intended to rob it run",
    "start": "1456990",
    "end": "1463350"
  },
  {
    "text": "to the browser let's ctrl command click on this and",
    "start": "1463350",
    "end": "1468390"
  },
  {
    "text": "that's going to give me this window this this page is where it took me to this is",
    "start": "1468390",
    "end": "1474780"
  },
  {
    "text": "the home page that elm reactor displays by default",
    "start": "1474780",
    "end": "1480360"
  },
  {
    "text": "the sample application we're going to look at is a tic-tac-toe application like a seemingly simple game but there's",
    "start": "1480360",
    "end": "1488740"
  },
  {
    "text": "a lot of little rules that you have to think about as you're constructing something and it really lends itself",
    "start": "1488740",
    "end": "1494740"
  },
  {
    "text": "well to things like discriminated unions and records so let's go take a look at",
    "start": "1494740",
    "end": "1499780"
  },
  {
    "text": "this application reactor is presenting us with a list of our file system from",
    "start": "1499780",
    "end": "1507100"
  },
  {
    "text": "wherever we started it and I'm going to navigate into demo and I'm going to",
    "start": "1507100",
    "end": "1512950"
  },
  {
    "text": "navigate into my source folder and before I go into index I'm going to go into scripts and I could go to the J's",
    "start": "1512950",
    "end": "1522730"
  },
  {
    "text": "file but it's not really going to do anything that's the output from the Elm compiler but I want to run the Elm code",
    "start": "1522730",
    "end": "1529360"
  },
  {
    "text": "directly so I'm going to click the tic-tac-toe Elm and it's going to be",
    "start": "1529360",
    "end": "1535540"
  },
  {
    "text": "really ugly I'm going to warn you right now so this thing if it will load sure",
    "start": "1535540",
    "end": "1543030"
  },
  {
    "text": "X's turn and a bunch of ugly buttons the reason it's ugly and it doesn't have",
    "start": "1543030",
    "end": "1548110"
  },
  {
    "text": "to be it's because there's multiple ways to run an Elm application so this this",
    "start": "1548110",
    "end": "1554290"
  },
  {
    "text": "dot Elm file is an Elm application we're going to go over to that file shortly but what we see here number of buttons",
    "start": "1554290",
    "end": "1562200"
  },
  {
    "text": "in the HTML if we go and inspect any of these elements",
    "start": "1562200",
    "end": "1569159"
  },
  {
    "text": "good alright",
    "start": "1580080",
    "end": "1586779"
  },
  {
    "text": "I cannot remember my hotkey for zooming at the moment but I've styled these with bootstrap so the way as I mentioned we",
    "start": "1586779",
    "end": "1596739"
  },
  {
    "text": "have different ways of running elm applications we can either run them as fullscreen which is what's going on here",
    "start": "1596739",
    "end": "1602759"
  },
  {
    "text": "we can run them as headless meaning that there is no UI component or we can have",
    "start": "1602759",
    "end": "1608049"
  },
  {
    "text": "them target a particular element this application is written to target an element on an existing page so I'm going",
    "start": "1608049",
    "end": "1616239"
  },
  {
    "text": "to back up to the index and now we're running the Elm application and you can",
    "start": "1616239",
    "end": "1621729"
  },
  {
    "text": "see the bootstrap styling is all applied so we can have this within our existing",
    "start": "1621729",
    "end": "1626970"
  },
  {
    "text": "applications pretty easily as long as we use the styles that we and the CSS",
    "start": "1626970",
    "end": "1632080"
  },
  {
    "text": "classes that we would normally use in our HTML that Elm is generating we can",
    "start": "1632080",
    "end": "1638739"
  },
  {
    "text": "have a consistent look and feel so simple tic-tac-toe application we can",
    "start": "1638739",
    "end": "1645489"
  },
  {
    "text": "click through and it's maintaining this it looks like it's maintaining some state it really isn't and I'm just",
    "start": "1645489",
    "end": "1652899"
  },
  {
    "text": "clicking and now I can see o X wins well think about the things that are required",
    "start": "1652899",
    "end": "1658179"
  },
  {
    "text": "the rules and conditions around a tic-tac-toe application we've got this",
    "start": "1658179",
    "end": "1663669"
  },
  {
    "text": "nine by nine grid we have two players X and o we have to track whether a space",
    "start": "1663669",
    "end": "1670690"
  },
  {
    "text": "has a token in it whether it's X or o or if it's empty we have to look to see",
    "start": "1670690",
    "end": "1675909"
  },
  {
    "text": "what wind condition is what are the wind conditions three in a row right horizontal vertical diagonal so we have",
    "start": "1675909",
    "end": "1682090"
  },
  {
    "text": "to manage all of that stuff and we can't",
    "start": "1682090",
    "end": "1687460"
  },
  {
    "text": "play in a square that's already taken and the game is over so there's no",
    "start": "1687460",
    "end": "1692830"
  },
  {
    "text": "reason to continue allowing people to click well it turns out this really is",
    "start": "1692830",
    "end": "1698710"
  },
  {
    "text": "really a good sample application because it takes full advantage of a lot of elms",
    "start": "1698710",
    "end": "1704200"
  },
  {
    "text": "features like the discriminated unions and the record types so let's jump back",
    "start": "1704200",
    "end": "1710289"
  },
  {
    "text": "over to vs code I'm going to collapse this out of the way we're just going to leave that",
    "start": "1710289",
    "end": "1715369"
  },
  {
    "text": "running we're actually not going to make any code changes we're going to just leave this as it is and let's go find",
    "start": "1715369",
    "end": "1724789"
  },
  {
    "text": "the first we'll look at the index.html to see how this gets lined up and laid",
    "start": "1724789",
    "end": "1730129"
  },
  {
    "text": "out in the page this is a standard html5 document I've got some inline Styles for",
    "start": "1730129",
    "end": "1736789"
  },
  {
    "text": "simplicity and then I have a container element and down here I have a div style",
    "start": "1736789",
    "end": "1747470"
  },
  {
    "text": "panel body from bootstrap and given an ID of tic-tac-toe so this is the element that's going to hold the tic-tac-toe",
    "start": "1747470",
    "end": "1753470"
  },
  {
    "text": "game and there's two scripts at the bottom of the file",
    "start": "1753470",
    "end": "1759320"
  },
  {
    "text": "first is the tic-tac-toe script that's the compiled Elm just like I would with",
    "start": "1759320",
    "end": "1765529"
  },
  {
    "text": "a JavaScript file and just reference the typescript file I'm referencing the compiled elm file so it's going to go to",
    "start": "1765529",
    "end": "1773059"
  },
  {
    "text": "the j/s that's what the browser understands and then the next script element shows the target where we get",
    "start": "1773059",
    "end": "1779720"
  },
  {
    "text": "the tic-tac-toe element that I just pointed out and the next line of our app",
    "start": "1779720",
    "end": "1786080"
  },
  {
    "text": "gives Elm that tic-tac-toe dot embed so the Elm code which we'll look at in a",
    "start": "1786080",
    "end": "1792649"
  },
  {
    "text": "moment the compiler generates a module it's got an elm namespace essentially",
    "start": "1792649",
    "end": "1798350"
  },
  {
    "text": "and a tic-tac-toe module and we want to embed it in that tic-tac-toe element so",
    "start": "1798350",
    "end": "1803389"
  },
  {
    "text": "we want tic-tac-toe to yeah we want the tic-tac-toe element to hold our",
    "start": "1803389",
    "end": "1809360"
  },
  {
    "text": "application so let's go look at what the Elm code looks like the Elm architecture",
    "start": "1809360",
    "end": "1819759"
  },
  {
    "text": "we break out our application into three primary areas we have our model we have",
    "start": "1819759",
    "end": "1829759"
  },
  {
    "text": "our update and we have our view okay so",
    "start": "1829759",
    "end": "1835970"
  },
  {
    "text": "you see this a lot of places and put other frameworks like I believe it was react has been heavily inspired by this",
    "start": "1835970",
    "end": "1842389"
  },
  {
    "text": "model so it turns out that functional applications tend to really kind of",
    "start": "1842389",
    "end": "1849430"
  },
  {
    "text": "follow this pattern anyway so this is really the standard approach for constructing an elm application so",
    "start": "1849430",
    "end": "1856120"
  },
  {
    "text": "upfront we've got some setup today we got our module tic-tac-toe and we're",
    "start": "1856120",
    "end": "1862240"
  },
  {
    "text": "this parent dot dot so it's any function that's visible here that's defined in",
    "start": "1862240",
    "end": "1869020"
  },
  {
    "text": "here is going to be visible externally I don't really care nothing else is using it for this it was simpler to do this",
    "start": "1869020",
    "end": "1876400"
  },
  {
    "text": "but if you look at things like import HTML events so we're going to wire up",
    "start": "1876400",
    "end": "1881410"
  },
  {
    "text": "some message handling that responds to input and click events from our",
    "start": "1881410",
    "end": "1889300"
  },
  {
    "text": "application and then we define our program app program a function that",
    "start": "1889300",
    "end": "1897310"
  },
  {
    "text": "takes an object that defines a few steps we have an initialization step and then you can see the view and update which we",
    "start": "1897310",
    "end": "1903940"
  },
  {
    "text": "talked about and subscriptions so subscriptions I'm I actually don't think I have layered up in this version but",
    "start": "1903940",
    "end": "1912490"
  },
  {
    "text": "what we can do ultimately is have elm applications communicate with the",
    "start": "1912490",
    "end": "1917620"
  },
  {
    "text": "outside world through subscriptions and what we call ports so if you have other JavaScript or other Elm allocations on",
    "start": "1917620",
    "end": "1924760"
  },
  {
    "text": "the same page they have ways of inter communicating and because it's all going to be message based they will push a",
    "start": "1924760",
    "end": "1930640"
  },
  {
    "text": "message into the pipeline for this particular application it will do the",
    "start": "1930640",
    "end": "1937510"
  },
  {
    "text": "processing against that message and then update the model and the view accordingly now it's not managing any",
    "start": "1937510",
    "end": "1945280"
  },
  {
    "text": "state really we have some we have our model our model records and",
    "start": "1945280",
    "end": "1951120"
  },
  {
    "text": "discriminated unions which we'll see in a moment as we scroll through but elm is managing that we're not managing and",
    "start": "1951120",
    "end": "1957070"
  },
  {
    "text": "we're not setting a global variable or anything anywhere we're allowing the Elm",
    "start": "1957070",
    "end": "1962640"
  },
  {
    "text": "engine in the Elm architecture to manage that for us and it will handle things",
    "start": "1962640",
    "end": "1969460"
  },
  {
    "text": "like a shadow DOM and how the the elements are displayed and where certain pieces are rendered or re rendered it",
    "start": "1969460",
    "end": "1976720"
  },
  {
    "text": "does it in a very efficient manner",
    "start": "1976720",
    "end": "1980010"
  },
  {
    "text": "so let's take a look here so our model we know that in a tic-tac-toe game we",
    "start": "1984000",
    "end": "1989559"
  },
  {
    "text": "have two players well player X and player oh I'm pretty straightforward we have those two to",
    "start": "1989559",
    "end": "1995770"
  },
  {
    "text": "Union cases but then we need to know something about where the cells are so",
    "start": "1995770",
    "end": "2001049"
  },
  {
    "text": "we have a x position and a wide position left center right and top middle and",
    "start": "2001049",
    "end": "2008669"
  },
  {
    "text": "bottom respectively so that kind of reflects back there pretty well I'm",
    "start": "2008669",
    "end": "2015270"
  },
  {
    "text": "gonna reset this we come back in a little bit but those the x position in",
    "start": "2015270",
    "end": "2020370"
  },
  {
    "text": "the Y position don't identify the grid that's there are the position in the",
    "start": "2020370",
    "end": "2026309"
  },
  {
    "text": "grid independently we need the combination of those so we have this alias called cell position which is a",
    "start": "2026309",
    "end": "2033029"
  },
  {
    "text": "tuple type tuples are already defined within the language we're just going to change the definition to the name cell",
    "start": "2033029",
    "end": "2040649"
  },
  {
    "text": "position for the combination of y and x position we have a union that represents",
    "start": "2040649",
    "end": "2050190"
  },
  {
    "text": "self state has somebody already played in the cell if so who so that's occupied",
    "start": "2050190",
    "end": "2056429"
  },
  {
    "text": "by player or is it empty we have a cell",
    "start": "2056429",
    "end": "2063240"
  },
  {
    "text": "let's a cell well a cell has a position and a state you know what where is it",
    "start": "2063240",
    "end": "2070230"
  },
  {
    "text": "and who has played on it and just to",
    "start": "2070230",
    "end": "2075270"
  },
  {
    "text": "make the code a little bit more readable rather than having things like list of cell what is list of cell mean in any",
    "start": "2075270",
    "end": "2080520"
  },
  {
    "text": "given context alias it as board so when we see in the code below we're going to work against the board which is really",
    "start": "2080520",
    "end": "2086878"
  },
  {
    "text": "just a list of cells none of the player as players are",
    "start": "2086879",
    "end": "2095398"
  },
  {
    "text": "interacting with the game we need to know whether they're whether what they did was valid or not some of this is",
    "start": "2095399",
    "end": "2101730"
  },
  {
    "text": "enforced by the UI we have well we let add attributes like whether or not the",
    "start": "2101730",
    "end": "2108570"
  },
  {
    "text": "control is enabled or disabled based on that particular cell stay but maybe we don't have those safeguards",
    "start": "2108570",
    "end": "2116190"
  },
  {
    "text": "in place so we have a union case for invalid move so some player made an",
    "start": "2116190",
    "end": "2121349"
  },
  {
    "text": "invalid move or was the move valid yes",
    "start": "2121349",
    "end": "2126420"
  },
  {
    "text": "it was so the player ex put their token on a particular spot and nobody won and",
    "start": "2126420",
    "end": "2133470"
  },
  {
    "text": "it wasn't a draw if a player puts a token in a spot and they get three in a",
    "start": "2133470",
    "end": "2140040"
  },
  {
    "text": "row well that's a win and then a lot of times I just publisher to call the cats game but I call it a draw here then our",
    "start": "2140040",
    "end": "2148260"
  },
  {
    "text": "overall model for the game consists of two pieces of data we have our board now",
    "start": "2148260",
    "end": "2155280"
  },
  {
    "text": "our board we just said is a list of of cells and the cells had the position and",
    "start": "2155280",
    "end": "2161220"
  },
  {
    "text": "their current state right so we bought all of the state we need in that list",
    "start": "2161220",
    "end": "2166700"
  },
  {
    "text": "and then the last move result now we could take this a lot more a lot further",
    "start": "2166700",
    "end": "2173160"
  },
  {
    "text": "I just track one move at a time but if we wanted to implement some like undo functionality we could actually have another list here so we have a list of",
    "start": "2173160",
    "end": "2179579"
  },
  {
    "text": "move results which I thought about doing just for the fun of it just we could go like back and forth and see how the",
    "start": "2179579",
    "end": "2185310"
  },
  {
    "text": "architecture plays with those lists both presidents we're just keeping it simple and we're going to track the last move",
    "start": "2185310",
    "end": "2192930"
  },
  {
    "text": "results so that when we reach on the board we know whether we should indicate that something is one that someone has",
    "start": "2192930",
    "end": "2199200"
  },
  {
    "text": "won or whether it was a draw so that's the overall model for the game like",
    "start": "2199200",
    "end": "2205859"
  },
  {
    "text": "that's that's really what we need to see that's that's how we represent the board",
    "start": "2205859",
    "end": "2211140"
  },
  {
    "text": "and the players and and the current state of the game the anit piece is just",
    "start": "2211140",
    "end": "2217890"
  },
  {
    "text": "a little bit of setup that we need when the first one we first load the game we need to identify the horizontal",
    "start": "2217890",
    "end": "2223109"
  },
  {
    "text": "positions that's just a list of left center and right and the vertical positions top middle and bottom we have",
    "start": "2223109",
    "end": "2229109"
  },
  {
    "text": "lists of those and we essentially just build up the board from those two lists so we identify all of the positions and",
    "start": "2229109",
    "end": "2236780"
  },
  {
    "text": "we create a new model with all positions piped into the map",
    "start": "2236780",
    "end": "2244810"
  },
  {
    "text": "and we're going to initialize those all all of those positions all of those cells as empty we're going to say player",
    "start": "2244810",
    "end": "2251320"
  },
  {
    "text": "X gets to go first and then this command none this is the first part we've seen where we're tying into this messaging",
    "start": "2251320",
    "end": "2259450"
  },
  {
    "text": "system that the elem is built around this is saying we're starting off there was no command this is is the initial",
    "start": "2259450",
    "end": "2266800"
  },
  {
    "text": "state and now we get into the update",
    "start": "2266800",
    "end": "2274180"
  },
  {
    "text": "portion an update is where all of the magic for the application happens we see",
    "start": "2274180",
    "end": "2281680"
  },
  {
    "text": "this message type here there really are only two actions that can ever happen in",
    "start": "2281680",
    "end": "2288160"
  },
  {
    "text": "a tic-tac-toe game right we have a player takes a turn or the game is reset",
    "start": "2288160",
    "end": "2296130"
  },
  {
    "text": "right what is it what does a player take you can turn do player taking a turn",
    "start": "2296130",
    "end": "2301480"
  },
  {
    "text": "needs to inspect the state of that cell where they clicked with somebody already",
    "start": "2301480",
    "end": "2307570"
  },
  {
    "text": "there no okay well let's put a toke in there did they win by looking for three",
    "start": "2307570",
    "end": "2313600"
  },
  {
    "text": "in a row no okay well now we need to accept another command for the other player and then there's reset which",
    "start": "2313600",
    "end": "2321220"
  },
  {
    "text": "simply runs that init function again and clears out and I back up it's not",
    "start": "2321220",
    "end": "2328270"
  },
  {
    "text": "clearing out and it's creating a giving us a new list brand new list of cells",
    "start": "2328270",
    "end": "2334450"
  },
  {
    "text": "that have all been initialized to empty",
    "start": "2334450",
    "end": "2339540"
  },
  {
    "text": "so move and reset our move consists of who did it and where did they go this",
    "start": "2342600",
    "end": "2352900"
  },
  {
    "text": "lines to check is just some little setup that identifies our rows columns and then the two diagonals so we do that",
    "start": "2352900",
    "end": "2359020"
  },
  {
    "text": "very functionally we've got some concatenation of lists going on where we're going to map all of our vertical",
    "start": "2359020",
    "end": "2364840"
  },
  {
    "text": "positions to rows all of our horizontal positions to columns and then our diagonals we're going to concatenate",
    "start": "2364840",
    "end": "2370900"
  },
  {
    "text": "those into just one nice list that we can cycle through and find very quickly",
    "start": "2370900",
    "end": "2378210"
  },
  {
    "text": "you'll find the actual update functional back up so I define these everything is if everything is defined above the",
    "start": "2379150",
    "end": "2385670"
  },
  {
    "text": "update the update is the piece that elm calls this this function is what LM calls into and it accepts the message",
    "start": "2385670",
    "end": "2392330"
  },
  {
    "text": "which we just saw that type what is a which which will have the commands built",
    "start": "2392330",
    "end": "2398060"
  },
  {
    "text": "in and the model so we're always going to be passing in the model elm every",
    "start": "2398060",
    "end": "2403310"
  },
  {
    "text": "time we click that reset button or one of those grid squares we're going to get",
    "start": "2403310",
    "end": "2408920"
  },
  {
    "text": "the model passed back in so we're not managing that Elm is going to keep that somewhere tucked away and then when it",
    "start": "2408920",
    "end": "2415940"
  },
  {
    "text": "needs to work on it again it will pass that model in but we won't change that model we're going to create a new",
    "start": "2415940",
    "end": "2422000"
  },
  {
    "text": "representation of that model which gets passed back to Elm which is why we're working in a purely functional language",
    "start": "2422000",
    "end": "2430010"
  },
  {
    "text": "we're not going to change that state in any way we're going to create a new state and let Elm handle updating our UI",
    "start": "2430010",
    "end": "2436460"
  },
  {
    "text": "for us so here we're just going to do with a pattern match just like an",
    "start": "2436460",
    "end": "2442670"
  },
  {
    "text": "f-sharp we have pattern matching so case message of a move or a reset and I just",
    "start": "2442670",
    "end": "2449570"
  },
  {
    "text": "mentioned that reset all it does is call init right that gives us that initial list of of cells again but move here we",
    "start": "2449570",
    "end": "2458870"
  },
  {
    "text": "go here's the logic I describe for what happens when a person clicks a cell if",
    "start": "2458870",
    "end": "2464210"
  },
  {
    "text": "it's I need to it I really need to rewrite this I started off now I need to make this the positive case but if it's",
    "start": "2464210",
    "end": "2471200"
  },
  {
    "text": "an invalid move then we're just going to say yep this is an invalid move we're not going to change anything on the",
    "start": "2471200",
    "end": "2477200"
  },
  {
    "text": "state and we actually can't just based on the nature of disabling those those buttons",
    "start": "2477200",
    "end": "2482650"
  },
  {
    "text": "we shouldn't actually fall into that case but for completeness we cover it most of the time though we're going to",
    "start": "2482650",
    "end": "2488870"
  },
  {
    "text": "come in here and we're going to create a new cell we've got a remember it's a position and the new state we're going",
    "start": "2488870",
    "end": "2497060"
  },
  {
    "text": "to say that this cell at this position is now occupied by the player that",
    "start": "2497060",
    "end": "2502190"
  },
  {
    "text": "clicked that and there's this function replace cell",
    "start": "2502190",
    "end": "2508510"
  },
  {
    "text": "what this does is it takes that board that was passed in through the model and",
    "start": "2509140",
    "end": "2514539"
  },
  {
    "text": "it looks across all of those cells that are in that board and if the cell",
    "start": "2514539",
    "end": "2521929"
  },
  {
    "text": "matches that the cells position matches the one that we're passing and we're pressing the new one we just created it",
    "start": "2521929",
    "end": "2527299"
  },
  {
    "text": "we're going to use that in place of what was already in there so we're",
    "start": "2527299",
    "end": "2532369"
  },
  {
    "text": "essentially replacing it we're going into a new list and so without going",
    "start": "2532369",
    "end": "2538999"
  },
  {
    "text": "through all of the details of this piece essentially we're just handling these messages we click that has an event",
    "start": "2538999",
    "end": "2546920"
  },
  {
    "text": "handler wired up in JavaScript that calls into Elm elm finds the update and",
    "start": "2546920",
    "end": "2556630"
  },
  {
    "text": "it runs through this update function it gets us our updated board and then it",
    "start": "2556630",
    "end": "2567170"
  },
  {
    "text": "calls the view function which we haven't looked at yet now view oops is a very",
    "start": "2567170",
    "end": "2577249"
  },
  {
    "text": "simple function but I have a lot of code above it Elm exposes a module that",
    "start": "2577249",
    "end": "2588400"
  },
  {
    "text": "defines I think every HTML element and",
    "start": "2588400",
    "end": "2594160"
  },
  {
    "text": "it exposes them as functions so we're",
    "start": "2594160",
    "end": "2601279"
  },
  {
    "text": "going to wrap our entire board within a new div and it takes two lists the first",
    "start": "2601279",
    "end": "2610339"
  },
  {
    "text": "lists are attributes it's just an attribute for the resulting element and",
    "start": "2610339",
    "end": "2619809"
  },
  {
    "text": "then a list of all the child nodes",
    "start": "2619809",
    "end": "2625779"
  },
  {
    "text": "this billboard function that accepts the model billboard model we're going to",
    "start": "2626890",
    "end": "2634240"
  },
  {
    "text": "concatenate building a header building a",
    "start": "2634240",
    "end": "2640269"
  },
  {
    "text": "div building a horizontal rule and building a footer to see all of those in",
    "start": "2640269",
    "end": "2646539"
  },
  {
    "text": "chrome our header is whose turn it is this tic tac toe box is part of the",
    "start": "2646539",
    "end": "2652650"
  },
  {
    "text": "index.html we're controlling everything here that's I'm going to select",
    "start": "2652650",
    "end": "2658359"
  },
  {
    "text": "everything X's turn up through the reset button is being generated by Elm so every time we click something it gets",
    "start": "2658359",
    "end": "2666010"
  },
  {
    "text": "that message it processes what that new State should look like it passes that",
    "start": "2666010",
    "end": "2671589"
  },
  {
    "text": "new model into the view function and it uses a shadow Dom to make dynamic",
    "start": "2671589",
    "end": "2679089"
  },
  {
    "text": "changes to our resulting HTML but",
    "start": "2679089",
    "end": "2686529"
  },
  {
    "text": "because these are all functions it's we've essentially just replaced angle",
    "start": "2686529",
    "end": "2692680"
  },
  {
    "text": "brackets with with square braces right it looks like HTML but it's functional",
    "start": "2692680",
    "end": "2699099"
  },
  {
    "text": "like we call the div that's going to give us a div element back in our",
    "start": "2699099",
    "end": "2704319"
  },
  {
    "text": "resulting HTML with in this case we're giving it the we're setting the class",
    "start": "2704319",
    "end": "2711180"
  },
  {
    "text": "attribute to tic-tac-toe board and then the content for that is oh wait there's",
    "start": "2711180",
    "end": "2717700"
  },
  {
    "text": "another function call we're going to take our vertical positions that we defined earlier and we're going to map",
    "start": "2717700",
    "end": "2723069"
  },
  {
    "text": "it to build row we're still passing in the model when we say build row take our",
    "start": "2723069",
    "end": "2731079"
  },
  {
    "text": "model take our vertical position represent it as a div and then we're",
    "start": "2731079",
    "end": "2736509"
  },
  {
    "text": "going to lay out each individual button across the board so we take those",
    "start": "2736509",
    "end": "2743619"
  },
  {
    "text": "horizontal positions and we've mapped that to a lambda expression to a",
    "start": "2743619",
    "end": "2749410"
  },
  {
    "text": "function takes that position and we go and get the cell from the board what",
    "start": "2749410",
    "end": "2754569"
  },
  {
    "text": "does that look like get cell and we're",
    "start": "2754569",
    "end": "2761549"
  },
  {
    "text": "good so here we go",
    "start": "2762760",
    "end": "2771400"
  },
  {
    "text": "so going to get the cell this is a new construct we have this let construct so",
    "start": "2771570",
    "end": "2777660"
  },
  {
    "text": "I've got just a simple function here but it allows me to define a variable used",
    "start": "2777660",
    "end": "2786600"
  },
  {
    "text": "just within the context down below so let's sell get board filtered down to",
    "start": "2786600",
    "end": "2792480"
  },
  {
    "text": "the position and the list head get the first item off of that list then in case",
    "start": "2792480",
    "end": "2798690"
  },
  {
    "text": "cell of just or nothing so for those familiar with with f-sharp some or none",
    "start": "2798690",
    "end": "2806730"
  },
  {
    "text": "this is our option type we have that same concept in elm getting us around",
    "start": "2806730",
    "end": "2811740"
  },
  {
    "text": "the whole null ability option we see we have a very definite case we either have",
    "start": "2811740",
    "end": "2817590"
  },
  {
    "text": "a value or we have nothing if we have nothing well then we'll just create a",
    "start": "2817590",
    "end": "2823070"
  },
  {
    "text": "brand new cell otherwise we'll use the one that we found and ultimately we",
    "start": "2823070",
    "end": "2836100"
  },
  {
    "text": "result in this nice HTML beautiful default bootstrap theme so the Elm",
    "start": "2836100",
    "end": "2846830"
  },
  {
    "text": "website has a very good overview that's does the book and the introduction to",
    "start": "2846830",
    "end": "2856380"
  },
  {
    "text": "Elm the documentation is it's pretty thorough there's a few spots that I find there are some gaps in I'm looking",
    "start": "2856380",
    "end": "2862560"
  },
  {
    "text": "forward to actually trying this out on a real project pretty soon I think you know just that the nature of the language the fact that it is purely",
    "start": "2862560",
    "end": "2869280"
  },
  {
    "text": "functional should allow for a lot more flexibility and a lot more predictability in terms of how I",
    "start": "2869280",
    "end": "2875600"
  },
  {
    "text": "construct my application give me that that that safety from the underlying types and also just because it's ml as I",
    "start": "2875600",
    "end": "2884490"
  },
  {
    "text": "start building up more F sharp back-end stuff fee were able to work in a very consistent language but one that was",
    "start": "2884490",
    "end": "2892080"
  },
  {
    "text": "designed for being in the web so we still have a few minutes here any",
    "start": "2892080",
    "end": "2898170"
  },
  {
    "text": "questions I can go back through yes sir",
    "start": "2898170",
    "end": "2902240"
  },
  {
    "text": "yes I can I can certainly show where the where the clicks are Jenna the event",
    "start": "2904800",
    "end": "2910630"
  },
  {
    "text": "handlers are hooked up let's go over there right now so this is all coming out of our view code and if we find in",
    "start": "2910630",
    "end": "2920020"
  },
  {
    "text": "billboard we've built footer build row so build sell build sell is by far the",
    "start": "2920020",
    "end": "2926140"
  },
  {
    "text": "most complex function in this and I could probably refactor it a bit but build sell is responsible for building",
    "start": "2926140",
    "end": "2935050"
  },
  {
    "text": "up each individual square so build sell takes a model and the cell and it's",
    "start": "2935050",
    "end": "2944650"
  },
  {
    "text": "going to wrap the create a div and it's going to be styled and then we look at the state so if we have an occupied cell",
    "start": "2944650",
    "end": "2953940"
  },
  {
    "text": "we're defining a button tricks we're going to invoke the button function we're going to do some styling on it so",
    "start": "2953940",
    "end": "2960340"
  },
  {
    "text": "we've got button style that is a a binding defined elsewhere along with",
    "start": "2960340",
    "end": "2965410"
  },
  {
    "text": "default we're also giving it setting the disabled property to true but if we",
    "start": "2965410",
    "end": "2971080"
  },
  {
    "text": "don't have anybody on that space then we",
    "start": "2971080",
    "end": "2976420"
  },
  {
    "text": "do a pattern match against the last move results so we're going to move into the next player because we're going to we're",
    "start": "2976420",
    "end": "2984340"
  },
  {
    "text": "not going to say that play D just the nature of the language we've enforced that player X can't play twice in a row",
    "start": "2984340",
    "end": "2991930"
  },
  {
    "text": "player Y can't play twice in a row that's one of this next the next move case identifies the next player so it's",
    "start": "2991930",
    "end": "2999520"
  },
  {
    "text": "going to control whose turn it actually is so next move case we're going to",
    "start": "2999520",
    "end": "3006720"
  },
  {
    "text": "execute the button function as well we're going to do some styling instead of using the default style we're going",
    "start": "3006720",
    "end": "3012450"
  },
  {
    "text": "to do the primary style so there we get the nice blue color and then we give it on click on click function takes a move",
    "start": "3012450",
    "end": "3025770"
  },
  {
    "text": "well what was move let's go back I'll find it again",
    "start": "3025770",
    "end": "3032270"
  },
  {
    "text": "move is our message it takes a player",
    "start": "3032270",
    "end": "3037740"
  },
  {
    "text": "and a sell position",
    "start": "3037740",
    "end": "3040910"
  },
  {
    "text": "you I lost it there we go so that on-click",
    "start": "3046160",
    "end": "3053380"
  },
  {
    "text": "function is going to generate the HTML that wires up the d click handler",
    "start": "3053380",
    "end": "3060660"
  },
  {
    "text": "and explained that if I can't my posed",
    "start": "3070910",
    "end": "3075930"
  },
  {
    "text": "actually looks like it's putting it in script a zoom in when I all right yeah",
    "start": "3075930",
    "end": "3083370"
  },
  {
    "text": "it looks like it's dynamically wiring it up it's not putting it as an attribute so it's doing it through the script so I can't actually find it quickly well but",
    "start": "3083370",
    "end": "3091650"
  },
  {
    "text": "that is exactly where it's hooking that event handler up so each time the board",
    "start": "3091650",
    "end": "3097290"
  },
  {
    "text": "is regenerated he has you know we played player X's has clicked they have valid move the next player is is why it's",
    "start": "3097290",
    "end": "3103500"
  },
  {
    "text": "going to go and reconnect all of those event handlers for us so that when the next click comes in it's going to be",
    "start": "3103500",
    "end": "3109500"
  },
  {
    "text": "enforced that it's player Y making the move and then so on it's just going to flip back and forth because we only have",
    "start": "3109500",
    "end": "3115530"
  },
  {
    "text": "two players right but it'll reach it will manage connecting and disconnecting",
    "start": "3115530",
    "end": "3121260"
  },
  {
    "text": "those events for us so that when we rebuild that we make sure that we're",
    "start": "3121260",
    "end": "3127110"
  },
  {
    "text": "getting a valid next move so then ultimately the reset button does the",
    "start": "3127110",
    "end": "3134010"
  },
  {
    "text": "same basic thing so we can see here on build footer they take our button",
    "start": "3134010",
    "end": "3140820"
  },
  {
    "text": "function we give it our styles and the attributes on click reset so reset was",
    "start": "3140820",
    "end": "3146880"
  },
  {
    "text": "again if I can find it one of our",
    "start": "3146880",
    "end": "3153000"
  },
  {
    "text": "messages so this is going into that message system we click that update gets",
    "start": "3153000",
    "end": "3158730"
  },
  {
    "text": "called if we find update update takes a",
    "start": "3158730",
    "end": "3164220"
  },
  {
    "text": "message this line here line 147 is the",
    "start": "3164220",
    "end": "3169380"
  },
  {
    "text": "signature these are our annotations I think I actually kind of prefer this model with the annotations rather than doing them in line like we would in a",
    "start": "3169380",
    "end": "3176100"
  },
  {
    "text": "sharp I like having it just set aside and up above rather than in the middle of the of the line but we accept the",
    "start": "3176100",
    "end": "3183720"
  },
  {
    "text": "message and we accept the model and then we return the new model and a command so",
    "start": "3183720",
    "end": "3190080"
  },
  {
    "text": "we've got our message came in and it's going to pass back I think everywhere I'm sitting in I'm just returning",
    "start": "3190080",
    "end": "3195780"
  },
  {
    "text": "commands none that kind of ties in to the subscriptions and I'm not really using that in this version so",
    "start": "3195780",
    "end": "3202299"
  },
  {
    "text": "yeah very easy to wire up it's a question now you're in a happy land",
    "start": "3202299",
    "end": "3209259"
  },
  {
    "text": "using Elmer's language you want how would it look if you wanted to actually talk to a JavaScript library so how",
    "start": "3209259",
    "end": "3215829"
  },
  {
    "text": "would it look if I wanted to talk to a JavaScript library now I don't have an example of that but there are ways for",
    "start": "3215829",
    "end": "3224489"
  },
  {
    "text": "elm to communicate with the outside world and vice versa so I actually",
    "start": "3224489",
    "end": "3231279"
  },
  {
    "text": "haven't used it yet and it's something I have been looking into I wish I could",
    "start": "3231279",
    "end": "3236859"
  },
  {
    "text": "find it quickly they have this notion of ports so it's essentially places where",
    "start": "3236859",
    "end": "3242140"
  },
  {
    "text": "other pieces can plug in and it really works off of the the ports accept",
    "start": "3242140",
    "end": "3249099"
  },
  {
    "text": "something and essentially it calls into update over time out and then we can also have subscriptions that do the same",
    "start": "3249099",
    "end": "3255099"
  },
  {
    "text": "do some similar mechanism but yeah ports are primarily we've got a that's",
    "start": "3255099",
    "end": "3261969"
  },
  {
    "text": "probably right there JavaScript Interop so this is the elm documentation and get",
    "start": "3261969",
    "end": "3268509"
  },
  {
    "text": "looks dot io yeah and I love it at some point your elbow Graham is probably",
    "start": "3268509",
    "end": "3274119"
  },
  {
    "text": "going to need to talk to JavaScript so you know if you you wouldn't really be necessarily if you're using jQuery or",
    "start": "3274119",
    "end": "3281249"
  },
  {
    "text": "something like glow - you're not going to really use that in your elm code directly you're going to stick in elm as",
    "start": "3281249",
    "end": "3287920"
  },
  {
    "text": "much as possible but every one so if you have other things on your page that you need to interact with you're going to",
    "start": "3287920",
    "end": "3293049"
  },
  {
    "text": "look into things like like the ports and the subscriptions that's what you're",
    "start": "3293049",
    "end": "3299229"
  },
  {
    "text": "looking for all right anything else",
    "start": "3299229",
    "end": "3303869"
  },
  {
    "text": "best Oh for resources for learning this was L tutorial.org it it brought",
    "start": "3307300",
    "end": "3313670"
  },
  {
    "text": "together all the moving parts of an entire app and kind of crystallized it wolf what is it Alan tutorial helm",
    "start": "3313670",
    "end": "3318770"
  },
  {
    "text": "hyphen tutorial.org I think is there but it brings it ties it in with web pack",
    "start": "3318770",
    "end": "3325040"
  },
  {
    "text": "and all this you know super sci-fi web stuff that gives you the full yeah that",
    "start": "3325040",
    "end": "3331369"
  },
  {
    "text": "just as a recommendation I liked it a lot yeah yeah I don't think I've actually been to this one yeah yeah",
    "start": "3331369",
    "end": "3337460"
  },
  {
    "text": "thank you yeah mark dilma have some sort",
    "start": "3337460",
    "end": "3344150"
  },
  {
    "text": "of syntax like if shops computation expression so Haskell's do notation does",
    "start": "3344150",
    "end": "3350000"
  },
  {
    "text": "Elm have computation expressions I don't",
    "start": "3350000",
    "end": "3355250"
  },
  {
    "text": "believe so but I'd I'm not sure off the top of my head okay yeah I would be",
    "start": "3355250",
    "end": "3363560"
  },
  {
    "text": "honestly every kind of surprised if it does but I haven't looked right right",
    "start": "3363560",
    "end": "3372830"
  },
  {
    "text": "yeah it really yeah it really is focus specifically is more of a domain",
    "start": "3372830",
    "end": "3378109"
  },
  {
    "text": "specific UI language if anything else",
    "start": "3378109",
    "end": "3386050"
  },
  {
    "text": "then we're almost at time thank you very much for coming out I'm Dave Fancher please fill out an eval the the complex",
    "start": "3386050",
    "end": "3395030"
  },
  {
    "text": "operation is moving it to the box out I appreciate your time and I hope you learn something thank you",
    "start": "3395030",
    "end": "3400760"
  },
  {
    "text": "[Applause]",
    "start": "3400760",
    "end": "3403219"
  }
]