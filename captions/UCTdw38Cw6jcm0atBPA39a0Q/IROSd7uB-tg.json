[
  {
    "text": "okay cool I am genuinely impressed that people turned up because it's the last",
    "start": "4790",
    "end": "10969"
  },
  {
    "text": "day the last session and some fella called Troy hunt he's doing a talk as",
    "start": "10969",
    "end": "16250"
  },
  {
    "text": "well I would expect most people who gone through his talk so I'm kind of feeling",
    "start": "16250",
    "end": "22609"
  },
  {
    "text": "a bit guilty because I'm gonna have to tell you a story now last night I crept",
    "start": "22609",
    "end": "27949"
  },
  {
    "text": "into Troy's room and whilst he was hacking somebody's Wi-Fi and doing",
    "start": "27949",
    "end": "34070"
  },
  {
    "text": "things to a pineapple that would make your eyes water a little security joke",
    "start": "34070",
    "end": "40070"
  },
  {
    "text": "for you I stole his lucky charm",
    "start": "40070",
    "end": "45430"
  },
  {
    "text": "so Troy is currently in his talk absolutely breaking it his talk he's not",
    "start": "48039",
    "end": "53300"
  },
  {
    "text": "going to go too well because his favorite lucky charm he's on my head so I kind of feel a bit",
    "start": "53300",
    "end": "59840"
  },
  {
    "text": "guilty about that but never mind Troy's a professional I'm sure he will plow on through",
    "start": "59840",
    "end": "64930"
  },
  {
    "text": "anyways everyone had a good week at NDC yeah good good everyone tired yeah",
    "start": "64930",
    "end": "71840"
  },
  {
    "text": "can you cope with one more session do you think good good hopefully they've",
    "start": "71840",
    "end": "76880"
  },
  {
    "text": "saved the best till last if anyone is sitting next to anyone who falls asleep",
    "start": "76880",
    "end": "82130"
  },
  {
    "text": "midway through put your hand up we've got some marker pens we can have a bit of fun did anyone read my bio before",
    "start": "82130",
    "end": "91310"
  },
  {
    "text": "they came to the talk okay so when you",
    "start": "91310",
    "end": "96620"
  },
  {
    "text": "submit a talk to a conference they may ask you to fill out a bit of information about who you are why are you so great",
    "start": "96620",
    "end": "103880"
  },
  {
    "text": "why should we accept you for this talk so being British selling myself is not a",
    "start": "103880",
    "end": "109490"
  },
  {
    "text": "natural thing so I had a cunning idea of going to Twitter to ask people to write",
    "start": "109490",
    "end": "114890"
  },
  {
    "text": "my biography for me obviously I've got lots of friends on there respected colleagues so you know I was expecting",
    "start": "114890",
    "end": "120950"
  },
  {
    "text": "some good good comments so I thought I'd pick out a few you can see I've got a few there but I thought I'd show you",
    "start": "120950",
    "end": "127130"
  },
  {
    "text": "some of the good ones this is from Nick Johnny chanson a world-class village",
    "start": "127130",
    "end": "134750"
  },
  {
    "text": "idiot with deep expertise in circumventing the best features of type safety programming languages I think you can",
    "start": "134750",
    "end": "141709"
  },
  {
    "text": "tell how this is gonna end up dan possesses all five fingers on each hand",
    "start": "141709",
    "end": "147800"
  },
  {
    "text": "leading one to suspect he's not from really around here she's done I have",
    "start": "147800",
    "end": "154190"
  },
  {
    "text": "been Jonathan Shannon is the gdpr of brexit when it comes to code reviews I",
    "start": "154190",
    "end": "160420"
  },
  {
    "text": "don't even know what I means but you know there we go",
    "start": "160420",
    "end": "166000"
  },
  {
    "text": "Niall Merrigan known for using a spell checker on his home name now if if you",
    "start": "166000",
    "end": "174170"
  },
  {
    "text": "don't know Niall is one of the co-organizers of MDC so I was kind of",
    "start": "174170",
    "end": "179180"
  },
  {
    "text": "expecting something you know a bit respectful something nice and warming about me people will go yeah yeah but no",
    "start": "179180",
    "end": "186829"
  },
  {
    "text": "obviously not you know he went for that so knowing that Niall is a security",
    "start": "186829",
    "end": "192260"
  },
  {
    "text": "expert I thought I would start changing the way I write my applications just to kind of get my own back and and make him",
    "start": "192260",
    "end": "198950"
  },
  {
    "text": "sweat so all my applications now are going to be case insensitive eight by",
    "start": "198950",
    "end": "204260"
  },
  {
    "text": "eight to zero to nine passwords that's fine I'm not going to use any HTTP because",
    "start": "204260",
    "end": "210500"
  },
  {
    "text": "well it's expensive and you know I don't get paid a lot so here we go I am NOT",
    "start": "210500",
    "end": "216500"
  },
  {
    "text": "going to encode any of my HTML output so if somebody sends in a script tag in their input what can go wrong of course",
    "start": "216500",
    "end": "224989"
  },
  {
    "text": "I'm going to put my connection strings into github with blank passwords that's that's fine nothing nothing to worry",
    "start": "224989",
    "end": "230329"
  },
  {
    "text": "about there in any you know sequel that I do sequel promises for wimps is I've",
    "start": "230329",
    "end": "236030"
  },
  {
    "text": "heard about this injection thing but anything is going to take off so there we go hopefully Niall will sweat no so here's",
    "start": "236030",
    "end": "244190"
  },
  {
    "text": "a proper grown-up professional slide my name is Jonathan Shannon I am a software",
    "start": "244190",
    "end": "250430"
  },
  {
    "text": "developer I am a core contributor Nancy anyone used Nancy before good",
    "start": "250430",
    "end": "257870"
  },
  {
    "text": "I wrote the Omni sharp sublime plugin so way back when when Omni shop first came",
    "start": "257870",
    "end": "263210"
  },
  {
    "text": "back I was there in the trenches so if you use omni sharp for the ESCO today with c-sharp that's where it all comes",
    "start": "263210",
    "end": "270169"
  },
  {
    "text": "from I'm the author of Carter which we'll go into later I'm a former Microsoft asp.net MVP I'm a",
    "start": "270169",
    "end": "278919"
  },
  {
    "text": "husband father around nice guy I work for a company called VQ communications",
    "start": "278919",
    "end": "285280"
  },
  {
    "text": "so thank you to them for letting me come here and talk to you majority of our",
    "start": "285280",
    "end": "290290"
  },
  {
    "text": "team work remotely in the UK we're about to release a new major release of our",
    "start": "290290",
    "end": "296440"
  },
  {
    "text": "product in the next couple of weeks this runs on dotnet core we ship it in",
    "start": "296440",
    "end": "302860"
  },
  {
    "text": "kubernetes it runs photographs database uses Redis as a cache uses elasticsearch",
    "start": "302860",
    "end": "310090"
  },
  {
    "text": "pretty much every buzzword you can think of we're kind of using that Miki was",
    "start": "310090",
    "end": "315400"
  },
  {
    "text": "also a company that paid for Nancy to get onto dotnet core a couple of years ago so they're a good company to work",
    "start": "315400",
    "end": "322539"
  },
  {
    "text": "for if you aren't sending my code it's that github calm /j shannon i'm on",
    "start": "322539",
    "end": "328720"
  },
  {
    "text": "twitter twitter.com slash j Chanin and my email is jonathan channel at",
    "start": "328720",
    "end": "333910"
  },
  {
    "text": "gmail.com so who uses solid in their",
    "start": "333910",
    "end": "340510"
  },
  {
    "text": "applications most people the solid has been around for 10-15 years ever since",
    "start": "340510",
    "end": "347820"
  },
  {
    "text": "dotnet kind of came out and they paired nicely and it's it's a design pattern",
    "start": "347820",
    "end": "353710"
  },
  {
    "text": "that most developers use they kind of take that design principle they apply it",
    "start": "353710",
    "end": "359889"
  },
  {
    "text": "to their projects they then start a new project they go are we need solid again we need some IOC containers it cetera et",
    "start": "359889",
    "end": "367270"
  },
  {
    "text": "cetera it's kind of ingrained in developers psyching and when junior",
    "start": "367270",
    "end": "372789"
  },
  {
    "text": "developers join the company they go how do we do this coding stuff you gotta where you need to solid this is what",
    "start": "372789",
    "end": "378130"
  },
  {
    "text": "you're going to do and in fact Microsoft have recently released some application guidelines whether you're writing docker",
    "start": "378130",
    "end": "385330"
  },
  {
    "text": "apps or dot nightcore apps and doing funky things with that their underlying",
    "start": "385330",
    "end": "390840"
  },
  {
    "text": "recommendations is to use the solid design principle now I must stay that",
    "start": "390840",
    "end": "398530"
  },
  {
    "text": "I'm not against solid what has happened over the last few years ten years",
    "start": "398530",
    "end": "405450"
  },
  {
    "text": "solid and layered applications seem to be joined together and they're kind of",
    "start": "405450",
    "end": "410500"
  },
  {
    "text": "synonymous in application design I'm not against solid and in fact parts of solid",
    "start": "410500",
    "end": "416950"
  },
  {
    "text": "will be in the final solution that I'll show you later on what I want you to",
    "start": "416950",
    "end": "422590"
  },
  {
    "text": "take away from the talk is that we want to write simple clean understandable",
    "start": "422590",
    "end": "427770"
  },
  {
    "text": "code and no magic so who has seen",
    "start": "427770",
    "end": "433480"
  },
  {
    "text": "something like this before yeah we all know so I came up against something like",
    "start": "433480",
    "end": "444160"
  },
  {
    "text": "this a while ago and scratch my head felt holy moly and ran doctress on it",
    "start": "444160",
    "end": "451420"
  },
  {
    "text": "which is a profiling tool from JetBrains and what it was saying was reflection",
    "start": "451420",
    "end": "456880"
  },
  {
    "text": "was being slow in our application and I thought to myself well we don't use reflection in our application so I felt",
    "start": "456880",
    "end": "464500"
  },
  {
    "text": "a bit more and said your constructors are being slow ah I think I know what",
    "start": "464500",
    "end": "470950"
  },
  {
    "text": "this is I think this is our ioc container because essentially what IOC is doing underneath is analyzing your",
    "start": "470950",
    "end": "476920"
  },
  {
    "text": "types looking at the Constructors seeing the types that your constructor needs makes that then looks at that type and",
    "start": "476920",
    "end": "484750"
  },
  {
    "text": "goes all the way down a tree to constructing your types so what did we",
    "start": "484750",
    "end": "489910"
  },
  {
    "text": "do well obviously we swapped ioc container problem solved in fact we did",
    "start": "489910",
    "end": "497410"
  },
  {
    "text": "swap sea container and it did work but we did more so we analyzed how",
    "start": "497410",
    "end": "503080"
  },
  {
    "text": "our dependencies were being used in our classes we took these dependencies and",
    "start": "503080",
    "end": "510100"
  },
  {
    "text": "whether they were used maybe just once in the whole god-like class it took",
    "start": "510100",
    "end": "515680"
  },
  {
    "text": "specific classes and took the s out a solid and made very specific classes consolidated the payer injected the",
    "start": "515680",
    "end": "523690"
  },
  {
    "text": "dependencies that only we needed for that function and generally tried to keep it simple",
    "start": "523690",
    "end": "530190"
  },
  {
    "text": "so at this point I want to discuss why I decided to do the talk I'd watched the",
    "start": "530190",
    "end": "537520"
  },
  {
    "text": "talk by Greg young call Dateline of code it was something I was well aware of but never got around to",
    "start": "537520",
    "end": "542710"
  },
  {
    "text": "watching but after dealing with our previous slide it kind of hit home and",
    "start": "542710",
    "end": "548920"
  },
  {
    "text": "what Gregg was trying to say is try and think about the problem you are trying to solve don't automatically go to a",
    "start": "548920",
    "end": "557410"
  },
  {
    "text": "design principle think about the problem a modern software development is a",
    "start": "557410",
    "end": "563920"
  },
  {
    "text": "complicated thing and things are getting harder and getting more distributed and",
    "start": "563920",
    "end": "569800"
  },
  {
    "text": "we kind of have to think how we construct our applications now front-end development is an easy",
    "start": "569800",
    "end": "576070"
  },
  {
    "text": "target years ago we had something like this we had an HTML page with some CSS and",
    "start": "576070",
    "end": "583780"
  },
  {
    "text": "JavaScript it would post to the back end and it would insert some data into the",
    "start": "583780",
    "end": "589990"
  },
  {
    "text": "database everything is fine move on a few years and we end up with something",
    "start": "589990",
    "end": "596410"
  },
  {
    "text": "like this I don't like how we how did we",
    "start": "596410",
    "end": "601990"
  },
  {
    "text": "end up like that we've now got dependency injection in our front end we've got micro services in our front",
    "start": "601990",
    "end": "608170"
  },
  {
    "text": "end I don't know how we got to this but I think what the JavaScript developers",
    "start": "608170",
    "end": "613300"
  },
  {
    "text": "did that they looked at the backend and thought all these guys know what they're doing that's there's bung in our in our JavaScript must be good but essentially",
    "start": "613300",
    "end": "620560"
  },
  {
    "text": "wide all that is doing is magic and",
    "start": "620560",
    "end": "625930"
  },
  {
    "text": "we're trying to avoid magic so especially in Norway you don't want to",
    "start": "625930",
    "end": "634450"
  },
  {
    "text": "use magic because you will upset this guy any Vikings fans good good so we",
    "start": "634450",
    "end": "645520"
  },
  {
    "text": "have some points to code by if you see a design pattern on the internet and think",
    "start": "645520",
    "end": "652180"
  },
  {
    "text": "I like to look at this design pattern don't just shove it in your application thinking yes it's good this will work",
    "start": "652180",
    "end": "658630"
  },
  {
    "text": "this will fix stuff it probably won't that's called CV driven development",
    "start": "658630",
    "end": "663660"
  },
  {
    "text": "we're trying to add points to your CV but in the long term you're making your code probably more untain about",
    "start": "663660",
    "end": "671529"
  },
  {
    "text": "don't take on dependencies that can be done in a few lines of code he remembers",
    "start": "671529",
    "end": "679250"
  },
  {
    "text": "left pad took down half the internet when some guy wrote a library which had",
    "start": "679250",
    "end": "684680"
  },
  {
    "text": "about three lines of code in if you've got three lines of code put it in your application you don't need that the same",
    "start": "684680",
    "end": "690769"
  },
  {
    "text": "for frameworks if you've got a few classes that need to do a few things you're not going to need all the bloat",
    "start": "690769",
    "end": "696829"
  },
  {
    "text": "of a framework to do that if you have an",
    "start": "696829",
    "end": "702319"
  },
  {
    "text": "IDE extension to help you write and understand your code base your code base",
    "start": "702319",
    "end": "709790"
  },
  {
    "text": "is not a simple code base something is wrong object relational mapper is my",
    "start": "709790",
    "end": "717199"
  },
  {
    "text": "favorite if your application needs a few lines a few rows of data out of the",
    "start": "717199",
    "end": "723529"
  },
  {
    "text": "database why are you installing entity framework and then hibernate to do that learn SQL",
    "start": "723529",
    "end": "731680"
  },
  {
    "text": "all you need is selectable from table where ID is one stick dapper in front of",
    "start": "731680",
    "end": "737329"
  },
  {
    "text": "that maybe and you've got an object in c-sharp if you flip that and you're",
    "start": "737329",
    "end": "742490"
  },
  {
    "text": "doing an application which is doing some intensive data crunching maybe and",
    "start": "742490",
    "end": "748129"
  },
  {
    "text": "you've got a complex domain what makes you think and the framework and then",
    "start": "748129",
    "end": "753769"
  },
  {
    "text": "hibernate is going to understand your domain more than you do learn SQL I was",
    "start": "753769",
    "end": "761300"
  },
  {
    "text": "at a job a while ago and they used entity framework I managed to avoid",
    "start": "761300",
    "end": "766939"
  },
  {
    "text": "using entity framework because I'd heard lots of bad stories about it but they were using it and they had this query",
    "start": "766939",
    "end": "773569"
  },
  {
    "text": "and it was taking four minutes to run this query so it seems a long time",
    "start": "773569",
    "end": "780050"
  },
  {
    "text": "that's it's gonna have a look delve under the hood and see what entity framework is producing it was producing",
    "start": "780050",
    "end": "786139"
  },
  {
    "text": "this pretty nice huh so I rewrote that query",
    "start": "786139",
    "end": "794899"
  },
  {
    "text": "using SQL and using dapper about four minutes became four seconds learn SQL",
    "start": "794899",
    "end": "804839"
  },
  {
    "text": "please another point an old quote but always a good one",
    "start": "804839",
    "end": "810830"
  },
  {
    "text": "always code is if the guy who ends up maintaining your code will be a violent psychopath he knows where you live this",
    "start": "810830",
    "end": "817529"
  },
  {
    "text": "is an old quote but very very good if you have to explain the intricacies of",
    "start": "817529",
    "end": "822810"
  },
  {
    "text": "your codebase through junior developers now you have to stand on one leg jump to",
    "start": "822810",
    "end": "828240"
  },
  {
    "text": "the left jump to the right to make it work alarm bells should be ringing so today",
    "start": "828240",
    "end": "836910"
  },
  {
    "text": "we are going to go through a few demos we're going to start off with a traditional solid layered web",
    "start": "836910",
    "end": "844230"
  },
  {
    "text": "application that hopefully everybody recognizes well get on their news mediator library which will allow us to",
    "start": "844230",
    "end": "851610"
  },
  {
    "text": "consolidate our dependencies and our behavior in our application once we've",
    "start": "851610",
    "end": "857040"
  },
  {
    "text": "done that we're going to remove mediator because we don't need that dependency",
    "start": "857040",
    "end": "862079"
  },
  {
    "text": "and then our final solution will be a functional approach we will remove our",
    "start": "862079",
    "end": "869399"
  },
  {
    "text": "ioc containers and are mocking libraries",
    "start": "869399",
    "end": "873589"
  },
  {
    "text": "so demo time now there's quite a lot of code in these projects and chrissy",
    "start": "874970",
    "end": "882829"
  },
  {
    "text": "tweeted me saying why would i want to sugarcoat things the biggest problem in development in",
    "start": "882829",
    "end": "888329"
  },
  {
    "text": "these days these demos that contain only 10% of the code you will need for a production ready version so this code is",
    "start": "888329",
    "end": "894360"
  },
  {
    "text": "a fully running API which returns films so we're going to go through a lot of",
    "start": "894360",
    "end": "899610"
  },
  {
    "text": "the code so hopefully you will enjoy it",
    "start": "899610",
    "end": "904610"
  },
  {
    "text": "okay so we have our traditional project does",
    "start": "907579",
    "end": "914830"
  },
  {
    "text": "everybody recognize the controllers repository services kind of design so if",
    "start": "914830",
    "end": "921580"
  },
  {
    "text": "we look at our film controller we have a",
    "start": "921580",
    "end": "927100"
  },
  {
    "text": "film service injected into it we then have our route which goes and gets an",
    "start": "927100",
    "end": "933459"
  },
  {
    "text": "ienumerable of films this returns the film service dot lists films if we look",
    "start": "933459",
    "end": "942370"
  },
  {
    "text": "at that this returns what the film repository returns if we go and look at",
    "start": "942370",
    "end": "948370"
  },
  {
    "text": "that the demo purposes it returns an in-memory list of films obviously in",
    "start": "948370",
    "end": "954279"
  },
  {
    "text": "reality this would be some sort of database lookup if we then go and look",
    "start": "954279",
    "end": "961899"
  },
  {
    "text": "at our film get by ID again it calls the film service passes the ID from the root",
    "start": "961899",
    "end": "969070"
  },
  {
    "text": "if the film is null it returns a 404 otherwise it returns the film if we go",
    "start": "969070",
    "end": "976120"
  },
  {
    "text": "and look at our this film by ID method you'll notice it uses some dependencies",
    "start": "976120",
    "end": "983050"
  },
  {
    "text": "which were injected into the service so it uses a film repository to go and get",
    "start": "983050",
    "end": "988779"
  },
  {
    "text": "the film by ID the demo purposes we just returned a film object then uses the",
    "start": "988779",
    "end": "995980"
  },
  {
    "text": "director service to go and get the director for the film it uses a cast member service dependency to go and get",
    "start": "995980",
    "end": "1002250"
  },
  {
    "text": "the casts for this film it signs the properties and returns the film creating",
    "start": "1002250",
    "end": "1010860"
  },
  {
    "text": "a film so we check that our validation has passed otherwise we return a bad",
    "start": "1010860",
    "end": "1016260"
  },
  {
    "text": "request then it goes and cools the film service not create film if that throws",
    "start": "1016260",
    "end": "1023010"
  },
  {
    "text": "for any reason we return a 403 otherwise we return a 201 if we go and look at the",
    "start": "1023010",
    "end": "1030000"
  },
  {
    "text": "create film method this has a permission service dependency this checks if the",
    "start": "1030000",
    "end": "1037620"
  },
  {
    "text": "user is valid if it's not it throws otherwise it does some special Megacorp business",
    "start": "1037620",
    "end": "1043230"
  },
  {
    "text": "validation otherwise it passes it down to the repository and saved it to the database",
    "start": "1043230",
    "end": "1050090"
  },
  {
    "text": "similarly with updating a film we have an ID of the film it's going to update checks whether the model state is okay",
    "start": "1050090",
    "end": "1058040"
  },
  {
    "text": "if the film service Update film throws it will return a 403 otherwise it will",
    "start": "1058040",
    "end": "1065160"
  },
  {
    "text": "return a 204 if we look at the update film again it checks is that a valid",
    "start": "1065160",
    "end": "1072630"
  },
  {
    "text": "user do some special business validation use the repository to go and get that",
    "start": "1072630",
    "end": "1078990"
  },
  {
    "text": "film update that film with the incoming films properties and then pass that to",
    "start": "1078990",
    "end": "1084540"
  },
  {
    "text": "the repository to update the database same with the delete method passes it to",
    "start": "1084540",
    "end": "1092970"
  },
  {
    "text": "the film service turns a 403 if throws otherwise a 204 that also does a valid",
    "start": "1092970",
    "end": "1100260"
  },
  {
    "text": "user check otherwise it passes it to the repository everybody happy with that so",
    "start": "1100260",
    "end": "1109860"
  },
  {
    "text": "to test something like this what we tend to do is have something that looks like",
    "start": "1109860",
    "end": "1117929"
  },
  {
    "text": "this so our first test should get list of films this goes and gets an HTTP",
    "start": "1117929",
    "end": "1124350"
  },
  {
    "text": "client it takes an optional film service",
    "start": "1124350",
    "end": "1129360"
  },
  {
    "text": "as a method argument and it says if that's know create a fake instance of",
    "start": "1129360",
    "end": "1136710"
  },
  {
    "text": "that film service if the film service lists films is called make sure it",
    "start": "1136710",
    "end": "1142350"
  },
  {
    "text": "returns an array of films with Goodfellas in it if the film service",
    "start": "1142350",
    "end": "1147630"
  },
  {
    "text": "lists film by ID is called return a film with Blade Runner we then create an",
    "start": "1147630",
    "end": "1154260"
  },
  {
    "text": "in-memory webserver we register our dependencies we set up MVC we set up our",
    "start": "1154260",
    "end": "1162059"
  },
  {
    "text": "validation and we return our client we",
    "start": "1162059",
    "end": "1167490"
  },
  {
    "text": "then go and execute a request to go and get some films we then read the body back and then we assert that Goodfellas",
    "start": "1167490",
    "end": "1174030"
  },
  {
    "text": "was returned",
    "start": "1174030",
    "end": "1177080"
  },
  {
    "text": "same with should get film by ID we're gonna create the client we execute",
    "start": "1179790",
    "end": "1185380"
  },
  {
    "text": "request for film ID one and we assert the Blade Runner has come back we then",
    "start": "1185380",
    "end": "1192730"
  },
  {
    "text": "do a test for a 404 so if the film is returned as null we get a 404 so we",
    "start": "1192730",
    "end": "1200260"
  },
  {
    "text": "create a fake we tell that fake to return null if number one is passed in we get our client we execute a request",
    "start": "1200260",
    "end": "1208530"
  },
  {
    "text": "and we get a 404 back creating a film we",
    "start": "1208530",
    "end": "1214270"
  },
  {
    "text": "do a check to see if we get a 400 we create a client we create a film with an",
    "start": "1214270",
    "end": "1219640"
  },
  {
    "text": "MD name because our validation is going to be checking that we've got a name we execute that post and we get a 400 back",
    "start": "1219640",
    "end": "1227590"
  },
  {
    "text": "so this is checking that our controller code is doing these checks inside them",
    "start": "1227590",
    "end": "1234210"
  },
  {
    "text": "we then have a test to check that a 403 is returned when an invalid user tries",
    "start": "1234210",
    "end": "1239470"
  },
  {
    "text": "to create a film again we create our fake we tell the fake that when a create",
    "start": "1239470",
    "end": "1244810"
  },
  {
    "text": "film is called and an instance of film is passed in we're going to ignore it",
    "start": "1244810",
    "end": "1250420"
  },
  {
    "text": "but we're going to tell it to throw an invalid operation exception so we get",
    "start": "1250420",
    "end": "1256480"
  },
  {
    "text": "the client we pass in a film with a name so it passes our validation we post that it throws and we check we get a 403 in",
    "start": "1256480",
    "end": "1264880"
  },
  {
    "text": "return if everything is okay we should get a 201 in response the same for",
    "start": "1264880",
    "end": "1273250"
  },
  {
    "text": "updating a film as before with the post create an MD name do a put check we get",
    "start": "1273250",
    "end": "1279190"
  },
  {
    "text": "a 400 same with throwing an exception if",
    "start": "1279190",
    "end": "1286360"
  },
  {
    "text": "we update a film with an ID of 1 we make a request with a valid film of ib 1 we",
    "start": "1286360",
    "end": "1291610"
  },
  {
    "text": "should get a 403 in return and if all is",
    "start": "1291610",
    "end": "1297130"
  },
  {
    "text": "well we get a 204 and the same with deleting for everything is OK we get a",
    "start": "1297130",
    "end": "1302650"
  },
  {
    "text": "204 if we tell our fake film service to throw when delete film is called",
    "start": "1302650",
    "end": "1308530"
  },
  {
    "text": "we get a 403 bag we can also do some tests maybe for the film service itself",
    "start": "1308530",
    "end": "1315720"
  },
  {
    "text": "we create a fake into the film repository we're going get in the film service by passing in fake film",
    "start": "1315720",
    "end": "1325300"
  },
  {
    "text": "repository direct the service cast member service etc etc we own create our",
    "start": "1325300",
    "end": "1330490"
  },
  {
    "text": "system under test which is our film service we then execute list films and",
    "start": "1330490",
    "end": "1336790"
  },
  {
    "text": "we knee then check that list films on the repository was called there's some",
    "start": "1336790",
    "end": "1342450"
  },
  {
    "text": "reasons why you might do that I think you probably want to do some integration tests on your repository itself this",
    "start": "1342450",
    "end": "1351490"
  },
  {
    "text": "doesn't you know it doesn't hinder it in any way but I think there's probably better ways to test but that's hopefully",
    "start": "1351490",
    "end": "1357940"
  },
  {
    "text": "some sort of application that you guys and girls recognize so what we're going",
    "start": "1357940",
    "end": "1365410"
  },
  {
    "text": "to do now is move to a mediator design and this time we arrange our project",
    "start": "1365410",
    "end": "1374260"
  },
  {
    "text": "structure is slightly different we use a features folder so all our films logic",
    "start": "1374260",
    "end": "1380350"
  },
  {
    "text": "queries etc go under films anything to do what directors and so on and so on so",
    "start": "1380350",
    "end": "1387240"
  },
  {
    "text": "here we have our films controller under our films folder we then have our create",
    "start": "1387240",
    "end": "1393040"
  },
  {
    "text": "film delete film etc under folders there",
    "start": "1393040",
    "end": "1398160"
  },
  {
    "text": "what we inject in our film controller here is a mediator and I mediator instead of a I film service if we look",
    "start": "1398940",
    "end": "1407260"
  },
  {
    "text": "at our routes to get the films we create a list films message we then send that",
    "start": "1407260",
    "end": "1414160"
  },
  {
    "text": "to mediator a mediator knows it's going to return an ienumerable of film now",
    "start": "1414160",
    "end": "1423190"
  },
  {
    "text": "mediator works in the way that you have a message and a message Handler and your",
    "start": "1423190",
    "end": "1429490"
  },
  {
    "text": "message handler is the single responsibility to return whatever is",
    "start": "1429490",
    "end": "1434530"
  },
  {
    "text": "defined so if we go and look at our list films handler",
    "start": "1434530",
    "end": "1440700"
  },
  {
    "text": "that's it it's a class whose responsibility is to return an",
    "start": "1441150",
    "end": "1448470"
  },
  {
    "text": "ienumerable of film before we had our controller our service our repo this is",
    "start": "1448470",
    "end": "1455400"
  },
  {
    "text": "all we needed it to return in reality this would have some sort of sequel connection or whatever and return the",
    "start": "1455400",
    "end": "1462510"
  },
  {
    "text": "films but for our demo purposes this is what it's doing in our startup class we",
    "start": "1462510",
    "end": "1469020"
  },
  {
    "text": "would register that this film's message and this film's message handler go together and our ioc container will",
    "start": "1469020",
    "end": "1476160"
  },
  {
    "text": "resolve all that for us the same with getting a film by ID we list we create",
    "start": "1476160",
    "end": "1483780"
  },
  {
    "text": "the list films by ID message passing the ID send it to mediator and again if the",
    "start": "1483780",
    "end": "1490020"
  },
  {
    "text": "film returned is null we return a 404 otherwise we return the film if we go",
    "start": "1490020",
    "end": "1497250"
  },
  {
    "text": "and look our handler for that you can see we've got a few more dependencies we",
    "start": "1497250",
    "end": "1505950"
  },
  {
    "text": "have a list film by ID query I get director by ID query and get cast by",
    "start": "1505950",
    "end": "1513090"
  },
  {
    "text": "film ID query but we don't inject any permissions service because we don't",
    "start": "1513090",
    "end": "1519990"
  },
  {
    "text": "need it in this class but if you look at the handle method it's exactly the same",
    "start": "1519990",
    "end": "1526170"
  },
  {
    "text": "as we had before it goes and gets the film it goes and gets the director it",
    "start": "1526170",
    "end": "1533820"
  },
  {
    "text": "goes and gets the cast it assigns it to the film and we return the film so",
    "start": "1533820",
    "end": "1540090"
  },
  {
    "text": "nothing's really changed there we've just consolidated into classes the same",
    "start": "1540090",
    "end": "1548429"
  },
  {
    "text": "with a post we check that the model state is okay if it's not we return the",
    "start": "1548429",
    "end": "1554580"
  },
  {
    "text": "400 otherwise we create a create film message we send that to mediator if that",
    "start": "1554580",
    "end": "1560429"
  },
  {
    "text": "throws we return a 403 otherwise we return a 201 the same as before if we",
    "start": "1560429",
    "end": "1566160"
  },
  {
    "text": "look at our create film message handler this injects an i valid user query",
    "start": "1566160",
    "end": "1572580"
  },
  {
    "text": "object but the handle method is the same it checks if the valid you can check if the",
    "start": "1572580",
    "end": "1579480"
  },
  {
    "text": "user is valid if not it throws otherwise it does it's special Megacorp business",
    "start": "1579480",
    "end": "1584610"
  },
  {
    "text": "validation and then writes to the database the only slight difference is it returns a unit mediator doesn't have",
    "start": "1584610",
    "end": "1592289"
  },
  {
    "text": "the concept of void it uses unit to represent a void",
    "start": "1592289",
    "end": "1597330"
  },
  {
    "text": "it always wants you to return something",
    "start": "1597330",
    "end": "1600980"
  },
  {
    "text": "same with a put logic is the same but we create an update fill message we passed",
    "start": "1607130",
    "end": "1612630"
  },
  {
    "text": "the ID we passed the film if it throws we return 403 otherwise of 204 we inject",
    "start": "1612630",
    "end": "1623340"
  },
  {
    "text": "I'll list film by ID query and valid user query objects is the user valid do",
    "start": "1623340",
    "end": "1628950"
  },
  {
    "text": "some business validation go and get that film by its ID which is in our message",
    "start": "1628950",
    "end": "1634460"
  },
  {
    "text": "we update the existing film we write to the database with a new film and return",
    "start": "1634460",
    "end": "1642080"
  },
  {
    "text": "in the same with the delete so how do we",
    "start": "1642080",
    "end": "1649110"
  },
  {
    "text": "test something like that we have our",
    "start": "1649110",
    "end": "1654480"
  },
  {
    "text": "features folder still in our test project we have our test class we still",
    "start": "1654480",
    "end": "1661200"
  },
  {
    "text": "have our test that says should get a list of films but here we fake a mediator we say when our fake mediator",
    "start": "1661200",
    "end": "1669659"
  },
  {
    "text": "dot send method is called with a list film's message return an array of films",
    "start": "1669659",
    "end": "1677220"
  },
  {
    "text": "which is good fella's on it we go and get the HTTP client we execute the",
    "start": "1677220",
    "end": "1684450"
  },
  {
    "text": "request and we check their good fella's is returned in the response same width",
    "start": "1684450",
    "end": "1690780"
  },
  {
    "text": "should get film by ID we create a fake mediator again we say when dots and is",
    "start": "1690780",
    "end": "1696659"
  },
  {
    "text": "called with a-list films by ID message it returns Blade Runner we execute the",
    "start": "1696659",
    "end": "1702929"
  },
  {
    "text": "request and we check their response the same again for 404 we tell it to",
    "start": "1702929",
    "end": "1712740"
  },
  {
    "text": "return a null when at list films by OD messages pass to it we then check we get",
    "start": "1712740",
    "end": "1719370"
  },
  {
    "text": "before I 4 on response the same for",
    "start": "1719370",
    "end": "1725539"
  },
  {
    "text": "creating a film we check that validation fails and we should get a 400 a response",
    "start": "1725539",
    "end": "1733820"
  },
  {
    "text": "but everything is pretty much the same as before we've consolidated our classes",
    "start": "1733820",
    "end": "1739529"
  },
  {
    "text": "we can still fake mediate if we have to and we can check our responses so now",
    "start": "1739529",
    "end": "1749279"
  },
  {
    "text": "we've consolidated our classes we can",
    "start": "1749279",
    "end": "1754799"
  },
  {
    "text": "remove mediator because it's a dependency that we don't need what it's doing can be written in our own code so",
    "start": "1754799",
    "end": "1764429"
  },
  {
    "text": "if we go and look at our films controller now instead of injecting an",
    "start": "1764429",
    "end": "1771269"
  },
  {
    "text": "eye mediator it's injecting a handler we",
    "start": "1771269",
    "end": "1776549"
  },
  {
    "text": "go and get our list of films but this time we create a list films command it could be lists films message if you",
    "start": "1776549",
    "end": "1783059"
  },
  {
    "text": "like I called it come on you know naming is hard but we pass our command to the",
    "start": "1783059",
    "end": "1790799"
  },
  {
    "text": "handler we say to the handler we're gonna pass you a list films command and",
    "start": "1790799",
    "end": "1797399"
  },
  {
    "text": "we expect an ienumerable of films in return if we go and look at that what",
    "start": "1797399",
    "end": "1806610"
  },
  {
    "text": "this is doing it's similar to what mediator was doing it's essentially finding a handler for the types as",
    "start": "1806610",
    "end": "1816659"
  },
  {
    "text": "startup we register these handlers like we would do with mediator so this I knew Miraval of I command handler is injected",
    "start": "1816659",
    "end": "1823289"
  },
  {
    "text": "into this class we just said we want lists films command so it says first or",
    "start": "1823289",
    "end": "1830519"
  },
  {
    "text": "default where the generic argument is of type T so it should get our list films command handler if that's no throw but",
    "start": "1830519",
    "end": "1839519"
  },
  {
    "text": "otherwise how don't execute and then cast the response back to an ienumerable of film okay so",
    "start": "1839519",
    "end": "1849530"
  },
  {
    "text": "if we go and look but it's exactly the same as before it returns our array of",
    "start": "1849530",
    "end": "1858830"
  },
  {
    "text": "films but we've managed to reduce our dependencies",
    "start": "1858830",
    "end": "1864460"
  },
  {
    "text": "the same with our films by ID passes it to the handler if it returns now we get",
    "start": "1869340",
    "end": "1876990"
  },
  {
    "text": "a 404 in response otherwise a 200 if we look at the handler for that again we",
    "start": "1876990",
    "end": "1884100"
  },
  {
    "text": "inject our dependencies to get the film we have our director dependencies and we",
    "start": "1884100",
    "end": "1891690"
  },
  {
    "text": "have our cast members queries but the logic in the method is the same as",
    "start": "1891690",
    "end": "1898320"
  },
  {
    "text": "before we go and get the film if it's now we return otherwise we get the director get the cast members sign up to",
    "start": "1898320",
    "end": "1905430"
  },
  {
    "text": "the film and return same with the post",
    "start": "1905430",
    "end": "1910980"
  },
  {
    "text": "we check our validation we create we create a create film command and pass it",
    "start": "1910980",
    "end": "1917940"
  },
  {
    "text": "the film that goes into our handler if it throws we catch it return a 403",
    "start": "1917940",
    "end": "1923460"
  },
  {
    "text": "otherwise a 201 but the logic is the same as before checks the users valid",
    "start": "1923460",
    "end": "1930510"
  },
  {
    "text": "Dassin validation saves it to the database and we can test this in the",
    "start": "1930510",
    "end": "1936480"
  },
  {
    "text": "same way as before",
    "start": "1936480",
    "end": "1939620"
  },
  {
    "text": "so I'd heard people talking about losing their ioc containers and mocking",
    "start": "1948020",
    "end": "1954920"
  },
  {
    "text": "libraries and i couldn't quite grasp it i was to scratch my head i don't know how they're gonna do this this is gonna",
    "start": "1954920",
    "end": "1961220"
  },
  {
    "text": "end up quite messy and that was until i read a blog post by Mike Hadley you",
    "start": "1961220",
    "end": "1967520"
  },
  {
    "text": "might know Mike Hadlow from easing that queue he wrote a library which talks to RabbitMQ I think he runs a UK user group",
    "start": "1967520",
    "end": "1975850"
  },
  {
    "text": "but he gave these examples he have three",
    "start": "1975850",
    "end": "1982010"
  },
  {
    "text": "interfaces the first one I customer data has get customers for customer report",
    "start": "1982010",
    "end": "1988520"
  },
  {
    "text": "which returns an ienumerable of customers have an eye report builder",
    "start": "1988520",
    "end": "1993640"
  },
  {
    "text": "which has a create customer report takes in a customer returns a report we have",
    "start": "1993640",
    "end": "2000910"
  },
  {
    "text": "an eye email interface with a send method which takes a to address and a body the implementation of that for demo",
    "start": "2000910",
    "end": "2011950"
  },
  {
    "text": "purposes as he returns some customers his report builder implementation",
    "start": "2011950",
    "end": "2018670"
  },
  {
    "text": "returns a new report uses the customer email and the report body is this is the",
    "start": "2018670",
    "end": "2025000"
  },
  {
    "text": "report body for the customer email for demo purposes his email adjust calls out",
    "start": "2025000",
    "end": "2030670"
  },
  {
    "text": "to console.writeline we then use these dependencies like so we inject them in",
    "start": "2030670",
    "end": "2040330"
  },
  {
    "text": "as we would normally in object-oriented programming our run customers report",
    "start": "2040330",
    "end": "2046510"
  },
  {
    "text": "batch method uses our dependency to get the customers it loops over them and",
    "start": "2046510",
    "end": "2052450"
  },
  {
    "text": "then uses our report builder create customer report passes in the customer to create the report and then sends the",
    "start": "2052450",
    "end": "2059080"
  },
  {
    "text": "email we were tested like this most",
    "start": "2059080",
    "end": "2065408"
  },
  {
    "text": "likely we create a mock or a fake of these dependencies we create an expected",
    "start": "2065409",
    "end": "2072669"
  },
  {
    "text": "customer object and expect the report body object we say for our fake customer",
    "start": "2072669",
    "end": "2079000"
  },
  {
    "text": "data when get customers for customer port is executed return an array of customers with our expected customer",
    "start": "2079000",
    "end": "2086030"
  },
  {
    "text": "object for a report builder fake we say when create customer report is called",
    "start": "2086030",
    "end": "2092030"
  },
  {
    "text": "passing the expected customer that we created earlier returned a new report with that expected customer objects",
    "start": "2092030",
    "end": "2098210"
  },
  {
    "text": "email and report body variable we then passed these fakes into our reporting",
    "start": "2098210",
    "end": "2103580"
  },
  {
    "text": "service that we saw before we run that method and we verify that the email was",
    "start": "2103580",
    "end": "2109880"
  },
  {
    "text": "sent now Mike proposed a new way of",
    "start": "2109880",
    "end": "2116240"
  },
  {
    "text": "doing this and it was this a static method who static everybody loves static",
    "start": "2116240",
    "end": "2127990"
  },
  {
    "text": "changes global state it's pretty horrific but actually when you start",
    "start": "2127990",
    "end": "2133940"
  },
  {
    "text": "looking at what Mike's suggesting it's actually pretty useful the only problem with static statics is when you do",
    "start": "2133940",
    "end": "2139940"
  },
  {
    "text": "mutate global State what mike has done is reduced pretty much 80% of the code",
    "start": "2139940",
    "end": "2147020"
  },
  {
    "text": "we had before but if you look at the main body of our it's doing exactly the",
    "start": "2147020",
    "end": "2154010"
  },
  {
    "text": "same instead of having a class with injected dependency we have a method with method arguments those method",
    "start": "2154010",
    "end": "2160940"
  },
  {
    "text": "arguments are funks and actions I'll get customer customers for customer",
    "start": "2160940",
    "end": "2167450"
  },
  {
    "text": "report is a func which returns an ienumerable of customers we loop over that custom those customers as before we",
    "start": "2167450",
    "end": "2174590"
  },
  {
    "text": "call create customer report which is a func which takes in a customer and returns a report and then we call send",
    "start": "2174590",
    "end": "2181340"
  },
  {
    "text": "email which is an action we can then write tests for this we create our",
    "start": "2181340",
    "end": "2189950"
  },
  {
    "text": "expected customer object we create an expected report body variable we then",
    "start": "2189950",
    "end": "2195920"
  },
  {
    "text": "assign the func we don't create any mocks or anything like that we assign",
    "start": "2195920",
    "end": "2200930"
  },
  {
    "text": "the func and say return an array with our expected customer object we assign",
    "start": "2200930",
    "end": "2207080"
  },
  {
    "text": "our create customer report func to take in a customer and return a report and passed in the expected",
    "start": "2207080",
    "end": "2213770"
  },
  {
    "text": "customers email and expected reporting we create two variables we then say in the send email",
    "start": "2213770",
    "end": "2221119"
  },
  {
    "text": "action that takes in to address and body assign those to the variables we then",
    "start": "2221119",
    "end": "2228290"
  },
  {
    "text": "execute our static method and pass in those funks and actions and we can then assert that those variables have been",
    "start": "2228290",
    "end": "2235400"
  },
  {
    "text": "assigned in the action pretty cool so",
    "start": "2235400",
    "end": "2241190"
  },
  {
    "text": "how do we do something like that in a web application well hopefully I can",
    "start": "2241190",
    "end": "2247550"
  },
  {
    "text": "show you now so again we still have our",
    "start": "2247550",
    "end": "2255220"
  },
  {
    "text": "features folders we still have our film controller but nothing is injected what",
    "start": "2255220",
    "end": "2266930"
  },
  {
    "text": "we have is something that still gets our handler we execute our Handler and",
    "start": "2266930",
    "end": "2273770"
  },
  {
    "text": "return what it gives us that handler not",
    "start": "2273770",
    "end": "2278839"
  },
  {
    "text": "sure if you can see returns an ienumerable of film our list film by ID",
    "start": "2278839",
    "end": "2286730"
  },
  {
    "text": "is still at handler that takes in an ID our logic says if that is null we return",
    "start": "2286730",
    "end": "2292849"
  },
  {
    "text": "a 404 otherwise we return okay and that film the same with a post the logic is",
    "start": "2292849",
    "end": "2299570"
  },
  {
    "text": "still the same we check that the validation has passed if it hasn't we return a 400 otherwise we execute the",
    "start": "2299570",
    "end": "2306980"
  },
  {
    "text": "handler and passing the film if that throws we return a 403 otherwise we return a 201 now if we go and look and",
    "start": "2306980",
    "end": "2315109"
  },
  {
    "text": "what these handlers actually uh-huh is",
    "start": "2315109",
    "end": "2320450"
  },
  {
    "text": "there are statics our lists film handler is a funk which",
    "start": "2320450",
    "end": "2327270"
  },
  {
    "text": "should return an irony Miraval a film we then have a constructor here which says",
    "start": "2327270",
    "end": "2333990"
  },
  {
    "text": "list films handler has nothing to pass it in but we expect an ienumerable of film in response and we passed that",
    "start": "2333990",
    "end": "2340890"
  },
  {
    "text": "across to our list films route handle method if we look at that it's the same",
    "start": "2340890",
    "end": "2347940"
  },
  {
    "text": "as before we have a handle method which returns our an ienumerable film we just",
    "start": "2347940",
    "end": "2354690"
  },
  {
    "text": "have this slightly different looking class and sets up the phones imagine this as your startup class where you",
    "start": "2354690",
    "end": "2362099"
  },
  {
    "text": "wire up all your dependencies our list film by ID handler is a func which takes",
    "start": "2362099",
    "end": "2369359"
  },
  {
    "text": "an end and expects a film in return so we assign that here we're taking the",
    "start": "2369359",
    "end": "2376020"
  },
  {
    "text": "film ID and we pass it to a handle method which requires a film ID it",
    "start": "2376020",
    "end": "2385320"
  },
  {
    "text": "returned it requires a func which returns a film by ID it returns it",
    "start": "2385320",
    "end": "2391020"
  },
  {
    "text": "requires a func which takes in an int and returns a director and it takes in a",
    "start": "2391020",
    "end": "2396810"
  },
  {
    "text": "funk which takes in an int and returns some cast members we can set that up",
    "start": "2396810",
    "end": "2402240"
  },
  {
    "text": "here for demo purposes we do it in memory but in theory you could write",
    "start": "2402240",
    "end": "2407460"
  },
  {
    "text": "some SQL to do that here the same for the update film handler that takes in a",
    "start": "2407460",
    "end": "2414480"
  },
  {
    "text": "film ID and a film we pass it across to our handle method that requires the film",
    "start": "2414480",
    "end": "2420330"
  },
  {
    "text": "ID the film a func which returns a boolean to say whether the user is valid",
    "start": "2420330",
    "end": "2425640"
  },
  {
    "text": "or not for demo purposes we are using this highly efficient code here and it",
    "start": "2425640",
    "end": "2431910"
  },
  {
    "text": "also requires a list film by ID func which we've got here and you'll notice",
    "start": "2431910",
    "end": "2436980"
  },
  {
    "text": "we've also used it up here so what we could do is use that commented code up",
    "start": "2436980",
    "end": "2443430"
  },
  {
    "text": "there to share that share that logic the",
    "start": "2443430",
    "end": "2448589"
  },
  {
    "text": "same with the create and the delete handlers they also use the valid user check we could take that code",
    "start": "2448589",
    "end": "2456900"
  },
  {
    "text": "that's used in three places and put it somewhere central and what we can do is",
    "start": "2456900",
    "end": "2465960"
  },
  {
    "text": "tidy that up a bit rather than having scary-looking funks and actions and we can use delegates and",
    "start": "2465960",
    "end": "2479970"
  },
  {
    "text": "it makes things look a bit prettier doesn't it our list film by ID root",
    "start": "2479970",
    "end": "2485970"
  },
  {
    "text": "which has three four dependencies rather than writing SQL in here and using",
    "start": "2485970",
    "end": "2493380"
  },
  {
    "text": "duplicated code we've separated they're separated those in two classes",
    "start": "2493380",
    "end": "2499650"
  },
  {
    "text": "themselves so we have a list films by ID query which we can reuse we can use that",
    "start": "2499650",
    "end": "2507690"
  },
  {
    "text": "in the update film here and we can use it there same with our valid user check",
    "start": "2507690",
    "end": "2515970"
  },
  {
    "text": "we've now got it in a class which we can call execute on and it's still execute",
    "start": "2515970",
    "end": "2521819"
  },
  {
    "text": "the same code so how do we test something like this well what we do is",
    "start": "2521819",
    "end": "2530489"
  },
  {
    "text": "we still have our features folders we have our tests we still creates our",
    "start": "2530489",
    "end": "2536759"
  },
  {
    "text": "in-memory webserver we set up MVC our validation create the HTTP client and",
    "start": "2536759",
    "end": "2544710"
  },
  {
    "text": "return so we have our test should return 400 on invalid data what we're doing",
    "start": "2544710",
    "end": "2554279"
  },
  {
    "text": "here is we're not using any mocking libraries we are assigning that funk and",
    "start": "2554279",
    "end": "2560249"
  },
  {
    "text": "we are saying create film handler takes in a film we call our create film root",
    "start": "2560249",
    "end": "2565559"
  },
  {
    "text": "dot handle method which takes in that film but it also requires a valid user delegate something it returns a boolean",
    "start": "2565559",
    "end": "2573440"
  },
  {
    "text": "fraud test we're just saying you know not users valid and we return a true we then pass",
    "start": "2573440",
    "end": "2583859"
  },
  {
    "text": "in a film with no name so our validation will fail we execute that request and we",
    "start": "2583859",
    "end": "2589920"
  },
  {
    "text": "check then we've 400 and responds the same with the 403",
    "start": "2589920",
    "end": "2596430"
  },
  {
    "text": "check I'll create film handler takes in a film and passes it to the create film",
    "start": "2596430",
    "end": "2601770"
  },
  {
    "text": "route handle method takes in the film but this time we're going to say no user",
    "start": "2601770",
    "end": "2607620"
  },
  {
    "text": "it's not valid we know that the code in there is going to throw so therefore we should get a 403 in return same with if",
    "start": "2607620",
    "end": "2619470"
  },
  {
    "text": "everything is okay we assign our create film handler takes in a film we say yep the user is valid we pass in a valid",
    "start": "2619470",
    "end": "2626370"
  },
  {
    "text": "film with a valid name we post that across and we check that we get 201 in response I should get film by ID this is",
    "start": "2626370",
    "end": "2638340"
  },
  {
    "text": "the one that took in three or four dependencies before we assign the func takes in an ID which then passes it to",
    "start": "2638340",
    "end": "2645450"
  },
  {
    "text": "our list film by ID root handle method that requires an ID a list film by ID",
    "start": "2645450",
    "end": "2656180"
  },
  {
    "text": "delegate here we assign Bladerunner it also requires something that returns",
    "start": "2656180",
    "end": "2661440"
  },
  {
    "text": "a director and something that returns cast members we're not creating any",
    "start": "2661440",
    "end": "2666510"
  },
  {
    "text": "fates here we're just assigning funks we're assigning delegates actually we're",
    "start": "2666510",
    "end": "2673950"
  },
  {
    "text": "using c-sharp two or three code nothing new nothing fancy",
    "start": "2673950",
    "end": "2680300"
  },
  {
    "text": "back to basics but we can execute a request and we can check the Bladerunner",
    "start": "2680300",
    "end": "2685680"
  },
  {
    "text": "is returned in the same with the 404 we",
    "start": "2685680",
    "end": "2692130"
  },
  {
    "text": "can say make this return null if that",
    "start": "2692130",
    "end": "2697500"
  },
  {
    "text": "returns no we know our controller is going to check for that and therefore we should get a 404 so now we've hopefully",
    "start": "2697500",
    "end": "2705300"
  },
  {
    "text": "improved our architecture there's less magic involved but we still have our web",
    "start": "2705300",
    "end": "2711030"
  },
  {
    "text": "framework and we have something that looks like this",
    "start": "2711030",
    "end": "2718279"
  },
  {
    "text": "we have attributes bloody everywhere what are they doing okay we can infer",
    "start": "2718609",
    "end": "2724859"
  },
  {
    "text": "what it's doing the route okay that's a string that defines the route allow",
    "start": "2724859",
    "end": "2730049"
  },
  {
    "text": "anonymous I assume is allowing anonymous users but what's that doing underneath is it inspecting headers or objects I",
    "start": "2730049",
    "end": "2738599"
  },
  {
    "text": "don't know we then have to give an attribute to say this is a controller well we've told it's a controller here",
    "start": "2738599",
    "end": "2744869"
  },
  {
    "text": "why do we need more attributes here what is this magic doing creating a film okay",
    "start": "2744869",
    "end": "2753270"
  },
  {
    "text": "it accepts a post but what is that doing underneath oh it produces JSON and it",
    "start": "2753270",
    "end": "2760440"
  },
  {
    "text": "consumes JSON what's this doing it also returns a to i1 if everything is okay",
    "start": "2760440",
    "end": "2766920"
  },
  {
    "text": "what does produces response type dude I don't know one of my developers has come",
    "start": "2766920",
    "end": "2774210"
  },
  {
    "text": "along said all I need to do some special logic for this method and put an attribute on there what is that doing so",
    "start": "2774210",
    "end": "2782000"
  },
  {
    "text": "in the words of Mick Dundee and that's not a framework this is a framework so",
    "start": "2782000",
    "end": "2793549"
  },
  {
    "text": "anyone who used Nancy before yep so a while ago I decided to write Carter it",
    "start": "2793549",
    "end": "2803549"
  },
  {
    "text": "was originally called Botwin but I confuse people and it uses the same",
    "start": "2803549",
    "end": "2809880"
  },
  {
    "text": "routing style as Nancy but Nancy uses Owen so it can run on multiple platforms",
    "start": "2809880",
    "end": "2815760"
  },
  {
    "text": "multiple hosts but the problem with Owen and asp.net core now is performance a",
    "start": "2815760",
    "end": "2821839"
  },
  {
    "text": "request comes in it goes across to Owen which converts the HTTP context to a",
    "start": "2821839",
    "end": "2827880"
  },
  {
    "text": "dictionary Nancy takes that dictionary creates its own request object passes it through to the module comes back out as",
    "start": "2827880",
    "end": "2835020"
  },
  {
    "text": "a response updates the dictionary updates the context and back out we go there's a performance problem so I",
    "start": "2835020",
    "end": "2843059"
  },
  {
    "text": "thought I wonder if we can take the routing middleware in asp.net core and",
    "start": "2843059",
    "end": "2849089"
  },
  {
    "text": "consolidate that into classes too to find roots in our application turns",
    "start": "2849089",
    "end": "2854549"
  },
  {
    "text": "out we could but with the same idea is Nancy Carter is explicit in what it's",
    "start": "2854549",
    "end": "2863760"
  },
  {
    "text": "doing if you need authorization authentication on your roots you can use",
    "start": "2863760",
    "end": "2871980"
  },
  {
    "text": "this dot requires authentication we don't need an attribute we can debug",
    "start": "2871980",
    "end": "2877440"
  },
  {
    "text": "that easily we can also define our",
    "start": "2877440",
    "end": "2882809"
  },
  {
    "text": "methods using the verbs in line and pass that to a method if needs be it doesn't",
    "start": "2882809",
    "end": "2888450"
  },
  {
    "text": "have to be a method it could be a funk that's all this is doing you do this don't get takes in a path and then you",
    "start": "2888450",
    "end": "2902130"
  },
  {
    "text": "can either have a request delegate or a funk which takes in a request a response object and a route data object and",
    "start": "2902130",
    "end": "2909240"
  },
  {
    "text": "expects and tasks in response so again",
    "start": "2909240",
    "end": "2925369"
  },
  {
    "text": "if we look at the logic it's exactly the same but we're doing things slightly",
    "start": "2925369",
    "end": "2932279"
  },
  {
    "text": "different more carta like we get our hand ax this returns an ienumerable a",
    "start": "2932279",
    "end": "2938549"
  },
  {
    "text": "film we then say context dot response as json passing the film's that's going to",
    "start": "2938549",
    "end": "2946380"
  },
  {
    "text": "return our films as json and return a 200 we're not doing this dot okay object",
    "start": "2946380",
    "end": "2952950"
  },
  {
    "text": "being a bit more explicit the same with this film by ID handler it takes an ID",
    "start": "2952950",
    "end": "2961880"
  },
  {
    "text": "we go and get the route data from the route we then say ID is what we want we",
    "start": "2961880",
    "end": "2967650"
  },
  {
    "text": "cast it as an integer pass that into our handler that returns a film object as",
    "start": "2967650",
    "end": "2972990"
  },
  {
    "text": "before if the film is null we return 404 otherwise we return the object is JSON",
    "start": "2972990",
    "end": "2982039"
  },
  {
    "text": "when updating a film we don't have any attributes inside a method we",
    "start": "2982039",
    "end": "2989960"
  },
  {
    "text": "explicitly say go and bind and validate the incoming request body and cast it as",
    "start": "2989960",
    "end": "2998510"
  },
  {
    "text": "a film if the validation result is invalid we set the status code to four",
    "start": "2998510",
    "end": "3004390"
  },
  {
    "text": "to two we then say use some content negotiation and write out some formatted",
    "start": "3004390",
    "end": "3011590"
  },
  {
    "text": "errors the model state equivalent errors otherwise if everything is okay go and",
    "start": "3011590",
    "end": "3017950"
  },
  {
    "text": "get the handler go and get the ID off the route and then use the result data which is our film fall is okay return of",
    "start": "3017950",
    "end": "3025840"
  },
  {
    "text": "204 otherwise return 403 the same as",
    "start": "3025840",
    "end": "3033340"
  },
  {
    "text": "before but we're being a bit more explicit in our web framework and we test it in",
    "start": "3033340",
    "end": "3041800"
  },
  {
    "text": "exactly the same way as we did with MVC we create our in-memory webserver we",
    "start": "3041800",
    "end": "3047680"
  },
  {
    "text": "assign the func we execute the request and we assert the response",
    "start": "3047680",
    "end": "3054569"
  },
  {
    "text": "so it's in homework time cui demo code",
    "start": "3063109",
    "end": "3070489"
  },
  {
    "text": "that I mentioned earlier from Mike had low is at his website go and check that out",
    "start": "3070489",
    "end": "3076299"
  },
  {
    "text": "Gregg young also did a talk called the art of destroying software",
    "start": "3076299",
    "end": "3081640"
  },
  {
    "text": "he said if you write code it takes longer than a week to rewrite your code",
    "start": "3081640",
    "end": "3088579"
  },
  {
    "text": "was not simple enough take your code delete it if it takes longer than a week",
    "start": "3088579",
    "end": "3094549"
  },
  {
    "text": "something's not right mark seaman did a similar blog post it",
    "start": "3094549",
    "end": "3100880"
  },
  {
    "text": "said solid the next step is functional and kind of highlighted similar to what I showed today and what Mike showed in",
    "start": "3100880",
    "end": "3106700"
  },
  {
    "text": "his blog post brian Giesler also said beyond solid the dependency elimination",
    "start": "3106700",
    "end": "3112670"
  },
  {
    "text": "principle try and eliminate your dependencies greg young's eight lines of",
    "start": "3112670",
    "end": "3118940"
  },
  {
    "text": "code i suggest if you don't watched it go and watch it it really is a good talk and will make you think days afterwards",
    "start": "3118940",
    "end": "3126789"
  },
  {
    "text": "dan north did a presentation at PubCon last year saying why every element of",
    "start": "3126789",
    "end": "3132380"
  },
  {
    "text": "solid is wrong so in conclusion should",
    "start": "3132380",
    "end": "3139910"
  },
  {
    "text": "you still use the layered solid approach that's entirely up to you hopefully I've",
    "start": "3139910",
    "end": "3148249"
  },
  {
    "text": "shown you something today where you thought oh that's going yeah there's always talking about try it out and see",
    "start": "3148249",
    "end": "3155719"
  },
  {
    "text": "how you get on if it does work brilliant what you can do is solve the next",
    "start": "3155719",
    "end": "3161900"
  },
  {
    "text": "problem and not worry about magic IOC and things like that thank you for your",
    "start": "3161900",
    "end": "3169729"
  },
  {
    "text": "time the code is up on github if that's where we're still pushing code cuz you",
    "start": "3169729",
    "end": "3176059"
  },
  {
    "text": "know Microsoft mm-hmm so yeah go and",
    "start": "3176059",
    "end": "3182420"
  },
  {
    "text": "check that out have a plain anyone sees Troy hunt can you tell them I've got its hat my children I've been watching a",
    "start": "3182420",
    "end": "3190670"
  },
  {
    "text": "film recently called the greatest showmen they have a song on there called the greatest show",
    "start": "3190670",
    "end": "3196760"
  },
  {
    "text": "and these thing has been brilliant this week glad I could come so I'm going to play you out that thank you for coming",
    "start": "3196760",
    "end": "3203000"
  },
  {
    "text": "[Applause]",
    "start": "3203000",
    "end": "3213570"
  },
  {
    "text": "[Music] [Applause]",
    "start": "3218930",
    "end": "3225059"
  },
  {
    "text": "[Music]",
    "start": "3234980",
    "end": "3241510"
  },
  {
    "text": "[Music]",
    "start": "3257600",
    "end": "3292300"
  },
  {
    "text": "[Music]",
    "start": "3294510",
    "end": "3304309"
  },
  {
    "text": "we do your warning [Music]",
    "start": "3305450",
    "end": "3310280"
  },
  {
    "text": "[Music]",
    "start": "3312570",
    "end": "3315839"
  }
]