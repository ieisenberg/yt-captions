[
  {
    "text": "hey everybody all right it's so great to see so many of you trying to get in here",
    "start": "2320",
    "end": "7440"
  },
  {
    "text": "there's no more seats unfortunately but squeeze down the sides and I'll I'll promise to make this as comfortable as",
    "start": "7440",
    "end": "13280"
  },
  {
    "text": "possible for you um all right we're going to talk about writing inefficient C# code i think we can all admit in here",
    "start": "13280",
    "end": "21119"
  },
  {
    "text": "at times we've written inefficient code um hopefully today I'm going to show you some of the ways you might be writing",
    "start": "21119",
    "end": "27039"
  },
  {
    "text": "code that is rather inefficient without realizing easy traps that we fall into",
    "start": "27039",
    "end": "32320"
  },
  {
    "text": "uh give you a better understanding of what's actually going on under the hood when we write some of these uh or use",
    "start": "32320",
    "end": "37600"
  },
  {
    "text": "some of these friendly extension methods in our code and then show you ultimately how to detect and solve those problems",
    "start": "37600",
    "end": "44879"
  },
  {
    "text": "uh when you have issues in say a production application as well so let's get started a little bit about me uh my",
    "start": "44879",
    "end": "50879"
  },
  {
    "text": "name is Callum White uh you can find me on various social networks at that handle there i'm still on Twitter for my",
    "start": "50879",
    "end": "56800"
  },
  {
    "text": "sins um I'm a Microsoft MVP and uh by trade I'm a net developer nowadays I run",
    "start": "56800",
    "end": "62640"
  },
  {
    "text": "a consultancy uh based out of the UK we do net and Azure solutions um called",
    "start": "62640",
    "end": "68159"
  },
  {
    "text": "Bump hence I am the chief bumpster i get to speak at lots of events uh to see um awesome people like yourselves and I",
    "start": "68159",
    "end": "74640"
  },
  {
    "text": "organize a few of my own as well so amongst writing code I get to do loads of stuff in the community which I love",
    "start": "74640",
    "end": "82320"
  },
  {
    "text": "so let's first touch on why efficiency actually matters in our applications um",
    "start": "82320",
    "end": "88080"
  },
  {
    "text": "and the word efficiency is probably going to have different meanings to different people if I've got my",
    "start": "88080",
    "end": "93280"
  },
  {
    "text": "developer manager hat on efficiency is how can a member of my team write or",
    "start": "93280",
    "end": "99600"
  },
  {
    "text": "make a new feature as quickly uh as possible so that they can move on to something else and we can ship more code",
    "start": "99600",
    "end": "104880"
  },
  {
    "text": "and we can uh we can build more money to our customers um perhaps if you're a",
    "start": "104880",
    "end": "110000"
  },
  {
    "text": "particularly uh environmentally conscious uh organization efficiency is using as minimal amount of compute as",
    "start": "110000",
    "end": "117040"
  },
  {
    "text": "possible to do as much as possible uh if you're say a financial organization",
    "start": "117040",
    "end": "122079"
  },
  {
    "text": "efficiency is making sure you're responding to um you know trade requests or anything within literally",
    "start": "122079",
    "end": "128000"
  },
  {
    "text": "milliseconds of them happening as as fast as humanly possible it means different things in",
    "start": "128000",
    "end": "134400"
  },
  {
    "text": "different uh spaces as well so uh if anyone can think back to uh the Apollo",
    "start": "134400",
    "end": "139440"
  },
  {
    "text": "rockets and when they went when we sent man to the moon those rockets had literally one megabyte of memory on",
    "start": "139440",
    "end": "146520"
  },
  {
    "text": "board i don't think there's probably anyone in this room that's working within uh a footprint or an envelope as",
    "start": "146520",
    "end": "152720"
  },
  {
    "text": "small as that nowadays uh we are absolutely spoiled with resources um",
    "start": "152720",
    "end": "158160"
  },
  {
    "text": "your laptops your your mobile phones have got more memory in them than uh sent man to the moon which is just an",
    "start": "158160",
    "end": "164239"
  },
  {
    "text": "incredible thing to think about so nowadays in the space of in in the",
    "start": "164239",
    "end": "169440"
  },
  {
    "text": ".NET space we can actually run .NET basically anywhere with with uh .NET core and beyond it's crossplatform truly",
    "start": "169440",
    "end": "176560"
  },
  {
    "text": "cross crossplatform um I've seen people running it on uh everything from a smartwatch um all the way down to like",
    "start": "176560",
    "end": "183360"
  },
  {
    "text": "you know microcontrollers and doing some really really uh interesting things with IoT so everyone's definition of what's",
    "start": "183360",
    "end": "190560"
  },
  {
    "text": "efficient and their constraints are going to differ um of course speed might",
    "start": "190560",
    "end": "196800"
  },
  {
    "text": "be your primary concern in which case you're going to be writing your code for uh as fast as possible execution without",
    "start": "196800",
    "end": "203920"
  },
  {
    "text": "necessarily worrying too much about readability and uh you know maintainability um cost is also a huge",
    "start": "203920",
    "end": "210959"
  },
  {
    "text": "concern for a lot of people be that compute needs the resources involved in building those and as I mentioned",
    "start": "210959",
    "end": "216799"
  },
  {
    "text": "environmental sustainability is a big aspect as well so regardless of what your um regardless of what your angle is",
    "start": "216799",
    "end": "225680"
  },
  {
    "text": "to wanting to write more efficient code there's plenty that we can do and the best place to start is with the the",
    "start": "225680",
    "end": "231840"
  },
  {
    "text": "really small lowhanging fruit uh items you have to find your balance here is I guess what I'm saying as with everything",
    "start": "231840",
    "end": "238239"
  },
  {
    "text": "in software it depends um if you really want to go all in and write the most",
    "start": "238239",
    "end": "243360"
  },
  {
    "text": "efficient software be my guest um but you'll probably end up with a more uh",
    "start": "243360",
    "end": "248400"
  },
  {
    "text": "unmaintainable solution we're going to talk about the easy mistakes this is the stuff that you",
    "start": "248400",
    "end": "254959"
  },
  {
    "text": "see I see on a daily basis in my work um things that people do without necessarily realizing the impact but",
    "start": "254959",
    "end": "261600"
  },
  {
    "text": "first let's talk a little bit about how .NET actually works under the hood clr",
    "start": "261600",
    "end": "266960"
  },
  {
    "text": "GIT GC WTF what are all these acronyms what do they mean well so the CLR int",
    "start": "266960",
    "end": "272720"
  },
  {
    "text": "net is the common language runtime this is effectively the set of tools that make your .NET application run they are",
    "start": "272720",
    "end": "280800"
  },
  {
    "text": "uh yeah responsible for running .NET in a variety of environments from on your uh local machine for developing and",
    "start": "280800",
    "end": "287280"
  },
  {
    "text": "debugging all the way through to in production on servers or on a phone if you're deploying onto a phone jit just",
    "start": "287280",
    "end": "294479"
  },
  {
    "text": "in time compiler um this is a feature of net because it is a compiled language that compiler needs to run and turn your",
    "start": "294479",
    "end": "301280"
  },
  {
    "text": "C# code that you've written into machine understandable code that a computer the",
    "start": "301280",
    "end": "307199"
  },
  {
    "text": "environment that you're specifically running in can understand um this means that there's you know different uh",
    "start": "307199",
    "end": "314160"
  },
  {
    "text": "different CPUs you're targeting if you're building for an Intel CPU or for a um an ARM chip uh the JIT will do",
    "start": "314160",
    "end": "320479"
  },
  {
    "text": "different things uh with that C# code to make that run and execute on that chip",
    "start": "320479",
    "end": "325680"
  },
  {
    "text": "as efficiently as possible ideally uh finally the garbage collector is uh",
    "start": "325680",
    "end": "331120"
  },
  {
    "text": "responsible for making sure the application runs smoothly and that you don't necessarily have to worry about",
    "start": "331120",
    "end": "337199"
  },
  {
    "text": "managing things like memory the garbage collector's job is to make sure the memory of the application is being used",
    "start": "337199",
    "end": "343440"
  },
  {
    "text": "as efficiently as possible um it allocates memory onto uh various parts",
    "start": "343440",
    "end": "348720"
  },
  {
    "text": "of the the heap and the uh the stack and clears that out for you so again you don't have to worry about",
    "start": "348720",
    "end": "354520"
  },
  {
    "text": "it memory management innet is a whole topic that I mean we could go into today",
    "start": "354520",
    "end": "360160"
  },
  {
    "text": "but you'd be here for about 3 hours and there's far better qualified people than me to talk about it but as a sort of",
    "start": "360160",
    "end": "365840"
  },
  {
    "text": "very high level overview uh we have these concepts uh of memory management",
    "start": "365840",
    "end": "371039"
  },
  {
    "text": "inn net we have the free memory this is the memory that's available to the application for it to um allocate to",
    "start": "371039",
    "end": "377840"
  },
  {
    "text": "processing and to to different tasks that you need to do you have your reserved memory this is memory that net",
    "start": "377840",
    "end": "383759"
  },
  {
    "text": "has allocated for your application because it believes you need it but nothing has yet been committed into that",
    "start": "383759",
    "end": "389840"
  },
  {
    "text": "memory there's nothing actually stored in it so it's using space using compute",
    "start": "389840",
    "end": "395360"
  },
  {
    "text": "but it's not actually doing anything with that you then have your committed memory this is the memory that actually has data written to it that your",
    "start": "395360",
    "end": "401600"
  },
  {
    "text": "application is going to use and that uh data is stored across three different",
    "start": "401600",
    "end": "407600"
  },
  {
    "text": "they're called generations um areas of memory gen 0 1 and two and effectively",
    "start": "407600",
    "end": "414319"
  },
  {
    "text": "net will manage uh where that memory is stored based on the uh frequency of its",
    "start": "414319",
    "end": "420400"
  },
  {
    "text": "use and and the type of object that it actually is so the gen zero uh the gen",
    "start": "420400",
    "end": "426639"
  },
  {
    "text": "zero heap is effectively all of your short-lived items things that are just popped into memory quickly uh and then",
    "start": "426639",
    "end": "432880"
  },
  {
    "text": "disposed of very quickly your gen one heap is those sort of midterm uh objects",
    "start": "432880",
    "end": "438400"
  },
  {
    "text": "and those live as sort of an intermediate between the longived and the short-lived objects and then finally",
    "start": "438400",
    "end": "443840"
  },
  {
    "text": "gen two is your longived objects we're talking things like statics in C that",
    "start": "443840",
    "end": "449440"
  },
  {
    "text": "don't disappear or uh constants even um so it's really important to understand",
    "start": "449440",
    "end": "454880"
  },
  {
    "text": "these because net the garbage collector is constantly trying to move objects between these different heaps to make",
    "start": "454880",
    "end": "462000"
  },
  {
    "text": "sure that uh it can free up one of these generations and the reason we've split it into three there is so that the",
    "start": "462000",
    "end": "467680"
  },
  {
    "text": "garbage collector can clear those out easily in theory gen zero should be being cleared fairly frequently it's",
    "start": "467680",
    "end": "473759"
  },
  {
    "text": "stuff that doesn't need to hang around all the way to gen two which should be something that you actually need to hold on to so this is what the garbage",
    "start": "473759",
    "end": "480479"
  },
  {
    "text": "collector does its job is to clear and move objects between all of those different",
    "start": "480479",
    "end": "487280"
  },
  {
    "text": "heaps i like to describe the uh the garbage collector innet uh as a",
    "start": "488280",
    "end": "494160"
  },
  {
    "text": "tightroppe walker walking along that very fine line and it's got a pole and it has to balance uh and make sure that",
    "start": "494160",
    "end": "499680"
  },
  {
    "text": "the application doesn't you know fall over and it's using the resources it has available to it as efficiently as",
    "start": "499680",
    "end": "505280"
  },
  {
    "text": "possible when you compare this to unmanaged languages like for example C",
    "start": "505280",
    "end": "511199"
  },
  {
    "text": "back in the day with C anyone in here still writing C maybe for fun or oh whoa a lot of you cool um so uh with CC C is",
    "start": "511199",
    "end": "519680"
  },
  {
    "text": "an unmanaged language and effectively you have to uh handle things like memory allocations completely yourself.NET and",
    "start": "519680",
    "end": "526320"
  },
  {
    "text": "the garbage collector does that for you and it's beautiful because it means with sort of without really thinking about",
    "start": "526320",
    "end": "531760"
  },
  {
    "text": "what we're having to do we can new up an object and away we go in C you have to actually allocate the memory that you",
    "start": "531760",
    "end": "538160"
  },
  {
    "text": "need so with this example I'm creating an array of integers in this case in C I",
    "start": "538160",
    "end": "543760"
  },
  {
    "text": "have to specifically say I need an array and it needs four different items in that array and so",
    "start": "543760",
    "end": "550279"
  },
  {
    "text": "uh four items of memory are allocated to that array in C in C we just knew up an",
    "start": "550279",
    "end": "556959"
  },
  {
    "text": "array and amazing away we go but this is where things start to get dangerous because whilst that's super easy it also",
    "start": "556959",
    "end": "564320"
  },
  {
    "text": "starts to introduce things when this is where things start to go wrong when you have a inefficient",
    "start": "564320",
    "end": "570519"
  },
  {
    "text": "code the thing I see done wrong time and time and time again is collections",
    "start": "570519",
    "end": "576560"
  },
  {
    "text": "people misuse collections in uh innet and by collections I'm talking about everything from an array to a list uh to",
    "start": "576560",
    "end": "583839"
  },
  {
    "text": "a whole host of things so people should be familiar I hope with a lot of these interface names that are on screen right",
    "start": "583839",
    "end": "590000"
  },
  {
    "text": "now i innumerable this is a lazy evaluated um collection effectively um and you",
    "start": "590000",
    "end": "597920"
  },
  {
    "text": "have its cousin I queryable which is an innumerable that can have uh querying",
    "start": "597920",
    "end": "603360"
  },
  {
    "text": "functions built on top of it um effectively an innumerable is just a",
    "start": "603360",
    "end": "608880"
  },
  {
    "text": "collection of things there is no key there's no nice easy way to go and look it up you have to enumerate over that",
    "start": "608880",
    "end": "615040"
  },
  {
    "text": "collection to go and find items you then have this I collection concept which is mutable so you can add remove and clear",
    "start": "615040",
    "end": "622560"
  },
  {
    "text": "things um and there's various implementations of similar things",
    "start": "622560",
    "end": "627680"
  },
  {
    "text": "further down like I sets that allow you to do similar stuff but have a lot more features an ilist people should be",
    "start": "627680",
    "end": "634320"
  },
  {
    "text": "familiar with the concept of lists and arrays in uh in C but this allows you to do uh everything that a collection does",
    "start": "634320",
    "end": "640959"
  },
  {
    "text": "plus it has an indexer so every item in that list has uh an integer based number",
    "start": "640959",
    "end": "647200"
  },
  {
    "text": "for its position and you can then insert things at certain positions the I set is",
    "start": "647200",
    "end": "652880"
  },
  {
    "text": "this idea of a collection but it's unique so hash set sorted set immutable set frozen set these are concepts inn",
    "start": "652880",
    "end": "659600"
  },
  {
    "text": "net that at least the former two you should be familiar with frozen sets fairly new",
    "start": "659600",
    "end": "665560"
  },
  {
    "text": "um yeah this is already sorted so as at the time you insert an item it will get",
    "start": "665560",
    "end": "671200"
  },
  {
    "text": "automatically sorted and put into that collection in the right place um if it's a hash set it makes sure that that item",
    "start": "671200",
    "end": "677680"
  },
  {
    "text": "doesn't already exist in the collection so on and so forth there's a lot that goes on behind the scenes of all of",
    "start": "677680",
    "end": "683120"
  },
  {
    "text": "these different implementations but effectively you can think of everything in .NET that's uh enumeratable",
    "start": "683120",
    "end": "690720"
  },
  {
    "text": "innumerable is an I innumerable and then collections lists sets build on top of that finally we've got this fancy one at",
    "start": "690720",
    "end": "698240"
  },
  {
    "text": "the bottom dictionaries again people are hopefully very familiar with the idea of dictionaries it's a key and it's a value",
    "start": "698240",
    "end": "703600"
  },
  {
    "text": "and it's multiple of those um well the way that that that actually works under the hood isnet keeps um a list of two",
    "start": "703600",
    "end": "711519"
  },
  {
    "text": "things around a list of the values and a list of the keys in a hash table and it uses this get hash code method divided",
    "start": "711519",
    "end": "719040"
  },
  {
    "text": "by the uh the count uh of the items in the uh collection to determine where in",
    "start": "719040",
    "end": "725440"
  },
  {
    "text": "that hash table your key and value exist so when you go and try and find an item by key or value that is effectively what",
    "start": "725440",
    "end": "732079"
  },
  {
    "text": "it's doing i said value there sorry you can't look up items by value but yeah you'd have to enumerate it anyway yeah",
    "start": "732079",
    "end": "737920"
  },
  {
    "text": "get hash code by the count of the items so there's math going on there even to",
    "start": "737920",
    "end": "743040"
  },
  {
    "text": "try and get an item out of a dictionary as efficiently as possible by its key um yeah so many different uh possible",
    "start": "743040",
    "end": "750560"
  },
  {
    "text": "implementations here that hopefully we're familiar with but get misused time",
    "start": "750560",
    "end": "755760"
  },
  {
    "text": "and time again let's talk about enumerators i mentioned that in theory everything is",
    "start": "755760",
    "end": "761920"
  },
  {
    "text": "an I innumerable everything that is a collection of many things in .NET is an innumerable and we have this concept",
    "start": "761920",
    "end": "767200"
  },
  {
    "text": "called an enumerator an enumerator's job is to loop over your collection and find",
    "start": "767200",
    "end": "772639"
  },
  {
    "text": "an item this is a very very crude example of an enumerator at its simplest",
    "start": "772639",
    "end": "778240"
  },
  {
    "text": "form um but the idea is you have uh two methods on it or three three properties",
    "start": "778240",
    "end": "784399"
  },
  {
    "text": "a property and two methods uh you go move next you've got a reset method and you've got the current position the",
    "start": "784399",
    "end": "790000"
  },
  {
    "text": "enumerator's job is to take the collection of items and to uh yeah loop",
    "start": "790000",
    "end": "796720"
  },
  {
    "text": "over that so every time you call move next it will increment the position and your current property will be updated",
    "start": "796720",
    "end": "802480"
  },
  {
    "text": "with the next item in that collection its job is just to find an item at its",
    "start": "802480",
    "end": "808480"
  },
  {
    "text": "position until the very end until there's nothing left this is used in net internally for every single loop every",
    "start": "808480",
    "end": "815519"
  },
  {
    "text": "single enumeration so even when you're doing like a four each or a for loop that's effectively an enumerator in the",
    "start": "815519",
    "end": "822000"
  },
  {
    "text": "in the background um you can implement your own ones of these of course so as I've done here um uh you take the I",
    "start": "822000",
    "end": "829040"
  },
  {
    "text": "enumerator interface you populate these these methods and you can do whatever you want so this doesn't have to be",
    "start": "829040",
    "end": "835440"
  },
  {
    "text": "finding things by position it could literally be going off and doing API calls and silly things if you really",
    "start": "835440",
    "end": "840720"
  },
  {
    "text": "really wanted to but um essentially .NET ships a bunch of these by default that you don't necessarily need to worry",
    "start": "840720",
    "end": "846560"
  },
  {
    "text": "about these are typically buried behind friendly methods that we use maybe all",
    "start": "846560",
    "end": "852240"
  },
  {
    "text": "the time anywhere count first last and uh these are really handy because we",
    "start": "852240",
    "end": "859600"
  },
  {
    "text": "don't have to know exactly how these collections work under the hood we don't need to know the fact that an array has",
    "start": "859600",
    "end": "866000"
  },
  {
    "text": "um uh lengths whilst lists has counts whilst they all have different properties um these methods in .NET Core",
    "start": "866000",
    "end": "874240"
  },
  {
    "text": "have been made significantly more efficient however in NET framework if you were to",
    "start": "874240",
    "end": "881079"
  },
  {
    "text": "call any on any collection it will enumerate the entire collection um and",
    "start": "881079",
    "end": "888160"
  },
  {
    "text": "when it finds the first item it will bum out and go yep cool we found an item there is any items in this collection um",
    "start": "888160",
    "end": "895040"
  },
  {
    "text": "similarly for count in net framework it would loop the entire collection and",
    "start": "895040",
    "end": "900079"
  },
  {
    "text": "count each item individually for you and tell you hey here is the uh the total number of items well with net core uh",
    "start": "900079",
    "end": "908240"
  },
  {
    "text": "net three and beyond of all of these these all have key properties so a I collection has a count and I list has a",
    "start": "908240",
    "end": "915839"
  },
  {
    "text": "count um as I said and rays have a length the amount of uh memory allocated",
    "start": "915839",
    "end": "921360"
  },
  {
    "text": "to them and so these methods now in net core actually go and check that so if",
    "start": "921360",
    "end": "927519"
  },
  {
    "text": "you're calling any on a collection it will first say oh is it an I collection is it an I set does it have a count",
    "start": "927519",
    "end": "934000"
  },
  {
    "text": "property and just return that value but if it is not one of those things if it's just a raw innumerable it will still go",
    "start": "934000",
    "end": "940480"
  },
  {
    "text": "and enumerate and check for those uh yeah go and work it out similarly where",
    "start": "940480",
    "end": "947120"
  },
  {
    "text": "first last these are fairly common as well because they allow you to pass in a predicate that will filter that",
    "start": "947120",
    "end": "952959"
  },
  {
    "text": "collection and the only way for it for net to go and determine if that filter is true is to evaluate the items in the",
    "start": "952959",
    "end": "958880"
  },
  {
    "text": "collection until one is true so in this case uh where will return an I inurable",
    "start": "958880",
    "end": "966480"
  },
  {
    "text": "with an additional um with an additional enumerator on the top which wraps the",
    "start": "966480",
    "end": "972959"
  },
  {
    "text": "core enumerator that was being used originally and puts that condition in place so every time it enumerates it",
    "start": "972959",
    "end": "979199"
  },
  {
    "text": "first checks that condition and if that is true it will uh return it otherwise it will continue first and last work in",
    "start": "979199",
    "end": "985600"
  },
  {
    "text": "a very similar way they're doing that where under the hood but they're just going to return the first one or they're going to go in reverse along the",
    "start": "985600",
    "end": "992079"
  },
  {
    "text": "collection as well so these are probably used in 90% of the people's code in this",
    "start": "992079",
    "end": "998639"
  },
  {
    "text": "room chances are unless you're really hardcore and you're writing everything directly yourself directly to the",
    "start": "998639",
    "end": "1003680"
  },
  {
    "text": "numerator chances are you're using these but this is where it gets really dangerous if you don't understand the",
    "start": "1003680",
    "end": "1010000"
  },
  {
    "text": "actual collection that you're performing this against you're going to have some trouble if it is a raw I innumerable",
    "start": "1010000",
    "end": "1017040"
  },
  {
    "text": "with absolutely nothing um like a a list or anything it doesn't have any of those count or length properties it is going",
    "start": "1017040",
    "end": "1024079"
  },
  {
    "text": "to go and enumerate so this is where um yeah this is where",
    "start": "1024079",
    "end": "1029760"
  },
  {
    "text": "it's it's really important to understand exactly how these work let's talk quickly about array sizing so arrays in",
    "start": "1029760",
    "end": "1036400"
  },
  {
    "text": "net are sort of the the fundamental principle of how data is stored in these collections um a list is just an array",
    "start": "1036400",
    "end": "1045520"
  },
  {
    "text": "in the background um so when you call an array when you create a new array new",
    "start": "1045520",
    "end": "1051600"
  },
  {
    "text": "int array as I had in my example earlier that will create you an empty uh an empty object in memory with with nothing",
    "start": "1051600",
    "end": "1059120"
  },
  {
    "text": "allocated zero zero allocations in that um so at this point the array has a",
    "start": "1059120",
    "end": "1066720"
  },
  {
    "text": "count of zero and a capacity of zero uh an array is always maintaining these two values so uh there is nothing assigned",
    "start": "1066720",
    "end": "1073919"
  },
  {
    "text": "there's nothing in there this is fairly harmless to do but as soon as we start adding values in an array you can see",
    "start": "1073919",
    "end": "1080080"
  },
  {
    "text": "how it gets quite expensive um I've changed this out to be Portuguese wine regions um this was a beer example",
    "start": "1080080",
    "end": "1086799"
  },
  {
    "text": "before i'm using different um wine regions for this example but I've created an array and I've put each",
    "start": "1086799",
    "end": "1092559"
  },
  {
    "text": "letter of uh that wine region DAO I guess uh into into the array so at this",
    "start": "1092559",
    "end": "1099120"
  },
  {
    "text": "point my array has a count of three items three letters for DAO uh but it",
    "start": "1099120",
    "end": "1104160"
  },
  {
    "text": "has a capacity of four we have this extra item on the end here and this is because uh the arrays are effectively",
    "start": "1104160",
    "end": "1111600"
  },
  {
    "text": "allocated in quads in fours and so as soon as we then add uh a fourth letter",
    "start": "1111600",
    "end": "1117520"
  },
  {
    "text": "that's filled up the array if we want to add a fifth letter it needs to add another four or effectively double in",
    "start": "1117520",
    "end": "1123919"
  },
  {
    "text": "size so we've got duro um here which is the the local wine region and because",
    "start": "1123919",
    "end": "1129520"
  },
  {
    "text": "that's now five letters uh here it's had to add the additional four empty slots",
    "start": "1129520",
    "end": "1136320"
  },
  {
    "text": "um and it's filled one of those with the with the O so in this case an array has now actually created yeah eight items of",
    "start": "1136320",
    "end": "1145360"
  },
  {
    "text": "memory for five letters um where before we could have done new array and",
    "start": "1145360",
    "end": "1150400"
  },
  {
    "text": "actually specified the size like in C we know it's going to be five letters.net now starting to allocate more memory",
    "start": "1150400",
    "end": "1156960"
  },
  {
    "text": "than potentially it needs just for your exact purpose and this can get even worse in this case we've got Atlantico",
    "start": "1156960",
    "end": "1164559"
  },
  {
    "text": "which is a nineletter word and of course that's one more than eight and it's",
    "start": "1164559",
    "end": "1170080"
  },
  {
    "text": "added another eight on the top this can get really bad if you've got a an array that's 256 items and you add a 257th",
    "start": "1170080",
    "end": "1179280"
  },
  {
    "text": "item you've now got an array that is 512 um spaces it's allocated far more memory",
    "start": "1179280",
    "end": "1186640"
  },
  {
    "text": "than it actually needs so there's an argument here for making sure that you",
    "start": "1186640",
    "end": "1192360"
  },
  {
    "text": "uh size your arrays properly initially equally I mentioned that lists are",
    "start": "1192360",
    "end": "1197919"
  },
  {
    "text": "backed by an array under the hood we love lists inn net we love to list as a",
    "start": "1197919",
    "end": "1205200"
  },
  {
    "text": "nice friendly extension method where we can just easily add new items to these collections unfortunately what that",
    "start": "1205200",
    "end": "1212240"
  },
  {
    "text": "means is it's building an array underneath for you and if you add an item that's going to mean the array",
    "start": "1212240",
    "end": "1218320"
  },
  {
    "text": "needs to be resized and add more space to the array well it's going to create an even bigger array in the background",
    "start": "1218320",
    "end": "1224640"
  },
  {
    "text": "it's just going to keep growing and growing and growing so you have to be a little mindful of",
    "start": "1224640",
    "end": "1230559"
  },
  {
    "text": "that to array is a similar method so this allows you to create a brand new",
    "start": "1232039",
    "end": "1238640"
  },
  {
    "text": "array of t of type um and what that will",
    "start": "1238640",
    "end": "1244159"
  },
  {
    "text": "do is if you call that on any innumerable innumerable it will copy every single item out of that",
    "start": "1244159",
    "end": "1249440"
  },
  {
    "text": "innumerable it will enumerate it copy each item into the new array that's been created but that array depending on what",
    "start": "1249440",
    "end": "1257280"
  },
  {
    "text": "you copied from will either be completely dynamically assessed or will be actually the exact size you need so",
    "start": "1257280",
    "end": "1264400"
  },
  {
    "text": "if I have a list of items that's got seven items in it and uh that has a",
    "start": "1264400",
    "end": "1269440"
  },
  {
    "text": "count property net will go ah okay it's got a count property and there's only seven items in there so when you're calling to",
    "start": "1269440",
    "end": "1275919"
  },
  {
    "text": "array we know you only need an array of seven items and so it's going to create an array with just seven items nothing",
    "start": "1275919",
    "end": "1282640"
  },
  {
    "text": "spare nothing more nothing less that's really cool but if you do that on an Iumerable where it doesn't have that",
    "start": "1282640",
    "end": "1288799"
  },
  {
    "text": "count property doesn't have a length property it doesn't know how big that's going to be so it's going to enumerate",
    "start": "1288799",
    "end": "1294240"
  },
  {
    "text": "and each time you need to add a new item it's going to say \"Ah I need to expand my array even more.\" And you're going to",
    "start": "1294240",
    "end": "1300320"
  },
  {
    "text": "end up with an array that's oversized for what you probably intended so the long and short of it is if you know the",
    "start": "1300320",
    "end": "1306799"
  },
  {
    "text": "count you're better off creating an array up front with the exact size that",
    "start": "1306799",
    "end": "1311840"
  },
  {
    "text": "you need same thing applies to list as I said the two list is backed by an and a list is backed by an array it will",
    "start": "1311840",
    "end": "1318559"
  },
  {
    "text": "enumerate and then copy the items if it's already a list thankfully it's not going to do that which is really handy",
    "start": "1318559",
    "end": "1324559"
  },
  {
    "text": "now however in .NET Framework it certainly did add insert so these will do the a",
    "start": "1324559",
    "end": "1332000"
  },
  {
    "text": "similar operation where they will work out the position that it needs to add your item to when you're calling add",
    "start": "1332000",
    "end": "1338559"
  },
  {
    "text": "it's going to get the count the current length of that array it's going to add one and going to insert that at that",
    "start": "1338559",
    "end": "1344240"
  },
  {
    "text": "position if that position doesn't exist it's got to double the capacity of the underlying array uh same with insert",
    "start": "1344240",
    "end": "1351039"
  },
  {
    "text": "insert is actually going to completely resize your array every time you do an",
    "start": "1351039",
    "end": "1356159"
  },
  {
    "text": "insert so it's going to say I have 12 items i need to add a 13th item it's",
    "start": "1356159",
    "end": "1362080"
  },
  {
    "text": "going to create a brand new array under the hood it's going to copy each of those items at all of the relevant",
    "start": "1362080",
    "end": "1367120"
  },
  {
    "text": "positions in insert your new one at the position you've desired and then copy the remaining items fairly inefficient",
    "start": "1367120",
    "end": "1373679"
  },
  {
    "text": "as well um if you can avoid it add and insert are yeah",
    "start": "1373679",
    "end": "1381320"
  },
  {
    "text": "inefficient i come back to this if we know the size of the the array up front this is really efficient if we don't",
    "start": "1381320",
    "end": "1387679"
  },
  {
    "text": "there's some work to go and work it out be mindful of this people do this time and time again and get it wrong okay",
    "start": "1387679",
    "end": "1394480"
  },
  {
    "text": "I've got some code demos which should make this a bit more fun um some of these are you know sample lab uh madeup",
    "start": "1394480",
    "end": "1402000"
  },
  {
    "text": "code some of it is actual code that I've seen on pull requests and things recently and it made me scream but uh",
    "start": "1402000",
    "end": "1410400"
  },
  {
    "text": "yeah it's real so I have this enumeration demo um let's jump to my code here so can",
    "start": "1410400",
    "end": "1417520"
  },
  {
    "text": "people at the back vaguely see the code zoom a bit more yeah we can zoom a bit",
    "start": "1417520",
    "end": "1422760"
  },
  {
    "text": "more 200% is that okay bit more no fine okay we'll stick with that",
    "start": "1422760",
    "end": "1430480"
  },
  {
    "text": "so um net has this new concept in I think",
    "start": "1430480",
    "end": "1435760"
  },
  {
    "text": "it was uh net 8 where you can add these um expression operators which are really",
    "start": "1435760",
    "end": "1443360"
  },
  {
    "text": "nice so when you create a innumerable of object you can say that equals uh this",
    "start": "1443360",
    "end": "1450159"
  },
  {
    "text": "kind of square bracket syntax and net will then automatically work out what type this should actually be under the",
    "start": "1450159",
    "end": "1456720"
  },
  {
    "text": "hood previously you would have had to go okay inable object equals a new list or",
    "start": "1456720",
    "end": "1461919"
  },
  {
    "text": "a new array but net's going to decide it for you at this point so uh before I run",
    "start": "1461919",
    "end": "1467919"
  },
  {
    "text": "the code anyone want to take a guess what this is actually going to be what underlying type net's going to give me",
    "start": "1467919",
    "end": "1474799"
  },
  {
    "text": "just shout it out an array cool it is an array and it's going to be an array of zero items it's effectively um yeah no",
    "start": "1474799",
    "end": "1483760"
  },
  {
    "text": "no real footprint of doing this what about this so I've got an I list of objects any guesses what this is going",
    "start": "1483760",
    "end": "1489760"
  },
  {
    "text": "to be a list yeah awesome and then we've got this idea here of an I collection",
    "start": "1489760",
    "end": "1494960"
  },
  {
    "text": "what might an I collection generate a list yeah it's a list as well",
    "start": "1494960",
    "end": "1500880"
  },
  {
    "text": "and at some point we're going to get this for dictionaries too um there's a a discussion about it right now about kind",
    "start": "1500880",
    "end": "1506159"
  },
  {
    "text": "of dictionary expression operators where um it will be able to do things yeah fancy things for you hash sets work etc",
    "start": "1506159",
    "end": "1513360"
  },
  {
    "text": "so all of the different types actually work here you can just use the uh the syntax um this is great because it means",
    "start": "1513360",
    "end": "1520720"
  },
  {
    "text": "that .NET's going to automatically create an appropriate uh option for you",
    "start": "1520720",
    "end": "1525760"
  },
  {
    "text": "potentially if you really don't know what what's going to go into this uh collection and then of course you can",
    "start": "1525760",
    "end": "1531840"
  },
  {
    "text": "call your two list and whatever other methods on here that become slightly inefficient so calling",
    "start": "1531840",
    "end": "1538279"
  },
  {
    "text": "uh yeah the expression operator on innumerable and then to list is going to create a new list and copy the items in",
    "start": "1538279",
    "end": "1545360"
  },
  {
    "text": "there is zero items in this case so it's going to be nothing but uh if there was three four five items in there like I",
    "start": "1545360",
    "end": "1551760"
  },
  {
    "text": "can do up here i can just put one two three that's now going to",
    "start": "1551760",
    "end": "1556880"
  },
  {
    "text": "allocate an array with three items in it and then going to create a new array to create the list and copy three items in",
    "start": "1556880",
    "end": "1562480"
  },
  {
    "text": "it but that array is actually going to have four items and ah yeah starts to get really",
    "start": "1562480",
    "end": "1568840"
  },
  {
    "text": "inefficient i said I was going to show you some code that I saw in a pull request recently nobody scream um this",
    "start": "1568840",
    "end": "1576880"
  },
  {
    "text": "is a genuine piece of code that I saw in a pull request um and in fact to be nice",
    "start": "1576880",
    "end": "1583919"
  },
  {
    "text": "I've put the the uh collection expression in there but effectively this is someone newing up a a collection they",
    "start": "1583919",
    "end": "1590960"
  },
  {
    "text": "are then checking if there is any items in that collection then making sure that the count was greater than",
    "start": "1590960",
    "end": "1597240"
  },
  {
    "text": "zero and then once that's good they're going to go through and uh make sure",
    "start": "1597240",
    "end": "1602600"
  },
  {
    "text": "that there is oh it's going to get a list of the items in there where the value is not null and it's going to turn",
    "start": "1602600",
    "end": "1608400"
  },
  {
    "text": "that into a list then it's going to iterate over that and then it's going to null check the items again just for safe",
    "start": "1608400",
    "end": "1615720"
  },
  {
    "text": "measure i I no word of a lie this was in a project I saw okay this is",
    "start": "1615720",
    "end": "1621120"
  },
  {
    "text": "ridiculously inefficient for so many reasons first things first uh any is going to enumerate that collection and",
    "start": "1621120",
    "end": "1627600"
  },
  {
    "text": "check that there are items in there uh thankfully because we're using the uh",
    "start": "1627600",
    "end": "1633279"
  },
  {
    "text": "expression operator it's going to create an array and an array has that length",
    "start": "1633279",
    "end": "1638400"
  },
  {
    "text": "property and so it knows that if the length is more than zero yes there is an item but if it wasn't perhaps this is",
    "start": "1638400",
    "end": "1644320"
  },
  {
    "text": "coming from some other library some API you're using well that could be just a raw innumerable never trust it basically",
    "start": "1644320",
    "end": "1651360"
  },
  {
    "text": "if it's if it's innumerable assume that it will enumerate count is also then going to",
    "start": "1651360",
    "end": "1657760"
  },
  {
    "text": "enumerate but it's going to enumerate every single item just to check and make sure that yes there is uh there is there",
    "start": "1657760",
    "end": "1665679"
  },
  {
    "text": "is items and then yeah make sure that's greater than zero it's doing the exact same thing as the any then we come down",
    "start": "1665679",
    "end": "1672480"
  },
  {
    "text": "to our next line where we've got our collection wear clause that is going to enumerate again and filter every single",
    "start": "1672480",
    "end": "1678799"
  },
  {
    "text": "item and make sure that those values are not null and then finally just as a nice",
    "start": "1678799",
    "end": "1684320"
  },
  {
    "text": "punch in the gut it's going to enumerate once more and get all those items out of the the innumerable that's been created",
    "start": "1684320",
    "end": "1690640"
  },
  {
    "text": "by wear to create a list and then allocate a bunch of memory to do it oh and then we loop again and then we null",
    "start": "1690640",
    "end": "1696720"
  },
  {
    "text": "check again come on this is ridiculous so how would we make this code slightly more efficient um I have",
    "start": "1696720",
    "end": "1704440"
  },
  {
    "text": "uh an example here um following the Portuguese wines theme I've created a",
    "start": "1704440",
    "end": "1710240"
  },
  {
    "text": "wines collection this is an object that that I've created um and it's just got",
    "start": "1710240",
    "end": "1715440"
  },
  {
    "text": "some hard-coded values in there you can see up here we've got wines it's got a couple of null values port aruda etc um",
    "start": "1715440",
    "end": "1723919"
  },
  {
    "text": "I've also then implemented my own enumerator here uh this is a completely contrived example that you should never",
    "start": "1723919",
    "end": "1729760"
  },
  {
    "text": "do in the real world but what it's doing is every time it enumerates it's going to create a random subset of that list",
    "start": "1729760",
    "end": "1738080"
  },
  {
    "text": "and return that to you as the uh as the item that you should be enumerating over um meaning in reality every time you",
    "start": "1738080",
    "end": "1744320"
  },
  {
    "text": "enumerate wine collection it's going to give you a different list of items um this is really to simulate what might",
    "start": "1744320",
    "end": "1751039"
  },
  {
    "text": "happen if you were getting that data from an API or getting it from some other library um back to my code over",
    "start": "1751039",
    "end": "1759000"
  },
  {
    "text": "here i'm then doing my any call and to make this a bit more efficient I'm doing",
    "start": "1759000",
    "end": "1764240"
  },
  {
    "text": "that check up front because before the code would enumerate and then",
    "start": "1764240",
    "end": "1769440"
  },
  {
    "text": "check again if there was values in it that we actually wanted so doing that",
    "start": "1769440",
    "end": "1774480"
  },
  {
    "text": "null check up front means that we can you know make sure we're only going to get only going to perform our code if",
    "start": "1774480",
    "end": "1780640"
  },
  {
    "text": "it's required we are then doing a count okay that's still inefficient and then we are",
    "start": "1780640",
    "end": "1786799"
  },
  {
    "text": "still filtering it again okay that's not ideal so let's make this work a bit better um we've got our wines collection",
    "start": "1786799",
    "end": "1792559"
  },
  {
    "text": "at the top what if we were to just move this entire line out crazy idea and then",
    "start": "1792559",
    "end": "1799919"
  },
  {
    "text": "instead of using wines here we can use wines use the items which is the list",
    "start": "1799919",
    "end": "1805039"
  },
  {
    "text": "and count use items here as well this is so much better because Oh we don't even",
    "start": "1805039",
    "end": "1810960"
  },
  {
    "text": "need this anymore either do we we've done all the work up front we've done the work to take our collection to",
    "start": "1810960",
    "end": "1817440"
  },
  {
    "text": "filter it turn it into a list doesn't actually need to be a list even uh and then our any and our count are going to",
    "start": "1817440",
    "end": "1824399"
  },
  {
    "text": "just use the properties that are on the list the the count property not doing any extra work here uh we don't need the",
    "start": "1824399",
    "end": "1831039"
  },
  {
    "text": "null check anymore either uh we've already said we don't need the uh need the count so this can literally go from",
    "start": "1831039",
    "end": "1838080"
  },
  {
    "text": "being like five lines of code to three lines of code and look at that that's beautiful um just to show you this",
    "start": "1838080",
    "end": "1844799"
  },
  {
    "text": "running in in real life and uh prove my point so you can believe what I'm saying",
    "start": "1844799",
    "end": "1850399"
  },
  {
    "text": "we'll actually put a break point on this and I'll show you just how many times that random enumerator gets hit so uh",
    "start": "1850399",
    "end": "1858159"
  },
  {
    "text": "let's pull up the uh wine collection on this side i'm just going to stick it here and I'll pop a break point on there",
    "start": "1858159",
    "end": "1866720"
  },
  {
    "text": "and on there and on there why not and here sure so when I run this",
    "start": "1866720",
    "end": "1875080"
  },
  {
    "text": "demo it's going to run my uh my wines code and you'll start to see it looping",
    "start": "1875080",
    "end": "1880480"
  },
  {
    "text": "and just see how many times it then hits the enumerator okay we've hit our code the first thing it's got to do is check",
    "start": "1880480",
    "end": "1886480"
  },
  {
    "text": "if there's any items based on what we've established already we believe that any is going to only uh enumerate once",
    "start": "1886480",
    "end": "1893279"
  },
  {
    "text": "because it's going to check that uh there is one item and if one item is returned fantastic away we go so click",
    "start": "1893279",
    "end": "1900320"
  },
  {
    "text": "continue we hit it once and then we're skipping to the next line so that's awesome then when we do the count uh in",
    "start": "1900320",
    "end": "1906799"
  },
  {
    "text": "theory it's going to enumerate for every single item in that collection just pop a break point there too just to be",
    "start": "1906799",
    "end": "1913080"
  },
  {
    "text": "sure okay maybe only one was returned in that time due to my randomized code and",
    "start": "1913080",
    "end": "1918960"
  },
  {
    "text": "then when we do this wear and our two list it's got to enumerate each item again and then we loop it's got to get",
    "start": "1918960",
    "end": "1925200"
  },
  {
    "text": "each item again so it's hitting it multiple times if we optimize that code back to what we'd sort of suggested it",
    "start": "1925200",
    "end": "1931120"
  },
  {
    "text": "could be we pull our list of items out pop them up here we remove our any check",
    "start": "1931120",
    "end": "1938080"
  },
  {
    "text": "there we remove our count and we can remove the null check just for safe",
    "start": "1938080",
    "end": "1943960"
  },
  {
    "text": "measure oop fantastic run that again we should this time only see our enumerator",
    "start": "1943960",
    "end": "1950559"
  },
  {
    "text": "hit uh basically one time wines",
    "start": "1950559",
    "end": "1957120"
  },
  {
    "text": "yeah there we go thank you pair programming session you are correct they should be",
    "start": "1957120",
    "end": "1964360"
  },
  {
    "text": "items so yeah it was hit more than once there but this time it should literally only get hit once at the time that two",
    "start": "1964360",
    "end": "1970000"
  },
  {
    "text": "list is called and then never again we've moved the same amount same code",
    "start": "1970000",
    "end": "1975120"
  },
  {
    "text": "doing the exact same thing we've just shuffled it around and all of a sudden our code is doing far far less work what",
    "start": "1975120",
    "end": "1981519"
  },
  {
    "text": "was 10 12 iterations before is now a single iteration this makes a huge",
    "start": "1981519",
    "end": "1986880"
  },
  {
    "text": "difference uh in in the real world um if we're talking about efficiency really",
    "start": "1986880",
    "end": "1992000"
  },
  {
    "text": "the goal here is just do less work um and maybe do less work faster but we're",
    "start": "1992000",
    "end": "1997440"
  },
  {
    "text": "going to come to that in a second so there's a few optimizations",
    "start": "1997440",
    "end": "2003120"
  },
  {
    "text": "that you can do in code when using I'm going to call them these lazy uh friendly extension",
    "start": "2003120",
    "end": "2008440"
  },
  {
    "text": "methods if you're doing a two-list list on an item just check if it's a list already for God's sake like if it's",
    "start": "2008440",
    "end": "2014640"
  },
  {
    "text": "already a list it's going to go and do you don't need to go and do all of that work of copying items in and creating a new list two-list list is is going to",
    "start": "2014640",
    "end": "2021519"
  },
  {
    "text": "create a new list u unnecessarily potentially so if you're dealing with an I innumerable just check if it's an",
    "start": "2021519",
    "end": "2026960"
  },
  {
    "text": "anist first um put your filtering up front so where you're doing those wear clauses rather",
    "start": "2026960",
    "end": "2033519"
  },
  {
    "text": "than doing an any check with a a predicate in there and filtering your results do that first and then call any",
    "start": "2033519",
    "end": "2040240"
  },
  {
    "text": "on the result of that uh enumeration things like element at or indexes where",
    "start": "2040240",
    "end": "2046480"
  },
  {
    "text": "you're working with a list and you already know the position of the item use the position the index is a really",
    "start": "2046480",
    "end": "2051919"
  },
  {
    "text": "really efficient way in memory of getting to a specific point um yeah",
    "start": "2051919",
    "end": "2057520"
  },
  {
    "text": "otherwise you've got to enumerate the whole thing again this this will literally just skip to the specific position if you've got uh the index that",
    "start": "2057520",
    "end": "2064560"
  },
  {
    "text": "is also add range um this is really interesting so when you're adding items",
    "start": "2064560",
    "end": "2069839"
  },
  {
    "text": "to a list calling add as I said before is going to add um it's going to expand that array and it's going to add more",
    "start": "2069839",
    "end": "2076000"
  },
  {
    "text": "and more and more slots to make sure that there is enough space for the items you're trying to add or potentially will",
    "start": "2076000",
    "end": "2081440"
  },
  {
    "text": "add in future whereas add range is actually going to do a bit of optimization up front what they do is",
    "start": "2081440",
    "end": "2087679"
  },
  {
    "text": "they work out uh the number of items that you're trying to add and the number of items currently in the collection and",
    "start": "2087679",
    "end": "2094320"
  },
  {
    "text": "it will resize the array to the exact capacity that is needed so add range",
    "start": "2094320",
    "end": "2099680"
  },
  {
    "text": "really simple change rather than looping over your items to add new items just add them all in one go way more",
    "start": "2099680",
    "end": "2107640"
  },
  {
    "text": "efficient okay we can talk about some other things i said do less work but the",
    "start": "2107640",
    "end": "2113040"
  },
  {
    "text": "other thing is maybe do more work in parallel we can use the same amount of compute to actually achieve similar",
    "start": "2113040",
    "end": "2119440"
  },
  {
    "text": "results uh but with yeah potentially huge vastly different outputs so",
    "start": "2119440",
    "end": "2125440"
  },
  {
    "text": "parallel async awaitn net has got some fantastic different paradigms of building your uh building your",
    "start": "2125440",
    "end": "2131599"
  },
  {
    "text": "applications you can do parallel processing where on the uh the same thread it will try and do multiple",
    "start": "2131599",
    "end": "2137520"
  },
  {
    "text": "things async allows code to be executed across multiple different threads simultaneously and you can then await",
    "start": "2137520",
    "end": "2144240"
  },
  {
    "text": "that result overall you should see a much a vastly improved throughput of your application so let's just close out",
    "start": "2144240",
    "end": "2151200"
  },
  {
    "text": "this demo and jump to my parallel",
    "start": "2151200",
    "end": "2156320"
  },
  {
    "text": "demo oops",
    "start": "2158599",
    "end": "2162599"
  },
  {
    "text": "there we go that's better okay so I've got a couple of very simple demos here um remember that wine collection from a",
    "start": "2168560",
    "end": "2174640"
  },
  {
    "text": "moment ago well I've created a wine service of course uh and that service is job is just to return a list of wines",
    "start": "2174640",
    "end": "2181520"
  },
  {
    "text": "it's not doing anything special but in this case my for loop here is going to loop over 10 times and it's going to",
    "start": "2181520",
    "end": "2187839"
  },
  {
    "text": "call that wine service and get a count of the wines each time",
    "start": "2187839",
    "end": "2193320"
  },
  {
    "text": "um it's going to do that 10 times in sequence so with the same amount of time",
    "start": "2193320",
    "end": "2199119"
  },
  {
    "text": "we're able to process 10 items uh I will run that demo now just",
    "start": "2199119",
    "end": "2204240"
  },
  {
    "text": "so you can see what I mean oops let's take that off cool so",
    "start": "2204240",
    "end": "2210960"
  },
  {
    "text": "you can see here it's just slowly counting through and finding the wines because it's newing up a a new version",
    "start": "2210960",
    "end": "2217839"
  },
  {
    "text": "of that service every single time it does this uh the count is ever so slightly different i don't know if",
    "start": "2217839",
    "end": "2222960"
  },
  {
    "text": "people at the back can see that but uh the first one returned three five wines the second one three three three 53 53",
    "start": "2222960",
    "end": "2230160"
  },
  {
    "text": "is alternating between the different counts because the logic of that service is to differ the amount of wines that",
    "start": "2230160",
    "end": "2236640"
  },
  {
    "text": "are returned each time um so yeah it's just done those slowly in parallel takes",
    "start": "2236640",
    "end": "2242240"
  },
  {
    "text": "a second or so to actually uh do this oh and just to simulate a real world scenario uh this has a thread sleep of a",
    "start": "2242240",
    "end": "2249280"
  },
  {
    "text": "second in there so you can imagine that's a network call or something you're just waiting a second between",
    "start": "2249280",
    "end": "2254880"
  },
  {
    "text": "each call when we come to our async code um we're still going to new up a copy of that uh service each time and these uh",
    "start": "2254880",
    "end": "2263359"
  },
  {
    "text": "async methods still also do a thread sleep um a task delay is the the async",
    "start": "2263359",
    "end": "2269200"
  },
  {
    "text": "equivalent of a uh a thread sleep but what this should mean is if I take these off um as soon as I call await it's",
    "start": "2269200",
    "end": "2276720"
  },
  {
    "text": "going to start processing other code and then it's going to come back to this the result of this when that's been",
    "start": "2276720",
    "end": "2282640"
  },
  {
    "text": "processed so whilst they both wait for a second the result should come through in more or less the same amount of time",
    "start": "2282640",
    "end": "2288800"
  },
  {
    "text": "because we're just waiting on the execution to happen and then waiting for the result later so I'm going to pin",
    "start": "2288800",
    "end": "2294640"
  },
  {
    "text": "this to the side just so we can hopefully see it in real time happening if I click continue it's going to do Oh",
    "start": "2294640",
    "end": "2301839"
  },
  {
    "text": "no okay whatever came back with two different counts of wines um only twice",
    "start": "2301839",
    "end": "2306880"
  },
  {
    "text": "there that could be 10 just like before final uh option here is using",
    "start": "2306880",
    "end": "2312960"
  },
  {
    "text": "parallel inn net so parallel is a nice feature that allows us to run multiple",
    "start": "2312960",
    "end": "2318720"
  },
  {
    "text": "uh run the same amount of code but on multiple different uh threads simultaneously this time it's going to",
    "start": "2318720",
    "end": "2323760"
  },
  {
    "text": "go and call this service 50 times and you can start to see whilst these were more slower and and waiting for a second",
    "start": "2323760",
    "end": "2330079"
  },
  {
    "text": "each time these will still wait for a second but they're going to wait for a second on many different threads so as",
    "start": "2330079",
    "end": "2335839"
  },
  {
    "text": "this happens you'll start to see results come in sort of sporadically uh throughout that time with all different",
    "start": "2335839",
    "end": "2343200"
  },
  {
    "text": "uh things being computed here too so if you're trying to do a big batch task processing lots of data that's actually",
    "start": "2343200",
    "end": "2348800"
  },
  {
    "text": "a really great way to go you're not waiting for that one second each time it's going to wait for a second on every",
    "start": "2348800",
    "end": "2354960"
  },
  {
    "text": "thread uh independently of each other and aggregate the results for you so if you don't care about order those sorts",
    "start": "2354960",
    "end": "2361119"
  },
  {
    "text": "of things parallel is a great way to do",
    "start": "2361119",
    "end": "2364640"
  },
  {
    "text": "it lifetimes and disposal um people should be familiar with the idea that a",
    "start": "2367640",
    "end": "2374160"
  },
  {
    "text": "static class innet um lives um basically for the lifetime of the uh of the",
    "start": "2374160",
    "end": "2379839"
  },
  {
    "text": "application or until it's disposed of um well when we're doing things like dependency injection people seem to",
    "start": "2379839",
    "end": "2386240"
  },
  {
    "text": "forget about all of this sort of thing um .NET has out of the box three concepts for dependency injection things",
    "start": "2386240",
    "end": "2391920"
  },
  {
    "text": "like transient things like uh scoped um and things like singleton so you really",
    "start": "2391920",
    "end": "2399040"
  },
  {
    "text": "need to think about what your classes are doing when you inject them places and also when you create new instances",
    "start": "2399040",
    "end": "2404960"
  },
  {
    "text": "of classes what the lifetime of that class is does it get uh disposed of you know automatically is it holding on to",
    "start": "2404960",
    "end": "2411119"
  },
  {
    "text": "data in the background that you don't don't necessarily know about so in my example over here if we jump to my",
    "start": "2411119",
    "end": "2417440"
  },
  {
    "text": "lifetimes demo I've set up exactly that same thing my uh data as you've seen it up",
    "start": "2417440",
    "end": "2423920"
  },
  {
    "text": "till now keeps trying to open things in another window lifetimes there we go my",
    "start": "2423920",
    "end": "2430880"
  },
  {
    "text": "my data as you've seen up till now is completely randomized every single time that we call that service it's it's",
    "start": "2430880",
    "end": "2436960"
  },
  {
    "text": "completely new data um which is fun um because what it means is if we do inject",
    "start": "2436960",
    "end": "2443280"
  },
  {
    "text": "my uh wine service as a transient class it will create a new instance of that every time we try and use it and then uh",
    "start": "2443280",
    "end": "2450400"
  },
  {
    "text": "it will uh create a new collection of those items as well every single time",
    "start": "2450400",
    "end": "2455760"
  },
  {
    "text": "it's doing a lot of work each time that we don't necessarily need same demo as before looping 10 times over this class",
    "start": "2455760",
    "end": "2463440"
  },
  {
    "text": "and what we should see is it comes back with 10 completely different uh",
    "start": "2463440",
    "end": "2471560"
  },
  {
    "text": "results so four five four you get the idea um but if we",
    "start": "2471560",
    "end": "2478960"
  },
  {
    "text": "change that to be a singleton class it's going to create one instance",
    "start": "2478960",
    "end": "2486079"
  },
  {
    "text": "and it's going to keep a copy of those uh items in memory around for a little while",
    "start": "2486079",
    "end": "2492160"
  },
  {
    "text": "unpinned itself four four and here it's just",
    "start": "2492160",
    "end": "2498720"
  },
  {
    "text": "returning the exact same result every single time if your service is doing something like going and fetching data",
    "start": "2498720",
    "end": "2504160"
  },
  {
    "text": "from an API and you only need to do that once up front make it singleton it shouldn't need to be created uh there",
    "start": "2504160",
    "end": "2510240"
  },
  {
    "text": "shouldn't need to be a new instance of it created each time you shouldn't need to get that data every single time this would be the equivalent as well of me",
    "start": "2510240",
    "end": "2516240"
  },
  {
    "text": "turning my uh my uh collection into a static collection that gets put on the",
    "start": "2516240",
    "end": "2522079"
  },
  {
    "text": "uh the gen 2 heap and then kept around something else I see done wrong",
    "start": "2522079",
    "end": "2528160"
  },
  {
    "text": "time and time again by people is using things like",
    "start": "2528160",
    "end": "2533400"
  },
  {
    "text": "uh memory caches wrong um Visual Studios decided to go to sleep no there we go",
    "start": "2533400",
    "end": "2541440"
  },
  {
    "text": "yeah people using memory caches wrong is something I see a lot um in this case I've created a an instance of the the",
    "start": "2541440",
    "end": "2548560"
  },
  {
    "text": "memory cache this will just store some data in memory i've then got my uh wine service and I'm making sure that I write",
    "start": "2548560",
    "end": "2554720"
  },
  {
    "text": "that data straight into um into memory and so I can read that value out of",
    "start": "2554720",
    "end": "2560800"
  },
  {
    "text": "memory going forward which is cool except this is not actually what's happening at all um here I'm writing an",
    "start": "2560800",
    "end": "2568000"
  },
  {
    "text": "innumerable to memory and an innumerable if you remember from before is a lazy evaluated collection so this is just",
    "start": "2568000",
    "end": "2574960"
  },
  {
    "text": "storing an instruction in memory to say here's how you go and get that data it's",
    "start": "2574960",
    "end": "2580400"
  },
  {
    "text": "not actually got the data at this point so realistically you need to evaluate",
    "start": "2580400",
    "end": "2586079"
  },
  {
    "text": "this data before you write it into memory um the same would be a lot of these methods allow you to pass in like",
    "start": "2586079",
    "end": "2591839"
  },
  {
    "text": "a funk i see this done all the time where people cache the result of a funk all you're doing there is caching the",
    "start": "2591839",
    "end": "2598000"
  },
  {
    "text": "instruction of how to call that code it's not doing anything for you it's just going to go and call that every",
    "start": "2598000",
    "end": "2603040"
  },
  {
    "text": "single time you get it out of the cache so uh to show this hopefully uh we",
    "start": "2603040",
    "end": "2608680"
  },
  {
    "text": "can chuck our breakpoint back on our collection which is over",
    "start": "2608680",
    "end": "2615240"
  },
  {
    "text": "here and what we'd expect to see is that every time we loop over this I'll just",
    "start": "2615240",
    "end": "2620480"
  },
  {
    "text": "make that um transient again every time we loop over this collection we should",
    "start": "2620480",
    "end": "2626160"
  },
  {
    "text": "expect to see that enumerator gets called so the same code is actually getting called each",
    "start": "2626160",
    "end": "2632319"
  },
  {
    "text": "time i'll pin it over here again so you can see there it's getting called every",
    "start": "2639319",
    "end": "2644800"
  },
  {
    "text": "single time we loop um however if we change this code",
    "start": "2644800",
    "end": "2650960"
  },
  {
    "text": "slightly there we go if we change this code slightly uh that we had before and make it so that we're just caching say",
    "start": "2652040",
    "end": "2659920"
  },
  {
    "text": "the array itself actually turning it into a physical array we'll see that get called once the first time and then",
    "start": "2659920",
    "end": "2667040"
  },
  {
    "text": "hopefully never again what was that",
    "start": "2667040",
    "end": "2674839"
  },
  {
    "text": "you might be right yes you're right thank you anyway um so yes you need to",
    "start": "2676480",
    "end": "2682960"
  },
  {
    "text": "make sure that this value is basically being written into the uh the memory cache and not the result or not the",
    "start": "2682960",
    "end": "2688240"
  },
  {
    "text": "function call that you want to do um I see that I've seen this cause huge performance problems in real production",
    "start": "2688240",
    "end": "2693680"
  },
  {
    "text": "systems where it's impossible seemingly to work out what's going on because you're getting the data you expect",
    "start": "2693680",
    "end": "2699119"
  },
  {
    "text": "you're you're seeing the services that you expect to be called get called they're just getting called far too frequently again doing more work than we",
    "start": "2699119",
    "end": "2706079"
  },
  {
    "text": "want to do and uh yeah ending up with slightly inefficient",
    "start": "2706079",
    "end": "2711839"
  },
  {
    "text": "code okay I've showed you some of the ways we can inadvertently introduce",
    "start": "2714280",
    "end": "2719359"
  },
  {
    "text": "inefficient code into our applications now let's talk about what we can do to avoid them and uh the processes in which",
    "start": "2719359",
    "end": "2725440"
  },
  {
    "text": "uh you can make some differences in your team firstly benchmarking benchmarking is a huge uh hugely valuable tool if you",
    "start": "2725440",
    "end": "2733200"
  },
  {
    "text": "don't know if one way of doing something is more efficient than the other because it will really depend on your case the",
    "start": "2733200",
    "end": "2738800"
  },
  {
    "text": "libraries you're working with etc you should benchmark it benchmark.net is a unbelievably powerful library that lets",
    "start": "2738800",
    "end": "2745839"
  },
  {
    "text": "you do benchmarking directly innet and um this is great because if you're ever",
    "start": "2745839",
    "end": "2751760"
  },
  {
    "text": "unsure of yeah what if something's fast or not you can very quickly two three",
    "start": "2751760",
    "end": "2757520"
  },
  {
    "text": "lines of code write a test that will tell you if it's fast or not uh similarly if you've got internal",
    "start": "2757520",
    "end": "2763520"
  },
  {
    "text": "applications that you're building and you want to make sure that um benchm that your code is performant and",
    "start": "2763520",
    "end": "2769359"
  },
  {
    "text": "remaining performant over time you can write benchmark.net net tests that say run in your CI pipeline and report and",
    "start": "2769359",
    "end": "2775280"
  },
  {
    "text": "say actually at this commit you've introduced a change that meant this code that was super efficient before is now",
    "start": "2775280",
    "end": "2781440"
  },
  {
    "text": "taking 10 times as long you can write specific tests around that I have another demo so benchmark.net here um",
    "start": "2781440",
    "end": "2789440"
  },
  {
    "text": "let's fire up our example benchmarks you install it as a nuette package and I'm now really",
    "start": "2789440",
    "end": "2796000"
  },
  {
    "text": "interested in learning whether comparing uh the string builder innet to com to",
    "start": "2796000",
    "end": "2802319"
  },
  {
    "text": "concatenate the words hello and world together is faster than using string cat",
    "start": "2802319",
    "end": "2808480"
  },
  {
    "text": "uh string concat or just raw concatenation or even string format or",
    "start": "2808480",
    "end": "2814079"
  },
  {
    "text": "string join or string interpolation there's all these different ways of doing this exact same problem in .NET",
    "start": "2814079",
    "end": "2819839"
  },
  {
    "text": "and uh yeah anyone want to take a guess at what's faster what's what's the",
    "start": "2819839",
    "end": "2825680"
  },
  {
    "text": "fastest approach here okay I think there was a few",
    "start": "2825680",
    "end": "2831040"
  },
  {
    "text": "murmurss there some mixed some mixed ideas though uh in theory Microsoft should be making their their new uh nice",
    "start": "2831040",
    "end": "2837839"
  },
  {
    "text": "ways of doing things um as optimized as possible i think the reality is the",
    "start": "2837839",
    "end": "2843359"
  },
  {
    "text": "string builder in this case is still the most efficient even though it's the most verbose which is slightly crazy to think",
    "start": "2843359",
    "end": "2850240"
  },
  {
    "text": "but the point still stands what I've done here is I've created a class i've decorated it with an attribute that says",
    "start": "2850240",
    "end": "2856079"
  },
  {
    "text": "this is the test I want you to run and it's going to go and run three instances 10 times and then aggregate the results",
    "start": "2856079",
    "end": "2862880"
  },
  {
    "text": "and it will just call each of these functions and test how long they took to run um similarly down here I've got",
    "start": "2862880",
    "end": "2869520"
  },
  {
    "text": "another test that does uh benchmarking of nulls and null checking um so here",
    "start": "2869520",
    "end": "2874560"
  },
  {
    "text": "we're checking if the value is null if the value does not equal null using the is check to check if it's uh to do a",
    "start": "2874560",
    "end": "2882240"
  },
  {
    "text": "type check and is not check is null check is not null anyone have any guesses at what might be the most",
    "start": "2882240",
    "end": "2889359"
  },
  {
    "text": "effective fastest way of checking for null innet nowadays i think it's equal someone else",
    "start": "2889359",
    "end": "2898920"
  },
  {
    "text": "is yeah so uh we'll run the tests and and find out because I don't want to spoil things too much but we we tell our",
    "start": "2898920",
    "end": "2904880"
  },
  {
    "text": "benchmark runner here's our tests and we click run so um I've just got to switch this to release mode because it's a a",
    "start": "2904880",
    "end": "2911680"
  },
  {
    "text": "fairer test and benchmark.net will scream at me otherwise um and what you're going to start to see here is it's going to run through all of those",
    "start": "2911680",
    "end": "2918720"
  },
  {
    "text": "uh benchmarks that I've actually registered and it's going to test this on a number of different um potential",
    "start": "2918720",
    "end": "2925200"
  },
  {
    "text": "configurations it's testing each operation 10 times it's doing that on 30 different on uh instances for each of",
    "start": "2925200",
    "end": "2932079"
  },
  {
    "text": "those classes just to get a fair result um there was a result up there if I can scroll up and get to it fantastic so",
    "start": "2932079",
    "end": "2938720"
  },
  {
    "text": "we've got our uh got our result oh okay should have put a break point never mind",
    "start": "2938720",
    "end": "2945559"
  },
  {
    "text": "um it gives us a little table of our results you can imagine that can be output into your your build outputs in",
    "start": "2945559",
    "end": "2951200"
  },
  {
    "text": "your CI server you can store that somewhere um and it can be uh very helpful what was the result here let's",
    "start": "2951200",
    "end": "2957280"
  },
  {
    "text": "see okay so is was uh 60 mill 60 nonds is not was 50 nconds um is null is not",
    "start": "2957280",
    "end": "2966319"
  },
  {
    "text": "null so it looks like the is checks are significantly more more efficient than doing the equals check in uh inn net so",
    "start": "2966319",
    "end": "2974800"
  },
  {
    "text": "that's a great way to learn um and of course a very simple basic example of something that is uh",
    "start": "2974800",
    "end": "2983400"
  },
  {
    "text": "thank you I did yes I did thank you yes I did yes so",
    "start": "2983680",
    "end": "2991119"
  },
  {
    "text": "really we should be looking at the mean column here and in in this case I mean it's approximately still approximately",
    "start": "2991119",
    "end": "2997040"
  },
  {
    "text": "still the same thing um but anyway yeah you get a nice little table output of of",
    "start": "2997040",
    "end": "3002720"
  },
  {
    "text": "the uh the different results let's say you've got a",
    "start": "3002720",
    "end": "3009280"
  },
  {
    "text": "performance problem in production let's say you've got all your benchmarks in there and actually it's got to",
    "start": "3009280",
    "end": "3014720"
  },
  {
    "text": "production and you're now uh having some issues there's some great tools by uh the teams at Redgate and the teams at um",
    "start": "3014720",
    "end": "3021359"
  },
  {
    "text": "Jet Brains that have yeah made some fantastic tools for you to profile your applications ants memory profiler and",
    "start": "3021359",
    "end": "3026880"
  },
  {
    "text": "ants performance profiler also domemory and dot trace really interesting tools that let you get into exactly why your",
    "start": "3026880",
    "end": "3033760"
  },
  {
    "text": "application is running inefficiently that could be code being executed more than you expect it could be uh an",
    "start": "3033760",
    "end": "3039760"
  },
  {
    "text": "unnecessary large number of allocations um this allows you to literally peek directly at all of the data that's",
    "start": "3039760",
    "end": "3046240"
  },
  {
    "text": "stored on all of your various heaps to see exactly what's happening there",
    "start": "3046240",
    "end": "3051359"
  },
  {
    "text": "microsoft also has a really fantastic tool that is not pretty but it works really well um and I've needed to",
    "start": "3051359",
    "end": "3058559"
  },
  {
    "text": "diagnose production uh issues with you know excessive memory usage and here you",
    "start": "3058559",
    "end": "3064559"
  },
  {
    "text": "can basically see the garbage collector in action you've got your gen 0 one and two um counts this is just telling you",
    "start": "3064559",
    "end": "3071599"
  },
  {
    "text": "the number of uh bytes that are in each of those heaps and you should start to see these numbers over time slowly",
    "start": "3071599",
    "end": "3079119"
  },
  {
    "text": "increase and then decrease and decrease if one of these is excessively increasing then it's pretty obvious",
    "start": "3079119",
    "end": "3085280"
  },
  {
    "text": "you've got an issue this tool that I'm showing you here is called net counters you can download it from Microsoft Learn",
    "start": "3085280",
    "end": "3090960"
  },
  {
    "text": "um and it effectively just gives you the metrics for the process that you've got running you've then got another tool",
    "start": "3090960",
    "end": "3096640"
  },
  {
    "text": "called net dump which allows you to export a memory dump of your application",
    "start": "3096640",
    "end": "3101680"
  },
  {
    "text": "running in production and you can pull this into even visual studio and see this directly in uh yeah you know drill",
    "start": "3101680",
    "end": "3109760"
  },
  {
    "text": "into exactly what what data is being stored there and finally you've got net trace which you can open in a trace",
    "start": "3109760",
    "end": "3116880"
  },
  {
    "text": "viewer tool um and see exactly where your code is you know which code's being",
    "start": "3116880",
    "end": "3122079"
  },
  {
    "text": "called and uh what data is being stored and exactly the values uh in this case this screenshot is actually from a uh a",
    "start": "3122079",
    "end": "3129920"
  },
  {
    "text": "site of ours where a bunch of ids were being stored in memory and not sort of let go of um but yeah these three tools",
    "start": "3129920",
    "end": "3137200"
  },
  {
    "text": "on the side invaluable not friendly but really really good and you can get a a really nice idea just like this of of",
    "start": "3137200",
    "end": "3144559"
  },
  {
    "text": "how your application's actually performing if you suspect you have a memory leak this will tell you within a couple of seconds because you'll see",
    "start": "3144559",
    "end": "3149839"
  },
  {
    "text": "that number ever increasing i should give a shout out as",
    "start": "3149839",
    "end": "3155440"
  },
  {
    "text": "well to some of these amazing um off-the-shelf tools commercial tools even that does that do this actively for",
    "start": "3155440",
    "end": "3162000"
  },
  {
    "text": "your application so if you've got an application running in say Azure you've got application insights which has",
    "start": "3162000",
    "end": "3168079"
  },
  {
    "text": "really good memory profiling tools that most people probably don't touch and probably haven't seen um equally if",
    "start": "3168079",
    "end": "3174640"
  },
  {
    "text": "you're using uh data dog data dog's got some fantastic tools as well and uh some people I'm going to talk about in a in a",
    "start": "3174640",
    "end": "3181040"
  },
  {
    "text": "couple of moments um actively work on data dog doing awesome work around net uh memory profiling and enhancements",
    "start": "3181040",
    "end": "3191480"
  },
  {
    "text": "okay so this is what it's all all accumulating to really the billion row challenge uh anyone in the room gave",
    "start": "3191559",
    "end": "3198160"
  },
  {
    "text": "this a go or at least heard of it couple of people nice so the billion row challenge is a a challenge that actually",
    "start": "3198160",
    "end": "3204720"
  },
  {
    "text": "spawned I think out of the Java community and the idea was you have a text file with a billion rows in that",
    "start": "3204720",
    "end": "3211920"
  },
  {
    "text": "text file and the text data is all names of weather stations and uh values that",
    "start": "3211920",
    "end": "3218400"
  },
  {
    "text": "they have read for temperatures and what you need to do is write the most efficient code possible to read in that",
    "start": "3218400",
    "end": "3225440"
  },
  {
    "text": "text file to optim to calculate the averages for each of those weather",
    "start": "3225440",
    "end": "3230800"
  },
  {
    "text": "stations and then return the result sorted",
    "start": "3230800",
    "end": "3235599"
  },
  {
    "text": "alphabetically each file uh the single file contains the list of weather stations they are separated the readings",
    "start": "3236839",
    "end": "3242640"
  },
  {
    "text": "are separated by a semicolon um you need to return the min the max and the mean values for each of those stations and",
    "start": "3242640",
    "end": "3248240"
  },
  {
    "text": "return that in an alphabetical order so I uh flexed my uh link muscles and",
    "start": "3248240",
    "end": "3254160"
  },
  {
    "text": "decided to write the uh the friendliest version of this I possibly could um in",
    "start": "3254160",
    "end": "3259920"
  },
  {
    "text": "this case this is yeah at the top reading in my records.txt it synchronously reads uh every single line",
    "start": "3259920",
    "end": "3266880"
  },
  {
    "text": "and that takes a fair amount of time it then splits all of the lines by something so I end up with a a list",
    "start": "3266880",
    "end": "3273520"
  },
  {
    "text": "there or an I innumerable of string arrays i then create a lookup in link i",
    "start": "3273520",
    "end": "3280319"
  },
  {
    "text": "use uh a function there to effectively parse the readings out as integers and",
    "start": "3280319",
    "end": "3287040"
  },
  {
    "text": "uh store those values and then I loop over it finally that whole list of look",
    "start": "3287040",
    "end": "3292160"
  },
  {
    "text": "that whole lookup and I output the result that I want written to the console in the end and then I at the end",
    "start": "3292160",
    "end": "3299520"
  },
  {
    "text": "just alphabetize it this is not the way to do it this took about six minutes to run on my uh very very powerful MacBook",
    "start": "3299520",
    "end": "3307520"
  },
  {
    "text": "and uh is certainly not what you'd want to do however some far smarter people than me have uh have given this a go and",
    "start": "3307520",
    "end": "3314960"
  },
  {
    "text": "our friend Mark Rendle who's uh here he's speaking uh this week has also uh",
    "start": "3314960",
    "end": "3321200"
  },
  {
    "text": "had a go at this and he's created some fantastic results and they're all open on his GitHub i should uh just show you",
    "start": "3321200",
    "end": "3327680"
  },
  {
    "text": "first this is his uh first result it took two minutes and and two seconds",
    "start": "3327680",
    "end": "3334240"
  },
  {
    "text": "basically to execute and down here he's got a billion rows being executed in five seconds the exact same data list",
    "start": "3334240",
    "end": "3342559"
  },
  {
    "text": "the exact same file but he is optimized the code now this shows you possibly the",
    "start": "3342559",
    "end": "3348480"
  },
  {
    "text": "lengths of which Mark has gone to um he's got a graveyard here of all of his different attempts and there's a lot of",
    "start": "3348480",
    "end": "3354480"
  },
  {
    "text": "code written here a lot of code um when we dive into the program you'll see it's",
    "start": "3354480",
    "end": "3359680"
  },
  {
    "text": "fairly straightforward but what he's actually ended up doing is uh creating his own file reader his own Yeah like",
    "start": "3359680",
    "end": "3368640"
  },
  {
    "text": "memory memory things like it's it's really really crazy so you can see in here he's doing things with with",
    "start": "3368640",
    "end": "3374480"
  },
  {
    "text": "pointers and yeah it starts to get slightly slightly excessive um but",
    "start": "3374480",
    "end": "3380880"
  },
  {
    "text": "that's what's involved in if you really want to get your code down from from 2 minutes to 5 seconds if you're building",
    "start": "3380880",
    "end": "3386799"
  },
  {
    "text": "a financial trading platform this is the kind of optimization that you do and you end up writing less friendly code but",
    "start": "3386799",
    "end": "3392960"
  },
  {
    "text": "the trade-off is far far more efficient and performant uh in this case Mark also ran this on a MacBook so similar to my",
    "start": "3392960",
    "end": "3399920"
  },
  {
    "text": "benchmark 5 minutes 2 minutes 5 seconds uh really impressive um there's a whole",
    "start": "3399920",
    "end": "3406720"
  },
  {
    "text": "bunch of people who have got it even less than this people doing things in like Rust that have managed to get it",
    "start": "3406720",
    "end": "3411760"
  },
  {
    "text": "down to like half a second or something insane um but yeah pe people have have",
    "start": "3411760",
    "end": "3417119"
  },
  {
    "text": "had a lot of fun with this okay I'm going to give you some homework if that's all right um firstly",
    "start": "3417119",
    "end": "3424480"
  },
  {
    "text": "Daniel um he is doing a talk tomorrow about benchmarking specifically and he's going to go really deep into that if",
    "start": "3424480",
    "end": "3430960"
  },
  {
    "text": "benchmarking and uh profiling your applications is something you're interested in I highly recommend checking out Daniel's session um yeah we",
    "start": "3430960",
    "end": "3438559"
  },
  {
    "text": "were chatting before this and I think I think it's going to be very uh very insightful secondly um so Kevin Grath",
    "start": "3438559",
    "end": "3445680"
  },
  {
    "text": "and uh Christoph Nar they uh work with data dog and they are uh some incredibly",
    "start": "3445680",
    "end": "3451680"
  },
  {
    "text": "smart people working on net performance but this book by Conrad Kakosa on the uh",
    "start": "3451680",
    "end": "3456720"
  },
  {
    "text": "left hand side here is effectively the bible often net performance and when I say the bible it's about this thick as",
    "start": "3456720",
    "end": "3462720"
  },
  {
    "text": "well it's huge there is a second edition coming out very soon um and it's a bit thinner um and he's collaborated with",
    "start": "3462720",
    "end": "3470079"
  },
  {
    "text": "Kevin and Kristoff to make the most uh the best pro net memory management",
    "start": "3470079",
    "end": "3477119"
  },
  {
    "text": "book of of tips and tricks so if you're really interested in optimizing memory go and get this book first edition or",
    "start": "3477119",
    "end": "3482559"
  },
  {
    "text": "the second one that's coming out soon uh additionally Pro.net uh benchmarking this is actually written by the author",
    "start": "3482559",
    "end": "3488799"
  },
  {
    "text": "of benchmark.net he's created a wonderful book on how you would benchmark your applications as well a",
    "start": "3488799",
    "end": "3494240"
  },
  {
    "text": "bit thinner that one um highly recommend this book too so if you're interested in reading up more on these and and",
    "start": "3494240",
    "end": "3499760"
  },
  {
    "text": "actually implementing some of these at a larger scale perhaps in say a financial environment these books are what you",
    "start": "3499760",
    "end": "3506880"
  },
  {
    "text": "need to rely on and with that I'm nearly out of time thank you very much everybody um the",
    "start": "3506880",
    "end": "3512880"
  },
  {
    "text": "code I've showed you today is on my GitHub i'm on Twitter and uh enjoy the",
    "start": "3512880",
    "end": "3518000"
  },
  {
    "text": "rest of the event",
    "start": "3518000",
    "end": "3521319"
  }
]