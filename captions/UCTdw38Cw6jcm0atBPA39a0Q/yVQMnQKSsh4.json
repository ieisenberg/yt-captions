[
  {
    "text": "all right yep we're good okay so thank you everybody for coming",
    "start": "4140",
    "end": "11160"
  },
  {
    "text": "um we have a very very big room very full room so thank you very much for coming and choosing me over all the",
    "start": "11160",
    "end": "16740"
  },
  {
    "text": "others so um thank you very much so today we're going to be talking about operable",
    "start": "16740",
    "end": "22500"
  },
  {
    "text": "software and more specifically about how we build that using tdd",
    "start": "22500",
    "end": "27539"
  },
  {
    "text": "and it's not necessarily the way you think it might be it might not but um for a lot of people and in my experience",
    "start": "27539",
    "end": "33420"
  },
  {
    "text": "it's not so who am I so my name is Martin Thwaites I go by martin.net on the twitters follow me for um stuff",
    "start": "33420",
    "end": "40680"
  },
  {
    "text": "about observability with a hint of British snark in there so you've been warned",
    "start": "40680",
    "end": "45899"
  },
  {
    "text": "um I'm first and foremost an observability advocate so I have for many many years been pushing",
    "start": "45899",
    "end": "52620"
  },
  {
    "text": "the ideas around observability and observing systems that kind of stuff um I'm also a developer advocate for a",
    "start": "52620",
    "end": "58199"
  },
  {
    "text": "company called honeycomb we have a booth concealers blah blah blah you all know the thing okay so",
    "start": "58199",
    "end": "64260"
  },
  {
    "text": "um before we get into the agenda I want to talk a little bit about the motivations for doing this talk so before I work for honeycomb I spent many",
    "start": "64260",
    "end": "70680"
  },
  {
    "text": "many years Consulting and for the last two years I've spent um the time building a",
    "start": "70680",
    "end": "76260"
  },
  {
    "text": "um a credit lending Bank platform it's not really relevant other than the fact that it's um very it needs to be very very",
    "start": "76260",
    "end": "81479"
  },
  {
    "text": "consistent it needs to be up all the time so completeness and things like that are really really important and",
    "start": "81479",
    "end": "87240"
  },
  {
    "text": "what we found was the ways that people were writing tests the way that people were building the software wasn't really",
    "start": "87240",
    "end": "93360"
  },
  {
    "text": "building it in a way that you could run it in a bank and we want it to go full CD and all of that kind of stuff which",
    "start": "93360",
    "end": "99020"
  },
  {
    "text": "requires a few more things so we built over the last two years a way of doing things that we believe is really really",
    "start": "99020",
    "end": "106380"
  },
  {
    "text": "good um and that's what I'm here to talk about today which is the reason why I love talking about it because I'm",
    "start": "106380",
    "end": "111840"
  },
  {
    "text": "basically talking about what I've done for the last two years so cool um so what we're going to do today we're",
    "start": "111840",
    "end": "117180"
  },
  {
    "text": "going to go through um what I consider operable software um we're going to talk a little bit about how as an industry we toss we test",
    "start": "117180",
    "end": "124200"
  },
  {
    "text": "software right now we're also going to talk about something called outside in testing and then we're going to talk about how",
    "start": "124200",
    "end": "130140"
  },
  {
    "text": "does observability fit into this whole thing um now some of these terms will be things that you know some of them they",
    "start": "130140",
    "end": "135599"
  },
  {
    "text": "won't some of them they'll be new but hopefully what I'm doing here is I'm going to bring together a load of",
    "start": "135599",
    "end": "140879"
  },
  {
    "text": "Concepts that exist in books and blogs and all that kind of stuff and give you",
    "start": "140879",
    "end": "146160"
  },
  {
    "text": "a practical way that you can use them to make your software better Okay so",
    "start": "146160",
    "end": "152220"
  },
  {
    "text": "let's start by talking about operable software what is it we mean by operable software or what is it I mean by",
    "start": "152220",
    "end": "158400"
  },
  {
    "text": "operable software more specifically now for me it's building for production",
    "start": "158400",
    "end": "163739"
  },
  {
    "text": "too many times people build for their local development environment they are fine you know we all know the term it",
    "start": "163739",
    "end": "169500"
  },
  {
    "text": "runs on my machine that kind of stuff we build for that environment of our local machine building operable software is",
    "start": "169500",
    "end": "175319"
  },
  {
    "text": "software that's built to operate in production so it's built to run on production servers it's built to run in",
    "start": "175319",
    "end": "181680"
  },
  {
    "text": "a production environment and that's what we're building for that's what we're catering for we're not catering for a localized Docker container we're",
    "start": "181680",
    "end": "188580"
  },
  {
    "text": "building for that production environment and that's our primary concern because anything else isn't really what users",
    "start": "188580",
    "end": "193920"
  },
  {
    "text": "want it's also built with live operations in mind so I'm talking about the the Ops Team whether that's you or somebody else",
    "start": "193920",
    "end": "200580"
  },
  {
    "text": "but you're building it so that that team knows what's happening that team is",
    "start": "200580",
    "end": "207360"
  },
  {
    "text": "actually running your software the fact that it runs on your local machine is irrelevant the fact that it runs on production is",
    "start": "207360",
    "end": "213420"
  },
  {
    "text": "the most important thing and that that team whether it's you or somebody else are the people that are actually running it",
    "start": "213420",
    "end": "219239"
  },
  {
    "text": "it's also built for fast recovery you may have heard mttr I know it's falling out favor now but the idea is we need to",
    "start": "219239",
    "end": "224400"
  },
  {
    "text": "be able to recover our software fast and that is what we should be doing when we're building it we should be building it so that we think that this thing will",
    "start": "224400",
    "end": "231120"
  },
  {
    "text": "be able to fail over this thing will be able to recover quickly and all of that leads to the idea that",
    "start": "231120",
    "end": "236879"
  },
  {
    "text": "our application should be emitting some robust Telemetry signals to tell us",
    "start": "236879",
    "end": "242099"
  },
  {
    "text": "what's going on and all of this is stuff that you should be doing day in Day Out and these are",
    "start": "242099",
    "end": "247680"
  },
  {
    "text": "the things that I miss and when I see Engineers working with software is they don't see these things they're quite",
    "start": "247680",
    "end": "253560"
  },
  {
    "text": "content with hitting the big play button in Visual Studio putting the debugger on yes it works great ship it",
    "start": "253560",
    "end": "259139"
  },
  {
    "text": "um which is only part of building software you build it for the production systems",
    "start": "259139",
    "end": "264300"
  },
  {
    "text": "you build it for users now what do we when we say software",
    "start": "264300",
    "end": "269520"
  },
  {
    "text": "what is it we mean because well we write code we write applications",
    "start": "269520",
    "end": "274800"
  },
  {
    "text": "but that's only part of it the software that you build is everything",
    "start": "274800",
    "end": "281040"
  },
  {
    "text": "it's your application it's the test that you write to prove that your application works",
    "start": "281040",
    "end": "287040"
  },
  {
    "text": "it's your CI CD pipelines that allow you to do that in a centralized environment that allow you to deploy this code to",
    "start": "287040",
    "end": "294180"
  },
  {
    "text": "production it's the infrastructure that hosts your platform",
    "start": "294180",
    "end": "300180"
  },
  {
    "text": "but it's also the tooling from your observability tooling that allows you to know whether that",
    "start": "300180",
    "end": "305940"
  },
  {
    "text": "system is running all of that is the stuff that you build that is your software that is the boundaries of the thing that you're",
    "start": "305940",
    "end": "311759"
  },
  {
    "text": "building it's not the little application bit in the middle because if you build an application and",
    "start": "311759",
    "end": "316919"
  },
  {
    "text": "you don't know that it's running it is not running so",
    "start": "316919",
    "end": "322380"
  },
  {
    "text": "let's talk a bit about testing and more specifically about CDD because it is the new hotness well old",
    "start": "322380",
    "end": "329580"
  },
  {
    "text": "hotness medium hotness some hotness in there somewhere it's been around for many many years and",
    "start": "329580",
    "end": "336660"
  },
  {
    "text": "it's often done very very wrong in my opinion um I'm going to prefix the entire talk",
    "start": "336660",
    "end": "343139"
  },
  {
    "text": "with this is my opinion okay um so what do I mean by tdd",
    "start": "343139",
    "end": "350880"
  },
  {
    "text": "contract first now when we talk about doing things tdd",
    "start": "350880",
    "end": "356639"
  },
  {
    "text": "we're talking about working out how something interacts with our system first we're defining how somebody thinks",
    "start": "356639",
    "end": "362940"
  },
  {
    "text": "going to interact we're defining a behavior Within doing red green V Factor",
    "start": "362940",
    "end": "369539"
  },
  {
    "text": "most important bit being the refactor which everybody misses but you know hey ho",
    "start": "369539",
    "end": "374699"
  },
  {
    "text": "um but we're also talking about test first and implementation that's the most important thing when we talk about tdd",
    "start": "374699",
    "end": "381060"
  },
  {
    "text": "now the thing is you'll notice there I've not mentioned a class",
    "start": "381060",
    "end": "386639"
  },
  {
    "text": "I've not mentioned a method I've not mentioned moq that's tdd",
    "start": "386639",
    "end": "394139"
  },
  {
    "text": "now I'm not saying I knew up a class I'm not saying that I inject all my",
    "start": "394139",
    "end": "399419"
  },
  {
    "text": "dependencies you're in moq using moq that's tdd however",
    "start": "399419",
    "end": "405720"
  },
  {
    "text": "tdd is often misunderstood as mock all the things",
    "start": "405720",
    "end": "411840"
  },
  {
    "text": "um I don't know I think my my biggest class that I've seen somebody mock had 42",
    "start": "411840",
    "end": "418259"
  },
  {
    "text": "injections into the Constructor um and they were writing tests around that",
    "start": "418259",
    "end": "424380"
  },
  {
    "text": "and it's but they were writing tdd because they write the the test and then they do the",
    "start": "424380",
    "end": "430020"
  },
  {
    "text": "implementation but they inject up sorry trauma",
    "start": "430020",
    "end": "435419"
  },
  {
    "text": "um but it's also misconstrued as well as the the idea of single method tests I",
    "start": "435419",
    "end": "442080"
  },
  {
    "text": "have a single method I test that method I inject some things and I make sure",
    "start": "442080",
    "end": "448020"
  },
  {
    "text": "that my mock has been hit because that's what we do with tdd and it's really really not so",
    "start": "448020",
    "end": "455340"
  },
  {
    "text": "if we talk about tdd and we talk about why is it good why do we want to do tdd what's the reason why we should do tdd",
    "start": "455340",
    "end": "462900"
  },
  {
    "text": "because it's not got any benefits then we should all stop doing it but it does have benefits",
    "start": "462900",
    "end": "468780"
  },
  {
    "text": "so the biggest thing for me about tdd is it improves the design of our system",
    "start": "468780",
    "end": "474000"
  },
  {
    "text": "because we're writing a client that uses these methods and if we can't use our",
    "start": "474000",
    "end": "479039"
  },
  {
    "text": "methods if they don't make sense to us when we're writing them then sorry they're wrong if we have to pass in 15",
    "start": "479039",
    "end": "484680"
  },
  {
    "text": "parameters instead of passing in a complex object probably not the right thing to do because we're struggling to",
    "start": "484680",
    "end": "490440"
  },
  {
    "text": "use it and if you're struggling to use it then other people are struggling to use it so using tdd as a method to be",
    "start": "490440",
    "end": "496380"
  },
  {
    "text": "able to write our code helps us enhance those contracts",
    "start": "496380",
    "end": "501840"
  },
  {
    "text": "it also improves our own understanding of our code base because we're using it we're using these",
    "start": "501840",
    "end": "508020"
  },
  {
    "text": "classes we haven't just written wrote that class and then used a service to call that class we're actually using it",
    "start": "508020",
    "end": "513300"
  },
  {
    "text": "in various different ways so we understand how that code should be interacting what the outputs are",
    "start": "513300",
    "end": "518580"
  },
  {
    "text": "so our own understanding of our code base will increase",
    "start": "518580",
    "end": "523979"
  },
  {
    "text": "we also are documenting how our code works because that's what your tests are doing",
    "start": "523979",
    "end": "529680"
  },
  {
    "text": "your tests are using it and if you've wrote them properly then your documentation is actually in",
    "start": "529680",
    "end": "535260"
  },
  {
    "text": "your code in your tests so you don't need to write comments you",
    "start": "535260",
    "end": "540360"
  },
  {
    "text": "don't need to write God forbid Confluence documents about all of your code",
    "start": "540360",
    "end": "547380"
  },
  {
    "text": "um do write a readme just to be clear put a read menu repo",
    "start": "547380",
    "end": "552420"
  },
  {
    "text": "um it will help so why is tdd bad",
    "start": "552420",
    "end": "557880"
  },
  {
    "text": "um so the problem I see with tdd and these",
    "start": "557880",
    "end": "564959"
  },
  {
    "text": "aren't the the reasons why tdd is bad these are the reasons why the ways that a lot of people do tdd is bad",
    "start": "564959",
    "end": "571080"
  },
  {
    "text": "and it's not that it's bad it's just a misappropriation of effort they do",
    "start": "571080",
    "end": "577080"
  },
  {
    "text": "potentially prove some things out but that effort can be used in much much better ways",
    "start": "577080",
    "end": "582839"
  },
  {
    "text": "now the thing is tdd is normally done in the absence of consumers so you're doing tdd at your class down here",
    "start": "582839",
    "end": "590519"
  },
  {
    "text": "and you're the only user of it up here and then your users are actually all the way up here and they're using your apis",
    "start": "590519",
    "end": "597540"
  },
  {
    "text": "but your class is solid right you know you've got four thousand unit tests on this class",
    "start": "597540",
    "end": "603660"
  },
  {
    "text": "and there are you know 12 000 classes in your application but yours is solid you've got 4 000 tests",
    "start": "603660",
    "end": "610860"
  },
  {
    "text": "with the absence of these consumers here what you're doing is things in isolation and you're potentially not doing the",
    "start": "610860",
    "end": "616080"
  },
  {
    "text": "right thing you're not building the right things because you're concentrating on that class",
    "start": "616080",
    "end": "621420"
  },
  {
    "text": "the other thing is they can be brittle which is one of the annoying things um the idea that you write lots of unit",
    "start": "621420",
    "end": "628860"
  },
  {
    "text": "tests and then you do some refactoring and then you have to refactor all of your tests that means you've not really got tests",
    "start": "628860",
    "end": "634800"
  },
  {
    "text": "because I was talking to somebody recently who their entire way of doing this was if",
    "start": "634800",
    "end": "640140"
  },
  {
    "text": "they had to do some refactoring they'd delete all the tests and rewrite the tests",
    "start": "640140",
    "end": "644959"
  },
  {
    "text": "trauma um so you know that idea of making these tests so close to those classes means",
    "start": "645839",
    "end": "652620"
  },
  {
    "text": "that you can't refactor I would Hazard a guess that a large proportion of the room shies away from",
    "start": "652620",
    "end": "659399"
  },
  {
    "text": "doing refactoring on a large scale because of the amount of tests it would mean that they need to refactor and they",
    "start": "659399",
    "end": "665040"
  },
  {
    "text": "don't really know what those tests do and if you are in the here going that",
    "start": "665040",
    "end": "670860"
  },
  {
    "text": "isn't me you are lying okay so let's talk a little bit about",
    "start": "670860",
    "end": "677100"
  },
  {
    "text": "component test now everybody's I'm assuming seen this um so component testing is a subset of",
    "start": "677100",
    "end": "684240"
  },
  {
    "text": "um integration testing integration testing being a really abstract term that doesn't really mean a",
    "start": "684240",
    "end": "692399"
  },
  {
    "text": "lot of things anymore um it can mean 20 different things to 20 different people",
    "start": "692399",
    "end": "698519"
  },
  {
    "text": "um so what do we mean by component test or what do I mean by command test now",
    "start": "698519",
    "end": "703560"
  },
  {
    "text": "when I talk about component tests I'm referring to the idea of outside in",
    "start": "703560",
    "end": "709200"
  },
  {
    "text": "these are tests that we write from the outside of our application not a class we're writing them from the",
    "start": "709200",
    "end": "716040"
  },
  {
    "text": "outside of our application because that's what's important nobody cares that your class has 4 000 tests",
    "start": "716040",
    "end": "722100"
  },
  {
    "text": "and runs really really fast what they care about is whether the users are able",
    "start": "722100",
    "end": "727680"
  },
  {
    "text": "to hit the apis that's what they care about nobody is going to praise you for doing",
    "start": "727680",
    "end": "733860"
  },
  {
    "text": "four thousand unit tests on a single class",
    "start": "733860",
    "end": "738260"
  },
  {
    "text": "so what we're talking about is working from the HTTP level now I'm using this in the",
    "start": "739200",
    "end": "744839"
  },
  {
    "text": "context of a service obviously if you're writing libraries the outside isn't your HTTP service area",
    "start": "744839",
    "end": "751440"
  },
  {
    "text": "if you're writing an internal library and in a source pattern something like that your external API service is going",
    "start": "751440",
    "end": "757200"
  },
  {
    "text": "to be the API so that's the surface not your internal Factory classes and not your factories",
    "start": "757200",
    "end": "762779"
  },
  {
    "text": "of factories and your factories that generate factories of factories those aren't the things that we're talking about here we're talking about that",
    "start": "762779",
    "end": "768240"
  },
  {
    "text": "external API surface oh sorry we're at a net conference not a Javon okay um",
    "start": "768240",
    "end": "773880"
  },
  {
    "text": "cool um so it's also about testing inputs and outputs what we're doing is we're testing our API from a perspective",
    "start": "773880",
    "end": "781980"
  },
  {
    "text": "of the user we're testing that we can get data in we're testing that we can get data out we can we're testing that we get data in",
    "start": "781980",
    "end": "788040"
  },
  {
    "text": "and our response comes back right those are the things that are important those are the things that are important to users so we're testing the inputs and outputs",
    "start": "788040",
    "end": "795300"
  },
  {
    "text": "we're not testing the bowels of our application because nobody cares nobody cares that you're hosting on",
    "start": "795300",
    "end": "801120"
  },
  {
    "text": "versus SQL your user really doesn't care unless they're doing a PCI audit which",
    "start": "801120",
    "end": "806279"
  },
  {
    "text": "they probably do um but we're also talking about testing from a user or consumer perspective",
    "start": "806279",
    "end": "811680"
  },
  {
    "text": "we're talking about the idea that a an end user being maybe it's your you're",
    "start": "811680",
    "end": "818040"
  },
  {
    "text": "writing an API platform it's the people who are consuming your API it might be that you're writing a library they might",
    "start": "818040",
    "end": "823500"
  },
  {
    "text": "be writing an internal service the user is the person who's going to be hitting the thing that you build not you as a",
    "start": "823500",
    "end": "829200"
  },
  {
    "text": "developer obviously you might be doing a multi-service architecture where you are",
    "start": "829200",
    "end": "834540"
  },
  {
    "text": "your own consumer um and don't check your own homework just get somebody else to do it",
    "start": "834540",
    "end": "839579"
  },
  {
    "text": "um but the other thing is we're testing business requirements because we're testing at that consumer",
    "start": "839579",
    "end": "845100"
  },
  {
    "text": "level we're testing at that edge what we're actually doing is we're",
    "start": "845100",
    "end": "850740"
  },
  {
    "text": "testing from a um a business user saying let's use the bank example",
    "start": "850740",
    "end": "857160"
  },
  {
    "text": "um we're testing that we can do an authorization and that authorization succeeds if we've got a good balance that's a business requirement",
    "start": "857160",
    "end": "863700"
  },
  {
    "text": "I don't care that the balance class gets hit I don't care that the transaction class gets a transaction added to it I",
    "start": "863700",
    "end": "870959"
  },
  {
    "text": "care that when I do my transaction up at the top it succeeds that's a business requirement no business is going to tell you make",
    "start": "870959",
    "end": "877380"
  },
  {
    "text": "sure that your balance class returns true if they do then you've probably not got",
    "start": "877380",
    "end": "882720"
  },
  {
    "text": "a business analyst um you've probably got a developer um so what do we get from doing testing",
    "start": "882720",
    "end": "889079"
  },
  {
    "text": "in this way in an outside in pattern well like I say we're testing the",
    "start": "889079",
    "end": "894420"
  },
  {
    "text": "business requirements first we're not testing arbitrary things inside of our code base we're testing what users actually use",
    "start": "894420",
    "end": "901560"
  },
  {
    "text": "we're testing what users actually want that's the thing that we're testing now the other thing is that if you're",
    "start": "901560",
    "end": "907860"
  },
  {
    "text": "writing them from this way you get the ability to write a lot more readability into your tests so your tests become",
    "start": "907860",
    "end": "913199"
  },
  {
    "text": "more understandable you can use terminology that is",
    "start": "913199",
    "end": "920060"
  },
  {
    "text": "terminology that you use as a business not terminology that the the transaction",
    "start": "920060",
    "end": "926100"
  },
  {
    "text": "service class has been hit well you don't really care you're using business terminology which makes things",
    "start": "926100",
    "end": "932160"
  },
  {
    "text": "a lot more sense now the other thing is each of your tests is holistically testing your",
    "start": "932160",
    "end": "938339"
  },
  {
    "text": "application you're not testing your class down here",
    "start": "938339",
    "end": "943500"
  },
  {
    "text": "with your 4000 tests that you're really proud of we're testing the application we're",
    "start": "943500",
    "end": "948660"
  },
  {
    "text": "testing the thing that is going to be deployed and this is where I come down to the building for production we're building operable software now we're",
    "start": "948660",
    "end": "955019"
  },
  {
    "text": "building software that users care about and that operations can use because they don't deploy your class",
    "start": "955019",
    "end": "960779"
  },
  {
    "text": "with 4000 tests the other thing is we don't do any stubs or mocks",
    "start": "960779",
    "end": "966660"
  },
  {
    "text": "and I'm sorry if the creative remark is here but I'm trying to get rid of you from every single organization I've ever been in",
    "start": "966660",
    "end": "973639"
  },
  {
    "text": "foreign now the the number one benefit for me is that we get 100 code coverage",
    "start": "973860",
    "end": "981480"
  },
  {
    "text": "does does everybody strive for that in their application do you have it in the build pipeline do co-coverage tests doesn't get 100 fail",
    "start": "981480",
    "end": "989639"
  },
  {
    "text": "how many of you have um been writing tests and then realized that you can't test the dispose method",
    "start": "989639",
    "end": "996120"
  },
  {
    "text": "so that you you add something in the dispose method so that you can test the dispose method so that you can get 100 code coverage",
    "start": "996120",
    "end": "1004000"
  },
  {
    "text": "um what you get with outside in testing is the ability to say well",
    "start": "1005060",
    "end": "1011360"
  },
  {
    "text": "if that code isn't here one of two things has happened I've either",
    "start": "1011360",
    "end": "1017600"
  },
  {
    "text": "got a missing use case a missing test that says well this is how the system works and that's why that code exists",
    "start": "1017600",
    "end": "1024740"
  },
  {
    "text": "or you delete the code because it's never been hit one of those two things is true which",
    "start": "1024740",
    "end": "1030740"
  },
  {
    "text": "means you can get to 100 code coverage not that 100 co-co coverage is a positive metric it's more of a negative",
    "start": "1030740",
    "end": "1037280"
  },
  {
    "text": "metric the lack of code coverage will tell you that you haven't got enough tests 100 code coverage does not tell",
    "start": "1037280",
    "end": "1042438"
  },
  {
    "text": "you that you should stop testing do not stop testing at 100",
    "start": "1042439",
    "end": "1047620"
  },
  {
    "text": "okay now what do we mean by readable tests",
    "start": "1047839",
    "end": "1053240"
  },
  {
    "text": "now when I talk about writing readable code I talk about writing readable tests as well we should put as much effort into",
    "start": "1053240",
    "end": "1060740"
  },
  {
    "text": "our tests as we put into our actual code because the tests are more important",
    "start": "1060740",
    "end": "1066860"
  },
  {
    "text": "than the code the code can be replaced your tests will tell you whether your system works whether it's functionally",
    "start": "1066860",
    "end": "1073580"
  },
  {
    "text": "accurate those should live longer than your coach would should also be refactoring our tests as",
    "start": "1073580",
    "end": "1079400"
  },
  {
    "text": "well again something that people miss when they're doing tdd so the first thing is test names that",
    "start": "1079400",
    "end": "1085940"
  },
  {
    "text": "descriptive make your test name tell me what you're testing what's the precondition what is the",
    "start": "1085940",
    "end": "1092480"
  },
  {
    "text": "thing you're testing the amount of times where I see a test that says",
    "start": "1092480",
    "end": "1097700"
  },
  {
    "text": "does the thing it's like I call the class and it Returns the correct response",
    "start": "1097700",
    "end": "1104360"
  },
  {
    "text": "okay but what's the correct response tell me what you're looking for are you looking for the right balance are you looking for the right name on the",
    "start": "1104360",
    "end": "1110059"
  },
  {
    "text": "account are you looking for the right surname are you looking for the right first name you've got a response on your API that's this big",
    "start": "1110059",
    "end": "1115820"
  },
  {
    "text": "you're not testing everything every single thing on there what we're doing is we're giving ourselves signals so that when that",
    "start": "1115820",
    "end": "1122059"
  },
  {
    "text": "thing failed when that particular test fails it tells us what it was testing so we'd have to go delving into it and",
    "start": "1122059",
    "end": "1127580"
  },
  {
    "text": "looking at cert messages and stuff like that to try and find out when it is and God forbid don't use equivalent to please",
    "start": "1127580",
    "end": "1134059"
  },
  {
    "text": "okay reusable actions so when we're writing re um when we're writing readable tests",
    "start": "1134059",
    "end": "1140900"
  },
  {
    "text": "if you were writing your code and you decided that you were going to reuse a bit of code you would extract",
    "start": "1140900",
    "end": "1148160"
  },
  {
    "text": "that into a class right you would give it a nice name some context and then you'd reuse it over your things",
    "start": "1148160",
    "end": "1153980"
  },
  {
    "text": "the amount of people who don't do that in their tests is immense",
    "start": "1153980",
    "end": "1159620"
  },
  {
    "text": "we can do a lot of things with tests because they're code if we're writing things in X unit if we're writing things in C sharp we can use reuse vaccines we",
    "start": "1159620",
    "end": "1167120"
  },
  {
    "text": "can do extractions and we can give them context which makes our tests make more sense we can use readable names for",
    "start": "1167120",
    "end": "1173600"
  },
  {
    "text": "these things we can also work on abstracting the implementation details",
    "start": "1173600",
    "end": "1179960"
  },
  {
    "text": "now if you're writing a test and the first thing first line in your test is newing up the object that you're",
    "start": "1179960",
    "end": "1187760"
  },
  {
    "text": "going to test you're probably doing it wrong because those things aren't important to",
    "start": "1187760",
    "end": "1192860"
  },
  {
    "text": "the test that you're writing the fact that it news up that object is noise abstract away any implementation details",
    "start": "1192860",
    "end": "1199760"
  },
  {
    "text": "just make it make sense and we'll go through some examples these are not all abstracts I've got an example that we're",
    "start": "1199760",
    "end": "1205340"
  },
  {
    "text": "going to walk through that will show you some of these techniques about how we do it now the other thing is we're using",
    "start": "1205340",
    "end": "1210679"
  },
  {
    "text": "domain language do not use the technical language use the language that your consumers are going to use when you're",
    "start": "1210679",
    "end": "1215960"
  },
  {
    "text": "writing your tests if it's to do with an a authorization so in the banking World you've got",
    "start": "1215960",
    "end": "1221900"
  },
  {
    "text": "authorizations and transactions they're kind of one and the same so if you've got one endpoint that says transaction and sometimes it does",
    "start": "1221900",
    "end": "1228860"
  },
  {
    "text": "authorizations and sometimes it does transactions well in your tests use authorization and transaction as names",
    "start": "1228860",
    "end": "1236539"
  },
  {
    "text": "give that context use that domain language rather than using the technical language well I'm hitting the",
    "start": "1236539",
    "end": "1241700"
  },
  {
    "text": "transaction endpoint so I should just call it transaction because I understand what that means",
    "start": "1241700",
    "end": "1246639"
  },
  {
    "text": "now the other thing that I think a lot of people think is controversial is don't add 40 asserts in your test",
    "start": "1247520",
    "end": "1255020"
  },
  {
    "text": "break that out into individual tests and it comes back to that first point which is make your test names",
    "start": "1255020",
    "end": "1261020"
  },
  {
    "text": "descriptive yes you can use the equivalent to and it can massive object like this",
    "start": "1261020",
    "end": "1268160"
  },
  {
    "text": "but then what you have is a test that says returns correct response which doesn't really give you that much",
    "start": "1268160",
    "end": "1273380"
  },
  {
    "text": "information about why it went wrong have more tests don't shy away from",
    "start": "1273380",
    "end": "1279140"
  },
  {
    "text": "having more tests if you write reusable reusable actions",
    "start": "1279140",
    "end": "1284240"
  },
  {
    "text": "if you write your tests in the right way writing another test is copying three lines into a new test and then doing",
    "start": "1284240",
    "end": "1291080"
  },
  {
    "text": "these search and giving it a name it's not onerous these things run in nanoseconds most of",
    "start": "1291080",
    "end": "1297020"
  },
  {
    "text": "the time so adding more tests isn't going to make your test framework slower but it does make it easier for you to",
    "start": "1297020",
    "end": "1303260"
  },
  {
    "text": "understand and it makes it easier for other people to understand because at the end of the day we don't write code for ourselves we write code",
    "start": "1303260",
    "end": "1310100"
  },
  {
    "text": "for other people how many people have come back to a code base and gone oh my God who wrote this",
    "start": "1310100",
    "end": "1316700"
  },
  {
    "text": "this is oh oh right okay so sometimes the other person is yourself",
    "start": "1316700",
    "end": "1323120"
  },
  {
    "text": "so be kind to yourself",
    "start": "1323120",
    "end": "1326500"
  },
  {
    "text": "um so the other thing that comes up is well is what we're doing here not just bdd",
    "start": "1329539",
    "end": "1335659"
  },
  {
    "text": "well we're defining behaviors and we're testing behaviors well guess what tdd was about testing the behavior not the",
    "start": "1335659",
    "end": "1341900"
  },
  {
    "text": "implementation that's what tdd was about what we're not doing is we're not writing gherkin tests there is no given",
    "start": "1341900",
    "end": "1349039"
  },
  {
    "text": "when lens we don't need that kind of complexity we're writing the code ourselves we're writing the test for ourselves",
    "start": "1349039",
    "end": "1354440"
  },
  {
    "text": "so we can write them with proper c-sharp code we can write them with reusable test names we can write them with",
    "start": "1354440",
    "end": "1359900"
  },
  {
    "text": "reusable actions we don't need to write it in a way that has given one then but yes we are testing the behavior",
    "start": "1359900",
    "end": "1366260"
  },
  {
    "text": "so yes the original definition of what bdd was about yes this is what we're talking about",
    "start": "1366260",
    "end": "1372740"
  },
  {
    "text": "cool so let's have a look at some code um as a an example now I'm going to be",
    "start": "1372740",
    "end": "1378980"
  },
  {
    "text": "using here something called the web application Factory which is a um a class in.net that allows you to new",
    "start": "1378980",
    "end": "1385820"
  },
  {
    "text": "up your entire API with all of the dependencies",
    "start": "1385820",
    "end": "1391159"
  },
  {
    "text": "in memory so there's no HTTP call going out over the network",
    "start": "1391159",
    "end": "1396500"
  },
  {
    "text": "it runs it all in memory and I've wrote a little to-do app",
    "start": "1396500",
    "end": "1401780"
  },
  {
    "text": "there is a code sample there'll be a link at the end that you can have a look at and purposefully don't put it up so people don't want to look at it now",
    "start": "1401780",
    "end": "1407179"
  },
  {
    "text": "because then you'll see the answers um but what we're looking at is a to-do",
    "start": "1407179",
    "end": "1412220"
  },
  {
    "text": "app and it's not bad test name that we've got there so what we're going to do is",
    "start": "1412220",
    "end": "1418280"
  },
  {
    "text": "we're going to add a to-do to the API and just make sure it returns okay now people are familiar with tdd right",
    "start": "1418280",
    "end": "1424220"
  },
  {
    "text": "the most simple test first well this is the most simple test we'll not even test that it saved it anywhere",
    "start": "1424220",
    "end": "1430640"
  },
  {
    "text": "but we've made sure that it actually returns okay it might have gone into The Ether I mean obviously the easiest implementation of that is returns okay",
    "start": "1430640",
    "end": "1437179"
  },
  {
    "text": "in the method great let's do it but the idea is we will write this first",
    "start": "1437179",
    "end": "1443120"
  },
  {
    "text": "it will fail because we don't have a to-do endpoint but we can write tests like this in a",
    "start": "1443120",
    "end": "1449600"
  },
  {
    "text": "tdd fashion write the test first describe what it is that your API should be doing",
    "start": "1449600",
    "end": "1454700"
  },
  {
    "text": "and then we'll write the test now that test there will probably make sense",
    "start": "1454700",
    "end": "1460880"
  },
  {
    "text": "to the majority of the room if you're all Developers and it will make sense because it's like",
    "start": "1460880",
    "end": "1466640"
  },
  {
    "text": "what five lines five real lines but",
    "start": "1466640",
    "end": "1471919"
  },
  {
    "text": "we can do better so we're going to use this really small example",
    "start": "1471919",
    "end": "1476960"
  },
  {
    "text": "to show what we can do to make this small example really really be usable and understandable in a wider context so",
    "start": "1476960",
    "end": "1484280"
  },
  {
    "text": "first thing we're going to do remove the implementation now if you look before we had a web application Factory it does not matter",
    "start": "1484280",
    "end": "1491120"
  },
  {
    "text": "for this test that I'm using using a web application Factory that's an implementation detail I don't care",
    "start": "1491120",
    "end": "1499059"
  },
  {
    "text": "when you look at that it feels like that's important to my test that I'm using a web application in fact I'm not",
    "start": "1499280",
    "end": "1504380"
  },
  {
    "text": "it's not important what's important is the other bits so what we do is we're going to move that out so in in essence what I've done",
    "start": "1504380",
    "end": "1510500"
  },
  {
    "text": "there is I've just moved that into the Constructor or into a base class so it's not there it's not important for my test",
    "start": "1510500",
    "end": "1515840"
  },
  {
    "text": "and already this test is making a little bit more sense because I've extracted that out and I've called it API",
    "start": "1515840",
    "end": "1523039"
  },
  {
    "text": "so now what I've got is api.post and I've got my ad response",
    "start": "1523039",
    "end": "1528740"
  },
  {
    "text": "so API to post to the to do great makes a little bit more sense now because it's more succinct",
    "start": "1528740",
    "end": "1536500"
  },
  {
    "text": "but we can go a bit further we can now work on a triple a pattern",
    "start": "1537380",
    "end": "1544400"
  },
  {
    "text": "I'm presuming majority of people have heard of AAA arrange access so well let's define what object we're",
    "start": "1544400",
    "end": "1551120"
  },
  {
    "text": "trying to do because the object is important to us or is it we'll sign we'll find out",
    "start": "1551120",
    "end": "1556400"
  },
  {
    "text": "and then we do our action and then we do our assert okay so now we've got a pattern that makes more sense in people's head",
    "start": "1556400",
    "end": "1564100"
  },
  {
    "text": "but we can go even further now let's add some context because the values",
    "start": "1564740",
    "end": "1569919"
  },
  {
    "text": "from that object aren't important what's important for this test is that",
    "start": "1569919",
    "end": "1576260"
  },
  {
    "text": "what we've got is a valid to do we don't care that it's got those two properties those aren't really important",
    "start": "1576260",
    "end": "1582559"
  },
  {
    "text": "to us and this is called evident testing",
    "start": "1582559",
    "end": "1588440"
  },
  {
    "text": "make sure your test only includes the things that are important to your test because when you come back to it and look at it and you go",
    "start": "1588440",
    "end": "1595460"
  },
  {
    "text": "is the title important is it important that it says new to do is that the only thing that's acceptable",
    "start": "1595460",
    "end": "1601820"
  },
  {
    "text": "does it have to be that length is that important no what's important for this particular",
    "start": "1601820",
    "end": "1606860"
  },
  {
    "text": "test which is our with valid request is that there is a value to do so I've given it some context and called it get",
    "start": "1606860",
    "end": "1613940"
  },
  {
    "text": "valid to do and called it a to-do item a valid to do item more specifically",
    "start": "1613940",
    "end": "1620080"
  },
  {
    "text": "now the other thing is well we've got that test leave that test that's good it's a perfectly valid test",
    "start": "1620779",
    "end": "1627740"
  },
  {
    "text": "that's going to say it'll return okay I'm going to add another set now if you look at those first two lines those",
    "start": "1627740",
    "end": "1634580"
  },
  {
    "text": "first two lines are the same as the last test so to create this new test which this new test is going to do two assets",
    "start": "1634580",
    "end": "1642860"
  },
  {
    "text": "notice how I didn't say only write one assert per test I said don't be afraid",
    "start": "1642860",
    "end": "1647900"
  },
  {
    "text": "um to write more tests I'm not putting a number on it it's not five it's not ten",
    "start": "1647900",
    "end": "1653480"
  },
  {
    "text": "it's not a specific number of asserts that's okay it's about writing things for yourself later that allow you to be able to see",
    "start": "1653480",
    "end": "1660679"
  },
  {
    "text": "what's happening so what we're doing now is we're writing",
    "start": "1660679",
    "end": "1665779"
  },
  {
    "text": "another test and this one is going to specifically test that we've got a valid ID that's come back",
    "start": "1665779",
    "end": "1671720"
  },
  {
    "text": "now I'll return okay that we had before it's not going to work anymore so this will Now fail we're now in a test driven",
    "start": "1671720",
    "end": "1679279"
  },
  {
    "text": "development cycle we're adding more and more tests that allow us to write the implementation detail but at no point",
    "start": "1679279",
    "end": "1685340"
  },
  {
    "text": "here have I reached into a database at no point here have I injected some data",
    "start": "1685340",
    "end": "1690500"
  },
  {
    "text": "I don't care whether this is hosted on  or SQL or Cosmos or any other",
    "start": "1690500",
    "end": "1696380"
  },
  {
    "text": "system I don't care the user doesn't care so the test shouldn't care those are implementation details",
    "start": "1696380",
    "end": "1704380"
  },
  {
    "text": "but we do want to check that things are persisted so we want to check that when we've done",
    "start": "1705140",
    "end": "1711020"
  },
  {
    "text": "our to-do item because I can make that test pass pretty easy by just return one on an okay response",
    "start": "1711020",
    "end": "1716960"
  },
  {
    "text": "great test passed I love adversarial tdd testing it's amazing um when somebody writes a test and then",
    "start": "1716960",
    "end": "1723200"
  },
  {
    "text": "you write the smallest implementation and you control them really bad it's really funny",
    "start": "1723200",
    "end": "1728480"
  },
  {
    "text": "um so what we're going to do now is we're going to work on",
    "start": "1728480",
    "end": "1734419"
  },
  {
    "text": "our next test and our next test is well we've created our to-do item we",
    "start": "1734419",
    "end": "1740539"
  },
  {
    "text": "need to make sure that we can get our tattoo item back out well we need an API call for that",
    "start": "1740539",
    "end": "1748100"
  },
  {
    "text": "one of my favorite things to do with b8s when they start to get into technical detail when they go must save to the",
    "start": "1748100",
    "end": "1754100"
  },
  {
    "text": "database as a acceptance criteria just say Yes it saves to the database and don't do it",
    "start": "1754100",
    "end": "1761120"
  },
  {
    "text": "because until they've given you criteria that says I need to get it back out again saving to the database doesn't matter",
    "start": "1761120",
    "end": "1768500"
  },
  {
    "text": "because you can say yeah it's in the database and they can't check until they say to you I need to be able",
    "start": "1768500",
    "end": "1774679"
  },
  {
    "text": "to get that thing back out of the database on the get request you shouldn't even be thinking about how",
    "start": "1774679",
    "end": "1780320"
  },
  {
    "text": "you store it because these things where we say need to go and get it these are what are going to define those requirements too many times when people",
    "start": "1780320",
    "end": "1786980"
  },
  {
    "text": "write tdd they jump to that the conclusion that they need a repository class and they need to test their",
    "start": "1786980",
    "end": "1792440"
  },
  {
    "text": "repository class you don't until you do until somebody gives you that requirement so this test",
    "start": "1792440",
    "end": "1797779"
  },
  {
    "text": "here what you can see now is I've actually abstracted all that stuff from the previous test",
    "start": "1797779",
    "end": "1804559"
  },
  {
    "text": "so those first two lines there I've abstracted again into create value to do item",
    "start": "1804559",
    "end": "1811159"
  },
  {
    "text": "because what do I care about in this test well once I've added a to-do item my",
    "start": "1811159",
    "end": "1817520"
  },
  {
    "text": "range I should be able to get that to do item back and it should have the right IDs",
    "start": "1817520",
    "end": "1825020"
  },
  {
    "text": "and again what I've not done here is I've not gone into the database and injected and bleeded my schema out and",
    "start": "1825020",
    "end": "1830720"
  },
  {
    "text": "the database implementation into my tests what I've actually done is I've used my API",
    "start": "1830720",
    "end": "1836600"
  },
  {
    "text": "to post that to do item in and then go and gut it",
    "start": "1836600",
    "end": "1841700"
  },
  {
    "text": "because too many times you have that one class with 4 000 tests on it that works really really good but doesn't integrate",
    "start": "1841700",
    "end": "1847880"
  },
  {
    "text": "with anything else so",
    "start": "1847880",
    "end": "1853159"
  },
  {
    "text": "let's just have a look at what we've tested there in that particular scenario",
    "start": "1853159",
    "end": "1858880"
  },
  {
    "text": "now this is a big one we've tested our dependency injection startup so how many people in the room have done",
    "start": "1859100",
    "end": "1865580"
  },
  {
    "text": "a feature wrote a really nice class four thousand tests",
    "start": "1865580",
    "end": "1870799"
  },
  {
    "text": "and then forgot to put it in your dependency Junction container yeah the people who are not saying yes",
    "start": "1870799",
    "end": "1877580"
  },
  {
    "text": "you are lying go away and think about your life it happens",
    "start": "1877580",
    "end": "1884299"
  },
  {
    "text": "but you get it to production and all of a sudden your application fails because well it's the dependency",
    "start": "1884299",
    "end": "1891320"
  },
  {
    "text": "injection it's not it's not getting that class that he expects with the approach of doing outside in",
    "start": "1891320",
    "end": "1896539"
  },
  {
    "text": "testing it's already testing it the other thing you're testing is routing",
    "start": "1896539",
    "end": "1901580"
  },
  {
    "text": "so you're testing the idea of does my to do item route work does it work with a",
    "start": "1901580",
    "end": "1907520"
  },
  {
    "text": "slash or without a slash do they both work is that important",
    "start": "1907520",
    "end": "1912640"
  },
  {
    "text": "and guess what I'd have two tests for that one for weather slash and one for without",
    "start": "1913640",
    "end": "1919360"
  },
  {
    "text": "so we're also testing a really important thing which is serialization and deserialization now I always Advocate when you're",
    "start": "1919760",
    "end": "1926059"
  },
  {
    "text": "writing these tests to write your own models in your test you know everybody seems to love the",
    "start": "1926059",
    "end": "1933140"
  },
  {
    "text": "dot-common class inside of their solution that stores all of their API models and then they reference that in their",
    "start": "1933140",
    "end": "1939380"
  },
  {
    "text": "class in their tests and then well when you refactor your your common thing well",
    "start": "1939380",
    "end": "1944960"
  },
  {
    "text": "your tests have been refactored as well oh oh right yeah just broken all my apis sorry um what you're testing is serialization",
    "start": "1944960",
    "end": "1951380"
  },
  {
    "text": "and deserialization which means you actually get Contract testing out the box because if you've got to change your",
    "start": "1951380",
    "end": "1957740"
  },
  {
    "text": "models inside of your test class well you know that your consumers have",
    "start": "1957740",
    "end": "1962899"
  },
  {
    "text": "got to change their code so now you've got a breaking change so you can actually alert on things like",
    "start": "1962899",
    "end": "1968600"
  },
  {
    "text": "that somebody's changed stuffing in the uh in the API models so don't deploy let's have an extra approval step",
    "start": "1968600",
    "end": "1975080"
  },
  {
    "text": "because somebody's changed the API models and we don't want to break our API we're testing that serialization and",
    "start": "1975080",
    "end": "1980659"
  },
  {
    "text": "deserialization anybody been caught out by the switch between new and soft and system text",
    "start": "1980659",
    "end": "1987260"
  },
  {
    "text": "Json with serialization yeah yeah um it works subtly different and you",
    "start": "1987260",
    "end": "1993440"
  },
  {
    "text": "don't notice it until you notice it and that's normally too late this tests all of those things",
    "start": "1993440",
    "end": "1999260"
  },
  {
    "text": "because it doesn't care that you're using newtonsoft he doesn't care that you're using system text Json it cares",
    "start": "1999260",
    "end": "2005380"
  },
  {
    "text": "that an object came in in Jason and then it just deserialize persisted and then when it came back out again you",
    "start": "2005380",
    "end": "2011320"
  },
  {
    "text": "got the right value out we're also testing model validation so",
    "start": "2011320",
    "end": "2017080"
  },
  {
    "text": "we're not testing our little service class at the bottom here we're not testing our little static helpers class what we're testing is that whole thing",
    "start": "2017080",
    "end": "2023500"
  },
  {
    "text": "so if you put something on there that says must be a number and it shouldn't have been a number",
    "start": "2023500",
    "end": "2029980"
  },
  {
    "text": "well yes we're going to test that and guess what there should be a test for it that shows those things",
    "start": "2029980",
    "end": "2037360"
  },
  {
    "text": "the other thing with testing as well is database interaction now in the example that if you go and",
    "start": "2037360",
    "end": "2043120"
  },
  {
    "text": "look at the the code for it we'll use an Entity Framework so all I did was I switched out Entity",
    "start": "2043120",
    "end": "2049118"
  },
  {
    "text": "framework for an in-memory SQL light database so I'm actually testing all the database",
    "start": "2049119",
    "end": "2054398"
  },
  {
    "text": "integration as well I'm testing that my where Clauses work because your service class won't test that",
    "start": "2054399",
    "end": "2059919"
  },
  {
    "text": "it'll test that you hit a mock and obviously that's really good yeah but we're testing everything from",
    "start": "2059919",
    "end": "2066040"
  },
  {
    "text": "selecting stuff to primary key constraints foreign key constraints all of those things are being tested",
    "start": "2066040",
    "end": "2071940"
  },
  {
    "text": "holistically from the output but like I say we're also testing",
    "start": "2071940",
    "end": "2078580"
  },
  {
    "text": "business requirements we're testing what the business has asked for this API to do",
    "start": "2078580",
    "end": "2083919"
  },
  {
    "text": "and that is invaluable because the amount of times where the business comes up and said oh I didn't",
    "start": "2083919",
    "end": "2089200"
  },
  {
    "text": "mean it to that you can go back and say look starting the business requirements because I tested the business requirements I didn't write an API on",
    "start": "2089200",
    "end": "2095679"
  },
  {
    "text": "the abstract I wrote it based on what you actually sent me because here's all my tests that test all the business requirements",
    "start": "2095679",
    "end": "2103060"
  },
  {
    "text": "so you're covering your own behind but without the other thing we're testing because we're creating our own",
    "start": "2103060",
    "end": "2109119"
  },
  {
    "text": "example client of our API well we're actually testing what the",
    "start": "2109119",
    "end": "2114460"
  },
  {
    "text": "customer sees so we're a consultant we're a customer of our API we're a consumer immediately",
    "start": "2114460",
    "end": "2120099"
  },
  {
    "text": "of what we're doing which means that you're getting valuable feedback about how to use your API when",
    "start": "2120099",
    "end": "2125980"
  },
  {
    "text": "you're using that API and you're going oh this is awful oh I wrote it okay",
    "start": "2125980",
    "end": "2131680"
  },
  {
    "text": "um maybe I shouldn't make it awful because what you're doing is you're imposing on users something that you wouldn't use yourself",
    "start": "2131680",
    "end": "2138180"
  },
  {
    "text": "so I've told you all the awesome things and if you look at that list",
    "start": "2139359",
    "end": "2145480"
  },
  {
    "text": "and I didn't show you anything else everybody in the room is going right okay this is something we should absolutely be doing there's zero",
    "start": "2145480",
    "end": "2150760"
  },
  {
    "text": "downsides okay but there are there are certain things that you can't test when you do this",
    "start": "2150760",
    "end": "2157060"
  },
  {
    "text": "so there are things like code path changes caching being a really big example of",
    "start": "2157060",
    "end": "2162579"
  },
  {
    "text": "that well I can test my API if I need to test that it came from a cache or it came from",
    "start": "2162579",
    "end": "2168280"
  },
  {
    "text": "um the database lookup I can't test that because from the outside it looks the same because it should look the same from the user that's a new item that I",
    "start": "2168280",
    "end": "2175359"
  },
  {
    "text": "go and get from the database well it looks the same whether it came from the database or whether it came from an intermediary cache or",
    "start": "2175359",
    "end": "2181960"
  },
  {
    "text": "um something like that so from the outside I shouldn't know",
    "start": "2181960",
    "end": "2187079"
  },
  {
    "text": "we also can't do things like auditing so we can't test things like an audit Trail was created",
    "start": "2187180",
    "end": "2194200"
  },
  {
    "text": "or can we we can't test performance so we can't test the idea of how well",
    "start": "2194200",
    "end": "2200619"
  },
  {
    "text": "does this thing perform in production because on a nanosecond scale that these sort of tests run it's really hard to",
    "start": "2200619",
    "end": "2206560"
  },
  {
    "text": "notice that things at scale will run and at the end of the day performance should only really be tested in production",
    "start": "2206560",
    "end": "2212320"
  },
  {
    "text": "because that's your only real environment that you've got anyway everything else is artificial we also can't test cloud services in",
    "start": "2212320",
    "end": "2218800"
  },
  {
    "text": "this model because they're generally slower so we can't test that it uses Cosmos we can't test that dynamodb is being hit",
    "start": "2218800",
    "end": "2226180"
  },
  {
    "text": "we count as the configuration to make sure it's got the right config that points to the right Cosmos DB the",
    "start": "2226180",
    "end": "2232359"
  },
  {
    "text": "right dynamodb the right SQL database we can't test that it's got security",
    "start": "2232359",
    "end": "2237400"
  },
  {
    "text": "access either however some of those things we can",
    "start": "2237400",
    "end": "2243940"
  },
  {
    "text": "and this is where observability comes in",
    "start": "2243940",
    "end": "2248760"
  },
  {
    "text": "so let's talk a little bit about observability",
    "start": "2249940",
    "end": "2255119"
  },
  {
    "text": "so I said at the start the first and foremost I'm an observability advocate",
    "start": "2258640",
    "end": "2265180"
  },
  {
    "text": "and the reason why I am is because I've built and run production systems for the past decade at varying levels of scale",
    "start": "2265180",
    "end": "2274180"
  },
  {
    "text": "and the idea of observability is really important to that being able to know that your system is running in production and not relying on hopes and",
    "start": "2274180",
    "end": "2281200"
  },
  {
    "text": "dreams because they don't work so let's define what observability is so",
    "start": "2281200",
    "end": "2288160"
  },
  {
    "text": "charity Majors our co-founder at honeycomb um coined the term 2016 in the context",
    "start": "2288160",
    "end": "2295300"
  },
  {
    "text": "of software which is the idea that it's about understanding and debugging the unknown unknowns and it's about",
    "start": "2295300",
    "end": "2301660"
  },
  {
    "text": "understanding the internal um the inner System state by asking questions from the outside",
    "start": "2301660",
    "end": "2308760"
  },
  {
    "text": "now if you look into that you can actually see why I think this is important to what we're talking about with outside in testing because it's the",
    "start": "2308859",
    "end": "2315579"
  },
  {
    "text": "ability to understand our inner state well that's what we were just talking",
    "start": "2315579",
    "end": "2321880"
  },
  {
    "text": "about the things that we can't tell the internal bits of our application that we can't know about well actually yes we can because",
    "start": "2321880",
    "end": "2328720"
  },
  {
    "text": "observability is about that idea of knowing those internal States",
    "start": "2328720",
    "end": "2334260"
  },
  {
    "text": "so let's talk a little bit about um observable of observability driven",
    "start": "2334900",
    "end": "2339940"
  },
  {
    "text": "development observability during development whatever you want to call it um there is no accepted term and I",
    "start": "2339940",
    "end": "2346599"
  },
  {
    "text": "really don't want to coin a term but what we're talking about is using observability during our development life cycle",
    "start": "2346599",
    "end": "2352660"
  },
  {
    "text": "whether that's local development when you're doing it and running up locally or whether it's inside your test it's the idea that observability isn't just",
    "start": "2352660",
    "end": "2358900"
  },
  {
    "text": "for production you can also use that locally now first thing is observability is an",
    "start": "2358900",
    "end": "2365920"
  },
  {
    "text": "output of your application we talked about testing inputs and outputs",
    "start": "2365920",
    "end": "2371260"
  },
  {
    "text": "of our application well observability is an output it is something that our system tells us about",
    "start": "2371260",
    "end": "2377079"
  },
  {
    "text": "our system that we can use there are certain things that",
    "start": "2377079",
    "end": "2383079"
  },
  {
    "text": "observability can do it can detect parallelization you can test that two things run at once",
    "start": "2383079",
    "end": "2388660"
  },
  {
    "text": "anybody swear blind in their application that two things run in parallel and until you",
    "start": "2388660",
    "end": "2395020"
  },
  {
    "text": "actually saw a waterfall chat and then realized oh no no no they run in series don't they yeah that'd be why the",
    "start": "2395020",
    "end": "2401740"
  },
  {
    "text": "system's slow um I've done that numerous times and the",
    "start": "2401740",
    "end": "2406839"
  },
  {
    "text": "amount of times where we go into organizations put tracing into their application show them that system and they go yeah",
    "start": "2406839",
    "end": "2413200"
  },
  {
    "text": "that all runs in parallel and then you go show them the waterfall chart and it doesn't it starts when this one finishes",
    "start": "2413200",
    "end": "2419079"
  },
  {
    "text": "and they're like no no it's wrong it's not wrong the system's telling you that it's doing",
    "start": "2419079",
    "end": "2424540"
  },
  {
    "text": "that but observability can detect those things and that's really important",
    "start": "2424540",
    "end": "2430240"
  },
  {
    "text": "it can also detect which code paths because if you write tracing into your",
    "start": "2430240",
    "end": "2435640"
  },
  {
    "text": "application if you do manual instrumentation you can detect which kinds of code paths have been taken",
    "start": "2435640",
    "end": "2441339"
  },
  {
    "text": "through your application now the other thing is that what's important in",
    "start": "2441339",
    "end": "2447640"
  },
  {
    "text": "your local environment is likely important in production now if we take the caching example",
    "start": "2447640",
    "end": "2453460"
  },
  {
    "text": "where we care that a second request hits the cash",
    "start": "2453460",
    "end": "2458980"
  },
  {
    "text": "that's important to us well that's important in production as well I should care in production that things",
    "start": "2458980",
    "end": "2464440"
  },
  {
    "text": "are hitting the cash when they should hit the cash so all of a sudden this is an output that we need to have in our application",
    "start": "2464440",
    "end": "2471839"
  },
  {
    "text": "so let's look at a little bit of code now what I wanted to prefix this with is",
    "start": "2472660",
    "end": "2477700"
  },
  {
    "text": "doing this approach is not a way around you injecting things into the database and reaching back around and just add",
    "start": "2477700",
    "end": "2484060"
  },
  {
    "text": "some things in just so that you can test them please don't do that but what it is is the ability for us to",
    "start": "2484060",
    "end": "2491260"
  },
  {
    "text": "know our application a little bit better so this is a bit of caching code for any",
    "start": "2491260",
    "end": "2496720"
  },
  {
    "text": "future employers out there that might be looking at me this is not how I would write a caching code this is an example",
    "start": "2496720",
    "end": "2502359"
  },
  {
    "text": "and it illustrates what I'm trying to talk about so",
    "start": "2502359",
    "end": "2507460"
  },
  {
    "text": "for those who don't read code fast what we're doing is we're creating a",
    "start": "2507460",
    "end": "2512740"
  },
  {
    "text": "um a to-do list we're putting that in a memory cache and then we're going to go",
    "start": "2512740",
    "end": "2518260"
  },
  {
    "text": "and get the um the to-do's from the database put them in the memory cache next time around we're going to go and get them",
    "start": "2518260",
    "end": "2524560"
  },
  {
    "text": "from the memory cache so pretty simple implementation the idea is first request goes and gets from the",
    "start": "2524560",
    "end": "2531160"
  },
  {
    "text": "database second request will always get it from the cache forever don't write caching code like this",
    "start": "2531160",
    "end": "2538420"
  },
  {
    "text": "if anybody comes up and says Martin said I wrote this and then I got fired disclaimer okay",
    "start": "2538420",
    "end": "2545380"
  },
  {
    "text": "so if we want to write a test that says did we call the database or",
    "start": "2545380",
    "end": "2552520"
  },
  {
    "text": "did we call the Cache because we want to assert that well the first call hits the",
    "start": "2552520",
    "end": "2557800"
  },
  {
    "text": "database no it's the test name testing is really specific there about what exactly we're trying to do",
    "start": "2557800",
    "end": "2563079"
  },
  {
    "text": "tells you exactly what we're trying to achieve so what we're going to do is we're going",
    "start": "2563079",
    "end": "2569320"
  },
  {
    "text": "to use something called open telemetry open Telemetry is the number two project",
    "start": "2569320",
    "end": "2575740"
  },
  {
    "text": "on the cncf um Foundation it is the de facto standard",
    "start": "2575740",
    "end": "2581319"
  },
  {
    "text": "around tracing and becoming the dev facto standard around metrics and logs as well",
    "start": "2581319",
    "end": "2586839"
  },
  {
    "text": "and what it provides us with in this particular context is the ability to have a tracing provider there's a lot of",
    "start": "2586839",
    "end": "2593079"
  },
  {
    "text": "code there which we'll walk through a little bit but what we're doing is inside of our test framework",
    "start": "2593079",
    "end": "2598960"
  },
  {
    "text": "we're going to set up a tracing provider we're going to monitor some specific",
    "start": "2598960",
    "end": "2604119"
  },
  {
    "text": "Trace traces or tracers in.net that's called activity or activity sources",
    "start": "2604119",
    "end": "2610720"
  },
  {
    "text": "we're going to monitor some of those we're going to add something called a test spam processor which is going to",
    "start": "2610720",
    "end": "2615760"
  },
  {
    "text": "allow us to say which test run this was part of and then we're going to add some Auto",
    "start": "2615760",
    "end": "2620920"
  },
  {
    "text": "instrumentations we're going to add in the asp.net core instrumentation which will automatically do some tracing for",
    "start": "2620920",
    "end": "2627700"
  },
  {
    "text": "us but we're also going to add in something called the in-memory span processor or in-memory exporter",
    "start": "2627700",
    "end": "2633819"
  },
  {
    "text": "now what that's going to do is it's going to say that every span that's created in our application it's",
    "start": "2633819",
    "end": "2639700"
  },
  {
    "text": "going to stick it in a dictionary for us it's actually a list",
    "start": "2639700",
    "end": "2644859"
  },
  {
    "text": "but it's going to stick it in there for us so that we can interrogate it so we can know for an individual test",
    "start": "2644859",
    "end": "2651460"
  },
  {
    "text": "what spans were created we're also going to add honeycomb in because I work for honeycomb so I'm",
    "start": "2651460",
    "end": "2657940"
  },
  {
    "text": "obviously okay so",
    "start": "2657940",
    "end": "2664359"
  },
  {
    "text": "the other thing you need to do is once you've got your tracer you then need to use configure services",
    "start": "2664359",
    "end": "2669520"
  },
  {
    "text": "so if you're using the web application Factory you have access to inject more services so yes the stuff that you",
    "start": "2669520",
    "end": "2676359"
  },
  {
    "text": "define in your program and startup.cs whatever you're using those are still there",
    "start": "2676359",
    "end": "2681520"
  },
  {
    "text": "but you also have a hook to add more services in so we're going to add in the Tracer provider now",
    "start": "2681520",
    "end": "2687339"
  },
  {
    "text": "there's a lot of people who are reluctant to bring in something like open Telemetry into their application",
    "start": "2687339",
    "end": "2692619"
  },
  {
    "text": "because well that's an adoption thing that's everybody needs to use it what we're using here though",
    "start": "2692619",
    "end": "2698380"
  },
  {
    "text": "is open Telemetry in the context of tests there's not a wider adoption here we're",
    "start": "2698380",
    "end": "2704380"
  },
  {
    "text": "not talking about adopting open Telemetry as a standard across all your applications All 4 000 applications that",
    "start": "2704380",
    "end": "2710560"
  },
  {
    "text": "you've got all your services using distribute tracing we're not talking about all those yes you should do those come see us at the booth afterwards and",
    "start": "2710560",
    "end": "2716859"
  },
  {
    "text": "we'll show you how but what we're talking about here is using it for tests we're using it for observability inside",
    "start": "2716859",
    "end": "2722140"
  },
  {
    "text": "of our tests so that we know how our application is working so that we can stay on the outside and build our tests",
    "start": "2722140",
    "end": "2727780"
  },
  {
    "text": "from the outside so we're going to add in the Tracer provider clearing the login",
    "start": "2727780",
    "end": "2733900"
  },
  {
    "text": "providers because on Linux it doesn't like it um a lot of the time but hey",
    "start": "2733900",
    "end": "2739060"
  },
  {
    "text": "so now what we can do that caching code that we talked about before",
    "start": "2739060",
    "end": "2744099"
  },
  {
    "text": "what I've done is I've wrapped it in a using statement I've created an activity",
    "start": "2744099",
    "end": "2749560"
  },
  {
    "text": "called get to-do list from DB and I've wrapped the bit where it goes",
    "start": "2749560",
    "end": "2755200"
  },
  {
    "text": "to the database in that span now the reason I've done that is because that's something I would probably want",
    "start": "2755200",
    "end": "2761319"
  },
  {
    "text": "to report on in production in production I'd want to know how many times did it go to the database versus how many times did it not go to the database",
    "start": "2761319",
    "end": "2769380"
  },
  {
    "text": "so we've got a span created now for every one of our calls that comes in",
    "start": "2769599",
    "end": "2776319"
  },
  {
    "text": "only when it hits the database so now we can write a test",
    "start": "2776319",
    "end": "2781720"
  },
  {
    "text": "so now we can write a test that comes in and says right go and do the get request",
    "start": "2781720",
    "end": "2786760"
  },
  {
    "text": "so API get to-do list great also don't call your endpoints to do hyphen list it was just easier",
    "start": "2786760",
    "end": "2794200"
  },
  {
    "text": "so we're doing a get for our to-do list and then what we're going to do is we're going to check our spans",
    "start": "2794200",
    "end": "2800319"
  },
  {
    "text": "on the back of that and say did one of them contain this",
    "start": "2800319",
    "end": "2805359"
  },
  {
    "text": "yes okay well we're going to make sure that that wasn't null now what I've done is I've wrote a test that tells me if I",
    "start": "2805359",
    "end": "2810880"
  },
  {
    "text": "make one get request it's always going to go to the database great I don't need to German check a",
    "start": "2810880",
    "end": "2816880"
  },
  {
    "text": "mock I don't need to go and inject into my application something that I can use",
    "start": "2816880",
    "end": "2823119"
  },
  {
    "text": "a mock verify to see whether it hit it I don't need to do any of that I've stayed on the outside and I've got really",
    "start": "2823119",
    "end": "2828400"
  },
  {
    "text": "succinct test now I've kept that and I'm not going to refactor away that bottom bit where it does the cache activity but",
    "start": "2828400",
    "end": "2834160"
  },
  {
    "text": "I would obviously go and then refactor that to put some reasonable action and give that context to say spam exists or",
    "start": "2834160",
    "end": "2840760"
  },
  {
    "text": "something like that that makes it readable for you to use but now what we can do",
    "start": "2840760",
    "end": "2847720"
  },
  {
    "text": "is we can write the next test so first one same as we did before",
    "start": "2847720",
    "end": "2852940"
  },
  {
    "text": "get the to-do list clear out any spans from that call because we don't care about those anymore",
    "start": "2852940",
    "end": "2858220"
  },
  {
    "text": "make the second one and just make sure we don't get it make sure there isn't a call there isn't",
    "start": "2858220",
    "end": "2863680"
  },
  {
    "text": "a span created that has the to-do list from the DB so I've been able to stand on the",
    "start": "2863680",
    "end": "2870160"
  },
  {
    "text": "outside of my application completely",
    "start": "2870160",
    "end": "2875200"
  },
  {
    "text": "and now I've been able to test some of those internals but what I've also done is I've made sure now when I go to",
    "start": "2875200",
    "end": "2882099"
  },
  {
    "text": "production I've got some observability around when cash hits happen because if it's important to me locally to know that",
    "start": "2882099",
    "end": "2888160"
  },
  {
    "text": "that code path was taken at some point it's going to be important in production so if you get those in your test and you",
    "start": "2888160",
    "end": "2894160"
  },
  {
    "text": "keep writing the test in this way you are going to be able to get better observability in production and this is how why I talk about building operable",
    "start": "2894160",
    "end": "2901119"
  },
  {
    "text": "software because you're considering what it would take to get to production you're considering what production would",
    "start": "2901119",
    "end": "2906579"
  },
  {
    "text": "look like you're not writing it for local because let's be honest if you wanted to do that locally yes you could write some mocks",
    "start": "2906579",
    "end": "2913540"
  },
  {
    "text": "in your controller classes inject all of your stuff in make sure it goes to the different different places or just hit",
    "start": "2913540",
    "end": "2918880"
  },
  {
    "text": "play and then debug it through yes it works because I debugged it",
    "start": "2918880",
    "end": "2924460"
  },
  {
    "text": "now the other benefit that you get from this is you can then go and look at these results in your observability back",
    "start": "2924460",
    "end": "2930579"
  },
  {
    "text": "end obviously on this one we're showing honeycomb so each one of our test runs now becomes",
    "start": "2930579",
    "end": "2936339"
  },
  {
    "text": "a Trace that we can then look at not that impressive when you look at it",
    "start": "2936339",
    "end": "2942700"
  },
  {
    "text": "in a graph like that but if it's a trace waterfall I can actually look for each one of my",
    "start": "2942700",
    "end": "2949420"
  },
  {
    "text": "tests that's run each one of the traces that's been created I can follow through how that hit my code",
    "start": "2949420",
    "end": "2956079"
  },
  {
    "text": "I can work out well was that slower or faster than the last time and yes we are talking millisecond nanosecond scale",
    "start": "2956079",
    "end": "2964000"
  },
  {
    "text": "but it will show you and you'll be able to say actually no this went through a different code path this time the test failed okay well it",
    "start": "2964000",
    "end": "2971079"
  },
  {
    "text": "went through a different code path than it went through last time it kept it in the database oh maybe the",
    "start": "2971079",
    "end": "2976300"
  },
  {
    "text": "caching's not working so it gives you more things to look at and you can look at things like how long",
    "start": "2976300",
    "end": "2981760"
  },
  {
    "text": "did my test run go which ones were the slow tests with the Advent of stuff like GitHub actions we're losing a lot of the things",
    "start": "2981760",
    "end": "2988420"
  },
  {
    "text": "that we used to have that were built into CI CD runners but this allows you to do that but it",
    "start": "2988420",
    "end": "2993880"
  },
  {
    "text": "also allows you to say this is what it looks like or should look like in development in my tests",
    "start": "2993880",
    "end": "3000480"
  },
  {
    "text": "when I go to production does it look like that because that request should look identical because the trace should",
    "start": "3000480",
    "end": "3006359"
  },
  {
    "text": "look identical if you've got a test in place that tray should look identical",
    "start": "3006359",
    "end": "3013220"
  },
  {
    "text": "that is all I've got to show you I wanted to give you a few different jumping off points from here so there is",
    "start": "3013500",
    "end": "3018660"
  },
  {
    "text": "a repository that you can go and look at there's a few things that I also think",
    "start": "3018660",
    "end": "3023700"
  },
  {
    "text": "would be really useful for you to go and watch after this so um Ian Cooper who is on in the other",
    "start": "3023700",
    "end": "3029040"
  },
  {
    "text": "room thanks for coming to see me not him by the way um a lot of the things that I talk about",
    "start": "3029040",
    "end": "3034140"
  },
  {
    "text": "here come from um the tdd Revisited talk that he did at NDC London a few years ago",
    "start": "3034140",
    "end": "3041760"
  },
  {
    "text": "um and it's a really really good talk that breaks down what tdd is in a much much more depth way than what I've",
    "start": "3041760",
    "end": "3048480"
  },
  {
    "text": "talked about today the other one is a guy called David Whitney who wrote A a talk called",
    "start": "3048480",
    "end": "3055920"
  },
  {
    "text": "writing tests that don't suck um and he did that at an UC London as well",
    "start": "3055920",
    "end": "3061619"
  },
  {
    "text": "um go and view that that is a really good talk it goes a lot more into depth about readable tests and writing tests",
    "start": "3061619",
    "end": "3067920"
  },
  {
    "text": "that are better not specifically about outside in more about just writing readable tests that are really really good",
    "start": "3067920",
    "end": "3074579"
  },
  {
    "text": "um obviously I work for honeycomb and wouldn't be here without them so you can have a free account forever for with us",
    "start": "3074579",
    "end": "3080460"
  },
  {
    "text": "and come see us on the booth if you want to chat about it and we also wrote the book on observability engineering quite",
    "start": "3080460",
    "end": "3085859"
  },
  {
    "text": "literally um and it is free for download um if you go and get it on our website",
    "start": "3085859",
    "end": "3091260"
  },
  {
    "text": "and that's me thank you very much",
    "start": "3091260",
    "end": "3094700"
  },
  {
    "text": "I have a little bit of time for questions if people want to onto our stuff but um if not just come up and chat",
    "start": "3102599",
    "end": "3110300"
  }
]