[
  {
    "start": "0",
    "end": "275000"
  },
  {
    "text": "welcome everybody uh I get confused a lot on my day-to-day",
    "start": "7040",
    "end": "13679"
  },
  {
    "text": "work it it passes usually so but I usually meet code and I want to",
    "start": "13679",
    "end": "20640"
  },
  {
    "text": "understand the intention behind it that's like what I do so as a programmer it's up to us to",
    "start": "20640",
    "end": "28619"
  },
  {
    "text": "understand and to decide whether the code we have does what it",
    "start": "28619",
    "end": "33840"
  },
  {
    "text": "what we wanted to do what it should have done so one day I'm reading through code",
    "start": "33840",
    "end": "42320"
  },
  {
    "text": "fixing probably fixing warnings checking warnings fixing the bill system something",
    "start": "42320",
    "end": "48180"
  },
  {
    "text": "tightening one Enterprise that's my favorite um and I met with this code in CFL plus",
    "start": "48180",
    "end": "54420"
  },
  {
    "text": "private volatile build enabled right okay this was in a class it was a variable to",
    "start": "54420",
    "end": "62760"
  },
  {
    "text": "set the state to the running of its thread and I'm like this smells like Java",
    "start": "62760",
    "end": "68159"
  },
  {
    "text": "this doesn't smell like C plus back in my mind I have the average of",
    "start": "68159",
    "end": "74340"
  },
  {
    "text": "concurrency and wonderfile in C plus plus is a no no no no no no so the count size uh for us what we are",
    "start": "74340",
    "end": "82320"
  },
  {
    "text": "currently about 100 c plus code base but we used to have a significant chunk of java code base",
    "start": "82320",
    "end": "90840"
  },
  {
    "text": "so and this code was written when we had some Java and some C plus and I'm like",
    "start": "90840",
    "end": "99119"
  },
  {
    "text": "they've said probably someone to confuse this thing so I'm like let's fix this we",
    "start": "99119",
    "end": "105180"
  },
  {
    "text": "make it an atomic pool enabled instead right okay so now we've changed the code",
    "start": "105180",
    "end": "113640"
  },
  {
    "text": "so hopefully we haven't broken anything and we haven't because this is",
    "start": "113640",
    "end": "119579"
  },
  {
    "text": "strictly as I it it guarantees that quite a lot",
    "start": "119579",
    "end": "125700"
  },
  {
    "text": "more we also in volatile it just says",
    "start": "125700",
    "end": "131280"
  },
  {
    "text": "you have to read it and you have to write it but you have no guarantees about thread safety or memory and stuff",
    "start": "131280",
    "end": "136739"
  },
  {
    "text": "so this would make it a thread safe and whether this is a good design for uh",
    "start": "136739",
    "end": "142620"
  },
  {
    "text": "active objects completely different but then I have now I have to explain my fix",
    "start": "142620",
    "end": "147840"
  },
  {
    "text": "to the rest of the deal like oh my God so this is stricter Behavior so",
    "start": "147840",
    "end": "154680"
  },
  {
    "text": "and trying to explain this to some of my Engineers I figured out like oh no I",
    "start": "154680",
    "end": "160260"
  },
  {
    "text": "don't have the words to describe why it was wrong",
    "start": "160260",
    "end": "165720"
  },
  {
    "text": "so this is why this talk happened so it feels very trivial to explain this",
    "start": "165720",
    "end": "173099"
  },
  {
    "text": "word but then here we are so about me quickly my name is I've been",
    "start": "173099",
    "end": "181260"
  },
  {
    "text": "programming roughly for 15 years to give or take most important most easy prefers",
    "start": "181260",
    "end": "186599"
  },
  {
    "text": "but also in C sharp Java python have been paid to program it and also Ada so",
    "start": "186599",
    "end": "193560"
  },
  {
    "text": "that's why uh graduated from Norwegian University of Science and Technology with the",
    "start": "193560",
    "end": "200940"
  },
  {
    "text": "Masters CV linchina in engineering cybernetics yeah about 15 years ago",
    "start": "200940",
    "end": "209220"
  },
  {
    "text": "so yeah currently working at somewhere collection we make reverse vending machines and yeah we are Harvard and",
    "start": "209220",
    "end": "215640"
  },
  {
    "text": "come talk to us but anyway okay guarantees my mind works best with",
    "start": "215640",
    "end": "221519"
  },
  {
    "text": "guarantees so I was thinking all the time so what does this statement make sense",
    "start": "221519",
    "end": "227159"
  },
  {
    "text": "what does this thing mean is it correct does the code do what the program programmer intended this is often this",
    "start": "227159",
    "end": "235019"
  },
  {
    "text": "is very often the difficult one the statement can be programmatically legal because the",
    "start": "235019",
    "end": "241379"
  },
  {
    "text": "language but still wrong for us so I try to use guarantees to draw the",
    "start": "241379",
    "end": "248640"
  },
  {
    "text": "box and figure out where I'm working in and one way I use it is guarantees for",
    "start": "248640",
    "end": "255120"
  },
  {
    "text": "me sets the limits for compiler optimizations because you'd say the the language",
    "start": "255120",
    "end": "262260"
  },
  {
    "text": "guarantees this and this and this and the rest are optimizations",
    "start": "262260",
    "end": "267960"
  },
  {
    "text": "some way of think about it",
    "start": "267960",
    "end": "272600"
  },
  {
    "text": "so follow that it's just a word",
    "start": "273800",
    "end": "280199"
  },
  {
    "start": "275000",
    "end": "660000"
  },
  {
    "text": "but it appears in many programming languages so",
    "start": "280199",
    "end": "286139"
  },
  {
    "text": "we'll start by going through some of the languages the most important ones I think and a small head Sub C and C plus",
    "start": "286139",
    "end": "292320"
  },
  {
    "text": "plus will come at the end because something uh so in Java Java was the thing we",
    "start": "292320",
    "end": "301919"
  },
  {
    "text": "started with and in Java volatile is a keyword on a",
    "start": "301919",
    "end": "306960"
  },
  {
    "text": "class field and the guarantee is for that class field is",
    "start": "306960",
    "end": "312780"
  },
  {
    "text": "that this field will be Atomic and it will be thread safe to access",
    "start": "312780",
    "end": "319520"
  },
  {
    "text": "for foreshadowing for later this is not used for memory mapped IO remember math",
    "start": "322080",
    "end": "327419"
  },
  {
    "text": "IO in Java is yeah it's probably behind some",
    "start": "327419",
    "end": "333000"
  },
  {
    "text": "library or something so a typical way in Java to use this is to have some kind of volatile flag it",
    "start": "333000",
    "end": "340919"
  },
  {
    "text": "and you can have a thread that just spins on that that ways for it to be",
    "start": "340919",
    "end": "346380"
  },
  {
    "text": "true and then print it out and then you have in the main we set the number we",
    "start": "346380",
    "end": "352440"
  },
  {
    "text": "want to print before we set the relative light",
    "start": "352440",
    "end": "358320"
  },
  {
    "text": "so because ready is volatile this while loop",
    "start": "358320",
    "end": "364740"
  },
  {
    "text": "will always read the correct value because if we didn't have a volatile on",
    "start": "364740",
    "end": "370740"
  },
  {
    "text": "it it could decide to print zero instead",
    "start": "370740",
    "end": "377160"
  },
  {
    "text": "because of race conditions so by volatile we make it Atomic we make it thread safe",
    "start": "377160",
    "end": "383419"
  },
  {
    "text": "everything's good easy to talk about c-sharp exact same thing",
    "start": "383419",
    "end": "390419"
  },
  {
    "text": "some say C sharp with Java 2 but whatever so it is you can use it as a keyword on",
    "start": "390419",
    "end": "396780"
  },
  {
    "text": "a class field like in Java but it also yeah and then here it has the same",
    "start": "396780",
    "end": "403020"
  },
  {
    "text": "guarantees that it is atomic and it's just that safe but in addition C sharp",
    "start": "403020",
    "end": "410520"
  },
  {
    "text": "adds some Standalone functions one functions to read from my location and",
    "start": "410520",
    "end": "416639"
  },
  {
    "text": "one for to write from a location the guarantee is for those is slightly different from the field",
    "start": "416639",
    "end": "422340"
  },
  {
    "text": "and that the calls are never removed they will always be there then the runtime of the compiler will",
    "start": "422340",
    "end": "430680"
  },
  {
    "text": "say we will add a memory barrier so that yeah if to go from the standard from the",
    "start": "430680",
    "end": "439199"
  },
  {
    "text": "spec if a read or write appears after this method in the code the processor cannot move it before this method",
    "start": "439199",
    "end": "445080"
  },
  {
    "text": "so it guarantees if you see in the in the code you have you have a volatile read nothing can be placed nothing can",
    "start": "445080",
    "end": "451919"
  },
  {
    "text": "be optimized to run before it so okay that's good because you now have",
    "start": "451919",
    "end": "458580"
  },
  {
    "text": "some extra guarantees for the access and the fact that he uses a memory",
    "start": "458580",
    "end": "464639"
  },
  {
    "text": "barrier means that we can these volatile reading rights to",
    "start": "464639",
    "end": "471539"
  },
  {
    "text": "implement things like logs",
    "start": "471539",
    "end": "475220"
  },
  {
    "text": "a different language D language largely considered a success of the C",
    "start": "476699",
    "end": "482699"
  },
  {
    "text": "plus which supposedly have learned the typical system doesn't it has two",
    "start": "482699",
    "end": "487740"
  },
  {
    "text": "Library functions want to do a volatile load and want to do a volatile store",
    "start": "487740",
    "end": "494099"
  },
  {
    "text": "it's only implemented for some few basic types like unsigned eight it's 16 bit 32",
    "start": "494099",
    "end": "502139"
  },
  {
    "text": "and 64 bits but it has even fewer guarantees",
    "start": "502139",
    "end": "508080"
  },
  {
    "text": "it is it doesn't guarantee atomicity it doesn't guarantee a memory barrier",
    "start": "508080",
    "end": "515700"
  },
  {
    "text": "everything that he guarantees is that it's never removed it will always be",
    "start": "515700",
    "end": "521159"
  },
  {
    "text": "there in the compile code and the if you do volatile operations call",
    "start": "521159",
    "end": "527880"
  },
  {
    "text": "these two functions they are never reordered",
    "start": "527880",
    "end": "532740"
  },
  {
    "text": "against themselves so you have a volatile load and then a voltage store they cannot be reordered",
    "start": "534180",
    "end": "541860"
  },
  {
    "text": "so it's even weaker so if you needed to have some extra guarantees you",
    "start": "541860",
    "end": "548459"
  },
  {
    "text": "probably have to implement add the memory barrier yourself so it's even weaker but it's it's",
    "start": "548459",
    "end": "555540"
  },
  {
    "text": "starting to look like a tiny Lego brick and you have a memory barrier as another Lego brick and then you start to build",
    "start": "555540",
    "end": "562440"
  },
  {
    "text": "higher abstractions remember to go further to rust it also",
    "start": "562440",
    "end": "569339"
  },
  {
    "text": "has separate functions for this it takes a pointer and then you can either read volatility",
    "start": "569339",
    "end": "575660"
  },
  {
    "text": "from it and or you'll get right one without these are limited to row pointers and then outside let's go and these have the",
    "start": "575660",
    "end": "582420"
  },
  {
    "text": "same guarantees as at MD it's explicitly non-atomic and it doesn't have a memory",
    "start": "582420",
    "end": "587880"
  },
  {
    "text": "barrier and to quote from the statistics it's kind of funny because they just punt to",
    "start": "587880",
    "end": "594899"
  },
  {
    "text": "climb the basics Is Us our cement this is basically what C has",
    "start": "594899",
    "end": "602660"
  },
  {
    "text": "so that's kind of fun uh I'll take Sig for",
    "start": "602700",
    "end": "608779"
  },
  {
    "text": "foreign actually has volatiles on the keyboard but it limits its two pointers",
    "start": "608779",
    "end": "614940"
  },
  {
    "text": "it has the same guarantees as the ones from the Rustin",
    "start": "614940",
    "end": "621240"
  },
  {
    "text": "yeah another the chords are never removed",
    "start": "621240",
    "end": "626519"
  },
  {
    "text": "and they are never reordered with other volatile accesses but looking at the Ducks is always fun",
    "start": "626519",
    "end": "633899"
  },
  {
    "text": "because you get some nice quotes is if you see code that is using volatile for",
    "start": "633899",
    "end": "639300"
  },
  {
    "text": "something other than memory Maps input and output it's probably a bug and that's kind of the lesson you should",
    "start": "639300",
    "end": "646620"
  },
  {
    "text": "take to CLC plus plus as well there are very few uses for volatile",
    "start": "646620",
    "end": "653040"
  },
  {
    "text": "so it's very limited very good",
    "start": "653040",
    "end": "658399"
  },
  {
    "start": "660000",
    "end": "1154000"
  },
  {
    "text": "I'm guessing that's the major reason people are here uh all the languages we've seen before",
    "start": "661940",
    "end": "668760"
  },
  {
    "text": "have come after CNC purpose so they've learned the lessons",
    "start": "668760",
    "end": "674700"
  },
  {
    "text": "you can see volatile is a type qualifier so you have a type for example int and",
    "start": "674700",
    "end": "681240"
  },
  {
    "text": "you can qualify that by being a valata",
    "start": "681240",
    "end": "686060"
  },
  {
    "text": "so that's kind of makes sense and then but you can add it to pointers",
    "start": "686760",
    "end": "692399"
  },
  {
    "text": "as well and then you started to get some kind of nice explosions you have a a is",
    "start": "692399",
    "end": "698459"
  },
  {
    "text": "a pointer to an INT but B is a volatile pointer to an end",
    "start": "698459",
    "end": "703800"
  },
  {
    "text": "C is a pointer to a volatile int D is a volatile pointer to a volatile in and",
    "start": "703800",
    "end": "710040"
  },
  {
    "text": "I'm confusing myself probably but yeah in the proposity is probably I hope",
    "start": "710040",
    "end": "717720"
  },
  {
    "text": "they don't work but according to the language they are illegal",
    "start": "717720",
    "end": "723240"
  },
  {
    "text": "but what the and the fun one at the bottom for those who can see it is a",
    "start": "723240",
    "end": "729000"
  },
  {
    "text": "member function pointer a volatile qualified member function",
    "start": "729000",
    "end": "734880"
  },
  {
    "text": "pointer probably oh it's doesn't make sense but let's figure out",
    "start": "734880",
    "end": "741060"
  },
  {
    "text": "what the why we've come to this so quick quick history of serious relationship",
    "start": "741060",
    "end": "746760"
  },
  {
    "text": "with volatile because you have some",
    "start": "746760",
    "end": "752700"
  },
  {
    "text": "code in your seek some C code and you they reached the problem where the",
    "start": "752700",
    "end": "759779"
  },
  {
    "text": "compiler started to optimize things and suddenly their accesses to CPU registers",
    "start": "759779",
    "end": "765180"
  },
  {
    "text": "were gone or more specifically they had a keyword and then they tried to read the is is",
    "start": "765180",
    "end": "772620"
  },
  {
    "text": "there a keyboard interrupt and then the compiler said hey you're only reading from this I can read it once and just",
    "start": "772620",
    "end": "779579"
  },
  {
    "text": "reuse that so then she said okay this is a problem we have to guarantee that the read",
    "start": "779579",
    "end": "786000"
  },
  {
    "text": "occurs every time it seems to occur in the code",
    "start": "786000",
    "end": "791279"
  },
  {
    "text": "so they add the volatile as a fix for this uh that's perfectly fine and then six",
    "start": "791279",
    "end": "798480"
  },
  {
    "text": "plus plus comes along and says volatile is allowed wherever const is allowed",
    "start": "798480",
    "end": "803880"
  },
  {
    "text": "when things get weird oh because volatile you can in C you can",
    "start": "803880",
    "end": "810420"
  },
  {
    "text": "place it everywhere you can place const and then it comes Hebrew plus 20 and they start figure out that a lot of",
    "start": "810420",
    "end": "817440"
  },
  {
    "text": "these uses of the keyword volatile doesn't really make sense",
    "start": "817440",
    "end": "822899"
  },
  {
    "text": "they are Oddities such as a function parameter let's qualify that",
    "start": "822899",
    "end": "828660"
  },
  {
    "text": "volatile makes no sense because you take a value you take a argument and you",
    "start": "828660",
    "end": "836180"
  },
  {
    "text": "guaranteeing to read from that every time like why would you do that because",
    "start": "836180",
    "end": "841620"
  },
  {
    "text": "if you are the language is complete control and if you read it once it doesn't have",
    "start": "841620",
    "end": "848760"
  },
  {
    "text": "an effect okay so let's see Professor decides to",
    "start": "848760",
    "end": "854100"
  },
  {
    "text": "defecate a whole lot of stuff and then back pedals on a few things because uh",
    "start": "854100",
    "end": "859800"
  },
  {
    "text": "MCU people say hey we use this so that one's back and then C is 23",
    "start": "859800",
    "end": "866639"
  },
  {
    "text": "comes along soon and depreciates the same as C plus plus there are some standard is which is yeah",
    "start": "866639",
    "end": "873779"
  },
  {
    "text": "it's standardization it's not fun so welcome to the abstract machine",
    "start": "873779",
    "end": "878899"
  },
  {
    "text": "you have the phrasing L and access to an object to the use of an L value of",
    "start": "878899",
    "end": "885420"
  },
  {
    "text": "volatile qualified type is a volatile axis like uh and it's too much for me",
    "start": "885420",
    "end": "892320"
  },
  {
    "text": "the phrase evaluate the strictly according to the rules of the abstract machine means every read must happen",
    "start": "892320",
    "end": "899760"
  },
  {
    "text": "because it's considered a side effect and every right must happen because it's",
    "start": "899760",
    "end": "905519"
  },
  {
    "text": "considered a side effect and a small photo plus equals is",
    "start": "905519",
    "end": "912180"
  },
  {
    "text": "slightly weird because it's according to the language it's a read modify right but you probably have an increment",
    "start": "912180",
    "end": "918380"
  },
  {
    "text": "instructions on your assembly so listen so an L value of a volatile",
    "start": "918380",
    "end": "924240"
  },
  {
    "text": "qualified type IHC is basically a phrasing issue to",
    "start": "924240",
    "end": "929399"
  },
  {
    "text": "handle casting so if you have an X which is a volatile",
    "start": "929399",
    "end": "934680"
  },
  {
    "text": "int and you write three the language now guarantees that X",
    "start": "934680",
    "end": "941040"
  },
  {
    "text": "is written as three like okay",
    "start": "941040",
    "end": "948620"
  },
  {
    "text": "but if you had a loop for example and you keep kept assigning 3 to X",
    "start": "948660",
    "end": "955440"
  },
  {
    "text": "then the compiler is obligated to perform the right every single time",
    "start": "955440",
    "end": "963260"
  },
  {
    "text": "and if you have a normal unqualified int",
    "start": "964320",
    "end": "970860"
  },
  {
    "text": "you can take a reference to it cause that pointer to a volatile quality",
    "start": "970860",
    "end": "976560"
  },
  {
    "text": "qualified end pointer the reference that and assign it to the three and you get",
    "start": "976560",
    "end": "982139"
  },
  {
    "text": "the same behavior because you have a pointer that says I'm",
    "start": "982139",
    "end": "988079"
  },
  {
    "text": "pointing to something that is volatile and I'm writing to that as if it was a",
    "start": "988079",
    "end": "993839"
  },
  {
    "text": "volatile well it does all the time so that one also happens every single time",
    "start": "993839",
    "end": "1001360"
  },
  {
    "text": "so that the phrasing L value over what is my qualified type is right okay",
    "start": "1001519",
    "end": "1006860"
  },
  {
    "text": "no understand that yes we guaranteed that every right happens",
    "start": "1006860",
    "end": "1013660"
  },
  {
    "text": "exactly once for every statement in the book we",
    "start": "1013660",
    "end": "1018680"
  },
  {
    "text": "guarantee that if there's a right it happened exactly what so you have you can also you have a",
    "start": "1018680",
    "end": "1024918"
  },
  {
    "text": "guaranteed ordering between those volatile axis and but importantly you are not",
    "start": "1024919",
    "end": "1032079"
  },
  {
    "text": "guaranteed ordering related to other non-qualified variables",
    "start": "1032079",
    "end": "1037760"
  },
  {
    "text": "so if you have a bunch of variables and you try to guard them behind the",
    "start": "1037760",
    "end": "1043100"
  },
  {
    "text": "volatile that will not work in practice hopefully foreign",
    "start": "1043100",
    "end": "1050260"
  },
  {
    "text": "ERS are smart and stupid so that's what I meant alluded to",
    "start": "1050260",
    "end": "1057440"
  },
  {
    "text": "earlier because if you have to guarantee accesses to other things you",
    "start": "1057440",
    "end": "1064820"
  },
  {
    "text": "have to insert memory barriers to ensure that you propagate everything into the memory and",
    "start": "1064820",
    "end": "1071780"
  },
  {
    "text": "things can't move past that one in practice volatile is",
    "start": "1071780",
    "end": "1078080"
  },
  {
    "text": "volatile is used to catch the things happened outside your program",
    "start": "1078080",
    "end": "1084220"
  },
  {
    "text": "and program essentially means whatever you what the language itself handles",
    "start": "1084220",
    "end": "1092559"
  },
  {
    "text": "the Curious cases are things like CPU registers",
    "start": "1093500",
    "end": "1098660"
  },
  {
    "text": "like you can have a weird City View registers that have like right only",
    "start": "1098660",
    "end": "1104720"
  },
  {
    "text": "semantics like you cannot read from them you have registers that have clear on",
    "start": "1104720",
    "end": "1112039"
  },
  {
    "text": "read like if you perform a read the next read will be different",
    "start": "1112039",
    "end": "1117740"
  },
  {
    "text": "like you cannot capture that in the CNC processor programming language currently",
    "start": "1117740",
    "end": "1123740"
  },
  {
    "text": "you probably have won't so the the expected Act of performing a read or a",
    "start": "1123740",
    "end": "1129320"
  },
  {
    "text": "write on the hardware is the effect you're wanting to keep",
    "start": "1129320",
    "end": "1135820"
  },
  {
    "text": "that's the interesting part it's just it's not manipulating conceptual data in your program it's performing the actual",
    "start": "1136580",
    "end": "1143720"
  },
  {
    "text": "access towards memory or to GPU registers",
    "start": "1143720",
    "end": "1150940"
  },
  {
    "text": "there yeah you use volatile in order to guarantee",
    "start": "1153140",
    "end": "1159740"
  },
  {
    "start": "1154000",
    "end": "1477000"
  },
  {
    "text": "that the read happens and the guarantee that it happens on actual artistical read write Hardware",
    "start": "1159740",
    "end": "1167960"
  },
  {
    "text": "right so it's very limited it's not useful",
    "start": "1167960",
    "end": "1174500"
  },
  {
    "text": "very much but when you need it you absolutely need it so that's why see if you registered",
    "start": "1174500",
    "end": "1181700"
  },
  {
    "text": "other types of memory map dial typical and again it's not just that you read",
    "start": "1181700",
    "end": "1188120"
  },
  {
    "text": "and write data is the act that you perform the read and the act that you perform the right that is",
    "start": "1188120",
    "end": "1195919"
  },
  {
    "text": "the important thing so you can have some very weird people",
    "start": "1195919",
    "end": "1202100"
  },
  {
    "text": "it's for example the accesses are allowed to tear so if you have if you say you access you",
    "start": "1202100",
    "end": "1210200"
  },
  {
    "text": "want to read a 64 bit value on a 32-bit machine the",
    "start": "1210200",
    "end": "1216020"
  },
  {
    "text": "language is perfectly allowed to compile that as two read instructions",
    "start": "1216020",
    "end": "1221840"
  },
  {
    "text": "so you have to inspect your generated code to ensure that when you",
    "start": "1221840",
    "end": "1227480"
  },
  {
    "text": "do these kind of volatile operations you get the actual instructions you want",
    "start": "1227480",
    "end": "1234519"
  },
  {
    "text": "a warning about sea star casts uh t-stack casts are very liberally what",
    "start": "1235100",
    "end": "1243380"
  },
  {
    "text": "they do and it's too easy to Cast Away volatile so if you wanted to guarantee that you",
    "start": "1243380",
    "end": "1249620"
  },
  {
    "text": "keep using the volatile semantics for these kind of variables be very careful with using C costs",
    "start": "1249620",
    "end": "1256700"
  },
  {
    "text": "because suddenly you've removed them and if you can",
    "start": "1256700",
    "end": "1261740"
  },
  {
    "text": "do you have to do this especially if you have to do use non-copy or memset for example",
    "start": "1261740",
    "end": "1268000"
  },
  {
    "text": "memset will not work with volatile data it cannot work because if",
    "start": "1268000",
    "end": "1275539"
  },
  {
    "text": "because it the signature of it is it takes a void pointer and so if you have something that's",
    "start": "1275539",
    "end": "1281960"
  },
  {
    "text": "volatile appointed to volatile whether that in or Texture I appointed the",
    "start": "1281960",
    "end": "1287900"
  },
  {
    "text": "volatile void then you have to Cast Away the volatile qualifier and if you access",
    "start": "1287900",
    "end": "1296080"
  },
  {
    "text": "data that is considered was defined as volatile",
    "start": "1296080",
    "end": "1301520"
  },
  {
    "text": "as non-volatile then you're in undefined Behavior Charter",
    "start": "1301520",
    "end": "1306679"
  },
  {
    "text": "and once you hit memset and mem copy then the compiler says can start to use",
    "start": "1306679",
    "end": "1313400"
  },
  {
    "text": "data in the data row analysis and just remove everything well yeah",
    "start": "1313400",
    "end": "1319640"
  },
  {
    "text": "and if you have assignments through your assignments",
    "start": "1319640",
    "end": "1325400"
  },
  {
    "text": "things get kind of weird when you try to figure out which accesses should be",
    "start": "1325400",
    "end": "1331640"
  },
  {
    "text": "kept if one of these is volatile it",
    "start": "1331640",
    "end": "1337280"
  },
  {
    "text": "so just don't uh if you you use plus equals",
    "start": "1337280",
    "end": "1345200"
  },
  {
    "text": "if x was volatile qualified and you would expect",
    "start": "1345200",
    "end": "1350659"
  },
  {
    "text": "it to be an increment instruction on your CPU but according to the language",
    "start": "1350659",
    "end": "1356840"
  },
  {
    "text": "it's probably should be uh read followed",
    "start": "1356840",
    "end": "1362240"
  },
  {
    "text": "by an update in memory and Then followed by a right and that may not be what you do so that",
    "start": "1362240",
    "end": "1368659"
  },
  {
    "text": "one has been duplicated the bottom one is I take X and or in",
    "start": "1368659",
    "end": "1375980"
  },
  {
    "text": "or equals a value let's set it basically a set a bit",
    "start": "1375980",
    "end": "1381440"
  },
  {
    "text": "and that one is kind of fuzzy right now because what you would expect from a",
    "start": "1381440",
    "end": "1388340"
  },
  {
    "text": "volatile is that you read the value of x you set the bit in that value and you",
    "start": "1388340",
    "end": "1394100"
  },
  {
    "text": "write it back but some MCU providers they have said now that we have to have",
    "start": "1394100",
    "end": "1400820"
  },
  {
    "text": "this one back because we generate an increment introduction for this which technically is not standards",
    "start": "1400820",
    "end": "1408919"
  },
  {
    "text": "compliant but what can you do you have another funny thing what about",
    "start": "1408919",
    "end": "1414919"
  },
  {
    "text": "the volatile Union can the volatile can the union active",
    "start": "1414919",
    "end": "1420799"
  },
  {
    "text": "member change for me to read and then I'm like I'm confused again",
    "start": "1420799",
    "end": "1429100"
  },
  {
    "text": "if you want anything there is there's too much so yeah some comparison",
    "start": "1430600",
    "end": "1436700"
  },
  {
    "text": "for what we have so the first one Javan zipper first that's that's when it's",
    "start": "1436700",
    "end": "1441919"
  },
  {
    "text": "used for hey I know this should put this is a thread safe thing this is a thread communication primitive",
    "start": "1441919",
    "end": "1450140"
  },
  {
    "text": "and then you have the C the C sharp function uh followed I read and write",
    "start": "1450140",
    "end": "1456620"
  },
  {
    "text": "those are more for doing what is in C and C plus plus some reverse and",
    "start": "1456620",
    "end": "1463159"
  },
  {
    "text": "everything considered a volatile access but it also inserts in a memory barrier and all the West one I like hey only",
    "start": "1463159",
    "end": "1470240"
  },
  {
    "text": "thing we guarantee is that the read happened and the right happens",
    "start": "1470240",
    "end": "1474640"
  },
  {
    "text": "so in my brief on This I Promise some helpers and",
    "start": "1476659",
    "end": "1482659"
  },
  {
    "text": "guidelines but the basic guideline is use it very",
    "start": "1482659",
    "end": "1488419"
  },
  {
    "text": "sparingly so but guidelines are for avoiding sharp edges in the language",
    "start": "1488419",
    "end": "1494659"
  },
  {
    "text": "so if you have several languages that you use in practice side by side things",
    "start": "1494659",
    "end": "1499820"
  },
  {
    "text": "can get hairy and if you want to have a keyword like this that appears with different semantics in different",
    "start": "1499820",
    "end": "1505700"
  },
  {
    "text": "languages you really should have some proper guidelines in in your",
    "start": "1505700",
    "end": "1511880"
  },
  {
    "text": "to help become the developers use the right thing",
    "start": "1511880",
    "end": "1517780"
  },
  {
    "text": "so uh of the ones we looked at the only one that really needs help us is CNC",
    "start": "1518120",
    "end": "1523520"
  },
  {
    "text": "Plus and in C you can only really do macros so",
    "start": "1523520",
    "end": "1530120"
  },
  {
    "text": "let's do C plus plus inside I propose that you add two Standalone",
    "start": "1530120",
    "end": "1538159"
  },
  {
    "text": "functions to mimic those we saw in D and rust but like that is volatile load and",
    "start": "1538159",
    "end": "1544100"
  },
  {
    "text": "volatile store these take the pointer that you're working on",
    "start": "1544100",
    "end": "1550340"
  },
  {
    "text": "and the value so the main benefits of this is you have now given it a name",
    "start": "1550340",
    "end": "1555500"
  },
  {
    "text": "just like Kate said earlier this morning this is a name this element is now an",
    "start": "1555500",
    "end": "1560659"
  },
  {
    "text": "abstraction for you so now you'd never need you don't have",
    "start": "1560659",
    "end": "1565760"
  },
  {
    "text": "to check the Declaration of the variable or anything you see that oh at this point in a code I'm performing a",
    "start": "1565760",
    "end": "1571700"
  },
  {
    "text": "volatile store and at this point I want this exact read to happen every single",
    "start": "1571700",
    "end": "1578659"
  },
  {
    "text": "time and then you can choose when and when you don't want it",
    "start": "1578659",
    "end": "1584260"
  },
  {
    "text": "exactly these kind of templates has been proposed for this ISO C plus plus but it's requested for the revisions for",
    "start": "1584260",
    "end": "1591980"
  },
  {
    "text": "them uh yeah I try to implement this one in sieve and generics and",
    "start": "1591980",
    "end": "1597740"
  },
  {
    "text": "didn't really make it work oh we'll see the implementation for this",
    "start": "1597740",
    "end": "1603320"
  },
  {
    "text": "pretty straightforward but there is quite a lot of noise to make it production ready",
    "start": "1603320",
    "end": "1610039"
  },
  {
    "text": "basic function is it is a template don't be afraid there's a volatile load it takes the",
    "start": "1610039",
    "end": "1616760"
  },
  {
    "text": "point to do what is where it's supposed to load from and it tells that want to",
    "start": "1616760",
    "end": "1622820"
  },
  {
    "text": "an L value whatever long pricing because you say I want to read the cost of this",
    "start": "1622820",
    "end": "1628940"
  },
  {
    "text": "pointer to something that points to a volatile is that dereference it and return it the implementation is",
    "start": "1628940",
    "end": "1636559"
  },
  {
    "text": "like it's one line so why does this help",
    "start": "1636559",
    "end": "1641260"
  },
  {
    "text": "save a store entice the destination that takes the value to point it just perform whatever",
    "start": "1646159",
    "end": "1652580"
  },
  {
    "text": "you would use normally and see oh and see purpose but the uses of these",
    "start": "1652580",
    "end": "1659179"
  },
  {
    "text": "are exactly that they are given an explicit name at the call site",
    "start": "1659179",
    "end": "1665360"
  },
  {
    "text": "so now the intention is that it's done different from a normal dereferencing operations",
    "start": "1665360",
    "end": "1672140"
  },
  {
    "text": "because a normal de-referencing operation if you have a normal pointer you say like I'm just going to read it",
    "start": "1672140",
    "end": "1679279"
  },
  {
    "text": "but if you have a volatile load you say that you're using something slightly different it's it has an extra effect",
    "start": "1679279",
    "end": "1687340"
  },
  {
    "text": "and not just reading from memory so by like giving it a different name",
    "start": "1687340",
    "end": "1695539"
  },
  {
    "text": "you say that things are a bit different here be careful",
    "start": "1695539",
    "end": "1701679"
  },
  {
    "text": "pretty good stuff yeah we can take this one step further",
    "start": "1703520",
    "end": "1708679"
  },
  {
    "text": "and use a new type instead uh the standards have this concept that",
    "start": "1708679",
    "end": "1715760"
  },
  {
    "text": "they call volatile asset device registers and the intention is that if you have",
    "start": "1715760",
    "end": "1721520"
  },
  {
    "text": "volatile it acts like some kind of weird CPU register and then we can we can",
    "start": "1721520",
    "end": "1727880"
  },
  {
    "text": "call this in and in a better we could instead of point to the volatile we can",
    "start": "1727880",
    "end": "1733580"
  },
  {
    "text": "probably call it register like I have a register I can read from it and I can write to it",
    "start": "1733580",
    "end": "1740539"
  },
  {
    "text": "what's fun about this one is that I take an access uh type marker type",
    "start": "1740539",
    "end": "1747679"
  },
  {
    "text": "and this means I can actually Implement a write only pointer",
    "start": "1747679",
    "end": "1753799"
  },
  {
    "text": "which is kind of interesting sometimes you want to communicate to",
    "start": "1753799",
    "end": "1759919"
  },
  {
    "text": "others that hey I'm taking something I will never read it I don't want to know how to read",
    "start": "1759919",
    "end": "1766159"
  },
  {
    "text": "it I will it is a right only and the right only pointer",
    "start": "1766159",
    "end": "1772700"
  },
  {
    "text": "is yeah it fine there are some tempered magic in",
    "start": "1772700",
    "end": "1779419"
  },
  {
    "text": "here just to make it basically construct",
    "start": "1779419",
    "end": "1784419"
  },
  {
    "text": "so the main benefits of this is that it's it's not what it does it's all the",
    "start": "1784760",
    "end": "1790940"
  },
  {
    "text": "thing it doesn't do it doesn't do type conversion implicit conversions it",
    "start": "1790940",
    "end": "1797299"
  },
  {
    "text": "doesn't have pointer arithmetic it can be used to compile compound assignments and stuff so it's",
    "start": "1797299",
    "end": "1805360"
  },
  {
    "text": "very often when you create a new type is to restrict what happens not enable new",
    "start": "1805360",
    "end": "1812659"
  },
  {
    "text": "stuff the uses for this",
    "start": "1812659",
    "end": "1820340"
  },
  {
    "text": "is like yeah it's a comparison between the",
    "start": "1820340",
    "end": "1826159"
  },
  {
    "text": "Standalone functions and the the object and now I come down to what do you",
    "start": "1826159",
    "end": "1834380"
  },
  {
    "text": "prefer in your code it it's always a close-up whether you want to use Standalone",
    "start": "1834380",
    "end": "1840919"
  },
  {
    "text": "functions or you want to use some types and Jonathan Miller had an uh an article",
    "start": "1840919",
    "end": "1847100"
  },
  {
    "text": "in Accu 170 recently about just this topic about when to use a function and",
    "start": "1847100",
    "end": "1852919"
  },
  {
    "text": "when to use a new type wrappers are cool and they are very",
    "start": "1852919",
    "end": "1858679"
  },
  {
    "text": "useful it is an abstraction but you can always have more and you probably should",
    "start": "1858679",
    "end": "1866320"
  },
  {
    "text": "because volatile is kind of this weird Edge to the language you always want to",
    "start": "1866320",
    "end": "1872360"
  },
  {
    "text": "compartmentalize and isolate that kind of logic and names are always good thank you Kate",
    "start": "1872360",
    "end": "1879260"
  },
  {
    "text": "so a very common one is a register very",
    "start": "1879260",
    "end": "1884600"
  },
  {
    "text": "useful for embedded like I have a register that is my clock and that is read only and whenever I",
    "start": "1884600",
    "end": "1892039"
  },
  {
    "text": "read it I get the new counter you can also have if you have memory mapped IO talking to an fpga you could",
    "start": "1892039",
    "end": "1899840"
  },
  {
    "text": "also have a new type for like this nfpga Bank",
    "start": "1899840",
    "end": "1905179"
  },
  {
    "text": "and or if you have other shared memory you can have I have a shared memory of size and then you could have functions",
    "start": "1905179",
    "end": "1911779"
  },
  {
    "text": "that have I want the normal point to read or you want the volatile read",
    "start": "1911779",
    "end": "1916880"
  },
  {
    "text": "use these kind of helpers for isolating these kind of volatile weirdness",
    "start": "1916880",
    "end": "1923120"
  },
  {
    "text": "Oddities so yeah it all depends on your domain of",
    "start": "1923120",
    "end": "1928159"
  },
  {
    "text": "course the helpers is not enough you probably",
    "start": "1928159",
    "end": "1934100"
  },
  {
    "start": "1931000",
    "end": "2329000"
  },
  {
    "text": "need to tell if your colleagues how they use the language",
    "start": "1934100",
    "end": "1940039"
  },
  {
    "text": "and the guidelines for her when when and when not to use this volatile thingy",
    "start": "1940039",
    "end": "1947440"
  },
  {
    "text": "so yeah memory map dial the only time you really should use volatile if you",
    "start": "1947440",
    "end": "1954380"
  },
  {
    "text": "don't have memory map IO or you don't know what it is you don't need volatile basically that's it",
    "start": "1954380",
    "end": "1962140"
  },
  {
    "text": "this is a kind of I know it when I see it kind of thing I need",
    "start": "1962140",
    "end": "1968360"
  },
  {
    "text": "this kind of extra information extra guaranteed for every reader right",
    "start": "1968360",
    "end": "1975140"
  },
  {
    "text": "so yeah memory mapped IO the only time you should use volatile use these",
    "start": "1975140",
    "end": "1980899"
  },
  {
    "text": "helpers to perform the read or write because if you just do a normal reader",
    "start": "1980899",
    "end": "1986480"
  },
  {
    "text": "right it's very confusable you don't know when you read the code whether this is a volatile read",
    "start": "1986480",
    "end": "1992720"
  },
  {
    "text": "or it's a normal way to read well and what that is important the the",
    "start": "1992720",
    "end": "1999019"
  },
  {
    "text": "difference with whether you're at the volatile or not that's when you use helpers that's when you use a different",
    "start": "1999019",
    "end": "2004419"
  },
  {
    "text": "abstraction a different name for example I want to store it to",
    "start": "2004419",
    "end": "2009460"
  },
  {
    "text": "pointer 24601. okay that means okay I have this pointer",
    "start": "2009460",
    "end": "2015880"
  },
  {
    "text": "another expertly want to read write that value because by writing that value",
    "start": "2015880",
    "end": "2021279"
  },
  {
    "text": "probably I'm triggering some interrupting the BGA or something",
    "start": "2021279",
    "end": "2026320"
  },
  {
    "text": "yeah you could also as I said you could have a register that is un232 it is a reading",
    "start": "2026320",
    "end": "2032500"
  },
  {
    "text": "only and that's my counter my clock in embedded and then you can have the fbj bank",
    "start": "2032500",
    "end": "2039039"
  },
  {
    "text": "number 42 like okay I'm having working on this kind of Chunk",
    "start": "2039039",
    "end": "2045340"
  },
  {
    "text": "and should probably note that memory mapped IO is a general",
    "start": "2045340",
    "end": "2051158"
  },
  {
    "text": "term uh this particularly includes like CPU registers it's like one of the most",
    "start": "2051159",
    "end": "2057760"
  },
  {
    "text": "common memory Maps IO at least for embedded and then another thing is threading",
    "start": "2057760",
    "end": "2064300"
  },
  {
    "text": "don't use volatile use atomics use locks because those give you guarantees for",
    "start": "2064300",
    "end": "2071500"
  },
  {
    "text": "execution order for everything else and the standard library and see if you",
    "start": "2071500",
    "end": "2077980"
  },
  {
    "text": "first have all the things you want so check c4pa reference for that",
    "start": "2077980",
    "end": "2085300"
  },
  {
    "text": "and I've been telling a small lie because",
    "start": "2085300",
    "end": "2090700"
  },
  {
    "text": "you might have to use volatile when talking to a signal Handler in",
    "start": "2090700",
    "end": "2097060"
  },
  {
    "text": "earlier versions of C volatile Sig Atomic T was the only",
    "start": "2097060",
    "end": "2102940"
  },
  {
    "text": "allowed way to talk from Sigma Panda to the rest of your program",
    "start": "2102940",
    "end": "2108339"
  },
  {
    "text": "it was the only thing what was blessed now we will probably use other normal",
    "start": "2108339",
    "end": "2113740"
  },
  {
    "text": "Atomic types so yeah if you see volatile segatomic or",
    "start": "2113740",
    "end": "2119079"
  },
  {
    "text": "even worse if you see Sig Atomic which is not volatile qualified",
    "start": "2119079",
    "end": "2124180"
  },
  {
    "text": "then you should write a patch immediately probably because then your signal Handler don't",
    "start": "2124180",
    "end": "2131680"
  },
  {
    "text": "work signal handlers are a weird beast in the",
    "start": "2131680",
    "end": "2137680"
  },
  {
    "text": "zone you basically only have to you're allowed to set the value and then return but everything you basically can do",
    "start": "2137680",
    "end": "2146819"
  },
  {
    "text": "so yeah some actual phrasings that I hope you can use is let's say only use",
    "start": "2148660",
    "end": "2156460"
  },
  {
    "text": "volatile for memory Maps i o like that's the kind of sentence I would like to see in a coding guideline",
    "start": "2156460",
    "end": "2163660"
  },
  {
    "text": "or use the provided helpers when accessing memory map dial",
    "start": "2163660",
    "end": "2169060"
  },
  {
    "text": "again go back to cake gregories it is some new name it is a different",
    "start": "2169060",
    "end": "2175900"
  },
  {
    "text": "thing from normal reader right and I think use locks or atomics when",
    "start": "2175900",
    "end": "2182500"
  },
  {
    "text": "synchronizing threads like straight to the point directed action use this",
    "start": "2182500",
    "end": "2189640"
  },
  {
    "text": "use automatic to communicate from signal handles and the last one is always you",
    "start": "2189640",
    "end": "2195220"
  },
  {
    "text": "see philosopher's style Typecast this one probably covers many thing",
    "start": "2195220",
    "end": "2201099"
  },
  {
    "text": "other things but then you cannot cost accidentally Cast Away volatile",
    "start": "2201099",
    "end": "2207880"
  },
  {
    "text": "which would probably land you right in the undefined Behavior so yeah GCC can give you all these",
    "start": "2207880",
    "end": "2214960"
  },
  {
    "text": "errors universally helpful I hope some of these",
    "start": "2214960",
    "end": "2222099"
  },
  {
    "text": "are useful no to me volatile as a keyword was and",
    "start": "2222099",
    "end": "2229119"
  },
  {
    "text": "probably still is kind of confusable as I think that CNC professors currently",
    "start": "2229119",
    "end": "2234700"
  },
  {
    "text": "allow it in way too many places like if you have a variable x that you",
    "start": "2234700",
    "end": "2241420"
  },
  {
    "text": "declare as volatile like it doesn't if I write to this you have I it doesn't have",
    "start": "2241420",
    "end": "2248500"
  },
  {
    "text": "an association to the outside world so why does it matter that the actual read",
    "start": "2248500",
    "end": "2254140"
  },
  {
    "text": "happens every single time so yeah this is kind of why the newer",
    "start": "2254140",
    "end": "2261040"
  },
  {
    "text": "languages only take volatile through pointers like the normal cases you have a pointer to",
    "start": "2261040",
    "end": "2267880"
  },
  {
    "text": "some part of memory memory mapped uh device registered exact address or something and you do it right through",
    "start": "2267880",
    "end": "2275079"
  },
  {
    "text": "that pointer and every time so that's if you see a standalone variable that's",
    "start": "2275079",
    "end": "2281619"
  },
  {
    "text": "marked as water type I would ask the author of why that happens",
    "start": "2281619",
    "end": "2289240"
  },
  {
    "text": "so yeah uh I really think you should have helper wrappers available really",
    "start": "2289240",
    "end": "2294460"
  },
  {
    "text": "really do so but and to complement that you have",
    "start": "2294460",
    "end": "2299680"
  },
  {
    "text": "to have guidelines to say use this and guidelines I've read a lot of",
    "start": "2299680",
    "end": "2305800"
  },
  {
    "text": "guidelines and they are very often like suggestive and do this prefer this",
    "start": "2305800",
    "end": "2311980"
  },
  {
    "text": "prefer that like have a have try to have it as direct as possible like use this",
    "start": "2311980",
    "end": "2317920"
  },
  {
    "text": "don't use this use it so I'm",
    "start": "2317920",
    "end": "2323700"
  },
  {
    "text": "blazing ahead so I'm sorry but thank you",
    "start": "2323700",
    "end": "2328680"
  },
  {
    "text": "[Applause]",
    "start": "2328880",
    "end": "2334300"
  },
  {
    "start": "2329000",
    "end": "2500000"
  },
  {
    "text": "so we are way ahead of scheduled I was quite nervous so",
    "start": "2334300",
    "end": "2341560"
  },
  {
    "text": "any questions yes [Music]",
    "start": "2341560",
    "end": "2348780"
  },
  {
    "text": "thank you",
    "start": "2352420",
    "end": "2355380"
  },
  {
    "text": "not guarantee is not guaranteed because microphone didn't catch up if you have",
    "start": "2360940",
    "end": "2368680"
  },
  {
    "text": "the question was if you have a volatile qualified fields of attract wow and you use that one to communicate",
    "start": "2368680",
    "end": "2377020"
  },
  {
    "text": "to some other component to start and stop at that that's the exact problem with it is because you don't have a",
    "start": "2377020",
    "end": "2383260"
  },
  {
    "text": "memory barrier so dashboard flag cannot guard anything",
    "start": "2383260",
    "end": "2388900"
  },
  {
    "text": "so if your thread accesses any of the data you can still access those that",
    "start": "2388900",
    "end": "2393940"
  },
  {
    "text": "data even though you've toggled the flag so you get this kind of yeah you toggle",
    "start": "2393940",
    "end": "2401200"
  },
  {
    "text": "the flag but I'm choosing to ignore it because I moved code around the check",
    "start": "2401200",
    "end": "2407400"
  },
  {
    "text": "and this is why you have to have these kind of memory barriers to explicitly",
    "start": "2407680",
    "end": "2412900"
  },
  {
    "text": "say everything below everything Above This has to have happened before I'll",
    "start": "2412900",
    "end": "2418839"
  },
  {
    "text": "continue so the combination of a memory barrier and then the volatile reads",
    "start": "2418839",
    "end": "2425680"
  },
  {
    "text": "could get you somewhere but again I did say use an atomic",
    "start": "2425680",
    "end": "2431079"
  },
  {
    "text": "instead it's a perfectly implemented piece of code it's in the",
    "start": "2431079",
    "end": "2436359"
  },
  {
    "text": "standard Library it always guarantees what you want and you don't have to try to communicate",
    "start": "2436359",
    "end": "2442240"
  },
  {
    "text": "to the other ones why this kind of trickery or things will actually do what you want",
    "start": "2442240",
    "end": "2449320"
  },
  {
    "text": "it's just it's easier to explain to others",
    "start": "2449320",
    "end": "2454140"
  },
  {
    "text": "but yeah to further elaborate it might work in single value",
    "start": "2457359",
    "end": "2463380"
  },
  {
    "text": "any other there you have please contact me if",
    "start": "2468760",
    "end": "2476500"
  },
  {
    "text": "anything say hello to me personally the font has been Atkinson hyper legible from Braille Institute it's great and if",
    "start": "2476500",
    "end": "2484839"
  },
  {
    "text": "you want you can drive me at work compared to me make me change my mind do whatever",
    "start": "2484839",
    "end": "2491200"
  },
  {
    "text": "thank you",
    "start": "2491200",
    "end": "2493920"
  }
]