[
  {
    "text": "hello can everyone hear me yay I'm Tess and I'm maybe a little bit more",
    "start": "599",
    "end": "8340"
  },
  {
    "text": "excited about algorithms than the next person who here is super interested in algorithms",
    "start": "8340",
    "end": "15860"
  },
  {
    "text": "otherwise this might not be the talk for you to be honest um",
    "start": "16139",
    "end": "21840"
  },
  {
    "text": "I had I'm so interested in algorithms that over the last year I should",
    "start": "21840",
    "end": "26939"
  },
  {
    "text": "probably have joined something like algorithms Anonymous or something I've done daily lead code for a year",
    "start": "26939",
    "end": "35040"
  },
  {
    "text": "um entered in competitive programming and a few other things but it also made me go down this path of actually like",
    "start": "35040",
    "end": "41460"
  },
  {
    "text": "looking at what these algorithms are and like look at the base of them because I",
    "start": "41460",
    "end": "46559"
  },
  {
    "text": "kind of am so old that I forgot everything I learned in school about these algorithms they have gotten",
    "start": "46559",
    "end": "53399"
  },
  {
    "text": "a little bit of a bad reputation I think is something that we're only using in",
    "start": "53399",
    "end": "58559"
  },
  {
    "text": "like interviews for for big Tech firms",
    "start": "58559",
    "end": "63600"
  },
  {
    "text": "I disagree with this statement a little bit because um I do think that while my job at",
    "start": "63600",
    "end": "69900"
  },
  {
    "text": "Microsoft does not look like this not at all I wish it did I actually really wish it did but um it",
    "start": "69900",
    "end": "78420"
  },
  {
    "text": "does look a little bit like this so it looks like I have to to make algorithms that does background",
    "start": "78420",
    "end": "86159"
  },
  {
    "text": "removal or or that does color decomposition Norm right now I'm working",
    "start": "86159",
    "end": "92820"
  },
  {
    "text": "um a c-sharp scheduling and orchestrating very large sets of jobs on",
    "start": "92820",
    "end": "98700"
  },
  {
    "text": "batch and this too requires these algorithms so the things that I've learned like in",
    "start": "98700",
    "end": "104759"
  },
  {
    "text": "these base algorithms make me make better choices for when I create like",
    "start": "104759",
    "end": "110640"
  },
  {
    "text": "the bigger style algorithms we're going to go through a number of algorithms",
    "start": "110640",
    "end": "116280"
  },
  {
    "text": "and we're going to start with a very very simple one that I think most of you know and if you don't you will know it",
    "start": "116280",
    "end": "123000"
  },
  {
    "text": "in five minutes um so we have a situation where I'm",
    "start": "123000",
    "end": "128039"
  },
  {
    "text": "thinking about a number between one and a hundred and you're gonna guess what number it is in the least",
    "start": "128039",
    "end": "134660"
  },
  {
    "text": "questions possible I will always tell you if it's higher or lower",
    "start": "134660",
    "end": "140160"
  },
  {
    "text": "what would be your optimal First Choice like first pick",
    "start": "140160",
    "end": "147060"
  },
  {
    "text": "anyone 50. everyone knows why would it be 50.",
    "start": "147060",
    "end": "152879"
  },
  {
    "text": "whoever said that yes it essentially reduces the set of",
    "start": "152879",
    "end": "158760"
  },
  {
    "text": "numbers that we'll end up with um by half in fact it's probably not the most",
    "start": "158760",
    "end": "164220"
  },
  {
    "text": "probable number the most probable number would probably be like 742 or 69 but it",
    "start": "164220",
    "end": "170459"
  },
  {
    "text": "will definitely remove like the most amount of numbers so we're doing this",
    "start": "170459",
    "end": "177000"
  },
  {
    "text": "and then I say higher and someone picks like now we're dividing the next set in half and the",
    "start": "177000",
    "end": "183239"
  },
  {
    "text": "next and the next and the next and the next and finally we end up with only one",
    "start": "183239",
    "end": "188879"
  },
  {
    "text": "number and it happens to be 85. um so we did this in seven tries",
    "start": "188879",
    "end": "195599"
  },
  {
    "text": "and this is actually the maximum number of tries we would ever have to guess for a hundred numbers",
    "start": "195599",
    "end": "203519"
  },
  {
    "text": "and this algorithm is called binary search and it's a very basic but very",
    "start": "203519",
    "end": "208739"
  },
  {
    "text": "useful algorithms as we'll see um in fact in this case if we would have",
    "start": "208739",
    "end": "215760"
  },
  {
    "text": "guessed one two three four five and so on we would have had to guess 85 times",
    "start": "215760",
    "end": "222420"
  },
  {
    "text": "that's a little bit of a waste of time maximum we would have guessed a hundred times if I would have picked 100 and you",
    "start": "222420",
    "end": "228900"
  },
  {
    "text": "would have gone linearly um as compared to so this is called o of n we'll get there later",
    "start": "228900",
    "end": "235500"
  },
  {
    "text": "as compared to would binary Source where we only had to guess seven times",
    "start": "235500",
    "end": "241860"
  },
  {
    "text": "um this is what's called oh logavin if anyone is interested and the reason for this is because when",
    "start": "241860",
    "end": "248400"
  },
  {
    "text": "we're constantly dividing we're actually doing it in log two times so which is",
    "start": "248400",
    "end": "253620"
  },
  {
    "text": "664. or 6.64 but you can't do 6.64 guesses so it's going to be seven",
    "start": "253620",
    "end": "260220"
  },
  {
    "text": "now you might say okay so 785 who cares computers are fast",
    "start": "260220",
    "end": "267360"
  },
  {
    "text": "it's not going to matter but if we're talking about like a million numbers now we're talking about",
    "start": "267360",
    "end": "273139"
  },
  {
    "text": "instead of seven guesses we're talking about 20 guesses versus a million and if we're talking",
    "start": "273139",
    "end": "278940"
  },
  {
    "text": "about a trillion numbers we actually have to guess only 29 times instead of a",
    "start": "278940",
    "end": "285060"
  },
  {
    "text": "trillion and that's where it starts making sense to use these kind of algorithms",
    "start": "285060",
    "end": "291060"
  },
  {
    "text": "now we can use these algorithms to find an item in a list because this is like if it's if the list is sorted we can",
    "start": "291060",
    "end": "298199"
  },
  {
    "text": "find the item in the list in the same way we would go from the end pick the middle number and then say it's",
    "start": "298199",
    "end": "303900"
  },
  {
    "text": "the tie or lower it's lower now we shorten our space to this and this is like a typical use case of",
    "start": "303900",
    "end": "311040"
  },
  {
    "text": "binary search in Python um so I spend most of my work time in C",
    "start": "311040",
    "end": "316860"
  },
  {
    "text": "sharp and most of my free time in Python in Python there is a bisect function for",
    "start": "316860",
    "end": "322380"
  },
  {
    "text": "this so you don't even have to learn how to implement binary search you can just use the pre",
    "start": "322380",
    "end": "327600"
  },
  {
    "text": "uh predefined function but we can also use it in some other a",
    "start": "327600",
    "end": "333360"
  },
  {
    "text": "little bit more interesting cases so this is a case this Elite code problem",
    "start": "333360",
    "end": "338759"
  },
  {
    "text": "but it's it's actually a lead code problem that kind of depicts another bigger problem and it's called cocoa",
    "start": "338759",
    "end": "345120"
  },
  {
    "text": "eating bananas so what is this about is this you have Coco who's a monkey she likes",
    "start": "345120",
    "end": "351240"
  },
  {
    "text": "bananas and her handlers give her piles of bananas each pile contains a different",
    "start": "351240",
    "end": "358320"
  },
  {
    "text": "number of items they say you need to eat this up or she",
    "start": "358320",
    "end": "363720"
  },
  {
    "text": "wants to eat them up and but they have to be gone by eight or in eight hours",
    "start": "363720",
    "end": "370080"
  },
  {
    "text": "um she has this thing where she will only ever eat out of one pile every given hour and she wants to savor the",
    "start": "370080",
    "end": "377039"
  },
  {
    "text": "banana so if she wants to go slow so basically what's the slowest speed that we can eat from all the piles and still",
    "start": "377039",
    "end": "383699"
  },
  {
    "text": "make it in eight hours if we do this it's calculating this if",
    "start": "383699",
    "end": "388800"
  },
  {
    "text": "we go one banana per hour then it will take 27 hours that's obviously too too",
    "start": "388800",
    "end": "394020"
  },
  {
    "text": "high um two bananas per hour at 15 hours three four so four bananas per hour is",
    "start": "394020",
    "end": "402419"
  },
  {
    "text": "the lowest number of in a low speed we can go at and still eat all of these so",
    "start": "402419",
    "end": "408720"
  },
  {
    "text": "this is now we're doing a linear search and that's fine but what if it turns out that cocoa is a",
    "start": "408720",
    "end": "416280"
  },
  {
    "text": "little bit of a different type of monkey um and she eats not only three and four",
    "start": "416280",
    "end": "422280"
  },
  {
    "text": "bananas but they give her 10 000 piles of bananas",
    "start": "422280",
    "end": "427740"
  },
  {
    "text": "containing a trillion bananas or what is it 10 yeah billion sorry a billion",
    "start": "427740",
    "end": "434580"
  },
  {
    "text": "bananas in each pile now we might not be talking about monkeys",
    "start": "434580",
    "end": "441660"
  },
  {
    "text": "and bananas anymore to be honest we're talking about like maybe Asher batch jobs I don't know because",
    "start": "441660",
    "end": "448380"
  },
  {
    "text": "the numbers here are totally pronounced but what do we do about this because if",
    "start": "448380",
    "end": "453479"
  },
  {
    "text": "we go through when we do this linear search we'll we'll see here that the",
    "start": "453479",
    "end": "458940"
  },
  {
    "text": "highest um highest speed that makes any sense is the the speed at which we like a full",
    "start": "458940",
    "end": "466680"
  },
  {
    "text": "like the biggest stack in one hour so in this case the biggest stack is 11 so",
    "start": "466680",
    "end": "472020"
  },
  {
    "text": "we'll eat it at 11 uh bananas per hour anything above that will still achieve the same number four",
    "start": "472020",
    "end": "478560"
  },
  {
    "text": "hours right um but if we're now talking about 10 000",
    "start": "478560",
    "end": "486180"
  },
  {
    "text": "piles and a billion bananas per time we're now",
    "start": "486180",
    "end": "491880"
  },
  {
    "text": "talking about 10 000 times a billion which turns out to be like 10 trillion",
    "start": "491880",
    "end": "498240"
  },
  {
    "text": "and that will you know I don't know what your Hardware looks like but my Hardware cannot",
    "start": "498240",
    "end": "504060"
  },
  {
    "text": "calculate this um so what can we do then well we can use our binary search",
    "start": "504060",
    "end": "511020"
  },
  {
    "text": "so we can calculate sort of like every single one of these rows we start at the bottom and top we'll",
    "start": "511020",
    "end": "518219"
  },
  {
    "text": "take the middle piece which happens to here be you know 5 billion",
    "start": "518219",
    "end": "523440"
  },
  {
    "text": "and see um is this good enough if so we can move",
    "start": "523440",
    "end": "528899"
  },
  {
    "text": "to lower if it's not good enough we'll move at a higher speed so this is a way that we can use binary",
    "start": "528899",
    "end": "536160"
  },
  {
    "text": "search even in a set where it's not an array and it's not a set of numbers as",
    "start": "536160",
    "end": "541380"
  },
  {
    "text": "long as it's some sorted kind of area where you can always answer",
    "start": "541380",
    "end": "546600"
  },
  {
    "text": "is it lower or higher am I good enough or or which direction should I move",
    "start": "546600",
    "end": "553260"
  },
  {
    "text": "so and now we've turned it into instead of 10 by a billion or 10 000 by a billion",
    "start": "553260",
    "end": "559800"
  },
  {
    "text": "it's like actually 290 000 in which my Hardware very much can handle",
    "start": "559800",
    "end": "565740"
  },
  {
    "text": "so we saw so this is like the first of the the important algorithms I think",
    "start": "565740",
    "end": "572880"
  },
  {
    "text": "uh I talked about like oh login and now with n",
    "start": "572880",
    "end": "578220"
  },
  {
    "text": "um I'm sure most of you know of Big O notation I'm not going to spend a whole lot of time on it and I'm just going to",
    "start": "578220",
    "end": "583800"
  },
  {
    "text": "do like a one slide primer for anyone who doesn't um so bigger notation is a way for you",
    "start": "583800",
    "end": "590640"
  },
  {
    "text": "to compare algorithms it's a very crude yardstick to measure things by it's not",
    "start": "590640",
    "end": "596820"
  },
  {
    "text": "at all you know it it won't tell you the actual performance of another great thing but",
    "start": "596820",
    "end": "602880"
  },
  {
    "text": "it will tell you kind of like the relative to maybe another algorithm so if we have a list of fruits then if you",
    "start": "602880",
    "end": "609660"
  },
  {
    "text": "go through and you you go through that list and you print out everything that's called owoven because that's like",
    "start": "609660",
    "end": "616860"
  },
  {
    "text": "linearly relative to how many items you have in the list if you do something like you go through",
    "start": "616860",
    "end": "624600"
  },
  {
    "text": "um in a nested loop it's going to be o f n squared because now you're having to",
    "start": "624600",
    "end": "629640"
  },
  {
    "text": "do like n times n operations if you're just printing out like a",
    "start": "629640",
    "end": "635279"
  },
  {
    "text": "random number even if you're printing out like five random things or a hundred",
    "start": "635279",
    "end": "640320"
  },
  {
    "text": "random things that's going to be called o one we don't care about constants so",
    "start": "640320",
    "end": "645480"
  },
  {
    "text": "it's not going to be o over 100 it's going to be over one if we do a binary search we've already",
    "start": "645480",
    "end": "651060"
  },
  {
    "text": "seen that that's o of log n and you might wonder then well what if",
    "start": "651060",
    "end": "657420"
  },
  {
    "text": "we sort this array if it wasn't sorted to begin with is it more efficient then",
    "start": "657420",
    "end": "663660"
  },
  {
    "text": "to do a binary search sort and do a binary search or do a linear search and",
    "start": "663660",
    "end": "669180"
  },
  {
    "text": "the answer is um that it is more efficient to do linear search because",
    "start": "669180",
    "end": "674820"
  },
  {
    "text": "sorting in itself is at minimum n log n this is like the",
    "start": "674820",
    "end": "681120"
  },
  {
    "text": "fastest algorithm for sorting that there is you can't really go",
    "start": "681120",
    "end": "686399"
  },
  {
    "text": "Beyond this so I will also say that the um the whole uh",
    "start": "686399",
    "end": "694680"
  },
  {
    "text": "Big O notation deals with the worst case scenario so obviously if you're starting",
    "start": "694680",
    "end": "699779"
  },
  {
    "text": "with a very sorted list and you're trying to sort it you might sort in very",
    "start": "699779",
    "end": "705360"
  },
  {
    "text": "little time it doesn't necessarily have to go to even and login but for this is the worst",
    "start": "705360",
    "end": "711839"
  },
  {
    "text": "case scenario um and you want to basically have your",
    "start": "711839",
    "end": "718019"
  },
  {
    "text": "algorithms if you have an algorithm and listen o of an algorithm then that's a",
    "start": "718019",
    "end": "723180"
  },
  {
    "text": "fairly good algorithm I would say there is one sort that is actually our",
    "start": "723180",
    "end": "729360"
  },
  {
    "text": "event it's actually not 11 but it looks like an O of n algorithm and it's this",
    "start": "729360",
    "end": "734820"
  },
  {
    "text": "one um I don't know if you guys have ever tried this this is from I got this from Kevin Henny",
    "start": "734820",
    "end": "741779"
  },
  {
    "text": "um and I think it's a pretty cute sort where you try to sort a list of numbers by basically delaying the the printout",
    "start": "741779",
    "end": "750720"
  },
  {
    "text": "and seconds based on what the number is now this is a no event is this a very",
    "start": "750720",
    "end": "756839"
  },
  {
    "text": "efficient algorithm not really so again o of n or like this",
    "start": "756839",
    "end": "763380"
  },
  {
    "text": "big O doesn't tell the full story but it tells enough of a story that that it",
    "start": "763380",
    "end": "769500"
  },
  {
    "text": "will take us and that we can compare um so one more thing about o m before we",
    "start": "769500",
    "end": "776940"
  },
  {
    "text": "leave um if I want to look up a number or a fruit in this list",
    "start": "776940",
    "end": "783540"
  },
  {
    "text": "that's going to be an O of n uh thing so I have to basically go",
    "start": "783540",
    "end": "790380"
  },
  {
    "text": "through the full list to figure out if the item is there but",
    "start": "790380",
    "end": "795899"
  },
  {
    "text": "if I make this into a set instead a hash set in C sharp or",
    "start": "795899",
    "end": "801839"
  },
  {
    "text": "or a dictionary or anything that uses hashes and keys then I will look it up",
    "start": "801839",
    "end": "808800"
  },
  {
    "text": "by key in ower1 so this is quite important because if you don't think about anything else about algorithms",
    "start": "808800",
    "end": "815339"
  },
  {
    "text": "then just knowing um that if you want to do keyed lookups",
    "start": "815339",
    "end": "821760"
  },
  {
    "text": "you're much better off with a hash set which is a key lookup type structure",
    "start": "821760",
    "end": "827940"
  },
  {
    "text": "versus a list and that will make a lot of difference for you when you when you go through",
    "start": "827940",
    "end": "834000"
  },
  {
    "text": "things so let's take a look at another data",
    "start": "834000",
    "end": "839459"
  },
  {
    "text": "structure um instead of hashes and lists and things like that a graph",
    "start": "839459",
    "end": "846360"
  },
  {
    "text": "um so graphs are insanely uh useful but they're also a little bit",
    "start": "846360",
    "end": "852240"
  },
  {
    "text": "scary when you start out I think um so graphs can be used for for",
    "start": "852240",
    "end": "858560"
  },
  {
    "text": "modeling a lot of things like natural things that you will model with graphs",
    "start": "858560",
    "end": "863639"
  },
  {
    "text": "are like relationships like Facebook friends this is a undirected graph because every relationship in this case",
    "start": "863639",
    "end": "870600"
  },
  {
    "text": "is um by what they call it like bi-directional if I'm friends with",
    "start": "870600",
    "end": "875700"
  },
  {
    "text": "someone they're friends with me back um if we're looking at Twitter for example this is a directed graph because",
    "start": "875700",
    "end": "883320"
  },
  {
    "text": "I might be following Beyonce but she's not following me back so maybe no no I don't think",
    "start": "883320",
    "end": "889920"
  },
  {
    "text": "she um and then you have you can model for example in this case we're modeling",
    "start": "889920",
    "end": "895680"
  },
  {
    "text": "cities it's a graph in this case the nodes we'll call them nodes or vertices are",
    "start": "895680",
    "end": "902339"
  },
  {
    "text": "the cities and then the things in between are called edges and there are the roads in this case and",
    "start": "902339",
    "end": "908639"
  },
  {
    "text": "you can also see here that we have um weights on the road so it's a different thing and like it's",
    "start": "908639",
    "end": "915360"
  },
  {
    "text": "faster maybe to go from from this city to this city that's like",
    "start": "915360",
    "end": "920820"
  },
  {
    "text": "30 kilometers versus going here is like 70 kilometers so it does make a",
    "start": "920820",
    "end": "926040"
  },
  {
    "text": "difference which road you take um so that's like a weighted graph and",
    "start": "926040",
    "end": "931199"
  },
  {
    "text": "this graph also has a cycle so it means that you can go around in a circle and",
    "start": "931199",
    "end": "936480"
  },
  {
    "text": "end up where you where you started that's quite important for these algorithms",
    "start": "936480",
    "end": "943260"
  },
  {
    "text": "um this one is like a similar one with weights um but it's got like two different",
    "start": "943260",
    "end": "949440"
  },
  {
    "text": "groups this is generally called a disjoint set um and then you can model other things",
    "start": "949440",
    "end": "955980"
  },
  {
    "text": "like graphs like let's say you have um a matrix in this case all of the spots",
    "start": "955980",
    "end": "962880"
  },
  {
    "text": "that you can be on in the Maze are nodes and all of its neighbors are the other",
    "start": "962880",
    "end": "968940"
  },
  {
    "text": "squares that you can get to so in this case the neighbor of the the starting Square would be this square and instead",
    "start": "968940",
    "end": "976500"
  },
  {
    "text": "of like actually modeling the graph from the start and putting out like all the",
    "start": "976500",
    "end": "981540"
  },
  {
    "text": "different edges you'd gradually generate these edges as you go along",
    "start": "981540",
    "end": "988260"
  },
  {
    "text": "similarly if we have like a horse in this case we have the same Matrix and",
    "start": "988260",
    "end": "993959"
  },
  {
    "text": "the horse is a starting point but now these are the neighbors like the horse cannot move I guess to",
    "start": "993959",
    "end": "1000440"
  },
  {
    "text": "its adjacent scores but you figure this out as you go along so we have other types of graphs like a",
    "start": "1000440",
    "end": "1007639"
  },
  {
    "text": "tree um this is a special graph you use the same kind of algorithms and everything",
    "start": "1007639",
    "end": "1013339"
  },
  {
    "text": "for it but you can take some shortcuts because you know it's always going to be",
    "start": "1013339",
    "end": "1018380"
  },
  {
    "text": "like going from the root every root is going to have or every notice can have two children",
    "start": "1018380",
    "end": "1024020"
  },
  {
    "text": "Etc you can have a binary search tree this is a very useful structure for doing things in the same fast ways binary",
    "start": "1024020",
    "end": "1031280"
  },
  {
    "text": "search so in this case if I look at number seven I will know that it's always going to be to the left of the",
    "start": "1031280",
    "end": "1037160"
  },
  {
    "text": "root which is eight because it's smaller than the N8 and that way it makes it incredibly fast to search through",
    "start": "1037160",
    "end": "1045020"
  },
  {
    "text": "one of the trees this also an important tree is called a trial prefix tree so",
    "start": "1045020",
    "end": "1051799"
  },
  {
    "text": "this is something that you can use for example let's say you do routing in um on the web",
    "start": "1051799",
    "end": "1058100"
  },
  {
    "text": "um and you want to know as people type something in or even if you're doing autocomplete you can do something like",
    "start": "1058100",
    "end": "1063919"
  },
  {
    "text": "this to figure out if a string is valid or not so let's say I start typing in a",
    "start": "1063919",
    "end": "1070100"
  },
  {
    "text": "from the root a is a valid letter it's in the list of of places I can go to",
    "start": "1070100",
    "end": "1077240"
  },
  {
    "text": "I type in P I type in P again and now I've reached a point where that node is",
    "start": "1077240",
    "end": "1083960"
  },
  {
    "text": "marked as being an end letter in a word so I will know as I",
    "start": "1083960",
    "end": "1089240"
  },
  {
    "text": "type that app is now like an actual word but app is also is the start of Apple so",
    "start": "1089240",
    "end": "1096140"
  },
  {
    "text": "if I continue and I write l I'm now not at a word but I'm at a valid path",
    "start": "1096140",
    "end": "1101960"
  },
  {
    "text": "and then I go to E and I'm not available",
    "start": "1101960",
    "end": "1106539"
  },
  {
    "text": "tree for when you want to do prefix searches so if you're thinking about like routing in in asp.net this is what",
    "start": "1123140",
    "end": "1130220"
  },
  {
    "text": "you can use to to figure out if the routing is ever going to be correct or not or if you can shortcut and say I'm",
    "start": "1130220",
    "end": "1136940"
  },
  {
    "text": "not even going to bother with this right um and then another graph is a linked",
    "start": "1136940",
    "end": "1144559"
  },
  {
    "text": "list I'm not going to spend too much time on that but if we have a graph they look pretty on paper but how do you",
    "start": "1144559",
    "end": "1150380"
  },
  {
    "text": "actually represent them in in code so one way that you can represent them is",
    "start": "1150380",
    "end": "1155660"
  },
  {
    "text": "by doing an edge list like this um",
    "start": "1155660",
    "end": "1160419"
  },
  {
    "text": "so in this one in this case this Edge list actually fully describes this this",
    "start": "1161240",
    "end": "1166820"
  },
  {
    "text": "whole graph assuming that it's an undirected graph it's not a very efficient way of",
    "start": "1166820",
    "end": "1172820"
  },
  {
    "text": "describing it for algorithms but it's a very efficient way for describing it because of its brevity",
    "start": "1172820",
    "end": "1178400"
  },
  {
    "text": "hey you can also put in things like the weight and and it works very very well but a",
    "start": "1178400",
    "end": "1183860"
  },
  {
    "text": "more efficient way for to describe it for algorithms is like this",
    "start": "1183860",
    "end": "1189380"
  },
  {
    "text": "um instead describe every node and all the other nodes that you can get to",
    "start": "1189380",
    "end": "1194900"
  },
  {
    "text": "and this is called an adjacency list so typically when you have a graph problem you will represent it maybe initially as",
    "start": "1194900",
    "end": "1201440"
  },
  {
    "text": "a naturalist but then immediately kind of transfer it over to this adjacency",
    "start": "1201440",
    "end": "1206900"
  },
  {
    "text": "list format so that you can go through and run algorithms on it the reason why",
    "start": "1206900",
    "end": "1212120"
  },
  {
    "text": "this is more efficient is because if I wanted to look up like any notes that I could get to from Oslo in the other case",
    "start": "1212120",
    "end": "1217580"
  },
  {
    "text": "I would have had to look through every single edge and seen is Oslo part of this and then which is",
    "start": "1217580",
    "end": "1225020"
  },
  {
    "text": "the other one and this is how you would represent sort of like a weighted list",
    "start": "1225020",
    "end": "1231080"
  },
  {
    "text": "but enough about um data structures even if data structures are fun let's look at an",
    "start": "1231080",
    "end": "1236840"
  },
  {
    "text": "algorithm and this is like a base algorithm for um for graphs so we have two basic",
    "start": "1236840",
    "end": "1243679"
  },
  {
    "text": "algorithms for graph BFFs and DFS depth first search and breadth first search",
    "start": "1243679",
    "end": "1248840"
  },
  {
    "text": "we'll start with the depth first search and what we do in here is we we start",
    "start": "1248840",
    "end": "1255140"
  },
  {
    "text": "with one node um and we then go to its neighbor and its neighbor",
    "start": "1255140",
    "end": "1262580"
  },
  {
    "text": "and its neighbor and its neighbor and its neighbor and so on",
    "start": "1262580",
    "end": "1268039"
  },
  {
    "text": "until we reach the end or if we don't reach the end we will then go back to",
    "start": "1268039",
    "end": "1273140"
  },
  {
    "text": "the last time a node had more than one neighbor and then go on sort of the",
    "start": "1273140",
    "end": "1278840"
  },
  {
    "text": "other path so this is quite easy algorithm we also",
    "start": "1278840",
    "end": "1284059"
  },
  {
    "text": "use a visited set to avoid doing Cycles we don't want to kind of like go through",
    "start": "1284059",
    "end": "1289159"
  },
  {
    "text": "and go down and then happen to go right again because that would",
    "start": "1289159",
    "end": "1294860"
  },
  {
    "text": "um that would put us in a cycle uh but this is an easy algorithm to remember East you know put like you have",
    "start": "1294860",
    "end": "1303260"
  },
  {
    "text": "this lasting um What's it gonna be yeah last and first",
    "start": "1303260",
    "end": "1309080"
  },
  {
    "text": "out cue um and and yes kind of process them",
    "start": "1309080",
    "end": "1314120"
  },
  {
    "text": "until you have nothing else to process unfortunately if you see in this you can",
    "start": "1314120",
    "end": "1319580"
  },
  {
    "text": "see that we missed a path to the end that was just four squares where we",
    "start": "1319580",
    "end": "1324679"
  },
  {
    "text": "found this longer path instead and that's going to happen if you're doing a DFS DFS is not a shortest",
    "start": "1324679",
    "end": "1332059"
  },
  {
    "text": "path algorithm um but what we're going to do instead is we can replace this stack or this lethal",
    "start": "1332059",
    "end": "1338900"
  },
  {
    "text": "cue with a FIFA Q and if we do that we'll end up with this",
    "start": "1338900",
    "end": "1344179"
  },
  {
    "text": "so I go through and I started the man again I put in all its neighbors",
    "start": "1344179",
    "end": "1349940"
  },
  {
    "text": "and then instead of going to its neighbor I'll say I'll go to all your neighbors",
    "start": "1349940",
    "end": "1355460"
  },
  {
    "text": "and then we'll go through all this level children and go to all their neighbors",
    "start": "1355460",
    "end": "1360799"
  },
  {
    "text": "and all their neighbors and this way we can actually secure that we're going to get to the first like this is going to",
    "start": "1360799",
    "end": "1368600"
  },
  {
    "text": "be the shortest path to the end now we're doing this in a matrix but this works in any kind of graph",
    "start": "1368600",
    "end": "1375380"
  },
  {
    "text": "so BFS like literally this if you've done this a few times you can write this",
    "start": "1375380",
    "end": "1381020"
  },
  {
    "text": "up in your sleep like it's a very efficient but also very understandable algorithm algorithm I think and",
    "start": "1381020",
    "end": "1389600"
  },
  {
    "text": "very very useful so let's use this in a very different scenario",
    "start": "1389600",
    "end": "1395900"
  },
  {
    "text": "um so I'm not sure if you remember this problem I'm sure some of you do The",
    "start": "1395900",
    "end": "1401600"
  },
  {
    "text": "die-hard Jug problem where you have two jugs one is like five",
    "start": "1401600",
    "end": "1407840"
  },
  {
    "text": "liters and one is three liters and you want to end up with four liters in one",
    "start": "1407840",
    "end": "1413360"
  },
  {
    "text": "of these you can't like fill them up even though they they have numbers on them you can you can only fill them up",
    "start": "1413360",
    "end": "1419659"
  },
  {
    "text": "and to the rim and then you can pour things over to the other one",
    "start": "1419659",
    "end": "1424940"
  },
  {
    "text": "so what we can do to to solve this problem and end up with four liters in",
    "start": "1424940",
    "end": "1430220"
  },
  {
    "text": "one we'll start off with five liters we'll pour it over in the other one now we have two liters in",
    "start": "1430220",
    "end": "1435919"
  },
  {
    "text": "the first one M will then pour it out or pour it over get another",
    "start": "1435919",
    "end": "1442760"
  },
  {
    "text": "five liter end up like this and now we end up in a state where we have four leaders in the big one",
    "start": "1442760",
    "end": "1450200"
  },
  {
    "text": "so what does this have to do with graphs anyone",
    "start": "1450200",
    "end": "1456460"
  },
  {
    "text": "no one sees connection between this and graphs okay what if we do something like this we",
    "start": "1458419",
    "end": "1465020"
  },
  {
    "text": "Mark these as States like it's pretty easy to see how we can Mark these Estates",
    "start": "1465020",
    "end": "1470960"
  },
  {
    "text": "and if we do this like each of these are no are now nodes and all the things that you can produce",
    "start": "1470960",
    "end": "1478039"
  },
  {
    "text": "from that stage you can like so if you have five zero you can go to for example",
    "start": "1478039",
    "end": "1483320"
  },
  {
    "text": "you can throw it all out and have zero zero or you can fill up the three so you",
    "start": "1483320",
    "end": "1489080"
  },
  {
    "text": "can go to five three or you can pour over the five and the three and go to two three state so you can calculate the",
    "start": "1489080",
    "end": "1496159"
  },
  {
    "text": "next state and you can make a graph like this so in order to solve this problem you",
    "start": "1496159",
    "end": "1501440"
  },
  {
    "text": "can use graph algorithms and this is like a very very common way to use graph algorithms where you use States as the",
    "start": "1501440",
    "end": "1508520"
  },
  {
    "text": "nodes and yes the transitions we can which you can calculate all the time as",
    "start": "1508520",
    "end": "1514280"
  },
  {
    "text": "um as the edges in this case we just take the shortest path to any state to task 4 in it",
    "start": "1514280",
    "end": "1520700"
  },
  {
    "text": "and we're done so graphs are much more powerful than",
    "start": "1520700",
    "end": "1526460"
  },
  {
    "text": "just you know whatever you can draw as a picture",
    "start": "1526460",
    "end": "1531400"
  },
  {
    "text": "um if we're doing shortest or cheapest path",
    "start": "1532400",
    "end": "1536919"
  },
  {
    "text": "we already talked about breadth first search if you have something like this where you have a",
    "start": "1538039",
    "end": "1543860"
  },
  {
    "text": "matrix but in this case you want to you have to pick up a key before you reach the the end state in this case your",
    "start": "1543860",
    "end": "1551659"
  },
  {
    "text": "state for the node would not only be the note itself but the node plus whether or",
    "start": "1551659",
    "end": "1557480"
  },
  {
    "text": "not you also own a key so it's okay to go back to an old node it's an old Square",
    "start": "1557480",
    "end": "1564380"
  },
  {
    "text": "as long as you go back only if you're in a different Key State",
    "start": "1564380",
    "end": "1569419"
  },
  {
    "text": "that so like each node like would be x y plus a Boolean key Or Not Key",
    "start": "1569419",
    "end": "1576679"
  },
  {
    "text": "and then you can use BFS again so this is also a very normal thing where you",
    "start": "1576679",
    "end": "1582559"
  },
  {
    "text": "where you denote it like as a state like that or if you have a weighted",
    "start": "1582559",
    "end": "1588679"
  },
  {
    "text": "um weighted edges you might have to use another algorithm like Dyke stress an",
    "start": "1588679",
    "end": "1595460"
  },
  {
    "text": "algorithm that's frequently used and the reason for this is because even if you take one road there might be a faster way or",
    "start": "1595460",
    "end": "1602840"
  },
  {
    "text": "a shorter way by taking two roads to the same location so the number of steps or",
    "start": "1602840",
    "end": "1608059"
  },
  {
    "text": "the number of Roads does not denote like how fast you will get there like",
    "start": "1608059",
    "end": "1613159"
  },
  {
    "text": "the sum of the length of the roads we'll we'll do that",
    "start": "1613159",
    "end": "1618620"
  },
  {
    "text": "and then you have other algorithms that are interesting so a star is another very similar algorithm but the the thing",
    "start": "1618620",
    "end": "1626419"
  },
  {
    "text": "it takes turn into account is that you have some heuristics so let's say I want to go from from London to Edinburgh",
    "start": "1626419",
    "end": "1634120"
  },
  {
    "text": "then I'm not going to take like I'm going to say a heuristic to say",
    "start": "1634120",
    "end": "1639200"
  },
  {
    "text": "I'm always going to pick maybe I don't know um take north roads for example",
    "start": "1639200",
    "end": "1646760"
  },
  {
    "text": "um always go north because that's going to be probably faster to get there than",
    "start": "1646760",
    "end": "1652700"
  },
  {
    "text": "if I would if I would just take any road um but with something like a star if you",
    "start": "1652700",
    "end": "1660320"
  },
  {
    "text": "have if you have a bad heuristic you might end up worse than if you didn't do a star",
    "start": "1660320",
    "end": "1668080"
  },
  {
    "text": "um I'm going to do one more algorithm among graphs before we leave it",
    "start": "1668960",
    "end": "1675700"
  },
  {
    "text": "this is something called the topological search which is also a very interesting type of algorithm there are plenty other",
    "start": "1676220",
    "end": "1682460"
  },
  {
    "text": "algorithms and graphs and like you and you'll find this one if you want to look that up",
    "start": "1682460",
    "end": "1688159"
  },
  {
    "text": "um but course schedule and what we want to do is we we have a",
    "start": "1688159",
    "end": "1693260"
  },
  {
    "text": "graph that looks like this where you have to take class 0 before you take",
    "start": "1693260",
    "end": "1698659"
  },
  {
    "text": "class one or class two and you have to take class 1 and Class 2 before you take class three like they're prerequisites",
    "start": "1698659",
    "end": "1705740"
  },
  {
    "text": "and you want to figure out in which order should you take these classes in order to end up well so",
    "start": "1705740",
    "end": "1713779"
  },
  {
    "text": "the two options here are 0 will always come first and then either",
    "start": "1713779",
    "end": "1719900"
  },
  {
    "text": "one two three or zero two one three both of these are ass valid orders right",
    "start": "1719900",
    "end": "1729440"
  },
  {
    "text": "um so how do we figure out this order this is actually one of the cases where you might end up with multiple Solutions",
    "start": "1729440",
    "end": "1735500"
  },
  {
    "text": "but um either way both of them are fine so one way to figure out like this",
    "start": "1735500",
    "end": "1741860"
  },
  {
    "text": "topological order is to use something called the topological sort and this is super easy algorithm it goes",
    "start": "1741860",
    "end": "1748580"
  },
  {
    "text": "like this we look at any node that doesn't that isn't prerequisite for",
    "start": "1748580",
    "end": "1753620"
  },
  {
    "text": "anything else in this case three this is going to be at the end this is",
    "start": "1753620",
    "end": "1758840"
  },
  {
    "text": "one of my valid endnotes and then we take away anything pointing",
    "start": "1758840",
    "end": "1764059"
  },
  {
    "text": "to it and now we're looking at whatever else now doesn't isn't a prerequisite for",
    "start": "1764059",
    "end": "1769820"
  },
  {
    "text": "anything else and we'll put them in here",
    "start": "1769820",
    "end": "1774700"
  },
  {
    "text": "and now we suddenly have zero that's not a prerequisite for anything else so this",
    "start": "1775039",
    "end": "1780440"
  },
  {
    "text": "is now our order our order in Reverse but still our order it doesn't really matter like reversing",
    "start": "1780440",
    "end": "1785659"
  },
  {
    "text": "is a simple thing so this is a very useful algorithm for when you want to know",
    "start": "1785659",
    "end": "1792200"
  },
  {
    "text": "when you want to order um anything like this",
    "start": "1792200",
    "end": "1797360"
  },
  {
    "text": "um one of the things we did here was use a visited set to to avoid going into",
    "start": "1797360",
    "end": "1803840"
  },
  {
    "text": "I am a loop and that's kind of like a little bit of caching in which takes us",
    "start": "1803840",
    "end": "1810440"
  },
  {
    "text": "to another set of algorithms that are extremely powerful that's called dynamic",
    "start": "1810440",
    "end": "1815600"
  },
  {
    "text": "programming dynamic programming I felt when I when I kind of started reading about algorithms",
    "start": "1815600",
    "end": "1821779"
  },
  {
    "text": "again that um people were kind of like flashing this dynamic programming I'm so cool I'm",
    "start": "1821779",
    "end": "1828080"
  },
  {
    "text": "doing dynamic programming um but it turns out dynamic programming is just another way to say caching",
    "start": "1828080",
    "end": "1836299"
  },
  {
    "text": "and caching I don't know all of us do caching I don't know how feeling how",
    "start": "1836299",
    "end": "1842059"
  },
  {
    "text": "cool you feel when you're doing caching but um we're going to look at anyways how you",
    "start": "1842059",
    "end": "1848899"
  },
  {
    "text": "can use this to greatly speed up your your algorithms",
    "start": "1848899",
    "end": "1855158"
  },
  {
    "text": "so everyone is familiar with Fibonacci I guess I hope",
    "start": "1855260",
    "end": "1861520"
  },
  {
    "text": "Fibonacci numbers is like you um you're taking you get a fibrian",
    "start": "1861520",
    "end": "1866840"
  },
  {
    "text": "national number by taking the previous Plus the previous previous Fibonacci number",
    "start": "1866840",
    "end": "1874640"
  },
  {
    "text": "um if we look at how we calculate for example Fibonacci F5 we know that it's going to be Fibonacci",
    "start": "1874640",
    "end": "1881360"
  },
  {
    "text": "of three plus four but then if we look and we expand the tree a",
    "start": "1881360",
    "end": "1886520"
  },
  {
    "text": "little bit we'll see that we're doing a lot of duplicate work right we're calculating FIB 3 twice and",
    "start": "1886520",
    "end": "1893539"
  },
  {
    "text": "say one's also twice and FIB two actually we're we're calculating it three times",
    "start": "1893539",
    "end": "1899539"
  },
  {
    "text": "so if we're doing like Fibonacci of a million then obviously we're we're pretty fast gonna run out of computing",
    "start": "1899539",
    "end": "1907340"
  },
  {
    "text": "power on our on our machine and I'm sure you've done this and I'm sure you even at Fibonacci 50 like it",
    "start": "1907340",
    "end": "1914840"
  },
  {
    "text": "gets mad um so one thing we can do is we can do something called memorization",
    "start": "1914840",
    "end": "1921799"
  },
  {
    "text": "so memory station is also yes another word for caching um so what we do is we just basically",
    "start": "1921799",
    "end": "1928159"
  },
  {
    "text": "save the results of our fibrians we don't actually recalculate it so",
    "start": "1928159",
    "end": "1933980"
  },
  {
    "text": "so we do this in fact in languages like python we don't even have to do this we can",
    "start": "1933980",
    "end": "1940640"
  },
  {
    "text": "just put the add cache um directive at top and it does the memorization for us",
    "start": "1940640",
    "end": "1947179"
  },
  {
    "text": "so if you're ever doing this kind of recursion you're in a language that",
    "start": "1947179",
    "end": "1952220"
  },
  {
    "text": "allows you to use to put the director do it if not like I mean cash by yourself it's not a big problem",
    "start": "1952220",
    "end": "1958580"
  },
  {
    "text": "what we need to remember though is that when we're doing something like this we're also kind of like",
    "start": "1958580",
    "end": "1965120"
  },
  {
    "text": "um we're getting speedier but we're also sacrificing memory because we have to store the data somewhere so we're we're",
    "start": "1965120",
    "end": "1971899"
  },
  {
    "text": "actually going to use we're trading off memory over speed um and in order to be able to Cache we",
    "start": "1971899",
    "end": "1979940"
  },
  {
    "text": "also need to have the inputs in this case n be hashable items so",
    "start": "1979940",
    "end": "1987080"
  },
  {
    "text": "ins strings something like that but they can't be lists or objects so you have to",
    "start": "1987080",
    "end": "1993080"
  },
  {
    "text": "kind of like transform them in some way so that is something to remember about",
    "start": "1993080",
    "end": "1998179"
  },
  {
    "text": "um yes what parameters you can use in in a case like this but this is very easy",
    "start": "1998179",
    "end": "2004299"
  },
  {
    "text": "um there's another way to do dynamic programming is called tabulation",
    "start": "2004299",
    "end": "2009580"
  },
  {
    "text": "and tabulation is basically instead of going top down you go bottom up so in in",
    "start": "2009580",
    "end": "2016059"
  },
  {
    "text": "our first case we said fiber file is equal to 54 plus paper three in this case we're starting at the bottom and",
    "start": "2016059",
    "end": "2022360"
  },
  {
    "text": "we're saying FIB of zero and Fiber One are these numbers and then we calculate two based on them so we're just",
    "start": "2022360",
    "end": "2028059"
  },
  {
    "text": "basically creating a long list of from the various from the very start from zero and on these are what the numbers",
    "start": "2028059",
    "end": "2034480"
  },
  {
    "text": "are going to be whether or not you're going to use tabulation or memoization depends on",
    "start": "2034480",
    "end": "2040779"
  },
  {
    "text": "for example um if you're you if you're actually using",
    "start": "2040779",
    "end": "2046419"
  },
  {
    "text": "every one of the numbers 0 1 2 3 and so on to calculate maybe 50 it makes sense",
    "start": "2046419",
    "end": "2052240"
  },
  {
    "text": "to do tabulation because you don't have to do recursion which is expensive",
    "start": "2052240",
    "end": "2057280"
  },
  {
    "text": "and whereas for example if you have something where you're sparsely using the other values and you don't know",
    "start": "2057280",
    "end": "2063520"
  },
  {
    "text": "which other calculations you'll use then memorization is a better option it's",
    "start": "2063520",
    "end": "2069220"
  },
  {
    "text": "um it's just a trade-off but both of them are useful so let's see how we can use",
    "start": "2069220",
    "end": "2074800"
  },
  {
    "text": "this in in a real case I don't know maybe not super real but um this is a",
    "start": "2074800",
    "end": "2081040"
  },
  {
    "text": "case of a House robber that is robbing houses and he has this",
    "start": "2081040",
    "end": "2087820"
  },
  {
    "text": "special thing where he will rob a house but if he Robs a house he will then not",
    "start": "2087820",
    "end": "2093280"
  },
  {
    "text": "rob the next house because then the alarms will go off and he'll get caught so let's say he could",
    "start": "2093280",
    "end": "2100300"
  },
  {
    "text": "Rob for example one three and five or one four",
    "start": "2100300",
    "end": "2105880"
  },
  {
    "text": "would be an option or you know two and five or something like that so how would we figure out how he could",
    "start": "2105880",
    "end": "2113859"
  },
  {
    "text": "get the most loot out of this One Way",
    "start": "2113859",
    "end": "2119680"
  },
  {
    "text": "um The Brute Force way would be if we set up all the different options in here",
    "start": "2119680",
    "end": "2126940"
  },
  {
    "text": "actually I did have another slide it was like a little bit better for this",
    "start": "2126940",
    "end": "2132160"
  },
  {
    "text": "okay here here we go um so these are all the options of like where one denotes that he could do the",
    "start": "2132160",
    "end": "2139839"
  },
  {
    "text": "robbery or not except for we have to remove the ones where he's robbing adjacent houses",
    "start": "2139839",
    "end": "2146260"
  },
  {
    "text": "and then we would calculate the loot so everything that was left we would just go through and calculate them we'll take",
    "start": "2146260",
    "end": "2152680"
  },
  {
    "text": "the max of that sounds like a good plan Until you realize that you know in in",
    "start": "2152680",
    "end": "2159520"
  },
  {
    "text": "the test scenario you had like 100 houses which would mean that we would now do uh",
    "start": "2159520",
    "end": "2166060"
  },
  {
    "text": "2 to the power of n times n um which means like 1 27 times time 10",
    "start": "2166060",
    "end": "2173260"
  },
  {
    "text": "to the power 32. this is me waiting for that to finish",
    "start": "2173260",
    "end": "2179200"
  },
  {
    "text": "doing this brute force method um until I realized that I know dynamic",
    "start": "2179200",
    "end": "2185020"
  },
  {
    "text": "programming and I don't I don't have to wait for that to finish because we can do this more efficiently",
    "start": "2185020",
    "end": "2191079"
  },
  {
    "text": "so if we look at this again and we say at every single house and this is a very common pattern for",
    "start": "2191079",
    "end": "2198040"
  },
  {
    "text": "dynamic programming it's a dynamic programming works well if you have sub problems",
    "start": "2198040",
    "end": "2203140"
  },
  {
    "text": "that are repeatable like in the Fibonacci case we often did Fibonacci 3",
    "start": "2203140",
    "end": "2208540"
  },
  {
    "text": "Fibonacci 2 and we can cash them right so in this case we go to house zero",
    "start": "2208540",
    "end": "2214780"
  },
  {
    "text": "and we have two options I can rob it but if I rob it I cannot Rob until I get to house two",
    "start": "2214780",
    "end": "2222579"
  },
  {
    "text": "or I cannot rob it in which case I can rabbit house one right",
    "start": "2222579",
    "end": "2227740"
  },
  {
    "text": "so this is how our equation actually looks the maximum loot at zero is taking the",
    "start": "2227740",
    "end": "2234820"
  },
  {
    "text": "loot Plus getting the maximum loot at two or not taking the loot and getting them you",
    "start": "2234820",
    "end": "2242560"
  },
  {
    "text": "know Max loot from one on Now can anyone see a pattern here",
    "start": "2242560",
    "end": "2248200"
  },
  {
    "text": "this looks very much like the Fibonacci sequence where we were we're actually just doing",
    "start": "2248200",
    "end": "2254500"
  },
  {
    "text": "like you know we're relying on two previous um",
    "start": "2254500",
    "end": "2259839"
  },
  {
    "text": "to previous equations or two previous runs of this so given this we can basically just",
    "start": "2259839",
    "end": "2266320"
  },
  {
    "text": "write this piece of code cache it and now",
    "start": "2266320",
    "end": "2272320"
  },
  {
    "text": "this is actually an O of n solution so instead of 127 to by 10 to the power of",
    "start": "2272320",
    "end": "2280240"
  },
  {
    "text": "32 we're doing 100 operations that is a big saving and this is",
    "start": "2280240",
    "end": "2286839"
  },
  {
    "text": "something that I frequently actually use at work um for my code at work so I quite often",
    "start": "2286839",
    "end": "2294339"
  },
  {
    "text": "use this cash directive or or this type of memorization even though it kind of like",
    "start": "2294339",
    "end": "2300880"
  },
  {
    "text": "has gotten a little bit of a lead code type connotation to it",
    "start": "2300880",
    "end": "2306160"
  },
  {
    "text": "makes sense yeah um so we're going to look at the",
    "start": "2306160",
    "end": "2311260"
  },
  {
    "text": "a different type of algorithm but there's a subset of the dynamic",
    "start": "2311260",
    "end": "2316540"
  },
  {
    "text": "programming or a caching algorithms so what we have here is sliding window",
    "start": "2316540",
    "end": "2323680"
  },
  {
    "text": "which I'm sure that you're all kind of like at least familiar with the the set that we're going to look at like a small",
    "start": "2323680",
    "end": "2330579"
  },
  {
    "text": "piece of maybe an array or something like that so let's let's take away say we take",
    "start": "2330579",
    "end": "2336820"
  },
  {
    "text": "this so we have an array and we want to know the maximum sub array of size four",
    "start": "2336820",
    "end": "2345040"
  },
  {
    "text": "um by maximum I mean where the sum is maximized so it's an optimization problem",
    "start": "2345040",
    "end": "2352540"
  },
  {
    "text": "so one way that we could do this The Brute Force way is like this we'll look at this sum them all up it's it's two we",
    "start": "2352540",
    "end": "2360579"
  },
  {
    "text": "move on WE sum them all up is 50 51 and so on and so on and so on",
    "start": "2360579",
    "end": "2366820"
  },
  {
    "text": "so this is normal way and it's you know smaller ways not a big deal small",
    "start": "2366820",
    "end": "2373020"
  },
  {
    "text": "subsets not a big deal but do we see a pattern here where there there's like a lot of yellow in",
    "start": "2373020",
    "end": "2379960"
  },
  {
    "text": "the middle which very strongly indicates that this is a repeating sub problem like where we're actually doing the same",
    "start": "2379960",
    "end": "2386560"
  },
  {
    "text": "calculations over and over and over so we could be speeding these up",
    "start": "2386560",
    "end": "2391780"
  },
  {
    "text": "anyone has an idea how we could speed them up well I'm not going to put you on the",
    "start": "2391780",
    "end": "2397480"
  },
  {
    "text": "spot okay but this is the way we could speed them up so in this case we would have the",
    "start": "2397480",
    "end": "2403599"
  },
  {
    "text": "actual times we would we would run would be n minus four",
    "start": "2403599",
    "end": "2409000"
  },
  {
    "text": "times four this is like the O of that we're running with",
    "start": "2409000",
    "end": "2414579"
  },
  {
    "text": "what we could do with this we calculate the first one which is two and then we",
    "start": "2414579",
    "end": "2419740"
  },
  {
    "text": "take that calculation so we take the two we just remove the",
    "start": "2419740",
    "end": "2425079"
  },
  {
    "text": "one that we are not using anymore add the one that is now a part of our list",
    "start": "2425079",
    "end": "2433060"
  },
  {
    "text": "so we're constantly reusing this um like this calculation that we",
    "start": "2433060",
    "end": "2438940"
  },
  {
    "text": "previously did now you might look at this and say well you know",
    "start": "2438940",
    "end": "2444400"
  },
  {
    "text": "you're doing three calculations instead of four I am not very impressed but what",
    "start": "2444400",
    "end": "2449920"
  },
  {
    "text": "if the sub list was not four but the sub list was like a hundred",
    "start": "2449920",
    "end": "2454960"
  },
  {
    "text": "now we would be doing three calculations instead of a hundred because instead of summing up like the",
    "start": "2454960",
    "end": "2461320"
  },
  {
    "text": "100 items every time I would just be removing the one I left and adding the one that I'm tacking on",
    "start": "2461320",
    "end": "2469119"
  },
  {
    "text": "and this is sort of like the sliding window thing because now we're talking about",
    "start": "2469119",
    "end": "2474880"
  },
  {
    "text": "an O of n algorithm where we're only ever touching each object",
    "start": "2474880",
    "end": "2481180"
  },
  {
    "text": "once in the list or a constant number of times so very very useful",
    "start": "2481180",
    "end": "2487599"
  },
  {
    "text": "let's see if we can apply this to to a problem that sounds a little bit",
    "start": "2487599",
    "end": "2492700"
  },
  {
    "text": "um more complex maybe so we have this bookstore owner and he has a number of",
    "start": "2492700",
    "end": "2498220"
  },
  {
    "text": "people that come in to his bookstore um these are the number of people that come in every minute",
    "start": "2498220",
    "end": "2504640"
  },
  {
    "text": "um depending on if he's happy or not they will be happy and they will buy things so",
    "start": "2504640",
    "end": "2512079"
  },
  {
    "text": "um he's sometimes happy sometimes sad um so these people that are marked here",
    "start": "2512079",
    "end": "2518260"
  },
  {
    "text": "they will buy things now he can do something",
    "start": "2518260",
    "end": "2525280"
  },
  {
    "text": "and maybe take a pill or something and he can be happy for three minutes",
    "start": "2525280",
    "end": "2530740"
  },
  {
    "text": "at a time and the question is when should he optimize to do this",
    "start": "2530740",
    "end": "2536260"
  },
  {
    "text": "now translation for me working in Azure batch like I have",
    "start": "2536260",
    "end": "2541900"
  },
  {
    "text": "um I don't know a rebate that I can only use for like an hour each day or something when do I apply that rebate",
    "start": "2541900",
    "end": "2548859"
  },
  {
    "text": "that's like a typical scenario in a real world but the question is how can we do this",
    "start": "2548859",
    "end": "2555099"
  },
  {
    "text": "and and how does this apply to a sliding window well we can do this we know that these people",
    "start": "2555099",
    "end": "2561720"
  },
  {
    "text": "that came in when he's happy independently of like if he had like",
    "start": "2561720",
    "end": "2566859"
  },
  {
    "text": "this extra special happy power um they will always buy stuff",
    "start": "2566859",
    "end": "2572619"
  },
  {
    "text": "so we can take them out of the equation and now this does become the same",
    "start": "2572619",
    "end": "2577900"
  },
  {
    "text": "problem that we just looked at where we do a sliding window of three minutes and see which sum is maximized",
    "start": "2577900",
    "end": "2585940"
  },
  {
    "text": "which happens to be this one so we use the exact same algorithm as we did before",
    "start": "2585940",
    "end": "2591220"
  },
  {
    "text": "with removing an adding we end up with this so this is",
    "start": "2591220",
    "end": "2597040"
  },
  {
    "text": "like on Leaf code this is a medium problem but in reality when you've looked at it and when you dissect it it",
    "start": "2597040",
    "end": "2603460"
  },
  {
    "text": "becomes like a fairly easy problem it's just a matter of kind of like cutting out and",
    "start": "2603460",
    "end": "2609640"
  },
  {
    "text": "separating the pieces and applying these base algorithms to them so",
    "start": "2609640",
    "end": "2616180"
  },
  {
    "text": "um we'll look at one more sliding window problem um it goes like this",
    "start": "2616180",
    "end": "2622000"
  },
  {
    "text": "so this person or let's say her name is Mona so Mona likes fruit but she can",
    "start": "2622000",
    "end": "2628660"
  },
  {
    "text": "only ever have two types of fruits in her basket at any point in time",
    "start": "2628660",
    "end": "2634000"
  },
  {
    "text": "and she wants to pick fruits of every tree and the question is how can we maximize",
    "start": "2634000",
    "end": "2639400"
  },
  {
    "text": "the number of fruit that she can take visually we can just see here that the",
    "start": "2639400",
    "end": "2644980"
  },
  {
    "text": "answer is going to be four like apple orange orange Apple um but how do we do this",
    "start": "2644980",
    "end": "2650560"
  },
  {
    "text": "programmatically and this is a little bit of a different sliding window because here we have a",
    "start": "2650560",
    "end": "2656200"
  },
  {
    "text": "grow and Shrink technique as you'll see so what we'll do is we'll start off with",
    "start": "2656200",
    "end": "2661359"
  },
  {
    "text": "the Apple we'll take the orange we're still good we only have two types of fruits orange",
    "start": "2661359",
    "end": "2667900"
  },
  {
    "text": "still good Apple's still good but what happens now when we get into the pair",
    "start": "2667900",
    "end": "2674079"
  },
  {
    "text": "now we don't have a good State anymore so now we have to reduce our window until we do have a good state",
    "start": "2674079",
    "end": "2681520"
  },
  {
    "text": "so now this is a growing shrink window where we we do this and we can expand it we get to three we'll get to the orange",
    "start": "2681520",
    "end": "2688420"
  },
  {
    "text": "we have to reduce it back again and this is kind of like a technique that you would use also that's an O of n",
    "start": "2688420",
    "end": "2696119"
  },
  {
    "text": "algorithm so whenever you can use like these sliding window algorithms which is",
    "start": "2696119",
    "end": "2702160"
  },
  {
    "text": "basically optimize anything over a list of things is typically a sliding window",
    "start": "2702160",
    "end": "2709359"
  },
  {
    "text": "problem so those are the two main cases like a fixed length or or grow and",
    "start": "2709359",
    "end": "2715900"
  },
  {
    "text": "Shrink type situation and this one is like a little bit different",
    "start": "2715900",
    "end": "2723700"
  },
  {
    "text": "but I'm still going to bring it up because it's kind of like a sliding window except for we're gonna",
    "start": "2723700",
    "end": "2730119"
  },
  {
    "text": "um we're gonna shrink from the edges so what we have is",
    "start": "2730119",
    "end": "2735460"
  },
  {
    "text": "um a list of walls and we want to uh I don't know if you can see but this is supposed to be blue",
    "start": "2735460",
    "end": "2741940"
  },
  {
    "text": "I realize now that it's not very uh you can't see it super well but",
    "start": "2741940",
    "end": "2748480"
  },
  {
    "text": "um so the walls kind of trap water in them so if we take the two outer walls",
    "start": "2748480",
    "end": "2754180"
  },
  {
    "text": "we can trap eight um eight units of water maybe eight cubic",
    "start": "2754180",
    "end": "2760960"
  },
  {
    "text": "meters or whatever it might be and now the question is given what two",
    "start": "2760960",
    "end": "2766480"
  },
  {
    "text": "walls can we maximize the amount of water we can trap we can only trap it",
    "start": "2766480",
    "end": "2772359"
  },
  {
    "text": "you know based on like the lowest wall the lowest Edge wall",
    "start": "2772359",
    "end": "2777400"
  },
  {
    "text": "so how do we how do we make this how can we possibly get any better than eight",
    "start": "2777400",
    "end": "2784000"
  },
  {
    "text": "well they we can't get any wider so the only way we can get better than eight is",
    "start": "2784000",
    "end": "2789040"
  },
  {
    "text": "if we Google if we go higher so we can say from the one take like shrink it in and take any any",
    "start": "2789040",
    "end": "2797380"
  },
  {
    "text": "wall that's higher than one so we'll go to the eight wall in which",
    "start": "2797380",
    "end": "2803440"
  },
  {
    "text": "case we now have like a height of seven and a width of seven so this was obviously a lot better",
    "start": "2803440",
    "end": "2810700"
  },
  {
    "text": "um and then the only thing we can make this better would be to to get higher than the seven wall which is our lowest",
    "start": "2810700",
    "end": "2817060"
  },
  {
    "text": "wall which would go here it didn't happen to be higher but it could have potentially",
    "start": "2817060",
    "end": "2822220"
  },
  {
    "text": "been higher and now we have two equal walls so we can take any of them",
    "start": "2822220",
    "end": "2827800"
  },
  {
    "text": "um and shrink it and we'll see that we'll get zero so these are like our options",
    "start": "2827800",
    "end": "2833200"
  },
  {
    "text": "and again in O of n we solve a problem where otherwise we would have to brute",
    "start": "2833200",
    "end": "2838839"
  },
  {
    "text": "force and look for all the combinations of of walls out there so this is a little bit of power off",
    "start": "2838839",
    "end": "2845740"
  },
  {
    "text": "these sliding windows",
    "start": "2845740",
    "end": "2850260"
  },
  {
    "text": "okay so we're getting a little bit to the end and we're going to look at how you kind of come up with which of these",
    "start": "2852339",
    "end": "2859599"
  },
  {
    "text": "to use or all right how you can maybe think through a problem call this the algorithm of an algorithm",
    "start": "2859599",
    "end": "2866440"
  },
  {
    "text": "the first thing that I do when I go through these is I try to ask a lot of",
    "start": "2866440",
    "end": "2871900"
  },
  {
    "text": "questions I try to ask um you know the limits the boundaries the um what is it I am I'm actually",
    "start": "2871900",
    "end": "2879040"
  },
  {
    "text": "trying to to solve and I find this to be well I'm sure you you guys also feel",
    "start": "2879040",
    "end": "2885400"
  },
  {
    "text": "like this is something that's super important in your day-to-day jobs um as an example",
    "start": "2885400",
    "end": "2892300"
  },
  {
    "text": "um yes yesterday I was working with one of my colleagues and we're talking about like uh we needed to get some statistics",
    "start": "2892300",
    "end": "2899619"
  },
  {
    "text": "out for how many tasks we're running in in batching at a certain time and",
    "start": "2899619",
    "end": "2906400"
  },
  {
    "text": "um he was looking at it as in like searching out all the tasks and then counting them",
    "start": "2906400",
    "end": "2912339"
  },
  {
    "text": "um while in real in reality you don't actually have to have all the tasks you",
    "start": "2912339",
    "end": "2917500"
  },
  {
    "text": "only have to have the count of the tasks so I went about it instead and looked at the statistics which turns out to be a",
    "start": "2917500",
    "end": "2924160"
  },
  {
    "text": "much cheaper operation than to get out than to get out the full list why I'm mentioning this is because this is also",
    "start": "2924160",
    "end": "2931240"
  },
  {
    "text": "true for when you're looking at these kind of like algorithm problems that you need to look at exactly what it is they",
    "start": "2931240",
    "end": "2938079"
  },
  {
    "text": "want you to do oftentimes um people end up simulating an entire",
    "start": "2938079",
    "end": "2944619"
  },
  {
    "text": "kind of like I don't know an entire scenario when there is like if you look",
    "start": "2944619",
    "end": "2952960"
  },
  {
    "text": "at the patterns you will notice that like there might be a mathematical equation that can solve it or there",
    "start": "2952960",
    "end": "2959079"
  },
  {
    "text": "might be something like that so it's very useful to ask a lot of questions and look at the limits and if the limits",
    "start": "2959079",
    "end": "2965380"
  },
  {
    "text": "are like in the cocoa banana case you can see that it's going to end up in like the trillion case",
    "start": "2965380",
    "end": "2972339"
  },
  {
    "text": "that is almost only feasible for something like a binary search or as a",
    "start": "2972339",
    "end": "2977680"
  },
  {
    "text": "divide and conquer algorithm you're never like even o of n in that case is",
    "start": "2977680",
    "end": "2983020"
  },
  {
    "text": "going to be too much so then you know almost immediately you",
    "start": "2983020",
    "end": "2988180"
  },
  {
    "text": "need to resort to that that's not like a really a real life thing you can do but like when they have like prepared tasks",
    "start": "2988180",
    "end": "2995200"
  },
  {
    "text": "on on lead code and things like that you know that if they have that big of a boundary it's going to be a binary",
    "start": "2995200",
    "end": "3000480"
  },
  {
    "text": "search issue then what I'd like to do is I like to draw a lot",
    "start": "3000480",
    "end": "3005760"
  },
  {
    "text": "um and I like to kind of like think out all the examples so even like let's say",
    "start": "3005760",
    "end": "3010920"
  },
  {
    "text": "in the cocoa eating banana case I would go up and type up like you know write down like what the",
    "start": "3010920",
    "end": "3017400"
  },
  {
    "text": "different things look like because once once you kind of start drawing them and especially if it's like a visual problem",
    "start": "3017400",
    "end": "3023700"
  },
  {
    "text": "like um you can maybe see her in my notebook you'll start finding these patterns",
    "start": "3023700",
    "end": "3029640"
  },
  {
    "text": "because um it's like you have this funny thing where if you start doing things manually",
    "start": "3029640",
    "end": "3035819"
  },
  {
    "text": "and start kind of like without having to think about how exactly do I get to this point maybe I'll start picking out you",
    "start": "3035819",
    "end": "3043319"
  },
  {
    "text": "know like the um the lowest number of the list I don't have to worry about how I find the lowest number of the list but",
    "start": "3043319",
    "end": "3049020"
  },
  {
    "text": "mentally I can pick it out then at least make that a part of my thing but",
    "start": "3049020",
    "end": "3055160"
  },
  {
    "text": "you find patterns and that kind of becomes this like Oh My God moment where",
    "start": "3055160",
    "end": "3060359"
  },
  {
    "text": "you now know that this is like you run to something that you can you can start",
    "start": "3060359",
    "end": "3066119"
  },
  {
    "text": "um work on or you start finding a pattern that would lend itself extremely",
    "start": "3066119",
    "end": "3071819"
  },
  {
    "text": "well to binary search or to a graph or or like you start drawing them out in in different ways like that",
    "start": "3071819",
    "end": "3077819"
  },
  {
    "text": "and then I like to kind of like split the problem up into very small pieces and this is something",
    "start": "3077819",
    "end": "3083579"
  },
  {
    "text": "I do frequently at work too I often write a lot of pseudocode before I even write any code",
    "start": "3083579",
    "end": "3090059"
  },
  {
    "text": "um because anytime I start writing real code I kind of locked into an implementation",
    "start": "3090059",
    "end": "3096599"
  },
  {
    "text": "which I haven't done as long as I missed writing you know",
    "start": "3096599",
    "end": "3102420"
  },
  {
    "text": "sort um I don't know find find the smallest",
    "start": "3102420",
    "end": "3107460"
  },
  {
    "text": "number and things like that and then I also have pieces that I can later optimize",
    "start": "3107460",
    "end": "3112920"
  },
  {
    "text": "individually and only then do I start implementing in this I mean for an easy problem this",
    "start": "3112920",
    "end": "3120240"
  },
  {
    "text": "might be like a minute for heart problem this process might be like 30 minutes",
    "start": "3120240",
    "end": "3126119"
  },
  {
    "text": "before I even start writing something encode and then I test",
    "start": "3126119",
    "end": "3131640"
  },
  {
    "text": "um nice when I show you kind of like a small trick for",
    "start": "3131640",
    "end": "3136980"
  },
  {
    "text": "for if you're doing lead code style problems oh",
    "start": "3136980",
    "end": "3142280"
  },
  {
    "text": "never mind like I don't know if I want to actually",
    "start": "3142520",
    "end": "3148140"
  },
  {
    "text": "change it let's see",
    "start": "3148140",
    "end": "3152838"
  },
  {
    "text": "ah never mind it wasn't super important but I write my tests in line in the code",
    "start": "3154680",
    "end": "3160500"
  },
  {
    "text": "and that's that works really well for a language like python where you can do like at the bottom of your of your code",
    "start": "3160500",
    "end": "3167280"
  },
  {
    "text": "you can do an assert and just pull it out like that but even even in C sharp now you can kind of like",
    "start": "3167280",
    "end": "3174300"
  },
  {
    "text": "pull in and do the test cases in in your you know minimal apis or things like",
    "start": "3174300",
    "end": "3181020"
  },
  {
    "text": "that I wouldn't recommend that for real work because that's like you want to structure your code but for for these",
    "start": "3181020",
    "end": "3187559"
  },
  {
    "text": "kind of like programming puzzles and things like that it's very useful to be able to have them where the code is so that you can easily",
    "start": "3187559",
    "end": "3194819"
  },
  {
    "text": "change the code and try other more optimal versions and then you go around and you act",
    "start": "3194819",
    "end": "3202859"
  },
  {
    "text": "now I put myself in a position where that doesn't work anymore yeah",
    "start": "3202859",
    "end": "3207960"
  },
  {
    "text": "yeah then you go around and be happy and then the next like the last thing I do is I",
    "start": "3207960",
    "end": "3214740"
  },
  {
    "text": "try to kind of do it in as many different ways that I could like I try to kind of like",
    "start": "3214740",
    "end": "3221160"
  },
  {
    "text": "stretch my mind to to solve it in a different even if it's the worst way because sometimes you'll just find out",
    "start": "3221160",
    "end": "3228599"
  },
  {
    "text": "like another key in the site when you're doing that sometimes I'll even talk to like and and have it solve it for me and",
    "start": "3228599",
    "end": "3236160"
  },
  {
    "text": "even if it can't solve it it might give me like another insight about how I should start",
    "start": "3236160",
    "end": "3243900"
  },
  {
    "text": "um so that is my algorithm of an algorithm if you are interested in this and you want to go and kind of like just",
    "start": "3243900",
    "end": "3252240"
  },
  {
    "text": "practice your algorithm skills um I'm sure you're all at least Vaguely",
    "start": "3252240",
    "end": "3258180"
  },
  {
    "text": "Familiar about lead code they have daily lead code puzzles that you can go through in all ranges easy medium hard",
    "start": "3258180",
    "end": "3266220"
  },
  {
    "text": "and they're free like you can actually violate code subscription but you can do a lot of things with a free version",
    "start": "3266220",
    "end": "3273839"
  },
  {
    "text": "um and they have um lead code competitions and they're not the only one who have these like",
    "start": "3273839",
    "end": "3279660"
  },
  {
    "text": "hacker rank or code chef and lots of other places too but these competitions",
    "start": "3279660",
    "end": "3284940"
  },
  {
    "text": "are quite nice because they have like a weekly and a bi-weekly in different time zones but you don't actually have to let",
    "start": "3284940",
    "end": "3292200"
  },
  {
    "text": "anyone else know that you're competing no one will and you'll do it like from your own home and if you fail it doesn't",
    "start": "3292200",
    "end": "3299579"
  },
  {
    "text": "really matter no one else is going to know what they do is like they give you four different challenges and you have",
    "start": "3299579",
    "end": "3305339"
  },
  {
    "text": "to solve them as fast as possible and based on how fast you solve them compared to the other people that were",
    "start": "3305339",
    "end": "3311460"
  },
  {
    "text": "in the competition your rank goes up or down and you can also do them outside of",
    "start": "3311460",
    "end": "3316740"
  },
  {
    "text": "the time times the day of set as virtual competitions which means that your rank",
    "start": "3316740",
    "end": "3322260"
  },
  {
    "text": "won't change but at least you can try them out and and I think this is like for me this is like super inspiring",
    "start": "3322260",
    "end": "3330540"
  },
  {
    "text": "um I don't know and did anyone here and do admin of code",
    "start": "3330540",
    "end": "3335640"
  },
  {
    "text": "yeah plenty of you if you haven't then I would I do recommend going back and",
    "start": "3335640",
    "end": "3341520"
  },
  {
    "text": "doing sort of like the rest years from 2015 so every December Eric Russell",
    "start": "3341520",
    "end": "3347880"
  },
  {
    "text": "who's doing this site he's coming up with like uh two challenges a day for 25",
    "start": "3347880",
    "end": "3353400"
  },
  {
    "text": "days and they're usually pretty funny and interesting they're a little bit different from lead code puzzles because",
    "start": "3353400",
    "end": "3359819"
  },
  {
    "text": "they have you don't have to stretch like you only have one set of inputs that you have to fix it for so sometimes you can",
    "start": "3359819",
    "end": "3366119"
  },
  {
    "text": "create like very input specific problems but that's it and then",
    "start": "3366119",
    "end": "3372540"
  },
  {
    "text": "um if you're interested in math more than than the coding challenge is this",
    "start": "3372540",
    "end": "3377880"
  },
  {
    "text": "is also coding a coding puzzle type thing but very much more focused on math",
    "start": "3377880",
    "end": "3383040"
  },
  {
    "text": "project Euler so I do recommend go out and and do that",
    "start": "3383040",
    "end": "3390000"
  },
  {
    "text": "um and with that I want to thank you so much for taking this early morning on Friday and and hanging out with me in",
    "start": "3390000",
    "end": "3396480"
  },
  {
    "text": "world of algorithms I hope to see you out there thanks",
    "start": "3396480",
    "end": "3402559"
  }
]