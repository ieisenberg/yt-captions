[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "all right well hello everyone this is 13 ways of looking at a",
    "start": "10400",
    "end": "17240"
  },
  {
    "text": "turtle um my name is Scott blushin I have a website FSH forun and profit.com",
    "start": "17240",
    "end": "23000"
  },
  {
    "text": "and the slides and the video for this talk will go on the turtle subdirectory",
    "start": "23000",
    "end": "28720"
  },
  {
    "text": "at some point um I'm going to be using f for all the code examples um but this is",
    "start": "28720",
    "end": "34760"
  },
  {
    "text": "really a talk about Concepts so um most of this stuff will work in other programming languages especially",
    "start": "34760",
    "end": "40960"
  },
  {
    "text": "functional programming languages hll and Scala and so on all right",
    "start": "40960",
    "end": "46559"
  },
  {
    "text": "so most talks are you know on a particular topic and I",
    "start": "46559",
    "end": "51640"
  },
  {
    "text": "thought why not take one problem domain and show you lots of different ways of",
    "start": "51640",
    "end": "57879"
  },
  {
    "text": "solving the same problem um with techniques um so it's like a sort of taster menu so I'm going to be talking",
    "start": "57879",
    "end": "64239"
  },
  {
    "text": "about a lot of um functional mostly functional programming techniques partial application functional error",
    "start": "64239",
    "end": "70479"
  },
  {
    "text": "handling State moner actor model vent sourcing dependency injection um and so on and so on",
    "start": "70479",
    "end": "76960"
  },
  {
    "text": "interpreter capabilities um 13 different ways in all and um this is a little bit",
    "start": "76960",
    "end": "82560"
  },
  {
    "text": "scary because that gives me about four minutes per topic so this is how I feel",
    "start": "82560",
    "end": "88079"
  },
  {
    "text": "h um I've done a similar talk if you actually find this talk interesting believe it or not I have another talk on",
    "start": "88079",
    "end": "94720"
  },
  {
    "text": "functional design patterns same kind of thing lots and lots of stuff very very quickly right I got I've already used up",
    "start": "94720",
    "end": "100799"
  },
  {
    "text": "a minute and a half time to get cracking all right so Turtle Graphics you should",
    "start": "100799",
    "end": "106000"
  },
  {
    "text": "be familiar with this if you're not the concept is you have a turtle it's pointing in a particular direction it",
    "start": "106000",
    "end": "112159"
  },
  {
    "text": "moves around and as it moves around it draws lines that's basically it so the",
    "start": "112159",
    "end": "117840"
  },
  {
    "start": "116000",
    "end": "116000"
  },
  {
    "text": "turtle API that I'm going to work with basically has four functions or four you",
    "start": "117840",
    "end": "123240"
  },
  {
    "text": "know operations move a certain distance in a straight line turn some sort of angle left or right uh put the pen up",
    "start": "123240",
    "end": "130679"
  },
  {
    "text": "put the pen down if the pen is down then it's going to draw and if the pen is up it won't draw and that's basically it so",
    "start": "130679",
    "end": "138120"
  },
  {
    "text": "how can we have 13 different implementations of this particular API let's see let's start with the object",
    "start": "138120",
    "end": "144160"
  },
  {
    "text": "oriented turtle and I have a little bell here to remind me to keep going fast now object ored turtle um in an",
    "start": "144160",
    "end": "152239"
  },
  {
    "text": "object oriented Turtle the data and the behavior are combined into one object of course uh o turtle is a tole if you",
    "start": "152239",
    "end": "159519"
  },
  {
    "text": "didn't know what that is so um an O turtle you have a turtle class and you",
    "start": "159519",
    "end": "165080"
  },
  {
    "text": "have a client that calls it now the turtle needs to keep track of where it is on this canvas it needs to know its",
    "start": "165080",
    "end": "170200"
  },
  {
    "text": "position it needs to know which angle it's pointing it needs to know where the pen is up or down so there's some turtle",
    "start": "170200",
    "end": "176560"
  },
  {
    "text": "State associated with this turtle and in the o model the turtle state is inside",
    "start": "176560",
    "end": "181720"
  },
  {
    "text": "the turtle and it's mutable you can't you don't have access to it as a as a client so I call the turtle and it",
    "start": "181720",
    "end": "188080"
  },
  {
    "text": "updates a state I call the turtle again it updates a state so let's look at the code here is a beginning of a turtle",
    "start": "188080",
    "end": "195640"
  },
  {
    "text": "class in FP and here's the three different things we need to keep track of the position the angle and the state",
    "start": "195640",
    "end": "202159"
  },
  {
    "text": "couple of things to point out first of all there's a mutable keyword so in f um things are immutable by default so",
    "start": "202159",
    "end": "209640"
  },
  {
    "text": "if you want them to be mutable you have to use the mutable keyword um secondly I'm using this",
    "start": "209640",
    "end": "215360"
  },
  {
    "text": "degrees annotation and that's part of the F units of measure and what you can do is",
    "start": "215360",
    "end": "221519"
  },
  {
    "text": "you can take a number and annotate it with some sort of uh measurement like in this case degrees and why did I do that",
    "start": "221519",
    "end": "227920"
  },
  {
    "text": "so I didn't get them mixed up with radians so you know you want to separate you know kilometers from inches or",
    "start": "227920",
    "end": "233319"
  },
  {
    "text": "millisec some seconds uh units and measure a great way of doing that um in this case not only does it stop me",
    "start": "233319",
    "end": "240200"
  },
  {
    "text": "accidentally passing in radians but it's a documentation so it says you know it's obviously that I'm passing in degrees",
    "start": "240200",
    "end": "246599"
  },
  {
    "text": "and not radians all right the move method so to",
    "start": "246599",
    "end": "251640"
  },
  {
    "text": "move I have a particular distance I want to move I'm going to log it I'm going to start with the start position going to",
    "start": "251640",
    "end": "258400"
  },
  {
    "text": "calculate the new position this distance at this angle starting from here that gives me an end",
    "start": "258400",
    "end": "264000"
  },
  {
    "text": "position uh if the pen state is down I'm going to draw from the start position to the end position and then I'm going to",
    "start": "264000",
    "end": "269240"
  },
  {
    "text": "update the state State um this backwards pointing arrow is the assignment operator in F different from equality",
    "start": "269240",
    "end": "277320"
  },
  {
    "text": "because only you only need it when you have mutable data so that's that's the move method uh the turn method is very",
    "start": "277320",
    "end": "284880"
  },
  {
    "text": "similar I want to turn a particular angle so I'm going to log it I'm going to calculate a new angle using some sort",
    "start": "284880",
    "end": "290160"
  },
  {
    "text": "of formula and then I'm going to update the state with the new angle um the pen up thing very similar",
    "start": "290160",
    "end": "298160"
  },
  {
    "text": "log it update the state log it update the state so that's our four methods implemented in an O style",
    "start": "298160",
    "end": "306639"
  },
  {
    "text": "so from the caller point of view this is really obvious you basically create a turtle you ask it to move a distance you",
    "start": "306639",
    "end": "313560"
  },
  {
    "text": "ask it a turn you ask it to move a distance you ask it a turn and so on and so forth and in this case you end up",
    "start": "313560",
    "end": "320160"
  },
  {
    "text": "where you started with so you've drawn a triangle so let's actually look at some",
    "start": "320160",
    "end": "328000"
  },
  {
    "text": "code so this is the F interactive so I'm going to create a",
    "start": "328160",
    "end": "334639"
  },
  {
    "text": "canvas for the turtle going to go here's the turtle move a certain",
    "start": "334639",
    "end": "341600"
  },
  {
    "text": "distance turn move move again",
    "start": "341600",
    "end": "347479"
  },
  {
    "text": "turn move move again and you can see not only is it drawing on the canvas but I'm also outputting the log down here at the",
    "start": "347479",
    "end": "355280"
  },
  {
    "text": "bottom so that's just to prove that it's a real code it's not just a fake",
    "start": "355280",
    "end": "360960"
  },
  {
    "text": "presentation here all right so advantages and disadvantage of O well",
    "start": "360960",
    "end": "368160"
  },
  {
    "start": "363000",
    "end": "363000"
  },
  {
    "text": "the advantage really big Advantage is it's really familiar to most people um that's probably the main advantage",
    "start": "368160",
    "end": "374639"
  },
  {
    "text": "there's quite a lot of disadvantages to me the biggest disadvantage is it's stateful it's a",
    "start": "374639",
    "end": "380319"
  },
  {
    "text": "blackbox it's like I call this thing but I don't get any response it it does some stuff but I don't really know what it's",
    "start": "380319",
    "end": "385440"
  },
  {
    "text": "doing because I can't see inside it um it's hard to test because I have to you",
    "start": "385440",
    "end": "390520"
  },
  {
    "text": "know I can't really just like put it in a position I have to like move it to this thing setting up test is hard you",
    "start": "390520",
    "end": "396240"
  },
  {
    "text": "can't really compose them if I want to have a two Turtle thing I have to create a whole new class which holds two turtles and you know proxy the methods",
    "start": "396240",
    "end": "403680"
  },
  {
    "text": "down and so on and so far in this one we've got some hardcoded dependencies we're hardcoding",
    "start": "403680",
    "end": "409240"
  },
  {
    "text": "the logging technique and we're hardcoding the canvas now we can get rid of that using dependency injection and",
    "start": "409240",
    "end": "415479"
  },
  {
    "text": "I'll talk about that later on okay number two abstract data Turtle so this",
    "start": "415479",
    "end": "424080"
  },
  {
    "text": "technique goes all the way back to the' 70s this is preo and in this technique the data is",
    "start": "424080",
    "end": "429680"
  },
  {
    "text": "separate from the behavior so we have a data structure again it's all the stuff is mutable but",
    "start": "429680",
    "end": "436000"
  },
  {
    "text": "the difference is it's a private data structure the only person who the only thing that can change this data is the",
    "start": "436000",
    "end": "443560"
  },
  {
    "text": "turtle functions so as it's an opaque from from a callers point of view it's an opaque data structure and again I",
    "start": "443560",
    "end": "450240"
  },
  {
    "text": "have this Behavior I have uh these are now static methods or functions in a",
    "start": "450240",
    "end": "455960"
  },
  {
    "text": "module each function now needs the state to be passed in because it's",
    "start": "455960",
    "end": "461240"
  },
  {
    "text": "static so it's explicit State Management and again to use it I create a turtle",
    "start": "461240",
    "end": "468560"
  },
  {
    "text": "and I do the same thing as before except each time now I have to pass this turtle in by",
    "start": "468560",
    "end": "474599"
  },
  {
    "text": "hand but it's the same same idea okay so what are the pros and cons of this",
    "start": "474599",
    "end": "480960"
  },
  {
    "text": "technique which is older than oo well the advantage it's really simple to implement and one of the advantages",
    "start": "480960",
    "end": "488639"
  },
  {
    "text": "actually now is that you can't do inheritance so you can't actually use object oriented techniques so if you",
    "start": "488639",
    "end": "494319"
  },
  {
    "text": "think that inheritance is sort of an anti patter now and that composition is better than inheritance this technique",
    "start": "494319",
    "end": "499520"
  },
  {
    "text": "forces you to use composition so that might be what you want disadvantages the",
    "start": "499520",
    "end": "505240"
  },
  {
    "text": "same as in oo it's stateful it's a black box it's hard to set up it's hard to test",
    "start": "505240",
    "end": "510840"
  },
  {
    "text": "right next functional Turtle so in a functional Turtle the state is",
    "start": "510840",
    "end": "517080"
  },
  {
    "text": "immutable other than that is very similar to the abstract data turtle um because the state is immutable",
    "start": "517080",
    "end": "524120"
  },
  {
    "text": "the client or the caller has to create the state pass it into a function and get a new state back and then get that",
    "start": "524120",
    "end": "530200"
  },
  {
    "text": "state pass it into a function and get the new state back so the client is now very much involved in managing the state",
    "start": "530200",
    "end": "535600"
  },
  {
    "text": "which it wasn't with the oo methods and um the design is very",
    "start": "535600",
    "end": "541120"
  },
  {
    "text": "similar we now have an immutable Turtle State we don't have to have the mutable keyword anymore and because uh it's",
    "start": "541120",
    "end": "547240"
  },
  {
    "text": "immutable we can make it public it's not a problem if someone accesses these properties because they can't mess with",
    "start": "547240",
    "end": "553399"
  },
  {
    "text": "them they can't change them um the same thing we have these four functions now we pass the state",
    "start": "553399",
    "end": "559200"
  },
  {
    "text": "into each function but in addition we return the state so that's the big",
    "start": "559200",
    "end": "564360"
  },
  {
    "text": "difference between this one and the one where the state is mutable so it's very much is even more",
    "start": "564360",
    "end": "570040"
  },
  {
    "text": "explicit now so to use this code we basically start with initial State we'll call",
    "start": "570040",
    "end": "576680"
  },
  {
    "text": "s0 um we pass that in and that gives a state one",
    "start": "576680",
    "end": "584480"
  },
  {
    "text": "sorry um State one we pass in and that gives us state two we pass in state two",
    "start": "586600",
    "end": "592480"
  },
  {
    "text": "and that gives us state three and so on and so forth so it's all very explicit it's all very nice but it's kind of ugly",
    "start": "592480",
    "end": "599920"
  },
  {
    "text": "you know kind of annoying to pass the state around like this is there a way we can make this nicer looking and the",
    "start": "599920",
    "end": "605800"
  },
  {
    "text": "answer is yes and that relies on the fact that every in in a functional world every",
    "start": "605800",
    "end": "611320"
  },
  {
    "text": "Turtle every function has um one input and one output so if we have two",
    "start": "611320",
    "end": "616640"
  },
  {
    "text": "functions and we want to chain them together we can take the output of one function and feed it as the input to the",
    "start": "616640",
    "end": "622440"
  },
  {
    "text": "next function and that is how composition works and in F we typically use the piping concept which is F's",
    "start": "622440",
    "end": "630600"
  },
  {
    "text": "version of this um and this is very similar to Unix pipes you take the output of a command and you feed it as the input of the X",
    "start": "630600",
    "end": "636680"
  },
  {
    "text": "command so with pipes um the code would like this start with initial State we",
    "start": "636680",
    "end": "643079"
  },
  {
    "text": "pipe it into the move function we take the output of the move function we pipe it into the turn function we take the",
    "start": "643079",
    "end": "649800"
  },
  {
    "text": "output of the turn function we pipe it into the move function take the output of that and so on and so forth so this",
    "start": "649800",
    "end": "655760"
  },
  {
    "text": "vertical bar with angle bracket that is f sh's Piper operator it's not a vertical bar because the vertical bar is",
    "start": "655760",
    "end": "661399"
  },
  {
    "text": "resered for something else right so what's the pros and cons well because",
    "start": "661399",
    "end": "667320"
  },
  {
    "text": "everything's immutable it's a lot easier to reason about I know I know exactly what's going in and what's coming out",
    "start": "667320",
    "end": "673079"
  },
  {
    "text": "there's no black box um I mean obviously it's doing stuff but I can see what it's doing because I get the state coming out",
    "start": "673079",
    "end": "678639"
  },
  {
    "text": "the other end so it's really easy to test this way I can just if I wanted to start in a particular corner I just set",
    "start": "678639",
    "end": "684560"
  },
  {
    "text": "the initial state to be in that corner and as we've seen the functions are composable",
    "start": "684560",
    "end": "689800"
  },
  {
    "text": "it's really easy to glue them together because they have no Global State the downside is that the client has to keep",
    "start": "689800",
    "end": "695680"
  },
  {
    "text": "track of the state and again we have these hardcoded dependencies and in a bit I'll talk",
    "start": "695680",
    "end": "702680"
  },
  {
    "text": "about how you can do sort of the functional equivalent of dependency",
    "start": "702680",
    "end": "707480"
  },
  {
    "text": "injection next the state monad",
    "start": "708600",
    "end": "714839"
  },
  {
    "text": "so um what happens if the state if the if the thing is a bit more complicated",
    "start": "714839",
    "end": "721040"
  },
  {
    "text": "so let's say we have our turtle and it hits the wall and it can't go any further now we want to return something",
    "start": "721040",
    "end": "727880"
  },
  {
    "text": "to the caller that says something went wrong so one way we can do this is just return the actual distance moved as",
    "start": "727880",
    "end": "735360"
  },
  {
    "text": "opposed to what you requested you wanted to move 10 units and you actually only moved five units so we now need to",
    "start": "735360",
    "end": "741040"
  },
  {
    "text": "return for example a pair with the new state and as part of the pair the actual",
    "start": "741040",
    "end": "746720"
  },
  {
    "text": "distance moved so here's the usage example we start",
    "start": "746720",
    "end": "752199"
  },
  {
    "text": "with initial State we pass that into the move and we get a pair back the actual distance and and state one if the actual",
    "start": "752199",
    "end": "760279"
  },
  {
    "text": "distance is less than what we wanted then it failed and we're going to turn the turtle and so on and if the actual",
    "start": "760279",
    "end": "767160"
  },
  {
    "text": "distance was correct then the first move succeeded and we try again and we get another actual distance and this is",
    "start": "767160",
    "end": "774600"
  },
  {
    "text": "really ugly right I mean it's all very explicit it's all very you know clear what's going on",
    "start": "774600",
    "end": "779639"
  },
  {
    "text": "but passing this state around is is horrible and um unfortunately we can't",
    "start": "779639",
    "end": "785839"
  },
  {
    "text": "do the piping technique because the output is now this pair it's not the individual state that we can just pass",
    "start": "785839",
    "end": "791040"
  },
  {
    "text": "into the next function so how can we keep track of the state when we have a situation like",
    "start": "791040",
    "end": "797519"
  },
  {
    "start": "797000",
    "end": "797000"
  },
  {
    "text": "this so we what we're going to do is we're going to take the turtle function and go through a series of Transformations and turn it into",
    "start": "797519",
    "end": "803880"
  },
  {
    "text": "something which is more tractable something which is more composable so the turtle function we have right now",
    "start": "803880",
    "end": "809399"
  },
  {
    "text": "has two inputs and two outputs uh one of the inputs is the turtle State and the",
    "start": "809399",
    "end": "814600"
  },
  {
    "text": "other input is the runtime input the the distance to move or the angle to turn or whatever it is uh the two outputs one of",
    "start": "814600",
    "end": "822120"
  },
  {
    "text": "the outputs is the the new turtle State and the other output is the output of the function the actual distance moved",
    "start": "822120",
    "end": "827639"
  },
  {
    "text": "or the actual distance turned or whatever it is so how can we turn this into something we can work with well the",
    "start": "827639",
    "end": "833680"
  },
  {
    "text": "first thing is we can turn it into a two-step function of the input returns",
    "start": "833680",
    "end": "840880"
  },
  {
    "text": "another function so rather than having a two parameter function we have a one parameter function that returns another",
    "start": "840880",
    "end": "846240"
  },
  {
    "text": "one parameter function and that's called carrying and that's a fundamental part of functional programming in F you get",
    "start": "846240",
    "end": "853440"
  },
  {
    "text": "that for free so in fact the function is automatically like this and if we have this curried um model we can actually",
    "start": "853440",
    "end": "860800"
  },
  {
    "text": "think of the turtle function as returning a new function so I pass in the distance I want to move and I don't",
    "start": "860800",
    "end": "867440"
  },
  {
    "text": "just get a new state I get a new function and so we're going to take this function here right returning another function",
    "start": "867440",
    "end": "874440"
  },
  {
    "text": "standard practice but it's kind of ugly we're going to take this function we're going to put a wrapper around it and",
    "start": "874440",
    "end": "880040"
  },
  {
    "text": "we're going to call it State all right so the state is really just a WRA around",
    "start": "880040",
    "end": "885480"
  },
  {
    "text": "a function but what we've done now is we have a function with one input and one output and now we can chain these",
    "start": "885480",
    "end": "892680"
  },
  {
    "text": "together we can't change them together directly we can change them together using a special technique which I'm not",
    "start": "892680",
    "end": "898279"
  },
  {
    "text": "going to go into um if you want to know more about it I have a talk called The monad Talk which",
    "start": "898279",
    "end": "904480"
  },
  {
    "text": "is all about the state monad but assuming that we can compose these functions together what we can do",
    "start": "904480",
    "end": "911320"
  },
  {
    "text": "is we can create a special thing called a state expression a state computation expression that's this little State",
    "start": "911320",
    "end": "918160"
  },
  {
    "text": "thing in in red there and it's kind of like a special block a special code",
    "start": "918160",
    "end": "923519"
  },
  {
    "text": "block inside the code block the state is been managed behind the scenes so so",
    "start": "923519",
    "end": "929120"
  },
  {
    "text": "when I write this code here you know move and then turn move",
    "start": "929120",
    "end": "934480"
  },
  {
    "text": "again um all that code the state has actually been threaded through that code",
    "start": "934480",
    "end": "940120"
  },
  {
    "text": "without me having to do anything so this code looks much nicer it looks like the original code we had looks like",
    "start": "940120",
    "end": "945800"
  },
  {
    "text": "imperative code but it's not it's actually the stateless immutable code that we had originally made nice looking",
    "start": "945800",
    "end": "952759"
  },
  {
    "text": "by the state expression and we'll see a lot of this in the next couple of slides as well",
    "start": "952759",
    "end": "959759"
  },
  {
    "text": "so um the state being threaded through the scenes is is a really nice feature",
    "start": "959759",
    "end": "965160"
  },
  {
    "text": "now this is um a very common technique and most functional programming languages have equivalent of this so",
    "start": "965160",
    "end": "971240"
  },
  {
    "text": "hascal has do notation uh Scala has four comprehensions they're all related to",
    "start": "971240",
    "end": "976759"
  },
  {
    "text": "monads um the F computation expressions are kind of related to",
    "start": "976759",
    "end": "982199"
  },
  {
    "text": "monads um advantages so it looks like imperative code it looks like as if the state is actually changing but it isn't",
    "start": "982199",
    "end": "988920"
  },
  {
    "text": "it's just immutable behind the scenes but the nice thing is even though it's got this complicated stuff the functions",
    "start": "988920",
    "end": "994720"
  },
  {
    "text": "are still composable we can still glue functions together downside much harder to implement it's kind of and it's It's",
    "start": "994720",
    "end": "1001120"
  },
  {
    "text": "tricky to use in practice next all",
    "start": "1001120",
    "end": "1006360"
  },
  {
    "text": "right error handling so let's say we want to handle errors in a different way let's say when",
    "start": "1006360",
    "end": "1012759"
  },
  {
    "start": "1009000",
    "end": "1009000"
  },
  {
    "text": "we hit the edge of the wall rather than returning the actual distance we're going to say sorry you made a mistake",
    "start": "1012759",
    "end": "1017880"
  },
  {
    "text": "that a a failure so how can we handle that in a functional way what we want to do is",
    "start": "1017880",
    "end": "1024438"
  },
  {
    "text": "have the function return two different possibilities uh either it succeeded or it failed so if it succeeded I get a new",
    "start": "1024439",
    "end": "1032240"
  },
  {
    "text": "turtle State back uh and if it failed I'm going to return an error message saying you know you went out of bounds",
    "start": "1032240",
    "end": "1037798"
  },
  {
    "text": "or something so how can we model a function that returns two choices no it's not the two values you know",
    "start": "1037799",
    "end": "1045079"
  },
  {
    "text": "together it's like one or the other one so in F sharp you would model this using",
    "start": "1045079",
    "end": "1050280"
  },
  {
    "text": "a choice type like this and a choice type is kind of like inheritance like a",
    "start": "1050280",
    "end": "1055960"
  },
  {
    "text": "subclassing you basically have two possibilities and they're mutually exclusive it's either a success or it's a failure if a success there's some",
    "start": "1055960",
    "end": "1063400"
  },
  {
    "text": "information associated with that if it's a failure there's some information asso with that too uh and this I call these",
    "start": "1063400",
    "end": "1070160"
  },
  {
    "text": "Choice types uh technical word is some types in F they're called discriminated unions they're all pretty much the same",
    "start": "1070160",
    "end": "1077240"
  },
  {
    "text": "thing really really nice feat feature unfortunately most object language do not have anything like this very very",
    "start": "1077240",
    "end": "1084320"
  },
  {
    "text": "powerful so let's look at how we would implement the move function using this result so we want to move a certain",
    "start": "1084320",
    "end": "1091520"
  },
  {
    "start": "1085000",
    "end": "1085000"
  },
  {
    "text": "distance so we calculate the new position we draw the line let's do the error handling if the actual distance",
    "start": "1091520",
    "end": "1097159"
  },
  {
    "text": "moved is not what we wanted then we're going to return a failure um if it was what we wanted",
    "start": "1097159",
    "end": "1104039"
  },
  {
    "text": "we're going to say it's successful and we're going to return the new state the state with the updated position",
    "start": "1104039",
    "end": "1110760"
  },
  {
    "text": "so again there's two possible choices for the output now because there's two",
    "start": "1111520",
    "end": "1116559"
  },
  {
    "text": "possible choices when I actually call this code I have to test and see which one it is so let's look at how that",
    "start": "1116559",
    "end": "1123080"
  },
  {
    "text": "works so there's my initial Turtle state I'm going to move and I'm going to get one of these results so I have to test",
    "start": "1123080",
    "end": "1129960"
  },
  {
    "text": "is it a success or failure and I do that with pattern matching so if it's successful that's great I'm going to try",
    "start": "1129960",
    "end": "1136559"
  },
  {
    "text": "and move again I get another result I'm going to see was the second result success or failure if it's successful",
    "start": "1136559",
    "end": "1142720"
  },
  {
    "text": "I'm done if it was a failure I print an ER message and then I also need to handle",
    "start": "1142720",
    "end": "1148360"
  },
  {
    "text": "the case where the first one was a failure so again this is all very nice and explicit but it's again it's kind of",
    "start": "1148360",
    "end": "1154919"
  },
  {
    "text": "ugly to keep track of all these you know to be testing these special cases all the time can we make it simpler yes so",
    "start": "1154919",
    "end": "1162000"
  },
  {
    "text": "let's avoid some yuckiness and create a new kind of expression this is a result",
    "start": "1162000",
    "end": "1168880"
  },
  {
    "text": "computation expression and again it's a special kind of block which handles all",
    "start": "1168880",
    "end": "1175080"
  },
  {
    "text": "the failure cases so if there's a success it keeps going so like this if the move was",
    "start": "1175080",
    "end": "1182080"
  },
  {
    "text": "successful it will do this next step and if that was successful it will do the next step and if that was successful it'll do the next step if there's any",
    "start": "1182080",
    "end": "1188159"
  },
  {
    "text": "failures along this line it will basically go to the bottom it'll kind of bypass all this code and go directly to",
    "start": "1188159",
    "end": "1194640"
  },
  {
    "text": "the you know bottom of the code so very similar to how we do the",
    "start": "1194640",
    "end": "1199919"
  },
  {
    "text": "state the same kind of thing all right there's the result expression so again we've turned",
    "start": "1199919",
    "end": "1206400"
  },
  {
    "text": "something kind of nasty looking into something which is manageable now in this code we still have this uh State",
    "start": "1206400",
    "end": "1213440"
  },
  {
    "text": "hang we keep passing the state every single function what we can do is we combine we can take the state one um and",
    "start": "1213440",
    "end": "1220440"
  },
  {
    "text": "the result one and combine them into a combined expression so we're going to",
    "start": "1220440",
    "end": "1225600"
  },
  {
    "text": "create a result State expression both of them and now when we do this we've got rid of",
    "start": "1225600",
    "end": "1231520"
  },
  {
    "text": "the state as well there's no state in any of this code so this code looks really imperative it looks like just",
    "start": "1231520",
    "end": "1237600"
  },
  {
    "text": "like the object oriented code really it's like move here move here turn here move here um but unlike the object",
    "start": "1237600",
    "end": "1244720"
  },
  {
    "text": "object oriented code there's error handling built in and there's State Management built",
    "start": "1244720",
    "end": "1249799"
  },
  {
    "text": "in so there you go that's quite nice so we got this uh these these",
    "start": "1249799",
    "end": "1256640"
  },
  {
    "text": "computation expressions in F are very nice way of hiding all this nastiness so",
    "start": "1256640",
    "end": "1262080"
  },
  {
    "text": "what have we got here we've got explicit errors we're not throwing exceptions we don't have to look in the documentation to see if it's going to be a failure or",
    "start": "1262080",
    "end": "1268880"
  },
  {
    "text": "not for example the pen up and the pen down might not return a failure but the move function we can tell it returns of",
    "start": "1268880",
    "end": "1274840"
  },
  {
    "text": "failure because it's going to return this type which is either success or failure but when we write the code it",
    "start": "1274840",
    "end": "1281039"
  },
  {
    "text": "looks like the Happy paath code it doesn't look like we've got all this nasty error handling there's nothing about handling exceptions or try catch",
    "start": "1281039",
    "end": "1287279"
  },
  {
    "text": "or anything it's all it's all handle for me downside again harder to implement",
    "start": "1287279",
    "end": "1292400"
  },
  {
    "text": "and harder to use uh might have a whole talk on this topic too which is the railway oriented",
    "start": "1292400",
    "end": "1298279"
  },
  {
    "text": "programming talk which you might have heard of all right next async",
    "start": "1298279",
    "end": "1305480"
  },
  {
    "text": "turtle um this is like five and a half this is sort of a bonus thing so it's actually 13 and a half ways of looking",
    "start": "1305480",
    "end": "1311679"
  },
  {
    "text": "at a turtle um what happens if the turtle is actually a real robot turtle",
    "start": "1311679",
    "end": "1317000"
  },
  {
    "text": "and you actually are sending you know remote signals to it to get something to happen so the turtle Hol is going to be",
    "start": "1317000",
    "end": "1322880"
  },
  {
    "text": "async then right you're going to have to send a thing and wait for a response so how would we handle that well very",
    "start": "1322880",
    "end": "1329640"
  },
  {
    "start": "1326000",
    "end": "1326000"
  },
  {
    "text": "similar we have an async move Now with an async you basically do something and",
    "start": "1329640",
    "end": "1334760"
  },
  {
    "text": "then you have to have a call back like when it finishes doing what it it's going to call you back so it's going to call you back with the new state all",
    "start": "1334760",
    "end": "1342200"
  },
  {
    "text": "right and when it's called me back I'm going to make another move and then when it's finished doing that it's going to call me back with a new state and and",
    "start": "1342200",
    "end": "1348799"
  },
  {
    "text": "I'll make another move when it's done it'll call me back with the new state so this is a very common pattern when you",
    "start": "1348799",
    "end": "1354039"
  },
  {
    "text": "have a sync code when you have a lot of callbacks you get this thing called the Pyramid of Doom because it ends up going",
    "start": "1354039",
    "end": "1360480"
  },
  {
    "text": "further and further out how can we make this easier um we've got all these nasty",
    "start": "1360480",
    "end": "1366919"
  },
  {
    "text": "callbacks we really don't want to see these in in our code if we can help it is there a way of getting rid of them so",
    "start": "1366919",
    "end": "1372799"
  },
  {
    "text": "this is a trippity tripical yucky yuck callback stuff very nasty um",
    "start": "1372799",
    "end": "1378960"
  },
  {
    "start": "1378000",
    "end": "1378000"
  },
  {
    "text": "yes async expression again we have another computation expression and what",
    "start": "1378960",
    "end": "1384200"
  },
  {
    "text": "this one does is it hides the callbacks behind the scenes so when I write the code I say move a sync um but I don't",
    "start": "1384200",
    "end": "1392720"
  },
  {
    "text": "have to worry there's no call back basically the call back happens automatically and then I move async",
    "start": "1392720",
    "end": "1397760"
  },
  {
    "text": "again and I move async again and the ace again it looks like um normal code but",
    "start": "1397760",
    "end": "1404799"
  },
  {
    "text": "the async Callback is handle behind the scenes",
    "start": "1404799",
    "end": "1409640"
  },
  {
    "text": "so um there's a pattern here we've got the state thing we've got the result",
    "start": "1409960",
    "end": "1415000"
  },
  {
    "text": "thing we've got the async thing they're all the same kind of pattern and that pattern is the famous MW right monad so",
    "start": "1415000",
    "end": "1421919"
  },
  {
    "text": "monads is the commonality between these patterns so let's review what we've done",
    "start": "1421919",
    "end": "1427720"
  },
  {
    "start": "1426000",
    "end": "1426000"
  },
  {
    "text": "so far um we're using composition a lot we're chaining functions together we haven't created any new objects every",
    "start": "1427720",
    "end": "1433919"
  },
  {
    "text": "time we wanted to do something um we've got explicit State Management we've got no mutation",
    "start": "1433919",
    "end": "1439080"
  },
  {
    "text": "we got explicit errors we're not throwing any exceptions um all this explicitness is great it makes it really",
    "start": "1439080",
    "end": "1445120"
  },
  {
    "text": "easy to test it makes it easy to reason about the downside is it looks really ugly but we have techniques to make that",
    "start": "1445120",
    "end": "1453200"
  },
  {
    "text": "easier to work with we can hide the state and the errors and the callbacks behind the scenes using Mantic",
    "start": "1453200",
    "end": "1459679"
  },
  {
    "text": "composition uh these computation Expressions all right",
    "start": "1459679",
    "end": "1465440"
  },
  {
    "text": "next okay batch processing now in all the examples so far the",
    "start": "1465440",
    "end": "1471200"
  },
  {
    "text": "caller has been managing the state and it's painful basically uh even even with",
    "start": "1471200",
    "end": "1478000"
  },
  {
    "text": "all these computation exps it's still painful to manage State how can we have it so that the caller avoids managing State",
    "start": "1478000",
    "end": "1484000"
  },
  {
    "text": "altogether well the first technique we'll look at is just a batch processing what we're going to do is create a bunch",
    "start": "1484000",
    "end": "1490120"
  },
  {
    "text": "of commands and send it to a batch processor so from the client's point of",
    "start": "1490120",
    "end": "1495360"
  },
  {
    "text": "view I create a command and I create a whole bunch of list of commands and I send it to the batch Runner and the batch Runner is going to",
    "start": "1495360",
    "end": "1503320"
  },
  {
    "text": "Loop over all the commands and run them in turn each one in turn actually calling the turtle functions and as part",
    "start": "1503320",
    "end": "1509480"
  },
  {
    "text": "of its loop it's going to be keeping track of the state so the clients no longer has to keep track of the state",
    "start": "1509480",
    "end": "1515880"
  },
  {
    "text": "this batch processor is going to keep track of the state so that's nice from a client's point of view it's much",
    "start": "1515880",
    "end": "1522480"
  },
  {
    "text": "nicer but we have a problem which is these commands are data and our API is not data it's",
    "start": "1522480",
    "end": "1530159"
  },
  {
    "start": "1528000",
    "end": "1528000"
  },
  {
    "text": "functions so how can we turn our API which are these four functions how can we turn this into uh a data structure",
    "start": "1530159",
    "end": "1537600"
  },
  {
    "text": "that we can send down the wire to the batch process well it's quite simple we use",
    "start": "1537600",
    "end": "1543039"
  },
  {
    "text": "another Choice type and basically for each function in the API we create a",
    "start": "1543039",
    "end": "1548679"
  },
  {
    "text": "choice so there's a function called move which has a distance parameter we're going to create a a choice case which",
    "start": "1548679",
    "end": "1556600"
  },
  {
    "text": "has a distance thing as associated with it uh the turn is going to have an angle associated with it the pen up doesn't",
    "start": "1556600",
    "end": "1563000"
  },
  {
    "text": "have any data associated with it the pen down doesn't have any data associated with it so um we now have a turtle",
    "start": "1563000",
    "end": "1569240"
  },
  {
    "text": "command which mirrors the uh the turtle API except it's pure data this can be",
    "start": "1569240",
    "end": "1574480"
  },
  {
    "text": "serialized and put on The Wire so Choice type to the to for the",
    "start": "1574480",
    "end": "1580080"
  },
  {
    "text": "win again so here's the client code again here's my list of commands right now",
    "start": "1580080",
    "end": "1586799"
  },
  {
    "text": "these look like function calls but it's actually data when I say move 100 I'm actually creating a data structure and",
    "start": "1586799",
    "end": "1593159"
  },
  {
    "text": "when I say turn 120 I'm creating a data structure so this is actually a list of",
    "start": "1593159",
    "end": "1598399"
  },
  {
    "text": "data records right I take this list and I send it to the batch processor and it",
    "start": "1598399",
    "end": "1604320"
  },
  {
    "text": "runs them all at once so from the client's point of view that's very nice no State",
    "start": "1604320",
    "end": "1610799"
  },
  {
    "text": "anywhere but it's this this thing about being data is really important we'll come back to it later now on the batch",
    "start": "1610799",
    "end": "1617480"
  },
  {
    "start": "1616000",
    "end": "1616000"
  },
  {
    "text": "Runner side it's going to have to execute this data structure and how is it going to do that well very",
    "start": "1617480",
    "end": "1624320"
  },
  {
    "text": "straightforward for each case it's going to execute a particular Turtle function",
    "start": "1624320",
    "end": "1629399"
  },
  {
    "text": "so for the move case it's going to move the turtle for the angle to turn case",
    "start": "1629399",
    "end": "1634520"
  },
  {
    "text": "it's going to turn the turtle and and so on and so forth and notice that in the",
    "start": "1634520",
    "end": "1639559"
  },
  {
    "text": "inside it it's got this state it's keeping track of the state all right state is passed in at the beginning and",
    "start": "1639559",
    "end": "1644600"
  },
  {
    "text": "it comes out the other end so the the overall implementation for the run is",
    "start": "1644600",
    "end": "1649840"
  },
  {
    "start": "1647000",
    "end": "1647000"
  },
  {
    "text": "going to say okay start with initial State uh for each command in the list of commands you're going to Loop through",
    "start": "1649840",
    "end": "1656000"
  },
  {
    "text": "them and you're going to execute the command for each one it's going to create a new state and then after you've looped through all the commands you're",
    "start": "1656000",
    "end": "1661880"
  },
  {
    "text": "going to have the final State and that is what you return back to the caller now this is basically a for Loop",
    "start": "1661880",
    "end": "1669399"
  },
  {
    "text": "we've all written these but in uh F you wouldn't actually bother to write this because actually this is built-in",
    "start": "1669399",
    "end": "1674840"
  },
  {
    "text": "function called fold um all function language will have this as part of their library in C it's the link function uh",
    "start": "1674840",
    "end": "1682559"
  },
  {
    "text": "link. agregate very useful I basically would not write your own don't write your own iterations learn to use the",
    "start": "1682559",
    "end": "1689760"
  },
  {
    "text": "collection functions which already built into the library so this is list fold we'll be seeing fold again",
    "start": "1689760",
    "end": "1696440"
  },
  {
    "text": "shortly all right so what's the advantages and disadvantages of the batch processing well first of all it's",
    "start": "1696440",
    "end": "1701480"
  },
  {
    "text": "completely decoupled because I'm sending data I have absolutely no idea what the implementation is that's really nice",
    "start": "1701480",
    "end": "1708159"
  },
  {
    "text": "nice that's really decoupled it's a lot easier than working with monads the state is much much",
    "start": "1708159",
    "end": "1715240"
  },
  {
    "text": "easier um the downside is batch oriented right I can I have to do all",
    "start": "1715240",
    "end": "1720760"
  },
  {
    "text": "the commands at once and the other disadvantage there's no control flow like if the First Command fails I don't",
    "start": "1720760",
    "end": "1726799"
  },
  {
    "text": "I can't choose and say well if it fails I want to do this and if it doesn't fail I want to do this it's like here's a",
    "start": "1726799",
    "end": "1732200"
  },
  {
    "text": "bunch of commands it's fire and forget and then I just have to take it all or nothing so that's the downside but if",
    "start": "1732200",
    "end": "1738679"
  },
  {
    "text": "you can get away with it that's really nice all right next actor",
    "start": "1738679",
    "end": "1744399"
  },
  {
    "text": "model so the actor model is quite similar to the batch model except it's sort of like a real-time version of the",
    "start": "1744399",
    "end": "1751399"
  },
  {
    "text": "batch model so in the actor model I have a command exactly the same kind of command I used before but this time I'm",
    "start": "1751399",
    "end": "1757399"
  },
  {
    "text": "going to put it on a q uh the actor is basically a little message Loop that reads things off the",
    "start": "1757399",
    "end": "1762799"
  },
  {
    "text": "queue processes the command uh and then goes back and goes around the loop again",
    "start": "1762799",
    "end": "1769440"
  },
  {
    "text": "so again all the state is kept track of in the actor the client doesn't have to keep",
    "start": "1769440",
    "end": "1774640"
  },
  {
    "text": "track of the state the turtle doesn't keep track of the state the state is sort of in in between the two so let's",
    "start": "1774640",
    "end": "1780919"
  },
  {
    "start": "1780000",
    "end": "1780000"
  },
  {
    "text": "look at the code so all actors have a loop uh the loop takes the initial",
    "start": "1780919",
    "end": "1786919"
  },
  {
    "text": "Turtle state that comes in we also then read a command from the message CU um we",
    "start": "1786919",
    "end": "1792919"
  },
  {
    "text": "create a new state how do we create the new state by testing the command if it's a move we move the turtle and so on we",
    "start": "1792919",
    "end": "1799519"
  },
  {
    "text": "we run the command the same way we did exactly the same way we did before we get a new state and then the difference",
    "start": "1799519",
    "end": "1804679"
  },
  {
    "text": "is we now take that new state and we feed it back into the top we take the new state and we loop again it's a",
    "start": "1804679",
    "end": "1810200"
  },
  {
    "text": "recursive Loop and then that Loop will then block waiting for another command",
    "start": "1810200",
    "end": "1815559"
  },
  {
    "text": "on the message queue so the actor model and the um batch model are you can share",
    "start": "1815559",
    "end": "1821399"
  },
  {
    "text": "a lot of code between the two Models All right so very similar but",
    "start": "1821399",
    "end": "1826919"
  },
  {
    "text": "except you have now this recur cve Loop which blocks each time through the loop so again from the caller's point of view",
    "start": "1826919",
    "end": "1833200"
  },
  {
    "text": "it's really us to to use I create a turtle uh and I post a message now because it's a it's a a que I post the",
    "start": "1833200",
    "end": "1840360"
  },
  {
    "text": "move message I post a turn message I post a move message but unlike the batch model every time I post a message the",
    "start": "1840360",
    "end": "1847399"
  },
  {
    "text": "turtle responds pretty much straight away right so it's not exactly real time but it's you know it's responsive to",
    "start": "1847399",
    "end": "1852960"
  },
  {
    "text": "what I do I don't have to wait until I've finished all the commands",
    "start": "1852960",
    "end": "1859240"
  },
  {
    "text": "all right so pros and cons of the actor model again very decoupled I have no",
    "start": "1859440",
    "end": "1865200"
  },
  {
    "text": "idea what the implementation is I'm just sending it data again simpler than working with a state Mo ad downside kind",
    "start": "1865200",
    "end": "1872720"
  },
  {
    "text": "of M of boiler plate associated with actors not quite as easy to understand but I think you know if",
    "start": "1872720",
    "end": "1879960"
  },
  {
    "text": "you're managing State this is one of my favorite ways of managing state if I have mutable State like this next event",
    "start": "1879960",
    "end": "1886679"
  },
  {
    "text": "sourcing right so event sourcing the diagrams are",
    "start": "1886679",
    "end": "1891840"
  },
  {
    "text": "going to get more and more complicated as we go on so we started with with getting past the simple ones and getting",
    "start": "1891840",
    "end": "1897600"
  },
  {
    "text": "more complicated and the event sourcing issue really is how do we",
    "start": "1897600",
    "end": "1902880"
  },
  {
    "text": "persist the state um between runs so the actor model if if if your program crashes you've",
    "start": "1902880",
    "end": "1909639"
  },
  {
    "text": "just lost everything so we want to persist the states so that if the actor crashes we can load we can start off",
    "start": "1909639",
    "end": "1915519"
  },
  {
    "text": "where we pick up where we left off or if we want to start up in another server our server goes down we want to run",
    "start": "1915519",
    "end": "1921279"
  },
  {
    "text": "another server we can scale out whatever it's nice to persist it so we could just store it straight in a database but um",
    "start": "1921279",
    "end": "1928320"
  },
  {
    "text": "one of the things about function program is that you might want to have an immutable",
    "start": "1928320",
    "end": "1933440"
  },
  {
    "text": "database a database that you can't just update you can only append to so if you",
    "start": "1933440",
    "end": "1938519"
  },
  {
    "text": "want to append to something you just uh it's a different design Al together so what we're going to do is",
    "start": "1938519",
    "end": "1945399"
  },
  {
    "text": "we're going to append to the database to the store an event and an event is",
    "start": "1945399",
    "end": "1950600"
  },
  {
    "text": "basically the diff between before the command and after the command it's so like what changed as a result of running",
    "start": "1950600",
    "end": "1957320"
  },
  {
    "text": "this command so we get a command in from the command Handler and we're going to we",
    "start": "1957320",
    "end": "1962799"
  },
  {
    "text": "have this event store which has a list of previous events we're going to read the previous events into memory we're",
    "start": "1962799",
    "end": "1968080"
  },
  {
    "text": "going to recreate the state by by applying all these events and now we have the state that it was before the",
    "start": "1968080",
    "end": "1974279"
  },
  {
    "text": "commands we then execute the commands and that actually talk thoughts to the turtle and does all the work and then",
    "start": "1974279",
    "end": "1980320"
  },
  {
    "text": "the when the command is finished the output of the command is a bunch of new events and these new events get put back",
    "start": "1980320",
    "end": "1986919"
  },
  {
    "text": "into the event store and so the new events represent what changed between",
    "start": "1986919",
    "end": "1992440"
  },
  {
    "text": "before the command and after the command because again when we get the next command we're going to take these new events and read them up as part of the",
    "start": "1992440",
    "end": "1998320"
  },
  {
    "text": "event history to recreate the state so that's basically how event",
    "start": "1998320",
    "end": "2003360"
  },
  {
    "text": "sourcing Works um so one of the things is what is the difference between a command and an",
    "start": "2003360",
    "end": "2009320"
  },
  {
    "start": "2005000",
    "end": "2005000"
  },
  {
    "text": "event in event sourcing um seems to be tricky question sometimes but let's",
    "start": "2009320",
    "end": "2015000"
  },
  {
    "text": "actually have a look so here's our our Turtle command we've got our four different choices here um the command is",
    "start": "2015000",
    "end": "2022480"
  },
  {
    "text": "what you want to have happen it might not actually happen I say I want to move here and I want to move this distance",
    "start": "2022480",
    "end": "2028159"
  },
  {
    "text": "but if I hit the wall it might not work I might not have actually moved anything or you know I might have only moved half",
    "start": "2028159",
    "end": "2034320"
  },
  {
    "text": "as half as much so just because you want it to happen doesn't mean it actually happened now an event is what actually",
    "start": "2034320",
    "end": "2042360"
  },
  {
    "text": "happened so when I uh have an event everything's going to be in the past tense I actually moved this distance and",
    "start": "2042360",
    "end": "2050839"
  },
  {
    "text": "I actually turned this angle and I actually move the pen up and down and you can see that the um the",
    "start": "2050839",
    "end": "2058720"
  },
  {
    "text": "event is not quite the same as the command I it doesn't have to be one to one correspondence and you can store",
    "start": "2058720",
    "end": "2063960"
  },
  {
    "text": "some extra data here so you know in the command I wanted to move a certain distance but in the moved event I can",
    "start": "2063960",
    "end": "2069960"
  },
  {
    "text": "keep track of what the start position and the end position was as well cuz that's kind of helpful or I can keep",
    "start": "2069960",
    "end": "2075158"
  },
  {
    "text": "track of not only what the angle I wanted to turn but what the actual final angle was so this is what actually",
    "start": "2075159",
    "end": "2081520"
  },
  {
    "text": "happened and it's always past tense and again if we compare it with the command we can see it's subtly",
    "start": "2081520",
    "end": "2087720"
  },
  {
    "text": "different so it's the events that we store in the event store in the database",
    "start": "2087720",
    "end": "2093398"
  },
  {
    "text": "it's not the commands that's why it's called event sourcing",
    "start": "2093399",
    "end": "2098480"
  },
  {
    "text": "so there's two uh important parts of the event sourcing well we've seen how to actually apply a command but let's",
    "start": "2098480",
    "end": "2105680"
  },
  {
    "text": "talking about how do we apply an event we have a historical event we have a a particular State and we want to you know",
    "start": "2105680",
    "end": "2113599"
  },
  {
    "text": "like I say the event is sort of the diff between the previous state and the new state so if it's a moved event um we say",
    "start": "2113599",
    "end": "2121200"
  },
  {
    "text": "well the state was over here and now the new state is over here uh if it was a turned event we can say well the",
    "start": "2121200",
    "end": "2128000"
  },
  {
    "text": "original you know the state is now at this new Final angle and that's one of the reasons we can store this extra data",
    "start": "2128000",
    "end": "2133359"
  },
  {
    "text": "in the state because makes some of this um handling much easier notice that we are not calling the turtle okay this is",
    "start": "2133359",
    "end": "2140000"
  },
  {
    "text": "purely an inmemory State changing operation we are not C there's no IO It's All Pure",
    "start": "2140000",
    "end": "2147359"
  },
  {
    "text": "okay so this is one of the key uh functions that you need to implement with an event sourcing",
    "start": "2147359",
    "end": "2154000"
  },
  {
    "text": "model all right no side effects very important nothing happen Happ s we're just looping through the things and",
    "start": "2154000",
    "end": "2160240"
  },
  {
    "text": "modifying the state to get back to what it was before the command happened and then to actually handle the",
    "start": "2160240",
    "end": "2165800"
  },
  {
    "text": "command then very simple we load all the events from the event store that gives us our event history we recreate the",
    "start": "2165800",
    "end": "2172560"
  },
  {
    "text": "state before the command by looping through all the events and applying that",
    "start": "2172560",
    "end": "2178640"
  },
  {
    "text": "apply event thing so that's again we using the list fold to do that which is basically the for",
    "start": "2178640",
    "end": "2184440"
  },
  {
    "text": "lip and then now we have the state that it was just before the command which",
    "start": "2184440",
    "end": "2189720"
  },
  {
    "text": "would have been the same as if it' been using the actor model or something we have the state in memory we reply the command we execute the command um that",
    "start": "2189720",
    "end": "2197079"
  },
  {
    "text": "changes the state and it creates some new events and then these new events are then written back into the event store",
    "start": "2197079",
    "end": "2203240"
  },
  {
    "text": "so again very critical that the when you're rebuilding the state there's no side effects when you're executing the",
    "start": "2203240",
    "end": "2209000"
  },
  {
    "text": "amand that's where the side effects happen that's where you actually move move the turtle all right pros and cons of event",
    "start": "2209000",
    "end": "2216480"
  },
  {
    "text": "sourcing again very decoupled from the implementation stateless um what's nice is it supports",
    "start": "2216480",
    "end": "2223839"
  },
  {
    "text": "the replay of events if the business logic changes you have the history of everything that happened you have an audit Trail for free many nice features",
    "start": "2223839",
    "end": "2231720"
  },
  {
    "text": "about event sourcing which is why it's sort of trendy right now unfortunately is more complex to manage and when you",
    "start": "2231720",
    "end": "2238280"
  },
  {
    "text": "have uh like a history you have to kind of keep the the Integrity of the history so you need to have like versioning of",
    "start": "2238280",
    "end": "2244640"
  },
  {
    "text": "the events the old events might be slightly different from the new events um it just becomes a lot trickier than",
    "start": "2244640",
    "end": "2250119"
  },
  {
    "text": "just managing a snapshot of the current state but for many situations it's worth it all",
    "start": "2250119",
    "end": "2256680"
  },
  {
    "text": "right next stream processing so stream stream processing",
    "start": "2256680",
    "end": "2263560"
  },
  {
    "text": "is like event sourcing um even more but even more so so the diagram is getting",
    "start": "2263560",
    "end": "2269480"
  },
  {
    "text": "even more complicated um with stream processing you basically have these event streams",
    "start": "2269480",
    "end": "2276240"
  },
  {
    "text": "um you're going to have a bunch of event streams coming into you you're going to pick and choose which events you want to",
    "start": "2276240",
    "end": "2281960"
  },
  {
    "text": "handle some of them are interesting some of them not interesting so you're going to select you're going to do filter and",
    "start": "2281960",
    "end": "2287880"
  },
  {
    "text": "then once you've got the events that you're interested in you turn them into command you execute the command just",
    "start": "2287880",
    "end": "2293800"
  },
  {
    "text": "like we did and we you know just the same as with the event sourcing thing we put the data back in the event store and",
    "start": "2293800",
    "end": "2299839"
  },
  {
    "text": "that generates new events right we run the command that generates new events which is then handled by the next person",
    "start": "2299839",
    "end": "2306960"
  },
  {
    "text": "down theine line so this is why it's a stream each little thing is processing a stream events coming in doing some work",
    "start": "2306960",
    "end": "2314040"
  },
  {
    "text": "generating new events and that becomes a stream of events going out for the next person so that's the that's the concept",
    "start": "2314040",
    "end": "2321839"
  },
  {
    "text": "let's look at how it would work um with a turtle so one of the things is that you can",
    "start": "2321839",
    "end": "2326920"
  },
  {
    "text": "separate the decision making process from the state changing process um",
    "start": "2326920",
    "end": "2334119"
  },
  {
    "text": "rather than putting everything in the command Handler like you would with basic basic event sourcing you can say well all I'm going to do is trigger an",
    "start": "2334119",
    "end": "2340400"
  },
  {
    "text": "event and then you can decide what to do with that event that event might be important to you or it might not be",
    "start": "2340400",
    "end": "2345720"
  },
  {
    "text": "important but I don't get to decide I'll let you decide and that gives you a lot more flexibility so let's say in the turtle",
    "start": "2345720",
    "end": "2353440"
  },
  {
    "start": "2350000",
    "end": "2350000"
  },
  {
    "text": "situation we're going to have the command Handler and all it does is update the turtle state it just figures out where the turtle is on the canvas",
    "start": "2353440",
    "end": "2359960"
  },
  {
    "text": "but it doesn't actually move the turtle it doesn't log anything um how what you do with that information is for the",
    "start": "2359960",
    "end": "2367400"
  },
  {
    "text": "Downstream processors to the side so for example we might have an audit processor",
    "start": "2367400",
    "end": "2372720"
  },
  {
    "text": "so every time you do something it's very important that we keep track of every Turtle command because it's a high",
    "start": "2372720",
    "end": "2378079"
  },
  {
    "text": "security Turtle we want to make sure that nobody's messing with it um a canvas processor might actually move the",
    "start": "2378079",
    "end": "2384280"
  },
  {
    "text": "turtle around the canva so we might have a physical Turtle robot that physically moves the robot um let's say we want to",
    "start": "2384280",
    "end": "2390599"
  },
  {
    "text": "keep track of how many miles the turtle's moved because we want to keep track of whether the batter is about to run out um let's call this a",
    "start": "2390599",
    "end": "2398079"
  },
  {
    "text": "processor so three different kinds of business logic all using um the same event stream as",
    "start": "2398079",
    "end": "2404440"
  },
  {
    "text": "input so let's actually look at some real code go back to some real code here",
    "start": "2404440",
    "end": "2410920"
  },
  {
    "text": "right where are we stream",
    "start": "2410920",
    "end": "2414799"
  },
  {
    "text": "processing okay here's our event process so the audit processor",
    "start": "2421480",
    "end": "2427720"
  },
  {
    "text": "this is the Handler so if it moved we're going to write a message out if it",
    "start": "2427720",
    "end": "2432920"
  },
  {
    "text": "turned we're going to write a message out uh if it's you know changed we're going to write a message out and then",
    "start": "2432920",
    "end": "2439200"
  },
  {
    "text": "what we're going to do is start with all the the event stream as the input and for each particular event the observable",
    "start": "2439200",
    "end": "2444520"
  },
  {
    "text": "we're just going to call that function so that's our uh auditing process",
    "start": "2444520",
    "end": "2449800"
  },
  {
    "text": "here get that one out of the way now here's the canvas processor and this one",
    "start": "2449800",
    "end": "2455440"
  },
  {
    "text": "it's only going to draw on the canvas so it doesn't only needs to care about moved events so I'm going to have a move",
    "start": "2455440",
    "end": "2461280"
  },
  {
    "text": "filter so I'm I'm going to filter everything other than moved events so again I start with all events but I",
    "start": "2461280",
    "end": "2467119"
  },
  {
    "text": "choose the move events only and then I just handle those by actually drawing on the canvas which is that piece of code",
    "start": "2467119",
    "end": "2473400"
  },
  {
    "text": "there so let's create one of those and let's do a distance traveled",
    "start": "2473400",
    "end": "2480920"
  },
  {
    "text": "processor so all this one is just going to keep track of how much youve how what the distance is just add it to the total",
    "start": "2480920",
    "end": "2486520"
  },
  {
    "text": "distance so far um and then at the end it's just going to print out the distance traveled so",
    "start": "2486520",
    "end": "2491839"
  },
  {
    "text": "again I'm only interested in moved events so start with all events uh choose the moved ones only and",
    "start": "2491839",
    "end": "2499359"
  },
  {
    "text": "accumulate the distance and then print that out so let's do",
    "start": "2499359",
    "end": "2504960"
  },
  {
    "text": "that all right so there's our three processes so here's our event stream there's are three uh stream",
    "start": "2505520",
    "end": "2513200"
  },
  {
    "text": "processors let's open up the canvas let's uh handle the whoops I need to",
    "start": "2513200",
    "end": "2519280"
  },
  {
    "text": "what's wrong",
    "start": "2519280",
    "end": "2521800"
  },
  {
    "text": "here I need to cancel this out try",
    "start": "2524680",
    "end": "2529559"
  },
  {
    "text": "again uh I think I did something wrong",
    "start": "2531920",
    "end": "2536318"
  },
  {
    "text": "here there we go so I've moved 100 and then I'm going to turn now notice when I",
    "start": "2544599",
    "end": "2551119"
  },
  {
    "text": "moved 100 I got the audit I also got the distance traveled when I turned I didn't",
    "start": "2551119",
    "end": "2556839"
  },
  {
    "text": "get anything happen except the audit when I move again uh that I got the audit I got the",
    "start": "2556839",
    "end": "2563319"
  },
  {
    "text": "distance traveled and I also got the canvas changing and I do it again and I do it",
    "start": "2563319",
    "end": "2568920"
  },
  {
    "text": "again so now the distance traveled is 300 I've got the audit and I've got the canvas all three going at the same",
    "start": "2568920",
    "end": "2575880"
  },
  {
    "text": "time so so there you go it's quite nice and what's what's nice is I have new kind of business logic I can just plug",
    "start": "2575880",
    "end": "2583000"
  },
  {
    "text": "another event processor in Downstream I don't have to change the original Turtle State",
    "start": "2583000",
    "end": "2589640"
  },
  {
    "text": "processor so it's got decoupling of the business logic which is quite a nice feature so the advantages same as event",
    "start": "2589640",
    "end": "2596880"
  },
  {
    "text": "sourcing I've got replay history I've got decoupling but the the state and the business object can be as separate as",
    "start": "2596880",
    "end": "2602880"
  },
  {
    "text": "you like and you can have multiple consumers of the events so this is very microservice friendly basically a lot of",
    "start": "2602880",
    "end": "2610280"
  },
  {
    "text": "people use this kind of architecture for doing microservices disadvantages complex it's",
    "start": "2610280",
    "end": "2616559"
  },
  {
    "text": "getting kind of hard to program um if if you don't need it I wouldn't do this this is sort of a fun toy demo um you",
    "start": "2616559",
    "end": "2624800"
  },
  {
    "text": "know use it if you need to use it but I wouldn't do it just because it's trendy okay so what have we got so far",
    "start": "2624800",
    "end": "2631680"
  },
  {
    "text": "we've got conscious decoupling um using data types rather than functions um um",
    "start": "2631680",
    "end": "2637680"
  },
  {
    "text": "we're passing um we got these immutable data stores we're storing event history",
    "start": "2637680",
    "end": "2642960"
  },
  {
    "text": "rather than the current state next dependency",
    "start": "2642960",
    "end": "2649160"
  },
  {
    "text": "injection right so um if we had an object oriented class um we wouldn't",
    "start": "2649160",
    "end": "2656160"
  },
  {
    "text": "want them to use a particular canvas implementation we want to pass it in we",
    "start": "2656160",
    "end": "2661280"
  },
  {
    "text": "want to pass in the logger so what we do is we create an interface an i canvas and an ey loger",
    "start": "2661280",
    "end": "2667720"
  },
  {
    "text": "and we inject those interfaces into the turtle class in the Constructor and then",
    "start": "2667720",
    "end": "2672880"
  },
  {
    "text": "the move method would use the canvas and the logger the turn method would use just the logger and the pen up would use",
    "start": "2672880",
    "end": "2678359"
  },
  {
    "text": "just the logger and so on that's oo dependency injection I'm sure you all familiar with this again if I wanted to",
    "start": "2678359",
    "end": "2685559"
  },
  {
    "start": "2684000",
    "end": "2684000"
  },
  {
    "text": "decouple the client from the turtle I would have an i Turtle",
    "start": "2685559",
    "end": "2690839"
  },
  {
    "text": "interface and the client would be injected with the ey turtle and when it wanted to draw a triangle he would use",
    "start": "2690839",
    "end": "2696559"
  },
  {
    "text": "the ey turtle fle rather than particular implementation so I'm not going to do a demo cuz I haven't got enough time so",
    "start": "2696559",
    "end": "2703440"
  },
  {
    "text": "the advantage is is people are familiar with this um the disadvantage is quite a",
    "start": "2703440",
    "end": "2709240"
  },
  {
    "text": "few first of all you have these unintentional dependencies so in this model I passed in a canvas but only the",
    "start": "2709240",
    "end": "2715680"
  },
  {
    "text": "move function the move method needed the canvas the turn function method didn't need it but it could accidentally access",
    "start": "2715680",
    "end": "2722280"
  },
  {
    "text": "it so there's a potential uh bug there or just even a dependency where you you",
    "start": "2722280",
    "end": "2728359"
  },
  {
    "text": "got this thing depending on something you didn't need to depend on and often when you use interfaces they're not fine grained anyone who's used uh you know",
    "start": "2728359",
    "end": "2736480"
  },
  {
    "text": "repository interface data access layer kind of thing you you find that you know youve got this customer database thing",
    "start": "2736480",
    "end": "2743000"
  },
  {
    "text": "and it like get a customer update a customer insert a customer delete a customer change the customer's password",
    "start": "2743000",
    "end": "2748520"
  },
  {
    "text": "all these kinds of things and typically you know sometimes you end up with things with like 40 methods on it you",
    "start": "2748520",
    "end": "2754800"
  },
  {
    "text": "only need one or two of these methods you only need to like fetch the customer so do you really want to be able to",
    "start": "2754800",
    "end": "2760240"
  },
  {
    "text": "delete the customer or change the customer's password when all you want to do is fetch the customer from the database so it's very easy for",
    "start": "2760240",
    "end": "2766319"
  },
  {
    "text": "interfaces to grow um which is why you have things like the interface segregation principle there's various um",
    "start": "2766319",
    "end": "2773680"
  },
  {
    "text": "I you know guidelines to help you avoid doing that the other thing is when you have these deeply nested dependencies",
    "start": "2773680",
    "end": "2779240"
  },
  {
    "text": "you often need a helper Library like a ioc container or something to help you manage all the injection",
    "start": "2779240",
    "end": "2785400"
  },
  {
    "text": "logic right so let's look at functional dependency injection so in the functional style",
    "start": "2785400",
    "end": "2792839"
  },
  {
    "start": "2791000",
    "end": "2791000"
  },
  {
    "text": "there is no class so every single function needs to have its dependencies",
    "start": "2792839",
    "end": "2798040"
  },
  {
    "text": "passed into it so the move function needs to have the logging function and the draw function passed in the turn",
    "start": "2798040",
    "end": "2805880"
  },
  {
    "text": "function needs to have the logging function passed in and so on so forth now the nice thing about this is that the turn function can't possibly depend",
    "start": "2805880",
    "end": "2812760"
  },
  {
    "text": "on drawing on canas because it's not one of the parameters so instantly we have this nice kind of",
    "start": "2812760",
    "end": "2818119"
  },
  {
    "text": "decoupling um you know you're not going to get accidental use between um the two",
    "start": "2818119",
    "end": "2823400"
  },
  {
    "text": "different functions but now we have a problem because and so by the way these are functions we're passing in these are",
    "start": "2823400",
    "end": "2829559"
  },
  {
    "text": "not interfaces with every single thing that the thing needs to do is passed in as a separate",
    "start": "2829559",
    "end": "2835440"
  },
  {
    "text": "parameter so now we have a uh what we had originally was a move function that just you passed in the distance but now",
    "start": "2835440",
    "end": "2841960"
  },
  {
    "text": "we have these extra parameters we have to pass in a logging function we have to pass in a drawing function",
    "start": "2841960",
    "end": "2847480"
  },
  {
    "text": "um that's kind of awkward I don't want to have to pass in over and over every single time but we can go back to the",
    "start": "2847480",
    "end": "2854520"
  },
  {
    "text": "currying concept we can say this is actually a two parameter function that returns a new function so what we're",
    "start": "2854520",
    "end": "2861960"
  },
  {
    "text": "going to do is pass in just these first two parameters and not the last one and",
    "start": "2861960",
    "end": "2867839"
  },
  {
    "text": "that gives us a new function and the new function has the the logging function",
    "start": "2867839",
    "end": "2873040"
  },
  {
    "text": "and the drawing function sort of baked in to this new function and and from the client's point of view it looks like the",
    "start": "2873040",
    "end": "2879400"
  },
  {
    "text": "original function it just has this one parameter where you pass in the distance that I want to move so it's it's it's",
    "start": "2879400",
    "end": "2885920"
  },
  {
    "text": "kind of like it's kind of like they've been injected but the from the from the caller point of view you know I'm back",
    "start": "2885920",
    "end": "2891400"
  },
  {
    "text": "to where was originally it's quite nice so if we look at the implementation for how move worked we're now passing in the",
    "start": "2891400",
    "end": "2899240"
  },
  {
    "text": "log info and the draw these are now two function parameters so this is now a lot",
    "start": "2899240",
    "end": "2904559"
  },
  {
    "text": "of more parameters similar if I want to turn I have to pass in the log as a as a",
    "start": "2904559",
    "end": "2909880"
  },
  {
    "text": "function parameter um but when I use it I basically create a new function by",
    "start": "2909880",
    "end": "2915960"
  },
  {
    "start": "2911000",
    "end": "2911000"
  },
  {
    "text": "passing in the first two parameters and here I'm creating a new function by passing in just the log of parameter so",
    "start": "2915960",
    "end": "2922480"
  },
  {
    "text": "these uh parameters being passed in this is the partial application technique and what's left now is this function which",
    "start": "2922480",
    "end": "2929240"
  },
  {
    "text": "is just what I need just the the basic move function so if I'm using it in",
    "start": "2929240",
    "end": "2934720"
  },
  {
    "text": "actually the client I'm drawing some stuff I can just say take the turtle State you know move 50 and then turn 120",
    "start": "2934720",
    "end": "2941520"
  },
  {
    "text": "and I don't have to keep passing in the logger and the canvas over and over and over again it's kind of baked into the",
    "start": "2941520",
    "end": "2947559"
  },
  {
    "text": "function so there we go uh and I'm not going to do a demo because I'm short of time so um the nice thing about the",
    "start": "2947559",
    "end": "2954880"
  },
  {
    "text": "functional model is again everything's explicit I pass in a parameter every single dependency has to be passed in as",
    "start": "2954880",
    "end": "2960000"
  },
  {
    "text": "a parameter and all the dependencies are passed in as individual functions not as",
    "start": "2960000",
    "end": "2965839"
  },
  {
    "text": "interfaces so you can't get this thing where you have 40 methods being passed in and so that's a really good",
    "start": "2965839",
    "end": "2972440"
  },
  {
    "text": "counterforce to having too many dependencies so you don't need to have a a rule saying don't have 40 methods on",
    "start": "2972440",
    "end": "2980319"
  },
  {
    "text": "your interface because you're having 40 parameters and that's really ugly you know straight away that something's",
    "start": "2980319",
    "end": "2985559"
  },
  {
    "text": "wrong with your code you're going to be refactoring it straight away when you have 40 parameters so you basically have a natural counter veiling you",
    "start": "2985559",
    "end": "2993880"
  },
  {
    "text": "know downhill the easy the the path of lease resistance is to have fewer parameters so you kind of get the ISP",
    "start": "2993880",
    "end": "3000240"
  },
  {
    "text": "for free the interface segregation principle you don't have to like hardcode it you know I have a special",
    "start": "3000240",
    "end": "3005440"
  },
  {
    "text": "code of view the other thing is you don't need a special Library you don't need ioc container it's built in this",
    "start": "3005440",
    "end": "3011280"
  },
  {
    "text": "thing of using partial application is a fundamental functional programing technique um it's like something you",
    "start": "3011280",
    "end": "3018599"
  },
  {
    "text": "just learned the very beginning what's the Downs side I don't think there are any I think this is actually a really nice technique I use it all the time and",
    "start": "3018599",
    "end": "3025960"
  },
  {
    "text": "I can't think of any nothing wrong with it so there you go all right next we're down to the last",
    "start": "3025960",
    "end": "3031400"
  },
  {
    "text": "two The Interpreter all right so we have our",
    "start": "3031400",
    "end": "3037760"
  },
  {
    "start": "3036000",
    "end": "3036000"
  },
  {
    "text": "total API we have our four functions like this um and it looks quite nice um",
    "start": "3037760",
    "end": "3044000"
  },
  {
    "text": "but there's some coupling going on again um for example this is the kind of basic",
    "start": "3044000",
    "end": "3049559"
  },
  {
    "text": "API but uh let's say we want to have the results be um you know we don't want to",
    "start": "3049559",
    "end": "3054880"
  },
  {
    "text": "do the error handling thing so they're going to return results all right so that's without the result and that's with the results and you say well that's",
    "start": "3054880",
    "end": "3061520"
  },
  {
    "text": "nice but now we've decided to make it async so now we need to be an async result okay so before and after every",
    "start": "3061520",
    "end": "3068880"
  },
  {
    "text": "time we do this uh we break the caller anyone who's calling this code is now broken they have to work with async",
    "start": "3068880",
    "end": "3075559"
  },
  {
    "text": "rather than what they had before now normally that's quite a good thing it's kind of nice to break the caller it's",
    "start": "3075559",
    "end": "3080960"
  },
  {
    "text": "nice that you you know you know that when when it compiles it's going to work so if it's not compiling it's you know",
    "start": "3080960",
    "end": "3086240"
  },
  {
    "text": "it's it's a nice reminder that you've something's changed in the API but it's still kind of annoying is there a way to avoid",
    "start": "3086240",
    "end": "3093880"
  },
  {
    "text": "this um and the answer is yes the answer is to decouple using data structures",
    "start": "3093880",
    "end": "3099640"
  },
  {
    "text": "again um we saw this before with a batch processing and the actor model and so on",
    "start": "3099640",
    "end": "3104760"
  },
  {
    "text": "if we can turn this into a data structure we can completely decouple ourselves from actually what's going on behind the scenes where there's async or",
    "start": "3104760",
    "end": "3111160"
  },
  {
    "text": "whatever the only problem is that we can't manage control flow as we saw with the batch command there's no control",
    "start": "3111160",
    "end": "3117040"
  },
  {
    "text": "flow this time we want to deal with the control flow so how can we do control",
    "start": "3117040",
    "end": "3122240"
  },
  {
    "text": "flow well if you think about it um what we're going to do is we're going to create an interpreter for the data",
    "start": "3122240",
    "end": "3129200"
  },
  {
    "text": "structure so I am going to send a data structure which I'm going to call a program like it's going to say I want",
    "start": "3129200",
    "end": "3135559"
  },
  {
    "text": "you to move The Interpreter is going to interpret that some way whether it moves the turtle or just does something I",
    "start": "3135559",
    "end": "3141000"
  },
  {
    "text": "don't care none of my business how it actually works it's going to return the response the move response like the",
    "start": "3141000",
    "end": "3146520"
  },
  {
    "text": "actual distance moved now I can then make a decision based on that response",
    "start": "3146520",
    "end": "3151559"
  },
  {
    "text": "like what am I going do going to turn am I going to move again either way I'm going to create a new program okay so",
    "start": "3151559",
    "end": "3158359"
  },
  {
    "text": "here's the next step and say it's going to be a turn the interpreter's going to interpret that step it's going to return",
    "start": "3158359",
    "end": "3164359"
  },
  {
    "text": "the response for that thing and based on that response I'm going to make another decision and I'm going to create another",
    "start": "3164359",
    "end": "3170359"
  },
  {
    "text": "data structure which contains the information that I want to send to The Interpreter and so on and back and for",
    "start": "3170359",
    "end": "3176720"
  },
  {
    "text": "so you get this back and forth between the client and The Interpreter so how do we write this in",
    "start": "3176720",
    "end": "3184720"
  },
  {
    "start": "3182000",
    "end": "3182000"
  },
  {
    "text": "code this one's getting a bit more complicated so bear with me again we",
    "start": "3184720",
    "end": "3189799"
  },
  {
    "text": "have four cases one for each um function in the API but it's getting ugly so",
    "start": "3189799",
    "end": "3197240"
  },
  {
    "text": "let's let me show you how it works first of all we have the distance so for the for the move case we have the input",
    "start": "3197240",
    "end": "3203480"
  },
  {
    "text": "parameter to The Interpreter and this is like this is the distance I want you to move okay The Interpreter is going to",
    "start": "3203480",
    "end": "3209680"
  },
  {
    "text": "come back with a response which in this case is another distance the distance actually moved okay so that's the output",
    "start": "3209680",
    "end": "3214880"
  },
  {
    "text": "for The Interpreter and then I need to make a decision based on that response",
    "start": "3214880",
    "end": "3221559"
  },
  {
    "text": "and I'm going to create a new turtle program which I give back to The Interpreter again okay so that's basically the next step for The",
    "start": "3221559",
    "end": "3228400"
  },
  {
    "text": "Interpreter so each of these things generates um a new program all right so",
    "start": "3228400",
    "end": "3234760"
  },
  {
    "text": "this is a series uh if I want to do a turn it's the same thing I I pass in the angle I don't get any response and I",
    "start": "3234760",
    "end": "3240839"
  },
  {
    "text": "create another step and so on so this is the fundamental model of what we're going to do now the problem with this is",
    "start": "3240839",
    "end": "3246440"
  },
  {
    "text": "that each step returns another turtle program and so on add into an item so it",
    "start": "3246440",
    "end": "3251960"
  },
  {
    "text": "goes on for Infinity right so we're going to have to have another step which I'm going to call stop that's the end of",
    "start": "3251960",
    "end": "3258480"
  },
  {
    "text": "The Interpreter so this is a new case needed that wasn't in the original design so let's see how we actually",
    "start": "3258480",
    "end": "3264640"
  },
  {
    "text": "would use it from a client's point of view so if I want to draw a triangle I'm going to set this data structure now",
    "start": "3264640",
    "end": "3270640"
  },
  {
    "text": "this is not a command this is a data structure and the the first part of the data structure is what I'm sending you",
    "start": "3270640",
    "end": "3276760"
  },
  {
    "text": "the second part is a function which is given the response okay I'm going to give you another program so it's almost",
    "start": "3276760",
    "end": "3282680"
  },
  {
    "text": "like a call back it's a continuation you give me this response I will give you another program the",
    "start": "3282680",
    "end": "3288359"
  },
  {
    "text": "another program I'm going to give you is a turn okay you're going to give me a response back I'm going to give you",
    "start": "3288359",
    "end": "3294160"
  },
  {
    "text": "another program which is a move you're going to give me a response back I'm going to give you a turn again and so on",
    "start": "3294160",
    "end": "3299559"
  },
  {
    "text": "and so forth and then finally I'm going to say okay I'm done you can stop now so",
    "start": "3299559",
    "end": "3304720"
  },
  {
    "text": "that's is how you would draw a triangle using this approach ugly again all these",
    "start": "3304720",
    "end": "3311839"
  },
  {
    "text": "continuations is there a way to get rid of them yes there is yes we can get rid of them how can we get rid of them we",
    "start": "3311839",
    "end": "3318200"
  },
  {
    "text": "use the same thing we did before we create a special expression computation expression that hides it we've seen this",
    "start": "3318200",
    "end": "3324520"
  },
  {
    "text": "trick many times before so we're going to call a turtle program expression and inside the turtle program we don't have",
    "start": "3324520",
    "end": "3332160"
  },
  {
    "text": "to worry about these continuations they get handled for us behind the scenes so the program again looks like an",
    "start": "3332160",
    "end": "3338359"
  },
  {
    "text": "imperative kind of program move here turn here move here turn here but this is data okay this is not",
    "start": "3338359",
    "end": "3348280"
  },
  {
    "text": "moving a turtle this is purely a data structure it's an abstract syntax tree if you think so now I need to interpret",
    "start": "3348280",
    "end": "3356000"
  },
  {
    "text": "this data so I have this set of instructions I've created a turtle program I can have many different",
    "start": "3356000",
    "end": "3361960"
  },
  {
    "text": "interpreters for the same program so let's talk about the normal interpreter",
    "start": "3361960",
    "end": "3367359"
  },
  {
    "start": "3365000",
    "end": "3365000"
  },
  {
    "text": "the the turtle interpreter so for each case I need to handle it so if it's the stop case I'm done if it's the move case",
    "start": "3367359",
    "end": "3375280"
  },
  {
    "text": "I'm going to move the turtle I'm going to get the actual distance back um that gets fed into the next step and now I",
    "start": "3375280",
    "end": "3381599"
  },
  {
    "text": "have in the next program and I basically call myself again I loop back recursively and call the interpret",
    "start": "3381599",
    "end": "3388079"
  },
  {
    "text": "function again but now with the next step in the program if it's a turn I turn the turtle I get the response I get",
    "start": "3388079",
    "end": "3395200"
  },
  {
    "text": "the next step in the program and then I call myself again recursively with the next step this is I I don't expect you",
    "start": "3395200",
    "end": "3401760"
  },
  {
    "text": "to understand this straight away but you can see it's not that many lines of code right in interpreter is not that hard",
    "start": "3401760",
    "end": "3407319"
  },
  {
    "text": "okay so moving the turtle executing Next Step calling myself",
    "start": "3407319",
    "end": "3412960"
  },
  {
    "text": "recursively if I want to have a distance interpreter um um same kind of thing",
    "start": "3412960",
    "end": "3418200"
  },
  {
    "start": "3413000",
    "end": "3413000"
  },
  {
    "text": "except all I care about is moving so if you move I'm just going to accumulate the distance and um call myself again",
    "start": "3418200",
    "end": "3425839"
  },
  {
    "text": "and if it's a turn I just like no change whatso I just call the next step all right so let me see if I can do",
    "start": "3425839",
    "end": "3432799"
  },
  {
    "text": "a quick demo of",
    "start": "3432799",
    "end": "3435599"
  },
  {
    "text": "this um yeah interpret as distance here we go",
    "start": "3439960",
    "end": "3445240"
  },
  {
    "text": "here's the code for that",
    "start": "3445240",
    "end": "3448160"
  },
  {
    "text": "so here's the draw triangle program um I'm going to interpret as a",
    "start": "3451920",
    "end": "3457160"
  },
  {
    "text": "turtle there's the initial state I'm going to set up my canvas and now interpret the program so the program",
    "start": "3457160",
    "end": "3463160"
  },
  {
    "text": "says turn move turn move turn move all right so that's one interpretation now I",
    "start": "3463160",
    "end": "3468720"
  },
  {
    "text": "can take the same program okay exactly the same program",
    "start": "3468720",
    "end": "3475119"
  },
  {
    "text": "but this time I'm going to interpret the data structure as a distance thingy I",
    "start": "3475119",
    "end": "3480520"
  },
  {
    "text": "need the initial distance which is zero and I'm going to interpret the program as a distance changing thing and all it",
    "start": "3480520",
    "end": "3486799"
  },
  {
    "text": "does is print the answer here's the total distance moved was 300 okay so",
    "start": "3486799",
    "end": "3492640"
  },
  {
    "text": "this is really nice I've really really decoupled um the uh the client from the",
    "start": "3492640",
    "end": "3498720"
  },
  {
    "text": "from the you know from the behind the scenes okay the advantages completely decoupled nothing but API no",
    "start": "3498720",
    "end": "3504760"
  },
  {
    "text": "implementation you can do do some neat tricks with optimization so for example if I have three moves in a row uh in the",
    "start": "3504760",
    "end": "3511760"
  },
  {
    "text": "in the data structure I can collapse them into one single move so that might save time on network you know",
    "start": "3511760",
    "end": "3517920"
  },
  {
    "text": "thing um the disadvantage is really kind of complex and it really only works with",
    "start": "3517920",
    "end": "3523119"
  },
  {
    "text": "u a set of limited operations some good examples of this approach this is called the free monad",
    "start": "3523119",
    "end": "3529520"
  },
  {
    "text": "approach as well uh Twitter's Stitch Library uh Facebook's haxel Library they",
    "start": "3529520",
    "end": "3536440"
  },
  {
    "text": "use this technique all right so I just got a few minutes left last one all right so I'm",
    "start": "3536440",
    "end": "3543200"
  },
  {
    "text": "just going to go a few minutes over I hope you'll be all right with that capabilities okay so last one this is a",
    "start": "3543200",
    "end": "3550000"
  },
  {
    "text": "general thing about calling any API if I call an API sometimes it fails okay and",
    "start": "3550000",
    "end": "3556160"
  },
  {
    "text": "then I try calling it again and sometimes it fails again and it it it just can't do that and it's quite",
    "start": "3556160",
    "end": "3561960"
  },
  {
    "text": "annoying if you've got an API and it doesn't really give you any guidance on how to call it you have to know how the",
    "start": "3561960",
    "end": "3567680"
  },
  {
    "text": "API Works in order to call it successfully and that's quite annoying so rather than having the API tell you",
    "start": "3567680",
    "end": "3574200"
  },
  {
    "text": "what you can't do you call it and it says sorry I can't do that you call it sorry I can't do that while than saying what you can't do why not say what I can",
    "start": "3574200",
    "end": "3580400"
  },
  {
    "text": "do okay so this is what I call a capability based API so a capability is",
    "start": "3580400",
    "end": "3586359"
  },
  {
    "start": "3585000",
    "end": "3585000"
  },
  {
    "text": "kind of like a key if you have the key you can open the door if you don't have the key you can't open the door okay so",
    "start": "3586359",
    "end": "3591960"
  },
  {
    "text": "I'm going to model cap capabilities is kind of like a key so I make a call to the API and instead of just giving me a",
    "start": "3591960",
    "end": "3597720"
  },
  {
    "text": "result the API gives me back a bunch of keys it gives me back a bunch of capabilities and each of those",
    "start": "3597720",
    "end": "3603760"
  },
  {
    "text": "capabilities I can choose which one of those capabilities to use so which door am I going to open so okay I'm going to",
    "start": "3603760",
    "end": "3608920"
  },
  {
    "text": "pick one of those and I'm going to open the door and it takes me into new room and I get a bunch more capabilities CU",
    "start": "3608920",
    "end": "3615160"
  },
  {
    "text": "it's like it's one of one of those dungeon games you know so in the turtle thing how does this work in the turtle",
    "start": "3615160",
    "end": "3620839"
  },
  {
    "text": "world I make a move so instead of just getting a response back I get three capability back you can move you can",
    "start": "3620839",
    "end": "3627760"
  },
  {
    "text": "turn you can set the pen down for example all right so let me see I want to move again now this time I've moved",
    "start": "3627760",
    "end": "3633599"
  },
  {
    "text": "to the edge of the board and I get two capabilities back I can't move anymore",
    "start": "3633599",
    "end": "3638839"
  },
  {
    "text": "so rather than trying to move and getting a failure I literally do not have the capability to move the turtle",
    "start": "3638839",
    "end": "3644640"
  },
  {
    "text": "that is not one of the functions I can call so this is the key thing about capability based",
    "start": "3644640",
    "end": "3651640"
  },
  {
    "text": "programming and this is the code this is the a data structure basically which is the list functions the move function is",
    "start": "3651640",
    "end": "3657599"
  },
  {
    "text": "optional the turn function the pen up function the pen down function these are all uh always there um so when I make a",
    "start": "3657599",
    "end": "3664760"
  },
  {
    "text": "move I I pass in a distance and I get back the capabilities when I when I turn I pass in an angle and I get back the",
    "start": "3664760",
    "end": "3670640"
  },
  {
    "text": "capabilities and so on and so forth so from the caller's point of view",
    "start": "3670640",
    "end": "3675839"
  },
  {
    "text": "I start with uh some capabilities now what I have to do is test do is the move function even there",
    "start": "3675839",
    "end": "3682880"
  },
  {
    "text": "so if the move function is not there it's an error okay but let me try turning around and see if the move",
    "start": "3682880",
    "end": "3688520"
  },
  {
    "text": "function shows up again if the move function is there then okay I can use it I'm going to move um but now I've moved",
    "start": "3688520",
    "end": "3695760"
  },
  {
    "text": "I have to check I get a new set of capabilities and the move function might not be in the second set so I have to",
    "start": "3695760",
    "end": "3700880"
  },
  {
    "text": "test the move function again and if it's nothing then I can't do the second move and so on so the client has to do this",
    "start": "3700880",
    "end": "3707400"
  },
  {
    "text": "logic of checking whether the capability is there or not so let me do a quick demo and then I'll be done in literally",
    "start": "3707400",
    "end": "3713559"
  },
  {
    "text": "a minute so",
    "start": "3713559",
    "end": "3717760"
  },
  {
    "text": "so here's the initial t uh capabilities and you can see there's this data structure and here's the move function",
    "start": "3721319",
    "end": "3727400"
  },
  {
    "text": "so is available so um let me",
    "start": "3727400",
    "end": "3732520"
  },
  {
    "text": "move and I've moved and now I still have a move function available so let me move",
    "start": "3732520",
    "end": "3738359"
  },
  {
    "text": "again and now I've reached the edge of the canvas and I can't move anymore and so the move function is now null it's",
    "start": "3738359",
    "end": "3744680"
  },
  {
    "text": "not available for me to use but if I turn I get a new set of capabilities and",
    "start": "3744680",
    "end": "3752599"
  },
  {
    "text": "this time there is a move function so I can use the move function again and I can keep doing that so the",
    "start": "3752599",
    "end": "3760400"
  },
  {
    "text": "the with the capability thing the the capabilities I have kind of come and go based on whether I can do them or not so",
    "start": "3760400",
    "end": "3765720"
  },
  {
    "text": "that's kind of nice so what's the pros and cons of",
    "start": "3765720",
    "end": "3771799"
  },
  {
    "text": "this well the big the big advantage to me is the client doesn't have to duplicate the business logic um in many",
    "start": "3771799",
    "end": "3777319"
  },
  {
    "text": "situations you find that the client has to know what to do he has to understand what the server is actually doing in",
    "start": "3777319",
    "end": "3784000"
  },
  {
    "text": "this model the client all it does is follow what the server tells you to it says you can do this you can't do this",
    "start": "3784000",
    "end": "3789520"
  },
  {
    "text": "and it's like okay I'll just do that so that gives you some much better security so for example you can't accidentally",
    "start": "3789520",
    "end": "3795279"
  },
  {
    "text": "delete a customer because the delete capability is not given to you um you can also do clever things with",
    "start": "3795279",
    "end": "3801480"
  },
  {
    "text": "capability you can transform them because they're just functions you can if you want to say a business rle you",
    "start": "3801480",
    "end": "3806559"
  },
  {
    "text": "can only use the turtle between 9 and five on weekends or something um you can",
    "start": "3806559",
    "end": "3812039"
  },
  {
    "text": "just take one of those capabilities and wrap it up in another function uh and that function you know adds that extra",
    "start": "3812039",
    "end": "3818279"
  },
  {
    "text": "constraint that you can only use at a certain time so capabilities are great if you're doing complex business rules",
    "start": "3818279",
    "end": "3823559"
  },
  {
    "text": "downsides really complex and the client has to handle this unavailable functionality which really it should be",
    "start": "3823559",
    "end": "3829760"
  },
  {
    "text": "doing anyway all right classic example of this is hyperx as the engine of",
    "start": "3829760",
    "end": "3834839"
  },
  {
    "text": "application state proper restful architecture is exactly this model you get bu a bunch of links and you follow",
    "start": "3834839",
    "end": "3841599"
  },
  {
    "text": "the links and if the Link's not there you can't do it and if the link is there you can do it um that's a really nice",
    "start": "3841599",
    "end": "3847240"
  },
  {
    "text": "model all right more on this I haven't talk on this at uh cap slap on my",
    "start": "3847240",
    "end": "3852599"
  },
  {
    "text": "website and that is it so thank you very much um say the slides will be at the",
    "start": "3852599",
    "end": "3859599"
  },
  {
    "text": "slash Turtle directory if you need F Consulting contact us at F works if you",
    "start": "3859599",
    "end": "3864799"
  },
  {
    "text": "want to know more about F including instructions on how to download and install it go to f.org so thank you very",
    "start": "3864799",
    "end": "3873740"
  },
  {
    "text": "[Applause] much and I'll be available for questions",
    "start": "3873740",
    "end": "3880279"
  },
  {
    "text": "if you want",
    "start": "3880279",
    "end": "3883319"
  }
]