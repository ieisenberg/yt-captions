[
  {
    "text": "welcome everyone has everyone had a good conference so far",
    "start": "5120",
    "end": "12179"
  },
  {
    "text": "so what I'd like you to do this is my favorite Conference of all time I love coming to Oslo I love NDC and I think",
    "start": "12179",
    "end": "19680"
  },
  {
    "text": "that the organizers deserve a big round of applause cheer as much as you can",
    "start": "19680",
    "end": "25880"
  },
  {
    "text": "awesome I truly do love all the conversations we have in the hallways the discussions we",
    "start": "28199",
    "end": "34860"
  },
  {
    "text": "have around programming languages and everything that we can learn from each other so for the next hour we're going",
    "start": "34860",
    "end": "40200"
  },
  {
    "text": "to be talking about what's new in c-sharp how this programming language has changed and the language features",
    "start": "40200",
    "end": "46140"
  },
  {
    "text": "that have been introduced in c-sharp which changed the way that we try to express ourselves",
    "start": "46140",
    "end": "51899"
  },
  {
    "text": "and I do bet that if I get invited back next year this talk will be titled what",
    "start": "51899",
    "end": "57600"
  },
  {
    "text": "used to be C sharp and what's now F sharp and you'll soon see why there's quite a",
    "start": "57600",
    "end": "63000"
  },
  {
    "text": "lot of influences in c-sharp coming from functional programming languages I'm Phillip beckberg I've been here",
    "start": "63000",
    "end": "68640"
  },
  {
    "text": "quite a few times I've got some courses on plural side covering mostly c-sharp so if you like my stuff check that out",
    "start": "68640",
    "end": "75479"
  },
  {
    "text": "as well and I'm always available for questions send me a DM on Twitter talk to me about programming languages or",
    "start": "75479",
    "end": "82080"
  },
  {
    "text": "just life in general I'm always available with that being said we're going to hear",
    "start": "82080",
    "end": "87420"
  },
  {
    "text": "we're here to talk about c-sharp and how this programming language that we all hopefully love",
    "start": "87420",
    "end": "93600"
  },
  {
    "text": "we want to know how this has changed now there are quite some features in c-sharp",
    "start": "93600",
    "end": "98700"
  },
  {
    "text": "that have over the years changed how we express ourselves fundamentally changed",
    "start": "98700",
    "end": "103740"
  },
  {
    "text": "the way that we architect our applications language features such as generics being",
    "start": "103740",
    "end": "109380"
  },
  {
    "text": "able to use lambdas being able to use Link asynchronous programming using async and a weight but not every version",
    "start": "109380",
    "end": "116280"
  },
  {
    "text": "of c-sharp introduces those kind of groundbreaking features but there are some changes from c-sharp",
    "start": "116280",
    "end": "123479"
  },
  {
    "text": "eight and onwards that do change this as well and the reason that the dust or",
    "start": "123479",
    "end": "129420"
  },
  {
    "text": "it's still possible to add things to a programming language I mean c-sharp has been around for a very long time",
    "start": "129420",
    "end": "135720"
  },
  {
    "text": "the reason they were still able to add language features is because it's now open source everyone can participate and",
    "start": "135720",
    "end": "143099"
  },
  {
    "text": "you know add their comments to programming language designs talk about what do we want in c-sharp essay",
    "start": "143099",
    "end": "150239"
  },
  {
    "text": "programming language we can participate in these discussions or if you really like programming",
    "start": "150239",
    "end": "155819"
  },
  {
    "text": "languages you can even participate in sending pull requests so they've got the the compilers as an",
    "start": "155819",
    "end": "161280"
  },
  {
    "text": "open source project and what I think is most important about this is that I can go ahead and look at",
    "start": "161280",
    "end": "166920"
  },
  {
    "text": "the ideas Behind These features what's the reasoning behind adding more things in c-sharp right I think that's valuable",
    "start": "166920",
    "end": "175440"
  },
  {
    "text": "maybe it's just me that like to spend time on GitHub reading about language stuff but I do really like c-sharp and",
    "start": "175440",
    "end": "181500"
  },
  {
    "text": "with that being said C sharp 7 introduced some groundbreaking features but at the time it wasn't really",
    "start": "181500",
    "end": "187980"
  },
  {
    "text": "something that you'd use because they waited until c-sharp 8 to",
    "start": "187980",
    "end": "193319"
  },
  {
    "text": "fully make use of these language features so I promise that we're going to talk about c-sharp 8 9 10 and",
    "start": "193319",
    "end": "199440"
  },
  {
    "text": "possibly even what's coming in C sharp 11. but before that there's two language features from c-sharp 7 that I think are",
    "start": "199440",
    "end": "206400"
  },
  {
    "text": "important to understand before we go on to talk about c-sharp 8. now",
    "start": "206400",
    "end": "212459"
  },
  {
    "text": "C sharp 7 is the first and only version of the language where they did Point releases I believe this is a proof of",
    "start": "212459",
    "end": "218760"
  },
  {
    "text": "concept that since the compilers are open source they can release this independently of visual studio and",
    "start": "218760",
    "end": "224819"
  },
  {
    "text": "release it as an updated nuget package for example they did some changes in c-sharp 7.1 7.2 7.3 just to prove a",
    "start": "224819",
    "end": "232799"
  },
  {
    "text": "point but what they did introduce is something called tuples or tuples depending on how",
    "start": "232799",
    "end": "238560"
  },
  {
    "text": "you like to pronounce them we're talking about the same thing but this has always been available in.net this here is tuples in older",
    "start": "238560",
    "end": "246000"
  },
  {
    "text": "versions of c-sharp or in.net rather but this here becomes a little bit",
    "start": "246000",
    "end": "251040"
  },
  {
    "text": "tricky to work with this container of multiple different values it's quite useless if you have to access item one",
    "start": "251040",
    "end": "257519"
  },
  {
    "text": "item two item three it would be better if this was like in every other programming language a first class",
    "start": "257519",
    "end": "264060"
  },
  {
    "text": "citizen so what they did was that they introduced this as a first-class citizen",
    "start": "264060",
    "end": "269340"
  },
  {
    "text": "we can now Define a group of elements that belong together very much like a",
    "start": "269340",
    "end": "275100"
  },
  {
    "text": "class or a struct but it's more condensed like it's created in place instead of having to create a new file",
    "start": "275100",
    "end": "282900"
  },
  {
    "text": "I guess it's all about saving characters right this can be used to return multiple values from a method or accept",
    "start": "282900",
    "end": "289919"
  },
  {
    "text": "a parameter with multiple values but why would you use this in C sharp",
    "start": "289919",
    "end": "295199"
  },
  {
    "text": "seven there are some use cases but where it's really powerful is when we in produce pattern matching and that's one",
    "start": "295199",
    "end": "301800"
  },
  {
    "text": "of the last things we talk about in this talk so just keep this with you for now topples is a groundbreaking feature in",
    "start": "301800",
    "end": "308580"
  },
  {
    "text": "the language that has been around for quite some time in other places together with this in c-sharp 7 they",
    "start": "308580",
    "end": "315660"
  },
  {
    "text": "also introduced a way to look at objects differently imagine that we add this very magical",
    "start": "315660",
    "end": "322440"
  },
  {
    "text": "named method called deconstruct don't confuse this with a deconstructor or a",
    "start": "322440",
    "end": "328259"
  },
  {
    "text": "destroyer or a whatever it's called another programming languages it doesn't have anything to do with the construct",
    "start": "328259",
    "end": "333660"
  },
  {
    "text": "or Garbage Collection or anything like that what this here is doing is that it introduces a way for me to pull an",
    "start": "333660",
    "end": "339900"
  },
  {
    "text": "object apart and treat it and assign it to different variables a little bit differently from",
    "start": "339900",
    "end": "345960"
  },
  {
    "text": "what you were used to if I add this to any type that has these properties that",
    "start": "345960",
    "end": "351060"
  },
  {
    "text": "I can set on my now out parameters I'll be able to to do this I can say take my instance of",
    "start": "351060",
    "end": "358560"
  },
  {
    "text": "a person for example and now initialize two local variables using that method",
    "start": "358560",
    "end": "365580"
  },
  {
    "text": "quite great but still it's a feature that alone like this here I probably wouldn't find a lot of use case for this",
    "start": "365580",
    "end": "373620"
  },
  {
    "text": "where again this becomes useful is with pattern matching and we'll see that soon as well",
    "start": "373620",
    "end": "379800"
  },
  {
    "text": "so why this is interesting is because they've introduced features in older versions of c-sharp if they're going to",
    "start": "379800",
    "end": "385740"
  },
  {
    "text": "keep doing this adding small features that might not make sense now but in a few versions from now it's going to make",
    "start": "385740",
    "end": "392460"
  },
  {
    "text": "a lot of sense because you have the entire picture now this here comes together like tuples and",
    "start": "392460",
    "end": "399120"
  },
  {
    "text": "deconstructions you can take a tuple that you have in in the right hand side here and you can deconstruct that or do",
    "start": "399120",
    "end": "405060"
  },
  {
    "text": "a tuple assignment and this will now belong in a completely different type of representation",
    "start": "405060",
    "end": "410759"
  },
  {
    "text": "it's useful but where it's even more useful is if I can can take an instance of that class",
    "start": "410759",
    "end": "417060"
  },
  {
    "text": "and say hey how about you deconstruct this and assign this to two new local variables",
    "start": "417060",
    "end": "423660"
  },
  {
    "text": "it's pretty powerful and it's all built on top this concept called a deconstruct you can have as many of these as",
    "start": "423660",
    "end": "429300"
  },
  {
    "text": "possible and if you're using record types which is also something we're going to look at all of these are",
    "start": "429300",
    "end": "434759"
  },
  {
    "text": "auto-generated so C sharp seven that's years ago right",
    "start": "434759",
    "end": "440039"
  },
  {
    "text": "this is a feature that's been around for five plus years but it was only until c-sharp eight and",
    "start": "440039",
    "end": "446520"
  },
  {
    "text": "in the year after that or a couple of years after that that this became useful so in C sharp eight it feels like with",
    "start": "446520",
    "end": "453780"
  },
  {
    "text": "the eighth iteration of the language shouldn't C sharp be completed well if it was I probably wouldn't be standing",
    "start": "453780",
    "end": "460259"
  },
  {
    "text": "here talking about all the next versions but there's still a lot of things that we can get into the language which will",
    "start": "460259",
    "end": "466020"
  },
  {
    "text": "help us express ourselves a little bit differently saving characters making our code more",
    "start": "466020",
    "end": "471900"
  },
  {
    "text": "easier to read and ultimately making it easier to maintain we've covered quite a few of these here",
    "start": "471900",
    "end": "477780"
  },
  {
    "text": "but C sharp 8 introduces something known as read-only members it introduces a concept of default interface methods or",
    "start": "477780",
    "end": "484919"
  },
  {
    "text": "default interface implementations depending on when you read the documentation last",
    "start": "484919",
    "end": "490500"
  },
  {
    "text": "kind of tend to change names a little bit then they introduce some pattern matching enhancements so c-sharp 7",
    "start": "490500",
    "end": "497099"
  },
  {
    "text": "actually introduced a first version of pattern matching I haven't covered that yet because again that's something that",
    "start": "497099",
    "end": "503099"
  },
  {
    "text": "wasn't really useful until c-sharp 8. it has a few more really great features",
    "start": "503099",
    "end": "508500"
  },
  {
    "text": "we're not going to be able to cover all of these but then another groundbreaking feature that we're also going to spend some time talking about it's nullable",
    "start": "508500",
    "end": "515279"
  },
  {
    "text": "reference types a new way of looking at reference types in our applications being able to spot when something could",
    "start": "515279",
    "end": "521399"
  },
  {
    "text": "blow up before it actually does sounds magical and hopefully we'll all go away",
    "start": "521399",
    "end": "526440"
  },
  {
    "text": "from this and use that in our applications asynchronous streams a way for us to",
    "start": "526440",
    "end": "531959"
  },
  {
    "text": "work with the synchronous data secret disposables ranges and indices no equalizing assignments there's quite a",
    "start": "531959",
    "end": "537480"
  },
  {
    "text": "lot inside c-sharp 8. right to use this we'd have to use a",
    "start": "537480",
    "end": "544680"
  },
  {
    "text": "very specific version of.net and this is where it becomes a little bit confusing because we won't have time to talk about",
    "start": "544680",
    "end": "550860"
  },
  {
    "text": "the difference between dot net framework.net core the new.net and everything that's going on with the naming and all of that",
    "start": "550860",
    "end": "557399"
  },
  {
    "text": "let's just say use the latest version of.net and you'll be fine you can use all of the latest and greatest of",
    "start": "557399",
    "end": "562800"
  },
  {
    "text": "c-sharp as well but as you see here c-sharp relates to the version of a",
    "start": "562800",
    "end": "568920"
  },
  {
    "text": "specific runtime and that's because c-sharp 8 for example was the first language version in a very long time but",
    "start": "568920",
    "end": "576120"
  },
  {
    "text": "depended on runtime changes so they had to ship this as a part of the the process of shipping the the runtime",
    "start": "576120",
    "end": "582360"
  },
  {
    "text": "and.net as well and the same goes for some new features in c-sharp and Dot net as well",
    "start": "582360",
    "end": "588000"
  },
  {
    "text": "you probably want to jump on the latest LTS version the long-term support version I've been talking about c-sharp",
    "start": "588000",
    "end": "594899"
  },
  {
    "text": "8 and some of these older versions for a few years but it's only now that this is first getting traction because now",
    "start": "594899",
    "end": "601440"
  },
  {
    "text": "people are starting to use.net 6 which is going to be supported for quite some time going forward until the next LTS",
    "start": "601440",
    "end": "608399"
  },
  {
    "text": "version comes around so if you're working in an older project you're probably thinking well I've got a",
    "start": "608399",
    "end": "613800"
  },
  {
    "text": "winforms application or a WPF application that's running on framework I want to update this to use net core or",
    "start": "613800",
    "end": "620640"
  },
  {
    "text": "the latest.net the great part is that we can actually do this now and we've been able to do this since.net.net core 3.1",
    "start": "620640",
    "end": "629160"
  },
  {
    "text": "so you can create a WPF application and you'd imagine that you just toggle a switch and it just works with the latest",
    "start": "629160",
    "end": "634980"
  },
  {
    "text": "version but that's not really the case you'd have to bring all your files over and so forth but that would let you",
    "start": "634980",
    "end": "641220"
  },
  {
    "text": "leverage all the latest versions or the latest language features of c-sharp so if you have Visual Studio 2022 you'll",
    "start": "641220",
    "end": "648600"
  },
  {
    "text": "be able to use the latest in c-sharp 10. and in a couple of weeks I believe.net 7",
    "start": "648600",
    "end": "654779"
  },
  {
    "text": "is is just around the corner and that will also come with a new version of c-sharp but it'll take some time before that has",
    "start": "654779",
    "end": "661380"
  },
  {
    "text": "some traction because again that's not a long time support version to be writing libraries that Target",
    "start": "661380",
    "end": "667620"
  },
  {
    "text": "different types of of runtimes and you try to use a language feature that's not",
    "start": "667620",
    "end": "672839"
  },
  {
    "text": "supported c-sharp 8 introduces a language feature called default interface methods this is only available",
    "start": "672839",
    "end": "678959"
  },
  {
    "text": "if you're targeting.net core 3.1 and later so then you'll get a compiler",
    "start": "678959",
    "end": "684720"
  },
  {
    "text": "error saying that well the runtime you're currently targeting doesn't support this feature but what's interesting here is",
    "start": "684720",
    "end": "691320"
  },
  {
    "text": "that we can use language features even if the runtime is unsupported because a",
    "start": "691320",
    "end": "696480"
  },
  {
    "text": "lot of these language features it's just compiler Magic if it's capable of compiling the code to",
    "start": "696480",
    "end": "701820"
  },
  {
    "text": "something that an older runtime understands you'll be totally fine and the compiler will do its best to tell",
    "start": "701820",
    "end": "707519"
  },
  {
    "text": "you if you're doing something that you shouldn't speaking of this unsupported default",
    "start": "707519",
    "end": "713160"
  },
  {
    "text": "interface implementations or methods whatever you want to call it same thing this is something that tends to divide",
    "start": "713160",
    "end": "721260"
  },
  {
    "text": "people into two different groups personally I'm not very fond of this feature and a lot of other developers",
    "start": "721260",
    "end": "727920"
  },
  {
    "text": "really hate it so either you hate it or you simply don't like it that much so I have no clue why they decided to",
    "start": "727920",
    "end": "735540"
  },
  {
    "text": "add this to the language so default interface methods imagine that I have this interface here super",
    "start": "735540",
    "end": "740579"
  },
  {
    "text": "simple I I provide this through nuget or or GitHub or whatever this is an open",
    "start": "740579",
    "end": "745740"
  },
  {
    "text": "source project super popular now I want to update this with a new version that's generic",
    "start": "745740",
    "end": "753000"
  },
  {
    "text": "now I can add a method body to my interface which is quite odd because this means",
    "start": "753000",
    "end": "759899"
  },
  {
    "text": "that my interface cannot contain implementation details can contain logic that it shouldn't so it looks like a",
    "start": "759899",
    "end": "766740"
  },
  {
    "text": "class the only difference is that it doesn't have an instance but I can still have a lot of code here",
    "start": "766740",
    "end": "772500"
  },
  {
    "text": "so it could end up in a situation where it feels like it's multiple inheritance",
    "start": "772500",
    "end": "777899"
  },
  {
    "text": "and a little gotcha here is that if I have an interface that has this default in interface method",
    "start": "777899",
    "end": "785880"
  },
  {
    "text": "and I try to automatically implement this interface it's not going to generate that method T get of t",
    "start": "785880",
    "end": "793620"
  },
  {
    "text": "it's just not going to tell me that it even exists so the tooling around this is also not",
    "start": "793620",
    "end": "799500"
  },
  {
    "text": "perfect it's a bit to ask from that so with that being said is anyone here",
    "start": "799500",
    "end": "805139"
  },
  {
    "text": "going to use this or have already used it a couple of you yes",
    "start": "805139",
    "end": "810540"
  },
  {
    "text": "static so the good thing about this is for Library developers if you have a very popular",
    "start": "810540",
    "end": "817500"
  },
  {
    "text": "Library out there I understand why you would want to use this because that means that you could",
    "start": "817500",
    "end": "822839"
  },
  {
    "text": "update your library and have a little bit of a documentation that everyone should read the documentations for every",
    "start": "822839",
    "end": "829079"
  },
  {
    "text": "library that you use and then when you update that package you have the option to override or",
    "start": "829079",
    "end": "834899"
  },
  {
    "text": "implement this method you won't break anyone because if you break people's code by just supplying a new nuget version",
    "start": "834899",
    "end": "841500"
  },
  {
    "text": "people are going to get pretty upset so I did promise that there are a few",
    "start": "841500",
    "end": "846600"
  },
  {
    "text": "things that are I'm not just going to say groundbreaking but there are things in the programming",
    "start": "846600",
    "end": "851820"
  },
  {
    "text": "language that architecturally change how we look at things and it helps us drive our development in in a direction that",
    "start": "851820",
    "end": "859440"
  },
  {
    "text": "makes the applications better things like generics and asynchronous programming and all of that that change",
    "start": "859440",
    "end": "864839"
  },
  {
    "text": "exactly how we interact with with libraries in a better way nullable reference types is one of those things",
    "start": "864839",
    "end": "871440"
  },
  {
    "text": "it's one of those things that in the future we're going to be asking ourselves why didn't we have this from",
    "start": "871440",
    "end": "877680"
  },
  {
    "text": "the start or or an alternative of this from the start you could ask yourself why did c-sharp",
    "start": "877680",
    "end": "884100"
  },
  {
    "text": "allow nulls from the first place back in the day that was what every programming language did if you design a",
    "start": "884100",
    "end": "891120"
  },
  {
    "text": "completely new programming language or you start off from something and you create kotlin or Swift you make it hard",
    "start": "891120",
    "end": "896399"
  },
  {
    "text": "for developers to use nulls because they're going to end up with something like this",
    "start": "896399",
    "end": "902459"
  },
  {
    "text": "if you haven't gotten this yet either you just started development or you're lying",
    "start": "902459",
    "end": "908519"
  },
  {
    "text": "because you will end up having an all-reference exception now nullable reference types is a way to",
    "start": "908519",
    "end": "914220"
  },
  {
    "text": "work around the problem it's a way to work around the fact that we have nulls in C sharp the best would have been to",
    "start": "914220",
    "end": "921120"
  },
  {
    "text": "go back in time and say hey you're not allowed to use nulls but that would probably have other architectural changes and differences as well",
    "start": "921120",
    "end": "928500"
  },
  {
    "text": "so there's one there's a few fundamental problems with nulls right the biggest",
    "start": "928500",
    "end": "933540"
  },
  {
    "text": "problem with nullability is that it promotes that we have null checks all over the place",
    "start": "933540",
    "end": "939000"
  },
  {
    "text": "it's going to clutter up the code there's unnecessary code how about if I know that there's never going to be a",
    "start": "939000",
    "end": "945180"
  },
  {
    "text": "null reference exception I always feel like that but it blows up anyways but let's say we're sure this is never going",
    "start": "945180",
    "end": "952199"
  },
  {
    "text": "to throw in exceptions it would be quite unnecessary to clutter the code with more null checks",
    "start": "952199",
    "end": "959040"
  },
  {
    "text": "and then I guess another big problem is what does actually returning null mean if I have a a repository",
    "start": "959040",
    "end": "967320"
  },
  {
    "text": "I'm asking for a user from the database it returns null did that mean the database operation failed did the user",
    "start": "967320",
    "end": "973800"
  },
  {
    "text": "not exist or was there some other problem so returning knowledge is a really problem because it's ambiguous what we",
    "start": "973800",
    "end": "980820"
  },
  {
    "text": "mean when we do that and it also encourages mutability that means we can change the object if",
    "start": "980820",
    "end": "986699"
  },
  {
    "text": "something's null we are expecting that this is going to be set later on which is problematic in multi-threaded",
    "start": "986699",
    "end": "994019"
  },
  {
    "text": "applications it would be better if we just couldn't do anything everything was just read only once you've created an instance",
    "start": "994019",
    "end": "1000320"
  },
  {
    "text": "it's there you can't change it in the real world that that doesn't happen",
    "start": "1000320",
    "end": "1005600"
  },
  {
    "text": "so I tend to end up writing code like this and I know most of you are probably thinking well you can write this much",
    "start": "1005600",
    "end": "1011779"
  },
  {
    "text": "more pretty with all the language features of C sharp sure enough I can but if I can trust that this isn't the",
    "start": "1011779",
    "end": "1018500"
  },
  {
    "text": "null in this situation wouldn't it be better if I could trust a compiler to tell me if this was an actual or",
    "start": "1018500",
    "end": "1025880"
  },
  {
    "text": "potential problem we can do that by indicating to the compiler that we enable this thing",
    "start": "1025880",
    "end": "1032480"
  },
  {
    "text": "called nullable reference types what this does is that it completely changes how the compiler looks at",
    "start": "1032480",
    "end": "1039199"
  },
  {
    "text": "strings objects everything that's a reference type by default it's going to change so that",
    "start": "1039199",
    "end": "1045980"
  },
  {
    "text": "nothing should be null it's not enforcing it there's not going to be any problems if you set something",
    "start": "1045980",
    "end": "1051980"
  },
  {
    "text": "to know except it's going to tell you that hey this thing here could potentially be null",
    "start": "1051980",
    "end": "1058460"
  },
  {
    "text": "which is great this here is pretty obvious that it's null I even I can see that",
    "start": "1058460",
    "end": "1064520"
  },
  {
    "text": "so here it would be great to have a null check or a null conditional operator but of course this is a very simple",
    "start": "1064520",
    "end": "1070940"
  },
  {
    "text": "example there's much more complex situations where the compiler can be much smarter than I can",
    "start": "1070940",
    "end": "1077480"
  },
  {
    "text": "there's something called null State static analysis which is really hard to say a couple of times right after each",
    "start": "1077480",
    "end": "1083600"
  },
  {
    "text": "other this thing what it's doing is that it's trying to track the null state of everything",
    "start": "1083600",
    "end": "1089360"
  },
  {
    "text": "so if I pass name here into a method and it promises that it checks for a null we",
    "start": "1089360",
    "end": "1095539"
  },
  {
    "text": "can indicate to the compiler that we've performed in null check and this error would have gone away",
    "start": "1095539",
    "end": "1101059"
  },
  {
    "text": "which would have been awesome and look at an example of that student initial Studio now",
    "start": "1101059",
    "end": "1106340"
  },
  {
    "text": "what you can do with this here it's just going to provide us with a warning which is good but honestly if we have a",
    "start": "1106340",
    "end": "1113000"
  },
  {
    "text": "big project many of you can maybe work in really large Solutions so if you go ahead and turn this on you'll have like",
    "start": "1113000",
    "end": "1119840"
  },
  {
    "text": "a million warnings and if you're like me like oh ignore someone else would fix that or we'll add",
    "start": "1119840",
    "end": "1125360"
  },
  {
    "text": "a to-do but what you can do you can treat warnings as errors",
    "start": "1125360",
    "end": "1131299"
  },
  {
    "text": "so what I suggest you go back to work you enable the nullable reference types you turn on treat warnings as errors so",
    "start": "1131299",
    "end": "1138140"
  },
  {
    "text": "that every time you build there's going to be a compiler error you commit that into Source control and then you leave leave work for a few days",
    "start": "1138140",
    "end": "1145760"
  },
  {
    "text": "that's going to be super popular probably don't want to do that so let's have a look at what this",
    "start": "1145760",
    "end": "1151760"
  },
  {
    "text": "feature actually can do and how it works in a real application this here is a very simple console",
    "start": "1151760",
    "end": "1157760"
  },
  {
    "text": "application I have a few classes here there's no errors found everything is supposed to be working",
    "start": "1157760",
    "end": "1164660"
  },
  {
    "text": "perfectly fine I know that it doesn't so by looking at this code here it looks fine looks like",
    "start": "1164660",
    "end": "1170960"
  },
  {
    "text": "the data classes or the the data models that we normally write but there are a few problems in this",
    "start": "1170960",
    "end": "1177080"
  },
  {
    "text": "application and if I enable this language feature I could do it in two ways I can use a compiler directive",
    "start": "1177080",
    "end": "1183919"
  },
  {
    "text": "to enable this which is now going to show me a few warnings here but",
    "start": "1183919",
    "end": "1189140"
  },
  {
    "text": "I can also go into this here's project file or do it from the project properties and I'm going to be hurting",
    "start": "1189140",
    "end": "1195559"
  },
  {
    "text": "myself and enabling both nullable reference types the compiler will now look at my types as these shouldn't be",
    "start": "1195559",
    "end": "1202220"
  },
  {
    "text": "null and then I'm also going to get compiler errors for every time it finds a warning",
    "start": "1202220",
    "end": "1209240"
  },
  {
    "text": "now if I save that and just wait for a little while let me do full screen here",
    "start": "1209240",
    "end": "1216160"
  },
  {
    "text": "here we go now we have a couple of compiler errors right and that's totally fine in this",
    "start": "1216440",
    "end": "1222260"
  },
  {
    "text": "very small application it makes sense it's easy for me to fix these problems but how would we go by fixing this issue",
    "start": "1222260",
    "end": "1230900"
  },
  {
    "text": "there are a couple of different alternatives we can introduce a Constructor",
    "start": "1230900",
    "end": "1236720"
  },
  {
    "text": "if I introduce an empty Constructor it's going to move that warning or error to",
    "start": "1236720",
    "end": "1242120"
  },
  {
    "text": "the Constructor because the compiler deems that the Constructor should be in charge of actually constructing your",
    "start": "1242120",
    "end": "1248360"
  },
  {
    "text": "object and accepting the correct parameters so what I can do here is I can say well give me the first name",
    "start": "1248360",
    "end": "1256120"
  },
  {
    "text": "and then give me this ring last name and I could initialize this and it would all not that one first name is equal to",
    "start": "1256280",
    "end": "1263539"
  },
  {
    "text": "whatever I passed into this method and let's do this as well now there's no more warnings but the problem here is if",
    "start": "1263539",
    "end": "1270620"
  },
  {
    "text": "we go back to work and do this we're going to break everyone that's using this class they now have to pass these",
    "start": "1270620",
    "end": "1277160"
  },
  {
    "text": "parameters into the Constructor so another alternative",
    "start": "1277160",
    "end": "1283520"
  },
  {
    "text": "would be to um to say that I I actually do support",
    "start": "1283520",
    "end": "1288860"
  },
  {
    "text": "these to be null for now I don't want to ignore that they could be null but I do want to say that I",
    "start": "1288860",
    "end": "1295220"
  },
  {
    "text": "allow you to be null so that whoever else uses this would be notified I can do that by adding a",
    "start": "1295220",
    "end": "1302179"
  },
  {
    "text": "question mark and now I'm saying string can be nullable which was the previous default",
    "start": "1302179",
    "end": "1308600"
  },
  {
    "text": "Behavior and we'll say about this as well is that in C sharp six and onwards this feature",
    "start": "1308600",
    "end": "1314539"
  },
  {
    "text": "is turned on by default so nothing should be null it will complain all over the place",
    "start": "1314539",
    "end": "1320840"
  },
  {
    "text": "Okay so in this person class it's the same thing it uses this details class and honestly",
    "start": "1320840",
    "end": "1327440"
  },
  {
    "text": "this isn't where the null reference exception would occur the null reference exception would occur somewhere else where this here is being used",
    "start": "1327440",
    "end": "1334880"
  },
  {
    "text": "what I really want this class to be doing is two things one when you create",
    "start": "1334880",
    "end": "1340520"
  },
  {
    "text": "an instance I'd really like to require that you set this to an instance we're getting ahead",
    "start": "1340520",
    "end": "1346640"
  },
  {
    "text": "of ourselves here but there's a new keyword in C sharp 11. called required",
    "start": "1346640",
    "end": "1353080"
  },
  {
    "text": "if you add that to your property it would require you to set this to an instance in the object",
    "start": "1353840",
    "end": "1360020"
  },
  {
    "text": "initializer this doesn't require you to add a Constructor but it kind of works around",
    "start": "1360020",
    "end": "1365659"
  },
  {
    "text": "the fact that you don't want to introduce the Constructor and this then can be used in conjunction",
    "start": "1365659",
    "end": "1371360"
  },
  {
    "text": "with this init keyword which is an init only Setter it means that you're only allowed to set this once",
    "start": "1371360",
    "end": "1377179"
  },
  {
    "text": "so after you've set this to an instance you can't change it it will be immutable after that",
    "start": "1377179",
    "end": "1382820"
  },
  {
    "text": "all right back to the nullable reference types person and detail or person the details of the person and all the",
    "start": "1382820",
    "end": "1389240"
  },
  {
    "text": "details inside of it they can all be null and that's fine but now we'll notice that I have a",
    "start": "1389240",
    "end": "1394280"
  },
  {
    "text": "couple of more problems and the compiler is now smart enough",
    "start": "1394280",
    "end": "1399980"
  },
  {
    "text": "to figure out that inside this method which accepts an innumerable of person",
    "start": "1399980",
    "end": "1405559"
  },
  {
    "text": "in a collection of people so to say I know that this here is is going to be an instance",
    "start": "1405559",
    "end": "1411440"
  },
  {
    "text": "because otherwise I would have to mark this as being nullable so just automatically checked that this wouldn't",
    "start": "1411440",
    "end": "1418159"
  },
  {
    "text": "be null notice that I got a problem here saying that this is potentially null",
    "start": "1418159",
    "end": "1423799"
  },
  {
    "text": "that's perfect now of course I could add a null conditional operator",
    "start": "1423799",
    "end": "1430039"
  },
  {
    "text": "but then again I end up cluttering my code a little bit in some places we have to do this",
    "start": "1430039",
    "end": "1435500"
  },
  {
    "text": "but this here was actually finding a null reference exception because if I ran this application and hadn't set an",
    "start": "1435500",
    "end": "1441380"
  },
  {
    "text": "instance this would blow up but let's say that I know I know better than the compiler",
    "start": "1441380",
    "end": "1448580"
  },
  {
    "text": "let's say check for no I don't have this method it doesn't really matter we can do person.details let's say that",
    "start": "1448580",
    "end": "1456080"
  },
  {
    "text": "I've checked that this is null and now therefore I know I can use an exclamation mark it's also known as a",
    "start": "1456080",
    "end": "1462500"
  },
  {
    "text": "damage operator because damn it I know better than you",
    "start": "1462500",
    "end": "1467559"
  },
  {
    "text": "you most of the case you don't but it's a way for us to ignore that we",
    "start": "1467659",
    "end": "1473059"
  },
  {
    "text": "got an error but let me get rid of that and show you another alternative approach to this and",
    "start": "1473059",
    "end": "1478520"
  },
  {
    "text": "we'll get back to the damage operator soon so either I could check that with the null conditional operator or it",
    "start": "1478520",
    "end": "1485120"
  },
  {
    "text": "tracks the null State remember I said that earlier so I could say if the person's details",
    "start": "1485120",
    "end": "1491360"
  },
  {
    "text": "is not now we can go ahead and do this right",
    "start": "1491360",
    "end": "1498020"
  },
  {
    "text": "and then it just knows that I've checked this already it knows that inside this block it's not going to be",
    "start": "1498020",
    "end": "1503600"
  },
  {
    "text": "null at all but it doesn't have to be in the same if statement if we invert this",
    "start": "1503600",
    "end": "1509840"
  },
  {
    "text": "and say if it is null it's going to continue to the next one",
    "start": "1509840",
    "end": "1516700"
  },
  {
    "text": "there we go and it just knows so we have some options here which is really great",
    "start": "1516980",
    "end": "1522740"
  },
  {
    "text": "we can now track down potential null reference exceptions and this here would have blown up but there's one more error",
    "start": "1522740",
    "end": "1528320"
  },
  {
    "text": "inside this application where it in fact is causing a bigger issue and I know",
    "start": "1528320",
    "end": "1533659"
  },
  {
    "text": "that it's in this method here that's telling me I should return an instance of",
    "start": "1533659",
    "end": "1538940"
  },
  {
    "text": "something that's an innumerable of P person but this here is returning null",
    "start": "1538940",
    "end": "1544100"
  },
  {
    "text": "a little bit problematic again I can promise that I've not checked null and the error disappeared",
    "start": "1544100",
    "end": "1551419"
  },
  {
    "text": "this is why you don't know better than the compiler things will blow up",
    "start": "1551419",
    "end": "1556580"
  },
  {
    "text": "there's no problem doing this other than it looks odd there's not going to be any",
    "start": "1556580",
    "end": "1561860"
  },
  {
    "text": "compiler errors it's not going to blow up just because you do this but it's yeah it just illustrates why it's",
    "start": "1561860",
    "end": "1567980"
  },
  {
    "text": "problematic so instead what we want to do we want to return an actual instance of",
    "start": "1567980",
    "end": "1574520"
  },
  {
    "text": "a person inside a list and now I'm going to return a new instance using yield because if I do",
    "start": "1574520",
    "end": "1581000"
  },
  {
    "text": "yield return that's going to allow me to not have to create a temporary list it's going to allow me to then iterate",
    "start": "1581000",
    "end": "1587120"
  },
  {
    "text": "through this innumerable and I can just say return a new thing this is a calling Target type new",
    "start": "1587120",
    "end": "1593299"
  },
  {
    "text": "expression and what this here is doing this part here is actually creating a new person because it figures out what I want to",
    "start": "1593299",
    "end": "1600080"
  },
  {
    "text": "return here yield return produces an enumerator",
    "start": "1600080",
    "end": "1605179"
  },
  {
    "text": "and I can say I want to create some new details as well",
    "start": "1605179",
    "end": "1609940"
  },
  {
    "text": "It all becomes very beautiful and sometimes hard to understand and read",
    "start": "1610220",
    "end": "1616480"
  },
  {
    "text": "and I can type here we go right and now I've fixed all the null reference exceptions inside this",
    "start": "1616520",
    "end": "1622100"
  },
  {
    "text": "application this was a very simple one but at least it let me track down what could potentially be causing some really",
    "start": "1622100",
    "end": "1629059"
  },
  {
    "text": "annoying issues in this application this is the first thing that I see a lot",
    "start": "1629059",
    "end": "1634700"
  },
  {
    "text": "of developers turn on in solutions that either they start from scratch or if they go come into a new project turn it",
    "start": "1634700",
    "end": "1641179"
  },
  {
    "text": "on figure out what could be potential in all learn the application learn the code base",
    "start": "1641179",
    "end": "1646279"
  },
  {
    "text": "but if you're new to a project don't turn on trade warnings as errors and check in the code",
    "start": "1646279",
    "end": "1651500"
  },
  {
    "text": "because you won't have a project anymore with that being said there's one more",
    "start": "1651500",
    "end": "1656659"
  },
  {
    "text": "feature so this drastically changed actually in my opinion it changes how we look at building our software because",
    "start": "1656659",
    "end": "1662000"
  },
  {
    "text": "now we are told by the compiler that things could be null we don't have to",
    "start": "1662000",
    "end": "1667760"
  },
  {
    "text": "clutter with if if actually let me show you this like back in the day when we when I",
    "start": "1667760",
    "end": "1674480"
  },
  {
    "text": "didn't have this feature I would Safeguard against everything right I would do if people is equal to null then",
    "start": "1674480",
    "end": "1680240"
  },
  {
    "text": "return and if you know you get the point right you'd have all these if statements",
    "start": "1680240",
    "end": "1685340"
  },
  {
    "text": "but if I know that whoever tries to send null into this method would get a compiler error or a",
    "start": "1685340",
    "end": "1692120"
  },
  {
    "text": "warning then I can trust that it's been null checked which is pretty cool",
    "start": "1692120",
    "end": "1698720"
  },
  {
    "text": "so it changes the way that we look at nulls and and building applications that uses reference types",
    "start": "1698720",
    "end": "1704000"
  },
  {
    "text": "a better alternative would of course always be to have a default class or a default instance of a class but that",
    "start": "1704000",
    "end": "1710240"
  },
  {
    "text": "changes the way that you think about your applications even further speaking of thinking differently let's",
    "start": "1710240",
    "end": "1716360"
  },
  {
    "text": "talk about asynchronous streams which is a concept introduced also in c-sharp 8 which again if you don't know anything",
    "start": "1716360",
    "end": "1723200"
  },
  {
    "text": "about async and await this is going to be very complex and very hard to understand but basically let's try to",
    "start": "1723200",
    "end": "1729440"
  },
  {
    "text": "make it simple let's say that I have this method here",
    "start": "1729440",
    "end": "1734539"
  },
  {
    "text": "I want to be able to stream data to someone that consumes this method that means that I can send them one item at a",
    "start": "1734539",
    "end": "1741860"
  },
  {
    "text": "time this here returns strings and this return type indicates what type",
    "start": "1741860",
    "end": "1748640"
  },
  {
    "text": "of data will be streamed back to whoever uses this method I can say that every time you call this method or every time",
    "start": "1748640",
    "end": "1754820"
  },
  {
    "text": "you use this it gives you a string back which is nice it's marked as async because it's going",
    "start": "1754820",
    "end": "1761299"
  },
  {
    "text": "to retrieve think asynchronously but we haven't introduced that part yet",
    "start": "1761299",
    "end": "1767059"
  },
  {
    "text": "now where all the magic happens is this yield thing I showed you this just now with the nullable reference types the",
    "start": "1767059",
    "end": "1773059"
  },
  {
    "text": "yield keyword has been around for a very long time it's a way to send data back to the for each Loop but in this case",
    "start": "1773059",
    "end": "1779600"
  },
  {
    "text": "the for each Loop is going to retrieve each element asynchronously so this here tells the iterator that",
    "start": "1779600",
    "end": "1786320"
  },
  {
    "text": "there's a new item to process and in this sample here I'm going to retrieve everything asynchronously from",
    "start": "1786320",
    "end": "1793159"
  },
  {
    "text": "the file system this line of code here can be written very differently and I've actually",
    "start": "1793159",
    "end": "1798380"
  },
  {
    "text": "written it a little bit differently in in vs code which we'll see in just a little moment",
    "start": "1798380",
    "end": "1803840"
  },
  {
    "text": "so what happens here is that it reads a file or it starts or opens a file on disk",
    "start": "1803840",
    "end": "1809840"
  },
  {
    "text": "using this using declaration that you see here at the top and then it's reading a line at a time",
    "start": "1809840",
    "end": "1815480"
  },
  {
    "text": "this means that we don't have to load the entire file into memory we don't have to load too much data we can skip",
    "start": "1815480",
    "end": "1821299"
  },
  {
    "text": "or stop whenever we want to and then just to simulate some processing I've added a task.delay",
    "start": "1821299",
    "end": "1828260"
  },
  {
    "text": "sometimes a thread.sleep or task.delay just magically fixes problems",
    "start": "1828260",
    "end": "1833299"
  },
  {
    "text": "it really doesn't but here it's just added to simulate that we're doing some work maybe storing this in a database",
    "start": "1833299",
    "end": "1839419"
  },
  {
    "text": "maybe it's processing this somehow but does that on a different thread producing this stream of data looks very",
    "start": "1839419",
    "end": "1846200"
  },
  {
    "text": "complex but consuming it is even worse it's even simpler so what I do here is that I say that a",
    "start": "1846200",
    "end": "1853700"
  },
  {
    "text": "wait for each so we put this await keyword in front of the for each Loop to indicate that each item will be",
    "start": "1853700",
    "end": "1859760"
  },
  {
    "text": "retrieved from this stream of data asynchronously so what does this actually look like if",
    "start": "1859760",
    "end": "1866899"
  },
  {
    "text": "we jump over to vs code I've got this exact same code snippet except there's one change in here I've",
    "start": "1866899",
    "end": "1873799"
  },
  {
    "text": "changed line 12 here this line here doesn't look as as in my opinion this looks a little",
    "start": "1873799",
    "end": "1879500"
  },
  {
    "text": "bit more pretty but if you're totally new to everything around pattern matching which we're going to talk about later so I'd be surprised if you knew",
    "start": "1879500",
    "end": "1885620"
  },
  {
    "text": "all of this already but it's a little bit more of a fluent way of writing the same thing",
    "start": "1885620",
    "end": "1891799"
  },
  {
    "text": "but again I'm producing a a stream of data here I'm indicating that I want to return strings",
    "start": "1891799",
    "end": "1897679"
  },
  {
    "text": "I'm going to start off and open a stream to a file on my disk this is a using",
    "start": "1897679",
    "end": "1903980"
  },
  {
    "text": "declaration normally you see this as a using statement which would look something like this you'd add it in in",
    "start": "1903980",
    "end": "1909980"
  },
  {
    "text": "parenthesis here you'd have a curly bracket here and you'd have one more layer of indentation right",
    "start": "1909980",
    "end": "1916880"
  },
  {
    "text": "we've all done that but now we don't have to do that anymore it's a little bit more fluent",
    "start": "1916880",
    "end": "1923299"
  },
  {
    "text": "and what it's also making sure of is that it's going to be disposed of after this entire asynchronous processing is",
    "start": "1923299",
    "end": "1930020"
  },
  {
    "text": "completed so then what I'm saying here is that is that give me a line or the next line",
    "start": "1930020",
    "end": "1936440"
  },
  {
    "text": "if this is a an instance of a string I want you to store that in a local",
    "start": "1936440",
    "end": "1941720"
  },
  {
    "text": "variable called line if I wrote VAR here",
    "start": "1941720",
    "end": "1946820"
  },
  {
    "text": "that would actually capture nulls as well which would make this an infinite Loop because each time it tries to read",
    "start": "1946820",
    "end": "1953419"
  },
  {
    "text": "the next line if there's no line to read it's going to be null so therefore we have to be specific",
    "start": "1953419",
    "end": "1958940"
  },
  {
    "text": "about the type that I'm expecting from this call otherwise it will not work as expected",
    "start": "1958940",
    "end": "1964640"
  },
  {
    "text": "a bit of a task.delay then using yield return to return this back to the consumer okay perfect so now we have this await",
    "start": "1964640",
    "end": "1972799"
  },
  {
    "text": "keyword in front of a for each Loop if you've done asynchronous programming you've probably seen that if you add the",
    "start": "1972799",
    "end": "1978620"
  },
  {
    "text": "await keyword in front of the method call that will run that method asynchronously right",
    "start": "1978620",
    "end": "1984080"
  },
  {
    "text": "but this here would indicate that give me the entire chunk of data while this",
    "start": "1984080",
    "end": "1989779"
  },
  {
    "text": "here means give me each item one by one the body will run and then it will ask",
    "start": "1989779",
    "end": "1995240"
  },
  {
    "text": "for the next element and then it will run as for the next one and so forth it's rather simple and rather nice",
    "start": "1995240",
    "end": "2003100"
  },
  {
    "text": "so let's run this and see if it works hopefully it streams my favorite song out to the console",
    "start": "2003100",
    "end": "2008140"
  },
  {
    "text": "if you don't know the song Welcome to the internet",
    "start": "2008140",
    "end": "2013080"
  },
  {
    "text": "so with that being said I think asynchronous streams are pretty powerful but of course this is a very simple",
    "start": "2014260",
    "end": "2019899"
  },
  {
    "text": "example reading a file from disk getting one line at a time where I've used this and seen this used",
    "start": "2019899",
    "end": "2025240"
  },
  {
    "text": "in production is with things like Azure cues you have a message bus in Azure and",
    "start": "2025240",
    "end": "2031120"
  },
  {
    "text": "you'd like to subscribe to when a message arrives instead of having a wild true Loop ping Azure give me the next",
    "start": "2031120",
    "end": "2036700"
  },
  {
    "text": "message you use this very concise syntax that we have with the i async enumerable",
    "start": "2036700",
    "end": "2043240"
  },
  {
    "text": "right there we go this one so what this is actually then letting us",
    "start": "2043240",
    "end": "2050560"
  },
  {
    "text": "do is saying when there is a new message in Azure give me the next one to process and you don't have to build any long",
    "start": "2050560",
    "end": "2057520"
  },
  {
    "text": "polling yourself it will just figure that out so the apis are really nice like that",
    "start": "2057520",
    "end": "2063280"
  },
  {
    "text": "so before we want before we talk about pattern matching there's a few things in C sharp nine that's also made it easier",
    "start": "2063280",
    "end": "2070720"
  },
  {
    "text": "for us and better to work with pattern matching that's something called records which is a new type of reference types",
    "start": "2070720",
    "end": "2076240"
  },
  {
    "text": "I've already shown the ended only Setters that makes properties truly read only because you can't change them",
    "start": "2076240",
    "end": "2083260"
  },
  {
    "text": "there's a thing called top level statements making it easier for us to write console applications or something known as as minimal apis there's quite a",
    "start": "2083260",
    "end": "2090878"
  },
  {
    "text": "few things happening in c-sharp 9 as well I'm not going to be able to go through all of this obviously because we've only got 25",
    "start": "2090879",
    "end": "2097240"
  },
  {
    "text": "minutes left unless you want to stay until tomorrow morning I don't have anything planned",
    "start": "2097240",
    "end": "2103319"
  },
  {
    "text": "so with the ninth iteration of c-sharp there's still quite a lot of things added to the language right I think it's",
    "start": "2103359",
    "end": "2109780"
  },
  {
    "text": "pretty amazing that they're trying to look at other programming languages what's appealing to developers from",
    "start": "2109780",
    "end": "2115180"
  },
  {
    "text": "kotlin to Swift in Java in in many other programming languages and take the best",
    "start": "2115180",
    "end": "2120339"
  },
  {
    "text": "of that and make it so that it feels like a c-sharp language feature now it's time to talk about pattern",
    "start": "2120339",
    "end": "2126700"
  },
  {
    "text": "matching which again is one of those features that will change how we build and write",
    "start": "2126700",
    "end": "2132099"
  },
  {
    "text": "our code the idea is that we can express ourselves to find things in instances of",
    "start": "2132099",
    "end": "2137320"
  },
  {
    "text": "objects a little bit differently maybe use a language that is closer to the business",
    "start": "2137320",
    "end": "2143079"
  },
  {
    "text": "because if you show some piece of code to a product owner like I don't know why you would do that but if you do and they",
    "start": "2143079",
    "end": "2148540"
  },
  {
    "text": "want to understand exactly what's going on then pattern matching in my opinion reads much nicer than what traditional",
    "start": "2148540",
    "end": "2154780"
  },
  {
    "text": "code does so it's a way for us to determine like how many edges does this puzzle piece",
    "start": "2154780",
    "end": "2160240"
  },
  {
    "text": "have how does it look what kind of color is it is the fruit edible and so forth like we can use this until our",
    "start": "2160240",
    "end": "2166180"
  },
  {
    "text": "imagination stops there's so many things we can do with pattern matching but we've been able to do this before as",
    "start": "2166180",
    "end": "2171880"
  },
  {
    "text": "well for example I can check the type and check if it has a certain color then I would have to cast this into the",
    "start": "2171880",
    "end": "2178119"
  },
  {
    "text": "correct type before I can use that which isn't too bad like this is some",
    "start": "2178119",
    "end": "2183460"
  },
  {
    "text": "some type of code that we've all written and we've lived with this for a very long time and the reason I didn't show",
    "start": "2183460",
    "end": "2188500"
  },
  {
    "text": "this with c-sharp 7 is because I wouldn't say that the syntax or the amount of code that we had to write was",
    "start": "2188500",
    "end": "2194800"
  },
  {
    "text": "was was less code it looks a little bit more cluttered there's more characters doing the same type of thing",
    "start": "2194800",
    "end": "2201940"
  },
  {
    "text": "but this here in C sharp 7 was the first piece in getting pattern matching into",
    "start": "2201940",
    "end": "2207040"
  },
  {
    "text": "the language we can now use a switch to look at a type",
    "start": "2207040",
    "end": "2212500"
  },
  {
    "text": "inside the the body here of the or inside the case here I can say",
    "start": "2212500",
    "end": "2218140"
  },
  {
    "text": "that when this is an apple I'm going to capture that as the concrete or the correct type I don't have to do any type",
    "start": "2218140",
    "end": "2224140"
  },
  {
    "text": "casting myself it will just work automatically which is very nice",
    "start": "2224140",
    "end": "2230020"
  },
  {
    "text": "but in C sharp a this changed quite a bit they introduced A New Concept called a switch expression which looks very",
    "start": "2230020",
    "end": "2235839"
  },
  {
    "text": "different from what you might have seen in C sharp before so here I want to get a result based on",
    "start": "2235839",
    "end": "2242079"
  },
  {
    "text": "what an object looks like or what the instance looks like so this here the input is the object we",
    "start": "2242079",
    "end": "2248500"
  },
  {
    "text": "want to create different patterns for right and then I can fill this with expressions",
    "start": "2248500",
    "end": "2254619"
  },
  {
    "text": "to say that what type is this what kind of properties and values does this have",
    "start": "2254619",
    "end": "2259740"
  },
  {
    "text": "what does it deconstruct to like we can fill this with very very complex and",
    "start": "2259740",
    "end": "2266200"
  },
  {
    "text": "simple patterns here's an example if it's an apple just return the text this is an Apple so just the same as",
    "start": "2266200",
    "end": "2273520"
  },
  {
    "text": "expression bodied members after on the right hand side of this Arrow syntax you have a return value",
    "start": "2273520",
    "end": "2279040"
  },
  {
    "text": "could have been a method call right so this is what's returned from the pattern",
    "start": "2279040",
    "end": "2284920"
  },
  {
    "text": "this here is very powerful but this is just checking the type and the discard notion that we have here captures",
    "start": "2284920",
    "end": "2291460"
  },
  {
    "text": "everything it matches null it matches not the same type you're looking for and so forth right it matches all the things",
    "start": "2291460",
    "end": "2299200"
  },
  {
    "text": "but checking the type that's just kind of a small piece of what pattern matching can do so therefore",
    "start": "2299200",
    "end": "2305859"
  },
  {
    "text": "C sharp 8 9 10 and 11 introduces quite a lot of patterns and it can be a little bit overwhelming as to where you would",
    "start": "2305859",
    "end": "2312520"
  },
  {
    "text": "use this but we're going to cover a few of them the type pattern I've shown you you check if a type is a type there is",
    "start": "2312520",
    "end": "2319480"
  },
  {
    "text": "string right we can check if an object can be deconstructed into an exact",
    "start": "2319480",
    "end": "2325660"
  },
  {
    "text": "constant that matches what it's deconstructed into so that deconstruct that we had earlier",
    "start": "2325660",
    "end": "2331540"
  },
  {
    "text": "that maybe it took the age or the address you could use that to check something using a pattern",
    "start": "2331540",
    "end": "2338920"
  },
  {
    "text": "more often you say property pattern but you can also do this with tuples you can say that given an instance of a user if",
    "start": "2338920",
    "end": "2347260"
  },
  {
    "text": "this user has not logged in for the last 30 days it should be locked out or it should have it should ask for an",
    "start": "2347260",
    "end": "2354640"
  },
  {
    "text": "or verification through an SMS like you could do a whole kinds of interesting things and express yourself using",
    "start": "2354640",
    "end": "2360520"
  },
  {
    "text": "patterns another example is you could say that a user needs to be at least",
    "start": "2360520",
    "end": "2365740"
  },
  {
    "text": "or somewhere between 10 and 40 years old for example or 20 and 60.",
    "start": "2365740",
    "end": "2371740"
  },
  {
    "text": "which also lets us use an or pattern parenthesized pattern you can negate an entire pattern say it's not null for",
    "start": "2371740",
    "end": "2378099"
  },
  {
    "text": "example and all of these together builds up something called a recursive",
    "start": "2378099",
    "end": "2383980"
  },
  {
    "text": "pattern you can say if it's a if it's a successful attempt you've logged in it's",
    "start": "2383980",
    "end": "2389619"
  },
  {
    "text": "successful but you haven't logged in for 30 days then we do something that's a",
    "start": "2389619",
    "end": "2395440"
  },
  {
    "text": "recursive pattern it checks one piece at a time let's spend some time in Visual Studio",
    "start": "2395440",
    "end": "2401380"
  },
  {
    "text": "looking at exactly this I've already introduced a new console application and being good at naming I",
    "start": "2401380",
    "end": "2408460"
  },
  {
    "text": "will just call it console app2 this here introduces a concept or a few",
    "start": "2408460",
    "end": "2414220"
  },
  {
    "text": "different classes notice that it says record this is actually behind the scenes this is a",
    "start": "2414220",
    "end": "2419619"
  },
  {
    "text": "record class by default records are classes they're reference types and we get quite a bit of functionality",
    "start": "2419619",
    "end": "2426520"
  },
  {
    "text": "out of the box before I show you how to use this with patterns and pattern matching have a",
    "start": "2426520",
    "end": "2431619"
  },
  {
    "text": "look at this piece of code here here's a very simple record person this here is a",
    "start": "2431619",
    "end": "2436660"
  },
  {
    "text": "d uh a a Constructor or default Constructor primary Constructor sorry",
    "start": "2436660",
    "end": "2441880"
  },
  {
    "text": "it's required to take a name and an age and when this is decompiled using in this case sharp lab",
    "start": "2441880",
    "end": "2447760"
  },
  {
    "text": "the code to the uh to the right hand side there's quite a lot of code in here to create this reference type we have a",
    "start": "2447760",
    "end": "2454720"
  },
  {
    "text": "person that implements I equatable it has the backing Fields there's quite a bit of code that's introduced when we",
    "start": "2454720",
    "end": "2461560"
  },
  {
    "text": "use this new type called a record and the reason we do this is because it",
    "start": "2461560",
    "end": "2466780"
  },
  {
    "text": "uses value-based equality so if I have two people with the same names it would",
    "start": "2466780",
    "end": "2472060"
  },
  {
    "text": "compare the values rather than the reference and this also",
    "start": "2472060",
    "end": "2477160"
  },
  {
    "text": "introduces what I told you or told you before allows you to deconstruct an object",
    "start": "2477160",
    "end": "2482680"
  },
  {
    "text": "so why is this important because now if I know that the record comes with deconstruction it's value-based equality",
    "start": "2482680",
    "end": "2489339"
  },
  {
    "text": "it has all these amazing things I can use it very nicely with pattern matching so here I've introduced a record which",
    "start": "2489339",
    "end": "2496780"
  },
  {
    "text": "is a reference type it's a class behind the scenes this here is called test result the idea is that I've done a test",
    "start": "2496780",
    "end": "2503200"
  },
  {
    "text": "at University and I might have done that quite a few times and then it has the latest test date and",
    "start": "2503200",
    "end": "2510040"
  },
  {
    "text": "then I've introduced another deconstruct method so with these record types which is really reference types or classes",
    "start": "2510040",
    "end": "2515619"
  },
  {
    "text": "behind the scenes I can also have a body for that record to introduce methods and",
    "start": "2515619",
    "end": "2520780"
  },
  {
    "text": "properties and functionality and the reason I've introduced my own deconstruct is because I want to also",
    "start": "2520780",
    "end": "2528339"
  },
  {
    "text": "know if this test has been archived so when you pull this a test result apart you can say when was this test done how",
    "start": "2528339",
    "end": "2536020"
  },
  {
    "text": "many days ago was that and is it an archive test and those properties or those values has nothing to do with the",
    "start": "2536020",
    "end": "2543040"
  },
  {
    "text": "parameters that I actually require on my record I've computed them so someone that",
    "start": "2543040",
    "end": "2548619"
  },
  {
    "text": "deconstruct this can get a little bit more information a little bit more detail that they can then match on",
    "start": "2548619",
    "end": "2554260"
  },
  {
    "text": "it's that powerful and a little gotcha here is that it does generate ad construct method with two out parameters",
    "start": "2554260",
    "end": "2561700"
  },
  {
    "text": "so therefore you cannot have two your own you have to always have a unique number of parameters it won't tell you",
    "start": "2561700",
    "end": "2568420"
  },
  {
    "text": "that you have but when you start using it you'll notice and then I have two other records either",
    "start": "2568420",
    "end": "2574240"
  },
  {
    "text": "you pass the test or you failed they just inherit from this base record which is really just a base class just a very",
    "start": "2574240",
    "end": "2580480"
  },
  {
    "text": "concise syntax to write new classes it's nice for dtos and so forth but",
    "start": "2580480",
    "end": "2587319"
  },
  {
    "text": "cannot be used with Entity framework unfortunately with that being said let's head over to",
    "start": "2587319",
    "end": "2592420"
  },
  {
    "text": "this program file that I have over here now I'd like to start using pattern matching with my record type",
    "start": "2592420",
    "end": "2599020"
  },
  {
    "text": "the first thing that I'll do is that I'll introduce a test result I'll call this test result and we'll set",
    "start": "2599020",
    "end": "2604960"
  },
  {
    "text": "this to a default value I don't care this can be null if I were to access a property here down",
    "start": "2604960",
    "end": "2610780"
  },
  {
    "text": "at the bottom it would complain that this would potentially be null right",
    "start": "2610780",
    "end": "2618240"
  },
  {
    "text": "but I could then of course write a pattern to test this if the test result is null",
    "start": "2620500",
    "end": "2628300"
  },
  {
    "text": "or is not null right but I could also say is this test result",
    "start": "2628300",
    "end": "2634420"
  },
  {
    "text": "a a past test let me get rid of this here",
    "start": "2634420",
    "end": "2640000"
  },
  {
    "text": "if it's a past test I know that it's been instantiated to one of these types I can be be certain",
    "start": "2640000",
    "end": "2648040"
  },
  {
    "text": "that there's an instance it's not null so now if I want to use this",
    "start": "2648040",
    "end": "2654880"
  },
  {
    "text": "let's call it past it's equal to test result as passed",
    "start": "2654880",
    "end": "2660280"
  },
  {
    "text": "but I'd really not like to do this and as I showed you earlier with the is string line I could do the same type of",
    "start": "2660280",
    "end": "2667000"
  },
  {
    "text": "thing here the beauty of pattern matching is that we've already performed a type check so how about",
    "start": "2667000",
    "end": "2673180"
  },
  {
    "text": "I say pass here instead and I get rid of this this line that I have here and now",
    "start": "2673180",
    "end": "2678280"
  },
  {
    "text": "this is the correct type within that scope so all the patterns that we have we can",
    "start": "2678280",
    "end": "2684280"
  },
  {
    "text": "use them with if statements switches and switch expressions but the type pattern I've showed you we",
    "start": "2684280",
    "end": "2690940"
  },
  {
    "text": "can also say that if this is a path test and I want to check the property number",
    "start": "2690940",
    "end": "2696400"
  },
  {
    "text": "of attempts this is a property pattern and now I want to use together with that I want to",
    "start": "2696400",
    "end": "2702460"
  },
  {
    "text": "say well if it's more than three times you've attempted this maybe uh",
    "start": "2702460",
    "end": "2708940"
  },
  {
    "text": "take the class again I don't know so we can construct really complex",
    "start": "2708940",
    "end": "2714760"
  },
  {
    "text": "patterns that allow us to write code that we couldn't really do before but we could all say that well if it's",
    "start": "2714760",
    "end": "2721300"
  },
  {
    "text": "if it's more or equal to one and less than three for example",
    "start": "2721300",
    "end": "2726400"
  },
  {
    "text": "this here is now combining multiple different patterns together and as I mentioned we can do this with",
    "start": "2726400",
    "end": "2732520"
  },
  {
    "text": "uh the the switch Expressions so we let's say that we want to get a string representation of whatever this result",
    "start": "2732520",
    "end": "2738579"
  },
  {
    "text": "is we could say if the outcome is based on the test result we'll introduce one of these switch",
    "start": "2738579",
    "end": "2744700"
  },
  {
    "text": "expressions and I want to take exactly this thing here",
    "start": "2744700",
    "end": "2750339"
  },
  {
    "text": "let's take that I'll get rid of the if",
    "start": "2750339",
    "end": "2754440"
  },
  {
    "text": "and then I could use this inside that inside that block notice how it complained if I didn't",
    "start": "2756700",
    "end": "2763000"
  },
  {
    "text": "have the underscore here because it knows that I haven't checked every possible way of this permutation",
    "start": "2763000",
    "end": "2769060"
  },
  {
    "text": "of this object that's why we add this little wild call card the the underscore the discard is the I don't care symbol",
    "start": "2769060",
    "end": "2778660"
  },
  {
    "text": "another thing here is that I could say VAR object for example and this here would be the same as",
    "start": "2778660",
    "end": "2784839"
  },
  {
    "text": "saying the discard it would it would match on the same things so this here would actually also match on a null",
    "start": "2784839",
    "end": "2791740"
  },
  {
    "text": "okay pretty cool I think this is great but we can also as I mentioned use the deconstruct so where does this come into",
    "start": "2791740",
    "end": "2798400"
  },
  {
    "text": "the place I could say that well if this this thing can be deconstructed",
    "start": "2798400",
    "end": "2804339"
  },
  {
    "text": "into something I don't care and some variable that is less than 10 and I don't care about the other one either",
    "start": "2804339",
    "end": "2812380"
  },
  {
    "text": "this here is super understandable it's extremely confusing",
    "start": "2812380",
    "end": "2819220"
  },
  {
    "text": "it is um so how do we make this less confusing well it also supports name parameters",
    "start": "2819220",
    "end": "2824680"
  },
  {
    "text": "but in order to use that the intellisense doesn't tell me at this point so I'd have to say",
    "start": "2824680",
    "end": "2831819"
  },
  {
    "text": "I'd have to go into the class and copy that over surely enough that becomes a little bit less confusing but it's still",
    "start": "2831819",
    "end": "2839560"
  },
  {
    "text": "not the best so in my personal opinion I'd much rather go with the property pattern",
    "start": "2839560",
    "end": "2846940"
  },
  {
    "text": "so when is this useful if you have a tuple if the input here",
    "start": "2846940",
    "end": "2852220"
  },
  {
    "text": "would have been a tuple let's say 10 20 and you'd have you want to create a map",
    "start": "2852220",
    "end": "2857500"
  },
  {
    "text": "for this for example say if the status code is is 200 okay and it had some other value",
    "start": "2857500",
    "end": "2865180"
  },
  {
    "text": "over here right then we could write a mapping for this which is where this becomes rather",
    "start": "2865180",
    "end": "2870819"
  },
  {
    "text": "powerful I think that these uh these patterns and how to use pattern matching is pretty",
    "start": "2870819",
    "end": "2876099"
  },
  {
    "text": "pretty amazing and we can combine these as much as we'd like we could add ore patterns we can construct more complex",
    "start": "2876099",
    "end": "2883839"
  },
  {
    "text": "things but we probably shouldn't by now so with that being said I think patterns",
    "start": "2883839",
    "end": "2890079"
  },
  {
    "text": "in c-sharp all of these patterns are going to make most of our Lives easier",
    "start": "2890079",
    "end": "2896800"
  },
  {
    "text": "hopefully we'll all be able to write code that makes more sense but if abused",
    "start": "2896800",
    "end": "2902440"
  },
  {
    "text": "it can end up not making any sense at all",
    "start": "2902440",
    "end": "2907800"
  },
  {
    "text": "actually let me show you a case where it doesn't make any sense we could say",
    "start": "2908020",
    "end": "2913980"
  },
  {
    "text": "we could negate this entire expression and now who knows what this will do",
    "start": "2913980",
    "end": "2921640"
  },
  {
    "text": "hmm do I now care about this thing I don't know is it more than and and",
    "start": "2921640",
    "end": "2928960"
  },
  {
    "text": "equals 210 now see this can be very confusing so again like any language feature you should always use them with",
    "start": "2928960",
    "end": "2935619"
  },
  {
    "text": "caution but when it comes to code like this it becomes even more important that",
    "start": "2935619",
    "end": "2941440"
  },
  {
    "text": "you don't do the wrong things so I mentioned that c-sharp improves the records but we can also do",
    "start": "2941440",
    "end": "2948400"
  },
  {
    "text": "record structs that depends on where you want your data to be stored if you want data on the stack or the Heap you could",
    "start": "2948400",
    "end": "2955119"
  },
  {
    "text": "use either record class or record struct if you use record struct it's not going",
    "start": "2955119",
    "end": "2960339"
  },
  {
    "text": "to be immutable by default and what I mean about that is that if we go into Visual Studio",
    "start": "2960339",
    "end": "2966700"
  },
  {
    "text": "and let's say that I have a record person it's a good example",
    "start": "2966700",
    "end": "2972819"
  },
  {
    "text": "if I can type which I can't name and age",
    "start": "2972819",
    "end": "2978579"
  },
  {
    "text": "if I have this record here now for Philip is equal to new person",
    "start": "2978579",
    "end": "2985200"
  },
  {
    "text": "and some age here we go now of course I can't change",
    "start": "2985480",
    "end": "2990700"
  },
  {
    "text": "anything here name and this is annoying it should be name",
    "start": "2990700",
    "end": "2997780"
  },
  {
    "text": "there we go I can't change the name after it's created because it's immutable right",
    "start": "2997780",
    "end": "3002819"
  },
  {
    "text": "which makes sense but for a record struct",
    "start": "3002819",
    "end": "3008119"
  },
  {
    "text": "that would be possible right so if it's stored in the stack it's no longer immutable so how would we",
    "start": "3009359",
    "end": "3015480"
  },
  {
    "text": "make this immutable we make it read only",
    "start": "3015480",
    "end": "3020480"
  },
  {
    "text": "just add more keywords and it will all be fine if you imagine a feature is not there",
    "start": "3021420",
    "end": "3027540"
  },
  {
    "text": "it's probably there just use some other keyword um while we're inside Visual Studio",
    "start": "3027540",
    "end": "3033660"
  },
  {
    "text": "let's go through a few more for a few more of these features they also added so this here's a top",
    "start": "3033660",
    "end": "3039119"
  },
  {
    "text": "level statement it allows me to write code inside a program.cs which is then compiled into the traditional program.cs",
    "start": "3039119",
    "end": "3046680"
  },
  {
    "text": "it's useful because you can now mock or test I wouldn't say Mark but you can test features you can bring in packages",
    "start": "3046680",
    "end": "3052980"
  },
  {
    "text": "test small features out and write code quite concisely inside this very small class",
    "start": "3052980",
    "end": "3058680"
  },
  {
    "text": "but with that they want to make it all more like fluent less levels of indentation and look more like I don't",
    "start": "3058680",
    "end": "3065819"
  },
  {
    "text": "know python look better anyways what we can do here is that we can improve something called",
    "start": "3065819",
    "end": "3071760"
  },
  {
    "text": "file file scope namespaces so traditionally if I want this entire",
    "start": "3071760",
    "end": "3076800"
  },
  {
    "text": "thing or all these record types to be inside a particular namespace I'd have to say namespace NDC and I'll have to",
    "start": "3076800",
    "end": "3083579"
  },
  {
    "text": "bring this into one of my like this here and I'll have to indent all of this here and it's",
    "start": "3083579",
    "end": "3089460"
  },
  {
    "text": "it's one layer of unnecessary indentation and if you're one of those people that",
    "start": "3089460",
    "end": "3095339"
  },
  {
    "text": "uses spaces instead of tabs and someone else uses tabs and not",
    "start": "3095339",
    "end": "3100500"
  },
  {
    "text": "spaces this here is going to be annoying when you check this into Source control right so instead we put a semicolon here",
    "start": "3100500",
    "end": "3107400"
  },
  {
    "text": "and this entire file is now inside this namespace small thing but it removes one",
    "start": "3107400",
    "end": "3113040"
  },
  {
    "text": "layer of indentation which is pretty cool now that I've changed this to to namespace NDC if I go back here",
    "start": "3113040",
    "end": "3121380"
  },
  {
    "text": "and try to use my test result that's of course not available right",
    "start": "3121380",
    "end": "3127020"
  },
  {
    "text": "because I haven't brought in that namespace and if I change this in one class and introduce that files file",
    "start": "3127020",
    "end": "3132960"
  },
  {
    "text": "scope namespace I'd have to go through all my files to add all the namespaces but they've added a fix for that so now",
    "start": "3132960",
    "end": "3140220"
  },
  {
    "text": "instead of having to do using NDC like this here I can just say that for my entire project",
    "start": "3140220",
    "end": "3146280"
  },
  {
    "text": "use that namespace NDC in all the types from this namespace it's now available through my entire class or through my",
    "start": "3146280",
    "end": "3152160"
  },
  {
    "text": "entire application which isn't too bad I I think that's a nice feature and you'll normally see",
    "start": "3152160",
    "end": "3158220"
  },
  {
    "text": "this in for instance and a using.cs or or global.cs or",
    "start": "3158220",
    "end": "3163980"
  },
  {
    "text": "whatever you want to call it um you can store that in in a separate file",
    "start": "3163980",
    "end": "3169980"
  },
  {
    "text": "so even with c-sharp 10 there's quite a few features like we have the record structs there's some other improvements",
    "start": "3169980",
    "end": "3176220"
  },
  {
    "text": "we have the global using directive file scope namespace and they've extended the patterns even more",
    "start": "3176220",
    "end": "3182460"
  },
  {
    "text": "so as you'll notice a pattern of c-sharp is that they're introducing more patterns",
    "start": "3182460",
    "end": "3187980"
  },
  {
    "text": "which is good they're also improving Lambda expressions and doing quite a lot of things like allowing constants in",
    "start": "3187980",
    "end": "3194819"
  },
  {
    "text": "interpolated strings I have a slide for that in just a second here but then they're allowing us to do a",
    "start": "3194819",
    "end": "3200579"
  },
  {
    "text": "whole lot of things so still C sharp 10 keeps evolving C sharp 11 is going to evolve there's a whole range of features",
    "start": "3200579",
    "end": "3206640"
  },
  {
    "text": "that could potentially go into c-sharp and I have some I've had some discussions with developers that have",
    "start": "3206640",
    "end": "3213059"
  },
  {
    "text": "been working with c-sharp and other programming languages for a long time and it is starting to get a little bit",
    "start": "3213059",
    "end": "3218640"
  },
  {
    "text": "confusing because now we're going to have fragmented applications people in one Camp will use all the new features",
    "start": "3218640",
    "end": "3225480"
  },
  {
    "text": "people in another Camp will use all the old style features so the solution to that is just talk to",
    "start": "3225480",
    "end": "3232260"
  },
  {
    "text": "your co-workers make sure you're on the same page introduce analyzers to analyze your code so you code the same things or",
    "start": "3232260",
    "end": "3238980"
  },
  {
    "text": "have the same style now constant interplated strings would allow us to use constant values in",
    "start": "3238980",
    "end": "3245819"
  },
  {
    "text": "interpolated strings which is a nice feature as well but even better than this like maybe not",
    "start": "3245819",
    "end": "3251700"
  },
  {
    "text": "all of us are doing constant strings all over the place so more useful feature is that in C sharp 9 if you were to create",
    "start": "3251700",
    "end": "3257880"
  },
  {
    "text": "a Lambda you'd had to explicitly Define which type of Lambda this is",
    "start": "3257880",
    "end": "3263700"
  },
  {
    "text": "which just why couldn't the compiler just figure this out we could also turn this around and say VAR parse is equal",
    "start": "3263700",
    "end": "3271020"
  },
  {
    "text": "to new funk of string of int and then pass that into the Constructor but again that's too many characters so instead",
    "start": "3271020",
    "end": "3278940"
  },
  {
    "text": "the compiler is now going to infer this for us nice feature nice addition and we're",
    "start": "3278940",
    "end": "3284700"
  },
  {
    "text": "going to see more of this C sharp is going to look at your code and try to analyze things for you it's going to",
    "start": "3284700",
    "end": "3290940"
  },
  {
    "text": "generate code that makes all of our Lives easier because if it can infer something maybe it can also find errors",
    "start": "3290940",
    "end": "3296760"
  },
  {
    "text": "maybe it can also let you know that you're doing things wrong before you know you're doing it wrong",
    "start": "3296760",
    "end": "3302460"
  },
  {
    "text": "another thing in C sharp 10 is that they're now allowing to do attributes in lambdas",
    "start": "3302460",
    "end": "3308819"
  },
  {
    "text": "so this here is a minimal API there's a little bit more code to this here but if",
    "start": "3308819",
    "end": "3313980"
  },
  {
    "text": "you go in to the CLI the.net CLI and type.net new web",
    "start": "3313980",
    "end": "3319859"
  },
  {
    "text": "you'll get something that looks like this here so it creates a console application that",
    "start": "3319859",
    "end": "3325800"
  },
  {
    "text": "has a few of these different method calls where it passes an anonymous method into it it's a Lambda and to be",
    "start": "3325800",
    "end": "3332520"
  },
  {
    "text": "able to use this fully to make it actually useful they have to introduce attributes on lambdas as well",
    "start": "3332520",
    "end": "3338819"
  },
  {
    "text": "so you'll see that here so I could say that from the header named content type map that into my type",
    "start": "3338819",
    "end": "3346140"
  },
  {
    "text": "called content type right so that's all C sharp 8 or even 7 all",
    "start": "3346140",
    "end": "3352619"
  },
  {
    "text": "the way up to C sharp 10. there's quite a lot happening in c-sharp as a programming language",
    "start": "3352619",
    "end": "3358619"
  },
  {
    "text": "so what's next about four minutes to cover the the next 10 years of c-sharp",
    "start": "3358619",
    "end": "3364319"
  },
  {
    "text": "probably not so the reason I don't spend much more time talking about c-sharp 11 C sharp 12 C sharp 13. even though C",
    "start": "3364319",
    "end": "3371520"
  },
  {
    "text": "sharp is going to get a new version release in a couple of weeks from experience it's there's going to be a",
    "start": "3371520",
    "end": "3377819"
  },
  {
    "text": "feature too that they actually remove the day before release so I try not to talk too much about that",
    "start": "3377819",
    "end": "3383640"
  },
  {
    "text": "before it's actually on the market but there are a few things that I I do believe are going to make it into the",
    "start": "3383640",
    "end": "3389339"
  },
  {
    "text": "cut as I mentioned a pattern is to add more patterns they're going to make it easier for us to match on lists to say that if",
    "start": "3389339",
    "end": "3396540"
  },
  {
    "text": "this list is an instance give me the start give me the end or give me a portion and that will probably be used",
    "start": "3396540",
    "end": "3401880"
  },
  {
    "text": "in conjunction with a range Syntax for example you can slice things you can use the span patterns it's a whole range of",
    "start": "3401880",
    "end": "3408660"
  },
  {
    "text": "things that we can do we're introducing the name of operator they're finally going to Cache delegates",
    "start": "3408660",
    "end": "3415020"
  },
  {
    "text": "in uh cash delegates for static method groups which is a huge performance Improvement if you've ever run into this",
    "start": "3415020",
    "end": "3421079"
  },
  {
    "text": "issue or run into that we looked at the required properties if I had enabled preview features in my project and",
    "start": "3421079",
    "end": "3427819"
  },
  {
    "text": "installed.net7 I would have been able to use that this would then require me to",
    "start": "3427819",
    "end": "3432839"
  },
  {
    "text": "always set this to a value when I instantiate my object",
    "start": "3432839",
    "end": "3438740"
  },
  {
    "text": "they're going to change the ways that we can write strings and they're going to allow static members in interfaces",
    "start": "3438780",
    "end": "3444599"
  },
  {
    "text": "one more cool thing that they're going to do is that introduce something called utf-8 string literals so how about I",
    "start": "3444599",
    "end": "3450780"
  },
  {
    "text": "have a string here right why not just implicitly allow me to convert that into a span of bytes a span allows me to work",
    "start": "3450780",
    "end": "3458339"
  },
  {
    "text": "with data inside a large collection like in this case here it would be an array of bytes and instead of having to copy",
    "start": "3458339",
    "end": "3464940"
  },
  {
    "text": "that all over the place and have to when I slice pieces off it I would have to copy things this here is much more",
    "start": "3464940",
    "end": "3470640"
  },
  {
    "text": "performant and I've Rewritten a lot of things in.net in asp.net core to",
    "start": "3470640",
    "end": "3476040"
  },
  {
    "text": "incorporate this to introduce some performance improvements",
    "start": "3476040",
    "end": "3481079"
  },
  {
    "text": "and finally they're going to do generic attributes I did asp.net not core the Legacy stuff",
    "start": "3481079",
    "end": "3489059"
  },
  {
    "text": "web form stuff and then MVC and this is something that I've wanted for a very long time like you write on attribute",
    "start": "3489059",
    "end": "3495660"
  },
  {
    "text": "for one of your controllers there was no way of doing it generically so you ended up doing some some nasty",
    "start": "3495660",
    "end": "3501660"
  },
  {
    "text": "things to get around that but they're finally going to do this and one of the most important things about net or and c-sharp being open",
    "start": "3501660",
    "end": "3508859"
  },
  {
    "text": "source is that everyone in here in the community can contribute and they did they told the compiler team that we",
    "start": "3508859",
    "end": "3515520"
  },
  {
    "text": "don't want a certain feature and they removed it they were going to add double bangs like",
    "start": "3515520",
    "end": "3521400"
  },
  {
    "text": "if one bang wasn't enough they're also going to introduce this double bang thing to say if this parameter that was",
    "start": "3521400",
    "end": "3527819"
  },
  {
    "text": "input into my method if that is null throw an exception and that would just happen by default",
    "start": "3527819",
    "end": "3534000"
  },
  {
    "text": "and no one liked that or at least not a lot of people so with that being said",
    "start": "3534000",
    "end": "3540000"
  },
  {
    "text": "there's one final thing I mentioned that they're also going to do this static abstract members in interfaces so why",
    "start": "3540000",
    "end": "3546059"
  },
  {
    "text": "would we do this because in this case here if I have an interface that tells me you need a property that is static",
    "start": "3546059",
    "end": "3553200"
  },
  {
    "text": "there's no way to enforce that but what they're doing now is that this preview feature",
    "start": "3553200",
    "end": "3559020"
  },
  {
    "text": "allows us to say that this is an abstract thing and now the class has to",
    "start": "3559020",
    "end": "3564059"
  },
  {
    "text": "implement that it's a nice addition if you do single twins which I think a lot of us stopped",
    "start": "3564059",
    "end": "3570059"
  },
  {
    "text": "doing 10 years ago so with that being said if you like this I do have quite a few courses on c-sharp",
    "start": "3570059",
    "end": "3576540"
  },
  {
    "text": "on data access advanced language features where I go through all of this in Greater detail there's quite a lot to",
    "start": "3576540",
    "end": "3582599"
  },
  {
    "text": "to talk about in just an hour there's so many things happening to c-sharp as a",
    "start": "3582599",
    "end": "3587880"
  },
  {
    "text": "programming language but I hope you got a nugget or two out of this here and that you can experiment with record types pattern matching and",
    "start": "3587880",
    "end": "3595020"
  },
  {
    "text": "hopefully if you enable nullable reference types and treat warnings as errors and then just leave work please",
    "start": "3595020",
    "end": "3600960"
  },
  {
    "text": "send me a tweet and tell me about the experience all right I hope you like this thank you",
    "start": "3600960",
    "end": "3606359"
  },
  {
    "text": "so much I'm Philip eckberg don't forget to vote [Applause]",
    "start": "3606359",
    "end": "3613049"
  }
]