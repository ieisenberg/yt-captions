[
  {
    "text": "hi Oslo hello world let's code an incremental Source generator with Roslin",
    "start": "599",
    "end": "7379"
  },
  {
    "text": "today the next 60 hours 60. why 60 hour minutes we will learn or",
    "start": "7379",
    "end": "15900"
  },
  {
    "text": "about about what source generators are where they are in use they definitely",
    "start": "15900",
    "end": "21539"
  },
  {
    "text": "came to stay they will not go away and how we can build one ourselves",
    "start": "21539",
    "end": "27680"
  },
  {
    "text": "my name is Stefan poltz I'm from Austria ilove.net and c-sharp I started with",
    "start": "27960",
    "end": "34860"
  },
  {
    "text": "rostlin actually when the when the pandemic started then with Source generators I started",
    "start": "34860",
    "end": "41820"
  },
  {
    "text": "when they got actually released together with.net 5. and currently I'm a senior software",
    "start": "41820",
    "end": "48180"
  },
  {
    "text": "developer to report in Vienna I also have a",
    "start": "48180",
    "end": "54899"
  },
  {
    "text": "um twitch and YouTube stream currently also streaming about wrestling that's my that's my hammer and every problem that",
    "start": "54899",
    "end": "61559"
  },
  {
    "text": "I have is a nail um I am a co-organizer of the.net Meetup",
    "start": "61559",
    "end": "66840"
  },
  {
    "text": "in Vienna a Microsoft MVP and a chat brains Community contributor which the",
    "start": "66840",
    "end": "72720"
  },
  {
    "text": "where the letter may come in handy to you if you take a picture of this stage or in the overflows room of the of the",
    "start": "72720",
    "end": "79260"
  },
  {
    "text": "screen and either tweet it and tagged me with at 0x underscore F0 or send it via",
    "start": "79260",
    "end": "86520"
  },
  {
    "text": "Twitter Mastodon or LinkedIn as a private message then I will raffle two",
    "start": "86520",
    "end": "92400"
  },
  {
    "text": "white chat points wider licenses at the end of the day",
    "start": "92400",
    "end": "97820"
  },
  {
    "text": "so what is wrestling waslam is the open source compiler platform for net and it",
    "start": "102240",
    "end": "109140"
  },
  {
    "text": "supports both the c-sharp and the visual basic programming languages who view has used wrestling or something",
    "start": "109140",
    "end": "117659"
  },
  {
    "text": "with whistling maybe an analyzer or codefix provider consciously already",
    "start": "117659",
    "end": "123920"
  },
  {
    "text": "see a third of the room with you has used a source generator in particular",
    "start": "123960",
    "end": "129119"
  },
  {
    "text": "already okay like 10 hands roughly and who has built",
    "start": "129119",
    "end": "135720"
  },
  {
    "text": "already a social innovator there's one two three okay four uh I",
    "start": "135720",
    "end": "141720"
  },
  {
    "text": "hope that we have quite a quite a um spread in the experience level with firstly and Fortune readers I hope that",
    "start": "141720",
    "end": "147180"
  },
  {
    "text": "I have a takeaway for for all of you and after the session please let me know if I if I if I delivered um by by voting",
    "start": "147180",
    "end": "154860"
  },
  {
    "text": "for for the session so in Roslyn this is a compiler as a",
    "start": "154860",
    "end": "161280"
  },
  {
    "text": "platform we can write our own plugins such as an analyzer which produces sprinklers warnings and errors and also",
    "start": "161280",
    "end": "167819"
  },
  {
    "text": "a code fixed provider where we then can either enter or control dot this Diagnostic and we get fixes um so",
    "start": "167819",
    "end": "175580"
  },
  {
    "text": "suggested such as using newer language features um why does this a lot",
    "start": "175580",
    "end": "180660"
  },
  {
    "text": "and with whistling 3.8 which got shipped in the 2005 SDK we also got Source",
    "start": "180660",
    "end": "187860"
  },
  {
    "text": "generators and we've got net six incremental Source generators well the difference is we will find out in the",
    "start": "187860",
    "end": "193560"
  },
  {
    "text": "next minutes so",
    "start": "193560",
    "end": "198599"
  },
  {
    "text": "social media's got released with.net 5 and with net 6 and.net 7 Microsoft is",
    "start": "198599",
    "end": "205019"
  },
  {
    "text": "also building Source generators and supplying them in the in as part of the of that of the of the.net framework so",
    "start": "205019",
    "end": "211560"
  },
  {
    "text": "when we Target open six or dot Net 7 we get the source generators out of the box for example system takes Json Source",
    "start": "211560",
    "end": "217860"
  },
  {
    "text": "generator one for logging this is if you have seen the talk from Nick chopsters yesterday about logging he showed this",
    "start": "217860",
    "end": "224040"
  },
  {
    "text": "as well and in.net 7 there is actually three more I missed one a wedge hex generator",
    "start": "224040",
    "end": "229860"
  },
  {
    "text": "an interop generator and also a JavaScript interoper generator and dotnet8 will have more more generators",
    "start": "229860",
    "end": "236640"
  },
  {
    "text": "coming um because oh yeah now let's go there",
    "start": "236640",
    "end": "242879"
  },
  {
    "text": "um because they have very specific the use cases",
    "start": "242879",
    "end": "247980"
  },
  {
    "text": "um let's go let's go to examples first so how could a social meter look like",
    "start": "247980",
    "end": "255420"
  },
  {
    "text": "let's actually take a look at the logging Source generator",
    "start": "255420",
    "end": "260000"
  },
  {
    "text": "so I'm having here a benchmark I'm using the sorry I forgot to",
    "start": "260579",
    "end": "267740"
  },
  {
    "text": "launch the tool I feel the standard extension methods",
    "start": "267900",
    "end": "273000"
  },
  {
    "text": "logging that we have logger.information we put in a message and sends the parameters",
    "start": "273000",
    "end": "278699"
  },
  {
    "text": "but this has a bit of a problem because this params area sorry",
    "start": "278699",
    "end": "284220"
  },
  {
    "text": "this params array here is actually",
    "start": "284220",
    "end": "288199"
  },
  {
    "text": "an object away and not only do we allocate in a way here implicitly by the c-sharp",
    "start": "289800",
    "end": "297540"
  },
  {
    "text": "compiler but also if we have value types such as this number here this is an integer we box them to a reference type",
    "start": "297540",
    "end": "304740"
  },
  {
    "text": "to the object which means we have additional Heap allocations which causes pressure on the garbage collector",
    "start": "304740",
    "end": "311280"
  },
  {
    "text": "and with a source generator can produce very specific source code for our for",
    "start": "311280",
    "end": "317040"
  },
  {
    "text": "our need here to avoid these allocations and how this works is we create",
    "start": "317040",
    "end": "324300"
  },
  {
    "text": "ourselves a new type we make it partial so that the source generator can add new",
    "start": "324300",
    "end": "329460"
  },
  {
    "text": "sources to it and we Define now our partial method in",
    "start": "329460",
    "end": "334800"
  },
  {
    "text": "previous rules before c sharp 9 we couldn't have an accessibility modifier on partial",
    "start": "334800",
    "end": "341100"
  },
  {
    "text": "methods we needed to write partial methods like this when we add the partial modifier now the new c-sharp",
    "start": "341100",
    "end": "348600"
  },
  {
    "text": "nine rules applied and they mean we need to have an implementation if there is no",
    "start": "348600",
    "end": "354360"
  },
  {
    "text": "implementation this won't compile with previous without the without the accessibility modifier",
    "start": "354360",
    "end": "362900"
  },
  {
    "text": "extension methods had to be void they couldn't return anything that means if there is no implementation",
    "start": "363539",
    "end": "370440"
  },
  {
    "text": "then the call to this method actually will be stripped out of the compilation but when we do apply the new rules there",
    "start": "370440",
    "end": "377460"
  },
  {
    "text": "has to be an implementation but a lot of limitations have been have been relaxed",
    "start": "377460",
    "end": "385380"
  },
  {
    "text": "and we do need an implementations but where is this coming from I didn't write this so if I go to the implementation",
    "start": "385380",
    "end": "390600"
  },
  {
    "text": "via F12 here we see we are now in a generated file they usually get marked",
    "start": "390600",
    "end": "396300"
  },
  {
    "text": "with the file name it's not a file name this file doesn't really exist it's a it's a hint for tooling it's a suffixed",
    "start": "396300",
    "end": "402900"
  },
  {
    "text": "with dot g dot CS it would also be dot generated.cs which is a marker for",
    "start": "402900",
    "end": "407940"
  },
  {
    "text": "tooling for example for wider or Visual Studio or posting analyzes that this is a generated file and the user has no",
    "start": "407940",
    "end": "414600"
  },
  {
    "text": "direct influence of how this is generated or how this file is written we also have the auto generated content",
    "start": "414600",
    "end": "421160"
  },
  {
    "text": "comment on top of the file which is a further indicator this is generated",
    "start": "421160",
    "end": "426840"
  },
  {
    "text": "and now this creates a this has this logger message.define has been available",
    "start": "426840",
    "end": "433620"
  },
  {
    "text": "previously already but it's rather tedious to to to set up this novel The Source generator takes from us and it",
    "start": "433620",
    "end": "440819"
  },
  {
    "text": "depends automatically and now has strongly typed overloads so we don't",
    "start": "440819",
    "end": "446819"
  },
  {
    "text": "have this away allocation anymore from the parents array and we have no boxing and this",
    "start": "446819",
    "end": "452819"
  },
  {
    "text": "shows in benchmarking",
    "start": "452819",
    "end": "455960"
  },
  {
    "text": "so if we compare actually in The Benchmark I also log um with a minimum you know with a",
    "start": "463680",
    "end": "469680"
  },
  {
    "text": "minimal um version with a minimal logger log level so if we actually if the logo",
    "start": "469680",
    "end": "476940"
  },
  {
    "text": "is okay sorry um because we log here in an information",
    "start": "476940",
    "end": "482580"
  },
  {
    "text": "but if we set the minimum level to warning then this information isn't locked and in this example when I set to",
    "start": "482580",
    "end": "489840"
  },
  {
    "text": "warning then we actually don't log anything but still in the in the standard extension method approach we",
    "start": "489840",
    "end": "496919"
  },
  {
    "text": "still have this allocation and now with the source automated version we use the source generated",
    "start": "496919",
    "end": "503819"
  },
  {
    "text": "version we don't have this allocation anymore and it's also significantly faster because we avoided those",
    "start": "503819",
    "end": "510240"
  },
  {
    "text": "allocations another use case is to avoid tedious",
    "start": "510240",
    "end": "515880"
  },
  {
    "text": "implementations for example in ink summer based",
    "start": "515880",
    "end": "520919"
  },
  {
    "text": "applications I have here a very basic",
    "start": "520919",
    "end": "526680"
  },
  {
    "text": "application where I want to bind",
    "start": "526680",
    "end": "532200"
  },
  {
    "text": "a number and want to have two commands an increment and a decrement command",
    "start": "532200",
    "end": "538200"
  },
  {
    "text": "and which when you have a look at the code behind right at the viewmodel implementation we actually don't",
    "start": "538200",
    "end": "543360"
  },
  {
    "text": "implement this I notify property changed anywhere and we don't Define our",
    "start": "543360",
    "end": "548459"
  },
  {
    "text": "commands and such which is always the same pattern it always looks the same but we still have to do it because this",
    "start": "548459",
    "end": "554279"
  },
  {
    "text": "is how the plumbing Works under the hood but we are the mbvm toolkit Source generators that are available as a",
    "start": "554279",
    "end": "559920"
  },
  {
    "text": "nougat package from the mbbm tool from the community toolkit this is this cannot be all generated",
    "start": "559920",
    "end": "566279"
  },
  {
    "text": "so let's run the application briefly",
    "start": "566279",
    "end": "570380"
  },
  {
    "text": "now we have the increment and document function functionality without us actually writing this I probably did not",
    "start": "579360",
    "end": "584880"
  },
  {
    "text": "ever changed and the commands and the source is actually producing this now",
    "start": "584880",
    "end": "590399"
  },
  {
    "text": "the experience is very similar in in Visual Studio we can go to our dependencies then find the source generators here and",
    "start": "590399",
    "end": "597420"
  },
  {
    "text": "here we can see okay now the The Source meters from the mbvm toolkit are kicking in and we can see",
    "start": "597420",
    "end": "603959"
  },
  {
    "text": "the documents that they create they're not necessarily Files The Source generator files are not necessarily put",
    "start": "603959",
    "end": "609120"
  },
  {
    "text": "to disk there is a compiler flag that you can set if you want to have them put potentially checked in in a source as",
    "start": "609120",
    "end": "614760"
  },
  {
    "text": "well to get a diff but by default they are not really on disk so it's not files it's documents and again here we are",
    "start": "614760",
    "end": "622560"
  },
  {
    "text": "now rear marked via.g.cs and the auto generated comment and he is not the implementation the the",
    "start": "622560",
    "end": "629580"
  },
  {
    "text": "property did notify changed implementation so all the code that we didn't have to write ourselves",
    "start": "629580",
    "end": "637279"
  },
  {
    "text": "and the third use case is that all of this facilitates",
    "start": "639920",
    "end": "645000"
  },
  {
    "text": "trimming and Native aot so with the last example",
    "start": "645000",
    "end": "651300"
  },
  {
    "text": "is the Json serializer that got shipped with Net 7 and improved in.net uh six",
    "start": "651300",
    "end": "658200"
  },
  {
    "text": "and improved in.net 7. now what I'm having here is a again a",
    "start": "658200",
    "end": "665820"
  },
  {
    "text": "partial class that derives from the Json serializer context and as an attribute I",
    "start": "665820",
    "end": "672360"
  },
  {
    "text": "Define which type that this serializer context should be able to",
    "start": "672360",
    "end": "678000"
  },
  {
    "text": "serialize and deserialize I can also set options for example I want to have it indented",
    "start": "678000",
    "end": "684120"
  },
  {
    "text": "and again if we go to the implementation I didn't write anything I only have the partial file but with this attributes on",
    "start": "684120",
    "end": "689220"
  },
  {
    "text": "a software that creates a lot of code and very specific",
    "start": "689220",
    "end": "694740"
  },
  {
    "text": "um civilization and deserialization and strongly typed and there is no reflection",
    "start": "694740",
    "end": "699839"
  },
  {
    "text": "because the default implementation if we just if we use civilize and deserialize without the source traded version what",
    "start": "699839",
    "end": "706680"
  },
  {
    "text": "system text Json does under the hood because there is a reflection involved and reflection is expensive so what they do is when the very first time you",
    "start": "706680",
    "end": "713459"
  },
  {
    "text": "serialize and what this serialize into a deserialize an object of a specific type",
    "start": "713459",
    "end": "719480"
  },
  {
    "text": "the system takes Json civilizer is emitting via reflection.mit new IL code that is",
    "start": "719480",
    "end": "727140"
  },
  {
    "text": "that compiled once and then reused so it's creating a special case implementation at one time which is the",
    "start": "727140",
    "end": "733980"
  },
  {
    "text": "problem it's at one time and in Native aot scenarios where we don't have the",
    "start": "733980",
    "end": "739200"
  },
  {
    "text": "jit compiler we can't we can't do reflection emit and now if we do this if we shift this",
    "start": "739200",
    "end": "747899"
  },
  {
    "text": "creation of this object from from one time to compile time now this is aot friendly because there is no there is no",
    "start": "747899",
    "end": "755279"
  },
  {
    "text": "need for the chit because the um the Western compiler is already taking care of that",
    "start": "755279",
    "end": "761820"
  },
  {
    "text": "and it's also very nice for trimming because we don't have any unreferenced code no Dynamic code emitted so the",
    "start": "761820",
    "end": "769139"
  },
  {
    "text": "compiler knows exactly what code is invoked and our application keeps trimming friendly",
    "start": "769139",
    "end": "775740"
  },
  {
    "text": "um I'm okay I haven't explained what trimming is this is what A New Concept if you have a self-deployed application",
    "start": "775740",
    "end": "781740"
  },
  {
    "text": "usually they are rather big because you have the entire um the.net runtime all of the vcl",
    "start": "781740",
    "end": "787800"
  },
  {
    "text": "included and with trimming the link goes in and sees Rich methods and with which",
    "start": "787800",
    "end": "795060"
  },
  {
    "text": "types and methods are not used are not referenced by any code and removes them so that the final binary is is coming is",
    "start": "795060",
    "end": "802920"
  },
  {
    "text": "becoming smaller and so we can have smaller smaller self-contained applications and Native alt is a new",
    "start": "802920",
    "end": "811100"
  },
  {
    "text": "approach where we don't have the jit compiler so everything is compiled for a specific platform for example in my case",
    "start": "811100",
    "end": "817019"
  },
  {
    "text": "it will be windows 64. and directly to machine code so there is no chit",
    "start": "817019",
    "end": "824760"
  },
  {
    "text": "anymore so the startup performance of the applications is very fast and this is very suitable for for serverless",
    "start": "824760",
    "end": "832440"
  },
  {
    "text": "applications like Azure functions or AWS Lambda because we save a lot of this",
    "start": "832440",
    "end": "838380"
  },
  {
    "text": "cold startup time and this is another use case with Source generators come in handy and there will",
    "start": "838380",
    "end": "844920"
  },
  {
    "text": "be more and more of them so what are the laws of source",
    "start": "844920",
    "end": "852120"
  },
  {
    "text": "generation we retrieve the input to a source generator is the",
    "start": "852120",
    "end": "858899"
  },
  {
    "text": "compilation the compilation is basically all of the source code and its dependencies of the project",
    "start": "858899",
    "end": "866040"
  },
  {
    "text": "and this is represented with syntax trees and the semantic model what does a syntax tree look like if we",
    "start": "866040",
    "end": "872639"
  },
  {
    "text": "go to sharplab.io we can we can enter some code and then",
    "start": "872639",
    "end": "881160"
  },
  {
    "text": "well the default is is the c-sharp version so it actually compiles and decompiles the code so it basically gets",
    "start": "881160",
    "end": "887459"
  },
  {
    "text": "rids of all the syntactic sugar and we can also change it to the syntax tree which is not a waslam",
    "start": "887459",
    "end": "893699"
  },
  {
    "text": "representation of our source code it's now a tree which has nodes and tokens",
    "start": "893699",
    "end": "901139"
  },
  {
    "text": "and trivia where a node has children tokens are terminal they are Leaf nodes",
    "start": "901139",
    "end": "907440"
  },
  {
    "text": "and trivia is something that has no influence on the compilation something that is not part of the iil code such as",
    "start": "907440",
    "end": "915180"
  },
  {
    "text": "comments we don't find comments in the IL code so at the top we have a compilation unit",
    "start": "915180",
    "end": "921899"
  },
  {
    "text": "which is basically this entire document then we have a using directive",
    "start": "921899",
    "end": "927600"
  },
  {
    "text": "now this using directive consists of a using keyword it has an identifier name",
    "start": "927600",
    "end": "933060"
  },
  {
    "text": "if it drill down to this identifier name which is an which is a node now this is",
    "start": "933060",
    "end": "938519"
  },
  {
    "text": "a token system then we have a class declaration we could also have a struct declaration",
    "start": "938519",
    "end": "946440"
  },
  {
    "text": "well an interface declaration and again we list we see all all the keywords that",
    "start": "946440",
    "end": "952079"
  },
  {
    "text": "we have in use here public class are represented here in the in the tokenified version of our source code as",
    "start": "952079",
    "end": "958019"
  },
  {
    "text": "well and there is a method declaration this method declaration it has a return type now this return type is a",
    "start": "958019",
    "end": "964380"
  },
  {
    "text": "predefined type predefined types of language types such as void int double",
    "start": "964380",
    "end": "970260"
  },
  {
    "text": "again an identifier identifiers are always these that basically we can then invoke in our source code",
    "start": "970260",
    "end": "977180"
  },
  {
    "text": "and also where is our trivia I think",
    "start": "977180",
    "end": "984560"
  },
  {
    "text": "put a comment on top to also see here is a comment that is a",
    "start": "986639",
    "end": "993480"
  },
  {
    "text": "single line comment trivia you can also have multi-line comment trivia or pre-processor directives",
    "start": "993480",
    "end": "999899"
  },
  {
    "text": "the pound if is also trivia and this tree is not an input to the",
    "start": "999899",
    "end": "1007639"
  },
  {
    "text": "source generator and we can analyze this tree detect patterns for example this attribute now this the Json generator",
    "start": "1007639",
    "end": "1016600"
  },
  {
    "text": "would search for all partial classes that that are attributed with this with this attribute",
    "start": "1017240",
    "end": "1024500"
  },
  {
    "text": "then drills down into the type that is used in here and then inspects then",
    "start": "1024500",
    "end": "1029959"
  },
  {
    "text": "basically goes to the type understands that this type has two properties it's doing at an in property and generates",
    "start": "1029959",
    "end": "1036620"
  },
  {
    "text": "the special case civilization code at compile time for us",
    "start": "1036620",
    "end": "1041918"
  },
  {
    "text": "and this is the syntax tree what is the semantic model the semantic model now gives meaning to our source code",
    "start": "1043520",
    "end": "1052100"
  },
  {
    "text": "my favorite example here is what if we could have we could return let's say an",
    "start": "1052100",
    "end": "1057140"
  },
  {
    "text": "INT 32 here let's return one but what if I in the same compilation",
    "start": "1057140",
    "end": "1064760"
  },
  {
    "text": "now Define my own type let's also make it obstruct int32",
    "start": "1064760",
    "end": "1072440"
  },
  {
    "text": "now we already get a this doesn't compile anymore because now it's actually our",
    "start": "1072440",
    "end": "1079640"
  },
  {
    "text": "int32 and not the system in 32. if I wanna um",
    "start": "1079640",
    "end": "1086020"
  },
  {
    "text": "avoid this this confusion I could go to the global to the global namespace Elias",
    "start": "1086240",
    "end": "1091640"
  },
  {
    "text": "and now here have again the the net um",
    "start": "1091640",
    "end": "1098380"
  },
  {
    "text": "system of course and now the compiler one disappears and this is where the semantic information",
    "start": "1098500",
    "end": "1103940"
  },
  {
    "text": "comes in from a from a syntax view those are both into",
    "start": "1103940",
    "end": "1109820"
  },
  {
    "text": "32 that could live also if I would put this in a system namespace then from a from a syntactic point I couldn't really",
    "start": "1109820",
    "end": "1117020"
  },
  {
    "text": "differentiate them but for we had a semantic model now the semantic model actually gives meaning to these types",
    "start": "1117020",
    "end": "1123200"
  },
  {
    "text": "and I know now we had a semantic model okay this is the this is the the BCL int32 that is equivalent to the int",
    "start": "1123200",
    "end": "1130400"
  },
  {
    "text": "keyword and this is some other struct which is empty it has no members so they",
    "start": "1130400",
    "end": "1135500"
  },
  {
    "text": "don't match and with this input The Source generator",
    "start": "1135500",
    "end": "1142640"
  },
  {
    "text": "can then analyze it and produce new code it's really it's a string that is",
    "start": "1142640",
    "end": "1147860"
  },
  {
    "text": "produced we can produce zero or an infinite amount of new strings each of",
    "start": "1147860",
    "end": "1153200"
  },
  {
    "text": "those strings is then a new document that we should suffix with.g.cs so the tooling knows is a generated file and",
    "start": "1153200",
    "end": "1160520"
  },
  {
    "text": "this really is a string we will see this later with the live example Source generators are additive only they",
    "start": "1160520",
    "end": "1167000"
  },
  {
    "text": "can only add no Source this is no what's the aspect oriented programming model",
    "start": "1167000",
    "end": "1173840"
  },
  {
    "text": "where we can actually replace or delete code during doing compilation this is",
    "start": "1173840",
    "end": "1179240"
  },
  {
    "text": "currently not possible there is potentially something in a smaller scope",
    "start": "1179240",
    "end": "1185299"
  },
  {
    "text": "coming up with.net 8 in preview something like interceptors where we can have a bit of an influence at the flow",
    "start": "1185299",
    "end": "1192320"
  },
  {
    "text": "but it will never be will will replacement social generators are analyzers",
    "start": "1192320",
    "end": "1199220"
  },
  {
    "text": "technically so they can also produce Diagnostics we shouldn't we should actually use",
    "start": "1199220",
    "end": "1206120"
  },
  {
    "text": "um uh proper analyzer diagnostic analyzer but I come to the Y at the end but",
    "start": "1206120",
    "end": "1211520"
  },
  {
    "text": "technically it's very possible and the source generator can also look at additional files in our compilation",
    "start": "1211520",
    "end": "1219620"
  },
  {
    "text": "I have for example here example where we have some additional",
    "start": "1219620",
    "end": "1225320"
  },
  {
    "text": "text and if we mark this additional text as additional file in our compilation",
    "start": "1225320",
    "end": "1232160"
  },
  {
    "text": "not a source generator could see this as well and with that we could basically build a transpiler from Json to c-sharp",
    "start": "1232160",
    "end": "1239960"
  },
  {
    "text": "if we if we wish or we could also put some configuration",
    "start": "1239960",
    "end": "1245780"
  },
  {
    "text": "in these files that we then recognize social generators are",
    "start": "1245780",
    "end": "1252140"
  },
  {
    "text": "unordered so we don't know in which order they want if we have seven Source generators or in our project all of",
    "start": "1252140",
    "end": "1257840"
  },
  {
    "text": "these seven Source units get the same input they cannot depend on each other that means they are oblivious",
    "start": "1257840",
    "end": "1265880"
  },
  {
    "text": "and I already mentioned the technical analyzers",
    "start": "1265880",
    "end": "1270279"
  },
  {
    "text": "right from the from the language perspective in C sharp 2 we got we got the partial",
    "start": "1271900",
    "end": "1279559"
  },
  {
    "text": "we got the partial types and in C sharp three we then got partial methods although I mentioned this they could",
    "start": "1279559",
    "end": "1285620"
  },
  {
    "text": "only void but with C sharp 9 is basically support for Source generators we can now have",
    "start": "1285620",
    "end": "1293419"
  },
  {
    "text": "more powerful partial methods and I think all of the all of the Microsoft Source generators are actually based on",
    "start": "1293419",
    "end": "1300200"
  },
  {
    "text": "some partial model so I create a file and create a method that I attribute it with an attribute and then this partial",
    "start": "1300200",
    "end": "1306860"
  },
  {
    "text": "method will be implemented by the generator and in C sharp 11",
    "start": "1306860",
    "end": "1313580"
  },
  {
    "text": "we have also file scoped types this helps also with generators because if",
    "start": "1313580",
    "end": "1319220"
  },
  {
    "text": "the generator creates a a type that I already created manually as well that",
    "start": "1319220",
    "end": "1324679"
  },
  {
    "text": "have the same name in the same namespace and this is a ambiguity so in order to avoid that I could make some of my types",
    "start": "1324679",
    "end": "1331039"
  },
  {
    "text": "which clash with the generator as file type and then although they have the same name they won't clash anymore",
    "start": "1331039",
    "end": "1338440"
  },
  {
    "text": "okay now let's get into building a source generator",
    "start": "1339620",
    "end": "1346899"
  },
  {
    "text": "the example that I would like to show is",
    "start": "1357460",
    "end": "1362919"
  },
  {
    "text": "enum is defined so we have actually let's go to the benchmarks",
    "start": "1362960",
    "end": "1370000"
  },
  {
    "text": "what we have here is basically a version the PCL version of is defined in.net",
    "start": "1373460",
    "end": "1381380"
  },
  {
    "text": "framework this wasn't generic yet but um in.net co-ops.net7 that I'm using here it's also there's a",
    "start": "1381380",
    "end": "1387860"
  },
  {
    "text": "there's a generic overload of it and the is defined has a bit of a",
    "start": "1387860",
    "end": "1393260"
  },
  {
    "text": "performance implication because under the hood it does reflection again to inspect this enum and then give us the",
    "start": "1393260",
    "end": "1401720"
  },
  {
    "text": "information whether the type the the constant that we give in is actually defined and I think it caches it then in",
    "start": "1401720",
    "end": "1408559"
  },
  {
    "text": "an in an array and then does a binary research on that and for smaller sized",
    "start": "1408559",
    "end": "1416539"
  },
  {
    "text": "genomes this is not the fastest so an actual faster version would be if",
    "start": "1416539",
    "end": "1422720"
  },
  {
    "text": "we would handle it ourselves if we just have for this log level that's the",
    "start": "1422720",
    "end": "1428360"
  },
  {
    "text": "Microsoft extensions logging log level type where we have our seven constants",
    "start": "1428360",
    "end": "1434780"
  },
  {
    "text": "we could basically Define it ourselves and say if this value give in is any of",
    "start": "1434780",
    "end": "1440179"
  },
  {
    "text": "these then it is defined otherwise it's not but this manual implementation is yeah",
    "start": "1440179",
    "end": "1446179"
  },
  {
    "text": "it's tedious I know exactly I know ahead of time exactly what I'm going to be writing if I would implement this for a",
    "start": "1446179",
    "end": "1452179"
  },
  {
    "text": "different enum it would look like it would look exactly the same well it had the same logic of just iterating through",
    "start": "1452179",
    "end": "1457940"
  },
  {
    "text": "all the checking all the constants and if a new value to this log level would",
    "start": "1457940",
    "end": "1463580"
  },
  {
    "text": "be added I must not forget to actually add it to my manual implementation as",
    "start": "1463580",
    "end": "1468980"
  },
  {
    "text": "well this is a bit tedious and also a bit of a maintenance well hell is a bit",
    "start": "1468980",
    "end": "1474140"
  },
  {
    "text": "of an overstatement but the maintenance risk and now this is a super example of",
    "start": "1474140",
    "end": "1480020"
  },
  {
    "text": "a source generator because I already know ahead of time what I should generate and basically it's this as a",
    "start": "1480020",
    "end": "1486440"
  },
  {
    "text": "string so the example that I would like to have is again we Define a partial a partial type",
    "start": "1486440",
    "end": "1494600"
  },
  {
    "text": "where the source generator then can add methods in and we attribute this with the is enum",
    "start": "1494600",
    "end": "1501260"
  },
  {
    "text": "defined attribute this is a c-sharp 11 attribute it's actually a generic",
    "start": "1501260",
    "end": "1506360"
  },
  {
    "text": "attribute um with the enum type so we constraint",
    "start": "1506360",
    "end": "1512720"
  },
  {
    "text": "this this must be an enum and then the search motor can kick in and generate code for that",
    "start": "1512720",
    "end": "1520120"
  },
  {
    "text": "now I like testing especially when starting a generator and then it gets",
    "start": "1521240",
    "end": "1527179"
  },
  {
    "text": "bigger and bigger it's from my experience really really helpful to have to have a suit of tests to not break",
    "start": "1527179",
    "end": "1532520"
  },
  {
    "text": "previously working scenarios and there is a package from Microsoft",
    "start": "1532520",
    "end": "1539320"
  },
  {
    "text": "which is called into one project right yes there it is",
    "start": "1541760",
    "end": "1550900"
  },
  {
    "text": "which is called",
    "start": "1553279",
    "end": "1556720"
  },
  {
    "text": "microsoft.codonealysis.csharp.swatch.testing dot Ms test so what we see here is because the source generators are the compiler",
    "start": "1560200",
    "end": "1567200"
  },
  {
    "text": "platform for both c-sharp and Visual Basic we could also write the source unit for Visual Basic",
    "start": "1567200",
    "end": "1572799"
  },
  {
    "text": "F-sharp we can't because F sharp is not using wrestling",
    "start": "1572799",
    "end": "1578260"
  },
  {
    "text": "and there is an MS test implementation of this testing framework we could also",
    "start": "1578480",
    "end": "1583940"
  },
  {
    "text": "select X unit there's also packages for X unit and end unit",
    "start": "1583940",
    "end": "1589000"
  },
  {
    "text": "and with this package we can now Define our tests and what we see there is a lot of strings I'm using wall string",
    "start": "1590600",
    "end": "1595700"
  },
  {
    "text": "literals here I really really like them especially for for testing whistling related code",
    "start": "1595700",
    "end": "1601159"
  },
  {
    "text": "I have here an input it is this attribute that we that we saw I also want to generate this attribute at",
    "start": "1601159",
    "end": "1607820"
  },
  {
    "text": "compile time and this is actually a nice feature from from Rider if we enable syntax",
    "start": "1607820",
    "end": "1614600"
  },
  {
    "text": "inspections I believe",
    "start": "1614600",
    "end": "1620059"
  },
  {
    "text": "then yeah then what actually when does this C sharp chord because it put here they think it's called a language",
    "start": "1620059",
    "end": "1626559"
  },
  {
    "text": "injections actually when does this string be a s c sharp syntax",
    "start": "1626559",
    "end": "1633020"
  },
  {
    "text": "but even without this highlighting in in other Ides I really like the it was doing literals",
    "start": "1633020",
    "end": "1640460"
  },
  {
    "text": "because we can really nicely format our c-sharp code and I have one test where we if we have",
    "start": "1640460",
    "end": "1648679"
  },
  {
    "text": "a partial type but there is no attribute on it the source generator shouldn't generate anything it should only",
    "start": "1648679",
    "end": "1653779"
  },
  {
    "text": "generate the attribute which we verify here this is Edom defined attribute.g.cs",
    "start": "1653779",
    "end": "1659600"
  },
  {
    "text": "should be should be generated as the string then we have another test where we",
    "start": "1659600",
    "end": "1665600"
  },
  {
    "text": "actually have the attribute on this partial type and then we expect actually this method",
    "start": "1665600",
    "end": "1672020"
  },
  {
    "text": "to be created so we add another partial class enum info which should have the",
    "start": "1672020",
    "end": "1677659"
  },
  {
    "text": "name of the class where the attribute is on this is now all this we will get this all",
    "start": "1677659",
    "end": "1684020"
  },
  {
    "text": "with the cement with the syntactic information and then we create an is defined method",
    "start": "1684020",
    "end": "1691299"
  },
  {
    "text": "and we turn this this condition to see is it any of this string comparison",
    "start": "1691299",
    "end": "1698240"
  },
  {
    "text": "constants now what we do here is we always refer to the global identifier to the global",
    "start": "1698240",
    "end": "1704840"
  },
  {
    "text": "namespace Elias Alias this is because what if the user defines their own system string",
    "start": "1704840",
    "end": "1711559"
  },
  {
    "text": "comparison then the source generator could create code that again has a violation and then it wouldn't compile",
    "start": "1711559",
    "end": "1717740"
  },
  {
    "text": "we must be very careful that our source generator creates code that is compilable because in the pipeline",
    "start": "1717740",
    "end": "1724700"
  },
  {
    "text": "now the first step is we get the code of the user the compilation of the user",
    "start": "1724700",
    "end": "1730220"
  },
  {
    "text": "then this gets fed in to the source generator The Source generator now may",
    "start": "1730220",
    "end": "1735620"
  },
  {
    "text": "add may or may not add multiple additional documents and then all of those",
    "start": "1735620",
    "end": "1741380"
  },
  {
    "text": "documents are compiled again as one and this is then the final the final result",
    "start": "1741380",
    "end": "1747320"
  },
  {
    "text": "that will be produced so if I have an error or I cause an ambiguity in one of those generated files this entire",
    "start": "1747320",
    "end": "1753740"
  },
  {
    "text": "compilation will fail so it's always a good it's always good good habit to refer to the global to the",
    "start": "1753740",
    "end": "1761360"
  },
  {
    "text": "global namespace alias and it's also always good style to add",
    "start": "1761360",
    "end": "1767179"
  },
  {
    "text": "the auto generated comment on top of the file so that tooling for example on the other analyzers understand this is a",
    "start": "1767179",
    "end": "1773899"
  },
  {
    "text": "generated file I shouldn't really produce warnings on that file because the user doesn't really have influence",
    "start": "1773899",
    "end": "1779539"
  },
  {
    "text": "on this file it's generated by generator that he or she may not own",
    "start": "1779539",
    "end": "1785980"
  },
  {
    "text": "and then we expect that this is enumdefined.g.cs file is generated",
    "start": "1786919",
    "end": "1792919"
  },
  {
    "text": "and also a bit of a corner case what if the user defines multiple",
    "start": "1792919",
    "end": "1798679"
  },
  {
    "text": "um I don't know what this is a different example interesting example is where the user defines a",
    "start": "1798679",
    "end": "1805460"
  },
  {
    "text": "a class in the in the global namespace we need special special attribution for",
    "start": "1805460",
    "end": "1812120"
  },
  {
    "text": "that because we can't then put it into a namespace and again we expect then the according",
    "start": "1812120",
    "end": "1819860"
  },
  {
    "text": "codes to be generated and also if we have a enum In This Very case if it's empty",
    "start": "1819860",
    "end": "1827480"
  },
  {
    "text": "then we just quit false return false",
    "start": "1827480",
    "end": "1832419"
  },
  {
    "text": "so now let's get into the anatomy of our generator the package that we'll be consuming is",
    "start": "1832940",
    "end": "1841960"
  },
  {
    "text": "microsoft.codonealysis.csharp.workspaces I think in this example I'm not I'm actually not using the workspaces part we could also there's also a package",
    "start": "1842320",
    "end": "1849080"
  },
  {
    "text": "which is microsoft.codoness.csharp which contains the syntactic and",
    "start": "1849080",
    "end": "1854299"
  },
  {
    "text": "semantic models of onesie sharp and also the Base Class says for the for the base",
    "start": "1854299",
    "end": "1860600"
  },
  {
    "text": "interfaces for the source generators also there is a microsoft.com",
    "start": "1860600",
    "end": "1865659"
  },
  {
    "text": "assist.analysis package that I always like to add because it has warnings and",
    "start": "1865659",
    "end": "1870919"
  },
  {
    "text": "infos about how to use Roslyn correctly especially when it comes to equality there were some potential pitfalls there",
    "start": "1870919",
    "end": "1879460"
  },
  {
    "text": "now I'm doing multi-targeting here this is not really a supported scenario",
    "start": "1880340",
    "end": "1885799"
  },
  {
    "text": "Source generators and all other wasting components analyzers and such they currently all must Implement net",
    "start": "1885799",
    "end": "1892100"
  },
  {
    "text": "standard 2.0 this is because of tooling for example",
    "start": "1892100",
    "end": "1897440"
  },
  {
    "text": "wider the backend of wider is I think on.net7 but Visual Studio is still on.net",
    "start": "1897440",
    "end": "1903140"
  },
  {
    "text": "framework so we can't use any.net core libraries it must be open standard 2.0 I",
    "start": "1903140",
    "end": "1909500"
  },
  {
    "text": "still do multi-targeting here in order to get nullable annotations because the.net standard 2.0",
    "start": "1909500",
    "end": "1916120"
  },
  {
    "text": "reference assemblies they are not annotated with nullable annotations yet but I still like non-ability warnings if",
    "start": "1916120",
    "end": "1922520"
  },
  {
    "text": "I make some mistakes and this is how I enable them this is a bit of an advanced not supported scenarios but in case it",
    "start": "1922520",
    "end": "1929899"
  },
  {
    "text": "is very helpful to avoid null errors because generators should not crash",
    "start": "1929899",
    "end": "1935919"
  },
  {
    "text": "and then we start with implementing this",
    "start": "1937340",
    "end": "1944059"
  },
  {
    "text": "interface here this is already the newer interface",
    "start": "1944059",
    "end": "1949299"
  },
  {
    "text": "how many of you do know the site source.net",
    "start": "1949880",
    "end": "1956360"
  },
  {
    "text": "I've seen a couple of hands this is the source code browser for the BCL The Base Class Library where we for example can",
    "start": "1956360",
    "end": "1962960"
  },
  {
    "text": "find a value provider",
    "start": "1962960",
    "end": "1966520"
  },
  {
    "text": "with a not value provider a Time provider which is a new abstraction that is",
    "start": "1969020",
    "end": "1974360"
  },
  {
    "text": "coming up in.net 8. and the same thing exists also for a waslam source code",
    "start": "1974360",
    "end": "1980419"
  },
  {
    "text": "which is Source waslin.io by the way all the resources and things I have there in the presentation if you want to check",
    "start": "1980419",
    "end": "1986000"
  },
  {
    "text": "them out later we can find the interface I Source",
    "start": "1986000",
    "end": "1991760"
  },
  {
    "text": "generator and this isosce generator interface is the one that has been added with.net 5.",
    "start": "1991760",
    "end": "1998600"
  },
  {
    "text": "and this is actually now considered deprecated because this has a bit of a performance",
    "start": "1998600",
    "end": "2004840"
  },
  {
    "text": "pit fall at some certain sizes I will come to that later",
    "start": "2004840",
    "end": "2010480"
  },
  {
    "text": "the newer version that we should use is the incremental version I incremental",
    "start": "2010480",
    "end": "2016360"
  },
  {
    "text": "generator and we will find out what the incremented what the incrementability",
    "start": "2016360",
    "end": "2022360"
  },
  {
    "text": "about that is at the end of our example so we will start implementing this",
    "start": "2022360",
    "end": "2029140"
  },
  {
    "text": "interface and we also put the type the attribute generator on top of this file so that",
    "start": "2029140",
    "end": "2035740"
  },
  {
    "text": "tooling such as watching tooling the IDE or the net SDK knows okay this is a",
    "start": "2035740",
    "end": "2042039"
  },
  {
    "text": "generator this is important as part of the compilation",
    "start": "2042039",
    "end": "2048720"
  },
  {
    "text": "and well I said in the beginning that social meters are unordered and they cannot depend on each other there is a",
    "start": "2049179",
    "end": "2055419"
  },
  {
    "text": "little bit of a um wiggle room there let's have a look at the versioning",
    "start": "2055419",
    "end": "2063580"
  },
  {
    "text": "if I oh right I have that",
    "start": "2063580",
    "end": "2069280"
  },
  {
    "text": "here",
    "start": "2069280",
    "end": "2071760"
  },
  {
    "text": "no oops",
    "start": "2080919",
    "end": "2083940"
  },
  {
    "text": "no so here all the versions that of waslind",
    "start": "2086679",
    "end": "2092320"
  },
  {
    "text": "that have been what of wasteland with Source generator functionality has been created so it",
    "start": "2092320",
    "end": "2098140"
  },
  {
    "text": "started with Roslyn 3.8 which is part of the.net 5 SDK and this",
    "start": "2098140",
    "end": "2104920"
  },
  {
    "text": "added the eyesource generators now it's 3.9 we got this",
    "start": "2104920",
    "end": "2110079"
  },
  {
    "text": "concept called register for post initialization and post initialization",
    "start": "2110079",
    "end": "2115119"
  },
  {
    "text": "is a step just before the other step so what we now have is we have our input",
    "start": "2115119",
    "end": "2122260"
  },
  {
    "text": "the compiler now has the chance of creating some code unconditionally where",
    "start": "2122260",
    "end": "2128380"
  },
  {
    "text": "the the generator doesn't doesn't have the",
    "start": "2128380",
    "end": "2133660"
  },
  {
    "text": "user's code as an input yet so we can create some code and unconditionally for",
    "start": "2133660",
    "end": "2138700"
  },
  {
    "text": "example this attribute I always want to emit it so this is a good candidate for that and then in a second step we can",
    "start": "2138700",
    "end": "2144820"
  },
  {
    "text": "emit conditional files that are based on on the users on the user's code and this",
    "start": "2144820",
    "end": "2152140"
  },
  {
    "text": "step where we create the second set of documents actually sees what we create in this post is",
    "start": "2152140",
    "end": "2158140"
  },
  {
    "text": "initialization so we have two steps and other generators so if other generators can",
    "start": "2158140",
    "end": "2164320"
  },
  {
    "text": "see the code that this channel that is generated by post initialization from",
    "start": "2164320",
    "end": "2169480"
  },
  {
    "text": "other generators as well so first all the post initialization from all the seven generators we have in our project are executed and then the channel",
    "start": "2169480",
    "end": "2176440"
  },
  {
    "text": "execution and here is now the new version in 4.1",
    "start": "2176440",
    "end": "2183180"
  },
  {
    "text": "4.0.1 which got shipped with the.net 6.0 SDK we have added I incremental",
    "start": "2183180",
    "end": "2189579"
  },
  {
    "text": "generators I also list the tooling visual studio and Rider which and visual studio code",
    "start": "2189579",
    "end": "2195760"
  },
  {
    "text": "which support all of all of these versions if you want to refer to this later",
    "start": "2195760",
    "end": "2203280"
  },
  {
    "text": "there it is so now we have the base of our generator",
    "start": "2205900",
    "end": "2212800"
  },
  {
    "text": "defined and the compiler doing compilation can actually use it and call into it",
    "start": "2212800",
    "end": "2218619"
  },
  {
    "text": "and in the first step we do this register for post initialization and in",
    "start": "2218619",
    "end": "2225040"
  },
  {
    "text": "this post initialization we create this this attribute I created in the",
    "start": "2225040",
    "end": "2232599"
  },
  {
    "text": "roslin.generated namespace and it also has the generated code attribute",
    "start": "2232599",
    "end": "2239700"
  },
  {
    "text": "attribute so it's always it's also good to practice that so there's a lot of best practices of how to generate code",
    "start": "2239700",
    "end": "2246280"
  },
  {
    "text": "to put the generated code attribute on top of members and and types that that",
    "start": "2246280",
    "end": "2252280"
  },
  {
    "text": "you generate so that again tooling knows that this is a generated file or a generated this is generated code because",
    "start": "2252280",
    "end": "2258940"
  },
  {
    "text": "the comment the auto-generated comment is good for",
    "start": "2258940",
    "end": "2264460"
  },
  {
    "text": "waslam based tools because waslam has gets also the that's a comment trivia as",
    "start": "2264460",
    "end": "2269859"
  },
  {
    "text": "an input but if we build a for example an MS build extension that is based on on an il on an already compiled version",
    "start": "2269859",
    "end": "2277000"
  },
  {
    "text": "of the code this attribute isn't there anymore and these tools so that these tools can also understand what generated",
    "start": "2277000",
    "end": "2282760"
  },
  {
    "text": "code is it's good practice to slap the generated code attribute on top of these types and members as well",
    "start": "2282760",
    "end": "2290020"
  },
  {
    "text": "so now we have this attribute and can actually use it if we jump to the example",
    "start": "2290020",
    "end": "2296680"
  },
  {
    "text": "we can actually use this attribute this generated attribute here it is in our example",
    "start": "2296680",
    "end": "2304960"
  },
  {
    "text": "and now we need to build up our Pipeline with the incremental generators we built a pipeline of",
    "start": "2304960",
    "end": "2311440"
  },
  {
    "text": "first we get an input for example the source code where also the input could be additional files like a Json file that we want to create that we want to",
    "start": "2311440",
    "end": "2317980"
  },
  {
    "text": "transpile into the sharp code and then select the interesting parts we",
    "start": "2317980",
    "end": "2324940"
  },
  {
    "text": "filter the interesting parts for us and then from that information create a string that is the new document that we",
    "start": "2324940",
    "end": "2331240"
  },
  {
    "text": "want to emit so let's again go to Sharp Lab in order",
    "start": "2331240",
    "end": "2338020"
  },
  {
    "text": "to know what we want to search for in our example we have a partial",
    "start": "2338020",
    "end": "2346599"
  },
  {
    "text": "class I call it my class which has an attribute on it",
    "start": "2346599",
    "end": "2354700"
  },
  {
    "text": "um so we also let's omit the attribute it also has an attribute and this is what we what we need to",
    "start": "2354700",
    "end": "2361359"
  },
  {
    "text": "search for this my class is a so-called class declaration",
    "start": "2361359",
    "end": "2367960"
  },
  {
    "text": "so we get all of the notes and tokens that we see all of the nodes that you see here get an input get as an input to",
    "start": "2367960",
    "end": "2373839"
  },
  {
    "text": "the generator so we need to filter all of the class declarations that also have the partial keyword because if they",
    "start": "2373839",
    "end": "2380140"
  },
  {
    "text": "don't have the partial keyword the search generator can't extend under equals this type",
    "start": "2380140",
    "end": "2386619"
  },
  {
    "text": "so let's go find all of these",
    "start": "2386619",
    "end": "2390720"
  },
  {
    "text": "and we do this via the syntax provider the name is water revealing it provides",
    "start": "2391839",
    "end": "2398079"
  },
  {
    "text": "us the syntax information of the user's source code there is many more providers",
    "start": "2398079",
    "end": "2403839"
  },
  {
    "text": "there is for example a compilation provider which contains then semantic",
    "start": "2403839",
    "end": "2408940"
  },
  {
    "text": "information we also have the additional text provider that we saw earlier this could",
    "start": "2408940",
    "end": "2415000"
  },
  {
    "text": "be the XML or Json file we also can get a hold of the pass options this is contains for example",
    "start": "2415000",
    "end": "2421420"
  },
  {
    "text": "information with which language version which which is it Visual Basic was a sharp and which version in our case C",
    "start": "2421420",
    "end": "2427900"
  },
  {
    "text": "sharp 11 is this called compiled",
    "start": "2427900",
    "end": "2432059"
  },
  {
    "text": "so we then create a this is actually a new type this four attribute with",
    "start": "2433660",
    "end": "2439420"
  },
  {
    "text": "metadata name has been added in I need to go cheat",
    "start": "2439420",
    "end": "2445180"
  },
  {
    "text": "has been added in 3.4.3.1 this is the 6",
    "start": "2445180",
    "end": "2451440"
  },
  {
    "text": "6.0.4 SDK and actually the version from Wilson that we consume is significant",
    "start": "2451440",
    "end": "2457900"
  },
  {
    "text": "because that also marks the minimum required SDK version so that the user can actually consume The Source",
    "start": "2457900",
    "end": "2464980"
  },
  {
    "text": "generators so in our case we need at least the 6.0.4 SDK if I use a higher version for",
    "start": "2464980",
    "end": "2472900"
  },
  {
    "text": "example version 4.4.0 we would require at least dot Net 7 SDK so be mindful",
    "start": "2472900",
    "end": "2479800"
  },
  {
    "text": "about with how many features of generators you want to use and also",
    "start": "2479800",
    "end": "2485140"
  },
  {
    "text": "which is the minimum the minimum SDK requirement for your for your consumers",
    "start": "2485140",
    "end": "2491940"
  },
  {
    "text": "and with this new version we can actually it's very simple now to find",
    "start": "2493599",
    "end": "2500460"
  },
  {
    "text": "syntaxes that actually have an attribute on top so in our case we get every type",
    "start": "2500460",
    "end": "2506440"
  },
  {
    "text": "that has this attribute as a metadata name",
    "start": "2506440",
    "end": "2511480"
  },
  {
    "text": "in metadata name since we have a generic attribute I'm sure you've seen this already in in some debug debug output",
    "start": "2511480",
    "end": "2519880"
  },
  {
    "text": "when we have a generic method a generic type it's actually we have at the end a backtick and then the number of generic",
    "start": "2519880",
    "end": "2526359"
  },
  {
    "text": "type parameters the type arguments that this type has so in metadata this is the",
    "start": "2526359",
    "end": "2532180"
  },
  {
    "text": "name of our of our attribute and we pass this into our four attribute",
    "start": "2532180",
    "end": "2538960"
  },
  {
    "text": "with metadata name and then we can then we have a Lambda a predicate this predicate returns true",
    "start": "2538960",
    "end": "2545920"
  },
  {
    "text": "for every node that we are interested in so we get in all of the syntax nodes so",
    "start": "2545920",
    "end": "2552940"
  },
  {
    "text": "we get in the we get in the entire compilation unit the using directive",
    "start": "2552940",
    "end": "2559839"
  },
  {
    "text": "and the class declaration and this is the one that we wanna that we want to filter",
    "start": "2559839",
    "end": "2565180"
  },
  {
    "text": "so let's search these let's get a hold of the node and say is this",
    "start": "2565180",
    "end": "2571119"
  },
  {
    "text": "a class declaration syntax and we also want to know",
    "start": "2571119",
    "end": "2576460"
  },
  {
    "text": "if this class declaration syntax so let's say um syntax",
    "start": "2576460",
    "end": "2583480"
  },
  {
    "text": "has a partial modifier",
    "start": "2583480",
    "end": "2588040"
  },
  {
    "text": "these these keywords here they are called modifiers so we can get a hold of",
    "start": "2588579",
    "end": "2594520"
  },
  {
    "text": "the modifiers list and say do we have any",
    "start": "2594520",
    "end": "2603540"
  },
  {
    "text": "syntax kind that is partial",
    "start": "2604119",
    "end": "2609900"
  },
  {
    "text": "the partial keyword there it is and this now we turned this now returns",
    "start": "2610480",
    "end": "2616540"
  },
  {
    "text": "only true for all the class notes that has that are partial and also have this",
    "start": "2616540",
    "end": "2624220"
  },
  {
    "text": "attribute on top well at least one of these attributes we could also have multiple it requires at least one",
    "start": "2624220",
    "end": "2631540"
  },
  {
    "text": "and then we have a transform so we can now extract the information",
    "start": "2631540",
    "end": "2636960"
  },
  {
    "text": "that we that we need so via this context",
    "start": "2636960",
    "end": "2641980"
  },
  {
    "text": "we get the information from this from the predicate that we have before so we do",
    "start": "2641980",
    "end": "2647260"
  },
  {
    "text": "get the target node the target node is our class information so let's extract that because that's a",
    "start": "2647260",
    "end": "2654220"
  },
  {
    "text": "that's actually the base of syntax notebook but we can safely cast it because we have we did our type check up",
    "start": "2654220",
    "end": "2660520"
  },
  {
    "text": "here already so this will be our class",
    "start": "2660520",
    "end": "2665800"
  },
  {
    "text": "declaration",
    "start": "2665800",
    "end": "2668520"
  },
  {
    "text": "class decoration syntax and we also want to get the symbol",
    "start": "2670900",
    "end": "2676960"
  },
  {
    "text": "information behind it because we require the simple",
    "start": "2676960",
    "end": "2682780"
  },
  {
    "text": "information",
    "start": "2682780",
    "end": "2685079"
  },
  {
    "text": "um in order to get a hold of this type that we refer to because we then need to",
    "start": "2690940",
    "end": "2696339"
  },
  {
    "text": "inspect this log level type and understand all of the of the constants that are defined at this type",
    "start": "2696339",
    "end": "2705180"
  },
  {
    "text": "so we will also get a hold of",
    "start": "2705280",
    "end": "2709200"
  },
  {
    "text": "uh symbol and we know in this case I know it's an it's",
    "start": "2710819",
    "end": "2717460"
  },
  {
    "text": "I named type symbol it's a symbol that also has a name and we get this in the context",
    "start": "2717460",
    "end": "2724480"
  },
  {
    "text": "dot target symbol so there's another symbolic information the semantic information",
    "start": "2724480",
    "end": "2730260"
  },
  {
    "text": "of the class which has this attribute",
    "start": "2730260",
    "end": "2735420"
  },
  {
    "text": "and we put this and I put this now here in a in a value Tuple so that the next step has this as an input",
    "start": "2736660",
    "end": "2744579"
  },
  {
    "text": "and additionally also the attributes the attributes list the attribute",
    "start": "2744579",
    "end": "2750400"
  },
  {
    "text": "data so that we can extract the information out of that",
    "start": "2750400",
    "end": "2755280"
  },
  {
    "text": "in the respect of time I have implemented the rest of the pipeline already so let's go through the rest of",
    "start": "2756160",
    "end": "2761440"
  },
  {
    "text": "the pipeline I'm using immutable array here to create lists because that fits the worstland",
    "start": "2761440",
    "end": "2768040"
  },
  {
    "text": "programming model in Roslyn you won't find any public list list usages because",
    "start": "2768040",
    "end": "2775180"
  },
  {
    "text": "in Wasteland everything is immutable that is so that different compilations can run in parallel they are the entire",
    "start": "2775180",
    "end": "2782680"
  },
  {
    "text": "syntax tree is immutable and I want to fit that model and use the immutable",
    "start": "2782680",
    "end": "2787960"
  },
  {
    "text": "versions of the of the of the collections as well so we",
    "start": "2787960",
    "end": "2794560"
  },
  {
    "text": "what I'm basically doing here is because we could have multiple multiple attributes at at a class",
    "start": "2794560",
    "end": "2802839"
  },
  {
    "text": "I think I have this example I had this example in our uh in the unit tests so we extract we extract all of them in a",
    "start": "2802839",
    "end": "2810160"
  },
  {
    "text": "select many this is very similar to link but it's actually not link so on the syntax providers that we have the",
    "start": "2810160",
    "end": "2816339"
  },
  {
    "text": "pipeline that we built we have transformations we can select which is which has the",
    "start": "2816339",
    "end": "2823240"
  },
  {
    "text": "which has the semantics of the link select but it isn't actually link it's a it's a new implementation from the",
    "start": "2823240",
    "end": "2828280"
  },
  {
    "text": "generators and we can also collect that means if we",
    "start": "2828280",
    "end": "2833440"
  },
  {
    "text": "have if we have a collection if we have multiple multiple matches we can break",
    "start": "2833440",
    "end": "2838540"
  },
  {
    "text": "this down to a single one so basically convert it from an innumerable to an immutable array",
    "start": "2838540",
    "end": "2846540"
  },
  {
    "text": "and after that we now need to get all the information out of those out of those symbols and",
    "start": "2846700",
    "end": "2853839"
  },
  {
    "text": "those syntaxes because this will come in handy later the incremental Source generators due to",
    "start": "2853839",
    "end": "2860680"
  },
  {
    "text": "the incrementality they allow memorization of several steps and this",
    "start": "2860680",
    "end": "2867819"
  },
  {
    "text": "memorization doesn't work well on the waslam types because they are immutable and they are in a tree we can't really",
    "start": "2867819",
    "end": "2874900"
  },
  {
    "text": "say that if in the next if we if we get in the same compilation again we can't",
    "start": "2874900",
    "end": "2879940"
  },
  {
    "text": "really say is this now a different class or not so the quality doesn't really work on these wrestling types very well",
    "start": "2879940",
    "end": "2885220"
  },
  {
    "text": "so we need to extract these into information that is very nicely equatable for example string information",
    "start": "2885220",
    "end": "2892540"
  },
  {
    "text": "so what we're doing here we're getting we're getting the attribute data and filtering this now I have here an",
    "start": "2892540",
    "end": "2899020"
  },
  {
    "text": "enum there is enum defined info this is just a custom record which now holds all",
    "start": "2899020",
    "end": "2904599"
  },
  {
    "text": "of the information we get we get the Boolean is this type that we found is this class in the",
    "start": "2904599",
    "end": "2911140"
  },
  {
    "text": "global namespace and also we get the name of the namespace",
    "start": "2911140",
    "end": "2917500"
  },
  {
    "text": "we get the name of the Class via the symbolic information",
    "start": "2917500",
    "end": "2923020"
  },
  {
    "text": "we also get all of the and now we get all of the members but we again need to",
    "start": "2923020",
    "end": "2928119"
  },
  {
    "text": "filter them because while building this generator actually learns that enorms also have a",
    "start": "2928119",
    "end": "2936160"
  },
  {
    "text": "um a Constructor so we can write if we have the log level here we could",
    "start": "2936160",
    "end": "2942339"
  },
  {
    "text": "write a new log level every enum also has a has a has a",
    "start": "2942339",
    "end": "2949000"
  },
  {
    "text": "default Constructor so we need to filter that one out oops",
    "start": "2949000",
    "end": "2955420"
  },
  {
    "text": "and we do that by we get all of the members of this",
    "start": "2955420",
    "end": "2960819"
  },
  {
    "text": "type we want to find and this is now the the filter we want to find all of the fields",
    "start": "2960819",
    "end": "2966520"
  },
  {
    "text": "and this now includes the The Constructor and then we basically are good to go",
    "start": "2966520",
    "end": "2975520"
  },
  {
    "text": "and have the final step in the pipeline the final step is the register Source",
    "start": "2975520",
    "end": "2980920"
  },
  {
    "text": "output this is then what actually creates the documents and the strings so there is various methods how you can",
    "start": "2980920",
    "end": "2988960"
  },
  {
    "text": "assemble this string I'm using a string Builder here and wrapping it in an",
    "start": "2988960",
    "end": "2994000"
  },
  {
    "text": "indented text writer because you can do nice intention with that and basically now create line by line the document for",
    "start": "2994000",
    "end": "3002579"
  },
  {
    "text": "um for the compiler then to compile so we start with an attribute I also like to always enable nullable annotations",
    "start": "3002579",
    "end": "3009240"
  },
  {
    "text": "for these documents then we go through all of the enum infos and per Elum info",
    "start": "3009240",
    "end": "3016020"
  },
  {
    "text": "we create a new namespace if it is in the global namespace so this is very relevant because otherwise we would get",
    "start": "3016020",
    "end": "3023160"
  },
  {
    "text": "compiler errors if if we would try to access the namespace if it's in a no Global namespace then I think this is",
    "start": "3023160",
    "end": "3029880"
  },
  {
    "text": "some unspeakable name which won't compile then we create this is the extension",
    "start": "3029880",
    "end": "3035640"
  },
  {
    "text": "point the partial class and then we emit the the method that we",
    "start": "3035640",
    "end": "3041400"
  },
  {
    "text": "want to create we with the enum type that we have we have put in the attribute",
    "start": "3041400",
    "end": "3047579"
  },
  {
    "text": "then we want to understand hey do we have any constants in this and this in this enum if not we return false",
    "start": "3047579",
    "end": "3054900"
  },
  {
    "text": "otherwise again line by line we create this switch expression and here we do some indentation to to",
    "start": "3054900",
    "end": "3062640"
  },
  {
    "text": "format this nicely and then it then we close all the braces again and at the very end we then call",
    "start": "3062640",
    "end": "3069599"
  },
  {
    "text": "the the method add Source this is then what really really adds this code to the",
    "start": "3069599",
    "end": "3076260"
  },
  {
    "text": "to the compilation and we give it a name.g.cs and now",
    "start": "3076260",
    "end": "3082980"
  },
  {
    "text": "we actually have this enum info",
    "start": "3082980",
    "end": "3090119"
  },
  {
    "text": "generated by our source generator and again yeah this is now basically the",
    "start": "3090119",
    "end": "3095400"
  },
  {
    "text": "very same version as the handheld version but if we would add a new enum then this would get added automatically",
    "start": "3095400",
    "end": "3101819"
  },
  {
    "text": "I think I have a to have a test for that I believe I no I do not but we could add",
    "start": "3101819",
    "end": "3108000"
  },
  {
    "text": "like another one let's say the the let's create my let's create our own enum public you know mine",
    "start": "3108000",
    "end": "3116339"
  },
  {
    "text": "let's Circle first let's use this mine here",
    "start": "3116339",
    "end": "3121559"
  },
  {
    "text": "now we should also create there it is",
    "start": "3121559",
    "end": "3127760"
  },
  {
    "text": "this is defined here and when we add another one second",
    "start": "3127760",
    "end": "3134720"
  },
  {
    "text": "one second while I type now the new one gets created we can",
    "start": "3137280",
    "end": "3144359"
  },
  {
    "text": "actually see this nicely side by side just as I type",
    "start": "3144359",
    "end": "3149819"
  },
  {
    "text": "now the solution that kicks in and soon adds this new uh this new enum",
    "start": "3149819",
    "end": "3157200"
  },
  {
    "text": "to it it's going to start removing one the second one will disappear momentarily",
    "start": "3157200",
    "end": "3164300"
  },
  {
    "text": "and the cool thing is that in the source joint version version because it's just source code that gets emitted by the",
    "start": "3165960",
    "end": "3171359"
  },
  {
    "text": "compiler we can also add breakpoints so it's also very debuggable",
    "start": "3171359",
    "end": "3177180"
  },
  {
    "text": "and now comes the the performance Pitfall that I mentioned twice already because the thing is",
    "start": "3177180",
    "end": "3184020"
  },
  {
    "text": "let's add in the source code that we generate",
    "start": "3184020",
    "end": "3189680"
  },
  {
    "text": "so start right line a",
    "start": "3191579",
    "end": "3197640"
  },
  {
    "text": "daytime dot now",
    "start": "3197640",
    "end": "3200599"
  },
  {
    "text": "let's build oops build our solution",
    "start": "3204359",
    "end": "3210619"
  },
  {
    "text": "and let's have a look at the example jump to the generated code",
    "start": "3212339",
    "end": "3219619"
  },
  {
    "text": "and what we see here now is if I change the source code without actually",
    "start": "3221940",
    "end": "3227160"
  },
  {
    "text": "changing anything meaningful for our generator let's say I add a new line here currently we're at 11 14 0 3.",
    "start": "3227160",
    "end": "3237680"
  },
  {
    "text": "and oh sorry I already have to I already have to fix in place I I gave it away",
    "start": "3239280",
    "end": "3247040"
  },
  {
    "text": "so let's remove let's remove the fix there it is",
    "start": "3247559",
    "end": "3255260"
  },
  {
    "text": "now we have the expected Behavior by",
    "start": "3256680",
    "end": "3262680"
  },
  {
    "text": "uh 11 40 or free 11 40 35 and I just add a couple of",
    "start": "3262680",
    "end": "3268500"
  },
  {
    "text": "spaces and this will when I save this will but I'll generate it again but the same version of the",
    "start": "3268500",
    "end": "3275339"
  },
  {
    "text": "source code is generated again and this is where we could follow for a performance Cliff because for example this is what the net team experienced in",
    "start": "3275339",
    "end": "3281880"
  },
  {
    "text": "there in the in the dotnet runtime repo which is huge when the app generators there is a lot of input code and by just",
    "start": "3281880",
    "end": "3288599"
  },
  {
    "text": "by just by pressing a space everything gets created all this generators kick in and generate everything again which is",
    "start": "3288599",
    "end": "3294720"
  },
  {
    "text": "an incredible waste of resources and this is now where the incrementality of the incremental sourcing just kicks in",
    "start": "3294720",
    "end": "3301079"
  },
  {
    "text": "but it requires this equality that we have mentioned and we have one little issue in our equality pipe in our",
    "start": "3301079",
    "end": "3307980"
  },
  {
    "text": "equality pipeline because this type that",
    "start": "3307980",
    "end": "3313940"
  },
  {
    "text": "defined here it well it's a record struct so it actually implements equality but we also",
    "start": "3317760",
    "end": "3323880"
  },
  {
    "text": "have an immutable array and by default I think the implement the equals implementation of a multiplier way",
    "start": "3323880",
    "end": "3329579"
  },
  {
    "text": "checks reference equality of the backed away that it has which is a new instance so this will",
    "start": "3329579",
    "end": "3336180"
  },
  {
    "text": "never match what we actually need is a sequence equal so what we could do is overwrite",
    "start": "3336180",
    "end": "3342500"
  },
  {
    "text": "equals here in our type because each and every step in our pipeline that we have",
    "start": "3342500",
    "end": "3347579"
  },
  {
    "text": "built checks the previous invocation via a equality compare.default",
    "start": "3347579",
    "end": "3354000"
  },
  {
    "text": "or we can write our own equality comparer this is what we did here which",
    "start": "3354000",
    "end": "3359040"
  },
  {
    "text": "is basically just equaling all of the members and then on the array there's a sequence equal",
    "start": "3359040",
    "end": "3364980"
  },
  {
    "text": "and we can after every step of the pipeline we could add dot with comparer and add our own",
    "start": "3364980",
    "end": "3372660"
  },
  {
    "text": "comparer in which which now means that in the first step everything gets created Anew and in a subsequent step is",
    "start": "3372660",
    "end": "3380280"
  },
  {
    "text": "now if nothing relevant has changed in this in this enum that we that we create are in this in this record that we",
    "start": "3380280",
    "end": "3386460"
  },
  {
    "text": "create as a flow State uh then we abort the pipeline holds and it doesn't invoke",
    "start": "3386460",
    "end": "3394680"
  },
  {
    "text": "this um this new source code again so it doesn't get emitted so if I rebuild that",
    "start": "3394680",
    "end": "3401760"
  },
  {
    "text": "and go back to the example",
    "start": "3401760",
    "end": "3406640"
  },
  {
    "text": "here to the email info",
    "start": "3408180",
    "end": "3411740"
  },
  {
    "text": "and currently write 1170 and now I remove a couple of spaces",
    "start": "3413400",
    "end": "3419700"
  },
  {
    "text": "and let's wait a couple of seconds this will not change so in the pipeline now nothing really meaningful has changed",
    "start": "3419700",
    "end": "3426000"
  },
  {
    "text": "because we didn't change anything here but if we change something meaningful let's say we remove one of the is enum",
    "start": "3426000",
    "end": "3433859"
  },
  {
    "text": "defines now actually something meaningful has changed and now it actually did remove this one not",
    "start": "3433859",
    "end": "3441059"
  },
  {
    "text": "actually created this this output again and this is the very important part of",
    "start": "3441059",
    "end": "3447780"
  },
  {
    "text": "the incremental generator so that consumers don't experience in the IDE then a very sluggish a very delayed",
    "start": "3447780",
    "end": "3455640"
  },
  {
    "text": "experience and potentially even blocks the UI of of the IDE",
    "start": "3455640",
    "end": "3461000"
  },
  {
    "text": "so the key takeaway with the key point with the incremental generators is that each and every step should rather",
    "start": "3461160",
    "end": "3467700"
  },
  {
    "text": "quickly or as quickly as possible go away from the syntax and symbolic information from Roseland because they",
    "start": "3467700",
    "end": "3472859"
  },
  {
    "text": "are not nicely equatable and go to some custom defined nicely equality",
    "start": "3472859",
    "end": "3478680"
  },
  {
    "text": "comparable structures so that this pipeline is aborted as early as possible",
    "start": "3478680",
    "end": "3484079"
  },
  {
    "text": "and we save performance and",
    "start": "3484079",
    "end": "3490980"
  },
  {
    "text": "if you in the best practices I guess we we mentioned",
    "start": "3490980",
    "end": "3496800"
  },
  {
    "text": "all of them already so always put the auto generated comments and such on top refer to the global",
    "start": "3496800",
    "end": "3503000"
  },
  {
    "text": "namespace alias in order to avoid names name clashes and so on and definitely",
    "start": "3503000",
    "end": "3508020"
  },
  {
    "text": "mind the Western version that you use because that defines the minimum SDK",
    "start": "3508020",
    "end": "3513300"
  },
  {
    "text": "required I also have a couple of examples in this",
    "start": "3513300",
    "end": "3520440"
  },
  {
    "text": "slides and some additional resources if you want to know more about this uh if you go to",
    "start": "3520440",
    "end": "3528319"
  },
  {
    "text": "flashover.net NDC 2023 gen this links to",
    "start": "3528619",
    "end": "3534059"
  },
  {
    "text": "this very slide uh also with the contact information uh if there are some questions I can't answer right now you",
    "start": "3534059",
    "end": "3541440"
  },
  {
    "text": "can always ask me on any of my socials if you wish and I try to to answer",
    "start": "3541440",
    "end": "3547500"
  },
  {
    "text": "Source generated Source generator particular and voslink general questions",
    "start": "3547500",
    "end": "3552859"
  },
  {
    "text": "and I guess this now we have one minute for questions have I",
    "start": "3552859",
    "end": "3559079"
  },
  {
    "text": "left a question unanswered",
    "start": "3559079",
    "end": "3562339"
  },
  {
    "text": "okay cool then should I should have fun just hold on should I have a question about Chinese later on feel free to to",
    "start": "3564839",
    "end": "3571140"
  },
  {
    "text": "to contact me and post a picture if you wanna if you want to take part in the in the in the in the white Champions raffle",
    "start": "3571140",
    "end": "3578520"
  },
  {
    "text": "and I want to thank you very much for staying around and listening um [Applause]",
    "start": "3578520",
    "end": "3591659"
  }
]