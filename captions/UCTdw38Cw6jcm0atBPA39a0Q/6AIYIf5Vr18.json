[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "um so hello everybody my name is mikhail svetkin and today we are going to talk",
    "start": "5200",
    "end": "10240"
  },
  {
    "text": "about curtins we are going to talk a lot about them how they looks inside",
    "start": "10240",
    "end": "15599"
  },
  {
    "text": "and how hard it is to to to write them so there will be a lot of there will be a lot of code so please be reas be with",
    "start": "15599",
    "end": "23199"
  },
  {
    "text": "me it could be hard but i will try to explain everything step by step",
    "start": "23199",
    "end": "28720"
  },
  {
    "start": "28000",
    "end": "103000"
  },
  {
    "text": "so my plan is to first start to explain what is the accordions uh then we'll",
    "start": "28720",
    "end": "33760"
  },
  {
    "text": "take a look under the hood how they looks like and then we will talk about how to use them",
    "start": "33760",
    "end": "39120"
  },
  {
    "text": "and i want to start with the first of all i want to start with the ovary of c plus plus 20 curtain support because we",
    "start": "39120",
    "end": "45039"
  },
  {
    "text": "got it in only there so right now it's supported by my three major compilers",
    "start": "45039",
    "end": "51039"
  },
  {
    "text": "uh gcc supported from version 10 msvc supported it early but i tested only on",
    "start": "51039",
    "end": "56480"
  },
  {
    "text": "the latest so i'm not sure how good it was before and the clown supported from the eighth",
    "start": "56480",
    "end": "63039"
  },
  {
    "text": "version it's still under the experimental branch uh numspace and that",
    "start": "63039",
    "end": "68240"
  },
  {
    "text": "works okay so i don't know why it's still there yeah from the language we're getting three",
    "start": "68240",
    "end": "74880"
  },
  {
    "text": "new keywords so it's a call weight called ielt and core return and from the library standard library we",
    "start": "74880",
    "end": "81920"
  },
  {
    "text": "get few types not a lot of them and we will go through most of them to explain what they do",
    "start": "81920",
    "end": "90320"
  },
  {
    "text": "yeah by looking at this small support what we've got is should we obviously say",
    "start": "90799",
    "end": "95920"
  },
  {
    "text": "that it should be probably easy to write the coordinates because not so many things but",
    "start": "95920",
    "end": "101840"
  },
  {
    "text": "yeah before we go next i just want to put some motivation for us because we need",
    "start": "101840",
    "end": "107040"
  },
  {
    "start": "103000",
    "end": "218000"
  },
  {
    "text": "to understand how we can use them and uh let's say i heard the myth that curtin's helps to",
    "start": "107040",
    "end": "112880"
  },
  {
    "text": "write the synchronous code so and this is our statement which we want to prove today",
    "start": "112880",
    "end": "119119"
  },
  {
    "text": "and by proving that today we will take this piece of code so",
    "start": "119119",
    "end": "124159"
  },
  {
    "text": "i'm quite sure by looking at this you're like what this code is doing because despite the fact this is just 15 lines",
    "start": "124159",
    "end": "130399"
  },
  {
    "text": "it's hard to understand what it does it could be the reason because my code style which i choose is completely",
    "start": "130399",
    "end": "136640"
  },
  {
    "text": "terrible that's the first option second option is that the code is bad written that's also an option and the",
    "start": "136640",
    "end": "143440"
  },
  {
    "text": "third one is that it's just hard to write the synchronous code without the proper tools",
    "start": "143440",
    "end": "148480"
  },
  {
    "text": "so if you still don't understand what it does that's okay that's fine we will just go quickly through it just you will",
    "start": "148480",
    "end": "154480"
  },
  {
    "text": "understand so we have a function some worker it accepts the socket and the data",
    "start": "154480",
    "end": "160000"
  },
  {
    "text": "then we start some long computation task and we don't want to block the main thread so we kind of use the executor to",
    "start": "160000",
    "end": "166879"
  },
  {
    "text": "start some something and get the future then we do some fast computation then we",
    "start": "166879",
    "end": "172400"
  },
  {
    "text": "say they want to send this temporary result to the our socket then we set up a callback which is",
    "start": "172400",
    "end": "178400"
  },
  {
    "text": "supposed to say when we send the data we would be ready to receive the data and we again set up the",
    "start": "178400",
    "end": "185680"
  },
  {
    "text": "the callback and when this data arrived we will get the result from the future",
    "start": "185680",
    "end": "192000"
  },
  {
    "text": "take the data which we got the as a response and do some processing and send it back so as i said code is terrible",
    "start": "192000",
    "end": "198959"
  },
  {
    "text": "hard to understand i understand it it probably did not compile because i did some mistakes while i was writing it",
    "start": "198959",
    "end": "204720"
  },
  {
    "text": "but it could be could be so just keep that and don't keep it in mind no we will come back to that we'll",
    "start": "204720",
    "end": "210879"
  },
  {
    "text": "rewrite it with the quartens and i'm quite sure we'll see something what's the difference between two approaches",
    "start": "210879",
    "end": "217760"
  },
  {
    "text": "so first let's start with this theory what is what are the proteins and when i",
    "start": "217760",
    "end": "223440"
  },
  {
    "start": "218000",
    "end": "265000"
  },
  {
    "text": "google it the first answer which i get is that the coroutines are generalized subroutines",
    "start": "223440",
    "end": "228799"
  },
  {
    "text": "and the subroutines is the sequence of programs instructions that perform a specific task basically it's a functions",
    "start": "228799",
    "end": "234879"
  },
  {
    "text": "we all know them yeah the main difference between the coroutine and the subroutine is that",
    "start": "234879",
    "end": "241599"
  },
  {
    "text": "curtains could be suspended and resumed and that's that's the main difference",
    "start": "241599",
    "end": "247040"
  },
  {
    "text": "and when i say it it's probably not easy to understand what it is and how it works but we will get to it",
    "start": "247040",
    "end": "253680"
  },
  {
    "text": "in c plus plus a function is according if it contains one of the keywords called call wait or",
    "start": "253680",
    "end": "259519"
  },
  {
    "text": "q return so let's try to write the coroutine",
    "start": "259519",
    "end": "264639"
  },
  {
    "text": "ah no sorry before we go i just want to highlight some some some steps of",
    "start": "264639",
    "end": "269680"
  },
  {
    "start": "265000",
    "end": "338000"
  },
  {
    "text": "invocation because i think it should be important to not to to know so let's take a look at these two simple",
    "start": "269680",
    "end": "275840"
  },
  {
    "text": "functions we have a function main which called foo foo does some communication and return so i would say that in normal functions",
    "start": "275840",
    "end": "284400"
  },
  {
    "text": "or subroutines there are a few stages like first is invocation this is the step where the compiler generates some",
    "start": "284400",
    "end": "290240"
  },
  {
    "text": "code to actually allocate the stake for the local variables remember where to go",
    "start": "290240",
    "end": "295440"
  },
  {
    "text": "back and so on so there is this process then there is execution of the body and then there is a return controlled",
    "start": "295440",
    "end": "301360"
  },
  {
    "text": "the main and the value so in the coordinates the same thing except",
    "start": "301360",
    "end": "306800"
  },
  {
    "text": "you can suspend and resume the body multiple times and we'll try to do it right right now",
    "start": "306800",
    "end": "312720"
  },
  {
    "text": "so let's try to write our first chord in we know that we need to use one of the keywords let's let's start with simple",
    "start": "312720",
    "end": "320080"
  },
  {
    "text": "one so let's say that we want to change the return to say core return create we've done it super simple",
    "start": "320080",
    "end": "327600"
  },
  {
    "text": "and i think maybe it works let's try to compile it and surprisingly when we compile we get",
    "start": "327600",
    "end": "333360"
  },
  {
    "text": "an error unable to find the promise type for this curtain and if we go just go",
    "start": "333360",
    "end": "339039"
  },
  {
    "start": "338000",
    "end": "502000"
  },
  {
    "text": "back to the slide where i said about the protein support there is there is something about promise here",
    "start": "339039",
    "end": "346400"
  },
  {
    "text": "no protein handle promise but that's not what we're actually looking",
    "start": "346400",
    "end": "352000"
  },
  {
    "text": "for so we need to go to the google so i googled it curtin promise type",
    "start": "352000",
    "end": "358400"
  },
  {
    "text": "and i found that there is a link to the cpp reference and when i go there i found that there is something about",
    "start": "358400",
    "end": "364840"
  },
  {
    "text": "promise something about how it's executed and actually i didn't understand what to",
    "start": "364840",
    "end": "369919"
  },
  {
    "text": "do with that i would be honest so i went back i found this link and i read it then go back i",
    "start": "369919",
    "end": "376960"
  },
  {
    "text": "read this one and after that i started to see the picture so",
    "start": "376960",
    "end": "383199"
  },
  {
    "text": "it turns out that each protein hood should return a specific quarter type which follow the interface it should",
    "start": "383199",
    "end": "390000"
  },
  {
    "text": "contain the promise type and this promise type should implement five functions it should return",
    "start": "390000",
    "end": "396400"
  },
  {
    "text": "implement the get return initial suspend final suspend and handle exception or and return value or return word depends",
    "start": "396400",
    "end": "402880"
  },
  {
    "text": "what you want to return from your function it's either value or it's a void so one of them",
    "start": "402880",
    "end": "409280"
  },
  {
    "text": "and then you all can also can see that the initial suspend and final suspend they actually return some awaiter type",
    "start": "409280",
    "end": "414319"
  },
  {
    "text": "what is that i don't know so turns out that the waiter type is also a specific interface",
    "start": "414319",
    "end": "420319"
  },
  {
    "text": "this this this interface tells the compiler how to basically await how to generate code which will eventually do",
    "start": "420319",
    "end": "427520"
  },
  {
    "text": "our awaiting mechanism so on this one follows you need to implement three methods",
    "start": "427520",
    "end": "432639"
  },
  {
    "text": "a weight ready you tell the your weight system is your expression is ready",
    "start": "432639",
    "end": "439360"
  },
  {
    "text": "then if it's not you will call a weight suspend and there is three different versions of them so if you you need to implement",
    "start": "439360",
    "end": "445599"
  },
  {
    "text": "implement only one it depends which one you choose the behavior would be different and then you need to tell how",
    "start": "445599",
    "end": "451360"
  },
  {
    "text": "do you want to get the data back from the await expression",
    "start": "451360",
    "end": "457520"
  },
  {
    "text": "but if you still doesn't understand how it works that's quite fine so i didn't understand it either at the",
    "start": "457520",
    "end": "463759"
  },
  {
    "text": "beginning so what what we do is that i will just summarize some things which we need to",
    "start": "463759",
    "end": "468879"
  },
  {
    "text": "remember so the promise type define and controls the behavioral protein the awaiter type defines and control",
    "start": "468879",
    "end": "475199"
  },
  {
    "text": "their weight behavior good i study curtin traits this is a specific",
    "start": "475199",
    "end": "480319"
  },
  {
    "text": "uh traits which used by compiler to to get the promise type from the return type of",
    "start": "480319",
    "end": "486720"
  },
  {
    "text": "your curtain and generate some code for you basically what it does is something does something",
    "start": "486720",
    "end": "493120"
  },
  {
    "text": "like this it's it's take the body of the protein function transform it and do some other things but don't worry we",
    "start": "493120",
    "end": "499039"
  },
  {
    "text": "will take a look everything in detail here so okay uh let's write our first coding",
    "start": "499039",
    "end": "506560"
  },
  {
    "start": "502000",
    "end": "657000"
  },
  {
    "text": "and i call it taskind and normally in all any other presentations or libraries",
    "start": "506560",
    "end": "512159"
  },
  {
    "text": "you will see that there is a generic name task and in my case i don't want to make anything generic just super super simple",
    "start": "512159",
    "end": "518159"
  },
  {
    "text": "so it's called tasking because we work with the ins and return ins so let's let's try to write it",
    "start": "518159",
    "end": "525120"
  },
  {
    "text": "so we have a task end we define the promise type the promise type have an empty constructor just just",
    "start": "525120",
    "end": "531839"
  },
  {
    "text": "in case and the next thing which we need to implement is get return object",
    "start": "531839",
    "end": "537440"
  },
  {
    "text": "this function is used by compiler to understand how do you want to construct your curtain",
    "start": "537440",
    "end": "543360"
  },
  {
    "text": "and in our case we want to construct it with the with the basically curtain handle steady",
    "start": "543360",
    "end": "548880"
  },
  {
    "text": "coordinating handle is our interface to to actually control the curtain so for that we need to implement the",
    "start": "548880",
    "end": "554959"
  },
  {
    "text": "constructor which accepts the handle and you see that i don't move it i don't just assign it because the curtain",
    "start": "554959",
    "end": "561200"
  },
  {
    "text": "handle inside it just like a pointer so it's perfectly fine just to sign it like that we need to store it we'll use",
    "start": "561200",
    "end": "568320"
  },
  {
    "text": "it later and the next thing is that we need to implement as initial suspend",
    "start": "568320",
    "end": "573839"
  },
  {
    "text": "function this is the first suspension point which we need to implement to tell the compiler how we want to suspend",
    "start": "573839",
    "end": "581200"
  },
  {
    "text": "and as of now i returned this to this suspend never there are two things in a in a std library which we",
    "start": "581200",
    "end": "588480"
  },
  {
    "text": "can use one of them is two awaiters one of them suspend never and second one is the spin always",
    "start": "588480",
    "end": "595440"
  },
  {
    "text": "guess by the name suspend never means don't suspend okay so let's just do that",
    "start": "595440",
    "end": "600720"
  },
  {
    "text": "uh the next one we need to decide what we will do in the end of the invocation of the work routine let's say",
    "start": "600720",
    "end": "606880"
  },
  {
    "text": "nothing we just don't want to suspend then we need to define what if the exception happens inside the curtain how",
    "start": "606880",
    "end": "612800"
  },
  {
    "text": "to handle it so you need to implement this function and as of now you see we are exception",
    "start": "612800",
    "end": "617839"
  },
  {
    "text": "free we decided we don't want an exception and we don't want to handle it right now then the re since our function uh which",
    "start": "617839",
    "end": "624959"
  },
  {
    "text": "we saw before is returning the int we need to capture that result and the",
    "start": "624959",
    "end": "630000"
  },
  {
    "text": "way how the curtain works is that the core return statement will the expression of it will be passed to the",
    "start": "630000",
    "end": "635839"
  },
  {
    "text": "return value so we need to keep it and store it so we store it as just a promise member",
    "start": "635839",
    "end": "642320"
  },
  {
    "text": "and then we need some interface how to get that result and we use the std correcting",
    "start": "642320",
    "end": "648399"
  },
  {
    "text": "handle which can get us a pointer for us or promise and then we can get the value",
    "start": "648399",
    "end": "653440"
  },
  {
    "text": "so so far so good so let's try to use it",
    "start": "653440",
    "end": "658800"
  },
  {
    "text": "we go back to our code we go to the function declaration and we change in to be a task end",
    "start": "658800",
    "end": "665760"
  },
  {
    "text": "we don't change anything in the body that's the same",
    "start": "665760",
    "end": "670639"
  },
  {
    "text": "then we go to the our main function now since we return the tasking we don't return int anymore",
    "start": "670800",
    "end": "676880"
  },
  {
    "text": "so we have to change the type so let's say after task the next thing is that",
    "start": "676880",
    "end": "682320"
  },
  {
    "text": "we need to retrieve the result and we have this function called results",
    "start": "682320",
    "end": "687440"
  },
  {
    "text": "so let's call it task result okay so let's try to compile it and see",
    "start": "687440",
    "end": "693279"
  },
  {
    "text": "and as you see the result will be okay we get the result i think the the the calculation which has did is correct",
    "start": "693279",
    "end": "700000"
  },
  {
    "text": "it's 110. so here we are we wrote the protein that was painful a little bit and what do we",
    "start": "700000",
    "end": "706959"
  },
  {
    "text": "actually get we didn't get anything we just call the function",
    "start": "706959",
    "end": "712399"
  },
  {
    "text": "get something doesn't help but what was the reason for that so let's try to actually use the feature of the curtain",
    "start": "712399",
    "end": "718560"
  },
  {
    "text": "try to suspend a curtain okay so we will go back to our task init int",
    "start": "718560",
    "end": "725200"
  },
  {
    "text": "we go to the initial suspend point and let's say okay let's suspend it by default in the",
    "start": "725200",
    "end": "731440"
  },
  {
    "text": "beginning and you might ask why do we actually need it and the reason is that imagine",
    "start": "731440",
    "end": "737040"
  },
  {
    "text": "that our foo right now it's very simple but it could compute some heavy heavy things which takes a long",
    "start": "737040",
    "end": "743279"
  },
  {
    "text": "long time so before we actually resume the coroutine to do something we want to",
    "start": "743279",
    "end": "748480"
  },
  {
    "text": "suspend it and then maybe move it to another thread or something else so that's that's that's might be the reason",
    "start": "748480",
    "end": "754639"
  },
  {
    "text": "so let's let's say we want to suspend it by default and we do can do it by just changing the return",
    "start": "754639",
    "end": "759920"
  },
  {
    "text": "type to be suspend always uh this is a second awaiter type which",
    "start": "759920",
    "end": "765360"
  },
  {
    "text": "provided by the standard library and let's see how it works",
    "start": "765360",
    "end": "772079"
  },
  {
    "text": "so now if we run it and compile the result will be minus one this is a default value which we got from the",
    "start": "772079",
    "end": "777920"
  },
  {
    "text": "promise type which we initialize with minus one it turns out we actually",
    "start": "777920",
    "end": "784399"
  },
  {
    "text": "our functions didn't work that's probably as we expected we suspended it and we never executed",
    "start": "784399",
    "end": "789839"
  },
  {
    "text": "so the way if we actually want to now to get the result we need to resume",
    "start": "789839",
    "end": "795200"
  },
  {
    "text": "the the curtain by by doing it manually so we need to implement the resume function",
    "start": "795200",
    "end": "801120"
  },
  {
    "text": "and that's pretty simple we just need to use the std current in handle just say resume",
    "start": "801120",
    "end": "806399"
  },
  {
    "text": "and that should work so if we compile now we get the result",
    "start": "806399",
    "end": "811760"
  },
  {
    "text": "beautiful but just to be clear to understand what's actually happened right now let's look at the call graph",
    "start": "811760",
    "end": "818880"
  },
  {
    "text": "so the main function invoke the full full hits the initial suspend point and",
    "start": "818880",
    "end": "826079"
  },
  {
    "text": "we know that we said that we want to suspend it immediately returns the control to the main",
    "start": "826079",
    "end": "831600"
  },
  {
    "text": "and then we go to we call resume it manually and then we will go back we resume the",
    "start": "831600",
    "end": "837519"
  },
  {
    "text": "foo it hits the final suspend point we know that we don't want to do anything here",
    "start": "837519",
    "end": "843120"
  },
  {
    "text": "and we return and we obtain our result great",
    "start": "843120",
    "end": "848399"
  },
  {
    "text": "and if if you see i just run it again we get the result however this code has a",
    "start": "848399",
    "end": "853680"
  },
  {
    "text": "problem right now we wrote it it's supposed to be good but it doesn't work it's some for some",
    "start": "853680",
    "end": "859600"
  },
  {
    "text": "reason print the result but actually we got the undefined behavior here the reason why it's undefined behavior",
    "start": "859600",
    "end": "865760"
  },
  {
    "text": "is because the curtain handle internally works like that if you reach the final step",
    "start": "865760",
    "end": "871040"
  },
  {
    "text": "of the corotine and you pass the final suspend it will immediately remove the corotin internally",
    "start": "871040",
    "end": "877519"
  },
  {
    "text": "and we didn't catch that moment so now when we actually call the task result to get the result",
    "start": "877519",
    "end": "884399"
  },
  {
    "text": "uh we actually call getting result from the handle handler",
    "start": "884399",
    "end": "890320"
  },
  {
    "text": "which was removed so it seems so for some reason it still works so let's try to fix it",
    "start": "890320",
    "end": "896399"
  },
  {
    "text": "so we will go back to our final suspend point since we know that if we suspend we",
    "start": "896399",
    "end": "903199"
  },
  {
    "text": "don't suspend it and then the result would be that the curtain handle would be destroyed we",
    "start": "903199",
    "end": "908320"
  },
  {
    "text": "need to actually suspend so let's do it we just use the suspend always",
    "start": "908320",
    "end": "913839"
  },
  {
    "text": "uh and let's uh try to compile and run the result as it used to be correct",
    "start": "913839",
    "end": "920240"
  },
  {
    "text": "looks great we don't have any undefined behavior you can trust me but if you run the walgreens turns out",
    "start": "920240",
    "end": "927120"
  },
  {
    "text": "that we have a problem we have a memory lick how did this happen just not supposed to be",
    "start": "927120",
    "end": "933440"
  },
  {
    "text": "and it turns out that so the curtain handle is kind of ray thing and kind of smart pointer in the",
    "start": "933440",
    "end": "940079"
  },
  {
    "text": "same time but if you don't follow the entire um",
    "start": "940079",
    "end": "945759"
  },
  {
    "text": "entire path of the execution of the protein you have to actually delete it manually so",
    "start": "945759",
    "end": "951680"
  },
  {
    "text": "in this case we just need to implement the destructor which will call the destroy the the",
    "start": "951680",
    "end": "957279"
  },
  {
    "text": "standard function and yeah destroy the curtain",
    "start": "957279",
    "end": "962399"
  },
  {
    "text": "painful but okay so i think we finally wrote first curtin",
    "start": "962399",
    "end": "968959"
  },
  {
    "text": "which is supposed to work without any problems and i congratulate you uh",
    "start": "968959",
    "end": "974079"
  },
  {
    "text": "so i think we unlocked some achievement we wrote the first curtain just want to summarize it a little bit",
    "start": "974079",
    "end": "980000"
  },
  {
    "text": "because there will be a lot of knowledge after that so curtin must return a",
    "start": "980000",
    "end": "985440"
  },
  {
    "text": "curtain interface type you have to implement it there is nothing that standard gives you so the promise types type controls the",
    "start": "985440",
    "end": "992720"
  },
  {
    "text": "current in behavior that means we can decide do we want to uh suspend do we decide to want to resume",
    "start": "992720",
    "end": "999199"
  },
  {
    "text": "uh how to do that how to handle exception how to store return type and",
    "start": "999199",
    "end": "1005120"
  },
  {
    "text": "yeah so that example was very simple our task is very very simple curtin so in reality",
    "start": "1005120",
    "end": "1010880"
  },
  {
    "text": "you will need something more generic something like this and i i reference here your core",
    "start": "1010880",
    "end": "1016480"
  },
  {
    "text": "ecor or wherever it's my small tiny library which i wrote just to try to understand how the",
    "start": "1016480",
    "end": "1022000"
  },
  {
    "text": "protein works so in reality you can make it template based so you can actually specify the type and",
    "start": "1022000",
    "end": "1028240"
  },
  {
    "text": "you can generally use this task class to return something from the query",
    "start": "1028240",
    "end": "1034400"
  },
  {
    "text": "and also inside this class we will not go inside that class because it contains some many details because you want to",
    "start": "1034720",
    "end": "1041038"
  },
  {
    "text": "avoid you you want to avoid extra core piece you want to make sure that everything is movable and so on uh that",
    "start": "1041039",
    "end": "1047520"
  },
  {
    "text": "the exceptions handles properly so we just will not go i just want to see show you that",
    "start": "1047520",
    "end": "1052640"
  },
  {
    "text": "we can do something but you didn't need to do it manually nobody will give it for you",
    "start": "1052640",
    "end": "1058160"
  },
  {
    "text": "so okay great now we learn how to suspend the protein in the beginning and",
    "start": "1058160",
    "end": "1064240"
  },
  {
    "text": "the end let's try to suspended it somewhere in the middle so let's just inject this line which is",
    "start": "1064240",
    "end": "1069440"
  },
  {
    "text": "a cold weight std suspend always that's uh first our usage of this new",
    "start": "1069440",
    "end": "1074799"
  },
  {
    "text": "cold weight operator which is uh accepts the co-weight expression and it",
    "start": "1074799",
    "end": "1080960"
  },
  {
    "text": "in simple way you think that you should follow this awaiter type and what it does is just suspend if if",
    "start": "1080960",
    "end": "1087760"
  },
  {
    "text": "the waiter type tells suspend it will suspend so now if we run it",
    "start": "1087760",
    "end": "1092880"
  },
  {
    "text": "we will get the result minus one again we didn't reach the core return we didn't reach the final suspend point",
    "start": "1092880",
    "end": "1099760"
  },
  {
    "text": "so how do we fix it",
    "start": "1099760",
    "end": "1103440"
  },
  {
    "text": "one second yeah before we fix it i will just show you the graph what happens sorry uh so",
    "start": "1105280",
    "end": "1113279"
  },
  {
    "text": "the main function invoke the full full hits the spend initial suspend it returns the control we resume it once",
    "start": "1113679",
    "end": "1120559"
  },
  {
    "text": "we hit the suspend always we return the control and the way how to fix it we need to resume it again",
    "start": "1120559",
    "end": "1127679"
  },
  {
    "text": "manually great then we will hit the quarter turn and return will do a return for us nice",
    "start": "1127679",
    "end": "1134880"
  },
  {
    "text": "now we if we compile we get the result that's great however the problem is that",
    "start": "1134880",
    "end": "1142799"
  },
  {
    "text": "if we look at this manual resumes which we do is that actually we don't know from the main",
    "start": "1142799",
    "end": "1148960"
  },
  {
    "text": "function how many suspension point full has so we need something to be able to",
    "start": "1148960",
    "end": "1155039"
  },
  {
    "text": "understand do we need resume more or just just continue our execution",
    "start": "1155039",
    "end": "1160400"
  },
  {
    "text": "so we can do it by implementing the done function it's basically a",
    "start": "1160400",
    "end": "1165520"
  },
  {
    "text": "call the handler handle done which is tells us it will tell us tell us done will return",
    "start": "1165520",
    "end": "1171919"
  },
  {
    "text": "true only if we hit the final suspend point otherwise it will return false so",
    "start": "1171919",
    "end": "1177360"
  },
  {
    "text": "until we hit the final suspend point we can resume resume resume again and again and again again",
    "start": "1177360",
    "end": "1183360"
  },
  {
    "text": "so nice nothing else we can do here just resume",
    "start": "1183360",
    "end": "1190480"
  },
  {
    "text": "yeah okay so now we know how to resume we know how to suspend",
    "start": "1190480",
    "end": "1198320"
  },
  {
    "text": "but let's try to be a little bit uh let's let's try to understand how that",
    "start": "1198320",
    "end": "1204400"
  },
  {
    "text": "magic actually works because we know that there is some magic around because some words some generation and",
    "start": "1204400",
    "end": "1210559"
  },
  {
    "text": "so on so i suggest you to be with me on a journey to be a compiler right now and try to implement",
    "start": "1210559",
    "end": "1217840"
  },
  {
    "text": "to make the compiler work so i will start with this simple lines",
    "start": "1217840",
    "end": "1224159"
  },
  {
    "text": "that the compiler wherever it sees the protein let's actually generate the",
    "start": "1224159",
    "end": "1229200"
  },
  {
    "text": "class for you you're not able to to get it but it's there it uses the recording trades to take the",
    "start": "1229200",
    "end": "1236159"
  },
  {
    "text": "promise type from your tasking and put it inside as a promise then what it does is that",
    "start": "1236159",
    "end": "1244000"
  },
  {
    "text": "it will analyze your function declaration and generate the same constructor for the coroutine handle",
    "start": "1244480",
    "end": "1251039"
  },
  {
    "text": "it will accept the same arguments which you pass to the function and it will store it on a local stack here it works",
    "start": "1251039",
    "end": "1257440"
  },
  {
    "text": "with the ins so the stack is pretty simple i just implemented but in reality that should be something which contains",
    "start": "1257440",
    "end": "1262480"
  },
  {
    "text": "any types so it's just some serve the code here",
    "start": "1262480",
    "end": "1268000"
  },
  {
    "text": "so yeah it put it on a stack great uh remember that make a reference for us that we can use that variable",
    "start": "1268000",
    "end": "1274640"
  },
  {
    "text": "uh yeah so the next thing is that the compiler will try to analyze our function",
    "start": "1274640",
    "end": "1282159"
  },
  {
    "text": "and it sees okay we have a first line let's create a step for us",
    "start": "1282159",
    "end": "1287679"
  },
  {
    "text": "it will take the line just copy paste it actually great",
    "start": "1287679",
    "end": "1293440"
  },
  {
    "text": "then it will see that there is a suspension point it means if we suspend right now we will lose the result of the",
    "start": "1293440",
    "end": "1300240"
  },
  {
    "text": "result one so what we need to do is we need to save it on a stack so it will just push it like this",
    "start": "1300240",
    "end": "1307440"
  },
  {
    "text": "great then it knows it will start to look what will happen after the suspension plan it",
    "start": "1307440",
    "end": "1312559"
  },
  {
    "text": "will start to generate a step two for us and it will again just copy paste the line",
    "start": "1312559",
    "end": "1318720"
  },
  {
    "text": "the same as it was in a step one now however it knows that we reach the core return statement we don't really",
    "start": "1318720",
    "end": "1325600"
  },
  {
    "text": "need to save anything we just need to put this to the promise that we can retrieve the",
    "start": "1325600",
    "end": "1331360"
  },
  {
    "text": "value great",
    "start": "1331360",
    "end": "1335200"
  },
  {
    "text": "so now if we take a look at what happens when we hit the resume the resume function is pretty simple",
    "start": "1337520",
    "end": "1343760"
  },
  {
    "text": "actually what the compiler does it's actually have a step pointer to the function call",
    "start": "1343760",
    "end": "1351280"
  },
  {
    "text": "i'm saying compiler but it might be an application different but we just try to be a compiler here so it keeps the pointer to the step",
    "start": "1351280",
    "end": "1359520"
  },
  {
    "text": "by default step one then initial and then in the end of the each step it will just assign a pointer to the next",
    "start": "1359520",
    "end": "1366159"
  },
  {
    "text": "one so when we call i resume first time we call the step one and then we say that",
    "start": "1366159",
    "end": "1371840"
  },
  {
    "text": "the next step should be step two when we call the resume second time it will say step two",
    "start": "1371840",
    "end": "1379200"
  },
  {
    "text": "invoke the step two and the step will be null point enter and you as you see if you call resume",
    "start": "1379200",
    "end": "1385200"
  },
  {
    "text": "next time it will be again undefined behavior this is the same as in a standard right now",
    "start": "1385200",
    "end": "1391280"
  },
  {
    "text": "great very nice we we almost done the compiler",
    "start": "1391280",
    "end": "1396640"
  },
  {
    "text": "job so let's now take a look how the invocation of the foo is changing",
    "start": "1396640",
    "end": "1402640"
  },
  {
    "text": "because somebody should create this coating handle full object for us yes so i would say the compiler",
    "start": "1402640",
    "end": "1410799"
  },
  {
    "text": "might just guess here i don't know certainly what it does is actually expanded to be a lambda",
    "start": "1410799",
    "end": "1417120"
  },
  {
    "text": "which returns our task hint it allocates on the hip coating handle full",
    "start": "1417120",
    "end": "1422799"
  },
  {
    "text": "pass the variables arguments get the promise construct the return",
    "start": "1422799",
    "end": "1428320"
  },
  {
    "text": "type invoke full and return task",
    "start": "1428320",
    "end": "1433760"
  },
  {
    "text": "so if we look right now at the full it also do something here so what it does is it's completely kind",
    "start": "1433840",
    "end": "1440559"
  },
  {
    "text": "of rewrite it first of all it says always in line because",
    "start": "1440559",
    "end": "1445840"
  },
  {
    "text": "it doesn't make sense to be this as a separate function but just don't want to put it in in one piece",
    "start": "1445840",
    "end": "1451520"
  },
  {
    "text": "yeah so it it's wrapped the function body uh and",
    "start": "1451520",
    "end": "1456720"
  },
  {
    "text": "it add this initial and final suspend points it also put the try catch and then it's called resume",
    "start": "1456720",
    "end": "1463440"
  },
  {
    "text": "that's that's how it was so in our case we hit the initial suspend point we",
    "start": "1463440",
    "end": "1468799"
  },
  {
    "text": "return the control back to the main main call resume resume and so on",
    "start": "1468799",
    "end": "1474799"
  },
  {
    "text": "so that's that's how it looks from the compiler perspective and if you think about it it's it's kind of similar to",
    "start": "1474799",
    "end": "1480880"
  },
  {
    "text": "lambdas because we know the lambda is very nice syntax but in the end it's actually a hidden class generated for us",
    "start": "1480880",
    "end": "1488000"
  },
  {
    "text": "so the same approach is here just a little bit more thing",
    "start": "1488000",
    "end": "1493200"
  },
  {
    "text": "but yeah so i think we've done a pretty good job and",
    "start": "1493200",
    "end": "1498720"
  },
  {
    "text": "i think we again unlock the achievement so i think think as a compiler",
    "start": "1498720",
    "end": "1504240"
  },
  {
    "start": "1500000",
    "end": "1536000"
  },
  {
    "text": "and just to some summary here that the carotene frame allocated on heap",
    "start": "1504240",
    "end": "1509360"
  },
  {
    "text": "so there is a location you cannot remove it",
    "start": "1509360",
    "end": "1514559"
  },
  {
    "text": "the one thing is to say is that you actually can provide your own custom locator by implementing the new operator",
    "start": "1514559",
    "end": "1520240"
  },
  {
    "text": "for the promise type so you can do some smart things here if you want so the curtain is stackless so each",
    "start": "1520240",
    "end": "1526480"
  },
  {
    "text": "curtain actually contain their own stack internally and creatine can be suspended there's",
    "start": "1526480",
    "end": "1532159"
  },
  {
    "text": "multiple times that's what we saw the next step in our journey is actually",
    "start": "1532159",
    "end": "1538400"
  },
  {
    "start": "1536000",
    "end": "1851000"
  },
  {
    "text": "try to call a protein will call a protein so imagine that we have a function bar",
    "start": "1538400",
    "end": "1546000"
  },
  {
    "text": "which uh just do some some calculation and then image let's imagine that we want to call",
    "start": "1546000",
    "end": "1551760"
  },
  {
    "text": "it and replace n7 to be the call of this bar",
    "start": "1551760",
    "end": "1557679"
  },
  {
    "text": "so we'll call bar we'll get the task we know that our task is by default suspended",
    "start": "1557679",
    "end": "1564000"
  },
  {
    "text": "so let's resume it and then we need to rewrite a little bit core return to be",
    "start": "1564000",
    "end": "1569760"
  },
  {
    "text": "task result and now if you try to compile we get the different result because the",
    "start": "1569760",
    "end": "1575760"
  },
  {
    "text": "math is different but still it works great",
    "start": "1575760",
    "end": "1581360"
  },
  {
    "text": "but i think if you look at this code that doesn't look great if all the time when we use the coordinates we have to",
    "start": "1581360",
    "end": "1586559"
  },
  {
    "text": "write this thing get the task resume we don't know how many suspend points there",
    "start": "1586559",
    "end": "1593279"
  },
  {
    "text": "it's just nice mirror but luckily something have we have a cure for that uh we can write it like",
    "start": "1593279",
    "end": "1600960"
  },
  {
    "text": "this we can use the call weight operator here to actually say that we want to",
    "start": "1600960",
    "end": "1607360"
  },
  {
    "text": "call this curtain await until it's ready and get the result there is only one",
    "start": "1607360",
    "end": "1612960"
  },
  {
    "text": "slightly problem that it doesn't work out of the box of course we implement our core routine and",
    "start": "1612960",
    "end": "1619600"
  },
  {
    "text": "we need to implement the support for the call weight because the call weight works with the awaiter type and it doesn't know",
    "start": "1619600",
    "end": "1626159"
  },
  {
    "text": "anything about task int so the way how we can fix it is that we",
    "start": "1626159",
    "end": "1631279"
  },
  {
    "text": "need to implement the new operator called call weight this is also something new in c plus plus 20.",
    "start": "1631279",
    "end": "1638000"
  },
  {
    "text": "so here you have to implement the awaiter uh which",
    "start": "1638000",
    "end": "1643600"
  },
  {
    "text": "in our particular case right now i just implemented just just proof of concept here is let's accept the handle",
    "start": "1643600",
    "end": "1650399"
  },
  {
    "text": "we will use it later and we need to define this three methods first of all is a weight rating",
    "start": "1650399",
    "end": "1656480"
  },
  {
    "text": "we need to tell the await mechanism is our expression is ready our coroutine is",
    "start": "1656480",
    "end": "1662960"
  },
  {
    "text": "ready so we can use it to say handle done is it ready or not then if it it's not",
    "start": "1662960",
    "end": "1669279"
  },
  {
    "text": "ready the protein mechanism internally will try to suspend so we need to implement this behavior",
    "start": "1669279",
    "end": "1675360"
  },
  {
    "text": "what we want to do on suspend and we will implement that weight suspend function and the way that it returns a curtain",
    "start": "1675360",
    "end": "1681760"
  },
  {
    "text": "and that function declaration the way how it is",
    "start": "1681760",
    "end": "1687120"
  },
  {
    "text": "if you return the corrupting handle the await mechanism will just resume it so in our case",
    "start": "1687120",
    "end": "1692720"
  },
  {
    "text": "we will just resume the current card currently uh which is a barcoding",
    "start": "1692720",
    "end": "1698799"
  },
  {
    "text": "and then we need to just need to explain the compiler how to get the result and here is the same we just handle",
    "start": "1698799",
    "end": "1704559"
  },
  {
    "text": "promise and get the result so now if we try to compile and run it",
    "start": "1704559",
    "end": "1710320"
  },
  {
    "text": "turns out that we get the minus one it doesn't work but there is no mistake to be honest in",
    "start": "1710320",
    "end": "1716000"
  },
  {
    "text": "the code except the logical so let's see in the call graph how that works",
    "start": "1716000",
    "end": "1722559"
  },
  {
    "text": "so again the main function invoke full hit the initial suspend we return",
    "start": "1722559",
    "end": "1727760"
  },
  {
    "text": "and then we hit the resume first time that actually triggers to invoke uh the",
    "start": "1727760",
    "end": "1733440"
  },
  {
    "text": "bar bar hits the initial suspend and returns control back to the full",
    "start": "1733440",
    "end": "1739200"
  },
  {
    "text": "then we call weight mechanism internally call their weight resume just to understand what to do next",
    "start": "1739200",
    "end": "1745919"
  },
  {
    "text": "and then it resumes the the barcoding however in the end something goes wrong",
    "start": "1745919",
    "end": "1752720"
  },
  {
    "text": "because the final suspend now actually return control to the main it just",
    "start": "1752720",
    "end": "1757840"
  },
  {
    "text": "bypass our full and yeah we need to fix that and the the way",
    "start": "1757840",
    "end": "1764960"
  },
  {
    "text": "how we can fix it is that we go back to our call weight implementation you see that a weight suspend actually",
    "start": "1764960",
    "end": "1770880"
  },
  {
    "text": "accept one argument which is a handle to the awaiting courting in our case it's a",
    "start": "1770880",
    "end": "1776640"
  },
  {
    "text": "fool so what we could do is we could remember this we can store it inside our promise that",
    "start": "1776640",
    "end": "1784080"
  },
  {
    "text": "we by the end we want to continue execution of this curtain of the curtin foo",
    "start": "1784080",
    "end": "1789440"
  },
  {
    "text": "so we just keep it in the promise and i will not write the code for this",
    "start": "1789440",
    "end": "1794640"
  },
  {
    "text": "simple function but however now we need to say what we actually want to resume and then for",
    "start": "1794640",
    "end": "1800799"
  },
  {
    "text": "that reason we go back to our promise type we need to rewrite the final suspend point",
    "start": "1800799",
    "end": "1806640"
  },
  {
    "text": "again we will define some final awaiter which is always say that the weight",
    "start": "1806640",
    "end": "1812159"
  },
  {
    "text": "expression is not ready and when we hit the weight suspend when the",
    "start": "1812159",
    "end": "1817200"
  },
  {
    "text": "suspend mechanism and weight mechanism try to ask what to do next we will return what we remember to do",
    "start": "1817200",
    "end": "1824240"
  },
  {
    "text": "great and now if we try to compile it and look at the call",
    "start": "1824240",
    "end": "1829279"
  },
  {
    "text": "graph now that works we get the right result so in",
    "start": "1829279",
    "end": "1835120"
  },
  {
    "text": "the same thing the same thing happens just the final suspend will actually resume the foo and foo will hit the core",
    "start": "1835120",
    "end": "1842000"
  },
  {
    "text": "return and go back great it was a little bit hard to do but",
    "start": "1842000",
    "end": "1847840"
  },
  {
    "text": "we manage it so let's just summarize it and",
    "start": "1847840",
    "end": "1852960"
  },
  {
    "start": "1851000",
    "end": "1880000"
  },
  {
    "text": "i think again we get the achievement so a waiter type controls their weight",
    "start": "1852960",
    "end": "1859519"
  },
  {
    "text": "behavior a waiter type is a glue mechanism for the cording so you can decide what you want to do what to",
    "start": "1859519",
    "end": "1865519"
  },
  {
    "text": "execute next or maybe not execute and the call weight suspend uh call it",
    "start": "1865519",
    "end": "1872000"
  },
  {
    "text": "suspend the the protein but it also a mechanism to retrieve the result",
    "start": "1872000",
    "end": "1877360"
  },
  {
    "text": "so very useful thing okay let's go next and",
    "start": "1877360",
    "end": "1883600"
  },
  {
    "start": "1880000",
    "end": "1971000"
  },
  {
    "text": "the thing is since we can use this call weight maybe we can rewrite the main function to also use",
    "start": "1883600",
    "end": "1890320"
  },
  {
    "text": "the call weight to be like that and let's try to compile it",
    "start": "1890320",
    "end": "1896799"
  },
  {
    "text": "surprisingly cannot do that it specifically say cannot be used in the main function actually i went to the",
    "start": "1896799",
    "end": "1903039"
  },
  {
    "text": "standard to read and actually turns out there is a specific paragraph say you cannot use it but let's try to trick the",
    "start": "1903039",
    "end": "1909360"
  },
  {
    "text": "compiler maybe we can create a book function and call it maybe that works",
    "start": "1909360",
    "end": "1914960"
  },
  {
    "text": "unfortunately it doesn't uh it turns out that you can use this cold weight core return",
    "start": "1914960",
    "end": "1921279"
  },
  {
    "text": "or cloud which we don't talk to today is that",
    "start": "1921279",
    "end": "1926880"
  },
  {
    "text": "you can use it only in the quotient context so to be able to make the asynchronous code",
    "start": "1927600",
    "end": "1933760"
  },
  {
    "text": "and synchronous code to be friendly to each other you have to invent something or just call this",
    "start": "1933760",
    "end": "1939679"
  },
  {
    "text": "manually resume blah blah blah which makes your code uglier yeah and what we can do is we can",
    "start": "1939679",
    "end": "1945919"
  },
  {
    "text": "implement some primitive i in most of the libraries it's called sync weight same i called it in my library so what",
    "start": "1945919",
    "end": "1953279"
  },
  {
    "text": "it does it's internally it it it does this magic for you it checks do we need to resume it or we need to wait",
    "start": "1953279",
    "end": "1960320"
  },
  {
    "text": "so it's a synchronous blocking call we will wait until the um",
    "start": "1960320",
    "end": "1965760"
  },
  {
    "text": "the the protein is ready then continue after only after that",
    "start": "1965760",
    "end": "1970880"
  },
  {
    "text": "yeah so that was the code in summary now i tell",
    "start": "1970880",
    "end": "1976960"
  },
  {
    "start": "1971000",
    "end": "2038000"
  },
  {
    "text": "you that you are masters of the curtin you can go and write it just remember this thing that you need",
    "start": "1976960",
    "end": "1982000"
  },
  {
    "text": "to implement the curtin interface type remember that the promise control the behavior if you do it wrongly something",
    "start": "1982000",
    "end": "1988320"
  },
  {
    "text": "can go wrong then you need awaiter types a waser type which controls the weight behavior we know that cartoons are",
    "start": "1988320",
    "end": "1994960"
  },
  {
    "text": "located on heap so if you embed a developer you don't have a new then you",
    "start": "1994960",
    "end": "2000480"
  },
  {
    "text": "need to write it curriculum is a stackless uh routine can be suspended or assumed multiple times",
    "start": "2000480",
    "end": "2007200"
  },
  {
    "text": "and i said this com and the next thing is that compiler doesn't care uh what to resume it's more like",
    "start": "2007200",
    "end": "2015279"
  },
  {
    "text": "like runtime decision here wherever he will do whatever you say",
    "start": "2015279",
    "end": "2020720"
  },
  {
    "text": "so and the most important the curtain behavior depends on developer implementation so",
    "start": "2020720",
    "end": "2027360"
  },
  {
    "text": "you don't know how it works you you can see the documentation and yeah",
    "start": "2027360",
    "end": "2033600"
  },
  {
    "text": "so let's try to use it now we know everything so let's go back to our code which is",
    "start": "2033600",
    "end": "2041200"
  },
  {
    "start": "2038000",
    "end": "2232000"
  },
  {
    "text": "maybe you forgot it maybe you don't remember what it does anymore uh let's let's try to rewrite it",
    "start": "2041200",
    "end": "2048638"
  },
  {
    "text": "so we still have the same function definition",
    "start": "2048639",
    "end": "2053760"
  },
  {
    "text": "here unaccepted and then now our executor will return a task",
    "start": "2053760",
    "end": "2059839"
  },
  {
    "text": "instead of a future then the fast computation is the same",
    "start": "2059839",
    "end": "2065520"
  },
  {
    "text": "and this is the first place when the code becomes looks better so now we don't need to set up a",
    "start": "2065520",
    "end": "2070800"
  },
  {
    "text": "callback we can just say cool wait call wait socket send and we will wait until the send",
    "start": "2070800",
    "end": "2077599"
  },
  {
    "text": "operation is completed and we will continue our execution after that",
    "start": "2077599",
    "end": "2084240"
  },
  {
    "text": "yeah so the next thing is what we we can do is uh",
    "start": "2085839",
    "end": "2092000"
  },
  {
    "text": "uh rewrite our socket read the same way we don't need a callback anymore",
    "start": "2092720",
    "end": "2097760"
  },
  {
    "text": "uh we can just wait let's finish which is nice",
    "start": "2097760",
    "end": "2103839"
  },
  {
    "text": "now we can call the process function and we again can just await the result of our task and pass the data which we read",
    "start": "2104800",
    "end": "2112560"
  },
  {
    "text": "from the socket however some of you can think okay that doesn't look great we again have a",
    "start": "2112560",
    "end": "2119119"
  },
  {
    "text": "temporary variable maybe we want to simplify it to be it like that and",
    "start": "2119119",
    "end": "2125200"
  },
  {
    "text": "interesting thing happens is that we tried to avoid the temporary",
    "start": "2125200",
    "end": "2130400"
  },
  {
    "text": "variables but we accidentally broke the the function behavior because",
    "start": "2130400",
    "end": "2135599"
  },
  {
    "text": "c plus plus doesn't guarantee the validation order and even if it does i made a mistake in the code so what",
    "start": "2135599",
    "end": "2141040"
  },
  {
    "text": "happens is here is that so what happens here is that uh first of",
    "start": "2141040",
    "end": "2148320"
  },
  {
    "text": "all there could be two situations first we start start to await the task and the second we await the reit",
    "start": "2148320",
    "end": "2155520"
  },
  {
    "text": "or other way around we can start to wait tweet and then we can start away the",
    "start": "2155520",
    "end": "2161280"
  },
  {
    "text": "task so that doesn't work well and it's also right the question is",
    "start": "2161280",
    "end": "2166560"
  },
  {
    "text": "actually how do we initiate two asynchronous separation and weight the result",
    "start": "2166560",
    "end": "2172800"
  },
  {
    "text": "and again there is no any solution from the standard here what you could do you",
    "start": "2172800",
    "end": "2178320"
  },
  {
    "text": "just need to implement a helper function",
    "start": "2178320",
    "end": "2184480"
  },
  {
    "text": "which called when all uh what it does is just take your awaitable objects combine",
    "start": "2184480",
    "end": "2190079"
  },
  {
    "text": "them together and return a tuple for you then you can use a steady apply to",
    "start": "2190079",
    "end": "2195359"
  },
  {
    "text": "actually pass the stop to the function so that's the trick here",
    "start": "2195359",
    "end": "2202720"
  },
  {
    "text": "so the last thing is just to send the final uh data uh",
    "start": "2202720",
    "end": "2208240"
  },
  {
    "text": "i think we get yeah the final thing is to send the data and i think so far if you look at the",
    "start": "2208240",
    "end": "2213839"
  },
  {
    "text": "code i think it looks better from my point of view i think you can agree at least it's easy to read",
    "start": "2213839",
    "end": "2219520"
  },
  {
    "text": "maybe not that familiar but still easier to read so i think the move is correct the curtain helps to",
    "start": "2219520",
    "end": "2225760"
  },
  {
    "text": "write the synchronous code it's more readable and simple however there are problems",
    "start": "2225760",
    "end": "2232640"
  },
  {
    "start": "2232000",
    "end": "2431000"
  },
  {
    "text": "so if i take a look at this code more precisely in the new code it turns out that it doesn't work",
    "start": "2232640",
    "end": "2239760"
  },
  {
    "text": "actually it doesn't work for the two reasons first of all somebody have to go and",
    "start": "2239760",
    "end": "2245520"
  },
  {
    "text": "implement the synchronous api for the executor for the socket uh",
    "start": "2245520",
    "end": "2250880"
  },
  {
    "text": "imagine that you've done it then the problem is that our unaccepted still returns void",
    "start": "2250880",
    "end": "2256960"
  },
  {
    "text": "that means we are not able to use the call weight because it's not according context",
    "start": "2256960",
    "end": "2262000"
  },
  {
    "text": "you can say we wrote the task we can use it yes sure we can the problem is who is",
    "start": "2262000",
    "end": "2267040"
  },
  {
    "text": "going to handle these tasks on the top level and then who is going to handle it on",
    "start": "2267040",
    "end": "2272079"
  },
  {
    "text": "the top level of that top level and you need to go up up up up in your stack you're not going to write your code in",
    "start": "2272079",
    "end": "2278400"
  },
  {
    "text": "one day so there should be a solution how to fix it i have some ideas i'm not saying they",
    "start": "2278400",
    "end": "2284960"
  },
  {
    "text": "are great but i just have them so i will just share with you so what we can do is we can",
    "start": "2284960",
    "end": "2292400"
  },
  {
    "text": "create a lambda this lambda is a wrapper for us what it does is just a thing to create this",
    "start": "2292400",
    "end": "2299280"
  },
  {
    "text": "task for us locally and resume it",
    "start": "2299280",
    "end": "2305599"
  },
  {
    "text": "i think we the code becomes a little bit more difficult yes that's true",
    "start": "2305599",
    "end": "2310720"
  },
  {
    "text": "but still we get this nice syntax so maybe that cost worth it",
    "start": "2310720",
    "end": "2316079"
  },
  {
    "text": "the problem is that that code still doesn't work and there is a few problems",
    "start": "2316079",
    "end": "2322400"
  },
  {
    "text": "first of all the lambda captures we all get used to use them the problem they don't work with accordions",
    "start": "2322400",
    "end": "2329280"
  },
  {
    "text": "corodines they lambdas and curtains has a different",
    "start": "2329280",
    "end": "2334720"
  },
  {
    "text": "lifetime and the curtains save on the lambda arguments on their stack they",
    "start": "2334720",
    "end": "2340560"
  },
  {
    "text": "don't they ignore completely the their capture so you cannot use the capture if you want to use this approach so what you",
    "start": "2340560",
    "end": "2347440"
  },
  {
    "text": "have to do you have to create the all the three arguments and pass it like",
    "start": "2347440",
    "end": "2353920"
  },
  {
    "text": "this that could be still a case the second problem is that",
    "start": "2353920",
    "end": "2359680"
  },
  {
    "text": "we call the task resume on the line 14 it resumes the curtain it hits the first",
    "start": "2359680",
    "end": "2364800"
  },
  {
    "text": "call weight then it returns the control to the unaccepted and then we destroy the task but we if",
    "start": "2364800",
    "end": "2371040"
  },
  {
    "text": "you remember the task has a structure inside so it will actually destroy the quotient",
    "start": "2371040",
    "end": "2376880"
  },
  {
    "text": "so we need to do something here and this is the best thing which i end up in in my example but i maybe you have",
    "start": "2376880",
    "end": "2384480"
  },
  {
    "text": "better suggestions so you will have to keep your tasks inside",
    "start": "2384480",
    "end": "2390800"
  },
  {
    "text": "so you can push it and then somehow clean up it you need to maintain it so",
    "start": "2390800",
    "end": "2397200"
  },
  {
    "text": "not the best thing but at least i would say a workaround",
    "start": "2397200",
    "end": "2403680"
  },
  {
    "text": "so yeah maybe you will end up to making some i",
    "start": "2403680",
    "end": "2409280"
  },
  {
    "text": "don't know the base collector or something but you will need to do something and",
    "start": "2409280",
    "end": "2414880"
  },
  {
    "text": "unfortunately there is no good answer how to do it we we need to solve it by ourself",
    "start": "2414880",
    "end": "2420160"
  },
  {
    "text": "in each project manually right now so i think that's a",
    "start": "2420160",
    "end": "2425440"
  },
  {
    "text": "that's a problem so how to actually use the quartens",
    "start": "2425440",
    "end": "2431760"
  },
  {
    "start": "2431000",
    "end": "2566000"
  },
  {
    "text": "you have to implement everything you have to implement the base protein types let's imagine that you've done it then",
    "start": "2431760",
    "end": "2438400"
  },
  {
    "text": "we didn't even talk about the like uh concurrency here yes we don't create any threats and anything we",
    "start": "2438400",
    "end": "2444640"
  },
  {
    "text": "didn't try to execute our courting on the different thread but imagine that we do",
    "start": "2444640",
    "end": "2450640"
  },
  {
    "text": "then we are lack of the primitives for synchronization because we cannot use anymore std mutex is to do semaphores we",
    "start": "2450640",
    "end": "2456720"
  },
  {
    "text": "didn't cannot use the steady conditional variable because they're all blocking and that's unfortunately so you have to",
    "start": "2456720",
    "end": "2462880"
  },
  {
    "text": "implement them as well if you want have multi-threading code then second question is how to",
    "start": "2462880",
    "end": "2469119"
  },
  {
    "text": "communicate between two two curtains in the languages like go you have a",
    "start": "2469119",
    "end": "2474400"
  },
  {
    "text": "channels in the standard library and you can just use it in our case again we don't have",
    "start": "2474400",
    "end": "2479520"
  },
  {
    "text": "anything then we need the tools for integration synchronous code and asynchronous code",
    "start": "2479520",
    "end": "2485200"
  },
  {
    "text": "as i show you we need like sync weight for example or actually how to to keep the task alive and so on",
    "start": "2485200",
    "end": "2492800"
  },
  {
    "text": "the last thing is or not last thing but the one of the important thing is that you actually need to implement the synchronous api in your project so it",
    "start": "2492800",
    "end": "2499359"
  },
  {
    "text": "means every class which supposed to be available in your protein context and",
    "start": "2499359",
    "end": "2506800"
  },
  {
    "text": "use the call weight you need to go and duplicate that api that's costly",
    "start": "2506800",
    "end": "2512960"
  },
  {
    "text": "but we cannot do anything and most of the language is the way how they solve it they just just have a two api so",
    "start": "2512960",
    "end": "2519839"
  },
  {
    "text": "we have to do the same unfortunately and then there is integration with the naved loop because for example if you",
    "start": "2519839",
    "end": "2526079"
  },
  {
    "text": "use for example cute or used boost ios server you have to integrate it",
    "start": "2526079",
    "end": "2531520"
  },
  {
    "text": "uh the stediasio i think they have the support but maybe you want to have a different behavior so then you you have",
    "start": "2531520",
    "end": "2537920"
  },
  {
    "text": "to actually integrate it by yourself so and as you can see there are many things",
    "start": "2537920",
    "end": "2545119"
  },
  {
    "text": "to do and not all of them are easy so",
    "start": "2545119",
    "end": "2550720"
  },
  {
    "text": "i can just say good luck and we're doing this i can just tell a little bit about my",
    "start": "2550720",
    "end": "2556400"
  },
  {
    "text": "story because i'm i'm decided when i decided to learn the coordinates i had to actually",
    "start": "2556400",
    "end": "2562480"
  },
  {
    "text": "implement a small library because otherwise it didn't work so i implemented this e-core curtain it's a",
    "start": "2562480",
    "end": "2569200"
  },
  {
    "text": "pretty pretty small project just a few primitives and just want to play around to see how it works",
    "start": "2569200",
    "end": "2576000"
  },
  {
    "text": "i implemented not just quite few and it managed to me to build this",
    "start": "2576000",
    "end": "2581920"
  },
  {
    "text": "presentation uh i just want to highlight the two of the most important thing",
    "start": "2581920",
    "end": "2587839"
  },
  {
    "text": "is that if you have a task generic one and if you have a task promise like this base promise class",
    "start": "2587839",
    "end": "2595359"
  },
  {
    "text": "then you actually can implement the rest of the things and that's how everything inside of my library works i just reuse",
    "start": "2595359",
    "end": "2602240"
  },
  {
    "text": "this task and task promise to implement sync wait when all and other the other stuff so",
    "start": "2602240",
    "end": "2608720"
  },
  {
    "text": "if at least we have this in a standard maybe our life becomes easier maybe",
    "start": "2608720",
    "end": "2614319"
  },
  {
    "text": "and just on the end i want to show you some awesome example which i wrote with my small library",
    "start": "2614319",
    "end": "2620640"
  },
  {
    "text": "so i have the implemented the scheduler it's a single",
    "start": "2620640",
    "end": "2626480"
  },
  {
    "text": "threaded so it just like this and these schedulers spawn",
    "start": "2626480",
    "end": "2632560"
  },
  {
    "text": "three curtains one of them is just awaiting the sig end the second one in the infinite loop just",
    "start": "2632560",
    "end": "2639280"
  },
  {
    "text": "sleeps for one second and print it the third one does the same just sleep",
    "start": "2639280",
    "end": "2644400"
  },
  {
    "text": "for the 10 seconds but surprisingly it works",
    "start": "2644400",
    "end": "2649440"
  },
  {
    "text": "um no errors no mistakes here i didn't get any crashes so far",
    "start": "2649440",
    "end": "2654560"
  },
  {
    "text": "but the thing is that to be able to write this example it took for me some time i cannot say exactly because i",
    "start": "2654560",
    "end": "2662960"
  },
  {
    "text": "i did it as a fun project so it takes some time so",
    "start": "2662960",
    "end": "2669280"
  },
  {
    "text": "and i think one of them the complicated thing was there is that",
    "start": "2669280",
    "end": "2674079"
  },
  {
    "text": "it's you you have all these pieces you can build a task and then",
    "start": "2674319",
    "end": "2679520"
  },
  {
    "text": "and then how to go and integrate it and it was kind of hard to grasp build a nice api there are libraries outside of",
    "start": "2679520",
    "end": "2686720"
  },
  {
    "text": "on github you can find them but i think they all solve their own purpose uh they all solve they all needs",
    "start": "2686720",
    "end": "2694400"
  },
  {
    "text": "i think we are lacking of something more generic something that we all can use and i'm sorry i'm not saying that my",
    "start": "2694400",
    "end": "2700240"
  },
  {
    "text": "library is is the cure here i'm just saying that i tried to research something",
    "start": "2700240",
    "end": "2706800"
  },
  {
    "text": "yeah i just want to show this awesome example because i was super happy when it works",
    "start": "2706800",
    "end": "2712079"
  },
  {
    "text": "yeah so that's all i was a little bit fast i think i was a",
    "start": "2712079",
    "end": "2717760"
  },
  {
    "text": "little bit nervous you can see it so yeah thank you all everybody and",
    "start": "2717760",
    "end": "2724400"
  },
  {
    "text": "yeah do you have any questions",
    "start": "2724400",
    "end": "2728680"
  },
  {
    "text": "is using the threats yes and it you cannot control it you don't know how many threats you",
    "start": "2750240",
    "end": "2756400"
  },
  {
    "text": "allocated you you don't know that's a completely different story here this is not about uh",
    "start": "2756400",
    "end": "2763359"
  },
  {
    "text": "kind of it's it's just a mechanism for you to create something uh you you want to execute it somewhere",
    "start": "2763359",
    "end": "2769599"
  },
  {
    "text": "else but that a sync with always will create your thread sometimes you don't want a thread",
    "start": "2769599",
    "end": "2775040"
  },
  {
    "text": "so it's a little bit different concepts and the words of course i'm misleading because now we have this",
    "start": "2775040",
    "end": "2780960"
  },
  {
    "text": "thesis in chrono stuff and a study async that doesn't",
    "start": "2780960",
    "end": "2786000"
  },
  {
    "text": "any other questions everybody is going to write coroutines today",
    "start": "2788319",
    "end": "2795520"
  },
  {
    "text": "yeah tomorrow",
    "start": "2796000",
    "end": "2798720"
  },
  {
    "text": "okay if there is no any question then just ask me if you find me there",
    "start": "2801040",
    "end": "2806640"
  }
]