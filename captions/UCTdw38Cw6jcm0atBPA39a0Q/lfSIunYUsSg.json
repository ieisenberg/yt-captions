[
  {
    "text": "hello everybody thank you very much for coming to my talk especially given that it is the last talk of a long",
    "start": "3719",
    "end": "11400"
  },
  {
    "text": "day I am Dominic too I am a founder and CEO of",
    "start": "11400",
    "end": "18480"
  },
  {
    "text": "resonate now resonate is working on distributed Asun await a dead simple",
    "start": "18480",
    "end": "25519"
  },
  {
    "text": "programming model for distributed applications distributed asyn aate is",
    "start": "25519",
    "end": "32398"
  },
  {
    "text": "available as an SDK for different languages like for example JavaScript",
    "start": "32399",
    "end": "38120"
  },
  {
    "text": "typescript or Python and an optional serers side component to make",
    "start": "38120",
    "end": "44200"
  },
  {
    "text": "distributed programming a first class",
    "start": "44200",
    "end": "49239"
  },
  {
    "text": "citizen now today every application is a distributed application think of mobile applications",
    "start": "49399",
    "end": "56879"
  },
  {
    "text": "think of cloud applications or think of Microsoft the question is not whether an",
    "start": "56879",
    "end": "63000"
  },
  {
    "text": "application is distributed but to what degree an application is",
    "start": "63000",
    "end": "69240"
  },
  {
    "text": "distributed the paper characterizing microservice dependencies and performance on Alibaba Trace analysis",
    "start": "69240",
    "end": "77880"
  },
  {
    "text": "quantifies this reality the study analyzes 20,000",
    "start": "77880",
    "end": "83759"
  },
  {
    "text": "microservices over a 7-Day period the authors note that most most call graphs",
    "start": "83759",
    "end": "91439"
  },
  {
    "text": "have a degree of three service calls but still more than 10% of call",
    "start": "91439",
    "end": "98240"
  },
  {
    "text": "graphs have a degree of 40 service calls and the largest call graphs have a",
    "start": "98240",
    "end": "103479"
  },
  {
    "text": "degree of thousands of service calls now highly distributed",
    "start": "103479",
    "end": "109920"
  },
  {
    "text": "applications are sometimes referred to as the Death Star because they're striking fear Into",
    "start": "109920",
    "end": "116719"
  },
  {
    "text": "the Heart of even the most seasoned software engineer",
    "start": "116719",
    "end": "121840"
  },
  {
    "text": "now additionally within the last two decades we did not only see a",
    "start": "121960",
    "end": "127360"
  },
  {
    "text": "quantitative change we also saw a qualitative change our reality has been",
    "start": "127360",
    "end": "134080"
  },
  {
    "text": "turned upside down almost literally so when I started my",
    "start": "134080",
    "end": "140840"
  },
  {
    "text": "career my team owned a set of virtual machines these virtual machines were",
    "start": "140840",
    "end": "146720"
  },
  {
    "text": "longli resources they had names our VMS were named after airports SFO",
    "start": "146720",
    "end": "154319"
  },
  {
    "text": "LAX San because we like the three lter acronyms so we knew their names we knew",
    "start": "154319",
    "end": "160239"
  },
  {
    "text": "their IP addresses we knew the processes that were running on these virtual",
    "start": "160239",
    "end": "165480"
  },
  {
    "text": "machines so I'm sure we all have heard the expression cattle not pets so these",
    "start": "165480",
    "end": "171599"
  },
  {
    "text": "machines were definitely not cattle there weren't even pets they were basically family members and our executions",
    "start": "171599",
    "end": "179959"
  },
  {
    "text": "were mostly crud executions a user would interact uh with",
    "start": "179959",
    "end": "186680"
  },
  {
    "text": "a web page leading to a request that request led to a database query or an",
    "start": "186680",
    "end": "192280"
  },
  {
    "text": "update and that led to a response so from beginning to end the execution was",
    "start": "192280",
    "end": "199120"
  },
  {
    "text": "expected to conclude within a few hundred milliseconds now a resource termination",
    "start": "199120",
    "end": "207120"
  },
  {
    "text": "a process crash or a machine crash that was was a rare and exceptional",
    "start": "207120",
    "end": "212400"
  },
  {
    "text": "event and the chances that an execution that concludes within a few milliseconds",
    "start": "212400",
    "end": "217599"
  },
  {
    "text": "is interrupted by a rare resource termination are low and in the unlikely event that",
    "start": "217599",
    "end": "225439"
  },
  {
    "text": "happens the database transaction ensures correctness and a retry that we punted",
    "start": "225439",
    "end": "231879"
  },
  {
    "text": "to the user which was acceptable at that time ensures progress so continue Contin",
    "start": "231879",
    "end": "239799"
  },
  {
    "text": "continuity was all but guaranteed now today our reality looks a",
    "start": "239799",
    "end": "247480"
  },
  {
    "text": "lot of a lot different we are dealing with long lift",
    "start": "247480",
    "end": "252799"
  },
  {
    "text": "executions ordering food from door Dash or Uber Eats or taking a ride with lift",
    "start": "252799",
    "end": "258759"
  },
  {
    "text": "or Uber maybe managing a stay at Airbnb our executions now range from",
    "start": "258759",
    "end": "265759"
  },
  {
    "text": "minutes to hours to days or weeks and even simpl looking",
    "start": "265759",
    "end": "271600"
  },
  {
    "text": "interactions like adding an item to a shopping cart triggers a potential action in the future for example sending",
    "start": "271600",
    "end": "279360"
  },
  {
    "text": "an email a few hours or a few days later in the hopes that the user won't abandon",
    "start": "279360",
    "end": "284840"
  },
  {
    "text": "their already started shopping cart but at the same time the lifetimes of our resources have been cut",
    "start": "284840",
    "end": "292199"
  },
  {
    "text": "short processes even virtual machines they come and go now the chances that an",
    "start": "292199",
    "end": "298560"
  },
  {
    "text": "execution is inter erupted by a resource termination borders uncertainty so continuity is no longer",
    "start": "298560",
    "end": "307680"
  },
  {
    "text": "guaranteed instead Mobility is required now while distributed",
    "start": "307680",
    "end": "314800"
  },
  {
    "text": "applications enable reliability and scalability in an Ever demanding World",
    "start": "314800",
    "end": "320120"
  },
  {
    "text": "distributed applications also almost guarantee a dread full developer experience software Engineers we deal",
    "start": "320120",
    "end": "327840"
  },
  {
    "text": "with implementing orchest ation and choreography event sourcing and cqrs",
    "start": "327840",
    "end": "333240"
  },
  {
    "text": "sagas and compensation the transactional outbox pattern fan out fan in retries",
    "start": "333240",
    "end": "338280"
  },
  {
    "text": "and rate limiting and an endless list of patterns and best practices and",
    "start": "338280",
    "end": "344360"
  },
  {
    "text": "somewhere sometimes we even write a little bit of application",
    "start": "344360",
    "end": "349400"
  },
  {
    "text": "logic so because of this fragmented nature concurrent distributed systems",
    "start": "349440",
    "end": "355919"
  },
  {
    "text": "are commonly built in an event driven Style an event driven style makes code hard to",
    "start": "355919",
    "end": "362840"
  },
  {
    "text": "write and hard to read though so for each event the developer defines an",
    "start": "362840",
    "end": "368840"
  },
  {
    "text": "event handler also called a callback to drive the program to the next",
    "start": "368840",
    "end": "375160"
  },
  {
    "text": "state now since the main workflow from beginning to end is expressed in many",
    "start": "375160",
    "end": "380759"
  },
  {
    "text": "callback functions as opposed to in a single function the developer needs to",
    "start": "380759",
    "end": "386080"
  },
  {
    "text": "manually maintain the control state of the work flow that problem is known as stack",
    "start": "386080",
    "end": "394400"
  },
  {
    "text": "ripping or more commonly as callback hell there is no coherent entity that",
    "start": "394400",
    "end": "402520"
  },
  {
    "text": "specifies a coherent control flow we say that the behavior of the",
    "start": "402520",
    "end": "409400"
  },
  {
    "text": "system emerges which is a rather elegant way of admitting that we actually never",
    "start": "409400",
    "end": "414560"
  },
  {
    "text": "know what happens next we will see when it happens but can we do better can we",
    "start": "414560",
    "end": "421759"
  },
  {
    "text": "enjoy continuity in a distributed environment that is fragmented over both",
    "start": "421759",
    "end": "427000"
  },
  {
    "text": "space and time like we enjoy continuity in a non-distributed",
    "start": "427000",
    "end": "433199"
  },
  {
    "text": "environment can we provide an abstraction that does not hide",
    "start": "433199",
    "end": "438280"
  },
  {
    "text": "distribution but makes distribution a first class",
    "start": "438280",
    "end": "443599"
  },
  {
    "text": "citizen now in their book modern operating systems hen Bal and Bose use",
    "start": "445120",
    "end": "451479"
  },
  {
    "text": "this illustration to highlight the transformative nature of",
    "start": "451479",
    "end": "457039"
  },
  {
    "text": "abstractions there is a lower level and a lower level presents a set of entities",
    "start": "457039",
    "end": "462360"
  },
  {
    "text": "the ugly entities that a higher level consumes and transforms into a different",
    "start": "462360",
    "end": "468560"
  },
  {
    "text": "set of entities the beautiful entities to present to the application",
    "start": "468560",
    "end": "474319"
  },
  {
    "text": "developer now different terminology exist sometimes the lower level is called the physical level and the higher",
    "start": "474319",
    "end": "480120"
  },
  {
    "text": "level is called The Logical level sometimes the lower level is called the platform level and the higher level is",
    "start": "480120",
    "end": "485759"
  },
  {
    "text": "called the application Level but whatever terminology we use for the authors for tanam and Bose abstractions",
    "start": "485759",
    "end": "494360"
  },
  {
    "text": "turn the ugly into the beautiful so from that point of view",
    "start": "494360",
    "end": "500560"
  },
  {
    "text": "abstractions are by definition about developer",
    "start": "500560",
    "end": "506560"
  },
  {
    "text": "experience so for example from the point of view of the operating system the",
    "start": "506599",
    "end": "511840"
  },
  {
    "text": "hardware presents its ugly interface there's a CPU there is Ram there's a",
    "start": "511840",
    "end": "517120"
  },
  {
    "text": "diss the operating system consumes these entities and uh presents its beautiful",
    "start": "517120",
    "end": "523159"
  },
  {
    "text": "interface processes memory and files but as we all know beauty lies in",
    "start": "523159",
    "end": "529560"
  },
  {
    "text": "the eye of the beholder so for example from the point of view of a database system now the",
    "start": "529560",
    "end": "535760"
  },
  {
    "text": "operating system presents its ugly interface now processes memory and files",
    "start": "535760",
    "end": "541240"
  },
  {
    "text": "are undesirable the database consumes these entities and presents its beautiful",
    "start": "541240",
    "end": "547040"
  },
  {
    "text": "interface tables rows and columns neatly wrapped up in in my opinion best uh",
    "start": "547040",
    "end": "554079"
  },
  {
    "text": "abstraction ever invented a transaction so this example of databases",
    "start": "554079",
    "end": "560800"
  },
  {
    "text": "and operating system also underlined the recursive nature of um and um the",
    "start": "560800",
    "end": "567440"
  },
  {
    "text": "recursive relationships between abstractions where a higher level abstraction is composed of a lower level",
    "start": "567440",
    "end": "573240"
  },
  {
    "text": "abstraction is composed of a lower level abstraction until we hit The Primitives the simplest entities in the",
    "start": "573240",
    "end": "580880"
  },
  {
    "text": "system and each time we cross a threshold from Hardware to operating",
    "start": "580880",
    "end": "586200"
  },
  {
    "text": "system from operating system to database we enter an entirely different world",
    "start": "586200",
    "end": "591399"
  },
  {
    "text": "with different entities different relationship among those entities different constraints on these",
    "start": "591399",
    "end": "596600"
  },
  {
    "text": "relationships every single time we are presented with an entirely different",
    "start": "596600",
    "end": "603079"
  },
  {
    "text": "semantic now if abstractions are by definition about developer",
    "start": "603480",
    "end": "609880"
  },
  {
    "text": "experience then the question arises what is a good abstraction and what is a bad",
    "start": "609880",
    "end": "616839"
  },
  {
    "text": "abstraction now the obvious answer is that a good abstraction is one with a good developer experience and a bad",
    "start": "616839",
    "end": "623120"
  },
  {
    "text": "obstruction is one with a bad developer experience but that doesn't actually tell us that much",
    "start": "623120",
    "end": "629560"
  },
  {
    "text": "it's a little simplistic so let's argue that a good developer experience is a baseline is",
    "start": "629560",
    "end": "637040"
  },
  {
    "text": "table Stakes so then what is the deciding",
    "start": "637040",
    "end": "643920"
  },
  {
    "text": "factor a good abstraction is an abstraction with a good developer experience which preserves the desired",
    "start": "645040",
    "end": "651839"
  },
  {
    "text": "properties of our system and uh a bad abstraction is a one with a good",
    "start": "651839",
    "end": "658839"
  },
  {
    "text": "development experience but one which erodes the desired properties of our",
    "start": "658839",
    "end": "663959"
  },
  {
    "text": "system so good abstraction is an illusion where a bad abstraction is a",
    "start": "663959",
    "end": "671720"
  },
  {
    "text": "mirage in 1994 Jim Baldo and his colleagues from",
    "start": "671800",
    "end": "677600"
  },
  {
    "text": "Sun Microsystems they published one of my favorite papers a note on distributed",
    "start": "677600",
    "end": "684079"
  },
  {
    "text": "computing in that paper the authors argue that distributed computing fun",
    "start": "684079",
    "end": "689279"
  },
  {
    "text": "fundamentally differs from non-distributed Computing so according to the authors we",
    "start": "689279",
    "end": "695680"
  },
  {
    "text": "need to find an abstraction that simplifies building distributed systems while ensuring that developers remain",
    "start": "695680",
    "end": "703399"
  },
  {
    "text": "aware and in control of distribution as soon as we try to hide",
    "start": "703399",
    "end": "709880"
  },
  {
    "text": "the fact that a distributed system is a distributed system we will have found a",
    "start": "709880",
    "end": "715399"
  },
  {
    "text": "bad abstraction so can we provide an abstraction that",
    "start": "715399",
    "end": "721920"
  },
  {
    "text": "provides continuity on an application Level on a logical level while providing",
    "start": "721920",
    "end": "728639"
  },
  {
    "text": "Mobility on a platform level on a physical level giving the developer full control to decide what runs locally and",
    "start": "728639",
    "end": "736880"
  },
  {
    "text": "what runs remotely now distributed asnate extends",
    "start": "736880",
    "end": "744000"
  },
  {
    "text": "the Simplicity of asnate from concurrent systems to distributed systems",
    "start": "744000",
    "end": "749600"
  },
  {
    "text": "distributed asyn ofate is designed with one purpose to provide a dead simple",
    "start": "749600",
    "end": "756399"
  },
  {
    "text": "delightful developer experience now to understand why the",
    "start": "756399",
    "end": "762320"
  },
  {
    "text": "current developer experience of distributed systems is broken Let's uh revisit the evolution of software",
    "start": "762320",
    "end": "769079"
  },
  {
    "text": "systems and programming models from past to present so the 1950s to 1980s there were",
    "start": "769079",
    "end": "777160"
  },
  {
    "text": "the era of Simplicity you developers were tasked to write code for single machine single core platforms platforms",
    "start": "777160",
    "end": "785720"
  },
  {
    "text": "capable of Performing exactly one step at a time and that error gave rise to",
    "start": "785720",
    "end": "791360"
  },
  {
    "text": "the rise that error gave rise to the Quint essential programming model the",
    "start": "791360",
    "end": "797000"
  },
  {
    "text": "sequential programming model the sequential programming model is based on functions functions are the",
    "start": "797000",
    "end": "804360"
  },
  {
    "text": "universal abstraction for computation and they compose recursively",
    "start": "804360",
    "end": "809480"
  },
  {
    "text": "even our largest systems are built from the smallest building blocks from",
    "start": "809480",
    "end": "815040"
  },
  {
    "text": "functions functions call other functions in a simple linear flow of",
    "start": "815040",
    "end": "822279"
  },
  {
    "text": "control but then the 1990s and 2000s were the era of rising",
    "start": "823120",
    "end": "828440"
  },
  {
    "text": "complexity now developers at large were tasked to write code for single machine",
    "start": "828440",
    "end": "834600"
  },
  {
    "text": "but multicore platforms platforms that are capable of Performing multiple steps",
    "start": "834600",
    "end": "840800"
  },
  {
    "text": "at a time so this shift from single core to multicore platforms necessitated a shift",
    "start": "840800",
    "end": "848279"
  },
  {
    "text": "from the sequential programming model to the concurrent programming model the initial",
    "start": "848279",
    "end": "854440"
  },
  {
    "text": "solution let's add threads unfortunately adding threads to",
    "start": "854440",
    "end": "860040"
  },
  {
    "text": "the sequential programming model is not just simply a minor addition it is in",
    "start": "860040",
    "end": "866120"
  },
  {
    "text": "fact a major disruption functions on the linear control flow are",
    "start": "866120",
    "end": "871800"
  },
  {
    "text": "simple and delightful but functions and threats so essentially functions on the",
    "start": "871800",
    "end": "876880"
  },
  {
    "text": "nonlinear control flow they are pretty complex and",
    "start": "876880",
    "end": "882199"
  },
  {
    "text": "threatful what's the issue here we did not Elevate concurrency to a first class",
    "start": "882199",
    "end": "888880"
  },
  {
    "text": "citizen of the programming model instead we tried to bold concurrency onto an",
    "start": "888880",
    "end": "895160"
  },
  {
    "text": "existing model hoping it would kind of like seamlessly integrate but it did",
    "start": "895160",
    "end": "901440"
  },
  {
    "text": "not in 2006 Edward a Le published a paper the problem with",
    "start": "901440",
    "end": "907959"
  },
  {
    "text": "threads he presented a model that shows how running a sequential computation",
    "start": "907959",
    "end": "913160"
  },
  {
    "text": "across multiple threats results in effectively arbitrary behavior and I believe we can all",
    "start": "913160",
    "end": "920199"
  },
  {
    "text": "basically relate to that observation whenever I work on a sequential system a sequential function",
    "start": "920199",
    "end": "926680"
  },
  {
    "text": "I can almost effortlessly reason about the resulting Behavior but as soon as I ask myself",
    "start": "926680",
    "end": "934199"
  },
  {
    "text": "wait a second what threat was SE function running under then my reasoning",
    "start": "934199",
    "end": "939920"
  },
  {
    "text": "basically devolves into some kind of guessing",
    "start": "939920",
    "end": "944480"
  },
  {
    "text": "game now the answer to that problem were concurrent programming models that is",
    "start": "946480",
    "end": "952120"
  },
  {
    "text": "programming models where concurrency is a first class citizen one concurrent program in model",
    "start": "952120",
    "end": "960199"
  },
  {
    "text": "is asate asate extends the sequential programming model based on functions",
    "start": "960199",
    "end": "968199"
  },
  {
    "text": "with promises and promises are a universal abstraction for",
    "start": "968199",
    "end": "975480"
  },
  {
    "text": "coordination and asate has become the foundation for many languages such as JavaScript typescript python rust CP FP",
    "start": "975480",
    "end": "984519"
  },
  {
    "text": "or cotlin I'm sure I'm forgetting some",
    "start": "984519",
    "end": "989600"
  },
  {
    "text": "now the 2010s to the present they are the era of exploding",
    "start": "990959",
    "end": "997319"
  },
  {
    "text": "complexity now as developers we are tasked to write code for multiple",
    "start": "997319",
    "end": "1003440"
  },
  {
    "text": "machines now we are tasked to write distributed systems and this shift from single",
    "start": "1003440",
    "end": "1009639"
  },
  {
    "text": "machine to multimachine platforms necessitates a shift from concurrent programming to distributed",
    "start": "1009639",
    "end": "1016440"
  },
  {
    "text": "programming just like before the initial solution let's add networking or if you",
    "start": "1016440",
    "end": "1023319"
  },
  {
    "text": "want to be fancy remote procedure calls to the concurrent programming",
    "start": "1023319",
    "end": "1029240"
  },
  {
    "text": "model but just as adding threads was not simply a minor addition to the",
    "start": "1029240",
    "end": "1034400"
  },
  {
    "text": "sequential programming model adding networking is not simply a minor addition to the concurrent programming",
    "start": "1034400",
    "end": "1040319"
  },
  {
    "text": "model adding networking is a major disruption",
    "start": "1040319",
    "end": "1046240"
  },
  {
    "text": "the issue similar as before this time we did not Elevate distribution to be a",
    "start": "1049320",
    "end": "1054480"
  },
  {
    "text": "first class citizen of the programming model instead we tried to bold on distribution onto the existing model",
    "start": "1054480",
    "end": "1059919"
  },
  {
    "text": "hoping it would seemlessly integrate and it did not in 1994 Peter Deutsch also",
    "start": "1059919",
    "end": "1066120"
  },
  {
    "text": "from Sun microsystem these folks were really ahead of their time published the seven",
    "start": "1066120",
    "end": "1071679"
  },
  {
    "text": "fallacies of distributed computing and in 1997 James Gosling added the eighth",
    "start": "1071679",
    "end": "1077320"
  },
  {
    "text": "fallacy to distribut of distributed computing now without going into the",
    "start": "1077320",
    "end": "1082520"
  },
  {
    "text": "details of the fallacies the fallacies outline that local and remote procedure calls cannot be treated",
    "start": "1082520",
    "end": "1090919"
  },
  {
    "text": "uniformly so what's the answer like before the answer",
    "start": "1091880",
    "end": "1097280"
  },
  {
    "text": "distributed programming models that is programming models where distribution is a first class",
    "start": "1097280",
    "end": "1102679"
  },
  {
    "text": "Citizen and the possible distributed programming model is distributed async ofate like traditional asyn provate",
    "start": "1102679",
    "end": "1110400"
  },
  {
    "text": "distributed asnate is built on the concepts of functions and promises but distributed as synovate",
    "start": "1110400",
    "end": "1117480"
  },
  {
    "text": "elevates the traditional Paradigm beyond the boundaries of a single",
    "start": "1117480",
    "end": "1123639"
  },
  {
    "text": "process so to summarize the um",
    "start": "1124280",
    "end": "1130840"
  },
  {
    "text": "Evolution we started with uh sequential programming and sequential programming is characterized by total order and by",
    "start": "1130840",
    "end": "1139280"
  },
  {
    "text": "total failure then we transition from sequential to concurrent programming and",
    "start": "1139280",
    "end": "1146080"
  },
  {
    "text": "that transition is characterized by partial order but still total",
    "start": "1146080",
    "end": "1152919"
  },
  {
    "text": "failure and then we transitioned from uh concurrent to distributed programming",
    "start": "1152919",
    "end": "1159360"
  },
  {
    "text": "with distributed programming being characterized by partial order and partial",
    "start": "1159360",
    "end": "1166799"
  },
  {
    "text": "failure now with that frame work in mind we can articulate the key",
    "start": "1166840",
    "end": "1172480"
  },
  {
    "text": "requirements of a concurrent distributed programming model first we must effectively manage",
    "start": "1172480",
    "end": "1181159"
  },
  {
    "text": "partial order even across processes so our programming model must",
    "start": "1181159",
    "end": "1187520"
  },
  {
    "text": "support distributed coordination and second we must",
    "start": "1187520",
    "end": "1193840"
  },
  {
    "text": "effectively manage the effects of partial failure",
    "start": "1193840",
    "end": "1199679"
  },
  {
    "text": "so our programming model must support distributed",
    "start": "1199679",
    "end": "1205000"
  },
  {
    "text": "recovery now before we discuss distributed asyn ofate let's briefly explore the containing category of",
    "start": "1206240",
    "end": "1213840"
  },
  {
    "text": "durable executions although the term durable executions has only recently gained",
    "start": "1213840",
    "end": "1220760"
  },
  {
    "text": "popularity the fundamental idea has been present in software engineering for many",
    "start": "1220760",
    "end": "1226039"
  },
  {
    "text": "many years the desire for durable executions came",
    "start": "1226039",
    "end": "1232159"
  },
  {
    "text": "because long lift executions outlift short lift",
    "start": "1232159",
    "end": "1237280"
  },
  {
    "text": "resources so in effect durable executions are executions with resume",
    "start": "1237280",
    "end": "1245320"
  },
  {
    "text": "semantics an execution is a sequence of",
    "start": "1245320",
    "end": "1250520"
  },
  {
    "text": "steps when the resource hosting the execution terminates well the execution terminates",
    "start": "1250520",
    "end": "1257320"
  },
  {
    "text": "with it resume semantics refer to the ability of",
    "start": "1257320",
    "end": "1263120"
  },
  {
    "text": "an execution to continue from its Interruption point when another resource",
    "start": "1263120",
    "end": "1268440"
  },
  {
    "text": "becomes available so there are two possible mental models there are two points of",
    "start": "1268440",
    "end": "1275320"
  },
  {
    "text": "views that you can take you can argue that The Logical execution did not experience an interruption or you can",
    "start": "1275320",
    "end": "1283000"
  },
  {
    "text": "argue that The Logical execution experienced an interruption subsequently",
    "start": "1283000",
    "end": "1288679"
  },
  {
    "text": "covered and resumed now on first glance resume",
    "start": "1288679",
    "end": "1293760"
  },
  {
    "text": "semantics feel like Voodoo and black magic right an execution coming back to life that's kind of weird but resume",
    "start": "1293760",
    "end": "1301520"
  },
  {
    "text": "semantics are actually surprisingly easy to achieve based on restart semantics",
    "start": "1301520",
    "end": "1307039"
  },
  {
    "text": "and item potent steps so the core idea hinges on an",
    "start": "1307039",
    "end": "1312720"
  },
  {
    "text": "equivalence relationship the effect of an execution that is interrupted and resumed",
    "start": "1312720",
    "end": "1319559"
  },
  {
    "text": "must be equivalent to the effect of an execution that is interrupted and restarted given that the individual",
    "start": "1319559",
    "end": "1326760"
  },
  {
    "text": "steps of the execution are itm potent and now there are largely two",
    "start": "1326760",
    "end": "1334360"
  },
  {
    "text": "categories of uh durable executions in data orchestration and in service",
    "start": "1334360",
    "end": "1343080"
  },
  {
    "text": "orchestration I'm sure we're all um familiar at least by name of uh the big",
    "start": "1343080",
    "end": "1348559"
  },
  {
    "text": "contenders like for example Hadoop spark or airflow and in service orchestration we",
    "start": "1348559",
    "end": "1355720"
  },
  {
    "text": "see uh simple workflow cunda AWS step functions Cadence and",
    "start": "1355720",
    "end": "1363158"
  },
  {
    "text": "tempor so although the specific mechanisms of these Technologies vary",
    "start": "1363200",
    "end": "1371320"
  },
  {
    "text": "all of these Technologies use some form of either snapshotting taking a state or",
    "start": "1371320",
    "end": "1379400"
  },
  {
    "text": "checkpointing um persisting the events that led to the state to save their",
    "start": "1379400",
    "end": "1384679"
  },
  {
    "text": "progress in stable storage and durable storage in a database so snapshotting or",
    "start": "1384679",
    "end": "1391559"
  },
  {
    "text": "checkpointing leads to an inherently Interruption tolerant design so in the",
    "start": "1391559",
    "end": "1396760"
  },
  {
    "text": "event of a voluntary or involuntary Interruption the process continues from its last snapshot or checkpoint resume",
    "start": "1396760",
    "end": "1406360"
  },
  {
    "text": "semantics now distributed a innate differs from other implementations of durable",
    "start": "1406480",
    "end": "1412600"
  },
  {
    "text": "executions other implementations are based on proprietary programming",
    "start": "1412600",
    "end": "1417919"
  },
  {
    "text": "models based on non-c composable abstractions requiring a central piece",
    "start": "1417919",
    "end": "1424600"
  },
  {
    "text": "of infrastructure often called an orchestrator which is responsible for orchestrating or scheduling every single",
    "start": "1424600",
    "end": "1431120"
  },
  {
    "text": "step of a computation so most commonly you will find abstractions like for example",
    "start": "1431120",
    "end": "1438000"
  },
  {
    "text": "workflow flows and then workflow call either actions or steps or activities and generally these abstractions are not",
    "start": "1438000",
    "end": "1444640"
  },
  {
    "text": "necessarily composable workflows cannot call other workflows activity cannot call other activities and activities",
    "start": "1444640",
    "end": "1450520"
  },
  {
    "text": "cannot call workflows so distributed asnate is an extension of as synovate and like as",
    "start": "1450520",
    "end": "1457919"
  },
  {
    "text": "synovate is simply based on functions and promises or more specifically is",
    "start": "1457919",
    "end": "1464200"
  },
  {
    "text": "based on durable functions and durable promises that still recursively",
    "start": "1464200",
    "end": "1470520"
  },
  {
    "text": "compos so let's look at distributed asyn a one step at a time we start with",
    "start": "1470520",
    "end": "1476159"
  },
  {
    "text": "asnate we look at AS synovate Plus networking and then we go all the way to distributed asyn",
    "start": "1476159",
    "end": "1483600"
  },
  {
    "text": "ofate now as we already mentioned many times asy synovate is based on two Primitives or two abstractions functions",
    "start": "1483600",
    "end": "1490559"
  },
  {
    "text": "and Promises um asnate extends the sequential programming model by its",
    "start": "1490559",
    "end": "1497480"
  },
  {
    "text": "namesake key words as and",
    "start": "1497480",
    "end": "1502520"
  },
  {
    "text": "AIT as a decouples a caller from the",
    "start": "1502720",
    "end": "1508000"
  },
  {
    "text": "call Via promises when the caller invokes the",
    "start": "1508000",
    "end": "1514760"
  },
  {
    "text": "call instead of waiting for a result the caller immediately receives a",
    "start": "1514760",
    "end": "1521080"
  },
  {
    "text": "promise while the coli executes",
    "start": "1521080",
    "end": "1526158"
  },
  {
    "text": "concurrently now caller and and coli are able to coordinate their",
    "start": "1526480",
    "end": "1531840"
  },
  {
    "text": "execution with a caller waiting for the promise and the Ki fulfilling its",
    "start": "1531840",
    "end": "1540000"
  },
  {
    "text": "promise so in short functions are Universal abstraction for computation",
    "start": "1540000",
    "end": "1545039"
  },
  {
    "text": "and promises or Universal abstractions for coordination now a promise has two",
    "start": "1545039",
    "end": "1553159"
  },
  {
    "text": "facets two sides on the one hand a promise can be interpreted",
    "start": "1553159",
    "end": "1559120"
  },
  {
    "text": "as a representation of a future value and on the other hand the promise can be",
    "start": "1559120",
    "end": "1564159"
  },
  {
    "text": "interpreted as a representation of an execution a handle to the execution fulfilling the",
    "start": "1564159",
    "end": "1570279"
  },
  {
    "text": "promise now languages and Frameworks that emphasize that a promise can be",
    "start": "1570279",
    "end": "1575399"
  },
  {
    "text": "interpreted as a value also use terms like future whereas languages and",
    "start": "1575399",
    "end": "1581320"
  },
  {
    "text": "Frameworks that emphasize that a promise can be interpreted as an execution or a handle of an execution they often use",
    "start": "1581320",
    "end": "1588399"
  },
  {
    "text": "terms like task and then there are still others that honor the Duality by using a",
    "start": "1588399",
    "end": "1595200"
  },
  {
    "text": "neutral term like for example available but in any case A promise is either pending or completed more specifically",
    "start": "1595200",
    "end": "1602919"
  },
  {
    "text": "resolved or rejected if a promise is pending the promise is unfulfilled and the execution",
    "start": "1602919",
    "end": "1609520"
  },
  {
    "text": "is still ongoing and if a promise is completed the promise is fulfilled and the",
    "start": "1609520",
    "end": "1614720"
  },
  {
    "text": "execution has concluded the promise is resolved olved that indicates success",
    "start": "1614720",
    "end": "1620159"
  },
  {
    "text": "and if the promise is rejected that indicates a failure now the most significant change",
    "start": "1620159",
    "end": "1627960"
  },
  {
    "text": "of asyn ofate over the sequential model is the introduction of multiple units of",
    "start": "1627960",
    "end": "1633919"
  },
  {
    "text": "execution that can execute at the same time now here in the sequential model",
    "start": "1633919",
    "end": "1640640"
  },
  {
    "text": "when a caller invokes the coli the caller transfers control to the coli and",
    "start": "1640640",
    "end": "1647000"
  },
  {
    "text": "suspends itself until the Calli terminates transferring",
    "start": "1647000",
    "end": "1652159"
  },
  {
    "text": "control back to the caller so in the sequential model at any",
    "start": "1652159",
    "end": "1658320"
  },
  {
    "text": "point in time there is only one active unit of execution a dead simple",
    "start": "1658320",
    "end": "1664320"
  },
  {
    "text": "programming model leading to a dead simple developer",
    "start": "1664320",
    "end": "1669399"
  },
  {
    "text": "experience in asyn when a caller invokes a Col the",
    "start": "1669720",
    "end": "1675000"
  },
  {
    "text": "caller does not transfer control to the col instead the caller receives a promise",
    "start": "1675000",
    "end": "1681480"
  },
  {
    "text": "and resumes execution and the call starts its",
    "start": "1681480",
    "end": "1687600"
  },
  {
    "text": "execution now eventually when the caller needs the result of the call the caller",
    "start": "1687600",
    "end": "1693399"
  },
  {
    "text": "awaits the promise if the promise is still pending the caller suspends until",
    "start": "1693399",
    "end": "1701159"
  },
  {
    "text": "the call terminates and completes the promise now in asyn ofate after the",
    "start": "1701159",
    "end": "1708760"
  },
  {
    "text": "caller invokes the col there can be more than one unit of execution more than one",
    "start": "1708760",
    "end": "1715399"
  },
  {
    "text": "active unit of execution at one point in",
    "start": "1715399",
    "end": "1720519"
  },
  {
    "text": "time now Asun of8 forms an um asyn call",
    "start": "1721039",
    "end": "1727000"
  },
  {
    "text": "graph that embodies or encodes the concurrent structure of our programs as",
    "start": "1727000",
    "end": "1733919"
  },
  {
    "text": "a first class citizen the programming model itself is aware of the",
    "start": "1733919",
    "end": "1740640"
  },
  {
    "text": "concurrency so when an Asen execution invokes an Asen function the promise is",
    "start": "1740640",
    "end": "1745799"
  },
  {
    "text": "created and an execution is spawned and the caller is then able to",
    "start": "1745799",
    "end": "1751240"
  },
  {
    "text": "avit the promise in effect evading the termination of the Ki and with these simple",
    "start": "1751240",
    "end": "1758760"
  },
  {
    "text": "interactions with these very simple relationships we can build arbitrary",
    "start": "1758760",
    "end": "1763840"
  },
  {
    "text": "large and arbitrary complex concurrent yet coordin ated",
    "start": "1763840",
    "end": "1770840"
  },
  {
    "text": "computations now awaiting a promise delineates an execution into multiple",
    "start": "1775600",
    "end": "1782440"
  },
  {
    "text": "spans when an execution awaits a promise the execution is suspended and its",
    "start": "1782440",
    "end": "1788760"
  },
  {
    "text": "continuation will be invoked when the promise",
    "start": "1788760",
    "end": "1794398"
  },
  {
    "text": "completes so again in summary asnate is a formalization of the concurrent",
    "start": "1796039",
    "end": "1802200"
  },
  {
    "text": "structure of our computations however when we start",
    "start": "1802200",
    "end": "1808840"
  },
  {
    "text": "talking about distributed applications asnate especially the asyn call graph",
    "start": "1808840",
    "end": "1815120"
  },
  {
    "text": "reveals its shortcomings while asyn ofate is a",
    "start": "1815120",
    "end": "1821679"
  },
  {
    "text": "formalization of the concurrent structure of our computation the relationships in the as",
    "start": "1821679",
    "end": "1828760"
  },
  {
    "text": "call graph are first class citizens only within a process only within a",
    "start": "1828760",
    "end": "1838120"
  },
  {
    "text": "runtime across processes the relationships are no longer formally",
    "start": "1838120",
    "end": "1844600"
  },
  {
    "text": "handled by the runtime instead they are handled ad hoc by the application and the application",
    "start": "1844600",
    "end": "1852880"
  },
  {
    "text": "developer I would argue the two most popular mechanisms are via HTTP called",
    "start": "1852880",
    "end": "1858799"
  },
  {
    "text": "and Via job cues or task cues each with their own",
    "start": "1858799",
    "end": "1864279"
  },
  {
    "text": "drawback the first option HTTP calls tightly couple the caller and the",
    "start": "1864279",
    "end": "1870360"
  },
  {
    "text": "call an HTTP call requires the caller to maintain a connection with the Ki for",
    "start": "1870360",
    "end": "1878480"
  },
  {
    "text": "the lifetime of the col so in other words a call imposes its",
    "start": "1878480",
    "end": "1883679"
  },
  {
    "text": "own lifetime onto the caller in most cases if the caller terminates",
    "start": "1883679",
    "end": "1890960"
  },
  {
    "text": "or the connection terminates the col will be",
    "start": "1890960",
    "end": "1897600"
  },
  {
    "text": "terminated sorry the uh Ki will be terminated there a very odd relationship",
    "start": "1901639",
    "end": "1907720"
  },
  {
    "text": "between two independent units of execution however on the plus yeah HTTP",
    "start": "1907720",
    "end": "1915360"
  },
  {
    "text": "calls are very easy to implement so despite the drawbacks HTTP calls are",
    "start": "1915360",
    "end": "1920679"
  },
  {
    "text": "often the First Choice among developers now the second option it's",
    "start": "1920679",
    "end": "1925720"
  },
  {
    "text": "like job or task cues job or task cues they Loosely",
    "start": "1925720",
    "end": "1930760"
  },
  {
    "text": "couple the caller and the coli but after the caller enes a job the",
    "start": "1930760",
    "end": "1936799"
  },
  {
    "text": "job kind of disappears somewhere in the system and now what so it's like okay",
    "start": "1936799",
    "end": "1943720"
  },
  {
    "text": "how do we know that the job has finished how do we get its result how do we propagate a",
    "start": "1943720",
    "end": "1949159"
  },
  {
    "text": "failure how do we resume a suspended call evading the",
    "start": "1949159",
    "end": "1954360"
  },
  {
    "text": "call so coordination across processes is not",
    "start": "1954360",
    "end": "1961240"
  },
  {
    "text": "simple now it's not one call graph it's many fragmented call graphs with Half",
    "start": "1961240",
    "end": "1968399"
  },
  {
    "text": "Baked relationships no value propagation no failure propagation no debugging",
    "start": "1968399",
    "end": "1974120"
  },
  {
    "text": "ability very little insight into the system",
    "start": "1974120",
    "end": "1979600"
  },
  {
    "text": "if a process terminates the execution that's hosted on the process terminates",
    "start": "1980159",
    "end": "1985480"
  },
  {
    "text": "with it and as we just discussed if you're using HTTP calls all transitive",
    "start": "1985480",
    "end": "1991519"
  },
  {
    "text": "dependencies will be terminated as well for like no actual",
    "start": "1991519",
    "end": "1998480"
  },
  {
    "text": "reason all right if these executions are short and cheap that's fine if these",
    "start": "1998480",
    "end": "2004679"
  },
  {
    "text": "executions are long and expensive then it's not fine that's not",
    "start": "2004679",
    "end": "2009840"
  },
  {
    "text": "good so Additionally the original caller has to act as a supervisor and then",
    "start": "2009840",
    "end": "2017279"
  },
  {
    "text": "restart an execution in case of a crash and then the newly started",
    "start": "2017279",
    "end": "2023240"
  },
  {
    "text": "execution transitively starts all of its dependent executions but I mean there's there",
    "start": "2023240",
    "end": "2029799"
  },
  {
    "text": "there's a catch so the caller has to act as a supervisor for the",
    "start": "2029799",
    "end": "2035600"
  },
  {
    "text": "Ki yeah but now it's caller has to act as the supervisor for it right and then",
    "start": "2035600",
    "end": "2040960"
  },
  {
    "text": "the question is how far can we kick that can down the road So eventually we reach the top level",
    "start": "2040960",
    "end": "2047240"
  },
  {
    "text": "execution what do we what do we do then when that crashes who supervises the supervisor the last supervisor just",
    "start": "2047240",
    "end": "2053800"
  },
  {
    "text": "exited the building so asyn plus networking leaves us with a lot of questions but doesn't",
    "start": "2053800",
    "end": "2061800"
  },
  {
    "text": "necessarily give us a lot of answers and we basically have to figure it out at hoc for each and every project over and",
    "start": "2061800",
    "end": "2067520"
  },
  {
    "text": "over over again so that is where distributed async of8 comes in distributed async of8",
    "start": "2067520",
    "end": "2075040"
  },
  {
    "text": "formalizes the distributed structure of computations and like asyn based on",
    "start": "2075040",
    "end": "2081960"
  },
  {
    "text": "exactly two Primitives durable functions and durable",
    "start": "2081960",
    "end": "2087599"
  },
  {
    "text": "promises and durable promises are based on a strikingly simple",
    "start": "2087599",
    "end": "2094280"
  },
  {
    "text": "idea durable promises have a unique ID or URL and store their state and durable",
    "start": "2094280",
    "end": "2100920"
  },
  {
    "text": "storage a database the end that's it",
    "start": "2100920",
    "end": "2106359"
  },
  {
    "text": "that is the change we need to make to implement a truly distributed programming model based on that we can",
    "start": "2106359",
    "end": "2112880"
  },
  {
    "text": "now formalize the distributed structure of our",
    "start": "2112880",
    "end": "2118040"
  },
  {
    "text": "application Now crossprocess relationships are are actually first class relationships instead of a",
    "start": "2124320",
    "end": "2131520"
  },
  {
    "text": "fragmented call graph we have one coherent call graph with uniform control",
    "start": "2131520",
    "end": "2137040"
  },
  {
    "text": "flow semantics uniform value propagation and uniform error",
    "start": "2137040",
    "end": "2142880"
  },
  {
    "text": "propagation now at any point in time any location an execution can await another",
    "start": "2142880",
    "end": "2148560"
  },
  {
    "text": "execution either locally or remotely also failure handling is now no",
    "start": "2148560",
    "end": "2156880"
  },
  {
    "text": "longer at h but failure handling is part of the programming model if a process terminates the",
    "start": "2156880",
    "end": "2163160"
  },
  {
    "text": "execution hosted on the process still terminates there's really not much we can do about that however transitive dependencies",
    "start": "2163160",
    "end": "2171079"
  },
  {
    "text": "will no longer be terminated and the system will simply",
    "start": "2171079",
    "end": "2177319"
  },
  {
    "text": "restart the execution that crashed no other executions are",
    "start": "2177319",
    "end": "2183880"
  },
  {
    "text": "affected and because promises have stable ID s the downstream and Upstream",
    "start": "2183880",
    "end": "2190640"
  },
  {
    "text": "executions can simply rejoin the newly started",
    "start": "2190640",
    "end": "2195839"
  },
  {
    "text": "execution by referring to the ID of the promise the call graph is able to repair",
    "start": "2195839",
    "end": "2204280"
  },
  {
    "text": "itself so in summary as of8 formalizes the concurrent structure of local",
    "start": "2204319",
    "end": "2211720"
  },
  {
    "text": "computations and does not concern itself with recovery distributed asyn of8",
    "start": "2211720",
    "end": "2218359"
  },
  {
    "text": "formalizes the concurrent structure of global computations and additionally formalizes",
    "start": "2218359",
    "end": "2226640"
  },
  {
    "text": "recovery now let's look at two case studies the first case study is simply a",
    "start": "2226880",
    "end": "2232680"
  },
  {
    "text": "super contrived example of Fu calling bar calling",
    "start": "2232680",
    "end": "2237800"
  },
  {
    "text": "bass however that example highlights that the developer can freely choose if",
    "start": "2238119",
    "end": "2244400"
  },
  {
    "text": "a coli should be spawned locally alongside the caller or on a different",
    "start": "2244400",
    "end": "2250880"
  },
  {
    "text": "process for example for load distribution after that decision the",
    "start": "2250880",
    "end": "2258440"
  },
  {
    "text": "semantics of local and remote executions are unified value propagation error",
    "start": "2258440",
    "end": "2263920"
  },
  {
    "text": "propagation aing computation so coordination is all the",
    "start": "2263920",
    "end": "2270560"
  },
  {
    "text": "same so this example leads to a process structure some of bar and bars executing",
    "start": "2271640",
    "end": "2277000"
  },
  {
    "text": "in the same process some of bar of bus executing in different processes and the developer has full control to decide",
    "start": "2277000",
    "end": "2284079"
  },
  {
    "text": "where an execution executes while the executions have unified",
    "start": "2284079",
    "end": "2290480"
  },
  {
    "text": "semantics okay now to the second case study which is a bit more comprehensive and in my opinion also a bit more",
    "start": "2290920",
    "end": "2299200"
  },
  {
    "text": "thought-provoking let's build a simple application a countdown timer we",
    "start": "2299200",
    "end": "2304520"
  },
  {
    "text": "initiate a countdown with a phone number a count and a",
    "start": "2304520",
    "end": "2310240"
  },
  {
    "text": "frequency so for instance we may initiate starting at 10 with a frequency",
    "start": "2310400",
    "end": "2315480"
  },
  {
    "text": "of 15 minutes so then the application will send a text message to the provided",
    "start": "2315480",
    "end": "2321280"
  },
  {
    "text": "phone number every 15 minutes decreasing the count by one each time until we",
    "start": "2321280",
    "end": "2326880"
  },
  {
    "text": "reach zero and for an extra challenge let's build this application on a serverless",
    "start": "2326880",
    "end": "2333720"
  },
  {
    "text": "platform functions as a service for example AWS Lambda or aure",
    "start": "2333720",
    "end": "2339440"
  },
  {
    "text": "functions first let's write this application in the most straightforward way with one sequential style",
    "start": "2340240",
    "end": "2349680"
  },
  {
    "text": "function this function will send the current countdown value and then wait",
    "start": "2349680",
    "end": "2354960"
  },
  {
    "text": "for the specified delay in a loop I mean that's that's that's just",
    "start": "2354960",
    "end": "2360240"
  },
  {
    "text": "delightful developer experience the code is super easy to write the code is super easy to read and the code is a direct",
    "start": "2360240",
    "end": "2366800"
  },
  {
    "text": "reflection of the business logic so as software developers we do",
    "start": "2366800",
    "end": "2372280"
  },
  {
    "text": "not need to think about the state of the execution right like I'm not thinking",
    "start": "2372280",
    "end": "2378160"
  },
  {
    "text": "about managing an instruction pointer the stack the Heap all of that just",
    "start": "2378160",
    "end": "2384760"
  },
  {
    "text": "happens so there is one execution on The Logical layer and that is carried out by",
    "start": "2385200",
    "end": "2391720"
  },
  {
    "text": "exactly one execution on the physical layer using a single function instance",
    "start": "2391720",
    "end": "2397440"
  },
  {
    "text": "so both The Logical layer as well as the physical layer consists of one execution",
    "start": "2397440",
    "end": "2402599"
  },
  {
    "text": "with identity and integrity but however as we are all",
    "start": "2402599",
    "end": "2408280"
  },
  {
    "text": "aware there are few problems with that approach right so both in the absence of failure and in the presence of",
    "start": "2408280",
    "end": "2415839"
  },
  {
    "text": "failure so a countdown starting at 10 with a frequency of 15 minutes will take",
    "start": "2415839",
    "end": "2421440"
  },
  {
    "text": "135 minutes or 2 hours and 15 minutes to complete so if you do quick back of the",
    "start": "2421440",
    "end": "2428240"
  },
  {
    "text": "envelope calculation and we assume that sending a text message takes like 500",
    "start": "2428240",
    "end": "2433839"
  },
  {
    "text": "milliseconds VI an API like for example twio then the execution is active for 5",
    "start": "2433839",
    "end": "2439640"
  },
  {
    "text": "seconds and the sleep for 2 hours 14 uh um minutes and 55",
    "start": "2439640",
    "end": "2445359"
  },
  {
    "text": "seconds so first off most seress platforms have a time limit yeah so for for AWS Lambda if I'm not mistaken that",
    "start": "2445359",
    "end": "2452440"
  },
  {
    "text": "time limit is 15 minutes if your function exe execution exceeds that time limit it will forcibly be",
    "start": "2452440",
    "end": "2460240"
  },
  {
    "text": "terminated but then even if your platform didn't have a time limit then",
    "start": "2460240",
    "end": "2465359"
  },
  {
    "text": "you're still paying for 2 hours 15 minutes yeah instead of just for 5",
    "start": "2465359",
    "end": "2471040"
  },
  {
    "text": "seconds so that also doesn't add up now we are exasperating that problem",
    "start": "2471040",
    "end": "2477599"
  },
  {
    "text": "with an HTTP binding so again HTTP working over a TCP is a stateful",
    "start": "2477599",
    "end": "2485200"
  },
  {
    "text": "connection if the connection props or function execution may get canceled so now we're forcing the client",
    "start": "2485480",
    "end": "2493359"
  },
  {
    "text": "to hold a connection for 2 hours 15 minutes and make sure the process",
    "start": "2493359",
    "end": "2500640"
  },
  {
    "text": "executes sorry didn't work and um and to make",
    "start": "2500640",
    "end": "2506960"
  },
  {
    "text": "sure that when the process executes we we we know when the process is",
    "start": "2506960",
    "end": "2512400"
  },
  {
    "text": "completed and then in the case of a failure this bad situation becomes worse",
    "start": "2512400",
    "end": "2518040"
  },
  {
    "text": "when the process crashes we have to retry now we starting the process from the very beginning that gets terminated",
    "start": "2518040",
    "end": "2525319"
  },
  {
    "text": "again after 15 minutes we're never going to end so that is clearly not an",
    "start": "2525319",
    "end": "2534640"
  },
  {
    "text": "option all right then let's write this application in a way to circumvent",
    "start": "2534640",
    "end": "2540760"
  },
  {
    "text": "forcible termination due to timeouts yeah let's let's write an event driven function so this function sends the",
    "start": "2540760",
    "end": "2548440"
  },
  {
    "text": "current countdown value and then schedules another invocation for the",
    "start": "2548440",
    "end": "2553599"
  },
  {
    "text": "future so it basically manually schedules its own continuation but that's not really a",
    "start": "2553599",
    "end": "2560280"
  },
  {
    "text": "delightful experience I mean this is just a few lines of code and they're already kind of hard to write they're kind of hard to read yeah and um it's",
    "start": "2560280",
    "end": "2569440"
  },
  {
    "text": "only indirectly in a round about way reflects our business logic so let's think of a complicated business process",
    "start": "2569440",
    "end": "2576680"
  },
  {
    "text": "and this is going to get out of hand very very quick so now as software developers",
    "start": "2576680",
    "end": "2583640"
  },
  {
    "text": "again stack wrapping on callback H we need to manage the state of the ex execution explicitly on an on an",
    "start": "2583640",
    "end": "2589960"
  },
  {
    "text": "application Level so in effect we now need to manage the instruction pointer",
    "start": "2589960",
    "end": "2595160"
  },
  {
    "text": "we need to manage the relevant section of the stack and we need to uh manage",
    "start": "2595160",
    "end": "2601000"
  },
  {
    "text": "the uh Heap no and then yeah this one of imp",
    "start": "2601000",
    "end": "2607119"
  },
  {
    "text": "impation Works kind of okay with like sleep but what about other events you",
    "start": "2607119",
    "end": "2612559"
  },
  {
    "text": "it's like what about invoking and evading concurrent executions or implementing a fork join model waiting",
    "start": "2612559",
    "end": "2618480"
  },
  {
    "text": "for user input yeah simply scheduling a message on a message queue doesn't support any of these",
    "start": "2618480",
    "end": "2625319"
  },
  {
    "text": "cases so now there's still one execution on a logical layer yeah but now carried",
    "start": "2625960",
    "end": "2631839"
  },
  {
    "text": "out by many execution on the physical layer so on the physical layer the",
    "start": "2631839",
    "end": "2637480"
  },
  {
    "text": "execution lost its identity it's lost its Integrity it's fragmented into",
    "start": "2637480",
    "end": "2644760"
  },
  {
    "text": "multiple um executions across uh multiple",
    "start": "2644760",
    "end": "2651280"
  },
  {
    "text": "processes and um as software developers we need to manage the state explicitly",
    "start": "2651280",
    "end": "2658200"
  },
  {
    "text": "on an application Level ah however we did we did improve bunch of our problems",
    "start": "2658200",
    "end": "2664319"
  },
  {
    "text": "now we don't have any more time limits took care of that we will only pay for",
    "start": "2664319",
    "end": "2669640"
  },
  {
    "text": "uh any active time not any idle time took care of that crash of the execution Now does not result in a complete",
    "start": "2669640",
    "end": "2676319"
  },
  {
    "text": "restart only the continuation gets restarted so that uh and we don't really have to",
    "start": "2676319",
    "end": "2683440"
  },
  {
    "text": "worry about it thanks to at least once delivery guarantees of most cues so now",
    "start": "2683440",
    "end": "2690359"
  },
  {
    "text": "the caller is no longer the supervisor the redelivery semantics take care of",
    "start": "2690359",
    "end": "2695720"
  },
  {
    "text": "that so that's pretty cool but we are also facing other",
    "start": "2695720",
    "end": "2701200"
  },
  {
    "text": "problems now so there's no longer a handle for the execution most of the time since it's",
    "start": "2701200",
    "end": "2707880"
  },
  {
    "text": "only active for 5 seconds yeah most of the time the execution exists as some message that is scheduled for the future",
    "start": "2707880",
    "end": "2714960"
  },
  {
    "text": "on some message CU I I wouldn't know how to get a hold of that I cannot ask the system to",
    "start": "2714960",
    "end": "2721559"
  },
  {
    "text": "enumerate all running processes whether they're active or idle right the system doesn't know either",
    "start": "2721559",
    "end": "2727800"
  },
  {
    "text": "so there's no more insight into um uh",
    "start": "2727800",
    "end": "2733240"
  },
  {
    "text": "into there's no more um OBS observability into our operations now without a handle we can't",
    "start": "2733240",
    "end": "2740559"
  },
  {
    "text": "even cancel the execution right it's like if after countdown seven I'm done with it nothing I we can do about",
    "start": "2740559",
    "end": "2749240"
  },
  {
    "text": "it so we're basically out of the frying pan and right into the fire",
    "start": "2749240",
    "end": "2755520"
  },
  {
    "text": "so what can we do about that now let's write this application",
    "start": "2755520",
    "end": "2761480"
  },
  {
    "text": "with distributed as innate now this code looks",
    "start": "2761480",
    "end": "2767880"
  },
  {
    "text": "sequential but this code actually executes in an event driven manner",
    "start": "2767880",
    "end": "2773599"
  },
  {
    "text": "thanks to the durability of durable promises and stable IDs the application can voluntarily",
    "start": "2773599",
    "end": "2781960"
  },
  {
    "text": "terminate on a weight and then simply resume thanks to to the resume",
    "start": "2781960",
    "end": "2788280"
  },
  {
    "text": "semantics after the delay now we kind of get the best of",
    "start": "2788280",
    "end": "2793839"
  },
  {
    "text": "both words we get the delightful developer",
    "start": "2793839",
    "end": "2799200"
  },
  {
    "text": "experience of sequential style programs and the efficiency of event-based um",
    "start": "2799200",
    "end": "2809920"
  },
  {
    "text": "executions now if you want to learn more about distributed asyn ofate then please",
    "start": "2810280",
    "end": "2815400"
  },
  {
    "text": "uh visit our website HTTP resonate hqo and there you will also find a link",
    "start": "2815400",
    "end": "2822599"
  },
  {
    "text": "to our GitHub repository and uh our documentation and then uh thank you very",
    "start": "2822599",
    "end": "2829960"
  },
  {
    "text": "much for uh attending the talk if you have any questions happy to answer",
    "start": "2829960",
    "end": "2835280"
  },
  {
    "text": "either now or come find me later thank you very much",
    "start": "2835280",
    "end": "2841040"
  }
]