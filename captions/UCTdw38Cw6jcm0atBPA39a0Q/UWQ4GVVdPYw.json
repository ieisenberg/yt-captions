[
  {
    "text": "all right maybe we can get started hi",
    "start": "3110",
    "end": "10500"
  },
  {
    "text": "everyone my name is Mike so I'm the CTO for a company called pragma what we do",
    "start": "10500",
    "end": "15719"
  },
  {
    "text": "is continuous delivery and DevOps consulting and coaching and training and so on they love courses around docker and so",
    "start": "15719",
    "end": "21510"
  },
  {
    "text": "on but before I joined pr√≥xima I'd spent almost a decade working with embedded",
    "start": "21510",
    "end": "27449"
  },
  {
    "text": "systems and that's what I want to try and do is marry those two worlds",
    "start": "27449",
    "end": "32820"
  },
  {
    "text": "together into some kind of demo and talk for you today about how to create binary reproducible builds using native build",
    "start": "32820",
    "end": "40410"
  },
  {
    "text": "tools and docker so if you were on my course on Tuesday I think then probably",
    "start": "40410",
    "end": "50940"
  },
  {
    "text": "you might want to find another talk because you'll have seen most of this already but otherwise you're welcome",
    "start": "50940",
    "end": "58820"
  },
  {
    "text": "just the fair warning there's a lot of good talks to know you know so don't waste your time so originally this was",
    "start": "60949",
    "end": "68100"
  },
  {
    "text": "called binary reproducible builds with docker but actually I felt I had to drop that with darkorbit we are going to use",
    "start": "68100",
    "end": "74490"
  },
  {
    "text": "docker but actually there's you don't need darker to do binary reproducible builds as easier but you there's not",
    "start": "74490",
    "end": "81960"
  },
  {
    "text": "only darker that you need it's not only the environment you have to care about there's a lot of other things you have to be concerned with so that's why I've",
    "start": "81960",
    "end": "88140"
  },
  {
    "text": "just kind of talked this into a binary reproducible builds talk so I'm going to",
    "start": "88140",
    "end": "95009"
  },
  {
    "text": "talk about what what they are why we care about them talk about build environments how to make predefined",
    "start": "95009",
    "end": "100770"
  },
  {
    "text": "build environments how to have deterministic builds with deterministic inputs and deterministic environments",
    "start": "100770",
    "end": "107369"
  },
  {
    "text": "the validation systems and then we'll do a demo from the very beginning how to make a reproducible build with a very",
    "start": "107369",
    "end": "114990"
  },
  {
    "text": "simple project does anyone here have to",
    "start": "114990",
    "end": "121560"
  },
  {
    "text": "do binary producible builds for their current projects okay cool so binary",
    "start": "121560",
    "end": "128069"
  },
  {
    "text": "reproducible builds I've got there's kind of two main classes for",
    "start": "128069",
    "end": "133650"
  },
  {
    "text": "for why you would need binary reproducible builds the first case is if you're doing usually some kind of",
    "start": "133650",
    "end": "139410"
  },
  {
    "text": "embedded system that is operating in a regulated market like aerospace like",
    "start": "139410",
    "end": "145340"
  },
  {
    "text": "medical like automotive these kind of areas so normally people think about",
    "start": "145340",
    "end": "151230"
  },
  {
    "text": "embedded software if they're not from the world of embedded software they think about washing machines and tumble dryers and boring stuff like that but",
    "start": "151230",
    "end": "157680"
  },
  {
    "text": "actually it's usually a lot more complicated the types of embedded software we make often it's stuff that's",
    "start": "157680",
    "end": "164790"
  },
  {
    "text": "working in medical so it's safety critical and people die if the software doesn't work and they",
    "start": "164790",
    "end": "169860"
  },
  {
    "text": "have died in the past so it's very very important that it works correctly automotive and autonomous vehicles",
    "start": "169860",
    "end": "176310"
  },
  {
    "text": "autonomous robots again there's a lot of lives at stake if these things go wrong",
    "start": "176310",
    "end": "182660"
  },
  {
    "text": "maybe less obvious kinds of robots as well like marine seismic acquisition systems now I don't think that there's",
    "start": "182660",
    "end": "190170"
  },
  {
    "text": "such a necessity for binary reproducible software there but you never know and",
    "start": "190170",
    "end": "195260"
  },
  {
    "text": "then of course the things that go bang so not every kind of software not every",
    "start": "195260",
    "end": "203760"
  },
  {
    "text": "kind of embedded software requires binary reproducible builds but those that do it's really useful for instance",
    "start": "203760",
    "end": "210269"
  },
  {
    "text": "there's a lot of regulations a lot of regulations you have to follow if you're making medical devices software for",
    "start": "210269",
    "end": "216959"
  },
  {
    "text": "medical devices and usually there's a very strong requirement for for an audit",
    "start": "216959",
    "end": "222540"
  },
  {
    "text": "trail to be in place to be able to prove that the software that's running in a device is actually the software that was",
    "start": "222540",
    "end": "229169"
  },
  {
    "text": "coming from a specific version of the source code which has been gone through all the tests and the qualifications",
    "start": "229169",
    "end": "235590"
  },
  {
    "text": "necessary for for medical software so you need to have that kind of read trace all through your system now embedded",
    "start": "235590",
    "end": "244319"
  },
  {
    "text": "software is not the only place that it's important or interesting to have binary reproducible builds oh one more thing",
    "start": "244319",
    "end": "252239"
  },
  {
    "text": "before we get to that so the other thing is that embedded software is a bit special and it's sensitive hang around",
    "start": "252239",
    "end": "258870"
  },
  {
    "text": "forever it's usually in a safety critical environment you often in regulated markets you don't get access",
    "start": "258870",
    "end": "265380"
  },
  {
    "text": "to production before legal reasons and not just because the IT department doesn't like you the tool",
    "start": "265380",
    "end": "272850"
  },
  {
    "text": "teens are often customs so you have a very very specific set of tools that you're supposed to use and you have",
    "start": "272850",
    "end": "278490"
  },
  {
    "text": "these audit trail requirements and in that world actually configuration",
    "start": "278490",
    "end": "285810"
  },
  {
    "text": "management is still a thing no there was a point in my career where I was also",
    "start": "285810",
    "end": "292110"
  },
  {
    "text": "what was called a baseline manager so I was my job to be the build machine or I'd get all the different components and",
    "start": "292110",
    "end": "298680"
  },
  {
    "text": "make sure all the software compiled does anyone ever been a baseline manager or a configuration manager anything like this",
    "start": "298680",
    "end": "304259"
  },
  {
    "text": "it's not a fun job I promise you it's not a fun job and that's why we have CI",
    "start": "304259",
    "end": "309449"
  },
  {
    "text": "servers now but the thing is configuration management is still a thing but the fact that you still need",
    "start": "309449",
    "end": "314460"
  },
  {
    "text": "to know all the versions of all the components and the tools and the source code it's still a thing in a lot of environments but there's other places",
    "start": "314460",
    "end": "322440"
  },
  {
    "text": "where it's interesting too for instance we have a lot of software that that we",
    "start": "322440",
    "end": "327990"
  },
  {
    "text": "rely on for security it's like at the very basis of our security SSH",
    "start": "327990",
    "end": "334580"
  },
  {
    "text": "as a good example of that we wouldn't like it we take it for granted I take it",
    "start": "334580",
    "end": "340710"
  },
  {
    "text": "for granted when I tape SSH at the command prompt but it's it's a good version of SSH if I want an SSH daemon",
    "start": "340710",
    "end": "346650"
  },
  {
    "text": "I'm trusting whoever made that as provided me a good binary other kind of",
    "start": "346650",
    "end": "353340"
  },
  {
    "text": "security vector or common vectors for security attacks would be getting in a",
    "start": "353340",
    "end": "358949"
  },
  {
    "text": "rootkit into the kernel or entire hypervisor these are also places where we'd really like to make sure that",
    "start": "358949",
    "end": "364110"
  },
  {
    "text": "nobody's put in backdoors that we don't know about and yes security software in",
    "start": "364110",
    "end": "369570"
  },
  {
    "text": "general now the Debian projects done an awful lot of work in the space around binary reproducible builds there's a",
    "start": "369570",
    "end": "376949"
  },
  {
    "text": "reproducible builds to org that they've been doing and I've been going through many many packages step by step making",
    "start": "376949",
    "end": "383340"
  },
  {
    "text": "them binary reproducible and they've been doing this for years specifically for this reason so that we can have",
    "start": "383340",
    "end": "389099"
  },
  {
    "text": "trust and the binaries that we're using",
    "start": "389099",
    "end": "393469"
  },
  {
    "text": "so Jeff Atwood made this blog post about",
    "start": "395000",
    "end": "400530"
  },
  {
    "text": "14 years ago and he says if the build process is the f5 key you have a problem get your build process out of the IDE",
    "start": "400530",
    "end": "407610"
  },
  {
    "text": "and into a build script and that's good obviously that's good because then we can start to we can all build in the",
    "start": "407610",
    "end": "414300"
  },
  {
    "text": "same way so you can build the same software in the same way that I build it that's great but in the end we're still",
    "start": "414300",
    "end": "422729"
  },
  {
    "text": "kind of doing that and a lot of open source especially where package maintainer czar performing builds maybe",
    "start": "422729",
    "end": "428909"
  },
  {
    "text": "on build machines or so on but it's it's not really you can't really prove",
    "start": "428909",
    "end": "434490"
  },
  {
    "text": "anything about the environment in which it came from so yes having the source",
    "start": "434490",
    "end": "441330"
  },
  {
    "text": "code and a build script is quite helpful and necessary for reproducible builds but it's nowhere near sufficient so",
    "start": "441330",
    "end": "449750"
  },
  {
    "text": "reproducible builds to org they have this kind of what is reproducible builds and they're a set of software",
    "start": "449750",
    "end": "455550"
  },
  {
    "text": "development practices so a bunch of practices not just a process or a tool to create a independently verified path",
    "start": "455550",
    "end": "462800"
  },
  {
    "text": "verifiable path from source code to binary code so what they're thinking is that actually the build process should",
    "start": "462800",
    "end": "469949"
  },
  {
    "text": "be like a one-way hashing function you have your source code and whatever it is you have your build process which is",
    "start": "469949",
    "end": "476009"
  },
  {
    "text": "your hashing function should always produce the same output so imagine you're starting with your version of",
    "start": "476009",
    "end": "482219"
  },
  {
    "text": "OpenSSH for instance you clone the get repo you perform the build which is",
    "start": "482219",
    "end": "487650"
  },
  {
    "text": "probably some kind of make process and then you get an app and what you want to",
    "start": "487650",
    "end": "493770"
  },
  {
    "text": "do is to make sure that every time you perform a build no matter what you get the same result why does this matter",
    "start": "493770",
    "end": "502190"
  },
  {
    "text": "well most software is distributed in binary form you don't have not many",
    "start": "502190",
    "end": "509250"
  },
  {
    "text": "people build their there their operating systems from source so if that's true",
    "start": "509250",
    "end": "515760"
  },
  {
    "text": "and there is no reproducibility which is true for the majority of software in the world you have to implicitly trust the",
    "start": "515760",
    "end": "522599"
  },
  {
    "text": "distributors you have to trust what they're giving you",
    "start": "522599",
    "end": "527269"
  },
  {
    "text": "this makes attacks on developers and build infrastructure very attractive",
    "start": "528130",
    "end": "534280"
  },
  {
    "text": "because that's the weakest part of the whole system if you wanted to put a backdoor in Linux or an open SSH the",
    "start": "534280",
    "end": "541430"
  },
  {
    "text": "place to target would be the build environments because it's completely undetectable if someone puts in unless",
    "start": "541430",
    "end": "548690"
  },
  {
    "text": "it changes during the build process if you don't have reproducible builds there's no way to know make sense cool",
    "start": "548690",
    "end": "559600"
  },
  {
    "text": "so now that you're all completely convinced that reproducible builds are super important how do we get them so",
    "start": "559600",
    "end": "566900"
  },
  {
    "text": "you need to have predefined build environments deterministic build processes systems and inputs and some",
    "start": "566900",
    "end": "576080"
  },
  {
    "text": "kind of validation system some way to check which actually is really easy so we'll go through all of this I'm going",
    "start": "576080",
    "end": "581090"
  },
  {
    "text": "to run through these things look at different aspects of this and then we'll get into a bit of a demo we'll take it",
    "start": "581090",
    "end": "587600"
  },
  {
    "text": "from beginning to end so predefined environments what makes up",
    "start": "587600",
    "end": "593720"
  },
  {
    "text": "a build environment this is a question for you guys what kind of things would you have included in your build",
    "start": "593720",
    "end": "599030"
  },
  {
    "text": "environment a compiler what else a",
    "start": "599030",
    "end": "604280"
  },
  {
    "text": "linker a preprocessor what else",
    "start": "604280",
    "end": "610180"
  },
  {
    "text": "what kind of arts fix I like the the",
    "start": "610180",
    "end": "616880"
  },
  {
    "text": "binaries and so on that you'd go in as inputs as well yep anything else your",
    "start": "616880",
    "end": "622070"
  },
  {
    "text": "bill - excellent what else source code very important Oh your",
    "start": "622070",
    "end": "628760"
  },
  {
    "text": "libraries there's a bunch of things right the compiler the libraries the build tools things that you don't often",
    "start": "628760",
    "end": "635630"
  },
  {
    "text": "think about are your environment variables that's part of your build process it's part of your build system",
    "start": "635630",
    "end": "642339"
  },
  {
    "text": "your your your desk what's going on and your user local includes that that can",
    "start": "642339",
    "end": "649460"
  },
  {
    "text": "have an effect on your build up it and of course yeah the code is also part of",
    "start": "649460",
    "end": "655070"
  },
  {
    "text": "the build process so normally when people think about the build environment they think",
    "start": "655070",
    "end": "660620"
  },
  {
    "text": "the like GCC and in the libraries and then the build system but it's actually",
    "start": "660620",
    "end": "665660"
  },
  {
    "text": "a lot more and this is just like some of the things you could care about so one",
    "start": "665660",
    "end": "675350"
  },
  {
    "text": "thing you can do to try and calm down and tame the environment or at least make it a bit more reproducible as well",
    "start": "675350",
    "end": "680480"
  },
  {
    "text": "put all those things like the libraries and the tools and a place like on a shared desk on a file server and an",
    "start": "680480",
    "end": "686990"
  },
  {
    "text": "artifact management system like Nexus or artifactory that's a good start so we can all start",
    "start": "686990",
    "end": "693170"
  },
  {
    "text": "to share the same tools whatever that means but you can go a step further and put all those tools in the environment",
    "start": "693170",
    "end": "699230"
  },
  {
    "text": "and to a docker image so that everybody can share the same environment you don't have to also install all the tools and",
    "start": "699230",
    "end": "705890"
  },
  {
    "text": "also set your library paths and also so on and so forth so we'll go through an",
    "start": "705890",
    "end": "711290"
  },
  {
    "text": "example of that the reason why docker is quite interesting in this world is that",
    "start": "711290",
    "end": "716660"
  },
  {
    "text": "docker is at its essence as a dependency management solution what it does is give",
    "start": "716660",
    "end": "722630"
  },
  {
    "text": "you a standard way to pack up an application or a process together with",
    "start": "722630",
    "end": "727910"
  },
  {
    "text": "all of its dependencies and kind of a standard unit that you can share around it gives you some isolation so you can",
    "start": "727910",
    "end": "734090"
  },
  {
    "text": "have them side by side so we could have DC 5 6 7 8 all next to each other and",
    "start": "734090",
    "end": "739130"
  },
  {
    "text": "docker containers without ever wondering if we happen to have gotten the paths wrong and it's portable so we can share",
    "start": "739130",
    "end": "748010"
  },
  {
    "text": "it with other developers really easily the other thing that's nice about docker",
    "start": "748010",
    "end": "753920"
  },
  {
    "text": "is that you can create the docker images from code or at least a docker file which is not exactly code it's more like",
    "start": "753920",
    "end": "760580"
  },
  {
    "text": "a recipe but anyway you can have some kind of verifiable way of creating the",
    "start": "760580",
    "end": "767380"
  },
  {
    "text": "image so this is the docker file it's just an instruction as well this will say I want my base image to be a bin to",
    "start": "767380",
    "end": "775010"
  },
  {
    "text": "1404 run apt-get update and install Carl and vim for me actually this is bad",
    "start": "775010",
    "end": "782750"
  },
  {
    "text": "because I won't work let me just quickly",
    "start": "782750",
    "end": "788720"
  },
  {
    "text": "fix this for you guys why yeah but I can't get in here I know",
    "start": "788720",
    "end": "799040"
  },
  {
    "text": "there we go I can't have broken code in my slides I",
    "start": "799459",
    "end": "805649"
  },
  {
    "text": "would not do right now I've given away the next step is that none of this is",
    "start": "805649",
    "end": "812610"
  },
  {
    "text": "reproducible right because if you have this if you build the docker image and I",
    "start": "812610",
    "end": "818399"
  },
  {
    "text": "build the docker image I have no idea that you're gonna get the same version of Carl as I do or if we build this and",
    "start": "818399",
    "end": "823889"
  },
  {
    "text": "three weeks time will that be the same version of Chrome well even the Ubuntu that we base it on be the same probably",
    "start": "823889",
    "end": "830699"
  },
  {
    "text": "not so this is this is a way to make an image but the image itself has to be the",
    "start": "830699",
    "end": "836790"
  },
  {
    "text": "built environment not the docker file it's really important and then we can",
    "start": "836790",
    "end": "843240"
  },
  {
    "text": "share them you could use like open sort you can use public image repositories",
    "start": "843240",
    "end": "850500"
  },
  {
    "text": "like docker hub to store your docker images you can post them internally and",
    "start": "850500",
    "end": "855660"
  },
  {
    "text": "your own repositories however you want but it's a way that you can store these",
    "start": "855660",
    "end": "861149"
  },
  {
    "text": "and share them amongst the developers and that way when we have a build",
    "start": "861149",
    "end": "866519"
  },
  {
    "text": "process we can build with docker here on",
    "start": "866519",
    "end": "872490"
  },
  {
    "text": "our local environment and we can use the same image to build on our CI system and use the same build environment",
    "start": "872490",
    "end": "878760"
  },
  {
    "text": "everywhere and for all developers so we can be guaranteed at least that we'll always have the same environment okay so",
    "start": "878760",
    "end": "887550"
  },
  {
    "text": "now we've got the environment under control we're still not quite there yet there's there's a few other things that we have to consider it's actually quite",
    "start": "887550",
    "end": "894449"
  },
  {
    "text": "a lot of things we have to consider so the first thing is we want to make sure our inputs to the build process are",
    "start": "894449",
    "end": "900420"
  },
  {
    "text": "stable we can't have volatile inputs because as soon as you do you no longer",
    "start": "900420",
    "end": "905490"
  },
  {
    "text": "have reproducible builds so here's an example of a header file that's",
    "start": "905490",
    "end": "910769"
  },
  {
    "text": "generated by a Gradle plugin and it's all about tracking versioning information so you can stamp it inside",
    "start": "910769",
    "end": "916949"
  },
  {
    "text": "your binaries very very nice thing to do very very important for traceability and",
    "start": "916949",
    "end": "922019"
  },
  {
    "text": "audit but you'll see here it's got timestamps",
    "start": "922019",
    "end": "928509"
  },
  {
    "text": "in it so if you do the bill twice you're going to get a different result it isn't",
    "start": "928509",
    "end": "934509"
  },
  {
    "text": "great compile-time timestamps are problematic so if you use underscore",
    "start": "934509",
    "end": "939849"
  },
  {
    "text": "underscore time underscore underscore underscore underscore date underscore and score any of these macros that will provide you something like this they're",
    "start": "939849",
    "end": "947169"
  },
  {
    "text": "problematic now with GCC you can set it to create a warning if those macros are used so that's a good way to make sure",
    "start": "947169",
    "end": "954309"
  },
  {
    "text": "that that doesn't sneak enter your code in the future other kinds of inputs that",
    "start": "954309",
    "end": "962019"
  },
  {
    "text": "can pop up sneaking in bailed numbers from your build system the next time you",
    "start": "962019",
    "end": "969369"
  },
  {
    "text": "build even if it's exactly the same shot this is going to produce build number one seven eight and then again your your",
    "start": "969369",
    "end": "975849"
  },
  {
    "text": "builds going to be non-deterministic now",
    "start": "975849",
    "end": "983859"
  },
  {
    "text": "file paths are interesting as well because in general if you were to build",
    "start": "983859",
    "end": "989100"
  },
  {
    "text": "say this was in an application and you were to build it twice it would provide deterministic output assuming that there",
    "start": "989100",
    "end": "995589"
  },
  {
    "text": "was nothing else volatile on its inputs however if you were to build this same",
    "start": "995589",
    "end": "1002189"
  },
  {
    "text": "project in a different file path then what would happen it would have a",
    "start": "1002189",
    "end": "1007379"
  },
  {
    "text": "different file so this wouldn't be a volatile input so if we'd either all",
    "start": "1007379",
    "end": "1013470"
  },
  {
    "text": "have to agree every single person in the world who was going to compile this would use the same working directory",
    "start": "1013470",
    "end": "1019529"
  },
  {
    "text": "like slash temp slash build that's what everyone's going to use or we might want to find a different way you can use a",
    "start": "1019529",
    "end": "1028199"
  },
  {
    "text": "fixed path you can also use docker for this I'm going to show you how we can solve this problem with docker some",
    "start": "1028199",
    "end": "1034500"
  },
  {
    "text": "people thought we could maybe get around this if we just strip the binaries because it's it's going to be in the debug symbols so okay assuming you don't",
    "start": "1034500",
    "end": "1042058"
  },
  {
    "text": "have this macro you still have this problem because the the debug symbols have got the path in them now if you",
    "start": "1042059",
    "end": "1049320"
  },
  {
    "text": "strip the binaries you still have the problem because there's this thing called an T underscore go new builds ID",
    "start": "1049320",
    "end": "1055639"
  },
  {
    "text": "we she's used by the debugger I think it's",
    "start": "1055639",
    "end": "1062820"
  },
  {
    "text": "used by gdb but it's a little unique build number that's like stamped into",
    "start": "1062820",
    "end": "1070590"
  },
  {
    "text": "the the object files and it's unique to",
    "start": "1070590",
    "end": "1076380"
  },
  {
    "text": "each path so even if you strip the binaries that's not enough you still",
    "start": "1076380",
    "end": "1081720"
  },
  {
    "text": "have to build an exact same file path yes absolutely like so you know I mean",
    "start": "1081720",
    "end": "1103919"
  },
  {
    "text": "you if you don't give the fill path you can control it in lots of different ways yes absolutely",
    "start": "1103919",
    "end": "1111110"
  },
  {
    "text": "another thing that I never really thought about this is an example from coreboot project they had some",
    "start": "1112250",
    "end": "1120480"
  },
  {
    "text": "uninitialized data and the stack and that would just be random what was in",
    "start": "1120480",
    "end": "1125970"
  },
  {
    "text": "there so you'd build it two different times in two different places and the",
    "start": "1125970",
    "end": "1131040"
  },
  {
    "text": "binary would have a word that was different oh yeah so very simple fix I mean",
    "start": "1131040",
    "end": "1137340"
  },
  {
    "text": "probably shouldn't have uninitialized data anyway it's gonna cause a stack leak but it's fine and then the compiler",
    "start": "1137340",
    "end": "1147720"
  },
  {
    "text": "itself is working against you so the compiler for some aspects of GCC it's",
    "start": "1147720",
    "end": "1156179"
  },
  {
    "text": "going to generate random symbols and it just uses a random number for each compile I guess it gets a give it or",
    "start": "1156179",
    "end": "1163410"
  },
  {
    "text": "something I haven't looked at exactly how it does and this is used for well it says here coverage data but I know it's",
    "start": "1163410",
    "end": "1169320"
  },
  {
    "text": "used for name mangling as well so what you can do is you can for each file put",
    "start": "1169320",
    "end": "1176820"
  },
  {
    "text": "in a random seed for that compilation for that for that translation unit now",
    "start": "1176820",
    "end": "1184860"
  },
  {
    "text": "the trick is that this has to be different for every file you can pile",
    "start": "1184860",
    "end": "1190710"
  },
  {
    "text": "so how did you do that well there was a very clever guy called York who I've",
    "start": "1190710",
    "end": "1196480"
  },
  {
    "text": "never met seems like a nice guy though cuz he come up with a really good solution and you make file what you do is you share out",
    "start": "1196480",
    "end": "1202120"
  },
  {
    "text": "and take an MD spunk and md5 some of your source file take that sum and use",
    "start": "1202120",
    "end": "1208750"
  },
  {
    "text": "that as the random seed so that's kind of a stable way to to solve that problem",
    "start": "1208750",
    "end": "1216210"
  },
  {
    "text": "well that's true",
    "start": "1217740",
    "end": "1224679"
  },
  {
    "text": "if you had two files that resulted in the same md5 sum I think it would be",
    "start": "1224679",
    "end": "1230020"
  },
  {
    "text": "very unlucky right yes but then they",
    "start": "1230020",
    "end": "1239650"
  },
  {
    "text": "would produce two object files with the same contact which would probably provide clashing cymbals you can link",
    "start": "1239650",
    "end": "1245559"
  },
  {
    "text": "them together anyway I guess yeah I'm sure there's probably away though you're",
    "start": "1245559",
    "end": "1251650"
  },
  {
    "text": "right it's probably away and then the",
    "start": "1251650",
    "end": "1258700"
  },
  {
    "text": "linker is also working against us but modern versions of AR have this - cap",
    "start": "1258700",
    "end": "1265750"
  },
  {
    "text": "will not - this capital D flag which says please be deterministic so like zero out all the things that got",
    "start": "1265750",
    "end": "1273429"
  },
  {
    "text": "time-stamped us Goods and news consistent file modes everywhere and",
    "start": "1273429",
    "end": "1278950"
  },
  {
    "text": "that way you'll get the same linker result every time now some of you might",
    "start": "1278950",
    "end": "1284410"
  },
  {
    "text": "be working with old versions of AR that doesn't have this - D or this capital D",
    "start": "1284410",
    "end": "1290700"
  },
  {
    "text": "flag and then somebody has created an AR timestamp wiper which is like a little",
    "start": "1290700",
    "end": "1296410"
  },
  {
    "text": "utility will go through your archives and like scrub them up if you like right",
    "start": "1296410",
    "end": "1304480"
  },
  {
    "text": "so that's that was just kind of a quick tour of the different things that you can get tripped up on but there's more",
    "start": "1304480",
    "end": "1310140"
  },
  {
    "text": "there's much more actually yep",
    "start": "1310140",
    "end": "1315059"
  },
  {
    "text": "you could ship them there's no reason not to that's the kind of the whole",
    "start": "1326299",
    "end": "1331499"
  },
  {
    "text": "point because what you want to do generally is to say that the thing that you've shipped is reproducible you could",
    "start": "1331499",
    "end": "1351539"
  },
  {
    "text": "do that too for sure I mean you could you could say well we're going to ship",
    "start": "1351539",
    "end": "1356759"
  },
  {
    "text": "it with all this non-deterministic stuff but we know that if we strip these run this script to clean up the binaries and",
    "start": "1356759",
    "end": "1363119"
  },
  {
    "text": "we'll get the same result that's true",
    "start": "1363119",
    "end": "1367309"
  },
  {
    "text": "which brings just nicely onto how do we check for all this stuff so it's pretty",
    "start": "1368299",
    "end": "1375149"
  },
  {
    "text": "simple really if OpenSSH produce a binary well you",
    "start": "1375149",
    "end": "1381059"
  },
  {
    "text": "just clone clone the repo do the build process and check if they match or not if they have the same md5 sum then we're",
    "start": "1381059",
    "end": "1388679"
  },
  {
    "text": "golden otherwise there's probably some shenanigans going on someone's not telling the truth",
    "start": "1388679",
    "end": "1393809"
  },
  {
    "text": "oh yeah and of course you can automate that process as well and this is what I",
    "start": "1393809",
    "end": "1399960"
  },
  {
    "text": "think the Debian reproducible builds projects doing they're they're trying to rebuild the same binaries and lots of",
    "start": "1399960",
    "end": "1407340"
  },
  {
    "text": "different locations because location actually matters for results as well",
    "start": "1407340",
    "end": "1412470"
  },
  {
    "text": "locale can make a big difference on the output of your build process I didn't",
    "start": "1412470",
    "end": "1419190"
  },
  {
    "text": "know this but when you do a glob in shell the order is not guaranteed so you can get different orders on different",
    "start": "1419190",
    "end": "1426570"
  },
  {
    "text": "locales yeah if you create an archive or",
    "start": "1426570",
    "end": "1433470"
  },
  {
    "text": "a tarball that can have also non-deterministic orders so there's",
    "start": "1433470",
    "end": "1439440"
  },
  {
    "text": "there's lots of ways that non-determinism can sneak into a build process so yeah let's",
    "start": "1439440",
    "end": "1448260"
  },
  {
    "text": "do a demo right so I have an open source",
    "start": "1448260",
    "end": "1454679"
  },
  {
    "text": "project called FFF dot H it's the fake function framework and it's a header file only framework for faking C",
    "start": "1454679",
    "end": "1465059"
  },
  {
    "text": "functions so that you can write unit tests it's a bit of a you're not supposed to read this file so this is",
    "start": "1465059",
    "end": "1472500"
  },
  {
    "text": "this it was not handcrafted I promise you it's generated by script but it's",
    "start": "1472500",
    "end": "1478290"
  },
  {
    "text": "it's good enough for our uses because what I'm going to do is I want to make a binary reproducible release of the test",
    "start": "1478290",
    "end": "1485370"
  },
  {
    "text": "suite for this for this framework so I've got two test Suites I've got the",
    "start": "1485370",
    "end": "1493919"
  },
  {
    "text": "FFF test CPP which is testing the framework in the context of C++ program",
    "start": "1493919",
    "end": "1501120"
  },
  {
    "text": "and also one is testing global fakes as well so have all the test cases in here",
    "start": "1501120",
    "end": "1507410"
  },
  {
    "text": "so there they are looking pretty and we'll have a make file which just the",
    "start": "1507410",
    "end": "1515250"
  },
  {
    "text": "tests are using Google tests so I've got Google test included here so a build some Google tests and then it builds my",
    "start": "1515250",
    "end": "1521910"
  },
  {
    "text": "test week and what I want to try and do is to make those the binary that are",
    "start": "1521910",
    "end": "1527850"
  },
  {
    "text": "produced from a test suite to always be the same so first things first I'm going",
    "start": "1527850",
    "end": "1539970"
  },
  {
    "text": "to start with a docker image I want to have a docker age I'm going to base on debian latest now that's already a",
    "start": "1539970",
    "end": "1545640"
  },
  {
    "text": "mistake isn't it I should probably fix that so let's go",
    "start": "1545640",
    "end": "1550799"
  },
  {
    "text": "to can anyone tell me why that's a mistake yeah it keeps changing so let's",
    "start": "1550799",
    "end": "1559440"
  },
  {
    "text": "have a wee look over here I mean anyway",
    "start": "1559440",
    "end": "1566010"
  },
  {
    "text": "it's going to change because tags are kind of more like branches so if you get",
    "start": "1566010",
    "end": "1572040"
  },
  {
    "text": "so let me see now where is latest here",
    "start": "1572040",
    "end": "1576710"
  },
  {
    "text": "anyone see you latest",
    "start": "1577549",
    "end": "1581149"
  },
  {
    "text": "there it is so I take and I take this one which is actually the same hello",
    "start": "1584030",
    "end": "1598460"
  },
  {
    "text": "stretched to 2018 stretch 20 1807 1607",
    "start": "1599840",
    "end": "1612900"
  },
  {
    "text": "16 so this is July 16th 20,000 an eight-team build from Debian do an app",
    "start": "1612900",
    "end": "1620280"
  },
  {
    "text": "get update which of course is non-deterministic and I'm going to install a build system",
    "start": "1620280",
    "end": "1625470"
  },
  {
    "text": "I've got proxy PS in here I don't know if I need that anyway it's fine and I'm gonna set the working",
    "start": "1625470",
    "end": "1632910"
  },
  {
    "text": "dear to slash chord because I want the working directory to be the same every time I'll see why that's important in a",
    "start": "1632910",
    "end": "1639690"
  },
  {
    "text": "second so I'm gonna build this so docker",
    "start": "1639690",
    "end": "1647899"
  },
  {
    "text": "image builds I'm gonna call this",
    "start": "1648050",
    "end": "1653450"
  },
  {
    "text": "Microsoft what's this FFF what version",
    "start": "1653480",
    "end": "1661050"
  },
  {
    "text": "is this 1.1 sounds good doesn't it let's build that so it's going to build",
    "start": "1661050",
    "end": "1666600"
  },
  {
    "text": "me a version of like a docker image",
    "start": "1666600",
    "end": "1674460"
  },
  {
    "text": "based on based on Debian the version of Debian I mentioned with the build tools",
    "start": "1674460",
    "end": "1680790"
  },
  {
    "text": "and working directory set now I can I",
    "start": "1680790",
    "end": "1686420"
  },
  {
    "text": "can run this I can for instance run bash",
    "start": "1686420",
    "end": "1696240"
  },
  {
    "text": "inside there just so we can have a poke around [Music]",
    "start": "1696240",
    "end": "1703390"
  },
  {
    "text": "like this there are we can see that the present working directory is code there's nothing in it if I look at slash",
    "start": "1708810",
    "end": "1719040"
  },
  {
    "text": "now this is this is a container so this is not the image this is a container based off of the image so I can do",
    "start": "1719040",
    "end": "1725350"
  },
  {
    "text": "whatever I want here and the next time I create a container it's going to be fresh and clean again so you really are",
    "start": "1725350",
    "end": "1731800"
  },
  {
    "text": "protecting yourself from side effects so I can for instance remove the /bin",
    "start": "1731800",
    "end": "1736870"
  },
  {
    "text": "directory and now I won't be able to do that although that's a built in I won't be able to do that I probably won't be able",
    "start": "1736870",
    "end": "1745360"
  },
  {
    "text": "to oh no I can do that what else have I deleted oh yeah yeah",
    "start": "1745360",
    "end": "1756370"
  },
  {
    "text": "anyway I can't do a lot of things without flash bit but I can exit that create a new container and everything's",
    "start": "1756370",
    "end": "1764470"
  },
  {
    "text": "back again so it's kind of it's a good way to make sure that you can always have a fresh environment for your build",
    "start": "1764470",
    "end": "1771010"
  },
  {
    "text": "process cool so now I have that I want",
    "start": "1771010",
    "end": "1776320"
  },
  {
    "text": "to get my cord inside there so here's my code this is what it looks like now I",
    "start": "1776320",
    "end": "1784300"
  },
  {
    "text": "can do the same container run but this time I'm also kind of a parameter to mount a volume inside there so I'm gonna",
    "start": "1784300",
    "end": "1790720"
  },
  {
    "text": "say pretty please with sugar on top could you take the present working",
    "start": "1790720",
    "end": "1795820"
  },
  {
    "text": "directory and mount that inside slash code in the container so now I'm going",
    "start": "1795820",
    "end": "1802810"
  },
  {
    "text": "to be able to access the present working directory from inside the container cool",
    "start": "1802810",
    "end": "1808690"
  },
  {
    "text": "and now I should have my code in here which is great",
    "start": "1808690",
    "end": "1814360"
  },
  {
    "text": "maybe I'll just raise this up a bit because I can see at the back it's not very comfortable to read it so okay",
    "start": "1814360",
    "end": "1821190"
  },
  {
    "text": "great so there we are now I've got my code in here I should also have GCC yeah",
    "start": "1821490",
    "end": "1827410"
  },
  {
    "text": "we've got GCC yeah that's how I go make all please work Erica what's offered",
    "start": "1827410",
    "end": "1837730"
  },
  {
    "text": "goes and builds now I've changed the the build process to also once it's created something give me the",
    "start": "1837730",
    "end": "1846130"
  },
  {
    "text": "md5 sum of the archive so we can see that the md5 sum of this build starts",
    "start": "1846130",
    "end": "1853270"
  },
  {
    "text": "6-0 c3 cool now if I do make clean and",
    "start": "1853270",
    "end": "1859710"
  },
  {
    "text": "then make again I should see the same md5 sum if things are going well and I",
    "start": "1859710",
    "end": "1872320"
  },
  {
    "text": "do there is there right now then if I",
    "start": "1872320",
    "end": "1877930"
  },
  {
    "text": "was to copy - our code to code - and",
    "start": "1877930",
    "end": "1887860"
  },
  {
    "text": "make clean I guess make all I guess it's",
    "start": "1887860",
    "end": "1894820"
  },
  {
    "text": "going to be a bit different and it is the md5 sum is now f9 de okay",
    "start": "1894820",
    "end": "1903670"
  },
  {
    "text": "so obviously we have to we want to be in that slash code directory if we want to have these deterministic builds I think",
    "start": "1903670",
    "end": "1909970"
  },
  {
    "text": "do I have strip here I do strip what's it been No",
    "start": "1909970",
    "end": "1920280"
  },
  {
    "text": "that's true so let me strip the symbols from it and then do an md5 sum of this",
    "start": "1929890",
    "end": "1942179"
  },
  {
    "text": "area so 6 7 2 and then if I do strip of",
    "start": "1946080",
    "end": "1956940"
  },
  {
    "text": "the in this directory and then the md5 sum is still different so there's",
    "start": "1956940",
    "end": "1963850"
  },
  {
    "text": "there's there's still stuff in there that's non-deterministic if we change the directory go rates so now now I've",
    "start": "1963850",
    "end": "1973900"
  },
  {
    "text": "got a deterministic build environment I can build and code over and over again and get the same result I'm quite happy",
    "start": "1973900",
    "end": "1980130"
  },
  {
    "text": "so I put this code up on github and I can make a release and put the bit the",
    "start": "1980130",
    "end": "1985419"
  },
  {
    "text": "binary up there how does anyone verify that this is genuine a genuine FFF test",
    "start": "1985419",
    "end": "1991150"
  },
  {
    "text": "suite now this is the important question we're all begging to find the answer to so what we can do is we can we can push",
    "start": "1991150",
    "end": "2000299"
  },
  {
    "text": "this docker image up to docker hub so Microsoft Shh FFF I don't know if I'm",
    "start": "2000299",
    "end": "2012240"
  },
  {
    "text": "logged in Oh BAM looks like it",
    "start": "2012240",
    "end": "2017990"
  },
  {
    "text": "very good so there as up there now I",
    "start": "2020300",
    "end": "2026610"
  },
  {
    "text": "could for instance connect to a virtual",
    "start": "2026610",
    "end": "2032280"
  },
  {
    "text": "machine I created an Amazon or wherever I'm sure if you have your laptop you can join in I can do get clone of whatever",
    "start": "2032280",
    "end": "2044130"
  },
  {
    "text": "this is cool so I'll clone that",
    "start": "2044130",
    "end": "2051990"
  },
  {
    "text": "repository locally here have a look CD Reaper oh do you remember what the the",
    "start": "2051990",
    "end": "2062158"
  },
  {
    "text": "shout the md5 son was it was something",
    "start": "2062159",
    "end": "2067648"
  },
  {
    "text": "like that but you know what we can we can reproduce it so instead of running",
    "start": "2067649",
    "end": "2073590"
  },
  {
    "text": "bash I'm just going to short-circuit this and say make clean and then make oh",
    "start": "2073590",
    "end": "2082760"
  },
  {
    "text": "there it goes toddling off sorry yeah",
    "start": "2082760",
    "end": "2091530"
  },
  {
    "text": "but I'm mounting that directory and so it's a it's persistent in that sense so",
    "start": "2091530",
    "end": "2097290"
  },
  {
    "text": "it was 6 0 C which i think is what you said wasn't it we're all done by that man a beer ok so",
    "start": "2097290",
    "end": "2105840"
  },
  {
    "text": "I've got my I've got my I've got my cord",
    "start": "2105840",
    "end": "2112710"
  },
  {
    "text": "here now I'm gonna I'm gonna check this Microsoft see if he's got a reproducible bills or",
    "start": "2112710",
    "end": "2119790"
  },
  {
    "text": "pool has docker image",
    "start": "2119790",
    "end": "2123830"
  },
  {
    "text": "and I'll do a docker container run - v/o",
    "start": "2136690",
    "end": "2145329"
  },
  {
    "text": "thank you teamwork makes the dream work",
    "start": "2145329",
    "end": "2151839"
  },
  {
    "text": "just less code and then I'm gonna do make clean just to be sure so there's no",
    "start": "2152799",
    "end": "2158900"
  },
  {
    "text": "funny business yeah I probably need to tell it what image to base the container",
    "start": "2158900",
    "end": "2164150"
  },
  {
    "text": "on there we go it's nice and clean",
    "start": "2164150",
    "end": "2176288"
  },
  {
    "text": "6:0 see cool huh now we could go a bit",
    "start": "2184349",
    "end": "2190000"
  },
  {
    "text": "further we could go a lot further actually but let's let's not get too ambitious right now we're still we're",
    "start": "2190000",
    "end": "2199510"
  },
  {
    "text": "still trusting that this image is something that is kind of sound as well",
    "start": "2199510",
    "end": "2205150"
  },
  {
    "text": "that's fine we have to we have to trust something at the end of the day but we could go a bit further and we could say",
    "start": "2205150",
    "end": "2212140"
  },
  {
    "text": "instead of saying where is it now there",
    "start": "2212140",
    "end": "2224710"
  },
  {
    "text": "is instead of saying that this is just something pushed up that was built at random we can we can set up an automated",
    "start": "2224710",
    "end": "2232029"
  },
  {
    "text": "build and docker hub so that we can have a clear link between the get shot and the and they get ripple to the docker",
    "start": "2232029",
    "end": "2239230"
  },
  {
    "text": "image so create an automated build then",
    "start": "2239230",
    "end": "2249130"
  },
  {
    "text": "I'm going to use this repo",
    "start": "2249130",
    "end": "2252538"
  },
  {
    "text": "why not",
    "start": "2261869",
    "end": "2264739"
  },
  {
    "text": "there we go then",
    "start": "2267300",
    "end": "2273630"
  },
  {
    "text": "typing is hard right so now what's going to happen is that darker is going to",
    "start": "2281170",
    "end": "2289250"
  },
  {
    "text": "take care of the build process so docker is going to say for this build it's",
    "start": "2289250",
    "end": "2301640"
  },
  {
    "text": "gonna build I would probably want to call that something else don't we well",
    "start": "2301640",
    "end": "2306740"
  },
  {
    "text": "we'll take take 1.2 for now there we go",
    "start": "2306740",
    "end": "2313640"
  },
  {
    "text": "off it goes and builds I hope this is a",
    "start": "2313640",
    "end": "2322240"
  },
  {
    "text": "free service from from dogger hub so we have to be patient with it but we can",
    "start": "2322240",
    "end": "2328790"
  },
  {
    "text": "see at least that as soon as the build is complete we'll have the docker file that was that was coming from that get",
    "start": "2328790",
    "end": "2336050"
  },
  {
    "text": "show then I can use that as my build environment for producing my binaries",
    "start": "2336050",
    "end": "2341600"
  },
  {
    "text": "and so can everyone else and it will tie up the trust a little bit more right so",
    "start": "2341600",
    "end": "2352330"
  },
  {
    "text": "that was what I had planned for you today I hope that was what you were expecting talked about about binary",
    "start": "2352330",
    "end": "2357950"
  },
  {
    "text": "reproducible builds why they're interesting looked at how to make these predefined build environments with",
    "start": "2357950",
    "end": "2363560"
  },
  {
    "text": "docker how to make sure your your code and your environment is deterministic and how to check it thanks a lot we have",
    "start": "2363560",
    "end": "2377120"
  },
  {
    "text": "time for a couple of questions a that's interesting",
    "start": "2377120",
    "end": "2381340"
  },
  {
    "text": "yeah yeah I mean you could do that in",
    "start": "2393730",
    "end": "2405170"
  },
  {
    "text": "the end you're gonna have to store what your what your environment is somewhere and it's just a question of how how",
    "start": "2405170",
    "end": "2413240"
  },
  {
    "text": "deterministic you want again all of people that are working in the security field they would never base their",
    "start": "2413240",
    "end": "2419330"
  },
  {
    "text": "energies off of random things on the internet they'd have a random they would have a hardened base image that like you",
    "start": "2419330",
    "end": "2426230"
  },
  {
    "text": "zip in a root filesystem to begin with that has the the root filesystem that's",
    "start": "2426230",
    "end": "2432770"
  },
  {
    "text": "kind of been thoroughly vetted by by everybody and that's where you would",
    "start": "2432770",
    "end": "2437840"
  },
  {
    "text": "base it on and anything you add would only be added from your own package managers yes yes you can yes you can",
    "start": "2437840",
    "end": "2454610"
  },
  {
    "text": "every every every image has a as a shower of its contents and you can sign",
    "start": "2454610",
    "end": "2460940"
  },
  {
    "text": "it with you can even use a two factor off like a Yubikey or something so you",
    "start": "2460940",
    "end": "2466820"
  },
  {
    "text": "can go quite far and down that path as well you had a question",
    "start": "2466820",
    "end": "2473140"
  },
  {
    "text": "so could a darker version change no",
    "start": "2479280",
    "end": "2485260"
  },
  {
    "text": "that's the nice thing so the image format is quite stable docker is not like there's a lot of change happening",
    "start": "2485260",
    "end": "2490630"
  },
  {
    "text": "in the docker ecosystem all the time but the docker image formats very stable and it's designed asbestos pacifically that",
    "start": "2490630",
    "end": "2496900"
  },
  {
    "text": "way so that from an image you get an o1 runtime every time yeah so it's no",
    "start": "2496900",
    "end": "2504310"
  },
  {
    "text": "guarantee that in 10 or 15 years that's going to be still the case but as long",
    "start": "2504310",
    "end": "2509470"
  },
  {
    "text": "as you can run docker images that environment should be quite stable like",
    "start": "2509470",
    "end": "2525490"
  },
  {
    "text": "to bind them together yeah like I said",
    "start": "2525490",
    "end": "2533740"
  },
  {
    "text": "you can go far without you you can go far with this stuff okay thanks everyone",
    "start": "2533740",
    "end": "2541070"
  },
  {
    "text": "[Applause]",
    "start": "2541070",
    "end": "2545909"
  }
]