[
  {
    "start": "0",
    "end": "66000"
  },
  {
    "text": "okay so we have to noon everyone I guess it's my time to start or is it",
    "start": "9089",
    "end": "14740"
  },
  {
    "text": "not okay so my talk is about rust for",
    "start": "14740",
    "end": "21610"
  },
  {
    "text": "sickest as developers and the idea here is to give C++ developers a jump start",
    "start": "21610",
    "end": "27130"
  },
  {
    "text": "to the rust programming language comparing contrasting the languages so that it's easier to kind of get into if",
    "start": "27130",
    "end": "34420"
  },
  {
    "text": "you are a super fast developer has have some background in in C++ so my name is",
    "start": "34420",
    "end": "40600"
  },
  {
    "text": "Pavel I'm a developer trainer author I have some books that I've written",
    "start": "40600",
    "end": "45629"
  },
  {
    "text": "they're all available online like I always say please buy them make me money so please do that I authored a few tools",
    "start": "45629",
    "end": "54190"
  },
  {
    "text": "that are part of my github repository I have some blogs which you can read if",
    "start": "54190",
    "end": "59499"
  },
  {
    "text": "you again have trouble sleeping or something and I've also also some courses for plural sign and so the idea",
    "start": "59499",
    "end": "67900"
  },
  {
    "start": "66000",
    "end": "178000"
  },
  {
    "text": "here is to introduce rust again with a mindset of superstars giving some coding",
    "start": "67900",
    "end": "73180"
  },
  {
    "text": "examples and so we'll discuss briefly what's rust is and the main kind of",
    "start": "73180",
    "end": "80400"
  },
  {
    "text": "thinking behind rust and how it differs and how it very similar to C++ in some",
    "start": "80400",
    "end": "86860"
  },
  {
    "text": "regards and hopefully are just going to show you some code which should make things easier to understand now one",
    "start": "86860",
    "end": "93400"
  },
  {
    "text": "disclaimer I'm not a rust expert I'm also learning rust as we go",
    "start": "93400",
    "end": "100120"
  },
  {
    "text": "along so maybe not all the code I'm going to show you see is idiomatic rust or the best rust possible but it should",
    "start": "100120",
    "end": "106840"
  },
  {
    "text": "be close enough because the code is not is not going to be very complex so what is rust so if you open the rust a",
    "start": "106840",
    "end": "114070"
  },
  {
    "text": "website it has some kind of slogans or sort of marketing slogans to lure",
    "start": "114070",
    "end": "120160"
  },
  {
    "text": "developers to go and work with rust so rust is blazingly fast and memory efficient ROG rusty rich type system and",
    "start": "120160",
    "end": "128950"
  },
  {
    "text": "ownership model guarantees memory safety thread safety and rust has great",
    "start": "128950",
    "end": "134739"
  },
  {
    "text": "documentation friendly compiler with user mess with error messages that are",
    "start": "134739",
    "end": "141160"
  },
  {
    "text": "actually you full and top-notch dueling so this is part of the advert advancements on the",
    "start": "141160",
    "end": "148020"
  },
  {
    "text": "rust website so if you read that you say well sounds like the perfect language to",
    "start": "148020",
    "end": "153660"
  },
  {
    "text": "me let me have that I want that and plenty of it and so one",
    "start": "153660",
    "end": "161310"
  },
  {
    "text": "thing so we'll see several things in this session some of them actually make this advertisement correct some of them",
    "start": "161310",
    "end": "168269"
  },
  {
    "text": "maybe not so much but trust is a language in progress and the ecosystem",
    "start": "168269",
    "end": "173340"
  },
  {
    "text": "is is growing but it looks promising I mean that looks pretty good",
    "start": "173340",
    "end": "178530"
  },
  {
    "start": "178000",
    "end": "366000"
  },
  {
    "text": "so let's start with some general terms and compare C++ to rust so it's easier",
    "start": "178530",
    "end": "186330"
  },
  {
    "text": "to kind of talk about them in more detail later on so we have primitive",
    "start": "186330",
    "end": "191430"
  },
  {
    "text": "types in C++ we have primitive types in rust rust also has associated functions",
    "start": "191430",
    "end": "198060"
  },
  {
    "text": "or sociated methods with these primitive types Association methods is comparable",
    "start": "198060",
    "end": "204090"
  },
  {
    "text": "to static methods in C++ so if you think about it what is static really it means nothing",
    "start": "204090",
    "end": "209340"
  },
  {
    "text": "associated methods looks a little bit better so we have primitive types who have structures and so in C++ you have",
    "start": "209340",
    "end": "217260"
  },
  {
    "text": "struck and class keyword which are essentially the same in rust it said well why do you need two keywords just",
    "start": "217260",
    "end": "223019"
  },
  {
    "text": "keep one and that would be struct and then we have enumerations so enumeration",
    "start": "223019",
    "end": "228030"
  },
  {
    "text": "C++ we have enumerations in rust however rust enumerations are actually very very",
    "start": "228030",
    "end": "234359"
  },
  {
    "text": "powerful and much more powerful than C++ and I'll show you an example later on",
    "start": "234359",
    "end": "239730"
  },
  {
    "text": "and the actually can implement a union in fact they're actually more like unions than just simple enumerations",
    "start": "239730",
    "end": "246600"
  },
  {
    "text": "even even though they can be that as well so in C++ you can have pure future functions as part of the class sort of",
    "start": "246600",
    "end": "253049"
  },
  {
    "text": "an interface and so you can have that in rust as well it's called trait and again",
    "start": "253049",
    "end": "258150"
  },
  {
    "text": "these terms are different from lexicographical point of view so it's",
    "start": "258150",
    "end": "263520"
  },
  {
    "text": "important to introduce them so we have inheritance in C++ inheritance form",
    "start": "263520",
    "end": "268950"
  },
  {
    "text": "interfaces and inheritance of implementation rust has a limited support for inheritance only for",
    "start": "268950",
    "end": "274740"
  },
  {
    "text": "creating here in tents it does not support inheritance of implementation all the",
    "start": "274740",
    "end": "279810"
  },
  {
    "text": "traits can have default implementations so this is kind of mitigated of sorts",
    "start": "279810",
    "end": "285240"
  },
  {
    "text": "we have support for runtime polymorphism I'm not talking about compile time",
    "start": "285240",
    "end": "290280"
  },
  {
    "text": "polymorphism using templates which is available in C++ but it's not available in rust because of some things or rules",
    "start": "290280",
    "end": "298590"
  },
  {
    "text": "which I'll share a later on who having C++ attributes we are which are kind of",
    "start": "298590",
    "end": "304680"
  },
  {
    "text": "a closed set of things we can say about something in rust attributes are also",
    "start": "304680",
    "end": "311699"
  },
  {
    "text": "implemented by trait and actually it's a it's their extensible can create our own attributes and implement attributes on",
    "start": "311699",
    "end": "319050"
  },
  {
    "text": "various types and we have templates in C++ they are called generics in rust and",
    "start": "319050",
    "end": "326190"
  },
  {
    "text": "it's not just a different name it's a different approach so in C++ it's mostly duck typing so if you have some template",
    "start": "326190",
    "end": "334740"
  },
  {
    "text": "that has a call to a function foo if that class or type has accidentally",
    "start": "334740",
    "end": "341460"
  },
  {
    "text": "function foo the correct parameters that will compile all fine but if it doesn't",
    "start": "341460",
    "end": "346770"
  },
  {
    "text": "then it won't so we can't really know up front what you expect in some of these",
    "start": "346770",
    "end": "352590"
  },
  {
    "text": "templates and so this is some what is going to be mitigated in C++ 20 with concepts but rust already takes one step",
    "start": "352590",
    "end": "360060"
  },
  {
    "text": "ahead to mitigate that and make this always safe so that's some kind of",
    "start": "360060",
    "end": "366380"
  },
  {
    "start": "366000",
    "end": "553000"
  },
  {
    "text": "introduction the most I think difficult part in grabbing with rust is the idea",
    "start": "366380",
    "end": "373740"
  },
  {
    "text": "of the ownership model this is the fundamental change and I think this is the kind of the challenge from when",
    "start": "373740",
    "end": "380940"
  },
  {
    "text": "moving from C++ or trying to understand rust based on what you know in C++ so in",
    "start": "380940",
    "end": "387120"
  },
  {
    "text": "C++ you can have a single owner or a shared ownership we are various types",
    "start": "387120",
    "end": "392370"
  },
  {
    "text": "such as the shirt pointer you can have a single owner with the unique pointer but really you're not in false in any way",
    "start": "392370",
    "end": "399930"
  },
  {
    "text": "you can make mistakes for example you can pass a row pointer to some function and then function may decide that it is",
    "start": "399930",
    "end": "407219"
  },
  {
    "text": "going to keep that pointer for late which is of course a bad idea because if you intended to share that pointer you",
    "start": "407219",
    "end": "413940"
  },
  {
    "text": "should have passed along a shared pointer but the compiler cannot enforce that and you're left on your own in rust",
    "start": "413940",
    "end": "420690"
  },
  {
    "text": "you have a single owner and model at the bases and that's explicit and we'll see",
    "start": "420690",
    "end": "427290"
  },
  {
    "text": "that this is something that allows the rust compiler to make sure we don't make mistakes",
    "start": "427290",
    "end": "433170"
  },
  {
    "text": "we don't make sort of maybe silly mistakes but they're not so silly when you have a very large system on your",
    "start": "433170",
    "end": "438900"
  },
  {
    "text": "hands and so from C++ point of view the developer has to know what it's doing",
    "start": "438900",
    "end": "444000"
  },
  {
    "text": "that's always being the case I'm not saying it's good or bad I'm just saying this is the way it is this is the",
    "start": "444000",
    "end": "449460"
  },
  {
    "text": "expectation the expectation from the CSS developer it is to do the right thing in",
    "start": "449460",
    "end": "455910"
  },
  {
    "text": "rust the compiler is the one responsible for making sure we don't mess things up",
    "start": "455910",
    "end": "461340"
  },
  {
    "text": "and so we have something called the board checker in rust which is responsible to make sure that we don't",
    "start": "461340",
    "end": "468570"
  },
  {
    "text": "do things in the wrong way and I'll show you a few examples in a moment and so in C++ we have assignments and",
    "start": "468570",
    "end": "476250"
  },
  {
    "text": "copy construction and by default when we assign one value to another they're just",
    "start": "476250",
    "end": "482160"
  },
  {
    "text": "being copied the copy constructor or our assignment operator is being called unless we have an hour value on our",
    "start": "482160",
    "end": "489540"
  },
  {
    "text": "hands or use the the move function and stuff like that in rust this is kind of",
    "start": "489540",
    "end": "494610"
  },
  {
    "text": "the opposite so the model is everything is first moved so if you assign",
    "start": "494610",
    "end": "500460"
  },
  {
    "text": "something you move the ownership for one variable to another variable and so the",
    "start": "500460",
    "end": "505980"
  },
  {
    "text": "previous variable now has nothing if you try to use it it will not work and I",
    "start": "505980",
    "end": "511230"
  },
  {
    "text": "mean the compiler will tell you that you can do that because it's no longer the owner of the object and so what you",
    "start": "511230",
    "end": "518430"
  },
  {
    "text": "typically do you borrow the reference to the object to do some stuff with it and",
    "start": "518430",
    "end": "524460"
  },
  {
    "text": "then kind of return it to the owner so typically you're going to borrow",
    "start": "524460",
    "end": "529880"
  },
  {
    "text": "references and of course the borrowed checker will make sure you're not making him stay for example you cannot borrow",
    "start": "529880",
    "end": "536160"
  },
  {
    "text": "something and out leave there's something that you referencing that can never happen the compiler will make sure",
    "start": "536160",
    "end": "542370"
  },
  {
    "text": "of that in C++ it's your responsibility if you take a reference to something so you not",
    "start": "542370",
    "end": "548490"
  },
  {
    "text": "use it after that something may already be dead so enough talk let's see some",
    "start": "548490",
    "end": "556290"
  },
  {
    "text": "code so here is a very very simple example here is the C++ example we have",
    "start": "556290",
    "end": "561540"
  },
  {
    "text": "a vector v1 that's initialized with three values nothing very spectacular there and then",
    "start": "561540",
    "end": "567689"
  },
  {
    "text": "I'm assigning that or copy constructing that to V 2 and V 3 and because V 1 is",
    "start": "567689",
    "end": "574529"
  },
  {
    "text": "an L value in terms of in C++ terms then the copy constructor is going to be",
    "start": "574529",
    "end": "581129"
  },
  {
    "text": "activated and once we run this what we get is really three distinct vectors",
    "start": "581129",
    "end": "586800"
  },
  {
    "text": "they have no connection to one another each one is independent we have a deep",
    "start": "586800",
    "end": "592079"
  },
  {
    "text": "copy going on here with these vectors each one can be developed further and",
    "start": "592079",
    "end": "597600"
  },
  {
    "text": "it's on its own it's unconnected to the other vectors if you try the same thing",
    "start": "597600",
    "end": "602610"
  },
  {
    "text": "in ruff this is what it looks like and so in rust we declare variables using the let and statement by the way you'll",
    "start": "602610",
    "end": "609870"
  },
  {
    "text": "notice that in rust all the key words are as short as possible so a function",
    "start": "609870",
    "end": "615029"
  },
  {
    "text": "is FN and let is very short so rust is really about keeping things short and",
    "start": "615029",
    "end": "621240"
  },
  {
    "text": "what we see here is that we are initializing v1 using a macro in rust",
    "start": "621240",
    "end": "627420"
  },
  {
    "text": "when you see the exclamation point it means a macro it's not the same as the seen macro don't worry about it's not",
    "start": "627420",
    "end": "633329"
  },
  {
    "text": "some kind of copy-paste that the preprocessor does and then you'll have to deal with the aftermath it is",
    "start": "633329",
    "end": "639269"
  },
  {
    "text": "something different but for our purposes it creates a vector with three numbers notice I didn't have to specify the type",
    "start": "639269",
    "end": "646350"
  },
  {
    "text": "rust always or at least does a lot of work to infer types automatically but it",
    "start": "646350",
    "end": "653220"
  },
  {
    "text": "is statically typed so it's nothing like some variant or some JavaScript object",
    "start": "653220",
    "end": "660569"
  },
  {
    "text": "that can grow this is exactly a Veck of a I 32 which is the 32-bit integer in",
    "start": "660569",
    "end": "667920"
  },
  {
    "text": "rust and so now when we do something like laked v2 equals v1 we actually",
    "start": "667920",
    "end": "673290"
  },
  {
    "text": "transfer ownership from v1 to v2 so now v1 holds nothing and then the",
    "start": "673290",
    "end": "680009"
  },
  {
    "text": "third instruction trying to move v1 to v3 will actually fail but it will fail",
    "start": "680009",
    "end": "686220"
  },
  {
    "text": "in compiled time and so we get this nice error from our rust compiler so notice I",
    "start": "686220",
    "end": "694290"
  },
  {
    "text": "mean if you ever done C++ development and using templates and you have a",
    "start": "694290",
    "end": "699329"
  },
  {
    "text": "compilation error good luck with that so you're looking at the error and it's kind of maybe 200 characters long and",
    "start": "699329",
    "end": "707579"
  },
  {
    "text": "those braces the triangular braces are all over the place and you not not sure",
    "start": "707579",
    "end": "714389"
  },
  {
    "text": "what you have to do here the raskin Peyer is really different and I think that statement from the",
    "start": "714389",
    "end": "720809"
  },
  {
    "text": "marketing slogan at the beginning is completely correct so it says hey Val",
    "start": "720809",
    "end": "727259"
  },
  {
    "text": "you moved here in line 17 values here after move and so you getting a very",
    "start": "727259",
    "end": "733529"
  },
  {
    "text": "clear error message and in many cases the Russ compiler will also provide",
    "start": "733529",
    "end": "738540"
  },
  {
    "text": "suggestions of how to fix that and so really I think I'm very happy with the",
    "start": "738540",
    "end": "744629"
  },
  {
    "text": "rest compiler because it really helps me to do the right thing and so how can we fix that so one way to do that is use a",
    "start": "744629",
    "end": "752549"
  },
  {
    "text": "specific method on Veck which is called clone and that's because vac implements",
    "start": "752549",
    "end": "758669"
  },
  {
    "text": "a trait or you can think of that as an interface or an attribute which is",
    "start": "758669",
    "end": "763919"
  },
  {
    "text": "called clone which has a clone method and it really just makes a copy of",
    "start": "763919",
    "end": "768929"
  },
  {
    "text": "itself and so now v2 is a completely independent copy of the vector same goes",
    "start": "768929",
    "end": "775139"
  },
  {
    "text": "for v3 and then we get to the same place as the C++ code this just to give you an",
    "start": "775139",
    "end": "782009"
  },
  {
    "text": "idea of what the expectation in Roscoe so assignment is really moving it's not",
    "start": "782009",
    "end": "788459"
  },
  {
    "text": "copying unless you call a specific method if of course that method exists that's a very simple example to start",
    "start": "788459",
    "end": "795449"
  },
  {
    "text": "with so here's another simple example that shows you borrowing in action so",
    "start": "795449",
    "end": "801569"
  },
  {
    "text": "let's say I'm writing this function so this is a function in rust you can see that functions are declared with the F",
    "start": "801569",
    "end": "807959"
  },
  {
    "text": "and keyword give a function name and then the parameters are given in",
    "start": "807959",
    "end": "813690"
  },
  {
    "text": "this way there's a variable named colon and the type in this case I'm using the",
    "start": "813690",
    "end": "819300"
  },
  {
    "text": "standard type string and this is returning nothing so I can just go ahead and implement that function notice by",
    "start": "819300",
    "end": "827250"
  },
  {
    "text": "the way that the curly braces on the same line this is rust good style now most people",
    "start": "827250",
    "end": "834110"
  },
  {
    "text": "like the curly braces on the next line so I hate it so I love rust because of",
    "start": "834110",
    "end": "839790"
  },
  {
    "text": "that at least all the rest is is just nonsense but the curly braces are are",
    "start": "839790",
    "end": "845160"
  },
  {
    "text": "the most important thing and so now I'm in my main function and I want to call",
    "start": "845160",
    "end": "850710"
  },
  {
    "text": "this function and so I'm creating a string using the associated that is",
    "start": "850710",
    "end": "856500"
  },
  {
    "text": "static method called from and the reason I'm doing that and not just providing",
    "start": "856500",
    "end": "861930"
  },
  {
    "text": "the just the string using this static quote is that because it will not",
    "start": "861930",
    "end": "869010"
  },
  {
    "text": "actually give me string with something else which will not get into so I'm going to create a real dynamic string",
    "start": "869010",
    "end": "874140"
  },
  {
    "text": "which I can even change later if I wanted to and then I'm calling greet name and because I'm passing a name to",
    "start": "874140",
    "end": "882210"
  },
  {
    "text": "the method I'm actually passing ownership and so this code does not compile why because on the next line I'm",
    "start": "882210",
    "end": "890400"
  },
  {
    "text": "doing something with name but name is gone so it's now an empty sort of",
    "start": "890400",
    "end": "895500"
  },
  {
    "text": "pointing to nothing there's nothing there and so the compiler does not allow me to have this code so it says look",
    "start": "895500",
    "end": "903180"
  },
  {
    "text": "value moved here and so you're trying to use it again here you can't do that that's against the rules and so the",
    "start": "903180",
    "end": "910230"
  },
  {
    "text": "solution to that is fairly simple and just get need to get used to that and so",
    "start": "910230",
    "end": "915900"
  },
  {
    "text": "here's what I need to do the function root is not going to get the object string but a reference to string because",
    "start": "915900",
    "end": "923460"
  },
  {
    "text": "I'm just want to do something without string and and that's it I'm not trying to store it anywhere I'm just going to",
    "start": "923460",
    "end": "930450"
  },
  {
    "text": "use that as an input parameter and so in this case I the call to the greet",
    "start": "930450",
    "end": "936330"
  },
  {
    "text": "functions for passes along a reference to the string so I have to put that",
    "start": "936330",
    "end": "942480"
  },
  {
    "text": "ampersand in the declaration the function and in the cold site where I'm calling the function then can go",
    "start": "942480",
    "end": "949170"
  },
  {
    "text": "ahead a news name just fine so this is a simple example of borrowing a reference",
    "start": "949170",
    "end": "954930"
  },
  {
    "text": "and using that temporarily and the compiler will make sure that the lifetime of the reference is not",
    "start": "954930",
    "end": "961100"
  },
  {
    "text": "outlived the lifetime of the object it is referencing in this case it's very simple to see but there are some other",
    "start": "961100",
    "end": "967920"
  },
  {
    "text": "cases which are much more complex let's see another example where we actually",
    "start": "967920",
    "end": "975140"
  },
  {
    "text": "thank the compiler for not compiling our code so here is some C++ code which",
    "start": "975140",
    "end": "981930"
  },
  {
    "text": "looks fairly innocent I'm creating a vector of string then pushing a string",
    "start": "981930",
    "end": "988920"
  },
  {
    "text": "in there and then I look at that value in v-0 and then just displaying that",
    "start": "988920",
    "end": "995750"
  },
  {
    "text": "then I'm pushing another string and displaying the previous value again so",
    "start": "995750",
    "end": "1002060"
  },
  {
    "text": "this looks innocent enough but if you try to compile it it compiles just fine",
    "start": "1002060",
    "end": "1007400"
  },
  {
    "text": "the compiler doesn't care about anything if you try to run it I try to run it in on Visual Studio in this case and this",
    "start": "1007400",
    "end": "1014780"
  },
  {
    "text": "is what I got in a debug build says something bad has happened there is an access violation it's an error to get to",
    "start": "1014780",
    "end": "1023510"
  },
  {
    "text": "a location which has the real address dddd with many DS clearly that's not a",
    "start": "1023510",
    "end": "1030319"
  },
  {
    "text": "good idea so if you look at the code if you're a superstar's developer and think",
    "start": "1030320",
    "end": "1035390"
  },
  {
    "text": "a little bit something here is problematic and the problem is maybe not",
    "start": "1035390",
    "end": "1040400"
  },
  {
    "text": "so easy to spot even though we have only about four or five lines of code and the",
    "start": "1040400",
    "end": "1046189"
  },
  {
    "text": "problem is that the second push needed to increase the capacity of the vectors",
    "start": "1046190",
    "end": "1054140"
  },
  {
    "text": "it was relocated to another region in memory and the existing strings were",
    "start": "1054140",
    "end": "1059840"
  },
  {
    "text": "just copied there and so the previous reference was now referencing an old",
    "start": "1059840",
    "end": "1065410"
  },
  {
    "text": "data which wasn't longer there it's just not there and the compiler cannot really",
    "start": "1065410",
    "end": "1072410"
  },
  {
    "text": "help me determine and this is problematic I'm going to heat problems at runtime",
    "start": "1072410",
    "end": "1078470"
  },
  {
    "text": "maybe not all the time if I if by chance there was still room in that vector the",
    "start": "1078470",
    "end": "1084470"
  },
  {
    "text": "capacity was higher and the reallocation was not needed then that would work but",
    "start": "1084470",
    "end": "1089720"
  },
  {
    "text": "then I deployed the application in some case after adding more more strings and using this kind of code it will crash so",
    "start": "1089720",
    "end": "1097789"
  },
  {
    "text": "I'm going to debug these things and this is no fun it's better if the compiler",
    "start": "1097789",
    "end": "1103520"
  },
  {
    "text": "can tell me upfront this is a bad idea so if I try to do that in rust here's",
    "start": "1103520",
    "end": "1108980"
  },
  {
    "text": "the sort of the equivalent code I'm creating an empty vector notice the mute",
    "start": "1108980",
    "end": "1115039"
  },
  {
    "text": "keyword so in rust all variables are immutable by default so we cannot mutate",
    "start": "1115039",
    "end": "1121760"
  },
  {
    "text": "and you cannot change them if you do want to change something you have to add the mute keyword again it's everything",
    "start": "1121760",
    "end": "1128210"
  },
  {
    "text": "is shortened this message passed as possible which again gives the intent",
    "start": "1128210",
    "end": "1133370"
  },
  {
    "text": "you're opting in saying hey I declare my intent to make changes to this object",
    "start": "1133370",
    "end": "1140049"
  },
  {
    "text": "which i think is better than the opposite most languages take the opposite stance you can do anything with",
    "start": "1140049",
    "end": "1146780"
  },
  {
    "text": "a variable and then in C++ you have to stick a Const in various locations to say hey I'm promise I'm not going to do",
    "start": "1146780",
    "end": "1153590"
  },
  {
    "text": "any changes to that particular object and so I have an empty vector here and",
    "start": "1153590",
    "end": "1158809"
  },
  {
    "text": "pushing hello and then I'm taking a reference to v-0 in exactly the same way as the C++ code and printing that value",
    "start": "1158809",
    "end": "1167000"
  },
  {
    "text": "and then I'm pushing another value and printing the previous value as well so",
    "start": "1167000",
    "end": "1172190"
  },
  {
    "text": "we try to compile that I get another compilation here that says hey you",
    "start": "1172190",
    "end": "1178030"
  },
  {
    "text": "borrowed a reference here immutably and then you change something here so you",
    "start": "1178030",
    "end": "1185150"
  },
  {
    "text": "mutated something while you have an immutable reference to the object that's exactly a data race and because of that",
    "start": "1185150",
    "end": "1192409"
  },
  {
    "text": "data race the compiler says hey I'm not going to allow that so the compiler is",
    "start": "1192409",
    "end": "1197600"
  },
  {
    "text": "of course very conservative because it may be the case that this vector also has more capacity in it and maybe that",
    "start": "1197600",
    "end": "1204950"
  },
  {
    "text": "actually will not crash in runtime but the RUS compiler is not taking any chances so it forces the developer",
    "start": "1204950",
    "end": "1212400"
  },
  {
    "text": "to do things differently to make sure that a hundred percent that nothing will",
    "start": "1212400",
    "end": "1217830"
  },
  {
    "text": "bad will happen so of course that means the as always in programming there's no",
    "start": "1217830",
    "end": "1224400"
  },
  {
    "text": "free lunch you can't really get everything so you do need to do some things differently even if you can",
    "start": "1224400",
    "end": "1230850"
  },
  {
    "text": "guarantee that that vector will not need any reallocation in this simple scenario",
    "start": "1230850",
    "end": "1237350"
  },
  {
    "text": "and so I haven't provided a solution here yet we'll discuss that yeah so it",
    "start": "1237350",
    "end": "1252630"
  },
  {
    "text": "will not work in exactly the same way because once you have a mutable reference you cannot have any other",
    "start": "1252630",
    "end": "1258600"
  },
  {
    "text": "references to the same thing mutable or immutable that's the basic idea if you",
    "start": "1258600",
    "end": "1263700"
  },
  {
    "text": "have only immutable references you can have as many as you want because they can just read the data but once you have",
    "start": "1263700",
    "end": "1270660"
  },
  {
    "text": "one meter by reference that's it you cannot have any other references in the same scope that's the idea here",
    "start": "1270660",
    "end": "1277550"
  },
  {
    "text": "okay so here's again some brief comparison from terms known in C++ to",
    "start": "1277550",
    "end": "1283920"
  },
  {
    "text": "stuff that we that are implemented in raft and so this model of borrowing may",
    "start": "1283920",
    "end": "1290460"
  },
  {
    "text": "seem like perhaps a good idea but it looks kind of limiting because how can I",
    "start": "1290460",
    "end": "1295470"
  },
  {
    "text": "share an object between multiple elements maybe multiple threads even it's not good enough to have just a",
    "start": "1295470",
    "end": "1302309"
  },
  {
    "text": "single owner so we need something more and surahs provide this as part of its",
    "start": "1302309",
    "end": "1308250"
  },
  {
    "text": "standard library so for instance zipless parts we have unique pointer nick pointer is very simple something that",
    "start": "1308250",
    "end": "1315960"
  },
  {
    "text": "allows us to have a single owner to something that is allocated typically on a hip and so rust has an equivalent",
    "start": "1315960",
    "end": "1323070"
  },
  {
    "text": "called box so I can take anything give it to box : : ooh and that would be",
    "start": "1323070",
    "end": "1330270"
  },
  {
    "text": "stored on the hip and so the box will kind of point to that something but",
    "start": "1330270",
    "end": "1335490"
  },
  {
    "text": "boxes is a bit easier to use the unique pointer because of a trait the trust",
    "start": "1335490",
    "end": "1341580"
  },
  {
    "text": "supports you can actually access the T object implicitly without doing any special debt or something like this",
    "start": "1341580",
    "end": "1348809"
  },
  {
    "text": "to get to the underlying pointer so it's a bit easier to use because this is a very common thing to do for shared",
    "start": "1348809",
    "end": "1356370"
  },
  {
    "text": "pointer that c++ provides the equivalent in rust our RC this is the the single",
    "start": "1356370",
    "end": "1364320"
  },
  {
    "text": "threaded reference counter and we have a RC which is the atomic reference counter",
    "start": "1364320",
    "end": "1371190"
  },
  {
    "text": "so if you need to share an object between threads you have to use a RC and that implements certain traits that",
    "start": "1371190",
    "end": "1378059"
  },
  {
    "text": "allow it safely to move to form thread to thread so these are kind of the terms",
    "start": "1378059",
    "end": "1385710"
  },
  {
    "text": "that you can see here which make things a little easier to understand and so",
    "start": "1385710",
    "end": "1391470"
  },
  {
    "text": "reference s exists in C++ of course and as we've seen in rust references imply borrowing and the board checker will",
    "start": "1391470",
    "end": "1398160"
  },
  {
    "text": "make sure stuff is done correctly and so the default in C++ C naught is non cons",
    "start": "1398160",
    "end": "1403559"
  },
  {
    "text": "if you want to something to be cons you have to explicitly specify that in rust this is exactly the opposite everything",
    "start": "1403559",
    "end": "1410610"
  },
  {
    "text": "is immutable unless you specify a mute using new keyword that you want",
    "start": "1410610",
    "end": "1416220"
  },
  {
    "text": "something to change so let's see something a little bit more complex",
    "start": "1416220",
    "end": "1421830"
  },
  {
    "text": "perhaps and so let's say I want to do something like this I want to calculate",
    "start": "1421830",
    "end": "1428010"
  },
  {
    "start": "1423000",
    "end": "1927000"
  },
  {
    "text": "the number of prime numbers between some first and last number and I want to do",
    "start": "1428010",
    "end": "1434700"
  },
  {
    "text": "that with multiple threads so I'm going to do a very simple chunking by giving",
    "start": "1434700",
    "end": "1440429"
  },
  {
    "text": "each thread a range of numbers to work on and they're going to work on that concurrently and then give me back each",
    "start": "1440429",
    "end": "1447780"
  },
  {
    "text": "one will give me it's result and I'll just kind of add the result up so that's a very simple relatively simple thing to",
    "start": "1447780",
    "end": "1455190"
  },
  {
    "text": "do in a multi-threaded world and so how would I do that in C++ so here's is an",
    "start": "1455190",
    "end": "1461669"
  },
  {
    "text": "example of how to do that I have a simple is prime function the justin knows to calculate whether a number is",
    "start": "1461669",
    "end": "1468210"
  },
  {
    "text": "prime or not that's a fairly straightforward and here's the main function called calc and so called",
    "start": "1468210",
    "end": "1474960"
  },
  {
    "text": "Prime's we see the number of threads and the range of numbers for which I would like things to work and so the idea here",
    "start": "1474960",
    "end": "1482250"
  },
  {
    "text": "is that I'm going to create several threads each thread is going to get a chunk a from and the to to work on which",
    "start": "1482250",
    "end": "1490110"
  },
  {
    "text": "I calculate here and then it's going to run in a loop and check each one whether",
    "start": "1490110",
    "end": "1496529"
  },
  {
    "text": "it's a prime number or not and if it is a prime number I'm going to push that into a vector I maintain here now if",
    "start": "1496529",
    "end": "1504419"
  },
  {
    "text": "you've done any and then of course I have to wait for the threads to to finish using the join method and if",
    "start": "1504419",
    "end": "1510899"
  },
  {
    "text": "you've done any development in fading you probably realize there's a bug here",
    "start": "1510899",
    "end": "1516179"
  },
  {
    "text": "it's a very simple bug but you do need to know how to solve it so the bug is",
    "start": "1516179",
    "end": "1522299"
  },
  {
    "text": "that the result here the vector is not thread safe and so if I use pushback here",
    "start": "1522299",
    "end": "1527669"
  },
  {
    "text": "that's not a good idea because multiple threads are going to use pushback on that same vector and that vector will",
    "start": "1527669",
    "end": "1534000"
  },
  {
    "text": "probably be corrupted and so if I compile this code the compiler says okay",
    "start": "1534000",
    "end": "1539340"
  },
  {
    "text": "you're good to go everything is just fine and a trying time I'm going to crash and so even if I",
    "start": "1539340",
    "end": "1545700"
  },
  {
    "text": "know how to solve that how would I solve it so I know that in C++ 11 we have",
    "start": "1545700",
    "end": "1550889"
  },
  {
    "text": "something called the mutex which I can acquire before I push the value to the",
    "start": "1550889",
    "end": "1556500"
  },
  {
    "text": "vector and then release afterwards so here's a better version so I have a",
    "start": "1556500",
    "end": "1561570"
  },
  {
    "text": "fixed version here that does exactly the same thing but we have a mutex here and that mutex is going to be locked here",
    "start": "1561570",
    "end": "1569340"
  },
  {
    "text": "using a lock guard which is a rye wrapper that takes ownership of the mutex acquires the mutex then releases",
    "start": "1569340",
    "end": "1575580"
  },
  {
    "text": "that at the end of the scope and within that scope I'm using this method and",
    "start": "1575580",
    "end": "1580769"
  },
  {
    "text": "this actually solves my problem but there's something here which is missing",
    "start": "1580769",
    "end": "1586200"
  },
  {
    "text": "and the missing thing is that how do I know for sure I actually solved the",
    "start": "1586200",
    "end": "1591240"
  },
  {
    "text": "problem so the code compiles I ran it several times looks good but who knows maybe in in a",
    "start": "1591240",
    "end": "1599639"
  },
  {
    "text": "different size vector maybe with different number of threads something will go bad and the problem is that this",
    "start": "1599639",
    "end": "1606210"
  },
  {
    "text": "mutex has no connection to the vector so",
    "start": "1606210",
    "end": "1612090"
  },
  {
    "text": "the vector is distinct and the music's is distinct it is my sense because the supastarz developer to",
    "start": "1612090",
    "end": "1618000"
  },
  {
    "text": "use them together correctly so in fact if there is some call to another function here providing that vector some",
    "start": "1618000",
    "end": "1625529"
  },
  {
    "text": "other function can take the vector and do something with it without the mutex and I'm going to be in trouble again and",
    "start": "1625529",
    "end": "1632750"
  },
  {
    "text": "there's nothing to enforce that the compiler has no idea and that's because",
    "start": "1632750",
    "end": "1640080"
  },
  {
    "text": "the mutex and the data that it's supposed to protect our distinct entities and so in rust things are",
    "start": "1640080",
    "end": "1647909"
  },
  {
    "text": "different rust also provides a mutex but that mutex holds on to the data so if you",
    "start": "1647909",
    "end": "1655710"
  },
  {
    "text": "want the data you actually to tell you to please miss the mutex give me the data and so they're actually together so",
    "start": "1655710",
    "end": "1664679"
  },
  {
    "text": "there's no way simply no way to access the data without a mutex use the mutex",
    "start": "1664679",
    "end": "1671370"
  },
  {
    "text": "really is protecting the data so the model is different so you can't really make a mistake you cannot provide that",
    "start": "1671370",
    "end": "1677789"
  },
  {
    "text": "vector of someone else the compiler will not let you it's not a runtime thing it's a compile time thing so how would",
    "start": "1677789",
    "end": "1685139"
  },
  {
    "text": "that look like and so here's some rust code in Visual Studio code so I didn't",
    "start": "1685139",
    "end": "1692220"
  },
  {
    "text": "mention that so if you want to get started with rust you have to install that of course which is fairly simple then you probably want to use some IDE",
    "start": "1692220",
    "end": "1699360"
  },
  {
    "text": "otherwise you'll be writing in notepad all your life and it's not much fun notepad or whatever platform you're",
    "start": "1699360",
    "end": "1706200"
  },
  {
    "text": "working on and and so we just dude your code is one of those environments or IDE",
    "start": "1706200",
    "end": "1711539"
  },
  {
    "text": "switch which can work with rust there's a pretty good extension that knows how",
    "start": "1711539",
    "end": "1718169"
  },
  {
    "text": "to work with that so here's my is prime function just to shoot to just get some",
    "start": "1718169",
    "end": "1723480"
  },
  {
    "text": "more acquaintance with syntax from rust so noticed I'm completely here the limit",
    "start": "1723480",
    "end": "1730649"
  },
  {
    "text": "that's the square root of my number and that would be my limit for the loop",
    "start": "1730649",
    "end": "1735899"
  },
  {
    "text": "notice the for loop in rust uses really something like a range so you can use",
    "start": "1735899",
    "end": "1742230"
  },
  {
    "text": "iterators and stuff like that so in this case it says from two to limit including limit that's the equal",
    "start": "1742230",
    "end": "1748739"
  },
  {
    "text": "here so this is a range and if we if the number is divided evenly then we'll",
    "start": "1748739",
    "end": "1756179"
  },
  {
    "text": "return false and we're done with it and finally here we're writing true notice there's no return true here I can",
    "start": "1756179",
    "end": "1763109"
  },
  {
    "text": "actually write return true but it's more idiomatic grass to just write the result",
    "start": "1763109",
    "end": "1768719"
  },
  {
    "text": "that you want to return without the semicolon and so the semicolon in rust actually means something if you had have",
    "start": "1768719",
    "end": "1776099"
  },
  {
    "text": "a semicolon means you don't care about the result if you don't have a semicolon then this is actually an expression that",
    "start": "1776099",
    "end": "1782399"
  },
  {
    "text": "returns something and so because I have to return a boolean here a returning true is is just fine",
    "start": "1782399",
    "end": "1788700"
  },
  {
    "text": "and so the code here is a bit more complex I'm not going to talk about every little detail here just to give",
    "start": "1788700",
    "end": "1795539"
  },
  {
    "text": "you an idea of how that works so if I try to do something like like I did previously in C++ just saying okay",
    "start": "1795539",
    "end": "1802799"
  },
  {
    "text": "let me get vector here maybe even with the mutex but that's dispensable mutex",
    "start": "1802799",
    "end": "1807809"
  },
  {
    "text": "here and try to do something with the vector in that if statement it was simply not compiled compressor and I",
    "start": "1807809",
    "end": "1814649"
  },
  {
    "text": "can't do that I can't just transfer ownership to a different thread at first",
    "start": "1814649",
    "end": "1820080"
  },
  {
    "text": "because there's no guarantee that thread is going to be alive while that vector",
    "start": "1820080",
    "end": "1825629"
  },
  {
    "text": "is like maybe the main thread will terminate before that and that and then we're going to have a reference to",
    "start": "1825629",
    "end": "1830639"
  },
  {
    "text": "something that is already gone so the compiler will not let me make these silly mistakes and so the fixed version",
    "start": "1830639",
    "end": "1837389"
  },
  {
    "text": "looks something like this my data is a new vector but here I have a mutex that",
    "start": "1837389",
    "end": "1843690"
  },
  {
    "text": "takes that data and so the mutex is the owner of my data in a sense so the data",
    "start": "1843690",
    "end": "1849779"
  },
  {
    "text": "is heat is hidden behind the mutex so if I want to get to the data I have to",
    "start": "1849779",
    "end": "1855029"
  },
  {
    "text": "actually tell the mutex lock lock means acquire the mutex please give me",
    "start": "1855029",
    "end": "1861229"
  },
  {
    "text": "reference to the actual data while the mutex is locked and when that variable",
    "start": "1861229",
    "end": "1867269"
  },
  {
    "text": "goes out of scope after I do a push operation then the mutex is released so",
    "start": "1867269",
    "end": "1873299"
  },
  {
    "text": "this is the general idea and and at the end of this loop I want to get to the",
    "start": "1873299",
    "end": "1878820"
  },
  {
    "text": "actual value again have to do lock here to get to the actual vector back and then return the",
    "start": "1878820",
    "end": "1884760"
  },
  {
    "text": "size of the vector because the purpose of my function is just to return the count of primes and not the entire list",
    "start": "1884760",
    "end": "1892830"
  },
  {
    "text": "in this case and so again notice I don't have any return statement just writing",
    "start": "1892830",
    "end": "1898230"
  },
  {
    "text": "something some expression without the semicolon and so when I compile it and",
    "start": "1898230",
    "end": "1905250"
  },
  {
    "text": "it compiles fine I am guaranteed I am confident this code is bulletproof so",
    "start": "1905250",
    "end": "1912090"
  },
  {
    "text": "it's going to run correctly anywhere because again the compiler is very conservative even if there is a tiny",
    "start": "1912090",
    "end": "1919440"
  },
  {
    "text": "chance this who could fail in some mysterious situation it will not let me compile this code okay so let's move on",
    "start": "1919440",
    "end": "1928010"
  },
  {
    "start": "1927000",
    "end": "2155000"
  },
  {
    "text": "another thing I want to show you which is interesting in rust or enumerations so enumerations the C++ are are fairly",
    "start": "1928010",
    "end": "1935850"
  },
  {
    "text": "simple just a set of values you can specify the exact value you can specify",
    "start": "1935850",
    "end": "1941820"
  },
  {
    "text": "the size of that enumeration whether that's four bytes or two bites right bytes and so on but really there's not",
    "start": "1941820",
    "end": "1949020"
  },
  {
    "text": "much to it this is just a set of values now in rust enums are are different so",
    "start": "1949020",
    "end": "1956490"
  },
  {
    "text": "they can be just like the c++ announced that's not a problem here's the seasoning name that we've seen earlier",
    "start": "1956490",
    "end": "1962670"
  },
  {
    "text": "in a Rasta which is practically the same but in arms can be more interesting here",
    "start": "1962670",
    "end": "1969960"
  },
  {
    "text": "is the NAM which is a generic enum that works on two parameters called T and E",
    "start": "1969960",
    "end": "1976620"
  },
  {
    "text": "here that has two values which in themselves are really a family of values",
    "start": "1976620",
    "end": "1982170"
  },
  {
    "text": "so one of them is called okay with some object and the other air with some other",
    "start": "1982170",
    "end": "1987750"
  },
  {
    "text": "object and so this is in fact one of the types in the rust standard library which",
    "start": "1987750",
    "end": "1992820"
  },
  {
    "text": "is used for reporting errors from functions so the typical function that",
    "start": "1992820",
    "end": "1998970"
  },
  {
    "text": "may fail should return result of something and something so the first",
    "start": "1998970",
    "end": "2004340"
  },
  {
    "text": "something is what happens if the method works correctly what the type that is",
    "start": "2004340",
    "end": "2010130"
  },
  {
    "text": "going to be returned and the second something is a type of error we should provide the error",
    "start": "2010130",
    "end": "2015290"
  },
  {
    "text": "information in case something doesn't work correctly in the return the actual return statement in that function are",
    "start": "2015290",
    "end": "2021980"
  },
  {
    "text": "going to be okay something or something and so the calling code can look at that",
    "start": "2021980",
    "end": "2027050"
  },
  {
    "text": "result and in fact methods in Anam so Ananse can have methods so it's easier",
    "start": "2027050",
    "end": "2033740"
  },
  {
    "text": "to work with the the result so if I maybe I want to look at the error maybe I want to look at the result maybe I",
    "start": "2033740",
    "end": "2039470"
  },
  {
    "text": "don't care about the error because I'm pretty sure that's going to be fine so I can use the something like unwrap and",
    "start": "2039470",
    "end": "2045290"
  },
  {
    "text": "just take the result and so on so it's very rich thing to have another one",
    "start": "2045290",
    "end": "2051080"
  },
  {
    "text": "which is very common is called option again it's very common to have that as return type from functions which is very",
    "start": "2051080",
    "end": "2059780"
  },
  {
    "text": "similar to the C++ 17 optional type which means either you have something or",
    "start": "2059780",
    "end": "2065629"
  },
  {
    "text": "you have nothing so if you have something T will be the something and the value some something or you have",
    "start": "2065630",
    "end": "2071480"
  },
  {
    "text": "nothing so we get back the non value from dhinam so here's a different",
    "start": "2071480",
    "end": "2077419"
  },
  {
    "text": "example those of you who are old enough maybe our familiar with the language",
    "start": "2077420",
    "end": "2082520"
  },
  {
    "text": "called logo anyone program logo at some point in their lives I did that in some",
    "start": "2082520",
    "end": "2087800"
  },
  {
    "text": "point and showing logo there's that thing called the turtle and T today I have no idea why it was called a turtle",
    "start": "2087800",
    "end": "2095090"
  },
  {
    "text": "because it was moving sometimes very fast and it's very unlikely Turtles I've seen but it is a turtle and nonetheless",
    "start": "2095090",
    "end": "2101750"
  },
  {
    "text": "and so if I want to model that for instance here's one way I can do that I can create any nam to specify what kind",
    "start": "2101750",
    "end": "2110510"
  },
  {
    "text": "of commands this turtle can can work with what the things that he can do so",
    "start": "2110510",
    "end": "2116660"
  },
  {
    "text": "in simplest facts I will have to just have a set of values and then have some",
    "start": "2116660",
    "end": "2121730"
  },
  {
    "text": "way maybe some sub structures that provide the actual data to some of the",
    "start": "2121730",
    "end": "2127670"
  },
  {
    "text": "commands may be using a union so here we get that for free so I have a total command some of the commands here don't",
    "start": "2127670",
    "end": "2135380"
  },
  {
    "text": "have any parameters such as rotate right and rotate left some of them have parameters such as forward and backwards",
    "start": "2135380",
    "end": "2141080"
  },
  {
    "text": "and even pen color can have another object that has three fields RG and B",
    "start": "2141080",
    "end": "2146600"
  },
  {
    "text": "with shoot which are representing the RGB values of some color for instance and so",
    "start": "2146600",
    "end": "2152209"
  },
  {
    "text": "here's hi how I can work with something like this let's see a turtle so we not",
    "start": "2152209",
    "end": "2158869"
  },
  {
    "start": "2155000",
    "end": "2471000"
  },
  {
    "text": "see a turtle really I'm just doing that from a textual perspective but you should just imagine a turtle if you've",
    "start": "2158869",
    "end": "2165559"
  },
  {
    "text": "done logo development then it's really usually was drawn as a triangle again",
    "start": "2165559",
    "end": "2171680"
  },
  {
    "text": "not really a turtle but that was the 80s so so how do i define all these things",
    "start": "2171680",
    "end": "2177769"
  },
  {
    "text": "so here's the turtle command this is the same thing we've seen on the slide and with a minor difference I've actually",
    "start": "2177769",
    "end": "2184130"
  },
  {
    "text": "created a struct color here to hold the RGB values as just a distinct type and",
    "start": "2184130",
    "end": "2190670"
  },
  {
    "text": "not just an anonymous type so pen color is going to be of type color so I'm just",
    "start": "2190670",
    "end": "2196489"
  },
  {
    "text": "writing that as part of denim the turtle itself here is an object called turtle",
    "start": "2196489",
    "end": "2201979"
  },
  {
    "text": "so we can declare object using the struct keyword in in rust and what we declaring are just the fields so we have",
    "start": "2201979",
    "end": "2209779"
  },
  {
    "text": "four fields here the heading of the turtle X&Y and the pen color each one with its own type so to add methods to",
    "start": "2209779",
    "end": "2217729"
  },
  {
    "text": "the turtle when using the imple keyword so that's the way to add methods to",
    "start": "2217729",
    "end": "2222890"
  },
  {
    "text": "types and so we can actually use as many inputs as we want in various parts if",
    "start": "2222890",
    "end": "2228049"
  },
  {
    "text": "that makes sense and so I'm adding here two functions the first function is called new each",
    "start": "2228049",
    "end": "2234709"
  },
  {
    "text": "returns a turtle this is something which is exactly an Associated function",
    "start": "2234709",
    "end": "2240019"
  },
  {
    "text": "associated method which means it is a static one because there's no self here anyway if there's no self in the",
    "start": "2240019",
    "end": "2246650"
  },
  {
    "text": "parameters this is me this means static function or associated function and so this should be sort of a a creator for",
    "start": "2246650",
    "end": "2255499"
  },
  {
    "text": "turtle objects the name new by the way is not special in any way you can call",
    "start": "2255499",
    "end": "2260839"
  },
  {
    "text": "it anything you want but it's very common to call the construction method",
    "start": "2260839",
    "end": "2266599"
  },
  {
    "text": "new The Associated method new and so I used the same idea and so I'm going to",
    "start": "2266599",
    "end": "2272209"
  },
  {
    "text": "return a turtle here so this statement actually creates a turtle and initializing the fields to some values",
    "start": "2272209",
    "end": "2277999"
  },
  {
    "text": "and again there's no semicolon here which means this whole expression is returning",
    "start": "2277999",
    "end": "2283700"
  },
  {
    "text": "from the function if I put the semicolon the compiler will say hey that's a problem because you're supposed to",
    "start": "2283700",
    "end": "2290029"
  },
  {
    "text": "return turtle and because the salmon color actually have the unit function at the unit type which is like void in C++",
    "start": "2290029",
    "end": "2297319"
  },
  {
    "text": "so that's not good so either you either use return which is again considered a",
    "start": "2297319",
    "end": "2302420"
  },
  {
    "text": "bad style when you just return something from a function or just make the",
    "start": "2302420",
    "end": "2307489"
  },
  {
    "text": "semicolon go away and now I have that execute function this is an instance method because the first parameter is",
    "start": "2307489",
    "end": "2315049"
  },
  {
    "text": "self which means this is the turtle itself and because I'm going to do something that mutates the object I have",
    "start": "2315049",
    "end": "2322579"
  },
  {
    "text": "to take a mutable reference to that object and then I'm accepting another",
    "start": "2322579",
    "end": "2328670"
  },
  {
    "text": "parameter which is the actual command and so here we can see some of the power to the pattern matching capabilities of",
    "start": "2328670",
    "end": "2336589"
  },
  {
    "text": "rust and this is really just the tip of the iceberg and so I'm using the match",
    "start": "2336589",
    "end": "2341799"
  },
  {
    "text": "expression to say hey which command is it if it's rotate right let's just",
    "start": "2341799",
    "end": "2347029"
  },
  {
    "text": "change the height heading by adding 90 degrees if it's rotate left let's just",
    "start": "2347029",
    "end": "2352670"
  },
  {
    "text": "turn it left by 90 degrees if it's rotate with some angle let's use it",
    "start": "2352670",
    "end": "2357799"
  },
  {
    "text": "notice the pattern I'm getting whatever value is passed in inside the command",
    "start": "2357799",
    "end": "2363829"
  },
  {
    "text": "inside the enum instance same thing for forward I'm getting some distance I'm",
    "start": "2363829",
    "end": "2369829"
  },
  {
    "text": "doing some trigonometric calculations to move the x and y of the turtle to the",
    "start": "2369829",
    "end": "2377299"
  },
  {
    "text": "appropriate location for backwards same idea in this case I'm calling myself",
    "start": "2377299",
    "end": "2382849"
  },
  {
    "text": "with forward with minus D so I'm just using something I already implemented by",
    "start": "2382849",
    "end": "2390109"
  },
  {
    "text": "calling it and finally for pen color I'm doing something just assigning the new",
    "start": "2390109",
    "end": "2395930"
  },
  {
    "text": "color to the point pen color I am keeping as part of my object so self here is like this in in C++ and so one",
    "start": "2395930",
    "end": "2404299"
  },
  {
    "text": "thing I should mention about match that you must have all the options so you",
    "start": "2404299",
    "end": "2409430"
  },
  {
    "text": "have to exhaust all the options of this the expression you're matching against the",
    "start": "2409430",
    "end": "2414890"
  },
  {
    "text": "I exhausted everything and there are other ways to deal with other values that I don't care about specifically I",
    "start": "2414890",
    "end": "2421160"
  },
  {
    "text": "can use something like the underscore which really says whatever else remains this is what I want to do sort of a",
    "start": "2421160",
    "end": "2427640"
  },
  {
    "text": "default in a switch statement in a sense but of course match is much more more powerful than simple switches you can",
    "start": "2427640",
    "end": "2434270"
  },
  {
    "text": "see can see already here so now in my main function I can utilize that so this",
    "start": "2434270",
    "end": "2440690"
  },
  {
    "text": "is what it looks like I am creating a new turtle by calling The Associated",
    "start": "2440690",
    "end": "2447410"
  },
  {
    "text": "method a new and then just using print",
    "start": "2447410",
    "end": "2452480"
  },
  {
    "text": "turtle which is the helper function printing the stuff about the turtle and just executing various commands just to",
    "start": "2452480",
    "end": "2458570"
  },
  {
    "text": "show that it actually works and of course I can build that and run that and we'll see the various states of the",
    "start": "2458570",
    "end": "2464750"
  },
  {
    "text": "turtle changing as needed so these are enumerations which i think",
    "start": "2464750",
    "end": "2470870"
  },
  {
    "text": "is one of the coolest features in rust and of course pattern matching goes along with it but pattern matching is",
    "start": "2470870",
    "end": "2476990"
  },
  {
    "start": "2471000",
    "end": "2587000"
  },
  {
    "text": "not just for enumerations but it definitely is a good way to deal with enumerations",
    "start": "2476990",
    "end": "2483370"
  },
  {
    "text": "okay let's discuss traits so trait is another nice feature in rust so traits",
    "start": "2483370",
    "end": "2489680"
  },
  {
    "text": "is kind of a combination between interfaces and attributes in rust so we",
    "start": "2489680",
    "end": "2496190"
  },
  {
    "text": "can declare a trait we can think of that as a set of methods perhaps that need to",
    "start": "2496190",
    "end": "2502310"
  },
  {
    "text": "be implemented by types and so you can have the latest trucks that implement traits and so these are sort of an",
    "start": "2502310",
    "end": "2509450"
  },
  {
    "text": "interface and this is the basis for pulling morphism in rust so you can have for example a vector of some trait and",
    "start": "2509450",
    "end": "2517300"
  },
  {
    "text": "then I can just push into the vector of various objects that implement that",
    "start": "2517300",
    "end": "2523070"
  },
  {
    "text": "particular trait which is the classic way of doing polymorphism in C++ just a different terminology in that case we",
    "start": "2523070",
    "end": "2531140"
  },
  {
    "text": "can also inherit traits so one trait can help from another trait it's actually also is very common in the in the",
    "start": "2531140",
    "end": "2538220"
  },
  {
    "text": "standard library and in fact some of the syntactic sugar in rust is based on on",
    "start": "2538220",
    "end": "2543580"
  },
  {
    "text": "traits which are used in some cases as attributes such the debug attribute I have actually",
    "start": "2543580",
    "end": "2551180"
  },
  {
    "text": "used in this piece of code so if I'm using the debug attribute here on color",
    "start": "2551180",
    "end": "2556910"
  },
  {
    "text": "it allows me to then print something using this particular notation in in a",
    "start": "2556910",
    "end": "2564170"
  },
  {
    "text": "way that allows or is easy for developer to see the exact values of the type",
    "start": "2564170",
    "end": "2569869"
  },
  {
    "text": "without me having to to invest in a print line sort of implementation for",
    "start": "2569869",
    "end": "2575720"
  },
  {
    "text": "that particular type and so this is basing this on a debug trait so this is a trait used as an attribute okay so",
    "start": "2575720",
    "end": "2587420"
  },
  {
    "start": "2587000",
    "end": "2778000"
  },
  {
    "text": "let's see some examples so here's one example let's say I want to write a function that accepts a vector of",
    "start": "2587420",
    "end": "2594349"
  },
  {
    "text": "something and returns the largest item in that vector and so we see several",
    "start": "2594349",
    "end": "2600470"
  },
  {
    "text": "things here one of them is that I need to provide some assurance to the",
    "start": "2600470",
    "end": "2605569"
  },
  {
    "text": "compiler that this code can compile does there that there's some chance for this",
    "start": "2605569",
    "end": "2611180"
  },
  {
    "text": "to compile because if you were to do something loose in C++ what you see here",
    "start": "2611180",
    "end": "2617059"
  },
  {
    "text": "is that we the decoding is implying that these T values have to implement the",
    "start": "2617059",
    "end": "2623299"
  },
  {
    "text": "greater than operator and so the CSS compiler when we see something like this",
    "start": "2623299",
    "end": "2628460"
  },
  {
    "text": "without of course the the extra notations here will say okay that's fine I don't care",
    "start": "2628460",
    "end": "2633740"
  },
  {
    "text": "once you actually use the function I'm going to check to see whether that particular type you're using actually",
    "start": "2633740",
    "end": "2640369"
  },
  {
    "text": "does implement the greater than operator or not and then we'll see if it compiles or not Russ takes a different approach",
    "start": "2640369",
    "end": "2646730"
  },
  {
    "text": "it's more like generics in c-sharp if you are familiar with that you have to have these constraints and so without",
    "start": "2646730",
    "end": "2654049"
  },
  {
    "text": "these partial order plus copy traits the compiler will fail the code the",
    "start": "2654049",
    "end": "2660500"
  },
  {
    "text": "compilation who say hey I can't be assured that all T's that may be coming to this function implement the greater",
    "start": "2660500",
    "end": "2667490"
  },
  {
    "text": "than operator there's no way I know that not every T in the world and maybe every",
    "start": "2667490",
    "end": "2673220"
  },
  {
    "text": "t that will be invented in the future will be able to to fit in here and so I",
    "start": "2673220",
    "end": "2678710"
  },
  {
    "text": "have to say okay the T's I'm allowing into this function are only those that",
    "start": "2678710",
    "end": "2684290"
  },
  {
    "text": "implement the greater than operator which is what partial old or really defines this is a standard trait from",
    "start": "2684290",
    "end": "2691010"
  },
  {
    "text": "the standard library and copies needed as well because we're returning one value from the actual vector which is",
    "start": "2691010",
    "end": "2697670"
  },
  {
    "text": "passed by reference and we can't just return something by reference the lifetime would be crazy there and so we",
    "start": "2697670",
    "end": "2703790"
  },
  {
    "text": "need these two traits to be implemented in fact there are several ways to",
    "start": "2703790",
    "end": "2709579"
  },
  {
    "text": "specify the other some and newer syntax in rust 20:18 but it doesn't matter",
    "start": "2709579",
    "end": "2716119"
  },
  {
    "text": "from our perspective so once we see this function the compiler knows that every T",
    "start": "2716119",
    "end": "2722150"
  },
  {
    "text": "that will be accepted to this function will make the function work for sure and so that's very different than the duck",
    "start": "2722150",
    "end": "2729290"
  },
  {
    "text": "typing that we have in C++ for templates and and I think this is one of the kind",
    "start": "2729290",
    "end": "2735349"
  },
  {
    "text": "of nasty stuff in C++ and that's what we have constantly bastarz 20 to try to",
    "start": "2735349",
    "end": "2740470"
  },
  {
    "text": "mitigate that so if I look at a function I know what it expects because in this",
    "start": "2740470",
    "end": "2745579"
  },
  {
    "text": "example if you look just at the signature of the function without that those annotations in C++ you don't have",
    "start": "2745579",
    "end": "2753200"
  },
  {
    "text": "any idea what the function expects what kind of T's will make the function work but looking at this you know exactly",
    "start": "2753200",
    "end": "2759710"
  },
  {
    "text": "what kind of T's will make the function work so here's just a simple example of",
    "start": "2759710",
    "end": "2765549"
  },
  {
    "text": "calling a dysfunction for a range of integers because I 32 implements partial",
    "start": "2765549",
    "end": "2771500"
  },
  {
    "text": "old and implements copy so this would work if it wasn't the case the code would simply not compile and so as I",
    "start": "2771500",
    "end": "2779630"
  },
  {
    "text": "mentioned the basis of polymorphism in rust our traits so let me show you a quick example what that looks like so",
    "start": "2779630",
    "end": "2787579"
  },
  {
    "text": "here is kind of the classic school like example here is a trait called shape so",
    "start": "2787579",
    "end": "2793970"
  },
  {
    "text": "you can think of that as an interface it has two members one of them is a method",
    "start": "2793970",
    "end": "2799339"
  },
  {
    "text": "called area notice it has this a self thingy which means it's an instance",
    "start": "2799339",
    "end": "2805190"
  },
  {
    "text": "method and it's immutable so it shouldn't change anything in the object",
    "start": "2805190",
    "end": "2810829"
  },
  {
    "text": "same goes for s string so this returns F 32 which is like a flow and this returns the string so this is",
    "start": "2810829",
    "end": "2818030"
  },
  {
    "text": "just a trait this is just some definition and I can create as many implementations as I want for this",
    "start": "2818030",
    "end": "2824180"
  },
  {
    "text": "particular trait so this is how this might look like for several shapes so",
    "start": "2824180",
    "end": "2829250"
  },
  {
    "text": "here's the struct rectangle here is a struct ellipse here's a struct circle when we define them we don't specify any",
    "start": "2829250",
    "end": "2836660"
  },
  {
    "text": "trace for them and then we can start implementing them using the impel keyword so I'm saying impel shape that's",
    "start": "2836660",
    "end": "2844430"
  },
  {
    "text": "the trade for rectangle and now I'm must implement both functions otherwise my",
    "start": "2844430",
    "end": "2851660"
  },
  {
    "text": "class is sort of abstract and the compiler will fail to compile that so in this case for area I'm just calculating",
    "start": "2851660",
    "end": "2857150"
  },
  {
    "text": "the area for L string I'm using the format macro to kind of create a string",
    "start": "2857150",
    "end": "2863060"
  },
  {
    "text": "based on these formatting parameters and that's going to be returned notice again there is no semi semi colon so this is",
    "start": "2863060",
    "end": "2870170"
  },
  {
    "text": "an expression is just going to be returned from this function same idea for others so here's impulse shape for",
    "start": "2870170",
    "end": "2876260"
  },
  {
    "text": "circle exactly same idea nothing very special here and the same idea for ellipse so now I want to use that so I",
    "start": "2876260",
    "end": "2883490"
  },
  {
    "text": "can create a vector of shape so shape is our trait and so one of the ways to",
    "start": "2883490",
    "end": "2892010"
  },
  {
    "text": "specify that is using this dying keyword which is relatively new and again I want",
    "start": "2892010",
    "end": "2897200"
  },
  {
    "text": "that to be mutated because I want to add new shapes and so I have a rectangle here I'm going to push it and add it to",
    "start": "2897200",
    "end": "2904339"
  },
  {
    "text": "the shapes a vector same goes for a circle ellipse and so on and then I can just go ahead and iterate over them",
    "start": "2904339",
    "end": "2911060"
  },
  {
    "text": "using the for statement getting a reference to each of the shapes each of",
    "start": "2911060",
    "end": "2916670"
  },
  {
    "text": "these shapes is with the variable S and that's going to be the shape type and then then I'm just calling that",
    "start": "2916670",
    "end": "2922609"
  },
  {
    "text": "polymorphically using the virtual function mechanism behind the covers which is very similar in the way virtual",
    "start": "2922609",
    "end": "2929869"
  },
  {
    "text": "functions are implemented in C++ typically so this is just a simple example to show how how polymorphism",
    "start": "2929869",
    "end": "2937490"
  },
  {
    "text": "will look like in the classic object-oriented sense in rust",
    "start": "2937490",
    "end": "2943599"
  },
  {
    "start": "2945000",
    "end": "3135000"
  },
  {
    "text": "okay so what about external packages so we have when you're looking at a",
    "start": "2946109",
    "end": "2952210"
  },
  {
    "text": "language there's the language itself and there are the libraries so the libraries are super important in fact they're",
    "start": "2952210",
    "end": "2958510"
  },
  {
    "text": "usually much more it takes much more time to learn the libraries than the",
    "start": "2958510",
    "end": "2964569"
  },
  {
    "text": "actual language language is very kind of usually finite what libraries seem to be",
    "start": "2964569",
    "end": "2971260"
  },
  {
    "text": "kind of just continuing to grow from version to version and so in some cases",
    "start": "2971260",
    "end": "2978250"
  },
  {
    "text": "the standard libraries are just not enough you want to do something that is out of the scope of the standard",
    "start": "2978250",
    "end": "2983770"
  },
  {
    "text": "libraries maybe you want to manipulate images maybe you want to work with XML maybe it is part of standard way maybe",
    "start": "2983770",
    "end": "2990220"
  },
  {
    "text": "it's not usually at some point you need something else and so in C++ if you want",
    "start": "2990220",
    "end": "2995410"
  },
  {
    "text": "to get something else you have a very large ecosystem C++ is very relatively",
    "start": "2995410",
    "end": "3001789"
  },
  {
    "text": "stable and old language there are a lot of libraries in C++ and we know that we",
    "start": "3001789",
    "end": "3007619"
  },
  {
    "text": "have the boost libraries which sort of where the de facto standard for external",
    "start": "3007619",
    "end": "3012960"
  },
  {
    "text": "libraries because of that 13-year gap or C++ didn't move an inch and there are",
    "start": "3012960",
    "end": "3019289"
  },
  {
    "text": "many other libraries out there but how do you get them how do you know what's",
    "start": "3019289",
    "end": "3024480"
  },
  {
    "text": "out there and even if you know what's out there maybe you want to manipulate images there may be twenty-five",
    "start": "3024480",
    "end": "3031619"
  },
  {
    "text": "libraries manipulate the images which is better and so there's really no single repository that I know of in C++ so if",
    "start": "3031619",
    "end": "3039210"
  },
  {
    "text": "you're working in the Microsoft ecosystem you have something called new get and you get started its life for",
    "start": "3039210",
    "end": "3045420"
  },
  {
    "text": "dotnet when in fact nuga today supports c++ as well so you can search for packages on you get for c++ assuming of",
    "start": "3045420",
    "end": "3052410"
  },
  {
    "text": "course the author of that package actually listed that inside NuGet which",
    "start": "3052410",
    "end": "3057420"
  },
  {
    "text": "is of course nice but again what about other platforms what about lobbies that are not part of",
    "start": "3057420",
    "end": "3063299"
  },
  {
    "text": "nougat not everybody likes Microsoft and so you actually are left on your own you",
    "start": "3063299",
    "end": "3068789"
  },
  {
    "text": "can just go ahead and look over the web and just try to find something rust has",
    "start": "3068789",
    "end": "3075450"
  },
  {
    "text": "a fast growing ecosystem it's not as large as C++ for sure is relatively young language but it is",
    "start": "3075450",
    "end": "3082440"
  },
  {
    "text": "expanding rapidly there's a package manager which is built-in it's called cargo it's the one that's actually",
    "start": "3082440",
    "end": "3089520"
  },
  {
    "text": "usually building your application and it knows to do very a lot of things so you",
    "start": "3089520",
    "end": "3095369"
  },
  {
    "text": "typically don't initiate the Russ compiler directly you don't do that you",
    "start": "3095369",
    "end": "3101280"
  },
  {
    "text": "initialize a cargo you tell cargo here is my project please bill it and there is a file that tells the cargo package",
    "start": "3101280",
    "end": "3109230"
  },
  {
    "text": "manager everything he needs to know about your project and so there's cargo and you can use crates crates are the",
    "start": "3109230",
    "end": "3116910"
  },
  {
    "text": "packages in in rust and there's a repository for that called create dot IO",
    "start": "3116910",
    "end": "3122940"
  },
  {
    "text": "so that's an official repository where cargo actually looks for a package when",
    "start": "3122940",
    "end": "3128309"
  },
  {
    "text": "when you need one so let's say I want to do something that manipulates images so",
    "start": "3128309",
    "end": "3135390"
  },
  {
    "start": "3135000",
    "end": "3426000"
  },
  {
    "text": "here's the crate IO and I wanted to do something with the PNG files so I'm just",
    "start": "3135390",
    "end": "3140760"
  },
  {
    "text": "searching from PNG and I'm finding an exact match here for PNG if I go ahead I",
    "start": "3140760",
    "end": "3146130"
  },
  {
    "text": "can see here that this is the code I have to copy and paste into a file",
    "start": "3146130",
    "end": "3151290"
  },
  {
    "text": "called cargo Tamil which is the configuration file for cargo and once I",
    "start": "3151290",
    "end": "3157290"
  },
  {
    "text": "do that so here's my example here once I do that it goes and automatically brings",
    "start": "3157290",
    "end": "3165780"
  },
  {
    "text": "this package and all its dependencies from that creates our your repository",
    "start": "3165780",
    "end": "3171299"
  },
  {
    "text": "with the correct versions and then just build that as part of my project in this",
    "start": "3171299",
    "end": "3177240"
  },
  {
    "text": "case the demo I'm showing here is allowing me is something I wanted to do which is created an image of the",
    "start": "3177240",
    "end": "3184140"
  },
  {
    "text": "Mandelbrot set if you don't know what the marble said here is a very cool thing go to Wikipedia and read about it",
    "start": "3184140",
    "end": "3189660"
  },
  {
    "text": "so I wanted to do that in C++ and I want to do that in in rust and so here's the",
    "start": "3189660",
    "end": "3194880"
  },
  {
    "text": "code in C++ and so that the code itself is not very difficult it's a",
    "start": "3194880",
    "end": "3200220"
  },
  {
    "text": "single-threaded but the problem was I needed to use complex numbers because",
    "start": "3200220",
    "end": "3205710"
  },
  {
    "text": "this is required by the algorithm and need to use the PNG library so fortunately complex is part of the",
    "start": "3205710",
    "end": "3212339"
  },
  {
    "text": "standard in C++ that was easy enough just include complex and you're done",
    "start": "3212339",
    "end": "3217450"
  },
  {
    "text": "but PNG is not and so I actually went to do web and try to locate some PNG",
    "start": "3217450",
    "end": "3224109"
  },
  {
    "text": "library in C++ and of course I found many of them but had no idea what was good what was not so good",
    "start": "3224109",
    "end": "3230590"
  },
  {
    "text": "what was cross-platform what was not rust is cross-platform so maybe I want my pinja liable to be that so C++ is",
    "start": "3230590",
    "end": "3237700"
  },
  {
    "text": "closed fast I want to make the pinch library also use something which is cross-platform and so luckily in in fact",
    "start": "3237700",
    "end": "3245770"
  },
  {
    "text": "this is I think pure luck I found a library in you get a C+ slash library",
    "start": "3245770",
    "end": "3251380"
  },
  {
    "text": "that deals with PNG I'll actually didn't check to see whether it's cross platform or not this will cry me to do some extra",
    "start": "3251380",
    "end": "3257380"
  },
  {
    "text": "checks because it's not guaranteed any in any way but at least I found something which seems to work and so",
    "start": "3257380",
    "end": "3264100"
  },
  {
    "text": "I've used that library to create a PNG file here in the safe to bitmap function",
    "start": "3264100",
    "end": "3269980"
  },
  {
    "text": "by using the code provided by title but Ike but by the timer which again I feel",
    "start": "3269980",
    "end": "3276460"
  },
  {
    "text": "very lucky to to have made it so far but I have no idea of there any bugs here",
    "start": "3276460",
    "end": "3281770"
  },
  {
    "text": "people like this library or not I really have no idea not much at least so what",
    "start": "3281770",
    "end": "3287710"
  },
  {
    "text": "am I going to do in the rust case so in the rest case let's find that all I did",
    "start": "3287710",
    "end": "3293920"
  },
  {
    "text": "here I need I needed two things complex numbers and PNG support and so again I",
    "start": "3293920",
    "end": "3299230"
  },
  {
    "text": "search in crates I go for complex numbers and I found that there's this library that supports complex numbers I",
    "start": "3299230",
    "end": "3305140"
  },
  {
    "text": "just copied the version and here you can see that already cargo notice that there",
    "start": "3305140",
    "end": "3310450"
  },
  {
    "text": "is a newer version and it may be maybe I should consider upgrading so at this",
    "start": "3310450",
    "end": "3316030"
  },
  {
    "text": "point I decided not to upgrade I was just before the session so it's very not a very good idea to upset the demo gods",
    "start": "3316030",
    "end": "3323950"
  },
  {
    "text": "just before a talk and so here's the PNG function so PNG crate again once I build",
    "start": "3323950",
    "end": "3330460"
  },
  {
    "text": "that cargo automatically got the dependencies needed from from the web",
    "start": "3330460",
    "end": "3337300"
  },
  {
    "text": "from the crates are your repository and that was it and all that's left to do is",
    "start": "3337300",
    "end": "3343000"
  },
  {
    "text": "just use this functionality and so here's my flex numbers and creating some complex",
    "start": "3343000",
    "end": "3348849"
  },
  {
    "text": "numbers this is the build Mandelbrot function I'll make this code available later if you want to look at that but",
    "start": "3348849",
    "end": "3354549"
  },
  {
    "text": "basically once I have a proper image I have a save image function here and I'm",
    "start": "3354549",
    "end": "3361450"
  },
  {
    "text": "using some functions from the standard library to open the file and stuff like that but eventually I'm going to use",
    "start": "3361450",
    "end": "3367359"
  },
  {
    "text": "this encoder that is coming from that library provided by that create that I",
    "start": "3367359",
    "end": "3373930"
  },
  {
    "text": "downloaded and so there's a single repository and in fact there is actually a very good documentation that is also",
    "start": "3373930",
    "end": "3380980"
  },
  {
    "text": "true from the investment point of view so there's something here called documentation I can open that up and see",
    "start": "3380980",
    "end": "3387099"
  },
  {
    "text": "examples and all the types and methods or whatever is provided by that package",
    "start": "3387099",
    "end": "3392740"
  },
  {
    "text": "so I have a central location which is very easy to work with and don't need to",
    "start": "3392740",
    "end": "3398020"
  },
  {
    "text": "hunt for libraries all over the place this makes it just easier to work and I",
    "start": "3398020",
    "end": "3403329"
  },
  {
    "text": "feel safer working with something that is in great sorrow and see how it was downloaded 200,000 times that must be",
    "start": "3403329",
    "end": "3410859"
  },
  {
    "text": "good maybe someone actually is using that so maybe I should use it as well so I can I have more confidence with that",
    "start": "3410859",
    "end": "3418660"
  },
  {
    "text": "library and so I wish the plas class would have something like this as well",
    "start": "3418660",
    "end": "3425578"
  },
  {
    "text": "okay so let me sum things up a little bit and again maybe I was kind of",
    "start": "3425849",
    "end": "3433119"
  },
  {
    "start": "3426000",
    "end": "3524000"
  },
  {
    "text": "pounding in C++ too much that wasn't my intention in fact I had some",
    "start": "3433119",
    "end": "3438880"
  },
  {
    "text": "difficulties working with some of these demos when I was creating them because of that ownership model and boring and",
    "start": "3438880",
    "end": "3446200"
  },
  {
    "text": "stuff like that and and it does make the developer work a little bit harder but",
    "start": "3446200",
    "end": "3452470"
  },
  {
    "text": "this I think eventually it is better to work harder while you're developing and",
    "start": "3452470",
    "end": "3457599"
  },
  {
    "text": "have a code which hopefully is more robust and less likely to fail on",
    "start": "3457599",
    "end": "3463690"
  },
  {
    "text": "clients machine when you kind of deploying that all over the place so I think rust has its place and as always",
    "start": "3463690",
    "end": "3471400"
  },
  {
    "text": "if you want to experiment something just have to try it out and I urge you to just try it out there's really no harm",
    "start": "3471400",
    "end": "3478539"
  },
  {
    "text": "there are many languages coming all over the place and most of them are really just changing some syntax may be",
    "start": "3478539",
    "end": "3485349"
  },
  {
    "text": "adding some small idea but I think Russ is different it has really a good design",
    "start": "3485349",
    "end": "3490540"
  },
  {
    "text": "and it does provide something that other languages don't and so it's maybe it's",
    "start": "3490540",
    "end": "3496300"
  },
  {
    "text": "fighting C++ on the same space for native development performance but it",
    "start": "3496300",
    "end": "3502210"
  },
  {
    "text": "provides productivity so we'll see what that goes but I think it is an interesting thing to look at even if",
    "start": "3502210",
    "end": "3508150"
  },
  {
    "text": "you're not going to use rust you can get some ideas for your programming efforts",
    "start": "3508150",
    "end": "3515050"
  },
  {
    "text": "on in other languages I know I did thank you [Applause]",
    "start": "3515050",
    "end": "3526019"
  }
]