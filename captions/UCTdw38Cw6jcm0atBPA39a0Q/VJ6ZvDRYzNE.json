[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "and welcome my name is andreas fatigue and I work as an urban trainer",
    "start": "869",
    "end": "6180"
  },
  {
    "text": "consultant and occasional speaker and I'm also the creator of C++ insights",
    "start": "6180",
    "end": "12300"
  },
  {
    "text": "which is the topic of the talk today so I'm really happy to talk about the",
    "start": "12300",
    "end": "17310"
  },
  {
    "text": "program before we dive into the program or C++ let me tell you should story",
    "start": "17310",
    "end": "25500"
  },
  {
    "start": "19000",
    "end": "86000"
  },
  {
    "text": "about my name I'm doing this for quite a while now my last name is fetish and in German",
    "start": "25500",
    "end": "33329"
  },
  {
    "text": "that's an adjective in English it can be translated to finish finish or completed",
    "start": "33329",
    "end": "38840"
  },
  {
    "text": "for example there is also made aware about dad at NEC Oslo there is in region",
    "start": "38840",
    "end": "46260"
  },
  {
    "text": "spelling for it which is pronounced Fadi so I learned that I now also know that",
    "start": "46260",
    "end": "53309"
  },
  {
    "text": "be honest roadtrips is at least able to read German because he understood that",
    "start": "53309",
    "end": "58469"
  },
  {
    "text": "my last name means finish in German the",
    "start": "58469",
    "end": "65609"
  },
  {
    "text": "adjective is spelled with lower first letter because it's an adjective if I",
    "start": "65609",
    "end": "73679"
  },
  {
    "text": "type my name it starts with a capital F so I constantly fight with the spell",
    "start": "73679",
    "end": "79109"
  },
  {
    "text": "checker whether I'm right or the spell checker is right it's a fight I cannot win so anyway it's hard for the spell",
    "start": "79109",
    "end": "87090"
  },
  {
    "text": "checker we are here today because of C++ and this piece of code should be the",
    "start": "87090",
    "end": "95700"
  },
  {
    "text": "motivation or one motivation for why I created C++ in sides these are two lines",
    "start": "95700",
    "end": "102539"
  },
  {
    "text": "of code I have something here called my type I create an object out of it called I to appraise default initialization and",
    "start": "102539",
    "end": "111869"
  },
  {
    "text": "then I post increment I post",
    "start": "111869",
    "end": "117959"
  },
  {
    "text": "incrementing is maybe not as efficient as pre-incrementing and when I'm",
    "start": "117959",
    "end": "125520"
  },
  {
    "text": "teaching I try to encourage people to use pre in command as often as they can and post increment only if it's really",
    "start": "125520",
    "end": "132120"
  },
  {
    "text": "needed and then they ask questions especially if I'm lecturing what's the difference",
    "start": "132120",
    "end": "138819"
  },
  {
    "text": "in why just from this example you cannot",
    "start": "138819",
    "end": "144250"
  },
  {
    "text": "tell because my type can either be in a layer student was some other building",
    "start": "144250",
    "end": "150520"
  },
  {
    "text": "trivial type then it makes no real difference whether you do a post or pre increment my tap can also be a class",
    "start": "150520",
    "end": "158620"
  },
  {
    "text": "type which implements operate a plus plus and then it makes a difference because in that operator I have to",
    "start": "158620",
    "end": "165580"
  },
  {
    "text": "create a temporary and they have to create a deep copy of the object before if it's holding a large or huge stood",
    "start": "165580",
    "end": "172060"
  },
  {
    "text": "string it cost me memory it costs me time so it makes a difference but I cannot tell and",
    "start": "172060",
    "end": "179620"
  },
  {
    "text": "then students ask me where I cannot see it and then I say ok look at this it's I",
    "start": "179620",
    "end": "186850"
  },
  {
    "text": "dot operator plus plus in parens 0 0 is because it's the post increment the",
    "start": "186850",
    "end": "193630"
  },
  {
    "text": "increment comes without a parameter that's the only difference so if I can",
    "start": "193630",
    "end": "198880"
  },
  {
    "text": "show things to people I at least myself can teach it a little better and in my experience they understand it a little",
    "start": "198880",
    "end": "205359"
  },
  {
    "text": "better another example is this program short",
    "start": "205359",
    "end": "212350"
  },
  {
    "text": "program and implement a max function that returns to create a value of either",
    "start": "212350",
    "end": "217540"
  },
  {
    "text": "A or B and then prints that out with a printf question number one what is the",
    "start": "217540",
    "end": "227769"
  },
  {
    "text": "output of this program",
    "start": "227769",
    "end": "230579"
  },
  {
    "text": "guesses one exactly one is the output of",
    "start": "235350",
    "end": "241810"
  },
  {
    "text": "this program because we are looking at integer promotion and implicit casts we",
    "start": "241810",
    "end": "247570"
  },
  {
    "text": "cannot see them we use them often in C++ they are not necessarily bad in my",
    "start": "247570",
    "end": "253210"
  },
  {
    "text": "opinion but we cannot see them this is",
    "start": "253210",
    "end": "263290"
  },
  {
    "text": "the website of C++ insights you can use it either at a website or you can",
    "start": "263290",
    "end": "269650"
  },
  {
    "text": "install it locally and run it as a Linux or Mac command and I have here the",
    "start": "269650",
    "end": "275010"
  },
  {
    "text": "example from the slide and if I now transform it then we can see oh the code",
    "start": "275010",
    "end": "286120"
  },
  {
    "text": "the compiler sees or uses is slightly different there are implicit costs if you look at",
    "start": "286120",
    "end": "293080"
  },
  {
    "text": "a max function then we first can see a and B are promoted to signed int because",
    "start": "293080",
    "end": "301060"
  },
  {
    "text": "there is no comparison of two shorts in just a smallest type that's comparable so it will be promoted to rent but",
    "start": "301060",
    "end": "308740"
  },
  {
    "text": "that's not the part with which might sauce here there's another integer promotion the return value of Max which",
    "start": "308740",
    "end": "316360"
  },
  {
    "text": "is also short is also promote the TuneIn when it's passed to printf and then if",
    "start": "316360",
    "end": "322170"
  },
  {
    "text": "here another static cast casting my unsigned short which is a huge short",
    "start": "322170",
    "end": "327520"
  },
  {
    "text": "before into a sign short it makes it a negative one and that's why one in this",
    "start": "327520",
    "end": "335050"
  },
  {
    "text": "case is greater than 65 K it makes it",
    "start": "335050",
    "end": "341200"
  },
  {
    "text": "easier for me to explain things if I can show them then not just have to use",
    "start": "341200",
    "end": "347200"
  },
  {
    "text": "words I can show it I can show what's changing if I remove for example this unsigned",
    "start": "347200",
    "end": "354760"
  },
  {
    "text": "here first I get now a compiler warning and the cost here has gone away of",
    "start": "354760",
    "end": "364120"
  },
  {
    "text": "course there's no reason to cost it anymore",
    "start": "364120",
    "end": "367710"
  },
  {
    "text": "so these are one or two reasons why I created C++ insights the idea here is",
    "start": "371530",
    "end": "380630"
  },
  {
    "start": "378000",
    "end": "474000"
  },
  {
    "text": "that the tool should show what is going on under the hood what lovely sings the",
    "start": "380630",
    "end": "386210"
  },
  {
    "text": "compiler does for us just to make it easier for us to write code because the implicit costs I showed you earlier",
    "start": "386210",
    "end": "392889"
  },
  {
    "text": "they're not bad necessarily in that example they bidders but in other places",
    "start": "392889",
    "end": "399169"
  },
  {
    "text": "they spare us typing so in general they are good but making invisible things",
    "start": "399169",
    "end": "405020"
  },
  {
    "text": "visible can help when teaching the Eric goal is C++ insights should it generate",
    "start": "405020",
    "end": "413479"
  },
  {
    "text": "valid code if possible that's for two reasons one I can test valid code so I",
    "start": "413479",
    "end": "423590"
  },
  {
    "text": "can verify that the output at least compiles that's not total garbage mmm",
    "start": "423590",
    "end": "430729"
  },
  {
    "text": "there are still possibilities that it does not do the right thing but at least it compiles the second thing is",
    "start": "430729",
    "end": "437300"
  },
  {
    "text": "imaginary code is nice but I have a really huge imagination and it doesn't",
    "start": "437300",
    "end": "443900"
  },
  {
    "text": "help anybody I should write so I find novels but if I come up with something very made-up in",
    "start": "443900",
    "end": "451490"
  },
  {
    "text": "C++ that wouldn't help so that's why to create well it code out of it it means",
    "start": "451490",
    "end": "459080"
  },
  {
    "text": "also to create of course code that compiles the program itself it's it's open source can forked or submit github",
    "start": "459080",
    "end": "468139"
  },
  {
    "text": "pull requests and you've already seen the website while we are here I think",
    "start": "468139",
    "end": "477110"
  },
  {
    "start": "474000",
    "end": "682000"
  },
  {
    "text": "it's also words to talk a little bit about limitations of the program because if you're using it you I think",
    "start": "477110",
    "end": "483979"
  },
  {
    "text": "shall know about it C++ insights uses",
    "start": "483979",
    "end": "489020"
  },
  {
    "text": "the nice and lovely infrastructure of clang it's a clang tool but has the nice",
    "start": "489020",
    "end": "496550"
  },
  {
    "text": "side effect I do not need to parse C++ code myself",
    "start": "496550",
    "end": "503539"
  },
  {
    "text": "which is of course Trevor tasks but it was nice and I didn't have to learn it's",
    "start": "503539",
    "end": "509580"
  },
  {
    "text": "not so true at all that also implies",
    "start": "509580",
    "end": "514620"
  },
  {
    "text": "that everything it shows is how clang",
    "start": "514620",
    "end": "520709"
  },
  {
    "text": "does things GCC might do things a little different there's room in the standard",
    "start": "520709",
    "end": "526350"
  },
  {
    "text": "for interpretation they can be bright both the well at implementation but it may differ a little if you are using the",
    "start": "526350",
    "end": "534540"
  },
  {
    "text": "release version I don't know website or the command-line tool then this compiles on the Linux",
    "start": "534540",
    "end": "540180"
  },
  {
    "text": "against lips did C++ while the Mac version compiles against lip C++ looking",
    "start": "540180",
    "end": "547829"
  },
  {
    "text": "at certain things of this under library you will see differences there for example how they implemented stood",
    "start": "547829",
    "end": "554820"
  },
  {
    "text": "string or things like that so this build look slightly different still works and",
    "start": "554820",
    "end": "560370"
  },
  {
    "text": "so on but it's worth noting the the release",
    "start": "560370",
    "end": "566370"
  },
  {
    "text": "version as well as the web version are based on clang stable the latest clang",
    "start": "566370",
    "end": "573269"
  },
  {
    "text": "stable version available gets to half a stable codebase to compile C++ insights",
    "start": "573269",
    "end": "579959"
  },
  {
    "text": "again and to make issue reporting and resolving issues easier the source itself had tried to maintain in a way",
    "start": "579959",
    "end": "587279"
  },
  {
    "text": "that it's up to date with clang current so we already have patches to enable",
    "start": "587279",
    "end": "592880"
  },
  {
    "text": "clang 9 support which will bring us some of the C++ 20 features for lambdas for",
    "start": "592880",
    "end": "598230"
  },
  {
    "text": "example clang line is a little bit behind schedule right now it was",
    "start": "598230",
    "end": "603420"
  },
  {
    "text": "supposed to be released in end of August but I think we will have it in a couple",
    "start": "603420",
    "end": "608519"
  },
  {
    "text": "of days or so what C++ insights does is it uses the clang ast so the already",
    "start": "608519",
    "end": "618420"
  },
  {
    "text": "processed C++ program the abstract syntax tree clang generates and transforms that back into C++ code as",
    "start": "618420",
    "end": "627959"
  },
  {
    "text": "this ast is generated at an early stage in the front-end you will not see any effects of",
    "start": "627959",
    "end": "634120"
  },
  {
    "text": "optimization so it doesn't make a difference where are you passing - oh cero or - all three - the program",
    "start": "634120",
    "end": "641860"
  },
  {
    "text": "because most of these optimizations happen afterwards you will however see",
    "start": "641860",
    "end": "648070"
  },
  {
    "text": "simple things you're in in some cases constraints peer evaluation if it's possible in an early stage are a simple",
    "start": "648070",
    "end": "656360"
  },
  {
    "text": "sayings trivial things like building the sum of three plus four is something you'd affront and thus while walking",
    "start": "656360",
    "end": "662600"
  },
  {
    "text": "through the code basically so these are",
    "start": "662600",
    "end": "668270"
  },
  {
    "text": "the things when talking about",
    "start": "668270",
    "end": "675410"
  },
  {
    "text": "limitations there is something big in C++ which creates some heart sings",
    "start": "675410",
    "end": "683780"
  },
  {
    "start": "682000",
    "end": "906000"
  },
  {
    "text": "and that's templates you will see also template instantiations in C++ in sites",
    "start": "683780",
    "end": "691220"
  },
  {
    "text": "so you get a better claims on what types are what instantiation of a function are",
    "start": "691220",
    "end": "697480"
  },
  {
    "text": "instantiated in the compiler that does not necessarily mean that all of them survive until the end of the compile",
    "start": "697480",
    "end": "704810"
  },
  {
    "text": "stage the linkers and optimizes are able to throw things away but they are created at some point in my experience",
    "start": "704810",
    "end": "713750"
  },
  {
    "text": "clang is so smart that it does not bother to create template instantiations four types that are not used so that's a",
    "start": "713750",
    "end": "721730"
  },
  {
    "text": "nice effect you can see there which type is used to which type is not used and what templates bringing which makes it",
    "start": "721730",
    "end": "730460"
  },
  {
    "text": "hard to generate correct code here if you look at this example I have here this function template called func and",
    "start": "730460",
    "end": "738250"
  },
  {
    "text": "it has one template parameter and type T and after they add I declare a class",
    "start": "738250",
    "end": "743720"
  },
  {
    "text": "demo and then in main I call func with demo pasts parameter if you look at",
    "start": "743720",
    "end": "755570"
  },
  {
    "text": "this and C++ insides",
    "start": "755570",
    "end": "758890"
  },
  {
    "text": "and if I do transform this then we can see here the resulting general template",
    "start": "767400",
    "end": "775950"
  },
  {
    "text": "instantiation of funk for demo here",
    "start": "775950",
    "end": "781560"
  },
  {
    "text": "after my class demo and that's the reason why this code would not compile that's the reason why",
    "start": "781560",
    "end": "787560"
  },
  {
    "text": "it's guarded by this if deaf insides use template so you can define it if you",
    "start": "787560",
    "end": "793050"
  },
  {
    "text": "like to see what's going on but the default it's disabled and the reason is when this template instantiation is",
    "start": "793050",
    "end": "800730"
  },
  {
    "text": "parsed by the compiler after this transformation there is no class demo",
    "start": "800730",
    "end": "807089"
  },
  {
    "text": "there is no type demo in the type system because demo is declared afterwards okay",
    "start": "807089",
    "end": "813660"
  },
  {
    "text": "so without this if they've guard that code would not compile I can of course",
    "start": "813660",
    "end": "819450"
  },
  {
    "text": "by hand move that class team around put it before the function and then it would",
    "start": "819450",
    "end": "827310"
  },
  {
    "text": "compile the reason is that I'm really easy on generating this template",
    "start": "827310",
    "end": "833790"
  },
  {
    "text": "instantiation they are inserted directly after the primary template and that may",
    "start": "833790",
    "end": "840029"
  },
  {
    "text": "be the wrong point so one possibility would be trying to figure out where is",
    "start": "840029",
    "end": "847920"
  },
  {
    "text": "the right place to place it I haven't checked that deeply there are other",
    "start": "847920",
    "end": "855420"
  },
  {
    "text": "things so you cannot have a template specialist specialization in a class so",
    "start": "855420",
    "end": "864959"
  },
  {
    "text": "I have had to move things out and I haven't done this yet so it's just instantiating at the point where the",
    "start": "864959",
    "end": "872430"
  },
  {
    "text": "primary template is declared",
    "start": "872430",
    "end": "875810"
  },
  {
    "text": "the project itself it's still under active development so not all statements",
    "start": "885449",
    "end": "890560"
  },
  {
    "text": "are transformed yet there is a pull request or not pull request unfortunately not an issue open for",
    "start": "890560",
    "end": "897370"
  },
  {
    "text": "supporting C++ 20s cortines if you have inside so experience without I'm happy",
    "start": "897370",
    "end": "904089"
  },
  {
    "text": "if you can share them now I said that C++ incites uses the abstract syntax",
    "start": "904089",
    "end": "911079"
  },
  {
    "start": "906000",
    "end": "990000"
  },
  {
    "text": "tree of the compiler and I like to give you a feeling what's there is that's",
    "start": "911079",
    "end": "917860"
  },
  {
    "text": "part of an AST of a C++ program and it's",
    "start": "917860",
    "end": "923889"
  },
  {
    "text": "only the last fragment maybe 1% of the whole aced he floating over mine screen",
    "start": "923889",
    "end": "930069"
  },
  {
    "text": "when I'm dumping this ast and the reason for that is that this program uses parts",
    "start": "930069",
    "end": "938199"
  },
  {
    "text": "of the standard library and it involves a lot of template instantiations and Arliss inks created in the background so",
    "start": "938199",
    "end": "945550"
  },
  {
    "text": "the AST output is very large if you submit an issue your port for C++",
    "start": "945550",
    "end": "950769"
  },
  {
    "text": "insights I'm very happy if you can't avoid using the standard library not because I dislike it but it makes it",
    "start": "950769",
    "end": "956800"
  },
  {
    "text": "really hard to see through all that sings what's the C++ code behind this",
    "start": "956800",
    "end": "962949"
  },
  {
    "text": "ast what's roughly the program that this ast models sorry",
    "start": "962949",
    "end": "973980"
  },
  {
    "text": "yes its main saying see out hello C++ so",
    "start": "974089",
    "end": "982339"
  },
  {
    "text": "over the time my crew to being more fluently in reading the ast output one",
    "start": "982339",
    "end": "991470"
  },
  {
    "text": "word about this talk as we progress it's a bit special because I today try to",
    "start": "991470",
    "end": "997740"
  },
  {
    "text": "reach two parties one our teachers because one aspect of creating C++",
    "start": "997740",
    "end": "1004940"
  },
  {
    "text": "insights was for teaching and still is for teaching so I will show you some examples in C++ which I'm really sure",
    "start": "1004940",
    "end": "1013850"
  },
  {
    "text": "that you're already familiar with so you know what they are doing and so on the purpose of that is just to give you some",
    "start": "1013850",
    "end": "1021649"
  },
  {
    "text": "glimpse into what is C++ insights able to show you with things you already know",
    "start": "1021649",
    "end": "1027910"
  },
  {
    "text": "the other part is to address a little bit the interest of experts so I have",
    "start": "1027910",
    "end": "1033798"
  },
  {
    "text": "some C++ 17 some C++ 20 things in there which I assume not everybody is already",
    "start": "1033799",
    "end": "1040280"
  },
  {
    "text": "familiar with starting with something more or less trivial I stumbled over",
    "start": "1040280",
    "end": "1048110"
  },
  {
    "start": "1043000",
    "end": "1487000"
  },
  {
    "text": "this during the development because it worked just out of the box when I",
    "start": "1048110",
    "end": "1053990"
  },
  {
    "text": "implemented something and that's default arguments I believe everybody knows what",
    "start": "1053990",
    "end": "1060679"
  },
  {
    "text": "default arguments do in this case I have this function here func which has one parameter X and it has a",
    "start": "1060679",
    "end": "1067730"
  },
  {
    "text": "default argument 23 so whenever I call thunk without an argument X is 23 but",
    "start": "1067730",
    "end": "1075799"
  },
  {
    "text": "how does this work I mean for us it's easy as programmers developers for a",
    "start": "1075799",
    "end": "1086780"
  },
  {
    "text": "compiler and never question that it's just syntactic sugar saying hey you gave",
    "start": "1086780",
    "end": "1095660"
  },
  {
    "text": "me a function with a default argument the value is 23 whenever I approach a",
    "start": "1095660",
    "end": "1102409"
  },
  {
    "text": "function of that type without an argument I put in 23 as a parameter so functions with",
    "start": "1102409",
    "end": "1112500"
  },
  {
    "text": "default arguments are not so special at least if you are not a compiler implementer",
    "start": "1112500",
    "end": "1119270"
  },
  {
    "text": "in C++ today we have a lot of different ways to initialize an object or type",
    "start": "1126930",
    "end": "1135830"
  },
  {
    "text": "there is an entire one or one and a half hour talk by Timo dimmler just",
    "start": "1135830",
    "end": "1142400"
  },
  {
    "text": "explaining the different ways of initializing something in C++ it's an excellent talk if you haven't seen it or",
    "start": "1142400",
    "end": "1149280"
  },
  {
    "text": "heard about it go check it out on YouTube he gave it a sing at meeting C++ last year and at CPP on seed this year",
    "start": "1149280",
    "end": "1156950"
  },
  {
    "text": "I'm not talking the rest of this talk about initialization it's just a small",
    "start": "1156950",
    "end": "1162570"
  },
  {
    "text": "part here of an example of four char",
    "start": "1162570",
    "end": "1167640"
  },
  {
    "text": "array of size five and four different ways initializing them the first one we",
    "start": "1167640",
    "end": "1174600"
  },
  {
    "text": "had all the time it's an uninitialized array doing nothing it's always nice",
    "start": "1174600",
    "end": "1183030"
  },
  {
    "text": "that we can have two things performance-critical and we know what we are doing I prefer not to have",
    "start": "1183030",
    "end": "1188790"
  },
  {
    "text": "uninitialized variables anyway the second uses c++ Elevens prays the",
    "start": "1188790",
    "end": "1196770"
  },
  {
    "text": "initialization requesting a zero or default initialization now when teaching",
    "start": "1196770",
    "end": "1202200"
  },
  {
    "text": "that even to experience c++ 98 programmers some of them say well i like",
    "start": "1202200",
    "end": "1211440"
  },
  {
    "text": "to see the value that thing is initialized with so I prefer version",
    "start": "1211440",
    "end": "1216809"
  },
  {
    "text": "number 3 stating explicitly I'm initializing this with 0 I don't know if",
    "start": "1216809",
    "end": "1224760"
  },
  {
    "text": "that ever happened to you or if you have a sore thumb singing 1/4 vu and there's a not a party saying well we are not",
    "start": "1224760",
    "end": "1232710"
  },
  {
    "text": "initializing sings to 0 we chose 77 so",
    "start": "1232710",
    "end": "1237750"
  },
  {
    "text": "that's way number 4 let's have a look",
    "start": "1237750",
    "end": "1243740"
  },
  {
    "text": "if I transform this then of course we see a not nothing it's uninitialized to",
    "start": "1247900",
    "end": "1258700"
  },
  {
    "text": "initializes all elements of that array with zero or an equivalent to zero",
    "start": "1259210",
    "end": "1264740"
  },
  {
    "text": "because we are talking about the char here that's nice it do not need to know",
    "start": "1264740",
    "end": "1269809"
  },
  {
    "text": "- sighs I don't know how often I had to type a mem set in the past - to",
    "start": "1269809",
    "end": "1276410"
  },
  {
    "text": "initialize and such things so it's really nice to be able to just put in",
    "start": "1276410",
    "end": "1282650"
  },
  {
    "text": "there empty curly braces then version number three it looks a little bit",
    "start": "1282650",
    "end": "1287690"
  },
  {
    "text": "different because the first zero is different than yeras they're all result",
    "start": "1287690",
    "end": "1294860"
  },
  {
    "text": "to be zero but the first one we can see is the integer zero we put in there to initialize what some people think the",
    "start": "1294860",
    "end": "1304160"
  },
  {
    "text": "whole array with but here we can see only the first element is initialized with this zero and the rest is filled",
    "start": "1304160",
    "end": "1311720"
  },
  {
    "text": "with the zero or default initialization of that type and that's the reason why",
    "start": "1311720",
    "end": "1318890"
  },
  {
    "text": "of course number four does not turn out how it's supposed to be because as soon",
    "start": "1318890",
    "end": "1325220"
  },
  {
    "text": "as we specify a value we initialize only dead element the first element of that",
    "start": "1325220",
    "end": "1331370"
  },
  {
    "text": "array so it's not hard if you think about it because how would you otherwise",
    "start": "1331370",
    "end": "1337390"
  },
  {
    "text": "initialize an array with values but it sometimes confuses people and that it",
    "start": "1337390",
    "end": "1343910"
  },
  {
    "text": "helped me in the past to show and prove to them why it is different",
    "start": "1343910",
    "end": "1350770"
  },
  {
    "text": "yes",
    "start": "1353980",
    "end": "1356130"
  },
  {
    "text": "it's okay the question is do the curly praises also burbot the narrowing",
    "start": "1387950",
    "end": "1395250"
  },
  {
    "text": "conversions which they usually do and what's happening if I putting a larger well you're there then the the answer is",
    "start": "1395250",
    "end": "1403470"
  },
  {
    "text": "it will fail so because it's it's in this early stage of the the front-end I",
    "start": "1403470",
    "end": "1411679"
  },
  {
    "text": "only can transfer form compiling code in C++ inside so I don't know whether the",
    "start": "1411679",
    "end": "1417780"
  },
  {
    "text": "question was about language or about the tool the language will not allow it and the compiler will fail early so I cannot",
    "start": "1417780",
    "end": "1425250"
  },
  {
    "text": "do a transformation and it shows the right thing it does nothing",
    "start": "1425250",
    "end": "1432980"
  },
  {
    "text": "yeah it did to be fair that the compiler gives you a warning about that yeah I",
    "start": "1447680",
    "end": "1454620"
  },
  {
    "text": "also print out the compiler warnings so it's the same thing you would get if you just compile this example with GCC or",
    "start": "1454620",
    "end": "1461550"
  },
  {
    "text": "clang and I'm also not sure if I would",
    "start": "1461550",
    "end": "1468390"
  },
  {
    "text": "be able to transform this what should I show there did the error message just",
    "start": "1468390",
    "end": "1473940"
  },
  {
    "text": "comment okay okay so alright okay you",
    "start": "1473940",
    "end": "1480960"
  },
  {
    "text": "couldn't see that perfect another thing",
    "start": "1480960",
    "end": "1489050"
  },
  {
    "start": "1487000",
    "end": "1649000"
  },
  {
    "text": "because I teach a lot of classes to people who would like to learn C++ 11 14",
    "start": "1489050",
    "end": "1497460"
  },
  {
    "text": "17 we got this new feature in class member initialization if you are not a",
    "start": "1497460",
    "end": "1503490"
  },
  {
    "text": "small example a class called init which has a default constructor and three",
    "start": "1503490",
    "end": "1510210"
  },
  {
    "text": "members one end stood vector of end and stood string in my default constructor",
    "start": "1510210",
    "end": "1518730"
  },
  {
    "text": "I'm initializing the nth member i-29 and then I'm using in class member",
    "start": "1518730",
    "end": "1524280"
  },
  {
    "text": "initialization later to initialize all the three members to some values I like",
    "start": "1524280",
    "end": "1530760"
  },
  {
    "text": "0 1 2 3 and hello",
    "start": "1530760",
    "end": "1535760"
  },
  {
    "text": "and if I do try transform this then we can see you what magic happens here it's",
    "start": "1543710",
    "end": "1549150"
  },
  {
    "text": "once again just syntactic sugar they compile it as fuss so the inline initialization values we",
    "start": "1549150",
    "end": "1558930"
  },
  {
    "text": "provided the compiler chest moves into the default constructor and it's",
    "start": "1558930",
    "end": "1564420"
  },
  {
    "text": "initializing the stood vector with one two three and my stood string with hello",
    "start": "1564420",
    "end": "1569660"
  },
  {
    "text": "so what's happening there is nothing special we it's the code we can write ourselves but so we cannot forget it",
    "start": "1569660",
    "end": "1578300"
  },
  {
    "text": "and one question sometimes comes up is what happens to I how often is I",
    "start": "1578300",
    "end": "1585480"
  },
  {
    "text": "initialized and the answer is just once either with the value I provided in the",
    "start": "1585480",
    "end": "1591750"
  },
  {
    "text": "default constructor or any other constructor if you're looking in another constructors in my case 9 and if I would",
    "start": "1591750",
    "end": "1599460"
  },
  {
    "text": "totally skip providing that value then the default would take place in its 0 so",
    "start": "1599460",
    "end": "1606240"
  },
  {
    "text": "there is no double initialization or things like that it's either the value I provided as a",
    "start": "1606240",
    "end": "1613440"
  },
  {
    "text": "default or the specific value I provide in a constructor and that's one of the",
    "start": "1613440",
    "end": "1620040"
  },
  {
    "text": "parts where I experienced it it helps that people can play around with these",
    "start": "1620040",
    "end": "1625260"
  },
  {
    "text": "things they can fill in values to can take off values and they see how it",
    "start": "1625260",
    "end": "1631250"
  },
  {
    "text": "results in their output",
    "start": "1631250",
    "end": "1634970"
  },
  {
    "start": "1649000",
    "end": "1991000"
  },
  {
    "text": "another big thing in C++ these days are lambdas so here I have an example I've",
    "start": "1650000",
    "end": "1657090"
  },
  {
    "text": "showed in my talk yesterday already have a comp char array named hello is the",
    "start": "1657090",
    "end": "1665790"
  },
  {
    "text": "string how I am to see tech town in it and then I have a lambda which captures",
    "start": "1665790",
    "end": "1671100"
  },
  {
    "text": "by reference they are string and prints it out in a printf let's have a look what the",
    "start": "1671100",
    "end": "1678090"
  },
  {
    "text": "compiler generates for us for this lambda what is the lambda R in C++ we",
    "start": "1678090",
    "end": "1690990"
  },
  {
    "text": "can't see some side-effect of C++ insides it tells you the size of the",
    "start": "1690990",
    "end": "1697950"
  },
  {
    "text": "array because it's known at this moment so even if you haven't specified it at the right if the left then our lambda is",
    "start": "1697950",
    "end": "1706830"
  },
  {
    "text": "in fact the Clair's the closure type of lambda is a class and the compiler",
    "start": "1706830",
    "end": "1712500"
  },
  {
    "text": "generates this class for us and it takes care of all the captures because the",
    "start": "1712500",
    "end": "1717750"
  },
  {
    "text": "captures become members in that class that's why I have here and count jar a",
    "start": "1717750",
    "end": "1725310"
  },
  {
    "text": "of references of size 19 to capture the",
    "start": "1725310",
    "end": "1730470"
  },
  {
    "text": "char string from outside next to that I",
    "start": "1730470",
    "end": "1737870"
  },
  {
    "text": "have this member function which is a call operator and this collaborator",
    "start": "1737870",
    "end": "1744810"
  },
  {
    "text": "contains the body I wrote for the lambda here so it's just moved to here into the",
    "start": "1744810",
    "end": "1756240"
  },
  {
    "text": "call operator and this call operators then called or invoked later when I",
    "start": "1756240",
    "end": "1767010"
  },
  {
    "text": "invoke the lambda",
    "start": "1767010",
    "end": "1770840"
  },
  {
    "text": "if I change my capture by reference for example to capture by copy then we can",
    "start": "1773760",
    "end": "1782920"
  },
  {
    "text": "see that now I have a char a Const our array of size 19 and no longer an array",
    "start": "1782920",
    "end": "1789280"
  },
  {
    "text": "of references and if I say now that this",
    "start": "1789280",
    "end": "1799330"
  },
  {
    "text": "lambda should be able to alter that captured string if a close look on the",
    "start": "1799330",
    "end": "1805660"
  },
  {
    "text": "call operator if I'm saying that that thing is mutable the count specifier of",
    "start": "1805660",
    "end": "1811960"
  },
  {
    "text": "the call operator goes away so that's how things work there I really like it",
    "start": "1811960",
    "end": "1819040"
  },
  {
    "text": "because it uses facilities already available in the language and just with",
    "start": "1819040",
    "end": "1825100"
  },
  {
    "text": "some fantastic sugar and probably a lot of implementation effort in the compiler side we can use these nice things and",
    "start": "1825100",
    "end": "1832500"
  },
  {
    "text": "create existing code sure yes",
    "start": "1832500",
    "end": "1844320"
  },
  {
    "text": "sure remind me to not do it twice because I have a slide later but it's an",
    "start": "1847360",
    "end": "1852800"
  },
  {
    "text": "excellent point here as well with C++ 17 we got implicitly context parameters as",
    "start": "1852800",
    "end": "1862700"
  },
  {
    "text": "a language feature and that means that at least for my understanding in the",
    "start": "1862700",
    "end": "1868850"
  },
  {
    "text": "clang implementation whenever they see a collaborator in C++ 17 mode while",
    "start": "1868850",
    "end": "1874370"
  },
  {
    "text": "parsing your C++ code they add context / to it because it can't be context / and",
    "start": "1874370",
    "end": "1880400"
  },
  {
    "text": "later on after processing or after having generated a ast doing the real",
    "start": "1880400",
    "end": "1886670"
  },
  {
    "text": "compiled stuff they evaluating the body of the call operator checking whether or",
    "start": "1886670",
    "end": "1892910"
  },
  {
    "text": "not it satisfies the requirements of context / if it turns out that yes it",
    "start": "1892910",
    "end": "1901130"
  },
  {
    "text": "satisfies the requirements of context Perkins extra stays if it turns out that no there is something not allowed in",
    "start": "1901130",
    "end": "1909410"
  },
  {
    "text": "there for context / they just take away the context / specify and evaluate the",
    "start": "1909410",
    "end": "1914420"
  },
  {
    "text": "function at compile time because it makes no sense to promote that to the user because we didn't explicitly",
    "start": "1914420",
    "end": "1919720"
  },
  {
    "text": "specify that it should be context / so they have the Liberty to do it either way and that's why at this stage I",
    "start": "1919720",
    "end": "1926570"
  },
  {
    "text": "cannot tell you reliably where I at sing is context for not what you will see",
    "start": "1926570",
    "end": "1933260"
  },
  {
    "text": "there if I switch back from C++ 20 to let's say C + + 14 mode the context",
    "start": "1933260",
    "end": "1941030"
  },
  {
    "text": "prayers gone because to compile and no longer inserts it so I've tried to show only the things to paste he gives me I",
    "start": "1941030",
    "end": "1948380"
  },
  {
    "text": "have to sketch some things up for example name of the lander compiler does",
    "start": "1948380",
    "end": "1953510"
  },
  {
    "text": "not need to generate one for it internally so I make one up but in general I try to stick really close to",
    "start": "1953510",
    "end": "1960890"
  },
  {
    "text": "the ast and that's why this is in context but to give you a clue it can be",
    "start": "1960890",
    "end": "1965900"
  },
  {
    "text": "context / but sorry I cannot tell you for sure that it is I haven't found a way maybe to trigger the the evaluation",
    "start": "1965900",
    "end": "1974150"
  },
  {
    "text": "machinery to get to result earlier",
    "start": "1974150",
    "end": "1978970"
  },
  {
    "start": "1991000",
    "end": "2318000"
  },
  {
    "text": "and are a small example I have this main function here and it creates a variable",
    "start": "1991229",
    "end": "2000329"
  },
  {
    "text": "named collection out of a type which seems to be a class template X instantiated with int and then I have",
    "start": "2000329",
    "end": "2008159"
  },
  {
    "text": "three different for loops range based for loops which iterate over that collection this code compiles my",
    "start": "2008159",
    "end": "2019559"
  },
  {
    "text": "question to you is which of these three range space for loops are correct in the",
    "start": "2019559",
    "end": "2027449"
  },
  {
    "text": "sense that they are doing what they are supposed to do just give me a number from 0 to 3 you're saying to if any are",
    "start": "2027449",
    "end": "2043259"
  },
  {
    "text": "a number then to",
    "start": "2043259",
    "end": "2046009"
  },
  {
    "text": "one two is the correct answer let's have a look at this so the first",
    "start": "2051720",
    "end": "2059579"
  },
  {
    "text": "range based full loop says that the range initializer is of type Const X",
    "start": "2059579",
    "end": "2067460"
  },
  {
    "text": "Const int and this is not the type we used before when we declared collection",
    "start": "2067460",
    "end": "2074118"
  },
  {
    "text": "so it is obviously wrong the second one",
    "start": "2074119",
    "end": "2079618"
  },
  {
    "text": "and Yarra hand uses Const X int that's exactly the type as we given it before",
    "start": "2079619",
    "end": "2086638"
  },
  {
    "text": "when we declared collection so that one is correct and the end we have the third",
    "start": "2086639",
    "end": "2092368"
  },
  {
    "text": "version which uses auto and of course order does the right sing so full of",
    "start": "2092369",
    "end": "2097770"
  },
  {
    "text": "number two and three are correct one is the odd one do we all agree well boy you",
    "start": "2097770",
    "end": "2107160"
  },
  {
    "text": "should have asked me for the documentation about that sing",
    "start": "2107160",
    "end": "2111588"
  },
  {
    "text": "so this is the code and if I scroll down",
    "start": "2117360",
    "end": "2123040"
  },
  {
    "text": "here then at the bottom I will find my",
    "start": "2123040",
    "end": "2128350"
  },
  {
    "text": "range bass for loops so first I have the",
    "start": "2128350",
    "end": "2134170"
  },
  {
    "text": "declaration of my variable collection and then we can see here this opening and closing scope that's a range bass",
    "start": "2134170",
    "end": "2140440"
  },
  {
    "text": "full loop range bass foolish generate a new scope for us and in the odd state the clearway range variable begin and",
    "start": "2140440",
    "end": "2146260"
  },
  {
    "text": "end and then they use a regular for to check Vera we already reached the end",
    "start": "2146260",
    "end": "2152980"
  },
  {
    "text": "and if not of course the body is called and then they use the pre increment operator to increment begin which takes",
    "start": "2152980",
    "end": "2160660"
  },
  {
    "text": "a lot of performance issues from us this",
    "start": "2160660",
    "end": "2165940"
  },
  {
    "text": "our variable X which we requested in the range space for loop and it's",
    "start": "2165940",
    "end": "2171220"
  },
  {
    "text": "initialized with calling begin and for that the dereference operator looks good",
    "start": "2171220",
    "end": "2178770"
  },
  {
    "text": "doesn't it let's have a look at range base full of number two it's the same",
    "start": "2178770",
    "end": "2185760"
  },
  {
    "text": "except that for the initialization we",
    "start": "2185760",
    "end": "2191500"
  },
  {
    "text": "get here what appears to be a constructor call so it still begin one",
    "start": "2191500",
    "end": "2197890"
  },
  {
    "text": "that operator star so it still begin you referenced but then there's a",
    "start": "2197890",
    "end": "2205660"
  },
  {
    "text": "constructor happening creating that object for us let's have a look at the",
    "start": "2205660",
    "end": "2213700"
  },
  {
    "text": "auto case Auto does it the same way as",
    "start": "2213700",
    "end": "2219880"
  },
  {
    "text": "our first range space full of which appeared so odd because we specified",
    "start": "2219880",
    "end": "2227860"
  },
  {
    "text": "that axis of different type because of the Const then how we initially declared",
    "start": "2227860",
    "end": "2233290"
  },
  {
    "text": "collection and why is that because of",
    "start": "2233290",
    "end": "2239290"
  },
  {
    "text": "that because the iterator which is returned from X is of type X Const",
    "start": "2239290",
    "end": "2245760"
  },
  {
    "text": "whatever type you passed in first so the iterator which is returned for",
    "start": "2245760",
    "end": "2252430"
  },
  {
    "text": "the range space for loop from that type X is not the original type X it's a",
    "start": "2252430",
    "end": "2258579"
  },
  {
    "text": "Const version of that original type Garlin template parameter and why I'm",
    "start": "2258579",
    "end": "2266289"
  },
  {
    "text": "telling you this who knows good map yeah the key of stood",
    "start": "2266289",
    "end": "2275980"
  },
  {
    "text": "map is Const however when you are creating a stood map we are saying",
    "start": "2275980",
    "end": "2281769"
  },
  {
    "text": "something like int comma stood string if you're iterating over a stood map then",
    "start": "2281769",
    "end": "2288910"
  },
  {
    "text": "this is exactly the trap we can run into because what's returned there has a",
    "start": "2288910",
    "end": "2293950"
  },
  {
    "text": "constant key so the first element becomes constant and that's why some of",
    "start": "2293950",
    "end": "2300400"
  },
  {
    "text": "us that why is that you should always prefer Const here because it does the right thing by default or ask and look",
    "start": "2300400",
    "end": "2307480"
  },
  {
    "text": "at the documentation",
    "start": "2307480",
    "end": "2310349"
  },
  {
    "start": "2318000",
    "end": "2530000"
  },
  {
    "text": "while we're talking about range space for loops are really like them and I'm super happy about them and try to apply",
    "start": "2318960",
    "end": "2325120"
  },
  {
    "text": "them wherever I can and some things that make me sad are things like that here a",
    "start": "2325120",
    "end": "2332140"
  },
  {
    "text": "half example we have a stood vector and I'd like to iterate over that vector and",
    "start": "2332140",
    "end": "2337600"
  },
  {
    "text": "print the elements out but to get out with that I like to print the index at",
    "start": "2337600",
    "end": "2343090"
  },
  {
    "text": "which that element is in a vector and doing that and need some help a variable",
    "start": "2343090",
    "end": "2349810"
  },
  {
    "text": "ID X to have the index countered and incremented and that wearable ID X now",
    "start": "2349810",
    "end": "2356680"
  },
  {
    "text": "is outside of the range space for loop and with that it's leaking in the adjacent scope and it isn't so beautiful",
    "start": "2356680",
    "end": "2365980"
  },
  {
    "text": "anymore it's one thing about arranged based full loops that everything is tightly together and for that case I have to do",
    "start": "2365980",
    "end": "2374320"
  },
  {
    "text": "something different well I can use this to the algorithm for example for each",
    "start": "2374320",
    "end": "2379570"
  },
  {
    "text": "pass in a Lam they are doing the out sing but then still the ITX variable has",
    "start": "2379570",
    "end": "2385870"
  },
  {
    "text": "to be somewhere so same pain at least if you like to see the code like me the",
    "start": "2385870",
    "end": "2393850"
  },
  {
    "text": "good message is in C++ 20 we will have range based foo loops with initializes",
    "start": "2393850",
    "end": "2401440"
  },
  {
    "text": "which enables me to write code like this and now can say for paren open so I see",
    "start": "2401440",
    "end": "2409660"
  },
  {
    "text": "RDX semicolon and then the rest of the former range based for loop and with",
    "start": "2409660",
    "end": "2415300"
  },
  {
    "text": "that it's again tightly coupled if you look at what's happening there and C++",
    "start": "2415300",
    "end": "2422200"
  },
  {
    "text": "insides it's again surprisingly easy",
    "start": "2422200",
    "end": "2427349"
  },
  {
    "text": "here we have the opening scope of the range space full loop and after that our",
    "start": "2428310",
    "end": "2433990"
  },
  {
    "text": "variable is 2 cleared so it's only visible in that scope and will be destroyed later yes",
    "start": "2433990",
    "end": "2441809"
  },
  {
    "text": "so the question is can I have an arbitrary number of initializations like",
    "start": "2443449",
    "end": "2450199"
  },
  {
    "text": "like this that was not possible before",
    "start": "2452869",
    "end": "2460829"
  },
  {
    "text": "and the language rules didn't change there so it's it's not what you are so the question is if I get it right can",
    "start": "2460829",
    "end": "2467880"
  },
  {
    "text": "can I say something like this stead right and to my knowledge that wasn't",
    "start": "2467880",
    "end": "2473369"
  },
  {
    "text": "possible ever before in a usual four loop the compiler says that with this",
    "start": "2473369",
    "end": "2479219"
  },
  {
    "text": "comma separation there is only one declaration allowed so that the first type has to be you cannot have aa you're",
    "start": "2479219",
    "end": "2488459"
  },
  {
    "text": "asking about multiple semicolons and didn't get that no you cannot have that so it's once again a little syntactic",
    "start": "2488459",
    "end": "2496409"
  },
  {
    "text": "sugar and if I took it right from the notes it was also already not that trivial for some compiler vendors to",
    "start": "2496409",
    "end": "2503179"
  },
  {
    "text": "implement it so that's what we are having so it's just a single type so",
    "start": "2503179",
    "end": "2513689"
  },
  {
    "text": "transaction is you can use a tuple to hack around a toast to the very end oh yeah whatever you need",
    "start": "2513689",
    "end": "2520789"
  },
  {
    "text": "I lied a little bit to you before",
    "start": "2528109",
    "end": "2535369"
  },
  {
    "start": "2530000",
    "end": "2886000"
  },
  {
    "text": "because there is a way to get what I like without C++ twenties range based for",
    "start": "2535369",
    "end": "2543109"
  },
  {
    "text": "loops which initializers I can use for example mustard for each algorithm and",
    "start": "2543109",
    "end": "2551499"
  },
  {
    "text": "use C++ for teens in it capture to introduce a new variable called ID X in",
    "start": "2551499",
    "end": "2558170"
  },
  {
    "text": "that lambda which is of size T and default initialized so it's how we can",
    "start": "2558170",
    "end": "2569029"
  },
  {
    "text": "put the pieces together that's simple as plus 14th lambdas",
    "start": "2569029",
    "end": "2576109"
  },
  {
    "text": "extension in C++ 17 we got a little",
    "start": "2576109",
    "end": "2582619"
  },
  {
    "text": "extension to variadic templates we can now apply parameter packs together with",
    "start": "2582619",
    "end": "2587869"
  },
  {
    "text": "using and what is this is enables us to",
    "start": "2587869",
    "end": "2592959"
  },
  {
    "text": "have inline number for this using TS",
    "start": "2592959",
    "end": "2601089"
  },
  {
    "text": "call operator dot dot dot sing what",
    "start": "2601089",
    "end": "2606289"
  },
  {
    "text": "we're looking at a very attic class template which takes an arbitrary number",
    "start": "2606289",
    "end": "2613279"
  },
  {
    "text": "of types and derives from each of them and this using statement says that from",
    "start": "2613279",
    "end": "2622039"
  },
  {
    "text": "each of these types please drag in the coal operators all we have into the",
    "start": "2622039",
    "end": "2629809"
  },
  {
    "text": "overload struct so that they are accessible Nico had an excellent example",
    "start": "2629809",
    "end": "2635239"
  },
  {
    "text": "how to apply that in a bigger context yesterday in his talk if you've been there and not just check out the video",
    "start": "2635239",
    "end": "2641809"
  },
  {
    "text": "what a thing does now is I can use this together with a deduction guide which",
    "start": "2641809",
    "end": "2648109"
  },
  {
    "text": "you can see in line 79 and use it in line 13 to create struct which contains",
    "start": "2648109",
    "end": "2659769"
  },
  {
    "text": "multiple Landers if you like or it derives me from multiple lambdas in my case - Wanda",
    "start": "2659769",
    "end": "2668480"
  },
  {
    "text": "takes an INT by reference and the second one that takes in double by reference first one multiplies the past value by",
    "start": "2668480",
    "end": "2675140"
  },
  {
    "text": "two the second one by 2.0 and it has also a second variable which is",
    "start": "2675140",
    "end": "2681710"
  },
  {
    "text": "multiplied by two again and now I can use this greater type double dbl to",
    "start": "2681710",
    "end": "2690530"
  },
  {
    "text": "either call it with one parameter in line 21 or with two in line 22 looking",
    "start": "2690530",
    "end": "2699920"
  },
  {
    "text": "at what's going on there we can now see",
    "start": "2699920",
    "end": "2711260"
  },
  {
    "text": "an order template instantiation here our class overload gets instantiated with",
    "start": "2711260",
    "end": "2717110"
  },
  {
    "text": "two different lambdas two ones I created they used to derive from them publicly",
    "start": "2717110",
    "end": "2726170"
  },
  {
    "text": "and this is the part where my using with",
    "start": "2726170",
    "end": "2731870"
  },
  {
    "text": "the operator dot o dot comes in now I have using declaration for both",
    "start": "2731870",
    "end": "2738250"
  },
  {
    "text": "operators of both lambdas operators of both lambdas because it might help C++",
    "start": "2738250",
    "end": "2746120"
  },
  {
    "text": "insights gives you here as a comment the full signature of the collaborator you",
    "start": "2746120",
    "end": "2754610"
  },
  {
    "text": "got from the type so from the first lambda and for the second one which can",
    "start": "2754610",
    "end": "2760700"
  },
  {
    "text": "help you to figure out why things go not as expected probably and then down here",
    "start": "2760700",
    "end": "2768440"
  },
  {
    "text": "we can see of course the lambda as we've seen it before then here our overload is",
    "start": "2768440",
    "end": "2781840"
  },
  {
    "text": "created with the two lambdas and while I prepare this Turk I discovered something",
    "start": "2781840",
    "end": "2787130"
  },
  {
    "text": "I didn't expect and I have no answer to so far here's the first call calling",
    "start": "2787130",
    "end": "2793190"
  },
  {
    "text": "that created object dbl with just a single hour it's an INT there the call operator on",
    "start": "2793190",
    "end": "2802280"
  },
  {
    "text": "double is called while in line below for",
    "start": "2802280",
    "end": "2809119"
  },
  {
    "text": "to me so far unknown reason this dbl variable is casted to the type of the",
    "start": "2809119",
    "end": "2816320"
  },
  {
    "text": "lambda so the compiler at this point seems to know better what to do and then",
    "start": "2816320",
    "end": "2821450"
  },
  {
    "text": "it invokes the call operator I'm not sure if it's more efficient to do it",
    "start": "2821450",
    "end": "2828080"
  },
  {
    "text": "that way it was just a breast yes so the",
    "start": "2828080",
    "end": "2839020"
  },
  {
    "text": "question is if I if that sing would skip the virtual function dispatching if",
    "start": "2839020",
    "end": "2844760"
  },
  {
    "text": "there was a where a virtual function and that's what I saw - yes it's just",
    "start": "2844760",
    "end": "2851780"
  },
  {
    "text": "because there is no virtual function I'm not sure if there's more going on I'm",
    "start": "2851780",
    "end": "2857570"
  },
  {
    "text": "not seeing so maybe it doesn't need to figure out an address offset or I don't",
    "start": "2857570",
    "end": "2865369"
  },
  {
    "text": "know for a virtual part it would be totally and I think that's what make it first and maybe that's a general",
    "start": "2865369",
    "end": "2871369"
  },
  {
    "text": "optimization they are doing and if it doesn't matter it doesn't matter it does not make things worse so maybe that's",
    "start": "2871369",
    "end": "2878060"
  },
  {
    "text": "the idea here",
    "start": "2878060",
    "end": "2880540"
  },
  {
    "text": "so what else do we have behalf in C++ 70 in a context brave and you may have",
    "start": "2885970",
    "end": "2893540"
  },
  {
    "start": "2886000",
    "end": "3164000"
  },
  {
    "text": "heard of that the goal here is that only one of the SIF branches wives after",
    "start": "2893540",
    "end": "2898839"
  },
  {
    "text": "parsing it because it's context per all the orders are discard but all branches",
    "start": "2898839",
    "end": "2904520"
  },
  {
    "text": "have to be well it that's one rule and if he once again like to verify that he",
    "start": "2904520",
    "end": "2914960"
  },
  {
    "text": "has a bit more to code but it's just to make it compile then we can see below here we have the primary template which",
    "start": "2914960",
    "end": "2922460"
  },
  {
    "text": "contains all the branches and then I have my template specialization which only contains the Linux branch because I",
    "start": "2922460",
    "end": "2930140"
  },
  {
    "text": "stated that my native OS currently is Linux so all the other process go away but I'm lying I'm on a Mac so if it",
    "start": "2930140",
    "end": "2937819"
  },
  {
    "text": "changed this then I'm getting an error",
    "start": "2937819",
    "end": "2943030"
  },
  {
    "text": "but well who likes steady cursors right so it's right away now what we can see",
    "start": "2943030",
    "end": "2951650"
  },
  {
    "text": "here is the first Linux branch is empty it's there but it's empty so it doesn't",
    "start": "2951650",
    "end": "2957920"
  },
  {
    "text": "bother the compiler and then we have here now the Mac branch surviving yes",
    "start": "2957920",
    "end": "2969280"
  },
  {
    "text": "yes thank you that's where I'm getting so if you are looking closely at this",
    "start": "2970779",
    "end": "2975799"
  },
  {
    "text": "code we can't see something I didn't bother with four years with C++ and see",
    "start": "2975799",
    "end": "2983619"
  },
  {
    "text": "the key here is there is no else if in C++ there sniff and there's nails but",
    "start": "2983619",
    "end": "2991940"
  },
  {
    "text": "there's no else if they are languages like Python bash they have the L if keyword in C++ we just have a else and",
    "start": "2991940",
    "end": "3000970"
  },
  {
    "text": "if and that's why I have here a context per F and the context per else branch",
    "start": "3000970",
    "end": "3007680"
  },
  {
    "text": "and notice that here opens a new scope and in that scope is my F because that's",
    "start": "3007680",
    "end": "3013720"
  },
  {
    "text": "how in C++ and C else if it's modeled it's just an if inside else and that's",
    "start": "3013720",
    "end": "3022420"
  },
  {
    "text": "why this marked else if it's not context per its in regular if with an else",
    "start": "3022420",
    "end": "3031690"
  },
  {
    "text": "branch within a context for else and if",
    "start": "3031690",
    "end": "3036880"
  },
  {
    "text": "I add Const X / - that I can",
    "start": "3036880",
    "end": "3045930"
  },
  {
    "text": "put in the static assert you should not command out a static assert like I",
    "start": "3048410",
    "end": "3053809"
  },
  {
    "text": "trusted and then we can't see now I have only there if branch debt survives there",
    "start": "3053809",
    "end": "3059539"
  },
  {
    "text": "is no else Prancer anymore and that's important to know because if you're not having a static desert there",
    "start": "3059539",
    "end": "3065269"
  },
  {
    "text": "and not doing a lot of checks it may slip under the radar so remember to put",
    "start": "3065269",
    "end": "3070460"
  },
  {
    "text": "on Airy if a context / if you like to have a context but if even if it's",
    "start": "3070460",
    "end": "3075769"
  },
  {
    "text": "together we say else that's the takeaway here ya know that it's something I",
    "start": "3075769",
    "end": "3086539"
  },
  {
    "text": "created that comes from a knot effect that if I would use a plane stood the",
    "start": "3086539",
    "end": "3094910"
  },
  {
    "text": "same or something like this here or the static assured visitor always true then",
    "start": "3094910",
    "end": "3101869"
  },
  {
    "text": "it would always trigger because the branch is always evaluated and if I'm putting here for example the typical",
    "start": "3101869",
    "end": "3108519"
  },
  {
    "text": "order problem this static desert is essentially always true I should never",
    "start": "3108519",
    "end": "3114920"
  },
  {
    "text": "reach that and it's a context brave so you might sing sorry I should say it's",
    "start": "3114920",
    "end": "3126230"
  },
  {
    "text": "always faults but always true and now it stops compiling because that branch is",
    "start": "3126230",
    "end": "3132410"
  },
  {
    "text": "evaluated that as soon as we hit that static hazard it triggers and that's why I have this this always Falls template",
    "start": "3132410",
    "end": "3141440"
  },
  {
    "text": "around it but it's not part of the standard library I think yet I have my own implementation yes because now that",
    "start": "3141440",
    "end": "3151579"
  },
  {
    "text": "static Azure depends on the template parameter and that's why it is discard later and not triggers yeah",
    "start": "3151579",
    "end": "3159730"
  },
  {
    "text": "so with c++ 17 we got our nice tools we can now use auto together as a non type",
    "start": "3163430",
    "end": "3171600"
  },
  {
    "start": "3164000",
    "end": "3503000"
  },
  {
    "text": "template parameter which enables me to write code like this I have this print",
    "start": "3171600",
    "end": "3177620"
  },
  {
    "text": "function which is a template and I can now say here the first parameters of",
    "start": "3177620",
    "end": "3182940"
  },
  {
    "text": "type auto and name its app for separator and its default initialized with space",
    "start": "3182940",
    "end": "3189510"
  },
  {
    "text": "and after that not a template parameter comes and then there comes an arbitrary number of template parameters because",
    "start": "3189510",
    "end": "3196590"
  },
  {
    "text": "it's a very etic template now I can use this first argument this auto non type",
    "start": "3196590",
    "end": "3204060"
  },
  {
    "text": "template parameter to use it as a separator to insert between each of their arguments to separator and that I",
    "start": "3204060",
    "end": "3213810"
  },
  {
    "text": "can then use to print out hello C++ 20 nice and easy",
    "start": "3213810",
    "end": "3219920"
  },
  {
    "text": "if I am look at this",
    "start": "3219920",
    "end": "3225680"
  },
  {
    "text": "C++ insights we can see what's happening there compiler grades a bunch of",
    "start": "3228470",
    "end": "3234440"
  },
  {
    "text": "template instantiations for us first we have a print version with all of the",
    "start": "3234440",
    "end": "3240319"
  },
  {
    "text": "elements or all of the arguments passed in because it's a constant Bri if I have this terminating case here then there is",
    "start": "3240319",
    "end": "3247430"
  },
  {
    "text": "a version where one argument is popped and there's the last version there only",
    "start": "3247430",
    "end": "3254480"
  },
  {
    "text": "one argument remains and that's how I terminate this recursion so here if a",
    "start": "3254480",
    "end": "3260810"
  },
  {
    "text": "recursion but that's one way how you can apply this context brief but see Blas",
    "start": "3260810",
    "end": "3270290"
  },
  {
    "text": "+17 gave her something more we got fault expressions there so I can change this",
    "start": "3270290",
    "end": "3276349"
  },
  {
    "text": "example slightly applying Lam there's not a liked feature together is fault",
    "start": "3276349",
    "end": "3283069"
  },
  {
    "text": "expressions to achieve the same thing and if I now transform this again",
    "start": "3283069",
    "end": "3289900"
  },
  {
    "text": "then we can see first of all I only get one instantiation for print because I",
    "start": "3296369",
    "end": "3304869"
  },
  {
    "text": "have no recursion anymore and it has all the parameters of course it creates a",
    "start": "3304869",
    "end": "3312689"
  },
  {
    "text": "temp lambda which contains my C out here and what we are looking here at is a",
    "start": "3312689",
    "end": "3321910"
  },
  {
    "text": "generic lambda which we got with C++ 14 and now we can see there they are generic lambda this Auto keyword we can",
    "start": "3321910",
    "end": "3329259"
  },
  {
    "text": "apply here results in our call operator and the lambda being just a template and",
    "start": "3329259",
    "end": "3336449"
  },
  {
    "text": "my order parameter is now a template parameter or template argument depending",
    "start": "3336449",
    "end": "3342160"
  },
  {
    "text": "on when you're looking at it and that's why I'm getting in this lambda to more",
    "start": "3342160",
    "end": "3348969"
  },
  {
    "text": "instantiation one taking reference to conjure array and another one",
    "start": "3348969",
    "end": "3355719"
  },
  {
    "text": "taking conference to an int because that's how I call a lambda and then",
    "start": "3355719",
    "end": "3362890"
  },
  {
    "text": "below here we can see what default expression does it just comma separate",
    "start": "3362890",
    "end": "3372630"
  },
  {
    "text": "it's d calls to the lambdas call operator",
    "start": "3372630",
    "end": "3378179"
  },
  {
    "text": "once again syntactic sugar just to enable us to write less code and better",
    "start": "3378179",
    "end": "3384640"
  },
  {
    "text": "code",
    "start": "3384640",
    "end": "3386939"
  },
  {
    "text": "okay we already talked about context parameters so we can sleep this if you",
    "start": "3394309",
    "end": "3400529"
  },
  {
    "text": "like the project you can support a project my favorite sport number one is",
    "start": "3400529",
    "end": "3406079"
  },
  {
    "text": "go to get up pick an issue and give me a",
    "start": "3406079",
    "end": "3411539"
  },
  {
    "text": "pull request also very favorable is if you find a bug file an issue I also like",
    "start": "3411539",
    "end": "3419999"
  },
  {
    "text": "that all the great support if you more on the hey I have a lot of money to give",
    "start": "3419999",
    "end": "3425819"
  },
  {
    "text": "you side aside from hiring me for training classes you can support me at pet run",
    "start": "3425819",
    "end": "3432150"
  },
  {
    "text": "with small amounts of memory and the project with that if you like to be more",
    "start": "3432150",
    "end": "3438299"
  },
  {
    "text": "on the side I like to show then maybe Spreadshirt t-shirts was to C++ inside",
    "start": "3438299",
    "end": "3443640"
  },
  {
    "text": "slow who are the right thing for you all that helps to fund the servers and all",
    "start": "3443640",
    "end": "3449369"
  },
  {
    "text": "the stuff that sing runs on some time ago when I tweeted about a new feature I",
    "start": "3449369",
    "end": "3455309"
  },
  {
    "text": "got this tweet back which seems to come from somebody which is able to speak",
    "start": "3455309",
    "end": "3462900"
  },
  {
    "text": "English and German now the question was so it's completely Phatak and the answer",
    "start": "3462900",
    "end": "3469499"
  },
  {
    "text": "is no you don't think so it's the start of journey um there are a lot of C++ 20",
    "start": "3469499",
    "end": "3474900"
  },
  {
    "text": "things to implement guess not all things are already implemented and there are",
    "start": "3474900",
    "end": "3480380"
  },
  {
    "text": "most likely some issues so it's a good point but it's it's not ant with all",
    "start": "3480380",
    "end": "3489390"
  },
  {
    "text": "that sad it's been a pleasure giving the talk to you today I have just three warm words for you and that's I am fetish",
    "start": "3489390",
    "end": "3498550"
  },
  {
    "text": "[Applause]",
    "start": "3498550",
    "end": "3504780"
  }
]