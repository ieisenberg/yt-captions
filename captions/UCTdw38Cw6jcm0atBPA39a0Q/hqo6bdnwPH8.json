[
  {
    "start": "0",
    "end": "113000"
  },
  {
    "text": "hello everyone i guess we're about to start okay that's exact time so i hope you are not",
    "start": "10960",
    "end": "18800"
  },
  {
    "text": "getting tired at the end of the conference my name is vitali and today i'm gonna talk about basic",
    "start": "18800",
    "end": "25599"
  },
  {
    "text": "object 3 traversal so first of all a few words about me i've",
    "start": "25599",
    "end": "32480"
  },
  {
    "text": "been doing software for quite a while and now i'm working as a software engineer",
    "start": "32480",
    "end": "37600"
  },
  {
    "text": "here at cisco norway before that i was developing qt both ui and current",
    "start": "37600",
    "end": "44640"
  },
  {
    "text": "network parts then working on geospatial software software hormones",
    "start": "44640",
    "end": "51360"
  },
  {
    "text": "modeling graphic software which means visual effects for post production",
    "start": "51360",
    "end": "56960"
  },
  {
    "text": "and i also hold phd into informatics from moscow state mining university",
    "start": "56960",
    "end": "63039"
  },
  {
    "text": "yeah that's it about me so and what's the plan for today",
    "start": "63039",
    "end": "69840"
  },
  {
    "text": "first of all i'm gonna share a bit about cute framework slash library and which",
    "start": "69840",
    "end": "76400"
  },
  {
    "text": "part key object takes in this framework after that i'm gonna show how",
    "start": "76400",
    "end": "83600"
  },
  {
    "text": "to traversal is implemented in the framework then give brief introduction",
    "start": "83600",
    "end": "90799"
  },
  {
    "text": "to coroutines and ranges and then",
    "start": "90799",
    "end": "96400"
  },
  {
    "text": "implement or show how to implement laser treat traversal with using those modern approaches and at the",
    "start": "96880",
    "end": "103840"
  },
  {
    "text": "end i'm gonna share some benchmark benchmarks i performed so",
    "start": "103840",
    "end": "111119"
  },
  {
    "text": "regarding cute what's cute cute is a framework and toolkit and the",
    "start": "111119",
    "end": "118719"
  },
  {
    "start": "113000",
    "end": "113000"
  },
  {
    "text": "library depends on on which level you think about inversion of control",
    "start": "118719",
    "end": "124880"
  },
  {
    "text": "toolkit because it's not only providing",
    "start": "124880",
    "end": "130239"
  },
  {
    "text": "modules but there's also a collection of tools like linguist",
    "start": "130239",
    "end": "136640"
  },
  {
    "text": "and meta object compiler ui generators and so on qt is open",
    "start": "136640",
    "end": "143280"
  },
  {
    "text": "source all components are open source but there are some products developed by cute",
    "start": "143280",
    "end": "148879"
  },
  {
    "text": "company like it for mcu for example they are commercial so it's cross platform",
    "start": "148879",
    "end": "154319"
  },
  {
    "text": "at least might be used for three major platform and some minor uh there are a few",
    "start": "154319",
    "end": "162319"
  },
  {
    "text": "commercial and okay that's one commercial and few free licenses so it's like lgp obviously and",
    "start": "162319",
    "end": "169680"
  },
  {
    "text": "gpl and also pure commercial and qt is mainly used for ui development",
    "start": "169680",
    "end": "176640"
  },
  {
    "text": "but as i mentioned before there are a lot of different modules like for",
    "start": "176640",
    "end": "182840"
  },
  {
    "text": "example st like library or libraries for network programming working with file system",
    "start": "182840",
    "end": "191040"
  },
  {
    "text": "and many many other components so key option for now a key object",
    "start": "191040",
    "end": "198159"
  },
  {
    "start": "197000",
    "end": "197000"
  },
  {
    "text": "is kind of a fundamental component of the qt sq documentation mentions so it's kind of",
    "start": "198159",
    "end": "204080"
  },
  {
    "text": "hard of huge object model uh a lot of mechanism in qt relies on",
    "start": "204080",
    "end": "211040"
  },
  {
    "text": "around this object and this class it's a garbage",
    "start": "211040",
    "end": "216080"
  },
  {
    "text": "collection so i will show before what it means but basically all children of current key",
    "start": "216080",
    "end": "223360"
  },
  {
    "text": "object will be automatically removed when a root object disposed it also",
    "start": "223360",
    "end": "229840"
  },
  {
    "text": "used in cute meta object system as we know there is no proper reflection and meta",
    "start": "229840",
    "end": "236239"
  },
  {
    "text": "system in c plus plus itself so far there are a few libraries",
    "start": "236239",
    "end": "241280"
  },
  {
    "text": "implement reflection in some sort but well it's not what we can get on the",
    "start": "241280",
    "end": "246879"
  },
  {
    "text": "language level and get one of them so it also",
    "start": "246879",
    "end": "253200"
  },
  {
    "text": "used in the properties mechanism like regular properties in other languages for example c sharp",
    "start": "253200",
    "end": "260320"
  },
  {
    "text": "and also used in slow signals mechanism so slow signals",
    "start": "260320",
    "end": "266400"
  },
  {
    "text": "it's kind of observer subscriber mechanism you some objects might emit signals and then you can subscribe",
    "start": "266400",
    "end": "274160"
  },
  {
    "text": "something or attach something to this event and react somehow",
    "start": "274160",
    "end": "283040"
  },
  {
    "start": "283000",
    "end": "283000"
  },
  {
    "text": "so now uh key object trees what are they used for as i mentioned",
    "start": "283040",
    "end": "289040"
  },
  {
    "text": "before for garbage collection of course sort of garbage but",
    "start": "289040",
    "end": "294240"
  },
  {
    "text": "we know that there is no like proper garbage in c plus plus so anyway uh it's also used for",
    "start": "294240",
    "end": "300960"
  },
  {
    "text": "representing visual objects tree hierarchy i imagine that you have a lot of visual",
    "start": "300960",
    "end": "306960"
  },
  {
    "text": "elements like items in qml or items and widgets buttons",
    "start": "306960",
    "end": "312720"
  },
  {
    "text": "tabs and stuff and all of the things in cute are represented as a few object trees",
    "start": "312720",
    "end": "319680"
  },
  {
    "text": "they also involved in events handling like for example if",
    "start": "319680",
    "end": "325520"
  },
  {
    "text": "a user a user clicks right mouse on some widgets it",
    "start": "325520",
    "end": "330740"
  },
  {
    "text": "[Music] produces events and then you can handle them in the program",
    "start": "330740",
    "end": "336840"
  },
  {
    "text": "so now regarding tree traversing that's a main thing of",
    "start": "336840",
    "end": "343600"
  },
  {
    "start": "338000",
    "end": "338000"
  },
  {
    "text": "this topic there are roughly four active methods in the key object",
    "start": "343600",
    "end": "349840"
  },
  {
    "text": "interface now all of those things are methods of key object class",
    "start": "349840",
    "end": "354960"
  },
  {
    "text": "it's not clear from this slide but it's done to just save some space so the first met methods returns",
    "start": "354960",
    "end": "362560"
  },
  {
    "text": "a reference to a list of only direct children of current object",
    "start": "362560",
    "end": "369360"
  },
  {
    "text": "the second one is used to find all children with the name",
    "start": "369360",
    "end": "375199"
  },
  {
    "text": "specified based on options passed so it might be either like recursive teacher version",
    "start": "375199",
    "end": "382639"
  },
  {
    "text": "or on the direct children of the current object the third one does",
    "start": "382639",
    "end": "389039"
  },
  {
    "text": "the same but uses regular expression to match the name and the last one",
    "start": "389039",
    "end": "396560"
  },
  {
    "text": "is for finding on the the first child with the name specified and actually",
    "start": "396560",
    "end": "402880"
  },
  {
    "text": "there are i guess two more deprecated methods in the interface",
    "start": "402880",
    "end": "408479"
  },
  {
    "text": "related to the [Music] locating children so but some of them",
    "start": "408479",
    "end": "413680"
  },
  {
    "text": "use for example old regular expression and will be eventually removed q6 i guess",
    "start": "413680",
    "end": "420080"
  },
  {
    "start": "420000",
    "end": "420000"
  },
  {
    "text": "so and how fine children is implemented so it like uh traverses a",
    "start": "420080",
    "end": "426960"
  },
  {
    "text": "tree like breath first and collecting children on each level then put them to the array",
    "start": "426960",
    "end": "434960"
  },
  {
    "text": "and if there are like some filtering criteria for example name or regular expression not all of",
    "start": "434960",
    "end": "441199"
  },
  {
    "text": "children will be collected but only those are matched those criteria",
    "start": "441199",
    "end": "447120"
  },
  {
    "text": "so and yeah they are copied and put to the array but not the objects",
    "start": "447120",
    "end": "453759"
  },
  {
    "text": "themselves copied on the pointers term and now i think there are some issues",
    "start": "453759",
    "end": "461199"
  },
  {
    "text": "with this interface and with this approach first three things are on the slide",
    "start": "461199",
    "end": "469120"
  },
  {
    "text": "related to maintainability and extensibility and so on the thing is that you to give some",
    "start": "469120",
    "end": "476800"
  },
  {
    "text": "guarantees to binary and source compatibility between derivatives and",
    "start": "476800",
    "end": "481919"
  },
  {
    "text": "this is really hard to for example extend current current methods or modify them somehow",
    "start": "481919",
    "end": "489039"
  },
  {
    "text": "if well between releases and release cycle",
    "start": "489039",
    "end": "494240"
  },
  {
    "text": "is too long like a few years not even one year one release and this",
    "start": "494240",
    "end": "500319"
  },
  {
    "text": "is like really complicated to add something just imagine that we want eventually extend current method to",
    "start": "500319",
    "end": "507840"
  },
  {
    "text": "accept a predicate instead of just a name the fourth bullet here is extra coping",
    "start": "507840",
    "end": "515680"
  },
  {
    "text": "of cue list i guess most of the time you don't really need to",
    "start": "515680",
    "end": "522719"
  },
  {
    "text": "i would say uh copy something or hold the copy of all pointers you just",
    "start": "522719",
    "end": "528880"
  },
  {
    "text": "need to check yours for example to find something or to just change",
    "start": "528880",
    "end": "534720"
  },
  {
    "text": "names or for example invoke a paint event or or something like that and you can avoid",
    "start": "534720",
    "end": "543040"
  },
  {
    "text": "extra allocation and stuff but i put one this burning mark here because",
    "start": "543040",
    "end": "549680"
  },
  {
    "text": "it's controversial and at some point you really do need to preserve all children on the list",
    "start": "549680",
    "end": "556959"
  },
  {
    "text": "especially if the three might be revealed during the iteration it was happening for example",
    "start": "556959",
    "end": "562959"
  },
  {
    "text": "when you need to partially repaint some which is entry hierarchy and then",
    "start": "562959",
    "end": "569519"
  },
  {
    "text": "republish methods of widget you can get this behavior",
    "start": "569519",
    "end": "574640"
  },
  {
    "text": "and the last one is the most questionable stuff it was discussed",
    "start": "574640",
    "end": "581839"
  },
  {
    "text": "in the list recently like a few months ago and why",
    "start": "581839",
    "end": "588640"
  },
  {
    "text": "do we have like this tree or this hierarchy as a part of key",
    "start": "588640",
    "end": "594720"
  },
  {
    "text": "object at all and why do we",
    "start": "594720",
    "end": "600160"
  },
  {
    "text": "have those methods in q object class so but yet again three berlin",
    "start": "600160",
    "end": "606880"
  },
  {
    "text": "marks it's controversial and a lot of developers a lot of meanings and",
    "start": "606880",
    "end": "613279"
  },
  {
    "text": "um nothing i guess will be done here so far",
    "start": "613279",
    "end": "619839"
  },
  {
    "text": "and what can we do to like slightly improve or avoid all of those disadvantages",
    "start": "620160",
    "end": "627600"
  },
  {
    "text": "first of all we can avoid extra copies for pointers or avoid extra allocations and",
    "start": "627600",
    "end": "634880"
  },
  {
    "text": "reallocations that's doable the second thing we can",
    "start": "634880",
    "end": "640560"
  },
  {
    "text": "slightly clean up key objects interface from the extra methods and the last thing we can",
    "start": "640560",
    "end": "649120"
  },
  {
    "text": "slightly improve extensibility by making all elements composable so we can stick",
    "start": "649120",
    "end": "655920"
  },
  {
    "text": "the speaker back through this chain or pipeline to compose a few",
    "start": "655920",
    "end": "661040"
  },
  {
    "text": "predicates or a few action one shade and then evaluate it i will show a bit late to how to do that",
    "start": "661040",
    "end": "669519"
  },
  {
    "start": "669000",
    "end": "669000"
  },
  {
    "text": "so what do we have in modern modern c plus plus now and plus plus 20. we have two things in our",
    "start": "669519",
    "end": "676399"
  },
  {
    "text": "toolbox we have coroutines and we have ranges against all of them",
    "start": "676399",
    "end": "682000"
  },
  {
    "text": "at least coroutines for sure supported by three major compilers msvc clank and gcc for now",
    "start": "682000",
    "end": "689839"
  },
  {
    "text": "there is a difference between supporting gcc and clank because in gcc now",
    "start": "689839",
    "end": "697360"
  },
  {
    "text": "they are still under experimental section and require different flags but i hope this",
    "start": "697360",
    "end": "703360"
  },
  {
    "text": "will be unified soon enough and ranges we also should have nc plus plus 20 at",
    "start": "703360",
    "end": "710880"
  },
  {
    "text": "least it mentioned in cpp reference i'm not sure to be honest whether this is fully",
    "start": "710880",
    "end": "717040"
  },
  {
    "text": "implemented to any compiler so here if you want to play i suggest to",
    "start": "717040",
    "end": "722320"
  },
  {
    "text": "you some third party libraries like ranges v3 originally written by eric nibler",
    "start": "722320",
    "end": "728000"
  },
  {
    "text": "or there are something in boost also written by the same person",
    "start": "728000",
    "end": "733120"
  },
  {
    "text": "so let's talk a bit about core routines for now",
    "start": "733120",
    "end": "738800"
  },
  {
    "start": "741000",
    "end": "741000"
  },
  {
    "text": "so there were a lot of talks during past few years about coroutine so i don't",
    "start": "742560",
    "end": "747760"
  },
  {
    "text": "want to repeat all of them basically coroutine in c plus plus and",
    "start": "747760",
    "end": "753760"
  },
  {
    "text": "many other languages of other function that can be suspended its execution and resume it",
    "start": "753760",
    "end": "760959"
  },
  {
    "text": "later you can think about coroutines about sort of state machines that jumps between when",
    "start": "760959",
    "end": "767120"
  },
  {
    "text": "your program jumps between states based on some condition and also important trait is the core",
    "start": "767120",
    "end": "774000"
  },
  {
    "text": "routines in cyprus basar stackless which is like also a huge topic to discuss but if you want",
    "start": "774000",
    "end": "781040"
  },
  {
    "text": "to learn more about difference between stackless tech full symmetric asymmetric coroutines you can",
    "start": "781040",
    "end": "786160"
  },
  {
    "text": "read either boost official documentation or there are something in cpp reference",
    "start": "786160",
    "end": "793440"
  },
  {
    "text": "as well but the point is that those core routines are slightly faster and efficient in terms of memory",
    "start": "793440",
    "end": "801519"
  },
  {
    "text": "i'm talking about the stackless coverages so in c plus plus we like",
    "start": "801519",
    "end": "808240"
  },
  {
    "start": "804000",
    "end": "804000"
  },
  {
    "text": "almost as usual have almost nothing for support them properly in",
    "start": "808240",
    "end": "813600"
  },
  {
    "text": "terms of application development we have those three keywords like evade",
    "start": "813600",
    "end": "819040"
  },
  {
    "text": "yield and return this weird prefix co",
    "start": "819040",
    "end": "824160"
  },
  {
    "text": "and the first one just suspends current core routine the second one does the same but also",
    "start": "824160",
    "end": "830560"
  },
  {
    "text": "yields a value and the last one returns value and coroutine will",
    "start": "830560",
    "end": "836639"
  },
  {
    "text": "not be resumed after that so but not everything's that bad",
    "start": "836639",
    "end": "844880"
  },
  {
    "start": "840000",
    "end": "840000"
  },
  {
    "text": "and we have at least two libraries that give us good primitives for using",
    "start": "844880",
    "end": "852000"
  },
  {
    "text": "core routines and first one is cpp core and the second one is foley from facebook",
    "start": "852000",
    "end": "858079"
  },
  {
    "text": "i personally recommend using the first one it's i found personally it's easy to build",
    "start": "858079",
    "end": "863519"
  },
  {
    "text": "and use and there are a lot of things like generators tasks it's red pools cancellation tokens",
    "start": "863519",
    "end": "871920"
  },
  {
    "text": "and so on already implemented and for you and yeah ready to use",
    "start": "871920",
    "end": "879199"
  },
  {
    "start": "879000",
    "end": "879000"
  },
  {
    "text": "so now let's see the simple usage example so here we have function",
    "start": "879920",
    "end": "887680"
  },
  {
    "text": "iota that produces numbers like for example",
    "start": "887680",
    "end": "896079"
  },
  {
    "text": "one two three so number by number and this function you",
    "start": "896079",
    "end": "902079"
  },
  {
    "text": "can see returns generator from cpp core and just yields numbers in",
    "start": "902079",
    "end": "909600"
  },
  {
    "text": "infinite cycles so this generator is theoretically infinite but of course it",
    "start": "909600",
    "end": "916160"
  },
  {
    "text": "limited by ins capacity now and here after comment section",
    "start": "916160",
    "end": "921680"
  },
  {
    "text": "we have the example so for loop that will print first 10 numbers",
    "start": "921680",
    "end": "928480"
  },
  {
    "text": "and yeah we need this break here because the generator is kind of infinite",
    "start": "928480",
    "end": "935920"
  },
  {
    "text": "so here it is and you can notice how this code is simple and looks",
    "start": "935920",
    "end": "943360"
  },
  {
    "text": "natural almost the same as a regular program we have",
    "start": "943360",
    "end": "948880"
  },
  {
    "text": "so now how we can utilize the things for lazy to each other so in c plus plus",
    "start": "948959",
    "end": "957680"
  },
  {
    "start": "957000",
    "end": "957000"
  },
  {
    "text": "and there are only two simple functions you need to implement the first functions is just",
    "start": "957680",
    "end": "965040"
  },
  {
    "text": "check whether this is root or not and if so it's yields implementation function",
    "start": "965040",
    "end": "971199"
  },
  {
    "text": "that recursively go down to the three and start",
    "start": "971199",
    "end": "977600"
  },
  {
    "text": "yielding child by chance so it works like absolutely the same with the previous",
    "start": "977600",
    "end": "985040"
  },
  {
    "text": "generator so just steals values in a loop and after that when",
    "start": "985040",
    "end": "993040"
  },
  {
    "text": "it exits all children's it's a treat returns the current child",
    "start": "993040",
    "end": "1000240"
  },
  {
    "text": "so and how it works in the explanation so we have a tree here",
    "start": "1000240",
    "end": "1007839"
  },
  {
    "text": "then after we ask about the first child it goes down",
    "start": "1007839",
    "end": "1014320"
  },
  {
    "text": "to the leftmost leaf and then yields the value to a color and",
    "start": "1014320",
    "end": "1020800"
  },
  {
    "text": "suspend that when we ask it again for the next one it goes like up",
    "start": "1020800",
    "end": "1028079"
  },
  {
    "text": "level up and yields value to a color again and suspense",
    "start": "1028079",
    "end": "1033918"
  },
  {
    "start": "1034000",
    "end": "1034000"
  },
  {
    "text": "so we already can use it actually like as a free function so and",
    "start": "1034319",
    "end": "1041199"
  },
  {
    "text": "please notice that okay i'm going to use my fancy laser beam pointer",
    "start": "1041199",
    "end": "1048079"
  },
  {
    "text": "so here i hope you can see it here at this point nothing happened so",
    "start": "1048079",
    "end": "1054240"
  },
  {
    "text": "far i mean nothing is evaluated our coach",
    "start": "1054240",
    "end": "1059600"
  },
  {
    "text": "doesn't go deep down to the leftmost leaf so but here when we ask about the first",
    "start": "1059600",
    "end": "1066080"
  },
  {
    "text": "element only here it's it happens so and we can get",
    "start": "1066080",
    "end": "1071200"
  },
  {
    "text": "the first child and there is also a fallback",
    "start": "1071200",
    "end": "1079280"
  },
  {
    "text": "i added because not all compilers might support this",
    "start": "1079280",
    "end": "1085360"
  },
  {
    "text": "core routines and you might want to take advantage of this approach for example composable",
    "start": "1085360",
    "end": "1090880"
  },
  {
    "text": "interface one will be that will be described later without using core routines",
    "start": "1090880",
    "end": "1096799"
  },
  {
    "text": "so and fallback is this implementation without core routines it's the simplest one it's the closest",
    "start": "1096799",
    "end": "1103919"
  },
  {
    "start": "1097000",
    "end": "1097000"
  },
  {
    "text": "possible to the original implementation we have an key object now with one major difference i use",
    "start": "1103919",
    "end": "1111440"
  },
  {
    "text": "stood vector here instead of q list or q vector because we don't really need",
    "start": "1111440",
    "end": "1117280"
  },
  {
    "text": "to implicit challenge here and q list is not recommended for usage",
    "start": "1117280",
    "end": "1122400"
  },
  {
    "text": "by your developers so and you might notice that i use this",
    "start": "1122400",
    "end": "1128400"
  },
  {
    "text": "parameter to return value it's kind of bad practice don't do that but",
    "start": "1128400",
    "end": "1133600"
  },
  {
    "text": "i tried to make it as close as possible to the original implementation because some compilers like",
    "start": "1133600",
    "end": "1139679"
  },
  {
    "text": "clan car will choose like and perform some implementations and speed up code",
    "start": "1139679",
    "end": "1145600"
  },
  {
    "text": "dramatically and it's just not fair for benchmarks when we compete with original",
    "start": "1145600",
    "end": "1150799"
  },
  {
    "text": "implementation so now let's talk a bit about ranges",
    "start": "1150799",
    "end": "1159200"
  },
  {
    "text": "okay so what the ranges are oh well it's a next step after iterators",
    "start": "1162160",
    "end": "1170880"
  },
  {
    "text": "uh it's not true to say that it's just a wrap around two iterators it's slightly",
    "start": "1170880",
    "end": "1176320"
  },
  {
    "text": "more complicated but it's for sure an iterable object and",
    "start": "1176320",
    "end": "1182000"
  },
  {
    "text": "ranges are composable so you can use this pipeline operator to",
    "start": "1182000",
    "end": "1187919"
  },
  {
    "text": "create this lazy pipeline or it's not necessarily have to be lazy but",
    "start": "1187919",
    "end": "1194240"
  },
  {
    "text": "it usually what you want to achieve and as i mentioned before this pipeline can",
    "start": "1194240",
    "end": "1199600"
  },
  {
    "text": "be lazier or you can um provoke this evaluation mid point you want so",
    "start": "1199600",
    "end": "1208480"
  },
  {
    "start": "1208000",
    "end": "1208000"
  },
  {
    "text": "let's say here is a simple example of a ranges of using",
    "start": "1208480",
    "end": "1216480"
  },
  {
    "text": "ranges and i introduced a few analysis here r for ranges and v4 are views uh",
    "start": "1216480",
    "end": "1224640"
  },
  {
    "text": "here and this line i'm just creating a view of ten elements",
    "start": "1224640",
    "end": "1231600"
  },
  {
    "text": "from zero to nine it's a half close range and at this point just",
    "start": "1231600",
    "end": "1238799"
  },
  {
    "text": "a lazy object kind of generator is created but nothing is evaluated so it does not",
    "start": "1238799",
    "end": "1245280"
  },
  {
    "text": "return for example container like a vector of 10 elements here is the just dumped to check whether",
    "start": "1245280",
    "end": "1252240"
  },
  {
    "text": "this function even or not and then to apply square transformation",
    "start": "1252240",
    "end": "1257280"
  },
  {
    "text": "to an element and here we are creating this pipe",
    "start": "1257280",
    "end": "1264640"
  },
  {
    "text": "with this technique also known as a fusion and functional program and i",
    "start": "1264640",
    "end": "1269919"
  },
  {
    "text": "guess because no intermediate states are created in this pipe so and then it",
    "start": "1269919",
    "end": "1276720"
  },
  {
    "text": "prints like this because ranges provide this overload for all",
    "start": "1276720",
    "end": "1283520"
  },
  {
    "text": "stream operator but it's kind of equal to the loop that would print",
    "start": "1283520",
    "end": "1288840"
  },
  {
    "text": "elements and the funny thing so everything is lazy and this code is",
    "start": "1288840",
    "end": "1296320"
  },
  {
    "start": "1293000",
    "end": "1293000"
  },
  {
    "text": "equal or well i guess super close to just a regular loop with",
    "start": "1296320",
    "end": "1303039"
  },
  {
    "text": "the condition so not just like that but according to",
    "start": "1303039",
    "end": "1308320"
  },
  {
    "text": "like memory consumption is super close and the logic and the funny fact is",
    "start": "1308320",
    "end": "1315600"
  },
  {
    "text": "a lot of developers after scenes that says okay why do we need using ranges at all so we can use like this",
    "start": "1315600",
    "end": "1322320"
  },
  {
    "text": "simple loops and this is fine i mean it's easier no need to introduce any new consumption",
    "start": "1322320",
    "end": "1329840"
  },
  {
    "text": "so but it might be there for this simple case but ask yourself how often",
    "start": "1329840",
    "end": "1335280"
  },
  {
    "text": "uh do you just iterating over inside your program that's usually more sophisticated pipes",
    "start": "1335280",
    "end": "1342000"
  },
  {
    "text": "when you need to perform like hard transformation and so on and those just might be expressed",
    "start": "1342000",
    "end": "1347440"
  },
  {
    "text": "easily with this technique so now ranges in the",
    "start": "1347440",
    "end": "1355200"
  },
  {
    "text": "api how we can add them to the key object api and what we can get so",
    "start": "1355200",
    "end": "1363600"
  },
  {
    "start": "1362000",
    "end": "1362000"
  },
  {
    "text": "let's start with creating a new view there are a lot of code but",
    "start": "1363600",
    "end": "1371120"
  },
  {
    "text": "it's quite simple i guess first of all we want to create children view class that should",
    "start": "1371120",
    "end": "1378640"
  },
  {
    "text": "inherit from special utility class that provide by ranges v3 library called viewfs8",
    "start": "1378640",
    "end": "1386840"
  },
  {
    "text": "and it's just children view of some type which is by default key object in",
    "start": "1386840",
    "end": "1392480"
  },
  {
    "text": "our case here you should define some auxiliary functions just",
    "start": "1392480",
    "end": "1398080"
  },
  {
    "text": "to this we have said have an access to all elements it needs",
    "start": "1398080",
    "end": "1404400"
  },
  {
    "text": "then i decided to add structure for data that would hold root object",
    "start": "1404400",
    "end": "1411440"
  },
  {
    "text": "and the recursive generator from cppcoro we want to",
    "start": "1411440",
    "end": "1417760"
  },
  {
    "text": "return from our previous implementation and the thing is a structure called",
    "start": "1417760",
    "end": "1425120"
  },
  {
    "text": "cursor it's analog to iterator that just moving starting from the first",
    "start": "1425120",
    "end": "1432159"
  },
  {
    "text": "element to the next next section second until end like like a real cursor this one we also",
    "start": "1432159",
    "end": "1440080"
  },
  {
    "text": "should implement and on this slide some constructors are emitted they are boring just accept",
    "start": "1440080",
    "end": "1447200"
  },
  {
    "text": "some key object and invoke the function to return generator",
    "start": "1447200",
    "end": "1454720"
  },
  {
    "start": "1455000",
    "end": "1455000"
  },
  {
    "text": "so now cursor function first of all our cursor will be like",
    "start": "1455039",
    "end": "1461279"
  },
  {
    "text": "absolutely the same as an iterator so and here is an iterator of recursive generator from cppcoro",
    "start": "1461279",
    "end": "1469600"
  },
  {
    "text": "and very few functions like read then just reference the iterator then",
    "start": "1469600",
    "end": "1477760"
  },
  {
    "text": "function to move next it's kind of java style iterators function so we just",
    "start": "1477760",
    "end": "1484320"
  },
  {
    "text": "increment our iterator and the last function we need to implement",
    "start": "1484320",
    "end": "1490559"
  },
  {
    "text": "is the function to determine whether the end of",
    "start": "1490559",
    "end": "1497360"
  },
  {
    "text": "the sequence is reached or not this function accepts the default",
    "start": "1497360",
    "end": "1503039"
  },
  {
    "text": "sentinel t and that's pretty much it also please",
    "start": "1503039",
    "end": "1509600"
  },
  {
    "text": "pay your attention that this cursor is single pass which is important for",
    "start": "1509600",
    "end": "1516320"
  },
  {
    "text": "iterating over three because if it was like multi-pass cursor uh some chords like for example",
    "start": "1516320",
    "end": "1523039"
  },
  {
    "text": "codes and ranges would try to take an advantage over multiple pass cursor",
    "start": "1523039",
    "end": "1529440"
  },
  {
    "text": "for example that might used to pre-allocate some space when we transformed our pipe to",
    "start": "1529440",
    "end": "1536559"
  },
  {
    "text": "a vector and yeah it's important to keep this cursor single pass nothing you can",
    "start": "1536559",
    "end": "1543440"
  },
  {
    "text": "do in this implementation is single pass because for example some",
    "start": "1543440",
    "end": "1551039"
  },
  {
    "text": "some functions are not implemented naming like lens or functions to just check the",
    "start": "1551039",
    "end": "1557840"
  },
  {
    "text": "quality with a regular object but you can explicitly specify that",
    "start": "1557840",
    "end": "1563200"
  },
  {
    "text": "cursor is single path just by defining some value in here",
    "start": "1563200",
    "end": "1569440"
  },
  {
    "text": "so yeah that's it about implementation and now uh",
    "start": "1569679",
    "end": "1576880"
  },
  {
    "start": "1573000",
    "end": "1573000"
  },
  {
    "text": "let's move to the basic functionality ranges also provides",
    "start": "1576880",
    "end": "1582400"
  },
  {
    "text": "a separate function called to make pipeable it's just a rubber to nicely make your functions like or",
    "start": "1582400",
    "end": "1589360"
  },
  {
    "text": "callable objects chainable so we can use this pipe operator",
    "start": "1589360",
    "end": "1594880"
  },
  {
    "text": "and in our case for for children we just returns just accepts uh an object",
    "start": "1594880",
    "end": "1601919"
  },
  {
    "text": "that's might be like a pointer or reference to root object and then returns children view that's",
    "start": "1601919",
    "end": "1608400"
  },
  {
    "text": "pretty much it so there are two functions the first function",
    "start": "1608400",
    "end": "1613919"
  },
  {
    "text": "for like you know pass through all children recursively and the second one we say parameters so you can specify",
    "start": "1613919",
    "end": "1621279"
  },
  {
    "text": "whether you want to find on the direct children or find children recursive",
    "start": "1621279",
    "end": "1629279"
  },
  {
    "text": "now how we can implement filtering by type because standard functionality also supports it",
    "start": "1630240",
    "end": "1637520"
  },
  {
    "text": "here we have implementation again super close to what we have in standard",
    "start": "1637520",
    "end": "1643279"
  },
  {
    "text": "key object this one we want to remove all extra things from",
    "start": "1643279",
    "end": "1648799"
  },
  {
    "text": "t like const qualifier volatile and pointer then we use",
    "start": "1648799",
    "end": "1655840"
  },
  {
    "text": "a special methods cast which would return true if it's possible to cast",
    "start": "1655840",
    "end": "1662159"
  },
  {
    "text": "object to this type and then we pipe it to transform",
    "start": "1662159",
    "end": "1667360"
  },
  {
    "text": "and just cast it to type if it's okay to do and also",
    "start": "1667360",
    "end": "1674559"
  },
  {
    "text": "please take into account that the assumption is that we are working with key object",
    "start": "1674559",
    "end": "1679840"
  },
  {
    "text": "hierarchy and in this hierarchy on the class based on queue object are",
    "start": "1679840",
    "end": "1685200"
  },
  {
    "text": "acceptable so if you want to like use it for different class or for",
    "start": "1685200",
    "end": "1691360"
  },
  {
    "text": "different hierarchies you need to at least replace this one",
    "start": "1691360",
    "end": "1697039"
  },
  {
    "text": "with a dynamic cast probably or something like that and yeah it might be slightly more mess",
    "start": "1697039",
    "end": "1704480"
  },
  {
    "text": "in implementation now two more methods two more chunks we",
    "start": "1704480",
    "end": "1710799"
  },
  {
    "text": "can chain those are quite straightforward so it's like by name filtering by name so we just",
    "start": "1710799",
    "end": "1717600"
  },
  {
    "text": "return a filter view with some sort of predicate and the same for regular expression",
    "start": "1717600",
    "end": "1725760"
  },
  {
    "text": "we just checking if the name has much and that's it so and",
    "start": "1725760",
    "end": "1734240"
  },
  {
    "text": "now let's talk a bit about usage examples",
    "start": "1734240",
    "end": "1739840"
  },
  {
    "text": "so now since we have this fancy model interface we can do things like this",
    "start": "1742799",
    "end": "1749520"
  },
  {
    "start": "1743000",
    "end": "1743000"
  },
  {
    "text": "for example have some root object then i'm creating a tree creating some",
    "start": "1749520",
    "end": "1755840"
  },
  {
    "text": "children and then i can iterate over this tree",
    "start": "1755840",
    "end": "1761600"
  },
  {
    "text": "like like this so only again root by cute column children and this court will",
    "start": "1761600",
    "end": "1769440"
  },
  {
    "text": "be building children until there are some of them and the second one is almost the same",
    "start": "1769440",
    "end": "1777200"
  },
  {
    "text": "but it stops when um direct children amount exceeded",
    "start": "1777200",
    "end": "1783760"
  },
  {
    "start": "1784000",
    "end": "1784000"
  },
  {
    "text": "so now we can do several different filtering by type name or regular expression",
    "start": "1784000",
    "end": "1790880"
  },
  {
    "text": "and here the first one it's like we have here a",
    "start": "1790880",
    "end": "1798320"
  },
  {
    "text": "chain of children and then we apply we created before you could call them",
    "start": "1798320",
    "end": "1804960"
  },
  {
    "text": "column this endoscope type of star and",
    "start": "1804960",
    "end": "1810159"
  },
  {
    "text": "by the same menu we can filter everything by name or by regular expression and",
    "start": "1810159",
    "end": "1816720"
  },
  {
    "text": "then i think is that those functions don't necessarily to be a part of library or can be easily extended",
    "start": "1816720",
    "end": "1825039"
  },
  {
    "text": "or added because now you need only to add a small chunk you don't need to modify the",
    "start": "1825039",
    "end": "1831679"
  },
  {
    "text": "entire signature or function and this is kind of cool",
    "start": "1831679",
    "end": "1837840"
  },
  {
    "start": "1838000",
    "end": "1838000"
  },
  {
    "text": "so but from time to time as i mentioned before you need to make a copy of the things and",
    "start": "1838000",
    "end": "1845200"
  },
  {
    "text": "here this lazy evaluation or lazy traversing is not",
    "start": "1845200",
    "end": "1850960"
  },
  {
    "text": "super efficient i would say but not too less efficient",
    "start": "1850960",
    "end": "1856000"
  },
  {
    "text": "as we will say in a bit on benchmarks so there are two methods the first one",
    "start": "1856000",
    "end": "1862159"
  },
  {
    "text": "is recommended for now it's a crunches column column to stud vector root pipe children and",
    "start": "1862159",
    "end": "1870240"
  },
  {
    "text": "the last one is you can just use plain cast but this one is not",
    "start": "1870240",
    "end": "1876240"
  },
  {
    "text": "recommended so it's already i guess when i tried it last time i got a compiler warning this one is",
    "start": "1876240",
    "end": "1882640"
  },
  {
    "text": "duplicated so now the interesting thing benchmarks",
    "start": "1882640",
    "end": "1890000"
  },
  {
    "start": "1890000",
    "end": "1890000"
  },
  {
    "text": "so i tried on the following test environment with kind of oldish",
    "start": "1890000",
    "end": "1895919"
  },
  {
    "text": "linux but with a new clank i guess the newest available",
    "start": "1895919",
    "end": "1900960"
  },
  {
    "text": "and with the following flex so clank unfortunately required this slowly flag and",
    "start": "1900960",
    "end": "1909760"
  },
  {
    "text": "if no without exception because um qg itself can pass without exceptions",
    "start": "1909919",
    "end": "1916399"
  },
  {
    "text": "so they should be like more or less the same same equal conditions",
    "start": "1916399",
    "end": "1921679"
  },
  {
    "text": "and i added stood to any standard so let's see first of all",
    "start": "1921679",
    "end": "1930240"
  },
  {
    "text": "the first test was like passing through the entire tree and changing the object name",
    "start": "1930240",
    "end": "1937440"
  },
  {
    "text": "the blue one is a regular key object",
    "start": "1937440",
    "end": "1943360"
  },
  {
    "text": "the object one children method the red one is what we implemented and the yellow",
    "start": "1943840",
    "end": "1949919"
  },
  {
    "text": "one is the slowest one but is expected when we want to also not only pass through",
    "start": "1949919",
    "end": "1956000"
  },
  {
    "text": "but also make a copy so and the interesting thing you can notice that",
    "start": "1956000",
    "end": "1961279"
  },
  {
    "text": "i implemented just experimental solution without any optimization even intentionally",
    "start": "1961279",
    "end": "1969360"
  },
  {
    "text": "from some point but it works almost the same as a regular one",
    "start": "1969360",
    "end": "1975279"
  },
  {
    "text": "in terms of time so highly unlikely would you have hierarchies more than even",
    "start": "1975279",
    "end": "1981360"
  },
  {
    "text": "one million elements but typically it's like half million and",
    "start": "1981360",
    "end": "1986399"
  },
  {
    "text": "something like that and this works like the same in terms of time",
    "start": "1986399",
    "end": "1992960"
  },
  {
    "text": "so which is good the second thing test i performed i tried to filter",
    "start": "1992960",
    "end": "1999200"
  },
  {
    "text": "it based on some criteria like by type and then trying to change name so results here",
    "start": "1999200",
    "end": "2007120"
  },
  {
    "text": "are not that good for the new implementation so",
    "start": "2007120",
    "end": "2012960"
  },
  {
    "text": "the blue one or the standard implementation is a bit",
    "start": "2013120",
    "end": "2019200"
  },
  {
    "text": "faster even for small value but still just benchmark and i guess there are rooms to",
    "start": "2019200",
    "end": "2026320"
  },
  {
    "text": "optimize a lot of things even to",
    "start": "2026320",
    "end": "2031440"
  },
  {
    "text": "create or use a custom allocator to preserve coroutine state and so on",
    "start": "2031440",
    "end": "2038320"
  },
  {
    "text": "so a lot of things to improve and the last test is kind of funny i",
    "start": "2038320",
    "end": "2045039"
  },
  {
    "text": "just compared fallback tests i wrote with a regular implementation and",
    "start": "2045039",
    "end": "2051118"
  },
  {
    "text": "surprisingly just a marriage in quest container gives good result especially",
    "start": "2051119",
    "end": "2057040"
  },
  {
    "text": "for latch numb large number of elements but for one billion is also kind of",
    "start": "2057040",
    "end": "2063118"
  },
  {
    "text": "noticeable so now let's talk a bit about present",
    "start": "2063119",
    "end": "2070240"
  },
  {
    "text": "ones of the current implementation so like the first bullet is that the easy to add",
    "start": "2070240",
    "end": "2077919"
  },
  {
    "text": "a new functionality now it's a definitely a pro so we can even with this",
    "start": "2077919",
    "end": "2083440"
  },
  {
    "text": "long release cycle of cute now it's possible to extend this functionality if you want",
    "start": "2083440",
    "end": "2091040"
  },
  {
    "text": "just add one more chunk and that's it without touching interface at all",
    "start": "2091040",
    "end": "2096158"
  },
  {
    "text": "we got all of these like advantages of functional approach operations are composable now which",
    "start": "2096159",
    "end": "2102480"
  },
  {
    "text": "leads to cleaner code and cleaner interface all things are header only so you can",
    "start": "2102480",
    "end": "2110000"
  },
  {
    "text": "use even third party libraries like wrenches dash v3 or cpp core those are header on them",
    "start": "2110000",
    "end": "2116880"
  },
  {
    "text": "mostly if you don't need some parts of cpp core and",
    "start": "2116880",
    "end": "2123440"
  },
  {
    "text": "this approach is lazy so it's not evaluated immediately only on demand",
    "start": "2123440",
    "end": "2128720"
  },
  {
    "text": "all of those things can be implemented without any additional libraries if you want and the cool thing",
    "start": "2128720",
    "end": "2136160"
  },
  {
    "text": "the trenches and core routines are officially available in c plus plus 20 so you can use them of course there are",
    "start": "2136160",
    "end": "2144240"
  },
  {
    "text": "a few coins and the first thing is raisins because as i mentioned from time to time you",
    "start": "2144240",
    "end": "2151440"
  },
  {
    "text": "need to create like the copy of the entire tree to prevent any hassle when it starts",
    "start": "2151440",
    "end": "2158720"
  },
  {
    "text": "rebuilding or some notes might be removed moved and so on uh just imagine that you have",
    "start": "2158720",
    "end": "2165040"
  },
  {
    "text": "like this core routine suspending somewhere in the middle of tree and then the tree cells start rebuilding",
    "start": "2165040",
    "end": "2171520"
  },
  {
    "text": "so you can get dungeon references and to find behavior and so on",
    "start": "2171520",
    "end": "2177359"
  },
  {
    "text": "the second thing is well it's really controversial because different",
    "start": "2177599",
    "end": "2182800"
  },
  {
    "text": "users or programmers they have different experience in terms of techniques",
    "start": "2182800",
    "end": "2189839"
  },
  {
    "text": "and not for all people it's not really convenient to use those approaches uh the second the third",
    "start": "2189839",
    "end": "2196960"
  },
  {
    "text": "one is for a child so it's kind of i guess depends on scenario you use but",
    "start": "2196960",
    "end": "2205520"
  },
  {
    "text": "as i mentioned before uh yeah if you use a lazy approach and then to start rebuilding",
    "start": "2205520",
    "end": "2211520"
  },
  {
    "text": "you're in denture and the last one is not optimized for now in terms of speed and",
    "start": "2211520",
    "end": "2217760"
  },
  {
    "text": "memory consumption i would say i used massive and it does consume too much memory",
    "start": "2217760",
    "end": "2225119"
  },
  {
    "text": "i guess but i didn't include those tests here so but yeah the rooms for improvement",
    "start": "2225119",
    "end": "2234640"
  },
  {
    "text": "so here i collected a few useful links i will share the slides so",
    "start": "2234640",
    "end": "2241359"
  },
  {
    "start": "2235000",
    "end": "2235000"
  },
  {
    "text": "all of the things are clickable and first of all i have of course experimental implementation",
    "start": "2241359",
    "end": "2248800"
  },
  {
    "text": "you can play with and there is also",
    "start": "2248800",
    "end": "2255119"
  },
  {
    "text": "is v3 you can read it it's a good one ranges documentation and cvp coral",
    "start": "2255119",
    "end": "2263440"
  },
  {
    "text": "and coroutine's documentation on official cpp reference site but i also recommend",
    "start": "2263440",
    "end": "2269119"
  },
  {
    "text": "you to use boost documentation it's a good source of knowledge as well",
    "start": "2269119",
    "end": "2274560"
  },
  {
    "text": "so yes i guess that's pretty much it thank you for watching and if there are",
    "start": "2274560",
    "end": "2281359"
  },
  {
    "text": "any questions just on it yourself and shoot or post in slack",
    "start": "2281359",
    "end": "2286720"
  },
  {
    "text": "i have it on the second monitor okay sounds like there are no questions so",
    "start": "2286720",
    "end": "2293440"
  },
  {
    "text": "thank you again",
    "start": "2293440",
    "end": "2299838"
  },
  {
    "text": "you",
    "start": "2301599",
    "end": "2303680"
  }
]