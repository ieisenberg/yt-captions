[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "are we live yes excellent good good afternoon um so what we can talk about",
    "start": "9639",
    "end": "16000"
  },
  {
    "text": "for the next hour uh is thinking outside the synchronization quadrant which means",
    "start": "16000",
    "end": "21680"
  },
  {
    "start": "17000",
    "end": "17000"
  },
  {
    "text": "I have to say some meaningful things about what I mean by that terminology um and uh this talk is placed in the C++",
    "start": "21680",
    "end": "32680"
  },
  {
    "text": "track I would say that probably uh half the talk relates to C++",
    "start": "32680",
    "end": "38120"
  },
  {
    "text": "um specifically um the code the code that I'm going to show is C++ some um",
    "start": "38120",
    "end": "43239"
  },
  {
    "text": "but the principles that I'm looking at are actually far more General um so",
    "start": "43239",
    "end": "49800"
  },
  {
    "text": "uh so it it depends on what you're coming in for um there should be something here for",
    "start": "49800",
    "end": "57198"
  },
  {
    "text": "you um yeah uh code um architecture architecture good let's talk about",
    "start": "58039",
    "end": "64119"
  },
  {
    "text": "architecture um so there are a number of different definitions floating around the one that",
    "start": "64119",
    "end": "70720"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "I generally um find the most effective uh the most useful the most constructive uh is this one from greedy B",
    "start": "70720",
    "end": "76960"
  },
  {
    "text": "architecture represents the significant design decisions that shape a system where significant is measured by cost of",
    "start": "76960",
    "end": "82799"
  },
  {
    "text": "change now this is very helpful because it gets away from the false ideas of scale um what is the natural scale SC of",
    "start": "82799",
    "end": "90200"
  },
  {
    "text": "software unlike Building architecture it's not as obvious um but there is a",
    "start": "90200",
    "end": "95920"
  },
  {
    "text": "scale here effort how much how much effort is that to change very simple way of indicating and discovering whether or",
    "start": "95920",
    "end": "102159"
  },
  {
    "text": "not something is architectural is whether if you make a suggestion of a change and somebody's face goes pale and",
    "start": "102159",
    "end": "107840"
  },
  {
    "text": "we can't do that or no no no we never do that if people say you can't do it then it's architectural okay um and therefore",
    "start": "107840",
    "end": "116360"
  },
  {
    "text": "that means um that it can relate to the smallest language feature as well as the more obvious major technology choices",
    "start": "116360",
    "end": "122600"
  },
  {
    "text": "now one such thing that shapes a system and is non-trivial to change it's",
    "start": "122600",
    "end": "127799"
  },
  {
    "text": "clearly something like um concurrency uh the presence of concurrency in any form now one of the",
    "start": "127799",
    "end": "134640"
  },
  {
    "text": "things I find interesting um about concurrency uh and parallelism and our",
    "start": "134640",
    "end": "140680"
  },
  {
    "text": "various definitions of all of these uh is the is the way that we have ended up accidentally being programmed",
    "start": "140680",
    "end": "147440"
  },
  {
    "text": "to think in a particular way you can almost play a word association game in fact this is what I did a few years ago",
    "start": "147440",
    "end": "153680"
  },
  {
    "text": "I did this with uh in two workshops I did play this word association game and I got the same results each time which I",
    "start": "153680",
    "end": "159200"
  },
  {
    "text": "found absolutely fascinating first idea that comes into your head when I say concurrency and as",
    "start": "159200",
    "end": "165319"
  },
  {
    "text": "a room everybody said threads so in other words it what I found interesting is that was with the um the the junior",
    "start": "165319",
    "end": "173159"
  },
  {
    "text": "programmers but in another company with a whole load of advanced developers who were clear who actually wanted to",
    "start": "173159",
    "end": "179159"
  },
  {
    "text": "discuss higher or higher level mechanisms it was fascinating if you catch people off guard threads oh damn I",
    "start": "179159",
    "end": "185720"
  },
  {
    "text": "didn't mean to say threads I meant to say something like you know higher level and meaningful it's still in there it's still deep down",
    "start": "185720",
    "end": "192920"
  },
  {
    "text": "there threads are the most powerful construct um for introducing uh",
    "start": "192920",
    "end": "199959"
  },
  {
    "text": "concurrency in um in any code base and they are powerful like a go-to is powerful there was a an interesting",
    "start": "199959",
    "end": "206760"
  },
  {
    "text": "proof um in the early 1970s that goto was the most powerful sequential construct and what was meant by power is",
    "start": "206760",
    "end": "213200"
  },
  {
    "text": "you could build any other sequential construct out of it and then you have to throw the",
    "start": "213200",
    "end": "218239"
  },
  {
    "text": "Spider-Man quote at this point with great power comes great responsibility and it turns out we're not quite as responsible as we thought we were the",
    "start": "218239",
    "end": "224799"
  },
  {
    "text": "same goes for Threads you can build pretty much anything else out of threading constructs that that expresses",
    "start": "224799",
    "end": "230280"
  },
  {
    "text": "concurrency the problem is they are too primitive they are too raw they are effectively the jump statement um at",
    "start": "230280",
    "end": "236439"
  },
  {
    "text": "this level so we acknowledge that there are going to be threads but that may not be where we want to write our codee we",
    "start": "236439",
    "end": "242560"
  },
  {
    "text": "want to leave those further down now the word association does not end there",
    "start": "242560",
    "end": "249239"
  },
  {
    "text": "because I threw another one at people I said threads and they all said locks or",
    "start": "249239",
    "end": "254280"
  },
  {
    "text": "synchronization in other words oh that's kind of interesting so hang on why are you guys doing threading oh we're doing",
    "start": "254280",
    "end": "259320"
  },
  {
    "text": "threading because we want things to go faster why are you doing locking because we want them to go slower well they didn't say that but that's what they",
    "start": "259320",
    "end": "265639"
  },
  {
    "text": "mean locks are the anti-th threat the purpose of a lock is to eliminate",
    "start": "265639",
    "end": "271680"
  },
  {
    "text": "concurrency so if your goal is to get some of this then it's fairly clear",
    "start": "271680",
    "end": "278800"
  },
  {
    "text": "whilst that may give you it this taketh away and uh this is a a struggle that we",
    "start": "278800",
    "end": "284680"
  },
  {
    "text": "we often have um there's a a lovely quote and I realized I've just I just",
    "start": "284680",
    "end": "290000"
  },
  {
    "text": "realized I've forgotten to put it in this talk um originally from David butenhoff uh who wrote the book on posix",
    "start": "290000",
    "end": "297160"
  },
  {
    "text": "threads and he said you know what we made a mistake calling them mutexes we made a mistake adopting Esa dystra",
    "start": "297160",
    "end": "303919"
  },
  {
    "text": "terminology we should have called them bottlenecks because then when developers talk to each other and have a",
    "start": "303919",
    "end": "310080"
  },
  {
    "text": "conversation they're more likely to think twice uh oh you need to put a bottleneck in here hm doesn't sound",
    "start": "310080",
    "end": "315520"
  },
  {
    "text": "quite so good whereas mutex has this kind of like lovely whiff of computer science about it yeah bottleneck not so",
    "start": "315520",
    "end": "322880"
  },
  {
    "text": "good okay so what we realize is I'm going to pick on this quote from somebody actually talking about real",
    "start": "322880",
    "end": "328280"
  },
  {
    "text": "Building architecture architecture is the art of how to waste space but I'm going to adapt it because when it comes to code what we realize it's about the",
    "start": "328280",
    "end": "335520"
  },
  {
    "text": "the the ability and skill of wasting time so let's talk about this thing the",
    "start": "335520",
    "end": "341319"
  },
  {
    "text": "synchronization quadrum um I Dre I found that I was trying to sort of classify",
    "start": "341319",
    "end": "347479"
  },
  {
    "text": "things simply for a team a few years ago we ran a workshop on their on their",
    "start": "347479",
    "end": "352880"
  },
  {
    "text": "development practices and some of the issues they were having and I found that one of the simplest ways to clarify um",
    "start": "352880",
    "end": "360880"
  },
  {
    "text": "for them uh this I I put it up on a flip chart and then realized it actually was a really useful um classification",
    "start": "360880",
    "end": "366800"
  },
  {
    "text": "mechanism um this let's let's just break the quadrant diagrams first of all it's",
    "start": "366800",
    "end": "371840"
  },
  {
    "text": "the afternoon so your metabolism your brain and everything just gone into a very they've gone into a sleep State um",
    "start": "371840",
    "end": "377319"
  },
  {
    "text": "so a quadrant diagram is is your friend at this point it divides the universe into four and there are two axes and",
    "start": "377319",
    "end": "383639"
  },
  {
    "text": "there are two things on each axis it really doesn't get much simpler than that and um as with most quadrant",
    "start": "383639",
    "end": "389880"
  },
  {
    "text": "diagrams there normally one quadrant that's either very very good or a quadrant that is very very bad now I'm G",
    "start": "389880",
    "end": "395280"
  },
  {
    "text": "to I'm going to break this one down to um uh mutability there is an AIS of mutability the data that you are dealing",
    "start": "395280",
    "end": "402360"
  },
  {
    "text": "with is either mutable or it is immutable and then there is the degree of sharing between threads your data is",
    "start": "402360",
    "end": "409400"
  },
  {
    "text": "either unshared or shared now you can you can subdivide this far far further",
    "start": "409400",
    "end": "414759"
  },
  {
    "text": "you can say oh I've got a single I've got a single writer and multiple readers that's great that's fine but that's over in in the shared quadrant I'm I'm going",
    "start": "414759",
    "end": "420479"
  },
  {
    "text": "to keep this quadrant like and so here we have four places",
    "start": "420479",
    "end": "426759"
  },
  {
    "text": "your code can",
    "start": "426759",
    "end": "429440"
  },
  {
    "text": "be I'm just going to make this really really clear red Nature's color for bad or um",
    "start": "432680",
    "end": "441680"
  },
  {
    "text": "in the in uh in Far Eastern cultures and contractors the color of Celebration",
    "start": "441680",
    "end": "447840"
  },
  {
    "text": "okay um this this is the synchronization quadrant okay you have mutable data and",
    "start": "447840",
    "end": "453919"
  },
  {
    "text": "you have state that is shared between your threads you will need some form of",
    "start": "453919",
    "end": "460520"
  },
  {
    "text": "explicit synchronization in your code okay I'm not saying you don't need synchronization anywhere else is just",
    "start": "460520",
    "end": "466800"
  },
  {
    "text": "that the synchronization either belongs lower down at the lowest level actually",
    "start": "466800",
    "end": "472360"
  },
  {
    "text": "uh in the processor or it belongs in a library construct so there may be",
    "start": "472360",
    "end": "477400"
  },
  {
    "text": "synchronization it's just that we don't want it all over youre code so but there is this thing but there's something",
    "start": "477400",
    "end": "483000"
  },
  {
    "text": "about this quadrant this is where most code ends up living there are four possibilities but like moths drawn to a",
    "start": "483000",
    "end": "489800"
  },
  {
    "text": "flame we are drawn our code bases are drawn into this vortex in the top right",
    "start": "489800",
    "end": "495599"
  },
  {
    "text": "hand corner um and I have wondered about this for a while and I I realized having um uh I I I got a very very very long",
    "start": "495599",
    "end": "504080"
  },
  {
    "text": "time ago um I uh got a master's degree in parallel computer systems and um",
    "start": "504080",
    "end": "511120"
  },
  {
    "text": "so you know you kind of think everybody knows this stuff and actually turns out that they don't and You' just happened",
    "start": "511120",
    "end": "517240"
  },
  {
    "text": "to be been exposed to all this good knowledge and it turns out as the uh as",
    "start": "517240",
    "end": "522279"
  },
  {
    "text": "we tracked into the 90s and on um we ended up going into this quadrant over",
    "start": "522279",
    "end": "527560"
  },
  {
    "text": "here and I I often wondered about this and there's a simple cultural and historical reason um before threads",
    "start": "527560",
    "end": "534640"
  },
  {
    "text": "became commonplace all our code was on the left hand side because is quite by definition",
    "start": "534640",
    "end": "540560"
  },
  {
    "text": "you cannot share between threads if you only have one thread um so all the code was over here and for historical reasons",
    "start": "540560",
    "end": "546760"
  },
  {
    "text": "and our imperative background um and resource constraints and so on everything was in the top left hand",
    "start": "546760",
    "end": "553560"
  },
  {
    "text": "corner a few things wand down is the bottom left but pretty much most code we're talking about is in the top left",
    "start": "553560",
    "end": "558839"
  },
  {
    "text": "hand corner so when we added threading as a as a a language construct as a library construct as a feature in the",
    "start": "558839",
    "end": "565360"
  },
  {
    "text": "operating system um we ended up naturally moving straight over to the right with our code",
    "start": "565360",
    "end": "572240"
  },
  {
    "text": "and that led to the problem if you look at books that are written in the '90s up until the early 2000s whenever they",
    "start": "572240",
    "end": "579480"
  },
  {
    "text": "introduce concurrency they follow this idea they they're Mo mostly about the locks how do we lock stuff uh indeed a",
    "start": "579480",
    "end": "585079"
  },
  {
    "text": "lot of the literature published in the 70s and 80s was along these lines it's about how do we lock and all the",
    "start": "585079",
    "end": "590200"
  },
  {
    "text": "constructs and proposed language mechanisms are all in that uh kind of view in the last decade or so we've kind",
    "start": "590200",
    "end": "597839"
  },
  {
    "text": "of really shifted it's not the game that we didn't know that perhaps avoiding all of these this locking conversation was a",
    "start": "597839",
    "end": "604399"
  },
  {
    "text": "good thing it's just that it's become more normal and more excepted so yeah we've ended up unfortunately with an",
    "start": "604399",
    "end": "610320"
  },
  {
    "text": "awful lot of code over there so let's talk about the qualities of such code um when you're dealing with a code when",
    "start": "610320",
    "end": "615959"
  },
  {
    "text": "you're dealing with code there are it's kind of simple right- hand rule that I quite like to use um the axes are not",
    "start": "615959",
    "end": "622720"
  },
  {
    "text": "perfectly orthogonal but then again neither of my fingers so it's a good enough approximation but it allows you",
    "start": "622720",
    "end": "628040"
  },
  {
    "text": "to reason about code um reasonably simply um functional behaviors operational behaviors and developmental",
    "start": "628040",
    "end": "635240"
  },
  {
    "text": "qualities okay so in other words the functional and operational qualities functional as in uh the semantics the",
    "start": "635240",
    "end": "641880"
  },
  {
    "text": "operational as in resources as in what many people refer to uh as the ilities that are not related to the development",
    "start": "641880",
    "end": "648800"
  },
  {
    "text": "time the development Time stuff is your experience as a developer those other two refer to runtime",
    "start": "648800",
    "end": "654800"
  },
  {
    "text": "qualities and if we look at those we can see that obviously when you are improving performance you're moving",
    "start": "654800",
    "end": "660200"
  },
  {
    "text": "along the operational axis when you are refactoring you are maintaining a constant functional axis but you are",
    "start": "660200",
    "end": "667079"
  },
  {
    "text": "trying to improve some developmental quality and so on it's is kind of an easy way of kind of reasoning about uh",
    "start": "667079",
    "end": "672440"
  },
  {
    "text": "your code um if you add functionality you move along the functional axis okay",
    "start": "672440",
    "end": "678040"
  },
  {
    "text": "um if you fix a bug you move along the functional axis as well yeah you had a deficit of functionality now you make up",
    "start": "678040",
    "end": "683839"
  },
  {
    "text": "for it so it's a nice simple um model but I want to start first of all with the operational access this idea that",
    "start": "683839",
    "end": "691480"
  },
  {
    "text": "the qualities of execution are one of the reasons that people um are motivated to uh introduce some form of concurrency",
    "start": "691480",
    "end": "699000"
  },
  {
    "text": "uh into their code um it turns out Shakespeare was on this one as well I mentioned Hamlet this",
    "start": "699000",
    "end": "704560"
  },
  {
    "text": "morning um for memory management um but he's here talking about resources uh the monstrosity and love lady that the will",
    "start": "704560",
    "end": "710880"
  },
  {
    "text": "is infinite and the execution can find the desire is boundless and the ACT a slave to limit we're going to come back",
    "start": "710880",
    "end": "716200"
  },
  {
    "text": "to limits again uh in a bit um the problem is you do not have the ability to run things at infinite speed",
    "start": "716200",
    "end": "722519"
  },
  {
    "text": "everything has some kind of cost no matter how brilliant you think your architecture is it turns out this is the",
    "start": "722519",
    "end": "727920"
  },
  {
    "text": "point at which our beautiful abstractions meet the laws of physics um and there are costs to the",
    "start": "727920",
    "end": "735279"
  },
  {
    "text": "laws of physics there's a rather good um uh blog came across uh recently um link",
    "start": "735279",
    "end": "741480"
  },
  {
    "text": "is at the bottom uh what are the costs of various operations um from the kind of CPU",
    "start": "741480",
    "end": "747519"
  },
  {
    "text": "perspective uh and this is going to vary from processor to processor and so these are defined as ranges uh importantly",
    "start": "747519",
    "end": "753120"
  },
  {
    "text": "it's logarithmic um I rather like the uh display um the idea of Light how far",
    "start": "753120",
    "end": "758279"
  },
  {
    "text": "does light go uh travel during the time uh that this operation takes um clearly",
    "start": "758279",
    "end": "763760"
  },
  {
    "text": "he has a smaller laptop than me because it's not the diagonal on this one this is one light nanc I I often use",
    "start": "763760",
    "end": "770880"
  },
  {
    "text": "that as a measure when I'm telling people so I delighted so he's done the same thing that's one light nanc which sounds you know terribly fast Until you",
    "start": "770880",
    "end": "778000"
  },
  {
    "text": "realize that gives you a cycle time effectively if that's the distance over that that's a cycle time of 1 GHz which is not so smart it's really you exhaust",
    "start": "778000",
    "end": "785560"
  },
  {
    "text": "the possibilities of 1 GHz in a very short physical space um and then he goes through these",
    "start": "785560",
    "end": "791040"
  },
  {
    "text": "are orders of magnitude um the thing I want to draw your attention to thread context",
    "start": "791040",
    "end": "797760"
  },
  {
    "text": "switch um that's generally more expensive um in terms of cost the raw",
    "start": "797760",
    "end": "803440"
  },
  {
    "text": "direct costs lie between um a kernel call and a C++ um exception throw and",
    "start": "803440",
    "end": "809600"
  },
  {
    "text": "catch okay stack on winding the whole bit um but as he says in the article",
    "start": "809600",
    "end": "814959"
  },
  {
    "text": "there this is quite difficult to measure because there are loads of indirect costs that go on you can and and it turns out that um uh those can be",
    "start": "814959",
    "end": "823120"
  },
  {
    "text": "ridiculously expensive this is one of those things that and one of the great disappointments people have when they",
    "start": "823120",
    "end": "828560"
  },
  {
    "text": "fire up threads hoping for um a linear uh improvements what they suddenly",
    "start": "828560",
    "end": "836120"
  },
  {
    "text": "discover is they they're not getting them there's aost cost involved there are lots of costs effectively there are coordination costs so if we take um the",
    "start": "836120",
    "end": "843680"
  },
  {
    "text": "idea to understand whether or not you want to um introduce uh introduce threading if we take this idea",
    "start": "843680",
    "end": "850519"
  },
  {
    "text": "completion time for a single thread and we're working on some task um the classic view of division of labor we",
    "start": "850519",
    "end": "856920"
  },
  {
    "text": "going to throw end threads at this okay that's brilliant if everything's independent and everything is for free",
    "start": "856920",
    "end": "862639"
  },
  {
    "text": "and if you remember at school um you probably did some uh probably did some",
    "start": "862639",
    "end": "867680"
  },
  {
    "text": "electronics at some point point and um there was this rather brilliant um assumption that was made when you're",
    "start": "867680",
    "end": "873920"
  },
  {
    "text": "first introduced to electronics what is the resistance of a wire that connects all your components",
    "start": "873920",
    "end": "879279"
  },
  {
    "text": "together zero I know isn't that brilliant you're at school and you get superconducting wires how cool is that",
    "start": "879279",
    "end": "885199"
  },
  {
    "text": "yeah but it's a beautiful idealization so this is the way that people often think about threads it's just like we end up with zero cost this is this is",
    "start": "885199",
    "end": "891920"
  },
  {
    "text": "fantastic um even without worrying about that though we haven't even looked at the nature of the task we are assuming",
    "start": "891920",
    "end": "897680"
  },
  {
    "text": "that everything is perfectly independent it's not going to be there is some portion that you can do in parallel and",
    "start": "897680",
    "end": "904560"
  },
  {
    "text": "um tasks have interdependencies if they need to talk to one another share data do whatever then there will be some",
    "start": "904560",
    "end": "910160"
  },
  {
    "text": "portion they cannot do in parallel um so uh a lot of it depends on on P um this",
    "start": "910160",
    "end": "917600"
  },
  {
    "text": "is amal's law uh we haven't even we now we're going to get rid of the ideal wires now it's quite difficult to do this in a simple equation so I'm going",
    "start": "917600",
    "end": "923800"
  },
  {
    "text": "to uh uh I'm going to give you worst case and oversimplified view but get a",
    "start": "923800",
    "end": "928880"
  },
  {
    "text": "shape out of it um inter thread connections let's assume the worst case that everybody needs to talk to everybody else that is the absolute",
    "start": "928880",
    "end": "934720"
  },
  {
    "text": "worst case okay if you have that and you're a contractor this is magnificent you have a job for life okay um but",
    "start": "934720",
    "end": "942560"
  },
  {
    "text": "really you don't want to be in this kind of uh uh this kind of mess um let's let's assume that we've got some kind of",
    "start": "942560",
    "end": "948480"
  },
  {
    "text": "concept of an average communication overhead average is a very difficult concept uh to apply in this case but",
    "start": "948480",
    "end": "954040"
  },
  {
    "text": "let's just say we've got some kind of typical communication overhead and that it's going to give you a curve like this",
    "start": "954040",
    "end": "959160"
  },
  {
    "text": "what that basically means is the minute you introduce threading into minute you divide many tasks across threads you get",
    "start": "959160",
    "end": "964240"
  },
  {
    "text": "slow down not not it's not Universal but people are often surprised at how much benefit they do not get um this is the F",
    "start": "964240",
    "end": "971079"
  },
  {
    "text": "this is the first thing you need to remember it turns out that if you don't have the cost of a contact switch then",
    "start": "971079",
    "end": "977000"
  },
  {
    "text": "just being able to do things really fast sequentially turns out to be an absolute winner um we see this um classically in",
    "start": "977000",
    "end": "983000"
  },
  {
    "text": "the sense that um historically x windows servers um sequential they use basic",
    "start": "983000",
    "end": "988800"
  },
  {
    "text": "reactor pattern and they just handle something get on with it handle it get on with it and they just do lots of tasks very very quickly um and there is",
    "start": "988800",
    "end": "995880"
  },
  {
    "text": "no uh need for concurrency the minute you start hitting the concurrency barrier you have to ramp it up quite a",
    "start": "995880",
    "end": "1001240"
  },
  {
    "text": "bit and then you get something out of it um we're not even worrying about whatever else is going on in the",
    "start": "1001240",
    "end": "1006360"
  },
  {
    "text": "processor there's a whole load of other stuff going on I'm just I'm just skimming and lurking at the surface here if you want that Sean's doing a talk",
    "start": "1006360",
    "end": "1012560"
  },
  {
    "text": "later and he will talk more about stuff like that unless you've radically changed the slide since I last saw it um",
    "start": "1012560",
    "end": "1018319"
  },
  {
    "text": "so so I'm just scraping the surface here in the terms of the bits that you can easily do and touch okay just with these",
    "start": "1018319",
    "end": "1024319"
  },
  {
    "text": "constructs um so we have this and there's there is this question of locality and cost uh the landscape has",
    "start": "1024319",
    "end": "1030880"
  },
  {
    "text": "changed as well uh every few years we end up with a shift in our um architectural defaults the thing that",
    "start": "1030880",
    "end": "1037839"
  },
  {
    "text": "developers think oh that's so obvious you always do that and it turns out it's not um so we're at this point lovely",
    "start": "1037839",
    "end": "1044079"
  },
  {
    "text": "this um uh this is a Blog from two years back Adam Drake um did very simple uh",
    "start": "1044079",
    "end": "1049600"
  },
  {
    "text": "task command line tools can be over 200 times faster than your hadu cluster and he basically did this he",
    "start": "1049600",
    "end": "1055919"
  },
  {
    "text": "basically uh uh did this particular number crunching task um not particularly big data but um for some",
    "start": "1055919",
    "end": "1061559"
  },
  {
    "text": "people it would be big data obviously what we consider to be big data is a function of time um you know once upon a time one megabyte was quite Big Data um",
    "start": "1061559",
    "end": "1069039"
  },
  {
    "text": "so there is the point here that people have got into the habit of saying right distribute that you distribute that across multiple processes to the cloud",
    "start": "1069039",
    "end": "1075760"
  },
  {
    "text": "with it to the cloud with it uh so we wrote this in John and then he wrote it again using Bourn shell and ran it on a",
    "start": "1075760",
    "end": "1081600"
  },
  {
    "text": "single machine because it turns out the thing we now have it used to be cheap processes uh across a network turns out",
    "start": "1081600",
    "end": "1088200"
  },
  {
    "text": "that memory is way way better if you can keep it local do so you cannot beat the speed of light it really is it really is",
    "start": "1088200",
    "end": "1094080"
  },
  {
    "text": "that simple um so um this this is a key Point we've got an interpreted language",
    "start": "1094080",
    "end": "1099880"
  },
  {
    "text": "here but because it's able to use local memory um brilliant uh brilliant benefits now um speaking of that uh time",
    "start": "1099880",
    "end": "1106880"
  },
  {
    "text": "is and code um I'll do a very simple um I want to look at a couple of constructs and what what is involved here and I",
    "start": "1106880",
    "end": "1113280"
  },
  {
    "text": "also want to place this on the synchronization quadrant uh I'll do a very sort of simple naive kind of map",
    "start": "1113280",
    "end": "1119400"
  },
  {
    "text": "reduce approach we're going to map um some operation called mapping across um",
    "start": "1119400",
    "end": "1124520"
  },
  {
    "text": "a number of um tasks and I've just realized I've got I overdid that let's",
    "start": "1124520",
    "end": "1131799"
  },
  {
    "text": "uh a great thing about live stuff you spot the bugs and you",
    "start": "1131799",
    "end": "1141080"
  },
  {
    "text": "can fix the Box you saw nothing okay okay and that's",
    "start": "1141480",
    "end": "1149880"
  },
  {
    "text": "good there you go right um so we've got",
    "start": "1149880",
    "end": "1155240"
  },
  {
    "text": "um that and so then we end up with uh a whole of choreography um oops all the",
    "start": "1155240",
    "end": "1161320"
  },
  {
    "text": "sequencing has gone out of that one um right there we go that's what I'm",
    "start": "1161320",
    "end": "1168000"
  },
  {
    "text": "after um there's a whole load of um uh noise that we get from um uh C++ uh in its",
    "start": "1168000",
    "end": "1175440"
  },
  {
    "text": "kind of classic form um I've got my data from beginning to end I've got a mapping operation mapping I've got a reduction",
    "start": "1175440",
    "end": "1182039"
  },
  {
    "text": "operation that's going to combine everything with respect to an initial value and then I'm going to code this up",
    "start": "1182039",
    "end": "1187120"
  },
  {
    "text": "raw by hand I'm going to create a vector of threads and I'm going to um set up a",
    "start": "1187120",
    "end": "1193200"
  },
  {
    "text": "loop where I go and launch a thread we don't even know that this is going to be appropriate we haven't even looked at",
    "start": "1193200",
    "end": "1199320"
  },
  {
    "text": "what cores are available and you know I'm I'm going to hit the threading really really hard here um and uh fire",
    "start": "1199320",
    "end": "1206400"
  },
  {
    "text": "off um each task and then I'm going to wait and join on them and once I've got everything joined at that point I can",
    "start": "1206400",
    "end": "1213000"
  },
  {
    "text": "combine everything I can use accumulate accumulate is the standard Library default term for um what everybody else",
    "start": "1213000",
    "end": "1218720"
  },
  {
    "text": "calls reduce or fold so we've got that okay um now there's a few things we can",
    "start": "1218720",
    "end": "1224480"
  },
  {
    "text": "do to tidy up here um one of which is um C++ 14 allows",
    "start": "1224480",
    "end": "1229720"
  },
  {
    "text": "me to just deduce the result type and we're good with that um the C++",
    "start": "1229720",
    "end": "1235000"
  },
  {
    "text": "Concepts um technical specification allows me to get rid of all of that which is marvelous um so that that tiies",
    "start": "1235000",
    "end": "1242840"
  },
  {
    "text": "it up a bit um then if I take on board um the um parallel technical",
    "start": "1242840",
    "end": "1251640"
  },
  {
    "text": "specification um I can now get a parallel version of for each that can",
    "start": "1251640",
    "end": "1256840"
  },
  {
    "text": "vectorize uh I can give it a policy I can say right vectorize that I've also got one for accumulate that I can now do",
    "start": "1256840",
    "end": "1262799"
  },
  {
    "text": "a reduce so reduce did get spelled correctly at some point and we've got that so if we look here and relate that",
    "start": "1262799",
    "end": "1270720"
  },
  {
    "text": "the bit that can re although I'm doing the reduce although I'm doing the reduction um I I've said well let's assume that we that our operation will",
    "start": "1270720",
    "end": "1278080"
  },
  {
    "text": "actually work um I'm missing an argument in there I've just realized will actually um work fine uh from one",
    "start": "1278080",
    "end": "1285520"
  },
  {
    "text": "particular point of view um there is uh all the concurrency that we",
    "start": "1285520",
    "end": "1292279"
  },
  {
    "text": "can really squeeze out of this is going to be in the four each bit and the last bit is most likely better off done",
    "start": "1292279",
    "end": "1298120"
  },
  {
    "text": "sequentially so in that sense that",
    "start": "1298120",
    "end": "1303440"
  },
  {
    "text": "code is from the point of view of the um synchronization quadrant the first part",
    "start": "1303440",
    "end": "1309880"
  },
  {
    "text": "assumes that nothing is shared each piece of data is independent therefore able to fire everything off in",
    "start": "1309880",
    "end": "1316159"
  },
  {
    "text": "parallel um so there's no no locking there there is a synchronization point at the end but that is hidden from us",
    "start": "1316159",
    "end": "1321760"
  },
  {
    "text": "and then again for the last Point um but portion that can really be done in parallel p is the first part okay so",
    "start": "1321760",
    "end": "1328679"
  },
  {
    "text": "there's another aspect here functionality people often throw threads at their code um because they want they",
    "start": "1328679",
    "end": "1334400"
  },
  {
    "text": "want to express functionality why does that make sense normally it's performance actually we used threads for",
    "start": "1334400",
    "end": "1340320"
  },
  {
    "text": "a very long time before we got multicore in fact one of the um first times that I",
    "start": "1340320",
    "end": "1346120"
  },
  {
    "text": "was using threading was definitely well well before uh the multi-core era and",
    "start": "1346120",
    "end": "1351279"
  },
  {
    "text": "our motivation was quite different it was the expression of functionality where where things are independent I",
    "start": "1351279",
    "end": "1356480"
  },
  {
    "text": "don't want to have to write my own scheduler to make them independent I would like to be able to say there's this going on and there's this other",
    "start": "1356480",
    "end": "1362480"
  },
  {
    "text": "thing and feel free to even to leave them as as and when so not getting true parallelism but um but some form of",
    "start": "1362480",
    "end": "1368840"
  },
  {
    "text": "concurrency the idea that I want decoupling between tasks so from that point of view we're saying threading not",
    "start": "1368840",
    "end": "1375559"
  },
  {
    "text": "as a performance gain but as a form of decoupling these things are independent why should I have to make them dependent",
    "start": "1375559",
    "end": "1381880"
  },
  {
    "text": "on one another um by dividing up the task manually and creating effectively my own shedul so there are Mo there are",
    "start": "1381880",
    "end": "1388120"
  },
  {
    "text": "reasons for doing this however the expressiveness is the bit that gets us and this is where um lurking in the top",
    "start": "1388120",
    "end": "1395360"
  },
  {
    "text": "right hand quadrant uh causes US problems a large fraction of the flaws in software development are due to programmers not fully understanding all",
    "start": "1395360",
    "end": "1402120"
  },
  {
    "text": "the possible States their code May execute in John karmac um of ID games",
    "start": "1402120",
    "end": "1408679"
  },
  {
    "text": "in multi-threaded in a multi-threaded environment the lack of understanding and resulting problems are greatly Amplified almost to the point of panic",
    "start": "1408679",
    "end": "1415400"
  },
  {
    "text": "if you are paying attention in other words we struggle to reason about state in a code",
    "start": "1415400",
    "end": "1421640"
  },
  {
    "text": "base we struggle more when there's state to change and then if we say by the way",
    "start": "1421640",
    "end": "1427840"
  },
  {
    "text": "things can happen out of sequence and whilst your back is turned then this is where the Panic sets in and if you do",
    "start": "1427840",
    "end": "1434159"
  },
  {
    "text": "not have a healthy sense of panic there is something wrong with you you've not reach some Zen State there is something",
    "start": "1434159",
    "end": "1439520"
  },
  {
    "text": "wrong with you if you are dealing at this level it's just like there's a lot changing and there are threats um you",
    "start": "1439520",
    "end": "1444720"
  },
  {
    "text": "need to take a very rigorous approach to get away from that sense of panic so",
    "start": "1444720",
    "end": "1451320"
  },
  {
    "text": "um you know most common uh example best expressed um here um take me down to",
    "start": "1451320",
    "end": "1457039"
  },
  {
    "text": "concurrency City where green pretty is grass the girls the and are um it's",
    "start": "1457039",
    "end": "1462320"
  },
  {
    "text": "things happen out of sequence we have the problem of race conditions this is why people often say you know this is",
    "start": "1462320",
    "end": "1467360"
  },
  {
    "text": "why I need locks the problem is that we have this programmed into us to such a degree that we people do not question",
    "start": "1467360",
    "end": "1473679"
  },
  {
    "text": "why they have locks and I had this conversation with uh a group the conversation was interesting because I said why do you have locks and they said",
    "start": "1473679",
    "end": "1479279"
  },
  {
    "text": "because we have threads and I said yeah but that's not a reason why do you have locks they're kind of looking at each other and they said well you know",
    "start": "1479279",
    "end": "1485200"
  },
  {
    "text": "because because we got threads and well yeah because otherwise it wouldn't be safe well why would it not be safe why",
    "start": "1485200",
    "end": "1490559"
  },
  {
    "text": "are you writing unsafe code that's always a challenge why are you making your code unsafe and said well yeah",
    "start": "1490559",
    "end": "1495840"
  },
  {
    "text": "because we're sharing data and I said yep you still have have not given me a reason why you're locking and they're kind of looking at them each other as if",
    "start": "1495840",
    "end": "1502520"
  },
  {
    "text": "as if they were my teenage son you know in other words you're an idiot yeah",
    "start": "1502520",
    "end": "1507760"
  },
  {
    "text": "um and then I said okay so why but why does sharing stuff between threads cause",
    "start": "1507760",
    "end": "1512880"
  },
  {
    "text": "problems and they said well because one thread might change something and I said well hang on wait a minute that's really",
    "start": "1512880",
    "end": "1519600"
  },
  {
    "text": "important that's the most important thing you've said and you left it till last that should have been your opening",
    "start": "1519600",
    "end": "1525080"
  },
  {
    "text": "sentence we've got changeable State and it's been shared between threads not we assume that all state is changeable you",
    "start": "1525080",
    "end": "1531480"
  },
  {
    "text": "should consider State change to be a privilege not a right but the problem is",
    "start": "1531480",
    "end": "1537679"
  },
  {
    "text": "that the way we've been taught to program is the opposite way around and so therefore we fall into this default",
    "start": "1537679",
    "end": "1543320"
  },
  {
    "text": "way of thinking so um there are other surprises uh to be had when we start throwing locks at things um locks mean",
    "start": "1543320",
    "end": "1552120"
  },
  {
    "text": "ultimately you're going to end up with deadlocks um and there's a rather good summary of some of tanon bal's um points",
    "start": "1552120",
    "end": "1558760"
  },
  {
    "text": "uh on the site that I found several ways to address the problem of Deadlock just ignore it and hope it",
    "start": "1558760",
    "end": "1564799"
  },
  {
    "text": "doesn't happen U this actually has a name it's called the ostrich algorithm yeah it's",
    "start": "1564799",
    "end": "1570279"
  },
  {
    "text": "surprisingly popular and actually not as ineffective as you would think until you ramp up the number of states your system",
    "start": "1570279",
    "end": "1577640"
  },
  {
    "text": "can be in and the speed at which it runs then it gets more exciting and there are in there are also a lot of",
    "start": "1577640",
    "end": "1584159"
  },
  {
    "text": "systems um that uh a lot of uh Credit Systems where these problems were in",
    "start": "1584159",
    "end": "1590720"
  },
  {
    "text": "started to happen with code that had threads and been perfectly fine for years but they've been single core um",
    "start": "1590720",
    "end": "1598640"
  },
  {
    "text": "they hadn't actually they'd managed to sidestep the actual issues and there are some really subtle cases um that uh that",
    "start": "1598640",
    "end": "1605240"
  },
  {
    "text": "can cause you these um odd issues where well let's just restart the server again",
    "start": "1605240",
    "end": "1610440"
  },
  {
    "text": "you know we have to do it once a month we're not entirely sure why um but there are the wor there are the ones that",
    "start": "1610440",
    "end": "1615880"
  },
  {
    "text": "happen uh in a far worse sense we have to restart the server every minute is not viable so this can work but I'm I'm",
    "start": "1615880",
    "end": "1622640"
  },
  {
    "text": "not going to I wouldn't put I wouldn't put money on it um detection recovery if it happens take action so people spend a",
    "start": "1622640",
    "end": "1628240"
  },
  {
    "text": "lot of time coming up with very clever techniques um uh for doing this um",
    "start": "1628240",
    "end": "1633799"
  },
  {
    "text": "Dynamic avoidance by careful resource allocation check to see if resources granted and so on so in other words this",
    "start": "1633799",
    "end": "1639480"
  },
  {
    "text": "is kind of an amplification of the previous point but I prefer the fourth option prevention change the rules yeah",
    "start": "1639480",
    "end": "1646919"
  },
  {
    "text": "don't don't play that game um sometimes people do this by introduc imposing some kind of uh lock ordering or some form of",
    "start": "1646919",
    "end": "1653760"
  },
  {
    "text": "lock discipline and basically saying this code so it's an it becomes an architectural guideline none of this code has any locks this is the only code",
    "start": "1653760",
    "end": "1660760"
  },
  {
    "text": "that can have locks if you're going to plug this code into this code here are the rules if you follow these it all will be good and it's a detectable thing",
    "start": "1660760",
    "end": "1667399"
  },
  {
    "text": "in other words there should be no uh synchronization Primitives and you're only allowed to call this this object um",
    "start": "1667399",
    "end": "1673360"
  },
  {
    "text": "so these become a set of conventions and Architectural guidelines um rather than sort of happen stance and accidents um",
    "start": "1673360",
    "end": "1680240"
  },
  {
    "text": "so yes we can do that and we'll change the rules a little bit as we go now I want to close this kind of consideration",
    "start": "1680240",
    "end": "1686039"
  },
  {
    "text": "with this last aspect of Developmental qualities what are the developmental qualities when we start throwing um",
    "start": "1686039",
    "end": "1693399"
  },
  {
    "text": "things like threads at our code when we start actually introducing uh uh these lowlevel constructs or even higher level",
    "start": "1693399",
    "end": "1698559"
  },
  {
    "text": "constructs what are we getting well what would do we want from our code one of the things we want from our code is",
    "start": "1698559",
    "end": "1704159"
  },
  {
    "start": "1702000",
    "end": "1702000"
  },
  {
    "text": "habitability habitability is not a common phrase um that people throw around code but I've been uh very keen",
    "start": "1704159",
    "end": "1710000"
  },
  {
    "text": "on using it for the last few years I first came across it in this book uh by dick Gabriel patterns of software uh in",
    "start": "1710000",
    "end": "1715919"
  },
  {
    "text": "the late 90s uh and he makes this observation very simple observation we can apply to",
    "start": "1715919",
    "end": "1721159"
  },
  {
    "text": "any code based in any language um habitability is the characteristic of source code that enables programs and so",
    "start": "1721159",
    "end": "1727360"
  },
  {
    "text": "on people coming to the code later in its life to understand its construction and intentions and to change it comfortably and confidently it's a very",
    "start": "1727360",
    "end": "1733480"
  },
  {
    "text": "simple idea it's what we would Define as habitability in a in a in a home environment or in a building you want to",
    "start": "1733480",
    "end": "1740000"
  },
  {
    "text": "arrive in a code base and basically say yeah I I want this to be livable this should be comfortable place for me um to",
    "start": "1740000",
    "end": "1746640"
  },
  {
    "text": "work in um I shouldn't have to sit there and go oh please don't send me into that threaded nightmare um it should just be",
    "start": "1746640",
    "end": "1753120"
  },
  {
    "text": "a case of like right okay I understand what's going on um this is what we want in software developers can feel at home",
    "start": "1753120",
    "end": "1758360"
  },
  {
    "text": "they can place their hands on any item without having to think deeply about where it is that's that's what we would like but what we find in practice is a",
    "start": "1758360",
    "end": "1764440"
  },
  {
    "text": "lot of threaded code is in exactly the opposite place is uninhabitable you know it makes um uh uh it makes the rare",
    "start": "1764440",
    "end": "1773039"
  },
  {
    "text": "vacuum of space um uh seem like a nice place by comparison so how are we going",
    "start": "1773039",
    "end": "1778840"
  },
  {
    "text": "to get this well there are a number of different qualities we want from such code testability is quite a nice one qu",
    "start": "1778840",
    "end": "1784159"
  },
  {
    "text": "quite fond of that one um you'd like to know something about how it works but there are a number of misunderstandings",
    "start": "1784159",
    "end": "1789200"
  },
  {
    "text": "when we start talking about things like um you know test sometimes people have different takes on this uh and there are",
    "start": "1789200",
    "end": "1797000"
  },
  {
    "text": "different views now one of one of the ones that uh I I notice in a number of cases is where people say well you know",
    "start": "1797000",
    "end": "1803039"
  },
  {
    "text": "we can't really afford the time to do unit tests we don't find them particularly effective now sometimes that's actually an indication of",
    "start": "1803039",
    "end": "1808600"
  },
  {
    "text": "something deeper in your architecture um but I I came across this paper um couple of years ago uh",
    "start": "1808600",
    "end": "1815679"
  },
  {
    "text": "beginning of last year came across it and uh then twice more later in the year and uh it's rather interesting analysis",
    "start": "1815679",
    "end": "1822360"
  },
  {
    "text": "of certain distributed uh open source systems simple testing can prevent most critical failures um looking at actual",
    "start": "1822360",
    "end": "1829039"
  },
  {
    "text": "production failures but the statistic that leapt out at me um is the um they",
    "start": "1829039",
    "end": "1836960"
  },
  {
    "text": "actually revealed that something like 77% uh of the tests oh sorry 77% of the",
    "start": "1836960",
    "end": "1844320"
  },
  {
    "text": "problems could actually be revealed um with unit tests so over three quarters",
    "start": "1844320",
    "end": "1850000"
  },
  {
    "text": "of the problems that they found could have been discovered with the unit test you didn't actually have to fire up the whole system in order to discover these",
    "start": "1850000",
    "end": "1856080"
  },
  {
    "text": "uh but that does lead to the profound philosophical question um you know when people say we want our code to be unit",
    "start": "1856080",
    "end": "1861600"
  },
  {
    "start": "1857000",
    "end": "1857000"
  },
  {
    "text": "testable what do they mean and there's kind of an implied idea which is",
    "start": "1861600",
    "end": "1867880"
  },
  {
    "text": "um uh which is quite difficult um people tend to think of their code",
    "start": "1867880",
    "end": "1874120"
  },
  {
    "text": "like this they tend to think of their unit test they think ah when a unit test passes it shows the code is correct",
    "start": "1874120",
    "end": "1880440"
  },
  {
    "text": "actually that's not what you get and assuming the test is correct okay I'm going to give you that one okay let's",
    "start": "1880440",
    "end": "1886919"
  },
  {
    "text": "assume the test is correct that doesn't show you the code is correct uh when a unit test fails it shows the code is",
    "start": "1886919",
    "end": "1892120"
  },
  {
    "start": "1891000",
    "end": "1891000"
  },
  {
    "text": "incorrect it's the other way um and this is rather important because sometimes people will it gives you confidence but",
    "start": "1892120",
    "end": "1898080"
  },
  {
    "text": "that's not the same that's not the same measure and particularly where you start doing things concurrently you cannot",
    "start": "1898080",
    "end": "1903720"
  },
  {
    "text": "assume that green means it's good um it just means it's good so far you can be",
    "start": "1903720",
    "end": "1908840"
  },
  {
    "text": "sure that red is bad but green is a rigidly defined area of doubt and uncertainty um in this case you have to",
    "start": "1908840",
    "end": "1915000"
  },
  {
    "text": "be very cautious with it it's a level of confidence but it's not absolute confidence and the and the law of the",
    "start": "1915000",
    "end": "1920919"
  },
  {
    "text": "excluded middle does not apply here it's it's quite important to keep uh keep in mind um how do we achieve this what what",
    "start": "1920919",
    "end": "1927799"
  },
  {
    "text": "helps us with testability um what helps us get away from that idea of like well I can't really test it because the the",
    "start": "1927799",
    "end": "1933679"
  },
  {
    "text": "architecture is uh so sophisticated well actually it's not it's probably a lack of isolation isolation allows the code",
    "start": "1933679",
    "end": "1941440"
  },
  {
    "text": "to be testable but there's something else there's something far more important than that um isolation allows you to reason about it um we are",
    "start": "1941440",
    "end": "1948120"
  },
  {
    "text": "surprisingly good at reasoning about certain things um as long as they isolated from others but humans can be",
    "start": "1948120",
    "end": "1953480"
  },
  {
    "text": "easily flooded with too much connection when you have to take in take on board too much you will not cope with",
    "start": "1953480",
    "end": "1958919"
  },
  {
    "text": "everything you will Overlook something so there's this idea the more we are able to isolate things the more we are",
    "start": "1958919",
    "end": "1964000"
  },
  {
    "text": "able to reason about them in confidence this is why people bang on about modularity for and have been doing so for decades it's not for mathematical",
    "start": "1964000",
    "end": "1970480"
  },
  {
    "text": "Elegance it's actually the fact it respects uh Being Human um other qualities that may help us immutability",
    "start": "1970480",
    "end": "1977720"
  },
  {
    "text": "is one of those things that helps us things being in sequence it turns out we're really good with this happens then",
    "start": "1977720",
    "end": "1984720"
  },
  {
    "text": "that happens then the other happens but that is at one level it feels like it's at odds with our desire for concurrency",
    "start": "1984720",
    "end": "1990639"
  },
  {
    "text": "but we are good at reasoning sequentially um and one of the ways that we can reason about this and int and",
    "start": "1990639",
    "end": "1996440"
  },
  {
    "text": "kind of have the best of both worlds is by the introduction of asynchrony um but",
    "start": "1996440",
    "end": "2001760"
  },
  {
    "start": "1999000",
    "end": "1999000"
  },
  {
    "text": "obviously not everything that is asynchronous is easy to comprehend that's my my favorite one recently 10 things you'll find talking about",
    "start": "2001760",
    "end": "2007360"
  },
  {
    "text": "asynchronous operations uh beautiful um just one of one of the best I've come across uh in terms of it captures it",
    "start": "2007360",
    "end": "2014000"
  },
  {
    "text": "captures it rather elegantly um so there is this question if I take operations",
    "start": "2014000",
    "end": "2020440"
  },
  {
    "text": "that are synchronous and I would like to make them asynchronous what do I have to be",
    "start": "2020440",
    "end": "2027399"
  },
  {
    "text": "aware of well obviously there's a question of ordering um uh how do I pick up results and we",
    "start": "2027399",
    "end": "2035760"
  },
  {
    "text": "talk about uh futures um imposer for um immediately return a virtual data object",
    "start": "2035760",
    "end": "2041679"
  },
  {
    "text": "a virtual proxy effectively called the future also known as an IOU um to the client when it invokes a service this",
    "start": "2041679",
    "end": "2047919"
  },
  {
    "text": "future only provides a value to clients when the computation is complete now you can take future-based computation a very",
    "start": "2047919",
    "end": "2053878"
  },
  {
    "text": "very long way I propose not to because I also know that sha will be talking about that way way more deeply than I'm going to but I'm going to introduce the basic",
    "start": "2053879",
    "end": "2061358"
  },
  {
    "text": "concept here if we do this sequentially we get a result from a function now if we want to do something after it that is",
    "start": "2061359",
    "end": "2067398"
  },
  {
    "text": "independent then we've just forced forced this into an unnatural sequence",
    "start": "2067399",
    "end": "2072919"
  },
  {
    "text": "um there's a thing I want to do call a function there's another thing that I want to do and then I probably want to combine these things later um I could",
    "start": "2072919",
    "end": "2079760"
  },
  {
    "text": "switch them around but same issue so what we do is we separate this stuff out um and we say okay uh let's launch the",
    "start": "2079760",
    "end": "2087079"
  },
  {
    "text": "function asynchronously I'll pick it up as an IOU I'll go and do other stuff and when I actually need the result then I'll go and get it this is the kind of",
    "start": "2087079",
    "end": "2095398"
  },
  {
    "text": "basis of where we can start taking certain data flow ideas uh I will interject at this point though I think",
    "start": "2095399",
    "end": "2100720"
  },
  {
    "text": "the um C++ 11 Syntax for this sucks completely I had a model that I published a number of years ago actually",
    "start": "2100720",
    "end": "2107359"
  },
  {
    "text": "made it into proposal form where I decided that well I said basically everything should be a function and we",
    "start": "2107359",
    "end": "2112640"
  },
  {
    "text": "should follow a function model and the idea is that um a future um is",
    "start": "2112640",
    "end": "2119599"
  },
  {
    "text": "effectively a thread or is effectively a function object thread is a verb you take a function and you thread it it is",
    "start": "2119599",
    "end": "2124960"
  },
  {
    "text": "not a thing it is a verb that you do to something something what you get back is um something that allows you to join it",
    "start": "2124960",
    "end": "2130599"
  },
  {
    "text": "and pick up the result and everything is done as a function you thread things using functions the result of calling",
    "start": "2130599",
    "end": "2136000"
  },
  {
    "text": "one of those is itself a function if you want the value then that is itself a function so you can use that wherever",
    "start": "2136000",
    "end": "2141200"
  },
  {
    "text": "function objects are expected and you can extend this model quite a lot it's it's quite a regular one and fits with",
    "start": "2141200",
    "end": "2147000"
  },
  {
    "text": "the C++ style um this whole get thing doesn't really appeal to me however that's that's a by the buy um but there",
    "start": "2147000",
    "end": "2153720"
  },
  {
    "text": "is a there's a kind of an idea there that these ideas uh there's a that these uh practices have been around for a very long time and people have got different",
    "start": "2153720",
    "end": "2159960"
  },
  {
    "text": "ways of expressing them and different languages have different ways of expressing them but if we go beyond um go beyond",
    "start": "2159960",
    "end": "2166680"
  },
  {
    "text": "the future which sounds very dramatic if we go beyond the future I want to pick up on this General observation from",
    "start": "2166680",
    "end": "2171800"
  },
  {
    "text": "Russell Winder uh instead of using threads and shared memory as our programming model we can use process as",
    "start": "2171800",
    "end": "2177240"
  },
  {
    "text": "a message passing process here just means a protected independent state with executing code not necessarily an OS",
    "start": "2177240",
    "end": "2183880"
  },
  {
    "text": "process now we have a lot of terminology C we sometimes refer to such systems as message passing but it turns out We've",
    "start": "2183880",
    "end": "2190200"
  },
  {
    "text": "Ended up with lots of terminology um for the same constructs and subtle Shades and variations between them uh which I'd",
    "start": "2190200",
    "end": "2196599"
  },
  {
    "text": "like to explore um but Russell points to two things um languages such as erlang",
    "start": "2196599",
    "end": "2202119"
  },
  {
    "start": "2199000",
    "end": "2199000"
  },
  {
    "text": "and okam before it erlang uses the actor model and Aram uses something called CSP um have shown that processes a very",
    "start": "2202119",
    "end": "2208640"
  },
  {
    "text": "successful mechanism for programming concurrent and parallel systems and such systems do not have all the synchronization stresses that shared",
    "start": "2208640",
    "end": "2215359"
  },
  {
    "text": "memory multi-threaded systems have and more importantly they do not have the reasoning challenges um that such",
    "start": "2215359",
    "end": "2221119"
  },
  {
    "text": "systems have in other words the the code is very localized it feels very sequential it has this idea and this is",
    "start": "2221119",
    "end": "2227440"
  },
  {
    "text": "an idea I I guess I've been pushing for a while by various names um it allows",
    "start": "2227440",
    "end": "2232760"
  },
  {
    "text": "you to think in a sequential bubble I said that sequential reasoning is something we're quite good at what you",
    "start": "2232760",
    "end": "2239200"
  },
  {
    "text": "want from your code is that each part of the code is sequential and has no idea about um the world of concurrency um the",
    "start": "2239200",
    "end": "2247359"
  },
  {
    "text": "construct of threads or anything like that um in essence it becomes the idea",
    "start": "2247359",
    "end": "2252800"
  },
  {
    "text": "that any piece of code you write is therefore more easily testable because it itself is um uh sequential and simply",
    "start": "2252800",
    "end": "2261200"
  },
  {
    "text": "reasoned the idea is that you then through a compositional approach whether it be wiring whether it be coordination",
    "start": "2261200",
    "end": "2267640"
  },
  {
    "text": "language or something else you then say and here is where we introduce the concurrency we take our um rather simple",
    "start": "2267640",
    "end": "2273920"
  },
  {
    "text": "modules and wire them together but there is this idea that wherever you are the world should look sequential and if",
    "start": "2273920",
    "end": "2279760"
  },
  {
    "text": "you're getting data then that data arrives as if it were events or it arrives because you pull it from a Channel of some kind but you don't have",
    "start": "2279760",
    "end": "2285800"
  },
  {
    "text": "the idea of I am interacting with another thread you try and avoid that kind of um uh structure in one sense uh",
    "start": "2285800",
    "end": "2293000"
  },
  {
    "text": "this is uh uh what can be called a virtual uniprocessor um for a number of uh a",
    "start": "2293000",
    "end": "2299480"
  },
  {
    "text": "number of decades uh computer science spent a lot of time",
    "start": "2299480",
    "end": "2304680"
  },
  {
    "text": "talking about virtual multiprocessing how to give the illusion um of parallelism on a single core whereas",
    "start": "2304680",
    "end": "2311280"
  },
  {
    "text": "virtual uniprocessor is you've got massively parallel hardware and you like to give the illusion of sequential uh reasoning and that term was first",
    "start": "2311280",
    "end": "2318040"
  },
  {
    "text": "applied to the best of my knowledge to describe the human uh brain uh we have this beautiful illusion of a stream of",
    "start": "2318040",
    "end": "2323960"
  },
  {
    "text": "Consciousness on this ridiculously parallel hardware and it turns out that's not a bad way of thinking about",
    "start": "2323960",
    "end": "2329680"
  },
  {
    "text": "stuff so you want your code to have that kind of feel to it and these models generally give that uh um generally give",
    "start": "2329680",
    "end": "2335440"
  },
  {
    "text": "that kind of feel so the most fundamental construct let's talk about Q's for a moment um Q uh you got",
    "start": "2335440",
    "end": "2342640"
  },
  {
    "start": "2340000",
    "end": "2340000"
  },
  {
    "text": "producers you got a producer there you got a consumer there you got a cure in the middle um so the producer and the",
    "start": "2342640",
    "end": "2348359"
  },
  {
    "text": "consumer represent activities that are uh decoupled from one another with respect to time um most um and the most",
    "start": "2348359",
    "end": "2355280"
  },
  {
    "text": "obvious concept of time in this case I'm talking about is um uh threading um but",
    "start": "2355280",
    "end": "2361839"
  },
  {
    "text": "decoupling Through Time is what we're talking about I can actually have a perfectly sequential system system where",
    "start": "2361839",
    "end": "2366960"
  },
  {
    "text": "I have um a producer producing into a queue followed by a piece of code in the",
    "start": "2366960",
    "end": "2372960"
  },
  {
    "text": "same thread um that unpacks that queue as a consumer so the idea is when we say decoupling through time that can mean",
    "start": "2372960",
    "end": "2379640"
  },
  {
    "text": "true parallelism but can actually mean we've ordered things um uh uh sequentially or we're doing things by a",
    "start": "2379640",
    "end": "2386480"
  },
  {
    "text": "uh uh time Trigger or whatever the idea is that we're trying to create a model that almost doesn't care at some",
    "start": "2386480",
    "end": "2392800"
  },
  {
    "text": "level so this is a simple onetoone relationship um this guy's doing something maybe he's doing IO this guy's",
    "start": "2392800",
    "end": "2398119"
  },
  {
    "text": "doing something else you know fine now that's the simplest Arrangement that you can find and we're going to come back to",
    "start": "2398119",
    "end": "2403240"
  },
  {
    "text": "it later what you may find um is that you're taking things from lots of different sources there are",
    "start": "2403240",
    "end": "2409119"
  },
  {
    "text": "lots of different uh places you can be getting your uh input from or alternatively um these um these guys are",
    "start": "2409119",
    "end": "2417079"
  },
  {
    "text": "uh uh these guys are running at different speeds and therefore you would like to uh past them so you got an end to one Arrangement here or it may be the",
    "start": "2417079",
    "end": "2423520"
  },
  {
    "text": "other way around um and there may be a logical thing maybe you've actually you got ports out here so on that you want",
    "start": "2423520",
    "end": "2428800"
  },
  {
    "text": "to uh send things through so there's reasons either physical um uh or no",
    "start": "2428800",
    "end": "2434200"
  },
  {
    "text": "physical or physical physical in the sense of um uh Communications or physical in the sense of time so you can",
    "start": "2434200",
    "end": "2440720"
  },
  {
    "text": "decouple them like that now that's an n to1 and a 1 to n Arrangement uh you may also find but I would generally",
    "start": "2440720",
    "end": "2446640"
  },
  {
    "text": "recommend that the N not be the same on both sides um m2n you may find that um it's uh makes sense to serialize things",
    "start": "2446640",
    "end": "2453760"
  },
  {
    "text": "there may be a lot of stuff coming in on the left hand side again IO rather than computational tasks probably makes more",
    "start": "2453760",
    "end": "2459560"
  },
  {
    "text": "sense for this Arrangement and on the right hand side um you want some kind of fan out to different tasks and other configurations use more",
    "start": "2459560",
    "end": "2468480"
  },
  {
    "text": "more than one Q okay um and likewise on the other side and then obviously I",
    "start": "2468480",
    "end": "2474480"
  },
  {
    "text": "guess the degenerate cases where you realize actually you've just got a onetoone Arrangement just lots of it",
    "start": "2474480",
    "end": "2480400"
  },
  {
    "text": "okay so you can keep combining these and crossing over you can have one thing poting to lots of cues and lots of",
    "start": "2480400",
    "end": "2485880"
  },
  {
    "text": "things picking up on the other side there's lots of Arrangements I could just keep copying and pasting this slide to generate all of them but the idea",
    "start": "2485880",
    "end": "2492079"
  },
  {
    "text": "here is the Q is the most General construct at this point for decoupling in time and it is the performance and",
    "start": "2492079",
    "end": "2497400"
  },
  {
    "text": "characteristics of your system um that will dictate which configuration you're interested it now from a Cod perspective",
    "start": "2497400",
    "end": "2505079"
  },
  {
    "text": "let's try and want some of this together and and get a feel for what this might look like if we create a cue of anything",
    "start": "2505079",
    "end": "2510480"
  },
  {
    "text": "so make it generic so we've got a template there um I'm going to start with the simplest idea is that I can send something and I've got a choice of",
    "start": "2510480",
    "end": "2517880"
  },
  {
    "text": "uh receiving it I'm going to do this as a a non-blocking receive a try receive I can pick up a value um if there's",
    "start": "2517880",
    "end": "2524280"
  },
  {
    "text": "nothing there to receive um then I will return false um and uh if somebody's",
    "start": "2524280",
    "end": "2531000"
  },
  {
    "text": "trying to if I assume that I've got a very simple um locking mechanism well let's do it sequentially first um if",
    "start": "2531000",
    "end": "2536800"
  },
  {
    "text": "there's nothing there then I'll get back false I'm just going to use the standard Library deck uh type so um that's going",
    "start": "2536800",
    "end": "2542640"
  },
  {
    "text": "to be nice and easy from that point of view if you send you're just pushing back and and if you try well if you try",
    "start": "2542640",
    "end": "2548359"
  },
  {
    "text": "and receive um if there's something there we do something with it otherwise uh we don't it's as simple as that we",
    "start": "2548359",
    "end": "2553920"
  },
  {
    "text": "return false so that all works rather nicely and is profoundly not sequential or rather profoundly not concurrent uh",
    "start": "2553920",
    "end": "2560760"
  },
  {
    "text": "uh in any way shape or form not safe so we reach for our bottleneck um throw in",
    "start": "2560760",
    "end": "2566880"
  },
  {
    "text": "a mutex and we say okay now we can start sharing this between arbitary number of um senders and receivers and that allows",
    "start": "2566880",
    "end": "2573040"
  },
  {
    "text": "us that uh and this works quite nicely for the um non-blocking approach uh and this may be sufficient this may be what",
    "start": "2573040",
    "end": "2579160"
  },
  {
    "text": "you want um and so we use a scope lock um to ensure that we have a uh a",
    "start": "2579160",
    "end": "2586240"
  },
  {
    "text": "critical section that's automatically locked and also um exception safe and we kind of do the same on the other side um",
    "start": "2586240",
    "end": "2592839"
  },
  {
    "text": "but now we've got two reasons why we may fail to return a value previously it was if I try and receive and there's nothing",
    "start": "2592839",
    "end": "2599359"
  },
  {
    "text": "there I return false here there's now another reason I tried to receive and either there was nothing there or um",
    "start": "2599359",
    "end": "2605680"
  },
  {
    "text": "something was being uh something was being put in at the other end now if you know more about the characteristics of your system then you can start",
    "start": "2605680",
    "end": "2612599"
  },
  {
    "text": "separating uh locks for your ends but I'm writing the most generic form of Q here I cannot assume that the ends are",
    "start": "2612599",
    "end": "2618000"
  },
  {
    "text": "always going to be far apart I cannot make certain assumptions uh in this case but I'm giving you something that uh reasonably uh Works reasonably",
    "start": "2618000",
    "end": "2625240"
  },
  {
    "text": "well so um that's the basic construct now the next thing we might want to put",
    "start": "2625240",
    "end": "2630720"
  },
  {
    "text": "in is a receive um uh that uh is a blocking receive sometimes we don't",
    "start": "2630720",
    "end": "2637079"
  },
  {
    "text": "actually want to do anything else there is nothing more for this thread to do um I don't want to just sort of say I tried",
    "start": "2637079",
    "end": "2642640"
  },
  {
    "text": "to receive and I failed what do I do now I'm going to spin lock no that's probably not a good idea perhaps this",
    "start": "2642640",
    "end": "2649240"
  },
  {
    "text": "task exists only to work with values so um there are further layers we can put",
    "start": "2649240",
    "end": "2654920"
  },
  {
    "text": "on this but I'm going to leave this at a fairly raw Q level but we're still hiding the lock and I want to be able to block on that receive until I get",
    "start": "2654920",
    "end": "2661680"
  },
  {
    "text": "something now we could go further so I'm going to have a throw in a condition variable there we could go further and",
    "start": "2661680",
    "end": "2667680"
  },
  {
    "text": "also have a try received now I'm going to make a point here I'm not going to",
    "start": "2667680",
    "end": "2672880"
  },
  {
    "text": "explore it much further than this um because I did mention the Shakespeare quote everything is a is a",
    "start": "2672880",
    "end": "2679720"
  },
  {
    "text": "is a slave to the Limit um you don't really want a queue like",
    "start": "2679720",
    "end": "2684760"
  },
  {
    "text": "this in production code for the simple reason that there's no bound on the que",
    "start": "2684760",
    "end": "2690000"
  },
  {
    "text": "if something goes wrong if you've if if something goes wrong you've not anticipated it you can use up all of",
    "start": "2690000",
    "end": "2696319"
  },
  {
    "text": "memory which is really not what you want this queue can fill up to infinity or",
    "start": "2696319",
    "end": "2701480"
  },
  {
    "text": "the amount of memory you have available whichever comes sooner and I think I have a pretty good idea which one's going to come sooner um the idea is you",
    "start": "2701480",
    "end": "2707280"
  },
  {
    "text": "can end up with if you end up with a locked rece if you end up with a locked receiver and you're still sending that Q",
    "start": "2707280",
    "end": "2713720"
  },
  {
    "text": "is just going to pile up that's why people care about Q lengths and production code so really you actually need to have the idea of a bounded queue",
    "start": "2713720",
    "end": "2721520"
  },
  {
    "text": "um these are great for prototyping things and they will work fine in certain classes of system but either you have to have a hidden um a hidden",
    "start": "2721520",
    "end": "2728880"
  },
  {
    "text": "constant or you need to be able to parameterize it yourself and say no there is a maximum size for this we are not going to let this grow until uh all",
    "start": "2728880",
    "end": "2736079"
  },
  {
    "text": "of our resources have been exhausted and you can choose to embed that within the Q construct or put it somewhere else in",
    "start": "2736079",
    "end": "2741800"
  },
  {
    "text": "the code but it has to exist somewhere do not assume that they should be unbounded in production code however to keep things simple I'm just going to say",
    "start": "2741800",
    "end": "2747839"
  },
  {
    "text": "right let's not worry about that I've talked about the bit that sort of there's a heads up there but um the next",
    "start": "2747839",
    "end": "2753880"
  },
  {
    "text": "thing is um yeah there's some code here I'm not really going to worry about that it just uh does the right thing um we've",
    "start": "2753880",
    "end": "2760760"
  },
  {
    "text": "got a condition variable we will continue blocking um uh or suspending while there is no um content to receive",
    "start": "2760760",
    "end": "2768680"
  },
  {
    "text": "and when there finally is we'll actually do something and actually pop uh the result now there's a few other bits and",
    "start": "2768680",
    "end": "2773960"
  },
  {
    "text": "pieces that we can start adding in um to refine the code I'm not going to worry about those I want to go back to the",
    "start": "2773960",
    "end": "2779480"
  },
  {
    "text": "idea that we've got a basic function in Q I want to go back to an idea that",
    "start": "2779480",
    "end": "2786319"
  },
  {
    "text": "earlier on I mentioned we'd be coming back to the onetoone case um there is a",
    "start": "2786319",
    "end": "2792280"
  },
  {
    "text": "particular name the idea of Q is that we can have a Q allows many to many one to",
    "start": "2792280",
    "end": "2797319"
  },
  {
    "text": "one one to many many to one a channel is a special case a channel is UM and we",
    "start": "2797319",
    "end": "2804839"
  },
  {
    "text": "borrow the terminology um from CSP uh communicating sequential processes it's a single",
    "start": "2804839",
    "end": "2811319"
  },
  {
    "text": "pointto point of contact go also uses the term Channel um but is is perhaps not as strict it really just means Q at",
    "start": "2811319",
    "end": "2818440"
  },
  {
    "text": "one level um uh but it borrows some of these ideas um but strictly speaking if",
    "start": "2818440",
    "end": "2824800"
  },
  {
    "text": "we have a channel it is it is there is one sender one receiver it is a dedicated line of communication it is a",
    "start": "2824800",
    "end": "2831280"
  },
  {
    "text": "dedicated Q um which allows certain simple optimizations I",
    "start": "2831280",
    "end": "2837359"
  },
  {
    "text": "can have a channel I can just basically say that queue that I just showed you I'm going to go with that or alternatively I can create something",
    "start": "2837359",
    "end": "2843000"
  },
  {
    "text": "else that's a channel and have some rather clever low lock implementation that takes advantage of our known limits",
    "start": "2843000",
    "end": "2848960"
  },
  {
    "text": "and the fact that there's only one re there's only one sender and one receiver we can start taking advantage of this knowledge whichever one we do I'm just",
    "start": "2848960",
    "end": "2855240"
  },
  {
    "text": "saying that the configuration I'm interested in here is this one that there is this dedicated um receiver",
    "start": "2855240",
    "end": "2862119"
  },
  {
    "text": "um so we're going to take a you know one of those great problems of uh uh uh",
    "start": "2862119",
    "end": "2868119"
  },
  {
    "text": "software developer development that taxes everybody's minds and imaginations U",
    "start": "2868119",
    "end": "2873240"
  },
  {
    "text": "fsbs um and uh is not exactly the hardest problem in the world and there's I'm not going to",
    "start": "2873240",
    "end": "2878880"
  },
  {
    "text": "look at clever ways of parallelizing it uh I just needed something for the code to do um so here is the thing for it to",
    "start": "2878880",
    "end": "2884640"
  },
  {
    "text": "do um if a number divis is divisible by um three and five uh you get Fizz buzz",
    "start": "2884640",
    "end": "2890880"
  },
  {
    "text": "by three Fizz by uh five Buzz otherwise you just get a stringified form uh of",
    "start": "2890880",
    "end": "2896240"
  },
  {
    "text": "the number that's it that's there's nothing interesting parallel or whatever about this that's not what I want I just wanted something to chew on um the",
    "start": "2896240",
    "end": "2904440"
  },
  {
    "text": "parallel bit um comes in here um what we're going to",
    "start": "2904440",
    "end": "2909680"
  },
  {
    "text": "do is we're going to have a we're going to set up a fizzbuzz server because that's what everybody needs it's called Fizz buzzer okay what it's going to do",
    "start": "2909680",
    "end": "2915359"
  },
  {
    "text": "is it's going to take an input channel it's going to have an output channel uh on the input Channel we're going to see vages on the output Channel we're going",
    "start": "2915359",
    "end": "2920400"
  },
  {
    "text": "to send strings nice and simple so now from this point of view if we look at this piece of code there's absolutely",
    "start": "2920400",
    "end": "2925440"
  },
  {
    "text": "nothing sequential or there's nothing parallel or nothing concurrent rather about this piece of code um it is a you",
    "start": "2925440",
    "end": "2931920"
  },
  {
    "text": "know I'm just basically taking in uh a channel and uh another Channel I'm going to use both of those I'm going to just",
    "start": "2931920",
    "end": "2938359"
  },
  {
    "text": "run around and do stuff that's fine this is actually quite easy to test um I'm going to set up main we going to have a",
    "start": "2938359",
    "end": "2945000"
  },
  {
    "text": "channel out a channel back um we're going to launch that as a separate thread um I don't have to um there's",
    "start": "2945000",
    "end": "2951799"
  },
  {
    "text": "absolutely nothing here that's of Interest here but um uh I'm going to go and send something and then I'm going to",
    "start": "2951799",
    "end": "2957599"
  },
  {
    "text": "get back a result and I'm going to print it out really nothing nothing exciting going on here I can resequence I can",
    "start": "2957599",
    "end": "2964119"
  },
  {
    "text": "mess about with the syntax a little bit and make it feel a little more C+ plusy but what's more interesting here is I'm",
    "start": "2964119",
    "end": "2971119"
  },
  {
    "text": "able to decouple and have a thread that's out there waiting for Stuff send",
    "start": "2971119",
    "end": "2977520"
  },
  {
    "text": "it a whole load of requests and now the channel the return channel the back channel is now full and then I pick up the results separately so now we",
    "start": "2977520",
    "end": "2983240"
  },
  {
    "text": "actually introduced something some slightly more meaningful concurrency uh not particularly meaningful but the idea",
    "start": "2983240",
    "end": "2988359"
  },
  {
    "text": "here is I'm able to rearrange the code um from that point of view the channel",
    "start": "2988359",
    "end": "2994079"
  },
  {
    "text": "concept a specific out and back approach is a really s simple way of decoupling pieces of code it allows me to actually",
    "start": "2994079",
    "end": "3000559"
  },
  {
    "text": "fill up stuff um Prime something for testing so you know some people might say I'm mocking it well I'm I'm not",
    "start": "3000559",
    "end": "3006520"
  },
  {
    "text": "mocking it at all I'm just simply giving it a pre-loaded queue I can get rid of um uh and rearrange this relatively",
    "start": "3006520",
    "end": "3013079"
  },
  {
    "text": "easily it's a matter of wiring uh it doesn't mean you can't get deadlock yes you can um but it means that it's now",
    "start": "3013079",
    "end": "3018799"
  },
  {
    "text": "down to the wiring rather than uh the core logic that's going to give you that",
    "start": "3018799",
    "end": "3024440"
  },
  {
    "text": "um and is there anything else to say about that no that's that's all the fizzbuzz is going to do in renewed syntax so",
    "start": "3024440",
    "end": "3032440"
  },
  {
    "text": "let's look at a particular application and again the terminology um pipes and filters is really built on channels but",
    "start": "3032440",
    "end": "3038400"
  },
  {
    "text": "we talk about it slightly different again a pipe is the idea of a dedicated point-to-point um piece of",
    "start": "3038400",
    "end": "3044720"
  },
  {
    "text": "communication um very powerful from a general point of view um in terms of",
    "start": "3044720",
    "end": "3049799"
  },
  {
    "text": "thinking about composition um we divide an application's task into several self-contained data processing steps",
    "start": "3049799",
    "end": "3055880"
  },
  {
    "start": "3050000",
    "end": "3050000"
  },
  {
    "text": "connect these steps to a data processing pipeline VI intermediate data buffers we see the pipes and filters model um",
    "start": "3055880",
    "end": "3062079"
  },
  {
    "text": "allows us uh uh the introduction concurrency but it also allows us expressiveness um we find that many",
    "start": "3062079",
    "end": "3067960"
  },
  {
    "text": "people you can see in the Java um streams model um without introducing concurrency it's a very profound and",
    "start": "3067960",
    "end": "3074359"
  },
  {
    "text": "useful way of reasoning about a task because it is based on a functional programming model and a lot of people don't realize this but this rather good",
    "start": "3074359",
    "end": "3081000"
  },
  {
    "text": "point was made by John pie um uh a couple of years back um concatenative",
    "start": "3081000",
    "end": "3086680"
  },
  {
    "text": "programming is the style um it relies on function composition rather than function application um and this is the",
    "start": "3086680",
    "end": "3093880"
  },
  {
    "text": "basic reason Unix pipes are so powerful they form a rudimentary string based uh concatenated programming language it's a",
    "start": "3093880",
    "end": "3100040"
  },
  {
    "text": "very simple idea each step it's a compositional step you're going to take data you're going to process it you're",
    "start": "3100040",
    "end": "3105920"
  },
  {
    "text": "not going to worry about you're introduce side effects on the data because you pass on new data to something else um and it is a",
    "start": "3105920",
    "end": "3112040"
  },
  {
    "text": "particularly different style of functional programming it should that is is not the same as the classic applicative approach and there's a lot",
    "start": "3112040",
    "end": "3118440"
  },
  {
    "text": "of benefits to that without concurrency but we're going to throw some concurrency at it um",
    "start": "3118440",
    "end": "3125160"
  },
  {
    "text": "so I'm going to pick on um sort of a very simple idea what we've got here is",
    "start": "3125160",
    "end": "3130760"
  },
  {
    "text": "we have some kind of source um and the arrangement is that we have a filter then we maybe have another filter um and",
    "start": "3130760",
    "end": "3137200"
  },
  {
    "text": "then we have a sync and they're connected together um using these pipes I'm going to pick a a not particularly",
    "start": "3137200",
    "end": "3143280"
  },
  {
    "text": "meaningful problem uh although this is one of those ones that came out of um in",
    "start": "3143280",
    "end": "3148319"
  },
  {
    "text": "um a rather interesting conversation about Friday the 13th we had a Friday",
    "start": "3148319",
    "end": "3153640"
  },
  {
    "text": "the 13th last week so this seems timely um if you are superstitious",
    "start": "3153640",
    "end": "3159839"
  },
  {
    "text": "um um then we should have a proper conversation but that's nothing to do with C++ um if you are superstitious and",
    "start": "3159839",
    "end": "3165440"
  },
  {
    "text": "you fear Friday the 13th uh then you might sit down and write some code to",
    "start": "3165440",
    "end": "3170920"
  },
  {
    "text": "decide when the next Friday the 13th is uh you might do this in a kind of raw SE approach um we're going to move this to C++ and",
    "start": "3170920",
    "end": "3179319"
  },
  {
    "text": "uh not a lot of change actually um the C++ Chrono Library actually um if I were to Port this to that I would end up",
    "start": "3179319",
    "end": "3185880"
  },
  {
    "text": "using more keystrokes so I'm not going to do that I'm going to just leave us with the raw stuff this will find you",
    "start": "3185880",
    "end": "3191079"
  },
  {
    "text": "the next um the next Friday the 13th after the one that you Prov uh the date",
    "start": "3191079",
    "end": "3196240"
  },
  {
    "text": "that you provide so so this this is all good now not um so what we're going to do is we're going to break this one down",
    "start": "3196240",
    "end": "3202520"
  },
  {
    "text": "um instead of expressing the logic um uh uh instead of expressing the logic",
    "start": "3202520",
    "end": "3208680"
  },
  {
    "text": "this way I want to find I want to get a steady stream of Friday the 13th and what I'm going to do is I'm going to",
    "start": "3208680",
    "end": "3214359"
  },
  {
    "text": "turn this into a pipes and filters Arrangement I'm going to start off like this I'm going to say right first of all we need to generate all the days of",
    "start": "3214359",
    "end": "3220319"
  },
  {
    "text": "interest you give me a date and then we will just generate we will Loop forever then what I'm going to do is I'm",
    "start": "3220319",
    "end": "3228240"
  },
  {
    "text": "going to filter in I'm going to select in the 13th of every month okay so this",
    "start": "3228240",
    "end": "3233520"
  },
  {
    "text": "is how we do this is a simple way of doing and with uh pipes and filters okay uh what I'm going to do is I'm going to",
    "start": "3233520",
    "end": "3238559"
  },
  {
    "text": "include in select in every 13th of the month and then I'm select in all the Fridays and what I get out is a steady",
    "start": "3238559",
    "end": "3244000"
  },
  {
    "text": "stream of Friday the 13th which I will then display so I've broken it down into a pipeline um and so we're going to wire",
    "start": "3244000",
    "end": "3251000"
  },
  {
    "text": "this up we're going to have a a channel for all the days and we're going to arrange this so that the days are from",
    "start": "3251000",
    "end": "3256520"
  },
  {
    "text": "the start yeah unfortunately the uh uh the outlining here has got bleached out by",
    "start": "3256520",
    "end": "3262480"
  },
  {
    "text": "the um uh uh projector um we'll have days from the start we'll wire it into to days and that's just going to go on",
    "start": "3262480",
    "end": "3269119"
  },
  {
    "text": "forever actually they don't go on forever they tend to they will hit a limit it turns out",
    "start": "3269119",
    "end": "3275359"
  },
  {
    "text": "disappointingly um uh we're not allowed to compute to Infinity uh on this but",
    "start": "3275359",
    "end": "3281000"
  },
  {
    "text": "you know what we're going to do is just keep on looping generating days we move forward a day at a time then we'll wire",
    "start": "3281000",
    "end": "3287760"
  },
  {
    "text": "up the next bit by saying okay you give me all of those days that's the input and then I'm going to give you the output which is only the 13th so I'm",
    "start": "3287760",
    "end": "3294760"
  },
  {
    "text": "going to just select in read a day if it's the 13th then I write it out otherwise I'm not going to then the next",
    "start": "3294760",
    "end": "3301079"
  },
  {
    "text": "one I only want the Fridays and we wire that one together and then finally we actually display it and we pick that",
    "start": "3301079",
    "end": "3307119"
  },
  {
    "text": "stuff up so it's a nice little pipeline uh progression there um that will give us all the Friday the 13th U of interest",
    "start": "3307119",
    "end": "3315079"
  },
  {
    "text": "and there is a a simple idea here we can actually we can rearrange there's a few things that we can rearrange we can",
    "start": "3315079",
    "end": "3320839"
  },
  {
    "text": "actually I've done this in a more classically CSP Style in the sense that what I've done is I've created functions",
    "start": "3320839",
    "end": "3328359"
  },
  {
    "text": "that take channels it is possible to invert this relationship um and say Here's a channel and I'm going to",
    "start": "3328359",
    "end": "3334039"
  },
  {
    "text": "associate behaviors with its ends um which is a sort of an inversion of the model that I've got here but I'm going",
    "start": "3334039",
    "end": "3340079"
  },
  {
    "text": "to leave that one uh to one side there's quite a lot that you can do with this once you start down this",
    "start": "3340079",
    "end": "3345240"
  },
  {
    "text": "road so there's sort of an elegant um sign to that if your architecture fits",
    "start": "3345240",
    "end": "3351440"
  },
  {
    "text": "that that's great um you know very easy to reuse um far easier to compose and work with than other pieces of code but",
    "start": "3351440",
    "end": "3358480"
  },
  {
    "text": "there are most interactions that we want to uh probably",
    "start": "3358480",
    "end": "3363839"
  },
  {
    "text": "introduced threading into don't really fit um a a pipeline model a one-way data",
    "start": "3363839",
    "end": "3369799"
  },
  {
    "text": "flow we might need some interaction uh and at this point uh this thing that I did many years ago for uh my Master's uh",
    "start": "3369799",
    "end": "3377440"
  },
  {
    "text": "thesis was um actor based systems and I one of the things I worked with was a language called abcl um uh actor",
    "start": "3377440",
    "end": "3385160"
  },
  {
    "text": "concurrent language or an object based concurrent language depending on which version you read um and when we talk",
    "start": "3385160",
    "end": "3391680"
  },
  {
    "text": "about raw multithreading uh Andre alexandre's quote is one of my favorite ones multi-threading is just one damn thing after before or simultaneous with",
    "start": "3391680",
    "end": "3398240"
  },
  {
    "text": "another um but what is actor-based computation um active based concurrency is just one damn message after another",
    "start": "3398240",
    "end": "3404079"
  },
  {
    "text": "you are in this sequential bubble everything is sequential you just receive something you handle it you pass",
    "start": "3404079",
    "end": "3410000"
  },
  {
    "text": "it on but that's obviously doesn't have a unique claim to that so let's have a",
    "start": "3410000",
    "end": "3415319"
  },
  {
    "text": "look at one of the classic approaches which is Monitor objects a monitor object is the way that um Java decided",
    "start": "3415319",
    "end": "3422640"
  },
  {
    "start": "3417000",
    "end": "3417000"
  },
  {
    "text": "to uh bake into the language every um every object is effectively a monitor",
    "start": "3422640",
    "end": "3428400"
  },
  {
    "text": "object which means that it can be uh it has a lock over the whole object and it can be synchronized every method can be",
    "start": "3428400",
    "end": "3434960"
  },
  {
    "text": "synchronized or part of the method can be synchronized in execution and there is a locking scope it's the idea of",
    "start": "3434960",
    "end": "3440640"
  },
  {
    "text": "passive data objects that have such synchronization built in um so that's great because that shouldn't be our code",
    "start": "3440640",
    "end": "3445799"
  },
  {
    "text": "it should be somebody else's code but uh it is very lock based and it doesn't work well in a compositional sense but",
    "start": "3445799",
    "end": "3452119"
  },
  {
    "text": "it can be okay to write and if we imagine something like a phone book on which we're going to provide basic",
    "start": "3452119",
    "end": "3458000"
  },
  {
    "text": "operations an update operation uh for somebody's name and number a drop operation to drop um an entry and a find",
    "start": "3458000",
    "end": "3466200"
  },
  {
    "text": "operation that optionally returns a string if nothing's there so optional it is now 2017 optional is now finally in",
    "start": "3466200",
    "end": "3472039"
  },
  {
    "text": "the c or will be in in C++ 17 um so that saves all those null things",
    "start": "3472039",
    "end": "3477240"
  },
  {
    "text": "or using empty string as a marker so basically uh if we find the name and it's there we get a result if we don't",
    "start": "3477240",
    "end": "3484039"
  },
  {
    "text": "um then uh uh we're told that we don't have a result and um this is in um uh",
    "start": "3484039",
    "end": "3491240"
  },
  {
    "text": "optional appears in other languages sometimes called different things fallible maybe and so on so got that",
    "start": "3491240",
    "end": "3497799"
  },
  {
    "text": "structure we're going to have a simple mutex model like we had earlier on um and we can go ahead and we can build",
    "start": "3497799",
    "end": "3503480"
  },
  {
    "text": "this stuff up we can up date it's an upsert operation we can drop um and then",
    "start": "3503480",
    "end": "3508559"
  },
  {
    "text": "we've got the find operation so in action what we're going to end up with is something like this we create a",
    "start": "3508559",
    "end": "3514720"
  },
  {
    "text": "directory phone we have our phone book um and in another thread we go and",
    "start": "3514720",
    "end": "3521400"
  },
  {
    "text": "look for Thomas Anderson Thomas Anderson is not yet in the phone book um so we've got an updating thread so we got um two",
    "start": "3521400",
    "end": "3528680"
  },
  {
    "text": "threads of Interest here the F the directory thread is actually passive um",
    "start": "3528680",
    "end": "3535440"
  },
  {
    "text": "uh we're going to go and update that next time we um try and find Thomas Anderson in the in another thread um",
    "start": "3535440",
    "end": "3540799"
  },
  {
    "text": "both of these operations will be um ordered in some way and mutually exclusive so therefore we're guaranteed",
    "start": "3540799",
    "end": "3546319"
  },
  {
    "text": "of some kind of coherence and we will get um uh some value we go and look for Neo Neo's not in there um we're going to",
    "start": "3546319",
    "end": "3554079"
  },
  {
    "text": "update with Trinity we're going to update with morphus we're going to update with uh we're going to drop Thomas Anderson we're going to add Neo",
    "start": "3554079",
    "end": "3559480"
  },
  {
    "text": "um now when we go and find Thomas Anderson will not be found um but Neo will be and uh because he is the one so",
    "start": "3559480",
    "end": "3566640"
  },
  {
    "text": "we've got a simple model there so monitor objects are very attractive and very simple at that level there is",
    "start": "3566640",
    "end": "3572200"
  },
  {
    "text": "another approach which for reasons of time uh active objects we could go into um but I'm going to leave that out for",
    "start": "3572200",
    "end": "3579079"
  },
  {
    "start": "3573000",
    "end": "3573000"
  },
  {
    "text": "your comfort um but I wanted to put them in there why am i showing you something and then saying I'm not going to show",
    "start": "3579079",
    "end": "3585039"
  },
  {
    "text": "you it I'm putting that in there because a lot of people confuse active objects and actors they are not the same",
    "start": "3585039",
    "end": "3590160"
  },
  {
    "text": "programming model they are potentially related but they are not the same programming model um the actor model has a different Outlook",
    "start": "3590160",
    "end": "3597400"
  },
  {
    "text": "the actor model I'm not going to show you a full actor model I'm just going to build it out of the um uh build a very",
    "start": "3597400",
    "end": "3603480"
  },
  {
    "text": "very very basic version out of the Q construct and the standard Library thread we had",
    "start": "3603480",
    "end": "3609440"
  },
  {
    "text": "earlier uh also in C++ 17 will be um standard any um a variant type uh there",
    "start": "3609440",
    "end": "3617200"
  },
  {
    "text": "are actually two variant types U this is a universal variant type uh and what I'm",
    "start": "3617200",
    "end": "3622359"
  },
  {
    "text": "going to do here is that phone book you'll notice I've changed it into a function it is uh what we're going to do",
    "start": "3622359",
    "end": "3628880"
  },
  {
    "text": "here is we're going to bind it together we're going to say look here is your Q you have an Associated Q um and anybody",
    "start": "3628880",
    "end": "3635480"
  },
  {
    "text": "can talk to you using this que um we can be more specific about the message set but I'm going to leave it as open and",
    "start": "3635480",
    "end": "3641760"
  },
  {
    "text": "generic message set here I'm going to say well you can have um an entry um either you're giving an entry",
    "start": "3641760",
    "end": "3649079"
  },
  {
    "text": "or you're receiving an entry in other words um it's a name and a number you can have a no entry either you're",
    "start": "3649079",
    "end": "3654960"
  },
  {
    "text": "telling uh the phone book please I don't want this anymore or you're returning this entry does not exist and you can",
    "start": "3654960",
    "end": "3660319"
  },
  {
    "text": "have a find request uh here is a name and here is the return address please send it back on this CU okay so there's",
    "start": "3660319",
    "end": "3668240"
  },
  {
    "text": "the idea that somebody can talk to a running function that is that is the basis of the actum model it's not that",
    "start": "3668240",
    "end": "3674520"
  },
  {
    "text": "we are creating a classic object and putting locks in it it is that we're creating a function and we are now",
    "start": "3674520",
    "end": "3680640"
  },
  {
    "text": "communicating with a running function this function um uh it doesn't reveal its own State its private State really",
    "start": "3680640",
    "end": "3687200"
  },
  {
    "text": "is private it's local variables in fact let's actually have a look at that here is the phone book um here's the scope it's going to",
    "start": "3687200",
    "end": "3694920"
  },
  {
    "text": "get a bit Messier you can tidy this up but I I realize that for reasons of time",
    "start": "3694920",
    "end": "3700200"
  },
  {
    "text": "well that's really what this whole talk is about isn't it time uh and temporal decoupling um but for reasons of time I'm not going to go into the details of",
    "start": "3700200",
    "end": "3706480"
  },
  {
    "text": "it so I'm going to do the kind of the raw uh ugly almost assembler likee version but show you the the basic",
    "start": "3706480",
    "end": "3711799"
  },
  {
    "text": "construct here is the private State this was previously private um actually",
    "start": "3711799",
    "end": "3716960"
  },
  {
    "text": "private within an object but this is now just a local variable um the function is",
    "start": "3716960",
    "end": "3722760"
  },
  {
    "text": "just going to keep on requesting I'm not going to put any termination it's just going to Loop forever um or control c um",
    "start": "3722760",
    "end": "3729160"
  },
  {
    "text": "and the only operations that it can do is to affect entries there's no there's no kind of clever thing that somebody can do to get their hands on your",
    "start": "3729160",
    "end": "3736680"
  },
  {
    "text": "private State and that is the private State entries so now we're just going to repeatedly handle requests um we pick up",
    "start": "3736680",
    "end": "3743480"
  },
  {
    "text": "a request uh now comes the ugly bit is I now have to go and do a bit of type dispatch this is the bit that you can",
    "start": "3743480",
    "end": "3749079"
  },
  {
    "text": "tidy up with a little bit of uh jiggery pokery but um what we're going to do here is we're going to pick up is it an",
    "start": "3749079",
    "end": "3754160"
  },
  {
    "text": "update have I received um an entry if it's an update then I update I update",
    "start": "3754160",
    "end": "3759720"
  },
  {
    "text": "the entries with update name and update number um on the other hand is it a drop request am I being told no entry if it's",
    "start": "3759720",
    "end": "3766680"
  },
  {
    "text": "a drop request then I will erase that entry um uh if that's the case but the",
    "start": "3766680",
    "end": "3772760"
  },
  {
    "text": "the bit that's interesting is um notice neither of these requires interaction when another",
    "start": "3772760",
    "end": "3778720"
  },
  {
    "text": "thread another actor is basically communicating with you and say I'd like to add this entry or please drop this",
    "start": "3778720",
    "end": "3784440"
  },
  {
    "text": "entry they're not expecting a response it's uh it's asynchron without any kind of blocking return there's no Futures",
    "start": "3784440",
    "end": "3790839"
  },
  {
    "text": "involved they're doing this but now we need to talk to somebody and that's where uh the find is quite a good",
    "start": "3790839",
    "end": "3796400"
  },
  {
    "text": "example um somebody's going to send us a fine request please find us NE or Thomas Anderson or whatever if the entry is not",
    "start": "3796400",
    "end": "3803720"
  },
  {
    "text": "there we need to tell somebody it was not there if the entry is there we need to tell somebody we need to talk back in",
    "start": "3803720",
    "end": "3808960"
  },
  {
    "text": "this case the return address is useful uh an important thing that is often",
    "start": "3808960",
    "end": "3814319"
  },
  {
    "text": "overlooked in actors is you don't have to actually return the call to the caller you don't have to return the",
    "start": "3814319",
    "end": "3819520"
  },
  {
    "text": "result to the caller what they can do is they can set this up and this is perfect decoupling I'm going to make a request",
    "start": "3819520",
    "end": "3825559"
  },
  {
    "text": "of you you talk to that guy over there okay it's not an actual return address it's a really a forwarding address um",
    "start": "3825559",
    "end": "3833200"
  },
  {
    "text": "and it may come back to the requester but it may go on to somebody else so what we're going to do here is we've got",
    "start": "3833200",
    "end": "3839559"
  },
  {
    "text": "this if it's uh if it's not there we're going to um uh use the cue that was",
    "start": "3839559",
    "end": "3844799"
  },
  {
    "text": "given to us and say look there was no entry on the other hand if it is there there was an entry so what we've got",
    "start": "3844799",
    "end": "3850799"
  },
  {
    "text": "here is a proper message handling Loop um but uh all baked into constructs that",
    "start": "3850799",
    "end": "3858160"
  },
  {
    "text": "are now available uh in the C++ Library plus um the Q construct that I added in",
    "start": "3858160",
    "end": "3863680"
  },
  {
    "text": "uh earlier um in execution that's going to the call we're going to move away from the idea",
    "start": "3863680",
    "end": "3868839"
  },
  {
    "text": "that we're dealing with functions we're going to do something that's a little more uh message like um so I'm going to",
    "start": "3868839",
    "end": "3874839"
  },
  {
    "text": "set up a directory then I'm going to launch um a thread that holds the phone",
    "start": "3874839",
    "end": "3880480"
  },
  {
    "text": "book um with the directory uh and then I'm going to say right okay I've got a queue and I would like to find Tomas",
    "start": "3880480",
    "end": "3888359"
  },
  {
    "text": "Anderson please return it here um we're not going to find anything so I'm actually going to pick that result up um",
    "start": "3888359",
    "end": "3895200"
  },
  {
    "text": "what I should get back is no entry Thomas Anderson in another thread we're going to have an updating thread um so",
    "start": "3895200",
    "end": "3900559"
  },
  {
    "text": "we've actually got three threads running here um we're going to have um something updates with Thomas Anderson one um back",
    "start": "3900559",
    "end": "3909000"
  },
  {
    "text": "in the uh requesting thread um we're able to Now find it we pick up a result and that should be the result that we",
    "start": "3909000",
    "end": "3914960"
  },
  {
    "text": "get and we can go through at Trinity Morpheus U drop Thomas Anderson and add Neo because he's the one and we can now",
    "start": "3914960",
    "end": "3921760"
  },
  {
    "text": "find Neo and we get that back and what we've done there is that that is the the raw ingredients if you like uh this is",
    "start": "3921760",
    "end": "3928319"
  },
  {
    "text": "the actor model broken down to its most fundamental level and um clearly with a little bit of imagination and if you've",
    "start": "3928319",
    "end": "3933680"
  },
  {
    "text": "got experience of um actor models in other languages you can immediately see the opportunities for wrapping that up",
    "start": "3933680",
    "end": "3939200"
  },
  {
    "text": "but just based on a que and a thread we can actually affect this model um and",
    "start": "3939200",
    "end": "3945240"
  },
  {
    "text": "and note where it goes and what style uh it gives us um that our messages become first class objects rather than methods",
    "start": "3945240",
    "end": "3951720"
  },
  {
    "text": "and we get this inversion um that the function itself becomes a running object that we communicate",
    "start": "3951720",
    "end": "3958079"
  },
  {
    "text": "with okay so sort of bring that to a close there's an awful lot in there and it's definitely time for a coffee um but",
    "start": "3958079",
    "end": "3964480"
  },
  {
    "text": "I'm going to go back to John karmac he said you know it's a point there is that what we've ended up with is a number of things that are actually relatively",
    "start": "3964480",
    "end": "3970720"
  },
  {
    "text": "functional in their nature um functional style makes the state presented to your code explicit which makes it easier to",
    "start": "3970720",
    "end": "3976559"
  },
  {
    "text": "reason about and in a completely pure system makes thread race conditions impossible the idea is that we are",
    "start": "3976559",
    "end": "3981960"
  },
  {
    "text": "explicitly not thinking about I have data that I wish to share we are thinking about there are things to be",
    "start": "3981960",
    "end": "3987839"
  },
  {
    "text": "done who do I talk to um and uh that kind of approach isolates it's a it's a",
    "start": "3987839",
    "end": "3993400"
  },
  {
    "text": "it's a slightly different philosophy but using the same basic language you end up with a very very different architecture and one that is more composable um so",
    "start": "3993400",
    "end": "4001480"
  },
  {
    "text": "hopefully uh the one thing we've learned about thinking outside the synchronization quadrant is that our",
    "start": "4001480",
    "end": "4006720"
  },
  {
    "text": "default desire to put locks around everything um when we care about speed",
    "start": "4006720",
    "end": "4012440"
  },
  {
    "text": "um is going to be thwarted um because you know the thing you always have to keep in mind is is all computers wait at",
    "start": "4012440",
    "end": "4018000"
  },
  {
    "text": "the same speed and this is the problem that we've been encountering as people have been trying to scale things up uh",
    "start": "4018000",
    "end": "4023559"
  },
  {
    "text": "what they've leared is a number of lessons sometimes the hard way and particularly now that we are moving from",
    "start": "4023559",
    "end": "4029880"
  },
  {
    "text": "uh the moment I would sense that we're moving a little bit back from operating system processes to threads uh because",
    "start": "4029880",
    "end": "4036200"
  },
  {
    "text": "we've discovered we have a remarkable amount of memory available um this is worth keeping in mind and not to say oh",
    "start": "4036200",
    "end": "4041839"
  },
  {
    "text": "now I'm in the same process I can just go back to my old SE like ways of sharing everything and just adding locks",
    "start": "4041839",
    "end": "4046920"
  },
  {
    "text": "no the lessons that were learned uh pushing things out where you genuinely couldn't share them those are valuable",
    "start": "4046920",
    "end": "4052559"
  },
  {
    "text": "and uh worth keeping in mind I hope that's been useful I'm around uh for any",
    "start": "4052559",
    "end": "4057760"
  },
  {
    "text": "questions as I'm unpacking um uh please feel free to ask thank you",
    "start": "4057760",
    "end": "4064838"
  }
]