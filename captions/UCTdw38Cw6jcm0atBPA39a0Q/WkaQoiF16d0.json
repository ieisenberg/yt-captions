[
  {
    "text": "good morning everyone and thank you for coming to this talk my name is Adam fman",
    "start": "5640",
    "end": "10960"
  },
  {
    "text": "and for the next 60 minutes we are going to talk a little bit about basic designs and how we got them wrong we are going",
    "start": "10960",
    "end": "17760"
  },
  {
    "text": "to see some fundamental concepts behind our programming languages behind our platforms behind net jvm and other",
    "start": "17760",
    "end": "24760"
  },
  {
    "text": "languages as well but the very important part that I'd like to start with is that during this talk I'm not going to teach",
    "start": "24760",
    "end": "32320"
  },
  {
    "text": "you anything that you would actually use tomorrow when you go to the office or on",
    "start": "32320",
    "end": "37399"
  },
  {
    "text": "Monday actually it's going to be even different this talk will not change how",
    "start": "37399",
    "end": "43000"
  },
  {
    "text": "you do stuff this talk will only show you a couple of things how they evolved how they are broken and maybe one day",
    "start": "43000",
    "end": "49800"
  },
  {
    "text": "how they will be fixed but I'm not going to teach you or to show you how to do",
    "start": "49800",
    "end": "54840"
  },
  {
    "text": "things differently unfortunately that is because we are talking about Basics and about things that are very beyond Behind",
    "start": "54840",
    "end": "62039"
  },
  {
    "text": "all the things that are us that we are using every day uh what's more important even though is that during this talk I",
    "start": "62039",
    "end": "68479"
  },
  {
    "text": "ask you to forget what I told you so this is something that we are yet to see",
    "start": "68479",
    "end": "73920"
  },
  {
    "text": "couple words about myself before we move on I'm a software engineer with 15 years of experience now author of these two",
    "start": "73920",
    "end": "80079"
  },
  {
    "text": "books drop me a line on email Twitter visit my blog at blog. Adam for man. PL at the very beginning of the slide that",
    "start": "80079",
    "end": "86240"
  },
  {
    "text": "there was a QR code the same QR code will be at the very end it will point you to the the slide that if you would like to download it and check it out",
    "start": "86240",
    "end": "93560"
  },
  {
    "text": "okay so the agenda for today is we are going to go through a couple of basic",
    "start": "93560",
    "end": "99560"
  },
  {
    "text": "principles basic like designs basic things that were grounded and",
    "start": "99560",
    "end": "104680"
  },
  {
    "text": "fundamentally impacted all the platforms all the languages that we use today we are going to bash those principles we",
    "start": "104680",
    "end": "111680"
  },
  {
    "text": "are going to see how we misunderstood them and we are also going to show how they are broken and wrong in many places",
    "start": "111680",
    "end": "117840"
  },
  {
    "text": "we'll start with things like Lisk of substitute ution principle then we will go through a couple other things from solid we'll also talk about inheritance",
    "start": "117840",
    "end": "125560"
  },
  {
    "text": "and we are also going to talk about other stuff this agenda we probably won't cover all of that that is because",
    "start": "125560",
    "end": "132160"
  },
  {
    "text": "the stock is planned for something like 90 minutes and we have only 60 so we'll do do as much as possible so let's jump",
    "start": "132160",
    "end": "138640"
  },
  {
    "text": "straight to it Lisk of substitution principle hands up if you know this principle most of you hands up if you",
    "start": "138640",
    "end": "145920"
  },
  {
    "text": "know how you broke this principle last week h okay and this is where things got",
    "start": "145920",
    "end": "151519"
  },
  {
    "text": "tricky whenever we talk solid we probably know single responsibility open",
    "start": "151519",
    "end": "156760"
  },
  {
    "text": "closed blah blah blah you know the Dre right and there comes Lisk of substitution principle what's that well",
    "start": "156760",
    "end": "162120"
  },
  {
    "text": "we have square rectangle we break it we have apple orange fruits whatever we break it how do we do that with abstract",
    "start": "162120",
    "end": "169000"
  },
  {
    "text": "Factory provider in C right where do we break it where is this principle even",
    "start": "169000",
    "end": "174159"
  },
  {
    "text": "applicable do we use this principle at all it's one of the most fundamental principles in solid and yet sometimes it",
    "start": "174159",
    "end": "181519"
  },
  {
    "text": "feel like it's a little bit Misty and we don't know what to do with it so let's start from the very beginning so Lisk of",
    "start": "181519",
    "end": "187120"
  },
  {
    "text": "substitution principle comes from a paper from 1994 the paper titled a behavioral notion of subtyping you can",
    "start": "187120",
    "end": "194760"
  },
  {
    "text": "actually go and Google this paper I mean it's actually pretty good uh thing in our domain in it in computer science in",
    "start": "194760",
    "end": "202080"
  },
  {
    "text": "general that the people who actually build the foundations are still around",
    "start": "202080",
    "end": "207239"
  },
  {
    "text": "so you can go you can meet Kent be just like during this conference you can meet other people and you can actually talk",
    "start": "207239",
    "end": "213280"
  },
  {
    "text": "to them about the things they wrote like 30 years back it's kind of harder when it comes to maths because we know all",
    "start": "213280",
    "end": "219439"
  },
  {
    "text": "those great mathematicians are now long gone but with computer science it's easy so we can go and Google this principle",
    "start": "219439",
    "end": "225560"
  },
  {
    "text": "Google the paper that proposed Lis of substitution principle and it is important to understand what this paper",
    "start": "225560",
    "end": "232000"
  },
  {
    "text": "tried to achieve so we can read into this paper that this paper takes the position that the relationship should",
    "start": "232000",
    "end": "238879"
  },
  {
    "text": "Ure that any property proved about super type objects also holds for its subtype",
    "start": "238879",
    "end": "244120"
  },
  {
    "text": "objects what does it mean like explain to me like I'm five the thing is the",
    "start": "244120",
    "end": "250200"
  },
  {
    "text": "authors of this paper wanted to say that hey we believe we think this is a good",
    "start": "250200",
    "end": "256400"
  },
  {
    "text": "idea and we generally recommend that if it's possible to prove something about",
    "start": "256400",
    "end": "261759"
  },
  {
    "text": "the super type then it also should hold for the subtype objects we think this is",
    "start": "261759",
    "end": "267759"
  },
  {
    "text": "good this will lead to better designs this is what they basically are telling us they are not saying that hey this is",
    "start": "267759",
    "end": "273919"
  },
  {
    "text": "like a law of nature right nothing of that kind it's just we think that it's a",
    "start": "273919",
    "end": "279160"
  },
  {
    "text": "good idea now what does it really mean for the property to hold and if we go to",
    "start": "279160",
    "end": "286120"
  },
  {
    "text": "examples showing how it works we can for instance land on Wikipedia and find one",
    "start": "286120",
    "end": "291479"
  },
  {
    "text": "common example about squares and rectangles if you go and read what is Lisk of substitution principle you'll",
    "start": "291479",
    "end": "297360"
  },
  {
    "text": "probably quite often find example like this one or similar with fruits animals whatever else right so the example that",
    "start": "297360",
    "end": "304080"
  },
  {
    "text": "we'll cover here is with squares and rectangles and Wikipedia tells us that there is a square class and that square",
    "start": "304080",
    "end": "311320"
  },
  {
    "text": "class deres from a rectangle class right nothing special here so rectangle has",
    "start": "311320",
    "end": "318080"
  },
  {
    "text": "two Setters and Getters we have two sides we can change the sides width and length nothing magical here the square",
    "start": "318080",
    "end": "324560"
  },
  {
    "text": "class on the other hand always assumes that the width is equal to half so both",
    "start": "324560",
    "end": "330160"
  },
  {
    "text": "sides are equal well makes sense for a square right and now Wikipedia tells us",
    "start": "330160",
    "end": "335560"
  },
  {
    "text": "that square if we use it in a in a context where rectangle is expected then",
    "start": "335560",
    "end": "342280"
  },
  {
    "text": "we may break the LSP that is because in square we cannot change both sides",
    "start": "342280",
    "end": "348720"
  },
  {
    "text": "independently we can do that for the rectangle we can change both sides independently we can't do that for",
    "start": "348720",
    "end": "355600"
  },
  {
    "text": "square okay and this breaks LSP so far so good let us actually now discuss this",
    "start": "355600",
    "end": "361440"
  },
  {
    "text": "thingy what if I wanted to implement a ratio maintaining component imagine that we are implementing a framework for the",
    "start": "361440",
    "end": "368440"
  },
  {
    "text": "UI code widely popular framework WPF for short and in this WPF for short we would",
    "start": "368440",
    "end": "374240"
  },
  {
    "text": "like to have a component that basically keeps the ratio of an image right so as",
    "start": "374240",
    "end": "380160"
  },
  {
    "text": "with every framework you can imagine how those are implemented we have some Base Class base interface like I component or",
    "start": "380160",
    "end": "386639"
  },
  {
    "text": "whatever something we can put on a cona right this obviously must have some Dimensions with and half right that",
    "start": "386639",
    "end": "393240"
  },
  {
    "text": "makes sense so now I would like to create a component that maintains its ratio so the ratio of the content inside",
    "start": "393240",
    "end": "400759"
  },
  {
    "text": "right so let's say that now I would like to basically what I want to do now is if",
    "start": "400759",
    "end": "406120"
  },
  {
    "text": "I make this component taller then well it needs to be wider because it needs to maintain ratio right now you tell me",
    "start": "406120",
    "end": "415520"
  },
  {
    "text": "does it break LSP if it hands up if you think it",
    "start": "415520",
    "end": "421440"
  },
  {
    "text": "does okay couple of hands in the a hands up if you think it does not okay couple hands in the air so now",
    "start": "421440",
    "end": "428680"
  },
  {
    "text": "I ask you two questions if this thingy does not break LSP then why does this because those are",
    "start": "428680",
    "end": "436879"
  },
  {
    "text": "exactly equivalent Concepts here and second thingy if this does break LSP",
    "start": "436879",
    "end": "443319"
  },
  {
    "text": "then how do I implement this component because that's a real life use case right I need to have this component",
    "start": "443319",
    "end": "449520"
  },
  {
    "text": "maintaining ratio how do I implement this piece so I don't break LSP and",
    "start": "449520",
    "end": "454639"
  },
  {
    "text": "those are two questions that are slightly harder to answer but they will become clear once we get really into",
    "start": "454639",
    "end": "461039"
  },
  {
    "text": "what this LSP is talking about and just a spoiler this doesn't break LSP and let",
    "start": "461039",
    "end": "467240"
  },
  {
    "text": "me explain you why if we go into the paper from 1994 so 30 years back we can",
    "start": "467240",
    "end": "473800"
  },
  {
    "text": "see that this paper proposes an idea that if there is a property that in the",
    "start": "473800",
    "end": "479599"
  },
  {
    "text": "paper they call f of x and if it's provable for the super type so we have",
    "start": "479599",
    "end": "485800"
  },
  {
    "text": "some property that we can prove for the super type then we would like it to be",
    "start": "485800",
    "end": "491199"
  },
  {
    "text": "provable for all the subtypes that's the idea that hey the software will be",
    "start": "491199",
    "end": "496360"
  },
  {
    "text": "better if we make it this way and you can actually even see there like the the quote the screenshot from the paper",
    "start": "496360",
    "end": "502240"
  },
  {
    "text": "itself what does it mean in other words in other words we have something we have a property that we can prove for the",
    "start": "502240",
    "end": "509680"
  },
  {
    "text": "base class now we take the instance of the subass something that inherits from the base class and we would like to also",
    "start": "509680",
    "end": "516399"
  },
  {
    "text": "take this property and be able to prove it okay that makes sense the question is what is a",
    "start": "516399",
    "end": "522839"
  },
  {
    "text": "property and if we take property as kind of anything then we quickly run into",
    "start": "522839",
    "end": "530240"
  },
  {
    "text": "this very fancy case that let's say that my property of the Base Class of the method Fu on the screen is that the",
    "start": "530240",
    "end": "537959"
  },
  {
    "text": "Intermediate Language or actually not even an intermediate language but the masching code of this method is just as",
    "start": "537959",
    "end": "544880"
  },
  {
    "text": "you see on the bottom of the screen that's my property can I prove it about the base type sure I can well I just go",
    "start": "544880",
    "end": "551600"
  },
  {
    "text": "decomil it de assemble the code that's the property I have just proven now I would like to inherit from the base type",
    "start": "551600",
    "end": "558480"
  },
  {
    "text": "overwrite the method and I should be able to prove exactly the same property the property telling me this is the",
    "start": "558480",
    "end": "564600"
  },
  {
    "text": "exact maching code of the method does it make sense it effectively block the",
    "start": "564600",
    "end": "569880"
  },
  {
    "text": "polymorphism at all because I can't overwrite the method I can't change the implementation right there is something",
    "start": "569880",
    "end": "576079"
  },
  {
    "text": "wrong in this understanding so what is wrong the difference here is not all",
    "start": "576079",
    "end": "581720"
  },
  {
    "text": "properties are worth being provable and the important part here is LSP is about",
    "start": "581720",
    "end": "589640"
  },
  {
    "text": "explicit contract about properties that we specify explicitly so we now have",
    "start": "589640",
    "end": "596959"
  },
  {
    "text": "another word contract that lets ask what the contract is and according to Wikipedia you can go and figure out that",
    "start": "596959",
    "end": "604079"
  },
  {
    "text": "this comes from 1986 8 years before LSP paper so probably the authors of LSP",
    "start": "604079",
    "end": "610600"
  },
  {
    "text": "already knew about this concept like contract and we can read that designed by contract is software designers should",
    "start": "610600",
    "end": "618120"
  },
  {
    "text": "Define formal precise verifiable interface specifications so it needs to",
    "start": "618120",
    "end": "624519"
  },
  {
    "text": "be formal precise and verifiable right we kind of know what this contract is we",
    "start": "624519",
    "end": "630360"
  },
  {
    "text": "learned design by contract we know about invariant preconditions post conditions yada yada and LSP is about the contract",
    "start": "630360",
    "end": "638959"
  },
  {
    "text": "so let's take the example of square and rectangle again typical example that we",
    "start": "638959",
    "end": "644560"
  },
  {
    "text": "have is again Square derives from rectangle we have two Setters for two",
    "start": "644560",
    "end": "649959"
  },
  {
    "text": "sides Square now breaks the LSP because we can change one side and it changes",
    "start": "649959",
    "end": "655320"
  },
  {
    "text": "the other side at the same time right does it break the L p no because we",
    "start": "655320",
    "end": "661440"
  },
  {
    "text": "never said that you cannot have this Behavior you never said that you have to",
    "start": "661440",
    "end": "667079"
  },
  {
    "text": "be able to change both sides independently that was never put in the contract so that is the case and that",
    "start": "667079",
    "end": "675600"
  },
  {
    "text": "explains where the example with fixed ratio component also doesn't break LSP",
    "start": "675600",
    "end": "681040"
  },
  {
    "text": "because the I component interface at the very top does not require you to be able",
    "start": "681040",
    "end": "686360"
  },
  {
    "text": "to set two sides independently this is the contract or actually lack of the",
    "start": "686360",
    "end": "692079"
  },
  {
    "text": "contract how can we change this example of squares and rectangles into something",
    "start": "692079",
    "end": "697399"
  },
  {
    "text": "that actually breaks the LSP well super simple we need to explicitly say when we",
    "start": "697399",
    "end": "704440"
  },
  {
    "text": "defined rectangle that both sides must be changeable independently right we",
    "start": "704440",
    "end": "711480"
  },
  {
    "text": "must be able to change those independently if we do not say that explicitly then there is no contract",
    "start": "711480",
    "end": "718079"
  },
  {
    "text": "according to the definition of design by contract and this is what LSP is about",
    "start": "718079",
    "end": "723120"
  },
  {
    "text": "okay enough Theory how do we actually break that stuff in real world just to",
    "start": "723120",
    "end": "728360"
  },
  {
    "text": "summarize contracts must be explicit precise formal verifiable the problem",
    "start": "728360",
    "end": "734800"
  },
  {
    "text": "with contracts in real life is that our source code unfortunately is not enough",
    "start": "734800",
    "end": "740160"
  },
  {
    "text": "to Define all the contracts that we are about many times we need to Define",
    "start": "740160",
    "end": "745839"
  },
  {
    "text": "contracts in wikis documentation in from architecture diagrams even in",
    "start": "745839",
    "end": "751720"
  },
  {
    "text": "organization like common style of coding that also makes the contract that we",
    "start": "751720",
    "end": "757360"
  },
  {
    "text": "should adhere to and this is the problem if we take languages like C how many of",
    "start": "757360",
    "end": "762600"
  },
  {
    "text": "you are C or. Net developers in general yeah most of the room so if we take C we may say C is powerful especially when we",
    "start": "762600",
    "end": "770040"
  },
  {
    "text": "compare it to JavaScript or python right we have types we have classes all is great compiler protects us right but how",
    "start": "770040",
    "end": "777160"
  },
  {
    "text": "do you for instance create a me method that the compiler would make sure that",
    "start": "777160",
    "end": "783320"
  },
  {
    "text": "the method accepts a list of let's say at least two elements can you do that in C and we are",
    "start": "783320",
    "end": "790600"
  },
  {
    "text": "talking about compile time safety not about runtime safety you can obviously create your own at least two elements",
    "start": "790600",
    "end": "797519"
  },
  {
    "text": "list inherit from list throw in the Constructor whatever else right that's not the point the point here is can we",
    "start": "797519",
    "end": "803040"
  },
  {
    "text": "have compiler protect us from this mistake and there are better languages in terms of the strength of the type",
    "start": "803040",
    "end": "809839"
  },
  {
    "text": "safety that for instance can do that there are languages like hus like Scala",
    "start": "809839",
    "end": "814880"
  },
  {
    "text": "like Idis they can do this magic you can for instance specify that your list must be at least two elements long right",
    "start": "814880",
    "end": "822040"
  },
  {
    "text": "those things and compiler will protect you from there C is still powerful language as compared to other of of them",
    "start": "822040",
    "end": "829240"
  },
  {
    "text": "but still we can't explain all the requirements in the source code and that's why we need to resort to weaky",
    "start": "829240",
    "end": "835399"
  },
  {
    "text": "documentation and whatever and now let's see how we break that in real life so we are going to consider a an example code",
    "start": "835399",
    "end": "843440"
  },
  {
    "text": "that I saw once in like four different projects over two weeks so that happens quite a lot at least that's from my",
    "start": "843440",
    "end": "850680"
  },
  {
    "text": "perception and I believe you may have seen something similar in your code base as well so let's see how we break LSP in",
    "start": "850680",
    "end": "856920"
  },
  {
    "text": "real life let's say that we have a method that is called do with optional backup connection what does it do let's",
    "start": "856920",
    "end": "862639"
  },
  {
    "text": "say that we have we need to download a file from S free bucket right and we",
    "start": "862639",
    "end": "868000"
  },
  {
    "text": "have two different buckets bucket a and bucket B like bucket B is backup or whatever regionalized whatever right so",
    "start": "868000",
    "end": "874680"
  },
  {
    "text": "what we would like to do is we go to the first bucket and download the file if it happens that it's not there for reasons",
    "start": "874680",
    "end": "881560"
  },
  {
    "text": "then we go to the other bucket and grab it from there just as a backup right you can think the same situation like you",
    "start": "881560",
    "end": "887440"
  },
  {
    "text": "have two different network interfaces network connections you go through your Broadband if it failed then you go from",
    "start": "887440",
    "end": "893639"
  },
  {
    "text": "your modem or mobile hotspot or whatever right that's the idea so we have a method that is called do with optional",
    "start": "893639",
    "end": "899759"
  },
  {
    "text": "backup connection and this method basically takes two different clients and takes the Lambda expression fun",
    "start": "899759",
    "end": "906480"
  },
  {
    "text": "whatever that will basically do the job with those CL with those uh with those clients and the implementation that we",
    "start": "906480",
    "end": "912639"
  },
  {
    "text": "have here is very simple we try doing that with the first Lambda if it breaks",
    "start": "912639",
    "end": "917839"
  },
  {
    "text": "and throws the exception then we use the other uh the other connection right so the backup connection okay that's it we",
    "start": "917839",
    "end": "925279"
  },
  {
    "text": "have this helper method and we would like to use this helper method to do some business code so what do we want to",
    "start": "925279",
    "end": "931199"
  },
  {
    "text": "do well we would like to get the first file the second file the third file concatenate them just for the sake of",
    "start": "931199",
    "end": "937680"
  },
  {
    "text": "the example and that's it okay that's our business code I hope you get the idea we basically download free files",
    "start": "937680",
    "end": "944240"
  },
  {
    "text": "and we just want to G from one back one bucket if it fails then from the other backup bucket and that's it how do we",
    "start": "944240",
    "end": "950160"
  },
  {
    "text": "unit test this thingy because we are good developers we test stuff before pushing to production right so we do it",
    "start": "950160",
    "end": "957040"
  },
  {
    "text": "this way and you can think about how you would test that but I guess you might come up with something like this so I",
    "start": "957040",
    "end": "962759"
  },
  {
    "text": "have a test that basically is passing two different clients one of the clients always throws the exception the other",
    "start": "962759",
    "end": "969639"
  },
  {
    "text": "clients always succeeds right you take your moku or whatever library and you do",
    "start": "969639",
    "end": "975040"
  },
  {
    "text": "this magic and you basically do the work and you assert that it equals to expected or whatever okay you push this",
    "start": "975040",
    "end": "981480"
  },
  {
    "text": "to production tests are green all works well people start to complain why well",
    "start": "981480",
    "end": "988600"
  },
  {
    "text": "they start to complain because if you take a look at this code then what it",
    "start": "988600",
    "end": "994040"
  },
  {
    "text": "does is it goes to all those files one by one serially right we download the",
    "start": "994040",
    "end": "999279"
  },
  {
    "text": "first file it takes half a second then we take the second file another half a second then another file if we have",
    "start": "999279",
    "end": "1005959"
  },
  {
    "text": "thousand of files it takes plenty of time how do we make it faster well",
    "start": "1005959",
    "end": "1011399"
  },
  {
    "text": "notice that the author of this code was like pretty clever we would say and they",
    "start": "1011399",
    "end": "1016720"
  },
  {
    "text": "designed this interface client that we can use to change the behavior right so what do we do we change that",
    "start": "1016720",
    "end": "1024079"
  },
  {
    "text": "to acing exactly so we give that to our Junior developer on the team because",
    "start": "1024079",
    "end": "1029520"
  },
  {
    "text": "it's super simple right how do we change that well we take the client we basically change it to task of string",
    "start": "1029520",
    "end": "1035558"
  },
  {
    "text": "that would be in C or whatever promise of string we have here instead of just getting the result we would do wait for",
    "start": "1035559",
    "end": "1041918"
  },
  {
    "text": "result or await this thingy yada yada and that's it nothing else changes right because that's very mechanical change so",
    "start": "1041919",
    "end": "1049000"
  },
  {
    "text": "we have this we now take a look at the at the uh unit test see both clients we",
    "start": "1049000",
    "end": "1055760"
  },
  {
    "text": "run those unit tests they are all green we deploy to production all is great doesn't work it breaks in production can",
    "start": "1055760",
    "end": "1063679"
  },
  {
    "text": "you tell me why and let me show you the expl the implementation again just by",
    "start": "1063679",
    "end": "1068720"
  },
  {
    "text": "doing this refactoring let's call it even though it's not refactoring just by doing this train changing this to async",
    "start": "1068720",
    "end": "1075000"
  },
  {
    "text": "I broke this whole mechanism it doesn't work anymore any ideas why",
    "start": "1075000",
    "end": "1080840"
  },
  {
    "text": "exception that's a that's a good direction okay what we did is we broke",
    "start": "1082640",
    "end": "1088960"
  },
  {
    "text": "the LSP here if you remember how I was explaining this method I told you that",
    "start": "1088960",
    "end": "1094640"
  },
  {
    "text": "this method takes the first client and tries to do something with it if it breaks and throws the exception then it",
    "start": "1094640",
    "end": "1102080"
  },
  {
    "text": "uses the second client what happens if something breaks with async where is the",
    "start": "1102080",
    "end": "1108000"
  },
  {
    "text": "exception proper at the exception would be propagated in here in the place where",
    "start": "1108000",
    "end": "1113840"
  },
  {
    "text": "we would do the await not in the internals of this whole C right so what",
    "start": "1113840",
    "end": "1120360"
  },
  {
    "text": "we did now is we broke the LSP by changing the contract the contract here",
    "start": "1120360",
    "end": "1126720"
  },
  {
    "text": "was that if the client breaks it must throw the exception now the exception is",
    "start": "1126720",
    "end": "1133320"
  },
  {
    "text": "not thrown it's stored on the task of string or whatever of string in our language and the exception is prop",
    "start": "1133320",
    "end": "1140440"
  },
  {
    "text": "propagated only in this line of code this is how we broke LSP and as I",
    "start": "1140440",
    "end": "1145919"
  },
  {
    "text": "mentioned I saw this issue in like four different projects over two weeks always",
    "start": "1145919",
    "end": "1151919"
  },
  {
    "text": "the same case just make it asynchronous give it to Junior developer on your team super simple doesn't work in production",
    "start": "1151919",
    "end": "1158480"
  },
  {
    "text": "okay now the question is how can we prevent this from happening how can we write a unit test that would spot that",
    "start": "1158480",
    "end": "1166360"
  },
  {
    "text": "we broke the LSP that we broke the contract in here and the unit test we",
    "start": "1166360",
    "end": "1171520"
  },
  {
    "text": "would need to write is actually pretty complex because what we need to do is we need to verify whether the client froze",
    "start": "1171520",
    "end": "1179240"
  },
  {
    "text": "the exception it's not that we test whether our like concatenation of",
    "start": "1179240",
    "end": "1184320"
  },
  {
    "text": "strings Works what we need to do is we need to prepare the client to throw and now depending on your client",
    "start": "1184320",
    "end": "1190559"
  },
  {
    "text": "implementation either you mock the internals right and you throw some weird exception when you access the network",
    "start": "1190559",
    "end": "1197080"
  },
  {
    "text": "card or you basically run this test with actual network connectivity and try to",
    "start": "1197080",
    "end": "1202120"
  },
  {
    "text": "access in like non-existent bucket right so this makes it harder but this is how we need to test for the contracts and",
    "start": "1202120",
    "end": "1209400"
  },
  {
    "text": "how they break so this is actually how we should prevent this case from from happening and hopefully when Junior Dev",
    "start": "1209400",
    "end": "1215760"
  },
  {
    "text": "comes in and sees okay this is this is red after my changes they do not break this test they do not remove this test",
    "start": "1215760",
    "end": "1222679"
  },
  {
    "text": "that may also happen Okay let's carry on so we mentioned LSP it's about contracts",
    "start": "1222679",
    "end": "1227840"
  },
  {
    "text": "it's about contracts that are explicit provable verifiable question is what can",
    "start": "1227840",
    "end": "1233440"
  },
  {
    "text": "be in the contract so if we actually now let's bash some Java now how about that",
    "start": "1233440",
    "end": "1238960"
  },
  {
    "text": "so if we go to collection. add in Java so basically something like list of T in",
    "start": "1238960",
    "end": "1245720"
  },
  {
    "text": "in CP if we go to the documentation of the ad method we can see that well first",
    "start": "1245720",
    "end": "1251600"
  },
  {
    "text": "it's a wall of text which is sometimes good but interesting thingy here is it may throw unsupported operation",
    "start": "1251600",
    "end": "1258200"
  },
  {
    "text": "exception how can you have a list of T like you you have one job to do and you throw un",
    "start": "1258200",
    "end": "1265080"
  },
  {
    "text": "supported operation exception on me like why okay stop bashing Java let's bash c",
    "start": "1265080",
    "end": "1270320"
  },
  {
    "text": "c does the Same by the way go to documentation now why why what's the",
    "start": "1270320",
    "end": "1276000"
  },
  {
    "text": "case the case is we would like to have immutable collections for immutable",
    "start": "1276000",
    "end": "1282520"
  },
  {
    "text": "collections the ad method either shouldn't exist or it kind of should",
    "start": "1282520",
    "end": "1289200"
  },
  {
    "text": "throw right because well for the immutable instance we don't have much other choice the question is which is",
    "start": "1289200",
    "end": "1296120"
  },
  {
    "text": "better and what does it actually mean to have immutability when we go out on the",
    "start": "1296120",
    "end": "1302159"
  },
  {
    "text": "internet and we start googling what is immutability we can actually find two different definitions people use the",
    "start": "1302159",
    "end": "1308880"
  },
  {
    "text": "same word for two different concepts even though the better naming was immutable and read only so what we have",
    "start": "1308880",
    "end": "1316120"
  },
  {
    "text": "is when we want to talk about immutability we need to answer whether we are talking that we want change something so from",
    "start": "1316120",
    "end": "1325039"
  },
  {
    "text": "our perspective something will be just for read only we don't write don't",
    "start": "1325039",
    "end": "1330480"
  },
  {
    "text": "modify don't do anything that's first definition or second definition is",
    "start": "1330480",
    "end": "1335760"
  },
  {
    "text": "nobody's going to change it ever while it's easy to just make sure that it's",
    "start": "1335760",
    "end": "1342600"
  },
  {
    "text": "read only just for us like for instance if we don't have the add method then obviously we won't modify it right so",
    "start": "1342600",
    "end": "1348799"
  },
  {
    "text": "this is easy we can prove it it's super hard to prove that nobody's going to change something why because first we",
    "start": "1348799",
    "end": "1356880"
  },
  {
    "text": "don't know what instance we are dealing with and that's one of the pillars of object-oriented programming right we",
    "start": "1356880",
    "end": "1362159"
  },
  {
    "text": "don't know what the instance is we have polymorphism second thingy people know about hacks reflection like memory",
    "start": "1362159",
    "end": "1369760"
  },
  {
    "text": "pointers other things it's super hard to actually prove that nobody's going to change it and third and the worst is we",
    "start": "1369760",
    "end": "1376600"
  },
  {
    "text": "don't even have access to the code that would be dealing with that we might be loading code dynamically from third",
    "start": "1376600",
    "end": "1382520"
  },
  {
    "text": "party dependency or whatever and we can never prove what it's going to do because we don't have this code so now",
    "start": "1382520",
    "end": "1388760"
  },
  {
    "text": "the question is what should we do and how should we Implement immutable Collections and if we go to Java let's",
    "start": "1388760",
    "end": "1396440"
  },
  {
    "text": "come back to Java for a sec they explain in their documentation why they decided",
    "start": "1396440",
    "end": "1402159"
  },
  {
    "text": "to have ADD method on the collection and this method can throw the exception I actually encourage you to go and read",
    "start": "1402159",
    "end": "1409000"
  },
  {
    "text": "this wall of text explaining what's going on behind the scenes that is because obviously C was copy cutting",
    "start": "1409000",
    "end": "1415240"
  },
  {
    "text": "Java a lot and this is only one of the examples where C cloned Java so we have",
    "start": "1415240",
    "end": "1420640"
  },
  {
    "text": "exactly the same explanation why it happens in C okay so I encourage you to take a read but there are other",
    "start": "1420640",
    "end": "1426840"
  },
  {
    "text": "languages running on jvm you probably heard about cotlin about Scala what do",
    "start": "1426840",
    "end": "1432320"
  },
  {
    "text": "they do in order to provide immutability so if you take cotlin you do have",
    "start": "1432320",
    "end": "1437840"
  },
  {
    "text": "immutable collections right how do they work well we have two different",
    "start": "1437840",
    "end": "1443440"
  },
  {
    "text": "interfaces that inherit from exactly the same root so we have iterable that's",
    "start": "1443440",
    "end": "1449120"
  },
  {
    "text": "something like I enumerable in our case we have I collection and then we have I list I set IM map that that would be I",
    "start": "1449120",
    "end": "1456520"
  },
  {
    "text": "dictionary basically in our case right and then we have mutable counterparts",
    "start": "1456520",
    "end": "1461840"
  },
  {
    "text": "and notice that mutable list inherits both from list and from mutable",
    "start": "1461840",
    "end": "1467240"
  },
  {
    "text": "collection right so now when we talk about immutability in cotlin what we are",
    "start": "1467240",
    "end": "1473039"
  },
  {
    "text": "talking about exactly is I get the collection that I can't change if I",
    "start": "1473039",
    "end": "1478640"
  },
  {
    "text": "specify that I want to get a parameter that is of type list then I can't change",
    "start": "1478640",
    "end": "1484039"
  },
  {
    "text": "it but I have no idea whether it's actually like a list or a mutable list",
    "start": "1484039",
    "end": "1489279"
  },
  {
    "text": "right however if we go to Scala Scala decided to do it differently how do they",
    "start": "1489279",
    "end": "1495120"
  },
  {
    "text": "do it they have two completely independent class hierarchies one class",
    "start": "1495120",
    "end": "1500240"
  },
  {
    "text": "hierarchy the one on the left is the thingy that is immutable so those things",
    "start": "1500240",
    "end": "1506039"
  },
  {
    "text": "never change unless someone really goes and does tons of hacking behind the",
    "start": "1506039",
    "end": "1511480"
  },
  {
    "text": "scenes right with lowlevel crazy reflection and pointers and whatever right and the collection on the right or",
    "start": "1511480",
    "end": "1519039"
  },
  {
    "text": "the hierarchy on the right is about classes that can change so notice what",
    "start": "1519039",
    "end": "1525039"
  },
  {
    "text": "is important in here that we have the same name names sorry we have the same",
    "start": "1525039",
    "end": "1530520"
  },
  {
    "text": "names both here for instance we have map that is mutable and we have the same",
    "start": "1530520",
    "end": "1535760"
  },
  {
    "text": "thingy here map that is immutable they live in two different name spaces have",
    "start": "1535760",
    "end": "1541559"
  },
  {
    "text": "exactly the same names but live in two different packages as they call it so that's how we explain how we express",
    "start": "1541559",
    "end": "1548080"
  },
  {
    "text": "whether we would like to have immutability or readon collections similar case in C right in C we do have",
    "start": "1548080",
    "end": "1554480"
  },
  {
    "text": "read only collections we do have read only like types that express the idea and the idea is much more closer to to",
    "start": "1554480",
    "end": "1561559"
  },
  {
    "text": "this cotl thingy not to this Scala thingy okay enough of that so we finished LSP solid is quite beautiful",
    "start": "1561559",
    "end": "1569520"
  },
  {
    "text": "have many principles let's bash dependency inversion now for a second okay what about dependency inversion",
    "start": "1569520",
    "end": "1576320"
  },
  {
    "text": "let's say that you would like to change or actually let's start with this question how do you replace a string we",
    "start": "1576320",
    "end": "1582600"
  },
  {
    "text": "are C developers we have our system. string or whatever wherever it lives it",
    "start": "1582600",
    "end": "1588640"
  },
  {
    "text": "has some implementation you probably know the implementation is based on array of characters right each character",
    "start": "1588640",
    "end": "1596000"
  },
  {
    "text": "is how many bytes long two bytes long right why because we copied from java and Java wanted to have characters that",
    "start": "1596000",
    "end": "1602799"
  },
  {
    "text": "can expl express um utf16 code set we know it doesn't work anymore because",
    "start": "1602799",
    "end": "1609039"
  },
  {
    "text": "utf16 is actually 21 uh bits long so two bytes kind of",
    "start": "1609039",
    "end": "1614360"
  },
  {
    "text": "doesn't work for this case but that's history so we have characters array of characters now what strings do we",
    "start": "1614360",
    "end": "1620120"
  },
  {
    "text": "typically deal with obviously American ones right so we have an strings or or",
    "start": "1620120",
    "end": "1625720"
  },
  {
    "text": "asky character set or whatever else right how many characters do we have there something like 130 with some",
    "start": "1625720",
    "end": "1632080"
  },
  {
    "text": "special characters but generally less than eight bits for storing all of them right what happens now I have a string",
    "start": "1632080",
    "end": "1639240"
  },
  {
    "text": "that wasts like half of the memory for storing those additional bites that we",
    "start": "1639240",
    "end": "1645200"
  },
  {
    "text": "very rarely use if ever right now the question is how do I replace this string",
    "start": "1645200",
    "end": "1651039"
  },
  {
    "text": "how do I change the implementation of the string and if you go actually to GitHub you will find that net wanted to",
    "start": "1651039",
    "end": "1658320"
  },
  {
    "text": "do that there are some types like utf8 string type that is kind of going",
    "start": "1658320",
    "end": "1663880"
  },
  {
    "text": "towards this direction now can we do it in the source code can we change our strings to be utf8 based instead of",
    "start": "1663880",
    "end": "1671799"
  },
  {
    "text": "utf16 so basically with characters and obviously if you dig deeper you know",
    "start": "1671799",
    "end": "1677080"
  },
  {
    "text": "that it's not possible possible why first because the string class is a class it's not an interface right and",
    "start": "1677080",
    "end": "1683960"
  },
  {
    "text": "have you ever actually thought there is an interface for string something like I String a we don't have that right second",
    "start": "1683960",
    "end": "1691480"
  },
  {
    "text": "it's a sealed class so we can't inherit from it and change the behavior third internals of net runtime heavily rely on",
    "start": "1691480",
    "end": "1700240"
  },
  {
    "text": "the string implementation just because they grab a pointer and go through the characters with lowlevel magic so if we",
    "start": "1700240",
    "end": "1707000"
  },
  {
    "text": "change that implementation we change do run time and break it heavily and the other thingy is even in Intermediate",
    "start": "1707000",
    "end": "1714399"
  },
  {
    "text": "Language we have string leros so it's basically like a first type first class",
    "start": "1714399",
    "end": "1720799"
  },
  {
    "text": "citizen we could call something living on its own representing a string string implementation is so deep into the net",
    "start": "1720799",
    "end": "1728360"
  },
  {
    "text": "runtime then it's kind of hard to change it but you might ask okay why would we ever change it then I know a waste of",
    "start": "1728360",
    "end": "1735440"
  },
  {
    "text": "memory but hey we have terabytes of ram now so who would care right so let's see some history in Java for instance they",
    "start": "1735440",
    "end": "1742240"
  },
  {
    "text": "implemented in it the same way or it actually is the opposite we implemented it in the same way and around Java 9",
    "start": "1742240",
    "end": "1749399"
  },
  {
    "text": "they changed this implementation so now they have strings that can switch the",
    "start": "1749399",
    "end": "1755000"
  },
  {
    "text": "implementation between like two bytes for a character versus one bite for a character to save the memory they also",
    "start": "1755000",
    "end": "1761720"
  },
  {
    "text": "Chang the concatenation performance just because we do the plus operator and join",
    "start": "1761720",
    "end": "1767000"
  },
  {
    "text": "to Strings and it's compiled to Something in Java it uses the instruction that is called invoke",
    "start": "1767000",
    "end": "1772919"
  },
  {
    "text": "Dynamic that creates a specific call site after you start the application so",
    "start": "1772919",
    "end": "1778279"
  },
  {
    "text": "the first execution is slow but then it's super hard it's very similar to DLR",
    "start": "1778279",
    "end": "1783559"
  },
  {
    "text": "Dynamic and keyword that we have in C first execution is slow but once we have",
    "start": "1783559",
    "end": "1788840"
  },
  {
    "text": "all the call S sites it gets much faster so they did it they did it in Java what else Facebook they decided to change the",
    "start": "1788840",
    "end": "1796799"
  },
  {
    "text": "implementation of their strings in C++ I actually encourage you to take a look at",
    "start": "1796799",
    "end": "1801919"
  },
  {
    "text": "this talk that is titled the strange details of STD string at Facebook and they explained how to how they changed",
    "start": "1801919",
    "end": "1809480"
  },
  {
    "text": "the the implementation and achieved one performance one% performance Improvement",
    "start": "1809480",
    "end": "1816240"
  },
  {
    "text": "and you may say 1% is it worth it right but when we think about scale and we",
    "start": "1816240",
    "end": "1822000"
  },
  {
    "text": "think about hundreds of thousands of machines they have at Facebook or at meta then 1% is actually a big chunk of",
    "start": "1822000",
    "end": "1829200"
  },
  {
    "text": "money that we can save just by doing that and the way they did it is they just replaced what string you import",
    "start": "1829200",
    "end": "1835480"
  },
  {
    "text": "after they implemented it if we take a look at JavaScript for instance we typically say that an object is in",
    "start": "1835480",
    "end": "1842159"
  },
  {
    "text": "JavaScript is basically a dictionary a hashmap right so we have a key and a value arrays are represented the same",
    "start": "1842159",
    "end": "1849559"
  },
  {
    "text": "way basically a key is a number right 0 one two whatever and then a value right but if we take a look at how it's",
    "start": "1849559",
    "end": "1855799"
  },
  {
    "text": "implemented in V8 then there are five different implementations or at some point there were at least five different",
    "start": "1855799",
    "end": "1862200"
  },
  {
    "text": "implementations that were tuned for particular performance so if you have an",
    "start": "1862200",
    "end": "1867320"
  },
  {
    "text": "object that is like only two keys and two values that's it then we store it differently to save memory and also to",
    "start": "1867320",
    "end": "1874919"
  },
  {
    "text": "improve the performance of read and WR access so we want to do those hacks",
    "start": "1874919",
    "end": "1880080"
  },
  {
    "text": "actually if you ever go to any like fancy talks these days about net and you",
    "start": "1880080",
    "end": "1885519"
  },
  {
    "text": "read you hear about span memory about array pool and all that stuff they",
    "start": "1885519",
    "end": "1891240"
  },
  {
    "text": "always brag about hey notice we just changed the implementation you now get slice it's Turbo FAST right they just do",
    "start": "1891240",
    "end": "1898039"
  },
  {
    "text": "it this way they exactly do those things behind the scenes can we change the string well we cannot that is the case",
    "start": "1898039",
    "end": "1905919"
  },
  {
    "text": "we broke it and if you take a look at solid principles dependency inversion",
    "start": "1905919",
    "end": "1911360"
  },
  {
    "text": "you should never code against implementation you should go code against interface is string an interface",
    "start": "1911360",
    "end": "1919320"
  },
  {
    "text": "not at all it's class it's sealed class it's exposed on so many levels generally",
    "start": "1919320",
    "end": "1924559"
  },
  {
    "text": "we can't do that right but that's not the end of the story when it comes to to",
    "start": "1924559",
    "end": "1930120"
  },
  {
    "text": "to string if you have date time now do we have an interface for getting now now",
    "start": "1930120",
    "end": "1936000"
  },
  {
    "text": "we do how many years it took us to finally get the interface for daytime now right F the things from static",
    "start": "1936000",
    "end": "1942960"
  },
  {
    "text": "configuration right that that was mostly historical those things hopefully the like successfully changed environment",
    "start": "1942960",
    "end": "1949840"
  },
  {
    "text": "exit do we have something like iitable in interface if you ever call environment. exit directly in your code",
    "start": "1949840",
    "end": "1958320"
  },
  {
    "text": "think twice I encourage you because then one day on Friday night you wake up and",
    "start": "1958320",
    "end": "1963399"
  },
  {
    "text": "why is my application dying with no reason and then you figure out someone",
    "start": "1963399",
    "end": "1968760"
  },
  {
    "text": "called environment. exit so always have an interface and generally always block this method do not do it without logging",
    "start": "1968760",
    "end": "1974760"
  },
  {
    "text": "but that's another thingy what more in it's not enough that we broke those principles like dependency inversion we",
    "start": "1974760",
    "end": "1981760"
  },
  {
    "text": "even figure out a way to test how we broke it for instance most libraries for",
    "start": "1981760",
    "end": "1986840"
  },
  {
    "text": "instance power mocking Java for instance other mocking techniques to mock static to mock private to mock other things",
    "start": "1986840",
    "end": "1993399"
  },
  {
    "text": "hidden behind the scenes right we know how to deal with that even though we just break the principles that's the",
    "start": "1993399",
    "end": "1999159"
  },
  {
    "text": "thingy we are doing wrong but we can take it even further imagine that Adam",
    "start": "1999159",
    "end": "2004240"
  },
  {
    "text": "fman would like to create a new language better C make C great again and Adam for",
    "start": "2004240",
    "end": "2009880"
  },
  {
    "text": "manic decided that this fancy language will have colors of a function every",
    "start": "2009880",
    "end": "2015679"
  },
  {
    "text": "function should be either green or red that's cool you just need to specify just like you specify Methodist void",
    "start": "2015679",
    "end": "2022559"
  },
  {
    "text": "return string whatever we specify that it's green function or red function so far good but then I tell you that hey if",
    "start": "2022559",
    "end": "2030440"
  },
  {
    "text": "you have two green functions you can call them easily if you have green function that you would like to call",
    "start": "2030440",
    "end": "2036440"
  },
  {
    "text": "from Red function ah it's kind of okay let's do it if you have red function",
    "start": "2036440",
    "end": "2042720"
  },
  {
    "text": "code from Red function all is good but if you have red function code from Green function nah nah that that doesn't work",
    "start": "2042720",
    "end": "2050200"
  },
  {
    "text": "don't do it what would you think about a language like that and now does it resemble you",
    "start": "2050200",
    "end": "2056358"
  },
  {
    "text": "anything yeah it does it's exactly what we have with async async in C is exactly",
    "start": "2056359",
    "end": "2063599"
  },
  {
    "text": "called function coloring so we have functions of two different colors and if we call a synchronous method from a",
    "start": "2063599",
    "end": "2070520"
  },
  {
    "text": "synchronous one that's a big no no and if you were around 10 years ago when",
    "start": "2070520",
    "end": "2076280"
  },
  {
    "text": "they introduced async and you had to rewrite all your synchronous code bases to asynchronous oneth and you wanted to",
    "start": "2076280",
    "end": "2083398"
  },
  {
    "text": "really cut corners and change synchronization context and do all the magic to avoid rewriting the stones of",
    "start": "2083399",
    "end": "2089440"
  },
  {
    "text": "code and you hit all the Deadlocks you know what I'm talking about but that's not the end of the story now we have",
    "start": "2089440",
    "end": "2096200"
  },
  {
    "text": "value task it's even better you shouldn't be calling value task for a task because well it kind of is against",
    "start": "2096200",
    "end": "2102520"
  },
  {
    "text": "the purpose right notice what we are doing here and I'm going to I actually have even other talk that is tied to",
    "start": "2102520",
    "end": "2109040"
  },
  {
    "text": "acing biggest C biggest mistake in C so I encourage you to take a look at that but what I'm saying here is we broke the",
    "start": "2109040",
    "end": "2116440"
  },
  {
    "text": "pendency inversion heavily because now every function that we have needs to",
    "start": "2116440",
    "end": "2121800"
  },
  {
    "text": "know what it does and how it does it it needs to know whether it is returning a",
    "start": "2121800",
    "end": "2127200"
  },
  {
    "text": "regular task or a value task it just needs to know that this breaks dependency inversion this breaks SRP",
    "start": "2127200",
    "end": "2134760"
  },
  {
    "text": "this breaks so many principles and all the languages they copied it from C so",
    "start": "2134760",
    "end": "2140440"
  },
  {
    "text": "python JavaScript C++ all the languages they went this way and just copied it",
    "start": "2140440",
    "end": "2146520"
  },
  {
    "text": "the only language that did it in different way was Java go was actually",
    "start": "2146520",
    "end": "2152000"
  },
  {
    "text": "doing it in the same way I think as C uh okay so we bash Java we bash other Lang",
    "start": "2152000",
    "end": "2157640"
  },
  {
    "text": "languages let's carry on do not repeat yourself right okay so let's see another example how we break decent principles",
    "start": "2157640",
    "end": "2164560"
  },
  {
    "text": "is software engineering and actually let's mock async just a little bit more you know that you shouldn't be calling",
    "start": "2164560",
    "end": "2170640"
  },
  {
    "text": "async functions from synchronous ones right so this is if you ever call file.",
    "start": "2170640",
    "end": "2176599"
  },
  {
    "text": "read all text right you can go behind the scenes and it's you see that it kind of does this makes sense right so we",
    "start": "2176599",
    "end": "2184359"
  },
  {
    "text": "basically make sure that our parameters are correct we got the stream reader read the file no magic here how do we do",
    "start": "2184359",
    "end": "2191720"
  },
  {
    "text": "that in async well in async things are getting a little bit trickier and the",
    "start": "2191720",
    "end": "2197400"
  },
  {
    "text": "important thing to notice here is first this is way longer second much harder to",
    "start": "2197400",
    "end": "2203240"
  },
  {
    "text": "understand what's going on and third you just can't reuse implementation between",
    "start": "2203240",
    "end": "2209760"
  },
  {
    "text": "those two methods you can't take synchronous code and call it from an",
    "start": "2209760",
    "end": "2215040"
  },
  {
    "text": "asynchronous one it will technically work you won't have any Deadlocks right but it will be too slow it will",
    "start": "2215040",
    "end": "2221720"
  },
  {
    "text": "completely break the concept of asynchronous programming so what do we have to do we need to have to implement",
    "start": "2221720",
    "end": "2228960"
  },
  {
    "text": "every method async every single method async I'm just waiting for console right",
    "start": "2228960",
    "end": "2234680"
  },
  {
    "text": "line async and honestly I am I'm like serious here because I've seen a single",
    "start": "2234680",
    "end": "2241160"
  },
  {
    "text": "project in which console right line was actually a bottleneck why because console right line synchronizes access",
    "start": "2241160",
    "end": "2248079"
  },
  {
    "text": "to the console window right so console right line async makes sense hopefully",
    "start": "2248079",
    "end": "2254240"
  },
  {
    "text": "one day we're going to see it so Asing actually defeats the purpose of do not repeat yourself hope like fortunately we",
    "start": "2254240",
    "end": "2261280"
  },
  {
    "text": "have a completely different principle nowadays I don't know whether you have heard about it it's called wet write",
    "start": "2261280",
    "end": "2267520"
  },
  {
    "text": "everything twice that makes sense let's carry on folks inheritance and Here",
    "start": "2267520",
    "end": "2273119"
  },
  {
    "text": "Comes Here Comes regs if I ask you do we have m multiple inheritance if in C",
    "start": "2273119",
    "end": "2279839"
  },
  {
    "text": "hands up if you say no okay hands up if you say",
    "start": "2279839",
    "end": "2286280"
  },
  {
    "text": "yes okay hands up if you just failed the interview question for a c developer",
    "start": "2286280",
    "end": "2292480"
  },
  {
    "text": "gotcha okay this is a common question do we have a multiple inheritance in C right common question during C",
    "start": "2292480",
    "end": "2299400"
  },
  {
    "text": "interviews y y y y the answer typically shouldn't be surprising but as we",
    "start": "2299400",
    "end": "2304520"
  },
  {
    "text": "already know during this talk it's not as easy as we may seem as it may seem H the answer is no we don't have multiple",
    "start": "2304520",
    "end": "2310960"
  },
  {
    "text": "inheritance in C that was the correct answer but now we can actually ask doy",
    "start": "2310960",
    "end": "2317960"
  },
  {
    "text": "doy is it really the case so typically we can inherit only from one based class this is the case in C this is the case",
    "start": "2317960",
    "end": "2324920"
  },
  {
    "text": "in Java this is the case in many other Enterprises language these days right",
    "start": "2324920",
    "end": "2330400"
  },
  {
    "text": "sometimes we can't even inherit at all let's take structures in C can they inherit well if you read the internos",
    "start": "2330400",
    "end": "2337480"
  },
  {
    "text": "you know they inherit from something like value object I think that's called then which in turn inherits from",
    "start": "2337480",
    "end": "2343400"
  },
  {
    "text": "system.object but you can't make structure inherit from another structure",
    "start": "2343400",
    "end": "2350318"
  },
  {
    "text": "why just because that's the answer uh they just made the decision that you can't inherit one structure from the",
    "start": "2350800",
    "end": "2357280"
  },
  {
    "text": "other even though technically it's perfectly possible probably could make some issues if we really take Ed cases y",
    "start": "2357280",
    "end": "2364000"
  },
  {
    "text": "yada but generally should work pretty well so this is what we said we only have single inheritance in C in Java in",
    "start": "2364000",
    "end": "2371119"
  },
  {
    "text": "those languages but actually let's dig deeper so multiple inheritance was a",
    "start": "2371119",
    "end": "2376960"
  },
  {
    "text": "feature of object-oriented programming we in which we can inherit from two base",
    "start": "2376960",
    "end": "2382040"
  },
  {
    "text": "classes right C++ allowed us to do so and it posed a problem that we call a",
    "start": "2382040",
    "end": "2389040"
  },
  {
    "text": "diamond problem the problem where we inherit from two different code paths",
    "start": "2389040",
    "end": "2394520"
  },
  {
    "text": "and it kind of make things shaky so we have Class A and this class A is a base",
    "start": "2394520",
    "end": "2400839"
  },
  {
    "text": "type for two different classes sorry my mouse is gone and oh there it is so we",
    "start": "2400839",
    "end": "2407119"
  },
  {
    "text": "have base class and then we inherit from it with two sub classes B and C and then we have D and now if D would like to",
    "start": "2407119",
    "end": "2414440"
  },
  {
    "text": "access some field or method from a the question is should it go through b or",
    "start": "2414440",
    "end": "2420920"
  },
  {
    "text": "should it go through C and this is a problem that we typically call a diamond",
    "start": "2420920",
    "end": "2426240"
  },
  {
    "text": "problem as you can can see from the shape and this problem was so important",
    "start": "2426240",
    "end": "2431400"
  },
  {
    "text": "in C++ that Java decided no we are not going this way we ban multiple",
    "start": "2431400",
    "end": "2438319"
  },
  {
    "text": "inheritance we don't make it even optional it's prohibited this solves the",
    "start": "2438319",
    "end": "2443400"
  },
  {
    "text": "problems for good C was copying from java so we have exactly the same now",
    "start": "2443400",
    "end": "2449280"
  },
  {
    "text": "what I'm going to show you in the next slides is that first not only do we have",
    "start": "2449280",
    "end": "2455880"
  },
  {
    "text": "Diamond problem in C and in Java we had it from the very beginning and we solved",
    "start": "2455880",
    "end": "2462319"
  },
  {
    "text": "it in many many places so let's see what's the case we solved the diamond",
    "start": "2462319",
    "end": "2468240"
  },
  {
    "text": "problems many times let's take some cish code let's say that we have interface a",
    "start": "2468240",
    "end": "2473640"
  },
  {
    "text": "with method void Fu and then we have interface B with method void F and then",
    "start": "2473640",
    "end": "2479200"
  },
  {
    "text": "we have class C that inherits or implements A and B and notice this",
    "start": "2479200",
    "end": "2484960"
  },
  {
    "text": "subtle difference now Java was so scared of multiple inheritance that they even",
    "start": "2484960",
    "end": "2490680"
  },
  {
    "text": "renamed the activity we do when we inherit from interfaces we Implement interfaces we do not inherit from",
    "start": "2490680",
    "end": "2497800"
  },
  {
    "text": "interfaces that's a subtle difference so we Implement two different interfaces and we provide method void Fu and then",
    "start": "2497800",
    "end": "2504319"
  },
  {
    "text": "we do this so cc equals new cc. fu is it going to compile hands",
    "start": "2504319",
    "end": "2510240"
  },
  {
    "text": "up yes yes no okay so the answer is yes",
    "start": "2510240",
    "end": "2516000"
  },
  {
    "text": "it's going to compile and yes it's going to work why you may say there is no",
    "start": "2516000",
    "end": "2521079"
  },
  {
    "text": "diamond problem at all in here because well those two methods they have exactly the same signature right it's the same",
    "start": "2521079",
    "end": "2528280"
  },
  {
    "text": "name the same list of parameters the same return type no diamond problem at",
    "start": "2528280",
    "end": "2533359"
  },
  {
    "text": "all okay let's make it a little bit more interesting so another C riddle I have",
    "start": "2533359",
    "end": "2539119"
  },
  {
    "text": "method F that accepts two integer parameters and then I have method F that",
    "start": "2539119",
    "end": "2544400"
  },
  {
    "text": "accepts an array which is a param array so ellipses array and I do this is it",
    "start": "2544400",
    "end": "2551440"
  },
  {
    "text": "going to compile if yes hands up if no hands up okay the answer is yes it is",
    "start": "2551440",
    "end": "2559880"
  },
  {
    "text": "going to compile which method is it going to call the one at the top hands up the one at the bottom hands up okay",
    "start": "2559880",
    "end": "2568720"
  },
  {
    "text": "the answer is it's going to call the one at the top it is going to compile it is",
    "start": "2568720",
    "end": "2574440"
  },
  {
    "text": "going to call this method at the top why you may say well no diamond problem at",
    "start": "2574440",
    "end": "2579480"
  },
  {
    "text": "all it's trivial here right we have two parameters this method has two parameters makes sense to code this one",
    "start": "2579480",
    "end": "2586599"
  },
  {
    "text": "over this one right this one is just pretending that it has two parameters or many right but notice another important",
    "start": "2586599",
    "end": "2593400"
  },
  {
    "text": "thingy what if this method doesn't exist this code will compile and will work",
    "start": "2593400",
    "end": "2599680"
  },
  {
    "text": "what happens if we then introduce this method we break the backwards",
    "start": "2599680",
    "end": "2605480"
  },
  {
    "text": "compatibility on the execution level why because the code still compiles right",
    "start": "2605480",
    "end": "2611839"
  },
  {
    "text": "but now it calls a different method okay but that's Edge case nothing special",
    "start": "2611839",
    "end": "2617319"
  },
  {
    "text": "here we have two me two parameters versus one parameter all makes sense no diamond problem St fuzzing around let's",
    "start": "2617319",
    "end": "2623400"
  },
  {
    "text": "take another riddle we have a method F that accepts long and we have a method F that accepts double and then we call it",
    "start": "2623400",
    "end": "2630640"
  },
  {
    "text": "this way notice that one two three is neither long nor double it's neither of",
    "start": "2630640",
    "end": "2636839"
  },
  {
    "text": "these to is it going to compile and which method is it going to run and you may say well it's obvious",
    "start": "2636839",
    "end": "2644559"
  },
  {
    "text": "one to three is long or double okay long hands up double hands",
    "start": "2644559",
    "end": "2651880"
  },
  {
    "text": "up okay okay long was more common that probably makes sense here it's obvious",
    "start": "2651880",
    "end": "2657280"
  },
  {
    "text": "that one to three is long right that's how we solve the diamond problem in this case again notice that if we didn't have",
    "start": "2657280",
    "end": "2665000"
  },
  {
    "text": "this method and then we introduced it then we again break the compatibility",
    "start": "2665000",
    "end": "2670640"
  },
  {
    "text": "right but here C authors they decided obviously one to three is an is a long",
    "start": "2670640",
    "end": "2677000"
  },
  {
    "text": "integer not a double even though it could work for both cases let's take it",
    "start": "2677000",
    "end": "2682200"
  },
  {
    "text": "even further we have two interfaces one has method object F the other has method",
    "start": "2682200",
    "end": "2687880"
  },
  {
    "text": "string F we Implement two interfaces and then we implement the method with string",
    "start": "2687880",
    "end": "2693280"
  },
  {
    "text": "F should it compile will it compile and I guess you have some hint on the slide",
    "start": "2693280",
    "end": "2699040"
  },
  {
    "text": "well it compile and now why and this is interesting because the same code will",
    "start": "2699040",
    "end": "2705480"
  },
  {
    "text": "compile in Java this won't work in C in Java it will compile why because they",
    "start": "2705480",
    "end": "2712119"
  },
  {
    "text": "decided to support this feature they decided to support this and they implement it via the so-called bridged",
    "start": "2712119",
    "end": "2718400"
  },
  {
    "text": "methods so they have Bridge methods that will actually behind the scenes will take this string F and will call the",
    "start": "2718400",
    "end": "2726040"
  },
  {
    "text": "object F when you have the the the different um instance that you would like to call actually Okay C decided",
    "start": "2726040",
    "end": "2733800"
  },
  {
    "text": "this is something we don't support and you may now say it actually makes sense",
    "start": "2733800",
    "end": "2739599"
  },
  {
    "text": "right another Diamond problem where we made some arbitrary decision and we can",
    "start": "2739599",
    "end": "2745359"
  },
  {
    "text": "argue whether it makes sense or not as I was trying to you know convey the message it can be clear and obvious here",
    "start": "2745359",
    "end": "2752640"
  },
  {
    "text": "what the decision to make can be clear and obvious here what the decision to make can be clear and obvious what",
    "start": "2752640",
    "end": "2759319"
  },
  {
    "text": "decision to make here what about this one so we have two interfaces interface a with default interface implementation",
    "start": "2759319",
    "end": "2766760"
  },
  {
    "text": "and then interface B with default interface implementation both of them they have the same void F method we",
    "start": "2766760",
    "end": "2773240"
  },
  {
    "text": "create class C that implements both A and B and we call c. fu is it going to",
    "start": "2773240",
    "end": "2779079"
  },
  {
    "text": "compile hands up okay is it okay so is it going to",
    "start": "2779079",
    "end": "2785359"
  },
  {
    "text": "call method from at the top top hands up or at the bottom hands up and I can see",
    "start": "2785359",
    "end": "2791040"
  },
  {
    "text": "no one is raising their hands now okay what is the answer it's not going to compile why because we have a diamond",
    "start": "2791040",
    "end": "2799200"
  },
  {
    "text": "problem but how to make it compile where to make it compile it's actually super",
    "start": "2799200",
    "end": "2804960"
  },
  {
    "text": "simple what we need to do is we basically need to do something like C equals new C and then we cast the C to",
    "start": "2804960",
    "end": "2813280"
  },
  {
    "text": "the proper interface and call Fu and Bank it works you can tell me now how is",
    "start": "2813280",
    "end": "2819280"
  },
  {
    "text": "it different from the actual like multiple inheritance with this case and",
    "start": "2819280",
    "end": "2825000"
  },
  {
    "text": "obviously we can argue whether it is different whether it's the same but let's carry on those discussions Diamond",
    "start": "2825000",
    "end": "2831480"
  },
  {
    "text": "problem happens in many places in programming languages it's not about the",
    "start": "2831480",
    "end": "2836800"
  },
  {
    "text": "inheritance per se this is how we typically think about Diamond problem right but it's not the only case it's",
    "start": "2836800",
    "end": "2843480"
  },
  {
    "text": "about that we have the same thingy that can point to two different things so the",
    "start": "2843480",
    "end": "2849240"
  },
  {
    "text": "same piece of code that can point to two different things and we need to decide okay we need to resolve to which thing",
    "start": "2849240",
    "end": "2856680"
  },
  {
    "text": "it does Point okay and there are many ways to do so we can say that nobody",
    "start": "2856680",
    "end": "2862520"
  },
  {
    "text": "decides we simply ban such a code and assume that it doesn't exist we can say",
    "start": "2862520",
    "end": "2868359"
  },
  {
    "text": "that there is just one logical pick so we just make this P just like with this void F method in interfaces right we can",
    "start": "2868359",
    "end": "2875240"
  },
  {
    "text": "say that there are many PS just like with methods accepting Longs or doubles and we just make the decision just",
    "start": "2875240",
    "end": "2881720"
  },
  {
    "text": "because we know better or we can ask the user to make the choice just like we",
    "start": "2881720",
    "end": "2887200"
  },
  {
    "text": "have with the multiple inheritance in this case of default interface implementations and we solved the",
    "start": "2887200",
    "end": "2893160"
  },
  {
    "text": "diamond problem in many places already it's not that we need to be scared of",
    "start": "2893160",
    "end": "2898280"
  },
  {
    "text": "this problem it's just we can solve it we need to be just explicit how we solve it but let us now go to the multiple",
    "start": "2898280",
    "end": "2905920"
  },
  {
    "text": "inheritance question in C actually there are different types of inheritance if we",
    "start": "2905920",
    "end": "2911000"
  },
  {
    "text": "take a look from a theoretical point of view so we have signature inheritance implementation and other let's see them",
    "start": "2911000",
    "end": "2917640"
  },
  {
    "text": "one by one signature inheritance is when we inherit the interface the set of",
    "start": "2917640",
    "end": "2923400"
  },
  {
    "text": "method signatures or method declarations right so we basically a method signature",
    "start": "2923400",
    "end": "2928520"
  },
  {
    "text": "in C it's the name it's the list of parameters and that's it return type is",
    "start": "2928520",
    "end": "2935240"
  },
  {
    "text": "not a part of the method signature in C interestingly enough it is a part of a",
    "start": "2935240",
    "end": "2941799"
  },
  {
    "text": "signature in the Intermediate Language if you start writing code in the Intermediate Language in iio then you",
    "start": "2941799",
    "end": "2948359"
  },
  {
    "text": "need to specify the return type of the method when you code the method because you need to be very explicit because you",
    "start": "2948359",
    "end": "2954480"
  },
  {
    "text": "need to make the choice and resolve how to call it in C++ it's actually even",
    "start": "2954480",
    "end": "2959880"
  },
  {
    "text": "more interesting obviously because C++ is just more interesting when we need to deal with details and in this case when",
    "start": "2959880",
    "end": "2966160"
  },
  {
    "text": "we talk about about signature inheritance we do have multiple signature inheritance in C because we",
    "start": "2966160",
    "end": "2972960"
  },
  {
    "text": "can Implement multiple interfaces right so we do have multiple signature",
    "start": "2972960",
    "end": "2978359"
  },
  {
    "text": "inheritance another type of inheritance is implementation inheritance in implementation inheritance we inherit",
    "start": "2978359",
    "end": "2985040"
  },
  {
    "text": "method bodies not only the signatures but also the bodies of the methods and",
    "start": "2985040",
    "end": "2990079"
  },
  {
    "text": "we can see now that we have that in C by the default interface implementation so",
    "start": "2990079",
    "end": "2995319"
  },
  {
    "text": "we do have m Le implementation inheritance in C when it comes to State",
    "start": "2995319",
    "end": "3001760"
  },
  {
    "text": "inheritance we inherit fields of the classes and this is something we do not",
    "start": "3001760",
    "end": "3007720"
  },
  {
    "text": "have in C we can't inherit fields from multiple classes but since we can",
    "start": "3007720",
    "end": "3014280"
  },
  {
    "text": "inherit multiple bodies thanks to implementation inheritance Nothing Stops",
    "start": "3014280",
    "end": "3019760"
  },
  {
    "text": "us from pretending like we are inheriting Fields by implementing a static concurrent dictionary that would",
    "start": "3019760",
    "end": "3027280"
  },
  {
    "text": "keep the body of all the fields that we are into and this is how we could Implement multiple State inheritance but",
    "start": "3027280",
    "end": "3034760"
  },
  {
    "text": "C doesn't support that according to the definition and finally identity",
    "start": "3034760",
    "end": "3040079"
  },
  {
    "text": "inheritance in identity inheritance we inherit the Constructor of the type",
    "start": "3040079",
    "end": "3045760"
  },
  {
    "text": "again in C we do not have this feature we don't have multiple identity",
    "start": "3045760",
    "end": "3051280"
  },
  {
    "text": "inheritance in C or do we and let me actually show you a little bit of code",
    "start": "3051280",
    "end": "3058200"
  },
  {
    "text": "that is actually doing some let's call it black magic so we create an object",
    "start": "3058200",
    "end": "3063960"
  },
  {
    "text": "multiple inheritance object let's make it a little bit uh bigger so for you to see and we basically create multiple",
    "start": "3063960",
    "end": "3071319"
  },
  {
    "text": "inheritance instance that inherits from all those base classes right what are",
    "start": "3071319",
    "end": "3076440"
  },
  {
    "text": "those base classes if we scroll down we have Base Class with like integer field with bite field with like doubles with",
    "start": "3076440",
    "end": "3083760"
  },
  {
    "text": "string whatever and they all have different methods like print string print Fields print bite print int okay",
    "start": "3083760",
    "end": "3090920"
  },
  {
    "text": "so we create an object notice it's important here this is an object okay",
    "start": "3090920",
    "end": "3097680"
  },
  {
    "text": "what we do then is we print the address of this object and then we try to take",
    "start": "3097680",
    "end": "3103559"
  },
  {
    "text": "the object multiple inheritance object and we would like to pretend it's now",
    "start": "3103559",
    "end": "3108640"
  },
  {
    "text": "base one so we take it as base one and you can see it's base one here we get",
    "start": "3108640",
    "end": "3114079"
  },
  {
    "text": "the type of this thingy we get the address we assign field and then we call a method we do the same for base two",
    "start": "3114079",
    "end": "3122000"
  },
  {
    "text": "notice that we take base one object so the one that was initially multiple inheritance object here we take base two",
    "start": "3122000",
    "end": "3129760"
  },
  {
    "text": "we take base two as base three we take base three as base 4 then as base three and whatnot and if we take it you can",
    "start": "3129760",
    "end": "3137359"
  },
  {
    "text": "see that what do we have here well the address of this object is always the",
    "start": "3137359",
    "end": "3142400"
  },
  {
    "text": "same the content of this object is changing and obviously the type of this",
    "start": "3142400",
    "end": "3147799"
  },
  {
    "text": "object is changing so if you really want to have multiple inheritance you can",
    "start": "3147799",
    "end": "3152839"
  },
  {
    "text": "take a look at this piece of code so now coming back to the slides let me ask you",
    "start": "3152839",
    "end": "3158720"
  },
  {
    "text": "this question at the very end of the day is there a multiple inheritance in C",
    "start": "3158720",
    "end": "3164319"
  },
  {
    "text": "hands up if you say yes and now forget what I told you because you will fail and CP interview",
    "start": "3164319",
    "end": "3171280"
  },
  {
    "text": "question the answer is no let's carry on we have couple more minutes so we will just wrap it up with exceptions",
    "start": "3171280",
    "end": "3177079"
  },
  {
    "text": "exceptions are always great to deal with that is because we always pretend like it's all going to work well and then",
    "start": "3177079",
    "end": "3183000"
  },
  {
    "text": "obviously it fails so exceptions trivia question yet another one let's see that",
    "start": "3183000",
    "end": "3188680"
  },
  {
    "text": "we have the following C code so we have try then we have tried then we have finally and we catch some exceptions so",
    "start": "3188680",
    "end": "3195760"
  },
  {
    "text": "in Tri block we throw the exception exception one okay then what happens is",
    "start": "3195760",
    "end": "3202280"
  },
  {
    "text": "we would like to handle this exception so we start analyzing the code with two pass exception system and we notice oh",
    "start": "3202280",
    "end": "3209240"
  },
  {
    "text": "there is a catch Handler so we should handle this exception right so we start unwinding the stock and then in the",
    "start": "3209240",
    "end": "3216720"
  },
  {
    "text": "finally block we throw exception to now the question is what's going to happen",
    "start": "3216720",
    "end": "3223680"
  },
  {
    "text": "What exception do we get in this catch block exception one exception two",
    "start": "3223680",
    "end": "3229480"
  },
  {
    "text": "exception I have no idea what I'm talking about what's going to happen is it going to blow out so the important",
    "start": "3229480",
    "end": "3235760"
  },
  {
    "text": "thing before actually answering the question whether this code actually happens in real life the very important",
    "start": "3235760",
    "end": "3241720"
  },
  {
    "text": "thingy about C is that if you ever have a code uh sorry if you ever have a code",
    "start": "3241720",
    "end": "3248359"
  },
  {
    "text": "that would not have this exception Handler here so you wouldn't have the",
    "start": "3248359",
    "end": "3253640"
  },
  {
    "text": "this drop try catch then this finally block is legally allowed to not be",
    "start": "3253640",
    "end": "3260440"
  },
  {
    "text": "executed this is something that c specification tells you and there were some run times that actually not",
    "start": "3260440",
    "end": "3267559"
  },
  {
    "text": "executing this finally block this is important because such an unhandled exception first it may kill your",
    "start": "3267559",
    "end": "3274079"
  },
  {
    "text": "application because just one unhandled exception kills your entire process that's not very reliable but that's for",
    "start": "3274079",
    "end": "3280200"
  },
  {
    "text": "some another time but second this is actually allowed that you won't run those finales and those finales may be",
    "start": "3280200",
    "end": "3286319"
  },
  {
    "text": "important why because you may need to release systemwide mutexes release cloud aocks or whatever else right so always",
    "start": "3286319",
    "end": "3294000"
  },
  {
    "text": "always have a top try catch always that's a rule of F that applies",
    "start": "3294000",
    "end": "3299040"
  },
  {
    "text": "to C and all the languages you can think of always have Tri catch and now this",
    "start": "3299040",
    "end": "3304240"
  },
  {
    "text": "let's discuss this example so we have two nested tries someone is throwing in finely that doesn't seem like a good",
    "start": "3304240",
    "end": "3310359"
  },
  {
    "text": "idea we would obviously stop that during code review right it just happened that we have such a code is it going to break",
    "start": "3310359",
    "end": "3316119"
  },
  {
    "text": "anything and what's going to happen and now where do we have this code in C and we actually have this code in C in many",
    "start": "3316119",
    "end": "3324440"
  },
  {
    "text": "places and those many plac places is if you ever run using construct in C then",
    "start": "3324440",
    "end": "3331960"
  },
  {
    "text": "what happens notice that this code is compiled to this piece of code so you",
    "start": "3331960",
    "end": "3337280"
  },
  {
    "text": "take this initialization and you put it before this triy block okay so notice that if",
    "start": "3337280",
    "end": "3345280"
  },
  {
    "text": "there is an exception thrown in the Constructor I know yet another stupid idea we don't do that although there are",
    "start": "3345280",
    "end": "3352000"
  },
  {
    "text": "some people that are actually hitting the database from their Constructors because they do domain driven design and",
    "start": "3352000",
    "end": "3357880"
  },
  {
    "text": "they always want to have the entity in correct State yes some people hate that some people love that let's not discuss",
    "start": "3357880",
    "end": "3363480"
  },
  {
    "text": "that generally if the exception is thrown it happens before try it's worth to to remember that but what happens",
    "start": "3363480",
    "end": "3370440"
  },
  {
    "text": "here well if there is an exception thrown then well obviously we would like",
    "start": "3370440",
    "end": "3376280"
  },
  {
    "text": "to handle this exception imagine there is a TR catch block but notice there is not it may be that this exception will",
    "start": "3376280",
    "end": "3383400"
  },
  {
    "text": "never be caught so the finally will never be executed and this is perfectly fine but imagine there is a TR catch",
    "start": "3383400",
    "end": "3389359"
  },
  {
    "text": "block here so we execute finely what do we do in finely we call resource dispose",
    "start": "3389359",
    "end": "3395119"
  },
  {
    "text": "what happens if resource do dispose frows the exception we have exactly this",
    "start": "3395119",
    "end": "3401480"
  },
  {
    "text": "problem by the way using is broken in C do not use this construct we will get to a solution in a sec so finally let's",
    "start": "3401480",
    "end": "3407799"
  },
  {
    "text": "answer the question what happens in this scenario and it heavily depends c will lose the first exception so what you are",
    "start": "3407799",
    "end": "3415079"
  },
  {
    "text": "going to have in here here is exception two you will lose exception one you",
    "start": "3415079",
    "end": "3420240"
  },
  {
    "text": "won't be able to recover it easily other languages depends python may lose the",
    "start": "3420240",
    "end": "3426039"
  },
  {
    "text": "exception may keep the exception depending on the version Java may happen the same depending on the exception type",
    "start": "3426039",
    "end": "3432200"
  },
  {
    "text": "actually in C depending on the exception type this catch Handler may not be executed at all that also makes things a",
    "start": "3432200",
    "end": "3438319"
  },
  {
    "text": "little bit more complex so generally it is crazy how should we fix it well to fix it in C this is the piece of code",
    "start": "3438319",
    "end": "3445160"
  },
  {
    "text": "that you should in in of the using construct so what do we do well we prepare two variables for exceptions we",
    "start": "3445160",
    "end": "3452000"
  },
  {
    "text": "initialize the thingy before the tri block just for the sake of compatibility with the using construct we throw the",
    "start": "3452000",
    "end": "3458440"
  },
  {
    "text": "exception we catch the exception here and then in the finally Brock we try to dispose the resource we catch the other",
    "start": "3458440",
    "end": "3465440"
  },
  {
    "text": "exception and then we basically do some ethology to figure out whether we had one exception or two of them in which",
    "start": "3465440",
    "end": "3471480"
  },
  {
    "text": "order and ultimately we just throw the uh the exception but you might ask hey",
    "start": "3471480",
    "end": "3477240"
  },
  {
    "text": "Adam why are you doing this crazy magic instead of just throw right what does",
    "start": "3477240",
    "end": "3484200"
  },
  {
    "text": "frow do how do we ref exceptions well if we take a method that like we have this",
    "start": "3484200",
    "end": "3490400"
  },
  {
    "text": "piece of code that is calling those two methods then we catch the exception and we would like to rrow it here how do we",
    "start": "3490400",
    "end": "3496280"
  },
  {
    "text": "do that well you probably know that if you do throw e then it's a big no no in",
    "start": "3496280",
    "end": "3502000"
  },
  {
    "text": "C because we lose the exception stock Trace okay that's a big no no we have a",
    "start": "3502000",
    "end": "3508079"
  },
  {
    "text": "special dedicated instruction for that that instruction is throw throw semicolon and this should propagate the",
    "start": "3508079",
    "end": "3514920"
  },
  {
    "text": "exception St properly there is a problem though you will lose whether the exception was originally coming from the",
    "start": "3514920",
    "end": "3521920"
  },
  {
    "text": "line at the top or from the line at the bottom fro semicolon is broken trademark",
    "start": "3521920",
    "end": "3528440"
  },
  {
    "text": "period do not use it what should you do then well if you are unlucky enough and",
    "start": "3528440",
    "end": "3534119"
  },
  {
    "text": "you for instance Run net framework very old then you do not have magic that was",
    "start": "3534119",
    "end": "3539480"
  },
  {
    "text": "introduced later on but this magic basically is you can use exception this patch INF for frow that is an a",
    "start": "3539480",
    "end": "3546440"
  },
  {
    "text": "construct that is an instruction that was added to support async scenarios in which we had to propagate the stack",
    "start": "3546440",
    "end": "3552520"
  },
  {
    "text": "traces properly between aing Co so you can use this instruction to pre the",
    "start": "3552520",
    "end": "3558319"
  },
  {
    "text": "exception properly if you don't have that because you are running NET Framework version two anyone in the room",
    "start": "3558319",
    "end": "3564200"
  },
  {
    "text": "doing that good I won't need to mention that many times anymore then you could",
    "start": "3564200",
    "end": "3569359"
  },
  {
    "text": "do some other magic for instance tricks with remoting or whatever else and one last thing actually let's call it",
    "start": "3569359",
    "end": "3575200"
  },
  {
    "text": "finally we say that finally should be executed no matter what every single time we obviously know this is not true",
    "start": "3575200",
    "end": "3582000"
  },
  {
    "text": "because if you just unplug your machine there is no option to execute finally right so let's not do that but there are",
    "start": "3582000",
    "end": "3588000"
  },
  {
    "text": "many other question many other situations in which finally may not be executed at all and just be aware of",
    "start": "3588000",
    "end": "3593839"
  },
  {
    "text": "that it may be skipped when your application simply terminat by doing environment exit or whatever why because",
    "start": "3593839",
    "end": "3600119"
  },
  {
    "text": "there is a time limit for those finales if they are too long they won't be executed they may be ignored depending",
    "start": "3600119",
    "end": "3606799"
  },
  {
    "text": "on the exception type that you try to catch they may be skipped on unhandled exceptions as I already mentioned and",
    "start": "3606799",
    "end": "3612839"
  },
  {
    "text": "finally May swallow exceptions and this is also important so whenever you have",
    "start": "3612839",
    "end": "3618039"
  },
  {
    "text": "to throw an exception make sure that you deal properly with logs and with what",
    "start": "3618039",
    "end": "3623559"
  },
  {
    "text": "whatever stuff you have over there that would be it and we'll need to skip the rest of it so summary many things that",
    "start": "3623559",
    "end": "3631960"
  },
  {
    "text": "we use um they are just broken that is somewhat because it's history that is",
    "start": "3631960",
    "end": "3637400"
  },
  {
    "text": "somewhat because we just didn't follow the best practices that is because we just decided it's better or that's how",
    "start": "3637400",
    "end": "3644559"
  },
  {
    "text": "it works so remember about those things and just be aware of those um remember about the contracts that is the most",
    "start": "3644559",
    "end": "3650880"
  },
  {
    "text": "important part I want to stress here Lisk of substitution principle and generally all the programming is about",
    "start": "3650880",
    "end": "3656640"
  },
  {
    "text": "dealing with the integration layers right think about the contracts make them explicit remember that they may not",
    "start": "3656640",
    "end": "3663400"
  },
  {
    "text": "be entirely in the source code they may be in weaky documentation agreed over",
    "start": "3663400",
    "end": "3668520"
  },
  {
    "text": "the phone with your client those are the best contracts that we are afraid to touch for the next 10 years so generally",
    "start": "3668520",
    "end": "3674039"
  },
  {
    "text": "be aware of those beware of acing no matter how it sounds in C you should be",
    "start": "3674039",
    "end": "3679119"
  },
  {
    "text": "aware of ACN and that would be basically it if you happen to have any questions",
    "start": "3679119",
    "end": "3684359"
  },
  {
    "text": "it's the right time to ask them at the very end of this slide de there are some links that you could take a look at to",
    "start": "3684359",
    "end": "3689760"
  },
  {
    "text": "read more this QR code points you to the to the slide deck if you would like to download it and being all of that said",
    "start": "3689760",
    "end": "3695280"
  },
  {
    "text": "I'd like to thank you for coming to this talk hope you enjoyed it thank you [Applause]",
    "start": "3695280",
    "end": "3707919"
  }
]