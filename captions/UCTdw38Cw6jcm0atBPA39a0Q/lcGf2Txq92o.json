[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "so what's on the agenda for today i first want to talk a little bit about the example that i'm going to talk about",
    "start": "4640",
    "end": "10800"
  },
  {
    "text": "uh when we watch it when we watch the code samples later um and then i would get want to get",
    "start": "10800",
    "end": "16640"
  },
  {
    "text": "everybody on the same page about what design ideas i wanted to incorporate",
    "start": "16640",
    "end": "21840"
  },
  {
    "text": "and then i'm going to explain to you why i chose academic as an implementation to solve this problem and then we'll dive",
    "start": "21840",
    "end": "28480"
  },
  {
    "text": "into some code and i'm gonna show you some things that you can do to make this work",
    "start": "28480",
    "end": "33760"
  },
  {
    "text": "and hopefully in less than an hour i'll be able to wrap it up and send you off on your next journey",
    "start": "33760",
    "end": "40879"
  },
  {
    "text": "so what have we been building we are building beer sender.net why are we",
    "start": "40879",
    "end": "45920"
  },
  {
    "text": "building beer center.net it was january this year uh everything was on",
    "start": "45920",
    "end": "52000"
  },
  {
    "start": "47000",
    "end": "47000"
  },
  {
    "text": "lockdown we were all sitting inside again we had a nice stint of like three conferences in november december and",
    "start": "52000",
    "end": "58800"
  },
  {
    "text": "then the world went on lockdown because of a micron again i was really bummed out i mean i",
    "start": "58800",
    "end": "64080"
  },
  {
    "text": "really like doing this being on stage getting lots of attention i really hate doing it at home",
    "start": "64080",
    "end": "69760"
  },
  {
    "text": "behind the webcam so it was bummed out i figured i'm gonna spread some cheer",
    "start": "69760",
    "end": "75920"
  },
  {
    "text": "so my idea came i live in belgium and what do we do in belgium better than",
    "start": "75920",
    "end": "81840"
  },
  {
    "text": "any other country in the world is making beers right so i figured if i take some of those",
    "start": "81840",
    "end": "87360"
  },
  {
    "text": "beers and i put them in a box and i send them to my friends everybody will be happy",
    "start": "87360",
    "end": "93680"
  },
  {
    "text": "right that was my plan it's a great plan isn't it",
    "start": "93680",
    "end": "98799"
  },
  {
    "text": "so what i did is i went shopping for beer and i bought uh eight cases of beer",
    "start": "98799",
    "end": "104159"
  },
  {
    "text": "and spread them over eight boxes they all had 24 different beers in them so i had a very nice selection of mostly",
    "start": "104159",
    "end": "110880"
  },
  {
    "text": "local beers um so i picked them up in these nice boxes that a friend of mine who runs a",
    "start": "110880",
    "end": "116799"
  },
  {
    "text": "micro brewery provided me and i put shipping labels on them and i",
    "start": "116799",
    "end": "122560"
  },
  {
    "text": "send them on their way so my expectation was that i would",
    "start": "122560",
    "end": "128000"
  },
  {
    "text": "contact ups and i would pay them like a handsome amount of money because these were heavy",
    "start": "128000",
    "end": "134080"
  },
  {
    "text": "boxes and a handsome amount of money to deliver these boxes where they needed",
    "start": "134080",
    "end": "139200"
  },
  {
    "text": "to be so what i expected to happen is i dropped them off at the ups shipping point and this would happen right",
    "start": "139200",
    "end": "146720"
  },
  {
    "text": "all my friends happy but that was not reality reality was like tracking pages that",
    "start": "146720",
    "end": "153920"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "look like this and if we zoom in some of them got returned to me",
    "start": "153920",
    "end": "159599"
  },
  {
    "text": "because as it turns out i do not have a license to ship beer outside of the uau",
    "start": "159599",
    "end": "166319"
  },
  {
    "text": "that was something i did not encounter so some of these boxes were going to norway and switzerland and the uk so",
    "start": "166319",
    "end": "172560"
  },
  {
    "text": "yeah um so what actually happened was that i was tracking all these",
    "start": "172560",
    "end": "178959"
  },
  {
    "text": "shipments and keeping track of which ones actually got stuck in customs i needed to provide extra content extra info about what was",
    "start": "178959",
    "end": "186400"
  },
  {
    "text": "in the boxes like lots of emails going back and forth and then without informing me of",
    "start": "186400",
    "end": "192400"
  },
  {
    "text": "anything that boxes showed up back at my help desk so i'm trying to call ups help desk which is like a different layer of",
    "start": "192400",
    "end": "199440"
  },
  {
    "text": "hell all together to figure out what had gone wrong um but the packages like half of the",
    "start": "199440",
    "end": "205920"
  },
  {
    "text": "packages returned to me so i had to like get the shipping costs reimbursed and send them again then some of them were",
    "start": "205920",
    "end": "213599"
  },
  {
    "text": "shipped correctly now but there wasn't even a delivery attempt made it's like hey kevlin did you get",
    "start": "213599",
    "end": "219200"
  },
  {
    "text": "that box it's like no i was i was here all day i didn't even get a notice in my mailbox yeah okay but they're returning",
    "start": "219200",
    "end": "225680"
  },
  {
    "text": "the box to me again so i had to re-recuperate shipping costs and then send them again and",
    "start": "225680",
    "end": "231360"
  },
  {
    "text": "one of the boxes still hasn't arrived yet so sending beer is tricky i mean making and",
    "start": "231360",
    "end": "238720"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "filling boxes is a really really fun activity if you want to to spread cheer but shipping and keeping track of",
    "start": "238720",
    "end": "244959"
  },
  {
    "text": "everything was really hard so to do all that follow-up we need beercenter.net so i figured i'm going to",
    "start": "244959",
    "end": "252080"
  },
  {
    "text": "build something for them and why do we call it beers sender.net it was not built in vb6 so i append net to the name",
    "start": "252080",
    "end": "259359"
  },
  {
    "text": "as we have been doing for 18 years why do we still do that like",
    "start": "259359",
    "end": "265440"
  },
  {
    "text": "net right um but all the fun aside um what we're here",
    "start": "265440",
    "end": "271919"
  },
  {
    "text": "to talk about is the design ideas that i would use if i were to build such an application",
    "start": "271919",
    "end": "278240"
  },
  {
    "start": "277000",
    "end": "277000"
  },
  {
    "text": "so if we summarize ddd and for me coming in contact with ddd was reading this book by eric evans it's definitely one",
    "start": "278240",
    "end": "285520"
  },
  {
    "text": "of the harder books that i've ever read it was one of the only books that i wasn't able to finish in one go and i've",
    "start": "285520",
    "end": "291040"
  },
  {
    "text": "met a lot of people who weren't able to finish this in one go so i don't feel inadequate it's just a very",
    "start": "291040",
    "end": "296639"
  },
  {
    "text": "dense book um but if we summarize it for those of you who do not have as much experience",
    "start": "296639",
    "end": "303919"
  },
  {
    "text": "in ddds the general idea is that we're gonna try and align the business side of things and the code",
    "start": "303919",
    "end": "310880"
  },
  {
    "text": "side of things we want to use one language a ubiquitous language to describe business context",
    "start": "310880",
    "end": "316880"
  },
  {
    "text": "and if possible we would like to convey that into our code and use the same context when we're writing that code and",
    "start": "316880",
    "end": "324080"
  },
  {
    "text": "in a high level if you look at a high level system you're going to have bounded context a",
    "start": "324080",
    "end": "330080"
  },
  {
    "text": "bounded context is like a certain domain where you can decide",
    "start": "330080",
    "end": "335280"
  },
  {
    "text": "where that language is applicable because a person might mean something completely different when you're",
    "start": "335280",
    "end": "342160"
  },
  {
    "text": "shipping boxes versus when you're filling them right when you're filling a box you want to",
    "start": "342160",
    "end": "348400"
  },
  {
    "text": "write a personal note to that person because here's your friend when you're shipping boxes you care where they live",
    "start": "348400",
    "end": "353520"
  },
  {
    "text": "and what customs rules will apply if i try to get that box to them so that bounded context is important",
    "start": "353520",
    "end": "361120"
  },
  {
    "text": "on a low level we're gonna try to make our code as expressive as possible we're gonna get try to get as close to the",
    "start": "361120",
    "end": "367120"
  },
  {
    "text": "business contexts as we can and for that we need to be able to separate certain blocks where we reason",
    "start": "367120",
    "end": "374560"
  },
  {
    "text": "about certain things and where all the all the events and all the commands and",
    "start": "374560",
    "end": "379840"
  },
  {
    "text": "all the code come together and that's what we call a root aggregate um it's the root for reasoning about",
    "start": "379840",
    "end": "384960"
  },
  {
    "text": "certain things now the book itself is written from a more object-oriented",
    "start": "384960",
    "end": "392080"
  },
  {
    "text": "way of doing things but if you start applying dddd especially now today",
    "start": "392080",
    "end": "399360"
  },
  {
    "text": "we are more often driven towards architectures like cqrs concepts like event sourcing",
    "start": "399360",
    "end": "406560"
  },
  {
    "text": "and you using commands and events because they make reasoning about business context a lot easier you can",
    "start": "406560",
    "end": "411840"
  },
  {
    "text": "apply techniques such as event storming where you try to describe the flow of",
    "start": "411840",
    "end": "417120"
  },
  {
    "text": "things happening in your organization so commands and events is an interesting",
    "start": "417120",
    "end": "422880"
  },
  {
    "start": "420000",
    "end": "420000"
  },
  {
    "text": "one um a command is something you can send into the system in imperative form it is a",
    "start": "422880",
    "end": "428800"
  },
  {
    "text": "request to perform a certain operation we're going to write it imperative um",
    "start": "428800",
    "end": "434800"
  },
  {
    "text": "for instance send beer that would be a good command an event is a is a notification that",
    "start": "434800",
    "end": "442000"
  },
  {
    "text": "something has happened in our system it has already taken place there's nothing you can do to change it",
    "start": "442000",
    "end": "447440"
  },
  {
    "text": "um but you can do something with that information so those are written in the past tense",
    "start": "447440",
    "end": "453599"
  },
  {
    "text": "um for instance beer received if kathleen finally gets his beer",
    "start": "453599",
    "end": "459280"
  },
  {
    "text": "then i will get that event so cqrs architectures um this has been",
    "start": "459280",
    "end": "465280"
  },
  {
    "start": "461000",
    "end": "461000"
  },
  {
    "text": "around for a while it's not necessarily linked to ddd but it's a very nice match",
    "start": "465280",
    "end": "471120"
  },
  {
    "text": "uh what we're going to do with cqrs is we're going to separate the command side of replication the",
    "start": "471120",
    "end": "478479"
  },
  {
    "text": "right site where the data is changed from the side where the data is queried",
    "start": "478479",
    "end": "485680"
  },
  {
    "text": "because it allows us to performance tune both sides separately and we have a very clear",
    "start": "485680",
    "end": "492720"
  },
  {
    "text": "boundary it's like a query cannot have side effects right it's something that in an",
    "start": "492720",
    "end": "498160"
  },
  {
    "text": "object-oriented context you might sin against um so this architecture really enforces",
    "start": "498160",
    "end": "505360"
  },
  {
    "text": "that and it's very very nice now if we think about our",
    "start": "505360",
    "end": "511120"
  },
  {
    "text": "domain driven design is we want to have a place where we send a command into the system",
    "start": "511120",
    "end": "516640"
  },
  {
    "text": "and that command is going to get handled but a command can actually it cannot fail you cannot throw an exception and",
    "start": "516640",
    "end": "523039"
  },
  {
    "text": "say like okay this command just didn't go true what you can do is you can raise events to communicate to failure or to",
    "start": "523039",
    "end": "530399"
  },
  {
    "text": "communicate the success but the command itself cannot fail the command is sent into the system and",
    "start": "530399",
    "end": "536160"
  },
  {
    "text": "you as soon as it is accepted it's going to be processed with certain results",
    "start": "536160",
    "end": "542080"
  },
  {
    "text": "and those command handlers they will talk to your true database where you are",
    "start": "542080",
    "end": "548480"
  },
  {
    "text": "able to see what the truth of the data at that moment is",
    "start": "548480",
    "end": "553920"
  },
  {
    "text": "and depending on the success failure whatever might happen you're going to raise a bunch of events to communicate",
    "start": "553920",
    "end": "559680"
  },
  {
    "text": "what has happened after you triggered that command and those events they will go on an event bus",
    "start": "559680",
    "end": "566320"
  },
  {
    "text": "and on the read side of things you can subscribe to those events and use that to project",
    "start": "566320",
    "end": "571680"
  },
  {
    "text": "your data to prepare it for read storage and then you can",
    "start": "571680",
    "end": "576959"
  },
  {
    "text": "you can use your queries to just hit read the read database",
    "start": "576959",
    "end": "582959"
  },
  {
    "text": "just in performance terms what is really powerful about this is that if for every",
    "start": "582959",
    "end": "588240"
  },
  {
    "text": "query you're going to define in your system you could make sure that it hits a table",
    "start": "588240",
    "end": "594320"
  },
  {
    "text": "on an index and it's going to be a single table select performance will always be snap fast if",
    "start": "594320",
    "end": "600160"
  },
  {
    "text": "you can achieve that and this architecture allows you to do that really quickly",
    "start": "600160",
    "end": "605680"
  },
  {
    "text": "and then there's the last thing event sourcing is a concept that",
    "start": "605680",
    "end": "611440"
  },
  {
    "text": "also can be applied in different contexts than ddd but it maps really well again if you",
    "start": "611440",
    "end": "617600"
  },
  {
    "text": "think about event sourcing you can think about stair um storing the state that your replica that",
    "start": "617600",
    "end": "624320"
  },
  {
    "text": "your data is in at a certain moment but you lose",
    "start": "624320",
    "end": "630000"
  },
  {
    "text": "the history of what happened to it what caused this data to be in the shape",
    "start": "630000",
    "end": "635440"
  },
  {
    "text": "that it is in today for instance a shopping cart is an example that is often used with this um",
    "start": "635440",
    "end": "641200"
  },
  {
    "text": "if you put product a into your shopping cart and then you see in the suggestions like you see product b and you think oh",
    "start": "641200",
    "end": "646880"
  },
  {
    "text": "that might be better i'm going to put that in and throw a out again those are all events you put a in",
    "start": "646880",
    "end": "652880"
  },
  {
    "text": "put b in take a out and there's a lot of valuable information in that especially if you're",
    "start": "652880",
    "end": "658959"
  },
  {
    "text": "building a recommendation engine for your shopping carts um so the concept of event sourcing is",
    "start": "658959",
    "end": "664800"
  },
  {
    "text": "instead of storing the state we're just going to store all the events that led to the",
    "start": "664800",
    "end": "670240"
  },
  {
    "text": "state because if we replay the events we can reconstruct the state but we don't lose everything that led up",
    "start": "670240",
    "end": "676959"
  },
  {
    "text": "to where we wanted to be at that moment so if we try and batch all these",
    "start": "676959",
    "end": "682240"
  },
  {
    "text": "concepts together because i like all of them that is what i wanted to do with my beer",
    "start": "682240",
    "end": "687920"
  },
  {
    "start": "685000",
    "end": "685000"
  },
  {
    "text": "sender so i wanted to do some kind of cqrs system where i have a separate query site and a separate",
    "start": "687920",
    "end": "694240"
  },
  {
    "text": "command site i wanted to build my aggregates in a very clean way i want to make them",
    "start": "694240",
    "end": "699680"
  },
  {
    "text": "if possible completely framework agnostic so that if ever i can plug them into something",
    "start": "699680",
    "end": "705440"
  },
  {
    "text": "else that's what we developers do right we over optimize everything they shouldn't do that but",
    "start": "705440",
    "end": "711839"
  },
  {
    "text": "but what i really want to get at is i want to have very nicely written tests tests that even if i show them in code",
    "start": "711839",
    "end": "718480"
  },
  {
    "text": "to my product owner they can reason with me about those tests that is one of the most important",
    "start": "718480",
    "end": "726079"
  },
  {
    "text": "things that we're trying to achieve so when i talk about all these things",
    "start": "726079",
    "end": "731120"
  },
  {
    "text": "saying like hey honest why didn't you use a cqrs framework why are you choosing an actor model well",
    "start": "731120",
    "end": "737200"
  },
  {
    "text": "there's a bunch of things that help us inside an actor model so for those who don't know where net",
    "start": "737200",
    "end": "743440"
  },
  {
    "text": "comes from it is a straight up port from jvm aka um",
    "start": "743440",
    "end": "749040"
  },
  {
    "text": "which was written a couple of years before aka.net started um so since 2015 this is the official",
    "start": "749040",
    "end": "756560"
  },
  {
    "text": "port it was two projects that were combined um roger johansson who is now working on",
    "start": "756560",
    "end": "762240"
  },
  {
    "text": "proto actor and aaron stannard who is running petabridge who support aka.net",
    "start": "762240",
    "end": "768800"
  },
  {
    "text": "they were independently porting account to the net ecosystem and they learned about each other's",
    "start": "768800",
    "end": "774480"
  },
  {
    "text": "efforts they joined forces um and academic came out and they even got permission from leidbent the company",
    "start": "774480",
    "end": "780320"
  },
  {
    "text": "that was behind jvm aka to call it akubonet and that's where we",
    "start": "780320",
    "end": "785440"
  },
  {
    "text": "are now the ideas of doing actor models they are not new they are there since the",
    "start": "785440",
    "end": "792079"
  },
  {
    "text": "1970s and they have been refined um",
    "start": "792079",
    "end": "797200"
  },
  {
    "text": "i don't know why most of the things that we're using today are around for such a long time but they are",
    "start": "797200",
    "end": "802720"
  },
  {
    "text": "um probably because they got less distracted by their smartphone and social media in those times",
    "start": "802720",
    "end": "808480"
  },
  {
    "text": "um but their idea is we're gonna model our code after the way the world works",
    "start": "808480",
    "end": "814560"
  },
  {
    "text": "we are all objects like these chairs and rooms or objects and things interact with each other so can",
    "start": "814560",
    "end": "821120"
  },
  {
    "text": "we not model our software in that way that was their whole idea",
    "start": "821120",
    "end": "826240"
  },
  {
    "text": "and they they used reactive patterns to do that to build something that was highly concurrent",
    "start": "826240",
    "end": "832079"
  },
  {
    "text": "now multiprocessor pcs were not a thing at that time um multiple",
    "start": "832079",
    "end": "838639"
  },
  {
    "text": "systems tied together in a network were the first time they brought this into",
    "start": "838639",
    "end": "843760"
  },
  {
    "text": "practice was when erickson built the axd 301 telco system in the 1980s they",
    "start": "843760",
    "end": "852320"
  },
  {
    "text": "invented a whole new programming language for that which was erlang and they managed to use the actor model to",
    "start": "852320",
    "end": "859040"
  },
  {
    "text": "get an uptime on those telco systems in clusters of nine nines",
    "start": "859040",
    "end": "864079"
  },
  {
    "text": "so 99.979 percent uptime that's about 30 31",
    "start": "864079",
    "end": "870079"
  },
  {
    "text": "milliseconds a year of downtime who gets that kind of uptime i'd love to talk to you after this talk",
    "start": "870079",
    "end": "876959"
  },
  {
    "text": "um but yeah i mean very impressive and that was the first application but then we",
    "start": "876959",
    "end": "882399"
  },
  {
    "text": "had like a couple of decades where nothing really happened with these actors",
    "start": "882399",
    "end": "888160"
  },
  {
    "text": "but then we had the explosion of the internet we had iot we had app stores where certainly you could",
    "start": "888160",
    "end": "894560"
  },
  {
    "text": "have an application that was featured and you would go from 200 to 2 million users over the course of a day",
    "start": "894560",
    "end": "900560"
  },
  {
    "text": "and so we need something that scales really well and that's why in 2015 we got a lot of different actor models on",
    "start": "900560",
    "end": "906959"
  },
  {
    "text": "the net ecosystem we got service fabric reliable actors project orleans was released which microsoft",
    "start": "906959",
    "end": "913519"
  },
  {
    "text": "used to build the backend for halo and we got this so that explosion caused all of this to",
    "start": "913519",
    "end": "921040"
  },
  {
    "text": "be readapted and becoming more popular now than it was a decade ago",
    "start": "921040",
    "end": "927279"
  },
  {
    "text": "so to do actors um the basic building block is of course the actor and",
    "start": "927279",
    "end": "933360"
  },
  {
    "text": "the way you reason about this in.net code it is a simple object that holds its own state",
    "start": "933360",
    "end": "939199"
  },
  {
    "text": "right because when you're writing when you're writing concurrent code",
    "start": "939199",
    "end": "945040"
  },
  {
    "text": "what is always going to hold you back is the fact that you're going to have at some point state that needs to be",
    "start": "945040",
    "end": "950880"
  },
  {
    "text": "accessed from multiple threads and that is always going to cause issues you're going to implement locking and",
    "start": "950880",
    "end": "957040"
  },
  {
    "text": "locking is not nice it might cause deadlocks and so on so to avoid all of that",
    "start": "957040",
    "end": "962880"
  },
  {
    "text": "what we do with actors is we only have a single threat running on an actor at any",
    "start": "962880",
    "end": "968240"
  },
  {
    "text": "given time and this is extremely powerful because as an actor you know that the fields",
    "start": "968240",
    "end": "974480"
  },
  {
    "text": "that are internal to you your own state that you're going to be",
    "start": "974480",
    "end": "979920"
  },
  {
    "text": "the only threat accessing that data when you're processing a message",
    "start": "979920",
    "end": "984959"
  },
  {
    "text": "and that is very very powerful there's no need for locking there is no deadlocks occurring there's also no",
    "start": "984959",
    "end": "991839"
  },
  {
    "text": "waiting for any other threats to finish once you get a message dispatched to your internal behavior the code that",
    "start": "991839",
    "end": "999120"
  },
  {
    "text": "executes against that internal state you can just run through it in a couple of milliseconds and be done with it",
    "start": "999120",
    "end": "1006639"
  },
  {
    "text": "so those actors are the building blocks of our actor system and that single threadedness as i said is really",
    "start": "1006639",
    "end": "1012959"
  },
  {
    "text": "important now what does that look like we can inherit from the simplest actor class in the echo.net framework being",
    "start": "1012959",
    "end": "1020399"
  },
  {
    "start": "1013000",
    "end": "1013000"
  },
  {
    "text": "untyped actor and all we need to do is implement the on receive methods that is what our",
    "start": "1020399",
    "end": "1026079"
  },
  {
    "text": "messages will get dispatched into if we want we can check what type of message we have and we're good to go",
    "start": "1026079",
    "end": "1033038"
  },
  {
    "text": "now those messages um they're even simpler we don't need to implement anything not even an interface",
    "start": "1033039",
    "end": "1040959"
  },
  {
    "text": "you can just have any dotnet object as a message only thing is it needs to you need to be",
    "start": "1040959",
    "end": "1046880"
  },
  {
    "text": "able to serialize it so all the public fields need to be accessible you can perfectly like",
    "start": "1046880",
    "end": "1054320"
  },
  {
    "text": "net record types are perfect for messages i mean you're immutable by default",
    "start": "1054320",
    "end": "1059520"
  },
  {
    "text": "um but it's best to design or at least treat your messages as immutable",
    "start": "1059520",
    "end": "1066320"
  },
  {
    "text": "akka.net doesn't enforce the immutability on messages so you",
    "start": "1066320",
    "end": "1071600"
  },
  {
    "text": "might change the content of a message while an actor is processing it and if your message didn't cross a",
    "start": "1071600",
    "end": "1077280"
  },
  {
    "text": "machine library that a machine boundary that would be possible",
    "start": "1077280",
    "end": "1082640"
  },
  {
    "text": "but um just don't do that you're going to have a bad time the throughput that the light band",
    "start": "1082640",
    "end": "1089360"
  },
  {
    "text": "people claim on akka.net is about 50 million messages per second on the server",
    "start": "1089360",
    "end": "1094960"
  },
  {
    "text": "um after the latest update of both.net and academic i get 4 million on my",
    "start": "1094960",
    "end": "1100640"
  },
  {
    "text": "laptop and that's a 5 year old laptop so i have no reason to doubt those numbers",
    "start": "1100640",
    "end": "1105840"
  },
  {
    "text": "on a beefy server that is definitely going to be possible but to do all the orchestration like the",
    "start": "1105840",
    "end": "1112559"
  },
  {
    "start": "1106000",
    "end": "1106000"
  },
  {
    "text": "hard part right we have those inboxes that need to be managed and managed we need a threat pool",
    "start": "1112559",
    "end": "1118960"
  },
  {
    "text": "that those messages get dispatched to certain actor in instances on",
    "start": "1118960",
    "end": "1124640"
  },
  {
    "text": "we want to manage our memory because every actor is going to take up some memory so the actor system is actually",
    "start": "1124640",
    "end": "1129919"
  },
  {
    "text": "going to instantiate actors for us and spin them down again and maybe re-instantiate them if we need them all",
    "start": "1129919",
    "end": "1136960"
  },
  {
    "text": "stuff like that is managed by the big puppet master which is the actor system",
    "start": "1136960",
    "end": "1142400"
  },
  {
    "text": "coincidentally this is the first metallica cd i bought when i was young so that should date me somewhere right",
    "start": "1142400",
    "end": "1150240"
  },
  {
    "text": "um but the actor system does all that heavy lifting for us and luckily we don't need to do a lot of work so",
    "start": "1150240",
    "end": "1156799"
  },
  {
    "text": "making an actor system is as simple as instantiating it with the factory method and giving it a name",
    "start": "1156799",
    "end": "1164000"
  },
  {
    "text": "now as i said the actor system is responsible for creating our actor",
    "start": "1164000",
    "end": "1169360"
  },
  {
    "text": "instances we never have a reference to that actor in hand we're only going to get",
    "start": "1169360",
    "end": "1176480"
  },
  {
    "text": "a reference to our actor and what we need to do that to tell the actor system to create our actor in the",
    "start": "1176480",
    "end": "1183840"
  },
  {
    "text": "correct way is we have something called props and props um can be adequately described",
    "start": "1183840",
    "end": "1191280"
  },
  {
    "text": "as being a constructor pointer you're going to point at the constructor of your actor class and you're going to",
    "start": "1191280",
    "end": "1197440"
  },
  {
    "text": "tell it which parameters to use in this case i'm using the default constructor i didn't pass any",
    "start": "1197440",
    "end": "1204640"
  },
  {
    "text": "parameters but this just takes a params array and you can pass whatever needs to go into your constructor in this props",
    "start": "1204640",
    "end": "1210480"
  },
  {
    "text": "method and that tells the actor system how to create your actor",
    "start": "1210480",
    "end": "1216480"
  },
  {
    "text": "if you want to create a root actor what you do is you do system.actoroff you give your actor a name",
    "start": "1216480",
    "end": "1223280"
  },
  {
    "text": "you pass in the props and then your actor system knows what to do and what you get back is an i actor ref",
    "start": "1223280",
    "end": "1230559"
  },
  {
    "text": "the ix2rf is a very very powerful thing it is a small object that allows you to talk to that actor instance",
    "start": "1230559",
    "end": "1237600"
  },
  {
    "text": "now if for some reason the actor system has spinned your actor down and needs to",
    "start": "1237600",
    "end": "1243520"
  },
  {
    "text": "recreate it you can still use that actor f and if you talk to it the message goes into the inbox the actor system will",
    "start": "1243520",
    "end": "1249280"
  },
  {
    "text": "spin your actor back up again and the message will go true so this is a decoupling between stalking to an actor",
    "start": "1249280",
    "end": "1256559"
  },
  {
    "text": "and the actual implementations and the actual objects in memory and if you want to send a message to an",
    "start": "1256559",
    "end": "1262640"
  },
  {
    "text": "actor you can simply use the message tell you pass in your message and you're good to go",
    "start": "1262640",
    "end": "1268640"
  },
  {
    "text": "simple right now as i said we create what we did now is we created a top level actor",
    "start": "1268640",
    "end": "1276960"
  },
  {
    "start": "1270000",
    "end": "1270000"
  },
  {
    "text": "but actors live in a hierarchy you have the three blue ones at the top they're always there the root actor the",
    "start": "1276960",
    "end": "1283200"
  },
  {
    "text": "user and the system actor and underneath the system actor we have a whole bunch of actors that do things like the event",
    "start": "1283200",
    "end": "1288480"
  },
  {
    "text": "bus the inbox management address scheduling all that sort of stuff you usually don't touch that",
    "start": "1288480",
    "end": "1294799"
  },
  {
    "text": "under the user actor is where you create yours so if you do system.actor off",
    "start": "1294799",
    "end": "1300320"
  },
  {
    "text": "you're creating a top level actor probably the a1 or the a2 and destroy and your address is defined by your",
    "start": "1300320",
    "end": "1307120"
  },
  {
    "text": "position in that hierarchy so the one at the bottom right is called slash user slash a2 b3",
    "start": "1307120",
    "end": "1313840"
  },
  {
    "text": "now this is important because this has two implications one if you are the child of a certain actor",
    "start": "1313840",
    "end": "1320559"
  },
  {
    "text": "your name needs to be unique you cannot have three b3s under a2 you can have a b3 under a1 but you cannot have three",
    "start": "1320559",
    "end": "1328080"
  },
  {
    "text": "b3s under a2 so at some point you're going to be putting id ids in actor names",
    "start": "1328080",
    "end": "1335360"
  },
  {
    "text": "um another thing is that this hierarchy becomes important where we're going",
    "start": "1335360",
    "end": "1340559"
  },
  {
    "text": "towards that error handling that i'm going to talk to about in the next slide",
    "start": "1340559",
    "end": "1346240"
  },
  {
    "start": "1341000",
    "end": "1341000"
  },
  {
    "text": "now how do you create children instead of doing system.actoroff we have",
    "start": "1346240",
    "end": "1352559"
  },
  {
    "text": "um oh i'm going to go back and describe that in a second instead of [Music]",
    "start": "1352559",
    "end": "1358640"
  },
  {
    "text": "system.extraf you do context.actroff so when you're processing a message on an actor",
    "start": "1358640",
    "end": "1364799"
  },
  {
    "text": "um you have something that is the context is the execution context it will tell you stuff about where is this",
    "start": "1364799",
    "end": "1370720"
  },
  {
    "text": "message message coming from where is it going um which actor am i stuff like that and if you do context dot actor off",
    "start": "1370720",
    "end": "1377120"
  },
  {
    "text": "what you're doing is you're creating a child right now what you see here is we don't have",
    "start": "1377120",
    "end": "1382640"
  },
  {
    "text": "an untyped actor i have a receive actor and for you who are working as net developer this will feel",
    "start": "1382640",
    "end": "1388720"
  },
  {
    "text": "so much more familiar compared to the untyped actor this is the typed version and instead of having",
    "start": "1388720",
    "end": "1395679"
  },
  {
    "text": "this generic on receive that takes in an object you get to register your",
    "start": "1395679",
    "end": "1401919"
  },
  {
    "text": "your message handlers so you can just do a receive for every type of message",
    "start": "1401919",
    "end": "1407679"
  },
  {
    "text": "that this actor is expecting and you can register which method is going to handle",
    "start": "1407679",
    "end": "1412880"
  },
  {
    "text": "it when it comes in this feels a lot more familiar for the net developers right so use these they're better",
    "start": "1412880",
    "end": "1420559"
  },
  {
    "text": "um but what i said like error handling um any of you have children",
    "start": "1420559",
    "end": "1427440"
  },
  {
    "text": "i do i have three um yeah you can feel pity for me um",
    "start": "1427440",
    "end": "1434799"
  },
  {
    "text": "if you take your kids into a supermarket who is responsible is it your kids",
    "start": "1434799",
    "end": "1440240"
  },
  {
    "text": "yes oh that's hopeful i'd like to talk to you about parenting later",
    "start": "1440240",
    "end": "1447679"
  },
  {
    "text": "um so are your kids responsible when they knock something over when they run their shopping cart into",
    "start": "1447919",
    "end": "1453760"
  },
  {
    "text": "an old lady's angles whatever no you're going to be the one apologizing apologizing you're going to be the one",
    "start": "1453760",
    "end": "1459360"
  },
  {
    "text": "fixing their mistakes and it is no different in an actor system if a child",
    "start": "1459360",
    "end": "1464960"
  },
  {
    "text": "actor throws an unhandled exception that exception is escalated to the",
    "start": "1464960",
    "end": "1471039"
  },
  {
    "text": "parent and the parent can decide how to handle this um",
    "start": "1471039",
    "end": "1476799"
  },
  {
    "text": "some actions aren't some exceptions aren't that bad so you can tell the actor to resume it's",
    "start": "1476799",
    "end": "1482960"
  },
  {
    "text": "like okay this wasn't that bad just pick up the next message from your inbox and you can continue",
    "start": "1482960",
    "end": "1489200"
  },
  {
    "text": "sometimes it's really bad when you see a kid like painting its bedroom wall you're gonna shout stop it's like stop",
    "start": "1489200",
    "end": "1495360"
  },
  {
    "text": "whatever you're doing right um that terminates the actor don't do that to your kids okay don't terminate",
    "start": "1495360",
    "end": "1500880"
  },
  {
    "text": "your kids um but you're gonna tell the actor to stop you're gonna delete the instance they're gonna delete the inbox like you're done",
    "start": "1500880",
    "end": "1508240"
  },
  {
    "text": "um restart is a little bit more friendly it is like okay go ahead try again you",
    "start": "1508240",
    "end": "1513840"
  },
  {
    "text": "failed this time but it might be that you succeed next time and the cool thing about restart is it actually",
    "start": "1513840",
    "end": "1520000"
  },
  {
    "text": "deletes your actor instance recreates it with the same props that it was originally created with",
    "start": "1520000",
    "end": "1526799"
  },
  {
    "text": "and then it dispatches the same message again and the end the inbox is preserved",
    "start": "1526799",
    "end": "1532159"
  },
  {
    "text": "so if you have some kind of transient exception that you might recover from restart is a very nice thing that you",
    "start": "1532159",
    "end": "1537840"
  },
  {
    "text": "could try or if you don't know what to do anymore it's like when your kids are really",
    "start": "1537840",
    "end": "1543840"
  },
  {
    "text": "misbehaving it's like i'm gonna ask my dad how he dealt with me when i was that age so you can escalate the um",
    "start": "1543840",
    "end": "1551279"
  },
  {
    "text": "you can escalate the exception to the grandparent as well right and you can do this for one failing",
    "start": "1551279",
    "end": "1556960"
  },
  {
    "text": "actor or for all your children um this makes sense in a context this is a",
    "start": "1556960",
    "end": "1562240"
  },
  {
    "text": "pattern that you see a lot when you're dealing with actors is if you have a huge workload what you can do is you can",
    "start": "1562240",
    "end": "1567520"
  },
  {
    "text": "cut it up into small pieces and then dispatch all those pieces to different child actors so that they can all execute in parallel",
    "start": "1567520",
    "end": "1574159"
  },
  {
    "text": "but if one exception would invalidate the entire workload you don't want all the other child actors to continue",
    "start": "1574159",
    "end": "1579840"
  },
  {
    "text": "processing so you're gonna want to stop them all so you want your supervision strategy to apply to all the child",
    "start": "1579840",
    "end": "1586080"
  },
  {
    "text": "actors now this is a bit abstract how you do that in code is you implement the you",
    "start": "1586080",
    "end": "1593679"
  },
  {
    "start": "1590000",
    "end": "1590000"
  },
  {
    "text": "overwrite the supervisor strategy method and you're going to return something um",
    "start": "1593679",
    "end": "1600799"
  },
  {
    "text": "one for one means i'm going to apply this only to the failing child and depending on what exception you get",
    "start": "1600799",
    "end": "1607520"
  },
  {
    "text": "in you can you have this selector method that you can use to figure out what directive you want to",
    "start": "1607520",
    "end": "1614400"
  },
  {
    "text": "give back um so if you have something fatal you're going to want to maybe stop that child",
    "start": "1614400",
    "end": "1619840"
  },
  {
    "text": "if it's transient you could restart and if you don't know what to do anymore you can escalate right so this is how that",
    "start": "1619840",
    "end": "1626640"
  },
  {
    "text": "works you just implement that one method and you you pass it back in the supervisor strategy methods and",
    "start": "1626640",
    "end": "1632720"
  },
  {
    "text": "that will apply to any failing child exceptions now this is this is the the this is what",
    "start": "1632720",
    "end": "1640720"
  },
  {
    "text": "made it possible for them to get down to those milliseconds per year down times",
    "start": "1640720",
    "end": "1645760"
  },
  {
    "text": "right everything that fails needs to be caught somewhere and handled appropriately",
    "start": "1645760",
    "end": "1652559"
  },
  {
    "text": "and then there is a last thing i've been talking about objects that hold their own internal state",
    "start": "1652640",
    "end": "1658080"
  },
  {
    "text": "um and how those objects get recreated by the actor system and as you might guess",
    "start": "1658080",
    "end": "1663200"
  },
  {
    "text": "correctly that would mean that allstate is lost right at some point there's some actors",
    "start": "1663200",
    "end": "1668799"
  },
  {
    "text": "where you're actually going to care about the state that's in them you're going to want to persist that",
    "start": "1668799",
    "end": "1674480"
  },
  {
    "text": "somewhere in a database so that when the actor is recreated you can actually recover",
    "start": "1674480",
    "end": "1680159"
  },
  {
    "text": "um to do that we can use the akka persistence library and the echo",
    "start": "1680159",
    "end": "1685279"
  },
  {
    "text": "persistence library is very very powerful you need to give your actor a unique persistence id",
    "start": "1685279",
    "end": "1691360"
  },
  {
    "text": "that is what it's going to use to store everything into the data store that you choose",
    "start": "1691360",
    "end": "1696559"
  },
  {
    "text": "and it supports like a whole bunch of things you can put it in azure table storage or in a sql database or in",
    "start": "1696559",
    "end": "1702080"
  },
  {
    "text": "mongodb whatever um you're going to have to give it a persistence id and now you have",
    "start": "1702080",
    "end": "1707200"
  },
  {
    "text": "different methods you don't no longer have a receive method but you're going to have recover and commands",
    "start": "1707200",
    "end": "1713360"
  },
  {
    "text": "instead now how this works is inside your actor you can snapshot your own state",
    "start": "1713360",
    "end": "1719679"
  },
  {
    "text": "and save that to a database if you want and when the actor is recreated what it",
    "start": "1719679",
    "end": "1726320"
  },
  {
    "text": "will do is it will get that snapshot from the the snapshot storage and then it will get all the events that have",
    "start": "1726320",
    "end": "1732240"
  },
  {
    "text": "happened since that snapshot and replay those and then it will start accepting",
    "start": "1732240",
    "end": "1737440"
  },
  {
    "text": "messages from the inbox and if you have paid attention to my",
    "start": "1737440",
    "end": "1743120"
  },
  {
    "text": "introduction this maps pretty closely to what event sourcing is right so this is built in event sourcing",
    "start": "1743120",
    "end": "1750799"
  },
  {
    "text": "now this is this is a pretty long actor i think it's spread across three slides um so what we're looking at we're now",
    "start": "1750799",
    "end": "1757440"
  },
  {
    "text": "using persistent actors you only get those when you install the persistence package um",
    "start": "1757440",
    "end": "1763760"
  },
  {
    "text": "so you need to give it that persistence id which is which is just a string",
    "start": "1763760",
    "end": "1769919"
  },
  {
    "text": "and what i usually do is i group all of my state into a single state object and",
    "start": "1769919",
    "end": "1775039"
  },
  {
    "text": "makes reasoning about it a lot easier right when you're snapshotting and recovering snapshots that becomes a lot",
    "start": "1775039",
    "end": "1782159"
  },
  {
    "text": "easier to handle but you don't have to do that it's just me who does that um and as i said you no longer have a",
    "start": "1782159",
    "end": "1788799"
  },
  {
    "text": "receive meta you now have a command and a recovery and what's the difference between those command comes from the",
    "start": "1788799",
    "end": "1793840"
  },
  {
    "text": "inbox and recover comes from your event store and why would you want to treat those",
    "start": "1793840",
    "end": "1800080"
  },
  {
    "text": "two differently you want to treat them differently because an incoming command might actually want to save that to the",
    "start": "1800080",
    "end": "1806480"
  },
  {
    "text": "event store but when you're recovering you don't want to re-save that again right",
    "start": "1806480",
    "end": "1811840"
  },
  {
    "text": "and so that's why they come in in a different way and then we can do a whole bunch of things with snapshots",
    "start": "1811840",
    "end": "1817840"
  },
  {
    "text": "and the reason that there are so many snapshots methods is because",
    "start": "1817840",
    "end": "1823120"
  },
  {
    "text": "saving a snapshot is something that happens out of thread so when you're cue when you're",
    "start": "1823120",
    "end": "1829760"
  },
  {
    "text": "calling these save snapshots inside a persistent actor it spawns a different thread that will",
    "start": "1829760",
    "end": "1834960"
  },
  {
    "text": "save that to disk for you it's not going to happen in sync so that's why you can subscribe to",
    "start": "1834960",
    "end": "1840880"
  },
  {
    "text": "certain events that come back to see if that saving was successful or was a failure",
    "start": "1840880",
    "end": "1846799"
  },
  {
    "text": "um now how do we persist messages um",
    "start": "1846799",
    "end": "1852559"
  },
  {
    "text": "there is a persist method that takes the message that you want to write inside um that you want to write to your",
    "start": "1852559",
    "end": "1859600"
  },
  {
    "text": "event store and then you call a certain method that will mutate your state",
    "start": "1859600",
    "end": "1865039"
  },
  {
    "text": "and then knows what to do because all of these go up to a stack and they are all processed when the",
    "start": "1865039",
    "end": "1870799"
  },
  {
    "text": "the thread is done so this persist method is important and",
    "start": "1870799",
    "end": "1875919"
  },
  {
    "text": "that is how you make sure that it gets persistent um",
    "start": "1875919",
    "end": "1881039"
  },
  {
    "text": "and we just add that in our state that internal that handle message internal is",
    "start": "1881039",
    "end": "1887919"
  },
  {
    "text": "the one that we are going to call on a recovery it's also the one that will actually do all the view dating for us",
    "start": "1887919",
    "end": "1893840"
  },
  {
    "text": "and so it makes sense to for instance keep track of um how many messages were",
    "start": "1893840",
    "end": "1899120"
  },
  {
    "text": "since your last snapshot you might want to do that in the internal one that that way your calendar is recreated even on a",
    "start": "1899120",
    "end": "1905679"
  },
  {
    "text": "recovery snapshot against in your own hands you can just call safe snapshot whenever you",
    "start": "1905679",
    "end": "1911279"
  },
  {
    "text": "want you don't have to so if you figure that we are building actors that will never get more than 100",
    "start": "1911279",
    "end": "1918399"
  },
  {
    "text": "messages in their lifetime why would you want to save snapshots just save all the events replay them it'll be faster",
    "start": "1918399",
    "end": "1926240"
  },
  {
    "text": "and when you get a snapshot back when you're recovering when the actor restarts it looks like that",
    "start": "1927760",
    "end": "1932799"
  },
  {
    "text": "you get a snapshot offer message and inside the offer is an object that is your state if you group everything in a",
    "start": "1932799",
    "end": "1938880"
  },
  {
    "text": "state object like me this is all the code you need so this is why this is handy otherwise you're",
    "start": "1938880",
    "end": "1944399"
  },
  {
    "text": "recreating a whole bunch of different fields and you can subscribe to those two messages if you want didn't do",
    "start": "1944399",
    "end": "1949919"
  },
  {
    "text": "anything with it here but sometimes it might be important to know if a certain snapshots",
    "start": "1949919",
    "end": "1956480"
  },
  {
    "text": "succeed succeeded or failed so as you could have guessed from this",
    "start": "1956480",
    "end": "1963360"
  },
  {
    "text": "description um both ddd",
    "start": "1963360",
    "end": "1969519"
  },
  {
    "text": "and actors have a philosophy that they're modeling the code after real world",
    "start": "1969519",
    "end": "1974799"
  },
  {
    "text": "in ddd we're trying to bring the business and the code together in actors we are bringing like the objects as",
    "start": "1974799",
    "end": "1980480"
  },
  {
    "text": "close to the way objects work in the real world boats",
    "start": "1980480",
    "end": "1986080"
  },
  {
    "text": "map very well with message driven approaches the event source persistence is built in",
    "start": "1986080",
    "end": "1992320"
  },
  {
    "text": "we even have an event bus and as a benefit it's very high throughput there is cluster support and so on so it felt",
    "start": "1992320",
    "end": "1998880"
  },
  {
    "text": "like a good match so how do we bring all of these into practice",
    "start": "1998880",
    "end": "2004399"
  },
  {
    "text": "for our beer sender now as a disclaimer none of this is production ready code i oversimplified",
    "start": "2004399",
    "end": "2011440"
  },
  {
    "text": "some things what i want to show you is which features of academ might come in handy when you're building something",
    "start": "2011440",
    "end": "2017120"
  },
  {
    "text": "like this um it's all about what's possible and what you can do",
    "start": "2017120",
    "end": "2023120"
  },
  {
    "text": "so when we're talking about aggregates um i said that i wanted to build my aggregates if at all possible",
    "start": "2023120",
    "end": "2030559"
  },
  {
    "start": "2025000",
    "end": "2025000"
  },
  {
    "text": "in a framework agnostic way and so that",
    "start": "2030559",
    "end": "2036080"
  },
  {
    "text": "they don't know anything about the storage and then i can write really nice and clean tests for them",
    "start": "2036080",
    "end": "2042240"
  },
  {
    "text": "so you don't have to define an interface i just did to make it clear in the stock what i want to do is i want to have",
    "start": "2042240",
    "end": "2049280"
  },
  {
    "text": "two methods on my aggregate the first is like i want to check what would happen if i would",
    "start": "2049280",
    "end": "2055200"
  },
  {
    "text": "execute a certain command and that will give me a bunch of events",
    "start": "2055200",
    "end": "2060320"
  },
  {
    "text": "back right i could have chosen to make this already mutate the internal state of the",
    "start": "2060320",
    "end": "2066720"
  },
  {
    "text": "aggregate for reasons that we will see later i did not so this just checks like",
    "start": "2066720",
    "end": "2072000"
  },
  {
    "text": "if you would execute this command right now what which events would i get and then i have the apply event method which is",
    "start": "2072000",
    "end": "2078878"
  },
  {
    "text": "actually the thing that will apply that event to a certain state it's all a recovery thing it all pieces",
    "start": "2078879",
    "end": "2085200"
  },
  {
    "start": "2085000",
    "end": "2085000"
  },
  {
    "text": "together in a second so my root aggregate is a single shipment of beer i'm gonna send the box",
    "start": "2085200",
    "end": "2092320"
  },
  {
    "text": "to rene over there right which i did and so i'm gonna send a single box of",
    "start": "2092320",
    "end": "2098480"
  },
  {
    "text": "beer so some of the fields that i care about are my shipment id i want to see if",
    "start": "2098480",
    "end": "2105200"
  },
  {
    "text": "there's already beers in it um all the states are just fields nothing more nothing less",
    "start": "2105200",
    "end": "2112560"
  },
  {
    "text": "and because we we will serialize this entire aggregate as a snapshot we are already done for persistence",
    "start": "2112560",
    "end": "2119760"
  },
  {
    "text": "with this part now my check command is actually going",
    "start": "2119760",
    "end": "2125280"
  },
  {
    "start": "2121000",
    "end": "2121000"
  },
  {
    "text": "to do something do i have highlights in the slides no i don't",
    "start": "2125280",
    "end": "2130880"
  },
  {
    "text": "um the check command method is going to take certain commands in and see what would happen",
    "start": "2130880",
    "end": "2136720"
  },
  {
    "text": "and then you'll get methods like the one in the bottom if i get the send beers command i want to",
    "start": "2136720",
    "end": "2142240"
  },
  {
    "text": "check if there's already beers in the box and that i attach the shipping label to it because otherwise nothing is going to",
    "start": "2142240",
    "end": "2148320"
  },
  {
    "text": "get sent and there's nothing else to do for those",
    "start": "2148320",
    "end": "2153920"
  },
  {
    "text": "handle command methods to raise a certain number of",
    "start": "2153920",
    "end": "2159200"
  },
  {
    "text": "events beer send or the beer send fails",
    "start": "2159200",
    "end": "2164160"
  },
  {
    "text": "um if we're thinking about applying events we're gonna get certain events in and we",
    "start": "2164480",
    "end": "2171359"
  },
  {
    "start": "2165000",
    "end": "2165000"
  },
  {
    "text": "are going to apply them into the internal state of our aggregate",
    "start": "2171359",
    "end": "2176720"
  },
  {
    "text": "and usually that doesn't mean anything else like a method at the bottom if a shipment is created if that event",
    "start": "2176720",
    "end": "2183680"
  },
  {
    "text": "is applied to this aggregate and because it is applied to this aggregate we know",
    "start": "2183680",
    "end": "2188720"
  },
  {
    "text": "that it was already checked right because that happened in the check command method so we don't have to worry",
    "start": "2188720",
    "end": "2194480"
  },
  {
    "text": "about all the conditions we can just apply the event to our state the conditions are checked in the check",
    "start": "2194480",
    "end": "2199920"
  },
  {
    "text": "command if we want to write very expressive",
    "start": "2199920",
    "end": "2205839"
  },
  {
    "start": "2202000",
    "end": "2202000"
  },
  {
    "text": "tests around that i made in a base aggregate test class",
    "start": "2205839",
    "end": "2211599"
  },
  {
    "text": "and that takes in our aggregate and i implemented things for a given when and",
    "start": "2211599",
    "end": "2216880"
  },
  {
    "text": "then which is a very um a very commonly used pattern of writing tests",
    "start": "2216880",
    "end": "2224400"
  },
  {
    "text": "um the given is just a bunch of events the given is these events have already",
    "start": "2224400",
    "end": "2230400"
  },
  {
    "text": "taken place and then i'm gonna try and raise a command so my when is going to take a",
    "start": "2230400",
    "end": "2236640"
  },
  {
    "text": "command and it's going to dispatch that command to my aggregate and then on the expect",
    "start": "2236640",
    "end": "2244240"
  },
  {
    "text": "from that command i'm expecting to get a bunch of events back right and this message this method is",
    "start": "2244240",
    "end": "2250320"
  },
  {
    "text": "just gonna match that against the list that my aggregate actually raised after that",
    "start": "2250320",
    "end": "2256000"
  },
  {
    "start": "2256000",
    "end": "2256000"
  },
  {
    "text": "command so what we would get is a test",
    "start": "2256000",
    "end": "2261599"
  },
  {
    "text": "that my product owner would probably understand if i create a new shipment with a",
    "start": "2261599",
    "end": "2267760"
  },
  {
    "text": "certain shipment id and i add a gaud and carroll's quadruple whiskey infused to it which means that",
    "start": "2267760",
    "end": "2274240"
  },
  {
    "text": "my box now has beer in it and i add a shipping label with trackmay123",
    "start": "2274240",
    "end": "2280079"
  },
  {
    "text": "if i would try to send that box i expect that the beers are sent",
    "start": "2280079",
    "end": "2286480"
  },
  {
    "text": "if you can have this type of tests about your pretty low level code",
    "start": "2286560",
    "end": "2292320"
  },
  {
    "text": "you're gonna bridge the gap with those people and you can even write those tests",
    "start": "2292320",
    "end": "2297599"
  },
  {
    "text": "together with product owners and i think that's a very very powerful thing and i think that's a lot of what ddd is about",
    "start": "2297599",
    "end": "2304000"
  },
  {
    "text": "it's like bridging that gap but now we have an aggregate that is agnostic it has nothing to do with",
    "start": "2304000",
    "end": "2310880"
  },
  {
    "text": "actors yet right so we're gonna need to wrap that aggregate inside beside an actor",
    "start": "2310880",
    "end": "2318720"
  },
  {
    "start": "2317000",
    "end": "2317000"
  },
  {
    "text": "and i chose to do it with a generic implementation that would apply to all actors that implement that interface",
    "start": "2318720",
    "end": "2324320"
  },
  {
    "text": "and i chose for that actor to also handle the persistence um which is quite powerful",
    "start": "2324320",
    "end": "2330400"
  },
  {
    "text": "so we did the receive persistent actor and i chose as a persistent id the type of",
    "start": "2330400",
    "end": "2336320"
  },
  {
    "text": "actor and the id of the actor that is an easy thing to do and i'm just gonna",
    "start": "2336320",
    "end": "2342720"
  },
  {
    "text": "subscribe to events there's also subscribing to comments just below it",
    "start": "2342720",
    "end": "2349119"
  },
  {
    "text": "um but there is a difference between the apply event that comes from recovery and",
    "start": "2349119",
    "end": "2354480"
  },
  {
    "text": "the one that comes from my inbox and that is the difference is that we're",
    "start": "2354480",
    "end": "2359839"
  },
  {
    "text": "gonna need to persist it if it comes from the inbox now",
    "start": "2359839",
    "end": "2365599"
  },
  {
    "text": "in the snapshot we just replace our aggregate because we saved that with",
    "start": "2365599",
    "end": "2372000"
  },
  {
    "text": "with all of its fields into the database and if we get new events and this is that",
    "start": "2372560",
    "end": "2378960"
  },
  {
    "text": "apply event persistence has already happened if it needed to happen all we're going to do is dispatch that event",
    "start": "2378960",
    "end": "2384720"
  },
  {
    "text": "to our aggregate we don't need to do anything else and then underneath you can see oh you",
    "start": "2384720",
    "end": "2390880"
  },
  {
    "text": "can see that we implemented that same 100 messages i'm gonna snapshot but you can do whatever",
    "start": "2390880",
    "end": "2397839"
  },
  {
    "text": "if you want actors to save a snapshot every one hour there are mechanisms that allow you to",
    "start": "2397839",
    "end": "2403599"
  },
  {
    "text": "schedule messages to your own actor all of that is possible",
    "start": "2403599",
    "end": "2409359"
  },
  {
    "text": "and then the last thing is like when a new command comes in i'm going to check it against the aggregate",
    "start": "2409359",
    "end": "2414640"
  },
  {
    "text": "and all of the events that are coming that are going to come out i'm going to persist those",
    "start": "2414640",
    "end": "2421280"
  },
  {
    "text": "and this is why i wrote that interface the way that i wrote it is because we are applying the state now in",
    "start": "2421280",
    "end": "2427920"
  },
  {
    "text": "the persist methods together with the event that has happened i now have a nice and clean event stream",
    "start": "2427920",
    "end": "2434560"
  },
  {
    "text": "for my actor when it comes back from persistence one more thing that we do here um so",
    "start": "2434560",
    "end": "2441520"
  },
  {
    "text": "we're doing the check command and we're sit we're persisting them all one thing one line you see here is the event",
    "start": "2441520",
    "end": "2447040"
  },
  {
    "text": "stream i'm gonna come back to that in a couple of slides so when we make new",
    "start": "2447040",
    "end": "2453440"
  },
  {
    "start": "2450000",
    "end": "2450000"
  },
  {
    "text": "aggregate actors all we need to do is implement it with the right aggregate type and you're already done",
    "start": "2453440",
    "end": "2461520"
  },
  {
    "text": "now let's talk about how we're going to build an entire actor system around",
    "start": "2462400",
    "end": "2467680"
  },
  {
    "text": "these aggregate actors because we can now spawn a bunch of these but there's a little bit more to do",
    "start": "2467680",
    "end": "2474960"
  },
  {
    "text": "so the way that i think this should look is we have a command router on the left",
    "start": "2475119",
    "end": "2482000"
  },
  {
    "text": "which is an actor that is going to be responsible for all the commands that come in on that command side of our cqrs",
    "start": "2482000",
    "end": "2488640"
  },
  {
    "text": "system that actor is going to talk to the aggregate manager which is right",
    "start": "2488640",
    "end": "2494560"
  },
  {
    "text": "next to it and that actor has only one responsibility it's like if an actor doesn't exist yet it's going to create",
    "start": "2494560",
    "end": "2501520"
  },
  {
    "text": "it as a child and it's going to pass the iactor rev back to the command router so that command router can send its command",
    "start": "2501520",
    "end": "2508480"
  },
  {
    "text": "to that specific aggregate now",
    "start": "2508480",
    "end": "2514160"
  },
  {
    "text": "for reasons we're going to also want to have our read storage",
    "start": "2514160",
    "end": "2520079"
  },
  {
    "text": "separate from that so we're going to have a bunch of actors that are projecting the event stream into our",
    "start": "2520079",
    "end": "2526560"
  },
  {
    "text": "read storage right so for every type of event that we want to deal with in our read storage we're",
    "start": "2526560",
    "end": "2532960"
  },
  {
    "text": "going to make a projector i'll come back to those in a minute as well and then you might want to fold certain",
    "start": "2532960",
    "end": "2540400"
  },
  {
    "text": "events back into your aggregates so some aggregates might respond to respond to events that were not created",
    "start": "2540400",
    "end": "2546880"
  },
  {
    "text": "by themselves and for that you can also subscribe to the event stream it's a very similar mechanism and you can use fold actors",
    "start": "2546880",
    "end": "2554000"
  },
  {
    "text": "for that so that was all that so the aggregate manager it",
    "start": "2554000",
    "end": "2560720"
  },
  {
    "start": "2556000",
    "end": "2556000"
  },
  {
    "text": "takes a connect request and there's a couple of things that are very handy inside icon.net you have for instance",
    "start": "2560720",
    "end": "2567119"
  },
  {
    "text": "a sender that is being set when um",
    "start": "2567119",
    "end": "2573440"
  },
  {
    "text": "when you're dis when you're processing a message from your inbox it's a property that is being set on your actor you can",
    "start": "2573520",
    "end": "2578960"
  },
  {
    "text": "assume that that was the actor that actually sent you the message that you're dealing with at the moment so when you do sender.tell what you're",
    "start": "2578960",
    "end": "2585680"
  },
  {
    "text": "doing is basically replying to the actor that sent you that message so if you have that",
    "start": "2585680",
    "end": "2592640"
  },
  {
    "text": "aggregate manager what it could do is like okay if i don't have this child yet i'm going to create it and send the iac",
    "start": "2592640",
    "end": "2598319"
  },
  {
    "text": "tariff back and it will create one aggregate per um instance",
    "start": "2598319",
    "end": "2604800"
  },
  {
    "start": "2603000",
    "end": "2603000"
  },
  {
    "text": "now the command router is something different um it will just cache all the actor refs that it has from all the",
    "start": "2604800",
    "end": "2610960"
  },
  {
    "text": "aggregates if commands come in it will talk to them um pretty simple it will just relay messages",
    "start": "2610960",
    "end": "2617200"
  },
  {
    "text": "um the problem with this actor is that it may become a bottleneck because as as",
    "start": "2617200",
    "end": "2622880"
  },
  {
    "text": "you might have may have sugges already assumed if you have an actor that gets more",
    "start": "2622880",
    "end": "2629200"
  },
  {
    "text": "messages than a single threat on your cpu can process your inbox is going to keep growing",
    "start": "2629200",
    "end": "2635839"
  },
  {
    "text": "indefinitely and that is going to hurt you because that actor is going to become like a point of failure in your",
    "start": "2635839",
    "end": "2642319"
  },
  {
    "text": "system inbox overflow is a thing that might happen",
    "start": "2642319",
    "end": "2647599"
  },
  {
    "start": "2647000",
    "end": "2647000"
  },
  {
    "text": "and those projectors we are going to create at the start of our system because if we want to subscribe to the",
    "start": "2647680",
    "end": "2653040"
  },
  {
    "text": "event stream for certain types of events that happened because they need to mutate our read storage",
    "start": "2653040",
    "end": "2659760"
  },
  {
    "text": "um the actors need to be there otherwise the messages will not get dispatched so those are um the projector creator will",
    "start": "2659760",
    "end": "2667280"
  },
  {
    "text": "actually create all the projectors for us so that they can subscribe themselves to the events and things can happen",
    "start": "2667280",
    "end": "2674800"
  },
  {
    "start": "2674000",
    "end": "2674000"
  },
  {
    "text": "and the faults is very similar um i have to watch the time a little bit",
    "start": "2674800",
    "end": "2680480"
  },
  {
    "text": "and it's very similar they will subscribe themselves upon system startup and they will basically relay certain",
    "start": "2680480",
    "end": "2686319"
  },
  {
    "text": "events to certain aggregates now the event bus the event bus is",
    "start": "2686319",
    "end": "2691440"
  },
  {
    "text": "something that is built in um into akka.net it is even on a cluster level",
    "start": "2691440",
    "end": "2696720"
  },
  {
    "text": "so if you have multiple actor systems working together as a cluster the eventbus is a",
    "start": "2696720",
    "end": "2702160"
  },
  {
    "text": "cluster site affair publishing is really easy you just do",
    "start": "2702160",
    "end": "2708240"
  },
  {
    "text": "the context is the message processing context that we talked about earlier you can do",
    "start": "2708240",
    "end": "2713319"
  },
  {
    "text": "context.system.eventstream and then publish whatever message you want to put on the bus um",
    "start": "2713319",
    "end": "2719520"
  },
  {
    "text": "you can put you can do this from an actor you can also do it from outside the actor system if you have a reference",
    "start": "2719520",
    "end": "2725280"
  },
  {
    "text": "to the actor system you can access the event stream as well if you want to subscribe",
    "start": "2725280",
    "end": "2731040"
  },
  {
    "text": "an actor to that event stream we can call that a subscribe method and when we do the",
    "start": "2731040",
    "end": "2737760"
  },
  {
    "text": "subscribe we can pass a certain actor and we can tell it which type of message",
    "start": "2737760",
    "end": "2743839"
  },
  {
    "text": "we're interested in and mind you there is no filter so you cannot say i'm interested in these type",
    "start": "2743839",
    "end": "2750720"
  },
  {
    "text": "of messages for that aggregate id that's a possibility that this event bus doesn't have",
    "start": "2750720",
    "end": "2755839"
  },
  {
    "text": "so that's why i decided that i needed one projector for each message type and that is going to",
    "start": "2755839",
    "end": "2762560"
  },
  {
    "text": "handle all of the messages that come into that now the pre-start method i didn't talk about",
    "start": "2763440",
    "end": "2770160"
  },
  {
    "text": "that yet that's a meta that gets called on the actor before it starts accepting messages from the inbox",
    "start": "2770160",
    "end": "2776560"
  },
  {
    "text": "um so when you instantiate a new actor and it needs to do things before it actually starts accepting messages the pre-start",
    "start": "2776560",
    "end": "2783520"
  },
  {
    "text": "method is what you would want to use such as subscribing yourself to the eventbus",
    "start": "2783520",
    "end": "2789760"
  },
  {
    "text": "now that command router that i talked about that might be a bottleneck right um",
    "start": "2789760",
    "end": "2795760"
  },
  {
    "text": "and cool thing they already solved that for us",
    "start": "2795760",
    "end": "2800160"
  },
  {
    "start": "2798000",
    "end": "2798000"
  },
  {
    "text": "um in box overflow is is a potential problem for",
    "start": "2800839",
    "end": "2806160"
  },
  {
    "text": "an actor and you can solve that using routers um",
    "start": "2806160",
    "end": "2811280"
  },
  {
    "text": "in aku.net you can treat a pool or a group of actors as one and they will get",
    "start": "2811280",
    "end": "2817520"
  },
  {
    "text": "a single address and you can basically decide to distribute the inbox messages",
    "start": "2817520",
    "end": "2823200"
  },
  {
    "text": "across those actors so that you basically have a multi-threaded processor for one",
    "start": "2823200",
    "end": "2828839"
  },
  {
    "text": "inbox and you can use different routing strategies you can do round robins like",
    "start": "2828839",
    "end": "2834000"
  },
  {
    "text": "one for each and then start at the beginning again when you're at the end you can also look at the inboxes of all",
    "start": "2834000",
    "end": "2840240"
  },
  {
    "text": "your actors in your pool and decide to send it to the one that has the smallest inbox",
    "start": "2840240",
    "end": "2846000"
  },
  {
    "text": "or you can do consistent hashing and that might also be interesting in an aggregate context consistent hashing is",
    "start": "2846000",
    "end": "2851839"
  },
  {
    "text": "where you're going to inspect your message and decide based on the properties of",
    "start": "2851839",
    "end": "2857280"
  },
  {
    "text": "that message which hash that message will get and if you would use your aggregate id as a",
    "start": "2857280",
    "end": "2863280"
  },
  {
    "text": "hash that means that all the messages for that same aggregate id would go to the same",
    "start": "2863280",
    "end": "2868960"
  },
  {
    "text": "actor in your routing pool it might be something you don't want or it might be something you want but it's",
    "start": "2868960",
    "end": "2874160"
  },
  {
    "text": "something you can use and configuring routers is actually not that hard you do it",
    "start": "2874160",
    "end": "2881040"
  },
  {
    "text": "when you create your props and you tell it instead of just creating one i want",
    "start": "2881040",
    "end": "2886480"
  },
  {
    "text": "you to have a router with a round robin pool with five instances and what this will do",
    "start": "2886480",
    "end": "2891920"
  },
  {
    "text": "is this will create five command routers for us and just round robin to them we don't need to do anything else we can",
    "start": "2891920",
    "end": "2898240"
  },
  {
    "text": "still talk to that one eye actor ref that we get back and all those messages will get",
    "start": "2898240",
    "end": "2903839"
  },
  {
    "text": "distributed so if you have bottleneck actors there are solutions this is something you might want to apply to",
    "start": "2903839",
    "end": "2910240"
  },
  {
    "text": "maybe your projectors or your fold your folds as well if those are becoming a problem so this can be solved",
    "start": "2910240",
    "end": "2918720"
  },
  {
    "text": "we're 10 minutes out which means that i want to leave a little bit of room for questions",
    "start": "2919280",
    "end": "2924510"
  },
  {
    "text": "[Music] so if we summarize what we saw today",
    "start": "2924510",
    "end": "2931200"
  },
  {
    "text": "we're gonna wrap aggregates and actors we're gonna wrap our protectors projectors and actors",
    "start": "2931200",
    "end": "2937520"
  },
  {
    "text": "our commands our messages our events our messages and the event sourcing is built in",
    "start": "2937520",
    "end": "2942640"
  },
  {
    "text": "so our conclusion is that domain driven design and actors really",
    "start": "2942640",
    "end": "2948240"
  },
  {
    "text": "match really well there is not a lot of friction between the two",
    "start": "2948240",
    "end": "2953359"
  },
  {
    "text": "concepts you can very easily build a c-qrs system without needing a framework",
    "start": "2953359",
    "end": "2958559"
  },
  {
    "text": "um and that in my opinion makes it really nice to mix those two",
    "start": "2958559",
    "end": "2964400"
  },
  {
    "start": "2963000",
    "end": "2963000"
  },
  {
    "text": "now there's a whole bunch of things that we did not talk about today there's like a whole bunch of things that you can",
    "start": "2964400",
    "end": "2971520"
  },
  {
    "text": "expand further upon this for instance you might want to expose your event stream or part of",
    "start": "2971520",
    "end": "2978240"
  },
  {
    "text": "your event stream back to your ui so maybe you will have an actor that publishes messages from the event stream",
    "start": "2978240",
    "end": "2984960"
  },
  {
    "text": "to a signalr hub so that your ui can subscribe to some of those messages um if you're configuring actor systems",
    "start": "2984960",
    "end": "2993839"
  },
  {
    "text": "and that's a whole a whole different hornet's nest and you're gonna have to use hulk on",
    "start": "2993839",
    "end": "2999839"
  },
  {
    "text": "configuration hogan stands for human optimized configuration object notation",
    "start": "2999839",
    "end": "3006000"
  },
  {
    "text": "it's something that looks like json but isn't really json it's like exactly what we need right another configuration",
    "start": "3006000",
    "end": "3012640"
  },
  {
    "text": "language um it's not really that hard but it's something that allows you to",
    "start": "3012640",
    "end": "3019280"
  },
  {
    "text": "bring some of the stuff that you normally do in code to the outside for instance",
    "start": "3019280",
    "end": "3024960"
  },
  {
    "text": "you could configure that pool size for that router actor you could configure that in hokon so that you don't need to",
    "start": "3024960",
    "end": "3031760"
  },
  {
    "text": "rebuild your application if you want to change the number of um of router of rooties in that in that",
    "start": "3031760",
    "end": "3038839"
  },
  {
    "text": "pool clustering is also something we didn't talk about in depth but know that",
    "start": "3038839",
    "end": "3044160"
  },
  {
    "text": "you can have actor systems work together as a big cluster you can have nodes that have",
    "start": "3044160",
    "end": "3051280"
  },
  {
    "text": "certain roles you can have you can chart your actors across a bunch",
    "start": "3051280",
    "end": "3057599"
  },
  {
    "text": "of nodes and talk to them without knowing where they are um all that sort of stuff is really",
    "start": "3057599",
    "end": "3063680"
  },
  {
    "text": "powerful and what is cool to know is that if an eye actor ref passes a machine boundary or goes outside of your",
    "start": "3063680",
    "end": "3070559"
  },
  {
    "text": "actor system it has something called location transparency and location transparency",
    "start": "3070559",
    "end": "3076319"
  },
  {
    "text": "means you don't have to care on which node that actor is if you have the actor if you can talk to it and that is that's",
    "start": "3076319",
    "end": "3082000"
  },
  {
    "text": "pretty cool logging is something that we also didn't talk about but there are adapters for",
    "start": "3082000",
    "end": "3087359"
  },
  {
    "text": "pretty much any logging or observability framework that you would care about um so",
    "start": "3087359",
    "end": "3093280"
  },
  {
    "text": "explore the packages uh dive into that and the last thing is the the only paid",
    "start": "3093280",
    "end": "3099680"
  },
  {
    "text": "tool that the people from pedobridge offer because acco.net is free it's open",
    "start": "3099680",
    "end": "3105440"
  },
  {
    "text": "source but there is a production monitoring system costs about four thousand euros a year",
    "start": "3105440",
    "end": "3110720"
  },
  {
    "text": "um what that allows you to do is monitor how many actor systems uh actor instances are in memory at the moment",
    "start": "3110720",
    "end": "3117680"
  },
  {
    "text": "how big the inboxes are uh what your average time to processing is and so on you get a whole bunch of metrics for",
    "start": "3117680",
    "end": "3124400"
  },
  {
    "text": "monitoring a huge actor system in production if you're serious about this like look into that it's going to help",
    "start": "3124400",
    "end": "3130960"
  },
  {
    "text": "you a lot if you want to learn more there is a very cool free boot camp on",
    "start": "3130960",
    "end": "3137920"
  },
  {
    "text": "on github it is maintained by the pedobridge people it will walk you",
    "start": "3137920",
    "end": "3143760"
  },
  {
    "text": "through all of the basic content concepts of building actor systems",
    "start": "3143760",
    "end": "3148960"
  },
  {
    "text": "their blog is amazing every new feature that they put out they blog about extensively",
    "start": "3148960",
    "end": "3155119"
  },
  {
    "text": "um which means that you can find a lot of the stuff that you want to know over there without looking for it they have",
    "start": "3155119",
    "end": "3162400"
  },
  {
    "text": "paid training as well the training is really good it is given by the people who actually build all this",
    "start": "3162400",
    "end": "3167680"
  },
  {
    "text": "so that is very valuable my name is hannes i'm the head of",
    "start": "3167680",
    "end": "3173440"
  },
  {
    "text": "learning and development for a company called access in belgium that is my twitter handle and my icq number i'm",
    "start": "3173440",
    "end": "3179599"
  },
  {
    "text": "trying to make icq great again and yeah",
    "start": "3179599",
    "end": "3184880"
  },
  {
    "text": "i've been doing this for four years nobody ever messaged me on icq so let today be the first um",
    "start": "3184880",
    "end": "3193040"
  },
  {
    "text": "do any of you have questions oh i have to go back",
    "start": "3193040",
    "end": "3197440"
  },
  {
    "text": "they do have an app though on ios and on android so",
    "start": "3198400",
    "end": "3203839"
  },
  {
    "text": "the trouble for me was reviving that icq number which meant that i needed to reactivate my hotmail account so",
    "start": "3203839",
    "end": "3211920"
  },
  {
    "text": "so any questions yes",
    "start": "3211920",
    "end": "3217280"
  },
  {
    "text": "yes",
    "start": "3221440",
    "end": "3223838"
  },
  {
    "text": "right good question um we have a bunch of actor systems right and they all do their own things",
    "start": "3227440",
    "end": "3234640"
  },
  {
    "text": "um better and their own things worse than the others for instance",
    "start": "3234640",
    "end": "3240400"
  },
  {
    "text": "in the beginning orleans was really built towards that real-time communication because it was meant to be",
    "start": "3240400",
    "end": "3245839"
  },
  {
    "text": "the back end for halo whereas akka.net was a really nice middle ground",
    "start": "3245839",
    "end": "3252880"
  },
  {
    "text": "[Music] and service fabric reliable actors were very enterprisey but i would argue that",
    "start": "3252880",
    "end": "3259280"
  },
  {
    "text": "they weren't real actors if you would just dispatch a message to a downstream actor",
    "start": "3259280",
    "end": "3264720"
  },
  {
    "text": "the threat in the main actor was paused so getting like real performance out of that wasn't really possible but it made",
    "start": "3264720",
    "end": "3271280"
  },
  {
    "text": "for very robust processes and proto-actor works a little bit",
    "start": "3271280",
    "end": "3276799"
  },
  {
    "text": "different from akka.net whereas like clustering and where your actors go is not something you worry about so much in",
    "start": "3276799",
    "end": "3283839"
  },
  {
    "text": "proto-actor as you would in archaeolognet um i'm just most familiar with akka",
    "start": "3283839",
    "end": "3291440"
  },
  {
    "text": "which is i chose this as an example but i'm guessing that you can probably do ddd and cqrs in in any of them um",
    "start": "3291440",
    "end": "3298799"
  },
  {
    "text": "so yeah for this case no real reason um for me it felt like the when i got",
    "start": "3298799",
    "end": "3304559"
  },
  {
    "text": "into actors it was the best middle ground that i found for the cases that we were working",
    "start": "3304559",
    "end": "3309599"
  },
  {
    "text": "with at that time which was an iot solution",
    "start": "3309599",
    "end": "3313838"
  },
  {
    "text": "was that too honest any other questions",
    "start": "3315119",
    "end": "3322078"
  },
  {
    "text": "oh the message queuing system it's it's actually has its own built-in",
    "start": "3324640",
    "end": "3330160"
  },
  {
    "text": "message queuing system so if you want to connect it to an outside message queue that would completely be possible um",
    "start": "3330160",
    "end": "3337440"
  },
  {
    "text": "maybe publish them to the event stream or dispatch them to uh to the messages but like the the",
    "start": "3337440",
    "end": "3342799"
  },
  {
    "text": "message queuing is built in",
    "start": "3342799",
    "end": "3346920"
  },
  {
    "text": "me yes",
    "start": "3348240",
    "end": "3354240"
  },
  {
    "text": "yes well it has at most one's delivery it",
    "start": "3354240",
    "end": "3360319"
  },
  {
    "text": "gets very close to one um when you have memory pressure what the actor system",
    "start": "3360319",
    "end": "3365440"
  },
  {
    "text": "will do is it will spin down actors like try and free up the ram from those actors because it will remember the um",
    "start": "3365440",
    "end": "3372960"
  },
  {
    "text": "props that they were created with and it can recreate them but at some point you might run out yes",
    "start": "3372960",
    "end": "3380160"
  },
  {
    "text": "um and then you're going to lose them and then you get at most one's delivery",
    "start": "3380160",
    "end": "3385520"
  },
  {
    "text": "oh yeah if you turn the machine off yes everything is gone so if you do yeah that's something i also didn't touch on on this slide i touch on it on in my iot",
    "start": "3386400",
    "end": "3394640"
  },
  {
    "text": "slide deck is if you want to redeploy your system what you're going to need to do is pause",
    "start": "3394640",
    "end": "3400799"
  },
  {
    "text": "all the input make sure that all the actors get done processing and then turn it off and redeploy",
    "start": "3400799",
    "end": "3407760"
  },
  {
    "text": "but yes you will lose messages when you recycle your your actor systems",
    "start": "3407760",
    "end": "3415558"
  },
  {
    "text": "no not really it's still very close and the people at light bend are building a lot of products on top of",
    "start": "3420400",
    "end": "3427760"
  },
  {
    "text": "uh their jvm arca things that we don't have in the net ecosystem yet",
    "start": "3427760",
    "end": "3433520"
  },
  {
    "text": "so there's a couple of products that they're making that we that net doesn't have answers to but the original implementation is really close",
    "start": "3433520",
    "end": "3440400"
  },
  {
    "text": "to um what jvm archive is",
    "start": "3440400",
    "end": "3446040"
  },
  {
    "text": "yes persistence happens on an actor level so",
    "start": "3453200",
    "end": "3459280"
  },
  {
    "text": "everything that has been persisted that is not lost what was in the inboxes that's in memory",
    "start": "3459280",
    "end": "3465920"
  },
  {
    "text": "no no like the the memory overhead for an actor in a release build is about 400",
    "start": "3475280",
    "end": "3480799"
  },
  {
    "text": "bytes that is if you don't have any state in it right you just create something that",
    "start": "3480799",
    "end": "3485920"
  },
  {
    "text": "inherits from an untyped actor 400 bytes so you can easily have millions of",
    "start": "3485920",
    "end": "3491119"
  },
  {
    "text": "actors on a single machine that is not going to be an issue so a lot is like",
    "start": "3491119",
    "end": "3497359"
  },
  {
    "text": "hundreds of millions then you might consider a cluster um but like a couple million actors it's",
    "start": "3497359",
    "end": "3504319"
  },
  {
    "text": "not gonna be a big deal",
    "start": "3504319",
    "end": "3507280"
  },
  {
    "text": "okay if you want to talk more hit me up in the hallway i'll be here until friday",
    "start": "3510079",
    "end": "3516319"
  },
  {
    "text": "for those of you who still are in town on friday we're going to do pub conf there are a couple of tickets left it's",
    "start": "3516319",
    "end": "3521839"
  },
  {
    "text": "going to be really fun um there'll be funny talks and us embarrassing ourselves",
    "start": "3521839",
    "end": "3527520"
  },
  {
    "text": "and the ticket includes food and beer so feel free to sign up and join us on",
    "start": "3527520",
    "end": "3532720"
  },
  {
    "text": "friday in the barley mo have a nice last two talks of your",
    "start": "3532720",
    "end": "3538240"
  },
  {
    "text": "conference and i hope to see you later",
    "start": "3538240",
    "end": "3542920"
  },
  {
    "text": "you",
    "start": "3546799",
    "end": "3548880"
  }
]