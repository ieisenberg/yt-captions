[
  {
    "start": "0",
    "end": "504000"
  },
  {
    "text": "oh yes hello testing testing there are a lot fewer people here than there were",
    "start": "1400",
    "end": "6560"
  },
  {
    "text": "this morning because we're up against Dominic and other very capable presenters this time and we're building",
    "start": "6560",
    "end": "11679"
  },
  {
    "text": "we're talking about something very esoteric yeah so it's good that you all joined us I'm very happy that we get to",
    "start": "11679",
    "end": "17720"
  },
  {
    "text": "muddle our way through this we are going to admit right up front that there are some things in this talk that we do not",
    "start": "17720",
    "end": "25199"
  },
  {
    "text": "fully understand but we're going to attempt to explain them to you anyway there are",
    "start": "25199",
    "end": "30720"
  },
  {
    "text": "people on our team who understand them notably Caesar and stepan who I've called out here who did all the hard",
    "start": "30720",
    "end": "36040"
  },
  {
    "text": "work putting this presentation together mering requests and merging Port requests and we are going to do our best",
    "start": "36040",
    "end": "41399"
  },
  {
    "text": "to explain to you how some of these things work um some of them we understand a lot better um but others",
    "start": "41399",
    "end": "47879"
  },
  {
    "text": "are quite a struggle to get our heads around um if you've done native",
    "start": "47879",
    "end": "53440"
  },
  {
    "text": "development before dealing with CPU instructions or game development or",
    "start": "53440",
    "end": "58640"
  },
  {
    "text": "vectorization and simd and memory pool M I don't know like I've already lost um",
    "start": "58640",
    "end": "65720"
  },
  {
    "text": "building fast servers is really hard that's what it all comes down to building naive servers that just work",
    "start": "65720",
    "end": "71640"
  },
  {
    "text": "it's pretty straightforward building ones that work well and work fast um it's hard so introductions again I Damen",
    "start": "71640",
    "end": "78400"
  },
  {
    "text": "Edwards I work on the aset team at Microsoft fell I work on the team Microsoft and Microsoft as well yep and",
    "start": "78400",
    "end": "84759"
  },
  {
    "text": "we're going to talk about krel which is the web server uh managed web server",
    "start": "84759",
    "end": "91000"
  },
  {
    "text": "that we built uh for aset core that runs on Linux and Os 10 and windows obviously",
    "start": "91000",
    "end": "99280"
  },
  {
    "text": "and it ran on a Raspberry Pi at one point yeah not the moment but it will again I'm sure of it when we get back",
    "start": "99280",
    "end": "105040"
  },
  {
    "text": "around to fixing it um users lib UV which is the native component that's",
    "start": "105040",
    "end": "110840"
  },
  {
    "text": "used by node.js to do IO and file stuff and as things and threading and loops",
    "start": "110840",
    "end": "116920"
  },
  {
    "text": "and yada yada yada and yeah it's been quite a journey and so it kind of all",
    "start": "116920",
    "end": "122079"
  },
  {
    "text": "started with this this was July last year so we're not even talking about a long time so July last year Kelly",
    "start": "122079",
    "end": "128959"
  },
  {
    "text": "Summers who's well known in the community uh tweeted this she's been working on this cool little web server",
    "start": "128959",
    "end": "135599"
  },
  {
    "text": "project called Haywire which I believe started out as an academic experiment she likes to do things in the open to",
    "start": "135599",
    "end": "141040"
  },
  {
    "text": "learn to teach herself and she was writing an hdp server in C uh cuz why not and her uh server it's called native",
    "start": "141040",
    "end": "149560"
  },
  {
    "text": "comp down to an XE like there's no way to add handlers you have to get the code and then change the code and recompile",
    "start": "149560",
    "end": "156120"
  },
  {
    "text": "the server whenever you want to like change the title of your web page",
    "start": "156120",
    "end": "161239"
  },
  {
    "text": "um I don't think I'm lying I'm pretty sure that's is pretty true some of my build an extension for it by now um and",
    "start": "161720",
    "end": "167319"
  },
  {
    "text": "so when she ran that on an arm processor on her Raspberry Pi with a 100 megabit Network she was getting 72,000 request",
    "start": "167319",
    "end": "174120"
  },
  {
    "text": "per second which is pretty good and then she ran Castrol at this point which is AET core super fast beta beta 4 beta 5",
    "start": "174120",
    "end": "183360"
  },
  {
    "text": "on her ju zon 8 Core 2 GB ethernet Network server and got 750 requests per",
    "start": "183360",
    "end": "189159"
  },
  {
    "text": "second and so yeah that was we got got CAU over her yeah I think she another",
    "start": "189159",
    "end": "194519"
  },
  {
    "text": "tweet used the word embarrassing um which I can understand we were like",
    "start": "194519",
    "end": "200680"
  },
  {
    "text": "so we you know we wanted it to be fast we this wasn't the only motivation um and there were a bunch of reasons why",
    "start": "200680",
    "end": "206760"
  },
  {
    "text": "she got such a terrible result um I think she ran it again and got like 5,000 or something but um we were",
    "start": "206760",
    "end": "212879"
  },
  {
    "text": "getting hit by a bunch of networking 101 things like act delays and nagling and",
    "start": "212879",
    "end": "220680"
  },
  {
    "text": "other stuff that we eventually figured out when we went back to the Whiteboard and Drew sine waves that represented",
    "start": "220680",
    "end": "226680"
  },
  {
    "text": "like electrical pulses on the wire and leared how I'm not even kidding right",
    "start": "226680",
    "end": "231760"
  },
  {
    "text": "like we one of the guys on the team schooled us on how networking actually works when you talk about electrical",
    "start": "231760",
    "end": "237200"
  },
  {
    "text": "pulses that go across copper and then how network drivers are written and what nagling does and what acay are about and",
    "start": "237200",
    "end": "243079"
  },
  {
    "text": "how ethernet does and how TCP sits on top of that we learned all this great stuff and then we fixed stuff um so then",
    "start": "243079",
    "end": "249879"
  },
  {
    "text": "we looked at the competition and this is um results from the latest round of teeken power who's heard of teeken power",
    "start": "249879",
    "end": "255519"
  },
  {
    "text": "the teeken power benchmarks okay most people half people maybe um there's a bunch of Frameworks here you've never",
    "start": "255519",
    "end": "260959"
  },
  {
    "text": "heard of which is fine there's a bunch of Frameworks here that you probably have heard of that are very well known um this is the top this is the I just",
    "start": "260959",
    "end": "267720"
  },
  {
    "text": "screen captured the very top of the list here if we go and look at the live things this is round 12 this is the",
    "start": "267720",
    "end": "275000"
  },
  {
    "text": "latest round this is running on their Peak Hardware which is a fairly beefy Dell server 40 core I think it's 20",
    "start": "275000",
    "end": "282800"
  },
  {
    "text": "cores hyperthreaded so it's 40 virtual CPUs uh with 10 GB ethernet and you know",
    "start": "282800",
    "end": "289080"
  },
  {
    "text": "what do we got this thing called rapo rapido rapido which only showed up in this round of the last round rapid doid",
    "start": "289080",
    "end": "295600"
  },
  {
    "text": "Rapido I don't know it gets a lot 7 million requests per second on this Hardware but you can see it drops off",
    "start": "295600",
    "end": "301919"
  },
  {
    "text": "really quick so there's like a cluster the top five and then it like it nearly",
    "start": "301919",
    "end": "307080"
  },
  {
    "text": "halves like by the time you get down to like number eight like we're down to 3 million already which is still amazing",
    "start": "307080",
    "end": "312759"
  },
  {
    "text": "right it's incredible and netti is an interesting one cuz NTI uh runs on Java",
    "start": "312759",
    "end": "318120"
  },
  {
    "text": "as does Rapido actually Java amazing um but netti not only runs on Java but is",
    "start": "318120",
    "end": "324160"
  },
  {
    "text": "um very popular like it's used in a lot of products it's shipped in a lot of white box products you don't even know it's being used um it's been around for",
    "start": "324160",
    "end": "330840"
  },
  {
    "text": "a while it's a bit like WCF really isn't it yeah yeah y very very very very powerful but better yeah but not better",
    "start": "330840",
    "end": "337919"
  },
  {
    "text": "but different different different yeah okay um Java esque so and we can scroll",
    "start": "337919",
    "end": "343120"
  },
  {
    "text": "down here and you might start to see some things that you want to like jett's also pretty well known um we have to go down a bit further to see there's go not",
    "start": "343120",
    "end": "350120"
  },
  {
    "text": "quite cracking the million yet go prefork not sure what that is maybe",
    "start": "350120",
    "end": "355600"
  },
  {
    "text": "Colossus looks awesome what's Colossus I don't know oh says AA runs on oh H okay",
    "start": "355600",
    "end": "361840"
  },
  {
    "text": "um what else anything down here a raw Jetty servlet rather than running Jetty",
    "start": "361840",
    "end": "367400"
  },
  {
    "text": "outside of a Ser just a jar I guess um Wicked what's Wicked that sounds good it's like thing I don't know um I still",
    "start": "367400",
    "end": "375000"
  },
  {
    "text": "not say it was rack Rack okay that's the the thing that Ruby runs J Ruby J Ruby that's not real Ruby say faster than",
    "start": "375000",
    "end": "380599"
  },
  {
    "text": "Ruby and then here's node right that's not bad they had like 4 4.6% of the number one result like",
    "start": "380599",
    "end": "388240"
  },
  {
    "text": "we're way you see the is enormous here and here's nodejs all the way down here",
    "start": "388240",
    "end": "394000"
  },
  {
    "text": "um which I think for a while node was considered like this really fast web server and it does a lot of things",
    "start": "394000",
    "end": "399160"
  },
  {
    "text": "really really well don't get me wrong and it's um its architecture is certainly very good for concurrency um",
    "start": "399160",
    "end": "404319"
  },
  {
    "text": "but when it comes down to it it's not fast right when when you put it against a lot of these other servers it really not fast a is not in this list at",
    "start": "404319",
    "end": "411280"
  },
  {
    "text": "all um you have to go all the way back to round nine which isn't even shown here I have to go to previous rounds um",
    "start": "411280",
    "end": "418520"
  },
  {
    "text": "for the last time that they ran the windows tests cuz the windows test broke unfortunately and you see aset in this",
    "start": "418520",
    "end": "426800"
  },
  {
    "text": "round here it is aset stripped 109,000 requests per second",
    "start": "426800",
    "end": "432800"
  },
  {
    "text": "that's a good name which is pretty lame I think we got up to 150,000 yeah in a later thing and that's only on windows",
    "start": "432800",
    "end": "438840"
  },
  {
    "text": "so this hasn't run um since and there's aset not stripped down here 71,000",
    "start": "438840",
    "end": "444440"
  },
  {
    "text": "where's MVC is in here I oh is MVC in here oh that's on mono",
    "start": "444440",
    "end": "451400"
  },
  {
    "text": "does anyone use mono on a server this is why you don't anyone this is why you",
    "start": "451400",
    "end": "456759"
  },
  {
    "text": "don't anyone judgment it's okay so we'd like to do better than that in aset core",
    "start": "456759",
    "end": "463400"
  },
  {
    "text": "um I remember looking at these results maybe I don't know March last year or something banging my fist on the desk",
    "start": "463400",
    "end": "468879"
  },
  {
    "text": "going why aren we faster we don't care we've never cared before do you do",
    "start": "468879",
    "end": "474039"
  },
  {
    "text": "you want to care I said yes I'd like us to be fast I'd like us to be and okay let's do it let's make it fast and so",
    "start": "474039",
    "end": "479879"
  },
  {
    "text": "that was kind of the beginning of the journey and so um I'll hold the number",
    "start": "479879",
    "end": "485039"
  },
  {
    "text": "till the end of the talk to tell you where we think we're going to land in the next round we're going to submit to Tekken power as part of a net Corp we're",
    "start": "485039",
    "end": "491000"
  },
  {
    "text": "working very hard on that now and we have an idea roughly of where we're going to land we have a number and we think we know where we're going to land",
    "start": "491000",
    "end": "496879"
  },
  {
    "text": "uh for RTM and I'll reveal that at the end somewhere in the middle of the things hopefully it'll be above the fold here top of the you'll see us in the top",
    "start": "496879",
    "end": "504280"
  },
  {
    "start": "504000",
    "end": "818000"
  },
  {
    "text": "here all right so let's talk very quick about the very high level concerns that you have when building extremely",
    "start": "504280",
    "end": "509720"
  },
  {
    "text": "performant code in net especially with the types of numbers that we're talking here reducing garbage collection or GC",
    "start": "509720",
    "end": "516839"
  },
  {
    "text": "pressure is absolutely Paramount okay it's all nearly the most important thing you have to worry about GC will kill you",
    "start": "516839",
    "end": "523120"
  },
  {
    "text": "if you don't think about the memory that's being allocated when you do are doing something a million times a second",
    "start": "523120",
    "end": "529120"
  },
  {
    "text": "then it'll just come around and slap you around the face and say nope I have to take a break right now and then your server will stop for four or 5 seconds",
    "start": "529120",
    "end": "535880"
  },
  {
    "text": "and guess what your throughput goes to a big fat zero when that happens um and then you can go back up to allocating",
    "start": "535880",
    "end": "541600"
  },
  {
    "text": "gigabytes per second um so we need to do a lot to manage our own memory so I know",
    "start": "541600",
    "end": "546880"
  },
  {
    "text": "net is great and if you're building your WPF app or your normal system web app or just not really just doing anything",
    "start": "546880",
    "end": "552360"
  },
  {
    "text": "normal other than trying to build a fast web server you generally don't have to think about this stuff but when you have to do this type of stuff you have to",
    "start": "552360",
    "end": "558200"
  },
  {
    "text": "stop just going oh I can allocate and the garbage collector will take care of it no you can't so you have to pool",
    "start": "558200",
    "end": "563839"
  },
  {
    "text": "memory okay and we have a custom memory pool that we wrote uh for kestral incidentally MVC in aset core also uses",
    "start": "563839",
    "end": "571320"
  },
  {
    "text": "memory pools now which are provided by system. buffers buffer pool um in order",
    "start": "571320",
    "end": "577079"
  },
  {
    "text": "to do a lot of the similar things like razor rendering and formatters and all",
    "start": "577079",
    "end": "582440"
  },
  {
    "text": "types of crazy stuff so we've taken a lot of the work that we've done in krol and reuse the same ideas in other parts",
    "start": "582440",
    "end": "588920"
  },
  {
    "text": "of the aset stack this isn't just about benchmarking okay it's not just about looking good on a chart it's about real",
    "start": "588920",
    "end": "594519"
  },
  {
    "text": "applications that render large HTML pages and making that as memory efficient efficient as possible possible",
    "start": "594519",
    "end": "600320"
  },
  {
    "text": "um strings are problematic strings are very special in the CLR and they do a",
    "start": "600320",
    "end": "605440"
  },
  {
    "text": "lot of tricks to make them fast and to make them sort of easy to use and to have them interrupt with other things in",
    "start": "605440",
    "end": "611360"
  },
  {
    "text": "Windows so the utf16 by default so they just cast straight into what is the thingy B string B string so you can use",
    "start": "611360",
    "end": "618279"
  },
  {
    "text": "it in com um it's all goodness right yep but the problem when building a web",
    "start": "618279",
    "end": "624720"
  },
  {
    "text": "server is that what is the HTTP 1.1 spec written around well everything things pretty much a damn string right you get",
    "start": "624720",
    "end": "631800"
  },
  {
    "text": "sent a line it's a string get some address some HTTP version bunch of",
    "start": "631800",
    "end": "637160"
  },
  {
    "text": "headers they're all asky encoded strings right it's not the most efficient protocol for sending things across the",
    "start": "637160",
    "end": "642320"
  },
  {
    "text": "wire and then to represent those in memory a million times a second if you're trying to do a million request per second you have to allocate a",
    "start": "642320",
    "end": "649000"
  },
  {
    "text": "buttload of strings in order to represent the header and the verb and the path and the query string and y y y",
    "start": "649000",
    "end": "654720"
  },
  {
    "text": "y and all that stuff is um IM mutable which means that once you've allocated",
    "start": "654720",
    "end": "660480"
  },
  {
    "text": "it you can't change it you have to allocate it to use it and then it has to get gcd at some point in the future okay",
    "start": "660480",
    "end": "665639"
  },
  {
    "text": "so it's cost cost cost cost cost um so the other thing is we want to consume in",
    "start": "665639",
    "end": "670880"
  },
  {
    "text": "coming data as soon as as possible because of the way libuv works and it's this single Loop that runs it's push",
    "start": "670880",
    "end": "676440"
  },
  {
    "text": "based it's push based right it wants to push you bites as they come we can't just wait for your app to say I'm ready",
    "start": "676440",
    "end": "681839"
  },
  {
    "text": "for bites read the bites cuz that'll potentially stall the lib UV Loop so we want to make sure that we're reading",
    "start": "681839",
    "end": "687680"
  },
  {
    "text": "stuff out of libuv as it's ready to give it to us okay as it comes off the network card into into memory and then",
    "start": "687680",
    "end": "693480"
  },
  {
    "text": "into libuv and it says I've got memory for you we need to be reading that even if your app perhaps isn't quite ready for it so that results in a slightly",
    "start": "693480",
    "end": "700680"
  },
  {
    "text": "more complicated architecture than it would otherwise that second line is just some comp side rubbish we don't not",
    "start": "700680",
    "end": "707680"
  },
  {
    "text": "primarily focused on asymptotic per yes we're not it's all n so it's fine that's",
    "start": "707680",
    "end": "713480"
  },
  {
    "text": "fine what really matters is real numbers we don't really look at thing go well that algorithm is n log squ we go let's",
    "start": "713480",
    "end": "719680"
  },
  {
    "text": "just measure it and find out okay let's compare it to 40 other things and we'll pick the thing that seems to work the best um and as it says here when you're",
    "start": "719680",
    "end": "726320"
  },
  {
    "text": "doing one micros per request every nanc that you take to do anything ends up you",
    "start": "726320",
    "end": "732120"
  },
  {
    "text": "know mattering and so we do a lot to do that so this is an this is just a random",
    "start": "732120",
    "end": "737360"
  },
  {
    "text": "screenshot of code why is this here so there's a bunch of bites that are known",
    "start": "737360",
    "end": "742880"
  },
  {
    "text": "non values for header values and unhe header um guess they're all values actually at this point they're all values um so if we know that it's a",
    "start": "742880",
    "end": "748160"
  },
  {
    "text": "connection closer keep we have a hardcoded static byray payload for those things so we never allocate these values",
    "start": "748160",
    "end": "754839"
  },
  {
    "text": "ever for request we allocate them once once per server with the app so you know",
    "start": "754839",
    "end": "761040"
  },
  {
    "text": "there's H 1.1 there's content length zero there's rn rn there's chunks to",
    "start": "761040",
    "end": "766839"
  },
  {
    "text": "keep alive so for the common PES out that that that we have in the in the um server we hard Cod a bunch of bites",
    "start": "766839",
    "end": "772600"
  },
  {
    "text": "statically across the entire server so this is about reusing strings cashing yep right so we know these never going to change we're have going to do a bunch",
    "start": "772600",
    "end": "778240"
  },
  {
    "text": "of comparisons against these we're going to have to write these out to the wire or read them off the wire so there's no point doing string comparisons and",
    "start": "778240",
    "end": "784480"
  },
  {
    "text": "allocating new strings every time we do this the web is bites in strings more",
    "start": "784480",
    "end": "790399"
  },
  {
    "text": "strings bites out just kind of every web framework on the planet is basically a super complicated way to write strings",
    "start": "790399",
    "end": "797360"
  },
  {
    "text": "to write strings out to a soccer it's all it is like the web is full of strings until you download a file and then we send application not deck stream",
    "start": "797360",
    "end": "803760"
  },
  {
    "text": "blah blah blah but when you write a web page everything's a string and so all the crazy web forms rails no does matter",
    "start": "803760",
    "end": "809560"
  },
  {
    "text": "what you do what framework you use you're just putting layers on top of writing strings out and strings are expensive it turns out so we have to do",
    "start": "809560",
    "end": "815360"
  },
  {
    "text": "a lot of tricks to make sure that it's not as expensive as it would be so what is a memory pool so we build this",
    "start": "815360",
    "end": "822800"
  },
  {
    "start": "818000",
    "end": "1105000"
  },
  {
    "text": "structure called a memory pool and we shove it in the large object Heap so quick refresher in net garbage",
    "start": "822800",
    "end": "829399"
  },
  {
    "text": "collection we have a generational Heap design right so we have a gen zero Heap which is the first one gen two gen one",
    "start": "829399",
    "end": "836920"
  },
  {
    "text": "sorry gen two and then we have the large Heap and it's a simplified version of how this works is that when you allocate",
    "start": "836920",
    "end": "843399"
  },
  {
    "text": "something under the Heap it goes into gen zero to start with right and stuff goes into gen zero goes into gen zero",
    "start": "843399",
    "end": "848800"
  },
  {
    "text": "then at some point memory pressure occurs and net goes oh I need to do some cleanup and it scans gen zero and goes",
    "start": "848800",
    "end": "854720"
  },
  {
    "text": "okay well you're still referencing this survived it survives I'm going to move it into generation one and everything",
    "start": "854720",
    "end": "860000"
  },
  {
    "text": "that was in gen zero that is deeren I'm going to free up right get it off the Heap it'll get collected and then that",
    "start": "860000",
    "end": "865759"
  },
  {
    "text": "continues and you keep going and then eventually gen one runs out of space and they do the same thing for Gen one okay",
    "start": "865759",
    "end": "870839"
  },
  {
    "text": "and then anything that was referenced in gen one moves into gen two okay y y then gen two happens the world stops Gen 2",
    "start": "870839",
    "end": "877920"
  },
  {
    "text": "collections tend to be pretty bad but server GC is a little bit better and so then when Gen 2 happens uh ultimately",
    "start": "877920",
    "end": "884240"
  },
  {
    "text": "the things that end up in Gen 2 have been referenced for a while okay they're long things Statics Statics things that",
    "start": "884240",
    "end": "890160"
  },
  {
    "text": "took more than some seconds most Statics I mean if you have gen is kind of a bad sign generally yeah yeah although in",
    "start": "890160",
    "end": "896320"
  },
  {
    "text": "things like client applications like Wind forms and f a lot of things end up in Gen 2 cuz you run the app for a long",
    "start": "896320",
    "end": "901920"
  },
  {
    "text": "time okay then there's a special Heap for things that are bigger than what 80 something or 40 or some magic number",
    "start": "901920",
    "end": "908959"
  },
  {
    "text": "some magic number that net decided was a magic number those things always go into the large object Heap because there are",
    "start": "908959",
    "end": "915720"
  },
  {
    "text": "efficiencies when you're doing collection of memory for things under a certain size and when they're over a certain when they get certainly bigger",
    "start": "915720",
    "end": "922040"
  },
  {
    "text": "they go well we're going to treat these special we're only going to did they ever collect a large optic heat I don't",
    "start": "922040",
    "end": "927320"
  },
  {
    "text": "think so gets compacted they def frag like literally",
    "start": "927320",
    "end": "933079"
  },
  {
    "text": "you can suffer from memory fragmentation with GC like a thing that I used to worry about in Doss 5 and I'd run dag on",
    "start": "933079",
    "end": "938519"
  },
  {
    "text": "Startup on my hard drive you have to worry about memory when you're doing a lot of memory allocation right so we create this thing we stick it in the",
    "start": "938519",
    "end": "944480"
  },
  {
    "text": "large object Heap it's called a memory pull and then we pin it we stick a pin",
    "start": "944480",
    "end": "949639"
  },
  {
    "text": "it and what a pin anyone know what pinning memory does in net prevents it from moving around so the other thing",
    "start": "949639",
    "end": "956199"
  },
  {
    "text": "that GC does when it does this little um scan the generation is that after it's removed all the stuff that's not being",
    "start": "956199",
    "end": "961759"
  },
  {
    "text": "used it compacts the Heap moves it all back into continuious memory space all right then it leaves a nice big empty",
    "start": "961759",
    "end": "967800"
  },
  {
    "text": "block at the end pinned memory cannot be moved why would you want a pinned memory well if you've got native code that",
    "start": "967800",
    "end": "974759"
  },
  {
    "text": "isn't playing in this happy GC land and relying on the pointers being always up to date then you have to pin it so that",
    "start": "974759",
    "end": "981639"
  },
  {
    "text": "it doesn't move while the native code is working with it okay so when you're doing IO memory ends up getting pinned because you ultimately have to call a",
    "start": "981639",
    "end": "987279"
  },
  {
    "text": "native uh OS platform API in order to get that flushed out to the wire or red off the wire so we take a big slab of",
    "start": "987279",
    "end": "993920"
  },
  {
    "text": "memory we shove it in the large object Heap and we tell the GC pin this don't move it I'm going to be using this for",
    "start": "993920",
    "end": "999079"
  },
  {
    "text": "the life of the application okay that way the GC can go oh don't have to worry about this memory it's pinned move on to the next thing makes it more efficient",
    "start": "999079",
    "end": "1005440"
  },
  {
    "text": "okay we break up that large amount of memory into slabs right so we have a big block of memory then we say one slab",
    "start": "1005440",
    "end": "1011800"
  },
  {
    "text": "here one slab here one slab here and then those slabs are further broken down into smaller blocks pretty BAS",
    "start": "1011800",
    "end": "1020079"
  },
  {
    "text": "um the slabs are there to reduce the number of things we have to allocate so rather than just allocating a block at a time because every allocation is a cost",
    "start": "1020079",
    "end": "1027400"
  },
  {
    "text": "um and ends up being a reference um we say let's allocate a slab and then as people ask for memory we sort of divide",
    "start": "1027400",
    "end": "1034760"
  },
  {
    "text": "it up into blocks all right um and this gives us larger portions of contigous memory in physical memory space so",
    "start": "1034760",
    "end": "1042319"
  },
  {
    "text": "they're from memory address here to memory address here we have one big slab of memory and then we can lease out",
    "start": "1042319",
    "end": "1048600"
  },
  {
    "text": "block from within that slab as people need it as it come as we come and go yep and the size is 4K for some reason to",
    "start": "1048600",
    "end": "1055240"
  },
  {
    "text": "fit Pages what's a page the numbers the numbers that we chose were based on a well Ben Ben Adams Ben Adams did some",
    "start": "1055240",
    "end": "1061760"
  },
  {
    "text": "research and he said he giv us a big write down about how this works LCP scam memory in linear chunks um for the word",
    "start": "1061760",
    "end": "1068520"
  },
  {
    "text": "size and 4K was optimal for what we measured so Ben Adams is a Community member who's done a lot of work on castol real and c and stuff and so he",
    "start": "1068520",
    "end": "1076000"
  },
  {
    "text": "basically read stuff some stuff and learned about gave us some details and then said do this trust me and we did it",
    "start": "1076000",
    "end": "1081880"
  },
  {
    "text": "and it's faster it's faster it's faster than what we had well so do this measure and make",
    "start": "1081880",
    "end": "1087840"
  },
  {
    "text": "sure it matches your um openers um and so the very first request that comes in we don't do this up front",
    "start": "1087840",
    "end": "1093559"
  },
  {
    "text": "we wait for the first request to come in and then all this magic kind of appears and we have we have memory to use now great we've got a bunch of memory and",
    "start": "1093559",
    "end": "1099760"
  },
  {
    "text": "then the next request that comes in obviously just reusers don't you don't pay that cost again and you just reuse the memory that's already there okay so",
    "start": "1099760",
    "end": "1105400"
  },
  {
    "start": "1105000",
    "end": "1228000"
  },
  {
    "text": "that's good memory pool pretty basic oh okay awesome so who's used",
    "start": "1105400",
    "end": "1110559"
  },
  {
    "text": "async await right good and you know how async await Works basically you await some",
    "start": "1110559",
    "end": "1116520"
  },
  {
    "text": "method that returns a task right in net and the task is Magic does stuff does",
    "start": "1116520",
    "end": "1122240"
  },
  {
    "text": "something now gives you back a task sometime in the future the task will finish and then magic happens it rejoins",
    "start": "1122240",
    "end": "1128200"
  },
  {
    "text": "threads and stuff and your code keeps going and it looks like it was sequential okay you can write your own",
    "start": "1128200",
    "end": "1134280"
  },
  {
    "text": "tasks effectively you can use the awake keyword with stuff other than a task if you build a custom a waiter and because",
    "start": "1134280",
    "end": "1142240"
  },
  {
    "text": "of this design we talked about before we have lib UV which is running its own threads right and then we have net using",
    "start": "1142240",
    "end": "1150280"
  },
  {
    "text": "its own threads like threadpool threads we have to have a way of marshalling information between libuv as bites",
    "start": "1150280",
    "end": "1156240"
  },
  {
    "text": "coming off the wire and your code net code right running uh your application",
    "start": "1156240",
    "end": "1162320"
  },
  {
    "text": "and so we have to be able to say well Li V has finished some work I need to do",
    "start": "1162320",
    "end": "1167559"
  },
  {
    "text": "some work over in net or vice versa net is ready to do some work I need to get that work over into libuv so we've got",
    "start": "1167559",
    "end": "1173280"
  },
  {
    "text": "all this hand holding and hand shaking of async work that goes back and forth hases anyone used RX before RX RX",
    "start": "1173280",
    "end": "1179039"
  },
  {
    "text": "reactive reactive extension yeah okay few people so libuv is kind of like RX you say start reading and it says here's",
    "start": "1179039",
    "end": "1186080"
  },
  {
    "text": "some bites here's some bites here's some bites and it's you're up to say I have some bites I'm going to take it and turn it into a stream right so in net there's",
    "start": "1186080",
    "end": "1193600"
  },
  {
    "text": "streams and that is pull and the B is push so we turn a bunch of push calls into to a stream by by catching them in",
    "start": "1193600",
    "end": "1200919"
  },
  {
    "text": "in a big uh list of blocks and then saying the consumer can read these blocks as they come in from BV so we",
    "start": "1200919",
    "end": "1206960"
  },
  {
    "text": "have one thread producing and one thread consuming this this um aiter so on on allocation we allocate a block from the",
    "start": "1206960",
    "end": "1213440"
  },
  {
    "text": "pool the BV right to it and then we on complete I guess if you hit next is next",
    "start": "1213440",
    "end": "1218880"
  },
  {
    "text": "complete on read we said we read this much btes and then the consumer can say I'm going to read more bites from that",
    "start": "1218880",
    "end": "1226400"
  },
  {
    "text": "makes total sense yeah yeah sense right producer consumer so we could have tried",
    "start": "1226400",
    "end": "1231919"
  },
  {
    "start": "1228000",
    "end": "1313000"
  },
  {
    "text": "to turn this into a stream which is what most people in net when they use these types of um apis that are over raw IO",
    "start": "1231919",
    "end": "1238760"
  },
  {
    "text": "you generally get given it as a stream right request. body socket blah blah blah memory stream writers those those",
    "start": "1238760",
    "end": "1245039"
  },
  {
    "text": "type of things right and as David said that's a pull API when you're ready to read from the stream you call read you",
    "start": "1245039",
    "end": "1250320"
  },
  {
    "text": "give it a buffer you say please read into this section of memory a bite array right and then it fills it gives you",
    "start": "1250320",
    "end": "1256159"
  },
  {
    "text": "back a result that says I gave you this many bytes go off and read that many bites in the thing that you gave it to me okay also read allocate a task per",
    "start": "1256159",
    "end": "1263280"
  },
  {
    "text": "call to read well read a sync allocates a task every time versus saying here's a call back call me back whenever you you",
    "start": "1263280",
    "end": "1269400"
  },
  {
    "text": "read data that's one call back for the entire server for all things right so because the call back is allocated once",
    "start": "1269400",
    "end": "1275240"
  },
  {
    "text": "sematics and it gets called over and over and over and over again as new data appears as opposed to Reay sync being a one shot Affair every time you call Ray",
    "start": "1275240",
    "end": "1282000"
  },
  {
    "text": "sync that will return exactly once it has to get allocated a task for that invocation then once you've consumed",
    "start": "1282000",
    "end": "1288080"
  },
  {
    "text": "what you read you have to call reday sync again and then allocates a task completes it when there's more memory",
    "start": "1288080",
    "end": "1293760"
  },
  {
    "text": "you do that and then you call reday sync again goes oh no no no whereas a call back you allocate once and it just calls you over and over and over it pushes it",
    "start": "1293760",
    "end": "1299120"
  },
  {
    "text": "to you okay so yes memory would have to be copied if we did this every time you call read",
    "start": "1299120",
    "end": "1305600"
  },
  {
    "text": "we'd have to copy it from lbv into your buffer copying is expensive it's more allocations etc etc it would work but we",
    "start": "1305600",
    "end": "1312559"
  },
  {
    "text": "decide to do it a little differently and this is where things get a little gnly okay so the socket input class",
    "start": "1312559",
    "end": "1318640"
  },
  {
    "start": "1313000",
    "end": "1379000"
  },
  {
    "text": "which is we're going to talk about a little bit socer input is this thing in castol that manages bites coming in off",
    "start": "1318640",
    "end": "1323679"
  },
  {
    "text": "the wire and feeds them from libuv into your app it's a it's a que a channel uh",
    "start": "1323679",
    "end": "1329400"
  },
  {
    "text": "a link between the producer and consumer so the B is right into it and the consumer is reading from it okay it's a",
    "start": "1329400",
    "end": "1335880"
  },
  {
    "text": "giant list of bites and it's just like a que if you ever ever done any type of dispat what do you call it distributed",
    "start": "1335880",
    "end": "1342559"
  },
  {
    "text": "sort of async stuff someone's publishing someone's consuming that socket input is that yep okay it's simple to think about",
    "start": "1342559",
    "end": "1348440"
  },
  {
    "text": "it and so you get your socket input you await it and then once that returns it's",
    "start": "1348440",
    "end": "1354200"
  },
  {
    "text": "ready for you to start reading yep right yep and so then I say I'm going to start consuming that data that's and it gives",
    "start": "1354200",
    "end": "1359559"
  },
  {
    "text": "you an iterator that's ier right consuming start a special iterator special iterator and Magic you'll",
    "start": "1359559",
    "end": "1365840"
  },
  {
    "text": "consume your bites over that special iterator which we'll talk a little bit about in a minute and then once you finished it you'll say I'm done",
    "start": "1365840",
    "end": "1371799"
  },
  {
    "text": "consuming the bites in this iterator and I read this much data and oh this is how much I finished yes okay all right so we",
    "start": "1371799",
    "end": "1378600"
  },
  {
    "text": "got there so okay so then we have so the",
    "start": "1378600",
    "end": "1383880"
  },
  {
    "text": "producer calls incoming start to get a block and incoming complete to say hang on there's a memory pool with a block there's a pool and it says incoming",
    "start": "1383880",
    "end": "1390320"
  },
  {
    "text": "start and you're so you produce I'm producing I'm the I'm liuv right so you throw bites at me you throw bites and",
    "start": "1390320",
    "end": "1396320"
  },
  {
    "text": "I'm catching them and you said incoming complete so you said incoming start no you said incoming start I said incoming",
    "start": "1396320",
    "end": "1401400"
  },
  {
    "text": "start yeah from the pool so you gra the pool which you gave me ear the pool the pools this is the pool okay get from the",
    "start": "1401400",
    "end": "1406840"
  },
  {
    "text": "pool yeah right get a block I got the bite right and you say incoming complete right done and then the thread is like",
    "start": "1406840",
    "end": "1412960"
  },
  {
    "text": "waiting here so there's a bunch of memory just sitting here and I say I'm going to consume okay so the a waiter",
    "start": "1412960",
    "end": "1418200"
  },
  {
    "text": "returns cuz it complet because you give me bites right right and now I'm consuming start read read read read read",
    "start": "1418200",
    "end": "1423880"
  },
  {
    "text": "par am I just chilling out parse parse par no no you're like throwing there's more stuff coming in throwing",
    "start": "1423880",
    "end": "1429240"
  },
  {
    "text": "stuff right as fast as you can I'm reading reading reading reading I just",
    "start": "1429240",
    "end": "1434400"
  },
  {
    "text": "keep throwing stuff in here complete I'm done and then you say okay I'm keep going so let's keep going and at the point that you say complete if I'm in",
    "start": "1434400",
    "end": "1440720"
  },
  {
    "text": "the middle of putting something here like synchronization happen it pauses and it's keeping and it",
    "start": "1440720",
    "end": "1447720"
  },
  {
    "text": "says right and then we keep going then the consumer says I saw this much and you're going to say it doesn't matter",
    "start": "1447720",
    "end": "1453159"
  },
  {
    "text": "because I have more more stuff I he keeps going over and over and over ah so okay so let's do this again a little simpler okay so some bites came in yep",
    "start": "1453159",
    "end": "1461000"
  },
  {
    "text": "right and then you start reading yep and then while you're reading I give some more bites I say oh there's bites and I",
    "start": "1461000",
    "end": "1467320"
  },
  {
    "text": "and then you got back to the beginning and oh hey I can't I'm not going to finish yet cuz there's more bites since I started so you keep going okay then",
    "start": "1467320",
    "end": "1473919"
  },
  {
    "text": "then you say complete yep and then I put more bites in after you've said complete then it all starts again yeah okay make",
    "start": "1473919",
    "end": "1480440"
  },
  {
    "text": "sense so the the fast path is if he keep he keeps throwing bites as I'm reading",
    "start": "1480440",
    "end": "1486039"
  },
  {
    "text": "and when I say I'm done reading if he's been throwing and and I haven't consumed all the bites I have been read so far",
    "start": "1486039",
    "end": "1492720"
  },
  {
    "text": "then then the await returns immediately so it never awaits if there's more bites since I have been reading the setes",
    "start": "1492720",
    "end": "1499720"
  },
  {
    "text": "sense so I keep going I don't pay the cost of going async into you stay on the same thread reading off the hot cash",
    "start": "1499720",
    "end": "1506440"
  },
  {
    "text": "over and over and over if you throw as I'm reading I see and if I was start to look in the stack Trace at that point it's almost like I'm just staying on the",
    "start": "1506440",
    "end": "1512399"
  },
  {
    "text": "same St tight like a tight while loop that's important for per so you can keep your method can keep reading bites off",
    "start": "1512399",
    "end": "1519520"
  },
  {
    "text": "the wire yep asynchronously to them coming in off the wire correct right so you've got it is actually happening in",
    "start": "1519520",
    "end": "1525760"
  },
  {
    "text": "parallel I am processing bites while they coming in yep but I'm not paying",
    "start": "1525760",
    "end": "1531520"
  },
  {
    "text": "any boundary cost there's no CIS call Cost there's nothing because the bites are coming into a a memory block that is",
    "start": "1531520",
    "end": "1536799"
  },
  {
    "text": "shared and I can just keep reading in a tight Loop yep with basically zero cost while that's happening that becomes important especially when we talk about",
    "start": "1536799",
    "end": "1542640"
  },
  {
    "text": "benchmarks yep it a little later on okay is that clear this might help this is a pool",
    "start": "1542640",
    "end": "1548440"
  },
  {
    "start": "1546000",
    "end": "1675000"
  },
  {
    "text": "from no one so imagine this is another diagram to try and explain this a little",
    "start": "1548440",
    "end": "1554360"
  },
  {
    "text": "bit better okay all right so this is a block a memory block out of the pool",
    "start": "1554360",
    "end": "1560039"
  },
  {
    "text": "right a bunch of blocks a couple of blocks doesn't really matter if it's one or two doesn't really matter the iterator will go over multiple of them",
    "start": "1560039",
    "end": "1566399"
  },
  {
    "text": "right so it's a bunch of memory that is shared between the consumer and the producer okay so there was green is what",
    "start": "1566399",
    "end": "1575080"
  },
  {
    "text": "was in there in the beginning and I call consuming start or incoming start down here right I put the green blocks in and",
    "start": "1575080",
    "end": "1582600"
  },
  {
    "text": "then I called incoming complete so you wrote to the all right so green was done by incoming start incoming complete the",
    "start": "1582600",
    "end": "1588760"
  },
  {
    "text": "first lot consume start was called here now at this point while this person is",
    "start": "1588760",
    "end": "1594559"
  },
  {
    "text": "iterating across here new bites came in off the wire and so incoming start was called again and they append to the tail",
    "start": "1594559",
    "end": "1602559"
  },
  {
    "text": "of this block while the person is reading from the head of the block okay",
    "start": "1602559",
    "end": "1607840"
  },
  {
    "text": "so then I keep going I keep going this person just keeps consuming they didn't even realize that originally when they started it had ended here they just get",
    "start": "1607840",
    "end": "1614520"
  },
  {
    "text": "the next bite in the iterator in the enumerator basically and they go oh Next Bite Next Bite and this could even span",
    "start": "1614520",
    "end": "1620399"
  },
  {
    "text": "blocks I believe like it even like spans physical spaces of memory so we do we link blocks via link list so each each",
    "start": "1620399",
    "end": "1626960"
  },
  {
    "text": "block is 4K y 4K so there a head and a tail and then at some point this code",
    "start": "1626960",
    "end": "1632720"
  },
  {
    "text": "will decide it it's finished like it may not need the next bite yet go okay I'm done here and then this thing will stop",
    "start": "1632720",
    "end": "1639200"
  },
  {
    "text": "when that packet or that series of packets is finished being read off the wire okay and then that just repeats ad",
    "start": "1639200",
    "end": "1644279"
  },
  {
    "text": "fin them forever for the life of a single socket so this is all happening the space of one TCP connection cuz what",
    "start": "1644279",
    "end": "1651120"
  },
  {
    "text": "are we reading off this HTP stuff and that's what we'll get to next so we we now we understand how data is coming in",
    "start": "1651120",
    "end": "1657039"
  },
  {
    "text": "off my copper or my fiber in through the little metal bits and through the network card in through the buffer in",
    "start": "1657039",
    "end": "1663120"
  },
  {
    "text": "the card in through the driver blah blah blah blah blah Windows stuff Linux stuff then up into shared memory and.net",
    "start": "1663120",
    "end": "1669840"
  },
  {
    "text": "through libuv and then we got two things one coming in here one coming in here and they're moving cursors around okay",
    "start": "1669840",
    "end": "1675880"
  },
  {
    "start": "1675000",
    "end": "1900000"
  },
  {
    "text": "super fast now we've got bites what are we going to do with them pass them we're going to pass them remember strings as",
    "start": "1675880",
    "end": "1681720"
  },
  {
    "text": "we said before magical and everything in in in the web is strings most of the time but strings aren't really magical",
    "start": "1681720",
    "end": "1688399"
  },
  {
    "text": "they're just bites right they're just bites with a particular encoding who's ever had to like really understand to do",
    "start": "1688399",
    "end": "1693480"
  },
  {
    "text": "anything with character encoding like text encoding only a few hands people did it",
    "start": "1693480",
    "end": "1700760"
  },
  {
    "text": "hurt it hurts doesn't it it really hurts like asky I can get my head ran good got",
    "start": "1700760",
    "end": "1706120"
  },
  {
    "text": "it anything beyond that and I just then B Auto marks and un double width",
    "start": "1706120",
    "end": "1712880"
  },
  {
    "text": "triple width so at least in HTTP all the headers hp11 anyway all the headers are",
    "start": "1712880",
    "end": "1719559"
  },
  {
    "text": "Ry so that makes it a little bit simple but essentially there's a bunch of bites coming in and we know that there are",
    "start": "1719559",
    "end": "1725519"
  },
  {
    "text": "some special bites that delineate points in the life of an HTTP request so for example the end of the",
    "start": "1725519",
    "end": "1734039"
  },
  {
    "text": "headers or end of each header is marked by a courage return line feed right unless there was an escape",
    "start": "1734039",
    "end": "1739640"
  },
  {
    "text": "character before it and then the end of the headers is marked by two carriage return line feeds right it's pretty",
    "start": "1739640",
    "end": "1745679"
  },
  {
    "text": "basic actually um so is if you hit enter twice in the terminal window where you were sending your HTP request because",
    "start": "1745679",
    "end": "1751720"
  },
  {
    "text": "that's what we all do right and then you send the body and some you've tell to Port 80 at",
    "start": "1751720",
    "end": "1757200"
  },
  {
    "text": "some point right you typed in get Space blah blah blah and you make a request um",
    "start": "1757200",
    "end": "1762480"
  },
  {
    "text": "so there are very efficient ways of looking for those things so that we don't have to do the naive thing which is just go B by bite by bite by bite",
    "start": "1762480",
    "end": "1770320"
  },
  {
    "text": "these are very wellknown things in HTTP right there's a connect these are verbs HTTP things and verbs and uh versions",
    "start": "1770320",
    "end": "1777360"
  },
  {
    "text": "and blah blah blah blah blah so these are actually the verbs right these are the very first things that will appear in any request that comes over the wire",
    "start": "1777360",
    "end": "1784640"
  },
  {
    "text": "connect or delete or get or head or Pat or any other verbs and then we know the version will be at the end of the first",
    "start": "1784640",
    "end": "1790720"
  },
  {
    "text": "line before that first carriage return line feed okay these are well known we're going to reuse them over and over",
    "start": "1790720",
    "end": "1796279"
  },
  {
    "text": "and over again what's interesting about these strings",
    "start": "1796279",
    "end": "1801960"
  },
  {
    "text": "is that they're all eight byes or less just luckily okay for the ones that we",
    "start": "1801960",
    "end": "1807480"
  },
  {
    "text": "know about you can have custom verbs but the ones that we know about that we care about the most are all less than eight bites which means that they can all fit",
    "start": "1807480",
    "end": "1814600"
  },
  {
    "text": "into a long you can represent every single one of these strings as a",
    "start": "1814600",
    "end": "1820440"
  },
  {
    "text": "number you can probably see where this is going so if you can represent the M as a",
    "start": "1820440",
    "end": "1826120"
  },
  {
    "text": "number we can start doing some clever tricks to read and interpret these byes",
    "start": "1826120",
    "end": "1831559"
  },
  {
    "text": "off the wire without ever having to treat them as strings because remember strings result in allocations and net which results in GC pressure and doing",
    "start": "1831559",
    "end": "1838519"
  },
  {
    "text": "things with encoding and comparison is expensive da d d da and then death right what's that and death because GC will",
    "start": "1838519",
    "end": "1844120"
  },
  {
    "text": "kill you all right so when we pass a request start line we're going to read the first eight bytes as a long about",
    "start": "1844120",
    "end": "1850279"
  },
  {
    "text": "that much okay this is good because at this point I know what a get but I I don't know what to get till I actually",
    "start": "1850279",
    "end": "1856639"
  },
  {
    "text": "compare those bites to something that I know to be a get we check against a pre-computed long for no method names oh",
    "start": "1856639",
    "end": "1863240"
  },
  {
    "text": "we're going to show this code I think it's it's crazy and then when we if it matches one of those we just reuse that",
    "start": "1863240",
    "end": "1868440"
  },
  {
    "text": "string rather than allocating a new string forget we take the existing string and we stick it on the object so",
    "start": "1868440",
    "end": "1873880"
  },
  {
    "text": "that when you type request. verb that string get hadn't been allocated for",
    "start": "1873880",
    "end": "1879279"
  },
  {
    "text": "that request it pointed to the one that we statically assigned in the code const all right got it yes they all said what",
    "start": "1879279",
    "end": "1889919"
  },
  {
    "text": "yes if you include",
    "start": "1891480",
    "end": "1895518"
  },
  {
    "text": "the no they",
    "start": "1903720",
    "end": "1907200"
  },
  {
    "text": "Alles y yes and we will tell you we show you",
    "start": "1909639",
    "end": "1915600"
  },
  {
    "text": "how weid that how we avoid the the bug the potential bug so like you know",
    "start": "1915600",
    "end": "1921159"
  },
  {
    "text": "basically every character is a bite essentially right and so eight bytes gets us every that's this is seven right",
    "start": "1921159",
    "end": "1928240"
  },
  {
    "text": "so eight fits every single one here right none of these are eight right I think the biggest one is seven No it",
    "start": "1928240",
    "end": "1934159"
  },
  {
    "text": "should be 1.10 is those are eight oh these are eight right and so eight byes equals 64 bits which is along in net and",
    "start": "1934159",
    "end": "1941720"
  },
  {
    "text": "so we can represent every one of those as a long but as he just pointed out this one isn't that like this is has",
    "start": "1941720",
    "end": "1948559"
  },
  {
    "text": "other stuff in it so how do we how do we mask and compare so that that doesn't happen well this is",
    "start": "1948559",
    "end": "1954960"
  },
  {
    "text": "how just I'll let you read it for 5 seconds okay let it s so this is",
    "start": "1954960",
    "end": "1963880"
  },
  {
    "text": "statically assigned this represents the long the number that represents the",
    "start": "1963880",
    "end": "1970440"
  },
  {
    "text": "string the ask yeah with a space followed by four nulls okay slz is a",
    "start": "1970440",
    "end": "1977200"
  },
  {
    "text": "null ask ke string right so this gives me back a long so it turns this into btes which things it's cast to a long",
    "start": "1977200",
    "end": "1984039"
  },
  {
    "text": "and I store that long that long represents that string okay got it beautiful then we create a mask to match",
    "start": "1984039",
    "end": "1993639"
  },
  {
    "text": "that long that we can use to do a bitwise operation between that string get Space",
    "start": "1993639",
    "end": "2001039"
  },
  {
    "text": "HTTP and this string right so we have three bits of data we have the comparison string",
    "start": "2001039",
    "end": "2008320"
  },
  {
    "text": "we have the input string and then we have the mask three bits of data and the result of",
    "start": "2008320",
    "end": "2014200"
  },
  {
    "text": "that is this beautiful which oh my God so we have an inator which we talked",
    "start": "2014200",
    "end": "2021360"
  },
  {
    "text": "about from the memory pool we Peak along Long's worth of data from the memory",
    "start": "2021360",
    "end": "2026440"
  },
  {
    "text": "pool block which is our value we bitwise and that don't ask me what a bit wise",
    "start": "2026440",
    "end": "2032559"
  },
  {
    "text": "and is I'm a web developer and but I know that's what that",
    "start": "2032559",
    "end": "2038000"
  },
  {
    "text": "character means with the mask that we created over here right so what's that that's a bunch of nulls and a bunch of",
    "start": "2038000",
    "end": "2045120"
  },
  {
    "text": "not nulls all bit set all bit set right for that bite all bits set for that bite right and then if that is equal to this",
    "start": "2045120",
    "end": "2053839"
  },
  {
    "text": "get Space right get space then we know that that input was started with the",
    "start": "2053839",
    "end": "2059800"
  },
  {
    "text": "word get get it understood and we do that for every single one of these known",
    "start": "2059800",
    "end": "2066560"
  },
  {
    "text": "things okay and then we even have some other code that before you even get to this I think Compares lengths and things",
    "start": "2066560",
    "end": "2072158"
  },
  {
    "text": "and does oh that's for the header Val yeah okay all right good all right so I talked about Peak there so all memory",
    "start": "2072159",
    "end": "2078440"
  },
  {
    "start": "2075000",
    "end": "2117000"
  },
  {
    "text": "blocks are read by iterators we have a peak operation which you can Peak a certain length yeah right and PE in this",
    "start": "2078440",
    "end": "2085280"
  },
  {
    "text": "case it peaked along long right give me a Long's worth of data what does take do move it to move it one so Peak is peak",
    "start": "2085280",
    "end": "2091760"
  },
  {
    "text": "one and but but don't move the the cursor the cursor okay take his take one and move the cursor okay seek is crazy",
    "start": "2091760",
    "end": "2098040"
  },
  {
    "text": "passes some stuff what we're going do is that what we're going to do next yeah seek next okay we're going to do seek",
    "start": "2098040",
    "end": "2103599"
  },
  {
    "text": "okay all right so hold on hold on hold on let me I need to drink of water all",
    "start": "2103599",
    "end": "2109640"
  },
  {
    "text": "right all right seek do you want to drive this no okay",
    "start": "2109640",
    "end": "2115480"
  },
  {
    "text": "well no okay so we're just talking about the start line still think heard by the",
    "start": "2115480",
    "end": "2122000"
  },
  {
    "start": "2117000",
    "end": "2133000"
  },
  {
    "text": "just okay focus so remember this is the start line that's a start line that's what you see at the first the beginning",
    "start": "2122000",
    "end": "2127079"
  },
  {
    "text": "of any h one1 request is this line followed by a courage return and then the headers start okay all right so we",
    "start": "2127079",
    "end": "2135800"
  },
  {
    "text": "call it one to four times to consume the start line and I guess that's because of the size it can be either one or four",
    "start": "2135800",
    "end": "2141760"
  },
  {
    "text": "depending on how big the URL is is that right because what the SL side the SL says four so I I believe yes the dev",
    "start": "2141760",
    "end": "2146800"
  },
  {
    "text": "that wrote the [Laughter] SL twice for header finds the first of",
    "start": "2146800",
    "end": "2153880"
  },
  {
    "text": "one to three of Any Given characters so you basically say Seek for this right yep and then it will tell you",
    "start": "2153880",
    "end": "2160280"
  },
  {
    "text": "whether it found that in that part of the memory pool okay and if it doesn't then you go on to the next part of the memory pool and call it again but that's",
    "start": "2160280",
    "end": "2167200"
  },
  {
    "text": "why it's n times one to whatever many times for example find spaces find new lines find question marks because if",
    "start": "2167200",
    "end": "2174520"
  },
  {
    "text": "we're decomposing a request we care about finding spaces",
    "start": "2174520",
    "end": "2179839"
  },
  {
    "text": "here and here we care about finding new lines because there's a new line here and there's a new line after every header and we care about finding",
    "start": "2179839",
    "end": "2186560"
  },
  {
    "text": "question marks because we might want to split up this URL betweeny string you know the query string and the first part",
    "start": "2186560",
    "end": "2192839"
  },
  {
    "text": "of it okay so we'd like to be able to say for a given set of memory find that remember we're doing this all to avoid",
    "start": "2192839",
    "end": "2198599"
  },
  {
    "text": "turning into a string and then calling index of cuz that's really simple and you should totally do that in all your",
    "start": "2198599",
    "end": "2204359"
  },
  {
    "text": "apps all of them do this cast Longs and just mask the crap out of your code and",
    "start": "2204359",
    "end": "2210280"
  },
  {
    "text": "just like compare with an and then assure your job security Yeah by having no one else no comments no comments",
    "start": "2210280",
    "end": "2215839"
  },
  {
    "text": "either that's right and then to make it even faster and to make it even more complicated and we have to explain this",
    "start": "2215839",
    "end": "2221200"
  },
  {
    "text": "now we use vectorization and simd or single instruction multiple data operations in the CPU to allow us to",
    "start": "2221200",
    "end": "2228280"
  },
  {
    "text": "look at more than one bite at a time in a single CPU instruction instruction okay and I'll explain a little bit about",
    "start": "2228280",
    "end": "2234000"
  },
  {
    "text": "what that means in a minute we'll take a look at one character version uh for Simplicity okay let me just talk about",
    "start": "2234000",
    "end": "2239240"
  },
  {
    "text": "vectorization very quickly so oh I had a thing in my computer restarted UHD it",
    "start": "2239240",
    "end": "2245920"
  },
  {
    "text": "was on the Intel website it was really good stuff ax not",
    "start": "2245920",
    "end": "2251160"
  },
  {
    "text": "ASD oh sorry not axd you're thinking about forms man I am here we go this one",
    "start": "2251160",
    "end": "2258000"
  },
  {
    "start": "2257000",
    "end": "2283000"
  },
  {
    "text": "so Advanced vectri STS uh everyone remember um was it ssse s SSE Pentium 2",
    "start": "2258000",
    "end": "2264800"
  },
  {
    "text": "is that right yeah and had the multi and MMX the multimeter extensions that came with penum 2 I was baby b and that's",
    "start": "2264800",
    "end": "2271800"
  },
  {
    "text": "what gave us the first 20 frames per second postage stamp video over the internet I remember stuff how old are",
    "start": "2271800",
    "end": "2278280"
  },
  {
    "text": "you old old much older than you um AVX is",
    "start": "2278280",
    "end": "2285319"
  },
  {
    "start": "2283000",
    "end": "2296000"
  },
  {
    "text": "kind of the newest version of that I think they're up to AVX 3 now right these are basically extra CPU instructions that are built into the CPU",
    "start": "2285319",
    "end": "2291960"
  },
  {
    "text": "to allow you to do super advanced stuff if you write your code in assembly um in",
    "start": "2291960",
    "end": "2298040"
  },
  {
    "start": "2296000",
    "end": "2312000"
  },
  {
    "text": "net you use the numerics namespace uh system. numerics which is a package and you you you use the newest Jitter the",
    "start": "2298040",
    "end": "2304640"
  },
  {
    "text": "Ryu jit which came inet 46 or inet core and it can emit bik code that uses this",
    "start": "2304640",
    "end": "2310119"
  },
  {
    "text": "stuff so what this basically means is that with the SS and AVX 128 128bit",
    "start": "2310119",
    "end": "2317079"
  },
  {
    "text": "types you can perform operations on sets of data that are larger than the reg",
    "start": "2317079",
    "end": "2323200"
  },
  {
    "text": "register size in the CPU right makes sense so the reg what was it 64bit we",
    "start": "2323200",
    "end": "2328599"
  },
  {
    "text": "have CPUs now right yeah right but now I can do 128bit operations via these",
    "start": "2328599",
    "end": "2333960"
  },
  {
    "text": "special extensions or 256 with avx2 and I think it's 512 with ax3 and I think",
    "start": "2333960",
    "end": "2339000"
  },
  {
    "text": "the architecture scales all the way to 1,24 bit and so for example we can fit",
    "start": "2339000",
    "end": "2344720"
  },
  {
    "text": "four floats into a single instruction or two doubles or 16 bytes this is what we",
    "start": "2344720",
    "end": "2351760"
  },
  {
    "text": "care about because we're operating on bytes and Longs okay so we care about btes and I think a long is the next one",
    "start": "2351760",
    "end": "2357880"
  },
  {
    "text": "above this so it's two Longs right it's right there oh it's right there or I could just like read it down here 64 bit",
    "start": "2357880",
    "end": "2364319"
  },
  {
    "text": "in 64 is a long right so two Longs or 16 I can operate on 16 btes at a time",
    "start": "2364319",
    "end": "2370359"
  },
  {
    "text": "rather than looping over every b as it comes off the wire that's what it comes down that's super slow what's doing it every at a time four Loops are the four",
    "start": "2370359",
    "end": "2377240"
  },
  {
    "text": "Loops are easy to understand but not as fast okay so what does this look like in actual actuality here is a series of",
    "start": "2377240",
    "end": "2385680"
  },
  {
    "start": "2378000",
    "end": "2403000"
  },
  {
    "text": "bites with hello space world and a carriage return a line feed after this",
    "start": "2385680",
    "end": "2391599"
  },
  {
    "text": "is meant to represent a single header all right we're making it very simple here right this is one header line and",
    "start": "2391599",
    "end": "2397000"
  },
  {
    "text": "these are the hex values that represent every character or every bite in this stream okay so then we go okay here is",
    "start": "2397000",
    "end": "2407920"
  },
  {
    "start": "2403000",
    "end": "2456000"
  },
  {
    "text": "our here's the btes that represent one vector's worth of data so the vector",
    "start": "2407920",
    "end": "2414160"
  },
  {
    "text": "size is different on every CPU it's called the stride length I think the stride I think we call it the stride and",
    "start": "2414160",
    "end": "2420440"
  },
  {
    "text": "on my machine for example it was 32 and on yours it was 16 16 yeah parallels parallels I don't even",
    "start": "2420440",
    "end": "2426599"
  },
  {
    "text": "know what it was and I think on even more modern machines it it yours might be high it might be 64 or even 128 if you have a zon and so we",
    "start": "2426599",
    "end": "2433880"
  },
  {
    "text": "take that much data we we operate on whatever the machine's Vector size is at a time so in this case for the example",
    "start": "2433880",
    "end": "2439640"
  },
  {
    "text": "this is going to be eight right and then we have this uh Vector here which is our",
    "start": "2439640",
    "end": "2444760"
  },
  {
    "text": "mask going back to the first example right SL and this is just a bunch of SL RS z d is courage return all right so we",
    "start": "2444760",
    "end": "2451440"
  },
  {
    "text": "have our value and we're looking for courage return and so we just have a full set of Courage returns",
    "start": "2451440",
    "end": "2457599"
  },
  {
    "start": "2456000",
    "end": "2512000"
  },
  {
    "text": "then we say is this Vector equal to that vector and then you get back as a result",
    "start": "2457599",
    "end": "2464359"
  },
  {
    "text": "a third Vector with bits or bite set that tell you whether each bite in the",
    "start": "2464359",
    "end": "2470319"
  },
  {
    "text": "input and the comparison were equal or not make sense so these are all zero",
    "start": "2470319",
    "end": "2475760"
  },
  {
    "text": "because none of these were equal understand and whereas this one see",
    "start": "2475760",
    "end": "2481599"
  },
  {
    "text": "these two are equal none of the ELA but these two are because this one's a courage return so the result is a hit",
    "start": "2481599",
    "end": "2488319"
  },
  {
    "text": "green hit good we know that in this 8 bytes right there is something",
    "start": "2488319",
    "end": "2495720"
  },
  {
    "text": "we're interested in so rather than having to Loop through and that would have taken us 14 15 operations we did it",
    "start": "2495720",
    "end": "2502920"
  },
  {
    "text": "in two so we've gone from 15 to two straight away to find the courage return",
    "start": "2502920",
    "end": "2507960"
  },
  {
    "text": "good right that's what vectorization does for you if you're on compliant Hardware that can do that all",
    "start": "2507960",
    "end": "2513920"
  },
  {
    "start": "2512000",
    "end": "2547000"
  },
  {
    "text": "right and then this was a PO request by the way this was a poor request just so you know that then we go then we go to",
    "start": "2513920",
    "end": "2519920"
  },
  {
    "text": "the next step thank you thank you so all we figured out here is that this block",
    "start": "2519920",
    "end": "2526960"
  },
  {
    "text": "contains the thing that we're interested in we don't actually know what slot it's",
    "start": "2526960",
    "end": "2532040"
  },
  {
    "text": "in yet it says green here but it's lying we don't actually know that yet all we know is that one of these is a match we",
    "start": "2532040",
    "end": "2537920"
  },
  {
    "text": "know it's not zero we know it's not zero right we don't know which one it is we know the whole thing is not equal to zero it's more than zero yeah right cuz",
    "start": "2537920",
    "end": "2545200"
  },
  {
    "text": "remember this is just a long it's just a number right so now we have to figure out where which bit which bite in this",
    "start": "2545200",
    "end": "2551480"
  },
  {
    "start": "2547000",
    "end": "2576000"
  },
  {
    "text": "set is actually the one we care about that's where this method comes in you're going to explain this one no",
    "start": "2551480",
    "end": "2558160"
  },
  {
    "text": "so so so it's kind of like a binary search hit the okay hit the arrows are",
    "start": "2558160",
    "end": "2565800"
  },
  {
    "text": "you anyone know what a binary search is yeah okay good good we all do thank God not everyone you don't have to know by",
    "start": "2565800",
    "end": "2572599"
  },
  {
    "text": "the way you have to know what a b just called the method on a r up B search and you're fine okay so so EAS would be to",
    "start": "2572599",
    "end": "2578200"
  },
  {
    "start": "2576000",
    "end": "2682000"
  },
  {
    "text": "Loop over the entire vector and just find the one that's non zero that makes sense but instead that would be too slow",
    "start": "2578200",
    "end": "2585839"
  },
  {
    "text": "what that would take me seven in this case operations yeah what if we could just mask our we to",
    "start": "2585839",
    "end": "2590880"
  },
  {
    "text": "success and keep going so first see how the right hand side of this mask is all",
    "start": "2590880",
    "end": "2598040"
  },
  {
    "text": "F and the left hand side is all zero my simple mind basic what that's a mask",
    "start": "2598040",
    "end": "2603960"
  },
  {
    "text": "that's a mask right my simple mind says well okay what that basically says is is",
    "start": "2603960",
    "end": "2609800"
  },
  {
    "text": "the thing we're interested in in the right hand side and if it is it'll be greater than",
    "start": "2609800",
    "end": "2615920"
  },
  {
    "text": "uh the other way around right cuz it'll say no and then it jumps down to there yep the other statement okay okay well",
    "start": "2615920",
    "end": "2621760"
  },
  {
    "text": "we know it's in the first half right we know it's in all these zeros which is backwards from what we're showing down",
    "start": "2621760",
    "end": "2627319"
  },
  {
    "text": "the bottom for some reason so then we go to the next half which is this set here cuz we know it's in this first set so",
    "start": "2627319",
    "end": "2633760"
  },
  {
    "text": "now we're going to do the right hand side of that first right and in this case it's going to be true no it's false",
    "start": "2633760",
    "end": "2639440"
  },
  {
    "text": "again cuz I got that wrong cuz I get this back more correct than you are so it's fine right sides I'm sure are",
    "start": "2639440",
    "end": "2644480"
  },
  {
    "text": "correct so now this is a worst case search actually yep so we've now done what three operations we would have done",
    "start": "2644480",
    "end": "2650240"
  },
  {
    "text": "seven to find it so far so now we know it's in one of these two so it's either going to return us six or seven I don't",
    "start": "2650240",
    "end": "2657520"
  },
  {
    "text": "know why but that's good cuz reasons and then F something",
    "start": "2657520",
    "end": "2664400"
  },
  {
    "text": "six so we found it yeah okay because as you can see like lots of FS then we jump",
    "start": "2666040",
    "end": "2671480"
  },
  {
    "text": "down to here half the number of FS we jump down to here another half the number of FS but it wasn't that one it",
    "start": "2671480",
    "end": "2678359"
  },
  {
    "text": "was this one so we know that we're there yeah fin research half every time it's good good my web developer brain can",
    "start": "2678359",
    "end": "2683880"
  },
  {
    "start": "2682000",
    "end": "2744000"
  },
  {
    "text": "understand that so at this point you're thinking come on is this really worth all this",
    "start": "2683880",
    "end": "2689280"
  },
  {
    "text": "Insanity well this test probably not so like if you just if you just isolate this one little test this is what we got",
    "start": "2689280",
    "end": "2696520"
  },
  {
    "text": "when we ran it through through",
    "start": "2696520",
    "end": "2699119"
  },
  {
    "text": "benchmark.us search the worst you're ever going to do is what log in right and I pretend like I know what that",
    "start": "2722640",
    "end": "2728319"
  },
  {
    "text": "means log in next um and that's the naive version you",
    "start": "2728319",
    "end": "2734520"
  },
  {
    "text": "just Loop Over The Buttes right really really simple easy to understand easy understand what most people would write",
    "start": "2734520",
    "end": "2740720"
  },
  {
    "text": "is that your that's what you should do unless you have reasons not to um but",
    "start": "2740720",
    "end": "2745800"
  },
  {
    "start": "2744000",
    "end": "2787000"
  },
  {
    "text": "when you amplify that up to actual calls to seek with real data like 4K of data",
    "start": "2745800",
    "end": "2752319"
  },
  {
    "text": "you give it a full memory block of data is coming off the wire and then you say I've got to find a courage return in",
    "start": "2752319",
    "end": "2757520"
  },
  {
    "text": "this 4K of data now it goes from taking 4 seconds on average right or four sorry",
    "start": "2757520",
    "end": "2765480"
  },
  {
    "text": "4,000 nanc which isn't quite 4 seconds yeah four by a couple by a couple orders of magnitude um it takes 4,000 NC",
    "start": "2765480",
    "end": "2772839"
  },
  {
    "text": "average versus 863 NS right and the standard deviation again it's much much less so this adds up as you start using",
    "start": "2772839",
    "end": "2780079"
  },
  {
    "text": "real data which is why you do micro benchmarks as well as bigger benchmarks all the way through to full end to end testing okay create CRA stuff to get",
    "start": "2780079",
    "end": "2787640"
  },
  {
    "start": "2787000",
    "end": "3132000"
  },
  {
    "text": "crazy okay you are doing this one really no I'll do this one you want to do this one I'll stare you'll stare so there's",
    "start": "2787640",
    "end": "2794079"
  },
  {
    "text": "some yellow hang on who and some green who's ever looked at the waterfall loading chart in like the Chrome",
    "start": "2794079",
    "end": "2800319"
  },
  {
    "text": "developer tools right oh yeah good good comparison right good and so you know that the browser opens like six connections to the server so if you you",
    "start": "2800319",
    "end": "2807400"
  },
  {
    "text": "request 20 images you'll see six loading in parallel while the other requests are all sitting there waiting pending",
    "start": "2807400",
    "end": "2813480"
  },
  {
    "text": "pending and then when those six complete the next six will start you get like stagger diagram same thing this is",
    "start": "2813480",
    "end": "2818800"
  },
  {
    "text": "exactly the same thing but we're talking about you writing memory out to a socket and it actually being written to the",
    "start": "2818800",
    "end": "2824640"
  },
  {
    "text": "socket cuz there's a slight of hand going on here so we light to you when you call response. body. WR async okay",
    "start": "2824640",
    "end": "2832880"
  },
  {
    "text": "CU it's IO right so it's supposed to be async that's what we've been drilling into you all since net 4 and more so",
    "start": "2832880",
    "end": "2838079"
  },
  {
    "text": "with net 45 we lie to you a little bit cuz it's faster if we",
    "start": "2838079",
    "end": "2844000"
  },
  {
    "text": "effectively it's not nagling it's effectively it is kind of but we do it asynchronously yes L it's",
    "start": "2844000",
    "end": "2852000"
  },
  {
    "text": "yeah is yeah let me just explain we'll see if it makes sense okay so the red is",
    "start": "2852040",
    "end": "2857680"
  },
  {
    "text": "when you call right all right so you're calling right and you give us 16 kiloby of strings your razor page calls right",
    "start": "2857680",
    "end": "2863359"
  },
  {
    "text": "ultimately right you may not call right but you type some razor and that calls right the yellow is the task that we",
    "start": "2863359",
    "end": "2870480"
  },
  {
    "text": "give back to you as a result of calling right async okay so that represents an outstanding operation",
    "start": "2870480",
    "end": "2877400"
  },
  {
    "text": "and left to right is time okay so we say yeah you're fine you're done so this one is marked as completed right it's",
    "start": "2877400",
    "end": "2882839"
  },
  {
    "text": "finished and it's in quotes because it isn't really we told you it was completed what we did is we stole the",
    "start": "2882839",
    "end": "2888920"
  },
  {
    "text": "data that you gave us and we shoved it in memory and they said and then we weighed a little a little while just a",
    "start": "2888920",
    "end": "2894599"
  },
  {
    "text": "little bit a little bit and then you can see here that we actually then say libuv",
    "start": "2894599",
    "end": "2899839"
  },
  {
    "text": "we have data remember that Pub sub thing it works on the way out as well libuv we got data for you oh so you're Li V right",
    "start": "2899839",
    "end": "2906359"
  },
  {
    "text": "no I was WV before so you're the app okay and now you're throwing data to me 16k hey and then I say I'm done then I",
    "start": "2906359",
    "end": "2913559"
  },
  {
    "text": "turn around I go I'm not really done quick quick quick quick wait so you're the app what no I'm I'm riding out I'm",
    "start": "2913559",
    "end": "2921240"
  },
  {
    "text": "oh you're okay app is like giving me stuff and I'm like crap stop and I'm telling you that yeah I'm done give me",
    "start": "2921240",
    "end": "2927280"
  },
  {
    "text": "more data and I'm like not really not really complete complete and that keeps going that's the first four calls cuz we",
    "start": "2927280",
    "end": "2933160"
  },
  {
    "text": "have a buffer of about 32 kiloby we'll we'll let that go on all right until you call right async one more time",
    "start": "2933160",
    "end": "2942160"
  },
  {
    "text": "and then I go I can't keep up I'm done sorry and I give you back and I give you back a task that is is marked incomplete",
    "start": "2942160",
    "end": "2949400"
  },
  {
    "text": "the orange one I say look you're giving me too much data I have to wait please stop app stop pleas and then you sit",
    "start": "2949400",
    "end": "2954839"
  },
  {
    "text": "there and go please if you're being well well well behaved if you call await if",
    "start": "2954839",
    "end": "2961200"
  },
  {
    "text": "you just call right async without awaiting it and ignore the compiler when it screams at you like go wait your call",
    "start": "2961200",
    "end": "2966799"
  },
  {
    "text": "do that please then you'll just blow memory up right forever cuz that clutch gets broken that safety mechanism goes",
    "start": "2966799",
    "end": "2972760"
  },
  {
    "text": "away all right so now I've given you a task I go right I'm done and then I go",
    "start": "2972760",
    "end": "2978040"
  },
  {
    "text": "done tell you I'm done and I sit here and then you give me the next call that's this one down here right yep and",
    "start": "2978040",
    "end": "2984359"
  },
  {
    "text": "same thing happens over and over and over again okay so that's how we write data out to the client it's decoupled",
    "start": "2984359",
    "end": "2989480"
  },
  {
    "text": "from you calling right and that's called right behind yep right I think node does the same thing it does it does right",
    "start": "2989480",
    "end": "2996400"
  },
  {
    "text": "that limit I think it's just completely arbitrary and you can't change it you can't change it so don't ask maybe in",
    "start": "2996400",
    "end": "3001480"
  },
  {
    "text": "the future we'll make it compar we'll make it you know plugable or not don't know why this slide is here",
    "start": "3001480",
    "end": "3007319"
  },
  {
    "text": "but the Benchmark pip planes oh The Benchmark does pipeline so I did mention before that this is a lot of this is",
    "start": "3007319",
    "end": "3012960"
  },
  {
    "text": "very worthy when you're doing benchmarking so every browser on the planet doesn't do this but HTP requires",
    "start": "3012960",
    "end": "3019200"
  },
  {
    "text": "that you support it and so what it means is that if I am a client talking to a server I get one socket one connection",
    "start": "3019200",
    "end": "3025000"
  },
  {
    "text": "right let's just focus on one let's not worry about the six parallel or anything like that one and then over that connection I send you a request and then",
    "start": "3025000",
    "end": "3031920"
  },
  {
    "text": "I wait until you send me the response yep and then then when you've sent me the response I send you another request and",
    "start": "3031920",
    "end": "3038119"
  },
  {
    "text": "it just ping pongs back like this that's without pipelining pipelining says I'm going to give you three requests and",
    "start": "3038119",
    "end": "3045440"
  },
  {
    "text": "then I will wait this and then you agree to give me back three responses in order in order yep and then once I've received",
    "start": "3045440",
    "end": "3052240"
  },
  {
    "text": "those three I'll send you another three requests or two or 16 whatever it is right and how many that is is What's",
    "start": "3052240",
    "end": "3057520"
  },
  {
    "text": "called the pipelining depth now browsers don't do pipeline I think Opera had one build where they had an experimental",
    "start": "3057520",
    "end": "3063720"
  },
  {
    "text": "version of pipelining and they turned it off cuz all the servers in the world broke um but technically to support hdp",
    "start": "3063720",
    "end": "3070880"
  },
  {
    "text": "you have to support hp11 requires that you support pipelining and the tech and power plain Tex Benchmark uses",
    "start": "3070880",
    "end": "3076359"
  },
  {
    "text": "pipelining it's the only one that does in their full Benchmark Suite because that Benchmark is designed to test how",
    "start": "3076359",
    "end": "3082160"
  },
  {
    "text": "efficient is your server at reading and writing HTTP we don't care about being",
    "start": "3082160",
    "end": "3087200"
  },
  {
    "text": "nice and waiting for you we're going to give you 16 requests at a time and you better be fast enough to deal with it",
    "start": "3087200",
    "end": "3092280"
  },
  {
    "text": "right that's why the numbers on the pl Tex Benchmark are so much higher than the next simplest Benchmark which is the",
    "start": "3092280",
    "end": "3097440"
  },
  {
    "text": "Jason Benchmark because it doesn't pipeline so that thing we talked about before where we're basically doing a while loop on the same thread on the",
    "start": "3097440",
    "end": "3103720"
  },
  {
    "text": "same thread and we just keep reading from memory as it's being asynchronously piped in this is why that matters when",
    "start": "3103720",
    "end": "3109920"
  },
  {
    "text": "you have scenarios where data is coming in off the request off the socket and the app is processing it while the dat",
    "start": "3109920",
    "end": "3116839"
  },
  {
    "text": "still coming in pipelining is a great example where that happens now if you're doing large uploads it also happens you have a large request you can start",
    "start": "3116839",
    "end": "3123440"
  },
  {
    "text": "reading the body while the body is still being streamed by the client okay if you write the right code and so you'll",
    "start": "3123440",
    "end": "3129319"
  },
  {
    "text": "you'll get the same benefit if you're doing things like file upload all right all right how do we coordinate the Libby",
    "start": "3129319",
    "end": "3135720"
  },
  {
    "start": "3132000",
    "end": "3194000"
  },
  {
    "text": "V thread and the application thread with magic and with smarts people who are smarter than us so libuv is very",
    "start": "3135720",
    "end": "3142240"
  },
  {
    "text": "specific about it structures libuv you have to run all the code on the UV thread so so we have a bunch of threads",
    "start": "3142240",
    "end": "3147640"
  },
  {
    "text": "in system one per core by default well I guess one per half number of cores because that was faster for some reason",
    "start": "3147640",
    "end": "3152880"
  },
  {
    "text": "I think like default to mod 16 / two what I don't know no I think it's half",
    "start": "3152880",
    "end": "3158880"
  },
  {
    "text": "number it's not half it's it's half the max the max of 16 divided by six yes",
    "start": "3158880",
    "end": "3163960"
  },
  {
    "text": "there's some threads that run the you can't change that number that one is configurable you can configure that yeah",
    "start": "3163960",
    "end": "3169760"
  },
  {
    "text": "um and to do anything or write or read you have to be on that thread so when application code calls right a sync from",
    "start": "3169760",
    "end": "3175839"
  },
  {
    "text": "a pool thread you have to actually hop threads from the main thread it's just like dispatch in WPF yeah right it's",
    "start": "3175839",
    "end": "3182799"
  },
  {
    "text": "just like getting onto the UI thread the UI thread libuv is the UI thre U thread and everything is your background worker",
    "start": "3182799",
    "end": "3188680"
  },
  {
    "text": "you have to dispatch back P some work right do right and then that happens yeah so we have a bunch of things to make that easier in our in our stack we",
    "start": "3188680",
    "end": "3194680"
  },
  {
    "start": "3194000",
    "end": "3277000"
  },
  {
    "text": "PST to our threads whenever you do right early we use all these crazy types like I mean you've all used a lock statement right but the monitor. try enter to do",
    "start": "3194680",
    "end": "3201079"
  },
  {
    "text": "stuff and blah blah blah blah blah and if it fails we do more stuff work item on the background to this blocks um same",
    "start": "3201079",
    "end": "3207839"
  },
  {
    "text": "with memory blocks when we finish using a memory block obviously we have to give it back to the pool and we do try and do that in a very safe fashion we have",
    "start": "3207839",
    "end": "3213240"
  },
  {
    "text": "checks in our code so that if we if anything ever gets finalized rather than getting returned to the block we crash",
    "start": "3213240",
    "end": "3219680"
  },
  {
    "text": "the server when it's in debug builds I think so we so I don't think we do that in the release build right no no I mean",
    "start": "3219680",
    "end": "3226000"
  },
  {
    "text": "no we don't we might accidentally be pretty funny no no we so bad no um so when we run it with a debug build we can",
    "start": "3226000",
    "end": "3231839"
  },
  {
    "text": "find mistakes if we if we're actually leaking blocks all right yeah don't block the libu V thread so this this",
    "start": "3231839",
    "end": "3238319"
  },
  {
    "text": "arit thought about we did we thought about running your code on the UV thread node node runs your code on the libu V",
    "start": "3238319",
    "end": "3243440"
  },
  {
    "text": "thread but nothing is synchronous in node most things aren't synchronous in node most things aren't synchronous in node your code might be synchronous we",
    "start": "3243440",
    "end": "3249559"
  },
  {
    "text": "thought about doing this and then we thought net people made like do. weight",
    "start": "3249559",
    "end": "3254839"
  },
  {
    "text": "and then the server's dead the entire server is dead the entire server the entire server is dead the ENT like not",
    "start": "3254839",
    "end": "3260960"
  },
  {
    "text": "just your thread the entire server is dead not that request no more request the whole server right that's how bad it is so we code on threadpool thread and",
    "start": "3260960",
    "end": "3267520"
  },
  {
    "text": "we post work to the UV thread on our Cadence not yeah control by you so we do the work to make sure that Li UV thread",
    "start": "3267520",
    "end": "3273160"
  },
  {
    "text": "is never blocked you don't have to worry about it but we did contemplate both designs and we chose this one all right we've only about 5 minutes left so let's",
    "start": "3273160",
    "end": "3279480"
  },
  {
    "start": "3277000",
    "end": "3290000"
  },
  {
    "text": "run through this one cuz this one's pretty crazy quickly finding known beheaders from bites this is the case",
    "start": "3279480",
    "end": "3285040"
  },
  {
    "text": "comparison oh you want to show some code yeah show some code do that let's show some Li we we do a lot of crazy stuff to",
    "start": "3285040",
    "end": "3290680"
  },
  {
    "start": "3290000",
    "end": "3600000"
  },
  {
    "text": "generate known header fields oh my God my computer's like",
    "start": "3290680",
    "end": "3299359"
  },
  {
    "text": "dead I have to log in all",
    "start": "3301359",
    "end": "3307400"
  },
  {
    "text": "right no Mass oh there we go there we go all right is that good size beautiful",
    "start": "3307400",
    "end": "3313599"
  },
  {
    "text": "all right time to burn some brains all right so we saw in Damian's super ghetto",
    "start": "3313599",
    "end": "3319920"
  },
  {
    "text": "server that he wrote In Win forms this morning this morning if you aset Ser you wi form server that impl features having",
    "start": "3319920",
    "end": "3327720"
  },
  {
    "text": "a feature um allocated seems stupid so let's just stash all the types",
    "start": "3327720",
    "end": "3332880"
  },
  {
    "text": "statically across the entire server because type of is super slow don't you",
    "start": "3332880",
    "end": "3338000"
  },
  {
    "text": "type of in like Pro request code because that's horrible um uh the features are actually all implemented on the same",
    "start": "3338000",
    "end": "3344400"
  },
  {
    "text": "object so we actually just assign to do this and this reset this assigns the features to this object to reset them",
    "start": "3344400",
    "end": "3350400"
  },
  {
    "text": "it's why they were before um to get this card looks very repetitive yeah so we a guy that writes",
    "start": "3350400",
    "end": "3357960"
  },
  {
    "text": "these if statements and corrects them I'm just kidding it's all called gen we don't called reg generate a lot of this",
    "start": "3357960",
    "end": "3363880"
  },
  {
    "text": "um is that yeah so you know how in C 6 you can interpolate strings this is kind",
    "start": "3363880",
    "end": "3370480"
  },
  {
    "text": "of like razor but for C so we interpolate and generate a whole bunch of stuff for known headers so this is",
    "start": "3370480",
    "end": "3376599"
  },
  {
    "text": "code that generates code this is the code that we use to generate the code in Castel that knows about headers So Meta",
    "start": "3376599",
    "end": "3383200"
  },
  {
    "text": "ones that we yeah say meta code right so here it is he's the known headers know header that we all just hardcode a bunch of headers and this generates all those",
    "start": "3383200",
    "end": "3388920"
  },
  {
    "text": "crazy masking comparison stuff right using C string interpolation it's great",
    "start": "3388920",
    "end": "3395000"
  },
  {
    "text": "yeah that's just as understandable that's great yeah so dictionaries it turns out are pretty slow I mean not for",
    "start": "3395000",
    "end": "3401760"
  },
  {
    "text": "normal use but for this so what if when you called triet value it was a field",
    "start": "3401760",
    "end": "3406839"
  },
  {
    "text": "lookup instead of being an actual like an actual Dictionary lookup cuz hashing is super slow right so like why even",
    "start": "3406839",
    "end": "3412079"
  },
  {
    "text": "bother hashing um I thought hashing was fast uhhuh for you okay not for Castro",
    "start": "3412079",
    "end": "3417520"
  },
  {
    "text": "not at a if you ask for an eneral we actually conjure up one on the fight cuz it's it's part of the contract so we",
    "start": "3417520",
    "end": "3423520"
  },
  {
    "text": "want to the contract all right more code so to know if a header value is set so the",
    "start": "3423520",
    "end": "3429280"
  },
  {
    "text": "interface for headers is a header dictionary which is a regular a regular dictionary in net that has tret value",
    "start": "3429280",
    "end": "3435559"
  },
  {
    "text": "and you know count and those kind of things but it's too slow to have a dictionary so what if we just stored the",
    "start": "3435559",
    "end": "3441000"
  },
  {
    "text": "fact that that if a header was set the bit was on and if the header was not set it was off so we stored giant long for",
    "start": "3441000",
    "end": "3446880"
  },
  {
    "text": "all the headers that are known and we just do these checks wa wait wait wait hang header set so we said before that we stored individual values as numbers",
    "start": "3446880",
    "end": "3454039"
  },
  {
    "text": "known strings you're telling me that every header that we know about is represented by a single yep it's great",
    "start": "3454039",
    "end": "3462160"
  },
  {
    "text": "what do we do with that single number we just check to see if it if the bit is so we have a bit per header that that is",
    "start": "3462160",
    "end": "3467760"
  },
  {
    "text": "for that header so catch control is one uh head connection is two etc etc etc",
    "start": "3467760",
    "end": "3475480"
  },
  {
    "text": "etc if you set a header it's a reference to this field and if you get a header same",
    "start": "3475480",
    "end": "3480960"
  },
  {
    "text": "same thing oh so we store one giant long that has all the bits set it's like a",
    "start": "3480960",
    "end": "3486839"
  },
  {
    "text": "giant array that has ones and zeros okay so for each one there's some header that we have mapped to some I see field I see",
    "start": "3486839",
    "end": "3493280"
  },
  {
    "text": "um and this fuz actually let me okay so these okay I think I do understand these turn into offsets inside that giant",
    "start": "3493280",
    "end": "3500839"
  },
  {
    "text": "thing no and then I get bits from there and I no not even close not even close",
    "start": "3500839",
    "end": "3506599"
  },
  {
    "text": "so all this does is kind of like if you if you ask for this specific header yes we know to return either the field or",
    "start": "3506599",
    "end": "3514119"
  },
  {
    "text": "not set based on if the bit is set or not I see it got it the bit for that for that header value okay this file is wait",
    "start": "3514119",
    "end": "3522680"
  },
  {
    "text": "what yeah that's better 10,000 lines of",
    "start": "3522680",
    "end": "3528799"
  },
  {
    "text": "awesome all right so let's look for the next piece of magic have you ever had to",
    "start": "3528799",
    "end": "3534039"
  },
  {
    "text": "step through this code no I think it's header values I'm kind of",
    "start": "3534039",
    "end": "3539799"
  },
  {
    "text": "impressed that you can navigate it on GI yeah actually it's pretty impressive and numbers get bigger and bigger cuz Longs",
    "start": "3539799",
    "end": "3545480"
  },
  {
    "text": "are like super long um what was that huge case statement for so so try to get value for dictionary",
    "start": "3545480",
    "end": "3553160"
  },
  {
    "text": "wouldn't it be awesome if we didn't have to look for Strings unless we knew the length of the key was one that we knew",
    "start": "3553160",
    "end": "3558520"
  },
  {
    "text": "for our known headers so for 13 we know that catch control is 13 long and content range so don't compare strengths",
    "start": "3558520",
    "end": "3565359"
  },
  {
    "text": "unless the length first that's actually faster yeah okay",
    "start": "3565359",
    "end": "3570520"
  },
  {
    "text": "probably and then you throw keut phone exception um if it's not there cuz that's what you do in",
    "start": "3570520",
    "end": "3577200"
  },
  {
    "text": "dictionaries there's another thing in here that's I swear it's in here somewhere y one more thing oh I get one",
    "start": "3577200",
    "end": "3582880"
  },
  {
    "text": "more one more and then we send a PO request what's that I have to look at the PO request then cuz the PO request",
    "start": "3582880",
    "end": "3588000"
  },
  {
    "text": "is super awesome is a new po request that oh my God that is freaking",
    "start": "3588000",
    "end": "3594000"
  },
  {
    "text": "insane that's not C there's two many asteres and x's and the",
    "start": "3594000",
    "end": "3599920"
  },
  {
    "text": "numbers dude I'm like I'm a web developer this turns out we realize that most of our output buffers we actually",
    "start": "3599920",
    "end": "3606920"
  },
  {
    "text": "copy a bunch of stuff from us so we actually allocate for all known headers one giant static bite array for",
    "start": "3606920",
    "end": "3612599"
  },
  {
    "text": "everything and then when you say response out right if a header is set we said that is section 417 in this header",
    "start": "3612599",
    "end": "3618920"
  },
  {
    "text": "byes array that's an offset yeah offset and length for each known header blit that out but it turns out we can",
    "start": "3618920",
    "end": "3625319"
  },
  {
    "text": "actually just put the constant long that represents the payload for known strings",
    "start": "3625319",
    "end": "3630520"
  },
  {
    "text": "so HTTP 1.1 like this string is this",
    "start": "3630520",
    "end": "3635559"
  },
  {
    "text": "text so so and it's 5% faster for the benchmarks so instead of copying the",
    "start": "3635559",
    "end": "3642680"
  },
  {
    "text": "btes that we pre-allocated right so for H tob1 instead of copying that to the output buffer so it can get flushed out",
    "start": "3642680",
    "end": "3648200"
  },
  {
    "text": "yep you say cast cast to that constant number which I know equals HB 1.1 yep to",
    "start": "3648200",
    "end": "3656119"
  },
  {
    "text": "a long pointer and then dreference it and then assign the value into that value it's a Move versus a copy and that",
    "start": "3656119",
    "end": "3662440"
  },
  {
    "text": "value is pointing to a space in the memory block yeah cuz why call a function when you can just assign to like memory right",
    "start": "3662440",
    "end": "3668720"
  },
  {
    "text": "there how did someone find that measuring measuring measure measure measure measure measure and then like so",
    "start": "3668720",
    "end": "3675559"
  },
  {
    "text": "there wasn't like a jet brains like a profile that said hey you should cast and unassigned this is a long pointer",
    "start": "3675559",
    "end": "3682599"
  },
  {
    "text": "that'll be 5% faster J said you're spending a bunch of time copying stuff how dare you copy",
    "start": "3682599",
    "end": "3688839"
  },
  {
    "text": "stuff okay how dare you use M Copy okay yeah that's slow but I have memory here",
    "start": "3688839",
    "end": "3695240"
  },
  {
    "text": "I need to copy it to here I thought the logical thing to do would be to call M Copy should have been casting to along",
    "start": "3695240",
    "end": "3700760"
  },
  {
    "text": "what if they're all non strings what if the strings are like fixed and never change white copy okay because it's a",
    "start": "3700760",
    "end": "3706160"
  },
  {
    "text": "string and I need to get it there to flush it out this is unreadable so it's better okay so that is it we are out of",
    "start": "3706160",
    "end": "3712079"
  },
  {
    "text": "time I hope you we've peeled the layers a little bit here and you get some appreciation for um what we didn't do",
    "start": "3712079",
    "end": "3719720"
  },
  {
    "text": "but some crazy people on our team and in the community which is the really big part about this is that Ben and Thomas",
    "start": "3719720",
    "end": "3725200"
  },
  {
    "text": "and a bunch of other guys in the community have done some amazing work on krol and continuing to we're never going to finish the number that we're looking",
    "start": "3725200",
    "end": "3731680"
  },
  {
    "text": "to hit um for RTM is 5 million requests per second on the big RTM and on the",
    "start": "3731680",
    "end": "3736839"
  },
  {
    "text": "bigon we've already hit that so in our big perf lab on the 48 the 24 core server 48 hyperthreaded um we can do",
    "start": "3736839",
    "end": "3744400"
  },
  {
    "text": "over 5 million requests per second for the plain teex Benchmark which will submit to techken power for the next",
    "start": "3744400",
    "end": "3749599"
  },
  {
    "text": "round and we're not we're not we're not satisfied NY does 8 million I think on that server so we want we're going to keep chasing and we want to get this as",
    "start": "3749599",
    "end": "3755960"
  },
  {
    "text": "fast as it as it can possibly be yeah faster so and not just krel but not just krel but MVC and Razer and EF and all",
    "start": "3755960",
    "end": "3763799"
  },
  {
    "text": "the things we're trying to make as fast as possible so I hope you appreciate that I certainly do should copy this",
    "start": "3763799",
    "end": "3768920"
  },
  {
    "text": "code and you should copy all this code into your Wind forms apps and no comments and make your button clicks lightning fast and with that I thank you",
    "start": "3768920",
    "end": "3775240"
  },
  {
    "text": "very much and we'll see you again next year buts",
    "start": "3775240",
    "end": "3781599"
  }
]