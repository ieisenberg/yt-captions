[
  {
    "text": "so this talk is called the anatomy of an exploit and the idea and what I hope",
    "start": "5490",
    "end": "11530"
  },
  {
    "text": "that you will get through this presentation is an idea of how how exploit developers think how they work",
    "start": "11530",
    "end": "19630"
  },
  {
    "text": "and realize that it's not that dissimilar from a programming job it's",
    "start": "19630",
    "end": "25660"
  },
  {
    "text": "just against a really crappy machine hopefully you'll understand what that",
    "start": "25660",
    "end": "31359"
  },
  {
    "text": "means by the end of the talk and so my name is Patricia oz you might have",
    "start": "31359",
    "end": "37270"
  },
  {
    "text": "already learned that from the keynote but yes I am a professional trainer and",
    "start": "37270",
    "end": "43660"
  },
  {
    "text": "consultant so hire me I do things you",
    "start": "43660",
    "end": "52570"
  },
  {
    "text": "know um so I'm a C++ programmer in my",
    "start": "52570",
    "end": "57760"
  },
  {
    "text": "own company we specialize in programming meets application security so if that's",
    "start": "57760",
    "end": "64480"
  },
  {
    "text": "something that's interesting then reach out before that I worked on a couple of",
    "start": "64480",
    "end": "72720"
  },
  {
    "text": "browsers my first job was at opera software where I worked on the original opera browser on Linux desktop browsers",
    "start": "72720",
    "end": "80530"
  },
  {
    "text": "so many of you maybe have used things I've made then I tried to be like a Java",
    "start": "80530",
    "end": "87160"
  },
  {
    "text": "consultant for a couple of years but it didn't stick and then I went back to C++ and embedded and worked at Cisco for",
    "start": "87160",
    "end": "94720"
  },
  {
    "text": "five years and then I was I wanted to make browser again so I went to be baldie and then last year I started off",
    "start": "94720",
    "end": "103270"
  },
  {
    "text": "on my own [Music] yeah so first I want to present you a",
    "start": "103270",
    "end": "111640"
  },
  {
    "text": "mental model and then we'll get back to this mental model in the end and so that",
    "start": "111640",
    "end": "118570"
  },
  {
    "text": "is the model of the weird machine this this model was was developed by two",
    "start": "118570",
    "end": "124330"
  },
  {
    "text": "mathematicians turned exploit developers and they've refined it over several",
    "start": "124330",
    "end": "130239"
  },
  {
    "text": "years of thinking about it and writing papers and and the goal they had was to",
    "start": "130239",
    "end": "135879"
  },
  {
    "text": "try to lend some formalism to exploit development especially coming from an academic",
    "start": "135879",
    "end": "141310"
  },
  {
    "text": "background that is is hard because exploit development has mostly been knowledge sharing but very informal a",
    "start": "141310",
    "end": "149170"
  },
  {
    "text": "lot of myths a lot of things it's difficult to learn as a discipline because there's not like necessarily a",
    "start": "149170",
    "end": "156459"
  },
  {
    "text": "lot of books unfortunately some books have been written but it doesn't really explain the the formalistic model so",
    "start": "156459",
    "end": "167950"
  },
  {
    "text": "they made a model and it goes something like this so the idea is that you have",
    "start": "167950",
    "end": "174010"
  },
  {
    "text": "some kind of program a target program so this is the program that you want to exploit the idea is that the program is",
    "start": "174010",
    "end": "181569"
  },
  {
    "text": "really a finite state machine and the states here are basically the states imagined by the programmer so if",
    "start": "181569",
    "end": "188920"
  },
  {
    "text": "something happens then I will do something or if something else happens I will do this other thing and you",
    "start": "188920",
    "end": "194500"
  },
  {
    "text": "basically in your head as a programmer have an idea of at least parts of this",
    "start": "194500",
    "end": "199959"
  },
  {
    "text": "finite state machine and you have intend intended transition so if I get this",
    "start": "199959",
    "end": "205840"
  },
  {
    "text": "from the user I should do this thing so the concept in this model of a",
    "start": "205840",
    "end": "211180"
  },
  {
    "text": "vulnerability is when you have an unintended transition so in a C++",
    "start": "211180",
    "end": "217660"
  },
  {
    "text": "program that could be and no point to dereference or an access outside of Airy",
    "start": "217660",
    "end": "223389"
  },
  {
    "text": "bounds and integer assign integer overflow any kind of thing that would cost maybe the program to crash or have",
    "start": "223389",
    "end": "231790"
  },
  {
    "text": "memory corruption now in this model this introduces what they call a weird state",
    "start": "231790",
    "end": "239410"
  },
  {
    "text": "so instead of all your intended States in your normal model you now have you",
    "start": "239410",
    "end": "245079"
  },
  {
    "text": "are in a weird state now one of the characteristics of a weird state is that it is unstable usually it will cause the",
    "start": "245079",
    "end": "252639"
  },
  {
    "text": "program to crash not maybe not immediately but at some point in the future and so one of the things that you",
    "start": "252639",
    "end": "260169"
  },
  {
    "text": "need to do as an exploit developer is try to to exploit the weird state by",
    "start": "260169",
    "end": "265960"
  },
  {
    "text": "trying to stabilize it because you don't really want the program to crash although that it that sometimes there's a goal like a and",
    "start": "265960",
    "end": "272020"
  },
  {
    "text": "and then you they call it a denial of service attack on a specific program is just to make it crash and sometimes that",
    "start": "272020",
    "end": "278500"
  },
  {
    "text": "could be useful but most of the time you want to go further than that and what",
    "start": "278500",
    "end": "284440"
  },
  {
    "text": "you then need is to make a transition to another unintended State so now you're",
    "start": "284440",
    "end": "290379"
  },
  {
    "text": "in a state machine which kind of exists next to the program the state machine",
    "start": "290379",
    "end": "295810"
  },
  {
    "text": "that was never intended by the programmer and to make transitions from one weird state to another wait state",
    "start": "295810",
    "end": "302669"
  },
  {
    "text": "you have to exploit the transitions in the program itself so when the program",
    "start": "302669",
    "end": "309940"
  },
  {
    "text": "would do a transition let's say to use use a pointer to a deleted object object",
    "start": "309940",
    "end": "317620"
  },
  {
    "text": "if you can now control the memory that that pointer points to when that pointer",
    "start": "317620",
    "end": "323500"
  },
  {
    "text": "is dereferenced then that is that is a transition in the normal program that",
    "start": "323500",
    "end": "328930"
  },
  {
    "text": "you are using in your now weird state machine and so and you can take this all",
    "start": "328930",
    "end": "337780"
  },
  {
    "text": "the way to maybe being able to execute some shell code and now you're getting to more normal programming and so we",
    "start": "337780",
    "end": "343780"
  },
  {
    "text": "will look at all of this okay so the thing that makes it weird to think about",
    "start": "343780",
    "end": "349750"
  },
  {
    "text": "as a programmer is that in exploit development very often the data that is",
    "start": "349750",
    "end": "355360"
  },
  {
    "text": "read in to memory by the program that is where your program is and it can happen",
    "start": "355360",
    "end": "361599"
  },
  {
    "text": "it could look very strange like if you have a format string bug basically what you're feeding into the program is the",
    "start": "361599",
    "end": "369250"
  },
  {
    "text": "format string to a printf or a similar function that is your program your program is % d % p % and things like",
    "start": "369250",
    "end": "377800"
  },
  {
    "text": "that it doesn't look like a programming language and also the program is fixed",
    "start": "377800",
    "end": "382810"
  },
  {
    "text": "you can't you normally change it it's compiled it's a binary you just have it there's no way to change the program",
    "start": "382810",
    "end": "388569"
  },
  {
    "text": "itself although we will look a little bit about how you could do that if the program isn't signed so what ends up",
    "start": "388569",
    "end": "396069"
  },
  {
    "text": "being your data structures is usually things you don't think about much as a programmer",
    "start": "396069",
    "end": "403139"
  },
  {
    "text": "okay so what I'm trying to say is that exploit development is programming but",
    "start": "404500",
    "end": "411910"
  },
  {
    "text": "it is programming of a really really messed up machine and and we will see",
    "start": "411910",
    "end": "418600"
  },
  {
    "text": "all the weird things you could do today so we'll start off simple so there is a",
    "start": "418600",
    "end": "429090"
  },
  {
    "text": "cwe if you would like I do a training which this is inspired by it by the way",
    "start": "429090",
    "end": "434230"
  },
  {
    "text": "so if that you find this interesting you can you can hire me cwe is a common",
    "start": "434230",
    "end": "441660"
  },
  {
    "text": "weakness enumeration and it is a way of trying to catalog vulnerabilities and",
    "start": "441660",
    "end": "448690"
  },
  {
    "text": "you can look at it and one of them is called inherently dangerous function and",
    "start": "448690",
    "end": "454900"
  },
  {
    "text": "it is around the function gets now what you will see today is that hardly",
    "start": "454900",
    "end": "460660"
  },
  {
    "text": "anybody uses gets anyone very quickly see why and so this is the program that",
    "start": "460660",
    "end": "467050"
  },
  {
    "text": "we'll be looking at today all of like this talk it's it's stolen with",
    "start": "467050",
    "end": "473080"
  },
  {
    "text": "permission from OVA and basically because it's kind of fun and it fits on a slide and so going through it very",
    "start": "473080",
    "end": "480669"
  },
  {
    "text": "quickly is on the bottom you have a main and a prince wargames missile launcher",
    "start": "480669",
    "end": "486970"
  },
  {
    "text": "version 0.1 and then it calls authenticate and launch which is the function above and then it writes",
    "start": "486970",
    "end": "495430"
  },
  {
    "text": "operation complete so the meat of the of the program is the authenticate and",
    "start": "495430",
    "end": "501280"
  },
  {
    "text": "launch which has some local variables including a stack allocated buffer and",
    "start": "501280",
    "end": "508540"
  },
  {
    "text": "then it will print out out this secret and then try to read in the response",
    "start": "508540",
    "end": "513969"
  },
  {
    "text": "into this stack allocated buffer and then it will compare what's in this buffer and if it is Joshua now this is",
    "start": "513969",
    "end": "520810"
  },
  {
    "text": "from like the movie wargames so if you seen it it kind of makes sense if you haven't seen it it doesn't really matter but you should see it okay um but anyway",
    "start": "520810",
    "end": "531070"
  },
  {
    "text": "so if the if the response is Joshua then you say allow access is true and if allow access is true",
    "start": "531070",
    "end": "537730"
  },
  {
    "text": "then you launch missiles and that the number of missiles you launched is hard-coded in the program so it's n",
    "start": "537730",
    "end": "543819"
  },
  {
    "text": "missiles and it's too so if you type Joshua it will launch two missiles if",
    "start": "543819",
    "end": "549970"
  },
  {
    "text": "not it will say access denied and exit so it doesn't do anything more than this",
    "start": "549970",
    "end": "556079"
  },
  {
    "text": "as so for this section this is the important part so we are using gets to",
    "start": "556079",
    "end": "563980"
  },
  {
    "text": "read into the stack allocated buffer and gets even compiling this program isn't",
    "start": "563980",
    "end": "570879"
  },
  {
    "text": "really easy because guests was deprecated a long time ago specifically",
    "start": "570879",
    "end": "576699"
  },
  {
    "text": "for this reason and if you try to compile it you'd not only get a warning",
    "start": "576699",
    "end": "583509"
  },
  {
    "text": "you get this one it's like warning the gets function is dangerous and should not be used now if you continue to use",
    "start": "583509",
    "end": "591819"
  },
  {
    "text": "it after this I feel like you kind of set yourself up for that experience and",
    "start": "591819",
    "end": "599859"
  },
  {
    "text": "so but but you know we can get past this all we do is still see make that you",
    "start": "599859",
    "end": "606069"
  },
  {
    "text": "know what we don't care and we don't care if you deprecated it and we're gonna use C 99 so there you go and so",
    "start": "606069",
    "end": "613809"
  },
  {
    "text": "now it compiles at least so let's try to written it so here is our program and we",
    "start": "613809",
    "end": "620859"
  },
  {
    "text": "enter David and we get access to night an operation complete okay so let's try",
    "start": "620859",
    "end": "626309"
  },
  {
    "text": "Joshua and we get access granted launching two missiles so this is awesome so then let's try an unhappy",
    "start": "626309",
    "end": "633879"
  },
  {
    "text": "scenario let's try to maybe right I don't know global thermonuclear war",
    "start": "633879",
    "end": "640329"
  },
  {
    "text": "maybe now like a little bit of an aside I was working on the programs for this",
    "start": "640329",
    "end": "648449"
  },
  {
    "text": "on a plane and that's",
    "start": "648449",
    "end": "653819"
  },
  {
    "text": "awkward it was awkward so don't do that",
    "start": "653930",
    "end": "660000"
  },
  {
    "text": "but anyway so here if we do this we get",
    "start": "660000",
    "end": "665340"
  },
  {
    "text": "buffer overflow detected and lunch terminated which really ruined our like Lee taxer thing of writing in a string",
    "start": "665340",
    "end": "672990"
  },
  {
    "text": "right so so that was unfortunate but what we do see is that we did enter an",
    "start": "672990",
    "end": "678650"
  },
  {
    "text": "unstable weird States so so we are getting to something we have already",
    "start": "678650",
    "end": "684000"
  },
  {
    "text": "exited the normal flow of the program and we've gotten to the point where we",
    "start": "684000",
    "end": "689160"
  },
  {
    "text": "can see there is a weird state here that we can provoke by writing in a string",
    "start": "689160",
    "end": "695840"
  },
  {
    "text": "okay but this problem is unfortunately",
    "start": "695840",
    "end": "701070"
  },
  {
    "text": "because Lipsy on my machine has fortified protection which really ruined",
    "start": "701070",
    "end": "708030"
  },
  {
    "text": "all my delete acts or things so but we can turn that off and so so this is how",
    "start": "708030",
    "end": "714690"
  },
  {
    "text": "you would turn that off I don't recommend that either but you know it's it's fun okay so we turn that off and",
    "start": "714690",
    "end": "722040"
  },
  {
    "text": "then we try again when we get access to nine stack smashing detected okay so we",
    "start": "722040",
    "end": "728040"
  },
  {
    "text": "got another different thing but currently it's it keeps on like wording",
    "start": "728040",
    "end": "733080"
  },
  {
    "text": "our efforts here so that was unfortunate um so what is going on uh any guesses",
    "start": "733080",
    "end": "743570"
  },
  {
    "text": "yeah it's just a canary so what does",
    "start": "745910",
    "end": "751200"
  },
  {
    "text": "that look like well this is this is a visualization of our our stack stacks are kind of weird",
    "start": "751200",
    "end": "759870"
  },
  {
    "text": "on x86 because it grows towards lower addresses and if you weren't in in the",
    "start": "759870",
    "end": "768210"
  },
  {
    "text": "previous talk then they got into that but but the problem is that you always",
    "start": "768210",
    "end": "774120"
  },
  {
    "text": "get people like saying weird things like like yeah and then the stack grows up",
    "start": "774120",
    "end": "779280"
  },
  {
    "text": "and they point down and it's just very hard to visualize but basically you",
    "start": "779280",
    "end": "784620"
  },
  {
    "text": "subtract things when it grows okay and this is important because and",
    "start": "784620",
    "end": "790820"
  },
  {
    "text": "when you write to any kind of memory you grow you write to higher addresses right",
    "start": "790820",
    "end": "797100"
  },
  {
    "text": "so when you write to a stack allocated buffer you're actually writing and notice the pointing here you're writing",
    "start": "797100",
    "end": "803850"
  },
  {
    "text": "down the stack right um so so this is an",
    "start": "803850",
    "end": "811500"
  },
  {
    "text": "issue and you had a lot of stack buffer overflow exploits which what they were",
    "start": "811500",
    "end": "817560"
  },
  {
    "text": "trying to do is that they were over writing a stack allocated array and then trying to overwrite this return address",
    "start": "817560",
    "end": "824190"
  },
  {
    "text": "on the stack and so when this function returns it would jump to whatever is in the return address um and and that was",
    "start": "824190",
    "end": "832800"
  },
  {
    "text": "like a good start to get off and running unfortunately an innovation was was made",
    "start": "832800",
    "end": "840530"
  },
  {
    "text": "to introduce what they call a stack canary or stack protection and so you",
    "start": "840530",
    "end": "846810"
  },
  {
    "text": "would insert some kind of random value here and before the compiler and in the",
    "start": "846810",
    "end": "852240"
  },
  {
    "text": "compiled code before it will do a read sorry it would check if the stock canary is",
    "start": "852240",
    "end": "858600"
  },
  {
    "text": "still intact and if it was still intact you would do the read if it wasn't still intact you with a board in the beginning",
    "start": "858600",
    "end": "865560"
  },
  {
    "text": "this was a non always so if you have an older compiler it might be off but in a",
    "start": "865560",
    "end": "871170"
  },
  {
    "text": "newer compilers is always on but it doesn't always introduce a stack canary it only does it if there is something",
    "start": "871170",
    "end": "878100"
  },
  {
    "text": "that could overflow in this function the",
    "start": "878100",
    "end": "884220"
  },
  {
    "text": "problem is this is this is ruining our fun so but you can turn it off and so",
    "start": "884220",
    "end": "890580"
  },
  {
    "text": "you know that's how you do that okay so let's try again so we turned off the stack protector let's see what happens",
    "start": "890580",
    "end": "896420"
  },
  {
    "text": "okay so we get access tonight and now we get segmentation fault it's really it's",
    "start": "896420",
    "end": "902430"
  },
  {
    "text": "really not our day okay so let's go and try to check on God bolt what is going",
    "start": "902430",
    "end": "908730"
  },
  {
    "text": "on here and if we look on that bolt in",
    "start": "908730",
    "end": "914280"
  },
  {
    "text": "debug these two local variables miss",
    "start": "914280",
    "end": "919350"
  },
  {
    "text": "and allow access our stack allocated but when you look in release they're gone",
    "start": "919350",
    "end": "928680"
  },
  {
    "text": "and of course it makes sense when you you've seen hopefully throughout this",
    "start": "928680",
    "end": "934890"
  },
  {
    "text": "conference how fabulous compilers have getting and basically there's really no reason to keep them around and missiles",
    "start": "934890",
    "end": "941220"
  },
  {
    "text": "is a constant so you can just inline it and allow access with a little bit of a fiddling of the logic you basically",
    "start": "941220",
    "end": "947580"
  },
  {
    "text": "don't need it either and so they both disappear so overwriting them on the",
    "start": "947580",
    "end": "953220"
  },
  {
    "text": "stack is not possible because they're gone there's no variable okay so but",
    "start": "953220",
    "end": "959130"
  },
  {
    "text": "let's try the debug build and see if our our theory holds like if we can overwrite these local variables on the",
    "start": "959130",
    "end": "965340"
  },
  {
    "text": "stack at least and so we do it again whoo we got access granted okay so so",
    "start": "965340",
    "end": "974150"
  },
  {
    "text": "we've at least gotten a little bit out of our weird state we managed to actually do something we got access",
    "start": "974150",
    "end": "980430"
  },
  {
    "text": "granted and we're launching a couple of missiles okay so so promising okay so we",
    "start": "980430",
    "end": "992040"
  },
  {
    "text": "got access granted and access denied so that was weird sort of way I guess but",
    "start": "992040",
    "end": "1000920"
  },
  {
    "text": "if somebody's Bulls are acting weird because they're both true and false at the same time but of course now we're in",
    "start": "1000920",
    "end": "1007850"
  },
  {
    "text": "an undefined behavior land and that's fine they're okay but Patricia says in",
    "start": "1007850",
    "end": "1017840"
  },
  {
    "text": "her training prefer C++ to C so let's make it C++ because it must be better",
    "start": "1017840",
    "end": "1023420"
  },
  {
    "text": "right okay so take away all of our weirdness all of the things we turn and",
    "start": "1023420",
    "end": "1028910"
  },
  {
    "text": "turned off let's bring it back to normal and we'll just like call it launch underscore CPP and just change the stuff",
    "start": "1028910",
    "end": "1036800"
  },
  {
    "text": "the the extension to CPP and and let's try again okay so let's try to build",
    "start": "1036800",
    "end": "1042020"
  },
  {
    "text": "this but also we have to make it CPP so so what we do is we change this one line",
    "start": "1042020",
    "end": "1048800"
  },
  {
    "text": "and now it's C++ and you can see that right there right",
    "start": "1048800",
    "end": "1056950"
  },
  {
    "text": "that's that's how we do that much better",
    "start": "1056950",
    "end": "1062320"
  },
  {
    "text": "okay so let's try to build it okay and yeah okay it's not even a warning",
    "start": "1062919",
    "end": "1071750"
  },
  {
    "text": "okay so basically this must be better right it's not even a warning here I",
    "start": "1071750",
    "end": "1077960"
  },
  {
    "text": "didn't have to turn anything off to do this is this must be fabulous okay so let's try it the happy day scenario to",
    "start": "1077960",
    "end": "1084679"
  },
  {
    "text": "make sure it works the way it used to and this looks good okay let's try the",
    "start": "1084679",
    "end": "1091820"
  },
  {
    "text": "release build and then do our fabulous exploit which is the string global",
    "start": "1091820",
    "end": "1099559"
  },
  {
    "text": "thermonuclear war and we get access to nine operation complete segmentation",
    "start": "1099559",
    "end": "1106129"
  },
  {
    "text": "fault okay I wasn't really what we were going for okay so let's try the bug bill",
    "start": "1106129",
    "end": "1113350"
  },
  {
    "text": "same string access granted launching a bazillion missiles and segmentation",
    "start": "1113350",
    "end": "1119179"
  },
  {
    "text": "fault but at least we got to launch the missiles so very happy right it's not that important and this is also something that's important to understand",
    "start": "1119179",
    "end": "1125720"
  },
  {
    "text": "with exploits is it not it's not necessarily important the quality of the",
    "start": "1125720",
    "end": "1131240"
  },
  {
    "text": "work as long as you manage to to achieve the goal so if the chief the goal was to",
    "start": "1131240",
    "end": "1137149"
  },
  {
    "text": "launch basically all of the missiles then it doesn't really matter if the program crashes afterwards sometimes it",
    "start": "1137149",
    "end": "1144950"
  },
  {
    "text": "matters if you don't want anybody to notice but if it doesn't matter it's like who cares you managed but wasn't",
    "start": "1144950",
    "end": "1152299"
  },
  {
    "text": "exactly what we were going for because",
    "start": "1152299",
    "end": "1157360"
  },
  {
    "text": "here you can okay one of the two other things that is important to understand here is that both end missiles and allow",
    "start": "1157360",
    "end": "1164539"
  },
  {
    "text": "access are being overwritten but we are also crashing and okay so let's see if",
    "start": "1164539",
    "end": "1171409"
  },
  {
    "text": "we can do something about that because we know we can control the stack variables but can we do that without",
    "start": "1171409",
    "end": "1180230"
  },
  {
    "text": "crashing so these are the ones that we we know we can control",
    "start": "1180230",
    "end": "1185240"
  },
  {
    "text": "by overwriting this buffer so let's see how right how are they being used okay",
    "start": "1185240",
    "end": "1195650"
  },
  {
    "text": "so let's let's give it a shot if we can override these overwrite these but still not hit the stack canary then we are",
    "start": "1195650",
    "end": "1202880"
  },
  {
    "text": "able to control this program so let's try a shorter string so we don't write as far on the stack okay so I'll we try",
    "start": "1202880",
    "end": "1213320"
  },
  {
    "text": "again and now we just like try like a abbc see it's easier to see in a hex",
    "start": "1213320",
    "end": "1220280"
  },
  {
    "text": "editor if you like have a like a string with repeating patterns like in in the",
    "start": "1220280",
    "end": "1226670"
  },
  {
    "text": "hacking community they really love lots of A's whereas I think bees are better because B is 42 in ASCII in hex but for",
    "start": "1226670",
    "end": "1235790"
  },
  {
    "text": "some reason they love their forty ones um anyway so but we get access granted",
    "start": "1235790",
    "end": "1242000"
  },
  {
    "text": "launching 42 missiles which is the best number and operation complete and no",
    "start": "1242000",
    "end": "1250130"
  },
  {
    "text": "crash okay so we know now that we can overwrite to stack variables and not",
    "start": "1250130",
    "end": "1257270"
  },
  {
    "text": "crash but can we control the values of those two in a predictable way well you",
    "start": "1257270",
    "end": "1264890"
  },
  {
    "text": "could probably guess since it's 42 that you know we can because n missiles is 42",
    "start": "1264890",
    "end": "1273230"
  },
  {
    "text": "and 42 is 0 x0 x2 a in hex which is the",
    "start": "1273230",
    "end": "1279470"
  },
  {
    "text": "star so you might guess that the orange star up there is the one that's giving",
    "start": "1279470",
    "end": "1284780"
  },
  {
    "text": "us the 42 and meaning that we can put in",
    "start": "1284780",
    "end": "1290750"
  },
  {
    "text": "something else and get a different",
    "start": "1290750",
    "end": "1296240"
  },
  {
    "text": "number okay so now we know that this string just changing the last character",
    "start": "1296240",
    "end": "1301790"
  },
  {
    "text": "we can change what the value of the number of missiles is okay so that's",
    "start": "1301790",
    "end": "1307520"
  },
  {
    "text": "good but can we control allow access is",
    "start": "1307520",
    "end": "1312970"
  },
  {
    "text": "there a way to oh okay so if we change that character then we",
    "start": "1312970",
    "end": "1320820"
  },
  {
    "text": "got access to nine and basically any other character in that position is",
    "start": "1320820",
    "end": "1327929"
  },
  {
    "text": "access granted so awesome so basically now we have a way to control both allow",
    "start": "1327929",
    "end": "1333330"
  },
  {
    "text": "access and the number of missiles and not crash but to be cool we need to like",
    "start": "1333330",
    "end": "1343380"
  },
  {
    "text": "automate this like make it like a little bit cooler than having to type in the terminal it's it doesn't look cool um so",
    "start": "1343380",
    "end": "1352650"
  },
  {
    "text": "then we're going to write a little C program that is going to do this for us like it's actually just going to do",
    "start": "1352650",
    "end": "1357690"
  },
  {
    "text": "exactly what we did before it's but but here it's just using making using C to",
    "start": "1357690",
    "end": "1364140"
  },
  {
    "text": "make the little struct of what is on the stack then then actually setting the values there and then writing that to",
    "start": "1364140",
    "end": "1370710"
  },
  {
    "text": "standard out and if we have that writing to standard out and then we can pipe it",
    "start": "1370710",
    "end": "1378750"
  },
  {
    "text": "straight into our program and that looks pretty cool like now we're piping our exploit into our our our program and",
    "start": "1378750",
    "end": "1385919"
  },
  {
    "text": "then now it looks like we know what we're doing right so let's try it access granted launching 42 missiles",
    "start": "1385919",
    "end": "1391320"
  },
  {
    "text": "operation complete whoo okay let's try it with the C++ program which was so much better right um hey it works works",
    "start": "1391320",
    "end": "1403380"
  },
  {
    "text": "on both C++ and C with the exact same exploit so this is awesome hmm we should",
    "start": "1403380",
    "end": "1413850"
  },
  {
    "text": "fix that C++ code right it's not okay that the C++ code was just as vulnerable as the C code and",
    "start": "1413850",
    "end": "1419970"
  },
  {
    "text": "we didn't even get a warning so at least we should like go and fix it right um so there are many ways you can fix it but",
    "start": "1419970",
    "end": "1425970"
  },
  {
    "text": "let's just say C here that you can actually set the width that is allowed to be read in I haven't seen a lot of",
    "start": "1425970",
    "end": "1432570"
  },
  {
    "text": "people do this but it's possible and so let's test that well",
    "start": "1432570",
    "end": "1442230"
  },
  {
    "text": "that's unfortunate right but now it's like we fixed the program so what are we gonna do now I was like round slide 43",
    "start": "1442230",
    "end": "1450320"
  },
  {
    "text": "okay so let's do something else let's break it again um so now let's do a",
    "start": "1450320",
    "end": "1458039"
  },
  {
    "text": "binary patch because that's also cool like how hard can it be so let's go and",
    "start": "1458039",
    "end": "1465179"
  },
  {
    "text": "look at at the binary and it turns out that this little this little bite here",
    "start": "1465179",
    "end": "1474239"
  },
  {
    "text": "sets the number of missiles this little bite here says whether allow access is",
    "start": "1474239",
    "end": "1479369"
  },
  {
    "text": "true or false so if we just overwrite one bite and another bite so that's two",
    "start": "1479369",
    "end": "1488159"
  },
  {
    "text": "bites in the program then suddenly we're",
    "start": "1488159",
    "end": "1494730"
  },
  {
    "text": "always good no matter what you write in you will always launch all of the",
    "start": "1494730",
    "end": "1502109"
  },
  {
    "text": "missiles okay but that wasn't as cool we want",
    "start": "1502109",
    "end": "1507840"
  },
  {
    "text": "something cool there okay so let's try and see if we can make like a stack buffer overflow exploit right so the",
    "start": "1507840",
    "end": "1517230"
  },
  {
    "text": "goal here is that you have some sort of target process which has in it some kind of vulnerable program so this model goes",
    "start": "1517230",
    "end": "1523710"
  },
  {
    "text": "for Linux but it's similar on other platforms as well so on Linux you have a",
    "start": "1523710",
    "end": "1530789"
  },
  {
    "text": "target process and in memory it has some kind of program there's also a system",
    "start": "1530789",
    "end": "1536249"
  },
  {
    "text": "call called xve which will replace the",
    "start": "1536249",
    "end": "1541440"
  },
  {
    "text": "program in the running process so in this case if we do X ACK ve with bin SH",
    "start": "1541440",
    "end": "1547830"
  },
  {
    "text": "then we will replace the program in the running process with a shell okay so",
    "start": "1547830",
    "end": "1555210"
  },
  {
    "text": "this is what we want to do and and if anyone has heard the term shellcode this is where that comes from it's basically",
    "start": "1555210",
    "end": "1561600"
  },
  {
    "text": "a little bit of code that will give us shell like a pound like a terminal",
    "start": "1561600",
    "end": "1568259"
  },
  {
    "text": "prompt currently they use the term shellcode much brought more broadly it could be like anything it could be",
    "start": "1568259",
    "end": "1575580"
  },
  {
    "text": "windows a typical thing would be to start up the calculator just to show that you have have the possibility of",
    "start": "1575580",
    "end": "1581669"
  },
  {
    "text": "executing code natively but we're gonna be old-school so we're going for a shell",
    "start": "1581669",
    "end": "1587489"
  },
  {
    "text": "code a code that gives you a shell so the right direction and is well the",
    "start": "1587489",
    "end": "1596279"
  },
  {
    "text": "stack grows downward and the right direction when we write goes up like we saw before but execution also goes",
    "start": "1596279",
    "end": "1606929"
  },
  {
    "text": "towards positive addresses and and that's kind of important because what we",
    "start": "1606929",
    "end": "1615690"
  },
  {
    "text": "want to do is we want to overwrite our buffer and then we want to write an address on the return which points back",
    "start": "1615690",
    "end": "1623009"
  },
  {
    "text": "into our buffer so that when this function returns from where we over are",
    "start": "1623009",
    "end": "1628649"
  },
  {
    "text": "over writing the buffer then it will jump into the code that we just wrote on the stack and then when execution jumps",
    "start": "1628649",
    "end": "1639690"
  },
  {
    "text": "to that address it will just execute inside of our buffer so that is the goal that is the theory and so this is just",
    "start": "1639690",
    "end": "1648559"
  },
  {
    "text": "like the boilerplate we're going to put everything in it's not very fancy or",
    "start": "1648559",
    "end": "1653850"
  },
  {
    "text": "very cool but if it's on a slide and so we need we need a couple of things here",
    "start": "1653850",
    "end": "1660720"
  },
  {
    "text": "first of all all the way on the top I wonder if this works up there it's the",
    "start": "1660720",
    "end": "1667109"
  },
  {
    "text": "shell code so we need some sort of shell code we haven't gotten that for then we",
    "start": "1667109",
    "end": "1674309"
  },
  {
    "text": "need some way to find the offset because if we go back here oh that's unfortunate",
    "start": "1674309",
    "end": "1679859"
  },
  {
    "text": "and we need to to find out how far away",
    "start": "1679859",
    "end": "1686730"
  },
  {
    "text": "from here is the return address so how far do we have to write before we get",
    "start": "1686730",
    "end": "1693629"
  },
  {
    "text": "here where we have to write an address and so this is the first part that we",
    "start": "1693629",
    "end": "1702570"
  },
  {
    "text": "need to figure out but we also then need to write the shell code our and the pad",
    "start": "1702570",
    "end": "1708800"
  },
  {
    "text": "to fill out the space between our shellcode and the return address where",
    "start": "1708800",
    "end": "1715340"
  },
  {
    "text": "we're actually going to overwrite but we also need the address of the buffering",
    "start": "1715340",
    "end": "1722840"
  },
  {
    "text": "memory to know what to write on the return address right so to make it a",
    "start": "1722840",
    "end": "1728000"
  },
  {
    "text": "little bit simpler for the presentation we're cheating a little bit oh sorry",
    "start": "1728000",
    "end": "1733070"
  },
  {
    "text": "here so here we have we've increased the",
    "start": "1733070",
    "end": "1738200"
  },
  {
    "text": "size of the response but for a little bit and we're also printing the address of the response buffer normally you",
    "start": "1738200",
    "end": "1744200"
  },
  {
    "text": "would use some sort of information leak to get these addresses but there's only",
    "start": "1744200",
    "end": "1752570"
  },
  {
    "text": "so much you can cram into a presentation so we'll just have to live with it um but we have a problem because every time",
    "start": "1752570",
    "end": "1759950"
  },
  {
    "text": "we run our program and all of the addresses changes and they've changed",
    "start": "1759950",
    "end": "1766760"
  },
  {
    "text": "because of something called address space layout randomization which is another mitigation against these types",
    "start": "1766760",
    "end": "1773390"
  },
  {
    "text": "of attacks by basically making stable and by removing stable addresses so",
    "start": "1773390",
    "end": "1779630"
  },
  {
    "text": "things will be loaded in different parts of memory each time you run the process so hard-coding addresses in memory is",
    "start": "1779630",
    "end": "1785390"
  },
  {
    "text": "not no longer possible so that's unfortunate but you can turn that off so",
    "start": "1785390",
    "end": "1795400"
  },
  {
    "text": "we do that okay so now now we need to figure out like how far from the",
    "start": "1795400",
    "end": "1801110"
  },
  {
    "text": "beginning of our buffer is is this return address and you can do that by",
    "start": "1801110",
    "end": "1806480"
  },
  {
    "text": "like trying and failing like a ton of times but here is much easier way to do it so there's a framework that is used a",
    "start": "1806480",
    "end": "1813740"
  },
  {
    "text": "lot by penetration testers and also by hackers of all kinds and it's called Metasploit and basically whenever",
    "start": "1813740",
    "end": "1820700"
  },
  {
    "text": "there's a new vulnerability anywhere then somebody will write a module for Metasploit and now it's scriptable in",
    "start": "1820700",
    "end": "1825710"
  },
  {
    "text": "you and you don't really have to understand how it works it's great and but it has two very simple simple",
    "start": "1825710",
    "end": "1834350"
  },
  {
    "text": "scripts which I really like one is called pattern create and one is called pattern offset and they're very",
    "start": "1834350",
    "end": "1840110"
  },
  {
    "text": "simple they're used to find eggs what we need how far away is the return from the beginning of this buffer that's",
    "start": "1840110",
    "end": "1847230"
  },
  {
    "text": "what they do so you do pattern create and it will create a non-repeating",
    "start": "1847230",
    "end": "1852560"
  },
  {
    "text": "character sequence so that you can feed it in and overwrite your buffer and then",
    "start": "1852560",
    "end": "1858660"
  },
  {
    "text": "it gives you an offset so you can feed it in a little bit of a string and it will tell you how far that little bit of",
    "start": "1858660",
    "end": "1866280"
  },
  {
    "text": "string is from the beginning of the random string so I'll show you how that",
    "start": "1866280",
    "end": "1871980"
  },
  {
    "text": "works so you do pattern create and here we're creating a pattern which is 150",
    "start": "1871980",
    "end": "1876990"
  },
  {
    "text": "characters long and then we're running our program now one thing to point out",
    "start": "1876990",
    "end": "1883770"
  },
  {
    "text": "here is another thing we're turning off anybody know what this is - z XX TAC",
    "start": "1883770",
    "end": "1892490"
  },
  {
    "text": "yeah we're making the stack executable because that's another mitigation that",
    "start": "1894440",
    "end": "1899910"
  },
  {
    "text": "is in modern operating systems today and the reason why I'm pointing out many of these things is that a lot of people are",
    "start": "1899910",
    "end": "1905670"
  },
  {
    "text": "stucked on law on old Linux distributions for example in embedded not really realizing that there are many",
    "start": "1905670",
    "end": "1912120"
  },
  {
    "text": "mitigations security mitigations in newer newer versions of all of the operating systems older versions of",
    "start": "1912120",
    "end": "1919350"
  },
  {
    "text": "Windows didn't have any of these mitigations either which makes make them really popular targets because they're",
    "start": "1919350",
    "end": "1924990"
  },
  {
    "text": "much easier to explain but anyway we turned that off because you know it",
    "start": "1924990",
    "end": "1930780"
  },
  {
    "text": "ruins the fun and I'm we try again so we're running it in gdb and the first",
    "start": "1930780",
    "end": "1937410"
  },
  {
    "text": "thing we do is that we set a breakpoint on the return on the wrecked instruction",
    "start": "1937410",
    "end": "1942590"
  },
  {
    "text": "because what we want to do is because when the RET instruction is executed it",
    "start": "1942590",
    "end": "1947910"
  },
  {
    "text": "will pop off the address on top of the stack and jump to it jump execution to that address and so",
    "start": "1947910",
    "end": "1954810"
  },
  {
    "text": "what we want to do is we want to figure out what is in what is on top of the stack when ret happens so we set the",
    "start": "1954810",
    "end": "1962280"
  },
  {
    "text": "breakpoint and we launch a program and then we feed in our string so that's the",
    "start": "1962280",
    "end": "1969540"
  },
  {
    "text": "string up there the in white you can see that it's printing off out the address of the buffer but that's just because",
    "start": "1969540",
    "end": "1975660"
  },
  {
    "text": "we're cheating here um it doesn't really matter that it's launching missiles because what we're",
    "start": "1975660",
    "end": "1981669"
  },
  {
    "text": "trying to do is figure out what is on top of the stack so we just print that okay so that's that's what's the return",
    "start": "1981669",
    "end": "1989140"
  },
  {
    "text": "right now okay that's all we need because then we can feed that into",
    "start": "1989140",
    "end": "1994179"
  },
  {
    "text": "pattern offset and it tells us ok so there's an exact match for this 136",
    "start": "1994179",
    "end": "2000809"
  },
  {
    "text": "characters into our string okay so now we know how far we need to go",
    "start": "2000809",
    "end": "2008130"
  },
  {
    "text": "so 136 that's the address of the buffer and that's the offset so then we can",
    "start": "2008130",
    "end": "2015090"
  },
  {
    "text": "feed that into the the program we saw before but we still need a shellcode we",
    "start": "2015090",
    "end": "2024390"
  },
  {
    "text": "had we didn't have a shellcode we need something to actually do the thing now I",
    "start": "2024390",
    "end": "2029520"
  },
  {
    "text": "went through the classic example of writing shellcode in my CPP Kahn talk",
    "start": "2029520",
    "end": "2036240"
  },
  {
    "text": "last year and that's this one but we'll do other ones today but first we're going to try this one so this is the one",
    "start": "2036240",
    "end": "2042570"
  },
  {
    "text": "I made in the previous talk and so we're just going to try it now if one thing",
    "start": "2042570",
    "end": "2048658"
  },
  {
    "text": "that's good to see here is that shellcode is basically just characters in in a car buffer basically and this",
    "start": "2048659",
    "end": "2056310"
  },
  {
    "text": "this structure here that you see here is how you often demonstrate shellcode so you have some sort of little mane and",
    "start": "2056310",
    "end": "2062690"
  },
  {
    "text": "that that just executes this character buffer to make sure that it does what",
    "start": "2062690",
    "end": "2069270"
  },
  {
    "text": "it's supposed to of course to do that",
    "start": "2069270",
    "end": "2074398"
  },
  {
    "text": "you need a executable stack and everything so but we're just testing to",
    "start": "2074399",
    "end": "2080638"
  },
  {
    "text": "see that it works that our little character buffer does what it's supposed to do and yes it gives us a shell prompt",
    "start": "2080639",
    "end": "2087780"
  },
  {
    "text": "so it actually managed to do X like ve on the /bin slash eyesight okay so",
    "start": "2087780",
    "end": "2093358"
  },
  {
    "text": "that's good it's a good start so we have the character buffer we need for our shellcode so then we can put together all of the",
    "start": "2093359",
    "end": "2098820"
  },
  {
    "text": "pieces we've had so far and and see if it works so now we are here we're",
    "start": "2098820",
    "end": "2108540"
  },
  {
    "text": "writing the into the file instead of piping it because now we can test it in gdb and",
    "start": "2108540",
    "end": "2114210"
  },
  {
    "text": "it's easier to debug so we write the exploit itself into a file then we start off gdb with a program and then we feed",
    "start": "2114210",
    "end": "2122700"
  },
  {
    "text": "the exploit output into our program and then we see what happens and it just",
    "start": "2122700",
    "end": "2130860"
  },
  {
    "text": "Hanks it doesn't really do anything it just hangs and turns out it's because",
    "start": "2130860",
    "end": "2137430"
  },
  {
    "text": "the string inside of our shellcode is not zero terminated and so when it tries",
    "start": "2137430",
    "end": "2142920"
  },
  {
    "text": "to read it it just continues to read on the stack and it just nothing happens okay so that was unfortunate so our",
    "start": "2142920",
    "end": "2148770"
  },
  {
    "text": "shellcode didn't really work okay that sucks okay let's try it again okay let's try and look at that part of",
    "start": "2148770",
    "end": "2156360"
  },
  {
    "text": "the shellcode so let's do it in a different way let's actually just write",
    "start": "2156360",
    "end": "2163770"
  },
  {
    "text": "the string and and end 0 terminated so",
    "start": "2163770",
    "end": "2170250"
  },
  {
    "text": "basically here we have zeroed out our ax here with the XOR and so we push our ax",
    "start": "2170250",
    "end": "2177840"
  },
  {
    "text": "to the stack so now we have a null terminator and then we take the string and it doesn't really look like the",
    "start": "2177840",
    "end": "2184110"
  },
  {
    "text": "string but if you look up here this heck this hex value is this in ASCII which is",
    "start": "2184110",
    "end": "2190290"
  },
  {
    "text": "this the other way around okay so this value here is our is slash bin slash SH",
    "start": "2190290",
    "end": "2197160"
  },
  {
    "text": "in a non readable form so we move that into our BX and then we push our BX onto",
    "start": "2197160",
    "end": "2202380"
  },
  {
    "text": "the stack and now we have a string on the stack which is null terminator okay",
    "start": "2202380",
    "end": "2208920"
  },
  {
    "text": "so we're good okay so let's try that and see if that works",
    "start": "2208920",
    "end": "2215869"
  },
  {
    "text": "okay it gives us a shell prompt so it looks promising okay so we put it back into the exploit that we had before and",
    "start": "2221700",
    "end": "2227849"
  },
  {
    "text": "actually try to feed it to our program and see what happens and it looks",
    "start": "2227849",
    "end": "2235829"
  },
  {
    "text": "promising like right here it says like process something something is executing a new",
    "start": "2235829",
    "end": "2241260"
  },
  {
    "text": "program /bin - is that bin - is because on my system slash bin slash SH is a",
    "start": "2241260",
    "end": "2247740"
  },
  {
    "text": "symlink - slash bin - but right after it just says it exited normally which sucks",
    "start": "2247740",
    "end": "2255510"
  },
  {
    "text": "because where's my shell prompt this is not like this is not what I was going for okay so fine let's go and have a",
    "start": "2255510",
    "end": "2263520"
  },
  {
    "text": "look what's going on here it kind of did kind of something that it",
    "start": "2263520",
    "end": "2271740"
  },
  {
    "text": "like it like it looked promising because it started in right but then it exited and that really sucks so let's look at s",
    "start": "2271740",
    "end": "2280170"
  },
  {
    "text": "trace try to figure out if it's actually trying to start my program and what happens after maybe we can find some",
    "start": "2280170",
    "end": "2286530"
  },
  {
    "text": "errors in the system calls um and so we write all of all of the all of the",
    "start": "2286530",
    "end": "2293670"
  },
  {
    "text": "system call last trace log to a file what you can see here and then we run",
    "start": "2293670",
    "end": "2301260"
  },
  {
    "text": "through again and we have a look at the log and what we find in the log is that",
    "start": "2301260",
    "end": "2308160"
  },
  {
    "text": "there is some Ino TTT why inappropriate",
    "start": "2308160",
    "end": "2314280"
  },
  {
    "text": "eye octal for device okay so something is wrong with TTT Y we don't really know",
    "start": "2314280",
    "end": "2320099"
  },
  {
    "text": "what's wrong because it's really hard to debug at this point and so we're like okay so it's just kinda I don't know",
    "start": "2320099",
    "end": "2325680"
  },
  {
    "text": "okay there's Google that's what we do right okay let's go Google and then we find some stuff and we're digging",
    "start": "2325680",
    "end": "2331829"
  },
  {
    "text": "through things and we're like okay so it looks like maybe the fact that we are already reading from the terminal is",
    "start": "2331829",
    "end": "2339740"
  },
  {
    "text": "messing up the fact of starting up a new terminal because the new terminal also needs to read from standard in and so",
    "start": "2339740",
    "end": "2346650"
  },
  {
    "text": "the whole thing kind of get messed up and we're kind of vague on the idea but let's try another idea okay so we'll do",
    "start": "2346650",
    "end": "2354690"
  },
  {
    "text": "a number three we're gonna try to close standard in and then reopen titty to",
    "start": "2354690",
    "end": "2360940"
  },
  {
    "text": "work just to see if it works okay so now we're going to follow and this is the",
    "start": "2360940",
    "end": "2366280"
  },
  {
    "text": "same same methodology I explained in my my talk is CPP con we're gonna write C",
    "start": "2366280",
    "end": "2372340"
  },
  {
    "text": "code for the shell code we're gonna compile it we're gonna write inline assembly basically inspired by a",
    "start": "2372340",
    "end": "2377890"
  },
  {
    "text": "compiled program and then we're gonna put those characters in the car buffer and then we're going to try to execute",
    "start": "2377890",
    "end": "2386290"
  },
  {
    "text": "it okay so let's see what the C code looks like basically we are going to",
    "start": "2386290",
    "end": "2394410"
  },
  {
    "text": "close the zero file descriptor open TTY then this is our our our V and this is",
    "start": "2394410",
    "end": "2404410"
  },
  {
    "text": "our V zero here and we put our V here and this is N and we can pass null for that okay so this is the smallest",
    "start": "2404410",
    "end": "2411160"
  },
  {
    "text": "program and we hope it's going to work but it's easy to test because we can just compile it and run it and see right",
    "start": "2411160",
    "end": "2418020"
  },
  {
    "text": "so we build it statically and and here I'm also taking away the stack protector",
    "start": "2418020",
    "end": "2424210"
  },
  {
    "text": "but that's basically because it's just noise um but we're building aesthetically because we want to make",
    "start": "2424210",
    "end": "2429790"
  },
  {
    "text": "sure that we have all of the code in this one binary so we can have a look at what it looks like and and when we run",
    "start": "2429790",
    "end": "2437290"
  },
  {
    "text": "it we get the shell prompt okay so the code works and if we do ldd on it it's a",
    "start": "2437290",
    "end": "2445390"
  },
  {
    "text": "static binary okay so that works so let's go and look at the the assembly so",
    "start": "2445390",
    "end": "2452500"
  },
  {
    "text": "we do object dump on our binary and we have a little bit of a look and okay",
    "start": "2452500",
    "end": "2458200"
  },
  {
    "text": "there looks like there are some some calls here they're not necessarily obvious that that like first of all like",
    "start": "2458200",
    "end": "2464710"
  },
  {
    "text": "underscore underscore close would be called for clothes okay that makes sense but it was necessarily obvious that it",
    "start": "2464710",
    "end": "2470830"
  },
  {
    "text": "was under underscore Lib C underscore open that would be called for open but ex actly it also looks normal so what",
    "start": "2470830",
    "end": "2478840"
  },
  {
    "text": "we're trying to figure out here is what are the system calls involved because now we have to write the assembly and so",
    "start": "2478840",
    "end": "2487270"
  },
  {
    "text": "we're using the exemplary furs that we've compiled now as inspiration for raiding our new",
    "start": "2487270",
    "end": "2493330"
  },
  {
    "text": "assembly and and then we go on Google the syscalls involved and that's his",
    "start": "2493330",
    "end": "2498520"
  },
  {
    "text": "closest exit via insist open at and we figure out what the calling convention",
    "start": "2498520",
    "end": "2505390"
  },
  {
    "text": "for these are so if you were in in the previous talk by a can often and then he",
    "start": "2505390",
    "end": "2511750"
  },
  {
    "text": "talked a little bit about calling conventions and the calling convention on Linux 64-bit looks like this for these functions so here it just",
    "start": "2511750",
    "end": "2518320"
  },
  {
    "text": "basically says if you're calling this system call over here then you have to",
    "start": "2518320",
    "end": "2523450"
  },
  {
    "text": "put the file descriptor in RDI if you call extract ve then you have a file",
    "start": "2523450",
    "end": "2530080"
  },
  {
    "text": "name pointer that goes into our di the pointer to our tree goes in our si and blah blah blah and so on so what we need",
    "start": "2530080",
    "end": "2537130"
  },
  {
    "text": "to do is actually before we do the system call we have to set up all of the right values and all the right registers",
    "start": "2537130",
    "end": "2542880"
  },
  {
    "text": "and once we do that we just call sis call and it will just go and pick up all of the all of the parameters in the",
    "start": "2542880",
    "end": "2550630"
  },
  {
    "text": "right registers and that's basically how we are going to do this over here you",
    "start": "2550630",
    "end": "2556330"
  },
  {
    "text": "have the system call number so for close it's three four X like ve is 59 which is",
    "start": "2556330",
    "end": "2562690"
  },
  {
    "text": "3b in hex and for open it is 257 which is 101 in hex",
    "start": "2562690",
    "end": "2569430"
  },
  {
    "text": "okay so based on this we're going to go and look more at the code so here we can",
    "start": "2569430",
    "end": "2575170"
  },
  {
    "text": "see that it's moving hex 3 into EAX and",
    "start": "2575170",
    "end": "2580630"
  },
  {
    "text": "then call cisco ok so we know we're going to need at least this and also if",
    "start": "2580630",
    "end": "2587290"
  },
  {
    "text": "we also need this unsigned int file descriptor and RDI but we're closing 0",
    "start": "2587290",
    "end": "2595090"
  },
  {
    "text": "right so it doesn't really matter all we have to make sure that it is there's a 0 in RDI so which makes this the easiest",
    "start": "2595090",
    "end": "2601390"
  },
  {
    "text": "one because all we need to do is put 3 and eix at 0 and RDI and just call cisco",
    "start": "2601390",
    "end": "2608340"
  },
  {
    "text": "ok so if we look at it it's basically this we zero out our di 0 out our ax and",
    "start": "2608340",
    "end": "2617410"
  },
  {
    "text": "then we put 3 in AO and we call cisco and this is this is inline assembly in",
    "start": "2617410",
    "end": "2629140"
  },
  {
    "text": "AT&T syntax which is like not what you had in the previous talk um any TNT",
    "start": "2629140",
    "end": "2636709"
  },
  {
    "text": "syntax is basically the default output of all Linux tools but you can also set it to two Intel and most people like",
    "start": "2636709",
    "end": "2642920"
  },
  {
    "text": "Intel better and if you want friends you probably want to do Intel I'm not too",
    "start": "2642920",
    "end": "2648799"
  },
  {
    "text": "concerned with the friends part so I'm doing 8080 um but anyway so moving on so",
    "start": "2648799",
    "end": "2653839"
  },
  {
    "text": "then we need to do open app and open at is much more complicated it is like super much more complicated it has a lot",
    "start": "2653839",
    "end": "2660709"
  },
  {
    "text": "of more parameters that we need to set but first of all we just need to look at",
    "start": "2660709",
    "end": "2666289"
  },
  {
    "text": "the cysts call number which is down here so here we have 101 moved into EAX okay",
    "start": "2666289",
    "end": "2673459"
  },
  {
    "text": "and then there's like lots of stuff and I'm not sure I want to do all of this",
    "start": "2673459",
    "end": "2680029"
  },
  {
    "text": "stuff it's probably like really super professional stuff but I don't want to have all of this stuff so let's see what",
    "start": "2680029",
    "end": "2685759"
  },
  {
    "text": "I can get away with okay so we just like try okay I don't want to put stuff in",
    "start": "2685759",
    "end": "2691969"
  },
  {
    "text": "here so can I get away with 0 for mode and 0 for flags and I don't know this I it's like it's trying and failing on",
    "start": "2691969",
    "end": "2699499"
  },
  {
    "text": "different things so I'm just trying to set things to 0 and see if I can get away with it so here I'm setting RDX",
    "start": "2699499",
    "end": "2705979"
  },
  {
    "text": "this one to 0 I'm setting if you if you want this I'm",
    "start": "2705979",
    "end": "2712069"
  },
  {
    "text": "using XOR over here because when you use XOR in the generated one we'll see it in",
    "start": "2712069",
    "end": "2717709"
  },
  {
    "text": "a second but in there's there's no 0 bytes in in the hex code for XOR and",
    "start": "2717709",
    "end": "2725239"
  },
  {
    "text": "move can introduce 0 bytes which we will see in a second but anyway so I do X or",
    "start": "2725239",
    "end": "2731630"
  },
  {
    "text": "here to zero out all of these registers which is our 10 RDX and already over",
    "start": "2731630",
    "end": "2741769"
  },
  {
    "text": "here so we're trying to just set 0 for all of those and hoping that works then",
    "start": "2741769",
    "end": "2747049"
  },
  {
    "text": "we're using the same trick that we did before oh no here for putting in the string of",
    "start": "2747049",
    "end": "2752569"
  },
  {
    "text": "that dev TTT Y by just where lucky and it's eight bytes so it still fits and we do the same trick by pushing",
    "start": "2752569",
    "end": "2760290"
  },
  {
    "text": "our ax and then pushing our little string and and that's our goal right",
    "start": "2760290",
    "end": "2768330"
  },
  {
    "text": "we're gonna try that then the next one is exactly e but we already had some code from that already so we're hoping",
    "start": "2768330",
    "end": "2775140"
  },
  {
    "text": "we can like reuse that so it's basically the same code that we saw before with",
    "start": "2775140",
    "end": "2781680"
  },
  {
    "text": "the same same concept of the string hard-coded here and so we put all of",
    "start": "2781680",
    "end": "2788490"
  },
  {
    "text": "that together as in line assembly and then we execute it and we see okay does it work okay so it works it gives us a",
    "start": "2788490",
    "end": "2795810"
  },
  {
    "text": "shell prompt so the code works okay so now we have like a care we have a in",
    "start": "2795810",
    "end": "2802410"
  },
  {
    "text": "line assembly but we don't have a character buffer okay so now we go and we look at the assembly of our inline",
    "start": "2802410",
    "end": "2809190"
  },
  {
    "text": "assembly okay which is basically what",
    "start": "2809190",
    "end": "2814830"
  },
  {
    "text": "we've already seen but one of the things that we see here is that the over here you have the bytes now these are the",
    "start": "2814830",
    "end": "2820620"
  },
  {
    "text": "ones that we're going to end up putting in our character buffer and try to execute and unfortunately right here we",
    "start": "2820620",
    "end": "2826530"
  },
  {
    "text": "have some zero bytes now zero bytes are unfortunate if you're at the street the",
    "start": "2826530",
    "end": "2831630"
  },
  {
    "text": "the street the function you're trying to exploit in your target program is some kind of string function because you are",
    "start": "2831630",
    "end": "2838770"
  },
  {
    "text": "sending in a character buffer if this is some kind of string function it will truncate and we don't want that way we",
    "start": "2838770",
    "end": "2845760"
  },
  {
    "text": "need all of our things right so we can't have any zero bytes inside of our shellcode now up until here we're",
    "start": "2845760",
    "end": "2852540"
  },
  {
    "text": "looking good but right here we get two and here you can see my X source there's",
    "start": "2852540",
    "end": "2859410"
  },
  {
    "text": "no zero bytes but here there's a move and unfortunately it didn't work out for",
    "start": "2859410",
    "end": "2865230"
  },
  {
    "text": "us and the problem is this 101 because for the other system calls here though",
    "start": "2865230",
    "end": "2872550"
  },
  {
    "text": "we'll do this one up here we're moving three into Al which is which is smaller",
    "start": "2872550",
    "end": "2881150"
  },
  {
    "text": "but here we have a number that is over 256 is 101 and so it's not going",
    "start": "2881150",
    "end": "2889290"
  },
  {
    "text": "to fit in that one bite and so we need more room and so we're using a different",
    "start": "2889290",
    "end": "2894690"
  },
  {
    "text": "instruction now that's unfortunate for",
    "start": "2894690",
    "end": "2900570"
  },
  {
    "text": "us but maybe we can fix it okay so let's go and look at the code so this is the",
    "start": "2900570",
    "end": "2906600"
  },
  {
    "text": "problem this is where we were failing in our inline assembly over here but maybe we can do it in a different way okay so",
    "start": "2906600",
    "end": "2915230"
  },
  {
    "text": "being a programmer well I have a program right so I can just put 255 in there and",
    "start": "2915230",
    "end": "2924270"
  },
  {
    "text": "ink it twice and then I have 257 an ink doesn't introduce zero bytes so you know",
    "start": "2924270",
    "end": "2929880"
  },
  {
    "text": "home-free this is good high-level great programming okay so let's try that and",
    "start": "2929880",
    "end": "2935670"
  },
  {
    "text": "we put that in there and see what happens and hey everything's fine all the VAR 0 bytes are gone",
    "start": "2935670",
    "end": "2940970"
  },
  {
    "text": "now you can see it over here it's like here it's like 255 256 257 Cisco okay",
    "start": "2940970",
    "end": "2951330"
  },
  {
    "text": "so looking at this now we have our close code up there our open call here and then I accept leak ve code there ok so",
    "start": "2951330",
    "end": "2959970"
  },
  {
    "text": "now we can use the bytes that we can see over here um and put them in a character",
    "start": "2959970",
    "end": "2966330"
  },
  {
    "text": "buffer and then try to execute that so that's our next step so it looks like",
    "start": "2966330",
    "end": "2973620"
  },
  {
    "text": "this it was basically what we saw before except what was in line assembly has now become comments um and we tried to",
    "start": "2973620",
    "end": "2980490"
  },
  {
    "text": "execute it so we have the close the open and exactly and we executed like we did in",
    "start": "2980490",
    "end": "2987570"
  },
  {
    "text": "the beginning with this little main that actually just executes this character buffer and what we want to do is to make sure it",
    "start": "2987570",
    "end": "2993270"
  },
  {
    "text": "actually works before we use it for anything else and it gives a shell so",
    "start": "2993270",
    "end": "3000890"
  },
  {
    "text": "we've gone from having a C program to having an inline assembly program to now having executing just a character array",
    "start": "3000890",
    "end": "3009160"
  },
  {
    "text": "okay so that works now let's go and see if we can do to actually use it to",
    "start": "3009160",
    "end": "3016790"
  },
  {
    "text": "exploit our program because that was the point and so let's try it ng TB again",
    "start": "3016790",
    "end": "3022730"
  },
  {
    "text": "and so we write the exploit to a file we run our our exploit II and in gdb and",
    "start": "3022730",
    "end": "3029990"
  },
  {
    "text": "then we feed it our file and we see what happens okay so far so good",
    "start": "3029990",
    "end": "3035359"
  },
  {
    "text": "access denied we don't care okay so it says exit executing new program so this is as far as we got last time so let's",
    "start": "3035359",
    "end": "3043579"
  },
  {
    "text": "see what if we're getting further this time and yay we got show it's like when",
    "start": "3043579",
    "end": "3052510"
  },
  {
    "text": "so finally finally we look a little bit like baby hackers and we can do a thing",
    "start": "3053650",
    "end": "3061119"
  },
  {
    "text": "okay but the thing is we were like doing an ng to be and everything and we want to do it like with out gdb and with the",
    "start": "3061119",
    "end": "3068119"
  },
  {
    "text": "pipe thing to make it like look cooler okay so let's see if it still works",
    "start": "3068119",
    "end": "3074019"
  },
  {
    "text": "yay it works okay so now we basically we just need to buy the hoodie and we're",
    "start": "3075550",
    "end": "3081440"
  },
  {
    "text": "like all fronting right umm because it works in debug it works in production",
    "start": "3081440",
    "end": "3087700"
  },
  {
    "text": "ship it right so but we cheated right",
    "start": "3087700",
    "end": "3094010"
  },
  {
    "text": "away cheated like throughout the entire presentation we've done so many cheats and and the and the cheating here is",
    "start": "3094010",
    "end": "3100640"
  },
  {
    "text": "basically to prove a point that a lot of the mitigations that you have in your operating systems and your compilers in",
    "start": "3100640",
    "end": "3106940"
  },
  {
    "text": "modern compilers that are on by default actually help because we turned off",
    "start": "3106940",
    "end": "3115730"
  },
  {
    "text": "address space layout randomization we made the stack executable we turned off",
    "start": "3115730",
    "end": "3122900"
  },
  {
    "text": "stack Canaries we even printed the address of the buffer all of this to",
    "start": "3122900",
    "end": "3130280"
  },
  {
    "text": "like be cool and do the thing and the thing is none of the unlike all of these",
    "start": "3130280",
    "end": "3135859"
  },
  {
    "text": "things were basically not present before even the printing of the address of the",
    "start": "3135859",
    "end": "3141859"
  },
  {
    "text": "buffer is the buffer was at a fixed address you could just like open the program look at the memory and try it",
    "start": "3141859",
    "end": "3147829"
  },
  {
    "text": "you could run it in gdb and figure out where it was in memory this was all of this wasn't there in the late 90s early",
    "start": "3147829",
    "end": "3156109"
  },
  {
    "text": "too and all of this was like stuff that got",
    "start": "3156109",
    "end": "3161569"
  },
  {
    "text": "in our way of trying to do this thing and we just turned it off and the reason why I'm saying this is because if you",
    "start": "3161569",
    "end": "3166670"
  },
  {
    "text": "google like some of these error messages that you get like number one accepted",
    "start": "3166670",
    "end": "3171770"
  },
  {
    "text": "answer on Stack Overflow is how to turn it off right so don't do that but",
    "start": "3171770",
    "end": "3181880"
  },
  {
    "text": "because of these we've seen the emergence of different types of exploitation techniques and hopefully I",
    "start": "3181880",
    "end": "3188119"
  },
  {
    "text": "will talk about that in a future talk but one of them is information leaks and then the problem is that because of",
    "start": "3188119",
    "end": "3194690"
  },
  {
    "text": "address space layout randomization you don't really know where anything is in memory and so you need to to get some",
    "start": "3194690",
    "end": "3201859"
  },
  {
    "text": "kind of addresses out of the program in different ways and so any way to leak addresses from the program so that you",
    "start": "3201859",
    "end": "3209329"
  },
  {
    "text": "know where things are goes under information leaks and most attacks today start with at least some information",
    "start": "3209329",
    "end": "3215359"
  },
  {
    "text": "leaks then you also had something called return oriented programming which became",
    "start": "3215359",
    "end": "3220970"
  },
  {
    "text": "very popular because you couldn't execute code on the stack anymore which was unfortunate but the great thing is",
    "start": "3220970",
    "end": "3227000"
  },
  {
    "text": "that there was a lot of executable code all over memory like your program and",
    "start": "3227000",
    "end": "3232430"
  },
  {
    "text": "libraries and suddenly maybe you can use the existing code that is already there",
    "start": "3232430",
    "end": "3238039"
  },
  {
    "text": "to just jump to the specific pieces that you're interested in and maybe actually",
    "start": "3238039",
    "end": "3243170"
  },
  {
    "text": "you can stitch together a program through micro pieces of existing program",
    "start": "3243170",
    "end": "3248809"
  },
  {
    "text": "in memory and a very interesting technique was created and it sounds",
    "start": "3248809",
    "end": "3254089"
  },
  {
    "text": "really complicated but what they did was in the end they just made a Python Python program which took your program",
    "start": "3254089",
    "end": "3259910"
  },
  {
    "text": "as an input what you wanted to do as another input and generated these addresses for you so you basically had a",
    "start": "3259910",
    "end": "3268359"
  },
  {
    "text": "compiler for your program that basically just generated all of these little",
    "start": "3268359",
    "end": "3274309"
  },
  {
    "text": "gadgets they're very good at making scripts but back to our drawing because",
    "start": "3274309",
    "end": "3284119"
  },
  {
    "text": "now maybe it makes more sense we have one vulnerability in our program",
    "start": "3284119",
    "end": "3289690"
  },
  {
    "text": "is the stock buffer overflow we're oh we're writing past the end of a stock allocated array and that is a",
    "start": "3289690",
    "end": "3296830"
  },
  {
    "text": "vulnerability now what can we do with that can we stabilize it can we move to",
    "start": "3296830",
    "end": "3302260"
  },
  {
    "text": "another state can we somehow get from here by using the return of a function",
    "start": "3302260",
    "end": "3311010"
  },
  {
    "text": "to get to another state where we might be able to launch our shell code and the",
    "start": "3311010",
    "end": "3319990"
  },
  {
    "text": "reason why this model is interesting is because it actually applies to many different exploitation techniques",
    "start": "3319990",
    "end": "3325480"
  },
  {
    "text": "because they basically all are around this concept of breaking out of the",
    "start": "3325480",
    "end": "3331780"
  },
  {
    "text": "mental model of the programmer and making this program do something it was",
    "start": "3331780",
    "end": "3336940"
  },
  {
    "text": "never meant to do so our programs they",
    "start": "3336940",
    "end": "3342910"
  },
  {
    "text": "need to be deterministically correct we aim for that right we aim to be not",
    "start": "3342910",
    "end": "3348340"
  },
  {
    "text": "accidentally correct but we try to be deterministically correct in general and but the good thing about exploits is",
    "start": "3348340",
    "end": "3354760"
  },
  {
    "text": "they don't need to be deterministically correct it's enough to be probabilistically correct because when",
    "start": "3354760",
    "end": "3361990"
  },
  {
    "text": "you're running an exploit you can do the same thing 50,000 times and if you actually hit one of those 50,000 times",
    "start": "3361990",
    "end": "3367990"
  },
  {
    "text": "you're home free you managed to do the thing there's nobody who's going to complain about your code quality in your",
    "start": "3367990",
    "end": "3373420"
  },
  {
    "text": "exploit there's nobody's going to go profiling this thing it's too slow it doesn't",
    "start": "3373420",
    "end": "3379180"
  },
  {
    "text": "really matter and it gives you a much wider room to operate in but even so",
    "start": "3379180",
    "end": "3387610"
  },
  {
    "text": "though exploit development is still programming it's just programming of a really shitty machine and that's my talk",
    "start": "3387610",
    "end": "3398070"
  },
  {
    "text": "thank you [Applause]",
    "start": "3398070",
    "end": "3409900"
  }
]