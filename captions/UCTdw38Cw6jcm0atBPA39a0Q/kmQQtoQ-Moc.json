[
  {
    "start": "0",
    "end": "213000"
  },
  {
    "text": "so hi welcome to my talk I'm Martin yoshinovski I am Senior software",
    "start": "6839",
    "end": "12420"
  },
  {
    "text": "engineer at PEX and today I I have talked about introduction to floating",
    "start": "12420",
    "end": "18480"
  },
  {
    "text": "boy numbers as users this we will not try to go super deep into their Theory or and so",
    "start": "18480",
    "end": "24779"
  },
  {
    "text": "on only we will try to use them so let me actually start with some disclaimers first I will be using floats",
    "start": "24779",
    "end": "32220"
  },
  {
    "text": "as short for floating Point numbers because saying folding by numbers over and over and over again",
    "start": "32220",
    "end": "37800"
  },
  {
    "text": "is not fun now I will be talking about IEEE 754 binary floats",
    "start": "37800",
    "end": "44579"
  },
  {
    "text": "Juan IE actually contains decimal floats as well two that is a bunch of other floats that exist and we will not touch",
    "start": "44579",
    "end": "51960"
  },
  {
    "text": "these because they are mostly unused unless you are one of the poor people who has to use IBM right",
    "start": "51960",
    "end": "58860"
  },
  {
    "text": "now we will not go into the forensicity details we will look at them as users we",
    "start": "58860",
    "end": "65640"
  },
  {
    "text": "will look at how to use them to accomplish our goals note you know anything else",
    "start": "65640",
    "end": "72420"
  },
  {
    "text": "and I want to start with a quick quiz so we have an assert and we say okay so",
    "start": "72420",
    "end": "79020"
  },
  {
    "text": "0.1 plus 0.2 should be include 0.3 let this pass",
    "start": "79020",
    "end": "85700"
  },
  {
    "text": "or will this fail so I have voices for fail yes this will fail we have all seen this example at",
    "start": "85740",
    "end": "92640"
  },
  {
    "text": "some point another example we have 20 million as a float plus 1 is",
    "start": "92640",
    "end": "99720"
  },
  {
    "text": "equal to 20 million will this pass or fail pass",
    "start": "99720",
    "end": "105119"
  },
  {
    "text": "okay and fail I have one two votes for fail",
    "start": "105119",
    "end": "110939"
  },
  {
    "text": "it will pass 20 million plus one is equal to 20 million this makes perfect sense right",
    "start": "110939",
    "end": "117600"
  },
  {
    "text": "so you know what let's go overboard debate let's say 20 million plus one plus one",
    "start": "117600",
    "end": "123240"
  },
  {
    "text": "is equal to one plus one plus 20 million again thus",
    "start": "123240",
    "end": "129479"
  },
  {
    "text": "is this true or is this false I have some of those two or false this",
    "start": "129479",
    "end": "136680"
  },
  {
    "text": "is flawless but 20 million plus one plus one is not the same as one plus one plus 20 million",
    "start": "136680",
    "end": "143340"
  },
  {
    "text": "so the thing is right what the hell but it makes perfect sense",
    "start": "143340",
    "end": "149520"
  },
  {
    "text": "it actually makes perfect sense if you understand how flows work right and I won't but after we leave here for",
    "start": "149520",
    "end": "156180"
  },
  {
    "text": "you to be like yeah this makes perfect sense I know why I know how so yeah this should make sense to you",
    "start": "156180",
    "end": "162599"
  },
  {
    "text": "after relief and I spoke about understanding",
    "start": "162599",
    "end": "167640"
  },
  {
    "text": "the thing is our tools don't always help us right this is simple test in cage two",
    "start": "167640",
    "end": "175019"
  },
  {
    "text": "because of this case there's no important importance that we have double that's exactly one and we say okay give",
    "start": "175019",
    "end": "181440"
  },
  {
    "text": "us the next largest uh next Double that's larger than one",
    "start": "181440",
    "end": "187800"
  },
  {
    "text": "and we ask RB is equal well they are not and we will be told",
    "start": "187800",
    "end": "193319"
  },
  {
    "text": "this failed a is equal to B has failed they are not equal this is fine",
    "start": "193319",
    "end": "198360"
  },
  {
    "text": "and we will we will be told that the numbers are 1.0 and 1.0 right the tools don't always help you I",
    "start": "198360",
    "end": "205800"
  },
  {
    "text": "am kind of responsible for this one sorry but I can change it like for its compatibility what do you do",
    "start": "205800",
    "end": "213120"
  },
  {
    "start": "213000",
    "end": "280000"
  },
  {
    "text": "well so contents what we will be actually talking about today I want to start with decimal floats I",
    "start": "213120",
    "end": "220560"
  },
  {
    "text": "said we were talking about binary float so y decimal because I might hear the ace at the",
    "start": "220560",
    "end": "226440"
  },
  {
    "text": "issue people have with understanding floats is that we go from decimal to Binary because we are used to Computing",
    "start": "226440",
    "end": "233040"
  },
  {
    "text": "stuff in decimal we do math in decimal so we have to go to binary and we are",
    "start": "233040",
    "end": "238319"
  },
  {
    "text": "used to like perfect math then we go to float we have their own rules so instead",
    "start": "238319",
    "end": "243480"
  },
  {
    "text": "of making these two steps we'll make one with that symbol float we will learn how they work why they work and then we will",
    "start": "243480",
    "end": "250379"
  },
  {
    "text": "go to Binary flows and we will figure out what actually IE tells us about floats what guarantees they give us for",
    "start": "250379",
    "end": "256979"
  },
  {
    "text": "math when we do it and then we actually learn how to compare flows because after we compute something we now need to know",
    "start": "256979",
    "end": "263759"
  },
  {
    "text": "whether for example we computed what we should have whether we have hit some threshold of notability for an event",
    "start": "263759",
    "end": "269160"
  },
  {
    "text": "that we have to trigger and finally we will learn that actually uh we'll add",
    "start": "269160",
    "end": "274740"
  },
  {
    "text": "nothing it nothing works it all breaks down at the end so why are floats weird",
    "start": "274740",
    "end": "281759"
  },
  {
    "start": "280000",
    "end": "380000"
  },
  {
    "text": "why did we get something as severe as floats because we have design constraints every decision we have",
    "start": "281759",
    "end": "287820"
  },
  {
    "text": "provided has some design constraints this is no different",
    "start": "287820",
    "end": "292340"
  },
  {
    "text": "have to be usable for computation in real numbers and real numbers are",
    "start": "294259",
    "end": "299580"
  },
  {
    "text": "annoying not only are they infinite this is easy they are uncountably infinite",
    "start": "299580",
    "end": "305100"
  },
  {
    "text": "this is hard for example ends they cover whole numbers all numbers are countable",
    "start": "305100",
    "end": "310440"
  },
  {
    "text": "Infinity this is easy right then next constraint we have",
    "start": "310440",
    "end": "316620"
  },
  {
    "text": "the floats must support both tiny and large numbers and it must support the in",
    "start": "316620",
    "end": "322139"
  },
  {
    "text": "one operation right we have this tiny number and is a huge number",
    "start": "322139",
    "end": "327960"
  },
  {
    "text": "and we must be able to multiply them together and get an answer that makes sense by the way does anyone know what these",
    "start": "327960",
    "end": "335520"
  },
  {
    "text": "numbers are okay these are from physics the first",
    "start": "335520",
    "end": "341639"
  },
  {
    "text": "one is the gravitational constant the second one is the mass of the sun so I'm quite little that you must",
    "start": "341639",
    "end": "348060"
  },
  {
    "text": "support these two in one computation you will multiply them",
    "start": "348060",
    "end": "353300"
  },
  {
    "text": "if you do physics if you need to come to something gravity you will notify these",
    "start": "353300",
    "end": "358800"
  },
  {
    "text": "two numbers and the last constrain you know the one that always makes issues we want to be",
    "start": "358800",
    "end": "365880"
  },
  {
    "text": "efficient in our there so the representation has to be fixed size computers like fixed size and has to be",
    "start": "365880",
    "end": "372360"
  },
  {
    "text": "relatively small you know we can't burn too much Hardware on just floats",
    "start": "372360",
    "end": "378780"
  },
  {
    "text": "so what do we do about this well before we go there let's do the decimal floats as I promised",
    "start": "378780",
    "end": "386460"
  },
  {
    "start": "380000",
    "end": "498000"
  },
  {
    "text": "and actually let's do something else first scientific notation I hope that we have heard all heard",
    "start": "386460",
    "end": "392220"
  },
  {
    "text": "about it but the basic idea is that you have some number m you multiplied by 10 to some exponent n",
    "start": "392220",
    "end": "399780"
  },
  {
    "text": "right this is scientific notation we all use it in school at some point",
    "start": "399780",
    "end": "404819"
  },
  {
    "text": "and then you can normalize it you can say but I want M to always be between 1 and 10. right this means that I will",
    "start": "404819",
    "end": "411240"
  },
  {
    "text": "always have only single digit before the decimal point nothing else that's all we require",
    "start": "411240",
    "end": "418220"
  },
  {
    "text": "numbers that look like this yeah we they have one useful property it's super easy to compare them like you",
    "start": "418220",
    "end": "425460"
  },
  {
    "text": "see okay this turns to the power of seven this is larger than the other two we don't have to think any more about it",
    "start": "425460",
    "end": "431880"
  },
  {
    "text": "now let's say that we want we said that we need fixed",
    "start": "431880",
    "end": "436919"
  },
  {
    "text": "length stuff for Hardware so let's say that we have to say the scientific notation has to be fixed line",
    "start": "436919",
    "end": "443400"
  },
  {
    "text": "right so we say okay so we use some x one digit for before decimal point three",
    "start": "443400",
    "end": "449759"
  },
  {
    "text": "digits after one digit from the exponent well and what about negative numbers for",
    "start": "449759",
    "end": "457020"
  },
  {
    "text": "now let's not bother let's say that minus sign is just stored separately",
    "start": "457020",
    "end": "462240"
  },
  {
    "text": "and for negative exponents the Same by the way if you need negative exponents so we represent small numbers like",
    "start": "462240",
    "end": "468780"
  },
  {
    "text": "negative exponents small numbers and that's voting for it format just in",
    "start": "468780",
    "end": "475500"
  },
  {
    "text": "decimal we just made one okay this when we look at it the first",
    "start": "475500",
    "end": "481560"
  },
  {
    "text": "part the X YY is called the mantisa these are the digits that we have of the",
    "start": "481560",
    "end": "487139"
  },
  {
    "text": "number that we know that are there and that is the exponent that's the",
    "start": "487139",
    "end": "492479"
  },
  {
    "text": "magnitude of the number of er handling okay now",
    "start": "492479",
    "end": "498000"
  },
  {
    "text": "this little format we made can represent numbers in this interval from uh -9",
    "start": "498000",
    "end": "504419"
  },
  {
    "text": "billion 999 Millions blah blah blah the important part node is here",
    "start": "504419",
    "end": "510479"
  },
  {
    "text": "is the zeros right these are zeros not nines why",
    "start": "510479",
    "end": "515760"
  },
  {
    "text": "because we already don't have the digits in the mantiser we have anything else",
    "start": "515760",
    "end": "521520"
  },
  {
    "text": "and that's that's the like whole thing about floats we have limited number of",
    "start": "521520",
    "end": "526560"
  },
  {
    "text": "digits of precision so we then just have to round this into",
    "start": "526560",
    "end": "532080"
  },
  {
    "text": "something okay now the smallest positive number we can",
    "start": "532080",
    "end": "538800"
  },
  {
    "text": "represent is this as I said before negative exponent means tiny number I am",
    "start": "538800",
    "end": "544680"
  },
  {
    "text": "not going to try to read this that's too much for me but is there another another option",
    "start": "544680",
    "end": "552899"
  },
  {
    "text": "can we have smaller number in this format",
    "start": "552899",
    "end": "558200"
  },
  {
    "text": "well the answer is uh yes maybe so we can denormalize the number we can",
    "start": "560820",
    "end": "567600"
  },
  {
    "text": "say okay but what if we say but I actually want to allow myself to have zero at the start",
    "start": "567600",
    "end": "573300"
  },
  {
    "text": "and then finally just having the one here we have just gained three orders extra",
    "start": "573300",
    "end": "579240"
  },
  {
    "text": "then we can basically get close to the zero notice that we have three more zeros here",
    "start": "579240",
    "end": "585000"
  },
  {
    "text": "now I have absolutely zero chance of you know of reading the number but the trade-off we made is that we no",
    "start": "585000",
    "end": "592800"
  },
  {
    "text": "longer have the number normalized and it's more complex to use it for us now IE flow does exactly the same",
    "start": "592800",
    "end": "600000"
  },
  {
    "text": "trade-off it says most of the time my month is ice normalized easy to work",
    "start": "600000",
    "end": "605820"
  },
  {
    "text": "with and you know you get some number in special circumstances it's denormalized",
    "start": "605820",
    "end": "611700"
  },
  {
    "text": "and you can get closer to zero at the cost of slower operations",
    "start": "611700",
    "end": "617279"
  },
  {
    "text": "I equals these the normal numbers a lot and I know that historically lots",
    "start": "617279",
    "end": "622440"
  },
  {
    "text": "of applications used to turn them off because they cost performance it's getting better",
    "start": "622440",
    "end": "627899"
  },
  {
    "text": "but the point is this gives you extra Precision around zero now another interesting thing about",
    "start": "627899",
    "end": "634620"
  },
  {
    "start": "633000",
    "end": "767000"
  },
  {
    "text": "floats we can easily see in this format is that the absolute difference between",
    "start": "634620",
    "end": "640380"
  },
  {
    "text": "two numbers that are closest to each other increases when the magnitude increases",
    "start": "640380",
    "end": "646800"
  },
  {
    "text": "but the relative difference is the same example to explain this right we have",
    "start": "646800",
    "end": "652200"
  },
  {
    "text": "these two pairs of number on the top and on the bottom and they are all like as",
    "start": "652200",
    "end": "657959"
  },
  {
    "text": "close as to each other as they can be right this is just the one the difference is one in the last place we",
    "start": "657959",
    "end": "664920"
  },
  {
    "text": "can represent and when you used anything different now in absolute numbers this is one this is",
    "start": "664920",
    "end": "672380"
  },
  {
    "text": "uh sorry 100 000. this is massively different from each",
    "start": "672380",
    "end": "677459"
  },
  {
    "text": "other but in relation to the original to the two numbers we subtract it",
    "start": "677459",
    "end": "683279"
  },
  {
    "text": "they're exactly the same that's what I mean the relative difference between two closest numbers is always the same while the absolute",
    "start": "683279",
    "end": "691680"
  },
  {
    "text": "difference just scales with the magnitude of the numbers",
    "start": "691680",
    "end": "696720"
  },
  {
    "text": "now we made this design in like three minutes so we have issues",
    "start": "696720",
    "end": "701760"
  },
  {
    "text": "right so one we have both positive and negative zero we said we store minus sign somewhere else",
    "start": "701760",
    "end": "707640"
  },
  {
    "text": "this means that we can have negative positive zero we have lots of representations for zero",
    "start": "707640",
    "end": "713339"
  },
  {
    "text": "right we have 19 actually they look like this we just set it zero and then we",
    "start": "713339",
    "end": "718740"
  },
  {
    "text": "just figure out whichever exponent we want uh this is a little bit of an issue",
    "start": "718740",
    "end": "727040"
  },
  {
    "text": "we can handle it in some ways like say there is one canonical format for zero",
    "start": "727140",
    "end": "732300"
  },
  {
    "text": "or we can just assign meanings to some of the representations like for example",
    "start": "732300",
    "end": "738540"
  },
  {
    "text": "we can say if we overflow our little float if we have numbers too big we will",
    "start": "738540",
    "end": "744240"
  },
  {
    "text": "pick say this this representation and say that's actually Infinity",
    "start": "744240",
    "end": "749700"
  },
  {
    "text": "so we can use the we can use the encoding space that we have there and you know negative zero has another 19",
    "start": "749700",
    "end": "756240"
  },
  {
    "text": "way to wrap 19 ways to represent it was late Infinities we can use it for",
    "start": "756240",
    "end": "762660"
  },
  {
    "text": "errors so on so forth and here is the part that's important",
    "start": "762660",
    "end": "768060"
  },
  {
    "start": "767000",
    "end": "836000"
  },
  {
    "text": "the decimal flows are just as weird as the binary ones we started with right we get this fun fact like 1.9",
    "start": "768060",
    "end": "776519"
  },
  {
    "text": "times 9 is not one to do the computation in decimal floats",
    "start": "776519",
    "end": "783240"
  },
  {
    "text": "okay ten thousand plus four is just ten thousand",
    "start": "783240",
    "end": "789480"
  },
  {
    "text": "ten thousand plus four plus four it's not the same as four plus four plus ten thousand",
    "start": "789480",
    "end": "795899"
  },
  {
    "text": "okay and this is where we have to build the intuition for why this happens so",
    "start": "795899",
    "end": "801779"
  },
  {
    "text": "why is this true well let's compute it first exactly",
    "start": "801779",
    "end": "807000"
  },
  {
    "text": "so we get well done ten thousand and four okay let's go to flow to decimal",
    "start": "807000",
    "end": "813540"
  },
  {
    "text": "floats it's one point zero zero zero four times standard value for",
    "start": "813540",
    "end": "819360"
  },
  {
    "text": "but we have only three digits after the single point we have to do rounding and",
    "start": "819360",
    "end": "824579"
  },
  {
    "text": "ten thousand and four is closer to ten thousand then to ten thousand ten",
    "start": "824579",
    "end": "830519"
  },
  {
    "text": "you know so rounding we have to deal with rounding and that's the issue",
    "start": "830519",
    "end": "837180"
  },
  {
    "start": "836000",
    "end": "913000"
  },
  {
    "text": "and this this applies for this as well the issue is against in the rounding right because I ideally one over nine is",
    "start": "837180",
    "end": "844620"
  },
  {
    "text": "just 0.1 repeating this is a little notation we use for the fact that we can't actually stop writing ever or we",
    "start": "844620",
    "end": "851040"
  },
  {
    "text": "will run down but we have to round down right to get to fixed number of days we",
    "start": "851040",
    "end": "857040"
  },
  {
    "text": "have to run down so we get this little number now if we multiply it we get 9.999 times",
    "start": "857040",
    "end": "864600"
  },
  {
    "text": "10 to the power of minus one minus 1. which is definitely not one",
    "start": "864600",
    "end": "869639"
  },
  {
    "text": "right these two numbers are no longer equal because we round it off the repeating",
    "start": "869639",
    "end": "874860"
  },
  {
    "text": "path because we don't have anywhere to store it and the same goes for the last example",
    "start": "874860",
    "end": "880500"
  },
  {
    "text": "right summation goes left to right so let's go through this",
    "start": "880500",
    "end": "886380"
  },
  {
    "text": "so this is what we started with now next step we added 1004. ten thousand four is",
    "start": "886380",
    "end": "892260"
  },
  {
    "text": "ten thousand we just did this and here four plus four is eight this is simple",
    "start": "892260",
    "end": "897540"
  },
  {
    "text": "Next Step well ten thousand plus four is still ten thousand this hasn't changed",
    "start": "897540",
    "end": "903180"
  },
  {
    "text": "but eight plus ten thousand pounds up we are now at ten thousand one ten and thus",
    "start": "903180",
    "end": "909300"
  },
  {
    "text": "they no longer can be equal okay so quick recap",
    "start": "909300",
    "end": "914820"
  },
  {
    "start": "913000",
    "end": "1018000"
  },
  {
    "text": "so once you are in floats your additions and multiplications are not associated",
    "start": "914820",
    "end": "920519"
  },
  {
    "text": "you can just change order in which you evaluate them this will change the results",
    "start": "920519",
    "end": "925560"
  },
  {
    "text": "then float out of here or unintuitive in every base",
    "start": "925560",
    "end": "931139"
  },
  {
    "text": "you just have to play slightly with what is weird about them I have to use one over nine to get out of base 10 numbers",
    "start": "931139",
    "end": "938760"
  },
  {
    "text": "to get the weirdness but they will always behave weirdly and of course the issue there is again",
    "start": "938760",
    "end": "946380"
  },
  {
    "text": "we want fixed its presentation for an uncountable Infinity are we all good with this",
    "start": "946380",
    "end": "953100"
  },
  {
    "text": "well then let's talk about Yeti floats so their base is to their binary right",
    "start": "953100",
    "end": "959220"
  },
  {
    "text": "uh in this is like overview of how many bits they allocate to which part Monty's",
    "start": "959220",
    "end": "965220"
  },
  {
    "text": "average exponent this is not really important to remember in most cases just I just want you to",
    "start": "965220",
    "end": "971100"
  },
  {
    "text": "notice that actually uh the number of bits in exponent grows for wider floats",
    "start": "971100",
    "end": "977220"
  },
  {
    "text": "this is not true for all formats this is for IEEE for example hex float IBM don't",
    "start": "977220",
    "end": "982860"
  },
  {
    "text": "grow these are some implications with how they behave and like so we have some yeah like the",
    "start": "982860",
    "end": "989279"
  },
  {
    "text": "smallest positive value for 32-bit float is this 1 times 10 to the power of minus",
    "start": "989279",
    "end": "995880"
  },
  {
    "text": "45 this is small enough to represent the gravitational constant with a lot of Reserve",
    "start": "995880",
    "end": "1001639"
  },
  {
    "text": "and you know the max value is this which is much larger than the mass of sun yeah",
    "start": "1001639",
    "end": "1007279"
  },
  {
    "text": "safe and when we go to the 64 bits floats so usually double in C and like",
    "start": "1007279",
    "end": "1013759"
  },
  {
    "text": "we have ridiculous range between them okay now the cool part about ie is that",
    "start": "1013759",
    "end": "1021139"
  },
  {
    "start": "1018000",
    "end": "1129000"
  },
  {
    "text": "actually for a lot of operations you can make you have guaranteed results right if you do addition subtraction",
    "start": "1021139",
    "end": "1027260"
  },
  {
    "text": "multiplication division and so on you are fine you always get the same",
    "start": "1027260",
    "end": "1033798"
  },
  {
    "text": "results from this from the same operation on the same two numbers on different computers and platforms if",
    "start": "1033799",
    "end": "1040040"
  },
  {
    "text": "they actually follow IEEE right this is always like little asterisk they must follow the standard",
    "start": "1040040",
    "end": "1046339"
  },
  {
    "text": "you know so this is good but this is different from getting",
    "start": "1046339",
    "end": "1051919"
  },
  {
    "text": "useful results repeatable correct results are not are not the same as useful okay",
    "start": "1051919",
    "end": "1058460"
  },
  {
    "text": "let's go back to this right this is not correct it's repeated",
    "start": "1058460",
    "end": "1063559"
  },
  {
    "text": "like okay sorry this is correct in floats it's repeatable in floats it's",
    "start": "1063559",
    "end": "1069380"
  },
  {
    "text": "not useful right so how do we fix this",
    "start": "1069380",
    "end": "1074660"
  },
  {
    "text": "well there is this like naive idea it actually works for in most cases right",
    "start": "1074660",
    "end": "1080179"
  },
  {
    "text": "just sum the smaller numbers first the issue is in the round off so like the small numbers add them up together you",
    "start": "1080179",
    "end": "1086120"
  },
  {
    "text": "get bigger number roundoff is less of an issue this works pretty well in a lot of cases",
    "start": "1086120",
    "end": "1092059"
  },
  {
    "text": "so you know don't knock it it's okay like to start here but I want to talk about better better",
    "start": "1092059",
    "end": "1098539"
  },
  {
    "text": "tricks which is consummation this is an algorithm you can just use made by uh",
    "start": "1098539",
    "end": "1105020"
  },
  {
    "text": "the same guy who actually came up with the IE standard and it will fix this issue it will give",
    "start": "1105020",
    "end": "1111200"
  },
  {
    "text": "you the correct results for the example 20 million plus one plus one in like both cases",
    "start": "1111200",
    "end": "1116840"
  },
  {
    "text": "okay the cost is that it I think about three",
    "start": "1116840",
    "end": "1122419"
  },
  {
    "text": "times more computational expensive to compute than just summing up the numbers naively",
    "start": "1122419",
    "end": "1129020"
  },
  {
    "text": "and there is one more issue it doesn't fix everything right if you get something like this you it's kind of",
    "start": "1129020",
    "end": "1134360"
  },
  {
    "text": "silly but it shows the problem right one plus huge number plus one nine is a huge number should be",
    "start": "1134360",
    "end": "1141260"
  },
  {
    "text": "two right but now if summation gives you zero for obvious reasons like this is so",
    "start": "1141260",
    "end": "1147260"
  },
  {
    "text": "huge that this rounds here this will do nothing and this will then",
    "start": "1147260",
    "end": "1152840"
  },
  {
    "text": "just you know subtract everything but consummation actually runs into the same issue it boils down to the fact that it",
    "start": "1152840",
    "end": "1159260"
  },
  {
    "text": "assumes that you're running some is bigger than what you add in if it isn't it will break like this",
    "start": "1159260",
    "end": "1166039"
  },
  {
    "text": "again you can fix this there are options that cost even more computations but",
    "start": "1166039",
    "end": "1171919"
  },
  {
    "text": "will give you the actual result properly by the way before I go to multiplication",
    "start": "1171919",
    "end": "1178280"
  },
  {
    "text": "what about subtraction what do we do if we need to subtract members not add them",
    "start": "1178280",
    "end": "1185620"
  },
  {
    "text": "well is subtraction different than addition of negative numbers",
    "start": "1189799",
    "end": "1195020"
  },
  {
    "text": "no so there is your answer let's go to multiplication",
    "start": "1195020",
    "end": "1200539"
  },
  {
    "start": "1197000",
    "end": "1318000"
  },
  {
    "text": "uh so here's an issue there is no good way to solve multiplication you have to do",
    "start": "1200539",
    "end": "1207500"
  },
  {
    "text": "it yourself what you need is you get your you need to somehow normalize your numbers your",
    "start": "1207500",
    "end": "1214220"
  },
  {
    "text": "domain you are working in down to one to you know these nice numbers small",
    "start": "1214220",
    "end": "1219500"
  },
  {
    "text": "numbers so we don't get run away issues with the order multiplied and multiplying away from you",
    "start": "1219500",
    "end": "1225620"
  },
  {
    "text": "and you know after you're done with the computation transform it back how depends on what you are writing I will",
    "start": "1225620",
    "end": "1232820"
  },
  {
    "text": "give you an example but like another option is to like look for different way of computing the stuff you need",
    "start": "1232820",
    "end": "1239660"
  },
  {
    "text": "and okay so example I'd like to tell you what is possible I used to do a lot of",
    "start": "1239660",
    "end": "1245660"
  },
  {
    "text": "work with probabilities now contributes are small numbers sometimes you get tiny",
    "start": "1245660",
    "end": "1251059"
  },
  {
    "text": "numbers and when you start multiplying them the magnitude of your number starts going way down very quickly you compute",
    "start": "1251059",
    "end": "1258200"
  },
  {
    "text": "100 probabilities it's zero so what did we do well you can if you multiply numbers is",
    "start": "1258200",
    "end": "1266419"
  },
  {
    "text": "the same as adding the logarithms so we took logarithms of the probabilities",
    "start": "1266419",
    "end": "1271940"
  },
  {
    "text": "this gave us not much nicer number we added them all up",
    "start": "1271940",
    "end": "1277160"
  },
  {
    "text": "and then we converted the number back to probability by taking the inverse",
    "start": "1277160",
    "end": "1282799"
  },
  {
    "text": "this is what we could do you have to do something that depends on whatever you are working on if you run into this",
    "start": "1282799",
    "end": "1290000"
  },
  {
    "text": "now this is what we have got guarantees for IE does not write any guarantees on",
    "start": "1290000",
    "end": "1295940"
  },
  {
    "text": "transcendental functions you know your signs your logarithms and so on",
    "start": "1295940",
    "end": "1301360"
  },
  {
    "text": "definition of transunction is that it can be expressed as a finite number of additions",
    "start": "1301360",
    "end": "1307760"
  },
  {
    "text": "subdirection multiplications uh so on divisions facing to power okay with the",
    "start": "1307760",
    "end": "1313400"
  },
  {
    "text": "idea there are functions that you can't really handle this way luckily",
    "start": "1313400",
    "end": "1318919"
  },
  {
    "text": "you can get implementations of something it's called correctly rounded math libraries and it sometimes even works",
    "start": "1318919",
    "end": "1326120"
  },
  {
    "text": "with okay performance I'm not gonna say good I'm gonna say okay right uh if you if you meet repeatability in",
    "start": "1326120",
    "end": "1334640"
  },
  {
    "text": "your signs cosines logarithms and so on download one of them use them",
    "start": "1334640",
    "end": "1340539"
  },
  {
    "text": "they have issues they are working progress and research projects and we",
    "start": "1340539",
    "end": "1345799"
  },
  {
    "text": "will run into issues slightly so to recap this part so basic math",
    "start": "1345799",
    "end": "1351500"
  },
  {
    "text": "operations that we are used to should be the reproducible you know must follow I.E standard must",
    "start": "1351500",
    "end": "1359000"
  },
  {
    "text": "follow it correctly blah blah blah you can reduce numerical errors in your computations use the right approach to",
    "start": "1359000",
    "end": "1366200"
  },
  {
    "text": "what you are computing and the simplest approach is always to use wider float right do you have issues",
    "start": "1366200",
    "end": "1372320"
  },
  {
    "text": "with 32-bit votes use 64-bit floats don't do anything else until you did this",
    "start": "1372320",
    "end": "1378080"
  },
  {
    "text": "now transcendentals are hard that's where the functions reproducibility is",
    "start": "1378080",
    "end": "1383299"
  },
  {
    "text": "hard and slow okay so this is a good time for questions",
    "start": "1383299",
    "end": "1390020"
  },
  {
    "text": "about this part foreign",
    "start": "1390020",
    "end": "1395120"
  },
  {
    "text": "so now we have some numbers we probably computed them correctly maybe not yes maybe not but we need to compare them",
    "start": "1399020",
    "end": "1406340"
  },
  {
    "start": "1400000",
    "end": "1467000"
  },
  {
    "text": "because that's what we often do right we need to test whether we compute them correctly and so on",
    "start": "1406340",
    "end": "1411919"
  },
  {
    "text": "so this will be fun because there are five basic ways to compare floats",
    "start": "1411919",
    "end": "1417679"
  },
  {
    "text": "you can do bitwise comparison you can do like direct comparison I don't think it has like real name to it",
    "start": "1417679",
    "end": "1425600"
  },
  {
    "text": "you can do absolute margin comparison relative Epsilon comparisons your ulp",
    "start": "1425600",
    "end": "1431360"
  },
  {
    "text": "based comparisons and all of these have some case where you want to use them",
    "start": "1431360",
    "end": "1437299"
  },
  {
    "text": "and some downsides when you shouldn't use them so you actually should know all of them",
    "start": "1437299",
    "end": "1442340"
  },
  {
    "text": "at least have some ideality exist and why it's not a bit wise comparison",
    "start": "1442340",
    "end": "1448100"
  },
  {
    "text": "so it says that the two floats are equal if they are a bit presentation is the same just like forget Air floats now",
    "start": "1448100",
    "end": "1454640"
  },
  {
    "text": "there are bit Fields compare the bit fields are done this is not the same as what happens if",
    "start": "1454640",
    "end": "1460460"
  },
  {
    "text": "you write a equals equals B in your code this is different okay",
    "start": "1460460",
    "end": "1467740"
  },
  {
    "start": "1467000",
    "end": "1503000"
  },
  {
    "text": "and under bitwise comparisons you have some fun stuff first is that minus zero and zero are",
    "start": "1468020",
    "end": "1473900"
  },
  {
    "text": "not equal this makes some sense it has some issues",
    "start": "1473900",
    "end": "1479480"
  },
  {
    "text": "and not a number this is special error value are equal but they're also not equal",
    "start": "1479480",
    "end": "1485840"
  },
  {
    "text": "because not a number has many different ways it can be represented so if you do",
    "start": "1485840",
    "end": "1491659"
  },
  {
    "text": "bitwise comparisons it's like it depends which representation you actually get",
    "start": "1491659",
    "end": "1498080"
  },
  {
    "text": "so this is the most Niche comparison like the least likely you will ever need",
    "start": "1498080",
    "end": "1503419"
  },
  {
    "start": "1503000",
    "end": "1559000"
  },
  {
    "text": "so let's talk about direct comparison this actually is what happens when you write a equals equals B",
    "start": "1503419",
    "end": "1509659"
  },
  {
    "text": "and when you use it then minus 0 and 0 are equal",
    "start": "1509659",
    "end": "1514760"
  },
  {
    "text": "okay noun is not um never the number is defined to not be equal to",
    "start": "1514760",
    "end": "1521240"
  },
  {
    "text": "anything including another not a number and it's useful rarely",
    "start": "1521240",
    "end": "1527419"
  },
  {
    "text": "only if you have a pretty much exactly the case where you have like different implementation of the same stuff and",
    "start": "1527419",
    "end": "1533539"
  },
  {
    "text": "they should give the same result because then you don't want any like um you don't want any margin or error",
    "start": "1533539",
    "end": "1541100"
  },
  {
    "text": "they should give you exactly the same stuff it's like the main uh case where you use",
    "start": "1541100",
    "end": "1546559"
  },
  {
    "text": "them but actually most often it's a mistake if you do this this is why compilers will warn you and",
    "start": "1546559",
    "end": "1552500"
  },
  {
    "text": "it's super annoying especially because you had like but in this one case I am using it correctly no warning let's fix",
    "start": "1552500",
    "end": "1559159"
  },
  {
    "start": "1559000",
    "end": "1655000"
  },
  {
    "text": "it so let's talk about absolute margin comparison it's equivalent to writing this you",
    "start": "1559159",
    "end": "1564980"
  },
  {
    "text": "subtract the two numbers you take the absolute value and you check whether it's less than margin in",
    "start": "1564980",
    "end": "1570200"
  },
  {
    "text": "other in other words you check whether the distance between the two numbers is less than some margin you have selected",
    "start": "1570200",
    "end": "1576740"
  },
  {
    "text": "previously okay now the",
    "start": "1576740",
    "end": "1582799"
  },
  {
    "text": "it has like pros and cons so the big Pro the big benefit of this it's super easy",
    "start": "1582799",
    "end": "1589400"
  },
  {
    "text": "to read about like I can give you margin 0.5 what does it mean well two numbers",
    "start": "1589400",
    "end": "1594740"
  },
  {
    "text": "are equal if they are within 0.5 of each other this is easy",
    "start": "1594740",
    "end": "1600200"
  },
  {
    "text": "like my daughter can do it probably and it does not break down around zero",
    "start": "1600200",
    "end": "1605539"
  },
  {
    "text": "right zero to zero point five this makes perfect sense this is good",
    "start": "1605539",
    "end": "1611000"
  },
  {
    "text": "issue is that actually is the same as direct comparisons for large numbers why",
    "start": "1611000",
    "end": "1617120"
  },
  {
    "text": "rounding again for last number 0.5 rounds to zero you are done there is no",
    "start": "1617120",
    "end": "1622640"
  },
  {
    "text": "margin so oh yeah by the way quick quick like",
    "start": "1622640",
    "end": "1628520"
  },
  {
    "text": "fun fact these are not actually equivalent for floats even they should be in math equivalent uh just you know",
    "start": "1628520",
    "end": "1637400"
  },
  {
    "text": "because the first one will reject into infinities",
    "start": "1637400",
    "end": "1642620"
  },
  {
    "text": "as not being similar or equal while the second one accepts infinities",
    "start": "1642620",
    "end": "1649159"
  },
  {
    "text": "whether this is correct for you in I don't know depends on what you are doing",
    "start": "1649159",
    "end": "1655279"
  },
  {
    "start": "1655000",
    "end": "1736000"
  },
  {
    "text": "so let's talk about relative margin comparison our issue previously was that for large",
    "start": "1655279",
    "end": "1660500"
  },
  {
    "text": "numbers the absolute margin just decays to direct comparison so let's fix it let's",
    "start": "1660500",
    "end": "1666919"
  },
  {
    "text": "introduce some relative margin some Epsilon that this can be different from",
    "start": "1666919",
    "end": "1673460"
  },
  {
    "text": "each other right we say okay so we take the largest number multiplied by some small factor and that's our new margin",
    "start": "1673460",
    "end": "1679880"
  },
  {
    "text": "this scales nicely with large numbers uh by the way there is actually an",
    "start": "1679880",
    "end": "1685400"
  },
  {
    "text": "alternate for alternative formulation you can also use the number of the two numbers",
    "start": "1685400",
    "end": "1690980"
  },
  {
    "text": "this behaves slightly differently that is so important uh the important part is that when you",
    "start": "1690980",
    "end": "1699020"
  },
  {
    "text": "do this it's still easy to reason about right you can say Okay 0.1 that's ten percent",
    "start": "1699020",
    "end": "1705260"
  },
  {
    "text": "so the two numbers must be within 10 percent of each other easy enough",
    "start": "1705260",
    "end": "1711380"
  },
  {
    "text": "it does not break down for large numbers it does nothing for zero",
    "start": "1711380",
    "end": "1716900"
  },
  {
    "text": "if one of the sides is zero or even just very close to zero you are like",
    "start": "1716900",
    "end": "1722059"
  },
  {
    "text": "you are again an exact comparison territory this time the issue is basically if you have zero",
    "start": "1722059",
    "end": "1727279"
  },
  {
    "text": "and you have one like then you would have to subtract 1 from the one to get to zero so there's hundred percent",
    "start": "1727279",
    "end": "1732320"
  },
  {
    "text": "margin this is why it breaks down so let's talk about ulp comparisons or",
    "start": "1732320",
    "end": "1739400"
  },
  {
    "start": "1736000",
    "end": "1808000"
  },
  {
    "text": "units in the last place basically we that is the idea that there",
    "start": "1739400",
    "end": "1747080"
  },
  {
    "text": "is distance ulp distance and it says how did how far from each other two numbers are in the",
    "start": "1747080",
    "end": "1753200"
  },
  {
    "text": "float representation how many steps we have to make to get from one to another right so",
    "start": "1753200",
    "end": "1759500"
  },
  {
    "text": "example the distance of these two numbers is zero because they are the same",
    "start": "1759500",
    "end": "1765380"
  },
  {
    "text": "now we change the digit in the last place by one so the distance between them is now one",
    "start": "1765380",
    "end": "1772159"
  },
  {
    "text": "because there is one step from one um this takes 100 steps now because we have",
    "start": "1772159",
    "end": "1778220"
  },
  {
    "text": "changed this 4 into this five okay so this is the distance",
    "start": "1778220",
    "end": "1783740"
  },
  {
    "text": "uh brief aside what's the distance between zeros they got different positive",
    "start": "1783740",
    "end": "1790220"
  },
  {
    "text": "I don't know it depends on how you define this just check with your library you are using for comparisons what they",
    "start": "1790220",
    "end": "1796700"
  },
  {
    "text": "do here if you need this now uh then the two numbers are equal if",
    "start": "1796700",
    "end": "1802640"
  },
  {
    "text": "the real predictions is less than the the step like the fixed number that you picked ahead of time",
    "start": "1802640",
    "end": "1807980"
  },
  {
    "text": "this is great because it handles both zero and large numbers gracefully you say it's within four steps okay one step",
    "start": "1807980",
    "end": "1815840"
  },
  {
    "start": "1808000",
    "end": "1871000"
  },
  {
    "text": "two step three step four step for both huge numbers and Tiny numbers the",
    "start": "1815840",
    "end": "1821120"
  },
  {
    "text": "relative distance is the same and this is actually easy to reason about numerically because I know if I",
    "start": "1821120",
    "end": "1827659"
  },
  {
    "text": "add two numbers I get at most this much error in the last place this is great",
    "start": "1827659",
    "end": "1833779"
  },
  {
    "text": "where does it fall down okay I will tell you these two numbers are within 10 ulp units what do you",
    "start": "1833779",
    "end": "1841520"
  },
  {
    "text": "actually know about the numbers nothing like there is limited amount of people",
    "start": "1841520",
    "end": "1848299"
  },
  {
    "text": "who can actually like think at this level like naturally and answers I don't",
    "start": "1848299",
    "end": "1853700"
  },
  {
    "text": "know what it means I can tell you that I am close I can tell you like what pipeline guarantees I have but I can't",
    "start": "1853700",
    "end": "1862100"
  },
  {
    "text": "ever explain this to a customer customer has no idea what this means",
    "start": "1862100",
    "end": "1868520"
  },
  {
    "text": "absolutely zero so let's recap",
    "start": "1868520",
    "end": "1873919"
  },
  {
    "start": "1871000",
    "end": "1926000"
  },
  {
    "text": "first there is no Universal approach to comparing floats that there is a lot of",
    "start": "1873919",
    "end": "1879559"
  },
  {
    "text": "them you have picked the one that's right for what you are trying to do type comparison is usually a mistake not",
    "start": "1879559",
    "end": "1886820"
  },
  {
    "text": "always but like 90 percent of time maybe more you need to under if you are using qlp",
    "start": "1886820",
    "end": "1893299"
  },
  {
    "text": "distance you need to understand what your tools actually calculate as the",
    "start": "1893299",
    "end": "1899240"
  },
  {
    "text": "distance right what do they think is the distance between negative zero and positive zero what do they think is the distance between the largest number you",
    "start": "1899240",
    "end": "1906559"
  },
  {
    "text": "can represent and infinity and so on okay",
    "start": "1906559",
    "end": "1912860"
  },
  {
    "text": "so again this is good place to ask about this part",
    "start": "1912860",
    "end": "1917919"
  },
  {
    "text": "well then let's continue I mentioned that I actually maintain H2",
    "start": "1923000",
    "end": "1929480"
  },
  {
    "start": "1926000",
    "end": "2010000"
  },
  {
    "text": "so I have a brief aside notable catch two what if you want compare two numbers there",
    "start": "1929480",
    "end": "1935539"
  },
  {
    "text": "you can use approx who here uses sketch two a couple people we reused approx",
    "start": "1935539",
    "end": "1943520"
  },
  {
    "text": "you shouldn't be using Netflix sorry this is what it looks like you say okay",
    "start": "1943520",
    "end": "1948860"
  },
  {
    "text": "something is roughly approximate to something else absolute margin comparison relative",
    "start": "1948860",
    "end": "1954860"
  },
  {
    "text": "margin comparisons and it's Legacy and you shouldn't be using it the issue is that the relative margin",
    "start": "1954860",
    "end": "1962120"
  },
  {
    "text": "comparison is like this weird not",
    "start": "1962120",
    "end": "1967220"
  },
  {
    "text": "standard comparison that's not something you should that you can really reason about",
    "start": "1967220",
    "end": "1972860"
  },
  {
    "text": "what you should be using is matches because that looks that looks like this you can say Okay I want pi to be within",
    "start": "1972860",
    "end": "1981559"
  },
  {
    "text": "some relative margin of 3.14 and then you have also with an absolute margin right if anything ulp margin",
    "start": "1981559",
    "end": "1990080"
  },
  {
    "text": "and this is what I said you need to know if you have received a library for this",
    "start": "1990080",
    "end": "1995720"
  },
  {
    "text": "so the distance between zeros is zero distance between Max and infinity is one",
    "start": "1995720",
    "end": "2001840"
  },
  {
    "text": "listen between not a number and anything is just Infinity you can't compare this",
    "start": "2001840",
    "end": "2007779"
  },
  {
    "text": "meaningfully now let's talk about limitations",
    "start": "2007779",
    "end": "2014260"
  },
  {
    "start": "2010000",
    "end": "2064000"
  },
  {
    "text": "so I already mentioned like non-ie platforms are an issue right if you",
    "start": "2014260",
    "end": "2020500"
  },
  {
    "text": "aren't on an IEEE platform you can't use guarantees from IE standard this is pretty easy and you know I don't",
    "start": "2020500",
    "end": "2027880"
  },
  {
    "text": "mean just some small micro that doesn't even have floating by the unit I mean stuff like IBM if you are using IBM by",
    "start": "2027880",
    "end": "2036039"
  },
  {
    "text": "default it uses its own floats it calls them X floating points extra decimal floating",
    "start": "2036039",
    "end": "2042700"
  },
  {
    "text": "point something like this and they actually like instead of binary digits use hex the hex digits",
    "start": "2042700",
    "end": "2048940"
  },
  {
    "text": "accelerating on digits and they do their own thing actually if you",
    "start": "2048940",
    "end": "2054099"
  },
  {
    "text": "find yourself on IBM I think you can tell it to actually use IE floats and",
    "start": "2054099",
    "end": "2060040"
  },
  {
    "text": "get back to like rest of the humanity but you know you can have issues with",
    "start": "2060040",
    "end": "2065679"
  },
  {
    "start": "2064000",
    "end": "2126000"
  },
  {
    "text": "IEEE platforms as well for example who here has ever had issues",
    "start": "2065679",
    "end": "2070898"
  },
  {
    "text": "because all Intel Intel CPUs had 80-bit",
    "start": "2070899",
    "end": "2076000"
  },
  {
    "text": "computational unit if you compile for old Intel CPU and 32-bit mode you will",
    "start": "2076000",
    "end": "2084520"
  },
  {
    "text": "you will likely generate code that uses the stack based FPU that actually",
    "start": "2084520",
    "end": "2090158"
  },
  {
    "text": "computes intermediates in 80 bits and then stores them in 64 bits so suddenly",
    "start": "2090159",
    "end": "2095740"
  },
  {
    "text": "like your computation can have different results based on whether it was",
    "start": "2095740",
    "end": "2101460"
  },
  {
    "text": "based on whether the code you got was forced to store the intermediate result",
    "start": "2101460",
    "end": "2106680"
  },
  {
    "text": "back onto the stack or not because you will have different",
    "start": "2106680",
    "end": "2111820"
  },
  {
    "text": "Precision computation and in storage this is terrible if you are like targeting Intel 32-bit",
    "start": "2111820",
    "end": "2120339"
  },
  {
    "text": "please tell it to use SSE for floats now",
    "start": "2120339",
    "end": "2126940"
  },
  {
    "start": "2126000",
    "end": "2155000"
  },
  {
    "text": "languages so lot of languages for example C plus plus and C actually like don't give you",
    "start": "2126940",
    "end": "2134200"
  },
  {
    "text": "any support for I don't know they give you support they don't give you guarantees about the floats they can be",
    "start": "2134200",
    "end": "2139780"
  },
  {
    "text": "IE they can be whatever they feel like but even if you have language that says",
    "start": "2139780",
    "end": "2146079"
  },
  {
    "text": "yeah this is always IE like go then you can find actually like compile",
    "start": "2146079",
    "end": "2152380"
  },
  {
    "text": "time and runtime behave differently so who here uses go",
    "start": "2152380",
    "end": "2158320"
  },
  {
    "start": "2155000",
    "end": "2253000"
  },
  {
    "text": "nobody you are lucky actually I do have to use it for work every now and then so the thing about go",
    "start": "2158320",
    "end": "2165280"
  },
  {
    "text": "is that when it does math at compile time it tries to implement benefit math",
    "start": "2165280",
    "end": "2171700"
  },
  {
    "text": "it does dislike oh we just compute it perfectly and then we downgraded we",
    "start": "2171700",
    "end": "2176740"
  },
  {
    "text": "round it into the float these are some fun issue",
    "start": "2176740",
    "end": "2182500"
  },
  {
    "text": "what's your this strength we have a set a to minus 0.0 we want to print a and",
    "start": "2182500",
    "end": "2190060"
  },
  {
    "text": "one divided by a so what should this print",
    "start": "2190060",
    "end": "2195780"
  },
  {
    "text": "I mean what it should print is obvious minus zero and uh minus infinity",
    "start": "2198220",
    "end": "2204339"
  },
  {
    "text": "right so what does it print is the battery question",
    "start": "2204339",
    "end": "2209940"
  },
  {
    "text": "well it prints positive zero and plus infinity why",
    "start": "2210700",
    "end": "2216280"
  },
  {
    "text": "because in perfect math there is no negative zero that doesn't right in math negative zero",
    "start": "2216280",
    "end": "2222880"
  },
  {
    "text": "doesn't make sense so the Google compiler goes and goes okay so this is constant",
    "start": "2222880",
    "end": "2229180"
  },
  {
    "text": "so compile time math negative zero at compile time this doesn't make sense it's now zero",
    "start": "2229180",
    "end": "2235240"
  },
  {
    "text": "and so with happily stores zero positive zero into our a and breaks everything",
    "start": "2235240",
    "end": "2242700"
  },
  {
    "text": "and but interestingly actually like go does guarantee you that floats are in",
    "start": "2242920",
    "end": "2248140"
  },
  {
    "text": "like do use the IE standard at runtime not a compile time",
    "start": "2248140",
    "end": "2253300"
  },
  {
    "start": "2253000",
    "end": "2395000"
  },
  {
    "text": "so let's go to C plus plus let's say that we actually like write",
    "start": "2253300",
    "end": "2258940"
  },
  {
    "text": "the same code basically right we have again some negative zero V store minus",
    "start": "2258940",
    "end": "2264280"
  },
  {
    "text": "zero there and then we take double negative Infinity oh sorry this is supposed to be negative",
    "start": "2264280",
    "end": "2270880"
  },
  {
    "text": "zero if we divide by uh no this is correct sorry uh so we should have negative zero",
    "start": "2270880",
    "end": "2276940"
  },
  {
    "text": "negative Infinity let's so before I show what it means who here thinks that this will print",
    "start": "2276940",
    "end": "2282579"
  },
  {
    "text": "negative zero negative Infinity foreign",
    "start": "2282579",
    "end": "2288540"
  },
  {
    "text": "no takers and you are correct this does do the right thing we do get minus zero",
    "start": "2293859",
    "end": "2300220"
  },
  {
    "text": "minus infinity so what's the issue why did I say that C plus plus also has issues here",
    "start": "2300220",
    "end": "2307900"
  },
  {
    "text": "let's change the code a little bit notice that we edit Concepts we now say",
    "start": "2307900",
    "end": "2313240"
  },
  {
    "text": "okay but we are at compile time context and again we write there the same thing",
    "start": "2313240",
    "end": "2320619"
  },
  {
    "text": "not another negative zero and then we want negative Infinity",
    "start": "2320619",
    "end": "2326619"
  },
  {
    "text": "so what do we get now who here thinks that this will print",
    "start": "2326619",
    "end": "2331900"
  },
  {
    "text": "negative zero negative Infinity positive zero positive Infinity",
    "start": "2331900",
    "end": "2338859"
  },
  {
    "text": "we have Capital takers compilation error",
    "start": "2338859",
    "end": "2344320"
  },
  {
    "text": "because you can divide it by zero at compile time even though we are in link floats where you know this is fine this",
    "start": "2344320",
    "end": "2352060"
  },
  {
    "text": "is something you can do it just should give you infinity",
    "start": "2352060",
    "end": "2355859"
  },
  {
    "text": "you know you can't rely on anything these days uh by the way like if you want to know",
    "start": "2357339",
    "end": "2364240"
  },
  {
    "text": "why the issue ball is down to so C plus doesn't say what standard the floats follow right",
    "start": "2364240",
    "end": "2370420"
  },
  {
    "text": "and at compile time the compiler has to basically interpret the C plus it",
    "start": "2370420",
    "end": "2376660"
  },
  {
    "text": "supports in expert format and the committee is not willing to say",
    "start": "2376660",
    "end": "2382359"
  },
  {
    "text": "that the compiler must be able to emulate the floating Point model of the target compilation platform so it just",
    "start": "2382359",
    "end": "2389260"
  },
  {
    "text": "does get so it gets to do whatever it wants no that's not all",
    "start": "2389260",
    "end": "2394960"
  },
  {
    "text": "still C bus pass you can actually break IE standard easily with some compilation Flags right if you ever say for fast",
    "start": "2394960",
    "end": "2403000"
  },
  {
    "start": "2395000",
    "end": "2438000"
  },
  {
    "text": "math or super fast for msvc users",
    "start": "2403000",
    "end": "2407940"
  },
  {
    "text": "all guarantees broken compiler will start doing whatever it wants and everything I told you about is a lie",
    "start": "2408099",
    "end": "2415000"
  },
  {
    "text": "don't rely on it or you know just oh fast this sounds like good we are now fast",
    "start": "2415000",
    "end": "2421359"
  },
  {
    "text": "but it implies fast enough so again everything I told you stops working",
    "start": "2421359",
    "end": "2427060"
  },
  {
    "text": "and there is a bunch of like other smaller flags that you can do this you know like fun and safe math",
    "start": "2427060",
    "end": "2433060"
  },
  {
    "text": "optimizations and so on now this is not all",
    "start": "2433060",
    "end": "2439119"
  },
  {
    "start": "2438000",
    "end": "2493000"
  },
  {
    "text": "it can get worse your external code the libraries you are calling can also break you",
    "start": "2439119",
    "end": "2445300"
  },
  {
    "text": "just for fun let's have like the sample of some really evil code right it just goes and",
    "start": "2445300",
    "end": "2452800"
  },
  {
    "text": "it just stands around it sets rounding mode and never resets it it just says from now on all floating for its",
    "start": "2452800",
    "end": "2459460"
  },
  {
    "text": "operations will round down and that's it suddenly everything",
    "start": "2459460",
    "end": "2465579"
  },
  {
    "text": "behaves differently incidentally this means that like if you ever write code like this",
    "start": "2465579",
    "end": "2472000"
  },
  {
    "text": "please first take like query what's the current mode and then reset it afterwards right this this is useful to",
    "start": "2472000",
    "end": "2478839"
  },
  {
    "text": "be able to change it can it's useful to be able to say I want different rounding and then get it",
    "start": "2478839",
    "end": "2484780"
  },
  {
    "text": "but you know it's a global don't touch globals so you have to reset the state",
    "start": "2484780",
    "end": "2489880"
  },
  {
    "text": "afterwards now that's pretty good",
    "start": "2489880",
    "end": "2495099"
  },
  {
    "text": "so if you want to do floating Point work you have to know what the guarantees of",
    "start": "2495099",
    "end": "2500380"
  },
  {
    "text": "your language are and you know also know when the guarantees stop working",
    "start": "2500380",
    "end": "2507160"
  },
  {
    "text": "now comparoflex can actually break IEEE guarantees so if you need a",
    "start": "2507160",
    "end": "2513400"
  },
  {
    "text": "reproducibility on floats you have to like understand what flags you compile",
    "start": "2513400",
    "end": "2518920"
  },
  {
    "text": "with and also what Flex all of your dependencies are compiled with",
    "start": "2518920",
    "end": "2525099"
  },
  {
    "text": "and of course external code can break reproduciblet as well so if you like have external dependencies you ideally",
    "start": "2525099",
    "end": "2532240"
  },
  {
    "text": "need to either audit them or you need to like defensively reset the FPU state",
    "start": "2532240",
    "end": "2538180"
  },
  {
    "text": "that you need every time you are back in your own code so basically if you actually want to",
    "start": "2538180",
    "end": "2544300"
  },
  {
    "text": "reproducibility it's a lot of work but it's useful",
    "start": "2544300",
    "end": "2549400"
  },
  {
    "text": "to have it okay so",
    "start": "2549400",
    "end": "2555160"
  },
  {
    "start": "2555000",
    "end": "2723000"
  },
  {
    "text": "that's pretty much everything thank you for listening but before I move to questions I want to",
    "start": "2555160",
    "end": "2562180"
  },
  {
    "text": "give show you two more things that are honestly amazing to me",
    "start": "2562180",
    "end": "2568839"
  },
  {
    "text": "so the first is this fact you can't constant fault X Plus 0 into X",
    "start": "2568839",
    "end": "2574900"
  },
  {
    "text": "you can do this it it is invalid optimization it will break correctness",
    "start": "2574900",
    "end": "2582700"
  },
  {
    "text": "try to think about why and the other one is that you can't constant fault even this",
    "start": "2582700",
    "end": "2588040"
  },
  {
    "text": "x times zero you can't say this is zero is obvious this is still invalid optimization that",
    "start": "2588040",
    "end": "2594700"
  },
  {
    "text": "you can't do now",
    "start": "2594700",
    "end": "2600760"
  },
  {
    "text": "it's time for questions",
    "start": "2600760",
    "end": "2603599"
  },
  {
    "text": "[Applause]",
    "start": "2606310",
    "end": "2612849"
  },
  {
    "text": "okay yeah oh sorry you didn't notice you",
    "start": "2614440",
    "end": "2621000"
  },
  {
    "text": "uh sorry can you but I will come closer",
    "start": "2624940",
    "end": "2629940"
  },
  {
    "text": "yeah",
    "start": "2632200",
    "end": "2634200"
  },
  {
    "text": "okay so the question is back to the decimal floats I said that we have a lot",
    "start": "2638460",
    "end": "2644319"
  },
  {
    "text": "of ways to show to represent zero I will try to go there real quick",
    "start": "2644319",
    "end": "2650220"
  },
  {
    "text": "just so it is in front of us now",
    "start": "2651099",
    "end": "2655500"
  },
  {
    "text": "right so the question was about when we have something like this what do we do with text representations because you",
    "start": "2657339",
    "end": "2663460"
  },
  {
    "text": "know we can use two for Infinities and then we could say use two for total numbers and what about the rest of them",
    "start": "2663460",
    "end": "2668920"
  },
  {
    "text": "so there are two answers here one we cannot care because this is a toy the actual answer so this is what IE flow",
    "start": "2668920",
    "end": "2676420"
  },
  {
    "text": "does is that you have something like 52 bits in every not a number that you",
    "start": "2676420",
    "end": "2683680"
  },
  {
    "text": "can change and you can use this to encode more information about error so the answer here is that you could pick",
    "start": "2683680",
    "end": "2690160"
  },
  {
    "text": "all the externals representations and just assign them different error conditions where you return them",
    "start": "2690160",
    "end": "2698099"
  },
  {
    "text": "okay anything else okay I don't think so",
    "start": "2703960",
    "end": "2710560"
  },
  {
    "text": "so again thank you for listening and let's go enjoy the end of the conference",
    "start": "2710560",
    "end": "2717900"
  }
]