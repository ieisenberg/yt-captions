[
  {
    "text": "back so it's like an unglorious time of the day to listen to me talking about",
    "start": "5100",
    "end": "11120"
  },
  {
    "text": "event-driven architecture there is going to be a lot of drawings and diagrams because this is an architecture talk so",
    "start": "11120",
    "end": "17340"
  },
  {
    "text": "if I fall asleep on my own talk can you please wake me up because I'm still a little bit woozy with my jet lag and all",
    "start": "17340",
    "end": "23460"
  },
  {
    "text": "I have to cross three different time zones and yeah so I'm a bit sleepy I",
    "start": "23460",
    "end": "28619"
  },
  {
    "text": "apologize already but I'm gonna try to you know wake you up a little bit so",
    "start": "28619",
    "end": "33660"
  },
  {
    "text": "today we're going to talk about yeah event driven architecture in Azure and there are a couple of things that I want",
    "start": "33660",
    "end": "38880"
  },
  {
    "text": "to focus on this is a little bit of a fundamental session so I want to talk about some of the basic concepts around",
    "start": "38880",
    "end": "46200"
  },
  {
    "text": "event driven architecture and for example we want to focus on the different nuances that we come across",
    "start": "46200",
    "end": "52440"
  },
  {
    "text": "when we are designing event-driven applications because there's a lot you know it gets kind of confusing sometimes",
    "start": "52440",
    "end": "57960"
  },
  {
    "text": "I'm a developer and I get very confused with the different terminologies around event driven and then we're going to",
    "start": "57960",
    "end": "63840"
  },
  {
    "text": "look at the different Azure services that we can use to implement this in in",
    "start": "63840",
    "end": "69299"
  },
  {
    "text": "Practical and there's a little bit of demo in the end but like I said because this is an architecture session so I",
    "start": "69299",
    "end": "74400"
  },
  {
    "text": "have mostly drawings and diagrams and we're going to go through that together and towards the end let's look at the",
    "start": "74400",
    "end": "82320"
  },
  {
    "text": "different pitfalls that we can encounter some of the challenges that um that we need to be be careful about",
    "start": "82320",
    "end": "88680"
  },
  {
    "text": "when we're designing event-driven applications this is my first time on NDC stage and I",
    "start": "88680",
    "end": "96240"
  },
  {
    "text": "arrived in Sydney like a week ago already and totally having fun so I hope you guys have fun with me a little bit",
    "start": "96240",
    "end": "102240"
  },
  {
    "text": "you know have a little bit of energy even though this is such a heavy architecture talk",
    "start": "102240",
    "end": "108780"
  },
  {
    "text": "um just a little bit introduction about myself my name is marila di matulak it's venovic now and I am a software",
    "start": "108780",
    "end": "115439"
  },
  {
    "text": "architect and I've been in this industry for far too long like really long",
    "start": "115439",
    "end": "121680"
  },
  {
    "text": "um I'm not going to reveal how long but recently I am obsessed with building",
    "start": "121680",
    "end": "127439"
  },
  {
    "text": "Cloud native apps and app modernization and I've always been passionate about",
    "start": "127439",
    "end": "132840"
  },
  {
    "text": "you know patterns the main driven design because I also think that really good",
    "start": "132840",
    "end": "138000"
  },
  {
    "text": "architecture is is really important especially in in developer Wellness I'm",
    "start": "138000",
    "end": "143400"
  },
  {
    "text": "also very passionate about developer Wellness development developer happiness because you know all of these things",
    "start": "143400",
    "end": "149520"
  },
  {
    "text": "would burn out we want to avoid that and I believe that really good architecture is one of the best way to avoid",
    "start": "149520",
    "end": "155520"
  },
  {
    "text": "developer burnout I'm also very active in Tech communities I'm a founder of a",
    "start": "155520",
    "end": "162180"
  },
  {
    "text": "not-for-profit organization called ulup.org and we try to get some of this underserved kids certified in cloud data",
    "start": "162180",
    "end": "169620"
  },
  {
    "text": "and Technology like 19 years old getting certified I'm not I don't feed it and yeah I'm an Azure MVP and I'm also",
    "start": "169620",
    "end": "176459"
  },
  {
    "text": "an entrepreneur I have my own company crazy enough to start my own company six years ago it's a cloud native company",
    "start": "176459",
    "end": "183720"
  },
  {
    "text": "we're based in Copenhagen and Manila it's called the wise I always want to start my talk with um",
    "start": "183720",
    "end": "190860"
  },
  {
    "text": "with the why why do I want to talk about event-driven architecture why am I interested with event-driven",
    "start": "190860",
    "end": "197040"
  },
  {
    "text": "architecture because if you think about it it's like I'm I'm a fan of stories I read a lot of stories I write stories I",
    "start": "197040",
    "end": "204659"
  },
  {
    "text": "listen to stories and if you think about it software development is just you know",
    "start": "204659",
    "end": "211140"
  },
  {
    "text": "automating the stories of Our Lives but we're automating the kind of like",
    "start": "211140",
    "end": "217920"
  },
  {
    "text": "not significant stories of our life like going shopping so so that we have more time to leave out the stories that",
    "start": "217920",
    "end": "224819"
  },
  {
    "text": "really that we really enjoy you know like creating art we shouldn't automate that",
    "start": "224819",
    "end": "230459"
  },
  {
    "text": "um but you know when we design software based on the principle of domain driven",
    "start": "230459",
    "end": "235620"
  },
  {
    "text": "design we want to design software that kind of um easy to understand because it's so",
    "start": "235620",
    "end": "241500"
  },
  {
    "text": "close and it's so related to our everyday lives to our stories and this is where um the terminology is event",
    "start": "241500",
    "end": "247560"
  },
  {
    "text": "driven design and the patterns in event driven design really resonate with me because it really represents our everyday life our stories the stories of",
    "start": "247560",
    "end": "254340"
  },
  {
    "text": "our existence as humans we value events we remember events we",
    "start": "254340",
    "end": "259859"
  },
  {
    "text": "celebrate events we react to events every time something happens a fact happens we react to it so we should also",
    "start": "259859",
    "end": "266580"
  },
  {
    "text": "try to model our software which is the automation of our stories based on the same principles",
    "start": "266580",
    "end": "273419"
  },
  {
    "text": "but there's another reason why I'm very keen with event-driven architecture it's",
    "start": "273419",
    "end": "280020"
  },
  {
    "text": "because there is a fundamental issue with the way we are creating our software now",
    "start": "280020",
    "end": "285240"
  },
  {
    "text": "so we talk about stories right but the way we are creating our software application now where we are trying to",
    "start": "285240",
    "end": "292080"
  },
  {
    "text": "just overwrite what's on our record the record of our facts you know we have",
    "start": "292080",
    "end": "297660"
  },
  {
    "text": "mutable databases whenever we try to overwrite the facts in our databases",
    "start": "297660",
    "end": "303000"
  },
  {
    "text": "that's a very typical software architecture pattern it's like we're skewing our stories",
    "start": "303000",
    "end": "308280"
  },
  {
    "text": "it's like reading the records in the database is like reading a fairy tale where you say",
    "start": "308280",
    "end": "314280"
  },
  {
    "text": "Once Upon a Time the princess met the prince and they live happily ever after it's like the rest of the facts are gone",
    "start": "314280",
    "end": "320759"
  },
  {
    "text": "with the traditional way of our software development and this is again where some patterns in an event-driven application",
    "start": "320759",
    "end": "326940"
  },
  {
    "text": "can really help us straighten out the story for us to record every single fact that led us to the current state of our",
    "start": "326940",
    "end": "335580"
  },
  {
    "text": "application so that's my why I want to solve that story like this is our plan and we have",
    "start": "335580",
    "end": "342300"
  },
  {
    "text": "a lot of stories facts happening all the time one of my favorite stories is the story of my kids just to illustrate how",
    "start": "342300",
    "end": "347699"
  },
  {
    "text": "we design software nowadays so these are my kids this is my son rain and this is",
    "start": "347699",
    "end": "352740"
  },
  {
    "text": "my daughter Rayla and they moved with me to Denmark about a couple of years ago",
    "start": "352740",
    "end": "358520"
  },
  {
    "text": "and they are enrolled in a school called bir que Royal gymnation it's with the uh",
    "start": "358520",
    "end": "365400"
  },
  {
    "text": "it's like it's hard to pronounce big local origination it's like having a potato in your mouth so um they're",
    "start": "365400",
    "end": "370740"
  },
  {
    "text": "enrolled there and actually this year my son just graduated yay I have a",
    "start": "370740",
    "end": "377280"
  },
  {
    "text": "full adult son but I know it's hard to believe I can't believe it myself but",
    "start": "377280",
    "end": "384500"
  },
  {
    "text": "don't tell him that oh this is live he's watching anyways",
    "start": "384500",
    "end": "389580"
  },
  {
    "text": "um so if I look in his school records if I look in the school system I'm gonna pull out his record his profile profile",
    "start": "389580",
    "end": "396360"
  },
  {
    "text": "and he's just gonna say graduated but before that happened he was also",
    "start": "396360",
    "end": "401940"
  },
  {
    "text": "applying or accepted or registered and enrolled so but I don't see that anymore",
    "start": "401940",
    "end": "408060"
  },
  {
    "text": "it's gone we well-meaning developers have over overridden and how many times have we developed software like this",
    "start": "408060",
    "end": "414080"
  },
  {
    "text": "maybe we have some audit log but that doesn't give us the full picture and the audit log is not really meant for us to",
    "start": "414080",
    "end": "419880"
  },
  {
    "text": "replay the state of the system and look at it in different time zones so we want to change that with a better",
    "start": "419880",
    "end": "426900"
  },
  {
    "text": "pattern so what is event-driven architecture essentially you know in a nutshell it's",
    "start": "426900",
    "end": "433259"
  },
  {
    "text": "an architectural style that relies on events events are simple you know statement of facts something that has",
    "start": "433259",
    "end": "439020"
  },
  {
    "text": "already happened and relying that to have event processors that can execute",
    "start": "439020",
    "end": "446340"
  },
  {
    "text": "logic asynchronously based on these events to be able to execute a workflow or",
    "start": "446340",
    "end": "451740"
  },
  {
    "text": "problem domain so for example in the use case that I have shown you with the student enrollment",
    "start": "451740",
    "end": "457979"
  },
  {
    "text": "so maybe there are different steps in the student enrollment and there are different processors uh in in the same",
    "start": "457979",
    "end": "464580"
  },
  {
    "text": "workflow but um you need something to bind this",
    "start": "464580",
    "end": "470699"
  },
  {
    "text": "um decoupled asynchronous processors and you can use events to be able to trigger some action",
    "start": "470699",
    "end": "477419"
  },
  {
    "text": "and event-driven architecture is not new you can use it in different combinations with other architectural",
    "start": "477419",
    "end": "484500"
  },
  {
    "text": "Styles like you know you can use it in monolith but it really shines in distributed applications where you have",
    "start": "484500",
    "end": "491460"
  },
  {
    "text": "decoupled processors and how to make sure that they don't have a very strong",
    "start": "491460",
    "end": "499319"
  },
  {
    "text": "dependency with each other but they can still communicate with each other via events so there a lot of use cases with",
    "start": "499319",
    "end": "505919"
  },
  {
    "text": "event driven architecture it's like I said it's quite common it's not new so for example cloud is inherently at least",
    "start": "505919",
    "end": "514140"
  },
  {
    "text": "partly um event driven like especially with the side with the cloud native event-driven",
    "start": "514140",
    "end": "519360"
  },
  {
    "text": "Auto scaling so if you're familiar with kubernetes and cada like you can use events like as signals to trigger some",
    "start": "519360",
    "end": "528480"
  },
  {
    "text": "logic to be to scale your you know your infrastructure iot Solutions are also very much event driven so for example",
    "start": "528480",
    "end": "535620"
  },
  {
    "text": "you know if you have devices in this room you just ingest a lot of different data about the current temperature and",
    "start": "535620",
    "end": "543240"
  },
  {
    "text": "you take all these signals to adjust the temperature in the room so it's also event driven gaming is also another",
    "start": "543240",
    "end": "550880"
  },
  {
    "text": "use case but Enterprise apps um how many of you build event-driven",
    "start": "550880",
    "end": "557459"
  },
  {
    "text": "Enterprise apps oh quite a lot good so it is mix yeah in in in my some of",
    "start": "557459",
    "end": "565380"
  },
  {
    "text": "you probably getting there or looking into it and like also in my experience in Enterprise application development",
    "start": "565380",
    "end": "571440"
  },
  {
    "text": "there are still a lot of teams and developers who want to Implement event driven but only",
    "start": "571440",
    "end": "577440"
  },
  {
    "text": "partially and some are still very traditional and doesn't really use events at all",
    "start": "577440",
    "end": "583320"
  },
  {
    "text": "and I think one of the the reasons why there's a kind of a block curve or implementing event driven is it can",
    "start": "583320",
    "end": "589620"
  },
  {
    "text": "easily get complex because of some of the nuances that we face so I want to go through some of these nuances so that we",
    "start": "589620",
    "end": "596100"
  },
  {
    "text": "can clarify some of the terminologies and really for the people who have experience or a lot of experience with",
    "start": "596100",
    "end": "603420"
  },
  {
    "text": "event-driven application feel free to contradict to raise your hand and say that's not right because this is the",
    "start": "603420",
    "end": "609839"
  },
  {
    "text": "point where Architects really are developers really you know started pushing their own agenda so no that's",
    "start": "609839",
    "end": "615420"
  },
  {
    "text": "not right so it could happen and it always happens but let's see so one of the very basic things",
    "start": "615420",
    "end": "624180"
  },
  {
    "text": "commands versus events some people get confused some people understand it right away but the thing",
    "start": "624180",
    "end": "631380"
  },
  {
    "text": "is they're both messages that use to trigger some sort of an",
    "start": "631380",
    "end": "636660"
  },
  {
    "text": "action but the meaning itself you know the you know the subtlety in the language is very different",
    "start": "636660",
    "end": "643080"
  },
  {
    "text": "so commands are you know expressed it expresses your intention to for an action to execute so somebody wants",
    "start": "643080",
    "end": "649920"
  },
  {
    "text": "something to happen that's a command you know it's very active I want you to do this so in our",
    "start": "649920",
    "end": "655740"
  },
  {
    "text": "use case for student enrollment you can say register the student and that's a command whereas an event",
    "start": "655740",
    "end": "662880"
  },
  {
    "text": "also a message that gets passed around in the system that can also trigger another action but you trigger the",
    "start": "662880",
    "end": "669060"
  },
  {
    "text": "action because something has happened so for example in the whole student enrollment system",
    "start": "669060",
    "end": "674880"
  },
  {
    "text": "after you have completed the student registration there's an event called student registered and that can trickle",
    "start": "674880",
    "end": "680940"
  },
  {
    "text": "down to the system and execute more logic so there's a difference in the way we",
    "start": "680940",
    "end": "688740"
  },
  {
    "text": "use the verbs another thing with the command if we compare so command can be",
    "start": "688740",
    "end": "694079"
  },
  {
    "text": "first of all validated where events are already valid it already happened it already it's already",
    "start": "694079",
    "end": "699899"
  },
  {
    "text": "a fact so command needs to First validate before it executes an action so if it's invalid you throw an error",
    "start": "699899",
    "end": "706980"
  },
  {
    "text": "but if it's valid then you execute the action and the action can still fail and succeed so a",
    "start": "706980",
    "end": "713279"
  },
  {
    "text": "failed action is an event that you can still capture whereas an action that",
    "start": "713279",
    "end": "718680"
  },
  {
    "text": "succeeded or like for example a student registered or student registration fail they're both events drawn up from the",
    "start": "718680",
    "end": "724860"
  },
  {
    "text": "same command so understanding this terminology can help us really model our workflow our",
    "start": "724860",
    "end": "732540"
  },
  {
    "text": "system and then Implement that in code so let's look at simple example in code",
    "start": "732540",
    "end": "737880"
  },
  {
    "text": "so this is an example of a very simple um very simple command so like I said your",
    "start": "737880",
    "end": "744779"
  },
  {
    "text": "naming convention is always to start with the verb that's in present tense register student and it's also just data",
    "start": "744779",
    "end": "750720"
  },
  {
    "text": "so you have some data that that you require to be able to execute a command and then somewhere along the way you",
    "start": "750720",
    "end": "757500"
  },
  {
    "text": "probably have a command Handler that gets triggered to execute an action and",
    "start": "757500",
    "end": "762779"
  },
  {
    "text": "after that action has completed like maybe you have executed some logic business logic you call your database or",
    "start": "762779",
    "end": "768540"
  },
  {
    "text": "you did some validation you can publish the event once you have completed so event is also just a data it's just",
    "start": "768540",
    "end": "775500"
  },
  {
    "text": "model just the event the data in the event then nodes the the like what",
    "start": "775500",
    "end": "781620"
  },
  {
    "text": "happened so it explains what happens or what are the attributes that were changed so for example when you register",
    "start": "781620",
    "end": "788160"
  },
  {
    "text": "the student after the students registered then you probably need which student ID and what program they will",
    "start": "788160",
    "end": "793920"
  },
  {
    "text": "registered to and in event-driven application you would also have an event handler the event processor so once this is",
    "start": "793920",
    "end": "800399"
  },
  {
    "text": "triggered then you can do something and this sample code I showed is very simple",
    "start": "800399",
    "end": "805980"
  },
  {
    "text": "and it's still in process you're still not Crossing Network boundaries you're still not triggering any other components but this is just a very basic",
    "start": "805980",
    "end": "813360"
  },
  {
    "text": "code all right so I hope you guys understand commands",
    "start": "813360",
    "end": "818760"
  },
  {
    "text": "and events very important terminology so how do we trigger this chain of",
    "start": "818760",
    "end": "824760"
  },
  {
    "text": "command and events and chain and commands inside our system so now we start looking at requests",
    "start": "824760",
    "end": "831920"
  },
  {
    "text": "async requests is sometimes related to event driven but",
    "start": "831920",
    "end": "837839"
  },
  {
    "text": "depends on your implementation it's probably not event driven yet but a lot of people refer to just simple asynchronic synchronous request as event",
    "start": "837839",
    "end": "844860"
  },
  {
    "text": "driven but let's see so this is very familiar this is a very simple way of you know designing our",
    "start": "844860",
    "end": "852839"
  },
  {
    "text": "application you have the request response model and in the here you have just two components crossing the network",
    "start": "852839",
    "end": "859139"
  },
  {
    "text": "you probably have a UI component fires up the request to an endpoint the endpoint processes it and right away",
    "start": "859139",
    "end": "866100"
  },
  {
    "text": "um deliver the response so a lot of our apis are built like this but we all know",
    "start": "866100",
    "end": "871740"
  },
  {
    "text": "that this could you know cause some issues later down the line with scalability and latency and all that so",
    "start": "871740",
    "end": "878459"
  },
  {
    "text": "you might want to decouple your components using asynchronous requests so this is one of the patterns that you",
    "start": "878459",
    "end": "885480"
  },
  {
    "text": "can use for asynchronous requests this is not the only one so in this",
    "start": "885480",
    "end": "891060"
  },
  {
    "text": "in this pattern you have your UI let's say again in the student enrollment use",
    "start": "891060",
    "end": "896639"
  },
  {
    "text": "case you have your UI you register the student you call an endpoint and immediately you get a reply that we're",
    "start": "896639",
    "end": "902760"
  },
  {
    "text": "processing your request and the endpoint will enqueue this so that it can be processed later on by its Handler so",
    "start": "902760",
    "end": "909779"
  },
  {
    "text": "it's like temporal processing so the queue in the middle takes care of you know decoupling of the components and as",
    "start": "909779",
    "end": "917399"
  },
  {
    "text": "well as scaling or load balancing or load leveling so to make sure that the hand you have enough you know instances",
    "start": "917399",
    "end": "924360"
  },
  {
    "text": "of the Handler that can handle the load or that you can travel the load so that you know that you don't kill your",
    "start": "924360",
    "end": "929820"
  },
  {
    "text": "handlers or your your API and then you have a way to of course if you need to reply back to your UI component there",
    "start": "929820",
    "end": "938459"
  },
  {
    "text": "are several ways in this particular pattern you you use a polling pattern wherein like from the Handler maybe you",
    "start": "938459",
    "end": "945300"
  },
  {
    "text": "save the state along the way of the database but then you you also provide",
    "start": "945300",
    "end": "951000"
  },
  {
    "text": "provide an end point for the UI to call to check the status of the long running",
    "start": "951000",
    "end": "956279"
  },
  {
    "text": "process or once that's completed you also provide a resource endpoint where",
    "start": "956279",
    "end": "961320"
  },
  {
    "text": "your client can also see the final state of the processing",
    "start": "961320",
    "end": "966959"
  },
  {
    "text": "software the student registration you will have a two endpoints to look at the pro where are we in the process of",
    "start": "966959",
    "end": "972360"
  },
  {
    "text": "student registration and at the end give me the record for registered",
    "start": "972360",
    "end": "977579"
  },
  {
    "text": "students there are other patterns for this you can also do request reply where you",
    "start": "977579",
    "end": "983519"
  },
  {
    "text": "don't pull but then the Handler also sends a message back to the UI of about",
    "start": "983519",
    "end": "991740"
  },
  {
    "text": "the status and what has happened who thinks this is event driven",
    "start": "991740",
    "end": "997940"
  },
  {
    "text": "some yes could be but a little bit in my book not so much",
    "start": "1000800",
    "end": "1007940"
  },
  {
    "text": "because we're still pushing or sending a command we're still requesting something to",
    "start": "1007940",
    "end": "1014839"
  },
  {
    "text": "happen nothing has been triggered because something else has happened so there's just a little subtle",
    "start": "1014839",
    "end": "1019880"
  },
  {
    "text": "difference yeah but of course this can be the starting point for event driven this an event-driven application is a",
    "start": "1019880",
    "end": "1027020"
  },
  {
    "text": "mix so it can start from a simple request and then propagate into events",
    "start": "1027020",
    "end": "1032660"
  },
  {
    "text": "so let's look at the patterns for event uh driven design",
    "start": "1032660",
    "end": "1039678"
  },
  {
    "text": "there are different topologies that you can use when um when designing applications to be",
    "start": "1039679",
    "end": "1045140"
  },
  {
    "text": "event driven and this is the first one which is what you call the broker choreography pattern this is where you",
    "start": "1045140",
    "end": "1051740"
  },
  {
    "text": "know things are fun and cool but then they can go wrong and no one has you",
    "start": "1051740",
    "end": "1056960"
  },
  {
    "text": "know a single responsibility for what's happening that means all the participants in this event-driven",
    "start": "1056960",
    "end": "1062240"
  },
  {
    "text": "workflow needs to be responsible enough to know what to do when something goes wrong so if I give you an example let's",
    "start": "1062240",
    "end": "1069679"
  },
  {
    "text": "say in the student enrollment workflow first you need to register the student and after that you automatically enroll",
    "start": "1069679",
    "end": "1076880"
  },
  {
    "text": "the students in different classes based on the program so that's a different bounded context the classes student",
    "start": "1076880",
    "end": "1083600"
  },
  {
    "text": "test takes care of the Student Records whereas the class enrollment takes care of the class domain aggregate like you",
    "start": "1083600",
    "end": "1090620"
  },
  {
    "text": "know who are the students enroll with other classes and at the same time at the end of class enrollment you're going to find out okay what kind of books do I",
    "start": "1090620",
    "end": "1097640"
  },
  {
    "text": "want to issue to the students who are enrolled this class but that books component or bounded context is you know",
    "start": "1097640",
    "end": "1106100"
  },
  {
    "text": "it's it's a different team that's developing that and at the same time it's a different set of users it's a bookstore so they're all participants in",
    "start": "1106100",
    "end": "1112280"
  },
  {
    "text": "the whole student enrollment workflow um in the choreography choreography",
    "start": "1112280",
    "end": "1117440"
  },
  {
    "text": "pattern so you have the concept of you know the event producer which is again like the Handler that first executed the",
    "start": "1117440",
    "end": "1126140"
  },
  {
    "text": "student registration and once that's completed it broadcasts that okay I'm done with my my job I have registered",
    "start": "1126140",
    "end": "1133400"
  },
  {
    "text": "the student it uses an event broker that's the only responsibility of the",
    "start": "1133400",
    "end": "1138620"
  },
  {
    "text": "event broker is to know who are all the subscribers for this particular event",
    "start": "1138620",
    "end": "1144440"
  },
  {
    "text": "so it just pushes out this notification so that they can execute their own logic",
    "start": "1144440",
    "end": "1150140"
  },
  {
    "text": "like for example the class enrollment and the books issuing of books",
    "start": "1150140",
    "end": "1155720"
  },
  {
    "text": "but what happens if something goes wrong in the class domain for example they",
    "start": "1155720",
    "end": "1160880"
  },
  {
    "text": "can't enroll the class so technically the student enrollment isn't completed well if you don't design your",
    "start": "1160880",
    "end": "1167960"
  },
  {
    "text": "application well using this pattern then it's hard right it's hard to do error",
    "start": "1167960",
    "end": "1174260"
  },
  {
    "text": "handling it can easily go hey where so there are also other patterns for this you can emit another event that",
    "start": "1174260",
    "end": "1180919"
  },
  {
    "text": "something went wrong and then the other participants can receive that and do like a compensating transaction pattern",
    "start": "1180919",
    "end": "1186860"
  },
  {
    "text": "where they try to roll back what they have done and yeah it's it's it will",
    "start": "1186860",
    "end": "1191960"
  },
  {
    "text": "work but then it can get very complicated towards you know if if your scenario gets a bit more complex but the",
    "start": "1191960",
    "end": "1199700"
  },
  {
    "text": "good thing about this is because you don't have a dependency on a single entity because they're all kind of",
    "start": "1199700",
    "end": "1206179"
  },
  {
    "text": "independent then it's easily scalable it's a bit more flexible",
    "start": "1206179",
    "end": "1211600"
  },
  {
    "text": "so that's a very common pattern and the next one is what you would call a mediator pattern or a process manager",
    "start": "1211820",
    "end": "1219260"
  },
  {
    "text": "so in this case you actually have like one",
    "start": "1219260",
    "end": "1224780"
  },
  {
    "text": "entity there one function that sort of",
    "start": "1224780",
    "end": "1230020"
  },
  {
    "text": "organize all these events and commands and error handling to be able to",
    "start": "1230020",
    "end": "1236240"
  },
  {
    "text": "complete the entire workflow to solve the problem so do you have you know relatives that kind of if you have",
    "start": "1236240",
    "end": "1243140"
  },
  {
    "text": "reunions family reunions you always have one person that just takes care of everyone make sure that everyone can are",
    "start": "1243140",
    "end": "1249980"
  },
  {
    "text": "present and attend but they get very stressed at the end of the reunion so that's like that's like my sister for me",
    "start": "1249980",
    "end": "1255080"
  },
  {
    "text": "she calls all my relatives it's like oh are you coming or not coming oh you're sick oh you're doing this so she gets",
    "start": "1255080",
    "end": "1261380"
  },
  {
    "text": "very stressed but things happen you know it's so much easier with us we don't have to worry about you know changing",
    "start": "1261380",
    "end": "1268520"
  },
  {
    "text": "our plans because someone else is doing it so that's the same with this particular pattern so you would",
    "start": "1268520",
    "end": "1274160"
  },
  {
    "text": "typically have yeah what you would call um a mediator that would also produce",
    "start": "1274160",
    "end": "1279679"
  },
  {
    "text": "the events and push the events into different channels and then the participating components let's say the",
    "start": "1279679",
    "end": "1285799"
  },
  {
    "text": "class components and the books component can also still receive this notification and once they're done they can reply",
    "start": "1285799",
    "end": "1291559"
  },
  {
    "text": "back to the mediators so the mediator can continue executing the workflow",
    "start": "1291559",
    "end": "1299000"
  },
  {
    "text": "uh so it is I would say much more organized and safe",
    "start": "1299000",
    "end": "1304580"
  },
  {
    "text": "and easier for error handling um but then you start becoming dependent",
    "start": "1304580",
    "end": "1310220"
  },
  {
    "text": "on one entity that's the trade-off so that means there's one entity that has to know it all that has to scale better",
    "start": "1310220",
    "end": "1316900"
  },
  {
    "text": "so it's not as scalable as the ones where it's all independent but certainly",
    "start": "1316900",
    "end": "1322000"
  },
  {
    "text": "a little safer so for for example I'll give you something Azure uh you could use",
    "start": "1322000",
    "end": "1329780"
  },
  {
    "text": "something called Azure functions Azure durable functions that can orchestrate all these different activities and can",
    "start": "1329780",
    "end": "1336080"
  },
  {
    "text": "you know fire up commands receive uh messages and then fire in other events",
    "start": "1336080",
    "end": "1341179"
  },
  {
    "text": "and then maybe that particular durable function can also keep track of the events pushed out to some service bus to",
    "start": "1341179",
    "end": "1348799"
  },
  {
    "text": "other components and then it receives the the message back so once it's completed",
    "start": "1348799",
    "end": "1354559"
  },
  {
    "text": "um and in our student enrollment workflow maybe this is a student enrollment workflow maybe this",
    "start": "1354559",
    "end": "1360799"
  },
  {
    "text": "is the best pattern to be able to complete the student enrollment workflow we will have a mediator but when do we",
    "start": "1360799",
    "end": "1367159"
  },
  {
    "text": "use the choreography pattern in combination I would say that would be nice to use it like after the entire",
    "start": "1367159",
    "end": "1373960"
  },
  {
    "text": "end-to-end workflow is completed you can fire up another event like your integration event so that you can",
    "start": "1373960",
    "end": "1380659"
  },
  {
    "text": "announce to the greater system that the particular workflow is completed so let's say it's not just you know student",
    "start": "1380659",
    "end": "1386720"
  },
  {
    "text": "registered class enrolled books issued but student enrollment completed and",
    "start": "1386720",
    "end": "1391880"
  },
  {
    "text": "maybe other parts of the system is interested in that particular event so that they can execute their actions",
    "start": "1391880",
    "end": "1397460"
  },
  {
    "text": "again so you can use it in combination so",
    "start": "1397460",
    "end": "1402500"
  },
  {
    "text": "single unit of um of of business workflow of logic may be better with",
    "start": "1402500",
    "end": "1407600"
  },
  {
    "text": "mediator but then with the larger integration pattern you can also use or combine it with",
    "start": "1407600",
    "end": "1413600"
  },
  {
    "text": "um the choreography pattern yep",
    "start": "1413600",
    "end": "1419720"
  },
  {
    "text": "so those are the two now there's something else with event-driven architecture so if if",
    "start": "1419720",
    "end": "1426200"
  },
  {
    "text": "you're very familiar you probably have come across event streaming and event sourcing where does this all play out",
    "start": "1426200",
    "end": "1431960"
  },
  {
    "text": "what's the difference is there a difference even so I mean it depends on our use case right so we keep on",
    "start": "1431960",
    "end": "1438679"
  },
  {
    "text": "extending the event-driven architecture pattern when do we who uses event streaming",
    "start": "1438679",
    "end": "1444260"
  },
  {
    "text": "in their architecture cool and how about events forcing",
    "start": "1444260",
    "end": "1450039"
  },
  {
    "text": "how does that go let her know yeah",
    "start": "1450500",
    "end": "1455659"
  },
  {
    "text": "um so what is event stream so again similar",
    "start": "1455659",
    "end": "1461659"
  },
  {
    "text": "um similar use case but now we're thinking about other",
    "start": "1461659",
    "end": "1466840"
  },
  {
    "text": "other use cases the event stream is very very good also with ingesting Big Data",
    "start": "1466840",
    "end": "1473720"
  },
  {
    "text": "large amount of data for particularly for Analytics so the scenario we had",
    "start": "1473720",
    "end": "1480320"
  },
  {
    "text": "earlier the messages that were passing the commands that we're passing are you know isolated to a single business",
    "start": "1480320",
    "end": "1487580"
  },
  {
    "text": "workflow and the simple pattern for choreography and mediator will suffice but before the",
    "start": "1487580",
    "end": "1495080"
  },
  {
    "text": "student has actually registered or classes are enrolled or like mean details that are actually happening",
    "start": "1495080",
    "end": "1500360"
  },
  {
    "text": "every second and every minute before we even get to the point that the student is registered for example in the UI you",
    "start": "1500360",
    "end": "1506600"
  },
  {
    "text": "might have the student or the teacher must have clicked different buttons first maybe they invoked an error maybe",
    "start": "1506600",
    "end": "1513500"
  },
  {
    "text": "they switch contacts and page and came back before you know before everything was completed so there are like these",
    "start": "1513500",
    "end": "1519260"
  },
  {
    "text": "small data points that's still relevant in our story of student enrollment you might want to catch because you might",
    "start": "1519260",
    "end": "1525320"
  },
  {
    "text": "want to improve your service you might want to do analytics on it so this you know ingestion of",
    "start": "1525320",
    "end": "1532279"
  },
  {
    "text": "big amounts of data stream is is very is very good for data for event streaming",
    "start": "1532279",
    "end": "1538880"
  },
  {
    "text": "and the the concept is that instead of having an event broker like in the",
    "start": "1538880",
    "end": "1544039"
  },
  {
    "text": "previous pattern um you could have what you call an append Only log so for example your UI",
    "start": "1544039",
    "end": "1551179"
  },
  {
    "text": "keeps on you know pushing all these activities user activities in an append",
    "start": "1551179",
    "end": "1556340"
  },
  {
    "text": "Only log and that log is designed to push out streams of data and stream is",
    "start": "1556340",
    "end": "1562220"
  },
  {
    "text": "just an unbounded data set and bounded meaning it's always growing it's Timeless",
    "start": "1562220",
    "end": "1568419"
  },
  {
    "text": "and then it's in order it's immutable and you can replay the data that's in",
    "start": "1568419",
    "end": "1575179"
  },
  {
    "text": "the Stream and your stream processors consume",
    "start": "1575179",
    "end": "1581120"
  },
  {
    "text": "this data and maybe they only consume particular you know events that are",
    "start": "1581120",
    "end": "1586760"
  },
  {
    "text": "interesting to them so for example if you have an um stream processor that wants to isolate all the events related",
    "start": "1586760",
    "end": "1593360"
  },
  {
    "text": "to errors on the UI so that you can do some analytics to improve your UI then",
    "start": "1593360",
    "end": "1599000"
  },
  {
    "text": "you would only listen to that to those events so you can listen to a particular topic so maybe you have an event",
    "start": "1599000",
    "end": "1607279"
  },
  {
    "text": "processor that's interested uh with the things all the other things that the",
    "start": "1607279",
    "end": "1612440"
  },
  {
    "text": "user is doing in the browser before they get to the point of registering and then",
    "start": "1612440",
    "end": "1617659"
  },
  {
    "text": "you can use that and then do some aggregation or transformation or maybe you want to derive some data and and",
    "start": "1617659",
    "end": "1624440"
  },
  {
    "text": "refresh your read model that is more suitable for reporting or for for for",
    "start": "1624440",
    "end": "1629840"
  },
  {
    "text": "for other use cases so you want to listen to The Stream and process this stream",
    "start": "1629840",
    "end": "1635779"
  },
  {
    "text": "so it's slightly different from just announcing or notifying that a business",
    "start": "1635779",
    "end": "1641659"
  },
  {
    "text": "process has been completed but this one is really really and event stream is really good for that you can implement",
    "start": "1641659",
    "end": "1648020"
  },
  {
    "text": "it if you need it if you have the capacity if you understand your use case and the value from it yes but it's not",
    "start": "1648020",
    "end": "1655220"
  },
  {
    "text": "necessary that's the same with the concept of Event Source Event Source is also",
    "start": "1655220",
    "end": "1661720"
  },
  {
    "text": "logging a series of events but the difference is that the inventors when we use event streaming we're talking about",
    "start": "1661720",
    "end": "1668799"
  },
  {
    "text": "pushing data to other external processors whereas",
    "start": "1668799",
    "end": "1674960"
  },
  {
    "text": "event storming is more internal it's still in the same bounded context let's look at the bounded context of a student",
    "start": "1674960",
    "end": "1680960"
  },
  {
    "text": "yeah so it's just about the student registration and Event Source just means",
    "start": "1680960",
    "end": "1687020"
  },
  {
    "text": "that every single event that um that happened in order to arrive to",
    "start": "1687020",
    "end": "1693380"
  },
  {
    "text": "the current state of the student will be persisted in a persistence infrastructure like a database and it's",
    "start": "1693380",
    "end": "1700279"
  },
  {
    "text": "going to stay there forever unlike in event streams the streams actually don't have to stay forever they can be",
    "start": "1700279",
    "end": "1707419"
  },
  {
    "text": "retained there's a retention period for your streams because you know it's real time it's it's real time your processors",
    "start": "1707419",
    "end": "1714080"
  },
  {
    "text": "are just um accumulating and processing all the time it can go back in time it can choose in",
    "start": "1714080",
    "end": "1721279"
  },
  {
    "text": "which time window it wants to process but at some point those logs will be",
    "start": "1721279",
    "end": "1726799"
  },
  {
    "text": "removed whereas in Event Source everything that has happened to particular entity domain entity like the",
    "start": "1726799",
    "end": "1732740"
  },
  {
    "text": "student is persisted in a database and what do you use it for so that you can go through every single fact and arrive",
    "start": "1732740",
    "end": "1738440"
  },
  {
    "text": "at the current state so again going back to the story that we're overriding our mutable records or",
    "start": "1738440",
    "end": "1745039"
  },
  {
    "text": "databases this is kind of like the answer for that so instead of overriding you just record every event that has",
    "start": "1745039",
    "end": "1751820"
  },
  {
    "text": "transpired and use that and query that to replay that to be able to arrive at the current state at any given time you",
    "start": "1751820",
    "end": "1758179"
  },
  {
    "text": "can go back in a different time and you will see a different state of the entity or the Aggregate and at the same time",
    "start": "1758179",
    "end": "1764500"
  },
  {
    "text": "with with the Event Source and the the thing that you need to watch",
    "start": "1764500",
    "end": "1770299"
  },
  {
    "text": "on forward Adventure is of course your log can really grow so it depends on your use case you have to",
    "start": "1770299",
    "end": "1775820"
  },
  {
    "text": "um watch out for that but it's really also very good for debugging for error handling for looking at what happened",
    "start": "1775820",
    "end": "1783080"
  },
  {
    "text": "again it's not something that we have to apply all the time depends on the use",
    "start": "1783080",
    "end": "1788600"
  },
  {
    "text": "case it can get complicated but it's worth looking at so what is the difference with an event source with a",
    "start": "1788600",
    "end": "1795679"
  },
  {
    "text": "traditional a traditional log for example we can do audit logs right but like I said the logs if if you do audit",
    "start": "1795679",
    "end": "1802279"
  },
  {
    "text": "logging so this is very good events are very good for audit logging but if you do the traditional audit logging and not",
    "start": "1802279",
    "end": "1807320"
  },
  {
    "text": "even answers it's only like we're logging just a subset of the information that we needed not the whole state not",
    "start": "1807320",
    "end": "1813380"
  },
  {
    "text": "the whole transition of state so for example in the student registration you might have something in your audit lab",
    "start": "1813380",
    "end": "1819080"
  },
  {
    "text": "student status change by who at what date and that's all you see in the log whereas in an Event Source you have the",
    "start": "1819080",
    "end": "1825740"
  },
  {
    "text": "full picture of the current state of the student at the time something has changed",
    "start": "1825740",
    "end": "1831980"
  },
  {
    "text": "all right who wants to implement Event Source now",
    "start": "1831980",
    "end": "1837860"
  },
  {
    "text": "no one me okay there's one more thing",
    "start": "1837860",
    "end": "1844760"
  },
  {
    "text": "in the list of nuances change data capture",
    "start": "1844760",
    "end": "1850100"
  },
  {
    "text": "so we have just been talking about data all the time data persistent in log data persisted as",
    "start": "1850100",
    "end": "1857840"
  },
  {
    "text": "Event Source in an event store all of this is just data persistence or manipulation of data so what is the",
    "start": "1857840",
    "end": "1865940"
  },
  {
    "text": "difference with our event logs with our traditional database with our batch files Etc so to change data capture is",
    "start": "1865940",
    "end": "1872659"
  },
  {
    "text": "kind of a current feature of some of the modern databases nowadays so what it means is",
    "start": "1872659",
    "end": "1878899"
  },
  {
    "text": "that every time a document if it's an if it's a document database for example or",
    "start": "1878899",
    "end": "1884000"
  },
  {
    "text": "a record in an rdbms has been created or changed or updated or deleted",
    "start": "1884000",
    "end": "1889940"
  },
  {
    "text": "it fires an event that you can consume that you can listen to as a component",
    "start": "1889940",
    "end": "1895580"
  },
  {
    "text": "um so for example let's say Azure Cosmos DB has the concept of change feed so",
    "start": "1895580",
    "end": "1900860"
  },
  {
    "text": "every time you manipulate the document you can listen to the feed you can fire up an Azure function that binds to the",
    "start": "1900860",
    "end": "1907039"
  },
  {
    "text": "change feed and do some logic to it and you can also use like normal.net core",
    "start": "1907039",
    "end": "1914799"
  },
  {
    "text": "application to use the change feed processor so that you can go through the feed and do some action",
    "start": "1914799",
    "end": "1921799"
  },
  {
    "text": "so yeah certainly we can do this in an event driven in our event-driven landscape",
    "start": "1921799",
    "end": "1927820"
  },
  {
    "text": "but it's like the concept of something happening in the database and you know hooking up to it is also not new we also",
    "start": "1927820",
    "end": "1935120"
  },
  {
    "text": "have the concept of database triggers before where we write some custom code because something has happened and we",
    "start": "1935120",
    "end": "1940700"
  },
  {
    "text": "also have transaction logs in the database but they were never really designed for you know chaining commands",
    "start": "1940700",
    "end": "1945799"
  },
  {
    "text": "and events before like the the transaction like the audit log is again meant for",
    "start": "1945799",
    "end": "1951020"
  },
  {
    "text": "thinking what happened before but it's not to execute a particular business or domain domain process",
    "start": "1951020",
    "end": "1959480"
  },
  {
    "text": "so what what in my book with the change change data capture it",
    "start": "1959480",
    "end": "1965960"
  },
  {
    "text": "for me if I use it to execute business logic based on what happened to a",
    "start": "1965960",
    "end": "1971899"
  },
  {
    "text": "document or to a database record it doesn't feel right because it's so much related to the infrastructure and not to",
    "start": "1971899",
    "end": "1978559"
  },
  {
    "text": "the business when we walk around registering a student we don't talk about oh did you update the database or",
    "start": "1978559",
    "end": "1983659"
  },
  {
    "text": "maybe you do but it's like it's it's not close to the real world we're getting tied up we're getting a dependency on",
    "start": "1983659",
    "end": "1989659"
  },
  {
    "text": "our infrastructure layer because events are actually you know on the application",
    "start": "1989659",
    "end": "1994700"
  },
  {
    "text": "layer it describes the flow of events in the business but hooking up to a database doesn't feel right for me",
    "start": "1994700",
    "end": "2002440"
  },
  {
    "text": "to be used to to complete a business process maybe you can use the change data capture to",
    "start": "2002440",
    "end": "2008919"
  },
  {
    "text": "manipulate your data so for example in Cosmos TV you can hook up to this event if you want to maybe copy the data into",
    "start": "2008919",
    "end": "2015760"
  },
  {
    "text": "a different container so you can change the partitioning strategy that is more optimized for a different type of read",
    "start": "2015760",
    "end": "2022600"
  },
  {
    "text": "so maybe you can use the change data capture to just you know transform your",
    "start": "2022600",
    "end": "2027940"
  },
  {
    "text": "data in your database and then save it again in the same database so it's a lot of more manipulation within the",
    "start": "2027940",
    "end": "2033220"
  },
  {
    "text": "infrastructure layer and not the business you would certainly use it together you can certainly use change data capturing",
    "start": "2033220",
    "end": "2040840"
  },
  {
    "text": "Cosmos DB if you have an Event Source there and then push that into um to your event stream let's say to",
    "start": "2040840",
    "end": "2048040"
  },
  {
    "text": "your uh to Costco or to to Azure event hub",
    "start": "2048040",
    "end": "2053919"
  },
  {
    "text": "it can work and you just make sure that you know what you're doing and what are the trade-offs",
    "start": "2053919",
    "end": "2060539"
  },
  {
    "text": "so now um I guess it's a little I hope it's a little clearer the the terminologies and",
    "start": "2062619",
    "end": "2068500"
  },
  {
    "text": "nuances let's take a look at the different services in Azure that we can use for particular use cases",
    "start": "2068500",
    "end": "2074440"
  },
  {
    "text": "so there are a lot it's just if you go there and say like do event-driven architecture then you're already",
    "start": "2074440",
    "end": "2080320"
  },
  {
    "text": "bombarded with a lot of different options so it's a matter of understanding again your stories in your",
    "start": "2080320",
    "end": "2086440"
  },
  {
    "text": "use case and then Weighing on the trade-offs and and seeing what works",
    "start": "2086440",
    "end": "2092020"
  },
  {
    "text": "right and again just a reminder that when you analyze trade-offs architectural trade-offs don't just",
    "start": "2092020",
    "end": "2098020"
  },
  {
    "text": "focus on the technology you also have to focus on your people the ones who are going to implement this their maturity",
    "start": "2098020",
    "end": "2104619"
  },
  {
    "text": "level the the developers the Ops that's going to maintain this infrastructure the cost of it so it's not just like the",
    "start": "2104619",
    "end": "2111700"
  },
  {
    "text": "technical features or architectural features of the services that you need to focus on so what are the services for the simple",
    "start": "2111700",
    "end": "2119140"
  },
  {
    "text": "async request the one we were talking about earlier where you have a queue that could do load balancing or load",
    "start": "2119140",
    "end": "2125619"
  },
  {
    "text": "leveling you can start with the storage queue it's a cheaper option it has a very strong SLA and the good thing with",
    "start": "2125619",
    "end": "2131500"
  },
  {
    "text": "the Azure very simple Azure storage queue is it actually has a larger maximum limit for the size of your queue",
    "start": "2131500",
    "end": "2138280"
  },
  {
    "text": "because it's storage yeah it says files so it can accommodate 500 to 500",
    "start": "2138280",
    "end": "2143740"
  },
  {
    "text": "terabytes of worth of messages which is a lot so if you need to push",
    "start": "2143740",
    "end": "2149560"
  },
  {
    "text": "large messages you could start with this but again it's it's a cue so it's pool",
    "start": "2149560",
    "end": "2154839"
  },
  {
    "text": "style and it can only guarantee at least once that's another thing we need to",
    "start": "2154839",
    "end": "2159880"
  },
  {
    "text": "remember like at least once it means that maybe it persists the message so if",
    "start": "2159880",
    "end": "2165280"
  },
  {
    "text": "the queue goes down it persisted it somewhere so it goes up again that message is still there but you cannot guarantee that you will",
    "start": "2165280",
    "end": "2172060"
  },
  {
    "text": "only receive it once you might receive it twice or twice or I don't know 100 times and your",
    "start": "2172060",
    "end": "2178060"
  },
  {
    "text": "um your your processor your event processor needs to be able to have to handle that that duplication",
    "start": "2178060",
    "end": "2184060"
  },
  {
    "text": "if you need a little bit more advanced messaging um and and yeah with with features like",
    "start": "2184060",
    "end": "2192940"
  },
  {
    "text": "um ordering or uh request reply patterns then service bus",
    "start": "2192940",
    "end": "2199119"
  },
  {
    "text": "is probably your next choice and it's also full style but be mindful of the limits on",
    "start": "2199119",
    "end": "2206560"
  },
  {
    "text": "the amount of data that you can put so if you're pushing large messages you",
    "start": "2206560",
    "end": "2212260"
  },
  {
    "text": "might end up exhausting exhausting the 80 gigabytes but it can guarantee at least at most",
    "start": "2212260",
    "end": "2219400"
  },
  {
    "text": "once so that means it has some logic already to do or algorithm already to do",
    "start": "2219400",
    "end": "2224980"
  },
  {
    "text": "some you know deduplication supports that lettering so you can also subscribe to a dead",
    "start": "2224980",
    "end": "2232119"
  },
  {
    "text": "letter and do you know your error handling after that um",
    "start": "2232119",
    "end": "2237880"
  },
  {
    "text": "and it also supports you know the concept of sessions so you can assign a",
    "start": "2237880",
    "end": "2243760"
  },
  {
    "text": "consumer or yeah or event consumer event processor to the same session and every",
    "start": "2243760",
    "end": "2250000"
  },
  {
    "text": "time you push messages within that same session let's say again the student registration flow there could be several",
    "start": "2250000",
    "end": "2256660"
  },
  {
    "text": "messages related to the same student which is the same session then from there you can guarantee the order if you",
    "start": "2256660",
    "end": "2263320"
  },
  {
    "text": "don't have sessions and you have competing consumers you cannot guarantee order in service bus so have to remember",
    "start": "2263320",
    "end": "2268660"
  },
  {
    "text": "that and then it also supports you know transactions which is also really really",
    "start": "2268660",
    "end": "2274359"
  },
  {
    "text": "important so if your consumer is if you're a producer is pushing data within",
    "start": "2274359",
    "end": "2280839"
  },
  {
    "text": "the same transaction if one of those messages fail it can roll back the rest of the the events or the messages so if",
    "start": "2280839",
    "end": "2287859"
  },
  {
    "text": "you have that kind of need then service bus is is your choice and then we go to like the more pub sub",
    "start": "2287859",
    "end": "2295200"
  },
  {
    "text": "pattern like the the one I showed you with um with uh with a choreography",
    "start": "2295200",
    "end": "2300700"
  },
  {
    "text": "pattern with a broker pattern and the next you know candidate would be the event grid so event grid is really",
    "start": "2300700",
    "end": "2307839"
  },
  {
    "text": "um built for also push style modification so versus like the the two other cues or pool",
    "start": "2307839",
    "end": "2314440"
  },
  {
    "text": "style so that means your consumers need to be able to know how to connect to your messaging service",
    "start": "2314440",
    "end": "2320560"
  },
  {
    "text": "so it has that information whereas if it's event Grid it's push style then it's the event grid who knows or",
    "start": "2320560",
    "end": "2327339"
  },
  {
    "text": "understands how to connect to the subscriber there's a big difference like for example you can use event grid to",
    "start": "2327339",
    "end": "2332920"
  },
  {
    "text": "also push data outside of your organization as long as you have access to that let's say in the student",
    "start": "2332920",
    "end": "2338560"
  },
  {
    "text": "enrollment maybe you need to connect to some web hook for the government system and you you have the authentication you",
    "start": "2338560",
    "end": "2344560"
  },
  {
    "text": "can do that in vent grid but that government system couldn't",
    "start": "2344560",
    "end": "2349780"
  },
  {
    "text": "just listen to your internal service bus so you have to think about that the and",
    "start": "2349780",
    "end": "2357579"
  },
  {
    "text": "because it event grid can do this it also requires that the consumers or the",
    "start": "2357579",
    "end": "2363040"
  },
  {
    "text": "subscribers have a public IP so that might be an issue for you if you can't do that in your network",
    "start": "2363040",
    "end": "2369880"
  },
  {
    "text": "um it's a serverless it's massively scalable it can just push I don't know millions of notifications to a single",
    "start": "2369880",
    "end": "2377020"
  },
  {
    "text": "consumer per second so you have to make sure that your consumer can also you know accommodate that maybe put a",
    "start": "2377020",
    "end": "2383440"
  },
  {
    "text": "service bus in front of it so that you can also do load leveling and load balancing",
    "start": "2383440",
    "end": "2389700"
  },
  {
    "text": "so for event stream there are also several services in Azure that you can use",
    "start": "2390640",
    "end": "2396579"
  },
  {
    "text": "event Hub and the very popular event streaming product by which is Apache",
    "start": "2396579",
    "end": "2402760"
  },
  {
    "text": "Kafka and you can run Apache Kafka on your own if you have the capability and",
    "start": "2402760",
    "end": "2408280"
  },
  {
    "text": "you can do the entire operation of your Kafka clusters in your VMS or containers",
    "start": "2408280",
    "end": "2414099"
  },
  {
    "text": "or in your in your kubernetes clusters but you can also use a cloud-based Kafka",
    "start": "2414099",
    "end": "2420460"
  },
  {
    "text": "which is run by Confluence and of course you let them manage it you pay them to do that it's much easier for you and",
    "start": "2420460",
    "end": "2428140"
  },
  {
    "text": "then you have event Hub event Hub is very similar to what Kafka can do when it comes to streaming but it's of course",
    "start": "2428140",
    "end": "2434500"
  },
  {
    "text": "Azure native supports https and amqp style messaging you can there's",
    "start": "2434500",
    "end": "2439960"
  },
  {
    "text": "different tiers and you can read all about the the different limits in event Hub but the good thing about event Hub",
    "start": "2439960",
    "end": "2446440"
  },
  {
    "text": "is that it's like portable to Kafka so if you have code that talks to Kafka because you have Kafka running somewhere",
    "start": "2446440",
    "end": "2452079"
  },
  {
    "text": "else outside Azure you don't have to change your code to be able to connect to the event Hub and then you take",
    "start": "2452079",
    "end": "2457240"
  },
  {
    "text": "advantage of all the service level agreements from Azure for for event hub",
    "start": "2457240",
    "end": "2463060"
  },
  {
    "text": "for Event Source we don't really dictate what you can use to store your events of course there are some persistence uh",
    "start": "2463060",
    "end": "2471700"
  },
  {
    "text": "products that built for events but on the cloud you can use pretty much any",
    "start": "2471700",
    "end": "2478599"
  },
  {
    "text": "Cloud database in Azure like SQL or your storage or manage postgres or Cosmos DB",
    "start": "2478599",
    "end": "2488280"
  },
  {
    "text": "all right so I didn't talk about some of the integration Services because it's a",
    "start": "2488619",
    "end": "2494619"
  },
  {
    "text": "little bit too much to deal with but what I mentioned already that bigger picture this is all integration",
    "start": "2494619",
    "end": "2502060"
  },
  {
    "text": "integration point so you have logic apps Azure durable functions Azure functions API management to do several things to",
    "start": "2502060",
    "end": "2508960"
  },
  {
    "text": "be able to pull this all together your workflow",
    "start": "2508960",
    "end": "2513000"
  },
  {
    "text": "let's look at let's look a little bit on on code I have a very simple sample code",
    "start": "2514900",
    "end": "2520119"
  },
  {
    "text": "just so um we kind of have an understanding how this is gonna look like in real and if I",
    "start": "2520119",
    "end": "2526540"
  },
  {
    "text": "replace all those uh funny diagrams I showed you earlier with actual uh Azure",
    "start": "2526540",
    "end": "2532240"
  },
  {
    "text": "Services then you can see that we can put it all together I'm not saying that this is the most optimized solution I'm just using this so that we can",
    "start": "2532240",
    "end": "2538540"
  },
  {
    "text": "illustrate the point that you can actually have service bus managing the the the load for your for",
    "start": "2538540",
    "end": "2546400"
  },
  {
    "text": "your um for your requests and then you can publish your events to an event grid you can have event grid push that data",
    "start": "2546400",
    "end": "2553420"
  },
  {
    "text": "into other service buses that your other components like classes and books are",
    "start": "2553420",
    "end": "2558700"
  },
  {
    "text": "listening to and then you can save your um your your state or your events in Cosmos",
    "start": "2558700",
    "end": "2567760"
  },
  {
    "text": "TV all right",
    "start": "2567760",
    "end": "2572220"
  },
  {
    "text": "so this is a very simple implementation just so we get an idea how this works so",
    "start": "2573280",
    "end": "2578859"
  },
  {
    "text": "in this code or in this application I have three different distinct applications and the goal is that they",
    "start": "2578859",
    "end": "2584619"
  },
  {
    "text": "don't talk to each other they don't have reference to each other they don't invoke each other's API directly because",
    "start": "2584619",
    "end": "2589960"
  },
  {
    "text": "otherwise if you do that you're essentially building you know baby monoliths that's just inside the nursery",
    "start": "2589960",
    "end": "2595660"
  },
  {
    "text": "and like you know playing and making chaos so I have three separate apis the",
    "start": "2595660",
    "end": "2601599"
  },
  {
    "text": "students the classes and the books and I just wanted to show like how we create",
    "start": "2601599",
    "end": "2607540"
  },
  {
    "text": "classes or model um our our commands and our events so this is the command for when you want to",
    "start": "2607540",
    "end": "2615700"
  },
  {
    "text": "register your student and you will have a Handler and in this particular um sample code I'm also using a library",
    "start": "2615700",
    "end": "2623880"
  },
  {
    "text": "very familiar with the mediator Library yeah so that library is a lightweight",
    "start": "2623880",
    "end": "2629200"
  },
  {
    "text": "library for in-process messaging and it can help you with all your command invocation and your event",
    "start": "2629200",
    "end": "2637740"
  },
  {
    "text": "handler invocation without all the headaches of dependency",
    "start": "2637740",
    "end": "2644260"
  },
  {
    "text": "injection so it makes it very easy to invoke these commands handlers and event handlers based on the signature of your",
    "start": "2644260",
    "end": "2649900"
  },
  {
    "text": "commands and events and so it looks through your assembly and that's the the magic so I'm using mediator here you can",
    "start": "2649900",
    "end": "2657040"
  },
  {
    "text": "use other um libraries I think there's Ian Cooper He's also talking a lot about event",
    "start": "2657040",
    "end": "2662380"
  },
  {
    "text": "driven and he's also you know showing code in in brighter you can also check that out so the the whole idea is that",
    "start": "2662380",
    "end": "2668680"
  },
  {
    "text": "you have the command and um and then you have an event handler inside my event handler I might do some logic and then",
    "start": "2668680",
    "end": "2676300"
  },
  {
    "text": "at the end of it I'll publish the the event called student register and I would have two handlers for the event",
    "start": "2676300",
    "end": "2683200"
  },
  {
    "text": "one is writing to the event grid so I can do my you know publishing to an",
    "start": "2683200",
    "end": "2688300"
  },
  {
    "text": "integration and then I also have another Handler for storing that particular event to my",
    "start": "2688300",
    "end": "2696280"
  },
  {
    "text": "persistence so the difference between a command and a command Handler in an event and event",
    "start": "2696280",
    "end": "2701560"
  },
  {
    "text": "handler is that command can only have one Handler so it will only invoke one Handler but if you do so if you look at",
    "start": "2701560",
    "end": "2708579"
  },
  {
    "text": "this uh code with the mediator so if you invoke",
    "start": "2708579",
    "end": "2714640"
  },
  {
    "text": "publish it will find all the handlers that implements that particular signature for your event so it will",
    "start": "2714640",
    "end": "2721599"
  },
  {
    "text": "execute it so it's one to one versus one to many so you can design your application like that so I have that and",
    "start": "2721599",
    "end": "2729400"
  },
  {
    "text": "once once that's done once I called it it will also automatically enroll the",
    "start": "2729400",
    "end": "2735700"
  },
  {
    "text": "student in several classes by writing to event grid and the event grid pushing to a service bus and then",
    "start": "2735700",
    "end": "2742119"
  },
  {
    "text": "this classes API is listening to that service bus again if you're using Azure functions you can easily do this by",
    "start": "2742119",
    "end": "2748359"
  },
  {
    "text": "binding your functions because that's inherently event driven binding your functions to service bus but in this",
    "start": "2748359",
    "end": "2753520"
  },
  {
    "text": "case because this is a.net core web API I used a what you call a hosted service",
    "start": "2753520",
    "end": "2761260"
  },
  {
    "text": "which is like a background service that gets started as soon as you start your application and then it's just open it",
    "start": "2761260",
    "end": "2767200"
  },
  {
    "text": "will call the service bus all the time to get a batch of messages and data so",
    "start": "2767200",
    "end": "2773920"
  },
  {
    "text": "it's very simple code here to implement I hosted service",
    "start": "2773920",
    "end": "2780240"
  },
  {
    "text": "so you you have the method for start a sync which will be invoked when you start the application and then you also",
    "start": "2780240",
    "end": "2786640"
  },
  {
    "text": "have to stop a sync when you close the application and you want to dispose all your objects but you then you implement",
    "start": "2786640",
    "end": "2792880"
  },
  {
    "text": "delegates for processing or so inside let's start I think you connect to the service bus and",
    "start": "2792880",
    "end": "2799480"
  },
  {
    "text": "then you create a processor client and then you implement delegates for processing the messages and processing",
    "start": "2799480",
    "end": "2805480"
  },
  {
    "text": "error messages so if you look at my code it's just simply with process message I also just",
    "start": "2805480",
    "end": "2812079"
  },
  {
    "text": "simply triggered the student registered notification I have some Handler down the line",
    "start": "2812079",
    "end": "2818819"
  },
  {
    "text": "okay let me just make sure that this is running",
    "start": "2820000",
    "end": "2824880"
  },
  {
    "text": "oops I'm missing an R",
    "start": "2825400",
    "end": "2829020"
  },
  {
    "text": "so you can see at the start it's already connecting to my service bus This Is My Demo service bus so it's",
    "start": "2834339",
    "end": "2839980"
  },
  {
    "text": "called juicy gossips ignore that and then I'm just gonna call my my apis",
    "start": "2839980",
    "end": "2847000"
  },
  {
    "text": "so this is the API for the students so as soon as I register a student here",
    "start": "2847000",
    "end": "2852880"
  },
  {
    "text": "that will be executed so I have my students registered and the",
    "start": "2852880",
    "end": "2858339"
  },
  {
    "text": "other thing is that remember that I have two event handlers one is to write to event grid and the other one is to store",
    "start": "2858339",
    "end": "2864520"
  },
  {
    "text": "that event so if I want to get all the events about students then I have that API student events and you can see this",
    "start": "2864520",
    "end": "2871119"
  },
  {
    "text": "is how an event look like so typically you would have a schema for the event you call the event schema you",
    "start": "2871119",
    "end": "2878200"
  },
  {
    "text": "would have your event type and schema version which is also very important because if you have consumers of your",
    "start": "2878200",
    "end": "2883300"
  },
  {
    "text": "events they you might want to tell them how your event would look like and if you want to change it you might want to",
    "start": "2883300",
    "end": "2888819"
  },
  {
    "text": "announce it and broadcast it that the scheme is changing with the new version and you need to upgrade so that's why you have the schema version here and",
    "start": "2888819",
    "end": "2895960"
  },
  {
    "text": "then underneath you have the actual data which is the full state of the student and when you change the state of the",
    "start": "2895960",
    "end": "2901960"
  },
  {
    "text": "student you it will also append a new event in the store and so what happens in the class if I go",
    "start": "2901960",
    "end": "2909339"
  },
  {
    "text": "to class and query that I can see that there's already one student enrolled fade which is the same as",
    "start": "2909339",
    "end": "2916660"
  },
  {
    "text": "this person and then if I add another one let's say",
    "start": "2916660",
    "end": "2922380"
  },
  {
    "text": "so if I do that you can see that this also there's now a new enrolled students",
    "start": "2925780",
    "end": "2931660"
  },
  {
    "text": "without calling the API so they don't have any relationship with each other it's just all integration within the",
    "start": "2931660",
    "end": "2937660"
  },
  {
    "text": "events with a very simple code so you can get this code um in my GitHub",
    "start": "2937660",
    "end": "2943720"
  },
  {
    "text": "I'll share that to you later so",
    "start": "2943720",
    "end": "2950319"
  },
  {
    "text": "event driven patterns let's get a little crazy and do something else",
    "start": "2950319",
    "end": "2955560"
  },
  {
    "text": "no one is crazy enough to to join me it's almost four o'clock",
    "start": "2955780",
    "end": "2961599"
  },
  {
    "text": "all right um what do we do with one of our projects so now we have just been talking about Native Azure services but",
    "start": "2961599",
    "end": "2968079"
  },
  {
    "text": "we can certainly do event driven or be very creative with the way we Implement event driven even though we're running",
    "start": "2968079",
    "end": "2973900"
  },
  {
    "text": "things that don't use native cloud services or Azure Services you can do it on our own based on our use case so in",
    "start": "2973900",
    "end": "2982660"
  },
  {
    "text": "our we're also building a student not just student a school system a larger school system for for Denmark and",
    "start": "2982660",
    "end": "2990640"
  },
  {
    "text": "um we thought about what if what if we Implement event driven",
    "start": "2990640",
    "end": "2996040"
  },
  {
    "text": "end-to-end in full stack from client all the way to the database because",
    "start": "2996040",
    "end": "3002300"
  },
  {
    "text": "so far we have just seen write events commands and then also it's",
    "start": "3002300",
    "end": "3007980"
  },
  {
    "text": "not asynchronous all the way because at some point inside your Handler you have to request something against the",
    "start": "3007980",
    "end": "3014280"
  },
  {
    "text": "database and then that's not a synchronous you have to wait for the database to reply that you have succeeded in persisting or updating your",
    "start": "3014280",
    "end": "3020700"
  },
  {
    "text": "data what we wanted to do is to make it a synchronous all the way to the data service and we will just receive streams",
    "start": "3020700",
    "end": "3027359"
  },
  {
    "text": "of results from all the layers and then push it all the way down to our clients",
    "start": "3027359",
    "end": "3032700"
  },
  {
    "text": "and that way we will make it very real time so every time One browser",
    "start": "3032700",
    "end": "3039240"
  },
  {
    "text": "um loads data and updates it all the other browsers that's looking at the same data will also receive it it's you",
    "start": "3039240",
    "end": "3045960"
  },
  {
    "text": "would say okay it's quite common that's like you know just using signalr but this one is with signalr you still have",
    "start": "3045960",
    "end": "3052980"
  },
  {
    "text": "like a little bit synchronous processing inside your API since it's calling the the database but we kind of want to",
    "start": "3052980",
    "end": "3059760"
  },
  {
    "text": "um experiment a bit and we're also looking at the different services that would best",
    "start": "3059760",
    "end": "3068660"
  },
  {
    "text": "do the job so this is what we came up with maybe it's familiar for some of you",
    "start": "3068660",
    "end": "3074880"
  },
  {
    "text": "maybe you have implemented it can you see it is it hard to see",
    "start": "3074880",
    "end": "3080400"
  },
  {
    "text": "okay let me just go through it so at the bottom you have all the clients so you have let's say for us we have a web",
    "start": "3080400",
    "end": "3087660"
  },
  {
    "text": "client and also a mobile client imagine that there is one student connecting to the same uh as the same student but",
    "start": "3087660",
    "end": "3093480"
  },
  {
    "text": "different devices right so those are different sessions and from our web client we fire up a",
    "start": "3093480",
    "end": "3101220"
  },
  {
    "text": "rest we start with the rest request but that's just to indicate that an event can happen so we had to indicate I want",
    "start": "3101220",
    "end": "3108540"
  },
  {
    "text": "to write this it's a request but I'm not expecting a result it's a command please write this and at the same time our",
    "start": "3108540",
    "end": "3114660"
  },
  {
    "text": "reads are also events we fire up an event say I have subscribed to a list of",
    "start": "3114660",
    "end": "3120359"
  },
  {
    "text": "students so let's say I from the client I want please create a student or please",
    "start": "3120359",
    "end": "3126180"
  },
  {
    "text": "register a student and let me subscribe to the list of students at the same time so we're not getting any results yet",
    "start": "3126180",
    "end": "3132380"
  },
  {
    "text": "we're just uh firing that up and then there's we have two separate apis so we",
    "start": "3132380",
    "end": "3137880"
  },
  {
    "text": "have a couple of apis for doing rights and we have one API that's doing query",
    "start": "3137880",
    "end": "3143040"
  },
  {
    "text": "and both of them are responsible for all this event that were fired by the client",
    "start": "3143040",
    "end": "3148980"
  },
  {
    "text": "to maintain a state of that so the subscribers so we have in our query layer and our API layer sort of a cached",
    "start": "3148980",
    "end": "3157020"
  },
  {
    "text": "or a state of all the subscribers so we know how to get back to them later on we know how to inform them once the",
    "start": "3157020",
    "end": "3163260"
  },
  {
    "text": "processing has completed and then before we reach the database we",
    "start": "3163260",
    "end": "3169319"
  },
  {
    "text": "have a data service where we have a websocket connection so in within the websocket we just say I",
    "start": "3169319",
    "end": "3176220"
  },
  {
    "text": "want to write this to the database but I'm not going to wait for the reply just inform you when it's done when your",
    "start": "3176220",
    "end": "3182339"
  },
  {
    "text": "database operation is done and that's the same with our query I need the list of students but I'm not going to wait",
    "start": "3182339",
    "end": "3188040"
  },
  {
    "text": "for reply then you know with this pattern because it's totally asynchronous they're all independent you",
    "start": "3188040",
    "end": "3193440"
  },
  {
    "text": "can pretty much be very flexible and scalable so the data service talks to the",
    "start": "3193440",
    "end": "3198900"
  },
  {
    "text": "database and in this case we're actually implement we used we chose to use a",
    "start": "3198900",
    "end": "3203940"
  },
  {
    "text": "database called xtdb anyone familiar so xtdb is its base enclosure",
    "start": "3203940",
    "end": "3212280"
  },
  {
    "text": "and it's a unbundled by temporal database it runs in a",
    "start": "3212280",
    "end": "3218460"
  },
  {
    "text": "container so we can run it on the cloud and when I say by temporal then it's by default inherently it saves two types of",
    "start": "3218460",
    "end": "3224640"
  },
  {
    "text": "data and an event driven application time is very important attribute and in",
    "start": "3224640",
    "end": "3230880"
  },
  {
    "text": "this database by default it's very optimized to to save to or look or query",
    "start": "3230880",
    "end": "3238380"
  },
  {
    "text": "or index two time dimensions that's why it's by temporal transaction time and value time you have a lot of temporal",
    "start": "3238380",
    "end": "3245460"
  },
  {
    "text": "databases dynamodb is temporal you save transaction time you can go back in time but for xddb you can go back in time in",
    "start": "3245460",
    "end": "3251940"
  },
  {
    "text": "different dimensions one is the transaction time when the event was committed and the other one went the",
    "start": "3251940",
    "end": "3257760"
  },
  {
    "text": "event is actually supposed to be valid so for example use register your student and that student is registered today but",
    "start": "3257760",
    "end": "3265020"
  },
  {
    "text": "it's actually the registration is only valid next month so the xtdb is very good at indexing that so that you can",
    "start": "3265020",
    "end": "3271980"
  },
  {
    "text": "query what is really happening and when it really happened",
    "start": "3271980",
    "end": "3277079"
  },
  {
    "text": "um and the other thing with xcdb is it's unbundled so to be able to execute that that sort of because it can also be very",
    "start": "3277079",
    "end": "3284099"
  },
  {
    "text": "uh scalable so it has clients or nodes to be able to do that it also uses the",
    "start": "3284099",
    "end": "3290339"
  },
  {
    "text": "concept of event streams or immutable logs of database transactions and to",
    "start": "3290339",
    "end": "3297059"
  },
  {
    "text": "make it more powerful you can use Kafka so you can choose whatever",
    "start": "3297059",
    "end": "3302220"
  },
  {
    "text": "storage there is that you can use to log transactions and to actually save the",
    "start": "3302220",
    "end": "3309359"
  },
  {
    "text": "document the attribute so you have the document database or the document storage and the transaction storage and",
    "start": "3309359",
    "end": "3315119"
  },
  {
    "text": "you can choose from the plethora of data Platforms in cloud or hybrid what to use",
    "start": "3315119",
    "end": "3320400"
  },
  {
    "text": "so the core xcdb is just very lightweight so we use that it's closure based it's kind of smart sometimes I get",
    "start": "3320400",
    "end": "3326880"
  },
  {
    "text": "confused what it's doing because I don't write closure my my colleagues do so our data service is also running closure",
    "start": "3326880",
    "end": "3332880"
  },
  {
    "text": "it's in a container so it still runs in the cloud we can put that in Azure app container service",
    "start": "3332880",
    "end": "3337920"
  },
  {
    "text": "that is that right yeah no Azure container apps here I'm getting confused Azure container app so that we can make",
    "start": "3337920",
    "end": "3343920"
  },
  {
    "text": "it scalable but once the processing is done in the data services pushes back to the query that has all the um all the uh",
    "start": "3343920",
    "end": "3352319"
  },
  {
    "text": "again the states of all the subscriptions or ongoing subscription and it will only update let's say you",
    "start": "3352319",
    "end": "3358020"
  },
  {
    "text": "subscribe to list of students then it will update that cache the data service will via the websocket and the query",
    "start": "3358020",
    "end": "3364260"
  },
  {
    "text": "service pushes down to all the clients so if you have 10 000 students listening to get students they will all be updated",
    "start": "3364260",
    "end": "3371119"
  },
  {
    "text": "and they don't have to refresh a page",
    "start": "3371119",
    "end": "3375440"
  },
  {
    "text": "let's look a little bit very quickly on our test",
    "start": "3377040",
    "end": "3382200"
  },
  {
    "text": "UI for that um",
    "start": "3382200",
    "end": "3387480"
  },
  {
    "text": "so we have a UI that could illustrate what's happening with our data",
    "start": "3387480",
    "end": "3395059"
  },
  {
    "text": "um so if I hear this and we connect so I have two browsers two different sessions and like I said every single",
    "start": "3395280",
    "end": "3403339"
  },
  {
    "text": "transactions you do whether it's a reader right it's an event so these are a list of our events and each of these",
    "start": "3403339",
    "end": "3408420"
  },
  {
    "text": "events have schema so I can have an event called query by students by a school",
    "start": "3408420",
    "end": "3414380"
  },
  {
    "text": "schools by sorry students by school attribute and if I say ngg",
    "start": "3414380",
    "end": "3422700"
  },
  {
    "text": "here so I get a list of all the data here and that's just live yeah and then from the",
    "start": "3422700",
    "end": "3429540"
  },
  {
    "text": "other browser I can do the same I can subscribe to students",
    "start": "3429540",
    "end": "3434720"
  },
  {
    "text": "by School attribute ngg",
    "start": "3434720",
    "end": "3440700"
  },
  {
    "text": "and you can see very fast that if I try to change one student here",
    "start": "3440700",
    "end": "3446640"
  },
  {
    "text": "let me find you sir Siri two here so if I change this person's name to Mary lug",
    "start": "3446640",
    "end": "3456380"
  },
  {
    "text": "and update that you can see this also updated in the same session using this Paradigm everything is event",
    "start": "3456660",
    "end": "3463500"
  },
  {
    "text": "driven all right I have a few minutes left",
    "start": "3463500",
    "end": "3470040"
  },
  {
    "text": "so just go through again when you start implementing event driven or you're in the middle of it",
    "start": "3470040",
    "end": "3475859"
  },
  {
    "text": "there are so many things that we need to consider event schema I have mentioned that having a kind of a central",
    "start": "3475859",
    "end": "3481800"
  },
  {
    "text": "repository of all your events if you're working in a big Enterprise would be helpful so that you can publish the",
    "start": "3481800",
    "end": "3487440"
  },
  {
    "text": "catalogs for example the Azure in Azure you have GitHub repository for all their",
    "start": "3487440",
    "end": "3493740"
  },
  {
    "text": "schemas for all the events that they fire from their infrastructure and you can use autorest to be able to",
    "start": "3493740",
    "end": "3499920"
  },
  {
    "text": "Auto generate because they use open API they can use autores to Auto generate some of this as you know into into code",
    "start": "3499920",
    "end": "3508160"
  },
  {
    "text": "effectively once exactly once all these how many times the indempotence of your",
    "start": "3508160",
    "end": "3513660"
  },
  {
    "text": "applications or your API and consumers ordering if you need that is very important in your design how do you",
    "start": "3513660",
    "end": "3519660"
  },
  {
    "text": "handle error in a distributed system how do you trace all the events using a",
    "start": "3519660",
    "end": "3527160"
  },
  {
    "text": "correlation ID for all the related events and very important security and",
    "start": "3527160",
    "end": "3532319"
  },
  {
    "text": "privacy now that we're dealing with data that resides everywhere data in transit all the time so now we start talking",
    "start": "3532319",
    "end": "3538260"
  },
  {
    "text": "about you know privacy how do we can we actually delete data from an immutable database or invent log so you know",
    "start": "3538260",
    "end": "3544799"
  },
  {
    "text": "things we need to talk about to think about we learned a lot different patterns what can we use that we can",
    "start": "3544799",
    "end": "3552359"
  },
  {
    "text": "actually also be very creative and do full stack event driven using Open Source xddb by the ways open source but",
    "start": "3552359",
    "end": "3559500"
  },
  {
    "text": "if you want to learn more I'm going to share the links I want to you know also recommend two books that I really like",
    "start": "3559500",
    "end": "3566220"
  },
  {
    "text": "designing data intensive application by Martin clepman and fundamentals of software architecture by Mark Richards",
    "start": "3566220",
    "end": "3572520"
  },
  {
    "text": "and Neil Ford and I'm going to share my GitHub account that second one there the designing data intensive application",
    "start": "3572520",
    "end": "3578280"
  },
  {
    "text": "made me cry I didn't know that it books can make you cry who does that",
    "start": "3578280",
    "end": "3583319"
  },
  {
    "text": "thank you so much NDC please reach out on Twitter at marilog and that's me at",
    "start": "3583319",
    "end": "3590640"
  },
  {
    "text": "some Hotel doing my star jump thank you [Applause]",
    "start": "3590640",
    "end": "3602760"
  }
]