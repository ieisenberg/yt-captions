[
  {
    "text": "um I'm John Reger I'm a professor at the University of Utah and I'm going to talk about something that I've worked on for you know the last 15 years or so so I'm",
    "start": "4799",
    "end": "11759"
  },
  {
    "text": "just sort of curious how many people uh here have reported a compiler bug good good good good uh how many",
    "start": "11759",
    "end": "18800"
  },
  {
    "text": "people so this should be a super set right have been 100% sure you've seen a compiler bug but maybe didn't report one",
    "start": "18800",
    "end": "24880"
  },
  {
    "text": "yeah sure sure sure reporting one's a pain right it's it's it's sort of you know it's it's it takes work and um many",
    "start": "24880",
    "end": "30800"
  },
  {
    "text": "people probably ran into one but aren't 100% certain yeah sometimes it's hard right",
    "start": "30800",
    "end": "37200"
  },
  {
    "text": "because like the compiler bugs are in the kind of corner cases of the standard where you don't understand the they the compiler developers don't either right",
    "start": "37200",
    "end": "43480"
  },
  {
    "text": "so like you know some sometimes yeah sometimes we're not sure um you know if it crashes that's easy but today I'm going to talk more about uh the kind of",
    "start": "43480",
    "end": "50399"
  },
  {
    "text": "bugs that are not so easy um so so compiler bugs show themselves in a variety of ways right uh",
    "start": "50399",
    "end": "57280"
  },
  {
    "text": "sometimes the compiler just exits abnormally other times it uh quite",
    "start": "57280",
    "end": "62399"
  },
  {
    "text": "commonly actually emits improper debug debug code uh for you know improper debug symbols and things um sometimes it",
    "start": "62399",
    "end": "68880"
  },
  {
    "text": "errors out when it shouldn't sometimes it shouldn't error out but it does uh lovm sort of likes to uh hang forever",
    "start": "68880",
    "end": "76920"
  },
  {
    "text": "because sometimes two optimizations kind of get in a fight and uh just undo each other forever and so the compiler hangs",
    "start": "76920",
    "end": "84000"
  },
  {
    "text": "um and the kind of compiler bug that I sort of probably will focus on the most here is the kind where it emits code",
    "start": "84000",
    "end": "90720"
  },
  {
    "text": "silently you know without telling you that doesn't do what you said to do um that's kind of the most pricious kind",
    "start": "90720",
    "end": "96520"
  },
  {
    "text": "probably and you know a lot of these anyway those are the kind that I sort of",
    "start": "96520",
    "end": "101640"
  },
  {
    "text": "have have dealt with the most um so let me just tell a sort of a really quick story about an embedded C compiler so I",
    "start": "101640",
    "end": "106880"
  },
  {
    "text": "was teaching an embedded software class back when I was a fresh young new professor you know 20 years ago and um",
    "start": "106880",
    "end": "113640"
  },
  {
    "text": "we spent a lot of time in the class just looking at code we'd look at some C code and we look at the translation and of course this is what you do in an a beta",
    "start": "113640",
    "end": "118680"
  },
  {
    "text": "systems class you're so close to the you want to sort of know what the compiler is doing what it's thinking and a student sort of uh said uh hey professor",
    "start": "118680",
    "end": "126439"
  },
  {
    "text": "uh that looks wrong you know the trans the translation looked looked wrong and I hadn't noticed this and a student was",
    "start": "126439",
    "end": "132520"
  },
  {
    "text": "right and I just assumed I had done a cut cut and paste error while making my slides but I checked later that evening and um I hadn't made a cut and paste",
    "start": "132520",
    "end": "138840"
  },
  {
    "text": "error the compiler was wrong and um on Tuesday night um John Hay sort of",
    "start": "138840",
    "end": "143959"
  },
  {
    "text": "mentioned this kind of phenomenon where you sort of start to look into something and each time you look into it something gets worse and you get angrier and more",
    "start": "143959",
    "end": "149800"
  },
  {
    "text": "frustrated and it just it just really started to bother me more and more um over the sub succeeding years that this",
    "start": "149800",
    "end": "156920"
  },
  {
    "text": "thing which we trust to do the job just wasn't doing the job and this this particular Rea compiler I won't mention its name but it was really wrong it was",
    "start": "156920",
    "end": "164120"
  },
  {
    "text": "almost harder to get it to generate correct code than incorrect code um you know of course that's not the case for most compilers we use and I don't",
    "start": "164120",
    "end": "170599"
  },
  {
    "text": "unfortunately have the example anymore of that compiler I've lot sort of the the actual code Snippets have been lost",
    "start": "170599",
    "end": "176319"
  },
  {
    "text": "to time but I'll show you a different example so here's an embedded system sish snippet of code you know you",
    "start": "176319",
    "end": "182080"
  },
  {
    "text": "wouldn't write this code right this isn't useful but um so we have volatile INX and um we we load it and then store",
    "start": "182080",
    "end": "187239"
  },
  {
    "text": "it and you know according to the rules for volatile this needs to result at the at the um generated code level at as a",
    "start": "187239",
    "end": "193080"
  },
  {
    "text": "load in a store of the same value and um MSP 430 GCC at the time I started",
    "start": "193080",
    "end": "198840"
  },
  {
    "text": "looking into all this uh emitted uh just a return it just said optimize it away",
    "start": "198840",
    "end": "204720"
  },
  {
    "text": "uh and actually still does I just went to compiler explore just before this talk and the current version still does",
    "start": "204720",
    "end": "210000"
  },
  {
    "text": "like what the hell like how do embedded systems work if it's just optimizing away accesses to viables I don't know",
    "start": "210000",
    "end": "216519"
  },
  {
    "text": "some some of these things don't have here here's another one where I don't have a good answer so this is a function so this is a silly function right this",
    "start": "216519",
    "end": "222680"
  },
  {
    "text": "is a silly small function designed to expose a compiler bug but this function has to return zero on you know Common",
    "start": "222680",
    "end": "229680"
  },
  {
    "text": "implementation defined platforms and um years ago the the the vers the then",
    "start": "229680",
    "end": "235159"
  },
  {
    "text": "current version of wuntu Linux shipped with a version of GCC that made it return one at all optimization level s",
    "start": "235159",
    "end": "240360"
  },
  {
    "text": "and like every single package including the kernel on this on this distribution was compiled with this compiler like how",
    "start": "240360",
    "end": "246840"
  },
  {
    "text": "did it work like I don't know I've never I've never even understood this right like and this this this particular bug",
    "start": "246840",
    "end": "252599"
  },
  {
    "text": "was you know a very nasty one it wasn't actually a GCC defect it was that the abunto people had somehow saw fit to uh",
    "start": "252599",
    "end": "259000"
  },
  {
    "text": "apply about five megabytes of patches to GCC and then and then deploy that one and they they broke things sort of badly",
    "start": "259000",
    "end": "266040"
  },
  {
    "text": "so um so I don't want to give you the impression that all the compiler bugs are you know 20 years ago so here's one that's just from last month um so here's",
    "start": "266040",
    "end": "273000"
  },
  {
    "text": "a compiler a GCC developer replying to my student who reported the test case with a better reduced version of the",
    "start": "273000",
    "end": "279160"
  },
  {
    "text": "test case and here the the Crux of it is um a comparison or the complement of the comparison GCC got that wrong a month",
    "start": "279160",
    "end": "286000"
  },
  {
    "text": "ago and it had been sitting there for like a long time maybe you just don't do that right that's sort of stupid code",
    "start": "286000",
    "end": "291479"
  },
  {
    "text": "maybe you just don't do that but that was sitting in G in Mainline GCC for for years just this there's sort of weird",
    "start": "291479",
    "end": "296919"
  },
  {
    "text": "stuff going on where there can be some pretty significantly broken stuff sitting there and you know we just don't",
    "start": "296919",
    "end": "302440"
  },
  {
    "text": "know and as a user as a developer um because undefined behavior in these",
    "start": "302440",
    "end": "308680"
  },
  {
    "text": "languages is so pernicious um we often just assume it's our fault right or or",
    "start": "308680",
    "end": "313919"
  },
  {
    "text": "something's going wrong you just tweak the code you're like what the hell you start rewriting it different ways you often work around compiler bugs without even noticing it it's a weird it's a",
    "start": "313919",
    "end": "320880"
  },
  {
    "text": "weird it's a weird world we live in um so those were wrong code bugs and I'll just show an example of a crash bug so",
    "start": "320880",
    "end": "326840"
  },
  {
    "text": "here's one from last summer so this particular code snippet here uh made GCC seg fault and um you know why that",
    "start": "326840",
    "end": "333319"
  },
  {
    "text": "particular snippet of code you know the GCC developers knew and you know you if you so so I'm I'm including Links at the bottom of a lot of these slides so you",
    "start": "333319",
    "end": "339800"
  },
  {
    "text": "know I like to show the receipts for these kind of things so if you do feel like uh getting the slides later and clicking on these you can read the whole discussion um but anyway you know of",
    "start": "339800",
    "end": "346400"
  },
  {
    "text": "course they they fix this kind of thing so um so those are a few examples and so so",
    "start": "346400",
    "end": "351720"
  },
  {
    "text": "those are some bad things right I showed you some bad things that we don't want the compiler to do",
    "start": "351720",
    "end": "357160"
  },
  {
    "text": "um but what do we know about correct compilers I mean should we just say it's",
    "start": "357160",
    "end": "362280"
  },
  {
    "text": "one that never does the bad things that's not a very good definition right I mean in practice that's what we want",
    "start": "362280",
    "end": "367919"
  },
  {
    "text": "but it's not a constructive definition right it doesn't tell us what we should be building it tells us what we shouldn't be building um and it's not so",
    "start": "367919",
    "end": "374120"
  },
  {
    "text": "easy to say what what a correct compiler is and that leads us to problems if we decide to prove compilers correct so",
    "start": "374120",
    "end": "380880"
  },
  {
    "text": "compilers are like the most eminently provable math objects in on the world because you know they're purely",
    "start": "380880",
    "end": "386120"
  },
  {
    "text": "mathematical right they take a mathematical construct a source language they turn it into a different ma mathematical construct a target language",
    "start": "386120",
    "end": "393240"
  },
  {
    "text": "and in the middle they're not concurrent they're not depending on very much it's just a it's just a pure function essentially um from from what from an",
    "start": "393240",
    "end": "400160"
  },
  {
    "text": "input to an output we should be able to prove these correct but to do that we need to know what they should do and to know what they should do we need a",
    "start": "400160",
    "end": "405360"
  },
  {
    "text": "semantics for the source language and that doesn't even exist for common languages like for example Swift or C++",
    "start": "405360",
    "end": "410680"
  },
  {
    "text": "creating a mechanized formal semantic for C++ is nobody's ever even I think",
    "start": "410680",
    "end": "415879"
  },
  {
    "text": "made a serious try at it it's just it's just too hard and other languages are in the same both um rust has mechanized",
    "start": "415879",
    "end": "421960"
  },
  {
    "text": "formal semantics but none of them that I that I looked at I thought were probably complete you know I could be wrong about that but Swift definitely doesn't have",
    "start": "421960",
    "end": "428039"
  },
  {
    "text": "one and a mechanized formal semantics is just table Stakes that's that's just the very first thing you need and",
    "start": "428039",
    "end": "434039"
  },
  {
    "text": "um um once you have that you can start to try to prove a compiler correct but but realistically um that's proving a",
    "start": "434039",
    "end": "442520"
  },
  {
    "text": "approved correct compiler is not compatible with compiler compiler development as we understand it in the world it's too honorous it imposes too",
    "start": "442520",
    "end": "449479"
  },
  {
    "text": "big of a burden on compiler developers I can't keep implementing optimizations I can't keep implementing new language standards it's just it's just sort of in",
    "start": "449479",
    "end": "455360"
  },
  {
    "text": "my view in a short and medium term uh just a non-starter we're not going to do this it's not what we want what we want",
    "start": "455360",
    "end": "460400"
  },
  {
    "text": "is compilers that don't have a lot of bugs but this isn't the way to get there in my opinion so where are compilers incorrect",
    "start": "460400",
    "end": "467680"
  },
  {
    "text": "well you know the specification can be hard to understand so I've run into many cases where I found something where my",
    "start": "467680",
    "end": "474159"
  },
  {
    "text": "reading of for example the C standard and the compiler developers just differed and um you know some sometimes",
    "start": "474159",
    "end": "479440"
  },
  {
    "text": "they right sometimes I was right right you know it's it's English and it's not even really very good English often um",
    "start": "479440",
    "end": "486639"
  },
  {
    "text": "you know there's there's legitimate ambiguity developers often haven't had time to catch up with the specification especially in C++ like you know visual",
    "start": "486639",
    "end": "492759"
  },
  {
    "text": "visual C++ was I think um in slightly incompatible in its templates with the specification for for years and years and years and years right they just",
    "start": "492759",
    "end": "498840"
  },
  {
    "text": "couldn't quite get over that hurdle to you know making templates work um sometimes we just don't have enough test",
    "start": "498840",
    "end": "504520"
  },
  {
    "text": "cases there's all sorts of reasons why compilers are wrong um and the one that kind of most interests me sort of",
    "start": "504520",
    "end": "510759"
  },
  {
    "text": "professionally is developers Miss Corner cases and the reason that that's sort of the most interesting is these other ones are more sort of human software process",
    "start": "510759",
    "end": "518240"
  },
  {
    "text": "issues often hard to attack as a as as an academic logic errors I can attack so",
    "start": "518240",
    "end": "523800"
  },
  {
    "text": "let me show you a logic error this is this is a corner case that I really enjoyed finding this is maybe last spring or something so lovm internally",
    "start": "523800",
    "end": "530800"
  },
  {
    "text": "has these intrinsic functions for checked arithmetic operations so one of them is signed multiply by overflow it",
    "start": "530800",
    "end": "537120"
  },
  {
    "text": "takes two inputs it multiplies them and it returns a pair the pair contains the result the two's complement result at",
    "start": "537120",
    "end": "543920"
  },
  {
    "text": "the same bitwidth as the inputs and so here I should say that this um these particular intrinsics work at any width",
    "start": "543920",
    "end": "549640"
  },
  {
    "text": "you can pass them any width integer and they just they just do what they should do so it Returns the result at at the",
    "start": "549640",
    "end": "554720"
  },
  {
    "text": "bitwidth and then the Overflow is a Boolean flag indicating whether overflow occurred so that's straightforward",
    "start": "554720",
    "end": "560040"
  },
  {
    "text": "enough and of course the reason we do this is to expose you know provide sort of a uniform access to the processor's condition code Flags which are typically",
    "start": "560040",
    "end": "566440"
  },
  {
    "text": "not accessible from The Source level so this is an inside lvm where um you know where we where we need access efficient",
    "start": "566440",
    "end": "572240"
  },
  {
    "text": "access to these lower level abstractions so the lvm middle end which is where a",
    "start": "572240",
    "end": "577760"
  },
  {
    "text": "lot of the optimizations happen and also in its back ends um there's some redundancy in optimizations they all",
    "start": "577760",
    "end": "583519"
  },
  {
    "text": "contained an optimization which took a sign multiply with overflow of a and one so any arbitrary integer and one and",
    "start": "583519",
    "end": "590880"
  },
  {
    "text": "returned reduced that to a pair um a and false so if you multiply a * 1 you uh",
    "start": "590880",
    "end": "598720"
  },
  {
    "text": "get a back and it doesn't overflow right does that seem fairly clear can we buy",
    "start": "598720",
    "end": "604000"
  },
  {
    "text": "it it's wrong it took me a while to see this the",
    "start": "604000",
    "end": "609440"
  },
  {
    "text": "the theorem prover I was interacting with uh told me found a bug related to this and I just I thought the theor",
    "start": "609440",
    "end": "615000"
  },
  {
    "text": "prove was wrong for like an hour um before I figured it out does anybody it's a it's a nasty Corner case it's",
    "start": "615000",
    "end": "620160"
  },
  {
    "text": "it's a one bit multiply sign multiply with overflow do you see the problem now what does one",
    "start": "620160",
    "end": "625839"
  },
  {
    "text": "mean to's complement wise at one bit wide it's not one right it's minus one",
    "start": "625839",
    "end": "632399"
  },
  {
    "text": "there's no identity element for multiplication at one bit wide the optimization breaks uh does anybody care",
    "start": "632399",
    "end": "638320"
  },
  {
    "text": "I don't know I just enjoyed finding it because I thought it was very funny um and of course they you know of course they have to fix this kind of thing because even if it's funny and even if",
    "start": "638320",
    "end": "644680"
  },
  {
    "text": "nobody cares it's still you know mathematically wrong and as Engineers we fix that stuff so anyway I show this to",
    "start": "644680",
    "end": "650760"
  },
  {
    "text": "illustrate how hard these Corner cases can be to see I don't think that many people in this room and certainly not me",
    "start": "650760",
    "end": "656959"
  },
  {
    "text": "would have seen this problem just kind of of um you know while we were coding it up right that's a pretty innocuous",
    "start": "656959",
    "end": "662800"
  },
  {
    "text": "looking optimization and you know it's it's not right and so that's a you know we see a lot of stuff like this so now",
    "start": "662800",
    "end": "669519"
  },
  {
    "text": "it comes time to sort of ask you a question um you know do you want your compiler to be correct raise your hand",
    "start": "669519",
    "end": "675639"
  },
  {
    "text": "if you want your compiler to be correct yeah but that's like security right we all want security but we don't we truly",
    "start": "675639",
    "end": "682680"
  },
  {
    "text": "don't want security because we want a usable phone the secure phone is the one that's you know buried in concrete and",
    "start": "682680",
    "end": "687920"
  },
  {
    "text": "dropped into the ocean right that's a secure phone we want to use it we we want insecure phones we don't want",
    "start": "687920",
    "end": "692959"
  },
  {
    "text": "correct compilers we want sort of correct compilers so if you had to rewrite all of your code if I gave you a correct compiler in a language that's",
    "start": "692959",
    "end": "698839"
  },
  {
    "text": "different than your codebase I don't think you'd care right if I gave you a correct compiler for the which the",
    "start": "698839",
    "end": "704360"
  },
  {
    "text": "license cost as much as your salary I don't think you'd switch to it you wouldn't switch to it if it didn't optimize you wouldn't switch to it if it",
    "start": "704360",
    "end": "709680"
  },
  {
    "text": "didn't support templates or something right we want correctness but we don't want it that badly there's an Optimum",
    "start": "709680",
    "end": "715200"
  },
  {
    "text": "point for correctness and it's not all the way at the correct side right you know just it's just sort of a a reality",
    "start": "715200",
    "end": "720639"
  },
  {
    "text": "a reality of sort of engineering and economic life and so so engineering there's a lot of definitions for",
    "start": "720639",
    "end": "726000"
  },
  {
    "text": "engineering but one that I like is you know it's accomplishing goals with limited resources if resources are",
    "start": "726000",
    "end": "731279"
  },
  {
    "text": "unlimited it's not engineering it's you know imagination or playing or something right this this this is a this this",
    "start": "731279",
    "end": "736560"
  },
  {
    "text": "isn't something that's interesting or exists so given that compiler Engineers only have they're expensive people",
    "start": "736560",
    "end": "743639"
  },
  {
    "text": "there's not that many of them and every day they have to do something right they have to wake up go to their computer and do something what are they going to do",
    "start": "743639",
    "end": "749880"
  },
  {
    "text": "are they going to fix bugs in correctness reported by users are they going to try to find new correctness bugs are they going to re-engineer parts",
    "start": "749880",
    "end": "757079"
  },
  {
    "text": "of the compiler that have been incredibly Troublesome and prone to bugs so they are less prone to bugs what are they going to do well it turns out",
    "start": "757079",
    "end": "762680"
  },
  {
    "text": "they're probably not going to do any of this right they're not going to do any of this what are they going to do they're going to do what they're paid to do right everybody makes a salary",
    "start": "762680",
    "end": "769040"
  },
  {
    "text": "they're going to probably make the optimizer better they're going to probably support c23 they're probably",
    "start": "769040",
    "end": "774199"
  },
  {
    "text": "going to Target the new random variant of risk 5 that came out this month before a new VAR comes out right that's",
    "start": "774199",
    "end": "780160"
  },
  {
    "text": "what they're going to do they're going to do their day job people also fix bugs but again the optimum point for the for",
    "start": "780160",
    "end": "786199"
  },
  {
    "text": "correctness and Bug fixing isn't at um you know completely correct that's not really achievable um in any in any sort",
    "start": "786199",
    "end": "794480"
  },
  {
    "text": "of time frame and there's a really nice paper that I found um a while ago and not that many people know it and I I",
    "start": "794480",
    "end": "800800"
  },
  {
    "text": "really really love this paper it's called the impact of Economics on compiler optimization so here the guy",
    "start": "800800",
    "end": "806920"
  },
  {
    "text": "Robinson the author looked did all 47,000 papers on economics you know electronically obviously and all 12,000",
    "start": "806920",
    "end": "813440"
  },
  {
    "text": "papers on compiler optimization and he found one that had a meaningful discussion of the impact of Economics on",
    "start": "813440",
    "end": "819199"
  },
  {
    "text": "compiler optimization so then he goes and writes a short paper on this and it's totally worth reading it's it's really sort of nice short paper um",
    "start": "819199",
    "end": "825720"
  },
  {
    "text": "nobody so far as far has written um the impact of Economics on compiler correctness so oh well I'll just be",
    "start": "825720",
    "end": "832440"
  },
  {
    "text": "waiting um so as I've been saying there's a bit of a global Optimum here",
    "start": "832440",
    "end": "839800"
  },
  {
    "text": "where if we look at compiler quality as a as a function of you know we could spend all of our development effort",
    "start": "839800",
    "end": "844839"
  },
  {
    "text": "fixing bugs in which case we' never add features that compiler sucks right nobody wants it we can also spend all of",
    "start": "844839",
    "end": "850639"
  },
  {
    "text": "our effort on new features and never fix a bug nobody wants that one either it's just going to crash every single time you use it there's an Optimum point in",
    "start": "850639",
    "end": "856560"
  },
  {
    "text": "the middle but here's the deal this optimal point is a function of these underlying Technologies right um we can",
    "start": "856560",
    "end": "862839"
  },
  {
    "text": "shift these curves by shifting how the underlying Technologies work and that's been sort of my goal since about 2010",
    "start": "862839",
    "end": "867920"
  },
  {
    "text": "trying to do research projects that shift the economics you know maybe just a little bit right but that shift the",
    "start": "867920",
    "end": "873480"
  },
  {
    "text": "economics so that maybe we could reach an optimal Point that's a little bit better than the natural one which we sort of naturally get if people just do",
    "start": "873480",
    "end": "879560"
  },
  {
    "text": "what they want so what does that mean in practice that means stuff like well maybe we",
    "start": "879560",
    "end": "885720"
  },
  {
    "text": "could make it a lot easier to find compiler bugs maybe we could make it a lot easier to isolate um the root cause",
    "start": "885720",
    "end": "891560"
  },
  {
    "text": "of a compiler bug maybe we can um help users de compiler users disambiguate",
    "start": "891560",
    "end": "897759"
  },
  {
    "text": "when the problem is not the compil comper people used to blame the compiler a lot for undefined behavior problems",
    "start": "897759",
    "end": "902880"
  },
  {
    "text": "the um GMP does anybody use the G multi Precision Library GMP it's a big Nom Library it had something right on the",
    "start": "902880",
    "end": "908920"
  },
  {
    "text": "web page that said you know GCC frequently mcomp our library but when I went looking for undefined behaviors in",
    "start": "908920",
    "end": "914360"
  },
  {
    "text": "the in the GMP Library had a lot of them all right I think they were probably wrong I mean maybe not 100% wrong but",
    "start": "914360",
    "end": "920320"
  },
  {
    "text": "they were they were wrong a lot of the time they just had bugs that they didn't understand as in recent years as our understanding of undefined Behavior has",
    "start": "920320",
    "end": "926279"
  },
  {
    "text": "gotten better and better we've seen a lot less blame in the compiler when the compiler isn't wrong because as I've been showing you the compiler is wrong",
    "start": "926279",
    "end": "932480"
  },
  {
    "text": "often enough we don't need to blame it when it isn't wrong so um what else can we do we can",
    "start": "932480",
    "end": "938480"
  },
  {
    "text": "prove that the compiler did the right thing that um and then we could generate parts of the compiler automatically and I mentioned these specific list of",
    "start": "938480",
    "end": "943720"
  },
  {
    "text": "things because these are all things that I've done you know all research projects that I've done and I'm going to tell you",
    "start": "943720",
    "end": "949079"
  },
  {
    "text": "about I don't have time to tell you about all of them but I can tell you about a couple of them so first I'm",
    "start": "949079",
    "end": "954800"
  },
  {
    "text": "going to tell you about how my research Group found and reported more than a thousand compiler books um",
    "start": "954800",
    "end": "961120"
  },
  {
    "text": "so when I started trying to think about so I already sort of set the stage for you a little bit where I I show told you",
    "start": "961120",
    "end": "967759"
  },
  {
    "text": "that I had sort of eventually noticed that compiler bugs were a lot more common than I had thought and I started",
    "start": "967759",
    "end": "973199"
  },
  {
    "text": "to find them more and more and more but finding them by hand is incredibly dissatisfying right I you you can only",
    "start": "973199",
    "end": "979279"
  },
  {
    "text": "do so in so much of this and then I remembered that years and years ago um I had seen this really cool paper and it",
    "start": "979279",
    "end": "985920"
  },
  {
    "text": "stuck in my mind uh very forcefully because it you know because Jim Gray had um mentioned it to me and he had been",
    "start": "985920",
    "end": "991160"
  },
  {
    "text": "extremely excited about this paper and he was a very contagious sort of excite excitement kind of man and I got excited",
    "start": "991160",
    "end": "996240"
  },
  {
    "text": "about it and this was massive stochastic testing of SQL which basically just means fuzzing a database right making",
    "start": "996240",
    "end": "1002440"
  },
  {
    "text": "random SQL queries submitting them to multiple databases and they were finding things like SQL Server Like",
    "start": "1002440",
    "end": "1008600"
  },
  {
    "text": "exponentiated wrong or something like it couldn't compute it couldn't compute an exponent like what the hell um so this",
    "start": "1008600",
    "end": "1015560"
  },
  {
    "text": "is a really cool paper that kind of popped into my head and then there was another one from from sort of happened to be from the same year differential",
    "start": "1015560",
    "end": "1021399"
  },
  {
    "text": "testing for software by McKean and this one was a c compiler buzzer that McKean",
    "start": "1021399",
    "end": "1026558"
  },
  {
    "text": "had written back in 1998 or prior to 1998 this is a really cool paper it just",
    "start": "1026559",
    "end": "1031760"
  },
  {
    "text": "really stuck in my mind is you know he had just had these amazing findings um so I kind of this these techniques had",
    "start": "1031760",
    "end": "1039000"
  },
  {
    "text": "been sitting there so we went and basically adopted them so we wrote a program called cith my that my group",
    "start": "1039000",
    "end": "1044678"
  },
  {
    "text": "wrote and it generates random C code and I wasn't the main off of C Smith my one of my students was but I was um the main",
    "start": "1044679",
    "end": "1052200"
  },
  {
    "text": "one who reported the bugs and over the years I reported you know with my you know just by myself 500 500 and some um",
    "start": "1052200",
    "end": "1060679"
  },
  {
    "text": "and you know you you sort of learn a lot while you're doing this and um one of my very favorite moments of my professional",
    "start": "1060679",
    "end": "1067520"
  },
  {
    "text": "life was when um C Smith got a Christmas card from a industrial compiler development team they had all signed it",
    "start": "1067520",
    "end": "1072600"
  },
  {
    "text": "and they just had really enjoyed using cith it had just found a ton of I mean they didn't send tell me how many right",
    "start": "1072600",
    "end": "1077840"
  },
  {
    "text": "but this is an open Source tool they had clearly had found it worthwhile enough to actually send me a Christmas card",
    "start": "1077840",
    "end": "1083440"
  },
  {
    "text": "addressed to C Smith I was just I was super happy it made me made me very happy for this to happen but anyway C Smith is old news we're not working on",
    "start": "1083440",
    "end": "1089320"
  },
  {
    "text": "it anymore I don't really want to talk about it um what I'd like to talk about is um its successor which my I have a",
    "start": "1089320",
    "end": "1097280"
  },
  {
    "text": "soon to graduate student who wrote A cith successor I'll tell you a little bit about that it's a it's a you know it's like it's like C Smith but it's",
    "start": "1097280",
    "end": "1103520"
  },
  {
    "text": "better and what I want to start talking about is the the key to making one of the these tools work well is it needs to",
    "start": "1103520",
    "end": "1109919"
  },
  {
    "text": "be expressive and it needs to have certain properties that let you find wrong code bugs so expressiveness just",
    "start": "1109919",
    "end": "1115559"
  },
  {
    "text": "means generating a lot of different kinds of code and having a single interpretation means that if you run the",
    "start": "1115559",
    "end": "1122520"
  },
  {
    "text": "program it has to do a certain thing and of course that's important because a program that has undefined behaviors",
    "start": "1122520",
    "end": "1127760"
  },
  {
    "text": "doesn't have to do a certain thing it can do like anything so you so if so if you run the program generated by the",
    "start": "1127760",
    "end": "1132840"
  },
  {
    "text": "compiler and it does something random you can make no inferences right on the other hand if you run a program with single interpretation",
    "start": "1132840",
    "end": "1138840"
  },
  {
    "text": "and it does something random like crashes now now you can make a strong inference that the compiler has a bug so we need both of these properties and",
    "start": "1138840",
    "end": "1144159"
  },
  {
    "text": "let's talk about that a little more so if we only care about expressiveness generating random code is easy you just",
    "start": "1144159",
    "end": "1151200"
  },
  {
    "text": "generate any kind of crap you want and if a pointer referencing a pointer goes into off into space somewhere just do it",
    "start": "1151200",
    "end": "1158000"
  },
  {
    "text": "all right this doesn't give us what we want it's easy it's it's not useful similarly if we only care about the",
    "start": "1158000",
    "end": "1165159"
  },
  {
    "text": "single interpretation thing we can generate a lot of random codes so maybe I restrict myself to programs that look like the one below right that's not",
    "start": "1165159",
    "end": "1171960"
  },
  {
    "text": "going to find compiler bugs even though I can generate an infinite number of programs that have that form that have",
    "start": "1171960",
    "end": "1177000"
  },
  {
    "text": "that general syntactic form right so we need to do both of these things and doing them both is really hard and took",
    "start": "1177000",
    "end": "1183440"
  },
  {
    "text": "us a long time this this you know each of these C compiler fuzzers um cost one of my students you know four or five",
    "start": "1183440",
    "end": "1189480"
  },
  {
    "text": "years of their lives right this you know this is a fairly significant engineering effort you know on the other hand five person years isn't very big industrially",
    "start": "1189480",
    "end": "1195880"
  },
  {
    "text": "but academically it's big you know it's sort of at the limit of what I can do in in Academia you know give me a 50%",
    "start": "1195880",
    "end": "1202679"
  },
  {
    "text": "industrial team and you know I can do different things but you know at a university this is about the most I can do so let's talk about the single",
    "start": "1202679",
    "end": "1207919"
  },
  {
    "text": "interpretation constraint so a CN C++ program that we generate needs to be free of undefined behaviors and not rely",
    "start": "1207919",
    "end": "1214400"
  },
  {
    "text": "on unspecified behaviors and in some Ideal World maybe it wouldn't rely on implementation defined behaviors either",
    "start": "1214400",
    "end": "1220880"
  },
  {
    "text": "but in practice we' we just don't bother no C program really fails to rely on",
    "start": "1220880",
    "end": "1225919"
  },
  {
    "text": "implementation defined behaviors and we don't so we don't bother with this either but we do have to avoid the first two things and so what I want to show",
    "start": "1225919",
    "end": "1231880"
  },
  {
    "text": "you is a technique that we used in this in this second compiler fuzer yarp gen that was that was different than what we",
    "start": "1231880",
    "end": "1238240"
  },
  {
    "text": "did in cith for avoiding undefined Behavior so we're generating arithmetic Expressions that are going to be part of",
    "start": "1238240",
    "end": "1244320"
  },
  {
    "text": "a random program and here's a tiny fragment of an arithmetic expression that's going to be in a random program",
    "start": "1244320",
    "end": "1250400"
  },
  {
    "text": "we generate an ad operator and then we're going to add in Max and 42 so or we're going to add a and b which at that",
    "start": "1250400",
    "end": "1257280"
  },
  {
    "text": "program Point happen have the values at Max and 42 so that's bad right we don't want that to happen that's undefined the",
    "start": "1257280",
    "end": "1263280"
  },
  {
    "text": "program could explode the computer could melt you know whatever we don't want to do it so what we do is we just do something really simple we have a little",
    "start": "1263280",
    "end": "1269400"
  },
  {
    "text": "canned rewrite that we use that um transforms the addition to a subtraction",
    "start": "1269400",
    "end": "1276080"
  },
  {
    "text": "and now it becomes defined that was easy um we can stack",
    "start": "1276080",
    "end": "1281640"
  },
  {
    "text": "this sort of concept and we apply these kind of rewrites bottom up to a randomly generated expression and when we get to",
    "start": "1281640",
    "end": "1287840"
  },
  {
    "text": "the root we have a a full expression that's that's defined and this all assumes that we know the values flowing",
    "start": "1287840",
    "end": "1293799"
  },
  {
    "text": "into it and we I'm not going to talk about how we insure that we Ure we ensure that we know the values flowing into it but crucially the compiler can't",
    "start": "1293799",
    "end": "1300880"
  },
  {
    "text": "know the values flowing into it if this makes sense the compiler has to be solving a general problem we only reason about a specific problem and this gives",
    "start": "1300880",
    "end": "1307520"
  },
  {
    "text": "us an incredibly sort of one-sided weapon against the compiler that lets us really break compilers fairly easily so",
    "start": "1307520",
    "end": "1313000"
  },
  {
    "text": "we can generate these arithmetic expression trees and here I'll show you sort of the Full Table of little rewrite",
    "start": "1313000",
    "end": "1318080"
  },
  {
    "text": "rules that let us generate arithmetic Expressions avoiding undefined Behavior it's just a lot of little little tweaks to things but again if you take a big",
    "start": "1318080",
    "end": "1324720"
  },
  {
    "text": "random expression and apply these bottom up you get something that that actually works and then you put a bunch of those",
    "start": "1324720",
    "end": "1331520"
  },
  {
    "text": "together into a into a function and put a bunch of those functions into a program and now you have a program that has the desired",
    "start": "1331520",
    "end": "1337720"
  },
  {
    "text": "property that's only for arithmetic Expressions there's a completely separate set of rules and rewrites and",
    "start": "1337720",
    "end": "1342880"
  },
  {
    "text": "things that work for pointers and arrays and things and I'm not going to I'm just not going to bother talking about that",
    "start": "1342880",
    "end": "1349200"
  },
  {
    "text": "um so uh so that sort of",
    "start": "1349200",
    "end": "1354320"
  },
  {
    "text": "uh you know solve that problem but you've noticed that we've relied on know on knowing the values flowing through",
    "start": "1354320",
    "end": "1360159"
  },
  {
    "text": "our program and that makes extending this scheme to Loop programs hard because we don't want to analyze all",
    "start": "1360159",
    "end": "1365720"
  },
  {
    "text": "Loop iterations so what we do is we sort of do some tricks we have some some various tricks where the actual Loop",
    "start": "1365720",
    "end": "1371880"
  },
  {
    "text": "behavior is fairly restricted like for example it might only execute once but the compiler doesn't know this so it's",
    "start": "1371880",
    "end": "1377320"
  },
  {
    "text": "solving a general case it might execute with the same values flowing through it on every Loop iteration so that's two",
    "start": "1377320",
    "end": "1383559"
  },
  {
    "text": "different schemes now and again we hide these things from the compiler we hide these things so the compiler has to solve a general problem we are solving a",
    "start": "1383559",
    "end": "1389559"
  },
  {
    "text": "specific problem and that's why we with a fairly lightweight engineering can generate pretty tough things to",
    "start": "1389559",
    "end": "1395600"
  },
  {
    "text": "compile so anyway we hide all of these tricks from the compiler and um this",
    "start": "1395600",
    "end": "1401760"
  },
  {
    "text": "allows us to do some pretty good compiler fuzzing and the reason we started targeting Loops is because um",
    "start": "1401760",
    "end": "1407000"
  },
  {
    "text": "compiler Loop optimiz have gotten pretty sophisticated in recent years driven by you know Big Data machine learning AI",
    "start": "1407000",
    "end": "1412520"
  },
  {
    "text": "all these things have made you know lots of Loops right compile Loop optimizers like you know poly for example there's",
    "start": "1412520",
    "end": "1418640"
  },
  {
    "text": "never been a orginal poly that we couldn't just break in like 10 seconds I mean um we want to break these Loop",
    "start": "1418640",
    "end": "1424760"
  },
  {
    "text": "optimizations has anybody looked at the scaler Revolution module in lovm it sort of tries to predict Which",
    "start": "1424760",
    "end": "1430600"
  },
  {
    "text": "Way a loop is going and what it's doing and how big the steps are it is the most heinous mess I've ever seen in my life I've never had any sense that I had any",
    "start": "1430600",
    "end": "1437640"
  },
  {
    "text": "clue CL what was what it was really doing um we want to fuzz the hell out of that kind of thing because if I can't figure it out probably the other people",
    "start": "1437640",
    "end": "1444559"
  },
  {
    "text": "can't either right they're not that much smarter than",
    "start": "1444559",
    "end": "1448519"
  },
  {
    "text": "mecks do the tricks that's okay so s Andre's question is do the tricks we play reduce the bugs we can",
    "start": "1449919",
    "end": "1455760"
  },
  {
    "text": "find sometimes and we don't know are the answers",
    "start": "1455760",
    "end": "1461760"
  },
  {
    "text": "yeah these questions are very hard to to answer but but probably sometimes for",
    "start": "1461760",
    "end": "1467080"
  },
  {
    "text": "sure other times um we suspect maybe",
    "start": "1467080",
    "end": "1472120"
  },
  {
    "text": "it's just hard to know but the tricks are all we have so and and they get us pretty far so but that's a very good",
    "start": "1472120",
    "end": "1477679"
  },
  {
    "text": "question yeah um but so so what I want to talk about now is so so I've talked about generating code that has the",
    "start": "1477679",
    "end": "1483399"
  },
  {
    "text": "desired properties that you need to fuzz a compiler and find wrong code bugs and so I'll tell you now about making",
    "start": "1483399",
    "end": "1489120"
  },
  {
    "text": "expressive loops and this is um particularly interesting and fun because compiler Loop optimizers look for",
    "start": "1489120",
    "end": "1495440"
  },
  {
    "text": "extremely specific idioms extremely specific Loop idioms and I'll show you one so compilers like to do Loop Fusion",
    "start": "1495440",
    "end": "1502360"
  },
  {
    "text": "you can only do Loop Fusion when the two Loops are next to each other they have the same iteration space and they lack",
    "start": "1502360",
    "end": "1508640"
  },
  {
    "text": "certain kinds of dependencies that would break um break break Loop Fusion you know dependencies that would make you",
    "start": "1508640",
    "end": "1514279"
  },
  {
    "text": "know running the two Loops in the same Loop um return a different result so the compiler does some conservative checks",
    "start": "1514279",
    "end": "1520520"
  },
  {
    "text": "and it turns out that um if you generate purely random loopy loopy code you",
    "start": "1520520",
    "end": "1525919"
  },
  {
    "text": "almost never and we checked this right basically never trigger Loop Fusion so",
    "start": "1525919",
    "end": "1531200"
  },
  {
    "text": "we basically plug we have a sort of a higher level intermediate representation for the partially generated random",
    "start": "1531200",
    "end": "1536760"
  },
  {
    "text": "program that includes special commands for generating fusible Loops okay so that's one thing we did another thing we",
    "start": "1536760",
    "end": "1543039"
  },
  {
    "text": "did is we want to trigger stencil optimizations so stencil codes are ones that look at a sort of a window here I'm",
    "start": "1543039",
    "end": "1549399"
  },
  {
    "text": "showing an example that looks at a one-dimensional window of code three pixels in a row but it could be um you",
    "start": "1549399",
    "end": "1555360"
  },
  {
    "text": "know more commonly it'd be a it be it' be a square aare of pixels in an image that we're doing some sort of a stencil computation of so a stencil computation",
    "start": "1555360",
    "end": "1561679"
  },
  {
    "text": "looks at this window a small window of of of an array and computes a new value out of it to to store into a into a",
    "start": "1561679",
    "end": "1567440"
  },
  {
    "text": "destination array so LM and GCC are extremely clever with stencil codes",
    "start": "1567440",
    "end": "1572880"
  },
  {
    "text": "because they're common and their performance critical so here you can see on the right some arm object code where",
    "start": "1572880",
    "end": "1578600"
  },
  {
    "text": "at the left we've loaded three array values does that kind of make sense we've loaded three different array values per Loop iteration but the object",
    "start": "1578600",
    "end": "1585960"
  },
  {
    "text": "code at the right loads one Loop Val one array value per Loop iteration that's",
    "start": "1585960",
    "end": "1591320"
  },
  {
    "text": "really sort of magical and so what it does is it loads the the the farthest one up the i+1 and it forwards that to",
    "start": "1591320",
    "end": "1597760"
  },
  {
    "text": "subsequent Loop iterations using registers so if you look at the code carefully I won't try to explain it but it but it and it'll even do this for six",
    "start": "1597760",
    "end": "1604080"
  },
  {
    "text": "for six values or seven until eventually it runs out of registers and and stops doing this but it's very clever and you",
    "start": "1604080",
    "end": "1609880"
  },
  {
    "text": "can reduce the memory traffic by quite a lot for these extremely performance critical codes so we need to trigger",
    "start": "1609880",
    "end": "1615520"
  },
  {
    "text": "that kind of optimization because that's the kind of thing where the compiler writers are being incredibly clever that's where they're going to go wrong",
    "start": "1615520",
    "end": "1620840"
  },
  {
    "text": "we need to trigger it we can't find bugs in it if we can't trigger the optimizations so again we need some can support for",
    "start": "1620840",
    "end": "1627080"
  },
  {
    "text": "stencils okay so I've showed you two kinds of caned support for Loop is idioms and we ended up with 10 of those",
    "start": "1627080",
    "end": "1634559"
  },
  {
    "text": "sort of very general purpose you know kinds of code structures that Loop optimizers look for and the real trick",
    "start": "1634559",
    "end": "1640440"
  },
  {
    "text": "here is that these are sort of parameterized structure they're they're their structure that's parameterized by Randomness and they compose with each",
    "start": "1640440",
    "end": "1646600"
  },
  {
    "text": "other so for for example we can have a a reduction of Dimension and compose that",
    "start": "1646600",
    "end": "1651960"
  },
  {
    "text": "with a stencil computation and you get something like what we show what we show on the slide here and you know these combined with fusable loops these things",
    "start": "1651960",
    "end": "1657919"
  },
  {
    "text": "composed fairly nicely we get pretty dense collections of pretty interesting Loop idioms that look sort of like what",
    "start": "1657919",
    "end": "1664159"
  },
  {
    "text": "people would have written while retaining enough Randomness to really uh make the compiler have to work hard to",
    "start": "1664159",
    "end": "1669200"
  },
  {
    "text": "do a correct job so that's what Yar genen did that so the the first generation of yarp genen",
    "start": "1669200",
    "end": "1675600"
  },
  {
    "text": "sort of didn't focus on Loops didn't didn't do very interesting stuff with loops the second version of it uh my student focused heavily on loops and you",
    "start": "1675600",
    "end": "1681640"
  },
  {
    "text": "this is really fun and so in total across the two versions We got 183 wrong code bugs mostly in GCC and lvm but also",
    "start": "1681640",
    "end": "1688919"
  },
  {
    "text": "in some other compilers 157 crash bugs and then the nice thing is most of these hav been fixed so if the compiler",
    "start": "1688919",
    "end": "1693960"
  },
  {
    "text": "developers weren't fixing the bugs we submitted this would be the most useless effort on a planet does that kind of make sense this this benefits nobody if",
    "start": "1693960",
    "end": "1700559"
  },
  {
    "text": "we just add issues that the people don't want to fix but the thing is compiler developers You know despite the fact",
    "start": "1700559",
    "end": "1706039"
  },
  {
    "text": "that as I said earlier they had something else to do that day you know they always have something else to do that day um despite that fact um they do",
    "start": "1706039",
    "end": "1715159"
  },
  {
    "text": "fix these bugs and a lot of it is because open source developers aren't as uh beholden to corporations as uh you",
    "start": "1715159",
    "end": "1722000"
  },
  {
    "text": "know as as other people are they they often have I I'm not sure about this but it seems like the open source world with",
    "start": "1722000",
    "end": "1727840"
  },
  {
    "text": "public issue trackers people are more likely to fix bugs the the bugs that when I when we first started doing cith",
    "start": "1727840",
    "end": "1733960"
  },
  {
    "text": "I started submitting bugs to Arms compiler team to um Sons which existed at the time um none",
    "start": "1733960",
    "end": "1741480"
  },
  {
    "text": "of them cared they they they they they reacted somewhere between um disdain and hostility because I wasn't a customer",
    "start": "1741480",
    "end": "1748000"
  },
  {
    "text": "right I wasn't paying their job was to work for the customer they didn't have for whatever reason a lot of",
    "start": "1748000",
    "end": "1753080"
  },
  {
    "text": "Professional Pride in their project they they just wanted to work on the bottom line the open source developers sticks them and it's really good so that's how",
    "start": "1753080",
    "end": "1760120"
  },
  {
    "text": "we can sort of move forward and what happened what really happened I think is these compilers kind of um their",
    "start": "1760120",
    "end": "1765480"
  },
  {
    "text": "complexity exceeded what people could really understand they got really big and Bloated really smart and there were",
    "start": "1765480",
    "end": "1771360"
  },
  {
    "text": "just a lot of latent bugs so when cith laid into these compilers it was just it was just like farming right it was just",
    "start": "1771360",
    "end": "1776960"
  },
  {
    "text": "like farming bugs I mean it took a while to you know it took a while to even generate programs that they wouldn't misc compile it was weird um you know",
    "start": "1776960",
    "end": "1783799"
  },
  {
    "text": "then eventually over the years the compilers become resistant to our tools and eventually you know currently if you",
    "start": "1783799",
    "end": "1789240"
  },
  {
    "text": "use yarp gen on the current on the latest trunk version of GCR LM it might take a couple of days to find a bug and",
    "start": "1789240",
    "end": "1795000"
  },
  {
    "text": "so that's that's what we want right that's what we want is re reach a state where we've sort of saturated the",
    "start": "1795000",
    "end": "1800320"
  },
  {
    "text": "ability of our tool to find bugs and then we can sort of keep running it and now we're finding new bugs instead of old bugs and new bugs are awesome old",
    "start": "1800320",
    "end": "1806960"
  },
  {
    "text": "bugs suck because the person's probably not working at the company anymore and if they are they're doing something different the bug that just got",
    "start": "1806960",
    "end": "1813039"
  },
  {
    "text": "committed yesterday the code is fresh in somebody's mind if I can report that within a couple of days of it getting",
    "start": "1813039",
    "end": "1818679"
  },
  {
    "text": "committed to the code base um they remember what they're doing they're still working on it they probably have time they're going to fix it and so",
    "start": "1818679",
    "end": "1825440"
  },
  {
    "text": "that's so it took a took a long time but we eventually with these compilers got more or less to where we wanted to",
    "start": "1825440",
    "end": "1832480"
  },
  {
    "text": "be okay so um yarp Jen's primary author",
    "start": "1832799",
    "end": "1838760"
  },
  {
    "text": "actually essentially only author is uh my PhD student seid and uh y he he put a",
    "start": "1838760",
    "end": "1845240"
  },
  {
    "text": "lot of effort into writing a good driver for it like it'll run C ruce when it finds something it'll it'll it'll you know it'll it'll minimize the the bug",
    "start": "1845240",
    "end": "1851039"
  },
  {
    "text": "that it found um it's it'll use all the cores on your machine it's really easy to use yarp gen it's open source so if",
    "start": "1851039",
    "end": "1857240"
  },
  {
    "text": "if you feel like trying to break a compiler uh you know it's it's it's it's it's out there waiting for you but if you do use it we'd love to know um",
    "start": "1857240",
    "end": "1864120"
  },
  {
    "text": "because a lot of people use it and never tell us and um you know one thing we did is we got the GCC people to to keep a",
    "start": "1864120",
    "end": "1870039"
  },
  {
    "text": "meta bug for yarp Gen where if they if a bug is found using YP gen they add it to a list um tracking the bugs found with",
    "start": "1870039",
    "end": "1877039"
  },
  {
    "text": "the YP gen and this is really cool because it helps us keep score there used to be a compiler fuzzer for JavaScript called JS fun fuzz and",
    "start": "1877039",
    "end": "1885039"
  },
  {
    "text": "Mozilla eventually closed access to that um to that page to the metab buug for it",
    "start": "1885039",
    "end": "1890440"
  },
  {
    "text": "but it had well over a thousand bugs it was just this massive wall spider monkey was just a unbelievable pile of bugs",
    "start": "1890440",
    "end": "1897519"
  },
  {
    "text": "when JS fun funf sort of laid into it and just just completely just found so many it was it was unbelievable just",
    "start": "1897519",
    "end": "1903360"
  },
  {
    "text": "looking at looking at what this the author of JS funfa accomplished and of course JavaScript is security critical so that really mattered",
    "start": "1903360",
    "end": "1910720"
  },
  {
    "text": "there okay so I'm going to switch gears a little bit",
    "start": "1910720",
    "end": "1916120"
  },
  {
    "text": "now so let's talk about something that one of my it's a little bit more current",
    "start": "1916159",
    "end": "1921760"
  },
  {
    "text": "work so like I say uh Yar genen is um my my students graduating soon um he's kind",
    "start": "1921760",
    "end": "1927200"
  },
  {
    "text": "of wrapping up his his his main development on it unless he happens to get hired by a company who uh who uh",
    "start": "1927200",
    "end": "1932559"
  },
  {
    "text": "wants to pay him to work on it you know that'd be nice but I'm not sure if that'll happen so let's talk about generating parts of a compiler automatically and so why would you want",
    "start": "1932559",
    "end": "1939240"
  },
  {
    "text": "to generate parts of a compiler automatically it's because they're buggy when you write them by hand that's why I want to do it I mean there's lots of",
    "start": "1939240",
    "end": "1944440"
  },
  {
    "text": "other reasons but from the compiler bug point of view if we can generate something systematically and automatically you know we should do it",
    "start": "1944440",
    "end": "1950880"
  },
  {
    "text": "so let's talk about generating a Optimizer so optimizers are super fun artifacts um and something that's really",
    "start": "1950880",
    "end": "1957600"
  },
  {
    "text": "interesting about people optimizers is that um almost every compiler has one it's it's usually the first Optimizer",
    "start": "1957600",
    "end": "1963559"
  },
  {
    "text": "that a compiler gets so even really really dumb basic compilers like written in Python for some little DSL they get a",
    "start": "1963559",
    "end": "1970240"
  },
  {
    "text": "people Optimizer pretty quickly because they can clean up a lot of local inefficiencies in code and they're",
    "start": "1970240",
    "end": "1975399"
  },
  {
    "text": "simple and you can sort of incrementally improve them so what does a people optimization look like well the one I've",
    "start": "1975399",
    "end": "1981840"
  },
  {
    "text": "shown in the middle of the slide here is is is using a demorgan law to do some arithmetic simplification so the",
    "start": "1981840",
    "end": "1988480"
  },
  {
    "text": "complement of a anded with the complement of B can be turned into the complement of a orb saving one operation",
    "start": "1988480",
    "end": "1994960"
  },
  {
    "text": "right it's three operations on the leth hand side two operations on the right hand side that's more efficient and so",
    "start": "1994960",
    "end": "2000720"
  },
  {
    "text": "what a people Optimizer is is it's a collection of about 10,000 of these in the case of lvm it's a absolutely",
    "start": "2000720",
    "end": "2006039"
  },
  {
    "text": "gigantic number of these and it turned out to be a truly big mindfield of corner case errors because",
    "start": "2006039",
    "end": "2012279"
  },
  {
    "text": "every single one of these you know I'm I'm making up 10,000 at some number but they're mixed together so it's really hard to count them so I don't know how",
    "start": "2012279",
    "end": "2017760"
  },
  {
    "text": "many there are but every single one of them is a separate opportunity to be wrong and many of them involve very",
    "start": "2017760",
    "end": "2023000"
  },
  {
    "text": "finicky reasoning you know de Morgan here is not we're not going to get this wrong right but a lot of other ones are",
    "start": "2023000",
    "end": "2029039"
  },
  {
    "text": "very tricky and it turned out that when we started fuzzing lovm using cith the",
    "start": "2029039",
    "end": "2034159"
  },
  {
    "text": "people Optimizer was actually the single buggiest component of it so I considered it really ripe for ripe for replacement",
    "start": "2034159",
    "end": "2040120"
  },
  {
    "text": "um that's that's been on been on my list for a long time and we finally in a couple in the last recent years got around to doing this project so let's",
    "start": "2040120",
    "end": "2046960"
  },
  {
    "text": "talk about how this works so um the first thing we did was um something that turned out to",
    "start": "2046960",
    "end": "2052000"
  },
  {
    "text": "not be necessarily the right solution but I'm going to describe it kind of quickly anyway we created a tool called a super Optimizer a super Optimizer is",
    "start": "2052000",
    "end": "2058280"
  },
  {
    "text": "an Optimizer that uses meaningful search so most compiler optimizations have no search component right they just decide",
    "start": "2058280",
    "end": "2064919"
  },
  {
    "text": "whether to do something and they either I mean they they just either do something or don't do something does that kind of make sense they're not",
    "start": "2064919",
    "end": "2070599"
  },
  {
    "text": "trying things and backing out and looking at the results and evaluating they don't do that they don't have time",
    "start": "2070599",
    "end": "2076638"
  },
  {
    "text": "everybody everybody hates a slow compiler and search is not something we have time for in a compiler because it's",
    "start": "2076639",
    "end": "2082800"
  },
  {
    "text": "getting this mountain of like 35 megabytes of C++ once you've expanded the includes and it I mean there's no",
    "start": "2082800",
    "end": "2088079"
  },
  {
    "text": "surge it's it's hard to even just get through it at all okay so what the super Optimizer",
    "start": "2088079",
    "end": "2093560"
  },
  {
    "text": "does is slices out part of an lvm function so this is inside the compiler so we have the elev we're operating at",
    "start": "2093560",
    "end": "2099240"
  },
  {
    "text": "the level of lm's intermediate representation here it slices out part of the function and it uses a technique",
    "start": "2099240",
    "end": "2104520"
  },
  {
    "text": "called program synthesis to try to compute it the whatever whatever that whatever that slice computed it tries to do it more efficiently and it uses",
    "start": "2104520",
    "end": "2110760"
  },
  {
    "text": "program synthesis to do that program synthesis is sort of a slightly magical solver based technique for creating code",
    "start": "2110760",
    "end": "2116680"
  },
  {
    "text": "that conforms to a specification so here the specification is the original sliced code and we're just syn trying to",
    "start": "2116680",
    "end": "2122160"
  },
  {
    "text": "synthesize something and either synthesis succeeds in which case um we we we computed the value more",
    "start": "2122160",
    "end": "2127880"
  },
  {
    "text": "efficiently or it fails in which case you know we we just move on and we you know we we don't have a people optimization there and in the super tool",
    "start": "2127880",
    "end": "2135400"
  },
  {
    "text": "after it computes a people optimization you know can optionally apply it you know actually do the optimization and optionally cach it for the future",
    "start": "2135400",
    "end": "2140960"
  },
  {
    "text": "because synthesis is really slow so this works and so we're done no we're not",
    "start": "2140960",
    "end": "2146920"
  },
  {
    "text": "done we're not done at all this this we're not we're not even like a little bit done so super is incredibly slow",
    "start": "2146920",
    "end": "2152119"
  },
  {
    "text": "because it relies on making a massive number of calls to a theum Z3 um in",
    "start": "2152119",
    "end": "2157280"
  },
  {
    "text": "order to do synthesis so synthesis is this thing you know it's it's it's it's based on a formal specification for LM",
    "start": "2157280",
    "end": "2162920"
  },
  {
    "text": "intermediate representation and you know to evaluate the meaning of a piece of lovm intermediate representation you",
    "start": "2162920",
    "end": "2168920"
  },
  {
    "text": "know we we are asking Z3 lots of questions and to do synthesis we have to ask it a huge number of questions so the",
    "start": "2168920",
    "end": "2175359"
  },
  {
    "text": "search Space is really very large super is incredibly so nobody wants to load an optimization pass that makes their",
    "start": "2175359",
    "end": "2180599"
  },
  {
    "text": "compiler 150 times slower and 150 times is just a magic number you can make super as fast or as slow as you want by",
    "start": "2180599",
    "end": "2186400"
  },
  {
    "text": "tuning it synthesis if you make it really fast it doesn't do anything and if you make it take three weeks it'll do something but like nobody felt like",
    "start": "2186400",
    "end": "2192560"
  },
  {
    "text": "waiting three weeks for their program to compile okay so",
    "start": "2192560",
    "end": "2197720"
  },
  {
    "text": "um nobody wants a slow compiler right so um so the question is what do we do next so this is a way to get people",
    "start": "2197720",
    "end": "2204359"
  },
  {
    "text": "optimizations for free at some level we can automatically construct most of what we find in lm's people optimizers or",
    "start": "2204359",
    "end": "2211040"
  },
  {
    "text": "maybe not most of much of it um but it's impractical so what are we going to do so this is what my current student is",
    "start": "2211040",
    "end": "2217560"
  },
  {
    "text": "working on so let's talk about how super has impacted lvm it's impacted lvm indirectly with a human in the loop so",
    "start": "2217560",
    "end": "2223839"
  },
  {
    "text": "what people do occasionally is they'll run super on some LM intermediate representation it'll spit out some optimizations then they go ahead and",
    "start": "2223839",
    "end": "2230400"
  },
  {
    "text": "look at those really carefully and Implement them as part of the people Optimizer which is called inst combin and lvm so that's how super has had",
    "start": "2230400",
    "end": "2236839"
  },
  {
    "text": "impact on lvm and there's a bunch of lovm optimizations that came from super right it's had it's had a good amount of",
    "start": "2236839",
    "end": "2242280"
  },
  {
    "text": "impact but this isn't how we wanted to do it we don't want the person doing this because um it turns out that the",
    "start": "2242280",
    "end": "2249040"
  },
  {
    "text": "the this process of manually taking something generated by super which is a completely specific optimization and",
    "start": "2249040",
    "end": "2255160"
  },
  {
    "text": "generalizing it to make it something that you know can be used in in in a more General case inside the compiler",
    "start": "2255160",
    "end": "2260839"
  },
  {
    "text": "that's the hard part that's the error prone part that's where people make mistakes and we turned out we automated",
    "start": "2260839",
    "end": "2265880"
  },
  {
    "text": "the wrong thing basically so spotting the M optimization is what Super's great at that's not really the hardest part the hard part is is is the next part so",
    "start": "2265880",
    "end": "2273000"
  },
  {
    "text": "now we have now we next Tred to attack the hard part let's talk talk about the hard part so let's say super C's um x *",
    "start": "2273000",
    "end": "2280000"
  },
  {
    "text": "2 it would synthesize x shift left by one on many platforms that's considered desirable right um the multiplier is a",
    "start": "2280000",
    "end": "2286839"
  },
  {
    "text": "more expensive piece of Hardware than a shifter so that's a good optimization that is um not General",
    "start": "2286839",
    "end": "2292920"
  },
  {
    "text": "that's specific the thing the compiler developer would Implement is the generalized version of it and how do we",
    "start": "2292920",
    "end": "2299680"
  },
  {
    "text": "generalize this well let's go through what our generalization tool chain does and also this is basically mirrors what",
    "start": "2299680",
    "end": "2306640"
  },
  {
    "text": "a compiler developer would do by hand but again they screw it up this generalization part is hard um it's",
    "start": "2306640",
    "end": "2312319"
  },
  {
    "text": "really not easy okay so we have x x 2 being Rewritten as X left shifted by one",
    "start": "2312319",
    "end": "2318960"
  },
  {
    "text": "what do we need to do what's the what's the what's the obvious thing to generalize first here who wants to just yell out yeah two is a very weird choice of",
    "start": "2318960",
    "end": "2327599"
  },
  {
    "text": "number we don't want to just optimize multiplying by two right that's stupid okay so what do we want to do well we",
    "start": "2327599",
    "end": "2332640"
  },
  {
    "text": "want to multiply x times a constant and then we're going to that's going to turn into shifting left",
    "start": "2332640",
    "end": "2338359"
  },
  {
    "text": "by some other constant now there's two problems with this one is that we can't do that for all choices of C right this",
    "start": "2338359",
    "end": "2344680"
  },
  {
    "text": "only works for specific choices of C somebody just yell it out powers of two of course the other",
    "start": "2344680",
    "end": "2349920"
  },
  {
    "text": "thing is we haven't we don't know how to compute D yet okay so we've broken the optimization completely so what do we do",
    "start": "2349920",
    "end": "2356680"
  },
  {
    "text": "well we're going to compute a precondition in order to make this re optimization only fire when it's able to",
    "start": "2356680",
    "end": "2362960"
  },
  {
    "text": "work and so we do it like this we add a precondition called you know using a",
    "start": "2362960",
    "end": "2368079"
  },
  {
    "text": "lovm built-in primitive is Power of Two And if it is a power of two then we can fire the optimization and how do we get",
    "start": "2368079",
    "end": "2374920"
  },
  {
    "text": "the precondition well we use program synthesis again this has been a really fun part of this project is we had this program synthesis engine that we wrote",
    "start": "2374920",
    "end": "2380960"
  },
  {
    "text": "for super we just keep calling it again and again um in different parts of this tool and I'm not even going to tell you about all of them I'm just going to tell",
    "start": "2380960",
    "end": "2386960"
  },
  {
    "text": "you about a few of them okay so this works but we still haven't figured out how to compute D and so now I've already",
    "start": "2386960",
    "end": "2392480"
  },
  {
    "text": "told you how to compute D what do we do how do we figure out how to compute",
    "start": "2392480",
    "end": "2399319"
  },
  {
    "text": "D no that's how you compute it but how do how how do how does my generalization tool do it program synthesis right",
    "start": "2399319",
    "end": "2406720"
  },
  {
    "text": "program synthesis so we synthesize a log function of C and you know now we get a",
    "start": "2406720",
    "end": "2412560"
  },
  {
    "text": "complete optimization this actually works so this is a correct optimization it's significantly more General it",
    "start": "2412560",
    "end": "2418839"
  },
  {
    "text": "hasn't been generalized completely yet and so in one tiny way in which we can make it more General is we'd also like",
    "start": "2418839",
    "end": "2424839"
  },
  {
    "text": "to apply this to the commuted version that's pretty trivial um there's a very big missing part here which is we want",
    "start": "2424839",
    "end": "2432359"
  },
  {
    "text": "to make the thing work at different bit widths and this is this turned out to be a pretty tricky problem so in LM",
    "start": "2432359",
    "end": "2438640"
  },
  {
    "text": "intermediate inside the compiler things can be arbitrary bitwidth right they're fixed withth but they're arbitrary and",
    "start": "2438640",
    "end": "2444400"
  },
  {
    "text": "when you build the Levan compiler using itself you see integers of every bit width from one to like 87 and then from",
    "start": "2444400",
    "end": "2452839"
  },
  {
    "text": "87 it's sparsely populated up to 320 why do you see a 320 bit integer I",
    "start": "2452839",
    "end": "2458480"
  },
  {
    "text": "don't even remember I I looked into this one time why do we see every single integer withth up to 87 just it just",
    "start": "2458480",
    "end": "2464880"
  },
  {
    "text": "does that that's how it works so optimizations need to work on um values",
    "start": "2464880",
    "end": "2470760"
  },
  {
    "text": "of arbitrary bitwidth okay so I'm going to talk about that on the next slide so I'm not going to talk about it too much here because it's hard um and I want to",
    "start": "2470760",
    "end": "2478160"
  },
  {
    "text": "add that every step of the every at every step of the generalization pipeline here we're proving the thing correct so we we make sure to never",
    "start": "2478160",
    "end": "2484880"
  },
  {
    "text": "break it or I mean we do break it sort of temporarily at step two right but we we sure we make sure we to move it back",
    "start": "2484880",
    "end": "2490960"
  },
  {
    "text": "to a correct optimization using a tool called alive 2 which is something that my research group works on although",
    "start": "2490960",
    "end": "2496839"
  },
  {
    "text": "we're not the primary developers of it um it is a mechanized semantics for the lovm intermediate representation that",
    "start": "2496839",
    "end": "2503040"
  },
  {
    "text": "can basically tell you whether rewriting X toy is is legal according to the rules",
    "start": "2503040",
    "end": "2508240"
  },
  {
    "text": "of lvm optimizations",
    "start": "2508240",
    "end": "2515240"
  },
  {
    "text": "uh yeah I'm possibly simplifying here I think this one pro I think this one works both both ways I think this one",
    "start": "2515240",
    "end": "2522800"
  },
  {
    "text": "works both ways but division certainly wouldn't right unsigned and signed division are totally different I'm I'm",
    "start": "2522800",
    "end": "2528119"
  },
  {
    "text": "pretty sure this one is okay for for just for just for a bit Vector X right it doesn't we don't care if it signed or unsigned I'm pretty sure this works for",
    "start": "2528119",
    "end": "2533960"
  },
  {
    "text": "multip for the multiplication rules but I'd have to go check and so live to is this tool we created and so one thing that I did that I'm pretty happy with is",
    "start": "2533960",
    "end": "2540559"
  },
  {
    "text": "I so it's you can hardly see it at the bottom there but I made a compiler Explorer instance that gives you access to a live 2 so you can um paste",
    "start": "2540559",
    "end": "2549440"
  },
  {
    "text": "something like this so the question Andre asked is does this work for for you know in general you could you could",
    "start": "2549440",
    "end": "2554559"
  },
  {
    "text": "you could ask lvm this question I mean you could ask a live to this question in a compiler Explorer instance and it would just do it it would just tell you",
    "start": "2554559",
    "end": "2560200"
  },
  {
    "text": "that it works I hope um anyway so I didn't paste this exact I didn't paste",
    "start": "2560200",
    "end": "2565760"
  },
  {
    "text": "this exact stuff into into Al Live 2 anyway so by creating this thing which confine compiler bugs um you know we",
    "start": "2565760",
    "end": "2573000"
  },
  {
    "text": "also enabl the syn synthesis engine and this generalization engine to work so this has been really cool okay so now I",
    "start": "2573000",
    "end": "2578760"
  },
  {
    "text": "want to talk about the hard part here which is the bitwidth independence this turned out to be really difficult because so you remember on the previous",
    "start": "2578760",
    "end": "2585440"
  },
  {
    "text": "slide we had to compute that constant D at any bitwidth so we have to compute we have to synthesize code which computes a",
    "start": "2585440",
    "end": "2592800"
  },
  {
    "text": "specific constant that's in a bitwidth independent fashion does that kind of",
    "start": "2592800",
    "end": "2597960"
  },
  {
    "text": "make sense so it has to work at all bitwidth humans do that naturally pretty well it turned out to be really hard to",
    "start": "2597960",
    "end": "2604760"
  },
  {
    "text": "get our synthesis engine to respect that constraint um and this is made more Tricky by the fact that some",
    "start": "2604760",
    "end": "2610599"
  },
  {
    "text": "optimizations aren't bit with independent and I already showed you an example that example optimizing the sign multiply with overflow worked at all bit",
    "start": "2610599",
    "end": "2617559"
  },
  {
    "text": "withth other than one there's plenty of optimizations that you know have weird weird quirky Corner cases at different",
    "start": "2617559",
    "end": "2624160"
  },
  {
    "text": "bit widths and we have to respect those in this in this pipeline or else we'll get it wrong and then finally there's",
    "start": "2624160",
    "end": "2629440"
  },
  {
    "text": "lots of optimizations and I'm not going to show you any today but there's lots of obervations that involve values of different wids we're truncating we're",
    "start": "2629440",
    "end": "2635640"
  },
  {
    "text": "extending we're doing all sorts of crazy stuff and working with those in a bit with independent fashion is actually",
    "start": "2635640",
    "end": "2641400"
  },
  {
    "text": "quite difficult because you know the shape of the thing you're dealing with it's only sort of loosely constrained right they're not it's it's not like the",
    "start": "2641400",
    "end": "2647200"
  },
  {
    "text": "whole thing's at the same bit with there's all sorts of variables going on and you know this this is fairly hard stuff so um furthermore Z3 our",
    "start": "2647200",
    "end": "2655319"
  },
  {
    "text": "underlying theor improver gives us essentially no help it's it Z3 can only answer questions about us specific bit",
    "start": "2655319",
    "end": "2660559"
  },
  {
    "text": "with and the general questions we want to ask it we can't ask it we have to solve them separately ourselves and a",
    "start": "2660559",
    "end": "2666280"
  },
  {
    "text": "little bit of work on this in other theor improvers that aren't Z3 but uh it's it's not production ready so we had",
    "start": "2666280",
    "end": "2671839"
  },
  {
    "text": "to do this all ourselves so we didn't understand how hard this would be or that this was really a real problem and",
    "start": "2671839",
    "end": "2678160"
  },
  {
    "text": "when when my student and I finally figured out this is a problem it set us back a year or so but while we figured it all out but on the plus side you know",
    "start": "2678160",
    "end": "2684200"
  },
  {
    "text": "we've sort of got a handle on this now and it's it's it's really cool stuff it's really cool work that I'm that I'm super excited",
    "start": "2684200",
    "end": "2689440"
  },
  {
    "text": "about okay so let's say that all works and it mostly does right I'm telling you about a re about a research project",
    "start": "2689440",
    "end": "2695480"
  },
  {
    "text": "that's in a fair really good State at this point so let's tell see what we do with it so we take the generalized optimization we turn it into C++ so C++",
    "start": "2695480",
    "end": "2702160"
  },
  {
    "text": "is lm's implementation language so if we want to actually run our generalized optimizations we have to turn them into C++ so we do it and we get something you",
    "start": "2702160",
    "end": "2709240"
  },
  {
    "text": "know a little more complicated than what I'm showing you here but it's basically the same thing so let's just talk through this quickly so um there's a",
    "start": "2709240",
    "end": "2716079"
  },
  {
    "text": "sort of a domain specific pattern matcher in lovm that this match construct gets us into and so we're",
    "start": "2716079",
    "end": "2721240"
  },
  {
    "text": "saying is for an instruction I um we want to match it if it's a",
    "start": "2721240",
    "end": "2726559"
  },
  {
    "text": "multiplication of some value that's going to be stored into X and some constant that's going to be stored into C so now if that matches we're going to",
    "start": "2726559",
    "end": "2733359"
  },
  {
    "text": "get an X and specific X and C to work with so that's nice um if it doesn't match then we we don't get these values",
    "start": "2733359",
    "end": "2739640"
  },
  {
    "text": "of course and we just fall out uh the MC m means we're matching a communative mole it'll multiply it'll match X time C",
    "start": "2739640",
    "end": "2745240"
  },
  {
    "text": "or c x x just sort of nice little freebie there um so if the match matches",
    "start": "2745240",
    "end": "2750480"
  },
  {
    "text": "so if the structural prerequisite for the for the optimization is holds and also",
    "start": "2750480",
    "end": "2756559"
  },
  {
    "text": "the constant is a power of two then we can replace all uses of I with um a fresh shift that we've created a fresh",
    "start": "2756559",
    "end": "2763400"
  },
  {
    "text": "fresh left shift by the proper amount so we generate this entirely automatically um this is not far from what a person",
    "start": "2763400",
    "end": "2769440"
  },
  {
    "text": "would write there's other cases where we where we generate really weird stuff because you know this this synthesis engine is not constrained by how you",
    "start": "2769440",
    "end": "2775359"
  },
  {
    "text": "think or how I think it just creates random stuff some of this stuff is really hard to understand other times like this it generates what what we had",
    "start": "2775359",
    "end": "2781920"
  },
  {
    "text": "sort of expected to see and now we have a optimization code that we can load into an LM pass and just drop it into",
    "start": "2781920",
    "end": "2789200"
  },
  {
    "text": "lvm as a shared library and go so we can turn off instamine and we can turn on our thing and we can just go and it works um and it's very cool it's not as",
    "start": "2789200",
    "end": "2795839"
  },
  {
    "text": "good because we you know we still have some things missing inamine can play a lot of tricks that we can't play yet um",
    "start": "2795839",
    "end": "2800960"
  },
  {
    "text": "like for example it has an alias analysis built in and we don't but you know we're doing pretty well so let me",
    "start": "2800960",
    "end": "2807359"
  },
  {
    "text": "show you one more example here um when we look in the LM issue tracker",
    "start": "2807359",
    "end": "2813280"
  },
  {
    "text": "they they they track a lot of issues where there's a missing people op to a that they want that they nobody's had time to implement yet so here's one so",
    "start": "2813280",
    "end": "2819880"
  },
  {
    "text": "Nikita here has said um on June 23rd said well here so the the the the the",
    "start": "2819880",
    "end": "2825680"
  },
  {
    "text": "thing at the top the top block of code that's what Nikita noticed in some code",
    "start": "2825680",
    "end": "2830839"
  },
  {
    "text": "that could be Rewritten as the code below and Nikita has very uh uh",
    "start": "2830839",
    "end": "2837040"
  },
  {
    "text": "conveniently included a link to our compiler Explorer instance to demonstrate that Nikita has found an optimization is actually correct you",
    "start": "2837040",
    "end": "2843520"
  },
  {
    "text": "know so he just shells out to a compiler Explorer which um you know proves it correct right right right right on the",
    "start": "2843520",
    "end": "2848720"
  },
  {
    "text": "Fly for you right there um so this is correct nobody's had time to implement it yet and the thing is we can hand this",
    "start": "2848720",
    "end": "2854480"
  },
  {
    "text": "particular thing to our generalization engine and it just it just works it so",
    "start": "2854480",
    "end": "2859680"
  },
  {
    "text": "we looked at you know maybe the last 10 of these the most recent 10 of these in the LM issue tracker it doesn't work for all of them it works for like eight of",
    "start": "2859680",
    "end": "2865880"
  },
  {
    "text": "them um and so you know this is I think it stands to be something that might be able to change you know again the",
    "start": "2865880",
    "end": "2872200"
  },
  {
    "text": "premise here is we wanted to change the the the the the the economics of compiler development if we can take a",
    "start": "2872200",
    "end": "2878280"
  },
  {
    "text": "chunk of the compiler that people had a hard time getting right and just take it away from them just give them correct",
    "start": "2878280",
    "end": "2883400"
  },
  {
    "text": "code maybe this changes the economics in a favorable fashion I don't know maybe it frees up that engineer to fix a bug now instead of um working on a people",
    "start": "2883400",
    "end": "2890000"
  },
  {
    "text": "Optimizer maybe it you know maybe maybe it has some other good effect I don't know we'll see okay so I'm finishing up here so",
    "start": "2890000",
    "end": "2899119"
  },
  {
    "text": "generalizing optimization so this is the PHD work for my student manage um we don't have a public version of this yet",
    "start": "2899119",
    "end": "2904240"
  },
  {
    "text": "but I really would like to put up a compiler Explorer instance that not only has a live 2 in it like we've already done but also has this generalization",
    "start": "2904240",
    "end": "2910000"
  },
  {
    "text": "engine in it so people can take stuff like Nikita's um little little issue paste it in and it just gives you the C",
    "start": "2910000",
    "end": "2915520"
  },
  {
    "text": "plus code that would be suitable for pasting into the compiler I really want to do that but you know the thing is slow it crashes you know it's it's",
    "start": "2915520",
    "end": "2921720"
  },
  {
    "text": "research software you know um anyway so in the future I think that other parts",
    "start": "2921720",
    "end": "2928119"
  },
  {
    "text": "of compilers are very amenable to this approach compilers again they're inherently mathematical objects they're",
    "start": "2928119",
    "end": "2933359"
  },
  {
    "text": "solving well understood mathematical problems with well understood properties everything they do is mechanized and yet",
    "start": "2933359",
    "end": "2939359"
  },
  {
    "text": "they're these monster collections of C++ it's it's almost a travesty to see it's it's just it's just it's just kind of",
    "start": "2939359",
    "end": "2944520"
  },
  {
    "text": "wrong um how we build them and so you know I think we can do better and so you know hopefully we can automatically",
    "start": "2944520",
    "end": "2949599"
  },
  {
    "text": "construct lots of other parts too I'm done and thank you very",
    "start": "2949599",
    "end": "2955590"
  },
  {
    "text": "[Applause]",
    "start": "2955590",
    "end": "2959849"
  },
  {
    "text": "much do we take a few minutes for questions or should we just everybody get get to the train",
    "start": "2962599",
    "end": "2968880"
  },
  {
    "text": "station okay okay",
    "start": "2971440",
    "end": "2975400"
  },
  {
    "text": "sure the I didn't talk about but that makes a very small test case typically for a bug trigger and now you just look",
    "start": "2988319",
    "end": "2994000"
  },
  {
    "text": "at it look at all the you know you now you have to look at all the other bugs and and try not to report",
    "start": "2994000",
    "end": "3000000"
  },
  {
    "text": "it we've duplicated before we we we these are these are ones that the compiler developers have confirmed as as",
    "start": "3000000",
    "end": "3007119"
  },
  {
    "text": "as as as real yeah thank you yeah",
    "start": "3007119",
    "end": "3011760"
  },
  {
    "text": "Jason yes so the question is Jason asked is yeah have we learned novel optimizations so far it hasn't the",
    "start": "3019160",
    "end": "3024760"
  },
  {
    "text": "synthesis engine is not smart enough that it's reached what I would consider the point of sort of creativity it's not at the algorithm level um it's not",
    "start": "3024760",
    "end": "3031200"
  },
  {
    "text": "synthesizing like a you know so has everybody looked at a fast pop count fast pop counts are awesome I totally",
    "start": "3031200",
    "end": "3036480"
  },
  {
    "text": "encourage you if you haven't gone to look at the Wikipedia page for pop count go look at the Wikipedia page for popc count or Hamming haming weight um you",
    "start": "3036480",
    "end": "3042440"
  },
  {
    "text": "know it's a number of set bits in a word the the fastest algorithms for this are awesome um you know this technique and",
    "start": "3042440",
    "end": "3048799"
  },
  {
    "text": "principle could could make a could make a faster one than anybody's ever seen if if it exists um in practi",
    "start": "3048799",
    "end": "3056040"
  },
  {
    "text": "this that's beyond the scope of our synthesis engine which can only makes a couple of instructions at a time the search space is exponential it's not to",
    "start": "3056040",
    "end": "3062359"
  },
  {
    "text": "the point where where it's making algorithms it's still doing fairly basic things I haven't seen any new discoveries yet although it does come up",
    "start": "3062359",
    "end": "3067920"
  },
  {
    "text": "with a lot of stuff that I don't understand yeah there's a lot of them that I just",
    "start": "3067920",
    "end": "3073359"
  },
  {
    "text": "don't understand and you say ah you know I mean I believe the theorem Pro but I have no idea what the hell's going",
    "start": "3073359",
    "end": "3079160"
  },
  {
    "text": "on Victor",
    "start": "3079440",
    "end": "3086400"
  },
  {
    "text": "is there any way toate the process",
    "start": "3086400",
    "end": "3091359"
  },
  {
    "text": "ofing yeah okay so Victor asked some about optimization phase ordering this is a",
    "start": "3094040",
    "end": "3100480"
  },
  {
    "text": "hard problem we don't have really very good work very good solutions to that yet there's actually a whole bunch of subtleties like that that I didn't",
    "start": "3100480",
    "end": "3106960"
  },
  {
    "text": "mention here that we're sort of working on we don't necessarily have great ideas uh all what I'll just say is these",
    "start": "3106960",
    "end": "3114000"
  },
  {
    "text": "mechanically discovered optimizations are really amenable to reordering and doing whatever you want with because they're nice separable pieces whereas",
    "start": "3114000",
    "end": "3119520"
  },
  {
    "text": "the human written stuff is just a big jumbled mess um so the potential is there but I'm not sure we have the ideas",
    "start": "3119520",
    "end": "3127160"
  },
  {
    "text": "yet okay we'll one",
    "start": "3127200",
    "end": "3131040"
  },
  {
    "text": "more the question is yeah for other languages yeah so so for example I mentioned a little bit that JS fun fuzz is a is a fuzzer that found a huge",
    "start": "3136280",
    "end": "3142839"
  },
  {
    "text": "number of vulnerabilities in spider monkey um most many languages now have a",
    "start": "3142839",
    "end": "3148720"
  },
  {
    "text": "fuzzer when I started doing this people were I got a lot of hostility actually it was very fun because I I thrive on I",
    "start": "3148720",
    "end": "3155040"
  },
  {
    "text": "thrive on hostility uh but but but people people have come around I don't think anybody can I don't think I think",
    "start": "3155040",
    "end": "3160720"
  },
  {
    "text": "you have to build a fuzzer if you build a new compiler build a new language I think you just have to do it if you if you want it to be very good eventually I",
    "start": "3160720",
    "end": "3166680"
  },
  {
    "text": "mean not at first right but after a couple of years you do can my tool be adapted to other",
    "start": "3166680",
    "end": "3173319"
  },
  {
    "text": "languages no no very specific that that's a that's another dream the the",
    "start": "3173319",
    "end": "3178640"
  },
  {
    "text": "generic fuzzer is is a different dream but that that that would be great but but no okay than thank you very much",
    "start": "3178640",
    "end": "3185599"
  },
  {
    "text": "everyone",
    "start": "3186720",
    "end": "3189720"
  }
]