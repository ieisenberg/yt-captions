[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "hello so shall we get started",
    "start": "2199",
    "end": "7910"
  },
  {
    "text": "yeah that's people coming in also these lasers hope right I can't see anything",
    "start": "7910",
    "end": "15730"
  },
  {
    "text": "right so welcome to their stock we're going to be talking about HTTP history",
    "start": "15730",
    "end": "21560"
  },
  {
    "text": "and performance very happy to see you here my name's Anna I'm your speaker you",
    "start": "21560",
    "end": "29150"
  },
  {
    "text": "can find me in all the different places on the internet including Twitter where I'll be posting this light if you ever",
    "start": "29150",
    "end": "35600"
  },
  {
    "text": "want to use them as a reference go back and check something I work at a small",
    "start": "35600",
    "end": "41329"
  },
  {
    "text": "start-up based in London called Verve as a senior software engineer and I mostly do Python and Django Django is a popular",
    "start": "41329",
    "end": "48469"
  },
  {
    "text": "Python web framework any Python people in the audience yeah nice nice I love it",
    "start": "48469",
    "end": "56289"
  },
  {
    "text": "that's very cool just to make it clear so I am NOT I'm not like a network",
    "start": "56289",
    "end": "64370"
  },
  {
    "text": "engineer or a web standards advocate or evangelist I decided that I want to",
    "start": "64370",
    "end": "71150"
  },
  {
    "text": "speak about HTTP because this is something that I found interesting and I'm just a regular back-end developer no",
    "start": "71150",
    "end": "79220"
  },
  {
    "text": "more than that so when I came to the well eventually found out about",
    "start": "79220",
    "end": "87130"
  },
  {
    "start": "80000",
    "end": "132000"
  },
  {
    "text": "hypertext Transfer Protocol and I have an OCD in naming things so I can spend",
    "start": "87130",
    "end": "93290"
  },
  {
    "text": "hours just figuring out what is the correct variable name for something so",
    "start": "93290",
    "end": "99680"
  },
  {
    "text": "when I saw text that kind of was a dissonance because I'm pretty sure I can",
    "start": "99680",
    "end": "107810"
  },
  {
    "text": "transfer not only text but I can transfer audio and images and all sorts of things so I thought should probably",
    "start": "107810",
    "end": "113060"
  },
  {
    "text": "be called hyper media well in fact it has been tried to rename HTTP to",
    "start": "113060",
    "end": "118340"
  },
  {
    "text": "something like hyper media but it never got changed and the initial version hypertext Transfer Protocol was a",
    "start": "118340",
    "end": "125420"
  },
  {
    "text": "misnomer because the first implementation of HTTP in fact could transfer only tax",
    "start": "125420",
    "end": "131880"
  },
  {
    "text": "so in 1991 Tim berners-lee outlined the",
    "start": "131880",
    "end": "136890"
  },
  {
    "start": "132000",
    "end": "426000"
  },
  {
    "text": "basics of the modern web which included HTTP and HTML at the time there was no",
    "start": "136890",
    "end": "143760"
  },
  {
    "text": "RFC nose back but there was an implementation of a subset of the",
    "start": "143760",
    "end": "149310"
  },
  {
    "text": "protocol which later on we called HTTP 0.9 so interestingly enough it is",
    "start": "149310",
    "end": "157170"
  },
  {
    "text": "possible to speak to many servers in the wild HTTP 0.9 as an example you can tell",
    "start": "157170",
    "end": "167820"
  },
  {
    "text": "that to some cellphone the port 80 and see how it's done and so what we're",
    "start": "167820",
    "end": "172890"
  },
  {
    "text": "doing here we're going to tell that to miss the Stallman's website the server",
    "start": "172890",
    "end": "178290"
  },
  {
    "text": "will tell us that we are connected to Stallman org what we do next I type in",
    "start": "178290",
    "end": "183930"
  },
  {
    "text": "get this my request a space and the index I want to access the index page",
    "start": "183930",
    "end": "189840"
  },
  {
    "text": "and when I hit enter straight away the server spits out all of the HTML and",
    "start": "189840",
    "end": "195510"
  },
  {
    "text": "closes the connection and this is it the main features of HTTP 0.9 are mmm the",
    "start": "195510",
    "end": "204900"
  },
  {
    "text": "client request is a single ASCII characters strength terminated by a",
    "start": "204900",
    "end": "210750"
  },
  {
    "text": "newline it consists of words yet and in fact at that point the only verb that",
    "start": "210750",
    "end": "217800"
  },
  {
    "text": "you could use was get followed by a space followed by the document address the server response is similarly a byte",
    "start": "217800",
    "end": "225780"
  },
  {
    "text": "stream of ASCII text marked up in HTML or plain text if you wish the response",
    "start": "225780",
    "end": "235310"
  },
  {
    "text": "the response message is terminated by closing the connection so you need a way to figure out that the server has sent",
    "start": "235310",
    "end": "242460"
  },
  {
    "text": "out everything all of the data that it had and this is it like this this is the end so how we do it we just close the",
    "start": "242460",
    "end": "248850"
  },
  {
    "text": "connection this is the signal that you got you got all of it there was no",
    "start": "248850",
    "end": "254250"
  },
  {
    "text": "metadata so you can't do any content negotiation either so yeah",
    "start": "254250",
    "end": "262330"
  },
  {
    "text": "overall a lot of things are not here stuff that we are fairly used to in HTTP",
    "start": "262330",
    "end": "268090"
  },
  {
    "text": "but this protocol was fairly simple and in fact it was so simple to implement",
    "start": "268090",
    "end": "273639"
  },
  {
    "text": "and follow along and get started with that it took off and actually became",
    "start": "273639",
    "end": "278919"
  },
  {
    "text": "quite popular so right after HTTP 0.9 was kind of released into the wild and",
    "start": "278919",
    "end": "285930"
  },
  {
    "text": "developers started implementing the protocol on the servers and on the",
    "start": "285930",
    "end": "293110"
  },
  {
    "text": "clients works began on establishing a proper spec that became known as HTTP",
    "start": "293110",
    "end": "299680"
  },
  {
    "text": "1.0 and that happened in 1996 so let's",
    "start": "299680",
    "end": "304870"
  },
  {
    "text": "forget about telnet because this is obviously a very insecure channel of communication and let's use C URL if you",
    "start": "304870",
    "end": "313509"
  },
  {
    "text": "want to make a request using C RL in HT p 1.0 you need to pass in the zero argument so",
    "start": "313509",
    "end": "323349"
  },
  {
    "text": "let's fetch the home page of Twitter first thing you we connect to the Twitter server C RL for us will inject",
    "start": "323349",
    "end": "332529"
  },
  {
    "text": "the request headers there is a get slash the protocol version there are a bunch",
    "start": "332529",
    "end": "338770"
  },
  {
    "text": "of headers like the host user agent we receive the response which is made up of",
    "start": "338770",
    "end": "344710"
  },
  {
    "text": "the response headers and of the response payload the response headers will tell",
    "start": "344710",
    "end": "350650"
  },
  {
    "text": "us the response status code in this in this case 200 ok and other things for",
    "start": "350650",
    "end": "356440"
  },
  {
    "text": "example like content type and then the response is a plain text HTML and the",
    "start": "356440",
    "end": "362409"
  },
  {
    "text": "connection is closed similarly how it has been done previously so there are a lot of lots of things going on here so",
    "start": "362409",
    "end": "370000"
  },
  {
    "text": "the requests suddenly can consist of walter multi-line new line separated",
    "start": "370000",
    "end": "376389"
  },
  {
    "text": "header fields it also includes the protocol version can suddenly we started",
    "start": "376389",
    "end": "383289"
  },
  {
    "text": "thinking about the future because after 1.0 we'll probably want to have one point one who knows the response object",
    "start": "383289",
    "end": "391930"
  },
  {
    "text": "has its own set of new lines separated Hatter's graphics with a status response",
    "start": "391930",
    "end": "399630"
  },
  {
    "text": "line the connection between the server and the kind is still closed after every single request response is not limited",
    "start": "399630",
    "end": "406350"
  },
  {
    "text": "to hypertext anymore so this is the breakthrough we suddenly can have all the different content types",
    "start": "406350",
    "end": "412169"
  },
  {
    "text": "exciting and there's generally a lot of things that have been defined by the spec for example caching mechanisms and",
    "start": "412169",
    "end": "418830"
  },
  {
    "text": "proxy behaviors and and content type negotiation and content encoding lots",
    "start": "418830",
    "end": "425520"
  },
  {
    "text": "and lots of things now what are we gonna do next is we're gonna do some examples",
    "start": "425520",
    "end": "431400"
  },
  {
    "start": "426000",
    "end": "697000"
  },
  {
    "text": "and this is a warning so we will be timing how much does it costs us to make",
    "start": "431400",
    "end": "438780"
  },
  {
    "text": "a request to to do a certain request",
    "start": "438780",
    "end": "444389"
  },
  {
    "text": "response cycle so essentially like the whole round-trip and we'll be using fixed synthetic values say we'll say the",
    "start": "444389",
    "end": "452820"
  },
  {
    "text": "latency is going to be 30 milliseconds whereas in the real world the networks don't work like that they continuously",
    "start": "452820",
    "end": "458400"
  },
  {
    "text": "fluctuate so you don't get like a static latency it's all kind of going up and down so what do we have here we have our",
    "start": "458400",
    "end": "467220"
  },
  {
    "text": "client and we have our server so as we said before let's assume the round-trip is 30 milliseconds that's fairly low",
    "start": "467220",
    "end": "473849"
  },
  {
    "text": "latency it's not too bad before the client can start fetching data from the",
    "start": "473849",
    "end": "479610"
  },
  {
    "text": "server we need to establish a TCP connection because most common use case",
    "start": "479610",
    "end": "485880"
  },
  {
    "text": "how we run HTTP is over TCP this is how the OSI stack kind of works so first we",
    "start": "485880",
    "end": "492150"
  },
  {
    "text": "need to do the freeway handshake the client sends a syn package to the server the server responds with a syn",
    "start": "492150",
    "end": "497580"
  },
  {
    "text": "acknowledge the client responds with a acknowledged package and it packages together with this also the request so",
    "start": "497580",
    "end": "504150"
  },
  {
    "text": "that it doesn't need to do another round trip now the server spans some arbitrary",
    "start": "504150",
    "end": "511860"
  },
  {
    "text": "time processing the request say there's a 35 milliseconds for our server to prep",
    "start": "511860",
    "end": "519120"
  },
  {
    "text": "the response it returns the response back and then we close the connection so",
    "start": "519120",
    "end": "526440"
  },
  {
    "text": "in total what happens is we we spent one round-trip for the TCP handshake 30 milliseconds and for the",
    "start": "526440",
    "end": "531780"
  },
  {
    "text": "HTTP exchange 65 milliseconds now pages on the web really consists of",
    "start": "531780",
    "end": "538830"
  },
  {
    "text": "a single resource I mean unless you're using something like links text based",
    "start": "538830",
    "end": "544560"
  },
  {
    "text": "browsers really cool and suitable for certain use cases but most of the times it's not the",
    "start": "544560",
    "end": "552270"
  },
  {
    "text": "case so in case of Twitter to see the Twitter homepage we would need to",
    "start": "552270",
    "end": "557600"
  },
  {
    "text": "download fetch 21 resources and for that",
    "start": "557600",
    "end": "563460"
  },
  {
    "text": "we would need to wait roughly two seconds if we were to request it over HTTP 1.0 assuming the time to first byte",
    "start": "563460",
    "end": "571710"
  },
  {
    "text": "is actually faster this is still far from being instant like generally by our",
    "start": "571710",
    "end": "577050"
  },
  {
    "text": "modern standards this is kind of slow and according to HTTP archive actually",
    "start": "577050",
    "end": "582230"
  },
  {
    "text": "modern day web pages are roughly consist of on average 100 resources so that will",
    "start": "582230",
    "end": "590850"
  },
  {
    "text": "make us wait for 9.5 seconds which is kind of horrendous but actually lied to",
    "start": "590850",
    "end": "599340"
  },
  {
    "text": "you when I showed you the CRL request it said connected to twitter.com on port",
    "start": "599340",
    "end": "606530"
  },
  {
    "text": "443 which is which means that we've made our request over HTTPS and what happens",
    "start": "606530",
    "end": "614550"
  },
  {
    "text": "when we do it is on top of the TCP 3-way handshake we also need to do the TLS",
    "start": "614550",
    "end": "620460"
  },
  {
    "text": "handshake which is another whole story because we need to establish a secure channel for communication and only after that we can",
    "start": "620460",
    "end": "628680"
  },
  {
    "text": "start exchanging application data and do what we actually wanted to do in the first place that concludes that - the",
    "start": "628680",
    "end": "634680"
  },
  {
    "text": "one round-trip for TCP we have another extra two round trips for TLS there's",
    "start": "634680",
    "end": "643710"
  },
  {
    "text": "good news TLS sessions can be resumed so what happens in this case we spend one",
    "start": "643710",
    "end": "649140"
  },
  {
    "text": "round-trip for the TCP handshake and we spend one round-trip instead of two round-trip for the TLS session",
    "start": "649140",
    "end": "654960"
  },
  {
    "text": "resumption and then again we can exchange the application data now back",
    "start": "654960",
    "end": "660690"
  },
  {
    "text": "to the Twitter homepage in our 21 request assuming that the first connection will perform the full TLS handshake and for all the",
    "start": "660690",
    "end": "668010"
  },
  {
    "text": "consequent requests will use the TLS session resumption that will give us 2.7",
    "start": "668010",
    "end": "673200"
  },
  {
    "text": "seconds again going to the hundred requests per average page on the modern",
    "start": "673200",
    "end": "680220"
  },
  {
    "text": "web there's going to be twelve point five seconds it is slow it is very slow",
    "start": "680220",
    "end": "687150"
  },
  {
    "text": "like that considering that you have fairly good latency that's 30 milliseconds but a lot of people don't",
    "start": "687150",
    "end": "693470"
  },
  {
    "text": "don't have these speeds so no surprise",
    "start": "693470",
    "end": "698490"
  },
  {
    "start": "697000",
    "end": "979000"
  },
  {
    "text": "that after releasing HTTP 1.0 RFC works began on a should be 1.1 mm it was",
    "start": "698490",
    "end": "705420"
  },
  {
    "text": "developed over a period of roughly four years and the first spec was released in",
    "start": "705420",
    "end": "711210"
  },
  {
    "text": "1997 follow up with the extension to the spec the RFC 2616 in 1999 and this is",
    "start": "711210",
    "end": "719280"
  },
  {
    "text": "the default this is what we have this is what every single client and browser speaks we never question whether it is",
    "start": "719280",
    "end": "727340"
  },
  {
    "text": "HTTP 1.1 compatible it's kind of there and we have really got used to it so",
    "start": "727340",
    "end": "733490"
  },
  {
    "text": "going back to see URL we again let's make another request this time to get",
    "start": "733490",
    "end": "738510"
  },
  {
    "text": "hub calm so the same bunch of request",
    "start": "738510",
    "end": "745230"
  },
  {
    "text": "headers we make a get we've upgraded our protocol version 2 1.1 we get the",
    "start": "745230",
    "end": "751470"
  },
  {
    "text": "response headers and we see some new",
    "start": "751470",
    "end": "756540"
  },
  {
    "text": "headers for example like transfer encoding and cache control this kind of sounds exciting and interesting we",
    "start": "756540",
    "end": "762870"
  },
  {
    "text": "receive our payload and it tells us that the connection to host github.com left",
    "start": "762870",
    "end": "768900"
  },
  {
    "text": "intact we're going to talk more about later more about that so let's make",
    "start": "768900",
    "end": "774450"
  },
  {
    "text": "another request also to github in this case let's download the octo cap because",
    "start": "774450",
    "end": "780510"
  },
  {
    "text": "octocat is super duper adorable I've omitted the requests the only thing you",
    "start": "780510",
    "end": "785850"
  },
  {
    "text": "can see when I'm invoking this URL command is that I'm passing another header which is range I'm",
    "start": "785850",
    "end": "791500"
  },
  {
    "text": "requesting that I want the 0 from 1024 bytes this is generally useful if you",
    "start": "791500",
    "end": "799180"
  },
  {
    "text": "want to resume a download or you read the tale of a growing object or in the case of browsers you might want to read",
    "start": "799180",
    "end": "805690"
  },
  {
    "text": "for example the just the beginning the metadata of the image to figure out the size and so you can start building out",
    "start": "805690",
    "end": "812620"
  },
  {
    "text": "the layout it's an interesting optimization so let's take a look at the",
    "start": "812620",
    "end": "819370"
  },
  {
    "text": "response of the of from from the server so we get a new status code that we",
    "start": "819370",
    "end": "824830"
  },
  {
    "text": "haven't seen before 206 partial content and we get a bunch of headers like cache",
    "start": "824830",
    "end": "830110"
  },
  {
    "text": "control in the age and content range and content length and connection keep alive",
    "start": "830110",
    "end": "836740"
  },
  {
    "text": "which this is this is something interesting we get our a bunch of headers that we've requested and again",
    "start": "836740",
    "end": "842410"
  },
  {
    "text": "the connection to the hosts left intact so what's up with all of this connection keep alive well connection keep alive is a really",
    "start": "842410",
    "end": "849490"
  },
  {
    "text": "cool performance booster that we got and I'm going to explain in a minute what exactly that means what else do we have",
    "start": "849490",
    "end": "858070"
  },
  {
    "text": "in HTTP 1.1 well we got compression and",
    "start": "858070",
    "end": "863470"
  },
  {
    "text": "chunked responses and byte ranges we also got something called pipelining so",
    "start": "863470",
    "end": "869710"
  },
  {
    "text": "that we can break from this straight request response cycle and we're going to talk more about that we have much",
    "start": "869710",
    "end": "877870"
  },
  {
    "text": "better flexible caching mechanisms to improve performance we got 24 new status",
    "start": "877870",
    "end": "885130"
  },
  {
    "text": "codes exciting like the one we've seen with a partial content and we get cookies even though the web was supposed",
    "start": "885130",
    "end": "891730"
  },
  {
    "text": "to be stateless we actually wanted to be stateful so we ended up with cookies",
    "start": "891730",
    "end": "897810"
  },
  {
    "text": "right so remember we talked about the TCP three-way handshake well what",
    "start": "897810",
    "end": "903910"
  },
  {
    "text": "happens with the keepalive connections which is which are by the way by default",
    "start": "903910",
    "end": "910150"
  },
  {
    "text": "on in HTTP 1.1 so we do the TCP handshake once and then we request a",
    "start": "910150",
    "end": "917560"
  },
  {
    "text": "bunch of data and then the same connection we just request other data and we just keep on doing",
    "start": "917560",
    "end": "923460"
  },
  {
    "text": "that until the connection is closed due to a timeout or some other reason so",
    "start": "923460",
    "end": "930230"
  },
  {
    "text": "this is a really cool thing that we got with it it should be 1.1 because suddenly we can reuse those TCP",
    "start": "930230",
    "end": "936330"
  },
  {
    "text": "connection we don't have to pay these extra round-trip for the TCP handshake",
    "start": "936330",
    "end": "942450"
  },
  {
    "text": "and for TLS every time we want to request another resource so what happens",
    "start": "942450",
    "end": "948660"
  },
  {
    "text": "going back to our synthetic network calculations and assuming again that",
    "start": "948660",
    "end": "954630"
  },
  {
    "text": "we're making a request to Twitter homepage now using they should be 1.1 with TLS handshake",
    "start": "954630",
    "end": "961639"
  },
  {
    "text": "we need 1.5 seconds to download 21",
    "start": "962690",
    "end": "968420"
  },
  {
    "text": "resources for a hundred resources the time went down to 6.5 and previously it",
    "start": "968420",
    "end": "975270"
  },
  {
    "text": "was 12 so that kind of looks impressive that's roughly 20% increase in speed for",
    "start": "975270",
    "end": "982860"
  },
  {
    "text": "secure request from it should be 1.0 to 1.1 though to be noted again this is all",
    "start": "982860",
    "end": "989310"
  },
  {
    "text": "synthetic calculations so in the real world example you could get sometimes",
    "start": "989310",
    "end": "994620"
  },
  {
    "text": "better performance sometimes worse it really depends but if you're kind of in a vacuum and you just look at these",
    "start": "994620",
    "end": "1000620"
  },
  {
    "text": "values you get much better performance to you to keep alive connections in",
    "start": "1000620",
    "end": "1007220"
  },
  {
    "text": "reality what happens is that we're not waiting for 6.5 seconds for a page to download on average if we got good late",
    "start": "1007220",
    "end": "1014480"
  },
  {
    "text": "and see it's going to be this is going to happen much faster reason being",
    "start": "1014480",
    "end": "1020950"
  },
  {
    "text": "browsers are not simple socket management apps they're actually quite",
    "start": "1020950",
    "end": "1026058"
  },
  {
    "text": "smart in doing a lot of things and one of the smart things that they do is that they open six simultaneous connections",
    "start": "1026059",
    "end": "1032058"
  },
  {
    "text": "per domain and this number can vary based on the browser or a setting but",
    "start": "1032059",
    "end": "1037520"
  },
  {
    "text": "six is kind of the general magic number so if you go to the waterfall model in",
    "start": "1037520",
    "end": "1044240"
  },
  {
    "text": "the network tab you can see how sixty requests are dispatched in parallel and",
    "start": "1044240",
    "end": "1049310"
  },
  {
    "text": "the six requests are dispatched in parallel and if you want to see the clustering of these what you need to do",
    "start": "1049310",
    "end": "1055910"
  },
  {
    "text": "is you need to sort by priority if you don't see priority in your network tab right click and take the priority this",
    "start": "1055910",
    "end": "1064940"
  },
  {
    "text": "is the same place where you can find if you want to see what protocol what version know what what protocol in",
    "start": "1064940",
    "end": "1071870"
  },
  {
    "text": "general the client and the server are using to exchange data so in this case",
    "start": "1071870",
    "end": "1082010"
  },
  {
    "text": "you can see that the coin downloaded the page and started passing it from top to",
    "start": "1082010",
    "end": "1088070"
  },
  {
    "text": "bottom and discovering resources it fires up the requests where CSS and",
    "start": "1088070",
    "end": "1097010"
  },
  {
    "text": "JavaScript become the top priority because they will block the rendering of your page and everything else is kind of",
    "start": "1097010",
    "end": "1103010"
  },
  {
    "text": "lower priority things like images now this is probably a good moment to talk",
    "start": "1103010",
    "end": "1109220"
  },
  {
    "text": "about out of line blocking hand of line blocking means that each subsequent",
    "start": "1109220",
    "end": "1114740"
  },
  {
    "text": "requests request has to wait for the previous request to finish so it's all very conceptual it's like a line so it",
    "start": "1114740",
    "end": "1123680"
  },
  {
    "text": "just goes one of to the other you can't make the request for the JavaScript until you've got the response for your",
    "start": "1123680",
    "end": "1130640"
  },
  {
    "text": "HTML document now if something happens with the HTML response while it is in",
    "start": "1130640",
    "end": "1135800"
  },
  {
    "text": "transit here's not only you won't be able to download to fetch the HTML",
    "start": "1135800",
    "end": "1143180"
  },
  {
    "text": "document from the server but also all these subsequent request responses won't",
    "start": "1143180",
    "end": "1149870"
  },
  {
    "text": "be easily executed so everything else in the pipeline is kind of waiting there and is unable to be fetched and you just",
    "start": "1149870",
    "end": "1156650"
  },
  {
    "text": "looking at your browser and it's spinning to infinity so I've mentioned",
    "start": "1156650",
    "end": "1163340"
  },
  {
    "text": "pipelining which pipelining is was kind of those things that is like oh we know how to solve had of line blocking let's",
    "start": "1163340",
    "end": "1169550"
  },
  {
    "text": "try and do it because we've obviously been we're of this problem for a while",
    "start": "1169550",
    "end": "1174750"
  },
  {
    "text": "pipelining is a mechanism that will allow us to break from the strict request response cycle so what happens",
    "start": "1174750",
    "end": "1181120"
  },
  {
    "text": "is after the TLS handshake the client can request multiple resources at the",
    "start": "1181120",
    "end": "1186250"
  },
  {
    "text": "same time so in this case a document and a JavaScript and just fire them at the",
    "start": "1186250",
    "end": "1195340"
  },
  {
    "text": "same time without waiting for the response to come for the first response",
    "start": "1195340",
    "end": "1200350"
  },
  {
    "text": "to come back and hence in this case make better use of the server time so the",
    "start": "1200350",
    "end": "1206830"
  },
  {
    "text": "server will will find will will",
    "start": "1206830",
    "end": "1216790"
  },
  {
    "text": "acknowledge for the pipeline request and",
    "start": "1216790",
    "end": "1221980"
  },
  {
    "text": "so it will probe the response for the HTML reads it will probe the HTML response and the JavaScript response it",
    "start": "1221980",
    "end": "1228730"
  },
  {
    "text": "sounds great in theory but what why we",
    "start": "1228730",
    "end": "1234100"
  },
  {
    "text": "haven't been aware of the pipelining as much and why the question is why is it",
    "start": "1234100",
    "end": "1240880"
  },
  {
    "text": "disabled in browsers actually by default is because parallel processing on the server introduced subtle implications",
    "start": "1240880",
    "end": "1247180"
  },
  {
    "text": "and because it requires extra serialization of response and actually",
    "start": "1247180",
    "end": "1254560"
  },
  {
    "text": "pipelining sometimes introduced worse performance or didn't didn't bring",
    "start": "1254560",
    "end": "1260110"
  },
  {
    "text": "anything better to the table it there are some use cases of good use of",
    "start": "1260110",
    "end": "1265660"
  },
  {
    "text": "pipelining but it's mainly when you control both the client and the server",
    "start": "1265660",
    "end": "1270810"
  },
  {
    "text": "right let's have a chat about HTTP service a little bit so in HTTP 1.0 1.1",
    "start": "1270810",
    "end": "1280870"
  },
  {
    "text": "in both 1.0 actually it should be had as our textual so the average request will",
    "start": "1280870",
    "end": "1287740"
  },
  {
    "text": "have from 700 to 800 bytes it can explore it can explode up to to hunt to",
    "start": "1287740",
    "end": "1293200"
  },
  {
    "text": "kilobytes usually because of the cookies cookies are can become quite lengthy and",
    "start": "1293200",
    "end": "1300490"
  },
  {
    "text": "it doesn't seem like it is as much but it is an",
    "start": "1300490",
    "end": "1305630"
  },
  {
    "text": "were handed every single request response incurs every time so even",
    "start": "1305630",
    "end": "1314060"
  },
  {
    "text": "though we perform optimizations and compression on the response message headers generally remain uncompressed so",
    "start": "1314060",
    "end": "1323810"
  },
  {
    "text": "talking about bundling and minimization they're like second nature to us we",
    "start": "1323810",
    "end": "1330410"
  },
  {
    "text": "religiously put everything in one big file but one big file and we concatenate",
    "start": "1330410",
    "end": "1335480"
  },
  {
    "text": "it and we try to make it as small as possible because based on the learnings of how HTTP works assuming it is on top",
    "start": "1335480",
    "end": "1343340"
  },
  {
    "text": "of TCP this this bundling and minimization makes a lot of sense we",
    "start": "1343340",
    "end": "1349970"
  },
  {
    "text": "minimize because the fastest part is about not sent and we concatenate because we can reduce so much of the",
    "start": "1349970",
    "end": "1355940"
  },
  {
    "text": "protocol overhead all of the handshakes all of the header bytes all of that so",
    "start": "1355940",
    "end": "1362300"
  },
  {
    "text": "it's similar to doing pipelining but it's just we're doing it at the application level so reducing the number",
    "start": "1362300",
    "end": "1368240"
  },
  {
    "text": "of total requests is one of the best performance optimizations spriting is a",
    "start": "1368240",
    "end": "1374780"
  },
  {
    "text": "very similar hack slash trick this is a sprite I took from Amazon homepage so",
    "start": "1374780",
    "end": "1381350"
  },
  {
    "text": "instead of fetching every single tiny resource separately which would be very",
    "start": "1381350",
    "end": "1387680"
  },
  {
    "text": "very expensive we put them in one big file and set it all as one",
    "start": "1387680",
    "end": "1394130"
  },
  {
    "text": "but we shouldn't fool ourselves that this comes at no cost this brings",
    "start": "1394130",
    "end": "1399520"
  },
  {
    "text": "similar this brings some of the issues so with bundling and minimization we",
    "start": "1399520",
    "end": "1406070"
  },
  {
    "text": "have a certain complexity in creating them so we're actually pushing the complexity from the protocol level to",
    "start": "1406070",
    "end": "1412700"
  },
  {
    "text": "our application level we have potential caching problems with bundling similar",
    "start": "1412700",
    "end": "1418130"
  },
  {
    "text": "with bonding and minimization and sprites once one of these tiny resources",
    "start": "1418130",
    "end": "1426230"
  },
  {
    "text": "one of those tiny JavaScript files changes we actually have to flush the whole cache and refresh it instead of",
    "start": "1426230",
    "end": "1432020"
  },
  {
    "text": "just refreshing the one part that has changed and we're surprised for example the browser has to keep all the",
    "start": "1432020",
    "end": "1438950"
  },
  {
    "text": "in memory so the reason why everybody started paying so much attention to HDPE",
    "start": "1438950",
    "end": "1446300"
  },
  {
    "text": "as a protocol is because of HTTP - so the basis of HTTP - is another protocol",
    "start": "1446300",
    "end": "1453860"
  },
  {
    "text": "called speedy or as PDI it's an experimental protocol developed at Google and engineers at Google had",
    "start": "1453860",
    "end": "1461800"
  },
  {
    "text": "several goals in mind when they were developing as a speedy they wanted to",
    "start": "1461800",
    "end": "1466910"
  },
  {
    "text": "reduce the latency of web pages they wanted to minimize the cost of deployment complexity and to avoid any",
    "start": "1466910",
    "end": "1474470"
  },
  {
    "text": "changes in the network infrastructure because this is something that we actually cannot change we're not gonna",
    "start": "1474470",
    "end": "1479930"
  },
  {
    "text": "go all over the world and change every single router switch and everything just kind of like erase what we had",
    "start": "1479930",
    "end": "1485690"
  },
  {
    "text": "previously and start fresh this is not how the real world works so in 2015 it",
    "start": "1485690",
    "end": "1492590"
  },
  {
    "text": "has been draft for HTP - and h-back have been approved but the work is still",
    "start": "1492590",
    "end": "1498860"
  },
  {
    "text": "ongoing so HTTP - also how the cool kids call it age - is really really cool and",
    "start": "1498860",
    "end": "1508460"
  },
  {
    "text": "full of Wonders if I were to do a see",
    "start": "1508460",
    "end": "1513950"
  },
  {
    "text": "URL request and by the way crl can do can speak HTTP - then for the outside",
    "start": "1513950",
    "end": "1523460"
  },
  {
    "text": "observer not much would have changed you'd see the same request response",
    "start": "1523460",
    "end": "1529430"
  },
  {
    "text": "cycle same headers status codes that keep alive connections all of this is",
    "start": "1529430",
    "end": "1535070"
  },
  {
    "text": "there but for us to understand what is the difference between all the previous versions of HTTP and h2 is we need to",
    "start": "1535070",
    "end": "1541700"
  },
  {
    "text": "look underneath we need to analyze the packets so what we do we were we fire",
    "start": "1541700",
    "end": "1547220"
  },
  {
    "text": "Wireshark and once you're able to decrypt your traffic because HTTP - will",
    "start": "1547220",
    "end": "1552620"
  },
  {
    "text": "be served over HTTPS only in browsers and we filter our HT traffic we can see",
    "start": "1552620",
    "end": "1558980"
  },
  {
    "text": "new types of packets which are actually we're going to learn they're called frames so going top to bottom we have a",
    "start": "1558980",
    "end": "1567440"
  },
  {
    "text": "window update setting had as data ping on and on so the key",
    "start": "1567440",
    "end": "1575890"
  },
  {
    "text": "differences between HCP 2 and its predecessors are that it is a binary",
    "start": "1575890",
    "end": "1582700"
  },
  {
    "text": "protocol instead of a textual so it introduces a binary framing lam can explain more on that later",
    "start": "1582700",
    "end": "1589900"
  },
  {
    "text": "so because of that it will allow full multiplexing of requests and responses",
    "start": "1589900",
    "end": "1596340"
  },
  {
    "text": "we can also do server push in other words the server can proactively decide",
    "start": "1596340",
    "end": "1601390"
  },
  {
    "text": "to push some of the resources to the client similar to TCP that can do flow",
    "start": "1601390",
    "end": "1610720"
  },
  {
    "text": "control now we can do flow control add the HTTP at the application level HD and HTTP so and due to multiplexing we only",
    "start": "1610720",
    "end": "1621040"
  },
  {
    "text": "need one connection per origin instead of 6 it has been proven empirically that",
    "start": "1621040",
    "end": "1628000"
  },
  {
    "text": "one connection is enough so you don't need to open more you won't get in any better performance if you're using HP 2",
    "start": "1628000",
    "end": "1635140"
  },
  {
    "text": "and multiple connections and H 2 also introduces had a compression to reduce",
    "start": "1635140",
    "end": "1643390"
  },
  {
    "text": "overhead it's actually not at HTTP - it's actually H back but we're going to talk about that soon so binary framing",
    "start": "1643390",
    "end": "1654130"
  },
  {
    "text": "layer is the key to a lot of features that are possible in H 2 if we look at",
    "start": "1654130",
    "end": "1659620"
  },
  {
    "text": "the previous versions like HTTP 1.1 what we did we had a convention we said the",
    "start": "1659620",
    "end": "1664660"
  },
  {
    "text": "first line is going to be our request where we say the verb the document address we say the protocol version and",
    "start": "1664660",
    "end": "1670540"
  },
  {
    "text": "then for the each new line we're going to have a request header and when we",
    "start": "1670540",
    "end": "1677260"
  },
  {
    "text": "have two new lines this is how we separate our headers from our payload and this was just just a convention with",
    "start": "1677260",
    "end": "1686350"
  },
  {
    "text": "the h2 we get something else so h2",
    "start": "1686350",
    "end": "1693250"
  },
  {
    "text": "messages are encapsulated in a specific way and we get these frames and there",
    "start": "1693250",
    "end": "1698470"
  },
  {
    "text": "are different types of frames there are 10 types of frames we've got had Hatter's are obviously there to send",
    "start": "1698470",
    "end": "1705640"
  },
  {
    "text": "headers data is to send payload settings to negotiate various configuration",
    "start": "1705640",
    "end": "1712480"
  },
  {
    "text": "parameters between the server and the client ping to measure the minimal round-trip and go away to initiate the",
    "start": "1712480",
    "end": "1719880"
  },
  {
    "text": "shutdown of a connection and basically because of that because we suddenly have",
    "start": "1719880",
    "end": "1727260"
  },
  {
    "text": "HTTP 2 which uses which is a binary protocol it's suddenly not compatible with the previous version and that's why",
    "start": "1727260",
    "end": "1733450"
  },
  {
    "text": "we have a whole version increment and we don't have an HTTP 1.2 but we have an h2",
    "start": "1733450",
    "end": "1738660"
  },
  {
    "text": "so multiplexing multiplexing in essence means that we allow multiple requests",
    "start": "1738660",
    "end": "1745960"
  },
  {
    "start": "1739000",
    "end": "2105000"
  },
  {
    "text": "and responses to be in flight at the same time it is and it's something very",
    "start": "1745960",
    "end": "1752410"
  },
  {
    "text": "different from what we had before where we said we have a very strict request",
    "start": "1752410",
    "end": "1757570"
  },
  {
    "text": "response cycle we send the request we'll wait for the server to do the processing the client just kind of doesn't do",
    "start": "1757570",
    "end": "1763120"
  },
  {
    "text": "anything meanwhile then it receives the response and only after that it can send another request so how does it work in",
    "start": "1763120",
    "end": "1771700"
  },
  {
    "text": "more detail so let's imagine the whole canvas is our one single connection you",
    "start": "1771700",
    "end": "1778210"
  },
  {
    "text": "could think of it as a TCP connection so the connection converter can carry multiple stream streams or virtual they",
    "start": "1778210",
    "end": "1785110"
  },
  {
    "text": "don't exist physically there's no separation in the physical world that will tell you this is stream a and this",
    "start": "1785110",
    "end": "1791020"
  },
  {
    "text": "is stream B they're all kind of just all in our mind and the number of streams can be quite high I think it's up to 2",
    "start": "1791020",
    "end": "1797710"
  },
  {
    "text": "billion or so so streams are",
    "start": "1797710",
    "end": "1802990"
  },
  {
    "text": "bi-directional channels of communication that roughly it will translate like a",
    "start": "1802990",
    "end": "1808300"
  },
  {
    "text": "request response cycle and each stream can carry a number of messages messages",
    "start": "1808300",
    "end": "1814330"
  },
  {
    "text": "identified their stream by the stream identifier this is kind of where the whole virtual part comes in and messages",
    "start": "1814330",
    "end": "1822220"
  },
  {
    "text": "themselves are composed of frames so when I'm making the request I've got a header headers frame and when I'm",
    "start": "1822220",
    "end": "1827740"
  },
  {
    "text": "getting a response I'm having some headers and some data for example and that's pretty much it",
    "start": "1827740",
    "end": "1836570"
  },
  {
    "text": "what happens is that while the client on the stream one might be sending a",
    "start": "1836570",
    "end": "1841730"
  },
  {
    "text": "request on the stream to it might be getting some responses from from the",
    "start": "1841730",
    "end": "1847130"
  },
  {
    "text": "server and we can have many more streams initiated to initiate all those",
    "start": "1847130",
    "end": "1854690"
  },
  {
    "text": "different exchanges and to interleave requests and responses in parallel",
    "start": "1854690",
    "end": "1860690"
  },
  {
    "text": "without blocking on any one of them because we have so many streams as I",
    "start": "1860690",
    "end": "1868309"
  },
  {
    "text": "said you can have up to a two billion you need to have something like a stream",
    "start": "1868309",
    "end": "1873740"
  },
  {
    "text": "prioritization each stream may have a weight and it can be dependent on",
    "start": "1873740",
    "end": "1880460"
  },
  {
    "text": "another stream in concept this is similar to what browsers have been doing",
    "start": "1880460",
    "end": "1885980"
  },
  {
    "text": "it kind they were assigning some internal priority to all the different resources and saying that style shades",
    "start": "1885980",
    "end": "1892610"
  },
  {
    "text": "and JavaScript are going to be of higher priority than the images but now you actually can do it yourself with the",
    "start": "1892610",
    "end": "1898730"
  },
  {
    "text": "stream prioritization if for some reason some images are going to be more important for you to be downloaded",
    "start": "1898730",
    "end": "1904010"
  },
  {
    "text": "rather than the other images and due to multiplexing at the application level we",
    "start": "1904010",
    "end": "1909950"
  },
  {
    "text": "actually don't want to overflow either the client or the server so we need a way to tell them to tell either of the",
    "start": "1909950",
    "end": "1916429"
  },
  {
    "text": "parties to back off so that's why TCP flow control is not good enough for this",
    "start": "1916429",
    "end": "1922550"
  },
  {
    "text": "we're introducing HTTP flow control where both the client and the server are",
    "start": "1922550",
    "end": "1930050"
  },
  {
    "text": "negotiating and they're setting their desired window size which can be a shrinked or expanded right so let's talk",
    "start": "1930050",
    "end": "1940490"
  },
  {
    "text": "about server push so if you think about",
    "start": "1940490",
    "end": "1947030"
  },
  {
    "text": "it if you're a client and you're requesting an HTML document and you're",
    "start": "1947030",
    "end": "1952040"
  },
  {
    "text": "not a links browser you probably would want to download all the other resources",
    "start": "1952040",
    "end": "1958820"
  },
  {
    "text": "for this page to render properly like style sheets and JavaScript so kind of makes sense that you probably",
    "start": "1958820",
    "end": "1965370"
  },
  {
    "text": "need them this is the idea behind a server push so if the client is",
    "start": "1965370",
    "end": "1970680"
  },
  {
    "text": "requesting an HTML document what the server can do in this case the server will prep the response but it will also",
    "start": "1970680",
    "end": "1979250"
  },
  {
    "text": "meanwhile initiate a couple of other streams with some frames called push",
    "start": "1979250",
    "end": "1987030"
  },
  {
    "text": "promises so your application server can decide that if you're requesting index",
    "start": "1987030",
    "end": "1993240"
  },
  {
    "text": "dot HTML you probably want to also download script or Jess and maybe also the style dot CSS so what the server",
    "start": "1993240",
    "end": "2001040"
  },
  {
    "text": "does is it opens up extra two streams and it sends those messages to the",
    "start": "2001040",
    "end": "2009470"
  },
  {
    "text": "client and it's important that the push promise frames reach the kind earlier then then the response itself because we",
    "start": "2009470",
    "end": "2019310"
  },
  {
    "text": "don't want the client to grab the response start passing it and then sending the requests straight away",
    "start": "2019310",
    "end": "2024890"
  },
  {
    "text": "because then we'll create duplication now once the push promise frames reach",
    "start": "2024890",
    "end": "2038360"
  },
  {
    "text": "the client the client can either accept them or reject them by closing the",
    "start": "2038360",
    "end": "2044450"
  },
  {
    "text": "stream I think this is just a conceptual model of how server push works how",
    "start": "2044450",
    "end": "2050480"
  },
  {
    "text": "you're going to apply it in the real world is a totally different problem and",
    "start": "2050480",
    "end": "2055580"
  },
  {
    "text": "probably would require a talk in itself because there are multiple problems that",
    "start": "2055580",
    "end": "2061520"
  },
  {
    "text": "you would like to solve what about what if the client has the resources cached and probably doesn't want the push",
    "start": "2061520",
    "end": "2067760"
  },
  {
    "text": "promise at all to happen what about the security what about the overflow well we have the TCP we have the HTTP flow",
    "start": "2067760",
    "end": "2075290"
  },
  {
    "text": "control there are some proposals where you can use the link header would like a",
    "start": "2075290",
    "end": "2080840"
  },
  {
    "text": "preload so that you can negotiate this better would you like to push all of the",
    "start": "2080840",
    "end": "2085940"
  },
  {
    "text": "resources at the same time or maybe you just want to be a more granular so I think there are a lot of questions that",
    "start": "2085940",
    "end": "2092090"
  },
  {
    "text": "people are still asking and experimenting in terms of serverpush but in general",
    "start": "2092090",
    "end": "2099310"
  },
  {
    "text": "this is the journey this is the idea of how it works right so we said that mmm",
    "start": "2099310",
    "end": "2109440"
  },
  {
    "start": "2105000",
    "end": "2291000"
  },
  {
    "text": "HTTP headers represent an overhead especially when we've got fairly lengthy",
    "start": "2109440",
    "end": "2115240"
  },
  {
    "text": "cookies in h2 this is solved using H back which is a compression format",
    "start": "2115240",
    "end": "2121780"
  },
  {
    "text": "specifically designed for to work well with HTTP headers it is composed of",
    "start": "2121780",
    "end": "2130620"
  },
  {
    "text": "three main components so we first we've",
    "start": "2130620",
    "end": "2136690"
  },
  {
    "text": "got a static table it contains 61 commonly used HTTP",
    "start": "2136690",
    "end": "2142450"
  },
  {
    "text": "headers we have a dynamic table that is initially empty but will be populated",
    "start": "2142450",
    "end": "2148810"
  },
  {
    "text": "with new headers for the duration of the connection and the rest of the headers that are not indexed so they can't be",
    "start": "2148810",
    "end": "2154810"
  },
  {
    "text": "found in a static table or the dynamic table will be compressed encoded using",
    "start": "2154810",
    "end": "2160470"
  },
  {
    "text": "static Huffman encoding code which has been statistically obtained on a large",
    "start": "2160470",
    "end": "2167080"
  },
  {
    "text": "sample of HTTP headers and so this is",
    "start": "2167080",
    "end": "2172390"
  },
  {
    "text": "how it's gonna work when I'm making my first request and if I'm not using h-back what will happen I'm just gonna",
    "start": "2172390",
    "end": "2178270"
  },
  {
    "text": "send all of these headers as they are with no compression now if I'm using",
    "start": "2178270",
    "end": "2186340"
  },
  {
    "text": "h-back the common headers found in the static table will be encoded each with",
    "start": "2186340",
    "end": "2193570"
  },
  {
    "text": "one byte so things like method get' and scheme HTTP and path slash is a very",
    "start": "2193570",
    "end": "2199420"
  },
  {
    "text": "very common hat as we use them very often they can be found in almost in a ton of requests also things like",
    "start": "2199420",
    "end": "2206170"
  },
  {
    "text": "sometimes we just we just know that except or user agent without the the",
    "start": "2206170",
    "end": "2212140"
  },
  {
    "text": "other part the value of the key value pair can also be encoded with a single",
    "start": "2212140",
    "end": "2217690"
  },
  {
    "text": "byte so everything marked in green is what we can encode with a single byte all the",
    "start": "2217690",
    "end": "2225010"
  },
  {
    "text": "leftovers which were marked in which we may in black will be encoded with a static",
    "start": "2225010",
    "end": "2230740"
  },
  {
    "text": "Huffman code in addition to that we're gonna grab the key value pairs of the",
    "start": "2230740",
    "end": "2236350"
  },
  {
    "text": "headers that we're just now encoded using Huffman and they will be appended to the dynamic table what is happening",
    "start": "2236350",
    "end": "2244510"
  },
  {
    "text": "now is we're going to save the cookies which are probably quite lengthy in an index table and we will save precious",
    "start": "2244510",
    "end": "2251830"
  },
  {
    "text": "bytes for all these subsequent requests so what I'm gonna do my second request",
    "start": "2251830",
    "end": "2257800"
  },
  {
    "text": "using H bar this is what is going to",
    "start": "2257800",
    "end": "2264670"
  },
  {
    "text": "happen we will encode using the static table these are all the headers which",
    "start": "2264670",
    "end": "2269710"
  },
  {
    "text": "are marked in green so again method get' scheme HTTP we will encode using our dynamic table how does",
    "start": "2269710",
    "end": "2276820"
  },
  {
    "text": "that we have recently inserted and these are pink purplish kind of color things",
    "start": "2276820",
    "end": "2283630"
  },
  {
    "text": "like user agent and cookie and and host and the rest of it is going to be encoded using the Huffman code believe",
    "start": "2283630",
    "end": "2291640"
  },
  {
    "start": "2291000",
    "end": "2515000"
  },
  {
    "text": "it or not but this kind of compression can reduce from 30 to 80 percent of",
    "start": "2291640",
    "end": "2297130"
  },
  {
    "text": "header bytes and I think this is quite impressive so let's think about all of",
    "start": "2297130",
    "end": "2306250"
  },
  {
    "text": "the previous best practices slash hacks that we've been using in previous",
    "start": "2306250",
    "end": "2312850"
  },
  {
    "text": "versions of HTTP and how do they translate in the world of HTTP 2 so we",
    "start": "2312850",
    "end": "2319300"
  },
  {
    "text": "used to have six connections per origin this is no longer needed if we're using h2 so one single connection is enough",
    "start": "2319300",
    "end": "2327250"
  },
  {
    "text": "hence we also shouldn't be doing domain sharding domain sharding was something used for websites that desired to have",
    "start": "2327250",
    "end": "2333850"
  },
  {
    "text": "more than 6 connections so they would shot their domains and the brown would trick browsers into thinking that they",
    "start": "2333850",
    "end": "2340420"
  },
  {
    "text": "can open not 6 but maybe 12 connections at the same time so this doesn't make",
    "start": "2340420",
    "end": "2347650"
  },
  {
    "text": "sense anymore inlining resources is generally not",
    "start": "2347650",
    "end": "2352720"
  },
  {
    "text": "necessarily because of multiplexing and push and also once we are not in lining",
    "start": "2352720",
    "end": "2358890"
  },
  {
    "text": "our resources we can actually cash them so I think this is a benefit that we're",
    "start": "2358890",
    "end": "2364800"
  },
  {
    "text": "getting naive concatenation of assets so",
    "start": "2364800",
    "end": "2371520"
  },
  {
    "text": "bundled assets assets we said resulting more expensive cache invalidation and delayed execution and unnecessary",
    "start": "2371520",
    "end": "2378750"
  },
  {
    "text": "transfers for some of the pages but smart concatenation still makes a lot of",
    "start": "2378750",
    "end": "2384600"
  },
  {
    "text": "sense because a data can be better compressed if it is bundled and be even",
    "start": "2384600",
    "end": "2393090"
  },
  {
    "text": "though the requests are cheap there's still requests and they still carry some overhead so we should keep that in mind",
    "start": "2393090",
    "end": "2400020"
  },
  {
    "text": "the similar idea applies to sprites your app needs to find the right balance",
    "start": "2400020",
    "end": "2406140"
  },
  {
    "text": "between putting everything in one bin versus spawning hundreds of requests for",
    "start": "2406140",
    "end": "2413550"
  },
  {
    "text": "each time of resource so these things kind of should find the right way to use",
    "start": "2413550",
    "end": "2420360"
  },
  {
    "text": "them what does still make sense in the world of HTTP - well these are called",
    "start": "2420360",
    "end": "2428070"
  },
  {
    "text": "evergreen optimizations so regardless of the HTTP version you're using there should be there and you should be",
    "start": "2428070",
    "end": "2434940"
  },
  {
    "text": "thinking about them so we need to have a fine-tuned TCP stack make use of smart",
    "start": "2434940",
    "end": "2440820"
  },
  {
    "text": "caching use etags caching is or is a fantastic way to optimize your app use",
    "start": "2440820",
    "end": "2448290"
  },
  {
    "text": "CDNs because service placing servers geographically closer to your users will",
    "start": "2448290",
    "end": "2454740"
  },
  {
    "text": "reduce the latency and this is not only a problem for some of the more remote",
    "start": "2454740",
    "end": "2462480"
  },
  {
    "text": "countries but maybe like fold first of all places it can still be a problem",
    "start": "2462480",
    "end": "2470310"
  },
  {
    "text": "think about Australia I think they have horrendous latency and it's very painful to navigate the web if you're there so",
    "start": "2470310",
    "end": "2479250"
  },
  {
    "text": "eliminate unnecessary resources there's if if you don't need something just",
    "start": "2479250",
    "end": "2485490"
  },
  {
    "text": "don't don't put it there don't extra latencies for no reason is generally no fun",
    "start": "2485490",
    "end": "2491580"
  },
  {
    "text": "always compress your assets regardless of the HTTP version compresses reduces the number of bytes on the wire and this",
    "start": "2491580",
    "end": "2498339"
  },
  {
    "text": "is what we are generally trying to do and maybe try to reduce your I had a",
    "start": "2498339",
    "end": "2505510"
  },
  {
    "text": "bytes mostly think about cookies maybe don't carry so many cookies with you",
    "start": "2505510",
    "end": "2510820"
  },
  {
    "text": "along but generally hooray for h-back right let's talk a little bit about",
    "start": "2510820",
    "end": "2517839"
  },
  {
    "start": "2515000",
    "end": "2938000"
  },
  {
    "text": "statistics so this is a chart replicated from a presentation given by Patrick",
    "start": "2517839",
    "end": "2524230"
  },
  {
    "text": "Hammond on HTTP 2 and even though it has been quite a long time because this",
    "start": "2524230",
    "end": "2532030"
  },
  {
    "text": "presentation was given in March 2016 I think the data from there still applies",
    "start": "2532030",
    "end": "2538050"
  },
  {
    "text": "so he shared some stats on the impact of latency and HTTP versions on the",
    "start": "2538050",
    "end": "2546430"
  },
  {
    "text": "Financial Times comm website so what we can see from here and as you can see the",
    "start": "2546430",
    "end": "2555099"
  },
  {
    "text": "blue line that's HTTP 1.1 and the orange one this is HTTP 2 is that for users",
    "start": "2555099",
    "end": "2562599"
  },
  {
    "text": "with low latency say under 100 200 milliseconds you can't see much benefit",
    "start": "2562599",
    "end": "2569740"
  },
  {
    "text": "in switching from HTTP 1.1 to h2 it kind of seems the same but h2 truly shines",
    "start": "2569740",
    "end": "2577570"
  },
  {
    "text": "once your latency becomes much higher so",
    "start": "2577570",
    "end": "2582730"
  },
  {
    "text": "you can see a big impact based based on that also a bit of the outdated stats",
    "start": "2582730",
    "end": "2593380"
  },
  {
    "text": "but again couldn't find anything more fresh than that so last year that is",
    "start": "2593380",
    "end": "2601000"
  },
  {
    "text": "roughly a year ago Mozilla at FOSDEM shared some traffic stats anonymously",
    "start": "2601000",
    "end": "2608109"
  },
  {
    "text": "shared by the Firefox browser so if we're looking at all of the traffic that",
    "start": "2608109",
    "end": "2615670"
  },
  {
    "text": "goes for Firefox it says that roughly 30% of it is served",
    "start": "2615670",
    "end": "2621710"
  },
  {
    "text": "using h2 I found some other data there is a website called w3 tasks they have",
    "start": "2621710",
    "end": "2630410"
  },
  {
    "text": "all the different statistics about the web and they claim that currently 23.2% of all the websites using or using HTTP",
    "start": "2630410",
    "end": "2640340"
  },
  {
    "text": "- and this is this year and last year they said it was roughly 11 so maybe all",
    "start": "2640340",
    "end": "2646160"
  },
  {
    "text": "of the Firefox users are all very HTTP to savvy I don't know because they had",
    "start": "2646160",
    "end": "2653990"
  },
  {
    "text": "30% last year but this doesn't look too bad but if we take into account that HTP -",
    "start": "2653990",
    "end": "2661150"
  },
  {
    "text": "traffic can be if we take into account",
    "start": "2661150",
    "end": "2666740"
  },
  {
    "text": "only HTTP traffic based on the idea that h2 can be deployed only via HTTPS",
    "start": "2666740",
    "end": "2674860"
  },
  {
    "text": "because otherwise you can't do it is disabled in the browsers we're seeing that it's actually 60% of the traffic",
    "start": "2674860",
    "end": "2683180"
  },
  {
    "text": "the reason reason being is most visited",
    "start": "2683180",
    "end": "2689120"
  },
  {
    "text": "websites like Google and Twitter and Facebook a lot of them you are served partially or entirely via h2 and piracy",
    "start": "2689120",
    "end": "2698450"
  },
  {
    "text": "if we take a look at the top 10 million websites then this is going to be it is 12% I think regardless of that it looks",
    "start": "2698450",
    "end": "2706190"
  },
  {
    "text": "like a very nice trend talking a little",
    "start": "2706190",
    "end": "2713540"
  },
  {
    "text": "bit more about HTTP - stats so fastly",
    "start": "2713540",
    "end": "2718880"
  },
  {
    "text": "did a presentation and you can find it online they've got a whole bunch of slides on the different experiments that",
    "start": "2718880",
    "end": "2724280"
  },
  {
    "text": "they ran comparing the performance of different HTTP versions and this is some",
    "start": "2724280",
    "end": "2732740"
  },
  {
    "text": "interesting insight that I found out when testing HTTP 1.1 and HTTP 2 in",
    "start": "2732740",
    "end": "2741080"
  },
  {
    "text": "different scenarios so in this case what we're having we're testing serving a website in Firefox we've got 40",
    "start": "2741080",
    "end": "2749690"
  },
  {
    "text": "milliseconds later see and zero packet loss so the website loads faster over h2 h1 is lagging",
    "start": "2749690",
    "end": "2757670"
  },
  {
    "text": "behind again this is the blue tie and this kind of matches our expectations from everything we've learned HTTP 2",
    "start": "2757670",
    "end": "2764329"
  },
  {
    "text": "should be this Silver Bullet that is just gonna be like everything's going to be so much faster and a lot more amazing",
    "start": "2764329",
    "end": "2773029"
  },
  {
    "text": "now we are running the same test we also",
    "start": "2773029",
    "end": "2778130"
  },
  {
    "text": "do Firefox 40 milliseconds latency but we're introducing 2% packet loss and h2",
    "start": "2778130",
    "end": "2786369"
  },
  {
    "text": "performs poorly the page will load faster in the browser over HTTP 1.1 and",
    "start": "2786369",
    "end": "2795729"
  },
  {
    "text": "you might be having a question why is",
    "start": "2795729",
    "end": "2801109"
  },
  {
    "text": "that why is that happening even though HTTP 2 eliminated",
    "start": "2801109",
    "end": "2807920"
  },
  {
    "text": "head-of-line blocking at the application level head-of-line blocking still exists",
    "start": "2807920",
    "end": "2813619"
  },
  {
    "text": "at the TCP layer so TCP as a protocol it's reliable and ordered and kind of",
    "start": "2813619",
    "end": "2820160"
  },
  {
    "text": "wants you to make sure that you've received the packet that it has sent",
    "start": "2820160",
    "end": "2825670"
  },
  {
    "text": "this makes it prone to the problem that we have just discussed which is the head",
    "start": "2825670",
    "end": "2831410"
  },
  {
    "text": "of line blocking another question why this didn't happen for HTTP 1.1 well it",
    "start": "2831410",
    "end": "2838099"
  },
  {
    "text": "probably did happen but because in browsers when we were running h-2b 1.1 we are opening six simultaneous",
    "start": "2838099",
    "end": "2843589"
  },
  {
    "text": "connections well some of them will succeed so you're not actually blocked on one single connection so you're going",
    "start": "2843589",
    "end": "2849619"
  },
  {
    "text": "to open multiple so yes six connections in HB 1.1 actually performed better than",
    "start": "2849619",
    "end": "2857079"
  },
  {
    "text": "h2 with 2% packet loss this is where",
    "start": "2857079",
    "end": "2863390"
  },
  {
    "text": "quake comes into the spotlight quake is an experimental transport layer built",
    "start": "2863390",
    "end": "2869119"
  },
  {
    "text": "over UDP that very much doesn't resemble UDP apparently it",
    "start": "2869119",
    "end": "2875630"
  },
  {
    "text": "resembles something more of a tcp plus TLS plus h2",
    "start": "2875630",
    "end": "2883359"
  },
  {
    "text": "it is considered to be a step forward eliminated in eliminating head-of-line",
    "start": "2883510",
    "end": "2888710"
  },
  {
    "text": "blocking problem at the transport layer and I think we're yet to see the",
    "start": "2888710",
    "end": "2894920"
  },
  {
    "text": "finished drafts of it and maybe who knows the widespread adoption in the",
    "start": "2894920",
    "end": "2900079"
  },
  {
    "text": "future if you want to learn more I highly recommend this book",
    "start": "2900079",
    "end": "2905990"
  },
  {
    "text": "this is high-performance browser networking by ilya grigorik an engineer from google it talks not",
    "start": "2905990",
    "end": "2914059"
  },
  {
    "text": "only about HTTP but all the different components that make up the web it has a",
    "start": "2914059",
    "end": "2920900"
  },
  {
    "text": "great chapter on mobile networks and it explains in a lot more depth all the",
    "start": "2920900",
    "end": "2926569"
  },
  {
    "text": "different things about h2 and latency and why latency is more important than",
    "start": "2926569",
    "end": "2931940"
  },
  {
    "text": "bandwidth so highly highly recommended and this is it thank you",
    "start": "2931940",
    "end": "2940089"
  }
]